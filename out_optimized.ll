; ModuleID = 'out_reg2mem.ll'
source_filename = "llvm-link"

@_parameterization_Nil = linkonce_odr constant [2 x ptr] [ptr @nil_typ, ptr null]
@_parameterization_PairPtri32._Ptri1 = linkonce_odr constant [4 x ptr] [ptr @Pair, ptr @_parameterization_Ptri32, ptr @_parameterization_Ptri1, ptr null]
@_parameterization_PairPtri32._Ptri32 = linkonce_odr constant [4 x ptr] [ptr @Pair, ptr @_parameterization_Ptri32, ptr @_parameterization_Ptri32, ptr null]
@_parameterization_Tombstone = linkonce_odr constant [2 x ptr] [ptr @Tombstone, ptr null]
@Tombstone_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @Tombstone]
@Tombstone_offset_tbl = linkonce_odr constant [4 x i32] [i32 11, i32 0, i32 9, i32 9]
@Tombstone = constant { [3 x i64], [6 x ptr], [2 x ptr] } { [3 x i64] [i64 -8477883990763853851, i64 4611686018427388091, i64 3], [6 x ptr] [ptr @subtype_test, ptr @Tombstone_hashtbl, ptr @Tombstone_offset_tbl, ptr @_size_Tombstone, ptr @_box_Default, ptr @_unbox_Default], [2 x ptr] [ptr @Tombstone_B_init_, ptr @Tombstone_init_] }
@Entry_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Entry, ptr @Object, ptr @any_typ, ptr null]
@Entry_offset_tbl = linkonce_odr constant [4 x i32] [i32 9, i32 23, i32 9, i32 0]
@Entry = constant { [3 x i64], [6 x ptr], [14 x ptr] } { [3 x i64] [i64 4015701072841558310, i64 4611686018427388181, i64 3], [6 x ptr] [ptr @subtype_test, ptr @Entry_hashtbl, ptr @Entry_offset_tbl, ptr @_size_Entry, ptr @_box_Default, ptr @_unbox_Default], [14 x ptr] [ptr @Entry_field_Entry_0, ptr @Entry_field_Entry_1, ptr @Entry_field_key, ptr @Entry_field_value, ptr @Entry_field_hash, ptr @Entry_B_init_keyK_valueTombstone_hashPtri32_init_keyK_valueV_hashPtri32, ptr @Entry_B_key_, ptr @Entry_B_value_, ptr @Entry_B_hash_, ptr @Entry_init_keyK_valueTombstone_hashPtri32, ptr @Entry_init_keyK_valueV_hashPtri32, ptr @Entry_key_, ptr @Entry_value_, ptr @Entry_hash_] }
@HashMap_hashtbl = linkonce_odr constant [8 x ptr] [ptr null, ptr @HashMap, ptr @Container, ptr null, ptr @Object, ptr null, ptr @any_typ, ptr @Iterable2]
@HashMap_offset_tbl = linkonce_odr constant [8 x i32] [i32 0, i32 9, i32 80, i32 0, i32 80, i32 0, i32 9, i32 57]
@HashMap = constant { [3 x i64], [6 x ptr], [71 x ptr] } { [3 x i64] [i64 -2849643283898152329, i64 4611686018427388091, i64 7], [6 x ptr] [ptr @subtype_test, ptr @HashMap_hashtbl, ptr @HashMap_offset_tbl, ptr @_size_HashMap, ptr @_box_Default, ptr @_unbox_Default], [71 x ptr] [ptr @HashMap_field_HashMap_0, ptr @HashMap_field_HashMap_1, ptr @HashMap_field_HashMap_2, ptr @HashMap_field_entries, ptr @HashMap_field_size, ptr @HashMap_field_load, ptr @HashMap_field_hasher, ptr @HashMap_field_eq, ptr @HashMap_B_init_hasherFunctionK_to_Ptri32_eqFunctionK._K_to_Ptri1, ptr @HashMap_B_find_slot_keyK_hashPtri32, ptr @HashMap_B_resize_new_capacityPtri32, ptr @HashMap_B_insert_internal_keyK_valueV_hashPtri32, ptr @HashMap_B_insert_keyK_valueV, ptr @HashMap_B_get_keyK, ptr @HashMap_B_remove_keyK, ptr @HashMap_B_clear_, ptr @HashMap_B_size_, ptr @HashMap_B_iterator_, ptr @HashMap_B_each_fFunctionT_to_Nothing, ptr @HashMap_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @HashMap_B_all_fFunctionT_to_Ptri1, ptr @HashMap_B_any_fFunctionT_to_Ptri1, ptr @HashMap_B_map_fFunctionT_to_U, ptr @HashMap_B_filter_fFunctionT_to_Ptri1, ptr @HashMap_B_chain_otherIterable2T, ptr @HashMap_B_interleave_otherIterable2T, ptr @HashMap_B_zip_otherIterable2U, ptr @HashMap_B_product_otherIterable2U, ptr @HashMap_init_hasherFunctionK_to_Ptri32_eqFunctionK._K_to_Ptri1, ptr @HashMap_find_slot_keyK_hashPtri32, ptr @HashMap_resize_new_capacityPtri32, ptr @HashMap_insert_internal_keyK_valueV_hashPtri32, ptr @HashMap_insert_keyK_valueV, ptr @HashMap_get_keyK, ptr @HashMap_remove_keyK, ptr @HashMap_clear_, ptr @HashMap_size_, ptr @HashMap_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @HashMap_field_HashMap_2, ptr @HashMap_B_iterator_, ptr @HashMap_B_each_fFunctionT_to_Nothing, ptr @HashMap_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @HashMap_B_all_fFunctionT_to_Ptri1, ptr @HashMap_B_any_fFunctionT_to_Ptri1, ptr @HashMap_B_map_fFunctionT_to_U, ptr @HashMap_B_filter_fFunctionT_to_Ptri1, ptr @HashMap_B_chain_otherIterable2T, ptr @HashMap_B_interleave_otherIterable2T, ptr @HashMap_B_zip_otherIterable2U, ptr @HashMap_B_product_otherIterable2U, ptr @HashMap_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
@HashMapIterator_hashtbl = linkonce_odr constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr @HashMapIterator, ptr null, ptr @Iterator2, ptr null]
@HashMapIterator_offset_tbl = linkonce_odr constant [8 x i32] [i32 21, i32 9, i32 0, i32 21, i32 9, i32 0, i32 18, i32 0]
@HashMapIterator = constant { [3 x i64], [6 x ptr], [12 x ptr] } { [3 x i64] [i64 -704669437586349537, i64 4611686018427388081, i64 7], [6 x ptr] [ptr @subtype_test, ptr @HashMapIterator_hashtbl, ptr @HashMapIterator_offset_tbl, ptr @_size_HashMapIterator, ptr @_box_Default, ptr @_unbox_Default], [12 x ptr] [ptr @HashMapIterator_field_HashMapIterator_0, ptr @HashMapIterator_field_HashMapIterator_1, ptr @HashMapIterator_field_HashMapIterator_2, ptr @HashMapIterator_field_map_entries, ptr @HashMapIterator_field_index, ptr @HashMapIterator_B_init_map_entriesArrayEntryK._V_or_Nil, ptr @HashMapIterator_B_next_, ptr @HashMapIterator_init_map_entriesArrayEntryK._V_or_Nil, ptr @HashMapIterator_next_, ptr @HashMapIterator_field_HashMapIterator_2, ptr @HashMapIterator_B_next_, ptr @HashMapIterator_next_] }
@PRNG_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @PRNG, ptr null]
@PRNG_offset_tbl = linkonce_odr constant [4 x i32] [i32 14, i32 9, i32 9, i32 0]
@PRNG = constant { [3 x i64], [6 x ptr], [5 x ptr] } { [3 x i64] [i64 -4401938362882229211, i64 4611686018427388081, i64 3], [6 x ptr] [ptr @subtype_test, ptr @PRNG_hashtbl, ptr @PRNG_offset_tbl, ptr @_size_PRNG, ptr @_box_Default, ptr @_unbox_Default], [5 x ptr] [ptr @PRNG_field_seed, ptr @PRNG_B_init_initial_seedPtri32, ptr @PRNG_B_next_, ptr @PRNG_init_initial_seedPtri32, ptr @PRNG_next_] }
@Entry_field_key = internal constant { ptr, ptr } { ptr @Entry_getter_key, ptr @Entry_setter_key }
@Entry_field_value = internal constant { ptr, ptr } { ptr @Entry_getter_value, ptr @Entry_setter_value }
@Entry_field_hash = internal constant { ptr, ptr } { ptr @Entry_getter_hash, ptr @Entry_setter_hash }
@HashMap_field_entries = internal constant { ptr, ptr } { ptr @HashMap_getter_entries, ptr @HashMap_setter_entries }
@HashMap_field_size = internal constant { ptr, ptr } { ptr @HashMap_getter_size, ptr @HashMap_setter_size }
@HashMap_field_load = internal constant { ptr, ptr } { ptr @HashMap_getter_load, ptr @HashMap_setter_load }
@HashMap_field_hasher = internal constant { ptr, ptr } { ptr @HashMap_getter_hasher, ptr @HashMap_setter_hasher }
@HashMap_field_eq = internal constant { ptr, ptr } { ptr @HashMap_getter_eq, ptr @HashMap_setter_eq }
@HashMapIterator_field_map_entries = internal constant { ptr, ptr } { ptr @HashMapIterator_getter_map_entries, ptr @HashMapIterator_setter_map_entries }
@HashMapIterator_field_index = internal constant { ptr, ptr } { ptr @HashMapIterator_getter_index, ptr @HashMapIterator_setter_index }
@PRNG_field_seed = internal constant { ptr, ptr } { ptr @PRNG_getter_seed, ptr @PRNG_setter_seed }
@_parameterization_Ptri1 = linkonce_odr constant [2 x ptr] [ptr @bool_typ, ptr null]
@Pair_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @Pair, ptr null]
@Pair_offset_tbl = linkonce_odr constant [4 x i32] [i32 19, i32 9, i32 9, i32 0]
@Pair = constant { [3 x i64], [6 x ptr], [10 x ptr] } { [3 x i64] [i64 9197944775169318296, i64 4611686018427388081, i64 3], [6 x ptr] [ptr @subtype_test, ptr @Pair_hashtbl, ptr @Pair_offset_tbl, ptr @_size_Pair, ptr @_box_Default, ptr @_unbox_Default], [10 x ptr] [ptr @Pair_field_Pair_0, ptr @Pair_field_Pair_1, ptr @Pair_field_first, ptr @Pair_field_second, ptr @Pair_B_init_firstT_secondU, ptr @Pair_B_first_, ptr @Pair_B_second_, ptr @Pair_init_firstT_secondU, ptr @Pair_first_, ptr @Pair_second_] }
@Container_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container]
@Container_offset_tbl = linkonce_odr constant [4 x i32] [i32 9, i32 9, i32 0, i32 9]
@Container = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 9056556090793359372, i64 4611686018427388081, i64 3], [6 x ptr] [ptr @subtype_test, ptr @Container_hashtbl, ptr @Container_offset_tbl, ptr @_size_Container, ptr @_box_Default, ptr @_unbox_Default], [0 x ptr] undef }
@Iterator2_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @Iterator2, ptr @Container]
@Iterator2_offset_tbl = linkonce_odr constant [4 x i32] [i32 12, i32 9, i32 9, i32 12]
@Iterator2 = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 4189192806087951739, i64 4611686018427388081, i64 3], [6 x ptr] [ptr @subtype_test, ptr @Iterator2_hashtbl, ptr @Iterator2_offset_tbl, ptr @_size_Iterator2, ptr @_box_Default, ptr @_unbox_Default], [0 x ptr] undef }
@Iterable2_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Iterable2, ptr @any_typ, ptr @Container, ptr @Object]
@Iterable2_offset_tbl = linkonce_odr constant [4 x i32] [i32 9, i32 9, i32 32, i32 32]
@Iterable2 = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 5693646204635713916, i64 4611686018427388349, i64 3], [6 x ptr] [ptr @subtype_test, ptr @Iterable2_hashtbl, ptr @Iterable2_offset_tbl, ptr @_size_Iterable2, ptr @_box_Default, ptr @_unbox_Default], [0 x ptr] undef }
@Array_hashtbl = linkonce_odr constant [8 x ptr] [ptr @Container, ptr null, ptr @Iterable2, ptr @Object, ptr @any_typ, ptr null, ptr null, ptr @Array]
@Array_offset_tbl = linkonce_odr constant [8 x i32] [i32 84, i32 0, i32 61, i32 84, i32 9, i32 0, i32 0, i32 9]
@Array = constant { [3 x i64], [6 x ptr], [75 x ptr] } { [3 x i64] [i64 -5261542750394134544, i64 4611686018427388289, i64 7], [6 x ptr] [ptr @subtype_test, ptr @Array_hashtbl, ptr @Array_offset_tbl, ptr @_size_Array, ptr @_box_Default, ptr @_unbox_Default], [75 x ptr] [ptr @Array_field_Array_0, ptr @Array_field_buffer, ptr @Array_field_length, ptr @Array_field_capacity, ptr @Array_B__Self_from_iterable_iterableIterable2T, ptr @Array_B_init_, ptr @Array_B_init_capacityPtri32, ptr @Array_B_init_lengthPtri32_capacityPtri32, ptr @Array_B_length_, ptr @Array_B_capacity_, ptr @Array_B_append_xT, ptr @Array_B_reserve_new_capacityPtri32, ptr @Array_B__index_xPtri32, ptr @Array_B__set_index_xPtri32_valueT, ptr @Array_B_throw_oob_xPtri32, ptr @Array_B_unchecked_index_xPtri32, ptr @Array_B_unchecked_insert_xPtri32_valueT, ptr @Array_B_iterator_, ptr @Array_B_each_fFunctionT_to_Nothing, ptr @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Array_B_all_fFunctionT_to_Ptri1, ptr @Array_B_any_fFunctionT_to_Ptri1, ptr @Array_B_map_fFunctionT_to_U, ptr @Array_B_filter_fFunctionT_to_Ptri1, ptr @Array_B_chain_otherIterable2T, ptr @Array_B_interleave_otherIterable2T, ptr @Array_B_zip_otherIterable2U, ptr @Array_B_product_otherIterable2U, ptr @Array__Self_from_iterable_iterableIterable2T, ptr @Array_init_, ptr @Array_init_capacityPtri32, ptr @Array_init_lengthPtri32_capacityPtri32, ptr @Array_length_, ptr @Array_capacity_, ptr @Array_append_xT, ptr @Array_reserve_new_capacityPtri32, ptr @Array__index_xPtri32, ptr @Array__set_index_xPtri32_valueT, ptr @Array_throw_oob_xPtri32, ptr @Array_unchecked_index_xPtri32, ptr @Array_unchecked_insert_xPtri32_valueT, ptr @Array_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @Array_field_Array_0, ptr @Array_B_iterator_, ptr @Array_B_each_fFunctionT_to_Nothing, ptr @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Array_B_all_fFunctionT_to_Ptri1, ptr @Array_B_any_fFunctionT_to_Ptri1, ptr @Array_B_map_fFunctionT_to_U, ptr @Array_B_filter_fFunctionT_to_Ptri1, ptr @Array_B_chain_otherIterable2T, ptr @Array_B_interleave_otherIterable2T, ptr @Array_B_zip_otherIterable2U, ptr @Array_B_product_otherIterable2U, ptr @Array_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
@ArrayIterator_hashtbl = linkonce_odr constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr @ArrayIterator, ptr null, ptr @Iterator2, ptr null]
@ArrayIterator_offset_tbl = linkonce_odr constant [8 x i32] [i32 19, i32 9, i32 0, i32 19, i32 9, i32 0, i32 16, i32 0]
@ArrayIterator = constant { [3 x i64], [6 x ptr], [10 x ptr] } { [3 x i64] [i64 3447345754186651411, i64 4611686018427388081, i64 7], [6 x ptr] [ptr @subtype_test, ptr @ArrayIterator_hashtbl, ptr @ArrayIterator_offset_tbl, ptr @_size_ArrayIterator, ptr @_box_Default, ptr @_unbox_Default], [10 x ptr] [ptr @ArrayIterator_field_ArrayIterator_0, ptr @ArrayIterator_field_array, ptr @ArrayIterator_field_index, ptr @ArrayIterator_B_init_arrayArrayT, ptr @ArrayIterator_B_next_, ptr @ArrayIterator_init_arrayArrayT, ptr @ArrayIterator_next_, ptr @ArrayIterator_field_ArrayIterator_0, ptr @ArrayIterator_B_next_, ptr @ArrayIterator_next_] }
@MapIterable2_hashtbl = linkonce_odr constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr @MapIterable2, ptr @Container, ptr null, ptr @Iterable2, ptr null, ptr null]
@MapIterable2_offset_tbl = linkonce_odr constant [8 x i32] [i32 60, i32 9, i32 9, i32 60, i32 0, i32 37, i32 0, i32 0]
@MapIterable2 = constant { [3 x i64], [6 x ptr], [51 x ptr] } { [3 x i64] [i64 -1724859134596891929, i64 4611686018427388081, i64 7], [6 x ptr] [ptr @subtype_test, ptr @MapIterable2_hashtbl, ptr @MapIterable2_offset_tbl, ptr @_size_MapIterable2, ptr @_box_Default, ptr @_unbox_Default], [51 x ptr] [ptr @MapIterable2_field_MapIterable2_0, ptr @MapIterable2_field_MapIterable2_1, ptr @MapIterable2_field_iterable, ptr @MapIterable2_field_f, ptr @MapIterable2_B_init_iterableIterable2T_fFunctionT_to_U, ptr @MapIterable2_B_iterator_, ptr @MapIterable2_B_each_fFunctionT_to_Nothing, ptr @MapIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @MapIterable2_B_all_fFunctionT_to_Ptri1, ptr @MapIterable2_B_any_fFunctionT_to_Ptri1, ptr @MapIterable2_B_map_fFunctionT_to_U, ptr @MapIterable2_B_filter_fFunctionT_to_Ptri1, ptr @MapIterable2_B_chain_otherIterable2T, ptr @MapIterable2_B_interleave_otherIterable2T, ptr @MapIterable2_B_zip_otherIterable2U, ptr @MapIterable2_B_product_otherIterable2U, ptr @MapIterable2_init_iterableIterable2T_fFunctionT_to_U, ptr @MapIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @MapIterable2_field_MapIterable2_1, ptr @MapIterable2_B_iterator_, ptr @MapIterable2_B_each_fFunctionT_to_Nothing, ptr @MapIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @MapIterable2_B_all_fFunctionT_to_Ptri1, ptr @MapIterable2_B_any_fFunctionT_to_Ptri1, ptr @MapIterable2_B_map_fFunctionT_to_U, ptr @MapIterable2_B_filter_fFunctionT_to_Ptri1, ptr @MapIterable2_B_chain_otherIterable2T, ptr @MapIterable2_B_interleave_otherIterable2T, ptr @MapIterable2_B_zip_otherIterable2U, ptr @MapIterable2_B_product_otherIterable2U, ptr @MapIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
@MapIterator2_hashtbl = linkonce_odr constant [8 x ptr] [ptr null, ptr @Container, ptr @MapIterator2, ptr null, ptr @Object, ptr @Iterator2, ptr null, ptr @any_typ]
@MapIterator2_offset_tbl = linkonce_odr constant [8 x i32] [i32 0, i32 20, i32 9, i32 0, i32 20, i32 17, i32 0, i32 9]
@MapIterator2 = constant { [3 x i64], [6 x ptr], [11 x ptr] } { [3 x i64] [i64 -10255947709272500, i64 4611686018427388279, i64 7], [6 x ptr] [ptr @subtype_test, ptr @MapIterator2_hashtbl, ptr @MapIterator2_offset_tbl, ptr @_size_MapIterator2, ptr @_box_Default, ptr @_unbox_Default], [11 x ptr] [ptr @MapIterator2_field_MapIterator2_0, ptr @MapIterator2_field_MapIterator2_1, ptr @MapIterator2_field_iterator, ptr @MapIterator2_field_f, ptr @MapIterator2_B_init_iteratorIterator2T_fFunctionT_to_U, ptr @MapIterator2_B_next_, ptr @MapIterator2_init_iteratorIterator2T_fFunctionT_to_U, ptr @MapIterator2_next_, ptr @MapIterator2_field_MapIterator2_1, ptr @MapIterator2_B_next_, ptr @MapIterator2_next_] }
@FilterIterable2_hashtbl = linkonce_odr constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr null, ptr @Iterable2, ptr @FilterIterable2, ptr null]
@FilterIterable2_offset_tbl = linkonce_odr constant [8 x i32] [i32 59, i32 9, i32 0, i32 59, i32 0, i32 36, i32 9, i32 0]
@FilterIterable2 = constant { [3 x i64], [6 x ptr], [50 x ptr] } { [3 x i64] [i64 1178467452958968374, i64 4611686018427388081, i64 7], [6 x ptr] [ptr @subtype_test, ptr @FilterIterable2_hashtbl, ptr @FilterIterable2_offset_tbl, ptr @_size_FilterIterable2, ptr @_box_Default, ptr @_unbox_Default], [50 x ptr] [ptr @FilterIterable2_field_FilterIterable2_0, ptr @FilterIterable2_field_iterable, ptr @FilterIterable2_field_f, ptr @FilterIterable2_B_init_iterableIterable2T_fFunctionT_to_Ptri1, ptr @FilterIterable2_B_iterator_, ptr @FilterIterable2_B_each_fFunctionT_to_Nothing, ptr @FilterIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @FilterIterable2_B_all_fFunctionT_to_Ptri1, ptr @FilterIterable2_B_any_fFunctionT_to_Ptri1, ptr @FilterIterable2_B_map_fFunctionT_to_U, ptr @FilterIterable2_B_filter_fFunctionT_to_Ptri1, ptr @FilterIterable2_B_chain_otherIterable2T, ptr @FilterIterable2_B_interleave_otherIterable2T, ptr @FilterIterable2_B_zip_otherIterable2U, ptr @FilterIterable2_B_product_otherIterable2U, ptr @FilterIterable2_init_iterableIterable2T_fFunctionT_to_Ptri1, ptr @FilterIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @FilterIterable2_field_FilterIterable2_0, ptr @FilterIterable2_B_iterator_, ptr @FilterIterable2_B_each_fFunctionT_to_Nothing, ptr @FilterIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @FilterIterable2_B_all_fFunctionT_to_Ptri1, ptr @FilterIterable2_B_any_fFunctionT_to_Ptri1, ptr @FilterIterable2_B_map_fFunctionT_to_U, ptr @FilterIterable2_B_filter_fFunctionT_to_Ptri1, ptr @FilterIterable2_B_chain_otherIterable2T, ptr @FilterIterable2_B_interleave_otherIterable2T, ptr @FilterIterable2_B_zip_otherIterable2U, ptr @FilterIterable2_B_product_otherIterable2U, ptr @FilterIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
@FilterIterator2_hashtbl = linkonce_odr constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr @FilterIterator2, ptr @Container, ptr null, ptr null, ptr @Iterator2, ptr null]
@FilterIterator2_offset_tbl = linkonce_odr constant [8 x i32] [i32 19, i32 9, i32 9, i32 19, i32 0, i32 0, i32 16, i32 0]
@FilterIterator2 = constant { [3 x i64], [6 x ptr], [10 x ptr] } { [3 x i64] [i64 8213847504843366470, i64 4611686018427388081, i64 7], [6 x ptr] [ptr @subtype_test, ptr @FilterIterator2_hashtbl, ptr @FilterIterator2_offset_tbl, ptr @_size_FilterIterator2, ptr @_box_Default, ptr @_unbox_Default], [10 x ptr] [ptr @FilterIterator2_field_FilterIterator2_0, ptr @FilterIterator2_field_iterator, ptr @FilterIterator2_field_f, ptr @FilterIterator2_B_init_iteratorIterator2T_fFunctionT_to_Ptri1, ptr @FilterIterator2_B_next_, ptr @FilterIterator2_init_iteratorIterator2T_fFunctionT_to_Ptri1, ptr @FilterIterator2_next_, ptr @FilterIterator2_field_FilterIterator2_0, ptr @FilterIterator2_B_next_, ptr @FilterIterator2_next_] }
@ChainIterable2_hashtbl = linkonce_odr constant [8 x ptr] [ptr @ChainIterable2, ptr @Object, ptr @any_typ, ptr null, ptr null, ptr @Container, ptr null, ptr @Iterable2]
@ChainIterable2_offset_tbl = linkonce_odr constant [8 x i32] [i32 9, i32 59, i32 9, i32 0, i32 0, i32 59, i32 0, i32 36]
@ChainIterable2 = constant { [3 x i64], [6 x ptr], [50 x ptr] } { [3 x i64] [i64 -5233298072945030060, i64 4611686018427388319, i64 7], [6 x ptr] [ptr @subtype_test, ptr @ChainIterable2_hashtbl, ptr @ChainIterable2_offset_tbl, ptr @_size_ChainIterable2, ptr @_box_Default, ptr @_unbox_Default], [50 x ptr] [ptr @ChainIterable2_field_ChainIterable2_0, ptr @ChainIterable2_field_first, ptr @ChainIterable2_field_second, ptr @ChainIterable2_B_init_firstIterable2T_secondIterable2T, ptr @ChainIterable2_B_iterator_, ptr @ChainIterable2_B_each_fFunctionT_to_Nothing, ptr @ChainIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ChainIterable2_B_all_fFunctionT_to_Ptri1, ptr @ChainIterable2_B_any_fFunctionT_to_Ptri1, ptr @ChainIterable2_B_map_fFunctionT_to_U, ptr @ChainIterable2_B_filter_fFunctionT_to_Ptri1, ptr @ChainIterable2_B_chain_otherIterable2T, ptr @ChainIterable2_B_interleave_otherIterable2T, ptr @ChainIterable2_B_zip_otherIterable2U, ptr @ChainIterable2_B_product_otherIterable2U, ptr @ChainIterable2_init_firstIterable2T_secondIterable2T, ptr @ChainIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @ChainIterable2_field_ChainIterable2_0, ptr @ChainIterable2_B_iterator_, ptr @ChainIterable2_B_each_fFunctionT_to_Nothing, ptr @ChainIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ChainIterable2_B_all_fFunctionT_to_Ptri1, ptr @ChainIterable2_B_any_fFunctionT_to_Ptri1, ptr @ChainIterable2_B_map_fFunctionT_to_U, ptr @ChainIterable2_B_filter_fFunctionT_to_Ptri1, ptr @ChainIterable2_B_chain_otherIterable2T, ptr @ChainIterable2_B_interleave_otherIterable2T, ptr @ChainIterable2_B_zip_otherIterable2U, ptr @ChainIterable2_B_product_otherIterable2U, ptr @ChainIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
@ChainIterator2_hashtbl = linkonce_odr constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr null, ptr null, ptr @Iterator2, ptr @ChainIterator2]
@ChainIterator2_offset_tbl = linkonce_odr constant [8 x i32] [i32 20, i32 9, i32 0, i32 20, i32 0, i32 0, i32 17, i32 9]
@ChainIterator2 = constant { [3 x i64], [6 x ptr], [11 x ptr] } { [3 x i64] [i64 -228267985060461774, i64 4611686018427388081, i64 7], [6 x ptr] [ptr @subtype_test, ptr @ChainIterator2_hashtbl, ptr @ChainIterator2_offset_tbl, ptr @_size_ChainIterator2, ptr @_box_Default, ptr @_unbox_Default], [11 x ptr] [ptr @ChainIterator2_field_ChainIterator2_0, ptr @ChainIterator2_field_first, ptr @ChainIterator2_field_second, ptr @ChainIterator2_field_on_first, ptr @ChainIterator2_B_init_firstIterator2T_secondIterator2T, ptr @ChainIterator2_B_next_, ptr @ChainIterator2_init_firstIterator2T_secondIterator2T, ptr @ChainIterator2_next_, ptr @ChainIterator2_field_ChainIterator2_0, ptr @ChainIterator2_B_next_, ptr @ChainIterator2_next_] }
@InterleaveIterable2_hashtbl = linkonce_odr constant [8 x ptr] [ptr @Iterable2, ptr null, ptr null, ptr @InterleaveIterable2, ptr @any_typ, ptr @Object, ptr null, ptr @Container]
@InterleaveIterable2_offset_tbl = linkonce_odr constant [8 x i32] [i32 36, i32 0, i32 0, i32 9, i32 9, i32 59, i32 0, i32 59]
@InterleaveIterable2 = constant { [3 x i64], [6 x ptr], [50 x ptr] } { [3 x i64] [i64 -6258231685215461775, i64 4611686018427388207, i64 7], [6 x ptr] [ptr @subtype_test, ptr @InterleaveIterable2_hashtbl, ptr @InterleaveIterable2_offset_tbl, ptr @_size_InterleaveIterable2, ptr @_box_Default, ptr @_unbox_Default], [50 x ptr] [ptr @InterleaveIterable2_field_InterleaveIterable2_0, ptr @InterleaveIterable2_field_first, ptr @InterleaveIterable2_field_second, ptr @InterleaveIterable2_B_init_firstIterable2T_secondIterable2T, ptr @InterleaveIterable2_B_iterator_, ptr @InterleaveIterable2_B_each_fFunctionT_to_Nothing, ptr @InterleaveIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @InterleaveIterable2_B_all_fFunctionT_to_Ptri1, ptr @InterleaveIterable2_B_any_fFunctionT_to_Ptri1, ptr @InterleaveIterable2_B_map_fFunctionT_to_U, ptr @InterleaveIterable2_B_filter_fFunctionT_to_Ptri1, ptr @InterleaveIterable2_B_chain_otherIterable2T, ptr @InterleaveIterable2_B_interleave_otherIterable2T, ptr @InterleaveIterable2_B_zip_otherIterable2U, ptr @InterleaveIterable2_B_product_otherIterable2U, ptr @InterleaveIterable2_init_firstIterable2T_secondIterable2T, ptr @InterleaveIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @InterleaveIterable2_field_InterleaveIterable2_0, ptr @InterleaveIterable2_B_iterator_, ptr @InterleaveIterable2_B_each_fFunctionT_to_Nothing, ptr @InterleaveIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @InterleaveIterable2_B_all_fFunctionT_to_Ptri1, ptr @InterleaveIterable2_B_any_fFunctionT_to_Ptri1, ptr @InterleaveIterable2_B_map_fFunctionT_to_U, ptr @InterleaveIterable2_B_filter_fFunctionT_to_Ptri1, ptr @InterleaveIterable2_B_chain_otherIterable2T, ptr @InterleaveIterable2_B_interleave_otherIterable2T, ptr @InterleaveIterable2_B_zip_otherIterable2U, ptr @InterleaveIterable2_B_product_otherIterable2U, ptr @InterleaveIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
@InterleaveIterator2_hashtbl = linkonce_odr constant [8 x ptr] [ptr @any_typ, ptr null, ptr null, ptr @InterleaveIterator2, ptr @Container, ptr null, ptr @Iterator2, ptr @Object]
@InterleaveIterator2_offset_tbl = linkonce_odr constant [8 x i32] [i32 9, i32 0, i32 0, i32 9, i32 20, i32 0, i32 17, i32 20]
@InterleaveIterator2 = constant { [3 x i64], [6 x ptr], [11 x ptr] } { [3 x i64] [i64 6709847746581360093, i64 4611686018427388247, i64 7], [6 x ptr] [ptr @subtype_test, ptr @InterleaveIterator2_hashtbl, ptr @InterleaveIterator2_offset_tbl, ptr @_size_InterleaveIterator2, ptr @_box_Default, ptr @_unbox_Default], [11 x ptr] [ptr @InterleaveIterator2_field_InterleaveIterator2_0, ptr @InterleaveIterator2_field_first, ptr @InterleaveIterator2_field_second, ptr @InterleaveIterator2_field_on_first, ptr @InterleaveIterator2_B_init_firstIterator2T_secondIterator2T, ptr @InterleaveIterator2_B_next_, ptr @InterleaveIterator2_init_firstIterator2T_secondIterator2T, ptr @InterleaveIterator2_next_, ptr @InterleaveIterator2_field_InterleaveIterator2_0, ptr @InterleaveIterator2_B_next_, ptr @InterleaveIterator2_next_] }
@ZipIterable2_hashtbl = linkonce_odr constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr @ZipIterable2, ptr @Container, ptr null, ptr @Iterable2, ptr null, ptr null]
@ZipIterable2_offset_tbl = linkonce_odr constant [8 x i32] [i32 61, i32 9, i32 9, i32 61, i32 0, i32 38, i32 0, i32 0]
@ZipIterable2 = constant { [3 x i64], [6 x ptr], [52 x ptr] } { [3 x i64] [i64 -3218950579047519815, i64 4611686018427388081, i64 7], [6 x ptr] [ptr @subtype_test, ptr @ZipIterable2_hashtbl, ptr @ZipIterable2_offset_tbl, ptr @_size_ZipIterable2, ptr @_box_Default, ptr @_unbox_Default], [52 x ptr] [ptr @ZipIterable2_field_ZipIterable2_0, ptr @ZipIterable2_field_ZipIterable2_1, ptr @ZipIterable2_field_ZipIterable2_2, ptr @ZipIterable2_field_first, ptr @ZipIterable2_field_second, ptr @ZipIterable2_B_init_firstIterable2T_secondIterable2U, ptr @ZipIterable2_B_iterator_, ptr @ZipIterable2_B_each_fFunctionT_to_Nothing, ptr @ZipIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ZipIterable2_B_all_fFunctionT_to_Ptri1, ptr @ZipIterable2_B_any_fFunctionT_to_Ptri1, ptr @ZipIterable2_B_map_fFunctionT_to_U, ptr @ZipIterable2_B_filter_fFunctionT_to_Ptri1, ptr @ZipIterable2_B_chain_otherIterable2T, ptr @ZipIterable2_B_interleave_otherIterable2T, ptr @ZipIterable2_B_zip_otherIterable2U, ptr @ZipIterable2_B_product_otherIterable2U, ptr @ZipIterable2_init_firstIterable2T_secondIterable2U, ptr @ZipIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @ZipIterable2_field_ZipIterable2_2, ptr @ZipIterable2_B_iterator_, ptr @ZipIterable2_B_each_fFunctionT_to_Nothing, ptr @ZipIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ZipIterable2_B_all_fFunctionT_to_Ptri1, ptr @ZipIterable2_B_any_fFunctionT_to_Ptri1, ptr @ZipIterable2_B_map_fFunctionT_to_U, ptr @ZipIterable2_B_filter_fFunctionT_to_Ptri1, ptr @ZipIterable2_B_chain_otherIterable2T, ptr @ZipIterable2_B_interleave_otherIterable2T, ptr @ZipIterable2_B_zip_otherIterable2U, ptr @ZipIterable2_B_product_otherIterable2U, ptr @ZipIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
@ZipIterator2_hashtbl = linkonce_odr constant [8 x ptr] [ptr @any_typ, ptr null, ptr null, ptr @ZipIterator2, ptr @Container, ptr null, ptr @Iterator2, ptr @Object]
@ZipIterator2_offset_tbl = linkonce_odr constant [8 x i32] [i32 9, i32 0, i32 0, i32 9, i32 21, i32 0, i32 18, i32 21]
@ZipIterator2 = constant { [3 x i64], [6 x ptr], [12 x ptr] } { [3 x i64] [i64 5502728639611621286, i64 4611686018427388247, i64 7], [6 x ptr] [ptr @subtype_test, ptr @ZipIterator2_hashtbl, ptr @ZipIterator2_offset_tbl, ptr @_size_ZipIterator2, ptr @_box_Default, ptr @_unbox_Default], [12 x ptr] [ptr @ZipIterator2_field_ZipIterator2_0, ptr @ZipIterator2_field_ZipIterator2_1, ptr @ZipIterator2_field_ZipIterator2_2, ptr @ZipIterator2_field_first, ptr @ZipIterator2_field_second, ptr @ZipIterator2_B_init_firstIterator2T_secondIterator2U, ptr @ZipIterator2_B_next_, ptr @ZipIterator2_init_firstIterator2T_secondIterator2U, ptr @ZipIterator2_next_, ptr @ZipIterator2_field_ZipIterator2_2, ptr @ZipIterator2_B_next_, ptr @ZipIterator2_next_] }
@ProductIterable2_hashtbl = linkonce_odr constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr null, ptr @Iterable2, ptr @ProductIterable2, ptr null]
@ProductIterable2_offset_tbl = linkonce_odr constant [8 x i32] [i32 61, i32 9, i32 0, i32 61, i32 0, i32 38, i32 9, i32 0]
@ProductIterable2 = constant { [3 x i64], [6 x ptr], [52 x ptr] } { [3 x i64] [i64 7827074759551300494, i64 4611686018427388081, i64 7], [6 x ptr] [ptr @subtype_test, ptr @ProductIterable2_hashtbl, ptr @ProductIterable2_offset_tbl, ptr @_size_ProductIterable2, ptr @_box_Default, ptr @_unbox_Default], [52 x ptr] [ptr @ProductIterable2_field_ProductIterable2_0, ptr @ProductIterable2_field_ProductIterable2_1, ptr @ProductIterable2_field_ProductIterable2_2, ptr @ProductIterable2_field_first, ptr @ProductIterable2_field_second, ptr @ProductIterable2_B_init_firstIterable2T_secondIterable2U, ptr @ProductIterable2_B_iterator_, ptr @ProductIterable2_B_each_fFunctionT_to_Nothing, ptr @ProductIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ProductIterable2_B_all_fFunctionT_to_Ptri1, ptr @ProductIterable2_B_any_fFunctionT_to_Ptri1, ptr @ProductIterable2_B_map_fFunctionT_to_U, ptr @ProductIterable2_B_filter_fFunctionT_to_Ptri1, ptr @ProductIterable2_B_chain_otherIterable2T, ptr @ProductIterable2_B_interleave_otherIterable2T, ptr @ProductIterable2_B_zip_otherIterable2U, ptr @ProductIterable2_B_product_otherIterable2U, ptr @ProductIterable2_init_firstIterable2T_secondIterable2U, ptr @ProductIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @ProductIterable2_field_ProductIterable2_2, ptr @ProductIterable2_B_iterator_, ptr @ProductIterable2_B_each_fFunctionT_to_Nothing, ptr @ProductIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ProductIterable2_B_all_fFunctionT_to_Ptri1, ptr @ProductIterable2_B_any_fFunctionT_to_Ptri1, ptr @ProductIterable2_B_map_fFunctionT_to_U, ptr @ProductIterable2_B_filter_fFunctionT_to_Ptri1, ptr @ProductIterable2_B_chain_otherIterable2T, ptr @ProductIterable2_B_interleave_otherIterable2T, ptr @ProductIterable2_B_zip_otherIterable2U, ptr @ProductIterable2_B_product_otherIterable2U, ptr @ProductIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
@ProductIterator2_hashtbl = linkonce_odr constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr null, ptr @ProductIterator2, ptr @Iterator2, ptr null]
@ProductIterator2_offset_tbl = linkonce_odr constant [8 x i32] [i32 23, i32 9, i32 0, i32 23, i32 0, i32 9, i32 20, i32 0]
@ProductIterator2 = constant { [3 x i64], [6 x ptr], [14 x ptr] } { [3 x i64] [i64 4440657219728359865, i64 4611686018427388081, i64 7], [6 x ptr] [ptr @subtype_test, ptr @ProductIterator2_hashtbl, ptr @ProductIterator2_offset_tbl, ptr @_size_ProductIterator2, ptr @_box_Default, ptr @_unbox_Default], [14 x ptr] [ptr @ProductIterator2_field_ProductIterator2_0, ptr @ProductIterator2_field_ProductIterator2_1, ptr @ProductIterator2_field_ProductIterator2_2, ptr @ProductIterator2_field_first_iterator, ptr @ProductIterator2_field_second_iterator, ptr @ProductIterator2_field_second_iterable, ptr @ProductIterator2_field_current_first, ptr @ProductIterator2_B_init_first_iteratorIterator2T_second_iterableIterable2U, ptr @ProductIterator2_B_next_, ptr @ProductIterator2_init_first_iteratorIterator2T_second_iterableIterable2U, ptr @ProductIterator2_next_, ptr @ProductIterator2_field_ProductIterator2_2, ptr @ProductIterator2_B_next_, ptr @ProductIterator2_next_] }
@Pair_field_first = internal constant { ptr, ptr } { ptr @Pair_getter_first, ptr @Pair_setter_first }
@Pair_field_second = internal constant { ptr, ptr } { ptr @Pair_getter_second, ptr @Pair_setter_second }
@Array_field_buffer = internal constant { ptr, ptr } { ptr @Array_getter_buffer, ptr @Array_setter_buffer }
@Array_field_length = internal constant { ptr, ptr } { ptr @Array_getter_length, ptr @Array_setter_length }
@Array_field_capacity = internal constant { ptr, ptr } { ptr @Array_getter_capacity, ptr @Array_setter_capacity }
@ArrayIterator_field_array = internal constant { ptr, ptr } { ptr @ArrayIterator_getter_array, ptr @ArrayIterator_setter_array }
@ArrayIterator_field_index = internal constant { ptr, ptr } { ptr @ArrayIterator_getter_index, ptr @ArrayIterator_setter_index }
@MapIterable2_field_iterable = internal constant { ptr, ptr } { ptr @MapIterable2_getter_iterable, ptr @MapIterable2_setter_iterable }
@MapIterable2_field_f = internal constant { ptr, ptr } { ptr @MapIterable2_getter_f, ptr @MapIterable2_setter_f }
@MapIterator2_field_iterator = internal constant { ptr, ptr } { ptr @MapIterator2_getter_iterator, ptr @MapIterator2_setter_iterator }
@MapIterator2_field_f = internal constant { ptr, ptr } { ptr @MapIterator2_getter_f, ptr @MapIterator2_setter_f }
@FilterIterable2_field_iterable = internal constant { ptr, ptr } { ptr @FilterIterable2_getter_iterable, ptr @FilterIterable2_setter_iterable }
@FilterIterable2_field_f = internal constant { ptr, ptr } { ptr @FilterIterable2_getter_f, ptr @FilterIterable2_setter_f }
@FilterIterator2_field_iterator = internal constant { ptr, ptr } { ptr @FilterIterator2_getter_iterator, ptr @FilterIterator2_setter_iterator }
@FilterIterator2_field_f = internal constant { ptr, ptr } { ptr @FilterIterator2_getter_f, ptr @FilterIterator2_setter_f }
@ChainIterable2_field_first = internal constant { ptr, ptr } { ptr @ChainIterable2_getter_first, ptr @ChainIterable2_setter_first }
@ChainIterable2_field_second = internal constant { ptr, ptr } { ptr @ChainIterable2_getter_second, ptr @ChainIterable2_setter_second }
@ChainIterator2_field_first = internal constant { ptr, ptr } { ptr @ChainIterator2_getter_first, ptr @ChainIterator2_setter_first }
@ChainIterator2_field_second = internal constant { ptr, ptr } { ptr @ChainIterator2_getter_second, ptr @ChainIterator2_setter_second }
@ChainIterator2_field_on_first = internal constant { ptr, ptr } { ptr @ChainIterator2_getter_on_first, ptr @ChainIterator2_setter_on_first }
@InterleaveIterable2_field_first = internal constant { ptr, ptr } { ptr @InterleaveIterable2_getter_first, ptr @InterleaveIterable2_setter_first }
@InterleaveIterable2_field_second = internal constant { ptr, ptr } { ptr @InterleaveIterable2_getter_second, ptr @InterleaveIterable2_setter_second }
@InterleaveIterator2_field_first = internal constant { ptr, ptr } { ptr @InterleaveIterator2_getter_first, ptr @InterleaveIterator2_setter_first }
@InterleaveIterator2_field_second = internal constant { ptr, ptr } { ptr @InterleaveIterator2_getter_second, ptr @InterleaveIterator2_setter_second }
@InterleaveIterator2_field_on_first = internal constant { ptr, ptr } { ptr @InterleaveIterator2_getter_on_first, ptr @InterleaveIterator2_setter_on_first }
@ZipIterable2_field_first = internal constant { ptr, ptr } { ptr @ZipIterable2_getter_first, ptr @ZipIterable2_setter_first }
@ZipIterable2_field_second = internal constant { ptr, ptr } { ptr @ZipIterable2_getter_second, ptr @ZipIterable2_setter_second }
@ZipIterator2_field_first = internal constant { ptr, ptr } { ptr @ZipIterator2_getter_first, ptr @ZipIterator2_setter_first }
@ZipIterator2_field_second = internal constant { ptr, ptr } { ptr @ZipIterator2_getter_second, ptr @ZipIterator2_setter_second }
@ProductIterable2_field_first = internal constant { ptr, ptr } { ptr @ProductIterable2_getter_first, ptr @ProductIterable2_setter_first }
@ProductIterable2_field_second = internal constant { ptr, ptr } { ptr @ProductIterable2_getter_second, ptr @ProductIterable2_setter_second }
@ProductIterator2_field_first_iterator = internal constant { ptr, ptr } { ptr @ProductIterator2_getter_first_iterator, ptr @ProductIterator2_setter_first_iterator }
@ProductIterator2_field_second_iterator = internal constant { ptr, ptr } { ptr @ProductIterator2_getter_second_iterator, ptr @ProductIterator2_setter_second_iterator }
@ProductIterator2_field_second_iterable = internal constant { ptr, ptr } { ptr @ProductIterator2_getter_second_iterable, ptr @ProductIterator2_setter_second_iterable }
@ProductIterator2_field_current_first = internal constant { ptr, ptr } { ptr @ProductIterator2_getter_current_first, ptr @ProductIterator2_setter_current_first }
@_parameterization_Ptri8 = linkonce_odr constant [2 x ptr] [ptr @i8_typ, ptr null]
@_parameterization_String = linkonce_odr constant [2 x ptr] [ptr @String, ptr null]
@Object_hashtbl = linkonce_odr constant [2 x ptr] [ptr @Object, ptr @any_typ]
@Object_offset_tbl = linkonce_odr constant [2 x i32] [i32 9, i32 9]
@Iterator_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @Iterator]
@Iterator_offset_tbl = linkonce_odr constant [4 x i32] [i32 9, i32 0, i32 9, i32 9]
@Iterable_hashtbl = linkonce_odr constant [4 x ptr] [ptr null, ptr @Iterable, ptr @any_typ, ptr @Object]
@Iterable_offset_tbl = linkonce_odr constant [4 x i32] [i32 0, i32 9, i32 9, i32 11]
@Representable_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Representable, ptr null, ptr @any_typ, ptr @Object]
@Representable_offset_tbl = linkonce_odr constant [4 x i32] [i32 9, i32 0, i32 9, i32 11]
@String_hashtbl = linkonce_odr constant [8 x ptr] [ptr @any_typ, ptr null, ptr @String, ptr @Representable, ptr @Object, ptr null, ptr null, ptr @Iterable]
@String_offset_tbl = linkonce_odr constant [8 x i32] [i32 9, i32 0, i32 9, i32 42, i32 42, i32 0, i32 0, i32 40]
@Character_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @Character]
@Character_offset_tbl = linkonce_odr constant [4 x i32] [i32 14, i32 0, i32 9, i32 9]
@StringIterator_hashtbl = linkonce_odr constant [4 x ptr] [ptr @StringIterator, ptr @Object, ptr @any_typ, ptr @Iterator]
@StringIterator_offset_tbl = linkonce_odr constant [4 x i32] [i32 9, i32 15, i32 9, i32 15]
@Exception_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @Exception]
@Exception_offset_tbl = linkonce_odr constant [4 x i32] [i32 22, i32 0, i32 9, i32 9]
@String_field_bytes = internal constant { ptr, ptr } { ptr @String_getter_bytes, ptr @String_setter_bytes }
@String_field_length = internal constant { ptr, ptr } { ptr @String_getter_length, ptr @String_setter_length }
@String_field_capacity = internal constant { ptr, ptr } { ptr @String_getter_capacity, ptr @String_setter_capacity }
@Character_field_byte = internal constant { ptr, ptr } { ptr @Character_getter_byte, ptr @Character_setter_byte }
@StringIterator_field_str = internal constant { ptr, ptr } { ptr @StringIterator_getter_str, ptr @StringIterator_setter_str }
@StringIterator_field_index = internal constant { ptr, ptr } { ptr @StringIterator_getter_index, ptr @StringIterator_setter_index }
@Exception_field_line_number = internal constant { ptr, ptr } { ptr @Exception_getter_line_number, ptr @Exception_setter_line_number }
@Exception_field_file_name = internal constant { ptr, ptr } { ptr @Exception_getter_file_name, ptr @Exception_setter_file_name }
@Exception_field_message = internal constant { ptr, ptr } { ptr @Exception_getter_message, ptr @Exception_setter_message }
@_parameterization_Ptri32 = linkonce_odr constant [2 x ptr] [ptr @i32_typ, ptr null]
@i32_string = linkonce_odr constant [4 x i8] c"%d\0A\00"
@i64_string = linkonce_odr constant [6 x i8] c"%lld\0A\00"
@bool_typ_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @bool_typ]
@bool_typ_offset_tbl = linkonce_odr constant [4 x i32] [i32 9, i32 9, i32 0, i32 9]
@bool_typ = linkonce_odr constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 5801531371504802705, i64 4611686018427388081, i64 3], [6 x ptr] [ptr @subtype_test, ptr @bool_typ_hashtbl, ptr @bool_typ_offset_tbl, ptr @_size_bool_typ, ptr @_box_bool_typ, ptr @_unbox_bool_typ], [0 x ptr] undef }
@i8_typ_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @i8_typ]
@i8_typ_offset_tbl = linkonce_odr constant [4 x i32] [i32 9, i32 9, i32 0, i32 9]
@i8_typ = linkonce_odr constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 2582149688529881115, i64 4611686018427388081, i64 3], [6 x ptr] [ptr @subtype_test, ptr @i8_typ_hashtbl, ptr @i8_typ_offset_tbl, ptr @_size_i8_typ, ptr @_box_i8_typ, ptr @_unbox_i8_typ], [0 x ptr] undef }
@i32_typ_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @i32_typ, ptr null]
@i32_typ_offset_tbl = linkonce_odr constant [4 x i32] [i32 9, i32 9, i32 9, i32 0]
@i32_typ = linkonce_odr constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 -2253724949814257982, i64 4611686018427388081, i64 3], [6 x ptr] [ptr @subtype_test, ptr @i32_typ_hashtbl, ptr @i32_typ_offset_tbl, ptr @_size_i32_typ, ptr @_box_i32_typ, ptr @_unbox_i32_typ], [0 x ptr] undef }
@f64_typ_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @f64_typ]
@f64_typ_offset_tbl = linkonce_odr constant [4 x i32] [i32 9, i32 9, i32 0, i32 9]
@f64_typ = linkonce_odr constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 -757315540097298781, i64 4611686018427388081, i64 3], [6 x ptr] [ptr @subtype_test, ptr @f64_typ_hashtbl, ptr @f64_typ_offset_tbl, ptr @_size_f64_typ, ptr @_box_f64_typ, ptr @_unbox_f64_typ], [0 x ptr] undef }
@nil_typ_hashtbl = linkonce_odr constant [2 x ptr] [ptr @nil_typ, ptr @any_typ]
@nil_typ_offset_tbl = linkonce_odr constant [2 x i32] [i32 9, i32 9]
@nil_typ = linkonce_odr constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 -5126806859456325683, i64 4611686018427388081, i64 1], [6 x ptr] [ptr @subtype_test, ptr @nil_typ_hashtbl, ptr @nil_typ_offset_tbl, ptr @_size_nil_typ, ptr @_box_nil_typ, ptr @_unbox_nil_typ], [0 x ptr] undef }
@any_typ_hashtbl = linkonce_odr constant [1 x ptr] [ptr @any_typ]
@any_typ_offset_tbl = linkonce_odr constant [1 x i32] [i32 9]
@any_typ = linkonce_odr constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 3084208142191802847, i64 4611686018427388073, i64 0], [6 x ptr] [ptr @subtype_test, ptr @any_typ_hashtbl, ptr @any_typ_offset_tbl, ptr @_size_any_typ, ptr @_box_Default, ptr @_unbox_Default], [0 x ptr] undef }
@function_typ_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @function_typ, ptr null]
@function_typ_offset_tbl = linkonce_odr constant [4 x i32] [i32 9, i32 9, i32 9, i32 0]
@function_typ = linkonce_odr constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 7927147055246173914, i64 4611686018427388081, i64 3], [6 x ptr] [ptr @subtype_test, ptr @function_typ_hashtbl, ptr @function_typ_offset_tbl, ptr @_size_function_typ, ptr @_box_function_typ, ptr @_unbox_function_typ], [0 x ptr] undef }
@union_typ_hashtbl = linkonce_odr constant [4 x ptr] [ptr @union_typ, ptr null, ptr @any_typ, ptr @Object]
@union_typ_offset_tbl = linkonce_odr constant [4 x i32] [i32 9, i32 0, i32 9, i32 9]
@union_typ = linkonce_odr constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 -7543233778997666740, i64 4611686018427388093, i64 3], [6 x ptr] [ptr @subtype_test, ptr @union_typ_hashtbl, ptr @union_typ_offset_tbl, ptr @_size_union_typ, ptr @_box_union_typ, ptr @_unbox_union_typ], [0 x ptr] undef }
@Object = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 3282773614056351330, i64 4611686018427388081, i64 1], [6 x ptr] [ptr @subtype_test, ptr @Object_hashtbl, ptr @Object_offset_tbl, ptr @_size_Object, ptr @_box_Default, ptr @_unbox_Default], [0 x ptr] undef }
@Iterator = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 8673632051301757104, i64 4611686018427388091, i64 3], [6 x ptr] [ptr @subtype_test, ptr @Iterator_hashtbl, ptr @Iterator_offset_tbl, ptr @_size_Iterator, ptr @_box_Default, ptr @_unbox_Default], [0 x ptr] undef }
@Iterable = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 3037712219555723519, i64 4611686018427388093, i64 3], [6 x ptr] [ptr @subtype_test, ptr @Iterable_hashtbl, ptr @Iterable_offset_tbl, ptr @_size_Iterable, ptr @_box_Default, ptr @_unbox_Default], [0 x ptr] undef }
@Representable = constant { [3 x i64], [6 x ptr], [2 x ptr] } { [3 x i64] [i64 -7260840641129990118, i64 4611686018427388093, i64 3], [6 x ptr] [ptr @subtype_test, ptr @Representable_hashtbl, ptr @Representable_offset_tbl, ptr @_size_Representable, ptr @_box_Default, ptr @_unbox_Default], [2 x ptr] [ptr @Representable_B_repr_, ptr @Representable_repr_] }
@String = constant { [3 x i64], [6 x ptr], [35 x ptr] } { [3 x i64] [i64 6499063144389013426, i64 4611686018427388073, i64 7], [6 x ptr] [ptr @subtype_test, ptr @String_hashtbl, ptr @String_offset_tbl, ptr @_size_String, ptr @_box_Default, ptr @_unbox_Default], [35 x ptr] [ptr @String_field_bytes, ptr @String_field_length, ptr @String_field_capacity, ptr @String_B_init_, ptr @String_B_init_bytesBufferPtri8_lengthPtri32_capacityPtri32, ptr @String_B_length_, ptr @String_B_capacity_, ptr @String_B_bytes_, ptr @String_B_append_xPtri8, ptr @String_B_extend_strString, ptr @String_B__index_xPtri32, ptr @String_B__EQ_otherString, ptr @String_B_pop_, ptr @String_B_copy_, ptr @String_B_c_string_, ptr @String_B_iterator_, ptr @String_B_repr_, ptr @String_init_, ptr @String_init_bytesBufferPtri8_lengthPtri32_capacityPtri32, ptr @String_length_, ptr @String_capacity_, ptr @String_bytes_, ptr @String_append_xPtri8, ptr @String_extend_strString, ptr @String__index_xPtri32, ptr @String__EQ_otherString, ptr @String_pop_, ptr @String_copy_, ptr @String_c_string_, ptr @String_iterator_, ptr @String_repr_, ptr @String_B_iterator_, ptr @String_iterator_, ptr @String_B_repr_, ptr @String_repr_] }
@Character = constant { [3 x i64], [6 x ptr], [5 x ptr] } { [3 x i64] [i64 6681222582356018452, i64 4611686018427388091, i64 3], [6 x ptr] [ptr @subtype_test, ptr @Character_hashtbl, ptr @Character_offset_tbl, ptr @_size_Character, ptr @_box_Default, ptr @_unbox_Default], [5 x ptr] [ptr @Character_field_byte, ptr @Character_B_byte_, ptr @Character_B_init_bytePtri8, ptr @Character_byte_, ptr @Character_init_bytePtri8] }
@StringIterator = constant { [3 x i64], [6 x ptr], [6 x ptr] } { [3 x i64] [i64 -7260570988945952630, i64 4611686018427388097, i64 3], [6 x ptr] [ptr @subtype_test, ptr @StringIterator_hashtbl, ptr @StringIterator_offset_tbl, ptr @_size_StringIterator, ptr @_box_Default, ptr @_unbox_Default], [6 x ptr] [ptr @StringIterator_field_str, ptr @StringIterator_field_index, ptr @StringIterator_B_init_strString, ptr @StringIterator_B_next_, ptr @StringIterator_init_strString, ptr @StringIterator_next_] }
@Exception = constant { [3 x i64], [6 x ptr], [13 x ptr] } { [3 x i64] [i64 9027164862567808692, i64 4611686018427388091, i64 3], [6 x ptr] [ptr @subtype_test, ptr @Exception_hashtbl, ptr @Exception_offset_tbl, ptr @_size_Exception, ptr @_box_Default, ptr @_unbox_Default], [13 x ptr] [ptr @Exception_field_line_number, ptr @Exception_field_file_name, ptr @Exception_field_message, ptr @Exception_B_init_messageString, ptr @Exception_B_init_, ptr @Exception_B_set_info_line_numberPtri32_file_nameString, ptr @Exception_B_report_, ptr @Exception_B_print_message_, ptr @Exception_init_messageString, ptr @Exception_init_, ptr @Exception_set_info_line_numberPtri32_file_nameString, ptr @Exception_report_, ptr @Exception_print_message_] }
@IO_hashtbl = linkonce_odr constant [4 x ptr] [ptr @any_typ, ptr @IO, ptr null, ptr @Object]
@IO_offset_tbl = linkonce_odr constant [4 x i32] [i32 9, i32 9, i32 0, i32 19]
@IO = constant { [3 x i64], [6 x ptr], [10 x ptr] } { [3 x i64] [i64 5359822646784595218, i64 4611686018427388247, i64 3], [6 x ptr] [ptr @subtype_test, ptr @IO_hashtbl, ptr @IO_offset_tbl, ptr @_size_IO, ptr @_box_Default, ptr @_unbox_Default], [10 x ptr] [ptr @IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil, ptr @IO__Self_print_xPtri64, ptr @IO__Self_print_xPtri8, ptr @IO__Self_print_xPtrf64, ptr @IO__Self_print_xString, ptr @IO__Self_print_xPtri1, ptr @IO__Self_print_xRepresentable, ptr @IO__Self_print_xPtri32, ptr @IO__Self_print_xCharacter, ptr @IO__Self_print_xNil] }
@string_string.59 = internal constant [4 x i8] c"%s\0A\00"
@float_string = linkonce_odr constant [4 x i8] c"%f\0A\00"
@exception_message = internal constant [45 x i8] c"Error: uncaught exception. Program aborted.\0A\00"
@into_caller_buf = linkonce_odr thread_local global [3 x ptr] zeroinitializer
@current_coroutine = linkonce_odr thread_local local_unnamed_addr global ptr null
@always_one = linkonce thread_local local_unnamed_addr global i1 true
@current_ptr = internal thread_local global ptr null

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_Tombstone(ptr nocapture readnone %0) #0 {
  ret { i64, i64 } { i64 0, i64 1 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Tombstone_B_init_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 80
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define void @Tombstone_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) #0 {
  ret void
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare ptr @llvm.invariant.start.p0(i64 immarg, ptr nocapture) #2

define linkonce_odr { i64, i64 } @_size_any_typ(ptr %0) {
  ret { i64, i64 } { i64 32, i64 8 }
}

define { i64, i64 } @_size_Entry(ptr nocapture readonly %0) {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr i8, ptr %4, i64 48
  %6 = load ptr, ptr %5, align 8
  %7 = tail call { i64, i64 } %6(ptr nonnull %3)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = extractvalue { i64, i64 } %7, 1
  %10 = tail call i64 @llvm.umax.i64(i64 %9, i64 8)
  %11 = urem i64 16, %9
  %12 = icmp eq i64 %11, 0
  %13 = sub i64 %9, %11
  %14 = select i1 %12, i64 0, i64 %13
  %15 = add i64 %14, %8
  %16 = add i64 %15, 16
  %17 = and i64 %15, 7
  %18 = icmp eq i64 %17, 0
  %19 = sub nuw nsw i64 40, %17
  %20 = select i1 %18, i64 32, i64 %19
  %21 = add i64 %16, %20
  %22 = and i64 %21, 3
  %23 = icmp eq i64 %22, 0
  %24 = sub nuw nsw i64 8, %22
  %25 = select i1 %23, i64 4, i64 %24
  %26 = add i64 %25, %21
  %27 = urem i64 %26, %10
  %28 = icmp eq i64 %27, 0
  %29 = sub i64 %10, %27
  %30 = select i1 %28, i64 0, i64 %29
  %31 = add i64 %26, %30
  %32 = insertvalue { i64, i64 } undef, i64 %31, 0
  %33 = insertvalue { i64, i64 } %32, i64 %10, 1
  ret { i64, i64 } %33
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @Entry_field_Entry_0(ptr nocapture readonly %0) #3 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @Entry_field_Entry_1(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Entry_B_init_keyK_valueTombstone_hashPtri32_init_keyK_valueV_hashPtri32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #4 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %1)
  %4 = getelementptr i8, ptr %1, i64 8
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr i8, ptr %5, i64 8
  %7 = getelementptr i8, ptr %5, i64 16
  %8 = getelementptr i8, ptr %5, i64 24
  %9 = getelementptr i8, ptr %5, i64 32
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %result.i = tail call i1 %12(i64 %11, i64 %10, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr readonly %13) #3
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = select i1 %result.i, i64 10, i64 9
  %16 = getelementptr [14 x ptr], ptr %14, i64 0, i64 %15
  %17 = getelementptr i8, ptr %16, i64 72
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Entry_B_key_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 160
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Entry_B_value_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 168
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Entry_B_hash_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 176
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @Entry_init_keyK_valueTombstone_hashPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, i160 } %3, { ptr, i160 } %4, i32 %5) {
  %.fca.0.extract7 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract8 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract7, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract7, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract7, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 4015701072841558310
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %7 = tail call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract7)
  %8 = sext i32 %offset.i.i to i64
  %9 = getelementptr ptr, ptr %.fca.0.extract7, i64 %8
  %10 = getelementptr i8, ptr %9, i64 16
  %11 = load ptr, ptr %10, align 8
  %12 = getelementptr i8, ptr %11, i64 8
  %13 = load ptr, ptr %12, align 8
  tail call void %13(ptr %.fca.1.extract8, { ptr, i160 } %3)
  %.fca.0.extract = extractvalue { ptr, i160 } %4, 0
  %.fca.1.extract = extractvalue { ptr, i160 } %4, 1
  %hash_coef_ptr.i.i10 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i11 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i12 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i13 = load i64, ptr %hash_coef_ptr.i.i10, align 4
  %tbl_size.i.i14 = load i64, ptr %tbl_size_ptr.i.i11, align 4
  %offset_tbl.i.i15 = load ptr, ptr %offset_tbl_ptr.i.i12, align 8
  %product.i.i.i16 = mul i64 %hash_coef.i.i13, -8477883990763853851
  %shifted.i.i.i17 = lshr i64 %product.i.i.i16, 32
  %xored.i.i.i18 = xor i64 %shifted.i.i.i17, %product.i.i.i16
  %hash.i.i.i19 = and i64 %xored.i.i.i18, %tbl_size.i.i14
  %offset_ptr.i.i20 = getelementptr i32, ptr %offset_tbl.i.i15, i64 %hash.i.i.i19
  %offset.i.i21 = load i32, ptr %offset_ptr.i.i20, align 4
  %14 = tail call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract7)
  %15 = getelementptr i8, ptr %9, i64 24
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr i8, ptr %16, i64 8
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, i160 } undef, ptr %.fca.0.extract, 0
  %.sroa.5.8.insert.ext = zext i32 %offset.i.i21 to i160
  %.sroa.5.8.insert.shift = shl nuw i160 %.sroa.5.8.insert.ext, 128
  %.sroa.3.8.insert.ext = and i160 %.fca.1.extract, 340282366920938463463374607431768211455
  %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.5.8.insert.shift, %.sroa.3.8.insert.ext
  %20 = insertvalue { ptr, i160 } %19, i160 %.sroa.3.8.insert.insert, 1
  tail call void %18(ptr %.fca.1.extract8, { ptr, i160 } %20)
  %21 = tail call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract7)
  %22 = getelementptr i8, ptr %9, i64 32
  %23 = load ptr, ptr %22, align 8
  %24 = getelementptr i8, ptr %23, i64 8
  %25 = load ptr, ptr %24, align 8
  tail call void %25(ptr %.fca.1.extract8, i32 %5)
  ret void
}

define void @Entry_init_keyK_valueV_hashPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, i160 } %3, { ptr, i160 } %4, i32 %5) {
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 4015701072841558310
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %7 = tail call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract9)
  %8 = sext i32 %offset.i.i to i64
  %9 = getelementptr ptr, ptr %.fca.0.extract9, i64 %8
  %10 = getelementptr i8, ptr %9, i64 16
  %11 = load ptr, ptr %10, align 8
  %12 = getelementptr i8, ptr %11, i64 8
  %13 = load ptr, ptr %12, align 8
  tail call void %13(ptr %.fca.1.extract10, { ptr, i160 } %3)
  %14 = tail call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract9)
  %15 = getelementptr i8, ptr %9, i64 24
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr i8, ptr %16, i64 8
  %18 = load ptr, ptr %17, align 8
  tail call void %18(ptr %.fca.1.extract10, { ptr, i160 } %4)
  %19 = tail call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract9)
  %20 = getelementptr i8, ptr %9, i64 32
  %21 = load ptr, ptr %20, align 8
  %22 = getelementptr i8, ptr %21, i64 8
  %23 = load ptr, ptr %22, align 8
  tail call void %23(ptr %.fca.1.extract10, i32 %5)
  ret void
}

define { ptr, i160 } @Entry_key_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 4015701072841558310
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %4 = tail call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract3)
  %5 = sext i32 %offset.i.i to i64
  %6 = getelementptr ptr, ptr %.fca.0.extract3, i64 %5
  %7 = getelementptr i8, ptr %6, i64 16
  %8 = load ptr, ptr %7, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = tail call { ptr, i160 } %9(ptr %.fca.1.extract4)
  ret { ptr, i160 } %10
}

define { ptr, i160 } @Entry_value_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 4015701072841558310
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %4 = tail call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract1)
  %5 = sext i32 %offset.i.i to i64
  %6 = getelementptr ptr, ptr %.fca.0.extract1, i64 %5
  %7 = getelementptr i8, ptr %6, i64 24
  %8 = load ptr, ptr %7, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = tail call { ptr, i160 } %9(ptr %.fca.1.extract2)
  ret { ptr, i160 } %10
}

define i32 @Entry_hash_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 4015701072841558310
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %4 = tail call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract)
  %5 = sext i32 %offset.i.i to i64
  %6 = getelementptr ptr, ptr %.fca.0.extract, i64 %5
  %7 = getelementptr i8, ptr %6, i64 32
  %8 = load ptr, ptr %7, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = tail call i32 %9(ptr %.fca.1.extract)
  ret i32 %10
}

define linkonce_odr { i64, i64 } @_size_i32_typ(ptr %0) {
  ret { i64, i64 } { i64 4, i64 4 }
}

define linkonce_odr { ptr, i160 } @_box_i32_typ(ptr %0, ptr %1) {
  %3 = load i32, ptr %0, align 1
  %.sroa.2.sroa.0.0.insert.ext = zext i32 %3 to i160
  %4 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.2.sroa.0.0.insert.ext, 1
  ret { ptr, i160 } %4
}

define linkonce_odr void @_unbox_i32_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %.fca.1.extract = extractvalue { ptr, i160 } %0, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  store i32 %.sroa.1.8.extract.trunc, ptr %2, align 1
  ret void
}

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.inline.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #5

define i32 @Entry_getter_hash(ptr nocapture readonly %0) {
  %2 = load ptr, ptr %0, align 8
  %3 = load ptr, ptr %2, align 8
  %4 = getelementptr i8, ptr %3, i64 48
  %5 = load ptr, ptr %4, align 8
  %6 = tail call { i64, i64 } %5(ptr nonnull %2)
  %7 = extractvalue { i64, i64 } %6, 0
  %8 = extractvalue { i64, i64 } %6, 1
  %9 = urem i64 16, %8
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 %8, %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %12, %7
  %14 = add i64 %13, 16
  %15 = and i64 %13, 7
  %16 = icmp eq i64 %15, 0
  %17 = sub nuw nsw i64 40, %15
  %18 = select i1 %16, i64 32, i64 %17
  %19 = add i64 %14, %18
  %20 = and i64 %19, 3
  %21 = icmp eq i64 %20, 0
  %22 = sub nuw nsw i64 4, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = getelementptr i8, ptr %0, i64 %19
  %25 = getelementptr i8, ptr %24, i64 %23
  %26 = load i32, ptr %25, align 4
  ret i32 %26
}

define void @Entry_setter_hash(ptr nocapture %0, i32 %1) {
  %3 = load ptr, ptr %0, align 8
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr i8, ptr %4, i64 48
  %6 = load ptr, ptr %5, align 8
  %7 = tail call { i64, i64 } %6(ptr nonnull %3)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = extractvalue { i64, i64 } %7, 1
  %10 = urem i64 16, %9
  %11 = icmp eq i64 %10, 0
  %12 = sub i64 %9, %10
  %13 = select i1 %11, i64 0, i64 %12
  %14 = add i64 %13, %8
  %15 = add i64 %14, 16
  %16 = and i64 %14, 7
  %17 = icmp eq i64 %16, 0
  %18 = sub nuw nsw i64 40, %16
  %19 = select i1 %17, i64 32, i64 %18
  %20 = add i64 %15, %19
  %21 = and i64 %20, 3
  %22 = icmp eq i64 %21, 0
  %23 = sub nuw nsw i64 4, %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = getelementptr i8, ptr %0, i64 %20
  %26 = getelementptr i8, ptr %25, i64 %24
  store i32 %1, ptr %26, align 4
  ret void
}

define { ptr, i160 } @Entry_getter_value(ptr nocapture readonly %0) {
  %2 = load ptr, ptr %0, align 8
  %3 = load ptr, ptr %2, align 8
  %4 = getelementptr i8, ptr %3, i64 48
  %5 = load ptr, ptr %4, align 8
  %6 = tail call { i64, i64 } %5(ptr nonnull %2)
  %7 = extractvalue { i64, i64 } %6, 0
  %8 = extractvalue { i64, i64 } %6, 1
  %9 = urem i64 16, %8
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 %8, %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %12, %7
  %14 = and i64 %13, 7
  %15 = icmp eq i64 %14, 0
  %16 = sub nuw nsw i64 8, %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = getelementptr i8, ptr %0, i64 %13
  %19 = getelementptr i8, ptr %18, i64 16
  %20 = getelementptr i8, ptr %19, i64 %17
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, i160 } undef, ptr %21, 0
  %23 = getelementptr i8, ptr %20, i64 8
  %24 = load i160, ptr %23, align 4
  %25 = insertvalue { ptr, i160 } %22, i160 %24, 1
  ret { ptr, i160 } %25
}

define void @Entry_setter_value(ptr nocapture %0, { ptr, i160 } %1) {
  %3 = load ptr, ptr %0, align 8
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr i8, ptr %4, i64 48
  %6 = load ptr, ptr %5, align 8
  %7 = tail call { i64, i64 } %6(ptr nonnull %3)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = extractvalue { i64, i64 } %7, 1
  %10 = urem i64 16, %9
  %11 = icmp eq i64 %10, 0
  %12 = sub i64 %9, %10
  %13 = select i1 %11, i64 0, i64 %12
  %14 = add i64 %13, %8
  %15 = and i64 %14, 7
  %16 = icmp eq i64 %15, 0
  %17 = sub nuw nsw i64 8, %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = getelementptr i8, ptr %0, i64 %14
  %20 = getelementptr i8, ptr %19, i64 16
  %21 = getelementptr i8, ptr %20, i64 %18
  %.fca.0.extract = extractvalue { ptr, i160 } %1, 0
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  store ptr %.fca.0.extract, ptr %21, align 8
  %22 = getelementptr i8, ptr %21, i64 8
  store i160 %.fca.1.extract, ptr %22, align 4
  ret void
}

define { ptr, i160 } @Entry_getter_key(ptr %0) {
  %2 = load ptr, ptr %0, align 8
  %3 = load ptr, ptr %2, align 8
  %4 = getelementptr i8, ptr %3, i64 48
  %5 = load ptr, ptr %4, align 8
  %6 = tail call { i64, i64 } %5(ptr nonnull %2)
  %7 = extractvalue { i64, i64 } %6, 1
  %8 = urem i64 16, %7
  %9 = icmp eq i64 %8, 0
  %reass.sub = sub i64 %7, %8
  %10 = add i64 %reass.sub, 16
  %11 = select i1 %9, i64 16, i64 %10
  %12 = getelementptr i8, ptr %0, i64 %11
  %13 = load ptr, ptr %0, align 8
  %14 = load ptr, ptr %13, align 8
  %15 = getelementptr i8, ptr %14, i64 56
  %16 = load ptr, ptr %15, align 8
  %17 = tail call { ptr, i160 } %16(ptr %12, ptr nonnull %13)
  ret { ptr, i160 } %17
}

define void @Entry_setter_key(ptr %0, { ptr, i160 } %1) {
  %3 = load ptr, ptr %0, align 8
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr i8, ptr %4, i64 48
  %6 = load ptr, ptr %5, align 8
  %7 = tail call { i64, i64 } %6(ptr nonnull %3)
  %8 = extractvalue { i64, i64 } %7, 1
  %9 = urem i64 16, %8
  %10 = icmp eq i64 %9, 0
  %reass.sub = sub i64 %8, %9
  %11 = add i64 %reass.sub, 16
  %12 = select i1 %10, i64 16, i64 %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = load ptr, ptr %0, align 8
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 64
  %17 = load ptr, ptr %16, align 8
  tail call void %17({ ptr, i160 } %1, ptr nonnull %14, ptr %13)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_HashMap(ptr nocapture readnone %0) #0 {
  ret { i64, i64 } { i64 80, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @HashMap_field_HashMap_0(ptr nocapture readonly %0) #3 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @HashMap_field_HashMap_1(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @HashMap_field_HashMap_2(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @HashMap_B_init_hasherFunctionK_to_Ptri32_eqFunctionK._K_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 296
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @HashMap_B_find_slot_keyK_hashPtri32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 304
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @HashMap_B_resize_new_capacityPtri32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 312
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @HashMap_B_insert_internal_keyK_valueV_hashPtri32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 320
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @HashMap_B_insert_keyK_valueV({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 328
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @HashMap_B_get_keyK({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 336
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @HashMap_B_remove_keyK({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 344
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @HashMap_B_clear_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 352
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @HashMap_B_size_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 360
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @HashMap_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 368
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @HashMap_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 376
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @HashMap_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 384
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @HashMap_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 392
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @HashMap_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 400
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @HashMap_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 408
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @HashMap_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 416
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @HashMap_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 424
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @HashMap_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 432
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @HashMap_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 440
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @HashMap_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 448
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @HashMap_init_hasherFunctionK_to_Ptri32_eqFunctionK._K_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr } %3, { ptr } %4) {
  %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -2849643283898152329
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %6 = tail call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract3)
  %7 = sext i32 %offset.i.i to i64
  %8 = getelementptr ptr, ptr %.fca.0.extract3, i64 %7
  %9 = getelementptr i8, ptr %8, i64 48
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr i8, ptr %10, i64 8
  %12 = load ptr, ptr %11, align 8
  tail call void %12(ptr %.fca.1.extract, { ptr } %3)
  %13 = tail call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract3)
  %14 = getelementptr i8, ptr %8, i64 56
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = load ptr, ptr %16, align 8
  tail call void %17(ptr %.fca.1.extract, { ptr } %4)
  %18 = tail call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract3)
  %19 = load ptr, ptr %8, align 8
  %20 = tail call ptr %19(ptr %.fca.1.extract)
  %21 = tail call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract3)
  %22 = getelementptr i8, ptr %8, i64 8
  %23 = load ptr, ptr %22, align 8
  %24 = tail call ptr %23(ptr %.fca.1.extract)
  %result.i = tail call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %25 = getelementptr i8, ptr %result.i, i64 16
  store ptr @_parameterization_Nil, ptr %25, align 8
  %result.i4 = tail call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %26 = getelementptr i8, ptr %result.i4, i64 16
  store ptr %24, ptr %26, align 8
  %27 = getelementptr i8, ptr %result.i4, i64 8
  store ptr %20, ptr %27, align 8
  %28 = getelementptr i8, ptr %result.i4, i64 24
  store ptr null, ptr %28, align 8
  %29 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i4)
  store ptr @Entry, ptr %result.i4, align 8
  %30 = getelementptr i8, ptr %result.i, i64 8
  store ptr %result.i4, ptr %30, align 8
  %31 = getelementptr i8, ptr %result.i, i64 24
  store ptr null, ptr %31, align 8
  %32 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i)
  store ptr @union_typ, ptr %result.i, align 8
  %result.i5 = tail call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i, ptr %result.i5, align 8
  %33 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i5)
  %34 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Array, ptr undef, ptr undef, i32 undef }, ptr %result.i5, 1
  %35 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr undef, 2
  %36 = insertvalue { ptr, ptr, ptr, i32 } %35, i32 9, 3
  %37 = tail call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract3)
  %38 = load ptr, ptr %8, align 8
  %39 = tail call ptr %38(ptr %.fca.1.extract)
  %40 = tail call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract3)
  %41 = load ptr, ptr %22, align 8
  %42 = tail call ptr %41(ptr %.fca.1.extract)
  %43 = getelementptr i8, ptr %result.i5, i64 16
  store i32 16, ptr %43, align 4
  %44 = getelementptr i8, ptr %result.i5, i64 20
  store i32 16, ptr %44, align 4
  %result.i.i = tail call noalias dereferenceable_or_null(512) ptr @bump_malloc_inner(i64 noundef 512, ptr nonnull @current_ptr) #29
  %45 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %46 = getelementptr i8, ptr %result.i5, i64 8
  store ptr %result.i.i, ptr %46, align 8
  %47 = tail call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract3)
  %48 = getelementptr i8, ptr %8, i64 24
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr i8, ptr %49, i64 8
  %51 = load ptr, ptr %50, align 8
  tail call void %51(ptr %.fca.1.extract, { ptr, ptr, ptr, i32 } %36)
  %52 = tail call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract3)
  %53 = getelementptr i8, ptr %8, i64 32
  %54 = load ptr, ptr %53, align 8
  %55 = getelementptr i8, ptr %54, i64 8
  %56 = load ptr, ptr %55, align 8
  tail call void %56(ptr %.fca.1.extract, i32 0)
  %57 = tail call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract3)
  %58 = getelementptr i8, ptr %8, i64 40
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr i8, ptr %59, i64 8
  %61 = load ptr, ptr %60, align 8
  tail call void %61(ptr %.fca.1.extract, i32 0)
  ret void
}

define i32 @HashMap_find_slot_keyK_hashPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, i160 } %3, i32 %4) {
  %6 = alloca [0 x ptr], align 8
  %7 = alloca [1 x ptr], align 8
  %8 = alloca { ptr }, align 8
  %.fca.0.extract7 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract7, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract7, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract7, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -2849643283898152329
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %9 = tail call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract7)
  %10 = sext i32 %offset.i.i to i64
  %11 = getelementptr ptr, ptr %.fca.0.extract7, i64 %10
  %12 = getelementptr i8, ptr %11, i64 24
  %13 = load ptr, ptr %12, align 8
  %14 = load ptr, ptr %13, align 8
  %15 = tail call { ptr, ptr, ptr, i32 } %14(ptr %.fca.1.extract9)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %15, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %15, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %15, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %15, 3
  %hash_coef_ptr.i.i51 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i52 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i53 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i54 = load i64, ptr %hash_coef_ptr.i.i51, align 4
  %tbl_size.i.i55 = load i64, ptr %tbl_size_ptr.i.i52, align 4
  %offset_tbl.i.i56 = load ptr, ptr %offset_tbl_ptr.i.i53, align 8
  %product.i.i.i57 = mul i64 %hash_coef.i.i54, -5261542750394134544
  %shifted.i.i.i58 = lshr i64 %product.i.i.i57, 32
  %xored.i.i.i59 = xor i64 %shifted.i.i.i58, %product.i.i.i57
  %hash.i.i.i60 = and i64 %xored.i.i.i59, %tbl_size.i.i55
  %offset_ptr.i.i61 = getelementptr i32, ptr %offset_tbl.i.i56, i64 %hash.i.i.i60
  %offset.i.i62 = load i32, ptr %offset_ptr.i.i61, align 4
  %eq.i = icmp eq i32 %.fca.3.extract, %offset.i.i62
  tail call void @llvm.assume(i1 %eq.i) #30
  %16 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %17 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %.fca.1.extract, 1
  %18 = insertvalue { ptr, ptr, ptr, i32 } %17, ptr %.fca.2.extract, 2
  %19 = insertvalue { ptr, ptr, ptr, i32 } %18, i32 %.fca.3.extract, 3
  %20 = tail call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract7)
  %21 = load ptr, ptr %11, align 8
  %22 = tail call ptr %21(ptr %.fca.1.extract9)
  %23 = tail call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract7)
  %24 = getelementptr i8, ptr %11, i64 8
  %25 = load ptr, ptr %24, align 8
  %26 = tail call ptr %25(ptr %.fca.1.extract9)
  %27 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %6)
  %28 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract)
  %29 = sext i32 %.fca.3.extract to i64
  %30 = getelementptr ptr, ptr %.fca.0.extract, i64 %29
  %31 = getelementptr i8, ptr %30, i64 64
  %32 = load ptr, ptr %31, align 8
  %33 = call ptr %32({ ptr, ptr, ptr, i32 } %19, ptr nonnull %6)
  %34 = call i32 %33({ ptr, ptr, ptr, i32 } %19, { ptr, ptr, ptr, i32 } %19, ptr nonnull %6)
  %35 = add i32 %34, -1
  %36 = and i32 %35, %4
  %37 = alloca i32, align 4
  store i32 %36, ptr %37, align 4
  %38 = alloca i32, align 4
  store i32 -1, ptr %38, align 4
  %39 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract7)
  %40 = getelementptr i8, ptr %11, i64 56
  br label %41

41:                                               ; preds = %106, %5
  %.0..0..0. = phi i32 [ %129, %106 ], [ %36, %5 ]
  %42 = load ptr, ptr %12, align 8
  %43 = load ptr, ptr %42, align 8
  %44 = call { ptr, ptr, ptr, i32 } %43(ptr %.fca.1.extract9)
  %.fca.0.extract40 = extractvalue { ptr, ptr, ptr, i32 } %44, 0
  %.fca.1.extract42 = extractvalue { ptr, ptr, ptr, i32 } %44, 1
  %.fca.2.extract44 = extractvalue { ptr, ptr, ptr, i32 } %44, 2
  %.fca.3.extract46 = extractvalue { ptr, ptr, ptr, i32 } %44, 3
  %hash_coef_ptr.i.i65 = getelementptr i8, ptr %.fca.0.extract40, i64 8
  %tbl_size_ptr.i.i66 = getelementptr i8, ptr %.fca.0.extract40, i64 16
  %offset_tbl_ptr.i.i67 = getelementptr i8, ptr %.fca.0.extract40, i64 40
  %hash_coef.i.i68 = load i64, ptr %hash_coef_ptr.i.i65, align 4
  %tbl_size.i.i69 = load i64, ptr %tbl_size_ptr.i.i66, align 4
  %offset_tbl.i.i70 = load ptr, ptr %offset_tbl_ptr.i.i67, align 8
  %product.i.i.i71 = mul i64 %hash_coef.i.i68, -5261542750394134544
  %shifted.i.i.i72 = lshr i64 %product.i.i.i71, 32
  %xored.i.i.i73 = xor i64 %shifted.i.i.i72, %product.i.i.i71
  %hash.i.i.i74 = and i64 %xored.i.i.i73, %tbl_size.i.i69
  %offset_ptr.i.i75 = getelementptr i32, ptr %offset_tbl.i.i70, i64 %hash.i.i.i74
  %offset.i.i76 = load i32, ptr %offset_ptr.i.i75, align 4
  %eq.i79 = icmp eq i32 %.fca.3.extract46, %offset.i.i76
  call void @llvm.assume(i1 %eq.i79) #30
  %45 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract40, 0
  %46 = insertvalue { ptr, ptr, ptr, i32 } %45, ptr %.fca.1.extract42, 1
  %47 = insertvalue { ptr, ptr, ptr, i32 } %46, ptr %.fca.2.extract44, 2
  %48 = insertvalue { ptr, ptr, ptr, i32 } %47, i32 %.fca.3.extract46, 3
  %49 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract7)
  %50 = load ptr, ptr %11, align 8
  %51 = call ptr %50(ptr %.fca.1.extract9)
  %52 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract7)
  %53 = load ptr, ptr %24, align 8
  %54 = call ptr %53(ptr %.fca.1.extract9)
  store ptr @_parameterization_Ptri32, ptr %7, align 8
  %55 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %7)
  %56 = call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract40)
  %57 = sext i32 %.fca.3.extract46 to i64
  %58 = getelementptr ptr, ptr %.fca.0.extract40, i64 %57
  %59 = getelementptr i8, ptr %58, i64 120
  %60 = load ptr, ptr %59, align 8
  store ptr @i32_typ, ptr %8, align 8
  %61 = call ptr %60({ ptr, ptr, ptr, i32 } %48, ptr nonnull %8)
  %62 = call { ptr, i160 } %61({ ptr, ptr, ptr, i32 } %48, { ptr, ptr, ptr, i32 } %48, ptr nonnull %7, i32 %.0..0..0.)
  %.fca.0.extract36 = extractvalue { ptr, i160 } %62, 0
  %63 = icmp eq ptr %.fca.0.extract36, @nil_typ
  %64 = icmp eq ptr %.fca.0.extract36, null
  %65 = or i1 %63, %64
  br i1 %65, label %130, label %66

66:                                               ; preds = %41
  %.fca.1.extract38 = extractvalue { ptr, i160 } %62, 1
  %.sroa.5.8.extract.shift = lshr i160 %.fca.1.extract38, 64
  %.sroa.5.8.extract.trunc = trunc i160 %.sroa.5.8.extract.shift to i64
  %.sroa.2.8.extract.trunc165 = trunc i160 %.fca.1.extract38 to i64
  %67 = inttoptr i64 %.sroa.2.8.extract.trunc165 to ptr
  %68 = inttoptr i64 %.sroa.5.8.extract.trunc to ptr
  %hash_coef_ptr.i.i81 = getelementptr i8, ptr %.fca.0.extract36, i64 8
  %tbl_size_ptr.i.i82 = getelementptr i8, ptr %.fca.0.extract36, i64 16
  %offset_tbl_ptr.i.i83 = getelementptr i8, ptr %.fca.0.extract36, i64 40
  %hash_coef.i.i84 = load i64, ptr %hash_coef_ptr.i.i81, align 4
  %tbl_size.i.i85 = load i64, ptr %tbl_size_ptr.i.i82, align 4
  %offset_tbl.i.i86 = load ptr, ptr %offset_tbl_ptr.i.i83, align 8
  %product.i.i.i87 = mul i64 %hash_coef.i.i84, 4015701072841558310
  %shifted.i.i.i88 = lshr i64 %product.i.i.i87, 32
  %xored.i.i.i89 = xor i64 %shifted.i.i.i88, %product.i.i.i87
  %hash.i.i.i90 = and i64 %xored.i.i.i89, %tbl_size.i.i85
  %offset_ptr.i.i91 = getelementptr i32, ptr %offset_tbl.i.i86, i64 %hash.i.i.i90
  %offset.i.i92 = load i32, ptr %offset_ptr.i.i91, align 4
  %69 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract36, 0
  %70 = insertvalue { ptr, ptr, ptr, i32 } %69, ptr %67, 1
  %71 = insertvalue { ptr, ptr, ptr, i32 } %70, ptr %68, 2
  %72 = insertvalue { ptr, ptr, ptr, i32 } %71, i32 %offset.i.i92, 3
  %73 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract7)
  %74 = load ptr, ptr %11, align 8
  %75 = call ptr %74(ptr %.fca.1.extract9)
  %76 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract7)
  %77 = load ptr, ptr %24, align 8
  %78 = call ptr %77(ptr %.fca.1.extract9)
  %79 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %6)
  %80 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36)
  %81 = sext i32 %offset.i.i92 to i64
  %82 = getelementptr ptr, ptr %.fca.0.extract36, i64 %81
  %83 = getelementptr i8, ptr %82, i64 64
  %84 = load ptr, ptr %83, align 8
  %85 = call ptr %84({ ptr, ptr, ptr, i32 } %72, ptr nonnull %6)
  %86 = call i32 %85({ ptr, ptr, ptr, i32 } %72, { ptr, ptr, ptr, i32 } %72, ptr nonnull %6)
  %87 = icmp eq i32 %86, %4
  %88 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract7)
  %89 = load ptr, ptr %11, align 8
  %90 = call ptr %89(ptr %.fca.1.extract9)
  %91 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract7)
  %92 = load ptr, ptr %24, align 8
  %93 = call ptr %92(ptr %.fca.1.extract9)
  %94 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %6)
  %95 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36)
  %96 = getelementptr i8, ptr %82, i64 48
  %97 = load ptr, ptr %96, align 8
  %98 = call ptr %97({ ptr, ptr, ptr, i32 } %72, ptr nonnull %6)
  %99 = call { ptr, i160 } %98({ ptr, ptr, ptr, i32 } %72, { ptr, ptr, ptr, i32 } %72, ptr nonnull %6)
  %100 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract7)
  %101 = load ptr, ptr %40, align 8
  %102 = load ptr, ptr %101, align 8
  %103 = call { ptr } %102(ptr %.fca.1.extract9)
  %.fca.0.extract21 = extractvalue { ptr } %103, 0
  %104 = call i1 %.fca.0.extract21({ ptr, i160 } %99, { ptr, i160 } %3)
  %105 = and i1 %87, %104
  br i1 %105, label %.thread169, label %106

106:                                              ; preds = %66
  %107 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract7)
  %108 = load ptr, ptr %11, align 8
  %109 = call ptr %108(ptr %.fca.1.extract9)
  %110 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract7)
  %111 = load ptr, ptr %24, align 8
  %112 = call ptr %111(ptr %.fca.1.extract9)
  %113 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %6)
  %114 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36)
  %115 = getelementptr i8, ptr %82, i64 56
  %116 = load ptr, ptr %115, align 8
  %117 = call ptr %116({ ptr, ptr, ptr, i32 } %72, ptr nonnull %6)
  %118 = call { ptr, i160 } %117({ ptr, ptr, ptr, i32 } %72, { ptr, ptr, ptr, i32 } %72, ptr nonnull %6)
  %.fca.0.extract15 = extractvalue { ptr, i160 } %118, 0
  %119 = getelementptr i8, ptr %.fca.0.extract15, i64 8
  %120 = getelementptr i8, ptr %.fca.0.extract15, i64 16
  %121 = getelementptr i8, ptr %.fca.0.extract15, i64 24
  %122 = getelementptr i8, ptr %.fca.0.extract15, i64 32
  %123 = load i64, ptr %119, align 4
  %124 = load i64, ptr %120, align 4
  %125 = load ptr, ptr %121, align 8
  %126 = load ptr, ptr %122, align 8
  %result.i = call i1 %125(i64 %124, i64 %123, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %126) #3
  %.0..0..0.108 = load i32, ptr %38, align 4
  %127 = icmp eq i32 %.0..0..0.108, -1
  %or.cond = select i1 %result.i, i1 %127, i1 false
  %.0..0..0..0.49.pre = load i32, ptr %37, align 4
  %spec.store.select = select i1 %or.cond, i32 %.0..0..0..0.49.pre, i32 %.0..0..0.108
  store i32 %spec.store.select, ptr %38, align 4
  %128 = add i32 %.0..0..0..0.49.pre, 1
  %129 = and i32 %128, %35
  store i32 %129, ptr %37, align 4
  br label %41

130:                                              ; preds = %41
  %.0..0..0.109 = load i32, ptr %38, align 4
  %131 = icmp eq i32 %.0..0..0.109, -1
  %132 = select i1 %131, ptr %37, ptr %38
  br label %.thread169

.thread169:                                       ; preds = %66, %130
  %.reg2mem54.0 = phi ptr [ %132, %130 ], [ %37, %66 ]
  %133 = load i32, ptr %.reg2mem54.0, align 4
  ret i32 %133
}

define void @HashMap_resize_new_capacityPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca [1 x ptr], align 8
  %7 = alloca { ptr }, align 8
  %8 = alloca [3 x ptr], align 8
  %9 = alloca { ptr, ptr, ptr }, align 8
  %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract7 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -2849643283898152329
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %10 = tail call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract3)
  %11 = sext i32 %offset.i.i to i64
  %12 = getelementptr ptr, ptr %.fca.0.extract3, i64 %11
  %13 = getelementptr i8, ptr %12, i64 24
  %14 = load ptr, ptr %13, align 8
  %15 = load ptr, ptr %14, align 8
  %16 = tail call { ptr, ptr, ptr, i32 } %15(ptr %.fca.1.extract5)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %16, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %16, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %16, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %16, 3
  %hash_coef_ptr.i.i39 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i40 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i41 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i42 = load i64, ptr %hash_coef_ptr.i.i39, align 4
  %tbl_size.i.i43 = load i64, ptr %tbl_size_ptr.i.i40, align 4
  %offset_tbl.i.i44 = load ptr, ptr %offset_tbl_ptr.i.i41, align 8
  %product.i.i.i45 = mul i64 %hash_coef.i.i42, -5261542750394134544
  %shifted.i.i.i46 = lshr i64 %product.i.i.i45, 32
  %xored.i.i.i47 = xor i64 %shifted.i.i.i46, %product.i.i.i45
  %hash.i.i.i48 = and i64 %xored.i.i.i47, %tbl_size.i.i43
  %offset_ptr.i.i49 = getelementptr i32, ptr %offset_tbl.i.i44, i64 %hash.i.i.i48
  %offset.i.i50 = load i32, ptr %offset_ptr.i.i49, align 4
  %eq.i = icmp eq i32 %.fca.3.extract, %offset.i.i50
  tail call void @llvm.assume(i1 %eq.i) #30
  %17 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %17, align 8
  %18 = getelementptr inbounds i8, ptr %17, i64 8
  store ptr %.fca.1.extract, ptr %18, align 8
  %19 = getelementptr inbounds i8, ptr %17, i64 16
  store ptr %.fca.2.extract, ptr %19, align 8
  %20 = getelementptr inbounds i8, ptr %17, i64 24
  store i32 %.fca.3.extract, ptr %20, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %17)
  %22 = tail call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract3)
  %23 = load ptr, ptr %12, align 8
  %24 = tail call ptr %23(ptr %.fca.1.extract5)
  %25 = tail call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract3)
  %26 = getelementptr i8, ptr %12, i64 8
  %27 = load ptr, ptr %26, align 8
  %28 = tail call ptr %27(ptr %.fca.1.extract5)
  %result.i = tail call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %29 = getelementptr i8, ptr %result.i, i64 16
  store ptr @_parameterization_Nil, ptr %29, align 8
  %result.i66 = tail call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %30 = getelementptr i8, ptr %result.i66, i64 16
  store ptr %28, ptr %30, align 8
  %31 = getelementptr i8, ptr %result.i66, i64 8
  store ptr %24, ptr %31, align 8
  %32 = getelementptr i8, ptr %result.i66, i64 24
  store ptr null, ptr %32, align 8
  %33 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i66)
  store ptr @Entry, ptr %result.i66, align 8
  %34 = getelementptr i8, ptr %result.i, i64 8
  store ptr %result.i66, ptr %34, align 8
  %35 = getelementptr i8, ptr %result.i, i64 24
  store ptr null, ptr %35, align 8
  %36 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i)
  store ptr @union_typ, ptr %result.i, align 8
  %result.i67 = tail call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i, ptr %result.i67, align 8
  %37 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i67)
  %38 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Array, ptr undef, ptr undef, i32 undef }, ptr %result.i67, 1
  %39 = insertvalue { ptr, ptr, ptr, i32 } %38, ptr undef, 2
  %40 = insertvalue { ptr, ptr, ptr, i32 } %39, i32 9, 3
  %41 = tail call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract3)
  %42 = load ptr, ptr %12, align 8
  %43 = tail call ptr %42(ptr %.fca.1.extract5)
  %44 = tail call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract3)
  %45 = load ptr, ptr %26, align 8
  %46 = tail call ptr %45(ptr %.fca.1.extract5)
  %47 = getelementptr i8, ptr %result.i67, i64 16
  store i32 %3, ptr %47, align 4
  %48 = getelementptr i8, ptr %result.i67, i64 20
  store i32 %3, ptr %48, align 4
  %49 = sext i32 %3 to i64
  %50 = shl nsw i64 %49, 5
  %result.i.i = tail call noalias ptr @bump_malloc_inner(i64 noundef %50, ptr nonnull @current_ptr) #29
  %51 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %52 = getelementptr i8, ptr %result.i67, i64 8
  store ptr %result.i.i, ptr %52, align 8
  %53 = tail call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract3)
  %54 = load ptr, ptr %13, align 8
  %55 = getelementptr i8, ptr %54, i64 8
  %56 = load ptr, ptr %55, align 8
  tail call void %56(ptr %.fca.1.extract5, { ptr, ptr, ptr, i32 } %40)
  %57 = tail call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract3)
  %58 = getelementptr i8, ptr %12, i64 32
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr i8, ptr %59, i64 8
  %61 = load ptr, ptr %60, align 8
  tail call void %61(ptr %.fca.1.extract5, i32 0)
  %62 = tail call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract3)
  %63 = getelementptr i8, ptr %12, i64 40
  %64 = load ptr, ptr %63, align 8
  %65 = getelementptr i8, ptr %64, i64 8
  %66 = load ptr, ptr %65, align 8
  tail call void %66(ptr %.fca.1.extract5, i32 0)
  %67 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %68 = tail call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract3)
  %invariant.gep = getelementptr i8, ptr %.fca.0.extract, i64 64
  %invariant.gep172 = getelementptr i8, ptr %.fca.0.extract, i64 120
  %69 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract3, 0
  %70 = insertvalue { ptr, ptr, ptr, i32 } %69, ptr %.fca.1.extract5, 1
  %71 = insertvalue { ptr, ptr, ptr, i32 } %70, ptr %.fca.2.extract7, 2
  %72 = insertvalue { ptr, ptr, ptr, i32 } %71, i32 %offset.i.i, 3
  %73 = getelementptr inbounds i8, ptr %8, i64 8
  %74 = getelementptr inbounds i8, ptr %8, i64 16
  %75 = getelementptr i8, ptr %12, i64 88
  %76 = getelementptr inbounds i8, ptr %9, i64 8
  %77 = getelementptr inbounds i8, ptr %9, i64 16
  br label %._crit_edge3

._crit_edge3:                                     ; preds = %182, %4
  %78 = phi i32 [ %.fca.3.extract, %4 ], [ %.pre175, %182 ]
  %79 = phi ptr [ %.fca.2.extract, %4 ], [ %.pre174, %182 ]
  %80 = phi ptr [ %.fca.1.extract, %4 ], [ %.pre, %182 ]
  %.reg2mem31.0 = phi i32 [ 0, %4 ], [ %183, %182 ]
  %81 = insertvalue { ptr, ptr, ptr, i32 } %67, ptr %80, 1
  %82 = insertvalue { ptr, ptr, ptr, i32 } %81, ptr %79, 2
  %83 = insertvalue { ptr, ptr, ptr, i32 } %82, i32 %78, 3
  %84 = load ptr, ptr %12, align 8
  %85 = call ptr %84(ptr %.fca.1.extract5)
  %86 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract3)
  %87 = load ptr, ptr %26, align 8
  %88 = call ptr %87(ptr %.fca.1.extract5)
  %89 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %90 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %.fca.0.extract)
  %91 = sext i32 %78 to i64
  %gep = getelementptr ptr, ptr %invariant.gep, i64 %91
  %92 = load ptr, ptr %gep, align 8
  %93 = call ptr %92({ ptr, ptr, ptr, i32 } %83, ptr nonnull %5)
  %94 = call i32 %93({ ptr, ptr, ptr, i32 } %83, { ptr, ptr, ptr, i32 } %83, ptr nonnull %5)
  %95 = icmp slt i32 %.reg2mem31.0, %94
  br i1 %95, label %96, label %184

96:                                               ; preds = %._crit_edge3
  %97 = load ptr, ptr %18, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } %67, ptr %97, 1
  %99 = load ptr, ptr %19, align 8
  %100 = insertvalue { ptr, ptr, ptr, i32 } %98, ptr %99, 2
  %101 = load i32, ptr %20, align 8
  %102 = insertvalue { ptr, ptr, ptr, i32 } %100, i32 %101, 3
  %103 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract3)
  %104 = load ptr, ptr %12, align 8
  %105 = call ptr %104(ptr %.fca.1.extract5)
  %106 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract3)
  %107 = load ptr, ptr %26, align 8
  %108 = call ptr %107(ptr %.fca.1.extract5)
  store ptr @_parameterization_Ptri32, ptr %6, align 8
  %109 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %6)
  %110 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %.fca.0.extract)
  %111 = sext i32 %101 to i64
  %gep173 = getelementptr ptr, ptr %invariant.gep172, i64 %111
  %112 = load ptr, ptr %gep173, align 8
  store ptr @i32_typ, ptr %7, align 8
  %113 = call ptr %112({ ptr, ptr, ptr, i32 } %102, ptr nonnull %7)
  %114 = call { ptr, i160 } %113({ ptr, ptr, ptr, i32 } %102, { ptr, ptr, ptr, i32 } %102, ptr nonnull %6, i32 %.reg2mem31.0)
  %.fca.0.extract30 = extractvalue { ptr, i160 } %114, 0
  %115 = icmp ne ptr %.fca.0.extract30, @nil_typ
  %116 = icmp ne ptr %.fca.0.extract30, null
  %.not37 = and i1 %115, %116
  br i1 %.not37, label %117, label %182

117:                                              ; preds = %96
  %.fca.1.extract32 = extractvalue { ptr, i160 } %114, 1
  %.sroa.5164.8.extract.trunc = trunc i160 %.fca.1.extract32 to i64
  %118 = inttoptr i64 %.sroa.5164.8.extract.trunc to ptr
  %.sroa.9.8.extract.shift = lshr i160 %.fca.1.extract32, 64
  %.sroa.9.8.extract.trunc = trunc i160 %.sroa.9.8.extract.shift to i64
  %119 = inttoptr i64 %.sroa.9.8.extract.trunc to ptr
  %hash_coef_ptr.i.i83 = getelementptr i8, ptr %.fca.0.extract30, i64 8
  %tbl_size_ptr.i.i84 = getelementptr i8, ptr %.fca.0.extract30, i64 16
  %offset_tbl_ptr.i.i85 = getelementptr i8, ptr %.fca.0.extract30, i64 40
  %hash_coef.i.i86 = load i64, ptr %hash_coef_ptr.i.i83, align 4
  %tbl_size.i.i87 = load i64, ptr %tbl_size_ptr.i.i84, align 4
  %offset_tbl.i.i88 = load ptr, ptr %offset_tbl_ptr.i.i85, align 8
  %product.i.i.i89 = mul i64 %hash_coef.i.i86, 4015701072841558310
  %shifted.i.i.i90 = lshr i64 %product.i.i.i89, 32
  %xored.i.i.i91 = xor i64 %shifted.i.i.i90, %product.i.i.i89
  %hash.i.i.i92 = and i64 %xored.i.i.i91, %tbl_size.i.i87
  %offset_ptr.i.i93 = getelementptr i32, ptr %offset_tbl.i.i88, i64 %hash.i.i.i92
  %offset.i.i94 = load i32, ptr %offset_ptr.i.i93, align 4
  %120 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract30, 0
  %121 = insertvalue { ptr, ptr, ptr, i32 } %120, ptr %118, 1
  %122 = insertvalue { ptr, ptr, ptr, i32 } %121, ptr %119, 2
  %123 = insertvalue { ptr, ptr, ptr, i32 } %122, i32 %offset.i.i94, 3
  %124 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract3)
  %125 = load ptr, ptr %12, align 8
  %126 = call ptr %125(ptr %.fca.1.extract5)
  %127 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract3)
  %128 = load ptr, ptr %26, align 8
  %129 = call ptr %128(ptr %.fca.1.extract5)
  %130 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %131 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract30)
  %132 = sext i32 %offset.i.i94 to i64
  %133 = getelementptr ptr, ptr %.fca.0.extract30, i64 %132
  %134 = getelementptr i8, ptr %133, i64 56
  %135 = load ptr, ptr %134, align 8
  %136 = call ptr %135({ ptr, ptr, ptr, i32 } %123, ptr nonnull %5)
  %137 = call { ptr, i160 } %136({ ptr, ptr, ptr, i32 } %123, { ptr, ptr, ptr, i32 } %123, ptr nonnull %5)
  %.fca.0.extract23 = extractvalue { ptr, i160 } %137, 0
  %138 = getelementptr i8, ptr %.fca.0.extract23, i64 8
  %139 = getelementptr i8, ptr %.fca.0.extract23, i64 16
  %140 = getelementptr i8, ptr %.fca.0.extract23, i64 24
  %141 = getelementptr i8, ptr %.fca.0.extract23, i64 32
  %142 = load i64, ptr %138, align 4
  %143 = load i64, ptr %139, align 4
  %144 = load ptr, ptr %140, align 8
  %145 = load ptr, ptr %141, align 8
  %result.i96 = call i1 %144(i64 %143, i64 %142, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %145) #3
  br i1 %result.i96, label %182, label %146

146:                                              ; preds = %117
  %result.i97 = call i1 %144(i64 %143, i64 %142, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr readonly %145) #3
  br i1 %result.i97, label %147, label %182

147:                                              ; preds = %146
  %148 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract3)
  %149 = load ptr, ptr %12, align 8
  %150 = call ptr %149(ptr %.fca.1.extract5)
  %151 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract3)
  %152 = load ptr, ptr %26, align 8
  %153 = call ptr %152(ptr %.fca.1.extract5)
  %154 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %155 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract30)
  %156 = getelementptr i8, ptr %133, i64 48
  %157 = load ptr, ptr %156, align 8
  %158 = call ptr %157({ ptr, ptr, ptr, i32 } %123, ptr nonnull %5)
  %159 = call { ptr, i160 } %158({ ptr, ptr, ptr, i32 } %123, { ptr, ptr, ptr, i32 } %123, ptr nonnull %5)
  %.fca.0.extract15 = extractvalue { ptr, i160 } %159, 0
  %160 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract3)
  %161 = load ptr, ptr %12, align 8
  %162 = call ptr %161(ptr %.fca.1.extract5)
  %163 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract3)
  %164 = load ptr, ptr %26, align 8
  %165 = call ptr %164(ptr %.fca.1.extract5)
  %166 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %167 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract30)
  %168 = getelementptr i8, ptr %133, i64 64
  %169 = load ptr, ptr %168, align 8
  %170 = call ptr %169({ ptr, ptr, ptr, i32 } %123, ptr nonnull %5)
  %171 = call i32 %170({ ptr, ptr, ptr, i32 } %123, { ptr, ptr, ptr, i32 } %123, ptr nonnull %5)
  %172 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract3)
  %173 = load ptr, ptr %12, align 8
  %174 = call ptr %173(ptr %.fca.1.extract5)
  %175 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract3)
  %176 = load ptr, ptr %26, align 8
  %177 = call ptr %176(ptr %.fca.1.extract5)
  store ptr %174, ptr %8, align 8
  store ptr %177, ptr %73, align 8
  store ptr @_parameterization_Ptri32, ptr %74, align 8
  %178 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %8)
  %179 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract3)
  %180 = load ptr, ptr %75, align 8
  store ptr %.fca.0.extract15, ptr %9, align 8
  store ptr %.fca.0.extract23, ptr %76, align 8
  store ptr @i32_typ, ptr %77, align 8
  %181 = call ptr %180({ ptr, ptr, ptr, i32 } %72, ptr nonnull %9)
  call void %181({ ptr, ptr, ptr, i32 } %72, { ptr, ptr, ptr, i32 } %72, ptr nonnull %8, { ptr, i160 } %159, { ptr, i160 } %137, i32 %171)
  br label %182

182:                                              ; preds = %96, %147, %146, %117
  %183 = add nuw nsw i32 %.reg2mem31.0, 1
  %.pre = load ptr, ptr %18, align 8
  %.pre174 = load ptr, ptr %19, align 8
  %.pre175 = load i32, ptr %20, align 8
  br label %._crit_edge3

184:                                              ; preds = %._crit_edge3
  ret void
}

define void @HashMap_insert_internal_keyK_valueV_hashPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, i160 } %3, { ptr, i160 } %4, i32 %5) {
  %7 = alloca [0 x ptr], align 8
  %.fca.0.extract37 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract39 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract41 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract37, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract37, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract37, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -2849643283898152329
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract31 = extractvalue { ptr, i160 } %3, 0
  %.fca.0.extract21 = extractvalue { ptr, i160 } %4, 0
  %8 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract37, 0
  %9 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %.fca.1.extract39, 1
  %10 = insertvalue { ptr, ptr, ptr, i32 } %9, ptr %.fca.2.extract41, 2
  %11 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %offset.i.i, 3
  %12 = tail call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract37)
  %13 = sext i32 %offset.i.i to i64
  %14 = getelementptr ptr, ptr %.fca.0.extract37, i64 %13
  %15 = load ptr, ptr %14, align 8
  %16 = tail call ptr %15(ptr %.fca.1.extract39)
  %17 = tail call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract37)
  %18 = getelementptr i8, ptr %14, i64 8
  %19 = load ptr, ptr %18, align 8
  %20 = tail call ptr %19(ptr %.fca.1.extract39)
  %21 = alloca [2 x ptr], align 8
  store ptr %16, ptr %21, align 8
  %22 = getelementptr inbounds i8, ptr %21, i64 8
  store ptr @_parameterization_Ptri32, ptr %22, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %21)
  %24 = tail call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract37)
  %25 = getelementptr i8, ptr %14, i64 72
  %26 = load ptr, ptr %25, align 8
  %27 = alloca { ptr, ptr }, align 8
  store ptr %.fca.0.extract31, ptr %27, align 8
  %28 = getelementptr inbounds i8, ptr %27, i64 8
  store ptr @i32_typ, ptr %28, align 8
  %29 = call ptr %26({ ptr, ptr, ptr, i32 } %11, ptr nonnull %27)
  %30 = call i32 %29({ ptr, ptr, ptr, i32 } %11, { ptr, ptr, ptr, i32 } %11, ptr nonnull %21, { ptr, i160 } %3, i32 %5)
  %31 = call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract37)
  %32 = getelementptr i8, ptr %14, i64 24
  %33 = load ptr, ptr %32, align 8
  %34 = load ptr, ptr %33, align 8
  %35 = call { ptr, ptr, ptr, i32 } %34(ptr %.fca.1.extract39)
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %35, 0
  %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %35, 1
  %.fca.2.extract13 = extractvalue { ptr, ptr, ptr, i32 } %35, 2
  %.fca.3.extract15 = extractvalue { ptr, ptr, ptr, i32 } %35, 3
  %hash_coef_ptr.i.i56 = getelementptr i8, ptr %.fca.0.extract9, i64 8
  %tbl_size_ptr.i.i57 = getelementptr i8, ptr %.fca.0.extract9, i64 16
  %offset_tbl_ptr.i.i58 = getelementptr i8, ptr %.fca.0.extract9, i64 40
  %hash_coef.i.i59 = load i64, ptr %hash_coef_ptr.i.i56, align 4
  %tbl_size.i.i60 = load i64, ptr %tbl_size_ptr.i.i57, align 4
  %offset_tbl.i.i61 = load ptr, ptr %offset_tbl_ptr.i.i58, align 8
  %product.i.i.i62 = mul i64 %hash_coef.i.i59, -5261542750394134544
  %shifted.i.i.i63 = lshr i64 %product.i.i.i62, 32
  %xored.i.i.i64 = xor i64 %shifted.i.i.i63, %product.i.i.i62
  %hash.i.i.i65 = and i64 %xored.i.i.i64, %tbl_size.i.i60
  %offset_ptr.i.i66 = getelementptr i32, ptr %offset_tbl.i.i61, i64 %hash.i.i.i65
  %offset.i.i67 = load i32, ptr %offset_ptr.i.i66, align 4
  %eq.i = icmp eq i32 %.fca.3.extract15, %offset.i.i67
  call void @llvm.assume(i1 %eq.i) #30
  %36 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract9, 0
  %37 = insertvalue { ptr, ptr, ptr, i32 } %36, ptr %.fca.1.extract11, 1
  %38 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %.fca.2.extract13, 2
  %39 = insertvalue { ptr, ptr, ptr, i32 } %38, i32 %.fca.3.extract15, 3
  %40 = call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract37)
  %41 = load ptr, ptr %14, align 8
  %42 = call ptr %41(ptr %.fca.1.extract39)
  %43 = call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract37)
  %44 = load ptr, ptr %18, align 8
  %45 = call ptr %44(ptr %.fca.1.extract39)
  %46 = alloca [1 x ptr], align 8
  store ptr @_parameterization_Ptri32, ptr %46, align 8
  %47 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %46)
  %48 = call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract9)
  %49 = sext i32 %.fca.3.extract15 to i64
  %50 = getelementptr ptr, ptr %.fca.0.extract9, i64 %49
  %51 = getelementptr i8, ptr %50, i64 120
  %52 = load ptr, ptr %51, align 8
  %53 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %53, align 8
  %54 = call ptr %52({ ptr, ptr, ptr, i32 } %39, ptr nonnull %53)
  %55 = call { ptr, i160 } %54({ ptr, ptr, ptr, i32 } %39, { ptr, ptr, ptr, i32 } %39, ptr nonnull %46, i32 %30)
  %.fca.0.extract2 = extractvalue { ptr, i160 } %55, 0
  %56 = call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract37)
  %57 = load ptr, ptr %14, align 8
  %58 = call ptr %57(ptr %.fca.1.extract39)
  %59 = call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract37)
  %60 = load ptr, ptr %18, align 8
  %61 = call ptr %60(ptr %.fca.1.extract39)
  %62 = load ptr, ptr %58, align 8
  %63 = getelementptr i8, ptr %62, i64 48
  %64 = load ptr, ptr %63, align 8
  %65 = call { i64, i64 } %64(ptr nonnull %58)
  %66 = extractvalue { i64, i64 } %65, 0
  %67 = extractvalue { i64, i64 } %65, 1
  %68 = call i64 @llvm.umax.i64(i64 %67, i64 8)
  %69 = urem i64 16, %67
  %70 = icmp eq i64 %69, 0
  %71 = sub i64 %67, %69
  %72 = select i1 %70, i64 0, i64 %71
  %73 = add i64 %72, %66
  %74 = add i64 %73, 16
  %75 = and i64 %73, 7
  %76 = icmp eq i64 %75, 0
  %77 = sub nuw nsw i64 40, %75
  %78 = select i1 %76, i64 32, i64 %77
  %79 = add i64 %74, %78
  %80 = and i64 %79, 3
  %81 = icmp eq i64 %80, 0
  %82 = sub nuw nsw i64 8, %80
  %83 = select i1 %81, i64 4, i64 %82
  %84 = add i64 %83, %79
  %85 = urem i64 %84, %68
  %86 = icmp eq i64 %85, 0
  %87 = sub i64 %68, %85
  %88 = select i1 %86, i64 0, i64 %87
  %89 = add i64 %84, %88
  %result.i = call noalias ptr @bump_malloc_inner(i64 noundef %89, ptr nonnull @current_ptr) #29
  store ptr %58, ptr %result.i, align 8
  %90 = getelementptr i8, ptr %result.i, i64 8
  store ptr %61, ptr %90, align 8
  %91 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i)
  %92 = alloca { ptr, ptr, ptr, i32 }, align 8
  %93 = getelementptr inbounds i8, ptr %92, i64 8
  %94 = getelementptr inbounds i8, ptr %92, i64 24
  store ptr @Entry, ptr %92, align 8
  store ptr %result.i, ptr %93, align 8
  store i32 9, ptr %94, align 8
  %95 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %92)
  %96 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Entry, ptr undef, ptr undef, i32 undef }, ptr %result.i, 1
  %97 = getelementptr inbounds i8, ptr %92, i64 16
  %98 = insertvalue { ptr, ptr, ptr, i32 } %96, ptr undef, 2
  %99 = insertvalue { ptr, ptr, ptr, i32 } %98, i32 9, 3
  %100 = call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract37)
  %101 = load ptr, ptr %14, align 8
  %102 = call ptr %101(ptr %.fca.1.extract39)
  %103 = call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract37)
  %104 = load ptr, ptr %18, align 8
  %105 = call ptr %104(ptr %.fca.1.extract39)
  %106 = alloca [3 x ptr], align 8
  store ptr %102, ptr %106, align 8
  %107 = getelementptr inbounds i8, ptr %106, i64 8
  store ptr %105, ptr %107, align 8
  %108 = getelementptr inbounds i8, ptr %106, i64 16
  store ptr @_parameterization_Ptri32, ptr %108, align 8
  %109 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %106)
  %110 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %111 = getelementptr i8, ptr %.fca.0.extract21, i64 8
  %112 = getelementptr i8, ptr %.fca.0.extract21, i64 16
  %113 = getelementptr i8, ptr %.fca.0.extract21, i64 24
  %114 = getelementptr i8, ptr %.fca.0.extract21, i64 32
  %115 = load i64, ptr %111, align 4
  %116 = load i64, ptr %112, align 4
  %117 = load ptr, ptr %113, align 8
  %118 = load ptr, ptr %114, align 8
  %result.i.i = call i1 %117(i64 %116, i64 %115, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr readonly %118) #3
  %119 = select i1 %result.i.i, i64 10, i64 9
  %120 = getelementptr [14 x ptr], ptr @Entry, i64 0, i64 %119
  %121 = getelementptr i8, ptr %120, i64 72
  %122 = load ptr, ptr %121, align 8
  call void %122({ ptr, ptr, ptr, i32 } %99, { ptr, ptr, ptr, i32 } %99, ptr nonnull %106, { ptr, i160 } %3, { ptr, i160 } %4, i32 %5)
  %123 = load ptr, ptr %92, align 8
  %124 = load ptr, ptr %93, align 8
  %125 = load ptr, ptr %97, align 8
  %hash_coef_ptr.i.i70 = getelementptr i8, ptr %123, i64 8
  %tbl_size_ptr.i.i71 = getelementptr i8, ptr %123, i64 16
  %offset_tbl_ptr.i.i72 = getelementptr i8, ptr %123, i64 40
  %hash_coef.i.i73 = load i64, ptr %hash_coef_ptr.i.i70, align 4
  %tbl_size.i.i74 = load i64, ptr %tbl_size_ptr.i.i71, align 4
  %offset_tbl.i.i75 = load ptr, ptr %offset_tbl_ptr.i.i72, align 8
  %product.i.i.i76 = mul i64 %hash_coef.i.i73, 4015701072841558310
  %shifted.i.i.i77 = lshr i64 %product.i.i.i76, 32
  %xored.i.i.i78 = xor i64 %shifted.i.i.i77, %product.i.i.i76
  %hash.i.i.i79 = and i64 %xored.i.i.i78, %tbl_size.i.i74
  %offset_ptr.i.i80 = getelementptr i32, ptr %offset_tbl.i.i75, i64 %hash.i.i.i79
  %offset.i.i81 = load i32, ptr %offset_ptr.i.i80, align 4
  %126 = insertvalue { ptr, i160 } undef, ptr %123, 0
  %127 = ptrtoint ptr %124 to i64
  %128 = ptrtoint ptr %125 to i64
  %.sroa.3.0.insert.ext = zext i32 %offset.i.i81 to i160
  %.sroa.3.0.insert.shift = shl nuw i160 %.sroa.3.0.insert.ext, 128
  %.sroa.2.0.insert.ext = zext i64 %128 to i160
  %.sroa.2.0.insert.shift = shl nuw nsw i160 %.sroa.2.0.insert.ext, 64
  %.sroa.2.0.insert.insert = or disjoint i160 %.sroa.3.0.insert.shift, %.sroa.2.0.insert.shift
  %.sroa.0.0.insert.ext = zext i64 %127 to i160
  %.sroa.0.0.insert.insert = or disjoint i160 %.sroa.2.0.insert.insert, %.sroa.0.0.insert.ext
  %129 = insertvalue { ptr, i160 } %126, i160 %.sroa.0.0.insert.insert, 1
  %130 = call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract37)
  %131 = load ptr, ptr %32, align 8
  %132 = load ptr, ptr %131, align 8
  %133 = call { ptr, ptr, ptr, i32 } %132(ptr %.fca.1.extract39)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %133, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %133, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %133, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %133, 3
  %hash_coef_ptr.i.i84 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i85 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i86 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i87 = load i64, ptr %hash_coef_ptr.i.i84, align 4
  %tbl_size.i.i88 = load i64, ptr %tbl_size_ptr.i.i85, align 4
  %offset_tbl.i.i89 = load ptr, ptr %offset_tbl_ptr.i.i86, align 8
  %product.i.i.i90 = mul i64 %hash_coef.i.i87, -5261542750394134544
  %shifted.i.i.i91 = lshr i64 %product.i.i.i90, 32
  %xored.i.i.i92 = xor i64 %shifted.i.i.i91, %product.i.i.i90
  %hash.i.i.i93 = and i64 %xored.i.i.i92, %tbl_size.i.i88
  %offset_ptr.i.i94 = getelementptr i32, ptr %offset_tbl.i.i89, i64 %hash.i.i.i93
  %offset.i.i95 = load i32, ptr %offset_ptr.i.i94, align 4
  %eq.i98 = icmp eq i32 %.fca.3.extract, %offset.i.i95
  call void @llvm.assume(i1 %eq.i98) #30
  %134 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %135 = insertvalue { ptr, ptr, ptr, i32 } %134, ptr %.fca.1.extract, 1
  %136 = insertvalue { ptr, ptr, ptr, i32 } %135, ptr %.fca.2.extract, 2
  %137 = insertvalue { ptr, ptr, ptr, i32 } %136, i32 %.fca.3.extract, 3
  %138 = call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract37)
  %139 = load ptr, ptr %14, align 8
  %140 = call ptr %139(ptr %.fca.1.extract39)
  %141 = call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract37)
  %142 = load ptr, ptr %18, align 8
  %143 = call ptr %142(ptr %.fca.1.extract39)
  %result.i99 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %144 = getelementptr i8, ptr %result.i99, i64 16
  store ptr %143, ptr %144, align 8
  %145 = getelementptr i8, ptr %result.i99, i64 8
  store ptr %140, ptr %145, align 8
  %146 = getelementptr i8, ptr %result.i99, i64 24
  store ptr null, ptr %146, align 8
  %147 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i99)
  store ptr @Entry, ptr %result.i99, align 8
  %148 = alloca [2 x ptr], align 8
  store ptr @_parameterization_Ptri32, ptr %148, align 8
  %149 = getelementptr inbounds i8, ptr %148, i64 8
  store ptr %result.i99, ptr %149, align 8
  %150 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %148)
  %151 = call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract)
  %152 = sext i32 %.fca.3.extract to i64
  %153 = getelementptr ptr, ptr %.fca.0.extract, i64 %152
  %154 = getelementptr i8, ptr %153, i64 128
  %155 = load ptr, ptr %154, align 8
  %156 = alloca { ptr, ptr }, align 8
  store ptr @i32_typ, ptr %156, align 8
  %157 = getelementptr inbounds i8, ptr %156, i64 8
  store ptr %123, ptr %157, align 8
  %158 = call ptr %155({ ptr, ptr, ptr, i32 } %137, ptr nonnull %156)
  call void %158({ ptr, ptr, ptr, i32 } %137, { ptr, ptr, ptr, i32 } %137, ptr nonnull %148, i32 %30, { ptr, i160 } %129)
  %159 = icmp eq ptr %.fca.0.extract2, @nil_typ
  %160 = icmp eq ptr %.fca.0.extract2, null
  %161 = or i1 %159, %160
  br i1 %161, label %._crit_edge.thread, label %._crit_edge

._crit_edge.thread:                               ; preds = %6
  %162 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract37)
  %163 = getelementptr i8, ptr %14, i64 32
  %164 = load ptr, ptr %163, align 8
  %165 = load ptr, ptr %164, align 8
  %166 = call i32 %165(ptr %.fca.1.extract39)
  %167 = add i32 %166, 1
  %168 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract37)
  %169 = load ptr, ptr %163, align 8
  %170 = getelementptr i8, ptr %169, i64 8
  %171 = load ptr, ptr %170, align 8
  call void %171(ptr %.fca.1.extract39, i32 %167)
  br label %._crit_edge1.sink.split

._crit_edge:                                      ; preds = %6
  %.fca.1.extract4 = extractvalue { ptr, i160 } %55, 1
  %.sroa.3192.8.extract.trunc = trunc i160 %.fca.1.extract4 to i64
  %172 = inttoptr i64 %.sroa.3192.8.extract.trunc to ptr
  %.sroa.5193.8.extract.shift = lshr i160 %.fca.1.extract4, 64
  %.sroa.5193.8.extract.trunc = trunc i160 %.sroa.5193.8.extract.shift to i64
  %173 = inttoptr i64 %.sroa.5193.8.extract.trunc to ptr
  %hash_coef_ptr.i.i101 = getelementptr i8, ptr %.fca.0.extract2, i64 8
  %tbl_size_ptr.i.i102 = getelementptr i8, ptr %.fca.0.extract2, i64 16
  %offset_tbl_ptr.i.i103 = getelementptr i8, ptr %.fca.0.extract2, i64 40
  %hash_coef.i.i104 = load i64, ptr %hash_coef_ptr.i.i101, align 4
  %tbl_size.i.i105 = load i64, ptr %tbl_size_ptr.i.i102, align 4
  %offset_tbl.i.i106 = load ptr, ptr %offset_tbl_ptr.i.i103, align 8
  %product.i.i.i107 = mul i64 %hash_coef.i.i104, 4015701072841558310
  %shifted.i.i.i108 = lshr i64 %product.i.i.i107, 32
  %xored.i.i.i109 = xor i64 %shifted.i.i.i108, %product.i.i.i107
  %hash.i.i.i110 = and i64 %xored.i.i.i109, %tbl_size.i.i105
  %offset_ptr.i.i111 = getelementptr i32, ptr %offset_tbl.i.i106, i64 %hash.i.i.i110
  %offset.i.i112 = load i32, ptr %offset_ptr.i.i111, align 4
  %174 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract2, 0
  %175 = insertvalue { ptr, ptr, ptr, i32 } %174, ptr %172, 1
  %176 = insertvalue { ptr, ptr, ptr, i32 } %175, ptr %173, 2
  %177 = insertvalue { ptr, ptr, ptr, i32 } %176, i32 %offset.i.i112, 3
  %178 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract37)
  %179 = load ptr, ptr %14, align 8
  %180 = call ptr %179(ptr %.fca.1.extract39)
  %181 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract37)
  %182 = load ptr, ptr %18, align 8
  %183 = call ptr %182(ptr %.fca.1.extract39)
  %184 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %7)
  %185 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract2)
  %186 = sext i32 %offset.i.i112 to i64
  %187 = getelementptr ptr, ptr %.fca.0.extract2, i64 %186
  %188 = getelementptr i8, ptr %187, i64 56
  %189 = load ptr, ptr %188, align 8
  %190 = call ptr %189({ ptr, ptr, ptr, i32 } %177, ptr nonnull %7)
  %191 = call { ptr, i160 } %190({ ptr, ptr, ptr, i32 } %177, { ptr, ptr, ptr, i32 } %177, ptr nonnull %7)
  %.fca.0.extract45 = extractvalue { ptr, i160 } %191, 0
  %192 = getelementptr i8, ptr %.fca.0.extract45, i64 8
  %193 = getelementptr i8, ptr %.fca.0.extract45, i64 16
  %194 = getelementptr i8, ptr %.fca.0.extract45, i64 24
  %195 = getelementptr i8, ptr %.fca.0.extract45, i64 32
  %196 = load i64, ptr %192, align 4
  %197 = load i64, ptr %193, align 4
  %198 = load ptr, ptr %194, align 8
  %199 = load ptr, ptr %195, align 8
  %result.i114 = call i1 %198(i64 %197, i64 %196, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %199) #3
  br i1 %result.i114, label %._crit_edge1.sink.split, label %._crit_edge1

._crit_edge1.sink.split:                          ; preds = %._crit_edge, %._crit_edge.thread
  %.sink202 = phi i64 [ 40, %._crit_edge.thread ], [ 32, %._crit_edge ]
  %200 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract37)
  %201 = getelementptr i8, ptr %14, i64 %.sink202
  %202 = load ptr, ptr %201, align 8
  %203 = load ptr, ptr %202, align 8
  %204 = call i32 %203(ptr %.fca.1.extract39)
  %205 = add i32 %204, 1
  %206 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract37)
  %207 = load ptr, ptr %201, align 8
  %208 = getelementptr i8, ptr %207, i64 8
  %209 = load ptr, ptr %208, align 8
  call void %209(ptr %.fca.1.extract39, i32 %205)
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %._crit_edge1.sink.split, %._crit_edge
  ret void
}

define void @HashMap_insert_keyK_valueV({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, i160 } %3, { ptr, i160 } %4) {
  %6 = alloca [0 x ptr], align 8
  %7 = alloca [1 x ptr], align 8
  %8 = alloca { ptr }, align 8
  %9 = alloca [3 x ptr], align 8
  %10 = alloca { ptr, ptr, ptr }, align 8
  %.fca.0.extract24 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract26 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract28 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract24, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract24, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract24, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -2849643283898152329
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %11 = tail call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract24)
  %12 = sext i32 %offset.i.i to i64
  %13 = getelementptr ptr, ptr %.fca.0.extract24, i64 %12
  %14 = getelementptr i8, ptr %13, i64 24
  %15 = load ptr, ptr %14, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = tail call { ptr, ptr, ptr, i32 } %16(ptr %.fca.1.extract26)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %17, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %17, 1
  %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %17, 2
  %.fca.3.extract7 = extractvalue { ptr, ptr, ptr, i32 } %17, 3
  %hash_coef_ptr.i.i42 = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i43 = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i44 = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i45 = load i64, ptr %hash_coef_ptr.i.i42, align 4
  %tbl_size.i.i46 = load i64, ptr %tbl_size_ptr.i.i43, align 4
  %offset_tbl.i.i47 = load ptr, ptr %offset_tbl_ptr.i.i44, align 8
  %product.i.i.i48 = mul i64 %hash_coef.i.i45, -5261542750394134544
  %shifted.i.i.i49 = lshr i64 %product.i.i.i48, 32
  %xored.i.i.i50 = xor i64 %shifted.i.i.i49, %product.i.i.i48
  %hash.i.i.i51 = and i64 %xored.i.i.i50, %tbl_size.i.i46
  %offset_ptr.i.i52 = getelementptr i32, ptr %offset_tbl.i.i47, i64 %hash.i.i.i51
  %offset.i.i53 = load i32, ptr %offset_ptr.i.i52, align 4
  %eq.i = icmp eq i32 %.fca.3.extract7, %offset.i.i53
  tail call void @llvm.assume(i1 %eq.i) #30
  %18 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %19 = insertvalue { ptr, ptr, ptr, i32 } %18, ptr %.fca.1.extract3, 1
  %20 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %.fca.2.extract5, 2
  %21 = insertvalue { ptr, ptr, ptr, i32 } %20, i32 %.fca.3.extract7, 3
  %22 = tail call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract24)
  %23 = load ptr, ptr %13, align 8
  %24 = tail call ptr %23(ptr %.fca.1.extract26)
  %25 = tail call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract24)
  %26 = getelementptr i8, ptr %13, i64 8
  %27 = load ptr, ptr %26, align 8
  %28 = tail call ptr %27(ptr %.fca.1.extract26)
  %29 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %6)
  %30 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract1)
  %31 = sext i32 %.fca.3.extract7 to i64
  %32 = getelementptr ptr, ptr %.fca.0.extract1, i64 %31
  %33 = getelementptr i8, ptr %32, i64 64
  %34 = load ptr, ptr %33, align 8
  %35 = call ptr %34({ ptr, ptr, ptr, i32 } %21, ptr nonnull %6)
  %36 = call i32 %35({ ptr, ptr, ptr, i32 } %21, { ptr, ptr, ptr, i32 } %21, ptr nonnull %6)
  %37 = call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract24)
  %38 = load ptr, ptr %14, align 8
  %39 = load ptr, ptr %38, align 8
  %40 = call { ptr, ptr, ptr, i32 } %39(ptr %.fca.1.extract26)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %40, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %40, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %40, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %40, 3
  %hash_coef_ptr.i.i56 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i57 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i58 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i59 = load i64, ptr %hash_coef_ptr.i.i56, align 4
  %tbl_size.i.i60 = load i64, ptr %tbl_size_ptr.i.i57, align 4
  %offset_tbl.i.i61 = load ptr, ptr %offset_tbl_ptr.i.i58, align 8
  %product.i.i.i62 = mul i64 %hash_coef.i.i59, -5261542750394134544
  %shifted.i.i.i63 = lshr i64 %product.i.i.i62, 32
  %xored.i.i.i64 = xor i64 %shifted.i.i.i63, %product.i.i.i62
  %hash.i.i.i65 = and i64 %xored.i.i.i64, %tbl_size.i.i60
  %offset_ptr.i.i66 = getelementptr i32, ptr %offset_tbl.i.i61, i64 %hash.i.i.i65
  %offset.i.i67 = load i32, ptr %offset_ptr.i.i66, align 4
  %eq.i70 = icmp eq i32 %.fca.3.extract, %offset.i.i67
  call void @llvm.assume(i1 %eq.i70) #30
  %41 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %42 = insertvalue { ptr, ptr, ptr, i32 } %41, ptr %.fca.1.extract, 1
  %43 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %.fca.2.extract, 2
  %44 = insertvalue { ptr, ptr, ptr, i32 } %43, i32 %.fca.3.extract, 3
  %45 = call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract24)
  %46 = load ptr, ptr %13, align 8
  %47 = call ptr %46(ptr %.fca.1.extract26)
  %48 = call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract24)
  %49 = load ptr, ptr %26, align 8
  %50 = call ptr %49(ptr %.fca.1.extract26)
  %51 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %6)
  %52 = call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract)
  %53 = sext i32 %.fca.3.extract to i64
  %54 = getelementptr ptr, ptr %.fca.0.extract, i64 %53
  %55 = getelementptr i8, ptr %54, i64 64
  %56 = load ptr, ptr %55, align 8
  %57 = call ptr %56({ ptr, ptr, ptr, i32 } %44, ptr nonnull %6)
  %58 = call i32 %57({ ptr, ptr, ptr, i32 } %44, { ptr, ptr, ptr, i32 } %44, ptr nonnull %6)
  %59 = icmp eq i32 %58, 0
  %60 = call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract24)
  %61 = getelementptr i8, ptr %13, i64 40
  %62 = load ptr, ptr %61, align 8
  %63 = load ptr, ptr %62, align 8
  %64 = call i32 %63(ptr %.fca.1.extract26)
  %65 = mul i32 %64, 10
  %66 = add i32 %65, 10
  %67 = mul i32 %36, 7
  %68 = icmp sge i32 %66, %67
  %69 = or i1 %59, %68
  br i1 %69, label %70, label %.._crit_edge_crit_edge

.._crit_edge_crit_edge:                           ; preds = %5
  %.pre = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract24, 0
  %.pre105 = insertvalue { ptr, ptr, ptr, i32 } %.pre, ptr %.fca.1.extract26, 1
  %.pre107 = insertvalue { ptr, ptr, ptr, i32 } %.pre105, ptr %.fca.2.extract28, 2
  %.pre109 = insertvalue { ptr, ptr, ptr, i32 } %.pre107, i32 %offset.i.i, 3
  br label %._crit_edge

70:                                               ; preds = %5
  %71 = shl i32 %36, 1
  %72 = call i32 @llvm.smax.i32(i32 %71, i32 16)
  %73 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract24, 0
  %74 = insertvalue { ptr, ptr, ptr, i32 } %73, ptr %.fca.1.extract26, 1
  %75 = insertvalue { ptr, ptr, ptr, i32 } %74, ptr %.fca.2.extract28, 2
  %76 = insertvalue { ptr, ptr, ptr, i32 } %75, i32 %offset.i.i, 3
  %77 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract24)
  %78 = load ptr, ptr %13, align 8
  %79 = call ptr %78(ptr %.fca.1.extract26)
  %80 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract24)
  %81 = load ptr, ptr %26, align 8
  %82 = call ptr %81(ptr %.fca.1.extract26)
  store ptr @_parameterization_Ptri32, ptr %7, align 8
  %83 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %7)
  %84 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract24)
  %85 = getelementptr i8, ptr %13, i64 80
  %86 = load ptr, ptr %85, align 8
  store ptr @i32_typ, ptr %8, align 8
  %87 = call ptr %86({ ptr, ptr, ptr, i32 } %76, ptr nonnull %8)
  call void %87({ ptr, ptr, ptr, i32 } %76, { ptr, ptr, ptr, i32 } %76, ptr nonnull %7, i32 %72)
  br label %._crit_edge

._crit_edge:                                      ; preds = %.._crit_edge_crit_edge, %70
  %.pre-phi110 = phi { ptr, ptr, ptr, i32 } [ %.pre109, %.._crit_edge_crit_edge ], [ %76, %70 ]
  %.fca.0.extract9 = extractvalue { ptr, i160 } %4, 0
  %.fca.0.extract17 = extractvalue { ptr, i160 } %3, 0
  %88 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract24)
  %89 = getelementptr i8, ptr %13, i64 48
  %90 = load ptr, ptr %89, align 8
  %91 = load ptr, ptr %90, align 8
  %92 = call { ptr } %91(ptr %.fca.1.extract26)
  %.fca.0.extract36 = extractvalue { ptr } %92, 0
  %93 = call i32 %.fca.0.extract36({ ptr, i160 } %3)
  %94 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract24)
  %95 = load ptr, ptr %13, align 8
  %96 = call ptr %95(ptr %.fca.1.extract26)
  %97 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract24)
  %98 = load ptr, ptr %26, align 8
  %99 = call ptr %98(ptr %.fca.1.extract26)
  store ptr %96, ptr %9, align 8
  %100 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %99, ptr %100, align 8
  %101 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr @_parameterization_Ptri32, ptr %101, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %9)
  %103 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract24)
  %104 = getelementptr i8, ptr %13, i64 88
  %105 = load ptr, ptr %104, align 8
  store ptr %.fca.0.extract17, ptr %10, align 8
  %106 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %.fca.0.extract9, ptr %106, align 8
  %107 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr @i32_typ, ptr %107, align 8
  %108 = call ptr %105({ ptr, ptr, ptr, i32 } %.pre-phi110, ptr nonnull %10)
  call void %108({ ptr, ptr, ptr, i32 } %.pre-phi110, { ptr, ptr, ptr, i32 } %.pre-phi110, ptr nonnull %9, { ptr, i160 } %3, { ptr, i160 } %4, i32 %93)
  ret void
}

define { ptr, i160 } @HashMap_get_keyK({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, i160 } %3) {
  %5 = alloca [0 x ptr], align 8
  %.fca.0.extract35 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract37 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract39 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract35, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract35, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract35, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -2849643283898152329
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract14 = extractvalue { ptr, i160 } %3, 0
  %6 = tail call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract35)
  %7 = sext i32 %offset.i.i to i64
  %8 = getelementptr ptr, ptr %.fca.0.extract35, i64 %7
  %9 = getelementptr i8, ptr %8, i64 48
  %10 = load ptr, ptr %9, align 8
  %11 = load ptr, ptr %10, align 8
  %12 = tail call { ptr } %11(ptr %.fca.1.extract37)
  %.fca.0.extract5 = extractvalue { ptr } %12, 0
  %13 = tail call i32 %.fca.0.extract5({ ptr, i160 } %3)
  %14 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract35, 0
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, ptr %.fca.1.extract37, 1
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, ptr %.fca.2.extract39, 2
  %17 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %offset.i.i, 3
  %18 = tail call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract35)
  %19 = load ptr, ptr %8, align 8
  %20 = tail call ptr %19(ptr %.fca.1.extract37)
  %21 = tail call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract35)
  %22 = getelementptr i8, ptr %8, i64 8
  %23 = load ptr, ptr %22, align 8
  %24 = tail call ptr %23(ptr %.fca.1.extract37)
  %25 = alloca [2 x ptr], align 8
  store ptr %20, ptr %25, align 8
  %26 = getelementptr inbounds i8, ptr %25, i64 8
  store ptr @_parameterization_Ptri32, ptr %26, align 8
  %27 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %25)
  %28 = tail call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract35)
  %29 = getelementptr i8, ptr %8, i64 72
  %30 = load ptr, ptr %29, align 8
  %31 = alloca { ptr, ptr }, align 8
  store ptr %.fca.0.extract14, ptr %31, align 8
  %32 = getelementptr inbounds i8, ptr %31, i64 8
  store ptr @i32_typ, ptr %32, align 8
  %33 = call ptr %30({ ptr, ptr, ptr, i32 } %17, ptr nonnull %31)
  %34 = call i32 %33({ ptr, ptr, ptr, i32 } %17, { ptr, ptr, ptr, i32 } %17, ptr nonnull %25, { ptr, i160 } %3, i32 %13)
  %35 = call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract35)
  %36 = getelementptr i8, ptr %8, i64 24
  %37 = load ptr, ptr %36, align 8
  %38 = load ptr, ptr %37, align 8
  %39 = call { ptr, ptr, ptr, i32 } %38(ptr %.fca.1.extract37)
  %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %39, 0
  %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %39, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %39, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %39, 3
  %hash_coef_ptr.i.i58 = getelementptr i8, ptr %.fca.0.extract3, i64 8
  %tbl_size_ptr.i.i59 = getelementptr i8, ptr %.fca.0.extract3, i64 16
  %offset_tbl_ptr.i.i60 = getelementptr i8, ptr %.fca.0.extract3, i64 40
  %hash_coef.i.i61 = load i64, ptr %hash_coef_ptr.i.i58, align 4
  %tbl_size.i.i62 = load i64, ptr %tbl_size_ptr.i.i59, align 4
  %offset_tbl.i.i63 = load ptr, ptr %offset_tbl_ptr.i.i60, align 8
  %product.i.i.i64 = mul i64 %hash_coef.i.i61, -5261542750394134544
  %shifted.i.i.i65 = lshr i64 %product.i.i.i64, 32
  %xored.i.i.i66 = xor i64 %shifted.i.i.i65, %product.i.i.i64
  %hash.i.i.i67 = and i64 %xored.i.i.i66, %tbl_size.i.i62
  %offset_ptr.i.i68 = getelementptr i32, ptr %offset_tbl.i.i63, i64 %hash.i.i.i67
  %offset.i.i69 = load i32, ptr %offset_ptr.i.i68, align 4
  %eq.i = icmp eq i32 %.fca.3.extract, %offset.i.i69
  call void @llvm.assume(i1 %eq.i) #30
  %40 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract3, 0
  %41 = insertvalue { ptr, ptr, ptr, i32 } %40, ptr %.fca.1.extract4, 1
  %42 = insertvalue { ptr, ptr, ptr, i32 } %41, ptr %.fca.2.extract, 2
  %43 = insertvalue { ptr, ptr, ptr, i32 } %42, i32 %.fca.3.extract, 3
  %44 = call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract35)
  %45 = load ptr, ptr %8, align 8
  %46 = call ptr %45(ptr %.fca.1.extract37)
  %47 = call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract35)
  %48 = load ptr, ptr %22, align 8
  %49 = call ptr %48(ptr %.fca.1.extract37)
  %50 = alloca [1 x ptr], align 8
  store ptr @_parameterization_Ptri32, ptr %50, align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %50)
  %52 = call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract3)
  %53 = sext i32 %.fca.3.extract to i64
  %54 = getelementptr ptr, ptr %.fca.0.extract3, i64 %53
  %55 = getelementptr i8, ptr %54, i64 120
  %56 = load ptr, ptr %55, align 8
  %57 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %57, align 8
  %58 = call ptr %56({ ptr, ptr, ptr, i32 } %43, ptr nonnull %57)
  %59 = call { ptr, i160 } %58({ ptr, ptr, ptr, i32 } %43, { ptr, ptr, ptr, i32 } %43, ptr nonnull %50, i32 %34)
  %.fca.0.extract = extractvalue { ptr, i160 } %59, 0
  %60 = icmp ne ptr %.fca.0.extract, @nil_typ
  %61 = icmp ne ptr %.fca.0.extract, null
  %.not56 = and i1 %60, %61
  br i1 %.not56, label %62, label %.thread

62:                                               ; preds = %4
  %.fca.1.extract = extractvalue { ptr, i160 } %59, 1
  %.sroa.3.8.extract.trunc = trunc i160 %.fca.1.extract to i64
  %63 = inttoptr i64 %.sroa.3.8.extract.trunc to ptr
  %.sroa.5.8.extract.shift = lshr i160 %.fca.1.extract, 64
  %.sroa.5.8.extract.trunc = trunc i160 %.sroa.5.8.extract.shift to i64
  %64 = inttoptr i64 %.sroa.5.8.extract.trunc to ptr
  %hash_coef_ptr.i.i72 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i73 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i74 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i75 = load i64, ptr %hash_coef_ptr.i.i72, align 4
  %tbl_size.i.i76 = load i64, ptr %tbl_size_ptr.i.i73, align 4
  %offset_tbl.i.i77 = load ptr, ptr %offset_tbl_ptr.i.i74, align 8
  %product.i.i.i78 = mul i64 %hash_coef.i.i75, 4015701072841558310
  %shifted.i.i.i79 = lshr i64 %product.i.i.i78, 32
  %xored.i.i.i80 = xor i64 %shifted.i.i.i79, %product.i.i.i78
  %hash.i.i.i81 = and i64 %xored.i.i.i80, %tbl_size.i.i76
  %offset_ptr.i.i82 = getelementptr i32, ptr %offset_tbl.i.i77, i64 %hash.i.i.i81
  %offset.i.i83 = load i32, ptr %offset_ptr.i.i82, align 4
  %65 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %66 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %63, 1
  %67 = insertvalue { ptr, ptr, ptr, i32 } %66, ptr %64, 2
  %68 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %offset.i.i83, 3
  %69 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract35)
  %70 = load ptr, ptr %8, align 8
  %71 = call ptr %70(ptr %.fca.1.extract37)
  %72 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract35)
  %73 = load ptr, ptr %22, align 8
  %74 = call ptr %73(ptr %.fca.1.extract37)
  %75 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %76 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract)
  %77 = sext i32 %offset.i.i83 to i64
  %78 = getelementptr ptr, ptr %.fca.0.extract, i64 %77
  %79 = getelementptr i8, ptr %78, i64 56
  %80 = load ptr, ptr %79, align 8
  %81 = call ptr %80({ ptr, ptr, ptr, i32 } %68, ptr nonnull %5)
  %82 = call { ptr, i160 } %81({ ptr, ptr, ptr, i32 } %68, { ptr, ptr, ptr, i32 } %68, ptr nonnull %5)
  %.fca.0.extract47 = extractvalue { ptr, i160 } %82, 0
  %.fca.1.extract49 = extractvalue { ptr, i160 } %82, 1
  %83 = getelementptr i8, ptr %.fca.0.extract47, i64 8
  %84 = getelementptr i8, ptr %.fca.0.extract47, i64 16
  %85 = getelementptr i8, ptr %.fca.0.extract47, i64 24
  %86 = getelementptr i8, ptr %.fca.0.extract47, i64 32
  %87 = load i64, ptr %83, align 4
  %88 = load i64, ptr %84, align 4
  %89 = load ptr, ptr %85, align 8
  %90 = load ptr, ptr %86, align 8
  %result.i = call i1 %89(i64 %88, i64 %87, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %90) #3
  br i1 %result.i, label %.thread, label %91

91:                                               ; preds = %62
  %result.i85 = call i1 %89(i64 %88, i64 %87, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr readonly %90) #3
  %cond.fr = freeze i1 %result.i85
  %spec.select = select i1 %cond.fr, ptr %.fca.0.extract47, ptr @nil_typ
  br label %.thread

.thread:                                          ; preds = %91, %62, %4
  %.reg2mem23.sroa.3.0112 = phi i160 [ poison, %4 ], [ %.fca.1.extract49, %62 ], [ %.fca.1.extract49, %91 ]
  %92 = phi ptr [ @nil_typ, %4 ], [ @nil_typ, %62 ], [ %spec.select, %91 ]
  %.reload20.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %92, 0
  %.reload20.fca.1.insert = insertvalue { ptr, i160 } %.reload20.fca.0.insert, i160 %.reg2mem23.sroa.3.0112, 1
  ret { ptr, i160 } %.reload20.fca.1.insert
}

define { ptr, i160 } @HashMap_remove_keyK({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, i160 } %3) {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = alloca [3 x ptr], align 8
  %9 = alloca { ptr, ptr, ptr }, align 8
  %10 = alloca [2 x ptr], align 8
  %11 = alloca { ptr, ptr }, align 8
  %.fca.0.extract36 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract38 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract40 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract36, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract36, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract36, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -2849643283898152329
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract14 = extractvalue { ptr, i160 } %3, 0
  %12 = tail call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract36)
  %13 = sext i32 %offset.i.i to i64
  %14 = getelementptr ptr, ptr %.fca.0.extract36, i64 %13
  %15 = getelementptr i8, ptr %14, i64 48
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = tail call { ptr } %17(ptr %.fca.1.extract38)
  %.fca.0.extract5 = extractvalue { ptr } %18, 0
  %19 = tail call i32 %.fca.0.extract5({ ptr, i160 } %3)
  %20 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract36, 0
  %21 = insertvalue { ptr, ptr, ptr, i32 } %20, ptr %.fca.1.extract38, 1
  %22 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %.fca.2.extract40, 2
  %23 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 %offset.i.i, 3
  %24 = tail call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract36)
  %25 = load ptr, ptr %14, align 8
  %26 = tail call ptr %25(ptr %.fca.1.extract38)
  %27 = tail call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract36)
  %28 = getelementptr i8, ptr %14, i64 8
  %29 = load ptr, ptr %28, align 8
  %30 = tail call ptr %29(ptr %.fca.1.extract38)
  %31 = alloca [2 x ptr], align 8
  store ptr %26, ptr %31, align 8
  %32 = getelementptr inbounds i8, ptr %31, i64 8
  store ptr @_parameterization_Ptri32, ptr %32, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %31)
  %34 = tail call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract36)
  %35 = getelementptr i8, ptr %14, i64 72
  %36 = load ptr, ptr %35, align 8
  %37 = alloca { ptr, ptr }, align 8
  store ptr %.fca.0.extract14, ptr %37, align 8
  %38 = getelementptr inbounds i8, ptr %37, i64 8
  store ptr @i32_typ, ptr %38, align 8
  %39 = call ptr %36({ ptr, ptr, ptr, i32 } %23, ptr nonnull %37)
  %40 = call i32 %39({ ptr, ptr, ptr, i32 } %23, { ptr, ptr, ptr, i32 } %23, ptr nonnull %31, { ptr, i160 } %3, i32 %19)
  %41 = call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract36)
  %42 = getelementptr i8, ptr %14, i64 24
  %43 = load ptr, ptr %42, align 8
  %44 = load ptr, ptr %43, align 8
  %45 = call { ptr, ptr, ptr, i32 } %44(ptr %.fca.1.extract38)
  %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %45, 0
  %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %45, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %45, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %45, 3
  %hash_coef_ptr.i.i86 = getelementptr i8, ptr %.fca.0.extract3, i64 8
  %tbl_size_ptr.i.i87 = getelementptr i8, ptr %.fca.0.extract3, i64 16
  %offset_tbl_ptr.i.i88 = getelementptr i8, ptr %.fca.0.extract3, i64 40
  %hash_coef.i.i89 = load i64, ptr %hash_coef_ptr.i.i86, align 4
  %tbl_size.i.i90 = load i64, ptr %tbl_size_ptr.i.i87, align 4
  %offset_tbl.i.i91 = load ptr, ptr %offset_tbl_ptr.i.i88, align 8
  %product.i.i.i92 = mul i64 %hash_coef.i.i89, -5261542750394134544
  %shifted.i.i.i93 = lshr i64 %product.i.i.i92, 32
  %xored.i.i.i94 = xor i64 %shifted.i.i.i93, %product.i.i.i92
  %hash.i.i.i95 = and i64 %xored.i.i.i94, %tbl_size.i.i90
  %offset_ptr.i.i96 = getelementptr i32, ptr %offset_tbl.i.i91, i64 %hash.i.i.i95
  %offset.i.i97 = load i32, ptr %offset_ptr.i.i96, align 4
  %eq.i = icmp eq i32 %.fca.3.extract, %offset.i.i97
  call void @llvm.assume(i1 %eq.i) #30
  %46 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract3, 0
  %47 = insertvalue { ptr, ptr, ptr, i32 } %46, ptr %.fca.1.extract4, 1
  %48 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %.fca.2.extract, 2
  %49 = insertvalue { ptr, ptr, ptr, i32 } %48, i32 %.fca.3.extract, 3
  %50 = call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract36)
  %51 = load ptr, ptr %14, align 8
  %52 = call ptr %51(ptr %.fca.1.extract38)
  %53 = call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract36)
  %54 = load ptr, ptr %28, align 8
  %55 = call ptr %54(ptr %.fca.1.extract38)
  %56 = alloca [1 x ptr], align 8
  store ptr @_parameterization_Ptri32, ptr %56, align 8
  %57 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %56)
  %58 = call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract3)
  %59 = sext i32 %.fca.3.extract to i64
  %60 = getelementptr ptr, ptr %.fca.0.extract3, i64 %59
  %61 = getelementptr i8, ptr %60, i64 120
  %62 = load ptr, ptr %61, align 8
  %63 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %63, align 8
  %64 = call ptr %62({ ptr, ptr, ptr, i32 } %49, ptr nonnull %63)
  %65 = call { ptr, i160 } %64({ ptr, ptr, ptr, i32 } %49, { ptr, ptr, ptr, i32 } %49, ptr nonnull %56, i32 %40)
  %.fca.0.extract = extractvalue { ptr, i160 } %65, 0
  %66 = icmp ne ptr %.fca.0.extract, @nil_typ
  %67 = icmp ne ptr %.fca.0.extract, null
  %.not84 = and i1 %66, %67
  br i1 %.not84, label %68, label %.thread

68:                                               ; preds = %4
  %.fca.1.extract = extractvalue { ptr, i160 } %65, 1
  %.sroa.7242.8.extract.trunc = trunc i160 %.fca.1.extract to i64
  %69 = inttoptr i64 %.sroa.7242.8.extract.trunc to ptr
  %.sroa.13.8.extract.shift = lshr i160 %.fca.1.extract, 64
  %.sroa.13.8.extract.trunc = trunc i160 %.sroa.13.8.extract.shift to i64
  %70 = inttoptr i64 %.sroa.13.8.extract.trunc to ptr
  %hash_coef_ptr.i.i100 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i101 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i102 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i103 = load i64, ptr %hash_coef_ptr.i.i100, align 4
  %tbl_size.i.i104 = load i64, ptr %tbl_size_ptr.i.i101, align 4
  %offset_tbl.i.i105 = load ptr, ptr %offset_tbl_ptr.i.i102, align 8
  %product.i.i.i106 = mul i64 %hash_coef.i.i103, 4015701072841558310
  %shifted.i.i.i107 = lshr i64 %product.i.i.i106, 32
  %xored.i.i.i108 = xor i64 %shifted.i.i.i107, %product.i.i.i106
  %hash.i.i.i109 = and i64 %xored.i.i.i108, %tbl_size.i.i104
  %offset_ptr.i.i110 = getelementptr i32, ptr %offset_tbl.i.i105, i64 %hash.i.i.i109
  %offset.i.i111 = load i32, ptr %offset_ptr.i.i110, align 4
  %71 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %72 = insertvalue { ptr, ptr, ptr, i32 } %71, ptr %69, 1
  %73 = insertvalue { ptr, ptr, ptr, i32 } %72, ptr %70, 2
  %74 = insertvalue { ptr, ptr, ptr, i32 } %73, i32 %offset.i.i111, 3
  %75 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract36)
  %76 = load ptr, ptr %14, align 8
  %77 = call ptr %76(ptr %.fca.1.extract38)
  %78 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract36)
  %79 = load ptr, ptr %28, align 8
  %80 = call ptr %79(ptr %.fca.1.extract38)
  %81 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %82 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract)
  %83 = sext i32 %offset.i.i111 to i64
  %84 = getelementptr ptr, ptr %.fca.0.extract, i64 %83
  %85 = getelementptr i8, ptr %84, i64 56
  %86 = load ptr, ptr %85, align 8
  %87 = call ptr %86({ ptr, ptr, ptr, i32 } %74, ptr nonnull %5)
  %88 = call { ptr, i160 } %87({ ptr, ptr, ptr, i32 } %74, { ptr, ptr, ptr, i32 } %74, ptr nonnull %5)
  %.fca.0.extract75 = extractvalue { ptr, i160 } %88, 0
  %.fca.1.extract77 = extractvalue { ptr, i160 } %88, 1
  %89 = getelementptr i8, ptr %.fca.0.extract75, i64 8
  %90 = getelementptr i8, ptr %.fca.0.extract75, i64 16
  %91 = getelementptr i8, ptr %.fca.0.extract75, i64 24
  %92 = getelementptr i8, ptr %.fca.0.extract75, i64 32
  %93 = load i64, ptr %89, align 4
  %94 = load i64, ptr %90, align 4
  %95 = load ptr, ptr %91, align 8
  %96 = load ptr, ptr %92, align 8
  %result.i = call i1 %95(i64 %94, i64 %93, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %96) #3
  br i1 %result.i, label %.thread, label %97

97:                                               ; preds = %68
  %result.i113 = call i1 %95(i64 %94, i64 %93, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr readonly %96) #3
  br i1 %result.i113, label %98, label %.thread

98:                                               ; preds = %97
  %99 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract36)
  %100 = load ptr, ptr %14, align 8
  %101 = call ptr %100(ptr %.fca.1.extract38)
  %102 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract36)
  %103 = load ptr, ptr %28, align 8
  %104 = call ptr %103(ptr %.fca.1.extract38)
  %105 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %106 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract)
  %107 = getelementptr i8, ptr %84, i64 48
  %108 = load ptr, ptr %107, align 8
  %109 = call ptr %108({ ptr, ptr, ptr, i32 } %74, ptr nonnull %5)
  %110 = call { ptr, i160 } %109({ ptr, ptr, ptr, i32 } %74, { ptr, ptr, ptr, i32 } %74, ptr nonnull %5)
  %111 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract36)
  %112 = load ptr, ptr %14, align 8
  %113 = call ptr %112(ptr %.fca.1.extract38)
  %114 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract36)
  %115 = load ptr, ptr %28, align 8
  %116 = call ptr %115(ptr %.fca.1.extract38)
  %117 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull @Tombstone)
  %118 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %119 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract36)
  %120 = load ptr, ptr %14, align 8
  %121 = call ptr %120(ptr %.fca.1.extract38)
  %122 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract36)
  %123 = load ptr, ptr %28, align 8
  %124 = call ptr %123(ptr %.fca.1.extract38)
  %125 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %126 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract)
  %127 = getelementptr i8, ptr %84, i64 64
  %128 = load ptr, ptr %127, align 8
  %129 = call ptr %128({ ptr, ptr, ptr, i32 } %74, ptr nonnull %5)
  %130 = call i32 %129({ ptr, ptr, ptr, i32 } %74, { ptr, ptr, ptr, i32 } %74, ptr nonnull %5)
  %131 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract36)
  %132 = load ptr, ptr %14, align 8
  %133 = call ptr %132(ptr %.fca.1.extract38)
  %134 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract36)
  %135 = load ptr, ptr %28, align 8
  %136 = call ptr %135(ptr %.fca.1.extract38)
  %137 = load ptr, ptr %133, align 8
  %138 = getelementptr i8, ptr %137, i64 48
  %139 = load ptr, ptr %138, align 8
  %140 = call { i64, i64 } %139(ptr nonnull %133)
  %141 = extractvalue { i64, i64 } %140, 0
  %142 = extractvalue { i64, i64 } %140, 1
  %143 = call i64 @llvm.umax.i64(i64 %142, i64 8)
  %144 = urem i64 16, %142
  %145 = icmp eq i64 %144, 0
  %146 = sub i64 %142, %144
  %147 = select i1 %145, i64 0, i64 %146
  %148 = add i64 %147, %141
  %149 = add i64 %148, 16
  %150 = and i64 %148, 7
  %151 = icmp eq i64 %150, 0
  %152 = sub nuw nsw i64 40, %150
  %153 = select i1 %151, i64 32, i64 %152
  %154 = add i64 %149, %153
  %155 = and i64 %154, 3
  %156 = icmp eq i64 %155, 0
  %157 = sub nuw nsw i64 8, %155
  %158 = select i1 %156, i64 4, i64 %157
  %159 = add i64 %158, %154
  %160 = urem i64 %159, %143
  %161 = icmp eq i64 %160, 0
  %162 = sub i64 %143, %160
  %163 = select i1 %161, i64 0, i64 %162
  %164 = add i64 %159, %163
  %result.i115 = call noalias ptr @bump_malloc_inner(i64 noundef %164, ptr nonnull @current_ptr) #29
  store ptr %133, ptr %result.i115, align 8
  %165 = getelementptr i8, ptr %result.i115, i64 8
  store ptr %136, ptr %165, align 8
  %166 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i115)
  %167 = getelementptr inbounds i8, ptr %6, i64 8
  %168 = getelementptr inbounds i8, ptr %6, i64 24
  store ptr @Entry, ptr %6, align 8
  store ptr %result.i115, ptr %167, align 8
  store i32 9, ptr %168, align 8
  %169 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %6)
  %170 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract36)
  %171 = load ptr, ptr %14, align 8
  %172 = call ptr %171(ptr %.fca.1.extract38)
  %173 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract36)
  %174 = load ptr, ptr %28, align 8
  %175 = call ptr %174(ptr %.fca.1.extract38)
  %176 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %177 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract)
  %178 = load ptr, ptr %107, align 8
  %179 = call ptr %178({ ptr, ptr, ptr, i32 } %74, ptr nonnull %5)
  %180 = call { ptr, i160 } %179({ ptr, ptr, ptr, i32 } %74, { ptr, ptr, ptr, i32 } %74, ptr nonnull %5)
  %.fca.0.extract61 = extractvalue { ptr, i160 } %180, 0
  %result.i116 = call noalias ptr @bump_malloc_inner(i64 noundef 0, ptr nonnull @current_ptr) #29
  %181 = getelementptr inbounds i8, ptr %7, i64 8
  %182 = getelementptr inbounds i8, ptr %7, i64 24
  store ptr @Tombstone, ptr %7, align 8
  store ptr %result.i116, ptr %181, align 8
  store i32 9, ptr %182, align 8
  %183 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %7)
  %184 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract36)
  %185 = load ptr, ptr %14, align 8
  %186 = call ptr %185(ptr %.fca.1.extract38)
  %187 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract36)
  %188 = load ptr, ptr %28, align 8
  %189 = call ptr %188(ptr %.fca.1.extract38)
  %190 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull @Tombstone)
  %191 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %192 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract36)
  %193 = load ptr, ptr %14, align 8
  %194 = call ptr %193(ptr %.fca.1.extract38)
  %195 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract36)
  %196 = load ptr, ptr %28, align 8
  %197 = call ptr %196(ptr %.fca.1.extract38)
  %198 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %199 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract)
  %200 = load ptr, ptr %127, align 8
  %201 = call ptr %200({ ptr, ptr, ptr, i32 } %74, ptr nonnull %5)
  %202 = call i32 %201({ ptr, ptr, ptr, i32 } %74, { ptr, ptr, ptr, i32 } %74, ptr nonnull %5)
  %203 = load ptr, ptr %7, align 8
  %204 = insertvalue { ptr, i160 } undef, ptr %203, 0
  %205 = load i160, ptr %181, align 8
  %206 = insertvalue { ptr, i160 } %204, i160 %205, 1
  %207 = load ptr, ptr %6, align 8
  %208 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %207, 0
  %209 = load ptr, ptr %167, align 8
  %210 = insertvalue { ptr, ptr, ptr, i32 } %208, ptr %209, 1
  %211 = getelementptr inbounds i8, ptr %6, i64 16
  %212 = load ptr, ptr %211, align 8
  %213 = insertvalue { ptr, ptr, ptr, i32 } %210, ptr %212, 2
  %214 = load i32, ptr %168, align 8
  %215 = insertvalue { ptr, ptr, ptr, i32 } %213, i32 %214, 3
  %216 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract36)
  %217 = load ptr, ptr %14, align 8
  %218 = call ptr %217(ptr %.fca.1.extract38)
  %219 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract36)
  %220 = load ptr, ptr %28, align 8
  %221 = call ptr %220(ptr %.fca.1.extract38)
  store ptr %218, ptr %8, align 8
  %222 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr @_parameterization_Tombstone, ptr %222, align 8
  %223 = getelementptr inbounds i8, ptr %8, i64 16
  store ptr @_parameterization_Ptri32, ptr %223, align 8
  %224 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %8)
  %225 = call ptr @llvm.invariant.start.p0(i64 112, ptr %207)
  %226 = sext i32 %214 to i64
  %227 = getelementptr ptr, ptr %207, i64 %226
  %228 = getelementptr i8, ptr %227, i64 40
  %229 = load ptr, ptr %228, align 8
  store ptr %.fca.0.extract61, ptr %9, align 8
  %230 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %203, ptr %230, align 8
  %231 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr @i32_typ, ptr %231, align 8
  %232 = call ptr %229({ ptr, ptr, ptr, i32 } %215, ptr nonnull %9)
  call void %232({ ptr, ptr, ptr, i32 } %215, { ptr, ptr, ptr, i32 } %215, ptr nonnull %8, { ptr, i160 } %180, { ptr, i160 } %206, i32 %202)
  %233 = load ptr, ptr %6, align 8
  %234 = load ptr, ptr %167, align 8
  %235 = load ptr, ptr %211, align 8
  %hash_coef_ptr.i.i118 = getelementptr i8, ptr %233, i64 8
  %tbl_size_ptr.i.i119 = getelementptr i8, ptr %233, i64 16
  %offset_tbl_ptr.i.i120 = getelementptr i8, ptr %233, i64 40
  %hash_coef.i.i121 = load i64, ptr %hash_coef_ptr.i.i118, align 4
  %tbl_size.i.i122 = load i64, ptr %tbl_size_ptr.i.i119, align 4
  %offset_tbl.i.i123 = load ptr, ptr %offset_tbl_ptr.i.i120, align 8
  %product.i.i.i124 = mul i64 %hash_coef.i.i121, 4015701072841558310
  %shifted.i.i.i125 = lshr i64 %product.i.i.i124, 32
  %xored.i.i.i126 = xor i64 %shifted.i.i.i125, %product.i.i.i124
  %hash.i.i.i127 = and i64 %xored.i.i.i126, %tbl_size.i.i122
  %offset_ptr.i.i128 = getelementptr i32, ptr %offset_tbl.i.i123, i64 %hash.i.i.i127
  %offset.i.i129 = load i32, ptr %offset_ptr.i.i128, align 4
  %236 = insertvalue { ptr, i160 } undef, ptr %233, 0
  %237 = ptrtoint ptr %234 to i64
  %238 = ptrtoint ptr %235 to i64
  %.sroa.3.0.insert.ext = zext i32 %offset.i.i129 to i160
  %.sroa.3.0.insert.shift = shl nuw i160 %.sroa.3.0.insert.ext, 128
  %.sroa.256.0.insert.ext = zext i64 %238 to i160
  %.sroa.256.0.insert.shift = shl nuw nsw i160 %.sroa.256.0.insert.ext, 64
  %.sroa.256.0.insert.insert = or disjoint i160 %.sroa.3.0.insert.shift, %.sroa.256.0.insert.shift
  %.sroa.055.0.insert.ext = zext i64 %237 to i160
  %.sroa.055.0.insert.insert = or disjoint i160 %.sroa.256.0.insert.insert, %.sroa.055.0.insert.ext
  %239 = insertvalue { ptr, i160 } %236, i160 %.sroa.055.0.insert.insert, 1
  %240 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract36)
  %241 = load ptr, ptr %42, align 8
  %242 = load ptr, ptr %241, align 8
  %243 = call { ptr, ptr, ptr, i32 } %242(ptr %.fca.1.extract38)
  %.fca.0.extract46 = extractvalue { ptr, ptr, ptr, i32 } %243, 0
  %.fca.1.extract48 = extractvalue { ptr, ptr, ptr, i32 } %243, 1
  %.fca.2.extract50 = extractvalue { ptr, ptr, ptr, i32 } %243, 2
  %.fca.3.extract52 = extractvalue { ptr, ptr, ptr, i32 } %243, 3
  %hash_coef_ptr.i.i132 = getelementptr i8, ptr %.fca.0.extract46, i64 8
  %tbl_size_ptr.i.i133 = getelementptr i8, ptr %.fca.0.extract46, i64 16
  %offset_tbl_ptr.i.i134 = getelementptr i8, ptr %.fca.0.extract46, i64 40
  %hash_coef.i.i135 = load i64, ptr %hash_coef_ptr.i.i132, align 4
  %tbl_size.i.i136 = load i64, ptr %tbl_size_ptr.i.i133, align 4
  %offset_tbl.i.i137 = load ptr, ptr %offset_tbl_ptr.i.i134, align 8
  %product.i.i.i138 = mul i64 %hash_coef.i.i135, -5261542750394134544
  %shifted.i.i.i139 = lshr i64 %product.i.i.i138, 32
  %xored.i.i.i140 = xor i64 %shifted.i.i.i139, %product.i.i.i138
  %hash.i.i.i141 = and i64 %xored.i.i.i140, %tbl_size.i.i136
  %offset_ptr.i.i142 = getelementptr i32, ptr %offset_tbl.i.i137, i64 %hash.i.i.i141
  %offset.i.i143 = load i32, ptr %offset_ptr.i.i142, align 4
  %eq.i146 = icmp eq i32 %.fca.3.extract52, %offset.i.i143
  call void @llvm.assume(i1 %eq.i146) #30
  %244 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract46, 0
  %245 = insertvalue { ptr, ptr, ptr, i32 } %244, ptr %.fca.1.extract48, 1
  %246 = insertvalue { ptr, ptr, ptr, i32 } %245, ptr %.fca.2.extract50, 2
  %247 = insertvalue { ptr, ptr, ptr, i32 } %246, i32 %.fca.3.extract52, 3
  %248 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract36)
  %249 = load ptr, ptr %14, align 8
  %250 = call ptr %249(ptr %.fca.1.extract38)
  %251 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract36)
  %252 = load ptr, ptr %28, align 8
  %253 = call ptr %252(ptr %.fca.1.extract38)
  %result.i147 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %254 = getelementptr i8, ptr %result.i147, i64 16
  store ptr %253, ptr %254, align 8
  %255 = getelementptr i8, ptr %result.i147, i64 8
  store ptr %250, ptr %255, align 8
  %256 = getelementptr i8, ptr %result.i147, i64 24
  store ptr null, ptr %256, align 8
  %257 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i147)
  store ptr @Entry, ptr %result.i147, align 8
  store ptr @_parameterization_Ptri32, ptr %10, align 8
  %258 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %result.i147, ptr %258, align 8
  %259 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %10)
  %260 = call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract46)
  %261 = sext i32 %.fca.3.extract52 to i64
  %262 = getelementptr ptr, ptr %.fca.0.extract46, i64 %261
  %263 = getelementptr i8, ptr %262, i64 128
  %264 = load ptr, ptr %263, align 8
  store ptr @i32_typ, ptr %11, align 8
  %265 = getelementptr inbounds i8, ptr %11, i64 8
  store ptr %233, ptr %265, align 8
  %266 = call ptr %264({ ptr, ptr, ptr, i32 } %247, ptr nonnull %11)
  call void %266({ ptr, ptr, ptr, i32 } %247, { ptr, ptr, ptr, i32 } %247, ptr nonnull %10, i32 %40, { ptr, i160 } %239)
  %267 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract36)
  %268 = getelementptr i8, ptr %14, i64 32
  %269 = load ptr, ptr %268, align 8
  %270 = load ptr, ptr %269, align 8
  %271 = call i32 %270(ptr %.fca.1.extract38)
  %272 = add i32 %271, -1
  %273 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull %.fca.0.extract36)
  %274 = load ptr, ptr %268, align 8
  %275 = getelementptr i8, ptr %274, i64 8
  %276 = load ptr, ptr %275, align 8
  call void %276(ptr %.fca.1.extract38, i32 %272)
  br label %.thread

.thread:                                          ; preds = %97, %68, %4, %98
  %.reg2mem26.sroa.3.0258 = phi i160 [ %.fca.1.extract77, %98 ], [ poison, %4 ], [ %.fca.1.extract77, %68 ], [ %.fca.1.extract77, %97 ]
  %277 = phi ptr [ %.fca.0.extract75, %98 ], [ @nil_typ, %4 ], [ @nil_typ, %68 ], [ @nil_typ, %97 ]
  %.reload23.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %277, 0
  %.reload23.fca.1.insert = insertvalue { ptr, i160 } %.reload23.fca.0.insert, i160 %.reg2mem26.sroa.3.0258, 1
  ret { ptr, i160 } %.reload23.fca.1.insert
}

define void @HashMap_clear_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -2849643283898152329
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %4 = tail call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract)
  %5 = sext i32 %offset.i.i to i64
  %6 = getelementptr ptr, ptr %.fca.0.extract, i64 %5
  %7 = load ptr, ptr %6, align 8
  %8 = tail call ptr %7(ptr %.fca.1.extract)
  %9 = tail call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract)
  %10 = getelementptr i8, ptr %6, i64 8
  %11 = load ptr, ptr %10, align 8
  %12 = tail call ptr %11(ptr %.fca.1.extract)
  %result.i = tail call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %13 = getelementptr i8, ptr %result.i, i64 16
  store ptr @_parameterization_Nil, ptr %13, align 8
  %result.i1 = tail call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %14 = getelementptr i8, ptr %result.i1, i64 16
  store ptr %12, ptr %14, align 8
  %15 = getelementptr i8, ptr %result.i1, i64 8
  store ptr %8, ptr %15, align 8
  %16 = getelementptr i8, ptr %result.i1, i64 24
  store ptr null, ptr %16, align 8
  %17 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i1)
  store ptr @Entry, ptr %result.i1, align 8
  %18 = getelementptr i8, ptr %result.i, i64 8
  store ptr %result.i1, ptr %18, align 8
  %19 = getelementptr i8, ptr %result.i, i64 24
  store ptr null, ptr %19, align 8
  %20 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i)
  store ptr @union_typ, ptr %result.i, align 8
  %result.i2 = tail call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i, ptr %result.i2, align 8
  %21 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i2)
  %22 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Array, ptr undef, ptr undef, i32 undef }, ptr %result.i2, 1
  %23 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr undef, 2
  %24 = insertvalue { ptr, ptr, ptr, i32 } %23, i32 9, 3
  %25 = tail call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract)
  %26 = load ptr, ptr %6, align 8
  %27 = tail call ptr %26(ptr %.fca.1.extract)
  %28 = tail call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract)
  %29 = load ptr, ptr %10, align 8
  %30 = tail call ptr %29(ptr %.fca.1.extract)
  %31 = getelementptr i8, ptr %result.i2, i64 16
  store i32 16, ptr %31, align 4
  %32 = getelementptr i8, ptr %result.i2, i64 20
  store i32 16, ptr %32, align 4
  %result.i.i = tail call noalias dereferenceable_or_null(512) ptr @bump_malloc_inner(i64 noundef 512, ptr nonnull @current_ptr) #29
  %33 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %34 = getelementptr i8, ptr %result.i2, i64 8
  store ptr %result.i.i, ptr %34, align 8
  %35 = tail call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract)
  %36 = getelementptr i8, ptr %6, i64 24
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr i8, ptr %37, i64 8
  %39 = load ptr, ptr %38, align 8
  tail call void %39(ptr %.fca.1.extract, { ptr, ptr, ptr, i32 } %24)
  %40 = tail call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract)
  %41 = getelementptr i8, ptr %6, i64 32
  %42 = load ptr, ptr %41, align 8
  %43 = getelementptr i8, ptr %42, i64 8
  %44 = load ptr, ptr %43, align 8
  tail call void %44(ptr %.fca.1.extract, i32 0)
  %45 = tail call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract)
  %46 = getelementptr i8, ptr %6, i64 40
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr i8, ptr %47, i64 8
  %49 = load ptr, ptr %48, align 8
  tail call void %49(ptr %.fca.1.extract, i32 0)
  ret void
}

define i32 @HashMap_size_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -2849643283898152329
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %4 = tail call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract)
  %5 = sext i32 %offset.i.i to i64
  %6 = getelementptr ptr, ptr %.fca.0.extract, i64 %5
  %7 = getelementptr i8, ptr %6, i64 32
  %8 = load ptr, ptr %7, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = tail call i32 %9(ptr %.fca.1.extract)
  ret i32 %10
}

define { ptr, ptr, ptr, i32 } @HashMap_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -2849643283898152329
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %4 = tail call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract9)
  %5 = sext i32 %offset.i.i to i64
  %6 = getelementptr ptr, ptr %.fca.0.extract9, i64 %5
  %7 = getelementptr i8, ptr %6, i64 24
  %8 = load ptr, ptr %7, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = tail call { ptr, ptr, ptr, i32 } %9(ptr %.fca.1.extract11)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %10, 0
  %.fca.3.extract7 = extractvalue { ptr, ptr, ptr, i32 } %10, 3
  %hash_coef_ptr.i.i18 = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i19 = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i20 = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i21 = load i64, ptr %hash_coef_ptr.i.i18, align 4
  %tbl_size.i.i22 = load i64, ptr %tbl_size_ptr.i.i19, align 4
  %offset_tbl.i.i23 = load ptr, ptr %offset_tbl_ptr.i.i20, align 8
  %product.i.i.i24 = mul i64 %hash_coef.i.i21, -5261542750394134544
  %shifted.i.i.i25 = lshr i64 %product.i.i.i24, 32
  %xored.i.i.i26 = xor i64 %shifted.i.i.i25, %product.i.i.i24
  %hash.i.i.i27 = and i64 %xored.i.i.i26, %tbl_size.i.i22
  %offset_ptr.i.i28 = getelementptr i32, ptr %offset_tbl.i.i23, i64 %hash.i.i.i27
  %offset.i.i29 = load i32, ptr %offset_ptr.i.i28, align 4
  %eq.i = icmp eq i32 %.fca.3.extract7, %offset.i.i29
  tail call void @llvm.assume(i1 %eq.i) #30
  %11 = tail call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract9)
  %12 = load ptr, ptr %6, align 8
  %13 = tail call ptr %12(ptr %.fca.1.extract11)
  %14 = tail call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract9)
  %15 = getelementptr i8, ptr %6, i64 8
  %16 = load ptr, ptr %15, align 8
  %17 = tail call ptr %16(ptr %.fca.1.extract11)
  %result.i = tail call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %18 = getelementptr i8, ptr %result.i, i64 16
  store ptr %17, ptr %18, align 8
  %19 = getelementptr i8, ptr %result.i, i64 8
  store ptr %13, ptr %19, align 8
  %20 = getelementptr i8, ptr %result.i, i64 24
  store ptr null, ptr %20, align 8
  %21 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i)
  store ptr @Pair, ptr %result.i, align 8
  %result.i31 = tail call noalias dereferenceable_or_null(64) ptr @bump_malloc_inner(i64 noundef 64, ptr nonnull @current_ptr) #29
  store ptr %13, ptr %result.i31, align 8
  %22 = getelementptr i8, ptr %result.i31, i64 8
  store ptr %17, ptr %22, align 8
  %23 = getelementptr i8, ptr %result.i31, i64 16
  store ptr %result.i, ptr %23, align 8
  %24 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %result.i31)
  %25 = tail call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract9)
  %26 = load ptr, ptr %7, align 8
  %27 = load ptr, ptr %26, align 8
  %28 = tail call { ptr, ptr, ptr, i32 } %27(ptr %.fca.1.extract11)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %28, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %28, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %28, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %28, 3
  %hash_coef_ptr.i.i33 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i34 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i35 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i36 = load i64, ptr %hash_coef_ptr.i.i33, align 4
  %tbl_size.i.i37 = load i64, ptr %tbl_size_ptr.i.i34, align 4
  %offset_tbl.i.i38 = load ptr, ptr %offset_tbl_ptr.i.i35, align 8
  %product.i.i.i39 = mul i64 %hash_coef.i.i36, -5261542750394134544
  %shifted.i.i.i40 = lshr i64 %product.i.i.i39, 32
  %xored.i.i.i41 = xor i64 %shifted.i.i.i40, %product.i.i.i39
  %hash.i.i.i42 = and i64 %xored.i.i.i41, %tbl_size.i.i37
  %offset_ptr.i.i43 = getelementptr i32, ptr %offset_tbl.i.i38, i64 %hash.i.i.i42
  %offset.i.i44 = load i32, ptr %offset_ptr.i.i43, align 4
  %eq.i47 = icmp eq i32 %.fca.3.extract, %offset.i.i44
  tail call void @llvm.assume(i1 %eq.i47) #30
  %29 = insertvalue { ptr, ptr, ptr, i32 } { ptr @HashMapIterator, ptr undef, ptr undef, i32 undef }, ptr %result.i31, 1
  %30 = insertvalue { ptr, ptr, ptr, i32 } %29, ptr undef, 2
  %31 = tail call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract9)
  %32 = load ptr, ptr %6, align 8
  %33 = tail call ptr %32(ptr %.fca.1.extract11)
  %34 = tail call ptr @llvm.invariant.start.p0(i64 568, ptr %.fca.0.extract9)
  %35 = load ptr, ptr %15, align 8
  %36 = tail call ptr %35(ptr %.fca.1.extract11)
  %37 = tail call ptr @llvm.invariant.start.p0(i64 96, ptr nonnull @HashMapIterator)
  %hash_coef.i.i13.i = load i64, ptr %hash_coef_ptr.i.i33, align 4
  %tbl_size.i.i14.i = load i64, ptr %tbl_size_ptr.i.i34, align 4
  %offset_tbl.i.i15.i = load ptr, ptr %offset_tbl_ptr.i.i35, align 8
  %product.i.i.i16.i = mul i64 %hash_coef.i.i13.i, -5261542750394134544
  %shifted.i.i.i17.i = lshr i64 %product.i.i.i16.i, 32
  %xored.i.i.i18.i = xor i64 %shifted.i.i.i17.i, %product.i.i.i16.i
  %hash.i.i.i19.i = and i64 %xored.i.i.i18.i, %tbl_size.i.i14.i
  %offset_ptr.i.i20.i = getelementptr i32, ptr %offset_tbl.i.i15.i, i64 %hash.i.i.i19.i
  %offset.i.i35.i = load i32, ptr %offset_ptr.i.i20.i, align 4
  %38 = getelementptr i8, ptr %result.i31, i64 24
  store ptr %.fca.0.extract, ptr %38, align 8
  %39 = getelementptr i8, ptr %result.i31, i64 32
  store ptr %.fca.1.extract, ptr %39, align 8
  %40 = getelementptr i8, ptr %result.i31, i64 40
  store ptr %.fca.2.extract, ptr %40, align 8
  %41 = getelementptr i8, ptr %result.i31, i64 48
  store i32 %offset.i.i35.i, ptr %41, align 4
  %42 = tail call ptr @llvm.invariant.start.p0(i64 96, ptr nonnull @HashMapIterator)
  %43 = getelementptr i8, ptr %result.i31, i64 56
  store i32 0, ptr %43, align 4
  %44 = insertvalue { ptr, ptr, ptr, i32 } %30, i32 18, 3
  ret { ptr, ptr, ptr, i32 } %44
}

define linkonce_odr { ptr, i160 } @_box_union_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %4 = getelementptr inbounds i8, ptr %3, i64 8
  store ptr @union_typ, ptr %3, align 8
  %5 = getelementptr i8, ptr %1, i64 8
  %6 = load i64, ptr %5, align 4
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %_size_union_typ.exit, label %.lr.ph.i

.lr.ph.i:                                         ; preds = %2, %.lr.ph.i
  %.reg2mem20.010.reg2mem.0.i = phi i64 [ %15, %.lr.ph.i ], [ 1, %2 ]
  %.reg2mem22.011.reg2mem.0.i = phi i64 [ %21, %.lr.ph.i ], [ 0, %2 ]
  %.reg2mem14.0.i = phi i64 [ %22, %.lr.ph.i ], [ 1, %2 ]
  %.in.reg2mem.0.i = phi i64 [ %24, %.lr.ph.i ], [ %6, %2 ]
  %8 = inttoptr i64 %.in.reg2mem.0.i to ptr
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr i8, ptr %9, i64 48
  %11 = load ptr, ptr %10, align 8
  %12 = tail call { i64, i64 } %11(ptr nonnull %8)
  %13 = extractvalue { i64, i64 } %12, 0
  %14 = extractvalue { i64, i64 } %12, 1
  %15 = tail call i64 @llvm.umax.i64(i64 %14, i64 %.reg2mem20.010.reg2mem.0.i)
  %16 = urem i64 %.reg2mem22.011.reg2mem.0.i, %14
  %17 = icmp eq i64 %16, 0
  %18 = sub i64 %14, %16
  %19 = select i1 %17, i64 0, i64 %18
  %20 = add i64 %13, %.reg2mem22.011.reg2mem.0.i
  %21 = tail call i64 @llvm.umax.i64(i64 %20, i64 %19)
  %22 = add i64 %.reg2mem14.0.i, 1
  %23 = getelementptr ptr, ptr %1, i64 %22
  %24 = load i64, ptr %23, align 4
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %.lr.ph.._crit_edge_crit_edge.i, label %.lr.ph.i

.lr.ph.._crit_edge_crit_edge.i:                   ; preds = %.lr.ph.i
  %26 = add i64 %21, 8
  br label %_size_union_typ.exit

_size_union_typ.exit:                             ; preds = %2, %.lr.ph.._crit_edge_crit_edge.i
  %.reg2mem22.0.lcssa.reg2mem.0.i = phi i64 [ %26, %.lr.ph.._crit_edge_crit_edge.i ], [ 8, %2 ]
  %.reg2mem20.0.lcssa.reg2mem.0.i = phi i64 [ %15, %.lr.ph.._crit_edge_crit_edge.i ], [ 1, %2 ]
  %27 = urem i64 %.reg2mem22.0.lcssa.reg2mem.0.i, %.reg2mem20.0.lcssa.reg2mem.0.i
  %28 = icmp eq i64 %27, 0
  %29 = sub i64 %.reg2mem20.0.lcssa.reg2mem.0.i, %27
  %30 = select i1 %28, i64 0, i64 %29
  %31 = add i64 %30, %.reg2mem22.0.lcssa.reg2mem.0.i
  %32 = icmp eq i64 %31, 32
  br i1 %32, label %._crit_edge, label %33

._crit_edge:                                      ; preds = %33, %_size_union_typ.exit
  %.reg2mem9.0 = phi ptr [ %3, %_size_union_typ.exit ], [ %4, %33 ]
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 1 %.reg2mem9.0, ptr align 1 %0, i64 %31, i1 false)
  %.pre = load ptr, ptr %3, align 8
  br label %36

33:                                               ; preds = %_size_union_typ.exit
  %34 = icmp slt i64 %31, 17
  br i1 %34, label %._crit_edge, label %35

35:                                               ; preds = %33
  %result.i = tail call noalias ptr @bump_malloc_inner(i64 noundef %31, ptr nonnull @current_ptr) #29
  tail call void @llvm.memcpy.inline.p0.p0.i64(ptr align 1 %result.i, ptr align 1 %0, i64 %31, i1 false)
  store ptr %result.i, ptr %4, align 8
  br label %36

36:                                               ; preds = %35, %._crit_edge
  %37 = phi ptr [ @union_typ, %35 ], [ %.pre, %._crit_edge ]
  %38 = insertvalue { ptr, i160 } undef, ptr %37, 0
  %39 = load i160, ptr %4, align 8
  %40 = insertvalue { ptr, i160 } %38, i160 %39, 1
  ret { ptr, i160 } %40
}

define linkonce_odr { i64, i64 } @_size_nil_typ(ptr %0) {
  ret { i64, i64 } { i64 ptrtoint (ptr getelementptr ([0 x i8], ptr null, i32 1) to i64), i64 1 }
}

define linkonce_odr { ptr, i160 } @_box_nil_typ(ptr %0, ptr %1) {
  ret { ptr, i160 } { ptr @nil_typ, i160 undef }
}

define linkonce_odr void @_unbox_nil_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_HashMapIterator(ptr nocapture readnone %0) #0 {
  ret { i64, i64 } { i64 64, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @HashMapIterator_field_HashMapIterator_0(ptr nocapture readonly %0) #3 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @HashMapIterator_field_HashMapIterator_1(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @HashMapIterator_field_HashMapIterator_2(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @HashMapIterator_B_init_map_entriesArrayEntryK._V_or_Nil({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 128
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @HashMapIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 136
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @HashMapIterator_init_map_entriesArrayEntryK._V_or_Nil({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -704669437586349537
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %hash_coef_ptr.i.i10 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i11 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i12 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i13 = load i64, ptr %hash_coef_ptr.i.i10, align 4
  %tbl_size.i.i14 = load i64, ptr %tbl_size_ptr.i.i11, align 4
  %offset_tbl.i.i15 = load ptr, ptr %offset_tbl_ptr.i.i12, align 8
  %product.i.i.i16 = mul i64 %hash_coef.i.i13, -5261542750394134544
  %shifted.i.i.i17 = lshr i64 %product.i.i.i16, 32
  %xored.i.i.i18 = xor i64 %shifted.i.i.i17, %product.i.i.i16
  %hash.i.i.i19 = and i64 %xored.i.i.i18, %tbl_size.i.i14
  %offset_ptr.i.i20 = getelementptr i32, ptr %offset_tbl.i.i15, i64 %hash.i.i.i19
  %offset.i.i35 = load i32, ptr %offset_ptr.i.i20, align 4
  %5 = tail call ptr @llvm.invariant.start.p0(i64 96, ptr %.fca.0.extract1)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract1, i64 %6
  %8 = getelementptr i8, ptr %7, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr i8, ptr %9, i64 8
  %11 = load ptr, ptr %10, align 8
  %12 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.1.extract, 1
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.2.extract, 2
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, i32 %offset.i.i35, 3
  tail call void %11(ptr %.fca.1.extract3, { ptr, ptr, ptr, i32 } %15)
  %16 = tail call ptr @llvm.invariant.start.p0(i64 96, ptr %.fca.0.extract1)
  %17 = getelementptr i8, ptr %7, i64 32
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr i8, ptr %18, i64 8
  %20 = load ptr, ptr %19, align 8
  tail call void %20(ptr %.fca.1.extract3, i32 0)
  ret void
}

define { ptr, i160 } @HashMapIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %5 = alloca [1 x ptr], align 8
  %6 = alloca { ptr }, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = alloca [2 x ptr], align 8
  %9 = alloca { ptr, ptr }, align 8
  %.fca.0.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract5, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract5, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract5, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -704669437586349537
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %10 = tail call ptr @llvm.invariant.start.p0(i64 96, ptr nonnull %.fca.0.extract5)
  %11 = sext i32 %offset.i.i to i64
  %12 = getelementptr ptr, ptr %.fca.0.extract5, i64 %11
  %13 = getelementptr i8, ptr %12, i64 32
  %14 = getelementptr i8, ptr %12, i64 24
  %15 = getelementptr i8, ptr %12, i64 8
  br label %.backedge

.backedge:                                        ; preds = %.backedge.backedge, %3
  %16 = load ptr, ptr %13, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = call i32 %17(ptr %.fca.1.extract6)
  %19 = call ptr @llvm.invariant.start.p0(i64 96, ptr nonnull %.fca.0.extract5)
  %20 = load ptr, ptr %14, align 8
  %21 = load ptr, ptr %20, align 8
  %22 = call { ptr, ptr, ptr, i32 } %21(ptr %.fca.1.extract6)
  %.fca.0.extract47 = extractvalue { ptr, ptr, ptr, i32 } %22, 0
  %.fca.1.extract49 = extractvalue { ptr, ptr, ptr, i32 } %22, 1
  %.fca.2.extract51 = extractvalue { ptr, ptr, ptr, i32 } %22, 2
  %.fca.3.extract53 = extractvalue { ptr, ptr, ptr, i32 } %22, 3
  %hash_coef_ptr.i.i59 = getelementptr i8, ptr %.fca.0.extract47, i64 8
  %tbl_size_ptr.i.i60 = getelementptr i8, ptr %.fca.0.extract47, i64 16
  %offset_tbl_ptr.i.i61 = getelementptr i8, ptr %.fca.0.extract47, i64 40
  %hash_coef.i.i62 = load i64, ptr %hash_coef_ptr.i.i59, align 4
  %tbl_size.i.i63 = load i64, ptr %tbl_size_ptr.i.i60, align 4
  %offset_tbl.i.i64 = load ptr, ptr %offset_tbl_ptr.i.i61, align 8
  %product.i.i.i65 = mul i64 %hash_coef.i.i62, -5261542750394134544
  %shifted.i.i.i66 = lshr i64 %product.i.i.i65, 32
  %xored.i.i.i67 = xor i64 %shifted.i.i.i66, %product.i.i.i65
  %hash.i.i.i68 = and i64 %xored.i.i.i67, %tbl_size.i.i63
  %offset_ptr.i.i69 = getelementptr i32, ptr %offset_tbl.i.i64, i64 %hash.i.i.i68
  %offset.i.i70 = load i32, ptr %offset_ptr.i.i69, align 4
  %eq.i = icmp eq i32 %.fca.3.extract53, %offset.i.i70
  call void @llvm.assume(i1 %eq.i) #30
  %23 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract47, 0
  %24 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %.fca.1.extract49, 1
  %25 = insertvalue { ptr, ptr, ptr, i32 } %24, ptr %.fca.2.extract51, 2
  %26 = insertvalue { ptr, ptr, ptr, i32 } %25, i32 %.fca.3.extract53, 3
  %27 = call ptr @llvm.invariant.start.p0(i64 96, ptr nonnull %.fca.0.extract5)
  %28 = load ptr, ptr %12, align 8
  %29 = call ptr %28(ptr %.fca.1.extract6)
  %30 = call ptr @llvm.invariant.start.p0(i64 96, ptr nonnull %.fca.0.extract5)
  %31 = load ptr, ptr %15, align 8
  %32 = call ptr %31(ptr %.fca.1.extract6)
  %33 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %34 = call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract47)
  %35 = sext i32 %.fca.3.extract53 to i64
  %36 = getelementptr ptr, ptr %.fca.0.extract47, i64 %35
  %37 = getelementptr i8, ptr %36, i64 64
  %38 = load ptr, ptr %37, align 8
  %39 = call ptr %38({ ptr, ptr, ptr, i32 } %26, ptr nonnull %4)
  %40 = call i32 %39({ ptr, ptr, ptr, i32 } %26, { ptr, ptr, ptr, i32 } %26, ptr nonnull %4)
  %41 = icmp slt i32 %18, %40
  br i1 %41, label %42, label %.thread186

42:                                               ; preds = %.backedge
  %43 = call ptr @llvm.invariant.start.p0(i64 96, ptr nonnull %.fca.0.extract5)
  %44 = load ptr, ptr %13, align 8
  %45 = load ptr, ptr %44, align 8
  %46 = call i32 %45(ptr %.fca.1.extract6)
  %47 = call ptr @llvm.invariant.start.p0(i64 96, ptr nonnull %.fca.0.extract5)
  %48 = load ptr, ptr %14, align 8
  %49 = load ptr, ptr %48, align 8
  %50 = call { ptr, ptr, ptr, i32 } %49(ptr %.fca.1.extract6)
  %.fca.0.extract39 = extractvalue { ptr, ptr, ptr, i32 } %50, 0
  %.fca.1.extract41 = extractvalue { ptr, ptr, ptr, i32 } %50, 1
  %.fca.2.extract43 = extractvalue { ptr, ptr, ptr, i32 } %50, 2
  %.fca.3.extract45 = extractvalue { ptr, ptr, ptr, i32 } %50, 3
  %hash_coef_ptr.i.i73 = getelementptr i8, ptr %.fca.0.extract39, i64 8
  %tbl_size_ptr.i.i74 = getelementptr i8, ptr %.fca.0.extract39, i64 16
  %offset_tbl_ptr.i.i75 = getelementptr i8, ptr %.fca.0.extract39, i64 40
  %hash_coef.i.i76 = load i64, ptr %hash_coef_ptr.i.i73, align 4
  %tbl_size.i.i77 = load i64, ptr %tbl_size_ptr.i.i74, align 4
  %offset_tbl.i.i78 = load ptr, ptr %offset_tbl_ptr.i.i75, align 8
  %product.i.i.i79 = mul i64 %hash_coef.i.i76, -5261542750394134544
  %shifted.i.i.i80 = lshr i64 %product.i.i.i79, 32
  %xored.i.i.i81 = xor i64 %shifted.i.i.i80, %product.i.i.i79
  %hash.i.i.i82 = and i64 %xored.i.i.i81, %tbl_size.i.i77
  %offset_ptr.i.i83 = getelementptr i32, ptr %offset_tbl.i.i78, i64 %hash.i.i.i82
  %offset.i.i84 = load i32, ptr %offset_ptr.i.i83, align 4
  %eq.i87 = icmp eq i32 %.fca.3.extract45, %offset.i.i84
  call void @llvm.assume(i1 %eq.i87) #30
  %51 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract39, 0
  %52 = insertvalue { ptr, ptr, ptr, i32 } %51, ptr %.fca.1.extract41, 1
  %53 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %.fca.2.extract43, 2
  %54 = insertvalue { ptr, ptr, ptr, i32 } %53, i32 %.fca.3.extract45, 3
  %55 = call ptr @llvm.invariant.start.p0(i64 96, ptr nonnull %.fca.0.extract5)
  %56 = load ptr, ptr %12, align 8
  %57 = call ptr %56(ptr %.fca.1.extract6)
  %58 = call ptr @llvm.invariant.start.p0(i64 96, ptr nonnull %.fca.0.extract5)
  %59 = load ptr, ptr %15, align 8
  %60 = call ptr %59(ptr %.fca.1.extract6)
  store ptr @_parameterization_Ptri32, ptr %5, align 8
  %61 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %5)
  %62 = call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract39)
  %63 = sext i32 %.fca.3.extract45 to i64
  %64 = getelementptr ptr, ptr %.fca.0.extract39, i64 %63
  %65 = getelementptr i8, ptr %64, i64 120
  %66 = load ptr, ptr %65, align 8
  store ptr @i32_typ, ptr %6, align 8
  %67 = call ptr %66({ ptr, ptr, ptr, i32 } %54, ptr nonnull %6)
  %68 = call { ptr, i160 } %67({ ptr, ptr, ptr, i32 } %54, { ptr, ptr, ptr, i32 } %54, ptr nonnull %5, i32 %46)
  %.fca.0.extract32 = extractvalue { ptr, i160 } %68, 0
  %69 = call ptr @llvm.invariant.start.p0(i64 96, ptr nonnull %.fca.0.extract5)
  %70 = load ptr, ptr %13, align 8
  %71 = load ptr, ptr %70, align 8
  %72 = call i32 %71(ptr %.fca.1.extract6)
  %73 = add i32 %72, 1
  %74 = call ptr @llvm.invariant.start.p0(i64 96, ptr nonnull %.fca.0.extract5)
  %75 = load ptr, ptr %13, align 8
  %76 = getelementptr i8, ptr %75, i64 8
  %77 = load ptr, ptr %76, align 8
  call void %77(ptr %.fca.1.extract6, i32 %73)
  %78 = icmp ne ptr %.fca.0.extract32, @nil_typ
  %79 = icmp ne ptr %.fca.0.extract32, null
  %.not56 = and i1 %78, %79
  br i1 %.not56, label %80, label %.backedge.backedge

80:                                               ; preds = %42
  %.fca.1.extract34 = extractvalue { ptr, i160 } %68, 1
  %.sroa.5.8.extract.trunc = trunc i160 %.fca.1.extract34 to i64
  %81 = inttoptr i64 %.sroa.5.8.extract.trunc to ptr
  %.sroa.9.8.extract.shift = lshr i160 %.fca.1.extract34, 64
  %.sroa.9.8.extract.trunc = trunc i160 %.sroa.9.8.extract.shift to i64
  %82 = inttoptr i64 %.sroa.9.8.extract.trunc to ptr
  %hash_coef_ptr.i.i89 = getelementptr i8, ptr %.fca.0.extract32, i64 8
  %tbl_size_ptr.i.i90 = getelementptr i8, ptr %.fca.0.extract32, i64 16
  %offset_tbl_ptr.i.i91 = getelementptr i8, ptr %.fca.0.extract32, i64 40
  %hash_coef.i.i92 = load i64, ptr %hash_coef_ptr.i.i89, align 4
  %tbl_size.i.i93 = load i64, ptr %tbl_size_ptr.i.i90, align 4
  %offset_tbl.i.i94 = load ptr, ptr %offset_tbl_ptr.i.i91, align 8
  %product.i.i.i95 = mul i64 %hash_coef.i.i92, 4015701072841558310
  %shifted.i.i.i96 = lshr i64 %product.i.i.i95, 32
  %xored.i.i.i97 = xor i64 %shifted.i.i.i96, %product.i.i.i95
  %hash.i.i.i98 = and i64 %xored.i.i.i97, %tbl_size.i.i93
  %offset_ptr.i.i99 = getelementptr i32, ptr %offset_tbl.i.i94, i64 %hash.i.i.i98
  %offset.i.i100 = load i32, ptr %offset_ptr.i.i99, align 4
  %83 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract32, 0
  %84 = insertvalue { ptr, ptr, ptr, i32 } %83, ptr %81, 1
  %85 = insertvalue { ptr, ptr, ptr, i32 } %84, ptr %82, 2
  %86 = insertvalue { ptr, ptr, ptr, i32 } %85, i32 %offset.i.i100, 3
  %87 = call ptr @llvm.invariant.start.p0(i64 96, ptr nonnull %.fca.0.extract5)
  %88 = load ptr, ptr %12, align 8
  %89 = call ptr %88(ptr %.fca.1.extract6)
  %90 = call ptr @llvm.invariant.start.p0(i64 96, ptr nonnull %.fca.0.extract5)
  %91 = load ptr, ptr %15, align 8
  %92 = call ptr %91(ptr %.fca.1.extract6)
  %93 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %94 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract32)
  %95 = sext i32 %offset.i.i100 to i64
  %96 = getelementptr ptr, ptr %.fca.0.extract32, i64 %95
  %97 = getelementptr i8, ptr %96, i64 56
  %98 = load ptr, ptr %97, align 8
  %99 = call ptr %98({ ptr, ptr, ptr, i32 } %86, ptr nonnull %4)
  %100 = call { ptr, i160 } %99({ ptr, ptr, ptr, i32 } %86, { ptr, ptr, ptr, i32 } %86, ptr nonnull %4)
  %.fca.0.extract25 = extractvalue { ptr, i160 } %100, 0
  %101 = getelementptr i8, ptr %.fca.0.extract25, i64 8
  %102 = getelementptr i8, ptr %.fca.0.extract25, i64 16
  %103 = getelementptr i8, ptr %.fca.0.extract25, i64 24
  %104 = getelementptr i8, ptr %.fca.0.extract25, i64 32
  %105 = load i64, ptr %101, align 4
  %106 = load i64, ptr %102, align 4
  %107 = load ptr, ptr %103, align 8
  %108 = load ptr, ptr %104, align 8
  %result.i = call i1 %107(i64 %106, i64 %105, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %108) #3
  %result.i102 = call i1 %107(i64 %106, i64 %105, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr readonly %108) #3
  %not.result.i = xor i1 %result.i, true
  %.reg2mem58.0 = select i1 %not.result.i, i1 %result.i102, i1 false
  br i1 %.reg2mem58.0, label %109, label %.backedge.backedge

.backedge.backedge:                               ; preds = %80, %42
  br label %.backedge

109:                                              ; preds = %80
  %110 = call ptr @llvm.invariant.start.p0(i64 96, ptr nonnull %.fca.0.extract5)
  %111 = load ptr, ptr %12, align 8
  %112 = call ptr %111(ptr %.fca.1.extract6)
  %113 = call ptr @llvm.invariant.start.p0(i64 96, ptr nonnull %.fca.0.extract5)
  %114 = load ptr, ptr %15, align 8
  %115 = call ptr %114(ptr %.fca.1.extract6)
  %116 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %117 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract32)
  %118 = getelementptr i8, ptr %96, i64 48
  %119 = load ptr, ptr %118, align 8
  %120 = call ptr %119({ ptr, ptr, ptr, i32 } %86, ptr nonnull %4)
  %121 = call { ptr, i160 } %120({ ptr, ptr, ptr, i32 } %86, { ptr, ptr, ptr, i32 } %86, ptr nonnull %4)
  %122 = call ptr @llvm.invariant.start.p0(i64 96, ptr nonnull %.fca.0.extract5)
  %123 = load ptr, ptr %12, align 8
  %124 = call ptr %123(ptr %.fca.1.extract6)
  %125 = call ptr @llvm.invariant.start.p0(i64 96, ptr nonnull %.fca.0.extract5)
  %126 = load ptr, ptr %15, align 8
  %127 = call ptr %126(ptr %.fca.1.extract6)
  %128 = load ptr, ptr %124, align 8
  %129 = getelementptr i8, ptr %128, i64 48
  %130 = load ptr, ptr %129, align 8
  %131 = call { i64, i64 } %130(ptr nonnull %124)
  %132 = extractvalue { i64, i64 } %131, 0
  %133 = extractvalue { i64, i64 } %131, 1
  %134 = urem i64 16, %133
  %135 = icmp eq i64 %134, 0
  %136 = sub i64 %133, %134
  %137 = select i1 %135, i64 0, i64 %136
  %138 = add i64 %132, 16
  %139 = add i64 %138, %137
  %140 = load ptr, ptr %127, align 8
  %141 = getelementptr i8, ptr %140, i64 48
  %142 = load ptr, ptr %141, align 8
  %143 = call { i64, i64 } %142(ptr nonnull %127)
  %144 = extractvalue { i64, i64 } %143, 0
  %145 = extractvalue { i64, i64 } %143, 1
  %146 = call i64 @llvm.umax.i64(i64 %133, i64 %145)
  %147 = call i64 @llvm.umax.i64(i64 %146, i64 8)
  %148 = urem i64 %139, %145
  %149 = icmp eq i64 %148, 0
  %150 = sub i64 %145, %148
  %151 = select i1 %149, i64 0, i64 %150
  %152 = add i64 %144, %139
  %153 = add i64 %152, %151
  %154 = urem i64 %153, %147
  %155 = icmp eq i64 %154, 0
  %156 = sub i64 %147, %154
  %157 = select i1 %155, i64 0, i64 %156
  %158 = add i64 %157, %153
  %result.i103 = call noalias ptr @bump_malloc_inner(i64 noundef %158, ptr nonnull @current_ptr) #29
  store ptr %124, ptr %result.i103, align 8
  %159 = getelementptr i8, ptr %result.i103, i64 8
  store ptr %127, ptr %159, align 8
  %160 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i103)
  %161 = getelementptr inbounds i8, ptr %7, i64 8
  %162 = getelementptr inbounds i8, ptr %7, i64 24
  store ptr @Pair, ptr %7, align 8
  store ptr %result.i103, ptr %161, align 8
  store i32 9, ptr %162, align 8
  %163 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %7)
  %164 = call ptr @llvm.invariant.start.p0(i64 96, ptr nonnull %.fca.0.extract5)
  %165 = load ptr, ptr %12, align 8
  %166 = call ptr %165(ptr %.fca.1.extract6)
  %167 = call ptr @llvm.invariant.start.p0(i64 96, ptr nonnull %.fca.0.extract5)
  %168 = load ptr, ptr %15, align 8
  %169 = call ptr %168(ptr %.fca.1.extract6)
  %170 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %171 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract32)
  %172 = load ptr, ptr %118, align 8
  %173 = call ptr %172({ ptr, ptr, ptr, i32 } %86, ptr nonnull %4)
  %174 = call { ptr, i160 } %173({ ptr, ptr, ptr, i32 } %86, { ptr, ptr, ptr, i32 } %86, ptr nonnull %4)
  %.fca.0.extract13 = extractvalue { ptr, i160 } %174, 0
  %175 = load ptr, ptr %7, align 8
  %176 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %175, 0
  %177 = load ptr, ptr %161, align 8
  %178 = insertvalue { ptr, ptr, ptr, i32 } %176, ptr %177, 1
  %179 = getelementptr inbounds i8, ptr %7, i64 16
  %180 = load ptr, ptr %179, align 8
  %181 = insertvalue { ptr, ptr, ptr, i32 } %178, ptr %180, 2
  %182 = load i32, ptr %162, align 8
  %183 = insertvalue { ptr, ptr, ptr, i32 } %181, i32 %182, 3
  %184 = call ptr @llvm.invariant.start.p0(i64 96, ptr nonnull %.fca.0.extract5)
  %185 = load ptr, ptr %12, align 8
  %186 = call ptr %185(ptr %.fca.1.extract6)
  %187 = call ptr @llvm.invariant.start.p0(i64 96, ptr nonnull %.fca.0.extract5)
  %188 = load ptr, ptr %15, align 8
  %189 = call ptr %188(ptr %.fca.1.extract6)
  store ptr %186, ptr %8, align 8
  %190 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr %189, ptr %190, align 8
  %191 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %8)
  %192 = call ptr @llvm.invariant.start.p0(i64 80, ptr %175)
  %193 = sext i32 %182 to i64
  %194 = getelementptr ptr, ptr %175, i64 %193
  %195 = getelementptr i8, ptr %194, i64 32
  %196 = load ptr, ptr %195, align 8
  store ptr %.fca.0.extract13, ptr %9, align 8
  %197 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %.fca.0.extract25, ptr %197, align 8
  %198 = call ptr %196({ ptr, ptr, ptr, i32 } %183, ptr nonnull %9)
  call void %198({ ptr, ptr, ptr, i32 } %183, { ptr, ptr, ptr, i32 } %183, ptr nonnull %8, { ptr, i160 } %174, { ptr, i160 } %100)
  %199 = load ptr, ptr %7, align 8
  %200 = load i160, ptr %161, align 8
  br label %.thread186

.thread186:                                       ; preds = %.backedge, %109
  %.reg2mem44.sroa.3.0 = phi i160 [ %200, %109 ], [ undef, %.backedge ]
  %.reg2mem44.sroa.0.0 = phi ptr [ %199, %109 ], [ @nil_typ, %.backedge ]
  %.reload45.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %.reg2mem44.sroa.0.0, 0
  %.reload45.fca.1.insert = insertvalue { ptr, i160 } %.reload45.fca.0.insert, i160 %.reg2mem44.sroa.3.0, 1
  ret { ptr, i160 } %.reload45.fca.1.insert
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @HashMapIterator_getter_index(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 56
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @HashMapIterator_setter_index(ptr nocapture writeonly %0, i32 %1) #6 {
  %3 = getelementptr i8, ptr %0, i64 56
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @HashMapIterator_getter_map_entries(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 24
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 32
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 40
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 48
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @HashMapIterator_setter_map_entries(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #6 {
  %3 = getelementptr i8, ptr %0, i64 24
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 32
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 40
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 48
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

define linkonce_odr { i64, i64 } @_size_function_typ(ptr %0) {
  ret { i64, i64 } { i64 8, i64 8 }
}

define linkonce_odr { ptr, i160 } @_box_function_typ(ptr %0, ptr %1) {
  %3 = load i64, ptr %0, align 1
  %.sroa.2.sroa.0.0.insert.ext = zext i64 %3 to i160
  %4 = insertvalue { ptr, i160 } { ptr @function_typ, i160 undef }, i160 %.sroa.2.sroa.0.0.insert.ext, 1
  ret { ptr, i160 } %4
}

define linkonce_odr void @_unbox_function_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %.fca.1.extract = extractvalue { ptr, i160 } %0, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i64
  store i64 %.sroa.1.8.extract.trunc, ptr %2, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr } @HashMap_getter_eq(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 72
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr } undef, ptr %3, 0
  ret { ptr } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @HashMap_setter_eq(ptr nocapture writeonly %0, { ptr } %1) #6 {
  %3 = getelementptr i8, ptr %0, i64 72
  %.fca.0.extract = extractvalue { ptr } %1, 0
  store ptr %.fca.0.extract, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr } @HashMap_getter_hasher(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 64
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr } undef, ptr %3, 0
  ret { ptr } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @HashMap_setter_hasher(ptr nocapture writeonly %0, { ptr } %1) #6 {
  %3 = getelementptr i8, ptr %0, i64 64
  %.fca.0.extract = extractvalue { ptr } %1, 0
  store ptr %.fca.0.extract, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @HashMap_getter_load(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 60
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @HashMap_setter_load(ptr nocapture writeonly %0, i32 %1) #6 {
  %3 = getelementptr i8, ptr %0, i64 60
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @HashMap_getter_size(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 56
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @HashMap_setter_size(ptr nocapture writeonly %0, i32 %1) #6 {
  %3 = getelementptr i8, ptr %0, i64 56
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @HashMap_getter_entries(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 24
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 32
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 40
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 48
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @HashMap_setter_entries(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #6 {
  %3 = getelementptr i8, ptr %0, i64 24
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 32
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 40
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 48
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_PRNG(ptr nocapture readnone %0) #0 {
  ret { i64, i64 } { i64 4, i64 4 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @PRNG_B_init_initial_seedPtri32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 96
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @PRNG_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 104
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @PRNG_init_initial_seedPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -4401938362882229211
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %5 = tail call ptr @llvm.invariant.start.p0(i64 40, ptr nonnull %.fca.0.extract)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract, i64 %6
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr i8, ptr %8, i64 8
  %10 = load ptr, ptr %9, align 8
  %. = tail call i32 @llvm.smax.i32(i32 %3, i32 1)
  tail call void %10(ptr %.fca.1.extract, i32 %.)
  ret void
}

define i32 @PRNG_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -4401938362882229211
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %4 = tail call ptr @llvm.invariant.start.p0(i64 40, ptr %.fca.0.extract)
  %5 = sext i32 %offset.i.i to i64
  %6 = getelementptr ptr, ptr %.fca.0.extract, i64 %5
  %7 = load ptr, ptr %6, align 8
  %8 = load ptr, ptr %7, align 8
  %9 = tail call i32 %8(ptr %.fca.1.extract)
  %10 = mul i32 %9, 1103515245
  %11 = add i32 %10, 12345
  %12 = and i32 %11, 2147483647
  %13 = tail call ptr @llvm.invariant.start.p0(i64 40, ptr %.fca.0.extract)
  %14 = load ptr, ptr %6, align 8
  %15 = getelementptr i8, ptr %14, i64 8
  %16 = load ptr, ptr %15, align 8
  tail call void %16(ptr %.fca.1.extract, i32 %12)
  %17 = tail call ptr @llvm.invariant.start.p0(i64 40, ptr %.fca.0.extract)
  %18 = load ptr, ptr %6, align 8
  %19 = load ptr, ptr %18, align 8
  %20 = tail call i32 %19(ptr %.fca.1.extract)
  ret i32 %20
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @PRNG_getter_seed(ptr nocapture readonly %0) #3 {
  %2 = load i32, ptr %0, align 4
  ret i32 %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @PRNG_setter_seed(ptr nocapture writeonly %0, i32 %1) #6 {
  store i32 %1, ptr %0, align 4
  ret void
}

define i1 @lwmnayxbwz(ptr nest nocapture readonly %0, { ptr, i160 } %1, { ptr, i160 } %2) {
  %.fca.1.extract2 = extractvalue { ptr, i160 } %1, 1
  %.sroa.14.8.extract.trunc = trunc i160 %.fca.1.extract2 to i32
  %.fca.1.extract = extractvalue { ptr, i160 } %2, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %4 = tail call i1 %0(i32 %.sroa.14.8.extract.trunc, i32 %.sroa.1.8.extract.trunc)
  ret i1 %4
}

define i32 @qcuomdwgoi(ptr nest nocapture readonly %0, { ptr, i160 } %1) {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %3 = tail call i32 %0(i32 %.sroa.1.8.extract.trunc)
  ret i32 %3
}

define i1 @ucixvevrqu(ptr nest nocapture readonly %0, { ptr, i160 } %1, { ptr, i160 } %2) {
  %.fca.1.extract2 = extractvalue { ptr, i160 } %1, 1
  %.sroa.14.8.extract.trunc = trunc i160 %.fca.1.extract2 to i32
  %.fca.1.extract = extractvalue { ptr, i160 } %2, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %4 = tail call i1 %0(i32 %.sroa.14.8.extract.trunc, i32 %.sroa.1.8.extract.trunc)
  ret i1 %4
}

define i32 @rhmistbkfh(ptr nest nocapture readonly %0, { ptr, i160 } %1) {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %3 = tail call i32 %0(i32 %.sroa.1.8.extract.trunc)
  ret i32 %3
}

define i1 @ypuwldfatb(ptr nest nocapture readonly %0, { ptr, i160 } %1, { ptr, i160 } %2) {
  %.fca.1.extract2 = extractvalue { ptr, i160 } %1, 1
  %.sroa.14.8.extract.trunc = trunc i160 %.fca.1.extract2 to i32
  %.fca.1.extract = extractvalue { ptr, i160 } %2, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %4 = tail call i1 %0(i32 %.sroa.14.8.extract.trunc, i32 %.sroa.1.8.extract.trunc)
  ret i1 %4
}

define i32 @ewkxrfnucl(ptr nest nocapture readonly %0, { ptr, i160 } %1) {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %3 = tail call i32 %0(i32 %.sroa.1.8.extract.trunc)
  ret i32 %3
}

define i1 @jplekxbvrg(ptr nest nocapture readonly %0, { ptr, i160 } %1, { ptr, i160 } %2) {
  %.fca.1.extract2 = extractvalue { ptr, i160 } %1, 1
  %.sroa.14.8.extract.trunc = trunc i160 %.fca.1.extract2 to i32
  %.fca.1.extract = extractvalue { ptr, i160 } %2, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %4 = tail call i1 %0(i32 %.sroa.14.8.extract.trunc, i32 %.sroa.1.8.extract.trunc)
  ret i1 %4
}

define i32 @xckklmlpex(ptr nest nocapture readonly %0, { ptr, i160 } %1) {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %3 = tail call i32 %0(i32 %.sroa.1.8.extract.trunc)
  ret i32 %3
}

define i1 @sjntdoqnon(ptr nest nocapture readonly %0, { ptr, i160 } %1, { ptr, i160 } %2) {
  %.fca.1.extract2 = extractvalue { ptr, i160 } %1, 1
  %.sroa.14.8.extract.trunc = trunc i160 %.fca.1.extract2 to i32
  %.fca.1.extract = extractvalue { ptr, i160 } %2, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %4 = tail call i1 %0(i32 %.sroa.14.8.extract.trunc, i32 %.sroa.1.8.extract.trunc)
  ret i1 %4
}

define i32 @ownklfputh(ptr nest nocapture readonly %0, { ptr, i160 } %1) {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %3 = tail call i32 %0(i32 %.sroa.1.8.extract.trunc)
  ret i32 %3
}

define i1 @spivdtjshg(ptr nest nocapture readonly %0, { ptr, i160 } %1, { ptr, i160 } %2) {
  %.fca.1.extract2 = extractvalue { ptr, i160 } %1, 1
  %.sroa.14.8.extract.trunc = trunc i160 %.fca.1.extract2 to i32
  %.fca.1.extract = extractvalue { ptr, i160 } %2, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %4 = tail call i1 %0(i32 %.sroa.14.8.extract.trunc, i32 %.sroa.1.8.extract.trunc)
  ret i1 %4
}

define i32 @ybllmnbebm(ptr nest nocapture readonly %0, { ptr, i160 } %1) {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %3 = tail call i32 %0(i32 %.sroa.1.8.extract.trunc)
  ret i32 %3
}

define i1 @orftdrnqtc(ptr nest nocapture readonly %0, { ptr, i160 } %1, { ptr, i160 } %2) {
  %.fca.1.extract2 = extractvalue { ptr, i160 } %1, 1
  %.sroa.14.8.extract.trunc = trunc i160 %.fca.1.extract2 to i32
  %.fca.1.extract = extractvalue { ptr, i160 } %2, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %4 = tail call i1 %0(i32 %.sroa.14.8.extract.trunc, i32 %.sroa.1.8.extract.trunc)
  ret i1 %4
}

define i32 @jotueralys(ptr nest nocapture readonly %0, { ptr, i160 } %1) {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %3 = tail call i32 %0(i32 %.sroa.1.8.extract.trunc)
  ret i32 %3
}

define i1 @hvnxsdclsg(ptr nest nocapture readonly %0, { ptr, i160 } %1, { ptr, i160 } %2) {
  %.fca.1.extract2 = extractvalue { ptr, i160 } %1, 1
  %.sroa.14.8.extract.trunc = trunc i160 %.fca.1.extract2 to i32
  %.fca.1.extract = extractvalue { ptr, i160 } %2, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %4 = tail call i1 %0(i32 %.sroa.14.8.extract.trunc, i32 %.sroa.1.8.extract.trunc)
  ret i1 %4
}

define i32 @ofnpxjvthj(ptr nest nocapture readonly %0, { ptr, i160 } %1) {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %3 = tail call i32 %0(i32 %.sroa.1.8.extract.trunc)
  ret i32 %3
}

define i1 @zztptklfit(ptr nest nocapture readonly %0, { ptr, i160 } %1, { ptr, i160 } %2) {
  %.fca.1.extract2 = extractvalue { ptr, i160 } %1, 1
  %.sroa.14.8.extract.trunc = trunc i160 %.fca.1.extract2 to i32
  %.fca.1.extract = extractvalue { ptr, i160 } %2, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %4 = tail call i1 %0(i32 %.sroa.14.8.extract.trunc, i32 %.sroa.1.8.extract.trunc)
  ret i1 %4
}

define i32 @nckuqhcbrs(ptr nest nocapture readonly %0, { ptr, i160 } %1) {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %3 = tail call i32 %0(i32 %.sroa.1.8.extract.trunc)
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define i32 @i32_hasher(i32 %0) #0 {
  %2 = add i32 %0, 2127912214
  %3 = shl i32 %0, 12
  %4 = add i32 %2, %3
  %5 = ashr i32 %4, 19
  %6 = xor i32 %4, %5
  %7 = xor i32 %6, -949894596
  %8 = add i32 %7, 374761393
  %9 = shl i32 %7, 5
  %10 = add i32 %8, %9
  %11 = add i32 %10, -744332180
  %12 = shl i32 %10, 9
  %13 = xor i32 %11, %12
  %14 = add i32 %13, -42973499
  %15 = shl i32 %13, 3
  %16 = add i32 %14, %15
  %17 = ashr i32 %16, 16
  %18 = xor i32 %16, %17
  %19 = xor i32 %18, -1252372727
  ret i32 %19
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define i1 @i32_eq(i32 %0, i32 %1) #0 {
  %3 = icmp eq i32 %0, %1
  ret i1 %3
}

define range(i32 0, -2147483648) i32 @string_hasher({ ptr, ptr, ptr, i32 } %0) local_unnamed_addr {
  %2 = alloca [0 x ptr], align 8
  %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract7 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 6499063144389013426
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %3 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract3, 0
  %4 = insertvalue { ptr, ptr, ptr, i32 } %3, ptr %.fca.1.extract5, 1
  %5 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %.fca.2.extract7, 2
  %6 = insertvalue { ptr, ptr, ptr, i32 } %5, i32 %offset.i.i, 3
  %7 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %8 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract3)
  %9 = sext i32 %offset.i.i to i64
  %10 = getelementptr ptr, ptr %.fca.0.extract3, i64 %9
  %11 = getelementptr i8, ptr %10, i64 120
  %12 = load ptr, ptr %11, align 8
  %13 = call ptr %12({ ptr, ptr, ptr, i32 } %6, ptr nonnull %2)
  %14 = call { ptr, ptr, ptr, i32 } %13({ ptr, ptr, ptr, i32 } %6, { ptr, ptr, ptr, i32 } %6, ptr nonnull %2)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %14, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %14, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %14, 2
  %hash_coef_ptr.i.i18 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i19 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i20 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i21 = load i64, ptr %hash_coef_ptr.i.i18, align 4
  %tbl_size.i.i22 = load i64, ptr %tbl_size_ptr.i.i19, align 4
  %offset_tbl.i.i23 = load ptr, ptr %offset_tbl_ptr.i.i20, align 8
  %product.i.i.i24 = mul i64 %hash_coef.i.i21, -7260570988945952630
  %shifted.i.i.i25 = lshr i64 %product.i.i.i24, 32
  %xored.i.i.i26 = xor i64 %shifted.i.i.i25, %product.i.i.i24
  %hash.i.i.i27 = and i64 %xored.i.i.i26, %tbl_size.i.i22
  %offset_ptr.i.i28 = getelementptr i32, ptr %offset_tbl.i.i23, i64 %hash.i.i.i27
  %offset.i.i43 = load i32, ptr %offset_ptr.i.i28, align 4
  %15 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, ptr %.fca.1.extract, 1
  %17 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %.fca.2.extract, 2
  %18 = insertvalue { ptr, ptr, ptr, i32 } %17, i32 %offset.i.i43, 3
  %19 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %20 = call ptr @llvm.invariant.start.p0(i64 48, ptr nonnull %.fca.0.extract)
  %21 = sext i32 %offset.i.i43 to i64
  %22 = getelementptr ptr, ptr %.fca.0.extract, i64 %21
  %23 = getelementptr i8, ptr %22, i64 24
  %24 = load ptr, ptr %23, align 8
  %25 = call ptr %24({ ptr, ptr, ptr, i32 } %18, ptr nonnull %2)
  %26 = call { ptr, i160 } %25({ ptr, ptr, ptr, i32 } %18, { ptr, ptr, ptr, i32 } %18, ptr nonnull %2)
  %.fca.0.extract1197 = extractvalue { ptr, i160 } %26, 0
  %27 = icmp ne ptr %.fca.0.extract1197, @nil_typ
  %28 = icmp ne ptr %.fca.0.extract1197, null
  %.not1698 = and i1 %27, %28
  br i1 %.not1698, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %1
  %29 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  br label %30

30:                                               ; preds = %.lr.ph, %30
  %.fca.0.extract11100 = phi ptr [ %.fca.0.extract1197, %.lr.ph ], [ %.fca.0.extract11, %30 ]
  %31 = phi { ptr, i160 } [ %26, %.lr.ph ], [ %51, %30 ]
  %.reg2mem26.099 = phi i32 [ 0, %.lr.ph ], [ %48, %30 ]
  %.fca.1.extract13 = extractvalue { ptr, i160 } %31, 1
  %.sroa.594.8.extract.shift = lshr i160 %.fca.1.extract13, 64
  %.sroa.594.8.extract.trunc = trunc i160 %.sroa.594.8.extract.shift to i64
  %.sroa.2.8.extract.trunc = trunc i160 %.fca.1.extract13 to i64
  %32 = inttoptr i64 %.sroa.2.8.extract.trunc to ptr
  %33 = inttoptr i64 %.sroa.594.8.extract.trunc to ptr
  %hash_coef_ptr.i.i46 = getelementptr i8, ptr %.fca.0.extract11100, i64 8
  %tbl_size_ptr.i.i47 = getelementptr i8, ptr %.fca.0.extract11100, i64 16
  %offset_tbl_ptr.i.i48 = getelementptr i8, ptr %.fca.0.extract11100, i64 40
  %hash_coef.i.i49 = load i64, ptr %hash_coef_ptr.i.i46, align 4
  %tbl_size.i.i50 = load i64, ptr %tbl_size_ptr.i.i47, align 4
  %offset_tbl.i.i51 = load ptr, ptr %offset_tbl_ptr.i.i48, align 8
  %product.i.i.i52 = mul i64 %hash_coef.i.i49, 6681222582356018452
  %shifted.i.i.i53 = lshr i64 %product.i.i.i52, 32
  %xored.i.i.i54 = xor i64 %shifted.i.i.i53, %product.i.i.i52
  %hash.i.i.i55 = and i64 %xored.i.i.i54, %tbl_size.i.i50
  %offset_ptr.i.i56 = getelementptr i32, ptr %offset_tbl.i.i51, i64 %hash.i.i.i55
  %offset.i.i57 = load i32, ptr %offset_ptr.i.i56, align 4
  %34 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11100, 0
  %35 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %32, 1
  %36 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %33, 2
  %37 = insertvalue { ptr, ptr, ptr, i32 } %36, i32 %offset.i.i57, 3
  %38 = call ptr @llvm.invariant.start.p0(i64 40, ptr nonnull %.fca.0.extract11100)
  %39 = sext i32 %offset.i.i57 to i64
  %40 = getelementptr ptr, ptr %.fca.0.extract11100, i64 %39
  %41 = getelementptr i8, ptr %40, i64 8
  %42 = load ptr, ptr %41, align 8
  %43 = call ptr %42({ ptr, ptr, ptr, i32 } %37, ptr nonnull %2)
  %44 = call i8 %43({ ptr, ptr, ptr, i32 } %37, { ptr, ptr, ptr, i32 } %37, ptr nonnull %2)
  %45 = sext i8 %44 to i32
  %46 = mul i32 %.reg2mem26.099, 31
  %47 = add i32 %46, %45
  %48 = and i32 %47, 2147483647
  %49 = load ptr, ptr %23, align 8
  %50 = call ptr %49({ ptr, ptr, ptr, i32 } %18, ptr nonnull %2)
  %51 = call { ptr, i160 } %50({ ptr, ptr, ptr, i32 } %18, { ptr, ptr, ptr, i32 } %18, ptr nonnull %2)
  %.fca.0.extract11 = extractvalue { ptr, i160 } %51, 0
  %52 = icmp ne ptr %.fca.0.extract11, @nil_typ
  %53 = icmp ne ptr %.fca.0.extract11, null
  %.not16 = and i1 %52, %53
  br i1 %.not16, label %30, label %._crit_edge

._crit_edge:                                      ; preds = %30, %1
  %.reg2mem26.0.lcssa = phi i32 [ 0, %1 ], [ %48, %30 ]
  ret i32 %.reg2mem26.0.lcssa
}

define i1 @string_eq({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1) local_unnamed_addr {
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 6499063144389013426
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %hash_coef_ptr.i.i10 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i11 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i12 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i13 = load i64, ptr %hash_coef_ptr.i.i10, align 4
  %tbl_size.i.i14 = load i64, ptr %tbl_size_ptr.i.i11, align 4
  %offset_tbl.i.i15 = load ptr, ptr %offset_tbl_ptr.i.i12, align 8
  %product.i.i.i16 = mul i64 %hash_coef.i.i13, 6499063144389013426
  %shifted.i.i.i17 = lshr i64 %product.i.i.i16, 32
  %xored.i.i.i18 = xor i64 %shifted.i.i.i17, %product.i.i.i16
  %hash.i.i.i19 = and i64 %xored.i.i.i18, %tbl_size.i.i14
  %offset_ptr.i.i20 = getelementptr i32, ptr %offset_tbl.i.i15, i64 %hash.i.i.i19
  %offset.i.i35 = load i32, ptr %offset_ptr.i.i20, align 4
  %3 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %4 = insertvalue { ptr, ptr, ptr, i32 } %3, ptr %.fca.1.extract, 1
  %5 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %.fca.2.extract, 2
  %6 = insertvalue { ptr, ptr, ptr, i32 } %5, i32 %offset.i.i35, 3
  %7 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %8 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %.fca.1.extract3, 1
  %9 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %.fca.2.extract5, 2
  %10 = insertvalue { ptr, ptr, ptr, i32 } %9, i32 %offset.i.i, 3
  %11 = alloca [1 x ptr], align 8
  store ptr @_parameterization_String, ptr %11, align 8
  %12 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %11)
  %13 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract1)
  %14 = sext i32 %offset.i.i to i64
  %15 = getelementptr ptr, ptr %.fca.0.extract1, i64 %14
  %16 = getelementptr i8, ptr %15, i64 88
  %17 = load ptr, ptr %16, align 8
  %18 = alloca { ptr }, align 8
  store ptr %.fca.0.extract, ptr %18, align 8
  %19 = call ptr %17({ ptr, ptr, ptr, i32 } %10, ptr nonnull %18)
  %20 = call i1 %19({ ptr, ptr, ptr, i32 } %10, { ptr, ptr, ptr, i32 } %10, ptr nonnull %11, { ptr, ptr, ptr, i32 } %6)
  ret i1 %20
}

define void @print_benchmark_result({ ptr, ptr, ptr, i32 } %0, i32 %1, i64 %2) local_unnamed_addr {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 6499063144389013426
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %6 = insertvalue { ptr, i160 } undef, ptr %.fca.0.extract, 0
  %7 = ptrtoint ptr %.fca.1.extract to i64
  %8 = ptrtoint ptr %.fca.2.extract to i64
  %.sroa.6.8.insert.ext = zext i32 %offset.i.i to i160
  %.sroa.6.8.insert.shift = shl nuw i160 %.sroa.6.8.insert.ext, 128
  %.sroa.5.8.insert.ext = zext i64 %8 to i160
  %.sroa.5.8.insert.shift = shl nuw nsw i160 %.sroa.5.8.insert.ext, 64
  %.sroa.5.8.insert.insert = or disjoint i160 %.sroa.6.8.insert.shift, %.sroa.5.8.insert.shift
  %.sroa.3.8.insert.ext = zext i64 %7 to i160
  %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.5.8.insert.insert, %.sroa.3.8.insert.ext
  %9 = insertvalue { ptr, i160 } %6, i160 %.sroa.3.8.insert.insert, 1
  %10 = alloca [1 x ptr], align 8
  store ptr @_parameterization_String, ptr %10, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %10)
  %12 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %13 = getelementptr i8, ptr %.fca.0.extract, i64 24
  %14 = getelementptr i8, ptr %.fca.0.extract, i64 32
  %15 = load i64, ptr %hash_coef_ptr.i.i, align 4
  %16 = load i64, ptr %tbl_size_ptr.i.i, align 4
  %17 = load ptr, ptr %13, align 8
  %18 = load ptr, ptr %14, align 8
  %result.i.i = tail call i1 %17(i64 %16, i64 %15, i64 -5126806859456325683, i64 ptrtoint (ptr @nil_typ to i64), ptr readonly %18) #3
  %19 = icmp eq ptr %.fca.0.extract, null
  %20 = or i1 %19, %result.i.i
  br i1 %20, label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit116, label %21

21:                                               ; preds = %3
  %result.i3.i = tail call i1 %17(i64 %16, i64 %15, i64 2582149688529881115, i64 ptrtoint (ptr @i8_typ to i64), ptr readonly %18) #3
  br i1 %result.i3.i, label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit116, label %22

22:                                               ; preds = %21
  %result.i4.i = tail call i1 %17(i64 %16, i64 %15, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr readonly %18) #3
  %result.i5.i = tail call i1 %17(i64 %16, i64 %15, i64 6681222582356018452, i64 ptrtoint (ptr @Character to i64), ptr readonly %18) #3
  %not.result.i4.i = xor i1 %result.i4.i, true
  %.reg2mem49.0.i = select i1 %not.result.i4.i, i1 true, i1 %result.i5.i
  br i1 %.reg2mem49.0.i, label %23, label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit116

23:                                               ; preds = %22
  %result.i6.i = tail call i1 %17(i64 %16, i64 %15, i64 -757315540097298781, i64 ptrtoint (ptr @f64_typ to i64), ptr readonly %18) #3
  br i1 %result.i6.i, label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit116, label %24

24:                                               ; preds = %23
  %not.result.i5.i = xor i1 %result.i5.i, true
  %.reg2mem47.0.i = or i1 %result.i4.i, %not.result.i5.i
  br i1 %.reg2mem47.0.i, label %25, label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit116

25:                                               ; preds = %24
  %result.i9.i = tail call i1 %17(i64 %16, i64 %15, i64 -7260840641129990118, i64 ptrtoint (ptr @Representable to i64), ptr readonly %18) #3
  %result.i9.not.i = xor i1 %result.i9.i, true
  %.reg2mem45.0.i = or i1 %result.i4.i, %result.i5.i
  %or.cond.i = select i1 %result.i9.not.i, i1 true, i1 %.reg2mem45.0.i
  br i1 %or.cond.i, label %.critedge.i, label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit116

.critedge.i:                                      ; preds = %25
  %result.i12.i = tail call i1 %17(i64 %16, i64 %15, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr readonly %18) #3
  br i1 %result.i12.i, label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit116, label %26

26:                                               ; preds = %.critedge.i
  %result.i13.i = tail call i1 %17(i64 %16, i64 %15, i64 5801531371504802705, i64 ptrtoint (ptr @bool_typ to i64), ptr readonly %18) #3
  %27 = select i1 %result.i13.i, i32 5, i32 1
  br label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit116

IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit116: ; preds = %3, %21, %22, %23, %24, %25, %.critedge.i, %26
  %.reg2mem29.0.i = phi i32 [ 9, %3 ], [ 2, %21 ], [ 3, %23 ], [ %27, %26 ], [ 7, %.critedge.i ], [ 8, %24 ], [ 4, %22 ], [ 6, %25 ]
  %28 = zext nneg i32 %.reg2mem29.0.i to i64
  %29 = getelementptr [10 x ptr], ptr @IO, i64 0, i64 %28
  %30 = getelementptr i8, ptr %29, i64 72
  %31 = load ptr, ptr %30, align 8
  call void %31(ptr nonnull %10, { ptr, i160 } %9)
  %result.i = call noalias dereferenceable_or_null(15) ptr @bump_malloc_inner(i64 noundef 15, ptr nonnull @current_ptr) #29
  store <14 x i8> <i8 32, i8 32, i8 79, i8 112, i8 101, i8 114, i8 97, i8 116, i8 105, i8 111, i8 110, i8 115, i8 58, i8 32>, ptr %result.i, align 16
  %result.i22 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %32 = alloca { ptr, ptr, ptr, i32 }, align 8
  %33 = getelementptr inbounds i8, ptr %32, i64 8
  %34 = getelementptr inbounds i8, ptr %32, i64 24
  store ptr @String, ptr %32, align 8
  store ptr %result.i22, ptr %33, align 8
  store i32 9, ptr %34, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %32)
  store ptr %result.i, ptr %result.i22, align 8
  %36 = getelementptr i8, ptr %result.i22, i64 8
  store i32 14, ptr %36, align 4
  %37 = getelementptr i8, ptr %result.i22, i64 12
  store i32 15, ptr %37, align 4
  %38 = load i160, ptr %33, align 8
  %39 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %.sroa.3.8.extract.trunc.i = trunc i160 %38 to i64
  %40 = inttoptr i64 %.sroa.3.8.extract.trunc.i to ptr
  %41 = getelementptr i8, ptr %40, i64 8
  %42 = load i32, ptr %41, align 4
  %43 = add i32 %42, 1
  %44 = sext i32 %43 to i64
  %result.i.i306 = call noalias ptr @bump_malloc_inner(i64 noundef %44, ptr nonnull @current_ptr) #29
  %45 = load i32, ptr %41, align 4
  %46 = icmp sgt i32 %45, 0
  br i1 %46, label %.lr.ph.i, label %String_c_string_.exit

.lr.ph.i:                                         ; preds = %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit116
  %47 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %48 = load ptr, ptr %40, align 8
  %49 = zext nneg i32 %45 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i306, ptr align 1 %48, i64 %49, i1 false)
  br label %String_c_string_.exit

String_c_string_.exit:                            ; preds = %.lr.ph.i, %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit116
  %50 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %51 = sext i32 %45 to i64
  %52 = getelementptr i8, ptr %result.i.i306, i64 %51
  store i8 0, ptr %52, align 1
  %puts.i = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i306)
  %53 = call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i32_string, i32 %1)
  %result.i59 = call noalias dereferenceable_or_null(15) ptr @bump_malloc_inner(i64 noundef 15, ptr nonnull @current_ptr) #29
  store <14 x i8> <i8 32, i8 32, i8 84, i8 111, i8 116, i8 97, i8 108, i8 32, i8 84, i8 105, i8 109, i8 101, i8 58, i8 32>, ptr %result.i59, align 16
  %result.i60 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %54 = alloca { ptr, ptr, ptr, i32 }, align 8
  %55 = getelementptr inbounds i8, ptr %54, i64 8
  %56 = getelementptr inbounds i8, ptr %54, i64 24
  store ptr @String, ptr %54, align 8
  store ptr %result.i60, ptr %55, align 8
  store i32 9, ptr %56, align 8
  %57 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %54)
  store ptr %result.i59, ptr %result.i60, align 8
  %58 = getelementptr i8, ptr %result.i60, i64 8
  store i32 14, ptr %58, align 4
  %59 = getelementptr i8, ptr %result.i60, i64 12
  store i32 15, ptr %59, align 4
  %60 = load i160, ptr %55, align 8
  %61 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %.sroa.3.8.extract.trunc.i231 = trunc i160 %60 to i64
  %62 = inttoptr i64 %.sroa.3.8.extract.trunc.i231 to ptr
  %63 = getelementptr i8, ptr %62, i64 8
  %64 = load i32, ptr %63, align 4
  %65 = add i32 %64, 1
  %66 = sext i32 %65 to i64
  %result.i.i320 = call noalias ptr @bump_malloc_inner(i64 noundef %66, ptr nonnull @current_ptr) #29
  %67 = load i32, ptr %63, align 4
  %68 = icmp sgt i32 %67, 0
  br i1 %68, label %.lr.ph.i321, label %String_c_string_.exit325

.lr.ph.i321:                                      ; preds = %String_c_string_.exit
  %69 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %70 = load ptr, ptr %62, align 8
  %71 = zext nneg i32 %67 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i320, ptr align 1 %70, i64 %71, i1 false)
  br label %String_c_string_.exit325

String_c_string_.exit325:                         ; preds = %.lr.ph.i321, %String_c_string_.exit
  %72 = sext i32 %67 to i64
  %73 = getelementptr i8, ptr %result.i.i320, i64 %72
  store i8 0, ptr %73, align 1
  %puts.i247 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i320)
  %74 = call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i64_string, i64 %2)
  %result.i97 = call noalias dereferenceable_or_null(4) ptr @bump_malloc_inner(i64 noundef 4, ptr nonnull @current_ptr) #29
  store <3 x i8> <i8 32, i8 109, i8 115>, ptr %result.i97, align 4
  %result.i98 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %75 = alloca { ptr, ptr, ptr, i32 }, align 8
  %76 = getelementptr inbounds i8, ptr %75, i64 8
  %77 = getelementptr inbounds i8, ptr %75, i64 24
  store ptr @String, ptr %75, align 8
  store ptr %result.i98, ptr %76, align 8
  store i32 9, ptr %77, align 8
  %78 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %75)
  store ptr %result.i97, ptr %result.i98, align 8
  %79 = getelementptr i8, ptr %result.i98, i64 8
  store i32 3, ptr %79, align 4
  %80 = getelementptr i8, ptr %result.i98, i64 12
  store i32 4, ptr %80, align 4
  %81 = load i160, ptr %76, align 8
  %82 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %.sroa.3.8.extract.trunc.i250 = trunc i160 %81 to i64
  %83 = inttoptr i64 %.sroa.3.8.extract.trunc.i250 to ptr
  %84 = getelementptr i8, ptr %83, i64 8
  %85 = load i32, ptr %84, align 4
  %86 = add i32 %85, 1
  %87 = sext i32 %86 to i64
  %result.i.i339 = call noalias ptr @bump_malloc_inner(i64 noundef %87, ptr nonnull @current_ptr) #29
  %88 = load i32, ptr %84, align 4
  %89 = icmp sgt i32 %88, 0
  br i1 %89, label %.lr.ph.i340, label %String_c_string_.exit344

.lr.ph.i340:                                      ; preds = %String_c_string_.exit325
  %90 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %91 = load ptr, ptr %83, align 8
  %92 = zext nneg i32 %88 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i339, ptr align 1 %91, i64 %92, i1 false)
  br label %String_c_string_.exit344

String_c_string_.exit344:                         ; preds = %.lr.ph.i340, %String_c_string_.exit325
  %93 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %94 = sext i32 %88 to i64
  %95 = getelementptr i8, ptr %result.i.i339, i64 %94
  store i8 0, ptr %95, align 1
  %puts.i266 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i339)
  %96 = icmp sgt i32 %1, 0
  br i1 %96, label %97, label %._crit_edge

97:                                               ; preds = %String_c_string_.exit344
  %98 = icmp sgt i64 %2, 0
  br i1 %98, label %99, label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit174

99:                                               ; preds = %97
  %100 = zext nneg i32 %1 to i64
  %101 = mul i64 %2, 1000000
  %102 = sdiv i64 %101, %100
  br label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit174

IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit174: ; preds = %97, %99
  %.reg2mem6.0 = phi i64 [ %102, %99 ], [ 0, %97 ]
  %result.i117 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  store <15 x i8> <i8 32, i8 32, i8 84, i8 105, i8 109, i8 101, i8 47, i8 79, i8 112, i8 58, i8 32, i8 32, i8 32, i8 32, i8 126>, ptr %result.i117, align 16
  %result.i118 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %103 = getelementptr inbounds i8, ptr %4, i64 8
  %104 = getelementptr inbounds i8, ptr %4, i64 24
  store ptr @String, ptr %4, align 8
  store ptr %result.i118, ptr %103, align 8
  store i32 9, ptr %104, align 8
  %105 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %4)
  store ptr %result.i117, ptr %result.i118, align 8
  %106 = getelementptr i8, ptr %result.i118, i64 8
  store i32 15, ptr %106, align 4
  %107 = getelementptr i8, ptr %result.i118, i64 12
  store i32 16, ptr %107, align 4
  %108 = load i160, ptr %103, align 8
  %109 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %.sroa.3.8.extract.trunc.i269 = trunc i160 %108 to i64
  %110 = inttoptr i64 %.sroa.3.8.extract.trunc.i269 to ptr
  %111 = getelementptr i8, ptr %110, i64 8
  %112 = load i32, ptr %111, align 4
  %113 = add i32 %112, 1
  %114 = sext i32 %113 to i64
  %result.i.i358 = call noalias ptr @bump_malloc_inner(i64 noundef %114, ptr nonnull @current_ptr) #29
  %115 = load i32, ptr %111, align 4
  %116 = icmp sgt i32 %115, 0
  br i1 %116, label %.lr.ph.i359, label %String_c_string_.exit363

.lr.ph.i359:                                      ; preds = %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit174
  %117 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %118 = load ptr, ptr %110, align 8
  %119 = zext nneg i32 %115 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i358, ptr align 1 %118, i64 %119, i1 false)
  br label %String_c_string_.exit363

String_c_string_.exit363:                         ; preds = %.lr.ph.i359, %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit174
  %120 = sext i32 %115 to i64
  %121 = getelementptr i8, ptr %result.i.i358, i64 %120
  store i8 0, ptr %121, align 1
  %puts.i285 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i358)
  %122 = call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i64_string, i64 %.reg2mem6.0)
  %result.i155 = call noalias dereferenceable_or_null(4) ptr @bump_malloc_inner(i64 noundef 4, ptr nonnull @current_ptr) #29
  store <3 x i8> <i8 32, i8 110, i8 115>, ptr %result.i155, align 4
  %result.i156 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %123 = getelementptr inbounds i8, ptr %5, i64 8
  %124 = getelementptr inbounds i8, ptr %5, i64 24
  store ptr @String, ptr %5, align 8
  store ptr %result.i156, ptr %123, align 8
  store i32 9, ptr %124, align 8
  %125 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %5)
  store ptr %result.i155, ptr %result.i156, align 8
  %126 = getelementptr i8, ptr %result.i156, i64 8
  store i32 3, ptr %126, align 4
  %127 = getelementptr i8, ptr %result.i156, i64 12
  store i32 4, ptr %127, align 4
  %128 = load i160, ptr %123, align 8
  %129 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %.sroa.3.8.extract.trunc.i288 = trunc i160 %128 to i64
  %130 = inttoptr i64 %.sroa.3.8.extract.trunc.i288 to ptr
  %131 = getelementptr i8, ptr %130, i64 8
  %132 = load i32, ptr %131, align 4
  %133 = add i32 %132, 1
  %134 = sext i32 %133 to i64
  %result.i.i377 = call noalias ptr @bump_malloc_inner(i64 noundef %134, ptr nonnull @current_ptr) #29
  %135 = load i32, ptr %131, align 4
  %136 = icmp sgt i32 %135, 0
  br i1 %136, label %.lr.ph.i378, label %String_c_string_.exit382

.lr.ph.i378:                                      ; preds = %String_c_string_.exit363
  %137 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %138 = load ptr, ptr %130, align 8
  %139 = zext nneg i32 %135 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i377, ptr align 1 %138, i64 %139, i1 false)
  br label %String_c_string_.exit382

String_c_string_.exit382:                         ; preds = %.lr.ph.i378, %String_c_string_.exit363
  %140 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %141 = sext i32 %135 to i64
  %142 = getelementptr i8, ptr %result.i.i377, i64 %141
  store i8 0, ptr %142, align 1
  %puts.i304 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i377)
  br label %._crit_edge

._crit_edge:                                      ; preds = %String_c_string_.exit344, %String_c_string_.exit382
  ret void
}

define void @benchmark_insert_sequential(i32 %0) local_unnamed_addr {
  %2 = alloca [0 x ptr], align 8
  %3 = alloca [1 x ptr], align 8
  %4 = alloca { ptr }, align 8
  %5 = alloca [1 x ptr], align 8
  %6 = alloca { ptr }, align 8
  %7 = alloca [1 x ptr], align 8
  %8 = alloca { ptr }, align 8
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = alloca [3 x ptr], align 8
  %11 = alloca [2 x ptr], align 8
  %12 = alloca { ptr, ptr }, align 8
  %13 = alloca [1 x ptr], align 8
  %14 = alloca { ptr }, align 8
  %15 = alloca [1 x ptr], align 8
  %16 = alloca { ptr }, align 8
  %17 = alloca { ptr, ptr, ptr, i32 }, align 8
  %18 = alloca [2 x ptr], align 8
  %19 = alloca { ptr, ptr }, align 8
  %20 = alloca [1 x ptr], align 8
  %21 = alloca { ptr }, align 8
  %22 = alloca [1 x ptr], align 8
  %23 = alloca { ptr }, align 8
  %oldProtect.i30 = alloca i32, align 4
  %oldProtect.i = alloca i32, align 4
  %24 = alloca { ptr, ptr, ptr, i32 }, align 8
  %25 = alloca { ptr, ptr, ptr, i32 }, align 8
  %26 = alloca { ptr, ptr, ptr, i32 }, align 8
  %result.i = tail call noalias dereferenceable_or_null(80) ptr @bump_malloc_inner(i64 noundef 80, ptr nonnull @current_ptr) #29
  store ptr @_parameterization_Ptri32, ptr %result.i, align 8
  %27 = getelementptr i8, ptr %result.i, i64 8
  store ptr @_parameterization_Ptri32, ptr %27, align 8
  %28 = getelementptr i8, ptr %result.i, i64 16
  store ptr @_parameterization_PairPtri32._Ptri32, ptr %28, align 8
  %29 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %result.i)
  %result.i27 = tail call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %oldProtect.i)
  %result.i28 = call i32 @VirtualProtect(ptr %result.i27, i64 16, i32 64, ptr nonnull %oldProtect.i) #16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %oldProtect.i)
  call void @llvm.init.trampoline(ptr %result.i27, ptr nonnull @nckuqhcbrs, ptr nonnull @i32_hasher)
  %ret.i = call ptr @llvm.adjust.trampoline(ptr readonly %result.i27) #31
  %30 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i27)
  %result.i29 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %oldProtect.i30)
  %result.i31 = call i32 @VirtualProtect(ptr %result.i29, i64 16, i32 64, ptr nonnull %oldProtect.i30) #16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %oldProtect.i30)
  call void @llvm.init.trampoline(ptr %result.i29, ptr nonnull @zztptklfit, ptr nonnull @i32_eq)
  %ret.i32 = call ptr @llvm.adjust.trampoline(ptr readonly %result.i29) #31
  %31 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i29)
  %32 = getelementptr i8, ptr %result.i, i64 64
  store ptr %ret.i, ptr %32, align 8
  %33 = getelementptr i8, ptr %result.i, i64 72
  store ptr %ret.i32, ptr %33, align 8
  %result.i.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %34 = getelementptr i8, ptr %result.i.i, i64 16
  store ptr @_parameterization_Nil, ptr %34, align 8
  %result.i4.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %35 = getelementptr i8, ptr %result.i4.i, i64 16
  store ptr @_parameterization_Ptri32, ptr %35, align 8
  %36 = getelementptr i8, ptr %result.i4.i, i64 8
  store ptr @_parameterization_Ptri32, ptr %36, align 8
  %37 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i4.i)
  store ptr @Entry, ptr %result.i4.i, align 8
  %38 = getelementptr i8, ptr %result.i.i, i64 8
  store ptr %result.i4.i, ptr %38, align 8
  %39 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i)
  store ptr @union_typ, ptr %result.i.i, align 8
  %result.i5.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i, ptr %result.i5.i, align 8
  %40 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i5.i)
  %41 = getelementptr i8, ptr %result.i5.i, i64 16
  store i32 16, ptr %41, align 4
  %42 = getelementptr i8, ptr %result.i5.i, i64 20
  store i32 16, ptr %42, align 4
  %result.i.i.i = call noalias dereferenceable_or_null(512) ptr @bump_malloc_inner(i64 noundef 512, ptr nonnull @current_ptr) #29
  %43 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %44 = getelementptr i8, ptr %result.i5.i, i64 8
  store ptr %result.i.i.i, ptr %44, align 8
  %45 = getelementptr i8, ptr %result.i, i64 24
  store ptr @Array, ptr %45, align 8
  %46 = getelementptr i8, ptr %result.i, i64 32
  store ptr %result.i5.i, ptr %46, align 8
  %47 = getelementptr i8, ptr %result.i, i64 40
  %48 = getelementptr i8, ptr %result.i, i64 48
  store i32 9, ptr %48, align 4
  %49 = getelementptr i8, ptr %result.i, i64 56
  %50 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %51 = getelementptr i8, ptr %result.i, i64 60
  %52 = call i64 @clock()
  %53 = icmp sgt i32 %0, 0
  br i1 %53, label %._crit_edge.preheader, label %839

._crit_edge.preheader:                            ; preds = %1
  %54 = getelementptr inbounds i8, ptr %17, i64 8
  %55 = getelementptr inbounds i8, ptr %17, i64 24
  %56 = getelementptr inbounds i8, ptr %17, i64 16
  %57 = getelementptr inbounds i8, ptr %18, i64 8
  %58 = getelementptr inbounds i8, ptr %19, i64 8
  %59 = getelementptr inbounds i8, ptr %9, i64 8
  %60 = getelementptr inbounds i8, ptr %9, i64 24
  %61 = getelementptr inbounds i8, ptr %9, i64 16
  %62 = getelementptr inbounds i8, ptr %10, i64 8
  %63 = getelementptr inbounds i8, ptr %10, i64 16
  %64 = getelementptr inbounds i8, ptr %11, i64 8
  %65 = getelementptr inbounds i8, ptr %12, i64 8
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.preheader, %HashMap_insert_internal_keyK_valueV_hashPtri32.exit
  %.reg2mem46.082 = phi i32 [ %66, %HashMap_insert_internal_keyK_valueV_hashPtri32.exit ], [ 0, %._crit_edge.preheader ]
  %66 = add nuw nsw i32 %.reg2mem46.082, 1
  %.sroa.020.0.insert.ext = zext nneg i32 %.reg2mem46.082 to i160
  %67 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.020.0.insert.ext, 1
  %.sroa.017.0.insert.ext = zext nneg i32 %66 to i160
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %68 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %69 = load ptr, ptr %45, align 8
  %70 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %69, 0
  %71 = load ptr, ptr %46, align 8
  %72 = insertvalue { ptr, ptr, ptr, i32 } %70, ptr %71, 1
  %73 = load ptr, ptr %47, align 8
  %74 = insertvalue { ptr, ptr, ptr, i32 } %72, ptr %73, 2
  %75 = load i32, ptr %48, align 4
  %76 = insertvalue { ptr, ptr, ptr, i32 } %74, i32 %75, 3
  %hash_coef_ptr.i.i42.i = getelementptr i8, ptr %69, i64 8
  %tbl_size_ptr.i.i43.i = getelementptr i8, ptr %69, i64 16
  %offset_tbl_ptr.i.i44.i = getelementptr i8, ptr %69, i64 40
  %hash_coef.i.i45.i = load i64, ptr %hash_coef_ptr.i.i42.i, align 4
  %tbl_size.i.i46.i = load i64, ptr %tbl_size_ptr.i.i43.i, align 4
  %offset_tbl.i.i47.i = load ptr, ptr %offset_tbl_ptr.i.i44.i, align 8
  %product.i.i.i48.i = mul i64 %hash_coef.i.i45.i, -5261542750394134544
  %shifted.i.i.i49.i = lshr i64 %product.i.i.i48.i, 32
  %xored.i.i.i50.i = xor i64 %shifted.i.i.i49.i, %product.i.i.i48.i
  %hash.i.i.i51.i = and i64 %xored.i.i.i50.i, %tbl_size.i.i46.i
  %offset_ptr.i.i52.i = getelementptr i32, ptr %offset_tbl.i.i47.i, i64 %hash.i.i.i51.i
  %offset.i.i53.i = load i32, ptr %offset_ptr.i.i52.i, align 4
  %eq.i.i = icmp eq i32 %75, %offset.i.i53.i
  call void @llvm.assume(i1 %eq.i.i) #30
  %77 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %78 = call ptr @llvm.invariant.start.p0(i64 600, ptr %69)
  %79 = sext i32 %75 to i64
  %80 = getelementptr ptr, ptr %69, i64 %79
  %81 = getelementptr i8, ptr %80, i64 64
  %82 = load ptr, ptr %81, align 8
  %83 = call ptr %82({ ptr, ptr, ptr, i32 } %76, ptr nonnull %2)
  %84 = call i32 %83({ ptr, ptr, ptr, i32 } %76, { ptr, ptr, ptr, i32 } %76, ptr nonnull %2)
  %85 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %86 = load ptr, ptr %45, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %86, 0
  %88 = load ptr, ptr %46, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } %87, ptr %88, 1
  %90 = load ptr, ptr %47, align 8
  %91 = insertvalue { ptr, ptr, ptr, i32 } %89, ptr %90, 2
  %92 = load i32, ptr %48, align 4
  %93 = insertvalue { ptr, ptr, ptr, i32 } %91, i32 %92, 3
  %hash_coef_ptr.i.i56.i = getelementptr i8, ptr %86, i64 8
  %tbl_size_ptr.i.i57.i = getelementptr i8, ptr %86, i64 16
  %offset_tbl_ptr.i.i58.i = getelementptr i8, ptr %86, i64 40
  %hash_coef.i.i59.i = load i64, ptr %hash_coef_ptr.i.i56.i, align 4
  %tbl_size.i.i60.i = load i64, ptr %tbl_size_ptr.i.i57.i, align 4
  %offset_tbl.i.i61.i = load ptr, ptr %offset_tbl_ptr.i.i58.i, align 8
  %product.i.i.i62.i = mul i64 %hash_coef.i.i59.i, -5261542750394134544
  %shifted.i.i.i63.i = lshr i64 %product.i.i.i62.i, 32
  %xored.i.i.i64.i = xor i64 %shifted.i.i.i63.i, %product.i.i.i62.i
  %hash.i.i.i65.i = and i64 %xored.i.i.i64.i, %tbl_size.i.i60.i
  %offset_ptr.i.i66.i = getelementptr i32, ptr %offset_tbl.i.i61.i, i64 %hash.i.i.i65.i
  %offset.i.i67.i = load i32, ptr %offset_ptr.i.i66.i, align 4
  %eq.i70.i = icmp eq i32 %92, %offset.i.i67.i
  call void @llvm.assume(i1 %eq.i70.i) #30
  %94 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %95 = call ptr @llvm.invariant.start.p0(i64 600, ptr %86)
  %96 = sext i32 %92 to i64
  %97 = getelementptr ptr, ptr %86, i64 %96
  %98 = getelementptr i8, ptr %97, i64 64
  %99 = load ptr, ptr %98, align 8
  %100 = call ptr %99({ ptr, ptr, ptr, i32 } %93, ptr nonnull %2)
  %101 = call i32 %100({ ptr, ptr, ptr, i32 } %93, { ptr, ptr, ptr, i32 } %93, ptr nonnull %2)
  %102 = icmp eq i32 %101, 0
  %103 = load i32, ptr %51, align 4
  %104 = mul i32 %103, 10
  %105 = add i32 %104, 10
  %106 = mul i32 %84, 7
  %107 = icmp sge i32 %105, %106
  %108 = or i1 %102, %107
  br i1 %108, label %109, label %HashMap_insert_keyK_valueV.exit

109:                                              ; preds = %._crit_edge
  %110 = shl i32 %84, 1
  %111 = call i32 @llvm.smax.i32(i32 %110, i32 16)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %20)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %21)
  %112 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %113 = load ptr, ptr %45, align 8
  %114 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %113, 0
  %115 = load ptr, ptr %46, align 8
  %116 = insertvalue { ptr, ptr, ptr, i32 } %114, ptr %115, 1
  %117 = load ptr, ptr %47, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } %116, ptr %117, 2
  %119 = load i32, ptr %48, align 4
  %120 = insertvalue { ptr, ptr, ptr, i32 } %118, i32 %119, 3
  %hash_coef_ptr.i.i39.i = getelementptr i8, ptr %113, i64 8
  %tbl_size_ptr.i.i40.i = getelementptr i8, ptr %113, i64 16
  %offset_tbl_ptr.i.i41.i = getelementptr i8, ptr %113, i64 40
  %hash_coef.i.i42.i = load i64, ptr %hash_coef_ptr.i.i39.i, align 4
  %tbl_size.i.i43.i = load i64, ptr %tbl_size_ptr.i.i40.i, align 4
  %offset_tbl.i.i44.i = load ptr, ptr %offset_tbl_ptr.i.i41.i, align 8
  %product.i.i.i45.i = mul i64 %hash_coef.i.i42.i, -5261542750394134544
  %shifted.i.i.i46.i = lshr i64 %product.i.i.i45.i, 32
  %xored.i.i.i47.i = xor i64 %shifted.i.i.i46.i, %product.i.i.i45.i
  %hash.i.i.i48.i = and i64 %xored.i.i.i47.i, %tbl_size.i.i43.i
  %offset_ptr.i.i49.i = getelementptr i32, ptr %offset_tbl.i.i44.i, i64 %hash.i.i.i48.i
  %offset.i.i50.i = load i32, ptr %offset_ptr.i.i49.i, align 4
  %eq.i.i263 = icmp eq i32 %119, %offset.i.i50.i
  call void @llvm.assume(i1 %eq.i.i263) #30
  %121 = load ptr, ptr %result.i, align 8
  %122 = load ptr, ptr %27, align 8
  %result.i.i264 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %123 = getelementptr i8, ptr %result.i.i264, i64 16
  store ptr @_parameterization_Nil, ptr %123, align 8
  %result.i66.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %124 = getelementptr i8, ptr %result.i66.i, i64 16
  store ptr %122, ptr %124, align 8
  %125 = getelementptr i8, ptr %result.i66.i, i64 8
  store ptr %121, ptr %125, align 8
  %126 = getelementptr i8, ptr %result.i66.i, i64 24
  store ptr null, ptr %126, align 8
  %127 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i66.i)
  store ptr @Entry, ptr %result.i66.i, align 8
  %128 = getelementptr i8, ptr %result.i.i264, i64 8
  store ptr %result.i66.i, ptr %128, align 8
  %129 = getelementptr i8, ptr %result.i.i264, i64 24
  store ptr null, ptr %129, align 8
  %130 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i264)
  store ptr @union_typ, ptr %result.i.i264, align 8
  %result.i67.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i264, ptr %result.i67.i, align 8
  %131 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i67.i)
  %132 = getelementptr i8, ptr %result.i67.i, i64 16
  store i32 %111, ptr %132, align 4
  %133 = getelementptr i8, ptr %result.i67.i, i64 20
  store i32 %111, ptr %133, align 4
  %134 = zext nneg i32 %111 to i64
  %135 = shl nuw nsw i64 %134, 5
  %result.i.i.i265 = call noalias ptr @bump_malloc_inner(i64 noundef %135, ptr nonnull @current_ptr) #29
  %136 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %137 = getelementptr i8, ptr %result.i67.i, i64 8
  store ptr %result.i.i.i265, ptr %137, align 8
  store ptr @Array, ptr %45, align 8
  store ptr %result.i67.i, ptr %46, align 8
  store i32 9, ptr %48, align 4
  store i32 0, ptr %49, align 4
  store i32 0, ptr %51, align 4
  %invariant.gep.i = getelementptr i8, ptr %113, i64 64
  %138 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %139 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %140 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %113)
  %141 = sext i32 %119 to i64
  %gep.i359 = getelementptr ptr, ptr %invariant.gep.i, i64 %141
  %142 = load ptr, ptr %gep.i359, align 8
  %143 = call ptr %142({ ptr, ptr, ptr, i32 } %120, ptr nonnull %2)
  %144 = call i32 %143({ ptr, ptr, ptr, i32 } %120, { ptr, ptr, ptr, i32 } %120, ptr nonnull %2)
  %145 = icmp sgt i32 %144, 0
  br i1 %145, label %.lr.ph, label %HashMap_resize_new_capacityPtri32.exit

.lr.ph:                                           ; preds = %109
  %invariant.gep172.i = getelementptr i8, ptr %113, i64 120
  %146 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %gep173.i = getelementptr ptr, ptr %invariant.gep172.i, i64 %141
  br label %147

147:                                              ; preds = %.lr.ph, %._crit_edge3.i
  %.reg2mem31.0.i360 = phi i32 [ 0, %.lr.ph ], [ %414, %._crit_edge3.i ]
  store ptr @_parameterization_Ptri32, ptr %20, align 8
  %148 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %20)
  %149 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %113)
  %150 = load ptr, ptr %gep173.i, align 8
  store ptr @i32_typ, ptr %21, align 8
  %151 = call ptr %150({ ptr, ptr, ptr, i32 } %120, ptr nonnull %21)
  %152 = call { ptr, i160 } %151({ ptr, ptr, ptr, i32 } %120, { ptr, ptr, ptr, i32 } %120, ptr nonnull %20, i32 %.reg2mem31.0.i360)
  %.fca.0.extract30.i = extractvalue { ptr, i160 } %152, 0
  %153 = icmp ne ptr %.fca.0.extract30.i, @nil_typ
  %154 = icmp ne ptr %.fca.0.extract30.i, null
  %.not37.i = and i1 %153, %154
  br i1 %.not37.i, label %155, label %._crit_edge3.i

155:                                              ; preds = %147
  %.fca.1.extract32.i = extractvalue { ptr, i160 } %152, 1
  %.sroa.5164.8.extract.trunc.i = trunc i160 %.fca.1.extract32.i to i64
  %156 = inttoptr i64 %.sroa.5164.8.extract.trunc.i to ptr
  %.sroa.9.8.extract.shift.i = lshr i160 %.fca.1.extract32.i, 64
  %.sroa.9.8.extract.trunc.i = trunc i160 %.sroa.9.8.extract.shift.i to i64
  %157 = inttoptr i64 %.sroa.9.8.extract.trunc.i to ptr
  %hash_coef_ptr.i.i83.i = getelementptr i8, ptr %.fca.0.extract30.i, i64 8
  %tbl_size_ptr.i.i84.i = getelementptr i8, ptr %.fca.0.extract30.i, i64 16
  %offset_tbl_ptr.i.i85.i = getelementptr i8, ptr %.fca.0.extract30.i, i64 40
  %hash_coef.i.i86.i = load i64, ptr %hash_coef_ptr.i.i83.i, align 4
  %tbl_size.i.i87.i = load i64, ptr %tbl_size_ptr.i.i84.i, align 4
  %offset_tbl.i.i88.i = load ptr, ptr %offset_tbl_ptr.i.i85.i, align 8
  %product.i.i.i89.i = mul i64 %hash_coef.i.i86.i, 4015701072841558310
  %shifted.i.i.i90.i = lshr i64 %product.i.i.i89.i, 32
  %xored.i.i.i91.i = xor i64 %shifted.i.i.i90.i, %product.i.i.i89.i
  %hash.i.i.i92.i = and i64 %xored.i.i.i91.i, %tbl_size.i.i87.i
  %offset_ptr.i.i93.i = getelementptr i32, ptr %offset_tbl.i.i88.i, i64 %hash.i.i.i92.i
  %offset.i.i94.i = load i32, ptr %offset_ptr.i.i93.i, align 4
  %158 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract30.i, 0
  %159 = insertvalue { ptr, ptr, ptr, i32 } %158, ptr %156, 1
  %160 = insertvalue { ptr, ptr, ptr, i32 } %159, ptr %157, 2
  %161 = insertvalue { ptr, ptr, ptr, i32 } %160, i32 %offset.i.i94.i, 3
  %162 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %163 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %164 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract30.i)
  %165 = sext i32 %offset.i.i94.i to i64
  %166 = getelementptr ptr, ptr %.fca.0.extract30.i, i64 %165
  %167 = getelementptr i8, ptr %166, i64 56
  %168 = load ptr, ptr %167, align 8
  %169 = call ptr %168({ ptr, ptr, ptr, i32 } %161, ptr nonnull %2)
  %170 = call { ptr, i160 } %169({ ptr, ptr, ptr, i32 } %161, { ptr, ptr, ptr, i32 } %161, ptr nonnull %2)
  %.fca.0.extract23.i = extractvalue { ptr, i160 } %170, 0
  %171 = getelementptr i8, ptr %.fca.0.extract23.i, i64 8
  %172 = getelementptr i8, ptr %.fca.0.extract23.i, i64 16
  %173 = getelementptr i8, ptr %.fca.0.extract23.i, i64 24
  %174 = getelementptr i8, ptr %.fca.0.extract23.i, i64 32
  %175 = load i64, ptr %171, align 4
  %176 = load i64, ptr %172, align 4
  %177 = load ptr, ptr %173, align 8
  %178 = load ptr, ptr %174, align 8
  %result.i96.i = call i1 %177(i64 %176, i64 %175, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %178) #3
  br i1 %result.i96.i, label %._crit_edge3.i, label %179

179:                                              ; preds = %155
  %result.i97.i = call i1 %177(i64 %176, i64 %175, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr readonly %178) #3
  br i1 %result.i97.i, label %180, label %._crit_edge3.i

180:                                              ; preds = %179
  %181 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %182 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %183 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract30.i)
  %184 = getelementptr i8, ptr %166, i64 48
  %185 = load ptr, ptr %184, align 8
  %186 = call ptr %185({ ptr, ptr, ptr, i32 } %161, ptr nonnull %2)
  %187 = call { ptr, i160 } %186({ ptr, ptr, ptr, i32 } %161, { ptr, ptr, ptr, i32 } %161, ptr nonnull %2)
  %188 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %189 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %190 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract30.i)
  %191 = getelementptr i8, ptr %166, i64 64
  %192 = load ptr, ptr %191, align 8
  %193 = call ptr %192({ ptr, ptr, ptr, i32 } %161, ptr nonnull %2)
  %194 = call i32 %193({ ptr, ptr, ptr, i32 } %161, { ptr, ptr, ptr, i32 } %161, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %9)
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %10)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %11)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %12)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %195 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %196 = load ptr, ptr %45, align 8
  %197 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %196, 0
  %198 = load ptr, ptr %46, align 8
  %199 = insertvalue { ptr, ptr, ptr, i32 } %197, ptr %198, 1
  %200 = load ptr, ptr %47, align 8
  %201 = insertvalue { ptr, ptr, ptr, i32 } %199, ptr %200, 2
  %202 = load i32, ptr %48, align 4
  %203 = insertvalue { ptr, ptr, ptr, i32 } %201, i32 %202, 3
  %hash_coef_ptr.i.i51.i568 = getelementptr i8, ptr %196, i64 8
  %tbl_size_ptr.i.i52.i569 = getelementptr i8, ptr %196, i64 16
  %offset_tbl_ptr.i.i53.i570 = getelementptr i8, ptr %196, i64 40
  %hash_coef.i.i54.i571 = load i64, ptr %hash_coef_ptr.i.i51.i568, align 4
  %tbl_size.i.i55.i572 = load i64, ptr %tbl_size_ptr.i.i52.i569, align 4
  %offset_tbl.i.i56.i573 = load ptr, ptr %offset_tbl_ptr.i.i53.i570, align 8
  %product.i.i.i57.i574 = mul i64 %hash_coef.i.i54.i571, -5261542750394134544
  %shifted.i.i.i58.i575 = lshr i64 %product.i.i.i57.i574, 32
  %xored.i.i.i59.i576 = xor i64 %shifted.i.i.i58.i575, %product.i.i.i57.i574
  %hash.i.i.i60.i577 = and i64 %xored.i.i.i59.i576, %tbl_size.i.i55.i572
  %offset_ptr.i.i61.i578 = getelementptr i32, ptr %offset_tbl.i.i56.i573, i64 %hash.i.i.i60.i577
  %offset.i.i62.i579 = load i32, ptr %offset_ptr.i.i61.i578, align 4
  %eq.i.i580 = icmp eq i32 %202, %offset.i.i62.i579
  call void @llvm.assume(i1 %eq.i.i580) #30
  %204 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %205 = call ptr @llvm.invariant.start.p0(i64 600, ptr %196)
  %206 = sext i32 %202 to i64
  %207 = getelementptr ptr, ptr %196, i64 %206
  %208 = getelementptr i8, ptr %207, i64 64
  %209 = load ptr, ptr %208, align 8
  %210 = call ptr %209({ ptr, ptr, ptr, i32 } %203, ptr nonnull %2)
  %211 = call i32 %210({ ptr, ptr, ptr, i32 } %203, { ptr, ptr, ptr, i32 } %203, ptr nonnull %2)
  %212 = add i32 %211, -1
  %213 = and i32 %212, %194
  %214 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  br label %215

215:                                              ; preds = %264, %180
  %spec.store.select.i615624 = phi i32 [ %spec.store.select.i615, %264 ], [ -1, %180 ]
  %.0..0..0..i581 = phi i32 [ %282, %264 ], [ %213, %180 ]
  %216 = load ptr, ptr %45, align 8
  %217 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %216, 0
  %218 = load ptr, ptr %46, align 8
  %219 = insertvalue { ptr, ptr, ptr, i32 } %217, ptr %218, 1
  %220 = load ptr, ptr %47, align 8
  %221 = insertvalue { ptr, ptr, ptr, i32 } %219, ptr %220, 2
  %222 = load i32, ptr %48, align 4
  %223 = insertvalue { ptr, ptr, ptr, i32 } %221, i32 %222, 3
  %hash_coef_ptr.i.i65.i582 = getelementptr i8, ptr %216, i64 8
  %tbl_size_ptr.i.i66.i583 = getelementptr i8, ptr %216, i64 16
  %offset_tbl_ptr.i.i67.i584 = getelementptr i8, ptr %216, i64 40
  %hash_coef.i.i68.i585 = load i64, ptr %hash_coef_ptr.i.i65.i582, align 4
  %tbl_size.i.i69.i586 = load i64, ptr %tbl_size_ptr.i.i66.i583, align 4
  %offset_tbl.i.i70.i587 = load ptr, ptr %offset_tbl_ptr.i.i67.i584, align 8
  %product.i.i.i71.i588 = mul i64 %hash_coef.i.i68.i585, -5261542750394134544
  %shifted.i.i.i72.i589 = lshr i64 %product.i.i.i71.i588, 32
  %xored.i.i.i73.i590 = xor i64 %shifted.i.i.i72.i589, %product.i.i.i71.i588
  %hash.i.i.i74.i591 = and i64 %xored.i.i.i73.i590, %tbl_size.i.i69.i586
  %offset_ptr.i.i75.i592 = getelementptr i32, ptr %offset_tbl.i.i70.i587, i64 %hash.i.i.i74.i591
  %offset.i.i76.i593 = load i32, ptr %offset_ptr.i.i75.i592, align 4
  %eq.i79.i594 = icmp eq i32 %222, %offset.i.i76.i593
  call void @llvm.assume(i1 %eq.i79.i594) #30
  %224 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  store ptr @_parameterization_Ptri32, ptr %3, align 8
  %225 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %3)
  %226 = call ptr @llvm.invariant.start.p0(i64 600, ptr %216)
  %227 = sext i32 %222 to i64
  %228 = getelementptr ptr, ptr %216, i64 %227
  %229 = getelementptr i8, ptr %228, i64 120
  %230 = load ptr, ptr %229, align 8
  store ptr @i32_typ, ptr %4, align 8
  %231 = call ptr %230({ ptr, ptr, ptr, i32 } %223, ptr nonnull %4)
  %232 = call { ptr, i160 } %231({ ptr, ptr, ptr, i32 } %223, { ptr, ptr, ptr, i32 } %223, ptr nonnull %3, i32 %.0..0..0..i581)
  %.fca.0.extract36.i595 = extractvalue { ptr, i160 } %232, 0
  %233 = icmp eq ptr %.fca.0.extract36.i595, @nil_typ
  %234 = icmp eq ptr %.fca.0.extract36.i595, null
  %235 = or i1 %233, %234
  br i1 %235, label %283, label %236

236:                                              ; preds = %215
  %.fca.1.extract38.i596 = extractvalue { ptr, i160 } %232, 1
  %.sroa.5.8.extract.shift.i597 = lshr i160 %.fca.1.extract38.i596, 64
  %.sroa.5.8.extract.trunc.i598 = trunc i160 %.sroa.5.8.extract.shift.i597 to i64
  %.sroa.2.8.extract.trunc165.i599 = trunc i160 %.fca.1.extract38.i596 to i64
  %237 = inttoptr i64 %.sroa.2.8.extract.trunc165.i599 to ptr
  %238 = inttoptr i64 %.sroa.5.8.extract.trunc.i598 to ptr
  %hash_coef_ptr.i.i81.i600 = getelementptr i8, ptr %.fca.0.extract36.i595, i64 8
  %tbl_size_ptr.i.i82.i601 = getelementptr i8, ptr %.fca.0.extract36.i595, i64 16
  %offset_tbl_ptr.i.i83.i602 = getelementptr i8, ptr %.fca.0.extract36.i595, i64 40
  %hash_coef.i.i84.i603 = load i64, ptr %hash_coef_ptr.i.i81.i600, align 4
  %tbl_size.i.i85.i604 = load i64, ptr %tbl_size_ptr.i.i82.i601, align 4
  %offset_tbl.i.i86.i605 = load ptr, ptr %offset_tbl_ptr.i.i83.i602, align 8
  %product.i.i.i87.i606 = mul i64 %hash_coef.i.i84.i603, 4015701072841558310
  %shifted.i.i.i88.i607 = lshr i64 %product.i.i.i87.i606, 32
  %xored.i.i.i89.i608 = xor i64 %shifted.i.i.i88.i607, %product.i.i.i87.i606
  %hash.i.i.i90.i609 = and i64 %xored.i.i.i89.i608, %tbl_size.i.i85.i604
  %offset_ptr.i.i91.i610 = getelementptr i32, ptr %offset_tbl.i.i86.i605, i64 %hash.i.i.i90.i609
  %offset.i.i92.i611 = load i32, ptr %offset_ptr.i.i91.i610, align 4
  %239 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract36.i595, 0
  %240 = insertvalue { ptr, ptr, ptr, i32 } %239, ptr %237, 1
  %241 = insertvalue { ptr, ptr, ptr, i32 } %240, ptr %238, 2
  %242 = insertvalue { ptr, ptr, ptr, i32 } %241, i32 %offset.i.i92.i611, 3
  %243 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %244 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %245 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i595)
  %246 = sext i32 %offset.i.i92.i611 to i64
  %247 = getelementptr ptr, ptr %.fca.0.extract36.i595, i64 %246
  %248 = getelementptr i8, ptr %247, i64 64
  %249 = load ptr, ptr %248, align 8
  %250 = call ptr %249({ ptr, ptr, ptr, i32 } %242, ptr nonnull %2)
  %251 = call i32 %250({ ptr, ptr, ptr, i32 } %242, { ptr, ptr, ptr, i32 } %242, ptr nonnull %2)
  %252 = icmp eq i32 %251, %194
  %253 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %254 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %255 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i595)
  %256 = getelementptr i8, ptr %247, i64 48
  %257 = load ptr, ptr %256, align 8
  %258 = call ptr %257({ ptr, ptr, ptr, i32 } %242, ptr nonnull %2)
  %259 = call { ptr, i160 } %258({ ptr, ptr, ptr, i32 } %242, { ptr, ptr, ptr, i32 } %242, ptr nonnull %2)
  %260 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %261 = load ptr, ptr %33, align 8
  %262 = call i1 %261({ ptr, i160 } %259, { ptr, i160 } %187)
  %263 = and i1 %252, %262
  br i1 %263, label %HashMap_find_slot_keyK_hashPtri32.exit616, label %264

264:                                              ; preds = %236
  %265 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %266 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %267 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i595)
  %268 = getelementptr i8, ptr %247, i64 56
  %269 = load ptr, ptr %268, align 8
  %270 = call ptr %269({ ptr, ptr, ptr, i32 } %242, ptr nonnull %2)
  %271 = call { ptr, i160 } %270({ ptr, ptr, ptr, i32 } %242, { ptr, ptr, ptr, i32 } %242, ptr nonnull %2)
  %.fca.0.extract15.i612 = extractvalue { ptr, i160 } %271, 0
  %272 = getelementptr i8, ptr %.fca.0.extract15.i612, i64 8
  %273 = getelementptr i8, ptr %.fca.0.extract15.i612, i64 16
  %274 = getelementptr i8, ptr %.fca.0.extract15.i612, i64 24
  %275 = getelementptr i8, ptr %.fca.0.extract15.i612, i64 32
  %276 = load i64, ptr %272, align 4
  %277 = load i64, ptr %273, align 4
  %278 = load ptr, ptr %274, align 8
  %279 = load ptr, ptr %275, align 8
  %result.i.i613 = call i1 %278(i64 %277, i64 %276, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %279) #3
  %280 = icmp eq i32 %spec.store.select.i615624, -1
  %or.cond.i614 = select i1 %result.i.i613, i1 %280, i1 false
  %spec.store.select.i615 = select i1 %or.cond.i614, i32 %.0..0..0..i581, i32 %spec.store.select.i615624
  %281 = add i32 %.0..0..0..i581, 1
  %282 = and i32 %281, %212
  br label %215

283:                                              ; preds = %215
  %284 = icmp eq i32 %spec.store.select.i615624, -1
  %.pre638 = select i1 %284, i32 %.0..0..0..i581, i32 %spec.store.select.i615624
  br label %HashMap_find_slot_keyK_hashPtri32.exit616

HashMap_find_slot_keyK_hashPtri32.exit616:        ; preds = %236, %283
  %285 = phi i32 [ %.pre638, %283 ], [ %.0..0..0..i581, %236 ]
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  %286 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %287 = load ptr, ptr %45, align 8
  %288 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %287, 0
  %289 = load ptr, ptr %46, align 8
  %290 = insertvalue { ptr, ptr, ptr, i32 } %288, ptr %289, 1
  %291 = load ptr, ptr %47, align 8
  %292 = insertvalue { ptr, ptr, ptr, i32 } %290, ptr %291, 2
  %293 = load i32, ptr %48, align 4
  %294 = insertvalue { ptr, ptr, ptr, i32 } %292, i32 %293, 3
  %hash_coef_ptr.i.i56.i390 = getelementptr i8, ptr %287, i64 8
  %tbl_size_ptr.i.i57.i391 = getelementptr i8, ptr %287, i64 16
  %offset_tbl_ptr.i.i58.i392 = getelementptr i8, ptr %287, i64 40
  %hash_coef.i.i59.i393 = load i64, ptr %hash_coef_ptr.i.i56.i390, align 4
  %tbl_size.i.i60.i394 = load i64, ptr %tbl_size_ptr.i.i57.i391, align 4
  %offset_tbl.i.i61.i395 = load ptr, ptr %offset_tbl_ptr.i.i58.i392, align 8
  %product.i.i.i62.i396 = mul i64 %hash_coef.i.i59.i393, -5261542750394134544
  %shifted.i.i.i63.i397 = lshr i64 %product.i.i.i62.i396, 32
  %xored.i.i.i64.i398 = xor i64 %shifted.i.i.i63.i397, %product.i.i.i62.i396
  %hash.i.i.i65.i399 = and i64 %xored.i.i.i64.i398, %tbl_size.i.i60.i394
  %offset_ptr.i.i66.i400 = getelementptr i32, ptr %offset_tbl.i.i61.i395, i64 %hash.i.i.i65.i399
  %offset.i.i67.i401 = load i32, ptr %offset_ptr.i.i66.i400, align 4
  %eq.i.i402 = icmp eq i32 %293, %offset.i.i67.i401
  call void @llvm.assume(i1 %eq.i.i402) #30
  store ptr @_parameterization_Ptri32, ptr %7, align 8
  %295 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %7)
  %296 = call ptr @llvm.invariant.start.p0(i64 600, ptr %287)
  %297 = sext i32 %293 to i64
  %298 = getelementptr ptr, ptr %287, i64 %297
  %299 = getelementptr i8, ptr %298, i64 120
  %300 = load ptr, ptr %299, align 8
  store ptr @i32_typ, ptr %8, align 8
  %301 = call ptr %300({ ptr, ptr, ptr, i32 } %294, ptr nonnull %8)
  %302 = call { ptr, i160 } %301({ ptr, ptr, ptr, i32 } %294, { ptr, ptr, ptr, i32 } %294, ptr nonnull %7, i32 %285)
  %.fca.0.extract2.i403 = extractvalue { ptr, i160 } %302, 0
  %303 = load ptr, ptr %result.i, align 8
  %304 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %305 = load ptr, ptr %27, align 8
  %306 = load ptr, ptr %303, align 8
  %307 = getelementptr i8, ptr %306, i64 48
  %308 = load ptr, ptr %307, align 8
  %309 = call { i64, i64 } %308(ptr nonnull %303)
  %310 = extractvalue { i64, i64 } %309, 0
  %311 = extractvalue { i64, i64 } %309, 1
  %312 = call i64 @llvm.umax.i64(i64 %311, i64 8)
  %313 = urem i64 16, %311
  %314 = icmp eq i64 %313, 0
  %315 = sub i64 %311, %313
  %316 = select i1 %314, i64 0, i64 %315
  %317 = add i64 %316, %310
  %318 = add i64 %317, 16
  %319 = and i64 %317, 7
  %320 = icmp eq i64 %319, 0
  %321 = sub nuw nsw i64 40, %319
  %322 = select i1 %320, i64 32, i64 %321
  %323 = add i64 %318, %322
  %324 = and i64 %323, 3
  %325 = icmp eq i64 %324, 0
  %326 = sub nuw nsw i64 8, %324
  %327 = select i1 %325, i64 4, i64 %326
  %328 = add i64 %327, %323
  %329 = urem i64 %328, %312
  %330 = icmp eq i64 %329, 0
  %331 = sub i64 %312, %329
  %332 = select i1 %330, i64 0, i64 %331
  %333 = add i64 %328, %332
  %result.i.i404 = call noalias ptr @bump_malloc_inner(i64 noundef %333, ptr nonnull @current_ptr) #29
  store ptr %303, ptr %result.i.i404, align 8
  %334 = getelementptr i8, ptr %result.i.i404, i64 8
  store ptr %305, ptr %334, align 8
  %335 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i.i404)
  store ptr @Entry, ptr %9, align 8
  store ptr %result.i.i404, ptr %59, align 8
  store i32 9, ptr %60, align 8
  %336 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %9)
  %337 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Entry, ptr undef, ptr undef, i32 undef }, ptr %result.i.i404, 1
  %338 = insertvalue { ptr, ptr, ptr, i32 } %337, ptr undef, 2
  %339 = insertvalue { ptr, ptr, ptr, i32 } %338, i32 9, 3
  %340 = load ptr, ptr %result.i, align 8
  %341 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %342 = load ptr, ptr %27, align 8
  store ptr %340, ptr %10, align 8
  store ptr %342, ptr %62, align 8
  store ptr @_parameterization_Ptri32, ptr %63, align 8
  %343 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %10)
  %344 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %345 = load i64, ptr %171, align 4
  %346 = load i64, ptr %172, align 4
  %347 = load ptr, ptr %173, align 8
  %348 = load ptr, ptr %174, align 8
  %result.i.i.i405 = call i1 %347(i64 %346, i64 %345, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr readonly %348) #3
  %349 = select i1 %result.i.i.i405, i64 10, i64 9
  %gep = getelementptr [14 x ptr], ptr getelementptr inbounds (i8, ptr @Entry, i64 72), i64 0, i64 %349
  %350 = load ptr, ptr %gep, align 8
  call void %350({ ptr, ptr, ptr, i32 } %339, { ptr, ptr, ptr, i32 } %339, ptr nonnull %10, { ptr, i160 } %187, { ptr, i160 } %170, i32 %194)
  %351 = load ptr, ptr %61, align 8
  %352 = ptrtoint ptr %result.i.i404 to i64
  %353 = ptrtoint ptr %351 to i64
  %.sroa.2.0.insert.ext.i406 = zext i64 %353 to i160
  %.sroa.2.0.insert.shift.i407 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i406, 64
  %.sroa.0.0.insert.ext.i409 = zext i64 %352 to i160
  %.sroa.2.0.insert.insert.i408 = or disjoint i160 %.sroa.2.0.insert.shift.i407, %.sroa.0.0.insert.ext.i409
  %.sroa.0.0.insert.insert.i410 = or disjoint i160 %.sroa.2.0.insert.insert.i408, 3062541302288446171170371466885913903104
  %354 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0.0.insert.insert.i410, 1
  %355 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %356 = load ptr, ptr %45, align 8
  %357 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %356, 0
  %358 = load ptr, ptr %46, align 8
  %359 = insertvalue { ptr, ptr, ptr, i32 } %357, ptr %358, 1
  %360 = load ptr, ptr %47, align 8
  %361 = insertvalue { ptr, ptr, ptr, i32 } %359, ptr %360, 2
  %362 = load i32, ptr %48, align 4
  %363 = insertvalue { ptr, ptr, ptr, i32 } %361, i32 %362, 3
  %hash_coef_ptr.i.i84.i411 = getelementptr i8, ptr %356, i64 8
  %tbl_size_ptr.i.i85.i412 = getelementptr i8, ptr %356, i64 16
  %offset_tbl_ptr.i.i86.i413 = getelementptr i8, ptr %356, i64 40
  %hash_coef.i.i87.i414 = load i64, ptr %hash_coef_ptr.i.i84.i411, align 4
  %tbl_size.i.i88.i415 = load i64, ptr %tbl_size_ptr.i.i85.i412, align 4
  %offset_tbl.i.i89.i416 = load ptr, ptr %offset_tbl_ptr.i.i86.i413, align 8
  %product.i.i.i90.i417 = mul i64 %hash_coef.i.i87.i414, -5261542750394134544
  %shifted.i.i.i91.i418 = lshr i64 %product.i.i.i90.i417, 32
  %xored.i.i.i92.i419 = xor i64 %shifted.i.i.i91.i418, %product.i.i.i90.i417
  %hash.i.i.i93.i420 = and i64 %xored.i.i.i92.i419, %tbl_size.i.i88.i415
  %offset_ptr.i.i94.i421 = getelementptr i32, ptr %offset_tbl.i.i89.i416, i64 %hash.i.i.i93.i420
  %offset.i.i95.i422 = load i32, ptr %offset_ptr.i.i94.i421, align 4
  %eq.i98.i423 = icmp eq i32 %362, %offset.i.i95.i422
  call void @llvm.assume(i1 %eq.i98.i423) #30
  %364 = load ptr, ptr %result.i, align 8
  %365 = load ptr, ptr %27, align 8
  %result.i99.i424 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %366 = getelementptr i8, ptr %result.i99.i424, i64 16
  store ptr %365, ptr %366, align 8
  %367 = getelementptr i8, ptr %result.i99.i424, i64 8
  store ptr %364, ptr %367, align 8
  %368 = getelementptr i8, ptr %result.i99.i424, i64 24
  store ptr null, ptr %368, align 8
  %369 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i99.i424)
  store ptr @Entry, ptr %result.i99.i424, align 8
  store ptr @_parameterization_Ptri32, ptr %11, align 8
  store ptr %result.i99.i424, ptr %64, align 8
  %370 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %11)
  %371 = call ptr @llvm.invariant.start.p0(i64 600, ptr %356)
  %372 = sext i32 %362 to i64
  %373 = getelementptr ptr, ptr %356, i64 %372
  %374 = getelementptr i8, ptr %373, i64 128
  %375 = load ptr, ptr %374, align 8
  store ptr @i32_typ, ptr %12, align 8
  store ptr @Entry, ptr %65, align 8
  %376 = call ptr %375({ ptr, ptr, ptr, i32 } %363, ptr nonnull %12)
  call void %376({ ptr, ptr, ptr, i32 } %363, { ptr, ptr, ptr, i32 } %363, ptr nonnull %11, i32 %285, { ptr, i160 } %354)
  %377 = icmp eq ptr %.fca.0.extract2.i403, @nil_typ
  %378 = icmp eq ptr %.fca.0.extract2.i403, null
  %379 = or i1 %377, %378
  br i1 %379, label %._crit_edge.thread.i446, label %._crit_edge.i425

._crit_edge.thread.i446:                          ; preds = %HashMap_find_slot_keyK_hashPtri32.exit616
  %380 = load i32, ptr %49, align 4
  %381 = add i32 %380, 1
  store i32 %381, ptr %49, align 4
  br label %._crit_edge1.sink.split.i444

._crit_edge.i425:                                 ; preds = %HashMap_find_slot_keyK_hashPtri32.exit616
  %.fca.1.extract4.i426 = extractvalue { ptr, i160 } %302, 1
  %.sroa.3192.8.extract.trunc.i427 = trunc i160 %.fca.1.extract4.i426 to i64
  %382 = inttoptr i64 %.sroa.3192.8.extract.trunc.i427 to ptr
  %.sroa.5193.8.extract.shift.i428 = lshr i160 %.fca.1.extract4.i426, 64
  %.sroa.5193.8.extract.trunc.i429 = trunc i160 %.sroa.5193.8.extract.shift.i428 to i64
  %383 = inttoptr i64 %.sroa.5193.8.extract.trunc.i429 to ptr
  %hash_coef_ptr.i.i101.i430 = getelementptr i8, ptr %.fca.0.extract2.i403, i64 8
  %tbl_size_ptr.i.i102.i431 = getelementptr i8, ptr %.fca.0.extract2.i403, i64 16
  %offset_tbl_ptr.i.i103.i432 = getelementptr i8, ptr %.fca.0.extract2.i403, i64 40
  %hash_coef.i.i104.i433 = load i64, ptr %hash_coef_ptr.i.i101.i430, align 4
  %tbl_size.i.i105.i434 = load i64, ptr %tbl_size_ptr.i.i102.i431, align 4
  %offset_tbl.i.i106.i435 = load ptr, ptr %offset_tbl_ptr.i.i103.i432, align 8
  %product.i.i.i107.i436 = mul i64 %hash_coef.i.i104.i433, 4015701072841558310
  %shifted.i.i.i108.i437 = lshr i64 %product.i.i.i107.i436, 32
  %xored.i.i.i109.i438 = xor i64 %shifted.i.i.i108.i437, %product.i.i.i107.i436
  %hash.i.i.i110.i439 = and i64 %xored.i.i.i109.i438, %tbl_size.i.i105.i434
  %offset_ptr.i.i111.i440 = getelementptr i32, ptr %offset_tbl.i.i106.i435, i64 %hash.i.i.i110.i439
  %offset.i.i112.i441 = load i32, ptr %offset_ptr.i.i111.i440, align 4
  %384 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract2.i403, 0
  %385 = insertvalue { ptr, ptr, ptr, i32 } %384, ptr %382, 1
  %386 = insertvalue { ptr, ptr, ptr, i32 } %385, ptr %383, 2
  %387 = insertvalue { ptr, ptr, ptr, i32 } %386, i32 %offset.i.i112.i441, 3
  %388 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %389 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %390 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract2.i403)
  %391 = sext i32 %offset.i.i112.i441 to i64
  %392 = getelementptr ptr, ptr %.fca.0.extract2.i403, i64 %391
  %393 = getelementptr i8, ptr %392, i64 56
  %394 = load ptr, ptr %393, align 8
  %395 = call ptr %394({ ptr, ptr, ptr, i32 } %387, ptr nonnull %2)
  %396 = call { ptr, i160 } %395({ ptr, ptr, ptr, i32 } %387, { ptr, ptr, ptr, i32 } %387, ptr nonnull %2)
  %.fca.0.extract45.i442 = extractvalue { ptr, i160 } %396, 0
  %397 = getelementptr i8, ptr %.fca.0.extract45.i442, i64 8
  %398 = getelementptr i8, ptr %.fca.0.extract45.i442, i64 16
  %399 = getelementptr i8, ptr %.fca.0.extract45.i442, i64 24
  %400 = getelementptr i8, ptr %.fca.0.extract45.i442, i64 32
  %401 = load i64, ptr %397, align 4
  %402 = load i64, ptr %398, align 4
  %403 = load ptr, ptr %399, align 8
  %404 = load ptr, ptr %400, align 8
  %result.i114.i443 = call i1 %403(i64 %402, i64 %401, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %404) #3
  br i1 %result.i114.i443, label %._crit_edge1.sink.split.i444, label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit447

._crit_edge1.sink.split.i444:                     ; preds = %._crit_edge.i425, %._crit_edge.thread.i446
  %.sink202.i445 = phi i64 [ 40, %._crit_edge.thread.i446 ], [ 32, %._crit_edge.i425 ]
  %405 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %406 = getelementptr i8, ptr getelementptr inbounds (i8, ptr @HashMap, i64 72), i64 %.sink202.i445
  %407 = load ptr, ptr %406, align 8
  %408 = load ptr, ptr %407, align 8
  %409 = call i32 %408(ptr nonnull %result.i)
  %410 = add i32 %409, 1
  %411 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %412 = getelementptr i8, ptr %407, i64 8
  %413 = load ptr, ptr %412, align 8
  call void %413(ptr nonnull %result.i, i32 %410)
  br label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit447

HashMap_insert_internal_keyK_valueV_hashPtri32.exit447: ; preds = %._crit_edge.i425, %._crit_edge1.sink.split.i444
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %9)
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %10)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %11)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %12)
  br label %._crit_edge3.i

._crit_edge3.i:                                   ; preds = %HashMap_insert_internal_keyK_valueV_hashPtri32.exit447, %179, %155, %147
  %414 = add nuw nsw i32 %.reg2mem31.0.i360, 1
  %415 = load ptr, ptr %gep.i359, align 8
  %416 = call ptr %415({ ptr, ptr, ptr, i32 } %120, ptr nonnull %2)
  %417 = call i32 %416({ ptr, ptr, ptr, i32 } %120, { ptr, ptr, ptr, i32 } %120, ptr nonnull %2)
  %418 = icmp slt i32 %414, %417
  br i1 %418, label %147, label %HashMap_resize_new_capacityPtri32.exit

HashMap_resize_new_capacityPtri32.exit:           ; preds = %._crit_edge3.i, %109
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %20)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %21)
  br label %HashMap_insert_keyK_valueV.exit

HashMap_insert_keyK_valueV.exit:                  ; preds = %._crit_edge, %HashMap_resize_new_capacityPtri32.exit
  %419 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %420 = load ptr, ptr %32, align 8
  %421 = call i32 %420({ ptr, i160 } %67)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %15)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %16)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %17)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %18)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %19)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6)
  %422 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %423 = load ptr, ptr %45, align 8
  %424 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %423, 0
  %425 = load ptr, ptr %46, align 8
  %426 = insertvalue { ptr, ptr, ptr, i32 } %424, ptr %425, 1
  %427 = load ptr, ptr %47, align 8
  %428 = insertvalue { ptr, ptr, ptr, i32 } %426, ptr %427, 2
  %429 = load i32, ptr %48, align 4
  %430 = insertvalue { ptr, ptr, ptr, i32 } %428, i32 %429, 3
  %hash_coef_ptr.i.i51.i464 = getelementptr i8, ptr %423, i64 8
  %tbl_size_ptr.i.i52.i465 = getelementptr i8, ptr %423, i64 16
  %offset_tbl_ptr.i.i53.i466 = getelementptr i8, ptr %423, i64 40
  %hash_coef.i.i54.i467 = load i64, ptr %hash_coef_ptr.i.i51.i464, align 4
  %tbl_size.i.i55.i468 = load i64, ptr %tbl_size_ptr.i.i52.i465, align 4
  %offset_tbl.i.i56.i469 = load ptr, ptr %offset_tbl_ptr.i.i53.i466, align 8
  %product.i.i.i57.i470 = mul i64 %hash_coef.i.i54.i467, -5261542750394134544
  %shifted.i.i.i58.i471 = lshr i64 %product.i.i.i57.i470, 32
  %xored.i.i.i59.i472 = xor i64 %shifted.i.i.i58.i471, %product.i.i.i57.i470
  %hash.i.i.i60.i473 = and i64 %xored.i.i.i59.i472, %tbl_size.i.i55.i468
  %offset_ptr.i.i61.i474 = getelementptr i32, ptr %offset_tbl.i.i56.i469, i64 %hash.i.i.i60.i473
  %offset.i.i62.i475 = load i32, ptr %offset_ptr.i.i61.i474, align 4
  %eq.i.i476 = icmp eq i32 %429, %offset.i.i62.i475
  call void @llvm.assume(i1 %eq.i.i476) #30
  %431 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %432 = call ptr @llvm.invariant.start.p0(i64 600, ptr %423)
  %433 = sext i32 %429 to i64
  %434 = getelementptr ptr, ptr %423, i64 %433
  %435 = getelementptr i8, ptr %434, i64 64
  %436 = load ptr, ptr %435, align 8
  %437 = call ptr %436({ ptr, ptr, ptr, i32 } %430, ptr nonnull %2)
  %438 = call i32 %437({ ptr, ptr, ptr, i32 } %430, { ptr, ptr, ptr, i32 } %430, ptr nonnull %2)
  %439 = add i32 %438, -1
  %440 = and i32 %439, %421
  %441 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  br label %442

442:                                              ; preds = %491, %HashMap_insert_keyK_valueV.exit
  %spec.store.select.i511531 = phi i32 [ %spec.store.select.i511, %491 ], [ -1, %HashMap_insert_keyK_valueV.exit ]
  %.0..0..0..i477 = phi i32 [ %509, %491 ], [ %440, %HashMap_insert_keyK_valueV.exit ]
  %443 = load ptr, ptr %45, align 8
  %444 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %443, 0
  %445 = load ptr, ptr %46, align 8
  %446 = insertvalue { ptr, ptr, ptr, i32 } %444, ptr %445, 1
  %447 = load ptr, ptr %47, align 8
  %448 = insertvalue { ptr, ptr, ptr, i32 } %446, ptr %447, 2
  %449 = load i32, ptr %48, align 4
  %450 = insertvalue { ptr, ptr, ptr, i32 } %448, i32 %449, 3
  %hash_coef_ptr.i.i65.i478 = getelementptr i8, ptr %443, i64 8
  %tbl_size_ptr.i.i66.i479 = getelementptr i8, ptr %443, i64 16
  %offset_tbl_ptr.i.i67.i480 = getelementptr i8, ptr %443, i64 40
  %hash_coef.i.i68.i481 = load i64, ptr %hash_coef_ptr.i.i65.i478, align 4
  %tbl_size.i.i69.i482 = load i64, ptr %tbl_size_ptr.i.i66.i479, align 4
  %offset_tbl.i.i70.i483 = load ptr, ptr %offset_tbl_ptr.i.i67.i480, align 8
  %product.i.i.i71.i484 = mul i64 %hash_coef.i.i68.i481, -5261542750394134544
  %shifted.i.i.i72.i485 = lshr i64 %product.i.i.i71.i484, 32
  %xored.i.i.i73.i486 = xor i64 %shifted.i.i.i72.i485, %product.i.i.i71.i484
  %hash.i.i.i74.i487 = and i64 %xored.i.i.i73.i486, %tbl_size.i.i69.i482
  %offset_ptr.i.i75.i488 = getelementptr i32, ptr %offset_tbl.i.i70.i483, i64 %hash.i.i.i74.i487
  %offset.i.i76.i489 = load i32, ptr %offset_ptr.i.i75.i488, align 4
  %eq.i79.i490 = icmp eq i32 %449, %offset.i.i76.i489
  call void @llvm.assume(i1 %eq.i79.i490) #30
  %451 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  store ptr @_parameterization_Ptri32, ptr %5, align 8
  %452 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %5)
  %453 = call ptr @llvm.invariant.start.p0(i64 600, ptr %443)
  %454 = sext i32 %449 to i64
  %455 = getelementptr ptr, ptr %443, i64 %454
  %456 = getelementptr i8, ptr %455, i64 120
  %457 = load ptr, ptr %456, align 8
  store ptr @i32_typ, ptr %6, align 8
  %458 = call ptr %457({ ptr, ptr, ptr, i32 } %450, ptr nonnull %6)
  %459 = call { ptr, i160 } %458({ ptr, ptr, ptr, i32 } %450, { ptr, ptr, ptr, i32 } %450, ptr nonnull %5, i32 %.0..0..0..i477)
  %.fca.0.extract36.i491 = extractvalue { ptr, i160 } %459, 0
  %460 = icmp eq ptr %.fca.0.extract36.i491, @nil_typ
  %461 = icmp eq ptr %.fca.0.extract36.i491, null
  %462 = or i1 %460, %461
  br i1 %462, label %510, label %463

463:                                              ; preds = %442
  %.fca.1.extract38.i492 = extractvalue { ptr, i160 } %459, 1
  %.sroa.5.8.extract.shift.i493 = lshr i160 %.fca.1.extract38.i492, 64
  %.sroa.5.8.extract.trunc.i494 = trunc i160 %.sroa.5.8.extract.shift.i493 to i64
  %.sroa.2.8.extract.trunc165.i495 = trunc i160 %.fca.1.extract38.i492 to i64
  %464 = inttoptr i64 %.sroa.2.8.extract.trunc165.i495 to ptr
  %465 = inttoptr i64 %.sroa.5.8.extract.trunc.i494 to ptr
  %hash_coef_ptr.i.i81.i496 = getelementptr i8, ptr %.fca.0.extract36.i491, i64 8
  %tbl_size_ptr.i.i82.i497 = getelementptr i8, ptr %.fca.0.extract36.i491, i64 16
  %offset_tbl_ptr.i.i83.i498 = getelementptr i8, ptr %.fca.0.extract36.i491, i64 40
  %hash_coef.i.i84.i499 = load i64, ptr %hash_coef_ptr.i.i81.i496, align 4
  %tbl_size.i.i85.i500 = load i64, ptr %tbl_size_ptr.i.i82.i497, align 4
  %offset_tbl.i.i86.i501 = load ptr, ptr %offset_tbl_ptr.i.i83.i498, align 8
  %product.i.i.i87.i502 = mul i64 %hash_coef.i.i84.i499, 4015701072841558310
  %shifted.i.i.i88.i503 = lshr i64 %product.i.i.i87.i502, 32
  %xored.i.i.i89.i504 = xor i64 %shifted.i.i.i88.i503, %product.i.i.i87.i502
  %hash.i.i.i90.i505 = and i64 %xored.i.i.i89.i504, %tbl_size.i.i85.i500
  %offset_ptr.i.i91.i506 = getelementptr i32, ptr %offset_tbl.i.i86.i501, i64 %hash.i.i.i90.i505
  %offset.i.i92.i507 = load i32, ptr %offset_ptr.i.i91.i506, align 4
  %466 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract36.i491, 0
  %467 = insertvalue { ptr, ptr, ptr, i32 } %466, ptr %464, 1
  %468 = insertvalue { ptr, ptr, ptr, i32 } %467, ptr %465, 2
  %469 = insertvalue { ptr, ptr, ptr, i32 } %468, i32 %offset.i.i92.i507, 3
  %470 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %471 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %472 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i491)
  %473 = sext i32 %offset.i.i92.i507 to i64
  %474 = getelementptr ptr, ptr %.fca.0.extract36.i491, i64 %473
  %475 = getelementptr i8, ptr %474, i64 64
  %476 = load ptr, ptr %475, align 8
  %477 = call ptr %476({ ptr, ptr, ptr, i32 } %469, ptr nonnull %2)
  %478 = call i32 %477({ ptr, ptr, ptr, i32 } %469, { ptr, ptr, ptr, i32 } %469, ptr nonnull %2)
  %479 = icmp eq i32 %478, %421
  %480 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %481 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %482 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i491)
  %483 = getelementptr i8, ptr %474, i64 48
  %484 = load ptr, ptr %483, align 8
  %485 = call ptr %484({ ptr, ptr, ptr, i32 } %469, ptr nonnull %2)
  %486 = call { ptr, i160 } %485({ ptr, ptr, ptr, i32 } %469, { ptr, ptr, ptr, i32 } %469, ptr nonnull %2)
  %487 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %488 = load ptr, ptr %33, align 8
  %489 = call i1 %488({ ptr, i160 } %486, { ptr, i160 } %67)
  %490 = and i1 %479, %489
  br i1 %490, label %HashMap_find_slot_keyK_hashPtri32.exit512, label %491

491:                                              ; preds = %463
  %492 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %493 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %494 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i491)
  %495 = getelementptr i8, ptr %474, i64 56
  %496 = load ptr, ptr %495, align 8
  %497 = call ptr %496({ ptr, ptr, ptr, i32 } %469, ptr nonnull %2)
  %498 = call { ptr, i160 } %497({ ptr, ptr, ptr, i32 } %469, { ptr, ptr, ptr, i32 } %469, ptr nonnull %2)
  %.fca.0.extract15.i = extractvalue { ptr, i160 } %498, 0
  %499 = getelementptr i8, ptr %.fca.0.extract15.i, i64 8
  %500 = getelementptr i8, ptr %.fca.0.extract15.i, i64 16
  %501 = getelementptr i8, ptr %.fca.0.extract15.i, i64 24
  %502 = getelementptr i8, ptr %.fca.0.extract15.i, i64 32
  %503 = load i64, ptr %499, align 4
  %504 = load i64, ptr %500, align 4
  %505 = load ptr, ptr %501, align 8
  %506 = load ptr, ptr %502, align 8
  %result.i.i509 = call i1 %505(i64 %504, i64 %503, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %506) #3
  %507 = icmp eq i32 %spec.store.select.i511531, -1
  %or.cond.i510 = select i1 %result.i.i509, i1 %507, i1 false
  %spec.store.select.i511 = select i1 %or.cond.i510, i32 %.0..0..0..i477, i32 %spec.store.select.i511531
  %508 = add i32 %.0..0..0..i477, 1
  %509 = and i32 %508, %439
  br label %442

510:                                              ; preds = %442
  %511 = icmp eq i32 %spec.store.select.i511531, -1
  %.pre542 = select i1 %511, i32 %.0..0..0..i477, i32 %spec.store.select.i511531
  br label %HashMap_find_slot_keyK_hashPtri32.exit512

HashMap_find_slot_keyK_hashPtri32.exit512:        ; preds = %463, %510
  %512 = phi i32 [ %.pre542, %510 ], [ %.0..0..0..i477, %463 ]
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6)
  %513 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %514 = load ptr, ptr %45, align 8
  %515 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %514, 0
  %516 = load ptr, ptr %46, align 8
  %517 = insertvalue { ptr, ptr, ptr, i32 } %515, ptr %516, 1
  %518 = load ptr, ptr %47, align 8
  %519 = insertvalue { ptr, ptr, ptr, i32 } %517, ptr %518, 2
  %520 = load i32, ptr %48, align 4
  %521 = insertvalue { ptr, ptr, ptr, i32 } %519, i32 %520, 3
  %hash_coef_ptr.i.i56.i278 = getelementptr i8, ptr %514, i64 8
  %tbl_size_ptr.i.i57.i279 = getelementptr i8, ptr %514, i64 16
  %offset_tbl_ptr.i.i58.i280 = getelementptr i8, ptr %514, i64 40
  %hash_coef.i.i59.i281 = load i64, ptr %hash_coef_ptr.i.i56.i278, align 4
  %tbl_size.i.i60.i282 = load i64, ptr %tbl_size_ptr.i.i57.i279, align 4
  %offset_tbl.i.i61.i283 = load ptr, ptr %offset_tbl_ptr.i.i58.i280, align 8
  %product.i.i.i62.i284 = mul i64 %hash_coef.i.i59.i281, -5261542750394134544
  %shifted.i.i.i63.i285 = lshr i64 %product.i.i.i62.i284, 32
  %xored.i.i.i64.i286 = xor i64 %shifted.i.i.i63.i285, %product.i.i.i62.i284
  %hash.i.i.i65.i287 = and i64 %xored.i.i.i64.i286, %tbl_size.i.i60.i282
  %offset_ptr.i.i66.i288 = getelementptr i32, ptr %offset_tbl.i.i61.i283, i64 %hash.i.i.i65.i287
  %offset.i.i67.i289 = load i32, ptr %offset_ptr.i.i66.i288, align 4
  %eq.i.i290 = icmp eq i32 %520, %offset.i.i67.i289
  call void @llvm.assume(i1 %eq.i.i290) #30
  store ptr @_parameterization_Ptri32, ptr %15, align 8
  %522 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %15)
  %523 = call ptr @llvm.invariant.start.p0(i64 600, ptr %514)
  %524 = sext i32 %520 to i64
  %525 = getelementptr ptr, ptr %514, i64 %524
  %526 = getelementptr i8, ptr %525, i64 120
  %527 = load ptr, ptr %526, align 8
  store ptr @i32_typ, ptr %16, align 8
  %528 = call ptr %527({ ptr, ptr, ptr, i32 } %521, ptr nonnull %16)
  %529 = call { ptr, i160 } %528({ ptr, ptr, ptr, i32 } %521, { ptr, ptr, ptr, i32 } %521, ptr nonnull %15, i32 %512)
  %.fca.0.extract2.i = extractvalue { ptr, i160 } %529, 0
  %530 = load ptr, ptr %result.i, align 8
  %531 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %532 = load ptr, ptr %27, align 8
  %533 = load ptr, ptr %530, align 8
  %534 = getelementptr i8, ptr %533, i64 48
  %535 = load ptr, ptr %534, align 8
  %536 = call { i64, i64 } %535(ptr nonnull %530)
  %537 = extractvalue { i64, i64 } %536, 0
  %538 = extractvalue { i64, i64 } %536, 1
  %539 = call i64 @llvm.umax.i64(i64 %538, i64 8)
  %540 = urem i64 16, %538
  %541 = icmp eq i64 %540, 0
  %542 = sub i64 %538, %540
  %543 = select i1 %541, i64 0, i64 %542
  %544 = add i64 %543, %537
  %545 = add i64 %544, 16
  %546 = and i64 %544, 7
  %547 = icmp eq i64 %546, 0
  %548 = sub nuw nsw i64 40, %546
  %549 = select i1 %547, i64 32, i64 %548
  %550 = add i64 %545, %549
  %551 = and i64 %550, 3
  %552 = icmp eq i64 %551, 0
  %553 = sub nuw nsw i64 8, %551
  %554 = select i1 %552, i64 4, i64 %553
  %555 = add i64 %554, %550
  %556 = urem i64 %555, %539
  %557 = icmp eq i64 %556, 0
  %558 = sub i64 %539, %556
  %559 = select i1 %557, i64 0, i64 %558
  %560 = add i64 %555, %559
  %result.i.i291 = call noalias ptr @bump_malloc_inner(i64 noundef %560, ptr nonnull @current_ptr) #29
  store ptr %530, ptr %result.i.i291, align 8
  %561 = getelementptr i8, ptr %result.i.i291, i64 8
  store ptr %532, ptr %561, align 8
  %562 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i.i291)
  store ptr @Entry, ptr %17, align 8
  store ptr %result.i.i291, ptr %54, align 8
  store i32 9, ptr %55, align 8
  %563 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %17)
  %564 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %565 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %566 = load ptr, ptr %530, align 8
  %567 = getelementptr i8, ptr %566, i64 48
  %568 = load ptr, ptr %567, align 8
  %569 = call { i64, i64 } %568(ptr nonnull %530)
  %570 = extractvalue { i64, i64 } %569, 1
  %571 = urem i64 16, %570
  %572 = icmp eq i64 %571, 0
  %reass.sub = sub i64 %570, %571
  %573 = add i64 %reass.sub, 16
  %574 = select i1 %572, i64 16, i64 %573
  %575 = getelementptr i8, ptr %result.i.i291, i64 %574
  %576 = load ptr, ptr %result.i.i291, align 8
  %577 = load ptr, ptr %576, align 8
  %578 = getelementptr i8, ptr %577, i64 64
  %579 = load ptr, ptr %578, align 8
  call void %579({ ptr, i160 } %67, ptr nonnull %576, ptr %575)
  %580 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %581 = load ptr, ptr %result.i.i291, align 8
  %582 = load ptr, ptr %581, align 8
  %583 = getelementptr i8, ptr %582, i64 48
  %584 = load ptr, ptr %583, align 8
  %585 = call { i64, i64 } %584(ptr nonnull %581)
  %586 = extractvalue { i64, i64 } %585, 0
  %587 = extractvalue { i64, i64 } %585, 1
  %588 = urem i64 16, %587
  %589 = icmp eq i64 %588, 0
  %590 = sub i64 %587, %588
  %591 = select i1 %589, i64 0, i64 %590
  %592 = add i64 %591, %586
  %593 = and i64 %592, 7
  %594 = icmp eq i64 %593, 0
  %595 = sub nuw nsw i64 8, %593
  %596 = select i1 %594, i64 0, i64 %595
  %597 = getelementptr i8, ptr %result.i.i291, i64 %592
  %598 = getelementptr i8, ptr %597, i64 16
  %599 = getelementptr i8, ptr %598, i64 %596
  store ptr @i32_typ, ptr %599, align 8
  %600 = getelementptr i8, ptr %599, i64 8
  store i160 %.sroa.017.0.insert.ext, ptr %600, align 4
  %601 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %602 = load ptr, ptr %result.i.i291, align 8
  %603 = load ptr, ptr %602, align 8
  %604 = getelementptr i8, ptr %603, i64 48
  %605 = load ptr, ptr %604, align 8
  %606 = call { i64, i64 } %605(ptr nonnull %602)
  %607 = extractvalue { i64, i64 } %606, 0
  %608 = extractvalue { i64, i64 } %606, 1
  %609 = urem i64 16, %608
  %610 = icmp eq i64 %609, 0
  %611 = sub i64 %608, %609
  %612 = select i1 %610, i64 0, i64 %611
  %613 = add i64 %612, %607
  %614 = add i64 %613, 16
  %615 = and i64 %613, 7
  %616 = icmp eq i64 %615, 0
  %617 = sub nuw nsw i64 40, %615
  %618 = select i1 %616, i64 32, i64 %617
  %619 = add i64 %614, %618
  %620 = and i64 %619, 3
  %621 = icmp eq i64 %620, 0
  %622 = sub nuw nsw i64 4, %620
  %623 = select i1 %621, i64 0, i64 %622
  %624 = getelementptr i8, ptr %result.i.i291, i64 %619
  %625 = getelementptr i8, ptr %624, i64 %623
  store i32 %421, ptr %625, align 4
  %626 = load ptr, ptr %56, align 8
  %627 = ptrtoint ptr %result.i.i291 to i64
  %628 = ptrtoint ptr %626 to i64
  %.sroa.2.0.insert.ext.i = zext i64 %628 to i160
  %.sroa.2.0.insert.shift.i = shl nuw nsw i160 %.sroa.2.0.insert.ext.i, 64
  %.sroa.0.0.insert.ext.i = zext i64 %627 to i160
  %.sroa.2.0.insert.insert.i = or disjoint i160 %.sroa.2.0.insert.shift.i, %.sroa.0.0.insert.ext.i
  %.sroa.0.0.insert.insert.i = or disjoint i160 %.sroa.2.0.insert.insert.i, 3062541302288446171170371466885913903104
  %629 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0.0.insert.insert.i, 1
  %630 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %631 = load ptr, ptr %45, align 8
  %632 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %631, 0
  %633 = load ptr, ptr %46, align 8
  %634 = insertvalue { ptr, ptr, ptr, i32 } %632, ptr %633, 1
  %635 = load ptr, ptr %47, align 8
  %636 = insertvalue { ptr, ptr, ptr, i32 } %634, ptr %635, 2
  %637 = load i32, ptr %48, align 4
  %638 = insertvalue { ptr, ptr, ptr, i32 } %636, i32 %637, 3
  %hash_coef_ptr.i.i84.i = getelementptr i8, ptr %631, i64 8
  %tbl_size_ptr.i.i85.i = getelementptr i8, ptr %631, i64 16
  %offset_tbl_ptr.i.i86.i = getelementptr i8, ptr %631, i64 40
  %hash_coef.i.i87.i = load i64, ptr %hash_coef_ptr.i.i84.i, align 4
  %tbl_size.i.i88.i = load i64, ptr %tbl_size_ptr.i.i85.i, align 4
  %offset_tbl.i.i89.i = load ptr, ptr %offset_tbl_ptr.i.i86.i, align 8
  %product.i.i.i90.i = mul i64 %hash_coef.i.i87.i, -5261542750394134544
  %shifted.i.i.i91.i = lshr i64 %product.i.i.i90.i, 32
  %xored.i.i.i92.i = xor i64 %shifted.i.i.i91.i, %product.i.i.i90.i
  %hash.i.i.i93.i = and i64 %xored.i.i.i92.i, %tbl_size.i.i88.i
  %offset_ptr.i.i94.i = getelementptr i32, ptr %offset_tbl.i.i89.i, i64 %hash.i.i.i93.i
  %offset.i.i95.i = load i32, ptr %offset_ptr.i.i94.i, align 4
  %eq.i98.i = icmp eq i32 %637, %offset.i.i95.i
  call void @llvm.assume(i1 %eq.i98.i) #30
  %639 = load ptr, ptr %result.i, align 8
  %640 = load ptr, ptr %27, align 8
  %result.i99.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %641 = getelementptr i8, ptr %result.i99.i, i64 16
  store ptr %640, ptr %641, align 8
  %642 = getelementptr i8, ptr %result.i99.i, i64 8
  store ptr %639, ptr %642, align 8
  %643 = getelementptr i8, ptr %result.i99.i, i64 24
  store ptr null, ptr %643, align 8
  %644 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i99.i)
  store ptr @Entry, ptr %result.i99.i, align 8
  store ptr @_parameterization_Ptri32, ptr %18, align 8
  store ptr %result.i99.i, ptr %57, align 8
  %645 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %18)
  %646 = call ptr @llvm.invariant.start.p0(i64 600, ptr %631)
  %647 = sext i32 %637 to i64
  %648 = getelementptr ptr, ptr %631, i64 %647
  %649 = getelementptr i8, ptr %648, i64 128
  %650 = load ptr, ptr %649, align 8
  store ptr @i32_typ, ptr %19, align 8
  store ptr @Entry, ptr %58, align 8
  %651 = call ptr %650({ ptr, ptr, ptr, i32 } %638, ptr nonnull %19)
  call void %651({ ptr, ptr, ptr, i32 } %638, { ptr, ptr, ptr, i32 } %638, ptr nonnull %18, i32 %512, { ptr, i160 } %629)
  %652 = icmp eq ptr %.fca.0.extract2.i, @nil_typ
  %653 = icmp eq ptr %.fca.0.extract2.i, null
  %654 = or i1 %652, %653
  br i1 %654, label %._crit_edge.thread.i, label %._crit_edge.i

._crit_edge.thread.i:                             ; preds = %HashMap_find_slot_keyK_hashPtri32.exit512
  %655 = load i32, ptr %49, align 4
  %656 = add i32 %655, 1
  store i32 %656, ptr %49, align 4
  br label %._crit_edge1.sink.split.i

._crit_edge.i:                                    ; preds = %HashMap_find_slot_keyK_hashPtri32.exit512
  %.fca.1.extract4.i = extractvalue { ptr, i160 } %529, 1
  %.sroa.3192.8.extract.trunc.i = trunc i160 %.fca.1.extract4.i to i64
  %657 = inttoptr i64 %.sroa.3192.8.extract.trunc.i to ptr
  %.sroa.5193.8.extract.shift.i = lshr i160 %.fca.1.extract4.i, 64
  %.sroa.5193.8.extract.trunc.i = trunc i160 %.sroa.5193.8.extract.shift.i to i64
  %658 = inttoptr i64 %.sroa.5193.8.extract.trunc.i to ptr
  %hash_coef_ptr.i.i101.i = getelementptr i8, ptr %.fca.0.extract2.i, i64 8
  %tbl_size_ptr.i.i102.i = getelementptr i8, ptr %.fca.0.extract2.i, i64 16
  %offset_tbl_ptr.i.i103.i = getelementptr i8, ptr %.fca.0.extract2.i, i64 40
  %hash_coef.i.i104.i = load i64, ptr %hash_coef_ptr.i.i101.i, align 4
  %tbl_size.i.i105.i = load i64, ptr %tbl_size_ptr.i.i102.i, align 4
  %offset_tbl.i.i106.i = load ptr, ptr %offset_tbl_ptr.i.i103.i, align 8
  %product.i.i.i107.i = mul i64 %hash_coef.i.i104.i, 4015701072841558310
  %shifted.i.i.i108.i = lshr i64 %product.i.i.i107.i, 32
  %xored.i.i.i109.i = xor i64 %shifted.i.i.i108.i, %product.i.i.i107.i
  %hash.i.i.i110.i = and i64 %xored.i.i.i109.i, %tbl_size.i.i105.i
  %offset_ptr.i.i111.i = getelementptr i32, ptr %offset_tbl.i.i106.i, i64 %hash.i.i.i110.i
  %offset.i.i112.i = load i32, ptr %offset_ptr.i.i111.i, align 4
  %659 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract2.i, 0
  %660 = insertvalue { ptr, ptr, ptr, i32 } %659, ptr %657, 1
  %661 = insertvalue { ptr, ptr, ptr, i32 } %660, ptr %658, 2
  %662 = insertvalue { ptr, ptr, ptr, i32 } %661, i32 %offset.i.i112.i, 3
  %663 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %664 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %665 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract2.i)
  %666 = sext i32 %offset.i.i112.i to i64
  %667 = getelementptr ptr, ptr %.fca.0.extract2.i, i64 %666
  %668 = getelementptr i8, ptr %667, i64 56
  %669 = load ptr, ptr %668, align 8
  %670 = call ptr %669({ ptr, ptr, ptr, i32 } %662, ptr nonnull %2)
  %671 = call { ptr, i160 } %670({ ptr, ptr, ptr, i32 } %662, { ptr, ptr, ptr, i32 } %662, ptr nonnull %2)
  %.fca.0.extract45.i = extractvalue { ptr, i160 } %671, 0
  %672 = getelementptr i8, ptr %.fca.0.extract45.i, i64 8
  %673 = getelementptr i8, ptr %.fca.0.extract45.i, i64 16
  %674 = getelementptr i8, ptr %.fca.0.extract45.i, i64 24
  %675 = getelementptr i8, ptr %.fca.0.extract45.i, i64 32
  %676 = load i64, ptr %672, align 4
  %677 = load i64, ptr %673, align 4
  %678 = load ptr, ptr %674, align 8
  %679 = load ptr, ptr %675, align 8
  %result.i114.i = call i1 %678(i64 %677, i64 %676, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %679) #3
  br i1 %result.i114.i, label %._crit_edge1.sink.split.i, label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit

._crit_edge1.sink.split.i:                        ; preds = %._crit_edge.i, %._crit_edge.thread.i
  %.sink202.i = phi i64 [ 40, %._crit_edge.thread.i ], [ 32, %._crit_edge.i ]
  %680 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %681 = getelementptr i8, ptr getelementptr inbounds (i8, ptr @HashMap, i64 72), i64 %.sink202.i
  %682 = load ptr, ptr %681, align 8
  %683 = load ptr, ptr %682, align 8
  %684 = call i32 %683(ptr nonnull %result.i)
  %685 = add i32 %684, 1
  %686 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %687 = getelementptr i8, ptr %682, i64 8
  %688 = load ptr, ptr %687, align 8
  call void %688(ptr nonnull %result.i, i32 %685)
  br label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit

HashMap_insert_internal_keyK_valueV_hashPtri32.exit: ; preds = %._crit_edge.i, %._crit_edge1.sink.split.i
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %15)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %16)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %17)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %18)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %19)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %689 = icmp slt i32 %66, %0
  br i1 %689, label %._crit_edge, label %._crit_edge1

._crit_edge1:                                     ; preds = %HashMap_insert_internal_keyK_valueV_hashPtri32.exit
  %690 = call i64 @clock()
  %691 = add nsw i32 %0, -1
  %.sroa.014.0.insert.ext = zext nneg i32 %691 to i160
  %692 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.014.0.insert.ext, 1
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %22)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %23)
  %693 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %694 = load ptr, ptr %32, align 8
  %695 = call i32 %694({ ptr, i160 } %692)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %13)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %14)
  %696 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %697 = load ptr, ptr %45, align 8
  %698 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %697, 0
  %699 = load ptr, ptr %46, align 8
  %700 = insertvalue { ptr, ptr, ptr, i32 } %698, ptr %699, 1
  %701 = load ptr, ptr %47, align 8
  %702 = insertvalue { ptr, ptr, ptr, i32 } %700, ptr %701, 2
  %703 = load i32, ptr %48, align 4
  %704 = insertvalue { ptr, ptr, ptr, i32 } %702, i32 %703, 3
  %hash_coef_ptr.i.i51.i = getelementptr i8, ptr %697, i64 8
  %tbl_size_ptr.i.i52.i = getelementptr i8, ptr %697, i64 16
  %offset_tbl_ptr.i.i53.i = getelementptr i8, ptr %697, i64 40
  %hash_coef.i.i54.i = load i64, ptr %hash_coef_ptr.i.i51.i, align 4
  %tbl_size.i.i55.i = load i64, ptr %tbl_size_ptr.i.i52.i, align 4
  %offset_tbl.i.i56.i = load ptr, ptr %offset_tbl_ptr.i.i53.i, align 8
  %product.i.i.i57.i = mul i64 %hash_coef.i.i54.i, -5261542750394134544
  %shifted.i.i.i58.i = lshr i64 %product.i.i.i57.i, 32
  %xored.i.i.i59.i = xor i64 %shifted.i.i.i58.i, %product.i.i.i57.i
  %hash.i.i.i60.i = and i64 %xored.i.i.i59.i, %tbl_size.i.i55.i
  %offset_ptr.i.i61.i = getelementptr i32, ptr %offset_tbl.i.i56.i, i64 %hash.i.i.i60.i
  %offset.i.i62.i = load i32, ptr %offset_ptr.i.i61.i, align 4
  %eq.i.i313 = icmp eq i32 %703, %offset.i.i62.i
  call void @llvm.assume(i1 %eq.i.i313) #30
  %705 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %706 = call ptr @llvm.invariant.start.p0(i64 600, ptr %697)
  %707 = sext i32 %703 to i64
  %708 = getelementptr ptr, ptr %697, i64 %707
  %709 = getelementptr i8, ptr %708, i64 64
  %710 = load ptr, ptr %709, align 8
  %711 = call ptr %710({ ptr, ptr, ptr, i32 } %704, ptr nonnull %2)
  %712 = call i32 %711({ ptr, ptr, ptr, i32 } %704, { ptr, ptr, ptr, i32 } %704, ptr nonnull %2)
  %713 = add i32 %712, -1
  %714 = and i32 %713, %695
  %715 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  br label %716

716:                                              ; preds = %765, %._crit_edge1
  %spec.store.select.i362 = phi i32 [ %spec.store.select.i, %765 ], [ -1, %._crit_edge1 ]
  %.0..0..0..i = phi i32 [ %783, %765 ], [ %714, %._crit_edge1 ]
  %717 = load ptr, ptr %45, align 8
  %718 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %717, 0
  %719 = load ptr, ptr %46, align 8
  %720 = insertvalue { ptr, ptr, ptr, i32 } %718, ptr %719, 1
  %721 = load ptr, ptr %47, align 8
  %722 = insertvalue { ptr, ptr, ptr, i32 } %720, ptr %721, 2
  %723 = load i32, ptr %48, align 4
  %724 = insertvalue { ptr, ptr, ptr, i32 } %722, i32 %723, 3
  %hash_coef_ptr.i.i65.i = getelementptr i8, ptr %717, i64 8
  %tbl_size_ptr.i.i66.i = getelementptr i8, ptr %717, i64 16
  %offset_tbl_ptr.i.i67.i = getelementptr i8, ptr %717, i64 40
  %hash_coef.i.i68.i = load i64, ptr %hash_coef_ptr.i.i65.i, align 4
  %tbl_size.i.i69.i = load i64, ptr %tbl_size_ptr.i.i66.i, align 4
  %offset_tbl.i.i70.i = load ptr, ptr %offset_tbl_ptr.i.i67.i, align 8
  %product.i.i.i71.i = mul i64 %hash_coef.i.i68.i, -5261542750394134544
  %shifted.i.i.i72.i = lshr i64 %product.i.i.i71.i, 32
  %xored.i.i.i73.i = xor i64 %shifted.i.i.i72.i, %product.i.i.i71.i
  %hash.i.i.i74.i = and i64 %xored.i.i.i73.i, %tbl_size.i.i69.i
  %offset_ptr.i.i75.i = getelementptr i32, ptr %offset_tbl.i.i70.i, i64 %hash.i.i.i74.i
  %offset.i.i76.i = load i32, ptr %offset_ptr.i.i75.i, align 4
  %eq.i79.i = icmp eq i32 %723, %offset.i.i76.i
  call void @llvm.assume(i1 %eq.i79.i) #30
  %725 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  store ptr @_parameterization_Ptri32, ptr %13, align 8
  %726 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %13)
  %727 = call ptr @llvm.invariant.start.p0(i64 600, ptr %717)
  %728 = sext i32 %723 to i64
  %729 = getelementptr ptr, ptr %717, i64 %728
  %730 = getelementptr i8, ptr %729, i64 120
  %731 = load ptr, ptr %730, align 8
  store ptr @i32_typ, ptr %14, align 8
  %732 = call ptr %731({ ptr, ptr, ptr, i32 } %724, ptr nonnull %14)
  %733 = call { ptr, i160 } %732({ ptr, ptr, ptr, i32 } %724, { ptr, ptr, ptr, i32 } %724, ptr nonnull %13, i32 %.0..0..0..i)
  %.fca.0.extract36.i = extractvalue { ptr, i160 } %733, 0
  %734 = icmp eq ptr %.fca.0.extract36.i, @nil_typ
  %735 = icmp eq ptr %.fca.0.extract36.i, null
  %736 = or i1 %734, %735
  br i1 %736, label %784, label %737

737:                                              ; preds = %716
  %.fca.1.extract38.i = extractvalue { ptr, i160 } %733, 1
  %.sroa.5.8.extract.shift.i314 = lshr i160 %.fca.1.extract38.i, 64
  %.sroa.5.8.extract.trunc.i315 = trunc i160 %.sroa.5.8.extract.shift.i314 to i64
  %.sroa.2.8.extract.trunc165.i = trunc i160 %.fca.1.extract38.i to i64
  %738 = inttoptr i64 %.sroa.2.8.extract.trunc165.i to ptr
  %739 = inttoptr i64 %.sroa.5.8.extract.trunc.i315 to ptr
  %hash_coef_ptr.i.i81.i = getelementptr i8, ptr %.fca.0.extract36.i, i64 8
  %tbl_size_ptr.i.i82.i = getelementptr i8, ptr %.fca.0.extract36.i, i64 16
  %offset_tbl_ptr.i.i83.i = getelementptr i8, ptr %.fca.0.extract36.i, i64 40
  %hash_coef.i.i84.i = load i64, ptr %hash_coef_ptr.i.i81.i, align 4
  %tbl_size.i.i85.i = load i64, ptr %tbl_size_ptr.i.i82.i, align 4
  %offset_tbl.i.i86.i = load ptr, ptr %offset_tbl_ptr.i.i83.i, align 8
  %product.i.i.i87.i = mul i64 %hash_coef.i.i84.i, 4015701072841558310
  %shifted.i.i.i88.i = lshr i64 %product.i.i.i87.i, 32
  %xored.i.i.i89.i = xor i64 %shifted.i.i.i88.i, %product.i.i.i87.i
  %hash.i.i.i90.i = and i64 %xored.i.i.i89.i, %tbl_size.i.i85.i
  %offset_ptr.i.i91.i = getelementptr i32, ptr %offset_tbl.i.i86.i, i64 %hash.i.i.i90.i
  %offset.i.i92.i = load i32, ptr %offset_ptr.i.i91.i, align 4
  %740 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract36.i, 0
  %741 = insertvalue { ptr, ptr, ptr, i32 } %740, ptr %738, 1
  %742 = insertvalue { ptr, ptr, ptr, i32 } %741, ptr %739, 2
  %743 = insertvalue { ptr, ptr, ptr, i32 } %742, i32 %offset.i.i92.i, 3
  %744 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %745 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %746 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i)
  %747 = sext i32 %offset.i.i92.i to i64
  %748 = getelementptr ptr, ptr %.fca.0.extract36.i, i64 %747
  %749 = getelementptr i8, ptr %748, i64 64
  %750 = load ptr, ptr %749, align 8
  %751 = call ptr %750({ ptr, ptr, ptr, i32 } %743, ptr nonnull %2)
  %752 = call i32 %751({ ptr, ptr, ptr, i32 } %743, { ptr, ptr, ptr, i32 } %743, ptr nonnull %2)
  %753 = icmp eq i32 %752, %695
  %754 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %755 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %756 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i)
  %757 = getelementptr i8, ptr %748, i64 48
  %758 = load ptr, ptr %757, align 8
  %759 = call ptr %758({ ptr, ptr, ptr, i32 } %743, ptr nonnull %2)
  %760 = call { ptr, i160 } %759({ ptr, ptr, ptr, i32 } %743, { ptr, ptr, ptr, i32 } %743, ptr nonnull %2)
  %761 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %762 = load ptr, ptr %33, align 8
  %763 = call i1 %762({ ptr, i160 } %760, { ptr, i160 } %692)
  %764 = and i1 %753, %763
  br i1 %764, label %HashMap_find_slot_keyK_hashPtri32.exit, label %765

765:                                              ; preds = %737
  %766 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %767 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %768 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i)
  %769 = getelementptr i8, ptr %748, i64 56
  %770 = load ptr, ptr %769, align 8
  %771 = call ptr %770({ ptr, ptr, ptr, i32 } %743, ptr nonnull %2)
  %772 = call { ptr, i160 } %771({ ptr, ptr, ptr, i32 } %743, { ptr, ptr, ptr, i32 } %743, ptr nonnull %2)
  %.fca.0.extract15.i317 = extractvalue { ptr, i160 } %772, 0
  %773 = getelementptr i8, ptr %.fca.0.extract15.i317, i64 8
  %774 = getelementptr i8, ptr %.fca.0.extract15.i317, i64 16
  %775 = getelementptr i8, ptr %.fca.0.extract15.i317, i64 24
  %776 = getelementptr i8, ptr %.fca.0.extract15.i317, i64 32
  %777 = load i64, ptr %773, align 4
  %778 = load i64, ptr %774, align 4
  %779 = load ptr, ptr %775, align 8
  %780 = load ptr, ptr %776, align 8
  %result.i.i318 = call i1 %779(i64 %778, i64 %777, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %780) #3
  %781 = icmp eq i32 %spec.store.select.i362, -1
  %or.cond.i = select i1 %result.i.i318, i1 %781, i1 false
  %spec.store.select.i = select i1 %or.cond.i, i32 %.0..0..0..i, i32 %spec.store.select.i362
  %782 = add i32 %.0..0..0..i, 1
  %783 = and i32 %782, %713
  br label %716

784:                                              ; preds = %716
  %785 = icmp eq i32 %spec.store.select.i362, -1
  %.pre = select i1 %785, i32 %.0..0..0..i, i32 %spec.store.select.i362
  br label %HashMap_find_slot_keyK_hashPtri32.exit

HashMap_find_slot_keyK_hashPtri32.exit:           ; preds = %737, %784
  %786 = phi i32 [ %.pre, %784 ], [ %.0..0..0..i, %737 ]
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %13)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %14)
  %787 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %788 = load ptr, ptr %45, align 8
  %789 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %788, 0
  %790 = load ptr, ptr %46, align 8
  %791 = insertvalue { ptr, ptr, ptr, i32 } %789, ptr %790, 1
  %792 = load ptr, ptr %47, align 8
  %793 = insertvalue { ptr, ptr, ptr, i32 } %791, ptr %792, 2
  %794 = load i32, ptr %48, align 4
  %795 = insertvalue { ptr, ptr, ptr, i32 } %793, i32 %794, 3
  %hash_coef_ptr.i.i58.i = getelementptr i8, ptr %788, i64 8
  %tbl_size_ptr.i.i59.i = getelementptr i8, ptr %788, i64 16
  %offset_tbl_ptr.i.i60.i = getelementptr i8, ptr %788, i64 40
  %hash_coef.i.i61.i = load i64, ptr %hash_coef_ptr.i.i58.i, align 4
  %tbl_size.i.i62.i = load i64, ptr %tbl_size_ptr.i.i59.i, align 4
  %offset_tbl.i.i63.i = load ptr, ptr %offset_tbl_ptr.i.i60.i, align 8
  %product.i.i.i64.i = mul i64 %hash_coef.i.i61.i, -5261542750394134544
  %shifted.i.i.i65.i = lshr i64 %product.i.i.i64.i, 32
  %xored.i.i.i66.i = xor i64 %shifted.i.i.i65.i, %product.i.i.i64.i
  %hash.i.i.i67.i = and i64 %xored.i.i.i66.i, %tbl_size.i.i62.i
  %offset_ptr.i.i68.i = getelementptr i32, ptr %offset_tbl.i.i63.i, i64 %hash.i.i.i67.i
  %offset.i.i69.i = load i32, ptr %offset_ptr.i.i68.i, align 4
  %eq.i.i165 = icmp eq i32 %794, %offset.i.i69.i
  call void @llvm.assume(i1 %eq.i.i165) #30
  store ptr @_parameterization_Ptri32, ptr %22, align 8
  %796 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %22)
  %797 = call ptr @llvm.invariant.start.p0(i64 600, ptr %788)
  %798 = sext i32 %794 to i64
  %799 = getelementptr ptr, ptr %788, i64 %798
  %800 = getelementptr i8, ptr %799, i64 120
  %801 = load ptr, ptr %800, align 8
  store ptr @i32_typ, ptr %23, align 8
  %802 = call ptr %801({ ptr, ptr, ptr, i32 } %795, ptr nonnull %23)
  %803 = call { ptr, i160 } %802({ ptr, ptr, ptr, i32 } %795, { ptr, ptr, ptr, i32 } %795, ptr nonnull %22, i32 %786)
  %.fca.0.extract.i166 = extractvalue { ptr, i160 } %803, 0
  %804 = icmp ne ptr %.fca.0.extract.i166, @nil_typ
  %805 = icmp ne ptr %.fca.0.extract.i166, null
  %.not56.i = and i1 %804, %805
  br i1 %.not56.i, label %806, label %HashMap_get_keyK.exit.thread

806:                                              ; preds = %HashMap_find_slot_keyK_hashPtri32.exit
  %.fca.1.extract.i167 = extractvalue { ptr, i160 } %803, 1
  %.sroa.3.8.extract.trunc.i = trunc i160 %.fca.1.extract.i167 to i64
  %807 = inttoptr i64 %.sroa.3.8.extract.trunc.i to ptr
  %.sroa.5.8.extract.shift.i = lshr i160 %.fca.1.extract.i167, 64
  %.sroa.5.8.extract.trunc.i = trunc i160 %.sroa.5.8.extract.shift.i to i64
  %808 = inttoptr i64 %.sroa.5.8.extract.trunc.i to ptr
  %hash_coef_ptr.i.i72.i = getelementptr i8, ptr %.fca.0.extract.i166, i64 8
  %tbl_size_ptr.i.i73.i = getelementptr i8, ptr %.fca.0.extract.i166, i64 16
  %offset_tbl_ptr.i.i74.i = getelementptr i8, ptr %.fca.0.extract.i166, i64 40
  %hash_coef.i.i75.i = load i64, ptr %hash_coef_ptr.i.i72.i, align 4
  %tbl_size.i.i76.i = load i64, ptr %tbl_size_ptr.i.i73.i, align 4
  %offset_tbl.i.i77.i = load ptr, ptr %offset_tbl_ptr.i.i74.i, align 8
  %product.i.i.i78.i = mul i64 %hash_coef.i.i75.i, 4015701072841558310
  %shifted.i.i.i79.i = lshr i64 %product.i.i.i78.i, 32
  %xored.i.i.i80.i = xor i64 %shifted.i.i.i79.i, %product.i.i.i78.i
  %hash.i.i.i81.i = and i64 %xored.i.i.i80.i, %tbl_size.i.i76.i
  %offset_ptr.i.i82.i = getelementptr i32, ptr %offset_tbl.i.i77.i, i64 %hash.i.i.i81.i
  %offset.i.i83.i = load i32, ptr %offset_ptr.i.i82.i, align 4
  %809 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract.i166, 0
  %810 = insertvalue { ptr, ptr, ptr, i32 } %809, ptr %807, 1
  %811 = insertvalue { ptr, ptr, ptr, i32 } %810, ptr %808, 2
  %812 = insertvalue { ptr, ptr, ptr, i32 } %811, i32 %offset.i.i83.i, 3
  %813 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %814 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %815 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract.i166)
  %816 = sext i32 %offset.i.i83.i to i64
  %817 = getelementptr ptr, ptr %.fca.0.extract.i166, i64 %816
  %818 = getelementptr i8, ptr %817, i64 56
  %819 = load ptr, ptr %818, align 8
  %820 = call ptr %819({ ptr, ptr, ptr, i32 } %812, ptr nonnull %2)
  %821 = call { ptr, i160 } %820({ ptr, ptr, ptr, i32 } %812, { ptr, ptr, ptr, i32 } %812, ptr nonnull %2)
  %.fca.0.extract47.i = extractvalue { ptr, i160 } %821, 0
  %.fca.1.extract49.i = extractvalue { ptr, i160 } %821, 1
  %822 = getelementptr i8, ptr %.fca.0.extract47.i, i64 8
  %823 = getelementptr i8, ptr %.fca.0.extract47.i, i64 16
  %824 = getelementptr i8, ptr %.fca.0.extract47.i, i64 24
  %825 = getelementptr i8, ptr %.fca.0.extract47.i, i64 32
  %826 = load i64, ptr %822, align 4
  %827 = load i64, ptr %823, align 4
  %828 = load ptr, ptr %824, align 8
  %829 = load ptr, ptr %825, align 8
  %result.i.i168 = call i1 %828(i64 %827, i64 %826, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %829) #3
  br i1 %result.i.i168, label %HashMap_get_keyK.exit.thread, label %HashMap_get_keyK.exit

HashMap_get_keyK.exit.thread:                     ; preds = %HashMap_find_slot_keyK_hashPtri32.exit, %806
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %22)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %23)
  br label %833

HashMap_get_keyK.exit:                            ; preds = %806
  %result.i85.i = call i1 %828(i64 %827, i64 %826, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr readonly %829) #3
  %cond.fr.i = freeze i1 %result.i85.i
  %spec.select.i = select i1 %cond.fr.i, ptr %.fca.0.extract47.i, ptr @nil_typ
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %22)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %23)
  %830 = icmp ne ptr %spec.select.i, @nil_typ
  %831 = icmp ne ptr %spec.select.i, null
  %.not24 = and i1 %830, %831
  br i1 %.not24, label %832, label %833

832:                                              ; preds = %HashMap_get_keyK.exit
  %.sroa.2.8.extract.trunc = trunc i160 %.fca.1.extract49.i to i32
  %.not = icmp eq i32 %0, %.sroa.2.8.extract.trunc
  br label %833

833:                                              ; preds = %HashMap_get_keyK.exit.thread, %HashMap_get_keyK.exit, %832
  %.reg2mem42.0 = phi i1 [ %.not, %832 ], [ false, %HashMap_get_keyK.exit ], [ false, %HashMap_get_keyK.exit.thread ]
  %834 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %835 = load i32, ptr %49, align 4
  %836 = icmp eq i32 %835, %0
  %837 = select i1 %836, i1 %.reg2mem42.0, i1 false
  %838 = freeze i1 %837
  br label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit

839:                                              ; preds = %1
  %840 = call i64 @clock()
  %841 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  br label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit

IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit: ; preds = %833, %839
  %842 = phi i64 [ %690, %833 ], [ %840, %839 ]
  %.reg2mem38.0.in = phi i1 [ %838, %833 ], [ true, %839 ]
  %result.i33 = call noalias dereferenceable_or_null(18) ptr @bump_malloc_inner(i64 noundef 18, ptr nonnull @current_ptr) #29
  store <17 x i8> <i8 73, i8 110, i8 115, i8 101, i8 114, i8 116, i8 32, i8 83, i8 101, i8 113, i8 117, i8 101, i8 110, i8 116, i8 105, i8 97, i8 108>, ptr %result.i33, align 32
  %result.i34 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %843 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %result.i34, 1
  %844 = insertvalue { ptr, ptr, ptr, i32 } %843, ptr undef, 2
  %845 = insertvalue { ptr, ptr, ptr, i32 } %844, i32 9, 3
  store ptr %result.i33, ptr %result.i34, align 8
  %846 = getelementptr i8, ptr %result.i34, i64 8
  store i32 17, ptr %846, align 4
  %847 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %848 = getelementptr i8, ptr %result.i34, i64 12
  store i32 18, ptr %848, align 4
  %849 = sub i64 %842, %52
  call void @print_benchmark_result({ ptr, ptr, ptr, i32 } %845, i32 %0, i64 %849)
  %result.i35 = call noalias dereferenceable_or_null(19) ptr @bump_malloc_inner(i64 noundef 19, ptr nonnull @current_ptr) #29
  store <18 x i8> <i8 32, i8 32, i8 32, i8 32, i8 86, i8 101, i8 114, i8 105, i8 102, i8 105, i8 99, i8 97, i8 116, i8 105, i8 111, i8 110, i8 58, i8 32>, ptr %result.i35, align 32
  %result.i36 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %850 = getelementptr inbounds i8, ptr %24, i64 8
  %851 = getelementptr inbounds i8, ptr %24, i64 24
  store ptr @String, ptr %24, align 8
  store ptr %result.i36, ptr %850, align 8
  store i32 9, ptr %851, align 8
  %852 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %24)
  store ptr %result.i35, ptr %result.i36, align 8
  %853 = getelementptr i8, ptr %result.i36, i64 8
  store i32 18, ptr %853, align 4
  %854 = getelementptr i8, ptr %result.i36, i64 12
  store i32 19, ptr %854, align 4
  %855 = load i160, ptr %850, align 8
  %856 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %.sroa.3.8.extract.trunc.i201 = trunc i160 %855 to i64
  %857 = inttoptr i64 %.sroa.3.8.extract.trunc.i201 to ptr
  %858 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %859 = getelementptr i8, ptr %857, i64 8
  %860 = load i32, ptr %859, align 4
  %861 = add i32 %860, 1
  %862 = sext i32 %861 to i64
  %result.i.i333 = call noalias ptr @bump_malloc_inner(i64 noundef %862, ptr nonnull @current_ptr) #29
  %863 = load i32, ptr %859, align 4
  %864 = icmp sgt i32 %863, 0
  br i1 %864, label %.lr.ph.i, label %String_c_string_.exit

.lr.ph.i:                                         ; preds = %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit
  %865 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %866 = load ptr, ptr %857, align 8
  %867 = zext nneg i32 %863 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i333, ptr align 1 %866, i64 %867, i1 false)
  br label %String_c_string_.exit

String_c_string_.exit:                            ; preds = %.lr.ph.i, %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit
  %868 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %869 = sext i32 %863 to i64
  %870 = getelementptr i8, ptr %result.i.i333, i64 %869
  store i8 0, ptr %870, align 1
  %puts.i = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i333)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %result.i37 = call noalias dereferenceable_or_null(5) ptr @bump_malloc_inner(i64 noundef 5, ptr nonnull @current_ptr) #29
  %spec.select = select i1 %.reg2mem38.0.in, <4 x i8> <i8 80, i8 65, i8 83, i8 83>, <4 x i8> <i8 70, i8 65, i8 73, i8 76>
  %871 = select i1 %.reg2mem38.0.in, ptr %25, ptr %26
  store <4 x i8> %spec.select, ptr %result.i37, align 4
  %result.i58 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v = select i1 %.reg2mem38.0.in, ptr %25, ptr %26
  %.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel = getelementptr inbounds i8, ptr %.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v, i64 8
  %.sroa.sel358.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v = select i1 %.reg2mem38.0.in, ptr %25, ptr %26
  %.sroa.sel358.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel = getelementptr inbounds i8, ptr %.sroa.sel358.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v, i64 24
  store ptr @String, ptr %871, align 8
  store ptr %result.i58, ptr %.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  store i32 9, ptr %.sroa.sel358.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  %872 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %871)
  store ptr %result.i37, ptr %result.i58, align 8
  %873 = getelementptr i8, ptr %result.i58, i64 8
  store i32 4, ptr %873, align 4
  %874 = getelementptr i8, ptr %result.i58, i64 12
  store i32 5, ptr %874, align 4
  %875 = load i160, ptr %.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  %876 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %.sroa.3.8.extract.trunc.i220 = trunc i160 %875 to i64
  %877 = inttoptr i64 %.sroa.3.8.extract.trunc.i220 to ptr
  %878 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %879 = getelementptr i8, ptr %877, i64 8
  %880 = load i32, ptr %879, align 4
  %881 = add i32 %880, 1
  %882 = sext i32 %881 to i64
  %result.i.i349 = call noalias ptr @bump_malloc_inner(i64 noundef %882, ptr nonnull @current_ptr) #29
  %883 = load i32, ptr %879, align 4
  %884 = icmp sgt i32 %883, 0
  br i1 %884, label %.lr.ph.i350, label %String_c_string_.exit354

.lr.ph.i350:                                      ; preds = %String_c_string_.exit
  %885 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %886 = load ptr, ptr %877, align 8
  %887 = zext nneg i32 %883 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i349, ptr align 1 %886, i64 %887, i1 false)
  br label %String_c_string_.exit354

String_c_string_.exit354:                         ; preds = %.lr.ph.i350, %String_c_string_.exit
  %888 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %889 = sext i32 %883 to i64
  %890 = getelementptr i8, ptr %result.i.i349, i64 %889
  store i8 0, ptr %890, align 1
  %puts.i236 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i349)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  ret void
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.init.trampoline(ptr nocapture writeonly, ptr readnone, ptr readnone) #2

declare i64 @clock() local_unnamed_addr

define linkonce_odr { i64, i64 } @_size_bool_typ(ptr %0) {
  ret { i64, i64 } { i64 ptrtoint (ptr getelementptr (i1, ptr null, i32 1) to i64), i64 1 }
}

define linkonce_odr { ptr, i160 } @_box_bool_typ(ptr %0, ptr %1) {
  %3 = load i8, ptr %0, align 1
  %.sroa.2.sroa.0.0.insert.ext = zext i8 %3 to i160
  %4 = insertvalue { ptr, i160 } { ptr @bool_typ, i160 undef }, i160 %.sroa.2.sroa.0.0.insert.ext, 1
  ret { ptr, i160 } %4
}

define linkonce_odr void @_unbox_bool_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %.fca.1.extract = extractvalue { ptr, i160 } %0, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i8
  store i8 %.sroa.1.8.extract.trunc, ptr %2, align 1
  ret void
}

define void @benchmark_insert_random(i32 %0) local_unnamed_addr {
  %2 = alloca [0 x ptr], align 8
  %3 = alloca [1 x ptr], align 8
  %4 = alloca { ptr }, align 8
  %5 = alloca [1 x ptr], align 8
  %6 = alloca { ptr }, align 8
  %7 = alloca [1 x ptr], align 8
  %8 = alloca { ptr }, align 8
  %9 = alloca [1 x ptr], align 8
  %10 = alloca { ptr }, align 8
  %11 = alloca { ptr, ptr, ptr, i32 }, align 8
  %12 = alloca [3 x ptr], align 8
  %13 = alloca [2 x ptr], align 8
  %14 = alloca { ptr, ptr }, align 8
  %15 = alloca [1 x ptr], align 8
  %16 = alloca { ptr }, align 8
  %17 = alloca [1 x ptr], align 8
  %18 = alloca { ptr }, align 8
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %20 = alloca [3 x ptr], align 8
  %21 = alloca [2 x ptr], align 8
  %22 = alloca { ptr, ptr }, align 8
  %23 = alloca [1 x ptr], align 8
  %24 = alloca { ptr }, align 8
  %25 = alloca [1 x ptr], align 8
  %26 = alloca { ptr }, align 8
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  %28 = alloca [2 x ptr], align 8
  %29 = alloca { ptr, ptr }, align 8
  %30 = alloca [1 x ptr], align 8
  %31 = alloca { ptr }, align 8
  %32 = alloca [1 x ptr], align 8
  %33 = alloca { ptr }, align 8
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = alloca [2 x ptr], align 8
  %36 = alloca { ptr, ptr }, align 8
  %37 = alloca [1 x ptr], align 8
  %38 = alloca { ptr }, align 8
  %39 = alloca [1 x ptr], align 8
  %40 = alloca { ptr }, align 8
  %oldProtect.i91 = alloca i32, align 4
  %oldProtect.i87 = alloca i32, align 4
  %oldProtect.i52 = alloca i32, align 4
  %oldProtect.i = alloca i32, align 4
  %41 = alloca { ptr, ptr, ptr, i32 }, align 8
  %42 = alloca { ptr, ptr, ptr, i32 }, align 8
  %43 = alloca { ptr, ptr, ptr, i32 }, align 8
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = alloca { ptr, ptr, ptr, i32 }, align 8
  %result.i = tail call noalias dereferenceable_or_null(80) ptr @bump_malloc_inner(i64 noundef 80, ptr nonnull @current_ptr) #29
  store ptr @_parameterization_Ptri32, ptr %result.i, align 8
  %46 = getelementptr i8, ptr %result.i, i64 8
  store ptr @_parameterization_Ptri32, ptr %46, align 8
  %47 = getelementptr i8, ptr %result.i, i64 16
  store ptr @_parameterization_PairPtri32._Ptri32, ptr %47, align 8
  %48 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %result.i)
  %result.i49 = tail call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %oldProtect.i)
  %result.i50 = call i32 @VirtualProtect(ptr %result.i49, i64 16, i32 64, ptr nonnull %oldProtect.i) #16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %oldProtect.i)
  call void @llvm.init.trampoline(ptr %result.i49, ptr nonnull @ofnpxjvthj, ptr nonnull @i32_hasher)
  %ret.i = call ptr @llvm.adjust.trampoline(ptr readonly %result.i49) #31
  %49 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i49)
  %result.i51 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %oldProtect.i52)
  %result.i53 = call i32 @VirtualProtect(ptr %result.i51, i64 16, i32 64, ptr nonnull %oldProtect.i52) #16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %oldProtect.i52)
  call void @llvm.init.trampoline(ptr %result.i51, ptr nonnull @hvnxsdclsg, ptr nonnull @i32_eq)
  %ret.i54 = call ptr @llvm.adjust.trampoline(ptr readonly %result.i51) #31
  %50 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i51)
  %51 = getelementptr i8, ptr %result.i, i64 64
  store ptr %ret.i, ptr %51, align 8
  %52 = getelementptr i8, ptr %result.i, i64 72
  store ptr %ret.i54, ptr %52, align 8
  %result.i.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %53 = getelementptr i8, ptr %result.i.i, i64 16
  store ptr @_parameterization_Nil, ptr %53, align 8
  %result.i4.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %54 = getelementptr i8, ptr %result.i4.i, i64 16
  store ptr @_parameterization_Ptri32, ptr %54, align 8
  %55 = getelementptr i8, ptr %result.i4.i, i64 8
  store ptr @_parameterization_Ptri32, ptr %55, align 8
  %56 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i4.i)
  store ptr @Entry, ptr %result.i4.i, align 8
  %57 = getelementptr i8, ptr %result.i.i, i64 8
  store ptr %result.i4.i, ptr %57, align 8
  %58 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i)
  store ptr @union_typ, ptr %result.i.i, align 8
  %result.i5.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i, ptr %result.i5.i, align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i5.i)
  %60 = getelementptr i8, ptr %result.i5.i, i64 16
  store i32 16, ptr %60, align 4
  %61 = getelementptr i8, ptr %result.i5.i, i64 20
  store i32 16, ptr %61, align 4
  %result.i.i.i = call noalias dereferenceable_or_null(512) ptr @bump_malloc_inner(i64 noundef 512, ptr nonnull @current_ptr) #29
  %62 = getelementptr i8, ptr %result.i5.i, i64 8
  store ptr %result.i.i.i, ptr %62, align 8
  %63 = getelementptr i8, ptr %result.i, i64 24
  store ptr @Array, ptr %63, align 8
  %64 = getelementptr i8, ptr %result.i, i64 32
  store ptr %result.i5.i, ptr %64, align 8
  %65 = getelementptr i8, ptr %result.i, i64 48
  store i32 9, ptr %65, align 4
  %66 = call ptr @llvm.invariant.start.p0(i64 40, ptr nonnull @PRNG)
  %67 = sext i32 %0 to i64
  %68 = shl nsw i64 %67, 5
  %result.i.i254 = call noalias ptr @bump_malloc_inner(i64 noundef %68, ptr nonnull @current_ptr) #29
  %result.i85 = call noalias dereferenceable_or_null(80) ptr @bump_malloc_inner(i64 noundef 80, ptr nonnull @current_ptr) #29
  store ptr @_parameterization_Ptri32, ptr %result.i85, align 8
  %69 = getelementptr i8, ptr %result.i85, i64 8
  store ptr @_parameterization_Ptri32, ptr %69, align 8
  %70 = getelementptr i8, ptr %result.i85, i64 16
  store ptr @_parameterization_PairPtri32._Ptri32, ptr %70, align 8
  %71 = call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %result.i85)
  %result.i86 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %oldProtect.i87)
  %result.i88 = call i32 @VirtualProtect(ptr %result.i86, i64 16, i32 64, ptr nonnull %oldProtect.i87) #16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %oldProtect.i87)
  call void @llvm.init.trampoline(ptr %result.i86, ptr nonnull @jotueralys, ptr nonnull @i32_hasher)
  %ret.i89 = call ptr @llvm.adjust.trampoline(ptr readonly %result.i86) #31
  %72 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i86)
  %result.i90 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %oldProtect.i91)
  %result.i92 = call i32 @VirtualProtect(ptr %result.i90, i64 16, i32 64, ptr nonnull %oldProtect.i91) #16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %oldProtect.i91)
  call void @llvm.init.trampoline(ptr %result.i90, ptr nonnull @orftdrnqtc, ptr nonnull @i32_eq)
  %ret.i93 = call ptr @llvm.adjust.trampoline(ptr readonly %result.i90) #31
  %73 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i90)
  %74 = getelementptr i8, ptr %result.i85, i64 64
  store ptr %ret.i89, ptr %74, align 8
  %75 = getelementptr i8, ptr %result.i85, i64 72
  store ptr %ret.i93, ptr %75, align 8
  %76 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %result.i.i365 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %77 = getelementptr i8, ptr %result.i.i365, i64 16
  store ptr @_parameterization_Nil, ptr %77, align 8
  %result.i4.i366 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %78 = getelementptr i8, ptr %result.i4.i366, i64 16
  store ptr @_parameterization_Ptri32, ptr %78, align 8
  %79 = getelementptr i8, ptr %result.i4.i366, i64 8
  store ptr @_parameterization_Ptri32, ptr %79, align 8
  %80 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i4.i366)
  store ptr @Entry, ptr %result.i4.i366, align 8
  %81 = getelementptr i8, ptr %result.i.i365, i64 8
  store ptr %result.i4.i366, ptr %81, align 8
  %82 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i365)
  store ptr @union_typ, ptr %result.i.i365, align 8
  %result.i5.i367 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i365, ptr %result.i5.i367, align 8
  %83 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i5.i367)
  %84 = getelementptr i8, ptr %result.i5.i367, i64 16
  store i32 16, ptr %84, align 4
  %85 = getelementptr i8, ptr %result.i5.i367, i64 20
  store i32 16, ptr %85, align 4
  %result.i.i.i368 = call noalias dereferenceable_or_null(512) ptr @bump_malloc_inner(i64 noundef 512, ptr nonnull @current_ptr) #29
  %86 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %87 = getelementptr i8, ptr %result.i5.i367, i64 8
  store ptr %result.i.i.i368, ptr %87, align 8
  %88 = getelementptr i8, ptr %result.i85, i64 24
  store ptr @Array, ptr %88, align 8
  %89 = getelementptr i8, ptr %result.i85, i64 32
  store ptr %result.i5.i367, ptr %89, align 8
  %90 = getelementptr i8, ptr %result.i85, i64 40
  %91 = getelementptr i8, ptr %result.i85, i64 48
  store i32 9, ptr %91, align 4
  %92 = getelementptr i8, ptr %result.i85, i64 56
  %93 = getelementptr i8, ptr %result.i85, i64 60
  %94 = icmp sgt i32 %0, 0
  br i1 %94, label %.lr.ph, label %._crit_edge237.thread

._crit_edge237.thread:                            ; preds = %1
  %95 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %96 = call i64 @clock()
  %97 = call i64 @clock()
  %98 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %99 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %100 = getelementptr i8, ptr %result.i, i64 56
  %101 = load i32, ptr %100, align 4
  %102 = icmp eq i32 %101, 0
  br label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit

.lr.ph:                                           ; preds = %1
  %103 = add nsw i32 %0, -1
  %104 = call ptr @llvm.invariant.start.p0(i64 40, ptr nonnull @PRNG)
  %105 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %106 = getelementptr inbounds i8, ptr %34, i64 8
  %107 = getelementptr inbounds i8, ptr %34, i64 24
  %108 = getelementptr inbounds i8, ptr %34, i64 16
  %109 = getelementptr inbounds i8, ptr %35, i64 8
  %110 = getelementptr inbounds i8, ptr %36, i64 8
  %111 = getelementptr inbounds i8, ptr %19, i64 8
  %112 = getelementptr inbounds i8, ptr %19, i64 24
  %113 = getelementptr inbounds i8, ptr %19, i64 16
  %114 = getelementptr inbounds i8, ptr %20, i64 8
  %115 = getelementptr inbounds i8, ptr %20, i64 16
  %116 = getelementptr inbounds i8, ptr %21, i64 8
  %117 = getelementptr inbounds i8, ptr %22, i64 8
  br label %118

118:                                              ; preds = %.lr.ph, %HashMap_insert_internal_keyK_valueV_hashPtri32.exit
  %119 = phi i32 [ 123, %.lr.ph ], [ %122, %HashMap_insert_internal_keyK_valueV_hashPtri32.exit ]
  %.reg2mem85.0235 = phi i32 [ 0, %.lr.ph ], [ %751, %HashMap_insert_internal_keyK_valueV_hashPtri32.exit ]
  %.reg2mem83.0234 = phi i32 [ -1, %.lr.ph ], [ %129, %HashMap_insert_internal_keyK_valueV_hashPtri32.exit ]
  %120 = mul i32 %119, 1103515245
  %121 = add i32 %120, 12345
  %122 = and i32 %121, 2147483647
  %.sroa.042.0.insert.ext = zext nneg i32 %122 to i160
  %123 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.042.0.insert.ext, 1
  %124 = zext nneg i32 %.reg2mem85.0235 to i64
  %125 = shl nuw nsw i64 %124, 5
  %126 = getelementptr i8, ptr %result.i.i254, i64 %125
  store ptr @i32_typ, ptr %126, align 8
  %127 = getelementptr i8, ptr %126, i64 8
  store i160 %.sroa.042.0.insert.ext, ptr %127, align 4
  %128 = icmp eq i32 %.reg2mem85.0235, %103
  %129 = select i1 %128, i32 %122, i32 %.reg2mem83.0234
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %130 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %131 = load ptr, ptr %88, align 8
  %132 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %131, 0
  %133 = load ptr, ptr %89, align 8
  %134 = insertvalue { ptr, ptr, ptr, i32 } %132, ptr %133, 1
  %135 = load ptr, ptr %90, align 8
  %136 = insertvalue { ptr, ptr, ptr, i32 } %134, ptr %135, 2
  %137 = load i32, ptr %91, align 4
  %138 = insertvalue { ptr, ptr, ptr, i32 } %136, i32 %137, 3
  %hash_coef_ptr.i.i42.i = getelementptr i8, ptr %131, i64 8
  %tbl_size_ptr.i.i43.i = getelementptr i8, ptr %131, i64 16
  %offset_tbl_ptr.i.i44.i = getelementptr i8, ptr %131, i64 40
  %hash_coef.i.i45.i = load i64, ptr %hash_coef_ptr.i.i42.i, align 4
  %tbl_size.i.i46.i = load i64, ptr %tbl_size_ptr.i.i43.i, align 4
  %offset_tbl.i.i47.i = load ptr, ptr %offset_tbl_ptr.i.i44.i, align 8
  %product.i.i.i48.i = mul i64 %hash_coef.i.i45.i, -5261542750394134544
  %shifted.i.i.i49.i = lshr i64 %product.i.i.i48.i, 32
  %xored.i.i.i50.i = xor i64 %shifted.i.i.i49.i, %product.i.i.i48.i
  %hash.i.i.i51.i = and i64 %xored.i.i.i50.i, %tbl_size.i.i46.i
  %offset_ptr.i.i52.i = getelementptr i32, ptr %offset_tbl.i.i47.i, i64 %hash.i.i.i51.i
  %offset.i.i53.i = load i32, ptr %offset_ptr.i.i52.i, align 4
  %eq.i.i = icmp eq i32 %137, %offset.i.i53.i
  call void @llvm.assume(i1 %eq.i.i) #30
  %139 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %140 = call ptr @llvm.invariant.start.p0(i64 600, ptr %131)
  %141 = sext i32 %137 to i64
  %142 = getelementptr ptr, ptr %131, i64 %141
  %143 = getelementptr i8, ptr %142, i64 64
  %144 = load ptr, ptr %143, align 8
  %145 = call ptr %144({ ptr, ptr, ptr, i32 } %138, ptr nonnull %2)
  %146 = call i32 %145({ ptr, ptr, ptr, i32 } %138, { ptr, ptr, ptr, i32 } %138, ptr nonnull %2)
  %147 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %148 = load ptr, ptr %88, align 8
  %149 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %148, 0
  %150 = load ptr, ptr %89, align 8
  %151 = insertvalue { ptr, ptr, ptr, i32 } %149, ptr %150, 1
  %152 = load ptr, ptr %90, align 8
  %153 = insertvalue { ptr, ptr, ptr, i32 } %151, ptr %152, 2
  %154 = load i32, ptr %91, align 4
  %155 = insertvalue { ptr, ptr, ptr, i32 } %153, i32 %154, 3
  %hash_coef_ptr.i.i56.i = getelementptr i8, ptr %148, i64 8
  %tbl_size_ptr.i.i57.i = getelementptr i8, ptr %148, i64 16
  %offset_tbl_ptr.i.i58.i = getelementptr i8, ptr %148, i64 40
  %hash_coef.i.i59.i = load i64, ptr %hash_coef_ptr.i.i56.i, align 4
  %tbl_size.i.i60.i = load i64, ptr %tbl_size_ptr.i.i57.i, align 4
  %offset_tbl.i.i61.i = load ptr, ptr %offset_tbl_ptr.i.i58.i, align 8
  %product.i.i.i62.i = mul i64 %hash_coef.i.i59.i, -5261542750394134544
  %shifted.i.i.i63.i = lshr i64 %product.i.i.i62.i, 32
  %xored.i.i.i64.i = xor i64 %shifted.i.i.i63.i, %product.i.i.i62.i
  %hash.i.i.i65.i = and i64 %xored.i.i.i64.i, %tbl_size.i.i60.i
  %offset_ptr.i.i66.i = getelementptr i32, ptr %offset_tbl.i.i61.i, i64 %hash.i.i.i65.i
  %offset.i.i67.i = load i32, ptr %offset_ptr.i.i66.i, align 4
  %eq.i70.i = icmp eq i32 %154, %offset.i.i67.i
  call void @llvm.assume(i1 %eq.i70.i) #30
  %156 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %157 = call ptr @llvm.invariant.start.p0(i64 600, ptr %148)
  %158 = sext i32 %154 to i64
  %159 = getelementptr ptr, ptr %148, i64 %158
  %160 = getelementptr i8, ptr %159, i64 64
  %161 = load ptr, ptr %160, align 8
  %162 = call ptr %161({ ptr, ptr, ptr, i32 } %155, ptr nonnull %2)
  %163 = call i32 %162({ ptr, ptr, ptr, i32 } %155, { ptr, ptr, ptr, i32 } %155, ptr nonnull %2)
  %164 = icmp eq i32 %163, 0
  %165 = load i32, ptr %93, align 4
  %166 = mul i32 %165, 10
  %167 = add i32 %166, 10
  %168 = mul i32 %146, 7
  %169 = icmp sge i32 %167, %168
  %170 = or i1 %164, %169
  br i1 %170, label %171, label %HashMap_insert_keyK_valueV.exit

171:                                              ; preds = %118
  %172 = shl i32 %146, 1
  %173 = call i32 @llvm.smax.i32(i32 %172, i32 16)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %37)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %38)
  %174 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %175 = load ptr, ptr %88, align 8
  %176 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %175, 0
  %177 = load ptr, ptr %89, align 8
  %178 = insertvalue { ptr, ptr, ptr, i32 } %176, ptr %177, 1
  %179 = load ptr, ptr %90, align 8
  %180 = insertvalue { ptr, ptr, ptr, i32 } %178, ptr %179, 2
  %181 = load i32, ptr %91, align 4
  %182 = insertvalue { ptr, ptr, ptr, i32 } %180, i32 %181, 3
  %hash_coef_ptr.i.i39.i = getelementptr i8, ptr %175, i64 8
  %tbl_size_ptr.i.i40.i = getelementptr i8, ptr %175, i64 16
  %offset_tbl_ptr.i.i41.i = getelementptr i8, ptr %175, i64 40
  %hash_coef.i.i42.i = load i64, ptr %hash_coef_ptr.i.i39.i, align 4
  %tbl_size.i.i43.i = load i64, ptr %tbl_size_ptr.i.i40.i, align 4
  %offset_tbl.i.i44.i = load ptr, ptr %offset_tbl_ptr.i.i41.i, align 8
  %product.i.i.i45.i = mul i64 %hash_coef.i.i42.i, -5261542750394134544
  %shifted.i.i.i46.i = lshr i64 %product.i.i.i45.i, 32
  %xored.i.i.i47.i = xor i64 %shifted.i.i.i46.i, %product.i.i.i45.i
  %hash.i.i.i48.i = and i64 %xored.i.i.i47.i, %tbl_size.i.i43.i
  %offset_ptr.i.i49.i = getelementptr i32, ptr %offset_tbl.i.i44.i, i64 %hash.i.i.i48.i
  %offset.i.i50.i = load i32, ptr %offset_ptr.i.i49.i, align 4
  %eq.i.i630 = icmp eq i32 %181, %offset.i.i50.i
  call void @llvm.assume(i1 %eq.i.i630) #30
  %183 = load ptr, ptr %result.i85, align 8
  %184 = load ptr, ptr %69, align 8
  %result.i.i631 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %185 = getelementptr i8, ptr %result.i.i631, i64 16
  store ptr @_parameterization_Nil, ptr %185, align 8
  %result.i66.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %186 = getelementptr i8, ptr %result.i66.i, i64 16
  store ptr %184, ptr %186, align 8
  %187 = getelementptr i8, ptr %result.i66.i, i64 8
  store ptr %183, ptr %187, align 8
  %188 = getelementptr i8, ptr %result.i66.i, i64 24
  store ptr null, ptr %188, align 8
  %189 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i66.i)
  store ptr @Entry, ptr %result.i66.i, align 8
  %190 = getelementptr i8, ptr %result.i.i631, i64 8
  store ptr %result.i66.i, ptr %190, align 8
  %191 = getelementptr i8, ptr %result.i.i631, i64 24
  store ptr null, ptr %191, align 8
  %192 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i631)
  store ptr @union_typ, ptr %result.i.i631, align 8
  %result.i67.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i631, ptr %result.i67.i, align 8
  %193 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i67.i)
  %194 = getelementptr i8, ptr %result.i67.i, i64 16
  store i32 %173, ptr %194, align 4
  %195 = getelementptr i8, ptr %result.i67.i, i64 20
  store i32 %173, ptr %195, align 4
  %196 = zext nneg i32 %173 to i64
  %197 = shl nuw nsw i64 %196, 5
  %result.i.i.i632 = call noalias ptr @bump_malloc_inner(i64 noundef %197, ptr nonnull @current_ptr) #29
  %198 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %199 = getelementptr i8, ptr %result.i67.i, i64 8
  store ptr %result.i.i.i632, ptr %199, align 8
  store ptr @Array, ptr %88, align 8
  store ptr %result.i67.i, ptr %89, align 8
  store i32 9, ptr %91, align 4
  store i32 0, ptr %92, align 4
  store i32 0, ptr %93, align 4
  %invariant.gep.i = getelementptr i8, ptr %175, i64 64
  %200 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %201 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %202 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %175)
  %203 = sext i32 %181 to i64
  %gep.i745 = getelementptr ptr, ptr %invariant.gep.i, i64 %203
  %204 = load ptr, ptr %gep.i745, align 8
  %205 = call ptr %204({ ptr, ptr, ptr, i32 } %182, ptr nonnull %2)
  %206 = call i32 %205({ ptr, ptr, ptr, i32 } %182, { ptr, ptr, ptr, i32 } %182, ptr nonnull %2)
  %207 = icmp sgt i32 %206, 0
  br i1 %207, label %.lr.ph748, label %HashMap_resize_new_capacityPtri32.exit

.lr.ph748:                                        ; preds = %171
  %invariant.gep172.i = getelementptr i8, ptr %175, i64 120
  %208 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %gep173.i = getelementptr ptr, ptr %invariant.gep172.i, i64 %203
  br label %209

209:                                              ; preds = %.lr.ph748, %._crit_edge3.i
  %.reg2mem31.0.i746 = phi i32 [ 0, %.lr.ph748 ], [ %476, %._crit_edge3.i ]
  store ptr @_parameterization_Ptri32, ptr %37, align 8
  %210 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %37)
  %211 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %175)
  %212 = load ptr, ptr %gep173.i, align 8
  store ptr @i32_typ, ptr %38, align 8
  %213 = call ptr %212({ ptr, ptr, ptr, i32 } %182, ptr nonnull %38)
  %214 = call { ptr, i160 } %213({ ptr, ptr, ptr, i32 } %182, { ptr, ptr, ptr, i32 } %182, ptr nonnull %37, i32 %.reg2mem31.0.i746)
  %.fca.0.extract30.i = extractvalue { ptr, i160 } %214, 0
  %215 = icmp ne ptr %.fca.0.extract30.i, @nil_typ
  %216 = icmp ne ptr %.fca.0.extract30.i, null
  %.not37.i = and i1 %215, %216
  br i1 %.not37.i, label %217, label %._crit_edge3.i

217:                                              ; preds = %209
  %.fca.1.extract32.i = extractvalue { ptr, i160 } %214, 1
  %.sroa.5164.8.extract.trunc.i = trunc i160 %.fca.1.extract32.i to i64
  %218 = inttoptr i64 %.sroa.5164.8.extract.trunc.i to ptr
  %.sroa.9.8.extract.shift.i = lshr i160 %.fca.1.extract32.i, 64
  %.sroa.9.8.extract.trunc.i = trunc i160 %.sroa.9.8.extract.shift.i to i64
  %219 = inttoptr i64 %.sroa.9.8.extract.trunc.i to ptr
  %hash_coef_ptr.i.i83.i = getelementptr i8, ptr %.fca.0.extract30.i, i64 8
  %tbl_size_ptr.i.i84.i = getelementptr i8, ptr %.fca.0.extract30.i, i64 16
  %offset_tbl_ptr.i.i85.i = getelementptr i8, ptr %.fca.0.extract30.i, i64 40
  %hash_coef.i.i86.i = load i64, ptr %hash_coef_ptr.i.i83.i, align 4
  %tbl_size.i.i87.i = load i64, ptr %tbl_size_ptr.i.i84.i, align 4
  %offset_tbl.i.i88.i = load ptr, ptr %offset_tbl_ptr.i.i85.i, align 8
  %product.i.i.i89.i = mul i64 %hash_coef.i.i86.i, 4015701072841558310
  %shifted.i.i.i90.i = lshr i64 %product.i.i.i89.i, 32
  %xored.i.i.i91.i = xor i64 %shifted.i.i.i90.i, %product.i.i.i89.i
  %hash.i.i.i92.i = and i64 %xored.i.i.i91.i, %tbl_size.i.i87.i
  %offset_ptr.i.i93.i = getelementptr i32, ptr %offset_tbl.i.i88.i, i64 %hash.i.i.i92.i
  %offset.i.i94.i = load i32, ptr %offset_ptr.i.i93.i, align 4
  %220 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract30.i, 0
  %221 = insertvalue { ptr, ptr, ptr, i32 } %220, ptr %218, 1
  %222 = insertvalue { ptr, ptr, ptr, i32 } %221, ptr %219, 2
  %223 = insertvalue { ptr, ptr, ptr, i32 } %222, i32 %offset.i.i94.i, 3
  %224 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %225 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %226 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract30.i)
  %227 = sext i32 %offset.i.i94.i to i64
  %228 = getelementptr ptr, ptr %.fca.0.extract30.i, i64 %227
  %229 = getelementptr i8, ptr %228, i64 56
  %230 = load ptr, ptr %229, align 8
  %231 = call ptr %230({ ptr, ptr, ptr, i32 } %223, ptr nonnull %2)
  %232 = call { ptr, i160 } %231({ ptr, ptr, ptr, i32 } %223, { ptr, ptr, ptr, i32 } %223, ptr nonnull %2)
  %.fca.0.extract23.i = extractvalue { ptr, i160 } %232, 0
  %233 = getelementptr i8, ptr %.fca.0.extract23.i, i64 8
  %234 = getelementptr i8, ptr %.fca.0.extract23.i, i64 16
  %235 = getelementptr i8, ptr %.fca.0.extract23.i, i64 24
  %236 = getelementptr i8, ptr %.fca.0.extract23.i, i64 32
  %237 = load i64, ptr %233, align 4
  %238 = load i64, ptr %234, align 4
  %239 = load ptr, ptr %235, align 8
  %240 = load ptr, ptr %236, align 8
  %result.i96.i = call i1 %239(i64 %238, i64 %237, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %240) #3
  br i1 %result.i96.i, label %._crit_edge3.i, label %241

241:                                              ; preds = %217
  %result.i97.i = call i1 %239(i64 %238, i64 %237, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr readonly %240) #3
  br i1 %result.i97.i, label %242, label %._crit_edge3.i

242:                                              ; preds = %241
  %243 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %244 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %245 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract30.i)
  %246 = getelementptr i8, ptr %228, i64 48
  %247 = load ptr, ptr %246, align 8
  %248 = call ptr %247({ ptr, ptr, ptr, i32 } %223, ptr nonnull %2)
  %249 = call { ptr, i160 } %248({ ptr, ptr, ptr, i32 } %223, { ptr, ptr, ptr, i32 } %223, ptr nonnull %2)
  %250 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %251 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %252 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract30.i)
  %253 = getelementptr i8, ptr %228, i64 64
  %254 = load ptr, ptr %253, align 8
  %255 = call ptr %254({ ptr, ptr, ptr, i32 } %223, ptr nonnull %2)
  %256 = call i32 %255({ ptr, ptr, ptr, i32 } %223, { ptr, ptr, ptr, i32 } %223, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %17)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %18)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %19)
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %20)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %21)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %22)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6)
  %257 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %258 = load ptr, ptr %88, align 8
  %259 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %258, 0
  %260 = load ptr, ptr %89, align 8
  %261 = insertvalue { ptr, ptr, ptr, i32 } %259, ptr %260, 1
  %262 = load ptr, ptr %90, align 8
  %263 = insertvalue { ptr, ptr, ptr, i32 } %261, ptr %262, 2
  %264 = load i32, ptr %91, align 4
  %265 = insertvalue { ptr, ptr, ptr, i32 } %263, i32 %264, 3
  %hash_coef_ptr.i.i51.i1267 = getelementptr i8, ptr %258, i64 8
  %tbl_size_ptr.i.i52.i1268 = getelementptr i8, ptr %258, i64 16
  %offset_tbl_ptr.i.i53.i1269 = getelementptr i8, ptr %258, i64 40
  %hash_coef.i.i54.i1270 = load i64, ptr %hash_coef_ptr.i.i51.i1267, align 4
  %tbl_size.i.i55.i1271 = load i64, ptr %tbl_size_ptr.i.i52.i1268, align 4
  %offset_tbl.i.i56.i1272 = load ptr, ptr %offset_tbl_ptr.i.i53.i1269, align 8
  %product.i.i.i57.i1273 = mul i64 %hash_coef.i.i54.i1270, -5261542750394134544
  %shifted.i.i.i58.i1274 = lshr i64 %product.i.i.i57.i1273, 32
  %xored.i.i.i59.i1275 = xor i64 %shifted.i.i.i58.i1274, %product.i.i.i57.i1273
  %hash.i.i.i60.i1276 = and i64 %xored.i.i.i59.i1275, %tbl_size.i.i55.i1271
  %offset_ptr.i.i61.i1277 = getelementptr i32, ptr %offset_tbl.i.i56.i1272, i64 %hash.i.i.i60.i1276
  %offset.i.i62.i1278 = load i32, ptr %offset_ptr.i.i61.i1277, align 4
  %eq.i.i1279 = icmp eq i32 %264, %offset.i.i62.i1278
  call void @llvm.assume(i1 %eq.i.i1279) #30
  %266 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %267 = call ptr @llvm.invariant.start.p0(i64 600, ptr %258)
  %268 = sext i32 %264 to i64
  %269 = getelementptr ptr, ptr %258, i64 %268
  %270 = getelementptr i8, ptr %269, i64 64
  %271 = load ptr, ptr %270, align 8
  %272 = call ptr %271({ ptr, ptr, ptr, i32 } %265, ptr nonnull %2)
  %273 = call i32 %272({ ptr, ptr, ptr, i32 } %265, { ptr, ptr, ptr, i32 } %265, ptr nonnull %2)
  %274 = add i32 %273, -1
  %275 = and i32 %274, %256
  %276 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  br label %277

277:                                              ; preds = %326, %242
  %spec.store.select.i13181332 = phi i32 [ %spec.store.select.i1318, %326 ], [ -1, %242 ]
  %.0..0..0..i1280 = phi i32 [ %344, %326 ], [ %275, %242 ]
  %278 = load ptr, ptr %88, align 8
  %279 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %278, 0
  %280 = load ptr, ptr %89, align 8
  %281 = insertvalue { ptr, ptr, ptr, i32 } %279, ptr %280, 1
  %282 = load ptr, ptr %90, align 8
  %283 = insertvalue { ptr, ptr, ptr, i32 } %281, ptr %282, 2
  %284 = load i32, ptr %91, align 4
  %285 = insertvalue { ptr, ptr, ptr, i32 } %283, i32 %284, 3
  %hash_coef_ptr.i.i65.i1285 = getelementptr i8, ptr %278, i64 8
  %tbl_size_ptr.i.i66.i1286 = getelementptr i8, ptr %278, i64 16
  %offset_tbl_ptr.i.i67.i1287 = getelementptr i8, ptr %278, i64 40
  %hash_coef.i.i68.i1288 = load i64, ptr %hash_coef_ptr.i.i65.i1285, align 4
  %tbl_size.i.i69.i1289 = load i64, ptr %tbl_size_ptr.i.i66.i1286, align 4
  %offset_tbl.i.i70.i1290 = load ptr, ptr %offset_tbl_ptr.i.i67.i1287, align 8
  %product.i.i.i71.i1291 = mul i64 %hash_coef.i.i68.i1288, -5261542750394134544
  %shifted.i.i.i72.i1292 = lshr i64 %product.i.i.i71.i1291, 32
  %xored.i.i.i73.i1293 = xor i64 %shifted.i.i.i72.i1292, %product.i.i.i71.i1291
  %hash.i.i.i74.i1294 = and i64 %xored.i.i.i73.i1293, %tbl_size.i.i69.i1289
  %offset_ptr.i.i75.i1295 = getelementptr i32, ptr %offset_tbl.i.i70.i1290, i64 %hash.i.i.i74.i1294
  %offset.i.i76.i1296 = load i32, ptr %offset_ptr.i.i75.i1295, align 4
  %eq.i79.i1297 = icmp eq i32 %284, %offset.i.i76.i1296
  call void @llvm.assume(i1 %eq.i79.i1297) #30
  %286 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  store ptr @_parameterization_Ptri32, ptr %5, align 8
  %287 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %5)
  %288 = call ptr @llvm.invariant.start.p0(i64 600, ptr %278)
  %289 = sext i32 %284 to i64
  %290 = getelementptr ptr, ptr %278, i64 %289
  %291 = getelementptr i8, ptr %290, i64 120
  %292 = load ptr, ptr %291, align 8
  store ptr @i32_typ, ptr %6, align 8
  %293 = call ptr %292({ ptr, ptr, ptr, i32 } %285, ptr nonnull %6)
  %294 = call { ptr, i160 } %293({ ptr, ptr, ptr, i32 } %285, { ptr, ptr, ptr, i32 } %285, ptr nonnull %5, i32 %.0..0..0..i1280)
  %.fca.0.extract36.i1298 = extractvalue { ptr, i160 } %294, 0
  %295 = icmp eq ptr %.fca.0.extract36.i1298, @nil_typ
  %296 = icmp eq ptr %.fca.0.extract36.i1298, null
  %297 = or i1 %295, %296
  br i1 %297, label %345, label %298

298:                                              ; preds = %277
  %.fca.1.extract38.i1299 = extractvalue { ptr, i160 } %294, 1
  %.sroa.5.8.extract.shift.i1300 = lshr i160 %.fca.1.extract38.i1299, 64
  %.sroa.5.8.extract.trunc.i1301 = trunc i160 %.sroa.5.8.extract.shift.i1300 to i64
  %.sroa.2.8.extract.trunc165.i1302 = trunc i160 %.fca.1.extract38.i1299 to i64
  %299 = inttoptr i64 %.sroa.2.8.extract.trunc165.i1302 to ptr
  %300 = inttoptr i64 %.sroa.5.8.extract.trunc.i1301 to ptr
  %hash_coef_ptr.i.i81.i1303 = getelementptr i8, ptr %.fca.0.extract36.i1298, i64 8
  %tbl_size_ptr.i.i82.i1304 = getelementptr i8, ptr %.fca.0.extract36.i1298, i64 16
  %offset_tbl_ptr.i.i83.i1305 = getelementptr i8, ptr %.fca.0.extract36.i1298, i64 40
  %hash_coef.i.i84.i1306 = load i64, ptr %hash_coef_ptr.i.i81.i1303, align 4
  %tbl_size.i.i85.i1307 = load i64, ptr %tbl_size_ptr.i.i82.i1304, align 4
  %offset_tbl.i.i86.i1308 = load ptr, ptr %offset_tbl_ptr.i.i83.i1305, align 8
  %product.i.i.i87.i1309 = mul i64 %hash_coef.i.i84.i1306, 4015701072841558310
  %shifted.i.i.i88.i1310 = lshr i64 %product.i.i.i87.i1309, 32
  %xored.i.i.i89.i1311 = xor i64 %shifted.i.i.i88.i1310, %product.i.i.i87.i1309
  %hash.i.i.i90.i1312 = and i64 %xored.i.i.i89.i1311, %tbl_size.i.i85.i1307
  %offset_ptr.i.i91.i1313 = getelementptr i32, ptr %offset_tbl.i.i86.i1308, i64 %hash.i.i.i90.i1312
  %offset.i.i92.i1314 = load i32, ptr %offset_ptr.i.i91.i1313, align 4
  %301 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract36.i1298, 0
  %302 = insertvalue { ptr, ptr, ptr, i32 } %301, ptr %299, 1
  %303 = insertvalue { ptr, ptr, ptr, i32 } %302, ptr %300, 2
  %304 = insertvalue { ptr, ptr, ptr, i32 } %303, i32 %offset.i.i92.i1314, 3
  %305 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %306 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %307 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i1298)
  %308 = sext i32 %offset.i.i92.i1314 to i64
  %309 = getelementptr ptr, ptr %.fca.0.extract36.i1298, i64 %308
  %310 = getelementptr i8, ptr %309, i64 64
  %311 = load ptr, ptr %310, align 8
  %312 = call ptr %311({ ptr, ptr, ptr, i32 } %304, ptr nonnull %2)
  %313 = call i32 %312({ ptr, ptr, ptr, i32 } %304, { ptr, ptr, ptr, i32 } %304, ptr nonnull %2)
  %314 = icmp eq i32 %313, %256
  %315 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %316 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %317 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i1298)
  %318 = getelementptr i8, ptr %309, i64 48
  %319 = load ptr, ptr %318, align 8
  %320 = call ptr %319({ ptr, ptr, ptr, i32 } %304, ptr nonnull %2)
  %321 = call { ptr, i160 } %320({ ptr, ptr, ptr, i32 } %304, { ptr, ptr, ptr, i32 } %304, ptr nonnull %2)
  %322 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %323 = load ptr, ptr %75, align 8
  %324 = call i1 %323({ ptr, i160 } %321, { ptr, i160 } %249)
  %325 = and i1 %314, %324
  br i1 %325, label %HashMap_find_slot_keyK_hashPtri32.exit1319, label %326

326:                                              ; preds = %298
  %327 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %328 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %329 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i1298)
  %330 = getelementptr i8, ptr %309, i64 56
  %331 = load ptr, ptr %330, align 8
  %332 = call ptr %331({ ptr, ptr, ptr, i32 } %304, ptr nonnull %2)
  %333 = call { ptr, i160 } %332({ ptr, ptr, ptr, i32 } %304, { ptr, ptr, ptr, i32 } %304, ptr nonnull %2)
  %.fca.0.extract15.i1315 = extractvalue { ptr, i160 } %333, 0
  %334 = getelementptr i8, ptr %.fca.0.extract15.i1315, i64 8
  %335 = getelementptr i8, ptr %.fca.0.extract15.i1315, i64 16
  %336 = getelementptr i8, ptr %.fca.0.extract15.i1315, i64 24
  %337 = getelementptr i8, ptr %.fca.0.extract15.i1315, i64 32
  %338 = load i64, ptr %334, align 4
  %339 = load i64, ptr %335, align 4
  %340 = load ptr, ptr %336, align 8
  %341 = load ptr, ptr %337, align 8
  %result.i.i1316 = call i1 %340(i64 %339, i64 %338, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %341) #3
  %342 = icmp eq i32 %spec.store.select.i13181332, -1
  %or.cond.i1317 = select i1 %result.i.i1316, i1 %342, i1 false
  %spec.store.select.i1318 = select i1 %or.cond.i1317, i32 %.0..0..0..i1280, i32 %spec.store.select.i13181332
  %343 = add i32 %.0..0..0..i1280, 1
  %344 = and i32 %343, %274
  br label %277

345:                                              ; preds = %277
  %346 = icmp eq i32 %spec.store.select.i13181332, -1
  %.pre1349 = select i1 %346, i32 %.0..0..0..i1280, i32 %spec.store.select.i13181332
  br label %HashMap_find_slot_keyK_hashPtri32.exit1319

HashMap_find_slot_keyK_hashPtri32.exit1319:       ; preds = %298, %345
  %347 = phi i32 [ %.pre1349, %345 ], [ %.0..0..0..i1280, %298 ]
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6)
  %348 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %349 = load ptr, ptr %88, align 8
  %350 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %349, 0
  %351 = load ptr, ptr %89, align 8
  %352 = insertvalue { ptr, ptr, ptr, i32 } %350, ptr %351, 1
  %353 = load ptr, ptr %90, align 8
  %354 = insertvalue { ptr, ptr, ptr, i32 } %352, ptr %353, 2
  %355 = load i32, ptr %91, align 4
  %356 = insertvalue { ptr, ptr, ptr, i32 } %354, i32 %355, 3
  %hash_coef_ptr.i.i56.i935 = getelementptr i8, ptr %349, i64 8
  %tbl_size_ptr.i.i57.i936 = getelementptr i8, ptr %349, i64 16
  %offset_tbl_ptr.i.i58.i937 = getelementptr i8, ptr %349, i64 40
  %hash_coef.i.i59.i938 = load i64, ptr %hash_coef_ptr.i.i56.i935, align 4
  %tbl_size.i.i60.i939 = load i64, ptr %tbl_size_ptr.i.i57.i936, align 4
  %offset_tbl.i.i61.i940 = load ptr, ptr %offset_tbl_ptr.i.i58.i937, align 8
  %product.i.i.i62.i941 = mul i64 %hash_coef.i.i59.i938, -5261542750394134544
  %shifted.i.i.i63.i942 = lshr i64 %product.i.i.i62.i941, 32
  %xored.i.i.i64.i943 = xor i64 %shifted.i.i.i63.i942, %product.i.i.i62.i941
  %hash.i.i.i65.i944 = and i64 %xored.i.i.i64.i943, %tbl_size.i.i60.i939
  %offset_ptr.i.i66.i945 = getelementptr i32, ptr %offset_tbl.i.i61.i940, i64 %hash.i.i.i65.i944
  %offset.i.i67.i946 = load i32, ptr %offset_ptr.i.i66.i945, align 4
  %eq.i.i947 = icmp eq i32 %355, %offset.i.i67.i946
  call void @llvm.assume(i1 %eq.i.i947) #30
  store ptr @_parameterization_Ptri32, ptr %17, align 8
  %357 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %17)
  %358 = call ptr @llvm.invariant.start.p0(i64 600, ptr %349)
  %359 = sext i32 %355 to i64
  %360 = getelementptr ptr, ptr %349, i64 %359
  %361 = getelementptr i8, ptr %360, i64 120
  %362 = load ptr, ptr %361, align 8
  store ptr @i32_typ, ptr %18, align 8
  %363 = call ptr %362({ ptr, ptr, ptr, i32 } %356, ptr nonnull %18)
  %364 = call { ptr, i160 } %363({ ptr, ptr, ptr, i32 } %356, { ptr, ptr, ptr, i32 } %356, ptr nonnull %17, i32 %347)
  %.fca.0.extract2.i948 = extractvalue { ptr, i160 } %364, 0
  %365 = load ptr, ptr %result.i85, align 8
  %366 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %367 = load ptr, ptr %69, align 8
  %368 = load ptr, ptr %365, align 8
  %369 = getelementptr i8, ptr %368, i64 48
  %370 = load ptr, ptr %369, align 8
  %371 = call { i64, i64 } %370(ptr nonnull %365)
  %372 = extractvalue { i64, i64 } %371, 0
  %373 = extractvalue { i64, i64 } %371, 1
  %374 = call i64 @llvm.umax.i64(i64 %373, i64 8)
  %375 = urem i64 16, %373
  %376 = icmp eq i64 %375, 0
  %377 = sub i64 %373, %375
  %378 = select i1 %376, i64 0, i64 %377
  %379 = add i64 %378, %372
  %380 = add i64 %379, 16
  %381 = and i64 %379, 7
  %382 = icmp eq i64 %381, 0
  %383 = sub nuw nsw i64 40, %381
  %384 = select i1 %382, i64 32, i64 %383
  %385 = add i64 %380, %384
  %386 = and i64 %385, 3
  %387 = icmp eq i64 %386, 0
  %388 = sub nuw nsw i64 8, %386
  %389 = select i1 %387, i64 4, i64 %388
  %390 = add i64 %389, %385
  %391 = urem i64 %390, %374
  %392 = icmp eq i64 %391, 0
  %393 = sub i64 %374, %391
  %394 = select i1 %392, i64 0, i64 %393
  %395 = add i64 %390, %394
  %result.i.i949 = call noalias ptr @bump_malloc_inner(i64 noundef %395, ptr nonnull @current_ptr) #29
  store ptr %365, ptr %result.i.i949, align 8
  %396 = getelementptr i8, ptr %result.i.i949, i64 8
  store ptr %367, ptr %396, align 8
  %397 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i.i949)
  store ptr @Entry, ptr %19, align 8
  store ptr %result.i.i949, ptr %111, align 8
  store i32 9, ptr %112, align 8
  %398 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %19)
  %399 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Entry, ptr undef, ptr undef, i32 undef }, ptr %result.i.i949, 1
  %400 = insertvalue { ptr, ptr, ptr, i32 } %399, ptr undef, 2
  %401 = insertvalue { ptr, ptr, ptr, i32 } %400, i32 9, 3
  %402 = load ptr, ptr %result.i85, align 8
  %403 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %404 = load ptr, ptr %69, align 8
  store ptr %402, ptr %20, align 8
  store ptr %404, ptr %114, align 8
  store ptr @_parameterization_Ptri32, ptr %115, align 8
  %405 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %20)
  %406 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %407 = load i64, ptr %233, align 4
  %408 = load i64, ptr %234, align 4
  %409 = load ptr, ptr %235, align 8
  %410 = load ptr, ptr %236, align 8
  %result.i.i.i950 = call i1 %409(i64 %408, i64 %407, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr readonly %410) #3
  %411 = select i1 %result.i.i.i950, i64 10, i64 9
  %gep1071 = getelementptr [14 x ptr], ptr getelementptr inbounds (i8, ptr @Entry, i64 72), i64 0, i64 %411
  %412 = load ptr, ptr %gep1071, align 8
  call void %412({ ptr, ptr, ptr, i32 } %401, { ptr, ptr, ptr, i32 } %401, ptr nonnull %20, { ptr, i160 } %249, { ptr, i160 } %232, i32 %256)
  %413 = load ptr, ptr %113, align 8
  %414 = ptrtoint ptr %result.i.i949 to i64
  %415 = ptrtoint ptr %413 to i64
  %.sroa.2.0.insert.ext.i951 = zext i64 %415 to i160
  %.sroa.2.0.insert.shift.i952 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i951, 64
  %.sroa.0.0.insert.ext.i954 = zext i64 %414 to i160
  %.sroa.2.0.insert.insert.i953 = or disjoint i160 %.sroa.2.0.insert.shift.i952, %.sroa.0.0.insert.ext.i954
  %.sroa.0.0.insert.insert.i955 = or disjoint i160 %.sroa.2.0.insert.insert.i953, 3062541302288446171170371466885913903104
  %416 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0.0.insert.insert.i955, 1
  %417 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %418 = load ptr, ptr %88, align 8
  %419 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %418, 0
  %420 = load ptr, ptr %89, align 8
  %421 = insertvalue { ptr, ptr, ptr, i32 } %419, ptr %420, 1
  %422 = load ptr, ptr %90, align 8
  %423 = insertvalue { ptr, ptr, ptr, i32 } %421, ptr %422, 2
  %424 = load i32, ptr %91, align 4
  %425 = insertvalue { ptr, ptr, ptr, i32 } %423, i32 %424, 3
  %hash_coef_ptr.i.i84.i956 = getelementptr i8, ptr %418, i64 8
  %tbl_size_ptr.i.i85.i957 = getelementptr i8, ptr %418, i64 16
  %offset_tbl_ptr.i.i86.i958 = getelementptr i8, ptr %418, i64 40
  %hash_coef.i.i87.i959 = load i64, ptr %hash_coef_ptr.i.i84.i956, align 4
  %tbl_size.i.i88.i960 = load i64, ptr %tbl_size_ptr.i.i85.i957, align 4
  %offset_tbl.i.i89.i961 = load ptr, ptr %offset_tbl_ptr.i.i86.i958, align 8
  %product.i.i.i90.i962 = mul i64 %hash_coef.i.i87.i959, -5261542750394134544
  %shifted.i.i.i91.i963 = lshr i64 %product.i.i.i90.i962, 32
  %xored.i.i.i92.i964 = xor i64 %shifted.i.i.i91.i963, %product.i.i.i90.i962
  %hash.i.i.i93.i965 = and i64 %xored.i.i.i92.i964, %tbl_size.i.i88.i960
  %offset_ptr.i.i94.i966 = getelementptr i32, ptr %offset_tbl.i.i89.i961, i64 %hash.i.i.i93.i965
  %offset.i.i95.i967 = load i32, ptr %offset_ptr.i.i94.i966, align 4
  %eq.i98.i968 = icmp eq i32 %424, %offset.i.i95.i967
  call void @llvm.assume(i1 %eq.i98.i968) #30
  %426 = load ptr, ptr %result.i85, align 8
  %427 = load ptr, ptr %69, align 8
  %result.i99.i969 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %428 = getelementptr i8, ptr %result.i99.i969, i64 16
  store ptr %427, ptr %428, align 8
  %429 = getelementptr i8, ptr %result.i99.i969, i64 8
  store ptr %426, ptr %429, align 8
  %430 = getelementptr i8, ptr %result.i99.i969, i64 24
  store ptr null, ptr %430, align 8
  %431 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i99.i969)
  store ptr @Entry, ptr %result.i99.i969, align 8
  store ptr @_parameterization_Ptri32, ptr %21, align 8
  store ptr %result.i99.i969, ptr %116, align 8
  %432 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %21)
  %433 = call ptr @llvm.invariant.start.p0(i64 600, ptr %418)
  %434 = sext i32 %424 to i64
  %435 = getelementptr ptr, ptr %418, i64 %434
  %436 = getelementptr i8, ptr %435, i64 128
  %437 = load ptr, ptr %436, align 8
  store ptr @i32_typ, ptr %22, align 8
  store ptr @Entry, ptr %117, align 8
  %438 = call ptr %437({ ptr, ptr, ptr, i32 } %425, ptr nonnull %22)
  call void %438({ ptr, ptr, ptr, i32 } %425, { ptr, ptr, ptr, i32 } %425, ptr nonnull %21, i32 %347, { ptr, i160 } %416)
  %439 = icmp eq ptr %.fca.0.extract2.i948, @nil_typ
  %440 = icmp eq ptr %.fca.0.extract2.i948, null
  %441 = or i1 %439, %440
  br i1 %441, label %._crit_edge.thread.i991, label %._crit_edge.i970

._crit_edge.thread.i991:                          ; preds = %HashMap_find_slot_keyK_hashPtri32.exit1319
  %442 = load i32, ptr %92, align 4
  %443 = add i32 %442, 1
  store i32 %443, ptr %92, align 4
  br label %._crit_edge1.sink.split.i989

._crit_edge.i970:                                 ; preds = %HashMap_find_slot_keyK_hashPtri32.exit1319
  %.fca.1.extract4.i971 = extractvalue { ptr, i160 } %364, 1
  %.sroa.3192.8.extract.trunc.i972 = trunc i160 %.fca.1.extract4.i971 to i64
  %444 = inttoptr i64 %.sroa.3192.8.extract.trunc.i972 to ptr
  %.sroa.5193.8.extract.shift.i973 = lshr i160 %.fca.1.extract4.i971, 64
  %.sroa.5193.8.extract.trunc.i974 = trunc i160 %.sroa.5193.8.extract.shift.i973 to i64
  %445 = inttoptr i64 %.sroa.5193.8.extract.trunc.i974 to ptr
  %hash_coef_ptr.i.i101.i975 = getelementptr i8, ptr %.fca.0.extract2.i948, i64 8
  %tbl_size_ptr.i.i102.i976 = getelementptr i8, ptr %.fca.0.extract2.i948, i64 16
  %offset_tbl_ptr.i.i103.i977 = getelementptr i8, ptr %.fca.0.extract2.i948, i64 40
  %hash_coef.i.i104.i978 = load i64, ptr %hash_coef_ptr.i.i101.i975, align 4
  %tbl_size.i.i105.i979 = load i64, ptr %tbl_size_ptr.i.i102.i976, align 4
  %offset_tbl.i.i106.i980 = load ptr, ptr %offset_tbl_ptr.i.i103.i977, align 8
  %product.i.i.i107.i981 = mul i64 %hash_coef.i.i104.i978, 4015701072841558310
  %shifted.i.i.i108.i982 = lshr i64 %product.i.i.i107.i981, 32
  %xored.i.i.i109.i983 = xor i64 %shifted.i.i.i108.i982, %product.i.i.i107.i981
  %hash.i.i.i110.i984 = and i64 %xored.i.i.i109.i983, %tbl_size.i.i105.i979
  %offset_ptr.i.i111.i985 = getelementptr i32, ptr %offset_tbl.i.i106.i980, i64 %hash.i.i.i110.i984
  %offset.i.i112.i986 = load i32, ptr %offset_ptr.i.i111.i985, align 4
  %446 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract2.i948, 0
  %447 = insertvalue { ptr, ptr, ptr, i32 } %446, ptr %444, 1
  %448 = insertvalue { ptr, ptr, ptr, i32 } %447, ptr %445, 2
  %449 = insertvalue { ptr, ptr, ptr, i32 } %448, i32 %offset.i.i112.i986, 3
  %450 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %451 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %452 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract2.i948)
  %453 = sext i32 %offset.i.i112.i986 to i64
  %454 = getelementptr ptr, ptr %.fca.0.extract2.i948, i64 %453
  %455 = getelementptr i8, ptr %454, i64 56
  %456 = load ptr, ptr %455, align 8
  %457 = call ptr %456({ ptr, ptr, ptr, i32 } %449, ptr nonnull %2)
  %458 = call { ptr, i160 } %457({ ptr, ptr, ptr, i32 } %449, { ptr, ptr, ptr, i32 } %449, ptr nonnull %2)
  %.fca.0.extract45.i987 = extractvalue { ptr, i160 } %458, 0
  %459 = getelementptr i8, ptr %.fca.0.extract45.i987, i64 8
  %460 = getelementptr i8, ptr %.fca.0.extract45.i987, i64 16
  %461 = getelementptr i8, ptr %.fca.0.extract45.i987, i64 24
  %462 = getelementptr i8, ptr %.fca.0.extract45.i987, i64 32
  %463 = load i64, ptr %459, align 4
  %464 = load i64, ptr %460, align 4
  %465 = load ptr, ptr %461, align 8
  %466 = load ptr, ptr %462, align 8
  %result.i114.i988 = call i1 %465(i64 %464, i64 %463, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %466) #3
  br i1 %result.i114.i988, label %._crit_edge1.sink.split.i989, label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit992

._crit_edge1.sink.split.i989:                     ; preds = %._crit_edge.i970, %._crit_edge.thread.i991
  %.sink202.i990 = phi i64 [ 40, %._crit_edge.thread.i991 ], [ 32, %._crit_edge.i970 ]
  %467 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %468 = getelementptr i8, ptr getelementptr inbounds (i8, ptr @HashMap, i64 72), i64 %.sink202.i990
  %469 = load ptr, ptr %468, align 8
  %470 = load ptr, ptr %469, align 8
  %471 = call i32 %470(ptr nonnull %result.i85)
  %472 = add i32 %471, 1
  %473 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %474 = getelementptr i8, ptr %469, i64 8
  %475 = load ptr, ptr %474, align 8
  call void %475(ptr nonnull %result.i85, i32 %472)
  br label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit992

HashMap_insert_internal_keyK_valueV_hashPtri32.exit992: ; preds = %._crit_edge.i970, %._crit_edge1.sink.split.i989
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %17)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %18)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %19)
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %20)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %21)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %22)
  br label %._crit_edge3.i

._crit_edge3.i:                                   ; preds = %HashMap_insert_internal_keyK_valueV_hashPtri32.exit992, %241, %217, %209
  %476 = add nuw nsw i32 %.reg2mem31.0.i746, 1
  %477 = load ptr, ptr %gep.i745, align 8
  %478 = call ptr %477({ ptr, ptr, ptr, i32 } %182, ptr nonnull %2)
  %479 = call i32 %478({ ptr, ptr, ptr, i32 } %182, { ptr, ptr, ptr, i32 } %182, ptr nonnull %2)
  %480 = icmp slt i32 %476, %479
  br i1 %480, label %209, label %HashMap_resize_new_capacityPtri32.exit

HashMap_resize_new_capacityPtri32.exit:           ; preds = %._crit_edge3.i, %171
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %37)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %38)
  br label %HashMap_insert_keyK_valueV.exit

HashMap_insert_keyK_valueV.exit:                  ; preds = %118, %HashMap_resize_new_capacityPtri32.exit
  %481 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %482 = load ptr, ptr %74, align 8
  %483 = call i32 %482({ ptr, i160 } %123)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %32)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %33)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %34)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %35)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %36)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %15)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %16)
  %484 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %485 = load ptr, ptr %88, align 8
  %486 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %485, 0
  %487 = load ptr, ptr %89, align 8
  %488 = insertvalue { ptr, ptr, ptr, i32 } %486, ptr %487, 1
  %489 = load ptr, ptr %90, align 8
  %490 = insertvalue { ptr, ptr, ptr, i32 } %488, ptr %489, 2
  %491 = load i32, ptr %91, align 4
  %492 = insertvalue { ptr, ptr, ptr, i32 } %490, i32 %491, 3
  %hash_coef_ptr.i.i51.i1009 = getelementptr i8, ptr %485, i64 8
  %tbl_size_ptr.i.i52.i1010 = getelementptr i8, ptr %485, i64 16
  %offset_tbl_ptr.i.i53.i1011 = getelementptr i8, ptr %485, i64 40
  %hash_coef.i.i54.i1012 = load i64, ptr %hash_coef_ptr.i.i51.i1009, align 4
  %tbl_size.i.i55.i1013 = load i64, ptr %tbl_size_ptr.i.i52.i1010, align 4
  %offset_tbl.i.i56.i1014 = load ptr, ptr %offset_tbl_ptr.i.i53.i1011, align 8
  %product.i.i.i57.i1015 = mul i64 %hash_coef.i.i54.i1012, -5261542750394134544
  %shifted.i.i.i58.i1016 = lshr i64 %product.i.i.i57.i1015, 32
  %xored.i.i.i59.i1017 = xor i64 %shifted.i.i.i58.i1016, %product.i.i.i57.i1015
  %hash.i.i.i60.i1018 = and i64 %xored.i.i.i59.i1017, %tbl_size.i.i55.i1013
  %offset_ptr.i.i61.i1019 = getelementptr i32, ptr %offset_tbl.i.i56.i1014, i64 %hash.i.i.i60.i1018
  %offset.i.i62.i1020 = load i32, ptr %offset_ptr.i.i61.i1019, align 4
  %eq.i.i1021 = icmp eq i32 %491, %offset.i.i62.i1020
  call void @llvm.assume(i1 %eq.i.i1021) #30
  %493 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %494 = call ptr @llvm.invariant.start.p0(i64 600, ptr %485)
  %495 = sext i32 %491 to i64
  %496 = getelementptr ptr, ptr %485, i64 %495
  %497 = getelementptr i8, ptr %496, i64 64
  %498 = load ptr, ptr %497, align 8
  %499 = call ptr %498({ ptr, ptr, ptr, i32 } %492, ptr nonnull %2)
  %500 = call i32 %499({ ptr, ptr, ptr, i32 } %492, { ptr, ptr, ptr, i32 } %492, ptr nonnull %2)
  %501 = add i32 %500, -1
  %502 = and i32 %501, %483
  %503 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  br label %504

504:                                              ; preds = %553, %HashMap_insert_keyK_valueV.exit
  %spec.store.select.i10601072 = phi i32 [ %spec.store.select.i1060, %553 ], [ -1, %HashMap_insert_keyK_valueV.exit ]
  %.0..0..0..i1022 = phi i32 [ %571, %553 ], [ %502, %HashMap_insert_keyK_valueV.exit ]
  %505 = load ptr, ptr %88, align 8
  %506 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %505, 0
  %507 = load ptr, ptr %89, align 8
  %508 = insertvalue { ptr, ptr, ptr, i32 } %506, ptr %507, 1
  %509 = load ptr, ptr %90, align 8
  %510 = insertvalue { ptr, ptr, ptr, i32 } %508, ptr %509, 2
  %511 = load i32, ptr %91, align 4
  %512 = insertvalue { ptr, ptr, ptr, i32 } %510, i32 %511, 3
  %hash_coef_ptr.i.i65.i1027 = getelementptr i8, ptr %505, i64 8
  %tbl_size_ptr.i.i66.i1028 = getelementptr i8, ptr %505, i64 16
  %offset_tbl_ptr.i.i67.i1029 = getelementptr i8, ptr %505, i64 40
  %hash_coef.i.i68.i1030 = load i64, ptr %hash_coef_ptr.i.i65.i1027, align 4
  %tbl_size.i.i69.i1031 = load i64, ptr %tbl_size_ptr.i.i66.i1028, align 4
  %offset_tbl.i.i70.i1032 = load ptr, ptr %offset_tbl_ptr.i.i67.i1029, align 8
  %product.i.i.i71.i1033 = mul i64 %hash_coef.i.i68.i1030, -5261542750394134544
  %shifted.i.i.i72.i1034 = lshr i64 %product.i.i.i71.i1033, 32
  %xored.i.i.i73.i1035 = xor i64 %shifted.i.i.i72.i1034, %product.i.i.i71.i1033
  %hash.i.i.i74.i1036 = and i64 %xored.i.i.i73.i1035, %tbl_size.i.i69.i1031
  %offset_ptr.i.i75.i1037 = getelementptr i32, ptr %offset_tbl.i.i70.i1032, i64 %hash.i.i.i74.i1036
  %offset.i.i76.i1038 = load i32, ptr %offset_ptr.i.i75.i1037, align 4
  %eq.i79.i1039 = icmp eq i32 %511, %offset.i.i76.i1038
  call void @llvm.assume(i1 %eq.i79.i1039) #30
  %513 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  store ptr @_parameterization_Ptri32, ptr %15, align 8
  %514 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %15)
  %515 = call ptr @llvm.invariant.start.p0(i64 600, ptr %505)
  %516 = sext i32 %511 to i64
  %517 = getelementptr ptr, ptr %505, i64 %516
  %518 = getelementptr i8, ptr %517, i64 120
  %519 = load ptr, ptr %518, align 8
  store ptr @i32_typ, ptr %16, align 8
  %520 = call ptr %519({ ptr, ptr, ptr, i32 } %512, ptr nonnull %16)
  %521 = call { ptr, i160 } %520({ ptr, ptr, ptr, i32 } %512, { ptr, ptr, ptr, i32 } %512, ptr nonnull %15, i32 %.0..0..0..i1022)
  %.fca.0.extract36.i1040 = extractvalue { ptr, i160 } %521, 0
  %522 = icmp eq ptr %.fca.0.extract36.i1040, @nil_typ
  %523 = icmp eq ptr %.fca.0.extract36.i1040, null
  %524 = or i1 %522, %523
  br i1 %524, label %572, label %525

525:                                              ; preds = %504
  %.fca.1.extract38.i1041 = extractvalue { ptr, i160 } %521, 1
  %.sroa.5.8.extract.shift.i1042 = lshr i160 %.fca.1.extract38.i1041, 64
  %.sroa.5.8.extract.trunc.i1043 = trunc i160 %.sroa.5.8.extract.shift.i1042 to i64
  %.sroa.2.8.extract.trunc165.i1044 = trunc i160 %.fca.1.extract38.i1041 to i64
  %526 = inttoptr i64 %.sroa.2.8.extract.trunc165.i1044 to ptr
  %527 = inttoptr i64 %.sroa.5.8.extract.trunc.i1043 to ptr
  %hash_coef_ptr.i.i81.i1045 = getelementptr i8, ptr %.fca.0.extract36.i1040, i64 8
  %tbl_size_ptr.i.i82.i1046 = getelementptr i8, ptr %.fca.0.extract36.i1040, i64 16
  %offset_tbl_ptr.i.i83.i1047 = getelementptr i8, ptr %.fca.0.extract36.i1040, i64 40
  %hash_coef.i.i84.i1048 = load i64, ptr %hash_coef_ptr.i.i81.i1045, align 4
  %tbl_size.i.i85.i1049 = load i64, ptr %tbl_size_ptr.i.i82.i1046, align 4
  %offset_tbl.i.i86.i1050 = load ptr, ptr %offset_tbl_ptr.i.i83.i1047, align 8
  %product.i.i.i87.i1051 = mul i64 %hash_coef.i.i84.i1048, 4015701072841558310
  %shifted.i.i.i88.i1052 = lshr i64 %product.i.i.i87.i1051, 32
  %xored.i.i.i89.i1053 = xor i64 %shifted.i.i.i88.i1052, %product.i.i.i87.i1051
  %hash.i.i.i90.i1054 = and i64 %xored.i.i.i89.i1053, %tbl_size.i.i85.i1049
  %offset_ptr.i.i91.i1055 = getelementptr i32, ptr %offset_tbl.i.i86.i1050, i64 %hash.i.i.i90.i1054
  %offset.i.i92.i1056 = load i32, ptr %offset_ptr.i.i91.i1055, align 4
  %528 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract36.i1040, 0
  %529 = insertvalue { ptr, ptr, ptr, i32 } %528, ptr %526, 1
  %530 = insertvalue { ptr, ptr, ptr, i32 } %529, ptr %527, 2
  %531 = insertvalue { ptr, ptr, ptr, i32 } %530, i32 %offset.i.i92.i1056, 3
  %532 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %533 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %534 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i1040)
  %535 = sext i32 %offset.i.i92.i1056 to i64
  %536 = getelementptr ptr, ptr %.fca.0.extract36.i1040, i64 %535
  %537 = getelementptr i8, ptr %536, i64 64
  %538 = load ptr, ptr %537, align 8
  %539 = call ptr %538({ ptr, ptr, ptr, i32 } %531, ptr nonnull %2)
  %540 = call i32 %539({ ptr, ptr, ptr, i32 } %531, { ptr, ptr, ptr, i32 } %531, ptr nonnull %2)
  %541 = icmp eq i32 %540, %483
  %542 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %543 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %544 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i1040)
  %545 = getelementptr i8, ptr %536, i64 48
  %546 = load ptr, ptr %545, align 8
  %547 = call ptr %546({ ptr, ptr, ptr, i32 } %531, ptr nonnull %2)
  %548 = call { ptr, i160 } %547({ ptr, ptr, ptr, i32 } %531, { ptr, ptr, ptr, i32 } %531, ptr nonnull %2)
  %549 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %550 = load ptr, ptr %75, align 8
  %551 = call i1 %550({ ptr, i160 } %548, { ptr, i160 } %123)
  %552 = and i1 %541, %551
  br i1 %552, label %HashMap_find_slot_keyK_hashPtri32.exit1061, label %553

553:                                              ; preds = %525
  %554 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %555 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %556 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i1040)
  %557 = getelementptr i8, ptr %536, i64 56
  %558 = load ptr, ptr %557, align 8
  %559 = call ptr %558({ ptr, ptr, ptr, i32 } %531, ptr nonnull %2)
  %560 = call { ptr, i160 } %559({ ptr, ptr, ptr, i32 } %531, { ptr, ptr, ptr, i32 } %531, ptr nonnull %2)
  %.fca.0.extract15.i = extractvalue { ptr, i160 } %560, 0
  %561 = getelementptr i8, ptr %.fca.0.extract15.i, i64 8
  %562 = getelementptr i8, ptr %.fca.0.extract15.i, i64 16
  %563 = getelementptr i8, ptr %.fca.0.extract15.i, i64 24
  %564 = getelementptr i8, ptr %.fca.0.extract15.i, i64 32
  %565 = load i64, ptr %561, align 4
  %566 = load i64, ptr %562, align 4
  %567 = load ptr, ptr %563, align 8
  %568 = load ptr, ptr %564, align 8
  %result.i.i1058 = call i1 %567(i64 %566, i64 %565, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %568) #3
  %569 = icmp eq i32 %spec.store.select.i10601072, -1
  %or.cond.i1059 = select i1 %result.i.i1058, i1 %569, i1 false
  %spec.store.select.i1060 = select i1 %or.cond.i1059, i32 %.0..0..0..i1022, i32 %spec.store.select.i10601072
  %570 = add i32 %.0..0..0..i1022, 1
  %571 = and i32 %570, %501
  br label %504

572:                                              ; preds = %504
  %573 = icmp eq i32 %spec.store.select.i10601072, -1
  %.pre1084 = select i1 %573, i32 %.0..0..0..i1022, i32 %spec.store.select.i10601072
  br label %HashMap_find_slot_keyK_hashPtri32.exit1061

HashMap_find_slot_keyK_hashPtri32.exit1061:       ; preds = %525, %572
  %574 = phi i32 [ %.pre1084, %572 ], [ %.0..0..0..i1022, %525 ]
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %15)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %16)
  %575 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %576 = load ptr, ptr %88, align 8
  %577 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %576, 0
  %578 = load ptr, ptr %89, align 8
  %579 = insertvalue { ptr, ptr, ptr, i32 } %577, ptr %578, 1
  %580 = load ptr, ptr %90, align 8
  %581 = insertvalue { ptr, ptr, ptr, i32 } %579, ptr %580, 2
  %582 = load i32, ptr %91, align 4
  %583 = insertvalue { ptr, ptr, ptr, i32 } %581, i32 %582, 3
  %hash_coef_ptr.i.i56.i645 = getelementptr i8, ptr %576, i64 8
  %tbl_size_ptr.i.i57.i646 = getelementptr i8, ptr %576, i64 16
  %offset_tbl_ptr.i.i58.i647 = getelementptr i8, ptr %576, i64 40
  %hash_coef.i.i59.i648 = load i64, ptr %hash_coef_ptr.i.i56.i645, align 4
  %tbl_size.i.i60.i649 = load i64, ptr %tbl_size_ptr.i.i57.i646, align 4
  %offset_tbl.i.i61.i650 = load ptr, ptr %offset_tbl_ptr.i.i58.i647, align 8
  %product.i.i.i62.i651 = mul i64 %hash_coef.i.i59.i648, -5261542750394134544
  %shifted.i.i.i63.i652 = lshr i64 %product.i.i.i62.i651, 32
  %xored.i.i.i64.i653 = xor i64 %shifted.i.i.i63.i652, %product.i.i.i62.i651
  %hash.i.i.i65.i654 = and i64 %xored.i.i.i64.i653, %tbl_size.i.i60.i649
  %offset_ptr.i.i66.i655 = getelementptr i32, ptr %offset_tbl.i.i61.i650, i64 %hash.i.i.i65.i654
  %offset.i.i67.i656 = load i32, ptr %offset_ptr.i.i66.i655, align 4
  %eq.i.i657 = icmp eq i32 %582, %offset.i.i67.i656
  call void @llvm.assume(i1 %eq.i.i657) #30
  store ptr @_parameterization_Ptri32, ptr %32, align 8
  %584 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %32)
  %585 = call ptr @llvm.invariant.start.p0(i64 600, ptr %576)
  %586 = sext i32 %582 to i64
  %587 = getelementptr ptr, ptr %576, i64 %586
  %588 = getelementptr i8, ptr %587, i64 120
  %589 = load ptr, ptr %588, align 8
  store ptr @i32_typ, ptr %33, align 8
  %590 = call ptr %589({ ptr, ptr, ptr, i32 } %583, ptr nonnull %33)
  %591 = call { ptr, i160 } %590({ ptr, ptr, ptr, i32 } %583, { ptr, ptr, ptr, i32 } %583, ptr nonnull %32, i32 %574)
  %.fca.0.extract2.i = extractvalue { ptr, i160 } %591, 0
  %592 = load ptr, ptr %result.i85, align 8
  %593 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %594 = load ptr, ptr %69, align 8
  %595 = load ptr, ptr %592, align 8
  %596 = getelementptr i8, ptr %595, i64 48
  %597 = load ptr, ptr %596, align 8
  %598 = call { i64, i64 } %597(ptr nonnull %592)
  %599 = extractvalue { i64, i64 } %598, 0
  %600 = extractvalue { i64, i64 } %598, 1
  %601 = call i64 @llvm.umax.i64(i64 %600, i64 8)
  %602 = urem i64 16, %600
  %603 = icmp eq i64 %602, 0
  %604 = sub i64 %600, %602
  %605 = select i1 %603, i64 0, i64 %604
  %606 = add i64 %605, %599
  %607 = add i64 %606, 16
  %608 = and i64 %606, 7
  %609 = icmp eq i64 %608, 0
  %610 = sub nuw nsw i64 40, %608
  %611 = select i1 %609, i64 32, i64 %610
  %612 = add i64 %607, %611
  %613 = and i64 %612, 3
  %614 = icmp eq i64 %613, 0
  %615 = sub nuw nsw i64 8, %613
  %616 = select i1 %614, i64 4, i64 %615
  %617 = add i64 %616, %612
  %618 = urem i64 %617, %601
  %619 = icmp eq i64 %618, 0
  %620 = sub i64 %601, %618
  %621 = select i1 %619, i64 0, i64 %620
  %622 = add i64 %617, %621
  %result.i.i658 = call noalias ptr @bump_malloc_inner(i64 noundef %622, ptr nonnull @current_ptr) #29
  store ptr %592, ptr %result.i.i658, align 8
  %623 = getelementptr i8, ptr %result.i.i658, i64 8
  store ptr %594, ptr %623, align 8
  %624 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i.i658)
  store ptr @Entry, ptr %34, align 8
  store ptr %result.i.i658, ptr %106, align 8
  store i32 9, ptr %107, align 8
  %625 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %34)
  %626 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %627 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %628 = load ptr, ptr %592, align 8
  %629 = getelementptr i8, ptr %628, i64 48
  %630 = load ptr, ptr %629, align 8
  %631 = call { i64, i64 } %630(ptr nonnull %592)
  %632 = extractvalue { i64, i64 } %631, 1
  %633 = urem i64 16, %632
  %634 = icmp eq i64 %633, 0
  %reass.sub1470 = sub i64 %632, %633
  %635 = add i64 %reass.sub1470, 16
  %636 = select i1 %634, i64 16, i64 %635
  %637 = getelementptr i8, ptr %result.i.i658, i64 %636
  %638 = load ptr, ptr %result.i.i658, align 8
  %639 = load ptr, ptr %638, align 8
  %640 = getelementptr i8, ptr %639, i64 64
  %641 = load ptr, ptr %640, align 8
  call void %641({ ptr, i160 } %123, ptr nonnull %638, ptr %637)
  %642 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %643 = load ptr, ptr %result.i.i658, align 8
  %644 = load ptr, ptr %643, align 8
  %645 = getelementptr i8, ptr %644, i64 48
  %646 = load ptr, ptr %645, align 8
  %647 = call { i64, i64 } %646(ptr nonnull %643)
  %648 = extractvalue { i64, i64 } %647, 0
  %649 = extractvalue { i64, i64 } %647, 1
  %650 = urem i64 16, %649
  %651 = icmp eq i64 %650, 0
  %652 = sub i64 %649, %650
  %653 = select i1 %651, i64 0, i64 %652
  %654 = add i64 %653, %648
  %655 = and i64 %654, 7
  %656 = icmp eq i64 %655, 0
  %657 = sub nuw nsw i64 8, %655
  %658 = select i1 %656, i64 0, i64 %657
  %659 = getelementptr i8, ptr %result.i.i658, i64 %654
  %660 = getelementptr i8, ptr %659, i64 16
  %661 = getelementptr i8, ptr %660, i64 %658
  store ptr @i32_typ, ptr %661, align 8
  %662 = getelementptr i8, ptr %661, i64 8
  store i160 1, ptr %662, align 4
  %663 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %664 = load ptr, ptr %result.i.i658, align 8
  %665 = load ptr, ptr %664, align 8
  %666 = getelementptr i8, ptr %665, i64 48
  %667 = load ptr, ptr %666, align 8
  %668 = call { i64, i64 } %667(ptr nonnull %664)
  %669 = extractvalue { i64, i64 } %668, 0
  %670 = extractvalue { i64, i64 } %668, 1
  %671 = urem i64 16, %670
  %672 = icmp eq i64 %671, 0
  %673 = sub i64 %670, %671
  %674 = select i1 %672, i64 0, i64 %673
  %675 = add i64 %674, %669
  %676 = add i64 %675, 16
  %677 = and i64 %675, 7
  %678 = icmp eq i64 %677, 0
  %679 = sub nuw nsw i64 40, %677
  %680 = select i1 %678, i64 32, i64 %679
  %681 = add i64 %676, %680
  %682 = and i64 %681, 3
  %683 = icmp eq i64 %682, 0
  %684 = sub nuw nsw i64 4, %682
  %685 = select i1 %683, i64 0, i64 %684
  %686 = getelementptr i8, ptr %result.i.i658, i64 %681
  %687 = getelementptr i8, ptr %686, i64 %685
  store i32 %483, ptr %687, align 4
  %688 = load ptr, ptr %108, align 8
  %689 = ptrtoint ptr %result.i.i658 to i64
  %690 = ptrtoint ptr %688 to i64
  %.sroa.2.0.insert.ext.i = zext i64 %690 to i160
  %.sroa.2.0.insert.shift.i = shl nuw nsw i160 %.sroa.2.0.insert.ext.i, 64
  %.sroa.0.0.insert.ext.i = zext i64 %689 to i160
  %.sroa.2.0.insert.insert.i = or disjoint i160 %.sroa.2.0.insert.shift.i, %.sroa.0.0.insert.ext.i
  %.sroa.0.0.insert.insert.i = or disjoint i160 %.sroa.2.0.insert.insert.i, 3062541302288446171170371466885913903104
  %691 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0.0.insert.insert.i, 1
  %692 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %693 = load ptr, ptr %88, align 8
  %694 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %693, 0
  %695 = load ptr, ptr %89, align 8
  %696 = insertvalue { ptr, ptr, ptr, i32 } %694, ptr %695, 1
  %697 = load ptr, ptr %90, align 8
  %698 = insertvalue { ptr, ptr, ptr, i32 } %696, ptr %697, 2
  %699 = load i32, ptr %91, align 4
  %700 = insertvalue { ptr, ptr, ptr, i32 } %698, i32 %699, 3
  %hash_coef_ptr.i.i84.i = getelementptr i8, ptr %693, i64 8
  %tbl_size_ptr.i.i85.i = getelementptr i8, ptr %693, i64 16
  %offset_tbl_ptr.i.i86.i = getelementptr i8, ptr %693, i64 40
  %hash_coef.i.i87.i = load i64, ptr %hash_coef_ptr.i.i84.i, align 4
  %tbl_size.i.i88.i = load i64, ptr %tbl_size_ptr.i.i85.i, align 4
  %offset_tbl.i.i89.i = load ptr, ptr %offset_tbl_ptr.i.i86.i, align 8
  %product.i.i.i90.i = mul i64 %hash_coef.i.i87.i, -5261542750394134544
  %shifted.i.i.i91.i = lshr i64 %product.i.i.i90.i, 32
  %xored.i.i.i92.i = xor i64 %shifted.i.i.i91.i, %product.i.i.i90.i
  %hash.i.i.i93.i = and i64 %xored.i.i.i92.i, %tbl_size.i.i88.i
  %offset_ptr.i.i94.i = getelementptr i32, ptr %offset_tbl.i.i89.i, i64 %hash.i.i.i93.i
  %offset.i.i95.i = load i32, ptr %offset_ptr.i.i94.i, align 4
  %eq.i98.i = icmp eq i32 %699, %offset.i.i95.i
  call void @llvm.assume(i1 %eq.i98.i) #30
  %701 = load ptr, ptr %result.i85, align 8
  %702 = load ptr, ptr %69, align 8
  %result.i99.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %703 = getelementptr i8, ptr %result.i99.i, i64 16
  store ptr %702, ptr %703, align 8
  %704 = getelementptr i8, ptr %result.i99.i, i64 8
  store ptr %701, ptr %704, align 8
  %705 = getelementptr i8, ptr %result.i99.i, i64 24
  store ptr null, ptr %705, align 8
  %706 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i99.i)
  store ptr @Entry, ptr %result.i99.i, align 8
  store ptr @_parameterization_Ptri32, ptr %35, align 8
  store ptr %result.i99.i, ptr %109, align 8
  %707 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %35)
  %708 = call ptr @llvm.invariant.start.p0(i64 600, ptr %693)
  %709 = sext i32 %699 to i64
  %710 = getelementptr ptr, ptr %693, i64 %709
  %711 = getelementptr i8, ptr %710, i64 128
  %712 = load ptr, ptr %711, align 8
  store ptr @i32_typ, ptr %36, align 8
  store ptr @Entry, ptr %110, align 8
  %713 = call ptr %712({ ptr, ptr, ptr, i32 } %700, ptr nonnull %36)
  call void %713({ ptr, ptr, ptr, i32 } %700, { ptr, ptr, ptr, i32 } %700, ptr nonnull %35, i32 %574, { ptr, i160 } %691)
  %714 = icmp eq ptr %.fca.0.extract2.i, @nil_typ
  %715 = icmp eq ptr %.fca.0.extract2.i, null
  %716 = or i1 %714, %715
  br i1 %716, label %._crit_edge.thread.i, label %._crit_edge.i

._crit_edge.thread.i:                             ; preds = %HashMap_find_slot_keyK_hashPtri32.exit1061
  %717 = load i32, ptr %92, align 4
  %718 = add i32 %717, 1
  store i32 %718, ptr %92, align 4
  br label %._crit_edge1.sink.split.i

._crit_edge.i:                                    ; preds = %HashMap_find_slot_keyK_hashPtri32.exit1061
  %.fca.1.extract4.i664 = extractvalue { ptr, i160 } %591, 1
  %.sroa.3192.8.extract.trunc.i = trunc i160 %.fca.1.extract4.i664 to i64
  %719 = inttoptr i64 %.sroa.3192.8.extract.trunc.i to ptr
  %.sroa.5193.8.extract.shift.i = lshr i160 %.fca.1.extract4.i664, 64
  %.sroa.5193.8.extract.trunc.i = trunc i160 %.sroa.5193.8.extract.shift.i to i64
  %720 = inttoptr i64 %.sroa.5193.8.extract.trunc.i to ptr
  %hash_coef_ptr.i.i101.i = getelementptr i8, ptr %.fca.0.extract2.i, i64 8
  %tbl_size_ptr.i.i102.i = getelementptr i8, ptr %.fca.0.extract2.i, i64 16
  %offset_tbl_ptr.i.i103.i = getelementptr i8, ptr %.fca.0.extract2.i, i64 40
  %hash_coef.i.i104.i = load i64, ptr %hash_coef_ptr.i.i101.i, align 4
  %tbl_size.i.i105.i = load i64, ptr %tbl_size_ptr.i.i102.i, align 4
  %offset_tbl.i.i106.i = load ptr, ptr %offset_tbl_ptr.i.i103.i, align 8
  %product.i.i.i107.i = mul i64 %hash_coef.i.i104.i, 4015701072841558310
  %shifted.i.i.i108.i = lshr i64 %product.i.i.i107.i, 32
  %xored.i.i.i109.i = xor i64 %shifted.i.i.i108.i, %product.i.i.i107.i
  %hash.i.i.i110.i = and i64 %xored.i.i.i109.i, %tbl_size.i.i105.i
  %offset_ptr.i.i111.i = getelementptr i32, ptr %offset_tbl.i.i106.i, i64 %hash.i.i.i110.i
  %offset.i.i112.i = load i32, ptr %offset_ptr.i.i111.i, align 4
  %721 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract2.i, 0
  %722 = insertvalue { ptr, ptr, ptr, i32 } %721, ptr %719, 1
  %723 = insertvalue { ptr, ptr, ptr, i32 } %722, ptr %720, 2
  %724 = insertvalue { ptr, ptr, ptr, i32 } %723, i32 %offset.i.i112.i, 3
  %725 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %726 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %727 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract2.i)
  %728 = sext i32 %offset.i.i112.i to i64
  %729 = getelementptr ptr, ptr %.fca.0.extract2.i, i64 %728
  %730 = getelementptr i8, ptr %729, i64 56
  %731 = load ptr, ptr %730, align 8
  %732 = call ptr %731({ ptr, ptr, ptr, i32 } %724, ptr nonnull %2)
  %733 = call { ptr, i160 } %732({ ptr, ptr, ptr, i32 } %724, { ptr, ptr, ptr, i32 } %724, ptr nonnull %2)
  %.fca.0.extract45.i = extractvalue { ptr, i160 } %733, 0
  %734 = getelementptr i8, ptr %.fca.0.extract45.i, i64 8
  %735 = getelementptr i8, ptr %.fca.0.extract45.i, i64 16
  %736 = getelementptr i8, ptr %.fca.0.extract45.i, i64 24
  %737 = getelementptr i8, ptr %.fca.0.extract45.i, i64 32
  %738 = load i64, ptr %734, align 4
  %739 = load i64, ptr %735, align 4
  %740 = load ptr, ptr %736, align 8
  %741 = load ptr, ptr %737, align 8
  %result.i114.i = call i1 %740(i64 %739, i64 %738, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %741) #3
  br i1 %result.i114.i, label %._crit_edge1.sink.split.i, label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit

._crit_edge1.sink.split.i:                        ; preds = %._crit_edge.i, %._crit_edge.thread.i
  %.sink202.i = phi i64 [ 40, %._crit_edge.thread.i ], [ 32, %._crit_edge.i ]
  %742 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %743 = getelementptr i8, ptr getelementptr inbounds (i8, ptr @HashMap, i64 72), i64 %.sink202.i
  %744 = load ptr, ptr %743, align 8
  %745 = load ptr, ptr %744, align 8
  %746 = call i32 %745(ptr nonnull %result.i85)
  %747 = add i32 %746, 1
  %748 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %749 = getelementptr i8, ptr %744, i64 8
  %750 = load ptr, ptr %749, align 8
  call void %750(ptr nonnull %result.i85, i32 %747)
  br label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit

HashMap_insert_internal_keyK_valueV_hashPtri32.exit: ; preds = %._crit_edge.i, %._crit_edge1.sink.split.i
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %32)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %33)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %34)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %35)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %36)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %751 = add nuw nsw i32 %.reg2mem85.0235, 1
  %752 = icmp slt i32 %751, %0
  br i1 %752, label %118, label %._crit_edge237

._crit_edge237:                                   ; preds = %HashMap_insert_internal_keyK_valueV_hashPtri32.exit
  %753 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %754 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %755 = load i32, ptr %92, align 4
  %756 = call i64 @clock()
  %757 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %invariant.gep = getelementptr i8, ptr %result.i.i254, i64 8
  %758 = getelementptr i8, ptr %result.i, i64 40
  %759 = getelementptr i8, ptr %result.i, i64 60
  %760 = getelementptr inbounds i8, ptr %27, i64 8
  %761 = getelementptr inbounds i8, ptr %27, i64 24
  %762 = getelementptr inbounds i8, ptr %27, i64 16
  %763 = getelementptr inbounds i8, ptr %28, i64 8
  %764 = getelementptr inbounds i8, ptr %29, i64 8
  %765 = getelementptr i8, ptr %result.i, i64 56
  %766 = getelementptr inbounds i8, ptr %11, i64 8
  %767 = getelementptr inbounds i8, ptr %11, i64 24
  %768 = getelementptr inbounds i8, ptr %11, i64 16
  %769 = getelementptr inbounds i8, ptr %12, i64 8
  %770 = getelementptr inbounds i8, ptr %12, i64 16
  %771 = getelementptr inbounds i8, ptr %13, i64 8
  %772 = getelementptr inbounds i8, ptr %14, i64 8
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge237, %HashMap_insert_internal_keyK_valueV_hashPtri32.exit893
  %.reg2mem73.0238 = phi i32 [ 0, %._crit_edge237 ], [ %1399, %HashMap_insert_internal_keyK_valueV_hashPtri32.exit893 ]
  %773 = zext nneg i32 %.reg2mem73.0238 to i64
  %774 = shl nuw nsw i64 %773, 5
  %gep = getelementptr i8, ptr %invariant.gep, i64 %774
  %775 = load i160, ptr %gep, align 4
  %.sroa.1.8.extract.trunc = trunc i160 %775 to i32
  %776 = add i32 %.sroa.1.8.extract.trunc, 1
  %.sroa.030.0.insert.ext = and i160 %775, 4294967295
  %777 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.030.0.insert.ext, 1
  %.sroa.027.0.insert.ext = zext i32 %776 to i160
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %778 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %779 = load ptr, ptr %63, align 8
  %780 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %779, 0
  %781 = load ptr, ptr %64, align 8
  %782 = insertvalue { ptr, ptr, ptr, i32 } %780, ptr %781, 1
  %783 = load ptr, ptr %758, align 8
  %784 = insertvalue { ptr, ptr, ptr, i32 } %782, ptr %783, 2
  %785 = load i32, ptr %65, align 4
  %786 = insertvalue { ptr, ptr, ptr, i32 } %784, i32 %785, 3
  %hash_coef_ptr.i.i42.i533 = getelementptr i8, ptr %779, i64 8
  %tbl_size_ptr.i.i43.i534 = getelementptr i8, ptr %779, i64 16
  %offset_tbl_ptr.i.i44.i535 = getelementptr i8, ptr %779, i64 40
  %hash_coef.i.i45.i536 = load i64, ptr %hash_coef_ptr.i.i42.i533, align 4
  %tbl_size.i.i46.i537 = load i64, ptr %tbl_size_ptr.i.i43.i534, align 4
  %offset_tbl.i.i47.i538 = load ptr, ptr %offset_tbl_ptr.i.i44.i535, align 8
  %product.i.i.i48.i539 = mul i64 %hash_coef.i.i45.i536, -5261542750394134544
  %shifted.i.i.i49.i540 = lshr i64 %product.i.i.i48.i539, 32
  %xored.i.i.i50.i541 = xor i64 %shifted.i.i.i49.i540, %product.i.i.i48.i539
  %hash.i.i.i51.i542 = and i64 %xored.i.i.i50.i541, %tbl_size.i.i46.i537
  %offset_ptr.i.i52.i543 = getelementptr i32, ptr %offset_tbl.i.i47.i538, i64 %hash.i.i.i51.i542
  %offset.i.i53.i544 = load i32, ptr %offset_ptr.i.i52.i543, align 4
  %eq.i.i545 = icmp eq i32 %785, %offset.i.i53.i544
  call void @llvm.assume(i1 %eq.i.i545) #30
  %787 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %788 = call ptr @llvm.invariant.start.p0(i64 600, ptr %779)
  %789 = sext i32 %785 to i64
  %790 = getelementptr ptr, ptr %779, i64 %789
  %791 = getelementptr i8, ptr %790, i64 64
  %792 = load ptr, ptr %791, align 8
  %793 = call ptr %792({ ptr, ptr, ptr, i32 } %786, ptr nonnull %2)
  %794 = call i32 %793({ ptr, ptr, ptr, i32 } %786, { ptr, ptr, ptr, i32 } %786, ptr nonnull %2)
  %795 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %796 = load ptr, ptr %63, align 8
  %797 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %796, 0
  %798 = load ptr, ptr %64, align 8
  %799 = insertvalue { ptr, ptr, ptr, i32 } %797, ptr %798, 1
  %800 = load ptr, ptr %758, align 8
  %801 = insertvalue { ptr, ptr, ptr, i32 } %799, ptr %800, 2
  %802 = load i32, ptr %65, align 4
  %803 = insertvalue { ptr, ptr, ptr, i32 } %801, i32 %802, 3
  %hash_coef_ptr.i.i56.i550 = getelementptr i8, ptr %796, i64 8
  %tbl_size_ptr.i.i57.i551 = getelementptr i8, ptr %796, i64 16
  %offset_tbl_ptr.i.i58.i552 = getelementptr i8, ptr %796, i64 40
  %hash_coef.i.i59.i553 = load i64, ptr %hash_coef_ptr.i.i56.i550, align 4
  %tbl_size.i.i60.i554 = load i64, ptr %tbl_size_ptr.i.i57.i551, align 4
  %offset_tbl.i.i61.i555 = load ptr, ptr %offset_tbl_ptr.i.i58.i552, align 8
  %product.i.i.i62.i556 = mul i64 %hash_coef.i.i59.i553, -5261542750394134544
  %shifted.i.i.i63.i557 = lshr i64 %product.i.i.i62.i556, 32
  %xored.i.i.i64.i558 = xor i64 %shifted.i.i.i63.i557, %product.i.i.i62.i556
  %hash.i.i.i65.i559 = and i64 %xored.i.i.i64.i558, %tbl_size.i.i60.i554
  %offset_ptr.i.i66.i560 = getelementptr i32, ptr %offset_tbl.i.i61.i555, i64 %hash.i.i.i65.i559
  %offset.i.i67.i561 = load i32, ptr %offset_ptr.i.i66.i560, align 4
  %eq.i70.i562 = icmp eq i32 %802, %offset.i.i67.i561
  call void @llvm.assume(i1 %eq.i70.i562) #30
  %804 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %805 = call ptr @llvm.invariant.start.p0(i64 600, ptr %796)
  %806 = sext i32 %802 to i64
  %807 = getelementptr ptr, ptr %796, i64 %806
  %808 = getelementptr i8, ptr %807, i64 64
  %809 = load ptr, ptr %808, align 8
  %810 = call ptr %809({ ptr, ptr, ptr, i32 } %803, ptr nonnull %2)
  %811 = call i32 %810({ ptr, ptr, ptr, i32 } %803, { ptr, ptr, ptr, i32 } %803, ptr nonnull %2)
  %812 = icmp eq i32 %811, 0
  %813 = load i32, ptr %759, align 4
  %814 = mul i32 %813, 10
  %815 = add i32 %814, 10
  %816 = mul i32 %794, 7
  %817 = icmp sge i32 %815, %816
  %818 = or i1 %812, %817
  br i1 %818, label %819, label %HashMap_insert_keyK_valueV.exit566

819:                                              ; preds = %._crit_edge
  %820 = shl i32 %794, 1
  %821 = call i32 @llvm.smax.i32(i32 %820, i32 16)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %30)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %31)
  %822 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %823 = load ptr, ptr %63, align 8
  %824 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %823, 0
  %825 = load ptr, ptr %64, align 8
  %826 = insertvalue { ptr, ptr, ptr, i32 } %824, ptr %825, 1
  %827 = load ptr, ptr %758, align 8
  %828 = insertvalue { ptr, ptr, ptr, i32 } %826, ptr %827, 2
  %829 = load i32, ptr %65, align 4
  %830 = insertvalue { ptr, ptr, ptr, i32 } %828, i32 %829, 3
  %hash_coef_ptr.i.i39.i773 = getelementptr i8, ptr %823, i64 8
  %tbl_size_ptr.i.i40.i774 = getelementptr i8, ptr %823, i64 16
  %offset_tbl_ptr.i.i41.i775 = getelementptr i8, ptr %823, i64 40
  %hash_coef.i.i42.i776 = load i64, ptr %hash_coef_ptr.i.i39.i773, align 4
  %tbl_size.i.i43.i777 = load i64, ptr %tbl_size_ptr.i.i40.i774, align 4
  %offset_tbl.i.i44.i778 = load ptr, ptr %offset_tbl_ptr.i.i41.i775, align 8
  %product.i.i.i45.i779 = mul i64 %hash_coef.i.i42.i776, -5261542750394134544
  %shifted.i.i.i46.i780 = lshr i64 %product.i.i.i45.i779, 32
  %xored.i.i.i47.i781 = xor i64 %shifted.i.i.i46.i780, %product.i.i.i45.i779
  %hash.i.i.i48.i782 = and i64 %xored.i.i.i47.i781, %tbl_size.i.i43.i777
  %offset_ptr.i.i49.i783 = getelementptr i32, ptr %offset_tbl.i.i44.i778, i64 %hash.i.i.i48.i782
  %offset.i.i50.i784 = load i32, ptr %offset_ptr.i.i49.i783, align 4
  %eq.i.i785 = icmp eq i32 %829, %offset.i.i50.i784
  call void @llvm.assume(i1 %eq.i.i785) #30
  %831 = load ptr, ptr %result.i, align 8
  %832 = load ptr, ptr %46, align 8
  %result.i.i786 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %833 = getelementptr i8, ptr %result.i.i786, i64 16
  store ptr @_parameterization_Nil, ptr %833, align 8
  %result.i66.i787 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %834 = getelementptr i8, ptr %result.i66.i787, i64 16
  store ptr %832, ptr %834, align 8
  %835 = getelementptr i8, ptr %result.i66.i787, i64 8
  store ptr %831, ptr %835, align 8
  %836 = getelementptr i8, ptr %result.i66.i787, i64 24
  store ptr null, ptr %836, align 8
  %837 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i66.i787)
  store ptr @Entry, ptr %result.i66.i787, align 8
  %838 = getelementptr i8, ptr %result.i.i786, i64 8
  store ptr %result.i66.i787, ptr %838, align 8
  %839 = getelementptr i8, ptr %result.i.i786, i64 24
  store ptr null, ptr %839, align 8
  %840 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i786)
  store ptr @union_typ, ptr %result.i.i786, align 8
  %result.i67.i788 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i786, ptr %result.i67.i788, align 8
  %841 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i67.i788)
  %842 = getelementptr i8, ptr %result.i67.i788, i64 16
  store i32 %821, ptr %842, align 4
  %843 = getelementptr i8, ptr %result.i67.i788, i64 20
  store i32 %821, ptr %843, align 4
  %844 = zext nneg i32 %821 to i64
  %845 = shl nuw nsw i64 %844, 5
  %result.i.i.i789 = call noalias ptr @bump_malloc_inner(i64 noundef %845, ptr nonnull @current_ptr) #29
  %846 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %847 = getelementptr i8, ptr %result.i67.i788, i64 8
  store ptr %result.i.i.i789, ptr %847, align 8
  store ptr @Array, ptr %63, align 8
  store ptr %result.i67.i788, ptr %64, align 8
  store i32 9, ptr %65, align 4
  store i32 0, ptr %765, align 4
  store i32 0, ptr %759, align 4
  %invariant.gep.i790 = getelementptr i8, ptr %823, i64 64
  %848 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %849 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %850 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %823)
  %851 = sext i32 %829 to i64
  %gep.i917 = getelementptr ptr, ptr %invariant.gep.i790, i64 %851
  %852 = load ptr, ptr %gep.i917, align 8
  %853 = call ptr %852({ ptr, ptr, ptr, i32 } %830, ptr nonnull %2)
  %854 = call i32 %853({ ptr, ptr, ptr, i32 } %830, { ptr, ptr, ptr, i32 } %830, ptr nonnull %2)
  %855 = icmp sgt i32 %854, 0
  br i1 %855, label %.lr.ph920, label %HashMap_resize_new_capacityPtri32.exit816

.lr.ph920:                                        ; preds = %819
  %invariant.gep172.i791 = getelementptr i8, ptr %823, i64 120
  %856 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %gep173.i793 = getelementptr ptr, ptr %invariant.gep172.i791, i64 %851
  br label %857

857:                                              ; preds = %.lr.ph920, %._crit_edge3.i792
  %.reg2mem31.0.i918 = phi i32 [ 0, %.lr.ph920 ], [ %1124, %._crit_edge3.i792 ]
  store ptr @_parameterization_Ptri32, ptr %30, align 8
  %858 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %30)
  %859 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %823)
  %860 = load ptr, ptr %gep173.i793, align 8
  store ptr @i32_typ, ptr %31, align 8
  %861 = call ptr %860({ ptr, ptr, ptr, i32 } %830, ptr nonnull %31)
  %862 = call { ptr, i160 } %861({ ptr, ptr, ptr, i32 } %830, { ptr, ptr, ptr, i32 } %830, ptr nonnull %30, i32 %.reg2mem31.0.i918)
  %.fca.0.extract30.i794 = extractvalue { ptr, i160 } %862, 0
  %863 = icmp ne ptr %.fca.0.extract30.i794, @nil_typ
  %864 = icmp ne ptr %.fca.0.extract30.i794, null
  %.not37.i795 = and i1 %863, %864
  br i1 %.not37.i795, label %865, label %._crit_edge3.i792

865:                                              ; preds = %857
  %.fca.1.extract32.i796 = extractvalue { ptr, i160 } %862, 1
  %.sroa.5164.8.extract.trunc.i797 = trunc i160 %.fca.1.extract32.i796 to i64
  %866 = inttoptr i64 %.sroa.5164.8.extract.trunc.i797 to ptr
  %.sroa.9.8.extract.shift.i798 = lshr i160 %.fca.1.extract32.i796, 64
  %.sroa.9.8.extract.trunc.i799 = trunc i160 %.sroa.9.8.extract.shift.i798 to i64
  %867 = inttoptr i64 %.sroa.9.8.extract.trunc.i799 to ptr
  %hash_coef_ptr.i.i83.i800 = getelementptr i8, ptr %.fca.0.extract30.i794, i64 8
  %tbl_size_ptr.i.i84.i801 = getelementptr i8, ptr %.fca.0.extract30.i794, i64 16
  %offset_tbl_ptr.i.i85.i802 = getelementptr i8, ptr %.fca.0.extract30.i794, i64 40
  %hash_coef.i.i86.i803 = load i64, ptr %hash_coef_ptr.i.i83.i800, align 4
  %tbl_size.i.i87.i804 = load i64, ptr %tbl_size_ptr.i.i84.i801, align 4
  %offset_tbl.i.i88.i805 = load ptr, ptr %offset_tbl_ptr.i.i85.i802, align 8
  %product.i.i.i89.i806 = mul i64 %hash_coef.i.i86.i803, 4015701072841558310
  %shifted.i.i.i90.i807 = lshr i64 %product.i.i.i89.i806, 32
  %xored.i.i.i91.i808 = xor i64 %shifted.i.i.i90.i807, %product.i.i.i89.i806
  %hash.i.i.i92.i809 = and i64 %xored.i.i.i91.i808, %tbl_size.i.i87.i804
  %offset_ptr.i.i93.i810 = getelementptr i32, ptr %offset_tbl.i.i88.i805, i64 %hash.i.i.i92.i809
  %offset.i.i94.i811 = load i32, ptr %offset_ptr.i.i93.i810, align 4
  %868 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract30.i794, 0
  %869 = insertvalue { ptr, ptr, ptr, i32 } %868, ptr %866, 1
  %870 = insertvalue { ptr, ptr, ptr, i32 } %869, ptr %867, 2
  %871 = insertvalue { ptr, ptr, ptr, i32 } %870, i32 %offset.i.i94.i811, 3
  %872 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %873 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %874 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract30.i794)
  %875 = sext i32 %offset.i.i94.i811 to i64
  %876 = getelementptr ptr, ptr %.fca.0.extract30.i794, i64 %875
  %877 = getelementptr i8, ptr %876, i64 56
  %878 = load ptr, ptr %877, align 8
  %879 = call ptr %878({ ptr, ptr, ptr, i32 } %871, ptr nonnull %2)
  %880 = call { ptr, i160 } %879({ ptr, ptr, ptr, i32 } %871, { ptr, ptr, ptr, i32 } %871, ptr nonnull %2)
  %.fca.0.extract23.i812 = extractvalue { ptr, i160 } %880, 0
  %881 = getelementptr i8, ptr %.fca.0.extract23.i812, i64 8
  %882 = getelementptr i8, ptr %.fca.0.extract23.i812, i64 16
  %883 = getelementptr i8, ptr %.fca.0.extract23.i812, i64 24
  %884 = getelementptr i8, ptr %.fca.0.extract23.i812, i64 32
  %885 = load i64, ptr %881, align 4
  %886 = load i64, ptr %882, align 4
  %887 = load ptr, ptr %883, align 8
  %888 = load ptr, ptr %884, align 8
  %result.i96.i813 = call i1 %887(i64 %886, i64 %885, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %888) #3
  br i1 %result.i96.i813, label %._crit_edge3.i792, label %889

889:                                              ; preds = %865
  %result.i97.i814 = call i1 %887(i64 %886, i64 %885, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr readonly %888) #3
  br i1 %result.i97.i814, label %890, label %._crit_edge3.i792

890:                                              ; preds = %889
  %891 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %892 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %893 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract30.i794)
  %894 = getelementptr i8, ptr %876, i64 48
  %895 = load ptr, ptr %894, align 8
  %896 = call ptr %895({ ptr, ptr, ptr, i32 } %871, ptr nonnull %2)
  %897 = call { ptr, i160 } %896({ ptr, ptr, ptr, i32 } %871, { ptr, ptr, ptr, i32 } %871, ptr nonnull %2)
  %898 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %899 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %900 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract30.i794)
  %901 = getelementptr i8, ptr %876, i64 64
  %902 = load ptr, ptr %901, align 8
  %903 = call ptr %902({ ptr, ptr, ptr, i32 } %871, ptr nonnull %2)
  %904 = call i32 %903({ ptr, ptr, ptr, i32 } %871, { ptr, ptr, ptr, i32 } %871, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %11)
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %12)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %13)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %14)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %905 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %906 = load ptr, ptr %63, align 8
  %907 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %906, 0
  %908 = load ptr, ptr %64, align 8
  %909 = insertvalue { ptr, ptr, ptr, i32 } %907, ptr %908, 1
  %910 = load ptr, ptr %758, align 8
  %911 = insertvalue { ptr, ptr, ptr, i32 } %909, ptr %910, 2
  %912 = load i32, ptr %65, align 4
  %913 = insertvalue { ptr, ptr, ptr, i32 } %911, i32 %912, 3
  %hash_coef_ptr.i.i51.i1363 = getelementptr i8, ptr %906, i64 8
  %tbl_size_ptr.i.i52.i1364 = getelementptr i8, ptr %906, i64 16
  %offset_tbl_ptr.i.i53.i1365 = getelementptr i8, ptr %906, i64 40
  %hash_coef.i.i54.i1366 = load i64, ptr %hash_coef_ptr.i.i51.i1363, align 4
  %tbl_size.i.i55.i1367 = load i64, ptr %tbl_size_ptr.i.i52.i1364, align 4
  %offset_tbl.i.i56.i1368 = load ptr, ptr %offset_tbl_ptr.i.i53.i1365, align 8
  %product.i.i.i57.i1369 = mul i64 %hash_coef.i.i54.i1366, -5261542750394134544
  %shifted.i.i.i58.i1370 = lshr i64 %product.i.i.i57.i1369, 32
  %xored.i.i.i59.i1371 = xor i64 %shifted.i.i.i58.i1370, %product.i.i.i57.i1369
  %hash.i.i.i60.i1372 = and i64 %xored.i.i.i59.i1371, %tbl_size.i.i55.i1367
  %offset_ptr.i.i61.i1373 = getelementptr i32, ptr %offset_tbl.i.i56.i1368, i64 %hash.i.i.i60.i1372
  %offset.i.i62.i1374 = load i32, ptr %offset_ptr.i.i61.i1373, align 4
  %eq.i.i1375 = icmp eq i32 %912, %offset.i.i62.i1374
  call void @llvm.assume(i1 %eq.i.i1375) #30
  %914 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %915 = call ptr @llvm.invariant.start.p0(i64 600, ptr %906)
  %916 = sext i32 %912 to i64
  %917 = getelementptr ptr, ptr %906, i64 %916
  %918 = getelementptr i8, ptr %917, i64 64
  %919 = load ptr, ptr %918, align 8
  %920 = call ptr %919({ ptr, ptr, ptr, i32 } %913, ptr nonnull %2)
  %921 = call i32 %920({ ptr, ptr, ptr, i32 } %913, { ptr, ptr, ptr, i32 } %913, ptr nonnull %2)
  %922 = add i32 %921, -1
  %923 = and i32 %922, %904
  %924 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  br label %925

925:                                              ; preds = %974, %890
  %spec.store.select.i14111425 = phi i32 [ %spec.store.select.i1411, %974 ], [ -1, %890 ]
  %.0..0..0..i1376 = phi i32 [ %992, %974 ], [ %923, %890 ]
  %926 = load ptr, ptr %63, align 8
  %927 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %926, 0
  %928 = load ptr, ptr %64, align 8
  %929 = insertvalue { ptr, ptr, ptr, i32 } %927, ptr %928, 1
  %930 = load ptr, ptr %758, align 8
  %931 = insertvalue { ptr, ptr, ptr, i32 } %929, ptr %930, 2
  %932 = load i32, ptr %65, align 4
  %933 = insertvalue { ptr, ptr, ptr, i32 } %931, i32 %932, 3
  %hash_coef_ptr.i.i65.i1377 = getelementptr i8, ptr %926, i64 8
  %tbl_size_ptr.i.i66.i1378 = getelementptr i8, ptr %926, i64 16
  %offset_tbl_ptr.i.i67.i1379 = getelementptr i8, ptr %926, i64 40
  %hash_coef.i.i68.i1380 = load i64, ptr %hash_coef_ptr.i.i65.i1377, align 4
  %tbl_size.i.i69.i1381 = load i64, ptr %tbl_size_ptr.i.i66.i1378, align 4
  %offset_tbl.i.i70.i1382 = load ptr, ptr %offset_tbl_ptr.i.i67.i1379, align 8
  %product.i.i.i71.i1383 = mul i64 %hash_coef.i.i68.i1380, -5261542750394134544
  %shifted.i.i.i72.i1384 = lshr i64 %product.i.i.i71.i1383, 32
  %xored.i.i.i73.i1385 = xor i64 %shifted.i.i.i72.i1384, %product.i.i.i71.i1383
  %hash.i.i.i74.i1386 = and i64 %xored.i.i.i73.i1385, %tbl_size.i.i69.i1381
  %offset_ptr.i.i75.i1387 = getelementptr i32, ptr %offset_tbl.i.i70.i1382, i64 %hash.i.i.i74.i1386
  %offset.i.i76.i1388 = load i32, ptr %offset_ptr.i.i75.i1387, align 4
  %eq.i79.i1389 = icmp eq i32 %932, %offset.i.i76.i1388
  call void @llvm.assume(i1 %eq.i79.i1389) #30
  %934 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  store ptr @_parameterization_Ptri32, ptr %3, align 8
  %935 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %3)
  %936 = call ptr @llvm.invariant.start.p0(i64 600, ptr %926)
  %937 = sext i32 %932 to i64
  %938 = getelementptr ptr, ptr %926, i64 %937
  %939 = getelementptr i8, ptr %938, i64 120
  %940 = load ptr, ptr %939, align 8
  store ptr @i32_typ, ptr %4, align 8
  %941 = call ptr %940({ ptr, ptr, ptr, i32 } %933, ptr nonnull %4)
  %942 = call { ptr, i160 } %941({ ptr, ptr, ptr, i32 } %933, { ptr, ptr, ptr, i32 } %933, ptr nonnull %3, i32 %.0..0..0..i1376)
  %.fca.0.extract36.i1390 = extractvalue { ptr, i160 } %942, 0
  %943 = icmp eq ptr %.fca.0.extract36.i1390, @nil_typ
  %944 = icmp eq ptr %.fca.0.extract36.i1390, null
  %945 = or i1 %943, %944
  br i1 %945, label %993, label %946

946:                                              ; preds = %925
  %.fca.1.extract38.i1391 = extractvalue { ptr, i160 } %942, 1
  %.sroa.5.8.extract.shift.i1392 = lshr i160 %.fca.1.extract38.i1391, 64
  %.sroa.5.8.extract.trunc.i1393 = trunc i160 %.sroa.5.8.extract.shift.i1392 to i64
  %.sroa.2.8.extract.trunc165.i1394 = trunc i160 %.fca.1.extract38.i1391 to i64
  %947 = inttoptr i64 %.sroa.2.8.extract.trunc165.i1394 to ptr
  %948 = inttoptr i64 %.sroa.5.8.extract.trunc.i1393 to ptr
  %hash_coef_ptr.i.i81.i1395 = getelementptr i8, ptr %.fca.0.extract36.i1390, i64 8
  %tbl_size_ptr.i.i82.i1396 = getelementptr i8, ptr %.fca.0.extract36.i1390, i64 16
  %offset_tbl_ptr.i.i83.i1397 = getelementptr i8, ptr %.fca.0.extract36.i1390, i64 40
  %hash_coef.i.i84.i1398 = load i64, ptr %hash_coef_ptr.i.i81.i1395, align 4
  %tbl_size.i.i85.i1399 = load i64, ptr %tbl_size_ptr.i.i82.i1396, align 4
  %offset_tbl.i.i86.i1400 = load ptr, ptr %offset_tbl_ptr.i.i83.i1397, align 8
  %product.i.i.i87.i1401 = mul i64 %hash_coef.i.i84.i1398, 4015701072841558310
  %shifted.i.i.i88.i1402 = lshr i64 %product.i.i.i87.i1401, 32
  %xored.i.i.i89.i1403 = xor i64 %shifted.i.i.i88.i1402, %product.i.i.i87.i1401
  %hash.i.i.i90.i1404 = and i64 %xored.i.i.i89.i1403, %tbl_size.i.i85.i1399
  %offset_ptr.i.i91.i1405 = getelementptr i32, ptr %offset_tbl.i.i86.i1400, i64 %hash.i.i.i90.i1404
  %offset.i.i92.i1406 = load i32, ptr %offset_ptr.i.i91.i1405, align 4
  %949 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract36.i1390, 0
  %950 = insertvalue { ptr, ptr, ptr, i32 } %949, ptr %947, 1
  %951 = insertvalue { ptr, ptr, ptr, i32 } %950, ptr %948, 2
  %952 = insertvalue { ptr, ptr, ptr, i32 } %951, i32 %offset.i.i92.i1406, 3
  %953 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %954 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %955 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i1390)
  %956 = sext i32 %offset.i.i92.i1406 to i64
  %957 = getelementptr ptr, ptr %.fca.0.extract36.i1390, i64 %956
  %958 = getelementptr i8, ptr %957, i64 64
  %959 = load ptr, ptr %958, align 8
  %960 = call ptr %959({ ptr, ptr, ptr, i32 } %952, ptr nonnull %2)
  %961 = call i32 %960({ ptr, ptr, ptr, i32 } %952, { ptr, ptr, ptr, i32 } %952, ptr nonnull %2)
  %962 = icmp eq i32 %961, %904
  %963 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %964 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %965 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i1390)
  %966 = getelementptr i8, ptr %957, i64 48
  %967 = load ptr, ptr %966, align 8
  %968 = call ptr %967({ ptr, ptr, ptr, i32 } %952, ptr nonnull %2)
  %969 = call { ptr, i160 } %968({ ptr, ptr, ptr, i32 } %952, { ptr, ptr, ptr, i32 } %952, ptr nonnull %2)
  %970 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %971 = load ptr, ptr %52, align 8
  %972 = call i1 %971({ ptr, i160 } %969, { ptr, i160 } %897)
  %973 = and i1 %962, %972
  br i1 %973, label %HashMap_find_slot_keyK_hashPtri32.exit1412, label %974

974:                                              ; preds = %946
  %975 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %976 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %977 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i1390)
  %978 = getelementptr i8, ptr %957, i64 56
  %979 = load ptr, ptr %978, align 8
  %980 = call ptr %979({ ptr, ptr, ptr, i32 } %952, ptr nonnull %2)
  %981 = call { ptr, i160 } %980({ ptr, ptr, ptr, i32 } %952, { ptr, ptr, ptr, i32 } %952, ptr nonnull %2)
  %.fca.0.extract15.i1408 = extractvalue { ptr, i160 } %981, 0
  %982 = getelementptr i8, ptr %.fca.0.extract15.i1408, i64 8
  %983 = getelementptr i8, ptr %.fca.0.extract15.i1408, i64 16
  %984 = getelementptr i8, ptr %.fca.0.extract15.i1408, i64 24
  %985 = getelementptr i8, ptr %.fca.0.extract15.i1408, i64 32
  %986 = load i64, ptr %982, align 4
  %987 = load i64, ptr %983, align 4
  %988 = load ptr, ptr %984, align 8
  %989 = load ptr, ptr %985, align 8
  %result.i.i1409 = call i1 %988(i64 %987, i64 %986, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %989) #3
  %990 = icmp eq i32 %spec.store.select.i14111425, -1
  %or.cond.i1410 = select i1 %result.i.i1409, i1 %990, i1 false
  %spec.store.select.i1411 = select i1 %or.cond.i1410, i32 %.0..0..0..i1376, i32 %spec.store.select.i14111425
  %991 = add i32 %.0..0..0..i1376, 1
  %992 = and i32 %991, %922
  br label %925

993:                                              ; preds = %925
  %994 = icmp eq i32 %spec.store.select.i14111425, -1
  %.pre1444 = select i1 %994, i32 %.0..0..0..i1376, i32 %spec.store.select.i14111425
  br label %HashMap_find_slot_keyK_hashPtri32.exit1412

HashMap_find_slot_keyK_hashPtri32.exit1412:       ; preds = %946, %993
  %995 = phi i32 [ %.pre1444, %993 ], [ %.0..0..0..i1376, %946 ]
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  %996 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %997 = load ptr, ptr %63, align 8
  %998 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %997, 0
  %999 = load ptr, ptr %64, align 8
  %1000 = insertvalue { ptr, ptr, ptr, i32 } %998, ptr %999, 1
  %1001 = load ptr, ptr %758, align 8
  %1002 = insertvalue { ptr, ptr, ptr, i32 } %1000, ptr %1001, 2
  %1003 = load i32, ptr %65, align 4
  %1004 = insertvalue { ptr, ptr, ptr, i32 } %1002, i32 %1003, 3
  %hash_coef_ptr.i.i56.i1095 = getelementptr i8, ptr %997, i64 8
  %tbl_size_ptr.i.i57.i1096 = getelementptr i8, ptr %997, i64 16
  %offset_tbl_ptr.i.i58.i1097 = getelementptr i8, ptr %997, i64 40
  %hash_coef.i.i59.i1098 = load i64, ptr %hash_coef_ptr.i.i56.i1095, align 4
  %tbl_size.i.i60.i1099 = load i64, ptr %tbl_size_ptr.i.i57.i1096, align 4
  %offset_tbl.i.i61.i1100 = load ptr, ptr %offset_tbl_ptr.i.i58.i1097, align 8
  %product.i.i.i62.i1101 = mul i64 %hash_coef.i.i59.i1098, -5261542750394134544
  %shifted.i.i.i63.i1102 = lshr i64 %product.i.i.i62.i1101, 32
  %xored.i.i.i64.i1103 = xor i64 %shifted.i.i.i63.i1102, %product.i.i.i62.i1101
  %hash.i.i.i65.i1104 = and i64 %xored.i.i.i64.i1103, %tbl_size.i.i60.i1099
  %offset_ptr.i.i66.i1105 = getelementptr i32, ptr %offset_tbl.i.i61.i1100, i64 %hash.i.i.i65.i1104
  %offset.i.i67.i1106 = load i32, ptr %offset_ptr.i.i66.i1105, align 4
  %eq.i.i1107 = icmp eq i32 %1003, %offset.i.i67.i1106
  call void @llvm.assume(i1 %eq.i.i1107) #30
  store ptr @_parameterization_Ptri32, ptr %9, align 8
  %1005 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %9)
  %1006 = call ptr @llvm.invariant.start.p0(i64 600, ptr %997)
  %1007 = sext i32 %1003 to i64
  %1008 = getelementptr ptr, ptr %997, i64 %1007
  %1009 = getelementptr i8, ptr %1008, i64 120
  %1010 = load ptr, ptr %1009, align 8
  store ptr @i32_typ, ptr %10, align 8
  %1011 = call ptr %1010({ ptr, ptr, ptr, i32 } %1004, ptr nonnull %10)
  %1012 = call { ptr, i160 } %1011({ ptr, ptr, ptr, i32 } %1004, { ptr, ptr, ptr, i32 } %1004, ptr nonnull %9, i32 %995)
  %.fca.0.extract2.i1108 = extractvalue { ptr, i160 } %1012, 0
  %1013 = load ptr, ptr %result.i, align 8
  %1014 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1015 = load ptr, ptr %46, align 8
  %1016 = load ptr, ptr %1013, align 8
  %1017 = getelementptr i8, ptr %1016, i64 48
  %1018 = load ptr, ptr %1017, align 8
  %1019 = call { i64, i64 } %1018(ptr nonnull %1013)
  %1020 = extractvalue { i64, i64 } %1019, 0
  %1021 = extractvalue { i64, i64 } %1019, 1
  %1022 = call i64 @llvm.umax.i64(i64 %1021, i64 8)
  %1023 = urem i64 16, %1021
  %1024 = icmp eq i64 %1023, 0
  %1025 = sub i64 %1021, %1023
  %1026 = select i1 %1024, i64 0, i64 %1025
  %1027 = add i64 %1026, %1020
  %1028 = add i64 %1027, 16
  %1029 = and i64 %1027, 7
  %1030 = icmp eq i64 %1029, 0
  %1031 = sub nuw nsw i64 40, %1029
  %1032 = select i1 %1030, i64 32, i64 %1031
  %1033 = add i64 %1028, %1032
  %1034 = and i64 %1033, 3
  %1035 = icmp eq i64 %1034, 0
  %1036 = sub nuw nsw i64 8, %1034
  %1037 = select i1 %1035, i64 4, i64 %1036
  %1038 = add i64 %1037, %1033
  %1039 = urem i64 %1038, %1022
  %1040 = icmp eq i64 %1039, 0
  %1041 = sub i64 %1022, %1039
  %1042 = select i1 %1040, i64 0, i64 %1041
  %1043 = add i64 %1038, %1042
  %result.i.i1109 = call noalias ptr @bump_malloc_inner(i64 noundef %1043, ptr nonnull @current_ptr) #29
  store ptr %1013, ptr %result.i.i1109, align 8
  %1044 = getelementptr i8, ptr %result.i.i1109, i64 8
  store ptr %1015, ptr %1044, align 8
  %1045 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i.i1109)
  store ptr @Entry, ptr %11, align 8
  store ptr %result.i.i1109, ptr %766, align 8
  store i32 9, ptr %767, align 8
  %1046 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %11)
  %1047 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Entry, ptr undef, ptr undef, i32 undef }, ptr %result.i.i1109, 1
  %1048 = insertvalue { ptr, ptr, ptr, i32 } %1047, ptr undef, 2
  %1049 = insertvalue { ptr, ptr, ptr, i32 } %1048, i32 9, 3
  %1050 = load ptr, ptr %result.i, align 8
  %1051 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1052 = load ptr, ptr %46, align 8
  store ptr %1050, ptr %12, align 8
  store ptr %1052, ptr %769, align 8
  store ptr @_parameterization_Ptri32, ptr %770, align 8
  %1053 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %12)
  %1054 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %1055 = load i64, ptr %881, align 4
  %1056 = load i64, ptr %882, align 4
  %1057 = load ptr, ptr %883, align 8
  %1058 = load ptr, ptr %884, align 8
  %result.i.i.i1110 = call i1 %1057(i64 %1056, i64 %1055, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr readonly %1058) #3
  %1059 = select i1 %result.i.i.i1110, i64 10, i64 9
  %gep1243 = getelementptr [14 x ptr], ptr getelementptr inbounds (i8, ptr @Entry, i64 72), i64 0, i64 %1059
  %1060 = load ptr, ptr %gep1243, align 8
  call void %1060({ ptr, ptr, ptr, i32 } %1049, { ptr, ptr, ptr, i32 } %1049, ptr nonnull %12, { ptr, i160 } %897, { ptr, i160 } %880, i32 %904)
  %1061 = load ptr, ptr %768, align 8
  %1062 = ptrtoint ptr %result.i.i1109 to i64
  %1063 = ptrtoint ptr %1061 to i64
  %.sroa.2.0.insert.ext.i1111 = zext i64 %1063 to i160
  %.sroa.2.0.insert.shift.i1112 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i1111, 64
  %.sroa.0.0.insert.ext.i1114 = zext i64 %1062 to i160
  %.sroa.2.0.insert.insert.i1113 = or disjoint i160 %.sroa.2.0.insert.shift.i1112, %.sroa.0.0.insert.ext.i1114
  %.sroa.0.0.insert.insert.i1115 = or disjoint i160 %.sroa.2.0.insert.insert.i1113, 3062541302288446171170371466885913903104
  %1064 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0.0.insert.insert.i1115, 1
  %1065 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1066 = load ptr, ptr %63, align 8
  %1067 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1066, 0
  %1068 = load ptr, ptr %64, align 8
  %1069 = insertvalue { ptr, ptr, ptr, i32 } %1067, ptr %1068, 1
  %1070 = load ptr, ptr %758, align 8
  %1071 = insertvalue { ptr, ptr, ptr, i32 } %1069, ptr %1070, 2
  %1072 = load i32, ptr %65, align 4
  %1073 = insertvalue { ptr, ptr, ptr, i32 } %1071, i32 %1072, 3
  %hash_coef_ptr.i.i84.i1120 = getelementptr i8, ptr %1066, i64 8
  %tbl_size_ptr.i.i85.i1121 = getelementptr i8, ptr %1066, i64 16
  %offset_tbl_ptr.i.i86.i1122 = getelementptr i8, ptr %1066, i64 40
  %hash_coef.i.i87.i1123 = load i64, ptr %hash_coef_ptr.i.i84.i1120, align 4
  %tbl_size.i.i88.i1124 = load i64, ptr %tbl_size_ptr.i.i85.i1121, align 4
  %offset_tbl.i.i89.i1125 = load ptr, ptr %offset_tbl_ptr.i.i86.i1122, align 8
  %product.i.i.i90.i1126 = mul i64 %hash_coef.i.i87.i1123, -5261542750394134544
  %shifted.i.i.i91.i1127 = lshr i64 %product.i.i.i90.i1126, 32
  %xored.i.i.i92.i1128 = xor i64 %shifted.i.i.i91.i1127, %product.i.i.i90.i1126
  %hash.i.i.i93.i1129 = and i64 %xored.i.i.i92.i1128, %tbl_size.i.i88.i1124
  %offset_ptr.i.i94.i1130 = getelementptr i32, ptr %offset_tbl.i.i89.i1125, i64 %hash.i.i.i93.i1129
  %offset.i.i95.i1131 = load i32, ptr %offset_ptr.i.i94.i1130, align 4
  %eq.i98.i1132 = icmp eq i32 %1072, %offset.i.i95.i1131
  call void @llvm.assume(i1 %eq.i98.i1132) #30
  %1074 = load ptr, ptr %result.i, align 8
  %1075 = load ptr, ptr %46, align 8
  %result.i99.i1133 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1076 = getelementptr i8, ptr %result.i99.i1133, i64 16
  store ptr %1075, ptr %1076, align 8
  %1077 = getelementptr i8, ptr %result.i99.i1133, i64 8
  store ptr %1074, ptr %1077, align 8
  %1078 = getelementptr i8, ptr %result.i99.i1133, i64 24
  store ptr null, ptr %1078, align 8
  %1079 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i99.i1133)
  store ptr @Entry, ptr %result.i99.i1133, align 8
  store ptr @_parameterization_Ptri32, ptr %13, align 8
  store ptr %result.i99.i1133, ptr %771, align 8
  %1080 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %13)
  %1081 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1066)
  %1082 = sext i32 %1072 to i64
  %1083 = getelementptr ptr, ptr %1066, i64 %1082
  %1084 = getelementptr i8, ptr %1083, i64 128
  %1085 = load ptr, ptr %1084, align 8
  store ptr @i32_typ, ptr %14, align 8
  store ptr @Entry, ptr %772, align 8
  %1086 = call ptr %1085({ ptr, ptr, ptr, i32 } %1073, ptr nonnull %14)
  call void %1086({ ptr, ptr, ptr, i32 } %1073, { ptr, ptr, ptr, i32 } %1073, ptr nonnull %13, i32 %995, { ptr, i160 } %1064)
  %1087 = icmp eq ptr %.fca.0.extract2.i1108, @nil_typ
  %1088 = icmp eq ptr %.fca.0.extract2.i1108, null
  %1089 = or i1 %1087, %1088
  br i1 %1089, label %._crit_edge.thread.i1155, label %._crit_edge.i1134

._crit_edge.thread.i1155:                         ; preds = %HashMap_find_slot_keyK_hashPtri32.exit1412
  %1090 = load i32, ptr %765, align 4
  %1091 = add i32 %1090, 1
  store i32 %1091, ptr %765, align 4
  br label %._crit_edge1.sink.split.i1153

._crit_edge.i1134:                                ; preds = %HashMap_find_slot_keyK_hashPtri32.exit1412
  %.fca.1.extract4.i1135 = extractvalue { ptr, i160 } %1012, 1
  %.sroa.3192.8.extract.trunc.i1136 = trunc i160 %.fca.1.extract4.i1135 to i64
  %1092 = inttoptr i64 %.sroa.3192.8.extract.trunc.i1136 to ptr
  %.sroa.5193.8.extract.shift.i1137 = lshr i160 %.fca.1.extract4.i1135, 64
  %.sroa.5193.8.extract.trunc.i1138 = trunc i160 %.sroa.5193.8.extract.shift.i1137 to i64
  %1093 = inttoptr i64 %.sroa.5193.8.extract.trunc.i1138 to ptr
  %hash_coef_ptr.i.i101.i1139 = getelementptr i8, ptr %.fca.0.extract2.i1108, i64 8
  %tbl_size_ptr.i.i102.i1140 = getelementptr i8, ptr %.fca.0.extract2.i1108, i64 16
  %offset_tbl_ptr.i.i103.i1141 = getelementptr i8, ptr %.fca.0.extract2.i1108, i64 40
  %hash_coef.i.i104.i1142 = load i64, ptr %hash_coef_ptr.i.i101.i1139, align 4
  %tbl_size.i.i105.i1143 = load i64, ptr %tbl_size_ptr.i.i102.i1140, align 4
  %offset_tbl.i.i106.i1144 = load ptr, ptr %offset_tbl_ptr.i.i103.i1141, align 8
  %product.i.i.i107.i1145 = mul i64 %hash_coef.i.i104.i1142, 4015701072841558310
  %shifted.i.i.i108.i1146 = lshr i64 %product.i.i.i107.i1145, 32
  %xored.i.i.i109.i1147 = xor i64 %shifted.i.i.i108.i1146, %product.i.i.i107.i1145
  %hash.i.i.i110.i1148 = and i64 %xored.i.i.i109.i1147, %tbl_size.i.i105.i1143
  %offset_ptr.i.i111.i1149 = getelementptr i32, ptr %offset_tbl.i.i106.i1144, i64 %hash.i.i.i110.i1148
  %offset.i.i112.i1150 = load i32, ptr %offset_ptr.i.i111.i1149, align 4
  %1094 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract2.i1108, 0
  %1095 = insertvalue { ptr, ptr, ptr, i32 } %1094, ptr %1092, 1
  %1096 = insertvalue { ptr, ptr, ptr, i32 } %1095, ptr %1093, 2
  %1097 = insertvalue { ptr, ptr, ptr, i32 } %1096, i32 %offset.i.i112.i1150, 3
  %1098 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1099 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1100 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract2.i1108)
  %1101 = sext i32 %offset.i.i112.i1150 to i64
  %1102 = getelementptr ptr, ptr %.fca.0.extract2.i1108, i64 %1101
  %1103 = getelementptr i8, ptr %1102, i64 56
  %1104 = load ptr, ptr %1103, align 8
  %1105 = call ptr %1104({ ptr, ptr, ptr, i32 } %1097, ptr nonnull %2)
  %1106 = call { ptr, i160 } %1105({ ptr, ptr, ptr, i32 } %1097, { ptr, ptr, ptr, i32 } %1097, ptr nonnull %2)
  %.fca.0.extract45.i1151 = extractvalue { ptr, i160 } %1106, 0
  %1107 = getelementptr i8, ptr %.fca.0.extract45.i1151, i64 8
  %1108 = getelementptr i8, ptr %.fca.0.extract45.i1151, i64 16
  %1109 = getelementptr i8, ptr %.fca.0.extract45.i1151, i64 24
  %1110 = getelementptr i8, ptr %.fca.0.extract45.i1151, i64 32
  %1111 = load i64, ptr %1107, align 4
  %1112 = load i64, ptr %1108, align 4
  %1113 = load ptr, ptr %1109, align 8
  %1114 = load ptr, ptr %1110, align 8
  %result.i114.i1152 = call i1 %1113(i64 %1112, i64 %1111, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %1114) #3
  br i1 %result.i114.i1152, label %._crit_edge1.sink.split.i1153, label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit1156

._crit_edge1.sink.split.i1153:                    ; preds = %._crit_edge.i1134, %._crit_edge.thread.i1155
  %.sink202.i1154 = phi i64 [ 40, %._crit_edge.thread.i1155 ], [ 32, %._crit_edge.i1134 ]
  %1115 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1116 = getelementptr i8, ptr getelementptr inbounds (i8, ptr @HashMap, i64 72), i64 %.sink202.i1154
  %1117 = load ptr, ptr %1116, align 8
  %1118 = load ptr, ptr %1117, align 8
  %1119 = call i32 %1118(ptr nonnull %result.i)
  %1120 = add i32 %1119, 1
  %1121 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1122 = getelementptr i8, ptr %1117, i64 8
  %1123 = load ptr, ptr %1122, align 8
  call void %1123(ptr nonnull %result.i, i32 %1120)
  br label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit1156

HashMap_insert_internal_keyK_valueV_hashPtri32.exit1156: ; preds = %._crit_edge.i1134, %._crit_edge1.sink.split.i1153
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %11)
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %12)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %13)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %14)
  br label %._crit_edge3.i792

._crit_edge3.i792:                                ; preds = %HashMap_insert_internal_keyK_valueV_hashPtri32.exit1156, %889, %865, %857
  %1124 = add nuw nsw i32 %.reg2mem31.0.i918, 1
  %1125 = load ptr, ptr %gep.i917, align 8
  %1126 = call ptr %1125({ ptr, ptr, ptr, i32 } %830, ptr nonnull %2)
  %1127 = call i32 %1126({ ptr, ptr, ptr, i32 } %830, { ptr, ptr, ptr, i32 } %830, ptr nonnull %2)
  %1128 = icmp slt i32 %1124, %1127
  br i1 %1128, label %857, label %HashMap_resize_new_capacityPtri32.exit816

HashMap_resize_new_capacityPtri32.exit816:        ; preds = %._crit_edge3.i792, %819
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %30)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %31)
  br label %HashMap_insert_keyK_valueV.exit566

HashMap_insert_keyK_valueV.exit566:               ; preds = %._crit_edge, %HashMap_resize_new_capacityPtri32.exit816
  %1129 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1130 = load ptr, ptr %51, align 8
  %1131 = call i32 %1130({ ptr, i160 } %777)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %25)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %26)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %27)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %28)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %29)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8)
  %1132 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1133 = load ptr, ptr %63, align 8
  %1134 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1133, 0
  %1135 = load ptr, ptr %64, align 8
  %1136 = insertvalue { ptr, ptr, ptr, i32 } %1134, ptr %1135, 1
  %1137 = load ptr, ptr %758, align 8
  %1138 = insertvalue { ptr, ptr, ptr, i32 } %1136, ptr %1137, 2
  %1139 = load i32, ptr %65, align 4
  %1140 = insertvalue { ptr, ptr, ptr, i32 } %1138, i32 %1139, 3
  %hash_coef_ptr.i.i51.i1173 = getelementptr i8, ptr %1133, i64 8
  %tbl_size_ptr.i.i52.i1174 = getelementptr i8, ptr %1133, i64 16
  %offset_tbl_ptr.i.i53.i1175 = getelementptr i8, ptr %1133, i64 40
  %hash_coef.i.i54.i1176 = load i64, ptr %hash_coef_ptr.i.i51.i1173, align 4
  %tbl_size.i.i55.i1177 = load i64, ptr %tbl_size_ptr.i.i52.i1174, align 4
  %offset_tbl.i.i56.i1178 = load ptr, ptr %offset_tbl_ptr.i.i53.i1175, align 8
  %product.i.i.i57.i1179 = mul i64 %hash_coef.i.i54.i1176, -5261542750394134544
  %shifted.i.i.i58.i1180 = lshr i64 %product.i.i.i57.i1179, 32
  %xored.i.i.i59.i1181 = xor i64 %shifted.i.i.i58.i1180, %product.i.i.i57.i1179
  %hash.i.i.i60.i1182 = and i64 %xored.i.i.i59.i1181, %tbl_size.i.i55.i1177
  %offset_ptr.i.i61.i1183 = getelementptr i32, ptr %offset_tbl.i.i56.i1178, i64 %hash.i.i.i60.i1182
  %offset.i.i62.i1184 = load i32, ptr %offset_ptr.i.i61.i1183, align 4
  %eq.i.i1185 = icmp eq i32 %1139, %offset.i.i62.i1184
  call void @llvm.assume(i1 %eq.i.i1185) #30
  %1141 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1142 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1133)
  %1143 = sext i32 %1139 to i64
  %1144 = getelementptr ptr, ptr %1133, i64 %1143
  %1145 = getelementptr i8, ptr %1144, i64 64
  %1146 = load ptr, ptr %1145, align 8
  %1147 = call ptr %1146({ ptr, ptr, ptr, i32 } %1140, ptr nonnull %2)
  %1148 = call i32 %1147({ ptr, ptr, ptr, i32 } %1140, { ptr, ptr, ptr, i32 } %1140, ptr nonnull %2)
  %1149 = add i32 %1148, -1
  %1150 = and i32 %1149, %1131
  %1151 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  br label %1152

1152:                                             ; preds = %1201, %HashMap_insert_keyK_valueV.exit566
  %spec.store.select.i12211244 = phi i32 [ %spec.store.select.i1221, %1201 ], [ -1, %HashMap_insert_keyK_valueV.exit566 ]
  %.0..0..0..i1186 = phi i32 [ %1219, %1201 ], [ %1150, %HashMap_insert_keyK_valueV.exit566 ]
  %1153 = load ptr, ptr %63, align 8
  %1154 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1153, 0
  %1155 = load ptr, ptr %64, align 8
  %1156 = insertvalue { ptr, ptr, ptr, i32 } %1154, ptr %1155, 1
  %1157 = load ptr, ptr %758, align 8
  %1158 = insertvalue { ptr, ptr, ptr, i32 } %1156, ptr %1157, 2
  %1159 = load i32, ptr %65, align 4
  %1160 = insertvalue { ptr, ptr, ptr, i32 } %1158, i32 %1159, 3
  %hash_coef_ptr.i.i65.i1187 = getelementptr i8, ptr %1153, i64 8
  %tbl_size_ptr.i.i66.i1188 = getelementptr i8, ptr %1153, i64 16
  %offset_tbl_ptr.i.i67.i1189 = getelementptr i8, ptr %1153, i64 40
  %hash_coef.i.i68.i1190 = load i64, ptr %hash_coef_ptr.i.i65.i1187, align 4
  %tbl_size.i.i69.i1191 = load i64, ptr %tbl_size_ptr.i.i66.i1188, align 4
  %offset_tbl.i.i70.i1192 = load ptr, ptr %offset_tbl_ptr.i.i67.i1189, align 8
  %product.i.i.i71.i1193 = mul i64 %hash_coef.i.i68.i1190, -5261542750394134544
  %shifted.i.i.i72.i1194 = lshr i64 %product.i.i.i71.i1193, 32
  %xored.i.i.i73.i1195 = xor i64 %shifted.i.i.i72.i1194, %product.i.i.i71.i1193
  %hash.i.i.i74.i1196 = and i64 %xored.i.i.i73.i1195, %tbl_size.i.i69.i1191
  %offset_ptr.i.i75.i1197 = getelementptr i32, ptr %offset_tbl.i.i70.i1192, i64 %hash.i.i.i74.i1196
  %offset.i.i76.i1198 = load i32, ptr %offset_ptr.i.i75.i1197, align 4
  %eq.i79.i1199 = icmp eq i32 %1159, %offset.i.i76.i1198
  call void @llvm.assume(i1 %eq.i79.i1199) #30
  %1161 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  store ptr @_parameterization_Ptri32, ptr %7, align 8
  %1162 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %7)
  %1163 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1153)
  %1164 = sext i32 %1159 to i64
  %1165 = getelementptr ptr, ptr %1153, i64 %1164
  %1166 = getelementptr i8, ptr %1165, i64 120
  %1167 = load ptr, ptr %1166, align 8
  store ptr @i32_typ, ptr %8, align 8
  %1168 = call ptr %1167({ ptr, ptr, ptr, i32 } %1160, ptr nonnull %8)
  %1169 = call { ptr, i160 } %1168({ ptr, ptr, ptr, i32 } %1160, { ptr, ptr, ptr, i32 } %1160, ptr nonnull %7, i32 %.0..0..0..i1186)
  %.fca.0.extract36.i1200 = extractvalue { ptr, i160 } %1169, 0
  %1170 = icmp eq ptr %.fca.0.extract36.i1200, @nil_typ
  %1171 = icmp eq ptr %.fca.0.extract36.i1200, null
  %1172 = or i1 %1170, %1171
  br i1 %1172, label %1220, label %1173

1173:                                             ; preds = %1152
  %.fca.1.extract38.i1201 = extractvalue { ptr, i160 } %1169, 1
  %.sroa.5.8.extract.shift.i1202 = lshr i160 %.fca.1.extract38.i1201, 64
  %.sroa.5.8.extract.trunc.i1203 = trunc i160 %.sroa.5.8.extract.shift.i1202 to i64
  %.sroa.2.8.extract.trunc165.i1204 = trunc i160 %.fca.1.extract38.i1201 to i64
  %1174 = inttoptr i64 %.sroa.2.8.extract.trunc165.i1204 to ptr
  %1175 = inttoptr i64 %.sroa.5.8.extract.trunc.i1203 to ptr
  %hash_coef_ptr.i.i81.i1205 = getelementptr i8, ptr %.fca.0.extract36.i1200, i64 8
  %tbl_size_ptr.i.i82.i1206 = getelementptr i8, ptr %.fca.0.extract36.i1200, i64 16
  %offset_tbl_ptr.i.i83.i1207 = getelementptr i8, ptr %.fca.0.extract36.i1200, i64 40
  %hash_coef.i.i84.i1208 = load i64, ptr %hash_coef_ptr.i.i81.i1205, align 4
  %tbl_size.i.i85.i1209 = load i64, ptr %tbl_size_ptr.i.i82.i1206, align 4
  %offset_tbl.i.i86.i1210 = load ptr, ptr %offset_tbl_ptr.i.i83.i1207, align 8
  %product.i.i.i87.i1211 = mul i64 %hash_coef.i.i84.i1208, 4015701072841558310
  %shifted.i.i.i88.i1212 = lshr i64 %product.i.i.i87.i1211, 32
  %xored.i.i.i89.i1213 = xor i64 %shifted.i.i.i88.i1212, %product.i.i.i87.i1211
  %hash.i.i.i90.i1214 = and i64 %xored.i.i.i89.i1213, %tbl_size.i.i85.i1209
  %offset_ptr.i.i91.i1215 = getelementptr i32, ptr %offset_tbl.i.i86.i1210, i64 %hash.i.i.i90.i1214
  %offset.i.i92.i1216 = load i32, ptr %offset_ptr.i.i91.i1215, align 4
  %1176 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract36.i1200, 0
  %1177 = insertvalue { ptr, ptr, ptr, i32 } %1176, ptr %1174, 1
  %1178 = insertvalue { ptr, ptr, ptr, i32 } %1177, ptr %1175, 2
  %1179 = insertvalue { ptr, ptr, ptr, i32 } %1178, i32 %offset.i.i92.i1216, 3
  %1180 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1181 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1182 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i1200)
  %1183 = sext i32 %offset.i.i92.i1216 to i64
  %1184 = getelementptr ptr, ptr %.fca.0.extract36.i1200, i64 %1183
  %1185 = getelementptr i8, ptr %1184, i64 64
  %1186 = load ptr, ptr %1185, align 8
  %1187 = call ptr %1186({ ptr, ptr, ptr, i32 } %1179, ptr nonnull %2)
  %1188 = call i32 %1187({ ptr, ptr, ptr, i32 } %1179, { ptr, ptr, ptr, i32 } %1179, ptr nonnull %2)
  %1189 = icmp eq i32 %1188, %1131
  %1190 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1191 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1192 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i1200)
  %1193 = getelementptr i8, ptr %1184, i64 48
  %1194 = load ptr, ptr %1193, align 8
  %1195 = call ptr %1194({ ptr, ptr, ptr, i32 } %1179, ptr nonnull %2)
  %1196 = call { ptr, i160 } %1195({ ptr, ptr, ptr, i32 } %1179, { ptr, ptr, ptr, i32 } %1179, ptr nonnull %2)
  %1197 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1198 = load ptr, ptr %52, align 8
  %1199 = call i1 %1198({ ptr, i160 } %1196, { ptr, i160 } %777)
  %1200 = and i1 %1189, %1199
  br i1 %1200, label %HashMap_find_slot_keyK_hashPtri32.exit1222, label %1201

1201:                                             ; preds = %1173
  %1202 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1203 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1204 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i1200)
  %1205 = getelementptr i8, ptr %1184, i64 56
  %1206 = load ptr, ptr %1205, align 8
  %1207 = call ptr %1206({ ptr, ptr, ptr, i32 } %1179, ptr nonnull %2)
  %1208 = call { ptr, i160 } %1207({ ptr, ptr, ptr, i32 } %1179, { ptr, ptr, ptr, i32 } %1179, ptr nonnull %2)
  %.fca.0.extract15.i1218 = extractvalue { ptr, i160 } %1208, 0
  %1209 = getelementptr i8, ptr %.fca.0.extract15.i1218, i64 8
  %1210 = getelementptr i8, ptr %.fca.0.extract15.i1218, i64 16
  %1211 = getelementptr i8, ptr %.fca.0.extract15.i1218, i64 24
  %1212 = getelementptr i8, ptr %.fca.0.extract15.i1218, i64 32
  %1213 = load i64, ptr %1209, align 4
  %1214 = load i64, ptr %1210, align 4
  %1215 = load ptr, ptr %1211, align 8
  %1216 = load ptr, ptr %1212, align 8
  %result.i.i1219 = call i1 %1215(i64 %1214, i64 %1213, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %1216) #3
  %1217 = icmp eq i32 %spec.store.select.i12211244, -1
  %or.cond.i1220 = select i1 %result.i.i1219, i1 %1217, i1 false
  %spec.store.select.i1221 = select i1 %or.cond.i1220, i32 %.0..0..0..i1186, i32 %spec.store.select.i12211244
  %1218 = add i32 %.0..0..0..i1186, 1
  %1219 = and i32 %1218, %1149
  br label %1152

1220:                                             ; preds = %1152
  %1221 = icmp eq i32 %spec.store.select.i12211244, -1
  %.pre1259 = select i1 %1221, i32 %.0..0..0..i1186, i32 %spec.store.select.i12211244
  br label %HashMap_find_slot_keyK_hashPtri32.exit1222

HashMap_find_slot_keyK_hashPtri32.exit1222:       ; preds = %1173, %1220
  %1222 = phi i32 [ %.pre1259, %1220 ], [ %.0..0..0..i1186, %1173 ]
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8)
  %1223 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1224 = load ptr, ptr %63, align 8
  %1225 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1224, 0
  %1226 = load ptr, ptr %64, align 8
  %1227 = insertvalue { ptr, ptr, ptr, i32 } %1225, ptr %1226, 1
  %1228 = load ptr, ptr %758, align 8
  %1229 = insertvalue { ptr, ptr, ptr, i32 } %1227, ptr %1228, 2
  %1230 = load i32, ptr %65, align 4
  %1231 = insertvalue { ptr, ptr, ptr, i32 } %1229, i32 %1230, 3
  %hash_coef_ptr.i.i56.i833 = getelementptr i8, ptr %1224, i64 8
  %tbl_size_ptr.i.i57.i834 = getelementptr i8, ptr %1224, i64 16
  %offset_tbl_ptr.i.i58.i835 = getelementptr i8, ptr %1224, i64 40
  %hash_coef.i.i59.i836 = load i64, ptr %hash_coef_ptr.i.i56.i833, align 4
  %tbl_size.i.i60.i837 = load i64, ptr %tbl_size_ptr.i.i57.i834, align 4
  %offset_tbl.i.i61.i838 = load ptr, ptr %offset_tbl_ptr.i.i58.i835, align 8
  %product.i.i.i62.i839 = mul i64 %hash_coef.i.i59.i836, -5261542750394134544
  %shifted.i.i.i63.i840 = lshr i64 %product.i.i.i62.i839, 32
  %xored.i.i.i64.i841 = xor i64 %shifted.i.i.i63.i840, %product.i.i.i62.i839
  %hash.i.i.i65.i842 = and i64 %xored.i.i.i64.i841, %tbl_size.i.i60.i837
  %offset_ptr.i.i66.i843 = getelementptr i32, ptr %offset_tbl.i.i61.i838, i64 %hash.i.i.i65.i842
  %offset.i.i67.i844 = load i32, ptr %offset_ptr.i.i66.i843, align 4
  %eq.i.i845 = icmp eq i32 %1230, %offset.i.i67.i844
  call void @llvm.assume(i1 %eq.i.i845) #30
  store ptr @_parameterization_Ptri32, ptr %25, align 8
  %1232 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %25)
  %1233 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1224)
  %1234 = sext i32 %1230 to i64
  %1235 = getelementptr ptr, ptr %1224, i64 %1234
  %1236 = getelementptr i8, ptr %1235, i64 120
  %1237 = load ptr, ptr %1236, align 8
  store ptr @i32_typ, ptr %26, align 8
  %1238 = call ptr %1237({ ptr, ptr, ptr, i32 } %1231, ptr nonnull %26)
  %1239 = call { ptr, i160 } %1238({ ptr, ptr, ptr, i32 } %1231, { ptr, ptr, ptr, i32 } %1231, ptr nonnull %25, i32 %1222)
  %.fca.0.extract2.i846 = extractvalue { ptr, i160 } %1239, 0
  %1240 = load ptr, ptr %result.i, align 8
  %1241 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1242 = load ptr, ptr %46, align 8
  %1243 = load ptr, ptr %1240, align 8
  %1244 = getelementptr i8, ptr %1243, i64 48
  %1245 = load ptr, ptr %1244, align 8
  %1246 = call { i64, i64 } %1245(ptr nonnull %1240)
  %1247 = extractvalue { i64, i64 } %1246, 0
  %1248 = extractvalue { i64, i64 } %1246, 1
  %1249 = call i64 @llvm.umax.i64(i64 %1248, i64 8)
  %1250 = urem i64 16, %1248
  %1251 = icmp eq i64 %1250, 0
  %1252 = sub i64 %1248, %1250
  %1253 = select i1 %1251, i64 0, i64 %1252
  %1254 = add i64 %1253, %1247
  %1255 = add i64 %1254, 16
  %1256 = and i64 %1254, 7
  %1257 = icmp eq i64 %1256, 0
  %1258 = sub nuw nsw i64 40, %1256
  %1259 = select i1 %1257, i64 32, i64 %1258
  %1260 = add i64 %1255, %1259
  %1261 = and i64 %1260, 3
  %1262 = icmp eq i64 %1261, 0
  %1263 = sub nuw nsw i64 8, %1261
  %1264 = select i1 %1262, i64 4, i64 %1263
  %1265 = add i64 %1264, %1260
  %1266 = urem i64 %1265, %1249
  %1267 = icmp eq i64 %1266, 0
  %1268 = sub i64 %1249, %1266
  %1269 = select i1 %1267, i64 0, i64 %1268
  %1270 = add i64 %1265, %1269
  %result.i.i847 = call noalias ptr @bump_malloc_inner(i64 noundef %1270, ptr nonnull @current_ptr) #29
  store ptr %1240, ptr %result.i.i847, align 8
  %1271 = getelementptr i8, ptr %result.i.i847, i64 8
  store ptr %1242, ptr %1271, align 8
  %1272 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i.i847)
  store ptr @Entry, ptr %27, align 8
  store ptr %result.i.i847, ptr %760, align 8
  store i32 9, ptr %761, align 8
  %1273 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %27)
  %1274 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1275 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %1276 = load ptr, ptr %1240, align 8
  %1277 = getelementptr i8, ptr %1276, i64 48
  %1278 = load ptr, ptr %1277, align 8
  %1279 = call { i64, i64 } %1278(ptr nonnull %1240)
  %1280 = extractvalue { i64, i64 } %1279, 1
  %1281 = urem i64 16, %1280
  %1282 = icmp eq i64 %1281, 0
  %reass.sub1471 = sub i64 %1280, %1281
  %1283 = add i64 %reass.sub1471, 16
  %1284 = select i1 %1282, i64 16, i64 %1283
  %1285 = getelementptr i8, ptr %result.i.i847, i64 %1284
  %1286 = load ptr, ptr %result.i.i847, align 8
  %1287 = load ptr, ptr %1286, align 8
  %1288 = getelementptr i8, ptr %1287, i64 64
  %1289 = load ptr, ptr %1288, align 8
  call void %1289({ ptr, i160 } %777, ptr nonnull %1286, ptr %1285)
  %1290 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %1291 = load ptr, ptr %result.i.i847, align 8
  %1292 = load ptr, ptr %1291, align 8
  %1293 = getelementptr i8, ptr %1292, i64 48
  %1294 = load ptr, ptr %1293, align 8
  %1295 = call { i64, i64 } %1294(ptr nonnull %1291)
  %1296 = extractvalue { i64, i64 } %1295, 0
  %1297 = extractvalue { i64, i64 } %1295, 1
  %1298 = urem i64 16, %1297
  %1299 = icmp eq i64 %1298, 0
  %1300 = sub i64 %1297, %1298
  %1301 = select i1 %1299, i64 0, i64 %1300
  %1302 = add i64 %1301, %1296
  %1303 = and i64 %1302, 7
  %1304 = icmp eq i64 %1303, 0
  %1305 = sub nuw nsw i64 8, %1303
  %1306 = select i1 %1304, i64 0, i64 %1305
  %1307 = getelementptr i8, ptr %result.i.i847, i64 %1302
  %1308 = getelementptr i8, ptr %1307, i64 16
  %1309 = getelementptr i8, ptr %1308, i64 %1306
  store ptr @i32_typ, ptr %1309, align 8
  %1310 = getelementptr i8, ptr %1309, i64 8
  store i160 %.sroa.027.0.insert.ext, ptr %1310, align 4
  %1311 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %1312 = load ptr, ptr %result.i.i847, align 8
  %1313 = load ptr, ptr %1312, align 8
  %1314 = getelementptr i8, ptr %1313, i64 48
  %1315 = load ptr, ptr %1314, align 8
  %1316 = call { i64, i64 } %1315(ptr nonnull %1312)
  %1317 = extractvalue { i64, i64 } %1316, 0
  %1318 = extractvalue { i64, i64 } %1316, 1
  %1319 = urem i64 16, %1318
  %1320 = icmp eq i64 %1319, 0
  %1321 = sub i64 %1318, %1319
  %1322 = select i1 %1320, i64 0, i64 %1321
  %1323 = add i64 %1322, %1317
  %1324 = add i64 %1323, 16
  %1325 = and i64 %1323, 7
  %1326 = icmp eq i64 %1325, 0
  %1327 = sub nuw nsw i64 40, %1325
  %1328 = select i1 %1326, i64 32, i64 %1327
  %1329 = add i64 %1324, %1328
  %1330 = and i64 %1329, 3
  %1331 = icmp eq i64 %1330, 0
  %1332 = sub nuw nsw i64 4, %1330
  %1333 = select i1 %1331, i64 0, i64 %1332
  %1334 = getelementptr i8, ptr %result.i.i847, i64 %1329
  %1335 = getelementptr i8, ptr %1334, i64 %1333
  store i32 %1131, ptr %1335, align 4
  %1336 = load ptr, ptr %762, align 8
  %1337 = ptrtoint ptr %result.i.i847 to i64
  %1338 = ptrtoint ptr %1336 to i64
  %.sroa.2.0.insert.ext.i849 = zext i64 %1338 to i160
  %.sroa.2.0.insert.shift.i850 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i849, 64
  %.sroa.0.0.insert.ext.i852 = zext i64 %1337 to i160
  %.sroa.2.0.insert.insert.i851 = or disjoint i160 %.sroa.2.0.insert.shift.i850, %.sroa.0.0.insert.ext.i852
  %.sroa.0.0.insert.insert.i853 = or disjoint i160 %.sroa.2.0.insert.insert.i851, 3062541302288446171170371466885913903104
  %1339 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0.0.insert.insert.i853, 1
  %1340 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1341 = load ptr, ptr %63, align 8
  %1342 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1341, 0
  %1343 = load ptr, ptr %64, align 8
  %1344 = insertvalue { ptr, ptr, ptr, i32 } %1342, ptr %1343, 1
  %1345 = load ptr, ptr %758, align 8
  %1346 = insertvalue { ptr, ptr, ptr, i32 } %1344, ptr %1345, 2
  %1347 = load i32, ptr %65, align 4
  %1348 = insertvalue { ptr, ptr, ptr, i32 } %1346, i32 %1347, 3
  %hash_coef_ptr.i.i84.i858 = getelementptr i8, ptr %1341, i64 8
  %tbl_size_ptr.i.i85.i859 = getelementptr i8, ptr %1341, i64 16
  %offset_tbl_ptr.i.i86.i860 = getelementptr i8, ptr %1341, i64 40
  %hash_coef.i.i87.i861 = load i64, ptr %hash_coef_ptr.i.i84.i858, align 4
  %tbl_size.i.i88.i862 = load i64, ptr %tbl_size_ptr.i.i85.i859, align 4
  %offset_tbl.i.i89.i863 = load ptr, ptr %offset_tbl_ptr.i.i86.i860, align 8
  %product.i.i.i90.i864 = mul i64 %hash_coef.i.i87.i861, -5261542750394134544
  %shifted.i.i.i91.i865 = lshr i64 %product.i.i.i90.i864, 32
  %xored.i.i.i92.i866 = xor i64 %shifted.i.i.i91.i865, %product.i.i.i90.i864
  %hash.i.i.i93.i867 = and i64 %xored.i.i.i92.i866, %tbl_size.i.i88.i862
  %offset_ptr.i.i94.i868 = getelementptr i32, ptr %offset_tbl.i.i89.i863, i64 %hash.i.i.i93.i867
  %offset.i.i95.i869 = load i32, ptr %offset_ptr.i.i94.i868, align 4
  %eq.i98.i870 = icmp eq i32 %1347, %offset.i.i95.i869
  call void @llvm.assume(i1 %eq.i98.i870) #30
  %1349 = load ptr, ptr %result.i, align 8
  %1350 = load ptr, ptr %46, align 8
  %result.i99.i871 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1351 = getelementptr i8, ptr %result.i99.i871, i64 16
  store ptr %1350, ptr %1351, align 8
  %1352 = getelementptr i8, ptr %result.i99.i871, i64 8
  store ptr %1349, ptr %1352, align 8
  %1353 = getelementptr i8, ptr %result.i99.i871, i64 24
  store ptr null, ptr %1353, align 8
  %1354 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i99.i871)
  store ptr @Entry, ptr %result.i99.i871, align 8
  store ptr @_parameterization_Ptri32, ptr %28, align 8
  store ptr %result.i99.i871, ptr %763, align 8
  %1355 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %28)
  %1356 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1341)
  %1357 = sext i32 %1347 to i64
  %1358 = getelementptr ptr, ptr %1341, i64 %1357
  %1359 = getelementptr i8, ptr %1358, i64 128
  %1360 = load ptr, ptr %1359, align 8
  store ptr @i32_typ, ptr %29, align 8
  store ptr @Entry, ptr %764, align 8
  %1361 = call ptr %1360({ ptr, ptr, ptr, i32 } %1348, ptr nonnull %29)
  call void %1361({ ptr, ptr, ptr, i32 } %1348, { ptr, ptr, ptr, i32 } %1348, ptr nonnull %28, i32 %1222, { ptr, i160 } %1339)
  %1362 = icmp eq ptr %.fca.0.extract2.i846, @nil_typ
  %1363 = icmp eq ptr %.fca.0.extract2.i846, null
  %1364 = or i1 %1362, %1363
  br i1 %1364, label %._crit_edge.thread.i892, label %._crit_edge.i872

._crit_edge.thread.i892:                          ; preds = %HashMap_find_slot_keyK_hashPtri32.exit1222
  %1365 = load i32, ptr %765, align 4
  %1366 = add i32 %1365, 1
  store i32 %1366, ptr %765, align 4
  br label %._crit_edge1.sink.split.i890

._crit_edge.i872:                                 ; preds = %HashMap_find_slot_keyK_hashPtri32.exit1222
  %.fca.1.extract4.i = extractvalue { ptr, i160 } %1239, 1
  %.sroa.3192.8.extract.trunc.i873 = trunc i160 %.fca.1.extract4.i to i64
  %1367 = inttoptr i64 %.sroa.3192.8.extract.trunc.i873 to ptr
  %.sroa.5193.8.extract.shift.i874 = lshr i160 %.fca.1.extract4.i, 64
  %.sroa.5193.8.extract.trunc.i875 = trunc i160 %.sroa.5193.8.extract.shift.i874 to i64
  %1368 = inttoptr i64 %.sroa.5193.8.extract.trunc.i875 to ptr
  %hash_coef_ptr.i.i101.i876 = getelementptr i8, ptr %.fca.0.extract2.i846, i64 8
  %tbl_size_ptr.i.i102.i877 = getelementptr i8, ptr %.fca.0.extract2.i846, i64 16
  %offset_tbl_ptr.i.i103.i878 = getelementptr i8, ptr %.fca.0.extract2.i846, i64 40
  %hash_coef.i.i104.i879 = load i64, ptr %hash_coef_ptr.i.i101.i876, align 4
  %tbl_size.i.i105.i880 = load i64, ptr %tbl_size_ptr.i.i102.i877, align 4
  %offset_tbl.i.i106.i881 = load ptr, ptr %offset_tbl_ptr.i.i103.i878, align 8
  %product.i.i.i107.i882 = mul i64 %hash_coef.i.i104.i879, 4015701072841558310
  %shifted.i.i.i108.i883 = lshr i64 %product.i.i.i107.i882, 32
  %xored.i.i.i109.i884 = xor i64 %shifted.i.i.i108.i883, %product.i.i.i107.i882
  %hash.i.i.i110.i885 = and i64 %xored.i.i.i109.i884, %tbl_size.i.i105.i880
  %offset_ptr.i.i111.i886 = getelementptr i32, ptr %offset_tbl.i.i106.i881, i64 %hash.i.i.i110.i885
  %offset.i.i112.i887 = load i32, ptr %offset_ptr.i.i111.i886, align 4
  %1369 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract2.i846, 0
  %1370 = insertvalue { ptr, ptr, ptr, i32 } %1369, ptr %1367, 1
  %1371 = insertvalue { ptr, ptr, ptr, i32 } %1370, ptr %1368, 2
  %1372 = insertvalue { ptr, ptr, ptr, i32 } %1371, i32 %offset.i.i112.i887, 3
  %1373 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1374 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1375 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract2.i846)
  %1376 = sext i32 %offset.i.i112.i887 to i64
  %1377 = getelementptr ptr, ptr %.fca.0.extract2.i846, i64 %1376
  %1378 = getelementptr i8, ptr %1377, i64 56
  %1379 = load ptr, ptr %1378, align 8
  %1380 = call ptr %1379({ ptr, ptr, ptr, i32 } %1372, ptr nonnull %2)
  %1381 = call { ptr, i160 } %1380({ ptr, ptr, ptr, i32 } %1372, { ptr, ptr, ptr, i32 } %1372, ptr nonnull %2)
  %.fca.0.extract45.i888 = extractvalue { ptr, i160 } %1381, 0
  %1382 = getelementptr i8, ptr %.fca.0.extract45.i888, i64 8
  %1383 = getelementptr i8, ptr %.fca.0.extract45.i888, i64 16
  %1384 = getelementptr i8, ptr %.fca.0.extract45.i888, i64 24
  %1385 = getelementptr i8, ptr %.fca.0.extract45.i888, i64 32
  %1386 = load i64, ptr %1382, align 4
  %1387 = load i64, ptr %1383, align 4
  %1388 = load ptr, ptr %1384, align 8
  %1389 = load ptr, ptr %1385, align 8
  %result.i114.i889 = call i1 %1388(i64 %1387, i64 %1386, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %1389) #3
  br i1 %result.i114.i889, label %._crit_edge1.sink.split.i890, label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit893

._crit_edge1.sink.split.i890:                     ; preds = %._crit_edge.i872, %._crit_edge.thread.i892
  %.sink202.i891 = phi i64 [ 40, %._crit_edge.thread.i892 ], [ 32, %._crit_edge.i872 ]
  %1390 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1391 = getelementptr i8, ptr getelementptr inbounds (i8, ptr @HashMap, i64 72), i64 %.sink202.i891
  %1392 = load ptr, ptr %1391, align 8
  %1393 = load ptr, ptr %1392, align 8
  %1394 = call i32 %1393(ptr nonnull %result.i)
  %1395 = add i32 %1394, 1
  %1396 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1397 = getelementptr i8, ptr %1392, i64 8
  %1398 = load ptr, ptr %1397, align 8
  call void %1398(ptr nonnull %result.i, i32 %1395)
  br label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit893

HashMap_insert_internal_keyK_valueV_hashPtri32.exit893: ; preds = %._crit_edge.i872, %._crit_edge1.sink.split.i890
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %25)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %26)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %27)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %28)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %29)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %1399 = add nuw nsw i32 %.reg2mem73.0238, 1
  %1400 = icmp slt i32 %1399, %0
  br i1 %1400, label %._crit_edge, label %._crit_edge1

._crit_edge1:                                     ; preds = %HashMap_insert_internal_keyK_valueV_hashPtri32.exit893
  %1401 = call i64 @clock()
  %.sroa.024.0.insert.ext = zext i32 %129 to i160
  %1402 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.024.0.insert.ext, 1
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %39)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %40)
  %1403 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1404 = load ptr, ptr %51, align 8
  %1405 = call i32 %1404({ ptr, i160 } %1402)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %23)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %24)
  %1406 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1407 = load ptr, ptr %63, align 8
  %1408 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1407, 0
  %1409 = load ptr, ptr %64, align 8
  %1410 = insertvalue { ptr, ptr, ptr, i32 } %1408, ptr %1409, 1
  %1411 = load ptr, ptr %758, align 8
  %1412 = insertvalue { ptr, ptr, ptr, i32 } %1410, ptr %1411, 2
  %1413 = load i32, ptr %65, align 4
  %1414 = insertvalue { ptr, ptr, ptr, i32 } %1412, i32 %1413, 3
  %hash_coef_ptr.i.i51.i = getelementptr i8, ptr %1407, i64 8
  %tbl_size_ptr.i.i52.i = getelementptr i8, ptr %1407, i64 16
  %offset_tbl_ptr.i.i53.i = getelementptr i8, ptr %1407, i64 40
  %hash_coef.i.i54.i = load i64, ptr %hash_coef_ptr.i.i51.i, align 4
  %tbl_size.i.i55.i = load i64, ptr %tbl_size_ptr.i.i52.i, align 4
  %offset_tbl.i.i56.i = load ptr, ptr %offset_tbl_ptr.i.i53.i, align 8
  %product.i.i.i57.i = mul i64 %hash_coef.i.i54.i, -5261542750394134544
  %shifted.i.i.i58.i = lshr i64 %product.i.i.i57.i, 32
  %xored.i.i.i59.i = xor i64 %shifted.i.i.i58.i, %product.i.i.i57.i
  %hash.i.i.i60.i = and i64 %xored.i.i.i59.i, %tbl_size.i.i55.i
  %offset_ptr.i.i61.i = getelementptr i32, ptr %offset_tbl.i.i56.i, i64 %hash.i.i.i60.i
  %offset.i.i62.i = load i32, ptr %offset_ptr.i.i61.i, align 4
  %eq.i.i910 = icmp eq i32 %1413, %offset.i.i62.i
  call void @llvm.assume(i1 %eq.i.i910) #30
  %1415 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1416 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1407)
  %1417 = sext i32 %1413 to i64
  %1418 = getelementptr ptr, ptr %1407, i64 %1417
  %1419 = getelementptr i8, ptr %1418, i64 64
  %1420 = load ptr, ptr %1419, align 8
  %1421 = call ptr %1420({ ptr, ptr, ptr, i32 } %1414, ptr nonnull %2)
  %1422 = call i32 %1421({ ptr, ptr, ptr, i32 } %1414, { ptr, ptr, ptr, i32 } %1414, ptr nonnull %2)
  %1423 = add i32 %1422, -1
  %1424 = and i32 %1423, %1405
  %1425 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  br label %1426

1426:                                             ; preds = %1475, %._crit_edge1
  %spec.store.select.i922 = phi i32 [ %spec.store.select.i, %1475 ], [ -1, %._crit_edge1 ]
  %.0..0..0..i = phi i32 [ %1493, %1475 ], [ %1424, %._crit_edge1 ]
  %1427 = load ptr, ptr %63, align 8
  %1428 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1427, 0
  %1429 = load ptr, ptr %64, align 8
  %1430 = insertvalue { ptr, ptr, ptr, i32 } %1428, ptr %1429, 1
  %1431 = load ptr, ptr %758, align 8
  %1432 = insertvalue { ptr, ptr, ptr, i32 } %1430, ptr %1431, 2
  %1433 = load i32, ptr %65, align 4
  %1434 = insertvalue { ptr, ptr, ptr, i32 } %1432, i32 %1433, 3
  %hash_coef_ptr.i.i65.i = getelementptr i8, ptr %1427, i64 8
  %tbl_size_ptr.i.i66.i = getelementptr i8, ptr %1427, i64 16
  %offset_tbl_ptr.i.i67.i = getelementptr i8, ptr %1427, i64 40
  %hash_coef.i.i68.i = load i64, ptr %hash_coef_ptr.i.i65.i, align 4
  %tbl_size.i.i69.i = load i64, ptr %tbl_size_ptr.i.i66.i, align 4
  %offset_tbl.i.i70.i = load ptr, ptr %offset_tbl_ptr.i.i67.i, align 8
  %product.i.i.i71.i = mul i64 %hash_coef.i.i68.i, -5261542750394134544
  %shifted.i.i.i72.i = lshr i64 %product.i.i.i71.i, 32
  %xored.i.i.i73.i = xor i64 %shifted.i.i.i72.i, %product.i.i.i71.i
  %hash.i.i.i74.i = and i64 %xored.i.i.i73.i, %tbl_size.i.i69.i
  %offset_ptr.i.i75.i = getelementptr i32, ptr %offset_tbl.i.i70.i, i64 %hash.i.i.i74.i
  %offset.i.i76.i = load i32, ptr %offset_ptr.i.i75.i, align 4
  %eq.i79.i = icmp eq i32 %1433, %offset.i.i76.i
  call void @llvm.assume(i1 %eq.i79.i) #30
  %1435 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  store ptr @_parameterization_Ptri32, ptr %23, align 8
  %1436 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %23)
  %1437 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1427)
  %1438 = sext i32 %1433 to i64
  %1439 = getelementptr ptr, ptr %1427, i64 %1438
  %1440 = getelementptr i8, ptr %1439, i64 120
  %1441 = load ptr, ptr %1440, align 8
  store ptr @i32_typ, ptr %24, align 8
  %1442 = call ptr %1441({ ptr, ptr, ptr, i32 } %1434, ptr nonnull %24)
  %1443 = call { ptr, i160 } %1442({ ptr, ptr, ptr, i32 } %1434, { ptr, ptr, ptr, i32 } %1434, ptr nonnull %23, i32 %.0..0..0..i)
  %.fca.0.extract36.i = extractvalue { ptr, i160 } %1443, 0
  %1444 = icmp eq ptr %.fca.0.extract36.i, @nil_typ
  %1445 = icmp eq ptr %.fca.0.extract36.i, null
  %1446 = or i1 %1444, %1445
  br i1 %1446, label %1494, label %1447

1447:                                             ; preds = %1426
  %.fca.1.extract38.i = extractvalue { ptr, i160 } %1443, 1
  %.sroa.5.8.extract.shift.i = lshr i160 %.fca.1.extract38.i, 64
  %.sroa.5.8.extract.trunc.i = trunc i160 %.sroa.5.8.extract.shift.i to i64
  %.sroa.2.8.extract.trunc165.i = trunc i160 %.fca.1.extract38.i to i64
  %1448 = inttoptr i64 %.sroa.2.8.extract.trunc165.i to ptr
  %1449 = inttoptr i64 %.sroa.5.8.extract.trunc.i to ptr
  %hash_coef_ptr.i.i81.i = getelementptr i8, ptr %.fca.0.extract36.i, i64 8
  %tbl_size_ptr.i.i82.i = getelementptr i8, ptr %.fca.0.extract36.i, i64 16
  %offset_tbl_ptr.i.i83.i = getelementptr i8, ptr %.fca.0.extract36.i, i64 40
  %hash_coef.i.i84.i = load i64, ptr %hash_coef_ptr.i.i81.i, align 4
  %tbl_size.i.i85.i = load i64, ptr %tbl_size_ptr.i.i82.i, align 4
  %offset_tbl.i.i86.i = load ptr, ptr %offset_tbl_ptr.i.i83.i, align 8
  %product.i.i.i87.i = mul i64 %hash_coef.i.i84.i, 4015701072841558310
  %shifted.i.i.i88.i = lshr i64 %product.i.i.i87.i, 32
  %xored.i.i.i89.i = xor i64 %shifted.i.i.i88.i, %product.i.i.i87.i
  %hash.i.i.i90.i = and i64 %xored.i.i.i89.i, %tbl_size.i.i85.i
  %offset_ptr.i.i91.i = getelementptr i32, ptr %offset_tbl.i.i86.i, i64 %hash.i.i.i90.i
  %offset.i.i92.i = load i32, ptr %offset_ptr.i.i91.i, align 4
  %1450 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract36.i, 0
  %1451 = insertvalue { ptr, ptr, ptr, i32 } %1450, ptr %1448, 1
  %1452 = insertvalue { ptr, ptr, ptr, i32 } %1451, ptr %1449, 2
  %1453 = insertvalue { ptr, ptr, ptr, i32 } %1452, i32 %offset.i.i92.i, 3
  %1454 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1455 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1456 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i)
  %1457 = sext i32 %offset.i.i92.i to i64
  %1458 = getelementptr ptr, ptr %.fca.0.extract36.i, i64 %1457
  %1459 = getelementptr i8, ptr %1458, i64 64
  %1460 = load ptr, ptr %1459, align 8
  %1461 = call ptr %1460({ ptr, ptr, ptr, i32 } %1453, ptr nonnull %2)
  %1462 = call i32 %1461({ ptr, ptr, ptr, i32 } %1453, { ptr, ptr, ptr, i32 } %1453, ptr nonnull %2)
  %1463 = icmp eq i32 %1462, %1405
  %1464 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1465 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1466 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i)
  %1467 = getelementptr i8, ptr %1458, i64 48
  %1468 = load ptr, ptr %1467, align 8
  %1469 = call ptr %1468({ ptr, ptr, ptr, i32 } %1453, ptr nonnull %2)
  %1470 = call { ptr, i160 } %1469({ ptr, ptr, ptr, i32 } %1453, { ptr, ptr, ptr, i32 } %1453, ptr nonnull %2)
  %1471 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1472 = load ptr, ptr %52, align 8
  %1473 = call i1 %1472({ ptr, i160 } %1470, { ptr, i160 } %1402)
  %1474 = and i1 %1463, %1473
  br i1 %1474, label %HashMap_find_slot_keyK_hashPtri32.exit, label %1475

1475:                                             ; preds = %1447
  %1476 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1477 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1478 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i)
  %1479 = getelementptr i8, ptr %1458, i64 56
  %1480 = load ptr, ptr %1479, align 8
  %1481 = call ptr %1480({ ptr, ptr, ptr, i32 } %1453, ptr nonnull %2)
  %1482 = call { ptr, i160 } %1481({ ptr, ptr, ptr, i32 } %1453, { ptr, ptr, ptr, i32 } %1453, ptr nonnull %2)
  %.fca.0.extract15.i912 = extractvalue { ptr, i160 } %1482, 0
  %1483 = getelementptr i8, ptr %.fca.0.extract15.i912, i64 8
  %1484 = getelementptr i8, ptr %.fca.0.extract15.i912, i64 16
  %1485 = getelementptr i8, ptr %.fca.0.extract15.i912, i64 24
  %1486 = getelementptr i8, ptr %.fca.0.extract15.i912, i64 32
  %1487 = load i64, ptr %1483, align 4
  %1488 = load i64, ptr %1484, align 4
  %1489 = load ptr, ptr %1485, align 8
  %1490 = load ptr, ptr %1486, align 8
  %result.i.i913 = call i1 %1489(i64 %1488, i64 %1487, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %1490) #3
  %1491 = icmp eq i32 %spec.store.select.i922, -1
  %or.cond.i = select i1 %result.i.i913, i1 %1491, i1 false
  %spec.store.select.i = select i1 %or.cond.i, i32 %.0..0..0..i, i32 %spec.store.select.i922
  %1492 = add i32 %.0..0..0..i, 1
  %1493 = and i32 %1492, %1423
  br label %1426

1494:                                             ; preds = %1426
  %1495 = icmp eq i32 %spec.store.select.i922, -1
  %.pre = select i1 %1495, i32 %.0..0..0..i, i32 %spec.store.select.i922
  br label %HashMap_find_slot_keyK_hashPtri32.exit

HashMap_find_slot_keyK_hashPtri32.exit:           ; preds = %1447, %1494
  %1496 = phi i32 [ %.pre, %1494 ], [ %.0..0..0..i, %1447 ]
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %23)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %24)
  %1497 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1498 = load ptr, ptr %63, align 8
  %1499 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1498, 0
  %1500 = load ptr, ptr %64, align 8
  %1501 = insertvalue { ptr, ptr, ptr, i32 } %1499, ptr %1500, 1
  %1502 = load ptr, ptr %758, align 8
  %1503 = insertvalue { ptr, ptr, ptr, i32 } %1501, ptr %1502, 2
  %1504 = load i32, ptr %65, align 4
  %1505 = insertvalue { ptr, ptr, ptr, i32 } %1503, i32 %1504, 3
  %hash_coef_ptr.i.i58.i = getelementptr i8, ptr %1498, i64 8
  %tbl_size_ptr.i.i59.i = getelementptr i8, ptr %1498, i64 16
  %offset_tbl_ptr.i.i60.i = getelementptr i8, ptr %1498, i64 40
  %hash_coef.i.i61.i = load i64, ptr %hash_coef_ptr.i.i58.i, align 4
  %tbl_size.i.i62.i = load i64, ptr %tbl_size_ptr.i.i59.i, align 4
  %offset_tbl.i.i63.i = load ptr, ptr %offset_tbl_ptr.i.i60.i, align 8
  %product.i.i.i64.i = mul i64 %hash_coef.i.i61.i, -5261542750394134544
  %shifted.i.i.i65.i = lshr i64 %product.i.i.i64.i, 32
  %xored.i.i.i66.i = xor i64 %shifted.i.i.i65.i, %product.i.i.i64.i
  %hash.i.i.i67.i = and i64 %xored.i.i.i66.i, %tbl_size.i.i62.i
  %offset_ptr.i.i68.i = getelementptr i32, ptr %offset_tbl.i.i63.i, i64 %hash.i.i.i67.i
  %offset.i.i69.i = load i32, ptr %offset_ptr.i.i68.i, align 4
  %eq.i.i581 = icmp eq i32 %1504, %offset.i.i69.i
  call void @llvm.assume(i1 %eq.i.i581) #30
  store ptr @_parameterization_Ptri32, ptr %39, align 8
  %1506 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %39)
  %1507 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1498)
  %1508 = sext i32 %1504 to i64
  %1509 = getelementptr ptr, ptr %1498, i64 %1508
  %1510 = getelementptr i8, ptr %1509, i64 120
  %1511 = load ptr, ptr %1510, align 8
  store ptr @i32_typ, ptr %40, align 8
  %1512 = call ptr %1511({ ptr, ptr, ptr, i32 } %1505, ptr nonnull %40)
  %1513 = call { ptr, i160 } %1512({ ptr, ptr, ptr, i32 } %1505, { ptr, ptr, ptr, i32 } %1505, ptr nonnull %39, i32 %1496)
  %.fca.0.extract.i582 = extractvalue { ptr, i160 } %1513, 0
  %1514 = icmp ne ptr %.fca.0.extract.i582, @nil_typ
  %1515 = icmp ne ptr %.fca.0.extract.i582, null
  %.not56.i = and i1 %1514, %1515
  br i1 %.not56.i, label %1516, label %HashMap_get_keyK.exit.thread

1516:                                             ; preds = %HashMap_find_slot_keyK_hashPtri32.exit
  %.fca.1.extract.i583 = extractvalue { ptr, i160 } %1513, 1
  %.sroa.3.8.extract.trunc.i584 = trunc i160 %.fca.1.extract.i583 to i64
  %1517 = inttoptr i64 %.sroa.3.8.extract.trunc.i584 to ptr
  %.sroa.5.8.extract.shift.i585 = lshr i160 %.fca.1.extract.i583, 64
  %.sroa.5.8.extract.trunc.i586 = trunc i160 %.sroa.5.8.extract.shift.i585 to i64
  %1518 = inttoptr i64 %.sroa.5.8.extract.trunc.i586 to ptr
  %hash_coef_ptr.i.i72.i = getelementptr i8, ptr %.fca.0.extract.i582, i64 8
  %tbl_size_ptr.i.i73.i = getelementptr i8, ptr %.fca.0.extract.i582, i64 16
  %offset_tbl_ptr.i.i74.i = getelementptr i8, ptr %.fca.0.extract.i582, i64 40
  %hash_coef.i.i75.i = load i64, ptr %hash_coef_ptr.i.i72.i, align 4
  %tbl_size.i.i76.i = load i64, ptr %tbl_size_ptr.i.i73.i, align 4
  %offset_tbl.i.i77.i = load ptr, ptr %offset_tbl_ptr.i.i74.i, align 8
  %product.i.i.i78.i = mul i64 %hash_coef.i.i75.i, 4015701072841558310
  %shifted.i.i.i79.i = lshr i64 %product.i.i.i78.i, 32
  %xored.i.i.i80.i = xor i64 %shifted.i.i.i79.i, %product.i.i.i78.i
  %hash.i.i.i81.i = and i64 %xored.i.i.i80.i, %tbl_size.i.i76.i
  %offset_ptr.i.i82.i = getelementptr i32, ptr %offset_tbl.i.i77.i, i64 %hash.i.i.i81.i
  %offset.i.i83.i = load i32, ptr %offset_ptr.i.i82.i, align 4
  %1519 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract.i582, 0
  %1520 = insertvalue { ptr, ptr, ptr, i32 } %1519, ptr %1517, 1
  %1521 = insertvalue { ptr, ptr, ptr, i32 } %1520, ptr %1518, 2
  %1522 = insertvalue { ptr, ptr, ptr, i32 } %1521, i32 %offset.i.i83.i, 3
  %1523 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1524 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1525 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract.i582)
  %1526 = sext i32 %offset.i.i83.i to i64
  %1527 = getelementptr ptr, ptr %.fca.0.extract.i582, i64 %1526
  %1528 = getelementptr i8, ptr %1527, i64 56
  %1529 = load ptr, ptr %1528, align 8
  %1530 = call ptr %1529({ ptr, ptr, ptr, i32 } %1522, ptr nonnull %2)
  %1531 = call { ptr, i160 } %1530({ ptr, ptr, ptr, i32 } %1522, { ptr, ptr, ptr, i32 } %1522, ptr nonnull %2)
  %.fca.0.extract47.i = extractvalue { ptr, i160 } %1531, 0
  %.fca.1.extract49.i = extractvalue { ptr, i160 } %1531, 1
  %1532 = getelementptr i8, ptr %.fca.0.extract47.i, i64 8
  %1533 = getelementptr i8, ptr %.fca.0.extract47.i, i64 16
  %1534 = getelementptr i8, ptr %.fca.0.extract47.i, i64 24
  %1535 = getelementptr i8, ptr %.fca.0.extract47.i, i64 32
  %1536 = load i64, ptr %1532, align 4
  %1537 = load i64, ptr %1533, align 4
  %1538 = load ptr, ptr %1534, align 8
  %1539 = load ptr, ptr %1535, align 8
  %result.i.i587 = call i1 %1538(i64 %1537, i64 %1536, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %1539) #3
  br i1 %result.i.i587, label %HashMap_get_keyK.exit.thread, label %HashMap_get_keyK.exit

HashMap_get_keyK.exit.thread:                     ; preds = %HashMap_find_slot_keyK_hashPtri32.exit, %1516
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %39)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %40)
  br label %1544

HashMap_get_keyK.exit:                            ; preds = %1516
  %result.i85.i = call i1 %1538(i64 %1537, i64 %1536, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr readonly %1539) #3
  %cond.fr.i = freeze i1 %result.i85.i
  %spec.select.i = select i1 %cond.fr.i, ptr %.fca.0.extract47.i, ptr @nil_typ
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %39)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %40)
  %1540 = icmp ne ptr %spec.select.i, @nil_typ
  %1541 = icmp ne ptr %spec.select.i, null
  %.not46 = and i1 %1540, %1541
  br i1 %.not46, label %1542, label %1544

1542:                                             ; preds = %HashMap_get_keyK.exit
  %.sroa.2.8.extract.trunc = trunc i160 %.fca.1.extract49.i to i32
  %1543 = add i32 %129, 1
  %.not = icmp eq i32 %1543, %.sroa.2.8.extract.trunc
  br label %1544

1544:                                             ; preds = %HashMap_get_keyK.exit.thread, %HashMap_get_keyK.exit, %1542
  %.reg2mem69.0 = phi i1 [ %.not, %1542 ], [ false, %HashMap_get_keyK.exit ], [ false, %HashMap_get_keyK.exit.thread ]
  %1545 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1546 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1547 = load i32, ptr %765, align 4
  %1548 = icmp eq i32 %1547, %755
  %1549 = select i1 %1548, i1 %.reg2mem69.0, i1 false
  br label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit

IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit: ; preds = %1544, %._crit_edge237.thread
  %1550 = phi i64 [ %756, %1544 ], [ %96, %._crit_edge237.thread ]
  %1551 = phi i32 [ %755, %1544 ], [ 0, %._crit_edge237.thread ]
  %1552 = phi i64 [ %1401, %1544 ], [ %97, %._crit_edge237.thread ]
  %.reg2mem65.0.in = phi i1 [ %1549, %1544 ], [ %102, %._crit_edge237.thread ]
  %result.i108 = call noalias dereferenceable_or_null(14) ptr @bump_malloc_inner(i64 noundef 14, ptr nonnull @current_ptr) #29
  store <13 x i8> <i8 73, i8 110, i8 115, i8 101, i8 114, i8 116, i8 32, i8 82, i8 97, i8 110, i8 100, i8 111, i8 109>, ptr %result.i108, align 16
  %result.i109 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %1553 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %result.i109, 1
  %1554 = insertvalue { ptr, ptr, ptr, i32 } %1553, ptr undef, 2
  %1555 = insertvalue { ptr, ptr, ptr, i32 } %1554, i32 9, 3
  store ptr %result.i108, ptr %result.i109, align 8
  %1556 = getelementptr i8, ptr %result.i109, i64 8
  store i32 13, ptr %1556, align 4
  %1557 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %1558 = getelementptr i8, ptr %result.i109, i64 12
  store i32 14, ptr %1558, align 4
  %1559 = sub i64 %1552, %1550
  call void @print_benchmark_result({ ptr, ptr, ptr, i32 } %1555, i32 %0, i64 %1559)
  %result.i110 = call noalias dereferenceable_or_null(19) ptr @bump_malloc_inner(i64 noundef 19, ptr nonnull @current_ptr) #29
  store <18 x i8> <i8 32, i8 32, i8 32, i8 32, i8 86, i8 101, i8 114, i8 105, i8 102, i8 105, i8 99, i8 97, i8 116, i8 105, i8 111, i8 110, i8 58, i8 32>, ptr %result.i110, align 32
  %result.i111 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %1560 = getelementptr inbounds i8, ptr %41, i64 8
  %1561 = getelementptr inbounds i8, ptr %41, i64 24
  store ptr @String, ptr %41, align 8
  store ptr %result.i111, ptr %1560, align 8
  store i32 9, ptr %1561, align 8
  %1562 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %41)
  store ptr %result.i110, ptr %result.i111, align 8
  %1563 = getelementptr i8, ptr %result.i111, i64 8
  store i32 18, ptr %1563, align 4
  %1564 = getelementptr i8, ptr %result.i111, i64 12
  store i32 19, ptr %1564, align 4
  %1565 = load i160, ptr %1560, align 8
  %1566 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %.sroa.3.8.extract.trunc.i = trunc i160 %1565 to i64
  %1567 = inttoptr i64 %.sroa.3.8.extract.trunc.i to ptr
  %1568 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1569 = getelementptr i8, ptr %1567, i64 8
  %1570 = load i32, ptr %1569, align 4
  %1571 = add i32 %1570, 1
  %1572 = sext i32 %1571 to i64
  %result.i.i679 = call noalias ptr @bump_malloc_inner(i64 noundef %1572, ptr nonnull @current_ptr) #29
  %1573 = load i32, ptr %1569, align 4
  %1574 = icmp sgt i32 %1573, 0
  br i1 %1574, label %.lr.ph.i, label %String_c_string_.exit

.lr.ph.i:                                         ; preds = %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit
  %1575 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %1576 = load ptr, ptr %1567, align 8
  %1577 = zext nneg i32 %1573 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i679, ptr align 1 %1576, i64 %1577, i1 false)
  br label %String_c_string_.exit

String_c_string_.exit:                            ; preds = %.lr.ph.i, %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit
  %1578 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %1579 = sext i32 %1573 to i64
  %1580 = getelementptr i8, ptr %result.i.i679, i64 %1579
  store i8 0, ptr %1580, align 1
  %puts.i = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i679)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %result.i112 = call noalias dereferenceable_or_null(5) ptr @bump_malloc_inner(i64 noundef 5, ptr nonnull @current_ptr) #29
  %. = select i1 %.reg2mem65.0.in, <4 x i8> <i8 80, i8 65, i8 83, i8 83>, <4 x i8> <i8 70, i8 65, i8 73, i8 76>
  %.350 = select i1 %.reg2mem65.0.in, ptr %42, ptr %43
  store <4 x i8> %., ptr %result.i112, align 4
  %result.i113 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %.350.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v = select i1 %.reg2mem65.0.in, ptr %42, ptr %43
  %.350.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel = getelementptr inbounds i8, ptr %.350.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v, i64 8
  %.350.sroa.sel516.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v = select i1 %.reg2mem65.0.in, ptr %42, ptr %43
  %.350.sroa.sel516.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel = getelementptr inbounds i8, ptr %.350.sroa.sel516.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v, i64 24
  store ptr @String, ptr %.350, align 8
  store ptr %result.i113, ptr %.350.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  store i32 9, ptr %.350.sroa.sel516.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  %1581 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %.350)
  store ptr %result.i112, ptr %result.i113, align 8
  %1582 = getelementptr i8, ptr %result.i113, i64 8
  store i32 4, ptr %1582, align 4
  %1583 = getelementptr i8, ptr %result.i113, i64 12
  store i32 5, ptr %1583, align 4
  %1584 = load i160, ptr %.350.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  %1585 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %.sroa.3.8.extract.trunc.i455 = trunc i160 %1584 to i64
  %1586 = inttoptr i64 %.sroa.3.8.extract.trunc.i455 to ptr
  %1587 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1588 = getelementptr i8, ptr %1586, i64 8
  %1589 = load i32, ptr %1588, align 4
  %1590 = add i32 %1589, 1
  %1591 = sext i32 %1590 to i64
  %result.i.i695 = call noalias ptr @bump_malloc_inner(i64 noundef %1591, ptr nonnull @current_ptr) #29
  %1592 = load i32, ptr %1588, align 4
  %1593 = icmp sgt i32 %1592, 0
  br i1 %1593, label %.lr.ph.i696, label %String_c_string_.exit700

.lr.ph.i696:                                      ; preds = %String_c_string_.exit
  %1594 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %1595 = load ptr, ptr %1586, align 8
  %1596 = zext nneg i32 %1592 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i695, ptr align 1 %1595, i64 %1596, i1 false)
  br label %String_c_string_.exit700

String_c_string_.exit700:                         ; preds = %.lr.ph.i696, %String_c_string_.exit
  %1597 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %1598 = sext i32 %1592 to i64
  %1599 = getelementptr i8, ptr %result.i.i695, i64 %1598
  store i8 0, ptr %1599, align 1
  %puts.i471 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i695)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %result.i152 = call noalias dereferenceable_or_null(28) ptr @bump_malloc_inner(i64 noundef 28, ptr nonnull @current_ptr) #29
  store <27 x i8> <i8 32, i8 32, i8 32, i8 32, i8 40, i8 69, i8 120, i8 112, i8 101, i8 99, i8 116, i8 101, i8 100, i8 32, i8 117, i8 110, i8 105, i8 113, i8 117, i8 101, i8 32, i8 115, i8 105, i8 122, i8 101, i8 58, i8 32>, ptr %result.i152, align 32
  %result.i153 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %1600 = getelementptr inbounds i8, ptr %44, i64 8
  %1601 = getelementptr inbounds i8, ptr %44, i64 24
  store ptr @String, ptr %44, align 8
  store ptr %result.i153, ptr %1600, align 8
  store i32 9, ptr %1601, align 8
  %1602 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %44)
  store ptr %result.i152, ptr %result.i153, align 8
  %1603 = getelementptr i8, ptr %result.i153, i64 8
  store i32 27, ptr %1603, align 4
  %1604 = getelementptr i8, ptr %result.i153, i64 12
  store i32 28, ptr %1604, align 4
  %1605 = load i160, ptr %1600, align 8
  %1606 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %.sroa.3.8.extract.trunc.i475 = trunc i160 %1605 to i64
  %1607 = inttoptr i64 %.sroa.3.8.extract.trunc.i475 to ptr
  %1608 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1609 = getelementptr i8, ptr %1607, i64 8
  %1610 = load i32, ptr %1609, align 4
  %1611 = add i32 %1610, 1
  %1612 = sext i32 %1611 to i64
  %result.i.i715 = call noalias ptr @bump_malloc_inner(i64 noundef %1612, ptr nonnull @current_ptr) #29
  %1613 = load i32, ptr %1609, align 4
  %1614 = icmp sgt i32 %1613, 0
  br i1 %1614, label %.lr.ph.i716, label %String_c_string_.exit720

.lr.ph.i716:                                      ; preds = %String_c_string_.exit700
  %1615 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %1616 = load ptr, ptr %1607, align 8
  %1617 = zext nneg i32 %1613 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i715, ptr align 1 %1616, i64 %1617, i1 false)
  br label %String_c_string_.exit720

String_c_string_.exit720:                         ; preds = %.lr.ph.i716, %String_c_string_.exit700
  %1618 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %1619 = sext i32 %1613 to i64
  %1620 = getelementptr i8, ptr %result.i.i715, i64 %1619
  store i8 0, ptr %1620, align 1
  %puts.i491 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i715)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %1621 = call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i32_string, i32 %1551)
  %result.i190 = call noalias dereferenceable_or_null(2) ptr @bump_malloc_inner(i64 noundef 2, ptr nonnull @current_ptr) #29
  store <1 x i8> <i8 41>, ptr %result.i190, align 1
  %result.i191 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %1622 = getelementptr inbounds i8, ptr %45, i64 8
  %1623 = getelementptr inbounds i8, ptr %45, i64 24
  store ptr @String, ptr %45, align 8
  store ptr %result.i191, ptr %1622, align 8
  store i32 9, ptr %1623, align 8
  %1624 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %45)
  store ptr %result.i190, ptr %result.i191, align 8
  %1625 = getelementptr i8, ptr %result.i191, i64 8
  store i32 1, ptr %1625, align 4
  %1626 = getelementptr i8, ptr %result.i191, i64 12
  store i32 2, ptr %1626, align 4
  %1627 = load i160, ptr %1622, align 8
  %1628 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %.sroa.3.8.extract.trunc.i496 = trunc i160 %1627 to i64
  %1629 = inttoptr i64 %.sroa.3.8.extract.trunc.i496 to ptr
  %1630 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1631 = getelementptr i8, ptr %1629, i64 8
  %1632 = load i32, ptr %1631, align 4
  %1633 = add i32 %1632, 1
  %1634 = sext i32 %1633 to i64
  %result.i.i735 = call noalias ptr @bump_malloc_inner(i64 noundef %1634, ptr nonnull @current_ptr) #29
  %1635 = load i32, ptr %1631, align 4
  %1636 = icmp sgt i32 %1635, 0
  br i1 %1636, label %.lr.ph.i736, label %String_c_string_.exit740

.lr.ph.i736:                                      ; preds = %String_c_string_.exit720
  %1637 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %1638 = load ptr, ptr %1629, align 8
  %1639 = zext nneg i32 %1635 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i735, ptr align 1 %1638, i64 %1639, i1 false)
  br label %String_c_string_.exit740

String_c_string_.exit740:                         ; preds = %.lr.ph.i736, %String_c_string_.exit720
  %1640 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %1641 = sext i32 %1635 to i64
  %1642 = getelementptr i8, ptr %result.i.i735, i64 %1641
  store i8 0, ptr %1642, align 1
  %puts.i512 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i735)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  ret void
}

define void @benchmark_get_sequential_hit(i32 %0) local_unnamed_addr {
  %2 = alloca [0 x ptr], align 8
  %3 = alloca [1 x ptr], align 8
  %4 = alloca { ptr }, align 8
  %5 = alloca [1 x ptr], align 8
  %6 = alloca { ptr }, align 8
  %7 = alloca [1 x ptr], align 8
  %8 = alloca { ptr }, align 8
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = alloca [3 x ptr], align 8
  %11 = alloca [2 x ptr], align 8
  %12 = alloca { ptr, ptr }, align 8
  %13 = alloca [1 x ptr], align 8
  %14 = alloca { ptr }, align 8
  %15 = alloca [1 x ptr], align 8
  %16 = alloca { ptr }, align 8
  %17 = alloca { ptr, ptr, ptr, i32 }, align 8
  %18 = alloca [2 x ptr], align 8
  %19 = alloca { ptr, ptr }, align 8
  %20 = alloca [1 x ptr], align 8
  %21 = alloca { ptr }, align 8
  %22 = alloca [1 x ptr], align 8
  %23 = alloca { ptr }, align 8
  %oldProtect.i31 = alloca i32, align 4
  %oldProtect.i = alloca i32, align 4
  %24 = alloca { ptr, ptr, ptr, i32 }, align 8
  %25 = alloca { ptr, ptr, ptr, i32 }, align 8
  %26 = alloca { ptr, ptr, ptr, i32 }, align 8
  %result.i = tail call noalias dereferenceable_or_null(80) ptr @bump_malloc_inner(i64 noundef 80, ptr nonnull @current_ptr) #29
  store ptr @_parameterization_Ptri32, ptr %result.i, align 8
  %27 = getelementptr i8, ptr %result.i, i64 8
  store ptr @_parameterization_Ptri32, ptr %27, align 8
  %28 = getelementptr i8, ptr %result.i, i64 16
  store ptr @_parameterization_PairPtri32._Ptri32, ptr %28, align 8
  %29 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %result.i)
  %result.i28 = tail call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %oldProtect.i)
  %result.i29 = call i32 @VirtualProtect(ptr %result.i28, i64 16, i32 64, ptr nonnull %oldProtect.i) #16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %oldProtect.i)
  call void @llvm.init.trampoline(ptr %result.i28, ptr nonnull @ybllmnbebm, ptr nonnull @i32_hasher)
  %ret.i = call ptr @llvm.adjust.trampoline(ptr readonly %result.i28) #31
  %30 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i28)
  %result.i30 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %oldProtect.i31)
  %result.i32 = call i32 @VirtualProtect(ptr %result.i30, i64 16, i32 64, ptr nonnull %oldProtect.i31) #16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %oldProtect.i31)
  call void @llvm.init.trampoline(ptr %result.i30, ptr nonnull @spivdtjshg, ptr nonnull @i32_eq)
  %ret.i33 = call ptr @llvm.adjust.trampoline(ptr readonly %result.i30) #31
  %31 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i30)
  %32 = getelementptr i8, ptr %result.i, i64 64
  store ptr %ret.i, ptr %32, align 8
  %33 = getelementptr i8, ptr %result.i, i64 72
  store ptr %ret.i33, ptr %33, align 8
  %result.i.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %34 = getelementptr i8, ptr %result.i.i, i64 16
  store ptr @_parameterization_Nil, ptr %34, align 8
  %result.i4.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %35 = getelementptr i8, ptr %result.i4.i, i64 16
  store ptr @_parameterization_Ptri32, ptr %35, align 8
  %36 = getelementptr i8, ptr %result.i4.i, i64 8
  store ptr @_parameterization_Ptri32, ptr %36, align 8
  %37 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i4.i)
  store ptr @Entry, ptr %result.i4.i, align 8
  %38 = getelementptr i8, ptr %result.i.i, i64 8
  store ptr %result.i4.i, ptr %38, align 8
  %39 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i)
  store ptr @union_typ, ptr %result.i.i, align 8
  %result.i5.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i, ptr %result.i5.i, align 8
  %40 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i5.i)
  %41 = getelementptr i8, ptr %result.i5.i, i64 16
  store i32 16, ptr %41, align 4
  %42 = getelementptr i8, ptr %result.i5.i, i64 20
  store i32 16, ptr %42, align 4
  %result.i.i.i = call noalias dereferenceable_or_null(512) ptr @bump_malloc_inner(i64 noundef 512, ptr nonnull @current_ptr) #29
  %43 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %44 = getelementptr i8, ptr %result.i5.i, i64 8
  store ptr %result.i.i.i, ptr %44, align 8
  %45 = getelementptr i8, ptr %result.i, i64 24
  store ptr @Array, ptr %45, align 8
  %46 = getelementptr i8, ptr %result.i, i64 32
  store ptr %result.i5.i, ptr %46, align 8
  %47 = getelementptr i8, ptr %result.i, i64 40
  %48 = getelementptr i8, ptr %result.i, i64 48
  store i32 9, ptr %48, align 4
  %49 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %50 = getelementptr i8, ptr %result.i, i64 60
  %51 = icmp sgt i32 %0, 0
  br i1 %51, label %.lr.ph.preheader, label %._crit_edge.thread

.lr.ph.preheader:                                 ; preds = %1
  %52 = getelementptr inbounds i8, ptr %17, i64 8
  %53 = getelementptr inbounds i8, ptr %17, i64 24
  %54 = getelementptr inbounds i8, ptr %17, i64 16
  %55 = getelementptr inbounds i8, ptr %18, i64 8
  %56 = getelementptr inbounds i8, ptr %19, i64 8
  %57 = getelementptr i8, ptr %result.i, i64 56
  %58 = getelementptr inbounds i8, ptr %9, i64 8
  %59 = getelementptr inbounds i8, ptr %9, i64 24
  %60 = getelementptr inbounds i8, ptr %9, i64 16
  %61 = getelementptr inbounds i8, ptr %10, i64 8
  %62 = getelementptr inbounds i8, ptr %10, i64 16
  %63 = getelementptr inbounds i8, ptr %11, i64 8
  %64 = getelementptr inbounds i8, ptr %12, i64 8
  br label %.lr.ph

._crit_edge.thread:                               ; preds = %1
  %65 = call i64 @clock()
  br label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit

.lr.ph:                                           ; preds = %.lr.ph.preheader, %HashMap_insert_internal_keyK_valueV_hashPtri32.exit
  %.reg2mem75.088 = phi i64 [ %690, %HashMap_insert_internal_keyK_valueV_hashPtri32.exit ], [ 0, %.lr.ph.preheader ]
  %.reg2mem73.087 = phi i32 [ %66, %HashMap_insert_internal_keyK_valueV_hashPtri32.exit ], [ 0, %.lr.ph.preheader ]
  %66 = add nuw nsw i32 %.reg2mem73.087, 1
  %67 = zext nneg i32 %66 to i64
  %.sroa.024.0.insert.ext = zext nneg i32 %.reg2mem73.087 to i160
  %68 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.024.0.insert.ext, 1
  %.sroa.021.0.insert.ext = zext nneg i32 %66 to i160
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %69 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %70 = load ptr, ptr %45, align 8
  %71 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %70, 0
  %72 = load ptr, ptr %46, align 8
  %73 = insertvalue { ptr, ptr, ptr, i32 } %71, ptr %72, 1
  %74 = load ptr, ptr %47, align 8
  %75 = insertvalue { ptr, ptr, ptr, i32 } %73, ptr %74, 2
  %76 = load i32, ptr %48, align 4
  %77 = insertvalue { ptr, ptr, ptr, i32 } %75, i32 %76, 3
  %hash_coef_ptr.i.i42.i = getelementptr i8, ptr %70, i64 8
  %tbl_size_ptr.i.i43.i = getelementptr i8, ptr %70, i64 16
  %offset_tbl_ptr.i.i44.i = getelementptr i8, ptr %70, i64 40
  %hash_coef.i.i45.i = load i64, ptr %hash_coef_ptr.i.i42.i, align 4
  %tbl_size.i.i46.i = load i64, ptr %tbl_size_ptr.i.i43.i, align 4
  %offset_tbl.i.i47.i = load ptr, ptr %offset_tbl_ptr.i.i44.i, align 8
  %product.i.i.i48.i = mul i64 %hash_coef.i.i45.i, -5261542750394134544
  %shifted.i.i.i49.i = lshr i64 %product.i.i.i48.i, 32
  %xored.i.i.i50.i = xor i64 %shifted.i.i.i49.i, %product.i.i.i48.i
  %hash.i.i.i51.i = and i64 %xored.i.i.i50.i, %tbl_size.i.i46.i
  %offset_ptr.i.i52.i = getelementptr i32, ptr %offset_tbl.i.i47.i, i64 %hash.i.i.i51.i
  %offset.i.i53.i = load i32, ptr %offset_ptr.i.i52.i, align 4
  %eq.i.i = icmp eq i32 %76, %offset.i.i53.i
  call void @llvm.assume(i1 %eq.i.i) #30
  %78 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %79 = call ptr @llvm.invariant.start.p0(i64 600, ptr %70)
  %80 = sext i32 %76 to i64
  %81 = getelementptr ptr, ptr %70, i64 %80
  %82 = getelementptr i8, ptr %81, i64 64
  %83 = load ptr, ptr %82, align 8
  %84 = call ptr %83({ ptr, ptr, ptr, i32 } %77, ptr nonnull %2)
  %85 = call i32 %84({ ptr, ptr, ptr, i32 } %77, { ptr, ptr, ptr, i32 } %77, ptr nonnull %2)
  %86 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %87 = load ptr, ptr %45, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %87, 0
  %89 = load ptr, ptr %46, align 8
  %90 = insertvalue { ptr, ptr, ptr, i32 } %88, ptr %89, 1
  %91 = load ptr, ptr %47, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } %90, ptr %91, 2
  %93 = load i32, ptr %48, align 4
  %94 = insertvalue { ptr, ptr, ptr, i32 } %92, i32 %93, 3
  %hash_coef_ptr.i.i56.i = getelementptr i8, ptr %87, i64 8
  %tbl_size_ptr.i.i57.i = getelementptr i8, ptr %87, i64 16
  %offset_tbl_ptr.i.i58.i = getelementptr i8, ptr %87, i64 40
  %hash_coef.i.i59.i = load i64, ptr %hash_coef_ptr.i.i56.i, align 4
  %tbl_size.i.i60.i = load i64, ptr %tbl_size_ptr.i.i57.i, align 4
  %offset_tbl.i.i61.i = load ptr, ptr %offset_tbl_ptr.i.i58.i, align 8
  %product.i.i.i62.i = mul i64 %hash_coef.i.i59.i, -5261542750394134544
  %shifted.i.i.i63.i = lshr i64 %product.i.i.i62.i, 32
  %xored.i.i.i64.i = xor i64 %shifted.i.i.i63.i, %product.i.i.i62.i
  %hash.i.i.i65.i = and i64 %xored.i.i.i64.i, %tbl_size.i.i60.i
  %offset_ptr.i.i66.i = getelementptr i32, ptr %offset_tbl.i.i61.i, i64 %hash.i.i.i65.i
  %offset.i.i67.i = load i32, ptr %offset_ptr.i.i66.i, align 4
  %eq.i70.i = icmp eq i32 %93, %offset.i.i67.i
  call void @llvm.assume(i1 %eq.i70.i) #30
  %95 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %96 = call ptr @llvm.invariant.start.p0(i64 600, ptr %87)
  %97 = sext i32 %93 to i64
  %98 = getelementptr ptr, ptr %87, i64 %97
  %99 = getelementptr i8, ptr %98, i64 64
  %100 = load ptr, ptr %99, align 8
  %101 = call ptr %100({ ptr, ptr, ptr, i32 } %94, ptr nonnull %2)
  %102 = call i32 %101({ ptr, ptr, ptr, i32 } %94, { ptr, ptr, ptr, i32 } %94, ptr nonnull %2)
  %103 = icmp eq i32 %102, 0
  %104 = load i32, ptr %50, align 4
  %105 = mul i32 %104, 10
  %106 = add i32 %105, 10
  %107 = mul i32 %85, 7
  %108 = icmp sge i32 %106, %107
  %109 = or i1 %103, %108
  br i1 %109, label %110, label %HashMap_insert_keyK_valueV.exit

110:                                              ; preds = %.lr.ph
  %111 = shl i32 %85, 1
  %112 = call i32 @llvm.smax.i32(i32 %111, i32 16)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %20)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %21)
  %113 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %114 = load ptr, ptr %45, align 8
  %115 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %114, 0
  %116 = load ptr, ptr %46, align 8
  %117 = insertvalue { ptr, ptr, ptr, i32 } %115, ptr %116, 1
  %118 = load ptr, ptr %47, align 8
  %119 = insertvalue { ptr, ptr, ptr, i32 } %117, ptr %118, 2
  %120 = load i32, ptr %48, align 4
  %121 = insertvalue { ptr, ptr, ptr, i32 } %119, i32 %120, 3
  %hash_coef_ptr.i.i39.i = getelementptr i8, ptr %114, i64 8
  %tbl_size_ptr.i.i40.i = getelementptr i8, ptr %114, i64 16
  %offset_tbl_ptr.i.i41.i = getelementptr i8, ptr %114, i64 40
  %hash_coef.i.i42.i = load i64, ptr %hash_coef_ptr.i.i39.i, align 4
  %tbl_size.i.i43.i = load i64, ptr %tbl_size_ptr.i.i40.i, align 4
  %offset_tbl.i.i44.i = load ptr, ptr %offset_tbl_ptr.i.i41.i, align 8
  %product.i.i.i45.i = mul i64 %hash_coef.i.i42.i, -5261542750394134544
  %shifted.i.i.i46.i = lshr i64 %product.i.i.i45.i, 32
  %xored.i.i.i47.i = xor i64 %shifted.i.i.i46.i, %product.i.i.i45.i
  %hash.i.i.i48.i = and i64 %xored.i.i.i47.i, %tbl_size.i.i43.i
  %offset_ptr.i.i49.i = getelementptr i32, ptr %offset_tbl.i.i44.i, i64 %hash.i.i.i48.i
  %offset.i.i50.i = load i32, ptr %offset_ptr.i.i49.i, align 4
  %eq.i.i242 = icmp eq i32 %120, %offset.i.i50.i
  call void @llvm.assume(i1 %eq.i.i242) #30
  %122 = load ptr, ptr %result.i, align 8
  %123 = load ptr, ptr %27, align 8
  %result.i.i243 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %124 = getelementptr i8, ptr %result.i.i243, i64 16
  store ptr @_parameterization_Nil, ptr %124, align 8
  %result.i66.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %125 = getelementptr i8, ptr %result.i66.i, i64 16
  store ptr %123, ptr %125, align 8
  %126 = getelementptr i8, ptr %result.i66.i, i64 8
  store ptr %122, ptr %126, align 8
  %127 = getelementptr i8, ptr %result.i66.i, i64 24
  store ptr null, ptr %127, align 8
  %128 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i66.i)
  store ptr @Entry, ptr %result.i66.i, align 8
  %129 = getelementptr i8, ptr %result.i.i243, i64 8
  store ptr %result.i66.i, ptr %129, align 8
  %130 = getelementptr i8, ptr %result.i.i243, i64 24
  store ptr null, ptr %130, align 8
  %131 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i243)
  store ptr @union_typ, ptr %result.i.i243, align 8
  %result.i67.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i243, ptr %result.i67.i, align 8
  %132 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i67.i)
  %133 = getelementptr i8, ptr %result.i67.i, i64 16
  store i32 %112, ptr %133, align 4
  %134 = getelementptr i8, ptr %result.i67.i, i64 20
  store i32 %112, ptr %134, align 4
  %135 = zext nneg i32 %112 to i64
  %136 = shl nuw nsw i64 %135, 5
  %result.i.i.i244 = call noalias ptr @bump_malloc_inner(i64 noundef %136, ptr nonnull @current_ptr) #29
  %137 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %138 = getelementptr i8, ptr %result.i67.i, i64 8
  store ptr %result.i.i.i244, ptr %138, align 8
  store ptr @Array, ptr %45, align 8
  store ptr %result.i67.i, ptr %46, align 8
  store i32 9, ptr %48, align 4
  store i32 0, ptr %57, align 4
  store i32 0, ptr %50, align 4
  %invariant.gep.i = getelementptr i8, ptr %114, i64 64
  %139 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %140 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %141 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %114)
  %142 = sext i32 %120 to i64
  %gep.i337 = getelementptr ptr, ptr %invariant.gep.i, i64 %142
  %143 = load ptr, ptr %gep.i337, align 8
  %144 = call ptr %143({ ptr, ptr, ptr, i32 } %121, ptr nonnull %2)
  %145 = call i32 %144({ ptr, ptr, ptr, i32 } %121, { ptr, ptr, ptr, i32 } %121, ptr nonnull %2)
  %146 = icmp sgt i32 %145, 0
  br i1 %146, label %.lr.ph340, label %HashMap_resize_new_capacityPtri32.exit

.lr.ph340:                                        ; preds = %110
  %invariant.gep172.i = getelementptr i8, ptr %114, i64 120
  %147 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %gep173.i = getelementptr ptr, ptr %invariant.gep172.i, i64 %142
  br label %148

148:                                              ; preds = %.lr.ph340, %._crit_edge3.i
  %.reg2mem31.0.i338 = phi i32 [ 0, %.lr.ph340 ], [ %415, %._crit_edge3.i ]
  store ptr @_parameterization_Ptri32, ptr %20, align 8
  %149 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %20)
  %150 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %114)
  %151 = load ptr, ptr %gep173.i, align 8
  store ptr @i32_typ, ptr %21, align 8
  %152 = call ptr %151({ ptr, ptr, ptr, i32 } %121, ptr nonnull %21)
  %153 = call { ptr, i160 } %152({ ptr, ptr, ptr, i32 } %121, { ptr, ptr, ptr, i32 } %121, ptr nonnull %20, i32 %.reg2mem31.0.i338)
  %.fca.0.extract30.i = extractvalue { ptr, i160 } %153, 0
  %154 = icmp ne ptr %.fca.0.extract30.i, @nil_typ
  %155 = icmp ne ptr %.fca.0.extract30.i, null
  %.not37.i = and i1 %154, %155
  br i1 %.not37.i, label %156, label %._crit_edge3.i

156:                                              ; preds = %148
  %.fca.1.extract32.i = extractvalue { ptr, i160 } %153, 1
  %.sroa.5164.8.extract.trunc.i = trunc i160 %.fca.1.extract32.i to i64
  %157 = inttoptr i64 %.sroa.5164.8.extract.trunc.i to ptr
  %.sroa.9.8.extract.shift.i = lshr i160 %.fca.1.extract32.i, 64
  %.sroa.9.8.extract.trunc.i = trunc i160 %.sroa.9.8.extract.shift.i to i64
  %158 = inttoptr i64 %.sroa.9.8.extract.trunc.i to ptr
  %hash_coef_ptr.i.i83.i = getelementptr i8, ptr %.fca.0.extract30.i, i64 8
  %tbl_size_ptr.i.i84.i = getelementptr i8, ptr %.fca.0.extract30.i, i64 16
  %offset_tbl_ptr.i.i85.i = getelementptr i8, ptr %.fca.0.extract30.i, i64 40
  %hash_coef.i.i86.i = load i64, ptr %hash_coef_ptr.i.i83.i, align 4
  %tbl_size.i.i87.i = load i64, ptr %tbl_size_ptr.i.i84.i, align 4
  %offset_tbl.i.i88.i = load ptr, ptr %offset_tbl_ptr.i.i85.i, align 8
  %product.i.i.i89.i = mul i64 %hash_coef.i.i86.i, 4015701072841558310
  %shifted.i.i.i90.i = lshr i64 %product.i.i.i89.i, 32
  %xored.i.i.i91.i = xor i64 %shifted.i.i.i90.i, %product.i.i.i89.i
  %hash.i.i.i92.i = and i64 %xored.i.i.i91.i, %tbl_size.i.i87.i
  %offset_ptr.i.i93.i = getelementptr i32, ptr %offset_tbl.i.i88.i, i64 %hash.i.i.i92.i
  %offset.i.i94.i = load i32, ptr %offset_ptr.i.i93.i, align 4
  %159 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract30.i, 0
  %160 = insertvalue { ptr, ptr, ptr, i32 } %159, ptr %157, 1
  %161 = insertvalue { ptr, ptr, ptr, i32 } %160, ptr %158, 2
  %162 = insertvalue { ptr, ptr, ptr, i32 } %161, i32 %offset.i.i94.i, 3
  %163 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %164 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %165 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract30.i)
  %166 = sext i32 %offset.i.i94.i to i64
  %167 = getelementptr ptr, ptr %.fca.0.extract30.i, i64 %166
  %168 = getelementptr i8, ptr %167, i64 56
  %169 = load ptr, ptr %168, align 8
  %170 = call ptr %169({ ptr, ptr, ptr, i32 } %162, ptr nonnull %2)
  %171 = call { ptr, i160 } %170({ ptr, ptr, ptr, i32 } %162, { ptr, ptr, ptr, i32 } %162, ptr nonnull %2)
  %.fca.0.extract23.i = extractvalue { ptr, i160 } %171, 0
  %172 = getelementptr i8, ptr %.fca.0.extract23.i, i64 8
  %173 = getelementptr i8, ptr %.fca.0.extract23.i, i64 16
  %174 = getelementptr i8, ptr %.fca.0.extract23.i, i64 24
  %175 = getelementptr i8, ptr %.fca.0.extract23.i, i64 32
  %176 = load i64, ptr %172, align 4
  %177 = load i64, ptr %173, align 4
  %178 = load ptr, ptr %174, align 8
  %179 = load ptr, ptr %175, align 8
  %result.i96.i = call i1 %178(i64 %177, i64 %176, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %179) #3
  br i1 %result.i96.i, label %._crit_edge3.i, label %180

180:                                              ; preds = %156
  %result.i97.i = call i1 %178(i64 %177, i64 %176, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr readonly %179) #3
  br i1 %result.i97.i, label %181, label %._crit_edge3.i

181:                                              ; preds = %180
  %182 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %183 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %184 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract30.i)
  %185 = getelementptr i8, ptr %167, i64 48
  %186 = load ptr, ptr %185, align 8
  %187 = call ptr %186({ ptr, ptr, ptr, i32 } %162, ptr nonnull %2)
  %188 = call { ptr, i160 } %187({ ptr, ptr, ptr, i32 } %162, { ptr, ptr, ptr, i32 } %162, ptr nonnull %2)
  %189 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %190 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %191 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract30.i)
  %192 = getelementptr i8, ptr %167, i64 64
  %193 = load ptr, ptr %192, align 8
  %194 = call ptr %193({ ptr, ptr, ptr, i32 } %162, ptr nonnull %2)
  %195 = call i32 %194({ ptr, ptr, ptr, i32 } %162, { ptr, ptr, ptr, i32 } %162, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %9)
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %10)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %11)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %12)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %196 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %197 = load ptr, ptr %45, align 8
  %198 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %197, 0
  %199 = load ptr, ptr %46, align 8
  %200 = insertvalue { ptr, ptr, ptr, i32 } %198, ptr %199, 1
  %201 = load ptr, ptr %47, align 8
  %202 = insertvalue { ptr, ptr, ptr, i32 } %200, ptr %201, 2
  %203 = load i32, ptr %48, align 4
  %204 = insertvalue { ptr, ptr, ptr, i32 } %202, i32 %203, 3
  %hash_coef_ptr.i.i51.i549 = getelementptr i8, ptr %197, i64 8
  %tbl_size_ptr.i.i52.i550 = getelementptr i8, ptr %197, i64 16
  %offset_tbl_ptr.i.i53.i551 = getelementptr i8, ptr %197, i64 40
  %hash_coef.i.i54.i552 = load i64, ptr %hash_coef_ptr.i.i51.i549, align 4
  %tbl_size.i.i55.i553 = load i64, ptr %tbl_size_ptr.i.i52.i550, align 4
  %offset_tbl.i.i56.i554 = load ptr, ptr %offset_tbl_ptr.i.i53.i551, align 8
  %product.i.i.i57.i555 = mul i64 %hash_coef.i.i54.i552, -5261542750394134544
  %shifted.i.i.i58.i556 = lshr i64 %product.i.i.i57.i555, 32
  %xored.i.i.i59.i557 = xor i64 %shifted.i.i.i58.i556, %product.i.i.i57.i555
  %hash.i.i.i60.i558 = and i64 %xored.i.i.i59.i557, %tbl_size.i.i55.i553
  %offset_ptr.i.i61.i559 = getelementptr i32, ptr %offset_tbl.i.i56.i554, i64 %hash.i.i.i60.i558
  %offset.i.i62.i560 = load i32, ptr %offset_ptr.i.i61.i559, align 4
  %eq.i.i561 = icmp eq i32 %203, %offset.i.i62.i560
  call void @llvm.assume(i1 %eq.i.i561) #30
  %205 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %206 = call ptr @llvm.invariant.start.p0(i64 600, ptr %197)
  %207 = sext i32 %203 to i64
  %208 = getelementptr ptr, ptr %197, i64 %207
  %209 = getelementptr i8, ptr %208, i64 64
  %210 = load ptr, ptr %209, align 8
  %211 = call ptr %210({ ptr, ptr, ptr, i32 } %204, ptr nonnull %2)
  %212 = call i32 %211({ ptr, ptr, ptr, i32 } %204, { ptr, ptr, ptr, i32 } %204, ptr nonnull %2)
  %213 = add i32 %212, -1
  %214 = and i32 %213, %195
  %215 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  br label %216

216:                                              ; preds = %265, %181
  %spec.store.select.i596605 = phi i32 [ %spec.store.select.i596, %265 ], [ -1, %181 ]
  %.0..0..0..i562 = phi i32 [ %283, %265 ], [ %214, %181 ]
  %217 = load ptr, ptr %45, align 8
  %218 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %217, 0
  %219 = load ptr, ptr %46, align 8
  %220 = insertvalue { ptr, ptr, ptr, i32 } %218, ptr %219, 1
  %221 = load ptr, ptr %47, align 8
  %222 = insertvalue { ptr, ptr, ptr, i32 } %220, ptr %221, 2
  %223 = load i32, ptr %48, align 4
  %224 = insertvalue { ptr, ptr, ptr, i32 } %222, i32 %223, 3
  %hash_coef_ptr.i.i65.i563 = getelementptr i8, ptr %217, i64 8
  %tbl_size_ptr.i.i66.i564 = getelementptr i8, ptr %217, i64 16
  %offset_tbl_ptr.i.i67.i565 = getelementptr i8, ptr %217, i64 40
  %hash_coef.i.i68.i566 = load i64, ptr %hash_coef_ptr.i.i65.i563, align 4
  %tbl_size.i.i69.i567 = load i64, ptr %tbl_size_ptr.i.i66.i564, align 4
  %offset_tbl.i.i70.i568 = load ptr, ptr %offset_tbl_ptr.i.i67.i565, align 8
  %product.i.i.i71.i569 = mul i64 %hash_coef.i.i68.i566, -5261542750394134544
  %shifted.i.i.i72.i570 = lshr i64 %product.i.i.i71.i569, 32
  %xored.i.i.i73.i571 = xor i64 %shifted.i.i.i72.i570, %product.i.i.i71.i569
  %hash.i.i.i74.i572 = and i64 %xored.i.i.i73.i571, %tbl_size.i.i69.i567
  %offset_ptr.i.i75.i573 = getelementptr i32, ptr %offset_tbl.i.i70.i568, i64 %hash.i.i.i74.i572
  %offset.i.i76.i574 = load i32, ptr %offset_ptr.i.i75.i573, align 4
  %eq.i79.i575 = icmp eq i32 %223, %offset.i.i76.i574
  call void @llvm.assume(i1 %eq.i79.i575) #30
  %225 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  store ptr @_parameterization_Ptri32, ptr %3, align 8
  %226 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %3)
  %227 = call ptr @llvm.invariant.start.p0(i64 600, ptr %217)
  %228 = sext i32 %223 to i64
  %229 = getelementptr ptr, ptr %217, i64 %228
  %230 = getelementptr i8, ptr %229, i64 120
  %231 = load ptr, ptr %230, align 8
  store ptr @i32_typ, ptr %4, align 8
  %232 = call ptr %231({ ptr, ptr, ptr, i32 } %224, ptr nonnull %4)
  %233 = call { ptr, i160 } %232({ ptr, ptr, ptr, i32 } %224, { ptr, ptr, ptr, i32 } %224, ptr nonnull %3, i32 %.0..0..0..i562)
  %.fca.0.extract36.i576 = extractvalue { ptr, i160 } %233, 0
  %234 = icmp eq ptr %.fca.0.extract36.i576, @nil_typ
  %235 = icmp eq ptr %.fca.0.extract36.i576, null
  %236 = or i1 %234, %235
  br i1 %236, label %284, label %237

237:                                              ; preds = %216
  %.fca.1.extract38.i577 = extractvalue { ptr, i160 } %233, 1
  %.sroa.5.8.extract.shift.i578 = lshr i160 %.fca.1.extract38.i577, 64
  %.sroa.5.8.extract.trunc.i579 = trunc i160 %.sroa.5.8.extract.shift.i578 to i64
  %.sroa.2.8.extract.trunc165.i580 = trunc i160 %.fca.1.extract38.i577 to i64
  %238 = inttoptr i64 %.sroa.2.8.extract.trunc165.i580 to ptr
  %239 = inttoptr i64 %.sroa.5.8.extract.trunc.i579 to ptr
  %hash_coef_ptr.i.i81.i581 = getelementptr i8, ptr %.fca.0.extract36.i576, i64 8
  %tbl_size_ptr.i.i82.i582 = getelementptr i8, ptr %.fca.0.extract36.i576, i64 16
  %offset_tbl_ptr.i.i83.i583 = getelementptr i8, ptr %.fca.0.extract36.i576, i64 40
  %hash_coef.i.i84.i584 = load i64, ptr %hash_coef_ptr.i.i81.i581, align 4
  %tbl_size.i.i85.i585 = load i64, ptr %tbl_size_ptr.i.i82.i582, align 4
  %offset_tbl.i.i86.i586 = load ptr, ptr %offset_tbl_ptr.i.i83.i583, align 8
  %product.i.i.i87.i587 = mul i64 %hash_coef.i.i84.i584, 4015701072841558310
  %shifted.i.i.i88.i588 = lshr i64 %product.i.i.i87.i587, 32
  %xored.i.i.i89.i589 = xor i64 %shifted.i.i.i88.i588, %product.i.i.i87.i587
  %hash.i.i.i90.i590 = and i64 %xored.i.i.i89.i589, %tbl_size.i.i85.i585
  %offset_ptr.i.i91.i591 = getelementptr i32, ptr %offset_tbl.i.i86.i586, i64 %hash.i.i.i90.i590
  %offset.i.i92.i592 = load i32, ptr %offset_ptr.i.i91.i591, align 4
  %240 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract36.i576, 0
  %241 = insertvalue { ptr, ptr, ptr, i32 } %240, ptr %238, 1
  %242 = insertvalue { ptr, ptr, ptr, i32 } %241, ptr %239, 2
  %243 = insertvalue { ptr, ptr, ptr, i32 } %242, i32 %offset.i.i92.i592, 3
  %244 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %245 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %246 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i576)
  %247 = sext i32 %offset.i.i92.i592 to i64
  %248 = getelementptr ptr, ptr %.fca.0.extract36.i576, i64 %247
  %249 = getelementptr i8, ptr %248, i64 64
  %250 = load ptr, ptr %249, align 8
  %251 = call ptr %250({ ptr, ptr, ptr, i32 } %243, ptr nonnull %2)
  %252 = call i32 %251({ ptr, ptr, ptr, i32 } %243, { ptr, ptr, ptr, i32 } %243, ptr nonnull %2)
  %253 = icmp eq i32 %252, %195
  %254 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %255 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %256 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i576)
  %257 = getelementptr i8, ptr %248, i64 48
  %258 = load ptr, ptr %257, align 8
  %259 = call ptr %258({ ptr, ptr, ptr, i32 } %243, ptr nonnull %2)
  %260 = call { ptr, i160 } %259({ ptr, ptr, ptr, i32 } %243, { ptr, ptr, ptr, i32 } %243, ptr nonnull %2)
  %261 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %262 = load ptr, ptr %33, align 8
  %263 = call i1 %262({ ptr, i160 } %260, { ptr, i160 } %188)
  %264 = and i1 %253, %263
  br i1 %264, label %HashMap_find_slot_keyK_hashPtri32.exit597, label %265

265:                                              ; preds = %237
  %266 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %267 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %268 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i576)
  %269 = getelementptr i8, ptr %248, i64 56
  %270 = load ptr, ptr %269, align 8
  %271 = call ptr %270({ ptr, ptr, ptr, i32 } %243, ptr nonnull %2)
  %272 = call { ptr, i160 } %271({ ptr, ptr, ptr, i32 } %243, { ptr, ptr, ptr, i32 } %243, ptr nonnull %2)
  %.fca.0.extract15.i593 = extractvalue { ptr, i160 } %272, 0
  %273 = getelementptr i8, ptr %.fca.0.extract15.i593, i64 8
  %274 = getelementptr i8, ptr %.fca.0.extract15.i593, i64 16
  %275 = getelementptr i8, ptr %.fca.0.extract15.i593, i64 24
  %276 = getelementptr i8, ptr %.fca.0.extract15.i593, i64 32
  %277 = load i64, ptr %273, align 4
  %278 = load i64, ptr %274, align 4
  %279 = load ptr, ptr %275, align 8
  %280 = load ptr, ptr %276, align 8
  %result.i.i594 = call i1 %279(i64 %278, i64 %277, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %280) #3
  %281 = icmp eq i32 %spec.store.select.i596605, -1
  %or.cond.i595 = select i1 %result.i.i594, i1 %281, i1 false
  %spec.store.select.i596 = select i1 %or.cond.i595, i32 %.0..0..0..i562, i32 %spec.store.select.i596605
  %282 = add i32 %.0..0..0..i562, 1
  %283 = and i32 %282, %213
  br label %216

284:                                              ; preds = %216
  %285 = icmp eq i32 %spec.store.select.i596605, -1
  %.pre620 = select i1 %285, i32 %.0..0..0..i562, i32 %spec.store.select.i596605
  br label %HashMap_find_slot_keyK_hashPtri32.exit597

HashMap_find_slot_keyK_hashPtri32.exit597:        ; preds = %237, %284
  %286 = phi i32 [ %.pre620, %284 ], [ %.0..0..0..i562, %237 ]
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  %287 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %288 = load ptr, ptr %45, align 8
  %289 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %288, 0
  %290 = load ptr, ptr %46, align 8
  %291 = insertvalue { ptr, ptr, ptr, i32 } %289, ptr %290, 1
  %292 = load ptr, ptr %47, align 8
  %293 = insertvalue { ptr, ptr, ptr, i32 } %291, ptr %292, 2
  %294 = load i32, ptr %48, align 4
  %295 = insertvalue { ptr, ptr, ptr, i32 } %293, i32 %294, 3
  %hash_coef_ptr.i.i56.i370 = getelementptr i8, ptr %288, i64 8
  %tbl_size_ptr.i.i57.i371 = getelementptr i8, ptr %288, i64 16
  %offset_tbl_ptr.i.i58.i372 = getelementptr i8, ptr %288, i64 40
  %hash_coef.i.i59.i373 = load i64, ptr %hash_coef_ptr.i.i56.i370, align 4
  %tbl_size.i.i60.i374 = load i64, ptr %tbl_size_ptr.i.i57.i371, align 4
  %offset_tbl.i.i61.i375 = load ptr, ptr %offset_tbl_ptr.i.i58.i372, align 8
  %product.i.i.i62.i376 = mul i64 %hash_coef.i.i59.i373, -5261542750394134544
  %shifted.i.i.i63.i377 = lshr i64 %product.i.i.i62.i376, 32
  %xored.i.i.i64.i378 = xor i64 %shifted.i.i.i63.i377, %product.i.i.i62.i376
  %hash.i.i.i65.i379 = and i64 %xored.i.i.i64.i378, %tbl_size.i.i60.i374
  %offset_ptr.i.i66.i380 = getelementptr i32, ptr %offset_tbl.i.i61.i375, i64 %hash.i.i.i65.i379
  %offset.i.i67.i381 = load i32, ptr %offset_ptr.i.i66.i380, align 4
  %eq.i.i382 = icmp eq i32 %294, %offset.i.i67.i381
  call void @llvm.assume(i1 %eq.i.i382) #30
  store ptr @_parameterization_Ptri32, ptr %7, align 8
  %296 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %7)
  %297 = call ptr @llvm.invariant.start.p0(i64 600, ptr %288)
  %298 = sext i32 %294 to i64
  %299 = getelementptr ptr, ptr %288, i64 %298
  %300 = getelementptr i8, ptr %299, i64 120
  %301 = load ptr, ptr %300, align 8
  store ptr @i32_typ, ptr %8, align 8
  %302 = call ptr %301({ ptr, ptr, ptr, i32 } %295, ptr nonnull %8)
  %303 = call { ptr, i160 } %302({ ptr, ptr, ptr, i32 } %295, { ptr, ptr, ptr, i32 } %295, ptr nonnull %7, i32 %286)
  %.fca.0.extract2.i383 = extractvalue { ptr, i160 } %303, 0
  %304 = load ptr, ptr %result.i, align 8
  %305 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %306 = load ptr, ptr %27, align 8
  %307 = load ptr, ptr %304, align 8
  %308 = getelementptr i8, ptr %307, i64 48
  %309 = load ptr, ptr %308, align 8
  %310 = call { i64, i64 } %309(ptr nonnull %304)
  %311 = extractvalue { i64, i64 } %310, 0
  %312 = extractvalue { i64, i64 } %310, 1
  %313 = call i64 @llvm.umax.i64(i64 %312, i64 8)
  %314 = urem i64 16, %312
  %315 = icmp eq i64 %314, 0
  %316 = sub i64 %312, %314
  %317 = select i1 %315, i64 0, i64 %316
  %318 = add i64 %317, %311
  %319 = add i64 %318, 16
  %320 = and i64 %318, 7
  %321 = icmp eq i64 %320, 0
  %322 = sub nuw nsw i64 40, %320
  %323 = select i1 %321, i64 32, i64 %322
  %324 = add i64 %319, %323
  %325 = and i64 %324, 3
  %326 = icmp eq i64 %325, 0
  %327 = sub nuw nsw i64 8, %325
  %328 = select i1 %326, i64 4, i64 %327
  %329 = add i64 %328, %324
  %330 = urem i64 %329, %313
  %331 = icmp eq i64 %330, 0
  %332 = sub i64 %313, %330
  %333 = select i1 %331, i64 0, i64 %332
  %334 = add i64 %329, %333
  %result.i.i384 = call noalias ptr @bump_malloc_inner(i64 noundef %334, ptr nonnull @current_ptr) #29
  store ptr %304, ptr %result.i.i384, align 8
  %335 = getelementptr i8, ptr %result.i.i384, i64 8
  store ptr %306, ptr %335, align 8
  %336 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i.i384)
  store ptr @Entry, ptr %9, align 8
  store ptr %result.i.i384, ptr %58, align 8
  store i32 9, ptr %59, align 8
  %337 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %9)
  %338 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Entry, ptr undef, ptr undef, i32 undef }, ptr %result.i.i384, 1
  %339 = insertvalue { ptr, ptr, ptr, i32 } %338, ptr undef, 2
  %340 = insertvalue { ptr, ptr, ptr, i32 } %339, i32 9, 3
  %341 = load ptr, ptr %result.i, align 8
  %342 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %343 = load ptr, ptr %27, align 8
  store ptr %341, ptr %10, align 8
  store ptr %343, ptr %61, align 8
  store ptr @_parameterization_Ptri32, ptr %62, align 8
  %344 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %10)
  %345 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %346 = load i64, ptr %172, align 4
  %347 = load i64, ptr %173, align 4
  %348 = load ptr, ptr %174, align 8
  %349 = load ptr, ptr %175, align 8
  %result.i.i.i385 = call i1 %348(i64 %347, i64 %346, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr readonly %349) #3
  %350 = select i1 %result.i.i.i385, i64 10, i64 9
  %gep = getelementptr [14 x ptr], ptr getelementptr inbounds (i8, ptr @Entry, i64 72), i64 0, i64 %350
  %351 = load ptr, ptr %gep, align 8
  call void %351({ ptr, ptr, ptr, i32 } %340, { ptr, ptr, ptr, i32 } %340, ptr nonnull %10, { ptr, i160 } %188, { ptr, i160 } %171, i32 %195)
  %352 = load ptr, ptr %60, align 8
  %353 = ptrtoint ptr %result.i.i384 to i64
  %354 = ptrtoint ptr %352 to i64
  %.sroa.2.0.insert.ext.i386 = zext i64 %354 to i160
  %.sroa.2.0.insert.shift.i387 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i386, 64
  %.sroa.0.0.insert.ext.i389 = zext i64 %353 to i160
  %.sroa.2.0.insert.insert.i388 = or disjoint i160 %.sroa.2.0.insert.shift.i387, %.sroa.0.0.insert.ext.i389
  %.sroa.0.0.insert.insert.i390 = or disjoint i160 %.sroa.2.0.insert.insert.i388, 3062541302288446171170371466885913903104
  %355 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0.0.insert.insert.i390, 1
  %356 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %357 = load ptr, ptr %45, align 8
  %358 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %357, 0
  %359 = load ptr, ptr %46, align 8
  %360 = insertvalue { ptr, ptr, ptr, i32 } %358, ptr %359, 1
  %361 = load ptr, ptr %47, align 8
  %362 = insertvalue { ptr, ptr, ptr, i32 } %360, ptr %361, 2
  %363 = load i32, ptr %48, align 4
  %364 = insertvalue { ptr, ptr, ptr, i32 } %362, i32 %363, 3
  %hash_coef_ptr.i.i84.i391 = getelementptr i8, ptr %357, i64 8
  %tbl_size_ptr.i.i85.i392 = getelementptr i8, ptr %357, i64 16
  %offset_tbl_ptr.i.i86.i393 = getelementptr i8, ptr %357, i64 40
  %hash_coef.i.i87.i394 = load i64, ptr %hash_coef_ptr.i.i84.i391, align 4
  %tbl_size.i.i88.i395 = load i64, ptr %tbl_size_ptr.i.i85.i392, align 4
  %offset_tbl.i.i89.i396 = load ptr, ptr %offset_tbl_ptr.i.i86.i393, align 8
  %product.i.i.i90.i397 = mul i64 %hash_coef.i.i87.i394, -5261542750394134544
  %shifted.i.i.i91.i398 = lshr i64 %product.i.i.i90.i397, 32
  %xored.i.i.i92.i399 = xor i64 %shifted.i.i.i91.i398, %product.i.i.i90.i397
  %hash.i.i.i93.i400 = and i64 %xored.i.i.i92.i399, %tbl_size.i.i88.i395
  %offset_ptr.i.i94.i401 = getelementptr i32, ptr %offset_tbl.i.i89.i396, i64 %hash.i.i.i93.i400
  %offset.i.i95.i402 = load i32, ptr %offset_ptr.i.i94.i401, align 4
  %eq.i98.i403 = icmp eq i32 %363, %offset.i.i95.i402
  call void @llvm.assume(i1 %eq.i98.i403) #30
  %365 = load ptr, ptr %result.i, align 8
  %366 = load ptr, ptr %27, align 8
  %result.i99.i404 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %367 = getelementptr i8, ptr %result.i99.i404, i64 16
  store ptr %366, ptr %367, align 8
  %368 = getelementptr i8, ptr %result.i99.i404, i64 8
  store ptr %365, ptr %368, align 8
  %369 = getelementptr i8, ptr %result.i99.i404, i64 24
  store ptr null, ptr %369, align 8
  %370 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i99.i404)
  store ptr @Entry, ptr %result.i99.i404, align 8
  store ptr @_parameterization_Ptri32, ptr %11, align 8
  store ptr %result.i99.i404, ptr %63, align 8
  %371 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %11)
  %372 = call ptr @llvm.invariant.start.p0(i64 600, ptr %357)
  %373 = sext i32 %363 to i64
  %374 = getelementptr ptr, ptr %357, i64 %373
  %375 = getelementptr i8, ptr %374, i64 128
  %376 = load ptr, ptr %375, align 8
  store ptr @i32_typ, ptr %12, align 8
  store ptr @Entry, ptr %64, align 8
  %377 = call ptr %376({ ptr, ptr, ptr, i32 } %364, ptr nonnull %12)
  call void %377({ ptr, ptr, ptr, i32 } %364, { ptr, ptr, ptr, i32 } %364, ptr nonnull %11, i32 %286, { ptr, i160 } %355)
  %378 = icmp eq ptr %.fca.0.extract2.i383, @nil_typ
  %379 = icmp eq ptr %.fca.0.extract2.i383, null
  %380 = or i1 %378, %379
  br i1 %380, label %._crit_edge.thread.i426, label %._crit_edge.i405

._crit_edge.thread.i426:                          ; preds = %HashMap_find_slot_keyK_hashPtri32.exit597
  %381 = load i32, ptr %57, align 4
  %382 = add i32 %381, 1
  store i32 %382, ptr %57, align 4
  br label %._crit_edge1.sink.split.i424

._crit_edge.i405:                                 ; preds = %HashMap_find_slot_keyK_hashPtri32.exit597
  %.fca.1.extract4.i406 = extractvalue { ptr, i160 } %303, 1
  %.sroa.3192.8.extract.trunc.i407 = trunc i160 %.fca.1.extract4.i406 to i64
  %383 = inttoptr i64 %.sroa.3192.8.extract.trunc.i407 to ptr
  %.sroa.5193.8.extract.shift.i408 = lshr i160 %.fca.1.extract4.i406, 64
  %.sroa.5193.8.extract.trunc.i409 = trunc i160 %.sroa.5193.8.extract.shift.i408 to i64
  %384 = inttoptr i64 %.sroa.5193.8.extract.trunc.i409 to ptr
  %hash_coef_ptr.i.i101.i410 = getelementptr i8, ptr %.fca.0.extract2.i383, i64 8
  %tbl_size_ptr.i.i102.i411 = getelementptr i8, ptr %.fca.0.extract2.i383, i64 16
  %offset_tbl_ptr.i.i103.i412 = getelementptr i8, ptr %.fca.0.extract2.i383, i64 40
  %hash_coef.i.i104.i413 = load i64, ptr %hash_coef_ptr.i.i101.i410, align 4
  %tbl_size.i.i105.i414 = load i64, ptr %tbl_size_ptr.i.i102.i411, align 4
  %offset_tbl.i.i106.i415 = load ptr, ptr %offset_tbl_ptr.i.i103.i412, align 8
  %product.i.i.i107.i416 = mul i64 %hash_coef.i.i104.i413, 4015701072841558310
  %shifted.i.i.i108.i417 = lshr i64 %product.i.i.i107.i416, 32
  %xored.i.i.i109.i418 = xor i64 %shifted.i.i.i108.i417, %product.i.i.i107.i416
  %hash.i.i.i110.i419 = and i64 %xored.i.i.i109.i418, %tbl_size.i.i105.i414
  %offset_ptr.i.i111.i420 = getelementptr i32, ptr %offset_tbl.i.i106.i415, i64 %hash.i.i.i110.i419
  %offset.i.i112.i421 = load i32, ptr %offset_ptr.i.i111.i420, align 4
  %385 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract2.i383, 0
  %386 = insertvalue { ptr, ptr, ptr, i32 } %385, ptr %383, 1
  %387 = insertvalue { ptr, ptr, ptr, i32 } %386, ptr %384, 2
  %388 = insertvalue { ptr, ptr, ptr, i32 } %387, i32 %offset.i.i112.i421, 3
  %389 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %390 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %391 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract2.i383)
  %392 = sext i32 %offset.i.i112.i421 to i64
  %393 = getelementptr ptr, ptr %.fca.0.extract2.i383, i64 %392
  %394 = getelementptr i8, ptr %393, i64 56
  %395 = load ptr, ptr %394, align 8
  %396 = call ptr %395({ ptr, ptr, ptr, i32 } %388, ptr nonnull %2)
  %397 = call { ptr, i160 } %396({ ptr, ptr, ptr, i32 } %388, { ptr, ptr, ptr, i32 } %388, ptr nonnull %2)
  %.fca.0.extract45.i422 = extractvalue { ptr, i160 } %397, 0
  %398 = getelementptr i8, ptr %.fca.0.extract45.i422, i64 8
  %399 = getelementptr i8, ptr %.fca.0.extract45.i422, i64 16
  %400 = getelementptr i8, ptr %.fca.0.extract45.i422, i64 24
  %401 = getelementptr i8, ptr %.fca.0.extract45.i422, i64 32
  %402 = load i64, ptr %398, align 4
  %403 = load i64, ptr %399, align 4
  %404 = load ptr, ptr %400, align 8
  %405 = load ptr, ptr %401, align 8
  %result.i114.i423 = call i1 %404(i64 %403, i64 %402, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %405) #3
  br i1 %result.i114.i423, label %._crit_edge1.sink.split.i424, label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit427

._crit_edge1.sink.split.i424:                     ; preds = %._crit_edge.i405, %._crit_edge.thread.i426
  %.sink202.i425 = phi i64 [ 40, %._crit_edge.thread.i426 ], [ 32, %._crit_edge.i405 ]
  %406 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %407 = getelementptr i8, ptr getelementptr inbounds (i8, ptr @HashMap, i64 72), i64 %.sink202.i425
  %408 = load ptr, ptr %407, align 8
  %409 = load ptr, ptr %408, align 8
  %410 = call i32 %409(ptr nonnull %result.i)
  %411 = add i32 %410, 1
  %412 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %413 = getelementptr i8, ptr %408, i64 8
  %414 = load ptr, ptr %413, align 8
  call void %414(ptr nonnull %result.i, i32 %411)
  br label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit427

HashMap_insert_internal_keyK_valueV_hashPtri32.exit427: ; preds = %._crit_edge.i405, %._crit_edge1.sink.split.i424
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %9)
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %10)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %11)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %12)
  br label %._crit_edge3.i

._crit_edge3.i:                                   ; preds = %HashMap_insert_internal_keyK_valueV_hashPtri32.exit427, %180, %156, %148
  %415 = add nuw nsw i32 %.reg2mem31.0.i338, 1
  %416 = load ptr, ptr %gep.i337, align 8
  %417 = call ptr %416({ ptr, ptr, ptr, i32 } %121, ptr nonnull %2)
  %418 = call i32 %417({ ptr, ptr, ptr, i32 } %121, { ptr, ptr, ptr, i32 } %121, ptr nonnull %2)
  %419 = icmp slt i32 %415, %418
  br i1 %419, label %148, label %HashMap_resize_new_capacityPtri32.exit

HashMap_resize_new_capacityPtri32.exit:           ; preds = %._crit_edge3.i, %110
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %20)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %21)
  br label %HashMap_insert_keyK_valueV.exit

HashMap_insert_keyK_valueV.exit:                  ; preds = %.lr.ph, %HashMap_resize_new_capacityPtri32.exit
  %420 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %421 = load ptr, ptr %32, align 8
  %422 = call i32 %421({ ptr, i160 } %68)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %15)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %16)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %17)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %18)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %19)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6)
  %423 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %424 = load ptr, ptr %45, align 8
  %425 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %424, 0
  %426 = load ptr, ptr %46, align 8
  %427 = insertvalue { ptr, ptr, ptr, i32 } %425, ptr %426, 1
  %428 = load ptr, ptr %47, align 8
  %429 = insertvalue { ptr, ptr, ptr, i32 } %427, ptr %428, 2
  %430 = load i32, ptr %48, align 4
  %431 = insertvalue { ptr, ptr, ptr, i32 } %429, i32 %430, 3
  %hash_coef_ptr.i.i51.i444 = getelementptr i8, ptr %424, i64 8
  %tbl_size_ptr.i.i52.i445 = getelementptr i8, ptr %424, i64 16
  %offset_tbl_ptr.i.i53.i446 = getelementptr i8, ptr %424, i64 40
  %hash_coef.i.i54.i447 = load i64, ptr %hash_coef_ptr.i.i51.i444, align 4
  %tbl_size.i.i55.i448 = load i64, ptr %tbl_size_ptr.i.i52.i445, align 4
  %offset_tbl.i.i56.i449 = load ptr, ptr %offset_tbl_ptr.i.i53.i446, align 8
  %product.i.i.i57.i450 = mul i64 %hash_coef.i.i54.i447, -5261542750394134544
  %shifted.i.i.i58.i451 = lshr i64 %product.i.i.i57.i450, 32
  %xored.i.i.i59.i452 = xor i64 %shifted.i.i.i58.i451, %product.i.i.i57.i450
  %hash.i.i.i60.i453 = and i64 %xored.i.i.i59.i452, %tbl_size.i.i55.i448
  %offset_ptr.i.i61.i454 = getelementptr i32, ptr %offset_tbl.i.i56.i449, i64 %hash.i.i.i60.i453
  %offset.i.i62.i455 = load i32, ptr %offset_ptr.i.i61.i454, align 4
  %eq.i.i456 = icmp eq i32 %430, %offset.i.i62.i455
  call void @llvm.assume(i1 %eq.i.i456) #30
  %432 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %433 = call ptr @llvm.invariant.start.p0(i64 600, ptr %424)
  %434 = sext i32 %430 to i64
  %435 = getelementptr ptr, ptr %424, i64 %434
  %436 = getelementptr i8, ptr %435, i64 64
  %437 = load ptr, ptr %436, align 8
  %438 = call ptr %437({ ptr, ptr, ptr, i32 } %431, ptr nonnull %2)
  %439 = call i32 %438({ ptr, ptr, ptr, i32 } %431, { ptr, ptr, ptr, i32 } %431, ptr nonnull %2)
  %440 = add i32 %439, -1
  %441 = and i32 %440, %422
  %442 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  br label %443

443:                                              ; preds = %492, %HashMap_insert_keyK_valueV.exit
  %spec.store.select.i491511 = phi i32 [ %spec.store.select.i491, %492 ], [ -1, %HashMap_insert_keyK_valueV.exit ]
  %.0..0..0..i457 = phi i32 [ %510, %492 ], [ %441, %HashMap_insert_keyK_valueV.exit ]
  %444 = load ptr, ptr %45, align 8
  %445 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %444, 0
  %446 = load ptr, ptr %46, align 8
  %447 = insertvalue { ptr, ptr, ptr, i32 } %445, ptr %446, 1
  %448 = load ptr, ptr %47, align 8
  %449 = insertvalue { ptr, ptr, ptr, i32 } %447, ptr %448, 2
  %450 = load i32, ptr %48, align 4
  %451 = insertvalue { ptr, ptr, ptr, i32 } %449, i32 %450, 3
  %hash_coef_ptr.i.i65.i458 = getelementptr i8, ptr %444, i64 8
  %tbl_size_ptr.i.i66.i459 = getelementptr i8, ptr %444, i64 16
  %offset_tbl_ptr.i.i67.i460 = getelementptr i8, ptr %444, i64 40
  %hash_coef.i.i68.i461 = load i64, ptr %hash_coef_ptr.i.i65.i458, align 4
  %tbl_size.i.i69.i462 = load i64, ptr %tbl_size_ptr.i.i66.i459, align 4
  %offset_tbl.i.i70.i463 = load ptr, ptr %offset_tbl_ptr.i.i67.i460, align 8
  %product.i.i.i71.i464 = mul i64 %hash_coef.i.i68.i461, -5261542750394134544
  %shifted.i.i.i72.i465 = lshr i64 %product.i.i.i71.i464, 32
  %xored.i.i.i73.i466 = xor i64 %shifted.i.i.i72.i465, %product.i.i.i71.i464
  %hash.i.i.i74.i467 = and i64 %xored.i.i.i73.i466, %tbl_size.i.i69.i462
  %offset_ptr.i.i75.i468 = getelementptr i32, ptr %offset_tbl.i.i70.i463, i64 %hash.i.i.i74.i467
  %offset.i.i76.i469 = load i32, ptr %offset_ptr.i.i75.i468, align 4
  %eq.i79.i470 = icmp eq i32 %450, %offset.i.i76.i469
  call void @llvm.assume(i1 %eq.i79.i470) #30
  %452 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  store ptr @_parameterization_Ptri32, ptr %5, align 8
  %453 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %5)
  %454 = call ptr @llvm.invariant.start.p0(i64 600, ptr %444)
  %455 = sext i32 %450 to i64
  %456 = getelementptr ptr, ptr %444, i64 %455
  %457 = getelementptr i8, ptr %456, i64 120
  %458 = load ptr, ptr %457, align 8
  store ptr @i32_typ, ptr %6, align 8
  %459 = call ptr %458({ ptr, ptr, ptr, i32 } %451, ptr nonnull %6)
  %460 = call { ptr, i160 } %459({ ptr, ptr, ptr, i32 } %451, { ptr, ptr, ptr, i32 } %451, ptr nonnull %5, i32 %.0..0..0..i457)
  %.fca.0.extract36.i471 = extractvalue { ptr, i160 } %460, 0
  %461 = icmp eq ptr %.fca.0.extract36.i471, @nil_typ
  %462 = icmp eq ptr %.fca.0.extract36.i471, null
  %463 = or i1 %461, %462
  br i1 %463, label %511, label %464

464:                                              ; preds = %443
  %.fca.1.extract38.i472 = extractvalue { ptr, i160 } %460, 1
  %.sroa.5.8.extract.shift.i473 = lshr i160 %.fca.1.extract38.i472, 64
  %.sroa.5.8.extract.trunc.i474 = trunc i160 %.sroa.5.8.extract.shift.i473 to i64
  %.sroa.2.8.extract.trunc165.i475 = trunc i160 %.fca.1.extract38.i472 to i64
  %465 = inttoptr i64 %.sroa.2.8.extract.trunc165.i475 to ptr
  %466 = inttoptr i64 %.sroa.5.8.extract.trunc.i474 to ptr
  %hash_coef_ptr.i.i81.i476 = getelementptr i8, ptr %.fca.0.extract36.i471, i64 8
  %tbl_size_ptr.i.i82.i477 = getelementptr i8, ptr %.fca.0.extract36.i471, i64 16
  %offset_tbl_ptr.i.i83.i478 = getelementptr i8, ptr %.fca.0.extract36.i471, i64 40
  %hash_coef.i.i84.i479 = load i64, ptr %hash_coef_ptr.i.i81.i476, align 4
  %tbl_size.i.i85.i480 = load i64, ptr %tbl_size_ptr.i.i82.i477, align 4
  %offset_tbl.i.i86.i481 = load ptr, ptr %offset_tbl_ptr.i.i83.i478, align 8
  %product.i.i.i87.i482 = mul i64 %hash_coef.i.i84.i479, 4015701072841558310
  %shifted.i.i.i88.i483 = lshr i64 %product.i.i.i87.i482, 32
  %xored.i.i.i89.i484 = xor i64 %shifted.i.i.i88.i483, %product.i.i.i87.i482
  %hash.i.i.i90.i485 = and i64 %xored.i.i.i89.i484, %tbl_size.i.i85.i480
  %offset_ptr.i.i91.i486 = getelementptr i32, ptr %offset_tbl.i.i86.i481, i64 %hash.i.i.i90.i485
  %offset.i.i92.i487 = load i32, ptr %offset_ptr.i.i91.i486, align 4
  %467 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract36.i471, 0
  %468 = insertvalue { ptr, ptr, ptr, i32 } %467, ptr %465, 1
  %469 = insertvalue { ptr, ptr, ptr, i32 } %468, ptr %466, 2
  %470 = insertvalue { ptr, ptr, ptr, i32 } %469, i32 %offset.i.i92.i487, 3
  %471 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %472 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %473 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i471)
  %474 = sext i32 %offset.i.i92.i487 to i64
  %475 = getelementptr ptr, ptr %.fca.0.extract36.i471, i64 %474
  %476 = getelementptr i8, ptr %475, i64 64
  %477 = load ptr, ptr %476, align 8
  %478 = call ptr %477({ ptr, ptr, ptr, i32 } %470, ptr nonnull %2)
  %479 = call i32 %478({ ptr, ptr, ptr, i32 } %470, { ptr, ptr, ptr, i32 } %470, ptr nonnull %2)
  %480 = icmp eq i32 %479, %422
  %481 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %482 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %483 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i471)
  %484 = getelementptr i8, ptr %475, i64 48
  %485 = load ptr, ptr %484, align 8
  %486 = call ptr %485({ ptr, ptr, ptr, i32 } %470, ptr nonnull %2)
  %487 = call { ptr, i160 } %486({ ptr, ptr, ptr, i32 } %470, { ptr, ptr, ptr, i32 } %470, ptr nonnull %2)
  %488 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %489 = load ptr, ptr %33, align 8
  %490 = call i1 %489({ ptr, i160 } %487, { ptr, i160 } %68)
  %491 = and i1 %480, %490
  br i1 %491, label %HashMap_find_slot_keyK_hashPtri32.exit492, label %492

492:                                              ; preds = %464
  %493 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %494 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %495 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i471)
  %496 = getelementptr i8, ptr %475, i64 56
  %497 = load ptr, ptr %496, align 8
  %498 = call ptr %497({ ptr, ptr, ptr, i32 } %470, ptr nonnull %2)
  %499 = call { ptr, i160 } %498({ ptr, ptr, ptr, i32 } %470, { ptr, ptr, ptr, i32 } %470, ptr nonnull %2)
  %.fca.0.extract15.i = extractvalue { ptr, i160 } %499, 0
  %500 = getelementptr i8, ptr %.fca.0.extract15.i, i64 8
  %501 = getelementptr i8, ptr %.fca.0.extract15.i, i64 16
  %502 = getelementptr i8, ptr %.fca.0.extract15.i, i64 24
  %503 = getelementptr i8, ptr %.fca.0.extract15.i, i64 32
  %504 = load i64, ptr %500, align 4
  %505 = load i64, ptr %501, align 4
  %506 = load ptr, ptr %502, align 8
  %507 = load ptr, ptr %503, align 8
  %result.i.i489 = call i1 %506(i64 %505, i64 %504, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %507) #3
  %508 = icmp eq i32 %spec.store.select.i491511, -1
  %or.cond.i490 = select i1 %result.i.i489, i1 %508, i1 false
  %spec.store.select.i491 = select i1 %or.cond.i490, i32 %.0..0..0..i457, i32 %spec.store.select.i491511
  %509 = add i32 %.0..0..0..i457, 1
  %510 = and i32 %509, %440
  br label %443

511:                                              ; preds = %443
  %512 = icmp eq i32 %spec.store.select.i491511, -1
  %.pre523 = select i1 %512, i32 %.0..0..0..i457, i32 %spec.store.select.i491511
  br label %HashMap_find_slot_keyK_hashPtri32.exit492

HashMap_find_slot_keyK_hashPtri32.exit492:        ; preds = %464, %511
  %513 = phi i32 [ %.pre523, %511 ], [ %.0..0..0..i457, %464 ]
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6)
  %514 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %515 = load ptr, ptr %45, align 8
  %516 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %515, 0
  %517 = load ptr, ptr %46, align 8
  %518 = insertvalue { ptr, ptr, ptr, i32 } %516, ptr %517, 1
  %519 = load ptr, ptr %47, align 8
  %520 = insertvalue { ptr, ptr, ptr, i32 } %518, ptr %519, 2
  %521 = load i32, ptr %48, align 4
  %522 = insertvalue { ptr, ptr, ptr, i32 } %520, i32 %521, 3
  %hash_coef_ptr.i.i56.i257 = getelementptr i8, ptr %515, i64 8
  %tbl_size_ptr.i.i57.i258 = getelementptr i8, ptr %515, i64 16
  %offset_tbl_ptr.i.i58.i259 = getelementptr i8, ptr %515, i64 40
  %hash_coef.i.i59.i260 = load i64, ptr %hash_coef_ptr.i.i56.i257, align 4
  %tbl_size.i.i60.i261 = load i64, ptr %tbl_size_ptr.i.i57.i258, align 4
  %offset_tbl.i.i61.i262 = load ptr, ptr %offset_tbl_ptr.i.i58.i259, align 8
  %product.i.i.i62.i263 = mul i64 %hash_coef.i.i59.i260, -5261542750394134544
  %shifted.i.i.i63.i264 = lshr i64 %product.i.i.i62.i263, 32
  %xored.i.i.i64.i265 = xor i64 %shifted.i.i.i63.i264, %product.i.i.i62.i263
  %hash.i.i.i65.i266 = and i64 %xored.i.i.i64.i265, %tbl_size.i.i60.i261
  %offset_ptr.i.i66.i267 = getelementptr i32, ptr %offset_tbl.i.i61.i262, i64 %hash.i.i.i65.i266
  %offset.i.i67.i268 = load i32, ptr %offset_ptr.i.i66.i267, align 4
  %eq.i.i269 = icmp eq i32 %521, %offset.i.i67.i268
  call void @llvm.assume(i1 %eq.i.i269) #30
  store ptr @_parameterization_Ptri32, ptr %15, align 8
  %523 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %15)
  %524 = call ptr @llvm.invariant.start.p0(i64 600, ptr %515)
  %525 = sext i32 %521 to i64
  %526 = getelementptr ptr, ptr %515, i64 %525
  %527 = getelementptr i8, ptr %526, i64 120
  %528 = load ptr, ptr %527, align 8
  store ptr @i32_typ, ptr %16, align 8
  %529 = call ptr %528({ ptr, ptr, ptr, i32 } %522, ptr nonnull %16)
  %530 = call { ptr, i160 } %529({ ptr, ptr, ptr, i32 } %522, { ptr, ptr, ptr, i32 } %522, ptr nonnull %15, i32 %513)
  %.fca.0.extract2.i = extractvalue { ptr, i160 } %530, 0
  %531 = load ptr, ptr %result.i, align 8
  %532 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %533 = load ptr, ptr %27, align 8
  %534 = load ptr, ptr %531, align 8
  %535 = getelementptr i8, ptr %534, i64 48
  %536 = load ptr, ptr %535, align 8
  %537 = call { i64, i64 } %536(ptr nonnull %531)
  %538 = extractvalue { i64, i64 } %537, 0
  %539 = extractvalue { i64, i64 } %537, 1
  %540 = call i64 @llvm.umax.i64(i64 %539, i64 8)
  %541 = urem i64 16, %539
  %542 = icmp eq i64 %541, 0
  %543 = sub i64 %539, %541
  %544 = select i1 %542, i64 0, i64 %543
  %545 = add i64 %544, %538
  %546 = add i64 %545, 16
  %547 = and i64 %545, 7
  %548 = icmp eq i64 %547, 0
  %549 = sub nuw nsw i64 40, %547
  %550 = select i1 %548, i64 32, i64 %549
  %551 = add i64 %546, %550
  %552 = and i64 %551, 3
  %553 = icmp eq i64 %552, 0
  %554 = sub nuw nsw i64 8, %552
  %555 = select i1 %553, i64 4, i64 %554
  %556 = add i64 %555, %551
  %557 = urem i64 %556, %540
  %558 = icmp eq i64 %557, 0
  %559 = sub i64 %540, %557
  %560 = select i1 %558, i64 0, i64 %559
  %561 = add i64 %556, %560
  %result.i.i270 = call noalias ptr @bump_malloc_inner(i64 noundef %561, ptr nonnull @current_ptr) #29
  store ptr %531, ptr %result.i.i270, align 8
  %562 = getelementptr i8, ptr %result.i.i270, i64 8
  store ptr %533, ptr %562, align 8
  %563 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i.i270)
  store ptr @Entry, ptr %17, align 8
  store ptr %result.i.i270, ptr %52, align 8
  store i32 9, ptr %53, align 8
  %564 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %17)
  %565 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %566 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %567 = load ptr, ptr %531, align 8
  %568 = getelementptr i8, ptr %567, i64 48
  %569 = load ptr, ptr %568, align 8
  %570 = call { i64, i64 } %569(ptr nonnull %531)
  %571 = extractvalue { i64, i64 } %570, 1
  %572 = urem i64 16, %571
  %573 = icmp eq i64 %572, 0
  %reass.sub = sub i64 %571, %572
  %574 = add i64 %reass.sub, 16
  %575 = select i1 %573, i64 16, i64 %574
  %576 = getelementptr i8, ptr %result.i.i270, i64 %575
  %577 = load ptr, ptr %result.i.i270, align 8
  %578 = load ptr, ptr %577, align 8
  %579 = getelementptr i8, ptr %578, i64 64
  %580 = load ptr, ptr %579, align 8
  call void %580({ ptr, i160 } %68, ptr nonnull %577, ptr %576)
  %581 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %582 = load ptr, ptr %result.i.i270, align 8
  %583 = load ptr, ptr %582, align 8
  %584 = getelementptr i8, ptr %583, i64 48
  %585 = load ptr, ptr %584, align 8
  %586 = call { i64, i64 } %585(ptr nonnull %582)
  %587 = extractvalue { i64, i64 } %586, 0
  %588 = extractvalue { i64, i64 } %586, 1
  %589 = urem i64 16, %588
  %590 = icmp eq i64 %589, 0
  %591 = sub i64 %588, %589
  %592 = select i1 %590, i64 0, i64 %591
  %593 = add i64 %592, %587
  %594 = and i64 %593, 7
  %595 = icmp eq i64 %594, 0
  %596 = sub nuw nsw i64 8, %594
  %597 = select i1 %595, i64 0, i64 %596
  %598 = getelementptr i8, ptr %result.i.i270, i64 %593
  %599 = getelementptr i8, ptr %598, i64 16
  %600 = getelementptr i8, ptr %599, i64 %597
  store ptr @i32_typ, ptr %600, align 8
  %601 = getelementptr i8, ptr %600, i64 8
  store i160 %.sroa.021.0.insert.ext, ptr %601, align 4
  %602 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %603 = load ptr, ptr %result.i.i270, align 8
  %604 = load ptr, ptr %603, align 8
  %605 = getelementptr i8, ptr %604, i64 48
  %606 = load ptr, ptr %605, align 8
  %607 = call { i64, i64 } %606(ptr nonnull %603)
  %608 = extractvalue { i64, i64 } %607, 0
  %609 = extractvalue { i64, i64 } %607, 1
  %610 = urem i64 16, %609
  %611 = icmp eq i64 %610, 0
  %612 = sub i64 %609, %610
  %613 = select i1 %611, i64 0, i64 %612
  %614 = add i64 %613, %608
  %615 = add i64 %614, 16
  %616 = and i64 %614, 7
  %617 = icmp eq i64 %616, 0
  %618 = sub nuw nsw i64 40, %616
  %619 = select i1 %617, i64 32, i64 %618
  %620 = add i64 %615, %619
  %621 = and i64 %620, 3
  %622 = icmp eq i64 %621, 0
  %623 = sub nuw nsw i64 4, %621
  %624 = select i1 %622, i64 0, i64 %623
  %625 = getelementptr i8, ptr %result.i.i270, i64 %620
  %626 = getelementptr i8, ptr %625, i64 %624
  store i32 %422, ptr %626, align 4
  %627 = load ptr, ptr %54, align 8
  %628 = ptrtoint ptr %result.i.i270 to i64
  %629 = ptrtoint ptr %627 to i64
  %.sroa.2.0.insert.ext.i = zext i64 %629 to i160
  %.sroa.2.0.insert.shift.i = shl nuw nsw i160 %.sroa.2.0.insert.ext.i, 64
  %.sroa.0.0.insert.ext.i = zext i64 %628 to i160
  %.sroa.2.0.insert.insert.i = or disjoint i160 %.sroa.2.0.insert.shift.i, %.sroa.0.0.insert.ext.i
  %.sroa.0.0.insert.insert.i = or disjoint i160 %.sroa.2.0.insert.insert.i, 3062541302288446171170371466885913903104
  %630 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0.0.insert.insert.i, 1
  %631 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %632 = load ptr, ptr %45, align 8
  %633 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %632, 0
  %634 = load ptr, ptr %46, align 8
  %635 = insertvalue { ptr, ptr, ptr, i32 } %633, ptr %634, 1
  %636 = load ptr, ptr %47, align 8
  %637 = insertvalue { ptr, ptr, ptr, i32 } %635, ptr %636, 2
  %638 = load i32, ptr %48, align 4
  %639 = insertvalue { ptr, ptr, ptr, i32 } %637, i32 %638, 3
  %hash_coef_ptr.i.i84.i = getelementptr i8, ptr %632, i64 8
  %tbl_size_ptr.i.i85.i = getelementptr i8, ptr %632, i64 16
  %offset_tbl_ptr.i.i86.i = getelementptr i8, ptr %632, i64 40
  %hash_coef.i.i87.i = load i64, ptr %hash_coef_ptr.i.i84.i, align 4
  %tbl_size.i.i88.i = load i64, ptr %tbl_size_ptr.i.i85.i, align 4
  %offset_tbl.i.i89.i = load ptr, ptr %offset_tbl_ptr.i.i86.i, align 8
  %product.i.i.i90.i = mul i64 %hash_coef.i.i87.i, -5261542750394134544
  %shifted.i.i.i91.i = lshr i64 %product.i.i.i90.i, 32
  %xored.i.i.i92.i = xor i64 %shifted.i.i.i91.i, %product.i.i.i90.i
  %hash.i.i.i93.i = and i64 %xored.i.i.i92.i, %tbl_size.i.i88.i
  %offset_ptr.i.i94.i = getelementptr i32, ptr %offset_tbl.i.i89.i, i64 %hash.i.i.i93.i
  %offset.i.i95.i = load i32, ptr %offset_ptr.i.i94.i, align 4
  %eq.i98.i = icmp eq i32 %638, %offset.i.i95.i
  call void @llvm.assume(i1 %eq.i98.i) #30
  %640 = load ptr, ptr %result.i, align 8
  %641 = load ptr, ptr %27, align 8
  %result.i99.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %642 = getelementptr i8, ptr %result.i99.i, i64 16
  store ptr %641, ptr %642, align 8
  %643 = getelementptr i8, ptr %result.i99.i, i64 8
  store ptr %640, ptr %643, align 8
  %644 = getelementptr i8, ptr %result.i99.i, i64 24
  store ptr null, ptr %644, align 8
  %645 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i99.i)
  store ptr @Entry, ptr %result.i99.i, align 8
  store ptr @_parameterization_Ptri32, ptr %18, align 8
  store ptr %result.i99.i, ptr %55, align 8
  %646 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %18)
  %647 = call ptr @llvm.invariant.start.p0(i64 600, ptr %632)
  %648 = sext i32 %638 to i64
  %649 = getelementptr ptr, ptr %632, i64 %648
  %650 = getelementptr i8, ptr %649, i64 128
  %651 = load ptr, ptr %650, align 8
  store ptr @i32_typ, ptr %19, align 8
  store ptr @Entry, ptr %56, align 8
  %652 = call ptr %651({ ptr, ptr, ptr, i32 } %639, ptr nonnull %19)
  call void %652({ ptr, ptr, ptr, i32 } %639, { ptr, ptr, ptr, i32 } %639, ptr nonnull %18, i32 %513, { ptr, i160 } %630)
  %653 = icmp eq ptr %.fca.0.extract2.i, @nil_typ
  %654 = icmp eq ptr %.fca.0.extract2.i, null
  %655 = or i1 %653, %654
  br i1 %655, label %._crit_edge.thread.i, label %._crit_edge.i

._crit_edge.thread.i:                             ; preds = %HashMap_find_slot_keyK_hashPtri32.exit492
  %656 = load i32, ptr %57, align 4
  %657 = add i32 %656, 1
  store i32 %657, ptr %57, align 4
  br label %._crit_edge1.sink.split.i

._crit_edge.i:                                    ; preds = %HashMap_find_slot_keyK_hashPtri32.exit492
  %.fca.1.extract4.i = extractvalue { ptr, i160 } %530, 1
  %.sroa.3192.8.extract.trunc.i = trunc i160 %.fca.1.extract4.i to i64
  %658 = inttoptr i64 %.sroa.3192.8.extract.trunc.i to ptr
  %.sroa.5193.8.extract.shift.i = lshr i160 %.fca.1.extract4.i, 64
  %.sroa.5193.8.extract.trunc.i = trunc i160 %.sroa.5193.8.extract.shift.i to i64
  %659 = inttoptr i64 %.sroa.5193.8.extract.trunc.i to ptr
  %hash_coef_ptr.i.i101.i = getelementptr i8, ptr %.fca.0.extract2.i, i64 8
  %tbl_size_ptr.i.i102.i = getelementptr i8, ptr %.fca.0.extract2.i, i64 16
  %offset_tbl_ptr.i.i103.i = getelementptr i8, ptr %.fca.0.extract2.i, i64 40
  %hash_coef.i.i104.i = load i64, ptr %hash_coef_ptr.i.i101.i, align 4
  %tbl_size.i.i105.i = load i64, ptr %tbl_size_ptr.i.i102.i, align 4
  %offset_tbl.i.i106.i = load ptr, ptr %offset_tbl_ptr.i.i103.i, align 8
  %product.i.i.i107.i = mul i64 %hash_coef.i.i104.i, 4015701072841558310
  %shifted.i.i.i108.i = lshr i64 %product.i.i.i107.i, 32
  %xored.i.i.i109.i = xor i64 %shifted.i.i.i108.i, %product.i.i.i107.i
  %hash.i.i.i110.i = and i64 %xored.i.i.i109.i, %tbl_size.i.i105.i
  %offset_ptr.i.i111.i = getelementptr i32, ptr %offset_tbl.i.i106.i, i64 %hash.i.i.i110.i
  %offset.i.i112.i = load i32, ptr %offset_ptr.i.i111.i, align 4
  %660 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract2.i, 0
  %661 = insertvalue { ptr, ptr, ptr, i32 } %660, ptr %658, 1
  %662 = insertvalue { ptr, ptr, ptr, i32 } %661, ptr %659, 2
  %663 = insertvalue { ptr, ptr, ptr, i32 } %662, i32 %offset.i.i112.i, 3
  %664 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %665 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %666 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract2.i)
  %667 = sext i32 %offset.i.i112.i to i64
  %668 = getelementptr ptr, ptr %.fca.0.extract2.i, i64 %667
  %669 = getelementptr i8, ptr %668, i64 56
  %670 = load ptr, ptr %669, align 8
  %671 = call ptr %670({ ptr, ptr, ptr, i32 } %663, ptr nonnull %2)
  %672 = call { ptr, i160 } %671({ ptr, ptr, ptr, i32 } %663, { ptr, ptr, ptr, i32 } %663, ptr nonnull %2)
  %.fca.0.extract45.i = extractvalue { ptr, i160 } %672, 0
  %673 = getelementptr i8, ptr %.fca.0.extract45.i, i64 8
  %674 = getelementptr i8, ptr %.fca.0.extract45.i, i64 16
  %675 = getelementptr i8, ptr %.fca.0.extract45.i, i64 24
  %676 = getelementptr i8, ptr %.fca.0.extract45.i, i64 32
  %677 = load i64, ptr %673, align 4
  %678 = load i64, ptr %674, align 4
  %679 = load ptr, ptr %675, align 8
  %680 = load ptr, ptr %676, align 8
  %result.i114.i = call i1 %679(i64 %678, i64 %677, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %680) #3
  br i1 %result.i114.i, label %._crit_edge1.sink.split.i, label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit

._crit_edge1.sink.split.i:                        ; preds = %._crit_edge.i, %._crit_edge.thread.i
  %.sink202.i = phi i64 [ 40, %._crit_edge.thread.i ], [ 32, %._crit_edge.i ]
  %681 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %682 = getelementptr i8, ptr getelementptr inbounds (i8, ptr @HashMap, i64 72), i64 %.sink202.i
  %683 = load ptr, ptr %682, align 8
  %684 = load ptr, ptr %683, align 8
  %685 = call i32 %684(ptr nonnull %result.i)
  %686 = add i32 %685, 1
  %687 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %688 = getelementptr i8, ptr %683, i64 8
  %689 = load ptr, ptr %688, align 8
  call void %689(ptr nonnull %result.i, i32 %686)
  br label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit

HashMap_insert_internal_keyK_valueV_hashPtri32.exit: ; preds = %._crit_edge.i, %._crit_edge1.sink.split.i
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %15)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %16)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %17)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %18)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %19)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %690 = add i64 %.reg2mem75.088, %67
  %691 = icmp slt i32 %66, %0
  br i1 %691, label %.lr.ph, label %._crit_edge

._crit_edge:                                      ; preds = %HashMap_insert_internal_keyK_valueV_hashPtri32.exit
  %692 = call i64 @clock()
  br label %.lr.ph92

.lr.ph92:                                         ; preds = %._crit_edge, %HashMap_get_keyK.exit
  %.reg2mem63.090 = phi i64 [ %.reg2mem59.0, %HashMap_get_keyK.exit ], [ 0, %._crit_edge ]
  %.reg2mem61.089 = phi i32 [ %837, %HashMap_get_keyK.exit ], [ 0, %._crit_edge ]
  %.sroa.018.0.insert.ext = zext nneg i32 %.reg2mem61.089 to i160
  %693 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.018.0.insert.ext, 1
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %22)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %23)
  %694 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %695 = load ptr, ptr %32, align 8
  %696 = call i32 %695({ ptr, i160 } %693)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %13)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %14)
  %697 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %698 = load ptr, ptr %45, align 8
  %699 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %698, 0
  %700 = load ptr, ptr %46, align 8
  %701 = insertvalue { ptr, ptr, ptr, i32 } %699, ptr %700, 1
  %702 = load ptr, ptr %47, align 8
  %703 = insertvalue { ptr, ptr, ptr, i32 } %701, ptr %702, 2
  %704 = load i32, ptr %48, align 4
  %705 = insertvalue { ptr, ptr, ptr, i32 } %703, i32 %704, 3
  %hash_coef_ptr.i.i51.i = getelementptr i8, ptr %698, i64 8
  %tbl_size_ptr.i.i52.i = getelementptr i8, ptr %698, i64 16
  %offset_tbl_ptr.i.i53.i = getelementptr i8, ptr %698, i64 40
  %hash_coef.i.i54.i = load i64, ptr %hash_coef_ptr.i.i51.i, align 4
  %tbl_size.i.i55.i = load i64, ptr %tbl_size_ptr.i.i52.i, align 4
  %offset_tbl.i.i56.i = load ptr, ptr %offset_tbl_ptr.i.i53.i, align 8
  %product.i.i.i57.i = mul i64 %hash_coef.i.i54.i, -5261542750394134544
  %shifted.i.i.i58.i = lshr i64 %product.i.i.i57.i, 32
  %xored.i.i.i59.i = xor i64 %shifted.i.i.i58.i, %product.i.i.i57.i
  %hash.i.i.i60.i = and i64 %xored.i.i.i59.i, %tbl_size.i.i55.i
  %offset_ptr.i.i61.i = getelementptr i32, ptr %offset_tbl.i.i56.i, i64 %hash.i.i.i60.i
  %offset.i.i62.i = load i32, ptr %offset_ptr.i.i61.i, align 4
  %eq.i.i292 = icmp eq i32 %704, %offset.i.i62.i
  call void @llvm.assume(i1 %eq.i.i292) #30
  %706 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %707 = call ptr @llvm.invariant.start.p0(i64 600, ptr %698)
  %708 = sext i32 %704 to i64
  %709 = getelementptr ptr, ptr %698, i64 %708
  %710 = getelementptr i8, ptr %709, i64 64
  %711 = load ptr, ptr %710, align 8
  %712 = call ptr %711({ ptr, ptr, ptr, i32 } %705, ptr nonnull %2)
  %713 = call i32 %712({ ptr, ptr, ptr, i32 } %705, { ptr, ptr, ptr, i32 } %705, ptr nonnull %2)
  %714 = add i32 %713, -1
  %715 = and i32 %714, %696
  %716 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  br label %717

717:                                              ; preds = %766, %.lr.ph92
  %spec.store.select.i341 = phi i32 [ %spec.store.select.i, %766 ], [ -1, %.lr.ph92 ]
  %.0..0..0..i = phi i32 [ %784, %766 ], [ %715, %.lr.ph92 ]
  %718 = load ptr, ptr %45, align 8
  %719 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %718, 0
  %720 = load ptr, ptr %46, align 8
  %721 = insertvalue { ptr, ptr, ptr, i32 } %719, ptr %720, 1
  %722 = load ptr, ptr %47, align 8
  %723 = insertvalue { ptr, ptr, ptr, i32 } %721, ptr %722, 2
  %724 = load i32, ptr %48, align 4
  %725 = insertvalue { ptr, ptr, ptr, i32 } %723, i32 %724, 3
  %hash_coef_ptr.i.i65.i = getelementptr i8, ptr %718, i64 8
  %tbl_size_ptr.i.i66.i = getelementptr i8, ptr %718, i64 16
  %offset_tbl_ptr.i.i67.i = getelementptr i8, ptr %718, i64 40
  %hash_coef.i.i68.i = load i64, ptr %hash_coef_ptr.i.i65.i, align 4
  %tbl_size.i.i69.i = load i64, ptr %tbl_size_ptr.i.i66.i, align 4
  %offset_tbl.i.i70.i = load ptr, ptr %offset_tbl_ptr.i.i67.i, align 8
  %product.i.i.i71.i = mul i64 %hash_coef.i.i68.i, -5261542750394134544
  %shifted.i.i.i72.i = lshr i64 %product.i.i.i71.i, 32
  %xored.i.i.i73.i = xor i64 %shifted.i.i.i72.i, %product.i.i.i71.i
  %hash.i.i.i74.i = and i64 %xored.i.i.i73.i, %tbl_size.i.i69.i
  %offset_ptr.i.i75.i = getelementptr i32, ptr %offset_tbl.i.i70.i, i64 %hash.i.i.i74.i
  %offset.i.i76.i = load i32, ptr %offset_ptr.i.i75.i, align 4
  %eq.i79.i = icmp eq i32 %724, %offset.i.i76.i
  call void @llvm.assume(i1 %eq.i79.i) #30
  %726 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  store ptr @_parameterization_Ptri32, ptr %13, align 8
  %727 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %13)
  %728 = call ptr @llvm.invariant.start.p0(i64 600, ptr %718)
  %729 = sext i32 %724 to i64
  %730 = getelementptr ptr, ptr %718, i64 %729
  %731 = getelementptr i8, ptr %730, i64 120
  %732 = load ptr, ptr %731, align 8
  store ptr @i32_typ, ptr %14, align 8
  %733 = call ptr %732({ ptr, ptr, ptr, i32 } %725, ptr nonnull %14)
  %734 = call { ptr, i160 } %733({ ptr, ptr, ptr, i32 } %725, { ptr, ptr, ptr, i32 } %725, ptr nonnull %13, i32 %.0..0..0..i)
  %.fca.0.extract36.i = extractvalue { ptr, i160 } %734, 0
  %735 = icmp eq ptr %.fca.0.extract36.i, @nil_typ
  %736 = icmp eq ptr %.fca.0.extract36.i, null
  %737 = or i1 %735, %736
  br i1 %737, label %785, label %738

738:                                              ; preds = %717
  %.fca.1.extract38.i = extractvalue { ptr, i160 } %734, 1
  %.sroa.5.8.extract.shift.i293 = lshr i160 %.fca.1.extract38.i, 64
  %.sroa.5.8.extract.trunc.i294 = trunc i160 %.sroa.5.8.extract.shift.i293 to i64
  %.sroa.2.8.extract.trunc165.i = trunc i160 %.fca.1.extract38.i to i64
  %739 = inttoptr i64 %.sroa.2.8.extract.trunc165.i to ptr
  %740 = inttoptr i64 %.sroa.5.8.extract.trunc.i294 to ptr
  %hash_coef_ptr.i.i81.i = getelementptr i8, ptr %.fca.0.extract36.i, i64 8
  %tbl_size_ptr.i.i82.i = getelementptr i8, ptr %.fca.0.extract36.i, i64 16
  %offset_tbl_ptr.i.i83.i = getelementptr i8, ptr %.fca.0.extract36.i, i64 40
  %hash_coef.i.i84.i = load i64, ptr %hash_coef_ptr.i.i81.i, align 4
  %tbl_size.i.i85.i = load i64, ptr %tbl_size_ptr.i.i82.i, align 4
  %offset_tbl.i.i86.i = load ptr, ptr %offset_tbl_ptr.i.i83.i, align 8
  %product.i.i.i87.i = mul i64 %hash_coef.i.i84.i, 4015701072841558310
  %shifted.i.i.i88.i = lshr i64 %product.i.i.i87.i, 32
  %xored.i.i.i89.i = xor i64 %shifted.i.i.i88.i, %product.i.i.i87.i
  %hash.i.i.i90.i = and i64 %xored.i.i.i89.i, %tbl_size.i.i85.i
  %offset_ptr.i.i91.i = getelementptr i32, ptr %offset_tbl.i.i86.i, i64 %hash.i.i.i90.i
  %offset.i.i92.i = load i32, ptr %offset_ptr.i.i91.i, align 4
  %741 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract36.i, 0
  %742 = insertvalue { ptr, ptr, ptr, i32 } %741, ptr %739, 1
  %743 = insertvalue { ptr, ptr, ptr, i32 } %742, ptr %740, 2
  %744 = insertvalue { ptr, ptr, ptr, i32 } %743, i32 %offset.i.i92.i, 3
  %745 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %746 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %747 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i)
  %748 = sext i32 %offset.i.i92.i to i64
  %749 = getelementptr ptr, ptr %.fca.0.extract36.i, i64 %748
  %750 = getelementptr i8, ptr %749, i64 64
  %751 = load ptr, ptr %750, align 8
  %752 = call ptr %751({ ptr, ptr, ptr, i32 } %744, ptr nonnull %2)
  %753 = call i32 %752({ ptr, ptr, ptr, i32 } %744, { ptr, ptr, ptr, i32 } %744, ptr nonnull %2)
  %754 = icmp eq i32 %753, %696
  %755 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %756 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %757 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i)
  %758 = getelementptr i8, ptr %749, i64 48
  %759 = load ptr, ptr %758, align 8
  %760 = call ptr %759({ ptr, ptr, ptr, i32 } %744, ptr nonnull %2)
  %761 = call { ptr, i160 } %760({ ptr, ptr, ptr, i32 } %744, { ptr, ptr, ptr, i32 } %744, ptr nonnull %2)
  %762 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %763 = load ptr, ptr %33, align 8
  %764 = call i1 %763({ ptr, i160 } %761, { ptr, i160 } %693)
  %765 = and i1 %754, %764
  br i1 %765, label %HashMap_find_slot_keyK_hashPtri32.exit, label %766

766:                                              ; preds = %738
  %767 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %768 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %769 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i)
  %770 = getelementptr i8, ptr %749, i64 56
  %771 = load ptr, ptr %770, align 8
  %772 = call ptr %771({ ptr, ptr, ptr, i32 } %744, ptr nonnull %2)
  %773 = call { ptr, i160 } %772({ ptr, ptr, ptr, i32 } %744, { ptr, ptr, ptr, i32 } %744, ptr nonnull %2)
  %.fca.0.extract15.i296 = extractvalue { ptr, i160 } %773, 0
  %774 = getelementptr i8, ptr %.fca.0.extract15.i296, i64 8
  %775 = getelementptr i8, ptr %.fca.0.extract15.i296, i64 16
  %776 = getelementptr i8, ptr %.fca.0.extract15.i296, i64 24
  %777 = getelementptr i8, ptr %.fca.0.extract15.i296, i64 32
  %778 = load i64, ptr %774, align 4
  %779 = load i64, ptr %775, align 4
  %780 = load ptr, ptr %776, align 8
  %781 = load ptr, ptr %777, align 8
  %result.i.i297 = call i1 %780(i64 %779, i64 %778, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %781) #3
  %782 = icmp eq i32 %spec.store.select.i341, -1
  %or.cond.i = select i1 %result.i.i297, i1 %782, i1 false
  %spec.store.select.i = select i1 %or.cond.i, i32 %.0..0..0..i, i32 %spec.store.select.i341
  %783 = add i32 %.0..0..0..i, 1
  %784 = and i32 %783, %714
  br label %717

785:                                              ; preds = %717
  %786 = icmp eq i32 %spec.store.select.i341, -1
  %.pre = select i1 %786, i32 %.0..0..0..i, i32 %spec.store.select.i341
  br label %HashMap_find_slot_keyK_hashPtri32.exit

HashMap_find_slot_keyK_hashPtri32.exit:           ; preds = %738, %785
  %787 = phi i32 [ %.pre, %785 ], [ %.0..0..0..i, %738 ]
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %13)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %14)
  %788 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %789 = load ptr, ptr %45, align 8
  %790 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %789, 0
  %791 = load ptr, ptr %46, align 8
  %792 = insertvalue { ptr, ptr, ptr, i32 } %790, ptr %791, 1
  %793 = load ptr, ptr %47, align 8
  %794 = insertvalue { ptr, ptr, ptr, i32 } %792, ptr %793, 2
  %795 = load i32, ptr %48, align 4
  %796 = insertvalue { ptr, ptr, ptr, i32 } %794, i32 %795, 3
  %hash_coef_ptr.i.i58.i = getelementptr i8, ptr %789, i64 8
  %tbl_size_ptr.i.i59.i = getelementptr i8, ptr %789, i64 16
  %offset_tbl_ptr.i.i60.i = getelementptr i8, ptr %789, i64 40
  %hash_coef.i.i61.i = load i64, ptr %hash_coef_ptr.i.i58.i, align 4
  %tbl_size.i.i62.i = load i64, ptr %tbl_size_ptr.i.i59.i, align 4
  %offset_tbl.i.i63.i = load ptr, ptr %offset_tbl_ptr.i.i60.i, align 8
  %product.i.i.i64.i = mul i64 %hash_coef.i.i61.i, -5261542750394134544
  %shifted.i.i.i65.i = lshr i64 %product.i.i.i64.i, 32
  %xored.i.i.i66.i = xor i64 %shifted.i.i.i65.i, %product.i.i.i64.i
  %hash.i.i.i67.i = and i64 %xored.i.i.i66.i, %tbl_size.i.i62.i
  %offset_ptr.i.i68.i = getelementptr i32, ptr %offset_tbl.i.i63.i, i64 %hash.i.i.i67.i
  %offset.i.i69.i = load i32, ptr %offset_ptr.i.i68.i, align 4
  %eq.i.i178 = icmp eq i32 %795, %offset.i.i69.i
  call void @llvm.assume(i1 %eq.i.i178) #30
  store ptr @_parameterization_Ptri32, ptr %22, align 8
  %797 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %22)
  %798 = call ptr @llvm.invariant.start.p0(i64 600, ptr %789)
  %799 = sext i32 %795 to i64
  %800 = getelementptr ptr, ptr %789, i64 %799
  %801 = getelementptr i8, ptr %800, i64 120
  %802 = load ptr, ptr %801, align 8
  store ptr @i32_typ, ptr %23, align 8
  %803 = call ptr %802({ ptr, ptr, ptr, i32 } %796, ptr nonnull %23)
  %804 = call { ptr, i160 } %803({ ptr, ptr, ptr, i32 } %796, { ptr, ptr, ptr, i32 } %796, ptr nonnull %22, i32 %787)
  %.fca.0.extract.i179 = extractvalue { ptr, i160 } %804, 0
  %805 = icmp ne ptr %.fca.0.extract.i179, @nil_typ
  %806 = icmp ne ptr %.fca.0.extract.i179, null
  %.not56.i = and i1 %805, %806
  br i1 %.not56.i, label %807, label %HashMap_get_keyK.exit

807:                                              ; preds = %HashMap_find_slot_keyK_hashPtri32.exit
  %.fca.1.extract.i180 = extractvalue { ptr, i160 } %804, 1
  %.sroa.3.8.extract.trunc.i = trunc i160 %.fca.1.extract.i180 to i64
  %808 = inttoptr i64 %.sroa.3.8.extract.trunc.i to ptr
  %.sroa.5.8.extract.shift.i = lshr i160 %.fca.1.extract.i180, 64
  %.sroa.5.8.extract.trunc.i = trunc i160 %.sroa.5.8.extract.shift.i to i64
  %809 = inttoptr i64 %.sroa.5.8.extract.trunc.i to ptr
  %hash_coef_ptr.i.i72.i = getelementptr i8, ptr %.fca.0.extract.i179, i64 8
  %tbl_size_ptr.i.i73.i = getelementptr i8, ptr %.fca.0.extract.i179, i64 16
  %offset_tbl_ptr.i.i74.i = getelementptr i8, ptr %.fca.0.extract.i179, i64 40
  %hash_coef.i.i75.i = load i64, ptr %hash_coef_ptr.i.i72.i, align 4
  %tbl_size.i.i76.i = load i64, ptr %tbl_size_ptr.i.i73.i, align 4
  %offset_tbl.i.i77.i = load ptr, ptr %offset_tbl_ptr.i.i74.i, align 8
  %product.i.i.i78.i = mul i64 %hash_coef.i.i75.i, 4015701072841558310
  %shifted.i.i.i79.i = lshr i64 %product.i.i.i78.i, 32
  %xored.i.i.i80.i = xor i64 %shifted.i.i.i79.i, %product.i.i.i78.i
  %hash.i.i.i81.i = and i64 %xored.i.i.i80.i, %tbl_size.i.i76.i
  %offset_ptr.i.i82.i = getelementptr i32, ptr %offset_tbl.i.i77.i, i64 %hash.i.i.i81.i
  %offset.i.i83.i = load i32, ptr %offset_ptr.i.i82.i, align 4
  %810 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract.i179, 0
  %811 = insertvalue { ptr, ptr, ptr, i32 } %810, ptr %808, 1
  %812 = insertvalue { ptr, ptr, ptr, i32 } %811, ptr %809, 2
  %813 = insertvalue { ptr, ptr, ptr, i32 } %812, i32 %offset.i.i83.i, 3
  %814 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %815 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %816 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract.i179)
  %817 = sext i32 %offset.i.i83.i to i64
  %818 = getelementptr ptr, ptr %.fca.0.extract.i179, i64 %817
  %819 = getelementptr i8, ptr %818, i64 56
  %820 = load ptr, ptr %819, align 8
  %821 = call ptr %820({ ptr, ptr, ptr, i32 } %813, ptr nonnull %2)
  %822 = call { ptr, i160 } %821({ ptr, ptr, ptr, i32 } %813, { ptr, ptr, ptr, i32 } %813, ptr nonnull %2)
  %.fca.0.extract47.i = extractvalue { ptr, i160 } %822, 0
  %.fca.1.extract49.i = extractvalue { ptr, i160 } %822, 1
  %823 = getelementptr i8, ptr %.fca.0.extract47.i, i64 8
  %824 = getelementptr i8, ptr %.fca.0.extract47.i, i64 16
  %825 = getelementptr i8, ptr %.fca.0.extract47.i, i64 24
  %826 = getelementptr i8, ptr %.fca.0.extract47.i, i64 32
  %827 = load i64, ptr %823, align 4
  %828 = load i64, ptr %824, align 4
  %829 = load ptr, ptr %825, align 8
  %830 = load ptr, ptr %826, align 8
  %result.i.i181 = call i1 %829(i64 %828, i64 %827, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %830) #3
  %extract.t = trunc i160 %.fca.1.extract49.i to i32
  br i1 %result.i.i181, label %HashMap_get_keyK.exit, label %831

831:                                              ; preds = %807
  %result.i85.i = call i1 %829(i64 %828, i64 %827, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr readonly %830) #3
  %cond.fr.i = freeze i1 %result.i85.i
  %spec.select.i = select i1 %cond.fr.i, ptr %.fca.0.extract47.i, ptr @nil_typ
  br label %HashMap_get_keyK.exit

HashMap_get_keyK.exit:                            ; preds = %HashMap_find_slot_keyK_hashPtri32.exit, %807, %831
  %.reg2mem23.sroa.3.0112.i.off0 = phi i32 [ poison, %HashMap_find_slot_keyK_hashPtri32.exit ], [ %extract.t, %807 ], [ %extract.t, %831 ]
  %832 = phi ptr [ @nil_typ, %HashMap_find_slot_keyK_hashPtri32.exit ], [ @nil_typ, %807 ], [ %spec.select.i, %831 ]
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %22)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %23)
  %833 = icmp ne ptr %832, @nil_typ
  %834 = icmp ne ptr %832, null
  %.not27 = and i1 %833, %834
  %835 = sext i32 %.reg2mem23.sroa.3.0112.i.off0 to i64
  %836 = select i1 %.not27, i64 %835, i64 0
  %.reg2mem59.0 = add i64 %836, %.reg2mem63.090
  %837 = add nuw nsw i32 %.reg2mem61.089, 1
  %838 = icmp slt i32 %837, %0
  br i1 %838, label %.lr.ph92, label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit

IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit: ; preds = %HashMap_get_keyK.exit, %._crit_edge.thread
  %839 = phi i64 [ %65, %._crit_edge.thread ], [ %692, %HashMap_get_keyK.exit ]
  %.reg2mem75.0.lcssa96 = phi i64 [ 0, %._crit_edge.thread ], [ %690, %HashMap_get_keyK.exit ]
  %.reg2mem63.0.lcssa = phi i64 [ 0, %._crit_edge.thread ], [ %.reg2mem59.0, %HashMap_get_keyK.exit ]
  %840 = call i64 @clock()
  %841 = icmp eq i64 %.reg2mem63.0.lcssa, %.reg2mem75.0.lcssa96
  %result.i34 = call noalias dereferenceable_or_null(19) ptr @bump_malloc_inner(i64 noundef 19, ptr nonnull @current_ptr) #29
  store <18 x i8> <i8 71, i8 101, i8 116, i8 32, i8 83, i8 101, i8 113, i8 117, i8 101, i8 110, i8 116, i8 105, i8 97, i8 108, i8 32, i8 72, i8 105, i8 116>, ptr %result.i34, align 32
  %result.i35 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %842 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %result.i35, 1
  %843 = insertvalue { ptr, ptr, ptr, i32 } %842, ptr undef, 2
  %844 = insertvalue { ptr, ptr, ptr, i32 } %843, i32 9, 3
  store ptr %result.i34, ptr %result.i35, align 8
  %845 = getelementptr i8, ptr %result.i35, i64 8
  store i32 18, ptr %845, align 4
  %846 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %847 = getelementptr i8, ptr %result.i35, i64 12
  store i32 19, ptr %847, align 4
  %848 = sub i64 %840, %839
  call void @print_benchmark_result({ ptr, ptr, ptr, i32 } %844, i32 %0, i64 %848)
  %result.i36 = call noalias dereferenceable_or_null(19) ptr @bump_malloc_inner(i64 noundef 19, ptr nonnull @current_ptr) #29
  store <18 x i8> <i8 32, i8 32, i8 32, i8 32, i8 86, i8 101, i8 114, i8 105, i8 102, i8 105, i8 99, i8 97, i8 116, i8 105, i8 111, i8 110, i8 58, i8 32>, ptr %result.i36, align 32
  %result.i37 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %849 = getelementptr inbounds i8, ptr %24, i64 8
  %850 = getelementptr inbounds i8, ptr %24, i64 24
  store ptr @String, ptr %24, align 8
  store ptr %result.i37, ptr %849, align 8
  store i32 9, ptr %850, align 8
  %851 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %24)
  store ptr %result.i36, ptr %result.i37, align 8
  %852 = getelementptr i8, ptr %result.i37, i64 8
  store i32 18, ptr %852, align 4
  %853 = getelementptr i8, ptr %result.i37, i64 12
  store i32 19, ptr %853, align 4
  %854 = load i160, ptr %849, align 8
  %855 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %.sroa.3.8.extract.trunc.i186 = trunc i160 %854 to i64
  %856 = inttoptr i64 %.sroa.3.8.extract.trunc.i186 to ptr
  %857 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %858 = getelementptr i8, ptr %856, i64 8
  %859 = load i32, ptr %858, align 4
  %860 = add i32 %859, 1
  %861 = sext i32 %860 to i64
  %result.i.i312 = call noalias ptr @bump_malloc_inner(i64 noundef %861, ptr nonnull @current_ptr) #29
  %862 = load i32, ptr %858, align 4
  %863 = icmp sgt i32 %862, 0
  br i1 %863, label %.lr.ph.i, label %String_c_string_.exit

.lr.ph.i:                                         ; preds = %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit
  %864 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %865 = load ptr, ptr %856, align 8
  %866 = zext nneg i32 %862 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i312, ptr align 1 %865, i64 %866, i1 false)
  br label %String_c_string_.exit

String_c_string_.exit:                            ; preds = %.lr.ph.i, %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit
  %867 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %868 = sext i32 %862 to i64
  %869 = getelementptr i8, ptr %result.i.i312, i64 %868
  store i8 0, ptr %869, align 1
  %puts.i = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i312)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %result.i38 = call noalias dereferenceable_or_null(5) ptr @bump_malloc_inner(i64 noundef 5, ptr nonnull @current_ptr) #29
  %. = select i1 %841, <4 x i8> <i8 80, i8 65, i8 83, i8 83>, <4 x i8> <i8 70, i8 65, i8 73, i8 76>
  %.149 = select i1 %841, ptr %25, ptr %26
  store <4 x i8> %., ptr %result.i38, align 4
  %result.i59 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %.149.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v = select i1 %841, ptr %25, ptr %26
  %.149.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel = getelementptr inbounds i8, ptr %.149.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v, i64 8
  %.149.sroa.sel225.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v = select i1 %841, ptr %25, ptr %26
  %.149.sroa.sel225.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel = getelementptr inbounds i8, ptr %.149.sroa.sel225.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v, i64 24
  store ptr @String, ptr %.149, align 8
  store ptr %result.i59, ptr %.149.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  store i32 9, ptr %.149.sroa.sel225.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  %870 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %.149)
  store ptr %result.i38, ptr %result.i59, align 8
  %871 = getelementptr i8, ptr %result.i59, i64 8
  store i32 4, ptr %871, align 4
  %872 = getelementptr i8, ptr %result.i59, i64 12
  store i32 5, ptr %872, align 4
  %873 = load i160, ptr %.149.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  %874 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %.sroa.3.8.extract.trunc.i205 = trunc i160 %873 to i64
  %875 = inttoptr i64 %.sroa.3.8.extract.trunc.i205 to ptr
  %876 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %877 = getelementptr i8, ptr %875, i64 8
  %878 = load i32, ptr %877, align 4
  %879 = add i32 %878, 1
  %880 = sext i32 %879 to i64
  %result.i.i328 = call noalias ptr @bump_malloc_inner(i64 noundef %880, ptr nonnull @current_ptr) #29
  %881 = load i32, ptr %877, align 4
  %882 = icmp sgt i32 %881, 0
  br i1 %882, label %.lr.ph.i329, label %String_c_string_.exit333

.lr.ph.i329:                                      ; preds = %String_c_string_.exit
  %883 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %884 = load ptr, ptr %875, align 8
  %885 = zext nneg i32 %881 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i328, ptr align 1 %884, i64 %885, i1 false)
  br label %String_c_string_.exit333

String_c_string_.exit333:                         ; preds = %.lr.ph.i329, %String_c_string_.exit
  %886 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %887 = sext i32 %881 to i64
  %888 = getelementptr i8, ptr %result.i.i328, i64 %887
  store i8 0, ptr %888, align 1
  %puts.i221 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i328)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  ret void
}

define void @benchmark_get_random_hit(i32 %0) local_unnamed_addr {
  %2 = alloca [0 x ptr], align 8
  %3 = alloca [1 x ptr], align 8
  %4 = alloca { ptr }, align 8
  %5 = alloca [1 x ptr], align 8
  %6 = alloca { ptr }, align 8
  %7 = alloca [1 x ptr], align 8
  %8 = alloca { ptr }, align 8
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = alloca [3 x ptr], align 8
  %11 = alloca [2 x ptr], align 8
  %12 = alloca { ptr, ptr }, align 8
  %13 = alloca [1 x ptr], align 8
  %14 = alloca { ptr }, align 8
  %15 = alloca [1 x ptr], align 8
  %16 = alloca { ptr }, align 8
  %17 = alloca { ptr, ptr, ptr, i32 }, align 8
  %18 = alloca [2 x ptr], align 8
  %19 = alloca { ptr, ptr }, align 8
  %20 = alloca [1 x ptr], align 8
  %21 = alloca { ptr }, align 8
  %22 = alloca [1 x ptr], align 8
  %23 = alloca { ptr }, align 8
  %oldProtect.i45 = alloca i32, align 4
  %oldProtect.i = alloca i32, align 4
  %24 = alloca { ptr, ptr, ptr, i32 }, align 8
  %25 = alloca { ptr, ptr, ptr, i32 }, align 8
  %26 = alloca { ptr, ptr, ptr, i32 }, align 8
  %result.i = tail call noalias dereferenceable_or_null(80) ptr @bump_malloc_inner(i64 noundef 80, ptr nonnull @current_ptr) #29
  store ptr @_parameterization_Ptri32, ptr %result.i, align 8
  %27 = getelementptr i8, ptr %result.i, i64 8
  store ptr @_parameterization_Ptri32, ptr %27, align 8
  %28 = getelementptr i8, ptr %result.i, i64 16
  store ptr @_parameterization_PairPtri32._Ptri32, ptr %28, align 8
  %29 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %result.i)
  %result.i42 = tail call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %oldProtect.i)
  %result.i43 = call i32 @VirtualProtect(ptr %result.i42, i64 16, i32 64, ptr nonnull %oldProtect.i) #16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %oldProtect.i)
  call void @llvm.init.trampoline(ptr %result.i42, ptr nonnull @ownklfputh, ptr nonnull @i32_hasher)
  %ret.i = call ptr @llvm.adjust.trampoline(ptr readonly %result.i42) #31
  %30 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i42)
  %result.i44 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %oldProtect.i45)
  %result.i46 = call i32 @VirtualProtect(ptr %result.i44, i64 16, i32 64, ptr nonnull %oldProtect.i45) #16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %oldProtect.i45)
  call void @llvm.init.trampoline(ptr %result.i44, ptr nonnull @sjntdoqnon, ptr nonnull @i32_eq)
  %ret.i47 = call ptr @llvm.adjust.trampoline(ptr readonly %result.i44) #31
  %31 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i44)
  %32 = getelementptr i8, ptr %result.i, i64 64
  store ptr %ret.i, ptr %32, align 8
  %33 = getelementptr i8, ptr %result.i, i64 72
  store ptr %ret.i47, ptr %33, align 8
  %result.i.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %34 = getelementptr i8, ptr %result.i.i, i64 16
  store ptr @_parameterization_Nil, ptr %34, align 8
  %result.i4.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %35 = getelementptr i8, ptr %result.i4.i, i64 16
  store ptr @_parameterization_Ptri32, ptr %35, align 8
  %36 = getelementptr i8, ptr %result.i4.i, i64 8
  store ptr @_parameterization_Ptri32, ptr %36, align 8
  %37 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i4.i)
  store ptr @Entry, ptr %result.i4.i, align 8
  %38 = getelementptr i8, ptr %result.i.i, i64 8
  store ptr %result.i4.i, ptr %38, align 8
  %39 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i)
  store ptr @union_typ, ptr %result.i.i, align 8
  %result.i5.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i, ptr %result.i5.i, align 8
  %40 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i5.i)
  %41 = getelementptr i8, ptr %result.i5.i, i64 16
  store i32 16, ptr %41, align 4
  %42 = getelementptr i8, ptr %result.i5.i, i64 20
  store i32 16, ptr %42, align 4
  %result.i.i.i = call noalias dereferenceable_or_null(512) ptr @bump_malloc_inner(i64 noundef 512, ptr nonnull @current_ptr) #29
  %43 = getelementptr i8, ptr %result.i5.i, i64 8
  store ptr %result.i.i.i, ptr %43, align 8
  %44 = getelementptr i8, ptr %result.i, i64 24
  store ptr @Array, ptr %44, align 8
  %45 = getelementptr i8, ptr %result.i, i64 32
  store ptr %result.i5.i, ptr %45, align 8
  %46 = getelementptr i8, ptr %result.i, i64 40
  %47 = getelementptr i8, ptr %result.i, i64 48
  store i32 9, ptr %47, align 4
  %48 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %49 = getelementptr i8, ptr %result.i, i64 60
  %50 = call ptr @llvm.invariant.start.p0(i64 40, ptr nonnull @PRNG)
  %51 = sext i32 %0 to i64
  %52 = shl nsw i64 %51, 5
  %result.i.i166 = call noalias ptr @bump_malloc_inner(i64 noundef %52, ptr nonnull @current_ptr) #29
  %53 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %54 = icmp sgt i32 %0, 0
  br i1 %54, label %.lr.ph223, label %._crit_edge143.thread

.lr.ph223:                                        ; preds = %1
  %55 = call ptr @llvm.invariant.start.p0(i64 40, ptr nonnull @PRNG)
  %56 = getelementptr inbounds i8, ptr %17, i64 8
  %57 = getelementptr inbounds i8, ptr %17, i64 24
  %58 = getelementptr inbounds i8, ptr %17, i64 16
  %59 = getelementptr inbounds i8, ptr %18, i64 8
  %60 = getelementptr inbounds i8, ptr %19, i64 8
  %61 = getelementptr i8, ptr %result.i, i64 56
  %62 = getelementptr inbounds i8, ptr %9, i64 8
  %63 = getelementptr inbounds i8, ptr %9, i64 24
  %64 = getelementptr inbounds i8, ptr %9, i64 16
  %65 = getelementptr inbounds i8, ptr %10, i64 8
  %66 = getelementptr inbounds i8, ptr %10, i64 16
  %67 = getelementptr inbounds i8, ptr %11, i64 8
  %68 = getelementptr inbounds i8, ptr %12, i64 8
  br label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph223, %HashMap_insert_internal_keyK_valueV_hashPtri32.exit
  %69 = phi i32 [ 456, %.lr.ph223 ], [ %72, %HashMap_insert_internal_keyK_valueV_hashPtri32.exit ]
  %.reg2mem89.0221 = phi i32 [ 0, %.lr.ph223 ], [ %701, %HashMap_insert_internal_keyK_valueV_hashPtri32.exit ]
  %70 = mul i32 %69, 1103515245
  %71 = add i32 %70, 12345
  %72 = and i32 %71, 2147483647
  %73 = add nuw i32 %72, 1
  %.sroa.038.0.insert.ext = zext nneg i32 %72 to i160
  %74 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.038.0.insert.ext, 1
  %.sroa.035.0.insert.ext = zext i32 %73 to i160
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %75 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %76 = load ptr, ptr %44, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %76, 0
  %78 = load ptr, ptr %45, align 8
  %79 = insertvalue { ptr, ptr, ptr, i32 } %77, ptr %78, 1
  %80 = load ptr, ptr %46, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %80, 2
  %82 = load i32, ptr %47, align 4
  %83 = insertvalue { ptr, ptr, ptr, i32 } %81, i32 %82, 3
  %hash_coef_ptr.i.i42.i = getelementptr i8, ptr %76, i64 8
  %tbl_size_ptr.i.i43.i = getelementptr i8, ptr %76, i64 16
  %offset_tbl_ptr.i.i44.i = getelementptr i8, ptr %76, i64 40
  %hash_coef.i.i45.i = load i64, ptr %hash_coef_ptr.i.i42.i, align 4
  %tbl_size.i.i46.i = load i64, ptr %tbl_size_ptr.i.i43.i, align 4
  %offset_tbl.i.i47.i = load ptr, ptr %offset_tbl_ptr.i.i44.i, align 8
  %product.i.i.i48.i = mul i64 %hash_coef.i.i45.i, -5261542750394134544
  %shifted.i.i.i49.i = lshr i64 %product.i.i.i48.i, 32
  %xored.i.i.i50.i = xor i64 %shifted.i.i.i49.i, %product.i.i.i48.i
  %hash.i.i.i51.i = and i64 %xored.i.i.i50.i, %tbl_size.i.i46.i
  %offset_ptr.i.i52.i = getelementptr i32, ptr %offset_tbl.i.i47.i, i64 %hash.i.i.i51.i
  %offset.i.i53.i = load i32, ptr %offset_ptr.i.i52.i, align 4
  %eq.i.i = icmp eq i32 %82, %offset.i.i53.i
  call void @llvm.assume(i1 %eq.i.i) #30
  %84 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %85 = call ptr @llvm.invariant.start.p0(i64 600, ptr %76)
  %86 = sext i32 %82 to i64
  %87 = getelementptr ptr, ptr %76, i64 %86
  %88 = getelementptr i8, ptr %87, i64 64
  %89 = load ptr, ptr %88, align 8
  %90 = call ptr %89({ ptr, ptr, ptr, i32 } %83, ptr nonnull %2)
  %91 = call i32 %90({ ptr, ptr, ptr, i32 } %83, { ptr, ptr, ptr, i32 } %83, ptr nonnull %2)
  %92 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %93 = load ptr, ptr %44, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %93, 0
  %95 = load ptr, ptr %45, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %95, 1
  %97 = load ptr, ptr %46, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } %96, ptr %97, 2
  %99 = load i32, ptr %47, align 4
  %100 = insertvalue { ptr, ptr, ptr, i32 } %98, i32 %99, 3
  %hash_coef_ptr.i.i56.i = getelementptr i8, ptr %93, i64 8
  %tbl_size_ptr.i.i57.i = getelementptr i8, ptr %93, i64 16
  %offset_tbl_ptr.i.i58.i = getelementptr i8, ptr %93, i64 40
  %hash_coef.i.i59.i = load i64, ptr %hash_coef_ptr.i.i56.i, align 4
  %tbl_size.i.i60.i = load i64, ptr %tbl_size_ptr.i.i57.i, align 4
  %offset_tbl.i.i61.i = load ptr, ptr %offset_tbl_ptr.i.i58.i, align 8
  %product.i.i.i62.i = mul i64 %hash_coef.i.i59.i, -5261542750394134544
  %shifted.i.i.i63.i = lshr i64 %product.i.i.i62.i, 32
  %xored.i.i.i64.i = xor i64 %shifted.i.i.i63.i, %product.i.i.i62.i
  %hash.i.i.i65.i = and i64 %xored.i.i.i64.i, %tbl_size.i.i60.i
  %offset_ptr.i.i66.i = getelementptr i32, ptr %offset_tbl.i.i61.i, i64 %hash.i.i.i65.i
  %offset.i.i67.i = load i32, ptr %offset_ptr.i.i66.i, align 4
  %eq.i70.i = icmp eq i32 %99, %offset.i.i67.i
  call void @llvm.assume(i1 %eq.i70.i) #30
  %101 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %102 = call ptr @llvm.invariant.start.p0(i64 600, ptr %93)
  %103 = sext i32 %99 to i64
  %104 = getelementptr ptr, ptr %93, i64 %103
  %105 = getelementptr i8, ptr %104, i64 64
  %106 = load ptr, ptr %105, align 8
  %107 = call ptr %106({ ptr, ptr, ptr, i32 } %100, ptr nonnull %2)
  %108 = call i32 %107({ ptr, ptr, ptr, i32 } %100, { ptr, ptr, ptr, i32 } %100, ptr nonnull %2)
  %109 = icmp eq i32 %108, 0
  %110 = load i32, ptr %49, align 4
  %111 = mul i32 %110, 10
  %112 = add i32 %111, 10
  %113 = mul i32 %91, 7
  %114 = icmp sge i32 %112, %113
  %115 = or i1 %109, %114
  br i1 %115, label %116, label %HashMap_insert_keyK_valueV.exit

116:                                              ; preds = %._crit_edge
  %117 = shl i32 %91, 1
  %118 = call i32 @llvm.smax.i32(i32 %117, i32 16)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %20)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %21)
  %119 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %120 = load ptr, ptr %44, align 8
  %121 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %120, 0
  %122 = load ptr, ptr %45, align 8
  %123 = insertvalue { ptr, ptr, ptr, i32 } %121, ptr %122, 1
  %124 = load ptr, ptr %46, align 8
  %125 = insertvalue { ptr, ptr, ptr, i32 } %123, ptr %124, 2
  %126 = load i32, ptr %47, align 4
  %127 = insertvalue { ptr, ptr, ptr, i32 } %125, i32 %126, 3
  %hash_coef_ptr.i.i39.i = getelementptr i8, ptr %120, i64 8
  %tbl_size_ptr.i.i40.i = getelementptr i8, ptr %120, i64 16
  %offset_tbl_ptr.i.i41.i = getelementptr i8, ptr %120, i64 40
  %hash_coef.i.i42.i = load i64, ptr %hash_coef_ptr.i.i39.i, align 4
  %tbl_size.i.i43.i = load i64, ptr %tbl_size_ptr.i.i40.i, align 4
  %offset_tbl.i.i44.i = load ptr, ptr %offset_tbl_ptr.i.i41.i, align 8
  %product.i.i.i45.i = mul i64 %hash_coef.i.i42.i, -5261542750394134544
  %shifted.i.i.i46.i = lshr i64 %product.i.i.i45.i, 32
  %xored.i.i.i47.i = xor i64 %shifted.i.i.i46.i, %product.i.i.i45.i
  %hash.i.i.i48.i = and i64 %xored.i.i.i47.i, %tbl_size.i.i43.i
  %offset_ptr.i.i49.i = getelementptr i32, ptr %offset_tbl.i.i44.i, i64 %hash.i.i.i48.i
  %offset.i.i50.i = load i32, ptr %offset_ptr.i.i49.i, align 4
  %eq.i.i391 = icmp eq i32 %126, %offset.i.i50.i
  call void @llvm.assume(i1 %eq.i.i391) #30
  %128 = load ptr, ptr %result.i, align 8
  %129 = load ptr, ptr %27, align 8
  %result.i.i392 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %130 = getelementptr i8, ptr %result.i.i392, i64 16
  store ptr @_parameterization_Nil, ptr %130, align 8
  %result.i66.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %131 = getelementptr i8, ptr %result.i66.i, i64 16
  store ptr %129, ptr %131, align 8
  %132 = getelementptr i8, ptr %result.i66.i, i64 8
  store ptr %128, ptr %132, align 8
  %133 = getelementptr i8, ptr %result.i66.i, i64 24
  store ptr null, ptr %133, align 8
  %134 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i66.i)
  store ptr @Entry, ptr %result.i66.i, align 8
  %135 = getelementptr i8, ptr %result.i.i392, i64 8
  store ptr %result.i66.i, ptr %135, align 8
  %136 = getelementptr i8, ptr %result.i.i392, i64 24
  store ptr null, ptr %136, align 8
  %137 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i392)
  store ptr @union_typ, ptr %result.i.i392, align 8
  %result.i67.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i392, ptr %result.i67.i, align 8
  %138 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i67.i)
  %139 = getelementptr i8, ptr %result.i67.i, i64 16
  store i32 %118, ptr %139, align 4
  %140 = getelementptr i8, ptr %result.i67.i, i64 20
  store i32 %118, ptr %140, align 4
  %141 = zext nneg i32 %118 to i64
  %142 = shl nuw nsw i64 %141, 5
  %result.i.i.i393 = call noalias ptr @bump_malloc_inner(i64 noundef %142, ptr nonnull @current_ptr) #29
  %143 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %144 = getelementptr i8, ptr %result.i67.i, i64 8
  store ptr %result.i.i.i393, ptr %144, align 8
  store ptr @Array, ptr %44, align 8
  store ptr %result.i67.i, ptr %45, align 8
  store i32 9, ptr %47, align 4
  store i32 0, ptr %61, align 4
  store i32 0, ptr %49, align 4
  %invariant.gep.i = getelementptr i8, ptr %120, i64 64
  %145 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %146 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %147 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %120)
  %148 = sext i32 %126 to i64
  %gep.i486 = getelementptr ptr, ptr %invariant.gep.i, i64 %148
  %149 = load ptr, ptr %gep.i486, align 8
  %150 = call ptr %149({ ptr, ptr, ptr, i32 } %127, ptr nonnull %2)
  %151 = call i32 %150({ ptr, ptr, ptr, i32 } %127, { ptr, ptr, ptr, i32 } %127, ptr nonnull %2)
  %152 = icmp sgt i32 %151, 0
  br i1 %152, label %.lr.ph489, label %HashMap_resize_new_capacityPtri32.exit

.lr.ph489:                                        ; preds = %116
  %invariant.gep172.i = getelementptr i8, ptr %120, i64 120
  %153 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %gep173.i = getelementptr ptr, ptr %invariant.gep172.i, i64 %148
  br label %154

154:                                              ; preds = %.lr.ph489, %._crit_edge3.i
  %.reg2mem31.0.i487 = phi i32 [ 0, %.lr.ph489 ], [ %421, %._crit_edge3.i ]
  store ptr @_parameterization_Ptri32, ptr %20, align 8
  %155 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %20)
  %156 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %120)
  %157 = load ptr, ptr %gep173.i, align 8
  store ptr @i32_typ, ptr %21, align 8
  %158 = call ptr %157({ ptr, ptr, ptr, i32 } %127, ptr nonnull %21)
  %159 = call { ptr, i160 } %158({ ptr, ptr, ptr, i32 } %127, { ptr, ptr, ptr, i32 } %127, ptr nonnull %20, i32 %.reg2mem31.0.i487)
  %.fca.0.extract30.i = extractvalue { ptr, i160 } %159, 0
  %160 = icmp ne ptr %.fca.0.extract30.i, @nil_typ
  %161 = icmp ne ptr %.fca.0.extract30.i, null
  %.not37.i = and i1 %160, %161
  br i1 %.not37.i, label %162, label %._crit_edge3.i

162:                                              ; preds = %154
  %.fca.1.extract32.i = extractvalue { ptr, i160 } %159, 1
  %.sroa.5164.8.extract.trunc.i = trunc i160 %.fca.1.extract32.i to i64
  %163 = inttoptr i64 %.sroa.5164.8.extract.trunc.i to ptr
  %.sroa.9.8.extract.shift.i = lshr i160 %.fca.1.extract32.i, 64
  %.sroa.9.8.extract.trunc.i = trunc i160 %.sroa.9.8.extract.shift.i to i64
  %164 = inttoptr i64 %.sroa.9.8.extract.trunc.i to ptr
  %hash_coef_ptr.i.i83.i = getelementptr i8, ptr %.fca.0.extract30.i, i64 8
  %tbl_size_ptr.i.i84.i = getelementptr i8, ptr %.fca.0.extract30.i, i64 16
  %offset_tbl_ptr.i.i85.i = getelementptr i8, ptr %.fca.0.extract30.i, i64 40
  %hash_coef.i.i86.i = load i64, ptr %hash_coef_ptr.i.i83.i, align 4
  %tbl_size.i.i87.i = load i64, ptr %tbl_size_ptr.i.i84.i, align 4
  %offset_tbl.i.i88.i = load ptr, ptr %offset_tbl_ptr.i.i85.i, align 8
  %product.i.i.i89.i = mul i64 %hash_coef.i.i86.i, 4015701072841558310
  %shifted.i.i.i90.i = lshr i64 %product.i.i.i89.i, 32
  %xored.i.i.i91.i = xor i64 %shifted.i.i.i90.i, %product.i.i.i89.i
  %hash.i.i.i92.i = and i64 %xored.i.i.i91.i, %tbl_size.i.i87.i
  %offset_ptr.i.i93.i = getelementptr i32, ptr %offset_tbl.i.i88.i, i64 %hash.i.i.i92.i
  %offset.i.i94.i = load i32, ptr %offset_ptr.i.i93.i, align 4
  %165 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract30.i, 0
  %166 = insertvalue { ptr, ptr, ptr, i32 } %165, ptr %163, 1
  %167 = insertvalue { ptr, ptr, ptr, i32 } %166, ptr %164, 2
  %168 = insertvalue { ptr, ptr, ptr, i32 } %167, i32 %offset.i.i94.i, 3
  %169 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %170 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %171 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract30.i)
  %172 = sext i32 %offset.i.i94.i to i64
  %173 = getelementptr ptr, ptr %.fca.0.extract30.i, i64 %172
  %174 = getelementptr i8, ptr %173, i64 56
  %175 = load ptr, ptr %174, align 8
  %176 = call ptr %175({ ptr, ptr, ptr, i32 } %168, ptr nonnull %2)
  %177 = call { ptr, i160 } %176({ ptr, ptr, ptr, i32 } %168, { ptr, ptr, ptr, i32 } %168, ptr nonnull %2)
  %.fca.0.extract23.i = extractvalue { ptr, i160 } %177, 0
  %178 = getelementptr i8, ptr %.fca.0.extract23.i, i64 8
  %179 = getelementptr i8, ptr %.fca.0.extract23.i, i64 16
  %180 = getelementptr i8, ptr %.fca.0.extract23.i, i64 24
  %181 = getelementptr i8, ptr %.fca.0.extract23.i, i64 32
  %182 = load i64, ptr %178, align 4
  %183 = load i64, ptr %179, align 4
  %184 = load ptr, ptr %180, align 8
  %185 = load ptr, ptr %181, align 8
  %result.i96.i = call i1 %184(i64 %183, i64 %182, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %185) #3
  br i1 %result.i96.i, label %._crit_edge3.i, label %186

186:                                              ; preds = %162
  %result.i97.i = call i1 %184(i64 %183, i64 %182, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr readonly %185) #3
  br i1 %result.i97.i, label %187, label %._crit_edge3.i

187:                                              ; preds = %186
  %188 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %189 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %190 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract30.i)
  %191 = getelementptr i8, ptr %173, i64 48
  %192 = load ptr, ptr %191, align 8
  %193 = call ptr %192({ ptr, ptr, ptr, i32 } %168, ptr nonnull %2)
  %194 = call { ptr, i160 } %193({ ptr, ptr, ptr, i32 } %168, { ptr, ptr, ptr, i32 } %168, ptr nonnull %2)
  %195 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %196 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %197 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract30.i)
  %198 = getelementptr i8, ptr %173, i64 64
  %199 = load ptr, ptr %198, align 8
  %200 = call ptr %199({ ptr, ptr, ptr, i32 } %168, ptr nonnull %2)
  %201 = call i32 %200({ ptr, ptr, ptr, i32 } %168, { ptr, ptr, ptr, i32 } %168, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %9)
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %10)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %11)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %12)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %202 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %203 = load ptr, ptr %44, align 8
  %204 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %203, 0
  %205 = load ptr, ptr %45, align 8
  %206 = insertvalue { ptr, ptr, ptr, i32 } %204, ptr %205, 1
  %207 = load ptr, ptr %46, align 8
  %208 = insertvalue { ptr, ptr, ptr, i32 } %206, ptr %207, 2
  %209 = load i32, ptr %47, align 4
  %210 = insertvalue { ptr, ptr, ptr, i32 } %208, i32 %209, 3
  %hash_coef_ptr.i.i51.i700 = getelementptr i8, ptr %203, i64 8
  %tbl_size_ptr.i.i52.i701 = getelementptr i8, ptr %203, i64 16
  %offset_tbl_ptr.i.i53.i702 = getelementptr i8, ptr %203, i64 40
  %hash_coef.i.i54.i703 = load i64, ptr %hash_coef_ptr.i.i51.i700, align 4
  %tbl_size.i.i55.i704 = load i64, ptr %tbl_size_ptr.i.i52.i701, align 4
  %offset_tbl.i.i56.i705 = load ptr, ptr %offset_tbl_ptr.i.i53.i702, align 8
  %product.i.i.i57.i706 = mul i64 %hash_coef.i.i54.i703, -5261542750394134544
  %shifted.i.i.i58.i707 = lshr i64 %product.i.i.i57.i706, 32
  %xored.i.i.i59.i708 = xor i64 %shifted.i.i.i58.i707, %product.i.i.i57.i706
  %hash.i.i.i60.i709 = and i64 %xored.i.i.i59.i708, %tbl_size.i.i55.i704
  %offset_ptr.i.i61.i710 = getelementptr i32, ptr %offset_tbl.i.i56.i705, i64 %hash.i.i.i60.i709
  %offset.i.i62.i711 = load i32, ptr %offset_ptr.i.i61.i710, align 4
  %eq.i.i712 = icmp eq i32 %209, %offset.i.i62.i711
  call void @llvm.assume(i1 %eq.i.i712) #30
  %211 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %212 = call ptr @llvm.invariant.start.p0(i64 600, ptr %203)
  %213 = sext i32 %209 to i64
  %214 = getelementptr ptr, ptr %203, i64 %213
  %215 = getelementptr i8, ptr %214, i64 64
  %216 = load ptr, ptr %215, align 8
  %217 = call ptr %216({ ptr, ptr, ptr, i32 } %210, ptr nonnull %2)
  %218 = call i32 %217({ ptr, ptr, ptr, i32 } %210, { ptr, ptr, ptr, i32 } %210, ptr nonnull %2)
  %219 = add i32 %218, -1
  %220 = and i32 %219, %201
  %221 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  br label %222

222:                                              ; preds = %271, %187
  %spec.store.select.i747756 = phi i32 [ %spec.store.select.i747, %271 ], [ -1, %187 ]
  %.0..0..0..i713 = phi i32 [ %289, %271 ], [ %220, %187 ]
  %223 = load ptr, ptr %44, align 8
  %224 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %223, 0
  %225 = load ptr, ptr %45, align 8
  %226 = insertvalue { ptr, ptr, ptr, i32 } %224, ptr %225, 1
  %227 = load ptr, ptr %46, align 8
  %228 = insertvalue { ptr, ptr, ptr, i32 } %226, ptr %227, 2
  %229 = load i32, ptr %47, align 4
  %230 = insertvalue { ptr, ptr, ptr, i32 } %228, i32 %229, 3
  %hash_coef_ptr.i.i65.i714 = getelementptr i8, ptr %223, i64 8
  %tbl_size_ptr.i.i66.i715 = getelementptr i8, ptr %223, i64 16
  %offset_tbl_ptr.i.i67.i716 = getelementptr i8, ptr %223, i64 40
  %hash_coef.i.i68.i717 = load i64, ptr %hash_coef_ptr.i.i65.i714, align 4
  %tbl_size.i.i69.i718 = load i64, ptr %tbl_size_ptr.i.i66.i715, align 4
  %offset_tbl.i.i70.i719 = load ptr, ptr %offset_tbl_ptr.i.i67.i716, align 8
  %product.i.i.i71.i720 = mul i64 %hash_coef.i.i68.i717, -5261542750394134544
  %shifted.i.i.i72.i721 = lshr i64 %product.i.i.i71.i720, 32
  %xored.i.i.i73.i722 = xor i64 %shifted.i.i.i72.i721, %product.i.i.i71.i720
  %hash.i.i.i74.i723 = and i64 %xored.i.i.i73.i722, %tbl_size.i.i69.i718
  %offset_ptr.i.i75.i724 = getelementptr i32, ptr %offset_tbl.i.i70.i719, i64 %hash.i.i.i74.i723
  %offset.i.i76.i725 = load i32, ptr %offset_ptr.i.i75.i724, align 4
  %eq.i79.i726 = icmp eq i32 %229, %offset.i.i76.i725
  call void @llvm.assume(i1 %eq.i79.i726) #30
  %231 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  store ptr @_parameterization_Ptri32, ptr %3, align 8
  %232 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %3)
  %233 = call ptr @llvm.invariant.start.p0(i64 600, ptr %223)
  %234 = sext i32 %229 to i64
  %235 = getelementptr ptr, ptr %223, i64 %234
  %236 = getelementptr i8, ptr %235, i64 120
  %237 = load ptr, ptr %236, align 8
  store ptr @i32_typ, ptr %4, align 8
  %238 = call ptr %237({ ptr, ptr, ptr, i32 } %230, ptr nonnull %4)
  %239 = call { ptr, i160 } %238({ ptr, ptr, ptr, i32 } %230, { ptr, ptr, ptr, i32 } %230, ptr nonnull %3, i32 %.0..0..0..i713)
  %.fca.0.extract36.i727 = extractvalue { ptr, i160 } %239, 0
  %240 = icmp eq ptr %.fca.0.extract36.i727, @nil_typ
  %241 = icmp eq ptr %.fca.0.extract36.i727, null
  %242 = or i1 %240, %241
  br i1 %242, label %290, label %243

243:                                              ; preds = %222
  %.fca.1.extract38.i728 = extractvalue { ptr, i160 } %239, 1
  %.sroa.5.8.extract.shift.i729 = lshr i160 %.fca.1.extract38.i728, 64
  %.sroa.5.8.extract.trunc.i730 = trunc i160 %.sroa.5.8.extract.shift.i729 to i64
  %.sroa.2.8.extract.trunc165.i731 = trunc i160 %.fca.1.extract38.i728 to i64
  %244 = inttoptr i64 %.sroa.2.8.extract.trunc165.i731 to ptr
  %245 = inttoptr i64 %.sroa.5.8.extract.trunc.i730 to ptr
  %hash_coef_ptr.i.i81.i732 = getelementptr i8, ptr %.fca.0.extract36.i727, i64 8
  %tbl_size_ptr.i.i82.i733 = getelementptr i8, ptr %.fca.0.extract36.i727, i64 16
  %offset_tbl_ptr.i.i83.i734 = getelementptr i8, ptr %.fca.0.extract36.i727, i64 40
  %hash_coef.i.i84.i735 = load i64, ptr %hash_coef_ptr.i.i81.i732, align 4
  %tbl_size.i.i85.i736 = load i64, ptr %tbl_size_ptr.i.i82.i733, align 4
  %offset_tbl.i.i86.i737 = load ptr, ptr %offset_tbl_ptr.i.i83.i734, align 8
  %product.i.i.i87.i738 = mul i64 %hash_coef.i.i84.i735, 4015701072841558310
  %shifted.i.i.i88.i739 = lshr i64 %product.i.i.i87.i738, 32
  %xored.i.i.i89.i740 = xor i64 %shifted.i.i.i88.i739, %product.i.i.i87.i738
  %hash.i.i.i90.i741 = and i64 %xored.i.i.i89.i740, %tbl_size.i.i85.i736
  %offset_ptr.i.i91.i742 = getelementptr i32, ptr %offset_tbl.i.i86.i737, i64 %hash.i.i.i90.i741
  %offset.i.i92.i743 = load i32, ptr %offset_ptr.i.i91.i742, align 4
  %246 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract36.i727, 0
  %247 = insertvalue { ptr, ptr, ptr, i32 } %246, ptr %244, 1
  %248 = insertvalue { ptr, ptr, ptr, i32 } %247, ptr %245, 2
  %249 = insertvalue { ptr, ptr, ptr, i32 } %248, i32 %offset.i.i92.i743, 3
  %250 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %251 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %252 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i727)
  %253 = sext i32 %offset.i.i92.i743 to i64
  %254 = getelementptr ptr, ptr %.fca.0.extract36.i727, i64 %253
  %255 = getelementptr i8, ptr %254, i64 64
  %256 = load ptr, ptr %255, align 8
  %257 = call ptr %256({ ptr, ptr, ptr, i32 } %249, ptr nonnull %2)
  %258 = call i32 %257({ ptr, ptr, ptr, i32 } %249, { ptr, ptr, ptr, i32 } %249, ptr nonnull %2)
  %259 = icmp eq i32 %258, %201
  %260 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %261 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %262 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i727)
  %263 = getelementptr i8, ptr %254, i64 48
  %264 = load ptr, ptr %263, align 8
  %265 = call ptr %264({ ptr, ptr, ptr, i32 } %249, ptr nonnull %2)
  %266 = call { ptr, i160 } %265({ ptr, ptr, ptr, i32 } %249, { ptr, ptr, ptr, i32 } %249, ptr nonnull %2)
  %267 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %268 = load ptr, ptr %33, align 8
  %269 = call i1 %268({ ptr, i160 } %266, { ptr, i160 } %194)
  %270 = and i1 %259, %269
  br i1 %270, label %HashMap_find_slot_keyK_hashPtri32.exit748, label %271

271:                                              ; preds = %243
  %272 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %273 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %274 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i727)
  %275 = getelementptr i8, ptr %254, i64 56
  %276 = load ptr, ptr %275, align 8
  %277 = call ptr %276({ ptr, ptr, ptr, i32 } %249, ptr nonnull %2)
  %278 = call { ptr, i160 } %277({ ptr, ptr, ptr, i32 } %249, { ptr, ptr, ptr, i32 } %249, ptr nonnull %2)
  %.fca.0.extract15.i744 = extractvalue { ptr, i160 } %278, 0
  %279 = getelementptr i8, ptr %.fca.0.extract15.i744, i64 8
  %280 = getelementptr i8, ptr %.fca.0.extract15.i744, i64 16
  %281 = getelementptr i8, ptr %.fca.0.extract15.i744, i64 24
  %282 = getelementptr i8, ptr %.fca.0.extract15.i744, i64 32
  %283 = load i64, ptr %279, align 4
  %284 = load i64, ptr %280, align 4
  %285 = load ptr, ptr %281, align 8
  %286 = load ptr, ptr %282, align 8
  %result.i.i745 = call i1 %285(i64 %284, i64 %283, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %286) #3
  %287 = icmp eq i32 %spec.store.select.i747756, -1
  %or.cond.i746 = select i1 %result.i.i745, i1 %287, i1 false
  %spec.store.select.i747 = select i1 %or.cond.i746, i32 %.0..0..0..i713, i32 %spec.store.select.i747756
  %288 = add i32 %.0..0..0..i713, 1
  %289 = and i32 %288, %219
  br label %222

290:                                              ; preds = %222
  %291 = icmp eq i32 %spec.store.select.i747756, -1
  %.pre771 = select i1 %291, i32 %.0..0..0..i713, i32 %spec.store.select.i747756
  br label %HashMap_find_slot_keyK_hashPtri32.exit748

HashMap_find_slot_keyK_hashPtri32.exit748:        ; preds = %243, %290
  %292 = phi i32 [ %.pre771, %290 ], [ %.0..0..0..i713, %243 ]
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  %293 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %294 = load ptr, ptr %44, align 8
  %295 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %294, 0
  %296 = load ptr, ptr %45, align 8
  %297 = insertvalue { ptr, ptr, ptr, i32 } %295, ptr %296, 1
  %298 = load ptr, ptr %46, align 8
  %299 = insertvalue { ptr, ptr, ptr, i32 } %297, ptr %298, 2
  %300 = load i32, ptr %47, align 4
  %301 = insertvalue { ptr, ptr, ptr, i32 } %299, i32 %300, 3
  %hash_coef_ptr.i.i56.i520 = getelementptr i8, ptr %294, i64 8
  %tbl_size_ptr.i.i57.i521 = getelementptr i8, ptr %294, i64 16
  %offset_tbl_ptr.i.i58.i522 = getelementptr i8, ptr %294, i64 40
  %hash_coef.i.i59.i523 = load i64, ptr %hash_coef_ptr.i.i56.i520, align 4
  %tbl_size.i.i60.i524 = load i64, ptr %tbl_size_ptr.i.i57.i521, align 4
  %offset_tbl.i.i61.i525 = load ptr, ptr %offset_tbl_ptr.i.i58.i522, align 8
  %product.i.i.i62.i526 = mul i64 %hash_coef.i.i59.i523, -5261542750394134544
  %shifted.i.i.i63.i527 = lshr i64 %product.i.i.i62.i526, 32
  %xored.i.i.i64.i528 = xor i64 %shifted.i.i.i63.i527, %product.i.i.i62.i526
  %hash.i.i.i65.i529 = and i64 %xored.i.i.i64.i528, %tbl_size.i.i60.i524
  %offset_ptr.i.i66.i530 = getelementptr i32, ptr %offset_tbl.i.i61.i525, i64 %hash.i.i.i65.i529
  %offset.i.i67.i531 = load i32, ptr %offset_ptr.i.i66.i530, align 4
  %eq.i.i532 = icmp eq i32 %300, %offset.i.i67.i531
  call void @llvm.assume(i1 %eq.i.i532) #30
  store ptr @_parameterization_Ptri32, ptr %7, align 8
  %302 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %7)
  %303 = call ptr @llvm.invariant.start.p0(i64 600, ptr %294)
  %304 = sext i32 %300 to i64
  %305 = getelementptr ptr, ptr %294, i64 %304
  %306 = getelementptr i8, ptr %305, i64 120
  %307 = load ptr, ptr %306, align 8
  store ptr @i32_typ, ptr %8, align 8
  %308 = call ptr %307({ ptr, ptr, ptr, i32 } %301, ptr nonnull %8)
  %309 = call { ptr, i160 } %308({ ptr, ptr, ptr, i32 } %301, { ptr, ptr, ptr, i32 } %301, ptr nonnull %7, i32 %292)
  %.fca.0.extract2.i533 = extractvalue { ptr, i160 } %309, 0
  %310 = load ptr, ptr %result.i, align 8
  %311 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %312 = load ptr, ptr %27, align 8
  %313 = load ptr, ptr %310, align 8
  %314 = getelementptr i8, ptr %313, i64 48
  %315 = load ptr, ptr %314, align 8
  %316 = call { i64, i64 } %315(ptr nonnull %310)
  %317 = extractvalue { i64, i64 } %316, 0
  %318 = extractvalue { i64, i64 } %316, 1
  %319 = call i64 @llvm.umax.i64(i64 %318, i64 8)
  %320 = urem i64 16, %318
  %321 = icmp eq i64 %320, 0
  %322 = sub i64 %318, %320
  %323 = select i1 %321, i64 0, i64 %322
  %324 = add i64 %323, %317
  %325 = add i64 %324, 16
  %326 = and i64 %324, 7
  %327 = icmp eq i64 %326, 0
  %328 = sub nuw nsw i64 40, %326
  %329 = select i1 %327, i64 32, i64 %328
  %330 = add i64 %325, %329
  %331 = and i64 %330, 3
  %332 = icmp eq i64 %331, 0
  %333 = sub nuw nsw i64 8, %331
  %334 = select i1 %332, i64 4, i64 %333
  %335 = add i64 %334, %330
  %336 = urem i64 %335, %319
  %337 = icmp eq i64 %336, 0
  %338 = sub i64 %319, %336
  %339 = select i1 %337, i64 0, i64 %338
  %340 = add i64 %335, %339
  %result.i.i534 = call noalias ptr @bump_malloc_inner(i64 noundef %340, ptr nonnull @current_ptr) #29
  store ptr %310, ptr %result.i.i534, align 8
  %341 = getelementptr i8, ptr %result.i.i534, i64 8
  store ptr %312, ptr %341, align 8
  %342 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i.i534)
  store ptr @Entry, ptr %9, align 8
  store ptr %result.i.i534, ptr %62, align 8
  store i32 9, ptr %63, align 8
  %343 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %9)
  %344 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Entry, ptr undef, ptr undef, i32 undef }, ptr %result.i.i534, 1
  %345 = insertvalue { ptr, ptr, ptr, i32 } %344, ptr undef, 2
  %346 = insertvalue { ptr, ptr, ptr, i32 } %345, i32 9, 3
  %347 = load ptr, ptr %result.i, align 8
  %348 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %349 = load ptr, ptr %27, align 8
  store ptr %347, ptr %10, align 8
  store ptr %349, ptr %65, align 8
  store ptr @_parameterization_Ptri32, ptr %66, align 8
  %350 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %10)
  %351 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %352 = load i64, ptr %178, align 4
  %353 = load i64, ptr %179, align 4
  %354 = load ptr, ptr %180, align 8
  %355 = load ptr, ptr %181, align 8
  %result.i.i.i535 = call i1 %354(i64 %353, i64 %352, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr readonly %355) #3
  %356 = select i1 %result.i.i.i535, i64 10, i64 9
  %gep661 = getelementptr [14 x ptr], ptr getelementptr inbounds (i8, ptr @Entry, i64 72), i64 0, i64 %356
  %357 = load ptr, ptr %gep661, align 8
  call void %357({ ptr, ptr, ptr, i32 } %346, { ptr, ptr, ptr, i32 } %346, ptr nonnull %10, { ptr, i160 } %194, { ptr, i160 } %177, i32 %201)
  %358 = load ptr, ptr %64, align 8
  %359 = ptrtoint ptr %result.i.i534 to i64
  %360 = ptrtoint ptr %358 to i64
  %.sroa.2.0.insert.ext.i536 = zext i64 %360 to i160
  %.sroa.2.0.insert.shift.i537 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i536, 64
  %.sroa.0.0.insert.ext.i539 = zext i64 %359 to i160
  %.sroa.2.0.insert.insert.i538 = or disjoint i160 %.sroa.2.0.insert.shift.i537, %.sroa.0.0.insert.ext.i539
  %.sroa.0.0.insert.insert.i540 = or disjoint i160 %.sroa.2.0.insert.insert.i538, 3062541302288446171170371466885913903104
  %361 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0.0.insert.insert.i540, 1
  %362 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %363 = load ptr, ptr %44, align 8
  %364 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %363, 0
  %365 = load ptr, ptr %45, align 8
  %366 = insertvalue { ptr, ptr, ptr, i32 } %364, ptr %365, 1
  %367 = load ptr, ptr %46, align 8
  %368 = insertvalue { ptr, ptr, ptr, i32 } %366, ptr %367, 2
  %369 = load i32, ptr %47, align 4
  %370 = insertvalue { ptr, ptr, ptr, i32 } %368, i32 %369, 3
  %hash_coef_ptr.i.i84.i541 = getelementptr i8, ptr %363, i64 8
  %tbl_size_ptr.i.i85.i542 = getelementptr i8, ptr %363, i64 16
  %offset_tbl_ptr.i.i86.i543 = getelementptr i8, ptr %363, i64 40
  %hash_coef.i.i87.i544 = load i64, ptr %hash_coef_ptr.i.i84.i541, align 4
  %tbl_size.i.i88.i545 = load i64, ptr %tbl_size_ptr.i.i85.i542, align 4
  %offset_tbl.i.i89.i546 = load ptr, ptr %offset_tbl_ptr.i.i86.i543, align 8
  %product.i.i.i90.i547 = mul i64 %hash_coef.i.i87.i544, -5261542750394134544
  %shifted.i.i.i91.i548 = lshr i64 %product.i.i.i90.i547, 32
  %xored.i.i.i92.i549 = xor i64 %shifted.i.i.i91.i548, %product.i.i.i90.i547
  %hash.i.i.i93.i550 = and i64 %xored.i.i.i92.i549, %tbl_size.i.i88.i545
  %offset_ptr.i.i94.i551 = getelementptr i32, ptr %offset_tbl.i.i89.i546, i64 %hash.i.i.i93.i550
  %offset.i.i95.i552 = load i32, ptr %offset_ptr.i.i94.i551, align 4
  %eq.i98.i553 = icmp eq i32 %369, %offset.i.i95.i552
  call void @llvm.assume(i1 %eq.i98.i553) #30
  %371 = load ptr, ptr %result.i, align 8
  %372 = load ptr, ptr %27, align 8
  %result.i99.i554 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %373 = getelementptr i8, ptr %result.i99.i554, i64 16
  store ptr %372, ptr %373, align 8
  %374 = getelementptr i8, ptr %result.i99.i554, i64 8
  store ptr %371, ptr %374, align 8
  %375 = getelementptr i8, ptr %result.i99.i554, i64 24
  store ptr null, ptr %375, align 8
  %376 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i99.i554)
  store ptr @Entry, ptr %result.i99.i554, align 8
  store ptr @_parameterization_Ptri32, ptr %11, align 8
  store ptr %result.i99.i554, ptr %67, align 8
  %377 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %11)
  %378 = call ptr @llvm.invariant.start.p0(i64 600, ptr %363)
  %379 = sext i32 %369 to i64
  %380 = getelementptr ptr, ptr %363, i64 %379
  %381 = getelementptr i8, ptr %380, i64 128
  %382 = load ptr, ptr %381, align 8
  store ptr @i32_typ, ptr %12, align 8
  store ptr @Entry, ptr %68, align 8
  %383 = call ptr %382({ ptr, ptr, ptr, i32 } %370, ptr nonnull %12)
  call void %383({ ptr, ptr, ptr, i32 } %370, { ptr, ptr, ptr, i32 } %370, ptr nonnull %11, i32 %292, { ptr, i160 } %361)
  %384 = icmp eq ptr %.fca.0.extract2.i533, @nil_typ
  %385 = icmp eq ptr %.fca.0.extract2.i533, null
  %386 = or i1 %384, %385
  br i1 %386, label %._crit_edge.thread.i576, label %._crit_edge.i555

._crit_edge.thread.i576:                          ; preds = %HashMap_find_slot_keyK_hashPtri32.exit748
  %387 = load i32, ptr %61, align 4
  %388 = add i32 %387, 1
  store i32 %388, ptr %61, align 4
  br label %._crit_edge1.sink.split.i574

._crit_edge.i555:                                 ; preds = %HashMap_find_slot_keyK_hashPtri32.exit748
  %.fca.1.extract4.i556 = extractvalue { ptr, i160 } %309, 1
  %.sroa.3192.8.extract.trunc.i557 = trunc i160 %.fca.1.extract4.i556 to i64
  %389 = inttoptr i64 %.sroa.3192.8.extract.trunc.i557 to ptr
  %.sroa.5193.8.extract.shift.i558 = lshr i160 %.fca.1.extract4.i556, 64
  %.sroa.5193.8.extract.trunc.i559 = trunc i160 %.sroa.5193.8.extract.shift.i558 to i64
  %390 = inttoptr i64 %.sroa.5193.8.extract.trunc.i559 to ptr
  %hash_coef_ptr.i.i101.i560 = getelementptr i8, ptr %.fca.0.extract2.i533, i64 8
  %tbl_size_ptr.i.i102.i561 = getelementptr i8, ptr %.fca.0.extract2.i533, i64 16
  %offset_tbl_ptr.i.i103.i562 = getelementptr i8, ptr %.fca.0.extract2.i533, i64 40
  %hash_coef.i.i104.i563 = load i64, ptr %hash_coef_ptr.i.i101.i560, align 4
  %tbl_size.i.i105.i564 = load i64, ptr %tbl_size_ptr.i.i102.i561, align 4
  %offset_tbl.i.i106.i565 = load ptr, ptr %offset_tbl_ptr.i.i103.i562, align 8
  %product.i.i.i107.i566 = mul i64 %hash_coef.i.i104.i563, 4015701072841558310
  %shifted.i.i.i108.i567 = lshr i64 %product.i.i.i107.i566, 32
  %xored.i.i.i109.i568 = xor i64 %shifted.i.i.i108.i567, %product.i.i.i107.i566
  %hash.i.i.i110.i569 = and i64 %xored.i.i.i109.i568, %tbl_size.i.i105.i564
  %offset_ptr.i.i111.i570 = getelementptr i32, ptr %offset_tbl.i.i106.i565, i64 %hash.i.i.i110.i569
  %offset.i.i112.i571 = load i32, ptr %offset_ptr.i.i111.i570, align 4
  %391 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract2.i533, 0
  %392 = insertvalue { ptr, ptr, ptr, i32 } %391, ptr %389, 1
  %393 = insertvalue { ptr, ptr, ptr, i32 } %392, ptr %390, 2
  %394 = insertvalue { ptr, ptr, ptr, i32 } %393, i32 %offset.i.i112.i571, 3
  %395 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %396 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %397 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract2.i533)
  %398 = sext i32 %offset.i.i112.i571 to i64
  %399 = getelementptr ptr, ptr %.fca.0.extract2.i533, i64 %398
  %400 = getelementptr i8, ptr %399, i64 56
  %401 = load ptr, ptr %400, align 8
  %402 = call ptr %401({ ptr, ptr, ptr, i32 } %394, ptr nonnull %2)
  %403 = call { ptr, i160 } %402({ ptr, ptr, ptr, i32 } %394, { ptr, ptr, ptr, i32 } %394, ptr nonnull %2)
  %.fca.0.extract45.i572 = extractvalue { ptr, i160 } %403, 0
  %404 = getelementptr i8, ptr %.fca.0.extract45.i572, i64 8
  %405 = getelementptr i8, ptr %.fca.0.extract45.i572, i64 16
  %406 = getelementptr i8, ptr %.fca.0.extract45.i572, i64 24
  %407 = getelementptr i8, ptr %.fca.0.extract45.i572, i64 32
  %408 = load i64, ptr %404, align 4
  %409 = load i64, ptr %405, align 4
  %410 = load ptr, ptr %406, align 8
  %411 = load ptr, ptr %407, align 8
  %result.i114.i573 = call i1 %410(i64 %409, i64 %408, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %411) #3
  br i1 %result.i114.i573, label %._crit_edge1.sink.split.i574, label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit577

._crit_edge1.sink.split.i574:                     ; preds = %._crit_edge.i555, %._crit_edge.thread.i576
  %.sink202.i575 = phi i64 [ 40, %._crit_edge.thread.i576 ], [ 32, %._crit_edge.i555 ]
  %412 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %413 = getelementptr i8, ptr getelementptr inbounds (i8, ptr @HashMap, i64 72), i64 %.sink202.i575
  %414 = load ptr, ptr %413, align 8
  %415 = load ptr, ptr %414, align 8
  %416 = call i32 %415(ptr nonnull %result.i)
  %417 = add i32 %416, 1
  %418 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %419 = getelementptr i8, ptr %414, i64 8
  %420 = load ptr, ptr %419, align 8
  call void %420(ptr nonnull %result.i, i32 %417)
  br label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit577

HashMap_insert_internal_keyK_valueV_hashPtri32.exit577: ; preds = %._crit_edge.i555, %._crit_edge1.sink.split.i574
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %9)
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %10)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %11)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %12)
  br label %._crit_edge3.i

._crit_edge3.i:                                   ; preds = %HashMap_insert_internal_keyK_valueV_hashPtri32.exit577, %186, %162, %154
  %421 = add nuw nsw i32 %.reg2mem31.0.i487, 1
  %422 = load ptr, ptr %gep.i486, align 8
  %423 = call ptr %422({ ptr, ptr, ptr, i32 } %127, ptr nonnull %2)
  %424 = call i32 %423({ ptr, ptr, ptr, i32 } %127, { ptr, ptr, ptr, i32 } %127, ptr nonnull %2)
  %425 = icmp slt i32 %421, %424
  br i1 %425, label %154, label %HashMap_resize_new_capacityPtri32.exit

HashMap_resize_new_capacityPtri32.exit:           ; preds = %._crit_edge3.i, %116
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %20)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %21)
  br label %HashMap_insert_keyK_valueV.exit

HashMap_insert_keyK_valueV.exit:                  ; preds = %._crit_edge, %HashMap_resize_new_capacityPtri32.exit
  %426 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %427 = load ptr, ptr %32, align 8
  %428 = call i32 %427({ ptr, i160 } %74)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %15)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %16)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %17)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %18)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %19)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6)
  %429 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %430 = load ptr, ptr %44, align 8
  %431 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %430, 0
  %432 = load ptr, ptr %45, align 8
  %433 = insertvalue { ptr, ptr, ptr, i32 } %431, ptr %432, 1
  %434 = load ptr, ptr %46, align 8
  %435 = insertvalue { ptr, ptr, ptr, i32 } %433, ptr %434, 2
  %436 = load i32, ptr %47, align 4
  %437 = insertvalue { ptr, ptr, ptr, i32 } %435, i32 %436, 3
  %hash_coef_ptr.i.i51.i594 = getelementptr i8, ptr %430, i64 8
  %tbl_size_ptr.i.i52.i595 = getelementptr i8, ptr %430, i64 16
  %offset_tbl_ptr.i.i53.i596 = getelementptr i8, ptr %430, i64 40
  %hash_coef.i.i54.i597 = load i64, ptr %hash_coef_ptr.i.i51.i594, align 4
  %tbl_size.i.i55.i598 = load i64, ptr %tbl_size_ptr.i.i52.i595, align 4
  %offset_tbl.i.i56.i599 = load ptr, ptr %offset_tbl_ptr.i.i53.i596, align 8
  %product.i.i.i57.i600 = mul i64 %hash_coef.i.i54.i597, -5261542750394134544
  %shifted.i.i.i58.i601 = lshr i64 %product.i.i.i57.i600, 32
  %xored.i.i.i59.i602 = xor i64 %shifted.i.i.i58.i601, %product.i.i.i57.i600
  %hash.i.i.i60.i603 = and i64 %xored.i.i.i59.i602, %tbl_size.i.i55.i598
  %offset_ptr.i.i61.i604 = getelementptr i32, ptr %offset_tbl.i.i56.i599, i64 %hash.i.i.i60.i603
  %offset.i.i62.i605 = load i32, ptr %offset_ptr.i.i61.i604, align 4
  %eq.i.i606 = icmp eq i32 %436, %offset.i.i62.i605
  call void @llvm.assume(i1 %eq.i.i606) #30
  %438 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %439 = call ptr @llvm.invariant.start.p0(i64 600, ptr %430)
  %440 = sext i32 %436 to i64
  %441 = getelementptr ptr, ptr %430, i64 %440
  %442 = getelementptr i8, ptr %441, i64 64
  %443 = load ptr, ptr %442, align 8
  %444 = call ptr %443({ ptr, ptr, ptr, i32 } %437, ptr nonnull %2)
  %445 = call i32 %444({ ptr, ptr, ptr, i32 } %437, { ptr, ptr, ptr, i32 } %437, ptr nonnull %2)
  %446 = add i32 %445, -1
  %447 = and i32 %446, %428
  %448 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  br label %449

449:                                              ; preds = %498, %HashMap_insert_keyK_valueV.exit
  %spec.store.select.i641662 = phi i32 [ %spec.store.select.i641, %498 ], [ -1, %HashMap_insert_keyK_valueV.exit ]
  %.0..0..0..i607 = phi i32 [ %516, %498 ], [ %447, %HashMap_insert_keyK_valueV.exit ]
  %450 = load ptr, ptr %44, align 8
  %451 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %450, 0
  %452 = load ptr, ptr %45, align 8
  %453 = insertvalue { ptr, ptr, ptr, i32 } %451, ptr %452, 1
  %454 = load ptr, ptr %46, align 8
  %455 = insertvalue { ptr, ptr, ptr, i32 } %453, ptr %454, 2
  %456 = load i32, ptr %47, align 4
  %457 = insertvalue { ptr, ptr, ptr, i32 } %455, i32 %456, 3
  %hash_coef_ptr.i.i65.i608 = getelementptr i8, ptr %450, i64 8
  %tbl_size_ptr.i.i66.i609 = getelementptr i8, ptr %450, i64 16
  %offset_tbl_ptr.i.i67.i610 = getelementptr i8, ptr %450, i64 40
  %hash_coef.i.i68.i611 = load i64, ptr %hash_coef_ptr.i.i65.i608, align 4
  %tbl_size.i.i69.i612 = load i64, ptr %tbl_size_ptr.i.i66.i609, align 4
  %offset_tbl.i.i70.i613 = load ptr, ptr %offset_tbl_ptr.i.i67.i610, align 8
  %product.i.i.i71.i614 = mul i64 %hash_coef.i.i68.i611, -5261542750394134544
  %shifted.i.i.i72.i615 = lshr i64 %product.i.i.i71.i614, 32
  %xored.i.i.i73.i616 = xor i64 %shifted.i.i.i72.i615, %product.i.i.i71.i614
  %hash.i.i.i74.i617 = and i64 %xored.i.i.i73.i616, %tbl_size.i.i69.i612
  %offset_ptr.i.i75.i618 = getelementptr i32, ptr %offset_tbl.i.i70.i613, i64 %hash.i.i.i74.i617
  %offset.i.i76.i619 = load i32, ptr %offset_ptr.i.i75.i618, align 4
  %eq.i79.i620 = icmp eq i32 %456, %offset.i.i76.i619
  call void @llvm.assume(i1 %eq.i79.i620) #30
  %458 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  store ptr @_parameterization_Ptri32, ptr %5, align 8
  %459 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %5)
  %460 = call ptr @llvm.invariant.start.p0(i64 600, ptr %450)
  %461 = sext i32 %456 to i64
  %462 = getelementptr ptr, ptr %450, i64 %461
  %463 = getelementptr i8, ptr %462, i64 120
  %464 = load ptr, ptr %463, align 8
  store ptr @i32_typ, ptr %6, align 8
  %465 = call ptr %464({ ptr, ptr, ptr, i32 } %457, ptr nonnull %6)
  %466 = call { ptr, i160 } %465({ ptr, ptr, ptr, i32 } %457, { ptr, ptr, ptr, i32 } %457, ptr nonnull %5, i32 %.0..0..0..i607)
  %.fca.0.extract36.i621 = extractvalue { ptr, i160 } %466, 0
  %467 = icmp eq ptr %.fca.0.extract36.i621, @nil_typ
  %468 = icmp eq ptr %.fca.0.extract36.i621, null
  %469 = or i1 %467, %468
  br i1 %469, label %517, label %470

470:                                              ; preds = %449
  %.fca.1.extract38.i622 = extractvalue { ptr, i160 } %466, 1
  %.sroa.5.8.extract.shift.i623 = lshr i160 %.fca.1.extract38.i622, 64
  %.sroa.5.8.extract.trunc.i624 = trunc i160 %.sroa.5.8.extract.shift.i623 to i64
  %.sroa.2.8.extract.trunc165.i625 = trunc i160 %.fca.1.extract38.i622 to i64
  %471 = inttoptr i64 %.sroa.2.8.extract.trunc165.i625 to ptr
  %472 = inttoptr i64 %.sroa.5.8.extract.trunc.i624 to ptr
  %hash_coef_ptr.i.i81.i626 = getelementptr i8, ptr %.fca.0.extract36.i621, i64 8
  %tbl_size_ptr.i.i82.i627 = getelementptr i8, ptr %.fca.0.extract36.i621, i64 16
  %offset_tbl_ptr.i.i83.i628 = getelementptr i8, ptr %.fca.0.extract36.i621, i64 40
  %hash_coef.i.i84.i629 = load i64, ptr %hash_coef_ptr.i.i81.i626, align 4
  %tbl_size.i.i85.i630 = load i64, ptr %tbl_size_ptr.i.i82.i627, align 4
  %offset_tbl.i.i86.i631 = load ptr, ptr %offset_tbl_ptr.i.i83.i628, align 8
  %product.i.i.i87.i632 = mul i64 %hash_coef.i.i84.i629, 4015701072841558310
  %shifted.i.i.i88.i633 = lshr i64 %product.i.i.i87.i632, 32
  %xored.i.i.i89.i634 = xor i64 %shifted.i.i.i88.i633, %product.i.i.i87.i632
  %hash.i.i.i90.i635 = and i64 %xored.i.i.i89.i634, %tbl_size.i.i85.i630
  %offset_ptr.i.i91.i636 = getelementptr i32, ptr %offset_tbl.i.i86.i631, i64 %hash.i.i.i90.i635
  %offset.i.i92.i637 = load i32, ptr %offset_ptr.i.i91.i636, align 4
  %473 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract36.i621, 0
  %474 = insertvalue { ptr, ptr, ptr, i32 } %473, ptr %471, 1
  %475 = insertvalue { ptr, ptr, ptr, i32 } %474, ptr %472, 2
  %476 = insertvalue { ptr, ptr, ptr, i32 } %475, i32 %offset.i.i92.i637, 3
  %477 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %478 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %479 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i621)
  %480 = sext i32 %offset.i.i92.i637 to i64
  %481 = getelementptr ptr, ptr %.fca.0.extract36.i621, i64 %480
  %482 = getelementptr i8, ptr %481, i64 64
  %483 = load ptr, ptr %482, align 8
  %484 = call ptr %483({ ptr, ptr, ptr, i32 } %476, ptr nonnull %2)
  %485 = call i32 %484({ ptr, ptr, ptr, i32 } %476, { ptr, ptr, ptr, i32 } %476, ptr nonnull %2)
  %486 = icmp eq i32 %485, %428
  %487 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %488 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %489 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i621)
  %490 = getelementptr i8, ptr %481, i64 48
  %491 = load ptr, ptr %490, align 8
  %492 = call ptr %491({ ptr, ptr, ptr, i32 } %476, ptr nonnull %2)
  %493 = call { ptr, i160 } %492({ ptr, ptr, ptr, i32 } %476, { ptr, ptr, ptr, i32 } %476, ptr nonnull %2)
  %494 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %495 = load ptr, ptr %33, align 8
  %496 = call i1 %495({ ptr, i160 } %493, { ptr, i160 } %74)
  %497 = and i1 %486, %496
  br i1 %497, label %HashMap_find_slot_keyK_hashPtri32.exit642, label %498

498:                                              ; preds = %470
  %499 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %500 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %501 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i621)
  %502 = getelementptr i8, ptr %481, i64 56
  %503 = load ptr, ptr %502, align 8
  %504 = call ptr %503({ ptr, ptr, ptr, i32 } %476, ptr nonnull %2)
  %505 = call { ptr, i160 } %504({ ptr, ptr, ptr, i32 } %476, { ptr, ptr, ptr, i32 } %476, ptr nonnull %2)
  %.fca.0.extract15.i = extractvalue { ptr, i160 } %505, 0
  %506 = getelementptr i8, ptr %.fca.0.extract15.i, i64 8
  %507 = getelementptr i8, ptr %.fca.0.extract15.i, i64 16
  %508 = getelementptr i8, ptr %.fca.0.extract15.i, i64 24
  %509 = getelementptr i8, ptr %.fca.0.extract15.i, i64 32
  %510 = load i64, ptr %506, align 4
  %511 = load i64, ptr %507, align 4
  %512 = load ptr, ptr %508, align 8
  %513 = load ptr, ptr %509, align 8
  %result.i.i639 = call i1 %512(i64 %511, i64 %510, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %513) #3
  %514 = icmp eq i32 %spec.store.select.i641662, -1
  %or.cond.i640 = select i1 %result.i.i639, i1 %514, i1 false
  %spec.store.select.i641 = select i1 %or.cond.i640, i32 %.0..0..0..i607, i32 %spec.store.select.i641662
  %515 = add i32 %.0..0..0..i607, 1
  %516 = and i32 %515, %446
  br label %449

517:                                              ; preds = %449
  %518 = icmp eq i32 %spec.store.select.i641662, -1
  %.pre674 = select i1 %518, i32 %.0..0..0..i607, i32 %spec.store.select.i641662
  br label %HashMap_find_slot_keyK_hashPtri32.exit642

HashMap_find_slot_keyK_hashPtri32.exit642:        ; preds = %470, %517
  %519 = phi i32 [ %.pre674, %517 ], [ %.0..0..0..i607, %470 ]
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6)
  %520 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %521 = load ptr, ptr %44, align 8
  %522 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %521, 0
  %523 = load ptr, ptr %45, align 8
  %524 = insertvalue { ptr, ptr, ptr, i32 } %522, ptr %523, 1
  %525 = load ptr, ptr %46, align 8
  %526 = insertvalue { ptr, ptr, ptr, i32 } %524, ptr %525, 2
  %527 = load i32, ptr %47, align 4
  %528 = insertvalue { ptr, ptr, ptr, i32 } %526, i32 %527, 3
  %hash_coef_ptr.i.i56.i406 = getelementptr i8, ptr %521, i64 8
  %tbl_size_ptr.i.i57.i407 = getelementptr i8, ptr %521, i64 16
  %offset_tbl_ptr.i.i58.i408 = getelementptr i8, ptr %521, i64 40
  %hash_coef.i.i59.i409 = load i64, ptr %hash_coef_ptr.i.i56.i406, align 4
  %tbl_size.i.i60.i410 = load i64, ptr %tbl_size_ptr.i.i57.i407, align 4
  %offset_tbl.i.i61.i411 = load ptr, ptr %offset_tbl_ptr.i.i58.i408, align 8
  %product.i.i.i62.i412 = mul i64 %hash_coef.i.i59.i409, -5261542750394134544
  %shifted.i.i.i63.i413 = lshr i64 %product.i.i.i62.i412, 32
  %xored.i.i.i64.i414 = xor i64 %shifted.i.i.i63.i413, %product.i.i.i62.i412
  %hash.i.i.i65.i415 = and i64 %xored.i.i.i64.i414, %tbl_size.i.i60.i410
  %offset_ptr.i.i66.i416 = getelementptr i32, ptr %offset_tbl.i.i61.i411, i64 %hash.i.i.i65.i415
  %offset.i.i67.i417 = load i32, ptr %offset_ptr.i.i66.i416, align 4
  %eq.i.i418 = icmp eq i32 %527, %offset.i.i67.i417
  call void @llvm.assume(i1 %eq.i.i418) #30
  store ptr @_parameterization_Ptri32, ptr %15, align 8
  %529 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %15)
  %530 = call ptr @llvm.invariant.start.p0(i64 600, ptr %521)
  %531 = sext i32 %527 to i64
  %532 = getelementptr ptr, ptr %521, i64 %531
  %533 = getelementptr i8, ptr %532, i64 120
  %534 = load ptr, ptr %533, align 8
  store ptr @i32_typ, ptr %16, align 8
  %535 = call ptr %534({ ptr, ptr, ptr, i32 } %528, ptr nonnull %16)
  %536 = call { ptr, i160 } %535({ ptr, ptr, ptr, i32 } %528, { ptr, ptr, ptr, i32 } %528, ptr nonnull %15, i32 %519)
  %.fca.0.extract2.i = extractvalue { ptr, i160 } %536, 0
  %537 = load ptr, ptr %result.i, align 8
  %538 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %539 = load ptr, ptr %27, align 8
  %540 = load ptr, ptr %537, align 8
  %541 = getelementptr i8, ptr %540, i64 48
  %542 = load ptr, ptr %541, align 8
  %543 = call { i64, i64 } %542(ptr nonnull %537)
  %544 = extractvalue { i64, i64 } %543, 0
  %545 = extractvalue { i64, i64 } %543, 1
  %546 = call i64 @llvm.umax.i64(i64 %545, i64 8)
  %547 = urem i64 16, %545
  %548 = icmp eq i64 %547, 0
  %549 = sub i64 %545, %547
  %550 = select i1 %548, i64 0, i64 %549
  %551 = add i64 %550, %544
  %552 = add i64 %551, 16
  %553 = and i64 %551, 7
  %554 = icmp eq i64 %553, 0
  %555 = sub nuw nsw i64 40, %553
  %556 = select i1 %554, i64 32, i64 %555
  %557 = add i64 %552, %556
  %558 = and i64 %557, 3
  %559 = icmp eq i64 %558, 0
  %560 = sub nuw nsw i64 8, %558
  %561 = select i1 %559, i64 4, i64 %560
  %562 = add i64 %561, %557
  %563 = urem i64 %562, %546
  %564 = icmp eq i64 %563, 0
  %565 = sub i64 %546, %563
  %566 = select i1 %564, i64 0, i64 %565
  %567 = add i64 %562, %566
  %result.i.i419 = call noalias ptr @bump_malloc_inner(i64 noundef %567, ptr nonnull @current_ptr) #29
  store ptr %537, ptr %result.i.i419, align 8
  %568 = getelementptr i8, ptr %result.i.i419, i64 8
  store ptr %539, ptr %568, align 8
  %569 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i.i419)
  store ptr @Entry, ptr %17, align 8
  store ptr %result.i.i419, ptr %56, align 8
  store i32 9, ptr %57, align 8
  %570 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %17)
  %571 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %572 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %573 = load ptr, ptr %537, align 8
  %574 = getelementptr i8, ptr %573, i64 48
  %575 = load ptr, ptr %574, align 8
  %576 = call { i64, i64 } %575(ptr nonnull %537)
  %577 = extractvalue { i64, i64 } %576, 1
  %578 = urem i64 16, %577
  %579 = icmp eq i64 %578, 0
  %reass.sub = sub i64 %577, %578
  %580 = add i64 %reass.sub, 16
  %581 = select i1 %579, i64 16, i64 %580
  %582 = getelementptr i8, ptr %result.i.i419, i64 %581
  %583 = load ptr, ptr %result.i.i419, align 8
  %584 = load ptr, ptr %583, align 8
  %585 = getelementptr i8, ptr %584, i64 64
  %586 = load ptr, ptr %585, align 8
  call void %586({ ptr, i160 } %74, ptr nonnull %583, ptr %582)
  %587 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %588 = load ptr, ptr %result.i.i419, align 8
  %589 = load ptr, ptr %588, align 8
  %590 = getelementptr i8, ptr %589, i64 48
  %591 = load ptr, ptr %590, align 8
  %592 = call { i64, i64 } %591(ptr nonnull %588)
  %593 = extractvalue { i64, i64 } %592, 0
  %594 = extractvalue { i64, i64 } %592, 1
  %595 = urem i64 16, %594
  %596 = icmp eq i64 %595, 0
  %597 = sub i64 %594, %595
  %598 = select i1 %596, i64 0, i64 %597
  %599 = add i64 %598, %593
  %600 = and i64 %599, 7
  %601 = icmp eq i64 %600, 0
  %602 = sub nuw nsw i64 8, %600
  %603 = select i1 %601, i64 0, i64 %602
  %604 = getelementptr i8, ptr %result.i.i419, i64 %599
  %605 = getelementptr i8, ptr %604, i64 16
  %606 = getelementptr i8, ptr %605, i64 %603
  store ptr @i32_typ, ptr %606, align 8
  %607 = getelementptr i8, ptr %606, i64 8
  store i160 %.sroa.035.0.insert.ext, ptr %607, align 4
  %608 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %609 = load ptr, ptr %result.i.i419, align 8
  %610 = load ptr, ptr %609, align 8
  %611 = getelementptr i8, ptr %610, i64 48
  %612 = load ptr, ptr %611, align 8
  %613 = call { i64, i64 } %612(ptr nonnull %609)
  %614 = extractvalue { i64, i64 } %613, 0
  %615 = extractvalue { i64, i64 } %613, 1
  %616 = urem i64 16, %615
  %617 = icmp eq i64 %616, 0
  %618 = sub i64 %615, %616
  %619 = select i1 %617, i64 0, i64 %618
  %620 = add i64 %619, %614
  %621 = add i64 %620, 16
  %622 = and i64 %620, 7
  %623 = icmp eq i64 %622, 0
  %624 = sub nuw nsw i64 40, %622
  %625 = select i1 %623, i64 32, i64 %624
  %626 = add i64 %621, %625
  %627 = and i64 %626, 3
  %628 = icmp eq i64 %627, 0
  %629 = sub nuw nsw i64 4, %627
  %630 = select i1 %628, i64 0, i64 %629
  %631 = getelementptr i8, ptr %result.i.i419, i64 %626
  %632 = getelementptr i8, ptr %631, i64 %630
  store i32 %428, ptr %632, align 4
  %633 = load ptr, ptr %58, align 8
  %634 = ptrtoint ptr %result.i.i419 to i64
  %635 = ptrtoint ptr %633 to i64
  %.sroa.2.0.insert.ext.i = zext i64 %635 to i160
  %.sroa.2.0.insert.shift.i = shl nuw nsw i160 %.sroa.2.0.insert.ext.i, 64
  %.sroa.0.0.insert.ext.i = zext i64 %634 to i160
  %.sroa.2.0.insert.insert.i = or disjoint i160 %.sroa.2.0.insert.shift.i, %.sroa.0.0.insert.ext.i
  %.sroa.0.0.insert.insert.i = or disjoint i160 %.sroa.2.0.insert.insert.i, 3062541302288446171170371466885913903104
  %636 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0.0.insert.insert.i, 1
  %637 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %638 = load ptr, ptr %44, align 8
  %639 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %638, 0
  %640 = load ptr, ptr %45, align 8
  %641 = insertvalue { ptr, ptr, ptr, i32 } %639, ptr %640, 1
  %642 = load ptr, ptr %46, align 8
  %643 = insertvalue { ptr, ptr, ptr, i32 } %641, ptr %642, 2
  %644 = load i32, ptr %47, align 4
  %645 = insertvalue { ptr, ptr, ptr, i32 } %643, i32 %644, 3
  %hash_coef_ptr.i.i84.i = getelementptr i8, ptr %638, i64 8
  %tbl_size_ptr.i.i85.i = getelementptr i8, ptr %638, i64 16
  %offset_tbl_ptr.i.i86.i = getelementptr i8, ptr %638, i64 40
  %hash_coef.i.i87.i = load i64, ptr %hash_coef_ptr.i.i84.i, align 4
  %tbl_size.i.i88.i = load i64, ptr %tbl_size_ptr.i.i85.i, align 4
  %offset_tbl.i.i89.i = load ptr, ptr %offset_tbl_ptr.i.i86.i, align 8
  %product.i.i.i90.i = mul i64 %hash_coef.i.i87.i, -5261542750394134544
  %shifted.i.i.i91.i = lshr i64 %product.i.i.i90.i, 32
  %xored.i.i.i92.i = xor i64 %shifted.i.i.i91.i, %product.i.i.i90.i
  %hash.i.i.i93.i = and i64 %xored.i.i.i92.i, %tbl_size.i.i88.i
  %offset_ptr.i.i94.i = getelementptr i32, ptr %offset_tbl.i.i89.i, i64 %hash.i.i.i93.i
  %offset.i.i95.i = load i32, ptr %offset_ptr.i.i94.i, align 4
  %eq.i98.i = icmp eq i32 %644, %offset.i.i95.i
  call void @llvm.assume(i1 %eq.i98.i) #30
  %646 = load ptr, ptr %result.i, align 8
  %647 = load ptr, ptr %27, align 8
  %result.i99.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %648 = getelementptr i8, ptr %result.i99.i, i64 16
  store ptr %647, ptr %648, align 8
  %649 = getelementptr i8, ptr %result.i99.i, i64 8
  store ptr %646, ptr %649, align 8
  %650 = getelementptr i8, ptr %result.i99.i, i64 24
  store ptr null, ptr %650, align 8
  %651 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i99.i)
  store ptr @Entry, ptr %result.i99.i, align 8
  store ptr @_parameterization_Ptri32, ptr %18, align 8
  store ptr %result.i99.i, ptr %59, align 8
  %652 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %18)
  %653 = call ptr @llvm.invariant.start.p0(i64 600, ptr %638)
  %654 = sext i32 %644 to i64
  %655 = getelementptr ptr, ptr %638, i64 %654
  %656 = getelementptr i8, ptr %655, i64 128
  %657 = load ptr, ptr %656, align 8
  store ptr @i32_typ, ptr %19, align 8
  store ptr @Entry, ptr %60, align 8
  %658 = call ptr %657({ ptr, ptr, ptr, i32 } %645, ptr nonnull %19)
  call void %658({ ptr, ptr, ptr, i32 } %645, { ptr, ptr, ptr, i32 } %645, ptr nonnull %18, i32 %519, { ptr, i160 } %636)
  %659 = icmp eq ptr %.fca.0.extract2.i, @nil_typ
  %660 = icmp eq ptr %.fca.0.extract2.i, null
  %661 = or i1 %659, %660
  br i1 %661, label %._crit_edge.thread.i, label %._crit_edge.i

._crit_edge.thread.i:                             ; preds = %HashMap_find_slot_keyK_hashPtri32.exit642
  %662 = load i32, ptr %61, align 4
  %663 = add i32 %662, 1
  store i32 %663, ptr %61, align 4
  br label %._crit_edge1.sink.split.i

._crit_edge.i:                                    ; preds = %HashMap_find_slot_keyK_hashPtri32.exit642
  %.fca.1.extract4.i = extractvalue { ptr, i160 } %536, 1
  %.sroa.3192.8.extract.trunc.i = trunc i160 %.fca.1.extract4.i to i64
  %664 = inttoptr i64 %.sroa.3192.8.extract.trunc.i to ptr
  %.sroa.5193.8.extract.shift.i = lshr i160 %.fca.1.extract4.i, 64
  %.sroa.5193.8.extract.trunc.i = trunc i160 %.sroa.5193.8.extract.shift.i to i64
  %665 = inttoptr i64 %.sroa.5193.8.extract.trunc.i to ptr
  %hash_coef_ptr.i.i101.i = getelementptr i8, ptr %.fca.0.extract2.i, i64 8
  %tbl_size_ptr.i.i102.i = getelementptr i8, ptr %.fca.0.extract2.i, i64 16
  %offset_tbl_ptr.i.i103.i = getelementptr i8, ptr %.fca.0.extract2.i, i64 40
  %hash_coef.i.i104.i = load i64, ptr %hash_coef_ptr.i.i101.i, align 4
  %tbl_size.i.i105.i = load i64, ptr %tbl_size_ptr.i.i102.i, align 4
  %offset_tbl.i.i106.i = load ptr, ptr %offset_tbl_ptr.i.i103.i, align 8
  %product.i.i.i107.i = mul i64 %hash_coef.i.i104.i, 4015701072841558310
  %shifted.i.i.i108.i = lshr i64 %product.i.i.i107.i, 32
  %xored.i.i.i109.i = xor i64 %shifted.i.i.i108.i, %product.i.i.i107.i
  %hash.i.i.i110.i = and i64 %xored.i.i.i109.i, %tbl_size.i.i105.i
  %offset_ptr.i.i111.i = getelementptr i32, ptr %offset_tbl.i.i106.i, i64 %hash.i.i.i110.i
  %offset.i.i112.i = load i32, ptr %offset_ptr.i.i111.i, align 4
  %666 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract2.i, 0
  %667 = insertvalue { ptr, ptr, ptr, i32 } %666, ptr %664, 1
  %668 = insertvalue { ptr, ptr, ptr, i32 } %667, ptr %665, 2
  %669 = insertvalue { ptr, ptr, ptr, i32 } %668, i32 %offset.i.i112.i, 3
  %670 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %671 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %672 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract2.i)
  %673 = sext i32 %offset.i.i112.i to i64
  %674 = getelementptr ptr, ptr %.fca.0.extract2.i, i64 %673
  %675 = getelementptr i8, ptr %674, i64 56
  %676 = load ptr, ptr %675, align 8
  %677 = call ptr %676({ ptr, ptr, ptr, i32 } %669, ptr nonnull %2)
  %678 = call { ptr, i160 } %677({ ptr, ptr, ptr, i32 } %669, { ptr, ptr, ptr, i32 } %669, ptr nonnull %2)
  %.fca.0.extract45.i = extractvalue { ptr, i160 } %678, 0
  %679 = getelementptr i8, ptr %.fca.0.extract45.i, i64 8
  %680 = getelementptr i8, ptr %.fca.0.extract45.i, i64 16
  %681 = getelementptr i8, ptr %.fca.0.extract45.i, i64 24
  %682 = getelementptr i8, ptr %.fca.0.extract45.i, i64 32
  %683 = load i64, ptr %679, align 4
  %684 = load i64, ptr %680, align 4
  %685 = load ptr, ptr %681, align 8
  %686 = load ptr, ptr %682, align 8
  %result.i114.i = call i1 %685(i64 %684, i64 %683, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %686) #3
  br i1 %result.i114.i, label %._crit_edge1.sink.split.i, label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit

._crit_edge1.sink.split.i:                        ; preds = %._crit_edge.i, %._crit_edge.thread.i
  %.sink202.i = phi i64 [ 40, %._crit_edge.thread.i ], [ 32, %._crit_edge.i ]
  %687 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %688 = getelementptr i8, ptr getelementptr inbounds (i8, ptr @HashMap, i64 72), i64 %.sink202.i
  %689 = load ptr, ptr %688, align 8
  %690 = load ptr, ptr %689, align 8
  %691 = call i32 %690(ptr nonnull %result.i)
  %692 = add i32 %691, 1
  %693 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %694 = getelementptr i8, ptr %689, i64 8
  %695 = load ptr, ptr %694, align 8
  call void %695(ptr nonnull %result.i, i32 %692)
  br label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit

HashMap_insert_internal_keyK_valueV_hashPtri32.exit: ; preds = %._crit_edge.i, %._crit_edge1.sink.split.i
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %15)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %16)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %17)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %18)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %19)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %696 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %697 = zext nneg i32 %.reg2mem89.0221 to i64
  %698 = shl nuw nsw i64 %697, 5
  %699 = getelementptr i8, ptr %result.i.i166, i64 %698
  store ptr @i32_typ, ptr %699, align 8
  %700 = getelementptr i8, ptr %699, i64 8
  store i160 %.sroa.038.0.insert.ext, ptr %700, align 4
  %701 = add nuw nsw i32 %.reg2mem89.0221, 1
  %702 = icmp slt i32 %701, %0
  br i1 %702, label %._crit_edge, label %.lr.ph.preheader

.lr.ph.preheader:                                 ; preds = %HashMap_insert_internal_keyK_valueV_hashPtri32.exit
  %703 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %invariant.gep = getelementptr i8, ptr %result.i.i166, i64 8
  br label %.lr.ph

._crit_edge143.thread:                            ; preds = %1
  %704 = call i64 @clock()
  br label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %.reg2mem85.0142 = phi i64 [ %710, %.lr.ph ], [ 0, %.lr.ph.preheader ]
  %.reg2mem83.0141 = phi i32 [ %711, %.lr.ph ], [ 0, %.lr.ph.preheader ]
  %705 = zext nneg i32 %.reg2mem83.0141 to i64
  %706 = shl nuw nsw i64 %705, 5
  %gep = getelementptr i8, ptr %invariant.gep, i64 %706
  %707 = load i160, ptr %gep, align 4
  %.sroa.127.8.extract.trunc = trunc i160 %707 to i32
  %708 = add i32 %.sroa.127.8.extract.trunc, 1
  %709 = sext i32 %708 to i64
  %710 = add i64 %.reg2mem85.0142, %709
  %711 = add nuw nsw i32 %.reg2mem83.0141, 1
  %712 = icmp slt i32 %711, %0
  br i1 %712, label %.lr.ph, label %._crit_edge143

._crit_edge143:                                   ; preds = %.lr.ph
  %713 = call i64 @clock()
  %714 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  br label %.lr.ph147

.lr.ph147:                                        ; preds = %._crit_edge143, %HashMap_get_keyK.exit
  %.reg2mem73.0145 = phi i64 [ %.reg2mem69.0, %HashMap_get_keyK.exit ], [ 0, %._crit_edge143 ]
  %.reg2mem71.0144 = phi i32 [ %862, %HashMap_get_keyK.exit ], [ 0, %._crit_edge143 ]
  %715 = zext nneg i32 %.reg2mem71.0144 to i64
  %716 = shl nuw nsw i64 %715, 5
  %gep374 = getelementptr i8, ptr %invariant.gep, i64 %716
  %717 = load i160, ptr %gep374, align 4
  %.sroa.019.0.insert.ext = and i160 %717, 4294967295
  %718 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.019.0.insert.ext, 1
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %22)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %23)
  %719 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %720 = load ptr, ptr %32, align 8
  %721 = call i32 %720({ ptr, i160 } %718)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %13)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %14)
  %722 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %723 = load ptr, ptr %44, align 8
  %724 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %723, 0
  %725 = load ptr, ptr %45, align 8
  %726 = insertvalue { ptr, ptr, ptr, i32 } %724, ptr %725, 1
  %727 = load ptr, ptr %46, align 8
  %728 = insertvalue { ptr, ptr, ptr, i32 } %726, ptr %727, 2
  %729 = load i32, ptr %47, align 4
  %730 = insertvalue { ptr, ptr, ptr, i32 } %728, i32 %729, 3
  %hash_coef_ptr.i.i51.i = getelementptr i8, ptr %723, i64 8
  %tbl_size_ptr.i.i52.i = getelementptr i8, ptr %723, i64 16
  %offset_tbl_ptr.i.i53.i = getelementptr i8, ptr %723, i64 40
  %hash_coef.i.i54.i = load i64, ptr %hash_coef_ptr.i.i51.i, align 4
  %tbl_size.i.i55.i = load i64, ptr %tbl_size_ptr.i.i52.i, align 4
  %offset_tbl.i.i56.i = load ptr, ptr %offset_tbl_ptr.i.i53.i, align 8
  %product.i.i.i57.i = mul i64 %hash_coef.i.i54.i, -5261542750394134544
  %shifted.i.i.i58.i = lshr i64 %product.i.i.i57.i, 32
  %xored.i.i.i59.i = xor i64 %shifted.i.i.i58.i, %product.i.i.i57.i
  %hash.i.i.i60.i = and i64 %xored.i.i.i59.i, %tbl_size.i.i55.i
  %offset_ptr.i.i61.i = getelementptr i32, ptr %offset_tbl.i.i56.i, i64 %hash.i.i.i60.i
  %offset.i.i62.i = load i32, ptr %offset_ptr.i.i61.i, align 4
  %eq.i.i441 = icmp eq i32 %729, %offset.i.i62.i
  call void @llvm.assume(i1 %eq.i.i441) #30
  %731 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %732 = call ptr @llvm.invariant.start.p0(i64 600, ptr %723)
  %733 = sext i32 %729 to i64
  %734 = getelementptr ptr, ptr %723, i64 %733
  %735 = getelementptr i8, ptr %734, i64 64
  %736 = load ptr, ptr %735, align 8
  %737 = call ptr %736({ ptr, ptr, ptr, i32 } %730, ptr nonnull %2)
  %738 = call i32 %737({ ptr, ptr, ptr, i32 } %730, { ptr, ptr, ptr, i32 } %730, ptr nonnull %2)
  %739 = add i32 %738, -1
  %740 = and i32 %739, %721
  %741 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  br label %742

742:                                              ; preds = %791, %.lr.ph147
  %spec.store.select.i491 = phi i32 [ %spec.store.select.i, %791 ], [ -1, %.lr.ph147 ]
  %.0..0..0..i = phi i32 [ %809, %791 ], [ %740, %.lr.ph147 ]
  %743 = load ptr, ptr %44, align 8
  %744 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %743, 0
  %745 = load ptr, ptr %45, align 8
  %746 = insertvalue { ptr, ptr, ptr, i32 } %744, ptr %745, 1
  %747 = load ptr, ptr %46, align 8
  %748 = insertvalue { ptr, ptr, ptr, i32 } %746, ptr %747, 2
  %749 = load i32, ptr %47, align 4
  %750 = insertvalue { ptr, ptr, ptr, i32 } %748, i32 %749, 3
  %hash_coef_ptr.i.i65.i = getelementptr i8, ptr %743, i64 8
  %tbl_size_ptr.i.i66.i = getelementptr i8, ptr %743, i64 16
  %offset_tbl_ptr.i.i67.i = getelementptr i8, ptr %743, i64 40
  %hash_coef.i.i68.i = load i64, ptr %hash_coef_ptr.i.i65.i, align 4
  %tbl_size.i.i69.i = load i64, ptr %tbl_size_ptr.i.i66.i, align 4
  %offset_tbl.i.i70.i = load ptr, ptr %offset_tbl_ptr.i.i67.i, align 8
  %product.i.i.i71.i = mul i64 %hash_coef.i.i68.i, -5261542750394134544
  %shifted.i.i.i72.i = lshr i64 %product.i.i.i71.i, 32
  %xored.i.i.i73.i = xor i64 %shifted.i.i.i72.i, %product.i.i.i71.i
  %hash.i.i.i74.i = and i64 %xored.i.i.i73.i, %tbl_size.i.i69.i
  %offset_ptr.i.i75.i = getelementptr i32, ptr %offset_tbl.i.i70.i, i64 %hash.i.i.i74.i
  %offset.i.i76.i = load i32, ptr %offset_ptr.i.i75.i, align 4
  %eq.i79.i = icmp eq i32 %749, %offset.i.i76.i
  call void @llvm.assume(i1 %eq.i79.i) #30
  %751 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  store ptr @_parameterization_Ptri32, ptr %13, align 8
  %752 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %13)
  %753 = call ptr @llvm.invariant.start.p0(i64 600, ptr %743)
  %754 = sext i32 %749 to i64
  %755 = getelementptr ptr, ptr %743, i64 %754
  %756 = getelementptr i8, ptr %755, i64 120
  %757 = load ptr, ptr %756, align 8
  store ptr @i32_typ, ptr %14, align 8
  %758 = call ptr %757({ ptr, ptr, ptr, i32 } %750, ptr nonnull %14)
  %759 = call { ptr, i160 } %758({ ptr, ptr, ptr, i32 } %750, { ptr, ptr, ptr, i32 } %750, ptr nonnull %13, i32 %.0..0..0..i)
  %.fca.0.extract36.i = extractvalue { ptr, i160 } %759, 0
  %760 = icmp eq ptr %.fca.0.extract36.i, @nil_typ
  %761 = icmp eq ptr %.fca.0.extract36.i, null
  %762 = or i1 %760, %761
  br i1 %762, label %810, label %763

763:                                              ; preds = %742
  %.fca.1.extract38.i = extractvalue { ptr, i160 } %759, 1
  %.sroa.5.8.extract.shift.i442 = lshr i160 %.fca.1.extract38.i, 64
  %.sroa.5.8.extract.trunc.i443 = trunc i160 %.sroa.5.8.extract.shift.i442 to i64
  %.sroa.2.8.extract.trunc165.i = trunc i160 %.fca.1.extract38.i to i64
  %764 = inttoptr i64 %.sroa.2.8.extract.trunc165.i to ptr
  %765 = inttoptr i64 %.sroa.5.8.extract.trunc.i443 to ptr
  %hash_coef_ptr.i.i81.i = getelementptr i8, ptr %.fca.0.extract36.i, i64 8
  %tbl_size_ptr.i.i82.i = getelementptr i8, ptr %.fca.0.extract36.i, i64 16
  %offset_tbl_ptr.i.i83.i = getelementptr i8, ptr %.fca.0.extract36.i, i64 40
  %hash_coef.i.i84.i = load i64, ptr %hash_coef_ptr.i.i81.i, align 4
  %tbl_size.i.i85.i = load i64, ptr %tbl_size_ptr.i.i82.i, align 4
  %offset_tbl.i.i86.i = load ptr, ptr %offset_tbl_ptr.i.i83.i, align 8
  %product.i.i.i87.i = mul i64 %hash_coef.i.i84.i, 4015701072841558310
  %shifted.i.i.i88.i = lshr i64 %product.i.i.i87.i, 32
  %xored.i.i.i89.i = xor i64 %shifted.i.i.i88.i, %product.i.i.i87.i
  %hash.i.i.i90.i = and i64 %xored.i.i.i89.i, %tbl_size.i.i85.i
  %offset_ptr.i.i91.i = getelementptr i32, ptr %offset_tbl.i.i86.i, i64 %hash.i.i.i90.i
  %offset.i.i92.i = load i32, ptr %offset_ptr.i.i91.i, align 4
  %766 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract36.i, 0
  %767 = insertvalue { ptr, ptr, ptr, i32 } %766, ptr %764, 1
  %768 = insertvalue { ptr, ptr, ptr, i32 } %767, ptr %765, 2
  %769 = insertvalue { ptr, ptr, ptr, i32 } %768, i32 %offset.i.i92.i, 3
  %770 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %771 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %772 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i)
  %773 = sext i32 %offset.i.i92.i to i64
  %774 = getelementptr ptr, ptr %.fca.0.extract36.i, i64 %773
  %775 = getelementptr i8, ptr %774, i64 64
  %776 = load ptr, ptr %775, align 8
  %777 = call ptr %776({ ptr, ptr, ptr, i32 } %769, ptr nonnull %2)
  %778 = call i32 %777({ ptr, ptr, ptr, i32 } %769, { ptr, ptr, ptr, i32 } %769, ptr nonnull %2)
  %779 = icmp eq i32 %778, %721
  %780 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %781 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %782 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i)
  %783 = getelementptr i8, ptr %774, i64 48
  %784 = load ptr, ptr %783, align 8
  %785 = call ptr %784({ ptr, ptr, ptr, i32 } %769, ptr nonnull %2)
  %786 = call { ptr, i160 } %785({ ptr, ptr, ptr, i32 } %769, { ptr, ptr, ptr, i32 } %769, ptr nonnull %2)
  %787 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %788 = load ptr, ptr %33, align 8
  %789 = call i1 %788({ ptr, i160 } %786, { ptr, i160 } %718)
  %790 = and i1 %779, %789
  br i1 %790, label %HashMap_find_slot_keyK_hashPtri32.exit, label %791

791:                                              ; preds = %763
  %792 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %793 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %794 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i)
  %795 = getelementptr i8, ptr %774, i64 56
  %796 = load ptr, ptr %795, align 8
  %797 = call ptr %796({ ptr, ptr, ptr, i32 } %769, ptr nonnull %2)
  %798 = call { ptr, i160 } %797({ ptr, ptr, ptr, i32 } %769, { ptr, ptr, ptr, i32 } %769, ptr nonnull %2)
  %.fca.0.extract15.i445 = extractvalue { ptr, i160 } %798, 0
  %799 = getelementptr i8, ptr %.fca.0.extract15.i445, i64 8
  %800 = getelementptr i8, ptr %.fca.0.extract15.i445, i64 16
  %801 = getelementptr i8, ptr %.fca.0.extract15.i445, i64 24
  %802 = getelementptr i8, ptr %.fca.0.extract15.i445, i64 32
  %803 = load i64, ptr %799, align 4
  %804 = load i64, ptr %800, align 4
  %805 = load ptr, ptr %801, align 8
  %806 = load ptr, ptr %802, align 8
  %result.i.i446 = call i1 %805(i64 %804, i64 %803, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %806) #3
  %807 = icmp eq i32 %spec.store.select.i491, -1
  %or.cond.i = select i1 %result.i.i446, i1 %807, i1 false
  %spec.store.select.i = select i1 %or.cond.i, i32 %.0..0..0..i, i32 %spec.store.select.i491
  %808 = add i32 %.0..0..0..i, 1
  %809 = and i32 %808, %739
  br label %742

810:                                              ; preds = %742
  %811 = icmp eq i32 %spec.store.select.i491, -1
  %.pre = select i1 %811, i32 %.0..0..0..i, i32 %spec.store.select.i491
  br label %HashMap_find_slot_keyK_hashPtri32.exit

HashMap_find_slot_keyK_hashPtri32.exit:           ; preds = %763, %810
  %812 = phi i32 [ %.pre, %810 ], [ %.0..0..0..i, %763 ]
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %13)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %14)
  %813 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %814 = load ptr, ptr %44, align 8
  %815 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %814, 0
  %816 = load ptr, ptr %45, align 8
  %817 = insertvalue { ptr, ptr, ptr, i32 } %815, ptr %816, 1
  %818 = load ptr, ptr %46, align 8
  %819 = insertvalue { ptr, ptr, ptr, i32 } %817, ptr %818, 2
  %820 = load i32, ptr %47, align 4
  %821 = insertvalue { ptr, ptr, ptr, i32 } %819, i32 %820, 3
  %hash_coef_ptr.i.i58.i = getelementptr i8, ptr %814, i64 8
  %tbl_size_ptr.i.i59.i = getelementptr i8, ptr %814, i64 16
  %offset_tbl_ptr.i.i60.i = getelementptr i8, ptr %814, i64 40
  %hash_coef.i.i61.i = load i64, ptr %hash_coef_ptr.i.i58.i, align 4
  %tbl_size.i.i62.i = load i64, ptr %tbl_size_ptr.i.i59.i, align 4
  %offset_tbl.i.i63.i = load ptr, ptr %offset_tbl_ptr.i.i60.i, align 8
  %product.i.i.i64.i = mul i64 %hash_coef.i.i61.i, -5261542750394134544
  %shifted.i.i.i65.i = lshr i64 %product.i.i.i64.i, 32
  %xored.i.i.i66.i = xor i64 %shifted.i.i.i65.i, %product.i.i.i64.i
  %hash.i.i.i67.i = and i64 %xored.i.i.i66.i, %tbl_size.i.i62.i
  %offset_ptr.i.i68.i = getelementptr i32, ptr %offset_tbl.i.i63.i, i64 %hash.i.i.i67.i
  %offset.i.i69.i = load i32, ptr %offset_ptr.i.i68.i, align 4
  %eq.i.i324 = icmp eq i32 %820, %offset.i.i69.i
  call void @llvm.assume(i1 %eq.i.i324) #30
  store ptr @_parameterization_Ptri32, ptr %22, align 8
  %822 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %22)
  %823 = call ptr @llvm.invariant.start.p0(i64 600, ptr %814)
  %824 = sext i32 %820 to i64
  %825 = getelementptr ptr, ptr %814, i64 %824
  %826 = getelementptr i8, ptr %825, i64 120
  %827 = load ptr, ptr %826, align 8
  store ptr @i32_typ, ptr %23, align 8
  %828 = call ptr %827({ ptr, ptr, ptr, i32 } %821, ptr nonnull %23)
  %829 = call { ptr, i160 } %828({ ptr, ptr, ptr, i32 } %821, { ptr, ptr, ptr, i32 } %821, ptr nonnull %22, i32 %812)
  %.fca.0.extract.i325 = extractvalue { ptr, i160 } %829, 0
  %830 = icmp ne ptr %.fca.0.extract.i325, @nil_typ
  %831 = icmp ne ptr %.fca.0.extract.i325, null
  %.not56.i = and i1 %830, %831
  br i1 %.not56.i, label %832, label %HashMap_get_keyK.exit

832:                                              ; preds = %HashMap_find_slot_keyK_hashPtri32.exit
  %.fca.1.extract.i326 = extractvalue { ptr, i160 } %829, 1
  %.sroa.3.8.extract.trunc.i = trunc i160 %.fca.1.extract.i326 to i64
  %833 = inttoptr i64 %.sroa.3.8.extract.trunc.i to ptr
  %.sroa.5.8.extract.shift.i = lshr i160 %.fca.1.extract.i326, 64
  %.sroa.5.8.extract.trunc.i = trunc i160 %.sroa.5.8.extract.shift.i to i64
  %834 = inttoptr i64 %.sroa.5.8.extract.trunc.i to ptr
  %hash_coef_ptr.i.i72.i = getelementptr i8, ptr %.fca.0.extract.i325, i64 8
  %tbl_size_ptr.i.i73.i = getelementptr i8, ptr %.fca.0.extract.i325, i64 16
  %offset_tbl_ptr.i.i74.i = getelementptr i8, ptr %.fca.0.extract.i325, i64 40
  %hash_coef.i.i75.i = load i64, ptr %hash_coef_ptr.i.i72.i, align 4
  %tbl_size.i.i76.i = load i64, ptr %tbl_size_ptr.i.i73.i, align 4
  %offset_tbl.i.i77.i = load ptr, ptr %offset_tbl_ptr.i.i74.i, align 8
  %product.i.i.i78.i = mul i64 %hash_coef.i.i75.i, 4015701072841558310
  %shifted.i.i.i79.i = lshr i64 %product.i.i.i78.i, 32
  %xored.i.i.i80.i = xor i64 %shifted.i.i.i79.i, %product.i.i.i78.i
  %hash.i.i.i81.i = and i64 %xored.i.i.i80.i, %tbl_size.i.i76.i
  %offset_ptr.i.i82.i = getelementptr i32, ptr %offset_tbl.i.i77.i, i64 %hash.i.i.i81.i
  %offset.i.i83.i = load i32, ptr %offset_ptr.i.i82.i, align 4
  %835 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract.i325, 0
  %836 = insertvalue { ptr, ptr, ptr, i32 } %835, ptr %833, 1
  %837 = insertvalue { ptr, ptr, ptr, i32 } %836, ptr %834, 2
  %838 = insertvalue { ptr, ptr, ptr, i32 } %837, i32 %offset.i.i83.i, 3
  %839 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %840 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %841 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract.i325)
  %842 = sext i32 %offset.i.i83.i to i64
  %843 = getelementptr ptr, ptr %.fca.0.extract.i325, i64 %842
  %844 = getelementptr i8, ptr %843, i64 56
  %845 = load ptr, ptr %844, align 8
  %846 = call ptr %845({ ptr, ptr, ptr, i32 } %838, ptr nonnull %2)
  %847 = call { ptr, i160 } %846({ ptr, ptr, ptr, i32 } %838, { ptr, ptr, ptr, i32 } %838, ptr nonnull %2)
  %.fca.0.extract47.i = extractvalue { ptr, i160 } %847, 0
  %.fca.1.extract49.i = extractvalue { ptr, i160 } %847, 1
  %848 = getelementptr i8, ptr %.fca.0.extract47.i, i64 8
  %849 = getelementptr i8, ptr %.fca.0.extract47.i, i64 16
  %850 = getelementptr i8, ptr %.fca.0.extract47.i, i64 24
  %851 = getelementptr i8, ptr %.fca.0.extract47.i, i64 32
  %852 = load i64, ptr %848, align 4
  %853 = load i64, ptr %849, align 4
  %854 = load ptr, ptr %850, align 8
  %855 = load ptr, ptr %851, align 8
  %result.i.i327 = call i1 %854(i64 %853, i64 %852, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %855) #3
  %extract.t = trunc i160 %.fca.1.extract49.i to i32
  br i1 %result.i.i327, label %HashMap_get_keyK.exit, label %856

856:                                              ; preds = %832
  %result.i85.i = call i1 %854(i64 %853, i64 %852, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr readonly %855) #3
  %cond.fr.i = freeze i1 %result.i85.i
  %spec.select.i = select i1 %cond.fr.i, ptr %.fca.0.extract47.i, ptr @nil_typ
  br label %HashMap_get_keyK.exit

HashMap_get_keyK.exit:                            ; preds = %HashMap_find_slot_keyK_hashPtri32.exit, %832, %856
  %.reg2mem23.sroa.3.0112.i.off0 = phi i32 [ poison, %HashMap_find_slot_keyK_hashPtri32.exit ], [ %extract.t, %832 ], [ %extract.t, %856 ]
  %857 = phi ptr [ @nil_typ, %HashMap_find_slot_keyK_hashPtri32.exit ], [ @nil_typ, %832 ], [ %spec.select.i, %856 ]
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %22)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %23)
  %858 = icmp ne ptr %857, @nil_typ
  %859 = icmp ne ptr %857, null
  %.not41 = and i1 %858, %859
  %860 = sext i32 %.reg2mem23.sroa.3.0112.i.off0 to i64
  %861 = select i1 %.not41, i64 %860, i64 0
  %.reg2mem69.0 = add i64 %861, %.reg2mem73.0145
  %862 = add nuw nsw i32 %.reg2mem71.0144, 1
  %863 = icmp slt i32 %862, %0
  br i1 %863, label %.lr.ph147, label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit

IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit: ; preds = %HashMap_get_keyK.exit, %._crit_edge143.thread
  %864 = phi i64 [ %704, %._crit_edge143.thread ], [ %713, %HashMap_get_keyK.exit ]
  %.reg2mem85.0.lcssa152 = phi i64 [ 0, %._crit_edge143.thread ], [ %710, %HashMap_get_keyK.exit ]
  %.reg2mem73.0.lcssa = phi i64 [ 0, %._crit_edge143.thread ], [ %.reg2mem69.0, %HashMap_get_keyK.exit ]
  %865 = call i64 @clock()
  %866 = icmp eq i64 %.reg2mem73.0.lcssa, %.reg2mem85.0.lcssa152
  %result.i78 = call noalias dereferenceable_or_null(15) ptr @bump_malloc_inner(i64 noundef 15, ptr nonnull @current_ptr) #29
  store <14 x i8> <i8 71, i8 101, i8 116, i8 32, i8 82, i8 97, i8 110, i8 100, i8 111, i8 109, i8 32, i8 72, i8 105, i8 116>, ptr %result.i78, align 16
  %result.i79 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %867 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %result.i79, 1
  %868 = insertvalue { ptr, ptr, ptr, i32 } %867, ptr undef, 2
  %869 = insertvalue { ptr, ptr, ptr, i32 } %868, i32 9, 3
  store ptr %result.i78, ptr %result.i79, align 8
  %870 = getelementptr i8, ptr %result.i79, i64 8
  store i32 14, ptr %870, align 4
  %871 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %872 = getelementptr i8, ptr %result.i79, i64 12
  store i32 15, ptr %872, align 4
  %873 = sub i64 %865, %864
  call void @print_benchmark_result({ ptr, ptr, ptr, i32 } %869, i32 %0, i64 %873)
  %result.i80 = call noalias dereferenceable_or_null(19) ptr @bump_malloc_inner(i64 noundef 19, ptr nonnull @current_ptr) #29
  store <18 x i8> <i8 32, i8 32, i8 32, i8 32, i8 86, i8 101, i8 114, i8 105, i8 102, i8 105, i8 99, i8 97, i8 116, i8 105, i8 111, i8 110, i8 58, i8 32>, ptr %result.i80, align 32
  %result.i81 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %874 = getelementptr inbounds i8, ptr %24, i64 8
  %875 = getelementptr inbounds i8, ptr %24, i64 24
  store ptr @String, ptr %24, align 8
  store ptr %result.i81, ptr %874, align 8
  store i32 9, ptr %875, align 8
  %876 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %24)
  store ptr %result.i80, ptr %result.i81, align 8
  %877 = getelementptr i8, ptr %result.i81, i64 8
  store i32 18, ptr %877, align 4
  %878 = getelementptr i8, ptr %result.i81, i64 12
  store i32 19, ptr %878, align 4
  %879 = load i160, ptr %874, align 8
  %880 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %.sroa.3.8.extract.trunc.i332 = trunc i160 %879 to i64
  %881 = inttoptr i64 %.sroa.3.8.extract.trunc.i332 to ptr
  %882 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %883 = getelementptr i8, ptr %881, i64 8
  %884 = load i32, ptr %883, align 4
  %885 = add i32 %884, 1
  %886 = sext i32 %885 to i64
  %result.i.i461 = call noalias ptr @bump_malloc_inner(i64 noundef %886, ptr nonnull @current_ptr) #29
  %887 = load i32, ptr %883, align 4
  %888 = icmp sgt i32 %887, 0
  br i1 %888, label %.lr.ph.i, label %String_c_string_.exit

.lr.ph.i:                                         ; preds = %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit
  %889 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %890 = load ptr, ptr %881, align 8
  %891 = zext nneg i32 %887 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i461, ptr align 1 %890, i64 %891, i1 false)
  br label %String_c_string_.exit

String_c_string_.exit:                            ; preds = %.lr.ph.i, %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit
  %892 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %893 = sext i32 %887 to i64
  %894 = getelementptr i8, ptr %result.i.i461, i64 %893
  store i8 0, ptr %894, align 1
  %puts.i = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i461)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %result.i82 = call noalias dereferenceable_or_null(5) ptr @bump_malloc_inner(i64 noundef 5, ptr nonnull @current_ptr) #29
  %. = select i1 %866, <4 x i8> <i8 80, i8 65, i8 83, i8 83>, <4 x i8> <i8 70, i8 65, i8 73, i8 76>
  %.238 = select i1 %866, ptr %25, ptr %26
  store <4 x i8> %., ptr %result.i82, align 4
  %result.i103 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %.238.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v = select i1 %866, ptr %25, ptr %26
  %.238.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel = getelementptr inbounds i8, ptr %.238.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v, i64 8
  %.238.sroa.sel371.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v = select i1 %866, ptr %25, ptr %26
  %.238.sroa.sel371.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel = getelementptr inbounds i8, ptr %.238.sroa.sel371.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v, i64 24
  store ptr @String, ptr %.238, align 8
  store ptr %result.i103, ptr %.238.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  store i32 9, ptr %.238.sroa.sel371.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  %895 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %.238)
  store ptr %result.i82, ptr %result.i103, align 8
  %896 = getelementptr i8, ptr %result.i103, i64 8
  store i32 4, ptr %896, align 4
  %897 = getelementptr i8, ptr %result.i103, i64 12
  store i32 5, ptr %897, align 4
  %898 = load i160, ptr %.238.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  %899 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %.sroa.3.8.extract.trunc.i351 = trunc i160 %898 to i64
  %900 = inttoptr i64 %.sroa.3.8.extract.trunc.i351 to ptr
  %901 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %902 = getelementptr i8, ptr %900, i64 8
  %903 = load i32, ptr %902, align 4
  %904 = add i32 %903, 1
  %905 = sext i32 %904 to i64
  %result.i.i477 = call noalias ptr @bump_malloc_inner(i64 noundef %905, ptr nonnull @current_ptr) #29
  %906 = load i32, ptr %902, align 4
  %907 = icmp sgt i32 %906, 0
  br i1 %907, label %.lr.ph.i478, label %String_c_string_.exit482

.lr.ph.i478:                                      ; preds = %String_c_string_.exit
  %908 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %909 = load ptr, ptr %900, align 8
  %910 = zext nneg i32 %906 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i477, ptr align 1 %909, i64 %910, i1 false)
  br label %String_c_string_.exit482

String_c_string_.exit482:                         ; preds = %.lr.ph.i478, %String_c_string_.exit
  %911 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %912 = sext i32 %906 to i64
  %913 = getelementptr i8, ptr %result.i.i477, i64 %912
  store i8 0, ptr %913, align 1
  %puts.i367 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i477)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  ret void
}

define void @benchmark_get_random_miss(i32 %0) local_unnamed_addr {
  %2 = alloca [0 x ptr], align 8
  %3 = alloca [1 x ptr], align 8
  %4 = alloca { ptr }, align 8
  %5 = alloca [1 x ptr], align 8
  %6 = alloca { ptr }, align 8
  %7 = alloca [1 x ptr], align 8
  %8 = alloca { ptr }, align 8
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = alloca [3 x ptr], align 8
  %11 = alloca [2 x ptr], align 8
  %12 = alloca { ptr, ptr }, align 8
  %13 = alloca [1 x ptr], align 8
  %14 = alloca { ptr }, align 8
  %15 = alloca [1 x ptr], align 8
  %16 = alloca { ptr }, align 8
  %17 = alloca { ptr, ptr, ptr, i32 }, align 8
  %18 = alloca [2 x ptr], align 8
  %19 = alloca { ptr, ptr }, align 8
  %20 = alloca [1 x ptr], align 8
  %21 = alloca { ptr }, align 8
  %22 = alloca [1 x ptr], align 8
  %23 = alloca { ptr }, align 8
  %oldProtect.i50 = alloca i32, align 4
  %oldProtect.i = alloca i32, align 4
  %24 = alloca { ptr, ptr, ptr, i32 }, align 8
  %25 = alloca { ptr, ptr, ptr, i32 }, align 8
  %26 = alloca { ptr, ptr, ptr, i32 }, align 8
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  %29 = alloca { ptr, ptr, ptr, i32 }, align 8
  %result.i = tail call noalias dereferenceable_or_null(80) ptr @bump_malloc_inner(i64 noundef 80, ptr nonnull @current_ptr) #29
  store ptr @_parameterization_Ptri32, ptr %result.i, align 8
  %30 = getelementptr i8, ptr %result.i, i64 8
  store ptr @_parameterization_Ptri32, ptr %30, align 8
  %31 = getelementptr i8, ptr %result.i, i64 16
  store ptr @_parameterization_PairPtri32._Ptri32, ptr %31, align 8
  %32 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %result.i)
  %result.i47 = tail call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %oldProtect.i)
  %result.i48 = call i32 @VirtualProtect(ptr %result.i47, i64 16, i32 64, ptr nonnull %oldProtect.i) #16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %oldProtect.i)
  call void @llvm.init.trampoline(ptr %result.i47, ptr nonnull @xckklmlpex, ptr nonnull @i32_hasher)
  %ret.i = call ptr @llvm.adjust.trampoline(ptr readonly %result.i47) #31
  %33 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i47)
  %result.i49 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %oldProtect.i50)
  %result.i51 = call i32 @VirtualProtect(ptr %result.i49, i64 16, i32 64, ptr nonnull %oldProtect.i50) #16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %oldProtect.i50)
  call void @llvm.init.trampoline(ptr %result.i49, ptr nonnull @jplekxbvrg, ptr nonnull @i32_eq)
  %ret.i52 = call ptr @llvm.adjust.trampoline(ptr readonly %result.i49) #31
  %34 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i49)
  %35 = getelementptr i8, ptr %result.i, i64 64
  store ptr %ret.i, ptr %35, align 8
  %36 = getelementptr i8, ptr %result.i, i64 72
  store ptr %ret.i52, ptr %36, align 8
  %result.i.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %37 = getelementptr i8, ptr %result.i.i, i64 16
  store ptr @_parameterization_Nil, ptr %37, align 8
  %result.i4.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %38 = getelementptr i8, ptr %result.i4.i, i64 16
  store ptr @_parameterization_Ptri32, ptr %38, align 8
  %39 = getelementptr i8, ptr %result.i4.i, i64 8
  store ptr @_parameterization_Ptri32, ptr %39, align 8
  %40 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i4.i)
  store ptr @Entry, ptr %result.i4.i, align 8
  %41 = getelementptr i8, ptr %result.i.i, i64 8
  store ptr %result.i4.i, ptr %41, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i)
  store ptr @union_typ, ptr %result.i.i, align 8
  %result.i5.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i, ptr %result.i5.i, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i5.i)
  %44 = getelementptr i8, ptr %result.i5.i, i64 16
  store i32 16, ptr %44, align 4
  %45 = getelementptr i8, ptr %result.i5.i, i64 20
  store i32 16, ptr %45, align 4
  %result.i.i.i = call noalias dereferenceable_or_null(512) ptr @bump_malloc_inner(i64 noundef 512, ptr nonnull @current_ptr) #29
  %46 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %47 = getelementptr i8, ptr %result.i5.i, i64 8
  store ptr %result.i.i.i, ptr %47, align 8
  %48 = getelementptr i8, ptr %result.i, i64 24
  store ptr @Array, ptr %48, align 8
  %49 = getelementptr i8, ptr %result.i, i64 32
  store ptr %result.i5.i, ptr %49, align 8
  %50 = getelementptr i8, ptr %result.i, i64 40
  %51 = getelementptr i8, ptr %result.i, i64 48
  store i32 9, ptr %51, align 4
  %52 = getelementptr i8, ptr %result.i, i64 60
  %53 = call ptr @llvm.invariant.start.p0(i64 40, ptr nonnull @PRNG)
  %54 = icmp sgt i32 %0, 0
  br i1 %54, label %._crit_edge.preheader, label %._crit_edge1._crit_edge.thread

._crit_edge.preheader:                            ; preds = %1
  %55 = getelementptr inbounds i8, ptr %17, i64 8
  %56 = getelementptr inbounds i8, ptr %17, i64 24
  %57 = getelementptr inbounds i8, ptr %17, i64 16
  %58 = getelementptr inbounds i8, ptr %18, i64 8
  %59 = getelementptr inbounds i8, ptr %19, i64 8
  %60 = getelementptr i8, ptr %result.i, i64 56
  %61 = getelementptr inbounds i8, ptr %9, i64 8
  %62 = getelementptr inbounds i8, ptr %9, i64 24
  %63 = getelementptr inbounds i8, ptr %9, i64 16
  %64 = getelementptr inbounds i8, ptr %10, i64 8
  %65 = getelementptr inbounds i8, ptr %10, i64 16
  %66 = getelementptr inbounds i8, ptr %11, i64 8
  %67 = getelementptr inbounds i8, ptr %12, i64 8
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.preheader, %HashMap_insert_internal_keyK_valueV_hashPtri32.exit
  %68 = phi i32 [ %71, %HashMap_insert_internal_keyK_valueV_hashPtri32.exit ], [ 789, %._crit_edge.preheader ]
  %.reg2mem91.0269 = phi i32 [ %695, %HashMap_insert_internal_keyK_valueV_hashPtri32.exit ], [ 0, %._crit_edge.preheader ]
  %69 = mul i32 %68, 1103515245
  %70 = add i32 %69, 12345
  %71 = and i32 %70, 2147483647
  %72 = add nuw i32 %71, 1
  %.sroa.045.0.insert.ext = zext nneg i32 %71 to i160
  %73 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.045.0.insert.ext, 1
  %.sroa.042.0.insert.ext = zext i32 %72 to i160
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %74 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %75 = load ptr, ptr %48, align 8
  %76 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %75, 0
  %77 = load ptr, ptr %49, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } %76, ptr %77, 1
  %79 = load ptr, ptr %50, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } %78, ptr %79, 2
  %81 = load i32, ptr %51, align 4
  %82 = insertvalue { ptr, ptr, ptr, i32 } %80, i32 %81, 3
  %hash_coef_ptr.i.i42.i = getelementptr i8, ptr %75, i64 8
  %tbl_size_ptr.i.i43.i = getelementptr i8, ptr %75, i64 16
  %offset_tbl_ptr.i.i44.i = getelementptr i8, ptr %75, i64 40
  %hash_coef.i.i45.i = load i64, ptr %hash_coef_ptr.i.i42.i, align 4
  %tbl_size.i.i46.i = load i64, ptr %tbl_size_ptr.i.i43.i, align 4
  %offset_tbl.i.i47.i = load ptr, ptr %offset_tbl_ptr.i.i44.i, align 8
  %product.i.i.i48.i = mul i64 %hash_coef.i.i45.i, -5261542750394134544
  %shifted.i.i.i49.i = lshr i64 %product.i.i.i48.i, 32
  %xored.i.i.i50.i = xor i64 %shifted.i.i.i49.i, %product.i.i.i48.i
  %hash.i.i.i51.i = and i64 %xored.i.i.i50.i, %tbl_size.i.i46.i
  %offset_ptr.i.i52.i = getelementptr i32, ptr %offset_tbl.i.i47.i, i64 %hash.i.i.i51.i
  %offset.i.i53.i = load i32, ptr %offset_ptr.i.i52.i, align 4
  %eq.i.i = icmp eq i32 %81, %offset.i.i53.i
  call void @llvm.assume(i1 %eq.i.i) #30
  %83 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %84 = call ptr @llvm.invariant.start.p0(i64 600, ptr %75)
  %85 = sext i32 %81 to i64
  %86 = getelementptr ptr, ptr %75, i64 %85
  %87 = getelementptr i8, ptr %86, i64 64
  %88 = load ptr, ptr %87, align 8
  %89 = call ptr %88({ ptr, ptr, ptr, i32 } %82, ptr nonnull %2)
  %90 = call i32 %89({ ptr, ptr, ptr, i32 } %82, { ptr, ptr, ptr, i32 } %82, ptr nonnull %2)
  %91 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %92 = load ptr, ptr %48, align 8
  %93 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %92, 0
  %94 = load ptr, ptr %49, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %93, ptr %94, 1
  %96 = load ptr, ptr %50, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %96, 2
  %98 = load i32, ptr %51, align 4
  %99 = insertvalue { ptr, ptr, ptr, i32 } %97, i32 %98, 3
  %hash_coef_ptr.i.i56.i = getelementptr i8, ptr %92, i64 8
  %tbl_size_ptr.i.i57.i = getelementptr i8, ptr %92, i64 16
  %offset_tbl_ptr.i.i58.i = getelementptr i8, ptr %92, i64 40
  %hash_coef.i.i59.i = load i64, ptr %hash_coef_ptr.i.i56.i, align 4
  %tbl_size.i.i60.i = load i64, ptr %tbl_size_ptr.i.i57.i, align 4
  %offset_tbl.i.i61.i = load ptr, ptr %offset_tbl_ptr.i.i58.i, align 8
  %product.i.i.i62.i = mul i64 %hash_coef.i.i59.i, -5261542750394134544
  %shifted.i.i.i63.i = lshr i64 %product.i.i.i62.i, 32
  %xored.i.i.i64.i = xor i64 %shifted.i.i.i63.i, %product.i.i.i62.i
  %hash.i.i.i65.i = and i64 %xored.i.i.i64.i, %tbl_size.i.i60.i
  %offset_ptr.i.i66.i = getelementptr i32, ptr %offset_tbl.i.i61.i, i64 %hash.i.i.i65.i
  %offset.i.i67.i = load i32, ptr %offset_ptr.i.i66.i, align 4
  %eq.i70.i = icmp eq i32 %98, %offset.i.i67.i
  call void @llvm.assume(i1 %eq.i70.i) #30
  %100 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %101 = call ptr @llvm.invariant.start.p0(i64 600, ptr %92)
  %102 = sext i32 %98 to i64
  %103 = getelementptr ptr, ptr %92, i64 %102
  %104 = getelementptr i8, ptr %103, i64 64
  %105 = load ptr, ptr %104, align 8
  %106 = call ptr %105({ ptr, ptr, ptr, i32 } %99, ptr nonnull %2)
  %107 = call i32 %106({ ptr, ptr, ptr, i32 } %99, { ptr, ptr, ptr, i32 } %99, ptr nonnull %2)
  %108 = icmp eq i32 %107, 0
  %109 = load i32, ptr %52, align 4
  %110 = mul i32 %109, 10
  %111 = add i32 %110, 10
  %112 = mul i32 %90, 7
  %113 = icmp sge i32 %111, %112
  %114 = or i1 %108, %113
  br i1 %114, label %115, label %HashMap_insert_keyK_valueV.exit

115:                                              ; preds = %._crit_edge
  %116 = shl i32 %90, 1
  %117 = call i32 @llvm.smax.i32(i32 %116, i32 16)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %20)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %21)
  %118 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %119 = load ptr, ptr %48, align 8
  %120 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %119, 0
  %121 = load ptr, ptr %49, align 8
  %122 = insertvalue { ptr, ptr, ptr, i32 } %120, ptr %121, 1
  %123 = load ptr, ptr %50, align 8
  %124 = insertvalue { ptr, ptr, ptr, i32 } %122, ptr %123, 2
  %125 = load i32, ptr %51, align 4
  %126 = insertvalue { ptr, ptr, ptr, i32 } %124, i32 %125, 3
  %hash_coef_ptr.i.i39.i = getelementptr i8, ptr %119, i64 8
  %tbl_size_ptr.i.i40.i = getelementptr i8, ptr %119, i64 16
  %offset_tbl_ptr.i.i41.i = getelementptr i8, ptr %119, i64 40
  %hash_coef.i.i42.i = load i64, ptr %hash_coef_ptr.i.i39.i, align 4
  %tbl_size.i.i43.i = load i64, ptr %tbl_size_ptr.i.i40.i, align 4
  %offset_tbl.i.i44.i = load ptr, ptr %offset_tbl_ptr.i.i41.i, align 8
  %product.i.i.i45.i = mul i64 %hash_coef.i.i42.i, -5261542750394134544
  %shifted.i.i.i46.i = lshr i64 %product.i.i.i45.i, 32
  %xored.i.i.i47.i = xor i64 %shifted.i.i.i46.i, %product.i.i.i45.i
  %hash.i.i.i48.i = and i64 %xored.i.i.i47.i, %tbl_size.i.i43.i
  %offset_ptr.i.i49.i = getelementptr i32, ptr %offset_tbl.i.i44.i, i64 %hash.i.i.i48.i
  %offset.i.i50.i = load i32, ptr %offset_ptr.i.i49.i, align 4
  %eq.i.i637 = icmp eq i32 %125, %offset.i.i50.i
  call void @llvm.assume(i1 %eq.i.i637) #30
  %127 = load ptr, ptr %result.i, align 8
  %128 = load ptr, ptr %30, align 8
  %result.i.i638 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %129 = getelementptr i8, ptr %result.i.i638, i64 16
  store ptr @_parameterization_Nil, ptr %129, align 8
  %result.i66.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %130 = getelementptr i8, ptr %result.i66.i, i64 16
  store ptr %128, ptr %130, align 8
  %131 = getelementptr i8, ptr %result.i66.i, i64 8
  store ptr %127, ptr %131, align 8
  %132 = getelementptr i8, ptr %result.i66.i, i64 24
  store ptr null, ptr %132, align 8
  %133 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i66.i)
  store ptr @Entry, ptr %result.i66.i, align 8
  %134 = getelementptr i8, ptr %result.i.i638, i64 8
  store ptr %result.i66.i, ptr %134, align 8
  %135 = getelementptr i8, ptr %result.i.i638, i64 24
  store ptr null, ptr %135, align 8
  %136 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i638)
  store ptr @union_typ, ptr %result.i.i638, align 8
  %result.i67.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i638, ptr %result.i67.i, align 8
  %137 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i67.i)
  %138 = getelementptr i8, ptr %result.i67.i, i64 16
  store i32 %117, ptr %138, align 4
  %139 = getelementptr i8, ptr %result.i67.i, i64 20
  store i32 %117, ptr %139, align 4
  %140 = zext nneg i32 %117 to i64
  %141 = shl nuw nsw i64 %140, 5
  %result.i.i.i639 = call noalias ptr @bump_malloc_inner(i64 noundef %141, ptr nonnull @current_ptr) #29
  %142 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %143 = getelementptr i8, ptr %result.i67.i, i64 8
  store ptr %result.i.i.i639, ptr %143, align 8
  store ptr @Array, ptr %48, align 8
  store ptr %result.i67.i, ptr %49, align 8
  store i32 9, ptr %51, align 4
  store i32 0, ptr %60, align 4
  store i32 0, ptr %52, align 4
  %invariant.gep.i = getelementptr i8, ptr %119, i64 64
  %144 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %145 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %146 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %119)
  %147 = sext i32 %125 to i64
  %gep.i792 = getelementptr ptr, ptr %invariant.gep.i, i64 %147
  %148 = load ptr, ptr %gep.i792, align 8
  %149 = call ptr %148({ ptr, ptr, ptr, i32 } %126, ptr nonnull %2)
  %150 = call i32 %149({ ptr, ptr, ptr, i32 } %126, { ptr, ptr, ptr, i32 } %126, ptr nonnull %2)
  %151 = icmp sgt i32 %150, 0
  br i1 %151, label %.lr.ph, label %HashMap_resize_new_capacityPtri32.exit

.lr.ph:                                           ; preds = %115
  %invariant.gep172.i = getelementptr i8, ptr %119, i64 120
  %152 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %gep173.i = getelementptr ptr, ptr %invariant.gep172.i, i64 %147
  br label %153

153:                                              ; preds = %.lr.ph, %._crit_edge3.i
  %.reg2mem31.0.i793 = phi i32 [ 0, %.lr.ph ], [ %420, %._crit_edge3.i ]
  store ptr @_parameterization_Ptri32, ptr %20, align 8
  %154 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %20)
  %155 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %119)
  %156 = load ptr, ptr %gep173.i, align 8
  store ptr @i32_typ, ptr %21, align 8
  %157 = call ptr %156({ ptr, ptr, ptr, i32 } %126, ptr nonnull %21)
  %158 = call { ptr, i160 } %157({ ptr, ptr, ptr, i32 } %126, { ptr, ptr, ptr, i32 } %126, ptr nonnull %20, i32 %.reg2mem31.0.i793)
  %.fca.0.extract30.i = extractvalue { ptr, i160 } %158, 0
  %159 = icmp ne ptr %.fca.0.extract30.i, @nil_typ
  %160 = icmp ne ptr %.fca.0.extract30.i, null
  %.not37.i = and i1 %159, %160
  br i1 %.not37.i, label %161, label %._crit_edge3.i

161:                                              ; preds = %153
  %.fca.1.extract32.i = extractvalue { ptr, i160 } %158, 1
  %.sroa.5164.8.extract.trunc.i = trunc i160 %.fca.1.extract32.i to i64
  %162 = inttoptr i64 %.sroa.5164.8.extract.trunc.i to ptr
  %.sroa.9.8.extract.shift.i = lshr i160 %.fca.1.extract32.i, 64
  %.sroa.9.8.extract.trunc.i = trunc i160 %.sroa.9.8.extract.shift.i to i64
  %163 = inttoptr i64 %.sroa.9.8.extract.trunc.i to ptr
  %hash_coef_ptr.i.i83.i = getelementptr i8, ptr %.fca.0.extract30.i, i64 8
  %tbl_size_ptr.i.i84.i = getelementptr i8, ptr %.fca.0.extract30.i, i64 16
  %offset_tbl_ptr.i.i85.i = getelementptr i8, ptr %.fca.0.extract30.i, i64 40
  %hash_coef.i.i86.i = load i64, ptr %hash_coef_ptr.i.i83.i, align 4
  %tbl_size.i.i87.i = load i64, ptr %tbl_size_ptr.i.i84.i, align 4
  %offset_tbl.i.i88.i = load ptr, ptr %offset_tbl_ptr.i.i85.i, align 8
  %product.i.i.i89.i = mul i64 %hash_coef.i.i86.i, 4015701072841558310
  %shifted.i.i.i90.i = lshr i64 %product.i.i.i89.i, 32
  %xored.i.i.i91.i = xor i64 %shifted.i.i.i90.i, %product.i.i.i89.i
  %hash.i.i.i92.i = and i64 %xored.i.i.i91.i, %tbl_size.i.i87.i
  %offset_ptr.i.i93.i = getelementptr i32, ptr %offset_tbl.i.i88.i, i64 %hash.i.i.i92.i
  %offset.i.i94.i = load i32, ptr %offset_ptr.i.i93.i, align 4
  %164 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract30.i, 0
  %165 = insertvalue { ptr, ptr, ptr, i32 } %164, ptr %162, 1
  %166 = insertvalue { ptr, ptr, ptr, i32 } %165, ptr %163, 2
  %167 = insertvalue { ptr, ptr, ptr, i32 } %166, i32 %offset.i.i94.i, 3
  %168 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %169 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %170 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract30.i)
  %171 = sext i32 %offset.i.i94.i to i64
  %172 = getelementptr ptr, ptr %.fca.0.extract30.i, i64 %171
  %173 = getelementptr i8, ptr %172, i64 56
  %174 = load ptr, ptr %173, align 8
  %175 = call ptr %174({ ptr, ptr, ptr, i32 } %167, ptr nonnull %2)
  %176 = call { ptr, i160 } %175({ ptr, ptr, ptr, i32 } %167, { ptr, ptr, ptr, i32 } %167, ptr nonnull %2)
  %.fca.0.extract23.i = extractvalue { ptr, i160 } %176, 0
  %177 = getelementptr i8, ptr %.fca.0.extract23.i, i64 8
  %178 = getelementptr i8, ptr %.fca.0.extract23.i, i64 16
  %179 = getelementptr i8, ptr %.fca.0.extract23.i, i64 24
  %180 = getelementptr i8, ptr %.fca.0.extract23.i, i64 32
  %181 = load i64, ptr %177, align 4
  %182 = load i64, ptr %178, align 4
  %183 = load ptr, ptr %179, align 8
  %184 = load ptr, ptr %180, align 8
  %result.i96.i = call i1 %183(i64 %182, i64 %181, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %184) #3
  br i1 %result.i96.i, label %._crit_edge3.i, label %185

185:                                              ; preds = %161
  %result.i97.i = call i1 %183(i64 %182, i64 %181, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr readonly %184) #3
  br i1 %result.i97.i, label %186, label %._crit_edge3.i

186:                                              ; preds = %185
  %187 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %188 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %189 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract30.i)
  %190 = getelementptr i8, ptr %172, i64 48
  %191 = load ptr, ptr %190, align 8
  %192 = call ptr %191({ ptr, ptr, ptr, i32 } %167, ptr nonnull %2)
  %193 = call { ptr, i160 } %192({ ptr, ptr, ptr, i32 } %167, { ptr, ptr, ptr, i32 } %167, ptr nonnull %2)
  %194 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %195 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %196 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract30.i)
  %197 = getelementptr i8, ptr %172, i64 64
  %198 = load ptr, ptr %197, align 8
  %199 = call ptr %198({ ptr, ptr, ptr, i32 } %167, ptr nonnull %2)
  %200 = call i32 %199({ ptr, ptr, ptr, i32 } %167, { ptr, ptr, ptr, i32 } %167, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %9)
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %10)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %11)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %12)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %201 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %202 = load ptr, ptr %48, align 8
  %203 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %202, 0
  %204 = load ptr, ptr %49, align 8
  %205 = insertvalue { ptr, ptr, ptr, i32 } %203, ptr %204, 1
  %206 = load ptr, ptr %50, align 8
  %207 = insertvalue { ptr, ptr, ptr, i32 } %205, ptr %206, 2
  %208 = load i32, ptr %51, align 4
  %209 = insertvalue { ptr, ptr, ptr, i32 } %207, i32 %208, 3
  %hash_coef_ptr.i.i51.i1003 = getelementptr i8, ptr %202, i64 8
  %tbl_size_ptr.i.i52.i1004 = getelementptr i8, ptr %202, i64 16
  %offset_tbl_ptr.i.i53.i1005 = getelementptr i8, ptr %202, i64 40
  %hash_coef.i.i54.i1006 = load i64, ptr %hash_coef_ptr.i.i51.i1003, align 4
  %tbl_size.i.i55.i1007 = load i64, ptr %tbl_size_ptr.i.i52.i1004, align 4
  %offset_tbl.i.i56.i1008 = load ptr, ptr %offset_tbl_ptr.i.i53.i1005, align 8
  %product.i.i.i57.i1009 = mul i64 %hash_coef.i.i54.i1006, -5261542750394134544
  %shifted.i.i.i58.i1010 = lshr i64 %product.i.i.i57.i1009, 32
  %xored.i.i.i59.i1011 = xor i64 %shifted.i.i.i58.i1010, %product.i.i.i57.i1009
  %hash.i.i.i60.i1012 = and i64 %xored.i.i.i59.i1011, %tbl_size.i.i55.i1007
  %offset_ptr.i.i61.i1013 = getelementptr i32, ptr %offset_tbl.i.i56.i1008, i64 %hash.i.i.i60.i1012
  %offset.i.i62.i1014 = load i32, ptr %offset_ptr.i.i61.i1013, align 4
  %eq.i.i1015 = icmp eq i32 %208, %offset.i.i62.i1014
  call void @llvm.assume(i1 %eq.i.i1015) #30
  %210 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %211 = call ptr @llvm.invariant.start.p0(i64 600, ptr %202)
  %212 = sext i32 %208 to i64
  %213 = getelementptr ptr, ptr %202, i64 %212
  %214 = getelementptr i8, ptr %213, i64 64
  %215 = load ptr, ptr %214, align 8
  %216 = call ptr %215({ ptr, ptr, ptr, i32 } %209, ptr nonnull %2)
  %217 = call i32 %216({ ptr, ptr, ptr, i32 } %209, { ptr, ptr, ptr, i32 } %209, ptr nonnull %2)
  %218 = add i32 %217, -1
  %219 = and i32 %218, %200
  %220 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  br label %221

221:                                              ; preds = %270, %186
  %spec.store.select.i10501059 = phi i32 [ %spec.store.select.i1050, %270 ], [ -1, %186 ]
  %.0..0..0..i1016 = phi i32 [ %288, %270 ], [ %219, %186 ]
  %222 = load ptr, ptr %48, align 8
  %223 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %222, 0
  %224 = load ptr, ptr %49, align 8
  %225 = insertvalue { ptr, ptr, ptr, i32 } %223, ptr %224, 1
  %226 = load ptr, ptr %50, align 8
  %227 = insertvalue { ptr, ptr, ptr, i32 } %225, ptr %226, 2
  %228 = load i32, ptr %51, align 4
  %229 = insertvalue { ptr, ptr, ptr, i32 } %227, i32 %228, 3
  %hash_coef_ptr.i.i65.i1017 = getelementptr i8, ptr %222, i64 8
  %tbl_size_ptr.i.i66.i1018 = getelementptr i8, ptr %222, i64 16
  %offset_tbl_ptr.i.i67.i1019 = getelementptr i8, ptr %222, i64 40
  %hash_coef.i.i68.i1020 = load i64, ptr %hash_coef_ptr.i.i65.i1017, align 4
  %tbl_size.i.i69.i1021 = load i64, ptr %tbl_size_ptr.i.i66.i1018, align 4
  %offset_tbl.i.i70.i1022 = load ptr, ptr %offset_tbl_ptr.i.i67.i1019, align 8
  %product.i.i.i71.i1023 = mul i64 %hash_coef.i.i68.i1020, -5261542750394134544
  %shifted.i.i.i72.i1024 = lshr i64 %product.i.i.i71.i1023, 32
  %xored.i.i.i73.i1025 = xor i64 %shifted.i.i.i72.i1024, %product.i.i.i71.i1023
  %hash.i.i.i74.i1026 = and i64 %xored.i.i.i73.i1025, %tbl_size.i.i69.i1021
  %offset_ptr.i.i75.i1027 = getelementptr i32, ptr %offset_tbl.i.i70.i1022, i64 %hash.i.i.i74.i1026
  %offset.i.i76.i1028 = load i32, ptr %offset_ptr.i.i75.i1027, align 4
  %eq.i79.i1029 = icmp eq i32 %228, %offset.i.i76.i1028
  call void @llvm.assume(i1 %eq.i79.i1029) #30
  %230 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  store ptr @_parameterization_Ptri32, ptr %3, align 8
  %231 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %3)
  %232 = call ptr @llvm.invariant.start.p0(i64 600, ptr %222)
  %233 = sext i32 %228 to i64
  %234 = getelementptr ptr, ptr %222, i64 %233
  %235 = getelementptr i8, ptr %234, i64 120
  %236 = load ptr, ptr %235, align 8
  store ptr @i32_typ, ptr %4, align 8
  %237 = call ptr %236({ ptr, ptr, ptr, i32 } %229, ptr nonnull %4)
  %238 = call { ptr, i160 } %237({ ptr, ptr, ptr, i32 } %229, { ptr, ptr, ptr, i32 } %229, ptr nonnull %3, i32 %.0..0..0..i1016)
  %.fca.0.extract36.i1030 = extractvalue { ptr, i160 } %238, 0
  %239 = icmp eq ptr %.fca.0.extract36.i1030, @nil_typ
  %240 = icmp eq ptr %.fca.0.extract36.i1030, null
  %241 = or i1 %239, %240
  br i1 %241, label %289, label %242

242:                                              ; preds = %221
  %.fca.1.extract38.i1031 = extractvalue { ptr, i160 } %238, 1
  %.sroa.5.8.extract.shift.i1032 = lshr i160 %.fca.1.extract38.i1031, 64
  %.sroa.5.8.extract.trunc.i1033 = trunc i160 %.sroa.5.8.extract.shift.i1032 to i64
  %.sroa.2.8.extract.trunc165.i1034 = trunc i160 %.fca.1.extract38.i1031 to i64
  %243 = inttoptr i64 %.sroa.2.8.extract.trunc165.i1034 to ptr
  %244 = inttoptr i64 %.sroa.5.8.extract.trunc.i1033 to ptr
  %hash_coef_ptr.i.i81.i1035 = getelementptr i8, ptr %.fca.0.extract36.i1030, i64 8
  %tbl_size_ptr.i.i82.i1036 = getelementptr i8, ptr %.fca.0.extract36.i1030, i64 16
  %offset_tbl_ptr.i.i83.i1037 = getelementptr i8, ptr %.fca.0.extract36.i1030, i64 40
  %hash_coef.i.i84.i1038 = load i64, ptr %hash_coef_ptr.i.i81.i1035, align 4
  %tbl_size.i.i85.i1039 = load i64, ptr %tbl_size_ptr.i.i82.i1036, align 4
  %offset_tbl.i.i86.i1040 = load ptr, ptr %offset_tbl_ptr.i.i83.i1037, align 8
  %product.i.i.i87.i1041 = mul i64 %hash_coef.i.i84.i1038, 4015701072841558310
  %shifted.i.i.i88.i1042 = lshr i64 %product.i.i.i87.i1041, 32
  %xored.i.i.i89.i1043 = xor i64 %shifted.i.i.i88.i1042, %product.i.i.i87.i1041
  %hash.i.i.i90.i1044 = and i64 %xored.i.i.i89.i1043, %tbl_size.i.i85.i1039
  %offset_ptr.i.i91.i1045 = getelementptr i32, ptr %offset_tbl.i.i86.i1040, i64 %hash.i.i.i90.i1044
  %offset.i.i92.i1046 = load i32, ptr %offset_ptr.i.i91.i1045, align 4
  %245 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract36.i1030, 0
  %246 = insertvalue { ptr, ptr, ptr, i32 } %245, ptr %243, 1
  %247 = insertvalue { ptr, ptr, ptr, i32 } %246, ptr %244, 2
  %248 = insertvalue { ptr, ptr, ptr, i32 } %247, i32 %offset.i.i92.i1046, 3
  %249 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %250 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %251 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i1030)
  %252 = sext i32 %offset.i.i92.i1046 to i64
  %253 = getelementptr ptr, ptr %.fca.0.extract36.i1030, i64 %252
  %254 = getelementptr i8, ptr %253, i64 64
  %255 = load ptr, ptr %254, align 8
  %256 = call ptr %255({ ptr, ptr, ptr, i32 } %248, ptr nonnull %2)
  %257 = call i32 %256({ ptr, ptr, ptr, i32 } %248, { ptr, ptr, ptr, i32 } %248, ptr nonnull %2)
  %258 = icmp eq i32 %257, %200
  %259 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %260 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %261 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i1030)
  %262 = getelementptr i8, ptr %253, i64 48
  %263 = load ptr, ptr %262, align 8
  %264 = call ptr %263({ ptr, ptr, ptr, i32 } %248, ptr nonnull %2)
  %265 = call { ptr, i160 } %264({ ptr, ptr, ptr, i32 } %248, { ptr, ptr, ptr, i32 } %248, ptr nonnull %2)
  %266 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %267 = load ptr, ptr %36, align 8
  %268 = call i1 %267({ ptr, i160 } %265, { ptr, i160 } %193)
  %269 = and i1 %258, %268
  br i1 %269, label %HashMap_find_slot_keyK_hashPtri32.exit1051, label %270

270:                                              ; preds = %242
  %271 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %272 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %273 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i1030)
  %274 = getelementptr i8, ptr %253, i64 56
  %275 = load ptr, ptr %274, align 8
  %276 = call ptr %275({ ptr, ptr, ptr, i32 } %248, ptr nonnull %2)
  %277 = call { ptr, i160 } %276({ ptr, ptr, ptr, i32 } %248, { ptr, ptr, ptr, i32 } %248, ptr nonnull %2)
  %.fca.0.extract15.i1047 = extractvalue { ptr, i160 } %277, 0
  %278 = getelementptr i8, ptr %.fca.0.extract15.i1047, i64 8
  %279 = getelementptr i8, ptr %.fca.0.extract15.i1047, i64 16
  %280 = getelementptr i8, ptr %.fca.0.extract15.i1047, i64 24
  %281 = getelementptr i8, ptr %.fca.0.extract15.i1047, i64 32
  %282 = load i64, ptr %278, align 4
  %283 = load i64, ptr %279, align 4
  %284 = load ptr, ptr %280, align 8
  %285 = load ptr, ptr %281, align 8
  %result.i.i1048 = call i1 %284(i64 %283, i64 %282, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %285) #3
  %286 = icmp eq i32 %spec.store.select.i10501059, -1
  %or.cond.i1049 = select i1 %result.i.i1048, i1 %286, i1 false
  %spec.store.select.i1050 = select i1 %or.cond.i1049, i32 %.0..0..0..i1016, i32 %spec.store.select.i10501059
  %287 = add i32 %.0..0..0..i1016, 1
  %288 = and i32 %287, %218
  br label %221

289:                                              ; preds = %221
  %290 = icmp eq i32 %spec.store.select.i10501059, -1
  %.pre1073 = select i1 %290, i32 %.0..0..0..i1016, i32 %spec.store.select.i10501059
  br label %HashMap_find_slot_keyK_hashPtri32.exit1051

HashMap_find_slot_keyK_hashPtri32.exit1051:       ; preds = %242, %289
  %291 = phi i32 [ %.pre1073, %289 ], [ %.0..0..0..i1016, %242 ]
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  %292 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %293 = load ptr, ptr %48, align 8
  %294 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %293, 0
  %295 = load ptr, ptr %49, align 8
  %296 = insertvalue { ptr, ptr, ptr, i32 } %294, ptr %295, 1
  %297 = load ptr, ptr %50, align 8
  %298 = insertvalue { ptr, ptr, ptr, i32 } %296, ptr %297, 2
  %299 = load i32, ptr %51, align 4
  %300 = insertvalue { ptr, ptr, ptr, i32 } %298, i32 %299, 3
  %hash_coef_ptr.i.i56.i824 = getelementptr i8, ptr %293, i64 8
  %tbl_size_ptr.i.i57.i825 = getelementptr i8, ptr %293, i64 16
  %offset_tbl_ptr.i.i58.i826 = getelementptr i8, ptr %293, i64 40
  %hash_coef.i.i59.i827 = load i64, ptr %hash_coef_ptr.i.i56.i824, align 4
  %tbl_size.i.i60.i828 = load i64, ptr %tbl_size_ptr.i.i57.i825, align 4
  %offset_tbl.i.i61.i829 = load ptr, ptr %offset_tbl_ptr.i.i58.i826, align 8
  %product.i.i.i62.i830 = mul i64 %hash_coef.i.i59.i827, -5261542750394134544
  %shifted.i.i.i63.i831 = lshr i64 %product.i.i.i62.i830, 32
  %xored.i.i.i64.i832 = xor i64 %shifted.i.i.i63.i831, %product.i.i.i62.i830
  %hash.i.i.i65.i833 = and i64 %xored.i.i.i64.i832, %tbl_size.i.i60.i828
  %offset_ptr.i.i66.i834 = getelementptr i32, ptr %offset_tbl.i.i61.i829, i64 %hash.i.i.i65.i833
  %offset.i.i67.i835 = load i32, ptr %offset_ptr.i.i66.i834, align 4
  %eq.i.i836 = icmp eq i32 %299, %offset.i.i67.i835
  call void @llvm.assume(i1 %eq.i.i836) #30
  store ptr @_parameterization_Ptri32, ptr %7, align 8
  %301 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %7)
  %302 = call ptr @llvm.invariant.start.p0(i64 600, ptr %293)
  %303 = sext i32 %299 to i64
  %304 = getelementptr ptr, ptr %293, i64 %303
  %305 = getelementptr i8, ptr %304, i64 120
  %306 = load ptr, ptr %305, align 8
  store ptr @i32_typ, ptr %8, align 8
  %307 = call ptr %306({ ptr, ptr, ptr, i32 } %300, ptr nonnull %8)
  %308 = call { ptr, i160 } %307({ ptr, ptr, ptr, i32 } %300, { ptr, ptr, ptr, i32 } %300, ptr nonnull %7, i32 %291)
  %.fca.0.extract2.i837 = extractvalue { ptr, i160 } %308, 0
  %309 = load ptr, ptr %result.i, align 8
  %310 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %311 = load ptr, ptr %30, align 8
  %312 = load ptr, ptr %309, align 8
  %313 = getelementptr i8, ptr %312, i64 48
  %314 = load ptr, ptr %313, align 8
  %315 = call { i64, i64 } %314(ptr nonnull %309)
  %316 = extractvalue { i64, i64 } %315, 0
  %317 = extractvalue { i64, i64 } %315, 1
  %318 = call i64 @llvm.umax.i64(i64 %317, i64 8)
  %319 = urem i64 16, %317
  %320 = icmp eq i64 %319, 0
  %321 = sub i64 %317, %319
  %322 = select i1 %320, i64 0, i64 %321
  %323 = add i64 %322, %316
  %324 = add i64 %323, 16
  %325 = and i64 %323, 7
  %326 = icmp eq i64 %325, 0
  %327 = sub nuw nsw i64 40, %325
  %328 = select i1 %326, i64 32, i64 %327
  %329 = add i64 %324, %328
  %330 = and i64 %329, 3
  %331 = icmp eq i64 %330, 0
  %332 = sub nuw nsw i64 8, %330
  %333 = select i1 %331, i64 4, i64 %332
  %334 = add i64 %333, %329
  %335 = urem i64 %334, %318
  %336 = icmp eq i64 %335, 0
  %337 = sub i64 %318, %335
  %338 = select i1 %336, i64 0, i64 %337
  %339 = add i64 %334, %338
  %result.i.i838 = call noalias ptr @bump_malloc_inner(i64 noundef %339, ptr nonnull @current_ptr) #29
  store ptr %309, ptr %result.i.i838, align 8
  %340 = getelementptr i8, ptr %result.i.i838, i64 8
  store ptr %311, ptr %340, align 8
  %341 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i.i838)
  store ptr @Entry, ptr %9, align 8
  store ptr %result.i.i838, ptr %61, align 8
  store i32 9, ptr %62, align 8
  %342 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %9)
  %343 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Entry, ptr undef, ptr undef, i32 undef }, ptr %result.i.i838, 1
  %344 = insertvalue { ptr, ptr, ptr, i32 } %343, ptr undef, 2
  %345 = insertvalue { ptr, ptr, ptr, i32 } %344, i32 9, 3
  %346 = load ptr, ptr %result.i, align 8
  %347 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %348 = load ptr, ptr %30, align 8
  store ptr %346, ptr %10, align 8
  store ptr %348, ptr %64, align 8
  store ptr @_parameterization_Ptri32, ptr %65, align 8
  %349 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %10)
  %350 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %351 = load i64, ptr %177, align 4
  %352 = load i64, ptr %178, align 4
  %353 = load ptr, ptr %179, align 8
  %354 = load ptr, ptr %180, align 8
  %result.i.i.i839 = call i1 %353(i64 %352, i64 %351, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr readonly %354) #3
  %355 = select i1 %result.i.i.i839, i64 10, i64 9
  %gep965 = getelementptr [14 x ptr], ptr getelementptr inbounds (i8, ptr @Entry, i64 72), i64 0, i64 %355
  %356 = load ptr, ptr %gep965, align 8
  call void %356({ ptr, ptr, ptr, i32 } %345, { ptr, ptr, ptr, i32 } %345, ptr nonnull %10, { ptr, i160 } %193, { ptr, i160 } %176, i32 %200)
  %357 = load ptr, ptr %63, align 8
  %358 = ptrtoint ptr %result.i.i838 to i64
  %359 = ptrtoint ptr %357 to i64
  %.sroa.2.0.insert.ext.i840 = zext i64 %359 to i160
  %.sroa.2.0.insert.shift.i841 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i840, 64
  %.sroa.0.0.insert.ext.i843 = zext i64 %358 to i160
  %.sroa.2.0.insert.insert.i842 = or disjoint i160 %.sroa.2.0.insert.shift.i841, %.sroa.0.0.insert.ext.i843
  %.sroa.0.0.insert.insert.i844 = or disjoint i160 %.sroa.2.0.insert.insert.i842, 3062541302288446171170371466885913903104
  %360 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0.0.insert.insert.i844, 1
  %361 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %362 = load ptr, ptr %48, align 8
  %363 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %362, 0
  %364 = load ptr, ptr %49, align 8
  %365 = insertvalue { ptr, ptr, ptr, i32 } %363, ptr %364, 1
  %366 = load ptr, ptr %50, align 8
  %367 = insertvalue { ptr, ptr, ptr, i32 } %365, ptr %366, 2
  %368 = load i32, ptr %51, align 4
  %369 = insertvalue { ptr, ptr, ptr, i32 } %367, i32 %368, 3
  %hash_coef_ptr.i.i84.i845 = getelementptr i8, ptr %362, i64 8
  %tbl_size_ptr.i.i85.i846 = getelementptr i8, ptr %362, i64 16
  %offset_tbl_ptr.i.i86.i847 = getelementptr i8, ptr %362, i64 40
  %hash_coef.i.i87.i848 = load i64, ptr %hash_coef_ptr.i.i84.i845, align 4
  %tbl_size.i.i88.i849 = load i64, ptr %tbl_size_ptr.i.i85.i846, align 4
  %offset_tbl.i.i89.i850 = load ptr, ptr %offset_tbl_ptr.i.i86.i847, align 8
  %product.i.i.i90.i851 = mul i64 %hash_coef.i.i87.i848, -5261542750394134544
  %shifted.i.i.i91.i852 = lshr i64 %product.i.i.i90.i851, 32
  %xored.i.i.i92.i853 = xor i64 %shifted.i.i.i91.i852, %product.i.i.i90.i851
  %hash.i.i.i93.i854 = and i64 %xored.i.i.i92.i853, %tbl_size.i.i88.i849
  %offset_ptr.i.i94.i855 = getelementptr i32, ptr %offset_tbl.i.i89.i850, i64 %hash.i.i.i93.i854
  %offset.i.i95.i856 = load i32, ptr %offset_ptr.i.i94.i855, align 4
  %eq.i98.i857 = icmp eq i32 %368, %offset.i.i95.i856
  call void @llvm.assume(i1 %eq.i98.i857) #30
  %370 = load ptr, ptr %result.i, align 8
  %371 = load ptr, ptr %30, align 8
  %result.i99.i858 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %372 = getelementptr i8, ptr %result.i99.i858, i64 16
  store ptr %371, ptr %372, align 8
  %373 = getelementptr i8, ptr %result.i99.i858, i64 8
  store ptr %370, ptr %373, align 8
  %374 = getelementptr i8, ptr %result.i99.i858, i64 24
  store ptr null, ptr %374, align 8
  %375 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i99.i858)
  store ptr @Entry, ptr %result.i99.i858, align 8
  store ptr @_parameterization_Ptri32, ptr %11, align 8
  store ptr %result.i99.i858, ptr %66, align 8
  %376 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %11)
  %377 = call ptr @llvm.invariant.start.p0(i64 600, ptr %362)
  %378 = sext i32 %368 to i64
  %379 = getelementptr ptr, ptr %362, i64 %378
  %380 = getelementptr i8, ptr %379, i64 128
  %381 = load ptr, ptr %380, align 8
  store ptr @i32_typ, ptr %12, align 8
  store ptr @Entry, ptr %67, align 8
  %382 = call ptr %381({ ptr, ptr, ptr, i32 } %369, ptr nonnull %12)
  call void %382({ ptr, ptr, ptr, i32 } %369, { ptr, ptr, ptr, i32 } %369, ptr nonnull %11, i32 %291, { ptr, i160 } %360)
  %383 = icmp eq ptr %.fca.0.extract2.i837, @nil_typ
  %384 = icmp eq ptr %.fca.0.extract2.i837, null
  %385 = or i1 %383, %384
  br i1 %385, label %._crit_edge.thread.i880, label %._crit_edge.i859

._crit_edge.thread.i880:                          ; preds = %HashMap_find_slot_keyK_hashPtri32.exit1051
  %386 = load i32, ptr %60, align 4
  %387 = add i32 %386, 1
  store i32 %387, ptr %60, align 4
  br label %._crit_edge1.sink.split.i878

._crit_edge.i859:                                 ; preds = %HashMap_find_slot_keyK_hashPtri32.exit1051
  %.fca.1.extract4.i860 = extractvalue { ptr, i160 } %308, 1
  %.sroa.3192.8.extract.trunc.i861 = trunc i160 %.fca.1.extract4.i860 to i64
  %388 = inttoptr i64 %.sroa.3192.8.extract.trunc.i861 to ptr
  %.sroa.5193.8.extract.shift.i862 = lshr i160 %.fca.1.extract4.i860, 64
  %.sroa.5193.8.extract.trunc.i863 = trunc i160 %.sroa.5193.8.extract.shift.i862 to i64
  %389 = inttoptr i64 %.sroa.5193.8.extract.trunc.i863 to ptr
  %hash_coef_ptr.i.i101.i864 = getelementptr i8, ptr %.fca.0.extract2.i837, i64 8
  %tbl_size_ptr.i.i102.i865 = getelementptr i8, ptr %.fca.0.extract2.i837, i64 16
  %offset_tbl_ptr.i.i103.i866 = getelementptr i8, ptr %.fca.0.extract2.i837, i64 40
  %hash_coef.i.i104.i867 = load i64, ptr %hash_coef_ptr.i.i101.i864, align 4
  %tbl_size.i.i105.i868 = load i64, ptr %tbl_size_ptr.i.i102.i865, align 4
  %offset_tbl.i.i106.i869 = load ptr, ptr %offset_tbl_ptr.i.i103.i866, align 8
  %product.i.i.i107.i870 = mul i64 %hash_coef.i.i104.i867, 4015701072841558310
  %shifted.i.i.i108.i871 = lshr i64 %product.i.i.i107.i870, 32
  %xored.i.i.i109.i872 = xor i64 %shifted.i.i.i108.i871, %product.i.i.i107.i870
  %hash.i.i.i110.i873 = and i64 %xored.i.i.i109.i872, %tbl_size.i.i105.i868
  %offset_ptr.i.i111.i874 = getelementptr i32, ptr %offset_tbl.i.i106.i869, i64 %hash.i.i.i110.i873
  %offset.i.i112.i875 = load i32, ptr %offset_ptr.i.i111.i874, align 4
  %390 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract2.i837, 0
  %391 = insertvalue { ptr, ptr, ptr, i32 } %390, ptr %388, 1
  %392 = insertvalue { ptr, ptr, ptr, i32 } %391, ptr %389, 2
  %393 = insertvalue { ptr, ptr, ptr, i32 } %392, i32 %offset.i.i112.i875, 3
  %394 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %395 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %396 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract2.i837)
  %397 = sext i32 %offset.i.i112.i875 to i64
  %398 = getelementptr ptr, ptr %.fca.0.extract2.i837, i64 %397
  %399 = getelementptr i8, ptr %398, i64 56
  %400 = load ptr, ptr %399, align 8
  %401 = call ptr %400({ ptr, ptr, ptr, i32 } %393, ptr nonnull %2)
  %402 = call { ptr, i160 } %401({ ptr, ptr, ptr, i32 } %393, { ptr, ptr, ptr, i32 } %393, ptr nonnull %2)
  %.fca.0.extract45.i876 = extractvalue { ptr, i160 } %402, 0
  %403 = getelementptr i8, ptr %.fca.0.extract45.i876, i64 8
  %404 = getelementptr i8, ptr %.fca.0.extract45.i876, i64 16
  %405 = getelementptr i8, ptr %.fca.0.extract45.i876, i64 24
  %406 = getelementptr i8, ptr %.fca.0.extract45.i876, i64 32
  %407 = load i64, ptr %403, align 4
  %408 = load i64, ptr %404, align 4
  %409 = load ptr, ptr %405, align 8
  %410 = load ptr, ptr %406, align 8
  %result.i114.i877 = call i1 %409(i64 %408, i64 %407, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %410) #3
  br i1 %result.i114.i877, label %._crit_edge1.sink.split.i878, label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit881

._crit_edge1.sink.split.i878:                     ; preds = %._crit_edge.i859, %._crit_edge.thread.i880
  %.sink202.i879 = phi i64 [ 40, %._crit_edge.thread.i880 ], [ 32, %._crit_edge.i859 ]
  %411 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %412 = getelementptr i8, ptr getelementptr inbounds (i8, ptr @HashMap, i64 72), i64 %.sink202.i879
  %413 = load ptr, ptr %412, align 8
  %414 = load ptr, ptr %413, align 8
  %415 = call i32 %414(ptr nonnull %result.i)
  %416 = add i32 %415, 1
  %417 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %418 = getelementptr i8, ptr %413, i64 8
  %419 = load ptr, ptr %418, align 8
  call void %419(ptr nonnull %result.i, i32 %416)
  br label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit881

HashMap_insert_internal_keyK_valueV_hashPtri32.exit881: ; preds = %._crit_edge.i859, %._crit_edge1.sink.split.i878
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %9)
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %10)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %11)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %12)
  br label %._crit_edge3.i

._crit_edge3.i:                                   ; preds = %HashMap_insert_internal_keyK_valueV_hashPtri32.exit881, %185, %161, %153
  %420 = add nuw nsw i32 %.reg2mem31.0.i793, 1
  %421 = load ptr, ptr %gep.i792, align 8
  %422 = call ptr %421({ ptr, ptr, ptr, i32 } %126, ptr nonnull %2)
  %423 = call i32 %422({ ptr, ptr, ptr, i32 } %126, { ptr, ptr, ptr, i32 } %126, ptr nonnull %2)
  %424 = icmp slt i32 %420, %423
  br i1 %424, label %153, label %HashMap_resize_new_capacityPtri32.exit

HashMap_resize_new_capacityPtri32.exit:           ; preds = %._crit_edge3.i, %115
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %20)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %21)
  br label %HashMap_insert_keyK_valueV.exit

HashMap_insert_keyK_valueV.exit:                  ; preds = %._crit_edge, %HashMap_resize_new_capacityPtri32.exit
  %425 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %426 = load ptr, ptr %35, align 8
  %427 = call i32 %426({ ptr, i160 } %73)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %15)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %16)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %17)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %18)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %19)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6)
  %428 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %429 = load ptr, ptr %48, align 8
  %430 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %429, 0
  %431 = load ptr, ptr %49, align 8
  %432 = insertvalue { ptr, ptr, ptr, i32 } %430, ptr %431, 1
  %433 = load ptr, ptr %50, align 8
  %434 = insertvalue { ptr, ptr, ptr, i32 } %432, ptr %433, 2
  %435 = load i32, ptr %51, align 4
  %436 = insertvalue { ptr, ptr, ptr, i32 } %434, i32 %435, 3
  %hash_coef_ptr.i.i51.i898 = getelementptr i8, ptr %429, i64 8
  %tbl_size_ptr.i.i52.i899 = getelementptr i8, ptr %429, i64 16
  %offset_tbl_ptr.i.i53.i900 = getelementptr i8, ptr %429, i64 40
  %hash_coef.i.i54.i901 = load i64, ptr %hash_coef_ptr.i.i51.i898, align 4
  %tbl_size.i.i55.i902 = load i64, ptr %tbl_size_ptr.i.i52.i899, align 4
  %offset_tbl.i.i56.i903 = load ptr, ptr %offset_tbl_ptr.i.i53.i900, align 8
  %product.i.i.i57.i904 = mul i64 %hash_coef.i.i54.i901, -5261542750394134544
  %shifted.i.i.i58.i905 = lshr i64 %product.i.i.i57.i904, 32
  %xored.i.i.i59.i906 = xor i64 %shifted.i.i.i58.i905, %product.i.i.i57.i904
  %hash.i.i.i60.i907 = and i64 %xored.i.i.i59.i906, %tbl_size.i.i55.i902
  %offset_ptr.i.i61.i908 = getelementptr i32, ptr %offset_tbl.i.i56.i903, i64 %hash.i.i.i60.i907
  %offset.i.i62.i909 = load i32, ptr %offset_ptr.i.i61.i908, align 4
  %eq.i.i910 = icmp eq i32 %435, %offset.i.i62.i909
  call void @llvm.assume(i1 %eq.i.i910) #30
  %437 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %438 = call ptr @llvm.invariant.start.p0(i64 600, ptr %429)
  %439 = sext i32 %435 to i64
  %440 = getelementptr ptr, ptr %429, i64 %439
  %441 = getelementptr i8, ptr %440, i64 64
  %442 = load ptr, ptr %441, align 8
  %443 = call ptr %442({ ptr, ptr, ptr, i32 } %436, ptr nonnull %2)
  %444 = call i32 %443({ ptr, ptr, ptr, i32 } %436, { ptr, ptr, ptr, i32 } %436, ptr nonnull %2)
  %445 = add i32 %444, -1
  %446 = and i32 %445, %427
  %447 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  br label %448

448:                                              ; preds = %497, %HashMap_insert_keyK_valueV.exit
  %spec.store.select.i945966 = phi i32 [ %spec.store.select.i945, %497 ], [ -1, %HashMap_insert_keyK_valueV.exit ]
  %.0..0..0..i911 = phi i32 [ %515, %497 ], [ %446, %HashMap_insert_keyK_valueV.exit ]
  %449 = load ptr, ptr %48, align 8
  %450 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %449, 0
  %451 = load ptr, ptr %49, align 8
  %452 = insertvalue { ptr, ptr, ptr, i32 } %450, ptr %451, 1
  %453 = load ptr, ptr %50, align 8
  %454 = insertvalue { ptr, ptr, ptr, i32 } %452, ptr %453, 2
  %455 = load i32, ptr %51, align 4
  %456 = insertvalue { ptr, ptr, ptr, i32 } %454, i32 %455, 3
  %hash_coef_ptr.i.i65.i912 = getelementptr i8, ptr %449, i64 8
  %tbl_size_ptr.i.i66.i913 = getelementptr i8, ptr %449, i64 16
  %offset_tbl_ptr.i.i67.i914 = getelementptr i8, ptr %449, i64 40
  %hash_coef.i.i68.i915 = load i64, ptr %hash_coef_ptr.i.i65.i912, align 4
  %tbl_size.i.i69.i916 = load i64, ptr %tbl_size_ptr.i.i66.i913, align 4
  %offset_tbl.i.i70.i917 = load ptr, ptr %offset_tbl_ptr.i.i67.i914, align 8
  %product.i.i.i71.i918 = mul i64 %hash_coef.i.i68.i915, -5261542750394134544
  %shifted.i.i.i72.i919 = lshr i64 %product.i.i.i71.i918, 32
  %xored.i.i.i73.i920 = xor i64 %shifted.i.i.i72.i919, %product.i.i.i71.i918
  %hash.i.i.i74.i921 = and i64 %xored.i.i.i73.i920, %tbl_size.i.i69.i916
  %offset_ptr.i.i75.i922 = getelementptr i32, ptr %offset_tbl.i.i70.i917, i64 %hash.i.i.i74.i921
  %offset.i.i76.i923 = load i32, ptr %offset_ptr.i.i75.i922, align 4
  %eq.i79.i924 = icmp eq i32 %455, %offset.i.i76.i923
  call void @llvm.assume(i1 %eq.i79.i924) #30
  %457 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  store ptr @_parameterization_Ptri32, ptr %5, align 8
  %458 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %5)
  %459 = call ptr @llvm.invariant.start.p0(i64 600, ptr %449)
  %460 = sext i32 %455 to i64
  %461 = getelementptr ptr, ptr %449, i64 %460
  %462 = getelementptr i8, ptr %461, i64 120
  %463 = load ptr, ptr %462, align 8
  store ptr @i32_typ, ptr %6, align 8
  %464 = call ptr %463({ ptr, ptr, ptr, i32 } %456, ptr nonnull %6)
  %465 = call { ptr, i160 } %464({ ptr, ptr, ptr, i32 } %456, { ptr, ptr, ptr, i32 } %456, ptr nonnull %5, i32 %.0..0..0..i911)
  %.fca.0.extract36.i925 = extractvalue { ptr, i160 } %465, 0
  %466 = icmp eq ptr %.fca.0.extract36.i925, @nil_typ
  %467 = icmp eq ptr %.fca.0.extract36.i925, null
  %468 = or i1 %466, %467
  br i1 %468, label %516, label %469

469:                                              ; preds = %448
  %.fca.1.extract38.i926 = extractvalue { ptr, i160 } %465, 1
  %.sroa.5.8.extract.shift.i927 = lshr i160 %.fca.1.extract38.i926, 64
  %.sroa.5.8.extract.trunc.i928 = trunc i160 %.sroa.5.8.extract.shift.i927 to i64
  %.sroa.2.8.extract.trunc165.i929 = trunc i160 %.fca.1.extract38.i926 to i64
  %470 = inttoptr i64 %.sroa.2.8.extract.trunc165.i929 to ptr
  %471 = inttoptr i64 %.sroa.5.8.extract.trunc.i928 to ptr
  %hash_coef_ptr.i.i81.i930 = getelementptr i8, ptr %.fca.0.extract36.i925, i64 8
  %tbl_size_ptr.i.i82.i931 = getelementptr i8, ptr %.fca.0.extract36.i925, i64 16
  %offset_tbl_ptr.i.i83.i932 = getelementptr i8, ptr %.fca.0.extract36.i925, i64 40
  %hash_coef.i.i84.i933 = load i64, ptr %hash_coef_ptr.i.i81.i930, align 4
  %tbl_size.i.i85.i934 = load i64, ptr %tbl_size_ptr.i.i82.i931, align 4
  %offset_tbl.i.i86.i935 = load ptr, ptr %offset_tbl_ptr.i.i83.i932, align 8
  %product.i.i.i87.i936 = mul i64 %hash_coef.i.i84.i933, 4015701072841558310
  %shifted.i.i.i88.i937 = lshr i64 %product.i.i.i87.i936, 32
  %xored.i.i.i89.i938 = xor i64 %shifted.i.i.i88.i937, %product.i.i.i87.i936
  %hash.i.i.i90.i939 = and i64 %xored.i.i.i89.i938, %tbl_size.i.i85.i934
  %offset_ptr.i.i91.i940 = getelementptr i32, ptr %offset_tbl.i.i86.i935, i64 %hash.i.i.i90.i939
  %offset.i.i92.i941 = load i32, ptr %offset_ptr.i.i91.i940, align 4
  %472 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract36.i925, 0
  %473 = insertvalue { ptr, ptr, ptr, i32 } %472, ptr %470, 1
  %474 = insertvalue { ptr, ptr, ptr, i32 } %473, ptr %471, 2
  %475 = insertvalue { ptr, ptr, ptr, i32 } %474, i32 %offset.i.i92.i941, 3
  %476 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %477 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %478 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i925)
  %479 = sext i32 %offset.i.i92.i941 to i64
  %480 = getelementptr ptr, ptr %.fca.0.extract36.i925, i64 %479
  %481 = getelementptr i8, ptr %480, i64 64
  %482 = load ptr, ptr %481, align 8
  %483 = call ptr %482({ ptr, ptr, ptr, i32 } %475, ptr nonnull %2)
  %484 = call i32 %483({ ptr, ptr, ptr, i32 } %475, { ptr, ptr, ptr, i32 } %475, ptr nonnull %2)
  %485 = icmp eq i32 %484, %427
  %486 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %487 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %488 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i925)
  %489 = getelementptr i8, ptr %480, i64 48
  %490 = load ptr, ptr %489, align 8
  %491 = call ptr %490({ ptr, ptr, ptr, i32 } %475, ptr nonnull %2)
  %492 = call { ptr, i160 } %491({ ptr, ptr, ptr, i32 } %475, { ptr, ptr, ptr, i32 } %475, ptr nonnull %2)
  %493 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %494 = load ptr, ptr %36, align 8
  %495 = call i1 %494({ ptr, i160 } %492, { ptr, i160 } %73)
  %496 = and i1 %485, %495
  br i1 %496, label %HashMap_find_slot_keyK_hashPtri32.exit946, label %497

497:                                              ; preds = %469
  %498 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %499 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %500 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i925)
  %501 = getelementptr i8, ptr %480, i64 56
  %502 = load ptr, ptr %501, align 8
  %503 = call ptr %502({ ptr, ptr, ptr, i32 } %475, ptr nonnull %2)
  %504 = call { ptr, i160 } %503({ ptr, ptr, ptr, i32 } %475, { ptr, ptr, ptr, i32 } %475, ptr nonnull %2)
  %.fca.0.extract15.i = extractvalue { ptr, i160 } %504, 0
  %505 = getelementptr i8, ptr %.fca.0.extract15.i, i64 8
  %506 = getelementptr i8, ptr %.fca.0.extract15.i, i64 16
  %507 = getelementptr i8, ptr %.fca.0.extract15.i, i64 24
  %508 = getelementptr i8, ptr %.fca.0.extract15.i, i64 32
  %509 = load i64, ptr %505, align 4
  %510 = load i64, ptr %506, align 4
  %511 = load ptr, ptr %507, align 8
  %512 = load ptr, ptr %508, align 8
  %result.i.i943 = call i1 %511(i64 %510, i64 %509, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %512) #3
  %513 = icmp eq i32 %spec.store.select.i945966, -1
  %or.cond.i944 = select i1 %result.i.i943, i1 %513, i1 false
  %spec.store.select.i945 = select i1 %or.cond.i944, i32 %.0..0..0..i911, i32 %spec.store.select.i945966
  %514 = add i32 %.0..0..0..i911, 1
  %515 = and i32 %514, %445
  br label %448

516:                                              ; preds = %448
  %517 = icmp eq i32 %spec.store.select.i945966, -1
  %.pre977 = select i1 %517, i32 %.0..0..0..i911, i32 %spec.store.select.i945966
  br label %HashMap_find_slot_keyK_hashPtri32.exit946

HashMap_find_slot_keyK_hashPtri32.exit946:        ; preds = %469, %516
  %518 = phi i32 [ %.pre977, %516 ], [ %.0..0..0..i911, %469 ]
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6)
  %519 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %520 = load ptr, ptr %48, align 8
  %521 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %520, 0
  %522 = load ptr, ptr %49, align 8
  %523 = insertvalue { ptr, ptr, ptr, i32 } %521, ptr %522, 1
  %524 = load ptr, ptr %50, align 8
  %525 = insertvalue { ptr, ptr, ptr, i32 } %523, ptr %524, 2
  %526 = load i32, ptr %51, align 4
  %527 = insertvalue { ptr, ptr, ptr, i32 } %525, i32 %526, 3
  %hash_coef_ptr.i.i56.i652 = getelementptr i8, ptr %520, i64 8
  %tbl_size_ptr.i.i57.i653 = getelementptr i8, ptr %520, i64 16
  %offset_tbl_ptr.i.i58.i654 = getelementptr i8, ptr %520, i64 40
  %hash_coef.i.i59.i655 = load i64, ptr %hash_coef_ptr.i.i56.i652, align 4
  %tbl_size.i.i60.i656 = load i64, ptr %tbl_size_ptr.i.i57.i653, align 4
  %offset_tbl.i.i61.i657 = load ptr, ptr %offset_tbl_ptr.i.i58.i654, align 8
  %product.i.i.i62.i658 = mul i64 %hash_coef.i.i59.i655, -5261542750394134544
  %shifted.i.i.i63.i659 = lshr i64 %product.i.i.i62.i658, 32
  %xored.i.i.i64.i660 = xor i64 %shifted.i.i.i63.i659, %product.i.i.i62.i658
  %hash.i.i.i65.i661 = and i64 %xored.i.i.i64.i660, %tbl_size.i.i60.i656
  %offset_ptr.i.i66.i662 = getelementptr i32, ptr %offset_tbl.i.i61.i657, i64 %hash.i.i.i65.i661
  %offset.i.i67.i663 = load i32, ptr %offset_ptr.i.i66.i662, align 4
  %eq.i.i664 = icmp eq i32 %526, %offset.i.i67.i663
  call void @llvm.assume(i1 %eq.i.i664) #30
  store ptr @_parameterization_Ptri32, ptr %15, align 8
  %528 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %15)
  %529 = call ptr @llvm.invariant.start.p0(i64 600, ptr %520)
  %530 = sext i32 %526 to i64
  %531 = getelementptr ptr, ptr %520, i64 %530
  %532 = getelementptr i8, ptr %531, i64 120
  %533 = load ptr, ptr %532, align 8
  store ptr @i32_typ, ptr %16, align 8
  %534 = call ptr %533({ ptr, ptr, ptr, i32 } %527, ptr nonnull %16)
  %535 = call { ptr, i160 } %534({ ptr, ptr, ptr, i32 } %527, { ptr, ptr, ptr, i32 } %527, ptr nonnull %15, i32 %518)
  %.fca.0.extract2.i = extractvalue { ptr, i160 } %535, 0
  %536 = load ptr, ptr %result.i, align 8
  %537 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %538 = load ptr, ptr %30, align 8
  %539 = load ptr, ptr %536, align 8
  %540 = getelementptr i8, ptr %539, i64 48
  %541 = load ptr, ptr %540, align 8
  %542 = call { i64, i64 } %541(ptr nonnull %536)
  %543 = extractvalue { i64, i64 } %542, 0
  %544 = extractvalue { i64, i64 } %542, 1
  %545 = call i64 @llvm.umax.i64(i64 %544, i64 8)
  %546 = urem i64 16, %544
  %547 = icmp eq i64 %546, 0
  %548 = sub i64 %544, %546
  %549 = select i1 %547, i64 0, i64 %548
  %550 = add i64 %549, %543
  %551 = add i64 %550, 16
  %552 = and i64 %550, 7
  %553 = icmp eq i64 %552, 0
  %554 = sub nuw nsw i64 40, %552
  %555 = select i1 %553, i64 32, i64 %554
  %556 = add i64 %551, %555
  %557 = and i64 %556, 3
  %558 = icmp eq i64 %557, 0
  %559 = sub nuw nsw i64 8, %557
  %560 = select i1 %558, i64 4, i64 %559
  %561 = add i64 %560, %556
  %562 = urem i64 %561, %545
  %563 = icmp eq i64 %562, 0
  %564 = sub i64 %545, %562
  %565 = select i1 %563, i64 0, i64 %564
  %566 = add i64 %561, %565
  %result.i.i665 = call noalias ptr @bump_malloc_inner(i64 noundef %566, ptr nonnull @current_ptr) #29
  store ptr %536, ptr %result.i.i665, align 8
  %567 = getelementptr i8, ptr %result.i.i665, i64 8
  store ptr %538, ptr %567, align 8
  %568 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i.i665)
  store ptr @Entry, ptr %17, align 8
  store ptr %result.i.i665, ptr %55, align 8
  store i32 9, ptr %56, align 8
  %569 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %17)
  %570 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %571 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %572 = load ptr, ptr %536, align 8
  %573 = getelementptr i8, ptr %572, i64 48
  %574 = load ptr, ptr %573, align 8
  %575 = call { i64, i64 } %574(ptr nonnull %536)
  %576 = extractvalue { i64, i64 } %575, 1
  %577 = urem i64 16, %576
  %578 = icmp eq i64 %577, 0
  %reass.sub = sub i64 %576, %577
  %579 = add i64 %reass.sub, 16
  %580 = select i1 %578, i64 16, i64 %579
  %581 = getelementptr i8, ptr %result.i.i665, i64 %580
  %582 = load ptr, ptr %result.i.i665, align 8
  %583 = load ptr, ptr %582, align 8
  %584 = getelementptr i8, ptr %583, i64 64
  %585 = load ptr, ptr %584, align 8
  call void %585({ ptr, i160 } %73, ptr nonnull %582, ptr %581)
  %586 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %587 = load ptr, ptr %result.i.i665, align 8
  %588 = load ptr, ptr %587, align 8
  %589 = getelementptr i8, ptr %588, i64 48
  %590 = load ptr, ptr %589, align 8
  %591 = call { i64, i64 } %590(ptr nonnull %587)
  %592 = extractvalue { i64, i64 } %591, 0
  %593 = extractvalue { i64, i64 } %591, 1
  %594 = urem i64 16, %593
  %595 = icmp eq i64 %594, 0
  %596 = sub i64 %593, %594
  %597 = select i1 %595, i64 0, i64 %596
  %598 = add i64 %597, %592
  %599 = and i64 %598, 7
  %600 = icmp eq i64 %599, 0
  %601 = sub nuw nsw i64 8, %599
  %602 = select i1 %600, i64 0, i64 %601
  %603 = getelementptr i8, ptr %result.i.i665, i64 %598
  %604 = getelementptr i8, ptr %603, i64 16
  %605 = getelementptr i8, ptr %604, i64 %602
  store ptr @i32_typ, ptr %605, align 8
  %606 = getelementptr i8, ptr %605, i64 8
  store i160 %.sroa.042.0.insert.ext, ptr %606, align 4
  %607 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %608 = load ptr, ptr %result.i.i665, align 8
  %609 = load ptr, ptr %608, align 8
  %610 = getelementptr i8, ptr %609, i64 48
  %611 = load ptr, ptr %610, align 8
  %612 = call { i64, i64 } %611(ptr nonnull %608)
  %613 = extractvalue { i64, i64 } %612, 0
  %614 = extractvalue { i64, i64 } %612, 1
  %615 = urem i64 16, %614
  %616 = icmp eq i64 %615, 0
  %617 = sub i64 %614, %615
  %618 = select i1 %616, i64 0, i64 %617
  %619 = add i64 %618, %613
  %620 = add i64 %619, 16
  %621 = and i64 %619, 7
  %622 = icmp eq i64 %621, 0
  %623 = sub nuw nsw i64 40, %621
  %624 = select i1 %622, i64 32, i64 %623
  %625 = add i64 %620, %624
  %626 = and i64 %625, 3
  %627 = icmp eq i64 %626, 0
  %628 = sub nuw nsw i64 4, %626
  %629 = select i1 %627, i64 0, i64 %628
  %630 = getelementptr i8, ptr %result.i.i665, i64 %625
  %631 = getelementptr i8, ptr %630, i64 %629
  store i32 %427, ptr %631, align 4
  %632 = load ptr, ptr %57, align 8
  %633 = ptrtoint ptr %result.i.i665 to i64
  %634 = ptrtoint ptr %632 to i64
  %.sroa.2.0.insert.ext.i = zext i64 %634 to i160
  %.sroa.2.0.insert.shift.i = shl nuw nsw i160 %.sroa.2.0.insert.ext.i, 64
  %.sroa.0.0.insert.ext.i = zext i64 %633 to i160
  %.sroa.2.0.insert.insert.i = or disjoint i160 %.sroa.2.0.insert.shift.i, %.sroa.0.0.insert.ext.i
  %.sroa.0.0.insert.insert.i = or disjoint i160 %.sroa.2.0.insert.insert.i, 3062541302288446171170371466885913903104
  %635 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0.0.insert.insert.i, 1
  %636 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %637 = load ptr, ptr %48, align 8
  %638 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %637, 0
  %639 = load ptr, ptr %49, align 8
  %640 = insertvalue { ptr, ptr, ptr, i32 } %638, ptr %639, 1
  %641 = load ptr, ptr %50, align 8
  %642 = insertvalue { ptr, ptr, ptr, i32 } %640, ptr %641, 2
  %643 = load i32, ptr %51, align 4
  %644 = insertvalue { ptr, ptr, ptr, i32 } %642, i32 %643, 3
  %hash_coef_ptr.i.i84.i = getelementptr i8, ptr %637, i64 8
  %tbl_size_ptr.i.i85.i = getelementptr i8, ptr %637, i64 16
  %offset_tbl_ptr.i.i86.i = getelementptr i8, ptr %637, i64 40
  %hash_coef.i.i87.i = load i64, ptr %hash_coef_ptr.i.i84.i, align 4
  %tbl_size.i.i88.i = load i64, ptr %tbl_size_ptr.i.i85.i, align 4
  %offset_tbl.i.i89.i = load ptr, ptr %offset_tbl_ptr.i.i86.i, align 8
  %product.i.i.i90.i = mul i64 %hash_coef.i.i87.i, -5261542750394134544
  %shifted.i.i.i91.i = lshr i64 %product.i.i.i90.i, 32
  %xored.i.i.i92.i = xor i64 %shifted.i.i.i91.i, %product.i.i.i90.i
  %hash.i.i.i93.i = and i64 %xored.i.i.i92.i, %tbl_size.i.i88.i
  %offset_ptr.i.i94.i = getelementptr i32, ptr %offset_tbl.i.i89.i, i64 %hash.i.i.i93.i
  %offset.i.i95.i = load i32, ptr %offset_ptr.i.i94.i, align 4
  %eq.i98.i = icmp eq i32 %643, %offset.i.i95.i
  call void @llvm.assume(i1 %eq.i98.i) #30
  %645 = load ptr, ptr %result.i, align 8
  %646 = load ptr, ptr %30, align 8
  %result.i99.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %647 = getelementptr i8, ptr %result.i99.i, i64 16
  store ptr %646, ptr %647, align 8
  %648 = getelementptr i8, ptr %result.i99.i, i64 8
  store ptr %645, ptr %648, align 8
  %649 = getelementptr i8, ptr %result.i99.i, i64 24
  store ptr null, ptr %649, align 8
  %650 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i99.i)
  store ptr @Entry, ptr %result.i99.i, align 8
  store ptr @_parameterization_Ptri32, ptr %18, align 8
  store ptr %result.i99.i, ptr %58, align 8
  %651 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %18)
  %652 = call ptr @llvm.invariant.start.p0(i64 600, ptr %637)
  %653 = sext i32 %643 to i64
  %654 = getelementptr ptr, ptr %637, i64 %653
  %655 = getelementptr i8, ptr %654, i64 128
  %656 = load ptr, ptr %655, align 8
  store ptr @i32_typ, ptr %19, align 8
  store ptr @Entry, ptr %59, align 8
  %657 = call ptr %656({ ptr, ptr, ptr, i32 } %644, ptr nonnull %19)
  call void %657({ ptr, ptr, ptr, i32 } %644, { ptr, ptr, ptr, i32 } %644, ptr nonnull %18, i32 %518, { ptr, i160 } %635)
  %658 = icmp eq ptr %.fca.0.extract2.i, @nil_typ
  %659 = icmp eq ptr %.fca.0.extract2.i, null
  %660 = or i1 %658, %659
  br i1 %660, label %._crit_edge.thread.i, label %._crit_edge.i

._crit_edge.thread.i:                             ; preds = %HashMap_find_slot_keyK_hashPtri32.exit946
  %661 = load i32, ptr %60, align 4
  %662 = add i32 %661, 1
  store i32 %662, ptr %60, align 4
  br label %._crit_edge1.sink.split.i

._crit_edge.i:                                    ; preds = %HashMap_find_slot_keyK_hashPtri32.exit946
  %.fca.1.extract4.i = extractvalue { ptr, i160 } %535, 1
  %.sroa.3192.8.extract.trunc.i = trunc i160 %.fca.1.extract4.i to i64
  %663 = inttoptr i64 %.sroa.3192.8.extract.trunc.i to ptr
  %.sroa.5193.8.extract.shift.i = lshr i160 %.fca.1.extract4.i, 64
  %.sroa.5193.8.extract.trunc.i = trunc i160 %.sroa.5193.8.extract.shift.i to i64
  %664 = inttoptr i64 %.sroa.5193.8.extract.trunc.i to ptr
  %hash_coef_ptr.i.i101.i = getelementptr i8, ptr %.fca.0.extract2.i, i64 8
  %tbl_size_ptr.i.i102.i = getelementptr i8, ptr %.fca.0.extract2.i, i64 16
  %offset_tbl_ptr.i.i103.i = getelementptr i8, ptr %.fca.0.extract2.i, i64 40
  %hash_coef.i.i104.i = load i64, ptr %hash_coef_ptr.i.i101.i, align 4
  %tbl_size.i.i105.i = load i64, ptr %tbl_size_ptr.i.i102.i, align 4
  %offset_tbl.i.i106.i = load ptr, ptr %offset_tbl_ptr.i.i103.i, align 8
  %product.i.i.i107.i = mul i64 %hash_coef.i.i104.i, 4015701072841558310
  %shifted.i.i.i108.i = lshr i64 %product.i.i.i107.i, 32
  %xored.i.i.i109.i = xor i64 %shifted.i.i.i108.i, %product.i.i.i107.i
  %hash.i.i.i110.i = and i64 %xored.i.i.i109.i, %tbl_size.i.i105.i
  %offset_ptr.i.i111.i = getelementptr i32, ptr %offset_tbl.i.i106.i, i64 %hash.i.i.i110.i
  %offset.i.i112.i = load i32, ptr %offset_ptr.i.i111.i, align 4
  %665 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract2.i, 0
  %666 = insertvalue { ptr, ptr, ptr, i32 } %665, ptr %663, 1
  %667 = insertvalue { ptr, ptr, ptr, i32 } %666, ptr %664, 2
  %668 = insertvalue { ptr, ptr, ptr, i32 } %667, i32 %offset.i.i112.i, 3
  %669 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %670 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %671 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract2.i)
  %672 = sext i32 %offset.i.i112.i to i64
  %673 = getelementptr ptr, ptr %.fca.0.extract2.i, i64 %672
  %674 = getelementptr i8, ptr %673, i64 56
  %675 = load ptr, ptr %674, align 8
  %676 = call ptr %675({ ptr, ptr, ptr, i32 } %668, ptr nonnull %2)
  %677 = call { ptr, i160 } %676({ ptr, ptr, ptr, i32 } %668, { ptr, ptr, ptr, i32 } %668, ptr nonnull %2)
  %.fca.0.extract45.i = extractvalue { ptr, i160 } %677, 0
  %678 = getelementptr i8, ptr %.fca.0.extract45.i, i64 8
  %679 = getelementptr i8, ptr %.fca.0.extract45.i, i64 16
  %680 = getelementptr i8, ptr %.fca.0.extract45.i, i64 24
  %681 = getelementptr i8, ptr %.fca.0.extract45.i, i64 32
  %682 = load i64, ptr %678, align 4
  %683 = load i64, ptr %679, align 4
  %684 = load ptr, ptr %680, align 8
  %685 = load ptr, ptr %681, align 8
  %result.i114.i = call i1 %684(i64 %683, i64 %682, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %685) #3
  br i1 %result.i114.i, label %._crit_edge1.sink.split.i, label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit

._crit_edge1.sink.split.i:                        ; preds = %._crit_edge.i, %._crit_edge.thread.i
  %.sink202.i = phi i64 [ 40, %._crit_edge.thread.i ], [ 32, %._crit_edge.i ]
  %686 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %687 = getelementptr i8, ptr getelementptr inbounds (i8, ptr @HashMap, i64 72), i64 %.sink202.i
  %688 = load ptr, ptr %687, align 8
  %689 = load ptr, ptr %688, align 8
  %690 = call i32 %689(ptr nonnull %result.i)
  %691 = add i32 %690, 1
  %692 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %693 = getelementptr i8, ptr %688, i64 8
  %694 = load ptr, ptr %693, align 8
  call void %694(ptr nonnull %result.i, i32 %691)
  br label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit

HashMap_insert_internal_keyK_valueV_hashPtri32.exit: ; preds = %._crit_edge.i, %._crit_edge1.sink.split.i
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %15)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %16)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %17)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %18)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %19)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %695 = add nuw nsw i32 %.reg2mem91.0269, 1
  %696 = icmp slt i32 %695, %0
  br i1 %696, label %._crit_edge, label %._crit_edge1.preheader

._crit_edge1.preheader:                           ; preds = %HashMap_insert_internal_keyK_valueV_hashPtri32.exit
  %697 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %698 = zext nneg i32 %0 to i64
  %699 = shl nuw nsw i64 %698, 5
  %result.i.i307 = call noalias ptr @bump_malloc_inner(i64 noundef %699, ptr nonnull @current_ptr) #29
  %700 = call ptr @llvm.invariant.start.p0(i64 40, ptr nonnull @PRNG)
  %701 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  br label %._crit_edge1

._crit_edge1._crit_edge.thread:                   ; preds = %1
  %702 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %703 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %704 = call i64 @clock()
  br label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit

._crit_edge1:                                     ; preds = %._crit_edge1.preheader, %._crit_edge1
  %705 = phi i32 [ %708, %._crit_edge1 ], [ 987, %._crit_edge1.preheader ]
  %.reg2mem87.0271 = phi i32 [ %713, %._crit_edge1 ], [ 0, %._crit_edge1.preheader ]
  %706 = mul i32 %705, 1103515245
  %707 = add i32 %706, 12345
  %708 = and i32 %707, 2147483647
  %.sroa.039.0.insert.ext = zext nneg i32 %708 to i160
  %709 = zext nneg i32 %.reg2mem87.0271 to i64
  %710 = shl nuw nsw i64 %709, 5
  %711 = getelementptr i8, ptr %result.i.i307, i64 %710
  store ptr @i32_typ, ptr %711, align 8
  %712 = getelementptr i8, ptr %711, i64 8
  store i160 %.sroa.039.0.insert.ext, ptr %712, align 4
  %713 = add nuw nsw i32 %.reg2mem87.0271, 1
  %714 = icmp slt i32 %713, %0
  br i1 %714, label %._crit_edge1, label %._crit_edge1._crit_edge

._crit_edge1._crit_edge:                          ; preds = %._crit_edge1
  %715 = call i64 @clock()
  %716 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %invariant.gep = getelementptr i8, ptr %result.i.i307, i64 8
  br label %.lr.ph278

.lr.ph278:                                        ; preds = %._crit_edge1._crit_edge, %HashMap_get_keyK.exit
  %.reg2mem83.0276 = phi i32 [ %.reg2mem77.0, %HashMap_get_keyK.exit ], [ 0, %._crit_edge1._crit_edge ]
  %.reg2mem81.0275 = phi i32 [ %.reg2mem75.0, %HashMap_get_keyK.exit ], [ 0, %._crit_edge1._crit_edge ]
  %.reg2mem79.0274 = phi i32 [ %864, %HashMap_get_keyK.exit ], [ 0, %._crit_edge1._crit_edge ]
  %717 = zext nneg i32 %.reg2mem79.0274 to i64
  %718 = shl nuw nsw i64 %717, 5
  %gep = getelementptr i8, ptr %invariant.gep, i64 %718
  %719 = load i160, ptr %gep, align 4
  %.sroa.033.0.insert.ext = and i160 %719, 4294967295
  %720 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.033.0.insert.ext, 1
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %22)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %23)
  %721 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %722 = load ptr, ptr %35, align 8
  %723 = call i32 %722({ ptr, i160 } %720)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %13)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %14)
  %724 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %725 = load ptr, ptr %48, align 8
  %726 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %725, 0
  %727 = load ptr, ptr %49, align 8
  %728 = insertvalue { ptr, ptr, ptr, i32 } %726, ptr %727, 1
  %729 = load ptr, ptr %50, align 8
  %730 = insertvalue { ptr, ptr, ptr, i32 } %728, ptr %729, 2
  %731 = load i32, ptr %51, align 4
  %732 = insertvalue { ptr, ptr, ptr, i32 } %730, i32 %731, 3
  %hash_coef_ptr.i.i51.i = getelementptr i8, ptr %725, i64 8
  %tbl_size_ptr.i.i52.i = getelementptr i8, ptr %725, i64 16
  %offset_tbl_ptr.i.i53.i = getelementptr i8, ptr %725, i64 40
  %hash_coef.i.i54.i = load i64, ptr %hash_coef_ptr.i.i51.i, align 4
  %tbl_size.i.i55.i = load i64, ptr %tbl_size_ptr.i.i52.i, align 4
  %offset_tbl.i.i56.i = load ptr, ptr %offset_tbl_ptr.i.i53.i, align 8
  %product.i.i.i57.i = mul i64 %hash_coef.i.i54.i, -5261542750394134544
  %shifted.i.i.i58.i = lshr i64 %product.i.i.i57.i, 32
  %xored.i.i.i59.i = xor i64 %shifted.i.i.i58.i, %product.i.i.i57.i
  %hash.i.i.i60.i = and i64 %xored.i.i.i59.i, %tbl_size.i.i55.i
  %offset_ptr.i.i61.i = getelementptr i32, ptr %offset_tbl.i.i56.i, i64 %hash.i.i.i60.i
  %offset.i.i62.i = load i32, ptr %offset_ptr.i.i61.i, align 4
  %eq.i.i687 = icmp eq i32 %731, %offset.i.i62.i
  call void @llvm.assume(i1 %eq.i.i687) #30
  %733 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %734 = call ptr @llvm.invariant.start.p0(i64 600, ptr %725)
  %735 = sext i32 %731 to i64
  %736 = getelementptr ptr, ptr %725, i64 %735
  %737 = getelementptr i8, ptr %736, i64 64
  %738 = load ptr, ptr %737, align 8
  %739 = call ptr %738({ ptr, ptr, ptr, i32 } %732, ptr nonnull %2)
  %740 = call i32 %739({ ptr, ptr, ptr, i32 } %732, { ptr, ptr, ptr, i32 } %732, ptr nonnull %2)
  %741 = add i32 %740, -1
  %742 = and i32 %741, %723
  %743 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  br label %744

744:                                              ; preds = %793, %.lr.ph278
  %spec.store.select.i796 = phi i32 [ %spec.store.select.i, %793 ], [ -1, %.lr.ph278 ]
  %.0..0..0..i = phi i32 [ %811, %793 ], [ %742, %.lr.ph278 ]
  %745 = load ptr, ptr %48, align 8
  %746 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %745, 0
  %747 = load ptr, ptr %49, align 8
  %748 = insertvalue { ptr, ptr, ptr, i32 } %746, ptr %747, 1
  %749 = load ptr, ptr %50, align 8
  %750 = insertvalue { ptr, ptr, ptr, i32 } %748, ptr %749, 2
  %751 = load i32, ptr %51, align 4
  %752 = insertvalue { ptr, ptr, ptr, i32 } %750, i32 %751, 3
  %hash_coef_ptr.i.i65.i = getelementptr i8, ptr %745, i64 8
  %tbl_size_ptr.i.i66.i = getelementptr i8, ptr %745, i64 16
  %offset_tbl_ptr.i.i67.i = getelementptr i8, ptr %745, i64 40
  %hash_coef.i.i68.i = load i64, ptr %hash_coef_ptr.i.i65.i, align 4
  %tbl_size.i.i69.i = load i64, ptr %tbl_size_ptr.i.i66.i, align 4
  %offset_tbl.i.i70.i = load ptr, ptr %offset_tbl_ptr.i.i67.i, align 8
  %product.i.i.i71.i = mul i64 %hash_coef.i.i68.i, -5261542750394134544
  %shifted.i.i.i72.i = lshr i64 %product.i.i.i71.i, 32
  %xored.i.i.i73.i = xor i64 %shifted.i.i.i72.i, %product.i.i.i71.i
  %hash.i.i.i74.i = and i64 %xored.i.i.i73.i, %tbl_size.i.i69.i
  %offset_ptr.i.i75.i = getelementptr i32, ptr %offset_tbl.i.i70.i, i64 %hash.i.i.i74.i
  %offset.i.i76.i = load i32, ptr %offset_ptr.i.i75.i, align 4
  %eq.i79.i = icmp eq i32 %751, %offset.i.i76.i
  call void @llvm.assume(i1 %eq.i79.i) #30
  %753 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  store ptr @_parameterization_Ptri32, ptr %13, align 8
  %754 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %13)
  %755 = call ptr @llvm.invariant.start.p0(i64 600, ptr %745)
  %756 = sext i32 %751 to i64
  %757 = getelementptr ptr, ptr %745, i64 %756
  %758 = getelementptr i8, ptr %757, i64 120
  %759 = load ptr, ptr %758, align 8
  store ptr @i32_typ, ptr %14, align 8
  %760 = call ptr %759({ ptr, ptr, ptr, i32 } %752, ptr nonnull %14)
  %761 = call { ptr, i160 } %760({ ptr, ptr, ptr, i32 } %752, { ptr, ptr, ptr, i32 } %752, ptr nonnull %13, i32 %.0..0..0..i)
  %.fca.0.extract36.i = extractvalue { ptr, i160 } %761, 0
  %762 = icmp eq ptr %.fca.0.extract36.i, @nil_typ
  %763 = icmp eq ptr %.fca.0.extract36.i, null
  %764 = or i1 %762, %763
  br i1 %764, label %812, label %765

765:                                              ; preds = %744
  %.fca.1.extract38.i = extractvalue { ptr, i160 } %761, 1
  %.sroa.5.8.extract.shift.i688 = lshr i160 %.fca.1.extract38.i, 64
  %.sroa.5.8.extract.trunc.i689 = trunc i160 %.sroa.5.8.extract.shift.i688 to i64
  %.sroa.2.8.extract.trunc165.i = trunc i160 %.fca.1.extract38.i to i64
  %766 = inttoptr i64 %.sroa.2.8.extract.trunc165.i to ptr
  %767 = inttoptr i64 %.sroa.5.8.extract.trunc.i689 to ptr
  %hash_coef_ptr.i.i81.i = getelementptr i8, ptr %.fca.0.extract36.i, i64 8
  %tbl_size_ptr.i.i82.i = getelementptr i8, ptr %.fca.0.extract36.i, i64 16
  %offset_tbl_ptr.i.i83.i = getelementptr i8, ptr %.fca.0.extract36.i, i64 40
  %hash_coef.i.i84.i = load i64, ptr %hash_coef_ptr.i.i81.i, align 4
  %tbl_size.i.i85.i = load i64, ptr %tbl_size_ptr.i.i82.i, align 4
  %offset_tbl.i.i86.i = load ptr, ptr %offset_tbl_ptr.i.i83.i, align 8
  %product.i.i.i87.i = mul i64 %hash_coef.i.i84.i, 4015701072841558310
  %shifted.i.i.i88.i = lshr i64 %product.i.i.i87.i, 32
  %xored.i.i.i89.i = xor i64 %shifted.i.i.i88.i, %product.i.i.i87.i
  %hash.i.i.i90.i = and i64 %xored.i.i.i89.i, %tbl_size.i.i85.i
  %offset_ptr.i.i91.i = getelementptr i32, ptr %offset_tbl.i.i86.i, i64 %hash.i.i.i90.i
  %offset.i.i92.i = load i32, ptr %offset_ptr.i.i91.i, align 4
  %768 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract36.i, 0
  %769 = insertvalue { ptr, ptr, ptr, i32 } %768, ptr %766, 1
  %770 = insertvalue { ptr, ptr, ptr, i32 } %769, ptr %767, 2
  %771 = insertvalue { ptr, ptr, ptr, i32 } %770, i32 %offset.i.i92.i, 3
  %772 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %773 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %774 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i)
  %775 = sext i32 %offset.i.i92.i to i64
  %776 = getelementptr ptr, ptr %.fca.0.extract36.i, i64 %775
  %777 = getelementptr i8, ptr %776, i64 64
  %778 = load ptr, ptr %777, align 8
  %779 = call ptr %778({ ptr, ptr, ptr, i32 } %771, ptr nonnull %2)
  %780 = call i32 %779({ ptr, ptr, ptr, i32 } %771, { ptr, ptr, ptr, i32 } %771, ptr nonnull %2)
  %781 = icmp eq i32 %780, %723
  %782 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %783 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %784 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i)
  %785 = getelementptr i8, ptr %776, i64 48
  %786 = load ptr, ptr %785, align 8
  %787 = call ptr %786({ ptr, ptr, ptr, i32 } %771, ptr nonnull %2)
  %788 = call { ptr, i160 } %787({ ptr, ptr, ptr, i32 } %771, { ptr, ptr, ptr, i32 } %771, ptr nonnull %2)
  %789 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %790 = load ptr, ptr %36, align 8
  %791 = call i1 %790({ ptr, i160 } %788, { ptr, i160 } %720)
  %792 = and i1 %781, %791
  br i1 %792, label %HashMap_find_slot_keyK_hashPtri32.exit, label %793

793:                                              ; preds = %765
  %794 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %795 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %796 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i)
  %797 = getelementptr i8, ptr %776, i64 56
  %798 = load ptr, ptr %797, align 8
  %799 = call ptr %798({ ptr, ptr, ptr, i32 } %771, ptr nonnull %2)
  %800 = call { ptr, i160 } %799({ ptr, ptr, ptr, i32 } %771, { ptr, ptr, ptr, i32 } %771, ptr nonnull %2)
  %.fca.0.extract15.i691 = extractvalue { ptr, i160 } %800, 0
  %801 = getelementptr i8, ptr %.fca.0.extract15.i691, i64 8
  %802 = getelementptr i8, ptr %.fca.0.extract15.i691, i64 16
  %803 = getelementptr i8, ptr %.fca.0.extract15.i691, i64 24
  %804 = getelementptr i8, ptr %.fca.0.extract15.i691, i64 32
  %805 = load i64, ptr %801, align 4
  %806 = load i64, ptr %802, align 4
  %807 = load ptr, ptr %803, align 8
  %808 = load ptr, ptr %804, align 8
  %result.i.i692 = call i1 %807(i64 %806, i64 %805, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %808) #3
  %809 = icmp eq i32 %spec.store.select.i796, -1
  %or.cond.i = select i1 %result.i.i692, i1 %809, i1 false
  %spec.store.select.i = select i1 %or.cond.i, i32 %.0..0..0..i, i32 %spec.store.select.i796
  %810 = add i32 %.0..0..0..i, 1
  %811 = and i32 %810, %741
  br label %744

812:                                              ; preds = %744
  %813 = icmp eq i32 %spec.store.select.i796, -1
  %.pre = select i1 %813, i32 %.0..0..0..i, i32 %spec.store.select.i796
  br label %HashMap_find_slot_keyK_hashPtri32.exit

HashMap_find_slot_keyK_hashPtri32.exit:           ; preds = %765, %812
  %814 = phi i32 [ %.pre, %812 ], [ %.0..0..0..i, %765 ]
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %13)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %14)
  %815 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %816 = load ptr, ptr %48, align 8
  %817 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %816, 0
  %818 = load ptr, ptr %49, align 8
  %819 = insertvalue { ptr, ptr, ptr, i32 } %817, ptr %818, 1
  %820 = load ptr, ptr %50, align 8
  %821 = insertvalue { ptr, ptr, ptr, i32 } %819, ptr %820, 2
  %822 = load i32, ptr %51, align 4
  %823 = insertvalue { ptr, ptr, ptr, i32 } %821, i32 %822, 3
  %hash_coef_ptr.i.i58.i = getelementptr i8, ptr %816, i64 8
  %tbl_size_ptr.i.i59.i = getelementptr i8, ptr %816, i64 16
  %offset_tbl_ptr.i.i60.i = getelementptr i8, ptr %816, i64 40
  %hash_coef.i.i61.i = load i64, ptr %hash_coef_ptr.i.i58.i, align 4
  %tbl_size.i.i62.i = load i64, ptr %tbl_size_ptr.i.i59.i, align 4
  %offset_tbl.i.i63.i = load ptr, ptr %offset_tbl_ptr.i.i60.i, align 8
  %product.i.i.i64.i = mul i64 %hash_coef.i.i61.i, -5261542750394134544
  %shifted.i.i.i65.i = lshr i64 %product.i.i.i64.i, 32
  %xored.i.i.i66.i = xor i64 %shifted.i.i.i65.i, %product.i.i.i64.i
  %hash.i.i.i67.i = and i64 %xored.i.i.i66.i, %tbl_size.i.i62.i
  %offset_ptr.i.i68.i = getelementptr i32, ptr %offset_tbl.i.i63.i, i64 %hash.i.i.i67.i
  %offset.i.i69.i = load i32, ptr %offset_ptr.i.i68.i, align 4
  %eq.i.i511 = icmp eq i32 %822, %offset.i.i69.i
  call void @llvm.assume(i1 %eq.i.i511) #30
  store ptr @_parameterization_Ptri32, ptr %22, align 8
  %824 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %22)
  %825 = call ptr @llvm.invariant.start.p0(i64 600, ptr %816)
  %826 = sext i32 %822 to i64
  %827 = getelementptr ptr, ptr %816, i64 %826
  %828 = getelementptr i8, ptr %827, i64 120
  %829 = load ptr, ptr %828, align 8
  store ptr @i32_typ, ptr %23, align 8
  %830 = call ptr %829({ ptr, ptr, ptr, i32 } %823, ptr nonnull %23)
  %831 = call { ptr, i160 } %830({ ptr, ptr, ptr, i32 } %823, { ptr, ptr, ptr, i32 } %823, ptr nonnull %22, i32 %814)
  %.fca.0.extract.i512 = extractvalue { ptr, i160 } %831, 0
  %832 = icmp ne ptr %.fca.0.extract.i512, @nil_typ
  %833 = icmp ne ptr %.fca.0.extract.i512, null
  %.not56.i = and i1 %832, %833
  br i1 %.not56.i, label %834, label %HashMap_get_keyK.exit

834:                                              ; preds = %HashMap_find_slot_keyK_hashPtri32.exit
  %.fca.1.extract.i513 = extractvalue { ptr, i160 } %831, 1
  %.sroa.3.8.extract.trunc.i = trunc i160 %.fca.1.extract.i513 to i64
  %835 = inttoptr i64 %.sroa.3.8.extract.trunc.i to ptr
  %.sroa.5.8.extract.shift.i = lshr i160 %.fca.1.extract.i513, 64
  %.sroa.5.8.extract.trunc.i = trunc i160 %.sroa.5.8.extract.shift.i to i64
  %836 = inttoptr i64 %.sroa.5.8.extract.trunc.i to ptr
  %hash_coef_ptr.i.i72.i = getelementptr i8, ptr %.fca.0.extract.i512, i64 8
  %tbl_size_ptr.i.i73.i = getelementptr i8, ptr %.fca.0.extract.i512, i64 16
  %offset_tbl_ptr.i.i74.i = getelementptr i8, ptr %.fca.0.extract.i512, i64 40
  %hash_coef.i.i75.i = load i64, ptr %hash_coef_ptr.i.i72.i, align 4
  %tbl_size.i.i76.i = load i64, ptr %tbl_size_ptr.i.i73.i, align 4
  %offset_tbl.i.i77.i = load ptr, ptr %offset_tbl_ptr.i.i74.i, align 8
  %product.i.i.i78.i = mul i64 %hash_coef.i.i75.i, 4015701072841558310
  %shifted.i.i.i79.i = lshr i64 %product.i.i.i78.i, 32
  %xored.i.i.i80.i = xor i64 %shifted.i.i.i79.i, %product.i.i.i78.i
  %hash.i.i.i81.i = and i64 %xored.i.i.i80.i, %tbl_size.i.i76.i
  %offset_ptr.i.i82.i = getelementptr i32, ptr %offset_tbl.i.i77.i, i64 %hash.i.i.i81.i
  %offset.i.i83.i = load i32, ptr %offset_ptr.i.i82.i, align 4
  %837 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract.i512, 0
  %838 = insertvalue { ptr, ptr, ptr, i32 } %837, ptr %835, 1
  %839 = insertvalue { ptr, ptr, ptr, i32 } %838, ptr %836, 2
  %840 = insertvalue { ptr, ptr, ptr, i32 } %839, i32 %offset.i.i83.i, 3
  %841 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %842 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %843 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract.i512)
  %844 = sext i32 %offset.i.i83.i to i64
  %845 = getelementptr ptr, ptr %.fca.0.extract.i512, i64 %844
  %846 = getelementptr i8, ptr %845, i64 56
  %847 = load ptr, ptr %846, align 8
  %848 = call ptr %847({ ptr, ptr, ptr, i32 } %840, ptr nonnull %2)
  %849 = call { ptr, i160 } %848({ ptr, ptr, ptr, i32 } %840, { ptr, ptr, ptr, i32 } %840, ptr nonnull %2)
  %.fca.0.extract47.i = extractvalue { ptr, i160 } %849, 0
  %850 = getelementptr i8, ptr %.fca.0.extract47.i, i64 8
  %851 = getelementptr i8, ptr %.fca.0.extract47.i, i64 16
  %852 = getelementptr i8, ptr %.fca.0.extract47.i, i64 24
  %853 = getelementptr i8, ptr %.fca.0.extract47.i, i64 32
  %854 = load i64, ptr %850, align 4
  %855 = load i64, ptr %851, align 4
  %856 = load ptr, ptr %852, align 8
  %857 = load ptr, ptr %853, align 8
  %result.i.i514 = call i1 %856(i64 %855, i64 %854, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %857) #3
  br i1 %result.i.i514, label %HashMap_get_keyK.exit, label %858

858:                                              ; preds = %834
  %result.i85.i = call i1 %856(i64 %855, i64 %854, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr readonly %857) #3
  %cond.fr.i = freeze i1 %result.i85.i
  %spec.select.i = select i1 %cond.fr.i, ptr %.fca.0.extract47.i, ptr @nil_typ
  br label %HashMap_get_keyK.exit

HashMap_get_keyK.exit:                            ; preds = %HashMap_find_slot_keyK_hashPtri32.exit, %834, %858
  %859 = phi ptr [ @nil_typ, %HashMap_find_slot_keyK_hashPtri32.exit ], [ @nil_typ, %834 ], [ %spec.select.i, %858 ]
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %22)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %23)
  %860 = icmp ne ptr %859, @nil_typ
  %861 = icmp ne ptr %859, null
  %.not268 = and i1 %860, %861
  %862 = zext i1 %.not268 to i32
  %.reg2mem75.0 = add i32 %.reg2mem81.0275, %862
  %not..not268 = xor i1 %.not268, true
  %863 = zext i1 %not..not268 to i32
  %.reg2mem77.0 = add i32 %.reg2mem83.0276, %863
  %864 = add nuw nsw i32 %.reg2mem79.0274, 1
  %865 = icmp slt i32 %864, %0
  br i1 %865, label %.lr.ph278, label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit

IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit: ; preds = %HashMap_get_keyK.exit, %._crit_edge1._crit_edge.thread
  %866 = phi i64 [ %704, %._crit_edge1._crit_edge.thread ], [ %715, %HashMap_get_keyK.exit ]
  %.reg2mem81.0.lcssa = phi i32 [ 0, %._crit_edge1._crit_edge.thread ], [ %.reg2mem75.0, %HashMap_get_keyK.exit ]
  %.reg2mem83.0.lcssa = phi i32 [ 0, %._crit_edge1._crit_edge.thread ], [ %.reg2mem77.0, %HashMap_get_keyK.exit ]
  %867 = call i64 @clock()
  %868 = mul i32 %.reg2mem81.0.lcssa, 100
  %869 = sdiv i32 %868, %0
  %870 = icmp slt i32 %869, 5
  %result.i98 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  store <15 x i8> <i8 71, i8 101, i8 116, i8 32, i8 82, i8 97, i8 110, i8 100, i8 111, i8 109, i8 32, i8 77, i8 105, i8 115, i8 115>, ptr %result.i98, align 16
  %result.i99 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %871 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %result.i99, 1
  %872 = insertvalue { ptr, ptr, ptr, i32 } %871, ptr undef, 2
  %873 = insertvalue { ptr, ptr, ptr, i32 } %872, i32 9, 3
  store ptr %result.i98, ptr %result.i99, align 8
  %874 = getelementptr i8, ptr %result.i99, i64 8
  store i32 15, ptr %874, align 4
  %875 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %876 = getelementptr i8, ptr %result.i99, i64 12
  store i32 16, ptr %876, align 4
  %877 = sub i64 %867, %866
  call void @print_benchmark_result({ ptr, ptr, ptr, i32 } %873, i32 %0, i64 %877)
  %result.i100 = call noalias dereferenceable_or_null(19) ptr @bump_malloc_inner(i64 noundef 19, ptr nonnull @current_ptr) #29
  store <18 x i8> <i8 32, i8 32, i8 32, i8 32, i8 86, i8 101, i8 114, i8 105, i8 102, i8 105, i8 99, i8 97, i8 116, i8 105, i8 111, i8 110, i8 58, i8 32>, ptr %result.i100, align 32
  %result.i101 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %878 = getelementptr inbounds i8, ptr %24, i64 8
  %879 = getelementptr inbounds i8, ptr %24, i64 24
  store ptr @String, ptr %24, align 8
  store ptr %result.i101, ptr %878, align 8
  store i32 9, ptr %879, align 8
  %880 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %24)
  store ptr %result.i100, ptr %result.i101, align 8
  %881 = getelementptr i8, ptr %result.i101, i64 8
  store i32 18, ptr %881, align 4
  %882 = getelementptr i8, ptr %result.i101, i64 12
  store i32 19, ptr %882, align 4
  %883 = load i160, ptr %878, align 8
  %884 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %.sroa.3.8.extract.trunc.i519 = trunc i160 %883 to i64
  %885 = inttoptr i64 %.sroa.3.8.extract.trunc.i519 to ptr
  %886 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %887 = getelementptr i8, ptr %885, i64 8
  %888 = load i32, ptr %887, align 4
  %889 = add i32 %888, 1
  %890 = sext i32 %889 to i64
  %result.i.i707 = call noalias ptr @bump_malloc_inner(i64 noundef %890, ptr nonnull @current_ptr) #29
  %891 = load i32, ptr %887, align 4
  %892 = icmp sgt i32 %891, 0
  br i1 %892, label %.lr.ph.i, label %String_c_string_.exit

.lr.ph.i:                                         ; preds = %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit
  %893 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %894 = load ptr, ptr %885, align 8
  %895 = zext nneg i32 %891 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i707, ptr align 1 %894, i64 %895, i1 false)
  br label %String_c_string_.exit

String_c_string_.exit:                            ; preds = %.lr.ph.i, %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit
  %896 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %897 = sext i32 %891 to i64
  %898 = getelementptr i8, ptr %result.i.i707, i64 %897
  store i8 0, ptr %898, align 1
  %puts.i = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i707)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %result.i102 = call noalias dereferenceable_or_null(5) ptr @bump_malloc_inner(i64 noundef 5, ptr nonnull @current_ptr) #29
  %. = select i1 %870, <4 x i8> <i8 80, i8 65, i8 83, i8 83>, <4 x i8> <i8 70, i8 65, i8 73, i8 76>
  %.411 = select i1 %870, ptr %25, ptr %26
  store <4 x i8> %., ptr %result.i102, align 4
  %result.i103 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %.411.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v = select i1 %870, ptr %25, ptr %26
  %.411.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel = getelementptr inbounds i8, ptr %.411.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v, i64 8
  %.411.sroa.sel620.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v = select i1 %870, ptr %25, ptr %26
  %.411.sroa.sel620.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel = getelementptr inbounds i8, ptr %.411.sroa.sel620.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v, i64 24
  store ptr @String, ptr %.411, align 8
  store ptr %result.i103, ptr %.411.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  store i32 9, ptr %.411.sroa.sel620.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  %899 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %.411)
  store ptr %result.i102, ptr %result.i103, align 8
  %900 = getelementptr i8, ptr %result.i103, i64 8
  store i32 4, ptr %900, align 4
  %901 = getelementptr i8, ptr %result.i103, i64 12
  store i32 5, ptr %901, align 4
  %902 = load i160, ptr %.411.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  %903 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %.sroa.3.8.extract.trunc.i538 = trunc i160 %902 to i64
  %904 = inttoptr i64 %.sroa.3.8.extract.trunc.i538 to ptr
  %905 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %906 = getelementptr i8, ptr %904, i64 8
  %907 = load i32, ptr %906, align 4
  %908 = add i32 %907, 1
  %909 = sext i32 %908 to i64
  %result.i.i723 = call noalias ptr @bump_malloc_inner(i64 noundef %909, ptr nonnull @current_ptr) #29
  %910 = load i32, ptr %906, align 4
  %911 = icmp sgt i32 %910, 0
  br i1 %911, label %.lr.ph.i724, label %String_c_string_.exit728

.lr.ph.i724:                                      ; preds = %String_c_string_.exit
  %912 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %913 = load ptr, ptr %904, align 8
  %914 = zext nneg i32 %910 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i723, ptr align 1 %913, i64 %914, i1 false)
  br label %String_c_string_.exit728

String_c_string_.exit728:                         ; preds = %.lr.ph.i724, %String_c_string_.exit
  %915 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %916 = sext i32 %910 to i64
  %917 = getelementptr i8, ptr %result.i.i723, i64 %916
  store i8 0, ptr %917, align 1
  %puts.i554 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i723)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %result.i142 = call noalias dereferenceable_or_null(14) ptr @bump_malloc_inner(i64 noundef 14, ptr nonnull @current_ptr) #29
  store <13 x i8> <i8 32, i8 32, i8 32, i8 32, i8 40, i8 77, i8 105, i8 115, i8 115, i8 101, i8 115, i8 58, i8 32>, ptr %result.i142, align 16
  %result.i143 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %918 = getelementptr inbounds i8, ptr %27, i64 8
  %919 = getelementptr inbounds i8, ptr %27, i64 24
  store ptr @String, ptr %27, align 8
  store ptr %result.i143, ptr %918, align 8
  store i32 9, ptr %919, align 8
  %920 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %27)
  store ptr %result.i142, ptr %result.i143, align 8
  %921 = getelementptr i8, ptr %result.i143, i64 8
  store i32 13, ptr %921, align 4
  %922 = getelementptr i8, ptr %result.i143, i64 12
  store i32 14, ptr %922, align 4
  %923 = load i160, ptr %918, align 8
  %924 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %.sroa.3.8.extract.trunc.i558 = trunc i160 %923 to i64
  %925 = inttoptr i64 %.sroa.3.8.extract.trunc.i558 to ptr
  %926 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %927 = getelementptr i8, ptr %925, i64 8
  %928 = load i32, ptr %927, align 4
  %929 = add i32 %928, 1
  %930 = sext i32 %929 to i64
  %result.i.i743 = call noalias ptr @bump_malloc_inner(i64 noundef %930, ptr nonnull @current_ptr) #29
  %931 = load i32, ptr %927, align 4
  %932 = icmp sgt i32 %931, 0
  br i1 %932, label %.lr.ph.i744, label %String_c_string_.exit748

.lr.ph.i744:                                      ; preds = %String_c_string_.exit728
  %933 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %934 = load ptr, ptr %925, align 8
  %935 = zext nneg i32 %931 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i743, ptr align 1 %934, i64 %935, i1 false)
  br label %String_c_string_.exit748

String_c_string_.exit748:                         ; preds = %.lr.ph.i744, %String_c_string_.exit728
  %936 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %937 = sext i32 %931 to i64
  %938 = getelementptr i8, ptr %result.i.i743, i64 %937
  store i8 0, ptr %938, align 1
  %puts.i574 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i743)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %939 = call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i32_string, i32 %.reg2mem83.0.lcssa)
  %result.i180 = call noalias dereferenceable_or_null(9) ptr @bump_malloc_inner(i64 noundef 9, ptr nonnull @current_ptr) #29
  store <8 x i8> <i8 44, i8 32, i8 72, i8 105, i8 116, i8 115, i8 58, i8 32>, ptr %result.i180, align 8
  %result.i181 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %940 = getelementptr inbounds i8, ptr %28, i64 8
  %941 = getelementptr inbounds i8, ptr %28, i64 24
  store ptr @String, ptr %28, align 8
  store ptr %result.i181, ptr %940, align 8
  store i32 9, ptr %941, align 8
  %942 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %28)
  store ptr %result.i180, ptr %result.i181, align 8
  %943 = getelementptr i8, ptr %result.i181, i64 8
  store i32 8, ptr %943, align 4
  %944 = getelementptr i8, ptr %result.i181, i64 12
  store i32 9, ptr %944, align 4
  %945 = load i160, ptr %940, align 8
  %946 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %.sroa.3.8.extract.trunc.i579 = trunc i160 %945 to i64
  %947 = inttoptr i64 %.sroa.3.8.extract.trunc.i579 to ptr
  %948 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %949 = getelementptr i8, ptr %947, i64 8
  %950 = load i32, ptr %949, align 4
  %951 = add i32 %950, 1
  %952 = sext i32 %951 to i64
  %result.i.i763 = call noalias ptr @bump_malloc_inner(i64 noundef %952, ptr nonnull @current_ptr) #29
  %953 = load i32, ptr %949, align 4
  %954 = icmp sgt i32 %953, 0
  br i1 %954, label %.lr.ph.i764, label %String_c_string_.exit768

.lr.ph.i764:                                      ; preds = %String_c_string_.exit748
  %955 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %956 = load ptr, ptr %947, align 8
  %957 = zext nneg i32 %953 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i763, ptr align 1 %956, i64 %957, i1 false)
  br label %String_c_string_.exit768

String_c_string_.exit768:                         ; preds = %.lr.ph.i764, %String_c_string_.exit748
  %958 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %959 = sext i32 %953 to i64
  %960 = getelementptr i8, ptr %result.i.i763, i64 %959
  store i8 0, ptr %960, align 1
  %puts.i595 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i763)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %961 = call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i32_string, i32 %.reg2mem81.0.lcssa)
  %result.i218 = call noalias dereferenceable_or_null(2) ptr @bump_malloc_inner(i64 noundef 2, ptr nonnull @current_ptr) #29
  store <1 x i8> <i8 41>, ptr %result.i218, align 1
  %result.i219 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %962 = getelementptr inbounds i8, ptr %29, i64 8
  %963 = getelementptr inbounds i8, ptr %29, i64 24
  store ptr @String, ptr %29, align 8
  store ptr %result.i219, ptr %962, align 8
  store i32 9, ptr %963, align 8
  %964 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %29)
  store ptr %result.i218, ptr %result.i219, align 8
  %965 = getelementptr i8, ptr %result.i219, i64 8
  store i32 1, ptr %965, align 4
  %966 = getelementptr i8, ptr %result.i219, i64 12
  store i32 2, ptr %966, align 4
  %967 = load i160, ptr %962, align 8
  %968 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %.sroa.3.8.extract.trunc.i600 = trunc i160 %967 to i64
  %969 = inttoptr i64 %.sroa.3.8.extract.trunc.i600 to ptr
  %970 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %971 = getelementptr i8, ptr %969, i64 8
  %972 = load i32, ptr %971, align 4
  %973 = add i32 %972, 1
  %974 = sext i32 %973 to i64
  %result.i.i783 = call noalias ptr @bump_malloc_inner(i64 noundef %974, ptr nonnull @current_ptr) #29
  %975 = load i32, ptr %971, align 4
  %976 = icmp sgt i32 %975, 0
  br i1 %976, label %.lr.ph.i784, label %String_c_string_.exit788

.lr.ph.i784:                                      ; preds = %String_c_string_.exit768
  %977 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %978 = load ptr, ptr %969, align 8
  %979 = zext nneg i32 %975 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i783, ptr align 1 %978, i64 %979, i1 false)
  br label %String_c_string_.exit788

String_c_string_.exit788:                         ; preds = %.lr.ph.i784, %String_c_string_.exit768
  %980 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %981 = sext i32 %975 to i64
  %982 = getelementptr i8, ptr %result.i.i783, i64 %981
  store i8 0, ptr %982, align 1
  %puts.i616 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i783)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  ret void
}

define void @benchmark_remove_random(i32 %0) local_unnamed_addr {
  %2 = alloca [0 x ptr], align 8
  %3 = alloca [1 x ptr], align 8
  %4 = alloca { ptr }, align 8
  %5 = alloca [1 x ptr], align 8
  %6 = alloca { ptr }, align 8
  %7 = alloca [1 x ptr], align 8
  %8 = alloca { ptr }, align 8
  %9 = alloca [1 x ptr], align 8
  %10 = alloca { ptr }, align 8
  %11 = alloca { ptr, ptr, ptr, i32 }, align 8
  %12 = alloca [3 x ptr], align 8
  %13 = alloca [2 x ptr], align 8
  %14 = alloca { ptr, ptr }, align 8
  %15 = alloca [1 x ptr], align 8
  %16 = alloca { ptr }, align 8
  %17 = alloca [1 x ptr], align 8
  %18 = alloca { ptr }, align 8
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %20 = alloca [3 x ptr], align 8
  %21 = alloca [2 x ptr], align 8
  %22 = alloca { ptr, ptr }, align 8
  %23 = alloca [1 x ptr], align 8
  %24 = alloca { ptr }, align 8
  %25 = alloca [1 x ptr], align 8
  %26 = alloca { ptr }, align 8
  %27 = alloca [1 x ptr], align 8
  %28 = alloca { ptr }, align 8
  %29 = alloca { ptr, ptr, ptr, i32 }, align 8
  %30 = alloca [2 x ptr], align 8
  %31 = alloca { ptr, ptr }, align 8
  %32 = alloca [1 x ptr], align 8
  %33 = alloca { ptr }, align 8
  %34 = alloca [1 x ptr], align 8
  %35 = alloca { ptr }, align 8
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = alloca [2 x ptr], align 8
  %38 = alloca { ptr, ptr }, align 8
  %39 = alloca [1 x ptr], align 8
  %40 = alloca { ptr }, align 8
  %41 = alloca [1 x ptr], align 8
  %42 = alloca { ptr }, align 8
  %43 = alloca [1 x ptr], align 8
  %44 = alloca { ptr }, align 8
  %45 = alloca { ptr, ptr, ptr, i32 }, align 8
  %46 = alloca { ptr, ptr, ptr, i32 }, align 8
  %47 = alloca [2 x ptr], align 8
  %48 = alloca { ptr, ptr }, align 8
  %49 = alloca [1 x ptr], align 8
  %50 = alloca { ptr }, align 8
  %51 = alloca [1 x ptr], align 8
  %52 = alloca { ptr }, align 8
  %oldProtect.i135 = alloca i32, align 4
  %oldProtect.i131 = alloca i32, align 4
  %oldProtect.i96 = alloca i32, align 4
  %oldProtect.i = alloca i32, align 4
  %.sroa.061.sroa.0 = alloca i8, align 8
  %53 = alloca { ptr, ptr, ptr, i32 }, align 8
  %54 = alloca { ptr, ptr, ptr, i32 }, align 8
  %55 = alloca { ptr, ptr, ptr, i32 }, align 8
  %56 = alloca { ptr, ptr, ptr, i32 }, align 8
  %57 = alloca { ptr, ptr, ptr, i32 }, align 8
  %result.i = tail call noalias dereferenceable_or_null(80) ptr @bump_malloc_inner(i64 noundef 80, ptr nonnull @current_ptr) #29
  store ptr @_parameterization_Ptri32, ptr %result.i, align 8
  %58 = getelementptr i8, ptr %result.i, i64 8
  store ptr @_parameterization_Ptri32, ptr %58, align 8
  %59 = getelementptr i8, ptr %result.i, i64 16
  store ptr @_parameterization_PairPtri32._Ptri32, ptr %59, align 8
  %60 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %result.i)
  %result.i93 = tail call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %oldProtect.i)
  %result.i94 = call i32 @VirtualProtect(ptr %result.i93, i64 16, i32 64, ptr nonnull %oldProtect.i) #16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %oldProtect.i)
  call void @llvm.init.trampoline(ptr %result.i93, ptr nonnull @ewkxrfnucl, ptr nonnull @i32_hasher)
  %ret.i = call ptr @llvm.adjust.trampoline(ptr readonly %result.i93) #31
  %61 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i93)
  %result.i95 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %oldProtect.i96)
  %result.i97 = call i32 @VirtualProtect(ptr %result.i95, i64 16, i32 64, ptr nonnull %oldProtect.i96) #16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %oldProtect.i96)
  call void @llvm.init.trampoline(ptr %result.i95, ptr nonnull @ypuwldfatb, ptr nonnull @i32_eq)
  %ret.i98 = call ptr @llvm.adjust.trampoline(ptr readonly %result.i95) #31
  %62 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i95)
  %63 = getelementptr i8, ptr %result.i, i64 64
  store ptr %ret.i, ptr %63, align 8
  %64 = getelementptr i8, ptr %result.i, i64 72
  store ptr %ret.i98, ptr %64, align 8
  %result.i.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %65 = getelementptr i8, ptr %result.i.i, i64 16
  store ptr @_parameterization_Nil, ptr %65, align 8
  %result.i4.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %66 = getelementptr i8, ptr %result.i4.i, i64 16
  store ptr @_parameterization_Ptri32, ptr %66, align 8
  %67 = getelementptr i8, ptr %result.i4.i, i64 8
  store ptr @_parameterization_Ptri32, ptr %67, align 8
  %68 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i4.i)
  store ptr @Entry, ptr %result.i4.i, align 8
  %69 = getelementptr i8, ptr %result.i.i, i64 8
  store ptr %result.i4.i, ptr %69, align 8
  %70 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i)
  store ptr @union_typ, ptr %result.i.i, align 8
  %result.i5.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i, ptr %result.i5.i, align 8
  %71 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i5.i)
  %72 = getelementptr i8, ptr %result.i5.i, i64 16
  store i32 16, ptr %72, align 4
  %73 = getelementptr i8, ptr %result.i5.i, i64 20
  store i32 16, ptr %73, align 4
  %result.i.i.i = call noalias dereferenceable_or_null(512) ptr @bump_malloc_inner(i64 noundef 512, ptr nonnull @current_ptr) #29
  %74 = getelementptr i8, ptr %result.i5.i, i64 8
  store ptr %result.i.i.i, ptr %74, align 8
  %75 = getelementptr i8, ptr %result.i, i64 24
  store ptr @Array, ptr %75, align 8
  %76 = getelementptr i8, ptr %result.i, i64 32
  store ptr %result.i5.i, ptr %76, align 8
  %77 = getelementptr i8, ptr %result.i, i64 48
  store i32 9, ptr %77, align 4
  %result.i99 = call noalias dereferenceable_or_null(4) ptr @bump_malloc_inner(i64 noundef 4, ptr nonnull @current_ptr) #29
  %78 = call ptr @llvm.invariant.start.p0(i64 40, ptr nonnull @PRNG)
  store i32 101112, ptr %result.i99, align 4
  %result.i114 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr @_parameterization_Ptri32, ptr %result.i114, align 8
  %79 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i114)
  %80 = getelementptr i8, ptr %result.i114, i64 20
  store i32 %0, ptr %80, align 4
  %81 = sext i32 %0 to i64
  %82 = shl nsw i64 %81, 5
  %result.i.i299 = call noalias ptr @bump_malloc_inner(i64 noundef %82, ptr nonnull @current_ptr) #29
  %83 = getelementptr i8, ptr %result.i114, i64 8
  store ptr %result.i.i299, ptr %83, align 8
  %result.i129 = call noalias dereferenceable_or_null(80) ptr @bump_malloc_inner(i64 noundef 80, ptr nonnull @current_ptr) #29
  store ptr @_parameterization_Ptri32, ptr %result.i129, align 8
  %84 = getelementptr i8, ptr %result.i129, i64 8
  store ptr @_parameterization_Ptri1, ptr %84, align 8
  %85 = getelementptr i8, ptr %result.i129, i64 16
  store ptr @_parameterization_PairPtri32._Ptri1, ptr %85, align 8
  %86 = call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %result.i129)
  %result.i130 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %oldProtect.i131)
  %result.i132 = call i32 @VirtualProtect(ptr %result.i130, i64 16, i32 64, ptr nonnull %oldProtect.i131) #16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %oldProtect.i131)
  call void @llvm.init.trampoline(ptr %result.i130, ptr nonnull @rhmistbkfh, ptr nonnull @i32_hasher)
  %ret.i133 = call ptr @llvm.adjust.trampoline(ptr readonly %result.i130) #31
  %87 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i130)
  %result.i134 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %oldProtect.i135)
  %result.i136 = call i32 @VirtualProtect(ptr %result.i134, i64 16, i32 64, ptr nonnull %oldProtect.i135) #16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %oldProtect.i135)
  call void @llvm.init.trampoline(ptr %result.i134, ptr nonnull @ucixvevrqu, ptr nonnull @i32_eq)
  %ret.i137 = call ptr @llvm.adjust.trampoline(ptr readonly %result.i134) #31
  %88 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i134)
  %89 = getelementptr i8, ptr %result.i129, i64 64
  store ptr %ret.i133, ptr %89, align 8
  %90 = getelementptr i8, ptr %result.i129, i64 72
  store ptr %ret.i137, ptr %90, align 8
  %result.i.i415 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %91 = getelementptr i8, ptr %result.i.i415, i64 16
  store ptr @_parameterization_Nil, ptr %91, align 8
  %result.i4.i416 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %92 = getelementptr i8, ptr %result.i4.i416, i64 16
  store ptr @_parameterization_Ptri1, ptr %92, align 8
  %93 = getelementptr i8, ptr %result.i4.i416, i64 8
  store ptr @_parameterization_Ptri32, ptr %93, align 8
  %94 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i4.i416)
  store ptr @Entry, ptr %result.i4.i416, align 8
  %95 = getelementptr i8, ptr %result.i.i415, i64 8
  store ptr %result.i4.i416, ptr %95, align 8
  %96 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i415)
  store ptr @union_typ, ptr %result.i.i415, align 8
  %result.i5.i417 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i415, ptr %result.i5.i417, align 8
  %97 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i5.i417)
  %98 = getelementptr i8, ptr %result.i5.i417, i64 16
  store i32 16, ptr %98, align 4
  %99 = getelementptr i8, ptr %result.i5.i417, i64 20
  store i32 16, ptr %99, align 4
  %result.i.i.i418 = call noalias dereferenceable_or_null(512) ptr @bump_malloc_inner(i64 noundef 512, ptr nonnull @current_ptr) #29
  %100 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %101 = getelementptr i8, ptr %result.i5.i417, i64 8
  store ptr %result.i.i.i418, ptr %101, align 8
  %102 = getelementptr i8, ptr %result.i129, i64 24
  store ptr @Array, ptr %102, align 8
  %103 = getelementptr i8, ptr %result.i129, i64 32
  store ptr %result.i5.i417, ptr %103, align 8
  %104 = getelementptr i8, ptr %result.i129, i64 40
  %105 = getelementptr i8, ptr %result.i129, i64 48
  store i32 9, ptr %105, align 4
  %106 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %107 = getelementptr i8, ptr %result.i129, i64 60
  %108 = mul i32 %0, 10
  %109 = getelementptr i8, ptr %result.i, i64 40
  %110 = getelementptr i8, ptr %result.i, i64 60
  %111 = getelementptr inbounds i8, ptr %36, i64 8
  %112 = getelementptr inbounds i8, ptr %36, i64 24
  %113 = getelementptr inbounds i8, ptr %36, i64 16
  %114 = getelementptr inbounds i8, ptr %37, i64 8
  %115 = getelementptr inbounds i8, ptr %38, i64 8
  %116 = getelementptr inbounds i8, ptr %29, i64 8
  %117 = getelementptr inbounds i8, ptr %29, i64 24
  %118 = getelementptr inbounds i8, ptr %29, i64 16
  %119 = getelementptr inbounds i8, ptr %30, i64 8
  %120 = getelementptr inbounds i8, ptr %31, i64 8
  %121 = getelementptr i8, ptr %result.i129, i64 56
  %122 = getelementptr i8, ptr %result.i, i64 56
  %123 = getelementptr inbounds i8, ptr %19, i64 8
  %124 = getelementptr inbounds i8, ptr %19, i64 24
  %125 = getelementptr inbounds i8, ptr %19, i64 16
  %126 = getelementptr inbounds i8, ptr %20, i64 8
  %127 = getelementptr inbounds i8, ptr %20, i64 16
  %128 = getelementptr inbounds i8, ptr %21, i64 8
  %129 = getelementptr inbounds i8, ptr %22, i64 8
  %130 = getelementptr inbounds i8, ptr %11, i64 8
  %131 = getelementptr inbounds i8, ptr %11, i64 24
  %132 = getelementptr inbounds i8, ptr %11, i64 16
  %133 = getelementptr inbounds i8, ptr %12, i64 8
  %134 = getelementptr inbounds i8, ptr %12, i64 16
  %135 = getelementptr inbounds i8, ptr %13, i64 8
  %136 = getelementptr inbounds i8, ptr %14, i64 8
  br label %137

137:                                              ; preds = %1536, %1
  %.reg2mem107.0 = phi i32 [ 0, %1 ], [ %.reg2mem105.0, %1536 ]
  %.reg2mem109.0 = phi i32 [ 0, %1 ], [ %1537, %1536 ]
  %138 = icmp slt i32 %.reg2mem107.0, %0
  br i1 %138, label %139, label %.thread

139:                                              ; preds = %137
  %140 = load i32, ptr %result.i99, align 4
  %141 = mul i32 %140, 1103515245
  %142 = add i32 %141, 12345
  %143 = and i32 %142, 2147483647
  store i32 %143, ptr %result.i99, align 4
  %144 = call ptr @llvm.invariant.start.p0(i64 40, ptr nonnull @PRNG)
  %.sroa.084.0.insert.ext = zext nneg i32 %143 to i160
  %145 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.084.0.insert.ext, 1
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %51)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %52)
  %146 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %147 = load ptr, ptr %89, align 8
  %148 = call i32 %147({ ptr, i160 } %145)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %41)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %42)
  %149 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %150 = load ptr, ptr %102, align 8
  %151 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %150, 0
  %152 = load ptr, ptr %103, align 8
  %153 = insertvalue { ptr, ptr, ptr, i32 } %151, ptr %152, 1
  %154 = load ptr, ptr %104, align 8
  %155 = insertvalue { ptr, ptr, ptr, i32 } %153, ptr %154, 2
  %156 = load i32, ptr %105, align 4
  %157 = insertvalue { ptr, ptr, ptr, i32 } %155, i32 %156, 3
  %hash_coef_ptr.i.i51.i = getelementptr i8, ptr %150, i64 8
  %tbl_size_ptr.i.i52.i = getelementptr i8, ptr %150, i64 16
  %offset_tbl_ptr.i.i53.i = getelementptr i8, ptr %150, i64 40
  %hash_coef.i.i54.i = load i64, ptr %hash_coef_ptr.i.i51.i, align 4
  %tbl_size.i.i55.i = load i64, ptr %tbl_size_ptr.i.i52.i, align 4
  %offset_tbl.i.i56.i = load ptr, ptr %offset_tbl_ptr.i.i53.i, align 8
  %product.i.i.i57.i = mul i64 %hash_coef.i.i54.i, -5261542750394134544
  %shifted.i.i.i58.i = lshr i64 %product.i.i.i57.i, 32
  %xored.i.i.i59.i = xor i64 %shifted.i.i.i58.i, %product.i.i.i57.i
  %hash.i.i.i60.i = and i64 %xored.i.i.i59.i, %tbl_size.i.i55.i
  %offset_ptr.i.i61.i = getelementptr i32, ptr %offset_tbl.i.i56.i, i64 %hash.i.i.i60.i
  %offset.i.i62.i = load i32, ptr %offset_ptr.i.i61.i, align 4
  %eq.i.i740 = icmp eq i32 %156, %offset.i.i62.i
  call void @llvm.assume(i1 %eq.i.i740) #30
  %158 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %159 = call ptr @llvm.invariant.start.p0(i64 600, ptr %150)
  %160 = sext i32 %156 to i64
  %161 = getelementptr ptr, ptr %150, i64 %160
  %162 = getelementptr i8, ptr %161, i64 64
  %163 = load ptr, ptr %162, align 8
  %164 = call ptr %163({ ptr, ptr, ptr, i32 } %157, ptr nonnull %2)
  %165 = call i32 %164({ ptr, ptr, ptr, i32 } %157, { ptr, ptr, ptr, i32 } %157, ptr nonnull %2)
  %166 = add i32 %165, -1
  %167 = and i32 %166, %148
  %168 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  br label %169

169:                                              ; preds = %218, %139
  %spec.store.select.i877 = phi i32 [ %spec.store.select.i, %218 ], [ -1, %139 ]
  %.0..0..0..i = phi i32 [ %236, %218 ], [ %167, %139 ]
  %170 = load ptr, ptr %102, align 8
  %171 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %170, 0
  %172 = load ptr, ptr %103, align 8
  %173 = insertvalue { ptr, ptr, ptr, i32 } %171, ptr %172, 1
  %174 = load ptr, ptr %104, align 8
  %175 = insertvalue { ptr, ptr, ptr, i32 } %173, ptr %174, 2
  %176 = load i32, ptr %105, align 4
  %177 = insertvalue { ptr, ptr, ptr, i32 } %175, i32 %176, 3
  %hash_coef_ptr.i.i65.i = getelementptr i8, ptr %170, i64 8
  %tbl_size_ptr.i.i66.i = getelementptr i8, ptr %170, i64 16
  %offset_tbl_ptr.i.i67.i = getelementptr i8, ptr %170, i64 40
  %hash_coef.i.i68.i = load i64, ptr %hash_coef_ptr.i.i65.i, align 4
  %tbl_size.i.i69.i = load i64, ptr %tbl_size_ptr.i.i66.i, align 4
  %offset_tbl.i.i70.i = load ptr, ptr %offset_tbl_ptr.i.i67.i, align 8
  %product.i.i.i71.i = mul i64 %hash_coef.i.i68.i, -5261542750394134544
  %shifted.i.i.i72.i = lshr i64 %product.i.i.i71.i, 32
  %xored.i.i.i73.i = xor i64 %shifted.i.i.i72.i, %product.i.i.i71.i
  %hash.i.i.i74.i = and i64 %xored.i.i.i73.i, %tbl_size.i.i69.i
  %offset_ptr.i.i75.i = getelementptr i32, ptr %offset_tbl.i.i70.i, i64 %hash.i.i.i74.i
  %offset.i.i76.i = load i32, ptr %offset_ptr.i.i75.i, align 4
  %eq.i79.i = icmp eq i32 %176, %offset.i.i76.i
  call void @llvm.assume(i1 %eq.i79.i) #30
  %178 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  store ptr @_parameterization_Ptri32, ptr %41, align 8
  %179 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %41)
  %180 = call ptr @llvm.invariant.start.p0(i64 600, ptr %170)
  %181 = sext i32 %176 to i64
  %182 = getelementptr ptr, ptr %170, i64 %181
  %183 = getelementptr i8, ptr %182, i64 120
  %184 = load ptr, ptr %183, align 8
  store ptr @i32_typ, ptr %42, align 8
  %185 = call ptr %184({ ptr, ptr, ptr, i32 } %177, ptr nonnull %42)
  %186 = call { ptr, i160 } %185({ ptr, ptr, ptr, i32 } %177, { ptr, ptr, ptr, i32 } %177, ptr nonnull %41, i32 %.0..0..0..i)
  %.fca.0.extract36.i = extractvalue { ptr, i160 } %186, 0
  %187 = icmp eq ptr %.fca.0.extract36.i, @nil_typ
  %188 = icmp eq ptr %.fca.0.extract36.i, null
  %189 = or i1 %187, %188
  br i1 %189, label %237, label %190

190:                                              ; preds = %169
  %.fca.1.extract38.i = extractvalue { ptr, i160 } %186, 1
  %.sroa.5.8.extract.shift.i741 = lshr i160 %.fca.1.extract38.i, 64
  %.sroa.5.8.extract.trunc.i742 = trunc i160 %.sroa.5.8.extract.shift.i741 to i64
  %.sroa.2.8.extract.trunc165.i = trunc i160 %.fca.1.extract38.i to i64
  %191 = inttoptr i64 %.sroa.2.8.extract.trunc165.i to ptr
  %192 = inttoptr i64 %.sroa.5.8.extract.trunc.i742 to ptr
  %hash_coef_ptr.i.i81.i = getelementptr i8, ptr %.fca.0.extract36.i, i64 8
  %tbl_size_ptr.i.i82.i = getelementptr i8, ptr %.fca.0.extract36.i, i64 16
  %offset_tbl_ptr.i.i83.i = getelementptr i8, ptr %.fca.0.extract36.i, i64 40
  %hash_coef.i.i84.i = load i64, ptr %hash_coef_ptr.i.i81.i, align 4
  %tbl_size.i.i85.i = load i64, ptr %tbl_size_ptr.i.i82.i, align 4
  %offset_tbl.i.i86.i = load ptr, ptr %offset_tbl_ptr.i.i83.i, align 8
  %product.i.i.i87.i = mul i64 %hash_coef.i.i84.i, 4015701072841558310
  %shifted.i.i.i88.i = lshr i64 %product.i.i.i87.i, 32
  %xored.i.i.i89.i = xor i64 %shifted.i.i.i88.i, %product.i.i.i87.i
  %hash.i.i.i90.i = and i64 %xored.i.i.i89.i, %tbl_size.i.i85.i
  %offset_ptr.i.i91.i = getelementptr i32, ptr %offset_tbl.i.i86.i, i64 %hash.i.i.i90.i
  %offset.i.i92.i = load i32, ptr %offset_ptr.i.i91.i, align 4
  %193 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract36.i, 0
  %194 = insertvalue { ptr, ptr, ptr, i32 } %193, ptr %191, 1
  %195 = insertvalue { ptr, ptr, ptr, i32 } %194, ptr %192, 2
  %196 = insertvalue { ptr, ptr, ptr, i32 } %195, i32 %offset.i.i92.i, 3
  %197 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %198 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %199 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i)
  %200 = sext i32 %offset.i.i92.i to i64
  %201 = getelementptr ptr, ptr %.fca.0.extract36.i, i64 %200
  %202 = getelementptr i8, ptr %201, i64 64
  %203 = load ptr, ptr %202, align 8
  %204 = call ptr %203({ ptr, ptr, ptr, i32 } %196, ptr nonnull %2)
  %205 = call i32 %204({ ptr, ptr, ptr, i32 } %196, { ptr, ptr, ptr, i32 } %196, ptr nonnull %2)
  %206 = icmp eq i32 %205, %148
  %207 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %208 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %209 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i)
  %210 = getelementptr i8, ptr %201, i64 48
  %211 = load ptr, ptr %210, align 8
  %212 = call ptr %211({ ptr, ptr, ptr, i32 } %196, ptr nonnull %2)
  %213 = call { ptr, i160 } %212({ ptr, ptr, ptr, i32 } %196, { ptr, ptr, ptr, i32 } %196, ptr nonnull %2)
  %214 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %215 = load ptr, ptr %90, align 8
  %216 = call i1 %215({ ptr, i160 } %213, { ptr, i160 } %145)
  %217 = and i1 %206, %216
  br i1 %217, label %HashMap_find_slot_keyK_hashPtri32.exit, label %218

218:                                              ; preds = %190
  %219 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %220 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %221 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i)
  %222 = getelementptr i8, ptr %201, i64 56
  %223 = load ptr, ptr %222, align 8
  %224 = call ptr %223({ ptr, ptr, ptr, i32 } %196, ptr nonnull %2)
  %225 = call { ptr, i160 } %224({ ptr, ptr, ptr, i32 } %196, { ptr, ptr, ptr, i32 } %196, ptr nonnull %2)
  %.fca.0.extract15.i = extractvalue { ptr, i160 } %225, 0
  %226 = getelementptr i8, ptr %.fca.0.extract15.i, i64 8
  %227 = getelementptr i8, ptr %.fca.0.extract15.i, i64 16
  %228 = getelementptr i8, ptr %.fca.0.extract15.i, i64 24
  %229 = getelementptr i8, ptr %.fca.0.extract15.i, i64 32
  %230 = load i64, ptr %226, align 4
  %231 = load i64, ptr %227, align 4
  %232 = load ptr, ptr %228, align 8
  %233 = load ptr, ptr %229, align 8
  %result.i.i743 = call i1 %232(i64 %231, i64 %230, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %233) #3
  %234 = icmp eq i32 %spec.store.select.i877, -1
  %or.cond.i = select i1 %result.i.i743, i1 %234, i1 false
  %spec.store.select.i = select i1 %or.cond.i, i32 %.0..0..0..i, i32 %spec.store.select.i877
  %235 = add i32 %.0..0..0..i, 1
  %236 = and i32 %235, %166
  br label %169

237:                                              ; preds = %169
  %238 = icmp eq i32 %spec.store.select.i877, -1
  %.pre = select i1 %238, i32 %.0..0..0..i, i32 %spec.store.select.i877
  br label %HashMap_find_slot_keyK_hashPtri32.exit

HashMap_find_slot_keyK_hashPtri32.exit:           ; preds = %190, %237
  %239 = phi i32 [ %.pre, %237 ], [ %.0..0..0..i, %190 ]
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %41)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %42)
  %240 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %241 = load ptr, ptr %102, align 8
  %242 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %241, 0
  %243 = load ptr, ptr %103, align 8
  %244 = insertvalue { ptr, ptr, ptr, i32 } %242, ptr %243, 1
  %245 = load ptr, ptr %104, align 8
  %246 = insertvalue { ptr, ptr, ptr, i32 } %244, ptr %245, 2
  %247 = load i32, ptr %105, align 4
  %248 = insertvalue { ptr, ptr, ptr, i32 } %246, i32 %247, 3
  %hash_coef_ptr.i.i58.i = getelementptr i8, ptr %241, i64 8
  %tbl_size_ptr.i.i59.i = getelementptr i8, ptr %241, i64 16
  %offset_tbl_ptr.i.i60.i = getelementptr i8, ptr %241, i64 40
  %hash_coef.i.i61.i = load i64, ptr %hash_coef_ptr.i.i58.i, align 4
  %tbl_size.i.i62.i = load i64, ptr %tbl_size_ptr.i.i59.i, align 4
  %offset_tbl.i.i63.i = load ptr, ptr %offset_tbl_ptr.i.i60.i, align 8
  %product.i.i.i64.i = mul i64 %hash_coef.i.i61.i, -5261542750394134544
  %shifted.i.i.i65.i = lshr i64 %product.i.i.i64.i, 32
  %xored.i.i.i66.i = xor i64 %shifted.i.i.i65.i, %product.i.i.i64.i
  %hash.i.i.i67.i = and i64 %xored.i.i.i66.i, %tbl_size.i.i62.i
  %offset_ptr.i.i68.i = getelementptr i32, ptr %offset_tbl.i.i63.i, i64 %hash.i.i.i67.i
  %offset.i.i69.i = load i32, ptr %offset_ptr.i.i68.i, align 4
  %eq.i.i = icmp eq i32 %247, %offset.i.i69.i
  call void @llvm.assume(i1 %eq.i.i) #30
  store ptr @_parameterization_Ptri32, ptr %51, align 8
  %249 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %51)
  %250 = call ptr @llvm.invariant.start.p0(i64 600, ptr %241)
  %251 = sext i32 %247 to i64
  %252 = getelementptr ptr, ptr %241, i64 %251
  %253 = getelementptr i8, ptr %252, i64 120
  %254 = load ptr, ptr %253, align 8
  store ptr @i32_typ, ptr %52, align 8
  %255 = call ptr %254({ ptr, ptr, ptr, i32 } %248, ptr nonnull %52)
  %256 = call { ptr, i160 } %255({ ptr, ptr, ptr, i32 } %248, { ptr, ptr, ptr, i32 } %248, ptr nonnull %51, i32 %239)
  %.fca.0.extract.i444 = extractvalue { ptr, i160 } %256, 0
  %257 = icmp ne ptr %.fca.0.extract.i444, @nil_typ
  %258 = icmp ne ptr %.fca.0.extract.i444, null
  %.not56.i = and i1 %257, %258
  br i1 %.not56.i, label %259, label %HashMap_get_keyK.exit.thread

259:                                              ; preds = %HashMap_find_slot_keyK_hashPtri32.exit
  %.fca.1.extract.i = extractvalue { ptr, i160 } %256, 1
  %.sroa.3.8.extract.trunc.i = trunc i160 %.fca.1.extract.i to i64
  %260 = inttoptr i64 %.sroa.3.8.extract.trunc.i to ptr
  %.sroa.5.8.extract.shift.i = lshr i160 %.fca.1.extract.i, 64
  %.sroa.5.8.extract.trunc.i = trunc i160 %.sroa.5.8.extract.shift.i to i64
  %261 = inttoptr i64 %.sroa.5.8.extract.trunc.i to ptr
  %hash_coef_ptr.i.i72.i = getelementptr i8, ptr %.fca.0.extract.i444, i64 8
  %tbl_size_ptr.i.i73.i = getelementptr i8, ptr %.fca.0.extract.i444, i64 16
  %offset_tbl_ptr.i.i74.i = getelementptr i8, ptr %.fca.0.extract.i444, i64 40
  %hash_coef.i.i75.i = load i64, ptr %hash_coef_ptr.i.i72.i, align 4
  %tbl_size.i.i76.i = load i64, ptr %tbl_size_ptr.i.i73.i, align 4
  %offset_tbl.i.i77.i = load ptr, ptr %offset_tbl_ptr.i.i74.i, align 8
  %product.i.i.i78.i = mul i64 %hash_coef.i.i75.i, 4015701072841558310
  %shifted.i.i.i79.i = lshr i64 %product.i.i.i78.i, 32
  %xored.i.i.i80.i = xor i64 %shifted.i.i.i79.i, %product.i.i.i78.i
  %hash.i.i.i81.i = and i64 %xored.i.i.i80.i, %tbl_size.i.i76.i
  %offset_ptr.i.i82.i = getelementptr i32, ptr %offset_tbl.i.i77.i, i64 %hash.i.i.i81.i
  %offset.i.i83.i = load i32, ptr %offset_ptr.i.i82.i, align 4
  %262 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract.i444, 0
  %263 = insertvalue { ptr, ptr, ptr, i32 } %262, ptr %260, 1
  %264 = insertvalue { ptr, ptr, ptr, i32 } %263, ptr %261, 2
  %265 = insertvalue { ptr, ptr, ptr, i32 } %264, i32 %offset.i.i83.i, 3
  %266 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %267 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %268 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract.i444)
  %269 = sext i32 %offset.i.i83.i to i64
  %270 = getelementptr ptr, ptr %.fca.0.extract.i444, i64 %269
  %271 = getelementptr i8, ptr %270, i64 56
  %272 = load ptr, ptr %271, align 8
  %273 = call ptr %272({ ptr, ptr, ptr, i32 } %265, ptr nonnull %2)
  %274 = call { ptr, i160 } %273({ ptr, ptr, ptr, i32 } %265, { ptr, ptr, ptr, i32 } %265, ptr nonnull %2)
  %.fca.0.extract47.i = extractvalue { ptr, i160 } %274, 0
  %275 = getelementptr i8, ptr %.fca.0.extract47.i, i64 8
  %276 = getelementptr i8, ptr %.fca.0.extract47.i, i64 16
  %277 = getelementptr i8, ptr %.fca.0.extract47.i, i64 24
  %278 = getelementptr i8, ptr %.fca.0.extract47.i, i64 32
  %279 = load i64, ptr %275, align 4
  %280 = load i64, ptr %276, align 4
  %281 = load ptr, ptr %277, align 8
  %282 = load ptr, ptr %278, align 8
  %result.i.i445 = call i1 %281(i64 %280, i64 %279, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %282) #3
  br i1 %result.i.i445, label %HashMap_get_keyK.exit.thread, label %HashMap_get_keyK.exit

HashMap_get_keyK.exit.thread:                     ; preds = %HashMap_find_slot_keyK_hashPtri32.exit, %259
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %51)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %52)
  br label %286

HashMap_get_keyK.exit:                            ; preds = %259
  %result.i85.i = call i1 %281(i64 %280, i64 %279, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr readonly %282) #3
  %cond.fr.i = freeze i1 %result.i85.i
  %spec.select.i = select i1 %cond.fr.i, ptr %.fca.0.extract47.i, ptr @nil_typ
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %51)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %52)
  %283 = icmp eq ptr %spec.select.i, @nil_typ
  %284 = icmp eq ptr %spec.select.i, null
  %285 = or i1 %283, %284
  br i1 %285, label %286, label %1536

286:                                              ; preds = %HashMap_get_keyK.exit.thread, %HashMap_get_keyK.exit
  %287 = add nuw i32 %143, 1
  %.sroa.070.0.insert.ext = zext i32 %287 to i160
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %288 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %289 = load ptr, ptr %75, align 8
  %290 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %289, 0
  %291 = load ptr, ptr %76, align 8
  %292 = insertvalue { ptr, ptr, ptr, i32 } %290, ptr %291, 1
  %293 = load ptr, ptr %109, align 8
  %294 = insertvalue { ptr, ptr, ptr, i32 } %292, ptr %293, 2
  %295 = load i32, ptr %77, align 4
  %296 = insertvalue { ptr, ptr, ptr, i32 } %294, i32 %295, 3
  %hash_coef_ptr.i.i42.i611 = getelementptr i8, ptr %289, i64 8
  %tbl_size_ptr.i.i43.i612 = getelementptr i8, ptr %289, i64 16
  %offset_tbl_ptr.i.i44.i613 = getelementptr i8, ptr %289, i64 40
  %hash_coef.i.i45.i614 = load i64, ptr %hash_coef_ptr.i.i42.i611, align 4
  %tbl_size.i.i46.i615 = load i64, ptr %tbl_size_ptr.i.i43.i612, align 4
  %offset_tbl.i.i47.i616 = load ptr, ptr %offset_tbl_ptr.i.i44.i613, align 8
  %product.i.i.i48.i617 = mul i64 %hash_coef.i.i45.i614, -5261542750394134544
  %shifted.i.i.i49.i618 = lshr i64 %product.i.i.i48.i617, 32
  %xored.i.i.i50.i619 = xor i64 %shifted.i.i.i49.i618, %product.i.i.i48.i617
  %hash.i.i.i51.i620 = and i64 %xored.i.i.i50.i619, %tbl_size.i.i46.i615
  %offset_ptr.i.i52.i621 = getelementptr i32, ptr %offset_tbl.i.i47.i616, i64 %hash.i.i.i51.i620
  %offset.i.i53.i622 = load i32, ptr %offset_ptr.i.i52.i621, align 4
  %eq.i.i623 = icmp eq i32 %295, %offset.i.i53.i622
  call void @llvm.assume(i1 %eq.i.i623) #30
  %297 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %298 = call ptr @llvm.invariant.start.p0(i64 600, ptr %289)
  %299 = sext i32 %295 to i64
  %300 = getelementptr ptr, ptr %289, i64 %299
  %301 = getelementptr i8, ptr %300, i64 64
  %302 = load ptr, ptr %301, align 8
  %303 = call ptr %302({ ptr, ptr, ptr, i32 } %296, ptr nonnull %2)
  %304 = call i32 %303({ ptr, ptr, ptr, i32 } %296, { ptr, ptr, ptr, i32 } %296, ptr nonnull %2)
  %305 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %306 = load ptr, ptr %75, align 8
  %307 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %306, 0
  %308 = load ptr, ptr %76, align 8
  %309 = insertvalue { ptr, ptr, ptr, i32 } %307, ptr %308, 1
  %310 = load ptr, ptr %109, align 8
  %311 = insertvalue { ptr, ptr, ptr, i32 } %309, ptr %310, 2
  %312 = load i32, ptr %77, align 4
  %313 = insertvalue { ptr, ptr, ptr, i32 } %311, i32 %312, 3
  %hash_coef_ptr.i.i56.i628 = getelementptr i8, ptr %306, i64 8
  %tbl_size_ptr.i.i57.i629 = getelementptr i8, ptr %306, i64 16
  %offset_tbl_ptr.i.i58.i630 = getelementptr i8, ptr %306, i64 40
  %hash_coef.i.i59.i631 = load i64, ptr %hash_coef_ptr.i.i56.i628, align 4
  %tbl_size.i.i60.i632 = load i64, ptr %tbl_size_ptr.i.i57.i629, align 4
  %offset_tbl.i.i61.i633 = load ptr, ptr %offset_tbl_ptr.i.i58.i630, align 8
  %product.i.i.i62.i634 = mul i64 %hash_coef.i.i59.i631, -5261542750394134544
  %shifted.i.i.i63.i635 = lshr i64 %product.i.i.i62.i634, 32
  %xored.i.i.i64.i636 = xor i64 %shifted.i.i.i63.i635, %product.i.i.i62.i634
  %hash.i.i.i65.i637 = and i64 %xored.i.i.i64.i636, %tbl_size.i.i60.i632
  %offset_ptr.i.i66.i638 = getelementptr i32, ptr %offset_tbl.i.i61.i633, i64 %hash.i.i.i65.i637
  %offset.i.i67.i639 = load i32, ptr %offset_ptr.i.i66.i638, align 4
  %eq.i70.i640 = icmp eq i32 %312, %offset.i.i67.i639
  call void @llvm.assume(i1 %eq.i70.i640) #30
  %314 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %315 = call ptr @llvm.invariant.start.p0(i64 600, ptr %306)
  %316 = sext i32 %312 to i64
  %317 = getelementptr ptr, ptr %306, i64 %316
  %318 = getelementptr i8, ptr %317, i64 64
  %319 = load ptr, ptr %318, align 8
  %320 = call ptr %319({ ptr, ptr, ptr, i32 } %313, ptr nonnull %2)
  %321 = call i32 %320({ ptr, ptr, ptr, i32 } %313, { ptr, ptr, ptr, i32 } %313, ptr nonnull %2)
  %322 = icmp eq i32 %321, 0
  %323 = load i32, ptr %110, align 4
  %324 = mul i32 %323, 10
  %325 = add i32 %324, 10
  %326 = mul i32 %304, 7
  %327 = icmp sge i32 %325, %326
  %328 = or i1 %322, %327
  br i1 %328, label %329, label %HashMap_insert_keyK_valueV.exit642

329:                                              ; preds = %286
  %330 = shl i32 %304, 1
  %331 = call i32 @llvm.smax.i32(i32 %330, i32 16)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %32)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %33)
  %332 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %333 = load ptr, ptr %75, align 8
  %334 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %333, 0
  %335 = load ptr, ptr %76, align 8
  %336 = insertvalue { ptr, ptr, ptr, i32 } %334, ptr %335, 1
  %337 = load ptr, ptr %109, align 8
  %338 = insertvalue { ptr, ptr, ptr, i32 } %336, ptr %337, 2
  %339 = load i32, ptr %77, align 4
  %340 = insertvalue { ptr, ptr, ptr, i32 } %338, i32 %339, 3
  %hash_coef_ptr.i.i39.i899 = getelementptr i8, ptr %333, i64 8
  %tbl_size_ptr.i.i40.i900 = getelementptr i8, ptr %333, i64 16
  %offset_tbl_ptr.i.i41.i901 = getelementptr i8, ptr %333, i64 40
  %hash_coef.i.i42.i902 = load i64, ptr %hash_coef_ptr.i.i39.i899, align 4
  %tbl_size.i.i43.i903 = load i64, ptr %tbl_size_ptr.i.i40.i900, align 4
  %offset_tbl.i.i44.i904 = load ptr, ptr %offset_tbl_ptr.i.i41.i901, align 8
  %product.i.i.i45.i905 = mul i64 %hash_coef.i.i42.i902, -5261542750394134544
  %shifted.i.i.i46.i906 = lshr i64 %product.i.i.i45.i905, 32
  %xored.i.i.i47.i907 = xor i64 %shifted.i.i.i46.i906, %product.i.i.i45.i905
  %hash.i.i.i48.i908 = and i64 %xored.i.i.i47.i907, %tbl_size.i.i43.i903
  %offset_ptr.i.i49.i909 = getelementptr i32, ptr %offset_tbl.i.i44.i904, i64 %hash.i.i.i48.i908
  %offset.i.i50.i910 = load i32, ptr %offset_ptr.i.i49.i909, align 4
  %eq.i.i911 = icmp eq i32 %339, %offset.i.i50.i910
  call void @llvm.assume(i1 %eq.i.i911) #30
  %341 = load ptr, ptr %result.i, align 8
  %342 = load ptr, ptr %58, align 8
  %result.i.i912 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %343 = getelementptr i8, ptr %result.i.i912, i64 16
  store ptr @_parameterization_Nil, ptr %343, align 8
  %result.i66.i913 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %344 = getelementptr i8, ptr %result.i66.i913, i64 16
  store ptr %342, ptr %344, align 8
  %345 = getelementptr i8, ptr %result.i66.i913, i64 8
  store ptr %341, ptr %345, align 8
  %346 = getelementptr i8, ptr %result.i66.i913, i64 24
  store ptr null, ptr %346, align 8
  %347 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i66.i913)
  store ptr @Entry, ptr %result.i66.i913, align 8
  %348 = getelementptr i8, ptr %result.i.i912, i64 8
  store ptr %result.i66.i913, ptr %348, align 8
  %349 = getelementptr i8, ptr %result.i.i912, i64 24
  store ptr null, ptr %349, align 8
  %350 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i912)
  store ptr @union_typ, ptr %result.i.i912, align 8
  %result.i67.i914 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i912, ptr %result.i67.i914, align 8
  %351 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i67.i914)
  %352 = getelementptr i8, ptr %result.i67.i914, i64 16
  store i32 %331, ptr %352, align 4
  %353 = getelementptr i8, ptr %result.i67.i914, i64 20
  store i32 %331, ptr %353, align 4
  %354 = zext nneg i32 %331 to i64
  %355 = shl nuw nsw i64 %354, 5
  %result.i.i.i915 = call noalias ptr @bump_malloc_inner(i64 noundef %355, ptr nonnull @current_ptr) #29
  %356 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %357 = getelementptr i8, ptr %result.i67.i914, i64 8
  store ptr %result.i.i.i915, ptr %357, align 8
  store ptr @Array, ptr %75, align 8
  store ptr %result.i67.i914, ptr %76, align 8
  store i32 9, ptr %77, align 4
  store i32 0, ptr %122, align 4
  store i32 0, ptr %110, align 4
  %invariant.gep.i916 = getelementptr i8, ptr %333, i64 64
  %358 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %359 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %360 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %333)
  %361 = sext i32 %339 to i64
  %gep.i1176 = getelementptr ptr, ptr %invariant.gep.i916, i64 %361
  %362 = load ptr, ptr %gep.i1176, align 8
  %363 = call ptr %362({ ptr, ptr, ptr, i32 } %340, ptr nonnull %2)
  %364 = call i32 %363({ ptr, ptr, ptr, i32 } %340, { ptr, ptr, ptr, i32 } %340, ptr nonnull %2)
  %365 = icmp sgt i32 %364, 0
  br i1 %365, label %.lr.ph1179, label %HashMap_resize_new_capacityPtri32.exit942

.lr.ph1179:                                       ; preds = %329
  %invariant.gep172.i917 = getelementptr i8, ptr %333, i64 120
  %366 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %gep173.i919 = getelementptr ptr, ptr %invariant.gep172.i917, i64 %361
  br label %367

367:                                              ; preds = %.lr.ph1179, %._crit_edge3.i918
  %.reg2mem31.0.i1177 = phi i32 [ 0, %.lr.ph1179 ], [ %634, %._crit_edge3.i918 ]
  store ptr @_parameterization_Ptri32, ptr %32, align 8
  %368 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %32)
  %369 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %333)
  %370 = load ptr, ptr %gep173.i919, align 8
  store ptr @i32_typ, ptr %33, align 8
  %371 = call ptr %370({ ptr, ptr, ptr, i32 } %340, ptr nonnull %33)
  %372 = call { ptr, i160 } %371({ ptr, ptr, ptr, i32 } %340, { ptr, ptr, ptr, i32 } %340, ptr nonnull %32, i32 %.reg2mem31.0.i1177)
  %.fca.0.extract30.i920 = extractvalue { ptr, i160 } %372, 0
  %373 = icmp ne ptr %.fca.0.extract30.i920, @nil_typ
  %374 = icmp ne ptr %.fca.0.extract30.i920, null
  %.not37.i921 = and i1 %373, %374
  br i1 %.not37.i921, label %375, label %._crit_edge3.i918

375:                                              ; preds = %367
  %.fca.1.extract32.i922 = extractvalue { ptr, i160 } %372, 1
  %.sroa.5164.8.extract.trunc.i923 = trunc i160 %.fca.1.extract32.i922 to i64
  %376 = inttoptr i64 %.sroa.5164.8.extract.trunc.i923 to ptr
  %.sroa.9.8.extract.shift.i924 = lshr i160 %.fca.1.extract32.i922, 64
  %.sroa.9.8.extract.trunc.i925 = trunc i160 %.sroa.9.8.extract.shift.i924 to i64
  %377 = inttoptr i64 %.sroa.9.8.extract.trunc.i925 to ptr
  %hash_coef_ptr.i.i83.i926 = getelementptr i8, ptr %.fca.0.extract30.i920, i64 8
  %tbl_size_ptr.i.i84.i927 = getelementptr i8, ptr %.fca.0.extract30.i920, i64 16
  %offset_tbl_ptr.i.i85.i928 = getelementptr i8, ptr %.fca.0.extract30.i920, i64 40
  %hash_coef.i.i86.i929 = load i64, ptr %hash_coef_ptr.i.i83.i926, align 4
  %tbl_size.i.i87.i930 = load i64, ptr %tbl_size_ptr.i.i84.i927, align 4
  %offset_tbl.i.i88.i931 = load ptr, ptr %offset_tbl_ptr.i.i85.i928, align 8
  %product.i.i.i89.i932 = mul i64 %hash_coef.i.i86.i929, 4015701072841558310
  %shifted.i.i.i90.i933 = lshr i64 %product.i.i.i89.i932, 32
  %xored.i.i.i91.i934 = xor i64 %shifted.i.i.i90.i933, %product.i.i.i89.i932
  %hash.i.i.i92.i935 = and i64 %xored.i.i.i91.i934, %tbl_size.i.i87.i930
  %offset_ptr.i.i93.i936 = getelementptr i32, ptr %offset_tbl.i.i88.i931, i64 %hash.i.i.i92.i935
  %offset.i.i94.i937 = load i32, ptr %offset_ptr.i.i93.i936, align 4
  %378 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract30.i920, 0
  %379 = insertvalue { ptr, ptr, ptr, i32 } %378, ptr %376, 1
  %380 = insertvalue { ptr, ptr, ptr, i32 } %379, ptr %377, 2
  %381 = insertvalue { ptr, ptr, ptr, i32 } %380, i32 %offset.i.i94.i937, 3
  %382 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %383 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %384 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract30.i920)
  %385 = sext i32 %offset.i.i94.i937 to i64
  %386 = getelementptr ptr, ptr %.fca.0.extract30.i920, i64 %385
  %387 = getelementptr i8, ptr %386, i64 56
  %388 = load ptr, ptr %387, align 8
  %389 = call ptr %388({ ptr, ptr, ptr, i32 } %381, ptr nonnull %2)
  %390 = call { ptr, i160 } %389({ ptr, ptr, ptr, i32 } %381, { ptr, ptr, ptr, i32 } %381, ptr nonnull %2)
  %.fca.0.extract23.i938 = extractvalue { ptr, i160 } %390, 0
  %391 = getelementptr i8, ptr %.fca.0.extract23.i938, i64 8
  %392 = getelementptr i8, ptr %.fca.0.extract23.i938, i64 16
  %393 = getelementptr i8, ptr %.fca.0.extract23.i938, i64 24
  %394 = getelementptr i8, ptr %.fca.0.extract23.i938, i64 32
  %395 = load i64, ptr %391, align 4
  %396 = load i64, ptr %392, align 4
  %397 = load ptr, ptr %393, align 8
  %398 = load ptr, ptr %394, align 8
  %result.i96.i939 = call i1 %397(i64 %396, i64 %395, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %398) #3
  br i1 %result.i96.i939, label %._crit_edge3.i918, label %399

399:                                              ; preds = %375
  %result.i97.i940 = call i1 %397(i64 %396, i64 %395, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr readonly %398) #3
  br i1 %result.i97.i940, label %400, label %._crit_edge3.i918

400:                                              ; preds = %399
  %401 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %402 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %403 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract30.i920)
  %404 = getelementptr i8, ptr %386, i64 48
  %405 = load ptr, ptr %404, align 8
  %406 = call ptr %405({ ptr, ptr, ptr, i32 } %381, ptr nonnull %2)
  %407 = call { ptr, i160 } %406({ ptr, ptr, ptr, i32 } %381, { ptr, ptr, ptr, i32 } %381, ptr nonnull %2)
  %408 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %409 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %410 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract30.i920)
  %411 = getelementptr i8, ptr %386, i64 64
  %412 = load ptr, ptr %411, align 8
  %413 = call ptr %412({ ptr, ptr, ptr, i32 } %381, ptr nonnull %2)
  %414 = call i32 %413({ ptr, ptr, ptr, i32 } %381, { ptr, ptr, ptr, i32 } %381, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %11)
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %12)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %13)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %14)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %415 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %416 = load ptr, ptr %75, align 8
  %417 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %416, 0
  %418 = load ptr, ptr %76, align 8
  %419 = insertvalue { ptr, ptr, ptr, i32 } %417, ptr %418, 1
  %420 = load ptr, ptr %109, align 8
  %421 = insertvalue { ptr, ptr, ptr, i32 } %419, ptr %420, 2
  %422 = load i32, ptr %77, align 4
  %423 = insertvalue { ptr, ptr, ptr, i32 } %421, i32 %422, 3
  %hash_coef_ptr.i.i51.i1701 = getelementptr i8, ptr %416, i64 8
  %tbl_size_ptr.i.i52.i1702 = getelementptr i8, ptr %416, i64 16
  %offset_tbl_ptr.i.i53.i1703 = getelementptr i8, ptr %416, i64 40
  %hash_coef.i.i54.i1704 = load i64, ptr %hash_coef_ptr.i.i51.i1701, align 4
  %tbl_size.i.i55.i1705 = load i64, ptr %tbl_size_ptr.i.i52.i1702, align 4
  %offset_tbl.i.i56.i1706 = load ptr, ptr %offset_tbl_ptr.i.i53.i1703, align 8
  %product.i.i.i57.i1707 = mul i64 %hash_coef.i.i54.i1704, -5261542750394134544
  %shifted.i.i.i58.i1708 = lshr i64 %product.i.i.i57.i1707, 32
  %xored.i.i.i59.i1709 = xor i64 %shifted.i.i.i58.i1708, %product.i.i.i57.i1707
  %hash.i.i.i60.i1710 = and i64 %xored.i.i.i59.i1709, %tbl_size.i.i55.i1705
  %offset_ptr.i.i61.i1711 = getelementptr i32, ptr %offset_tbl.i.i56.i1706, i64 %hash.i.i.i60.i1710
  %offset.i.i62.i1712 = load i32, ptr %offset_ptr.i.i61.i1711, align 4
  %eq.i.i1713 = icmp eq i32 %422, %offset.i.i62.i1712
  call void @llvm.assume(i1 %eq.i.i1713) #30
  %424 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %425 = call ptr @llvm.invariant.start.p0(i64 600, ptr %416)
  %426 = sext i32 %422 to i64
  %427 = getelementptr ptr, ptr %416, i64 %426
  %428 = getelementptr i8, ptr %427, i64 64
  %429 = load ptr, ptr %428, align 8
  %430 = call ptr %429({ ptr, ptr, ptr, i32 } %423, ptr nonnull %2)
  %431 = call i32 %430({ ptr, ptr, ptr, i32 } %423, { ptr, ptr, ptr, i32 } %423, ptr nonnull %2)
  %432 = add i32 %431, -1
  %433 = and i32 %432, %414
  %434 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  br label %435

435:                                              ; preds = %484, %400
  %spec.store.select.i17531772 = phi i32 [ %spec.store.select.i1753, %484 ], [ -1, %400 ]
  %.0..0..0..i1714 = phi i32 [ %502, %484 ], [ %433, %400 ]
  %436 = load ptr, ptr %75, align 8
  %437 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %436, 0
  %438 = load ptr, ptr %76, align 8
  %439 = insertvalue { ptr, ptr, ptr, i32 } %437, ptr %438, 1
  %440 = load ptr, ptr %109, align 8
  %441 = insertvalue { ptr, ptr, ptr, i32 } %439, ptr %440, 2
  %442 = load i32, ptr %77, align 4
  %443 = insertvalue { ptr, ptr, ptr, i32 } %441, i32 %442, 3
  %hash_coef_ptr.i.i65.i1719 = getelementptr i8, ptr %436, i64 8
  %tbl_size_ptr.i.i66.i1720 = getelementptr i8, ptr %436, i64 16
  %offset_tbl_ptr.i.i67.i1721 = getelementptr i8, ptr %436, i64 40
  %hash_coef.i.i68.i1722 = load i64, ptr %hash_coef_ptr.i.i65.i1719, align 4
  %tbl_size.i.i69.i1723 = load i64, ptr %tbl_size_ptr.i.i66.i1720, align 4
  %offset_tbl.i.i70.i1724 = load ptr, ptr %offset_tbl_ptr.i.i67.i1721, align 8
  %product.i.i.i71.i1725 = mul i64 %hash_coef.i.i68.i1722, -5261542750394134544
  %shifted.i.i.i72.i1726 = lshr i64 %product.i.i.i71.i1725, 32
  %xored.i.i.i73.i1727 = xor i64 %shifted.i.i.i72.i1726, %product.i.i.i71.i1725
  %hash.i.i.i74.i1728 = and i64 %xored.i.i.i73.i1727, %tbl_size.i.i69.i1723
  %offset_ptr.i.i75.i1729 = getelementptr i32, ptr %offset_tbl.i.i70.i1724, i64 %hash.i.i.i74.i1728
  %offset.i.i76.i1730 = load i32, ptr %offset_ptr.i.i75.i1729, align 4
  %eq.i79.i1731 = icmp eq i32 %442, %offset.i.i76.i1730
  call void @llvm.assume(i1 %eq.i79.i1731) #30
  %444 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  store ptr @_parameterization_Ptri32, ptr %3, align 8
  %445 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %3)
  %446 = call ptr @llvm.invariant.start.p0(i64 600, ptr %436)
  %447 = sext i32 %442 to i64
  %448 = getelementptr ptr, ptr %436, i64 %447
  %449 = getelementptr i8, ptr %448, i64 120
  %450 = load ptr, ptr %449, align 8
  store ptr @i32_typ, ptr %4, align 8
  %451 = call ptr %450({ ptr, ptr, ptr, i32 } %443, ptr nonnull %4)
  %452 = call { ptr, i160 } %451({ ptr, ptr, ptr, i32 } %443, { ptr, ptr, ptr, i32 } %443, ptr nonnull %3, i32 %.0..0..0..i1714)
  %.fca.0.extract36.i1732 = extractvalue { ptr, i160 } %452, 0
  %453 = icmp eq ptr %.fca.0.extract36.i1732, @nil_typ
  %454 = icmp eq ptr %.fca.0.extract36.i1732, null
  %455 = or i1 %453, %454
  br i1 %455, label %503, label %456

456:                                              ; preds = %435
  %.fca.1.extract38.i1733 = extractvalue { ptr, i160 } %452, 1
  %.sroa.5.8.extract.shift.i1734 = lshr i160 %.fca.1.extract38.i1733, 64
  %.sroa.5.8.extract.trunc.i1735 = trunc i160 %.sroa.5.8.extract.shift.i1734 to i64
  %.sroa.2.8.extract.trunc165.i1736 = trunc i160 %.fca.1.extract38.i1733 to i64
  %457 = inttoptr i64 %.sroa.2.8.extract.trunc165.i1736 to ptr
  %458 = inttoptr i64 %.sroa.5.8.extract.trunc.i1735 to ptr
  %hash_coef_ptr.i.i81.i1737 = getelementptr i8, ptr %.fca.0.extract36.i1732, i64 8
  %tbl_size_ptr.i.i82.i1738 = getelementptr i8, ptr %.fca.0.extract36.i1732, i64 16
  %offset_tbl_ptr.i.i83.i1739 = getelementptr i8, ptr %.fca.0.extract36.i1732, i64 40
  %hash_coef.i.i84.i1740 = load i64, ptr %hash_coef_ptr.i.i81.i1737, align 4
  %tbl_size.i.i85.i1741 = load i64, ptr %tbl_size_ptr.i.i82.i1738, align 4
  %offset_tbl.i.i86.i1742 = load ptr, ptr %offset_tbl_ptr.i.i83.i1739, align 8
  %product.i.i.i87.i1743 = mul i64 %hash_coef.i.i84.i1740, 4015701072841558310
  %shifted.i.i.i88.i1744 = lshr i64 %product.i.i.i87.i1743, 32
  %xored.i.i.i89.i1745 = xor i64 %shifted.i.i.i88.i1744, %product.i.i.i87.i1743
  %hash.i.i.i90.i1746 = and i64 %xored.i.i.i89.i1745, %tbl_size.i.i85.i1741
  %offset_ptr.i.i91.i1747 = getelementptr i32, ptr %offset_tbl.i.i86.i1742, i64 %hash.i.i.i90.i1746
  %offset.i.i92.i1748 = load i32, ptr %offset_ptr.i.i91.i1747, align 4
  %459 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract36.i1732, 0
  %460 = insertvalue { ptr, ptr, ptr, i32 } %459, ptr %457, 1
  %461 = insertvalue { ptr, ptr, ptr, i32 } %460, ptr %458, 2
  %462 = insertvalue { ptr, ptr, ptr, i32 } %461, i32 %offset.i.i92.i1748, 3
  %463 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %464 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %465 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i1732)
  %466 = sext i32 %offset.i.i92.i1748 to i64
  %467 = getelementptr ptr, ptr %.fca.0.extract36.i1732, i64 %466
  %468 = getelementptr i8, ptr %467, i64 64
  %469 = load ptr, ptr %468, align 8
  %470 = call ptr %469({ ptr, ptr, ptr, i32 } %462, ptr nonnull %2)
  %471 = call i32 %470({ ptr, ptr, ptr, i32 } %462, { ptr, ptr, ptr, i32 } %462, ptr nonnull %2)
  %472 = icmp eq i32 %471, %414
  %473 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %474 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %475 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i1732)
  %476 = getelementptr i8, ptr %467, i64 48
  %477 = load ptr, ptr %476, align 8
  %478 = call ptr %477({ ptr, ptr, ptr, i32 } %462, ptr nonnull %2)
  %479 = call { ptr, i160 } %478({ ptr, ptr, ptr, i32 } %462, { ptr, ptr, ptr, i32 } %462, ptr nonnull %2)
  %480 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %481 = load ptr, ptr %64, align 8
  %482 = call i1 %481({ ptr, i160 } %479, { ptr, i160 } %407)
  %483 = and i1 %472, %482
  br i1 %483, label %HashMap_find_slot_keyK_hashPtri32.exit1754, label %484

484:                                              ; preds = %456
  %485 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %486 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %487 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i1732)
  %488 = getelementptr i8, ptr %467, i64 56
  %489 = load ptr, ptr %488, align 8
  %490 = call ptr %489({ ptr, ptr, ptr, i32 } %462, ptr nonnull %2)
  %491 = call { ptr, i160 } %490({ ptr, ptr, ptr, i32 } %462, { ptr, ptr, ptr, i32 } %462, ptr nonnull %2)
  %.fca.0.extract15.i1750 = extractvalue { ptr, i160 } %491, 0
  %492 = getelementptr i8, ptr %.fca.0.extract15.i1750, i64 8
  %493 = getelementptr i8, ptr %.fca.0.extract15.i1750, i64 16
  %494 = getelementptr i8, ptr %.fca.0.extract15.i1750, i64 24
  %495 = getelementptr i8, ptr %.fca.0.extract15.i1750, i64 32
  %496 = load i64, ptr %492, align 4
  %497 = load i64, ptr %493, align 4
  %498 = load ptr, ptr %494, align 8
  %499 = load ptr, ptr %495, align 8
  %result.i.i1751 = call i1 %498(i64 %497, i64 %496, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %499) #3
  %500 = icmp eq i32 %spec.store.select.i17531772, -1
  %or.cond.i1752 = select i1 %result.i.i1751, i1 %500, i1 false
  %spec.store.select.i1753 = select i1 %or.cond.i1752, i32 %.0..0..0..i1714, i32 %spec.store.select.i17531772
  %501 = add i32 %.0..0..0..i1714, 1
  %502 = and i32 %501, %432
  br label %435

503:                                              ; preds = %435
  %504 = icmp eq i32 %spec.store.select.i17531772, -1
  %.pre1796 = select i1 %504, i32 %.0..0..0..i1714, i32 %spec.store.select.i17531772
  br label %HashMap_find_slot_keyK_hashPtri32.exit1754

HashMap_find_slot_keyK_hashPtri32.exit1754:       ; preds = %456, %503
  %505 = phi i32 [ %.pre1796, %503 ], [ %.0..0..0..i1714, %456 ]
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  %506 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %507 = load ptr, ptr %75, align 8
  %508 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %507, 0
  %509 = load ptr, ptr %76, align 8
  %510 = insertvalue { ptr, ptr, ptr, i32 } %508, ptr %509, 1
  %511 = load ptr, ptr %109, align 8
  %512 = insertvalue { ptr, ptr, ptr, i32 } %510, ptr %511, 2
  %513 = load i32, ptr %77, align 4
  %514 = insertvalue { ptr, ptr, ptr, i32 } %512, i32 %513, 3
  %hash_coef_ptr.i.i56.i1403 = getelementptr i8, ptr %507, i64 8
  %tbl_size_ptr.i.i57.i1404 = getelementptr i8, ptr %507, i64 16
  %offset_tbl_ptr.i.i58.i1405 = getelementptr i8, ptr %507, i64 40
  %hash_coef.i.i59.i1406 = load i64, ptr %hash_coef_ptr.i.i56.i1403, align 4
  %tbl_size.i.i60.i1407 = load i64, ptr %tbl_size_ptr.i.i57.i1404, align 4
  %offset_tbl.i.i61.i1408 = load ptr, ptr %offset_tbl_ptr.i.i58.i1405, align 8
  %product.i.i.i62.i1409 = mul i64 %hash_coef.i.i59.i1406, -5261542750394134544
  %shifted.i.i.i63.i1410 = lshr i64 %product.i.i.i62.i1409, 32
  %xored.i.i.i64.i1411 = xor i64 %shifted.i.i.i63.i1410, %product.i.i.i62.i1409
  %hash.i.i.i65.i1412 = and i64 %xored.i.i.i64.i1411, %tbl_size.i.i60.i1407
  %offset_ptr.i.i66.i1413 = getelementptr i32, ptr %offset_tbl.i.i61.i1408, i64 %hash.i.i.i65.i1412
  %offset.i.i67.i1414 = load i32, ptr %offset_ptr.i.i66.i1413, align 4
  %eq.i.i1415 = icmp eq i32 %513, %offset.i.i67.i1414
  call void @llvm.assume(i1 %eq.i.i1415) #30
  store ptr @_parameterization_Ptri32, ptr %9, align 8
  %515 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %9)
  %516 = call ptr @llvm.invariant.start.p0(i64 600, ptr %507)
  %517 = sext i32 %513 to i64
  %518 = getelementptr ptr, ptr %507, i64 %517
  %519 = getelementptr i8, ptr %518, i64 120
  %520 = load ptr, ptr %519, align 8
  store ptr @i32_typ, ptr %10, align 8
  %521 = call ptr %520({ ptr, ptr, ptr, i32 } %514, ptr nonnull %10)
  %522 = call { ptr, i160 } %521({ ptr, ptr, ptr, i32 } %514, { ptr, ptr, ptr, i32 } %514, ptr nonnull %9, i32 %505)
  %.fca.0.extract2.i1416 = extractvalue { ptr, i160 } %522, 0
  %523 = load ptr, ptr %result.i, align 8
  %524 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %525 = load ptr, ptr %58, align 8
  %526 = load ptr, ptr %523, align 8
  %527 = getelementptr i8, ptr %526, i64 48
  %528 = load ptr, ptr %527, align 8
  %529 = call { i64, i64 } %528(ptr nonnull %523)
  %530 = extractvalue { i64, i64 } %529, 0
  %531 = extractvalue { i64, i64 } %529, 1
  %532 = call i64 @llvm.umax.i64(i64 %531, i64 8)
  %533 = urem i64 16, %531
  %534 = icmp eq i64 %533, 0
  %535 = sub i64 %531, %533
  %536 = select i1 %534, i64 0, i64 %535
  %537 = add i64 %536, %530
  %538 = add i64 %537, 16
  %539 = and i64 %537, 7
  %540 = icmp eq i64 %539, 0
  %541 = sub nuw nsw i64 40, %539
  %542 = select i1 %540, i64 32, i64 %541
  %543 = add i64 %538, %542
  %544 = and i64 %543, 3
  %545 = icmp eq i64 %544, 0
  %546 = sub nuw nsw i64 8, %544
  %547 = select i1 %545, i64 4, i64 %546
  %548 = add i64 %547, %543
  %549 = urem i64 %548, %532
  %550 = icmp eq i64 %549, 0
  %551 = sub i64 %532, %549
  %552 = select i1 %550, i64 0, i64 %551
  %553 = add i64 %548, %552
  %result.i.i1417 = call noalias ptr @bump_malloc_inner(i64 noundef %553, ptr nonnull @current_ptr) #29
  store ptr %523, ptr %result.i.i1417, align 8
  %554 = getelementptr i8, ptr %result.i.i1417, i64 8
  store ptr %525, ptr %554, align 8
  %555 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i.i1417)
  store ptr @Entry, ptr %11, align 8
  store ptr %result.i.i1417, ptr %130, align 8
  store i32 9, ptr %131, align 8
  %556 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %11)
  %557 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Entry, ptr undef, ptr undef, i32 undef }, ptr %result.i.i1417, 1
  %558 = insertvalue { ptr, ptr, ptr, i32 } %557, ptr undef, 2
  %559 = insertvalue { ptr, ptr, ptr, i32 } %558, i32 9, 3
  %560 = load ptr, ptr %result.i, align 8
  %561 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %562 = load ptr, ptr %58, align 8
  store ptr %560, ptr %12, align 8
  store ptr %562, ptr %133, align 8
  store ptr @_parameterization_Ptri32, ptr %134, align 8
  %563 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %12)
  %564 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %565 = load i64, ptr %391, align 4
  %566 = load i64, ptr %392, align 4
  %567 = load ptr, ptr %393, align 8
  %568 = load ptr, ptr %394, align 8
  %result.i.i.i1418 = call i1 %567(i64 %566, i64 %565, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr readonly %568) #3
  %569 = select i1 %result.i.i.i1418, i64 10, i64 9
  %gep1564 = getelementptr [14 x ptr], ptr getelementptr inbounds (i8, ptr @Entry, i64 72), i64 0, i64 %569
  %570 = load ptr, ptr %gep1564, align 8
  call void %570({ ptr, ptr, ptr, i32 } %559, { ptr, ptr, ptr, i32 } %559, ptr nonnull %12, { ptr, i160 } %407, { ptr, i160 } %390, i32 %414)
  %571 = load ptr, ptr %132, align 8
  %572 = ptrtoint ptr %result.i.i1417 to i64
  %573 = ptrtoint ptr %571 to i64
  %.sroa.2.0.insert.ext.i1419 = zext i64 %573 to i160
  %.sroa.2.0.insert.shift.i1420 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i1419, 64
  %.sroa.0.0.insert.ext.i1422 = zext i64 %572 to i160
  %.sroa.2.0.insert.insert.i1421 = or disjoint i160 %.sroa.2.0.insert.shift.i1420, %.sroa.0.0.insert.ext.i1422
  %.sroa.0.0.insert.insert.i1423 = or disjoint i160 %.sroa.2.0.insert.insert.i1421, 3062541302288446171170371466885913903104
  %574 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0.0.insert.insert.i1423, 1
  %575 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %576 = load ptr, ptr %75, align 8
  %577 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %576, 0
  %578 = load ptr, ptr %76, align 8
  %579 = insertvalue { ptr, ptr, ptr, i32 } %577, ptr %578, 1
  %580 = load ptr, ptr %109, align 8
  %581 = insertvalue { ptr, ptr, ptr, i32 } %579, ptr %580, 2
  %582 = load i32, ptr %77, align 4
  %583 = insertvalue { ptr, ptr, ptr, i32 } %581, i32 %582, 3
  %hash_coef_ptr.i.i84.i1427 = getelementptr i8, ptr %576, i64 8
  %tbl_size_ptr.i.i85.i1428 = getelementptr i8, ptr %576, i64 16
  %offset_tbl_ptr.i.i86.i1429 = getelementptr i8, ptr %576, i64 40
  %hash_coef.i.i87.i1430 = load i64, ptr %hash_coef_ptr.i.i84.i1427, align 4
  %tbl_size.i.i88.i1431 = load i64, ptr %tbl_size_ptr.i.i85.i1428, align 4
  %offset_tbl.i.i89.i1432 = load ptr, ptr %offset_tbl_ptr.i.i86.i1429, align 8
  %product.i.i.i90.i1433 = mul i64 %hash_coef.i.i87.i1430, -5261542750394134544
  %shifted.i.i.i91.i1434 = lshr i64 %product.i.i.i90.i1433, 32
  %xored.i.i.i92.i1435 = xor i64 %shifted.i.i.i91.i1434, %product.i.i.i90.i1433
  %hash.i.i.i93.i1436 = and i64 %xored.i.i.i92.i1435, %tbl_size.i.i88.i1431
  %offset_ptr.i.i94.i1437 = getelementptr i32, ptr %offset_tbl.i.i89.i1432, i64 %hash.i.i.i93.i1436
  %offset.i.i95.i1438 = load i32, ptr %offset_ptr.i.i94.i1437, align 4
  %eq.i98.i1439 = icmp eq i32 %582, %offset.i.i95.i1438
  call void @llvm.assume(i1 %eq.i98.i1439) #30
  %584 = load ptr, ptr %result.i, align 8
  %585 = load ptr, ptr %58, align 8
  %result.i99.i1440 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %586 = getelementptr i8, ptr %result.i99.i1440, i64 16
  store ptr %585, ptr %586, align 8
  %587 = getelementptr i8, ptr %result.i99.i1440, i64 8
  store ptr %584, ptr %587, align 8
  %588 = getelementptr i8, ptr %result.i99.i1440, i64 24
  store ptr null, ptr %588, align 8
  %589 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i99.i1440)
  store ptr @Entry, ptr %result.i99.i1440, align 8
  store ptr @_parameterization_Ptri32, ptr %13, align 8
  store ptr %result.i99.i1440, ptr %135, align 8
  %590 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %13)
  %591 = call ptr @llvm.invariant.start.p0(i64 600, ptr %576)
  %592 = sext i32 %582 to i64
  %593 = getelementptr ptr, ptr %576, i64 %592
  %594 = getelementptr i8, ptr %593, i64 128
  %595 = load ptr, ptr %594, align 8
  store ptr @i32_typ, ptr %14, align 8
  store ptr @Entry, ptr %136, align 8
  %596 = call ptr %595({ ptr, ptr, ptr, i32 } %583, ptr nonnull %14)
  call void %596({ ptr, ptr, ptr, i32 } %583, { ptr, ptr, ptr, i32 } %583, ptr nonnull %13, i32 %505, { ptr, i160 } %574)
  %597 = icmp eq ptr %.fca.0.extract2.i1416, @nil_typ
  %598 = icmp eq ptr %.fca.0.extract2.i1416, null
  %599 = or i1 %597, %598
  br i1 %599, label %._crit_edge.thread.i1462, label %._crit_edge.i1441

._crit_edge.thread.i1462:                         ; preds = %HashMap_find_slot_keyK_hashPtri32.exit1754
  %600 = load i32, ptr %122, align 4
  %601 = add i32 %600, 1
  store i32 %601, ptr %122, align 4
  br label %._crit_edge1.sink.split.i1460

._crit_edge.i1441:                                ; preds = %HashMap_find_slot_keyK_hashPtri32.exit1754
  %.fca.1.extract4.i1442 = extractvalue { ptr, i160 } %522, 1
  %.sroa.3192.8.extract.trunc.i1443 = trunc i160 %.fca.1.extract4.i1442 to i64
  %602 = inttoptr i64 %.sroa.3192.8.extract.trunc.i1443 to ptr
  %.sroa.5193.8.extract.shift.i1444 = lshr i160 %.fca.1.extract4.i1442, 64
  %.sroa.5193.8.extract.trunc.i1445 = trunc i160 %.sroa.5193.8.extract.shift.i1444 to i64
  %603 = inttoptr i64 %.sroa.5193.8.extract.trunc.i1445 to ptr
  %hash_coef_ptr.i.i101.i1446 = getelementptr i8, ptr %.fca.0.extract2.i1416, i64 8
  %tbl_size_ptr.i.i102.i1447 = getelementptr i8, ptr %.fca.0.extract2.i1416, i64 16
  %offset_tbl_ptr.i.i103.i1448 = getelementptr i8, ptr %.fca.0.extract2.i1416, i64 40
  %hash_coef.i.i104.i1449 = load i64, ptr %hash_coef_ptr.i.i101.i1446, align 4
  %tbl_size.i.i105.i1450 = load i64, ptr %tbl_size_ptr.i.i102.i1447, align 4
  %offset_tbl.i.i106.i1451 = load ptr, ptr %offset_tbl_ptr.i.i103.i1448, align 8
  %product.i.i.i107.i1452 = mul i64 %hash_coef.i.i104.i1449, 4015701072841558310
  %shifted.i.i.i108.i1453 = lshr i64 %product.i.i.i107.i1452, 32
  %xored.i.i.i109.i1454 = xor i64 %shifted.i.i.i108.i1453, %product.i.i.i107.i1452
  %hash.i.i.i110.i1455 = and i64 %xored.i.i.i109.i1454, %tbl_size.i.i105.i1450
  %offset_ptr.i.i111.i1456 = getelementptr i32, ptr %offset_tbl.i.i106.i1451, i64 %hash.i.i.i110.i1455
  %offset.i.i112.i1457 = load i32, ptr %offset_ptr.i.i111.i1456, align 4
  %604 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract2.i1416, 0
  %605 = insertvalue { ptr, ptr, ptr, i32 } %604, ptr %602, 1
  %606 = insertvalue { ptr, ptr, ptr, i32 } %605, ptr %603, 2
  %607 = insertvalue { ptr, ptr, ptr, i32 } %606, i32 %offset.i.i112.i1457, 3
  %608 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %609 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %610 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract2.i1416)
  %611 = sext i32 %offset.i.i112.i1457 to i64
  %612 = getelementptr ptr, ptr %.fca.0.extract2.i1416, i64 %611
  %613 = getelementptr i8, ptr %612, i64 56
  %614 = load ptr, ptr %613, align 8
  %615 = call ptr %614({ ptr, ptr, ptr, i32 } %607, ptr nonnull %2)
  %616 = call { ptr, i160 } %615({ ptr, ptr, ptr, i32 } %607, { ptr, ptr, ptr, i32 } %607, ptr nonnull %2)
  %.fca.0.extract45.i1458 = extractvalue { ptr, i160 } %616, 0
  %617 = getelementptr i8, ptr %.fca.0.extract45.i1458, i64 8
  %618 = getelementptr i8, ptr %.fca.0.extract45.i1458, i64 16
  %619 = getelementptr i8, ptr %.fca.0.extract45.i1458, i64 24
  %620 = getelementptr i8, ptr %.fca.0.extract45.i1458, i64 32
  %621 = load i64, ptr %617, align 4
  %622 = load i64, ptr %618, align 4
  %623 = load ptr, ptr %619, align 8
  %624 = load ptr, ptr %620, align 8
  %result.i114.i1459 = call i1 %623(i64 %622, i64 %621, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %624) #3
  br i1 %result.i114.i1459, label %._crit_edge1.sink.split.i1460, label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit1463

._crit_edge1.sink.split.i1460:                    ; preds = %._crit_edge.i1441, %._crit_edge.thread.i1462
  %.sink202.i1461 = phi i64 [ 40, %._crit_edge.thread.i1462 ], [ 32, %._crit_edge.i1441 ]
  %625 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %626 = getelementptr i8, ptr getelementptr inbounds (i8, ptr @HashMap, i64 72), i64 %.sink202.i1461
  %627 = load ptr, ptr %626, align 8
  %628 = load ptr, ptr %627, align 8
  %629 = call i32 %628(ptr nonnull %result.i)
  %630 = add i32 %629, 1
  %631 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %632 = getelementptr i8, ptr %627, i64 8
  %633 = load ptr, ptr %632, align 8
  call void %633(ptr nonnull %result.i, i32 %630)
  br label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit1463

HashMap_insert_internal_keyK_valueV_hashPtri32.exit1463: ; preds = %._crit_edge.i1441, %._crit_edge1.sink.split.i1460
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %11)
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %12)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %13)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %14)
  br label %._crit_edge3.i918

._crit_edge3.i918:                                ; preds = %HashMap_insert_internal_keyK_valueV_hashPtri32.exit1463, %399, %375, %367
  %634 = add nuw nsw i32 %.reg2mem31.0.i1177, 1
  %635 = load ptr, ptr %gep.i1176, align 8
  %636 = call ptr %635({ ptr, ptr, ptr, i32 } %340, ptr nonnull %2)
  %637 = call i32 %636({ ptr, ptr, ptr, i32 } %340, { ptr, ptr, ptr, i32 } %340, ptr nonnull %2)
  %638 = icmp slt i32 %634, %637
  br i1 %638, label %367, label %HashMap_resize_new_capacityPtri32.exit942

HashMap_resize_new_capacityPtri32.exit942:        ; preds = %._crit_edge3.i918, %329
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %32)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %33)
  br label %HashMap_insert_keyK_valueV.exit642

HashMap_insert_keyK_valueV.exit642:               ; preds = %286, %HashMap_resize_new_capacityPtri32.exit942
  %639 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %640 = load ptr, ptr %63, align 8
  %641 = call i32 %640({ ptr, i160 } %145)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %27)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %28)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %29)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %30)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %31)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8)
  %642 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %643 = load ptr, ptr %75, align 8
  %644 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %643, 0
  %645 = load ptr, ptr %76, align 8
  %646 = insertvalue { ptr, ptr, ptr, i32 } %644, ptr %645, 1
  %647 = load ptr, ptr %109, align 8
  %648 = insertvalue { ptr, ptr, ptr, i32 } %646, ptr %647, 2
  %649 = load i32, ptr %77, align 4
  %650 = insertvalue { ptr, ptr, ptr, i32 } %648, i32 %649, 3
  %hash_coef_ptr.i.i51.i1480 = getelementptr i8, ptr %643, i64 8
  %tbl_size_ptr.i.i52.i1481 = getelementptr i8, ptr %643, i64 16
  %offset_tbl_ptr.i.i53.i1482 = getelementptr i8, ptr %643, i64 40
  %hash_coef.i.i54.i1483 = load i64, ptr %hash_coef_ptr.i.i51.i1480, align 4
  %tbl_size.i.i55.i1484 = load i64, ptr %tbl_size_ptr.i.i52.i1481, align 4
  %offset_tbl.i.i56.i1485 = load ptr, ptr %offset_tbl_ptr.i.i53.i1482, align 8
  %product.i.i.i57.i1486 = mul i64 %hash_coef.i.i54.i1483, -5261542750394134544
  %shifted.i.i.i58.i1487 = lshr i64 %product.i.i.i57.i1486, 32
  %xored.i.i.i59.i1488 = xor i64 %shifted.i.i.i58.i1487, %product.i.i.i57.i1486
  %hash.i.i.i60.i1489 = and i64 %xored.i.i.i59.i1488, %tbl_size.i.i55.i1484
  %offset_ptr.i.i61.i1490 = getelementptr i32, ptr %offset_tbl.i.i56.i1485, i64 %hash.i.i.i60.i1489
  %offset.i.i62.i1491 = load i32, ptr %offset_ptr.i.i61.i1490, align 4
  %eq.i.i1492 = icmp eq i32 %649, %offset.i.i62.i1491
  call void @llvm.assume(i1 %eq.i.i1492) #30
  %651 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %652 = call ptr @llvm.invariant.start.p0(i64 600, ptr %643)
  %653 = sext i32 %649 to i64
  %654 = getelementptr ptr, ptr %643, i64 %653
  %655 = getelementptr i8, ptr %654, i64 64
  %656 = load ptr, ptr %655, align 8
  %657 = call ptr %656({ ptr, ptr, ptr, i32 } %650, ptr nonnull %2)
  %658 = call i32 %657({ ptr, ptr, ptr, i32 } %650, { ptr, ptr, ptr, i32 } %650, ptr nonnull %2)
  %659 = add i32 %658, -1
  %660 = and i32 %659, %641
  %661 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  br label %662

662:                                              ; preds = %711, %HashMap_insert_keyK_valueV.exit642
  %spec.store.select.i15321565 = phi i32 [ %spec.store.select.i1532, %711 ], [ -1, %HashMap_insert_keyK_valueV.exit642 ]
  %.0..0..0..i1493 = phi i32 [ %729, %711 ], [ %660, %HashMap_insert_keyK_valueV.exit642 ]
  %663 = load ptr, ptr %75, align 8
  %664 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %663, 0
  %665 = load ptr, ptr %76, align 8
  %666 = insertvalue { ptr, ptr, ptr, i32 } %664, ptr %665, 1
  %667 = load ptr, ptr %109, align 8
  %668 = insertvalue { ptr, ptr, ptr, i32 } %666, ptr %667, 2
  %669 = load i32, ptr %77, align 4
  %670 = insertvalue { ptr, ptr, ptr, i32 } %668, i32 %669, 3
  %hash_coef_ptr.i.i65.i1498 = getelementptr i8, ptr %663, i64 8
  %tbl_size_ptr.i.i66.i1499 = getelementptr i8, ptr %663, i64 16
  %offset_tbl_ptr.i.i67.i1500 = getelementptr i8, ptr %663, i64 40
  %hash_coef.i.i68.i1501 = load i64, ptr %hash_coef_ptr.i.i65.i1498, align 4
  %tbl_size.i.i69.i1502 = load i64, ptr %tbl_size_ptr.i.i66.i1499, align 4
  %offset_tbl.i.i70.i1503 = load ptr, ptr %offset_tbl_ptr.i.i67.i1500, align 8
  %product.i.i.i71.i1504 = mul i64 %hash_coef.i.i68.i1501, -5261542750394134544
  %shifted.i.i.i72.i1505 = lshr i64 %product.i.i.i71.i1504, 32
  %xored.i.i.i73.i1506 = xor i64 %shifted.i.i.i72.i1505, %product.i.i.i71.i1504
  %hash.i.i.i74.i1507 = and i64 %xored.i.i.i73.i1506, %tbl_size.i.i69.i1502
  %offset_ptr.i.i75.i1508 = getelementptr i32, ptr %offset_tbl.i.i70.i1503, i64 %hash.i.i.i74.i1507
  %offset.i.i76.i1509 = load i32, ptr %offset_ptr.i.i75.i1508, align 4
  %eq.i79.i1510 = icmp eq i32 %669, %offset.i.i76.i1509
  call void @llvm.assume(i1 %eq.i79.i1510) #30
  %671 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  store ptr @_parameterization_Ptri32, ptr %7, align 8
  %672 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %7)
  %673 = call ptr @llvm.invariant.start.p0(i64 600, ptr %663)
  %674 = sext i32 %669 to i64
  %675 = getelementptr ptr, ptr %663, i64 %674
  %676 = getelementptr i8, ptr %675, i64 120
  %677 = load ptr, ptr %676, align 8
  store ptr @i32_typ, ptr %8, align 8
  %678 = call ptr %677({ ptr, ptr, ptr, i32 } %670, ptr nonnull %8)
  %679 = call { ptr, i160 } %678({ ptr, ptr, ptr, i32 } %670, { ptr, ptr, ptr, i32 } %670, ptr nonnull %7, i32 %.0..0..0..i1493)
  %.fca.0.extract36.i1511 = extractvalue { ptr, i160 } %679, 0
  %680 = icmp eq ptr %.fca.0.extract36.i1511, @nil_typ
  %681 = icmp eq ptr %.fca.0.extract36.i1511, null
  %682 = or i1 %680, %681
  br i1 %682, label %730, label %683

683:                                              ; preds = %662
  %.fca.1.extract38.i1512 = extractvalue { ptr, i160 } %679, 1
  %.sroa.5.8.extract.shift.i1513 = lshr i160 %.fca.1.extract38.i1512, 64
  %.sroa.5.8.extract.trunc.i1514 = trunc i160 %.sroa.5.8.extract.shift.i1513 to i64
  %.sroa.2.8.extract.trunc165.i1515 = trunc i160 %.fca.1.extract38.i1512 to i64
  %684 = inttoptr i64 %.sroa.2.8.extract.trunc165.i1515 to ptr
  %685 = inttoptr i64 %.sroa.5.8.extract.trunc.i1514 to ptr
  %hash_coef_ptr.i.i81.i1516 = getelementptr i8, ptr %.fca.0.extract36.i1511, i64 8
  %tbl_size_ptr.i.i82.i1517 = getelementptr i8, ptr %.fca.0.extract36.i1511, i64 16
  %offset_tbl_ptr.i.i83.i1518 = getelementptr i8, ptr %.fca.0.extract36.i1511, i64 40
  %hash_coef.i.i84.i1519 = load i64, ptr %hash_coef_ptr.i.i81.i1516, align 4
  %tbl_size.i.i85.i1520 = load i64, ptr %tbl_size_ptr.i.i82.i1517, align 4
  %offset_tbl.i.i86.i1521 = load ptr, ptr %offset_tbl_ptr.i.i83.i1518, align 8
  %product.i.i.i87.i1522 = mul i64 %hash_coef.i.i84.i1519, 4015701072841558310
  %shifted.i.i.i88.i1523 = lshr i64 %product.i.i.i87.i1522, 32
  %xored.i.i.i89.i1524 = xor i64 %shifted.i.i.i88.i1523, %product.i.i.i87.i1522
  %hash.i.i.i90.i1525 = and i64 %xored.i.i.i89.i1524, %tbl_size.i.i85.i1520
  %offset_ptr.i.i91.i1526 = getelementptr i32, ptr %offset_tbl.i.i86.i1521, i64 %hash.i.i.i90.i1525
  %offset.i.i92.i1527 = load i32, ptr %offset_ptr.i.i91.i1526, align 4
  %686 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract36.i1511, 0
  %687 = insertvalue { ptr, ptr, ptr, i32 } %686, ptr %684, 1
  %688 = insertvalue { ptr, ptr, ptr, i32 } %687, ptr %685, 2
  %689 = insertvalue { ptr, ptr, ptr, i32 } %688, i32 %offset.i.i92.i1527, 3
  %690 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %691 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %692 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i1511)
  %693 = sext i32 %offset.i.i92.i1527 to i64
  %694 = getelementptr ptr, ptr %.fca.0.extract36.i1511, i64 %693
  %695 = getelementptr i8, ptr %694, i64 64
  %696 = load ptr, ptr %695, align 8
  %697 = call ptr %696({ ptr, ptr, ptr, i32 } %689, ptr nonnull %2)
  %698 = call i32 %697({ ptr, ptr, ptr, i32 } %689, { ptr, ptr, ptr, i32 } %689, ptr nonnull %2)
  %699 = icmp eq i32 %698, %641
  %700 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %701 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %702 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i1511)
  %703 = getelementptr i8, ptr %694, i64 48
  %704 = load ptr, ptr %703, align 8
  %705 = call ptr %704({ ptr, ptr, ptr, i32 } %689, ptr nonnull %2)
  %706 = call { ptr, i160 } %705({ ptr, ptr, ptr, i32 } %689, { ptr, ptr, ptr, i32 } %689, ptr nonnull %2)
  %707 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %708 = load ptr, ptr %64, align 8
  %709 = call i1 %708({ ptr, i160 } %706, { ptr, i160 } %145)
  %710 = and i1 %699, %709
  br i1 %710, label %HashMap_find_slot_keyK_hashPtri32.exit1533, label %711

711:                                              ; preds = %683
  %712 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %713 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %714 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i1511)
  %715 = getelementptr i8, ptr %694, i64 56
  %716 = load ptr, ptr %715, align 8
  %717 = call ptr %716({ ptr, ptr, ptr, i32 } %689, ptr nonnull %2)
  %718 = call { ptr, i160 } %717({ ptr, ptr, ptr, i32 } %689, { ptr, ptr, ptr, i32 } %689, ptr nonnull %2)
  %.fca.0.extract15.i1529 = extractvalue { ptr, i160 } %718, 0
  %719 = getelementptr i8, ptr %.fca.0.extract15.i1529, i64 8
  %720 = getelementptr i8, ptr %.fca.0.extract15.i1529, i64 16
  %721 = getelementptr i8, ptr %.fca.0.extract15.i1529, i64 24
  %722 = getelementptr i8, ptr %.fca.0.extract15.i1529, i64 32
  %723 = load i64, ptr %719, align 4
  %724 = load i64, ptr %720, align 4
  %725 = load ptr, ptr %721, align 8
  %726 = load ptr, ptr %722, align 8
  %result.i.i1530 = call i1 %725(i64 %724, i64 %723, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %726) #3
  %727 = icmp eq i32 %spec.store.select.i15321565, -1
  %or.cond.i1531 = select i1 %result.i.i1530, i1 %727, i1 false
  %spec.store.select.i1532 = select i1 %or.cond.i1531, i32 %.0..0..0..i1493, i32 %spec.store.select.i15321565
  %728 = add i32 %.0..0..0..i1493, 1
  %729 = and i32 %728, %659
  br label %662

730:                                              ; preds = %662
  %731 = icmp eq i32 %spec.store.select.i15321565, -1
  %.pre1583 = select i1 %731, i32 %.0..0..0..i1493, i32 %spec.store.select.i15321565
  br label %HashMap_find_slot_keyK_hashPtri32.exit1533

HashMap_find_slot_keyK_hashPtri32.exit1533:       ; preds = %683, %730
  %732 = phi i32 [ %.pre1583, %730 ], [ %.0..0..0..i1493, %683 ]
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8)
  %733 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %734 = load ptr, ptr %75, align 8
  %735 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %734, 0
  %736 = load ptr, ptr %76, align 8
  %737 = insertvalue { ptr, ptr, ptr, i32 } %735, ptr %736, 1
  %738 = load ptr, ptr %109, align 8
  %739 = insertvalue { ptr, ptr, ptr, i32 } %737, ptr %738, 2
  %740 = load i32, ptr %77, align 4
  %741 = insertvalue { ptr, ptr, ptr, i32 } %739, i32 %740, 3
  %hash_coef_ptr.i.i56.i960 = getelementptr i8, ptr %734, i64 8
  %tbl_size_ptr.i.i57.i961 = getelementptr i8, ptr %734, i64 16
  %offset_tbl_ptr.i.i58.i962 = getelementptr i8, ptr %734, i64 40
  %hash_coef.i.i59.i963 = load i64, ptr %hash_coef_ptr.i.i56.i960, align 4
  %tbl_size.i.i60.i964 = load i64, ptr %tbl_size_ptr.i.i57.i961, align 4
  %offset_tbl.i.i61.i965 = load ptr, ptr %offset_tbl_ptr.i.i58.i962, align 8
  %product.i.i.i62.i966 = mul i64 %hash_coef.i.i59.i963, -5261542750394134544
  %shifted.i.i.i63.i967 = lshr i64 %product.i.i.i62.i966, 32
  %xored.i.i.i64.i968 = xor i64 %shifted.i.i.i63.i967, %product.i.i.i62.i966
  %hash.i.i.i65.i969 = and i64 %xored.i.i.i64.i968, %tbl_size.i.i60.i964
  %offset_ptr.i.i66.i970 = getelementptr i32, ptr %offset_tbl.i.i61.i965, i64 %hash.i.i.i65.i969
  %offset.i.i67.i971 = load i32, ptr %offset_ptr.i.i66.i970, align 4
  %eq.i.i972 = icmp eq i32 %740, %offset.i.i67.i971
  call void @llvm.assume(i1 %eq.i.i972) #30
  store ptr @_parameterization_Ptri32, ptr %27, align 8
  %742 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %27)
  %743 = call ptr @llvm.invariant.start.p0(i64 600, ptr %734)
  %744 = sext i32 %740 to i64
  %745 = getelementptr ptr, ptr %734, i64 %744
  %746 = getelementptr i8, ptr %745, i64 120
  %747 = load ptr, ptr %746, align 8
  store ptr @i32_typ, ptr %28, align 8
  %748 = call ptr %747({ ptr, ptr, ptr, i32 } %741, ptr nonnull %28)
  %749 = call { ptr, i160 } %748({ ptr, ptr, ptr, i32 } %741, { ptr, ptr, ptr, i32 } %741, ptr nonnull %27, i32 %732)
  %.fca.0.extract2.i973 = extractvalue { ptr, i160 } %749, 0
  %750 = load ptr, ptr %result.i, align 8
  %751 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %752 = load ptr, ptr %58, align 8
  %753 = load ptr, ptr %750, align 8
  %754 = getelementptr i8, ptr %753, i64 48
  %755 = load ptr, ptr %754, align 8
  %756 = call { i64, i64 } %755(ptr nonnull %750)
  %757 = extractvalue { i64, i64 } %756, 0
  %758 = extractvalue { i64, i64 } %756, 1
  %759 = call i64 @llvm.umax.i64(i64 %758, i64 8)
  %760 = urem i64 16, %758
  %761 = icmp eq i64 %760, 0
  %762 = sub i64 %758, %760
  %763 = select i1 %761, i64 0, i64 %762
  %764 = add i64 %763, %757
  %765 = add i64 %764, 16
  %766 = and i64 %764, 7
  %767 = icmp eq i64 %766, 0
  %768 = sub nuw nsw i64 40, %766
  %769 = select i1 %767, i64 32, i64 %768
  %770 = add i64 %765, %769
  %771 = and i64 %770, 3
  %772 = icmp eq i64 %771, 0
  %773 = sub nuw nsw i64 8, %771
  %774 = select i1 %772, i64 4, i64 %773
  %775 = add i64 %774, %770
  %776 = urem i64 %775, %759
  %777 = icmp eq i64 %776, 0
  %778 = sub i64 %759, %776
  %779 = select i1 %777, i64 0, i64 %778
  %780 = add i64 %775, %779
  %result.i.i974 = call noalias ptr @bump_malloc_inner(i64 noundef %780, ptr nonnull @current_ptr) #29
  store ptr %750, ptr %result.i.i974, align 8
  %781 = getelementptr i8, ptr %result.i.i974, i64 8
  store ptr %752, ptr %781, align 8
  %782 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i.i974)
  store ptr @Entry, ptr %29, align 8
  store ptr %result.i.i974, ptr %116, align 8
  store i32 9, ptr %117, align 8
  %783 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %29)
  %784 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %785 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %786 = load ptr, ptr %750, align 8
  %787 = getelementptr i8, ptr %786, i64 48
  %788 = load ptr, ptr %787, align 8
  %789 = call { i64, i64 } %788(ptr nonnull %750)
  %790 = extractvalue { i64, i64 } %789, 1
  %791 = urem i64 16, %790
  %792 = icmp eq i64 %791, 0
  %reass.sub = sub i64 %790, %791
  %793 = add i64 %reass.sub, 16
  %794 = select i1 %792, i64 16, i64 %793
  %795 = getelementptr i8, ptr %result.i.i974, i64 %794
  %796 = load ptr, ptr %result.i.i974, align 8
  %797 = load ptr, ptr %796, align 8
  %798 = getelementptr i8, ptr %797, i64 64
  %799 = load ptr, ptr %798, align 8
  call void %799({ ptr, i160 } %145, ptr nonnull %796, ptr %795)
  %800 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %801 = load ptr, ptr %result.i.i974, align 8
  %802 = load ptr, ptr %801, align 8
  %803 = getelementptr i8, ptr %802, i64 48
  %804 = load ptr, ptr %803, align 8
  %805 = call { i64, i64 } %804(ptr nonnull %801)
  %806 = extractvalue { i64, i64 } %805, 0
  %807 = extractvalue { i64, i64 } %805, 1
  %808 = urem i64 16, %807
  %809 = icmp eq i64 %808, 0
  %810 = sub i64 %807, %808
  %811 = select i1 %809, i64 0, i64 %810
  %812 = add i64 %811, %806
  %813 = and i64 %812, 7
  %814 = icmp eq i64 %813, 0
  %815 = sub nuw nsw i64 8, %813
  %816 = select i1 %814, i64 0, i64 %815
  %817 = getelementptr i8, ptr %result.i.i974, i64 %812
  %818 = getelementptr i8, ptr %817, i64 16
  %819 = getelementptr i8, ptr %818, i64 %816
  store ptr @i32_typ, ptr %819, align 8
  %820 = getelementptr i8, ptr %819, i64 8
  store i160 %.sroa.070.0.insert.ext, ptr %820, align 4
  %821 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %822 = load ptr, ptr %result.i.i974, align 8
  %823 = load ptr, ptr %822, align 8
  %824 = getelementptr i8, ptr %823, i64 48
  %825 = load ptr, ptr %824, align 8
  %826 = call { i64, i64 } %825(ptr nonnull %822)
  %827 = extractvalue { i64, i64 } %826, 0
  %828 = extractvalue { i64, i64 } %826, 1
  %829 = urem i64 16, %828
  %830 = icmp eq i64 %829, 0
  %831 = sub i64 %828, %829
  %832 = select i1 %830, i64 0, i64 %831
  %833 = add i64 %832, %827
  %834 = add i64 %833, 16
  %835 = and i64 %833, 7
  %836 = icmp eq i64 %835, 0
  %837 = sub nuw nsw i64 40, %835
  %838 = select i1 %836, i64 32, i64 %837
  %839 = add i64 %834, %838
  %840 = and i64 %839, 3
  %841 = icmp eq i64 %840, 0
  %842 = sub nuw nsw i64 4, %840
  %843 = select i1 %841, i64 0, i64 %842
  %844 = getelementptr i8, ptr %result.i.i974, i64 %839
  %845 = getelementptr i8, ptr %844, i64 %843
  store i32 %641, ptr %845, align 4
  %846 = load ptr, ptr %118, align 8
  %847 = ptrtoint ptr %result.i.i974 to i64
  %848 = ptrtoint ptr %846 to i64
  %.sroa.2.0.insert.ext.i976 = zext i64 %848 to i160
  %.sroa.2.0.insert.shift.i977 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i976, 64
  %.sroa.0.0.insert.ext.i979 = zext i64 %847 to i160
  %.sroa.2.0.insert.insert.i978 = or disjoint i160 %.sroa.2.0.insert.shift.i977, %.sroa.0.0.insert.ext.i979
  %.sroa.0.0.insert.insert.i980 = or disjoint i160 %.sroa.2.0.insert.insert.i978, 3062541302288446171170371466885913903104
  %849 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0.0.insert.insert.i980, 1
  %850 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %851 = load ptr, ptr %75, align 8
  %852 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %851, 0
  %853 = load ptr, ptr %76, align 8
  %854 = insertvalue { ptr, ptr, ptr, i32 } %852, ptr %853, 1
  %855 = load ptr, ptr %109, align 8
  %856 = insertvalue { ptr, ptr, ptr, i32 } %854, ptr %855, 2
  %857 = load i32, ptr %77, align 4
  %858 = insertvalue { ptr, ptr, ptr, i32 } %856, i32 %857, 3
  %hash_coef_ptr.i.i84.i985 = getelementptr i8, ptr %851, i64 8
  %tbl_size_ptr.i.i85.i986 = getelementptr i8, ptr %851, i64 16
  %offset_tbl_ptr.i.i86.i987 = getelementptr i8, ptr %851, i64 40
  %hash_coef.i.i87.i988 = load i64, ptr %hash_coef_ptr.i.i84.i985, align 4
  %tbl_size.i.i88.i989 = load i64, ptr %tbl_size_ptr.i.i85.i986, align 4
  %offset_tbl.i.i89.i990 = load ptr, ptr %offset_tbl_ptr.i.i86.i987, align 8
  %product.i.i.i90.i991 = mul i64 %hash_coef.i.i87.i988, -5261542750394134544
  %shifted.i.i.i91.i992 = lshr i64 %product.i.i.i90.i991, 32
  %xored.i.i.i92.i993 = xor i64 %shifted.i.i.i91.i992, %product.i.i.i90.i991
  %hash.i.i.i93.i994 = and i64 %xored.i.i.i92.i993, %tbl_size.i.i88.i989
  %offset_ptr.i.i94.i995 = getelementptr i32, ptr %offset_tbl.i.i89.i990, i64 %hash.i.i.i93.i994
  %offset.i.i95.i996 = load i32, ptr %offset_ptr.i.i94.i995, align 4
  %eq.i98.i997 = icmp eq i32 %857, %offset.i.i95.i996
  call void @llvm.assume(i1 %eq.i98.i997) #30
  %859 = load ptr, ptr %result.i, align 8
  %860 = load ptr, ptr %58, align 8
  %result.i99.i998 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %861 = getelementptr i8, ptr %result.i99.i998, i64 16
  store ptr %860, ptr %861, align 8
  %862 = getelementptr i8, ptr %result.i99.i998, i64 8
  store ptr %859, ptr %862, align 8
  %863 = getelementptr i8, ptr %result.i99.i998, i64 24
  store ptr null, ptr %863, align 8
  %864 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i99.i998)
  store ptr @Entry, ptr %result.i99.i998, align 8
  store ptr @_parameterization_Ptri32, ptr %30, align 8
  store ptr %result.i99.i998, ptr %119, align 8
  %865 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %30)
  %866 = call ptr @llvm.invariant.start.p0(i64 600, ptr %851)
  %867 = sext i32 %857 to i64
  %868 = getelementptr ptr, ptr %851, i64 %867
  %869 = getelementptr i8, ptr %868, i64 128
  %870 = load ptr, ptr %869, align 8
  store ptr @i32_typ, ptr %31, align 8
  store ptr @Entry, ptr %120, align 8
  %871 = call ptr %870({ ptr, ptr, ptr, i32 } %858, ptr nonnull %31)
  call void %871({ ptr, ptr, ptr, i32 } %858, { ptr, ptr, ptr, i32 } %858, ptr nonnull %30, i32 %732, { ptr, i160 } %849)
  %872 = icmp eq ptr %.fca.0.extract2.i973, @nil_typ
  %873 = icmp eq ptr %.fca.0.extract2.i973, null
  %874 = or i1 %872, %873
  br i1 %874, label %._crit_edge.thread.i1020, label %._crit_edge.i999

._crit_edge.thread.i1020:                         ; preds = %HashMap_find_slot_keyK_hashPtri32.exit1533
  %875 = load i32, ptr %122, align 4
  %876 = add i32 %875, 1
  store i32 %876, ptr %122, align 4
  br label %._crit_edge1.sink.split.i1018

._crit_edge.i999:                                 ; preds = %HashMap_find_slot_keyK_hashPtri32.exit1533
  %.fca.1.extract4.i1000 = extractvalue { ptr, i160 } %749, 1
  %.sroa.3192.8.extract.trunc.i1001 = trunc i160 %.fca.1.extract4.i1000 to i64
  %877 = inttoptr i64 %.sroa.3192.8.extract.trunc.i1001 to ptr
  %.sroa.5193.8.extract.shift.i1002 = lshr i160 %.fca.1.extract4.i1000, 64
  %.sroa.5193.8.extract.trunc.i1003 = trunc i160 %.sroa.5193.8.extract.shift.i1002 to i64
  %878 = inttoptr i64 %.sroa.5193.8.extract.trunc.i1003 to ptr
  %hash_coef_ptr.i.i101.i1004 = getelementptr i8, ptr %.fca.0.extract2.i973, i64 8
  %tbl_size_ptr.i.i102.i1005 = getelementptr i8, ptr %.fca.0.extract2.i973, i64 16
  %offset_tbl_ptr.i.i103.i1006 = getelementptr i8, ptr %.fca.0.extract2.i973, i64 40
  %hash_coef.i.i104.i1007 = load i64, ptr %hash_coef_ptr.i.i101.i1004, align 4
  %tbl_size.i.i105.i1008 = load i64, ptr %tbl_size_ptr.i.i102.i1005, align 4
  %offset_tbl.i.i106.i1009 = load ptr, ptr %offset_tbl_ptr.i.i103.i1006, align 8
  %product.i.i.i107.i1010 = mul i64 %hash_coef.i.i104.i1007, 4015701072841558310
  %shifted.i.i.i108.i1011 = lshr i64 %product.i.i.i107.i1010, 32
  %xored.i.i.i109.i1012 = xor i64 %shifted.i.i.i108.i1011, %product.i.i.i107.i1010
  %hash.i.i.i110.i1013 = and i64 %xored.i.i.i109.i1012, %tbl_size.i.i105.i1008
  %offset_ptr.i.i111.i1014 = getelementptr i32, ptr %offset_tbl.i.i106.i1009, i64 %hash.i.i.i110.i1013
  %offset.i.i112.i1015 = load i32, ptr %offset_ptr.i.i111.i1014, align 4
  %879 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract2.i973, 0
  %880 = insertvalue { ptr, ptr, ptr, i32 } %879, ptr %877, 1
  %881 = insertvalue { ptr, ptr, ptr, i32 } %880, ptr %878, 2
  %882 = insertvalue { ptr, ptr, ptr, i32 } %881, i32 %offset.i.i112.i1015, 3
  %883 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %884 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %885 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract2.i973)
  %886 = sext i32 %offset.i.i112.i1015 to i64
  %887 = getelementptr ptr, ptr %.fca.0.extract2.i973, i64 %886
  %888 = getelementptr i8, ptr %887, i64 56
  %889 = load ptr, ptr %888, align 8
  %890 = call ptr %889({ ptr, ptr, ptr, i32 } %882, ptr nonnull %2)
  %891 = call { ptr, i160 } %890({ ptr, ptr, ptr, i32 } %882, { ptr, ptr, ptr, i32 } %882, ptr nonnull %2)
  %.fca.0.extract45.i1016 = extractvalue { ptr, i160 } %891, 0
  %892 = getelementptr i8, ptr %.fca.0.extract45.i1016, i64 8
  %893 = getelementptr i8, ptr %.fca.0.extract45.i1016, i64 16
  %894 = getelementptr i8, ptr %.fca.0.extract45.i1016, i64 24
  %895 = getelementptr i8, ptr %.fca.0.extract45.i1016, i64 32
  %896 = load i64, ptr %892, align 4
  %897 = load i64, ptr %893, align 4
  %898 = load ptr, ptr %894, align 8
  %899 = load ptr, ptr %895, align 8
  %result.i114.i1017 = call i1 %898(i64 %897, i64 %896, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %899) #3
  br i1 %result.i114.i1017, label %._crit_edge1.sink.split.i1018, label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit1021

._crit_edge1.sink.split.i1018:                    ; preds = %._crit_edge.i999, %._crit_edge.thread.i1020
  %.sink202.i1019 = phi i64 [ 40, %._crit_edge.thread.i1020 ], [ 32, %._crit_edge.i999 ]
  %900 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %901 = getelementptr i8, ptr getelementptr inbounds (i8, ptr @HashMap, i64 72), i64 %.sink202.i1019
  %902 = load ptr, ptr %901, align 8
  %903 = load ptr, ptr %902, align 8
  %904 = call i32 %903(ptr nonnull %result.i)
  %905 = add i32 %904, 1
  %906 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %907 = getelementptr i8, ptr %902, i64 8
  %908 = load ptr, ptr %907, align 8
  call void %908(ptr nonnull %result.i, i32 %905)
  br label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit1021

HashMap_insert_internal_keyK_valueV_hashPtri32.exit1021: ; preds = %._crit_edge.i999, %._crit_edge1.sink.split.i1018
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %27)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %28)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %29)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %30)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %31)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %909 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %910 = sext i32 %.reg2mem107.0 to i64
  %911 = shl nsw i64 %910, 5
  %912 = getelementptr i8, ptr %result.i.i299, i64 %911
  store ptr @i32_typ, ptr %912, align 8
  %913 = getelementptr i8, ptr %912, i64 8
  store i160 %.sroa.084.0.insert.ext, ptr %913, align 4
  store i1 true, ptr %.sroa.061.sroa.0, align 8
  %.sroa.061.sroa.0.0..sroa.061.sroa.0.0..sroa.061.sroa.0.0..sroa.061.sroa.0.0..sroa.061.sroa.0.0..sroa.061.sroa.0.0..sroa.061.sroa.0.0..sroa.061.sroa.0.0..sroa.061.sroa.0.0..sroa.061.sroa.0.0..sroa.061.sroa.0.0..sroa.061.sroa.0.0..sroa.061.sroa.0.0..sroa.061.sroa.0.0..sroa.061.sroa.0.0..sroa.061.sroa.0.0..sroa.061.sroa.0.0..sroa.061.sroa.0.0..sroa.061.sroa.0.0..sroa.061.sroa.0.0..sroa.061.sroa.0.0..sroa.061.sroa.0.0..sroa.061.sroa.0.0..sroa.061.sroa.0.0..sroa.061.sroa.0.0..sroa.061.0. = load i8, ptr %.sroa.061.sroa.0, align 8
  %.sroa.061.0.insert.ext = zext i8 %.sroa.061.sroa.0.0..sroa.061.sroa.0.0..sroa.061.sroa.0.0..sroa.061.sroa.0.0..sroa.061.sroa.0.0..sroa.061.sroa.0.0..sroa.061.sroa.0.0..sroa.061.sroa.0.0..sroa.061.sroa.0.0..sroa.061.sroa.0.0..sroa.061.sroa.0.0..sroa.061.sroa.0.0..sroa.061.sroa.0.0..sroa.061.sroa.0.0..sroa.061.sroa.0.0..sroa.061.sroa.0.0..sroa.061.sroa.0.0..sroa.061.sroa.0.0..sroa.061.sroa.0.0..sroa.061.sroa.0.0..sroa.061.sroa.0.0..sroa.061.sroa.0.0..sroa.061.sroa.0.0..sroa.061.sroa.0.0..sroa.061.sroa.0.0..sroa.061.0. to i160
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %914 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %915 = load ptr, ptr %102, align 8
  %916 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %915, 0
  %917 = load ptr, ptr %103, align 8
  %918 = insertvalue { ptr, ptr, ptr, i32 } %916, ptr %917, 1
  %919 = load ptr, ptr %104, align 8
  %920 = insertvalue { ptr, ptr, ptr, i32 } %918, ptr %919, 2
  %921 = load i32, ptr %105, align 4
  %922 = insertvalue { ptr, ptr, ptr, i32 } %920, i32 %921, 3
  %hash_coef_ptr.i.i42.i = getelementptr i8, ptr %915, i64 8
  %tbl_size_ptr.i.i43.i = getelementptr i8, ptr %915, i64 16
  %offset_tbl_ptr.i.i44.i = getelementptr i8, ptr %915, i64 40
  %hash_coef.i.i45.i = load i64, ptr %hash_coef_ptr.i.i42.i, align 4
  %tbl_size.i.i46.i = load i64, ptr %tbl_size_ptr.i.i43.i, align 4
  %offset_tbl.i.i47.i = load ptr, ptr %offset_tbl_ptr.i.i44.i, align 8
  %product.i.i.i48.i = mul i64 %hash_coef.i.i45.i, -5261542750394134544
  %shifted.i.i.i49.i = lshr i64 %product.i.i.i48.i, 32
  %xored.i.i.i50.i = xor i64 %shifted.i.i.i49.i, %product.i.i.i48.i
  %hash.i.i.i51.i = and i64 %xored.i.i.i50.i, %tbl_size.i.i46.i
  %offset_ptr.i.i52.i = getelementptr i32, ptr %offset_tbl.i.i47.i, i64 %hash.i.i.i51.i
  %offset.i.i53.i = load i32, ptr %offset_ptr.i.i52.i, align 4
  %eq.i.i473 = icmp eq i32 %921, %offset.i.i53.i
  call void @llvm.assume(i1 %eq.i.i473) #30
  %923 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %924 = call ptr @llvm.invariant.start.p0(i64 600, ptr %915)
  %925 = sext i32 %921 to i64
  %926 = getelementptr ptr, ptr %915, i64 %925
  %927 = getelementptr i8, ptr %926, i64 64
  %928 = load ptr, ptr %927, align 8
  %929 = call ptr %928({ ptr, ptr, ptr, i32 } %922, ptr nonnull %2)
  %930 = call i32 %929({ ptr, ptr, ptr, i32 } %922, { ptr, ptr, ptr, i32 } %922, ptr nonnull %2)
  %931 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %932 = load ptr, ptr %102, align 8
  %933 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %932, 0
  %934 = load ptr, ptr %103, align 8
  %935 = insertvalue { ptr, ptr, ptr, i32 } %933, ptr %934, 1
  %936 = load ptr, ptr %104, align 8
  %937 = insertvalue { ptr, ptr, ptr, i32 } %935, ptr %936, 2
  %938 = load i32, ptr %105, align 4
  %939 = insertvalue { ptr, ptr, ptr, i32 } %937, i32 %938, 3
  %hash_coef_ptr.i.i56.i = getelementptr i8, ptr %932, i64 8
  %tbl_size_ptr.i.i57.i = getelementptr i8, ptr %932, i64 16
  %offset_tbl_ptr.i.i58.i = getelementptr i8, ptr %932, i64 40
  %hash_coef.i.i59.i = load i64, ptr %hash_coef_ptr.i.i56.i, align 4
  %tbl_size.i.i60.i = load i64, ptr %tbl_size_ptr.i.i57.i, align 4
  %offset_tbl.i.i61.i = load ptr, ptr %offset_tbl_ptr.i.i58.i, align 8
  %product.i.i.i62.i = mul i64 %hash_coef.i.i59.i, -5261542750394134544
  %shifted.i.i.i63.i = lshr i64 %product.i.i.i62.i, 32
  %xored.i.i.i64.i = xor i64 %shifted.i.i.i63.i, %product.i.i.i62.i
  %hash.i.i.i65.i = and i64 %xored.i.i.i64.i, %tbl_size.i.i60.i
  %offset_ptr.i.i66.i = getelementptr i32, ptr %offset_tbl.i.i61.i, i64 %hash.i.i.i65.i
  %offset.i.i67.i = load i32, ptr %offset_ptr.i.i66.i, align 4
  %eq.i70.i = icmp eq i32 %938, %offset.i.i67.i
  call void @llvm.assume(i1 %eq.i70.i) #30
  %940 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %941 = call ptr @llvm.invariant.start.p0(i64 600, ptr %932)
  %942 = sext i32 %938 to i64
  %943 = getelementptr ptr, ptr %932, i64 %942
  %944 = getelementptr i8, ptr %943, i64 64
  %945 = load ptr, ptr %944, align 8
  %946 = call ptr %945({ ptr, ptr, ptr, i32 } %939, ptr nonnull %2)
  %947 = call i32 %946({ ptr, ptr, ptr, i32 } %939, { ptr, ptr, ptr, i32 } %939, ptr nonnull %2)
  %948 = icmp eq i32 %947, 0
  %949 = load i32, ptr %107, align 4
  %950 = mul i32 %949, 10
  %951 = add i32 %950, 10
  %952 = mul i32 %930, 7
  %953 = icmp sge i32 %951, %952
  %954 = or i1 %948, %953
  br i1 %954, label %955, label %HashMap_insert_keyK_valueV.exit

955:                                              ; preds = %HashMap_insert_internal_keyK_valueV_hashPtri32.exit1021
  %956 = shl i32 %930, 1
  %957 = call i32 @llvm.smax.i32(i32 %956, i32 16)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %39)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %40)
  %958 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %959 = load ptr, ptr %102, align 8
  %960 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %959, 0
  %961 = load ptr, ptr %103, align 8
  %962 = insertvalue { ptr, ptr, ptr, i32 } %960, ptr %961, 1
  %963 = load ptr, ptr %104, align 8
  %964 = insertvalue { ptr, ptr, ptr, i32 } %962, ptr %963, 2
  %965 = load i32, ptr %105, align 4
  %966 = insertvalue { ptr, ptr, ptr, i32 } %964, i32 %965, 3
  %hash_coef_ptr.i.i39.i = getelementptr i8, ptr %959, i64 8
  %tbl_size_ptr.i.i40.i = getelementptr i8, ptr %959, i64 16
  %offset_tbl_ptr.i.i41.i = getelementptr i8, ptr %959, i64 40
  %hash_coef.i.i42.i = load i64, ptr %hash_coef_ptr.i.i39.i, align 4
  %tbl_size.i.i43.i = load i64, ptr %tbl_size_ptr.i.i40.i, align 4
  %offset_tbl.i.i44.i = load ptr, ptr %offset_tbl_ptr.i.i41.i, align 8
  %product.i.i.i45.i = mul i64 %hash_coef.i.i42.i, -5261542750394134544
  %shifted.i.i.i46.i = lshr i64 %product.i.i.i45.i, 32
  %xored.i.i.i47.i = xor i64 %shifted.i.i.i46.i, %product.i.i.i45.i
  %hash.i.i.i48.i = and i64 %xored.i.i.i47.i, %tbl_size.i.i43.i
  %offset_ptr.i.i49.i = getelementptr i32, ptr %offset_tbl.i.i44.i, i64 %hash.i.i.i48.i
  %offset.i.i50.i = load i32, ptr %offset_ptr.i.i49.i, align 4
  %eq.i.i761 = icmp eq i32 %965, %offset.i.i50.i
  call void @llvm.assume(i1 %eq.i.i761) #30
  %967 = load ptr, ptr %result.i129, align 8
  %968 = load ptr, ptr %84, align 8
  %result.i.i762 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %969 = getelementptr i8, ptr %result.i.i762, i64 16
  store ptr @_parameterization_Nil, ptr %969, align 8
  %result.i66.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %970 = getelementptr i8, ptr %result.i66.i, i64 16
  store ptr %968, ptr %970, align 8
  %971 = getelementptr i8, ptr %result.i66.i, i64 8
  store ptr %967, ptr %971, align 8
  %972 = getelementptr i8, ptr %result.i66.i, i64 24
  store ptr null, ptr %972, align 8
  %973 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i66.i)
  store ptr @Entry, ptr %result.i66.i, align 8
  %974 = getelementptr i8, ptr %result.i.i762, i64 8
  store ptr %result.i66.i, ptr %974, align 8
  %975 = getelementptr i8, ptr %result.i.i762, i64 24
  store ptr null, ptr %975, align 8
  %976 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i762)
  store ptr @union_typ, ptr %result.i.i762, align 8
  %result.i67.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i762, ptr %result.i67.i, align 8
  %977 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i67.i)
  %978 = getelementptr i8, ptr %result.i67.i, i64 16
  store i32 %957, ptr %978, align 4
  %979 = getelementptr i8, ptr %result.i67.i, i64 20
  store i32 %957, ptr %979, align 4
  %980 = zext nneg i32 %957 to i64
  %981 = shl nuw nsw i64 %980, 5
  %result.i.i.i763 = call noalias ptr @bump_malloc_inner(i64 noundef %981, ptr nonnull @current_ptr) #29
  %982 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %983 = getelementptr i8, ptr %result.i67.i, i64 8
  store ptr %result.i.i.i763, ptr %983, align 8
  store ptr @Array, ptr %102, align 8
  store ptr %result.i67.i, ptr %103, align 8
  store i32 9, ptr %105, align 4
  store i32 0, ptr %121, align 4
  store i32 0, ptr %107, align 4
  %invariant.gep.i = getelementptr i8, ptr %959, i64 64
  %984 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %985 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %986 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %959)
  %987 = sext i32 %965 to i64
  %gep.i881 = getelementptr ptr, ptr %invariant.gep.i, i64 %987
  %988 = load ptr, ptr %gep.i881, align 8
  %989 = call ptr %988({ ptr, ptr, ptr, i32 } %966, ptr nonnull %2)
  %990 = call i32 %989({ ptr, ptr, ptr, i32 } %966, { ptr, ptr, ptr, i32 } %966, ptr nonnull %2)
  %991 = icmp sgt i32 %990, 0
  br i1 %991, label %.lr.ph884, label %HashMap_resize_new_capacityPtri32.exit

.lr.ph884:                                        ; preds = %955
  %invariant.gep172.i = getelementptr i8, ptr %959, i64 120
  %992 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %gep173.i = getelementptr ptr, ptr %invariant.gep172.i, i64 %987
  br label %993

993:                                              ; preds = %.lr.ph884, %._crit_edge3.i
  %.reg2mem31.0.i882 = phi i32 [ 0, %.lr.ph884 ], [ %1260, %._crit_edge3.i ]
  store ptr @_parameterization_Ptri32, ptr %39, align 8
  %994 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %39)
  %995 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %959)
  %996 = load ptr, ptr %gep173.i, align 8
  store ptr @i32_typ, ptr %40, align 8
  %997 = call ptr %996({ ptr, ptr, ptr, i32 } %966, ptr nonnull %40)
  %998 = call { ptr, i160 } %997({ ptr, ptr, ptr, i32 } %966, { ptr, ptr, ptr, i32 } %966, ptr nonnull %39, i32 %.reg2mem31.0.i882)
  %.fca.0.extract30.i = extractvalue { ptr, i160 } %998, 0
  %999 = icmp ne ptr %.fca.0.extract30.i, @nil_typ
  %1000 = icmp ne ptr %.fca.0.extract30.i, null
  %.not37.i = and i1 %999, %1000
  br i1 %.not37.i, label %1001, label %._crit_edge3.i

1001:                                             ; preds = %993
  %.fca.1.extract32.i = extractvalue { ptr, i160 } %998, 1
  %.sroa.5164.8.extract.trunc.i = trunc i160 %.fca.1.extract32.i to i64
  %1002 = inttoptr i64 %.sroa.5164.8.extract.trunc.i to ptr
  %.sroa.9.8.extract.shift.i = lshr i160 %.fca.1.extract32.i, 64
  %.sroa.9.8.extract.trunc.i = trunc i160 %.sroa.9.8.extract.shift.i to i64
  %1003 = inttoptr i64 %.sroa.9.8.extract.trunc.i to ptr
  %hash_coef_ptr.i.i83.i = getelementptr i8, ptr %.fca.0.extract30.i, i64 8
  %tbl_size_ptr.i.i84.i = getelementptr i8, ptr %.fca.0.extract30.i, i64 16
  %offset_tbl_ptr.i.i85.i = getelementptr i8, ptr %.fca.0.extract30.i, i64 40
  %hash_coef.i.i86.i = load i64, ptr %hash_coef_ptr.i.i83.i, align 4
  %tbl_size.i.i87.i = load i64, ptr %tbl_size_ptr.i.i84.i, align 4
  %offset_tbl.i.i88.i = load ptr, ptr %offset_tbl_ptr.i.i85.i, align 8
  %product.i.i.i89.i = mul i64 %hash_coef.i.i86.i, 4015701072841558310
  %shifted.i.i.i90.i = lshr i64 %product.i.i.i89.i, 32
  %xored.i.i.i91.i = xor i64 %shifted.i.i.i90.i, %product.i.i.i89.i
  %hash.i.i.i92.i = and i64 %xored.i.i.i91.i, %tbl_size.i.i87.i
  %offset_ptr.i.i93.i = getelementptr i32, ptr %offset_tbl.i.i88.i, i64 %hash.i.i.i92.i
  %offset.i.i94.i = load i32, ptr %offset_ptr.i.i93.i, align 4
  %1004 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract30.i, 0
  %1005 = insertvalue { ptr, ptr, ptr, i32 } %1004, ptr %1002, 1
  %1006 = insertvalue { ptr, ptr, ptr, i32 } %1005, ptr %1003, 2
  %1007 = insertvalue { ptr, ptr, ptr, i32 } %1006, i32 %offset.i.i94.i, 3
  %1008 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1009 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1010 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract30.i)
  %1011 = sext i32 %offset.i.i94.i to i64
  %1012 = getelementptr ptr, ptr %.fca.0.extract30.i, i64 %1011
  %1013 = getelementptr i8, ptr %1012, i64 56
  %1014 = load ptr, ptr %1013, align 8
  %1015 = call ptr %1014({ ptr, ptr, ptr, i32 } %1007, ptr nonnull %2)
  %1016 = call { ptr, i160 } %1015({ ptr, ptr, ptr, i32 } %1007, { ptr, ptr, ptr, i32 } %1007, ptr nonnull %2)
  %.fca.0.extract23.i = extractvalue { ptr, i160 } %1016, 0
  %1017 = getelementptr i8, ptr %.fca.0.extract23.i, i64 8
  %1018 = getelementptr i8, ptr %.fca.0.extract23.i, i64 16
  %1019 = getelementptr i8, ptr %.fca.0.extract23.i, i64 24
  %1020 = getelementptr i8, ptr %.fca.0.extract23.i, i64 32
  %1021 = load i64, ptr %1017, align 4
  %1022 = load i64, ptr %1018, align 4
  %1023 = load ptr, ptr %1019, align 8
  %1024 = load ptr, ptr %1020, align 8
  %result.i96.i = call i1 %1023(i64 %1022, i64 %1021, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %1024) #3
  br i1 %result.i96.i, label %._crit_edge3.i, label %1025

1025:                                             ; preds = %1001
  %result.i97.i = call i1 %1023(i64 %1022, i64 %1021, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr readonly %1024) #3
  br i1 %result.i97.i, label %1026, label %._crit_edge3.i

1026:                                             ; preds = %1025
  %1027 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1028 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1029 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract30.i)
  %1030 = getelementptr i8, ptr %1012, i64 48
  %1031 = load ptr, ptr %1030, align 8
  %1032 = call ptr %1031({ ptr, ptr, ptr, i32 } %1007, ptr nonnull %2)
  %1033 = call { ptr, i160 } %1032({ ptr, ptr, ptr, i32 } %1007, { ptr, ptr, ptr, i32 } %1007, ptr nonnull %2)
  %1034 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1035 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1036 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract30.i)
  %1037 = getelementptr i8, ptr %1012, i64 64
  %1038 = load ptr, ptr %1037, align 8
  %1039 = call ptr %1038({ ptr, ptr, ptr, i32 } %1007, ptr nonnull %2)
  %1040 = call i32 %1039({ ptr, ptr, ptr, i32 } %1007, { ptr, ptr, ptr, i32 } %1007, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %17)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %18)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %19)
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %20)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %21)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %22)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6)
  %1041 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1042 = load ptr, ptr %102, align 8
  %1043 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1042, 0
  %1044 = load ptr, ptr %103, align 8
  %1045 = insertvalue { ptr, ptr, ptr, i32 } %1043, ptr %1044, 1
  %1046 = load ptr, ptr %104, align 8
  %1047 = insertvalue { ptr, ptr, ptr, i32 } %1045, ptr %1046, 2
  %1048 = load i32, ptr %105, align 4
  %1049 = insertvalue { ptr, ptr, ptr, i32 } %1047, i32 %1048, 3
  %hash_coef_ptr.i.i51.i1599 = getelementptr i8, ptr %1042, i64 8
  %tbl_size_ptr.i.i52.i1600 = getelementptr i8, ptr %1042, i64 16
  %offset_tbl_ptr.i.i53.i1601 = getelementptr i8, ptr %1042, i64 40
  %hash_coef.i.i54.i1602 = load i64, ptr %hash_coef_ptr.i.i51.i1599, align 4
  %tbl_size.i.i55.i1603 = load i64, ptr %tbl_size_ptr.i.i52.i1600, align 4
  %offset_tbl.i.i56.i1604 = load ptr, ptr %offset_tbl_ptr.i.i53.i1601, align 8
  %product.i.i.i57.i1605 = mul i64 %hash_coef.i.i54.i1602, -5261542750394134544
  %shifted.i.i.i58.i1606 = lshr i64 %product.i.i.i57.i1605, 32
  %xored.i.i.i59.i1607 = xor i64 %shifted.i.i.i58.i1606, %product.i.i.i57.i1605
  %hash.i.i.i60.i1608 = and i64 %xored.i.i.i59.i1607, %tbl_size.i.i55.i1603
  %offset_ptr.i.i61.i1609 = getelementptr i32, ptr %offset_tbl.i.i56.i1604, i64 %hash.i.i.i60.i1608
  %offset.i.i62.i1610 = load i32, ptr %offset_ptr.i.i61.i1609, align 4
  %eq.i.i1611 = icmp eq i32 %1048, %offset.i.i62.i1610
  call void @llvm.assume(i1 %eq.i.i1611) #30
  %1050 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1051 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1042)
  %1052 = sext i32 %1048 to i64
  %1053 = getelementptr ptr, ptr %1042, i64 %1052
  %1054 = getelementptr i8, ptr %1053, i64 64
  %1055 = load ptr, ptr %1054, align 8
  %1056 = call ptr %1055({ ptr, ptr, ptr, i32 } %1049, ptr nonnull %2)
  %1057 = call i32 %1056({ ptr, ptr, ptr, i32 } %1049, { ptr, ptr, ptr, i32 } %1049, ptr nonnull %2)
  %1058 = add i32 %1057, -1
  %1059 = and i32 %1058, %1040
  %1060 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  br label %1061

1061:                                             ; preds = %1110, %1026
  %spec.store.select.i16461663 = phi i32 [ %spec.store.select.i1646, %1110 ], [ -1, %1026 ]
  %.0..0..0..i1612 = phi i32 [ %1128, %1110 ], [ %1059, %1026 ]
  %1062 = load ptr, ptr %102, align 8
  %1063 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1062, 0
  %1064 = load ptr, ptr %103, align 8
  %1065 = insertvalue { ptr, ptr, ptr, i32 } %1063, ptr %1064, 1
  %1066 = load ptr, ptr %104, align 8
  %1067 = insertvalue { ptr, ptr, ptr, i32 } %1065, ptr %1066, 2
  %1068 = load i32, ptr %105, align 4
  %1069 = insertvalue { ptr, ptr, ptr, i32 } %1067, i32 %1068, 3
  %hash_coef_ptr.i.i65.i1613 = getelementptr i8, ptr %1062, i64 8
  %tbl_size_ptr.i.i66.i1614 = getelementptr i8, ptr %1062, i64 16
  %offset_tbl_ptr.i.i67.i1615 = getelementptr i8, ptr %1062, i64 40
  %hash_coef.i.i68.i1616 = load i64, ptr %hash_coef_ptr.i.i65.i1613, align 4
  %tbl_size.i.i69.i1617 = load i64, ptr %tbl_size_ptr.i.i66.i1614, align 4
  %offset_tbl.i.i70.i1618 = load ptr, ptr %offset_tbl_ptr.i.i67.i1615, align 8
  %product.i.i.i71.i1619 = mul i64 %hash_coef.i.i68.i1616, -5261542750394134544
  %shifted.i.i.i72.i1620 = lshr i64 %product.i.i.i71.i1619, 32
  %xored.i.i.i73.i1621 = xor i64 %shifted.i.i.i72.i1620, %product.i.i.i71.i1619
  %hash.i.i.i74.i1622 = and i64 %xored.i.i.i73.i1621, %tbl_size.i.i69.i1617
  %offset_ptr.i.i75.i1623 = getelementptr i32, ptr %offset_tbl.i.i70.i1618, i64 %hash.i.i.i74.i1622
  %offset.i.i76.i1624 = load i32, ptr %offset_ptr.i.i75.i1623, align 4
  %eq.i79.i1625 = icmp eq i32 %1068, %offset.i.i76.i1624
  call void @llvm.assume(i1 %eq.i79.i1625) #30
  %1070 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  store ptr @_parameterization_Ptri32, ptr %5, align 8
  %1071 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %5)
  %1072 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1062)
  %1073 = sext i32 %1068 to i64
  %1074 = getelementptr ptr, ptr %1062, i64 %1073
  %1075 = getelementptr i8, ptr %1074, i64 120
  %1076 = load ptr, ptr %1075, align 8
  store ptr @i32_typ, ptr %6, align 8
  %1077 = call ptr %1076({ ptr, ptr, ptr, i32 } %1069, ptr nonnull %6)
  %1078 = call { ptr, i160 } %1077({ ptr, ptr, ptr, i32 } %1069, { ptr, ptr, ptr, i32 } %1069, ptr nonnull %5, i32 %.0..0..0..i1612)
  %.fca.0.extract36.i1626 = extractvalue { ptr, i160 } %1078, 0
  %1079 = icmp eq ptr %.fca.0.extract36.i1626, @nil_typ
  %1080 = icmp eq ptr %.fca.0.extract36.i1626, null
  %1081 = or i1 %1079, %1080
  br i1 %1081, label %1129, label %1082

1082:                                             ; preds = %1061
  %.fca.1.extract38.i1627 = extractvalue { ptr, i160 } %1078, 1
  %.sroa.5.8.extract.shift.i1628 = lshr i160 %.fca.1.extract38.i1627, 64
  %.sroa.5.8.extract.trunc.i1629 = trunc i160 %.sroa.5.8.extract.shift.i1628 to i64
  %.sroa.2.8.extract.trunc165.i1630 = trunc i160 %.fca.1.extract38.i1627 to i64
  %1083 = inttoptr i64 %.sroa.2.8.extract.trunc165.i1630 to ptr
  %1084 = inttoptr i64 %.sroa.5.8.extract.trunc.i1629 to ptr
  %hash_coef_ptr.i.i81.i1631 = getelementptr i8, ptr %.fca.0.extract36.i1626, i64 8
  %tbl_size_ptr.i.i82.i1632 = getelementptr i8, ptr %.fca.0.extract36.i1626, i64 16
  %offset_tbl_ptr.i.i83.i1633 = getelementptr i8, ptr %.fca.0.extract36.i1626, i64 40
  %hash_coef.i.i84.i1634 = load i64, ptr %hash_coef_ptr.i.i81.i1631, align 4
  %tbl_size.i.i85.i1635 = load i64, ptr %tbl_size_ptr.i.i82.i1632, align 4
  %offset_tbl.i.i86.i1636 = load ptr, ptr %offset_tbl_ptr.i.i83.i1633, align 8
  %product.i.i.i87.i1637 = mul i64 %hash_coef.i.i84.i1634, 4015701072841558310
  %shifted.i.i.i88.i1638 = lshr i64 %product.i.i.i87.i1637, 32
  %xored.i.i.i89.i1639 = xor i64 %shifted.i.i.i88.i1638, %product.i.i.i87.i1637
  %hash.i.i.i90.i1640 = and i64 %xored.i.i.i89.i1639, %tbl_size.i.i85.i1635
  %offset_ptr.i.i91.i1641 = getelementptr i32, ptr %offset_tbl.i.i86.i1636, i64 %hash.i.i.i90.i1640
  %offset.i.i92.i1642 = load i32, ptr %offset_ptr.i.i91.i1641, align 4
  %1085 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract36.i1626, 0
  %1086 = insertvalue { ptr, ptr, ptr, i32 } %1085, ptr %1083, 1
  %1087 = insertvalue { ptr, ptr, ptr, i32 } %1086, ptr %1084, 2
  %1088 = insertvalue { ptr, ptr, ptr, i32 } %1087, i32 %offset.i.i92.i1642, 3
  %1089 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1090 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1091 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i1626)
  %1092 = sext i32 %offset.i.i92.i1642 to i64
  %1093 = getelementptr ptr, ptr %.fca.0.extract36.i1626, i64 %1092
  %1094 = getelementptr i8, ptr %1093, i64 64
  %1095 = load ptr, ptr %1094, align 8
  %1096 = call ptr %1095({ ptr, ptr, ptr, i32 } %1088, ptr nonnull %2)
  %1097 = call i32 %1096({ ptr, ptr, ptr, i32 } %1088, { ptr, ptr, ptr, i32 } %1088, ptr nonnull %2)
  %1098 = icmp eq i32 %1097, %1040
  %1099 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1100 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1101 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i1626)
  %1102 = getelementptr i8, ptr %1093, i64 48
  %1103 = load ptr, ptr %1102, align 8
  %1104 = call ptr %1103({ ptr, ptr, ptr, i32 } %1088, ptr nonnull %2)
  %1105 = call { ptr, i160 } %1104({ ptr, ptr, ptr, i32 } %1088, { ptr, ptr, ptr, i32 } %1088, ptr nonnull %2)
  %1106 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1107 = load ptr, ptr %90, align 8
  %1108 = call i1 %1107({ ptr, i160 } %1105, { ptr, i160 } %1033)
  %1109 = and i1 %1098, %1108
  br i1 %1109, label %HashMap_find_slot_keyK_hashPtri32.exit1647, label %1110

1110:                                             ; preds = %1082
  %1111 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1112 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1113 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i1626)
  %1114 = getelementptr i8, ptr %1093, i64 56
  %1115 = load ptr, ptr %1114, align 8
  %1116 = call ptr %1115({ ptr, ptr, ptr, i32 } %1088, ptr nonnull %2)
  %1117 = call { ptr, i160 } %1116({ ptr, ptr, ptr, i32 } %1088, { ptr, ptr, ptr, i32 } %1088, ptr nonnull %2)
  %.fca.0.extract15.i1643 = extractvalue { ptr, i160 } %1117, 0
  %1118 = getelementptr i8, ptr %.fca.0.extract15.i1643, i64 8
  %1119 = getelementptr i8, ptr %.fca.0.extract15.i1643, i64 16
  %1120 = getelementptr i8, ptr %.fca.0.extract15.i1643, i64 24
  %1121 = getelementptr i8, ptr %.fca.0.extract15.i1643, i64 32
  %1122 = load i64, ptr %1118, align 4
  %1123 = load i64, ptr %1119, align 4
  %1124 = load ptr, ptr %1120, align 8
  %1125 = load ptr, ptr %1121, align 8
  %result.i.i1644 = call i1 %1124(i64 %1123, i64 %1122, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %1125) #3
  %1126 = icmp eq i32 %spec.store.select.i16461663, -1
  %or.cond.i1645 = select i1 %result.i.i1644, i1 %1126, i1 false
  %spec.store.select.i1646 = select i1 %or.cond.i1645, i32 %.0..0..0..i1612, i32 %spec.store.select.i16461663
  %1127 = add i32 %.0..0..0..i1612, 1
  %1128 = and i32 %1127, %1058
  br label %1061

1129:                                             ; preds = %1061
  %1130 = icmp eq i32 %spec.store.select.i16461663, -1
  %.pre1684 = select i1 %1130, i32 %.0..0..0..i1612, i32 %spec.store.select.i16461663
  br label %HashMap_find_slot_keyK_hashPtri32.exit1647

HashMap_find_slot_keyK_hashPtri32.exit1647:       ; preds = %1082, %1129
  %1131 = phi i32 [ %.pre1684, %1129 ], [ %.0..0..0..i1612, %1082 ]
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6)
  %1132 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1133 = load ptr, ptr %102, align 8
  %1134 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1133, 0
  %1135 = load ptr, ptr %103, align 8
  %1136 = insertvalue { ptr, ptr, ptr, i32 } %1134, ptr %1135, 1
  %1137 = load ptr, ptr %104, align 8
  %1138 = insertvalue { ptr, ptr, ptr, i32 } %1136, ptr %1137, 2
  %1139 = load i32, ptr %105, align 4
  %1140 = insertvalue { ptr, ptr, ptr, i32 } %1138, i32 %1139, 3
  %hash_coef_ptr.i.i56.i1211 = getelementptr i8, ptr %1133, i64 8
  %tbl_size_ptr.i.i57.i1212 = getelementptr i8, ptr %1133, i64 16
  %offset_tbl_ptr.i.i58.i1213 = getelementptr i8, ptr %1133, i64 40
  %hash_coef.i.i59.i1214 = load i64, ptr %hash_coef_ptr.i.i56.i1211, align 4
  %tbl_size.i.i60.i1215 = load i64, ptr %tbl_size_ptr.i.i57.i1212, align 4
  %offset_tbl.i.i61.i1216 = load ptr, ptr %offset_tbl_ptr.i.i58.i1213, align 8
  %product.i.i.i62.i1217 = mul i64 %hash_coef.i.i59.i1214, -5261542750394134544
  %shifted.i.i.i63.i1218 = lshr i64 %product.i.i.i62.i1217, 32
  %xored.i.i.i64.i1219 = xor i64 %shifted.i.i.i63.i1218, %product.i.i.i62.i1217
  %hash.i.i.i65.i1220 = and i64 %xored.i.i.i64.i1219, %tbl_size.i.i60.i1215
  %offset_ptr.i.i66.i1221 = getelementptr i32, ptr %offset_tbl.i.i61.i1216, i64 %hash.i.i.i65.i1220
  %offset.i.i67.i1222 = load i32, ptr %offset_ptr.i.i66.i1221, align 4
  %eq.i.i1223 = icmp eq i32 %1139, %offset.i.i67.i1222
  call void @llvm.assume(i1 %eq.i.i1223) #30
  store ptr @_parameterization_Ptri32, ptr %17, align 8
  %1141 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %17)
  %1142 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1133)
  %1143 = sext i32 %1139 to i64
  %1144 = getelementptr ptr, ptr %1133, i64 %1143
  %1145 = getelementptr i8, ptr %1144, i64 120
  %1146 = load ptr, ptr %1145, align 8
  store ptr @i32_typ, ptr %18, align 8
  %1147 = call ptr %1146({ ptr, ptr, ptr, i32 } %1140, ptr nonnull %18)
  %1148 = call { ptr, i160 } %1147({ ptr, ptr, ptr, i32 } %1140, { ptr, ptr, ptr, i32 } %1140, ptr nonnull %17, i32 %1131)
  %.fca.0.extract2.i1224 = extractvalue { ptr, i160 } %1148, 0
  %1149 = load ptr, ptr %result.i129, align 8
  %1150 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1151 = load ptr, ptr %84, align 8
  %1152 = load ptr, ptr %1149, align 8
  %1153 = getelementptr i8, ptr %1152, i64 48
  %1154 = load ptr, ptr %1153, align 8
  %1155 = call { i64, i64 } %1154(ptr nonnull %1149)
  %1156 = extractvalue { i64, i64 } %1155, 0
  %1157 = extractvalue { i64, i64 } %1155, 1
  %1158 = call i64 @llvm.umax.i64(i64 %1157, i64 8)
  %1159 = urem i64 16, %1157
  %1160 = icmp eq i64 %1159, 0
  %1161 = sub i64 %1157, %1159
  %1162 = select i1 %1160, i64 0, i64 %1161
  %1163 = add i64 %1162, %1156
  %1164 = add i64 %1163, 16
  %1165 = and i64 %1163, 7
  %1166 = icmp eq i64 %1165, 0
  %1167 = sub nuw nsw i64 40, %1165
  %1168 = select i1 %1166, i64 32, i64 %1167
  %1169 = add i64 %1164, %1168
  %1170 = and i64 %1169, 3
  %1171 = icmp eq i64 %1170, 0
  %1172 = sub nuw nsw i64 8, %1170
  %1173 = select i1 %1171, i64 4, i64 %1172
  %1174 = add i64 %1173, %1169
  %1175 = urem i64 %1174, %1158
  %1176 = icmp eq i64 %1175, 0
  %1177 = sub i64 %1158, %1175
  %1178 = select i1 %1176, i64 0, i64 %1177
  %1179 = add i64 %1174, %1178
  %result.i.i1225 = call noalias ptr @bump_malloc_inner(i64 noundef %1179, ptr nonnull @current_ptr) #29
  store ptr %1149, ptr %result.i.i1225, align 8
  %1180 = getelementptr i8, ptr %result.i.i1225, i64 8
  store ptr %1151, ptr %1180, align 8
  %1181 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i.i1225)
  store ptr @Entry, ptr %19, align 8
  store ptr %result.i.i1225, ptr %123, align 8
  store i32 9, ptr %124, align 8
  %1182 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %19)
  %1183 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Entry, ptr undef, ptr undef, i32 undef }, ptr %result.i.i1225, 1
  %1184 = insertvalue { ptr, ptr, ptr, i32 } %1183, ptr undef, 2
  %1185 = insertvalue { ptr, ptr, ptr, i32 } %1184, i32 9, 3
  %1186 = load ptr, ptr %result.i129, align 8
  %1187 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1188 = load ptr, ptr %84, align 8
  store ptr %1186, ptr %20, align 8
  store ptr %1188, ptr %126, align 8
  store ptr @_parameterization_Ptri32, ptr %127, align 8
  %1189 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %20)
  %1190 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %1191 = load i64, ptr %1017, align 4
  %1192 = load i64, ptr %1018, align 4
  %1193 = load ptr, ptr %1019, align 8
  %1194 = load ptr, ptr %1020, align 8
  %result.i.i.i1226 = call i1 %1193(i64 %1192, i64 %1191, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr readonly %1194) #3
  %1195 = select i1 %result.i.i.i1226, i64 10, i64 9
  %gep1372 = getelementptr [14 x ptr], ptr getelementptr inbounds (i8, ptr @Entry, i64 72), i64 0, i64 %1195
  %1196 = load ptr, ptr %gep1372, align 8
  call void %1196({ ptr, ptr, ptr, i32 } %1185, { ptr, ptr, ptr, i32 } %1185, ptr nonnull %20, { ptr, i160 } %1033, { ptr, i160 } %1016, i32 %1040)
  %1197 = load ptr, ptr %125, align 8
  %1198 = ptrtoint ptr %result.i.i1225 to i64
  %1199 = ptrtoint ptr %1197 to i64
  %.sroa.2.0.insert.ext.i1227 = zext i64 %1199 to i160
  %.sroa.2.0.insert.shift.i1228 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i1227, 64
  %.sroa.0.0.insert.ext.i1230 = zext i64 %1198 to i160
  %.sroa.2.0.insert.insert.i1229 = or disjoint i160 %.sroa.2.0.insert.shift.i1228, %.sroa.0.0.insert.ext.i1230
  %.sroa.0.0.insert.insert.i1231 = or disjoint i160 %.sroa.2.0.insert.insert.i1229, 3062541302288446171170371466885913903104
  %1200 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0.0.insert.insert.i1231, 1
  %1201 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1202 = load ptr, ptr %102, align 8
  %1203 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1202, 0
  %1204 = load ptr, ptr %103, align 8
  %1205 = insertvalue { ptr, ptr, ptr, i32 } %1203, ptr %1204, 1
  %1206 = load ptr, ptr %104, align 8
  %1207 = insertvalue { ptr, ptr, ptr, i32 } %1205, ptr %1206, 2
  %1208 = load i32, ptr %105, align 4
  %1209 = insertvalue { ptr, ptr, ptr, i32 } %1207, i32 %1208, 3
  %hash_coef_ptr.i.i84.i1234 = getelementptr i8, ptr %1202, i64 8
  %tbl_size_ptr.i.i85.i1235 = getelementptr i8, ptr %1202, i64 16
  %offset_tbl_ptr.i.i86.i1236 = getelementptr i8, ptr %1202, i64 40
  %hash_coef.i.i87.i1237 = load i64, ptr %hash_coef_ptr.i.i84.i1234, align 4
  %tbl_size.i.i88.i1238 = load i64, ptr %tbl_size_ptr.i.i85.i1235, align 4
  %offset_tbl.i.i89.i1239 = load ptr, ptr %offset_tbl_ptr.i.i86.i1236, align 8
  %product.i.i.i90.i1240 = mul i64 %hash_coef.i.i87.i1237, -5261542750394134544
  %shifted.i.i.i91.i1241 = lshr i64 %product.i.i.i90.i1240, 32
  %xored.i.i.i92.i1242 = xor i64 %shifted.i.i.i91.i1241, %product.i.i.i90.i1240
  %hash.i.i.i93.i1243 = and i64 %xored.i.i.i92.i1242, %tbl_size.i.i88.i1238
  %offset_ptr.i.i94.i1244 = getelementptr i32, ptr %offset_tbl.i.i89.i1239, i64 %hash.i.i.i93.i1243
  %offset.i.i95.i1245 = load i32, ptr %offset_ptr.i.i94.i1244, align 4
  %eq.i98.i1246 = icmp eq i32 %1208, %offset.i.i95.i1245
  call void @llvm.assume(i1 %eq.i98.i1246) #30
  %1210 = load ptr, ptr %result.i129, align 8
  %1211 = load ptr, ptr %84, align 8
  %result.i99.i1247 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1212 = getelementptr i8, ptr %result.i99.i1247, i64 16
  store ptr %1211, ptr %1212, align 8
  %1213 = getelementptr i8, ptr %result.i99.i1247, i64 8
  store ptr %1210, ptr %1213, align 8
  %1214 = getelementptr i8, ptr %result.i99.i1247, i64 24
  store ptr null, ptr %1214, align 8
  %1215 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i99.i1247)
  store ptr @Entry, ptr %result.i99.i1247, align 8
  store ptr @_parameterization_Ptri32, ptr %21, align 8
  store ptr %result.i99.i1247, ptr %128, align 8
  %1216 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %21)
  %1217 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1202)
  %1218 = sext i32 %1208 to i64
  %1219 = getelementptr ptr, ptr %1202, i64 %1218
  %1220 = getelementptr i8, ptr %1219, i64 128
  %1221 = load ptr, ptr %1220, align 8
  store ptr @i32_typ, ptr %22, align 8
  store ptr @Entry, ptr %129, align 8
  %1222 = call ptr %1221({ ptr, ptr, ptr, i32 } %1209, ptr nonnull %22)
  call void %1222({ ptr, ptr, ptr, i32 } %1209, { ptr, ptr, ptr, i32 } %1209, ptr nonnull %21, i32 %1131, { ptr, i160 } %1200)
  %1223 = icmp eq ptr %.fca.0.extract2.i1224, @nil_typ
  %1224 = icmp eq ptr %.fca.0.extract2.i1224, null
  %1225 = or i1 %1223, %1224
  br i1 %1225, label %._crit_edge.thread.i1269, label %._crit_edge.i1248

._crit_edge.thread.i1269:                         ; preds = %HashMap_find_slot_keyK_hashPtri32.exit1647
  %1226 = load i32, ptr %121, align 4
  %1227 = add i32 %1226, 1
  store i32 %1227, ptr %121, align 4
  br label %._crit_edge1.sink.split.i1267

._crit_edge.i1248:                                ; preds = %HashMap_find_slot_keyK_hashPtri32.exit1647
  %.fca.1.extract4.i1249 = extractvalue { ptr, i160 } %1148, 1
  %.sroa.3192.8.extract.trunc.i1250 = trunc i160 %.fca.1.extract4.i1249 to i64
  %1228 = inttoptr i64 %.sroa.3192.8.extract.trunc.i1250 to ptr
  %.sroa.5193.8.extract.shift.i1251 = lshr i160 %.fca.1.extract4.i1249, 64
  %.sroa.5193.8.extract.trunc.i1252 = trunc i160 %.sroa.5193.8.extract.shift.i1251 to i64
  %1229 = inttoptr i64 %.sroa.5193.8.extract.trunc.i1252 to ptr
  %hash_coef_ptr.i.i101.i1253 = getelementptr i8, ptr %.fca.0.extract2.i1224, i64 8
  %tbl_size_ptr.i.i102.i1254 = getelementptr i8, ptr %.fca.0.extract2.i1224, i64 16
  %offset_tbl_ptr.i.i103.i1255 = getelementptr i8, ptr %.fca.0.extract2.i1224, i64 40
  %hash_coef.i.i104.i1256 = load i64, ptr %hash_coef_ptr.i.i101.i1253, align 4
  %tbl_size.i.i105.i1257 = load i64, ptr %tbl_size_ptr.i.i102.i1254, align 4
  %offset_tbl.i.i106.i1258 = load ptr, ptr %offset_tbl_ptr.i.i103.i1255, align 8
  %product.i.i.i107.i1259 = mul i64 %hash_coef.i.i104.i1256, 4015701072841558310
  %shifted.i.i.i108.i1260 = lshr i64 %product.i.i.i107.i1259, 32
  %xored.i.i.i109.i1261 = xor i64 %shifted.i.i.i108.i1260, %product.i.i.i107.i1259
  %hash.i.i.i110.i1262 = and i64 %xored.i.i.i109.i1261, %tbl_size.i.i105.i1257
  %offset_ptr.i.i111.i1263 = getelementptr i32, ptr %offset_tbl.i.i106.i1258, i64 %hash.i.i.i110.i1262
  %offset.i.i112.i1264 = load i32, ptr %offset_ptr.i.i111.i1263, align 4
  %1230 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract2.i1224, 0
  %1231 = insertvalue { ptr, ptr, ptr, i32 } %1230, ptr %1228, 1
  %1232 = insertvalue { ptr, ptr, ptr, i32 } %1231, ptr %1229, 2
  %1233 = insertvalue { ptr, ptr, ptr, i32 } %1232, i32 %offset.i.i112.i1264, 3
  %1234 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1235 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1236 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract2.i1224)
  %1237 = sext i32 %offset.i.i112.i1264 to i64
  %1238 = getelementptr ptr, ptr %.fca.0.extract2.i1224, i64 %1237
  %1239 = getelementptr i8, ptr %1238, i64 56
  %1240 = load ptr, ptr %1239, align 8
  %1241 = call ptr %1240({ ptr, ptr, ptr, i32 } %1233, ptr nonnull %2)
  %1242 = call { ptr, i160 } %1241({ ptr, ptr, ptr, i32 } %1233, { ptr, ptr, ptr, i32 } %1233, ptr nonnull %2)
  %.fca.0.extract45.i1265 = extractvalue { ptr, i160 } %1242, 0
  %1243 = getelementptr i8, ptr %.fca.0.extract45.i1265, i64 8
  %1244 = getelementptr i8, ptr %.fca.0.extract45.i1265, i64 16
  %1245 = getelementptr i8, ptr %.fca.0.extract45.i1265, i64 24
  %1246 = getelementptr i8, ptr %.fca.0.extract45.i1265, i64 32
  %1247 = load i64, ptr %1243, align 4
  %1248 = load i64, ptr %1244, align 4
  %1249 = load ptr, ptr %1245, align 8
  %1250 = load ptr, ptr %1246, align 8
  %result.i114.i1266 = call i1 %1249(i64 %1248, i64 %1247, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %1250) #3
  br i1 %result.i114.i1266, label %._crit_edge1.sink.split.i1267, label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit1270

._crit_edge1.sink.split.i1267:                    ; preds = %._crit_edge.i1248, %._crit_edge.thread.i1269
  %.sink202.i1268 = phi i64 [ 40, %._crit_edge.thread.i1269 ], [ 32, %._crit_edge.i1248 ]
  %1251 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1252 = getelementptr i8, ptr getelementptr inbounds (i8, ptr @HashMap, i64 72), i64 %.sink202.i1268
  %1253 = load ptr, ptr %1252, align 8
  %1254 = load ptr, ptr %1253, align 8
  %1255 = call i32 %1254(ptr nonnull %result.i129)
  %1256 = add i32 %1255, 1
  %1257 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1258 = getelementptr i8, ptr %1253, i64 8
  %1259 = load ptr, ptr %1258, align 8
  call void %1259(ptr nonnull %result.i129, i32 %1256)
  br label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit1270

HashMap_insert_internal_keyK_valueV_hashPtri32.exit1270: ; preds = %._crit_edge.i1248, %._crit_edge1.sink.split.i1267
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %17)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %18)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %19)
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %20)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %21)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %22)
  br label %._crit_edge3.i

._crit_edge3.i:                                   ; preds = %HashMap_insert_internal_keyK_valueV_hashPtri32.exit1270, %1025, %1001, %993
  %1260 = add nuw nsw i32 %.reg2mem31.0.i882, 1
  %1261 = load ptr, ptr %gep.i881, align 8
  %1262 = call ptr %1261({ ptr, ptr, ptr, i32 } %966, ptr nonnull %2)
  %1263 = call i32 %1262({ ptr, ptr, ptr, i32 } %966, { ptr, ptr, ptr, i32 } %966, ptr nonnull %2)
  %1264 = icmp slt i32 %1260, %1263
  br i1 %1264, label %993, label %HashMap_resize_new_capacityPtri32.exit

HashMap_resize_new_capacityPtri32.exit:           ; preds = %._crit_edge3.i, %955
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %39)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %40)
  br label %HashMap_insert_keyK_valueV.exit

HashMap_insert_keyK_valueV.exit:                  ; preds = %HashMap_insert_internal_keyK_valueV_hashPtri32.exit1021, %HashMap_resize_new_capacityPtri32.exit
  %1265 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1266 = load ptr, ptr %89, align 8
  %1267 = call i32 %1266({ ptr, i160 } %145)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %34)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %35)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %36)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %37)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %38)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %15)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %16)
  %1268 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1269 = load ptr, ptr %102, align 8
  %1270 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1269, 0
  %1271 = load ptr, ptr %103, align 8
  %1272 = insertvalue { ptr, ptr, ptr, i32 } %1270, ptr %1271, 1
  %1273 = load ptr, ptr %104, align 8
  %1274 = insertvalue { ptr, ptr, ptr, i32 } %1272, ptr %1273, 2
  %1275 = load i32, ptr %105, align 4
  %1276 = insertvalue { ptr, ptr, ptr, i32 } %1274, i32 %1275, 3
  %hash_coef_ptr.i.i51.i1287 = getelementptr i8, ptr %1269, i64 8
  %tbl_size_ptr.i.i52.i1288 = getelementptr i8, ptr %1269, i64 16
  %offset_tbl_ptr.i.i53.i1289 = getelementptr i8, ptr %1269, i64 40
  %hash_coef.i.i54.i1290 = load i64, ptr %hash_coef_ptr.i.i51.i1287, align 4
  %tbl_size.i.i55.i1291 = load i64, ptr %tbl_size_ptr.i.i52.i1288, align 4
  %offset_tbl.i.i56.i1292 = load ptr, ptr %offset_tbl_ptr.i.i53.i1289, align 8
  %product.i.i.i57.i1293 = mul i64 %hash_coef.i.i54.i1290, -5261542750394134544
  %shifted.i.i.i58.i1294 = lshr i64 %product.i.i.i57.i1293, 32
  %xored.i.i.i59.i1295 = xor i64 %shifted.i.i.i58.i1294, %product.i.i.i57.i1293
  %hash.i.i.i60.i1296 = and i64 %xored.i.i.i59.i1295, %tbl_size.i.i55.i1291
  %offset_ptr.i.i61.i1297 = getelementptr i32, ptr %offset_tbl.i.i56.i1292, i64 %hash.i.i.i60.i1296
  %offset.i.i62.i1298 = load i32, ptr %offset_ptr.i.i61.i1297, align 4
  %eq.i.i1299 = icmp eq i32 %1275, %offset.i.i62.i1298
  call void @llvm.assume(i1 %eq.i.i1299) #30
  %1277 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1278 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1269)
  %1279 = sext i32 %1275 to i64
  %1280 = getelementptr ptr, ptr %1269, i64 %1279
  %1281 = getelementptr i8, ptr %1280, i64 64
  %1282 = load ptr, ptr %1281, align 8
  %1283 = call ptr %1282({ ptr, ptr, ptr, i32 } %1276, ptr nonnull %2)
  %1284 = call i32 %1283({ ptr, ptr, ptr, i32 } %1276, { ptr, ptr, ptr, i32 } %1276, ptr nonnull %2)
  %1285 = add i32 %1284, -1
  %1286 = and i32 %1285, %1267
  %1287 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  br label %1288

1288:                                             ; preds = %1337, %HashMap_insert_keyK_valueV.exit
  %spec.store.select.i13351373 = phi i32 [ %spec.store.select.i1335, %1337 ], [ -1, %HashMap_insert_keyK_valueV.exit ]
  %.0..0..0..i1300 = phi i32 [ %1355, %1337 ], [ %1286, %HashMap_insert_keyK_valueV.exit ]
  %1289 = load ptr, ptr %102, align 8
  %1290 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1289, 0
  %1291 = load ptr, ptr %103, align 8
  %1292 = insertvalue { ptr, ptr, ptr, i32 } %1290, ptr %1291, 1
  %1293 = load ptr, ptr %104, align 8
  %1294 = insertvalue { ptr, ptr, ptr, i32 } %1292, ptr %1293, 2
  %1295 = load i32, ptr %105, align 4
  %1296 = insertvalue { ptr, ptr, ptr, i32 } %1294, i32 %1295, 3
  %hash_coef_ptr.i.i65.i1301 = getelementptr i8, ptr %1289, i64 8
  %tbl_size_ptr.i.i66.i1302 = getelementptr i8, ptr %1289, i64 16
  %offset_tbl_ptr.i.i67.i1303 = getelementptr i8, ptr %1289, i64 40
  %hash_coef.i.i68.i1304 = load i64, ptr %hash_coef_ptr.i.i65.i1301, align 4
  %tbl_size.i.i69.i1305 = load i64, ptr %tbl_size_ptr.i.i66.i1302, align 4
  %offset_tbl.i.i70.i1306 = load ptr, ptr %offset_tbl_ptr.i.i67.i1303, align 8
  %product.i.i.i71.i1307 = mul i64 %hash_coef.i.i68.i1304, -5261542750394134544
  %shifted.i.i.i72.i1308 = lshr i64 %product.i.i.i71.i1307, 32
  %xored.i.i.i73.i1309 = xor i64 %shifted.i.i.i72.i1308, %product.i.i.i71.i1307
  %hash.i.i.i74.i1310 = and i64 %xored.i.i.i73.i1309, %tbl_size.i.i69.i1305
  %offset_ptr.i.i75.i1311 = getelementptr i32, ptr %offset_tbl.i.i70.i1306, i64 %hash.i.i.i74.i1310
  %offset.i.i76.i1312 = load i32, ptr %offset_ptr.i.i75.i1311, align 4
  %eq.i79.i1313 = icmp eq i32 %1295, %offset.i.i76.i1312
  call void @llvm.assume(i1 %eq.i79.i1313) #30
  %1297 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  store ptr @_parameterization_Ptri32, ptr %15, align 8
  %1298 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %15)
  %1299 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1289)
  %1300 = sext i32 %1295 to i64
  %1301 = getelementptr ptr, ptr %1289, i64 %1300
  %1302 = getelementptr i8, ptr %1301, i64 120
  %1303 = load ptr, ptr %1302, align 8
  store ptr @i32_typ, ptr %16, align 8
  %1304 = call ptr %1303({ ptr, ptr, ptr, i32 } %1296, ptr nonnull %16)
  %1305 = call { ptr, i160 } %1304({ ptr, ptr, ptr, i32 } %1296, { ptr, ptr, ptr, i32 } %1296, ptr nonnull %15, i32 %.0..0..0..i1300)
  %.fca.0.extract36.i1314 = extractvalue { ptr, i160 } %1305, 0
  %1306 = icmp eq ptr %.fca.0.extract36.i1314, @nil_typ
  %1307 = icmp eq ptr %.fca.0.extract36.i1314, null
  %1308 = or i1 %1306, %1307
  br i1 %1308, label %1356, label %1309

1309:                                             ; preds = %1288
  %.fca.1.extract38.i1315 = extractvalue { ptr, i160 } %1305, 1
  %.sroa.5.8.extract.shift.i1316 = lshr i160 %.fca.1.extract38.i1315, 64
  %.sroa.5.8.extract.trunc.i1317 = trunc i160 %.sroa.5.8.extract.shift.i1316 to i64
  %.sroa.2.8.extract.trunc165.i1318 = trunc i160 %.fca.1.extract38.i1315 to i64
  %1310 = inttoptr i64 %.sroa.2.8.extract.trunc165.i1318 to ptr
  %1311 = inttoptr i64 %.sroa.5.8.extract.trunc.i1317 to ptr
  %hash_coef_ptr.i.i81.i1319 = getelementptr i8, ptr %.fca.0.extract36.i1314, i64 8
  %tbl_size_ptr.i.i82.i1320 = getelementptr i8, ptr %.fca.0.extract36.i1314, i64 16
  %offset_tbl_ptr.i.i83.i1321 = getelementptr i8, ptr %.fca.0.extract36.i1314, i64 40
  %hash_coef.i.i84.i1322 = load i64, ptr %hash_coef_ptr.i.i81.i1319, align 4
  %tbl_size.i.i85.i1323 = load i64, ptr %tbl_size_ptr.i.i82.i1320, align 4
  %offset_tbl.i.i86.i1324 = load ptr, ptr %offset_tbl_ptr.i.i83.i1321, align 8
  %product.i.i.i87.i1325 = mul i64 %hash_coef.i.i84.i1322, 4015701072841558310
  %shifted.i.i.i88.i1326 = lshr i64 %product.i.i.i87.i1325, 32
  %xored.i.i.i89.i1327 = xor i64 %shifted.i.i.i88.i1326, %product.i.i.i87.i1325
  %hash.i.i.i90.i1328 = and i64 %xored.i.i.i89.i1327, %tbl_size.i.i85.i1323
  %offset_ptr.i.i91.i1329 = getelementptr i32, ptr %offset_tbl.i.i86.i1324, i64 %hash.i.i.i90.i1328
  %offset.i.i92.i1330 = load i32, ptr %offset_ptr.i.i91.i1329, align 4
  %1312 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract36.i1314, 0
  %1313 = insertvalue { ptr, ptr, ptr, i32 } %1312, ptr %1310, 1
  %1314 = insertvalue { ptr, ptr, ptr, i32 } %1313, ptr %1311, 2
  %1315 = insertvalue { ptr, ptr, ptr, i32 } %1314, i32 %offset.i.i92.i1330, 3
  %1316 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1317 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1318 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i1314)
  %1319 = sext i32 %offset.i.i92.i1330 to i64
  %1320 = getelementptr ptr, ptr %.fca.0.extract36.i1314, i64 %1319
  %1321 = getelementptr i8, ptr %1320, i64 64
  %1322 = load ptr, ptr %1321, align 8
  %1323 = call ptr %1322({ ptr, ptr, ptr, i32 } %1315, ptr nonnull %2)
  %1324 = call i32 %1323({ ptr, ptr, ptr, i32 } %1315, { ptr, ptr, ptr, i32 } %1315, ptr nonnull %2)
  %1325 = icmp eq i32 %1324, %1267
  %1326 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1327 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1328 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i1314)
  %1329 = getelementptr i8, ptr %1320, i64 48
  %1330 = load ptr, ptr %1329, align 8
  %1331 = call ptr %1330({ ptr, ptr, ptr, i32 } %1315, ptr nonnull %2)
  %1332 = call { ptr, i160 } %1331({ ptr, ptr, ptr, i32 } %1315, { ptr, ptr, ptr, i32 } %1315, ptr nonnull %2)
  %1333 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1334 = load ptr, ptr %90, align 8
  %1335 = call i1 %1334({ ptr, i160 } %1332, { ptr, i160 } %145)
  %1336 = and i1 %1325, %1335
  br i1 %1336, label %HashMap_find_slot_keyK_hashPtri32.exit1336, label %1337

1337:                                             ; preds = %1309
  %1338 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1339 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1340 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i1314)
  %1341 = getelementptr i8, ptr %1320, i64 56
  %1342 = load ptr, ptr %1341, align 8
  %1343 = call ptr %1342({ ptr, ptr, ptr, i32 } %1315, ptr nonnull %2)
  %1344 = call { ptr, i160 } %1343({ ptr, ptr, ptr, i32 } %1315, { ptr, ptr, ptr, i32 } %1315, ptr nonnull %2)
  %.fca.0.extract15.i1332 = extractvalue { ptr, i160 } %1344, 0
  %1345 = getelementptr i8, ptr %.fca.0.extract15.i1332, i64 8
  %1346 = getelementptr i8, ptr %.fca.0.extract15.i1332, i64 16
  %1347 = getelementptr i8, ptr %.fca.0.extract15.i1332, i64 24
  %1348 = getelementptr i8, ptr %.fca.0.extract15.i1332, i64 32
  %1349 = load i64, ptr %1345, align 4
  %1350 = load i64, ptr %1346, align 4
  %1351 = load ptr, ptr %1347, align 8
  %1352 = load ptr, ptr %1348, align 8
  %result.i.i1333 = call i1 %1351(i64 %1350, i64 %1349, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %1352) #3
  %1353 = icmp eq i32 %spec.store.select.i13351373, -1
  %or.cond.i1334 = select i1 %result.i.i1333, i1 %1353, i1 false
  %spec.store.select.i1335 = select i1 %or.cond.i1334, i32 %.0..0..0..i1300, i32 %spec.store.select.i13351373
  %1354 = add i32 %.0..0..0..i1300, 1
  %1355 = and i32 %1354, %1285
  br label %1288

1356:                                             ; preds = %1288
  %1357 = icmp eq i32 %spec.store.select.i13351373, -1
  %.pre1388 = select i1 %1357, i32 %.0..0..0..i1300, i32 %spec.store.select.i13351373
  br label %HashMap_find_slot_keyK_hashPtri32.exit1336

HashMap_find_slot_keyK_hashPtri32.exit1336:       ; preds = %1309, %1356
  %1358 = phi i32 [ %.pre1388, %1356 ], [ %.0..0..0..i1300, %1309 ]
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %15)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %16)
  %1359 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1360 = load ptr, ptr %102, align 8
  %1361 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1360, 0
  %1362 = load ptr, ptr %103, align 8
  %1363 = insertvalue { ptr, ptr, ptr, i32 } %1361, ptr %1362, 1
  %1364 = load ptr, ptr %104, align 8
  %1365 = insertvalue { ptr, ptr, ptr, i32 } %1363, ptr %1364, 2
  %1366 = load i32, ptr %105, align 4
  %1367 = insertvalue { ptr, ptr, ptr, i32 } %1365, i32 %1366, 3
  %hash_coef_ptr.i.i56.i778 = getelementptr i8, ptr %1360, i64 8
  %tbl_size_ptr.i.i57.i779 = getelementptr i8, ptr %1360, i64 16
  %offset_tbl_ptr.i.i58.i780 = getelementptr i8, ptr %1360, i64 40
  %hash_coef.i.i59.i781 = load i64, ptr %hash_coef_ptr.i.i56.i778, align 4
  %tbl_size.i.i60.i782 = load i64, ptr %tbl_size_ptr.i.i57.i779, align 4
  %offset_tbl.i.i61.i783 = load ptr, ptr %offset_tbl_ptr.i.i58.i780, align 8
  %product.i.i.i62.i784 = mul i64 %hash_coef.i.i59.i781, -5261542750394134544
  %shifted.i.i.i63.i785 = lshr i64 %product.i.i.i62.i784, 32
  %xored.i.i.i64.i786 = xor i64 %shifted.i.i.i63.i785, %product.i.i.i62.i784
  %hash.i.i.i65.i787 = and i64 %xored.i.i.i64.i786, %tbl_size.i.i60.i782
  %offset_ptr.i.i66.i788 = getelementptr i32, ptr %offset_tbl.i.i61.i783, i64 %hash.i.i.i65.i787
  %offset.i.i67.i789 = load i32, ptr %offset_ptr.i.i66.i788, align 4
  %eq.i.i790 = icmp eq i32 %1366, %offset.i.i67.i789
  call void @llvm.assume(i1 %eq.i.i790) #30
  store ptr @_parameterization_Ptri32, ptr %34, align 8
  %1368 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %34)
  %1369 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1360)
  %1370 = sext i32 %1366 to i64
  %1371 = getelementptr ptr, ptr %1360, i64 %1370
  %1372 = getelementptr i8, ptr %1371, i64 120
  %1373 = load ptr, ptr %1372, align 8
  store ptr @i32_typ, ptr %35, align 8
  %1374 = call ptr %1373({ ptr, ptr, ptr, i32 } %1367, ptr nonnull %35)
  %1375 = call { ptr, i160 } %1374({ ptr, ptr, ptr, i32 } %1367, { ptr, ptr, ptr, i32 } %1367, ptr nonnull %34, i32 %1358)
  %.fca.0.extract2.i = extractvalue { ptr, i160 } %1375, 0
  %1376 = load ptr, ptr %result.i129, align 8
  %1377 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1378 = load ptr, ptr %84, align 8
  %1379 = load ptr, ptr %1376, align 8
  %1380 = getelementptr i8, ptr %1379, i64 48
  %1381 = load ptr, ptr %1380, align 8
  %1382 = call { i64, i64 } %1381(ptr nonnull %1376)
  %1383 = extractvalue { i64, i64 } %1382, 0
  %1384 = extractvalue { i64, i64 } %1382, 1
  %1385 = call i64 @llvm.umax.i64(i64 %1384, i64 8)
  %1386 = urem i64 16, %1384
  %1387 = icmp eq i64 %1386, 0
  %1388 = sub i64 %1384, %1386
  %1389 = select i1 %1387, i64 0, i64 %1388
  %1390 = add i64 %1389, %1383
  %1391 = add i64 %1390, 16
  %1392 = and i64 %1390, 7
  %1393 = icmp eq i64 %1392, 0
  %1394 = sub nuw nsw i64 40, %1392
  %1395 = select i1 %1393, i64 32, i64 %1394
  %1396 = add i64 %1391, %1395
  %1397 = and i64 %1396, 3
  %1398 = icmp eq i64 %1397, 0
  %1399 = sub nuw nsw i64 8, %1397
  %1400 = select i1 %1398, i64 4, i64 %1399
  %1401 = add i64 %1400, %1396
  %1402 = urem i64 %1401, %1385
  %1403 = icmp eq i64 %1402, 0
  %1404 = sub i64 %1385, %1402
  %1405 = select i1 %1403, i64 0, i64 %1404
  %1406 = add i64 %1401, %1405
  %result.i.i791 = call noalias ptr @bump_malloc_inner(i64 noundef %1406, ptr nonnull @current_ptr) #29
  store ptr %1376, ptr %result.i.i791, align 8
  %1407 = getelementptr i8, ptr %result.i.i791, i64 8
  store ptr %1378, ptr %1407, align 8
  %1408 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i.i791)
  store ptr @Entry, ptr %36, align 8
  store ptr %result.i.i791, ptr %111, align 8
  store i32 9, ptr %112, align 8
  %1409 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %36)
  %1410 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1411 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %1412 = load ptr, ptr %1376, align 8
  %1413 = getelementptr i8, ptr %1412, i64 48
  %1414 = load ptr, ptr %1413, align 8
  %1415 = call { i64, i64 } %1414(ptr nonnull %1376)
  %1416 = extractvalue { i64, i64 } %1415, 1
  %1417 = urem i64 16, %1416
  %1418 = icmp eq i64 %1417, 0
  %reass.sub1831 = sub i64 %1416, %1417
  %1419 = add i64 %reass.sub1831, 16
  %1420 = select i1 %1418, i64 16, i64 %1419
  %1421 = getelementptr i8, ptr %result.i.i791, i64 %1420
  %1422 = load ptr, ptr %result.i.i791, align 8
  %1423 = load ptr, ptr %1422, align 8
  %1424 = getelementptr i8, ptr %1423, i64 64
  %1425 = load ptr, ptr %1424, align 8
  call void %1425({ ptr, i160 } %145, ptr nonnull %1422, ptr %1421)
  %1426 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %1427 = load ptr, ptr %result.i.i791, align 8
  %1428 = load ptr, ptr %1427, align 8
  %1429 = getelementptr i8, ptr %1428, i64 48
  %1430 = load ptr, ptr %1429, align 8
  %1431 = call { i64, i64 } %1430(ptr nonnull %1427)
  %1432 = extractvalue { i64, i64 } %1431, 0
  %1433 = extractvalue { i64, i64 } %1431, 1
  %1434 = urem i64 16, %1433
  %1435 = icmp eq i64 %1434, 0
  %1436 = sub i64 %1433, %1434
  %1437 = select i1 %1435, i64 0, i64 %1436
  %1438 = add i64 %1437, %1432
  %1439 = and i64 %1438, 7
  %1440 = icmp eq i64 %1439, 0
  %1441 = sub nuw nsw i64 8, %1439
  %1442 = select i1 %1440, i64 0, i64 %1441
  %1443 = getelementptr i8, ptr %result.i.i791, i64 %1438
  %1444 = getelementptr i8, ptr %1443, i64 16
  %1445 = getelementptr i8, ptr %1444, i64 %1442
  store ptr @bool_typ, ptr %1445, align 8
  %1446 = getelementptr i8, ptr %1445, i64 8
  store i160 %.sroa.061.0.insert.ext, ptr %1446, align 4
  %1447 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %1448 = load ptr, ptr %result.i.i791, align 8
  %1449 = load ptr, ptr %1448, align 8
  %1450 = getelementptr i8, ptr %1449, i64 48
  %1451 = load ptr, ptr %1450, align 8
  %1452 = call { i64, i64 } %1451(ptr nonnull %1448)
  %1453 = extractvalue { i64, i64 } %1452, 0
  %1454 = extractvalue { i64, i64 } %1452, 1
  %1455 = urem i64 16, %1454
  %1456 = icmp eq i64 %1455, 0
  %1457 = sub i64 %1454, %1455
  %1458 = select i1 %1456, i64 0, i64 %1457
  %1459 = add i64 %1458, %1453
  %1460 = add i64 %1459, 16
  %1461 = and i64 %1459, 7
  %1462 = icmp eq i64 %1461, 0
  %1463 = sub nuw nsw i64 40, %1461
  %1464 = select i1 %1462, i64 32, i64 %1463
  %1465 = add i64 %1460, %1464
  %1466 = and i64 %1465, 3
  %1467 = icmp eq i64 %1466, 0
  %1468 = sub nuw nsw i64 4, %1466
  %1469 = select i1 %1467, i64 0, i64 %1468
  %1470 = getelementptr i8, ptr %result.i.i791, i64 %1465
  %1471 = getelementptr i8, ptr %1470, i64 %1469
  store i32 %1267, ptr %1471, align 4
  %1472 = load ptr, ptr %113, align 8
  %1473 = ptrtoint ptr %result.i.i791 to i64
  %1474 = ptrtoint ptr %1472 to i64
  %.sroa.2.0.insert.ext.i = zext i64 %1474 to i160
  %.sroa.2.0.insert.shift.i = shl nuw nsw i160 %.sroa.2.0.insert.ext.i, 64
  %.sroa.0.0.insert.ext.i = zext i64 %1473 to i160
  %.sroa.2.0.insert.insert.i = or disjoint i160 %.sroa.2.0.insert.shift.i, %.sroa.0.0.insert.ext.i
  %.sroa.0.0.insert.insert.i = or disjoint i160 %.sroa.2.0.insert.insert.i, 3062541302288446171170371466885913903104
  %1475 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0.0.insert.insert.i, 1
  %1476 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1477 = load ptr, ptr %102, align 8
  %1478 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1477, 0
  %1479 = load ptr, ptr %103, align 8
  %1480 = insertvalue { ptr, ptr, ptr, i32 } %1478, ptr %1479, 1
  %1481 = load ptr, ptr %104, align 8
  %1482 = insertvalue { ptr, ptr, ptr, i32 } %1480, ptr %1481, 2
  %1483 = load i32, ptr %105, align 4
  %1484 = insertvalue { ptr, ptr, ptr, i32 } %1482, i32 %1483, 3
  %hash_coef_ptr.i.i84.i = getelementptr i8, ptr %1477, i64 8
  %tbl_size_ptr.i.i85.i = getelementptr i8, ptr %1477, i64 16
  %offset_tbl_ptr.i.i86.i = getelementptr i8, ptr %1477, i64 40
  %hash_coef.i.i87.i = load i64, ptr %hash_coef_ptr.i.i84.i, align 4
  %tbl_size.i.i88.i = load i64, ptr %tbl_size_ptr.i.i85.i, align 4
  %offset_tbl.i.i89.i = load ptr, ptr %offset_tbl_ptr.i.i86.i, align 8
  %product.i.i.i90.i = mul i64 %hash_coef.i.i87.i, -5261542750394134544
  %shifted.i.i.i91.i = lshr i64 %product.i.i.i90.i, 32
  %xored.i.i.i92.i = xor i64 %shifted.i.i.i91.i, %product.i.i.i90.i
  %hash.i.i.i93.i = and i64 %xored.i.i.i92.i, %tbl_size.i.i88.i
  %offset_ptr.i.i94.i = getelementptr i32, ptr %offset_tbl.i.i89.i, i64 %hash.i.i.i93.i
  %offset.i.i95.i = load i32, ptr %offset_ptr.i.i94.i, align 4
  %eq.i98.i = icmp eq i32 %1483, %offset.i.i95.i
  call void @llvm.assume(i1 %eq.i98.i) #30
  %1485 = load ptr, ptr %result.i129, align 8
  %1486 = load ptr, ptr %84, align 8
  %result.i99.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1487 = getelementptr i8, ptr %result.i99.i, i64 16
  store ptr %1486, ptr %1487, align 8
  %1488 = getelementptr i8, ptr %result.i99.i, i64 8
  store ptr %1485, ptr %1488, align 8
  %1489 = getelementptr i8, ptr %result.i99.i, i64 24
  store ptr null, ptr %1489, align 8
  %1490 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i99.i)
  store ptr @Entry, ptr %result.i99.i, align 8
  store ptr @_parameterization_Ptri32, ptr %37, align 8
  store ptr %result.i99.i, ptr %114, align 8
  %1491 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %37)
  %1492 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1477)
  %1493 = sext i32 %1483 to i64
  %1494 = getelementptr ptr, ptr %1477, i64 %1493
  %1495 = getelementptr i8, ptr %1494, i64 128
  %1496 = load ptr, ptr %1495, align 8
  store ptr @i32_typ, ptr %38, align 8
  store ptr @Entry, ptr %115, align 8
  %1497 = call ptr %1496({ ptr, ptr, ptr, i32 } %1484, ptr nonnull %38)
  call void %1497({ ptr, ptr, ptr, i32 } %1484, { ptr, ptr, ptr, i32 } %1484, ptr nonnull %37, i32 %1358, { ptr, i160 } %1475)
  %1498 = icmp eq ptr %.fca.0.extract2.i, @nil_typ
  %1499 = icmp eq ptr %.fca.0.extract2.i, null
  %1500 = or i1 %1498, %1499
  br i1 %1500, label %._crit_edge.thread.i, label %._crit_edge.i

._crit_edge.thread.i:                             ; preds = %HashMap_find_slot_keyK_hashPtri32.exit1336
  %1501 = load i32, ptr %121, align 4
  %1502 = add i32 %1501, 1
  store i32 %1502, ptr %121, align 4
  br label %._crit_edge1.sink.split.i

._crit_edge.i:                                    ; preds = %HashMap_find_slot_keyK_hashPtri32.exit1336
  %.fca.1.extract4.i = extractvalue { ptr, i160 } %1375, 1
  %.sroa.3192.8.extract.trunc.i = trunc i160 %.fca.1.extract4.i to i64
  %1503 = inttoptr i64 %.sroa.3192.8.extract.trunc.i to ptr
  %.sroa.5193.8.extract.shift.i = lshr i160 %.fca.1.extract4.i, 64
  %.sroa.5193.8.extract.trunc.i = trunc i160 %.sroa.5193.8.extract.shift.i to i64
  %1504 = inttoptr i64 %.sroa.5193.8.extract.trunc.i to ptr
  %hash_coef_ptr.i.i101.i = getelementptr i8, ptr %.fca.0.extract2.i, i64 8
  %tbl_size_ptr.i.i102.i = getelementptr i8, ptr %.fca.0.extract2.i, i64 16
  %offset_tbl_ptr.i.i103.i = getelementptr i8, ptr %.fca.0.extract2.i, i64 40
  %hash_coef.i.i104.i = load i64, ptr %hash_coef_ptr.i.i101.i, align 4
  %tbl_size.i.i105.i = load i64, ptr %tbl_size_ptr.i.i102.i, align 4
  %offset_tbl.i.i106.i = load ptr, ptr %offset_tbl_ptr.i.i103.i, align 8
  %product.i.i.i107.i = mul i64 %hash_coef.i.i104.i, 4015701072841558310
  %shifted.i.i.i108.i = lshr i64 %product.i.i.i107.i, 32
  %xored.i.i.i109.i = xor i64 %shifted.i.i.i108.i, %product.i.i.i107.i
  %hash.i.i.i110.i = and i64 %xored.i.i.i109.i, %tbl_size.i.i105.i
  %offset_ptr.i.i111.i = getelementptr i32, ptr %offset_tbl.i.i106.i, i64 %hash.i.i.i110.i
  %offset.i.i112.i = load i32, ptr %offset_ptr.i.i111.i, align 4
  %1505 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract2.i, 0
  %1506 = insertvalue { ptr, ptr, ptr, i32 } %1505, ptr %1503, 1
  %1507 = insertvalue { ptr, ptr, ptr, i32 } %1506, ptr %1504, 2
  %1508 = insertvalue { ptr, ptr, ptr, i32 } %1507, i32 %offset.i.i112.i, 3
  %1509 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1510 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1511 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract2.i)
  %1512 = sext i32 %offset.i.i112.i to i64
  %1513 = getelementptr ptr, ptr %.fca.0.extract2.i, i64 %1512
  %1514 = getelementptr i8, ptr %1513, i64 56
  %1515 = load ptr, ptr %1514, align 8
  %1516 = call ptr %1515({ ptr, ptr, ptr, i32 } %1508, ptr nonnull %2)
  %1517 = call { ptr, i160 } %1516({ ptr, ptr, ptr, i32 } %1508, { ptr, ptr, ptr, i32 } %1508, ptr nonnull %2)
  %.fca.0.extract45.i = extractvalue { ptr, i160 } %1517, 0
  %1518 = getelementptr i8, ptr %.fca.0.extract45.i, i64 8
  %1519 = getelementptr i8, ptr %.fca.0.extract45.i, i64 16
  %1520 = getelementptr i8, ptr %.fca.0.extract45.i, i64 24
  %1521 = getelementptr i8, ptr %.fca.0.extract45.i, i64 32
  %1522 = load i64, ptr %1518, align 4
  %1523 = load i64, ptr %1519, align 4
  %1524 = load ptr, ptr %1520, align 8
  %1525 = load ptr, ptr %1521, align 8
  %result.i114.i = call i1 %1524(i64 %1523, i64 %1522, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %1525) #3
  br i1 %result.i114.i, label %._crit_edge1.sink.split.i, label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit

._crit_edge1.sink.split.i:                        ; preds = %._crit_edge.i, %._crit_edge.thread.i
  %.sink202.i = phi i64 [ 40, %._crit_edge.thread.i ], [ 32, %._crit_edge.i ]
  %1526 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1527 = getelementptr i8, ptr getelementptr inbounds (i8, ptr @HashMap, i64 72), i64 %.sink202.i
  %1528 = load ptr, ptr %1527, align 8
  %1529 = load ptr, ptr %1528, align 8
  %1530 = call i32 %1529(ptr nonnull %result.i129)
  %1531 = add i32 %1530, 1
  %1532 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1533 = getelementptr i8, ptr %1528, i64 8
  %1534 = load ptr, ptr %1533, align 8
  call void %1534(ptr nonnull %result.i129, i32 %1531)
  br label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit

HashMap_insert_internal_keyK_valueV_hashPtri32.exit: ; preds = %._crit_edge.i, %._crit_edge1.sink.split.i
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %34)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %35)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %36)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %37)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %38)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %1535 = add nsw i32 %.reg2mem107.0, 1
  br label %1536

1536:                                             ; preds = %HashMap_insert_internal_keyK_valueV_hashPtri32.exit, %HashMap_get_keyK.exit
  %.reg2mem105.0 = phi i32 [ %1535, %HashMap_insert_internal_keyK_valueV_hashPtri32.exit ], [ %.reg2mem107.0, %HashMap_get_keyK.exit ]
  %1537 = add nuw nsw i32 %.reg2mem109.0, 1
  %.not282.not = icmp slt i32 %.reg2mem109.0, %108
  br i1 %.not282.not, label %137, label %.thread

.thread:                                          ; preds = %137, %1536
  %.reg2mem99.0278 = phi i32 [ %.reg2mem105.0, %1536 ], [ %.reg2mem107.0, %137 ]
  %1538 = call i64 @clock()
  %1539 = icmp sgt i32 %.reg2mem99.0278, 0
  br i1 %1539, label %.lr.ph.preheader, label %._crit_edge285

.lr.ph.preheader:                                 ; preds = %.thread
  %1540 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %invariant.gep = getelementptr i8, ptr %result.i.i299, i64 8
  %1541 = getelementptr inbounds i8, ptr %45, i64 8
  %1542 = getelementptr inbounds i8, ptr %45, i64 24
  %1543 = getelementptr inbounds i8, ptr %46, i64 8
  %1544 = getelementptr inbounds i8, ptr %46, i64 24
  %1545 = getelementptr inbounds i8, ptr %45, i64 16
  %1546 = getelementptr inbounds i8, ptr %47, i64 8
  %1547 = getelementptr inbounds i8, ptr %48, i64 8
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %HashMap_remove_keyK.exit
  %.reg2mem91.0284 = phi i32 [ %.reg2mem87.0, %HashMap_remove_keyK.exit ], [ 0, %.lr.ph.preheader ]
  %.reg2mem89.0283 = phi i32 [ %1850, %HashMap_remove_keyK.exit ], [ 0, %.lr.ph.preheader ]
  %1548 = zext nneg i32 %.reg2mem89.0283 to i64
  %1549 = shl nuw nsw i64 %1548, 5
  %gep = getelementptr i8, ptr %invariant.gep, i64 %1549
  %1550 = load i160, ptr %gep, align 4
  %.sroa.049.0.insert.ext = and i160 %1550, 4294967295
  %1551 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.049.0.insert.ext, 1
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %45)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %46)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %47)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %48)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %49)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %50)
  %1552 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1553 = load ptr, ptr %63, align 8
  %1554 = call i32 %1553({ ptr, i160 } %1551)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %25)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %26)
  %1555 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1556 = load ptr, ptr %75, align 8
  %1557 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1556, 0
  %1558 = load ptr, ptr %76, align 8
  %1559 = insertvalue { ptr, ptr, ptr, i32 } %1557, ptr %1558, 1
  %1560 = load ptr, ptr %109, align 8
  %1561 = insertvalue { ptr, ptr, ptr, i32 } %1559, ptr %1560, 2
  %1562 = load i32, ptr %77, align 4
  %1563 = insertvalue { ptr, ptr, ptr, i32 } %1561, i32 %1562, 3
  %hash_coef_ptr.i.i51.i1042 = getelementptr i8, ptr %1556, i64 8
  %tbl_size_ptr.i.i52.i1043 = getelementptr i8, ptr %1556, i64 16
  %offset_tbl_ptr.i.i53.i1044 = getelementptr i8, ptr %1556, i64 40
  %hash_coef.i.i54.i1045 = load i64, ptr %hash_coef_ptr.i.i51.i1042, align 4
  %tbl_size.i.i55.i1046 = load i64, ptr %tbl_size_ptr.i.i52.i1043, align 4
  %offset_tbl.i.i56.i1047 = load ptr, ptr %offset_tbl_ptr.i.i53.i1044, align 8
  %product.i.i.i57.i1048 = mul i64 %hash_coef.i.i54.i1045, -5261542750394134544
  %shifted.i.i.i58.i1049 = lshr i64 %product.i.i.i57.i1048, 32
  %xored.i.i.i59.i1050 = xor i64 %shifted.i.i.i58.i1049, %product.i.i.i57.i1048
  %hash.i.i.i60.i1051 = and i64 %xored.i.i.i59.i1050, %tbl_size.i.i55.i1046
  %offset_ptr.i.i61.i1052 = getelementptr i32, ptr %offset_tbl.i.i56.i1047, i64 %hash.i.i.i60.i1051
  %offset.i.i62.i1053 = load i32, ptr %offset_ptr.i.i61.i1052, align 4
  %eq.i.i1054 = icmp eq i32 %1562, %offset.i.i62.i1053
  call void @llvm.assume(i1 %eq.i.i1054) #30
  %1564 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1565 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1556)
  %1566 = sext i32 %1562 to i64
  %1567 = getelementptr ptr, ptr %1556, i64 %1566
  %1568 = getelementptr i8, ptr %1567, i64 64
  %1569 = load ptr, ptr %1568, align 8
  %1570 = call ptr %1569({ ptr, ptr, ptr, i32 } %1563, ptr nonnull %2)
  %1571 = call i32 %1570({ ptr, ptr, ptr, i32 } %1563, { ptr, ptr, ptr, i32 } %1563, ptr nonnull %2)
  %1572 = add i32 %1571, -1
  %1573 = and i32 %1572, %1554
  %1574 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  br label %1575

1575:                                             ; preds = %1624, %.lr.ph
  %spec.store.select.i10941181 = phi i32 [ %spec.store.select.i1094, %1624 ], [ -1, %.lr.ph ]
  %.0..0..0..i1055 = phi i32 [ %1642, %1624 ], [ %1573, %.lr.ph ]
  %1576 = load ptr, ptr %75, align 8
  %1577 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1576, 0
  %1578 = load ptr, ptr %76, align 8
  %1579 = insertvalue { ptr, ptr, ptr, i32 } %1577, ptr %1578, 1
  %1580 = load ptr, ptr %109, align 8
  %1581 = insertvalue { ptr, ptr, ptr, i32 } %1579, ptr %1580, 2
  %1582 = load i32, ptr %77, align 4
  %1583 = insertvalue { ptr, ptr, ptr, i32 } %1581, i32 %1582, 3
  %hash_coef_ptr.i.i65.i1060 = getelementptr i8, ptr %1576, i64 8
  %tbl_size_ptr.i.i66.i1061 = getelementptr i8, ptr %1576, i64 16
  %offset_tbl_ptr.i.i67.i1062 = getelementptr i8, ptr %1576, i64 40
  %hash_coef.i.i68.i1063 = load i64, ptr %hash_coef_ptr.i.i65.i1060, align 4
  %tbl_size.i.i69.i1064 = load i64, ptr %tbl_size_ptr.i.i66.i1061, align 4
  %offset_tbl.i.i70.i1065 = load ptr, ptr %offset_tbl_ptr.i.i67.i1062, align 8
  %product.i.i.i71.i1066 = mul i64 %hash_coef.i.i68.i1063, -5261542750394134544
  %shifted.i.i.i72.i1067 = lshr i64 %product.i.i.i71.i1066, 32
  %xored.i.i.i73.i1068 = xor i64 %shifted.i.i.i72.i1067, %product.i.i.i71.i1066
  %hash.i.i.i74.i1069 = and i64 %xored.i.i.i73.i1068, %tbl_size.i.i69.i1064
  %offset_ptr.i.i75.i1070 = getelementptr i32, ptr %offset_tbl.i.i70.i1065, i64 %hash.i.i.i74.i1069
  %offset.i.i76.i1071 = load i32, ptr %offset_ptr.i.i75.i1070, align 4
  %eq.i79.i1072 = icmp eq i32 %1582, %offset.i.i76.i1071
  call void @llvm.assume(i1 %eq.i79.i1072) #30
  %1584 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  store ptr @_parameterization_Ptri32, ptr %25, align 8
  %1585 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %25)
  %1586 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1576)
  %1587 = sext i32 %1582 to i64
  %1588 = getelementptr ptr, ptr %1576, i64 %1587
  %1589 = getelementptr i8, ptr %1588, i64 120
  %1590 = load ptr, ptr %1589, align 8
  store ptr @i32_typ, ptr %26, align 8
  %1591 = call ptr %1590({ ptr, ptr, ptr, i32 } %1583, ptr nonnull %26)
  %1592 = call { ptr, i160 } %1591({ ptr, ptr, ptr, i32 } %1583, { ptr, ptr, ptr, i32 } %1583, ptr nonnull %25, i32 %.0..0..0..i1055)
  %.fca.0.extract36.i1073 = extractvalue { ptr, i160 } %1592, 0
  %1593 = icmp eq ptr %.fca.0.extract36.i1073, @nil_typ
  %1594 = icmp eq ptr %.fca.0.extract36.i1073, null
  %1595 = or i1 %1593, %1594
  br i1 %1595, label %1643, label %1596

1596:                                             ; preds = %1575
  %.fca.1.extract38.i1074 = extractvalue { ptr, i160 } %1592, 1
  %.sroa.5.8.extract.shift.i1075 = lshr i160 %.fca.1.extract38.i1074, 64
  %.sroa.5.8.extract.trunc.i1076 = trunc i160 %.sroa.5.8.extract.shift.i1075 to i64
  %.sroa.2.8.extract.trunc165.i1077 = trunc i160 %.fca.1.extract38.i1074 to i64
  %1597 = inttoptr i64 %.sroa.2.8.extract.trunc165.i1077 to ptr
  %1598 = inttoptr i64 %.sroa.5.8.extract.trunc.i1076 to ptr
  %hash_coef_ptr.i.i81.i1078 = getelementptr i8, ptr %.fca.0.extract36.i1073, i64 8
  %tbl_size_ptr.i.i82.i1079 = getelementptr i8, ptr %.fca.0.extract36.i1073, i64 16
  %offset_tbl_ptr.i.i83.i1080 = getelementptr i8, ptr %.fca.0.extract36.i1073, i64 40
  %hash_coef.i.i84.i1081 = load i64, ptr %hash_coef_ptr.i.i81.i1078, align 4
  %tbl_size.i.i85.i1082 = load i64, ptr %tbl_size_ptr.i.i82.i1079, align 4
  %offset_tbl.i.i86.i1083 = load ptr, ptr %offset_tbl_ptr.i.i83.i1080, align 8
  %product.i.i.i87.i1084 = mul i64 %hash_coef.i.i84.i1081, 4015701072841558310
  %shifted.i.i.i88.i1085 = lshr i64 %product.i.i.i87.i1084, 32
  %xored.i.i.i89.i1086 = xor i64 %shifted.i.i.i88.i1085, %product.i.i.i87.i1084
  %hash.i.i.i90.i1087 = and i64 %xored.i.i.i89.i1086, %tbl_size.i.i85.i1082
  %offset_ptr.i.i91.i1088 = getelementptr i32, ptr %offset_tbl.i.i86.i1083, i64 %hash.i.i.i90.i1087
  %offset.i.i92.i1089 = load i32, ptr %offset_ptr.i.i91.i1088, align 4
  %1599 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract36.i1073, 0
  %1600 = insertvalue { ptr, ptr, ptr, i32 } %1599, ptr %1597, 1
  %1601 = insertvalue { ptr, ptr, ptr, i32 } %1600, ptr %1598, 2
  %1602 = insertvalue { ptr, ptr, ptr, i32 } %1601, i32 %offset.i.i92.i1089, 3
  %1603 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1604 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1605 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i1073)
  %1606 = sext i32 %offset.i.i92.i1089 to i64
  %1607 = getelementptr ptr, ptr %.fca.0.extract36.i1073, i64 %1606
  %1608 = getelementptr i8, ptr %1607, i64 64
  %1609 = load ptr, ptr %1608, align 8
  %1610 = call ptr %1609({ ptr, ptr, ptr, i32 } %1602, ptr nonnull %2)
  %1611 = call i32 %1610({ ptr, ptr, ptr, i32 } %1602, { ptr, ptr, ptr, i32 } %1602, ptr nonnull %2)
  %1612 = icmp eq i32 %1611, %1554
  %1613 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1614 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1615 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i1073)
  %1616 = getelementptr i8, ptr %1607, i64 48
  %1617 = load ptr, ptr %1616, align 8
  %1618 = call ptr %1617({ ptr, ptr, ptr, i32 } %1602, ptr nonnull %2)
  %1619 = call { ptr, i160 } %1618({ ptr, ptr, ptr, i32 } %1602, { ptr, ptr, ptr, i32 } %1602, ptr nonnull %2)
  %1620 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1621 = load ptr, ptr %64, align 8
  %1622 = call i1 %1621({ ptr, i160 } %1619, { ptr, i160 } %1551)
  %1623 = and i1 %1612, %1622
  br i1 %1623, label %HashMap_find_slot_keyK_hashPtri32.exit1095, label %1624

1624:                                             ; preds = %1596
  %1625 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1626 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1627 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i1073)
  %1628 = getelementptr i8, ptr %1607, i64 56
  %1629 = load ptr, ptr %1628, align 8
  %1630 = call ptr %1629({ ptr, ptr, ptr, i32 } %1602, ptr nonnull %2)
  %1631 = call { ptr, i160 } %1630({ ptr, ptr, ptr, i32 } %1602, { ptr, ptr, ptr, i32 } %1602, ptr nonnull %2)
  %.fca.0.extract15.i1091 = extractvalue { ptr, i160 } %1631, 0
  %1632 = getelementptr i8, ptr %.fca.0.extract15.i1091, i64 8
  %1633 = getelementptr i8, ptr %.fca.0.extract15.i1091, i64 16
  %1634 = getelementptr i8, ptr %.fca.0.extract15.i1091, i64 24
  %1635 = getelementptr i8, ptr %.fca.0.extract15.i1091, i64 32
  %1636 = load i64, ptr %1632, align 4
  %1637 = load i64, ptr %1633, align 4
  %1638 = load ptr, ptr %1634, align 8
  %1639 = load ptr, ptr %1635, align 8
  %result.i.i1092 = call i1 %1638(i64 %1637, i64 %1636, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %1639) #3
  %1640 = icmp eq i32 %spec.store.select.i10941181, -1
  %or.cond.i1093 = select i1 %result.i.i1092, i1 %1640, i1 false
  %spec.store.select.i1094 = select i1 %or.cond.i1093, i32 %.0..0..0..i1055, i32 %spec.store.select.i10941181
  %1641 = add i32 %.0..0..0..i1055, 1
  %1642 = and i32 %1641, %1572
  br label %1575

1643:                                             ; preds = %1575
  %1644 = icmp eq i32 %spec.store.select.i10941181, -1
  %.pre1200 = select i1 %1644, i32 %.0..0..0..i1055, i32 %spec.store.select.i10941181
  br label %HashMap_find_slot_keyK_hashPtri32.exit1095

HashMap_find_slot_keyK_hashPtri32.exit1095:       ; preds = %1596, %1643
  %1645 = phi i32 [ %.pre1200, %1643 ], [ %.0..0..0..i1055, %1596 ]
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %25)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %26)
  %1646 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1647 = load ptr, ptr %75, align 8
  %1648 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1647, 0
  %1649 = load ptr, ptr %76, align 8
  %1650 = insertvalue { ptr, ptr, ptr, i32 } %1648, ptr %1649, 1
  %1651 = load ptr, ptr %109, align 8
  %1652 = insertvalue { ptr, ptr, ptr, i32 } %1650, ptr %1651, 2
  %1653 = load i32, ptr %77, align 4
  %1654 = insertvalue { ptr, ptr, ptr, i32 } %1652, i32 %1653, 3
  %hash_coef_ptr.i.i86.i = getelementptr i8, ptr %1647, i64 8
  %tbl_size_ptr.i.i87.i = getelementptr i8, ptr %1647, i64 16
  %offset_tbl_ptr.i.i88.i = getelementptr i8, ptr %1647, i64 40
  %hash_coef.i.i89.i = load i64, ptr %hash_coef_ptr.i.i86.i, align 4
  %tbl_size.i.i90.i = load i64, ptr %tbl_size_ptr.i.i87.i, align 4
  %offset_tbl.i.i91.i = load ptr, ptr %offset_tbl_ptr.i.i88.i, align 8
  %product.i.i.i92.i = mul i64 %hash_coef.i.i89.i, -5261542750394134544
  %shifted.i.i.i93.i = lshr i64 %product.i.i.i92.i, 32
  %xored.i.i.i94.i = xor i64 %shifted.i.i.i93.i, %product.i.i.i92.i
  %hash.i.i.i95.i = and i64 %xored.i.i.i94.i, %tbl_size.i.i90.i
  %offset_ptr.i.i96.i = getelementptr i32, ptr %offset_tbl.i.i91.i, i64 %hash.i.i.i95.i
  %offset.i.i97.i = load i32, ptr %offset_ptr.i.i96.i, align 4
  %eq.i.i660 = icmp eq i32 %1653, %offset.i.i97.i
  call void @llvm.assume(i1 %eq.i.i660) #30
  store ptr @_parameterization_Ptri32, ptr %49, align 8
  %1655 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %49)
  %1656 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1647)
  %1657 = sext i32 %1653 to i64
  %1658 = getelementptr ptr, ptr %1647, i64 %1657
  %1659 = getelementptr i8, ptr %1658, i64 120
  %1660 = load ptr, ptr %1659, align 8
  store ptr @i32_typ, ptr %50, align 8
  %1661 = call ptr %1660({ ptr, ptr, ptr, i32 } %1654, ptr nonnull %50)
  %1662 = call { ptr, i160 } %1661({ ptr, ptr, ptr, i32 } %1654, { ptr, ptr, ptr, i32 } %1654, ptr nonnull %49, i32 %1645)
  %.fca.0.extract.i661 = extractvalue { ptr, i160 } %1662, 0
  %1663 = icmp ne ptr %.fca.0.extract.i661, @nil_typ
  %1664 = icmp ne ptr %.fca.0.extract.i661, null
  %.not84.i = and i1 %1663, %1664
  br i1 %.not84.i, label %1665, label %HashMap_remove_keyK.exit

1665:                                             ; preds = %HashMap_find_slot_keyK_hashPtri32.exit1095
  %.fca.1.extract.i662 = extractvalue { ptr, i160 } %1662, 1
  %.sroa.7242.8.extract.trunc.i = trunc i160 %.fca.1.extract.i662 to i64
  %1666 = inttoptr i64 %.sroa.7242.8.extract.trunc.i to ptr
  %.sroa.13.8.extract.shift.i = lshr i160 %.fca.1.extract.i662, 64
  %.sroa.13.8.extract.trunc.i = trunc i160 %.sroa.13.8.extract.shift.i to i64
  %1667 = inttoptr i64 %.sroa.13.8.extract.trunc.i to ptr
  %hash_coef_ptr.i.i100.i = getelementptr i8, ptr %.fca.0.extract.i661, i64 8
  %tbl_size_ptr.i.i101.i = getelementptr i8, ptr %.fca.0.extract.i661, i64 16
  %offset_tbl_ptr.i.i102.i = getelementptr i8, ptr %.fca.0.extract.i661, i64 40
  %hash_coef.i.i103.i = load i64, ptr %hash_coef_ptr.i.i100.i, align 4
  %tbl_size.i.i104.i = load i64, ptr %tbl_size_ptr.i.i101.i, align 4
  %offset_tbl.i.i105.i = load ptr, ptr %offset_tbl_ptr.i.i102.i, align 8
  %product.i.i.i106.i = mul i64 %hash_coef.i.i103.i, 4015701072841558310
  %shifted.i.i.i107.i = lshr i64 %product.i.i.i106.i, 32
  %xored.i.i.i108.i = xor i64 %shifted.i.i.i107.i, %product.i.i.i106.i
  %hash.i.i.i109.i = and i64 %xored.i.i.i108.i, %tbl_size.i.i104.i
  %offset_ptr.i.i110.i = getelementptr i32, ptr %offset_tbl.i.i105.i, i64 %hash.i.i.i109.i
  %offset.i.i111.i = load i32, ptr %offset_ptr.i.i110.i, align 4
  %1668 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract.i661, 0
  %1669 = insertvalue { ptr, ptr, ptr, i32 } %1668, ptr %1666, 1
  %1670 = insertvalue { ptr, ptr, ptr, i32 } %1669, ptr %1667, 2
  %1671 = insertvalue { ptr, ptr, ptr, i32 } %1670, i32 %offset.i.i111.i, 3
  %1672 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1673 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1674 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract.i661)
  %1675 = sext i32 %offset.i.i111.i to i64
  %1676 = getelementptr ptr, ptr %.fca.0.extract.i661, i64 %1675
  %1677 = getelementptr i8, ptr %1676, i64 56
  %1678 = load ptr, ptr %1677, align 8
  %1679 = call ptr %1678({ ptr, ptr, ptr, i32 } %1671, ptr nonnull %2)
  %1680 = call { ptr, i160 } %1679({ ptr, ptr, ptr, i32 } %1671, { ptr, ptr, ptr, i32 } %1671, ptr nonnull %2)
  %.fca.0.extract75.i = extractvalue { ptr, i160 } %1680, 0
  %1681 = getelementptr i8, ptr %.fca.0.extract75.i, i64 8
  %1682 = getelementptr i8, ptr %.fca.0.extract75.i, i64 16
  %1683 = getelementptr i8, ptr %.fca.0.extract75.i, i64 24
  %1684 = getelementptr i8, ptr %.fca.0.extract75.i, i64 32
  %1685 = load i64, ptr %1681, align 4
  %1686 = load i64, ptr %1682, align 4
  %1687 = load ptr, ptr %1683, align 8
  %1688 = load ptr, ptr %1684, align 8
  %result.i.i663 = call i1 %1687(i64 %1686, i64 %1685, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %1688) #3
  br i1 %result.i.i663, label %HashMap_remove_keyK.exit, label %1689

1689:                                             ; preds = %1665
  %result.i113.i = call i1 %1687(i64 %1686, i64 %1685, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr readonly %1688) #3
  br i1 %result.i113.i, label %1690, label %HashMap_remove_keyK.exit

1690:                                             ; preds = %1689
  %1691 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1692 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1693 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract.i661)
  %1694 = getelementptr i8, ptr %1676, i64 48
  %1695 = load ptr, ptr %1694, align 8
  %1696 = call ptr %1695({ ptr, ptr, ptr, i32 } %1671, ptr nonnull %2)
  %1697 = call { ptr, i160 } %1696({ ptr, ptr, ptr, i32 } %1671, { ptr, ptr, ptr, i32 } %1671, ptr nonnull %2)
  %1698 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull @Tombstone)
  %1699 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1700 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1701 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract.i661)
  %1702 = getelementptr i8, ptr %1676, i64 64
  %1703 = load ptr, ptr %1702, align 8
  %1704 = call ptr %1703({ ptr, ptr, ptr, i32 } %1671, ptr nonnull %2)
  %1705 = call i32 %1704({ ptr, ptr, ptr, i32 } %1671, { ptr, ptr, ptr, i32 } %1671, ptr nonnull %2)
  %1706 = load ptr, ptr %result.i, align 8
  %1707 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1708 = load ptr, ptr %58, align 8
  %1709 = load ptr, ptr %1706, align 8
  %1710 = getelementptr i8, ptr %1709, i64 48
  %1711 = load ptr, ptr %1710, align 8
  %1712 = call { i64, i64 } %1711(ptr nonnull %1706)
  %1713 = extractvalue { i64, i64 } %1712, 0
  %1714 = extractvalue { i64, i64 } %1712, 1
  %1715 = call i64 @llvm.umax.i64(i64 %1714, i64 8)
  %1716 = urem i64 16, %1714
  %1717 = icmp eq i64 %1716, 0
  %1718 = sub i64 %1714, %1716
  %1719 = select i1 %1717, i64 0, i64 %1718
  %1720 = add i64 %1719, %1713
  %1721 = add i64 %1720, 16
  %1722 = and i64 %1720, 7
  %1723 = icmp eq i64 %1722, 0
  %1724 = sub nuw nsw i64 40, %1722
  %1725 = select i1 %1723, i64 32, i64 %1724
  %1726 = add i64 %1721, %1725
  %1727 = and i64 %1726, 3
  %1728 = icmp eq i64 %1727, 0
  %1729 = sub nuw nsw i64 8, %1727
  %1730 = select i1 %1728, i64 4, i64 %1729
  %1731 = add i64 %1730, %1726
  %1732 = urem i64 %1731, %1715
  %1733 = icmp eq i64 %1732, 0
  %1734 = sub i64 %1715, %1732
  %1735 = select i1 %1733, i64 0, i64 %1734
  %1736 = add i64 %1731, %1735
  %result.i115.i = call noalias ptr @bump_malloc_inner(i64 noundef %1736, ptr nonnull @current_ptr) #29
  store ptr %1706, ptr %result.i115.i, align 8
  %1737 = getelementptr i8, ptr %result.i115.i, i64 8
  store ptr %1708, ptr %1737, align 8
  %1738 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i115.i)
  store ptr @Entry, ptr %45, align 8
  store ptr %result.i115.i, ptr %1541, align 8
  store i32 9, ptr %1542, align 8
  %1739 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %45)
  %1740 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1741 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1742 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract.i661)
  %1743 = load ptr, ptr %1694, align 8
  %1744 = call ptr %1743({ ptr, ptr, ptr, i32 } %1671, ptr nonnull %2)
  %1745 = call { ptr, i160 } %1744({ ptr, ptr, ptr, i32 } %1671, { ptr, ptr, ptr, i32 } %1671, ptr nonnull %2)
  %result.i116.i = call noalias ptr @bump_malloc_inner(i64 noundef 0, ptr nonnull @current_ptr) #29
  store ptr @Tombstone, ptr %46, align 8
  store ptr %result.i116.i, ptr %1543, align 8
  store i32 9, ptr %1544, align 8
  %1746 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %46)
  %1747 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull @Tombstone)
  %1748 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1749 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1750 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract.i661)
  %1751 = load ptr, ptr %1702, align 8
  %1752 = call ptr %1751({ ptr, ptr, ptr, i32 } %1671, ptr nonnull %2)
  %1753 = call i32 %1752({ ptr, ptr, ptr, i32 } %1671, { ptr, ptr, ptr, i32 } %1671, ptr nonnull %2)
  %1754 = load i160, ptr %1543, align 8
  %1755 = load ptr, ptr %1545, align 8
  %1756 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1757 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %1758 = load ptr, ptr %result.i115.i, align 8
  %1759 = load ptr, ptr %1758, align 8
  %1760 = getelementptr i8, ptr %1759, i64 48
  %1761 = load ptr, ptr %1760, align 8
  %1762 = call { i64, i64 } %1761(ptr nonnull %1758)
  %1763 = extractvalue { i64, i64 } %1762, 1
  %1764 = urem i64 16, %1763
  %1765 = icmp eq i64 %1764, 0
  %reass.sub1832 = sub i64 %1763, %1764
  %1766 = add i64 %reass.sub1832, 16
  %1767 = select i1 %1765, i64 16, i64 %1766
  %1768 = getelementptr i8, ptr %result.i115.i, i64 %1767
  %1769 = load ptr, ptr %result.i115.i, align 8
  %1770 = load ptr, ptr %1769, align 8
  %1771 = getelementptr i8, ptr %1770, i64 64
  %1772 = load ptr, ptr %1771, align 8
  call void %1772({ ptr, i160 } %1745, ptr nonnull %1769, ptr %1768)
  %1773 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %1774 = load ptr, ptr %result.i115.i, align 8
  %1775 = load ptr, ptr %1774, align 8
  %1776 = getelementptr i8, ptr %1775, i64 48
  %1777 = load ptr, ptr %1776, align 8
  %1778 = call { i64, i64 } %1777(ptr nonnull %1774)
  %1779 = extractvalue { i64, i64 } %1778, 0
  %1780 = extractvalue { i64, i64 } %1778, 1
  %1781 = urem i64 16, %1780
  %1782 = icmp eq i64 %1781, 0
  %1783 = sub i64 %1780, %1781
  %1784 = select i1 %1782, i64 0, i64 %1783
  %1785 = add i64 %1784, %1779
  %1786 = and i64 %1785, 7
  %1787 = icmp eq i64 %1786, 0
  %1788 = sub nuw nsw i64 8, %1786
  %1789 = select i1 %1787, i64 0, i64 %1788
  %1790 = getelementptr i8, ptr %result.i115.i, i64 %1785
  %1791 = getelementptr i8, ptr %1790, i64 16
  %1792 = getelementptr i8, ptr %1791, i64 %1789
  store ptr @Tombstone, ptr %1792, align 8
  %1793 = getelementptr i8, ptr %1792, i64 8
  store i160 %1754, ptr %1793, align 4
  %1794 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %1795 = load ptr, ptr %result.i115.i, align 8
  %1796 = load ptr, ptr %1795, align 8
  %1797 = getelementptr i8, ptr %1796, i64 48
  %1798 = load ptr, ptr %1797, align 8
  %1799 = call { i64, i64 } %1798(ptr nonnull %1795)
  %1800 = extractvalue { i64, i64 } %1799, 0
  %1801 = extractvalue { i64, i64 } %1799, 1
  %1802 = urem i64 16, %1801
  %1803 = icmp eq i64 %1802, 0
  %1804 = sub i64 %1801, %1802
  %1805 = select i1 %1803, i64 0, i64 %1804
  %1806 = add i64 %1805, %1800
  %1807 = add i64 %1806, 16
  %1808 = and i64 %1806, 7
  %1809 = icmp eq i64 %1808, 0
  %1810 = sub nuw nsw i64 40, %1808
  %1811 = select i1 %1809, i64 32, i64 %1810
  %1812 = add i64 %1807, %1811
  %1813 = and i64 %1812, 3
  %1814 = icmp eq i64 %1813, 0
  %1815 = sub nuw nsw i64 4, %1813
  %1816 = select i1 %1814, i64 0, i64 %1815
  %1817 = getelementptr i8, ptr %result.i115.i, i64 %1812
  %1818 = getelementptr i8, ptr %1817, i64 %1816
  store i32 %1753, ptr %1818, align 4
  %1819 = ptrtoint ptr %result.i115.i to i64
  %1820 = ptrtoint ptr %1755 to i64
  %.sroa.256.0.insert.ext.i = zext i64 %1820 to i160
  %.sroa.256.0.insert.shift.i = shl nuw nsw i160 %.sroa.256.0.insert.ext.i, 64
  %.sroa.055.0.insert.ext.i = zext i64 %1819 to i160
  %.sroa.256.0.insert.insert.i = or disjoint i160 %.sroa.256.0.insert.shift.i, %.sroa.055.0.insert.ext.i
  %.sroa.055.0.insert.insert.i = or disjoint i160 %.sroa.256.0.insert.insert.i, 3062541302288446171170371466885913903104
  %1821 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.055.0.insert.insert.i, 1
  %1822 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1823 = load ptr, ptr %75, align 8
  %1824 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1823, 0
  %1825 = load ptr, ptr %76, align 8
  %1826 = insertvalue { ptr, ptr, ptr, i32 } %1824, ptr %1825, 1
  %1827 = load ptr, ptr %109, align 8
  %1828 = insertvalue { ptr, ptr, ptr, i32 } %1826, ptr %1827, 2
  %1829 = load i32, ptr %77, align 4
  %1830 = insertvalue { ptr, ptr, ptr, i32 } %1828, i32 %1829, 3
  %hash_coef_ptr.i.i132.i = getelementptr i8, ptr %1823, i64 8
  %tbl_size_ptr.i.i133.i = getelementptr i8, ptr %1823, i64 16
  %offset_tbl_ptr.i.i134.i = getelementptr i8, ptr %1823, i64 40
  %hash_coef.i.i135.i = load i64, ptr %hash_coef_ptr.i.i132.i, align 4
  %tbl_size.i.i136.i = load i64, ptr %tbl_size_ptr.i.i133.i, align 4
  %offset_tbl.i.i137.i = load ptr, ptr %offset_tbl_ptr.i.i134.i, align 8
  %product.i.i.i138.i = mul i64 %hash_coef.i.i135.i, -5261542750394134544
  %shifted.i.i.i139.i = lshr i64 %product.i.i.i138.i, 32
  %xored.i.i.i140.i = xor i64 %shifted.i.i.i139.i, %product.i.i.i138.i
  %hash.i.i.i141.i = and i64 %xored.i.i.i140.i, %tbl_size.i.i136.i
  %offset_ptr.i.i142.i = getelementptr i32, ptr %offset_tbl.i.i137.i, i64 %hash.i.i.i141.i
  %offset.i.i143.i = load i32, ptr %offset_ptr.i.i142.i, align 4
  %eq.i146.i = icmp eq i32 %1829, %offset.i.i143.i
  call void @llvm.assume(i1 %eq.i146.i) #30
  %1831 = load ptr, ptr %result.i, align 8
  %1832 = load ptr, ptr %58, align 8
  %result.i147.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1833 = getelementptr i8, ptr %result.i147.i, i64 16
  store ptr %1832, ptr %1833, align 8
  %1834 = getelementptr i8, ptr %result.i147.i, i64 8
  store ptr %1831, ptr %1834, align 8
  %1835 = getelementptr i8, ptr %result.i147.i, i64 24
  store ptr null, ptr %1835, align 8
  %1836 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i147.i)
  store ptr @Entry, ptr %result.i147.i, align 8
  store ptr @_parameterization_Ptri32, ptr %47, align 8
  store ptr %result.i147.i, ptr %1546, align 8
  %1837 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %47)
  %1838 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1823)
  %1839 = sext i32 %1829 to i64
  %1840 = getelementptr ptr, ptr %1823, i64 %1839
  %1841 = getelementptr i8, ptr %1840, i64 128
  %1842 = load ptr, ptr %1841, align 8
  store ptr @i32_typ, ptr %48, align 8
  store ptr @Entry, ptr %1547, align 8
  %1843 = call ptr %1842({ ptr, ptr, ptr, i32 } %1830, ptr nonnull %48)
  call void %1843({ ptr, ptr, ptr, i32 } %1830, { ptr, ptr, ptr, i32 } %1830, ptr nonnull %47, i32 %1645, { ptr, i160 } %1821)
  %1844 = load i32, ptr %122, align 4
  %1845 = add i32 %1844, -1
  %1846 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  store i32 %1845, ptr %122, align 4
  %1847 = icmp ne ptr %.fca.0.extract75.i, @nil_typ
  br label %HashMap_remove_keyK.exit

HashMap_remove_keyK.exit:                         ; preds = %HashMap_find_slot_keyK_hashPtri32.exit1095, %1665, %1689, %1690
  %1848 = phi i1 [ %1847, %1690 ], [ false, %HashMap_find_slot_keyK_hashPtri32.exit1095 ], [ false, %1665 ], [ false, %1689 ]
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %45)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %46)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %47)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %48)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %49)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %50)
  %1849 = zext i1 %1848 to i32
  %.reg2mem87.0 = add i32 %.reg2mem91.0284, %1849
  %1850 = add nuw nsw i32 %.reg2mem89.0283, 1
  %1851 = icmp slt i32 %1850, %.reg2mem99.0278
  br i1 %1851, label %.lr.ph, label %._crit_edge285

._crit_edge285:                                   ; preds = %HashMap_remove_keyK.exit, %.thread
  %.reg2mem91.0.lcssa = phi i32 [ 0, %.thread ], [ %.reg2mem87.0, %HashMap_remove_keyK.exit ]
  %1852 = call i64 @clock()
  %1853 = icmp eq i32 %.reg2mem91.0.lcssa, %.reg2mem99.0278
  %1854 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1855 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1856 = load i32, ptr %122, align 4
  %.not = icmp eq i32 %1856, 0
  %1857 = select i1 %.not, i1 %1853, i1 false
  br i1 %1539, label %._crit_edge, label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit

._crit_edge:                                      ; preds = %._crit_edge285
  %1858 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %1859 = load ptr, ptr %83, align 8
  %1860 = getelementptr i8, ptr %1859, i64 8
  %1861 = load i160, ptr %1860, align 4
  %.sroa.032.0.insert.ext = and i160 %1861, 4294967295
  %1862 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.032.0.insert.ext, 1
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %43)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %44)
  %1863 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1864 = load ptr, ptr %63, align 8
  %1865 = call i32 %1864({ ptr, i160 } %1862)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %23)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %24)
  %1866 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1867 = load ptr, ptr %75, align 8
  %1868 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1867, 0
  %1869 = load ptr, ptr %76, align 8
  %1870 = insertvalue { ptr, ptr, ptr, i32 } %1868, ptr %1869, 1
  %1871 = load ptr, ptr %109, align 8
  %1872 = insertvalue { ptr, ptr, ptr, i32 } %1870, ptr %1871, 2
  %1873 = load i32, ptr %77, align 4
  %1874 = insertvalue { ptr, ptr, ptr, i32 } %1872, i32 %1873, 3
  %hash_coef_ptr.i.i51.i1113 = getelementptr i8, ptr %1867, i64 8
  %tbl_size_ptr.i.i52.i1114 = getelementptr i8, ptr %1867, i64 16
  %offset_tbl_ptr.i.i53.i1115 = getelementptr i8, ptr %1867, i64 40
  %hash_coef.i.i54.i1116 = load i64, ptr %hash_coef_ptr.i.i51.i1113, align 4
  %tbl_size.i.i55.i1117 = load i64, ptr %tbl_size_ptr.i.i52.i1114, align 4
  %offset_tbl.i.i56.i1118 = load ptr, ptr %offset_tbl_ptr.i.i53.i1115, align 8
  %product.i.i.i57.i1119 = mul i64 %hash_coef.i.i54.i1116, -5261542750394134544
  %shifted.i.i.i58.i1120 = lshr i64 %product.i.i.i57.i1119, 32
  %xored.i.i.i59.i1121 = xor i64 %shifted.i.i.i58.i1120, %product.i.i.i57.i1119
  %hash.i.i.i60.i1122 = and i64 %xored.i.i.i59.i1121, %tbl_size.i.i55.i1117
  %offset_ptr.i.i61.i1123 = getelementptr i32, ptr %offset_tbl.i.i56.i1118, i64 %hash.i.i.i60.i1122
  %offset.i.i62.i1124 = load i32, ptr %offset_ptr.i.i61.i1123, align 4
  %eq.i.i1125 = icmp eq i32 %1873, %offset.i.i62.i1124
  call void @llvm.assume(i1 %eq.i.i1125) #30
  %1875 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1876 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1867)
  %1877 = sext i32 %1873 to i64
  %1878 = getelementptr ptr, ptr %1867, i64 %1877
  %1879 = getelementptr i8, ptr %1878, i64 64
  %1880 = load ptr, ptr %1879, align 8
  %1881 = call ptr %1880({ ptr, ptr, ptr, i32 } %1874, ptr nonnull %2)
  %1882 = call i32 %1881({ ptr, ptr, ptr, i32 } %1874, { ptr, ptr, ptr, i32 } %1874, ptr nonnull %2)
  %1883 = add i32 %1882, -1
  %1884 = and i32 %1883, %1865
  %1885 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  br label %1886

1886:                                             ; preds = %1935, %._crit_edge
  %spec.store.select.i11671186 = phi i32 [ %spec.store.select.i1167, %1935 ], [ -1, %._crit_edge ]
  %.0..0..0..i1126 = phi i32 [ %1953, %1935 ], [ %1884, %._crit_edge ]
  %1887 = load ptr, ptr %75, align 8
  %1888 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1887, 0
  %1889 = load ptr, ptr %76, align 8
  %1890 = insertvalue { ptr, ptr, ptr, i32 } %1888, ptr %1889, 1
  %1891 = load ptr, ptr %109, align 8
  %1892 = insertvalue { ptr, ptr, ptr, i32 } %1890, ptr %1891, 2
  %1893 = load i32, ptr %77, align 4
  %1894 = insertvalue { ptr, ptr, ptr, i32 } %1892, i32 %1893, 3
  %hash_coef_ptr.i.i65.i1131 = getelementptr i8, ptr %1887, i64 8
  %tbl_size_ptr.i.i66.i1132 = getelementptr i8, ptr %1887, i64 16
  %offset_tbl_ptr.i.i67.i1133 = getelementptr i8, ptr %1887, i64 40
  %hash_coef.i.i68.i1134 = load i64, ptr %hash_coef_ptr.i.i65.i1131, align 4
  %tbl_size.i.i69.i1135 = load i64, ptr %tbl_size_ptr.i.i66.i1132, align 4
  %offset_tbl.i.i70.i1136 = load ptr, ptr %offset_tbl_ptr.i.i67.i1133, align 8
  %product.i.i.i71.i1137 = mul i64 %hash_coef.i.i68.i1134, -5261542750394134544
  %shifted.i.i.i72.i1138 = lshr i64 %product.i.i.i71.i1137, 32
  %xored.i.i.i73.i1139 = xor i64 %shifted.i.i.i72.i1138, %product.i.i.i71.i1137
  %hash.i.i.i74.i1140 = and i64 %xored.i.i.i73.i1139, %tbl_size.i.i69.i1135
  %offset_ptr.i.i75.i1141 = getelementptr i32, ptr %offset_tbl.i.i70.i1136, i64 %hash.i.i.i74.i1140
  %offset.i.i76.i1142 = load i32, ptr %offset_ptr.i.i75.i1141, align 4
  %eq.i79.i1143 = icmp eq i32 %1893, %offset.i.i76.i1142
  call void @llvm.assume(i1 %eq.i79.i1143) #30
  %1895 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  store ptr @_parameterization_Ptri32, ptr %23, align 8
  %1896 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %23)
  %1897 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1887)
  %1898 = sext i32 %1893 to i64
  %1899 = getelementptr ptr, ptr %1887, i64 %1898
  %1900 = getelementptr i8, ptr %1899, i64 120
  %1901 = load ptr, ptr %1900, align 8
  store ptr @i32_typ, ptr %24, align 8
  %1902 = call ptr %1901({ ptr, ptr, ptr, i32 } %1894, ptr nonnull %24)
  %1903 = call { ptr, i160 } %1902({ ptr, ptr, ptr, i32 } %1894, { ptr, ptr, ptr, i32 } %1894, ptr nonnull %23, i32 %.0..0..0..i1126)
  %.fca.0.extract36.i1144 = extractvalue { ptr, i160 } %1903, 0
  %1904 = icmp eq ptr %.fca.0.extract36.i1144, @nil_typ
  %1905 = icmp eq ptr %.fca.0.extract36.i1144, null
  %1906 = or i1 %1904, %1905
  br i1 %1906, label %1954, label %1907

1907:                                             ; preds = %1886
  %.fca.1.extract38.i1145 = extractvalue { ptr, i160 } %1903, 1
  %.sroa.5.8.extract.shift.i1146 = lshr i160 %.fca.1.extract38.i1145, 64
  %.sroa.5.8.extract.trunc.i1147 = trunc i160 %.sroa.5.8.extract.shift.i1146 to i64
  %.sroa.2.8.extract.trunc165.i1148 = trunc i160 %.fca.1.extract38.i1145 to i64
  %1908 = inttoptr i64 %.sroa.2.8.extract.trunc165.i1148 to ptr
  %1909 = inttoptr i64 %.sroa.5.8.extract.trunc.i1147 to ptr
  %hash_coef_ptr.i.i81.i1149 = getelementptr i8, ptr %.fca.0.extract36.i1144, i64 8
  %tbl_size_ptr.i.i82.i1150 = getelementptr i8, ptr %.fca.0.extract36.i1144, i64 16
  %offset_tbl_ptr.i.i83.i1151 = getelementptr i8, ptr %.fca.0.extract36.i1144, i64 40
  %hash_coef.i.i84.i1152 = load i64, ptr %hash_coef_ptr.i.i81.i1149, align 4
  %tbl_size.i.i85.i1153 = load i64, ptr %tbl_size_ptr.i.i82.i1150, align 4
  %offset_tbl.i.i86.i1154 = load ptr, ptr %offset_tbl_ptr.i.i83.i1151, align 8
  %product.i.i.i87.i1155 = mul i64 %hash_coef.i.i84.i1152, 4015701072841558310
  %shifted.i.i.i88.i1156 = lshr i64 %product.i.i.i87.i1155, 32
  %xored.i.i.i89.i1157 = xor i64 %shifted.i.i.i88.i1156, %product.i.i.i87.i1155
  %hash.i.i.i90.i1158 = and i64 %xored.i.i.i89.i1157, %tbl_size.i.i85.i1153
  %offset_ptr.i.i91.i1159 = getelementptr i32, ptr %offset_tbl.i.i86.i1154, i64 %hash.i.i.i90.i1158
  %offset.i.i92.i1160 = load i32, ptr %offset_ptr.i.i91.i1159, align 4
  %1910 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract36.i1144, 0
  %1911 = insertvalue { ptr, ptr, ptr, i32 } %1910, ptr %1908, 1
  %1912 = insertvalue { ptr, ptr, ptr, i32 } %1911, ptr %1909, 2
  %1913 = insertvalue { ptr, ptr, ptr, i32 } %1912, i32 %offset.i.i92.i1160, 3
  %1914 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1915 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1916 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i1144)
  %1917 = sext i32 %offset.i.i92.i1160 to i64
  %1918 = getelementptr ptr, ptr %.fca.0.extract36.i1144, i64 %1917
  %1919 = getelementptr i8, ptr %1918, i64 64
  %1920 = load ptr, ptr %1919, align 8
  %1921 = call ptr %1920({ ptr, ptr, ptr, i32 } %1913, ptr nonnull %2)
  %1922 = call i32 %1921({ ptr, ptr, ptr, i32 } %1913, { ptr, ptr, ptr, i32 } %1913, ptr nonnull %2)
  %1923 = icmp eq i32 %1922, %1865
  %1924 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1925 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1926 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i1144)
  %1927 = getelementptr i8, ptr %1918, i64 48
  %1928 = load ptr, ptr %1927, align 8
  %1929 = call ptr %1928({ ptr, ptr, ptr, i32 } %1913, ptr nonnull %2)
  %1930 = call { ptr, i160 } %1929({ ptr, ptr, ptr, i32 } %1913, { ptr, ptr, ptr, i32 } %1913, ptr nonnull %2)
  %1931 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1932 = load ptr, ptr %64, align 8
  %1933 = call i1 %1932({ ptr, i160 } %1930, { ptr, i160 } %1862)
  %1934 = and i1 %1923, %1933
  br i1 %1934, label %HashMap_find_slot_keyK_hashPtri32.exit1170, label %1935

1935:                                             ; preds = %1907
  %1936 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1937 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1938 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i1144)
  %1939 = getelementptr i8, ptr %1918, i64 56
  %1940 = load ptr, ptr %1939, align 8
  %1941 = call ptr %1940({ ptr, ptr, ptr, i32 } %1913, ptr nonnull %2)
  %1942 = call { ptr, i160 } %1941({ ptr, ptr, ptr, i32 } %1913, { ptr, ptr, ptr, i32 } %1913, ptr nonnull %2)
  %.fca.0.extract15.i1162 = extractvalue { ptr, i160 } %1942, 0
  %1943 = getelementptr i8, ptr %.fca.0.extract15.i1162, i64 8
  %1944 = getelementptr i8, ptr %.fca.0.extract15.i1162, i64 16
  %1945 = getelementptr i8, ptr %.fca.0.extract15.i1162, i64 24
  %1946 = getelementptr i8, ptr %.fca.0.extract15.i1162, i64 32
  %1947 = load i64, ptr %1943, align 4
  %1948 = load i64, ptr %1944, align 4
  %1949 = load ptr, ptr %1945, align 8
  %1950 = load ptr, ptr %1946, align 8
  %result.i.i1163 = call i1 %1949(i64 %1948, i64 %1947, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %1950) #3
  %1951 = icmp eq i32 %spec.store.select.i11671186, -1
  %or.cond.i1165 = select i1 %result.i.i1163, i1 %1951, i1 false
  %spec.store.select.i1167 = select i1 %or.cond.i1165, i32 %.0..0..0..i1126, i32 %spec.store.select.i11671186
  %1952 = add i32 %.0..0..0..i1126, 1
  %1953 = and i32 %1952, %1883
  br label %1886

1954:                                             ; preds = %1886
  %1955 = icmp eq i32 %spec.store.select.i11671186, -1
  %.pre1201 = select i1 %1955, i32 %.0..0..0..i1126, i32 %spec.store.select.i11671186
  br label %HashMap_find_slot_keyK_hashPtri32.exit1170

HashMap_find_slot_keyK_hashPtri32.exit1170:       ; preds = %1907, %1954
  %1956 = phi i32 [ %.pre1201, %1954 ], [ %.0..0..0..i1126, %1907 ]
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %23)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %24)
  %1957 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1958 = load ptr, ptr %75, align 8
  %1959 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1958, 0
  %1960 = load ptr, ptr %76, align 8
  %1961 = insertvalue { ptr, ptr, ptr, i32 } %1959, ptr %1960, 1
  %1962 = load ptr, ptr %109, align 8
  %1963 = insertvalue { ptr, ptr, ptr, i32 } %1961, ptr %1962, 2
  %1964 = load i32, ptr %77, align 4
  %1965 = insertvalue { ptr, ptr, ptr, i32 } %1963, i32 %1964, 3
  %hash_coef_ptr.i.i58.i696 = getelementptr i8, ptr %1958, i64 8
  %tbl_size_ptr.i.i59.i697 = getelementptr i8, ptr %1958, i64 16
  %offset_tbl_ptr.i.i60.i698 = getelementptr i8, ptr %1958, i64 40
  %hash_coef.i.i61.i699 = load i64, ptr %hash_coef_ptr.i.i58.i696, align 4
  %tbl_size.i.i62.i700 = load i64, ptr %tbl_size_ptr.i.i59.i697, align 4
  %offset_tbl.i.i63.i701 = load ptr, ptr %offset_tbl_ptr.i.i60.i698, align 8
  %product.i.i.i64.i702 = mul i64 %hash_coef.i.i61.i699, -5261542750394134544
  %shifted.i.i.i65.i703 = lshr i64 %product.i.i.i64.i702, 32
  %xored.i.i.i66.i704 = xor i64 %shifted.i.i.i65.i703, %product.i.i.i64.i702
  %hash.i.i.i67.i705 = and i64 %xored.i.i.i66.i704, %tbl_size.i.i62.i700
  %offset_ptr.i.i68.i706 = getelementptr i32, ptr %offset_tbl.i.i63.i701, i64 %hash.i.i.i67.i705
  %offset.i.i69.i707 = load i32, ptr %offset_ptr.i.i68.i706, align 4
  %eq.i.i708 = icmp eq i32 %1964, %offset.i.i69.i707
  call void @llvm.assume(i1 %eq.i.i708) #30
  store ptr @_parameterization_Ptri32, ptr %43, align 8
  %1966 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %43)
  %1967 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1958)
  %1968 = sext i32 %1964 to i64
  %1969 = getelementptr ptr, ptr %1958, i64 %1968
  %1970 = getelementptr i8, ptr %1969, i64 120
  %1971 = load ptr, ptr %1970, align 8
  store ptr @i32_typ, ptr %44, align 8
  %1972 = call ptr %1971({ ptr, ptr, ptr, i32 } %1965, ptr nonnull %44)
  %1973 = call { ptr, i160 } %1972({ ptr, ptr, ptr, i32 } %1965, { ptr, ptr, ptr, i32 } %1965, ptr nonnull %43, i32 %1956)
  %.fca.0.extract.i709 = extractvalue { ptr, i160 } %1973, 0
  %1974 = icmp ne ptr %.fca.0.extract.i709, @nil_typ
  %1975 = icmp ne ptr %.fca.0.extract.i709, null
  %.not56.i710 = and i1 %1974, %1975
  br i1 %.not56.i710, label %1976, label %HashMap_get_keyK.exit732

1976:                                             ; preds = %HashMap_find_slot_keyK_hashPtri32.exit1170
  %.fca.1.extract.i711 = extractvalue { ptr, i160 } %1973, 1
  %.sroa.3.8.extract.trunc.i712 = trunc i160 %.fca.1.extract.i711 to i64
  %1977 = inttoptr i64 %.sroa.3.8.extract.trunc.i712 to ptr
  %.sroa.5.8.extract.shift.i713 = lshr i160 %.fca.1.extract.i711, 64
  %.sroa.5.8.extract.trunc.i714 = trunc i160 %.sroa.5.8.extract.shift.i713 to i64
  %1978 = inttoptr i64 %.sroa.5.8.extract.trunc.i714 to ptr
  %hash_coef_ptr.i.i72.i715 = getelementptr i8, ptr %.fca.0.extract.i709, i64 8
  %tbl_size_ptr.i.i73.i716 = getelementptr i8, ptr %.fca.0.extract.i709, i64 16
  %offset_tbl_ptr.i.i74.i717 = getelementptr i8, ptr %.fca.0.extract.i709, i64 40
  %hash_coef.i.i75.i718 = load i64, ptr %hash_coef_ptr.i.i72.i715, align 4
  %tbl_size.i.i76.i719 = load i64, ptr %tbl_size_ptr.i.i73.i716, align 4
  %offset_tbl.i.i77.i720 = load ptr, ptr %offset_tbl_ptr.i.i74.i717, align 8
  %product.i.i.i78.i721 = mul i64 %hash_coef.i.i75.i718, 4015701072841558310
  %shifted.i.i.i79.i722 = lshr i64 %product.i.i.i78.i721, 32
  %xored.i.i.i80.i723 = xor i64 %shifted.i.i.i79.i722, %product.i.i.i78.i721
  %hash.i.i.i81.i724 = and i64 %xored.i.i.i80.i723, %tbl_size.i.i76.i719
  %offset_ptr.i.i82.i725 = getelementptr i32, ptr %offset_tbl.i.i77.i720, i64 %hash.i.i.i81.i724
  %offset.i.i83.i726 = load i32, ptr %offset_ptr.i.i82.i725, align 4
  %1979 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract.i709, 0
  %1980 = insertvalue { ptr, ptr, ptr, i32 } %1979, ptr %1977, 1
  %1981 = insertvalue { ptr, ptr, ptr, i32 } %1980, ptr %1978, 2
  %1982 = insertvalue { ptr, ptr, ptr, i32 } %1981, i32 %offset.i.i83.i726, 3
  %1983 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1984 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1985 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract.i709)
  %1986 = sext i32 %offset.i.i83.i726 to i64
  %1987 = getelementptr ptr, ptr %.fca.0.extract.i709, i64 %1986
  %1988 = getelementptr i8, ptr %1987, i64 56
  %1989 = load ptr, ptr %1988, align 8
  %1990 = call ptr %1989({ ptr, ptr, ptr, i32 } %1982, ptr nonnull %2)
  %1991 = call { ptr, i160 } %1990({ ptr, ptr, ptr, i32 } %1982, { ptr, ptr, ptr, i32 } %1982, ptr nonnull %2)
  %.fca.0.extract47.i727 = extractvalue { ptr, i160 } %1991, 0
  %1992 = getelementptr i8, ptr %.fca.0.extract47.i727, i64 8
  %1993 = getelementptr i8, ptr %.fca.0.extract47.i727, i64 16
  %1994 = getelementptr i8, ptr %.fca.0.extract47.i727, i64 24
  %1995 = getelementptr i8, ptr %.fca.0.extract47.i727, i64 32
  %1996 = load i64, ptr %1992, align 4
  %1997 = load i64, ptr %1993, align 4
  %1998 = load ptr, ptr %1994, align 8
  %1999 = load ptr, ptr %1995, align 8
  %result.i.i728 = call i1 %1998(i64 %1997, i64 %1996, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %1999) #3
  br i1 %result.i.i728, label %HashMap_get_keyK.exit732, label %2000

2000:                                             ; preds = %1976
  %result.i85.i729 = call i1 %1998(i64 %1997, i64 %1996, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr readonly %1999) #3
  %cond.fr.i730 = freeze i1 %result.i85.i729
  %spec.select.i731 = select i1 %cond.fr.i730, ptr %.fca.0.extract47.i727, ptr @nil_typ
  br label %HashMap_get_keyK.exit732

HashMap_get_keyK.exit732:                         ; preds = %HashMap_find_slot_keyK_hashPtri32.exit1170, %1976, %2000
  %2001 = phi ptr [ @nil_typ, %HashMap_find_slot_keyK_hashPtri32.exit1170 ], [ @nil_typ, %1976 ], [ %spec.select.i731, %2000 ]
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %43)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %44)
  %2002 = icmp eq ptr %2001, @nil_typ
  %2003 = icmp eq ptr %2001, null
  %.not90.not = or i1 %2002, %2003
  %2004 = select i1 %.not90.not, i1 %1857, i1 false
  br label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit

IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit: ; preds = %HashMap_get_keyK.exit732, %._crit_edge285
  %.reg2mem77.0 = phi i1 [ %2004, %HashMap_get_keyK.exit732 ], [ %1857, %._crit_edge285 ]
  %result.i152 = call noalias dereferenceable_or_null(14) ptr @bump_malloc_inner(i64 noundef 14, ptr nonnull @current_ptr) #29
  store <13 x i8> <i8 82, i8 101, i8 109, i8 111, i8 118, i8 101, i8 32, i8 82, i8 97, i8 110, i8 100, i8 111, i8 109>, ptr %result.i152, align 16
  %result.i153 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %2005 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %result.i153, 1
  %2006 = insertvalue { ptr, ptr, ptr, i32 } %2005, ptr undef, 2
  %2007 = insertvalue { ptr, ptr, ptr, i32 } %2006, i32 9, 3
  store ptr %result.i152, ptr %result.i153, align 8
  %2008 = getelementptr i8, ptr %result.i153, i64 8
  store i32 13, ptr %2008, align 4
  %2009 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %2010 = getelementptr i8, ptr %result.i153, i64 12
  store i32 14, ptr %2010, align 4
  %2011 = sub i64 %1852, %1538
  call void @print_benchmark_result({ ptr, ptr, ptr, i32 } %2007, i32 %.reg2mem99.0278, i64 %2011)
  %result.i154 = call noalias dereferenceable_or_null(19) ptr @bump_malloc_inner(i64 noundef 19, ptr nonnull @current_ptr) #29
  store <18 x i8> <i8 32, i8 32, i8 32, i8 32, i8 86, i8 101, i8 114, i8 105, i8 102, i8 105, i8 99, i8 97, i8 116, i8 105, i8 111, i8 110, i8 58, i8 32>, ptr %result.i154, align 32
  %result.i155 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %2012 = getelementptr inbounds i8, ptr %53, i64 8
  %2013 = getelementptr inbounds i8, ptr %53, i64 24
  store ptr @String, ptr %53, align 8
  store ptr %result.i155, ptr %2012, align 8
  store i32 9, ptr %2013, align 8
  %2014 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %53)
  store ptr %result.i154, ptr %result.i155, align 8
  %2015 = getelementptr i8, ptr %result.i155, i64 8
  store i32 18, ptr %2015, align 4
  %2016 = getelementptr i8, ptr %result.i155, i64 12
  store i32 19, ptr %2016, align 4
  %2017 = load i160, ptr %2012, align 8
  %2018 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %.sroa.3.8.extract.trunc.i511 = trunc i160 %2017 to i64
  %2019 = inttoptr i64 %.sroa.3.8.extract.trunc.i511 to ptr
  %2020 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2021 = getelementptr i8, ptr %2019, i64 8
  %2022 = load i32, ptr %2021, align 4
  %2023 = add i32 %2022, 1
  %2024 = sext i32 %2023 to i64
  %result.i.i812 = call noalias ptr @bump_malloc_inner(i64 noundef %2024, ptr nonnull @current_ptr) #29
  %2025 = load i32, ptr %2021, align 4
  %2026 = icmp sgt i32 %2025, 0
  br i1 %2026, label %.lr.ph.i, label %String_c_string_.exit

.lr.ph.i:                                         ; preds = %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit
  %2027 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %2028 = load ptr, ptr %2019, align 8
  %2029 = zext nneg i32 %2025 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i812, ptr align 1 %2028, i64 %2029, i1 false)
  br label %String_c_string_.exit

String_c_string_.exit:                            ; preds = %.lr.ph.i, %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit
  %2030 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %2031 = sext i32 %2025 to i64
  %2032 = getelementptr i8, ptr %result.i.i812, i64 %2031
  store i8 0, ptr %2032, align 1
  %puts.i = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i812)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %result.i156 = call noalias dereferenceable_or_null(5) ptr @bump_malloc_inner(i64 noundef 5, ptr nonnull @current_ptr) #29
  %. = select i1 %.reg2mem77.0, <4 x i8> <i8 80, i8 65, i8 83, i8 83>, <4 x i8> <i8 70, i8 65, i8 73, i8 76>
  %.400 = select i1 %.reg2mem77.0, ptr %54, ptr %55
  store <4 x i8> %., ptr %result.i156, align 4
  %result.i157 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %.400.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v = select i1 %.reg2mem77.0, ptr %54, ptr %55
  %.400.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel = getelementptr inbounds i8, ptr %.400.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v, i64 8
  %.400.sroa.sel591.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v = select i1 %.reg2mem77.0, ptr %54, ptr %55
  %.400.sroa.sel591.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel = getelementptr inbounds i8, ptr %.400.sroa.sel591.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v, i64 24
  store ptr @String, ptr %.400, align 8
  store ptr %result.i157, ptr %.400.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  store i32 9, ptr %.400.sroa.sel591.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  %2033 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %.400)
  store ptr %result.i156, ptr %result.i157, align 8
  %2034 = getelementptr i8, ptr %result.i157, i64 8
  store i32 4, ptr %2034, align 4
  %2035 = getelementptr i8, ptr %result.i157, i64 12
  store i32 5, ptr %2035, align 4
  %2036 = load i160, ptr %.400.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  %2037 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %.sroa.3.8.extract.trunc.i530 = trunc i160 %2036 to i64
  %2038 = inttoptr i64 %.sroa.3.8.extract.trunc.i530 to ptr
  %2039 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2040 = getelementptr i8, ptr %2038, i64 8
  %2041 = load i32, ptr %2040, align 4
  %2042 = add i32 %2041, 1
  %2043 = sext i32 %2042 to i64
  %result.i.i828 = call noalias ptr @bump_malloc_inner(i64 noundef %2043, ptr nonnull @current_ptr) #29
  %2044 = load i32, ptr %2040, align 4
  %2045 = icmp sgt i32 %2044, 0
  br i1 %2045, label %.lr.ph.i829, label %String_c_string_.exit833

.lr.ph.i829:                                      ; preds = %String_c_string_.exit
  %2046 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %2047 = load ptr, ptr %2038, align 8
  %2048 = zext nneg i32 %2044 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i828, ptr align 1 %2047, i64 %2048, i1 false)
  br label %String_c_string_.exit833

String_c_string_.exit833:                         ; preds = %.lr.ph.i829, %String_c_string_.exit
  %2049 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %2050 = sext i32 %2044 to i64
  %2051 = getelementptr i8, ptr %result.i.i828, i64 %2050
  store i8 0, ptr %2051, align 1
  %puts.i546 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i828)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %result.i196 = call noalias dereferenceable_or_null(21) ptr @bump_malloc_inner(i64 noundef 21, ptr nonnull @current_ptr) #29
  store <20 x i8> <i8 32, i8 32, i8 32, i8 32, i8 40, i8 73, i8 116, i8 101, i8 109, i8 115, i8 32, i8 114, i8 101, i8 109, i8 111, i8 118, i8 101, i8 100, i8 58, i8 32>, ptr %result.i196, align 32
  %result.i197 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %2052 = getelementptr inbounds i8, ptr %56, i64 8
  %2053 = getelementptr inbounds i8, ptr %56, i64 24
  store ptr @String, ptr %56, align 8
  store ptr %result.i197, ptr %2052, align 8
  store i32 9, ptr %2053, align 8
  %2054 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %56)
  store ptr %result.i196, ptr %result.i197, align 8
  %2055 = getelementptr i8, ptr %result.i197, i64 8
  store i32 20, ptr %2055, align 4
  %2056 = getelementptr i8, ptr %result.i197, i64 12
  store i32 21, ptr %2056, align 4
  %2057 = load i160, ptr %2052, align 8
  %2058 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %.sroa.3.8.extract.trunc.i550 = trunc i160 %2057 to i64
  %2059 = inttoptr i64 %.sroa.3.8.extract.trunc.i550 to ptr
  %2060 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2061 = getelementptr i8, ptr %2059, i64 8
  %2062 = load i32, ptr %2061, align 4
  %2063 = add i32 %2062, 1
  %2064 = sext i32 %2063 to i64
  %result.i.i848 = call noalias ptr @bump_malloc_inner(i64 noundef %2064, ptr nonnull @current_ptr) #29
  %2065 = load i32, ptr %2061, align 4
  %2066 = icmp sgt i32 %2065, 0
  br i1 %2066, label %.lr.ph.i849, label %String_c_string_.exit853

.lr.ph.i849:                                      ; preds = %String_c_string_.exit833
  %2067 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %2068 = load ptr, ptr %2059, align 8
  %2069 = zext nneg i32 %2065 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i848, ptr align 1 %2068, i64 %2069, i1 false)
  br label %String_c_string_.exit853

String_c_string_.exit853:                         ; preds = %.lr.ph.i849, %String_c_string_.exit833
  %2070 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %2071 = sext i32 %2065 to i64
  %2072 = getelementptr i8, ptr %result.i.i848, i64 %2071
  store i8 0, ptr %2072, align 1
  %puts.i566 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i848)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %2073 = call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i32_string, i32 %.reg2mem91.0.lcssa)
  %result.i234 = call noalias dereferenceable_or_null(2) ptr @bump_malloc_inner(i64 noundef 2, ptr nonnull @current_ptr) #29
  store <1 x i8> <i8 41>, ptr %result.i234, align 1
  %result.i235 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %2074 = getelementptr inbounds i8, ptr %57, i64 8
  %2075 = getelementptr inbounds i8, ptr %57, i64 24
  store ptr @String, ptr %57, align 8
  store ptr %result.i235, ptr %2074, align 8
  store i32 9, ptr %2075, align 8
  %2076 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %57)
  store ptr %result.i234, ptr %result.i235, align 8
  %2077 = getelementptr i8, ptr %result.i235, i64 8
  store i32 1, ptr %2077, align 4
  %2078 = getelementptr i8, ptr %result.i235, i64 12
  store i32 2, ptr %2078, align 4
  %2079 = load i160, ptr %2074, align 8
  %2080 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %.sroa.3.8.extract.trunc.i571 = trunc i160 %2079 to i64
  %2081 = inttoptr i64 %.sroa.3.8.extract.trunc.i571 to ptr
  %2082 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2083 = getelementptr i8, ptr %2081, i64 8
  %2084 = load i32, ptr %2083, align 4
  %2085 = add i32 %2084, 1
  %2086 = sext i32 %2085 to i64
  %result.i.i868 = call noalias ptr @bump_malloc_inner(i64 noundef %2086, ptr nonnull @current_ptr) #29
  %2087 = load i32, ptr %2083, align 4
  %2088 = icmp sgt i32 %2087, 0
  br i1 %2088, label %.lr.ph.i869, label %String_c_string_.exit873

.lr.ph.i869:                                      ; preds = %String_c_string_.exit853
  %2089 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %2090 = load ptr, ptr %2081, align 8
  %2091 = zext nneg i32 %2087 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i868, ptr align 1 %2090, i64 %2091, i1 false)
  br label %String_c_string_.exit873

String_c_string_.exit873:                         ; preds = %.lr.ph.i869, %String_c_string_.exit853
  %2092 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %2093 = sext i32 %2087 to i64
  %2094 = getelementptr i8, ptr %result.i.i868, i64 %2093
  store i8 0, ptr %2094, align 1
  %puts.i587 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i868)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  ret void
}

define void @benchmark_insert_remove_mix(i32 %0) local_unnamed_addr {
  %2 = alloca [0 x ptr], align 8
  %3 = alloca [1 x ptr], align 8
  %4 = alloca { ptr }, align 8
  %5 = alloca [1 x ptr], align 8
  %6 = alloca { ptr }, align 8
  %7 = alloca [1 x ptr], align 8
  %8 = alloca { ptr }, align 8
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = alloca [3 x ptr], align 8
  %11 = alloca [2 x ptr], align 8
  %12 = alloca { ptr, ptr }, align 8
  %13 = alloca [1 x ptr], align 8
  %14 = alloca { ptr }, align 8
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  %16 = alloca [2 x ptr], align 8
  %17 = alloca { ptr, ptr }, align 8
  %18 = alloca [1 x ptr], align 8
  %19 = alloca { ptr }, align 8
  %oldProtect.i23 = alloca i32, align 4
  %oldProtect.i = alloca i32, align 4
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %result.i = tail call noalias dereferenceable_or_null(80) ptr @bump_malloc_inner(i64 noundef 80, ptr nonnull @current_ptr) #29
  store ptr @_parameterization_Ptri32, ptr %result.i, align 8
  %22 = getelementptr i8, ptr %result.i, i64 8
  store ptr @_parameterization_Ptri32, ptr %22, align 8
  %23 = getelementptr i8, ptr %result.i, i64 16
  store ptr @_parameterization_PairPtri32._Ptri32, ptr %23, align 8
  %24 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %result.i)
  %result.i20 = tail call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %oldProtect.i)
  %result.i21 = call i32 @VirtualProtect(ptr %result.i20, i64 16, i32 64, ptr nonnull %oldProtect.i) #16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %oldProtect.i)
  call void @llvm.init.trampoline(ptr %result.i20, ptr nonnull @qcuomdwgoi, ptr nonnull @i32_hasher)
  %ret.i = call ptr @llvm.adjust.trampoline(ptr readonly %result.i20) #31
  %25 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i20)
  %result.i22 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %oldProtect.i23)
  %result.i24 = call i32 @VirtualProtect(ptr %result.i22, i64 16, i32 64, ptr nonnull %oldProtect.i23) #16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %oldProtect.i23)
  call void @llvm.init.trampoline(ptr %result.i22, ptr nonnull @lwmnayxbwz, ptr nonnull @i32_eq)
  %ret.i25 = call ptr @llvm.adjust.trampoline(ptr readonly %result.i22) #31
  %26 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i22)
  %27 = getelementptr i8, ptr %result.i, i64 64
  store ptr %ret.i, ptr %27, align 8
  %28 = getelementptr i8, ptr %result.i, i64 72
  store ptr %ret.i25, ptr %28, align 8
  %result.i.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %29 = getelementptr i8, ptr %result.i.i, i64 16
  store ptr @_parameterization_Nil, ptr %29, align 8
  %result.i4.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %30 = getelementptr i8, ptr %result.i4.i, i64 16
  store ptr @_parameterization_Ptri32, ptr %30, align 8
  %31 = getelementptr i8, ptr %result.i4.i, i64 8
  store ptr @_parameterization_Ptri32, ptr %31, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i4.i)
  store ptr @Entry, ptr %result.i4.i, align 8
  %33 = getelementptr i8, ptr %result.i.i, i64 8
  store ptr %result.i4.i, ptr %33, align 8
  %34 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i)
  store ptr @union_typ, ptr %result.i.i, align 8
  %result.i5.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i, ptr %result.i5.i, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i5.i)
  %36 = getelementptr i8, ptr %result.i5.i, i64 16
  store i32 16, ptr %36, align 4
  %37 = getelementptr i8, ptr %result.i5.i, i64 20
  store i32 16, ptr %37, align 4
  %result.i.i.i = call noalias dereferenceable_or_null(512) ptr @bump_malloc_inner(i64 noundef 512, ptr nonnull @current_ptr) #29
  %38 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %39 = getelementptr i8, ptr %result.i5.i, i64 8
  store ptr %result.i.i.i, ptr %39, align 8
  %40 = getelementptr i8, ptr %result.i, i64 24
  store ptr @Array, ptr %40, align 8
  %41 = getelementptr i8, ptr %result.i, i64 32
  store ptr %result.i5.i, ptr %41, align 8
  %42 = getelementptr i8, ptr %result.i, i64 40
  %43 = getelementptr i8, ptr %result.i, i64 48
  store i32 9, ptr %43, align 4
  %44 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %45 = getelementptr i8, ptr %result.i, i64 60
  %46 = call ptr @llvm.invariant.start.p0(i64 40, ptr nonnull @PRNG)
  %47 = shl i32 %0, 1
  %48 = call i64 @clock()
  %49 = icmp sgt i32 %47, 0
  br i1 %49, label %.lr.ph, label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit82

.lr.ph:                                           ; preds = %1
  %50 = call ptr @llvm.invariant.start.p0(i64 40, ptr nonnull @PRNG)
  %51 = getelementptr inbounds i8, ptr %15, i64 8
  %52 = getelementptr inbounds i8, ptr %15, i64 24
  %53 = getelementptr inbounds i8, ptr %15, i64 16
  %54 = getelementptr inbounds i8, ptr %16, i64 8
  %55 = getelementptr inbounds i8, ptr %17, i64 8
  %56 = getelementptr i8, ptr %result.i, i64 56
  %57 = getelementptr inbounds i8, ptr %9, i64 8
  %58 = getelementptr inbounds i8, ptr %9, i64 24
  %59 = getelementptr inbounds i8, ptr %9, i64 16
  %60 = getelementptr inbounds i8, ptr %10, i64 8
  %61 = getelementptr inbounds i8, ptr %10, i64 16
  %62 = getelementptr inbounds i8, ptr %11, i64 8
  %63 = getelementptr inbounds i8, ptr %12, i64 8
  br label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph, %HashMap_insert_internal_keyK_valueV_hashPtri32.exit
  %64 = phi i32 [ 131415, %.lr.ph ], [ %67, %HashMap_insert_internal_keyK_valueV_hashPtri32.exit ]
  %.reg2mem16.092 = phi i32 [ 0, %.lr.ph ], [ %691, %HashMap_insert_internal_keyK_valueV_hashPtri32.exit ]
  %65 = mul i32 %64, 1103515245
  %66 = add i32 %65, 12345
  %67 = and i32 %66, 2147483647
  %68 = add nuw i32 %67, 1
  %.sroa.014.0.insert.ext = zext nneg i32 %67 to i160
  %69 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.014.0.insert.ext, 1
  %.sroa.07.0.insert.ext = zext i32 %68 to i160
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %70 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %71 = load ptr, ptr %40, align 8
  %72 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %71, 0
  %73 = load ptr, ptr %41, align 8
  %74 = insertvalue { ptr, ptr, ptr, i32 } %72, ptr %73, 1
  %75 = load ptr, ptr %42, align 8
  %76 = insertvalue { ptr, ptr, ptr, i32 } %74, ptr %75, 2
  %77 = load i32, ptr %43, align 4
  %78 = insertvalue { ptr, ptr, ptr, i32 } %76, i32 %77, 3
  %hash_coef_ptr.i.i42.i = getelementptr i8, ptr %71, i64 8
  %tbl_size_ptr.i.i43.i = getelementptr i8, ptr %71, i64 16
  %offset_tbl_ptr.i.i44.i = getelementptr i8, ptr %71, i64 40
  %hash_coef.i.i45.i = load i64, ptr %hash_coef_ptr.i.i42.i, align 4
  %tbl_size.i.i46.i = load i64, ptr %tbl_size_ptr.i.i43.i, align 4
  %offset_tbl.i.i47.i = load ptr, ptr %offset_tbl_ptr.i.i44.i, align 8
  %product.i.i.i48.i = mul i64 %hash_coef.i.i45.i, -5261542750394134544
  %shifted.i.i.i49.i = lshr i64 %product.i.i.i48.i, 32
  %xored.i.i.i50.i = xor i64 %shifted.i.i.i49.i, %product.i.i.i48.i
  %hash.i.i.i51.i = and i64 %xored.i.i.i50.i, %tbl_size.i.i46.i
  %offset_ptr.i.i52.i = getelementptr i32, ptr %offset_tbl.i.i47.i, i64 %hash.i.i.i51.i
  %offset.i.i53.i = load i32, ptr %offset_ptr.i.i52.i, align 4
  %eq.i.i = icmp eq i32 %77, %offset.i.i53.i
  call void @llvm.assume(i1 %eq.i.i) #30
  %79 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %80 = call ptr @llvm.invariant.start.p0(i64 600, ptr %71)
  %81 = sext i32 %77 to i64
  %82 = getelementptr ptr, ptr %71, i64 %81
  %83 = getelementptr i8, ptr %82, i64 64
  %84 = load ptr, ptr %83, align 8
  %85 = call ptr %84({ ptr, ptr, ptr, i32 } %78, ptr nonnull %2)
  %86 = call i32 %85({ ptr, ptr, ptr, i32 } %78, { ptr, ptr, ptr, i32 } %78, ptr nonnull %2)
  %87 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %88 = load ptr, ptr %40, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %88, 0
  %90 = load ptr, ptr %41, align 8
  %91 = insertvalue { ptr, ptr, ptr, i32 } %89, ptr %90, 1
  %92 = load ptr, ptr %42, align 8
  %93 = insertvalue { ptr, ptr, ptr, i32 } %91, ptr %92, 2
  %94 = load i32, ptr %43, align 4
  %95 = insertvalue { ptr, ptr, ptr, i32 } %93, i32 %94, 3
  %hash_coef_ptr.i.i56.i = getelementptr i8, ptr %88, i64 8
  %tbl_size_ptr.i.i57.i = getelementptr i8, ptr %88, i64 16
  %offset_tbl_ptr.i.i58.i = getelementptr i8, ptr %88, i64 40
  %hash_coef.i.i59.i = load i64, ptr %hash_coef_ptr.i.i56.i, align 4
  %tbl_size.i.i60.i = load i64, ptr %tbl_size_ptr.i.i57.i, align 4
  %offset_tbl.i.i61.i = load ptr, ptr %offset_tbl_ptr.i.i58.i, align 8
  %product.i.i.i62.i = mul i64 %hash_coef.i.i59.i, -5261542750394134544
  %shifted.i.i.i63.i = lshr i64 %product.i.i.i62.i, 32
  %xored.i.i.i64.i = xor i64 %shifted.i.i.i63.i, %product.i.i.i62.i
  %hash.i.i.i65.i = and i64 %xored.i.i.i64.i, %tbl_size.i.i60.i
  %offset_ptr.i.i66.i = getelementptr i32, ptr %offset_tbl.i.i61.i, i64 %hash.i.i.i65.i
  %offset.i.i67.i = load i32, ptr %offset_ptr.i.i66.i, align 4
  %eq.i70.i = icmp eq i32 %94, %offset.i.i67.i
  call void @llvm.assume(i1 %eq.i70.i) #30
  %96 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %97 = call ptr @llvm.invariant.start.p0(i64 600, ptr %88)
  %98 = sext i32 %94 to i64
  %99 = getelementptr ptr, ptr %88, i64 %98
  %100 = getelementptr i8, ptr %99, i64 64
  %101 = load ptr, ptr %100, align 8
  %102 = call ptr %101({ ptr, ptr, ptr, i32 } %95, ptr nonnull %2)
  %103 = call i32 %102({ ptr, ptr, ptr, i32 } %95, { ptr, ptr, ptr, i32 } %95, ptr nonnull %2)
  %104 = icmp eq i32 %103, 0
  %105 = load i32, ptr %45, align 4
  %106 = mul i32 %105, 10
  %107 = add i32 %106, 10
  %108 = mul i32 %86, 7
  %109 = icmp sge i32 %107, %108
  %110 = or i1 %104, %109
  br i1 %110, label %111, label %HashMap_insert_keyK_valueV.exit

111:                                              ; preds = %._crit_edge
  %112 = shl i32 %86, 1
  %113 = call i32 @llvm.smax.i32(i32 %112, i32 16)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %18)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %19)
  %114 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %115 = load ptr, ptr %40, align 8
  %116 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %115, 0
  %117 = load ptr, ptr %41, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } %116, ptr %117, 1
  %119 = load ptr, ptr %42, align 8
  %120 = insertvalue { ptr, ptr, ptr, i32 } %118, ptr %119, 2
  %121 = load i32, ptr %43, align 4
  %122 = insertvalue { ptr, ptr, ptr, i32 } %120, i32 %121, 3
  %hash_coef_ptr.i.i39.i = getelementptr i8, ptr %115, i64 8
  %tbl_size_ptr.i.i40.i = getelementptr i8, ptr %115, i64 16
  %offset_tbl_ptr.i.i41.i = getelementptr i8, ptr %115, i64 40
  %hash_coef.i.i42.i = load i64, ptr %hash_coef_ptr.i.i39.i, align 4
  %tbl_size.i.i43.i = load i64, ptr %tbl_size_ptr.i.i40.i, align 4
  %offset_tbl.i.i44.i = load ptr, ptr %offset_tbl_ptr.i.i41.i, align 8
  %product.i.i.i45.i = mul i64 %hash_coef.i.i42.i, -5261542750394134544
  %shifted.i.i.i46.i = lshr i64 %product.i.i.i45.i, 32
  %xored.i.i.i47.i = xor i64 %shifted.i.i.i46.i, %product.i.i.i45.i
  %hash.i.i.i48.i = and i64 %xored.i.i.i47.i, %tbl_size.i.i43.i
  %offset_ptr.i.i49.i = getelementptr i32, ptr %offset_tbl.i.i44.i, i64 %hash.i.i.i48.i
  %offset.i.i50.i = load i32, ptr %offset_ptr.i.i49.i, align 4
  %eq.i.i212 = icmp eq i32 %121, %offset.i.i50.i
  call void @llvm.assume(i1 %eq.i.i212) #30
  %123 = load ptr, ptr %result.i, align 8
  %124 = load ptr, ptr %22, align 8
  %result.i.i213 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %125 = getelementptr i8, ptr %result.i.i213, i64 16
  store ptr @_parameterization_Nil, ptr %125, align 8
  %result.i66.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %126 = getelementptr i8, ptr %result.i66.i, i64 16
  store ptr %124, ptr %126, align 8
  %127 = getelementptr i8, ptr %result.i66.i, i64 8
  store ptr %123, ptr %127, align 8
  %128 = getelementptr i8, ptr %result.i66.i, i64 24
  store ptr null, ptr %128, align 8
  %129 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i66.i)
  store ptr @Entry, ptr %result.i66.i, align 8
  %130 = getelementptr i8, ptr %result.i.i213, i64 8
  store ptr %result.i66.i, ptr %130, align 8
  %131 = getelementptr i8, ptr %result.i.i213, i64 24
  store ptr null, ptr %131, align 8
  %132 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i213)
  store ptr @union_typ, ptr %result.i.i213, align 8
  %result.i67.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i213, ptr %result.i67.i, align 8
  %133 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i67.i)
  %134 = getelementptr i8, ptr %result.i67.i, i64 16
  store i32 %113, ptr %134, align 4
  %135 = getelementptr i8, ptr %result.i67.i, i64 20
  store i32 %113, ptr %135, align 4
  %136 = zext nneg i32 %113 to i64
  %137 = shl nuw nsw i64 %136, 5
  %result.i.i.i214 = call noalias ptr @bump_malloc_inner(i64 noundef %137, ptr nonnull @current_ptr) #29
  %138 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %139 = getelementptr i8, ptr %result.i67.i, i64 8
  store ptr %result.i.i.i214, ptr %139, align 8
  store ptr @Array, ptr %40, align 8
  store ptr %result.i67.i, ptr %41, align 8
  store i32 9, ptr %43, align 4
  store i32 0, ptr %56, align 4
  store i32 0, ptr %45, align 4
  %invariant.gep.i = getelementptr i8, ptr %115, i64 64
  %140 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %141 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %142 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %115)
  %143 = sext i32 %121 to i64
  %gep.i282 = getelementptr ptr, ptr %invariant.gep.i, i64 %143
  %144 = load ptr, ptr %gep.i282, align 8
  %145 = call ptr %144({ ptr, ptr, ptr, i32 } %122, ptr nonnull %2)
  %146 = call i32 %145({ ptr, ptr, ptr, i32 } %122, { ptr, ptr, ptr, i32 } %122, ptr nonnull %2)
  %147 = icmp sgt i32 %146, 0
  br i1 %147, label %.lr.ph285, label %HashMap_resize_new_capacityPtri32.exit

.lr.ph285:                                        ; preds = %111
  %invariant.gep172.i = getelementptr i8, ptr %115, i64 120
  %148 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %gep173.i = getelementptr ptr, ptr %invariant.gep172.i, i64 %143
  br label %149

149:                                              ; preds = %.lr.ph285, %._crit_edge3.i
  %.reg2mem31.0.i283 = phi i32 [ 0, %.lr.ph285 ], [ %416, %._crit_edge3.i ]
  store ptr @_parameterization_Ptri32, ptr %18, align 8
  %150 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %18)
  %151 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %115)
  %152 = load ptr, ptr %gep173.i, align 8
  store ptr @i32_typ, ptr %19, align 8
  %153 = call ptr %152({ ptr, ptr, ptr, i32 } %122, ptr nonnull %19)
  %154 = call { ptr, i160 } %153({ ptr, ptr, ptr, i32 } %122, { ptr, ptr, ptr, i32 } %122, ptr nonnull %18, i32 %.reg2mem31.0.i283)
  %.fca.0.extract30.i = extractvalue { ptr, i160 } %154, 0
  %155 = icmp ne ptr %.fca.0.extract30.i, @nil_typ
  %156 = icmp ne ptr %.fca.0.extract30.i, null
  %.not37.i = and i1 %155, %156
  br i1 %.not37.i, label %157, label %._crit_edge3.i

157:                                              ; preds = %149
  %.fca.1.extract32.i = extractvalue { ptr, i160 } %154, 1
  %.sroa.5164.8.extract.trunc.i = trunc i160 %.fca.1.extract32.i to i64
  %158 = inttoptr i64 %.sroa.5164.8.extract.trunc.i to ptr
  %.sroa.9.8.extract.shift.i = lshr i160 %.fca.1.extract32.i, 64
  %.sroa.9.8.extract.trunc.i = trunc i160 %.sroa.9.8.extract.shift.i to i64
  %159 = inttoptr i64 %.sroa.9.8.extract.trunc.i to ptr
  %hash_coef_ptr.i.i83.i = getelementptr i8, ptr %.fca.0.extract30.i, i64 8
  %tbl_size_ptr.i.i84.i = getelementptr i8, ptr %.fca.0.extract30.i, i64 16
  %offset_tbl_ptr.i.i85.i = getelementptr i8, ptr %.fca.0.extract30.i, i64 40
  %hash_coef.i.i86.i = load i64, ptr %hash_coef_ptr.i.i83.i, align 4
  %tbl_size.i.i87.i = load i64, ptr %tbl_size_ptr.i.i84.i, align 4
  %offset_tbl.i.i88.i = load ptr, ptr %offset_tbl_ptr.i.i85.i, align 8
  %product.i.i.i89.i = mul i64 %hash_coef.i.i86.i, 4015701072841558310
  %shifted.i.i.i90.i = lshr i64 %product.i.i.i89.i, 32
  %xored.i.i.i91.i = xor i64 %shifted.i.i.i90.i, %product.i.i.i89.i
  %hash.i.i.i92.i = and i64 %xored.i.i.i91.i, %tbl_size.i.i87.i
  %offset_ptr.i.i93.i = getelementptr i32, ptr %offset_tbl.i.i88.i, i64 %hash.i.i.i92.i
  %offset.i.i94.i = load i32, ptr %offset_ptr.i.i93.i, align 4
  %160 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract30.i, 0
  %161 = insertvalue { ptr, ptr, ptr, i32 } %160, ptr %158, 1
  %162 = insertvalue { ptr, ptr, ptr, i32 } %161, ptr %159, 2
  %163 = insertvalue { ptr, ptr, ptr, i32 } %162, i32 %offset.i.i94.i, 3
  %164 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %165 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %166 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract30.i)
  %167 = sext i32 %offset.i.i94.i to i64
  %168 = getelementptr ptr, ptr %.fca.0.extract30.i, i64 %167
  %169 = getelementptr i8, ptr %168, i64 56
  %170 = load ptr, ptr %169, align 8
  %171 = call ptr %170({ ptr, ptr, ptr, i32 } %163, ptr nonnull %2)
  %172 = call { ptr, i160 } %171({ ptr, ptr, ptr, i32 } %163, { ptr, ptr, ptr, i32 } %163, ptr nonnull %2)
  %.fca.0.extract23.i = extractvalue { ptr, i160 } %172, 0
  %173 = getelementptr i8, ptr %.fca.0.extract23.i, i64 8
  %174 = getelementptr i8, ptr %.fca.0.extract23.i, i64 16
  %175 = getelementptr i8, ptr %.fca.0.extract23.i, i64 24
  %176 = getelementptr i8, ptr %.fca.0.extract23.i, i64 32
  %177 = load i64, ptr %173, align 4
  %178 = load i64, ptr %174, align 4
  %179 = load ptr, ptr %175, align 8
  %180 = load ptr, ptr %176, align 8
  %result.i96.i = call i1 %179(i64 %178, i64 %177, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %180) #3
  br i1 %result.i96.i, label %._crit_edge3.i, label %181

181:                                              ; preds = %157
  %result.i97.i = call i1 %179(i64 %178, i64 %177, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr readonly %180) #3
  br i1 %result.i97.i, label %182, label %._crit_edge3.i

182:                                              ; preds = %181
  %183 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %184 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %185 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract30.i)
  %186 = getelementptr i8, ptr %168, i64 48
  %187 = load ptr, ptr %186, align 8
  %188 = call ptr %187({ ptr, ptr, ptr, i32 } %163, ptr nonnull %2)
  %189 = call { ptr, i160 } %188({ ptr, ptr, ptr, i32 } %163, { ptr, ptr, ptr, i32 } %163, ptr nonnull %2)
  %190 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %191 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %192 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract30.i)
  %193 = getelementptr i8, ptr %168, i64 64
  %194 = load ptr, ptr %193, align 8
  %195 = call ptr %194({ ptr, ptr, ptr, i32 } %163, ptr nonnull %2)
  %196 = call i32 %195({ ptr, ptr, ptr, i32 } %163, { ptr, ptr, ptr, i32 } %163, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %9)
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %10)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %11)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %12)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %197 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %198 = load ptr, ptr %40, align 8
  %199 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %198, 0
  %200 = load ptr, ptr %41, align 8
  %201 = insertvalue { ptr, ptr, ptr, i32 } %199, ptr %200, 1
  %202 = load ptr, ptr %42, align 8
  %203 = insertvalue { ptr, ptr, ptr, i32 } %201, ptr %202, 2
  %204 = load i32, ptr %43, align 4
  %205 = insertvalue { ptr, ptr, ptr, i32 } %203, i32 %204, 3
  %hash_coef_ptr.i.i51.i397 = getelementptr i8, ptr %198, i64 8
  %tbl_size_ptr.i.i52.i398 = getelementptr i8, ptr %198, i64 16
  %offset_tbl_ptr.i.i53.i399 = getelementptr i8, ptr %198, i64 40
  %hash_coef.i.i54.i400 = load i64, ptr %hash_coef_ptr.i.i51.i397, align 4
  %tbl_size.i.i55.i401 = load i64, ptr %tbl_size_ptr.i.i52.i398, align 4
  %offset_tbl.i.i56.i402 = load ptr, ptr %offset_tbl_ptr.i.i53.i399, align 8
  %product.i.i.i57.i403 = mul i64 %hash_coef.i.i54.i400, -5261542750394134544
  %shifted.i.i.i58.i404 = lshr i64 %product.i.i.i57.i403, 32
  %xored.i.i.i59.i405 = xor i64 %shifted.i.i.i58.i404, %product.i.i.i57.i403
  %hash.i.i.i60.i406 = and i64 %xored.i.i.i59.i405, %tbl_size.i.i55.i401
  %offset_ptr.i.i61.i407 = getelementptr i32, ptr %offset_tbl.i.i56.i402, i64 %hash.i.i.i60.i406
  %offset.i.i62.i408 = load i32, ptr %offset_ptr.i.i61.i407, align 4
  %eq.i.i409 = icmp eq i32 %204, %offset.i.i62.i408
  call void @llvm.assume(i1 %eq.i.i409) #30
  %206 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %207 = call ptr @llvm.invariant.start.p0(i64 600, ptr %198)
  %208 = sext i32 %204 to i64
  %209 = getelementptr ptr, ptr %198, i64 %208
  %210 = getelementptr i8, ptr %209, i64 64
  %211 = load ptr, ptr %210, align 8
  %212 = call ptr %211({ ptr, ptr, ptr, i32 } %205, ptr nonnull %2)
  %213 = call i32 %212({ ptr, ptr, ptr, i32 } %205, { ptr, ptr, ptr, i32 } %205, ptr nonnull %2)
  %214 = add i32 %213, -1
  %215 = and i32 %214, %196
  %216 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  br label %217

217:                                              ; preds = %266, %182
  %spec.store.select.i444448 = phi i32 [ %spec.store.select.i444, %266 ], [ -1, %182 ]
  %.0..0..0..i410 = phi i32 [ %284, %266 ], [ %215, %182 ]
  %218 = load ptr, ptr %40, align 8
  %219 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %218, 0
  %220 = load ptr, ptr %41, align 8
  %221 = insertvalue { ptr, ptr, ptr, i32 } %219, ptr %220, 1
  %222 = load ptr, ptr %42, align 8
  %223 = insertvalue { ptr, ptr, ptr, i32 } %221, ptr %222, 2
  %224 = load i32, ptr %43, align 4
  %225 = insertvalue { ptr, ptr, ptr, i32 } %223, i32 %224, 3
  %hash_coef_ptr.i.i65.i411 = getelementptr i8, ptr %218, i64 8
  %tbl_size_ptr.i.i66.i412 = getelementptr i8, ptr %218, i64 16
  %offset_tbl_ptr.i.i67.i413 = getelementptr i8, ptr %218, i64 40
  %hash_coef.i.i68.i414 = load i64, ptr %hash_coef_ptr.i.i65.i411, align 4
  %tbl_size.i.i69.i415 = load i64, ptr %tbl_size_ptr.i.i66.i412, align 4
  %offset_tbl.i.i70.i416 = load ptr, ptr %offset_tbl_ptr.i.i67.i413, align 8
  %product.i.i.i71.i417 = mul i64 %hash_coef.i.i68.i414, -5261542750394134544
  %shifted.i.i.i72.i418 = lshr i64 %product.i.i.i71.i417, 32
  %xored.i.i.i73.i419 = xor i64 %shifted.i.i.i72.i418, %product.i.i.i71.i417
  %hash.i.i.i74.i420 = and i64 %xored.i.i.i73.i419, %tbl_size.i.i69.i415
  %offset_ptr.i.i75.i421 = getelementptr i32, ptr %offset_tbl.i.i70.i416, i64 %hash.i.i.i74.i420
  %offset.i.i76.i422 = load i32, ptr %offset_ptr.i.i75.i421, align 4
  %eq.i79.i423 = icmp eq i32 %224, %offset.i.i76.i422
  call void @llvm.assume(i1 %eq.i79.i423) #30
  %226 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  store ptr @_parameterization_Ptri32, ptr %3, align 8
  %227 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %3)
  %228 = call ptr @llvm.invariant.start.p0(i64 600, ptr %218)
  %229 = sext i32 %224 to i64
  %230 = getelementptr ptr, ptr %218, i64 %229
  %231 = getelementptr i8, ptr %230, i64 120
  %232 = load ptr, ptr %231, align 8
  store ptr @i32_typ, ptr %4, align 8
  %233 = call ptr %232({ ptr, ptr, ptr, i32 } %225, ptr nonnull %4)
  %234 = call { ptr, i160 } %233({ ptr, ptr, ptr, i32 } %225, { ptr, ptr, ptr, i32 } %225, ptr nonnull %3, i32 %.0..0..0..i410)
  %.fca.0.extract36.i424 = extractvalue { ptr, i160 } %234, 0
  %235 = icmp eq ptr %.fca.0.extract36.i424, @nil_typ
  %236 = icmp eq ptr %.fca.0.extract36.i424, null
  %237 = or i1 %235, %236
  br i1 %237, label %285, label %238

238:                                              ; preds = %217
  %.fca.1.extract38.i425 = extractvalue { ptr, i160 } %234, 1
  %.sroa.5.8.extract.shift.i426 = lshr i160 %.fca.1.extract38.i425, 64
  %.sroa.5.8.extract.trunc.i427 = trunc i160 %.sroa.5.8.extract.shift.i426 to i64
  %.sroa.2.8.extract.trunc165.i428 = trunc i160 %.fca.1.extract38.i425 to i64
  %239 = inttoptr i64 %.sroa.2.8.extract.trunc165.i428 to ptr
  %240 = inttoptr i64 %.sroa.5.8.extract.trunc.i427 to ptr
  %hash_coef_ptr.i.i81.i429 = getelementptr i8, ptr %.fca.0.extract36.i424, i64 8
  %tbl_size_ptr.i.i82.i430 = getelementptr i8, ptr %.fca.0.extract36.i424, i64 16
  %offset_tbl_ptr.i.i83.i431 = getelementptr i8, ptr %.fca.0.extract36.i424, i64 40
  %hash_coef.i.i84.i432 = load i64, ptr %hash_coef_ptr.i.i81.i429, align 4
  %tbl_size.i.i85.i433 = load i64, ptr %tbl_size_ptr.i.i82.i430, align 4
  %offset_tbl.i.i86.i434 = load ptr, ptr %offset_tbl_ptr.i.i83.i431, align 8
  %product.i.i.i87.i435 = mul i64 %hash_coef.i.i84.i432, 4015701072841558310
  %shifted.i.i.i88.i436 = lshr i64 %product.i.i.i87.i435, 32
  %xored.i.i.i89.i437 = xor i64 %shifted.i.i.i88.i436, %product.i.i.i87.i435
  %hash.i.i.i90.i438 = and i64 %xored.i.i.i89.i437, %tbl_size.i.i85.i433
  %offset_ptr.i.i91.i439 = getelementptr i32, ptr %offset_tbl.i.i86.i434, i64 %hash.i.i.i90.i438
  %offset.i.i92.i440 = load i32, ptr %offset_ptr.i.i91.i439, align 4
  %241 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract36.i424, 0
  %242 = insertvalue { ptr, ptr, ptr, i32 } %241, ptr %239, 1
  %243 = insertvalue { ptr, ptr, ptr, i32 } %242, ptr %240, 2
  %244 = insertvalue { ptr, ptr, ptr, i32 } %243, i32 %offset.i.i92.i440, 3
  %245 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %246 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %247 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i424)
  %248 = sext i32 %offset.i.i92.i440 to i64
  %249 = getelementptr ptr, ptr %.fca.0.extract36.i424, i64 %248
  %250 = getelementptr i8, ptr %249, i64 64
  %251 = load ptr, ptr %250, align 8
  %252 = call ptr %251({ ptr, ptr, ptr, i32 } %244, ptr nonnull %2)
  %253 = call i32 %252({ ptr, ptr, ptr, i32 } %244, { ptr, ptr, ptr, i32 } %244, ptr nonnull %2)
  %254 = icmp eq i32 %253, %196
  %255 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %256 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %257 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i424)
  %258 = getelementptr i8, ptr %249, i64 48
  %259 = load ptr, ptr %258, align 8
  %260 = call ptr %259({ ptr, ptr, ptr, i32 } %244, ptr nonnull %2)
  %261 = call { ptr, i160 } %260({ ptr, ptr, ptr, i32 } %244, { ptr, ptr, ptr, i32 } %244, ptr nonnull %2)
  %262 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %263 = load ptr, ptr %28, align 8
  %264 = call i1 %263({ ptr, i160 } %261, { ptr, i160 } %189)
  %265 = and i1 %254, %264
  br i1 %265, label %HashMap_find_slot_keyK_hashPtri32.exit445, label %266

266:                                              ; preds = %238
  %267 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %268 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %269 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i424)
  %270 = getelementptr i8, ptr %249, i64 56
  %271 = load ptr, ptr %270, align 8
  %272 = call ptr %271({ ptr, ptr, ptr, i32 } %244, ptr nonnull %2)
  %273 = call { ptr, i160 } %272({ ptr, ptr, ptr, i32 } %244, { ptr, ptr, ptr, i32 } %244, ptr nonnull %2)
  %.fca.0.extract15.i441 = extractvalue { ptr, i160 } %273, 0
  %274 = getelementptr i8, ptr %.fca.0.extract15.i441, i64 8
  %275 = getelementptr i8, ptr %.fca.0.extract15.i441, i64 16
  %276 = getelementptr i8, ptr %.fca.0.extract15.i441, i64 24
  %277 = getelementptr i8, ptr %.fca.0.extract15.i441, i64 32
  %278 = load i64, ptr %274, align 4
  %279 = load i64, ptr %275, align 4
  %280 = load ptr, ptr %276, align 8
  %281 = load ptr, ptr %277, align 8
  %result.i.i442 = call i1 %280(i64 %279, i64 %278, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %281) #3
  %282 = icmp eq i32 %spec.store.select.i444448, -1
  %or.cond.i443 = select i1 %result.i.i442, i1 %282, i1 false
  %spec.store.select.i444 = select i1 %or.cond.i443, i32 %.0..0..0..i410, i32 %spec.store.select.i444448
  %283 = add i32 %.0..0..0..i410, 1
  %284 = and i32 %283, %214
  br label %217

285:                                              ; preds = %217
  %286 = icmp eq i32 %spec.store.select.i444448, -1
  %.pre457 = select i1 %286, i32 %.0..0..0..i410, i32 %spec.store.select.i444448
  br label %HashMap_find_slot_keyK_hashPtri32.exit445

HashMap_find_slot_keyK_hashPtri32.exit445:        ; preds = %238, %285
  %287 = phi i32 [ %.pre457, %285 ], [ %.0..0..0..i410, %238 ]
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  %288 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %289 = load ptr, ptr %40, align 8
  %290 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %289, 0
  %291 = load ptr, ptr %41, align 8
  %292 = insertvalue { ptr, ptr, ptr, i32 } %290, ptr %291, 1
  %293 = load ptr, ptr %42, align 8
  %294 = insertvalue { ptr, ptr, ptr, i32 } %292, ptr %293, 2
  %295 = load i32, ptr %43, align 4
  %296 = insertvalue { ptr, ptr, ptr, i32 } %294, i32 %295, 3
  %hash_coef_ptr.i.i56.i290 = getelementptr i8, ptr %289, i64 8
  %tbl_size_ptr.i.i57.i291 = getelementptr i8, ptr %289, i64 16
  %offset_tbl_ptr.i.i58.i292 = getelementptr i8, ptr %289, i64 40
  %hash_coef.i.i59.i293 = load i64, ptr %hash_coef_ptr.i.i56.i290, align 4
  %tbl_size.i.i60.i294 = load i64, ptr %tbl_size_ptr.i.i57.i291, align 4
  %offset_tbl.i.i61.i295 = load ptr, ptr %offset_tbl_ptr.i.i58.i292, align 8
  %product.i.i.i62.i296 = mul i64 %hash_coef.i.i59.i293, -5261542750394134544
  %shifted.i.i.i63.i297 = lshr i64 %product.i.i.i62.i296, 32
  %xored.i.i.i64.i298 = xor i64 %shifted.i.i.i63.i297, %product.i.i.i62.i296
  %hash.i.i.i65.i299 = and i64 %xored.i.i.i64.i298, %tbl_size.i.i60.i294
  %offset_ptr.i.i66.i300 = getelementptr i32, ptr %offset_tbl.i.i61.i295, i64 %hash.i.i.i65.i299
  %offset.i.i67.i301 = load i32, ptr %offset_ptr.i.i66.i300, align 4
  %eq.i.i302 = icmp eq i32 %295, %offset.i.i67.i301
  call void @llvm.assume(i1 %eq.i.i302) #30
  store ptr @_parameterization_Ptri32, ptr %7, align 8
  %297 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %7)
  %298 = call ptr @llvm.invariant.start.p0(i64 600, ptr %289)
  %299 = sext i32 %295 to i64
  %300 = getelementptr ptr, ptr %289, i64 %299
  %301 = getelementptr i8, ptr %300, i64 120
  %302 = load ptr, ptr %301, align 8
  store ptr @i32_typ, ptr %8, align 8
  %303 = call ptr %302({ ptr, ptr, ptr, i32 } %296, ptr nonnull %8)
  %304 = call { ptr, i160 } %303({ ptr, ptr, ptr, i32 } %296, { ptr, ptr, ptr, i32 } %296, ptr nonnull %7, i32 %287)
  %.fca.0.extract2.i303 = extractvalue { ptr, i160 } %304, 0
  %305 = load ptr, ptr %result.i, align 8
  %306 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %307 = load ptr, ptr %22, align 8
  %308 = load ptr, ptr %305, align 8
  %309 = getelementptr i8, ptr %308, i64 48
  %310 = load ptr, ptr %309, align 8
  %311 = call { i64, i64 } %310(ptr nonnull %305)
  %312 = extractvalue { i64, i64 } %311, 0
  %313 = extractvalue { i64, i64 } %311, 1
  %314 = call i64 @llvm.umax.i64(i64 %313, i64 8)
  %315 = urem i64 16, %313
  %316 = icmp eq i64 %315, 0
  %317 = sub i64 %313, %315
  %318 = select i1 %316, i64 0, i64 %317
  %319 = add i64 %318, %312
  %320 = add i64 %319, 16
  %321 = and i64 %319, 7
  %322 = icmp eq i64 %321, 0
  %323 = sub nuw nsw i64 40, %321
  %324 = select i1 %322, i64 32, i64 %323
  %325 = add i64 %320, %324
  %326 = and i64 %325, 3
  %327 = icmp eq i64 %326, 0
  %328 = sub nuw nsw i64 8, %326
  %329 = select i1 %327, i64 4, i64 %328
  %330 = add i64 %329, %325
  %331 = urem i64 %330, %314
  %332 = icmp eq i64 %331, 0
  %333 = sub i64 %314, %331
  %334 = select i1 %332, i64 0, i64 %333
  %335 = add i64 %330, %334
  %result.i.i304 = call noalias ptr @bump_malloc_inner(i64 noundef %335, ptr nonnull @current_ptr) #29
  store ptr %305, ptr %result.i.i304, align 8
  %336 = getelementptr i8, ptr %result.i.i304, i64 8
  store ptr %307, ptr %336, align 8
  %337 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i.i304)
  store ptr @Entry, ptr %9, align 8
  store ptr %result.i.i304, ptr %57, align 8
  store i32 9, ptr %58, align 8
  %338 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %9)
  %339 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Entry, ptr undef, ptr undef, i32 undef }, ptr %result.i.i304, 1
  %340 = insertvalue { ptr, ptr, ptr, i32 } %339, ptr undef, 2
  %341 = insertvalue { ptr, ptr, ptr, i32 } %340, i32 9, 3
  %342 = load ptr, ptr %result.i, align 8
  %343 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %344 = load ptr, ptr %22, align 8
  store ptr %342, ptr %10, align 8
  store ptr %344, ptr %60, align 8
  store ptr @_parameterization_Ptri32, ptr %61, align 8
  %345 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %10)
  %346 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %347 = load i64, ptr %173, align 4
  %348 = load i64, ptr %174, align 4
  %349 = load ptr, ptr %175, align 8
  %350 = load ptr, ptr %176, align 8
  %result.i.i.i305 = call i1 %349(i64 %348, i64 %347, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr readonly %350) #3
  %351 = select i1 %result.i.i.i305, i64 10, i64 9
  %gep = getelementptr [14 x ptr], ptr getelementptr inbounds (i8, ptr @Entry, i64 72), i64 0, i64 %351
  %352 = load ptr, ptr %gep, align 8
  call void %352({ ptr, ptr, ptr, i32 } %341, { ptr, ptr, ptr, i32 } %341, ptr nonnull %10, { ptr, i160 } %189, { ptr, i160 } %172, i32 %196)
  %353 = load ptr, ptr %59, align 8
  %354 = ptrtoint ptr %result.i.i304 to i64
  %355 = ptrtoint ptr %353 to i64
  %.sroa.2.0.insert.ext.i306 = zext i64 %355 to i160
  %.sroa.2.0.insert.shift.i307 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i306, 64
  %.sroa.0.0.insert.ext.i309 = zext i64 %354 to i160
  %.sroa.2.0.insert.insert.i308 = or disjoint i160 %.sroa.2.0.insert.shift.i307, %.sroa.0.0.insert.ext.i309
  %.sroa.0.0.insert.insert.i310 = or disjoint i160 %.sroa.2.0.insert.insert.i308, 3062541302288446171170371466885913903104
  %356 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0.0.insert.insert.i310, 1
  %357 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %358 = load ptr, ptr %40, align 8
  %359 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %358, 0
  %360 = load ptr, ptr %41, align 8
  %361 = insertvalue { ptr, ptr, ptr, i32 } %359, ptr %360, 1
  %362 = load ptr, ptr %42, align 8
  %363 = insertvalue { ptr, ptr, ptr, i32 } %361, ptr %362, 2
  %364 = load i32, ptr %43, align 4
  %365 = insertvalue { ptr, ptr, ptr, i32 } %363, i32 %364, 3
  %hash_coef_ptr.i.i84.i311 = getelementptr i8, ptr %358, i64 8
  %tbl_size_ptr.i.i85.i312 = getelementptr i8, ptr %358, i64 16
  %offset_tbl_ptr.i.i86.i313 = getelementptr i8, ptr %358, i64 40
  %hash_coef.i.i87.i314 = load i64, ptr %hash_coef_ptr.i.i84.i311, align 4
  %tbl_size.i.i88.i315 = load i64, ptr %tbl_size_ptr.i.i85.i312, align 4
  %offset_tbl.i.i89.i316 = load ptr, ptr %offset_tbl_ptr.i.i86.i313, align 8
  %product.i.i.i90.i317 = mul i64 %hash_coef.i.i87.i314, -5261542750394134544
  %shifted.i.i.i91.i318 = lshr i64 %product.i.i.i90.i317, 32
  %xored.i.i.i92.i319 = xor i64 %shifted.i.i.i91.i318, %product.i.i.i90.i317
  %hash.i.i.i93.i320 = and i64 %xored.i.i.i92.i319, %tbl_size.i.i88.i315
  %offset_ptr.i.i94.i321 = getelementptr i32, ptr %offset_tbl.i.i89.i316, i64 %hash.i.i.i93.i320
  %offset.i.i95.i322 = load i32, ptr %offset_ptr.i.i94.i321, align 4
  %eq.i98.i323 = icmp eq i32 %364, %offset.i.i95.i322
  call void @llvm.assume(i1 %eq.i98.i323) #30
  %366 = load ptr, ptr %result.i, align 8
  %367 = load ptr, ptr %22, align 8
  %result.i99.i324 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %368 = getelementptr i8, ptr %result.i99.i324, i64 16
  store ptr %367, ptr %368, align 8
  %369 = getelementptr i8, ptr %result.i99.i324, i64 8
  store ptr %366, ptr %369, align 8
  %370 = getelementptr i8, ptr %result.i99.i324, i64 24
  store ptr null, ptr %370, align 8
  %371 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i99.i324)
  store ptr @Entry, ptr %result.i99.i324, align 8
  store ptr @_parameterization_Ptri32, ptr %11, align 8
  store ptr %result.i99.i324, ptr %62, align 8
  %372 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %11)
  %373 = call ptr @llvm.invariant.start.p0(i64 600, ptr %358)
  %374 = sext i32 %364 to i64
  %375 = getelementptr ptr, ptr %358, i64 %374
  %376 = getelementptr i8, ptr %375, i64 128
  %377 = load ptr, ptr %376, align 8
  store ptr @i32_typ, ptr %12, align 8
  store ptr @Entry, ptr %63, align 8
  %378 = call ptr %377({ ptr, ptr, ptr, i32 } %365, ptr nonnull %12)
  call void %378({ ptr, ptr, ptr, i32 } %365, { ptr, ptr, ptr, i32 } %365, ptr nonnull %11, i32 %287, { ptr, i160 } %356)
  %379 = icmp eq ptr %.fca.0.extract2.i303, @nil_typ
  %380 = icmp eq ptr %.fca.0.extract2.i303, null
  %381 = or i1 %379, %380
  br i1 %381, label %._crit_edge.thread.i346, label %._crit_edge.i325

._crit_edge.thread.i346:                          ; preds = %HashMap_find_slot_keyK_hashPtri32.exit445
  %382 = load i32, ptr %56, align 4
  %383 = add i32 %382, 1
  store i32 %383, ptr %56, align 4
  br label %._crit_edge1.sink.split.i344

._crit_edge.i325:                                 ; preds = %HashMap_find_slot_keyK_hashPtri32.exit445
  %.fca.1.extract4.i326 = extractvalue { ptr, i160 } %304, 1
  %.sroa.3192.8.extract.trunc.i327 = trunc i160 %.fca.1.extract4.i326 to i64
  %384 = inttoptr i64 %.sroa.3192.8.extract.trunc.i327 to ptr
  %.sroa.5193.8.extract.shift.i328 = lshr i160 %.fca.1.extract4.i326, 64
  %.sroa.5193.8.extract.trunc.i329 = trunc i160 %.sroa.5193.8.extract.shift.i328 to i64
  %385 = inttoptr i64 %.sroa.5193.8.extract.trunc.i329 to ptr
  %hash_coef_ptr.i.i101.i330 = getelementptr i8, ptr %.fca.0.extract2.i303, i64 8
  %tbl_size_ptr.i.i102.i331 = getelementptr i8, ptr %.fca.0.extract2.i303, i64 16
  %offset_tbl_ptr.i.i103.i332 = getelementptr i8, ptr %.fca.0.extract2.i303, i64 40
  %hash_coef.i.i104.i333 = load i64, ptr %hash_coef_ptr.i.i101.i330, align 4
  %tbl_size.i.i105.i334 = load i64, ptr %tbl_size_ptr.i.i102.i331, align 4
  %offset_tbl.i.i106.i335 = load ptr, ptr %offset_tbl_ptr.i.i103.i332, align 8
  %product.i.i.i107.i336 = mul i64 %hash_coef.i.i104.i333, 4015701072841558310
  %shifted.i.i.i108.i337 = lshr i64 %product.i.i.i107.i336, 32
  %xored.i.i.i109.i338 = xor i64 %shifted.i.i.i108.i337, %product.i.i.i107.i336
  %hash.i.i.i110.i339 = and i64 %xored.i.i.i109.i338, %tbl_size.i.i105.i334
  %offset_ptr.i.i111.i340 = getelementptr i32, ptr %offset_tbl.i.i106.i335, i64 %hash.i.i.i110.i339
  %offset.i.i112.i341 = load i32, ptr %offset_ptr.i.i111.i340, align 4
  %386 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract2.i303, 0
  %387 = insertvalue { ptr, ptr, ptr, i32 } %386, ptr %384, 1
  %388 = insertvalue { ptr, ptr, ptr, i32 } %387, ptr %385, 2
  %389 = insertvalue { ptr, ptr, ptr, i32 } %388, i32 %offset.i.i112.i341, 3
  %390 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %391 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %392 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract2.i303)
  %393 = sext i32 %offset.i.i112.i341 to i64
  %394 = getelementptr ptr, ptr %.fca.0.extract2.i303, i64 %393
  %395 = getelementptr i8, ptr %394, i64 56
  %396 = load ptr, ptr %395, align 8
  %397 = call ptr %396({ ptr, ptr, ptr, i32 } %389, ptr nonnull %2)
  %398 = call { ptr, i160 } %397({ ptr, ptr, ptr, i32 } %389, { ptr, ptr, ptr, i32 } %389, ptr nonnull %2)
  %.fca.0.extract45.i342 = extractvalue { ptr, i160 } %398, 0
  %399 = getelementptr i8, ptr %.fca.0.extract45.i342, i64 8
  %400 = getelementptr i8, ptr %.fca.0.extract45.i342, i64 16
  %401 = getelementptr i8, ptr %.fca.0.extract45.i342, i64 24
  %402 = getelementptr i8, ptr %.fca.0.extract45.i342, i64 32
  %403 = load i64, ptr %399, align 4
  %404 = load i64, ptr %400, align 4
  %405 = load ptr, ptr %401, align 8
  %406 = load ptr, ptr %402, align 8
  %result.i114.i343 = call i1 %405(i64 %404, i64 %403, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %406) #3
  br i1 %result.i114.i343, label %._crit_edge1.sink.split.i344, label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit347

._crit_edge1.sink.split.i344:                     ; preds = %._crit_edge.i325, %._crit_edge.thread.i346
  %.sink202.i345 = phi i64 [ 40, %._crit_edge.thread.i346 ], [ 32, %._crit_edge.i325 ]
  %407 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %408 = getelementptr i8, ptr getelementptr inbounds (i8, ptr @HashMap, i64 72), i64 %.sink202.i345
  %409 = load ptr, ptr %408, align 8
  %410 = load ptr, ptr %409, align 8
  %411 = call i32 %410(ptr nonnull %result.i)
  %412 = add i32 %411, 1
  %413 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %414 = getelementptr i8, ptr %409, i64 8
  %415 = load ptr, ptr %414, align 8
  call void %415(ptr nonnull %result.i, i32 %412)
  br label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit347

HashMap_insert_internal_keyK_valueV_hashPtri32.exit347: ; preds = %._crit_edge.i325, %._crit_edge1.sink.split.i344
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %9)
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %10)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %11)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %12)
  br label %._crit_edge3.i

._crit_edge3.i:                                   ; preds = %HashMap_insert_internal_keyK_valueV_hashPtri32.exit347, %181, %157, %149
  %416 = add nuw nsw i32 %.reg2mem31.0.i283, 1
  %417 = load ptr, ptr %gep.i282, align 8
  %418 = call ptr %417({ ptr, ptr, ptr, i32 } %122, ptr nonnull %2)
  %419 = call i32 %418({ ptr, ptr, ptr, i32 } %122, { ptr, ptr, ptr, i32 } %122, ptr nonnull %2)
  %420 = icmp slt i32 %416, %419
  br i1 %420, label %149, label %HashMap_resize_new_capacityPtri32.exit

HashMap_resize_new_capacityPtri32.exit:           ; preds = %._crit_edge3.i, %111
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %18)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %19)
  br label %HashMap_insert_keyK_valueV.exit

HashMap_insert_keyK_valueV.exit:                  ; preds = %._crit_edge, %HashMap_resize_new_capacityPtri32.exit
  %421 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %422 = load ptr, ptr %27, align 8
  %423 = call i32 %422({ ptr, i160 } %69)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %13)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %14)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %15)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %16)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %17)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6)
  %424 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %425 = load ptr, ptr %40, align 8
  %426 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %425, 0
  %427 = load ptr, ptr %41, align 8
  %428 = insertvalue { ptr, ptr, ptr, i32 } %426, ptr %427, 1
  %429 = load ptr, ptr %42, align 8
  %430 = insertvalue { ptr, ptr, ptr, i32 } %428, ptr %429, 2
  %431 = load i32, ptr %43, align 4
  %432 = insertvalue { ptr, ptr, ptr, i32 } %430, i32 %431, 3
  %hash_coef_ptr.i.i51.i = getelementptr i8, ptr %425, i64 8
  %tbl_size_ptr.i.i52.i = getelementptr i8, ptr %425, i64 16
  %offset_tbl_ptr.i.i53.i = getelementptr i8, ptr %425, i64 40
  %hash_coef.i.i54.i = load i64, ptr %hash_coef_ptr.i.i51.i, align 4
  %tbl_size.i.i55.i = load i64, ptr %tbl_size_ptr.i.i52.i, align 4
  %offset_tbl.i.i56.i = load ptr, ptr %offset_tbl_ptr.i.i53.i, align 8
  %product.i.i.i57.i = mul i64 %hash_coef.i.i54.i, -5261542750394134544
  %shifted.i.i.i58.i = lshr i64 %product.i.i.i57.i, 32
  %xored.i.i.i59.i = xor i64 %shifted.i.i.i58.i, %product.i.i.i57.i
  %hash.i.i.i60.i = and i64 %xored.i.i.i59.i, %tbl_size.i.i55.i
  %offset_ptr.i.i61.i = getelementptr i32, ptr %offset_tbl.i.i56.i, i64 %hash.i.i.i60.i
  %offset.i.i62.i = load i32, ptr %offset_ptr.i.i61.i, align 4
  %eq.i.i364 = icmp eq i32 %431, %offset.i.i62.i
  call void @llvm.assume(i1 %eq.i.i364) #30
  %433 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %434 = call ptr @llvm.invariant.start.p0(i64 600, ptr %425)
  %435 = sext i32 %431 to i64
  %436 = getelementptr ptr, ptr %425, i64 %435
  %437 = getelementptr i8, ptr %436, i64 64
  %438 = load ptr, ptr %437, align 8
  %439 = call ptr %438({ ptr, ptr, ptr, i32 } %432, ptr nonnull %2)
  %440 = call i32 %439({ ptr, ptr, ptr, i32 } %432, { ptr, ptr, ptr, i32 } %432, ptr nonnull %2)
  %441 = add i32 %440, -1
  %442 = and i32 %441, %423
  %443 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  br label %444

444:                                              ; preds = %493, %HashMap_insert_keyK_valueV.exit
  %spec.store.select.i380 = phi i32 [ %spec.store.select.i, %493 ], [ -1, %HashMap_insert_keyK_valueV.exit ]
  %.0..0..0..i = phi i32 [ %511, %493 ], [ %442, %HashMap_insert_keyK_valueV.exit ]
  %445 = load ptr, ptr %40, align 8
  %446 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %445, 0
  %447 = load ptr, ptr %41, align 8
  %448 = insertvalue { ptr, ptr, ptr, i32 } %446, ptr %447, 1
  %449 = load ptr, ptr %42, align 8
  %450 = insertvalue { ptr, ptr, ptr, i32 } %448, ptr %449, 2
  %451 = load i32, ptr %43, align 4
  %452 = insertvalue { ptr, ptr, ptr, i32 } %450, i32 %451, 3
  %hash_coef_ptr.i.i65.i = getelementptr i8, ptr %445, i64 8
  %tbl_size_ptr.i.i66.i = getelementptr i8, ptr %445, i64 16
  %offset_tbl_ptr.i.i67.i = getelementptr i8, ptr %445, i64 40
  %hash_coef.i.i68.i = load i64, ptr %hash_coef_ptr.i.i65.i, align 4
  %tbl_size.i.i69.i = load i64, ptr %tbl_size_ptr.i.i66.i, align 4
  %offset_tbl.i.i70.i = load ptr, ptr %offset_tbl_ptr.i.i67.i, align 8
  %product.i.i.i71.i = mul i64 %hash_coef.i.i68.i, -5261542750394134544
  %shifted.i.i.i72.i = lshr i64 %product.i.i.i71.i, 32
  %xored.i.i.i73.i = xor i64 %shifted.i.i.i72.i, %product.i.i.i71.i
  %hash.i.i.i74.i = and i64 %xored.i.i.i73.i, %tbl_size.i.i69.i
  %offset_ptr.i.i75.i = getelementptr i32, ptr %offset_tbl.i.i70.i, i64 %hash.i.i.i74.i
  %offset.i.i76.i = load i32, ptr %offset_ptr.i.i75.i, align 4
  %eq.i79.i = icmp eq i32 %451, %offset.i.i76.i
  call void @llvm.assume(i1 %eq.i79.i) #30
  %453 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  store ptr @_parameterization_Ptri32, ptr %5, align 8
  %454 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %5)
  %455 = call ptr @llvm.invariant.start.p0(i64 600, ptr %445)
  %456 = sext i32 %451 to i64
  %457 = getelementptr ptr, ptr %445, i64 %456
  %458 = getelementptr i8, ptr %457, i64 120
  %459 = load ptr, ptr %458, align 8
  store ptr @i32_typ, ptr %6, align 8
  %460 = call ptr %459({ ptr, ptr, ptr, i32 } %452, ptr nonnull %6)
  %461 = call { ptr, i160 } %460({ ptr, ptr, ptr, i32 } %452, { ptr, ptr, ptr, i32 } %452, ptr nonnull %5, i32 %.0..0..0..i)
  %.fca.0.extract36.i = extractvalue { ptr, i160 } %461, 0
  %462 = icmp eq ptr %.fca.0.extract36.i, @nil_typ
  %463 = icmp eq ptr %.fca.0.extract36.i, null
  %464 = or i1 %462, %463
  br i1 %464, label %512, label %465

465:                                              ; preds = %444
  %.fca.1.extract38.i = extractvalue { ptr, i160 } %461, 1
  %.sroa.5.8.extract.shift.i = lshr i160 %.fca.1.extract38.i, 64
  %.sroa.5.8.extract.trunc.i = trunc i160 %.sroa.5.8.extract.shift.i to i64
  %.sroa.2.8.extract.trunc165.i = trunc i160 %.fca.1.extract38.i to i64
  %466 = inttoptr i64 %.sroa.2.8.extract.trunc165.i to ptr
  %467 = inttoptr i64 %.sroa.5.8.extract.trunc.i to ptr
  %hash_coef_ptr.i.i81.i = getelementptr i8, ptr %.fca.0.extract36.i, i64 8
  %tbl_size_ptr.i.i82.i = getelementptr i8, ptr %.fca.0.extract36.i, i64 16
  %offset_tbl_ptr.i.i83.i = getelementptr i8, ptr %.fca.0.extract36.i, i64 40
  %hash_coef.i.i84.i = load i64, ptr %hash_coef_ptr.i.i81.i, align 4
  %tbl_size.i.i85.i = load i64, ptr %tbl_size_ptr.i.i82.i, align 4
  %offset_tbl.i.i86.i = load ptr, ptr %offset_tbl_ptr.i.i83.i, align 8
  %product.i.i.i87.i = mul i64 %hash_coef.i.i84.i, 4015701072841558310
  %shifted.i.i.i88.i = lshr i64 %product.i.i.i87.i, 32
  %xored.i.i.i89.i = xor i64 %shifted.i.i.i88.i, %product.i.i.i87.i
  %hash.i.i.i90.i = and i64 %xored.i.i.i89.i, %tbl_size.i.i85.i
  %offset_ptr.i.i91.i = getelementptr i32, ptr %offset_tbl.i.i86.i, i64 %hash.i.i.i90.i
  %offset.i.i92.i = load i32, ptr %offset_ptr.i.i91.i, align 4
  %468 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract36.i, 0
  %469 = insertvalue { ptr, ptr, ptr, i32 } %468, ptr %466, 1
  %470 = insertvalue { ptr, ptr, ptr, i32 } %469, ptr %467, 2
  %471 = insertvalue { ptr, ptr, ptr, i32 } %470, i32 %offset.i.i92.i, 3
  %472 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %473 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %474 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i)
  %475 = sext i32 %offset.i.i92.i to i64
  %476 = getelementptr ptr, ptr %.fca.0.extract36.i, i64 %475
  %477 = getelementptr i8, ptr %476, i64 64
  %478 = load ptr, ptr %477, align 8
  %479 = call ptr %478({ ptr, ptr, ptr, i32 } %471, ptr nonnull %2)
  %480 = call i32 %479({ ptr, ptr, ptr, i32 } %471, { ptr, ptr, ptr, i32 } %471, ptr nonnull %2)
  %481 = icmp eq i32 %480, %423
  %482 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %483 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %484 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i)
  %485 = getelementptr i8, ptr %476, i64 48
  %486 = load ptr, ptr %485, align 8
  %487 = call ptr %486({ ptr, ptr, ptr, i32 } %471, ptr nonnull %2)
  %488 = call { ptr, i160 } %487({ ptr, ptr, ptr, i32 } %471, { ptr, ptr, ptr, i32 } %471, ptr nonnull %2)
  %489 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %490 = load ptr, ptr %28, align 8
  %491 = call i1 %490({ ptr, i160 } %488, { ptr, i160 } %69)
  %492 = and i1 %481, %491
  br i1 %492, label %HashMap_find_slot_keyK_hashPtri32.exit, label %493

493:                                              ; preds = %465
  %494 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %495 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %496 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i)
  %497 = getelementptr i8, ptr %476, i64 56
  %498 = load ptr, ptr %497, align 8
  %499 = call ptr %498({ ptr, ptr, ptr, i32 } %471, ptr nonnull %2)
  %500 = call { ptr, i160 } %499({ ptr, ptr, ptr, i32 } %471, { ptr, ptr, ptr, i32 } %471, ptr nonnull %2)
  %.fca.0.extract15.i = extractvalue { ptr, i160 } %500, 0
  %501 = getelementptr i8, ptr %.fca.0.extract15.i, i64 8
  %502 = getelementptr i8, ptr %.fca.0.extract15.i, i64 16
  %503 = getelementptr i8, ptr %.fca.0.extract15.i, i64 24
  %504 = getelementptr i8, ptr %.fca.0.extract15.i, i64 32
  %505 = load i64, ptr %501, align 4
  %506 = load i64, ptr %502, align 4
  %507 = load ptr, ptr %503, align 8
  %508 = load ptr, ptr %504, align 8
  %result.i.i366 = call i1 %507(i64 %506, i64 %505, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %508) #3
  %509 = icmp eq i32 %spec.store.select.i380, -1
  %or.cond.i = select i1 %result.i.i366, i1 %509, i1 false
  %spec.store.select.i = select i1 %or.cond.i, i32 %.0..0..0..i, i32 %spec.store.select.i380
  %510 = add i32 %.0..0..0..i, 1
  %511 = and i32 %510, %441
  br label %444

512:                                              ; preds = %444
  %513 = icmp eq i32 %spec.store.select.i380, -1
  %.pre = select i1 %513, i32 %.0..0..0..i, i32 %spec.store.select.i380
  br label %HashMap_find_slot_keyK_hashPtri32.exit

HashMap_find_slot_keyK_hashPtri32.exit:           ; preds = %465, %512
  %514 = phi i32 [ %.pre, %512 ], [ %.0..0..0..i, %465 ]
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6)
  %515 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %516 = load ptr, ptr %40, align 8
  %517 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %516, 0
  %518 = load ptr, ptr %41, align 8
  %519 = insertvalue { ptr, ptr, ptr, i32 } %517, ptr %518, 1
  %520 = load ptr, ptr %42, align 8
  %521 = insertvalue { ptr, ptr, ptr, i32 } %519, ptr %520, 2
  %522 = load i32, ptr %43, align 4
  %523 = insertvalue { ptr, ptr, ptr, i32 } %521, i32 %522, 3
  %hash_coef_ptr.i.i56.i227 = getelementptr i8, ptr %516, i64 8
  %tbl_size_ptr.i.i57.i228 = getelementptr i8, ptr %516, i64 16
  %offset_tbl_ptr.i.i58.i229 = getelementptr i8, ptr %516, i64 40
  %hash_coef.i.i59.i230 = load i64, ptr %hash_coef_ptr.i.i56.i227, align 4
  %tbl_size.i.i60.i231 = load i64, ptr %tbl_size_ptr.i.i57.i228, align 4
  %offset_tbl.i.i61.i232 = load ptr, ptr %offset_tbl_ptr.i.i58.i229, align 8
  %product.i.i.i62.i233 = mul i64 %hash_coef.i.i59.i230, -5261542750394134544
  %shifted.i.i.i63.i234 = lshr i64 %product.i.i.i62.i233, 32
  %xored.i.i.i64.i235 = xor i64 %shifted.i.i.i63.i234, %product.i.i.i62.i233
  %hash.i.i.i65.i236 = and i64 %xored.i.i.i64.i235, %tbl_size.i.i60.i231
  %offset_ptr.i.i66.i237 = getelementptr i32, ptr %offset_tbl.i.i61.i232, i64 %hash.i.i.i65.i236
  %offset.i.i67.i238 = load i32, ptr %offset_ptr.i.i66.i237, align 4
  %eq.i.i239 = icmp eq i32 %522, %offset.i.i67.i238
  call void @llvm.assume(i1 %eq.i.i239) #30
  store ptr @_parameterization_Ptri32, ptr %13, align 8
  %524 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %13)
  %525 = call ptr @llvm.invariant.start.p0(i64 600, ptr %516)
  %526 = sext i32 %522 to i64
  %527 = getelementptr ptr, ptr %516, i64 %526
  %528 = getelementptr i8, ptr %527, i64 120
  %529 = load ptr, ptr %528, align 8
  store ptr @i32_typ, ptr %14, align 8
  %530 = call ptr %529({ ptr, ptr, ptr, i32 } %523, ptr nonnull %14)
  %531 = call { ptr, i160 } %530({ ptr, ptr, ptr, i32 } %523, { ptr, ptr, ptr, i32 } %523, ptr nonnull %13, i32 %514)
  %.fca.0.extract2.i = extractvalue { ptr, i160 } %531, 0
  %532 = load ptr, ptr %result.i, align 8
  %533 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %534 = load ptr, ptr %22, align 8
  %535 = load ptr, ptr %532, align 8
  %536 = getelementptr i8, ptr %535, i64 48
  %537 = load ptr, ptr %536, align 8
  %538 = call { i64, i64 } %537(ptr nonnull %532)
  %539 = extractvalue { i64, i64 } %538, 0
  %540 = extractvalue { i64, i64 } %538, 1
  %541 = call i64 @llvm.umax.i64(i64 %540, i64 8)
  %542 = urem i64 16, %540
  %543 = icmp eq i64 %542, 0
  %544 = sub i64 %540, %542
  %545 = select i1 %543, i64 0, i64 %544
  %546 = add i64 %545, %539
  %547 = add i64 %546, 16
  %548 = and i64 %546, 7
  %549 = icmp eq i64 %548, 0
  %550 = sub nuw nsw i64 40, %548
  %551 = select i1 %549, i64 32, i64 %550
  %552 = add i64 %547, %551
  %553 = and i64 %552, 3
  %554 = icmp eq i64 %553, 0
  %555 = sub nuw nsw i64 8, %553
  %556 = select i1 %554, i64 4, i64 %555
  %557 = add i64 %556, %552
  %558 = urem i64 %557, %541
  %559 = icmp eq i64 %558, 0
  %560 = sub i64 %541, %558
  %561 = select i1 %559, i64 0, i64 %560
  %562 = add i64 %557, %561
  %result.i.i240 = call noalias ptr @bump_malloc_inner(i64 noundef %562, ptr nonnull @current_ptr) #29
  store ptr %532, ptr %result.i.i240, align 8
  %563 = getelementptr i8, ptr %result.i.i240, i64 8
  store ptr %534, ptr %563, align 8
  %564 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i.i240)
  store ptr @Entry, ptr %15, align 8
  store ptr %result.i.i240, ptr %51, align 8
  store i32 9, ptr %52, align 8
  %565 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %15)
  %566 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %567 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %568 = load ptr, ptr %532, align 8
  %569 = getelementptr i8, ptr %568, i64 48
  %570 = load ptr, ptr %569, align 8
  %571 = call { i64, i64 } %570(ptr nonnull %532)
  %572 = extractvalue { i64, i64 } %571, 1
  %573 = urem i64 16, %572
  %574 = icmp eq i64 %573, 0
  %reass.sub = sub i64 %572, %573
  %575 = add i64 %reass.sub, 16
  %576 = select i1 %574, i64 16, i64 %575
  %577 = getelementptr i8, ptr %result.i.i240, i64 %576
  %578 = load ptr, ptr %result.i.i240, align 8
  %579 = load ptr, ptr %578, align 8
  %580 = getelementptr i8, ptr %579, i64 64
  %581 = load ptr, ptr %580, align 8
  call void %581({ ptr, i160 } %69, ptr nonnull %578, ptr %577)
  %582 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %583 = load ptr, ptr %result.i.i240, align 8
  %584 = load ptr, ptr %583, align 8
  %585 = getelementptr i8, ptr %584, i64 48
  %586 = load ptr, ptr %585, align 8
  %587 = call { i64, i64 } %586(ptr nonnull %583)
  %588 = extractvalue { i64, i64 } %587, 0
  %589 = extractvalue { i64, i64 } %587, 1
  %590 = urem i64 16, %589
  %591 = icmp eq i64 %590, 0
  %592 = sub i64 %589, %590
  %593 = select i1 %591, i64 0, i64 %592
  %594 = add i64 %593, %588
  %595 = and i64 %594, 7
  %596 = icmp eq i64 %595, 0
  %597 = sub nuw nsw i64 8, %595
  %598 = select i1 %596, i64 0, i64 %597
  %599 = getelementptr i8, ptr %result.i.i240, i64 %594
  %600 = getelementptr i8, ptr %599, i64 16
  %601 = getelementptr i8, ptr %600, i64 %598
  store ptr @i32_typ, ptr %601, align 8
  %602 = getelementptr i8, ptr %601, i64 8
  store i160 %.sroa.07.0.insert.ext, ptr %602, align 4
  %603 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %604 = load ptr, ptr %result.i.i240, align 8
  %605 = load ptr, ptr %604, align 8
  %606 = getelementptr i8, ptr %605, i64 48
  %607 = load ptr, ptr %606, align 8
  %608 = call { i64, i64 } %607(ptr nonnull %604)
  %609 = extractvalue { i64, i64 } %608, 0
  %610 = extractvalue { i64, i64 } %608, 1
  %611 = urem i64 16, %610
  %612 = icmp eq i64 %611, 0
  %613 = sub i64 %610, %611
  %614 = select i1 %612, i64 0, i64 %613
  %615 = add i64 %614, %609
  %616 = add i64 %615, 16
  %617 = and i64 %615, 7
  %618 = icmp eq i64 %617, 0
  %619 = sub nuw nsw i64 40, %617
  %620 = select i1 %618, i64 32, i64 %619
  %621 = add i64 %616, %620
  %622 = and i64 %621, 3
  %623 = icmp eq i64 %622, 0
  %624 = sub nuw nsw i64 4, %622
  %625 = select i1 %623, i64 0, i64 %624
  %626 = getelementptr i8, ptr %result.i.i240, i64 %621
  %627 = getelementptr i8, ptr %626, i64 %625
  store i32 %423, ptr %627, align 4
  %628 = load ptr, ptr %53, align 8
  %629 = ptrtoint ptr %result.i.i240 to i64
  %630 = ptrtoint ptr %628 to i64
  %.sroa.2.0.insert.ext.i = zext i64 %630 to i160
  %.sroa.2.0.insert.shift.i = shl nuw nsw i160 %.sroa.2.0.insert.ext.i, 64
  %.sroa.0.0.insert.ext.i = zext i64 %629 to i160
  %.sroa.2.0.insert.insert.i = or disjoint i160 %.sroa.2.0.insert.shift.i, %.sroa.0.0.insert.ext.i
  %.sroa.0.0.insert.insert.i = or disjoint i160 %.sroa.2.0.insert.insert.i, 3062541302288446171170371466885913903104
  %631 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0.0.insert.insert.i, 1
  %632 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %633 = load ptr, ptr %40, align 8
  %634 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %633, 0
  %635 = load ptr, ptr %41, align 8
  %636 = insertvalue { ptr, ptr, ptr, i32 } %634, ptr %635, 1
  %637 = load ptr, ptr %42, align 8
  %638 = insertvalue { ptr, ptr, ptr, i32 } %636, ptr %637, 2
  %639 = load i32, ptr %43, align 4
  %640 = insertvalue { ptr, ptr, ptr, i32 } %638, i32 %639, 3
  %hash_coef_ptr.i.i84.i = getelementptr i8, ptr %633, i64 8
  %tbl_size_ptr.i.i85.i = getelementptr i8, ptr %633, i64 16
  %offset_tbl_ptr.i.i86.i = getelementptr i8, ptr %633, i64 40
  %hash_coef.i.i87.i = load i64, ptr %hash_coef_ptr.i.i84.i, align 4
  %tbl_size.i.i88.i = load i64, ptr %tbl_size_ptr.i.i85.i, align 4
  %offset_tbl.i.i89.i = load ptr, ptr %offset_tbl_ptr.i.i86.i, align 8
  %product.i.i.i90.i = mul i64 %hash_coef.i.i87.i, -5261542750394134544
  %shifted.i.i.i91.i = lshr i64 %product.i.i.i90.i, 32
  %xored.i.i.i92.i = xor i64 %shifted.i.i.i91.i, %product.i.i.i90.i
  %hash.i.i.i93.i = and i64 %xored.i.i.i92.i, %tbl_size.i.i88.i
  %offset_ptr.i.i94.i = getelementptr i32, ptr %offset_tbl.i.i89.i, i64 %hash.i.i.i93.i
  %offset.i.i95.i = load i32, ptr %offset_ptr.i.i94.i, align 4
  %eq.i98.i = icmp eq i32 %639, %offset.i.i95.i
  call void @llvm.assume(i1 %eq.i98.i) #30
  %641 = load ptr, ptr %result.i, align 8
  %642 = load ptr, ptr %22, align 8
  %result.i99.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %643 = getelementptr i8, ptr %result.i99.i, i64 16
  store ptr %642, ptr %643, align 8
  %644 = getelementptr i8, ptr %result.i99.i, i64 8
  store ptr %641, ptr %644, align 8
  %645 = getelementptr i8, ptr %result.i99.i, i64 24
  store ptr null, ptr %645, align 8
  %646 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i99.i)
  store ptr @Entry, ptr %result.i99.i, align 8
  store ptr @_parameterization_Ptri32, ptr %16, align 8
  store ptr %result.i99.i, ptr %54, align 8
  %647 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %16)
  %648 = call ptr @llvm.invariant.start.p0(i64 600, ptr %633)
  %649 = sext i32 %639 to i64
  %650 = getelementptr ptr, ptr %633, i64 %649
  %651 = getelementptr i8, ptr %650, i64 128
  %652 = load ptr, ptr %651, align 8
  store ptr @i32_typ, ptr %17, align 8
  store ptr @Entry, ptr %55, align 8
  %653 = call ptr %652({ ptr, ptr, ptr, i32 } %640, ptr nonnull %17)
  call void %653({ ptr, ptr, ptr, i32 } %640, { ptr, ptr, ptr, i32 } %640, ptr nonnull %16, i32 %514, { ptr, i160 } %631)
  %654 = icmp eq ptr %.fca.0.extract2.i, @nil_typ
  %655 = icmp eq ptr %.fca.0.extract2.i, null
  %656 = or i1 %654, %655
  br i1 %656, label %._crit_edge.thread.i, label %._crit_edge.i

._crit_edge.thread.i:                             ; preds = %HashMap_find_slot_keyK_hashPtri32.exit
  %657 = load i32, ptr %56, align 4
  %658 = add i32 %657, 1
  store i32 %658, ptr %56, align 4
  br label %._crit_edge1.sink.split.i

._crit_edge.i:                                    ; preds = %HashMap_find_slot_keyK_hashPtri32.exit
  %.fca.1.extract4.i = extractvalue { ptr, i160 } %531, 1
  %.sroa.3192.8.extract.trunc.i = trunc i160 %.fca.1.extract4.i to i64
  %659 = inttoptr i64 %.sroa.3192.8.extract.trunc.i to ptr
  %.sroa.5193.8.extract.shift.i = lshr i160 %.fca.1.extract4.i, 64
  %.sroa.5193.8.extract.trunc.i = trunc i160 %.sroa.5193.8.extract.shift.i to i64
  %660 = inttoptr i64 %.sroa.5193.8.extract.trunc.i to ptr
  %hash_coef_ptr.i.i101.i = getelementptr i8, ptr %.fca.0.extract2.i, i64 8
  %tbl_size_ptr.i.i102.i = getelementptr i8, ptr %.fca.0.extract2.i, i64 16
  %offset_tbl_ptr.i.i103.i = getelementptr i8, ptr %.fca.0.extract2.i, i64 40
  %hash_coef.i.i104.i = load i64, ptr %hash_coef_ptr.i.i101.i, align 4
  %tbl_size.i.i105.i = load i64, ptr %tbl_size_ptr.i.i102.i, align 4
  %offset_tbl.i.i106.i = load ptr, ptr %offset_tbl_ptr.i.i103.i, align 8
  %product.i.i.i107.i = mul i64 %hash_coef.i.i104.i, 4015701072841558310
  %shifted.i.i.i108.i = lshr i64 %product.i.i.i107.i, 32
  %xored.i.i.i109.i = xor i64 %shifted.i.i.i108.i, %product.i.i.i107.i
  %hash.i.i.i110.i = and i64 %xored.i.i.i109.i, %tbl_size.i.i105.i
  %offset_ptr.i.i111.i = getelementptr i32, ptr %offset_tbl.i.i106.i, i64 %hash.i.i.i110.i
  %offset.i.i112.i = load i32, ptr %offset_ptr.i.i111.i, align 4
  %661 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract2.i, 0
  %662 = insertvalue { ptr, ptr, ptr, i32 } %661, ptr %659, 1
  %663 = insertvalue { ptr, ptr, ptr, i32 } %662, ptr %660, 2
  %664 = insertvalue { ptr, ptr, ptr, i32 } %663, i32 %offset.i.i112.i, 3
  %665 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %666 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %667 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract2.i)
  %668 = sext i32 %offset.i.i112.i to i64
  %669 = getelementptr ptr, ptr %.fca.0.extract2.i, i64 %668
  %670 = getelementptr i8, ptr %669, i64 56
  %671 = load ptr, ptr %670, align 8
  %672 = call ptr %671({ ptr, ptr, ptr, i32 } %664, ptr nonnull %2)
  %673 = call { ptr, i160 } %672({ ptr, ptr, ptr, i32 } %664, { ptr, ptr, ptr, i32 } %664, ptr nonnull %2)
  %.fca.0.extract45.i = extractvalue { ptr, i160 } %673, 0
  %674 = getelementptr i8, ptr %.fca.0.extract45.i, i64 8
  %675 = getelementptr i8, ptr %.fca.0.extract45.i, i64 16
  %676 = getelementptr i8, ptr %.fca.0.extract45.i, i64 24
  %677 = getelementptr i8, ptr %.fca.0.extract45.i, i64 32
  %678 = load i64, ptr %674, align 4
  %679 = load i64, ptr %675, align 4
  %680 = load ptr, ptr %676, align 8
  %681 = load ptr, ptr %677, align 8
  %result.i114.i = call i1 %680(i64 %679, i64 %678, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %681) #3
  br i1 %result.i114.i, label %._crit_edge1.sink.split.i, label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit

._crit_edge1.sink.split.i:                        ; preds = %._crit_edge.i, %._crit_edge.thread.i
  %.sink202.i = phi i64 [ 40, %._crit_edge.thread.i ], [ 32, %._crit_edge.i ]
  %682 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %683 = getelementptr i8, ptr getelementptr inbounds (i8, ptr @HashMap, i64 72), i64 %.sink202.i
  %684 = load ptr, ptr %683, align 8
  %685 = load ptr, ptr %684, align 8
  %686 = call i32 %685(ptr nonnull %result.i)
  %687 = add i32 %686, 1
  %688 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %689 = getelementptr i8, ptr %684, i64 8
  %690 = load ptr, ptr %689, align 8
  call void %690(ptr nonnull %result.i, i32 %687)
  br label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit

HashMap_insert_internal_keyK_valueV_hashPtri32.exit: ; preds = %._crit_edge.i, %._crit_edge1.sink.split.i
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %13)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %14)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %15)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %16)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %17)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %691 = add nuw nsw i32 %.reg2mem16.092, 1
  %692 = icmp slt i32 %691, %47
  br i1 %692, label %._crit_edge, label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit82

IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit82: ; preds = %HashMap_insert_internal_keyK_valueV_hashPtri32.exit, %1
  %693 = getelementptr i8, ptr %result.i, i64 56
  %694 = call i64 @clock()
  %695 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %696 = load i32, ptr %693, align 4
  %result.i41 = call noalias dereferenceable_or_null(17) ptr @bump_malloc_inner(i64 noundef 17, ptr nonnull @current_ptr) #29
  store <16 x i8> <i8 73, i8 110, i8 115, i8 101, i8 114, i8 116, i8 32, i8 72, i8 101, i8 97, i8 118, i8 121, i8 32, i8 77, i8 105, i8 120>, ptr %result.i41, align 16
  %result.i42 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %697 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %result.i42, 1
  %698 = insertvalue { ptr, ptr, ptr, i32 } %697, ptr undef, 2
  %699 = insertvalue { ptr, ptr, ptr, i32 } %698, i32 9, 3
  store ptr %result.i41, ptr %result.i42, align 8
  %700 = getelementptr i8, ptr %result.i42, i64 8
  store i32 16, ptr %700, align 4
  %701 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %702 = getelementptr i8, ptr %result.i42, i64 12
  store i32 17, ptr %702, align 4
  %703 = sub i64 %694, %48
  call void @print_benchmark_result({ ptr, ptr, ptr, i32 } %699, i32 %47, i64 %703)
  %result.i43 = call noalias dereferenceable_or_null(22) ptr @bump_malloc_inner(i64 noundef 22, ptr nonnull @current_ptr) #29
  store <21 x i8> <i8 32, i8 32, i8 32, i8 32, i8 40, i8 102, i8 105, i8 110, i8 97, i8 108, i8 32, i8 109, i8 97, i8 112, i8 32, i8 115, i8 105, i8 122, i8 101, i8 58, i8 32>, ptr %result.i43, align 32
  %result.i44 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %704 = getelementptr inbounds i8, ptr %20, i64 8
  %705 = getelementptr inbounds i8, ptr %20, i64 24
  store ptr @String, ptr %20, align 8
  store ptr %result.i44, ptr %704, align 8
  store i32 9, ptr %705, align 8
  %706 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %20)
  store ptr %result.i43, ptr %result.i44, align 8
  %707 = getelementptr i8, ptr %result.i44, i64 8
  store i32 21, ptr %707, align 4
  %708 = getelementptr i8, ptr %result.i44, i64 12
  store i32 22, ptr %708, align 4
  %709 = load i160, ptr %704, align 8
  %710 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %.sroa.3.8.extract.trunc.i = trunc i160 %709 to i64
  %711 = inttoptr i64 %.sroa.3.8.extract.trunc.i to ptr
  %712 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %713 = getelementptr i8, ptr %711, i64 8
  %714 = load i32, ptr %713, align 4
  %715 = add i32 %714, 1
  %716 = sext i32 %715 to i64
  %result.i.i260 = call noalias ptr @bump_malloc_inner(i64 noundef %716, ptr nonnull @current_ptr) #29
  %717 = load i32, ptr %713, align 4
  %718 = icmp sgt i32 %717, 0
  br i1 %718, label %.lr.ph.i, label %String_c_string_.exit

.lr.ph.i:                                         ; preds = %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit82
  %719 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %720 = load ptr, ptr %711, align 8
  %721 = zext nneg i32 %717 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i260, ptr align 1 %720, i64 %721, i1 false)
  br label %String_c_string_.exit

String_c_string_.exit:                            ; preds = %.lr.ph.i, %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit82
  %722 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %723 = sext i32 %717 to i64
  %724 = getelementptr i8, ptr %result.i.i260, i64 %723
  store i8 0, ptr %724, align 1
  %puts.i = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i260)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %725 = call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i32_string, i32 %696)
  %result.i63 = call noalias dereferenceable_or_null(2) ptr @bump_malloc_inner(i64 noundef 2, ptr nonnull @current_ptr) #29
  store <1 x i8> <i8 41>, ptr %result.i63, align 1
  %result.i64 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %726 = getelementptr inbounds i8, ptr %21, i64 8
  %727 = getelementptr inbounds i8, ptr %21, i64 24
  store ptr @String, ptr %21, align 8
  store ptr %result.i64, ptr %726, align 8
  store i32 9, ptr %727, align 8
  %728 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %21)
  store ptr %result.i63, ptr %result.i64, align 8
  %729 = getelementptr i8, ptr %result.i64, i64 8
  store i32 1, ptr %729, align 4
  %730 = getelementptr i8, ptr %result.i64, i64 12
  store i32 2, ptr %730, align 4
  %731 = load i160, ptr %726, align 8
  %732 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %.sroa.3.8.extract.trunc.i192 = trunc i160 %731 to i64
  %733 = inttoptr i64 %.sroa.3.8.extract.trunc.i192 to ptr
  %734 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %735 = getelementptr i8, ptr %733, i64 8
  %736 = load i32, ptr %735, align 4
  %737 = add i32 %736, 1
  %738 = sext i32 %737 to i64
  %result.i.i276 = call noalias ptr @bump_malloc_inner(i64 noundef %738, ptr nonnull @current_ptr) #29
  %739 = load i32, ptr %735, align 4
  %740 = icmp sgt i32 %739, 0
  br i1 %740, label %.lr.ph.i277, label %String_c_string_.exit281

.lr.ph.i277:                                      ; preds = %String_c_string_.exit
  %741 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %742 = load ptr, ptr %733, align 8
  %743 = zext nneg i32 %739 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i276, ptr align 1 %742, i64 %743, i1 false)
  br label %String_c_string_.exit281

String_c_string_.exit281:                         ; preds = %.lr.ph.i277, %String_c_string_.exit
  %744 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %745 = sext i32 %739 to i64
  %746 = getelementptr i8, ptr %result.i.i276, i64 %745
  store i8 0, ptr %746, align 1
  %puts.i208 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i276)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  ret void
}

define noundef i32 @main() local_unnamed_addr {
IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit:
  %0 = alloca [0 x ptr], align 8
  %1 = alloca [1 x ptr], align 8
  %2 = alloca { ptr }, align 8
  %3 = alloca [1 x ptr], align 8
  %4 = alloca { ptr }, align 8
  %5 = alloca [1 x ptr], align 8
  %6 = alloca { ptr }, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = alloca [3 x ptr], align 8
  %9 = alloca [2 x ptr], align 8
  %10 = alloca { ptr, ptr }, align 8
  %11 = alloca [1 x ptr], align 8
  %12 = alloca { ptr }, align 8
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %14 = alloca [2 x ptr], align 8
  %15 = alloca { ptr, ptr }, align 8
  %16 = alloca [1 x ptr], align 8
  %17 = alloca { ptr }, align 8
  %oldProtect.i23.i = alloca i32, align 4
  %oldProtect.i.i631 = alloca i32, align 4
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %20 = alloca [1 x ptr], align 8
  %21 = alloca { ptr }, align 8
  %22 = alloca [1 x ptr], align 8
  %23 = alloca { ptr }, align 8
  %24 = alloca [1 x ptr], align 8
  %25 = alloca { ptr }, align 8
  %26 = alloca { ptr, ptr, ptr, i32 }, align 8
  %27 = alloca [3 x ptr], align 8
  %28 = alloca [2 x ptr], align 8
  %29 = alloca { ptr, ptr }, align 8
  %30 = alloca [1 x ptr], align 8
  %31 = alloca { ptr }, align 8
  %32 = alloca [1 x ptr], align 8
  %33 = alloca { ptr }, align 8
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = alloca [2 x ptr], align 8
  %36 = alloca { ptr, ptr }, align 8
  %37 = alloca [1 x ptr], align 8
  %38 = alloca { ptr }, align 8
  %39 = alloca [1 x ptr], align 8
  %40 = alloca { ptr }, align 8
  %oldProtect.i50.i = alloca i32, align 4
  %oldProtect.i.i423 = alloca i32, align 4
  %41 = alloca { ptr, ptr, ptr, i32 }, align 8
  %42 = alloca { ptr, ptr, ptr, i32 }, align 8
  %43 = alloca { ptr, ptr, ptr, i32 }, align 8
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = alloca { ptr, ptr, ptr, i32 }, align 8
  %46 = alloca { ptr, ptr, ptr, i32 }, align 8
  %47 = alloca [1 x ptr], align 8
  %48 = alloca { ptr }, align 8
  %49 = alloca [1 x ptr], align 8
  %50 = alloca { ptr }, align 8
  %51 = alloca [1 x ptr], align 8
  %52 = alloca { ptr }, align 8
  %53 = alloca { ptr, ptr, ptr, i32 }, align 8
  %54 = alloca [3 x ptr], align 8
  %55 = alloca [2 x ptr], align 8
  %56 = alloca { ptr, ptr }, align 8
  %57 = alloca [1 x ptr], align 8
  %58 = alloca { ptr }, align 8
  %59 = alloca [1 x ptr], align 8
  %60 = alloca { ptr }, align 8
  %61 = alloca { ptr, ptr, ptr, i32 }, align 8
  %62 = alloca [2 x ptr], align 8
  %63 = alloca { ptr, ptr }, align 8
  %64 = alloca [1 x ptr], align 8
  %65 = alloca { ptr }, align 8
  %66 = alloca [1 x ptr], align 8
  %67 = alloca { ptr }, align 8
  %oldProtect.i45.i = alloca i32, align 4
  %oldProtect.i.i214 = alloca i32, align 4
  %68 = alloca { ptr, ptr, ptr, i32 }, align 8
  %69 = alloca { ptr, ptr, ptr, i32 }, align 8
  %70 = alloca { ptr, ptr, ptr, i32 }, align 8
  %71 = alloca [1 x ptr], align 8
  %72 = alloca { ptr }, align 8
  %73 = alloca [1 x ptr], align 8
  %74 = alloca { ptr }, align 8
  %75 = alloca [1 x ptr], align 8
  %76 = alloca { ptr }, align 8
  %77 = alloca { ptr, ptr, ptr, i32 }, align 8
  %78 = alloca [3 x ptr], align 8
  %79 = alloca [2 x ptr], align 8
  %80 = alloca { ptr, ptr }, align 8
  %81 = alloca [1 x ptr], align 8
  %82 = alloca { ptr }, align 8
  %83 = alloca [1 x ptr], align 8
  %84 = alloca { ptr }, align 8
  %85 = alloca { ptr, ptr, ptr, i32 }, align 8
  %86 = alloca [2 x ptr], align 8
  %87 = alloca { ptr, ptr }, align 8
  %88 = alloca [1 x ptr], align 8
  %89 = alloca { ptr }, align 8
  %90 = alloca [1 x ptr], align 8
  %91 = alloca { ptr }, align 8
  %oldProtect.i31.i = alloca i32, align 4
  %oldProtect.i.i4 = alloca i32, align 4
  %92 = alloca { ptr, ptr, ptr, i32 }, align 8
  %93 = alloca { ptr, ptr, ptr, i32 }, align 8
  %94 = alloca { ptr, ptr, ptr, i32 }, align 8
  %95 = alloca [1 x ptr], align 8
  %96 = alloca { ptr }, align 8
  %97 = alloca [1 x ptr], align 8
  %98 = alloca { ptr }, align 8
  %99 = alloca [1 x ptr], align 8
  %100 = alloca { ptr }, align 8
  %101 = alloca { ptr, ptr, ptr, i32 }, align 8
  %102 = alloca [3 x ptr], align 8
  %103 = alloca [2 x ptr], align 8
  %104 = alloca { ptr, ptr }, align 8
  %105 = alloca [1 x ptr], align 8
  %106 = alloca { ptr }, align 8
  %107 = alloca [1 x ptr], align 8
  %108 = alloca { ptr }, align 8
  %109 = alloca { ptr, ptr, ptr, i32 }, align 8
  %110 = alloca [2 x ptr], align 8
  %111 = alloca { ptr, ptr }, align 8
  %112 = alloca [1 x ptr], align 8
  %113 = alloca { ptr }, align 8
  %114 = alloca [1 x ptr], align 8
  %115 = alloca { ptr }, align 8
  %oldProtect.i30.i = alloca i32, align 4
  %oldProtect.i.i = alloca i32, align 4
  %116 = alloca { ptr, ptr, ptr, i32 }, align 8
  %117 = alloca { ptr, ptr, ptr, i32 }, align 8
  %118 = alloca { ptr, ptr, ptr, i32 }, align 8
  %119 = alloca { ptr, ptr, ptr, i32 }, align 8
  %120 = alloca { ptr, ptr, ptr, i32 }, align 8
  tail call void @setup_landing_pad()
  %result.i = tail call noalias dereferenceable_or_null(27) ptr @bump_malloc_inner(i64 noundef 27, ptr nonnull @current_ptr) #29
  store <26 x i8> <i8 45, i8 45, i8 45, i8 32, i8 72, i8 97, i8 115, i8 104, i8 77, i8 97, i8 112, i8 32, i8 66, i8 101, i8 110, i8 99, i8 104, i8 109, i8 97, i8 114, i8 107, i8 115, i8 32, i8 45, i8 45, i8 45>, ptr %result.i, align 32
  %result.i2 = tail call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %121 = getelementptr inbounds i8, ptr %119, i64 8
  %122 = getelementptr inbounds i8, ptr %119, i64 24
  store ptr @String, ptr %119, align 8
  store ptr %result.i2, ptr %121, align 8
  store i32 9, ptr %122, align 8
  %123 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %119)
  store ptr %result.i, ptr %result.i2, align 8
  %124 = getelementptr i8, ptr %result.i2, i64 8
  store i32 26, ptr %124, align 4
  %125 = getelementptr i8, ptr %result.i2, i64 12
  store i32 27, ptr %125, align 4
  %126 = load i160, ptr %121, align 8
  %127 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  %.sroa.3.8.extract.trunc.i = trunc i160 %126 to i64
  %128 = inttoptr i64 %.sroa.3.8.extract.trunc.i to ptr
  %129 = getelementptr i8, ptr %128, i64 8
  %130 = load i32, ptr %129, align 4
  %131 = add i32 %130, 1
  %132 = sext i32 %131 to i64
  %result.i.i = tail call noalias ptr @bump_malloc_inner(i64 noundef %132, ptr nonnull @current_ptr) #29
  %133 = load i32, ptr %129, align 4
  %134 = icmp sgt i32 %133, 0
  br i1 %134, label %.lr.ph.i1351, label %String_c_string_.exit

.lr.ph.i1351:                                     ; preds = %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit
  %135 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %136 = load ptr, ptr %128, align 8
  %137 = zext nneg i32 %133 to i64
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i, ptr align 1 %136, i64 %137, i1 false)
  br label %String_c_string_.exit

String_c_string_.exit:                            ; preds = %.lr.ph.i1351, %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit
  %138 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %139 = sext i32 %133 to i64
  %140 = getelementptr i8, ptr %result.i.i, i64 %139
  store i8 0, ptr %140, align 1
  %puts.i = tail call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %116)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %117)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %118)
  %result.i.i3 = tail call noalias dereferenceable_or_null(80) ptr @bump_malloc_inner(i64 noundef 80, ptr nonnull @current_ptr) #29
  store ptr @_parameterization_Ptri32, ptr %result.i.i3, align 8
  %141 = getelementptr i8, ptr %result.i.i3, i64 8
  store ptr @_parameterization_Ptri32, ptr %141, align 8
  %142 = getelementptr i8, ptr %result.i.i3, i64 16
  store ptr @_parameterization_PairPtri32._Ptri32, ptr %142, align 8
  %143 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %result.i.i3)
  %result.i27.i = tail call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %oldProtect.i.i)
  %result.i28.i = call i32 @VirtualProtect(ptr %result.i27.i, i64 16, i32 64, ptr nonnull %oldProtect.i.i) #16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %oldProtect.i.i)
  call void @llvm.init.trampoline(ptr %result.i27.i, ptr nonnull @nckuqhcbrs, ptr nonnull @i32_hasher)
  %ret.i.i = call ptr @llvm.adjust.trampoline(ptr readonly %result.i27.i) #31
  %144 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i27.i)
  %result.i29.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %oldProtect.i30.i)
  %result.i31.i = call i32 @VirtualProtect(ptr %result.i29.i, i64 16, i32 64, ptr nonnull %oldProtect.i30.i) #16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %oldProtect.i30.i)
  call void @llvm.init.trampoline(ptr %result.i29.i, ptr nonnull @zztptklfit, ptr nonnull @i32_eq)
  %ret.i32.i = call ptr @llvm.adjust.trampoline(ptr readonly %result.i29.i) #31
  %145 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i29.i)
  %146 = getelementptr i8, ptr %result.i.i3, i64 64
  store ptr %ret.i.i, ptr %146, align 8
  %147 = getelementptr i8, ptr %result.i.i3, i64 72
  store ptr %ret.i32.i, ptr %147, align 8
  %result.i.i.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %148 = getelementptr i8, ptr %result.i.i.i, i64 16
  store ptr @_parameterization_Nil, ptr %148, align 8
  %result.i4.i.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %149 = getelementptr i8, ptr %result.i4.i.i, i64 16
  store ptr @_parameterization_Ptri32, ptr %149, align 8
  %150 = getelementptr i8, ptr %result.i4.i.i, i64 8
  store ptr @_parameterization_Ptri32, ptr %150, align 8
  %151 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i4.i.i)
  store ptr @Entry, ptr %result.i4.i.i, align 8
  %152 = getelementptr i8, ptr %result.i.i.i, i64 8
  store ptr %result.i4.i.i, ptr %152, align 8
  %153 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i.i)
  store ptr @union_typ, ptr %result.i.i.i, align 8
  %result.i5.i.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i.i, ptr %result.i5.i.i, align 8
  %154 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i5.i.i)
  %155 = getelementptr i8, ptr %result.i5.i.i, i64 16
  store i32 16, ptr %155, align 4
  %156 = getelementptr i8, ptr %result.i5.i.i, i64 20
  store i32 16, ptr %156, align 4
  %result.i.i.i.i = call noalias dereferenceable_or_null(512) ptr @bump_malloc_inner(i64 noundef 512, ptr nonnull @current_ptr) #29
  %157 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %158 = getelementptr i8, ptr %result.i5.i.i, i64 8
  store ptr %result.i.i.i.i, ptr %158, align 8
  %159 = getelementptr i8, ptr %result.i.i3, i64 24
  store ptr @Array, ptr %159, align 8
  %160 = getelementptr i8, ptr %result.i.i3, i64 32
  store ptr %result.i5.i.i, ptr %160, align 8
  %161 = getelementptr i8, ptr %result.i.i3, i64 40
  %162 = getelementptr i8, ptr %result.i.i3, i64 48
  store i32 9, ptr %162, align 4
  %163 = getelementptr i8, ptr %result.i.i3, i64 56
  %164 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %165 = getelementptr i8, ptr %result.i.i3, i64 60
  %166 = call i64 @clock()
  %167 = getelementptr inbounds i8, ptr %109, i64 8
  %168 = getelementptr inbounds i8, ptr %109, i64 24
  %169 = getelementptr inbounds i8, ptr %109, i64 16
  %170 = getelementptr inbounds i8, ptr %110, i64 8
  %171 = getelementptr inbounds i8, ptr %111, i64 8
  %172 = getelementptr inbounds i8, ptr %101, i64 8
  %173 = getelementptr inbounds i8, ptr %101, i64 24
  %174 = getelementptr inbounds i8, ptr %101, i64 16
  %175 = getelementptr inbounds i8, ptr %102, i64 8
  %176 = getelementptr inbounds i8, ptr %102, i64 16
  %177 = getelementptr inbounds i8, ptr %103, i64 8
  %178 = getelementptr inbounds i8, ptr %104, i64 8
  br label %._crit_edge.i

._crit_edge.i:                                    ; preds = %HashMap_insert_internal_keyK_valueV_hashPtri32.exit.i, %String_c_string_.exit
  %.reg2mem46.082.i = phi i32 [ %179, %HashMap_insert_internal_keyK_valueV_hashPtri32.exit.i ], [ 0, %String_c_string_.exit ]
  %179 = add nuw nsw i32 %.reg2mem46.082.i, 1
  %.sroa.020.0.insert.ext.i = zext nneg i32 %.reg2mem46.082.i to i160
  %180 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.020.0.insert.ext.i, 1
  %.sroa.017.0.insert.ext.i = zext nneg i32 %179 to i160
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  %181 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %182 = load ptr, ptr %159, align 8
  %183 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %182, 0
  %184 = load ptr, ptr %160, align 8
  %185 = insertvalue { ptr, ptr, ptr, i32 } %183, ptr %184, 1
  %186 = load ptr, ptr %161, align 8
  %187 = insertvalue { ptr, ptr, ptr, i32 } %185, ptr %186, 2
  %188 = load i32, ptr %162, align 4
  %189 = insertvalue { ptr, ptr, ptr, i32 } %187, i32 %188, 3
  %hash_coef_ptr.i.i42.i.i = getelementptr i8, ptr %182, i64 8
  %tbl_size_ptr.i.i43.i.i = getelementptr i8, ptr %182, i64 16
  %offset_tbl_ptr.i.i44.i.i = getelementptr i8, ptr %182, i64 40
  %hash_coef.i.i45.i.i = load i64, ptr %hash_coef_ptr.i.i42.i.i, align 4
  %tbl_size.i.i46.i.i = load i64, ptr %tbl_size_ptr.i.i43.i.i, align 4
  %offset_tbl.i.i47.i.i = load ptr, ptr %offset_tbl_ptr.i.i44.i.i, align 8
  %product.i.i.i48.i.i = mul i64 %hash_coef.i.i45.i.i, -5261542750394134544
  %shifted.i.i.i49.i.i = lshr i64 %product.i.i.i48.i.i, 32
  %xored.i.i.i50.i.i = xor i64 %shifted.i.i.i49.i.i, %product.i.i.i48.i.i
  %hash.i.i.i51.i.i = and i64 %xored.i.i.i50.i.i, %tbl_size.i.i46.i.i
  %offset_ptr.i.i52.i.i = getelementptr i32, ptr %offset_tbl.i.i47.i.i, i64 %hash.i.i.i51.i.i
  %offset.i.i53.i.i = load i32, ptr %offset_ptr.i.i52.i.i, align 4
  %eq.i.i.i = icmp eq i32 %188, %offset.i.i53.i.i
  call void @llvm.assume(i1 %eq.i.i.i) #30
  %190 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %191 = call ptr @llvm.invariant.start.p0(i64 600, ptr %182)
  %192 = sext i32 %188 to i64
  %193 = getelementptr ptr, ptr %182, i64 %192
  %194 = getelementptr i8, ptr %193, i64 64
  %195 = load ptr, ptr %194, align 8
  %196 = call ptr %195({ ptr, ptr, ptr, i32 } %189, ptr nonnull %0)
  %197 = call i32 %196({ ptr, ptr, ptr, i32 } %189, { ptr, ptr, ptr, i32 } %189, ptr nonnull %0)
  %198 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %199 = load ptr, ptr %159, align 8
  %200 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %199, 0
  %201 = load ptr, ptr %160, align 8
  %202 = insertvalue { ptr, ptr, ptr, i32 } %200, ptr %201, 1
  %203 = load ptr, ptr %161, align 8
  %204 = insertvalue { ptr, ptr, ptr, i32 } %202, ptr %203, 2
  %205 = load i32, ptr %162, align 4
  %206 = insertvalue { ptr, ptr, ptr, i32 } %204, i32 %205, 3
  %hash_coef_ptr.i.i56.i.i = getelementptr i8, ptr %199, i64 8
  %tbl_size_ptr.i.i57.i.i = getelementptr i8, ptr %199, i64 16
  %offset_tbl_ptr.i.i58.i.i = getelementptr i8, ptr %199, i64 40
  %hash_coef.i.i59.i.i = load i64, ptr %hash_coef_ptr.i.i56.i.i, align 4
  %tbl_size.i.i60.i.i = load i64, ptr %tbl_size_ptr.i.i57.i.i, align 4
  %offset_tbl.i.i61.i.i = load ptr, ptr %offset_tbl_ptr.i.i58.i.i, align 8
  %product.i.i.i62.i.i = mul i64 %hash_coef.i.i59.i.i, -5261542750394134544
  %shifted.i.i.i63.i.i = lshr i64 %product.i.i.i62.i.i, 32
  %xored.i.i.i64.i.i = xor i64 %shifted.i.i.i63.i.i, %product.i.i.i62.i.i
  %hash.i.i.i65.i.i = and i64 %xored.i.i.i64.i.i, %tbl_size.i.i60.i.i
  %offset_ptr.i.i66.i.i = getelementptr i32, ptr %offset_tbl.i.i61.i.i, i64 %hash.i.i.i65.i.i
  %offset.i.i67.i.i = load i32, ptr %offset_ptr.i.i66.i.i, align 4
  %eq.i70.i.i = icmp eq i32 %205, %offset.i.i67.i.i
  call void @llvm.assume(i1 %eq.i70.i.i) #30
  %207 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %208 = call ptr @llvm.invariant.start.p0(i64 600, ptr %199)
  %209 = sext i32 %205 to i64
  %210 = getelementptr ptr, ptr %199, i64 %209
  %211 = getelementptr i8, ptr %210, i64 64
  %212 = load ptr, ptr %211, align 8
  %213 = call ptr %212({ ptr, ptr, ptr, i32 } %206, ptr nonnull %0)
  %214 = call i32 %213({ ptr, ptr, ptr, i32 } %206, { ptr, ptr, ptr, i32 } %206, ptr nonnull %0)
  %215 = icmp eq i32 %214, 0
  %216 = load i32, ptr %165, align 4
  %217 = mul i32 %216, 10
  %218 = add i32 %217, 10
  %219 = mul i32 %197, 7
  %220 = icmp sge i32 %218, %219
  %221 = or i1 %215, %220
  br i1 %221, label %222, label %HashMap_insert_keyK_valueV.exit.i

222:                                              ; preds = %._crit_edge.i
  %223 = shl i32 %197, 1
  %224 = call i32 @llvm.smax.i32(i32 %223, i32 16)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %112)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %113)
  %225 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %226 = load ptr, ptr %159, align 8
  %227 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %226, 0
  %228 = load ptr, ptr %160, align 8
  %229 = insertvalue { ptr, ptr, ptr, i32 } %227, ptr %228, 1
  %230 = load ptr, ptr %161, align 8
  %231 = insertvalue { ptr, ptr, ptr, i32 } %229, ptr %230, 2
  %232 = load i32, ptr %162, align 4
  %233 = insertvalue { ptr, ptr, ptr, i32 } %231, i32 %232, 3
  %hash_coef_ptr.i.i39.i.i = getelementptr i8, ptr %226, i64 8
  %tbl_size_ptr.i.i40.i.i = getelementptr i8, ptr %226, i64 16
  %offset_tbl_ptr.i.i41.i.i = getelementptr i8, ptr %226, i64 40
  %hash_coef.i.i42.i.i = load i64, ptr %hash_coef_ptr.i.i39.i.i, align 4
  %tbl_size.i.i43.i.i = load i64, ptr %tbl_size_ptr.i.i40.i.i, align 4
  %offset_tbl.i.i44.i.i = load ptr, ptr %offset_tbl_ptr.i.i41.i.i, align 8
  %product.i.i.i45.i.i = mul i64 %hash_coef.i.i42.i.i, -5261542750394134544
  %shifted.i.i.i46.i.i = lshr i64 %product.i.i.i45.i.i, 32
  %xored.i.i.i47.i.i = xor i64 %shifted.i.i.i46.i.i, %product.i.i.i45.i.i
  %hash.i.i.i48.i.i = and i64 %xored.i.i.i47.i.i, %tbl_size.i.i43.i.i
  %offset_ptr.i.i49.i.i = getelementptr i32, ptr %offset_tbl.i.i44.i.i, i64 %hash.i.i.i48.i.i
  %offset.i.i50.i.i = load i32, ptr %offset_ptr.i.i49.i.i, align 4
  %eq.i.i263.i = icmp eq i32 %232, %offset.i.i50.i.i
  call void @llvm.assume(i1 %eq.i.i263.i) #30
  %234 = load ptr, ptr %result.i.i3, align 8
  %235 = load ptr, ptr %141, align 8
  %result.i.i264.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %236 = getelementptr i8, ptr %result.i.i264.i, i64 16
  store ptr @_parameterization_Nil, ptr %236, align 8
  %result.i66.i.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %237 = getelementptr i8, ptr %result.i66.i.i, i64 16
  store ptr %235, ptr %237, align 8
  %238 = getelementptr i8, ptr %result.i66.i.i, i64 8
  store ptr %234, ptr %238, align 8
  %239 = getelementptr i8, ptr %result.i66.i.i, i64 24
  store ptr null, ptr %239, align 8
  %240 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i66.i.i)
  store ptr @Entry, ptr %result.i66.i.i, align 8
  %241 = getelementptr i8, ptr %result.i.i264.i, i64 8
  store ptr %result.i66.i.i, ptr %241, align 8
  %242 = getelementptr i8, ptr %result.i.i264.i, i64 24
  store ptr null, ptr %242, align 8
  %243 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i264.i)
  store ptr @union_typ, ptr %result.i.i264.i, align 8
  %result.i67.i.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i264.i, ptr %result.i67.i.i, align 8
  %244 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i67.i.i)
  %245 = getelementptr i8, ptr %result.i67.i.i, i64 16
  store i32 %224, ptr %245, align 4
  %246 = getelementptr i8, ptr %result.i67.i.i, i64 20
  store i32 %224, ptr %246, align 4
  %247 = zext nneg i32 %224 to i64
  %248 = shl nuw nsw i64 %247, 5
  %result.i.i.i265.i = call noalias ptr @bump_malloc_inner(i64 noundef %248, ptr nonnull @current_ptr) #29
  %249 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %250 = getelementptr i8, ptr %result.i67.i.i, i64 8
  store ptr %result.i.i.i265.i, ptr %250, align 8
  store ptr @Array, ptr %159, align 8
  store ptr %result.i67.i.i, ptr %160, align 8
  store i32 9, ptr %162, align 4
  store i32 0, ptr %163, align 4
  store i32 0, ptr %165, align 4
  %invariant.gep.i.i = getelementptr i8, ptr %226, i64 64
  %251 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %252 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %253 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %226)
  %254 = sext i32 %232 to i64
  %gep.i359.i = getelementptr ptr, ptr %invariant.gep.i.i, i64 %254
  %255 = load ptr, ptr %gep.i359.i, align 8
  %256 = call ptr %255({ ptr, ptr, ptr, i32 } %233, ptr nonnull %0)
  %257 = call i32 %256({ ptr, ptr, ptr, i32 } %233, { ptr, ptr, ptr, i32 } %233, ptr nonnull %0)
  %258 = icmp sgt i32 %257, 0
  br i1 %258, label %.lr.ph.i, label %HashMap_resize_new_capacityPtri32.exit.i

.lr.ph.i:                                         ; preds = %222
  %invariant.gep172.i.i = getelementptr i8, ptr %226, i64 120
  %259 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %gep173.i.i = getelementptr ptr, ptr %invariant.gep172.i.i, i64 %254
  br label %260

260:                                              ; preds = %._crit_edge3.i.i, %.lr.ph.i
  %.reg2mem31.0.i360.i = phi i32 [ 0, %.lr.ph.i ], [ %527, %._crit_edge3.i.i ]
  store ptr @_parameterization_Ptri32, ptr %112, align 8
  %261 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %112)
  %262 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %226)
  %263 = load ptr, ptr %gep173.i.i, align 8
  store ptr @i32_typ, ptr %113, align 8
  %264 = call ptr %263({ ptr, ptr, ptr, i32 } %233, ptr nonnull %113)
  %265 = call { ptr, i160 } %264({ ptr, ptr, ptr, i32 } %233, { ptr, ptr, ptr, i32 } %233, ptr nonnull %112, i32 %.reg2mem31.0.i360.i)
  %.fca.0.extract30.i.i = extractvalue { ptr, i160 } %265, 0
  %266 = icmp ne ptr %.fca.0.extract30.i.i, @nil_typ
  %267 = icmp ne ptr %.fca.0.extract30.i.i, null
  %.not37.i.i = and i1 %266, %267
  br i1 %.not37.i.i, label %268, label %._crit_edge3.i.i

268:                                              ; preds = %260
  %.fca.1.extract32.i.i = extractvalue { ptr, i160 } %265, 1
  %.sroa.5164.8.extract.trunc.i.i = trunc i160 %.fca.1.extract32.i.i to i64
  %269 = inttoptr i64 %.sroa.5164.8.extract.trunc.i.i to ptr
  %.sroa.9.8.extract.shift.i.i = lshr i160 %.fca.1.extract32.i.i, 64
  %.sroa.9.8.extract.trunc.i.i = trunc i160 %.sroa.9.8.extract.shift.i.i to i64
  %270 = inttoptr i64 %.sroa.9.8.extract.trunc.i.i to ptr
  %hash_coef_ptr.i.i83.i.i = getelementptr i8, ptr %.fca.0.extract30.i.i, i64 8
  %tbl_size_ptr.i.i84.i.i = getelementptr i8, ptr %.fca.0.extract30.i.i, i64 16
  %offset_tbl_ptr.i.i85.i.i = getelementptr i8, ptr %.fca.0.extract30.i.i, i64 40
  %hash_coef.i.i86.i.i = load i64, ptr %hash_coef_ptr.i.i83.i.i, align 4
  %tbl_size.i.i87.i.i = load i64, ptr %tbl_size_ptr.i.i84.i.i, align 4
  %offset_tbl.i.i88.i.i = load ptr, ptr %offset_tbl_ptr.i.i85.i.i, align 8
  %product.i.i.i89.i.i = mul i64 %hash_coef.i.i86.i.i, 4015701072841558310
  %shifted.i.i.i90.i.i = lshr i64 %product.i.i.i89.i.i, 32
  %xored.i.i.i91.i.i = xor i64 %shifted.i.i.i90.i.i, %product.i.i.i89.i.i
  %hash.i.i.i92.i.i = and i64 %xored.i.i.i91.i.i, %tbl_size.i.i87.i.i
  %offset_ptr.i.i93.i.i = getelementptr i32, ptr %offset_tbl.i.i88.i.i, i64 %hash.i.i.i92.i.i
  %offset.i.i94.i.i = load i32, ptr %offset_ptr.i.i93.i.i, align 4
  %271 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract30.i.i, 0
  %272 = insertvalue { ptr, ptr, ptr, i32 } %271, ptr %269, 1
  %273 = insertvalue { ptr, ptr, ptr, i32 } %272, ptr %270, 2
  %274 = insertvalue { ptr, ptr, ptr, i32 } %273, i32 %offset.i.i94.i.i, 3
  %275 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %276 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %277 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract30.i.i)
  %278 = sext i32 %offset.i.i94.i.i to i64
  %279 = getelementptr ptr, ptr %.fca.0.extract30.i.i, i64 %278
  %280 = getelementptr i8, ptr %279, i64 56
  %281 = load ptr, ptr %280, align 8
  %282 = call ptr %281({ ptr, ptr, ptr, i32 } %274, ptr nonnull %0)
  %283 = call { ptr, i160 } %282({ ptr, ptr, ptr, i32 } %274, { ptr, ptr, ptr, i32 } %274, ptr nonnull %0)
  %.fca.0.extract23.i.i = extractvalue { ptr, i160 } %283, 0
  %284 = getelementptr i8, ptr %.fca.0.extract23.i.i, i64 8
  %285 = getelementptr i8, ptr %.fca.0.extract23.i.i, i64 16
  %286 = getelementptr i8, ptr %.fca.0.extract23.i.i, i64 24
  %287 = getelementptr i8, ptr %.fca.0.extract23.i.i, i64 32
  %288 = load i64, ptr %284, align 4
  %289 = load i64, ptr %285, align 4
  %290 = load ptr, ptr %286, align 8
  %291 = load ptr, ptr %287, align 8
  %result.i96.i.i = call i1 %290(i64 %289, i64 %288, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %291) #3
  br i1 %result.i96.i.i, label %._crit_edge3.i.i, label %292

292:                                              ; preds = %268
  %result.i97.i.i = call i1 %290(i64 %289, i64 %288, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr readonly %291) #3
  br i1 %result.i97.i.i, label %293, label %._crit_edge3.i.i

293:                                              ; preds = %292
  %294 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %295 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %296 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract30.i.i)
  %297 = getelementptr i8, ptr %279, i64 48
  %298 = load ptr, ptr %297, align 8
  %299 = call ptr %298({ ptr, ptr, ptr, i32 } %274, ptr nonnull %0)
  %300 = call { ptr, i160 } %299({ ptr, ptr, ptr, i32 } %274, { ptr, ptr, ptr, i32 } %274, ptr nonnull %0)
  %301 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %302 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %303 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract30.i.i)
  %304 = getelementptr i8, ptr %279, i64 64
  %305 = load ptr, ptr %304, align 8
  %306 = call ptr %305({ ptr, ptr, ptr, i32 } %274, ptr nonnull %0)
  %307 = call i32 %306({ ptr, ptr, ptr, i32 } %274, { ptr, ptr, ptr, i32 } %274, ptr nonnull %0)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %99)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %100)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %101)
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %102)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %103)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %104)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %95)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %96)
  %308 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %309 = load ptr, ptr %159, align 8
  %310 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %309, 0
  %311 = load ptr, ptr %160, align 8
  %312 = insertvalue { ptr, ptr, ptr, i32 } %310, ptr %311, 1
  %313 = load ptr, ptr %161, align 8
  %314 = insertvalue { ptr, ptr, ptr, i32 } %312, ptr %313, 2
  %315 = load i32, ptr %162, align 4
  %316 = insertvalue { ptr, ptr, ptr, i32 } %314, i32 %315, 3
  %hash_coef_ptr.i.i51.i568.i = getelementptr i8, ptr %309, i64 8
  %tbl_size_ptr.i.i52.i569.i = getelementptr i8, ptr %309, i64 16
  %offset_tbl_ptr.i.i53.i570.i = getelementptr i8, ptr %309, i64 40
  %hash_coef.i.i54.i571.i = load i64, ptr %hash_coef_ptr.i.i51.i568.i, align 4
  %tbl_size.i.i55.i572.i = load i64, ptr %tbl_size_ptr.i.i52.i569.i, align 4
  %offset_tbl.i.i56.i573.i = load ptr, ptr %offset_tbl_ptr.i.i53.i570.i, align 8
  %product.i.i.i57.i574.i = mul i64 %hash_coef.i.i54.i571.i, -5261542750394134544
  %shifted.i.i.i58.i575.i = lshr i64 %product.i.i.i57.i574.i, 32
  %xored.i.i.i59.i576.i = xor i64 %shifted.i.i.i58.i575.i, %product.i.i.i57.i574.i
  %hash.i.i.i60.i577.i = and i64 %xored.i.i.i59.i576.i, %tbl_size.i.i55.i572.i
  %offset_ptr.i.i61.i578.i = getelementptr i32, ptr %offset_tbl.i.i56.i573.i, i64 %hash.i.i.i60.i577.i
  %offset.i.i62.i579.i = load i32, ptr %offset_ptr.i.i61.i578.i, align 4
  %eq.i.i580.i = icmp eq i32 %315, %offset.i.i62.i579.i
  call void @llvm.assume(i1 %eq.i.i580.i) #30
  %317 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %318 = call ptr @llvm.invariant.start.p0(i64 600, ptr %309)
  %319 = sext i32 %315 to i64
  %320 = getelementptr ptr, ptr %309, i64 %319
  %321 = getelementptr i8, ptr %320, i64 64
  %322 = load ptr, ptr %321, align 8
  %323 = call ptr %322({ ptr, ptr, ptr, i32 } %316, ptr nonnull %0)
  %324 = call i32 %323({ ptr, ptr, ptr, i32 } %316, { ptr, ptr, ptr, i32 } %316, ptr nonnull %0)
  %325 = add i32 %324, -1
  %326 = and i32 %325, %307
  %327 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  br label %328

328:                                              ; preds = %377, %293
  %spec.store.select.i615624.i = phi i32 [ %spec.store.select.i615.i, %377 ], [ -1, %293 ]
  %.0..0..0..i581.i = phi i32 [ %395, %377 ], [ %326, %293 ]
  %329 = load ptr, ptr %159, align 8
  %330 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %329, 0
  %331 = load ptr, ptr %160, align 8
  %332 = insertvalue { ptr, ptr, ptr, i32 } %330, ptr %331, 1
  %333 = load ptr, ptr %161, align 8
  %334 = insertvalue { ptr, ptr, ptr, i32 } %332, ptr %333, 2
  %335 = load i32, ptr %162, align 4
  %336 = insertvalue { ptr, ptr, ptr, i32 } %334, i32 %335, 3
  %hash_coef_ptr.i.i65.i582.i = getelementptr i8, ptr %329, i64 8
  %tbl_size_ptr.i.i66.i583.i = getelementptr i8, ptr %329, i64 16
  %offset_tbl_ptr.i.i67.i584.i = getelementptr i8, ptr %329, i64 40
  %hash_coef.i.i68.i585.i = load i64, ptr %hash_coef_ptr.i.i65.i582.i, align 4
  %tbl_size.i.i69.i586.i = load i64, ptr %tbl_size_ptr.i.i66.i583.i, align 4
  %offset_tbl.i.i70.i587.i = load ptr, ptr %offset_tbl_ptr.i.i67.i584.i, align 8
  %product.i.i.i71.i588.i = mul i64 %hash_coef.i.i68.i585.i, -5261542750394134544
  %shifted.i.i.i72.i589.i = lshr i64 %product.i.i.i71.i588.i, 32
  %xored.i.i.i73.i590.i = xor i64 %shifted.i.i.i72.i589.i, %product.i.i.i71.i588.i
  %hash.i.i.i74.i591.i = and i64 %xored.i.i.i73.i590.i, %tbl_size.i.i69.i586.i
  %offset_ptr.i.i75.i592.i = getelementptr i32, ptr %offset_tbl.i.i70.i587.i, i64 %hash.i.i.i74.i591.i
  %offset.i.i76.i593.i = load i32, ptr %offset_ptr.i.i75.i592.i, align 4
  %eq.i79.i594.i = icmp eq i32 %335, %offset.i.i76.i593.i
  call void @llvm.assume(i1 %eq.i79.i594.i) #30
  %337 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  store ptr @_parameterization_Ptri32, ptr %95, align 8
  %338 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %95)
  %339 = call ptr @llvm.invariant.start.p0(i64 600, ptr %329)
  %340 = sext i32 %335 to i64
  %341 = getelementptr ptr, ptr %329, i64 %340
  %342 = getelementptr i8, ptr %341, i64 120
  %343 = load ptr, ptr %342, align 8
  store ptr @i32_typ, ptr %96, align 8
  %344 = call ptr %343({ ptr, ptr, ptr, i32 } %336, ptr nonnull %96)
  %345 = call { ptr, i160 } %344({ ptr, ptr, ptr, i32 } %336, { ptr, ptr, ptr, i32 } %336, ptr nonnull %95, i32 %.0..0..0..i581.i)
  %.fca.0.extract36.i595.i = extractvalue { ptr, i160 } %345, 0
  %346 = icmp eq ptr %.fca.0.extract36.i595.i, @nil_typ
  %347 = icmp eq ptr %.fca.0.extract36.i595.i, null
  %348 = or i1 %346, %347
  br i1 %348, label %396, label %349

349:                                              ; preds = %328
  %.fca.1.extract38.i596.i = extractvalue { ptr, i160 } %345, 1
  %.sroa.5.8.extract.shift.i597.i = lshr i160 %.fca.1.extract38.i596.i, 64
  %.sroa.5.8.extract.trunc.i598.i = trunc i160 %.sroa.5.8.extract.shift.i597.i to i64
  %.sroa.2.8.extract.trunc165.i599.i = trunc i160 %.fca.1.extract38.i596.i to i64
  %350 = inttoptr i64 %.sroa.2.8.extract.trunc165.i599.i to ptr
  %351 = inttoptr i64 %.sroa.5.8.extract.trunc.i598.i to ptr
  %hash_coef_ptr.i.i81.i600.i = getelementptr i8, ptr %.fca.0.extract36.i595.i, i64 8
  %tbl_size_ptr.i.i82.i601.i = getelementptr i8, ptr %.fca.0.extract36.i595.i, i64 16
  %offset_tbl_ptr.i.i83.i602.i = getelementptr i8, ptr %.fca.0.extract36.i595.i, i64 40
  %hash_coef.i.i84.i603.i = load i64, ptr %hash_coef_ptr.i.i81.i600.i, align 4
  %tbl_size.i.i85.i604.i = load i64, ptr %tbl_size_ptr.i.i82.i601.i, align 4
  %offset_tbl.i.i86.i605.i = load ptr, ptr %offset_tbl_ptr.i.i83.i602.i, align 8
  %product.i.i.i87.i606.i = mul i64 %hash_coef.i.i84.i603.i, 4015701072841558310
  %shifted.i.i.i88.i607.i = lshr i64 %product.i.i.i87.i606.i, 32
  %xored.i.i.i89.i608.i = xor i64 %shifted.i.i.i88.i607.i, %product.i.i.i87.i606.i
  %hash.i.i.i90.i609.i = and i64 %xored.i.i.i89.i608.i, %tbl_size.i.i85.i604.i
  %offset_ptr.i.i91.i610.i = getelementptr i32, ptr %offset_tbl.i.i86.i605.i, i64 %hash.i.i.i90.i609.i
  %offset.i.i92.i611.i = load i32, ptr %offset_ptr.i.i91.i610.i, align 4
  %352 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract36.i595.i, 0
  %353 = insertvalue { ptr, ptr, ptr, i32 } %352, ptr %350, 1
  %354 = insertvalue { ptr, ptr, ptr, i32 } %353, ptr %351, 2
  %355 = insertvalue { ptr, ptr, ptr, i32 } %354, i32 %offset.i.i92.i611.i, 3
  %356 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %357 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %358 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i595.i)
  %359 = sext i32 %offset.i.i92.i611.i to i64
  %360 = getelementptr ptr, ptr %.fca.0.extract36.i595.i, i64 %359
  %361 = getelementptr i8, ptr %360, i64 64
  %362 = load ptr, ptr %361, align 8
  %363 = call ptr %362({ ptr, ptr, ptr, i32 } %355, ptr nonnull %0)
  %364 = call i32 %363({ ptr, ptr, ptr, i32 } %355, { ptr, ptr, ptr, i32 } %355, ptr nonnull %0)
  %365 = icmp eq i32 %364, %307
  %366 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %367 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %368 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i595.i)
  %369 = getelementptr i8, ptr %360, i64 48
  %370 = load ptr, ptr %369, align 8
  %371 = call ptr %370({ ptr, ptr, ptr, i32 } %355, ptr nonnull %0)
  %372 = call { ptr, i160 } %371({ ptr, ptr, ptr, i32 } %355, { ptr, ptr, ptr, i32 } %355, ptr nonnull %0)
  %373 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %374 = load ptr, ptr %147, align 8
  %375 = call i1 %374({ ptr, i160 } %372, { ptr, i160 } %300)
  %376 = and i1 %365, %375
  br i1 %376, label %HashMap_find_slot_keyK_hashPtri32.exit616.i, label %377

377:                                              ; preds = %349
  %378 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %379 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %380 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i595.i)
  %381 = getelementptr i8, ptr %360, i64 56
  %382 = load ptr, ptr %381, align 8
  %383 = call ptr %382({ ptr, ptr, ptr, i32 } %355, ptr nonnull %0)
  %384 = call { ptr, i160 } %383({ ptr, ptr, ptr, i32 } %355, { ptr, ptr, ptr, i32 } %355, ptr nonnull %0)
  %.fca.0.extract15.i612.i = extractvalue { ptr, i160 } %384, 0
  %385 = getelementptr i8, ptr %.fca.0.extract15.i612.i, i64 8
  %386 = getelementptr i8, ptr %.fca.0.extract15.i612.i, i64 16
  %387 = getelementptr i8, ptr %.fca.0.extract15.i612.i, i64 24
  %388 = getelementptr i8, ptr %.fca.0.extract15.i612.i, i64 32
  %389 = load i64, ptr %385, align 4
  %390 = load i64, ptr %386, align 4
  %391 = load ptr, ptr %387, align 8
  %392 = load ptr, ptr %388, align 8
  %result.i.i613.i = call i1 %391(i64 %390, i64 %389, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %392) #3
  %393 = icmp eq i32 %spec.store.select.i615624.i, -1
  %or.cond.i614.i = select i1 %result.i.i613.i, i1 %393, i1 false
  %spec.store.select.i615.i = select i1 %or.cond.i614.i, i32 %.0..0..0..i581.i, i32 %spec.store.select.i615624.i
  %394 = add i32 %.0..0..0..i581.i, 1
  %395 = and i32 %394, %325
  br label %328

396:                                              ; preds = %328
  %397 = icmp eq i32 %spec.store.select.i615624.i, -1
  %.pre638.i = select i1 %397, i32 %.0..0..0..i581.i, i32 %spec.store.select.i615624.i
  br label %HashMap_find_slot_keyK_hashPtri32.exit616.i

HashMap_find_slot_keyK_hashPtri32.exit616.i:      ; preds = %349, %396
  %398 = phi i32 [ %.pre638.i, %396 ], [ %.0..0..0..i581.i, %349 ]
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %95)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %96)
  %399 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %400 = load ptr, ptr %159, align 8
  %401 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %400, 0
  %402 = load ptr, ptr %160, align 8
  %403 = insertvalue { ptr, ptr, ptr, i32 } %401, ptr %402, 1
  %404 = load ptr, ptr %161, align 8
  %405 = insertvalue { ptr, ptr, ptr, i32 } %403, ptr %404, 2
  %406 = load i32, ptr %162, align 4
  %407 = insertvalue { ptr, ptr, ptr, i32 } %405, i32 %406, 3
  %hash_coef_ptr.i.i56.i390.i = getelementptr i8, ptr %400, i64 8
  %tbl_size_ptr.i.i57.i391.i = getelementptr i8, ptr %400, i64 16
  %offset_tbl_ptr.i.i58.i392.i = getelementptr i8, ptr %400, i64 40
  %hash_coef.i.i59.i393.i = load i64, ptr %hash_coef_ptr.i.i56.i390.i, align 4
  %tbl_size.i.i60.i394.i = load i64, ptr %tbl_size_ptr.i.i57.i391.i, align 4
  %offset_tbl.i.i61.i395.i = load ptr, ptr %offset_tbl_ptr.i.i58.i392.i, align 8
  %product.i.i.i62.i396.i = mul i64 %hash_coef.i.i59.i393.i, -5261542750394134544
  %shifted.i.i.i63.i397.i = lshr i64 %product.i.i.i62.i396.i, 32
  %xored.i.i.i64.i398.i = xor i64 %shifted.i.i.i63.i397.i, %product.i.i.i62.i396.i
  %hash.i.i.i65.i399.i = and i64 %xored.i.i.i64.i398.i, %tbl_size.i.i60.i394.i
  %offset_ptr.i.i66.i400.i = getelementptr i32, ptr %offset_tbl.i.i61.i395.i, i64 %hash.i.i.i65.i399.i
  %offset.i.i67.i401.i = load i32, ptr %offset_ptr.i.i66.i400.i, align 4
  %eq.i.i402.i = icmp eq i32 %406, %offset.i.i67.i401.i
  call void @llvm.assume(i1 %eq.i.i402.i) #30
  store ptr @_parameterization_Ptri32, ptr %99, align 8
  %408 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %99)
  %409 = call ptr @llvm.invariant.start.p0(i64 600, ptr %400)
  %410 = sext i32 %406 to i64
  %411 = getelementptr ptr, ptr %400, i64 %410
  %412 = getelementptr i8, ptr %411, i64 120
  %413 = load ptr, ptr %412, align 8
  store ptr @i32_typ, ptr %100, align 8
  %414 = call ptr %413({ ptr, ptr, ptr, i32 } %407, ptr nonnull %100)
  %415 = call { ptr, i160 } %414({ ptr, ptr, ptr, i32 } %407, { ptr, ptr, ptr, i32 } %407, ptr nonnull %99, i32 %398)
  %.fca.0.extract2.i403.i = extractvalue { ptr, i160 } %415, 0
  %416 = load ptr, ptr %result.i.i3, align 8
  %417 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %418 = load ptr, ptr %141, align 8
  %419 = load ptr, ptr %416, align 8
  %420 = getelementptr i8, ptr %419, i64 48
  %421 = load ptr, ptr %420, align 8
  %422 = call { i64, i64 } %421(ptr nonnull %416)
  %423 = extractvalue { i64, i64 } %422, 0
  %424 = extractvalue { i64, i64 } %422, 1
  %425 = call i64 @llvm.umax.i64(i64 %424, i64 8)
  %426 = urem i64 16, %424
  %427 = icmp eq i64 %426, 0
  %428 = sub i64 %424, %426
  %429 = select i1 %427, i64 0, i64 %428
  %430 = add i64 %429, %423
  %431 = add i64 %430, 16
  %432 = and i64 %430, 7
  %433 = icmp eq i64 %432, 0
  %434 = sub nuw nsw i64 40, %432
  %435 = select i1 %433, i64 32, i64 %434
  %436 = add i64 %431, %435
  %437 = and i64 %436, 3
  %438 = icmp eq i64 %437, 0
  %439 = sub nuw nsw i64 8, %437
  %440 = select i1 %438, i64 4, i64 %439
  %441 = add i64 %440, %436
  %442 = urem i64 %441, %425
  %443 = icmp eq i64 %442, 0
  %444 = sub i64 %425, %442
  %445 = select i1 %443, i64 0, i64 %444
  %446 = add i64 %441, %445
  %result.i.i404.i = call noalias ptr @bump_malloc_inner(i64 noundef %446, ptr nonnull @current_ptr) #29
  store ptr %416, ptr %result.i.i404.i, align 8
  %447 = getelementptr i8, ptr %result.i.i404.i, i64 8
  store ptr %418, ptr %447, align 8
  %448 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i.i404.i)
  store ptr @Entry, ptr %101, align 8
  store ptr %result.i.i404.i, ptr %172, align 8
  store i32 9, ptr %173, align 8
  %449 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %101)
  %450 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Entry, ptr undef, ptr undef, i32 undef }, ptr %result.i.i404.i, 1
  %451 = insertvalue { ptr, ptr, ptr, i32 } %450, ptr undef, 2
  %452 = insertvalue { ptr, ptr, ptr, i32 } %451, i32 9, 3
  %453 = load ptr, ptr %result.i.i3, align 8
  %454 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %455 = load ptr, ptr %141, align 8
  store ptr %453, ptr %102, align 8
  store ptr %455, ptr %175, align 8
  store ptr @_parameterization_Ptri32, ptr %176, align 8
  %456 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %102)
  %457 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %458 = load i64, ptr %284, align 4
  %459 = load i64, ptr %285, align 4
  %460 = load ptr, ptr %286, align 8
  %461 = load ptr, ptr %287, align 8
  %result.i.i.i405.i = call i1 %460(i64 %459, i64 %458, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr readonly %461) #3
  %462 = select i1 %result.i.i.i405.i, i64 10, i64 9
  %gep.i = getelementptr [14 x ptr], ptr getelementptr inbounds (i8, ptr @Entry, i64 72), i64 0, i64 %462
  %463 = load ptr, ptr %gep.i, align 8
  call void %463({ ptr, ptr, ptr, i32 } %452, { ptr, ptr, ptr, i32 } %452, ptr nonnull %102, { ptr, i160 } %300, { ptr, i160 } %283, i32 %307)
  %464 = load ptr, ptr %174, align 8
  %465 = ptrtoint ptr %result.i.i404.i to i64
  %466 = ptrtoint ptr %464 to i64
  %.sroa.2.0.insert.ext.i406.i = zext i64 %466 to i160
  %.sroa.2.0.insert.shift.i407.i = shl nuw nsw i160 %.sroa.2.0.insert.ext.i406.i, 64
  %.sroa.0.0.insert.ext.i409.i = zext i64 %465 to i160
  %.sroa.2.0.insert.insert.i408.i = or disjoint i160 %.sroa.2.0.insert.shift.i407.i, %.sroa.0.0.insert.ext.i409.i
  %.sroa.0.0.insert.insert.i410.i = or disjoint i160 %.sroa.2.0.insert.insert.i408.i, 3062541302288446171170371466885913903104
  %467 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0.0.insert.insert.i410.i, 1
  %468 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %469 = load ptr, ptr %159, align 8
  %470 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %469, 0
  %471 = load ptr, ptr %160, align 8
  %472 = insertvalue { ptr, ptr, ptr, i32 } %470, ptr %471, 1
  %473 = load ptr, ptr %161, align 8
  %474 = insertvalue { ptr, ptr, ptr, i32 } %472, ptr %473, 2
  %475 = load i32, ptr %162, align 4
  %476 = insertvalue { ptr, ptr, ptr, i32 } %474, i32 %475, 3
  %hash_coef_ptr.i.i84.i411.i = getelementptr i8, ptr %469, i64 8
  %tbl_size_ptr.i.i85.i412.i = getelementptr i8, ptr %469, i64 16
  %offset_tbl_ptr.i.i86.i413.i = getelementptr i8, ptr %469, i64 40
  %hash_coef.i.i87.i414.i = load i64, ptr %hash_coef_ptr.i.i84.i411.i, align 4
  %tbl_size.i.i88.i415.i = load i64, ptr %tbl_size_ptr.i.i85.i412.i, align 4
  %offset_tbl.i.i89.i416.i = load ptr, ptr %offset_tbl_ptr.i.i86.i413.i, align 8
  %product.i.i.i90.i417.i = mul i64 %hash_coef.i.i87.i414.i, -5261542750394134544
  %shifted.i.i.i91.i418.i = lshr i64 %product.i.i.i90.i417.i, 32
  %xored.i.i.i92.i419.i = xor i64 %shifted.i.i.i91.i418.i, %product.i.i.i90.i417.i
  %hash.i.i.i93.i420.i = and i64 %xored.i.i.i92.i419.i, %tbl_size.i.i88.i415.i
  %offset_ptr.i.i94.i421.i = getelementptr i32, ptr %offset_tbl.i.i89.i416.i, i64 %hash.i.i.i93.i420.i
  %offset.i.i95.i422.i = load i32, ptr %offset_ptr.i.i94.i421.i, align 4
  %eq.i98.i423.i = icmp eq i32 %475, %offset.i.i95.i422.i
  call void @llvm.assume(i1 %eq.i98.i423.i) #30
  %477 = load ptr, ptr %result.i.i3, align 8
  %478 = load ptr, ptr %141, align 8
  %result.i99.i424.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %479 = getelementptr i8, ptr %result.i99.i424.i, i64 16
  store ptr %478, ptr %479, align 8
  %480 = getelementptr i8, ptr %result.i99.i424.i, i64 8
  store ptr %477, ptr %480, align 8
  %481 = getelementptr i8, ptr %result.i99.i424.i, i64 24
  store ptr null, ptr %481, align 8
  %482 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i99.i424.i)
  store ptr @Entry, ptr %result.i99.i424.i, align 8
  store ptr @_parameterization_Ptri32, ptr %103, align 8
  store ptr %result.i99.i424.i, ptr %177, align 8
  %483 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %103)
  %484 = call ptr @llvm.invariant.start.p0(i64 600, ptr %469)
  %485 = sext i32 %475 to i64
  %486 = getelementptr ptr, ptr %469, i64 %485
  %487 = getelementptr i8, ptr %486, i64 128
  %488 = load ptr, ptr %487, align 8
  store ptr @i32_typ, ptr %104, align 8
  store ptr @Entry, ptr %178, align 8
  %489 = call ptr %488({ ptr, ptr, ptr, i32 } %476, ptr nonnull %104)
  call void %489({ ptr, ptr, ptr, i32 } %476, { ptr, ptr, ptr, i32 } %476, ptr nonnull %103, i32 %398, { ptr, i160 } %467)
  %490 = icmp eq ptr %.fca.0.extract2.i403.i, @nil_typ
  %491 = icmp eq ptr %.fca.0.extract2.i403.i, null
  %492 = or i1 %490, %491
  br i1 %492, label %._crit_edge.thread.i446.i, label %._crit_edge.i425.i

._crit_edge.thread.i446.i:                        ; preds = %HashMap_find_slot_keyK_hashPtri32.exit616.i
  %493 = load i32, ptr %163, align 4
  %494 = add i32 %493, 1
  store i32 %494, ptr %163, align 4
  br label %._crit_edge1.sink.split.i444.i

._crit_edge.i425.i:                               ; preds = %HashMap_find_slot_keyK_hashPtri32.exit616.i
  %.fca.1.extract4.i426.i = extractvalue { ptr, i160 } %415, 1
  %.sroa.3192.8.extract.trunc.i427.i = trunc i160 %.fca.1.extract4.i426.i to i64
  %495 = inttoptr i64 %.sroa.3192.8.extract.trunc.i427.i to ptr
  %.sroa.5193.8.extract.shift.i428.i = lshr i160 %.fca.1.extract4.i426.i, 64
  %.sroa.5193.8.extract.trunc.i429.i = trunc i160 %.sroa.5193.8.extract.shift.i428.i to i64
  %496 = inttoptr i64 %.sroa.5193.8.extract.trunc.i429.i to ptr
  %hash_coef_ptr.i.i101.i430.i = getelementptr i8, ptr %.fca.0.extract2.i403.i, i64 8
  %tbl_size_ptr.i.i102.i431.i = getelementptr i8, ptr %.fca.0.extract2.i403.i, i64 16
  %offset_tbl_ptr.i.i103.i432.i = getelementptr i8, ptr %.fca.0.extract2.i403.i, i64 40
  %hash_coef.i.i104.i433.i = load i64, ptr %hash_coef_ptr.i.i101.i430.i, align 4
  %tbl_size.i.i105.i434.i = load i64, ptr %tbl_size_ptr.i.i102.i431.i, align 4
  %offset_tbl.i.i106.i435.i = load ptr, ptr %offset_tbl_ptr.i.i103.i432.i, align 8
  %product.i.i.i107.i436.i = mul i64 %hash_coef.i.i104.i433.i, 4015701072841558310
  %shifted.i.i.i108.i437.i = lshr i64 %product.i.i.i107.i436.i, 32
  %xored.i.i.i109.i438.i = xor i64 %shifted.i.i.i108.i437.i, %product.i.i.i107.i436.i
  %hash.i.i.i110.i439.i = and i64 %xored.i.i.i109.i438.i, %tbl_size.i.i105.i434.i
  %offset_ptr.i.i111.i440.i = getelementptr i32, ptr %offset_tbl.i.i106.i435.i, i64 %hash.i.i.i110.i439.i
  %offset.i.i112.i441.i = load i32, ptr %offset_ptr.i.i111.i440.i, align 4
  %497 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract2.i403.i, 0
  %498 = insertvalue { ptr, ptr, ptr, i32 } %497, ptr %495, 1
  %499 = insertvalue { ptr, ptr, ptr, i32 } %498, ptr %496, 2
  %500 = insertvalue { ptr, ptr, ptr, i32 } %499, i32 %offset.i.i112.i441.i, 3
  %501 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %502 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %503 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract2.i403.i)
  %504 = sext i32 %offset.i.i112.i441.i to i64
  %505 = getelementptr ptr, ptr %.fca.0.extract2.i403.i, i64 %504
  %506 = getelementptr i8, ptr %505, i64 56
  %507 = load ptr, ptr %506, align 8
  %508 = call ptr %507({ ptr, ptr, ptr, i32 } %500, ptr nonnull %0)
  %509 = call { ptr, i160 } %508({ ptr, ptr, ptr, i32 } %500, { ptr, ptr, ptr, i32 } %500, ptr nonnull %0)
  %.fca.0.extract45.i442.i = extractvalue { ptr, i160 } %509, 0
  %510 = getelementptr i8, ptr %.fca.0.extract45.i442.i, i64 8
  %511 = getelementptr i8, ptr %.fca.0.extract45.i442.i, i64 16
  %512 = getelementptr i8, ptr %.fca.0.extract45.i442.i, i64 24
  %513 = getelementptr i8, ptr %.fca.0.extract45.i442.i, i64 32
  %514 = load i64, ptr %510, align 4
  %515 = load i64, ptr %511, align 4
  %516 = load ptr, ptr %512, align 8
  %517 = load ptr, ptr %513, align 8
  %result.i114.i443.i = call i1 %516(i64 %515, i64 %514, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %517) #3
  br i1 %result.i114.i443.i, label %._crit_edge1.sink.split.i444.i, label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit447.i

._crit_edge1.sink.split.i444.i:                   ; preds = %._crit_edge.i425.i, %._crit_edge.thread.i446.i
  %.sink202.i445.i = phi i64 [ 40, %._crit_edge.thread.i446.i ], [ 32, %._crit_edge.i425.i ]
  %518 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %519 = getelementptr i8, ptr getelementptr inbounds (i8, ptr @HashMap, i64 72), i64 %.sink202.i445.i
  %520 = load ptr, ptr %519, align 8
  %521 = load ptr, ptr %520, align 8
  %522 = call i32 %521(ptr nonnull %result.i.i3)
  %523 = add i32 %522, 1
  %524 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %525 = getelementptr i8, ptr %520, i64 8
  %526 = load ptr, ptr %525, align 8
  call void %526(ptr nonnull %result.i.i3, i32 %523)
  br label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit447.i

HashMap_insert_internal_keyK_valueV_hashPtri32.exit447.i: ; preds = %._crit_edge1.sink.split.i444.i, %._crit_edge.i425.i
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %99)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %100)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %101)
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %102)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %103)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %104)
  br label %._crit_edge3.i.i

._crit_edge3.i.i:                                 ; preds = %HashMap_insert_internal_keyK_valueV_hashPtri32.exit447.i, %292, %268, %260
  %527 = add nuw nsw i32 %.reg2mem31.0.i360.i, 1
  %528 = load ptr, ptr %gep.i359.i, align 8
  %529 = call ptr %528({ ptr, ptr, ptr, i32 } %233, ptr nonnull %0)
  %530 = call i32 %529({ ptr, ptr, ptr, i32 } %233, { ptr, ptr, ptr, i32 } %233, ptr nonnull %0)
  %531 = icmp slt i32 %527, %530
  br i1 %531, label %260, label %HashMap_resize_new_capacityPtri32.exit.i

HashMap_resize_new_capacityPtri32.exit.i:         ; preds = %._crit_edge3.i.i, %222
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %112)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %113)
  br label %HashMap_insert_keyK_valueV.exit.i

HashMap_insert_keyK_valueV.exit.i:                ; preds = %HashMap_resize_new_capacityPtri32.exit.i, %._crit_edge.i
  %532 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %533 = load ptr, ptr %146, align 8
  %534 = call i32 %533({ ptr, i160 } %180)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %107)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %108)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %109)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %110)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %111)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %97)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %98)
  %535 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %536 = load ptr, ptr %159, align 8
  %537 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %536, 0
  %538 = load ptr, ptr %160, align 8
  %539 = insertvalue { ptr, ptr, ptr, i32 } %537, ptr %538, 1
  %540 = load ptr, ptr %161, align 8
  %541 = insertvalue { ptr, ptr, ptr, i32 } %539, ptr %540, 2
  %542 = load i32, ptr %162, align 4
  %543 = insertvalue { ptr, ptr, ptr, i32 } %541, i32 %542, 3
  %hash_coef_ptr.i.i51.i464.i = getelementptr i8, ptr %536, i64 8
  %tbl_size_ptr.i.i52.i465.i = getelementptr i8, ptr %536, i64 16
  %offset_tbl_ptr.i.i53.i466.i = getelementptr i8, ptr %536, i64 40
  %hash_coef.i.i54.i467.i = load i64, ptr %hash_coef_ptr.i.i51.i464.i, align 4
  %tbl_size.i.i55.i468.i = load i64, ptr %tbl_size_ptr.i.i52.i465.i, align 4
  %offset_tbl.i.i56.i469.i = load ptr, ptr %offset_tbl_ptr.i.i53.i466.i, align 8
  %product.i.i.i57.i470.i = mul i64 %hash_coef.i.i54.i467.i, -5261542750394134544
  %shifted.i.i.i58.i471.i = lshr i64 %product.i.i.i57.i470.i, 32
  %xored.i.i.i59.i472.i = xor i64 %shifted.i.i.i58.i471.i, %product.i.i.i57.i470.i
  %hash.i.i.i60.i473.i = and i64 %xored.i.i.i59.i472.i, %tbl_size.i.i55.i468.i
  %offset_ptr.i.i61.i474.i = getelementptr i32, ptr %offset_tbl.i.i56.i469.i, i64 %hash.i.i.i60.i473.i
  %offset.i.i62.i475.i = load i32, ptr %offset_ptr.i.i61.i474.i, align 4
  %eq.i.i476.i = icmp eq i32 %542, %offset.i.i62.i475.i
  call void @llvm.assume(i1 %eq.i.i476.i) #30
  %544 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %545 = call ptr @llvm.invariant.start.p0(i64 600, ptr %536)
  %546 = sext i32 %542 to i64
  %547 = getelementptr ptr, ptr %536, i64 %546
  %548 = getelementptr i8, ptr %547, i64 64
  %549 = load ptr, ptr %548, align 8
  %550 = call ptr %549({ ptr, ptr, ptr, i32 } %543, ptr nonnull %0)
  %551 = call i32 %550({ ptr, ptr, ptr, i32 } %543, { ptr, ptr, ptr, i32 } %543, ptr nonnull %0)
  %552 = add i32 %551, -1
  %553 = and i32 %552, %534
  %554 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  br label %555

555:                                              ; preds = %604, %HashMap_insert_keyK_valueV.exit.i
  %spec.store.select.i511531.i = phi i32 [ %spec.store.select.i511.i, %604 ], [ -1, %HashMap_insert_keyK_valueV.exit.i ]
  %.0..0..0..i477.i = phi i32 [ %622, %604 ], [ %553, %HashMap_insert_keyK_valueV.exit.i ]
  %556 = load ptr, ptr %159, align 8
  %557 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %556, 0
  %558 = load ptr, ptr %160, align 8
  %559 = insertvalue { ptr, ptr, ptr, i32 } %557, ptr %558, 1
  %560 = load ptr, ptr %161, align 8
  %561 = insertvalue { ptr, ptr, ptr, i32 } %559, ptr %560, 2
  %562 = load i32, ptr %162, align 4
  %563 = insertvalue { ptr, ptr, ptr, i32 } %561, i32 %562, 3
  %hash_coef_ptr.i.i65.i478.i = getelementptr i8, ptr %556, i64 8
  %tbl_size_ptr.i.i66.i479.i = getelementptr i8, ptr %556, i64 16
  %offset_tbl_ptr.i.i67.i480.i = getelementptr i8, ptr %556, i64 40
  %hash_coef.i.i68.i481.i = load i64, ptr %hash_coef_ptr.i.i65.i478.i, align 4
  %tbl_size.i.i69.i482.i = load i64, ptr %tbl_size_ptr.i.i66.i479.i, align 4
  %offset_tbl.i.i70.i483.i = load ptr, ptr %offset_tbl_ptr.i.i67.i480.i, align 8
  %product.i.i.i71.i484.i = mul i64 %hash_coef.i.i68.i481.i, -5261542750394134544
  %shifted.i.i.i72.i485.i = lshr i64 %product.i.i.i71.i484.i, 32
  %xored.i.i.i73.i486.i = xor i64 %shifted.i.i.i72.i485.i, %product.i.i.i71.i484.i
  %hash.i.i.i74.i487.i = and i64 %xored.i.i.i73.i486.i, %tbl_size.i.i69.i482.i
  %offset_ptr.i.i75.i488.i = getelementptr i32, ptr %offset_tbl.i.i70.i483.i, i64 %hash.i.i.i74.i487.i
  %offset.i.i76.i489.i = load i32, ptr %offset_ptr.i.i75.i488.i, align 4
  %eq.i79.i490.i = icmp eq i32 %562, %offset.i.i76.i489.i
  call void @llvm.assume(i1 %eq.i79.i490.i) #30
  %564 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  store ptr @_parameterization_Ptri32, ptr %97, align 8
  %565 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %97)
  %566 = call ptr @llvm.invariant.start.p0(i64 600, ptr %556)
  %567 = sext i32 %562 to i64
  %568 = getelementptr ptr, ptr %556, i64 %567
  %569 = getelementptr i8, ptr %568, i64 120
  %570 = load ptr, ptr %569, align 8
  store ptr @i32_typ, ptr %98, align 8
  %571 = call ptr %570({ ptr, ptr, ptr, i32 } %563, ptr nonnull %98)
  %572 = call { ptr, i160 } %571({ ptr, ptr, ptr, i32 } %563, { ptr, ptr, ptr, i32 } %563, ptr nonnull %97, i32 %.0..0..0..i477.i)
  %.fca.0.extract36.i491.i = extractvalue { ptr, i160 } %572, 0
  %573 = icmp eq ptr %.fca.0.extract36.i491.i, @nil_typ
  %574 = icmp eq ptr %.fca.0.extract36.i491.i, null
  %575 = or i1 %573, %574
  br i1 %575, label %623, label %576

576:                                              ; preds = %555
  %.fca.1.extract38.i492.i = extractvalue { ptr, i160 } %572, 1
  %.sroa.5.8.extract.shift.i493.i = lshr i160 %.fca.1.extract38.i492.i, 64
  %.sroa.5.8.extract.trunc.i494.i = trunc i160 %.sroa.5.8.extract.shift.i493.i to i64
  %.sroa.2.8.extract.trunc165.i495.i = trunc i160 %.fca.1.extract38.i492.i to i64
  %577 = inttoptr i64 %.sroa.2.8.extract.trunc165.i495.i to ptr
  %578 = inttoptr i64 %.sroa.5.8.extract.trunc.i494.i to ptr
  %hash_coef_ptr.i.i81.i496.i = getelementptr i8, ptr %.fca.0.extract36.i491.i, i64 8
  %tbl_size_ptr.i.i82.i497.i = getelementptr i8, ptr %.fca.0.extract36.i491.i, i64 16
  %offset_tbl_ptr.i.i83.i498.i = getelementptr i8, ptr %.fca.0.extract36.i491.i, i64 40
  %hash_coef.i.i84.i499.i = load i64, ptr %hash_coef_ptr.i.i81.i496.i, align 4
  %tbl_size.i.i85.i500.i = load i64, ptr %tbl_size_ptr.i.i82.i497.i, align 4
  %offset_tbl.i.i86.i501.i = load ptr, ptr %offset_tbl_ptr.i.i83.i498.i, align 8
  %product.i.i.i87.i502.i = mul i64 %hash_coef.i.i84.i499.i, 4015701072841558310
  %shifted.i.i.i88.i503.i = lshr i64 %product.i.i.i87.i502.i, 32
  %xored.i.i.i89.i504.i = xor i64 %shifted.i.i.i88.i503.i, %product.i.i.i87.i502.i
  %hash.i.i.i90.i505.i = and i64 %xored.i.i.i89.i504.i, %tbl_size.i.i85.i500.i
  %offset_ptr.i.i91.i506.i = getelementptr i32, ptr %offset_tbl.i.i86.i501.i, i64 %hash.i.i.i90.i505.i
  %offset.i.i92.i507.i = load i32, ptr %offset_ptr.i.i91.i506.i, align 4
  %579 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract36.i491.i, 0
  %580 = insertvalue { ptr, ptr, ptr, i32 } %579, ptr %577, 1
  %581 = insertvalue { ptr, ptr, ptr, i32 } %580, ptr %578, 2
  %582 = insertvalue { ptr, ptr, ptr, i32 } %581, i32 %offset.i.i92.i507.i, 3
  %583 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %584 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %585 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i491.i)
  %586 = sext i32 %offset.i.i92.i507.i to i64
  %587 = getelementptr ptr, ptr %.fca.0.extract36.i491.i, i64 %586
  %588 = getelementptr i8, ptr %587, i64 64
  %589 = load ptr, ptr %588, align 8
  %590 = call ptr %589({ ptr, ptr, ptr, i32 } %582, ptr nonnull %0)
  %591 = call i32 %590({ ptr, ptr, ptr, i32 } %582, { ptr, ptr, ptr, i32 } %582, ptr nonnull %0)
  %592 = icmp eq i32 %591, %534
  %593 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %594 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %595 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i491.i)
  %596 = getelementptr i8, ptr %587, i64 48
  %597 = load ptr, ptr %596, align 8
  %598 = call ptr %597({ ptr, ptr, ptr, i32 } %582, ptr nonnull %0)
  %599 = call { ptr, i160 } %598({ ptr, ptr, ptr, i32 } %582, { ptr, ptr, ptr, i32 } %582, ptr nonnull %0)
  %600 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %601 = load ptr, ptr %147, align 8
  %602 = call i1 %601({ ptr, i160 } %599, { ptr, i160 } %180)
  %603 = and i1 %592, %602
  br i1 %603, label %HashMap_find_slot_keyK_hashPtri32.exit512.i, label %604

604:                                              ; preds = %576
  %605 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %606 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %607 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i491.i)
  %608 = getelementptr i8, ptr %587, i64 56
  %609 = load ptr, ptr %608, align 8
  %610 = call ptr %609({ ptr, ptr, ptr, i32 } %582, ptr nonnull %0)
  %611 = call { ptr, i160 } %610({ ptr, ptr, ptr, i32 } %582, { ptr, ptr, ptr, i32 } %582, ptr nonnull %0)
  %.fca.0.extract15.i.i = extractvalue { ptr, i160 } %611, 0
  %612 = getelementptr i8, ptr %.fca.0.extract15.i.i, i64 8
  %613 = getelementptr i8, ptr %.fca.0.extract15.i.i, i64 16
  %614 = getelementptr i8, ptr %.fca.0.extract15.i.i, i64 24
  %615 = getelementptr i8, ptr %.fca.0.extract15.i.i, i64 32
  %616 = load i64, ptr %612, align 4
  %617 = load i64, ptr %613, align 4
  %618 = load ptr, ptr %614, align 8
  %619 = load ptr, ptr %615, align 8
  %result.i.i509.i = call i1 %618(i64 %617, i64 %616, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %619) #3
  %620 = icmp eq i32 %spec.store.select.i511531.i, -1
  %or.cond.i510.i = select i1 %result.i.i509.i, i1 %620, i1 false
  %spec.store.select.i511.i = select i1 %or.cond.i510.i, i32 %.0..0..0..i477.i, i32 %spec.store.select.i511531.i
  %621 = add i32 %.0..0..0..i477.i, 1
  %622 = and i32 %621, %552
  br label %555

623:                                              ; preds = %555
  %624 = icmp eq i32 %spec.store.select.i511531.i, -1
  %.pre542.i = select i1 %624, i32 %.0..0..0..i477.i, i32 %spec.store.select.i511531.i
  br label %HashMap_find_slot_keyK_hashPtri32.exit512.i

HashMap_find_slot_keyK_hashPtri32.exit512.i:      ; preds = %576, %623
  %625 = phi i32 [ %.pre542.i, %623 ], [ %.0..0..0..i477.i, %576 ]
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %97)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %98)
  %626 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %627 = load ptr, ptr %159, align 8
  %628 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %627, 0
  %629 = load ptr, ptr %160, align 8
  %630 = insertvalue { ptr, ptr, ptr, i32 } %628, ptr %629, 1
  %631 = load ptr, ptr %161, align 8
  %632 = insertvalue { ptr, ptr, ptr, i32 } %630, ptr %631, 2
  %633 = load i32, ptr %162, align 4
  %634 = insertvalue { ptr, ptr, ptr, i32 } %632, i32 %633, 3
  %hash_coef_ptr.i.i56.i278.i = getelementptr i8, ptr %627, i64 8
  %tbl_size_ptr.i.i57.i279.i = getelementptr i8, ptr %627, i64 16
  %offset_tbl_ptr.i.i58.i280.i = getelementptr i8, ptr %627, i64 40
  %hash_coef.i.i59.i281.i = load i64, ptr %hash_coef_ptr.i.i56.i278.i, align 4
  %tbl_size.i.i60.i282.i = load i64, ptr %tbl_size_ptr.i.i57.i279.i, align 4
  %offset_tbl.i.i61.i283.i = load ptr, ptr %offset_tbl_ptr.i.i58.i280.i, align 8
  %product.i.i.i62.i284.i = mul i64 %hash_coef.i.i59.i281.i, -5261542750394134544
  %shifted.i.i.i63.i285.i = lshr i64 %product.i.i.i62.i284.i, 32
  %xored.i.i.i64.i286.i = xor i64 %shifted.i.i.i63.i285.i, %product.i.i.i62.i284.i
  %hash.i.i.i65.i287.i = and i64 %xored.i.i.i64.i286.i, %tbl_size.i.i60.i282.i
  %offset_ptr.i.i66.i288.i = getelementptr i32, ptr %offset_tbl.i.i61.i283.i, i64 %hash.i.i.i65.i287.i
  %offset.i.i67.i289.i = load i32, ptr %offset_ptr.i.i66.i288.i, align 4
  %eq.i.i290.i = icmp eq i32 %633, %offset.i.i67.i289.i
  call void @llvm.assume(i1 %eq.i.i290.i) #30
  store ptr @_parameterization_Ptri32, ptr %107, align 8
  %635 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %107)
  %636 = call ptr @llvm.invariant.start.p0(i64 600, ptr %627)
  %637 = sext i32 %633 to i64
  %638 = getelementptr ptr, ptr %627, i64 %637
  %639 = getelementptr i8, ptr %638, i64 120
  %640 = load ptr, ptr %639, align 8
  store ptr @i32_typ, ptr %108, align 8
  %641 = call ptr %640({ ptr, ptr, ptr, i32 } %634, ptr nonnull %108)
  %642 = call { ptr, i160 } %641({ ptr, ptr, ptr, i32 } %634, { ptr, ptr, ptr, i32 } %634, ptr nonnull %107, i32 %625)
  %.fca.0.extract2.i.i = extractvalue { ptr, i160 } %642, 0
  %643 = load ptr, ptr %result.i.i3, align 8
  %644 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %645 = load ptr, ptr %141, align 8
  %646 = load ptr, ptr %643, align 8
  %647 = getelementptr i8, ptr %646, i64 48
  %648 = load ptr, ptr %647, align 8
  %649 = call { i64, i64 } %648(ptr nonnull %643)
  %650 = extractvalue { i64, i64 } %649, 0
  %651 = extractvalue { i64, i64 } %649, 1
  %652 = call i64 @llvm.umax.i64(i64 %651, i64 8)
  %653 = urem i64 16, %651
  %654 = icmp eq i64 %653, 0
  %655 = sub i64 %651, %653
  %656 = select i1 %654, i64 0, i64 %655
  %657 = add i64 %656, %650
  %658 = add i64 %657, 16
  %659 = and i64 %657, 7
  %660 = icmp eq i64 %659, 0
  %661 = sub nuw nsw i64 40, %659
  %662 = select i1 %660, i64 32, i64 %661
  %663 = add i64 %658, %662
  %664 = and i64 %663, 3
  %665 = icmp eq i64 %664, 0
  %666 = sub nuw nsw i64 8, %664
  %667 = select i1 %665, i64 4, i64 %666
  %668 = add i64 %667, %663
  %669 = urem i64 %668, %652
  %670 = icmp eq i64 %669, 0
  %671 = sub i64 %652, %669
  %672 = select i1 %670, i64 0, i64 %671
  %673 = add i64 %668, %672
  %result.i.i291.i = call noalias ptr @bump_malloc_inner(i64 noundef %673, ptr nonnull @current_ptr) #29
  store ptr %643, ptr %result.i.i291.i, align 8
  %674 = getelementptr i8, ptr %result.i.i291.i, i64 8
  store ptr %645, ptr %674, align 8
  %675 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i.i291.i)
  store ptr @Entry, ptr %109, align 8
  store ptr %result.i.i291.i, ptr %167, align 8
  store i32 9, ptr %168, align 8
  %676 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %109)
  %677 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %678 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %679 = load ptr, ptr %643, align 8
  %680 = getelementptr i8, ptr %679, i64 48
  %681 = load ptr, ptr %680, align 8
  %682 = call { i64, i64 } %681(ptr nonnull %643)
  %683 = extractvalue { i64, i64 } %682, 1
  %684 = urem i64 16, %683
  %685 = icmp eq i64 %684, 0
  %reass.sub1541 = sub i64 %683, %684
  %686 = add i64 %reass.sub1541, 16
  %687 = select i1 %685, i64 16, i64 %686
  %688 = getelementptr i8, ptr %result.i.i291.i, i64 %687
  %689 = load ptr, ptr %result.i.i291.i, align 8
  %690 = load ptr, ptr %689, align 8
  %691 = getelementptr i8, ptr %690, i64 64
  %692 = load ptr, ptr %691, align 8
  call void %692({ ptr, i160 } %180, ptr nonnull %689, ptr %688)
  %693 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %694 = load ptr, ptr %result.i.i291.i, align 8
  %695 = load ptr, ptr %694, align 8
  %696 = getelementptr i8, ptr %695, i64 48
  %697 = load ptr, ptr %696, align 8
  %698 = call { i64, i64 } %697(ptr nonnull %694)
  %699 = extractvalue { i64, i64 } %698, 0
  %700 = extractvalue { i64, i64 } %698, 1
  %701 = urem i64 16, %700
  %702 = icmp eq i64 %701, 0
  %703 = sub i64 %700, %701
  %704 = select i1 %702, i64 0, i64 %703
  %705 = add i64 %704, %699
  %706 = and i64 %705, 7
  %707 = icmp eq i64 %706, 0
  %708 = sub nuw nsw i64 8, %706
  %709 = select i1 %707, i64 0, i64 %708
  %710 = getelementptr i8, ptr %result.i.i291.i, i64 %705
  %711 = getelementptr i8, ptr %710, i64 16
  %712 = getelementptr i8, ptr %711, i64 %709
  store ptr @i32_typ, ptr %712, align 8
  %713 = getelementptr i8, ptr %712, i64 8
  store i160 %.sroa.017.0.insert.ext.i, ptr %713, align 4
  %714 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %715 = load ptr, ptr %result.i.i291.i, align 8
  %716 = load ptr, ptr %715, align 8
  %717 = getelementptr i8, ptr %716, i64 48
  %718 = load ptr, ptr %717, align 8
  %719 = call { i64, i64 } %718(ptr nonnull %715)
  %720 = extractvalue { i64, i64 } %719, 0
  %721 = extractvalue { i64, i64 } %719, 1
  %722 = urem i64 16, %721
  %723 = icmp eq i64 %722, 0
  %724 = sub i64 %721, %722
  %725 = select i1 %723, i64 0, i64 %724
  %726 = add i64 %725, %720
  %727 = add i64 %726, 16
  %728 = and i64 %726, 7
  %729 = icmp eq i64 %728, 0
  %730 = sub nuw nsw i64 40, %728
  %731 = select i1 %729, i64 32, i64 %730
  %732 = add i64 %727, %731
  %733 = and i64 %732, 3
  %734 = icmp eq i64 %733, 0
  %735 = sub nuw nsw i64 4, %733
  %736 = select i1 %734, i64 0, i64 %735
  %737 = getelementptr i8, ptr %result.i.i291.i, i64 %732
  %738 = getelementptr i8, ptr %737, i64 %736
  store i32 %534, ptr %738, align 4
  %739 = load ptr, ptr %169, align 8
  %740 = ptrtoint ptr %result.i.i291.i to i64
  %741 = ptrtoint ptr %739 to i64
  %.sroa.2.0.insert.ext.i.i = zext i64 %741 to i160
  %.sroa.2.0.insert.shift.i.i = shl nuw nsw i160 %.sroa.2.0.insert.ext.i.i, 64
  %.sroa.0.0.insert.ext.i.i = zext i64 %740 to i160
  %.sroa.2.0.insert.insert.i.i = or disjoint i160 %.sroa.2.0.insert.shift.i.i, %.sroa.0.0.insert.ext.i.i
  %.sroa.0.0.insert.insert.i.i = or disjoint i160 %.sroa.2.0.insert.insert.i.i, 3062541302288446171170371466885913903104
  %742 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0.0.insert.insert.i.i, 1
  %743 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %744 = load ptr, ptr %159, align 8
  %745 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %744, 0
  %746 = load ptr, ptr %160, align 8
  %747 = insertvalue { ptr, ptr, ptr, i32 } %745, ptr %746, 1
  %748 = load ptr, ptr %161, align 8
  %749 = insertvalue { ptr, ptr, ptr, i32 } %747, ptr %748, 2
  %750 = load i32, ptr %162, align 4
  %751 = insertvalue { ptr, ptr, ptr, i32 } %749, i32 %750, 3
  %hash_coef_ptr.i.i84.i.i = getelementptr i8, ptr %744, i64 8
  %tbl_size_ptr.i.i85.i.i = getelementptr i8, ptr %744, i64 16
  %offset_tbl_ptr.i.i86.i.i = getelementptr i8, ptr %744, i64 40
  %hash_coef.i.i87.i.i = load i64, ptr %hash_coef_ptr.i.i84.i.i, align 4
  %tbl_size.i.i88.i.i = load i64, ptr %tbl_size_ptr.i.i85.i.i, align 4
  %offset_tbl.i.i89.i.i = load ptr, ptr %offset_tbl_ptr.i.i86.i.i, align 8
  %product.i.i.i90.i.i = mul i64 %hash_coef.i.i87.i.i, -5261542750394134544
  %shifted.i.i.i91.i.i = lshr i64 %product.i.i.i90.i.i, 32
  %xored.i.i.i92.i.i = xor i64 %shifted.i.i.i91.i.i, %product.i.i.i90.i.i
  %hash.i.i.i93.i.i = and i64 %xored.i.i.i92.i.i, %tbl_size.i.i88.i.i
  %offset_ptr.i.i94.i.i = getelementptr i32, ptr %offset_tbl.i.i89.i.i, i64 %hash.i.i.i93.i.i
  %offset.i.i95.i.i = load i32, ptr %offset_ptr.i.i94.i.i, align 4
  %eq.i98.i.i = icmp eq i32 %750, %offset.i.i95.i.i
  call void @llvm.assume(i1 %eq.i98.i.i) #30
  %752 = load ptr, ptr %result.i.i3, align 8
  %753 = load ptr, ptr %141, align 8
  %result.i99.i.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %754 = getelementptr i8, ptr %result.i99.i.i, i64 16
  store ptr %753, ptr %754, align 8
  %755 = getelementptr i8, ptr %result.i99.i.i, i64 8
  store ptr %752, ptr %755, align 8
  %756 = getelementptr i8, ptr %result.i99.i.i, i64 24
  store ptr null, ptr %756, align 8
  %757 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i99.i.i)
  store ptr @Entry, ptr %result.i99.i.i, align 8
  store ptr @_parameterization_Ptri32, ptr %110, align 8
  store ptr %result.i99.i.i, ptr %170, align 8
  %758 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %110)
  %759 = call ptr @llvm.invariant.start.p0(i64 600, ptr %744)
  %760 = sext i32 %750 to i64
  %761 = getelementptr ptr, ptr %744, i64 %760
  %762 = getelementptr i8, ptr %761, i64 128
  %763 = load ptr, ptr %762, align 8
  store ptr @i32_typ, ptr %111, align 8
  store ptr @Entry, ptr %171, align 8
  %764 = call ptr %763({ ptr, ptr, ptr, i32 } %751, ptr nonnull %111)
  call void %764({ ptr, ptr, ptr, i32 } %751, { ptr, ptr, ptr, i32 } %751, ptr nonnull %110, i32 %625, { ptr, i160 } %742)
  %765 = icmp eq ptr %.fca.0.extract2.i.i, @nil_typ
  %766 = icmp eq ptr %.fca.0.extract2.i.i, null
  %767 = or i1 %765, %766
  br i1 %767, label %._crit_edge.thread.i.i, label %._crit_edge.i.i

._crit_edge.thread.i.i:                           ; preds = %HashMap_find_slot_keyK_hashPtri32.exit512.i
  %768 = load i32, ptr %163, align 4
  %769 = add i32 %768, 1
  store i32 %769, ptr %163, align 4
  br label %._crit_edge1.sink.split.i.i

._crit_edge.i.i:                                  ; preds = %HashMap_find_slot_keyK_hashPtri32.exit512.i
  %.fca.1.extract4.i.i = extractvalue { ptr, i160 } %642, 1
  %.sroa.3192.8.extract.trunc.i.i = trunc i160 %.fca.1.extract4.i.i to i64
  %770 = inttoptr i64 %.sroa.3192.8.extract.trunc.i.i to ptr
  %.sroa.5193.8.extract.shift.i.i = lshr i160 %.fca.1.extract4.i.i, 64
  %.sroa.5193.8.extract.trunc.i.i = trunc i160 %.sroa.5193.8.extract.shift.i.i to i64
  %771 = inttoptr i64 %.sroa.5193.8.extract.trunc.i.i to ptr
  %hash_coef_ptr.i.i101.i.i = getelementptr i8, ptr %.fca.0.extract2.i.i, i64 8
  %tbl_size_ptr.i.i102.i.i = getelementptr i8, ptr %.fca.0.extract2.i.i, i64 16
  %offset_tbl_ptr.i.i103.i.i = getelementptr i8, ptr %.fca.0.extract2.i.i, i64 40
  %hash_coef.i.i104.i.i = load i64, ptr %hash_coef_ptr.i.i101.i.i, align 4
  %tbl_size.i.i105.i.i = load i64, ptr %tbl_size_ptr.i.i102.i.i, align 4
  %offset_tbl.i.i106.i.i = load ptr, ptr %offset_tbl_ptr.i.i103.i.i, align 8
  %product.i.i.i107.i.i = mul i64 %hash_coef.i.i104.i.i, 4015701072841558310
  %shifted.i.i.i108.i.i = lshr i64 %product.i.i.i107.i.i, 32
  %xored.i.i.i109.i.i = xor i64 %shifted.i.i.i108.i.i, %product.i.i.i107.i.i
  %hash.i.i.i110.i.i = and i64 %xored.i.i.i109.i.i, %tbl_size.i.i105.i.i
  %offset_ptr.i.i111.i.i = getelementptr i32, ptr %offset_tbl.i.i106.i.i, i64 %hash.i.i.i110.i.i
  %offset.i.i112.i.i = load i32, ptr %offset_ptr.i.i111.i.i, align 4
  %772 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract2.i.i, 0
  %773 = insertvalue { ptr, ptr, ptr, i32 } %772, ptr %770, 1
  %774 = insertvalue { ptr, ptr, ptr, i32 } %773, ptr %771, 2
  %775 = insertvalue { ptr, ptr, ptr, i32 } %774, i32 %offset.i.i112.i.i, 3
  %776 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %777 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %778 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract2.i.i)
  %779 = sext i32 %offset.i.i112.i.i to i64
  %780 = getelementptr ptr, ptr %.fca.0.extract2.i.i, i64 %779
  %781 = getelementptr i8, ptr %780, i64 56
  %782 = load ptr, ptr %781, align 8
  %783 = call ptr %782({ ptr, ptr, ptr, i32 } %775, ptr nonnull %0)
  %784 = call { ptr, i160 } %783({ ptr, ptr, ptr, i32 } %775, { ptr, ptr, ptr, i32 } %775, ptr nonnull %0)
  %.fca.0.extract45.i.i = extractvalue { ptr, i160 } %784, 0
  %785 = getelementptr i8, ptr %.fca.0.extract45.i.i, i64 8
  %786 = getelementptr i8, ptr %.fca.0.extract45.i.i, i64 16
  %787 = getelementptr i8, ptr %.fca.0.extract45.i.i, i64 24
  %788 = getelementptr i8, ptr %.fca.0.extract45.i.i, i64 32
  %789 = load i64, ptr %785, align 4
  %790 = load i64, ptr %786, align 4
  %791 = load ptr, ptr %787, align 8
  %792 = load ptr, ptr %788, align 8
  %result.i114.i.i = call i1 %791(i64 %790, i64 %789, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %792) #3
  br i1 %result.i114.i.i, label %._crit_edge1.sink.split.i.i, label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit.i

._crit_edge1.sink.split.i.i:                      ; preds = %._crit_edge.i.i, %._crit_edge.thread.i.i
  %.sink202.i.i = phi i64 [ 40, %._crit_edge.thread.i.i ], [ 32, %._crit_edge.i.i ]
  %793 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %794 = getelementptr i8, ptr getelementptr inbounds (i8, ptr @HashMap, i64 72), i64 %.sink202.i.i
  %795 = load ptr, ptr %794, align 8
  %796 = load ptr, ptr %795, align 8
  %797 = call i32 %796(ptr nonnull %result.i.i3)
  %798 = add i32 %797, 1
  %799 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %800 = getelementptr i8, ptr %795, i64 8
  %801 = load ptr, ptr %800, align 8
  call void %801(ptr nonnull %result.i.i3, i32 %798)
  br label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit.i

HashMap_insert_internal_keyK_valueV_hashPtri32.exit.i: ; preds = %._crit_edge1.sink.split.i.i, %._crit_edge.i.i
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %107)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %108)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %109)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %110)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %111)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  %802 = icmp ult i32 %.reg2mem46.082.i, 999999
  br i1 %802, label %._crit_edge.i, label %._crit_edge1.i

._crit_edge1.i:                                   ; preds = %HashMap_insert_internal_keyK_valueV_hashPtri32.exit.i
  %803 = call i64 @clock()
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %114)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %115)
  %804 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %805 = load ptr, ptr %146, align 8
  %806 = call i32 %805({ ptr, i160 } { ptr @i32_typ, i160 999999 })
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %105)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %106)
  %807 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %808 = load ptr, ptr %159, align 8
  %809 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %808, 0
  %810 = load ptr, ptr %160, align 8
  %811 = insertvalue { ptr, ptr, ptr, i32 } %809, ptr %810, 1
  %812 = load ptr, ptr %161, align 8
  %813 = insertvalue { ptr, ptr, ptr, i32 } %811, ptr %812, 2
  %814 = load i32, ptr %162, align 4
  %815 = insertvalue { ptr, ptr, ptr, i32 } %813, i32 %814, 3
  %hash_coef_ptr.i.i51.i.i = getelementptr i8, ptr %808, i64 8
  %tbl_size_ptr.i.i52.i.i = getelementptr i8, ptr %808, i64 16
  %offset_tbl_ptr.i.i53.i.i = getelementptr i8, ptr %808, i64 40
  %hash_coef.i.i54.i.i = load i64, ptr %hash_coef_ptr.i.i51.i.i, align 4
  %tbl_size.i.i55.i.i = load i64, ptr %tbl_size_ptr.i.i52.i.i, align 4
  %offset_tbl.i.i56.i.i = load ptr, ptr %offset_tbl_ptr.i.i53.i.i, align 8
  %product.i.i.i57.i.i = mul i64 %hash_coef.i.i54.i.i, -5261542750394134544
  %shifted.i.i.i58.i.i = lshr i64 %product.i.i.i57.i.i, 32
  %xored.i.i.i59.i.i = xor i64 %shifted.i.i.i58.i.i, %product.i.i.i57.i.i
  %hash.i.i.i60.i.i = and i64 %xored.i.i.i59.i.i, %tbl_size.i.i55.i.i
  %offset_ptr.i.i61.i.i = getelementptr i32, ptr %offset_tbl.i.i56.i.i, i64 %hash.i.i.i60.i.i
  %offset.i.i62.i.i = load i32, ptr %offset_ptr.i.i61.i.i, align 4
  %eq.i.i313.i = icmp eq i32 %814, %offset.i.i62.i.i
  call void @llvm.assume(i1 %eq.i.i313.i) #30
  %816 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %817 = call ptr @llvm.invariant.start.p0(i64 600, ptr %808)
  %818 = sext i32 %814 to i64
  %819 = getelementptr ptr, ptr %808, i64 %818
  %820 = getelementptr i8, ptr %819, i64 64
  %821 = load ptr, ptr %820, align 8
  %822 = call ptr %821({ ptr, ptr, ptr, i32 } %815, ptr nonnull %0)
  %823 = call i32 %822({ ptr, ptr, ptr, i32 } %815, { ptr, ptr, ptr, i32 } %815, ptr nonnull %0)
  %824 = add i32 %823, -1
  %825 = and i32 %824, %806
  %826 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  br label %827

827:                                              ; preds = %876, %._crit_edge1.i
  %spec.store.select.i362.i = phi i32 [ %spec.store.select.i.i, %876 ], [ -1, %._crit_edge1.i ]
  %.0..0..0..i.i = phi i32 [ %894, %876 ], [ %825, %._crit_edge1.i ]
  %828 = load ptr, ptr %159, align 8
  %829 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %828, 0
  %830 = load ptr, ptr %160, align 8
  %831 = insertvalue { ptr, ptr, ptr, i32 } %829, ptr %830, 1
  %832 = load ptr, ptr %161, align 8
  %833 = insertvalue { ptr, ptr, ptr, i32 } %831, ptr %832, 2
  %834 = load i32, ptr %162, align 4
  %835 = insertvalue { ptr, ptr, ptr, i32 } %833, i32 %834, 3
  %hash_coef_ptr.i.i65.i.i = getelementptr i8, ptr %828, i64 8
  %tbl_size_ptr.i.i66.i.i = getelementptr i8, ptr %828, i64 16
  %offset_tbl_ptr.i.i67.i.i = getelementptr i8, ptr %828, i64 40
  %hash_coef.i.i68.i.i = load i64, ptr %hash_coef_ptr.i.i65.i.i, align 4
  %tbl_size.i.i69.i.i = load i64, ptr %tbl_size_ptr.i.i66.i.i, align 4
  %offset_tbl.i.i70.i.i = load ptr, ptr %offset_tbl_ptr.i.i67.i.i, align 8
  %product.i.i.i71.i.i = mul i64 %hash_coef.i.i68.i.i, -5261542750394134544
  %shifted.i.i.i72.i.i = lshr i64 %product.i.i.i71.i.i, 32
  %xored.i.i.i73.i.i = xor i64 %shifted.i.i.i72.i.i, %product.i.i.i71.i.i
  %hash.i.i.i74.i.i = and i64 %xored.i.i.i73.i.i, %tbl_size.i.i69.i.i
  %offset_ptr.i.i75.i.i = getelementptr i32, ptr %offset_tbl.i.i70.i.i, i64 %hash.i.i.i74.i.i
  %offset.i.i76.i.i = load i32, ptr %offset_ptr.i.i75.i.i, align 4
  %eq.i79.i.i = icmp eq i32 %834, %offset.i.i76.i.i
  call void @llvm.assume(i1 %eq.i79.i.i) #30
  %836 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  store ptr @_parameterization_Ptri32, ptr %105, align 8
  %837 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %105)
  %838 = call ptr @llvm.invariant.start.p0(i64 600, ptr %828)
  %839 = sext i32 %834 to i64
  %840 = getelementptr ptr, ptr %828, i64 %839
  %841 = getelementptr i8, ptr %840, i64 120
  %842 = load ptr, ptr %841, align 8
  store ptr @i32_typ, ptr %106, align 8
  %843 = call ptr %842({ ptr, ptr, ptr, i32 } %835, ptr nonnull %106)
  %844 = call { ptr, i160 } %843({ ptr, ptr, ptr, i32 } %835, { ptr, ptr, ptr, i32 } %835, ptr nonnull %105, i32 %.0..0..0..i.i)
  %.fca.0.extract36.i.i = extractvalue { ptr, i160 } %844, 0
  %845 = icmp eq ptr %.fca.0.extract36.i.i, @nil_typ
  %846 = icmp eq ptr %.fca.0.extract36.i.i, null
  %847 = or i1 %845, %846
  br i1 %847, label %895, label %848

848:                                              ; preds = %827
  %.fca.1.extract38.i.i = extractvalue { ptr, i160 } %844, 1
  %.sroa.5.8.extract.shift.i314.i = lshr i160 %.fca.1.extract38.i.i, 64
  %.sroa.5.8.extract.trunc.i315.i = trunc i160 %.sroa.5.8.extract.shift.i314.i to i64
  %.sroa.2.8.extract.trunc165.i.i = trunc i160 %.fca.1.extract38.i.i to i64
  %849 = inttoptr i64 %.sroa.2.8.extract.trunc165.i.i to ptr
  %850 = inttoptr i64 %.sroa.5.8.extract.trunc.i315.i to ptr
  %hash_coef_ptr.i.i81.i.i = getelementptr i8, ptr %.fca.0.extract36.i.i, i64 8
  %tbl_size_ptr.i.i82.i.i = getelementptr i8, ptr %.fca.0.extract36.i.i, i64 16
  %offset_tbl_ptr.i.i83.i.i = getelementptr i8, ptr %.fca.0.extract36.i.i, i64 40
  %hash_coef.i.i84.i.i = load i64, ptr %hash_coef_ptr.i.i81.i.i, align 4
  %tbl_size.i.i85.i.i = load i64, ptr %tbl_size_ptr.i.i82.i.i, align 4
  %offset_tbl.i.i86.i.i = load ptr, ptr %offset_tbl_ptr.i.i83.i.i, align 8
  %product.i.i.i87.i.i = mul i64 %hash_coef.i.i84.i.i, 4015701072841558310
  %shifted.i.i.i88.i.i = lshr i64 %product.i.i.i87.i.i, 32
  %xored.i.i.i89.i.i = xor i64 %shifted.i.i.i88.i.i, %product.i.i.i87.i.i
  %hash.i.i.i90.i.i = and i64 %xored.i.i.i89.i.i, %tbl_size.i.i85.i.i
  %offset_ptr.i.i91.i.i = getelementptr i32, ptr %offset_tbl.i.i86.i.i, i64 %hash.i.i.i90.i.i
  %offset.i.i92.i.i = load i32, ptr %offset_ptr.i.i91.i.i, align 4
  %851 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract36.i.i, 0
  %852 = insertvalue { ptr, ptr, ptr, i32 } %851, ptr %849, 1
  %853 = insertvalue { ptr, ptr, ptr, i32 } %852, ptr %850, 2
  %854 = insertvalue { ptr, ptr, ptr, i32 } %853, i32 %offset.i.i92.i.i, 3
  %855 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %856 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %857 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i.i)
  %858 = sext i32 %offset.i.i92.i.i to i64
  %859 = getelementptr ptr, ptr %.fca.0.extract36.i.i, i64 %858
  %860 = getelementptr i8, ptr %859, i64 64
  %861 = load ptr, ptr %860, align 8
  %862 = call ptr %861({ ptr, ptr, ptr, i32 } %854, ptr nonnull %0)
  %863 = call i32 %862({ ptr, ptr, ptr, i32 } %854, { ptr, ptr, ptr, i32 } %854, ptr nonnull %0)
  %864 = icmp eq i32 %863, %806
  %865 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %866 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %867 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i.i)
  %868 = getelementptr i8, ptr %859, i64 48
  %869 = load ptr, ptr %868, align 8
  %870 = call ptr %869({ ptr, ptr, ptr, i32 } %854, ptr nonnull %0)
  %871 = call { ptr, i160 } %870({ ptr, ptr, ptr, i32 } %854, { ptr, ptr, ptr, i32 } %854, ptr nonnull %0)
  %872 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %873 = load ptr, ptr %147, align 8
  %874 = call i1 %873({ ptr, i160 } %871, { ptr, i160 } { ptr @i32_typ, i160 999999 })
  %875 = and i1 %864, %874
  br i1 %875, label %HashMap_find_slot_keyK_hashPtri32.exit.i, label %876

876:                                              ; preds = %848
  %877 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %878 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %879 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i.i)
  %880 = getelementptr i8, ptr %859, i64 56
  %881 = load ptr, ptr %880, align 8
  %882 = call ptr %881({ ptr, ptr, ptr, i32 } %854, ptr nonnull %0)
  %883 = call { ptr, i160 } %882({ ptr, ptr, ptr, i32 } %854, { ptr, ptr, ptr, i32 } %854, ptr nonnull %0)
  %.fca.0.extract15.i317.i = extractvalue { ptr, i160 } %883, 0
  %884 = getelementptr i8, ptr %.fca.0.extract15.i317.i, i64 8
  %885 = getelementptr i8, ptr %.fca.0.extract15.i317.i, i64 16
  %886 = getelementptr i8, ptr %.fca.0.extract15.i317.i, i64 24
  %887 = getelementptr i8, ptr %.fca.0.extract15.i317.i, i64 32
  %888 = load i64, ptr %884, align 4
  %889 = load i64, ptr %885, align 4
  %890 = load ptr, ptr %886, align 8
  %891 = load ptr, ptr %887, align 8
  %result.i.i318.i = call i1 %890(i64 %889, i64 %888, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %891) #3
  %892 = icmp eq i32 %spec.store.select.i362.i, -1
  %or.cond.i.i = select i1 %result.i.i318.i, i1 %892, i1 false
  %spec.store.select.i.i = select i1 %or.cond.i.i, i32 %.0..0..0..i.i, i32 %spec.store.select.i362.i
  %893 = add i32 %.0..0..0..i.i, 1
  %894 = and i32 %893, %824
  br label %827

895:                                              ; preds = %827
  %896 = icmp eq i32 %spec.store.select.i362.i, -1
  %.pre.i = select i1 %896, i32 %.0..0..0..i.i, i32 %spec.store.select.i362.i
  br label %HashMap_find_slot_keyK_hashPtri32.exit.i

HashMap_find_slot_keyK_hashPtri32.exit.i:         ; preds = %848, %895
  %897 = phi i32 [ %.pre.i, %895 ], [ %.0..0..0..i.i, %848 ]
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %105)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %106)
  %898 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %899 = load ptr, ptr %159, align 8
  %900 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %899, 0
  %901 = load ptr, ptr %160, align 8
  %902 = insertvalue { ptr, ptr, ptr, i32 } %900, ptr %901, 1
  %903 = load ptr, ptr %161, align 8
  %904 = insertvalue { ptr, ptr, ptr, i32 } %902, ptr %903, 2
  %905 = load i32, ptr %162, align 4
  %906 = insertvalue { ptr, ptr, ptr, i32 } %904, i32 %905, 3
  %hash_coef_ptr.i.i58.i.i = getelementptr i8, ptr %899, i64 8
  %tbl_size_ptr.i.i59.i.i = getelementptr i8, ptr %899, i64 16
  %offset_tbl_ptr.i.i60.i.i = getelementptr i8, ptr %899, i64 40
  %hash_coef.i.i61.i.i = load i64, ptr %hash_coef_ptr.i.i58.i.i, align 4
  %tbl_size.i.i62.i.i = load i64, ptr %tbl_size_ptr.i.i59.i.i, align 4
  %offset_tbl.i.i63.i.i = load ptr, ptr %offset_tbl_ptr.i.i60.i.i, align 8
  %product.i.i.i64.i.i = mul i64 %hash_coef.i.i61.i.i, -5261542750394134544
  %shifted.i.i.i65.i.i = lshr i64 %product.i.i.i64.i.i, 32
  %xored.i.i.i66.i.i = xor i64 %shifted.i.i.i65.i.i, %product.i.i.i64.i.i
  %hash.i.i.i67.i.i = and i64 %xored.i.i.i66.i.i, %tbl_size.i.i62.i.i
  %offset_ptr.i.i68.i.i = getelementptr i32, ptr %offset_tbl.i.i63.i.i, i64 %hash.i.i.i67.i.i
  %offset.i.i69.i.i = load i32, ptr %offset_ptr.i.i68.i.i, align 4
  %eq.i.i165.i = icmp eq i32 %905, %offset.i.i69.i.i
  call void @llvm.assume(i1 %eq.i.i165.i) #30
  store ptr @_parameterization_Ptri32, ptr %114, align 8
  %907 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %114)
  %908 = call ptr @llvm.invariant.start.p0(i64 600, ptr %899)
  %909 = sext i32 %905 to i64
  %910 = getelementptr ptr, ptr %899, i64 %909
  %911 = getelementptr i8, ptr %910, i64 120
  %912 = load ptr, ptr %911, align 8
  store ptr @i32_typ, ptr %115, align 8
  %913 = call ptr %912({ ptr, ptr, ptr, i32 } %906, ptr nonnull %115)
  %914 = call { ptr, i160 } %913({ ptr, ptr, ptr, i32 } %906, { ptr, ptr, ptr, i32 } %906, ptr nonnull %114, i32 %897)
  %.fca.0.extract.i166.i = extractvalue { ptr, i160 } %914, 0
  %915 = icmp ne ptr %.fca.0.extract.i166.i, @nil_typ
  %916 = icmp ne ptr %.fca.0.extract.i166.i, null
  %.not56.i.i = and i1 %915, %916
  br i1 %.not56.i.i, label %917, label %HashMap_get_keyK.exit.thread.i

917:                                              ; preds = %HashMap_find_slot_keyK_hashPtri32.exit.i
  %.fca.1.extract.i167.i = extractvalue { ptr, i160 } %914, 1
  %.sroa.3.8.extract.trunc.i.i = trunc i160 %.fca.1.extract.i167.i to i64
  %918 = inttoptr i64 %.sroa.3.8.extract.trunc.i.i to ptr
  %.sroa.5.8.extract.shift.i.i = lshr i160 %.fca.1.extract.i167.i, 64
  %.sroa.5.8.extract.trunc.i.i = trunc i160 %.sroa.5.8.extract.shift.i.i to i64
  %919 = inttoptr i64 %.sroa.5.8.extract.trunc.i.i to ptr
  %hash_coef_ptr.i.i72.i.i = getelementptr i8, ptr %.fca.0.extract.i166.i, i64 8
  %tbl_size_ptr.i.i73.i.i = getelementptr i8, ptr %.fca.0.extract.i166.i, i64 16
  %offset_tbl_ptr.i.i74.i.i = getelementptr i8, ptr %.fca.0.extract.i166.i, i64 40
  %hash_coef.i.i75.i.i = load i64, ptr %hash_coef_ptr.i.i72.i.i, align 4
  %tbl_size.i.i76.i.i = load i64, ptr %tbl_size_ptr.i.i73.i.i, align 4
  %offset_tbl.i.i77.i.i = load ptr, ptr %offset_tbl_ptr.i.i74.i.i, align 8
  %product.i.i.i78.i.i = mul i64 %hash_coef.i.i75.i.i, 4015701072841558310
  %shifted.i.i.i79.i.i = lshr i64 %product.i.i.i78.i.i, 32
  %xored.i.i.i80.i.i = xor i64 %shifted.i.i.i79.i.i, %product.i.i.i78.i.i
  %hash.i.i.i81.i.i = and i64 %xored.i.i.i80.i.i, %tbl_size.i.i76.i.i
  %offset_ptr.i.i82.i.i = getelementptr i32, ptr %offset_tbl.i.i77.i.i, i64 %hash.i.i.i81.i.i
  %offset.i.i83.i.i = load i32, ptr %offset_ptr.i.i82.i.i, align 4
  %920 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract.i166.i, 0
  %921 = insertvalue { ptr, ptr, ptr, i32 } %920, ptr %918, 1
  %922 = insertvalue { ptr, ptr, ptr, i32 } %921, ptr %919, 2
  %923 = insertvalue { ptr, ptr, ptr, i32 } %922, i32 %offset.i.i83.i.i, 3
  %924 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %925 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %926 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract.i166.i)
  %927 = sext i32 %offset.i.i83.i.i to i64
  %928 = getelementptr ptr, ptr %.fca.0.extract.i166.i, i64 %927
  %929 = getelementptr i8, ptr %928, i64 56
  %930 = load ptr, ptr %929, align 8
  %931 = call ptr %930({ ptr, ptr, ptr, i32 } %923, ptr nonnull %0)
  %932 = call { ptr, i160 } %931({ ptr, ptr, ptr, i32 } %923, { ptr, ptr, ptr, i32 } %923, ptr nonnull %0)
  %.fca.0.extract47.i.i = extractvalue { ptr, i160 } %932, 0
  %.fca.1.extract49.i.i = extractvalue { ptr, i160 } %932, 1
  %933 = getelementptr i8, ptr %.fca.0.extract47.i.i, i64 8
  %934 = getelementptr i8, ptr %.fca.0.extract47.i.i, i64 16
  %935 = getelementptr i8, ptr %.fca.0.extract47.i.i, i64 24
  %936 = getelementptr i8, ptr %.fca.0.extract47.i.i, i64 32
  %937 = load i64, ptr %933, align 4
  %938 = load i64, ptr %934, align 4
  %939 = load ptr, ptr %935, align 8
  %940 = load ptr, ptr %936, align 8
  %result.i.i168.i = call i1 %939(i64 %938, i64 %937, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %940) #3
  br i1 %result.i.i168.i, label %HashMap_get_keyK.exit.thread.i, label %HashMap_get_keyK.exit.i

HashMap_get_keyK.exit.thread.i:                   ; preds = %917, %HashMap_find_slot_keyK_hashPtri32.exit.i
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %114)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %115)
  br label %944

HashMap_get_keyK.exit.i:                          ; preds = %917
  %result.i85.i.i = call i1 %939(i64 %938, i64 %937, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr readonly %940) #3
  %cond.fr.i.i = freeze i1 %result.i85.i.i
  %spec.select.i.i = select i1 %cond.fr.i.i, ptr %.fca.0.extract47.i.i, ptr @nil_typ
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %114)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %115)
  %941 = icmp ne ptr %spec.select.i.i, @nil_typ
  %942 = icmp ne ptr %spec.select.i.i, null
  %.not24.i = and i1 %941, %942
  br i1 %.not24.i, label %943, label %944

943:                                              ; preds = %HashMap_get_keyK.exit.i
  %.sroa.2.8.extract.trunc.i = trunc i160 %.fca.1.extract49.i.i to i32
  %.not.i = icmp eq i32 %.sroa.2.8.extract.trunc.i, 1000000
  br label %944

944:                                              ; preds = %943, %HashMap_get_keyK.exit.i, %HashMap_get_keyK.exit.thread.i
  %.reg2mem42.0.i = phi i1 [ %.not.i, %943 ], [ false, %HashMap_get_keyK.exit.i ], [ false, %HashMap_get_keyK.exit.thread.i ]
  %945 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %946 = load i32, ptr %163, align 4
  %947 = icmp eq i32 %946, 1000000
  %948 = select i1 %947, i1 %.reg2mem42.0.i, i1 false
  %949 = freeze i1 %948
  %result.i33.i = call noalias dereferenceable_or_null(18) ptr @bump_malloc_inner(i64 noundef 18, ptr nonnull @current_ptr) #29
  store <17 x i8> <i8 73, i8 110, i8 115, i8 101, i8 114, i8 116, i8 32, i8 83, i8 101, i8 113, i8 117, i8 101, i8 110, i8 116, i8 105, i8 97, i8 108>, ptr %result.i33.i, align 32
  %result.i34.i = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %950 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %result.i34.i, 1
  %951 = insertvalue { ptr, ptr, ptr, i32 } %950, ptr undef, 2
  %952 = insertvalue { ptr, ptr, ptr, i32 } %951, i32 9, 3
  store ptr %result.i33.i, ptr %result.i34.i, align 8
  %953 = getelementptr i8, ptr %result.i34.i, i64 8
  store i32 17, ptr %953, align 4
  %954 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %955 = getelementptr i8, ptr %result.i34.i, i64 12
  store i32 18, ptr %955, align 4
  %956 = sub i64 %803, %166
  call void @print_benchmark_result({ ptr, ptr, ptr, i32 } %952, i32 1000000, i64 %956)
  %result.i35.i = call noalias dereferenceable_or_null(19) ptr @bump_malloc_inner(i64 noundef 19, ptr nonnull @current_ptr) #29
  store <18 x i8> <i8 32, i8 32, i8 32, i8 32, i8 86, i8 101, i8 114, i8 105, i8 102, i8 105, i8 99, i8 97, i8 116, i8 105, i8 111, i8 110, i8 58, i8 32>, ptr %result.i35.i, align 32
  %result.i36.i = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %957 = getelementptr inbounds i8, ptr %116, i64 8
  %958 = getelementptr inbounds i8, ptr %116, i64 24
  store ptr @String, ptr %116, align 8
  store ptr %result.i36.i, ptr %957, align 8
  store i32 9, ptr %958, align 8
  %959 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %116)
  store ptr %result.i35.i, ptr %result.i36.i, align 8
  %960 = getelementptr i8, ptr %result.i36.i, i64 8
  store i32 18, ptr %960, align 4
  %961 = getelementptr i8, ptr %result.i36.i, i64 12
  store i32 19, ptr %961, align 4
  %962 = load i160, ptr %957, align 8
  %963 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  %.sroa.3.8.extract.trunc.i201.i = trunc i160 %962 to i64
  %964 = inttoptr i64 %.sroa.3.8.extract.trunc.i201.i to ptr
  %965 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %966 = getelementptr i8, ptr %964, i64 8
  %967 = load i32, ptr %966, align 4
  %968 = add i32 %967, 1
  %969 = sext i32 %968 to i64
  %result.i.i333.i = call noalias ptr @bump_malloc_inner(i64 noundef %969, ptr nonnull @current_ptr) #29
  %970 = load i32, ptr %966, align 4
  %971 = icmp sgt i32 %970, 0
  br i1 %971, label %.lr.ph.i.i, label %String_c_string_.exit.i

.lr.ph.i.i:                                       ; preds = %944
  %972 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %973 = load ptr, ptr %964, align 8
  %974 = zext nneg i32 %970 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i333.i, ptr align 1 %973, i64 %974, i1 false)
  br label %String_c_string_.exit.i

String_c_string_.exit.i:                          ; preds = %.lr.ph.i.i, %944
  %975 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %976 = sext i32 %970 to i64
  %977 = getelementptr i8, ptr %result.i.i333.i, i64 %976
  store i8 0, ptr %977, align 1
  %puts.i.i = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i333.i)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  %result.i37.i = call noalias dereferenceable_or_null(5) ptr @bump_malloc_inner(i64 noundef 5, ptr nonnull @current_ptr) #29
  %spec.select.i = select i1 %949, <4 x i8> <i8 80, i8 65, i8 83, i8 83>, <4 x i8> <i8 70, i8 65, i8 73, i8 76>
  %978 = select i1 %949, ptr %117, ptr %118
  store <4 x i8> %spec.select.i, ptr %result.i37.i, align 4
  %result.i58.i = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.i.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v = select i1 %949, ptr %117, ptr %118
  %.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.i.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel = getelementptr inbounds i8, ptr %.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.i.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v, i64 8
  %.sroa.sel358.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.i.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v = select i1 %949, ptr %117, ptr %118
  %.sroa.sel358.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.i.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel = getelementptr inbounds i8, ptr %.sroa.sel358.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.i.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v, i64 24
  store ptr @String, ptr %978, align 8
  store ptr %result.i58.i, ptr %.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.i.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  store i32 9, ptr %.sroa.sel358.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.i.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  %979 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %978)
  store ptr %result.i37.i, ptr %result.i58.i, align 8
  %980 = getelementptr i8, ptr %result.i58.i, i64 8
  store i32 4, ptr %980, align 4
  %981 = getelementptr i8, ptr %result.i58.i, i64 12
  store i32 5, ptr %981, align 4
  %982 = load i160, ptr %.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.i.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  %983 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  %.sroa.3.8.extract.trunc.i220.i = trunc i160 %982 to i64
  %984 = inttoptr i64 %.sroa.3.8.extract.trunc.i220.i to ptr
  %985 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %986 = getelementptr i8, ptr %984, i64 8
  %987 = load i32, ptr %986, align 4
  %988 = add i32 %987, 1
  %989 = sext i32 %988 to i64
  %result.i.i349.i = call noalias ptr @bump_malloc_inner(i64 noundef %989, ptr nonnull @current_ptr) #29
  %990 = load i32, ptr %986, align 4
  %991 = icmp sgt i32 %990, 0
  br i1 %991, label %.lr.ph.i350.i, label %benchmark_insert_sequential.exit

.lr.ph.i350.i:                                    ; preds = %String_c_string_.exit.i
  %992 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %993 = load ptr, ptr %984, align 8
  %994 = zext nneg i32 %990 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i349.i, ptr align 1 %993, i64 %994, i1 false)
  br label %benchmark_insert_sequential.exit

benchmark_insert_sequential.exit:                 ; preds = %String_c_string_.exit.i, %.lr.ph.i350.i
  %995 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %996 = sext i32 %990 to i64
  %997 = getelementptr i8, ptr %result.i.i349.i, i64 %996
  store i8 0, ptr %997, align 1
  %puts.i236.i = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i349.i)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %116)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %117)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %118)
  call void @benchmark_insert_random(i32 1000000)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %92)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %93)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %94)
  %result.i.i5 = call noalias dereferenceable_or_null(80) ptr @bump_malloc_inner(i64 noundef 80, ptr nonnull @current_ptr) #29
  store ptr @_parameterization_Ptri32, ptr %result.i.i5, align 8
  %998 = getelementptr i8, ptr %result.i.i5, i64 8
  store ptr @_parameterization_Ptri32, ptr %998, align 8
  %999 = getelementptr i8, ptr %result.i.i5, i64 16
  store ptr @_parameterization_PairPtri32._Ptri32, ptr %999, align 8
  %1000 = call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %result.i.i5)
  %result.i28.i6 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %oldProtect.i.i4)
  %result.i29.i7 = call i32 @VirtualProtect(ptr %result.i28.i6, i64 16, i32 64, ptr nonnull %oldProtect.i.i4) #16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %oldProtect.i.i4)
  call void @llvm.init.trampoline(ptr %result.i28.i6, ptr nonnull @ybllmnbebm, ptr nonnull @i32_hasher)
  %ret.i.i8 = call ptr @llvm.adjust.trampoline(ptr readonly %result.i28.i6) #31
  %1001 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i28.i6)
  %result.i30.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %oldProtect.i31.i)
  %result.i32.i = call i32 @VirtualProtect(ptr %result.i30.i, i64 16, i32 64, ptr nonnull %oldProtect.i31.i) #16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %oldProtect.i31.i)
  call void @llvm.init.trampoline(ptr %result.i30.i, ptr nonnull @spivdtjshg, ptr nonnull @i32_eq)
  %ret.i33.i = call ptr @llvm.adjust.trampoline(ptr readonly %result.i30.i) #31
  %1002 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i30.i)
  %1003 = getelementptr i8, ptr %result.i.i5, i64 64
  store ptr %ret.i.i8, ptr %1003, align 8
  %1004 = getelementptr i8, ptr %result.i.i5, i64 72
  store ptr %ret.i33.i, ptr %1004, align 8
  %result.i.i.i9 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1005 = getelementptr i8, ptr %result.i.i.i9, i64 16
  store ptr @_parameterization_Nil, ptr %1005, align 8
  %result.i4.i.i10 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1006 = getelementptr i8, ptr %result.i4.i.i10, i64 16
  store ptr @_parameterization_Ptri32, ptr %1006, align 8
  %1007 = getelementptr i8, ptr %result.i4.i.i10, i64 8
  store ptr @_parameterization_Ptri32, ptr %1007, align 8
  %1008 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i4.i.i10)
  store ptr @Entry, ptr %result.i4.i.i10, align 8
  %1009 = getelementptr i8, ptr %result.i.i.i9, i64 8
  store ptr %result.i4.i.i10, ptr %1009, align 8
  %1010 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i.i9)
  store ptr @union_typ, ptr %result.i.i.i9, align 8
  %result.i5.i.i11 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i.i9, ptr %result.i5.i.i11, align 8
  %1011 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i5.i.i11)
  %1012 = getelementptr i8, ptr %result.i5.i.i11, i64 16
  store i32 16, ptr %1012, align 4
  %1013 = getelementptr i8, ptr %result.i5.i.i11, i64 20
  store i32 16, ptr %1013, align 4
  %result.i.i.i.i12 = call noalias dereferenceable_or_null(512) ptr @bump_malloc_inner(i64 noundef 512, ptr nonnull @current_ptr) #29
  %1014 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %1015 = getelementptr i8, ptr %result.i5.i.i11, i64 8
  store ptr %result.i.i.i.i12, ptr %1015, align 8
  %1016 = getelementptr i8, ptr %result.i.i5, i64 24
  store ptr @Array, ptr %1016, align 8
  %1017 = getelementptr i8, ptr %result.i.i5, i64 32
  store ptr %result.i5.i.i11, ptr %1017, align 8
  %1018 = getelementptr i8, ptr %result.i.i5, i64 40
  %1019 = getelementptr i8, ptr %result.i.i5, i64 48
  store i32 9, ptr %1019, align 4
  %1020 = getelementptr i8, ptr %result.i.i5, i64 60
  %1021 = getelementptr inbounds i8, ptr %85, i64 8
  %1022 = getelementptr inbounds i8, ptr %85, i64 24
  %1023 = getelementptr inbounds i8, ptr %85, i64 16
  %1024 = getelementptr inbounds i8, ptr %86, i64 8
  %1025 = getelementptr inbounds i8, ptr %87, i64 8
  %1026 = getelementptr i8, ptr %result.i.i5, i64 56
  %1027 = getelementptr inbounds i8, ptr %77, i64 8
  %1028 = getelementptr inbounds i8, ptr %77, i64 24
  %1029 = getelementptr inbounds i8, ptr %77, i64 16
  %1030 = getelementptr inbounds i8, ptr %78, i64 8
  %1031 = getelementptr inbounds i8, ptr %78, i64 16
  %1032 = getelementptr inbounds i8, ptr %79, i64 8
  %1033 = getelementptr inbounds i8, ptr %80, i64 8
  br label %.lr.ph.i13

.lr.ph.i13:                                       ; preds = %HashMap_insert_internal_keyK_valueV_hashPtri32.exit.i82, %benchmark_insert_sequential.exit
  %.reg2mem73.087.i = phi i32 [ %1034, %HashMap_insert_internal_keyK_valueV_hashPtri32.exit.i82 ], [ 0, %benchmark_insert_sequential.exit ]
  %1034 = add nuw nsw i32 %.reg2mem73.087.i, 1
  %.sroa.024.0.insert.ext.i = zext nneg i32 %.reg2mem73.087.i to i160
  %1035 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.024.0.insert.ext.i, 1
  %.sroa.021.0.insert.ext.i = zext nneg i32 %1034 to i160
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  %1036 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1037 = load ptr, ptr %1016, align 8
  %1038 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1037, 0
  %1039 = load ptr, ptr %1017, align 8
  %1040 = insertvalue { ptr, ptr, ptr, i32 } %1038, ptr %1039, 1
  %1041 = load ptr, ptr %1018, align 8
  %1042 = insertvalue { ptr, ptr, ptr, i32 } %1040, ptr %1041, 2
  %1043 = load i32, ptr %1019, align 4
  %1044 = insertvalue { ptr, ptr, ptr, i32 } %1042, i32 %1043, 3
  %hash_coef_ptr.i.i42.i.i14 = getelementptr i8, ptr %1037, i64 8
  %tbl_size_ptr.i.i43.i.i15 = getelementptr i8, ptr %1037, i64 16
  %offset_tbl_ptr.i.i44.i.i16 = getelementptr i8, ptr %1037, i64 40
  %hash_coef.i.i45.i.i17 = load i64, ptr %hash_coef_ptr.i.i42.i.i14, align 4
  %tbl_size.i.i46.i.i18 = load i64, ptr %tbl_size_ptr.i.i43.i.i15, align 4
  %offset_tbl.i.i47.i.i19 = load ptr, ptr %offset_tbl_ptr.i.i44.i.i16, align 8
  %product.i.i.i48.i.i20 = mul i64 %hash_coef.i.i45.i.i17, -5261542750394134544
  %shifted.i.i.i49.i.i21 = lshr i64 %product.i.i.i48.i.i20, 32
  %xored.i.i.i50.i.i22 = xor i64 %shifted.i.i.i49.i.i21, %product.i.i.i48.i.i20
  %hash.i.i.i51.i.i23 = and i64 %xored.i.i.i50.i.i22, %tbl_size.i.i46.i.i18
  %offset_ptr.i.i52.i.i24 = getelementptr i32, ptr %offset_tbl.i.i47.i.i19, i64 %hash.i.i.i51.i.i23
  %offset.i.i53.i.i25 = load i32, ptr %offset_ptr.i.i52.i.i24, align 4
  %eq.i.i.i26 = icmp eq i32 %1043, %offset.i.i53.i.i25
  call void @llvm.assume(i1 %eq.i.i.i26) #30
  %1045 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %1046 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1037)
  %1047 = sext i32 %1043 to i64
  %1048 = getelementptr ptr, ptr %1037, i64 %1047
  %1049 = getelementptr i8, ptr %1048, i64 64
  %1050 = load ptr, ptr %1049, align 8
  %1051 = call ptr %1050({ ptr, ptr, ptr, i32 } %1044, ptr nonnull %0)
  %1052 = call i32 %1051({ ptr, ptr, ptr, i32 } %1044, { ptr, ptr, ptr, i32 } %1044, ptr nonnull %0)
  %1053 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1054 = load ptr, ptr %1016, align 8
  %1055 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1054, 0
  %1056 = load ptr, ptr %1017, align 8
  %1057 = insertvalue { ptr, ptr, ptr, i32 } %1055, ptr %1056, 1
  %1058 = load ptr, ptr %1018, align 8
  %1059 = insertvalue { ptr, ptr, ptr, i32 } %1057, ptr %1058, 2
  %1060 = load i32, ptr %1019, align 4
  %1061 = insertvalue { ptr, ptr, ptr, i32 } %1059, i32 %1060, 3
  %hash_coef_ptr.i.i56.i.i27 = getelementptr i8, ptr %1054, i64 8
  %tbl_size_ptr.i.i57.i.i28 = getelementptr i8, ptr %1054, i64 16
  %offset_tbl_ptr.i.i58.i.i29 = getelementptr i8, ptr %1054, i64 40
  %hash_coef.i.i59.i.i30 = load i64, ptr %hash_coef_ptr.i.i56.i.i27, align 4
  %tbl_size.i.i60.i.i31 = load i64, ptr %tbl_size_ptr.i.i57.i.i28, align 4
  %offset_tbl.i.i61.i.i32 = load ptr, ptr %offset_tbl_ptr.i.i58.i.i29, align 8
  %product.i.i.i62.i.i33 = mul i64 %hash_coef.i.i59.i.i30, -5261542750394134544
  %shifted.i.i.i63.i.i34 = lshr i64 %product.i.i.i62.i.i33, 32
  %xored.i.i.i64.i.i35 = xor i64 %shifted.i.i.i63.i.i34, %product.i.i.i62.i.i33
  %hash.i.i.i65.i.i36 = and i64 %xored.i.i.i64.i.i35, %tbl_size.i.i60.i.i31
  %offset_ptr.i.i66.i.i37 = getelementptr i32, ptr %offset_tbl.i.i61.i.i32, i64 %hash.i.i.i65.i.i36
  %offset.i.i67.i.i38 = load i32, ptr %offset_ptr.i.i66.i.i37, align 4
  %eq.i70.i.i39 = icmp eq i32 %1060, %offset.i.i67.i.i38
  call void @llvm.assume(i1 %eq.i70.i.i39) #30
  %1062 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %1063 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1054)
  %1064 = sext i32 %1060 to i64
  %1065 = getelementptr ptr, ptr %1054, i64 %1064
  %1066 = getelementptr i8, ptr %1065, i64 64
  %1067 = load ptr, ptr %1066, align 8
  %1068 = call ptr %1067({ ptr, ptr, ptr, i32 } %1061, ptr nonnull %0)
  %1069 = call i32 %1068({ ptr, ptr, ptr, i32 } %1061, { ptr, ptr, ptr, i32 } %1061, ptr nonnull %0)
  %1070 = icmp eq i32 %1069, 0
  %1071 = load i32, ptr %1020, align 4
  %1072 = mul i32 %1071, 10
  %1073 = add i32 %1072, 10
  %1074 = mul i32 %1052, 7
  %1075 = icmp sge i32 %1073, %1074
  %1076 = or i1 %1070, %1075
  br i1 %1076, label %1077, label %HashMap_insert_keyK_valueV.exit.i40

1077:                                             ; preds = %.lr.ph.i13
  %1078 = shl i32 %1052, 1
  %1079 = call i32 @llvm.smax.i32(i32 %1078, i32 16)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %88)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %89)
  %1080 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1081 = load ptr, ptr %1016, align 8
  %1082 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1081, 0
  %1083 = load ptr, ptr %1017, align 8
  %1084 = insertvalue { ptr, ptr, ptr, i32 } %1082, ptr %1083, 1
  %1085 = load ptr, ptr %1018, align 8
  %1086 = insertvalue { ptr, ptr, ptr, i32 } %1084, ptr %1085, 2
  %1087 = load i32, ptr %1019, align 4
  %1088 = insertvalue { ptr, ptr, ptr, i32 } %1086, i32 %1087, 3
  %hash_coef_ptr.i.i39.i.i173 = getelementptr i8, ptr %1081, i64 8
  %tbl_size_ptr.i.i40.i.i174 = getelementptr i8, ptr %1081, i64 16
  %offset_tbl_ptr.i.i41.i.i175 = getelementptr i8, ptr %1081, i64 40
  %hash_coef.i.i42.i.i176 = load i64, ptr %hash_coef_ptr.i.i39.i.i173, align 4
  %tbl_size.i.i43.i.i177 = load i64, ptr %tbl_size_ptr.i.i40.i.i174, align 4
  %offset_tbl.i.i44.i.i178 = load ptr, ptr %offset_tbl_ptr.i.i41.i.i175, align 8
  %product.i.i.i45.i.i179 = mul i64 %hash_coef.i.i42.i.i176, -5261542750394134544
  %shifted.i.i.i46.i.i180 = lshr i64 %product.i.i.i45.i.i179, 32
  %xored.i.i.i47.i.i181 = xor i64 %shifted.i.i.i46.i.i180, %product.i.i.i45.i.i179
  %hash.i.i.i48.i.i182 = and i64 %xored.i.i.i47.i.i181, %tbl_size.i.i43.i.i177
  %offset_ptr.i.i49.i.i183 = getelementptr i32, ptr %offset_tbl.i.i44.i.i178, i64 %hash.i.i.i48.i.i182
  %offset.i.i50.i.i184 = load i32, ptr %offset_ptr.i.i49.i.i183, align 4
  %eq.i.i242.i = icmp eq i32 %1087, %offset.i.i50.i.i184
  call void @llvm.assume(i1 %eq.i.i242.i) #30
  %1089 = load ptr, ptr %result.i.i5, align 8
  %1090 = load ptr, ptr %998, align 8
  %result.i.i243.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1091 = getelementptr i8, ptr %result.i.i243.i, i64 16
  store ptr @_parameterization_Nil, ptr %1091, align 8
  %result.i66.i.i185 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1092 = getelementptr i8, ptr %result.i66.i.i185, i64 16
  store ptr %1090, ptr %1092, align 8
  %1093 = getelementptr i8, ptr %result.i66.i.i185, i64 8
  store ptr %1089, ptr %1093, align 8
  %1094 = getelementptr i8, ptr %result.i66.i.i185, i64 24
  store ptr null, ptr %1094, align 8
  %1095 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i66.i.i185)
  store ptr @Entry, ptr %result.i66.i.i185, align 8
  %1096 = getelementptr i8, ptr %result.i.i243.i, i64 8
  store ptr %result.i66.i.i185, ptr %1096, align 8
  %1097 = getelementptr i8, ptr %result.i.i243.i, i64 24
  store ptr null, ptr %1097, align 8
  %1098 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i243.i)
  store ptr @union_typ, ptr %result.i.i243.i, align 8
  %result.i67.i.i186 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i243.i, ptr %result.i67.i.i186, align 8
  %1099 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i67.i.i186)
  %1100 = getelementptr i8, ptr %result.i67.i.i186, i64 16
  store i32 %1079, ptr %1100, align 4
  %1101 = getelementptr i8, ptr %result.i67.i.i186, i64 20
  store i32 %1079, ptr %1101, align 4
  %1102 = zext nneg i32 %1079 to i64
  %1103 = shl nuw nsw i64 %1102, 5
  %result.i.i.i244.i = call noalias ptr @bump_malloc_inner(i64 noundef %1103, ptr nonnull @current_ptr) #29
  %1104 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %1105 = getelementptr i8, ptr %result.i67.i.i186, i64 8
  store ptr %result.i.i.i244.i, ptr %1105, align 8
  store ptr @Array, ptr %1016, align 8
  store ptr %result.i67.i.i186, ptr %1017, align 8
  store i32 9, ptr %1019, align 4
  store i32 0, ptr %1026, align 4
  store i32 0, ptr %1020, align 4
  %invariant.gep.i.i187 = getelementptr i8, ptr %1081, i64 64
  %1106 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1107 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %1108 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %1081)
  %1109 = sext i32 %1087 to i64
  %gep.i337.i = getelementptr ptr, ptr %invariant.gep.i.i187, i64 %1109
  %1110 = load ptr, ptr %gep.i337.i, align 8
  %1111 = call ptr %1110({ ptr, ptr, ptr, i32 } %1088, ptr nonnull %0)
  %1112 = call i32 %1111({ ptr, ptr, ptr, i32 } %1088, { ptr, ptr, ptr, i32 } %1088, ptr nonnull %0)
  %1113 = icmp sgt i32 %1112, 0
  br i1 %1113, label %.lr.ph340.i, label %HashMap_resize_new_capacityPtri32.exit.i188

.lr.ph340.i:                                      ; preds = %1077
  %invariant.gep172.i.i189 = getelementptr i8, ptr %1081, i64 120
  %1114 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %gep173.i.i190 = getelementptr ptr, ptr %invariant.gep172.i.i189, i64 %1109
  br label %1115

1115:                                             ; preds = %._crit_edge3.i.i193, %.lr.ph340.i
  %.reg2mem31.0.i338.i = phi i32 [ 0, %.lr.ph340.i ], [ %1382, %._crit_edge3.i.i193 ]
  store ptr @_parameterization_Ptri32, ptr %88, align 8
  %1116 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %88)
  %1117 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %1081)
  %1118 = load ptr, ptr %gep173.i.i190, align 8
  store ptr @i32_typ, ptr %89, align 8
  %1119 = call ptr %1118({ ptr, ptr, ptr, i32 } %1088, ptr nonnull %89)
  %1120 = call { ptr, i160 } %1119({ ptr, ptr, ptr, i32 } %1088, { ptr, ptr, ptr, i32 } %1088, ptr nonnull %88, i32 %.reg2mem31.0.i338.i)
  %.fca.0.extract30.i.i191 = extractvalue { ptr, i160 } %1120, 0
  %1121 = icmp ne ptr %.fca.0.extract30.i.i191, @nil_typ
  %1122 = icmp ne ptr %.fca.0.extract30.i.i191, null
  %.not37.i.i192 = and i1 %1121, %1122
  br i1 %.not37.i.i192, label %1123, label %._crit_edge3.i.i193

1123:                                             ; preds = %1115
  %.fca.1.extract32.i.i194 = extractvalue { ptr, i160 } %1120, 1
  %.sroa.5164.8.extract.trunc.i.i195 = trunc i160 %.fca.1.extract32.i.i194 to i64
  %1124 = inttoptr i64 %.sroa.5164.8.extract.trunc.i.i195 to ptr
  %.sroa.9.8.extract.shift.i.i196 = lshr i160 %.fca.1.extract32.i.i194, 64
  %.sroa.9.8.extract.trunc.i.i197 = trunc i160 %.sroa.9.8.extract.shift.i.i196 to i64
  %1125 = inttoptr i64 %.sroa.9.8.extract.trunc.i.i197 to ptr
  %hash_coef_ptr.i.i83.i.i198 = getelementptr i8, ptr %.fca.0.extract30.i.i191, i64 8
  %tbl_size_ptr.i.i84.i.i199 = getelementptr i8, ptr %.fca.0.extract30.i.i191, i64 16
  %offset_tbl_ptr.i.i85.i.i200 = getelementptr i8, ptr %.fca.0.extract30.i.i191, i64 40
  %hash_coef.i.i86.i.i201 = load i64, ptr %hash_coef_ptr.i.i83.i.i198, align 4
  %tbl_size.i.i87.i.i202 = load i64, ptr %tbl_size_ptr.i.i84.i.i199, align 4
  %offset_tbl.i.i88.i.i203 = load ptr, ptr %offset_tbl_ptr.i.i85.i.i200, align 8
  %product.i.i.i89.i.i204 = mul i64 %hash_coef.i.i86.i.i201, 4015701072841558310
  %shifted.i.i.i90.i.i205 = lshr i64 %product.i.i.i89.i.i204, 32
  %xored.i.i.i91.i.i206 = xor i64 %shifted.i.i.i90.i.i205, %product.i.i.i89.i.i204
  %hash.i.i.i92.i.i207 = and i64 %xored.i.i.i91.i.i206, %tbl_size.i.i87.i.i202
  %offset_ptr.i.i93.i.i208 = getelementptr i32, ptr %offset_tbl.i.i88.i.i203, i64 %hash.i.i.i92.i.i207
  %offset.i.i94.i.i209 = load i32, ptr %offset_ptr.i.i93.i.i208, align 4
  %1126 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract30.i.i191, 0
  %1127 = insertvalue { ptr, ptr, ptr, i32 } %1126, ptr %1124, 1
  %1128 = insertvalue { ptr, ptr, ptr, i32 } %1127, ptr %1125, 2
  %1129 = insertvalue { ptr, ptr, ptr, i32 } %1128, i32 %offset.i.i94.i.i209, 3
  %1130 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1131 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %1132 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract30.i.i191)
  %1133 = sext i32 %offset.i.i94.i.i209 to i64
  %1134 = getelementptr ptr, ptr %.fca.0.extract30.i.i191, i64 %1133
  %1135 = getelementptr i8, ptr %1134, i64 56
  %1136 = load ptr, ptr %1135, align 8
  %1137 = call ptr %1136({ ptr, ptr, ptr, i32 } %1129, ptr nonnull %0)
  %1138 = call { ptr, i160 } %1137({ ptr, ptr, ptr, i32 } %1129, { ptr, ptr, ptr, i32 } %1129, ptr nonnull %0)
  %.fca.0.extract23.i.i210 = extractvalue { ptr, i160 } %1138, 0
  %1139 = getelementptr i8, ptr %.fca.0.extract23.i.i210, i64 8
  %1140 = getelementptr i8, ptr %.fca.0.extract23.i.i210, i64 16
  %1141 = getelementptr i8, ptr %.fca.0.extract23.i.i210, i64 24
  %1142 = getelementptr i8, ptr %.fca.0.extract23.i.i210, i64 32
  %1143 = load i64, ptr %1139, align 4
  %1144 = load i64, ptr %1140, align 4
  %1145 = load ptr, ptr %1141, align 8
  %1146 = load ptr, ptr %1142, align 8
  %result.i96.i.i211 = call i1 %1145(i64 %1144, i64 %1143, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %1146) #3
  br i1 %result.i96.i.i211, label %._crit_edge3.i.i193, label %1147

1147:                                             ; preds = %1123
  %result.i97.i.i212 = call i1 %1145(i64 %1144, i64 %1143, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr readonly %1146) #3
  br i1 %result.i97.i.i212, label %1148, label %._crit_edge3.i.i193

1148:                                             ; preds = %1147
  %1149 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1150 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %1151 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract30.i.i191)
  %1152 = getelementptr i8, ptr %1134, i64 48
  %1153 = load ptr, ptr %1152, align 8
  %1154 = call ptr %1153({ ptr, ptr, ptr, i32 } %1129, ptr nonnull %0)
  %1155 = call { ptr, i160 } %1154({ ptr, ptr, ptr, i32 } %1129, { ptr, ptr, ptr, i32 } %1129, ptr nonnull %0)
  %1156 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1157 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %1158 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract30.i.i191)
  %1159 = getelementptr i8, ptr %1134, i64 64
  %1160 = load ptr, ptr %1159, align 8
  %1161 = call ptr %1160({ ptr, ptr, ptr, i32 } %1129, ptr nonnull %0)
  %1162 = call i32 %1161({ ptr, ptr, ptr, i32 } %1129, { ptr, ptr, ptr, i32 } %1129, ptr nonnull %0)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %75)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %76)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %77)
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %78)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %79)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %80)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %71)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %72)
  %1163 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1164 = load ptr, ptr %1016, align 8
  %1165 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1164, 0
  %1166 = load ptr, ptr %1017, align 8
  %1167 = insertvalue { ptr, ptr, ptr, i32 } %1165, ptr %1166, 1
  %1168 = load ptr, ptr %1018, align 8
  %1169 = insertvalue { ptr, ptr, ptr, i32 } %1167, ptr %1168, 2
  %1170 = load i32, ptr %1019, align 4
  %1171 = insertvalue { ptr, ptr, ptr, i32 } %1169, i32 %1170, 3
  %hash_coef_ptr.i.i51.i549.i = getelementptr i8, ptr %1164, i64 8
  %tbl_size_ptr.i.i52.i550.i = getelementptr i8, ptr %1164, i64 16
  %offset_tbl_ptr.i.i53.i551.i = getelementptr i8, ptr %1164, i64 40
  %hash_coef.i.i54.i552.i = load i64, ptr %hash_coef_ptr.i.i51.i549.i, align 4
  %tbl_size.i.i55.i553.i = load i64, ptr %tbl_size_ptr.i.i52.i550.i, align 4
  %offset_tbl.i.i56.i554.i = load ptr, ptr %offset_tbl_ptr.i.i53.i551.i, align 8
  %product.i.i.i57.i555.i = mul i64 %hash_coef.i.i54.i552.i, -5261542750394134544
  %shifted.i.i.i58.i556.i = lshr i64 %product.i.i.i57.i555.i, 32
  %xored.i.i.i59.i557.i = xor i64 %shifted.i.i.i58.i556.i, %product.i.i.i57.i555.i
  %hash.i.i.i60.i558.i = and i64 %xored.i.i.i59.i557.i, %tbl_size.i.i55.i553.i
  %offset_ptr.i.i61.i559.i = getelementptr i32, ptr %offset_tbl.i.i56.i554.i, i64 %hash.i.i.i60.i558.i
  %offset.i.i62.i560.i = load i32, ptr %offset_ptr.i.i61.i559.i, align 4
  %eq.i.i561.i = icmp eq i32 %1170, %offset.i.i62.i560.i
  call void @llvm.assume(i1 %eq.i.i561.i) #30
  %1172 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %1173 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1164)
  %1174 = sext i32 %1170 to i64
  %1175 = getelementptr ptr, ptr %1164, i64 %1174
  %1176 = getelementptr i8, ptr %1175, i64 64
  %1177 = load ptr, ptr %1176, align 8
  %1178 = call ptr %1177({ ptr, ptr, ptr, i32 } %1171, ptr nonnull %0)
  %1179 = call i32 %1178({ ptr, ptr, ptr, i32 } %1171, { ptr, ptr, ptr, i32 } %1171, ptr nonnull %0)
  %1180 = add i32 %1179, -1
  %1181 = and i32 %1180, %1162
  %1182 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  br label %1183

1183:                                             ; preds = %1232, %1148
  %spec.store.select.i596605.i = phi i32 [ %spec.store.select.i596.i, %1232 ], [ -1, %1148 ]
  %.0..0..0..i562.i = phi i32 [ %1250, %1232 ], [ %1181, %1148 ]
  %1184 = load ptr, ptr %1016, align 8
  %1185 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1184, 0
  %1186 = load ptr, ptr %1017, align 8
  %1187 = insertvalue { ptr, ptr, ptr, i32 } %1185, ptr %1186, 1
  %1188 = load ptr, ptr %1018, align 8
  %1189 = insertvalue { ptr, ptr, ptr, i32 } %1187, ptr %1188, 2
  %1190 = load i32, ptr %1019, align 4
  %1191 = insertvalue { ptr, ptr, ptr, i32 } %1189, i32 %1190, 3
  %hash_coef_ptr.i.i65.i563.i = getelementptr i8, ptr %1184, i64 8
  %tbl_size_ptr.i.i66.i564.i = getelementptr i8, ptr %1184, i64 16
  %offset_tbl_ptr.i.i67.i565.i = getelementptr i8, ptr %1184, i64 40
  %hash_coef.i.i68.i566.i = load i64, ptr %hash_coef_ptr.i.i65.i563.i, align 4
  %tbl_size.i.i69.i567.i = load i64, ptr %tbl_size_ptr.i.i66.i564.i, align 4
  %offset_tbl.i.i70.i568.i = load ptr, ptr %offset_tbl_ptr.i.i67.i565.i, align 8
  %product.i.i.i71.i569.i = mul i64 %hash_coef.i.i68.i566.i, -5261542750394134544
  %shifted.i.i.i72.i570.i = lshr i64 %product.i.i.i71.i569.i, 32
  %xored.i.i.i73.i571.i = xor i64 %shifted.i.i.i72.i570.i, %product.i.i.i71.i569.i
  %hash.i.i.i74.i572.i = and i64 %xored.i.i.i73.i571.i, %tbl_size.i.i69.i567.i
  %offset_ptr.i.i75.i573.i = getelementptr i32, ptr %offset_tbl.i.i70.i568.i, i64 %hash.i.i.i74.i572.i
  %offset.i.i76.i574.i = load i32, ptr %offset_ptr.i.i75.i573.i, align 4
  %eq.i79.i575.i = icmp eq i32 %1190, %offset.i.i76.i574.i
  call void @llvm.assume(i1 %eq.i79.i575.i) #30
  %1192 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  store ptr @_parameterization_Ptri32, ptr %71, align 8
  %1193 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %71)
  %1194 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1184)
  %1195 = sext i32 %1190 to i64
  %1196 = getelementptr ptr, ptr %1184, i64 %1195
  %1197 = getelementptr i8, ptr %1196, i64 120
  %1198 = load ptr, ptr %1197, align 8
  store ptr @i32_typ, ptr %72, align 8
  %1199 = call ptr %1198({ ptr, ptr, ptr, i32 } %1191, ptr nonnull %72)
  %1200 = call { ptr, i160 } %1199({ ptr, ptr, ptr, i32 } %1191, { ptr, ptr, ptr, i32 } %1191, ptr nonnull %71, i32 %.0..0..0..i562.i)
  %.fca.0.extract36.i576.i = extractvalue { ptr, i160 } %1200, 0
  %1201 = icmp eq ptr %.fca.0.extract36.i576.i, @nil_typ
  %1202 = icmp eq ptr %.fca.0.extract36.i576.i, null
  %1203 = or i1 %1201, %1202
  br i1 %1203, label %1251, label %1204

1204:                                             ; preds = %1183
  %.fca.1.extract38.i577.i = extractvalue { ptr, i160 } %1200, 1
  %.sroa.5.8.extract.shift.i578.i = lshr i160 %.fca.1.extract38.i577.i, 64
  %.sroa.5.8.extract.trunc.i579.i = trunc i160 %.sroa.5.8.extract.shift.i578.i to i64
  %.sroa.2.8.extract.trunc165.i580.i = trunc i160 %.fca.1.extract38.i577.i to i64
  %1205 = inttoptr i64 %.sroa.2.8.extract.trunc165.i580.i to ptr
  %1206 = inttoptr i64 %.sroa.5.8.extract.trunc.i579.i to ptr
  %hash_coef_ptr.i.i81.i581.i = getelementptr i8, ptr %.fca.0.extract36.i576.i, i64 8
  %tbl_size_ptr.i.i82.i582.i = getelementptr i8, ptr %.fca.0.extract36.i576.i, i64 16
  %offset_tbl_ptr.i.i83.i583.i = getelementptr i8, ptr %.fca.0.extract36.i576.i, i64 40
  %hash_coef.i.i84.i584.i = load i64, ptr %hash_coef_ptr.i.i81.i581.i, align 4
  %tbl_size.i.i85.i585.i = load i64, ptr %tbl_size_ptr.i.i82.i582.i, align 4
  %offset_tbl.i.i86.i586.i = load ptr, ptr %offset_tbl_ptr.i.i83.i583.i, align 8
  %product.i.i.i87.i587.i = mul i64 %hash_coef.i.i84.i584.i, 4015701072841558310
  %shifted.i.i.i88.i588.i = lshr i64 %product.i.i.i87.i587.i, 32
  %xored.i.i.i89.i589.i = xor i64 %shifted.i.i.i88.i588.i, %product.i.i.i87.i587.i
  %hash.i.i.i90.i590.i = and i64 %xored.i.i.i89.i589.i, %tbl_size.i.i85.i585.i
  %offset_ptr.i.i91.i591.i = getelementptr i32, ptr %offset_tbl.i.i86.i586.i, i64 %hash.i.i.i90.i590.i
  %offset.i.i92.i592.i = load i32, ptr %offset_ptr.i.i91.i591.i, align 4
  %1207 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract36.i576.i, 0
  %1208 = insertvalue { ptr, ptr, ptr, i32 } %1207, ptr %1205, 1
  %1209 = insertvalue { ptr, ptr, ptr, i32 } %1208, ptr %1206, 2
  %1210 = insertvalue { ptr, ptr, ptr, i32 } %1209, i32 %offset.i.i92.i592.i, 3
  %1211 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1212 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %1213 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i576.i)
  %1214 = sext i32 %offset.i.i92.i592.i to i64
  %1215 = getelementptr ptr, ptr %.fca.0.extract36.i576.i, i64 %1214
  %1216 = getelementptr i8, ptr %1215, i64 64
  %1217 = load ptr, ptr %1216, align 8
  %1218 = call ptr %1217({ ptr, ptr, ptr, i32 } %1210, ptr nonnull %0)
  %1219 = call i32 %1218({ ptr, ptr, ptr, i32 } %1210, { ptr, ptr, ptr, i32 } %1210, ptr nonnull %0)
  %1220 = icmp eq i32 %1219, %1162
  %1221 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1222 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %1223 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i576.i)
  %1224 = getelementptr i8, ptr %1215, i64 48
  %1225 = load ptr, ptr %1224, align 8
  %1226 = call ptr %1225({ ptr, ptr, ptr, i32 } %1210, ptr nonnull %0)
  %1227 = call { ptr, i160 } %1226({ ptr, ptr, ptr, i32 } %1210, { ptr, ptr, ptr, i32 } %1210, ptr nonnull %0)
  %1228 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1229 = load ptr, ptr %1004, align 8
  %1230 = call i1 %1229({ ptr, i160 } %1227, { ptr, i160 } %1155)
  %1231 = and i1 %1220, %1230
  br i1 %1231, label %HashMap_find_slot_keyK_hashPtri32.exit597.i, label %1232

1232:                                             ; preds = %1204
  %1233 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1234 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %1235 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i576.i)
  %1236 = getelementptr i8, ptr %1215, i64 56
  %1237 = load ptr, ptr %1236, align 8
  %1238 = call ptr %1237({ ptr, ptr, ptr, i32 } %1210, ptr nonnull %0)
  %1239 = call { ptr, i160 } %1238({ ptr, ptr, ptr, i32 } %1210, { ptr, ptr, ptr, i32 } %1210, ptr nonnull %0)
  %.fca.0.extract15.i593.i = extractvalue { ptr, i160 } %1239, 0
  %1240 = getelementptr i8, ptr %.fca.0.extract15.i593.i, i64 8
  %1241 = getelementptr i8, ptr %.fca.0.extract15.i593.i, i64 16
  %1242 = getelementptr i8, ptr %.fca.0.extract15.i593.i, i64 24
  %1243 = getelementptr i8, ptr %.fca.0.extract15.i593.i, i64 32
  %1244 = load i64, ptr %1240, align 4
  %1245 = load i64, ptr %1241, align 4
  %1246 = load ptr, ptr %1242, align 8
  %1247 = load ptr, ptr %1243, align 8
  %result.i.i594.i = call i1 %1246(i64 %1245, i64 %1244, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %1247) #3
  %1248 = icmp eq i32 %spec.store.select.i596605.i, -1
  %or.cond.i595.i = select i1 %result.i.i594.i, i1 %1248, i1 false
  %spec.store.select.i596.i = select i1 %or.cond.i595.i, i32 %.0..0..0..i562.i, i32 %spec.store.select.i596605.i
  %1249 = add i32 %.0..0..0..i562.i, 1
  %1250 = and i32 %1249, %1180
  br label %1183

1251:                                             ; preds = %1183
  %1252 = icmp eq i32 %spec.store.select.i596605.i, -1
  %.pre620.i = select i1 %1252, i32 %.0..0..0..i562.i, i32 %spec.store.select.i596605.i
  br label %HashMap_find_slot_keyK_hashPtri32.exit597.i

HashMap_find_slot_keyK_hashPtri32.exit597.i:      ; preds = %1204, %1251
  %1253 = phi i32 [ %.pre620.i, %1251 ], [ %.0..0..0..i562.i, %1204 ]
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %71)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %72)
  %1254 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1255 = load ptr, ptr %1016, align 8
  %1256 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1255, 0
  %1257 = load ptr, ptr %1017, align 8
  %1258 = insertvalue { ptr, ptr, ptr, i32 } %1256, ptr %1257, 1
  %1259 = load ptr, ptr %1018, align 8
  %1260 = insertvalue { ptr, ptr, ptr, i32 } %1258, ptr %1259, 2
  %1261 = load i32, ptr %1019, align 4
  %1262 = insertvalue { ptr, ptr, ptr, i32 } %1260, i32 %1261, 3
  %hash_coef_ptr.i.i56.i370.i = getelementptr i8, ptr %1255, i64 8
  %tbl_size_ptr.i.i57.i371.i = getelementptr i8, ptr %1255, i64 16
  %offset_tbl_ptr.i.i58.i372.i = getelementptr i8, ptr %1255, i64 40
  %hash_coef.i.i59.i373.i = load i64, ptr %hash_coef_ptr.i.i56.i370.i, align 4
  %tbl_size.i.i60.i374.i = load i64, ptr %tbl_size_ptr.i.i57.i371.i, align 4
  %offset_tbl.i.i61.i375.i = load ptr, ptr %offset_tbl_ptr.i.i58.i372.i, align 8
  %product.i.i.i62.i376.i = mul i64 %hash_coef.i.i59.i373.i, -5261542750394134544
  %shifted.i.i.i63.i377.i = lshr i64 %product.i.i.i62.i376.i, 32
  %xored.i.i.i64.i378.i = xor i64 %shifted.i.i.i63.i377.i, %product.i.i.i62.i376.i
  %hash.i.i.i65.i379.i = and i64 %xored.i.i.i64.i378.i, %tbl_size.i.i60.i374.i
  %offset_ptr.i.i66.i380.i = getelementptr i32, ptr %offset_tbl.i.i61.i375.i, i64 %hash.i.i.i65.i379.i
  %offset.i.i67.i381.i = load i32, ptr %offset_ptr.i.i66.i380.i, align 4
  %eq.i.i382.i = icmp eq i32 %1261, %offset.i.i67.i381.i
  call void @llvm.assume(i1 %eq.i.i382.i) #30
  store ptr @_parameterization_Ptri32, ptr %75, align 8
  %1263 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %75)
  %1264 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1255)
  %1265 = sext i32 %1261 to i64
  %1266 = getelementptr ptr, ptr %1255, i64 %1265
  %1267 = getelementptr i8, ptr %1266, i64 120
  %1268 = load ptr, ptr %1267, align 8
  store ptr @i32_typ, ptr %76, align 8
  %1269 = call ptr %1268({ ptr, ptr, ptr, i32 } %1262, ptr nonnull %76)
  %1270 = call { ptr, i160 } %1269({ ptr, ptr, ptr, i32 } %1262, { ptr, ptr, ptr, i32 } %1262, ptr nonnull %75, i32 %1253)
  %.fca.0.extract2.i383.i = extractvalue { ptr, i160 } %1270, 0
  %1271 = load ptr, ptr %result.i.i5, align 8
  %1272 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1273 = load ptr, ptr %998, align 8
  %1274 = load ptr, ptr %1271, align 8
  %1275 = getelementptr i8, ptr %1274, i64 48
  %1276 = load ptr, ptr %1275, align 8
  %1277 = call { i64, i64 } %1276(ptr nonnull %1271)
  %1278 = extractvalue { i64, i64 } %1277, 0
  %1279 = extractvalue { i64, i64 } %1277, 1
  %1280 = call i64 @llvm.umax.i64(i64 %1279, i64 8)
  %1281 = urem i64 16, %1279
  %1282 = icmp eq i64 %1281, 0
  %1283 = sub i64 %1279, %1281
  %1284 = select i1 %1282, i64 0, i64 %1283
  %1285 = add i64 %1284, %1278
  %1286 = add i64 %1285, 16
  %1287 = and i64 %1285, 7
  %1288 = icmp eq i64 %1287, 0
  %1289 = sub nuw nsw i64 40, %1287
  %1290 = select i1 %1288, i64 32, i64 %1289
  %1291 = add i64 %1286, %1290
  %1292 = and i64 %1291, 3
  %1293 = icmp eq i64 %1292, 0
  %1294 = sub nuw nsw i64 8, %1292
  %1295 = select i1 %1293, i64 4, i64 %1294
  %1296 = add i64 %1295, %1291
  %1297 = urem i64 %1296, %1280
  %1298 = icmp eq i64 %1297, 0
  %1299 = sub i64 %1280, %1297
  %1300 = select i1 %1298, i64 0, i64 %1299
  %1301 = add i64 %1296, %1300
  %result.i.i384.i = call noalias ptr @bump_malloc_inner(i64 noundef %1301, ptr nonnull @current_ptr) #29
  store ptr %1271, ptr %result.i.i384.i, align 8
  %1302 = getelementptr i8, ptr %result.i.i384.i, i64 8
  store ptr %1273, ptr %1302, align 8
  %1303 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i.i384.i)
  store ptr @Entry, ptr %77, align 8
  store ptr %result.i.i384.i, ptr %1027, align 8
  store i32 9, ptr %1028, align 8
  %1304 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %77)
  %1305 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Entry, ptr undef, ptr undef, i32 undef }, ptr %result.i.i384.i, 1
  %1306 = insertvalue { ptr, ptr, ptr, i32 } %1305, ptr undef, 2
  %1307 = insertvalue { ptr, ptr, ptr, i32 } %1306, i32 9, 3
  %1308 = load ptr, ptr %result.i.i5, align 8
  %1309 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1310 = load ptr, ptr %998, align 8
  store ptr %1308, ptr %78, align 8
  store ptr %1310, ptr %1030, align 8
  store ptr @_parameterization_Ptri32, ptr %1031, align 8
  %1311 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %78)
  %1312 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %1313 = load i64, ptr %1139, align 4
  %1314 = load i64, ptr %1140, align 4
  %1315 = load ptr, ptr %1141, align 8
  %1316 = load ptr, ptr %1142, align 8
  %result.i.i.i385.i = call i1 %1315(i64 %1314, i64 %1313, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr readonly %1316) #3
  %1317 = select i1 %result.i.i.i385.i, i64 10, i64 9
  %gep.i213 = getelementptr [14 x ptr], ptr getelementptr inbounds (i8, ptr @Entry, i64 72), i64 0, i64 %1317
  %1318 = load ptr, ptr %gep.i213, align 8
  call void %1318({ ptr, ptr, ptr, i32 } %1307, { ptr, ptr, ptr, i32 } %1307, ptr nonnull %78, { ptr, i160 } %1155, { ptr, i160 } %1138, i32 %1162)
  %1319 = load ptr, ptr %1029, align 8
  %1320 = ptrtoint ptr %result.i.i384.i to i64
  %1321 = ptrtoint ptr %1319 to i64
  %.sroa.2.0.insert.ext.i386.i = zext i64 %1321 to i160
  %.sroa.2.0.insert.shift.i387.i = shl nuw nsw i160 %.sroa.2.0.insert.ext.i386.i, 64
  %.sroa.0.0.insert.ext.i389.i = zext i64 %1320 to i160
  %.sroa.2.0.insert.insert.i388.i = or disjoint i160 %.sroa.2.0.insert.shift.i387.i, %.sroa.0.0.insert.ext.i389.i
  %.sroa.0.0.insert.insert.i390.i = or disjoint i160 %.sroa.2.0.insert.insert.i388.i, 3062541302288446171170371466885913903104
  %1322 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0.0.insert.insert.i390.i, 1
  %1323 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1324 = load ptr, ptr %1016, align 8
  %1325 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1324, 0
  %1326 = load ptr, ptr %1017, align 8
  %1327 = insertvalue { ptr, ptr, ptr, i32 } %1325, ptr %1326, 1
  %1328 = load ptr, ptr %1018, align 8
  %1329 = insertvalue { ptr, ptr, ptr, i32 } %1327, ptr %1328, 2
  %1330 = load i32, ptr %1019, align 4
  %1331 = insertvalue { ptr, ptr, ptr, i32 } %1329, i32 %1330, 3
  %hash_coef_ptr.i.i84.i391.i = getelementptr i8, ptr %1324, i64 8
  %tbl_size_ptr.i.i85.i392.i = getelementptr i8, ptr %1324, i64 16
  %offset_tbl_ptr.i.i86.i393.i = getelementptr i8, ptr %1324, i64 40
  %hash_coef.i.i87.i394.i = load i64, ptr %hash_coef_ptr.i.i84.i391.i, align 4
  %tbl_size.i.i88.i395.i = load i64, ptr %tbl_size_ptr.i.i85.i392.i, align 4
  %offset_tbl.i.i89.i396.i = load ptr, ptr %offset_tbl_ptr.i.i86.i393.i, align 8
  %product.i.i.i90.i397.i = mul i64 %hash_coef.i.i87.i394.i, -5261542750394134544
  %shifted.i.i.i91.i398.i = lshr i64 %product.i.i.i90.i397.i, 32
  %xored.i.i.i92.i399.i = xor i64 %shifted.i.i.i91.i398.i, %product.i.i.i90.i397.i
  %hash.i.i.i93.i400.i = and i64 %xored.i.i.i92.i399.i, %tbl_size.i.i88.i395.i
  %offset_ptr.i.i94.i401.i = getelementptr i32, ptr %offset_tbl.i.i89.i396.i, i64 %hash.i.i.i93.i400.i
  %offset.i.i95.i402.i = load i32, ptr %offset_ptr.i.i94.i401.i, align 4
  %eq.i98.i403.i = icmp eq i32 %1330, %offset.i.i95.i402.i
  call void @llvm.assume(i1 %eq.i98.i403.i) #30
  %1332 = load ptr, ptr %result.i.i5, align 8
  %1333 = load ptr, ptr %998, align 8
  %result.i99.i404.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1334 = getelementptr i8, ptr %result.i99.i404.i, i64 16
  store ptr %1333, ptr %1334, align 8
  %1335 = getelementptr i8, ptr %result.i99.i404.i, i64 8
  store ptr %1332, ptr %1335, align 8
  %1336 = getelementptr i8, ptr %result.i99.i404.i, i64 24
  store ptr null, ptr %1336, align 8
  %1337 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i99.i404.i)
  store ptr @Entry, ptr %result.i99.i404.i, align 8
  store ptr @_parameterization_Ptri32, ptr %79, align 8
  store ptr %result.i99.i404.i, ptr %1032, align 8
  %1338 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %79)
  %1339 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1324)
  %1340 = sext i32 %1330 to i64
  %1341 = getelementptr ptr, ptr %1324, i64 %1340
  %1342 = getelementptr i8, ptr %1341, i64 128
  %1343 = load ptr, ptr %1342, align 8
  store ptr @i32_typ, ptr %80, align 8
  store ptr @Entry, ptr %1033, align 8
  %1344 = call ptr %1343({ ptr, ptr, ptr, i32 } %1331, ptr nonnull %80)
  call void %1344({ ptr, ptr, ptr, i32 } %1331, { ptr, ptr, ptr, i32 } %1331, ptr nonnull %79, i32 %1253, { ptr, i160 } %1322)
  %1345 = icmp eq ptr %.fca.0.extract2.i383.i, @nil_typ
  %1346 = icmp eq ptr %.fca.0.extract2.i383.i, null
  %1347 = or i1 %1345, %1346
  br i1 %1347, label %._crit_edge.thread.i426.i, label %._crit_edge.i405.i

._crit_edge.thread.i426.i:                        ; preds = %HashMap_find_slot_keyK_hashPtri32.exit597.i
  %1348 = load i32, ptr %1026, align 4
  %1349 = add i32 %1348, 1
  store i32 %1349, ptr %1026, align 4
  br label %._crit_edge1.sink.split.i424.i

._crit_edge.i405.i:                               ; preds = %HashMap_find_slot_keyK_hashPtri32.exit597.i
  %.fca.1.extract4.i406.i = extractvalue { ptr, i160 } %1270, 1
  %.sroa.3192.8.extract.trunc.i407.i = trunc i160 %.fca.1.extract4.i406.i to i64
  %1350 = inttoptr i64 %.sroa.3192.8.extract.trunc.i407.i to ptr
  %.sroa.5193.8.extract.shift.i408.i = lshr i160 %.fca.1.extract4.i406.i, 64
  %.sroa.5193.8.extract.trunc.i409.i = trunc i160 %.sroa.5193.8.extract.shift.i408.i to i64
  %1351 = inttoptr i64 %.sroa.5193.8.extract.trunc.i409.i to ptr
  %hash_coef_ptr.i.i101.i410.i = getelementptr i8, ptr %.fca.0.extract2.i383.i, i64 8
  %tbl_size_ptr.i.i102.i411.i = getelementptr i8, ptr %.fca.0.extract2.i383.i, i64 16
  %offset_tbl_ptr.i.i103.i412.i = getelementptr i8, ptr %.fca.0.extract2.i383.i, i64 40
  %hash_coef.i.i104.i413.i = load i64, ptr %hash_coef_ptr.i.i101.i410.i, align 4
  %tbl_size.i.i105.i414.i = load i64, ptr %tbl_size_ptr.i.i102.i411.i, align 4
  %offset_tbl.i.i106.i415.i = load ptr, ptr %offset_tbl_ptr.i.i103.i412.i, align 8
  %product.i.i.i107.i416.i = mul i64 %hash_coef.i.i104.i413.i, 4015701072841558310
  %shifted.i.i.i108.i417.i = lshr i64 %product.i.i.i107.i416.i, 32
  %xored.i.i.i109.i418.i = xor i64 %shifted.i.i.i108.i417.i, %product.i.i.i107.i416.i
  %hash.i.i.i110.i419.i = and i64 %xored.i.i.i109.i418.i, %tbl_size.i.i105.i414.i
  %offset_ptr.i.i111.i420.i = getelementptr i32, ptr %offset_tbl.i.i106.i415.i, i64 %hash.i.i.i110.i419.i
  %offset.i.i112.i421.i = load i32, ptr %offset_ptr.i.i111.i420.i, align 4
  %1352 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract2.i383.i, 0
  %1353 = insertvalue { ptr, ptr, ptr, i32 } %1352, ptr %1350, 1
  %1354 = insertvalue { ptr, ptr, ptr, i32 } %1353, ptr %1351, 2
  %1355 = insertvalue { ptr, ptr, ptr, i32 } %1354, i32 %offset.i.i112.i421.i, 3
  %1356 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1357 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %1358 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract2.i383.i)
  %1359 = sext i32 %offset.i.i112.i421.i to i64
  %1360 = getelementptr ptr, ptr %.fca.0.extract2.i383.i, i64 %1359
  %1361 = getelementptr i8, ptr %1360, i64 56
  %1362 = load ptr, ptr %1361, align 8
  %1363 = call ptr %1362({ ptr, ptr, ptr, i32 } %1355, ptr nonnull %0)
  %1364 = call { ptr, i160 } %1363({ ptr, ptr, ptr, i32 } %1355, { ptr, ptr, ptr, i32 } %1355, ptr nonnull %0)
  %.fca.0.extract45.i422.i = extractvalue { ptr, i160 } %1364, 0
  %1365 = getelementptr i8, ptr %.fca.0.extract45.i422.i, i64 8
  %1366 = getelementptr i8, ptr %.fca.0.extract45.i422.i, i64 16
  %1367 = getelementptr i8, ptr %.fca.0.extract45.i422.i, i64 24
  %1368 = getelementptr i8, ptr %.fca.0.extract45.i422.i, i64 32
  %1369 = load i64, ptr %1365, align 4
  %1370 = load i64, ptr %1366, align 4
  %1371 = load ptr, ptr %1367, align 8
  %1372 = load ptr, ptr %1368, align 8
  %result.i114.i423.i = call i1 %1371(i64 %1370, i64 %1369, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %1372) #3
  br i1 %result.i114.i423.i, label %._crit_edge1.sink.split.i424.i, label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit427.i

._crit_edge1.sink.split.i424.i:                   ; preds = %._crit_edge.i405.i, %._crit_edge.thread.i426.i
  %.sink202.i425.i = phi i64 [ 40, %._crit_edge.thread.i426.i ], [ 32, %._crit_edge.i405.i ]
  %1373 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1374 = getelementptr i8, ptr getelementptr inbounds (i8, ptr @HashMap, i64 72), i64 %.sink202.i425.i
  %1375 = load ptr, ptr %1374, align 8
  %1376 = load ptr, ptr %1375, align 8
  %1377 = call i32 %1376(ptr nonnull %result.i.i5)
  %1378 = add i32 %1377, 1
  %1379 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1380 = getelementptr i8, ptr %1375, i64 8
  %1381 = load ptr, ptr %1380, align 8
  call void %1381(ptr nonnull %result.i.i5, i32 %1378)
  br label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit427.i

HashMap_insert_internal_keyK_valueV_hashPtri32.exit427.i: ; preds = %._crit_edge1.sink.split.i424.i, %._crit_edge.i405.i
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %75)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %76)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %77)
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %78)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %79)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %80)
  br label %._crit_edge3.i.i193

._crit_edge3.i.i193:                              ; preds = %HashMap_insert_internal_keyK_valueV_hashPtri32.exit427.i, %1147, %1123, %1115
  %1382 = add nuw nsw i32 %.reg2mem31.0.i338.i, 1
  %1383 = load ptr, ptr %gep.i337.i, align 8
  %1384 = call ptr %1383({ ptr, ptr, ptr, i32 } %1088, ptr nonnull %0)
  %1385 = call i32 %1384({ ptr, ptr, ptr, i32 } %1088, { ptr, ptr, ptr, i32 } %1088, ptr nonnull %0)
  %1386 = icmp slt i32 %1382, %1385
  br i1 %1386, label %1115, label %HashMap_resize_new_capacityPtri32.exit.i188

HashMap_resize_new_capacityPtri32.exit.i188:      ; preds = %._crit_edge3.i.i193, %1077
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %88)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %89)
  br label %HashMap_insert_keyK_valueV.exit.i40

HashMap_insert_keyK_valueV.exit.i40:              ; preds = %HashMap_resize_new_capacityPtri32.exit.i188, %.lr.ph.i13
  %1387 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1388 = load ptr, ptr %1003, align 8
  %1389 = call i32 %1388({ ptr, i160 } %1035)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %83)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %84)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %85)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %86)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %87)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %73)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %74)
  %1390 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1391 = load ptr, ptr %1016, align 8
  %1392 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1391, 0
  %1393 = load ptr, ptr %1017, align 8
  %1394 = insertvalue { ptr, ptr, ptr, i32 } %1392, ptr %1393, 1
  %1395 = load ptr, ptr %1018, align 8
  %1396 = insertvalue { ptr, ptr, ptr, i32 } %1394, ptr %1395, 2
  %1397 = load i32, ptr %1019, align 4
  %1398 = insertvalue { ptr, ptr, ptr, i32 } %1396, i32 %1397, 3
  %hash_coef_ptr.i.i51.i444.i = getelementptr i8, ptr %1391, i64 8
  %tbl_size_ptr.i.i52.i445.i = getelementptr i8, ptr %1391, i64 16
  %offset_tbl_ptr.i.i53.i446.i = getelementptr i8, ptr %1391, i64 40
  %hash_coef.i.i54.i447.i = load i64, ptr %hash_coef_ptr.i.i51.i444.i, align 4
  %tbl_size.i.i55.i448.i = load i64, ptr %tbl_size_ptr.i.i52.i445.i, align 4
  %offset_tbl.i.i56.i449.i = load ptr, ptr %offset_tbl_ptr.i.i53.i446.i, align 8
  %product.i.i.i57.i450.i = mul i64 %hash_coef.i.i54.i447.i, -5261542750394134544
  %shifted.i.i.i58.i451.i = lshr i64 %product.i.i.i57.i450.i, 32
  %xored.i.i.i59.i452.i = xor i64 %shifted.i.i.i58.i451.i, %product.i.i.i57.i450.i
  %hash.i.i.i60.i453.i = and i64 %xored.i.i.i59.i452.i, %tbl_size.i.i55.i448.i
  %offset_ptr.i.i61.i454.i = getelementptr i32, ptr %offset_tbl.i.i56.i449.i, i64 %hash.i.i.i60.i453.i
  %offset.i.i62.i455.i = load i32, ptr %offset_ptr.i.i61.i454.i, align 4
  %eq.i.i456.i = icmp eq i32 %1397, %offset.i.i62.i455.i
  call void @llvm.assume(i1 %eq.i.i456.i) #30
  %1399 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %1400 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1391)
  %1401 = sext i32 %1397 to i64
  %1402 = getelementptr ptr, ptr %1391, i64 %1401
  %1403 = getelementptr i8, ptr %1402, i64 64
  %1404 = load ptr, ptr %1403, align 8
  %1405 = call ptr %1404({ ptr, ptr, ptr, i32 } %1398, ptr nonnull %0)
  %1406 = call i32 %1405({ ptr, ptr, ptr, i32 } %1398, { ptr, ptr, ptr, i32 } %1398, ptr nonnull %0)
  %1407 = add i32 %1406, -1
  %1408 = and i32 %1407, %1389
  %1409 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  br label %1410

1410:                                             ; preds = %1459, %HashMap_insert_keyK_valueV.exit.i40
  %spec.store.select.i491511.i = phi i32 [ %spec.store.select.i491.i, %1459 ], [ -1, %HashMap_insert_keyK_valueV.exit.i40 ]
  %.0..0..0..i457.i = phi i32 [ %1477, %1459 ], [ %1408, %HashMap_insert_keyK_valueV.exit.i40 ]
  %1411 = load ptr, ptr %1016, align 8
  %1412 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1411, 0
  %1413 = load ptr, ptr %1017, align 8
  %1414 = insertvalue { ptr, ptr, ptr, i32 } %1412, ptr %1413, 1
  %1415 = load ptr, ptr %1018, align 8
  %1416 = insertvalue { ptr, ptr, ptr, i32 } %1414, ptr %1415, 2
  %1417 = load i32, ptr %1019, align 4
  %1418 = insertvalue { ptr, ptr, ptr, i32 } %1416, i32 %1417, 3
  %hash_coef_ptr.i.i65.i458.i = getelementptr i8, ptr %1411, i64 8
  %tbl_size_ptr.i.i66.i459.i = getelementptr i8, ptr %1411, i64 16
  %offset_tbl_ptr.i.i67.i460.i = getelementptr i8, ptr %1411, i64 40
  %hash_coef.i.i68.i461.i = load i64, ptr %hash_coef_ptr.i.i65.i458.i, align 4
  %tbl_size.i.i69.i462.i = load i64, ptr %tbl_size_ptr.i.i66.i459.i, align 4
  %offset_tbl.i.i70.i463.i = load ptr, ptr %offset_tbl_ptr.i.i67.i460.i, align 8
  %product.i.i.i71.i464.i = mul i64 %hash_coef.i.i68.i461.i, -5261542750394134544
  %shifted.i.i.i72.i465.i = lshr i64 %product.i.i.i71.i464.i, 32
  %xored.i.i.i73.i466.i = xor i64 %shifted.i.i.i72.i465.i, %product.i.i.i71.i464.i
  %hash.i.i.i74.i467.i = and i64 %xored.i.i.i73.i466.i, %tbl_size.i.i69.i462.i
  %offset_ptr.i.i75.i468.i = getelementptr i32, ptr %offset_tbl.i.i70.i463.i, i64 %hash.i.i.i74.i467.i
  %offset.i.i76.i469.i = load i32, ptr %offset_ptr.i.i75.i468.i, align 4
  %eq.i79.i470.i = icmp eq i32 %1417, %offset.i.i76.i469.i
  call void @llvm.assume(i1 %eq.i79.i470.i) #30
  %1419 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  store ptr @_parameterization_Ptri32, ptr %73, align 8
  %1420 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %73)
  %1421 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1411)
  %1422 = sext i32 %1417 to i64
  %1423 = getelementptr ptr, ptr %1411, i64 %1422
  %1424 = getelementptr i8, ptr %1423, i64 120
  %1425 = load ptr, ptr %1424, align 8
  store ptr @i32_typ, ptr %74, align 8
  %1426 = call ptr %1425({ ptr, ptr, ptr, i32 } %1418, ptr nonnull %74)
  %1427 = call { ptr, i160 } %1426({ ptr, ptr, ptr, i32 } %1418, { ptr, ptr, ptr, i32 } %1418, ptr nonnull %73, i32 %.0..0..0..i457.i)
  %.fca.0.extract36.i471.i = extractvalue { ptr, i160 } %1427, 0
  %1428 = icmp eq ptr %.fca.0.extract36.i471.i, @nil_typ
  %1429 = icmp eq ptr %.fca.0.extract36.i471.i, null
  %1430 = or i1 %1428, %1429
  br i1 %1430, label %1478, label %1431

1431:                                             ; preds = %1410
  %.fca.1.extract38.i472.i = extractvalue { ptr, i160 } %1427, 1
  %.sroa.5.8.extract.shift.i473.i = lshr i160 %.fca.1.extract38.i472.i, 64
  %.sroa.5.8.extract.trunc.i474.i = trunc i160 %.sroa.5.8.extract.shift.i473.i to i64
  %.sroa.2.8.extract.trunc165.i475.i = trunc i160 %.fca.1.extract38.i472.i to i64
  %1432 = inttoptr i64 %.sroa.2.8.extract.trunc165.i475.i to ptr
  %1433 = inttoptr i64 %.sroa.5.8.extract.trunc.i474.i to ptr
  %hash_coef_ptr.i.i81.i476.i = getelementptr i8, ptr %.fca.0.extract36.i471.i, i64 8
  %tbl_size_ptr.i.i82.i477.i = getelementptr i8, ptr %.fca.0.extract36.i471.i, i64 16
  %offset_tbl_ptr.i.i83.i478.i = getelementptr i8, ptr %.fca.0.extract36.i471.i, i64 40
  %hash_coef.i.i84.i479.i = load i64, ptr %hash_coef_ptr.i.i81.i476.i, align 4
  %tbl_size.i.i85.i480.i = load i64, ptr %tbl_size_ptr.i.i82.i477.i, align 4
  %offset_tbl.i.i86.i481.i = load ptr, ptr %offset_tbl_ptr.i.i83.i478.i, align 8
  %product.i.i.i87.i482.i = mul i64 %hash_coef.i.i84.i479.i, 4015701072841558310
  %shifted.i.i.i88.i483.i = lshr i64 %product.i.i.i87.i482.i, 32
  %xored.i.i.i89.i484.i = xor i64 %shifted.i.i.i88.i483.i, %product.i.i.i87.i482.i
  %hash.i.i.i90.i485.i = and i64 %xored.i.i.i89.i484.i, %tbl_size.i.i85.i480.i
  %offset_ptr.i.i91.i486.i = getelementptr i32, ptr %offset_tbl.i.i86.i481.i, i64 %hash.i.i.i90.i485.i
  %offset.i.i92.i487.i = load i32, ptr %offset_ptr.i.i91.i486.i, align 4
  %1434 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract36.i471.i, 0
  %1435 = insertvalue { ptr, ptr, ptr, i32 } %1434, ptr %1432, 1
  %1436 = insertvalue { ptr, ptr, ptr, i32 } %1435, ptr %1433, 2
  %1437 = insertvalue { ptr, ptr, ptr, i32 } %1436, i32 %offset.i.i92.i487.i, 3
  %1438 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1439 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %1440 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i471.i)
  %1441 = sext i32 %offset.i.i92.i487.i to i64
  %1442 = getelementptr ptr, ptr %.fca.0.extract36.i471.i, i64 %1441
  %1443 = getelementptr i8, ptr %1442, i64 64
  %1444 = load ptr, ptr %1443, align 8
  %1445 = call ptr %1444({ ptr, ptr, ptr, i32 } %1437, ptr nonnull %0)
  %1446 = call i32 %1445({ ptr, ptr, ptr, i32 } %1437, { ptr, ptr, ptr, i32 } %1437, ptr nonnull %0)
  %1447 = icmp eq i32 %1446, %1389
  %1448 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1449 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %1450 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i471.i)
  %1451 = getelementptr i8, ptr %1442, i64 48
  %1452 = load ptr, ptr %1451, align 8
  %1453 = call ptr %1452({ ptr, ptr, ptr, i32 } %1437, ptr nonnull %0)
  %1454 = call { ptr, i160 } %1453({ ptr, ptr, ptr, i32 } %1437, { ptr, ptr, ptr, i32 } %1437, ptr nonnull %0)
  %1455 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1456 = load ptr, ptr %1004, align 8
  %1457 = call i1 %1456({ ptr, i160 } %1454, { ptr, i160 } %1035)
  %1458 = and i1 %1447, %1457
  br i1 %1458, label %HashMap_find_slot_keyK_hashPtri32.exit492.i, label %1459

1459:                                             ; preds = %1431
  %1460 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1461 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %1462 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i471.i)
  %1463 = getelementptr i8, ptr %1442, i64 56
  %1464 = load ptr, ptr %1463, align 8
  %1465 = call ptr %1464({ ptr, ptr, ptr, i32 } %1437, ptr nonnull %0)
  %1466 = call { ptr, i160 } %1465({ ptr, ptr, ptr, i32 } %1437, { ptr, ptr, ptr, i32 } %1437, ptr nonnull %0)
  %.fca.0.extract15.i.i41 = extractvalue { ptr, i160 } %1466, 0
  %1467 = getelementptr i8, ptr %.fca.0.extract15.i.i41, i64 8
  %1468 = getelementptr i8, ptr %.fca.0.extract15.i.i41, i64 16
  %1469 = getelementptr i8, ptr %.fca.0.extract15.i.i41, i64 24
  %1470 = getelementptr i8, ptr %.fca.0.extract15.i.i41, i64 32
  %1471 = load i64, ptr %1467, align 4
  %1472 = load i64, ptr %1468, align 4
  %1473 = load ptr, ptr %1469, align 8
  %1474 = load ptr, ptr %1470, align 8
  %result.i.i489.i = call i1 %1473(i64 %1472, i64 %1471, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %1474) #3
  %1475 = icmp eq i32 %spec.store.select.i491511.i, -1
  %or.cond.i490.i = select i1 %result.i.i489.i, i1 %1475, i1 false
  %spec.store.select.i491.i = select i1 %or.cond.i490.i, i32 %.0..0..0..i457.i, i32 %spec.store.select.i491511.i
  %1476 = add i32 %.0..0..0..i457.i, 1
  %1477 = and i32 %1476, %1407
  br label %1410

1478:                                             ; preds = %1410
  %1479 = icmp eq i32 %spec.store.select.i491511.i, -1
  %.pre523.i = select i1 %1479, i32 %.0..0..0..i457.i, i32 %spec.store.select.i491511.i
  br label %HashMap_find_slot_keyK_hashPtri32.exit492.i

HashMap_find_slot_keyK_hashPtri32.exit492.i:      ; preds = %1431, %1478
  %1480 = phi i32 [ %.pre523.i, %1478 ], [ %.0..0..0..i457.i, %1431 ]
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %73)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %74)
  %1481 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1482 = load ptr, ptr %1016, align 8
  %1483 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1482, 0
  %1484 = load ptr, ptr %1017, align 8
  %1485 = insertvalue { ptr, ptr, ptr, i32 } %1483, ptr %1484, 1
  %1486 = load ptr, ptr %1018, align 8
  %1487 = insertvalue { ptr, ptr, ptr, i32 } %1485, ptr %1486, 2
  %1488 = load i32, ptr %1019, align 4
  %1489 = insertvalue { ptr, ptr, ptr, i32 } %1487, i32 %1488, 3
  %hash_coef_ptr.i.i56.i257.i = getelementptr i8, ptr %1482, i64 8
  %tbl_size_ptr.i.i57.i258.i = getelementptr i8, ptr %1482, i64 16
  %offset_tbl_ptr.i.i58.i259.i = getelementptr i8, ptr %1482, i64 40
  %hash_coef.i.i59.i260.i = load i64, ptr %hash_coef_ptr.i.i56.i257.i, align 4
  %tbl_size.i.i60.i261.i = load i64, ptr %tbl_size_ptr.i.i57.i258.i, align 4
  %offset_tbl.i.i61.i262.i = load ptr, ptr %offset_tbl_ptr.i.i58.i259.i, align 8
  %product.i.i.i62.i263.i = mul i64 %hash_coef.i.i59.i260.i, -5261542750394134544
  %shifted.i.i.i63.i264.i = lshr i64 %product.i.i.i62.i263.i, 32
  %xored.i.i.i64.i265.i = xor i64 %shifted.i.i.i63.i264.i, %product.i.i.i62.i263.i
  %hash.i.i.i65.i266.i = and i64 %xored.i.i.i64.i265.i, %tbl_size.i.i60.i261.i
  %offset_ptr.i.i66.i267.i = getelementptr i32, ptr %offset_tbl.i.i61.i262.i, i64 %hash.i.i.i65.i266.i
  %offset.i.i67.i268.i = load i32, ptr %offset_ptr.i.i66.i267.i, align 4
  %eq.i.i269.i = icmp eq i32 %1488, %offset.i.i67.i268.i
  call void @llvm.assume(i1 %eq.i.i269.i) #30
  store ptr @_parameterization_Ptri32, ptr %83, align 8
  %1490 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %83)
  %1491 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1482)
  %1492 = sext i32 %1488 to i64
  %1493 = getelementptr ptr, ptr %1482, i64 %1492
  %1494 = getelementptr i8, ptr %1493, i64 120
  %1495 = load ptr, ptr %1494, align 8
  store ptr @i32_typ, ptr %84, align 8
  %1496 = call ptr %1495({ ptr, ptr, ptr, i32 } %1489, ptr nonnull %84)
  %1497 = call { ptr, i160 } %1496({ ptr, ptr, ptr, i32 } %1489, { ptr, ptr, ptr, i32 } %1489, ptr nonnull %83, i32 %1480)
  %.fca.0.extract2.i.i42 = extractvalue { ptr, i160 } %1497, 0
  %1498 = load ptr, ptr %result.i.i5, align 8
  %1499 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1500 = load ptr, ptr %998, align 8
  %1501 = load ptr, ptr %1498, align 8
  %1502 = getelementptr i8, ptr %1501, i64 48
  %1503 = load ptr, ptr %1502, align 8
  %1504 = call { i64, i64 } %1503(ptr nonnull %1498)
  %1505 = extractvalue { i64, i64 } %1504, 0
  %1506 = extractvalue { i64, i64 } %1504, 1
  %1507 = call i64 @llvm.umax.i64(i64 %1506, i64 8)
  %1508 = urem i64 16, %1506
  %1509 = icmp eq i64 %1508, 0
  %1510 = sub i64 %1506, %1508
  %1511 = select i1 %1509, i64 0, i64 %1510
  %1512 = add i64 %1511, %1505
  %1513 = add i64 %1512, 16
  %1514 = and i64 %1512, 7
  %1515 = icmp eq i64 %1514, 0
  %1516 = sub nuw nsw i64 40, %1514
  %1517 = select i1 %1515, i64 32, i64 %1516
  %1518 = add i64 %1513, %1517
  %1519 = and i64 %1518, 3
  %1520 = icmp eq i64 %1519, 0
  %1521 = sub nuw nsw i64 8, %1519
  %1522 = select i1 %1520, i64 4, i64 %1521
  %1523 = add i64 %1522, %1518
  %1524 = urem i64 %1523, %1507
  %1525 = icmp eq i64 %1524, 0
  %1526 = sub i64 %1507, %1524
  %1527 = select i1 %1525, i64 0, i64 %1526
  %1528 = add i64 %1523, %1527
  %result.i.i270.i = call noalias ptr @bump_malloc_inner(i64 noundef %1528, ptr nonnull @current_ptr) #29
  store ptr %1498, ptr %result.i.i270.i, align 8
  %1529 = getelementptr i8, ptr %result.i.i270.i, i64 8
  store ptr %1500, ptr %1529, align 8
  %1530 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i.i270.i)
  store ptr @Entry, ptr %85, align 8
  store ptr %result.i.i270.i, ptr %1021, align 8
  store i32 9, ptr %1022, align 8
  %1531 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %85)
  %1532 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1533 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %1534 = load ptr, ptr %1498, align 8
  %1535 = getelementptr i8, ptr %1534, i64 48
  %1536 = load ptr, ptr %1535, align 8
  %1537 = call { i64, i64 } %1536(ptr nonnull %1498)
  %1538 = extractvalue { i64, i64 } %1537, 1
  %1539 = urem i64 16, %1538
  %1540 = icmp eq i64 %1539, 0
  %reass.sub1542 = sub i64 %1538, %1539
  %1541 = add i64 %reass.sub1542, 16
  %1542 = select i1 %1540, i64 16, i64 %1541
  %1543 = getelementptr i8, ptr %result.i.i270.i, i64 %1542
  %1544 = load ptr, ptr %result.i.i270.i, align 8
  %1545 = load ptr, ptr %1544, align 8
  %1546 = getelementptr i8, ptr %1545, i64 64
  %1547 = load ptr, ptr %1546, align 8
  call void %1547({ ptr, i160 } %1035, ptr nonnull %1544, ptr %1543)
  %1548 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %1549 = load ptr, ptr %result.i.i270.i, align 8
  %1550 = load ptr, ptr %1549, align 8
  %1551 = getelementptr i8, ptr %1550, i64 48
  %1552 = load ptr, ptr %1551, align 8
  %1553 = call { i64, i64 } %1552(ptr nonnull %1549)
  %1554 = extractvalue { i64, i64 } %1553, 0
  %1555 = extractvalue { i64, i64 } %1553, 1
  %1556 = urem i64 16, %1555
  %1557 = icmp eq i64 %1556, 0
  %1558 = sub i64 %1555, %1556
  %1559 = select i1 %1557, i64 0, i64 %1558
  %1560 = add i64 %1559, %1554
  %1561 = and i64 %1560, 7
  %1562 = icmp eq i64 %1561, 0
  %1563 = sub nuw nsw i64 8, %1561
  %1564 = select i1 %1562, i64 0, i64 %1563
  %1565 = getelementptr i8, ptr %result.i.i270.i, i64 %1560
  %1566 = getelementptr i8, ptr %1565, i64 16
  %1567 = getelementptr i8, ptr %1566, i64 %1564
  store ptr @i32_typ, ptr %1567, align 8
  %1568 = getelementptr i8, ptr %1567, i64 8
  store i160 %.sroa.021.0.insert.ext.i, ptr %1568, align 4
  %1569 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %1570 = load ptr, ptr %result.i.i270.i, align 8
  %1571 = load ptr, ptr %1570, align 8
  %1572 = getelementptr i8, ptr %1571, i64 48
  %1573 = load ptr, ptr %1572, align 8
  %1574 = call { i64, i64 } %1573(ptr nonnull %1570)
  %1575 = extractvalue { i64, i64 } %1574, 0
  %1576 = extractvalue { i64, i64 } %1574, 1
  %1577 = urem i64 16, %1576
  %1578 = icmp eq i64 %1577, 0
  %1579 = sub i64 %1576, %1577
  %1580 = select i1 %1578, i64 0, i64 %1579
  %1581 = add i64 %1580, %1575
  %1582 = add i64 %1581, 16
  %1583 = and i64 %1581, 7
  %1584 = icmp eq i64 %1583, 0
  %1585 = sub nuw nsw i64 40, %1583
  %1586 = select i1 %1584, i64 32, i64 %1585
  %1587 = add i64 %1582, %1586
  %1588 = and i64 %1587, 3
  %1589 = icmp eq i64 %1588, 0
  %1590 = sub nuw nsw i64 4, %1588
  %1591 = select i1 %1589, i64 0, i64 %1590
  %1592 = getelementptr i8, ptr %result.i.i270.i, i64 %1587
  %1593 = getelementptr i8, ptr %1592, i64 %1591
  store i32 %1389, ptr %1593, align 4
  %1594 = load ptr, ptr %1023, align 8
  %1595 = ptrtoint ptr %result.i.i270.i to i64
  %1596 = ptrtoint ptr %1594 to i64
  %.sroa.2.0.insert.ext.i.i44 = zext i64 %1596 to i160
  %.sroa.2.0.insert.shift.i.i45 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i.i44, 64
  %.sroa.0.0.insert.ext.i.i46 = zext i64 %1595 to i160
  %.sroa.2.0.insert.insert.i.i47 = or disjoint i160 %.sroa.2.0.insert.shift.i.i45, %.sroa.0.0.insert.ext.i.i46
  %.sroa.0.0.insert.insert.i.i48 = or disjoint i160 %.sroa.2.0.insert.insert.i.i47, 3062541302288446171170371466885913903104
  %1597 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0.0.insert.insert.i.i48, 1
  %1598 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1599 = load ptr, ptr %1016, align 8
  %1600 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1599, 0
  %1601 = load ptr, ptr %1017, align 8
  %1602 = insertvalue { ptr, ptr, ptr, i32 } %1600, ptr %1601, 1
  %1603 = load ptr, ptr %1018, align 8
  %1604 = insertvalue { ptr, ptr, ptr, i32 } %1602, ptr %1603, 2
  %1605 = load i32, ptr %1019, align 4
  %1606 = insertvalue { ptr, ptr, ptr, i32 } %1604, i32 %1605, 3
  %hash_coef_ptr.i.i84.i.i49 = getelementptr i8, ptr %1599, i64 8
  %tbl_size_ptr.i.i85.i.i50 = getelementptr i8, ptr %1599, i64 16
  %offset_tbl_ptr.i.i86.i.i51 = getelementptr i8, ptr %1599, i64 40
  %hash_coef.i.i87.i.i52 = load i64, ptr %hash_coef_ptr.i.i84.i.i49, align 4
  %tbl_size.i.i88.i.i53 = load i64, ptr %tbl_size_ptr.i.i85.i.i50, align 4
  %offset_tbl.i.i89.i.i54 = load ptr, ptr %offset_tbl_ptr.i.i86.i.i51, align 8
  %product.i.i.i90.i.i55 = mul i64 %hash_coef.i.i87.i.i52, -5261542750394134544
  %shifted.i.i.i91.i.i56 = lshr i64 %product.i.i.i90.i.i55, 32
  %xored.i.i.i92.i.i57 = xor i64 %shifted.i.i.i91.i.i56, %product.i.i.i90.i.i55
  %hash.i.i.i93.i.i58 = and i64 %xored.i.i.i92.i.i57, %tbl_size.i.i88.i.i53
  %offset_ptr.i.i94.i.i59 = getelementptr i32, ptr %offset_tbl.i.i89.i.i54, i64 %hash.i.i.i93.i.i58
  %offset.i.i95.i.i60 = load i32, ptr %offset_ptr.i.i94.i.i59, align 4
  %eq.i98.i.i61 = icmp eq i32 %1605, %offset.i.i95.i.i60
  call void @llvm.assume(i1 %eq.i98.i.i61) #30
  %1607 = load ptr, ptr %result.i.i5, align 8
  %1608 = load ptr, ptr %998, align 8
  %result.i99.i.i62 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1609 = getelementptr i8, ptr %result.i99.i.i62, i64 16
  store ptr %1608, ptr %1609, align 8
  %1610 = getelementptr i8, ptr %result.i99.i.i62, i64 8
  store ptr %1607, ptr %1610, align 8
  %1611 = getelementptr i8, ptr %result.i99.i.i62, i64 24
  store ptr null, ptr %1611, align 8
  %1612 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i99.i.i62)
  store ptr @Entry, ptr %result.i99.i.i62, align 8
  store ptr @_parameterization_Ptri32, ptr %86, align 8
  store ptr %result.i99.i.i62, ptr %1024, align 8
  %1613 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %86)
  %1614 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1599)
  %1615 = sext i32 %1605 to i64
  %1616 = getelementptr ptr, ptr %1599, i64 %1615
  %1617 = getelementptr i8, ptr %1616, i64 128
  %1618 = load ptr, ptr %1617, align 8
  store ptr @i32_typ, ptr %87, align 8
  store ptr @Entry, ptr %1025, align 8
  %1619 = call ptr %1618({ ptr, ptr, ptr, i32 } %1606, ptr nonnull %87)
  call void %1619({ ptr, ptr, ptr, i32 } %1606, { ptr, ptr, ptr, i32 } %1606, ptr nonnull %86, i32 %1480, { ptr, i160 } %1597)
  %1620 = icmp eq ptr %.fca.0.extract2.i.i42, @nil_typ
  %1621 = icmp eq ptr %.fca.0.extract2.i.i42, null
  %1622 = or i1 %1620, %1621
  br i1 %1622, label %._crit_edge.thread.i.i172, label %._crit_edge.i.i63

._crit_edge.thread.i.i172:                        ; preds = %HashMap_find_slot_keyK_hashPtri32.exit492.i
  %1623 = load i32, ptr %1026, align 4
  %1624 = add i32 %1623, 1
  store i32 %1624, ptr %1026, align 4
  br label %._crit_edge1.sink.split.i.i170

._crit_edge.i.i63:                                ; preds = %HashMap_find_slot_keyK_hashPtri32.exit492.i
  %.fca.1.extract4.i.i64 = extractvalue { ptr, i160 } %1497, 1
  %.sroa.3192.8.extract.trunc.i.i65 = trunc i160 %.fca.1.extract4.i.i64 to i64
  %1625 = inttoptr i64 %.sroa.3192.8.extract.trunc.i.i65 to ptr
  %.sroa.5193.8.extract.shift.i.i66 = lshr i160 %.fca.1.extract4.i.i64, 64
  %.sroa.5193.8.extract.trunc.i.i67 = trunc i160 %.sroa.5193.8.extract.shift.i.i66 to i64
  %1626 = inttoptr i64 %.sroa.5193.8.extract.trunc.i.i67 to ptr
  %hash_coef_ptr.i.i101.i.i68 = getelementptr i8, ptr %.fca.0.extract2.i.i42, i64 8
  %tbl_size_ptr.i.i102.i.i69 = getelementptr i8, ptr %.fca.0.extract2.i.i42, i64 16
  %offset_tbl_ptr.i.i103.i.i70 = getelementptr i8, ptr %.fca.0.extract2.i.i42, i64 40
  %hash_coef.i.i104.i.i71 = load i64, ptr %hash_coef_ptr.i.i101.i.i68, align 4
  %tbl_size.i.i105.i.i72 = load i64, ptr %tbl_size_ptr.i.i102.i.i69, align 4
  %offset_tbl.i.i106.i.i73 = load ptr, ptr %offset_tbl_ptr.i.i103.i.i70, align 8
  %product.i.i.i107.i.i74 = mul i64 %hash_coef.i.i104.i.i71, 4015701072841558310
  %shifted.i.i.i108.i.i75 = lshr i64 %product.i.i.i107.i.i74, 32
  %xored.i.i.i109.i.i76 = xor i64 %shifted.i.i.i108.i.i75, %product.i.i.i107.i.i74
  %hash.i.i.i110.i.i77 = and i64 %xored.i.i.i109.i.i76, %tbl_size.i.i105.i.i72
  %offset_ptr.i.i111.i.i78 = getelementptr i32, ptr %offset_tbl.i.i106.i.i73, i64 %hash.i.i.i110.i.i77
  %offset.i.i112.i.i79 = load i32, ptr %offset_ptr.i.i111.i.i78, align 4
  %1627 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract2.i.i42, 0
  %1628 = insertvalue { ptr, ptr, ptr, i32 } %1627, ptr %1625, 1
  %1629 = insertvalue { ptr, ptr, ptr, i32 } %1628, ptr %1626, 2
  %1630 = insertvalue { ptr, ptr, ptr, i32 } %1629, i32 %offset.i.i112.i.i79, 3
  %1631 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1632 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %1633 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract2.i.i42)
  %1634 = sext i32 %offset.i.i112.i.i79 to i64
  %1635 = getelementptr ptr, ptr %.fca.0.extract2.i.i42, i64 %1634
  %1636 = getelementptr i8, ptr %1635, i64 56
  %1637 = load ptr, ptr %1636, align 8
  %1638 = call ptr %1637({ ptr, ptr, ptr, i32 } %1630, ptr nonnull %0)
  %1639 = call { ptr, i160 } %1638({ ptr, ptr, ptr, i32 } %1630, { ptr, ptr, ptr, i32 } %1630, ptr nonnull %0)
  %.fca.0.extract45.i.i80 = extractvalue { ptr, i160 } %1639, 0
  %1640 = getelementptr i8, ptr %.fca.0.extract45.i.i80, i64 8
  %1641 = getelementptr i8, ptr %.fca.0.extract45.i.i80, i64 16
  %1642 = getelementptr i8, ptr %.fca.0.extract45.i.i80, i64 24
  %1643 = getelementptr i8, ptr %.fca.0.extract45.i.i80, i64 32
  %1644 = load i64, ptr %1640, align 4
  %1645 = load i64, ptr %1641, align 4
  %1646 = load ptr, ptr %1642, align 8
  %1647 = load ptr, ptr %1643, align 8
  %result.i114.i.i81 = call i1 %1646(i64 %1645, i64 %1644, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %1647) #3
  br i1 %result.i114.i.i81, label %._crit_edge1.sink.split.i.i170, label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit.i82

._crit_edge1.sink.split.i.i170:                   ; preds = %._crit_edge.i.i63, %._crit_edge.thread.i.i172
  %.sink202.i.i171 = phi i64 [ 40, %._crit_edge.thread.i.i172 ], [ 32, %._crit_edge.i.i63 ]
  %1648 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1649 = getelementptr i8, ptr getelementptr inbounds (i8, ptr @HashMap, i64 72), i64 %.sink202.i.i171
  %1650 = load ptr, ptr %1649, align 8
  %1651 = load ptr, ptr %1650, align 8
  %1652 = call i32 %1651(ptr nonnull %result.i.i5)
  %1653 = add i32 %1652, 1
  %1654 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1655 = getelementptr i8, ptr %1650, i64 8
  %1656 = load ptr, ptr %1655, align 8
  call void %1656(ptr nonnull %result.i.i5, i32 %1653)
  br label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit.i82

HashMap_insert_internal_keyK_valueV_hashPtri32.exit.i82: ; preds = %._crit_edge1.sink.split.i.i170, %._crit_edge.i.i63
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %83)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %84)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %85)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %86)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %87)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  %1657 = icmp ult i32 %.reg2mem73.087.i, 999999
  br i1 %1657, label %.lr.ph.i13, label %._crit_edge.i83

._crit_edge.i83:                                  ; preds = %HashMap_insert_internal_keyK_valueV_hashPtri32.exit.i82
  %1658 = call i64 @clock()
  br label %.lr.ph92.i

.lr.ph92.i:                                       ; preds = %HashMap_get_keyK.exit.i141, %._crit_edge.i83
  %.reg2mem63.090.i = phi i64 [ %.reg2mem59.0.i, %HashMap_get_keyK.exit.i141 ], [ 0, %._crit_edge.i83 ]
  %.reg2mem61.089.i = phi i32 [ %1803, %HashMap_get_keyK.exit.i141 ], [ 0, %._crit_edge.i83 ]
  %.sroa.018.0.insert.ext.i = zext nneg i32 %.reg2mem61.089.i to i160
  %1659 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.018.0.insert.ext.i, 1
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %90)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %91)
  %1660 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1661 = load ptr, ptr %1003, align 8
  %1662 = call i32 %1661({ ptr, i160 } %1659)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %81)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %82)
  %1663 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1664 = load ptr, ptr %1016, align 8
  %1665 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1664, 0
  %1666 = load ptr, ptr %1017, align 8
  %1667 = insertvalue { ptr, ptr, ptr, i32 } %1665, ptr %1666, 1
  %1668 = load ptr, ptr %1018, align 8
  %1669 = insertvalue { ptr, ptr, ptr, i32 } %1667, ptr %1668, 2
  %1670 = load i32, ptr %1019, align 4
  %1671 = insertvalue { ptr, ptr, ptr, i32 } %1669, i32 %1670, 3
  %hash_coef_ptr.i.i51.i.i84 = getelementptr i8, ptr %1664, i64 8
  %tbl_size_ptr.i.i52.i.i85 = getelementptr i8, ptr %1664, i64 16
  %offset_tbl_ptr.i.i53.i.i86 = getelementptr i8, ptr %1664, i64 40
  %hash_coef.i.i54.i.i87 = load i64, ptr %hash_coef_ptr.i.i51.i.i84, align 4
  %tbl_size.i.i55.i.i88 = load i64, ptr %tbl_size_ptr.i.i52.i.i85, align 4
  %offset_tbl.i.i56.i.i89 = load ptr, ptr %offset_tbl_ptr.i.i53.i.i86, align 8
  %product.i.i.i57.i.i90 = mul i64 %hash_coef.i.i54.i.i87, -5261542750394134544
  %shifted.i.i.i58.i.i91 = lshr i64 %product.i.i.i57.i.i90, 32
  %xored.i.i.i59.i.i92 = xor i64 %shifted.i.i.i58.i.i91, %product.i.i.i57.i.i90
  %hash.i.i.i60.i.i93 = and i64 %xored.i.i.i59.i.i92, %tbl_size.i.i55.i.i88
  %offset_ptr.i.i61.i.i94 = getelementptr i32, ptr %offset_tbl.i.i56.i.i89, i64 %hash.i.i.i60.i.i93
  %offset.i.i62.i.i95 = load i32, ptr %offset_ptr.i.i61.i.i94, align 4
  %eq.i.i292.i = icmp eq i32 %1670, %offset.i.i62.i.i95
  call void @llvm.assume(i1 %eq.i.i292.i) #30
  %1672 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %1673 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1664)
  %1674 = sext i32 %1670 to i64
  %1675 = getelementptr ptr, ptr %1664, i64 %1674
  %1676 = getelementptr i8, ptr %1675, i64 64
  %1677 = load ptr, ptr %1676, align 8
  %1678 = call ptr %1677({ ptr, ptr, ptr, i32 } %1671, ptr nonnull %0)
  %1679 = call i32 %1678({ ptr, ptr, ptr, i32 } %1671, { ptr, ptr, ptr, i32 } %1671, ptr nonnull %0)
  %1680 = add i32 %1679, -1
  %1681 = and i32 %1680, %1662
  %1682 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  br label %1683

1683:                                             ; preds = %1732, %.lr.ph92.i
  %spec.store.select.i341.i = phi i32 [ %spec.store.select.i.i126, %1732 ], [ -1, %.lr.ph92.i ]
  %.0..0..0..i.i96 = phi i32 [ %1750, %1732 ], [ %1681, %.lr.ph92.i ]
  %1684 = load ptr, ptr %1016, align 8
  %1685 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1684, 0
  %1686 = load ptr, ptr %1017, align 8
  %1687 = insertvalue { ptr, ptr, ptr, i32 } %1685, ptr %1686, 1
  %1688 = load ptr, ptr %1018, align 8
  %1689 = insertvalue { ptr, ptr, ptr, i32 } %1687, ptr %1688, 2
  %1690 = load i32, ptr %1019, align 4
  %1691 = insertvalue { ptr, ptr, ptr, i32 } %1689, i32 %1690, 3
  %hash_coef_ptr.i.i65.i.i97 = getelementptr i8, ptr %1684, i64 8
  %tbl_size_ptr.i.i66.i.i98 = getelementptr i8, ptr %1684, i64 16
  %offset_tbl_ptr.i.i67.i.i99 = getelementptr i8, ptr %1684, i64 40
  %hash_coef.i.i68.i.i100 = load i64, ptr %hash_coef_ptr.i.i65.i.i97, align 4
  %tbl_size.i.i69.i.i101 = load i64, ptr %tbl_size_ptr.i.i66.i.i98, align 4
  %offset_tbl.i.i70.i.i102 = load ptr, ptr %offset_tbl_ptr.i.i67.i.i99, align 8
  %product.i.i.i71.i.i103 = mul i64 %hash_coef.i.i68.i.i100, -5261542750394134544
  %shifted.i.i.i72.i.i104 = lshr i64 %product.i.i.i71.i.i103, 32
  %xored.i.i.i73.i.i105 = xor i64 %shifted.i.i.i72.i.i104, %product.i.i.i71.i.i103
  %hash.i.i.i74.i.i106 = and i64 %xored.i.i.i73.i.i105, %tbl_size.i.i69.i.i101
  %offset_ptr.i.i75.i.i107 = getelementptr i32, ptr %offset_tbl.i.i70.i.i102, i64 %hash.i.i.i74.i.i106
  %offset.i.i76.i.i108 = load i32, ptr %offset_ptr.i.i75.i.i107, align 4
  %eq.i79.i.i109 = icmp eq i32 %1690, %offset.i.i76.i.i108
  call void @llvm.assume(i1 %eq.i79.i.i109) #30
  %1692 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  store ptr @_parameterization_Ptri32, ptr %81, align 8
  %1693 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %81)
  %1694 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1684)
  %1695 = sext i32 %1690 to i64
  %1696 = getelementptr ptr, ptr %1684, i64 %1695
  %1697 = getelementptr i8, ptr %1696, i64 120
  %1698 = load ptr, ptr %1697, align 8
  store ptr @i32_typ, ptr %82, align 8
  %1699 = call ptr %1698({ ptr, ptr, ptr, i32 } %1691, ptr nonnull %82)
  %1700 = call { ptr, i160 } %1699({ ptr, ptr, ptr, i32 } %1691, { ptr, ptr, ptr, i32 } %1691, ptr nonnull %81, i32 %.0..0..0..i.i96)
  %.fca.0.extract36.i.i110 = extractvalue { ptr, i160 } %1700, 0
  %1701 = icmp eq ptr %.fca.0.extract36.i.i110, @nil_typ
  %1702 = icmp eq ptr %.fca.0.extract36.i.i110, null
  %1703 = or i1 %1701, %1702
  br i1 %1703, label %1751, label %1704

1704:                                             ; preds = %1683
  %.fca.1.extract38.i.i111 = extractvalue { ptr, i160 } %1700, 1
  %.sroa.5.8.extract.shift.i293.i = lshr i160 %.fca.1.extract38.i.i111, 64
  %.sroa.5.8.extract.trunc.i294.i = trunc i160 %.sroa.5.8.extract.shift.i293.i to i64
  %.sroa.2.8.extract.trunc165.i.i112 = trunc i160 %.fca.1.extract38.i.i111 to i64
  %1705 = inttoptr i64 %.sroa.2.8.extract.trunc165.i.i112 to ptr
  %1706 = inttoptr i64 %.sroa.5.8.extract.trunc.i294.i to ptr
  %hash_coef_ptr.i.i81.i.i113 = getelementptr i8, ptr %.fca.0.extract36.i.i110, i64 8
  %tbl_size_ptr.i.i82.i.i114 = getelementptr i8, ptr %.fca.0.extract36.i.i110, i64 16
  %offset_tbl_ptr.i.i83.i.i115 = getelementptr i8, ptr %.fca.0.extract36.i.i110, i64 40
  %hash_coef.i.i84.i.i116 = load i64, ptr %hash_coef_ptr.i.i81.i.i113, align 4
  %tbl_size.i.i85.i.i117 = load i64, ptr %tbl_size_ptr.i.i82.i.i114, align 4
  %offset_tbl.i.i86.i.i118 = load ptr, ptr %offset_tbl_ptr.i.i83.i.i115, align 8
  %product.i.i.i87.i.i119 = mul i64 %hash_coef.i.i84.i.i116, 4015701072841558310
  %shifted.i.i.i88.i.i120 = lshr i64 %product.i.i.i87.i.i119, 32
  %xored.i.i.i89.i.i121 = xor i64 %shifted.i.i.i88.i.i120, %product.i.i.i87.i.i119
  %hash.i.i.i90.i.i122 = and i64 %xored.i.i.i89.i.i121, %tbl_size.i.i85.i.i117
  %offset_ptr.i.i91.i.i123 = getelementptr i32, ptr %offset_tbl.i.i86.i.i118, i64 %hash.i.i.i90.i.i122
  %offset.i.i92.i.i124 = load i32, ptr %offset_ptr.i.i91.i.i123, align 4
  %1707 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract36.i.i110, 0
  %1708 = insertvalue { ptr, ptr, ptr, i32 } %1707, ptr %1705, 1
  %1709 = insertvalue { ptr, ptr, ptr, i32 } %1708, ptr %1706, 2
  %1710 = insertvalue { ptr, ptr, ptr, i32 } %1709, i32 %offset.i.i92.i.i124, 3
  %1711 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1712 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %1713 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i.i110)
  %1714 = sext i32 %offset.i.i92.i.i124 to i64
  %1715 = getelementptr ptr, ptr %.fca.0.extract36.i.i110, i64 %1714
  %1716 = getelementptr i8, ptr %1715, i64 64
  %1717 = load ptr, ptr %1716, align 8
  %1718 = call ptr %1717({ ptr, ptr, ptr, i32 } %1710, ptr nonnull %0)
  %1719 = call i32 %1718({ ptr, ptr, ptr, i32 } %1710, { ptr, ptr, ptr, i32 } %1710, ptr nonnull %0)
  %1720 = icmp eq i32 %1719, %1662
  %1721 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1722 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %1723 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i.i110)
  %1724 = getelementptr i8, ptr %1715, i64 48
  %1725 = load ptr, ptr %1724, align 8
  %1726 = call ptr %1725({ ptr, ptr, ptr, i32 } %1710, ptr nonnull %0)
  %1727 = call { ptr, i160 } %1726({ ptr, ptr, ptr, i32 } %1710, { ptr, ptr, ptr, i32 } %1710, ptr nonnull %0)
  %1728 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1729 = load ptr, ptr %1004, align 8
  %1730 = call i1 %1729({ ptr, i160 } %1727, { ptr, i160 } %1659)
  %1731 = and i1 %1720, %1730
  br i1 %1731, label %HashMap_find_slot_keyK_hashPtri32.exit.i127, label %1732

1732:                                             ; preds = %1704
  %1733 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1734 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %1735 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i.i110)
  %1736 = getelementptr i8, ptr %1715, i64 56
  %1737 = load ptr, ptr %1736, align 8
  %1738 = call ptr %1737({ ptr, ptr, ptr, i32 } %1710, ptr nonnull %0)
  %1739 = call { ptr, i160 } %1738({ ptr, ptr, ptr, i32 } %1710, { ptr, ptr, ptr, i32 } %1710, ptr nonnull %0)
  %.fca.0.extract15.i296.i = extractvalue { ptr, i160 } %1739, 0
  %1740 = getelementptr i8, ptr %.fca.0.extract15.i296.i, i64 8
  %1741 = getelementptr i8, ptr %.fca.0.extract15.i296.i, i64 16
  %1742 = getelementptr i8, ptr %.fca.0.extract15.i296.i, i64 24
  %1743 = getelementptr i8, ptr %.fca.0.extract15.i296.i, i64 32
  %1744 = load i64, ptr %1740, align 4
  %1745 = load i64, ptr %1741, align 4
  %1746 = load ptr, ptr %1742, align 8
  %1747 = load ptr, ptr %1743, align 8
  %result.i.i297.i = call i1 %1746(i64 %1745, i64 %1744, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %1747) #3
  %1748 = icmp eq i32 %spec.store.select.i341.i, -1
  %or.cond.i.i125 = select i1 %result.i.i297.i, i1 %1748, i1 false
  %spec.store.select.i.i126 = select i1 %or.cond.i.i125, i32 %.0..0..0..i.i96, i32 %spec.store.select.i341.i
  %1749 = add i32 %.0..0..0..i.i96, 1
  %1750 = and i32 %1749, %1680
  br label %1683

1751:                                             ; preds = %1683
  %1752 = icmp eq i32 %spec.store.select.i341.i, -1
  %.pre.i169 = select i1 %1752, i32 %.0..0..0..i.i96, i32 %spec.store.select.i341.i
  br label %HashMap_find_slot_keyK_hashPtri32.exit.i127

HashMap_find_slot_keyK_hashPtri32.exit.i127:      ; preds = %1704, %1751
  %1753 = phi i32 [ %.pre.i169, %1751 ], [ %.0..0..0..i.i96, %1704 ]
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %81)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %82)
  %1754 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1755 = load ptr, ptr %1016, align 8
  %1756 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1755, 0
  %1757 = load ptr, ptr %1017, align 8
  %1758 = insertvalue { ptr, ptr, ptr, i32 } %1756, ptr %1757, 1
  %1759 = load ptr, ptr %1018, align 8
  %1760 = insertvalue { ptr, ptr, ptr, i32 } %1758, ptr %1759, 2
  %1761 = load i32, ptr %1019, align 4
  %1762 = insertvalue { ptr, ptr, ptr, i32 } %1760, i32 %1761, 3
  %hash_coef_ptr.i.i58.i.i128 = getelementptr i8, ptr %1755, i64 8
  %tbl_size_ptr.i.i59.i.i129 = getelementptr i8, ptr %1755, i64 16
  %offset_tbl_ptr.i.i60.i.i130 = getelementptr i8, ptr %1755, i64 40
  %hash_coef.i.i61.i.i131 = load i64, ptr %hash_coef_ptr.i.i58.i.i128, align 4
  %tbl_size.i.i62.i.i132 = load i64, ptr %tbl_size_ptr.i.i59.i.i129, align 4
  %offset_tbl.i.i63.i.i133 = load ptr, ptr %offset_tbl_ptr.i.i60.i.i130, align 8
  %product.i.i.i64.i.i134 = mul i64 %hash_coef.i.i61.i.i131, -5261542750394134544
  %shifted.i.i.i65.i.i135 = lshr i64 %product.i.i.i64.i.i134, 32
  %xored.i.i.i66.i.i136 = xor i64 %shifted.i.i.i65.i.i135, %product.i.i.i64.i.i134
  %hash.i.i.i67.i.i137 = and i64 %xored.i.i.i66.i.i136, %tbl_size.i.i62.i.i132
  %offset_ptr.i.i68.i.i138 = getelementptr i32, ptr %offset_tbl.i.i63.i.i133, i64 %hash.i.i.i67.i.i137
  %offset.i.i69.i.i139 = load i32, ptr %offset_ptr.i.i68.i.i138, align 4
  %eq.i.i178.i = icmp eq i32 %1761, %offset.i.i69.i.i139
  call void @llvm.assume(i1 %eq.i.i178.i) #30
  store ptr @_parameterization_Ptri32, ptr %90, align 8
  %1763 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %90)
  %1764 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1755)
  %1765 = sext i32 %1761 to i64
  %1766 = getelementptr ptr, ptr %1755, i64 %1765
  %1767 = getelementptr i8, ptr %1766, i64 120
  %1768 = load ptr, ptr %1767, align 8
  store ptr @i32_typ, ptr %91, align 8
  %1769 = call ptr %1768({ ptr, ptr, ptr, i32 } %1762, ptr nonnull %91)
  %1770 = call { ptr, i160 } %1769({ ptr, ptr, ptr, i32 } %1762, { ptr, ptr, ptr, i32 } %1762, ptr nonnull %90, i32 %1753)
  %.fca.0.extract.i179.i = extractvalue { ptr, i160 } %1770, 0
  %1771 = icmp ne ptr %.fca.0.extract.i179.i, @nil_typ
  %1772 = icmp ne ptr %.fca.0.extract.i179.i, null
  %.not56.i.i140 = and i1 %1771, %1772
  br i1 %.not56.i.i140, label %1773, label %HashMap_get_keyK.exit.i141

1773:                                             ; preds = %HashMap_find_slot_keyK_hashPtri32.exit.i127
  %.fca.1.extract.i180.i = extractvalue { ptr, i160 } %1770, 1
  %.sroa.3.8.extract.trunc.i.i149 = trunc i160 %.fca.1.extract.i180.i to i64
  %1774 = inttoptr i64 %.sroa.3.8.extract.trunc.i.i149 to ptr
  %.sroa.5.8.extract.shift.i.i150 = lshr i160 %.fca.1.extract.i180.i, 64
  %.sroa.5.8.extract.trunc.i.i151 = trunc i160 %.sroa.5.8.extract.shift.i.i150 to i64
  %1775 = inttoptr i64 %.sroa.5.8.extract.trunc.i.i151 to ptr
  %hash_coef_ptr.i.i72.i.i152 = getelementptr i8, ptr %.fca.0.extract.i179.i, i64 8
  %tbl_size_ptr.i.i73.i.i153 = getelementptr i8, ptr %.fca.0.extract.i179.i, i64 16
  %offset_tbl_ptr.i.i74.i.i154 = getelementptr i8, ptr %.fca.0.extract.i179.i, i64 40
  %hash_coef.i.i75.i.i155 = load i64, ptr %hash_coef_ptr.i.i72.i.i152, align 4
  %tbl_size.i.i76.i.i156 = load i64, ptr %tbl_size_ptr.i.i73.i.i153, align 4
  %offset_tbl.i.i77.i.i157 = load ptr, ptr %offset_tbl_ptr.i.i74.i.i154, align 8
  %product.i.i.i78.i.i158 = mul i64 %hash_coef.i.i75.i.i155, 4015701072841558310
  %shifted.i.i.i79.i.i159 = lshr i64 %product.i.i.i78.i.i158, 32
  %xored.i.i.i80.i.i160 = xor i64 %shifted.i.i.i79.i.i159, %product.i.i.i78.i.i158
  %hash.i.i.i81.i.i161 = and i64 %xored.i.i.i80.i.i160, %tbl_size.i.i76.i.i156
  %offset_ptr.i.i82.i.i162 = getelementptr i32, ptr %offset_tbl.i.i77.i.i157, i64 %hash.i.i.i81.i.i161
  %offset.i.i83.i.i163 = load i32, ptr %offset_ptr.i.i82.i.i162, align 4
  %1776 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract.i179.i, 0
  %1777 = insertvalue { ptr, ptr, ptr, i32 } %1776, ptr %1774, 1
  %1778 = insertvalue { ptr, ptr, ptr, i32 } %1777, ptr %1775, 2
  %1779 = insertvalue { ptr, ptr, ptr, i32 } %1778, i32 %offset.i.i83.i.i163, 3
  %1780 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1781 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %1782 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract.i179.i)
  %1783 = sext i32 %offset.i.i83.i.i163 to i64
  %1784 = getelementptr ptr, ptr %.fca.0.extract.i179.i, i64 %1783
  %1785 = getelementptr i8, ptr %1784, i64 56
  %1786 = load ptr, ptr %1785, align 8
  %1787 = call ptr %1786({ ptr, ptr, ptr, i32 } %1779, ptr nonnull %0)
  %1788 = call { ptr, i160 } %1787({ ptr, ptr, ptr, i32 } %1779, { ptr, ptr, ptr, i32 } %1779, ptr nonnull %0)
  %.fca.0.extract47.i.i164 = extractvalue { ptr, i160 } %1788, 0
  %.fca.1.extract49.i.i165 = extractvalue { ptr, i160 } %1788, 1
  %1789 = getelementptr i8, ptr %.fca.0.extract47.i.i164, i64 8
  %1790 = getelementptr i8, ptr %.fca.0.extract47.i.i164, i64 16
  %1791 = getelementptr i8, ptr %.fca.0.extract47.i.i164, i64 24
  %1792 = getelementptr i8, ptr %.fca.0.extract47.i.i164, i64 32
  %1793 = load i64, ptr %1789, align 4
  %1794 = load i64, ptr %1790, align 4
  %1795 = load ptr, ptr %1791, align 8
  %1796 = load ptr, ptr %1792, align 8
  %result.i.i181.i = call i1 %1795(i64 %1794, i64 %1793, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %1796) #3
  %extract.t.i = trunc i160 %.fca.1.extract49.i.i165 to i32
  br i1 %result.i.i181.i, label %HashMap_get_keyK.exit.i141, label %1797

1797:                                             ; preds = %1773
  %result.i85.i.i166 = call i1 %1795(i64 %1794, i64 %1793, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr readonly %1796) #3
  %cond.fr.i.i167 = freeze i1 %result.i85.i.i166
  %spec.select.i.i168 = select i1 %cond.fr.i.i167, ptr %.fca.0.extract47.i.i164, ptr @nil_typ
  br label %HashMap_get_keyK.exit.i141

HashMap_get_keyK.exit.i141:                       ; preds = %1797, %1773, %HashMap_find_slot_keyK_hashPtri32.exit.i127
  %.reg2mem23.sroa.3.0112.i.off0.i = phi i32 [ poison, %HashMap_find_slot_keyK_hashPtri32.exit.i127 ], [ %extract.t.i, %1773 ], [ %extract.t.i, %1797 ]
  %1798 = phi ptr [ @nil_typ, %HashMap_find_slot_keyK_hashPtri32.exit.i127 ], [ @nil_typ, %1773 ], [ %spec.select.i.i168, %1797 ]
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %90)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %91)
  %1799 = icmp ne ptr %1798, @nil_typ
  %1800 = icmp ne ptr %1798, null
  %.not27.i = and i1 %1799, %1800
  %1801 = sext i32 %.reg2mem23.sroa.3.0112.i.off0.i to i64
  %1802 = select i1 %.not27.i, i64 %1801, i64 0
  %.reg2mem59.0.i = add i64 %1802, %.reg2mem63.090.i
  %1803 = add nuw nsw i32 %.reg2mem61.089.i, 1
  %1804 = icmp ult i32 %.reg2mem61.089.i, 999999
  br i1 %1804, label %.lr.ph92.i, label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit.i

IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit.i: ; preds = %HashMap_get_keyK.exit.i141
  %1805 = call i64 @clock()
  %1806 = icmp eq i64 %.reg2mem59.0.i, 500000500000
  %result.i34.i142 = call noalias dereferenceable_or_null(19) ptr @bump_malloc_inner(i64 noundef 19, ptr nonnull @current_ptr) #29
  store <18 x i8> <i8 71, i8 101, i8 116, i8 32, i8 83, i8 101, i8 113, i8 117, i8 101, i8 110, i8 116, i8 105, i8 97, i8 108, i8 32, i8 72, i8 105, i8 116>, ptr %result.i34.i142, align 32
  %result.i35.i143 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %1807 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %result.i35.i143, 1
  %1808 = insertvalue { ptr, ptr, ptr, i32 } %1807, ptr undef, 2
  %1809 = insertvalue { ptr, ptr, ptr, i32 } %1808, i32 9, 3
  store ptr %result.i34.i142, ptr %result.i35.i143, align 8
  %1810 = getelementptr i8, ptr %result.i35.i143, i64 8
  store i32 18, ptr %1810, align 4
  %1811 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %1812 = getelementptr i8, ptr %result.i35.i143, i64 12
  store i32 19, ptr %1812, align 4
  %1813 = sub i64 %1805, %1658
  call void @print_benchmark_result({ ptr, ptr, ptr, i32 } %1809, i32 1000000, i64 %1813)
  %result.i36.i144 = call noalias dereferenceable_or_null(19) ptr @bump_malloc_inner(i64 noundef 19, ptr nonnull @current_ptr) #29
  store <18 x i8> <i8 32, i8 32, i8 32, i8 32, i8 86, i8 101, i8 114, i8 105, i8 102, i8 105, i8 99, i8 97, i8 116, i8 105, i8 111, i8 110, i8 58, i8 32>, ptr %result.i36.i144, align 32
  %result.i37.i145 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %1814 = getelementptr inbounds i8, ptr %92, i64 8
  %1815 = getelementptr inbounds i8, ptr %92, i64 24
  store ptr @String, ptr %92, align 8
  store ptr %result.i37.i145, ptr %1814, align 8
  store i32 9, ptr %1815, align 8
  %1816 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %92)
  store ptr %result.i36.i144, ptr %result.i37.i145, align 8
  %1817 = getelementptr i8, ptr %result.i37.i145, i64 8
  store i32 18, ptr %1817, align 4
  %1818 = getelementptr i8, ptr %result.i37.i145, i64 12
  store i32 19, ptr %1818, align 4
  %1819 = load i160, ptr %1814, align 8
  %1820 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  %.sroa.3.8.extract.trunc.i186.i = trunc i160 %1819 to i64
  %1821 = inttoptr i64 %.sroa.3.8.extract.trunc.i186.i to ptr
  %1822 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %1823 = getelementptr i8, ptr %1821, i64 8
  %1824 = load i32, ptr %1823, align 4
  %1825 = add i32 %1824, 1
  %1826 = sext i32 %1825 to i64
  %result.i.i312.i = call noalias ptr @bump_malloc_inner(i64 noundef %1826, ptr nonnull @current_ptr) #29
  %1827 = load i32, ptr %1823, align 4
  %1828 = icmp sgt i32 %1827, 0
  br i1 %1828, label %.lr.ph.i.i148, label %String_c_string_.exit.i146

.lr.ph.i.i148:                                    ; preds = %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit.i
  %1829 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %1830 = load ptr, ptr %1821, align 8
  %1831 = zext nneg i32 %1827 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i312.i, ptr align 1 %1830, i64 %1831, i1 false)
  br label %String_c_string_.exit.i146

String_c_string_.exit.i146:                       ; preds = %.lr.ph.i.i148, %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit.i
  %1832 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %1833 = sext i32 %1827 to i64
  %1834 = getelementptr i8, ptr %result.i.i312.i, i64 %1833
  store i8 0, ptr %1834, align 1
  %puts.i.i147 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i312.i)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  %result.i38.i = call noalias dereferenceable_or_null(5) ptr @bump_malloc_inner(i64 noundef 5, ptr nonnull @current_ptr) #29
  %..i = select i1 %1806, <4 x i8> <i8 80, i8 65, i8 83, i8 83>, <4 x i8> <i8 70, i8 65, i8 73, i8 76>
  %.149.i = select i1 %1806, ptr %93, ptr %94
  store <4 x i8> %..i, ptr %result.i38.i, align 4
  %result.i59.i = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %.149.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.i.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v = select i1 %1806, ptr %93, ptr %94
  %.149.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.i.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel = getelementptr inbounds i8, ptr %.149.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.i.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v, i64 8
  %.149.sroa.sel225.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.i.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v = select i1 %1806, ptr %93, ptr %94
  %.149.sroa.sel225.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.i.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel = getelementptr inbounds i8, ptr %.149.sroa.sel225.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.i.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v, i64 24
  store ptr @String, ptr %.149.i, align 8
  store ptr %result.i59.i, ptr %.149.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.i.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  store i32 9, ptr %.149.sroa.sel225.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.i.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  %1835 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %.149.i)
  store ptr %result.i38.i, ptr %result.i59.i, align 8
  %1836 = getelementptr i8, ptr %result.i59.i, i64 8
  store i32 4, ptr %1836, align 4
  %1837 = getelementptr i8, ptr %result.i59.i, i64 12
  store i32 5, ptr %1837, align 4
  %1838 = load i160, ptr %.149.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.i.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  %1839 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  %.sroa.3.8.extract.trunc.i205.i = trunc i160 %1838 to i64
  %1840 = inttoptr i64 %.sroa.3.8.extract.trunc.i205.i to ptr
  %1841 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %1842 = getelementptr i8, ptr %1840, i64 8
  %1843 = load i32, ptr %1842, align 4
  %1844 = add i32 %1843, 1
  %1845 = sext i32 %1844 to i64
  %result.i.i328.i = call noalias ptr @bump_malloc_inner(i64 noundef %1845, ptr nonnull @current_ptr) #29
  %1846 = load i32, ptr %1842, align 4
  %1847 = icmp sgt i32 %1846, 0
  br i1 %1847, label %.lr.ph.i329.i, label %benchmark_get_sequential_hit.exit

.lr.ph.i329.i:                                    ; preds = %String_c_string_.exit.i146
  %1848 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %1849 = load ptr, ptr %1840, align 8
  %1850 = zext nneg i32 %1846 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i328.i, ptr align 1 %1849, i64 %1850, i1 false)
  br label %benchmark_get_sequential_hit.exit

benchmark_get_sequential_hit.exit:                ; preds = %String_c_string_.exit.i146, %.lr.ph.i329.i
  %1851 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %1852 = sext i32 %1846 to i64
  %1853 = getelementptr i8, ptr %result.i.i328.i, i64 %1852
  store i8 0, ptr %1853, align 1
  %puts.i221.i = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i328.i)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %92)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %93)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %94)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %68)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %69)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %70)
  %result.i.i215 = call noalias dereferenceable_or_null(80) ptr @bump_malloc_inner(i64 noundef 80, ptr nonnull @current_ptr) #29
  store ptr @_parameterization_Ptri32, ptr %result.i.i215, align 8
  %1854 = getelementptr i8, ptr %result.i.i215, i64 8
  store ptr @_parameterization_Ptri32, ptr %1854, align 8
  %1855 = getelementptr i8, ptr %result.i.i215, i64 16
  store ptr @_parameterization_PairPtri32._Ptri32, ptr %1855, align 8
  %1856 = call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %result.i.i215)
  %result.i42.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %oldProtect.i.i214)
  %result.i43.i = call i32 @VirtualProtect(ptr %result.i42.i, i64 16, i32 64, ptr nonnull %oldProtect.i.i214) #16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %oldProtect.i.i214)
  call void @llvm.init.trampoline(ptr %result.i42.i, ptr nonnull @ownklfputh, ptr nonnull @i32_hasher)
  %ret.i.i216 = call ptr @llvm.adjust.trampoline(ptr readonly %result.i42.i) #31
  %1857 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i42.i)
  %result.i44.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %oldProtect.i45.i)
  %result.i46.i = call i32 @VirtualProtect(ptr %result.i44.i, i64 16, i32 64, ptr nonnull %oldProtect.i45.i) #16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %oldProtect.i45.i)
  call void @llvm.init.trampoline(ptr %result.i44.i, ptr nonnull @sjntdoqnon, ptr nonnull @i32_eq)
  %ret.i47.i = call ptr @llvm.adjust.trampoline(ptr readonly %result.i44.i) #31
  %1858 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i44.i)
  %1859 = getelementptr i8, ptr %result.i.i215, i64 64
  store ptr %ret.i.i216, ptr %1859, align 8
  %1860 = getelementptr i8, ptr %result.i.i215, i64 72
  store ptr %ret.i47.i, ptr %1860, align 8
  %result.i.i.i217 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1861 = getelementptr i8, ptr %result.i.i.i217, i64 16
  store ptr @_parameterization_Nil, ptr %1861, align 8
  %result.i4.i.i218 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1862 = getelementptr i8, ptr %result.i4.i.i218, i64 16
  store ptr @_parameterization_Ptri32, ptr %1862, align 8
  %1863 = getelementptr i8, ptr %result.i4.i.i218, i64 8
  store ptr @_parameterization_Ptri32, ptr %1863, align 8
  %1864 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i4.i.i218)
  store ptr @Entry, ptr %result.i4.i.i218, align 8
  %1865 = getelementptr i8, ptr %result.i.i.i217, i64 8
  store ptr %result.i4.i.i218, ptr %1865, align 8
  %1866 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i.i217)
  store ptr @union_typ, ptr %result.i.i.i217, align 8
  %result.i5.i.i219 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i.i217, ptr %result.i5.i.i219, align 8
  %1867 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i5.i.i219)
  %1868 = getelementptr i8, ptr %result.i5.i.i219, i64 16
  store i32 16, ptr %1868, align 4
  %1869 = getelementptr i8, ptr %result.i5.i.i219, i64 20
  store i32 16, ptr %1869, align 4
  %result.i.i.i.i220 = call noalias dereferenceable_or_null(512) ptr @bump_malloc_inner(i64 noundef 512, ptr nonnull @current_ptr) #29
  %1870 = getelementptr i8, ptr %result.i5.i.i219, i64 8
  store ptr %result.i.i.i.i220, ptr %1870, align 8
  %1871 = getelementptr i8, ptr %result.i.i215, i64 24
  store ptr @Array, ptr %1871, align 8
  %1872 = getelementptr i8, ptr %result.i.i215, i64 32
  store ptr %result.i5.i.i219, ptr %1872, align 8
  %1873 = getelementptr i8, ptr %result.i.i215, i64 40
  %1874 = getelementptr i8, ptr %result.i.i215, i64 48
  store i32 9, ptr %1874, align 4
  %1875 = getelementptr i8, ptr %result.i.i215, i64 60
  %result.i.i166.i = call noalias dereferenceable_or_null(32000000) ptr @bump_malloc_inner(i64 noundef 32000000, ptr nonnull @current_ptr) #29
  %1876 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %1877 = call ptr @llvm.invariant.start.p0(i64 40, ptr nonnull @PRNG)
  %1878 = getelementptr inbounds i8, ptr %61, i64 8
  %1879 = getelementptr inbounds i8, ptr %61, i64 24
  %1880 = getelementptr inbounds i8, ptr %61, i64 16
  %1881 = getelementptr inbounds i8, ptr %62, i64 8
  %1882 = getelementptr inbounds i8, ptr %63, i64 8
  %1883 = getelementptr i8, ptr %result.i.i215, i64 56
  %1884 = getelementptr inbounds i8, ptr %53, i64 8
  %1885 = getelementptr inbounds i8, ptr %53, i64 24
  %1886 = getelementptr inbounds i8, ptr %53, i64 16
  %1887 = getelementptr inbounds i8, ptr %54, i64 8
  %1888 = getelementptr inbounds i8, ptr %54, i64 16
  %1889 = getelementptr inbounds i8, ptr %55, i64 8
  %1890 = getelementptr inbounds i8, ptr %56, i64 8
  br label %._crit_edge.i221

._crit_edge.i221:                                 ; preds = %HashMap_insert_internal_keyK_valueV_hashPtri32.exit.i290, %benchmark_get_sequential_hit.exit
  %1891 = phi i32 [ 456, %benchmark_get_sequential_hit.exit ], [ %1894, %HashMap_insert_internal_keyK_valueV_hashPtri32.exit.i290 ]
  %.reg2mem89.0221.i = phi i32 [ 0, %benchmark_get_sequential_hit.exit ], [ %2523, %HashMap_insert_internal_keyK_valueV_hashPtri32.exit.i290 ]
  %1892 = mul i32 %1891, 1103515245
  %1893 = add i32 %1892, 12345
  %1894 = and i32 %1893, 2147483647
  %1895 = add nuw i32 %1894, 1
  %.sroa.038.0.insert.ext.i = zext nneg i32 %1894 to i160
  %1896 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.038.0.insert.ext.i, 1
  %.sroa.035.0.insert.ext.i = zext i32 %1895 to i160
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  %1897 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1898 = load ptr, ptr %1871, align 8
  %1899 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1898, 0
  %1900 = load ptr, ptr %1872, align 8
  %1901 = insertvalue { ptr, ptr, ptr, i32 } %1899, ptr %1900, 1
  %1902 = load ptr, ptr %1873, align 8
  %1903 = insertvalue { ptr, ptr, ptr, i32 } %1901, ptr %1902, 2
  %1904 = load i32, ptr %1874, align 4
  %1905 = insertvalue { ptr, ptr, ptr, i32 } %1903, i32 %1904, 3
  %hash_coef_ptr.i.i42.i.i222 = getelementptr i8, ptr %1898, i64 8
  %tbl_size_ptr.i.i43.i.i223 = getelementptr i8, ptr %1898, i64 16
  %offset_tbl_ptr.i.i44.i.i224 = getelementptr i8, ptr %1898, i64 40
  %hash_coef.i.i45.i.i225 = load i64, ptr %hash_coef_ptr.i.i42.i.i222, align 4
  %tbl_size.i.i46.i.i226 = load i64, ptr %tbl_size_ptr.i.i43.i.i223, align 4
  %offset_tbl.i.i47.i.i227 = load ptr, ptr %offset_tbl_ptr.i.i44.i.i224, align 8
  %product.i.i.i48.i.i228 = mul i64 %hash_coef.i.i45.i.i225, -5261542750394134544
  %shifted.i.i.i49.i.i229 = lshr i64 %product.i.i.i48.i.i228, 32
  %xored.i.i.i50.i.i230 = xor i64 %shifted.i.i.i49.i.i229, %product.i.i.i48.i.i228
  %hash.i.i.i51.i.i231 = and i64 %xored.i.i.i50.i.i230, %tbl_size.i.i46.i.i226
  %offset_ptr.i.i52.i.i232 = getelementptr i32, ptr %offset_tbl.i.i47.i.i227, i64 %hash.i.i.i51.i.i231
  %offset.i.i53.i.i233 = load i32, ptr %offset_ptr.i.i52.i.i232, align 4
  %eq.i.i.i234 = icmp eq i32 %1904, %offset.i.i53.i.i233
  call void @llvm.assume(i1 %eq.i.i.i234) #30
  %1906 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %1907 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1898)
  %1908 = sext i32 %1904 to i64
  %1909 = getelementptr ptr, ptr %1898, i64 %1908
  %1910 = getelementptr i8, ptr %1909, i64 64
  %1911 = load ptr, ptr %1910, align 8
  %1912 = call ptr %1911({ ptr, ptr, ptr, i32 } %1905, ptr nonnull %0)
  %1913 = call i32 %1912({ ptr, ptr, ptr, i32 } %1905, { ptr, ptr, ptr, i32 } %1905, ptr nonnull %0)
  %1914 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1915 = load ptr, ptr %1871, align 8
  %1916 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1915, 0
  %1917 = load ptr, ptr %1872, align 8
  %1918 = insertvalue { ptr, ptr, ptr, i32 } %1916, ptr %1917, 1
  %1919 = load ptr, ptr %1873, align 8
  %1920 = insertvalue { ptr, ptr, ptr, i32 } %1918, ptr %1919, 2
  %1921 = load i32, ptr %1874, align 4
  %1922 = insertvalue { ptr, ptr, ptr, i32 } %1920, i32 %1921, 3
  %hash_coef_ptr.i.i56.i.i235 = getelementptr i8, ptr %1915, i64 8
  %tbl_size_ptr.i.i57.i.i236 = getelementptr i8, ptr %1915, i64 16
  %offset_tbl_ptr.i.i58.i.i237 = getelementptr i8, ptr %1915, i64 40
  %hash_coef.i.i59.i.i238 = load i64, ptr %hash_coef_ptr.i.i56.i.i235, align 4
  %tbl_size.i.i60.i.i239 = load i64, ptr %tbl_size_ptr.i.i57.i.i236, align 4
  %offset_tbl.i.i61.i.i240 = load ptr, ptr %offset_tbl_ptr.i.i58.i.i237, align 8
  %product.i.i.i62.i.i241 = mul i64 %hash_coef.i.i59.i.i238, -5261542750394134544
  %shifted.i.i.i63.i.i242 = lshr i64 %product.i.i.i62.i.i241, 32
  %xored.i.i.i64.i.i243 = xor i64 %shifted.i.i.i63.i.i242, %product.i.i.i62.i.i241
  %hash.i.i.i65.i.i244 = and i64 %xored.i.i.i64.i.i243, %tbl_size.i.i60.i.i239
  %offset_ptr.i.i66.i.i245 = getelementptr i32, ptr %offset_tbl.i.i61.i.i240, i64 %hash.i.i.i65.i.i244
  %offset.i.i67.i.i246 = load i32, ptr %offset_ptr.i.i66.i.i245, align 4
  %eq.i70.i.i247 = icmp eq i32 %1921, %offset.i.i67.i.i246
  call void @llvm.assume(i1 %eq.i70.i.i247) #30
  %1923 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %1924 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1915)
  %1925 = sext i32 %1921 to i64
  %1926 = getelementptr ptr, ptr %1915, i64 %1925
  %1927 = getelementptr i8, ptr %1926, i64 64
  %1928 = load ptr, ptr %1927, align 8
  %1929 = call ptr %1928({ ptr, ptr, ptr, i32 } %1922, ptr nonnull %0)
  %1930 = call i32 %1929({ ptr, ptr, ptr, i32 } %1922, { ptr, ptr, ptr, i32 } %1922, ptr nonnull %0)
  %1931 = icmp eq i32 %1930, 0
  %1932 = load i32, ptr %1875, align 4
  %1933 = mul i32 %1932, 10
  %1934 = add i32 %1933, 10
  %1935 = mul i32 %1913, 7
  %1936 = icmp sge i32 %1934, %1935
  %1937 = or i1 %1931, %1936
  br i1 %1937, label %1938, label %HashMap_insert_keyK_valueV.exit.i248

1938:                                             ; preds = %._crit_edge.i221
  %1939 = shl i32 %1913, 1
  %1940 = call i32 @llvm.smax.i32(i32 %1939, i32 16)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %64)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %65)
  %1941 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1942 = load ptr, ptr %1871, align 8
  %1943 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1942, 0
  %1944 = load ptr, ptr %1872, align 8
  %1945 = insertvalue { ptr, ptr, ptr, i32 } %1943, ptr %1944, 1
  %1946 = load ptr, ptr %1873, align 8
  %1947 = insertvalue { ptr, ptr, ptr, i32 } %1945, ptr %1946, 2
  %1948 = load i32, ptr %1874, align 4
  %1949 = insertvalue { ptr, ptr, ptr, i32 } %1947, i32 %1948, 3
  %hash_coef_ptr.i.i39.i.i383 = getelementptr i8, ptr %1942, i64 8
  %tbl_size_ptr.i.i40.i.i384 = getelementptr i8, ptr %1942, i64 16
  %offset_tbl_ptr.i.i41.i.i385 = getelementptr i8, ptr %1942, i64 40
  %hash_coef.i.i42.i.i386 = load i64, ptr %hash_coef_ptr.i.i39.i.i383, align 4
  %tbl_size.i.i43.i.i387 = load i64, ptr %tbl_size_ptr.i.i40.i.i384, align 4
  %offset_tbl.i.i44.i.i388 = load ptr, ptr %offset_tbl_ptr.i.i41.i.i385, align 8
  %product.i.i.i45.i.i389 = mul i64 %hash_coef.i.i42.i.i386, -5261542750394134544
  %shifted.i.i.i46.i.i390 = lshr i64 %product.i.i.i45.i.i389, 32
  %xored.i.i.i47.i.i391 = xor i64 %shifted.i.i.i46.i.i390, %product.i.i.i45.i.i389
  %hash.i.i.i48.i.i392 = and i64 %xored.i.i.i47.i.i391, %tbl_size.i.i43.i.i387
  %offset_ptr.i.i49.i.i393 = getelementptr i32, ptr %offset_tbl.i.i44.i.i388, i64 %hash.i.i.i48.i.i392
  %offset.i.i50.i.i394 = load i32, ptr %offset_ptr.i.i49.i.i393, align 4
  %eq.i.i391.i = icmp eq i32 %1948, %offset.i.i50.i.i394
  call void @llvm.assume(i1 %eq.i.i391.i) #30
  %1950 = load ptr, ptr %result.i.i215, align 8
  %1951 = load ptr, ptr %1854, align 8
  %result.i.i392.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1952 = getelementptr i8, ptr %result.i.i392.i, i64 16
  store ptr @_parameterization_Nil, ptr %1952, align 8
  %result.i66.i.i395 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1953 = getelementptr i8, ptr %result.i66.i.i395, i64 16
  store ptr %1951, ptr %1953, align 8
  %1954 = getelementptr i8, ptr %result.i66.i.i395, i64 8
  store ptr %1950, ptr %1954, align 8
  %1955 = getelementptr i8, ptr %result.i66.i.i395, i64 24
  store ptr null, ptr %1955, align 8
  %1956 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i66.i.i395)
  store ptr @Entry, ptr %result.i66.i.i395, align 8
  %1957 = getelementptr i8, ptr %result.i.i392.i, i64 8
  store ptr %result.i66.i.i395, ptr %1957, align 8
  %1958 = getelementptr i8, ptr %result.i.i392.i, i64 24
  store ptr null, ptr %1958, align 8
  %1959 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i392.i)
  store ptr @union_typ, ptr %result.i.i392.i, align 8
  %result.i67.i.i396 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i392.i, ptr %result.i67.i.i396, align 8
  %1960 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i67.i.i396)
  %1961 = getelementptr i8, ptr %result.i67.i.i396, i64 16
  store i32 %1940, ptr %1961, align 4
  %1962 = getelementptr i8, ptr %result.i67.i.i396, i64 20
  store i32 %1940, ptr %1962, align 4
  %1963 = zext nneg i32 %1940 to i64
  %1964 = shl nuw nsw i64 %1963, 5
  %result.i.i.i393.i = call noalias ptr @bump_malloc_inner(i64 noundef %1964, ptr nonnull @current_ptr) #29
  %1965 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %1966 = getelementptr i8, ptr %result.i67.i.i396, i64 8
  store ptr %result.i.i.i393.i, ptr %1966, align 8
  store ptr @Array, ptr %1871, align 8
  store ptr %result.i67.i.i396, ptr %1872, align 8
  store i32 9, ptr %1874, align 4
  store i32 0, ptr %1883, align 4
  store i32 0, ptr %1875, align 4
  %invariant.gep.i.i397 = getelementptr i8, ptr %1942, i64 64
  %1967 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1968 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %1969 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %1942)
  %1970 = sext i32 %1948 to i64
  %gep.i486.i = getelementptr ptr, ptr %invariant.gep.i.i397, i64 %1970
  %1971 = load ptr, ptr %gep.i486.i, align 8
  %1972 = call ptr %1971({ ptr, ptr, ptr, i32 } %1949, ptr nonnull %0)
  %1973 = call i32 %1972({ ptr, ptr, ptr, i32 } %1949, { ptr, ptr, ptr, i32 } %1949, ptr nonnull %0)
  %1974 = icmp sgt i32 %1973, 0
  br i1 %1974, label %.lr.ph489.i, label %HashMap_resize_new_capacityPtri32.exit.i398

.lr.ph489.i:                                      ; preds = %1938
  %invariant.gep172.i.i399 = getelementptr i8, ptr %1942, i64 120
  %1975 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %gep173.i.i400 = getelementptr ptr, ptr %invariant.gep172.i.i399, i64 %1970
  br label %1976

1976:                                             ; preds = %._crit_edge3.i.i403, %.lr.ph489.i
  %.reg2mem31.0.i487.i = phi i32 [ 0, %.lr.ph489.i ], [ %2243, %._crit_edge3.i.i403 ]
  store ptr @_parameterization_Ptri32, ptr %64, align 8
  %1977 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %64)
  %1978 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %1942)
  %1979 = load ptr, ptr %gep173.i.i400, align 8
  store ptr @i32_typ, ptr %65, align 8
  %1980 = call ptr %1979({ ptr, ptr, ptr, i32 } %1949, ptr nonnull %65)
  %1981 = call { ptr, i160 } %1980({ ptr, ptr, ptr, i32 } %1949, { ptr, ptr, ptr, i32 } %1949, ptr nonnull %64, i32 %.reg2mem31.0.i487.i)
  %.fca.0.extract30.i.i401 = extractvalue { ptr, i160 } %1981, 0
  %1982 = icmp ne ptr %.fca.0.extract30.i.i401, @nil_typ
  %1983 = icmp ne ptr %.fca.0.extract30.i.i401, null
  %.not37.i.i402 = and i1 %1982, %1983
  br i1 %.not37.i.i402, label %1984, label %._crit_edge3.i.i403

1984:                                             ; preds = %1976
  %.fca.1.extract32.i.i404 = extractvalue { ptr, i160 } %1981, 1
  %.sroa.5164.8.extract.trunc.i.i405 = trunc i160 %.fca.1.extract32.i.i404 to i64
  %1985 = inttoptr i64 %.sroa.5164.8.extract.trunc.i.i405 to ptr
  %.sroa.9.8.extract.shift.i.i406 = lshr i160 %.fca.1.extract32.i.i404, 64
  %.sroa.9.8.extract.trunc.i.i407 = trunc i160 %.sroa.9.8.extract.shift.i.i406 to i64
  %1986 = inttoptr i64 %.sroa.9.8.extract.trunc.i.i407 to ptr
  %hash_coef_ptr.i.i83.i.i408 = getelementptr i8, ptr %.fca.0.extract30.i.i401, i64 8
  %tbl_size_ptr.i.i84.i.i409 = getelementptr i8, ptr %.fca.0.extract30.i.i401, i64 16
  %offset_tbl_ptr.i.i85.i.i410 = getelementptr i8, ptr %.fca.0.extract30.i.i401, i64 40
  %hash_coef.i.i86.i.i411 = load i64, ptr %hash_coef_ptr.i.i83.i.i408, align 4
  %tbl_size.i.i87.i.i412 = load i64, ptr %tbl_size_ptr.i.i84.i.i409, align 4
  %offset_tbl.i.i88.i.i413 = load ptr, ptr %offset_tbl_ptr.i.i85.i.i410, align 8
  %product.i.i.i89.i.i414 = mul i64 %hash_coef.i.i86.i.i411, 4015701072841558310
  %shifted.i.i.i90.i.i415 = lshr i64 %product.i.i.i89.i.i414, 32
  %xored.i.i.i91.i.i416 = xor i64 %shifted.i.i.i90.i.i415, %product.i.i.i89.i.i414
  %hash.i.i.i92.i.i417 = and i64 %xored.i.i.i91.i.i416, %tbl_size.i.i87.i.i412
  %offset_ptr.i.i93.i.i418 = getelementptr i32, ptr %offset_tbl.i.i88.i.i413, i64 %hash.i.i.i92.i.i417
  %offset.i.i94.i.i419 = load i32, ptr %offset_ptr.i.i93.i.i418, align 4
  %1987 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract30.i.i401, 0
  %1988 = insertvalue { ptr, ptr, ptr, i32 } %1987, ptr %1985, 1
  %1989 = insertvalue { ptr, ptr, ptr, i32 } %1988, ptr %1986, 2
  %1990 = insertvalue { ptr, ptr, ptr, i32 } %1989, i32 %offset.i.i94.i.i419, 3
  %1991 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %1992 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %1993 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract30.i.i401)
  %1994 = sext i32 %offset.i.i94.i.i419 to i64
  %1995 = getelementptr ptr, ptr %.fca.0.extract30.i.i401, i64 %1994
  %1996 = getelementptr i8, ptr %1995, i64 56
  %1997 = load ptr, ptr %1996, align 8
  %1998 = call ptr %1997({ ptr, ptr, ptr, i32 } %1990, ptr nonnull %0)
  %1999 = call { ptr, i160 } %1998({ ptr, ptr, ptr, i32 } %1990, { ptr, ptr, ptr, i32 } %1990, ptr nonnull %0)
  %.fca.0.extract23.i.i420 = extractvalue { ptr, i160 } %1999, 0
  %2000 = getelementptr i8, ptr %.fca.0.extract23.i.i420, i64 8
  %2001 = getelementptr i8, ptr %.fca.0.extract23.i.i420, i64 16
  %2002 = getelementptr i8, ptr %.fca.0.extract23.i.i420, i64 24
  %2003 = getelementptr i8, ptr %.fca.0.extract23.i.i420, i64 32
  %2004 = load i64, ptr %2000, align 4
  %2005 = load i64, ptr %2001, align 4
  %2006 = load ptr, ptr %2002, align 8
  %2007 = load ptr, ptr %2003, align 8
  %result.i96.i.i421 = call i1 %2006(i64 %2005, i64 %2004, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %2007) #3
  br i1 %result.i96.i.i421, label %._crit_edge3.i.i403, label %2008

2008:                                             ; preds = %1984
  %result.i97.i.i422 = call i1 %2006(i64 %2005, i64 %2004, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr readonly %2007) #3
  br i1 %result.i97.i.i422, label %2009, label %._crit_edge3.i.i403

2009:                                             ; preds = %2008
  %2010 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %2011 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %2012 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract30.i.i401)
  %2013 = getelementptr i8, ptr %1995, i64 48
  %2014 = load ptr, ptr %2013, align 8
  %2015 = call ptr %2014({ ptr, ptr, ptr, i32 } %1990, ptr nonnull %0)
  %2016 = call { ptr, i160 } %2015({ ptr, ptr, ptr, i32 } %1990, { ptr, ptr, ptr, i32 } %1990, ptr nonnull %0)
  %2017 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %2018 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %2019 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract30.i.i401)
  %2020 = getelementptr i8, ptr %1995, i64 64
  %2021 = load ptr, ptr %2020, align 8
  %2022 = call ptr %2021({ ptr, ptr, ptr, i32 } %1990, ptr nonnull %0)
  %2023 = call i32 %2022({ ptr, ptr, ptr, i32 } %1990, { ptr, ptr, ptr, i32 } %1990, ptr nonnull %0)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %51)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %52)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %53)
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %54)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %55)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %56)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %47)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %48)
  %2024 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %2025 = load ptr, ptr %1871, align 8
  %2026 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2025, 0
  %2027 = load ptr, ptr %1872, align 8
  %2028 = insertvalue { ptr, ptr, ptr, i32 } %2026, ptr %2027, 1
  %2029 = load ptr, ptr %1873, align 8
  %2030 = insertvalue { ptr, ptr, ptr, i32 } %2028, ptr %2029, 2
  %2031 = load i32, ptr %1874, align 4
  %2032 = insertvalue { ptr, ptr, ptr, i32 } %2030, i32 %2031, 3
  %hash_coef_ptr.i.i51.i700.i = getelementptr i8, ptr %2025, i64 8
  %tbl_size_ptr.i.i52.i701.i = getelementptr i8, ptr %2025, i64 16
  %offset_tbl_ptr.i.i53.i702.i = getelementptr i8, ptr %2025, i64 40
  %hash_coef.i.i54.i703.i = load i64, ptr %hash_coef_ptr.i.i51.i700.i, align 4
  %tbl_size.i.i55.i704.i = load i64, ptr %tbl_size_ptr.i.i52.i701.i, align 4
  %offset_tbl.i.i56.i705.i = load ptr, ptr %offset_tbl_ptr.i.i53.i702.i, align 8
  %product.i.i.i57.i706.i = mul i64 %hash_coef.i.i54.i703.i, -5261542750394134544
  %shifted.i.i.i58.i707.i = lshr i64 %product.i.i.i57.i706.i, 32
  %xored.i.i.i59.i708.i = xor i64 %shifted.i.i.i58.i707.i, %product.i.i.i57.i706.i
  %hash.i.i.i60.i709.i = and i64 %xored.i.i.i59.i708.i, %tbl_size.i.i55.i704.i
  %offset_ptr.i.i61.i710.i = getelementptr i32, ptr %offset_tbl.i.i56.i705.i, i64 %hash.i.i.i60.i709.i
  %offset.i.i62.i711.i = load i32, ptr %offset_ptr.i.i61.i710.i, align 4
  %eq.i.i712.i = icmp eq i32 %2031, %offset.i.i62.i711.i
  call void @llvm.assume(i1 %eq.i.i712.i) #30
  %2033 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %2034 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2025)
  %2035 = sext i32 %2031 to i64
  %2036 = getelementptr ptr, ptr %2025, i64 %2035
  %2037 = getelementptr i8, ptr %2036, i64 64
  %2038 = load ptr, ptr %2037, align 8
  %2039 = call ptr %2038({ ptr, ptr, ptr, i32 } %2032, ptr nonnull %0)
  %2040 = call i32 %2039({ ptr, ptr, ptr, i32 } %2032, { ptr, ptr, ptr, i32 } %2032, ptr nonnull %0)
  %2041 = add i32 %2040, -1
  %2042 = and i32 %2041, %2023
  %2043 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  br label %2044

2044:                                             ; preds = %2093, %2009
  %spec.store.select.i747756.i = phi i32 [ %spec.store.select.i747.i, %2093 ], [ -1, %2009 ]
  %.0..0..0..i713.i = phi i32 [ %2111, %2093 ], [ %2042, %2009 ]
  %2045 = load ptr, ptr %1871, align 8
  %2046 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2045, 0
  %2047 = load ptr, ptr %1872, align 8
  %2048 = insertvalue { ptr, ptr, ptr, i32 } %2046, ptr %2047, 1
  %2049 = load ptr, ptr %1873, align 8
  %2050 = insertvalue { ptr, ptr, ptr, i32 } %2048, ptr %2049, 2
  %2051 = load i32, ptr %1874, align 4
  %2052 = insertvalue { ptr, ptr, ptr, i32 } %2050, i32 %2051, 3
  %hash_coef_ptr.i.i65.i714.i = getelementptr i8, ptr %2045, i64 8
  %tbl_size_ptr.i.i66.i715.i = getelementptr i8, ptr %2045, i64 16
  %offset_tbl_ptr.i.i67.i716.i = getelementptr i8, ptr %2045, i64 40
  %hash_coef.i.i68.i717.i = load i64, ptr %hash_coef_ptr.i.i65.i714.i, align 4
  %tbl_size.i.i69.i718.i = load i64, ptr %tbl_size_ptr.i.i66.i715.i, align 4
  %offset_tbl.i.i70.i719.i = load ptr, ptr %offset_tbl_ptr.i.i67.i716.i, align 8
  %product.i.i.i71.i720.i = mul i64 %hash_coef.i.i68.i717.i, -5261542750394134544
  %shifted.i.i.i72.i721.i = lshr i64 %product.i.i.i71.i720.i, 32
  %xored.i.i.i73.i722.i = xor i64 %shifted.i.i.i72.i721.i, %product.i.i.i71.i720.i
  %hash.i.i.i74.i723.i = and i64 %xored.i.i.i73.i722.i, %tbl_size.i.i69.i718.i
  %offset_ptr.i.i75.i724.i = getelementptr i32, ptr %offset_tbl.i.i70.i719.i, i64 %hash.i.i.i74.i723.i
  %offset.i.i76.i725.i = load i32, ptr %offset_ptr.i.i75.i724.i, align 4
  %eq.i79.i726.i = icmp eq i32 %2051, %offset.i.i76.i725.i
  call void @llvm.assume(i1 %eq.i79.i726.i) #30
  %2053 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  store ptr @_parameterization_Ptri32, ptr %47, align 8
  %2054 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %47)
  %2055 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2045)
  %2056 = sext i32 %2051 to i64
  %2057 = getelementptr ptr, ptr %2045, i64 %2056
  %2058 = getelementptr i8, ptr %2057, i64 120
  %2059 = load ptr, ptr %2058, align 8
  store ptr @i32_typ, ptr %48, align 8
  %2060 = call ptr %2059({ ptr, ptr, ptr, i32 } %2052, ptr nonnull %48)
  %2061 = call { ptr, i160 } %2060({ ptr, ptr, ptr, i32 } %2052, { ptr, ptr, ptr, i32 } %2052, ptr nonnull %47, i32 %.0..0..0..i713.i)
  %.fca.0.extract36.i727.i = extractvalue { ptr, i160 } %2061, 0
  %2062 = icmp eq ptr %.fca.0.extract36.i727.i, @nil_typ
  %2063 = icmp eq ptr %.fca.0.extract36.i727.i, null
  %2064 = or i1 %2062, %2063
  br i1 %2064, label %2112, label %2065

2065:                                             ; preds = %2044
  %.fca.1.extract38.i728.i = extractvalue { ptr, i160 } %2061, 1
  %.sroa.5.8.extract.shift.i729.i = lshr i160 %.fca.1.extract38.i728.i, 64
  %.sroa.5.8.extract.trunc.i730.i = trunc i160 %.sroa.5.8.extract.shift.i729.i to i64
  %.sroa.2.8.extract.trunc165.i731.i = trunc i160 %.fca.1.extract38.i728.i to i64
  %2066 = inttoptr i64 %.sroa.2.8.extract.trunc165.i731.i to ptr
  %2067 = inttoptr i64 %.sroa.5.8.extract.trunc.i730.i to ptr
  %hash_coef_ptr.i.i81.i732.i = getelementptr i8, ptr %.fca.0.extract36.i727.i, i64 8
  %tbl_size_ptr.i.i82.i733.i = getelementptr i8, ptr %.fca.0.extract36.i727.i, i64 16
  %offset_tbl_ptr.i.i83.i734.i = getelementptr i8, ptr %.fca.0.extract36.i727.i, i64 40
  %hash_coef.i.i84.i735.i = load i64, ptr %hash_coef_ptr.i.i81.i732.i, align 4
  %tbl_size.i.i85.i736.i = load i64, ptr %tbl_size_ptr.i.i82.i733.i, align 4
  %offset_tbl.i.i86.i737.i = load ptr, ptr %offset_tbl_ptr.i.i83.i734.i, align 8
  %product.i.i.i87.i738.i = mul i64 %hash_coef.i.i84.i735.i, 4015701072841558310
  %shifted.i.i.i88.i739.i = lshr i64 %product.i.i.i87.i738.i, 32
  %xored.i.i.i89.i740.i = xor i64 %shifted.i.i.i88.i739.i, %product.i.i.i87.i738.i
  %hash.i.i.i90.i741.i = and i64 %xored.i.i.i89.i740.i, %tbl_size.i.i85.i736.i
  %offset_ptr.i.i91.i742.i = getelementptr i32, ptr %offset_tbl.i.i86.i737.i, i64 %hash.i.i.i90.i741.i
  %offset.i.i92.i743.i = load i32, ptr %offset_ptr.i.i91.i742.i, align 4
  %2068 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract36.i727.i, 0
  %2069 = insertvalue { ptr, ptr, ptr, i32 } %2068, ptr %2066, 1
  %2070 = insertvalue { ptr, ptr, ptr, i32 } %2069, ptr %2067, 2
  %2071 = insertvalue { ptr, ptr, ptr, i32 } %2070, i32 %offset.i.i92.i743.i, 3
  %2072 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %2073 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %2074 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i727.i)
  %2075 = sext i32 %offset.i.i92.i743.i to i64
  %2076 = getelementptr ptr, ptr %.fca.0.extract36.i727.i, i64 %2075
  %2077 = getelementptr i8, ptr %2076, i64 64
  %2078 = load ptr, ptr %2077, align 8
  %2079 = call ptr %2078({ ptr, ptr, ptr, i32 } %2071, ptr nonnull %0)
  %2080 = call i32 %2079({ ptr, ptr, ptr, i32 } %2071, { ptr, ptr, ptr, i32 } %2071, ptr nonnull %0)
  %2081 = icmp eq i32 %2080, %2023
  %2082 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %2083 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %2084 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i727.i)
  %2085 = getelementptr i8, ptr %2076, i64 48
  %2086 = load ptr, ptr %2085, align 8
  %2087 = call ptr %2086({ ptr, ptr, ptr, i32 } %2071, ptr nonnull %0)
  %2088 = call { ptr, i160 } %2087({ ptr, ptr, ptr, i32 } %2071, { ptr, ptr, ptr, i32 } %2071, ptr nonnull %0)
  %2089 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %2090 = load ptr, ptr %1860, align 8
  %2091 = call i1 %2090({ ptr, i160 } %2088, { ptr, i160 } %2016)
  %2092 = and i1 %2081, %2091
  br i1 %2092, label %HashMap_find_slot_keyK_hashPtri32.exit748.i, label %2093

2093:                                             ; preds = %2065
  %2094 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %2095 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %2096 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i727.i)
  %2097 = getelementptr i8, ptr %2076, i64 56
  %2098 = load ptr, ptr %2097, align 8
  %2099 = call ptr %2098({ ptr, ptr, ptr, i32 } %2071, ptr nonnull %0)
  %2100 = call { ptr, i160 } %2099({ ptr, ptr, ptr, i32 } %2071, { ptr, ptr, ptr, i32 } %2071, ptr nonnull %0)
  %.fca.0.extract15.i744.i = extractvalue { ptr, i160 } %2100, 0
  %2101 = getelementptr i8, ptr %.fca.0.extract15.i744.i, i64 8
  %2102 = getelementptr i8, ptr %.fca.0.extract15.i744.i, i64 16
  %2103 = getelementptr i8, ptr %.fca.0.extract15.i744.i, i64 24
  %2104 = getelementptr i8, ptr %.fca.0.extract15.i744.i, i64 32
  %2105 = load i64, ptr %2101, align 4
  %2106 = load i64, ptr %2102, align 4
  %2107 = load ptr, ptr %2103, align 8
  %2108 = load ptr, ptr %2104, align 8
  %result.i.i745.i = call i1 %2107(i64 %2106, i64 %2105, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %2108) #3
  %2109 = icmp eq i32 %spec.store.select.i747756.i, -1
  %or.cond.i746.i = select i1 %result.i.i745.i, i1 %2109, i1 false
  %spec.store.select.i747.i = select i1 %or.cond.i746.i, i32 %.0..0..0..i713.i, i32 %spec.store.select.i747756.i
  %2110 = add i32 %.0..0..0..i713.i, 1
  %2111 = and i32 %2110, %2041
  br label %2044

2112:                                             ; preds = %2044
  %2113 = icmp eq i32 %spec.store.select.i747756.i, -1
  %.pre771.i = select i1 %2113, i32 %.0..0..0..i713.i, i32 %spec.store.select.i747756.i
  br label %HashMap_find_slot_keyK_hashPtri32.exit748.i

HashMap_find_slot_keyK_hashPtri32.exit748.i:      ; preds = %2065, %2112
  %2114 = phi i32 [ %.pre771.i, %2112 ], [ %.0..0..0..i713.i, %2065 ]
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %47)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %48)
  %2115 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %2116 = load ptr, ptr %1871, align 8
  %2117 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2116, 0
  %2118 = load ptr, ptr %1872, align 8
  %2119 = insertvalue { ptr, ptr, ptr, i32 } %2117, ptr %2118, 1
  %2120 = load ptr, ptr %1873, align 8
  %2121 = insertvalue { ptr, ptr, ptr, i32 } %2119, ptr %2120, 2
  %2122 = load i32, ptr %1874, align 4
  %2123 = insertvalue { ptr, ptr, ptr, i32 } %2121, i32 %2122, 3
  %hash_coef_ptr.i.i56.i520.i = getelementptr i8, ptr %2116, i64 8
  %tbl_size_ptr.i.i57.i521.i = getelementptr i8, ptr %2116, i64 16
  %offset_tbl_ptr.i.i58.i522.i = getelementptr i8, ptr %2116, i64 40
  %hash_coef.i.i59.i523.i = load i64, ptr %hash_coef_ptr.i.i56.i520.i, align 4
  %tbl_size.i.i60.i524.i = load i64, ptr %tbl_size_ptr.i.i57.i521.i, align 4
  %offset_tbl.i.i61.i525.i = load ptr, ptr %offset_tbl_ptr.i.i58.i522.i, align 8
  %product.i.i.i62.i526.i = mul i64 %hash_coef.i.i59.i523.i, -5261542750394134544
  %shifted.i.i.i63.i527.i = lshr i64 %product.i.i.i62.i526.i, 32
  %xored.i.i.i64.i528.i = xor i64 %shifted.i.i.i63.i527.i, %product.i.i.i62.i526.i
  %hash.i.i.i65.i529.i = and i64 %xored.i.i.i64.i528.i, %tbl_size.i.i60.i524.i
  %offset_ptr.i.i66.i530.i = getelementptr i32, ptr %offset_tbl.i.i61.i525.i, i64 %hash.i.i.i65.i529.i
  %offset.i.i67.i531.i = load i32, ptr %offset_ptr.i.i66.i530.i, align 4
  %eq.i.i532.i = icmp eq i32 %2122, %offset.i.i67.i531.i
  call void @llvm.assume(i1 %eq.i.i532.i) #30
  store ptr @_parameterization_Ptri32, ptr %51, align 8
  %2124 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %51)
  %2125 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2116)
  %2126 = sext i32 %2122 to i64
  %2127 = getelementptr ptr, ptr %2116, i64 %2126
  %2128 = getelementptr i8, ptr %2127, i64 120
  %2129 = load ptr, ptr %2128, align 8
  store ptr @i32_typ, ptr %52, align 8
  %2130 = call ptr %2129({ ptr, ptr, ptr, i32 } %2123, ptr nonnull %52)
  %2131 = call { ptr, i160 } %2130({ ptr, ptr, ptr, i32 } %2123, { ptr, ptr, ptr, i32 } %2123, ptr nonnull %51, i32 %2114)
  %.fca.0.extract2.i533.i = extractvalue { ptr, i160 } %2131, 0
  %2132 = load ptr, ptr %result.i.i215, align 8
  %2133 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %2134 = load ptr, ptr %1854, align 8
  %2135 = load ptr, ptr %2132, align 8
  %2136 = getelementptr i8, ptr %2135, i64 48
  %2137 = load ptr, ptr %2136, align 8
  %2138 = call { i64, i64 } %2137(ptr nonnull %2132)
  %2139 = extractvalue { i64, i64 } %2138, 0
  %2140 = extractvalue { i64, i64 } %2138, 1
  %2141 = call i64 @llvm.umax.i64(i64 %2140, i64 8)
  %2142 = urem i64 16, %2140
  %2143 = icmp eq i64 %2142, 0
  %2144 = sub i64 %2140, %2142
  %2145 = select i1 %2143, i64 0, i64 %2144
  %2146 = add i64 %2145, %2139
  %2147 = add i64 %2146, 16
  %2148 = and i64 %2146, 7
  %2149 = icmp eq i64 %2148, 0
  %2150 = sub nuw nsw i64 40, %2148
  %2151 = select i1 %2149, i64 32, i64 %2150
  %2152 = add i64 %2147, %2151
  %2153 = and i64 %2152, 3
  %2154 = icmp eq i64 %2153, 0
  %2155 = sub nuw nsw i64 8, %2153
  %2156 = select i1 %2154, i64 4, i64 %2155
  %2157 = add i64 %2156, %2152
  %2158 = urem i64 %2157, %2141
  %2159 = icmp eq i64 %2158, 0
  %2160 = sub i64 %2141, %2158
  %2161 = select i1 %2159, i64 0, i64 %2160
  %2162 = add i64 %2157, %2161
  %result.i.i534.i = call noalias ptr @bump_malloc_inner(i64 noundef %2162, ptr nonnull @current_ptr) #29
  store ptr %2132, ptr %result.i.i534.i, align 8
  %2163 = getelementptr i8, ptr %result.i.i534.i, i64 8
  store ptr %2134, ptr %2163, align 8
  %2164 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i.i534.i)
  store ptr @Entry, ptr %53, align 8
  store ptr %result.i.i534.i, ptr %1884, align 8
  store i32 9, ptr %1885, align 8
  %2165 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %53)
  %2166 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Entry, ptr undef, ptr undef, i32 undef }, ptr %result.i.i534.i, 1
  %2167 = insertvalue { ptr, ptr, ptr, i32 } %2166, ptr undef, 2
  %2168 = insertvalue { ptr, ptr, ptr, i32 } %2167, i32 9, 3
  %2169 = load ptr, ptr %result.i.i215, align 8
  %2170 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %2171 = load ptr, ptr %1854, align 8
  store ptr %2169, ptr %54, align 8
  store ptr %2171, ptr %1887, align 8
  store ptr @_parameterization_Ptri32, ptr %1888, align 8
  %2172 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %54)
  %2173 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %2174 = load i64, ptr %2000, align 4
  %2175 = load i64, ptr %2001, align 4
  %2176 = load ptr, ptr %2002, align 8
  %2177 = load ptr, ptr %2003, align 8
  %result.i.i.i535.i = call i1 %2176(i64 %2175, i64 %2174, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr readonly %2177) #3
  %2178 = select i1 %result.i.i.i535.i, i64 10, i64 9
  %gep661.i = getelementptr [14 x ptr], ptr getelementptr inbounds (i8, ptr @Entry, i64 72), i64 0, i64 %2178
  %2179 = load ptr, ptr %gep661.i, align 8
  call void %2179({ ptr, ptr, ptr, i32 } %2168, { ptr, ptr, ptr, i32 } %2168, ptr nonnull %54, { ptr, i160 } %2016, { ptr, i160 } %1999, i32 %2023)
  %2180 = load ptr, ptr %1886, align 8
  %2181 = ptrtoint ptr %result.i.i534.i to i64
  %2182 = ptrtoint ptr %2180 to i64
  %.sroa.2.0.insert.ext.i536.i = zext i64 %2182 to i160
  %.sroa.2.0.insert.shift.i537.i = shl nuw nsw i160 %.sroa.2.0.insert.ext.i536.i, 64
  %.sroa.0.0.insert.ext.i539.i = zext i64 %2181 to i160
  %.sroa.2.0.insert.insert.i538.i = or disjoint i160 %.sroa.2.0.insert.shift.i537.i, %.sroa.0.0.insert.ext.i539.i
  %.sroa.0.0.insert.insert.i540.i = or disjoint i160 %.sroa.2.0.insert.insert.i538.i, 3062541302288446171170371466885913903104
  %2183 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0.0.insert.insert.i540.i, 1
  %2184 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %2185 = load ptr, ptr %1871, align 8
  %2186 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2185, 0
  %2187 = load ptr, ptr %1872, align 8
  %2188 = insertvalue { ptr, ptr, ptr, i32 } %2186, ptr %2187, 1
  %2189 = load ptr, ptr %1873, align 8
  %2190 = insertvalue { ptr, ptr, ptr, i32 } %2188, ptr %2189, 2
  %2191 = load i32, ptr %1874, align 4
  %2192 = insertvalue { ptr, ptr, ptr, i32 } %2190, i32 %2191, 3
  %hash_coef_ptr.i.i84.i541.i = getelementptr i8, ptr %2185, i64 8
  %tbl_size_ptr.i.i85.i542.i = getelementptr i8, ptr %2185, i64 16
  %offset_tbl_ptr.i.i86.i543.i = getelementptr i8, ptr %2185, i64 40
  %hash_coef.i.i87.i544.i = load i64, ptr %hash_coef_ptr.i.i84.i541.i, align 4
  %tbl_size.i.i88.i545.i = load i64, ptr %tbl_size_ptr.i.i85.i542.i, align 4
  %offset_tbl.i.i89.i546.i = load ptr, ptr %offset_tbl_ptr.i.i86.i543.i, align 8
  %product.i.i.i90.i547.i = mul i64 %hash_coef.i.i87.i544.i, -5261542750394134544
  %shifted.i.i.i91.i548.i = lshr i64 %product.i.i.i90.i547.i, 32
  %xored.i.i.i92.i549.i = xor i64 %shifted.i.i.i91.i548.i, %product.i.i.i90.i547.i
  %hash.i.i.i93.i550.i = and i64 %xored.i.i.i92.i549.i, %tbl_size.i.i88.i545.i
  %offset_ptr.i.i94.i551.i = getelementptr i32, ptr %offset_tbl.i.i89.i546.i, i64 %hash.i.i.i93.i550.i
  %offset.i.i95.i552.i = load i32, ptr %offset_ptr.i.i94.i551.i, align 4
  %eq.i98.i553.i = icmp eq i32 %2191, %offset.i.i95.i552.i
  call void @llvm.assume(i1 %eq.i98.i553.i) #30
  %2193 = load ptr, ptr %result.i.i215, align 8
  %2194 = load ptr, ptr %1854, align 8
  %result.i99.i554.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2195 = getelementptr i8, ptr %result.i99.i554.i, i64 16
  store ptr %2194, ptr %2195, align 8
  %2196 = getelementptr i8, ptr %result.i99.i554.i, i64 8
  store ptr %2193, ptr %2196, align 8
  %2197 = getelementptr i8, ptr %result.i99.i554.i, i64 24
  store ptr null, ptr %2197, align 8
  %2198 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i99.i554.i)
  store ptr @Entry, ptr %result.i99.i554.i, align 8
  store ptr @_parameterization_Ptri32, ptr %55, align 8
  store ptr %result.i99.i554.i, ptr %1889, align 8
  %2199 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %55)
  %2200 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2185)
  %2201 = sext i32 %2191 to i64
  %2202 = getelementptr ptr, ptr %2185, i64 %2201
  %2203 = getelementptr i8, ptr %2202, i64 128
  %2204 = load ptr, ptr %2203, align 8
  store ptr @i32_typ, ptr %56, align 8
  store ptr @Entry, ptr %1890, align 8
  %2205 = call ptr %2204({ ptr, ptr, ptr, i32 } %2192, ptr nonnull %56)
  call void %2205({ ptr, ptr, ptr, i32 } %2192, { ptr, ptr, ptr, i32 } %2192, ptr nonnull %55, i32 %2114, { ptr, i160 } %2183)
  %2206 = icmp eq ptr %.fca.0.extract2.i533.i, @nil_typ
  %2207 = icmp eq ptr %.fca.0.extract2.i533.i, null
  %2208 = or i1 %2206, %2207
  br i1 %2208, label %._crit_edge.thread.i576.i, label %._crit_edge.i555.i

._crit_edge.thread.i576.i:                        ; preds = %HashMap_find_slot_keyK_hashPtri32.exit748.i
  %2209 = load i32, ptr %1883, align 4
  %2210 = add i32 %2209, 1
  store i32 %2210, ptr %1883, align 4
  br label %._crit_edge1.sink.split.i574.i

._crit_edge.i555.i:                               ; preds = %HashMap_find_slot_keyK_hashPtri32.exit748.i
  %.fca.1.extract4.i556.i = extractvalue { ptr, i160 } %2131, 1
  %.sroa.3192.8.extract.trunc.i557.i = trunc i160 %.fca.1.extract4.i556.i to i64
  %2211 = inttoptr i64 %.sroa.3192.8.extract.trunc.i557.i to ptr
  %.sroa.5193.8.extract.shift.i558.i = lshr i160 %.fca.1.extract4.i556.i, 64
  %.sroa.5193.8.extract.trunc.i559.i = trunc i160 %.sroa.5193.8.extract.shift.i558.i to i64
  %2212 = inttoptr i64 %.sroa.5193.8.extract.trunc.i559.i to ptr
  %hash_coef_ptr.i.i101.i560.i = getelementptr i8, ptr %.fca.0.extract2.i533.i, i64 8
  %tbl_size_ptr.i.i102.i561.i = getelementptr i8, ptr %.fca.0.extract2.i533.i, i64 16
  %offset_tbl_ptr.i.i103.i562.i = getelementptr i8, ptr %.fca.0.extract2.i533.i, i64 40
  %hash_coef.i.i104.i563.i = load i64, ptr %hash_coef_ptr.i.i101.i560.i, align 4
  %tbl_size.i.i105.i564.i = load i64, ptr %tbl_size_ptr.i.i102.i561.i, align 4
  %offset_tbl.i.i106.i565.i = load ptr, ptr %offset_tbl_ptr.i.i103.i562.i, align 8
  %product.i.i.i107.i566.i = mul i64 %hash_coef.i.i104.i563.i, 4015701072841558310
  %shifted.i.i.i108.i567.i = lshr i64 %product.i.i.i107.i566.i, 32
  %xored.i.i.i109.i568.i = xor i64 %shifted.i.i.i108.i567.i, %product.i.i.i107.i566.i
  %hash.i.i.i110.i569.i = and i64 %xored.i.i.i109.i568.i, %tbl_size.i.i105.i564.i
  %offset_ptr.i.i111.i570.i = getelementptr i32, ptr %offset_tbl.i.i106.i565.i, i64 %hash.i.i.i110.i569.i
  %offset.i.i112.i571.i = load i32, ptr %offset_ptr.i.i111.i570.i, align 4
  %2213 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract2.i533.i, 0
  %2214 = insertvalue { ptr, ptr, ptr, i32 } %2213, ptr %2211, 1
  %2215 = insertvalue { ptr, ptr, ptr, i32 } %2214, ptr %2212, 2
  %2216 = insertvalue { ptr, ptr, ptr, i32 } %2215, i32 %offset.i.i112.i571.i, 3
  %2217 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %2218 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %2219 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract2.i533.i)
  %2220 = sext i32 %offset.i.i112.i571.i to i64
  %2221 = getelementptr ptr, ptr %.fca.0.extract2.i533.i, i64 %2220
  %2222 = getelementptr i8, ptr %2221, i64 56
  %2223 = load ptr, ptr %2222, align 8
  %2224 = call ptr %2223({ ptr, ptr, ptr, i32 } %2216, ptr nonnull %0)
  %2225 = call { ptr, i160 } %2224({ ptr, ptr, ptr, i32 } %2216, { ptr, ptr, ptr, i32 } %2216, ptr nonnull %0)
  %.fca.0.extract45.i572.i = extractvalue { ptr, i160 } %2225, 0
  %2226 = getelementptr i8, ptr %.fca.0.extract45.i572.i, i64 8
  %2227 = getelementptr i8, ptr %.fca.0.extract45.i572.i, i64 16
  %2228 = getelementptr i8, ptr %.fca.0.extract45.i572.i, i64 24
  %2229 = getelementptr i8, ptr %.fca.0.extract45.i572.i, i64 32
  %2230 = load i64, ptr %2226, align 4
  %2231 = load i64, ptr %2227, align 4
  %2232 = load ptr, ptr %2228, align 8
  %2233 = load ptr, ptr %2229, align 8
  %result.i114.i573.i = call i1 %2232(i64 %2231, i64 %2230, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %2233) #3
  br i1 %result.i114.i573.i, label %._crit_edge1.sink.split.i574.i, label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit577.i

._crit_edge1.sink.split.i574.i:                   ; preds = %._crit_edge.i555.i, %._crit_edge.thread.i576.i
  %.sink202.i575.i = phi i64 [ 40, %._crit_edge.thread.i576.i ], [ 32, %._crit_edge.i555.i ]
  %2234 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %2235 = getelementptr i8, ptr getelementptr inbounds (i8, ptr @HashMap, i64 72), i64 %.sink202.i575.i
  %2236 = load ptr, ptr %2235, align 8
  %2237 = load ptr, ptr %2236, align 8
  %2238 = call i32 %2237(ptr nonnull %result.i.i215)
  %2239 = add i32 %2238, 1
  %2240 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %2241 = getelementptr i8, ptr %2236, i64 8
  %2242 = load ptr, ptr %2241, align 8
  call void %2242(ptr nonnull %result.i.i215, i32 %2239)
  br label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit577.i

HashMap_insert_internal_keyK_valueV_hashPtri32.exit577.i: ; preds = %._crit_edge1.sink.split.i574.i, %._crit_edge.i555.i
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %51)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %52)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %53)
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %54)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %55)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %56)
  br label %._crit_edge3.i.i403

._crit_edge3.i.i403:                              ; preds = %HashMap_insert_internal_keyK_valueV_hashPtri32.exit577.i, %2008, %1984, %1976
  %2243 = add nuw nsw i32 %.reg2mem31.0.i487.i, 1
  %2244 = load ptr, ptr %gep.i486.i, align 8
  %2245 = call ptr %2244({ ptr, ptr, ptr, i32 } %1949, ptr nonnull %0)
  %2246 = call i32 %2245({ ptr, ptr, ptr, i32 } %1949, { ptr, ptr, ptr, i32 } %1949, ptr nonnull %0)
  %2247 = icmp slt i32 %2243, %2246
  br i1 %2247, label %1976, label %HashMap_resize_new_capacityPtri32.exit.i398

HashMap_resize_new_capacityPtri32.exit.i398:      ; preds = %._crit_edge3.i.i403, %1938
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %64)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %65)
  br label %HashMap_insert_keyK_valueV.exit.i248

HashMap_insert_keyK_valueV.exit.i248:             ; preds = %HashMap_resize_new_capacityPtri32.exit.i398, %._crit_edge.i221
  %2248 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %2249 = load ptr, ptr %1859, align 8
  %2250 = call i32 %2249({ ptr, i160 } %1896)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %59)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %60)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %61)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %62)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %63)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %49)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %50)
  %2251 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %2252 = load ptr, ptr %1871, align 8
  %2253 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2252, 0
  %2254 = load ptr, ptr %1872, align 8
  %2255 = insertvalue { ptr, ptr, ptr, i32 } %2253, ptr %2254, 1
  %2256 = load ptr, ptr %1873, align 8
  %2257 = insertvalue { ptr, ptr, ptr, i32 } %2255, ptr %2256, 2
  %2258 = load i32, ptr %1874, align 4
  %2259 = insertvalue { ptr, ptr, ptr, i32 } %2257, i32 %2258, 3
  %hash_coef_ptr.i.i51.i594.i = getelementptr i8, ptr %2252, i64 8
  %tbl_size_ptr.i.i52.i595.i = getelementptr i8, ptr %2252, i64 16
  %offset_tbl_ptr.i.i53.i596.i = getelementptr i8, ptr %2252, i64 40
  %hash_coef.i.i54.i597.i = load i64, ptr %hash_coef_ptr.i.i51.i594.i, align 4
  %tbl_size.i.i55.i598.i = load i64, ptr %tbl_size_ptr.i.i52.i595.i, align 4
  %offset_tbl.i.i56.i599.i = load ptr, ptr %offset_tbl_ptr.i.i53.i596.i, align 8
  %product.i.i.i57.i600.i = mul i64 %hash_coef.i.i54.i597.i, -5261542750394134544
  %shifted.i.i.i58.i601.i = lshr i64 %product.i.i.i57.i600.i, 32
  %xored.i.i.i59.i602.i = xor i64 %shifted.i.i.i58.i601.i, %product.i.i.i57.i600.i
  %hash.i.i.i60.i603.i = and i64 %xored.i.i.i59.i602.i, %tbl_size.i.i55.i598.i
  %offset_ptr.i.i61.i604.i = getelementptr i32, ptr %offset_tbl.i.i56.i599.i, i64 %hash.i.i.i60.i603.i
  %offset.i.i62.i605.i = load i32, ptr %offset_ptr.i.i61.i604.i, align 4
  %eq.i.i606.i = icmp eq i32 %2258, %offset.i.i62.i605.i
  call void @llvm.assume(i1 %eq.i.i606.i) #30
  %2260 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %2261 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2252)
  %2262 = sext i32 %2258 to i64
  %2263 = getelementptr ptr, ptr %2252, i64 %2262
  %2264 = getelementptr i8, ptr %2263, i64 64
  %2265 = load ptr, ptr %2264, align 8
  %2266 = call ptr %2265({ ptr, ptr, ptr, i32 } %2259, ptr nonnull %0)
  %2267 = call i32 %2266({ ptr, ptr, ptr, i32 } %2259, { ptr, ptr, ptr, i32 } %2259, ptr nonnull %0)
  %2268 = add i32 %2267, -1
  %2269 = and i32 %2268, %2250
  %2270 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  br label %2271

2271:                                             ; preds = %2320, %HashMap_insert_keyK_valueV.exit.i248
  %spec.store.select.i641662.i = phi i32 [ %spec.store.select.i641.i, %2320 ], [ -1, %HashMap_insert_keyK_valueV.exit.i248 ]
  %.0..0..0..i607.i = phi i32 [ %2338, %2320 ], [ %2269, %HashMap_insert_keyK_valueV.exit.i248 ]
  %2272 = load ptr, ptr %1871, align 8
  %2273 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2272, 0
  %2274 = load ptr, ptr %1872, align 8
  %2275 = insertvalue { ptr, ptr, ptr, i32 } %2273, ptr %2274, 1
  %2276 = load ptr, ptr %1873, align 8
  %2277 = insertvalue { ptr, ptr, ptr, i32 } %2275, ptr %2276, 2
  %2278 = load i32, ptr %1874, align 4
  %2279 = insertvalue { ptr, ptr, ptr, i32 } %2277, i32 %2278, 3
  %hash_coef_ptr.i.i65.i608.i = getelementptr i8, ptr %2272, i64 8
  %tbl_size_ptr.i.i66.i609.i = getelementptr i8, ptr %2272, i64 16
  %offset_tbl_ptr.i.i67.i610.i = getelementptr i8, ptr %2272, i64 40
  %hash_coef.i.i68.i611.i = load i64, ptr %hash_coef_ptr.i.i65.i608.i, align 4
  %tbl_size.i.i69.i612.i = load i64, ptr %tbl_size_ptr.i.i66.i609.i, align 4
  %offset_tbl.i.i70.i613.i = load ptr, ptr %offset_tbl_ptr.i.i67.i610.i, align 8
  %product.i.i.i71.i614.i = mul i64 %hash_coef.i.i68.i611.i, -5261542750394134544
  %shifted.i.i.i72.i615.i = lshr i64 %product.i.i.i71.i614.i, 32
  %xored.i.i.i73.i616.i = xor i64 %shifted.i.i.i72.i615.i, %product.i.i.i71.i614.i
  %hash.i.i.i74.i617.i = and i64 %xored.i.i.i73.i616.i, %tbl_size.i.i69.i612.i
  %offset_ptr.i.i75.i618.i = getelementptr i32, ptr %offset_tbl.i.i70.i613.i, i64 %hash.i.i.i74.i617.i
  %offset.i.i76.i619.i = load i32, ptr %offset_ptr.i.i75.i618.i, align 4
  %eq.i79.i620.i = icmp eq i32 %2278, %offset.i.i76.i619.i
  call void @llvm.assume(i1 %eq.i79.i620.i) #30
  %2280 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  store ptr @_parameterization_Ptri32, ptr %49, align 8
  %2281 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %49)
  %2282 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2272)
  %2283 = sext i32 %2278 to i64
  %2284 = getelementptr ptr, ptr %2272, i64 %2283
  %2285 = getelementptr i8, ptr %2284, i64 120
  %2286 = load ptr, ptr %2285, align 8
  store ptr @i32_typ, ptr %50, align 8
  %2287 = call ptr %2286({ ptr, ptr, ptr, i32 } %2279, ptr nonnull %50)
  %2288 = call { ptr, i160 } %2287({ ptr, ptr, ptr, i32 } %2279, { ptr, ptr, ptr, i32 } %2279, ptr nonnull %49, i32 %.0..0..0..i607.i)
  %.fca.0.extract36.i621.i = extractvalue { ptr, i160 } %2288, 0
  %2289 = icmp eq ptr %.fca.0.extract36.i621.i, @nil_typ
  %2290 = icmp eq ptr %.fca.0.extract36.i621.i, null
  %2291 = or i1 %2289, %2290
  br i1 %2291, label %2339, label %2292

2292:                                             ; preds = %2271
  %.fca.1.extract38.i622.i = extractvalue { ptr, i160 } %2288, 1
  %.sroa.5.8.extract.shift.i623.i = lshr i160 %.fca.1.extract38.i622.i, 64
  %.sroa.5.8.extract.trunc.i624.i = trunc i160 %.sroa.5.8.extract.shift.i623.i to i64
  %.sroa.2.8.extract.trunc165.i625.i = trunc i160 %.fca.1.extract38.i622.i to i64
  %2293 = inttoptr i64 %.sroa.2.8.extract.trunc165.i625.i to ptr
  %2294 = inttoptr i64 %.sroa.5.8.extract.trunc.i624.i to ptr
  %hash_coef_ptr.i.i81.i626.i = getelementptr i8, ptr %.fca.0.extract36.i621.i, i64 8
  %tbl_size_ptr.i.i82.i627.i = getelementptr i8, ptr %.fca.0.extract36.i621.i, i64 16
  %offset_tbl_ptr.i.i83.i628.i = getelementptr i8, ptr %.fca.0.extract36.i621.i, i64 40
  %hash_coef.i.i84.i629.i = load i64, ptr %hash_coef_ptr.i.i81.i626.i, align 4
  %tbl_size.i.i85.i630.i = load i64, ptr %tbl_size_ptr.i.i82.i627.i, align 4
  %offset_tbl.i.i86.i631.i = load ptr, ptr %offset_tbl_ptr.i.i83.i628.i, align 8
  %product.i.i.i87.i632.i = mul i64 %hash_coef.i.i84.i629.i, 4015701072841558310
  %shifted.i.i.i88.i633.i = lshr i64 %product.i.i.i87.i632.i, 32
  %xored.i.i.i89.i634.i = xor i64 %shifted.i.i.i88.i633.i, %product.i.i.i87.i632.i
  %hash.i.i.i90.i635.i = and i64 %xored.i.i.i89.i634.i, %tbl_size.i.i85.i630.i
  %offset_ptr.i.i91.i636.i = getelementptr i32, ptr %offset_tbl.i.i86.i631.i, i64 %hash.i.i.i90.i635.i
  %offset.i.i92.i637.i = load i32, ptr %offset_ptr.i.i91.i636.i, align 4
  %2295 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract36.i621.i, 0
  %2296 = insertvalue { ptr, ptr, ptr, i32 } %2295, ptr %2293, 1
  %2297 = insertvalue { ptr, ptr, ptr, i32 } %2296, ptr %2294, 2
  %2298 = insertvalue { ptr, ptr, ptr, i32 } %2297, i32 %offset.i.i92.i637.i, 3
  %2299 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %2300 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %2301 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i621.i)
  %2302 = sext i32 %offset.i.i92.i637.i to i64
  %2303 = getelementptr ptr, ptr %.fca.0.extract36.i621.i, i64 %2302
  %2304 = getelementptr i8, ptr %2303, i64 64
  %2305 = load ptr, ptr %2304, align 8
  %2306 = call ptr %2305({ ptr, ptr, ptr, i32 } %2298, ptr nonnull %0)
  %2307 = call i32 %2306({ ptr, ptr, ptr, i32 } %2298, { ptr, ptr, ptr, i32 } %2298, ptr nonnull %0)
  %2308 = icmp eq i32 %2307, %2250
  %2309 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %2310 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %2311 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i621.i)
  %2312 = getelementptr i8, ptr %2303, i64 48
  %2313 = load ptr, ptr %2312, align 8
  %2314 = call ptr %2313({ ptr, ptr, ptr, i32 } %2298, ptr nonnull %0)
  %2315 = call { ptr, i160 } %2314({ ptr, ptr, ptr, i32 } %2298, { ptr, ptr, ptr, i32 } %2298, ptr nonnull %0)
  %2316 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %2317 = load ptr, ptr %1860, align 8
  %2318 = call i1 %2317({ ptr, i160 } %2315, { ptr, i160 } %1896)
  %2319 = and i1 %2308, %2318
  br i1 %2319, label %HashMap_find_slot_keyK_hashPtri32.exit642.i, label %2320

2320:                                             ; preds = %2292
  %2321 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %2322 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %2323 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i621.i)
  %2324 = getelementptr i8, ptr %2303, i64 56
  %2325 = load ptr, ptr %2324, align 8
  %2326 = call ptr %2325({ ptr, ptr, ptr, i32 } %2298, ptr nonnull %0)
  %2327 = call { ptr, i160 } %2326({ ptr, ptr, ptr, i32 } %2298, { ptr, ptr, ptr, i32 } %2298, ptr nonnull %0)
  %.fca.0.extract15.i.i249 = extractvalue { ptr, i160 } %2327, 0
  %2328 = getelementptr i8, ptr %.fca.0.extract15.i.i249, i64 8
  %2329 = getelementptr i8, ptr %.fca.0.extract15.i.i249, i64 16
  %2330 = getelementptr i8, ptr %.fca.0.extract15.i.i249, i64 24
  %2331 = getelementptr i8, ptr %.fca.0.extract15.i.i249, i64 32
  %2332 = load i64, ptr %2328, align 4
  %2333 = load i64, ptr %2329, align 4
  %2334 = load ptr, ptr %2330, align 8
  %2335 = load ptr, ptr %2331, align 8
  %result.i.i639.i = call i1 %2334(i64 %2333, i64 %2332, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %2335) #3
  %2336 = icmp eq i32 %spec.store.select.i641662.i, -1
  %or.cond.i640.i = select i1 %result.i.i639.i, i1 %2336, i1 false
  %spec.store.select.i641.i = select i1 %or.cond.i640.i, i32 %.0..0..0..i607.i, i32 %spec.store.select.i641662.i
  %2337 = add i32 %.0..0..0..i607.i, 1
  %2338 = and i32 %2337, %2268
  br label %2271

2339:                                             ; preds = %2271
  %2340 = icmp eq i32 %spec.store.select.i641662.i, -1
  %.pre674.i = select i1 %2340, i32 %.0..0..0..i607.i, i32 %spec.store.select.i641662.i
  br label %HashMap_find_slot_keyK_hashPtri32.exit642.i

HashMap_find_slot_keyK_hashPtri32.exit642.i:      ; preds = %2292, %2339
  %2341 = phi i32 [ %.pre674.i, %2339 ], [ %.0..0..0..i607.i, %2292 ]
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %49)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %50)
  %2342 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %2343 = load ptr, ptr %1871, align 8
  %2344 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2343, 0
  %2345 = load ptr, ptr %1872, align 8
  %2346 = insertvalue { ptr, ptr, ptr, i32 } %2344, ptr %2345, 1
  %2347 = load ptr, ptr %1873, align 8
  %2348 = insertvalue { ptr, ptr, ptr, i32 } %2346, ptr %2347, 2
  %2349 = load i32, ptr %1874, align 4
  %2350 = insertvalue { ptr, ptr, ptr, i32 } %2348, i32 %2349, 3
  %hash_coef_ptr.i.i56.i406.i = getelementptr i8, ptr %2343, i64 8
  %tbl_size_ptr.i.i57.i407.i = getelementptr i8, ptr %2343, i64 16
  %offset_tbl_ptr.i.i58.i408.i = getelementptr i8, ptr %2343, i64 40
  %hash_coef.i.i59.i409.i = load i64, ptr %hash_coef_ptr.i.i56.i406.i, align 4
  %tbl_size.i.i60.i410.i = load i64, ptr %tbl_size_ptr.i.i57.i407.i, align 4
  %offset_tbl.i.i61.i411.i = load ptr, ptr %offset_tbl_ptr.i.i58.i408.i, align 8
  %product.i.i.i62.i412.i = mul i64 %hash_coef.i.i59.i409.i, -5261542750394134544
  %shifted.i.i.i63.i413.i = lshr i64 %product.i.i.i62.i412.i, 32
  %xored.i.i.i64.i414.i = xor i64 %shifted.i.i.i63.i413.i, %product.i.i.i62.i412.i
  %hash.i.i.i65.i415.i = and i64 %xored.i.i.i64.i414.i, %tbl_size.i.i60.i410.i
  %offset_ptr.i.i66.i416.i = getelementptr i32, ptr %offset_tbl.i.i61.i411.i, i64 %hash.i.i.i65.i415.i
  %offset.i.i67.i417.i = load i32, ptr %offset_ptr.i.i66.i416.i, align 4
  %eq.i.i418.i = icmp eq i32 %2349, %offset.i.i67.i417.i
  call void @llvm.assume(i1 %eq.i.i418.i) #30
  store ptr @_parameterization_Ptri32, ptr %59, align 8
  %2351 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %59)
  %2352 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2343)
  %2353 = sext i32 %2349 to i64
  %2354 = getelementptr ptr, ptr %2343, i64 %2353
  %2355 = getelementptr i8, ptr %2354, i64 120
  %2356 = load ptr, ptr %2355, align 8
  store ptr @i32_typ, ptr %60, align 8
  %2357 = call ptr %2356({ ptr, ptr, ptr, i32 } %2350, ptr nonnull %60)
  %2358 = call { ptr, i160 } %2357({ ptr, ptr, ptr, i32 } %2350, { ptr, ptr, ptr, i32 } %2350, ptr nonnull %59, i32 %2341)
  %.fca.0.extract2.i.i250 = extractvalue { ptr, i160 } %2358, 0
  %2359 = load ptr, ptr %result.i.i215, align 8
  %2360 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %2361 = load ptr, ptr %1854, align 8
  %2362 = load ptr, ptr %2359, align 8
  %2363 = getelementptr i8, ptr %2362, i64 48
  %2364 = load ptr, ptr %2363, align 8
  %2365 = call { i64, i64 } %2364(ptr nonnull %2359)
  %2366 = extractvalue { i64, i64 } %2365, 0
  %2367 = extractvalue { i64, i64 } %2365, 1
  %2368 = call i64 @llvm.umax.i64(i64 %2367, i64 8)
  %2369 = urem i64 16, %2367
  %2370 = icmp eq i64 %2369, 0
  %2371 = sub i64 %2367, %2369
  %2372 = select i1 %2370, i64 0, i64 %2371
  %2373 = add i64 %2372, %2366
  %2374 = add i64 %2373, 16
  %2375 = and i64 %2373, 7
  %2376 = icmp eq i64 %2375, 0
  %2377 = sub nuw nsw i64 40, %2375
  %2378 = select i1 %2376, i64 32, i64 %2377
  %2379 = add i64 %2374, %2378
  %2380 = and i64 %2379, 3
  %2381 = icmp eq i64 %2380, 0
  %2382 = sub nuw nsw i64 8, %2380
  %2383 = select i1 %2381, i64 4, i64 %2382
  %2384 = add i64 %2383, %2379
  %2385 = urem i64 %2384, %2368
  %2386 = icmp eq i64 %2385, 0
  %2387 = sub i64 %2368, %2385
  %2388 = select i1 %2386, i64 0, i64 %2387
  %2389 = add i64 %2384, %2388
  %result.i.i419.i = call noalias ptr @bump_malloc_inner(i64 noundef %2389, ptr nonnull @current_ptr) #29
  store ptr %2359, ptr %result.i.i419.i, align 8
  %2390 = getelementptr i8, ptr %result.i.i419.i, i64 8
  store ptr %2361, ptr %2390, align 8
  %2391 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i.i419.i)
  store ptr @Entry, ptr %61, align 8
  store ptr %result.i.i419.i, ptr %1878, align 8
  store i32 9, ptr %1879, align 8
  %2392 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %61)
  %2393 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %2394 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %2395 = load ptr, ptr %2359, align 8
  %2396 = getelementptr i8, ptr %2395, i64 48
  %2397 = load ptr, ptr %2396, align 8
  %2398 = call { i64, i64 } %2397(ptr nonnull %2359)
  %2399 = extractvalue { i64, i64 } %2398, 1
  %2400 = urem i64 16, %2399
  %2401 = icmp eq i64 %2400, 0
  %reass.sub1543 = sub i64 %2399, %2400
  %2402 = add i64 %reass.sub1543, 16
  %2403 = select i1 %2401, i64 16, i64 %2402
  %2404 = getelementptr i8, ptr %result.i.i419.i, i64 %2403
  %2405 = load ptr, ptr %result.i.i419.i, align 8
  %2406 = load ptr, ptr %2405, align 8
  %2407 = getelementptr i8, ptr %2406, i64 64
  %2408 = load ptr, ptr %2407, align 8
  call void %2408({ ptr, i160 } %1896, ptr nonnull %2405, ptr %2404)
  %2409 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %2410 = load ptr, ptr %result.i.i419.i, align 8
  %2411 = load ptr, ptr %2410, align 8
  %2412 = getelementptr i8, ptr %2411, i64 48
  %2413 = load ptr, ptr %2412, align 8
  %2414 = call { i64, i64 } %2413(ptr nonnull %2410)
  %2415 = extractvalue { i64, i64 } %2414, 0
  %2416 = extractvalue { i64, i64 } %2414, 1
  %2417 = urem i64 16, %2416
  %2418 = icmp eq i64 %2417, 0
  %2419 = sub i64 %2416, %2417
  %2420 = select i1 %2418, i64 0, i64 %2419
  %2421 = add i64 %2420, %2415
  %2422 = and i64 %2421, 7
  %2423 = icmp eq i64 %2422, 0
  %2424 = sub nuw nsw i64 8, %2422
  %2425 = select i1 %2423, i64 0, i64 %2424
  %2426 = getelementptr i8, ptr %result.i.i419.i, i64 %2421
  %2427 = getelementptr i8, ptr %2426, i64 16
  %2428 = getelementptr i8, ptr %2427, i64 %2425
  store ptr @i32_typ, ptr %2428, align 8
  %2429 = getelementptr i8, ptr %2428, i64 8
  store i160 %.sroa.035.0.insert.ext.i, ptr %2429, align 4
  %2430 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %2431 = load ptr, ptr %result.i.i419.i, align 8
  %2432 = load ptr, ptr %2431, align 8
  %2433 = getelementptr i8, ptr %2432, i64 48
  %2434 = load ptr, ptr %2433, align 8
  %2435 = call { i64, i64 } %2434(ptr nonnull %2431)
  %2436 = extractvalue { i64, i64 } %2435, 0
  %2437 = extractvalue { i64, i64 } %2435, 1
  %2438 = urem i64 16, %2437
  %2439 = icmp eq i64 %2438, 0
  %2440 = sub i64 %2437, %2438
  %2441 = select i1 %2439, i64 0, i64 %2440
  %2442 = add i64 %2441, %2436
  %2443 = add i64 %2442, 16
  %2444 = and i64 %2442, 7
  %2445 = icmp eq i64 %2444, 0
  %2446 = sub nuw nsw i64 40, %2444
  %2447 = select i1 %2445, i64 32, i64 %2446
  %2448 = add i64 %2443, %2447
  %2449 = and i64 %2448, 3
  %2450 = icmp eq i64 %2449, 0
  %2451 = sub nuw nsw i64 4, %2449
  %2452 = select i1 %2450, i64 0, i64 %2451
  %2453 = getelementptr i8, ptr %result.i.i419.i, i64 %2448
  %2454 = getelementptr i8, ptr %2453, i64 %2452
  store i32 %2250, ptr %2454, align 4
  %2455 = load ptr, ptr %1880, align 8
  %2456 = ptrtoint ptr %result.i.i419.i to i64
  %2457 = ptrtoint ptr %2455 to i64
  %.sroa.2.0.insert.ext.i.i252 = zext i64 %2457 to i160
  %.sroa.2.0.insert.shift.i.i253 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i.i252, 64
  %.sroa.0.0.insert.ext.i.i254 = zext i64 %2456 to i160
  %.sroa.2.0.insert.insert.i.i255 = or disjoint i160 %.sroa.2.0.insert.shift.i.i253, %.sroa.0.0.insert.ext.i.i254
  %.sroa.0.0.insert.insert.i.i256 = or disjoint i160 %.sroa.2.0.insert.insert.i.i255, 3062541302288446171170371466885913903104
  %2458 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0.0.insert.insert.i.i256, 1
  %2459 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %2460 = load ptr, ptr %1871, align 8
  %2461 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2460, 0
  %2462 = load ptr, ptr %1872, align 8
  %2463 = insertvalue { ptr, ptr, ptr, i32 } %2461, ptr %2462, 1
  %2464 = load ptr, ptr %1873, align 8
  %2465 = insertvalue { ptr, ptr, ptr, i32 } %2463, ptr %2464, 2
  %2466 = load i32, ptr %1874, align 4
  %2467 = insertvalue { ptr, ptr, ptr, i32 } %2465, i32 %2466, 3
  %hash_coef_ptr.i.i84.i.i257 = getelementptr i8, ptr %2460, i64 8
  %tbl_size_ptr.i.i85.i.i258 = getelementptr i8, ptr %2460, i64 16
  %offset_tbl_ptr.i.i86.i.i259 = getelementptr i8, ptr %2460, i64 40
  %hash_coef.i.i87.i.i260 = load i64, ptr %hash_coef_ptr.i.i84.i.i257, align 4
  %tbl_size.i.i88.i.i261 = load i64, ptr %tbl_size_ptr.i.i85.i.i258, align 4
  %offset_tbl.i.i89.i.i262 = load ptr, ptr %offset_tbl_ptr.i.i86.i.i259, align 8
  %product.i.i.i90.i.i263 = mul i64 %hash_coef.i.i87.i.i260, -5261542750394134544
  %shifted.i.i.i91.i.i264 = lshr i64 %product.i.i.i90.i.i263, 32
  %xored.i.i.i92.i.i265 = xor i64 %shifted.i.i.i91.i.i264, %product.i.i.i90.i.i263
  %hash.i.i.i93.i.i266 = and i64 %xored.i.i.i92.i.i265, %tbl_size.i.i88.i.i261
  %offset_ptr.i.i94.i.i267 = getelementptr i32, ptr %offset_tbl.i.i89.i.i262, i64 %hash.i.i.i93.i.i266
  %offset.i.i95.i.i268 = load i32, ptr %offset_ptr.i.i94.i.i267, align 4
  %eq.i98.i.i269 = icmp eq i32 %2466, %offset.i.i95.i.i268
  call void @llvm.assume(i1 %eq.i98.i.i269) #30
  %2468 = load ptr, ptr %result.i.i215, align 8
  %2469 = load ptr, ptr %1854, align 8
  %result.i99.i.i270 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2470 = getelementptr i8, ptr %result.i99.i.i270, i64 16
  store ptr %2469, ptr %2470, align 8
  %2471 = getelementptr i8, ptr %result.i99.i.i270, i64 8
  store ptr %2468, ptr %2471, align 8
  %2472 = getelementptr i8, ptr %result.i99.i.i270, i64 24
  store ptr null, ptr %2472, align 8
  %2473 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i99.i.i270)
  store ptr @Entry, ptr %result.i99.i.i270, align 8
  store ptr @_parameterization_Ptri32, ptr %62, align 8
  store ptr %result.i99.i.i270, ptr %1881, align 8
  %2474 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %62)
  %2475 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2460)
  %2476 = sext i32 %2466 to i64
  %2477 = getelementptr ptr, ptr %2460, i64 %2476
  %2478 = getelementptr i8, ptr %2477, i64 128
  %2479 = load ptr, ptr %2478, align 8
  store ptr @i32_typ, ptr %63, align 8
  store ptr @Entry, ptr %1882, align 8
  %2480 = call ptr %2479({ ptr, ptr, ptr, i32 } %2467, ptr nonnull %63)
  call void %2480({ ptr, ptr, ptr, i32 } %2467, { ptr, ptr, ptr, i32 } %2467, ptr nonnull %62, i32 %2341, { ptr, i160 } %2458)
  %2481 = icmp eq ptr %.fca.0.extract2.i.i250, @nil_typ
  %2482 = icmp eq ptr %.fca.0.extract2.i.i250, null
  %2483 = or i1 %2481, %2482
  br i1 %2483, label %._crit_edge.thread.i.i382, label %._crit_edge.i.i271

._crit_edge.thread.i.i382:                        ; preds = %HashMap_find_slot_keyK_hashPtri32.exit642.i
  %2484 = load i32, ptr %1883, align 4
  %2485 = add i32 %2484, 1
  store i32 %2485, ptr %1883, align 4
  br label %._crit_edge1.sink.split.i.i380

._crit_edge.i.i271:                               ; preds = %HashMap_find_slot_keyK_hashPtri32.exit642.i
  %.fca.1.extract4.i.i272 = extractvalue { ptr, i160 } %2358, 1
  %.sroa.3192.8.extract.trunc.i.i273 = trunc i160 %.fca.1.extract4.i.i272 to i64
  %2486 = inttoptr i64 %.sroa.3192.8.extract.trunc.i.i273 to ptr
  %.sroa.5193.8.extract.shift.i.i274 = lshr i160 %.fca.1.extract4.i.i272, 64
  %.sroa.5193.8.extract.trunc.i.i275 = trunc i160 %.sroa.5193.8.extract.shift.i.i274 to i64
  %2487 = inttoptr i64 %.sroa.5193.8.extract.trunc.i.i275 to ptr
  %hash_coef_ptr.i.i101.i.i276 = getelementptr i8, ptr %.fca.0.extract2.i.i250, i64 8
  %tbl_size_ptr.i.i102.i.i277 = getelementptr i8, ptr %.fca.0.extract2.i.i250, i64 16
  %offset_tbl_ptr.i.i103.i.i278 = getelementptr i8, ptr %.fca.0.extract2.i.i250, i64 40
  %hash_coef.i.i104.i.i279 = load i64, ptr %hash_coef_ptr.i.i101.i.i276, align 4
  %tbl_size.i.i105.i.i280 = load i64, ptr %tbl_size_ptr.i.i102.i.i277, align 4
  %offset_tbl.i.i106.i.i281 = load ptr, ptr %offset_tbl_ptr.i.i103.i.i278, align 8
  %product.i.i.i107.i.i282 = mul i64 %hash_coef.i.i104.i.i279, 4015701072841558310
  %shifted.i.i.i108.i.i283 = lshr i64 %product.i.i.i107.i.i282, 32
  %xored.i.i.i109.i.i284 = xor i64 %shifted.i.i.i108.i.i283, %product.i.i.i107.i.i282
  %hash.i.i.i110.i.i285 = and i64 %xored.i.i.i109.i.i284, %tbl_size.i.i105.i.i280
  %offset_ptr.i.i111.i.i286 = getelementptr i32, ptr %offset_tbl.i.i106.i.i281, i64 %hash.i.i.i110.i.i285
  %offset.i.i112.i.i287 = load i32, ptr %offset_ptr.i.i111.i.i286, align 4
  %2488 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract2.i.i250, 0
  %2489 = insertvalue { ptr, ptr, ptr, i32 } %2488, ptr %2486, 1
  %2490 = insertvalue { ptr, ptr, ptr, i32 } %2489, ptr %2487, 2
  %2491 = insertvalue { ptr, ptr, ptr, i32 } %2490, i32 %offset.i.i112.i.i287, 3
  %2492 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %2493 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %2494 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract2.i.i250)
  %2495 = sext i32 %offset.i.i112.i.i287 to i64
  %2496 = getelementptr ptr, ptr %.fca.0.extract2.i.i250, i64 %2495
  %2497 = getelementptr i8, ptr %2496, i64 56
  %2498 = load ptr, ptr %2497, align 8
  %2499 = call ptr %2498({ ptr, ptr, ptr, i32 } %2491, ptr nonnull %0)
  %2500 = call { ptr, i160 } %2499({ ptr, ptr, ptr, i32 } %2491, { ptr, ptr, ptr, i32 } %2491, ptr nonnull %0)
  %.fca.0.extract45.i.i288 = extractvalue { ptr, i160 } %2500, 0
  %2501 = getelementptr i8, ptr %.fca.0.extract45.i.i288, i64 8
  %2502 = getelementptr i8, ptr %.fca.0.extract45.i.i288, i64 16
  %2503 = getelementptr i8, ptr %.fca.0.extract45.i.i288, i64 24
  %2504 = getelementptr i8, ptr %.fca.0.extract45.i.i288, i64 32
  %2505 = load i64, ptr %2501, align 4
  %2506 = load i64, ptr %2502, align 4
  %2507 = load ptr, ptr %2503, align 8
  %2508 = load ptr, ptr %2504, align 8
  %result.i114.i.i289 = call i1 %2507(i64 %2506, i64 %2505, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %2508) #3
  br i1 %result.i114.i.i289, label %._crit_edge1.sink.split.i.i380, label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit.i290

._crit_edge1.sink.split.i.i380:                   ; preds = %._crit_edge.i.i271, %._crit_edge.thread.i.i382
  %.sink202.i.i381 = phi i64 [ 40, %._crit_edge.thread.i.i382 ], [ 32, %._crit_edge.i.i271 ]
  %2509 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %2510 = getelementptr i8, ptr getelementptr inbounds (i8, ptr @HashMap, i64 72), i64 %.sink202.i.i381
  %2511 = load ptr, ptr %2510, align 8
  %2512 = load ptr, ptr %2511, align 8
  %2513 = call i32 %2512(ptr nonnull %result.i.i215)
  %2514 = add i32 %2513, 1
  %2515 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %2516 = getelementptr i8, ptr %2511, i64 8
  %2517 = load ptr, ptr %2516, align 8
  call void %2517(ptr nonnull %result.i.i215, i32 %2514)
  br label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit.i290

HashMap_insert_internal_keyK_valueV_hashPtri32.exit.i290: ; preds = %._crit_edge1.sink.split.i.i380, %._crit_edge.i.i271
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %59)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %60)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %61)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %62)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %63)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  %2518 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %2519 = zext nneg i32 %.reg2mem89.0221.i to i64
  %2520 = shl nuw nsw i64 %2519, 5
  %2521 = getelementptr i8, ptr %result.i.i166.i, i64 %2520
  store ptr @i32_typ, ptr %2521, align 8
  %2522 = getelementptr i8, ptr %2521, i64 8
  store i160 %.sroa.038.0.insert.ext.i, ptr %2522, align 4
  %2523 = add nuw nsw i32 %.reg2mem89.0221.i, 1
  %2524 = icmp ult i32 %.reg2mem89.0221.i, 999999
  br i1 %2524, label %._crit_edge.i221, label %.lr.ph.preheader.i

.lr.ph.preheader.i:                               ; preds = %HashMap_insert_internal_keyK_valueV_hashPtri32.exit.i290
  %2525 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %invariant.gep.i = getelementptr i8, ptr %result.i.i166.i, i64 8
  br label %.lr.ph.i291

.lr.ph.i291:                                      ; preds = %.lr.ph.i291, %.lr.ph.preheader.i
  %.reg2mem85.0142.i = phi i64 [ %2531, %.lr.ph.i291 ], [ 0, %.lr.ph.preheader.i ]
  %.reg2mem83.0141.i = phi i32 [ %2532, %.lr.ph.i291 ], [ 0, %.lr.ph.preheader.i ]
  %2526 = zext nneg i32 %.reg2mem83.0141.i to i64
  %2527 = shl nuw nsw i64 %2526, 5
  %gep.i292 = getelementptr i8, ptr %invariant.gep.i, i64 %2527
  %2528 = load i160, ptr %gep.i292, align 4
  %.sroa.127.8.extract.trunc.i = trunc i160 %2528 to i32
  %2529 = add i32 %.sroa.127.8.extract.trunc.i, 1
  %2530 = sext i32 %2529 to i64
  %2531 = add i64 %.reg2mem85.0142.i, %2530
  %2532 = add nuw nsw i32 %.reg2mem83.0141.i, 1
  %2533 = icmp ult i32 %.reg2mem83.0141.i, 999999
  br i1 %2533, label %.lr.ph.i291, label %._crit_edge143.i

._crit_edge143.i:                                 ; preds = %.lr.ph.i291
  %2534 = call i64 @clock()
  %2535 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  br label %.lr.ph147.i

.lr.ph147.i:                                      ; preds = %HashMap_get_keyK.exit.i351, %._crit_edge143.i
  %.reg2mem73.0145.i = phi i64 [ %.reg2mem69.0.i, %HashMap_get_keyK.exit.i351 ], [ 0, %._crit_edge143.i ]
  %.reg2mem71.0144.i = phi i32 [ %2683, %HashMap_get_keyK.exit.i351 ], [ 0, %._crit_edge143.i ]
  %2536 = zext nneg i32 %.reg2mem71.0144.i to i64
  %2537 = shl nuw nsw i64 %2536, 5
  %gep374.i = getelementptr i8, ptr %invariant.gep.i, i64 %2537
  %2538 = load i160, ptr %gep374.i, align 4
  %.sroa.019.0.insert.ext.i = and i160 %2538, 4294967295
  %2539 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.019.0.insert.ext.i, 1
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %66)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %67)
  %2540 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %2541 = load ptr, ptr %1859, align 8
  %2542 = call i32 %2541({ ptr, i160 } %2539)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %57)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %58)
  %2543 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %2544 = load ptr, ptr %1871, align 8
  %2545 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2544, 0
  %2546 = load ptr, ptr %1872, align 8
  %2547 = insertvalue { ptr, ptr, ptr, i32 } %2545, ptr %2546, 1
  %2548 = load ptr, ptr %1873, align 8
  %2549 = insertvalue { ptr, ptr, ptr, i32 } %2547, ptr %2548, 2
  %2550 = load i32, ptr %1874, align 4
  %2551 = insertvalue { ptr, ptr, ptr, i32 } %2549, i32 %2550, 3
  %hash_coef_ptr.i.i51.i.i293 = getelementptr i8, ptr %2544, i64 8
  %tbl_size_ptr.i.i52.i.i294 = getelementptr i8, ptr %2544, i64 16
  %offset_tbl_ptr.i.i53.i.i295 = getelementptr i8, ptr %2544, i64 40
  %hash_coef.i.i54.i.i296 = load i64, ptr %hash_coef_ptr.i.i51.i.i293, align 4
  %tbl_size.i.i55.i.i297 = load i64, ptr %tbl_size_ptr.i.i52.i.i294, align 4
  %offset_tbl.i.i56.i.i298 = load ptr, ptr %offset_tbl_ptr.i.i53.i.i295, align 8
  %product.i.i.i57.i.i299 = mul i64 %hash_coef.i.i54.i.i296, -5261542750394134544
  %shifted.i.i.i58.i.i300 = lshr i64 %product.i.i.i57.i.i299, 32
  %xored.i.i.i59.i.i301 = xor i64 %shifted.i.i.i58.i.i300, %product.i.i.i57.i.i299
  %hash.i.i.i60.i.i302 = and i64 %xored.i.i.i59.i.i301, %tbl_size.i.i55.i.i297
  %offset_ptr.i.i61.i.i303 = getelementptr i32, ptr %offset_tbl.i.i56.i.i298, i64 %hash.i.i.i60.i.i302
  %offset.i.i62.i.i304 = load i32, ptr %offset_ptr.i.i61.i.i303, align 4
  %eq.i.i441.i = icmp eq i32 %2550, %offset.i.i62.i.i304
  call void @llvm.assume(i1 %eq.i.i441.i) #30
  %2552 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %2553 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2544)
  %2554 = sext i32 %2550 to i64
  %2555 = getelementptr ptr, ptr %2544, i64 %2554
  %2556 = getelementptr i8, ptr %2555, i64 64
  %2557 = load ptr, ptr %2556, align 8
  %2558 = call ptr %2557({ ptr, ptr, ptr, i32 } %2551, ptr nonnull %0)
  %2559 = call i32 %2558({ ptr, ptr, ptr, i32 } %2551, { ptr, ptr, ptr, i32 } %2551, ptr nonnull %0)
  %2560 = add i32 %2559, -1
  %2561 = and i32 %2560, %2542
  %2562 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  br label %2563

2563:                                             ; preds = %2612, %.lr.ph147.i
  %spec.store.select.i491.i305 = phi i32 [ %spec.store.select.i.i336, %2612 ], [ -1, %.lr.ph147.i ]
  %.0..0..0..i.i306 = phi i32 [ %2630, %2612 ], [ %2561, %.lr.ph147.i ]
  %2564 = load ptr, ptr %1871, align 8
  %2565 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2564, 0
  %2566 = load ptr, ptr %1872, align 8
  %2567 = insertvalue { ptr, ptr, ptr, i32 } %2565, ptr %2566, 1
  %2568 = load ptr, ptr %1873, align 8
  %2569 = insertvalue { ptr, ptr, ptr, i32 } %2567, ptr %2568, 2
  %2570 = load i32, ptr %1874, align 4
  %2571 = insertvalue { ptr, ptr, ptr, i32 } %2569, i32 %2570, 3
  %hash_coef_ptr.i.i65.i.i307 = getelementptr i8, ptr %2564, i64 8
  %tbl_size_ptr.i.i66.i.i308 = getelementptr i8, ptr %2564, i64 16
  %offset_tbl_ptr.i.i67.i.i309 = getelementptr i8, ptr %2564, i64 40
  %hash_coef.i.i68.i.i310 = load i64, ptr %hash_coef_ptr.i.i65.i.i307, align 4
  %tbl_size.i.i69.i.i311 = load i64, ptr %tbl_size_ptr.i.i66.i.i308, align 4
  %offset_tbl.i.i70.i.i312 = load ptr, ptr %offset_tbl_ptr.i.i67.i.i309, align 8
  %product.i.i.i71.i.i313 = mul i64 %hash_coef.i.i68.i.i310, -5261542750394134544
  %shifted.i.i.i72.i.i314 = lshr i64 %product.i.i.i71.i.i313, 32
  %xored.i.i.i73.i.i315 = xor i64 %shifted.i.i.i72.i.i314, %product.i.i.i71.i.i313
  %hash.i.i.i74.i.i316 = and i64 %xored.i.i.i73.i.i315, %tbl_size.i.i69.i.i311
  %offset_ptr.i.i75.i.i317 = getelementptr i32, ptr %offset_tbl.i.i70.i.i312, i64 %hash.i.i.i74.i.i316
  %offset.i.i76.i.i318 = load i32, ptr %offset_ptr.i.i75.i.i317, align 4
  %eq.i79.i.i319 = icmp eq i32 %2570, %offset.i.i76.i.i318
  call void @llvm.assume(i1 %eq.i79.i.i319) #30
  %2572 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  store ptr @_parameterization_Ptri32, ptr %57, align 8
  %2573 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %57)
  %2574 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2564)
  %2575 = sext i32 %2570 to i64
  %2576 = getelementptr ptr, ptr %2564, i64 %2575
  %2577 = getelementptr i8, ptr %2576, i64 120
  %2578 = load ptr, ptr %2577, align 8
  store ptr @i32_typ, ptr %58, align 8
  %2579 = call ptr %2578({ ptr, ptr, ptr, i32 } %2571, ptr nonnull %58)
  %2580 = call { ptr, i160 } %2579({ ptr, ptr, ptr, i32 } %2571, { ptr, ptr, ptr, i32 } %2571, ptr nonnull %57, i32 %.0..0..0..i.i306)
  %.fca.0.extract36.i.i320 = extractvalue { ptr, i160 } %2580, 0
  %2581 = icmp eq ptr %.fca.0.extract36.i.i320, @nil_typ
  %2582 = icmp eq ptr %.fca.0.extract36.i.i320, null
  %2583 = or i1 %2581, %2582
  br i1 %2583, label %2631, label %2584

2584:                                             ; preds = %2563
  %.fca.1.extract38.i.i321 = extractvalue { ptr, i160 } %2580, 1
  %.sroa.5.8.extract.shift.i442.i = lshr i160 %.fca.1.extract38.i.i321, 64
  %.sroa.5.8.extract.trunc.i443.i = trunc i160 %.sroa.5.8.extract.shift.i442.i to i64
  %.sroa.2.8.extract.trunc165.i.i322 = trunc i160 %.fca.1.extract38.i.i321 to i64
  %2585 = inttoptr i64 %.sroa.2.8.extract.trunc165.i.i322 to ptr
  %2586 = inttoptr i64 %.sroa.5.8.extract.trunc.i443.i to ptr
  %hash_coef_ptr.i.i81.i.i323 = getelementptr i8, ptr %.fca.0.extract36.i.i320, i64 8
  %tbl_size_ptr.i.i82.i.i324 = getelementptr i8, ptr %.fca.0.extract36.i.i320, i64 16
  %offset_tbl_ptr.i.i83.i.i325 = getelementptr i8, ptr %.fca.0.extract36.i.i320, i64 40
  %hash_coef.i.i84.i.i326 = load i64, ptr %hash_coef_ptr.i.i81.i.i323, align 4
  %tbl_size.i.i85.i.i327 = load i64, ptr %tbl_size_ptr.i.i82.i.i324, align 4
  %offset_tbl.i.i86.i.i328 = load ptr, ptr %offset_tbl_ptr.i.i83.i.i325, align 8
  %product.i.i.i87.i.i329 = mul i64 %hash_coef.i.i84.i.i326, 4015701072841558310
  %shifted.i.i.i88.i.i330 = lshr i64 %product.i.i.i87.i.i329, 32
  %xored.i.i.i89.i.i331 = xor i64 %shifted.i.i.i88.i.i330, %product.i.i.i87.i.i329
  %hash.i.i.i90.i.i332 = and i64 %xored.i.i.i89.i.i331, %tbl_size.i.i85.i.i327
  %offset_ptr.i.i91.i.i333 = getelementptr i32, ptr %offset_tbl.i.i86.i.i328, i64 %hash.i.i.i90.i.i332
  %offset.i.i92.i.i334 = load i32, ptr %offset_ptr.i.i91.i.i333, align 4
  %2587 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract36.i.i320, 0
  %2588 = insertvalue { ptr, ptr, ptr, i32 } %2587, ptr %2585, 1
  %2589 = insertvalue { ptr, ptr, ptr, i32 } %2588, ptr %2586, 2
  %2590 = insertvalue { ptr, ptr, ptr, i32 } %2589, i32 %offset.i.i92.i.i334, 3
  %2591 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %2592 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %2593 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i.i320)
  %2594 = sext i32 %offset.i.i92.i.i334 to i64
  %2595 = getelementptr ptr, ptr %.fca.0.extract36.i.i320, i64 %2594
  %2596 = getelementptr i8, ptr %2595, i64 64
  %2597 = load ptr, ptr %2596, align 8
  %2598 = call ptr %2597({ ptr, ptr, ptr, i32 } %2590, ptr nonnull %0)
  %2599 = call i32 %2598({ ptr, ptr, ptr, i32 } %2590, { ptr, ptr, ptr, i32 } %2590, ptr nonnull %0)
  %2600 = icmp eq i32 %2599, %2542
  %2601 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %2602 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %2603 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i.i320)
  %2604 = getelementptr i8, ptr %2595, i64 48
  %2605 = load ptr, ptr %2604, align 8
  %2606 = call ptr %2605({ ptr, ptr, ptr, i32 } %2590, ptr nonnull %0)
  %2607 = call { ptr, i160 } %2606({ ptr, ptr, ptr, i32 } %2590, { ptr, ptr, ptr, i32 } %2590, ptr nonnull %0)
  %2608 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %2609 = load ptr, ptr %1860, align 8
  %2610 = call i1 %2609({ ptr, i160 } %2607, { ptr, i160 } %2539)
  %2611 = and i1 %2600, %2610
  br i1 %2611, label %HashMap_find_slot_keyK_hashPtri32.exit.i337, label %2612

2612:                                             ; preds = %2584
  %2613 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %2614 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %2615 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i.i320)
  %2616 = getelementptr i8, ptr %2595, i64 56
  %2617 = load ptr, ptr %2616, align 8
  %2618 = call ptr %2617({ ptr, ptr, ptr, i32 } %2590, ptr nonnull %0)
  %2619 = call { ptr, i160 } %2618({ ptr, ptr, ptr, i32 } %2590, { ptr, ptr, ptr, i32 } %2590, ptr nonnull %0)
  %.fca.0.extract15.i445.i = extractvalue { ptr, i160 } %2619, 0
  %2620 = getelementptr i8, ptr %.fca.0.extract15.i445.i, i64 8
  %2621 = getelementptr i8, ptr %.fca.0.extract15.i445.i, i64 16
  %2622 = getelementptr i8, ptr %.fca.0.extract15.i445.i, i64 24
  %2623 = getelementptr i8, ptr %.fca.0.extract15.i445.i, i64 32
  %2624 = load i64, ptr %2620, align 4
  %2625 = load i64, ptr %2621, align 4
  %2626 = load ptr, ptr %2622, align 8
  %2627 = load ptr, ptr %2623, align 8
  %result.i.i446.i = call i1 %2626(i64 %2625, i64 %2624, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %2627) #3
  %2628 = icmp eq i32 %spec.store.select.i491.i305, -1
  %or.cond.i.i335 = select i1 %result.i.i446.i, i1 %2628, i1 false
  %spec.store.select.i.i336 = select i1 %or.cond.i.i335, i32 %.0..0..0..i.i306, i32 %spec.store.select.i491.i305
  %2629 = add i32 %.0..0..0..i.i306, 1
  %2630 = and i32 %2629, %2560
  br label %2563

2631:                                             ; preds = %2563
  %2632 = icmp eq i32 %spec.store.select.i491.i305, -1
  %.pre.i379 = select i1 %2632, i32 %.0..0..0..i.i306, i32 %spec.store.select.i491.i305
  br label %HashMap_find_slot_keyK_hashPtri32.exit.i337

HashMap_find_slot_keyK_hashPtri32.exit.i337:      ; preds = %2584, %2631
  %2633 = phi i32 [ %.pre.i379, %2631 ], [ %.0..0..0..i.i306, %2584 ]
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %57)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %58)
  %2634 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %2635 = load ptr, ptr %1871, align 8
  %2636 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2635, 0
  %2637 = load ptr, ptr %1872, align 8
  %2638 = insertvalue { ptr, ptr, ptr, i32 } %2636, ptr %2637, 1
  %2639 = load ptr, ptr %1873, align 8
  %2640 = insertvalue { ptr, ptr, ptr, i32 } %2638, ptr %2639, 2
  %2641 = load i32, ptr %1874, align 4
  %2642 = insertvalue { ptr, ptr, ptr, i32 } %2640, i32 %2641, 3
  %hash_coef_ptr.i.i58.i.i338 = getelementptr i8, ptr %2635, i64 8
  %tbl_size_ptr.i.i59.i.i339 = getelementptr i8, ptr %2635, i64 16
  %offset_tbl_ptr.i.i60.i.i340 = getelementptr i8, ptr %2635, i64 40
  %hash_coef.i.i61.i.i341 = load i64, ptr %hash_coef_ptr.i.i58.i.i338, align 4
  %tbl_size.i.i62.i.i342 = load i64, ptr %tbl_size_ptr.i.i59.i.i339, align 4
  %offset_tbl.i.i63.i.i343 = load ptr, ptr %offset_tbl_ptr.i.i60.i.i340, align 8
  %product.i.i.i64.i.i344 = mul i64 %hash_coef.i.i61.i.i341, -5261542750394134544
  %shifted.i.i.i65.i.i345 = lshr i64 %product.i.i.i64.i.i344, 32
  %xored.i.i.i66.i.i346 = xor i64 %shifted.i.i.i65.i.i345, %product.i.i.i64.i.i344
  %hash.i.i.i67.i.i347 = and i64 %xored.i.i.i66.i.i346, %tbl_size.i.i62.i.i342
  %offset_ptr.i.i68.i.i348 = getelementptr i32, ptr %offset_tbl.i.i63.i.i343, i64 %hash.i.i.i67.i.i347
  %offset.i.i69.i.i349 = load i32, ptr %offset_ptr.i.i68.i.i348, align 4
  %eq.i.i324.i = icmp eq i32 %2641, %offset.i.i69.i.i349
  call void @llvm.assume(i1 %eq.i.i324.i) #30
  store ptr @_parameterization_Ptri32, ptr %66, align 8
  %2643 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %66)
  %2644 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2635)
  %2645 = sext i32 %2641 to i64
  %2646 = getelementptr ptr, ptr %2635, i64 %2645
  %2647 = getelementptr i8, ptr %2646, i64 120
  %2648 = load ptr, ptr %2647, align 8
  store ptr @i32_typ, ptr %67, align 8
  %2649 = call ptr %2648({ ptr, ptr, ptr, i32 } %2642, ptr nonnull %67)
  %2650 = call { ptr, i160 } %2649({ ptr, ptr, ptr, i32 } %2642, { ptr, ptr, ptr, i32 } %2642, ptr nonnull %66, i32 %2633)
  %.fca.0.extract.i325.i = extractvalue { ptr, i160 } %2650, 0
  %2651 = icmp ne ptr %.fca.0.extract.i325.i, @nil_typ
  %2652 = icmp ne ptr %.fca.0.extract.i325.i, null
  %.not56.i.i350 = and i1 %2651, %2652
  br i1 %.not56.i.i350, label %2653, label %HashMap_get_keyK.exit.i351

2653:                                             ; preds = %HashMap_find_slot_keyK_hashPtri32.exit.i337
  %.fca.1.extract.i326.i = extractvalue { ptr, i160 } %2650, 1
  %.sroa.3.8.extract.trunc.i.i358 = trunc i160 %.fca.1.extract.i326.i to i64
  %2654 = inttoptr i64 %.sroa.3.8.extract.trunc.i.i358 to ptr
  %.sroa.5.8.extract.shift.i.i359 = lshr i160 %.fca.1.extract.i326.i, 64
  %.sroa.5.8.extract.trunc.i.i360 = trunc i160 %.sroa.5.8.extract.shift.i.i359 to i64
  %2655 = inttoptr i64 %.sroa.5.8.extract.trunc.i.i360 to ptr
  %hash_coef_ptr.i.i72.i.i361 = getelementptr i8, ptr %.fca.0.extract.i325.i, i64 8
  %tbl_size_ptr.i.i73.i.i362 = getelementptr i8, ptr %.fca.0.extract.i325.i, i64 16
  %offset_tbl_ptr.i.i74.i.i363 = getelementptr i8, ptr %.fca.0.extract.i325.i, i64 40
  %hash_coef.i.i75.i.i364 = load i64, ptr %hash_coef_ptr.i.i72.i.i361, align 4
  %tbl_size.i.i76.i.i365 = load i64, ptr %tbl_size_ptr.i.i73.i.i362, align 4
  %offset_tbl.i.i77.i.i366 = load ptr, ptr %offset_tbl_ptr.i.i74.i.i363, align 8
  %product.i.i.i78.i.i367 = mul i64 %hash_coef.i.i75.i.i364, 4015701072841558310
  %shifted.i.i.i79.i.i368 = lshr i64 %product.i.i.i78.i.i367, 32
  %xored.i.i.i80.i.i369 = xor i64 %shifted.i.i.i79.i.i368, %product.i.i.i78.i.i367
  %hash.i.i.i81.i.i370 = and i64 %xored.i.i.i80.i.i369, %tbl_size.i.i76.i.i365
  %offset_ptr.i.i82.i.i371 = getelementptr i32, ptr %offset_tbl.i.i77.i.i366, i64 %hash.i.i.i81.i.i370
  %offset.i.i83.i.i372 = load i32, ptr %offset_ptr.i.i82.i.i371, align 4
  %2656 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract.i325.i, 0
  %2657 = insertvalue { ptr, ptr, ptr, i32 } %2656, ptr %2654, 1
  %2658 = insertvalue { ptr, ptr, ptr, i32 } %2657, ptr %2655, 2
  %2659 = insertvalue { ptr, ptr, ptr, i32 } %2658, i32 %offset.i.i83.i.i372, 3
  %2660 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %2661 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %2662 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract.i325.i)
  %2663 = sext i32 %offset.i.i83.i.i372 to i64
  %2664 = getelementptr ptr, ptr %.fca.0.extract.i325.i, i64 %2663
  %2665 = getelementptr i8, ptr %2664, i64 56
  %2666 = load ptr, ptr %2665, align 8
  %2667 = call ptr %2666({ ptr, ptr, ptr, i32 } %2659, ptr nonnull %0)
  %2668 = call { ptr, i160 } %2667({ ptr, ptr, ptr, i32 } %2659, { ptr, ptr, ptr, i32 } %2659, ptr nonnull %0)
  %.fca.0.extract47.i.i373 = extractvalue { ptr, i160 } %2668, 0
  %.fca.1.extract49.i.i374 = extractvalue { ptr, i160 } %2668, 1
  %2669 = getelementptr i8, ptr %.fca.0.extract47.i.i373, i64 8
  %2670 = getelementptr i8, ptr %.fca.0.extract47.i.i373, i64 16
  %2671 = getelementptr i8, ptr %.fca.0.extract47.i.i373, i64 24
  %2672 = getelementptr i8, ptr %.fca.0.extract47.i.i373, i64 32
  %2673 = load i64, ptr %2669, align 4
  %2674 = load i64, ptr %2670, align 4
  %2675 = load ptr, ptr %2671, align 8
  %2676 = load ptr, ptr %2672, align 8
  %result.i.i327.i = call i1 %2675(i64 %2674, i64 %2673, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %2676) #3
  %extract.t.i375 = trunc i160 %.fca.1.extract49.i.i374 to i32
  br i1 %result.i.i327.i, label %HashMap_get_keyK.exit.i351, label %2677

2677:                                             ; preds = %2653
  %result.i85.i.i376 = call i1 %2675(i64 %2674, i64 %2673, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr readonly %2676) #3
  %cond.fr.i.i377 = freeze i1 %result.i85.i.i376
  %spec.select.i.i378 = select i1 %cond.fr.i.i377, ptr %.fca.0.extract47.i.i373, ptr @nil_typ
  br label %HashMap_get_keyK.exit.i351

HashMap_get_keyK.exit.i351:                       ; preds = %2677, %2653, %HashMap_find_slot_keyK_hashPtri32.exit.i337
  %.reg2mem23.sroa.3.0112.i.off0.i352 = phi i32 [ poison, %HashMap_find_slot_keyK_hashPtri32.exit.i337 ], [ %extract.t.i375, %2653 ], [ %extract.t.i375, %2677 ]
  %2678 = phi ptr [ @nil_typ, %HashMap_find_slot_keyK_hashPtri32.exit.i337 ], [ @nil_typ, %2653 ], [ %spec.select.i.i378, %2677 ]
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %66)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %67)
  %2679 = icmp ne ptr %2678, @nil_typ
  %2680 = icmp ne ptr %2678, null
  %.not41.i = and i1 %2679, %2680
  %2681 = sext i32 %.reg2mem23.sroa.3.0112.i.off0.i352 to i64
  %2682 = select i1 %.not41.i, i64 %2681, i64 0
  %.reg2mem69.0.i = add i64 %2682, %.reg2mem73.0145.i
  %2683 = add nuw nsw i32 %.reg2mem71.0144.i, 1
  %2684 = icmp ult i32 %.reg2mem71.0144.i, 999999
  br i1 %2684, label %.lr.ph147.i, label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit.i353

IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit.i353: ; preds = %HashMap_get_keyK.exit.i351
  %2685 = call i64 @clock()
  %2686 = icmp eq i64 %.reg2mem69.0.i, %2531
  %result.i78.i = call noalias dereferenceable_or_null(15) ptr @bump_malloc_inner(i64 noundef 15, ptr nonnull @current_ptr) #29
  store <14 x i8> <i8 71, i8 101, i8 116, i8 32, i8 82, i8 97, i8 110, i8 100, i8 111, i8 109, i8 32, i8 72, i8 105, i8 116>, ptr %result.i78.i, align 16
  %result.i79.i = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %2687 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %result.i79.i, 1
  %2688 = insertvalue { ptr, ptr, ptr, i32 } %2687, ptr undef, 2
  %2689 = insertvalue { ptr, ptr, ptr, i32 } %2688, i32 9, 3
  store ptr %result.i78.i, ptr %result.i79.i, align 8
  %2690 = getelementptr i8, ptr %result.i79.i, i64 8
  store i32 14, ptr %2690, align 4
  %2691 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %2692 = getelementptr i8, ptr %result.i79.i, i64 12
  store i32 15, ptr %2692, align 4
  %2693 = sub i64 %2685, %2534
  call void @print_benchmark_result({ ptr, ptr, ptr, i32 } %2689, i32 1000000, i64 %2693)
  %result.i80.i = call noalias dereferenceable_or_null(19) ptr @bump_malloc_inner(i64 noundef 19, ptr nonnull @current_ptr) #29
  store <18 x i8> <i8 32, i8 32, i8 32, i8 32, i8 86, i8 101, i8 114, i8 105, i8 102, i8 105, i8 99, i8 97, i8 116, i8 105, i8 111, i8 110, i8 58, i8 32>, ptr %result.i80.i, align 32
  %result.i81.i = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %2694 = getelementptr inbounds i8, ptr %68, i64 8
  %2695 = getelementptr inbounds i8, ptr %68, i64 24
  store ptr @String, ptr %68, align 8
  store ptr %result.i81.i, ptr %2694, align 8
  store i32 9, ptr %2695, align 8
  %2696 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %68)
  store ptr %result.i80.i, ptr %result.i81.i, align 8
  %2697 = getelementptr i8, ptr %result.i81.i, i64 8
  store i32 18, ptr %2697, align 4
  %2698 = getelementptr i8, ptr %result.i81.i, i64 12
  store i32 19, ptr %2698, align 4
  %2699 = load i160, ptr %2694, align 8
  %2700 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  %.sroa.3.8.extract.trunc.i332.i = trunc i160 %2699 to i64
  %2701 = inttoptr i64 %.sroa.3.8.extract.trunc.i332.i to ptr
  %2702 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %2703 = getelementptr i8, ptr %2701, i64 8
  %2704 = load i32, ptr %2703, align 4
  %2705 = add i32 %2704, 1
  %2706 = sext i32 %2705 to i64
  %result.i.i461.i = call noalias ptr @bump_malloc_inner(i64 noundef %2706, ptr nonnull @current_ptr) #29
  %2707 = load i32, ptr %2703, align 4
  %2708 = icmp sgt i32 %2707, 0
  br i1 %2708, label %.lr.ph.i.i357, label %String_c_string_.exit.i354

.lr.ph.i.i357:                                    ; preds = %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit.i353
  %2709 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %2710 = load ptr, ptr %2701, align 8
  %2711 = zext nneg i32 %2707 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i461.i, ptr align 1 %2710, i64 %2711, i1 false)
  br label %String_c_string_.exit.i354

String_c_string_.exit.i354:                       ; preds = %.lr.ph.i.i357, %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit.i353
  %2712 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %2713 = sext i32 %2707 to i64
  %2714 = getelementptr i8, ptr %result.i.i461.i, i64 %2713
  store i8 0, ptr %2714, align 1
  %puts.i.i355 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i461.i)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  %result.i82.i = call noalias dereferenceable_or_null(5) ptr @bump_malloc_inner(i64 noundef 5, ptr nonnull @current_ptr) #29
  %..i356 = select i1 %2686, <4 x i8> <i8 80, i8 65, i8 83, i8 83>, <4 x i8> <i8 70, i8 65, i8 73, i8 76>
  %.238.i = select i1 %2686, ptr %69, ptr %70
  store <4 x i8> %..i356, ptr %result.i82.i, align 4
  %result.i103.i = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %.238.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.i.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v = select i1 %2686, ptr %69, ptr %70
  %.238.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.i.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel = getelementptr inbounds i8, ptr %.238.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.i.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v, i64 8
  %.238.sroa.sel371.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.i.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v = select i1 %2686, ptr %69, ptr %70
  %.238.sroa.sel371.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.i.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel = getelementptr inbounds i8, ptr %.238.sroa.sel371.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.i.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v, i64 24
  store ptr @String, ptr %.238.i, align 8
  store ptr %result.i103.i, ptr %.238.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.i.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  store i32 9, ptr %.238.sroa.sel371.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.i.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  %2715 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %.238.i)
  store ptr %result.i82.i, ptr %result.i103.i, align 8
  %2716 = getelementptr i8, ptr %result.i103.i, i64 8
  store i32 4, ptr %2716, align 4
  %2717 = getelementptr i8, ptr %result.i103.i, i64 12
  store i32 5, ptr %2717, align 4
  %2718 = load i160, ptr %.238.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.i.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  %2719 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  %.sroa.3.8.extract.trunc.i351.i = trunc i160 %2718 to i64
  %2720 = inttoptr i64 %.sroa.3.8.extract.trunc.i351.i to ptr
  %2721 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %2722 = getelementptr i8, ptr %2720, i64 8
  %2723 = load i32, ptr %2722, align 4
  %2724 = add i32 %2723, 1
  %2725 = sext i32 %2724 to i64
  %result.i.i477.i = call noalias ptr @bump_malloc_inner(i64 noundef %2725, ptr nonnull @current_ptr) #29
  %2726 = load i32, ptr %2722, align 4
  %2727 = icmp sgt i32 %2726, 0
  br i1 %2727, label %.lr.ph.i478.i, label %benchmark_get_random_hit.exit

.lr.ph.i478.i:                                    ; preds = %String_c_string_.exit.i354
  %2728 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %2729 = load ptr, ptr %2720, align 8
  %2730 = zext nneg i32 %2726 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i477.i, ptr align 1 %2729, i64 %2730, i1 false)
  br label %benchmark_get_random_hit.exit

benchmark_get_random_hit.exit:                    ; preds = %String_c_string_.exit.i354, %.lr.ph.i478.i
  %2731 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %2732 = sext i32 %2726 to i64
  %2733 = getelementptr i8, ptr %result.i.i477.i, i64 %2732
  store i8 0, ptr %2733, align 1
  %puts.i367.i = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i477.i)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %68)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %69)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %70)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %41)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %42)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %43)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %44)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %45)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %46)
  %result.i.i424 = call noalias dereferenceable_or_null(80) ptr @bump_malloc_inner(i64 noundef 80, ptr nonnull @current_ptr) #29
  store ptr @_parameterization_Ptri32, ptr %result.i.i424, align 8
  %2734 = getelementptr i8, ptr %result.i.i424, i64 8
  store ptr @_parameterization_Ptri32, ptr %2734, align 8
  %2735 = getelementptr i8, ptr %result.i.i424, i64 16
  store ptr @_parameterization_PairPtri32._Ptri32, ptr %2735, align 8
  %2736 = call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %result.i.i424)
  %result.i47.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %oldProtect.i.i423)
  %result.i48.i = call i32 @VirtualProtect(ptr %result.i47.i, i64 16, i32 64, ptr nonnull %oldProtect.i.i423) #16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %oldProtect.i.i423)
  call void @llvm.init.trampoline(ptr %result.i47.i, ptr nonnull @xckklmlpex, ptr nonnull @i32_hasher)
  %ret.i.i425 = call ptr @llvm.adjust.trampoline(ptr readonly %result.i47.i) #31
  %2737 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i47.i)
  %result.i49.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %oldProtect.i50.i)
  %result.i51.i = call i32 @VirtualProtect(ptr %result.i49.i, i64 16, i32 64, ptr nonnull %oldProtect.i50.i) #16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %oldProtect.i50.i)
  call void @llvm.init.trampoline(ptr %result.i49.i, ptr nonnull @jplekxbvrg, ptr nonnull @i32_eq)
  %ret.i52.i = call ptr @llvm.adjust.trampoline(ptr readonly %result.i49.i) #31
  %2738 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i49.i)
  %2739 = getelementptr i8, ptr %result.i.i424, i64 64
  store ptr %ret.i.i425, ptr %2739, align 8
  %2740 = getelementptr i8, ptr %result.i.i424, i64 72
  store ptr %ret.i52.i, ptr %2740, align 8
  %result.i.i.i426 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2741 = getelementptr i8, ptr %result.i.i.i426, i64 16
  store ptr @_parameterization_Nil, ptr %2741, align 8
  %result.i4.i.i427 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2742 = getelementptr i8, ptr %result.i4.i.i427, i64 16
  store ptr @_parameterization_Ptri32, ptr %2742, align 8
  %2743 = getelementptr i8, ptr %result.i4.i.i427, i64 8
  store ptr @_parameterization_Ptri32, ptr %2743, align 8
  %2744 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i4.i.i427)
  store ptr @Entry, ptr %result.i4.i.i427, align 8
  %2745 = getelementptr i8, ptr %result.i.i.i426, i64 8
  store ptr %result.i4.i.i427, ptr %2745, align 8
  %2746 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i.i426)
  store ptr @union_typ, ptr %result.i.i.i426, align 8
  %result.i5.i.i428 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i.i426, ptr %result.i5.i.i428, align 8
  %2747 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i5.i.i428)
  %2748 = getelementptr i8, ptr %result.i5.i.i428, i64 16
  store i32 16, ptr %2748, align 4
  %2749 = getelementptr i8, ptr %result.i5.i.i428, i64 20
  store i32 16, ptr %2749, align 4
  %result.i.i.i.i429 = call noalias dereferenceable_or_null(512) ptr @bump_malloc_inner(i64 noundef 512, ptr nonnull @current_ptr) #29
  %2750 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %2751 = getelementptr i8, ptr %result.i5.i.i428, i64 8
  store ptr %result.i.i.i.i429, ptr %2751, align 8
  %2752 = getelementptr i8, ptr %result.i.i424, i64 24
  store ptr @Array, ptr %2752, align 8
  %2753 = getelementptr i8, ptr %result.i.i424, i64 32
  store ptr %result.i5.i.i428, ptr %2753, align 8
  %2754 = getelementptr i8, ptr %result.i.i424, i64 40
  %2755 = getelementptr i8, ptr %result.i.i424, i64 48
  store i32 9, ptr %2755, align 4
  %2756 = getelementptr i8, ptr %result.i.i424, i64 60
  %2757 = call ptr @llvm.invariant.start.p0(i64 40, ptr nonnull @PRNG)
  %2758 = getelementptr inbounds i8, ptr %34, i64 8
  %2759 = getelementptr inbounds i8, ptr %34, i64 24
  %2760 = getelementptr inbounds i8, ptr %34, i64 16
  %2761 = getelementptr inbounds i8, ptr %35, i64 8
  %2762 = getelementptr inbounds i8, ptr %36, i64 8
  %2763 = getelementptr i8, ptr %result.i.i424, i64 56
  %2764 = getelementptr inbounds i8, ptr %26, i64 8
  %2765 = getelementptr inbounds i8, ptr %26, i64 24
  %2766 = getelementptr inbounds i8, ptr %26, i64 16
  %2767 = getelementptr inbounds i8, ptr %27, i64 8
  %2768 = getelementptr inbounds i8, ptr %27, i64 16
  %2769 = getelementptr inbounds i8, ptr %28, i64 8
  %2770 = getelementptr inbounds i8, ptr %29, i64 8
  br label %._crit_edge.i430

._crit_edge.i430:                                 ; preds = %HashMap_insert_internal_keyK_valueV_hashPtri32.exit.i499, %benchmark_get_random_hit.exit
  %2771 = phi i32 [ %2774, %HashMap_insert_internal_keyK_valueV_hashPtri32.exit.i499 ], [ 789, %benchmark_get_random_hit.exit ]
  %.reg2mem91.0269.i = phi i32 [ %3398, %HashMap_insert_internal_keyK_valueV_hashPtri32.exit.i499 ], [ 0, %benchmark_get_random_hit.exit ]
  %2772 = mul i32 %2771, 1103515245
  %2773 = add i32 %2772, 12345
  %2774 = and i32 %2773, 2147483647
  %2775 = add nuw i32 %2774, 1
  %.sroa.045.0.insert.ext.i = zext nneg i32 %2774 to i160
  %2776 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.045.0.insert.ext.i, 1
  %.sroa.042.0.insert.ext.i = zext i32 %2775 to i160
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  %2777 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %2778 = load ptr, ptr %2752, align 8
  %2779 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2778, 0
  %2780 = load ptr, ptr %2753, align 8
  %2781 = insertvalue { ptr, ptr, ptr, i32 } %2779, ptr %2780, 1
  %2782 = load ptr, ptr %2754, align 8
  %2783 = insertvalue { ptr, ptr, ptr, i32 } %2781, ptr %2782, 2
  %2784 = load i32, ptr %2755, align 4
  %2785 = insertvalue { ptr, ptr, ptr, i32 } %2783, i32 %2784, 3
  %hash_coef_ptr.i.i42.i.i431 = getelementptr i8, ptr %2778, i64 8
  %tbl_size_ptr.i.i43.i.i432 = getelementptr i8, ptr %2778, i64 16
  %offset_tbl_ptr.i.i44.i.i433 = getelementptr i8, ptr %2778, i64 40
  %hash_coef.i.i45.i.i434 = load i64, ptr %hash_coef_ptr.i.i42.i.i431, align 4
  %tbl_size.i.i46.i.i435 = load i64, ptr %tbl_size_ptr.i.i43.i.i432, align 4
  %offset_tbl.i.i47.i.i436 = load ptr, ptr %offset_tbl_ptr.i.i44.i.i433, align 8
  %product.i.i.i48.i.i437 = mul i64 %hash_coef.i.i45.i.i434, -5261542750394134544
  %shifted.i.i.i49.i.i438 = lshr i64 %product.i.i.i48.i.i437, 32
  %xored.i.i.i50.i.i439 = xor i64 %shifted.i.i.i49.i.i438, %product.i.i.i48.i.i437
  %hash.i.i.i51.i.i440 = and i64 %xored.i.i.i50.i.i439, %tbl_size.i.i46.i.i435
  %offset_ptr.i.i52.i.i441 = getelementptr i32, ptr %offset_tbl.i.i47.i.i436, i64 %hash.i.i.i51.i.i440
  %offset.i.i53.i.i442 = load i32, ptr %offset_ptr.i.i52.i.i441, align 4
  %eq.i.i.i443 = icmp eq i32 %2784, %offset.i.i53.i.i442
  call void @llvm.assume(i1 %eq.i.i.i443) #30
  %2786 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %2787 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2778)
  %2788 = sext i32 %2784 to i64
  %2789 = getelementptr ptr, ptr %2778, i64 %2788
  %2790 = getelementptr i8, ptr %2789, i64 64
  %2791 = load ptr, ptr %2790, align 8
  %2792 = call ptr %2791({ ptr, ptr, ptr, i32 } %2785, ptr nonnull %0)
  %2793 = call i32 %2792({ ptr, ptr, ptr, i32 } %2785, { ptr, ptr, ptr, i32 } %2785, ptr nonnull %0)
  %2794 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %2795 = load ptr, ptr %2752, align 8
  %2796 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2795, 0
  %2797 = load ptr, ptr %2753, align 8
  %2798 = insertvalue { ptr, ptr, ptr, i32 } %2796, ptr %2797, 1
  %2799 = load ptr, ptr %2754, align 8
  %2800 = insertvalue { ptr, ptr, ptr, i32 } %2798, ptr %2799, 2
  %2801 = load i32, ptr %2755, align 4
  %2802 = insertvalue { ptr, ptr, ptr, i32 } %2800, i32 %2801, 3
  %hash_coef_ptr.i.i56.i.i444 = getelementptr i8, ptr %2795, i64 8
  %tbl_size_ptr.i.i57.i.i445 = getelementptr i8, ptr %2795, i64 16
  %offset_tbl_ptr.i.i58.i.i446 = getelementptr i8, ptr %2795, i64 40
  %hash_coef.i.i59.i.i447 = load i64, ptr %hash_coef_ptr.i.i56.i.i444, align 4
  %tbl_size.i.i60.i.i448 = load i64, ptr %tbl_size_ptr.i.i57.i.i445, align 4
  %offset_tbl.i.i61.i.i449 = load ptr, ptr %offset_tbl_ptr.i.i58.i.i446, align 8
  %product.i.i.i62.i.i450 = mul i64 %hash_coef.i.i59.i.i447, -5261542750394134544
  %shifted.i.i.i63.i.i451 = lshr i64 %product.i.i.i62.i.i450, 32
  %xored.i.i.i64.i.i452 = xor i64 %shifted.i.i.i63.i.i451, %product.i.i.i62.i.i450
  %hash.i.i.i65.i.i453 = and i64 %xored.i.i.i64.i.i452, %tbl_size.i.i60.i.i448
  %offset_ptr.i.i66.i.i454 = getelementptr i32, ptr %offset_tbl.i.i61.i.i449, i64 %hash.i.i.i65.i.i453
  %offset.i.i67.i.i455 = load i32, ptr %offset_ptr.i.i66.i.i454, align 4
  %eq.i70.i.i456 = icmp eq i32 %2801, %offset.i.i67.i.i455
  call void @llvm.assume(i1 %eq.i70.i.i456) #30
  %2803 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %2804 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2795)
  %2805 = sext i32 %2801 to i64
  %2806 = getelementptr ptr, ptr %2795, i64 %2805
  %2807 = getelementptr i8, ptr %2806, i64 64
  %2808 = load ptr, ptr %2807, align 8
  %2809 = call ptr %2808({ ptr, ptr, ptr, i32 } %2802, ptr nonnull %0)
  %2810 = call i32 %2809({ ptr, ptr, ptr, i32 } %2802, { ptr, ptr, ptr, i32 } %2802, ptr nonnull %0)
  %2811 = icmp eq i32 %2810, 0
  %2812 = load i32, ptr %2756, align 4
  %2813 = mul i32 %2812, 10
  %2814 = add i32 %2813, 10
  %2815 = mul i32 %2793, 7
  %2816 = icmp sge i32 %2814, %2815
  %2817 = or i1 %2811, %2816
  br i1 %2817, label %2818, label %HashMap_insert_keyK_valueV.exit.i457

2818:                                             ; preds = %._crit_edge.i430
  %2819 = shl i32 %2793, 1
  %2820 = call i32 @llvm.smax.i32(i32 %2819, i32 16)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %37)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %38)
  %2821 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %2822 = load ptr, ptr %2752, align 8
  %2823 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2822, 0
  %2824 = load ptr, ptr %2753, align 8
  %2825 = insertvalue { ptr, ptr, ptr, i32 } %2823, ptr %2824, 1
  %2826 = load ptr, ptr %2754, align 8
  %2827 = insertvalue { ptr, ptr, ptr, i32 } %2825, ptr %2826, 2
  %2828 = load i32, ptr %2755, align 4
  %2829 = insertvalue { ptr, ptr, ptr, i32 } %2827, i32 %2828, 3
  %hash_coef_ptr.i.i39.i.i590 = getelementptr i8, ptr %2822, i64 8
  %tbl_size_ptr.i.i40.i.i591 = getelementptr i8, ptr %2822, i64 16
  %offset_tbl_ptr.i.i41.i.i592 = getelementptr i8, ptr %2822, i64 40
  %hash_coef.i.i42.i.i593 = load i64, ptr %hash_coef_ptr.i.i39.i.i590, align 4
  %tbl_size.i.i43.i.i594 = load i64, ptr %tbl_size_ptr.i.i40.i.i591, align 4
  %offset_tbl.i.i44.i.i595 = load ptr, ptr %offset_tbl_ptr.i.i41.i.i592, align 8
  %product.i.i.i45.i.i596 = mul i64 %hash_coef.i.i42.i.i593, -5261542750394134544
  %shifted.i.i.i46.i.i597 = lshr i64 %product.i.i.i45.i.i596, 32
  %xored.i.i.i47.i.i598 = xor i64 %shifted.i.i.i46.i.i597, %product.i.i.i45.i.i596
  %hash.i.i.i48.i.i599 = and i64 %xored.i.i.i47.i.i598, %tbl_size.i.i43.i.i594
  %offset_ptr.i.i49.i.i600 = getelementptr i32, ptr %offset_tbl.i.i44.i.i595, i64 %hash.i.i.i48.i.i599
  %offset.i.i50.i.i601 = load i32, ptr %offset_ptr.i.i49.i.i600, align 4
  %eq.i.i637.i = icmp eq i32 %2828, %offset.i.i50.i.i601
  call void @llvm.assume(i1 %eq.i.i637.i) #30
  %2830 = load ptr, ptr %result.i.i424, align 8
  %2831 = load ptr, ptr %2734, align 8
  %result.i.i638.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2832 = getelementptr i8, ptr %result.i.i638.i, i64 16
  store ptr @_parameterization_Nil, ptr %2832, align 8
  %result.i66.i.i602 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2833 = getelementptr i8, ptr %result.i66.i.i602, i64 16
  store ptr %2831, ptr %2833, align 8
  %2834 = getelementptr i8, ptr %result.i66.i.i602, i64 8
  store ptr %2830, ptr %2834, align 8
  %2835 = getelementptr i8, ptr %result.i66.i.i602, i64 24
  store ptr null, ptr %2835, align 8
  %2836 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i66.i.i602)
  store ptr @Entry, ptr %result.i66.i.i602, align 8
  %2837 = getelementptr i8, ptr %result.i.i638.i, i64 8
  store ptr %result.i66.i.i602, ptr %2837, align 8
  %2838 = getelementptr i8, ptr %result.i.i638.i, i64 24
  store ptr null, ptr %2838, align 8
  %2839 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i638.i)
  store ptr @union_typ, ptr %result.i.i638.i, align 8
  %result.i67.i.i603 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i638.i, ptr %result.i67.i.i603, align 8
  %2840 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i67.i.i603)
  %2841 = getelementptr i8, ptr %result.i67.i.i603, i64 16
  store i32 %2820, ptr %2841, align 4
  %2842 = getelementptr i8, ptr %result.i67.i.i603, i64 20
  store i32 %2820, ptr %2842, align 4
  %2843 = zext nneg i32 %2820 to i64
  %2844 = shl nuw nsw i64 %2843, 5
  %result.i.i.i639.i = call noalias ptr @bump_malloc_inner(i64 noundef %2844, ptr nonnull @current_ptr) #29
  %2845 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %2846 = getelementptr i8, ptr %result.i67.i.i603, i64 8
  store ptr %result.i.i.i639.i, ptr %2846, align 8
  store ptr @Array, ptr %2752, align 8
  store ptr %result.i67.i.i603, ptr %2753, align 8
  store i32 9, ptr %2755, align 4
  store i32 0, ptr %2763, align 4
  store i32 0, ptr %2756, align 4
  %invariant.gep.i.i604 = getelementptr i8, ptr %2822, i64 64
  %2847 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %2848 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %2849 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %2822)
  %2850 = sext i32 %2828 to i64
  %gep.i792.i = getelementptr ptr, ptr %invariant.gep.i.i604, i64 %2850
  %2851 = load ptr, ptr %gep.i792.i, align 8
  %2852 = call ptr %2851({ ptr, ptr, ptr, i32 } %2829, ptr nonnull %0)
  %2853 = call i32 %2852({ ptr, ptr, ptr, i32 } %2829, { ptr, ptr, ptr, i32 } %2829, ptr nonnull %0)
  %2854 = icmp sgt i32 %2853, 0
  br i1 %2854, label %.lr.ph.i606, label %HashMap_resize_new_capacityPtri32.exit.i605

.lr.ph.i606:                                      ; preds = %2818
  %invariant.gep172.i.i607 = getelementptr i8, ptr %2822, i64 120
  %2855 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %gep173.i.i608 = getelementptr ptr, ptr %invariant.gep172.i.i607, i64 %2850
  br label %2856

2856:                                             ; preds = %._crit_edge3.i.i611, %.lr.ph.i606
  %.reg2mem31.0.i793.i = phi i32 [ 0, %.lr.ph.i606 ], [ %3123, %._crit_edge3.i.i611 ]
  store ptr @_parameterization_Ptri32, ptr %37, align 8
  %2857 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %37)
  %2858 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %2822)
  %2859 = load ptr, ptr %gep173.i.i608, align 8
  store ptr @i32_typ, ptr %38, align 8
  %2860 = call ptr %2859({ ptr, ptr, ptr, i32 } %2829, ptr nonnull %38)
  %2861 = call { ptr, i160 } %2860({ ptr, ptr, ptr, i32 } %2829, { ptr, ptr, ptr, i32 } %2829, ptr nonnull %37, i32 %.reg2mem31.0.i793.i)
  %.fca.0.extract30.i.i609 = extractvalue { ptr, i160 } %2861, 0
  %2862 = icmp ne ptr %.fca.0.extract30.i.i609, @nil_typ
  %2863 = icmp ne ptr %.fca.0.extract30.i.i609, null
  %.not37.i.i610 = and i1 %2862, %2863
  br i1 %.not37.i.i610, label %2864, label %._crit_edge3.i.i611

2864:                                             ; preds = %2856
  %.fca.1.extract32.i.i612 = extractvalue { ptr, i160 } %2861, 1
  %.sroa.5164.8.extract.trunc.i.i613 = trunc i160 %.fca.1.extract32.i.i612 to i64
  %2865 = inttoptr i64 %.sroa.5164.8.extract.trunc.i.i613 to ptr
  %.sroa.9.8.extract.shift.i.i614 = lshr i160 %.fca.1.extract32.i.i612, 64
  %.sroa.9.8.extract.trunc.i.i615 = trunc i160 %.sroa.9.8.extract.shift.i.i614 to i64
  %2866 = inttoptr i64 %.sroa.9.8.extract.trunc.i.i615 to ptr
  %hash_coef_ptr.i.i83.i.i616 = getelementptr i8, ptr %.fca.0.extract30.i.i609, i64 8
  %tbl_size_ptr.i.i84.i.i617 = getelementptr i8, ptr %.fca.0.extract30.i.i609, i64 16
  %offset_tbl_ptr.i.i85.i.i618 = getelementptr i8, ptr %.fca.0.extract30.i.i609, i64 40
  %hash_coef.i.i86.i.i619 = load i64, ptr %hash_coef_ptr.i.i83.i.i616, align 4
  %tbl_size.i.i87.i.i620 = load i64, ptr %tbl_size_ptr.i.i84.i.i617, align 4
  %offset_tbl.i.i88.i.i621 = load ptr, ptr %offset_tbl_ptr.i.i85.i.i618, align 8
  %product.i.i.i89.i.i622 = mul i64 %hash_coef.i.i86.i.i619, 4015701072841558310
  %shifted.i.i.i90.i.i623 = lshr i64 %product.i.i.i89.i.i622, 32
  %xored.i.i.i91.i.i624 = xor i64 %shifted.i.i.i90.i.i623, %product.i.i.i89.i.i622
  %hash.i.i.i92.i.i625 = and i64 %xored.i.i.i91.i.i624, %tbl_size.i.i87.i.i620
  %offset_ptr.i.i93.i.i626 = getelementptr i32, ptr %offset_tbl.i.i88.i.i621, i64 %hash.i.i.i92.i.i625
  %offset.i.i94.i.i627 = load i32, ptr %offset_ptr.i.i93.i.i626, align 4
  %2867 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract30.i.i609, 0
  %2868 = insertvalue { ptr, ptr, ptr, i32 } %2867, ptr %2865, 1
  %2869 = insertvalue { ptr, ptr, ptr, i32 } %2868, ptr %2866, 2
  %2870 = insertvalue { ptr, ptr, ptr, i32 } %2869, i32 %offset.i.i94.i.i627, 3
  %2871 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %2872 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %2873 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract30.i.i609)
  %2874 = sext i32 %offset.i.i94.i.i627 to i64
  %2875 = getelementptr ptr, ptr %.fca.0.extract30.i.i609, i64 %2874
  %2876 = getelementptr i8, ptr %2875, i64 56
  %2877 = load ptr, ptr %2876, align 8
  %2878 = call ptr %2877({ ptr, ptr, ptr, i32 } %2870, ptr nonnull %0)
  %2879 = call { ptr, i160 } %2878({ ptr, ptr, ptr, i32 } %2870, { ptr, ptr, ptr, i32 } %2870, ptr nonnull %0)
  %.fca.0.extract23.i.i628 = extractvalue { ptr, i160 } %2879, 0
  %2880 = getelementptr i8, ptr %.fca.0.extract23.i.i628, i64 8
  %2881 = getelementptr i8, ptr %.fca.0.extract23.i.i628, i64 16
  %2882 = getelementptr i8, ptr %.fca.0.extract23.i.i628, i64 24
  %2883 = getelementptr i8, ptr %.fca.0.extract23.i.i628, i64 32
  %2884 = load i64, ptr %2880, align 4
  %2885 = load i64, ptr %2881, align 4
  %2886 = load ptr, ptr %2882, align 8
  %2887 = load ptr, ptr %2883, align 8
  %result.i96.i.i629 = call i1 %2886(i64 %2885, i64 %2884, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %2887) #3
  br i1 %result.i96.i.i629, label %._crit_edge3.i.i611, label %2888

2888:                                             ; preds = %2864
  %result.i97.i.i630 = call i1 %2886(i64 %2885, i64 %2884, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr readonly %2887) #3
  br i1 %result.i97.i.i630, label %2889, label %._crit_edge3.i.i611

2889:                                             ; preds = %2888
  %2890 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %2891 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %2892 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract30.i.i609)
  %2893 = getelementptr i8, ptr %2875, i64 48
  %2894 = load ptr, ptr %2893, align 8
  %2895 = call ptr %2894({ ptr, ptr, ptr, i32 } %2870, ptr nonnull %0)
  %2896 = call { ptr, i160 } %2895({ ptr, ptr, ptr, i32 } %2870, { ptr, ptr, ptr, i32 } %2870, ptr nonnull %0)
  %2897 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %2898 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %2899 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract30.i.i609)
  %2900 = getelementptr i8, ptr %2875, i64 64
  %2901 = load ptr, ptr %2900, align 8
  %2902 = call ptr %2901({ ptr, ptr, ptr, i32 } %2870, ptr nonnull %0)
  %2903 = call i32 %2902({ ptr, ptr, ptr, i32 } %2870, { ptr, ptr, ptr, i32 } %2870, ptr nonnull %0)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %24)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %25)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %26)
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %27)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %28)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %29)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %20)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %21)
  %2904 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %2905 = load ptr, ptr %2752, align 8
  %2906 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2905, 0
  %2907 = load ptr, ptr %2753, align 8
  %2908 = insertvalue { ptr, ptr, ptr, i32 } %2906, ptr %2907, 1
  %2909 = load ptr, ptr %2754, align 8
  %2910 = insertvalue { ptr, ptr, ptr, i32 } %2908, ptr %2909, 2
  %2911 = load i32, ptr %2755, align 4
  %2912 = insertvalue { ptr, ptr, ptr, i32 } %2910, i32 %2911, 3
  %hash_coef_ptr.i.i51.i1003.i = getelementptr i8, ptr %2905, i64 8
  %tbl_size_ptr.i.i52.i1004.i = getelementptr i8, ptr %2905, i64 16
  %offset_tbl_ptr.i.i53.i1005.i = getelementptr i8, ptr %2905, i64 40
  %hash_coef.i.i54.i1006.i = load i64, ptr %hash_coef_ptr.i.i51.i1003.i, align 4
  %tbl_size.i.i55.i1007.i = load i64, ptr %tbl_size_ptr.i.i52.i1004.i, align 4
  %offset_tbl.i.i56.i1008.i = load ptr, ptr %offset_tbl_ptr.i.i53.i1005.i, align 8
  %product.i.i.i57.i1009.i = mul i64 %hash_coef.i.i54.i1006.i, -5261542750394134544
  %shifted.i.i.i58.i1010.i = lshr i64 %product.i.i.i57.i1009.i, 32
  %xored.i.i.i59.i1011.i = xor i64 %shifted.i.i.i58.i1010.i, %product.i.i.i57.i1009.i
  %hash.i.i.i60.i1012.i = and i64 %xored.i.i.i59.i1011.i, %tbl_size.i.i55.i1007.i
  %offset_ptr.i.i61.i1013.i = getelementptr i32, ptr %offset_tbl.i.i56.i1008.i, i64 %hash.i.i.i60.i1012.i
  %offset.i.i62.i1014.i = load i32, ptr %offset_ptr.i.i61.i1013.i, align 4
  %eq.i.i1015.i = icmp eq i32 %2911, %offset.i.i62.i1014.i
  call void @llvm.assume(i1 %eq.i.i1015.i) #30
  %2913 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %2914 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2905)
  %2915 = sext i32 %2911 to i64
  %2916 = getelementptr ptr, ptr %2905, i64 %2915
  %2917 = getelementptr i8, ptr %2916, i64 64
  %2918 = load ptr, ptr %2917, align 8
  %2919 = call ptr %2918({ ptr, ptr, ptr, i32 } %2912, ptr nonnull %0)
  %2920 = call i32 %2919({ ptr, ptr, ptr, i32 } %2912, { ptr, ptr, ptr, i32 } %2912, ptr nonnull %0)
  %2921 = add i32 %2920, -1
  %2922 = and i32 %2921, %2903
  %2923 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  br label %2924

2924:                                             ; preds = %2973, %2889
  %spec.store.select.i10501059.i = phi i32 [ %spec.store.select.i1050.i, %2973 ], [ -1, %2889 ]
  %.0..0..0..i1016.i = phi i32 [ %2991, %2973 ], [ %2922, %2889 ]
  %2925 = load ptr, ptr %2752, align 8
  %2926 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2925, 0
  %2927 = load ptr, ptr %2753, align 8
  %2928 = insertvalue { ptr, ptr, ptr, i32 } %2926, ptr %2927, 1
  %2929 = load ptr, ptr %2754, align 8
  %2930 = insertvalue { ptr, ptr, ptr, i32 } %2928, ptr %2929, 2
  %2931 = load i32, ptr %2755, align 4
  %2932 = insertvalue { ptr, ptr, ptr, i32 } %2930, i32 %2931, 3
  %hash_coef_ptr.i.i65.i1017.i = getelementptr i8, ptr %2925, i64 8
  %tbl_size_ptr.i.i66.i1018.i = getelementptr i8, ptr %2925, i64 16
  %offset_tbl_ptr.i.i67.i1019.i = getelementptr i8, ptr %2925, i64 40
  %hash_coef.i.i68.i1020.i = load i64, ptr %hash_coef_ptr.i.i65.i1017.i, align 4
  %tbl_size.i.i69.i1021.i = load i64, ptr %tbl_size_ptr.i.i66.i1018.i, align 4
  %offset_tbl.i.i70.i1022.i = load ptr, ptr %offset_tbl_ptr.i.i67.i1019.i, align 8
  %product.i.i.i71.i1023.i = mul i64 %hash_coef.i.i68.i1020.i, -5261542750394134544
  %shifted.i.i.i72.i1024.i = lshr i64 %product.i.i.i71.i1023.i, 32
  %xored.i.i.i73.i1025.i = xor i64 %shifted.i.i.i72.i1024.i, %product.i.i.i71.i1023.i
  %hash.i.i.i74.i1026.i = and i64 %xored.i.i.i73.i1025.i, %tbl_size.i.i69.i1021.i
  %offset_ptr.i.i75.i1027.i = getelementptr i32, ptr %offset_tbl.i.i70.i1022.i, i64 %hash.i.i.i74.i1026.i
  %offset.i.i76.i1028.i = load i32, ptr %offset_ptr.i.i75.i1027.i, align 4
  %eq.i79.i1029.i = icmp eq i32 %2931, %offset.i.i76.i1028.i
  call void @llvm.assume(i1 %eq.i79.i1029.i) #30
  %2933 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  store ptr @_parameterization_Ptri32, ptr %20, align 8
  %2934 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %20)
  %2935 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2925)
  %2936 = sext i32 %2931 to i64
  %2937 = getelementptr ptr, ptr %2925, i64 %2936
  %2938 = getelementptr i8, ptr %2937, i64 120
  %2939 = load ptr, ptr %2938, align 8
  store ptr @i32_typ, ptr %21, align 8
  %2940 = call ptr %2939({ ptr, ptr, ptr, i32 } %2932, ptr nonnull %21)
  %2941 = call { ptr, i160 } %2940({ ptr, ptr, ptr, i32 } %2932, { ptr, ptr, ptr, i32 } %2932, ptr nonnull %20, i32 %.0..0..0..i1016.i)
  %.fca.0.extract36.i1030.i = extractvalue { ptr, i160 } %2941, 0
  %2942 = icmp eq ptr %.fca.0.extract36.i1030.i, @nil_typ
  %2943 = icmp eq ptr %.fca.0.extract36.i1030.i, null
  %2944 = or i1 %2942, %2943
  br i1 %2944, label %2992, label %2945

2945:                                             ; preds = %2924
  %.fca.1.extract38.i1031.i = extractvalue { ptr, i160 } %2941, 1
  %.sroa.5.8.extract.shift.i1032.i = lshr i160 %.fca.1.extract38.i1031.i, 64
  %.sroa.5.8.extract.trunc.i1033.i = trunc i160 %.sroa.5.8.extract.shift.i1032.i to i64
  %.sroa.2.8.extract.trunc165.i1034.i = trunc i160 %.fca.1.extract38.i1031.i to i64
  %2946 = inttoptr i64 %.sroa.2.8.extract.trunc165.i1034.i to ptr
  %2947 = inttoptr i64 %.sroa.5.8.extract.trunc.i1033.i to ptr
  %hash_coef_ptr.i.i81.i1035.i = getelementptr i8, ptr %.fca.0.extract36.i1030.i, i64 8
  %tbl_size_ptr.i.i82.i1036.i = getelementptr i8, ptr %.fca.0.extract36.i1030.i, i64 16
  %offset_tbl_ptr.i.i83.i1037.i = getelementptr i8, ptr %.fca.0.extract36.i1030.i, i64 40
  %hash_coef.i.i84.i1038.i = load i64, ptr %hash_coef_ptr.i.i81.i1035.i, align 4
  %tbl_size.i.i85.i1039.i = load i64, ptr %tbl_size_ptr.i.i82.i1036.i, align 4
  %offset_tbl.i.i86.i1040.i = load ptr, ptr %offset_tbl_ptr.i.i83.i1037.i, align 8
  %product.i.i.i87.i1041.i = mul i64 %hash_coef.i.i84.i1038.i, 4015701072841558310
  %shifted.i.i.i88.i1042.i = lshr i64 %product.i.i.i87.i1041.i, 32
  %xored.i.i.i89.i1043.i = xor i64 %shifted.i.i.i88.i1042.i, %product.i.i.i87.i1041.i
  %hash.i.i.i90.i1044.i = and i64 %xored.i.i.i89.i1043.i, %tbl_size.i.i85.i1039.i
  %offset_ptr.i.i91.i1045.i = getelementptr i32, ptr %offset_tbl.i.i86.i1040.i, i64 %hash.i.i.i90.i1044.i
  %offset.i.i92.i1046.i = load i32, ptr %offset_ptr.i.i91.i1045.i, align 4
  %2948 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract36.i1030.i, 0
  %2949 = insertvalue { ptr, ptr, ptr, i32 } %2948, ptr %2946, 1
  %2950 = insertvalue { ptr, ptr, ptr, i32 } %2949, ptr %2947, 2
  %2951 = insertvalue { ptr, ptr, ptr, i32 } %2950, i32 %offset.i.i92.i1046.i, 3
  %2952 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %2953 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %2954 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i1030.i)
  %2955 = sext i32 %offset.i.i92.i1046.i to i64
  %2956 = getelementptr ptr, ptr %.fca.0.extract36.i1030.i, i64 %2955
  %2957 = getelementptr i8, ptr %2956, i64 64
  %2958 = load ptr, ptr %2957, align 8
  %2959 = call ptr %2958({ ptr, ptr, ptr, i32 } %2951, ptr nonnull %0)
  %2960 = call i32 %2959({ ptr, ptr, ptr, i32 } %2951, { ptr, ptr, ptr, i32 } %2951, ptr nonnull %0)
  %2961 = icmp eq i32 %2960, %2903
  %2962 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %2963 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %2964 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i1030.i)
  %2965 = getelementptr i8, ptr %2956, i64 48
  %2966 = load ptr, ptr %2965, align 8
  %2967 = call ptr %2966({ ptr, ptr, ptr, i32 } %2951, ptr nonnull %0)
  %2968 = call { ptr, i160 } %2967({ ptr, ptr, ptr, i32 } %2951, { ptr, ptr, ptr, i32 } %2951, ptr nonnull %0)
  %2969 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %2970 = load ptr, ptr %2740, align 8
  %2971 = call i1 %2970({ ptr, i160 } %2968, { ptr, i160 } %2896)
  %2972 = and i1 %2961, %2971
  br i1 %2972, label %HashMap_find_slot_keyK_hashPtri32.exit1051.i, label %2973

2973:                                             ; preds = %2945
  %2974 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %2975 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %2976 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i1030.i)
  %2977 = getelementptr i8, ptr %2956, i64 56
  %2978 = load ptr, ptr %2977, align 8
  %2979 = call ptr %2978({ ptr, ptr, ptr, i32 } %2951, ptr nonnull %0)
  %2980 = call { ptr, i160 } %2979({ ptr, ptr, ptr, i32 } %2951, { ptr, ptr, ptr, i32 } %2951, ptr nonnull %0)
  %.fca.0.extract15.i1047.i = extractvalue { ptr, i160 } %2980, 0
  %2981 = getelementptr i8, ptr %.fca.0.extract15.i1047.i, i64 8
  %2982 = getelementptr i8, ptr %.fca.0.extract15.i1047.i, i64 16
  %2983 = getelementptr i8, ptr %.fca.0.extract15.i1047.i, i64 24
  %2984 = getelementptr i8, ptr %.fca.0.extract15.i1047.i, i64 32
  %2985 = load i64, ptr %2981, align 4
  %2986 = load i64, ptr %2982, align 4
  %2987 = load ptr, ptr %2983, align 8
  %2988 = load ptr, ptr %2984, align 8
  %result.i.i1048.i = call i1 %2987(i64 %2986, i64 %2985, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %2988) #3
  %2989 = icmp eq i32 %spec.store.select.i10501059.i, -1
  %or.cond.i1049.i = select i1 %result.i.i1048.i, i1 %2989, i1 false
  %spec.store.select.i1050.i = select i1 %or.cond.i1049.i, i32 %.0..0..0..i1016.i, i32 %spec.store.select.i10501059.i
  %2990 = add i32 %.0..0..0..i1016.i, 1
  %2991 = and i32 %2990, %2921
  br label %2924

2992:                                             ; preds = %2924
  %2993 = icmp eq i32 %spec.store.select.i10501059.i, -1
  %.pre1073.i = select i1 %2993, i32 %.0..0..0..i1016.i, i32 %spec.store.select.i10501059.i
  br label %HashMap_find_slot_keyK_hashPtri32.exit1051.i

HashMap_find_slot_keyK_hashPtri32.exit1051.i:     ; preds = %2945, %2992
  %2994 = phi i32 [ %.pre1073.i, %2992 ], [ %.0..0..0..i1016.i, %2945 ]
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %20)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %21)
  %2995 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %2996 = load ptr, ptr %2752, align 8
  %2997 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2996, 0
  %2998 = load ptr, ptr %2753, align 8
  %2999 = insertvalue { ptr, ptr, ptr, i32 } %2997, ptr %2998, 1
  %3000 = load ptr, ptr %2754, align 8
  %3001 = insertvalue { ptr, ptr, ptr, i32 } %2999, ptr %3000, 2
  %3002 = load i32, ptr %2755, align 4
  %3003 = insertvalue { ptr, ptr, ptr, i32 } %3001, i32 %3002, 3
  %hash_coef_ptr.i.i56.i824.i = getelementptr i8, ptr %2996, i64 8
  %tbl_size_ptr.i.i57.i825.i = getelementptr i8, ptr %2996, i64 16
  %offset_tbl_ptr.i.i58.i826.i = getelementptr i8, ptr %2996, i64 40
  %hash_coef.i.i59.i827.i = load i64, ptr %hash_coef_ptr.i.i56.i824.i, align 4
  %tbl_size.i.i60.i828.i = load i64, ptr %tbl_size_ptr.i.i57.i825.i, align 4
  %offset_tbl.i.i61.i829.i = load ptr, ptr %offset_tbl_ptr.i.i58.i826.i, align 8
  %product.i.i.i62.i830.i = mul i64 %hash_coef.i.i59.i827.i, -5261542750394134544
  %shifted.i.i.i63.i831.i = lshr i64 %product.i.i.i62.i830.i, 32
  %xored.i.i.i64.i832.i = xor i64 %shifted.i.i.i63.i831.i, %product.i.i.i62.i830.i
  %hash.i.i.i65.i833.i = and i64 %xored.i.i.i64.i832.i, %tbl_size.i.i60.i828.i
  %offset_ptr.i.i66.i834.i = getelementptr i32, ptr %offset_tbl.i.i61.i829.i, i64 %hash.i.i.i65.i833.i
  %offset.i.i67.i835.i = load i32, ptr %offset_ptr.i.i66.i834.i, align 4
  %eq.i.i836.i = icmp eq i32 %3002, %offset.i.i67.i835.i
  call void @llvm.assume(i1 %eq.i.i836.i) #30
  store ptr @_parameterization_Ptri32, ptr %24, align 8
  %3004 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %24)
  %3005 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2996)
  %3006 = sext i32 %3002 to i64
  %3007 = getelementptr ptr, ptr %2996, i64 %3006
  %3008 = getelementptr i8, ptr %3007, i64 120
  %3009 = load ptr, ptr %3008, align 8
  store ptr @i32_typ, ptr %25, align 8
  %3010 = call ptr %3009({ ptr, ptr, ptr, i32 } %3003, ptr nonnull %25)
  %3011 = call { ptr, i160 } %3010({ ptr, ptr, ptr, i32 } %3003, { ptr, ptr, ptr, i32 } %3003, ptr nonnull %24, i32 %2994)
  %.fca.0.extract2.i837.i = extractvalue { ptr, i160 } %3011, 0
  %3012 = load ptr, ptr %result.i.i424, align 8
  %3013 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %3014 = load ptr, ptr %2734, align 8
  %3015 = load ptr, ptr %3012, align 8
  %3016 = getelementptr i8, ptr %3015, i64 48
  %3017 = load ptr, ptr %3016, align 8
  %3018 = call { i64, i64 } %3017(ptr nonnull %3012)
  %3019 = extractvalue { i64, i64 } %3018, 0
  %3020 = extractvalue { i64, i64 } %3018, 1
  %3021 = call i64 @llvm.umax.i64(i64 %3020, i64 8)
  %3022 = urem i64 16, %3020
  %3023 = icmp eq i64 %3022, 0
  %3024 = sub i64 %3020, %3022
  %3025 = select i1 %3023, i64 0, i64 %3024
  %3026 = add i64 %3025, %3019
  %3027 = add i64 %3026, 16
  %3028 = and i64 %3026, 7
  %3029 = icmp eq i64 %3028, 0
  %3030 = sub nuw nsw i64 40, %3028
  %3031 = select i1 %3029, i64 32, i64 %3030
  %3032 = add i64 %3027, %3031
  %3033 = and i64 %3032, 3
  %3034 = icmp eq i64 %3033, 0
  %3035 = sub nuw nsw i64 8, %3033
  %3036 = select i1 %3034, i64 4, i64 %3035
  %3037 = add i64 %3036, %3032
  %3038 = urem i64 %3037, %3021
  %3039 = icmp eq i64 %3038, 0
  %3040 = sub i64 %3021, %3038
  %3041 = select i1 %3039, i64 0, i64 %3040
  %3042 = add i64 %3037, %3041
  %result.i.i838.i = call noalias ptr @bump_malloc_inner(i64 noundef %3042, ptr nonnull @current_ptr) #29
  store ptr %3012, ptr %result.i.i838.i, align 8
  %3043 = getelementptr i8, ptr %result.i.i838.i, i64 8
  store ptr %3014, ptr %3043, align 8
  %3044 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i.i838.i)
  store ptr @Entry, ptr %26, align 8
  store ptr %result.i.i838.i, ptr %2764, align 8
  store i32 9, ptr %2765, align 8
  %3045 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %26)
  %3046 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Entry, ptr undef, ptr undef, i32 undef }, ptr %result.i.i838.i, 1
  %3047 = insertvalue { ptr, ptr, ptr, i32 } %3046, ptr undef, 2
  %3048 = insertvalue { ptr, ptr, ptr, i32 } %3047, i32 9, 3
  %3049 = load ptr, ptr %result.i.i424, align 8
  %3050 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %3051 = load ptr, ptr %2734, align 8
  store ptr %3049, ptr %27, align 8
  store ptr %3051, ptr %2767, align 8
  store ptr @_parameterization_Ptri32, ptr %2768, align 8
  %3052 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %27)
  %3053 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %3054 = load i64, ptr %2880, align 4
  %3055 = load i64, ptr %2881, align 4
  %3056 = load ptr, ptr %2882, align 8
  %3057 = load ptr, ptr %2883, align 8
  %result.i.i.i839.i = call i1 %3056(i64 %3055, i64 %3054, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr readonly %3057) #3
  %3058 = select i1 %result.i.i.i839.i, i64 10, i64 9
  %gep965.i = getelementptr [14 x ptr], ptr getelementptr inbounds (i8, ptr @Entry, i64 72), i64 0, i64 %3058
  %3059 = load ptr, ptr %gep965.i, align 8
  call void %3059({ ptr, ptr, ptr, i32 } %3048, { ptr, ptr, ptr, i32 } %3048, ptr nonnull %27, { ptr, i160 } %2896, { ptr, i160 } %2879, i32 %2903)
  %3060 = load ptr, ptr %2766, align 8
  %3061 = ptrtoint ptr %result.i.i838.i to i64
  %3062 = ptrtoint ptr %3060 to i64
  %.sroa.2.0.insert.ext.i840.i = zext i64 %3062 to i160
  %.sroa.2.0.insert.shift.i841.i = shl nuw nsw i160 %.sroa.2.0.insert.ext.i840.i, 64
  %.sroa.0.0.insert.ext.i843.i = zext i64 %3061 to i160
  %.sroa.2.0.insert.insert.i842.i = or disjoint i160 %.sroa.2.0.insert.shift.i841.i, %.sroa.0.0.insert.ext.i843.i
  %.sroa.0.0.insert.insert.i844.i = or disjoint i160 %.sroa.2.0.insert.insert.i842.i, 3062541302288446171170371466885913903104
  %3063 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0.0.insert.insert.i844.i, 1
  %3064 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %3065 = load ptr, ptr %2752, align 8
  %3066 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3065, 0
  %3067 = load ptr, ptr %2753, align 8
  %3068 = insertvalue { ptr, ptr, ptr, i32 } %3066, ptr %3067, 1
  %3069 = load ptr, ptr %2754, align 8
  %3070 = insertvalue { ptr, ptr, ptr, i32 } %3068, ptr %3069, 2
  %3071 = load i32, ptr %2755, align 4
  %3072 = insertvalue { ptr, ptr, ptr, i32 } %3070, i32 %3071, 3
  %hash_coef_ptr.i.i84.i845.i = getelementptr i8, ptr %3065, i64 8
  %tbl_size_ptr.i.i85.i846.i = getelementptr i8, ptr %3065, i64 16
  %offset_tbl_ptr.i.i86.i847.i = getelementptr i8, ptr %3065, i64 40
  %hash_coef.i.i87.i848.i = load i64, ptr %hash_coef_ptr.i.i84.i845.i, align 4
  %tbl_size.i.i88.i849.i = load i64, ptr %tbl_size_ptr.i.i85.i846.i, align 4
  %offset_tbl.i.i89.i850.i = load ptr, ptr %offset_tbl_ptr.i.i86.i847.i, align 8
  %product.i.i.i90.i851.i = mul i64 %hash_coef.i.i87.i848.i, -5261542750394134544
  %shifted.i.i.i91.i852.i = lshr i64 %product.i.i.i90.i851.i, 32
  %xored.i.i.i92.i853.i = xor i64 %shifted.i.i.i91.i852.i, %product.i.i.i90.i851.i
  %hash.i.i.i93.i854.i = and i64 %xored.i.i.i92.i853.i, %tbl_size.i.i88.i849.i
  %offset_ptr.i.i94.i855.i = getelementptr i32, ptr %offset_tbl.i.i89.i850.i, i64 %hash.i.i.i93.i854.i
  %offset.i.i95.i856.i = load i32, ptr %offset_ptr.i.i94.i855.i, align 4
  %eq.i98.i857.i = icmp eq i32 %3071, %offset.i.i95.i856.i
  call void @llvm.assume(i1 %eq.i98.i857.i) #30
  %3073 = load ptr, ptr %result.i.i424, align 8
  %3074 = load ptr, ptr %2734, align 8
  %result.i99.i858.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3075 = getelementptr i8, ptr %result.i99.i858.i, i64 16
  store ptr %3074, ptr %3075, align 8
  %3076 = getelementptr i8, ptr %result.i99.i858.i, i64 8
  store ptr %3073, ptr %3076, align 8
  %3077 = getelementptr i8, ptr %result.i99.i858.i, i64 24
  store ptr null, ptr %3077, align 8
  %3078 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i99.i858.i)
  store ptr @Entry, ptr %result.i99.i858.i, align 8
  store ptr @_parameterization_Ptri32, ptr %28, align 8
  store ptr %result.i99.i858.i, ptr %2769, align 8
  %3079 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %28)
  %3080 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3065)
  %3081 = sext i32 %3071 to i64
  %3082 = getelementptr ptr, ptr %3065, i64 %3081
  %3083 = getelementptr i8, ptr %3082, i64 128
  %3084 = load ptr, ptr %3083, align 8
  store ptr @i32_typ, ptr %29, align 8
  store ptr @Entry, ptr %2770, align 8
  %3085 = call ptr %3084({ ptr, ptr, ptr, i32 } %3072, ptr nonnull %29)
  call void %3085({ ptr, ptr, ptr, i32 } %3072, { ptr, ptr, ptr, i32 } %3072, ptr nonnull %28, i32 %2994, { ptr, i160 } %3063)
  %3086 = icmp eq ptr %.fca.0.extract2.i837.i, @nil_typ
  %3087 = icmp eq ptr %.fca.0.extract2.i837.i, null
  %3088 = or i1 %3086, %3087
  br i1 %3088, label %._crit_edge.thread.i880.i, label %._crit_edge.i859.i

._crit_edge.thread.i880.i:                        ; preds = %HashMap_find_slot_keyK_hashPtri32.exit1051.i
  %3089 = load i32, ptr %2763, align 4
  %3090 = add i32 %3089, 1
  store i32 %3090, ptr %2763, align 4
  br label %._crit_edge1.sink.split.i878.i

._crit_edge.i859.i:                               ; preds = %HashMap_find_slot_keyK_hashPtri32.exit1051.i
  %.fca.1.extract4.i860.i = extractvalue { ptr, i160 } %3011, 1
  %.sroa.3192.8.extract.trunc.i861.i = trunc i160 %.fca.1.extract4.i860.i to i64
  %3091 = inttoptr i64 %.sroa.3192.8.extract.trunc.i861.i to ptr
  %.sroa.5193.8.extract.shift.i862.i = lshr i160 %.fca.1.extract4.i860.i, 64
  %.sroa.5193.8.extract.trunc.i863.i = trunc i160 %.sroa.5193.8.extract.shift.i862.i to i64
  %3092 = inttoptr i64 %.sroa.5193.8.extract.trunc.i863.i to ptr
  %hash_coef_ptr.i.i101.i864.i = getelementptr i8, ptr %.fca.0.extract2.i837.i, i64 8
  %tbl_size_ptr.i.i102.i865.i = getelementptr i8, ptr %.fca.0.extract2.i837.i, i64 16
  %offset_tbl_ptr.i.i103.i866.i = getelementptr i8, ptr %.fca.0.extract2.i837.i, i64 40
  %hash_coef.i.i104.i867.i = load i64, ptr %hash_coef_ptr.i.i101.i864.i, align 4
  %tbl_size.i.i105.i868.i = load i64, ptr %tbl_size_ptr.i.i102.i865.i, align 4
  %offset_tbl.i.i106.i869.i = load ptr, ptr %offset_tbl_ptr.i.i103.i866.i, align 8
  %product.i.i.i107.i870.i = mul i64 %hash_coef.i.i104.i867.i, 4015701072841558310
  %shifted.i.i.i108.i871.i = lshr i64 %product.i.i.i107.i870.i, 32
  %xored.i.i.i109.i872.i = xor i64 %shifted.i.i.i108.i871.i, %product.i.i.i107.i870.i
  %hash.i.i.i110.i873.i = and i64 %xored.i.i.i109.i872.i, %tbl_size.i.i105.i868.i
  %offset_ptr.i.i111.i874.i = getelementptr i32, ptr %offset_tbl.i.i106.i869.i, i64 %hash.i.i.i110.i873.i
  %offset.i.i112.i875.i = load i32, ptr %offset_ptr.i.i111.i874.i, align 4
  %3093 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract2.i837.i, 0
  %3094 = insertvalue { ptr, ptr, ptr, i32 } %3093, ptr %3091, 1
  %3095 = insertvalue { ptr, ptr, ptr, i32 } %3094, ptr %3092, 2
  %3096 = insertvalue { ptr, ptr, ptr, i32 } %3095, i32 %offset.i.i112.i875.i, 3
  %3097 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %3098 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %3099 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract2.i837.i)
  %3100 = sext i32 %offset.i.i112.i875.i to i64
  %3101 = getelementptr ptr, ptr %.fca.0.extract2.i837.i, i64 %3100
  %3102 = getelementptr i8, ptr %3101, i64 56
  %3103 = load ptr, ptr %3102, align 8
  %3104 = call ptr %3103({ ptr, ptr, ptr, i32 } %3096, ptr nonnull %0)
  %3105 = call { ptr, i160 } %3104({ ptr, ptr, ptr, i32 } %3096, { ptr, ptr, ptr, i32 } %3096, ptr nonnull %0)
  %.fca.0.extract45.i876.i = extractvalue { ptr, i160 } %3105, 0
  %3106 = getelementptr i8, ptr %.fca.0.extract45.i876.i, i64 8
  %3107 = getelementptr i8, ptr %.fca.0.extract45.i876.i, i64 16
  %3108 = getelementptr i8, ptr %.fca.0.extract45.i876.i, i64 24
  %3109 = getelementptr i8, ptr %.fca.0.extract45.i876.i, i64 32
  %3110 = load i64, ptr %3106, align 4
  %3111 = load i64, ptr %3107, align 4
  %3112 = load ptr, ptr %3108, align 8
  %3113 = load ptr, ptr %3109, align 8
  %result.i114.i877.i = call i1 %3112(i64 %3111, i64 %3110, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %3113) #3
  br i1 %result.i114.i877.i, label %._crit_edge1.sink.split.i878.i, label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit881.i

._crit_edge1.sink.split.i878.i:                   ; preds = %._crit_edge.i859.i, %._crit_edge.thread.i880.i
  %.sink202.i879.i = phi i64 [ 40, %._crit_edge.thread.i880.i ], [ 32, %._crit_edge.i859.i ]
  %3114 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %3115 = getelementptr i8, ptr getelementptr inbounds (i8, ptr @HashMap, i64 72), i64 %.sink202.i879.i
  %3116 = load ptr, ptr %3115, align 8
  %3117 = load ptr, ptr %3116, align 8
  %3118 = call i32 %3117(ptr nonnull %result.i.i424)
  %3119 = add i32 %3118, 1
  %3120 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %3121 = getelementptr i8, ptr %3116, i64 8
  %3122 = load ptr, ptr %3121, align 8
  call void %3122(ptr nonnull %result.i.i424, i32 %3119)
  br label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit881.i

HashMap_insert_internal_keyK_valueV_hashPtri32.exit881.i: ; preds = %._crit_edge1.sink.split.i878.i, %._crit_edge.i859.i
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %24)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %25)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %26)
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %27)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %28)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %29)
  br label %._crit_edge3.i.i611

._crit_edge3.i.i611:                              ; preds = %HashMap_insert_internal_keyK_valueV_hashPtri32.exit881.i, %2888, %2864, %2856
  %3123 = add nuw nsw i32 %.reg2mem31.0.i793.i, 1
  %3124 = load ptr, ptr %gep.i792.i, align 8
  %3125 = call ptr %3124({ ptr, ptr, ptr, i32 } %2829, ptr nonnull %0)
  %3126 = call i32 %3125({ ptr, ptr, ptr, i32 } %2829, { ptr, ptr, ptr, i32 } %2829, ptr nonnull %0)
  %3127 = icmp slt i32 %3123, %3126
  br i1 %3127, label %2856, label %HashMap_resize_new_capacityPtri32.exit.i605

HashMap_resize_new_capacityPtri32.exit.i605:      ; preds = %._crit_edge3.i.i611, %2818
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %37)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %38)
  br label %HashMap_insert_keyK_valueV.exit.i457

HashMap_insert_keyK_valueV.exit.i457:             ; preds = %HashMap_resize_new_capacityPtri32.exit.i605, %._crit_edge.i430
  %3128 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %3129 = load ptr, ptr %2739, align 8
  %3130 = call i32 %3129({ ptr, i160 } %2776)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %32)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %33)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %34)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %35)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %36)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %22)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %23)
  %3131 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %3132 = load ptr, ptr %2752, align 8
  %3133 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3132, 0
  %3134 = load ptr, ptr %2753, align 8
  %3135 = insertvalue { ptr, ptr, ptr, i32 } %3133, ptr %3134, 1
  %3136 = load ptr, ptr %2754, align 8
  %3137 = insertvalue { ptr, ptr, ptr, i32 } %3135, ptr %3136, 2
  %3138 = load i32, ptr %2755, align 4
  %3139 = insertvalue { ptr, ptr, ptr, i32 } %3137, i32 %3138, 3
  %hash_coef_ptr.i.i51.i898.i = getelementptr i8, ptr %3132, i64 8
  %tbl_size_ptr.i.i52.i899.i = getelementptr i8, ptr %3132, i64 16
  %offset_tbl_ptr.i.i53.i900.i = getelementptr i8, ptr %3132, i64 40
  %hash_coef.i.i54.i901.i = load i64, ptr %hash_coef_ptr.i.i51.i898.i, align 4
  %tbl_size.i.i55.i902.i = load i64, ptr %tbl_size_ptr.i.i52.i899.i, align 4
  %offset_tbl.i.i56.i903.i = load ptr, ptr %offset_tbl_ptr.i.i53.i900.i, align 8
  %product.i.i.i57.i904.i = mul i64 %hash_coef.i.i54.i901.i, -5261542750394134544
  %shifted.i.i.i58.i905.i = lshr i64 %product.i.i.i57.i904.i, 32
  %xored.i.i.i59.i906.i = xor i64 %shifted.i.i.i58.i905.i, %product.i.i.i57.i904.i
  %hash.i.i.i60.i907.i = and i64 %xored.i.i.i59.i906.i, %tbl_size.i.i55.i902.i
  %offset_ptr.i.i61.i908.i = getelementptr i32, ptr %offset_tbl.i.i56.i903.i, i64 %hash.i.i.i60.i907.i
  %offset.i.i62.i909.i = load i32, ptr %offset_ptr.i.i61.i908.i, align 4
  %eq.i.i910.i = icmp eq i32 %3138, %offset.i.i62.i909.i
  call void @llvm.assume(i1 %eq.i.i910.i) #30
  %3140 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %3141 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3132)
  %3142 = sext i32 %3138 to i64
  %3143 = getelementptr ptr, ptr %3132, i64 %3142
  %3144 = getelementptr i8, ptr %3143, i64 64
  %3145 = load ptr, ptr %3144, align 8
  %3146 = call ptr %3145({ ptr, ptr, ptr, i32 } %3139, ptr nonnull %0)
  %3147 = call i32 %3146({ ptr, ptr, ptr, i32 } %3139, { ptr, ptr, ptr, i32 } %3139, ptr nonnull %0)
  %3148 = add i32 %3147, -1
  %3149 = and i32 %3148, %3130
  %3150 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  br label %3151

3151:                                             ; preds = %3200, %HashMap_insert_keyK_valueV.exit.i457
  %spec.store.select.i945966.i = phi i32 [ %spec.store.select.i945.i, %3200 ], [ -1, %HashMap_insert_keyK_valueV.exit.i457 ]
  %.0..0..0..i911.i = phi i32 [ %3218, %3200 ], [ %3149, %HashMap_insert_keyK_valueV.exit.i457 ]
  %3152 = load ptr, ptr %2752, align 8
  %3153 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3152, 0
  %3154 = load ptr, ptr %2753, align 8
  %3155 = insertvalue { ptr, ptr, ptr, i32 } %3153, ptr %3154, 1
  %3156 = load ptr, ptr %2754, align 8
  %3157 = insertvalue { ptr, ptr, ptr, i32 } %3155, ptr %3156, 2
  %3158 = load i32, ptr %2755, align 4
  %3159 = insertvalue { ptr, ptr, ptr, i32 } %3157, i32 %3158, 3
  %hash_coef_ptr.i.i65.i912.i = getelementptr i8, ptr %3152, i64 8
  %tbl_size_ptr.i.i66.i913.i = getelementptr i8, ptr %3152, i64 16
  %offset_tbl_ptr.i.i67.i914.i = getelementptr i8, ptr %3152, i64 40
  %hash_coef.i.i68.i915.i = load i64, ptr %hash_coef_ptr.i.i65.i912.i, align 4
  %tbl_size.i.i69.i916.i = load i64, ptr %tbl_size_ptr.i.i66.i913.i, align 4
  %offset_tbl.i.i70.i917.i = load ptr, ptr %offset_tbl_ptr.i.i67.i914.i, align 8
  %product.i.i.i71.i918.i = mul i64 %hash_coef.i.i68.i915.i, -5261542750394134544
  %shifted.i.i.i72.i919.i = lshr i64 %product.i.i.i71.i918.i, 32
  %xored.i.i.i73.i920.i = xor i64 %shifted.i.i.i72.i919.i, %product.i.i.i71.i918.i
  %hash.i.i.i74.i921.i = and i64 %xored.i.i.i73.i920.i, %tbl_size.i.i69.i916.i
  %offset_ptr.i.i75.i922.i = getelementptr i32, ptr %offset_tbl.i.i70.i917.i, i64 %hash.i.i.i74.i921.i
  %offset.i.i76.i923.i = load i32, ptr %offset_ptr.i.i75.i922.i, align 4
  %eq.i79.i924.i = icmp eq i32 %3158, %offset.i.i76.i923.i
  call void @llvm.assume(i1 %eq.i79.i924.i) #30
  %3160 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  store ptr @_parameterization_Ptri32, ptr %22, align 8
  %3161 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %22)
  %3162 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3152)
  %3163 = sext i32 %3158 to i64
  %3164 = getelementptr ptr, ptr %3152, i64 %3163
  %3165 = getelementptr i8, ptr %3164, i64 120
  %3166 = load ptr, ptr %3165, align 8
  store ptr @i32_typ, ptr %23, align 8
  %3167 = call ptr %3166({ ptr, ptr, ptr, i32 } %3159, ptr nonnull %23)
  %3168 = call { ptr, i160 } %3167({ ptr, ptr, ptr, i32 } %3159, { ptr, ptr, ptr, i32 } %3159, ptr nonnull %22, i32 %.0..0..0..i911.i)
  %.fca.0.extract36.i925.i = extractvalue { ptr, i160 } %3168, 0
  %3169 = icmp eq ptr %.fca.0.extract36.i925.i, @nil_typ
  %3170 = icmp eq ptr %.fca.0.extract36.i925.i, null
  %3171 = or i1 %3169, %3170
  br i1 %3171, label %3219, label %3172

3172:                                             ; preds = %3151
  %.fca.1.extract38.i926.i = extractvalue { ptr, i160 } %3168, 1
  %.sroa.5.8.extract.shift.i927.i = lshr i160 %.fca.1.extract38.i926.i, 64
  %.sroa.5.8.extract.trunc.i928.i = trunc i160 %.sroa.5.8.extract.shift.i927.i to i64
  %.sroa.2.8.extract.trunc165.i929.i = trunc i160 %.fca.1.extract38.i926.i to i64
  %3173 = inttoptr i64 %.sroa.2.8.extract.trunc165.i929.i to ptr
  %3174 = inttoptr i64 %.sroa.5.8.extract.trunc.i928.i to ptr
  %hash_coef_ptr.i.i81.i930.i = getelementptr i8, ptr %.fca.0.extract36.i925.i, i64 8
  %tbl_size_ptr.i.i82.i931.i = getelementptr i8, ptr %.fca.0.extract36.i925.i, i64 16
  %offset_tbl_ptr.i.i83.i932.i = getelementptr i8, ptr %.fca.0.extract36.i925.i, i64 40
  %hash_coef.i.i84.i933.i = load i64, ptr %hash_coef_ptr.i.i81.i930.i, align 4
  %tbl_size.i.i85.i934.i = load i64, ptr %tbl_size_ptr.i.i82.i931.i, align 4
  %offset_tbl.i.i86.i935.i = load ptr, ptr %offset_tbl_ptr.i.i83.i932.i, align 8
  %product.i.i.i87.i936.i = mul i64 %hash_coef.i.i84.i933.i, 4015701072841558310
  %shifted.i.i.i88.i937.i = lshr i64 %product.i.i.i87.i936.i, 32
  %xored.i.i.i89.i938.i = xor i64 %shifted.i.i.i88.i937.i, %product.i.i.i87.i936.i
  %hash.i.i.i90.i939.i = and i64 %xored.i.i.i89.i938.i, %tbl_size.i.i85.i934.i
  %offset_ptr.i.i91.i940.i = getelementptr i32, ptr %offset_tbl.i.i86.i935.i, i64 %hash.i.i.i90.i939.i
  %offset.i.i92.i941.i = load i32, ptr %offset_ptr.i.i91.i940.i, align 4
  %3175 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract36.i925.i, 0
  %3176 = insertvalue { ptr, ptr, ptr, i32 } %3175, ptr %3173, 1
  %3177 = insertvalue { ptr, ptr, ptr, i32 } %3176, ptr %3174, 2
  %3178 = insertvalue { ptr, ptr, ptr, i32 } %3177, i32 %offset.i.i92.i941.i, 3
  %3179 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %3180 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %3181 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i925.i)
  %3182 = sext i32 %offset.i.i92.i941.i to i64
  %3183 = getelementptr ptr, ptr %.fca.0.extract36.i925.i, i64 %3182
  %3184 = getelementptr i8, ptr %3183, i64 64
  %3185 = load ptr, ptr %3184, align 8
  %3186 = call ptr %3185({ ptr, ptr, ptr, i32 } %3178, ptr nonnull %0)
  %3187 = call i32 %3186({ ptr, ptr, ptr, i32 } %3178, { ptr, ptr, ptr, i32 } %3178, ptr nonnull %0)
  %3188 = icmp eq i32 %3187, %3130
  %3189 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %3190 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %3191 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i925.i)
  %3192 = getelementptr i8, ptr %3183, i64 48
  %3193 = load ptr, ptr %3192, align 8
  %3194 = call ptr %3193({ ptr, ptr, ptr, i32 } %3178, ptr nonnull %0)
  %3195 = call { ptr, i160 } %3194({ ptr, ptr, ptr, i32 } %3178, { ptr, ptr, ptr, i32 } %3178, ptr nonnull %0)
  %3196 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %3197 = load ptr, ptr %2740, align 8
  %3198 = call i1 %3197({ ptr, i160 } %3195, { ptr, i160 } %2776)
  %3199 = and i1 %3188, %3198
  br i1 %3199, label %HashMap_find_slot_keyK_hashPtri32.exit946.i, label %3200

3200:                                             ; preds = %3172
  %3201 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %3202 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %3203 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i925.i)
  %3204 = getelementptr i8, ptr %3183, i64 56
  %3205 = load ptr, ptr %3204, align 8
  %3206 = call ptr %3205({ ptr, ptr, ptr, i32 } %3178, ptr nonnull %0)
  %3207 = call { ptr, i160 } %3206({ ptr, ptr, ptr, i32 } %3178, { ptr, ptr, ptr, i32 } %3178, ptr nonnull %0)
  %.fca.0.extract15.i.i458 = extractvalue { ptr, i160 } %3207, 0
  %3208 = getelementptr i8, ptr %.fca.0.extract15.i.i458, i64 8
  %3209 = getelementptr i8, ptr %.fca.0.extract15.i.i458, i64 16
  %3210 = getelementptr i8, ptr %.fca.0.extract15.i.i458, i64 24
  %3211 = getelementptr i8, ptr %.fca.0.extract15.i.i458, i64 32
  %3212 = load i64, ptr %3208, align 4
  %3213 = load i64, ptr %3209, align 4
  %3214 = load ptr, ptr %3210, align 8
  %3215 = load ptr, ptr %3211, align 8
  %result.i.i943.i = call i1 %3214(i64 %3213, i64 %3212, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %3215) #3
  %3216 = icmp eq i32 %spec.store.select.i945966.i, -1
  %or.cond.i944.i = select i1 %result.i.i943.i, i1 %3216, i1 false
  %spec.store.select.i945.i = select i1 %or.cond.i944.i, i32 %.0..0..0..i911.i, i32 %spec.store.select.i945966.i
  %3217 = add i32 %.0..0..0..i911.i, 1
  %3218 = and i32 %3217, %3148
  br label %3151

3219:                                             ; preds = %3151
  %3220 = icmp eq i32 %spec.store.select.i945966.i, -1
  %.pre977.i = select i1 %3220, i32 %.0..0..0..i911.i, i32 %spec.store.select.i945966.i
  br label %HashMap_find_slot_keyK_hashPtri32.exit946.i

HashMap_find_slot_keyK_hashPtri32.exit946.i:      ; preds = %3172, %3219
  %3221 = phi i32 [ %.pre977.i, %3219 ], [ %.0..0..0..i911.i, %3172 ]
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %22)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %23)
  %3222 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %3223 = load ptr, ptr %2752, align 8
  %3224 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3223, 0
  %3225 = load ptr, ptr %2753, align 8
  %3226 = insertvalue { ptr, ptr, ptr, i32 } %3224, ptr %3225, 1
  %3227 = load ptr, ptr %2754, align 8
  %3228 = insertvalue { ptr, ptr, ptr, i32 } %3226, ptr %3227, 2
  %3229 = load i32, ptr %2755, align 4
  %3230 = insertvalue { ptr, ptr, ptr, i32 } %3228, i32 %3229, 3
  %hash_coef_ptr.i.i56.i652.i = getelementptr i8, ptr %3223, i64 8
  %tbl_size_ptr.i.i57.i653.i = getelementptr i8, ptr %3223, i64 16
  %offset_tbl_ptr.i.i58.i654.i = getelementptr i8, ptr %3223, i64 40
  %hash_coef.i.i59.i655.i = load i64, ptr %hash_coef_ptr.i.i56.i652.i, align 4
  %tbl_size.i.i60.i656.i = load i64, ptr %tbl_size_ptr.i.i57.i653.i, align 4
  %offset_tbl.i.i61.i657.i = load ptr, ptr %offset_tbl_ptr.i.i58.i654.i, align 8
  %product.i.i.i62.i658.i = mul i64 %hash_coef.i.i59.i655.i, -5261542750394134544
  %shifted.i.i.i63.i659.i = lshr i64 %product.i.i.i62.i658.i, 32
  %xored.i.i.i64.i660.i = xor i64 %shifted.i.i.i63.i659.i, %product.i.i.i62.i658.i
  %hash.i.i.i65.i661.i = and i64 %xored.i.i.i64.i660.i, %tbl_size.i.i60.i656.i
  %offset_ptr.i.i66.i662.i = getelementptr i32, ptr %offset_tbl.i.i61.i657.i, i64 %hash.i.i.i65.i661.i
  %offset.i.i67.i663.i = load i32, ptr %offset_ptr.i.i66.i662.i, align 4
  %eq.i.i664.i = icmp eq i32 %3229, %offset.i.i67.i663.i
  call void @llvm.assume(i1 %eq.i.i664.i) #30
  store ptr @_parameterization_Ptri32, ptr %32, align 8
  %3231 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %32)
  %3232 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3223)
  %3233 = sext i32 %3229 to i64
  %3234 = getelementptr ptr, ptr %3223, i64 %3233
  %3235 = getelementptr i8, ptr %3234, i64 120
  %3236 = load ptr, ptr %3235, align 8
  store ptr @i32_typ, ptr %33, align 8
  %3237 = call ptr %3236({ ptr, ptr, ptr, i32 } %3230, ptr nonnull %33)
  %3238 = call { ptr, i160 } %3237({ ptr, ptr, ptr, i32 } %3230, { ptr, ptr, ptr, i32 } %3230, ptr nonnull %32, i32 %3221)
  %.fca.0.extract2.i.i459 = extractvalue { ptr, i160 } %3238, 0
  %3239 = load ptr, ptr %result.i.i424, align 8
  %3240 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %3241 = load ptr, ptr %2734, align 8
  %3242 = load ptr, ptr %3239, align 8
  %3243 = getelementptr i8, ptr %3242, i64 48
  %3244 = load ptr, ptr %3243, align 8
  %3245 = call { i64, i64 } %3244(ptr nonnull %3239)
  %3246 = extractvalue { i64, i64 } %3245, 0
  %3247 = extractvalue { i64, i64 } %3245, 1
  %3248 = call i64 @llvm.umax.i64(i64 %3247, i64 8)
  %3249 = urem i64 16, %3247
  %3250 = icmp eq i64 %3249, 0
  %3251 = sub i64 %3247, %3249
  %3252 = select i1 %3250, i64 0, i64 %3251
  %3253 = add i64 %3252, %3246
  %3254 = add i64 %3253, 16
  %3255 = and i64 %3253, 7
  %3256 = icmp eq i64 %3255, 0
  %3257 = sub nuw nsw i64 40, %3255
  %3258 = select i1 %3256, i64 32, i64 %3257
  %3259 = add i64 %3254, %3258
  %3260 = and i64 %3259, 3
  %3261 = icmp eq i64 %3260, 0
  %3262 = sub nuw nsw i64 8, %3260
  %3263 = select i1 %3261, i64 4, i64 %3262
  %3264 = add i64 %3263, %3259
  %3265 = urem i64 %3264, %3248
  %3266 = icmp eq i64 %3265, 0
  %3267 = sub i64 %3248, %3265
  %3268 = select i1 %3266, i64 0, i64 %3267
  %3269 = add i64 %3264, %3268
  %result.i.i665.i = call noalias ptr @bump_malloc_inner(i64 noundef %3269, ptr nonnull @current_ptr) #29
  store ptr %3239, ptr %result.i.i665.i, align 8
  %3270 = getelementptr i8, ptr %result.i.i665.i, i64 8
  store ptr %3241, ptr %3270, align 8
  %3271 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i.i665.i)
  store ptr @Entry, ptr %34, align 8
  store ptr %result.i.i665.i, ptr %2758, align 8
  store i32 9, ptr %2759, align 8
  %3272 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %34)
  %3273 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %3274 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %3275 = load ptr, ptr %3239, align 8
  %3276 = getelementptr i8, ptr %3275, i64 48
  %3277 = load ptr, ptr %3276, align 8
  %3278 = call { i64, i64 } %3277(ptr nonnull %3239)
  %3279 = extractvalue { i64, i64 } %3278, 1
  %3280 = urem i64 16, %3279
  %3281 = icmp eq i64 %3280, 0
  %reass.sub1544 = sub i64 %3279, %3280
  %3282 = add i64 %reass.sub1544, 16
  %3283 = select i1 %3281, i64 16, i64 %3282
  %3284 = getelementptr i8, ptr %result.i.i665.i, i64 %3283
  %3285 = load ptr, ptr %result.i.i665.i, align 8
  %3286 = load ptr, ptr %3285, align 8
  %3287 = getelementptr i8, ptr %3286, i64 64
  %3288 = load ptr, ptr %3287, align 8
  call void %3288({ ptr, i160 } %2776, ptr nonnull %3285, ptr %3284)
  %3289 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %3290 = load ptr, ptr %result.i.i665.i, align 8
  %3291 = load ptr, ptr %3290, align 8
  %3292 = getelementptr i8, ptr %3291, i64 48
  %3293 = load ptr, ptr %3292, align 8
  %3294 = call { i64, i64 } %3293(ptr nonnull %3290)
  %3295 = extractvalue { i64, i64 } %3294, 0
  %3296 = extractvalue { i64, i64 } %3294, 1
  %3297 = urem i64 16, %3296
  %3298 = icmp eq i64 %3297, 0
  %3299 = sub i64 %3296, %3297
  %3300 = select i1 %3298, i64 0, i64 %3299
  %3301 = add i64 %3300, %3295
  %3302 = and i64 %3301, 7
  %3303 = icmp eq i64 %3302, 0
  %3304 = sub nuw nsw i64 8, %3302
  %3305 = select i1 %3303, i64 0, i64 %3304
  %3306 = getelementptr i8, ptr %result.i.i665.i, i64 %3301
  %3307 = getelementptr i8, ptr %3306, i64 16
  %3308 = getelementptr i8, ptr %3307, i64 %3305
  store ptr @i32_typ, ptr %3308, align 8
  %3309 = getelementptr i8, ptr %3308, i64 8
  store i160 %.sroa.042.0.insert.ext.i, ptr %3309, align 4
  %3310 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %3311 = load ptr, ptr %result.i.i665.i, align 8
  %3312 = load ptr, ptr %3311, align 8
  %3313 = getelementptr i8, ptr %3312, i64 48
  %3314 = load ptr, ptr %3313, align 8
  %3315 = call { i64, i64 } %3314(ptr nonnull %3311)
  %3316 = extractvalue { i64, i64 } %3315, 0
  %3317 = extractvalue { i64, i64 } %3315, 1
  %3318 = urem i64 16, %3317
  %3319 = icmp eq i64 %3318, 0
  %3320 = sub i64 %3317, %3318
  %3321 = select i1 %3319, i64 0, i64 %3320
  %3322 = add i64 %3321, %3316
  %3323 = add i64 %3322, 16
  %3324 = and i64 %3322, 7
  %3325 = icmp eq i64 %3324, 0
  %3326 = sub nuw nsw i64 40, %3324
  %3327 = select i1 %3325, i64 32, i64 %3326
  %3328 = add i64 %3323, %3327
  %3329 = and i64 %3328, 3
  %3330 = icmp eq i64 %3329, 0
  %3331 = sub nuw nsw i64 4, %3329
  %3332 = select i1 %3330, i64 0, i64 %3331
  %3333 = getelementptr i8, ptr %result.i.i665.i, i64 %3328
  %3334 = getelementptr i8, ptr %3333, i64 %3332
  store i32 %3130, ptr %3334, align 4
  %3335 = load ptr, ptr %2760, align 8
  %3336 = ptrtoint ptr %result.i.i665.i to i64
  %3337 = ptrtoint ptr %3335 to i64
  %.sroa.2.0.insert.ext.i.i461 = zext i64 %3337 to i160
  %.sroa.2.0.insert.shift.i.i462 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i.i461, 64
  %.sroa.0.0.insert.ext.i.i463 = zext i64 %3336 to i160
  %.sroa.2.0.insert.insert.i.i464 = or disjoint i160 %.sroa.2.0.insert.shift.i.i462, %.sroa.0.0.insert.ext.i.i463
  %.sroa.0.0.insert.insert.i.i465 = or disjoint i160 %.sroa.2.0.insert.insert.i.i464, 3062541302288446171170371466885913903104
  %3338 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0.0.insert.insert.i.i465, 1
  %3339 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %3340 = load ptr, ptr %2752, align 8
  %3341 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3340, 0
  %3342 = load ptr, ptr %2753, align 8
  %3343 = insertvalue { ptr, ptr, ptr, i32 } %3341, ptr %3342, 1
  %3344 = load ptr, ptr %2754, align 8
  %3345 = insertvalue { ptr, ptr, ptr, i32 } %3343, ptr %3344, 2
  %3346 = load i32, ptr %2755, align 4
  %3347 = insertvalue { ptr, ptr, ptr, i32 } %3345, i32 %3346, 3
  %hash_coef_ptr.i.i84.i.i466 = getelementptr i8, ptr %3340, i64 8
  %tbl_size_ptr.i.i85.i.i467 = getelementptr i8, ptr %3340, i64 16
  %offset_tbl_ptr.i.i86.i.i468 = getelementptr i8, ptr %3340, i64 40
  %hash_coef.i.i87.i.i469 = load i64, ptr %hash_coef_ptr.i.i84.i.i466, align 4
  %tbl_size.i.i88.i.i470 = load i64, ptr %tbl_size_ptr.i.i85.i.i467, align 4
  %offset_tbl.i.i89.i.i471 = load ptr, ptr %offset_tbl_ptr.i.i86.i.i468, align 8
  %product.i.i.i90.i.i472 = mul i64 %hash_coef.i.i87.i.i469, -5261542750394134544
  %shifted.i.i.i91.i.i473 = lshr i64 %product.i.i.i90.i.i472, 32
  %xored.i.i.i92.i.i474 = xor i64 %shifted.i.i.i91.i.i473, %product.i.i.i90.i.i472
  %hash.i.i.i93.i.i475 = and i64 %xored.i.i.i92.i.i474, %tbl_size.i.i88.i.i470
  %offset_ptr.i.i94.i.i476 = getelementptr i32, ptr %offset_tbl.i.i89.i.i471, i64 %hash.i.i.i93.i.i475
  %offset.i.i95.i.i477 = load i32, ptr %offset_ptr.i.i94.i.i476, align 4
  %eq.i98.i.i478 = icmp eq i32 %3346, %offset.i.i95.i.i477
  call void @llvm.assume(i1 %eq.i98.i.i478) #30
  %3348 = load ptr, ptr %result.i.i424, align 8
  %3349 = load ptr, ptr %2734, align 8
  %result.i99.i.i479 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3350 = getelementptr i8, ptr %result.i99.i.i479, i64 16
  store ptr %3349, ptr %3350, align 8
  %3351 = getelementptr i8, ptr %result.i99.i.i479, i64 8
  store ptr %3348, ptr %3351, align 8
  %3352 = getelementptr i8, ptr %result.i99.i.i479, i64 24
  store ptr null, ptr %3352, align 8
  %3353 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i99.i.i479)
  store ptr @Entry, ptr %result.i99.i.i479, align 8
  store ptr @_parameterization_Ptri32, ptr %35, align 8
  store ptr %result.i99.i.i479, ptr %2761, align 8
  %3354 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %35)
  %3355 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3340)
  %3356 = sext i32 %3346 to i64
  %3357 = getelementptr ptr, ptr %3340, i64 %3356
  %3358 = getelementptr i8, ptr %3357, i64 128
  %3359 = load ptr, ptr %3358, align 8
  store ptr @i32_typ, ptr %36, align 8
  store ptr @Entry, ptr %2762, align 8
  %3360 = call ptr %3359({ ptr, ptr, ptr, i32 } %3347, ptr nonnull %36)
  call void %3360({ ptr, ptr, ptr, i32 } %3347, { ptr, ptr, ptr, i32 } %3347, ptr nonnull %35, i32 %3221, { ptr, i160 } %3338)
  %3361 = icmp eq ptr %.fca.0.extract2.i.i459, @nil_typ
  %3362 = icmp eq ptr %.fca.0.extract2.i.i459, null
  %3363 = or i1 %3361, %3362
  br i1 %3363, label %._crit_edge.thread.i.i589, label %._crit_edge.i.i480

._crit_edge.thread.i.i589:                        ; preds = %HashMap_find_slot_keyK_hashPtri32.exit946.i
  %3364 = load i32, ptr %2763, align 4
  %3365 = add i32 %3364, 1
  store i32 %3365, ptr %2763, align 4
  br label %._crit_edge1.sink.split.i.i587

._crit_edge.i.i480:                               ; preds = %HashMap_find_slot_keyK_hashPtri32.exit946.i
  %.fca.1.extract4.i.i481 = extractvalue { ptr, i160 } %3238, 1
  %.sroa.3192.8.extract.trunc.i.i482 = trunc i160 %.fca.1.extract4.i.i481 to i64
  %3366 = inttoptr i64 %.sroa.3192.8.extract.trunc.i.i482 to ptr
  %.sroa.5193.8.extract.shift.i.i483 = lshr i160 %.fca.1.extract4.i.i481, 64
  %.sroa.5193.8.extract.trunc.i.i484 = trunc i160 %.sroa.5193.8.extract.shift.i.i483 to i64
  %3367 = inttoptr i64 %.sroa.5193.8.extract.trunc.i.i484 to ptr
  %hash_coef_ptr.i.i101.i.i485 = getelementptr i8, ptr %.fca.0.extract2.i.i459, i64 8
  %tbl_size_ptr.i.i102.i.i486 = getelementptr i8, ptr %.fca.0.extract2.i.i459, i64 16
  %offset_tbl_ptr.i.i103.i.i487 = getelementptr i8, ptr %.fca.0.extract2.i.i459, i64 40
  %hash_coef.i.i104.i.i488 = load i64, ptr %hash_coef_ptr.i.i101.i.i485, align 4
  %tbl_size.i.i105.i.i489 = load i64, ptr %tbl_size_ptr.i.i102.i.i486, align 4
  %offset_tbl.i.i106.i.i490 = load ptr, ptr %offset_tbl_ptr.i.i103.i.i487, align 8
  %product.i.i.i107.i.i491 = mul i64 %hash_coef.i.i104.i.i488, 4015701072841558310
  %shifted.i.i.i108.i.i492 = lshr i64 %product.i.i.i107.i.i491, 32
  %xored.i.i.i109.i.i493 = xor i64 %shifted.i.i.i108.i.i492, %product.i.i.i107.i.i491
  %hash.i.i.i110.i.i494 = and i64 %xored.i.i.i109.i.i493, %tbl_size.i.i105.i.i489
  %offset_ptr.i.i111.i.i495 = getelementptr i32, ptr %offset_tbl.i.i106.i.i490, i64 %hash.i.i.i110.i.i494
  %offset.i.i112.i.i496 = load i32, ptr %offset_ptr.i.i111.i.i495, align 4
  %3368 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract2.i.i459, 0
  %3369 = insertvalue { ptr, ptr, ptr, i32 } %3368, ptr %3366, 1
  %3370 = insertvalue { ptr, ptr, ptr, i32 } %3369, ptr %3367, 2
  %3371 = insertvalue { ptr, ptr, ptr, i32 } %3370, i32 %offset.i.i112.i.i496, 3
  %3372 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %3373 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %3374 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract2.i.i459)
  %3375 = sext i32 %offset.i.i112.i.i496 to i64
  %3376 = getelementptr ptr, ptr %.fca.0.extract2.i.i459, i64 %3375
  %3377 = getelementptr i8, ptr %3376, i64 56
  %3378 = load ptr, ptr %3377, align 8
  %3379 = call ptr %3378({ ptr, ptr, ptr, i32 } %3371, ptr nonnull %0)
  %3380 = call { ptr, i160 } %3379({ ptr, ptr, ptr, i32 } %3371, { ptr, ptr, ptr, i32 } %3371, ptr nonnull %0)
  %.fca.0.extract45.i.i497 = extractvalue { ptr, i160 } %3380, 0
  %3381 = getelementptr i8, ptr %.fca.0.extract45.i.i497, i64 8
  %3382 = getelementptr i8, ptr %.fca.0.extract45.i.i497, i64 16
  %3383 = getelementptr i8, ptr %.fca.0.extract45.i.i497, i64 24
  %3384 = getelementptr i8, ptr %.fca.0.extract45.i.i497, i64 32
  %3385 = load i64, ptr %3381, align 4
  %3386 = load i64, ptr %3382, align 4
  %3387 = load ptr, ptr %3383, align 8
  %3388 = load ptr, ptr %3384, align 8
  %result.i114.i.i498 = call i1 %3387(i64 %3386, i64 %3385, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %3388) #3
  br i1 %result.i114.i.i498, label %._crit_edge1.sink.split.i.i587, label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit.i499

._crit_edge1.sink.split.i.i587:                   ; preds = %._crit_edge.i.i480, %._crit_edge.thread.i.i589
  %.sink202.i.i588 = phi i64 [ 40, %._crit_edge.thread.i.i589 ], [ 32, %._crit_edge.i.i480 ]
  %3389 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %3390 = getelementptr i8, ptr getelementptr inbounds (i8, ptr @HashMap, i64 72), i64 %.sink202.i.i588
  %3391 = load ptr, ptr %3390, align 8
  %3392 = load ptr, ptr %3391, align 8
  %3393 = call i32 %3392(ptr nonnull %result.i.i424)
  %3394 = add i32 %3393, 1
  %3395 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %3396 = getelementptr i8, ptr %3391, i64 8
  %3397 = load ptr, ptr %3396, align 8
  call void %3397(ptr nonnull %result.i.i424, i32 %3394)
  br label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit.i499

HashMap_insert_internal_keyK_valueV_hashPtri32.exit.i499: ; preds = %._crit_edge1.sink.split.i.i587, %._crit_edge.i.i480
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %32)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %33)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %34)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %35)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %36)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  %3398 = add nuw nsw i32 %.reg2mem91.0269.i, 1
  %3399 = icmp ult i32 %.reg2mem91.0269.i, 999999
  br i1 %3399, label %._crit_edge.i430, label %._crit_edge1.preheader.i

._crit_edge1.preheader.i:                         ; preds = %HashMap_insert_internal_keyK_valueV_hashPtri32.exit.i499
  %3400 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %result.i.i307.i = call noalias dereferenceable_or_null(32000000) ptr @bump_malloc_inner(i64 noundef 32000000, ptr nonnull @current_ptr) #29
  %3401 = call ptr @llvm.invariant.start.p0(i64 40, ptr nonnull @PRNG)
  %3402 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  br label %._crit_edge1.i500

._crit_edge1.i500:                                ; preds = %._crit_edge1.i500, %._crit_edge1.preheader.i
  %3403 = phi i32 [ %3406, %._crit_edge1.i500 ], [ 987, %._crit_edge1.preheader.i ]
  %.reg2mem87.0271.i = phi i32 [ %3411, %._crit_edge1.i500 ], [ 0, %._crit_edge1.preheader.i ]
  %3404 = mul i32 %3403, 1103515245
  %3405 = add i32 %3404, 12345
  %3406 = and i32 %3405, 2147483647
  %.sroa.039.0.insert.ext.i = zext nneg i32 %3406 to i160
  %3407 = zext nneg i32 %.reg2mem87.0271.i to i64
  %3408 = shl nuw nsw i64 %3407, 5
  %3409 = getelementptr i8, ptr %result.i.i307.i, i64 %3408
  store ptr @i32_typ, ptr %3409, align 8
  %3410 = getelementptr i8, ptr %3409, i64 8
  store i160 %.sroa.039.0.insert.ext.i, ptr %3410, align 4
  %3411 = add nuw nsw i32 %.reg2mem87.0271.i, 1
  %3412 = icmp ult i32 %.reg2mem87.0271.i, 999999
  br i1 %3412, label %._crit_edge1.i500, label %._crit_edge1._crit_edge.i

._crit_edge1._crit_edge.i:                        ; preds = %._crit_edge1.i500
  %3413 = call i64 @clock()
  %3414 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %invariant.gep.i501 = getelementptr i8, ptr %result.i.i307.i, i64 8
  br label %.lr.ph278.i

.lr.ph278.i:                                      ; preds = %HashMap_get_keyK.exit.i560, %._crit_edge1._crit_edge.i
  %.reg2mem83.0276.i = phi i32 [ %.reg2mem77.0.i, %HashMap_get_keyK.exit.i560 ], [ 0, %._crit_edge1._crit_edge.i ]
  %.reg2mem81.0275.i = phi i32 [ %.reg2mem75.0.i, %HashMap_get_keyK.exit.i560 ], [ 0, %._crit_edge1._crit_edge.i ]
  %.reg2mem79.0274.i = phi i32 [ %3562, %HashMap_get_keyK.exit.i560 ], [ 0, %._crit_edge1._crit_edge.i ]
  %3415 = zext nneg i32 %.reg2mem79.0274.i to i64
  %3416 = shl nuw nsw i64 %3415, 5
  %gep.i502 = getelementptr i8, ptr %invariant.gep.i501, i64 %3416
  %3417 = load i160, ptr %gep.i502, align 4
  %.sroa.033.0.insert.ext.i = and i160 %3417, 4294967295
  %3418 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.033.0.insert.ext.i, 1
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %39)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %40)
  %3419 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %3420 = load ptr, ptr %2739, align 8
  %3421 = call i32 %3420({ ptr, i160 } %3418)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %30)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %31)
  %3422 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %3423 = load ptr, ptr %2752, align 8
  %3424 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3423, 0
  %3425 = load ptr, ptr %2753, align 8
  %3426 = insertvalue { ptr, ptr, ptr, i32 } %3424, ptr %3425, 1
  %3427 = load ptr, ptr %2754, align 8
  %3428 = insertvalue { ptr, ptr, ptr, i32 } %3426, ptr %3427, 2
  %3429 = load i32, ptr %2755, align 4
  %3430 = insertvalue { ptr, ptr, ptr, i32 } %3428, i32 %3429, 3
  %hash_coef_ptr.i.i51.i.i503 = getelementptr i8, ptr %3423, i64 8
  %tbl_size_ptr.i.i52.i.i504 = getelementptr i8, ptr %3423, i64 16
  %offset_tbl_ptr.i.i53.i.i505 = getelementptr i8, ptr %3423, i64 40
  %hash_coef.i.i54.i.i506 = load i64, ptr %hash_coef_ptr.i.i51.i.i503, align 4
  %tbl_size.i.i55.i.i507 = load i64, ptr %tbl_size_ptr.i.i52.i.i504, align 4
  %offset_tbl.i.i56.i.i508 = load ptr, ptr %offset_tbl_ptr.i.i53.i.i505, align 8
  %product.i.i.i57.i.i509 = mul i64 %hash_coef.i.i54.i.i506, -5261542750394134544
  %shifted.i.i.i58.i.i510 = lshr i64 %product.i.i.i57.i.i509, 32
  %xored.i.i.i59.i.i511 = xor i64 %shifted.i.i.i58.i.i510, %product.i.i.i57.i.i509
  %hash.i.i.i60.i.i512 = and i64 %xored.i.i.i59.i.i511, %tbl_size.i.i55.i.i507
  %offset_ptr.i.i61.i.i513 = getelementptr i32, ptr %offset_tbl.i.i56.i.i508, i64 %hash.i.i.i60.i.i512
  %offset.i.i62.i.i514 = load i32, ptr %offset_ptr.i.i61.i.i513, align 4
  %eq.i.i687.i = icmp eq i32 %3429, %offset.i.i62.i.i514
  call void @llvm.assume(i1 %eq.i.i687.i) #30
  %3431 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %3432 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3423)
  %3433 = sext i32 %3429 to i64
  %3434 = getelementptr ptr, ptr %3423, i64 %3433
  %3435 = getelementptr i8, ptr %3434, i64 64
  %3436 = load ptr, ptr %3435, align 8
  %3437 = call ptr %3436({ ptr, ptr, ptr, i32 } %3430, ptr nonnull %0)
  %3438 = call i32 %3437({ ptr, ptr, ptr, i32 } %3430, { ptr, ptr, ptr, i32 } %3430, ptr nonnull %0)
  %3439 = add i32 %3438, -1
  %3440 = and i32 %3439, %3421
  %3441 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  br label %3442

3442:                                             ; preds = %3491, %.lr.ph278.i
  %spec.store.select.i796.i = phi i32 [ %spec.store.select.i.i545, %3491 ], [ -1, %.lr.ph278.i ]
  %.0..0..0..i.i515 = phi i32 [ %3509, %3491 ], [ %3440, %.lr.ph278.i ]
  %3443 = load ptr, ptr %2752, align 8
  %3444 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3443, 0
  %3445 = load ptr, ptr %2753, align 8
  %3446 = insertvalue { ptr, ptr, ptr, i32 } %3444, ptr %3445, 1
  %3447 = load ptr, ptr %2754, align 8
  %3448 = insertvalue { ptr, ptr, ptr, i32 } %3446, ptr %3447, 2
  %3449 = load i32, ptr %2755, align 4
  %3450 = insertvalue { ptr, ptr, ptr, i32 } %3448, i32 %3449, 3
  %hash_coef_ptr.i.i65.i.i516 = getelementptr i8, ptr %3443, i64 8
  %tbl_size_ptr.i.i66.i.i517 = getelementptr i8, ptr %3443, i64 16
  %offset_tbl_ptr.i.i67.i.i518 = getelementptr i8, ptr %3443, i64 40
  %hash_coef.i.i68.i.i519 = load i64, ptr %hash_coef_ptr.i.i65.i.i516, align 4
  %tbl_size.i.i69.i.i520 = load i64, ptr %tbl_size_ptr.i.i66.i.i517, align 4
  %offset_tbl.i.i70.i.i521 = load ptr, ptr %offset_tbl_ptr.i.i67.i.i518, align 8
  %product.i.i.i71.i.i522 = mul i64 %hash_coef.i.i68.i.i519, -5261542750394134544
  %shifted.i.i.i72.i.i523 = lshr i64 %product.i.i.i71.i.i522, 32
  %xored.i.i.i73.i.i524 = xor i64 %shifted.i.i.i72.i.i523, %product.i.i.i71.i.i522
  %hash.i.i.i74.i.i525 = and i64 %xored.i.i.i73.i.i524, %tbl_size.i.i69.i.i520
  %offset_ptr.i.i75.i.i526 = getelementptr i32, ptr %offset_tbl.i.i70.i.i521, i64 %hash.i.i.i74.i.i525
  %offset.i.i76.i.i527 = load i32, ptr %offset_ptr.i.i75.i.i526, align 4
  %eq.i79.i.i528 = icmp eq i32 %3449, %offset.i.i76.i.i527
  call void @llvm.assume(i1 %eq.i79.i.i528) #30
  %3451 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  store ptr @_parameterization_Ptri32, ptr %30, align 8
  %3452 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %30)
  %3453 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3443)
  %3454 = sext i32 %3449 to i64
  %3455 = getelementptr ptr, ptr %3443, i64 %3454
  %3456 = getelementptr i8, ptr %3455, i64 120
  %3457 = load ptr, ptr %3456, align 8
  store ptr @i32_typ, ptr %31, align 8
  %3458 = call ptr %3457({ ptr, ptr, ptr, i32 } %3450, ptr nonnull %31)
  %3459 = call { ptr, i160 } %3458({ ptr, ptr, ptr, i32 } %3450, { ptr, ptr, ptr, i32 } %3450, ptr nonnull %30, i32 %.0..0..0..i.i515)
  %.fca.0.extract36.i.i529 = extractvalue { ptr, i160 } %3459, 0
  %3460 = icmp eq ptr %.fca.0.extract36.i.i529, @nil_typ
  %3461 = icmp eq ptr %.fca.0.extract36.i.i529, null
  %3462 = or i1 %3460, %3461
  br i1 %3462, label %3510, label %3463

3463:                                             ; preds = %3442
  %.fca.1.extract38.i.i530 = extractvalue { ptr, i160 } %3459, 1
  %.sroa.5.8.extract.shift.i688.i = lshr i160 %.fca.1.extract38.i.i530, 64
  %.sroa.5.8.extract.trunc.i689.i = trunc i160 %.sroa.5.8.extract.shift.i688.i to i64
  %.sroa.2.8.extract.trunc165.i.i531 = trunc i160 %.fca.1.extract38.i.i530 to i64
  %3464 = inttoptr i64 %.sroa.2.8.extract.trunc165.i.i531 to ptr
  %3465 = inttoptr i64 %.sroa.5.8.extract.trunc.i689.i to ptr
  %hash_coef_ptr.i.i81.i.i532 = getelementptr i8, ptr %.fca.0.extract36.i.i529, i64 8
  %tbl_size_ptr.i.i82.i.i533 = getelementptr i8, ptr %.fca.0.extract36.i.i529, i64 16
  %offset_tbl_ptr.i.i83.i.i534 = getelementptr i8, ptr %.fca.0.extract36.i.i529, i64 40
  %hash_coef.i.i84.i.i535 = load i64, ptr %hash_coef_ptr.i.i81.i.i532, align 4
  %tbl_size.i.i85.i.i536 = load i64, ptr %tbl_size_ptr.i.i82.i.i533, align 4
  %offset_tbl.i.i86.i.i537 = load ptr, ptr %offset_tbl_ptr.i.i83.i.i534, align 8
  %product.i.i.i87.i.i538 = mul i64 %hash_coef.i.i84.i.i535, 4015701072841558310
  %shifted.i.i.i88.i.i539 = lshr i64 %product.i.i.i87.i.i538, 32
  %xored.i.i.i89.i.i540 = xor i64 %shifted.i.i.i88.i.i539, %product.i.i.i87.i.i538
  %hash.i.i.i90.i.i541 = and i64 %xored.i.i.i89.i.i540, %tbl_size.i.i85.i.i536
  %offset_ptr.i.i91.i.i542 = getelementptr i32, ptr %offset_tbl.i.i86.i.i537, i64 %hash.i.i.i90.i.i541
  %offset.i.i92.i.i543 = load i32, ptr %offset_ptr.i.i91.i.i542, align 4
  %3466 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract36.i.i529, 0
  %3467 = insertvalue { ptr, ptr, ptr, i32 } %3466, ptr %3464, 1
  %3468 = insertvalue { ptr, ptr, ptr, i32 } %3467, ptr %3465, 2
  %3469 = insertvalue { ptr, ptr, ptr, i32 } %3468, i32 %offset.i.i92.i.i543, 3
  %3470 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %3471 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %3472 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i.i529)
  %3473 = sext i32 %offset.i.i92.i.i543 to i64
  %3474 = getelementptr ptr, ptr %.fca.0.extract36.i.i529, i64 %3473
  %3475 = getelementptr i8, ptr %3474, i64 64
  %3476 = load ptr, ptr %3475, align 8
  %3477 = call ptr %3476({ ptr, ptr, ptr, i32 } %3469, ptr nonnull %0)
  %3478 = call i32 %3477({ ptr, ptr, ptr, i32 } %3469, { ptr, ptr, ptr, i32 } %3469, ptr nonnull %0)
  %3479 = icmp eq i32 %3478, %3421
  %3480 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %3481 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %3482 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i.i529)
  %3483 = getelementptr i8, ptr %3474, i64 48
  %3484 = load ptr, ptr %3483, align 8
  %3485 = call ptr %3484({ ptr, ptr, ptr, i32 } %3469, ptr nonnull %0)
  %3486 = call { ptr, i160 } %3485({ ptr, ptr, ptr, i32 } %3469, { ptr, ptr, ptr, i32 } %3469, ptr nonnull %0)
  %3487 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %3488 = load ptr, ptr %2740, align 8
  %3489 = call i1 %3488({ ptr, i160 } %3486, { ptr, i160 } %3418)
  %3490 = and i1 %3479, %3489
  br i1 %3490, label %HashMap_find_slot_keyK_hashPtri32.exit.i546, label %3491

3491:                                             ; preds = %3463
  %3492 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %3493 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %3494 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i.i529)
  %3495 = getelementptr i8, ptr %3474, i64 56
  %3496 = load ptr, ptr %3495, align 8
  %3497 = call ptr %3496({ ptr, ptr, ptr, i32 } %3469, ptr nonnull %0)
  %3498 = call { ptr, i160 } %3497({ ptr, ptr, ptr, i32 } %3469, { ptr, ptr, ptr, i32 } %3469, ptr nonnull %0)
  %.fca.0.extract15.i691.i = extractvalue { ptr, i160 } %3498, 0
  %3499 = getelementptr i8, ptr %.fca.0.extract15.i691.i, i64 8
  %3500 = getelementptr i8, ptr %.fca.0.extract15.i691.i, i64 16
  %3501 = getelementptr i8, ptr %.fca.0.extract15.i691.i, i64 24
  %3502 = getelementptr i8, ptr %.fca.0.extract15.i691.i, i64 32
  %3503 = load i64, ptr %3499, align 4
  %3504 = load i64, ptr %3500, align 4
  %3505 = load ptr, ptr %3501, align 8
  %3506 = load ptr, ptr %3502, align 8
  %result.i.i692.i = call i1 %3505(i64 %3504, i64 %3503, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %3506) #3
  %3507 = icmp eq i32 %spec.store.select.i796.i, -1
  %or.cond.i.i544 = select i1 %result.i.i692.i, i1 %3507, i1 false
  %spec.store.select.i.i545 = select i1 %or.cond.i.i544, i32 %.0..0..0..i.i515, i32 %spec.store.select.i796.i
  %3508 = add i32 %.0..0..0..i.i515, 1
  %3509 = and i32 %3508, %3439
  br label %3442

3510:                                             ; preds = %3442
  %3511 = icmp eq i32 %spec.store.select.i796.i, -1
  %.pre.i586 = select i1 %3511, i32 %.0..0..0..i.i515, i32 %spec.store.select.i796.i
  br label %HashMap_find_slot_keyK_hashPtri32.exit.i546

HashMap_find_slot_keyK_hashPtri32.exit.i546:      ; preds = %3463, %3510
  %3512 = phi i32 [ %.pre.i586, %3510 ], [ %.0..0..0..i.i515, %3463 ]
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %30)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %31)
  %3513 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %3514 = load ptr, ptr %2752, align 8
  %3515 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3514, 0
  %3516 = load ptr, ptr %2753, align 8
  %3517 = insertvalue { ptr, ptr, ptr, i32 } %3515, ptr %3516, 1
  %3518 = load ptr, ptr %2754, align 8
  %3519 = insertvalue { ptr, ptr, ptr, i32 } %3517, ptr %3518, 2
  %3520 = load i32, ptr %2755, align 4
  %3521 = insertvalue { ptr, ptr, ptr, i32 } %3519, i32 %3520, 3
  %hash_coef_ptr.i.i58.i.i547 = getelementptr i8, ptr %3514, i64 8
  %tbl_size_ptr.i.i59.i.i548 = getelementptr i8, ptr %3514, i64 16
  %offset_tbl_ptr.i.i60.i.i549 = getelementptr i8, ptr %3514, i64 40
  %hash_coef.i.i61.i.i550 = load i64, ptr %hash_coef_ptr.i.i58.i.i547, align 4
  %tbl_size.i.i62.i.i551 = load i64, ptr %tbl_size_ptr.i.i59.i.i548, align 4
  %offset_tbl.i.i63.i.i552 = load ptr, ptr %offset_tbl_ptr.i.i60.i.i549, align 8
  %product.i.i.i64.i.i553 = mul i64 %hash_coef.i.i61.i.i550, -5261542750394134544
  %shifted.i.i.i65.i.i554 = lshr i64 %product.i.i.i64.i.i553, 32
  %xored.i.i.i66.i.i555 = xor i64 %shifted.i.i.i65.i.i554, %product.i.i.i64.i.i553
  %hash.i.i.i67.i.i556 = and i64 %xored.i.i.i66.i.i555, %tbl_size.i.i62.i.i551
  %offset_ptr.i.i68.i.i557 = getelementptr i32, ptr %offset_tbl.i.i63.i.i552, i64 %hash.i.i.i67.i.i556
  %offset.i.i69.i.i558 = load i32, ptr %offset_ptr.i.i68.i.i557, align 4
  %eq.i.i511.i = icmp eq i32 %3520, %offset.i.i69.i.i558
  call void @llvm.assume(i1 %eq.i.i511.i) #30
  store ptr @_parameterization_Ptri32, ptr %39, align 8
  %3522 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %39)
  %3523 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3514)
  %3524 = sext i32 %3520 to i64
  %3525 = getelementptr ptr, ptr %3514, i64 %3524
  %3526 = getelementptr i8, ptr %3525, i64 120
  %3527 = load ptr, ptr %3526, align 8
  store ptr @i32_typ, ptr %40, align 8
  %3528 = call ptr %3527({ ptr, ptr, ptr, i32 } %3521, ptr nonnull %40)
  %3529 = call { ptr, i160 } %3528({ ptr, ptr, ptr, i32 } %3521, { ptr, ptr, ptr, i32 } %3521, ptr nonnull %39, i32 %3512)
  %.fca.0.extract.i512.i = extractvalue { ptr, i160 } %3529, 0
  %3530 = icmp ne ptr %.fca.0.extract.i512.i, @nil_typ
  %3531 = icmp ne ptr %.fca.0.extract.i512.i, null
  %.not56.i.i559 = and i1 %3530, %3531
  br i1 %.not56.i.i559, label %3532, label %HashMap_get_keyK.exit.i560

3532:                                             ; preds = %HashMap_find_slot_keyK_hashPtri32.exit.i546
  %.fca.1.extract.i513.i = extractvalue { ptr, i160 } %3529, 1
  %.sroa.3.8.extract.trunc.i.i567 = trunc i160 %.fca.1.extract.i513.i to i64
  %3533 = inttoptr i64 %.sroa.3.8.extract.trunc.i.i567 to ptr
  %.sroa.5.8.extract.shift.i.i568 = lshr i160 %.fca.1.extract.i513.i, 64
  %.sroa.5.8.extract.trunc.i.i569 = trunc i160 %.sroa.5.8.extract.shift.i.i568 to i64
  %3534 = inttoptr i64 %.sroa.5.8.extract.trunc.i.i569 to ptr
  %hash_coef_ptr.i.i72.i.i570 = getelementptr i8, ptr %.fca.0.extract.i512.i, i64 8
  %tbl_size_ptr.i.i73.i.i571 = getelementptr i8, ptr %.fca.0.extract.i512.i, i64 16
  %offset_tbl_ptr.i.i74.i.i572 = getelementptr i8, ptr %.fca.0.extract.i512.i, i64 40
  %hash_coef.i.i75.i.i573 = load i64, ptr %hash_coef_ptr.i.i72.i.i570, align 4
  %tbl_size.i.i76.i.i574 = load i64, ptr %tbl_size_ptr.i.i73.i.i571, align 4
  %offset_tbl.i.i77.i.i575 = load ptr, ptr %offset_tbl_ptr.i.i74.i.i572, align 8
  %product.i.i.i78.i.i576 = mul i64 %hash_coef.i.i75.i.i573, 4015701072841558310
  %shifted.i.i.i79.i.i577 = lshr i64 %product.i.i.i78.i.i576, 32
  %xored.i.i.i80.i.i578 = xor i64 %shifted.i.i.i79.i.i577, %product.i.i.i78.i.i576
  %hash.i.i.i81.i.i579 = and i64 %xored.i.i.i80.i.i578, %tbl_size.i.i76.i.i574
  %offset_ptr.i.i82.i.i580 = getelementptr i32, ptr %offset_tbl.i.i77.i.i575, i64 %hash.i.i.i81.i.i579
  %offset.i.i83.i.i581 = load i32, ptr %offset_ptr.i.i82.i.i580, align 4
  %3535 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract.i512.i, 0
  %3536 = insertvalue { ptr, ptr, ptr, i32 } %3535, ptr %3533, 1
  %3537 = insertvalue { ptr, ptr, ptr, i32 } %3536, ptr %3534, 2
  %3538 = insertvalue { ptr, ptr, ptr, i32 } %3537, i32 %offset.i.i83.i.i581, 3
  %3539 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %3540 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %3541 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract.i512.i)
  %3542 = sext i32 %offset.i.i83.i.i581 to i64
  %3543 = getelementptr ptr, ptr %.fca.0.extract.i512.i, i64 %3542
  %3544 = getelementptr i8, ptr %3543, i64 56
  %3545 = load ptr, ptr %3544, align 8
  %3546 = call ptr %3545({ ptr, ptr, ptr, i32 } %3538, ptr nonnull %0)
  %3547 = call { ptr, i160 } %3546({ ptr, ptr, ptr, i32 } %3538, { ptr, ptr, ptr, i32 } %3538, ptr nonnull %0)
  %.fca.0.extract47.i.i582 = extractvalue { ptr, i160 } %3547, 0
  %3548 = getelementptr i8, ptr %.fca.0.extract47.i.i582, i64 8
  %3549 = getelementptr i8, ptr %.fca.0.extract47.i.i582, i64 16
  %3550 = getelementptr i8, ptr %.fca.0.extract47.i.i582, i64 24
  %3551 = getelementptr i8, ptr %.fca.0.extract47.i.i582, i64 32
  %3552 = load i64, ptr %3548, align 4
  %3553 = load i64, ptr %3549, align 4
  %3554 = load ptr, ptr %3550, align 8
  %3555 = load ptr, ptr %3551, align 8
  %result.i.i514.i = call i1 %3554(i64 %3553, i64 %3552, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %3555) #3
  br i1 %result.i.i514.i, label %HashMap_get_keyK.exit.i560, label %3556

3556:                                             ; preds = %3532
  %result.i85.i.i583 = call i1 %3554(i64 %3553, i64 %3552, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr readonly %3555) #3
  %cond.fr.i.i584 = freeze i1 %result.i85.i.i583
  %spec.select.i.i585 = select i1 %cond.fr.i.i584, ptr %.fca.0.extract47.i.i582, ptr @nil_typ
  br label %HashMap_get_keyK.exit.i560

HashMap_get_keyK.exit.i560:                       ; preds = %3556, %3532, %HashMap_find_slot_keyK_hashPtri32.exit.i546
  %3557 = phi ptr [ @nil_typ, %HashMap_find_slot_keyK_hashPtri32.exit.i546 ], [ @nil_typ, %3532 ], [ %spec.select.i.i585, %3556 ]
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %39)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %40)
  %3558 = icmp ne ptr %3557, @nil_typ
  %3559 = icmp ne ptr %3557, null
  %.not268.i = and i1 %3558, %3559
  %3560 = zext i1 %.not268.i to i32
  %.reg2mem75.0.i = add i32 %.reg2mem81.0275.i, %3560
  %not..not268.i = xor i1 %.not268.i, true
  %3561 = zext i1 %not..not268.i to i32
  %.reg2mem77.0.i = add i32 %.reg2mem83.0276.i, %3561
  %3562 = add nuw nsw i32 %.reg2mem79.0274.i, 1
  %3563 = icmp ult i32 %.reg2mem79.0274.i, 999999
  br i1 %3563, label %.lr.ph278.i, label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit.i561

IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit.i561: ; preds = %HashMap_get_keyK.exit.i560
  %3564 = call i64 @clock()
  %3565 = mul i32 %.reg2mem75.0.i, 100
  %3566 = icmp slt i32 %3565, 5000000
  %result.i98.i = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  store <15 x i8> <i8 71, i8 101, i8 116, i8 32, i8 82, i8 97, i8 110, i8 100, i8 111, i8 109, i8 32, i8 77, i8 105, i8 115, i8 115>, ptr %result.i98.i, align 16
  %result.i99.i = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %3567 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %result.i99.i, 1
  %3568 = insertvalue { ptr, ptr, ptr, i32 } %3567, ptr undef, 2
  %3569 = insertvalue { ptr, ptr, ptr, i32 } %3568, i32 9, 3
  store ptr %result.i98.i, ptr %result.i99.i, align 8
  %3570 = getelementptr i8, ptr %result.i99.i, i64 8
  store i32 15, ptr %3570, align 4
  %3571 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %3572 = getelementptr i8, ptr %result.i99.i, i64 12
  store i32 16, ptr %3572, align 4
  %3573 = sub i64 %3564, %3413
  call void @print_benchmark_result({ ptr, ptr, ptr, i32 } %3569, i32 1000000, i64 %3573)
  %result.i100.i = call noalias dereferenceable_or_null(19) ptr @bump_malloc_inner(i64 noundef 19, ptr nonnull @current_ptr) #29
  store <18 x i8> <i8 32, i8 32, i8 32, i8 32, i8 86, i8 101, i8 114, i8 105, i8 102, i8 105, i8 99, i8 97, i8 116, i8 105, i8 111, i8 110, i8 58, i8 32>, ptr %result.i100.i, align 32
  %result.i101.i = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %3574 = getelementptr inbounds i8, ptr %41, i64 8
  %3575 = getelementptr inbounds i8, ptr %41, i64 24
  store ptr @String, ptr %41, align 8
  store ptr %result.i101.i, ptr %3574, align 8
  store i32 9, ptr %3575, align 8
  %3576 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %41)
  store ptr %result.i100.i, ptr %result.i101.i, align 8
  %3577 = getelementptr i8, ptr %result.i101.i, i64 8
  store i32 18, ptr %3577, align 4
  %3578 = getelementptr i8, ptr %result.i101.i, i64 12
  store i32 19, ptr %3578, align 4
  %3579 = load i160, ptr %3574, align 8
  %3580 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  %.sroa.3.8.extract.trunc.i519.i = trunc i160 %3579 to i64
  %3581 = inttoptr i64 %.sroa.3.8.extract.trunc.i519.i to ptr
  %3582 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %3583 = getelementptr i8, ptr %3581, i64 8
  %3584 = load i32, ptr %3583, align 4
  %3585 = add i32 %3584, 1
  %3586 = sext i32 %3585 to i64
  %result.i.i707.i = call noalias ptr @bump_malloc_inner(i64 noundef %3586, ptr nonnull @current_ptr) #29
  %3587 = load i32, ptr %3583, align 4
  %3588 = icmp sgt i32 %3587, 0
  br i1 %3588, label %.lr.ph.i.i566, label %String_c_string_.exit.i562

.lr.ph.i.i566:                                    ; preds = %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit.i561
  %3589 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %3590 = load ptr, ptr %3581, align 8
  %3591 = zext nneg i32 %3587 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i707.i, ptr align 1 %3590, i64 %3591, i1 false)
  br label %String_c_string_.exit.i562

String_c_string_.exit.i562:                       ; preds = %.lr.ph.i.i566, %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit.i561
  %3592 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %3593 = sext i32 %3587 to i64
  %3594 = getelementptr i8, ptr %result.i.i707.i, i64 %3593
  store i8 0, ptr %3594, align 1
  %puts.i.i563 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i707.i)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  %result.i102.i = call noalias dereferenceable_or_null(5) ptr @bump_malloc_inner(i64 noundef 5, ptr nonnull @current_ptr) #29
  %..i564 = select i1 %3566, <4 x i8> <i8 80, i8 65, i8 83, i8 83>, <4 x i8> <i8 70, i8 65, i8 73, i8 76>
  %.411.i = select i1 %3566, ptr %42, ptr %43
  store <4 x i8> %..i564, ptr %result.i102.i, align 4
  %result.i103.i565 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %.411.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.i.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v = select i1 %3566, ptr %42, ptr %43
  %.411.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.i.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel = getelementptr inbounds i8, ptr %.411.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.i.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v, i64 8
  %.411.sroa.sel620.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.i.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v = select i1 %3566, ptr %42, ptr %43
  %.411.sroa.sel620.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.i.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel = getelementptr inbounds i8, ptr %.411.sroa.sel620.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.i.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v, i64 24
  store ptr @String, ptr %.411.i, align 8
  store ptr %result.i103.i565, ptr %.411.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.i.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  store i32 9, ptr %.411.sroa.sel620.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.i.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  %3595 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %.411.i)
  store ptr %result.i102.i, ptr %result.i103.i565, align 8
  %3596 = getelementptr i8, ptr %result.i103.i565, i64 8
  store i32 4, ptr %3596, align 4
  %3597 = getelementptr i8, ptr %result.i103.i565, i64 12
  store i32 5, ptr %3597, align 4
  %3598 = load i160, ptr %.411.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.i.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  %3599 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  %.sroa.3.8.extract.trunc.i538.i = trunc i160 %3598 to i64
  %3600 = inttoptr i64 %.sroa.3.8.extract.trunc.i538.i to ptr
  %3601 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %3602 = getelementptr i8, ptr %3600, i64 8
  %3603 = load i32, ptr %3602, align 4
  %3604 = add i32 %3603, 1
  %3605 = sext i32 %3604 to i64
  %result.i.i723.i = call noalias ptr @bump_malloc_inner(i64 noundef %3605, ptr nonnull @current_ptr) #29
  %3606 = load i32, ptr %3602, align 4
  %3607 = icmp sgt i32 %3606, 0
  br i1 %3607, label %.lr.ph.i724.i, label %String_c_string_.exit728.i

.lr.ph.i724.i:                                    ; preds = %String_c_string_.exit.i562
  %3608 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %3609 = load ptr, ptr %3600, align 8
  %3610 = zext nneg i32 %3606 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i723.i, ptr align 1 %3609, i64 %3610, i1 false)
  br label %String_c_string_.exit728.i

String_c_string_.exit728.i:                       ; preds = %.lr.ph.i724.i, %String_c_string_.exit.i562
  %3611 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %3612 = sext i32 %3606 to i64
  %3613 = getelementptr i8, ptr %result.i.i723.i, i64 %3612
  store i8 0, ptr %3613, align 1
  %puts.i554.i = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i723.i)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  %result.i142.i = call noalias dereferenceable_or_null(14) ptr @bump_malloc_inner(i64 noundef 14, ptr nonnull @current_ptr) #29
  store <13 x i8> <i8 32, i8 32, i8 32, i8 32, i8 40, i8 77, i8 105, i8 115, i8 115, i8 101, i8 115, i8 58, i8 32>, ptr %result.i142.i, align 16
  %result.i143.i = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %3614 = getelementptr inbounds i8, ptr %44, i64 8
  %3615 = getelementptr inbounds i8, ptr %44, i64 24
  store ptr @String, ptr %44, align 8
  store ptr %result.i143.i, ptr %3614, align 8
  store i32 9, ptr %3615, align 8
  %3616 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %44)
  store ptr %result.i142.i, ptr %result.i143.i, align 8
  %3617 = getelementptr i8, ptr %result.i143.i, i64 8
  store i32 13, ptr %3617, align 4
  %3618 = getelementptr i8, ptr %result.i143.i, i64 12
  store i32 14, ptr %3618, align 4
  %3619 = load i160, ptr %3614, align 8
  %3620 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  %.sroa.3.8.extract.trunc.i558.i = trunc i160 %3619 to i64
  %3621 = inttoptr i64 %.sroa.3.8.extract.trunc.i558.i to ptr
  %3622 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %3623 = getelementptr i8, ptr %3621, i64 8
  %3624 = load i32, ptr %3623, align 4
  %3625 = add i32 %3624, 1
  %3626 = sext i32 %3625 to i64
  %result.i.i743.i = call noalias ptr @bump_malloc_inner(i64 noundef %3626, ptr nonnull @current_ptr) #29
  %3627 = load i32, ptr %3623, align 4
  %3628 = icmp sgt i32 %3627, 0
  br i1 %3628, label %.lr.ph.i744.i, label %String_c_string_.exit748.i

.lr.ph.i744.i:                                    ; preds = %String_c_string_.exit728.i
  %3629 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %3630 = load ptr, ptr %3621, align 8
  %3631 = zext nneg i32 %3627 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i743.i, ptr align 1 %3630, i64 %3631, i1 false)
  br label %String_c_string_.exit748.i

String_c_string_.exit748.i:                       ; preds = %.lr.ph.i744.i, %String_c_string_.exit728.i
  %3632 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %3633 = sext i32 %3627 to i64
  %3634 = getelementptr i8, ptr %result.i.i743.i, i64 %3633
  store i8 0, ptr %3634, align 1
  %puts.i574.i = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i743.i)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  %3635 = call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i32_string, i32 %.reg2mem77.0.i)
  %result.i180.i = call noalias dereferenceable_or_null(9) ptr @bump_malloc_inner(i64 noundef 9, ptr nonnull @current_ptr) #29
  store <8 x i8> <i8 44, i8 32, i8 72, i8 105, i8 116, i8 115, i8 58, i8 32>, ptr %result.i180.i, align 8
  %result.i181.i = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %3636 = getelementptr inbounds i8, ptr %45, i64 8
  %3637 = getelementptr inbounds i8, ptr %45, i64 24
  store ptr @String, ptr %45, align 8
  store ptr %result.i181.i, ptr %3636, align 8
  store i32 9, ptr %3637, align 8
  %3638 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %45)
  store ptr %result.i180.i, ptr %result.i181.i, align 8
  %3639 = getelementptr i8, ptr %result.i181.i, i64 8
  store i32 8, ptr %3639, align 4
  %3640 = getelementptr i8, ptr %result.i181.i, i64 12
  store i32 9, ptr %3640, align 4
  %3641 = load i160, ptr %3636, align 8
  %3642 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  %.sroa.3.8.extract.trunc.i579.i = trunc i160 %3641 to i64
  %3643 = inttoptr i64 %.sroa.3.8.extract.trunc.i579.i to ptr
  %3644 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %3645 = getelementptr i8, ptr %3643, i64 8
  %3646 = load i32, ptr %3645, align 4
  %3647 = add i32 %3646, 1
  %3648 = sext i32 %3647 to i64
  %result.i.i763.i = call noalias ptr @bump_malloc_inner(i64 noundef %3648, ptr nonnull @current_ptr) #29
  %3649 = load i32, ptr %3645, align 4
  %3650 = icmp sgt i32 %3649, 0
  br i1 %3650, label %.lr.ph.i764.i, label %String_c_string_.exit768.i

.lr.ph.i764.i:                                    ; preds = %String_c_string_.exit748.i
  %3651 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %3652 = load ptr, ptr %3643, align 8
  %3653 = zext nneg i32 %3649 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i763.i, ptr align 1 %3652, i64 %3653, i1 false)
  br label %String_c_string_.exit768.i

String_c_string_.exit768.i:                       ; preds = %.lr.ph.i764.i, %String_c_string_.exit748.i
  %3654 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %3655 = sext i32 %3649 to i64
  %3656 = getelementptr i8, ptr %result.i.i763.i, i64 %3655
  store i8 0, ptr %3656, align 1
  %puts.i595.i = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i763.i)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  %3657 = call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i32_string, i32 %.reg2mem75.0.i)
  %result.i218.i = call noalias dereferenceable_or_null(2) ptr @bump_malloc_inner(i64 noundef 2, ptr nonnull @current_ptr) #29
  store <1 x i8> <i8 41>, ptr %result.i218.i, align 1
  %result.i219.i = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %3658 = getelementptr inbounds i8, ptr %46, i64 8
  %3659 = getelementptr inbounds i8, ptr %46, i64 24
  store ptr @String, ptr %46, align 8
  store ptr %result.i219.i, ptr %3658, align 8
  store i32 9, ptr %3659, align 8
  %3660 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %46)
  store ptr %result.i218.i, ptr %result.i219.i, align 8
  %3661 = getelementptr i8, ptr %result.i219.i, i64 8
  store i32 1, ptr %3661, align 4
  %3662 = getelementptr i8, ptr %result.i219.i, i64 12
  store i32 2, ptr %3662, align 4
  %3663 = load i160, ptr %3658, align 8
  %3664 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  %.sroa.3.8.extract.trunc.i600.i = trunc i160 %3663 to i64
  %3665 = inttoptr i64 %.sroa.3.8.extract.trunc.i600.i to ptr
  %3666 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %3667 = getelementptr i8, ptr %3665, i64 8
  %3668 = load i32, ptr %3667, align 4
  %3669 = add i32 %3668, 1
  %3670 = sext i32 %3669 to i64
  %result.i.i783.i = call noalias ptr @bump_malloc_inner(i64 noundef %3670, ptr nonnull @current_ptr) #29
  %3671 = load i32, ptr %3667, align 4
  %3672 = icmp sgt i32 %3671, 0
  br i1 %3672, label %.lr.ph.i784.i, label %benchmark_get_random_miss.exit

.lr.ph.i784.i:                                    ; preds = %String_c_string_.exit768.i
  %3673 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %3674 = load ptr, ptr %3665, align 8
  %3675 = zext nneg i32 %3671 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i783.i, ptr align 1 %3674, i64 %3675, i1 false)
  br label %benchmark_get_random_miss.exit

benchmark_get_random_miss.exit:                   ; preds = %String_c_string_.exit768.i, %.lr.ph.i784.i
  %3676 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %3677 = sext i32 %3671 to i64
  %3678 = getelementptr i8, ptr %result.i.i783.i, i64 %3677
  store i8 0, ptr %3678, align 1
  %puts.i616.i = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i783.i)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %41)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %42)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %43)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %44)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %45)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %46)
  call void @benchmark_remove_random(i32 1000000)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %18)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %19)
  %result.i.i632 = call noalias dereferenceable_or_null(80) ptr @bump_malloc_inner(i64 noundef 80, ptr nonnull @current_ptr) #29
  store ptr @_parameterization_Ptri32, ptr %result.i.i632, align 8
  %3679 = getelementptr i8, ptr %result.i.i632, i64 8
  store ptr @_parameterization_Ptri32, ptr %3679, align 8
  %3680 = getelementptr i8, ptr %result.i.i632, i64 16
  store ptr @_parameterization_PairPtri32._Ptri32, ptr %3680, align 8
  %3681 = call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %result.i.i632)
  %result.i20.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %oldProtect.i.i631)
  %result.i21.i = call i32 @VirtualProtect(ptr %result.i20.i, i64 16, i32 64, ptr nonnull %oldProtect.i.i631) #16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %oldProtect.i.i631)
  call void @llvm.init.trampoline(ptr %result.i20.i, ptr nonnull @qcuomdwgoi, ptr nonnull @i32_hasher)
  %ret.i.i633 = call ptr @llvm.adjust.trampoline(ptr readonly %result.i20.i) #31
  %3682 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i20.i)
  %result.i22.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %oldProtect.i23.i)
  %result.i24.i = call i32 @VirtualProtect(ptr %result.i22.i, i64 16, i32 64, ptr nonnull %oldProtect.i23.i) #16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %oldProtect.i23.i)
  call void @llvm.init.trampoline(ptr %result.i22.i, ptr nonnull @lwmnayxbwz, ptr nonnull @i32_eq)
  %ret.i25.i = call ptr @llvm.adjust.trampoline(ptr readonly %result.i22.i) #31
  %3683 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i22.i)
  %3684 = getelementptr i8, ptr %result.i.i632, i64 64
  store ptr %ret.i.i633, ptr %3684, align 8
  %3685 = getelementptr i8, ptr %result.i.i632, i64 72
  store ptr %ret.i25.i, ptr %3685, align 8
  %result.i.i.i634 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3686 = getelementptr i8, ptr %result.i.i.i634, i64 16
  store ptr @_parameterization_Nil, ptr %3686, align 8
  %result.i4.i.i635 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3687 = getelementptr i8, ptr %result.i4.i.i635, i64 16
  store ptr @_parameterization_Ptri32, ptr %3687, align 8
  %3688 = getelementptr i8, ptr %result.i4.i.i635, i64 8
  store ptr @_parameterization_Ptri32, ptr %3688, align 8
  %3689 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i4.i.i635)
  store ptr @Entry, ptr %result.i4.i.i635, align 8
  %3690 = getelementptr i8, ptr %result.i.i.i634, i64 8
  store ptr %result.i4.i.i635, ptr %3690, align 8
  %3691 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i.i634)
  store ptr @union_typ, ptr %result.i.i.i634, align 8
  %result.i5.i.i636 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i.i634, ptr %result.i5.i.i636, align 8
  %3692 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i5.i.i636)
  %3693 = getelementptr i8, ptr %result.i5.i.i636, i64 16
  store i32 16, ptr %3693, align 4
  %3694 = getelementptr i8, ptr %result.i5.i.i636, i64 20
  store i32 16, ptr %3694, align 4
  %result.i.i.i.i637 = call noalias dereferenceable_or_null(512) ptr @bump_malloc_inner(i64 noundef 512, ptr nonnull @current_ptr) #29
  %3695 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %3696 = getelementptr i8, ptr %result.i5.i.i636, i64 8
  store ptr %result.i.i.i.i637, ptr %3696, align 8
  %3697 = getelementptr i8, ptr %result.i.i632, i64 24
  store ptr @Array, ptr %3697, align 8
  %3698 = getelementptr i8, ptr %result.i.i632, i64 32
  store ptr %result.i5.i.i636, ptr %3698, align 8
  %3699 = getelementptr i8, ptr %result.i.i632, i64 40
  %3700 = getelementptr i8, ptr %result.i.i632, i64 48
  store i32 9, ptr %3700, align 4
  %3701 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %3702 = getelementptr i8, ptr %result.i.i632, i64 60
  %3703 = call ptr @llvm.invariant.start.p0(i64 40, ptr nonnull @PRNG)
  %3704 = call i64 @clock()
  %3705 = call ptr @llvm.invariant.start.p0(i64 40, ptr nonnull @PRNG)
  %3706 = getelementptr inbounds i8, ptr %13, i64 8
  %3707 = getelementptr inbounds i8, ptr %13, i64 24
  %3708 = getelementptr inbounds i8, ptr %13, i64 16
  %3709 = getelementptr inbounds i8, ptr %14, i64 8
  %3710 = getelementptr inbounds i8, ptr %15, i64 8
  %3711 = getelementptr i8, ptr %result.i.i632, i64 56
  %3712 = getelementptr inbounds i8, ptr %7, i64 8
  %3713 = getelementptr inbounds i8, ptr %7, i64 24
  %3714 = getelementptr inbounds i8, ptr %7, i64 16
  %3715 = getelementptr inbounds i8, ptr %8, i64 8
  %3716 = getelementptr inbounds i8, ptr %8, i64 16
  %3717 = getelementptr inbounds i8, ptr %9, i64 8
  %3718 = getelementptr inbounds i8, ptr %10, i64 8
  br label %._crit_edge.i639

._crit_edge.i639:                                 ; preds = %HashMap_insert_internal_keyK_valueV_hashPtri32.exit.i754, %benchmark_get_random_miss.exit
  %3719 = phi i32 [ 131415, %benchmark_get_random_miss.exit ], [ %3722, %HashMap_insert_internal_keyK_valueV_hashPtri32.exit.i754 ]
  %.reg2mem16.092.i = phi i32 [ 0, %benchmark_get_random_miss.exit ], [ %4346, %HashMap_insert_internal_keyK_valueV_hashPtri32.exit.i754 ]
  %3720 = mul i32 %3719, 1103515245
  %3721 = add i32 %3720, 12345
  %3722 = and i32 %3721, 2147483647
  %3723 = add nuw i32 %3722, 1
  %.sroa.014.0.insert.ext.i = zext nneg i32 %3722 to i160
  %3724 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.014.0.insert.ext.i, 1
  %.sroa.07.0.insert.ext.i = zext i32 %3723 to i160
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  %3725 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %3726 = load ptr, ptr %3697, align 8
  %3727 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3726, 0
  %3728 = load ptr, ptr %3698, align 8
  %3729 = insertvalue { ptr, ptr, ptr, i32 } %3727, ptr %3728, 1
  %3730 = load ptr, ptr %3699, align 8
  %3731 = insertvalue { ptr, ptr, ptr, i32 } %3729, ptr %3730, 2
  %3732 = load i32, ptr %3700, align 4
  %3733 = insertvalue { ptr, ptr, ptr, i32 } %3731, i32 %3732, 3
  %hash_coef_ptr.i.i42.i.i640 = getelementptr i8, ptr %3726, i64 8
  %tbl_size_ptr.i.i43.i.i641 = getelementptr i8, ptr %3726, i64 16
  %offset_tbl_ptr.i.i44.i.i642 = getelementptr i8, ptr %3726, i64 40
  %hash_coef.i.i45.i.i643 = load i64, ptr %hash_coef_ptr.i.i42.i.i640, align 4
  %tbl_size.i.i46.i.i644 = load i64, ptr %tbl_size_ptr.i.i43.i.i641, align 4
  %offset_tbl.i.i47.i.i645 = load ptr, ptr %offset_tbl_ptr.i.i44.i.i642, align 8
  %product.i.i.i48.i.i646 = mul i64 %hash_coef.i.i45.i.i643, -5261542750394134544
  %shifted.i.i.i49.i.i647 = lshr i64 %product.i.i.i48.i.i646, 32
  %xored.i.i.i50.i.i648 = xor i64 %shifted.i.i.i49.i.i647, %product.i.i.i48.i.i646
  %hash.i.i.i51.i.i649 = and i64 %xored.i.i.i50.i.i648, %tbl_size.i.i46.i.i644
  %offset_ptr.i.i52.i.i650 = getelementptr i32, ptr %offset_tbl.i.i47.i.i645, i64 %hash.i.i.i51.i.i649
  %offset.i.i53.i.i651 = load i32, ptr %offset_ptr.i.i52.i.i650, align 4
  %eq.i.i.i652 = icmp eq i32 %3732, %offset.i.i53.i.i651
  call void @llvm.assume(i1 %eq.i.i.i652) #30
  %3734 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %3735 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3726)
  %3736 = sext i32 %3732 to i64
  %3737 = getelementptr ptr, ptr %3726, i64 %3736
  %3738 = getelementptr i8, ptr %3737, i64 64
  %3739 = load ptr, ptr %3738, align 8
  %3740 = call ptr %3739({ ptr, ptr, ptr, i32 } %3733, ptr nonnull %0)
  %3741 = call i32 %3740({ ptr, ptr, ptr, i32 } %3733, { ptr, ptr, ptr, i32 } %3733, ptr nonnull %0)
  %3742 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %3743 = load ptr, ptr %3697, align 8
  %3744 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3743, 0
  %3745 = load ptr, ptr %3698, align 8
  %3746 = insertvalue { ptr, ptr, ptr, i32 } %3744, ptr %3745, 1
  %3747 = load ptr, ptr %3699, align 8
  %3748 = insertvalue { ptr, ptr, ptr, i32 } %3746, ptr %3747, 2
  %3749 = load i32, ptr %3700, align 4
  %3750 = insertvalue { ptr, ptr, ptr, i32 } %3748, i32 %3749, 3
  %hash_coef_ptr.i.i56.i.i653 = getelementptr i8, ptr %3743, i64 8
  %tbl_size_ptr.i.i57.i.i654 = getelementptr i8, ptr %3743, i64 16
  %offset_tbl_ptr.i.i58.i.i655 = getelementptr i8, ptr %3743, i64 40
  %hash_coef.i.i59.i.i656 = load i64, ptr %hash_coef_ptr.i.i56.i.i653, align 4
  %tbl_size.i.i60.i.i657 = load i64, ptr %tbl_size_ptr.i.i57.i.i654, align 4
  %offset_tbl.i.i61.i.i658 = load ptr, ptr %offset_tbl_ptr.i.i58.i.i655, align 8
  %product.i.i.i62.i.i659 = mul i64 %hash_coef.i.i59.i.i656, -5261542750394134544
  %shifted.i.i.i63.i.i660 = lshr i64 %product.i.i.i62.i.i659, 32
  %xored.i.i.i64.i.i661 = xor i64 %shifted.i.i.i63.i.i660, %product.i.i.i62.i.i659
  %hash.i.i.i65.i.i662 = and i64 %xored.i.i.i64.i.i661, %tbl_size.i.i60.i.i657
  %offset_ptr.i.i66.i.i663 = getelementptr i32, ptr %offset_tbl.i.i61.i.i658, i64 %hash.i.i.i65.i.i662
  %offset.i.i67.i.i664 = load i32, ptr %offset_ptr.i.i66.i.i663, align 4
  %eq.i70.i.i665 = icmp eq i32 %3749, %offset.i.i67.i.i664
  call void @llvm.assume(i1 %eq.i70.i.i665) #30
  %3751 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %3752 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3743)
  %3753 = sext i32 %3749 to i64
  %3754 = getelementptr ptr, ptr %3743, i64 %3753
  %3755 = getelementptr i8, ptr %3754, i64 64
  %3756 = load ptr, ptr %3755, align 8
  %3757 = call ptr %3756({ ptr, ptr, ptr, i32 } %3750, ptr nonnull %0)
  %3758 = call i32 %3757({ ptr, ptr, ptr, i32 } %3750, { ptr, ptr, ptr, i32 } %3750, ptr nonnull %0)
  %3759 = icmp eq i32 %3758, 0
  %3760 = load i32, ptr %3702, align 4
  %3761 = mul i32 %3760, 10
  %3762 = add i32 %3761, 10
  %3763 = mul i32 %3741, 7
  %3764 = icmp sge i32 %3762, %3763
  %3765 = or i1 %3759, %3764
  br i1 %3765, label %3766, label %HashMap_insert_keyK_valueV.exit.i666

3766:                                             ; preds = %._crit_edge.i639
  %3767 = shl i32 %3741, 1
  %3768 = call i32 @llvm.smax.i32(i32 %3767, i32 16)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %16)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %17)
  %3769 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %3770 = load ptr, ptr %3697, align 8
  %3771 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3770, 0
  %3772 = load ptr, ptr %3698, align 8
  %3773 = insertvalue { ptr, ptr, ptr, i32 } %3771, ptr %3772, 1
  %3774 = load ptr, ptr %3699, align 8
  %3775 = insertvalue { ptr, ptr, ptr, i32 } %3773, ptr %3774, 2
  %3776 = load i32, ptr %3700, align 4
  %3777 = insertvalue { ptr, ptr, ptr, i32 } %3775, i32 %3776, 3
  %hash_coef_ptr.i.i39.i.i766 = getelementptr i8, ptr %3770, i64 8
  %tbl_size_ptr.i.i40.i.i767 = getelementptr i8, ptr %3770, i64 16
  %offset_tbl_ptr.i.i41.i.i768 = getelementptr i8, ptr %3770, i64 40
  %hash_coef.i.i42.i.i769 = load i64, ptr %hash_coef_ptr.i.i39.i.i766, align 4
  %tbl_size.i.i43.i.i770 = load i64, ptr %tbl_size_ptr.i.i40.i.i767, align 4
  %offset_tbl.i.i44.i.i771 = load ptr, ptr %offset_tbl_ptr.i.i41.i.i768, align 8
  %product.i.i.i45.i.i772 = mul i64 %hash_coef.i.i42.i.i769, -5261542750394134544
  %shifted.i.i.i46.i.i773 = lshr i64 %product.i.i.i45.i.i772, 32
  %xored.i.i.i47.i.i774 = xor i64 %shifted.i.i.i46.i.i773, %product.i.i.i45.i.i772
  %hash.i.i.i48.i.i775 = and i64 %xored.i.i.i47.i.i774, %tbl_size.i.i43.i.i770
  %offset_ptr.i.i49.i.i776 = getelementptr i32, ptr %offset_tbl.i.i44.i.i771, i64 %hash.i.i.i48.i.i775
  %offset.i.i50.i.i777 = load i32, ptr %offset_ptr.i.i49.i.i776, align 4
  %eq.i.i212.i = icmp eq i32 %3776, %offset.i.i50.i.i777
  call void @llvm.assume(i1 %eq.i.i212.i) #30
  %3778 = load ptr, ptr %result.i.i632, align 8
  %3779 = load ptr, ptr %3679, align 8
  %result.i.i213.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3780 = getelementptr i8, ptr %result.i.i213.i, i64 16
  store ptr @_parameterization_Nil, ptr %3780, align 8
  %result.i66.i.i778 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3781 = getelementptr i8, ptr %result.i66.i.i778, i64 16
  store ptr %3779, ptr %3781, align 8
  %3782 = getelementptr i8, ptr %result.i66.i.i778, i64 8
  store ptr %3778, ptr %3782, align 8
  %3783 = getelementptr i8, ptr %result.i66.i.i778, i64 24
  store ptr null, ptr %3783, align 8
  %3784 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i66.i.i778)
  store ptr @Entry, ptr %result.i66.i.i778, align 8
  %3785 = getelementptr i8, ptr %result.i.i213.i, i64 8
  store ptr %result.i66.i.i778, ptr %3785, align 8
  %3786 = getelementptr i8, ptr %result.i.i213.i, i64 24
  store ptr null, ptr %3786, align 8
  %3787 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i213.i)
  store ptr @union_typ, ptr %result.i.i213.i, align 8
  %result.i67.i.i779 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i213.i, ptr %result.i67.i.i779, align 8
  %3788 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i67.i.i779)
  %3789 = getelementptr i8, ptr %result.i67.i.i779, i64 16
  store i32 %3768, ptr %3789, align 4
  %3790 = getelementptr i8, ptr %result.i67.i.i779, i64 20
  store i32 %3768, ptr %3790, align 4
  %3791 = zext nneg i32 %3768 to i64
  %3792 = shl nuw nsw i64 %3791, 5
  %result.i.i.i214.i = call noalias ptr @bump_malloc_inner(i64 noundef %3792, ptr nonnull @current_ptr) #29
  %3793 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %3794 = getelementptr i8, ptr %result.i67.i.i779, i64 8
  store ptr %result.i.i.i214.i, ptr %3794, align 8
  store ptr @Array, ptr %3697, align 8
  store ptr %result.i67.i.i779, ptr %3698, align 8
  store i32 9, ptr %3700, align 4
  store i32 0, ptr %3711, align 4
  store i32 0, ptr %3702, align 4
  %invariant.gep.i.i780 = getelementptr i8, ptr %3770, i64 64
  %3795 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %3796 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %3797 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %3770)
  %3798 = sext i32 %3776 to i64
  %gep.i282.i = getelementptr ptr, ptr %invariant.gep.i.i780, i64 %3798
  %3799 = load ptr, ptr %gep.i282.i, align 8
  %3800 = call ptr %3799({ ptr, ptr, ptr, i32 } %3777, ptr nonnull %0)
  %3801 = call i32 %3800({ ptr, ptr, ptr, i32 } %3777, { ptr, ptr, ptr, i32 } %3777, ptr nonnull %0)
  %3802 = icmp sgt i32 %3801, 0
  br i1 %3802, label %.lr.ph285.i, label %HashMap_resize_new_capacityPtri32.exit.i781

.lr.ph285.i:                                      ; preds = %3766
  %invariant.gep172.i.i782 = getelementptr i8, ptr %3770, i64 120
  %3803 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %gep173.i.i783 = getelementptr ptr, ptr %invariant.gep172.i.i782, i64 %3798
  br label %3804

3804:                                             ; preds = %._crit_edge3.i.i786, %.lr.ph285.i
  %.reg2mem31.0.i283.i = phi i32 [ 0, %.lr.ph285.i ], [ %4071, %._crit_edge3.i.i786 ]
  store ptr @_parameterization_Ptri32, ptr %16, align 8
  %3805 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %16)
  %3806 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %3770)
  %3807 = load ptr, ptr %gep173.i.i783, align 8
  store ptr @i32_typ, ptr %17, align 8
  %3808 = call ptr %3807({ ptr, ptr, ptr, i32 } %3777, ptr nonnull %17)
  %3809 = call { ptr, i160 } %3808({ ptr, ptr, ptr, i32 } %3777, { ptr, ptr, ptr, i32 } %3777, ptr nonnull %16, i32 %.reg2mem31.0.i283.i)
  %.fca.0.extract30.i.i784 = extractvalue { ptr, i160 } %3809, 0
  %3810 = icmp ne ptr %.fca.0.extract30.i.i784, @nil_typ
  %3811 = icmp ne ptr %.fca.0.extract30.i.i784, null
  %.not37.i.i785 = and i1 %3810, %3811
  br i1 %.not37.i.i785, label %3812, label %._crit_edge3.i.i786

3812:                                             ; preds = %3804
  %.fca.1.extract32.i.i787 = extractvalue { ptr, i160 } %3809, 1
  %.sroa.5164.8.extract.trunc.i.i788 = trunc i160 %.fca.1.extract32.i.i787 to i64
  %3813 = inttoptr i64 %.sroa.5164.8.extract.trunc.i.i788 to ptr
  %.sroa.9.8.extract.shift.i.i789 = lshr i160 %.fca.1.extract32.i.i787, 64
  %.sroa.9.8.extract.trunc.i.i790 = trunc i160 %.sroa.9.8.extract.shift.i.i789 to i64
  %3814 = inttoptr i64 %.sroa.9.8.extract.trunc.i.i790 to ptr
  %hash_coef_ptr.i.i83.i.i791 = getelementptr i8, ptr %.fca.0.extract30.i.i784, i64 8
  %tbl_size_ptr.i.i84.i.i792 = getelementptr i8, ptr %.fca.0.extract30.i.i784, i64 16
  %offset_tbl_ptr.i.i85.i.i793 = getelementptr i8, ptr %.fca.0.extract30.i.i784, i64 40
  %hash_coef.i.i86.i.i794 = load i64, ptr %hash_coef_ptr.i.i83.i.i791, align 4
  %tbl_size.i.i87.i.i795 = load i64, ptr %tbl_size_ptr.i.i84.i.i792, align 4
  %offset_tbl.i.i88.i.i796 = load ptr, ptr %offset_tbl_ptr.i.i85.i.i793, align 8
  %product.i.i.i89.i.i797 = mul i64 %hash_coef.i.i86.i.i794, 4015701072841558310
  %shifted.i.i.i90.i.i798 = lshr i64 %product.i.i.i89.i.i797, 32
  %xored.i.i.i91.i.i799 = xor i64 %shifted.i.i.i90.i.i798, %product.i.i.i89.i.i797
  %hash.i.i.i92.i.i800 = and i64 %xored.i.i.i91.i.i799, %tbl_size.i.i87.i.i795
  %offset_ptr.i.i93.i.i801 = getelementptr i32, ptr %offset_tbl.i.i88.i.i796, i64 %hash.i.i.i92.i.i800
  %offset.i.i94.i.i802 = load i32, ptr %offset_ptr.i.i93.i.i801, align 4
  %3815 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract30.i.i784, 0
  %3816 = insertvalue { ptr, ptr, ptr, i32 } %3815, ptr %3813, 1
  %3817 = insertvalue { ptr, ptr, ptr, i32 } %3816, ptr %3814, 2
  %3818 = insertvalue { ptr, ptr, ptr, i32 } %3817, i32 %offset.i.i94.i.i802, 3
  %3819 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %3820 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %3821 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract30.i.i784)
  %3822 = sext i32 %offset.i.i94.i.i802 to i64
  %3823 = getelementptr ptr, ptr %.fca.0.extract30.i.i784, i64 %3822
  %3824 = getelementptr i8, ptr %3823, i64 56
  %3825 = load ptr, ptr %3824, align 8
  %3826 = call ptr %3825({ ptr, ptr, ptr, i32 } %3818, ptr nonnull %0)
  %3827 = call { ptr, i160 } %3826({ ptr, ptr, ptr, i32 } %3818, { ptr, ptr, ptr, i32 } %3818, ptr nonnull %0)
  %.fca.0.extract23.i.i803 = extractvalue { ptr, i160 } %3827, 0
  %3828 = getelementptr i8, ptr %.fca.0.extract23.i.i803, i64 8
  %3829 = getelementptr i8, ptr %.fca.0.extract23.i.i803, i64 16
  %3830 = getelementptr i8, ptr %.fca.0.extract23.i.i803, i64 24
  %3831 = getelementptr i8, ptr %.fca.0.extract23.i.i803, i64 32
  %3832 = load i64, ptr %3828, align 4
  %3833 = load i64, ptr %3829, align 4
  %3834 = load ptr, ptr %3830, align 8
  %3835 = load ptr, ptr %3831, align 8
  %result.i96.i.i804 = call i1 %3834(i64 %3833, i64 %3832, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %3835) #3
  br i1 %result.i96.i.i804, label %._crit_edge3.i.i786, label %3836

3836:                                             ; preds = %3812
  %result.i97.i.i805 = call i1 %3834(i64 %3833, i64 %3832, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr readonly %3835) #3
  br i1 %result.i97.i.i805, label %3837, label %._crit_edge3.i.i786

3837:                                             ; preds = %3836
  %3838 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %3839 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %3840 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract30.i.i784)
  %3841 = getelementptr i8, ptr %3823, i64 48
  %3842 = load ptr, ptr %3841, align 8
  %3843 = call ptr %3842({ ptr, ptr, ptr, i32 } %3818, ptr nonnull %0)
  %3844 = call { ptr, i160 } %3843({ ptr, ptr, ptr, i32 } %3818, { ptr, ptr, ptr, i32 } %3818, ptr nonnull %0)
  %3845 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %3846 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %3847 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract30.i.i784)
  %3848 = getelementptr i8, ptr %3823, i64 64
  %3849 = load ptr, ptr %3848, align 8
  %3850 = call ptr %3849({ ptr, ptr, ptr, i32 } %3818, ptr nonnull %0)
  %3851 = call i32 %3850({ ptr, ptr, ptr, i32 } %3818, { ptr, ptr, ptr, i32 } %3818, ptr nonnull %0)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %7)
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %8)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %9)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %10)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %1)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2)
  %3852 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %3853 = load ptr, ptr %3697, align 8
  %3854 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3853, 0
  %3855 = load ptr, ptr %3698, align 8
  %3856 = insertvalue { ptr, ptr, ptr, i32 } %3854, ptr %3855, 1
  %3857 = load ptr, ptr %3699, align 8
  %3858 = insertvalue { ptr, ptr, ptr, i32 } %3856, ptr %3857, 2
  %3859 = load i32, ptr %3700, align 4
  %3860 = insertvalue { ptr, ptr, ptr, i32 } %3858, i32 %3859, 3
  %hash_coef_ptr.i.i51.i397.i = getelementptr i8, ptr %3853, i64 8
  %tbl_size_ptr.i.i52.i398.i = getelementptr i8, ptr %3853, i64 16
  %offset_tbl_ptr.i.i53.i399.i = getelementptr i8, ptr %3853, i64 40
  %hash_coef.i.i54.i400.i = load i64, ptr %hash_coef_ptr.i.i51.i397.i, align 4
  %tbl_size.i.i55.i401.i = load i64, ptr %tbl_size_ptr.i.i52.i398.i, align 4
  %offset_tbl.i.i56.i402.i = load ptr, ptr %offset_tbl_ptr.i.i53.i399.i, align 8
  %product.i.i.i57.i403.i = mul i64 %hash_coef.i.i54.i400.i, -5261542750394134544
  %shifted.i.i.i58.i404.i = lshr i64 %product.i.i.i57.i403.i, 32
  %xored.i.i.i59.i405.i = xor i64 %shifted.i.i.i58.i404.i, %product.i.i.i57.i403.i
  %hash.i.i.i60.i406.i = and i64 %xored.i.i.i59.i405.i, %tbl_size.i.i55.i401.i
  %offset_ptr.i.i61.i407.i = getelementptr i32, ptr %offset_tbl.i.i56.i402.i, i64 %hash.i.i.i60.i406.i
  %offset.i.i62.i408.i = load i32, ptr %offset_ptr.i.i61.i407.i, align 4
  %eq.i.i409.i = icmp eq i32 %3859, %offset.i.i62.i408.i
  call void @llvm.assume(i1 %eq.i.i409.i) #30
  %3861 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %3862 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3853)
  %3863 = sext i32 %3859 to i64
  %3864 = getelementptr ptr, ptr %3853, i64 %3863
  %3865 = getelementptr i8, ptr %3864, i64 64
  %3866 = load ptr, ptr %3865, align 8
  %3867 = call ptr %3866({ ptr, ptr, ptr, i32 } %3860, ptr nonnull %0)
  %3868 = call i32 %3867({ ptr, ptr, ptr, i32 } %3860, { ptr, ptr, ptr, i32 } %3860, ptr nonnull %0)
  %3869 = add i32 %3868, -1
  %3870 = and i32 %3869, %3851
  %3871 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  br label %3872

3872:                                             ; preds = %3921, %3837
  %spec.store.select.i444448.i = phi i32 [ %spec.store.select.i444.i, %3921 ], [ -1, %3837 ]
  %.0..0..0..i410.i = phi i32 [ %3939, %3921 ], [ %3870, %3837 ]
  %3873 = load ptr, ptr %3697, align 8
  %3874 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3873, 0
  %3875 = load ptr, ptr %3698, align 8
  %3876 = insertvalue { ptr, ptr, ptr, i32 } %3874, ptr %3875, 1
  %3877 = load ptr, ptr %3699, align 8
  %3878 = insertvalue { ptr, ptr, ptr, i32 } %3876, ptr %3877, 2
  %3879 = load i32, ptr %3700, align 4
  %3880 = insertvalue { ptr, ptr, ptr, i32 } %3878, i32 %3879, 3
  %hash_coef_ptr.i.i65.i411.i = getelementptr i8, ptr %3873, i64 8
  %tbl_size_ptr.i.i66.i412.i = getelementptr i8, ptr %3873, i64 16
  %offset_tbl_ptr.i.i67.i413.i = getelementptr i8, ptr %3873, i64 40
  %hash_coef.i.i68.i414.i = load i64, ptr %hash_coef_ptr.i.i65.i411.i, align 4
  %tbl_size.i.i69.i415.i = load i64, ptr %tbl_size_ptr.i.i66.i412.i, align 4
  %offset_tbl.i.i70.i416.i = load ptr, ptr %offset_tbl_ptr.i.i67.i413.i, align 8
  %product.i.i.i71.i417.i = mul i64 %hash_coef.i.i68.i414.i, -5261542750394134544
  %shifted.i.i.i72.i418.i = lshr i64 %product.i.i.i71.i417.i, 32
  %xored.i.i.i73.i419.i = xor i64 %shifted.i.i.i72.i418.i, %product.i.i.i71.i417.i
  %hash.i.i.i74.i420.i = and i64 %xored.i.i.i73.i419.i, %tbl_size.i.i69.i415.i
  %offset_ptr.i.i75.i421.i = getelementptr i32, ptr %offset_tbl.i.i70.i416.i, i64 %hash.i.i.i74.i420.i
  %offset.i.i76.i422.i = load i32, ptr %offset_ptr.i.i75.i421.i, align 4
  %eq.i79.i423.i = icmp eq i32 %3879, %offset.i.i76.i422.i
  call void @llvm.assume(i1 %eq.i79.i423.i) #30
  %3881 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  store ptr @_parameterization_Ptri32, ptr %1, align 8
  %3882 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %1)
  %3883 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3873)
  %3884 = sext i32 %3879 to i64
  %3885 = getelementptr ptr, ptr %3873, i64 %3884
  %3886 = getelementptr i8, ptr %3885, i64 120
  %3887 = load ptr, ptr %3886, align 8
  store ptr @i32_typ, ptr %2, align 8
  %3888 = call ptr %3887({ ptr, ptr, ptr, i32 } %3880, ptr nonnull %2)
  %3889 = call { ptr, i160 } %3888({ ptr, ptr, ptr, i32 } %3880, { ptr, ptr, ptr, i32 } %3880, ptr nonnull %1, i32 %.0..0..0..i410.i)
  %.fca.0.extract36.i424.i = extractvalue { ptr, i160 } %3889, 0
  %3890 = icmp eq ptr %.fca.0.extract36.i424.i, @nil_typ
  %3891 = icmp eq ptr %.fca.0.extract36.i424.i, null
  %3892 = or i1 %3890, %3891
  br i1 %3892, label %3940, label %3893

3893:                                             ; preds = %3872
  %.fca.1.extract38.i425.i = extractvalue { ptr, i160 } %3889, 1
  %.sroa.5.8.extract.shift.i426.i = lshr i160 %.fca.1.extract38.i425.i, 64
  %.sroa.5.8.extract.trunc.i427.i = trunc i160 %.sroa.5.8.extract.shift.i426.i to i64
  %.sroa.2.8.extract.trunc165.i428.i = trunc i160 %.fca.1.extract38.i425.i to i64
  %3894 = inttoptr i64 %.sroa.2.8.extract.trunc165.i428.i to ptr
  %3895 = inttoptr i64 %.sroa.5.8.extract.trunc.i427.i to ptr
  %hash_coef_ptr.i.i81.i429.i = getelementptr i8, ptr %.fca.0.extract36.i424.i, i64 8
  %tbl_size_ptr.i.i82.i430.i = getelementptr i8, ptr %.fca.0.extract36.i424.i, i64 16
  %offset_tbl_ptr.i.i83.i431.i = getelementptr i8, ptr %.fca.0.extract36.i424.i, i64 40
  %hash_coef.i.i84.i432.i = load i64, ptr %hash_coef_ptr.i.i81.i429.i, align 4
  %tbl_size.i.i85.i433.i = load i64, ptr %tbl_size_ptr.i.i82.i430.i, align 4
  %offset_tbl.i.i86.i434.i = load ptr, ptr %offset_tbl_ptr.i.i83.i431.i, align 8
  %product.i.i.i87.i435.i = mul i64 %hash_coef.i.i84.i432.i, 4015701072841558310
  %shifted.i.i.i88.i436.i = lshr i64 %product.i.i.i87.i435.i, 32
  %xored.i.i.i89.i437.i = xor i64 %shifted.i.i.i88.i436.i, %product.i.i.i87.i435.i
  %hash.i.i.i90.i438.i = and i64 %xored.i.i.i89.i437.i, %tbl_size.i.i85.i433.i
  %offset_ptr.i.i91.i439.i = getelementptr i32, ptr %offset_tbl.i.i86.i434.i, i64 %hash.i.i.i90.i438.i
  %offset.i.i92.i440.i = load i32, ptr %offset_ptr.i.i91.i439.i, align 4
  %3896 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract36.i424.i, 0
  %3897 = insertvalue { ptr, ptr, ptr, i32 } %3896, ptr %3894, 1
  %3898 = insertvalue { ptr, ptr, ptr, i32 } %3897, ptr %3895, 2
  %3899 = insertvalue { ptr, ptr, ptr, i32 } %3898, i32 %offset.i.i92.i440.i, 3
  %3900 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %3901 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %3902 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i424.i)
  %3903 = sext i32 %offset.i.i92.i440.i to i64
  %3904 = getelementptr ptr, ptr %.fca.0.extract36.i424.i, i64 %3903
  %3905 = getelementptr i8, ptr %3904, i64 64
  %3906 = load ptr, ptr %3905, align 8
  %3907 = call ptr %3906({ ptr, ptr, ptr, i32 } %3899, ptr nonnull %0)
  %3908 = call i32 %3907({ ptr, ptr, ptr, i32 } %3899, { ptr, ptr, ptr, i32 } %3899, ptr nonnull %0)
  %3909 = icmp eq i32 %3908, %3851
  %3910 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %3911 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %3912 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i424.i)
  %3913 = getelementptr i8, ptr %3904, i64 48
  %3914 = load ptr, ptr %3913, align 8
  %3915 = call ptr %3914({ ptr, ptr, ptr, i32 } %3899, ptr nonnull %0)
  %3916 = call { ptr, i160 } %3915({ ptr, ptr, ptr, i32 } %3899, { ptr, ptr, ptr, i32 } %3899, ptr nonnull %0)
  %3917 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %3918 = load ptr, ptr %3685, align 8
  %3919 = call i1 %3918({ ptr, i160 } %3916, { ptr, i160 } %3844)
  %3920 = and i1 %3909, %3919
  br i1 %3920, label %HashMap_find_slot_keyK_hashPtri32.exit445.i, label %3921

3921:                                             ; preds = %3893
  %3922 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %3923 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %3924 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i424.i)
  %3925 = getelementptr i8, ptr %3904, i64 56
  %3926 = load ptr, ptr %3925, align 8
  %3927 = call ptr %3926({ ptr, ptr, ptr, i32 } %3899, ptr nonnull %0)
  %3928 = call { ptr, i160 } %3927({ ptr, ptr, ptr, i32 } %3899, { ptr, ptr, ptr, i32 } %3899, ptr nonnull %0)
  %.fca.0.extract15.i441.i = extractvalue { ptr, i160 } %3928, 0
  %3929 = getelementptr i8, ptr %.fca.0.extract15.i441.i, i64 8
  %3930 = getelementptr i8, ptr %.fca.0.extract15.i441.i, i64 16
  %3931 = getelementptr i8, ptr %.fca.0.extract15.i441.i, i64 24
  %3932 = getelementptr i8, ptr %.fca.0.extract15.i441.i, i64 32
  %3933 = load i64, ptr %3929, align 4
  %3934 = load i64, ptr %3930, align 4
  %3935 = load ptr, ptr %3931, align 8
  %3936 = load ptr, ptr %3932, align 8
  %result.i.i442.i = call i1 %3935(i64 %3934, i64 %3933, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %3936) #3
  %3937 = icmp eq i32 %spec.store.select.i444448.i, -1
  %or.cond.i443.i = select i1 %result.i.i442.i, i1 %3937, i1 false
  %spec.store.select.i444.i = select i1 %or.cond.i443.i, i32 %.0..0..0..i410.i, i32 %spec.store.select.i444448.i
  %3938 = add i32 %.0..0..0..i410.i, 1
  %3939 = and i32 %3938, %3869
  br label %3872

3940:                                             ; preds = %3872
  %3941 = icmp eq i32 %spec.store.select.i444448.i, -1
  %.pre457.i = select i1 %3941, i32 %.0..0..0..i410.i, i32 %spec.store.select.i444448.i
  br label %HashMap_find_slot_keyK_hashPtri32.exit445.i

HashMap_find_slot_keyK_hashPtri32.exit445.i:      ; preds = %3893, %3940
  %3942 = phi i32 [ %.pre457.i, %3940 ], [ %.0..0..0..i410.i, %3893 ]
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %1)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2)
  %3943 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %3944 = load ptr, ptr %3697, align 8
  %3945 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3944, 0
  %3946 = load ptr, ptr %3698, align 8
  %3947 = insertvalue { ptr, ptr, ptr, i32 } %3945, ptr %3946, 1
  %3948 = load ptr, ptr %3699, align 8
  %3949 = insertvalue { ptr, ptr, ptr, i32 } %3947, ptr %3948, 2
  %3950 = load i32, ptr %3700, align 4
  %3951 = insertvalue { ptr, ptr, ptr, i32 } %3949, i32 %3950, 3
  %hash_coef_ptr.i.i56.i290.i = getelementptr i8, ptr %3944, i64 8
  %tbl_size_ptr.i.i57.i291.i = getelementptr i8, ptr %3944, i64 16
  %offset_tbl_ptr.i.i58.i292.i = getelementptr i8, ptr %3944, i64 40
  %hash_coef.i.i59.i293.i = load i64, ptr %hash_coef_ptr.i.i56.i290.i, align 4
  %tbl_size.i.i60.i294.i = load i64, ptr %tbl_size_ptr.i.i57.i291.i, align 4
  %offset_tbl.i.i61.i295.i = load ptr, ptr %offset_tbl_ptr.i.i58.i292.i, align 8
  %product.i.i.i62.i296.i = mul i64 %hash_coef.i.i59.i293.i, -5261542750394134544
  %shifted.i.i.i63.i297.i = lshr i64 %product.i.i.i62.i296.i, 32
  %xored.i.i.i64.i298.i = xor i64 %shifted.i.i.i63.i297.i, %product.i.i.i62.i296.i
  %hash.i.i.i65.i299.i = and i64 %xored.i.i.i64.i298.i, %tbl_size.i.i60.i294.i
  %offset_ptr.i.i66.i300.i = getelementptr i32, ptr %offset_tbl.i.i61.i295.i, i64 %hash.i.i.i65.i299.i
  %offset.i.i67.i301.i = load i32, ptr %offset_ptr.i.i66.i300.i, align 4
  %eq.i.i302.i = icmp eq i32 %3950, %offset.i.i67.i301.i
  call void @llvm.assume(i1 %eq.i.i302.i) #30
  store ptr @_parameterization_Ptri32, ptr %5, align 8
  %3952 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %5)
  %3953 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3944)
  %3954 = sext i32 %3950 to i64
  %3955 = getelementptr ptr, ptr %3944, i64 %3954
  %3956 = getelementptr i8, ptr %3955, i64 120
  %3957 = load ptr, ptr %3956, align 8
  store ptr @i32_typ, ptr %6, align 8
  %3958 = call ptr %3957({ ptr, ptr, ptr, i32 } %3951, ptr nonnull %6)
  %3959 = call { ptr, i160 } %3958({ ptr, ptr, ptr, i32 } %3951, { ptr, ptr, ptr, i32 } %3951, ptr nonnull %5, i32 %3942)
  %.fca.0.extract2.i303.i = extractvalue { ptr, i160 } %3959, 0
  %3960 = load ptr, ptr %result.i.i632, align 8
  %3961 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %3962 = load ptr, ptr %3679, align 8
  %3963 = load ptr, ptr %3960, align 8
  %3964 = getelementptr i8, ptr %3963, i64 48
  %3965 = load ptr, ptr %3964, align 8
  %3966 = call { i64, i64 } %3965(ptr nonnull %3960)
  %3967 = extractvalue { i64, i64 } %3966, 0
  %3968 = extractvalue { i64, i64 } %3966, 1
  %3969 = call i64 @llvm.umax.i64(i64 %3968, i64 8)
  %3970 = urem i64 16, %3968
  %3971 = icmp eq i64 %3970, 0
  %3972 = sub i64 %3968, %3970
  %3973 = select i1 %3971, i64 0, i64 %3972
  %3974 = add i64 %3973, %3967
  %3975 = add i64 %3974, 16
  %3976 = and i64 %3974, 7
  %3977 = icmp eq i64 %3976, 0
  %3978 = sub nuw nsw i64 40, %3976
  %3979 = select i1 %3977, i64 32, i64 %3978
  %3980 = add i64 %3975, %3979
  %3981 = and i64 %3980, 3
  %3982 = icmp eq i64 %3981, 0
  %3983 = sub nuw nsw i64 8, %3981
  %3984 = select i1 %3982, i64 4, i64 %3983
  %3985 = add i64 %3984, %3980
  %3986 = urem i64 %3985, %3969
  %3987 = icmp eq i64 %3986, 0
  %3988 = sub i64 %3969, %3986
  %3989 = select i1 %3987, i64 0, i64 %3988
  %3990 = add i64 %3985, %3989
  %result.i.i304.i = call noalias ptr @bump_malloc_inner(i64 noundef %3990, ptr nonnull @current_ptr) #29
  store ptr %3960, ptr %result.i.i304.i, align 8
  %3991 = getelementptr i8, ptr %result.i.i304.i, i64 8
  store ptr %3962, ptr %3991, align 8
  %3992 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i.i304.i)
  store ptr @Entry, ptr %7, align 8
  store ptr %result.i.i304.i, ptr %3712, align 8
  store i32 9, ptr %3713, align 8
  %3993 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %7)
  %3994 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Entry, ptr undef, ptr undef, i32 undef }, ptr %result.i.i304.i, 1
  %3995 = insertvalue { ptr, ptr, ptr, i32 } %3994, ptr undef, 2
  %3996 = insertvalue { ptr, ptr, ptr, i32 } %3995, i32 9, 3
  %3997 = load ptr, ptr %result.i.i632, align 8
  %3998 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %3999 = load ptr, ptr %3679, align 8
  store ptr %3997, ptr %8, align 8
  store ptr %3999, ptr %3715, align 8
  store ptr @_parameterization_Ptri32, ptr %3716, align 8
  %4000 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %8)
  %4001 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %4002 = load i64, ptr %3828, align 4
  %4003 = load i64, ptr %3829, align 4
  %4004 = load ptr, ptr %3830, align 8
  %4005 = load ptr, ptr %3831, align 8
  %result.i.i.i305.i = call i1 %4004(i64 %4003, i64 %4002, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr readonly %4005) #3
  %4006 = select i1 %result.i.i.i305.i, i64 10, i64 9
  %gep.i806 = getelementptr [14 x ptr], ptr getelementptr inbounds (i8, ptr @Entry, i64 72), i64 0, i64 %4006
  %4007 = load ptr, ptr %gep.i806, align 8
  call void %4007({ ptr, ptr, ptr, i32 } %3996, { ptr, ptr, ptr, i32 } %3996, ptr nonnull %8, { ptr, i160 } %3844, { ptr, i160 } %3827, i32 %3851)
  %4008 = load ptr, ptr %3714, align 8
  %4009 = ptrtoint ptr %result.i.i304.i to i64
  %4010 = ptrtoint ptr %4008 to i64
  %.sroa.2.0.insert.ext.i306.i = zext i64 %4010 to i160
  %.sroa.2.0.insert.shift.i307.i = shl nuw nsw i160 %.sroa.2.0.insert.ext.i306.i, 64
  %.sroa.0.0.insert.ext.i309.i = zext i64 %4009 to i160
  %.sroa.2.0.insert.insert.i308.i = or disjoint i160 %.sroa.2.0.insert.shift.i307.i, %.sroa.0.0.insert.ext.i309.i
  %.sroa.0.0.insert.insert.i310.i = or disjoint i160 %.sroa.2.0.insert.insert.i308.i, 3062541302288446171170371466885913903104
  %4011 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0.0.insert.insert.i310.i, 1
  %4012 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %4013 = load ptr, ptr %3697, align 8
  %4014 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4013, 0
  %4015 = load ptr, ptr %3698, align 8
  %4016 = insertvalue { ptr, ptr, ptr, i32 } %4014, ptr %4015, 1
  %4017 = load ptr, ptr %3699, align 8
  %4018 = insertvalue { ptr, ptr, ptr, i32 } %4016, ptr %4017, 2
  %4019 = load i32, ptr %3700, align 4
  %4020 = insertvalue { ptr, ptr, ptr, i32 } %4018, i32 %4019, 3
  %hash_coef_ptr.i.i84.i311.i = getelementptr i8, ptr %4013, i64 8
  %tbl_size_ptr.i.i85.i312.i = getelementptr i8, ptr %4013, i64 16
  %offset_tbl_ptr.i.i86.i313.i = getelementptr i8, ptr %4013, i64 40
  %hash_coef.i.i87.i314.i = load i64, ptr %hash_coef_ptr.i.i84.i311.i, align 4
  %tbl_size.i.i88.i315.i = load i64, ptr %tbl_size_ptr.i.i85.i312.i, align 4
  %offset_tbl.i.i89.i316.i = load ptr, ptr %offset_tbl_ptr.i.i86.i313.i, align 8
  %product.i.i.i90.i317.i = mul i64 %hash_coef.i.i87.i314.i, -5261542750394134544
  %shifted.i.i.i91.i318.i = lshr i64 %product.i.i.i90.i317.i, 32
  %xored.i.i.i92.i319.i = xor i64 %shifted.i.i.i91.i318.i, %product.i.i.i90.i317.i
  %hash.i.i.i93.i320.i = and i64 %xored.i.i.i92.i319.i, %tbl_size.i.i88.i315.i
  %offset_ptr.i.i94.i321.i = getelementptr i32, ptr %offset_tbl.i.i89.i316.i, i64 %hash.i.i.i93.i320.i
  %offset.i.i95.i322.i = load i32, ptr %offset_ptr.i.i94.i321.i, align 4
  %eq.i98.i323.i = icmp eq i32 %4019, %offset.i.i95.i322.i
  call void @llvm.assume(i1 %eq.i98.i323.i) #30
  %4021 = load ptr, ptr %result.i.i632, align 8
  %4022 = load ptr, ptr %3679, align 8
  %result.i99.i324.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %4023 = getelementptr i8, ptr %result.i99.i324.i, i64 16
  store ptr %4022, ptr %4023, align 8
  %4024 = getelementptr i8, ptr %result.i99.i324.i, i64 8
  store ptr %4021, ptr %4024, align 8
  %4025 = getelementptr i8, ptr %result.i99.i324.i, i64 24
  store ptr null, ptr %4025, align 8
  %4026 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i99.i324.i)
  store ptr @Entry, ptr %result.i99.i324.i, align 8
  store ptr @_parameterization_Ptri32, ptr %9, align 8
  store ptr %result.i99.i324.i, ptr %3717, align 8
  %4027 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %9)
  %4028 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4013)
  %4029 = sext i32 %4019 to i64
  %4030 = getelementptr ptr, ptr %4013, i64 %4029
  %4031 = getelementptr i8, ptr %4030, i64 128
  %4032 = load ptr, ptr %4031, align 8
  store ptr @i32_typ, ptr %10, align 8
  store ptr @Entry, ptr %3718, align 8
  %4033 = call ptr %4032({ ptr, ptr, ptr, i32 } %4020, ptr nonnull %10)
  call void %4033({ ptr, ptr, ptr, i32 } %4020, { ptr, ptr, ptr, i32 } %4020, ptr nonnull %9, i32 %3942, { ptr, i160 } %4011)
  %4034 = icmp eq ptr %.fca.0.extract2.i303.i, @nil_typ
  %4035 = icmp eq ptr %.fca.0.extract2.i303.i, null
  %4036 = or i1 %4034, %4035
  br i1 %4036, label %._crit_edge.thread.i346.i, label %._crit_edge.i325.i

._crit_edge.thread.i346.i:                        ; preds = %HashMap_find_slot_keyK_hashPtri32.exit445.i
  %4037 = load i32, ptr %3711, align 4
  %4038 = add i32 %4037, 1
  store i32 %4038, ptr %3711, align 4
  br label %._crit_edge1.sink.split.i344.i

._crit_edge.i325.i:                               ; preds = %HashMap_find_slot_keyK_hashPtri32.exit445.i
  %.fca.1.extract4.i326.i = extractvalue { ptr, i160 } %3959, 1
  %.sroa.3192.8.extract.trunc.i327.i = trunc i160 %.fca.1.extract4.i326.i to i64
  %4039 = inttoptr i64 %.sroa.3192.8.extract.trunc.i327.i to ptr
  %.sroa.5193.8.extract.shift.i328.i = lshr i160 %.fca.1.extract4.i326.i, 64
  %.sroa.5193.8.extract.trunc.i329.i = trunc i160 %.sroa.5193.8.extract.shift.i328.i to i64
  %4040 = inttoptr i64 %.sroa.5193.8.extract.trunc.i329.i to ptr
  %hash_coef_ptr.i.i101.i330.i = getelementptr i8, ptr %.fca.0.extract2.i303.i, i64 8
  %tbl_size_ptr.i.i102.i331.i = getelementptr i8, ptr %.fca.0.extract2.i303.i, i64 16
  %offset_tbl_ptr.i.i103.i332.i = getelementptr i8, ptr %.fca.0.extract2.i303.i, i64 40
  %hash_coef.i.i104.i333.i = load i64, ptr %hash_coef_ptr.i.i101.i330.i, align 4
  %tbl_size.i.i105.i334.i = load i64, ptr %tbl_size_ptr.i.i102.i331.i, align 4
  %offset_tbl.i.i106.i335.i = load ptr, ptr %offset_tbl_ptr.i.i103.i332.i, align 8
  %product.i.i.i107.i336.i = mul i64 %hash_coef.i.i104.i333.i, 4015701072841558310
  %shifted.i.i.i108.i337.i = lshr i64 %product.i.i.i107.i336.i, 32
  %xored.i.i.i109.i338.i = xor i64 %shifted.i.i.i108.i337.i, %product.i.i.i107.i336.i
  %hash.i.i.i110.i339.i = and i64 %xored.i.i.i109.i338.i, %tbl_size.i.i105.i334.i
  %offset_ptr.i.i111.i340.i = getelementptr i32, ptr %offset_tbl.i.i106.i335.i, i64 %hash.i.i.i110.i339.i
  %offset.i.i112.i341.i = load i32, ptr %offset_ptr.i.i111.i340.i, align 4
  %4041 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract2.i303.i, 0
  %4042 = insertvalue { ptr, ptr, ptr, i32 } %4041, ptr %4039, 1
  %4043 = insertvalue { ptr, ptr, ptr, i32 } %4042, ptr %4040, 2
  %4044 = insertvalue { ptr, ptr, ptr, i32 } %4043, i32 %offset.i.i112.i341.i, 3
  %4045 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %4046 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %4047 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract2.i303.i)
  %4048 = sext i32 %offset.i.i112.i341.i to i64
  %4049 = getelementptr ptr, ptr %.fca.0.extract2.i303.i, i64 %4048
  %4050 = getelementptr i8, ptr %4049, i64 56
  %4051 = load ptr, ptr %4050, align 8
  %4052 = call ptr %4051({ ptr, ptr, ptr, i32 } %4044, ptr nonnull %0)
  %4053 = call { ptr, i160 } %4052({ ptr, ptr, ptr, i32 } %4044, { ptr, ptr, ptr, i32 } %4044, ptr nonnull %0)
  %.fca.0.extract45.i342.i = extractvalue { ptr, i160 } %4053, 0
  %4054 = getelementptr i8, ptr %.fca.0.extract45.i342.i, i64 8
  %4055 = getelementptr i8, ptr %.fca.0.extract45.i342.i, i64 16
  %4056 = getelementptr i8, ptr %.fca.0.extract45.i342.i, i64 24
  %4057 = getelementptr i8, ptr %.fca.0.extract45.i342.i, i64 32
  %4058 = load i64, ptr %4054, align 4
  %4059 = load i64, ptr %4055, align 4
  %4060 = load ptr, ptr %4056, align 8
  %4061 = load ptr, ptr %4057, align 8
  %result.i114.i343.i = call i1 %4060(i64 %4059, i64 %4058, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %4061) #3
  br i1 %result.i114.i343.i, label %._crit_edge1.sink.split.i344.i, label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit347.i

._crit_edge1.sink.split.i344.i:                   ; preds = %._crit_edge.i325.i, %._crit_edge.thread.i346.i
  %.sink202.i345.i = phi i64 [ 40, %._crit_edge.thread.i346.i ], [ 32, %._crit_edge.i325.i ]
  %4062 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %4063 = getelementptr i8, ptr getelementptr inbounds (i8, ptr @HashMap, i64 72), i64 %.sink202.i345.i
  %4064 = load ptr, ptr %4063, align 8
  %4065 = load ptr, ptr %4064, align 8
  %4066 = call i32 %4065(ptr nonnull %result.i.i632)
  %4067 = add i32 %4066, 1
  %4068 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %4069 = getelementptr i8, ptr %4064, i64 8
  %4070 = load ptr, ptr %4069, align 8
  call void %4070(ptr nonnull %result.i.i632, i32 %4067)
  br label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit347.i

HashMap_insert_internal_keyK_valueV_hashPtri32.exit347.i: ; preds = %._crit_edge1.sink.split.i344.i, %._crit_edge.i325.i
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %7)
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %8)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %9)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %10)
  br label %._crit_edge3.i.i786

._crit_edge3.i.i786:                              ; preds = %HashMap_insert_internal_keyK_valueV_hashPtri32.exit347.i, %3836, %3812, %3804
  %4071 = add nuw nsw i32 %.reg2mem31.0.i283.i, 1
  %4072 = load ptr, ptr %gep.i282.i, align 8
  %4073 = call ptr %4072({ ptr, ptr, ptr, i32 } %3777, ptr nonnull %0)
  %4074 = call i32 %4073({ ptr, ptr, ptr, i32 } %3777, { ptr, ptr, ptr, i32 } %3777, ptr nonnull %0)
  %4075 = icmp slt i32 %4071, %4074
  br i1 %4075, label %3804, label %HashMap_resize_new_capacityPtri32.exit.i781

HashMap_resize_new_capacityPtri32.exit.i781:      ; preds = %._crit_edge3.i.i786, %3766
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %16)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %17)
  br label %HashMap_insert_keyK_valueV.exit.i666

HashMap_insert_keyK_valueV.exit.i666:             ; preds = %HashMap_resize_new_capacityPtri32.exit.i781, %._crit_edge.i639
  %4076 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %4077 = load ptr, ptr %3684, align 8
  %4078 = call i32 %4077({ ptr, i160 } %3724)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %11)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %12)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %13)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %14)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %15)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %4079 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %4080 = load ptr, ptr %3697, align 8
  %4081 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4080, 0
  %4082 = load ptr, ptr %3698, align 8
  %4083 = insertvalue { ptr, ptr, ptr, i32 } %4081, ptr %4082, 1
  %4084 = load ptr, ptr %3699, align 8
  %4085 = insertvalue { ptr, ptr, ptr, i32 } %4083, ptr %4084, 2
  %4086 = load i32, ptr %3700, align 4
  %4087 = insertvalue { ptr, ptr, ptr, i32 } %4085, i32 %4086, 3
  %hash_coef_ptr.i.i51.i.i667 = getelementptr i8, ptr %4080, i64 8
  %tbl_size_ptr.i.i52.i.i668 = getelementptr i8, ptr %4080, i64 16
  %offset_tbl_ptr.i.i53.i.i669 = getelementptr i8, ptr %4080, i64 40
  %hash_coef.i.i54.i.i670 = load i64, ptr %hash_coef_ptr.i.i51.i.i667, align 4
  %tbl_size.i.i55.i.i671 = load i64, ptr %tbl_size_ptr.i.i52.i.i668, align 4
  %offset_tbl.i.i56.i.i672 = load ptr, ptr %offset_tbl_ptr.i.i53.i.i669, align 8
  %product.i.i.i57.i.i673 = mul i64 %hash_coef.i.i54.i.i670, -5261542750394134544
  %shifted.i.i.i58.i.i674 = lshr i64 %product.i.i.i57.i.i673, 32
  %xored.i.i.i59.i.i675 = xor i64 %shifted.i.i.i58.i.i674, %product.i.i.i57.i.i673
  %hash.i.i.i60.i.i676 = and i64 %xored.i.i.i59.i.i675, %tbl_size.i.i55.i.i671
  %offset_ptr.i.i61.i.i677 = getelementptr i32, ptr %offset_tbl.i.i56.i.i672, i64 %hash.i.i.i60.i.i676
  %offset.i.i62.i.i678 = load i32, ptr %offset_ptr.i.i61.i.i677, align 4
  %eq.i.i364.i = icmp eq i32 %4086, %offset.i.i62.i.i678
  call void @llvm.assume(i1 %eq.i.i364.i) #30
  %4088 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %4089 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4080)
  %4090 = sext i32 %4086 to i64
  %4091 = getelementptr ptr, ptr %4080, i64 %4090
  %4092 = getelementptr i8, ptr %4091, i64 64
  %4093 = load ptr, ptr %4092, align 8
  %4094 = call ptr %4093({ ptr, ptr, ptr, i32 } %4087, ptr nonnull %0)
  %4095 = call i32 %4094({ ptr, ptr, ptr, i32 } %4087, { ptr, ptr, ptr, i32 } %4087, ptr nonnull %0)
  %4096 = add i32 %4095, -1
  %4097 = and i32 %4096, %4078
  %4098 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  br label %4099

4099:                                             ; preds = %4148, %HashMap_insert_keyK_valueV.exit.i666
  %spec.store.select.i380.i = phi i32 [ %spec.store.select.i.i712, %4148 ], [ -1, %HashMap_insert_keyK_valueV.exit.i666 ]
  %.0..0..0..i.i679 = phi i32 [ %4166, %4148 ], [ %4097, %HashMap_insert_keyK_valueV.exit.i666 ]
  %4100 = load ptr, ptr %3697, align 8
  %4101 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4100, 0
  %4102 = load ptr, ptr %3698, align 8
  %4103 = insertvalue { ptr, ptr, ptr, i32 } %4101, ptr %4102, 1
  %4104 = load ptr, ptr %3699, align 8
  %4105 = insertvalue { ptr, ptr, ptr, i32 } %4103, ptr %4104, 2
  %4106 = load i32, ptr %3700, align 4
  %4107 = insertvalue { ptr, ptr, ptr, i32 } %4105, i32 %4106, 3
  %hash_coef_ptr.i.i65.i.i680 = getelementptr i8, ptr %4100, i64 8
  %tbl_size_ptr.i.i66.i.i681 = getelementptr i8, ptr %4100, i64 16
  %offset_tbl_ptr.i.i67.i.i682 = getelementptr i8, ptr %4100, i64 40
  %hash_coef.i.i68.i.i683 = load i64, ptr %hash_coef_ptr.i.i65.i.i680, align 4
  %tbl_size.i.i69.i.i684 = load i64, ptr %tbl_size_ptr.i.i66.i.i681, align 4
  %offset_tbl.i.i70.i.i685 = load ptr, ptr %offset_tbl_ptr.i.i67.i.i682, align 8
  %product.i.i.i71.i.i686 = mul i64 %hash_coef.i.i68.i.i683, -5261542750394134544
  %shifted.i.i.i72.i.i687 = lshr i64 %product.i.i.i71.i.i686, 32
  %xored.i.i.i73.i.i688 = xor i64 %shifted.i.i.i72.i.i687, %product.i.i.i71.i.i686
  %hash.i.i.i74.i.i689 = and i64 %xored.i.i.i73.i.i688, %tbl_size.i.i69.i.i684
  %offset_ptr.i.i75.i.i690 = getelementptr i32, ptr %offset_tbl.i.i70.i.i685, i64 %hash.i.i.i74.i.i689
  %offset.i.i76.i.i691 = load i32, ptr %offset_ptr.i.i75.i.i690, align 4
  %eq.i79.i.i692 = icmp eq i32 %4106, %offset.i.i76.i.i691
  call void @llvm.assume(i1 %eq.i79.i.i692) #30
  %4108 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  store ptr @_parameterization_Ptri32, ptr %3, align 8
  %4109 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %3)
  %4110 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4100)
  %4111 = sext i32 %4106 to i64
  %4112 = getelementptr ptr, ptr %4100, i64 %4111
  %4113 = getelementptr i8, ptr %4112, i64 120
  %4114 = load ptr, ptr %4113, align 8
  store ptr @i32_typ, ptr %4, align 8
  %4115 = call ptr %4114({ ptr, ptr, ptr, i32 } %4107, ptr nonnull %4)
  %4116 = call { ptr, i160 } %4115({ ptr, ptr, ptr, i32 } %4107, { ptr, ptr, ptr, i32 } %4107, ptr nonnull %3, i32 %.0..0..0..i.i679)
  %.fca.0.extract36.i.i693 = extractvalue { ptr, i160 } %4116, 0
  %4117 = icmp eq ptr %.fca.0.extract36.i.i693, @nil_typ
  %4118 = icmp eq ptr %.fca.0.extract36.i.i693, null
  %4119 = or i1 %4117, %4118
  br i1 %4119, label %4167, label %4120

4120:                                             ; preds = %4099
  %.fca.1.extract38.i.i694 = extractvalue { ptr, i160 } %4116, 1
  %.sroa.5.8.extract.shift.i.i695 = lshr i160 %.fca.1.extract38.i.i694, 64
  %.sroa.5.8.extract.trunc.i.i696 = trunc i160 %.sroa.5.8.extract.shift.i.i695 to i64
  %.sroa.2.8.extract.trunc165.i.i697 = trunc i160 %.fca.1.extract38.i.i694 to i64
  %4121 = inttoptr i64 %.sroa.2.8.extract.trunc165.i.i697 to ptr
  %4122 = inttoptr i64 %.sroa.5.8.extract.trunc.i.i696 to ptr
  %hash_coef_ptr.i.i81.i.i698 = getelementptr i8, ptr %.fca.0.extract36.i.i693, i64 8
  %tbl_size_ptr.i.i82.i.i699 = getelementptr i8, ptr %.fca.0.extract36.i.i693, i64 16
  %offset_tbl_ptr.i.i83.i.i700 = getelementptr i8, ptr %.fca.0.extract36.i.i693, i64 40
  %hash_coef.i.i84.i.i701 = load i64, ptr %hash_coef_ptr.i.i81.i.i698, align 4
  %tbl_size.i.i85.i.i702 = load i64, ptr %tbl_size_ptr.i.i82.i.i699, align 4
  %offset_tbl.i.i86.i.i703 = load ptr, ptr %offset_tbl_ptr.i.i83.i.i700, align 8
  %product.i.i.i87.i.i704 = mul i64 %hash_coef.i.i84.i.i701, 4015701072841558310
  %shifted.i.i.i88.i.i705 = lshr i64 %product.i.i.i87.i.i704, 32
  %xored.i.i.i89.i.i706 = xor i64 %shifted.i.i.i88.i.i705, %product.i.i.i87.i.i704
  %hash.i.i.i90.i.i707 = and i64 %xored.i.i.i89.i.i706, %tbl_size.i.i85.i.i702
  %offset_ptr.i.i91.i.i708 = getelementptr i32, ptr %offset_tbl.i.i86.i.i703, i64 %hash.i.i.i90.i.i707
  %offset.i.i92.i.i709 = load i32, ptr %offset_ptr.i.i91.i.i708, align 4
  %4123 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract36.i.i693, 0
  %4124 = insertvalue { ptr, ptr, ptr, i32 } %4123, ptr %4121, 1
  %4125 = insertvalue { ptr, ptr, ptr, i32 } %4124, ptr %4122, 2
  %4126 = insertvalue { ptr, ptr, ptr, i32 } %4125, i32 %offset.i.i92.i.i709, 3
  %4127 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %4128 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %4129 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i.i693)
  %4130 = sext i32 %offset.i.i92.i.i709 to i64
  %4131 = getelementptr ptr, ptr %.fca.0.extract36.i.i693, i64 %4130
  %4132 = getelementptr i8, ptr %4131, i64 64
  %4133 = load ptr, ptr %4132, align 8
  %4134 = call ptr %4133({ ptr, ptr, ptr, i32 } %4126, ptr nonnull %0)
  %4135 = call i32 %4134({ ptr, ptr, ptr, i32 } %4126, { ptr, ptr, ptr, i32 } %4126, ptr nonnull %0)
  %4136 = icmp eq i32 %4135, %4078
  %4137 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %4138 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %4139 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i.i693)
  %4140 = getelementptr i8, ptr %4131, i64 48
  %4141 = load ptr, ptr %4140, align 8
  %4142 = call ptr %4141({ ptr, ptr, ptr, i32 } %4126, ptr nonnull %0)
  %4143 = call { ptr, i160 } %4142({ ptr, ptr, ptr, i32 } %4126, { ptr, ptr, ptr, i32 } %4126, ptr nonnull %0)
  %4144 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %4145 = load ptr, ptr %3685, align 8
  %4146 = call i1 %4145({ ptr, i160 } %4143, { ptr, i160 } %3724)
  %4147 = and i1 %4136, %4146
  br i1 %4147, label %HashMap_find_slot_keyK_hashPtri32.exit.i713, label %4148

4148:                                             ; preds = %4120
  %4149 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %4150 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %4151 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract36.i.i693)
  %4152 = getelementptr i8, ptr %4131, i64 56
  %4153 = load ptr, ptr %4152, align 8
  %4154 = call ptr %4153({ ptr, ptr, ptr, i32 } %4126, ptr nonnull %0)
  %4155 = call { ptr, i160 } %4154({ ptr, ptr, ptr, i32 } %4126, { ptr, ptr, ptr, i32 } %4126, ptr nonnull %0)
  %.fca.0.extract15.i.i710 = extractvalue { ptr, i160 } %4155, 0
  %4156 = getelementptr i8, ptr %.fca.0.extract15.i.i710, i64 8
  %4157 = getelementptr i8, ptr %.fca.0.extract15.i.i710, i64 16
  %4158 = getelementptr i8, ptr %.fca.0.extract15.i.i710, i64 24
  %4159 = getelementptr i8, ptr %.fca.0.extract15.i.i710, i64 32
  %4160 = load i64, ptr %4156, align 4
  %4161 = load i64, ptr %4157, align 4
  %4162 = load ptr, ptr %4158, align 8
  %4163 = load ptr, ptr %4159, align 8
  %result.i.i366.i = call i1 %4162(i64 %4161, i64 %4160, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %4163) #3
  %4164 = icmp eq i32 %spec.store.select.i380.i, -1
  %or.cond.i.i711 = select i1 %result.i.i366.i, i1 %4164, i1 false
  %spec.store.select.i.i712 = select i1 %or.cond.i.i711, i32 %.0..0..0..i.i679, i32 %spec.store.select.i380.i
  %4165 = add i32 %.0..0..0..i.i679, 1
  %4166 = and i32 %4165, %4096
  br label %4099

4167:                                             ; preds = %4099
  %4168 = icmp eq i32 %spec.store.select.i380.i, -1
  %.pre.i765 = select i1 %4168, i32 %.0..0..0..i.i679, i32 %spec.store.select.i380.i
  br label %HashMap_find_slot_keyK_hashPtri32.exit.i713

HashMap_find_slot_keyK_hashPtri32.exit.i713:      ; preds = %4120, %4167
  %4169 = phi i32 [ %.pre.i765, %4167 ], [ %.0..0..0..i.i679, %4120 ]
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  %4170 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %4171 = load ptr, ptr %3697, align 8
  %4172 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4171, 0
  %4173 = load ptr, ptr %3698, align 8
  %4174 = insertvalue { ptr, ptr, ptr, i32 } %4172, ptr %4173, 1
  %4175 = load ptr, ptr %3699, align 8
  %4176 = insertvalue { ptr, ptr, ptr, i32 } %4174, ptr %4175, 2
  %4177 = load i32, ptr %3700, align 4
  %4178 = insertvalue { ptr, ptr, ptr, i32 } %4176, i32 %4177, 3
  %hash_coef_ptr.i.i56.i227.i = getelementptr i8, ptr %4171, i64 8
  %tbl_size_ptr.i.i57.i228.i = getelementptr i8, ptr %4171, i64 16
  %offset_tbl_ptr.i.i58.i229.i = getelementptr i8, ptr %4171, i64 40
  %hash_coef.i.i59.i230.i = load i64, ptr %hash_coef_ptr.i.i56.i227.i, align 4
  %tbl_size.i.i60.i231.i = load i64, ptr %tbl_size_ptr.i.i57.i228.i, align 4
  %offset_tbl.i.i61.i232.i = load ptr, ptr %offset_tbl_ptr.i.i58.i229.i, align 8
  %product.i.i.i62.i233.i = mul i64 %hash_coef.i.i59.i230.i, -5261542750394134544
  %shifted.i.i.i63.i234.i = lshr i64 %product.i.i.i62.i233.i, 32
  %xored.i.i.i64.i235.i = xor i64 %shifted.i.i.i63.i234.i, %product.i.i.i62.i233.i
  %hash.i.i.i65.i236.i = and i64 %xored.i.i.i64.i235.i, %tbl_size.i.i60.i231.i
  %offset_ptr.i.i66.i237.i = getelementptr i32, ptr %offset_tbl.i.i61.i232.i, i64 %hash.i.i.i65.i236.i
  %offset.i.i67.i238.i = load i32, ptr %offset_ptr.i.i66.i237.i, align 4
  %eq.i.i239.i = icmp eq i32 %4177, %offset.i.i67.i238.i
  call void @llvm.assume(i1 %eq.i.i239.i) #30
  store ptr @_parameterization_Ptri32, ptr %11, align 8
  %4179 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %11)
  %4180 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4171)
  %4181 = sext i32 %4177 to i64
  %4182 = getelementptr ptr, ptr %4171, i64 %4181
  %4183 = getelementptr i8, ptr %4182, i64 120
  %4184 = load ptr, ptr %4183, align 8
  store ptr @i32_typ, ptr %12, align 8
  %4185 = call ptr %4184({ ptr, ptr, ptr, i32 } %4178, ptr nonnull %12)
  %4186 = call { ptr, i160 } %4185({ ptr, ptr, ptr, i32 } %4178, { ptr, ptr, ptr, i32 } %4178, ptr nonnull %11, i32 %4169)
  %.fca.0.extract2.i.i714 = extractvalue { ptr, i160 } %4186, 0
  %4187 = load ptr, ptr %result.i.i632, align 8
  %4188 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %4189 = load ptr, ptr %3679, align 8
  %4190 = load ptr, ptr %4187, align 8
  %4191 = getelementptr i8, ptr %4190, i64 48
  %4192 = load ptr, ptr %4191, align 8
  %4193 = call { i64, i64 } %4192(ptr nonnull %4187)
  %4194 = extractvalue { i64, i64 } %4193, 0
  %4195 = extractvalue { i64, i64 } %4193, 1
  %4196 = call i64 @llvm.umax.i64(i64 %4195, i64 8)
  %4197 = urem i64 16, %4195
  %4198 = icmp eq i64 %4197, 0
  %4199 = sub i64 %4195, %4197
  %4200 = select i1 %4198, i64 0, i64 %4199
  %4201 = add i64 %4200, %4194
  %4202 = add i64 %4201, 16
  %4203 = and i64 %4201, 7
  %4204 = icmp eq i64 %4203, 0
  %4205 = sub nuw nsw i64 40, %4203
  %4206 = select i1 %4204, i64 32, i64 %4205
  %4207 = add i64 %4202, %4206
  %4208 = and i64 %4207, 3
  %4209 = icmp eq i64 %4208, 0
  %4210 = sub nuw nsw i64 8, %4208
  %4211 = select i1 %4209, i64 4, i64 %4210
  %4212 = add i64 %4211, %4207
  %4213 = urem i64 %4212, %4196
  %4214 = icmp eq i64 %4213, 0
  %4215 = sub i64 %4196, %4213
  %4216 = select i1 %4214, i64 0, i64 %4215
  %4217 = add i64 %4212, %4216
  %result.i.i240.i = call noalias ptr @bump_malloc_inner(i64 noundef %4217, ptr nonnull @current_ptr) #29
  store ptr %4187, ptr %result.i.i240.i, align 8
  %4218 = getelementptr i8, ptr %result.i.i240.i, i64 8
  store ptr %4189, ptr %4218, align 8
  %4219 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i.i240.i)
  store ptr @Entry, ptr %13, align 8
  store ptr %result.i.i240.i, ptr %3706, align 8
  store i32 9, ptr %3707, align 8
  %4220 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %13)
  %4221 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %4222 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %4223 = load ptr, ptr %4187, align 8
  %4224 = getelementptr i8, ptr %4223, i64 48
  %4225 = load ptr, ptr %4224, align 8
  %4226 = call { i64, i64 } %4225(ptr nonnull %4187)
  %4227 = extractvalue { i64, i64 } %4226, 1
  %4228 = urem i64 16, %4227
  %4229 = icmp eq i64 %4228, 0
  %reass.sub1545 = sub i64 %4227, %4228
  %4230 = add i64 %reass.sub1545, 16
  %4231 = select i1 %4229, i64 16, i64 %4230
  %4232 = getelementptr i8, ptr %result.i.i240.i, i64 %4231
  %4233 = load ptr, ptr %result.i.i240.i, align 8
  %4234 = load ptr, ptr %4233, align 8
  %4235 = getelementptr i8, ptr %4234, i64 64
  %4236 = load ptr, ptr %4235, align 8
  call void %4236({ ptr, i160 } %3724, ptr nonnull %4233, ptr %4232)
  %4237 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %4238 = load ptr, ptr %result.i.i240.i, align 8
  %4239 = load ptr, ptr %4238, align 8
  %4240 = getelementptr i8, ptr %4239, i64 48
  %4241 = load ptr, ptr %4240, align 8
  %4242 = call { i64, i64 } %4241(ptr nonnull %4238)
  %4243 = extractvalue { i64, i64 } %4242, 0
  %4244 = extractvalue { i64, i64 } %4242, 1
  %4245 = urem i64 16, %4244
  %4246 = icmp eq i64 %4245, 0
  %4247 = sub i64 %4244, %4245
  %4248 = select i1 %4246, i64 0, i64 %4247
  %4249 = add i64 %4248, %4243
  %4250 = and i64 %4249, 7
  %4251 = icmp eq i64 %4250, 0
  %4252 = sub nuw nsw i64 8, %4250
  %4253 = select i1 %4251, i64 0, i64 %4252
  %4254 = getelementptr i8, ptr %result.i.i240.i, i64 %4249
  %4255 = getelementptr i8, ptr %4254, i64 16
  %4256 = getelementptr i8, ptr %4255, i64 %4253
  store ptr @i32_typ, ptr %4256, align 8
  %4257 = getelementptr i8, ptr %4256, i64 8
  store i160 %.sroa.07.0.insert.ext.i, ptr %4257, align 4
  %4258 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @Entry)
  %4259 = load ptr, ptr %result.i.i240.i, align 8
  %4260 = load ptr, ptr %4259, align 8
  %4261 = getelementptr i8, ptr %4260, i64 48
  %4262 = load ptr, ptr %4261, align 8
  %4263 = call { i64, i64 } %4262(ptr nonnull %4259)
  %4264 = extractvalue { i64, i64 } %4263, 0
  %4265 = extractvalue { i64, i64 } %4263, 1
  %4266 = urem i64 16, %4265
  %4267 = icmp eq i64 %4266, 0
  %4268 = sub i64 %4265, %4266
  %4269 = select i1 %4267, i64 0, i64 %4268
  %4270 = add i64 %4269, %4264
  %4271 = add i64 %4270, 16
  %4272 = and i64 %4270, 7
  %4273 = icmp eq i64 %4272, 0
  %4274 = sub nuw nsw i64 40, %4272
  %4275 = select i1 %4273, i64 32, i64 %4274
  %4276 = add i64 %4271, %4275
  %4277 = and i64 %4276, 3
  %4278 = icmp eq i64 %4277, 0
  %4279 = sub nuw nsw i64 4, %4277
  %4280 = select i1 %4278, i64 0, i64 %4279
  %4281 = getelementptr i8, ptr %result.i.i240.i, i64 %4276
  %4282 = getelementptr i8, ptr %4281, i64 %4280
  store i32 %4078, ptr %4282, align 4
  %4283 = load ptr, ptr %3708, align 8
  %4284 = ptrtoint ptr %result.i.i240.i to i64
  %4285 = ptrtoint ptr %4283 to i64
  %.sroa.2.0.insert.ext.i.i716 = zext i64 %4285 to i160
  %.sroa.2.0.insert.shift.i.i717 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i.i716, 64
  %.sroa.0.0.insert.ext.i.i718 = zext i64 %4284 to i160
  %.sroa.2.0.insert.insert.i.i719 = or disjoint i160 %.sroa.2.0.insert.shift.i.i717, %.sroa.0.0.insert.ext.i.i718
  %.sroa.0.0.insert.insert.i.i720 = or disjoint i160 %.sroa.2.0.insert.insert.i.i719, 3062541302288446171170371466885913903104
  %4286 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0.0.insert.insert.i.i720, 1
  %4287 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %4288 = load ptr, ptr %3697, align 8
  %4289 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4288, 0
  %4290 = load ptr, ptr %3698, align 8
  %4291 = insertvalue { ptr, ptr, ptr, i32 } %4289, ptr %4290, 1
  %4292 = load ptr, ptr %3699, align 8
  %4293 = insertvalue { ptr, ptr, ptr, i32 } %4291, ptr %4292, 2
  %4294 = load i32, ptr %3700, align 4
  %4295 = insertvalue { ptr, ptr, ptr, i32 } %4293, i32 %4294, 3
  %hash_coef_ptr.i.i84.i.i721 = getelementptr i8, ptr %4288, i64 8
  %tbl_size_ptr.i.i85.i.i722 = getelementptr i8, ptr %4288, i64 16
  %offset_tbl_ptr.i.i86.i.i723 = getelementptr i8, ptr %4288, i64 40
  %hash_coef.i.i87.i.i724 = load i64, ptr %hash_coef_ptr.i.i84.i.i721, align 4
  %tbl_size.i.i88.i.i725 = load i64, ptr %tbl_size_ptr.i.i85.i.i722, align 4
  %offset_tbl.i.i89.i.i726 = load ptr, ptr %offset_tbl_ptr.i.i86.i.i723, align 8
  %product.i.i.i90.i.i727 = mul i64 %hash_coef.i.i87.i.i724, -5261542750394134544
  %shifted.i.i.i91.i.i728 = lshr i64 %product.i.i.i90.i.i727, 32
  %xored.i.i.i92.i.i729 = xor i64 %shifted.i.i.i91.i.i728, %product.i.i.i90.i.i727
  %hash.i.i.i93.i.i730 = and i64 %xored.i.i.i92.i.i729, %tbl_size.i.i88.i.i725
  %offset_ptr.i.i94.i.i731 = getelementptr i32, ptr %offset_tbl.i.i89.i.i726, i64 %hash.i.i.i93.i.i730
  %offset.i.i95.i.i732 = load i32, ptr %offset_ptr.i.i94.i.i731, align 4
  %eq.i98.i.i733 = icmp eq i32 %4294, %offset.i.i95.i.i732
  call void @llvm.assume(i1 %eq.i98.i.i733) #30
  %4296 = load ptr, ptr %result.i.i632, align 8
  %4297 = load ptr, ptr %3679, align 8
  %result.i99.i.i734 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %4298 = getelementptr i8, ptr %result.i99.i.i734, i64 16
  store ptr %4297, ptr %4298, align 8
  %4299 = getelementptr i8, ptr %result.i99.i.i734, i64 8
  store ptr %4296, ptr %4299, align 8
  %4300 = getelementptr i8, ptr %result.i99.i.i734, i64 24
  store ptr null, ptr %4300, align 8
  %4301 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i99.i.i734)
  store ptr @Entry, ptr %result.i99.i.i734, align 8
  store ptr @_parameterization_Ptri32, ptr %14, align 8
  store ptr %result.i99.i.i734, ptr %3709, align 8
  %4302 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %14)
  %4303 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4288)
  %4304 = sext i32 %4294 to i64
  %4305 = getelementptr ptr, ptr %4288, i64 %4304
  %4306 = getelementptr i8, ptr %4305, i64 128
  %4307 = load ptr, ptr %4306, align 8
  store ptr @i32_typ, ptr %15, align 8
  store ptr @Entry, ptr %3710, align 8
  %4308 = call ptr %4307({ ptr, ptr, ptr, i32 } %4295, ptr nonnull %15)
  call void %4308({ ptr, ptr, ptr, i32 } %4295, { ptr, ptr, ptr, i32 } %4295, ptr nonnull %14, i32 %4169, { ptr, i160 } %4286)
  %4309 = icmp eq ptr %.fca.0.extract2.i.i714, @nil_typ
  %4310 = icmp eq ptr %.fca.0.extract2.i.i714, null
  %4311 = or i1 %4309, %4310
  br i1 %4311, label %._crit_edge.thread.i.i764, label %._crit_edge.i.i735

._crit_edge.thread.i.i764:                        ; preds = %HashMap_find_slot_keyK_hashPtri32.exit.i713
  %4312 = load i32, ptr %3711, align 4
  %4313 = add i32 %4312, 1
  store i32 %4313, ptr %3711, align 4
  br label %._crit_edge1.sink.split.i.i762

._crit_edge.i.i735:                               ; preds = %HashMap_find_slot_keyK_hashPtri32.exit.i713
  %.fca.1.extract4.i.i736 = extractvalue { ptr, i160 } %4186, 1
  %.sroa.3192.8.extract.trunc.i.i737 = trunc i160 %.fca.1.extract4.i.i736 to i64
  %4314 = inttoptr i64 %.sroa.3192.8.extract.trunc.i.i737 to ptr
  %.sroa.5193.8.extract.shift.i.i738 = lshr i160 %.fca.1.extract4.i.i736, 64
  %.sroa.5193.8.extract.trunc.i.i739 = trunc i160 %.sroa.5193.8.extract.shift.i.i738 to i64
  %4315 = inttoptr i64 %.sroa.5193.8.extract.trunc.i.i739 to ptr
  %hash_coef_ptr.i.i101.i.i740 = getelementptr i8, ptr %.fca.0.extract2.i.i714, i64 8
  %tbl_size_ptr.i.i102.i.i741 = getelementptr i8, ptr %.fca.0.extract2.i.i714, i64 16
  %offset_tbl_ptr.i.i103.i.i742 = getelementptr i8, ptr %.fca.0.extract2.i.i714, i64 40
  %hash_coef.i.i104.i.i743 = load i64, ptr %hash_coef_ptr.i.i101.i.i740, align 4
  %tbl_size.i.i105.i.i744 = load i64, ptr %tbl_size_ptr.i.i102.i.i741, align 4
  %offset_tbl.i.i106.i.i745 = load ptr, ptr %offset_tbl_ptr.i.i103.i.i742, align 8
  %product.i.i.i107.i.i746 = mul i64 %hash_coef.i.i104.i.i743, 4015701072841558310
  %shifted.i.i.i108.i.i747 = lshr i64 %product.i.i.i107.i.i746, 32
  %xored.i.i.i109.i.i748 = xor i64 %shifted.i.i.i108.i.i747, %product.i.i.i107.i.i746
  %hash.i.i.i110.i.i749 = and i64 %xored.i.i.i109.i.i748, %tbl_size.i.i105.i.i744
  %offset_ptr.i.i111.i.i750 = getelementptr i32, ptr %offset_tbl.i.i106.i.i745, i64 %hash.i.i.i110.i.i749
  %offset.i.i112.i.i751 = load i32, ptr %offset_ptr.i.i111.i.i750, align 4
  %4316 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract2.i.i714, 0
  %4317 = insertvalue { ptr, ptr, ptr, i32 } %4316, ptr %4314, 1
  %4318 = insertvalue { ptr, ptr, ptr, i32 } %4317, ptr %4315, 2
  %4319 = insertvalue { ptr, ptr, ptr, i32 } %4318, i32 %offset.i.i112.i.i751, 3
  %4320 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %4321 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %4322 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract2.i.i714)
  %4323 = sext i32 %offset.i.i112.i.i751 to i64
  %4324 = getelementptr ptr, ptr %.fca.0.extract2.i.i714, i64 %4323
  %4325 = getelementptr i8, ptr %4324, i64 56
  %4326 = load ptr, ptr %4325, align 8
  %4327 = call ptr %4326({ ptr, ptr, ptr, i32 } %4319, ptr nonnull %0)
  %4328 = call { ptr, i160 } %4327({ ptr, ptr, ptr, i32 } %4319, { ptr, ptr, ptr, i32 } %4319, ptr nonnull %0)
  %.fca.0.extract45.i.i752 = extractvalue { ptr, i160 } %4328, 0
  %4329 = getelementptr i8, ptr %.fca.0.extract45.i.i752, i64 8
  %4330 = getelementptr i8, ptr %.fca.0.extract45.i.i752, i64 16
  %4331 = getelementptr i8, ptr %.fca.0.extract45.i.i752, i64 24
  %4332 = getelementptr i8, ptr %.fca.0.extract45.i.i752, i64 32
  %4333 = load i64, ptr %4329, align 4
  %4334 = load i64, ptr %4330, align 4
  %4335 = load ptr, ptr %4331, align 8
  %4336 = load ptr, ptr %4332, align 8
  %result.i114.i.i753 = call i1 %4335(i64 %4334, i64 %4333, i64 -8477883990763853851, i64 ptrtoint (ptr @Tombstone to i64), ptr readonly %4336) #3
  br i1 %result.i114.i.i753, label %._crit_edge1.sink.split.i.i762, label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit.i754

._crit_edge1.sink.split.i.i762:                   ; preds = %._crit_edge.i.i735, %._crit_edge.thread.i.i764
  %.sink202.i.i763 = phi i64 [ 40, %._crit_edge.thread.i.i764 ], [ 32, %._crit_edge.i.i735 ]
  %4337 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %4338 = getelementptr i8, ptr getelementptr inbounds (i8, ptr @HashMap, i64 72), i64 %.sink202.i.i763
  %4339 = load ptr, ptr %4338, align 8
  %4340 = load ptr, ptr %4339, align 8
  %4341 = call i32 %4340(ptr nonnull %result.i.i632)
  %4342 = add i32 %4341, 1
  %4343 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %4344 = getelementptr i8, ptr %4339, i64 8
  %4345 = load ptr, ptr %4344, align 8
  call void %4345(ptr nonnull %result.i.i632, i32 %4342)
  br label %HashMap_insert_internal_keyK_valueV_hashPtri32.exit.i754

HashMap_insert_internal_keyK_valueV_hashPtri32.exit.i754: ; preds = %._crit_edge1.sink.split.i.i762, %._crit_edge.i.i735
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %11)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %12)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %13)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %14)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %15)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  %4346 = add nuw nsw i32 %.reg2mem16.092.i, 1
  %4347 = icmp ult i32 %.reg2mem16.092.i, 1999999
  br i1 %4347, label %._crit_edge.i639, label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit82.i

IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit82.i: ; preds = %HashMap_insert_internal_keyK_valueV_hashPtri32.exit.i754
  %4348 = call i64 @clock()
  %4349 = call ptr @llvm.invariant.start.p0(i64 568, ptr nonnull @HashMap)
  %4350 = load i32, ptr %3711, align 4
  %result.i41.i = call noalias dereferenceable_or_null(17) ptr @bump_malloc_inner(i64 noundef 17, ptr nonnull @current_ptr) #29
  store <16 x i8> <i8 73, i8 110, i8 115, i8 101, i8 114, i8 116, i8 32, i8 72, i8 101, i8 97, i8 118, i8 121, i8 32, i8 77, i8 105, i8 120>, ptr %result.i41.i, align 16
  %result.i42.i755 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %4351 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %result.i42.i755, 1
  %4352 = insertvalue { ptr, ptr, ptr, i32 } %4351, ptr undef, 2
  %4353 = insertvalue { ptr, ptr, ptr, i32 } %4352, i32 9, 3
  store ptr %result.i41.i, ptr %result.i42.i755, align 8
  %4354 = getelementptr i8, ptr %result.i42.i755, i64 8
  store i32 16, ptr %4354, align 4
  %4355 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %4356 = getelementptr i8, ptr %result.i42.i755, i64 12
  store i32 17, ptr %4356, align 4
  %4357 = sub i64 %4348, %3704
  call void @print_benchmark_result({ ptr, ptr, ptr, i32 } %4353, i32 2000000, i64 %4357)
  %result.i43.i756 = call noalias dereferenceable_or_null(22) ptr @bump_malloc_inner(i64 noundef 22, ptr nonnull @current_ptr) #29
  store <21 x i8> <i8 32, i8 32, i8 32, i8 32, i8 40, i8 102, i8 105, i8 110, i8 97, i8 108, i8 32, i8 109, i8 97, i8 112, i8 32, i8 115, i8 105, i8 122, i8 101, i8 58, i8 32>, ptr %result.i43.i756, align 32
  %result.i44.i757 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %4358 = getelementptr inbounds i8, ptr %18, i64 8
  %4359 = getelementptr inbounds i8, ptr %18, i64 24
  store ptr @String, ptr %18, align 8
  store ptr %result.i44.i757, ptr %4358, align 8
  store i32 9, ptr %4359, align 8
  %4360 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %18)
  store ptr %result.i43.i756, ptr %result.i44.i757, align 8
  %4361 = getelementptr i8, ptr %result.i44.i757, i64 8
  store i32 21, ptr %4361, align 4
  %4362 = getelementptr i8, ptr %result.i44.i757, i64 12
  store i32 22, ptr %4362, align 4
  %4363 = load i160, ptr %4358, align 8
  %4364 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  %.sroa.3.8.extract.trunc.i.i758 = trunc i160 %4363 to i64
  %4365 = inttoptr i64 %.sroa.3.8.extract.trunc.i.i758 to ptr
  %4366 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %4367 = getelementptr i8, ptr %4365, i64 8
  %4368 = load i32, ptr %4367, align 4
  %4369 = add i32 %4368, 1
  %4370 = sext i32 %4369 to i64
  %result.i.i260.i = call noalias ptr @bump_malloc_inner(i64 noundef %4370, ptr nonnull @current_ptr) #29
  %4371 = load i32, ptr %4367, align 4
  %4372 = icmp sgt i32 %4371, 0
  br i1 %4372, label %.lr.ph.i.i761, label %String_c_string_.exit.i759

.lr.ph.i.i761:                                    ; preds = %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit82.i
  %4373 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %4374 = load ptr, ptr %4365, align 8
  %4375 = zext nneg i32 %4371 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i260.i, ptr align 1 %4374, i64 %4375, i1 false)
  br label %String_c_string_.exit.i759

String_c_string_.exit.i759:                       ; preds = %.lr.ph.i.i761, %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit82.i
  %4376 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %4377 = sext i32 %4371 to i64
  %4378 = getelementptr i8, ptr %result.i.i260.i, i64 %4377
  store i8 0, ptr %4378, align 1
  %puts.i.i760 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i260.i)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  %4379 = call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i32_string, i32 %4350)
  %result.i63.i = call noalias dereferenceable_or_null(2) ptr @bump_malloc_inner(i64 noundef 2, ptr nonnull @current_ptr) #29
  store <1 x i8> <i8 41>, ptr %result.i63.i, align 1
  %result.i64.i = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %4380 = getelementptr inbounds i8, ptr %19, i64 8
  %4381 = getelementptr inbounds i8, ptr %19, i64 24
  store ptr @String, ptr %19, align 8
  store ptr %result.i64.i, ptr %4380, align 8
  store i32 9, ptr %4381, align 8
  %4382 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %19)
  store ptr %result.i63.i, ptr %result.i64.i, align 8
  %4383 = getelementptr i8, ptr %result.i64.i, i64 8
  store i32 1, ptr %4383, align 4
  %4384 = getelementptr i8, ptr %result.i64.i, i64 12
  store i32 2, ptr %4384, align 4
  %4385 = load i160, ptr %4380, align 8
  %4386 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  %.sroa.3.8.extract.trunc.i192.i = trunc i160 %4385 to i64
  %4387 = inttoptr i64 %.sroa.3.8.extract.trunc.i192.i to ptr
  %4388 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %4389 = getelementptr i8, ptr %4387, i64 8
  %4390 = load i32, ptr %4389, align 4
  %4391 = add i32 %4390, 1
  %4392 = sext i32 %4391 to i64
  %result.i.i276.i = call noalias ptr @bump_malloc_inner(i64 noundef %4392, ptr nonnull @current_ptr) #29
  %4393 = load i32, ptr %4389, align 4
  %4394 = icmp sgt i32 %4393, 0
  br i1 %4394, label %.lr.ph.i277.i, label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit826

.lr.ph.i277.i:                                    ; preds = %String_c_string_.exit.i759
  %4395 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %4396 = load ptr, ptr %4387, align 8
  %4397 = zext nneg i32 %4393 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i276.i, ptr align 1 %4396, i64 %4397, i1 false)
  br label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit826

IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit826: ; preds = %.lr.ph.i277.i, %String_c_string_.exit.i759
  %4398 = sext i32 %4393 to i64
  %4399 = getelementptr i8, ptr %result.i.i276.i, i64 %4398
  store i8 0, ptr %4399, align 1
  %puts.i208.i = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i276.i)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %18)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %19)
  %result.i807 = call noalias dereferenceable_or_null(28) ptr @bump_malloc_inner(i64 noundef 28, ptr nonnull @current_ptr) #29
  store <27 x i8> <i8 45, i8 45, i8 45, i8 32, i8 66, i8 101, i8 110, i8 99, i8 104, i8 109, i8 97, i8 114, i8 107, i8 115, i8 32, i8 67, i8 111, i8 109, i8 112, i8 108, i8 101, i8 116, i8 101, i8 32, i8 45, i8 45, i8 45>, ptr %result.i807, align 32
  %result.i808 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %4400 = getelementptr inbounds i8, ptr %120, i64 8
  %4401 = getelementptr inbounds i8, ptr %120, i64 24
  store ptr @String, ptr %120, align 8
  store ptr %result.i808, ptr %4400, align 8
  store i32 9, ptr %4401, align 8
  %4402 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %120)
  store ptr %result.i807, ptr %result.i808, align 8
  %4403 = getelementptr i8, ptr %result.i808, i64 8
  store i32 27, ptr %4403, align 4
  %4404 = getelementptr i8, ptr %result.i808, i64 12
  store i32 28, ptr %4404, align 4
  %4405 = load i160, ptr %4400, align 8
  %4406 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  %.sroa.3.8.extract.trunc.i1089 = trunc i160 %4405 to i64
  %4407 = inttoptr i64 %.sroa.3.8.extract.trunc.i1089 to ptr
  %4408 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %4409 = getelementptr i8, ptr %4407, i64 8
  %4410 = load i32, ptr %4409, align 4
  %4411 = add i32 %4410, 1
  %4412 = sext i32 %4411 to i64
  %result.i.i1366 = call noalias ptr @bump_malloc_inner(i64 noundef %4412, ptr nonnull @current_ptr) #29
  %4413 = load i32, ptr %4409, align 4
  %4414 = icmp sgt i32 %4413, 0
  br i1 %4414, label %.lr.ph.i1367, label %String_c_string_.exit1371

.lr.ph.i1367:                                     ; preds = %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit826
  %4415 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %4416 = load ptr, ptr %4407, align 8
  %4417 = zext nneg i32 %4413 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i1366, ptr align 1 %4416, i64 %4417, i1 false)
  br label %String_c_string_.exit1371

String_c_string_.exit1371:                        ; preds = %.lr.ph.i1367, %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit826
  %4418 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %4419 = sext i32 %4413 to i64
  %4420 = getelementptr i8, ptr %result.i.i1366, i64 %4419
  store i8 0, ptr %4420, align 1
  %puts.i1105 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i1366)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  ret i32 0
}

define { i64, i64 } @_size_Pair(ptr nocapture readonly %0) {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr i8, ptr %4, i64 48
  %6 = load ptr, ptr %5, align 8
  %7 = tail call { i64, i64 } %6(ptr nonnull %3)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = extractvalue { i64, i64 } %7, 1
  %10 = urem i64 16, %9
  %11 = icmp eq i64 %10, 0
  %12 = sub i64 %9, %10
  %13 = select i1 %11, i64 0, i64 %12
  %14 = add i64 %8, 16
  %15 = add i64 %14, %13
  %16 = getelementptr i8, ptr %0, i64 16
  %17 = load ptr, ptr %16, align 8
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr i8, ptr %18, i64 48
  %20 = load ptr, ptr %19, align 8
  %21 = tail call { i64, i64 } %20(ptr nonnull %17)
  %22 = extractvalue { i64, i64 } %21, 0
  %23 = extractvalue { i64, i64 } %21, 1
  %24 = tail call i64 @llvm.umax.i64(i64 %9, i64 %23)
  %25 = tail call i64 @llvm.umax.i64(i64 %24, i64 8)
  %26 = urem i64 %15, %23
  %27 = icmp eq i64 %26, 0
  %28 = sub i64 %23, %26
  %29 = select i1 %27, i64 0, i64 %28
  %30 = add i64 %22, %15
  %31 = add i64 %30, %29
  %32 = urem i64 %31, %25
  %33 = icmp eq i64 %32, 0
  %34 = sub i64 %25, %32
  %35 = select i1 %33, i64 0, i64 %34
  %36 = add i64 %31, %35
  %37 = insertvalue { i64, i64 } undef, i64 %36, 0
  %38 = insertvalue { i64, i64 } %37, i64 %25, 1
  ret { i64, i64 } %38
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @Pair_field_Pair_0(ptr nocapture readonly %0) #3 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @Pair_field_Pair_1(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Pair_B_init_firstT_secondU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 128
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Pair_B_first_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 136
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Pair_B_second_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 144
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @Pair_init_firstT_secondU({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, i160 } %3, { ptr, i160 } %4) {
  %.fca.0.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract11, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract11, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract11, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 9197944775169318296
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %6 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr %.fca.0.extract11)
  %7 = sext i32 %offset.i.i to i64
  %8 = getelementptr ptr, ptr %.fca.0.extract11, i64 %7
  %9 = getelementptr i8, ptr %8, i64 16
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr i8, ptr %10, i64 8
  %12 = load ptr, ptr %11, align 8
  tail call void %12(ptr %.fca.1.extract12, { ptr, i160 } %3)
  %13 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr %.fca.0.extract11)
  %14 = getelementptr i8, ptr %8, i64 24
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = load ptr, ptr %16, align 8
  tail call void %17(ptr %.fca.1.extract12, { ptr, i160 } %4)
  ret void
}

define { ptr, i160 } @Pair_first_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 9197944775169318296
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %4 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr %.fca.0.extract3)
  %5 = sext i32 %offset.i.i to i64
  %6 = getelementptr ptr, ptr %.fca.0.extract3, i64 %5
  %7 = getelementptr i8, ptr %6, i64 16
  %8 = load ptr, ptr %7, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = tail call { ptr, i160 } %9(ptr %.fca.1.extract4)
  ret { ptr, i160 } %10
}

define { ptr, i160 } @Pair_second_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 9197944775169318296
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %4 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr %.fca.0.extract3)
  %5 = sext i32 %offset.i.i to i64
  %6 = getelementptr ptr, ptr %.fca.0.extract3, i64 %5
  %7 = getelementptr i8, ptr %6, i64 24
  %8 = load ptr, ptr %7, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = tail call { ptr, i160 } %9(ptr %.fca.1.extract4)
  ret { ptr, i160 } %10
}

define { ptr, i160 } @Pair_getter_second(ptr %0) {
  %2 = load ptr, ptr %0, align 8
  %3 = load ptr, ptr %2, align 8
  %4 = getelementptr i8, ptr %3, i64 48
  %5 = load ptr, ptr %4, align 8
  %6 = tail call { i64, i64 } %5(ptr nonnull %2)
  %7 = extractvalue { i64, i64 } %6, 0
  %8 = extractvalue { i64, i64 } %6, 1
  %9 = urem i64 16, %8
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 %8, %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %7, 16
  %14 = add i64 %13, %12
  %15 = getelementptr i8, ptr %0, i64 8
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = getelementptr i8, ptr %17, i64 48
  %19 = load ptr, ptr %18, align 8
  %20 = tail call { i64, i64 } %19(ptr nonnull %16)
  %21 = extractvalue { i64, i64 } %20, 1
  %22 = urem i64 %14, %21
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 %21, %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = getelementptr i8, ptr %0, i64 %14
  %27 = getelementptr i8, ptr %26, i64 %25
  %28 = load ptr, ptr %15, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 56
  %31 = load ptr, ptr %30, align 8
  %32 = tail call { ptr, i160 } %31(ptr %27, ptr nonnull %28)
  ret { ptr, i160 } %32
}

define void @Pair_setter_second(ptr %0, { ptr, i160 } %1) {
  %3 = load ptr, ptr %0, align 8
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr i8, ptr %4, i64 48
  %6 = load ptr, ptr %5, align 8
  %7 = tail call { i64, i64 } %6(ptr nonnull %3)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = extractvalue { i64, i64 } %7, 1
  %10 = urem i64 16, %9
  %11 = icmp eq i64 %10, 0
  %12 = sub i64 %9, %10
  %13 = select i1 %11, i64 0, i64 %12
  %14 = add i64 %8, 16
  %15 = add i64 %14, %13
  %16 = getelementptr i8, ptr %0, i64 8
  %17 = load ptr, ptr %16, align 8
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr i8, ptr %18, i64 48
  %20 = load ptr, ptr %19, align 8
  %21 = tail call { i64, i64 } %20(ptr nonnull %17)
  %22 = extractvalue { i64, i64 } %21, 1
  %23 = urem i64 %15, %22
  %24 = icmp eq i64 %23, 0
  %25 = sub i64 %22, %23
  %26 = select i1 %24, i64 0, i64 %25
  %27 = getelementptr i8, ptr %0, i64 %15
  %28 = getelementptr i8, ptr %27, i64 %26
  %29 = load ptr, ptr %16, align 8
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr i8, ptr %30, i64 64
  %32 = load ptr, ptr %31, align 8
  tail call void %32({ ptr, i160 } %1, ptr nonnull %29, ptr %28)
  ret void
}

define { ptr, i160 } @Pair_getter_first(ptr %0) {
  %2 = load ptr, ptr %0, align 8
  %3 = load ptr, ptr %2, align 8
  %4 = getelementptr i8, ptr %3, i64 48
  %5 = load ptr, ptr %4, align 8
  %6 = tail call { i64, i64 } %5(ptr nonnull %2)
  %7 = extractvalue { i64, i64 } %6, 1
  %8 = urem i64 16, %7
  %9 = icmp eq i64 %8, 0
  %reass.sub = sub i64 %7, %8
  %10 = add i64 %reass.sub, 16
  %11 = select i1 %9, i64 16, i64 %10
  %12 = getelementptr i8, ptr %0, i64 %11
  %13 = load ptr, ptr %0, align 8
  %14 = load ptr, ptr %13, align 8
  %15 = getelementptr i8, ptr %14, i64 56
  %16 = load ptr, ptr %15, align 8
  %17 = tail call { ptr, i160 } %16(ptr %12, ptr nonnull %13)
  ret { ptr, i160 } %17
}

define void @Pair_setter_first(ptr %0, { ptr, i160 } %1) {
  %3 = load ptr, ptr %0, align 8
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr i8, ptr %4, i64 48
  %6 = load ptr, ptr %5, align 8
  %7 = tail call { i64, i64 } %6(ptr nonnull %3)
  %8 = extractvalue { i64, i64 } %7, 1
  %9 = urem i64 16, %8
  %10 = icmp eq i64 %9, 0
  %reass.sub = sub i64 %8, %9
  %11 = add i64 %reass.sub, 16
  %12 = select i1 %10, i64 16, i64 %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = load ptr, ptr %0, align 8
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 64
  %17 = load ptr, ptr %16, align 8
  tail call void %17({ ptr, i160 } %1, ptr nonnull %14, ptr %13)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_Container(ptr nocapture readnone %0) #0 {
  ret { i64, i64 } { i64 0, i64 1 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_Iterator2(ptr nocapture readnone %0) #0 {
  ret { i64, i64 } { i64 8, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_Iterable2(ptr nocapture readnone %0) #0 {
  ret { i64, i64 } { i64 8, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_Array(ptr nocapture readnone %0) #0 {
  ret { i64, i64 } { i64 24, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @Array_field_Array_0(ptr nocapture readonly %0) #3 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: readwrite)
define noundef nonnull ptr @Array_B__Self_from_iterable_iterableIterable2T(ptr nocapture %0) #7 {
  %2 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  ret ptr @Array__Self_from_iterable_iterableIterable2T
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_init_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 304
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_init_capacityPtri32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 312
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_init_lengthPtri32_capacityPtri32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 320
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_length_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 328
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_capacity_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 336
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_append_xT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 344
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_reserve_new_capacityPtri32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 352
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B__index_xPtri32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 360
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B__set_index_xPtri32_valueT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 368
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_throw_oob_xPtri32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 376
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_unchecked_index_xPtri32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 384
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_unchecked_insert_xPtri32_valueT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 392
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 400
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 408
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 416
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 424
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 432
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 440
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 448
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 456
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 464
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 472
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 480
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define { ptr, ptr, ptr, i32 } @Array__Self_from_iterable_iterableIterable2T(ptr nocapture readnone %0, { ptr, ptr, ptr, i32 } %1) {
  %3 = alloca [0 x ptr], align 8
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 5693646204635713916
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %result.i = tail call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  store ptr @any_typ, ptr %result.i, align 8
  %result.i29 = tail call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i, ptr %result.i29, align 8
  %4 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i29)
  %result.i.i = tail call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %5 = getelementptr i8, ptr %result.i29, i64 8
  store ptr %result.i.i, ptr %5, align 8
  %6 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %7 = getelementptr i8, ptr %result.i29, i64 20
  store i32 1, ptr %7, align 4
  %8 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %9 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %.fca.1.extract3, 1
  %10 = insertvalue { ptr, ptr, ptr, i32 } %9, ptr %.fca.2.extract5, 2
  %11 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %offset.i.i, 3
  %12 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
  %13 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract1)
  %14 = sext i32 %offset.i.i to i64
  %15 = getelementptr ptr, ptr %.fca.0.extract1, i64 %14
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = load ptr, ptr %16, align 8
  %18 = call ptr %17({ ptr, ptr, ptr, i32 } %11, ptr nonnull %3)
  %19 = call { ptr, ptr, ptr, i32 } %18({ ptr, ptr, ptr, i32 } %11, { ptr, ptr, ptr, i32 } %11, ptr nonnull %3)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %19, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %19, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %19, 2
  %hash_coef_ptr.i.i45 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i46 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i47 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i48 = load i64, ptr %hash_coef_ptr.i.i45, align 4
  %tbl_size.i.i49 = load i64, ptr %tbl_size_ptr.i.i46, align 4
  %offset_tbl.i.i50 = load ptr, ptr %offset_tbl_ptr.i.i47, align 8
  %product.i.i.i51 = mul i64 %hash_coef.i.i48, 4189192806087951739
  %shifted.i.i.i52 = lshr i64 %product.i.i.i51, 32
  %xored.i.i.i53 = xor i64 %shifted.i.i.i52, %product.i.i.i51
  %hash.i.i.i54 = and i64 %xored.i.i.i53, %tbl_size.i.i49
  %offset_ptr.i.i55 = getelementptr i32, ptr %offset_tbl.i.i50, i64 %hash.i.i.i54
  %offset.i.i70 = load i32, ptr %offset_ptr.i.i55, align 4
  %20 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %21 = insertvalue { ptr, ptr, ptr, i32 } %20, ptr %.fca.1.extract, 1
  %22 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %.fca.2.extract, 2
  %23 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 %offset.i.i70, 3
  %24 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
  %25 = call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %.fca.0.extract)
  %26 = sext i32 %offset.i.i70 to i64
  %27 = getelementptr ptr, ptr %.fca.0.extract, i64 %26
  %28 = getelementptr i8, ptr %27, i64 8
  %29 = load ptr, ptr %28, align 8
  %30 = call ptr %29({ ptr, ptr, ptr, i32 } %23, ptr nonnull %3)
  %31 = call { ptr, i160 } %30({ ptr, ptr, ptr, i32 } %23, { ptr, ptr, ptr, i32 } %23, ptr nonnull %3)
  %.fca.0.extract23120 = extractvalue { ptr, i160 } %31, 0
  %32 = icmp ne ptr %.fca.0.extract23120, @nil_typ
  %33 = icmp ne ptr %.fca.0.extract23120, null
  %.not28121 = and i1 %32, %33
  br i1 %.not28121, label %._crit_edge.preheader, label %.critedge

._crit_edge.preheader:                            ; preds = %2
  %34 = getelementptr i8, ptr %result.i29, i64 16
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.preheader, %Array_append_xT.exit
  %35 = phi ptr [ %55, %Array_append_xT.exit ], [ %result.i.i, %._crit_edge.preheader ]
  %.pre = phi i32 [ %61, %Array_append_xT.exit ], [ 0, %._crit_edge.preheader ]
  %36 = phi { ptr, i160 } [ %65, %Array_append_xT.exit ], [ %31, %._crit_edge.preheader ]
  %37 = load i32, ptr %7, align 4
  %.not.i = icmp slt i32 %.pre, %37
  br i1 %.not.i, label %Array_append_xT.exit, label %38

38:                                               ; preds = %._crit_edge
  %39 = shl i32 %37, 1
  %.not.i125 = icmp sgt i32 %39, %37
  %.pre127.pre = load ptr, ptr %5, align 8
  br i1 %.not.i125, label %40, label %Array_append_xT.exit

40:                                               ; preds = %38
  store i32 %39, ptr %7, align 4
  %41 = sext i32 %39 to i64
  %42 = shl nsw i64 %41, 5
  %result.i.i126 = call noalias ptr @bump_malloc_inner(i64 noundef %42, ptr nonnull @current_ptr) #29
  store ptr %result.i.i126, ptr %5, align 8
  %43 = icmp sgt i32 %.pre, 0
  br i1 %43, label %.lr.ph.i, label %Array_append_xT.exit

.lr.ph.i:                                         ; preds = %40
  %44 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  br label %._crit_edge.i

._crit_edge.i:                                    ; preds = %._crit_edge.i, %.lr.ph.i
  %.reg2mem17.030.i = phi i32 [ 0, %.lr.ph.i ], [ %53, %._crit_edge.i ]
  %45 = zext nneg i32 %.reg2mem17.030.i to i64
  %46 = shl nuw nsw i64 %45, 5
  %47 = getelementptr i8, ptr %.pre127.pre, i64 %46
  %48 = getelementptr i8, ptr %result.i.i126, i64 %46
  %49 = load ptr, ptr %47, align 8
  %50 = getelementptr i8, ptr %47, i64 8
  %51 = load i160, ptr %50, align 4
  store ptr %49, ptr %48, align 8
  %52 = getelementptr i8, ptr %48, i64 8
  store i160 %51, ptr %52, align 4
  %53 = add nuw nsw i32 %.reg2mem17.030.i, 1
  %54 = icmp slt i32 %53, %.pre
  br i1 %54, label %._crit_edge.i, label %Array_append_xT.exit

Array_append_xT.exit:                             ; preds = %._crit_edge.i, %40, %38, %._crit_edge
  %55 = phi ptr [ %35, %._crit_edge ], [ %.pre127.pre, %38 ], [ %result.i.i126, %40 ], [ %result.i.i126, %._crit_edge.i ]
  %.fca.1.extract.i = extractvalue { ptr, i160 } %36, 1
  %.fca.0.extract.i = extractvalue { ptr, i160 } %36, 0
  %56 = sext i32 %.pre to i64
  %57 = shl nsw i64 %56, 5
  %58 = getelementptr i8, ptr %55, i64 %57
  store ptr %.fca.0.extract.i, ptr %58, align 8
  %59 = getelementptr i8, ptr %58, i64 8
  store i160 %.fca.1.extract.i, ptr %59, align 4
  %60 = load i32, ptr %34, align 4
  %61 = add i32 %60, 1
  %62 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  store i32 %61, ptr %34, align 4
  %63 = load ptr, ptr %28, align 8
  %64 = call ptr %63({ ptr, ptr, ptr, i32 } %23, ptr nonnull %3)
  %65 = call { ptr, i160 } %64({ ptr, ptr, ptr, i32 } %23, { ptr, ptr, ptr, i32 } %23, ptr nonnull %3)
  %.fca.0.extract23 = extractvalue { ptr, i160 } %65, 0
  %66 = icmp ne ptr %.fca.0.extract23, @nil_typ
  %67 = icmp ne ptr %.fca.0.extract23, null
  %.not28 = and i1 %66, %67
  br i1 %.not28, label %._crit_edge, label %.critedge

.critedge:                                        ; preds = %Array_append_xT.exit, %2
  %68 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Array, ptr undef, ptr undef, i32 undef }, ptr %result.i29, 1
  %69 = insertvalue { ptr, ptr, ptr, i32 } %68, ptr undef, 2
  %70 = insertvalue { ptr, ptr, ptr, i32 } %69, i32 9, 3
  ret { ptr, ptr, ptr, i32 } %70
}

define void @Array_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -5261542750394134544
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %result.i = tail call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %4 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract)
  %5 = sext i32 %offset.i.i to i64
  %6 = getelementptr ptr, ptr %.fca.0.extract, i64 %5
  %7 = getelementptr i8, ptr %6, i64 8
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr i8, ptr %8, i64 8
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr } undef, ptr %result.i, 0
  tail call void %10(ptr %.fca.1.extract, { ptr } %11)
  %12 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract)
  %13 = getelementptr i8, ptr %6, i64 16
  %14 = load ptr, ptr %13, align 8
  %15 = getelementptr i8, ptr %14, i64 8
  %16 = load ptr, ptr %15, align 8
  tail call void %16(ptr %.fca.1.extract, i32 0)
  %17 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract)
  %18 = getelementptr i8, ptr %6, i64 24
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr i8, ptr %19, i64 8
  %21 = load ptr, ptr %20, align 8
  tail call void %21(ptr %.fca.1.extract, i32 1)
  ret void
}

define void @Array_init_capacityPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -5261542750394134544
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %5 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract, i64 %6
  %8 = getelementptr i8, ptr %7, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr i8, ptr %9, i64 8
  %11 = load ptr, ptr %10, align 8
  tail call void %11(ptr %.fca.1.extract, i32 %3)
  %12 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract)
  %13 = load ptr, ptr %8, align 8
  %14 = load ptr, ptr %13, align 8
  %15 = tail call i32 %14(ptr %.fca.1.extract)
  %16 = sext i32 %15 to i64
  %17 = shl nsw i64 %16, 5
  %result.i = tail call noalias ptr @bump_malloc_inner(i64 noundef %17, ptr nonnull @current_ptr) #29
  %18 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract)
  %19 = getelementptr i8, ptr %7, i64 8
  %20 = load ptr, ptr %19, align 8
  %21 = getelementptr i8, ptr %20, i64 8
  %22 = load ptr, ptr %21, align 8
  %23 = insertvalue { ptr } undef, ptr %result.i, 0
  tail call void %22(ptr %.fca.1.extract, { ptr } %23)
  %24 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract)
  %25 = getelementptr i8, ptr %7, i64 16
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr i8, ptr %26, i64 8
  %28 = load ptr, ptr %27, align 8
  tail call void %28(ptr %.fca.1.extract, i32 0)
  ret void
}

define void @Array_init_lengthPtri32_capacityPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3, i32 %4) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -5261542750394134544
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %6 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract)
  %7 = sext i32 %offset.i.i to i64
  %8 = getelementptr ptr, ptr %.fca.0.extract, i64 %7
  %9 = getelementptr i8, ptr %8, i64 16
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr i8, ptr %10, i64 8
  %12 = load ptr, ptr %11, align 8
  tail call void %12(ptr %.fca.1.extract, i32 %3)
  %13 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract)
  %14 = getelementptr i8, ptr %8, i64 24
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = load ptr, ptr %16, align 8
  tail call void %17(ptr %.fca.1.extract, i32 %4)
  %18 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract)
  %19 = load ptr, ptr %14, align 8
  %20 = load ptr, ptr %19, align 8
  %21 = tail call i32 %20(ptr %.fca.1.extract)
  %22 = sext i32 %21 to i64
  %23 = shl nsw i64 %22, 5
  %result.i = tail call noalias ptr @bump_malloc_inner(i64 noundef %23, ptr nonnull @current_ptr) #29
  %24 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract)
  %25 = getelementptr i8, ptr %8, i64 8
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr i8, ptr %26, i64 8
  %28 = load ptr, ptr %27, align 8
  %29 = insertvalue { ptr } undef, ptr %result.i, 0
  tail call void %28(ptr %.fca.1.extract, { ptr } %29)
  ret void
}

define i32 @Array_length_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -5261542750394134544
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %4 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract)
  %5 = sext i32 %offset.i.i to i64
  %6 = getelementptr ptr, ptr %.fca.0.extract, i64 %5
  %7 = getelementptr i8, ptr %6, i64 16
  %8 = load ptr, ptr %7, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = tail call i32 %9(ptr %.fca.1.extract)
  ret i32 %10
}

define i32 @Array_capacity_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -5261542750394134544
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %4 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract)
  %5 = sext i32 %offset.i.i to i64
  %6 = getelementptr ptr, ptr %.fca.0.extract, i64 %5
  %7 = getelementptr i8, ptr %6, i64 24
  %8 = load ptr, ptr %7, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = tail call i32 %9(ptr %.fca.1.extract)
  ret i32 %10
}

define { ptr, ptr, ptr, i32 } @Array_append_xT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, i160 } %3) {
  %5 = alloca [1 x ptr], align 8
  %6 = alloca { ptr }, align 8
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -5261542750394134544
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %7 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract1)
  %8 = sext i32 %offset.i.i to i64
  %9 = getelementptr ptr, ptr %.fca.0.extract1, i64 %8
  %10 = getelementptr i8, ptr %9, i64 16
  %11 = load ptr, ptr %10, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = tail call i32 %12(ptr %.fca.1.extract2)
  %14 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract1)
  %15 = getelementptr i8, ptr %9, i64 24
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = tail call i32 %17(ptr %.fca.1.extract2)
  %.not = icmp slt i32 %13, %18
  br i1 %.not, label %.._crit_edge_crit_edge, label %19

.._crit_edge_crit_edge:                           ; preds = %4
  %.pre = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %.pre48 = insertvalue { ptr, ptr, ptr, i32 } %.pre, ptr %.fca.1.extract2, 1
  %.pre50 = insertvalue { ptr, ptr, ptr, i32 } %.pre48, ptr %.fca.2.extract, 2
  br label %._crit_edge

19:                                               ; preds = %4
  %20 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %.fca.0.extract1)
  %21 = load ptr, ptr %15, align 8
  %22 = load ptr, ptr %21, align 8
  %23 = tail call i32 %22(ptr %.fca.1.extract2)
  %24 = shl i32 %23, 1
  %25 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %26 = insertvalue { ptr, ptr, ptr, i32 } %25, ptr %.fca.1.extract2, 1
  %27 = insertvalue { ptr, ptr, ptr, i32 } %26, ptr %.fca.2.extract, 2
  %28 = insertvalue { ptr, ptr, ptr, i32 } %27, i32 %offset.i.i, 3
  %29 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %.fca.0.extract1)
  %30 = load ptr, ptr %9, align 8
  %31 = tail call ptr %30(ptr %.fca.1.extract2)
  store ptr @_parameterization_Ptri32, ptr %5, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %5)
  %33 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %.fca.0.extract1)
  %34 = getelementptr i8, ptr %9, i64 88
  %35 = load ptr, ptr %34, align 8
  store ptr @i32_typ, ptr %6, align 8
  %36 = call ptr %35({ ptr, ptr, ptr, i32 } %28, ptr nonnull %6)
  call void %36({ ptr, ptr, ptr, i32 } %28, { ptr, ptr, ptr, i32 } %28, ptr nonnull %5, i32 %24)
  br label %._crit_edge

._crit_edge:                                      ; preds = %.._crit_edge_crit_edge, %19
  %.pre-phi51 = phi { ptr, ptr, ptr, i32 } [ %.pre50, %.._crit_edge_crit_edge ], [ %27, %19 ]
  %.fca.1.extract = extractvalue { ptr, i160 } %3, 1
  %.fca.0.extract = extractvalue { ptr, i160 } %3, 0
  %37 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %.fca.0.extract1)
  %38 = getelementptr i8, ptr %9, i64 8
  %39 = load ptr, ptr %38, align 8
  %40 = load ptr, ptr %39, align 8
  %41 = call { ptr } %40(ptr %.fca.1.extract2)
  %.fca.0.extract5 = extractvalue { ptr } %41, 0
  %42 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %.fca.0.extract1)
  %43 = load ptr, ptr %10, align 8
  %44 = load ptr, ptr %43, align 8
  %45 = call i32 %44(ptr %.fca.1.extract2)
  %46 = sext i32 %45 to i64
  %47 = shl nsw i64 %46, 5
  %48 = getelementptr i8, ptr %.fca.0.extract5, i64 %47
  store ptr %.fca.0.extract, ptr %48, align 8
  %49 = getelementptr i8, ptr %48, i64 8
  store i160 %.fca.1.extract, ptr %49, align 4
  %50 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %.fca.0.extract1)
  %51 = load ptr, ptr %10, align 8
  %52 = load ptr, ptr %51, align 8
  %53 = call i32 %52(ptr %.fca.1.extract2)
  %54 = add i32 %53, 1
  %55 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %.fca.0.extract1)
  %56 = load ptr, ptr %10, align 8
  %57 = getelementptr i8, ptr %56, i64 8
  %58 = load ptr, ptr %57, align 8
  call void %58(ptr %.fca.1.extract2, i32 %54)
  %hash_coef.i.i12 = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i13 = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i14 = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i15 = mul i64 %hash_coef.i.i12, -5261542750394134544
  %shifted.i.i.i16 = lshr i64 %product.i.i.i15, 32
  %xored.i.i.i17 = xor i64 %shifted.i.i.i16, %product.i.i.i15
  %hash.i.i.i18 = and i64 %xored.i.i.i17, %tbl_size.i.i13
  %offset_ptr.i.i19 = getelementptr i32, ptr %offset_tbl.i.i14, i64 %hash.i.i.i18
  %offset.i.i20 = load i32, ptr %offset_ptr.i.i19, align 4
  %59 = insertvalue { ptr, ptr, ptr, i32 } %.pre-phi51, i32 %offset.i.i20, 3
  ret { ptr, ptr, ptr, i32 } %59
}

define void @Array_reserve_new_capacityPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -5261542750394134544
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %5 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract, i64 %6
  %8 = getelementptr i8, ptr %7, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = load ptr, ptr %9, align 8
  %11 = tail call i32 %10(ptr %.fca.1.extract)
  %.not = icmp sgt i32 %3, %11
  br i1 %.not, label %12, label %.thread

12:                                               ; preds = %4
  %13 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %.fca.0.extract)
  %14 = load ptr, ptr %8, align 8
  %15 = getelementptr i8, ptr %14, i64 8
  %16 = load ptr, ptr %15, align 8
  tail call void %16(ptr %.fca.1.extract, i32 %3)
  %17 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %.fca.0.extract)
  %18 = getelementptr i8, ptr %7, i64 8
  %19 = load ptr, ptr %18, align 8
  %20 = load ptr, ptr %19, align 8
  %21 = tail call { ptr } %20(ptr %.fca.1.extract)
  %.fca.0.extract8 = extractvalue { ptr } %21, 0
  %22 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %.fca.0.extract)
  %23 = load ptr, ptr %8, align 8
  %24 = load ptr, ptr %23, align 8
  %25 = tail call i32 %24(ptr %.fca.1.extract)
  %26 = sext i32 %25 to i64
  %27 = shl nsw i64 %26, 5
  %result.i = tail call noalias ptr @bump_malloc_inner(i64 noundef %27, ptr nonnull @current_ptr) #29
  %28 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %.fca.0.extract)
  %29 = load ptr, ptr %18, align 8
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  %32 = insertvalue { ptr } undef, ptr %result.i, 0
  tail call void %31(ptr %.fca.1.extract, { ptr } %32)
  %33 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %.fca.0.extract)
  %34 = getelementptr i8, ptr %7, i64 16
  %35 = load ptr, ptr %34, align 8
  %36 = load ptr, ptr %35, align 8
  %37 = tail call i32 %36(ptr %.fca.1.extract)
  %38 = icmp sgt i32 %37, 0
  br i1 %38, label %.lr.ph, label %.thread

.lr.ph:                                           ; preds = %12
  %39 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %.fca.0.extract)
  br label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph, %._crit_edge
  %.reg2mem17.030 = phi i32 [ 0, %.lr.ph ], [ %51, %._crit_edge ]
  %40 = zext nneg i32 %.reg2mem17.030 to i64
  %41 = shl nuw nsw i64 %40, 5
  %42 = getelementptr i8, ptr %.fca.0.extract8, i64 %41
  %43 = load ptr, ptr %18, align 8
  %44 = load ptr, ptr %43, align 8
  %45 = tail call { ptr } %44(ptr %.fca.1.extract)
  %.fca.0.extract4 = extractvalue { ptr } %45, 0
  %46 = getelementptr i8, ptr %.fca.0.extract4, i64 %41
  %47 = load ptr, ptr %42, align 8
  %48 = getelementptr i8, ptr %42, i64 8
  %49 = load i160, ptr %48, align 4
  store ptr %47, ptr %46, align 8
  %50 = getelementptr i8, ptr %46, i64 8
  store i160 %49, ptr %50, align 4
  %51 = add nuw nsw i32 %.reg2mem17.030, 1
  %52 = load ptr, ptr %34, align 8
  %53 = load ptr, ptr %52, align 8
  %54 = tail call i32 %53(ptr %.fca.1.extract)
  %55 = icmp slt i32 %51, %54
  br i1 %55, label %._crit_edge, label %.thread

.thread:                                          ; preds = %._crit_edge, %12, %4
  ret void
}

define { ptr, i160 } @Array__index_xPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
  %5 = alloca [1 x ptr], align 8
  %6 = alloca { ptr }, align 8
  %7 = alloca [1 x ptr], align 8
  %8 = alloca { ptr }, align 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -5261542750394134544
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %9 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract)
  %10 = sext i32 %offset.i.i to i64
  %11 = getelementptr ptr, ptr %.fca.0.extract, i64 %10
  %12 = getelementptr i8, ptr %11, i64 16
  %13 = load ptr, ptr %12, align 8
  %14 = load ptr, ptr %13, align 8
  %15 = tail call i32 %14(ptr %.fca.1.extract)
  %16 = add i32 %15, -1
  %17 = icmp sgt i32 %3, %16
  %18 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract)
  %19 = load ptr, ptr %12, align 8
  %20 = load ptr, ptr %19, align 8
  %21 = tail call i32 %20(ptr %.fca.1.extract)
  %22 = add i32 %21, %3
  %23 = icmp slt i32 %22, 0
  %24 = or i1 %17, %23
  br i1 %24, label %25, label %._crit_edge

25:                                               ; preds = %4
  %26 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %27 = insertvalue { ptr, ptr, ptr, i32 } %26, ptr %.fca.1.extract, 1
  %28 = insertvalue { ptr, ptr, ptr, i32 } %27, ptr %.fca.2.extract, 2
  %29 = insertvalue { ptr, ptr, ptr, i32 } %28, i32 %offset.i.i, 3
  %30 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %.fca.0.extract)
  %31 = load ptr, ptr %11, align 8
  %32 = tail call ptr %31(ptr %.fca.1.extract)
  store ptr @_parameterization_Ptri32, ptr %5, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %5)
  %34 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %.fca.0.extract)
  %35 = getelementptr i8, ptr %11, i64 112
  %36 = load ptr, ptr %35, align 8
  store ptr @i32_typ, ptr %6, align 8
  %37 = call ptr %36({ ptr, ptr, ptr, i32 } %29, ptr nonnull %6)
  call void %37({ ptr, ptr, ptr, i32 } %29, { ptr, ptr, ptr, i32 } %29, ptr nonnull %5, i32 %3)
  br label %._crit_edge

._crit_edge:                                      ; preds = %4, %25
  %38 = icmp slt i32 %3, 0
  br i1 %38, label %39, label %45

39:                                               ; preds = %._crit_edge
  %40 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %.fca.0.extract)
  %41 = load ptr, ptr %12, align 8
  %42 = load ptr, ptr %41, align 8
  %43 = call i32 %42(ptr %.fca.1.extract)
  %44 = add i32 %43, %3
  br label %45

45:                                               ; preds = %._crit_edge, %39
  %.reg2mem3.0 = phi i32 [ %44, %39 ], [ %3, %._crit_edge ]
  %46 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %47 = insertvalue { ptr, ptr, ptr, i32 } %46, ptr %.fca.1.extract, 1
  %48 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %.fca.2.extract, 2
  %49 = insertvalue { ptr, ptr, ptr, i32 } %48, i32 %offset.i.i, 3
  %50 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %.fca.0.extract)
  %51 = load ptr, ptr %11, align 8
  %52 = call ptr %51(ptr %.fca.1.extract)
  store ptr @_parameterization_Ptri32, ptr %7, align 8
  %53 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %7)
  %54 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %.fca.0.extract)
  %55 = getelementptr i8, ptr %11, i64 120
  %56 = load ptr, ptr %55, align 8
  store ptr @i32_typ, ptr %8, align 8
  %57 = call ptr %56({ ptr, ptr, ptr, i32 } %49, ptr nonnull %8)
  %58 = call { ptr, i160 } %57({ ptr, ptr, ptr, i32 } %49, { ptr, ptr, ptr, i32 } %49, ptr nonnull %7, i32 %.reg2mem3.0)
  ret { ptr, i160 } %58
}

define void @Array__set_index_xPtri32_valueT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3, { ptr, i160 } %4) {
  %6 = alloca [1 x ptr], align 8
  %7 = alloca { ptr }, align 8
  %8 = alloca [2 x ptr], align 8
  %9 = alloca { ptr, ptr }, align 8
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -5261542750394134544
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %10 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract1)
  %11 = sext i32 %offset.i.i to i64
  %12 = getelementptr ptr, ptr %.fca.0.extract1, i64 %11
  %13 = getelementptr i8, ptr %12, i64 16
  %14 = load ptr, ptr %13, align 8
  %15 = load ptr, ptr %14, align 8
  %16 = tail call i32 %15(ptr %.fca.1.extract2)
  %17 = add i32 %16, -1
  %18 = icmp sgt i32 %3, %17
  %19 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract1)
  %20 = load ptr, ptr %13, align 8
  %21 = load ptr, ptr %20, align 8
  %22 = tail call i32 %21(ptr %.fca.1.extract2)
  %23 = add i32 %22, %3
  %24 = icmp slt i32 %23, 0
  %25 = or i1 %18, %24
  br i1 %25, label %26, label %._crit_edge

26:                                               ; preds = %5
  %27 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %28 = insertvalue { ptr, ptr, ptr, i32 } %27, ptr %.fca.1.extract2, 1
  %29 = insertvalue { ptr, ptr, ptr, i32 } %28, ptr %.fca.2.extract, 2
  %30 = insertvalue { ptr, ptr, ptr, i32 } %29, i32 %offset.i.i, 3
  %31 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %.fca.0.extract1)
  %32 = load ptr, ptr %12, align 8
  %33 = tail call ptr %32(ptr %.fca.1.extract2)
  store ptr @_parameterization_Ptri32, ptr %6, align 8
  %34 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %6)
  %35 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %.fca.0.extract1)
  %36 = getelementptr i8, ptr %12, i64 112
  %37 = load ptr, ptr %36, align 8
  store ptr @i32_typ, ptr %7, align 8
  %38 = call ptr %37({ ptr, ptr, ptr, i32 } %30, ptr nonnull %7)
  call void %38({ ptr, ptr, ptr, i32 } %30, { ptr, ptr, ptr, i32 } %30, ptr nonnull %6, i32 %3)
  br label %._crit_edge

._crit_edge:                                      ; preds = %5, %26
  %39 = icmp slt i32 %3, 0
  br i1 %39, label %40, label %46

40:                                               ; preds = %._crit_edge
  %41 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %.fca.0.extract1)
  %42 = load ptr, ptr %13, align 8
  %43 = load ptr, ptr %42, align 8
  %44 = call i32 %43(ptr %.fca.1.extract2)
  %45 = add i32 %44, %3
  br label %46

46:                                               ; preds = %._crit_edge, %40
  %.reg2mem3.0 = phi i32 [ %45, %40 ], [ %3, %._crit_edge ]
  %.fca.0.extract = extractvalue { ptr, i160 } %4, 0
  %47 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %48 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %.fca.1.extract2, 1
  %49 = insertvalue { ptr, ptr, ptr, i32 } %48, ptr %.fca.2.extract, 2
  %50 = insertvalue { ptr, ptr, ptr, i32 } %49, i32 %offset.i.i, 3
  %51 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %.fca.0.extract1)
  %52 = load ptr, ptr %12, align 8
  %53 = call ptr %52(ptr %.fca.1.extract2)
  store ptr @_parameterization_Ptri32, ptr %8, align 8
  %54 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr %53, ptr %54, align 8
  %55 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %8)
  %56 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %.fca.0.extract1)
  %57 = getelementptr i8, ptr %12, i64 128
  %58 = load ptr, ptr %57, align 8
  store ptr @i32_typ, ptr %9, align 8
  %59 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %.fca.0.extract, ptr %59, align 8
  %60 = call ptr %58({ ptr, ptr, ptr, i32 } %50, ptr nonnull %9)
  call void %60({ ptr, ptr, ptr, i32 } %50, { ptr, ptr, ptr, i32 } %50, ptr nonnull %8, i32 %.reg2mem3.0, { ptr, i160 } %4)
  ret void
}

define void @Array_throw_oob_xPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -5261542750394134544
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %result.i = tail call noalias dereferenceable_or_null(72) ptr @bump_malloc_inner(i64 noundef 72, ptr nonnull @current_ptr) #29
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  %7 = getelementptr inbounds i8, ptr %5, i64 24
  store ptr @Exception, ptr %5, align 8
  store ptr %result.i, ptr %6, align 8
  store i32 9, ptr %7, align 8
  %8 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %5)
  %9 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract)
  %10 = sext i32 %offset.i.i to i64
  %11 = getelementptr ptr, ptr %.fca.0.extract, i64 %10
  %12 = load ptr, ptr %11, align 8
  %13 = tail call ptr %12(ptr %.fca.1.extract)
  store i32 0, ptr %result.i, align 4
  %result.i.i = tail call noalias dereferenceable_or_null(7) ptr @bump_malloc_inner(i64 noundef 7, ptr nonnull @current_ptr) #29
  store <6 x i8> <i8 60, i8 78, i8 111, i8 110, i8 101, i8 62>, ptr %result.i.i, align 8
  %result.i2.i = tail call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  store ptr %result.i.i, ptr %result.i2.i, align 8
  %14 = getelementptr i8, ptr %result.i2.i, i64 8
  store i32 6, ptr %14, align 4
  %15 = getelementptr i8, ptr %result.i2.i, i64 12
  store i32 7, ptr %15, align 4
  %16 = getelementptr i8, ptr %result.i, i64 40
  store ptr @String, ptr %16, align 8
  %17 = getelementptr i8, ptr %result.i, i64 48
  store ptr %result.i2.i, ptr %17, align 8
  %18 = getelementptr i8, ptr %result.i, i64 64
  store i32 9, ptr %18, align 4
  %result.i17.i = tail call noalias dereferenceable_or_null(1) ptr @bump_malloc_inner(i64 noundef 1, ptr nonnull @current_ptr) #29
  %result.i18.i = tail call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  store ptr %result.i17.i, ptr %result.i18.i, align 8
  %19 = getelementptr i8, ptr %result.i18.i, i64 8
  store i32 0, ptr %19, align 4
  %20 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %21 = getelementptr i8, ptr %result.i18.i, i64 12
  store i32 1, ptr %21, align 4
  %22 = tail call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Exception)
  %23 = getelementptr i8, ptr %result.i, i64 8
  store ptr @String, ptr %23, align 8
  %24 = getelementptr i8, ptr %result.i, i64 16
  store ptr %result.i18.i, ptr %24, align 8
  %25 = getelementptr i8, ptr %result.i, i64 32
  store i32 9, ptr %25, align 4
  %result.i1 = tail call noalias dereferenceable_or_null(17) ptr @bump_malloc_inner(i64 noundef 17, ptr nonnull @current_ptr) #29
  store <16 x i8> <i8 99, i8 111, i8 108, i8 108, i8 101, i8 99, i8 116, i8 105, i8 111, i8 110, i8 115, i8 46, i8 109, i8 105, i8 110, i8 105>, ptr %result.i1, align 16
  %result.i2 = tail call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %26 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract)
  %27 = load ptr, ptr %11, align 8
  %28 = tail call ptr %27(ptr %.fca.1.extract)
  store ptr %result.i1, ptr %result.i2, align 8
  %29 = getelementptr i8, ptr %result.i2, i64 8
  store i32 16, ptr %29, align 4
  %30 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %31 = getelementptr i8, ptr %result.i2, i64 12
  store i32 17, ptr %31, align 4
  %32 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract)
  %33 = load ptr, ptr %11, align 8
  %34 = tail call ptr %33(ptr %.fca.1.extract)
  store i32 150, ptr %result.i, align 4
  %35 = tail call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Exception)
  store ptr @String, ptr %23, align 8
  store ptr %result.i2, ptr %24, align 8
  store i32 9, ptr %25, align 4
  %36 = load i160, ptr %6, align 8
  %37 = insertvalue { ptr, i160 } { ptr @Exception, i160 undef }, i160 %36, 1
  %current_coroutine.i = load ptr, ptr @current_coroutine, align 8
  %38 = getelementptr i8, ptr %current_coroutine.i, i64 48
  store { ptr, i160 } %37, ptr %38, align 8
  %into_callee_buf.i = getelementptr i8, ptr %current_coroutine.i, i64 8
  tail call preserve_nonecc void @context_switch(ptr nocapture writeonly %into_callee_buf.i, ptr nonnull @into_caller_buf) #32
  ret void
}

define { ptr, i160 } @Array_unchecked_index_xPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -5261542750394134544
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %5 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract2)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract2, i64 %6
  %8 = getelementptr i8, ptr %7, i64 8
  %9 = load ptr, ptr %8, align 8
  %10 = load ptr, ptr %9, align 8
  %11 = tail call { ptr } %10(ptr %.fca.1.extract)
  %.fca.0.extract = extractvalue { ptr } %11, 0
  %12 = sext i32 %3 to i64
  %13 = shl nsw i64 %12, 5
  %14 = getelementptr i8, ptr %.fca.0.extract, i64 %13
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %14, i64 8
  %17 = load i160, ptr %16, align 4
  %18 = insertvalue { ptr, i160 } undef, ptr %15, 0
  %19 = insertvalue { ptr, i160 } %18, i160 %17, 1
  ret { ptr, i160 } %19
}

define void @Array_unchecked_insert_xPtri32_valueT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3, { ptr, i160 } %4) {
  %.fca.0.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract5, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract5, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract5, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -5261542750394134544
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract4 = extractvalue { ptr, i160 } %4, 0
  %.fca.1.extract = extractvalue { ptr, i160 } %4, 1
  %6 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract5)
  %7 = sext i32 %offset.i.i to i64
  %8 = getelementptr ptr, ptr %.fca.0.extract5, i64 %7
  %9 = getelementptr i8, ptr %8, i64 8
  %10 = load ptr, ptr %9, align 8
  %11 = load ptr, ptr %10, align 8
  %12 = tail call { ptr } %11(ptr %.fca.1.extract6)
  %.fca.0.extract = extractvalue { ptr } %12, 0
  %13 = sext i32 %3 to i64
  %14 = shl nsw i64 %13, 5
  %15 = getelementptr i8, ptr %.fca.0.extract, i64 %14
  store ptr %.fca.0.extract4, ptr %15, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  store i160 %.fca.1.extract, ptr %16, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @Array_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -5261542750394134544
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %4 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract)
  %5 = sext i32 %offset.i.i to i64
  %6 = getelementptr ptr, ptr %.fca.0.extract, i64 %5
  %7 = load ptr, ptr %6, align 8
  %8 = tail call ptr %7(ptr %.fca.1.extract)
  %result.i = tail call noalias dereferenceable_or_null(48) ptr @bump_malloc_inner(i64 noundef 48, ptr nonnull @current_ptr) #29
  store ptr %8, ptr %result.i, align 8
  %9 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i)
  %10 = insertvalue { ptr, ptr, ptr, i32 } { ptr @ArrayIterator, ptr undef, ptr undef, i32 undef }, ptr %result.i, 1
  %11 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr undef, 2
  %12 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract)
  %13 = load ptr, ptr %6, align 8
  %14 = tail call ptr %13(ptr %.fca.1.extract)
  %15 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @ArrayIterator)
  %hash_coef.i.i59 = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i60 = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i61 = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i62 = mul i64 %hash_coef.i.i59, -5261542750394134544
  %shifted.i.i.i63 = lshr i64 %product.i.i.i62, 32
  %xored.i.i.i64 = xor i64 %shifted.i.i.i63, %product.i.i.i62
  %hash.i.i.i65 = and i64 %xored.i.i.i64, %tbl_size.i.i60
  %offset_ptr.i.i66 = getelementptr i32, ptr %offset_tbl.i.i61, i64 %hash.i.i.i65
  %offset.i.i54 = load i32, ptr %offset_ptr.i.i66, align 4
  %16 = getelementptr i8, ptr %result.i, i64 8
  store ptr %.fca.0.extract, ptr %16, align 8
  %17 = getelementptr i8, ptr %result.i, i64 16
  store ptr %.fca.1.extract, ptr %17, align 8
  %18 = getelementptr i8, ptr %result.i, i64 24
  store ptr %.fca.2.extract, ptr %18, align 8
  %19 = getelementptr i8, ptr %result.i, i64 32
  store i32 %offset.i.i54, ptr %19, align 4
  %20 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @ArrayIterator)
  %21 = getelementptr i8, ptr %result.i, i64 40
  store i32 0, ptr %21, align 4
  %22 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 16, 3
  ret { ptr, ptr, ptr, i32 } %22
}

define void @Iterable2_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr } %3) {
  %5 = alloca [0 x ptr], align 8
  %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract7 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 5693646204635713916
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract1 = extractvalue { ptr } %3, 0
  %6 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract3, 0
  %7 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr %.fca.1.extract5, 1
  %8 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %.fca.2.extract7, 2
  %9 = insertvalue { ptr, ptr, ptr, i32 } %8, i32 %offset.i.i, 3
  %10 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract3)
  %11 = sext i32 %offset.i.i to i64
  %12 = getelementptr ptr, ptr %.fca.0.extract3, i64 %11
  %13 = load ptr, ptr %12, align 8
  %14 = tail call ptr %13(ptr %.fca.1.extract5)
  %15 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %16 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract3)
  %17 = getelementptr i8, ptr %12, i64 8
  %18 = load ptr, ptr %17, align 8
  %19 = call ptr %18({ ptr, ptr, ptr, i32 } %9, ptr nonnull %5)
  %20 = call { ptr, ptr, ptr, i32 } %19({ ptr, ptr, ptr, i32 } %9, { ptr, ptr, ptr, i32 } %9, ptr nonnull %5)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %20, 2
  %hash_coef_ptr.i.i25 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i26 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i27 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i28 = load i64, ptr %hash_coef_ptr.i.i25, align 4
  %tbl_size.i.i29 = load i64, ptr %tbl_size_ptr.i.i26, align 4
  %offset_tbl.i.i30 = load ptr, ptr %offset_tbl_ptr.i.i27, align 8
  %product.i.i.i31 = mul i64 %hash_coef.i.i28, 4189192806087951739
  %shifted.i.i.i32 = lshr i64 %product.i.i.i31, 32
  %xored.i.i.i33 = xor i64 %shifted.i.i.i32, %product.i.i.i31
  %hash.i.i.i34 = and i64 %xored.i.i.i33, %tbl_size.i.i29
  %offset_ptr.i.i35 = getelementptr i32, ptr %offset_tbl.i.i30, i64 %hash.i.i.i34
  %offset.i.i50 = load i32, ptr %offset_ptr.i.i35, align 4
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %21, align 8
  %22 = getelementptr inbounds i8, ptr %21, i64 8
  store ptr %.fca.1.extract, ptr %22, align 8
  %23 = getelementptr inbounds i8, ptr %21, i64 16
  store ptr %.fca.2.extract, ptr %23, align 8
  %24 = getelementptr inbounds i8, ptr %21, i64 24
  store i32 %offset.i.i50, ptr %24, align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %21)
  %26 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %27 = call ptr @llvm.invariant.start.p0(i64 184, ptr nonnull %.fca.0.extract3)
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %._crit_edge, %4
  %28 = phi i32 [ %.pre62, %._crit_edge ], [ %offset.i.i50, %4 ]
  %29 = phi ptr [ %.pre61, %._crit_edge ], [ %.fca.2.extract, %4 ]
  %30 = phi ptr [ %.pre, %._crit_edge ], [ %.fca.1.extract, %4 ]
  %31 = insertvalue { ptr, ptr, ptr, i32 } %26, ptr %30, 1
  %32 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %29, 2
  %33 = insertvalue { ptr, ptr, ptr, i32 } %32, i32 %28, 3
  %34 = load ptr, ptr %12, align 8
  %35 = call ptr %34(ptr %.fca.1.extract5)
  %36 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %37 = call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %.fca.0.extract)
  %38 = sext i32 %28 to i64
  %gep = getelementptr ptr, ptr %hash_coef_ptr.i.i25, i64 %38
  %39 = load ptr, ptr %gep, align 8
  %40 = call ptr %39({ ptr, ptr, ptr, i32 } %33, ptr nonnull %5)
  %41 = call { ptr, i160 } %40({ ptr, ptr, ptr, i32 } %33, { ptr, ptr, ptr, i32 } %33, ptr nonnull %5)
  %.fca.0.extract18 = extractvalue { ptr, i160 } %41, 0
  %42 = icmp ne ptr %.fca.0.extract18, @nil_typ
  %43 = icmp ne ptr %.fca.0.extract18, null
  %.not23 = and i1 %42, %43
  br i1 %.not23, label %._crit_edge, label %.critedge

._crit_edge:                                      ; preds = %._crit_edge1
  call void %.fca.0.extract1({ ptr, i160 } %41)
  %.pre = load ptr, ptr %22, align 8
  %.pre61 = load ptr, ptr %23, align 8
  %.pre62 = load i32, ptr %24, align 8
  br label %._crit_edge1

.critedge:                                        ; preds = %._crit_edge1
  ret void
}

define { ptr, i160 } @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, i160 } %3, { ptr } %4) {
  %6 = alloca [0 x ptr], align 8
  %.fca.0.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract14 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract10, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract10, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract10, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 5693646204635713916
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract1 = extractvalue { ptr } %4, 0
  %7 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract10, 0
  %8 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %.fca.1.extract12, 1
  %9 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %.fca.2.extract14, 2
  %10 = insertvalue { ptr, ptr, ptr, i32 } %9, i32 %offset.i.i, 3
  %11 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract10)
  %12 = sext i32 %offset.i.i to i64
  %13 = getelementptr ptr, ptr %.fca.0.extract10, i64 %12
  %14 = load ptr, ptr %13, align 8
  %15 = tail call ptr %14(ptr %.fca.1.extract12)
  %16 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %6)
  %17 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract10)
  %18 = getelementptr i8, ptr %13, i64 8
  %19 = load ptr, ptr %18, align 8
  %20 = call ptr %19({ ptr, ptr, ptr, i32 } %10, ptr nonnull %6)
  %21 = call { ptr, ptr, ptr, i32 } %20({ ptr, ptr, ptr, i32 } %10, { ptr, ptr, ptr, i32 } %10, ptr nonnull %6)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %21, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %21, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %21, 2
  %hash_coef_ptr.i.i47 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i48 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i49 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i50 = load i64, ptr %hash_coef_ptr.i.i47, align 4
  %tbl_size.i.i51 = load i64, ptr %tbl_size_ptr.i.i48, align 4
  %offset_tbl.i.i52 = load ptr, ptr %offset_tbl_ptr.i.i49, align 8
  %product.i.i.i53 = mul i64 %hash_coef.i.i50, 4189192806087951739
  %shifted.i.i.i54 = lshr i64 %product.i.i.i53, 32
  %xored.i.i.i55 = xor i64 %shifted.i.i.i54, %product.i.i.i53
  %hash.i.i.i56 = and i64 %xored.i.i.i55, %tbl_size.i.i51
  %offset_ptr.i.i57 = getelementptr i32, ptr %offset_tbl.i.i52, i64 %hash.i.i.i56
  %offset.i.i72 = load i32, ptr %offset_ptr.i.i57, align 4
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %22, align 8
  %23 = getelementptr inbounds i8, ptr %22, i64 8
  store ptr %.fca.1.extract, ptr %23, align 8
  %24 = getelementptr inbounds i8, ptr %22, i64 16
  store ptr %.fca.2.extract, ptr %24, align 8
  %25 = getelementptr inbounds i8, ptr %22, i64 24
  store i32 %offset.i.i72, ptr %25, align 8
  %26 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %22)
  %27 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %28 = call ptr @llvm.invariant.start.p0(i64 184, ptr nonnull %.fca.0.extract10)
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %._crit_edge, %5
  %29 = phi i32 [ %offset.i.i72, %5 ], [ %.pre89, %._crit_edge ]
  %30 = phi ptr [ %.fca.2.extract, %5 ], [ %.pre88, %._crit_edge ]
  %31 = phi ptr [ %.fca.1.extract, %5 ], [ %.pre, %._crit_edge ]
  %.pn = phi { ptr, i160 } [ %3, %5 ], [ %45, %._crit_edge ]
  %32 = insertvalue { ptr, ptr, ptr, i32 } %27, ptr %31, 1
  %33 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %30, 2
  %34 = insertvalue { ptr, ptr, ptr, i32 } %33, i32 %29, 3
  %35 = load ptr, ptr %13, align 8
  %36 = call ptr %35(ptr %.fca.1.extract12)
  %37 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %6)
  %38 = call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %.fca.0.extract)
  %39 = sext i32 %29 to i64
  %gep = getelementptr ptr, ptr %hash_coef_ptr.i.i47, i64 %39
  %40 = load ptr, ptr %gep, align 8
  %41 = call ptr %40({ ptr, ptr, ptr, i32 } %34, ptr nonnull %6)
  %42 = call { ptr, i160 } %41({ ptr, ptr, ptr, i32 } %34, { ptr, ptr, ptr, i32 } %34, ptr nonnull %6)
  %.fca.0.extract38 = extractvalue { ptr, i160 } %42, 0
  %43 = icmp ne ptr %.fca.0.extract38, @nil_typ
  %44 = icmp ne ptr %.fca.0.extract38, null
  %.not45 = and i1 %43, %44
  br i1 %.not45, label %._crit_edge, label %46

._crit_edge:                                      ; preds = %._crit_edge1
  %45 = call { ptr, i160 } %.fca.0.extract1({ ptr, i160 } %.pn, { ptr, i160 } %42)
  %.pre = load ptr, ptr %23, align 8
  %.pre88 = load ptr, ptr %24, align 8
  %.pre89 = load i32, ptr %25, align 8
  br label %._crit_edge1

46:                                               ; preds = %._crit_edge1
  ret { ptr, i160 } %.pn
}

define noundef i1 @Iterable2_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr } %3) {
  %5 = alloca [0 x ptr], align 8
  %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract7 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 5693646204635713916
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract1 = extractvalue { ptr } %3, 0
  %6 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract3, 0
  %7 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr %.fca.1.extract5, 1
  %8 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %.fca.2.extract7, 2
  %9 = insertvalue { ptr, ptr, ptr, i32 } %8, i32 %offset.i.i, 3
  %10 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract3)
  %11 = sext i32 %offset.i.i to i64
  %12 = getelementptr ptr, ptr %.fca.0.extract3, i64 %11
  %13 = load ptr, ptr %12, align 8
  %14 = tail call ptr %13(ptr %.fca.1.extract5)
  %15 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %16 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract3)
  %17 = getelementptr i8, ptr %12, i64 8
  %18 = load ptr, ptr %17, align 8
  %19 = call ptr %18({ ptr, ptr, ptr, i32 } %9, ptr nonnull %5)
  %20 = call { ptr, ptr, ptr, i32 } %19({ ptr, ptr, ptr, i32 } %9, { ptr, ptr, ptr, i32 } %9, ptr nonnull %5)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %20, 2
  %hash_coef_ptr.i.i23 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i24 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i25 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i26 = load i64, ptr %hash_coef_ptr.i.i23, align 4
  %tbl_size.i.i27 = load i64, ptr %tbl_size_ptr.i.i24, align 4
  %offset_tbl.i.i28 = load ptr, ptr %offset_tbl_ptr.i.i25, align 8
  %product.i.i.i29 = mul i64 %hash_coef.i.i26, 4189192806087951739
  %shifted.i.i.i30 = lshr i64 %product.i.i.i29, 32
  %xored.i.i.i31 = xor i64 %shifted.i.i.i30, %product.i.i.i29
  %hash.i.i.i32 = and i64 %xored.i.i.i31, %tbl_size.i.i27
  %offset_ptr.i.i33 = getelementptr i32, ptr %offset_tbl.i.i28, i64 %hash.i.i.i32
  %offset.i.i48 = load i32, ptr %offset_ptr.i.i33, align 4
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %21, align 8
  %22 = getelementptr inbounds i8, ptr %21, i64 8
  store ptr %.fca.1.extract, ptr %22, align 8
  %23 = getelementptr inbounds i8, ptr %21, i64 16
  store ptr %.fca.2.extract, ptr %23, align 8
  %24 = getelementptr inbounds i8, ptr %21, i64 24
  store i32 %offset.i.i48, ptr %24, align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %21)
  %26 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %27 = call ptr @llvm.invariant.start.p0(i64 184, ptr nonnull %.fca.0.extract3)
  br label %28

28:                                               ; preds = %46, %4
  %29 = load ptr, ptr %22, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } %26, ptr %29, 1
  %31 = load ptr, ptr %23, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %31, 2
  %33 = load i32, ptr %24, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %32, i32 %33, 3
  %35 = load ptr, ptr %12, align 8
  %36 = call ptr %35(ptr %.fca.1.extract5)
  %37 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %38 = call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %.fca.0.extract)
  %39 = sext i32 %33 to i64
  %gep = getelementptr ptr, ptr %hash_coef_ptr.i.i23, i64 %39
  %40 = load ptr, ptr %gep, align 8
  %41 = call ptr %40({ ptr, ptr, ptr, i32 } %34, ptr nonnull %5)
  %42 = call { ptr, i160 } %41({ ptr, ptr, ptr, i32 } %34, { ptr, ptr, ptr, i32 } %34, ptr nonnull %5)
  %.fca.0.extract18 = extractvalue { ptr, i160 } %42, 0
  %43 = icmp eq ptr %.fca.0.extract18, @nil_typ
  %44 = icmp eq ptr %.fca.0.extract18, null
  %45 = or i1 %43, %44
  br i1 %45, label %.critedge.cont, label %46

46:                                               ; preds = %28
  %47 = call i1 %.fca.0.extract1({ ptr, i160 } %42)
  br i1 %47, label %28, label %.critedge.cont

.critedge.cont:                                   ; preds = %46, %28
  ret i1 %45
}

define noundef i1 @Iterable2_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr } %3) {
  %5 = alloca [0 x ptr], align 8
  %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract7 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 5693646204635713916
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract1 = extractvalue { ptr } %3, 0
  %6 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract3, 0
  %7 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr %.fca.1.extract5, 1
  %8 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %.fca.2.extract7, 2
  %9 = insertvalue { ptr, ptr, ptr, i32 } %8, i32 %offset.i.i, 3
  %10 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract3)
  %11 = sext i32 %offset.i.i to i64
  %12 = getelementptr ptr, ptr %.fca.0.extract3, i64 %11
  %13 = load ptr, ptr %12, align 8
  %14 = tail call ptr %13(ptr %.fca.1.extract5)
  %15 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %16 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract3)
  %17 = getelementptr i8, ptr %12, i64 8
  %18 = load ptr, ptr %17, align 8
  %19 = call ptr %18({ ptr, ptr, ptr, i32 } %9, ptr nonnull %5)
  %20 = call { ptr, ptr, ptr, i32 } %19({ ptr, ptr, ptr, i32 } %9, { ptr, ptr, ptr, i32 } %9, ptr nonnull %5)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %20, 2
  %hash_coef_ptr.i.i25 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i26 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i27 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i28 = load i64, ptr %hash_coef_ptr.i.i25, align 4
  %tbl_size.i.i29 = load i64, ptr %tbl_size_ptr.i.i26, align 4
  %offset_tbl.i.i30 = load ptr, ptr %offset_tbl_ptr.i.i27, align 8
  %product.i.i.i31 = mul i64 %hash_coef.i.i28, 4189192806087951739
  %shifted.i.i.i32 = lshr i64 %product.i.i.i31, 32
  %xored.i.i.i33 = xor i64 %shifted.i.i.i32, %product.i.i.i31
  %hash.i.i.i34 = and i64 %xored.i.i.i33, %tbl_size.i.i29
  %offset_ptr.i.i35 = getelementptr i32, ptr %offset_tbl.i.i30, i64 %hash.i.i.i34
  %offset.i.i50 = load i32, ptr %offset_ptr.i.i35, align 4
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %21, align 8
  %22 = getelementptr inbounds i8, ptr %21, i64 8
  store ptr %.fca.1.extract, ptr %22, align 8
  %23 = getelementptr inbounds i8, ptr %21, i64 16
  store ptr %.fca.2.extract, ptr %23, align 8
  %24 = getelementptr inbounds i8, ptr %21, i64 24
  store i32 %offset.i.i50, ptr %24, align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %21)
  %26 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %27 = call ptr @llvm.invariant.start.p0(i64 184, ptr nonnull %.fca.0.extract3)
  br label %28

28:                                               ; preds = %45, %4
  %29 = load ptr, ptr %22, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } %26, ptr %29, 1
  %31 = load ptr, ptr %23, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %31, 2
  %33 = load i32, ptr %24, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %32, i32 %33, 3
  %35 = load ptr, ptr %12, align 8
  %36 = call ptr %35(ptr %.fca.1.extract5)
  %37 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %38 = call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %.fca.0.extract)
  %39 = sext i32 %33 to i64
  %gep = getelementptr ptr, ptr %hash_coef_ptr.i.i25, i64 %39
  %40 = load ptr, ptr %gep, align 8
  %41 = call ptr %40({ ptr, ptr, ptr, i32 } %34, ptr nonnull %5)
  %42 = call { ptr, i160 } %41({ ptr, ptr, ptr, i32 } %34, { ptr, ptr, ptr, i32 } %34, ptr nonnull %5)
  %.fca.0.extract18 = extractvalue { ptr, i160 } %42, 0
  %43 = icmp ne ptr %.fca.0.extract18, @nil_typ
  %44 = icmp ne ptr %.fca.0.extract18, null
  %.not23 = and i1 %43, %44
  br i1 %.not23, label %45, label %.critedge.cont

45:                                               ; preds = %28
  %46 = call i1 %.fca.0.extract1({ ptr, i160 } %42)
  br i1 %46, label %.critedge.cont, label %28

.critedge.cont:                                   ; preds = %28, %45
  ret i1 %.not23
}

define { ptr, ptr, ptr, i32 } @Iterable2_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readonly %2, { ptr } %3) {
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 5693646204635713916
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %5 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract1)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract1, i64 %6
  %8 = load ptr, ptr %7, align 8
  %9 = tail call ptr %8(ptr %.fca.1.extract)
  %10 = load ptr, ptr %2, align 8
  %11 = getelementptr i8, ptr %10, i64 8
  %12 = load ptr, ptr %11, align 8
  %result.i = tail call noalias dereferenceable_or_null(56) ptr @bump_malloc_inner(i64 noundef 56, ptr nonnull @current_ptr) #29
  store ptr %9, ptr %result.i, align 8
  %13 = getelementptr i8, ptr %result.i, i64 8
  store ptr %12, ptr %13, align 8
  %14 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i)
  %15 = insertvalue { ptr, ptr, ptr, i32 } { ptr @MapIterable2, ptr undef, ptr undef, i32 undef }, ptr %result.i, 1
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, ptr undef, 2
  %17 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 9, 3
  %18 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract1)
  %19 = load ptr, ptr %7, align 8
  %20 = tail call ptr %19(ptr %.fca.1.extract)
  %21 = tail call ptr @llvm.invariant.start.p0(i64 408, ptr nonnull @MapIterable2)
  %hash_coef.i.i61 = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i62 = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i63 = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i64 = mul i64 %hash_coef.i.i61, 5693646204635713916
  %shifted.i.i.i65 = lshr i64 %product.i.i.i64, 32
  %xored.i.i.i66 = xor i64 %shifted.i.i.i65, %product.i.i.i64
  %hash.i.i.i67 = and i64 %xored.i.i.i66, %tbl_size.i.i62
  %offset_ptr.i.i68 = getelementptr i32, ptr %offset_tbl.i.i63, i64 %hash.i.i.i67
  %offset.i.i56 = load i32, ptr %offset_ptr.i.i68, align 4
  %22 = getelementptr i8, ptr %result.i, i64 16
  store ptr %.fca.0.extract1, ptr %22, align 8
  %23 = getelementptr i8, ptr %result.i, i64 24
  store ptr %.fca.1.extract, ptr %23, align 8
  %24 = getelementptr i8, ptr %result.i, i64 32
  store ptr %.fca.2.extract, ptr %24, align 8
  %25 = getelementptr i8, ptr %result.i, i64 40
  store i32 %offset.i.i56, ptr %25, align 4
  %26 = tail call ptr @llvm.invariant.start.p0(i64 408, ptr nonnull @MapIterable2)
  %27 = getelementptr i8, ptr %result.i, i64 48
  %.fca.0.extract.i = extractvalue { ptr } %3, 0
  store ptr %.fca.0.extract.i, ptr %27, align 8
  ret { ptr, ptr, ptr, i32 } %17
}

define { ptr, ptr, ptr, i32 } @Iterable2_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr } %3) {
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 5693646204635713916
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %5 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract1)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract1, i64 %6
  %8 = load ptr, ptr %7, align 8
  %9 = tail call ptr %8(ptr %.fca.1.extract)
  %result.i = tail call noalias dereferenceable_or_null(48) ptr @bump_malloc_inner(i64 noundef 48, ptr nonnull @current_ptr) #29
  store ptr %9, ptr %result.i, align 8
  %10 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i)
  %11 = insertvalue { ptr, ptr, ptr, i32 } { ptr @FilterIterable2, ptr undef, ptr undef, i32 undef }, ptr %result.i, 1
  %12 = insertvalue { ptr, ptr, ptr, i32 } %11, ptr undef, 2
  %13 = insertvalue { ptr, ptr, ptr, i32 } %12, i32 9, 3
  %14 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract1)
  %15 = load ptr, ptr %7, align 8
  %16 = tail call ptr %15(ptr %.fca.1.extract)
  %17 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr nonnull @FilterIterable2)
  %hash_coef.i.i61 = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i62 = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i63 = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i64 = mul i64 %hash_coef.i.i61, 5693646204635713916
  %shifted.i.i.i65 = lshr i64 %product.i.i.i64, 32
  %xored.i.i.i66 = xor i64 %shifted.i.i.i65, %product.i.i.i64
  %hash.i.i.i67 = and i64 %xored.i.i.i66, %tbl_size.i.i62
  %offset_ptr.i.i68 = getelementptr i32, ptr %offset_tbl.i.i63, i64 %hash.i.i.i67
  %offset.i.i56 = load i32, ptr %offset_ptr.i.i68, align 4
  %18 = getelementptr i8, ptr %result.i, i64 8
  store ptr %.fca.0.extract1, ptr %18, align 8
  %19 = getelementptr i8, ptr %result.i, i64 16
  store ptr %.fca.1.extract, ptr %19, align 8
  %20 = getelementptr i8, ptr %result.i, i64 24
  store ptr %.fca.2.extract, ptr %20, align 8
  %21 = getelementptr i8, ptr %result.i, i64 32
  store i32 %offset.i.i56, ptr %21, align 4
  %22 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr nonnull @FilterIterable2)
  %23 = getelementptr i8, ptr %result.i, i64 40
  %.fca.0.extract.i = extractvalue { ptr } %3, 0
  store ptr %.fca.0.extract.i, ptr %23, align 8
  ret { ptr, ptr, ptr, i32 } %13
}

define { ptr, ptr, ptr, i32 } @Iterable2_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 5693646204635713916
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %hash_coef_ptr.i.i10 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i11 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i12 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %5 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract1)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract1, i64 %6
  %8 = load ptr, ptr %7, align 8
  %9 = tail call ptr %8(ptr %.fca.1.extract3)
  %result.i = tail call noalias dereferenceable_or_null(72) ptr @bump_malloc_inner(i64 noundef 72, ptr nonnull @current_ptr) #29
  store ptr %9, ptr %result.i, align 8
  %10 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i)
  %11 = insertvalue { ptr, ptr, ptr, i32 } { ptr @ChainIterable2, ptr undef, ptr undef, i32 undef }, ptr %result.i, 1
  %12 = insertvalue { ptr, ptr, ptr, i32 } %11, ptr undef, 2
  %13 = insertvalue { ptr, ptr, ptr, i32 } %12, i32 9, 3
  %14 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract1)
  %15 = load ptr, ptr %7, align 8
  %16 = tail call ptr %15(ptr %.fca.1.extract3)
  %17 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr nonnull @ChainIterable2)
  %hash_coef.i.i132 = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i133 = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i134 = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i135 = mul i64 %hash_coef.i.i132, 5693646204635713916
  %shifted.i.i.i136 = lshr i64 %product.i.i.i135, 32
  %xored.i.i.i137 = xor i64 %shifted.i.i.i136, %product.i.i.i135
  %hash.i.i.i138 = and i64 %xored.i.i.i137, %tbl_size.i.i133
  %offset_ptr.i.i139 = getelementptr i32, ptr %offset_tbl.i.i134, i64 %hash.i.i.i138
  %offset.i.i126 = load i32, ptr %offset_ptr.i.i139, align 4
  %18 = getelementptr i8, ptr %result.i, i64 8
  store ptr %.fca.0.extract1, ptr %18, align 8
  %19 = getelementptr i8, ptr %result.i, i64 16
  store ptr %.fca.1.extract3, ptr %19, align 8
  %20 = getelementptr i8, ptr %result.i, i64 24
  store ptr %.fca.2.extract5, ptr %20, align 8
  %21 = getelementptr i8, ptr %result.i, i64 32
  store i32 %offset.i.i126, ptr %21, align 4
  %hash_coef.i.i104 = load i64, ptr %hash_coef_ptr.i.i10, align 4
  %tbl_size.i.i105 = load i64, ptr %tbl_size_ptr.i.i11, align 4
  %offset_tbl.i.i106 = load ptr, ptr %offset_tbl_ptr.i.i12, align 8
  %product.i.i.i107 = mul i64 %hash_coef.i.i104, 5693646204635713916
  %shifted.i.i.i108 = lshr i64 %product.i.i.i107, 32
  %xored.i.i.i109 = xor i64 %shifted.i.i.i108, %product.i.i.i107
  %hash.i.i.i110 = and i64 %xored.i.i.i109, %tbl_size.i.i105
  %offset_ptr.i.i111 = getelementptr i32, ptr %offset_tbl.i.i106, i64 %hash.i.i.i110
  %offset.i.i99 = load i32, ptr %offset_ptr.i.i111, align 4
  %22 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr nonnull @ChainIterable2)
  %23 = getelementptr i8, ptr %result.i, i64 40
  store ptr %.fca.0.extract, ptr %23, align 8
  %24 = getelementptr i8, ptr %result.i, i64 48
  store ptr %.fca.1.extract, ptr %24, align 8
  %25 = getelementptr i8, ptr %result.i, i64 56
  store ptr %.fca.2.extract, ptr %25, align 8
  %26 = getelementptr i8, ptr %result.i, i64 64
  store i32 %offset.i.i99, ptr %26, align 4
  ret { ptr, ptr, ptr, i32 } %13
}

define { ptr, ptr, ptr, i32 } @Iterable2_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 5693646204635713916
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %hash_coef_ptr.i.i10 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i11 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i12 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %5 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract1)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract1, i64 %6
  %8 = load ptr, ptr %7, align 8
  %9 = tail call ptr %8(ptr %.fca.1.extract3)
  %result.i = tail call noalias dereferenceable_or_null(72) ptr @bump_malloc_inner(i64 noundef 72, ptr nonnull @current_ptr) #29
  store ptr %9, ptr %result.i, align 8
  %10 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i)
  %11 = insertvalue { ptr, ptr, ptr, i32 } { ptr @InterleaveIterable2, ptr undef, ptr undef, i32 undef }, ptr %result.i, 1
  %12 = insertvalue { ptr, ptr, ptr, i32 } %11, ptr undef, 2
  %13 = insertvalue { ptr, ptr, ptr, i32 } %12, i32 9, 3
  %14 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract1)
  %15 = load ptr, ptr %7, align 8
  %16 = tail call ptr %15(ptr %.fca.1.extract3)
  %17 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr nonnull @InterleaveIterable2)
  %hash_coef.i.i132 = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i133 = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i134 = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i135 = mul i64 %hash_coef.i.i132, 5693646204635713916
  %shifted.i.i.i136 = lshr i64 %product.i.i.i135, 32
  %xored.i.i.i137 = xor i64 %shifted.i.i.i136, %product.i.i.i135
  %hash.i.i.i138 = and i64 %xored.i.i.i137, %tbl_size.i.i133
  %offset_ptr.i.i139 = getelementptr i32, ptr %offset_tbl.i.i134, i64 %hash.i.i.i138
  %offset.i.i126 = load i32, ptr %offset_ptr.i.i139, align 4
  %18 = getelementptr i8, ptr %result.i, i64 8
  store ptr %.fca.0.extract1, ptr %18, align 8
  %19 = getelementptr i8, ptr %result.i, i64 16
  store ptr %.fca.1.extract3, ptr %19, align 8
  %20 = getelementptr i8, ptr %result.i, i64 24
  store ptr %.fca.2.extract5, ptr %20, align 8
  %21 = getelementptr i8, ptr %result.i, i64 32
  store i32 %offset.i.i126, ptr %21, align 4
  %hash_coef.i.i104 = load i64, ptr %hash_coef_ptr.i.i10, align 4
  %tbl_size.i.i105 = load i64, ptr %tbl_size_ptr.i.i11, align 4
  %offset_tbl.i.i106 = load ptr, ptr %offset_tbl_ptr.i.i12, align 8
  %product.i.i.i107 = mul i64 %hash_coef.i.i104, 5693646204635713916
  %shifted.i.i.i108 = lshr i64 %product.i.i.i107, 32
  %xored.i.i.i109 = xor i64 %shifted.i.i.i108, %product.i.i.i107
  %hash.i.i.i110 = and i64 %xored.i.i.i109, %tbl_size.i.i105
  %offset_ptr.i.i111 = getelementptr i32, ptr %offset_tbl.i.i106, i64 %hash.i.i.i110
  %offset.i.i99 = load i32, ptr %offset_ptr.i.i111, align 4
  %22 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr nonnull @InterleaveIterable2)
  %23 = getelementptr i8, ptr %result.i, i64 40
  store ptr %.fca.0.extract, ptr %23, align 8
  %24 = getelementptr i8, ptr %result.i, i64 48
  store ptr %.fca.1.extract, ptr %24, align 8
  %25 = getelementptr i8, ptr %result.i, i64 56
  store ptr %.fca.2.extract, ptr %25, align 8
  %26 = getelementptr i8, ptr %result.i, i64 64
  store i32 %offset.i.i99, ptr %26, align 4
  ret { ptr, ptr, ptr, i32 } %13
}

define { ptr, ptr, ptr, i32 } @Iterable2_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %.fca.0.extract17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract19 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract21 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract17, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract17, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract17, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 5693646204635713916
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract13 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract15 = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %hash_coef_ptr.i.i26 = getelementptr i8, ptr %.fca.0.extract9, i64 8
  %tbl_size_ptr.i.i27 = getelementptr i8, ptr %.fca.0.extract9, i64 16
  %offset_tbl_ptr.i.i28 = getelementptr i8, ptr %.fca.0.extract9, i64 40
  %5 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract17)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract17, i64 %6
  %8 = load ptr, ptr %7, align 8
  %9 = tail call ptr %8(ptr %.fca.1.extract19)
  %10 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract9)
  %11 = sext i32 %.fca.3.extract15 to i64
  %12 = getelementptr ptr, ptr %.fca.0.extract9, i64 %11
  %13 = load ptr, ptr %12, align 8
  %14 = tail call ptr %13(ptr %.fca.1.extract11)
  %result.i = tail call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %15 = getelementptr i8, ptr %result.i, i64 16
  store ptr %14, ptr %15, align 8
  %16 = getelementptr i8, ptr %result.i, i64 8
  store ptr %9, ptr %16, align 8
  %17 = getelementptr i8, ptr %result.i, i64 24
  store ptr null, ptr %17, align 8
  %18 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i)
  store ptr @Pair, ptr %result.i, align 8
  %result.i39 = tail call noalias dereferenceable_or_null(88) ptr @bump_malloc_inner(i64 noundef 88, ptr nonnull @current_ptr) #29
  store ptr %9, ptr %result.i39, align 8
  %19 = getelementptr i8, ptr %result.i39, i64 8
  store ptr %14, ptr %19, align 8
  %20 = getelementptr i8, ptr %result.i39, i64 16
  store ptr %result.i, ptr %20, align 8
  %21 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %result.i39)
  %22 = insertvalue { ptr, ptr, ptr, i32 } { ptr @ZipIterable2, ptr undef, ptr undef, i32 undef }, ptr %result.i39, 1
  %23 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr undef, 2
  %24 = insertvalue { ptr, ptr, ptr, i32 } %23, i32 9, 3
  %25 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract17)
  %26 = load ptr, ptr %7, align 8
  %27 = tail call ptr %26(ptr %.fca.1.extract19)
  %28 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract9)
  %29 = load ptr, ptr %12, align 8
  %30 = tail call ptr %29(ptr %.fca.1.extract11)
  %31 = tail call ptr @llvm.invariant.start.p0(i64 416, ptr nonnull @ZipIterable2)
  %hash_coef.i.i148 = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i149 = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i150 = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i151 = mul i64 %hash_coef.i.i148, 5693646204635713916
  %shifted.i.i.i152 = lshr i64 %product.i.i.i151, 32
  %xored.i.i.i153 = xor i64 %shifted.i.i.i152, %product.i.i.i151
  %hash.i.i.i154 = and i64 %xored.i.i.i153, %tbl_size.i.i149
  %offset_ptr.i.i155 = getelementptr i32, ptr %offset_tbl.i.i150, i64 %hash.i.i.i154
  %offset.i.i142 = load i32, ptr %offset_ptr.i.i155, align 4
  %32 = getelementptr i8, ptr %result.i39, i64 24
  store ptr %.fca.0.extract17, ptr %32, align 8
  %33 = getelementptr i8, ptr %result.i39, i64 32
  store ptr %.fca.1.extract19, ptr %33, align 8
  %34 = getelementptr i8, ptr %result.i39, i64 40
  store ptr %.fca.2.extract21, ptr %34, align 8
  %35 = getelementptr i8, ptr %result.i39, i64 48
  store i32 %offset.i.i142, ptr %35, align 4
  %hash_coef.i.i120 = load i64, ptr %hash_coef_ptr.i.i26, align 4
  %tbl_size.i.i121 = load i64, ptr %tbl_size_ptr.i.i27, align 4
  %offset_tbl.i.i122 = load ptr, ptr %offset_tbl_ptr.i.i28, align 8
  %product.i.i.i123 = mul i64 %hash_coef.i.i120, 5693646204635713916
  %shifted.i.i.i124 = lshr i64 %product.i.i.i123, 32
  %xored.i.i.i125 = xor i64 %shifted.i.i.i124, %product.i.i.i123
  %hash.i.i.i126 = and i64 %xored.i.i.i125, %tbl_size.i.i121
  %offset_ptr.i.i127 = getelementptr i32, ptr %offset_tbl.i.i122, i64 %hash.i.i.i126
  %offset.i.i115 = load i32, ptr %offset_ptr.i.i127, align 4
  %36 = tail call ptr @llvm.invariant.start.p0(i64 416, ptr nonnull @ZipIterable2)
  %37 = getelementptr i8, ptr %result.i39, i64 56
  store ptr %.fca.0.extract9, ptr %37, align 8
  %38 = getelementptr i8, ptr %result.i39, i64 64
  store ptr %.fca.1.extract11, ptr %38, align 8
  %39 = getelementptr i8, ptr %result.i39, i64 72
  store ptr %.fca.2.extract13, ptr %39, align 8
  %40 = getelementptr i8, ptr %result.i39, i64 80
  store i32 %offset.i.i115, ptr %40, align 4
  ret { ptr, ptr, ptr, i32 } %24
}

define { ptr, ptr, ptr, i32 } @Iterable2_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %.fca.0.extract17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract19 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract21 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract17, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract17, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract17, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 5693646204635713916
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract13 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract15 = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %hash_coef_ptr.i.i26 = getelementptr i8, ptr %.fca.0.extract9, i64 8
  %tbl_size_ptr.i.i27 = getelementptr i8, ptr %.fca.0.extract9, i64 16
  %offset_tbl_ptr.i.i28 = getelementptr i8, ptr %.fca.0.extract9, i64 40
  %5 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract17)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract17, i64 %6
  %8 = load ptr, ptr %7, align 8
  %9 = tail call ptr %8(ptr %.fca.1.extract19)
  %10 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract9)
  %11 = sext i32 %.fca.3.extract15 to i64
  %12 = getelementptr ptr, ptr %.fca.0.extract9, i64 %11
  %13 = load ptr, ptr %12, align 8
  %14 = tail call ptr %13(ptr %.fca.1.extract11)
  %result.i = tail call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %15 = getelementptr i8, ptr %result.i, i64 16
  store ptr %14, ptr %15, align 8
  %16 = getelementptr i8, ptr %result.i, i64 8
  store ptr %9, ptr %16, align 8
  %17 = getelementptr i8, ptr %result.i, i64 24
  store ptr null, ptr %17, align 8
  %18 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i)
  store ptr @Pair, ptr %result.i, align 8
  %result.i39 = tail call noalias dereferenceable_or_null(88) ptr @bump_malloc_inner(i64 noundef 88, ptr nonnull @current_ptr) #29
  store ptr %9, ptr %result.i39, align 8
  %19 = getelementptr i8, ptr %result.i39, i64 8
  store ptr %14, ptr %19, align 8
  %20 = getelementptr i8, ptr %result.i39, i64 16
  store ptr %result.i, ptr %20, align 8
  %21 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %result.i39)
  %22 = insertvalue { ptr, ptr, ptr, i32 } { ptr @ProductIterable2, ptr undef, ptr undef, i32 undef }, ptr %result.i39, 1
  %23 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr undef, 2
  %24 = insertvalue { ptr, ptr, ptr, i32 } %23, i32 9, 3
  %25 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract17)
  %26 = load ptr, ptr %7, align 8
  %27 = tail call ptr %26(ptr %.fca.1.extract19)
  %28 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract9)
  %29 = load ptr, ptr %12, align 8
  %30 = tail call ptr %29(ptr %.fca.1.extract11)
  %31 = tail call ptr @llvm.invariant.start.p0(i64 416, ptr nonnull @ProductIterable2)
  %hash_coef.i.i148 = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i149 = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i150 = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i151 = mul i64 %hash_coef.i.i148, 5693646204635713916
  %shifted.i.i.i152 = lshr i64 %product.i.i.i151, 32
  %xored.i.i.i153 = xor i64 %shifted.i.i.i152, %product.i.i.i151
  %hash.i.i.i154 = and i64 %xored.i.i.i153, %tbl_size.i.i149
  %offset_ptr.i.i155 = getelementptr i32, ptr %offset_tbl.i.i150, i64 %hash.i.i.i154
  %offset.i.i142 = load i32, ptr %offset_ptr.i.i155, align 4
  %32 = getelementptr i8, ptr %result.i39, i64 24
  store ptr %.fca.0.extract17, ptr %32, align 8
  %33 = getelementptr i8, ptr %result.i39, i64 32
  store ptr %.fca.1.extract19, ptr %33, align 8
  %34 = getelementptr i8, ptr %result.i39, i64 40
  store ptr %.fca.2.extract21, ptr %34, align 8
  %35 = getelementptr i8, ptr %result.i39, i64 48
  store i32 %offset.i.i142, ptr %35, align 4
  %hash_coef.i.i120 = load i64, ptr %hash_coef_ptr.i.i26, align 4
  %tbl_size.i.i121 = load i64, ptr %tbl_size_ptr.i.i27, align 4
  %offset_tbl.i.i122 = load ptr, ptr %offset_tbl_ptr.i.i28, align 8
  %product.i.i.i123 = mul i64 %hash_coef.i.i120, 5693646204635713916
  %shifted.i.i.i124 = lshr i64 %product.i.i.i123, 32
  %xored.i.i.i125 = xor i64 %shifted.i.i.i124, %product.i.i.i123
  %hash.i.i.i126 = and i64 %xored.i.i.i125, %tbl_size.i.i121
  %offset_ptr.i.i127 = getelementptr i32, ptr %offset_tbl.i.i122, i64 %hash.i.i.i126
  %offset.i.i115 = load i32, ptr %offset_ptr.i.i127, align 4
  %36 = tail call ptr @llvm.invariant.start.p0(i64 416, ptr nonnull @ProductIterable2)
  %37 = getelementptr i8, ptr %result.i39, i64 56
  store ptr %.fca.0.extract9, ptr %37, align 8
  %38 = getelementptr i8, ptr %result.i39, i64 64
  store ptr %.fca.1.extract11, ptr %38, align 8
  %39 = getelementptr i8, ptr %result.i39, i64 72
  store ptr %.fca.2.extract13, ptr %39, align 8
  %40 = getelementptr i8, ptr %result.i39, i64 80
  store i32 %offset.i.i115, ptr %40, align 4
  ret { ptr, ptr, ptr, i32 } %24
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_ProductIterable2(ptr nocapture readnone %0) #0 {
  ret { i64, i64 } { i64 88, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ProductIterable2_field_ProductIterable2_0(ptr nocapture readonly %0) #3 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ProductIterable2_field_ProductIterable2_1(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ProductIterable2_field_ProductIterable2_2(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ProductIterable2_B_init_firstIterable2T_secondIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 208
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ProductIterable2_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 216
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ProductIterable2_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 224
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ProductIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 232
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ProductIterable2_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 240
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ProductIterable2_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 248
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ProductIterable2_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 256
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ProductIterable2_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 264
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ProductIterable2_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 272
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ProductIterable2_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 280
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ProductIterable2_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 288
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ProductIterable2_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 296
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @ProductIterable2_init_firstIterable2T_secondIterable2U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 7827074759551300494
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %hash_coef_ptr.i.i18 = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i19 = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i20 = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i21 = load i64, ptr %hash_coef_ptr.i.i18, align 4
  %tbl_size.i.i22 = load i64, ptr %tbl_size_ptr.i.i19, align 4
  %offset_tbl.i.i23 = load ptr, ptr %offset_tbl_ptr.i.i20, align 8
  %product.i.i.i24 = mul i64 %hash_coef.i.i21, 5693646204635713916
  %shifted.i.i.i25 = lshr i64 %product.i.i.i24, 32
  %xored.i.i.i26 = xor i64 %shifted.i.i.i25, %product.i.i.i24
  %hash.i.i.i27 = and i64 %xored.i.i.i26, %tbl_size.i.i22
  %offset_ptr.i.i28 = getelementptr i32, ptr %offset_tbl.i.i23, i64 %hash.i.i.i27
  %offset.i.i43 = load i32, ptr %offset_ptr.i.i28, align 4
  %6 = tail call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract9)
  %7 = sext i32 %offset.i.i to i64
  %8 = getelementptr ptr, ptr %.fca.0.extract9, i64 %7
  %9 = getelementptr i8, ptr %8, i64 24
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr i8, ptr %10, i64 8
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.1.extract3, 1
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, ptr %.fca.2.extract5, 2
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, i32 %offset.i.i43, 3
  tail call void %12(ptr %.fca.1.extract11, { ptr, ptr, ptr, i32 } %16)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %hash_coef_ptr.i.i46 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i47 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i48 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i49 = load i64, ptr %hash_coef_ptr.i.i46, align 4
  %tbl_size.i.i50 = load i64, ptr %tbl_size_ptr.i.i47, align 4
  %offset_tbl.i.i51 = load ptr, ptr %offset_tbl_ptr.i.i48, align 8
  %product.i.i.i52 = mul i64 %hash_coef.i.i49, 5693646204635713916
  %shifted.i.i.i53 = lshr i64 %product.i.i.i52, 32
  %xored.i.i.i54 = xor i64 %shifted.i.i.i53, %product.i.i.i52
  %hash.i.i.i55 = and i64 %xored.i.i.i54, %tbl_size.i.i50
  %offset_ptr.i.i56 = getelementptr i32, ptr %offset_tbl.i.i51, i64 %hash.i.i.i55
  %offset.i.i71 = load i32, ptr %offset_ptr.i.i56, align 4
  %17 = tail call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract9)
  %18 = getelementptr i8, ptr %8, i64 32
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr i8, ptr %19, i64 8
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %23 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %.fca.1.extract, 1
  %24 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %.fca.2.extract, 2
  %25 = insertvalue { ptr, ptr, ptr, i32 } %24, i32 %offset.i.i71, 3
  tail call void %21(ptr %.fca.1.extract11, { ptr, ptr, ptr, i32 } %25)
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterable2_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract41 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract43 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract41, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract41, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract41, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 7827074759551300494
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %5 = tail call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract41)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract41, i64 %6
  %8 = getelementptr i8, ptr %7, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = load ptr, ptr %9, align 8
  %11 = tail call { ptr, ptr, ptr, i32 } %10(ptr %.fca.1.extract43)
  %.fca.0.extract33 = extractvalue { ptr, ptr, ptr, i32 } %11, 0
  %.fca.1.extract35 = extractvalue { ptr, ptr, ptr, i32 } %11, 1
  %.fca.2.extract37 = extractvalue { ptr, ptr, ptr, i32 } %11, 2
  %.fca.3.extract39 = extractvalue { ptr, ptr, ptr, i32 } %11, 3
  %hash_coef_ptr.i.i50 = getelementptr i8, ptr %.fca.0.extract33, i64 8
  %tbl_size_ptr.i.i51 = getelementptr i8, ptr %.fca.0.extract33, i64 16
  %offset_tbl_ptr.i.i52 = getelementptr i8, ptr %.fca.0.extract33, i64 40
  %hash_coef.i.i53 = load i64, ptr %hash_coef_ptr.i.i50, align 4
  %tbl_size.i.i54 = load i64, ptr %tbl_size_ptr.i.i51, align 4
  %offset_tbl.i.i55 = load ptr, ptr %offset_tbl_ptr.i.i52, align 8
  %product.i.i.i56 = mul i64 %hash_coef.i.i53, 5693646204635713916
  %shifted.i.i.i57 = lshr i64 %product.i.i.i56, 32
  %xored.i.i.i58 = xor i64 %shifted.i.i.i57, %product.i.i.i56
  %hash.i.i.i59 = and i64 %xored.i.i.i58, %tbl_size.i.i54
  %offset_ptr.i.i60 = getelementptr i32, ptr %offset_tbl.i.i55, i64 %hash.i.i.i59
  %offset.i.i61 = load i32, ptr %offset_ptr.i.i60, align 4
  %eq.i = icmp eq i32 %.fca.3.extract39, %offset.i.i61
  tail call void @llvm.assume(i1 %eq.i) #30
  %12 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract33, 0
  %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.1.extract35, 1
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.2.extract37, 2
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, i32 %.fca.3.extract39, 3
  %16 = tail call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract41)
  %17 = load ptr, ptr %7, align 8
  %18 = tail call ptr %17(ptr %.fca.1.extract43)
  %19 = tail call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract41)
  %20 = getelementptr i8, ptr %7, i64 8
  %21 = load ptr, ptr %20, align 8
  %22 = tail call ptr %21(ptr %.fca.1.extract43)
  %23 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %24 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract33)
  %25 = sext i32 %.fca.3.extract39 to i64
  %26 = getelementptr ptr, ptr %.fca.0.extract33, i64 %25
  %27 = getelementptr i8, ptr %26, i64 8
  %28 = load ptr, ptr %27, align 8
  %29 = call ptr %28({ ptr, ptr, ptr, i32 } %15, ptr nonnull %4)
  %30 = call { ptr, ptr, ptr, i32 } %29({ ptr, ptr, ptr, i32 } %15, { ptr, ptr, ptr, i32 } %15, ptr nonnull %4)
  %31 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract41)
  %32 = getelementptr i8, ptr %7, i64 32
  %33 = load ptr, ptr %32, align 8
  %34 = load ptr, ptr %33, align 8
  %35 = call { ptr, ptr, ptr, i32 } %34(ptr %.fca.1.extract43)
  %.fca.0.extract17 = extractvalue { ptr, ptr, ptr, i32 } %35, 0
  %.fca.3.extract23 = extractvalue { ptr, ptr, ptr, i32 } %35, 3
  %hash_coef_ptr.i.i78 = getelementptr i8, ptr %.fca.0.extract17, i64 8
  %tbl_size_ptr.i.i79 = getelementptr i8, ptr %.fca.0.extract17, i64 16
  %offset_tbl_ptr.i.i80 = getelementptr i8, ptr %.fca.0.extract17, i64 40
  %hash_coef.i.i81 = load i64, ptr %hash_coef_ptr.i.i78, align 4
  %tbl_size.i.i82 = load i64, ptr %tbl_size_ptr.i.i79, align 4
  %offset_tbl.i.i83 = load ptr, ptr %offset_tbl_ptr.i.i80, align 8
  %product.i.i.i84 = mul i64 %hash_coef.i.i81, 5693646204635713916
  %shifted.i.i.i85 = lshr i64 %product.i.i.i84, 32
  %xored.i.i.i86 = xor i64 %shifted.i.i.i85, %product.i.i.i84
  %hash.i.i.i87 = and i64 %xored.i.i.i86, %tbl_size.i.i82
  %offset_ptr.i.i88 = getelementptr i32, ptr %offset_tbl.i.i83, i64 %hash.i.i.i87
  %offset.i.i89 = load i32, ptr %offset_ptr.i.i88, align 4
  %eq.i92 = icmp eq i32 %.fca.3.extract23, %offset.i.i89
  call void @llvm.assume(i1 %eq.i92) #30
  %36 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract41)
  %37 = load ptr, ptr %7, align 8
  %38 = call ptr %37(ptr %.fca.1.extract43)
  %39 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract41)
  %40 = load ptr, ptr %20, align 8
  %41 = call ptr %40(ptr %.fca.1.extract43)
  %result.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %42 = getelementptr i8, ptr %result.i, i64 16
  store ptr %41, ptr %42, align 8
  %43 = getelementptr i8, ptr %result.i, i64 8
  store ptr %38, ptr %43, align 8
  %44 = getelementptr i8, ptr %result.i, i64 24
  store ptr null, ptr %44, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i)
  store ptr @Pair, ptr %result.i, align 8
  %result.i93 = call noalias dereferenceable_or_null(152) ptr @bump_malloc_inner(i64 noundef 152, ptr nonnull @current_ptr) #29
  store ptr %38, ptr %result.i93, align 8
  %46 = getelementptr i8, ptr %result.i93, i64 8
  store ptr %41, ptr %46, align 8
  %47 = getelementptr i8, ptr %result.i93, i64 16
  store ptr %result.i, ptr %47, align 8
  %48 = call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %result.i93)
  %49 = alloca { ptr, ptr, ptr, i32 }, align 8
  %50 = getelementptr inbounds i8, ptr %49, i64 8
  %51 = getelementptr inbounds i8, ptr %49, i64 24
  store ptr @ProductIterator2, ptr %49, align 8
  store ptr %result.i93, ptr %50, align 8
  store i32 9, ptr %51, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %49)
  %53 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract41)
  %54 = load ptr, ptr %8, align 8
  %55 = load ptr, ptr %54, align 8
  %56 = call { ptr, ptr, ptr, i32 } %55(ptr %.fca.1.extract43)
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %56, 0
  %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %56, 1
  %.fca.2.extract13 = extractvalue { ptr, ptr, ptr, i32 } %56, 2
  %.fca.3.extract15 = extractvalue { ptr, ptr, ptr, i32 } %56, 3
  %hash_coef_ptr.i.i95 = getelementptr i8, ptr %.fca.0.extract9, i64 8
  %tbl_size_ptr.i.i96 = getelementptr i8, ptr %.fca.0.extract9, i64 16
  %offset_tbl_ptr.i.i97 = getelementptr i8, ptr %.fca.0.extract9, i64 40
  %hash_coef.i.i98 = load i64, ptr %hash_coef_ptr.i.i95, align 4
  %tbl_size.i.i99 = load i64, ptr %tbl_size_ptr.i.i96, align 4
  %offset_tbl.i.i100 = load ptr, ptr %offset_tbl_ptr.i.i97, align 8
  %product.i.i.i101 = mul i64 %hash_coef.i.i98, 5693646204635713916
  %shifted.i.i.i102 = lshr i64 %product.i.i.i101, 32
  %xored.i.i.i103 = xor i64 %shifted.i.i.i102, %product.i.i.i101
  %hash.i.i.i104 = and i64 %xored.i.i.i103, %tbl_size.i.i99
  %offset_ptr.i.i105 = getelementptr i32, ptr %offset_tbl.i.i100, i64 %hash.i.i.i104
  %offset.i.i106 = load i32, ptr %offset_ptr.i.i105, align 4
  %eq.i109 = icmp eq i32 %.fca.3.extract15, %offset.i.i106
  call void @llvm.assume(i1 %eq.i109) #30
  %57 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract9, 0
  %58 = insertvalue { ptr, ptr, ptr, i32 } %57, ptr %.fca.1.extract11, 1
  %59 = insertvalue { ptr, ptr, ptr, i32 } %58, ptr %.fca.2.extract13, 2
  %60 = insertvalue { ptr, ptr, ptr, i32 } %59, i32 %.fca.3.extract15, 3
  %61 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract41)
  %62 = load ptr, ptr %7, align 8
  %63 = call ptr %62(ptr %.fca.1.extract43)
  %64 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract41)
  %65 = load ptr, ptr %20, align 8
  %66 = call ptr %65(ptr %.fca.1.extract43)
  %67 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %68 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract9)
  %69 = sext i32 %.fca.3.extract15 to i64
  %70 = getelementptr ptr, ptr %.fca.0.extract9, i64 %69
  %71 = getelementptr i8, ptr %70, i64 8
  %72 = load ptr, ptr %71, align 8
  %73 = call ptr %72({ ptr, ptr, ptr, i32 } %60, ptr nonnull %4)
  %74 = call { ptr, ptr, ptr, i32 } %73({ ptr, ptr, ptr, i32 } %60, { ptr, ptr, ptr, i32 } %60, ptr nonnull %4)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %74, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %74, 1
  %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %74, 2
  %hash_coef_ptr.i.i111 = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i112 = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i113 = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %75 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract41)
  %76 = load ptr, ptr %32, align 8
  %77 = load ptr, ptr %76, align 8
  %78 = call { ptr, ptr, ptr, i32 } %77(ptr %.fca.1.extract43)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %78, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %78, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %78, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %78, 3
  %hash_coef_ptr.i.i125 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i126 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i127 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i128 = load i64, ptr %hash_coef_ptr.i.i125, align 4
  %tbl_size.i.i129 = load i64, ptr %tbl_size_ptr.i.i126, align 4
  %offset_tbl.i.i130 = load ptr, ptr %offset_tbl_ptr.i.i127, align 8
  %product.i.i.i131 = mul i64 %hash_coef.i.i128, 5693646204635713916
  %shifted.i.i.i132 = lshr i64 %product.i.i.i131, 32
  %xored.i.i.i133 = xor i64 %shifted.i.i.i132, %product.i.i.i131
  %hash.i.i.i134 = and i64 %xored.i.i.i133, %tbl_size.i.i129
  %offset_ptr.i.i135 = getelementptr i32, ptr %offset_tbl.i.i130, i64 %hash.i.i.i134
  %offset.i.i136 = load i32, ptr %offset_ptr.i.i135, align 4
  %eq.i139 = icmp eq i32 %.fca.3.extract, %offset.i.i136
  call void @llvm.assume(i1 %eq.i139) #30
  %hash_coef.i.i144 = load i64, ptr %hash_coef_ptr.i.i111, align 4
  %tbl_size.i.i145 = load i64, ptr %tbl_size_ptr.i.i112, align 4
  %offset_tbl.i.i146 = load ptr, ptr %offset_tbl_ptr.i.i113, align 8
  %product.i.i.i147 = mul i64 %hash_coef.i.i144, 4189192806087951739
  %shifted.i.i.i148 = lshr i64 %product.i.i.i147, 32
  %xored.i.i.i149 = xor i64 %shifted.i.i.i148, %product.i.i.i147
  %hash.i.i.i150 = and i64 %xored.i.i.i149, %tbl_size.i.i145
  %offset_ptr.i.i151 = getelementptr i32, ptr %offset_tbl.i.i146, i64 %hash.i.i.i150
  %offset.i.i152 = load i32, ptr %offset_ptr.i.i151, align 4
  %79 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %80 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %.fca.1.extract3, 1
  %81 = insertvalue { ptr, ptr, ptr, i32 } %80, ptr %.fca.2.extract5, 2
  %82 = insertvalue { ptr, ptr, ptr, i32 } %81, i32 %offset.i.i152, 3
  %83 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %84 = insertvalue { ptr, ptr, ptr, i32 } %83, ptr %.fca.1.extract, 1
  %85 = insertvalue { ptr, ptr, ptr, i32 } %84, ptr %.fca.2.extract, 2
  %86 = insertvalue { ptr, ptr, ptr, i32 } %85, i32 %.fca.3.extract, 3
  %87 = load ptr, ptr %49, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %87, 0
  %89 = load ptr, ptr %50, align 8
  %90 = insertvalue { ptr, ptr, ptr, i32 } %88, ptr %89, 1
  %91 = getelementptr inbounds i8, ptr %49, i64 16
  %92 = load ptr, ptr %91, align 8
  %93 = insertvalue { ptr, ptr, ptr, i32 } %90, ptr %92, 2
  %94 = load i32, ptr %51, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %93, i32 %94, 3
  %96 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract41)
  %97 = load ptr, ptr %7, align 8
  %98 = call ptr %97(ptr %.fca.1.extract43)
  %99 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract41)
  %100 = load ptr, ptr %20, align 8
  %101 = call ptr %100(ptr %.fca.1.extract43)
  %result.i168 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  %102 = getelementptr i8, ptr %result.i168, i64 8
  store ptr %98, ptr %102, align 8
  %103 = getelementptr i8, ptr %result.i168, i64 16
  store ptr null, ptr %103, align 8
  %104 = call ptr @llvm.invariant.start.p0(i64 16, ptr %result.i168)
  store ptr @Iterator2, ptr %result.i168, align 8
  %result.i169 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  %105 = getelementptr i8, ptr %result.i169, i64 8
  store ptr %101, ptr %105, align 8
  %106 = getelementptr i8, ptr %result.i169, i64 16
  store ptr null, ptr %106, align 8
  %107 = call ptr @llvm.invariant.start.p0(i64 16, ptr %result.i169)
  store ptr @Iterable2, ptr %result.i169, align 8
  %108 = alloca [2 x ptr], align 8
  store ptr %result.i168, ptr %108, align 8
  %109 = getelementptr inbounds i8, ptr %108, i64 8
  store ptr %result.i169, ptr %109, align 8
  %110 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %108)
  %111 = call ptr @llvm.invariant.start.p0(i64 112, ptr %87)
  %112 = sext i32 %94 to i64
  %113 = getelementptr ptr, ptr %87, i64 %112
  %114 = getelementptr i8, ptr %113, i64 56
  %115 = load ptr, ptr %114, align 8
  %116 = alloca { ptr, ptr }, align 8
  store ptr %.fca.0.extract1, ptr %116, align 8
  %117 = getelementptr inbounds i8, ptr %116, i64 8
  store ptr %.fca.0.extract, ptr %117, align 8
  %118 = call ptr %115({ ptr, ptr, ptr, i32 } %95, ptr nonnull %116)
  call void %118({ ptr, ptr, ptr, i32 } %95, { ptr, ptr, ptr, i32 } %95, ptr nonnull %108, { ptr, ptr, ptr, i32 } %82, { ptr, ptr, ptr, i32 } %86)
  %119 = load ptr, ptr %49, align 8
  %120 = load ptr, ptr %50, align 8
  %121 = load ptr, ptr %91, align 8
  %hash_coef_ptr.i.i171 = getelementptr i8, ptr %119, i64 8
  %tbl_size_ptr.i.i172 = getelementptr i8, ptr %119, i64 16
  %offset_tbl_ptr.i.i173 = getelementptr i8, ptr %119, i64 40
  %hash_coef.i.i174 = load i64, ptr %hash_coef_ptr.i.i171, align 4
  %tbl_size.i.i175 = load i64, ptr %tbl_size_ptr.i.i172, align 4
  %offset_tbl.i.i176 = load ptr, ptr %offset_tbl_ptr.i.i173, align 8
  %product.i.i.i177 = mul i64 %hash_coef.i.i174, 4189192806087951739
  %shifted.i.i.i178 = lshr i64 %product.i.i.i177, 32
  %xored.i.i.i179 = xor i64 %shifted.i.i.i178, %product.i.i.i177
  %hash.i.i.i180 = and i64 %xored.i.i.i179, %tbl_size.i.i175
  %offset_ptr.i.i181 = getelementptr i32, ptr %offset_tbl.i.i176, i64 %hash.i.i.i180
  %offset.i.i182 = load i32, ptr %offset_ptr.i.i181, align 4
  %122 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %119, 0
  %123 = insertvalue { ptr, ptr, ptr, i32 } %122, ptr %120, 1
  %124 = insertvalue { ptr, ptr, ptr, i32 } %123, ptr %121, 2
  %125 = insertvalue { ptr, ptr, ptr, i32 } %124, i32 %offset.i.i182, 3
  ret { ptr, ptr, ptr, i32 } %125
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_ProductIterator2(ptr nocapture readnone %0) #0 {
  ret { i64, i64 } { i64 152, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ProductIterator2_field_ProductIterator2_0(ptr nocapture readonly %0) #3 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ProductIterator2_field_ProductIterator2_1(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ProductIterator2_field_ProductIterator2_2(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ProductIterator2_B_init_first_iteratorIterator2T_second_iterableIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 144
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ProductIterator2_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 152
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @ProductIterator2_init_first_iteratorIterator2T_second_iterableIterable2U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca [0 x ptr], align 8
  %.fca.0.extract35 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract37 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract35, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract35, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract35, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 4440657219728359865
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract27 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract29 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract31 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %hash_coef_ptr.i.i44 = getelementptr i8, ptr %.fca.0.extract27, i64 8
  %tbl_size_ptr.i.i45 = getelementptr i8, ptr %.fca.0.extract27, i64 16
  %offset_tbl_ptr.i.i46 = getelementptr i8, ptr %.fca.0.extract27, i64 40
  %hash_coef.i.i47 = load i64, ptr %hash_coef_ptr.i.i44, align 4
  %tbl_size.i.i48 = load i64, ptr %tbl_size_ptr.i.i45, align 4
  %offset_tbl.i.i49 = load ptr, ptr %offset_tbl_ptr.i.i46, align 8
  %product.i.i.i50 = mul i64 %hash_coef.i.i47, 4189192806087951739
  %shifted.i.i.i51 = lshr i64 %product.i.i.i50, 32
  %xored.i.i.i52 = xor i64 %shifted.i.i.i51, %product.i.i.i50
  %hash.i.i.i53 = and i64 %xored.i.i.i52, %tbl_size.i.i48
  %offset_ptr.i.i54 = getelementptr i32, ptr %offset_tbl.i.i49, i64 %hash.i.i.i53
  %offset.i.i69 = load i32, ptr %offset_ptr.i.i54, align 4
  %7 = tail call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract35)
  %8 = sext i32 %offset.i.i to i64
  %9 = getelementptr ptr, ptr %.fca.0.extract35, i64 %8
  %10 = getelementptr i8, ptr %9, i64 24
  %11 = load ptr, ptr %10, align 8
  %12 = getelementptr i8, ptr %11, i64 8
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract27, 0
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, ptr %.fca.1.extract29, 1
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, ptr %.fca.2.extract31, 2
  %17 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %offset.i.i69, 3
  tail call void %13(ptr %.fca.1.extract37, { ptr, ptr, ptr, i32 } %17)
  %.fca.0.extract19 = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %.fca.1.extract21 = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %.fca.2.extract23 = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %hash_coef_ptr.i.i72 = getelementptr i8, ptr %.fca.0.extract19, i64 8
  %tbl_size_ptr.i.i73 = getelementptr i8, ptr %.fca.0.extract19, i64 16
  %offset_tbl_ptr.i.i74 = getelementptr i8, ptr %.fca.0.extract19, i64 40
  %hash_coef.i.i75 = load i64, ptr %hash_coef_ptr.i.i72, align 4
  %tbl_size.i.i76 = load i64, ptr %tbl_size_ptr.i.i73, align 4
  %offset_tbl.i.i77 = load ptr, ptr %offset_tbl_ptr.i.i74, align 8
  %product.i.i.i78 = mul i64 %hash_coef.i.i75, 5693646204635713916
  %shifted.i.i.i79 = lshr i64 %product.i.i.i78, 32
  %xored.i.i.i80 = xor i64 %shifted.i.i.i79, %product.i.i.i78
  %hash.i.i.i81 = and i64 %xored.i.i.i80, %tbl_size.i.i76
  %offset_ptr.i.i82 = getelementptr i32, ptr %offset_tbl.i.i77, i64 %hash.i.i.i81
  %offset.i.i97 = load i32, ptr %offset_ptr.i.i82, align 4
  %18 = tail call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract35)
  %19 = getelementptr i8, ptr %9, i64 40
  %20 = load ptr, ptr %19, align 8
  %21 = getelementptr i8, ptr %20, i64 8
  %22 = load ptr, ptr %21, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract19, 0
  %24 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %.fca.1.extract21, 1
  %25 = insertvalue { ptr, ptr, ptr, i32 } %24, ptr %.fca.2.extract23, 2
  %26 = insertvalue { ptr, ptr, ptr, i32 } %25, i32 %offset.i.i97, 3
  tail call void %22(ptr %.fca.1.extract37, { ptr, ptr, ptr, i32 } %26)
  %27 = tail call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract35)
  %28 = load ptr, ptr %19, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = tail call { ptr, ptr, ptr, i32 } %29(ptr %.fca.1.extract37)
  %.fca.0.extract11 = extractvalue { ptr, ptr, ptr, i32 } %30, 0
  %.fca.1.extract13 = extractvalue { ptr, ptr, ptr, i32 } %30, 1
  %.fca.2.extract15 = extractvalue { ptr, ptr, ptr, i32 } %30, 2
  %.fca.3.extract17 = extractvalue { ptr, ptr, ptr, i32 } %30, 3
  %hash_coef_ptr.i.i100 = getelementptr i8, ptr %.fca.0.extract11, i64 8
  %tbl_size_ptr.i.i101 = getelementptr i8, ptr %.fca.0.extract11, i64 16
  %offset_tbl_ptr.i.i102 = getelementptr i8, ptr %.fca.0.extract11, i64 40
  %hash_coef.i.i103 = load i64, ptr %hash_coef_ptr.i.i100, align 4
  %tbl_size.i.i104 = load i64, ptr %tbl_size_ptr.i.i101, align 4
  %offset_tbl.i.i105 = load ptr, ptr %offset_tbl_ptr.i.i102, align 8
  %product.i.i.i106 = mul i64 %hash_coef.i.i103, 5693646204635713916
  %shifted.i.i.i107 = lshr i64 %product.i.i.i106, 32
  %xored.i.i.i108 = xor i64 %shifted.i.i.i107, %product.i.i.i106
  %hash.i.i.i109 = and i64 %xored.i.i.i108, %tbl_size.i.i104
  %offset_ptr.i.i110 = getelementptr i32, ptr %offset_tbl.i.i105, i64 %hash.i.i.i109
  %offset.i.i111 = load i32, ptr %offset_ptr.i.i110, align 4
  %eq.i = icmp eq i32 %.fca.3.extract17, %offset.i.i111
  tail call void @llvm.assume(i1 %eq.i) #30
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11, 0
  %32 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %.fca.1.extract13, 1
  %33 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %.fca.2.extract15, 2
  %34 = insertvalue { ptr, ptr, ptr, i32 } %33, i32 %.fca.3.extract17, 3
  %35 = tail call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract35)
  %36 = load ptr, ptr %9, align 8
  %37 = tail call ptr %36(ptr %.fca.1.extract37)
  %38 = tail call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract35)
  %39 = getelementptr i8, ptr %9, i64 8
  %40 = load ptr, ptr %39, align 8
  %41 = tail call ptr %40(ptr %.fca.1.extract37)
  %42 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %6)
  %43 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract11)
  %44 = sext i32 %.fca.3.extract17 to i64
  %45 = getelementptr ptr, ptr %.fca.0.extract11, i64 %44
  %46 = getelementptr i8, ptr %45, i64 8
  %47 = load ptr, ptr %46, align 8
  %48 = call ptr %47({ ptr, ptr, ptr, i32 } %34, ptr nonnull %6)
  %49 = call { ptr, ptr, ptr, i32 } %48({ ptr, ptr, ptr, i32 } %34, { ptr, ptr, ptr, i32 } %34, ptr nonnull %6)
  %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %49, 0
  %.fca.1.extract5 = extractvalue { ptr, ptr, ptr, i32 } %49, 1
  %.fca.2.extract7 = extractvalue { ptr, ptr, ptr, i32 } %49, 2
  %hash_coef_ptr.i.i114 = getelementptr i8, ptr %.fca.0.extract3, i64 8
  %tbl_size_ptr.i.i115 = getelementptr i8, ptr %.fca.0.extract3, i64 16
  %offset_tbl_ptr.i.i116 = getelementptr i8, ptr %.fca.0.extract3, i64 40
  %hash_coef.i.i117 = load i64, ptr %hash_coef_ptr.i.i114, align 4
  %tbl_size.i.i118 = load i64, ptr %tbl_size_ptr.i.i115, align 4
  %offset_tbl.i.i119 = load ptr, ptr %offset_tbl_ptr.i.i116, align 8
  %product.i.i.i120 = mul i64 %hash_coef.i.i117, 4189192806087951739
  %shifted.i.i.i121 = lshr i64 %product.i.i.i120, 32
  %xored.i.i.i122 = xor i64 %shifted.i.i.i121, %product.i.i.i120
  %hash.i.i.i123 = and i64 %xored.i.i.i122, %tbl_size.i.i118
  %offset_ptr.i.i124 = getelementptr i32, ptr %offset_tbl.i.i119, i64 %hash.i.i.i123
  %offset.i.i139 = load i32, ptr %offset_ptr.i.i124, align 4
  %50 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract35)
  %51 = getelementptr i8, ptr %9, i64 32
  %52 = load ptr, ptr %51, align 8
  %53 = getelementptr i8, ptr %52, i64 8
  %54 = load ptr, ptr %53, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract3, 0
  %56 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %.fca.1.extract5, 1
  %57 = insertvalue { ptr, ptr, ptr, i32 } %56, ptr %.fca.2.extract7, 2
  %58 = insertvalue { ptr, ptr, ptr, i32 } %57, i32 %offset.i.i139, 3
  call void %54(ptr %.fca.1.extract37, { ptr, ptr, ptr, i32 } %58)
  %59 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract35)
  %60 = load ptr, ptr %10, align 8
  %61 = load ptr, ptr %60, align 8
  %62 = call { ptr, ptr, ptr, i32 } %61(ptr %.fca.1.extract37)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %62, 0
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %62, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %62, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %62, 3
  %hash_coef_ptr.i.i142 = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i143 = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i144 = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i145 = load i64, ptr %hash_coef_ptr.i.i142, align 4
  %tbl_size.i.i146 = load i64, ptr %tbl_size_ptr.i.i143, align 4
  %offset_tbl.i.i147 = load ptr, ptr %offset_tbl_ptr.i.i144, align 8
  %product.i.i.i148 = mul i64 %hash_coef.i.i145, 4189192806087951739
  %shifted.i.i.i149 = lshr i64 %product.i.i.i148, 32
  %xored.i.i.i150 = xor i64 %shifted.i.i.i149, %product.i.i.i148
  %hash.i.i.i151 = and i64 %xored.i.i.i150, %tbl_size.i.i146
  %offset_ptr.i.i152 = getelementptr i32, ptr %offset_tbl.i.i147, i64 %hash.i.i.i151
  %offset.i.i153 = load i32, ptr %offset_ptr.i.i152, align 4
  %eq.i156 = icmp eq i32 %.fca.3.extract, %offset.i.i153
  call void @llvm.assume(i1 %eq.i156) #30
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %64 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %.fca.1.extract2, 1
  %65 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %.fca.2.extract, 2
  %66 = insertvalue { ptr, ptr, ptr, i32 } %65, i32 %.fca.3.extract, 3
  %67 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract35)
  %68 = load ptr, ptr %9, align 8
  %69 = call ptr %68(ptr %.fca.1.extract37)
  %70 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract35)
  %71 = load ptr, ptr %39, align 8
  %72 = call ptr %71(ptr %.fca.1.extract37)
  %73 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %6)
  %74 = call ptr @llvm.invariant.start.p0(i64 24, ptr %.fca.0.extract1)
  %75 = sext i32 %.fca.3.extract to i64
  %76 = getelementptr ptr, ptr %.fca.0.extract1, i64 %75
  %77 = getelementptr i8, ptr %76, i64 8
  %78 = load ptr, ptr %77, align 8
  %79 = call ptr %78({ ptr, ptr, ptr, i32 } %66, ptr nonnull %6)
  %80 = call { ptr, i160 } %79({ ptr, ptr, ptr, i32 } %66, { ptr, ptr, ptr, i32 } %66, ptr nonnull %6)
  %81 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract35)
  %82 = getelementptr i8, ptr %9, i64 48
  %83 = load ptr, ptr %82, align 8
  %84 = getelementptr i8, ptr %83, i64 8
  %85 = load ptr, ptr %84, align 8
  call void %85(ptr %.fca.1.extract37, { ptr, i160 } %80)
  ret void
}

define { ptr, i160 } @ProductIterator2_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract10, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract10, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract10, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 4440657219728359865
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %6 = tail call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract10)
  %7 = sext i32 %offset.i.i to i64
  %8 = getelementptr ptr, ptr %.fca.0.extract10, i64 %7
  %9 = getelementptr i8, ptr %8, i64 48
  %10 = load ptr, ptr %9, align 8
  %11 = load ptr, ptr %10, align 8
  %12 = tail call { ptr, i160 } %11(ptr %.fca.1.extract12)
  %.sroa.0.0233 = extractvalue { ptr, i160 } %12, 0
  %13 = icmp ne ptr %.sroa.0.0233, @nil_typ
  %14 = icmp ne ptr %.sroa.0.0233, null
  %.not73234 = and i1 %13, %14
  br i1 %.not73234, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %3
  %15 = tail call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract10)
  %16 = getelementptr i8, ptr %8, i64 32
  %17 = getelementptr i8, ptr %8, i64 8
  %18 = getelementptr i8, ptr %8, i64 24
  %19 = getelementptr i8, ptr %8, i64 40
  br label %20

20:                                               ; preds = %.lr.ph, %46
  %.pn235 = phi { ptr, i160 } [ %12, %.lr.ph ], [ %105, %46 ]
  %21 = load ptr, ptr %16, align 8
  %22 = load ptr, ptr %21, align 8
  %23 = call { ptr, ptr, ptr, i32 } %22(ptr %.fca.1.extract12)
  %.fca.0.extract60 = extractvalue { ptr, ptr, ptr, i32 } %23, 0
  %.fca.1.extract62 = extractvalue { ptr, ptr, ptr, i32 } %23, 1
  %.fca.2.extract64 = extractvalue { ptr, ptr, ptr, i32 } %23, 2
  %.fca.3.extract66 = extractvalue { ptr, ptr, ptr, i32 } %23, 3
  %hash_coef_ptr.i.i75 = getelementptr i8, ptr %.fca.0.extract60, i64 8
  %tbl_size_ptr.i.i76 = getelementptr i8, ptr %.fca.0.extract60, i64 16
  %offset_tbl_ptr.i.i77 = getelementptr i8, ptr %.fca.0.extract60, i64 40
  %hash_coef.i.i78 = load i64, ptr %hash_coef_ptr.i.i75, align 4
  %tbl_size.i.i79 = load i64, ptr %tbl_size_ptr.i.i76, align 4
  %offset_tbl.i.i80 = load ptr, ptr %offset_tbl_ptr.i.i77, align 8
  %product.i.i.i81 = mul i64 %hash_coef.i.i78, 4189192806087951739
  %shifted.i.i.i82 = lshr i64 %product.i.i.i81, 32
  %xored.i.i.i83 = xor i64 %shifted.i.i.i82, %product.i.i.i81
  %hash.i.i.i84 = and i64 %xored.i.i.i83, %tbl_size.i.i79
  %offset_ptr.i.i85 = getelementptr i32, ptr %offset_tbl.i.i80, i64 %hash.i.i.i84
  %offset.i.i86 = load i32, ptr %offset_ptr.i.i85, align 4
  %eq.i = icmp eq i32 %.fca.3.extract66, %offset.i.i86
  call void @llvm.assume(i1 %eq.i) #30
  %24 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract60, 0
  %25 = insertvalue { ptr, ptr, ptr, i32 } %24, ptr %.fca.1.extract62, 1
  %26 = insertvalue { ptr, ptr, ptr, i32 } %25, ptr %.fca.2.extract64, 2
  %27 = insertvalue { ptr, ptr, ptr, i32 } %26, i32 %.fca.3.extract66, 3
  %28 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract10)
  %29 = load ptr, ptr %8, align 8
  %30 = call ptr %29(ptr %.fca.1.extract12)
  %31 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract10)
  %32 = load ptr, ptr %17, align 8
  %33 = call ptr %32(ptr %.fca.1.extract12)
  %34 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %35 = call ptr @llvm.invariant.start.p0(i64 24, ptr %.fca.0.extract60)
  %36 = sext i32 %.fca.3.extract66 to i64
  %37 = getelementptr ptr, ptr %.fca.0.extract60, i64 %36
  %38 = getelementptr i8, ptr %37, i64 8
  %39 = load ptr, ptr %38, align 8
  %40 = call ptr %39({ ptr, ptr, ptr, i32 } %27, ptr nonnull %4)
  %41 = call { ptr, i160 } %40({ ptr, ptr, ptr, i32 } %27, { ptr, ptr, ptr, i32 } %27, ptr nonnull %4)
  %.fca.0.extract54 = extractvalue { ptr, i160 } %41, 0
  %42 = icmp eq ptr %.fca.0.extract54, @nil_typ
  %43 = icmp eq ptr %.fca.0.extract54, null
  %44 = or i1 %42, %43
  %45 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract10)
  br i1 %44, label %46, label %108

46:                                               ; preds = %20
  %47 = load ptr, ptr %18, align 8
  %48 = load ptr, ptr %47, align 8
  %49 = call { ptr, ptr, ptr, i32 } %48(ptr %.fca.1.extract12)
  %.fca.0.extract40 = extractvalue { ptr, ptr, ptr, i32 } %49, 0
  %.fca.1.extract42 = extractvalue { ptr, ptr, ptr, i32 } %49, 1
  %.fca.2.extract44 = extractvalue { ptr, ptr, ptr, i32 } %49, 2
  %.fca.3.extract46 = extractvalue { ptr, ptr, ptr, i32 } %49, 3
  %hash_coef_ptr.i.i89 = getelementptr i8, ptr %.fca.0.extract40, i64 8
  %tbl_size_ptr.i.i90 = getelementptr i8, ptr %.fca.0.extract40, i64 16
  %offset_tbl_ptr.i.i91 = getelementptr i8, ptr %.fca.0.extract40, i64 40
  %hash_coef.i.i92 = load i64, ptr %hash_coef_ptr.i.i89, align 4
  %tbl_size.i.i93 = load i64, ptr %tbl_size_ptr.i.i90, align 4
  %offset_tbl.i.i94 = load ptr, ptr %offset_tbl_ptr.i.i91, align 8
  %product.i.i.i95 = mul i64 %hash_coef.i.i92, 4189192806087951739
  %shifted.i.i.i96 = lshr i64 %product.i.i.i95, 32
  %xored.i.i.i97 = xor i64 %shifted.i.i.i96, %product.i.i.i95
  %hash.i.i.i98 = and i64 %xored.i.i.i97, %tbl_size.i.i93
  %offset_ptr.i.i99 = getelementptr i32, ptr %offset_tbl.i.i94, i64 %hash.i.i.i98
  %offset.i.i100 = load i32, ptr %offset_ptr.i.i99, align 4
  %eq.i103 = icmp eq i32 %.fca.3.extract46, %offset.i.i100
  call void @llvm.assume(i1 %eq.i103) #30
  %50 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract40, 0
  %51 = insertvalue { ptr, ptr, ptr, i32 } %50, ptr %.fca.1.extract42, 1
  %52 = insertvalue { ptr, ptr, ptr, i32 } %51, ptr %.fca.2.extract44, 2
  %53 = insertvalue { ptr, ptr, ptr, i32 } %52, i32 %.fca.3.extract46, 3
  %54 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract10)
  %55 = load ptr, ptr %8, align 8
  %56 = call ptr %55(ptr %.fca.1.extract12)
  %57 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract10)
  %58 = load ptr, ptr %17, align 8
  %59 = call ptr %58(ptr %.fca.1.extract12)
  %60 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %61 = call ptr @llvm.invariant.start.p0(i64 24, ptr %.fca.0.extract40)
  %62 = sext i32 %.fca.3.extract46 to i64
  %63 = getelementptr ptr, ptr %.fca.0.extract40, i64 %62
  %64 = getelementptr i8, ptr %63, i64 8
  %65 = load ptr, ptr %64, align 8
  %66 = call ptr %65({ ptr, ptr, ptr, i32 } %53, ptr nonnull %4)
  %67 = call { ptr, i160 } %66({ ptr, ptr, ptr, i32 } %53, { ptr, ptr, ptr, i32 } %53, ptr nonnull %4)
  %68 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract10)
  %69 = load ptr, ptr %9, align 8
  %70 = getelementptr i8, ptr %69, i64 8
  %71 = load ptr, ptr %70, align 8
  call void %71(ptr %.fca.1.extract12, { ptr, i160 } %67)
  %72 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract10)
  %73 = load ptr, ptr %19, align 8
  %74 = load ptr, ptr %73, align 8
  %75 = call { ptr, ptr, ptr, i32 } %74(ptr %.fca.1.extract12)
  %.fca.0.extract26 = extractvalue { ptr, ptr, ptr, i32 } %75, 0
  %.fca.1.extract28 = extractvalue { ptr, ptr, ptr, i32 } %75, 1
  %.fca.2.extract30 = extractvalue { ptr, ptr, ptr, i32 } %75, 2
  %.fca.3.extract32 = extractvalue { ptr, ptr, ptr, i32 } %75, 3
  %hash_coef_ptr.i.i105 = getelementptr i8, ptr %.fca.0.extract26, i64 8
  %tbl_size_ptr.i.i106 = getelementptr i8, ptr %.fca.0.extract26, i64 16
  %offset_tbl_ptr.i.i107 = getelementptr i8, ptr %.fca.0.extract26, i64 40
  %hash_coef.i.i108 = load i64, ptr %hash_coef_ptr.i.i105, align 4
  %tbl_size.i.i109 = load i64, ptr %tbl_size_ptr.i.i106, align 4
  %offset_tbl.i.i110 = load ptr, ptr %offset_tbl_ptr.i.i107, align 8
  %product.i.i.i111 = mul i64 %hash_coef.i.i108, 5693646204635713916
  %shifted.i.i.i112 = lshr i64 %product.i.i.i111, 32
  %xored.i.i.i113 = xor i64 %shifted.i.i.i112, %product.i.i.i111
  %hash.i.i.i114 = and i64 %xored.i.i.i113, %tbl_size.i.i109
  %offset_ptr.i.i115 = getelementptr i32, ptr %offset_tbl.i.i110, i64 %hash.i.i.i114
  %offset.i.i116 = load i32, ptr %offset_ptr.i.i115, align 4
  %eq.i119 = icmp eq i32 %.fca.3.extract32, %offset.i.i116
  call void @llvm.assume(i1 %eq.i119) #30
  %76 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract26, 0
  %77 = insertvalue { ptr, ptr, ptr, i32 } %76, ptr %.fca.1.extract28, 1
  %78 = insertvalue { ptr, ptr, ptr, i32 } %77, ptr %.fca.2.extract30, 2
  %79 = insertvalue { ptr, ptr, ptr, i32 } %78, i32 %.fca.3.extract32, 3
  %80 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract10)
  %81 = load ptr, ptr %8, align 8
  %82 = call ptr %81(ptr %.fca.1.extract12)
  %83 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract10)
  %84 = load ptr, ptr %17, align 8
  %85 = call ptr %84(ptr %.fca.1.extract12)
  %86 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %87 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract26)
  %88 = sext i32 %.fca.3.extract32 to i64
  %89 = getelementptr ptr, ptr %.fca.0.extract26, i64 %88
  %90 = getelementptr i8, ptr %89, i64 8
  %91 = load ptr, ptr %90, align 8
  %92 = call ptr %91({ ptr, ptr, ptr, i32 } %79, ptr nonnull %4)
  %93 = call { ptr, ptr, ptr, i32 } %92({ ptr, ptr, ptr, i32 } %79, { ptr, ptr, ptr, i32 } %79, ptr nonnull %4)
  %.fca.0.extract18 = extractvalue { ptr, ptr, ptr, i32 } %93, 0
  %.fca.1.extract20 = extractvalue { ptr, ptr, ptr, i32 } %93, 1
  %.fca.2.extract22 = extractvalue { ptr, ptr, ptr, i32 } %93, 2
  %hash_coef_ptr.i.i121 = getelementptr i8, ptr %.fca.0.extract18, i64 8
  %tbl_size_ptr.i.i122 = getelementptr i8, ptr %.fca.0.extract18, i64 16
  %offset_tbl_ptr.i.i123 = getelementptr i8, ptr %.fca.0.extract18, i64 40
  %hash_coef.i.i124 = load i64, ptr %hash_coef_ptr.i.i121, align 4
  %tbl_size.i.i125 = load i64, ptr %tbl_size_ptr.i.i122, align 4
  %offset_tbl.i.i126 = load ptr, ptr %offset_tbl_ptr.i.i123, align 8
  %product.i.i.i127 = mul i64 %hash_coef.i.i124, 4189192806087951739
  %shifted.i.i.i128 = lshr i64 %product.i.i.i127, 32
  %xored.i.i.i129 = xor i64 %shifted.i.i.i128, %product.i.i.i127
  %hash.i.i.i130 = and i64 %xored.i.i.i129, %tbl_size.i.i125
  %offset_ptr.i.i131 = getelementptr i32, ptr %offset_tbl.i.i126, i64 %hash.i.i.i130
  %offset.i.i146 = load i32, ptr %offset_ptr.i.i131, align 4
  %94 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract10)
  %95 = load ptr, ptr %16, align 8
  %96 = getelementptr i8, ptr %95, i64 8
  %97 = load ptr, ptr %96, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract18, 0
  %99 = insertvalue { ptr, ptr, ptr, i32 } %98, ptr %.fca.1.extract20, 1
  %100 = insertvalue { ptr, ptr, ptr, i32 } %99, ptr %.fca.2.extract22, 2
  %101 = insertvalue { ptr, ptr, ptr, i32 } %100, i32 %offset.i.i146, 3
  call void %97(ptr %.fca.1.extract12, { ptr, ptr, ptr, i32 } %101)
  %102 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract10)
  %103 = load ptr, ptr %9, align 8
  %104 = load ptr, ptr %103, align 8
  %105 = call { ptr, i160 } %104(ptr %.fca.1.extract12)
  %.sroa.0.0 = extractvalue { ptr, i160 } %105, 0
  %106 = icmp ne ptr %.sroa.0.0, @nil_typ
  %107 = icmp ne ptr %.sroa.0.0, null
  %.not73 = and i1 %106, %107
  br i1 %.not73, label %20, label %.loopexit

108:                                              ; preds = %20
  %109 = load ptr, ptr %8, align 8
  %110 = call ptr %109(ptr %.fca.1.extract12)
  %111 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract10)
  %112 = load ptr, ptr %17, align 8
  %113 = call ptr %112(ptr %.fca.1.extract12)
  %114 = load ptr, ptr %110, align 8
  %115 = getelementptr i8, ptr %114, i64 48
  %116 = load ptr, ptr %115, align 8
  %117 = call { i64, i64 } %116(ptr nonnull %110)
  %118 = extractvalue { i64, i64 } %117, 0
  %119 = extractvalue { i64, i64 } %117, 1
  %120 = urem i64 16, %119
  %121 = icmp eq i64 %120, 0
  %122 = sub i64 %119, %120
  %123 = select i1 %121, i64 0, i64 %122
  %124 = add i64 %118, 16
  %125 = add i64 %124, %123
  %126 = load ptr, ptr %113, align 8
  %127 = getelementptr i8, ptr %126, i64 48
  %128 = load ptr, ptr %127, align 8
  %129 = call { i64, i64 } %128(ptr nonnull %113)
  %130 = extractvalue { i64, i64 } %129, 0
  %131 = extractvalue { i64, i64 } %129, 1
  %132 = call i64 @llvm.umax.i64(i64 %119, i64 %131)
  %133 = call i64 @llvm.umax.i64(i64 %132, i64 8)
  %134 = urem i64 %125, %131
  %135 = icmp eq i64 %134, 0
  %136 = sub i64 %131, %134
  %137 = select i1 %135, i64 0, i64 %136
  %138 = add i64 %130, %125
  %139 = add i64 %138, %137
  %140 = urem i64 %139, %133
  %141 = icmp eq i64 %140, 0
  %142 = sub i64 %133, %140
  %143 = select i1 %141, i64 0, i64 %142
  %144 = add i64 %143, %139
  %result.i = call noalias ptr @bump_malloc_inner(i64 noundef %144, ptr nonnull @current_ptr) #29
  store ptr %110, ptr %result.i, align 8
  %145 = getelementptr i8, ptr %result.i, i64 8
  store ptr %113, ptr %145, align 8
  %146 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i)
  %147 = getelementptr inbounds i8, ptr %5, i64 8
  %148 = getelementptr inbounds i8, ptr %5, i64 24
  store ptr @Pair, ptr %5, align 8
  store ptr %result.i, ptr %147, align 8
  store i32 9, ptr %148, align 8
  %149 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %5)
  %150 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract10)
  %151 = load ptr, ptr %8, align 8
  %152 = call ptr %151(ptr %.fca.1.extract12)
  %153 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract10)
  %154 = load ptr, ptr %17, align 8
  %155 = call ptr %154(ptr %.fca.1.extract12)
  %156 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @Pair)
  %157 = load ptr, ptr %result.i, align 8
  %158 = load ptr, ptr %157, align 8
  %159 = getelementptr i8, ptr %158, i64 48
  %160 = load ptr, ptr %159, align 8
  %161 = call { i64, i64 } %160(ptr nonnull %157)
  %162 = extractvalue { i64, i64 } %161, 1
  %163 = urem i64 16, %162
  %164 = icmp eq i64 %163, 0
  %reass.sub = sub i64 %162, %163
  %165 = add i64 %reass.sub, 16
  %166 = select i1 %164, i64 16, i64 %165
  %167 = getelementptr i8, ptr %result.i, i64 %166
  %168 = load ptr, ptr %result.i, align 8
  %169 = load ptr, ptr %168, align 8
  %170 = getelementptr i8, ptr %169, i64 64
  %171 = load ptr, ptr %170, align 8
  call void %171({ ptr, i160 } %.pn235, ptr nonnull %168, ptr %167)
  %172 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @Pair)
  %173 = load ptr, ptr %result.i, align 8
  %174 = load ptr, ptr %173, align 8
  %175 = getelementptr i8, ptr %174, i64 48
  %176 = load ptr, ptr %175, align 8
  %177 = call { i64, i64 } %176(ptr nonnull %173)
  %178 = extractvalue { i64, i64 } %177, 0
  %179 = extractvalue { i64, i64 } %177, 1
  %180 = urem i64 16, %179
  %181 = icmp eq i64 %180, 0
  %182 = sub i64 %179, %180
  %183 = select i1 %181, i64 0, i64 %182
  %184 = add i64 %178, 16
  %185 = add i64 %184, %183
  %186 = load ptr, ptr %145, align 8
  %187 = load ptr, ptr %186, align 8
  %188 = getelementptr i8, ptr %187, i64 48
  %189 = load ptr, ptr %188, align 8
  %190 = call { i64, i64 } %189(ptr nonnull %186)
  %191 = extractvalue { i64, i64 } %190, 1
  %192 = urem i64 %185, %191
  %193 = icmp eq i64 %192, 0
  %194 = sub i64 %191, %192
  %195 = select i1 %193, i64 0, i64 %194
  %196 = getelementptr i8, ptr %result.i, i64 %185
  %197 = getelementptr i8, ptr %196, i64 %195
  %198 = load ptr, ptr %145, align 8
  %199 = load ptr, ptr %198, align 8
  %200 = getelementptr i8, ptr %199, i64 64
  %201 = load ptr, ptr %200, align 8
  call void %201({ ptr, i160 } %41, ptr nonnull %198, ptr %197)
  %202 = load ptr, ptr %5, align 8
  %203 = load i160, ptr %147, align 8
  br label %.loopexit

.loopexit:                                        ; preds = %46, %3, %108
  %.reg2mem14.sroa.3.0 = phi i160 [ %203, %108 ], [ undef, %3 ], [ undef, %46 ]
  %.reg2mem14.sroa.0.0 = phi ptr [ %202, %108 ], [ @nil_typ, %3 ], [ @nil_typ, %46 ]
  %.reload15.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %.reg2mem14.sroa.0.0, 0
  %.reload15.fca.1.insert = insertvalue { ptr, i160 } %.reload15.fca.0.insert, i160 %.reg2mem14.sroa.3.0, 1
  ret { ptr, i160 } %.reload15.fca.1.insert
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, i160 } @ProductIterator2_getter_current_first(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 120
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, i160 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 128
  %6 = load i160, ptr %5, align 4
  %7 = insertvalue { ptr, i160 } %4, i160 %6, 1
  ret { ptr, i160 } %7
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ProductIterator2_setter_current_first(ptr nocapture writeonly %0, { ptr, i160 } %1) #6 {
  %3 = getelementptr i8, ptr %0, i64 120
  %.fca.0.extract = extractvalue { ptr, i160 } %1, 0
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 128
  store i160 %.fca.1.extract, ptr %4, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ProductIterator2_getter_second_iterable(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 88
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 96
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 104
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 112
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ProductIterator2_setter_second_iterable(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #6 {
  %3 = getelementptr i8, ptr %0, i64 88
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 96
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 104
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 112
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ProductIterator2_getter_second_iterator(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 56
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 64
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 72
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 80
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ProductIterator2_setter_second_iterator(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #6 {
  %3 = getelementptr i8, ptr %0, i64 56
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 64
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 72
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 80
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ProductIterator2_getter_first_iterator(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 24
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 32
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 40
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 48
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ProductIterator2_setter_first_iterator(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #6 {
  %3 = getelementptr i8, ptr %0, i64 24
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 32
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 40
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 48
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ProductIterable2_getter_second(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 56
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 64
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 72
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 80
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ProductIterable2_setter_second(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #6 {
  %3 = getelementptr i8, ptr %0, i64 56
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 64
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 72
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 80
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ProductIterable2_getter_first(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 24
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 32
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 40
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 48
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ProductIterable2_setter_first(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #6 {
  %3 = getelementptr i8, ptr %0, i64 24
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 32
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 40
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 48
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_ZipIterable2(ptr nocapture readnone %0) #0 {
  ret { i64, i64 } { i64 88, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ZipIterable2_field_ZipIterable2_0(ptr nocapture readonly %0) #3 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ZipIterable2_field_ZipIterable2_1(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ZipIterable2_field_ZipIterable2_2(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ZipIterable2_B_init_firstIterable2T_secondIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 208
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ZipIterable2_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 216
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ZipIterable2_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 224
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ZipIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 232
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ZipIterable2_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 240
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ZipIterable2_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 248
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ZipIterable2_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 256
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ZipIterable2_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 264
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ZipIterable2_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 272
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ZipIterable2_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 280
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ZipIterable2_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 288
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ZipIterable2_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 296
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @ZipIterable2_init_firstIterable2T_secondIterable2U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -3218950579047519815
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %hash_coef_ptr.i.i18 = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i19 = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i20 = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i21 = load i64, ptr %hash_coef_ptr.i.i18, align 4
  %tbl_size.i.i22 = load i64, ptr %tbl_size_ptr.i.i19, align 4
  %offset_tbl.i.i23 = load ptr, ptr %offset_tbl_ptr.i.i20, align 8
  %product.i.i.i24 = mul i64 %hash_coef.i.i21, 5693646204635713916
  %shifted.i.i.i25 = lshr i64 %product.i.i.i24, 32
  %xored.i.i.i26 = xor i64 %shifted.i.i.i25, %product.i.i.i24
  %hash.i.i.i27 = and i64 %xored.i.i.i26, %tbl_size.i.i22
  %offset_ptr.i.i28 = getelementptr i32, ptr %offset_tbl.i.i23, i64 %hash.i.i.i27
  %offset.i.i43 = load i32, ptr %offset_ptr.i.i28, align 4
  %6 = tail call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract9)
  %7 = sext i32 %offset.i.i to i64
  %8 = getelementptr ptr, ptr %.fca.0.extract9, i64 %7
  %9 = getelementptr i8, ptr %8, i64 24
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr i8, ptr %10, i64 8
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.1.extract3, 1
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, ptr %.fca.2.extract5, 2
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, i32 %offset.i.i43, 3
  tail call void %12(ptr %.fca.1.extract11, { ptr, ptr, ptr, i32 } %16)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %hash_coef_ptr.i.i46 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i47 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i48 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i49 = load i64, ptr %hash_coef_ptr.i.i46, align 4
  %tbl_size.i.i50 = load i64, ptr %tbl_size_ptr.i.i47, align 4
  %offset_tbl.i.i51 = load ptr, ptr %offset_tbl_ptr.i.i48, align 8
  %product.i.i.i52 = mul i64 %hash_coef.i.i49, 5693646204635713916
  %shifted.i.i.i53 = lshr i64 %product.i.i.i52, 32
  %xored.i.i.i54 = xor i64 %shifted.i.i.i53, %product.i.i.i52
  %hash.i.i.i55 = and i64 %xored.i.i.i54, %tbl_size.i.i50
  %offset_ptr.i.i56 = getelementptr i32, ptr %offset_tbl.i.i51, i64 %hash.i.i.i55
  %offset.i.i71 = load i32, ptr %offset_ptr.i.i56, align 4
  %17 = tail call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract9)
  %18 = getelementptr i8, ptr %8, i64 32
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr i8, ptr %19, i64 8
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %23 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %.fca.1.extract, 1
  %24 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %.fca.2.extract, 2
  %25 = insertvalue { ptr, ptr, ptr, i32 } %24, i32 %offset.i.i71, 3
  tail call void %21(ptr %.fca.1.extract11, { ptr, ptr, ptr, i32 } %25)
  ret void
}

define { ptr, ptr, ptr, i32 } @ZipIterable2_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract57 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract59 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract57, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract57, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract57, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -3218950579047519815
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %5 = tail call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract57)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract57, i64 %6
  %8 = getelementptr i8, ptr %7, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = load ptr, ptr %9, align 8
  %11 = tail call { ptr, ptr, ptr, i32 } %10(ptr %.fca.1.extract59)
  %.fca.0.extract49 = extractvalue { ptr, ptr, ptr, i32 } %11, 0
  %.fca.1.extract51 = extractvalue { ptr, ptr, ptr, i32 } %11, 1
  %.fca.2.extract53 = extractvalue { ptr, ptr, ptr, i32 } %11, 2
  %.fca.3.extract55 = extractvalue { ptr, ptr, ptr, i32 } %11, 3
  %hash_coef_ptr.i.i66 = getelementptr i8, ptr %.fca.0.extract49, i64 8
  %tbl_size_ptr.i.i67 = getelementptr i8, ptr %.fca.0.extract49, i64 16
  %offset_tbl_ptr.i.i68 = getelementptr i8, ptr %.fca.0.extract49, i64 40
  %hash_coef.i.i69 = load i64, ptr %hash_coef_ptr.i.i66, align 4
  %tbl_size.i.i70 = load i64, ptr %tbl_size_ptr.i.i67, align 4
  %offset_tbl.i.i71 = load ptr, ptr %offset_tbl_ptr.i.i68, align 8
  %product.i.i.i72 = mul i64 %hash_coef.i.i69, 5693646204635713916
  %shifted.i.i.i73 = lshr i64 %product.i.i.i72, 32
  %xored.i.i.i74 = xor i64 %shifted.i.i.i73, %product.i.i.i72
  %hash.i.i.i75 = and i64 %xored.i.i.i74, %tbl_size.i.i70
  %offset_ptr.i.i76 = getelementptr i32, ptr %offset_tbl.i.i71, i64 %hash.i.i.i75
  %offset.i.i77 = load i32, ptr %offset_ptr.i.i76, align 4
  %eq.i = icmp eq i32 %.fca.3.extract55, %offset.i.i77
  tail call void @llvm.assume(i1 %eq.i) #30
  %12 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract49, 0
  %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.1.extract51, 1
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.2.extract53, 2
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, i32 %.fca.3.extract55, 3
  %16 = tail call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract57)
  %17 = load ptr, ptr %7, align 8
  %18 = tail call ptr %17(ptr %.fca.1.extract59)
  %19 = tail call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract57)
  %20 = getelementptr i8, ptr %7, i64 8
  %21 = load ptr, ptr %20, align 8
  %22 = tail call ptr %21(ptr %.fca.1.extract59)
  %23 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %24 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract49)
  %25 = sext i32 %.fca.3.extract55 to i64
  %26 = getelementptr ptr, ptr %.fca.0.extract49, i64 %25
  %27 = getelementptr i8, ptr %26, i64 8
  %28 = load ptr, ptr %27, align 8
  %29 = call ptr %28({ ptr, ptr, ptr, i32 } %15, ptr nonnull %4)
  %30 = call { ptr, ptr, ptr, i32 } %29({ ptr, ptr, ptr, i32 } %15, { ptr, ptr, ptr, i32 } %15, ptr nonnull %4)
  %31 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract57)
  %32 = getelementptr i8, ptr %7, i64 32
  %33 = load ptr, ptr %32, align 8
  %34 = load ptr, ptr %33, align 8
  %35 = call { ptr, ptr, ptr, i32 } %34(ptr %.fca.1.extract59)
  %.fca.0.extract33 = extractvalue { ptr, ptr, ptr, i32 } %35, 0
  %.fca.1.extract35 = extractvalue { ptr, ptr, ptr, i32 } %35, 1
  %.fca.2.extract37 = extractvalue { ptr, ptr, ptr, i32 } %35, 2
  %.fca.3.extract39 = extractvalue { ptr, ptr, ptr, i32 } %35, 3
  %hash_coef_ptr.i.i94 = getelementptr i8, ptr %.fca.0.extract33, i64 8
  %tbl_size_ptr.i.i95 = getelementptr i8, ptr %.fca.0.extract33, i64 16
  %offset_tbl_ptr.i.i96 = getelementptr i8, ptr %.fca.0.extract33, i64 40
  %hash_coef.i.i97 = load i64, ptr %hash_coef_ptr.i.i94, align 4
  %tbl_size.i.i98 = load i64, ptr %tbl_size_ptr.i.i95, align 4
  %offset_tbl.i.i99 = load ptr, ptr %offset_tbl_ptr.i.i96, align 8
  %product.i.i.i100 = mul i64 %hash_coef.i.i97, 5693646204635713916
  %shifted.i.i.i101 = lshr i64 %product.i.i.i100, 32
  %xored.i.i.i102 = xor i64 %shifted.i.i.i101, %product.i.i.i100
  %hash.i.i.i103 = and i64 %xored.i.i.i102, %tbl_size.i.i98
  %offset_ptr.i.i104 = getelementptr i32, ptr %offset_tbl.i.i99, i64 %hash.i.i.i103
  %offset.i.i105 = load i32, ptr %offset_ptr.i.i104, align 4
  %eq.i108 = icmp eq i32 %.fca.3.extract39, %offset.i.i105
  call void @llvm.assume(i1 %eq.i108) #30
  %36 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract33, 0
  %37 = insertvalue { ptr, ptr, ptr, i32 } %36, ptr %.fca.1.extract35, 1
  %38 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %.fca.2.extract37, 2
  %39 = insertvalue { ptr, ptr, ptr, i32 } %38, i32 %.fca.3.extract39, 3
  %40 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract57)
  %41 = load ptr, ptr %7, align 8
  %42 = call ptr %41(ptr %.fca.1.extract59)
  %43 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract57)
  %44 = load ptr, ptr %20, align 8
  %45 = call ptr %44(ptr %.fca.1.extract59)
  %46 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %47 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract33)
  %48 = sext i32 %.fca.3.extract39 to i64
  %49 = getelementptr ptr, ptr %.fca.0.extract33, i64 %48
  %50 = getelementptr i8, ptr %49, i64 8
  %51 = load ptr, ptr %50, align 8
  %52 = call ptr %51({ ptr, ptr, ptr, i32 } %39, ptr nonnull %4)
  %53 = call { ptr, ptr, ptr, i32 } %52({ ptr, ptr, ptr, i32 } %39, { ptr, ptr, ptr, i32 } %39, ptr nonnull %4)
  %54 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract57)
  %55 = load ptr, ptr %7, align 8
  %56 = call ptr %55(ptr %.fca.1.extract59)
  %57 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract57)
  %58 = load ptr, ptr %20, align 8
  %59 = call ptr %58(ptr %.fca.1.extract59)
  %result.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %60 = getelementptr i8, ptr %result.i, i64 16
  store ptr %59, ptr %60, align 8
  %61 = getelementptr i8, ptr %result.i, i64 8
  store ptr %56, ptr %61, align 8
  %62 = getelementptr i8, ptr %result.i, i64 24
  store ptr null, ptr %62, align 8
  %63 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i)
  store ptr @Pair, ptr %result.i, align 8
  %result.i123 = call noalias dereferenceable_or_null(88) ptr @bump_malloc_inner(i64 noundef 88, ptr nonnull @current_ptr) #29
  store ptr %56, ptr %result.i123, align 8
  %64 = getelementptr i8, ptr %result.i123, i64 8
  store ptr %59, ptr %64, align 8
  %65 = getelementptr i8, ptr %result.i123, i64 16
  store ptr %result.i, ptr %65, align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %result.i123)
  %67 = alloca { ptr, ptr, ptr, i32 }, align 8
  %68 = getelementptr inbounds i8, ptr %67, i64 8
  %69 = getelementptr inbounds i8, ptr %67, i64 24
  store ptr @ZipIterator2, ptr %67, align 8
  store ptr %result.i123, ptr %68, align 8
  store i32 9, ptr %69, align 8
  %70 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %67)
  %71 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract57)
  %72 = load ptr, ptr %8, align 8
  %73 = load ptr, ptr %72, align 8
  %74 = call { ptr, ptr, ptr, i32 } %73(ptr %.fca.1.extract59)
  %.fca.0.extract17 = extractvalue { ptr, ptr, ptr, i32 } %74, 0
  %.fca.1.extract19 = extractvalue { ptr, ptr, ptr, i32 } %74, 1
  %.fca.2.extract21 = extractvalue { ptr, ptr, ptr, i32 } %74, 2
  %.fca.3.extract23 = extractvalue { ptr, ptr, ptr, i32 } %74, 3
  %hash_coef_ptr.i.i125 = getelementptr i8, ptr %.fca.0.extract17, i64 8
  %tbl_size_ptr.i.i126 = getelementptr i8, ptr %.fca.0.extract17, i64 16
  %offset_tbl_ptr.i.i127 = getelementptr i8, ptr %.fca.0.extract17, i64 40
  %hash_coef.i.i128 = load i64, ptr %hash_coef_ptr.i.i125, align 4
  %tbl_size.i.i129 = load i64, ptr %tbl_size_ptr.i.i126, align 4
  %offset_tbl.i.i130 = load ptr, ptr %offset_tbl_ptr.i.i127, align 8
  %product.i.i.i131 = mul i64 %hash_coef.i.i128, 5693646204635713916
  %shifted.i.i.i132 = lshr i64 %product.i.i.i131, 32
  %xored.i.i.i133 = xor i64 %shifted.i.i.i132, %product.i.i.i131
  %hash.i.i.i134 = and i64 %xored.i.i.i133, %tbl_size.i.i129
  %offset_ptr.i.i135 = getelementptr i32, ptr %offset_tbl.i.i130, i64 %hash.i.i.i134
  %offset.i.i136 = load i32, ptr %offset_ptr.i.i135, align 4
  %eq.i139 = icmp eq i32 %.fca.3.extract23, %offset.i.i136
  call void @llvm.assume(i1 %eq.i139) #30
  %75 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract17, 0
  %76 = insertvalue { ptr, ptr, ptr, i32 } %75, ptr %.fca.1.extract19, 1
  %77 = insertvalue { ptr, ptr, ptr, i32 } %76, ptr %.fca.2.extract21, 2
  %78 = insertvalue { ptr, ptr, ptr, i32 } %77, i32 %.fca.3.extract23, 3
  %79 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract57)
  %80 = load ptr, ptr %7, align 8
  %81 = call ptr %80(ptr %.fca.1.extract59)
  %82 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract57)
  %83 = load ptr, ptr %20, align 8
  %84 = call ptr %83(ptr %.fca.1.extract59)
  %85 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %86 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract17)
  %87 = sext i32 %.fca.3.extract23 to i64
  %88 = getelementptr ptr, ptr %.fca.0.extract17, i64 %87
  %89 = getelementptr i8, ptr %88, i64 8
  %90 = load ptr, ptr %89, align 8
  %91 = call ptr %90({ ptr, ptr, ptr, i32 } %78, ptr nonnull %4)
  %92 = call { ptr, ptr, ptr, i32 } %91({ ptr, ptr, ptr, i32 } %78, { ptr, ptr, ptr, i32 } %78, ptr nonnull %4)
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %92, 0
  %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %92, 1
  %.fca.2.extract13 = extractvalue { ptr, ptr, ptr, i32 } %92, 2
  %hash_coef_ptr.i.i141 = getelementptr i8, ptr %.fca.0.extract9, i64 8
  %tbl_size_ptr.i.i142 = getelementptr i8, ptr %.fca.0.extract9, i64 16
  %offset_tbl_ptr.i.i143 = getelementptr i8, ptr %.fca.0.extract9, i64 40
  %93 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract57)
  %94 = load ptr, ptr %32, align 8
  %95 = load ptr, ptr %94, align 8
  %96 = call { ptr, ptr, ptr, i32 } %95(ptr %.fca.1.extract59)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %96, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %96, 1
  %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %96, 2
  %.fca.3.extract7 = extractvalue { ptr, ptr, ptr, i32 } %96, 3
  %hash_coef_ptr.i.i155 = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i156 = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i157 = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i158 = load i64, ptr %hash_coef_ptr.i.i155, align 4
  %tbl_size.i.i159 = load i64, ptr %tbl_size_ptr.i.i156, align 4
  %offset_tbl.i.i160 = load ptr, ptr %offset_tbl_ptr.i.i157, align 8
  %product.i.i.i161 = mul i64 %hash_coef.i.i158, 5693646204635713916
  %shifted.i.i.i162 = lshr i64 %product.i.i.i161, 32
  %xored.i.i.i163 = xor i64 %shifted.i.i.i162, %product.i.i.i161
  %hash.i.i.i164 = and i64 %xored.i.i.i163, %tbl_size.i.i159
  %offset_ptr.i.i165 = getelementptr i32, ptr %offset_tbl.i.i160, i64 %hash.i.i.i164
  %offset.i.i166 = load i32, ptr %offset_ptr.i.i165, align 4
  %eq.i169 = icmp eq i32 %.fca.3.extract7, %offset.i.i166
  call void @llvm.assume(i1 %eq.i169) #30
  %97 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %98 = insertvalue { ptr, ptr, ptr, i32 } %97, ptr %.fca.1.extract3, 1
  %99 = insertvalue { ptr, ptr, ptr, i32 } %98, ptr %.fca.2.extract5, 2
  %100 = insertvalue { ptr, ptr, ptr, i32 } %99, i32 %.fca.3.extract7, 3
  %101 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract57)
  %102 = load ptr, ptr %7, align 8
  %103 = call ptr %102(ptr %.fca.1.extract59)
  %104 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract57)
  %105 = load ptr, ptr %20, align 8
  %106 = call ptr %105(ptr %.fca.1.extract59)
  %107 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %108 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract1)
  %109 = sext i32 %.fca.3.extract7 to i64
  %110 = getelementptr ptr, ptr %.fca.0.extract1, i64 %109
  %111 = getelementptr i8, ptr %110, i64 8
  %112 = load ptr, ptr %111, align 8
  %113 = call ptr %112({ ptr, ptr, ptr, i32 } %100, ptr nonnull %4)
  %114 = call { ptr, ptr, ptr, i32 } %113({ ptr, ptr, ptr, i32 } %100, { ptr, ptr, ptr, i32 } %100, ptr nonnull %4)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %114, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %114, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %114, 2
  %hash_coef_ptr.i.i171 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i172 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i173 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i174 = load i64, ptr %hash_coef_ptr.i.i171, align 4
  %tbl_size.i.i175 = load i64, ptr %tbl_size_ptr.i.i172, align 4
  %offset_tbl.i.i176 = load ptr, ptr %offset_tbl_ptr.i.i173, align 8
  %product.i.i.i177 = mul i64 %hash_coef.i.i174, 4189192806087951739
  %shifted.i.i.i178 = lshr i64 %product.i.i.i177, 32
  %xored.i.i.i179 = xor i64 %shifted.i.i.i178, %product.i.i.i177
  %hash.i.i.i180 = and i64 %xored.i.i.i179, %tbl_size.i.i175
  %offset_ptr.i.i181 = getelementptr i32, ptr %offset_tbl.i.i176, i64 %hash.i.i.i180
  %hash_coef.i.i188 = load i64, ptr %hash_coef_ptr.i.i141, align 4
  %tbl_size.i.i189 = load i64, ptr %tbl_size_ptr.i.i142, align 4
  %offset_tbl.i.i190 = load ptr, ptr %offset_tbl_ptr.i.i143, align 8
  %product.i.i.i191 = mul i64 %hash_coef.i.i188, 4189192806087951739
  %shifted.i.i.i192 = lshr i64 %product.i.i.i191, 32
  %xored.i.i.i193 = xor i64 %shifted.i.i.i192, %product.i.i.i191
  %hash.i.i.i194 = and i64 %xored.i.i.i193, %tbl_size.i.i189
  %offset_ptr.i.i195 = getelementptr i32, ptr %offset_tbl.i.i190, i64 %hash.i.i.i194
  %offset.i.i196 = load i32, ptr %offset_ptr.i.i195, align 4
  %115 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract9, 0
  %116 = insertvalue { ptr, ptr, ptr, i32 } %115, ptr %.fca.1.extract11, 1
  %117 = insertvalue { ptr, ptr, ptr, i32 } %116, ptr %.fca.2.extract13, 2
  %118 = insertvalue { ptr, ptr, ptr, i32 } %117, i32 %offset.i.i196, 3
  %offset.i.i210 = load i32, ptr %offset_ptr.i.i181, align 4
  %119 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %120 = insertvalue { ptr, ptr, ptr, i32 } %119, ptr %.fca.1.extract, 1
  %121 = insertvalue { ptr, ptr, ptr, i32 } %120, ptr %.fca.2.extract, 2
  %122 = insertvalue { ptr, ptr, ptr, i32 } %121, i32 %offset.i.i210, 3
  %123 = load ptr, ptr %67, align 8
  %124 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %123, 0
  %125 = load ptr, ptr %68, align 8
  %126 = insertvalue { ptr, ptr, ptr, i32 } %124, ptr %125, 1
  %127 = getelementptr inbounds i8, ptr %67, i64 16
  %128 = load ptr, ptr %127, align 8
  %129 = insertvalue { ptr, ptr, ptr, i32 } %126, ptr %128, 2
  %130 = load i32, ptr %69, align 8
  %131 = insertvalue { ptr, ptr, ptr, i32 } %129, i32 %130, 3
  %132 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract57)
  %133 = load ptr, ptr %7, align 8
  %134 = call ptr %133(ptr %.fca.1.extract59)
  %135 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract57)
  %136 = load ptr, ptr %20, align 8
  %137 = call ptr %136(ptr %.fca.1.extract59)
  %result.i212 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  %138 = getelementptr i8, ptr %result.i212, i64 8
  store ptr %134, ptr %138, align 8
  %139 = getelementptr i8, ptr %result.i212, i64 16
  store ptr null, ptr %139, align 8
  %140 = call ptr @llvm.invariant.start.p0(i64 16, ptr %result.i212)
  store ptr @Iterator2, ptr %result.i212, align 8
  %result.i213 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  %141 = getelementptr i8, ptr %result.i213, i64 8
  store ptr %137, ptr %141, align 8
  %142 = getelementptr i8, ptr %result.i213, i64 16
  store ptr null, ptr %142, align 8
  %143 = call ptr @llvm.invariant.start.p0(i64 16, ptr %result.i213)
  store ptr @Iterator2, ptr %result.i213, align 8
  %144 = alloca [2 x ptr], align 8
  store ptr %result.i212, ptr %144, align 8
  %145 = getelementptr inbounds i8, ptr %144, i64 8
  store ptr %result.i213, ptr %145, align 8
  %146 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %144)
  %147 = call ptr @llvm.invariant.start.p0(i64 96, ptr %123)
  %148 = sext i32 %130 to i64
  %149 = getelementptr ptr, ptr %123, i64 %148
  %150 = getelementptr i8, ptr %149, i64 40
  %151 = load ptr, ptr %150, align 8
  %152 = alloca { ptr, ptr }, align 8
  store ptr %.fca.0.extract9, ptr %152, align 8
  %153 = getelementptr inbounds i8, ptr %152, i64 8
  store ptr %.fca.0.extract, ptr %153, align 8
  %154 = call ptr %151({ ptr, ptr, ptr, i32 } %131, ptr nonnull %152)
  call void %154({ ptr, ptr, ptr, i32 } %131, { ptr, ptr, ptr, i32 } %131, ptr nonnull %144, { ptr, ptr, ptr, i32 } %118, { ptr, ptr, ptr, i32 } %122)
  %155 = load ptr, ptr %67, align 8
  %156 = load ptr, ptr %68, align 8
  %157 = load ptr, ptr %127, align 8
  %hash_coef_ptr.i.i215 = getelementptr i8, ptr %155, i64 8
  %tbl_size_ptr.i.i216 = getelementptr i8, ptr %155, i64 16
  %offset_tbl_ptr.i.i217 = getelementptr i8, ptr %155, i64 40
  %hash_coef.i.i218 = load i64, ptr %hash_coef_ptr.i.i215, align 4
  %tbl_size.i.i219 = load i64, ptr %tbl_size_ptr.i.i216, align 4
  %offset_tbl.i.i220 = load ptr, ptr %offset_tbl_ptr.i.i217, align 8
  %product.i.i.i221 = mul i64 %hash_coef.i.i218, 4189192806087951739
  %shifted.i.i.i222 = lshr i64 %product.i.i.i221, 32
  %xored.i.i.i223 = xor i64 %shifted.i.i.i222, %product.i.i.i221
  %hash.i.i.i224 = and i64 %xored.i.i.i223, %tbl_size.i.i219
  %offset_ptr.i.i225 = getelementptr i32, ptr %offset_tbl.i.i220, i64 %hash.i.i.i224
  %offset.i.i226 = load i32, ptr %offset_ptr.i.i225, align 4
  %158 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %155, 0
  %159 = insertvalue { ptr, ptr, ptr, i32 } %158, ptr %156, 1
  %160 = insertvalue { ptr, ptr, ptr, i32 } %159, ptr %157, 2
  %161 = insertvalue { ptr, ptr, ptr, i32 } %160, i32 %offset.i.i226, 3
  ret { ptr, ptr, ptr, i32 } %161
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_ZipIterator2(ptr nocapture readnone %0) #0 {
  ret { i64, i64 } { i64 88, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ZipIterator2_field_ZipIterator2_0(ptr nocapture readonly %0) #3 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ZipIterator2_field_ZipIterator2_1(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ZipIterator2_field_ZipIterator2_2(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ZipIterator2_B_init_firstIterator2T_secondIterator2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 128
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ZipIterator2_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 136
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @ZipIterator2_init_firstIterator2T_secondIterator2U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 5502728639611621286
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %hash_coef_ptr.i.i18 = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i19 = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i20 = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i21 = load i64, ptr %hash_coef_ptr.i.i18, align 4
  %tbl_size.i.i22 = load i64, ptr %tbl_size_ptr.i.i19, align 4
  %offset_tbl.i.i23 = load ptr, ptr %offset_tbl_ptr.i.i20, align 8
  %product.i.i.i24 = mul i64 %hash_coef.i.i21, 4189192806087951739
  %shifted.i.i.i25 = lshr i64 %product.i.i.i24, 32
  %xored.i.i.i26 = xor i64 %shifted.i.i.i25, %product.i.i.i24
  %hash.i.i.i27 = and i64 %xored.i.i.i26, %tbl_size.i.i22
  %offset_ptr.i.i28 = getelementptr i32, ptr %offset_tbl.i.i23, i64 %hash.i.i.i27
  %offset.i.i43 = load i32, ptr %offset_ptr.i.i28, align 4
  %6 = tail call ptr @llvm.invariant.start.p0(i64 96, ptr %.fca.0.extract9)
  %7 = sext i32 %offset.i.i to i64
  %8 = getelementptr ptr, ptr %.fca.0.extract9, i64 %7
  %9 = getelementptr i8, ptr %8, i64 24
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr i8, ptr %10, i64 8
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.1.extract3, 1
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, ptr %.fca.2.extract5, 2
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, i32 %offset.i.i43, 3
  tail call void %12(ptr %.fca.1.extract11, { ptr, ptr, ptr, i32 } %16)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %hash_coef_ptr.i.i46 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i47 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i48 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i49 = load i64, ptr %hash_coef_ptr.i.i46, align 4
  %tbl_size.i.i50 = load i64, ptr %tbl_size_ptr.i.i47, align 4
  %offset_tbl.i.i51 = load ptr, ptr %offset_tbl_ptr.i.i48, align 8
  %product.i.i.i52 = mul i64 %hash_coef.i.i49, 4189192806087951739
  %shifted.i.i.i53 = lshr i64 %product.i.i.i52, 32
  %xored.i.i.i54 = xor i64 %shifted.i.i.i53, %product.i.i.i52
  %hash.i.i.i55 = and i64 %xored.i.i.i54, %tbl_size.i.i50
  %offset_ptr.i.i56 = getelementptr i32, ptr %offset_tbl.i.i51, i64 %hash.i.i.i55
  %offset.i.i71 = load i32, ptr %offset_ptr.i.i56, align 4
  %17 = tail call ptr @llvm.invariant.start.p0(i64 96, ptr %.fca.0.extract9)
  %18 = getelementptr i8, ptr %8, i64 32
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr i8, ptr %19, i64 8
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %23 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %.fca.1.extract, 1
  %24 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %.fca.2.extract, 2
  %25 = insertvalue { ptr, ptr, ptr, i32 } %24, i32 %offset.i.i71, 3
  tail call void %21(ptr %.fca.1.extract11, { ptr, ptr, ptr, i32 } %25)
  ret void
}

define { ptr, i160 } @ZipIterator2_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract30 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract32 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract30, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract30, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract30, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 5502728639611621286
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %6 = tail call ptr @llvm.invariant.start.p0(i64 96, ptr %.fca.0.extract30)
  %7 = sext i32 %offset.i.i to i64
  %8 = getelementptr ptr, ptr %.fca.0.extract30, i64 %7
  %9 = getelementptr i8, ptr %8, i64 24
  %10 = load ptr, ptr %9, align 8
  %11 = load ptr, ptr %10, align 8
  %12 = tail call { ptr, ptr, ptr, i32 } %11(ptr %.fca.1.extract32)
  %.fca.0.extract10 = extractvalue { ptr, ptr, ptr, i32 } %12, 0
  %.fca.1.extract12 = extractvalue { ptr, ptr, ptr, i32 } %12, 1
  %.fca.2.extract14 = extractvalue { ptr, ptr, ptr, i32 } %12, 2
  %.fca.3.extract16 = extractvalue { ptr, ptr, ptr, i32 } %12, 3
  %hash_coef_ptr.i.i53 = getelementptr i8, ptr %.fca.0.extract10, i64 8
  %tbl_size_ptr.i.i54 = getelementptr i8, ptr %.fca.0.extract10, i64 16
  %offset_tbl_ptr.i.i55 = getelementptr i8, ptr %.fca.0.extract10, i64 40
  %hash_coef.i.i56 = load i64, ptr %hash_coef_ptr.i.i53, align 4
  %tbl_size.i.i57 = load i64, ptr %tbl_size_ptr.i.i54, align 4
  %offset_tbl.i.i58 = load ptr, ptr %offset_tbl_ptr.i.i55, align 8
  %product.i.i.i59 = mul i64 %hash_coef.i.i56, 4189192806087951739
  %shifted.i.i.i60 = lshr i64 %product.i.i.i59, 32
  %xored.i.i.i61 = xor i64 %shifted.i.i.i60, %product.i.i.i59
  %hash.i.i.i62 = and i64 %xored.i.i.i61, %tbl_size.i.i57
  %offset_ptr.i.i63 = getelementptr i32, ptr %offset_tbl.i.i58, i64 %hash.i.i.i62
  %offset.i.i64 = load i32, ptr %offset_ptr.i.i63, align 4
  %eq.i = icmp eq i32 %.fca.3.extract16, %offset.i.i64
  tail call void @llvm.assume(i1 %eq.i) #30
  %13 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract10, 0
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.1.extract12, 1
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, ptr %.fca.2.extract14, 2
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, i32 %.fca.3.extract16, 3
  %17 = tail call ptr @llvm.invariant.start.p0(i64 96, ptr %.fca.0.extract30)
  %18 = load ptr, ptr %8, align 8
  %19 = tail call ptr %18(ptr %.fca.1.extract32)
  %20 = tail call ptr @llvm.invariant.start.p0(i64 96, ptr %.fca.0.extract30)
  %21 = getelementptr i8, ptr %8, i64 8
  %22 = load ptr, ptr %21, align 8
  %23 = tail call ptr %22(ptr %.fca.1.extract32)
  %24 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %25 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %.fca.0.extract10)
  %26 = sext i32 %.fca.3.extract16 to i64
  %27 = getelementptr ptr, ptr %.fca.0.extract10, i64 %26
  %28 = getelementptr i8, ptr %27, i64 8
  %29 = load ptr, ptr %28, align 8
  %30 = call ptr %29({ ptr, ptr, ptr, i32 } %16, ptr nonnull %4)
  %31 = call { ptr, i160 } %30({ ptr, ptr, ptr, i32 } %16, { ptr, ptr, ptr, i32 } %16, ptr nonnull %4)
  %.fca.0.extract4 = extractvalue { ptr, i160 } %31, 0
  %32 = call ptr @llvm.invariant.start.p0(i64 96, ptr %.fca.0.extract30)
  %33 = getelementptr i8, ptr %8, i64 32
  %34 = load ptr, ptr %33, align 8
  %35 = load ptr, ptr %34, align 8
  %36 = call { ptr, ptr, ptr, i32 } %35(ptr %.fca.1.extract32)
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %36, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %36, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %36, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %36, 3
  %hash_coef_ptr.i.i67 = getelementptr i8, ptr %.fca.0.extract2, i64 8
  %tbl_size_ptr.i.i68 = getelementptr i8, ptr %.fca.0.extract2, i64 16
  %offset_tbl_ptr.i.i69 = getelementptr i8, ptr %.fca.0.extract2, i64 40
  %hash_coef.i.i70 = load i64, ptr %hash_coef_ptr.i.i67, align 4
  %tbl_size.i.i71 = load i64, ptr %tbl_size_ptr.i.i68, align 4
  %offset_tbl.i.i72 = load ptr, ptr %offset_tbl_ptr.i.i69, align 8
  %product.i.i.i73 = mul i64 %hash_coef.i.i70, 4189192806087951739
  %shifted.i.i.i74 = lshr i64 %product.i.i.i73, 32
  %xored.i.i.i75 = xor i64 %shifted.i.i.i74, %product.i.i.i73
  %hash.i.i.i76 = and i64 %xored.i.i.i75, %tbl_size.i.i71
  %offset_ptr.i.i77 = getelementptr i32, ptr %offset_tbl.i.i72, i64 %hash.i.i.i76
  %offset.i.i78 = load i32, ptr %offset_ptr.i.i77, align 4
  %eq.i81 = icmp eq i32 %.fca.3.extract, %offset.i.i78
  call void @llvm.assume(i1 %eq.i81) #30
  %37 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract2, 0
  %38 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %.fca.1.extract3, 1
  %39 = insertvalue { ptr, ptr, ptr, i32 } %38, ptr %.fca.2.extract, 2
  %40 = insertvalue { ptr, ptr, ptr, i32 } %39, i32 %.fca.3.extract, 3
  %41 = call ptr @llvm.invariant.start.p0(i64 96, ptr %.fca.0.extract30)
  %42 = load ptr, ptr %8, align 8
  %43 = call ptr %42(ptr %.fca.1.extract32)
  %44 = call ptr @llvm.invariant.start.p0(i64 96, ptr %.fca.0.extract30)
  %45 = load ptr, ptr %21, align 8
  %46 = call ptr %45(ptr %.fca.1.extract32)
  %47 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %48 = call ptr @llvm.invariant.start.p0(i64 24, ptr %.fca.0.extract2)
  %49 = sext i32 %.fca.3.extract to i64
  %50 = getelementptr ptr, ptr %.fca.0.extract2, i64 %49
  %51 = getelementptr i8, ptr %50, i64 8
  %52 = load ptr, ptr %51, align 8
  %53 = call ptr %52({ ptr, ptr, ptr, i32 } %40, ptr nonnull %4)
  %54 = call { ptr, i160 } %53({ ptr, ptr, ptr, i32 } %40, { ptr, ptr, ptr, i32 } %40, ptr nonnull %4)
  %55 = icmp ne ptr %.fca.0.extract4, @nil_typ
  %56 = icmp ne ptr %.fca.0.extract4, null
  %.not49 = and i1 %55, %56
  br i1 %.not49, label %57, label %.thread

57:                                               ; preds = %3
  %.fca.0.extract = extractvalue { ptr, i160 } %54, 0
  %58 = icmp ne ptr %.fca.0.extract, @nil_typ
  %59 = icmp ne ptr %.fca.0.extract, null
  %.not51 = and i1 %58, %59
  br i1 %.not51, label %60, label %.thread

60:                                               ; preds = %57
  %61 = call ptr @llvm.invariant.start.p0(i64 96, ptr nonnull %.fca.0.extract30)
  %62 = load ptr, ptr %8, align 8
  %63 = call ptr %62(ptr %.fca.1.extract32)
  %64 = call ptr @llvm.invariant.start.p0(i64 96, ptr nonnull %.fca.0.extract30)
  %65 = load ptr, ptr %21, align 8
  %66 = call ptr %65(ptr %.fca.1.extract32)
  %67 = load ptr, ptr %63, align 8
  %68 = getelementptr i8, ptr %67, i64 48
  %69 = load ptr, ptr %68, align 8
  %70 = call { i64, i64 } %69(ptr nonnull %63)
  %71 = extractvalue { i64, i64 } %70, 0
  %72 = extractvalue { i64, i64 } %70, 1
  %73 = urem i64 16, %72
  %74 = icmp eq i64 %73, 0
  %75 = sub i64 %72, %73
  %76 = select i1 %74, i64 0, i64 %75
  %77 = add i64 %71, 16
  %78 = add i64 %77, %76
  %79 = load ptr, ptr %66, align 8
  %80 = getelementptr i8, ptr %79, i64 48
  %81 = load ptr, ptr %80, align 8
  %82 = call { i64, i64 } %81(ptr nonnull %66)
  %83 = extractvalue { i64, i64 } %82, 0
  %84 = extractvalue { i64, i64 } %82, 1
  %85 = call i64 @llvm.umax.i64(i64 %72, i64 %84)
  %86 = call i64 @llvm.umax.i64(i64 %85, i64 8)
  %87 = urem i64 %78, %84
  %88 = icmp eq i64 %87, 0
  %89 = sub i64 %84, %87
  %90 = select i1 %88, i64 0, i64 %89
  %91 = add i64 %83, %78
  %92 = add i64 %91, %90
  %93 = urem i64 %92, %86
  %94 = icmp eq i64 %93, 0
  %95 = sub i64 %86, %93
  %96 = select i1 %94, i64 0, i64 %95
  %97 = add i64 %96, %92
  %result.i = call noalias ptr @bump_malloc_inner(i64 noundef %97, ptr nonnull @current_ptr) #29
  store ptr %63, ptr %result.i, align 8
  %98 = getelementptr i8, ptr %result.i, i64 8
  store ptr %66, ptr %98, align 8
  %99 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i)
  %100 = getelementptr inbounds i8, ptr %5, i64 8
  %101 = getelementptr inbounds i8, ptr %5, i64 24
  store ptr @Pair, ptr %5, align 8
  store ptr %result.i, ptr %100, align 8
  store i32 9, ptr %101, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %5)
  %103 = call ptr @llvm.invariant.start.p0(i64 96, ptr nonnull %.fca.0.extract30)
  %104 = load ptr, ptr %8, align 8
  %105 = call ptr %104(ptr %.fca.1.extract32)
  %106 = call ptr @llvm.invariant.start.p0(i64 96, ptr nonnull %.fca.0.extract30)
  %107 = load ptr, ptr %21, align 8
  %108 = call ptr %107(ptr %.fca.1.extract32)
  %109 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @Pair)
  %110 = load ptr, ptr %result.i, align 8
  %111 = load ptr, ptr %110, align 8
  %112 = getelementptr i8, ptr %111, i64 48
  %113 = load ptr, ptr %112, align 8
  %114 = call { i64, i64 } %113(ptr nonnull %110)
  %115 = extractvalue { i64, i64 } %114, 1
  %116 = urem i64 16, %115
  %117 = icmp eq i64 %116, 0
  %reass.sub = sub i64 %115, %116
  %118 = add i64 %reass.sub, 16
  %119 = select i1 %117, i64 16, i64 %118
  %120 = getelementptr i8, ptr %result.i, i64 %119
  %121 = load ptr, ptr %result.i, align 8
  %122 = load ptr, ptr %121, align 8
  %123 = getelementptr i8, ptr %122, i64 64
  %124 = load ptr, ptr %123, align 8
  call void %124({ ptr, i160 } %31, ptr nonnull %121, ptr %120)
  %125 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @Pair)
  %126 = load ptr, ptr %result.i, align 8
  %127 = load ptr, ptr %126, align 8
  %128 = getelementptr i8, ptr %127, i64 48
  %129 = load ptr, ptr %128, align 8
  %130 = call { i64, i64 } %129(ptr nonnull %126)
  %131 = extractvalue { i64, i64 } %130, 0
  %132 = extractvalue { i64, i64 } %130, 1
  %133 = urem i64 16, %132
  %134 = icmp eq i64 %133, 0
  %135 = sub i64 %132, %133
  %136 = select i1 %134, i64 0, i64 %135
  %137 = add i64 %131, 16
  %138 = add i64 %137, %136
  %139 = load ptr, ptr %98, align 8
  %140 = load ptr, ptr %139, align 8
  %141 = getelementptr i8, ptr %140, i64 48
  %142 = load ptr, ptr %141, align 8
  %143 = call { i64, i64 } %142(ptr nonnull %139)
  %144 = extractvalue { i64, i64 } %143, 1
  %145 = urem i64 %138, %144
  %146 = icmp eq i64 %145, 0
  %147 = sub i64 %144, %145
  %148 = select i1 %146, i64 0, i64 %147
  %149 = getelementptr i8, ptr %result.i, i64 %138
  %150 = getelementptr i8, ptr %149, i64 %148
  %151 = load ptr, ptr %98, align 8
  %152 = load ptr, ptr %151, align 8
  %153 = getelementptr i8, ptr %152, i64 64
  %154 = load ptr, ptr %153, align 8
  call void %154({ ptr, i160 } %54, ptr nonnull %151, ptr %150)
  %155 = load ptr, ptr %5, align 8
  %156 = load i160, ptr %100, align 8
  br label %.thread

.thread:                                          ; preds = %3, %57, %60
  %.reg2mem15.sroa.3.0113 = phi i160 [ %156, %60 ], [ poison, %57 ], [ poison, %3 ]
  %157 = phi ptr [ %155, %60 ], [ @nil_typ, %57 ], [ @nil_typ, %3 ]
  %.reload12.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %157, 0
  %.reload12.fca.1.insert = insertvalue { ptr, i160 } %.reload12.fca.0.insert, i160 %.reg2mem15.sroa.3.0113, 1
  ret { ptr, i160 } %.reload12.fca.1.insert
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ZipIterator2_getter_second(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 56
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 64
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 72
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 80
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ZipIterator2_setter_second(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #6 {
  %3 = getelementptr i8, ptr %0, i64 56
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 64
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 72
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 80
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ZipIterator2_getter_first(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 24
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 32
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 40
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 48
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ZipIterator2_setter_first(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #6 {
  %3 = getelementptr i8, ptr %0, i64 24
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 32
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 40
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 48
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ZipIterable2_getter_second(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 56
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 64
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 72
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 80
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ZipIterable2_setter_second(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #6 {
  %3 = getelementptr i8, ptr %0, i64 56
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 64
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 72
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 80
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ZipIterable2_getter_first(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 24
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 32
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 40
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 48
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ZipIterable2_setter_first(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #6 {
  %3 = getelementptr i8, ptr %0, i64 24
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 32
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 40
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 48
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_InterleaveIterable2(ptr nocapture readnone %0) #0 {
  ret { i64, i64 } { i64 72, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @InterleaveIterable2_field_InterleaveIterable2_0(ptr nocapture readonly %0) #3 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @InterleaveIterable2_B_init_firstIterable2T_secondIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 192
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @InterleaveIterable2_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 200
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @InterleaveIterable2_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 208
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @InterleaveIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 216
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @InterleaveIterable2_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 224
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @InterleaveIterable2_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 232
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @InterleaveIterable2_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 240
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @InterleaveIterable2_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 248
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @InterleaveIterable2_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 256
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @InterleaveIterable2_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 264
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @InterleaveIterable2_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 272
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @InterleaveIterable2_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 280
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @InterleaveIterable2_init_firstIterable2T_secondIterable2T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -6258231685215461775
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %hash_coef_ptr.i.i18 = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i19 = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i20 = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i21 = load i64, ptr %hash_coef_ptr.i.i18, align 4
  %tbl_size.i.i22 = load i64, ptr %tbl_size_ptr.i.i19, align 4
  %offset_tbl.i.i23 = load ptr, ptr %offset_tbl_ptr.i.i20, align 8
  %product.i.i.i24 = mul i64 %hash_coef.i.i21, 5693646204635713916
  %shifted.i.i.i25 = lshr i64 %product.i.i.i24, 32
  %xored.i.i.i26 = xor i64 %shifted.i.i.i25, %product.i.i.i24
  %hash.i.i.i27 = and i64 %xored.i.i.i26, %tbl_size.i.i22
  %offset_ptr.i.i28 = getelementptr i32, ptr %offset_tbl.i.i23, i64 %hash.i.i.i27
  %offset.i.i43 = load i32, ptr %offset_ptr.i.i28, align 4
  %6 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract9)
  %7 = sext i32 %offset.i.i to i64
  %8 = getelementptr ptr, ptr %.fca.0.extract9, i64 %7
  %9 = getelementptr i8, ptr %8, i64 8
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr i8, ptr %10, i64 8
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.1.extract3, 1
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, ptr %.fca.2.extract5, 2
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, i32 %offset.i.i43, 3
  tail call void %12(ptr %.fca.1.extract11, { ptr, ptr, ptr, i32 } %16)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %hash_coef_ptr.i.i46 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i47 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i48 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i49 = load i64, ptr %hash_coef_ptr.i.i46, align 4
  %tbl_size.i.i50 = load i64, ptr %tbl_size_ptr.i.i47, align 4
  %offset_tbl.i.i51 = load ptr, ptr %offset_tbl_ptr.i.i48, align 8
  %product.i.i.i52 = mul i64 %hash_coef.i.i49, 5693646204635713916
  %shifted.i.i.i53 = lshr i64 %product.i.i.i52, 32
  %xored.i.i.i54 = xor i64 %shifted.i.i.i53, %product.i.i.i52
  %hash.i.i.i55 = and i64 %xored.i.i.i54, %tbl_size.i.i50
  %offset_ptr.i.i56 = getelementptr i32, ptr %offset_tbl.i.i51, i64 %hash.i.i.i55
  %offset.i.i71 = load i32, ptr %offset_ptr.i.i56, align 4
  %17 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract9)
  %18 = getelementptr i8, ptr %8, i64 16
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr i8, ptr %19, i64 8
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %23 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %.fca.1.extract, 1
  %24 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %.fca.2.extract, 2
  %25 = insertvalue { ptr, ptr, ptr, i32 } %24, i32 %offset.i.i71, 3
  tail call void %21(ptr %.fca.1.extract11, { ptr, ptr, ptr, i32 } %25)
  ret void
}

define { ptr, ptr, ptr, i32 } @InterleaveIterable2_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract57 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract59 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract57, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract57, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract57, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -6258231685215461775
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %5 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract57, i64 %6
  %8 = getelementptr i8, ptr %7, i64 8
  %9 = load ptr, ptr %8, align 8
  %10 = load ptr, ptr %9, align 8
  %11 = tail call { ptr, ptr, ptr, i32 } %10(ptr %.fca.1.extract59)
  %.fca.0.extract49 = extractvalue { ptr, ptr, ptr, i32 } %11, 0
  %.fca.1.extract51 = extractvalue { ptr, ptr, ptr, i32 } %11, 1
  %.fca.2.extract53 = extractvalue { ptr, ptr, ptr, i32 } %11, 2
  %.fca.3.extract55 = extractvalue { ptr, ptr, ptr, i32 } %11, 3
  %hash_coef_ptr.i.i66 = getelementptr i8, ptr %.fca.0.extract49, i64 8
  %tbl_size_ptr.i.i67 = getelementptr i8, ptr %.fca.0.extract49, i64 16
  %offset_tbl_ptr.i.i68 = getelementptr i8, ptr %.fca.0.extract49, i64 40
  %hash_coef.i.i69 = load i64, ptr %hash_coef_ptr.i.i66, align 4
  %tbl_size.i.i70 = load i64, ptr %tbl_size_ptr.i.i67, align 4
  %offset_tbl.i.i71 = load ptr, ptr %offset_tbl_ptr.i.i68, align 8
  %product.i.i.i72 = mul i64 %hash_coef.i.i69, 5693646204635713916
  %shifted.i.i.i73 = lshr i64 %product.i.i.i72, 32
  %xored.i.i.i74 = xor i64 %shifted.i.i.i73, %product.i.i.i72
  %hash.i.i.i75 = and i64 %xored.i.i.i74, %tbl_size.i.i70
  %offset_ptr.i.i76 = getelementptr i32, ptr %offset_tbl.i.i71, i64 %hash.i.i.i75
  %offset.i.i77 = load i32, ptr %offset_ptr.i.i76, align 4
  %eq.i = icmp eq i32 %.fca.3.extract55, %offset.i.i77
  tail call void @llvm.assume(i1 %eq.i) #30
  %12 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract49, 0
  %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.1.extract51, 1
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.2.extract53, 2
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, i32 %.fca.3.extract55, 3
  %16 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
  %17 = load ptr, ptr %7, align 8
  %18 = tail call ptr %17(ptr %.fca.1.extract59)
  %19 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %20 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract49)
  %21 = sext i32 %.fca.3.extract55 to i64
  %22 = getelementptr ptr, ptr %.fca.0.extract49, i64 %21
  %23 = getelementptr i8, ptr %22, i64 8
  %24 = load ptr, ptr %23, align 8
  %25 = call ptr %24({ ptr, ptr, ptr, i32 } %15, ptr nonnull %4)
  %26 = call { ptr, ptr, ptr, i32 } %25({ ptr, ptr, ptr, i32 } %15, { ptr, ptr, ptr, i32 } %15, ptr nonnull %4)
  %27 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
  %28 = getelementptr i8, ptr %7, i64 16
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %29, align 8
  %31 = call { ptr, ptr, ptr, i32 } %30(ptr %.fca.1.extract59)
  %.fca.0.extract33 = extractvalue { ptr, ptr, ptr, i32 } %31, 0
  %.fca.1.extract35 = extractvalue { ptr, ptr, ptr, i32 } %31, 1
  %.fca.2.extract37 = extractvalue { ptr, ptr, ptr, i32 } %31, 2
  %.fca.3.extract39 = extractvalue { ptr, ptr, ptr, i32 } %31, 3
  %hash_coef_ptr.i.i94 = getelementptr i8, ptr %.fca.0.extract33, i64 8
  %tbl_size_ptr.i.i95 = getelementptr i8, ptr %.fca.0.extract33, i64 16
  %offset_tbl_ptr.i.i96 = getelementptr i8, ptr %.fca.0.extract33, i64 40
  %hash_coef.i.i97 = load i64, ptr %hash_coef_ptr.i.i94, align 4
  %tbl_size.i.i98 = load i64, ptr %tbl_size_ptr.i.i95, align 4
  %offset_tbl.i.i99 = load ptr, ptr %offset_tbl_ptr.i.i96, align 8
  %product.i.i.i100 = mul i64 %hash_coef.i.i97, 5693646204635713916
  %shifted.i.i.i101 = lshr i64 %product.i.i.i100, 32
  %xored.i.i.i102 = xor i64 %shifted.i.i.i101, %product.i.i.i100
  %hash.i.i.i103 = and i64 %xored.i.i.i102, %tbl_size.i.i98
  %offset_ptr.i.i104 = getelementptr i32, ptr %offset_tbl.i.i99, i64 %hash.i.i.i103
  %offset.i.i105 = load i32, ptr %offset_ptr.i.i104, align 4
  %eq.i108 = icmp eq i32 %.fca.3.extract39, %offset.i.i105
  call void @llvm.assume(i1 %eq.i108) #30
  %32 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract33, 0
  %33 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %.fca.1.extract35, 1
  %34 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %.fca.2.extract37, 2
  %35 = insertvalue { ptr, ptr, ptr, i32 } %34, i32 %.fca.3.extract39, 3
  %36 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
  %37 = load ptr, ptr %7, align 8
  %38 = call ptr %37(ptr %.fca.1.extract59)
  %39 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %40 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract33)
  %41 = sext i32 %.fca.3.extract39 to i64
  %42 = getelementptr ptr, ptr %.fca.0.extract33, i64 %41
  %43 = getelementptr i8, ptr %42, i64 8
  %44 = load ptr, ptr %43, align 8
  %45 = call ptr %44({ ptr, ptr, ptr, i32 } %35, ptr nonnull %4)
  %46 = call { ptr, ptr, ptr, i32 } %45({ ptr, ptr, ptr, i32 } %35, { ptr, ptr, ptr, i32 } %35, ptr nonnull %4)
  %47 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
  %48 = load ptr, ptr %7, align 8
  %49 = call ptr %48(ptr %.fca.1.extract59)
  %result.i = call noalias dereferenceable_or_null(80) ptr @bump_malloc_inner(i64 noundef 80, ptr nonnull @current_ptr) #29
  store ptr %49, ptr %result.i, align 8
  %50 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i)
  %51 = alloca { ptr, ptr, ptr, i32 }, align 8
  %52 = getelementptr inbounds i8, ptr %51, i64 8
  %53 = getelementptr inbounds i8, ptr %51, i64 24
  store ptr @InterleaveIterator2, ptr %51, align 8
  store ptr %result.i, ptr %52, align 8
  store i32 9, ptr %53, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %51)
  %55 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
  %56 = load ptr, ptr %8, align 8
  %57 = load ptr, ptr %56, align 8
  %58 = call { ptr, ptr, ptr, i32 } %57(ptr %.fca.1.extract59)
  %.fca.0.extract17 = extractvalue { ptr, ptr, ptr, i32 } %58, 0
  %.fca.1.extract19 = extractvalue { ptr, ptr, ptr, i32 } %58, 1
  %.fca.2.extract21 = extractvalue { ptr, ptr, ptr, i32 } %58, 2
  %.fca.3.extract23 = extractvalue { ptr, ptr, ptr, i32 } %58, 3
  %hash_coef_ptr.i.i124 = getelementptr i8, ptr %.fca.0.extract17, i64 8
  %tbl_size_ptr.i.i125 = getelementptr i8, ptr %.fca.0.extract17, i64 16
  %offset_tbl_ptr.i.i126 = getelementptr i8, ptr %.fca.0.extract17, i64 40
  %hash_coef.i.i127 = load i64, ptr %hash_coef_ptr.i.i124, align 4
  %tbl_size.i.i128 = load i64, ptr %tbl_size_ptr.i.i125, align 4
  %offset_tbl.i.i129 = load ptr, ptr %offset_tbl_ptr.i.i126, align 8
  %product.i.i.i130 = mul i64 %hash_coef.i.i127, 5693646204635713916
  %shifted.i.i.i131 = lshr i64 %product.i.i.i130, 32
  %xored.i.i.i132 = xor i64 %shifted.i.i.i131, %product.i.i.i130
  %hash.i.i.i133 = and i64 %xored.i.i.i132, %tbl_size.i.i128
  %offset_ptr.i.i134 = getelementptr i32, ptr %offset_tbl.i.i129, i64 %hash.i.i.i133
  %offset.i.i135 = load i32, ptr %offset_ptr.i.i134, align 4
  %eq.i138 = icmp eq i32 %.fca.3.extract23, %offset.i.i135
  call void @llvm.assume(i1 %eq.i138) #30
  %59 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract17, 0
  %60 = insertvalue { ptr, ptr, ptr, i32 } %59, ptr %.fca.1.extract19, 1
  %61 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %.fca.2.extract21, 2
  %62 = insertvalue { ptr, ptr, ptr, i32 } %61, i32 %.fca.3.extract23, 3
  %63 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
  %64 = load ptr, ptr %7, align 8
  %65 = call ptr %64(ptr %.fca.1.extract59)
  %66 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %67 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract17)
  %68 = sext i32 %.fca.3.extract23 to i64
  %69 = getelementptr ptr, ptr %.fca.0.extract17, i64 %68
  %70 = getelementptr i8, ptr %69, i64 8
  %71 = load ptr, ptr %70, align 8
  %72 = call ptr %71({ ptr, ptr, ptr, i32 } %62, ptr nonnull %4)
  %73 = call { ptr, ptr, ptr, i32 } %72({ ptr, ptr, ptr, i32 } %62, { ptr, ptr, ptr, i32 } %62, ptr nonnull %4)
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %73, 0
  %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %73, 1
  %.fca.2.extract13 = extractvalue { ptr, ptr, ptr, i32 } %73, 2
  %hash_coef_ptr.i.i140 = getelementptr i8, ptr %.fca.0.extract9, i64 8
  %tbl_size_ptr.i.i141 = getelementptr i8, ptr %.fca.0.extract9, i64 16
  %offset_tbl_ptr.i.i142 = getelementptr i8, ptr %.fca.0.extract9, i64 40
  %74 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
  %75 = load ptr, ptr %28, align 8
  %76 = load ptr, ptr %75, align 8
  %77 = call { ptr, ptr, ptr, i32 } %76(ptr %.fca.1.extract59)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %77, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %77, 1
  %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %77, 2
  %.fca.3.extract7 = extractvalue { ptr, ptr, ptr, i32 } %77, 3
  %hash_coef_ptr.i.i154 = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i155 = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i156 = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i157 = load i64, ptr %hash_coef_ptr.i.i154, align 4
  %tbl_size.i.i158 = load i64, ptr %tbl_size_ptr.i.i155, align 4
  %offset_tbl.i.i159 = load ptr, ptr %offset_tbl_ptr.i.i156, align 8
  %product.i.i.i160 = mul i64 %hash_coef.i.i157, 5693646204635713916
  %shifted.i.i.i161 = lshr i64 %product.i.i.i160, 32
  %xored.i.i.i162 = xor i64 %shifted.i.i.i161, %product.i.i.i160
  %hash.i.i.i163 = and i64 %xored.i.i.i162, %tbl_size.i.i158
  %offset_ptr.i.i164 = getelementptr i32, ptr %offset_tbl.i.i159, i64 %hash.i.i.i163
  %offset.i.i165 = load i32, ptr %offset_ptr.i.i164, align 4
  %eq.i168 = icmp eq i32 %.fca.3.extract7, %offset.i.i165
  call void @llvm.assume(i1 %eq.i168) #30
  %78 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %79 = insertvalue { ptr, ptr, ptr, i32 } %78, ptr %.fca.1.extract3, 1
  %80 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %.fca.2.extract5, 2
  %81 = insertvalue { ptr, ptr, ptr, i32 } %80, i32 %.fca.3.extract7, 3
  %82 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
  %83 = load ptr, ptr %7, align 8
  %84 = call ptr %83(ptr %.fca.1.extract59)
  %85 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %86 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract1)
  %87 = sext i32 %.fca.3.extract7 to i64
  %88 = getelementptr ptr, ptr %.fca.0.extract1, i64 %87
  %89 = getelementptr i8, ptr %88, i64 8
  %90 = load ptr, ptr %89, align 8
  %91 = call ptr %90({ ptr, ptr, ptr, i32 } %81, ptr nonnull %4)
  %92 = call { ptr, ptr, ptr, i32 } %91({ ptr, ptr, ptr, i32 } %81, { ptr, ptr, ptr, i32 } %81, ptr nonnull %4)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %92, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %92, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %92, 2
  %hash_coef_ptr.i.i170 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i171 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i172 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i173 = load i64, ptr %hash_coef_ptr.i.i170, align 4
  %tbl_size.i.i174 = load i64, ptr %tbl_size_ptr.i.i171, align 4
  %offset_tbl.i.i175 = load ptr, ptr %offset_tbl_ptr.i.i172, align 8
  %product.i.i.i176 = mul i64 %hash_coef.i.i173, 4189192806087951739
  %shifted.i.i.i177 = lshr i64 %product.i.i.i176, 32
  %xored.i.i.i178 = xor i64 %shifted.i.i.i177, %product.i.i.i176
  %hash.i.i.i179 = and i64 %xored.i.i.i178, %tbl_size.i.i174
  %offset_ptr.i.i180 = getelementptr i32, ptr %offset_tbl.i.i175, i64 %hash.i.i.i179
  %hash_coef.i.i187 = load i64, ptr %hash_coef_ptr.i.i140, align 4
  %tbl_size.i.i188 = load i64, ptr %tbl_size_ptr.i.i141, align 4
  %offset_tbl.i.i189 = load ptr, ptr %offset_tbl_ptr.i.i142, align 8
  %product.i.i.i190 = mul i64 %hash_coef.i.i187, 4189192806087951739
  %shifted.i.i.i191 = lshr i64 %product.i.i.i190, 32
  %xored.i.i.i192 = xor i64 %shifted.i.i.i191, %product.i.i.i190
  %hash.i.i.i193 = and i64 %xored.i.i.i192, %tbl_size.i.i188
  %offset_ptr.i.i194 = getelementptr i32, ptr %offset_tbl.i.i189, i64 %hash.i.i.i193
  %offset.i.i195 = load i32, ptr %offset_ptr.i.i194, align 4
  %93 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract9, 0
  %94 = insertvalue { ptr, ptr, ptr, i32 } %93, ptr %.fca.1.extract11, 1
  %95 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %.fca.2.extract13, 2
  %96 = insertvalue { ptr, ptr, ptr, i32 } %95, i32 %offset.i.i195, 3
  %offset.i.i209 = load i32, ptr %offset_ptr.i.i180, align 4
  %97 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %98 = insertvalue { ptr, ptr, ptr, i32 } %97, ptr %.fca.1.extract, 1
  %99 = insertvalue { ptr, ptr, ptr, i32 } %98, ptr %.fca.2.extract, 2
  %100 = insertvalue { ptr, ptr, ptr, i32 } %99, i32 %offset.i.i209, 3
  %101 = load ptr, ptr %51, align 8
  %102 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %101, 0
  %103 = load ptr, ptr %52, align 8
  %104 = insertvalue { ptr, ptr, ptr, i32 } %102, ptr %103, 1
  %105 = getelementptr inbounds i8, ptr %51, i64 16
  %106 = load ptr, ptr %105, align 8
  %107 = insertvalue { ptr, ptr, ptr, i32 } %104, ptr %106, 2
  %108 = load i32, ptr %53, align 8
  %109 = insertvalue { ptr, ptr, ptr, i32 } %107, i32 %108, 3
  %110 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
  %111 = load ptr, ptr %7, align 8
  %112 = call ptr %111(ptr %.fca.1.extract59)
  %result.i211 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  %113 = getelementptr i8, ptr %result.i211, i64 8
  store ptr %112, ptr %113, align 8
  %114 = getelementptr i8, ptr %result.i211, i64 16
  store ptr null, ptr %114, align 8
  %115 = call ptr @llvm.invariant.start.p0(i64 16, ptr %result.i211)
  store ptr @Iterator2, ptr %result.i211, align 8
  %result.i212 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  %116 = getelementptr i8, ptr %result.i212, i64 8
  store ptr %112, ptr %116, align 8
  %117 = getelementptr i8, ptr %result.i212, i64 16
  store ptr null, ptr %117, align 8
  %118 = call ptr @llvm.invariant.start.p0(i64 16, ptr %result.i212)
  store ptr @Iterator2, ptr %result.i212, align 8
  %119 = alloca [2 x ptr], align 8
  store ptr %result.i211, ptr %119, align 8
  %120 = getelementptr inbounds i8, ptr %119, i64 8
  store ptr %result.i212, ptr %120, align 8
  %121 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %119)
  %122 = call ptr @llvm.invariant.start.p0(i64 88, ptr %101)
  %123 = sext i32 %108 to i64
  %124 = getelementptr ptr, ptr %101, i64 %123
  %125 = getelementptr i8, ptr %124, i64 32
  %126 = load ptr, ptr %125, align 8
  %127 = alloca { ptr, ptr }, align 8
  store ptr %.fca.0.extract9, ptr %127, align 8
  %128 = getelementptr inbounds i8, ptr %127, i64 8
  store ptr %.fca.0.extract, ptr %128, align 8
  %129 = call ptr %126({ ptr, ptr, ptr, i32 } %109, ptr nonnull %127)
  call void %129({ ptr, ptr, ptr, i32 } %109, { ptr, ptr, ptr, i32 } %109, ptr nonnull %119, { ptr, ptr, ptr, i32 } %96, { ptr, ptr, ptr, i32 } %100)
  %130 = load ptr, ptr %51, align 8
  %131 = load ptr, ptr %52, align 8
  %132 = load ptr, ptr %105, align 8
  %hash_coef_ptr.i.i214 = getelementptr i8, ptr %130, i64 8
  %tbl_size_ptr.i.i215 = getelementptr i8, ptr %130, i64 16
  %offset_tbl_ptr.i.i216 = getelementptr i8, ptr %130, i64 40
  %hash_coef.i.i217 = load i64, ptr %hash_coef_ptr.i.i214, align 4
  %tbl_size.i.i218 = load i64, ptr %tbl_size_ptr.i.i215, align 4
  %offset_tbl.i.i219 = load ptr, ptr %offset_tbl_ptr.i.i216, align 8
  %product.i.i.i220 = mul i64 %hash_coef.i.i217, 4189192806087951739
  %shifted.i.i.i221 = lshr i64 %product.i.i.i220, 32
  %xored.i.i.i222 = xor i64 %shifted.i.i.i221, %product.i.i.i220
  %hash.i.i.i223 = and i64 %xored.i.i.i222, %tbl_size.i.i218
  %offset_ptr.i.i224 = getelementptr i32, ptr %offset_tbl.i.i219, i64 %hash.i.i.i223
  %offset.i.i225 = load i32, ptr %offset_ptr.i.i224, align 4
  %133 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %130, 0
  %134 = insertvalue { ptr, ptr, ptr, i32 } %133, ptr %131, 1
  %135 = insertvalue { ptr, ptr, ptr, i32 } %134, ptr %132, 2
  %136 = insertvalue { ptr, ptr, ptr, i32 } %135, i32 %offset.i.i225, 3
  ret { ptr, ptr, ptr, i32 } %136
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_InterleaveIterator2(ptr nocapture readnone %0) #0 {
  ret { i64, i64 } { i64 80, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @InterleaveIterator2_field_InterleaveIterator2_0(ptr nocapture readonly %0) #3 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @InterleaveIterator2_B_init_firstIterator2T_secondIterator2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 120
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @InterleaveIterator2_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 128
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @InterleaveIterator2_init_firstIterator2T_secondIterator2T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 6709847746581360093
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %hash_coef_ptr.i.i18 = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i19 = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i20 = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i21 = load i64, ptr %hash_coef_ptr.i.i18, align 4
  %tbl_size.i.i22 = load i64, ptr %tbl_size_ptr.i.i19, align 4
  %offset_tbl.i.i23 = load ptr, ptr %offset_tbl_ptr.i.i20, align 8
  %product.i.i.i24 = mul i64 %hash_coef.i.i21, 4189192806087951739
  %shifted.i.i.i25 = lshr i64 %product.i.i.i24, 32
  %xored.i.i.i26 = xor i64 %shifted.i.i.i25, %product.i.i.i24
  %hash.i.i.i27 = and i64 %xored.i.i.i26, %tbl_size.i.i22
  %offset_ptr.i.i28 = getelementptr i32, ptr %offset_tbl.i.i23, i64 %hash.i.i.i27
  %offset.i.i43 = load i32, ptr %offset_ptr.i.i28, align 4
  %6 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr %.fca.0.extract9)
  %7 = sext i32 %offset.i.i to i64
  %8 = getelementptr ptr, ptr %.fca.0.extract9, i64 %7
  %9 = getelementptr i8, ptr %8, i64 8
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr i8, ptr %10, i64 8
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.1.extract3, 1
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, ptr %.fca.2.extract5, 2
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, i32 %offset.i.i43, 3
  tail call void %12(ptr %.fca.1.extract11, { ptr, ptr, ptr, i32 } %16)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %hash_coef_ptr.i.i46 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i47 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i48 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i49 = load i64, ptr %hash_coef_ptr.i.i46, align 4
  %tbl_size.i.i50 = load i64, ptr %tbl_size_ptr.i.i47, align 4
  %offset_tbl.i.i51 = load ptr, ptr %offset_tbl_ptr.i.i48, align 8
  %product.i.i.i52 = mul i64 %hash_coef.i.i49, 4189192806087951739
  %shifted.i.i.i53 = lshr i64 %product.i.i.i52, 32
  %xored.i.i.i54 = xor i64 %shifted.i.i.i53, %product.i.i.i52
  %hash.i.i.i55 = and i64 %xored.i.i.i54, %tbl_size.i.i50
  %offset_ptr.i.i56 = getelementptr i32, ptr %offset_tbl.i.i51, i64 %hash.i.i.i55
  %offset.i.i71 = load i32, ptr %offset_ptr.i.i56, align 4
  %17 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr %.fca.0.extract9)
  %18 = getelementptr i8, ptr %8, i64 16
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr i8, ptr %19, i64 8
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %23 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %.fca.1.extract, 1
  %24 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %.fca.2.extract, 2
  %25 = insertvalue { ptr, ptr, ptr, i32 } %24, i32 %offset.i.i71, 3
  tail call void %21(ptr %.fca.1.extract11, { ptr, ptr, ptr, i32 } %25)
  %26 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr %.fca.0.extract9)
  %27 = getelementptr i8, ptr %8, i64 24
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr i8, ptr %28, i64 8
  %30 = load ptr, ptr %29, align 8
  tail call void %30(ptr %.fca.1.extract11, i1 true)
  ret void
}

define { ptr, i160 } @InterleaveIterator2_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 6709847746581360093
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %5 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr %.fca.0.extract3)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract3, i64 %6
  %8 = getelementptr i8, ptr %7, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = load ptr, ptr %9, align 8
  %11 = tail call i1 %10(ptr %.fca.1.extract4)
  %12 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr nonnull %.fca.0.extract3)
  %13 = load ptr, ptr %8, align 8
  %14 = getelementptr i8, ptr %13, i64 8
  %15 = load ptr, ptr %14, align 8
  %not. = xor i1 %11, true
  %.104 = select i1 %11, i64 8, i64 16
  tail call void %15(ptr %.fca.1.extract4, i1 %not.)
  %16 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr nonnull %.fca.0.extract3)
  %17 = getelementptr i8, ptr %7, i64 %.104
  %18 = load ptr, ptr %17, align 8
  %19 = load ptr, ptr %18, align 8
  %20 = tail call { ptr, ptr, ptr, i32 } %19(ptr %.fca.1.extract4)
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %.fca.2.extract13 = extractvalue { ptr, ptr, ptr, i32 } %20, 2
  %.fca.3.extract15 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %hash_coef_ptr.i.i47 = getelementptr i8, ptr %.fca.0.extract9, i64 8
  %tbl_size_ptr.i.i48 = getelementptr i8, ptr %.fca.0.extract9, i64 16
  %offset_tbl_ptr.i.i49 = getelementptr i8, ptr %.fca.0.extract9, i64 40
  %hash_coef.i.i50 = load i64, ptr %hash_coef_ptr.i.i47, align 4
  %tbl_size.i.i51 = load i64, ptr %tbl_size_ptr.i.i48, align 4
  %offset_tbl.i.i52 = load ptr, ptr %offset_tbl_ptr.i.i49, align 8
  %product.i.i.i53 = mul i64 %hash_coef.i.i50, 4189192806087951739
  %shifted.i.i.i54 = lshr i64 %product.i.i.i53, 32
  %xored.i.i.i55 = xor i64 %shifted.i.i.i54, %product.i.i.i53
  %hash.i.i.i56 = and i64 %xored.i.i.i55, %tbl_size.i.i51
  %offset_ptr.i.i57 = getelementptr i32, ptr %offset_tbl.i.i52, i64 %hash.i.i.i56
  %offset.i.i58 = load i32, ptr %offset_ptr.i.i57, align 4
  %eq.i61 = icmp eq i32 %.fca.3.extract15, %offset.i.i58
  tail call void @llvm.assume(i1 %eq.i61) #30
  %21 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract9, 0
  %22 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %.fca.1.extract11, 1
  %23 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %.fca.2.extract13, 2
  %24 = insertvalue { ptr, ptr, ptr, i32 } %23, i32 %.fca.3.extract15, 3
  %25 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr nonnull %.fca.0.extract3)
  %26 = load ptr, ptr %7, align 8
  %27 = tail call ptr %26(ptr %.fca.1.extract4)
  %28 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %29 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %.fca.0.extract9)
  %30 = sext i32 %.fca.3.extract15 to i64
  %31 = getelementptr ptr, ptr %.fca.0.extract9, i64 %30
  %32 = getelementptr i8, ptr %31, i64 8
  %33 = load ptr, ptr %32, align 8
  %34 = call ptr %33({ ptr, ptr, ptr, i32 } %24, ptr nonnull %4)
  %35 = call { ptr, i160 } %34({ ptr, ptr, ptr, i32 } %24, { ptr, ptr, ptr, i32 } %24, ptr nonnull %4)
  ret { ptr, i160 } %35
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i1 @InterleaveIterator2_getter_on_first(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 72
  %3 = load i1, ptr %2, align 1
  ret i1 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @InterleaveIterator2_setter_on_first(ptr nocapture writeonly %0, i1 %1) #6 {
  %3 = getelementptr i8, ptr %0, i64 72
  store i1 %1, ptr %3, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @InterleaveIterator2_getter_second(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 48
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 56
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 64
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @InterleaveIterator2_setter_second(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #6 {
  %3 = getelementptr i8, ptr %0, i64 40
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 48
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 56
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 64
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @InterleaveIterator2_getter_first(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @InterleaveIterator2_setter_first(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #6 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 32
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @InterleaveIterable2_getter_second(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 48
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 56
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 64
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @InterleaveIterable2_setter_second(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #6 {
  %3 = getelementptr i8, ptr %0, i64 40
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 48
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 56
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 64
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @InterleaveIterable2_getter_first(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @InterleaveIterable2_setter_first(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #6 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 32
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_ChainIterable2(ptr nocapture readnone %0) #0 {
  ret { i64, i64 } { i64 72, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ChainIterable2_field_ChainIterable2_0(ptr nocapture readonly %0) #3 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ChainIterable2_B_init_firstIterable2T_secondIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 192
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ChainIterable2_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 200
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ChainIterable2_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 208
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ChainIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 216
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ChainIterable2_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 224
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ChainIterable2_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 232
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ChainIterable2_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 240
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ChainIterable2_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 248
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ChainIterable2_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 256
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ChainIterable2_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 264
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ChainIterable2_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 272
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ChainIterable2_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 280
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @ChainIterable2_init_firstIterable2T_secondIterable2T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -5233298072945030060
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %hash_coef_ptr.i.i18 = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i19 = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i20 = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i21 = load i64, ptr %hash_coef_ptr.i.i18, align 4
  %tbl_size.i.i22 = load i64, ptr %tbl_size_ptr.i.i19, align 4
  %offset_tbl.i.i23 = load ptr, ptr %offset_tbl_ptr.i.i20, align 8
  %product.i.i.i24 = mul i64 %hash_coef.i.i21, 5693646204635713916
  %shifted.i.i.i25 = lshr i64 %product.i.i.i24, 32
  %xored.i.i.i26 = xor i64 %shifted.i.i.i25, %product.i.i.i24
  %hash.i.i.i27 = and i64 %xored.i.i.i26, %tbl_size.i.i22
  %offset_ptr.i.i28 = getelementptr i32, ptr %offset_tbl.i.i23, i64 %hash.i.i.i27
  %offset.i.i43 = load i32, ptr %offset_ptr.i.i28, align 4
  %6 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract9)
  %7 = sext i32 %offset.i.i to i64
  %8 = getelementptr ptr, ptr %.fca.0.extract9, i64 %7
  %9 = getelementptr i8, ptr %8, i64 8
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr i8, ptr %10, i64 8
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.1.extract3, 1
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, ptr %.fca.2.extract5, 2
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, i32 %offset.i.i43, 3
  tail call void %12(ptr %.fca.1.extract11, { ptr, ptr, ptr, i32 } %16)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %hash_coef_ptr.i.i46 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i47 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i48 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i49 = load i64, ptr %hash_coef_ptr.i.i46, align 4
  %tbl_size.i.i50 = load i64, ptr %tbl_size_ptr.i.i47, align 4
  %offset_tbl.i.i51 = load ptr, ptr %offset_tbl_ptr.i.i48, align 8
  %product.i.i.i52 = mul i64 %hash_coef.i.i49, 5693646204635713916
  %shifted.i.i.i53 = lshr i64 %product.i.i.i52, 32
  %xored.i.i.i54 = xor i64 %shifted.i.i.i53, %product.i.i.i52
  %hash.i.i.i55 = and i64 %xored.i.i.i54, %tbl_size.i.i50
  %offset_ptr.i.i56 = getelementptr i32, ptr %offset_tbl.i.i51, i64 %hash.i.i.i55
  %offset.i.i71 = load i32, ptr %offset_ptr.i.i56, align 4
  %17 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract9)
  %18 = getelementptr i8, ptr %8, i64 16
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr i8, ptr %19, i64 8
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %23 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %.fca.1.extract, 1
  %24 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %.fca.2.extract, 2
  %25 = insertvalue { ptr, ptr, ptr, i32 } %24, i32 %offset.i.i71, 3
  tail call void %21(ptr %.fca.1.extract11, { ptr, ptr, ptr, i32 } %25)
  ret void
}

define { ptr, ptr, ptr, i32 } @ChainIterable2_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract57 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract59 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract57, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract57, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract57, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -5233298072945030060
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %5 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract57, i64 %6
  %8 = getelementptr i8, ptr %7, i64 8
  %9 = load ptr, ptr %8, align 8
  %10 = load ptr, ptr %9, align 8
  %11 = tail call { ptr, ptr, ptr, i32 } %10(ptr %.fca.1.extract59)
  %.fca.0.extract49 = extractvalue { ptr, ptr, ptr, i32 } %11, 0
  %.fca.1.extract51 = extractvalue { ptr, ptr, ptr, i32 } %11, 1
  %.fca.2.extract53 = extractvalue { ptr, ptr, ptr, i32 } %11, 2
  %.fca.3.extract55 = extractvalue { ptr, ptr, ptr, i32 } %11, 3
  %hash_coef_ptr.i.i66 = getelementptr i8, ptr %.fca.0.extract49, i64 8
  %tbl_size_ptr.i.i67 = getelementptr i8, ptr %.fca.0.extract49, i64 16
  %offset_tbl_ptr.i.i68 = getelementptr i8, ptr %.fca.0.extract49, i64 40
  %hash_coef.i.i69 = load i64, ptr %hash_coef_ptr.i.i66, align 4
  %tbl_size.i.i70 = load i64, ptr %tbl_size_ptr.i.i67, align 4
  %offset_tbl.i.i71 = load ptr, ptr %offset_tbl_ptr.i.i68, align 8
  %product.i.i.i72 = mul i64 %hash_coef.i.i69, 5693646204635713916
  %shifted.i.i.i73 = lshr i64 %product.i.i.i72, 32
  %xored.i.i.i74 = xor i64 %shifted.i.i.i73, %product.i.i.i72
  %hash.i.i.i75 = and i64 %xored.i.i.i74, %tbl_size.i.i70
  %offset_ptr.i.i76 = getelementptr i32, ptr %offset_tbl.i.i71, i64 %hash.i.i.i75
  %offset.i.i77 = load i32, ptr %offset_ptr.i.i76, align 4
  %eq.i = icmp eq i32 %.fca.3.extract55, %offset.i.i77
  tail call void @llvm.assume(i1 %eq.i) #30
  %12 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract49, 0
  %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.1.extract51, 1
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.2.extract53, 2
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, i32 %.fca.3.extract55, 3
  %16 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
  %17 = load ptr, ptr %7, align 8
  %18 = tail call ptr %17(ptr %.fca.1.extract59)
  %19 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %20 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract49)
  %21 = sext i32 %.fca.3.extract55 to i64
  %22 = getelementptr ptr, ptr %.fca.0.extract49, i64 %21
  %23 = getelementptr i8, ptr %22, i64 8
  %24 = load ptr, ptr %23, align 8
  %25 = call ptr %24({ ptr, ptr, ptr, i32 } %15, ptr nonnull %4)
  %26 = call { ptr, ptr, ptr, i32 } %25({ ptr, ptr, ptr, i32 } %15, { ptr, ptr, ptr, i32 } %15, ptr nonnull %4)
  %27 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
  %28 = getelementptr i8, ptr %7, i64 16
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %29, align 8
  %31 = call { ptr, ptr, ptr, i32 } %30(ptr %.fca.1.extract59)
  %.fca.0.extract33 = extractvalue { ptr, ptr, ptr, i32 } %31, 0
  %.fca.1.extract35 = extractvalue { ptr, ptr, ptr, i32 } %31, 1
  %.fca.2.extract37 = extractvalue { ptr, ptr, ptr, i32 } %31, 2
  %.fca.3.extract39 = extractvalue { ptr, ptr, ptr, i32 } %31, 3
  %hash_coef_ptr.i.i94 = getelementptr i8, ptr %.fca.0.extract33, i64 8
  %tbl_size_ptr.i.i95 = getelementptr i8, ptr %.fca.0.extract33, i64 16
  %offset_tbl_ptr.i.i96 = getelementptr i8, ptr %.fca.0.extract33, i64 40
  %hash_coef.i.i97 = load i64, ptr %hash_coef_ptr.i.i94, align 4
  %tbl_size.i.i98 = load i64, ptr %tbl_size_ptr.i.i95, align 4
  %offset_tbl.i.i99 = load ptr, ptr %offset_tbl_ptr.i.i96, align 8
  %product.i.i.i100 = mul i64 %hash_coef.i.i97, 5693646204635713916
  %shifted.i.i.i101 = lshr i64 %product.i.i.i100, 32
  %xored.i.i.i102 = xor i64 %shifted.i.i.i101, %product.i.i.i100
  %hash.i.i.i103 = and i64 %xored.i.i.i102, %tbl_size.i.i98
  %offset_ptr.i.i104 = getelementptr i32, ptr %offset_tbl.i.i99, i64 %hash.i.i.i103
  %offset.i.i105 = load i32, ptr %offset_ptr.i.i104, align 4
  %eq.i108 = icmp eq i32 %.fca.3.extract39, %offset.i.i105
  call void @llvm.assume(i1 %eq.i108) #30
  %32 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract33, 0
  %33 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %.fca.1.extract35, 1
  %34 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %.fca.2.extract37, 2
  %35 = insertvalue { ptr, ptr, ptr, i32 } %34, i32 %.fca.3.extract39, 3
  %36 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
  %37 = load ptr, ptr %7, align 8
  %38 = call ptr %37(ptr %.fca.1.extract59)
  %39 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %40 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract33)
  %41 = sext i32 %.fca.3.extract39 to i64
  %42 = getelementptr ptr, ptr %.fca.0.extract33, i64 %41
  %43 = getelementptr i8, ptr %42, i64 8
  %44 = load ptr, ptr %43, align 8
  %45 = call ptr %44({ ptr, ptr, ptr, i32 } %35, ptr nonnull %4)
  %46 = call { ptr, ptr, ptr, i32 } %45({ ptr, ptr, ptr, i32 } %35, { ptr, ptr, ptr, i32 } %35, ptr nonnull %4)
  %47 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
  %48 = load ptr, ptr %7, align 8
  %49 = call ptr %48(ptr %.fca.1.extract59)
  %result.i = call noalias dereferenceable_or_null(80) ptr @bump_malloc_inner(i64 noundef 80, ptr nonnull @current_ptr) #29
  store ptr %49, ptr %result.i, align 8
  %50 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i)
  %51 = alloca { ptr, ptr, ptr, i32 }, align 8
  %52 = getelementptr inbounds i8, ptr %51, i64 8
  %53 = getelementptr inbounds i8, ptr %51, i64 24
  store ptr @ChainIterator2, ptr %51, align 8
  store ptr %result.i, ptr %52, align 8
  store i32 9, ptr %53, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %51)
  %55 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
  %56 = load ptr, ptr %8, align 8
  %57 = load ptr, ptr %56, align 8
  %58 = call { ptr, ptr, ptr, i32 } %57(ptr %.fca.1.extract59)
  %.fca.0.extract17 = extractvalue { ptr, ptr, ptr, i32 } %58, 0
  %.fca.1.extract19 = extractvalue { ptr, ptr, ptr, i32 } %58, 1
  %.fca.2.extract21 = extractvalue { ptr, ptr, ptr, i32 } %58, 2
  %.fca.3.extract23 = extractvalue { ptr, ptr, ptr, i32 } %58, 3
  %hash_coef_ptr.i.i124 = getelementptr i8, ptr %.fca.0.extract17, i64 8
  %tbl_size_ptr.i.i125 = getelementptr i8, ptr %.fca.0.extract17, i64 16
  %offset_tbl_ptr.i.i126 = getelementptr i8, ptr %.fca.0.extract17, i64 40
  %hash_coef.i.i127 = load i64, ptr %hash_coef_ptr.i.i124, align 4
  %tbl_size.i.i128 = load i64, ptr %tbl_size_ptr.i.i125, align 4
  %offset_tbl.i.i129 = load ptr, ptr %offset_tbl_ptr.i.i126, align 8
  %product.i.i.i130 = mul i64 %hash_coef.i.i127, 5693646204635713916
  %shifted.i.i.i131 = lshr i64 %product.i.i.i130, 32
  %xored.i.i.i132 = xor i64 %shifted.i.i.i131, %product.i.i.i130
  %hash.i.i.i133 = and i64 %xored.i.i.i132, %tbl_size.i.i128
  %offset_ptr.i.i134 = getelementptr i32, ptr %offset_tbl.i.i129, i64 %hash.i.i.i133
  %offset.i.i135 = load i32, ptr %offset_ptr.i.i134, align 4
  %eq.i138 = icmp eq i32 %.fca.3.extract23, %offset.i.i135
  call void @llvm.assume(i1 %eq.i138) #30
  %59 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract17, 0
  %60 = insertvalue { ptr, ptr, ptr, i32 } %59, ptr %.fca.1.extract19, 1
  %61 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %.fca.2.extract21, 2
  %62 = insertvalue { ptr, ptr, ptr, i32 } %61, i32 %.fca.3.extract23, 3
  %63 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
  %64 = load ptr, ptr %7, align 8
  %65 = call ptr %64(ptr %.fca.1.extract59)
  %66 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %67 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract17)
  %68 = sext i32 %.fca.3.extract23 to i64
  %69 = getelementptr ptr, ptr %.fca.0.extract17, i64 %68
  %70 = getelementptr i8, ptr %69, i64 8
  %71 = load ptr, ptr %70, align 8
  %72 = call ptr %71({ ptr, ptr, ptr, i32 } %62, ptr nonnull %4)
  %73 = call { ptr, ptr, ptr, i32 } %72({ ptr, ptr, ptr, i32 } %62, { ptr, ptr, ptr, i32 } %62, ptr nonnull %4)
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %73, 0
  %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %73, 1
  %.fca.2.extract13 = extractvalue { ptr, ptr, ptr, i32 } %73, 2
  %hash_coef_ptr.i.i140 = getelementptr i8, ptr %.fca.0.extract9, i64 8
  %tbl_size_ptr.i.i141 = getelementptr i8, ptr %.fca.0.extract9, i64 16
  %offset_tbl_ptr.i.i142 = getelementptr i8, ptr %.fca.0.extract9, i64 40
  %74 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
  %75 = load ptr, ptr %28, align 8
  %76 = load ptr, ptr %75, align 8
  %77 = call { ptr, ptr, ptr, i32 } %76(ptr %.fca.1.extract59)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %77, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %77, 1
  %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %77, 2
  %.fca.3.extract7 = extractvalue { ptr, ptr, ptr, i32 } %77, 3
  %hash_coef_ptr.i.i154 = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i155 = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i156 = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i157 = load i64, ptr %hash_coef_ptr.i.i154, align 4
  %tbl_size.i.i158 = load i64, ptr %tbl_size_ptr.i.i155, align 4
  %offset_tbl.i.i159 = load ptr, ptr %offset_tbl_ptr.i.i156, align 8
  %product.i.i.i160 = mul i64 %hash_coef.i.i157, 5693646204635713916
  %shifted.i.i.i161 = lshr i64 %product.i.i.i160, 32
  %xored.i.i.i162 = xor i64 %shifted.i.i.i161, %product.i.i.i160
  %hash.i.i.i163 = and i64 %xored.i.i.i162, %tbl_size.i.i158
  %offset_ptr.i.i164 = getelementptr i32, ptr %offset_tbl.i.i159, i64 %hash.i.i.i163
  %offset.i.i165 = load i32, ptr %offset_ptr.i.i164, align 4
  %eq.i168 = icmp eq i32 %.fca.3.extract7, %offset.i.i165
  call void @llvm.assume(i1 %eq.i168) #30
  %78 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %79 = insertvalue { ptr, ptr, ptr, i32 } %78, ptr %.fca.1.extract3, 1
  %80 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %.fca.2.extract5, 2
  %81 = insertvalue { ptr, ptr, ptr, i32 } %80, i32 %.fca.3.extract7, 3
  %82 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
  %83 = load ptr, ptr %7, align 8
  %84 = call ptr %83(ptr %.fca.1.extract59)
  %85 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %86 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract1)
  %87 = sext i32 %.fca.3.extract7 to i64
  %88 = getelementptr ptr, ptr %.fca.0.extract1, i64 %87
  %89 = getelementptr i8, ptr %88, i64 8
  %90 = load ptr, ptr %89, align 8
  %91 = call ptr %90({ ptr, ptr, ptr, i32 } %81, ptr nonnull %4)
  %92 = call { ptr, ptr, ptr, i32 } %91({ ptr, ptr, ptr, i32 } %81, { ptr, ptr, ptr, i32 } %81, ptr nonnull %4)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %92, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %92, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %92, 2
  %hash_coef_ptr.i.i170 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i171 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i172 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i173 = load i64, ptr %hash_coef_ptr.i.i170, align 4
  %tbl_size.i.i174 = load i64, ptr %tbl_size_ptr.i.i171, align 4
  %offset_tbl.i.i175 = load ptr, ptr %offset_tbl_ptr.i.i172, align 8
  %product.i.i.i176 = mul i64 %hash_coef.i.i173, 4189192806087951739
  %shifted.i.i.i177 = lshr i64 %product.i.i.i176, 32
  %xored.i.i.i178 = xor i64 %shifted.i.i.i177, %product.i.i.i176
  %hash.i.i.i179 = and i64 %xored.i.i.i178, %tbl_size.i.i174
  %offset_ptr.i.i180 = getelementptr i32, ptr %offset_tbl.i.i175, i64 %hash.i.i.i179
  %hash_coef.i.i187 = load i64, ptr %hash_coef_ptr.i.i140, align 4
  %tbl_size.i.i188 = load i64, ptr %tbl_size_ptr.i.i141, align 4
  %offset_tbl.i.i189 = load ptr, ptr %offset_tbl_ptr.i.i142, align 8
  %product.i.i.i190 = mul i64 %hash_coef.i.i187, 4189192806087951739
  %shifted.i.i.i191 = lshr i64 %product.i.i.i190, 32
  %xored.i.i.i192 = xor i64 %shifted.i.i.i191, %product.i.i.i190
  %hash.i.i.i193 = and i64 %xored.i.i.i192, %tbl_size.i.i188
  %offset_ptr.i.i194 = getelementptr i32, ptr %offset_tbl.i.i189, i64 %hash.i.i.i193
  %offset.i.i195 = load i32, ptr %offset_ptr.i.i194, align 4
  %93 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract9, 0
  %94 = insertvalue { ptr, ptr, ptr, i32 } %93, ptr %.fca.1.extract11, 1
  %95 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %.fca.2.extract13, 2
  %96 = insertvalue { ptr, ptr, ptr, i32 } %95, i32 %offset.i.i195, 3
  %offset.i.i209 = load i32, ptr %offset_ptr.i.i180, align 4
  %97 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %98 = insertvalue { ptr, ptr, ptr, i32 } %97, ptr %.fca.1.extract, 1
  %99 = insertvalue { ptr, ptr, ptr, i32 } %98, ptr %.fca.2.extract, 2
  %100 = insertvalue { ptr, ptr, ptr, i32 } %99, i32 %offset.i.i209, 3
  %101 = load ptr, ptr %51, align 8
  %102 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %101, 0
  %103 = load ptr, ptr %52, align 8
  %104 = insertvalue { ptr, ptr, ptr, i32 } %102, ptr %103, 1
  %105 = getelementptr inbounds i8, ptr %51, i64 16
  %106 = load ptr, ptr %105, align 8
  %107 = insertvalue { ptr, ptr, ptr, i32 } %104, ptr %106, 2
  %108 = load i32, ptr %53, align 8
  %109 = insertvalue { ptr, ptr, ptr, i32 } %107, i32 %108, 3
  %110 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
  %111 = load ptr, ptr %7, align 8
  %112 = call ptr %111(ptr %.fca.1.extract59)
  %result.i211 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  %113 = getelementptr i8, ptr %result.i211, i64 8
  store ptr %112, ptr %113, align 8
  %114 = getelementptr i8, ptr %result.i211, i64 16
  store ptr null, ptr %114, align 8
  %115 = call ptr @llvm.invariant.start.p0(i64 16, ptr %result.i211)
  store ptr @Iterator2, ptr %result.i211, align 8
  %result.i212 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  %116 = getelementptr i8, ptr %result.i212, i64 8
  store ptr %112, ptr %116, align 8
  %117 = getelementptr i8, ptr %result.i212, i64 16
  store ptr null, ptr %117, align 8
  %118 = call ptr @llvm.invariant.start.p0(i64 16, ptr %result.i212)
  store ptr @Iterator2, ptr %result.i212, align 8
  %119 = alloca [2 x ptr], align 8
  store ptr %result.i211, ptr %119, align 8
  %120 = getelementptr inbounds i8, ptr %119, i64 8
  store ptr %result.i212, ptr %120, align 8
  %121 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %119)
  %122 = call ptr @llvm.invariant.start.p0(i64 88, ptr %101)
  %123 = sext i32 %108 to i64
  %124 = getelementptr ptr, ptr %101, i64 %123
  %125 = getelementptr i8, ptr %124, i64 32
  %126 = load ptr, ptr %125, align 8
  %127 = alloca { ptr, ptr }, align 8
  store ptr %.fca.0.extract9, ptr %127, align 8
  %128 = getelementptr inbounds i8, ptr %127, i64 8
  store ptr %.fca.0.extract, ptr %128, align 8
  %129 = call ptr %126({ ptr, ptr, ptr, i32 } %109, ptr nonnull %127)
  call void %129({ ptr, ptr, ptr, i32 } %109, { ptr, ptr, ptr, i32 } %109, ptr nonnull %119, { ptr, ptr, ptr, i32 } %96, { ptr, ptr, ptr, i32 } %100)
  %130 = load ptr, ptr %51, align 8
  %131 = load ptr, ptr %52, align 8
  %132 = load ptr, ptr %105, align 8
  %hash_coef_ptr.i.i214 = getelementptr i8, ptr %130, i64 8
  %tbl_size_ptr.i.i215 = getelementptr i8, ptr %130, i64 16
  %offset_tbl_ptr.i.i216 = getelementptr i8, ptr %130, i64 40
  %hash_coef.i.i217 = load i64, ptr %hash_coef_ptr.i.i214, align 4
  %tbl_size.i.i218 = load i64, ptr %tbl_size_ptr.i.i215, align 4
  %offset_tbl.i.i219 = load ptr, ptr %offset_tbl_ptr.i.i216, align 8
  %product.i.i.i220 = mul i64 %hash_coef.i.i217, 4189192806087951739
  %shifted.i.i.i221 = lshr i64 %product.i.i.i220, 32
  %xored.i.i.i222 = xor i64 %shifted.i.i.i221, %product.i.i.i220
  %hash.i.i.i223 = and i64 %xored.i.i.i222, %tbl_size.i.i218
  %offset_ptr.i.i224 = getelementptr i32, ptr %offset_tbl.i.i219, i64 %hash.i.i.i223
  %offset.i.i225 = load i32, ptr %offset_ptr.i.i224, align 4
  %133 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %130, 0
  %134 = insertvalue { ptr, ptr, ptr, i32 } %133, ptr %131, 1
  %135 = insertvalue { ptr, ptr, ptr, i32 } %134, ptr %132, 2
  %136 = insertvalue { ptr, ptr, ptr, i32 } %135, i32 %offset.i.i225, 3
  ret { ptr, ptr, ptr, i32 } %136
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_ChainIterator2(ptr nocapture readnone %0) #0 {
  ret { i64, i64 } { i64 80, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ChainIterator2_field_ChainIterator2_0(ptr nocapture readonly %0) #3 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ChainIterator2_B_init_firstIterator2T_secondIterator2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 120
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ChainIterator2_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 128
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @ChainIterator2_init_firstIterator2T_secondIterator2T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -228267985060461774
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %hash_coef_ptr.i.i18 = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i19 = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i20 = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i21 = load i64, ptr %hash_coef_ptr.i.i18, align 4
  %tbl_size.i.i22 = load i64, ptr %tbl_size_ptr.i.i19, align 4
  %offset_tbl.i.i23 = load ptr, ptr %offset_tbl_ptr.i.i20, align 8
  %product.i.i.i24 = mul i64 %hash_coef.i.i21, 4189192806087951739
  %shifted.i.i.i25 = lshr i64 %product.i.i.i24, 32
  %xored.i.i.i26 = xor i64 %shifted.i.i.i25, %product.i.i.i24
  %hash.i.i.i27 = and i64 %xored.i.i.i26, %tbl_size.i.i22
  %offset_ptr.i.i28 = getelementptr i32, ptr %offset_tbl.i.i23, i64 %hash.i.i.i27
  %offset.i.i43 = load i32, ptr %offset_ptr.i.i28, align 4
  %6 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr %.fca.0.extract9)
  %7 = sext i32 %offset.i.i to i64
  %8 = getelementptr ptr, ptr %.fca.0.extract9, i64 %7
  %9 = getelementptr i8, ptr %8, i64 8
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr i8, ptr %10, i64 8
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.1.extract3, 1
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, ptr %.fca.2.extract5, 2
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, i32 %offset.i.i43, 3
  tail call void %12(ptr %.fca.1.extract11, { ptr, ptr, ptr, i32 } %16)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %hash_coef_ptr.i.i46 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i47 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i48 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i49 = load i64, ptr %hash_coef_ptr.i.i46, align 4
  %tbl_size.i.i50 = load i64, ptr %tbl_size_ptr.i.i47, align 4
  %offset_tbl.i.i51 = load ptr, ptr %offset_tbl_ptr.i.i48, align 8
  %product.i.i.i52 = mul i64 %hash_coef.i.i49, 4189192806087951739
  %shifted.i.i.i53 = lshr i64 %product.i.i.i52, 32
  %xored.i.i.i54 = xor i64 %shifted.i.i.i53, %product.i.i.i52
  %hash.i.i.i55 = and i64 %xored.i.i.i54, %tbl_size.i.i50
  %offset_ptr.i.i56 = getelementptr i32, ptr %offset_tbl.i.i51, i64 %hash.i.i.i55
  %offset.i.i71 = load i32, ptr %offset_ptr.i.i56, align 4
  %17 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr %.fca.0.extract9)
  %18 = getelementptr i8, ptr %8, i64 16
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr i8, ptr %19, i64 8
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %23 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %.fca.1.extract, 1
  %24 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %.fca.2.extract, 2
  %25 = insertvalue { ptr, ptr, ptr, i32 } %24, i32 %offset.i.i71, 3
  tail call void %21(ptr %.fca.1.extract11, { ptr, ptr, ptr, i32 } %25)
  %26 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr %.fca.0.extract9)
  %27 = getelementptr i8, ptr %8, i64 24
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr i8, ptr %28, i64 8
  %30 = load ptr, ptr %29, align 8
  tail call void %30(ptr %.fca.1.extract11, i1 true)
  ret void
}

define { ptr, i160 } @ChainIterator2_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -228267985060461774
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %5 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr %.fca.0.extract3)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract3, i64 %6
  %8 = getelementptr i8, ptr %7, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = load ptr, ptr %9, align 8
  %11 = tail call i1 %10(ptr %.fca.1.extract4)
  %12 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr nonnull %.fca.0.extract3)
  br i1 %11, label %33, label %13

13:                                               ; preds = %3
  %14 = getelementptr i8, ptr %7, i64 16
  %15 = load ptr, ptr %14, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = tail call { ptr, ptr, ptr, i32 } %16(ptr %.fca.1.extract4)
  %.fca.0.extract23 = extractvalue { ptr, ptr, ptr, i32 } %17, 0
  %.fca.1.extract25 = extractvalue { ptr, ptr, ptr, i32 } %17, 1
  %.fca.2.extract27 = extractvalue { ptr, ptr, ptr, i32 } %17, 2
  %.fca.3.extract29 = extractvalue { ptr, ptr, ptr, i32 } %17, 3
  %hash_coef_ptr.i.i32 = getelementptr i8, ptr %.fca.0.extract23, i64 8
  %tbl_size_ptr.i.i33 = getelementptr i8, ptr %.fca.0.extract23, i64 16
  %offset_tbl_ptr.i.i34 = getelementptr i8, ptr %.fca.0.extract23, i64 40
  %hash_coef.i.i35 = load i64, ptr %hash_coef_ptr.i.i32, align 4
  %tbl_size.i.i36 = load i64, ptr %tbl_size_ptr.i.i33, align 4
  %offset_tbl.i.i37 = load ptr, ptr %offset_tbl_ptr.i.i34, align 8
  %product.i.i.i38 = mul i64 %hash_coef.i.i35, 4189192806087951739
  %shifted.i.i.i39 = lshr i64 %product.i.i.i38, 32
  %xored.i.i.i40 = xor i64 %shifted.i.i.i39, %product.i.i.i38
  %hash.i.i.i41 = and i64 %xored.i.i.i40, %tbl_size.i.i36
  %offset_ptr.i.i42 = getelementptr i32, ptr %offset_tbl.i.i37, i64 %hash.i.i.i41
  %offset.i.i43 = load i32, ptr %offset_ptr.i.i42, align 4
  %eq.i = icmp eq i32 %.fca.3.extract29, %offset.i.i43
  tail call void @llvm.assume(i1 %eq.i) #30
  %18 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract23, 0
  %19 = insertvalue { ptr, ptr, ptr, i32 } %18, ptr %.fca.1.extract25, 1
  %20 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %.fca.2.extract27, 2
  %21 = insertvalue { ptr, ptr, ptr, i32 } %20, i32 %.fca.3.extract29, 3
  %22 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr nonnull %.fca.0.extract3)
  %23 = load ptr, ptr %7, align 8
  %24 = tail call ptr %23(ptr %.fca.1.extract4)
  %25 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %26 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %.fca.0.extract23)
  %27 = sext i32 %.fca.3.extract29 to i64
  %28 = getelementptr ptr, ptr %.fca.0.extract23, i64 %27
  %29 = getelementptr i8, ptr %28, i64 8
  %30 = load ptr, ptr %29, align 8
  %31 = call ptr %30({ ptr, ptr, ptr, i32 } %21, ptr nonnull %4)
  %32 = call { ptr, i160 } %31({ ptr, ptr, ptr, i32 } %21, { ptr, ptr, ptr, i32 } %21, ptr nonnull %4)
  %.fca.0.extract18 = extractvalue { ptr, i160 } %32, 0
  br label %60

33:                                               ; preds = %3
  %34 = getelementptr i8, ptr %7, i64 8
  %35 = load ptr, ptr %34, align 8
  %36 = load ptr, ptr %35, align 8
  %37 = tail call { ptr, ptr, ptr, i32 } %36(ptr %.fca.1.extract4)
  %.fca.0.extract10 = extractvalue { ptr, ptr, ptr, i32 } %37, 0
  %.fca.1.extract12 = extractvalue { ptr, ptr, ptr, i32 } %37, 1
  %.fca.2.extract14 = extractvalue { ptr, ptr, ptr, i32 } %37, 2
  %.fca.3.extract16 = extractvalue { ptr, ptr, ptr, i32 } %37, 3
  %hash_coef_ptr.i.i46 = getelementptr i8, ptr %.fca.0.extract10, i64 8
  %tbl_size_ptr.i.i47 = getelementptr i8, ptr %.fca.0.extract10, i64 16
  %offset_tbl_ptr.i.i48 = getelementptr i8, ptr %.fca.0.extract10, i64 40
  %hash_coef.i.i49 = load i64, ptr %hash_coef_ptr.i.i46, align 4
  %tbl_size.i.i50 = load i64, ptr %tbl_size_ptr.i.i47, align 4
  %offset_tbl.i.i51 = load ptr, ptr %offset_tbl_ptr.i.i48, align 8
  %product.i.i.i52 = mul i64 %hash_coef.i.i49, 4189192806087951739
  %shifted.i.i.i53 = lshr i64 %product.i.i.i52, 32
  %xored.i.i.i54 = xor i64 %shifted.i.i.i53, %product.i.i.i52
  %hash.i.i.i55 = and i64 %xored.i.i.i54, %tbl_size.i.i50
  %offset_ptr.i.i56 = getelementptr i32, ptr %offset_tbl.i.i51, i64 %hash.i.i.i55
  %offset.i.i57 = load i32, ptr %offset_ptr.i.i56, align 4
  %eq.i60 = icmp eq i32 %.fca.3.extract16, %offset.i.i57
  tail call void @llvm.assume(i1 %eq.i60) #30
  %38 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract10, 0
  %39 = insertvalue { ptr, ptr, ptr, i32 } %38, ptr %.fca.1.extract12, 1
  %40 = insertvalue { ptr, ptr, ptr, i32 } %39, ptr %.fca.2.extract14, 2
  %41 = insertvalue { ptr, ptr, ptr, i32 } %40, i32 %.fca.3.extract16, 3
  %42 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr nonnull %.fca.0.extract3)
  %43 = load ptr, ptr %7, align 8
  %44 = tail call ptr %43(ptr %.fca.1.extract4)
  %45 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %46 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %.fca.0.extract10)
  %47 = sext i32 %.fca.3.extract16 to i64
  %48 = getelementptr ptr, ptr %.fca.0.extract10, i64 %47
  %49 = getelementptr i8, ptr %48, i64 8
  %50 = load ptr, ptr %49, align 8
  %51 = call ptr %50({ ptr, ptr, ptr, i32 } %41, ptr nonnull %4)
  %52 = call { ptr, i160 } %51({ ptr, ptr, ptr, i32 } %41, { ptr, ptr, ptr, i32 } %41, ptr nonnull %4)
  %.fca.0.extract5 = extractvalue { ptr, i160 } %52, 0
  %53 = icmp eq ptr %.fca.0.extract5, @nil_typ
  %54 = icmp eq ptr %.fca.0.extract5, null
  %55 = or i1 %53, %54
  br i1 %55, label %._crit_edge.preheader, label %60

._crit_edge.preheader:                            ; preds = %33
  %56 = call ptr @llvm.invariant.start.p0(i64 88, ptr nonnull %.fca.0.extract3)
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.preheader, %._crit_edge
  %57 = load ptr, ptr %8, align 8
  %58 = getelementptr i8, ptr %57, i64 8
  %59 = load ptr, ptr %58, align 8
  call void %59(ptr %.fca.1.extract4, i1 false)
  br label %._crit_edge

60:                                               ; preds = %33, %13
  %.pn = phi { ptr, i160 } [ %32, %13 ], [ %52, %33 ]
  %.reg2mem19.sroa.0.0 = phi ptr [ %.fca.0.extract18, %13 ], [ %.fca.0.extract5, %33 ]
  %.reload20.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %.reg2mem19.sroa.0.0, 0
  %.reg2mem19.sroa.3.0 = extractvalue { ptr, i160 } %.pn, 1
  %.reload20.fca.1.insert = insertvalue { ptr, i160 } %.reload20.fca.0.insert, i160 %.reg2mem19.sroa.3.0, 1
  ret { ptr, i160 } %.reload20.fca.1.insert
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i1 @ChainIterator2_getter_on_first(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 72
  %3 = load i1, ptr %2, align 1
  ret i1 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ChainIterator2_setter_on_first(ptr nocapture writeonly %0, i1 %1) #6 {
  %3 = getelementptr i8, ptr %0, i64 72
  store i1 %1, ptr %3, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ChainIterator2_getter_second(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 48
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 56
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 64
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ChainIterator2_setter_second(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #6 {
  %3 = getelementptr i8, ptr %0, i64 40
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 48
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 56
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 64
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ChainIterator2_getter_first(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ChainIterator2_setter_first(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #6 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 32
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ChainIterable2_getter_second(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 48
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 56
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 64
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ChainIterable2_setter_second(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #6 {
  %3 = getelementptr i8, ptr %0, i64 40
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 48
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 56
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 64
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ChainIterable2_getter_first(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ChainIterable2_setter_first(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #6 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 32
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_FilterIterable2(ptr nocapture readnone %0) #0 {
  ret { i64, i64 } { i64 48, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @FilterIterable2_field_FilterIterable2_0(ptr nocapture readonly %0) #3 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FilterIterable2_B_init_iterableIterable2T_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 192
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FilterIterable2_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 200
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FilterIterable2_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 208
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FilterIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 216
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FilterIterable2_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 224
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FilterIterable2_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 232
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FilterIterable2_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 240
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FilterIterable2_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 248
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FilterIterable2_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 256
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FilterIterable2_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 264
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FilterIterable2_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 272
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FilterIterable2_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 280
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @FilterIterable2_init_iterableIterable2T_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 1178467452958968374
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %hash_coef_ptr.i.i11 = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i12 = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i13 = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i14 = load i64, ptr %hash_coef_ptr.i.i11, align 4
  %tbl_size.i.i15 = load i64, ptr %tbl_size_ptr.i.i12, align 4
  %offset_tbl.i.i16 = load ptr, ptr %offset_tbl_ptr.i.i13, align 8
  %product.i.i.i17 = mul i64 %hash_coef.i.i14, 5693646204635713916
  %shifted.i.i.i18 = lshr i64 %product.i.i.i17, 32
  %xored.i.i.i19 = xor i64 %shifted.i.i.i18, %product.i.i.i17
  %hash.i.i.i20 = and i64 %xored.i.i.i19, %tbl_size.i.i15
  %offset_ptr.i.i21 = getelementptr i32, ptr %offset_tbl.i.i16, i64 %hash.i.i.i20
  %offset.i.i36 = load i32, ptr %offset_ptr.i.i21, align 4
  %6 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract2)
  %7 = sext i32 %offset.i.i to i64
  %8 = getelementptr ptr, ptr %.fca.0.extract2, i64 %7
  %9 = getelementptr i8, ptr %8, i64 8
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr i8, ptr %10, i64 8
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.1.extract, 1
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, ptr %.fca.2.extract, 2
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, i32 %offset.i.i36, 3
  tail call void %12(ptr %.fca.1.extract4, { ptr, ptr, ptr, i32 } %16)
  %17 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract2)
  %18 = getelementptr i8, ptr %8, i64 16
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr i8, ptr %19, i64 8
  %21 = load ptr, ptr %20, align 8
  tail call void %21(ptr %.fca.1.extract4, { ptr } %4)
  ret void
}

define { ptr, ptr, ptr, i32 } @FilterIterable2_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract28 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract26, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract26, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract26, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 1178467452958968374
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %5 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract26)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract26, i64 %6
  %8 = getelementptr i8, ptr %7, i64 8
  %9 = load ptr, ptr %8, align 8
  %10 = load ptr, ptr %9, align 8
  %11 = tail call { ptr, ptr, ptr, i32 } %10(ptr %.fca.1.extract28)
  %.fca.0.extract18 = extractvalue { ptr, ptr, ptr, i32 } %11, 0
  %.fca.1.extract20 = extractvalue { ptr, ptr, ptr, i32 } %11, 1
  %.fca.2.extract22 = extractvalue { ptr, ptr, ptr, i32 } %11, 2
  %.fca.3.extract24 = extractvalue { ptr, ptr, ptr, i32 } %11, 3
  %hash_coef_ptr.i.i35 = getelementptr i8, ptr %.fca.0.extract18, i64 8
  %tbl_size_ptr.i.i36 = getelementptr i8, ptr %.fca.0.extract18, i64 16
  %offset_tbl_ptr.i.i37 = getelementptr i8, ptr %.fca.0.extract18, i64 40
  %hash_coef.i.i38 = load i64, ptr %hash_coef_ptr.i.i35, align 4
  %tbl_size.i.i39 = load i64, ptr %tbl_size_ptr.i.i36, align 4
  %offset_tbl.i.i40 = load ptr, ptr %offset_tbl_ptr.i.i37, align 8
  %product.i.i.i41 = mul i64 %hash_coef.i.i38, 5693646204635713916
  %shifted.i.i.i42 = lshr i64 %product.i.i.i41, 32
  %xored.i.i.i43 = xor i64 %shifted.i.i.i42, %product.i.i.i41
  %hash.i.i.i44 = and i64 %xored.i.i.i43, %tbl_size.i.i39
  %offset_ptr.i.i45 = getelementptr i32, ptr %offset_tbl.i.i40, i64 %hash.i.i.i44
  %offset.i.i46 = load i32, ptr %offset_ptr.i.i45, align 4
  %eq.i = icmp eq i32 %.fca.3.extract24, %offset.i.i46
  tail call void @llvm.assume(i1 %eq.i) #30
  %12 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract18, 0
  %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.1.extract20, 1
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.2.extract22, 2
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, i32 %.fca.3.extract24, 3
  %16 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract26)
  %17 = load ptr, ptr %7, align 8
  %18 = tail call ptr %17(ptr %.fca.1.extract28)
  %19 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %20 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract18)
  %21 = sext i32 %.fca.3.extract24 to i64
  %22 = getelementptr ptr, ptr %.fca.0.extract18, i64 %21
  %23 = getelementptr i8, ptr %22, i64 8
  %24 = load ptr, ptr %23, align 8
  %25 = call ptr %24({ ptr, ptr, ptr, i32 } %15, ptr nonnull %4)
  %26 = call { ptr, ptr, ptr, i32 } %25({ ptr, ptr, ptr, i32 } %15, { ptr, ptr, ptr, i32 } %15, ptr nonnull %4)
  %27 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract26)
  %28 = getelementptr i8, ptr %7, i64 16
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %29, align 8
  %31 = call { ptr } %30(ptr %.fca.1.extract28)
  %32 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract26)
  %33 = load ptr, ptr %7, align 8
  %34 = call ptr %33(ptr %.fca.1.extract28)
  %result.i = call noalias dereferenceable_or_null(48) ptr @bump_malloc_inner(i64 noundef 48, ptr nonnull @current_ptr) #29
  store ptr %34, ptr %result.i, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr inbounds i8, ptr %36, i64 8
  %38 = getelementptr inbounds i8, ptr %36, i64 24
  store ptr @FilterIterator2, ptr %36, align 8
  store ptr %result.i, ptr %37, align 8
  store i32 9, ptr %38, align 8
  %39 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %36)
  %40 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract26)
  %41 = load ptr, ptr %8, align 8
  %42 = load ptr, ptr %41, align 8
  %43 = call { ptr, ptr, ptr, i32 } %42(ptr %.fca.1.extract28)
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %43, 0
  %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %43, 1
  %.fca.2.extract6 = extractvalue { ptr, ptr, ptr, i32 } %43, 2
  %.fca.3.extract8 = extractvalue { ptr, ptr, ptr, i32 } %43, 3
  %hash_coef_ptr.i.i63 = getelementptr i8, ptr %.fca.0.extract2, i64 8
  %tbl_size_ptr.i.i64 = getelementptr i8, ptr %.fca.0.extract2, i64 16
  %offset_tbl_ptr.i.i65 = getelementptr i8, ptr %.fca.0.extract2, i64 40
  %hash_coef.i.i66 = load i64, ptr %hash_coef_ptr.i.i63, align 4
  %tbl_size.i.i67 = load i64, ptr %tbl_size_ptr.i.i64, align 4
  %offset_tbl.i.i68 = load ptr, ptr %offset_tbl_ptr.i.i65, align 8
  %product.i.i.i69 = mul i64 %hash_coef.i.i66, 5693646204635713916
  %shifted.i.i.i70 = lshr i64 %product.i.i.i69, 32
  %xored.i.i.i71 = xor i64 %shifted.i.i.i70, %product.i.i.i69
  %hash.i.i.i72 = and i64 %xored.i.i.i71, %tbl_size.i.i67
  %offset_ptr.i.i73 = getelementptr i32, ptr %offset_tbl.i.i68, i64 %hash.i.i.i72
  %offset.i.i74 = load i32, ptr %offset_ptr.i.i73, align 4
  %eq.i77 = icmp eq i32 %.fca.3.extract8, %offset.i.i74
  call void @llvm.assume(i1 %eq.i77) #30
  %44 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract2, 0
  %45 = insertvalue { ptr, ptr, ptr, i32 } %44, ptr %.fca.1.extract4, 1
  %46 = insertvalue { ptr, ptr, ptr, i32 } %45, ptr %.fca.2.extract6, 2
  %47 = insertvalue { ptr, ptr, ptr, i32 } %46, i32 %.fca.3.extract8, 3
  %48 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract26)
  %49 = load ptr, ptr %7, align 8
  %50 = call ptr %49(ptr %.fca.1.extract28)
  %51 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %52 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract2)
  %53 = sext i32 %.fca.3.extract8 to i64
  %54 = getelementptr ptr, ptr %.fca.0.extract2, i64 %53
  %55 = getelementptr i8, ptr %54, i64 8
  %56 = load ptr, ptr %55, align 8
  %57 = call ptr %56({ ptr, ptr, ptr, i32 } %47, ptr nonnull %4)
  %58 = call { ptr, ptr, ptr, i32 } %57({ ptr, ptr, ptr, i32 } %47, { ptr, ptr, ptr, i32 } %47, ptr nonnull %4)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %58, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %58, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %58, 2
  %hash_coef_ptr.i.i79 = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i80 = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i81 = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %59 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract26)
  %60 = load ptr, ptr %28, align 8
  %61 = load ptr, ptr %60, align 8
  %62 = call { ptr } %61(ptr %.fca.1.extract28)
  %hash_coef.i.i96 = load i64, ptr %hash_coef_ptr.i.i79, align 4
  %tbl_size.i.i97 = load i64, ptr %tbl_size_ptr.i.i80, align 4
  %offset_tbl.i.i98 = load ptr, ptr %offset_tbl_ptr.i.i81, align 8
  %product.i.i.i99 = mul i64 %hash_coef.i.i96, 4189192806087951739
  %shifted.i.i.i100 = lshr i64 %product.i.i.i99, 32
  %xored.i.i.i101 = xor i64 %shifted.i.i.i100, %product.i.i.i99
  %hash.i.i.i102 = and i64 %xored.i.i.i101, %tbl_size.i.i97
  %offset_ptr.i.i103 = getelementptr i32, ptr %offset_tbl.i.i98, i64 %hash.i.i.i102
  %offset.i.i104 = load i32, ptr %offset_ptr.i.i103, align 4
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %64 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %.fca.1.extract, 1
  %65 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %.fca.2.extract, 2
  %66 = insertvalue { ptr, ptr, ptr, i32 } %65, i32 %offset.i.i104, 3
  %67 = load ptr, ptr %36, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %67, 0
  %69 = load ptr, ptr %37, align 8
  %70 = insertvalue { ptr, ptr, ptr, i32 } %68, ptr %69, 1
  %71 = getelementptr inbounds i8, ptr %36, i64 16
  %72 = load ptr, ptr %71, align 8
  %73 = insertvalue { ptr, ptr, ptr, i32 } %70, ptr %72, 2
  %74 = load i32, ptr %38, align 8
  %75 = insertvalue { ptr, ptr, ptr, i32 } %73, i32 %74, 3
  %76 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract26)
  %77 = load ptr, ptr %7, align 8
  %78 = call ptr %77(ptr %.fca.1.extract28)
  %result.i106 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  %79 = getelementptr i8, ptr %result.i106, i64 8
  store ptr %78, ptr %79, align 8
  %80 = getelementptr i8, ptr %result.i106, i64 16
  store ptr null, ptr %80, align 8
  %81 = call ptr @llvm.invariant.start.p0(i64 16, ptr %result.i106)
  store ptr @Iterator2, ptr %result.i106, align 8
  %result.i107 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %82 = getelementptr i8, ptr %result.i107, i64 16
  store ptr %78, ptr %82, align 8
  %83 = getelementptr i8, ptr %result.i107, i64 8
  store ptr @_parameterization_Ptri1, ptr %83, align 8
  %84 = getelementptr i8, ptr %result.i107, i64 24
  store ptr null, ptr %84, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i107)
  store ptr @function_typ, ptr %result.i107, align 8
  %86 = alloca [2 x ptr], align 8
  store ptr %result.i106, ptr %86, align 8
  %87 = getelementptr inbounds i8, ptr %86, i64 8
  store ptr %result.i107, ptr %87, align 8
  %88 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %86)
  %89 = call ptr @llvm.invariant.start.p0(i64 80, ptr %67)
  %90 = sext i32 %74 to i64
  %91 = getelementptr ptr, ptr %67, i64 %90
  %92 = getelementptr i8, ptr %91, i64 24
  %93 = load ptr, ptr %92, align 8
  %94 = alloca { ptr, ptr }, align 8
  store ptr %.fca.0.extract1, ptr %94, align 8
  %95 = getelementptr inbounds i8, ptr %94, i64 8
  store ptr @function_typ, ptr %95, align 8
  %96 = call ptr %93({ ptr, ptr, ptr, i32 } %75, ptr nonnull %94)
  call void %96({ ptr, ptr, ptr, i32 } %75, { ptr, ptr, ptr, i32 } %75, ptr nonnull %86, { ptr, ptr, ptr, i32 } %66, { ptr } %62)
  %97 = load ptr, ptr %36, align 8
  %98 = load ptr, ptr %37, align 8
  %99 = load ptr, ptr %71, align 8
  %hash_coef_ptr.i.i109 = getelementptr i8, ptr %97, i64 8
  %tbl_size_ptr.i.i110 = getelementptr i8, ptr %97, i64 16
  %offset_tbl_ptr.i.i111 = getelementptr i8, ptr %97, i64 40
  %hash_coef.i.i112 = load i64, ptr %hash_coef_ptr.i.i109, align 4
  %tbl_size.i.i113 = load i64, ptr %tbl_size_ptr.i.i110, align 4
  %offset_tbl.i.i114 = load ptr, ptr %offset_tbl_ptr.i.i111, align 8
  %product.i.i.i115 = mul i64 %hash_coef.i.i112, 4189192806087951739
  %shifted.i.i.i116 = lshr i64 %product.i.i.i115, 32
  %xored.i.i.i117 = xor i64 %shifted.i.i.i116, %product.i.i.i115
  %hash.i.i.i118 = and i64 %xored.i.i.i117, %tbl_size.i.i113
  %offset_ptr.i.i119 = getelementptr i32, ptr %offset_tbl.i.i114, i64 %hash.i.i.i118
  %offset.i.i120 = load i32, ptr %offset_ptr.i.i119, align 4
  %100 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %97, 0
  %101 = insertvalue { ptr, ptr, ptr, i32 } %100, ptr %98, 1
  %102 = insertvalue { ptr, ptr, ptr, i32 } %101, ptr %99, 2
  %103 = insertvalue { ptr, ptr, ptr, i32 } %102, i32 %offset.i.i120, 3
  ret { ptr, ptr, ptr, i32 } %103
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_FilterIterator2(ptr nocapture readnone %0) #0 {
  ret { i64, i64 } { i64 48, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @FilterIterator2_field_FilterIterator2_0(ptr nocapture readonly %0) #3 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FilterIterator2_B_init_iteratorIterator2T_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 112
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FilterIterator2_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 120
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @FilterIterator2_init_iteratorIterator2T_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 8213847504843366470
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %hash_coef_ptr.i.i11 = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i12 = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i13 = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i14 = load i64, ptr %hash_coef_ptr.i.i11, align 4
  %tbl_size.i.i15 = load i64, ptr %tbl_size_ptr.i.i12, align 4
  %offset_tbl.i.i16 = load ptr, ptr %offset_tbl_ptr.i.i13, align 8
  %product.i.i.i17 = mul i64 %hash_coef.i.i14, 4189192806087951739
  %shifted.i.i.i18 = lshr i64 %product.i.i.i17, 32
  %xored.i.i.i19 = xor i64 %shifted.i.i.i18, %product.i.i.i17
  %hash.i.i.i20 = and i64 %xored.i.i.i19, %tbl_size.i.i15
  %offset_ptr.i.i21 = getelementptr i32, ptr %offset_tbl.i.i16, i64 %hash.i.i.i20
  %offset.i.i36 = load i32, ptr %offset_ptr.i.i21, align 4
  %6 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr %.fca.0.extract2)
  %7 = sext i32 %offset.i.i to i64
  %8 = getelementptr ptr, ptr %.fca.0.extract2, i64 %7
  %9 = getelementptr i8, ptr %8, i64 8
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr i8, ptr %10, i64 8
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.1.extract, 1
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, ptr %.fca.2.extract, 2
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, i32 %offset.i.i36, 3
  tail call void %12(ptr %.fca.1.extract4, { ptr, ptr, ptr, i32 } %16)
  %17 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr %.fca.0.extract2)
  %18 = getelementptr i8, ptr %8, i64 16
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr i8, ptr %19, i64 8
  %21 = load ptr, ptr %20, align 8
  tail call void %21(ptr %.fca.1.extract4, { ptr } %4)
  ret void
}

define { ptr, i160 } @FilterIterator2_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract16 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract14, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract14, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract14, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 8213847504843366470
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %5 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr %.fca.0.extract14)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract14, i64 %6
  %8 = getelementptr i8, ptr %7, i64 8
  %9 = load ptr, ptr %8, align 8
  %10 = load ptr, ptr %9, align 8
  %11 = tail call { ptr, ptr, ptr, i32 } %10(ptr %.fca.1.extract16)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %11, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %11, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %11, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %11, 3
  %hash_coef_ptr.i.i48 = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i49 = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i50 = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i51 = load i64, ptr %hash_coef_ptr.i.i48, align 4
  %tbl_size.i.i52 = load i64, ptr %tbl_size_ptr.i.i49, align 4
  %offset_tbl.i.i53 = load ptr, ptr %offset_tbl_ptr.i.i50, align 8
  %product.i.i.i54 = mul i64 %hash_coef.i.i51, 4189192806087951739
  %shifted.i.i.i55 = lshr i64 %product.i.i.i54, 32
  %xored.i.i.i56 = xor i64 %shifted.i.i.i55, %product.i.i.i54
  %hash.i.i.i57 = and i64 %xored.i.i.i56, %tbl_size.i.i52
  %offset_ptr.i.i58 = getelementptr i32, ptr %offset_tbl.i.i53, i64 %hash.i.i.i57
  %offset.i.i59 = load i32, ptr %offset_ptr.i.i58, align 4
  %eq.i = icmp eq i32 %.fca.3.extract, %offset.i.i59
  tail call void @llvm.assume(i1 %eq.i) #30
  %12 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.1.extract3, 1
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.2.extract, 2
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, i32 %.fca.3.extract, 3
  %16 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr %.fca.0.extract14)
  %17 = load ptr, ptr %7, align 8
  %18 = tail call ptr %17(ptr %.fca.1.extract16)
  %19 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %20 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %.fca.0.extract1)
  %21 = sext i32 %.fca.3.extract to i64
  %22 = getelementptr ptr, ptr %.fca.0.extract1, i64 %21
  %23 = getelementptr i8, ptr %22, i64 8
  %24 = load ptr, ptr %23, align 8
  %25 = call ptr %24({ ptr, ptr, ptr, i32 } %15, ptr nonnull %4)
  %26 = call { ptr, i160 } %25({ ptr, ptr, ptr, i32 } %15, { ptr, ptr, ptr, i32 } %15, ptr nonnull %4)
  %.sroa.0.0107 = extractvalue { ptr, i160 } %26, 0
  %27 = icmp ne ptr %.sroa.0.0107, @nil_typ
  %28 = icmp ne ptr %.sroa.0.0107, null
  %.not46109 = and i1 %27, %28
  br i1 %.not46109, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %3
  %29 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull %.fca.0.extract14)
  %30 = getelementptr i8, ptr %7, i64 16
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %31, align 8
  %33 = call { ptr } %32(ptr %.fca.1.extract16)
  %.fca.0.extract34117 = extractvalue { ptr } %33, 0
  %34 = call i1 %.fca.0.extract34117({ ptr, i160 } %26)
  br i1 %34, label %._crit_edge.loopexit, label %.lr.ph119.preheader

.lr.ph119.preheader:                              ; preds = %.lr.ph
  %35 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull %.fca.0.extract14)
  br label %.lr.ph119

36:                                               ; preds = %.lr.ph119
  %37 = load ptr, ptr %30, align 8
  %38 = load ptr, ptr %37, align 8
  %39 = call { ptr } %38(ptr %.fca.1.extract16)
  %.fca.0.extract34 = extractvalue { ptr } %39, 0
  %40 = call i1 %.fca.0.extract34({ ptr, i160 } %58)
  br i1 %40, label %._crit_edge.loopexit, label %.lr.ph119

.lr.ph119:                                        ; preds = %.lr.ph119.preheader, %36
  %.pn110118 = phi { ptr, i160 } [ %58, %36 ], [ %26, %.lr.ph119.preheader ]
  %41 = load ptr, ptr %8, align 8
  %42 = load ptr, ptr %41, align 8
  %43 = call { ptr, ptr, ptr, i32 } %42(ptr %.fca.1.extract16)
  %.fca.0.extract26 = extractvalue { ptr, ptr, ptr, i32 } %43, 0
  %.fca.1.extract28 = extractvalue { ptr, ptr, ptr, i32 } %43, 1
  %.fca.2.extract30 = extractvalue { ptr, ptr, ptr, i32 } %43, 2
  %.fca.3.extract32 = extractvalue { ptr, ptr, ptr, i32 } %43, 3
  %hash_coef_ptr.i.i62 = getelementptr i8, ptr %.fca.0.extract26, i64 8
  %tbl_size_ptr.i.i63 = getelementptr i8, ptr %.fca.0.extract26, i64 16
  %offset_tbl_ptr.i.i64 = getelementptr i8, ptr %.fca.0.extract26, i64 40
  %hash_coef.i.i65 = load i64, ptr %hash_coef_ptr.i.i62, align 4
  %tbl_size.i.i66 = load i64, ptr %tbl_size_ptr.i.i63, align 4
  %offset_tbl.i.i67 = load ptr, ptr %offset_tbl_ptr.i.i64, align 8
  %product.i.i.i68 = mul i64 %hash_coef.i.i65, 4189192806087951739
  %shifted.i.i.i69 = lshr i64 %product.i.i.i68, 32
  %xored.i.i.i70 = xor i64 %shifted.i.i.i69, %product.i.i.i68
  %hash.i.i.i71 = and i64 %xored.i.i.i70, %tbl_size.i.i66
  %offset_ptr.i.i72 = getelementptr i32, ptr %offset_tbl.i.i67, i64 %hash.i.i.i71
  %offset.i.i73 = load i32, ptr %offset_ptr.i.i72, align 4
  %eq.i76 = icmp eq i32 %.fca.3.extract32, %offset.i.i73
  call void @llvm.assume(i1 %eq.i76) #30
  %44 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract26, 0
  %45 = insertvalue { ptr, ptr, ptr, i32 } %44, ptr %.fca.1.extract28, 1
  %46 = insertvalue { ptr, ptr, ptr, i32 } %45, ptr %.fca.2.extract30, 2
  %47 = insertvalue { ptr, ptr, ptr, i32 } %46, i32 %.fca.3.extract32, 3
  %48 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull %.fca.0.extract14)
  %49 = load ptr, ptr %7, align 8
  %50 = call ptr %49(ptr %.fca.1.extract16)
  %51 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %52 = call ptr @llvm.invariant.start.p0(i64 24, ptr %.fca.0.extract26)
  %53 = sext i32 %.fca.3.extract32 to i64
  %54 = getelementptr ptr, ptr %.fca.0.extract26, i64 %53
  %55 = getelementptr i8, ptr %54, i64 8
  %56 = load ptr, ptr %55, align 8
  %57 = call ptr %56({ ptr, ptr, ptr, i32 } %47, ptr nonnull %4)
  %58 = call { ptr, i160 } %57({ ptr, ptr, ptr, i32 } %47, { ptr, ptr, ptr, i32 } %47, ptr nonnull %4)
  %.sroa.0.0 = extractvalue { ptr, i160 } %58, 0
  %59 = icmp ne ptr %.sroa.0.0, @nil_typ
  %60 = icmp ne ptr %.sroa.0.0, null
  %.not46 = and i1 %59, %60
  br i1 %.not46, label %36, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph119, %36, %.lr.ph
  %.pn110.lcssa = phi { ptr, i160 } [ %26, %.lr.ph ], [ %.pn110118, %.lr.ph119 ], [ %58, %36 ]
  %.ph = phi ptr [ %.sroa.0.0107, %.lr.ph ], [ @nil_typ, %.lr.ph119 ], [ %.sroa.0.0, %36 ]
  %.sroa.3.0112.le = extractvalue { ptr, i160 } %.pn110.lcssa, 1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %3
  %.1.ph104 = phi i160 [ undef, %3 ], [ %.sroa.3.0112.le, %._crit_edge.loopexit ]
  %61 = phi ptr [ @nil_typ, %3 ], [ %.ph, %._crit_edge.loopexit ]
  %.reload15.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %61, 0
  %.reload15.fca.1.insert = insertvalue { ptr, i160 } %.reload15.fca.0.insert, i160 %.1.ph104, 1
  ret { ptr, i160 } %.reload15.fca.1.insert
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr } @FilterIterator2_getter_f(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr } undef, ptr %3, 0
  ret { ptr } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @FilterIterator2_setter_f(ptr nocapture writeonly %0, { ptr } %1) #6 {
  %3 = getelementptr i8, ptr %0, i64 40
  %.fca.0.extract = extractvalue { ptr } %1, 0
  store ptr %.fca.0.extract, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @FilterIterator2_getter_iterator(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @FilterIterator2_setter_iterator(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #6 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 32
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr } @FilterIterable2_getter_f(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr } undef, ptr %3, 0
  ret { ptr } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @FilterIterable2_setter_f(ptr nocapture writeonly %0, { ptr } %1) #6 {
  %3 = getelementptr i8, ptr %0, i64 40
  %.fca.0.extract = extractvalue { ptr } %1, 0
  store ptr %.fca.0.extract, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @FilterIterable2_getter_iterable(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @FilterIterable2_setter_iterable(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #6 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 32
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_MapIterable2(ptr nocapture readnone %0) #0 {
  ret { i64, i64 } { i64 56, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @MapIterable2_field_MapIterable2_0(ptr nocapture readonly %0) #3 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @MapIterable2_field_MapIterable2_1(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @MapIterable2_B_init_iterableIterable2T_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 200
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @MapIterable2_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 208
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @MapIterable2_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 216
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @MapIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 224
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @MapIterable2_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 232
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @MapIterable2_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 240
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @MapIterable2_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 248
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @MapIterable2_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 256
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @MapIterable2_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 264
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @MapIterable2_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 272
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @MapIterable2_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 280
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @MapIterable2_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 288
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @MapIterable2_init_iterableIterable2T_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -1724859134596891929
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %hash_coef_ptr.i.i11 = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i12 = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i13 = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i14 = load i64, ptr %hash_coef_ptr.i.i11, align 4
  %tbl_size.i.i15 = load i64, ptr %tbl_size_ptr.i.i12, align 4
  %offset_tbl.i.i16 = load ptr, ptr %offset_tbl_ptr.i.i13, align 8
  %product.i.i.i17 = mul i64 %hash_coef.i.i14, 5693646204635713916
  %shifted.i.i.i18 = lshr i64 %product.i.i.i17, 32
  %xored.i.i.i19 = xor i64 %shifted.i.i.i18, %product.i.i.i17
  %hash.i.i.i20 = and i64 %xored.i.i.i19, %tbl_size.i.i15
  %offset_ptr.i.i21 = getelementptr i32, ptr %offset_tbl.i.i16, i64 %hash.i.i.i20
  %offset.i.i36 = load i32, ptr %offset_ptr.i.i21, align 4
  %6 = tail call ptr @llvm.invariant.start.p0(i64 408, ptr %.fca.0.extract2)
  %7 = sext i32 %offset.i.i to i64
  %8 = getelementptr ptr, ptr %.fca.0.extract2, i64 %7
  %9 = getelementptr i8, ptr %8, i64 16
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr i8, ptr %10, i64 8
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.1.extract, 1
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, ptr %.fca.2.extract, 2
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, i32 %offset.i.i36, 3
  tail call void %12(ptr %.fca.1.extract4, { ptr, ptr, ptr, i32 } %16)
  %17 = tail call ptr @llvm.invariant.start.p0(i64 408, ptr %.fca.0.extract2)
  %18 = getelementptr i8, ptr %8, i64 24
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr i8, ptr %19, i64 8
  %21 = load ptr, ptr %20, align 8
  tail call void %21(ptr %.fca.1.extract4, { ptr } %4)
  ret void
}

define { ptr, ptr, ptr, i32 } @MapIterable2_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract28 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract26, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract26, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract26, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -1724859134596891929
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %5 = tail call ptr @llvm.invariant.start.p0(i64 408, ptr %.fca.0.extract26)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract26, i64 %6
  %8 = getelementptr i8, ptr %7, i64 16
  %9 = load ptr, ptr %8, align 8
  %10 = load ptr, ptr %9, align 8
  %11 = tail call { ptr, ptr, ptr, i32 } %10(ptr %.fca.1.extract28)
  %.fca.0.extract18 = extractvalue { ptr, ptr, ptr, i32 } %11, 0
  %.fca.1.extract20 = extractvalue { ptr, ptr, ptr, i32 } %11, 1
  %.fca.2.extract22 = extractvalue { ptr, ptr, ptr, i32 } %11, 2
  %.fca.3.extract24 = extractvalue { ptr, ptr, ptr, i32 } %11, 3
  %hash_coef_ptr.i.i35 = getelementptr i8, ptr %.fca.0.extract18, i64 8
  %tbl_size_ptr.i.i36 = getelementptr i8, ptr %.fca.0.extract18, i64 16
  %offset_tbl_ptr.i.i37 = getelementptr i8, ptr %.fca.0.extract18, i64 40
  %hash_coef.i.i38 = load i64, ptr %hash_coef_ptr.i.i35, align 4
  %tbl_size.i.i39 = load i64, ptr %tbl_size_ptr.i.i36, align 4
  %offset_tbl.i.i40 = load ptr, ptr %offset_tbl_ptr.i.i37, align 8
  %product.i.i.i41 = mul i64 %hash_coef.i.i38, 5693646204635713916
  %shifted.i.i.i42 = lshr i64 %product.i.i.i41, 32
  %xored.i.i.i43 = xor i64 %shifted.i.i.i42, %product.i.i.i41
  %hash.i.i.i44 = and i64 %xored.i.i.i43, %tbl_size.i.i39
  %offset_ptr.i.i45 = getelementptr i32, ptr %offset_tbl.i.i40, i64 %hash.i.i.i44
  %offset.i.i46 = load i32, ptr %offset_ptr.i.i45, align 4
  %eq.i = icmp eq i32 %.fca.3.extract24, %offset.i.i46
  tail call void @llvm.assume(i1 %eq.i) #30
  %12 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract18, 0
  %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.1.extract20, 1
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.2.extract22, 2
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, i32 %.fca.3.extract24, 3
  %16 = tail call ptr @llvm.invariant.start.p0(i64 408, ptr %.fca.0.extract26)
  %17 = load ptr, ptr %7, align 8
  %18 = tail call ptr %17(ptr %.fca.1.extract28)
  %19 = tail call ptr @llvm.invariant.start.p0(i64 408, ptr %.fca.0.extract26)
  %20 = getelementptr i8, ptr %7, i64 8
  %21 = load ptr, ptr %20, align 8
  %22 = tail call ptr %21(ptr %.fca.1.extract28)
  %23 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %24 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract18)
  %25 = sext i32 %.fca.3.extract24 to i64
  %26 = getelementptr ptr, ptr %.fca.0.extract18, i64 %25
  %27 = getelementptr i8, ptr %26, i64 8
  %28 = load ptr, ptr %27, align 8
  %29 = call ptr %28({ ptr, ptr, ptr, i32 } %15, ptr nonnull %4)
  %30 = call { ptr, ptr, ptr, i32 } %29({ ptr, ptr, ptr, i32 } %15, { ptr, ptr, ptr, i32 } %15, ptr nonnull %4)
  %31 = call ptr @llvm.invariant.start.p0(i64 408, ptr %.fca.0.extract26)
  %32 = getelementptr i8, ptr %7, i64 24
  %33 = load ptr, ptr %32, align 8
  %34 = load ptr, ptr %33, align 8
  %35 = call { ptr } %34(ptr %.fca.1.extract28)
  %36 = call ptr @llvm.invariant.start.p0(i64 408, ptr %.fca.0.extract26)
  %37 = load ptr, ptr %7, align 8
  %38 = call ptr %37(ptr %.fca.1.extract28)
  %39 = call ptr @llvm.invariant.start.p0(i64 408, ptr %.fca.0.extract26)
  %40 = load ptr, ptr %20, align 8
  %41 = call ptr %40(ptr %.fca.1.extract28)
  %result.i = call noalias dereferenceable_or_null(56) ptr @bump_malloc_inner(i64 noundef 56, ptr nonnull @current_ptr) #29
  store ptr %38, ptr %result.i, align 8
  %42 = getelementptr i8, ptr %result.i, i64 8
  store ptr %41, ptr %42, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i)
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = getelementptr inbounds i8, ptr %44, i64 8
  %46 = getelementptr inbounds i8, ptr %44, i64 24
  store ptr @MapIterator2, ptr %44, align 8
  store ptr %result.i, ptr %45, align 8
  store i32 9, ptr %46, align 8
  %47 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %44)
  %48 = call ptr @llvm.invariant.start.p0(i64 408, ptr %.fca.0.extract26)
  %49 = load ptr, ptr %8, align 8
  %50 = load ptr, ptr %49, align 8
  %51 = call { ptr, ptr, ptr, i32 } %50(ptr %.fca.1.extract28)
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %51, 0
  %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %51, 1
  %.fca.2.extract6 = extractvalue { ptr, ptr, ptr, i32 } %51, 2
  %.fca.3.extract8 = extractvalue { ptr, ptr, ptr, i32 } %51, 3
  %hash_coef_ptr.i.i63 = getelementptr i8, ptr %.fca.0.extract2, i64 8
  %tbl_size_ptr.i.i64 = getelementptr i8, ptr %.fca.0.extract2, i64 16
  %offset_tbl_ptr.i.i65 = getelementptr i8, ptr %.fca.0.extract2, i64 40
  %hash_coef.i.i66 = load i64, ptr %hash_coef_ptr.i.i63, align 4
  %tbl_size.i.i67 = load i64, ptr %tbl_size_ptr.i.i64, align 4
  %offset_tbl.i.i68 = load ptr, ptr %offset_tbl_ptr.i.i65, align 8
  %product.i.i.i69 = mul i64 %hash_coef.i.i66, 5693646204635713916
  %shifted.i.i.i70 = lshr i64 %product.i.i.i69, 32
  %xored.i.i.i71 = xor i64 %shifted.i.i.i70, %product.i.i.i69
  %hash.i.i.i72 = and i64 %xored.i.i.i71, %tbl_size.i.i67
  %offset_ptr.i.i73 = getelementptr i32, ptr %offset_tbl.i.i68, i64 %hash.i.i.i72
  %offset.i.i74 = load i32, ptr %offset_ptr.i.i73, align 4
  %eq.i77 = icmp eq i32 %.fca.3.extract8, %offset.i.i74
  call void @llvm.assume(i1 %eq.i77) #30
  %52 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract2, 0
  %53 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %.fca.1.extract4, 1
  %54 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %.fca.2.extract6, 2
  %55 = insertvalue { ptr, ptr, ptr, i32 } %54, i32 %.fca.3.extract8, 3
  %56 = call ptr @llvm.invariant.start.p0(i64 408, ptr %.fca.0.extract26)
  %57 = load ptr, ptr %7, align 8
  %58 = call ptr %57(ptr %.fca.1.extract28)
  %59 = call ptr @llvm.invariant.start.p0(i64 408, ptr %.fca.0.extract26)
  %60 = load ptr, ptr %20, align 8
  %61 = call ptr %60(ptr %.fca.1.extract28)
  %62 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %63 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract2)
  %64 = sext i32 %.fca.3.extract8 to i64
  %65 = getelementptr ptr, ptr %.fca.0.extract2, i64 %64
  %66 = getelementptr i8, ptr %65, i64 8
  %67 = load ptr, ptr %66, align 8
  %68 = call ptr %67({ ptr, ptr, ptr, i32 } %55, ptr nonnull %4)
  %69 = call { ptr, ptr, ptr, i32 } %68({ ptr, ptr, ptr, i32 } %55, { ptr, ptr, ptr, i32 } %55, ptr nonnull %4)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %69, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %69, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %69, 2
  %hash_coef_ptr.i.i79 = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i80 = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i81 = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %70 = call ptr @llvm.invariant.start.p0(i64 408, ptr %.fca.0.extract26)
  %71 = load ptr, ptr %32, align 8
  %72 = load ptr, ptr %71, align 8
  %73 = call { ptr } %72(ptr %.fca.1.extract28)
  %hash_coef.i.i96 = load i64, ptr %hash_coef_ptr.i.i79, align 4
  %tbl_size.i.i97 = load i64, ptr %tbl_size_ptr.i.i80, align 4
  %offset_tbl.i.i98 = load ptr, ptr %offset_tbl_ptr.i.i81, align 8
  %product.i.i.i99 = mul i64 %hash_coef.i.i96, 4189192806087951739
  %shifted.i.i.i100 = lshr i64 %product.i.i.i99, 32
  %xored.i.i.i101 = xor i64 %shifted.i.i.i100, %product.i.i.i99
  %hash.i.i.i102 = and i64 %xored.i.i.i101, %tbl_size.i.i97
  %offset_ptr.i.i103 = getelementptr i32, ptr %offset_tbl.i.i98, i64 %hash.i.i.i102
  %offset.i.i104 = load i32, ptr %offset_ptr.i.i103, align 4
  %74 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %75 = insertvalue { ptr, ptr, ptr, i32 } %74, ptr %.fca.1.extract, 1
  %76 = insertvalue { ptr, ptr, ptr, i32 } %75, ptr %.fca.2.extract, 2
  %77 = insertvalue { ptr, ptr, ptr, i32 } %76, i32 %offset.i.i104, 3
  %78 = load ptr, ptr %44, align 8
  %79 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %78, 0
  %80 = load ptr, ptr %45, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %80, 1
  %82 = getelementptr inbounds i8, ptr %44, i64 16
  %83 = load ptr, ptr %82, align 8
  %84 = insertvalue { ptr, ptr, ptr, i32 } %81, ptr %83, 2
  %85 = load i32, ptr %46, align 8
  %86 = insertvalue { ptr, ptr, ptr, i32 } %84, i32 %85, 3
  %87 = call ptr @llvm.invariant.start.p0(i64 408, ptr %.fca.0.extract26)
  %88 = load ptr, ptr %7, align 8
  %89 = call ptr %88(ptr %.fca.1.extract28)
  %90 = call ptr @llvm.invariant.start.p0(i64 408, ptr %.fca.0.extract26)
  %91 = load ptr, ptr %20, align 8
  %92 = call ptr %91(ptr %.fca.1.extract28)
  %result.i106 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  %93 = getelementptr i8, ptr %result.i106, i64 8
  store ptr %89, ptr %93, align 8
  %94 = getelementptr i8, ptr %result.i106, i64 16
  store ptr null, ptr %94, align 8
  %95 = call ptr @llvm.invariant.start.p0(i64 16, ptr %result.i106)
  store ptr @Iterator2, ptr %result.i106, align 8
  %result.i107 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %96 = getelementptr i8, ptr %result.i107, i64 16
  store ptr %89, ptr %96, align 8
  %97 = getelementptr i8, ptr %result.i107, i64 8
  store ptr %92, ptr %97, align 8
  %98 = getelementptr i8, ptr %result.i107, i64 24
  store ptr null, ptr %98, align 8
  %99 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i107)
  store ptr @function_typ, ptr %result.i107, align 8
  %100 = alloca [2 x ptr], align 8
  store ptr %result.i106, ptr %100, align 8
  %101 = getelementptr inbounds i8, ptr %100, i64 8
  store ptr %result.i107, ptr %101, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %100)
  %103 = call ptr @llvm.invariant.start.p0(i64 88, ptr %78)
  %104 = sext i32 %85 to i64
  %105 = getelementptr ptr, ptr %78, i64 %104
  %106 = getelementptr i8, ptr %105, i64 32
  %107 = load ptr, ptr %106, align 8
  %108 = alloca { ptr, ptr }, align 8
  store ptr %.fca.0.extract1, ptr %108, align 8
  %109 = getelementptr inbounds i8, ptr %108, i64 8
  store ptr @function_typ, ptr %109, align 8
  %110 = call ptr %107({ ptr, ptr, ptr, i32 } %86, ptr nonnull %108)
  call void %110({ ptr, ptr, ptr, i32 } %86, { ptr, ptr, ptr, i32 } %86, ptr nonnull %100, { ptr, ptr, ptr, i32 } %77, { ptr } %73)
  %111 = load ptr, ptr %44, align 8
  %112 = load ptr, ptr %45, align 8
  %113 = load ptr, ptr %82, align 8
  %hash_coef_ptr.i.i109 = getelementptr i8, ptr %111, i64 8
  %tbl_size_ptr.i.i110 = getelementptr i8, ptr %111, i64 16
  %offset_tbl_ptr.i.i111 = getelementptr i8, ptr %111, i64 40
  %hash_coef.i.i112 = load i64, ptr %hash_coef_ptr.i.i109, align 4
  %tbl_size.i.i113 = load i64, ptr %tbl_size_ptr.i.i110, align 4
  %offset_tbl.i.i114 = load ptr, ptr %offset_tbl_ptr.i.i111, align 8
  %product.i.i.i115 = mul i64 %hash_coef.i.i112, 4189192806087951739
  %shifted.i.i.i116 = lshr i64 %product.i.i.i115, 32
  %xored.i.i.i117 = xor i64 %shifted.i.i.i116, %product.i.i.i115
  %hash.i.i.i118 = and i64 %xored.i.i.i117, %tbl_size.i.i113
  %offset_ptr.i.i119 = getelementptr i32, ptr %offset_tbl.i.i114, i64 %hash.i.i.i118
  %offset.i.i120 = load i32, ptr %offset_ptr.i.i119, align 4
  %114 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %111, 0
  %115 = insertvalue { ptr, ptr, ptr, i32 } %114, ptr %112, 1
  %116 = insertvalue { ptr, ptr, ptr, i32 } %115, ptr %113, 2
  %117 = insertvalue { ptr, ptr, ptr, i32 } %116, i32 %offset.i.i120, 3
  ret { ptr, ptr, ptr, i32 } %117
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_MapIterator2(ptr nocapture readnone %0) #0 {
  ret { i64, i64 } { i64 56, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @MapIterator2_field_MapIterator2_0(ptr nocapture readonly %0) #3 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @MapIterator2_field_MapIterator2_1(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @MapIterator2_B_init_iteratorIterator2T_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 120
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @MapIterator2_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 128
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @MapIterator2_init_iteratorIterator2T_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -10255947709272500
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %hash_coef_ptr.i.i11 = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i12 = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i13 = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i14 = load i64, ptr %hash_coef_ptr.i.i11, align 4
  %tbl_size.i.i15 = load i64, ptr %tbl_size_ptr.i.i12, align 4
  %offset_tbl.i.i16 = load ptr, ptr %offset_tbl_ptr.i.i13, align 8
  %product.i.i.i17 = mul i64 %hash_coef.i.i14, 4189192806087951739
  %shifted.i.i.i18 = lshr i64 %product.i.i.i17, 32
  %xored.i.i.i19 = xor i64 %shifted.i.i.i18, %product.i.i.i17
  %hash.i.i.i20 = and i64 %xored.i.i.i19, %tbl_size.i.i15
  %offset_ptr.i.i21 = getelementptr i32, ptr %offset_tbl.i.i16, i64 %hash.i.i.i20
  %offset.i.i36 = load i32, ptr %offset_ptr.i.i21, align 4
  %6 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr %.fca.0.extract2)
  %7 = sext i32 %offset.i.i to i64
  %8 = getelementptr ptr, ptr %.fca.0.extract2, i64 %7
  %9 = getelementptr i8, ptr %8, i64 16
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr i8, ptr %10, i64 8
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.1.extract, 1
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, ptr %.fca.2.extract, 2
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, i32 %offset.i.i36, 3
  tail call void %12(ptr %.fca.1.extract4, { ptr, ptr, ptr, i32 } %16)
  %17 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr %.fca.0.extract2)
  %18 = getelementptr i8, ptr %8, i64 24
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr i8, ptr %19, i64 8
  %21 = load ptr, ptr %20, align 8
  tail call void %21(ptr %.fca.1.extract4, { ptr } %4)
  ret void
}

define { ptr, i160 } @MapIterator2_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract14 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract12, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract12, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract12, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -10255947709272500
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %5 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr %.fca.0.extract12)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract12, i64 %6
  %8 = getelementptr i8, ptr %7, i64 16
  %9 = load ptr, ptr %8, align 8
  %10 = load ptr, ptr %9, align 8
  %11 = tail call { ptr, ptr, ptr, i32 } %10(ptr %.fca.1.extract14)
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %11, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %11, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %11, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %11, 3
  %hash_coef_ptr.i.i35 = getelementptr i8, ptr %.fca.0.extract2, i64 8
  %tbl_size_ptr.i.i36 = getelementptr i8, ptr %.fca.0.extract2, i64 16
  %offset_tbl_ptr.i.i37 = getelementptr i8, ptr %.fca.0.extract2, i64 40
  %hash_coef.i.i38 = load i64, ptr %hash_coef_ptr.i.i35, align 4
  %tbl_size.i.i39 = load i64, ptr %tbl_size_ptr.i.i36, align 4
  %offset_tbl.i.i40 = load ptr, ptr %offset_tbl_ptr.i.i37, align 8
  %product.i.i.i41 = mul i64 %hash_coef.i.i38, 4189192806087951739
  %shifted.i.i.i42 = lshr i64 %product.i.i.i41, 32
  %xored.i.i.i43 = xor i64 %shifted.i.i.i42, %product.i.i.i41
  %hash.i.i.i44 = and i64 %xored.i.i.i43, %tbl_size.i.i39
  %offset_ptr.i.i45 = getelementptr i32, ptr %offset_tbl.i.i40, i64 %hash.i.i.i44
  %offset.i.i46 = load i32, ptr %offset_ptr.i.i45, align 4
  %eq.i = icmp eq i32 %.fca.3.extract, %offset.i.i46
  tail call void @llvm.assume(i1 %eq.i) #30
  %12 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract2, 0
  %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.1.extract3, 1
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.2.extract, 2
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, i32 %.fca.3.extract, 3
  %16 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr %.fca.0.extract12)
  %17 = load ptr, ptr %7, align 8
  %18 = tail call ptr %17(ptr %.fca.1.extract14)
  %19 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr %.fca.0.extract12)
  %20 = getelementptr i8, ptr %7, i64 8
  %21 = load ptr, ptr %20, align 8
  %22 = tail call ptr %21(ptr %.fca.1.extract14)
  %23 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %24 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %.fca.0.extract2)
  %25 = sext i32 %.fca.3.extract to i64
  %26 = getelementptr ptr, ptr %.fca.0.extract2, i64 %25
  %27 = getelementptr i8, ptr %26, i64 8
  %28 = load ptr, ptr %27, align 8
  %29 = call ptr %28({ ptr, ptr, ptr, i32 } %15, ptr nonnull %4)
  %30 = call { ptr, i160 } %29({ ptr, ptr, ptr, i32 } %15, { ptr, ptr, ptr, i32 } %15, ptr nonnull %4)
  %.fca.0.extract = extractvalue { ptr, i160 } %30, 0
  %31 = icmp ne ptr %.fca.0.extract, @nil_typ
  %32 = icmp ne ptr %.fca.0.extract, null
  %.not33 = and i1 %31, %32
  br i1 %.not33, label %33, label %40

33:                                               ; preds = %3
  %34 = call ptr @llvm.invariant.start.p0(i64 88, ptr nonnull %.fca.0.extract12)
  %35 = getelementptr i8, ptr %7, i64 24
  %36 = load ptr, ptr %35, align 8
  %37 = load ptr, ptr %36, align 8
  %38 = call { ptr } %37(ptr %.fca.1.extract14)
  %.fca.0.extract25 = extractvalue { ptr } %38, 0
  %39 = call { ptr, i160 } %.fca.0.extract25({ ptr, i160 } %30)
  %.fca.0.extract20 = extractvalue { ptr, i160 } %39, 0
  %.fca.1.extract22 = extractvalue { ptr, i160 } %39, 1
  br label %40

40:                                               ; preds = %3, %33
  %.reg2mem5.sroa.0.0 = phi ptr [ %.fca.0.extract20, %33 ], [ @nil_typ, %3 ]
  %.reg2mem5.sroa.3.0 = phi i160 [ %.fca.1.extract22, %33 ], [ undef, %3 ]
  %.reload6.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %.reg2mem5.sroa.0.0, 0
  %.reload6.fca.1.insert = insertvalue { ptr, i160 } %.reload6.fca.0.insert, i160 %.reg2mem5.sroa.3.0, 1
  ret { ptr, i160 } %.reload6.fca.1.insert
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr } @MapIterator2_getter_f(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 48
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr } undef, ptr %3, 0
  ret { ptr } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @MapIterator2_setter_f(ptr nocapture writeonly %0, { ptr } %1) #6 {
  %3 = getelementptr i8, ptr %0, i64 48
  %.fca.0.extract = extractvalue { ptr } %1, 0
  store ptr %.fca.0.extract, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @MapIterator2_getter_iterator(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 24
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 32
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 40
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @MapIterator2_setter_iterator(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #6 {
  %3 = getelementptr i8, ptr %0, i64 16
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 32
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 40
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr } @MapIterable2_getter_f(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 48
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr } undef, ptr %3, 0
  ret { ptr } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @MapIterable2_setter_f(ptr nocapture writeonly %0, { ptr } %1) #6 {
  %3 = getelementptr i8, ptr %0, i64 48
  %.fca.0.extract = extractvalue { ptr } %1, 0
  store ptr %.fca.0.extract, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @MapIterable2_getter_iterable(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 24
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 32
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 40
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @MapIterable2_setter_iterable(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #6 {
  %3 = getelementptr i8, ptr %0, i64 16
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 32
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 40
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_ArrayIterator(ptr nocapture readnone %0) #0 {
  ret { i64, i64 } { i64 48, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ArrayIterator_field_ArrayIterator_0(ptr nocapture readonly %0) #3 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ArrayIterator_B_init_arrayArrayT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 112
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ArrayIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 120
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @ArrayIterator_init_arrayArrayT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 3447345754186651411
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %hash_coef_ptr.i.i10 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i11 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i12 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i13 = load i64, ptr %hash_coef_ptr.i.i10, align 4
  %tbl_size.i.i14 = load i64, ptr %tbl_size_ptr.i.i11, align 4
  %offset_tbl.i.i15 = load ptr, ptr %offset_tbl_ptr.i.i12, align 8
  %product.i.i.i16 = mul i64 %hash_coef.i.i13, -5261542750394134544
  %shifted.i.i.i17 = lshr i64 %product.i.i.i16, 32
  %xored.i.i.i18 = xor i64 %shifted.i.i.i17, %product.i.i.i16
  %hash.i.i.i19 = and i64 %xored.i.i.i18, %tbl_size.i.i14
  %offset_ptr.i.i20 = getelementptr i32, ptr %offset_tbl.i.i15, i64 %hash.i.i.i19
  %offset.i.i35 = load i32, ptr %offset_ptr.i.i20, align 4
  %5 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr %.fca.0.extract1)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract1, i64 %6
  %8 = getelementptr i8, ptr %7, i64 8
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr i8, ptr %9, i64 8
  %11 = load ptr, ptr %10, align 8
  %12 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.1.extract, 1
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.2.extract, 2
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, i32 %offset.i.i35, 3
  tail call void %11(ptr %.fca.1.extract3, { ptr, ptr, ptr, i32 } %15)
  %16 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr %.fca.0.extract1)
  %17 = getelementptr i8, ptr %7, i64 16
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr i8, ptr %18, i64 8
  %20 = load ptr, ptr %19, align 8
  tail call void %20(ptr %.fca.1.extract3, i32 0)
  ret void
}

define { ptr, i160 } @ArrayIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %5 = alloca [1 x ptr], align 8
  %6 = alloca { ptr }, align 8
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 3447345754186651411
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %7 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr %.fca.0.extract9)
  %8 = sext i32 %offset.i.i to i64
  %9 = getelementptr ptr, ptr %.fca.0.extract9, i64 %8
  %10 = getelementptr i8, ptr %9, i64 16
  %11 = load ptr, ptr %10, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = tail call i32 %12(ptr %.fca.1.extract11)
  %14 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr %.fca.0.extract9)
  %15 = getelementptr i8, ptr %9, i64 8
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = tail call { ptr, ptr, ptr, i32 } %17(ptr %.fca.1.extract11)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %18, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %18, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %18, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %18, 3
  %hash_coef_ptr.i.i32 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i33 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i34 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i35 = load i64, ptr %hash_coef_ptr.i.i32, align 4
  %tbl_size.i.i36 = load i64, ptr %tbl_size_ptr.i.i33, align 4
  %offset_tbl.i.i37 = load ptr, ptr %offset_tbl_ptr.i.i34, align 8
  %product.i.i.i38 = mul i64 %hash_coef.i.i35, -5261542750394134544
  %shifted.i.i.i39 = lshr i64 %product.i.i.i38, 32
  %xored.i.i.i40 = xor i64 %shifted.i.i.i39, %product.i.i.i38
  %hash.i.i.i41 = and i64 %xored.i.i.i40, %tbl_size.i.i36
  %offset_ptr.i.i42 = getelementptr i32, ptr %offset_tbl.i.i37, i64 %hash.i.i.i41
  %offset.i.i43 = load i32, ptr %offset_ptr.i.i42, align 4
  %eq.i = icmp eq i32 %.fca.3.extract, %offset.i.i43
  tail call void @llvm.assume(i1 %eq.i) #30
  %19 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %20 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %.fca.1.extract, 1
  %21 = insertvalue { ptr, ptr, ptr, i32 } %20, ptr %.fca.2.extract, 2
  %22 = insertvalue { ptr, ptr, ptr, i32 } %21, i32 %.fca.3.extract, 3
  %23 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr %.fca.0.extract9)
  %24 = load ptr, ptr %9, align 8
  %25 = tail call ptr %24(ptr %.fca.1.extract11)
  %26 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %27 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract)
  %28 = sext i32 %.fca.3.extract to i64
  %29 = getelementptr ptr, ptr %.fca.0.extract, i64 %28
  %30 = getelementptr i8, ptr %29, i64 64
  %31 = load ptr, ptr %30, align 8
  %32 = call ptr %31({ ptr, ptr, ptr, i32 } %22, ptr nonnull %4)
  %33 = call i32 %32({ ptr, ptr, ptr, i32 } %22, { ptr, ptr, ptr, i32 } %22, ptr nonnull %4)
  %.not = icmp slt i32 %13, %33
  br i1 %.not, label %34, label %68

34:                                               ; preds = %3
  %35 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull %.fca.0.extract9)
  %36 = load ptr, ptr %10, align 8
  %37 = load ptr, ptr %36, align 8
  %38 = call i32 %37(ptr %.fca.1.extract11)
  %39 = add i32 %38, 1
  %40 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull %.fca.0.extract9)
  %41 = load ptr, ptr %10, align 8
  %42 = getelementptr i8, ptr %41, i64 8
  %43 = load ptr, ptr %42, align 8
  call void %43(ptr %.fca.1.extract11, i32 %39)
  %44 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull %.fca.0.extract9)
  %45 = load ptr, ptr %10, align 8
  %46 = load ptr, ptr %45, align 8
  %47 = call i32 %46(ptr %.fca.1.extract11)
  %48 = add i32 %47, -1
  %49 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull %.fca.0.extract9)
  %50 = load ptr, ptr %15, align 8
  %51 = load ptr, ptr %50, align 8
  %52 = call { ptr, ptr, ptr, i32 } %51(ptr %.fca.1.extract11)
  %.fca.0.extract21 = extractvalue { ptr, ptr, ptr, i32 } %52, 0
  %.fca.1.extract23 = extractvalue { ptr, ptr, ptr, i32 } %52, 1
  %.fca.2.extract25 = extractvalue { ptr, ptr, ptr, i32 } %52, 2
  %.fca.3.extract27 = extractvalue { ptr, ptr, ptr, i32 } %52, 3
  %hash_coef_ptr.i.i46 = getelementptr i8, ptr %.fca.0.extract21, i64 8
  %tbl_size_ptr.i.i47 = getelementptr i8, ptr %.fca.0.extract21, i64 16
  %offset_tbl_ptr.i.i48 = getelementptr i8, ptr %.fca.0.extract21, i64 40
  %hash_coef.i.i49 = load i64, ptr %hash_coef_ptr.i.i46, align 4
  %tbl_size.i.i50 = load i64, ptr %tbl_size_ptr.i.i47, align 4
  %offset_tbl.i.i51 = load ptr, ptr %offset_tbl_ptr.i.i48, align 8
  %product.i.i.i52 = mul i64 %hash_coef.i.i49, -5261542750394134544
  %shifted.i.i.i53 = lshr i64 %product.i.i.i52, 32
  %xored.i.i.i54 = xor i64 %shifted.i.i.i53, %product.i.i.i52
  %hash.i.i.i55 = and i64 %xored.i.i.i54, %tbl_size.i.i50
  %offset_ptr.i.i56 = getelementptr i32, ptr %offset_tbl.i.i51, i64 %hash.i.i.i55
  %offset.i.i57 = load i32, ptr %offset_ptr.i.i56, align 4
  %eq.i60 = icmp eq i32 %.fca.3.extract27, %offset.i.i57
  call void @llvm.assume(i1 %eq.i60) #30
  %53 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract21, 0
  %54 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %.fca.1.extract23, 1
  %55 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %.fca.2.extract25, 2
  %56 = insertvalue { ptr, ptr, ptr, i32 } %55, i32 %.fca.3.extract27, 3
  %57 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull %.fca.0.extract9)
  %58 = load ptr, ptr %9, align 8
  %59 = call ptr %58(ptr %.fca.1.extract11)
  store ptr @_parameterization_Ptri32, ptr %5, align 8
  %60 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %5)
  %61 = call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract21)
  %62 = sext i32 %.fca.3.extract27 to i64
  %63 = getelementptr ptr, ptr %.fca.0.extract21, i64 %62
  %64 = getelementptr i8, ptr %63, i64 120
  %65 = load ptr, ptr %64, align 8
  store ptr @i32_typ, ptr %6, align 8
  %66 = call ptr %65({ ptr, ptr, ptr, i32 } %56, ptr nonnull %6)
  %67 = call { ptr, i160 } %66({ ptr, ptr, ptr, i32 } %56, { ptr, ptr, ptr, i32 } %56, ptr nonnull %5, i32 %48)
  %.fca.0.extract17 = extractvalue { ptr, i160 } %67, 0
  %.fca.1.extract19 = extractvalue { ptr, i160 } %67, 1
  br label %68

68:                                               ; preds = %3, %34
  %.reg2mem5.sroa.3.0 = phi i160 [ %.fca.1.extract19, %34 ], [ undef, %3 ]
  %.reg2mem5.sroa.0.0 = phi ptr [ %.fca.0.extract17, %34 ], [ @nil_typ, %3 ]
  %.reload6.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %.reg2mem5.sroa.0.0, 0
  %.reload6.fca.1.insert = insertvalue { ptr, i160 } %.reload6.fca.0.insert, i160 %.reg2mem5.sroa.3.0, 1
  ret { ptr, i160 } %.reload6.fca.1.insert
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @ArrayIterator_getter_index(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ArrayIterator_setter_index(ptr nocapture writeonly %0, i32 %1) #6 {
  %3 = getelementptr i8, ptr %0, i64 40
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ArrayIterator_getter_array(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ArrayIterator_setter_array(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #6 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 32
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @Array_getter_capacity(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 20
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Array_setter_capacity(ptr nocapture writeonly %0, i32 %1) #6 {
  %3 = getelementptr i8, ptr %0, i64 20
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @Array_getter_length(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Array_setter_length(ptr nocapture writeonly %0, i32 %1) #6 {
  %3 = getelementptr i8, ptr %0, i64 16
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr } @Array_getter_buffer(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr } undef, ptr %3, 0
  ret { ptr } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Array_setter_buffer(ptr nocapture writeonly %0, { ptr } %1) #6 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr } %1, 0
  store ptr %.fca.0.extract, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @Iterator2_field_Iterator2_0(ptr nocapture readonly %0) local_unnamed_addr #3 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Iterator2_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 88
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @Iterable2_field_Iterable2_0(ptr nocapture readonly %0) local_unnamed_addr #3 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Iterable2_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 168
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Iterable2_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 176
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Iterable2_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 184
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Iterable2_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 192
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Iterable2_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 200
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Iterable2_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 208
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Iterable2_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 216
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Iterable2_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 224
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Iterable2_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 232
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Iterable2_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 240
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Iterable2_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 248
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_Object(ptr nocapture readnone %0) #0 {
  ret { i64, i64 } { i64 0, i64 1 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_Iterator(ptr nocapture readnone %0) #0 {
  ret { i64, i64 } { i64 0, i64 1 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_Iterable(ptr nocapture readnone %0) #0 {
  ret { i64, i64 } { i64 0, i64 1 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_Representable(ptr nocapture readnone %0) #0 {
  ret { i64, i64 } { i64 0, i64 1 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Representable_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 80
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(readwrite, argmem: none, inaccessiblemem: none)
define { ptr, ptr, ptr, i32 } @Representable_repr_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) #8 {
  %result.i = tail call noalias dereferenceable_or_null(7) ptr @bump_malloc_inner(i64 noundef 7, ptr nonnull @current_ptr) #29
  store <6 x i8> <i8 79, i8 98, i8 106, i8 101, i8 99, i8 116>, ptr %result.i, align 8
  %result.i1 = tail call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %4 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %result.i1, 1
  %5 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr undef, 2
  %6 = insertvalue { ptr, ptr, ptr, i32 } %5, i32 9, 3
  store ptr %result.i, ptr %result.i1, align 8
  %7 = getelementptr i8, ptr %result.i1, i64 8
  store i32 6, ptr %7, align 4
  %8 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %9 = getelementptr i8, ptr %result.i1, i64 12
  store i32 7, ptr %9, align 4
  ret { ptr, ptr, ptr, i32 } %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_String(ptr nocapture readnone %0) #0 {
  ret { i64, i64 } { i64 16, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_init_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 208
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_init_bytesBufferPtri8_lengthPtri32_capacityPtri32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 216
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_length_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 224
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_capacity_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 232
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_bytes_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 240
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_append_xPtri8({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 248
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_extend_strString({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 256
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B__index_xPtri32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 264
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B__EQ_otherString({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 272
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_pop_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 280
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_copy_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 288
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_c_string_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 296
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 304
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 312
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @String_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 6499063144389013426
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %result.i = tail call noalias dereferenceable_or_null(1) ptr @bump_malloc_inner(i64 noundef 1, ptr nonnull @current_ptr) #29
  %4 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract)
  %5 = sext i32 %offset.i.i to i64
  %6 = getelementptr ptr, ptr %.fca.0.extract, i64 %5
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr i8, ptr %7, i64 8
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr } undef, ptr %result.i, 0
  tail call void %9(ptr %.fca.1.extract, { ptr } %10)
  %11 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract)
  %12 = getelementptr i8, ptr %6, i64 16
  %13 = load ptr, ptr %12, align 8
  %14 = getelementptr i8, ptr %13, i64 8
  %15 = load ptr, ptr %14, align 8
  tail call void %15(ptr %.fca.1.extract, i32 1)
  %16 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract)
  %17 = getelementptr i8, ptr %6, i64 8
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr i8, ptr %18, i64 8
  %20 = load ptr, ptr %19, align 8
  tail call void %20(ptr %.fca.1.extract, i32 0)
  ret void
}

define void @String_init_bytesBufferPtri8_lengthPtri32_capacityPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr } %3, i32 %4, i32 %5) {
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 6499063144389013426
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %7 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract1)
  %8 = sext i32 %offset.i.i to i64
  %9 = getelementptr ptr, ptr %.fca.0.extract1, i64 %8
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr i8, ptr %10, i64 8
  %12 = load ptr, ptr %11, align 8
  tail call void %12(ptr %.fca.1.extract, { ptr } %3)
  %13 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract1)
  %14 = getelementptr i8, ptr %9, i64 8
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = load ptr, ptr %16, align 8
  tail call void %17(ptr %.fca.1.extract, i32 %4)
  %18 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract1)
  %19 = getelementptr i8, ptr %9, i64 16
  %20 = load ptr, ptr %19, align 8
  %21 = getelementptr i8, ptr %20, i64 8
  %22 = load ptr, ptr %21, align 8
  tail call void %22(ptr %.fca.1.extract, i32 %5)
  ret void
}

define i32 @String_length_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 6499063144389013426
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %4 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract)
  %5 = sext i32 %offset.i.i to i64
  %6 = getelementptr ptr, ptr %.fca.0.extract, i64 %5
  %7 = getelementptr i8, ptr %6, i64 8
  %8 = load ptr, ptr %7, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = tail call i32 %9(ptr %.fca.1.extract)
  ret i32 %10
}

define i32 @String_capacity_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 6499063144389013426
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %4 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract)
  %5 = sext i32 %offset.i.i to i64
  %6 = getelementptr ptr, ptr %.fca.0.extract, i64 %5
  %7 = getelementptr i8, ptr %6, i64 16
  %8 = load ptr, ptr %7, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = tail call i32 %9(ptr %.fca.1.extract)
  ret i32 %10
}

define { ptr } @String_bytes_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 6499063144389013426
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %4 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract1)
  %5 = sext i32 %offset.i.i to i64
  %6 = getelementptr ptr, ptr %.fca.0.extract1, i64 %5
  %7 = load ptr, ptr %6, align 8
  %8 = load ptr, ptr %7, align 8
  %9 = tail call { ptr } %8(ptr %.fca.1.extract)
  ret { ptr } %9
}

define { ptr, ptr, ptr, i32 } @String_append_xPtri8({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i8 %3) {
  %.sroa.079 = alloca ptr, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %.sroa.075 = alloca ptr, align 8
  %.sroa.176 = alloca ptr, align 8
  %.sroa.277 = alloca ptr, align 8
  %.sroa.378 = alloca i32, align 8
  %.sroa.074 = alloca ptr, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %.sroa.073 = alloca ptr, align 8
  %.sroa.1 = alloca ptr, align 8
  %.sroa.2 = alloca ptr, align 8
  %.sroa.3 = alloca i32, align 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 6499063144389013426
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %13 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract)
  %14 = sext i32 %offset.i.i to i64
  %15 = getelementptr ptr, ptr %.fca.0.extract, i64 %14
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = load ptr, ptr %16, align 8
  %18 = load ptr, ptr %17, align 8
  %19 = tail call i32 %18(ptr %.fca.1.extract)
  %20 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract)
  %21 = getelementptr i8, ptr %15, i64 16
  %22 = load ptr, ptr %21, align 8
  %23 = load ptr, ptr %22, align 8
  %24 = tail call i32 %23(ptr %.fca.1.extract)
  %25 = icmp slt i32 %19, %24
  br i1 %25, label %.thread, label %26

26:                                               ; preds = %4
  %27 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract)
  %28 = load ptr, ptr %21, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = tail call i32 %29(ptr %.fca.1.extract)
  %31 = shl i32 %30, 1
  %32 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract)
  %33 = load ptr, ptr %21, align 8
  %34 = getelementptr i8, ptr %33, i64 8
  %35 = load ptr, ptr %34, align 8
  tail call void %35(ptr %.fca.1.extract, i32 %31)
  %36 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract)
  %37 = load ptr, ptr %15, align 8
  %38 = load ptr, ptr %37, align 8
  %39 = tail call { ptr } %38(ptr %.fca.1.extract)
  %.fca.0.extract7 = extractvalue { ptr } %39, 0
  %40 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract)
  %41 = load ptr, ptr %21, align 8
  %42 = load ptr, ptr %41, align 8
  %43 = tail call i32 %42(ptr %.fca.1.extract)
  %44 = sext i32 %43 to i64
  %result.i = tail call noalias ptr @bump_malloc_inner(i64 noundef %44, ptr nonnull @current_ptr) #29
  %45 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract)
  %46 = load ptr, ptr %15, align 8
  %47 = getelementptr i8, ptr %46, i64 8
  %48 = load ptr, ptr %47, align 8
  %49 = insertvalue { ptr } undef, ptr %result.i, 0
  tail call void %48(ptr %.fca.1.extract, { ptr } %49)
  %50 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract)
  %51 = load ptr, ptr %16, align 8
  %52 = load ptr, ptr %51, align 8
  %53 = tail call i32 %52(ptr %.fca.1.extract)
  %54 = icmp sgt i32 %53, 0
  br i1 %54, label %.lr.ph, label %.thread

.lr.ph:                                           ; preds = %26
  %55 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract)
  br label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph, %._crit_edge
  %.reg2mem42.081 = phi i32 [ 0, %.lr.ph ], [ %63, %._crit_edge ]
  %56 = zext nneg i32 %.reg2mem42.081 to i64
  %57 = getelementptr i8, ptr %.fca.0.extract7, i64 %56
  %58 = load ptr, ptr %15, align 8
  %59 = load ptr, ptr %58, align 8
  %60 = tail call { ptr } %59(ptr %.fca.1.extract)
  %.fca.0.extract4 = extractvalue { ptr } %60, 0
  %61 = getelementptr i8, ptr %.fca.0.extract4, i64 %56
  %62 = load i8, ptr %57, align 1
  store i8 %62, ptr %61, align 1
  %63 = add nuw nsw i32 %.reg2mem42.081, 1
  %64 = load ptr, ptr %16, align 8
  %65 = load ptr, ptr %64, align 8
  %66 = tail call i32 %65(ptr %.fca.1.extract)
  %67 = icmp slt i32 %63, %66
  br i1 %67, label %._crit_edge, label %.thread

.thread:                                          ; preds = %._crit_edge, %26, %4
  %.sroa.phi = phi ptr [ %.sroa.176, %4 ], [ %.sroa.1, %26 ], [ %.sroa.1, %._crit_edge ]
  %.sroa.phi64 = phi ptr [ %.sroa.277, %4 ], [ %.sroa.2, %26 ], [ %.sroa.2, %._crit_edge ]
  %.sroa.phi67 = phi ptr [ %.sroa.378, %4 ], [ %.sroa.3, %26 ], [ %.sroa.3, %._crit_edge ]
  %68 = phi ptr [ %.sroa.075, %4 ], [ %.sroa.073, %26 ], [ %.sroa.073, %._crit_edge ]
  %69 = phi ptr [ %8, %4 ], [ %12, %26 ], [ %12, %._crit_edge ]
  %70 = phi ptr [ %7, %4 ], [ %11, %26 ], [ %11, %._crit_edge ]
  %71 = phi ptr [ %6, %4 ], [ %10, %26 ], [ %10, %._crit_edge ]
  %72 = phi ptr [ %5, %4 ], [ %9, %26 ], [ %9, %._crit_edge ]
  %73 = phi ptr [ %.sroa.079, %4 ], [ %.sroa.074, %26 ], [ %.sroa.074, %._crit_edge ]
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %74 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract)
  %75 = load ptr, ptr %15, align 8
  %76 = load ptr, ptr %75, align 8
  %77 = tail call { ptr } %76(ptr %.fca.1.extract)
  %78 = extractvalue { ptr } %77, 0
  store ptr %78, ptr %73, align 8
  %79 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract)
  %80 = load ptr, ptr %16, align 8
  %81 = load ptr, ptr %80, align 8
  %82 = tail call i32 %81(ptr %.fca.1.extract)
  store i32 %82, ptr %72, align 4
  %83 = load ptr, ptr %73, align 8
  %84 = sext i32 %82 to i64
  %85 = getelementptr i8, ptr %83, i64 %84
  store i8 %3, ptr %85, align 1
  %86 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract)
  %87 = load ptr, ptr %16, align 8
  %88 = load ptr, ptr %87, align 8
  %89 = tail call i32 %88(ptr %.fca.1.extract)
  store i32 %89, ptr %71, align 4
  store i32 1, ptr %70, align 4
  %90 = add i32 %89, 1
  store i32 %90, ptr %69, align 4
  %91 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract)
  %92 = load ptr, ptr %16, align 8
  %93 = getelementptr i8, ptr %92, i64 8
  %94 = load ptr, ptr %93, align 8
  tail call void %94(ptr %.fca.1.extract, i32 %90)
  store ptr %.fca.0.extract, ptr %68, align 8
  store ptr %.fca.1.extract, ptr %.sroa.phi, align 8
  store ptr %.fca.2.extract, ptr %.sroa.phi64, align 8
  store i32 %offset.i.i, ptr %.sroa.phi67, align 8
  %hash_coef.i.i14 = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i15 = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i16 = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i17 = mul i64 %hash_coef.i.i14, 6499063144389013426
  %shifted.i.i.i18 = lshr i64 %product.i.i.i17, 32
  %xored.i.i.i19 = xor i64 %shifted.i.i.i18, %product.i.i.i17
  %hash.i.i.i20 = and i64 %xored.i.i.i19, %tbl_size.i.i15
  %offset_ptr.i.i21 = getelementptr i32, ptr %offset_tbl.i.i16, i64 %hash.i.i.i20
  %offset.i.i22 = load i32, ptr %offset_ptr.i.i21, align 4
  store i32 %offset.i.i22, ptr %.sroa.phi67, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %96 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %.fca.1.extract, 1
  %97 = insertvalue { ptr, ptr, ptr, i32 } %96, ptr %.fca.2.extract, 2
  %98 = insertvalue { ptr, ptr, ptr, i32 } %97, i32 %offset.i.i22, 3
  ret { ptr, ptr, ptr, i32 } %98
}

define { ptr, ptr, ptr, i32 } @String_extend_strString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %.sroa.0130 = alloca ptr, align 8
  %.sroa.1131 = alloca ptr, align 8
  %.sroa.2132 = alloca ptr, align 8
  %.sroa.3133 = alloca i32, align 8
  %8 = alloca { ptr }, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %.sroa.0129 = alloca ptr, align 8
  %.sroa.1 = alloca ptr, align 8
  %.sroa.2 = alloca ptr, align 8
  %.sroa.3 = alloca i32, align 8
  %.fca.0.extract17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract19 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract17, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract17, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract17, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 6499063144389013426
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %hash_coef_ptr.i.i39 = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i40 = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i41 = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i42 = load i64, ptr %hash_coef_ptr.i.i39, align 4
  %tbl_size.i.i43 = load i64, ptr %tbl_size_ptr.i.i40, align 4
  %offset_tbl.i.i44 = load ptr, ptr %offset_tbl_ptr.i.i41, align 8
  %product.i.i.i45 = mul i64 %hash_coef.i.i42, 6499063144389013426
  %shifted.i.i.i46 = lshr i64 %product.i.i.i45, 32
  %xored.i.i.i47 = xor i64 %shifted.i.i.i46, %product.i.i.i45
  %hash.i.i.i48 = and i64 %xored.i.i.i47, %tbl_size.i.i43
  %offset_ptr.i.i49 = getelementptr i32, ptr %offset_tbl.i.i44, i64 %hash.i.i.i48
  %offset.i.i50 = load i32, ptr %offset_ptr.i.i49, align 4
  %11 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %12 = insertvalue { ptr, ptr, ptr, i32 } %11, ptr %.fca.1.extract, 1
  %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.2.extract, 2
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, i32 %offset.i.i50, 3
  %15 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %16 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract1)
  %17 = sext i32 %offset.i.i50 to i64
  %18 = getelementptr ptr, ptr %.fca.0.extract1, i64 %17
  %19 = getelementptr i8, ptr %18, i64 56
  %20 = load ptr, ptr %19, align 8
  %21 = call ptr %20({ ptr, ptr, ptr, i32 } %14, ptr nonnull %5)
  %22 = call { ptr } %21({ ptr, ptr, ptr, i32 } %14, { ptr, ptr, ptr, i32 } %14, ptr nonnull %5)
  %.fca.0.extract = extractvalue { ptr } %22, 0
  %23 = alloca { ptr }, align 8
  store ptr %.fca.0.extract, ptr %23, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %23)
  %25 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %26 = call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract1)
  %27 = getelementptr i8, ptr %18, i64 40
  %28 = load ptr, ptr %27, align 8
  %29 = call ptr %28({ ptr, ptr, ptr, i32 } %14, ptr nonnull %5)
  %30 = call i32 %29({ ptr, ptr, ptr, i32 } %14, { ptr, ptr, ptr, i32 } %14, ptr nonnull %5)
  %31 = call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract17)
  %32 = sext i32 %offset.i.i to i64
  %33 = getelementptr ptr, ptr %.fca.0.extract17, i64 %32
  %34 = getelementptr i8, ptr %33, i64 8
  %35 = load ptr, ptr %34, align 8
  %36 = load ptr, ptr %35, align 8
  %37 = call i32 %36(ptr %.fca.1.extract19)
  %38 = add i32 %37, %30
  %39 = call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract17)
  %40 = getelementptr i8, ptr %33, i64 16
  %41 = load ptr, ptr %40, align 8
  %42 = load ptr, ptr %41, align 8
  %43 = call i32 %42(ptr %.fca.1.extract19)
  %44 = icmp slt i32 %38, %43
  %45 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract17)
  %46 = load ptr, ptr %34, align 8
  %47 = load ptr, ptr %46, align 8
  %48 = call i32 %47(ptr %.fca.1.extract19)
  br i1 %44, label %49, label %73

49:                                               ; preds = %4
  %50 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract17)
  %51 = load ptr, ptr %34, align 8
  %52 = load ptr, ptr %51, align 8
  %53 = call i32 %52(ptr %.fca.1.extract19)
  %54 = add i32 %53, %30
  %55 = icmp slt i32 %48, %54
  br i1 %55, label %.lr.ph146, label %.thread

.lr.ph146:                                        ; preds = %49
  %56 = load ptr, ptr %23, align 8
  %57 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract17)
  br label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph146, %._crit_edge
  %.reg2mem97.0144 = phi i32 [ %48, %.lr.ph146 ], [ %66, %._crit_edge ]
  %.reg2mem95.0143 = phi i32 [ 0, %.lr.ph146 ], [ %67, %._crit_edge ]
  %58 = sext i32 %.reg2mem95.0143 to i64
  %59 = getelementptr i8, ptr %56, i64 %58
  %60 = load ptr, ptr %33, align 8
  %61 = load ptr, ptr %60, align 8
  %62 = call { ptr } %61(ptr %.fca.1.extract19)
  %.fca.0.extract35 = extractvalue { ptr } %62, 0
  %63 = sext i32 %.reg2mem97.0144 to i64
  %64 = getelementptr i8, ptr %.fca.0.extract35, i64 %63
  %65 = load i8, ptr %59, align 1
  store i8 %65, ptr %64, align 1
  %66 = add nsw i32 %.reg2mem97.0144, 1
  %67 = add i32 %.reg2mem95.0143, 1
  %68 = load ptr, ptr %34, align 8
  %69 = load ptr, ptr %68, align 8
  %70 = call i32 %69(ptr %.fca.1.extract19)
  %71 = add i32 %70, %30
  %72 = icmp slt i32 %66, %71
  br i1 %72, label %._crit_edge, label %.thread

73:                                               ; preds = %4
  %74 = add i32 %48, %30
  %75 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract17)
  %76 = load ptr, ptr %40, align 8
  %77 = getelementptr i8, ptr %76, i64 8
  %78 = load ptr, ptr %77, align 8
  call void %78(ptr %.fca.1.extract19, i32 %74)
  %79 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract17)
  %80 = load ptr, ptr %33, align 8
  %81 = load ptr, ptr %80, align 8
  %82 = call { ptr } %81(ptr %.fca.1.extract19)
  %.fca.0.extract32 = extractvalue { ptr } %82, 0
  store ptr %.fca.0.extract32, ptr %8, align 8
  %83 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %8)
  %84 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract17)
  %85 = load ptr, ptr %40, align 8
  %86 = load ptr, ptr %85, align 8
  %87 = call i32 %86(ptr %.fca.1.extract19)
  %88 = sext i32 %87 to i64
  %result.i = call noalias ptr @bump_malloc_inner(i64 noundef %88, ptr nonnull @current_ptr) #29
  %89 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract17)
  %90 = load ptr, ptr %33, align 8
  %91 = getelementptr i8, ptr %90, i64 8
  %92 = load ptr, ptr %91, align 8
  %93 = insertvalue { ptr } undef, ptr %result.i, 0
  call void %92(ptr %.fca.1.extract19, { ptr } %93)
  %94 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract17)
  %95 = load ptr, ptr %34, align 8
  %96 = load ptr, ptr %95, align 8
  %97 = call i32 %96(ptr %.fca.1.extract19)
  %98 = add i32 %97, %30
  %99 = icmp sgt i32 %98, 0
  br i1 %99, label %.lr.ph, label %.thread

.lr.ph:                                           ; preds = %73
  %100 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract17)
  %101 = load ptr, ptr %23, align 8
  %102 = load ptr, ptr %8, align 8
  br label %103

103:                                              ; preds = %.lr.ph, %._crit_edge1
  %.reg2mem89.0141 = phi i32 [ 0, %.lr.ph ], [ %.reg2mem85.0, %._crit_edge1 ]
  %.reg2mem87.0140 = phi i32 [ 0, %.lr.ph ], [ %.reg2mem83.0, %._crit_edge1 ]
  %104 = load ptr, ptr %34, align 8
  %105 = load ptr, ptr %104, align 8
  %106 = call i32 %105(ptr %.fca.1.extract19)
  %107 = icmp slt i32 %.reg2mem89.0141, %106
  %108 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract17)
  %109 = load ptr, ptr %33, align 8
  %110 = load ptr, ptr %109, align 8
  %111 = call { ptr } %110(ptr %.fca.1.extract19)
  %.fca.0.extract28 = extractvalue { ptr } %111, 0
  br i1 %107, label %112, label %117

112:                                              ; preds = %103
  %113 = zext nneg i32 %.reg2mem89.0141 to i64
  %114 = getelementptr i8, ptr %102, i64 %113
  %115 = getelementptr i8, ptr %.fca.0.extract28, i64 %113
  %116 = load i8, ptr %114, align 1
  store i8 %116, ptr %115, align 1
  br label %._crit_edge1

117:                                              ; preds = %103
  %118 = sext i32 %.reg2mem87.0140 to i64
  %119 = getelementptr i8, ptr %101, i64 %118
  %120 = zext nneg i32 %.reg2mem89.0141 to i64
  %121 = getelementptr i8, ptr %.fca.0.extract28, i64 %120
  %122 = load i8, ptr %119, align 1
  store i8 %122, ptr %121, align 1
  %123 = add i32 %.reg2mem87.0140, 1
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %112, %117
  %.reg2mem83.0 = phi i32 [ %.reg2mem87.0140, %112 ], [ %123, %117 ]
  %.reg2mem85.0 = add nuw nsw i32 %.reg2mem89.0141, 1
  %124 = load ptr, ptr %34, align 8
  %125 = load ptr, ptr %124, align 8
  %126 = call i32 %125(ptr %.fca.1.extract19)
  %127 = add i32 %126, %30
  %128 = icmp slt i32 %.reg2mem85.0, %127
  br i1 %128, label %103, label %.thread

.thread:                                          ; preds = %._crit_edge1, %._crit_edge, %73, %49
  %.sroa.phi = phi ptr [ %.sroa.1131, %49 ], [ %.sroa.1, %73 ], [ %.sroa.1131, %._crit_edge ], [ %.sroa.1, %._crit_edge1 ]
  %.sroa.phi120 = phi ptr [ %.sroa.2132, %49 ], [ %.sroa.2, %73 ], [ %.sroa.2132, %._crit_edge ], [ %.sroa.2, %._crit_edge1 ]
  %.sroa.phi123 = phi ptr [ %.sroa.3133, %49 ], [ %.sroa.3, %73 ], [ %.sroa.3133, %._crit_edge ], [ %.sroa.3, %._crit_edge1 ]
  %129 = phi ptr [ %.sroa.0130, %49 ], [ %.sroa.0129, %73 ], [ %.sroa.0130, %._crit_edge ], [ %.sroa.0129, %._crit_edge1 ]
  %130 = phi ptr [ %7, %49 ], [ %10, %73 ], [ %7, %._crit_edge ], [ %10, %._crit_edge1 ]
  %131 = phi ptr [ %6, %49 ], [ %9, %73 ], [ %6, %._crit_edge ], [ %9, %._crit_edge1 ]
  %.fca.2.extract21 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %132 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract17)
  %133 = load ptr, ptr %34, align 8
  %134 = load ptr, ptr %133, align 8
  %135 = call i32 %134(ptr %.fca.1.extract19)
  store i32 %135, ptr %131, align 4
  %136 = add i32 %135, %30
  store i32 %136, ptr %130, align 4
  %137 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract17)
  %138 = load ptr, ptr %34, align 8
  %139 = getelementptr i8, ptr %138, i64 8
  %140 = load ptr, ptr %139, align 8
  call void %140(ptr %.fca.1.extract19, i32 %136)
  store ptr %.fca.0.extract17, ptr %129, align 8
  store ptr %.fca.1.extract19, ptr %.sroa.phi, align 8
  store ptr %.fca.2.extract21, ptr %.sroa.phi120, align 8
  store i32 %offset.i.i, ptr %.sroa.phi123, align 8
  %hash_coef.i.i56 = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i57 = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i58 = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i59 = mul i64 %hash_coef.i.i56, 6499063144389013426
  %shifted.i.i.i60 = lshr i64 %product.i.i.i59, 32
  %xored.i.i.i61 = xor i64 %shifted.i.i.i60, %product.i.i.i59
  %hash.i.i.i62 = and i64 %xored.i.i.i61, %tbl_size.i.i57
  %offset_ptr.i.i63 = getelementptr i32, ptr %offset_tbl.i.i58, i64 %hash.i.i.i62
  %offset.i.i64 = load i32, ptr %offset_ptr.i.i63, align 4
  store i32 %offset.i.i64, ptr %.sroa.phi123, align 8
  %141 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract17, 0
  %142 = insertvalue { ptr, ptr, ptr, i32 } %141, ptr %.fca.1.extract19, 1
  %143 = insertvalue { ptr, ptr, ptr, i32 } %142, ptr %.fca.2.extract21, 2
  %144 = insertvalue { ptr, ptr, ptr, i32 } %143, i32 %offset.i.i64, 3
  ret { ptr, ptr, ptr, i32 } %144
}

define i8 @String__index_xPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 6499063144389013426
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %5 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract, i64 %6
  %8 = getelementptr i8, ptr %7, i64 8
  %9 = load ptr, ptr %8, align 8
  %10 = load ptr, ptr %9, align 8
  %11 = tail call i32 %10(ptr %.fca.1.extract)
  %12 = add i32 %11, -1
  %13 = icmp sgt i32 %3, %12
  br i1 %13, label %14, label %._crit_edge

14:                                               ; preds = %4
  %current_coroutine.i = load ptr, ptr @current_coroutine, align 8
  %into_callee_buf.i = getelementptr i8, ptr %current_coroutine.i, i64 8
  tail call preserve_nonecc void @context_switch(ptr nocapture writeonly %into_callee_buf.i, ptr nonnull @into_caller_buf) #32
  br label %._crit_edge

._crit_edge:                                      ; preds = %4, %14
  %15 = icmp sgt i32 %3, -1
  %16 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract)
  br i1 %15, label %17, label %23

17:                                               ; preds = %._crit_edge
  %18 = load ptr, ptr %7, align 8
  %19 = load ptr, ptr %18, align 8
  %20 = tail call { ptr } %19(ptr %.fca.1.extract)
  %.fca.0.extract3 = extractvalue { ptr } %20, 0
  %21 = zext nneg i32 %3 to i64
  %22 = getelementptr i8, ptr %.fca.0.extract3, i64 %21
  br label %41

23:                                               ; preds = %._crit_edge
  %24 = load ptr, ptr %8, align 8
  %25 = load ptr, ptr %24, align 8
  %26 = tail call i32 %25(ptr %.fca.1.extract)
  %27 = add i32 %26, %3
  %28 = icmp slt i32 %27, 0
  br i1 %28, label %29, label %._crit_edge1

29:                                               ; preds = %23
  %current_coroutine.i6 = load ptr, ptr @current_coroutine, align 8
  %into_callee_buf.i7 = getelementptr i8, ptr %current_coroutine.i6, i64 8
  tail call preserve_nonecc void @context_switch(ptr nocapture writeonly %into_callee_buf.i7, ptr nonnull @into_caller_buf) #32
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %23, %29
  %30 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract)
  %31 = load ptr, ptr %7, align 8
  %32 = load ptr, ptr %31, align 8
  %33 = tail call { ptr } %32(ptr %.fca.1.extract)
  %.fca.0.extract1 = extractvalue { ptr } %33, 0
  %34 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract)
  %35 = load ptr, ptr %8, align 8
  %36 = load ptr, ptr %35, align 8
  %37 = tail call i32 %36(ptr %.fca.1.extract)
  %38 = add i32 %37, %3
  %39 = sext i32 %38 to i64
  %40 = getelementptr i8, ptr %.fca.0.extract1, i64 %39
  br label %41

41:                                               ; preds = %._crit_edge1, %17
  %.reg2mem6.0.in = phi ptr [ %22, %17 ], [ %40, %._crit_edge1 ]
  %.reg2mem6.0 = load i8, ptr %.reg2mem6.0.in, align 1
  ret i8 %.reg2mem6.0
}

define noundef i1 @String__EQ_otherString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca i1, align 1
  %7 = alloca i1, align 1
  %8 = alloca i1, align 1
  %.fca.0.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract7 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract5, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract5, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract5, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 6499063144389013426
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %hash_coef_ptr.i.i20 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i21 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i22 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i23 = load i64, ptr %hash_coef_ptr.i.i20, align 4
  %tbl_size.i.i24 = load i64, ptr %tbl_size_ptr.i.i21, align 4
  %offset_tbl.i.i25 = load ptr, ptr %offset_tbl_ptr.i.i22, align 8
  %product.i.i.i26 = mul i64 %hash_coef.i.i23, 6499063144389013426
  %shifted.i.i.i27 = lshr i64 %product.i.i.i26, 32
  %xored.i.i.i28 = xor i64 %shifted.i.i.i27, %product.i.i.i26
  %hash.i.i.i29 = and i64 %xored.i.i.i28, %tbl_size.i.i24
  %offset_ptr.i.i30 = getelementptr i32, ptr %offset_tbl.i.i25, i64 %hash.i.i.i29
  %offset.i.i31 = load i32, ptr %offset_ptr.i.i30, align 4
  %9 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract5)
  %10 = sext i32 %offset.i.i to i64
  %11 = getelementptr ptr, ptr %.fca.0.extract5, i64 %10
  %12 = getelementptr i8, ptr %11, i64 8
  %13 = load ptr, ptr %12, align 8
  %14 = load ptr, ptr %13, align 8
  %15 = tail call i32 %14(ptr %.fca.1.extract7)
  %16 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %17 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %.fca.1.extract, 1
  %18 = insertvalue { ptr, ptr, ptr, i32 } %17, ptr %.fca.2.extract, 2
  %19 = insertvalue { ptr, ptr, ptr, i32 } %18, i32 %offset.i.i31, 3
  %20 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %21 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract)
  %22 = sext i32 %offset.i.i31 to i64
  %23 = getelementptr ptr, ptr %.fca.0.extract, i64 %22
  %24 = getelementptr i8, ptr %23, i64 40
  %25 = load ptr, ptr %24, align 8
  %26 = call ptr %25({ ptr, ptr, ptr, i32 } %19, ptr nonnull %5)
  %27 = call i32 %26({ ptr, ptr, ptr, i32 } %19, { ptr, ptr, ptr, i32 } %19, ptr nonnull %5)
  %.not = icmp eq i32 %15, %27
  br i1 %.not, label %.preheader, label %.thread

.preheader:                                       ; preds = %4
  %28 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract5)
  %29 = getelementptr i8, ptr %23, i64 56
  br label %30

30:                                               ; preds = %.preheader, %34
  %.reg2mem44.0 = phi i32 [ %49, %34 ], [ 0, %.preheader ]
  %31 = load ptr, ptr %12, align 8
  %32 = load ptr, ptr %31, align 8
  %33 = call i32 %32(ptr %.fca.1.extract7)
  %.not50 = icmp sge i32 %.reg2mem44.0, %33
  br i1 %.not50, label %.thread, label %34

34:                                               ; preds = %30
  %35 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract5)
  %36 = load ptr, ptr %11, align 8
  %37 = load ptr, ptr %36, align 8
  %38 = call { ptr } %37(ptr %.fca.1.extract7)
  %.fca.0.extract15 = extractvalue { ptr } %38, 0
  %39 = zext nneg i32 %.reg2mem44.0 to i64
  %40 = getelementptr i8, ptr %.fca.0.extract15, i64 %39
  %41 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %42 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract)
  %43 = load ptr, ptr %29, align 8
  %44 = call ptr %43({ ptr, ptr, ptr, i32 } %19, ptr nonnull %5)
  %45 = call { ptr } %44({ ptr, ptr, ptr, i32 } %19, { ptr, ptr, ptr, i32 } %19, ptr nonnull %5)
  %.fca.0.extract13 = extractvalue { ptr } %45, 0
  %46 = getelementptr i8, ptr %.fca.0.extract13, i64 %39
  %47 = load i8, ptr %40, align 1
  %48 = load i8, ptr %46, align 1
  %.not18 = icmp eq i8 %47, %48
  %49 = add nuw nsw i32 %.reg2mem44.0, 1
  br i1 %.not18, label %30, label %.thread

.thread:                                          ; preds = %34, %30, %4
  %.reg2mem34.0 = phi i1 [ false, %4 ], [ %.not50, %30 ], [ %.not50, %34 ]
  %.reg2mem32.0 = phi ptr [ %6, %4 ], [ %7, %34 ], [ %8, %30 ]
  store i1 %.reg2mem34.0, ptr %.reg2mem32.0, align 1
  ret i1 %.reg2mem34.0
}

define { ptr, i8 } @String_pop_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 6499063144389013426
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %4 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract3)
  %5 = sext i32 %offset.i.i to i64
  %6 = getelementptr ptr, ptr %.fca.0.extract3, i64 %5
  %7 = getelementptr i8, ptr %6, i64 8
  %8 = load ptr, ptr %7, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = tail call i32 %9(ptr %.fca.1.extract4)
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %33, label %12

12:                                               ; preds = %3
  %13 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract3)
  %14 = load ptr, ptr %7, align 8
  %15 = load ptr, ptr %14, align 8
  %16 = tail call i32 %15(ptr %.fca.1.extract4)
  %17 = add i32 %16, -1
  %18 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract3)
  %19 = load ptr, ptr %7, align 8
  %20 = getelementptr i8, ptr %19, i64 8
  %21 = load ptr, ptr %20, align 8
  tail call void %21(ptr %.fca.1.extract4, i32 %17)
  %22 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract3)
  %23 = load ptr, ptr %6, align 8
  %24 = load ptr, ptr %23, align 8
  %25 = tail call { ptr } %24(ptr %.fca.1.extract4)
  %.fca.0.extract5 = extractvalue { ptr } %25, 0
  %26 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract3)
  %27 = load ptr, ptr %7, align 8
  %28 = load ptr, ptr %27, align 8
  %29 = tail call i32 %28(ptr %.fca.1.extract4)
  %30 = sext i32 %29 to i64
  %31 = getelementptr i8, ptr %.fca.0.extract5, i64 %30
  %32 = load i8, ptr %31, align 1
  br label %33

33:                                               ; preds = %3, %12
  %.reg2mem5.sroa.3.0 = phi i8 [ %32, %12 ], [ undef, %3 ]
  %.reg2mem5.sroa.0.0 = phi ptr [ @i8_typ, %12 ], [ @nil_typ, %3 ]
  %.reload6.fca.0.insert = insertvalue { ptr, i8 } poison, ptr %.reg2mem5.sroa.0.0, 0
  %.reload6.fca.1.insert = insertvalue { ptr, i8 } %.reload6.fca.0.insert, i8 %.reg2mem5.sroa.3.0, 1
  ret { ptr, i8 } %.reload6.fca.1.insert
}

define { ptr, ptr, ptr, i32 } @String_copy_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 6499063144389013426
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %4 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract)
  %5 = sext i32 %offset.i.i to i64
  %6 = getelementptr ptr, ptr %.fca.0.extract, i64 %5
  %7 = getelementptr i8, ptr %6, i64 8
  %8 = load ptr, ptr %7, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = tail call i32 %9(ptr %.fca.1.extract)
  %11 = sext i32 %10 to i64
  %result.i = tail call noalias ptr @bump_malloc_inner(i64 noundef %11, ptr nonnull @current_ptr) #29
  %12 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract)
  %13 = load ptr, ptr %7, align 8
  %14 = load ptr, ptr %13, align 8
  %15 = tail call i32 %14(ptr %.fca.1.extract)
  %16 = icmp sgt i32 %15, 0
  br i1 %16, label %.lr.ph, label %._crit_edge._crit_edge

.lr.ph:                                           ; preds = %3
  %17 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract)
  br label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph, %._crit_edge
  %.reg2mem17.061 = phi i32 [ 0, %.lr.ph ], [ %25, %._crit_edge ]
  %18 = load ptr, ptr %6, align 8
  %19 = load ptr, ptr %18, align 8
  %20 = tail call { ptr } %19(ptr %.fca.1.extract)
  %.fca.0.extract4 = extractvalue { ptr } %20, 0
  %21 = zext nneg i32 %.reg2mem17.061 to i64
  %22 = getelementptr i8, ptr %.fca.0.extract4, i64 %21
  %23 = getelementptr i8, ptr %result.i, i64 %21
  %24 = load i8, ptr %22, align 1
  store i8 %24, ptr %23, align 1
  %25 = add nuw nsw i32 %.reg2mem17.061, 1
  %26 = load ptr, ptr %7, align 8
  %27 = load ptr, ptr %26, align 8
  %28 = tail call i32 %27(ptr %.fca.1.extract)
  %29 = icmp slt i32 %25, %28
  br i1 %29, label %._crit_edge, label %._crit_edge._crit_edge

._crit_edge._crit_edge:                           ; preds = %._crit_edge, %3
  %30 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract)
  %31 = load ptr, ptr %7, align 8
  %32 = load ptr, ptr %31, align 8
  %33 = tail call i32 %32(ptr %.fca.1.extract)
  %34 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract)
  %35 = load ptr, ptr %7, align 8
  %36 = load ptr, ptr %35, align 8
  %37 = tail call i32 %36(ptr %.fca.1.extract)
  %result.i7 = tail call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %38 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract)
  %39 = load ptr, ptr %7, align 8
  %40 = load ptr, ptr %39, align 8
  %41 = tail call i32 %40(ptr %.fca.1.extract)
  %42 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract)
  %43 = load ptr, ptr %7, align 8
  %44 = load ptr, ptr %43, align 8
  %45 = tail call i32 %44(ptr %.fca.1.extract)
  %46 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %result.i7, 1
  %47 = insertvalue { ptr, ptr, ptr, i32 } %46, ptr undef, 2
  %48 = insertvalue { ptr, ptr, ptr, i32 } %47, i32 9, 3
  store ptr %result.i, ptr %result.i7, align 8
  %49 = getelementptr i8, ptr %result.i7, i64 8
  store i32 %41, ptr %49, align 4
  %50 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %51 = getelementptr i8, ptr %result.i7, i64 12
  store i32 %45, ptr %51, align 4
  ret { ptr, ptr, ptr, i32 } %48
}

define { ptr } @String_c_string_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 6499063144389013426
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %4 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract)
  %5 = sext i32 %offset.i.i to i64
  %6 = getelementptr ptr, ptr %.fca.0.extract, i64 %5
  %7 = getelementptr i8, ptr %6, i64 8
  %8 = load ptr, ptr %7, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = tail call i32 %9(ptr %.fca.1.extract)
  %11 = add i32 %10, 1
  %12 = sext i32 %11 to i64
  %result.i = tail call noalias ptr @bump_malloc_inner(i64 noundef %12, ptr nonnull @current_ptr) #29
  %13 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract)
  %14 = load ptr, ptr %7, align 8
  %15 = load ptr, ptr %14, align 8
  %16 = tail call i32 %15(ptr %.fca.1.extract)
  %17 = icmp sgt i32 %16, 0
  br i1 %17, label %.lr.ph, label %._crit_edge._crit_edge

.lr.ph:                                           ; preds = %3
  %18 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract)
  br label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph, %._crit_edge
  %.reg2mem17.017 = phi i32 [ 0, %.lr.ph ], [ %26, %._crit_edge ]
  %19 = load ptr, ptr %6, align 8
  %20 = load ptr, ptr %19, align 8
  %21 = tail call { ptr } %20(ptr %.fca.1.extract)
  %.fca.0.extract4 = extractvalue { ptr } %21, 0
  %22 = zext nneg i32 %.reg2mem17.017 to i64
  %23 = getelementptr i8, ptr %.fca.0.extract4, i64 %22
  %24 = getelementptr i8, ptr %result.i, i64 %22
  %25 = load i8, ptr %23, align 1
  store i8 %25, ptr %24, align 1
  %26 = add nuw nsw i32 %.reg2mem17.017, 1
  %27 = load ptr, ptr %7, align 8
  %28 = load ptr, ptr %27, align 8
  %29 = tail call i32 %28(ptr %.fca.1.extract)
  %30 = icmp slt i32 %26, %29
  br i1 %30, label %._crit_edge, label %._crit_edge._crit_edge

._crit_edge._crit_edge:                           ; preds = %._crit_edge, %3
  %31 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract)
  %32 = load ptr, ptr %7, align 8
  %33 = load ptr, ptr %32, align 8
  %34 = tail call i32 %33(ptr %.fca.1.extract)
  %35 = sext i32 %34 to i64
  %36 = getelementptr i8, ptr %result.i, i64 %35
  store i8 0, ptr %36, align 1
  %37 = insertvalue { ptr } undef, ptr %result.i, 0
  ret { ptr } %37
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(readwrite, argmem: read, inaccessiblemem: none)
define { ptr, ptr, ptr, i32 } @String_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) #9 {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %result.i = tail call noalias dereferenceable_or_null(40) ptr @bump_malloc_inner(i64 noundef 40, ptr nonnull @current_ptr) #29
  %4 = insertvalue { ptr, ptr, ptr, i32 } { ptr @StringIterator, ptr undef, ptr undef, i32 undef }, ptr %result.i, 1
  %5 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr undef, 2
  %6 = tail call ptr @llvm.invariant.start.p0(i64 48, ptr nonnull @StringIterator)
  %hash_coef.i.i45 = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i46 = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i47 = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i48 = mul i64 %hash_coef.i.i45, 6499063144389013426
  %shifted.i.i.i49 = lshr i64 %product.i.i.i48, 32
  %xored.i.i.i50 = xor i64 %shifted.i.i.i49, %product.i.i.i48
  %hash.i.i.i51 = and i64 %xored.i.i.i50, %tbl_size.i.i46
  %offset_ptr.i.i52 = getelementptr i32, ptr %offset_tbl.i.i47, i64 %hash.i.i.i51
  %offset.i.i = load i32, ptr %offset_ptr.i.i52, align 4
  store ptr %.fca.0.extract, ptr %result.i, align 8
  %7 = getelementptr i8, ptr %result.i, i64 8
  store ptr %.fca.1.extract, ptr %7, align 8
  %8 = getelementptr i8, ptr %result.i, i64 16
  store ptr %.fca.2.extract, ptr %8, align 8
  %9 = getelementptr i8, ptr %result.i, i64 24
  store i32 %offset.i.i, ptr %9, align 4
  %10 = tail call ptr @llvm.invariant.start.p0(i64 48, ptr nonnull @StringIterator)
  %11 = insertvalue { ptr, ptr, ptr, i32 } %5, i32 15, 3
  ret { ptr, ptr, ptr, i32 } %11
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, inaccessiblemem: none)
define { ptr, ptr, ptr, i32 } @String_repr_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) #10 {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 6499063144389013426
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i13 = load i32, ptr %offset_ptr.i.i, align 4
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %5 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %.fca.1.extract, 1
  %6 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %.fca.2.extract, 2
  %7 = insertvalue { ptr, ptr, ptr, i32 } %6, i32 %offset.i.i13, 3
  ret { ptr, ptr, ptr, i32 } %7
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_StringIterator(ptr nocapture readnone %0) #0 {
  ret { i64, i64 } { i64 40, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @StringIterator_B_init_strString({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 104
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @StringIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 112
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @StringIterator_init_strString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -7260570988945952630
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %hash_coef_ptr.i.i10 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i11 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i12 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i13 = load i64, ptr %hash_coef_ptr.i.i10, align 4
  %tbl_size.i.i14 = load i64, ptr %tbl_size_ptr.i.i11, align 4
  %offset_tbl.i.i15 = load ptr, ptr %offset_tbl_ptr.i.i12, align 8
  %product.i.i.i16 = mul i64 %hash_coef.i.i13, 6499063144389013426
  %shifted.i.i.i17 = lshr i64 %product.i.i.i16, 32
  %xored.i.i.i18 = xor i64 %shifted.i.i.i17, %product.i.i.i16
  %hash.i.i.i19 = and i64 %xored.i.i.i18, %tbl_size.i.i14
  %offset_ptr.i.i20 = getelementptr i32, ptr %offset_tbl.i.i15, i64 %hash.i.i.i19
  %offset.i.i35 = load i32, ptr %offset_ptr.i.i20, align 4
  %5 = tail call ptr @llvm.invariant.start.p0(i64 48, ptr %.fca.0.extract1)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract1, i64 %6
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr i8, ptr %8, i64 8
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %12 = insertvalue { ptr, ptr, ptr, i32 } %11, ptr %.fca.1.extract, 1
  %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.2.extract, 2
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, i32 %offset.i.i35, 3
  tail call void %10(ptr %.fca.1.extract3, { ptr, ptr, ptr, i32 } %14)
  %15 = tail call ptr @llvm.invariant.start.p0(i64 48, ptr %.fca.0.extract1)
  %16 = getelementptr i8, ptr %7, i64 8
  %17 = load ptr, ptr %16, align 8
  %18 = getelementptr i8, ptr %17, i64 8
  %19 = load ptr, ptr %18, align 8
  tail call void %19(ptr %.fca.1.extract3, i32 0)
  ret void
}

define { ptr, i160 } @StringIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = alloca [1 x ptr], align 8
  %7 = alloca { ptr }, align 8
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -7260570988945952630
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %8 = tail call ptr @llvm.invariant.start.p0(i64 48, ptr %.fca.0.extract9)
  %9 = sext i32 %offset.i.i to i64
  %10 = getelementptr ptr, ptr %.fca.0.extract9, i64 %9
  %11 = getelementptr i8, ptr %10, i64 8
  %12 = load ptr, ptr %11, align 8
  %13 = load ptr, ptr %12, align 8
  %14 = tail call i32 %13(ptr %.fca.1.extract11)
  %15 = tail call ptr @llvm.invariant.start.p0(i64 48, ptr %.fca.0.extract9)
  %16 = load ptr, ptr %10, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = tail call { ptr, ptr, ptr, i32 } %17(ptr %.fca.1.extract11)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %18, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %18, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %18, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %18, 3
  %hash_coef_ptr.i.i37 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i38 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i39 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i40 = load i64, ptr %hash_coef_ptr.i.i37, align 4
  %tbl_size.i.i41 = load i64, ptr %tbl_size_ptr.i.i38, align 4
  %offset_tbl.i.i42 = load ptr, ptr %offset_tbl_ptr.i.i39, align 8
  %product.i.i.i43 = mul i64 %hash_coef.i.i40, 6499063144389013426
  %shifted.i.i.i44 = lshr i64 %product.i.i.i43, 32
  %xored.i.i.i45 = xor i64 %shifted.i.i.i44, %product.i.i.i43
  %hash.i.i.i46 = and i64 %xored.i.i.i45, %tbl_size.i.i41
  %offset_ptr.i.i47 = getelementptr i32, ptr %offset_tbl.i.i42, i64 %hash.i.i.i46
  %offset.i.i48 = load i32, ptr %offset_ptr.i.i47, align 4
  %eq.i = icmp eq i32 %.fca.3.extract, %offset.i.i48
  tail call void @llvm.assume(i1 %eq.i) #30
  %19 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %20 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %.fca.1.extract, 1
  %21 = insertvalue { ptr, ptr, ptr, i32 } %20, ptr %.fca.2.extract, 2
  %22 = insertvalue { ptr, ptr, ptr, i32 } %21, i32 %.fca.3.extract, 3
  %23 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %24 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract)
  %25 = sext i32 %.fca.3.extract to i64
  %26 = getelementptr ptr, ptr %.fca.0.extract, i64 %25
  %27 = getelementptr i8, ptr %26, i64 40
  %28 = load ptr, ptr %27, align 8
  %29 = call ptr %28({ ptr, ptr, ptr, i32 } %22, ptr nonnull %4)
  %30 = call i32 %29({ ptr, ptr, ptr, i32 } %22, { ptr, ptr, ptr, i32 } %22, ptr nonnull %4)
  %31 = icmp slt i32 %14, %30
  br i1 %31, label %32, label %106

32:                                               ; preds = %3
  %33 = call ptr @llvm.invariant.start.p0(i64 48, ptr nonnull %.fca.0.extract9)
  %34 = load ptr, ptr %11, align 8
  %35 = load ptr, ptr %34, align 8
  %36 = call i32 %35(ptr %.fca.1.extract11)
  %37 = add i32 %36, 1
  %38 = call ptr @llvm.invariant.start.p0(i64 48, ptr nonnull %.fca.0.extract9)
  %39 = load ptr, ptr %11, align 8
  %40 = getelementptr i8, ptr %39, i64 8
  %41 = load ptr, ptr %40, align 8
  call void %41(ptr %.fca.1.extract11, i32 %37)
  %42 = call ptr @llvm.invariant.start.p0(i64 48, ptr nonnull %.fca.0.extract9)
  %43 = load ptr, ptr %10, align 8
  %44 = load ptr, ptr %43, align 8
  %45 = call { ptr, ptr, ptr, i32 } %44(ptr %.fca.1.extract11)
  %.fca.0.extract28 = extractvalue { ptr, ptr, ptr, i32 } %45, 0
  %.fca.1.extract30 = extractvalue { ptr, ptr, ptr, i32 } %45, 1
  %.fca.2.extract32 = extractvalue { ptr, ptr, ptr, i32 } %45, 2
  %.fca.3.extract34 = extractvalue { ptr, ptr, ptr, i32 } %45, 3
  %hash_coef_ptr.i.i51 = getelementptr i8, ptr %.fca.0.extract28, i64 8
  %tbl_size_ptr.i.i52 = getelementptr i8, ptr %.fca.0.extract28, i64 16
  %offset_tbl_ptr.i.i53 = getelementptr i8, ptr %.fca.0.extract28, i64 40
  %hash_coef.i.i54 = load i64, ptr %hash_coef_ptr.i.i51, align 4
  %tbl_size.i.i55 = load i64, ptr %tbl_size_ptr.i.i52, align 4
  %offset_tbl.i.i56 = load ptr, ptr %offset_tbl_ptr.i.i53, align 8
  %product.i.i.i57 = mul i64 %hash_coef.i.i54, 6499063144389013426
  %shifted.i.i.i58 = lshr i64 %product.i.i.i57, 32
  %xored.i.i.i59 = xor i64 %shifted.i.i.i58, %product.i.i.i57
  %hash.i.i.i60 = and i64 %xored.i.i.i59, %tbl_size.i.i55
  %offset_ptr.i.i61 = getelementptr i32, ptr %offset_tbl.i.i56, i64 %hash.i.i.i60
  %offset.i.i62 = load i32, ptr %offset_ptr.i.i61, align 4
  %eq.i65 = icmp eq i32 %.fca.3.extract34, %offset.i.i62
  call void @llvm.assume(i1 %eq.i65) #30
  %46 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract28, 0
  %47 = insertvalue { ptr, ptr, ptr, i32 } %46, ptr %.fca.1.extract30, 1
  %48 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %.fca.2.extract32, 2
  %49 = insertvalue { ptr, ptr, ptr, i32 } %48, i32 %.fca.3.extract34, 3
  %50 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %51 = call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract28)
  %52 = sext i32 %.fca.3.extract34 to i64
  %53 = getelementptr ptr, ptr %.fca.0.extract28, i64 %52
  %54 = getelementptr i8, ptr %53, i64 56
  %55 = load ptr, ptr %54, align 8
  %56 = call ptr %55({ ptr, ptr, ptr, i32 } %49, ptr nonnull %4)
  %57 = call { ptr } %56({ ptr, ptr, ptr, i32 } %49, { ptr, ptr, ptr, i32 } %49, ptr nonnull %4)
  %58 = call ptr @llvm.invariant.start.p0(i64 48, ptr nonnull %.fca.0.extract9)
  %59 = load ptr, ptr %11, align 8
  %60 = load ptr, ptr %59, align 8
  %61 = call i32 %60(ptr %.fca.1.extract11)
  %result.i = call noalias dereferenceable_or_null(1) ptr @bump_malloc_inner(i64 noundef 1, ptr nonnull @current_ptr) #29
  %62 = getelementptr inbounds i8, ptr %5, i64 8
  %63 = getelementptr inbounds i8, ptr %5, i64 24
  store ptr @Character, ptr %5, align 8
  store ptr %result.i, ptr %62, align 8
  store i32 9, ptr %63, align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %5)
  %65 = call ptr @llvm.invariant.start.p0(i64 48, ptr nonnull %.fca.0.extract9)
  %66 = load ptr, ptr %10, align 8
  %67 = load ptr, ptr %66, align 8
  %68 = call { ptr, ptr, ptr, i32 } %67(ptr %.fca.1.extract11)
  %.fca.0.extract20 = extractvalue { ptr, ptr, ptr, i32 } %68, 0
  %.fca.1.extract22 = extractvalue { ptr, ptr, ptr, i32 } %68, 1
  %.fca.2.extract24 = extractvalue { ptr, ptr, ptr, i32 } %68, 2
  %.fca.3.extract26 = extractvalue { ptr, ptr, ptr, i32 } %68, 3
  %hash_coef_ptr.i.i67 = getelementptr i8, ptr %.fca.0.extract20, i64 8
  %tbl_size_ptr.i.i68 = getelementptr i8, ptr %.fca.0.extract20, i64 16
  %offset_tbl_ptr.i.i69 = getelementptr i8, ptr %.fca.0.extract20, i64 40
  %hash_coef.i.i70 = load i64, ptr %hash_coef_ptr.i.i67, align 4
  %tbl_size.i.i71 = load i64, ptr %tbl_size_ptr.i.i68, align 4
  %offset_tbl.i.i72 = load ptr, ptr %offset_tbl_ptr.i.i69, align 8
  %product.i.i.i73 = mul i64 %hash_coef.i.i70, 6499063144389013426
  %shifted.i.i.i74 = lshr i64 %product.i.i.i73, 32
  %xored.i.i.i75 = xor i64 %shifted.i.i.i74, %product.i.i.i73
  %hash.i.i.i76 = and i64 %xored.i.i.i75, %tbl_size.i.i71
  %offset_ptr.i.i77 = getelementptr i32, ptr %offset_tbl.i.i72, i64 %hash.i.i.i76
  %offset.i.i78 = load i32, ptr %offset_ptr.i.i77, align 4
  %eq.i81 = icmp eq i32 %.fca.3.extract26, %offset.i.i78
  call void @llvm.assume(i1 %eq.i81) #30
  %69 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract20, 0
  %70 = insertvalue { ptr, ptr, ptr, i32 } %69, ptr %.fca.1.extract22, 1
  %71 = insertvalue { ptr, ptr, ptr, i32 } %70, ptr %.fca.2.extract24, 2
  %72 = insertvalue { ptr, ptr, ptr, i32 } %71, i32 %.fca.3.extract26, 3
  %73 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %74 = call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract20)
  %75 = sext i32 %.fca.3.extract26 to i64
  %76 = getelementptr ptr, ptr %.fca.0.extract20, i64 %75
  %77 = getelementptr i8, ptr %76, i64 56
  %78 = load ptr, ptr %77, align 8
  %79 = call ptr %78({ ptr, ptr, ptr, i32 } %72, ptr nonnull %4)
  %80 = call { ptr } %79({ ptr, ptr, ptr, i32 } %72, { ptr, ptr, ptr, i32 } %72, ptr nonnull %4)
  %.fca.0.extract17 = extractvalue { ptr } %80, 0
  %81 = call ptr @llvm.invariant.start.p0(i64 48, ptr nonnull %.fca.0.extract9)
  %82 = load ptr, ptr %11, align 8
  %83 = load ptr, ptr %82, align 8
  %84 = call i32 %83(ptr %.fca.1.extract11)
  %85 = add i32 %84, -1
  %86 = sext i32 %85 to i64
  %87 = getelementptr i8, ptr %.fca.0.extract17, i64 %86
  %88 = load i8, ptr %87, align 1
  %89 = load ptr, ptr %5, align 8
  %90 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %89, 0
  %91 = load ptr, ptr %62, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } %90, ptr %91, 1
  %93 = getelementptr inbounds i8, ptr %5, i64 16
  %94 = load ptr, ptr %93, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %94, 2
  %96 = load i32, ptr %63, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %95, i32 %96, 3
  store ptr @_parameterization_Ptri8, ptr %6, align 8
  %98 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %6)
  %99 = call ptr @llvm.invariant.start.p0(i64 40, ptr %89)
  %100 = sext i32 %96 to i64
  %101 = getelementptr ptr, ptr %89, i64 %100
  %102 = getelementptr i8, ptr %101, i64 16
  %103 = load ptr, ptr %102, align 8
  store ptr @i8_typ, ptr %7, align 8
  %104 = call ptr %103({ ptr, ptr, ptr, i32 } %97, ptr nonnull %7)
  call void %104({ ptr, ptr, ptr, i32 } %97, { ptr, ptr, ptr, i32 } %97, ptr nonnull %6, i8 %88)
  %105 = load i160, ptr %62, align 8
  br label %106

106:                                              ; preds = %3, %32
  %.reg2mem5.sroa.3.0 = phi i160 [ %105, %32 ], [ undef, %3 ]
  %.reg2mem5.sroa.0.0 = phi ptr [ %89, %32 ], [ @nil_typ, %3 ]
  %.reload6.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %.reg2mem5.sroa.0.0, 0
  %.reload6.fca.1.insert = insertvalue { ptr, i160 } %.reload6.fca.0.insert, i160 %.reg2mem5.sroa.3.0, 1
  ret { ptr, i160 } %.reload6.fca.1.insert
}

define linkonce_odr { i64, i64 } @_size_i8_typ(ptr %0) {
  ret { i64, i64 } { i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 1 }
}

define linkonce_odr { ptr, i160 } @_box_i8_typ(ptr %0, ptr %1) {
  %3 = load i8, ptr %0, align 1
  %.sroa.2.sroa.0.0.insert.ext = zext i8 %3 to i160
  %4 = insertvalue { ptr, i160 } { ptr @i8_typ, i160 undef }, i160 %.sroa.2.sroa.0.0.insert.ext, 1
  ret { ptr, i160 } %4
}

define linkonce_odr void @_unbox_i8_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %.fca.1.extract = extractvalue { ptr, i160 } %0, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i8
  store i8 %.sroa.1.8.extract.trunc, ptr %2, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_Character(ptr nocapture readnone %0) #0 {
  ret { i64, i64 } { i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 1 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Character_B_byte_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 96
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Character_B_init_bytePtri8({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 104
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define i8 @Character_byte_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 6681222582356018452
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %4 = tail call ptr @llvm.invariant.start.p0(i64 40, ptr %.fca.0.extract)
  %5 = sext i32 %offset.i.i to i64
  %6 = getelementptr ptr, ptr %.fca.0.extract, i64 %5
  %7 = load ptr, ptr %6, align 8
  %8 = load ptr, ptr %7, align 8
  %9 = tail call i8 %8(ptr %.fca.1.extract)
  ret i8 %9
}

define void @Character_init_bytePtri8({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i8 %3) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 6681222582356018452
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %5 = tail call ptr @llvm.invariant.start.p0(i64 40, ptr %.fca.0.extract)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract, i64 %6
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr i8, ptr %8, i64 8
  %10 = load ptr, ptr %9, align 8
  tail call void %10(ptr %.fca.1.extract, i8 %3)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i8 @Character_getter_byte(ptr nocapture readonly %0) #3 {
  %2 = load i8, ptr %0, align 1
  ret i8 %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Character_setter_byte(ptr nocapture writeonly %0, i8 %1) #6 {
  store i8 %1, ptr %0, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @StringIterator_getter_index(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 32
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @StringIterator_setter_index(ptr nocapture writeonly %0, i32 %1) #6 {
  %3 = getelementptr i8, ptr %0, i64 32
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @StringIterator_getter_str(ptr nocapture readonly %0) #3 {
  %2 = load ptr, ptr %0, align 8
  %3 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2, 0
  %4 = getelementptr i8, ptr %0, i64 8
  %5 = load ptr, ptr %4, align 8
  %6 = insertvalue { ptr, ptr, ptr, i32 } %3, ptr %5, 1
  %7 = getelementptr i8, ptr %0, i64 16
  %8 = load ptr, ptr %7, align 8
  %9 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr %8, 2
  %10 = getelementptr i8, ptr %0, i64 24
  %11 = load i32, ptr %10, align 4
  %12 = insertvalue { ptr, ptr, ptr, i32 } %9, i32 %11, 3
  ret { ptr, ptr, ptr, i32 } %12
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @StringIterator_setter_str(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #6 {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %0, align 8
  %3 = getelementptr i8, ptr %0, i64 8
  store ptr %.fca.1.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.2.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store i32 %.fca.3.extract, ptr %5, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @String_getter_capacity(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 12
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @String_setter_capacity(ptr nocapture writeonly %0, i32 %1) #6 {
  %3 = getelementptr i8, ptr %0, i64 12
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @String_getter_length(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @String_setter_length(ptr nocapture writeonly %0, i32 %1) #6 {
  %3 = getelementptr i8, ptr %0, i64 8
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr } @String_getter_bytes(ptr nocapture readonly %0) #3 {
  %2 = load ptr, ptr %0, align 8
  %3 = insertvalue { ptr } undef, ptr %2, 0
  ret { ptr } %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @String_setter_bytes(ptr nocapture writeonly %0, { ptr } %1) #6 {
  %.fca.0.extract = extractvalue { ptr } %1, 0
  store ptr %.fca.0.extract, ptr %0, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_Exception(ptr nocapture readnone %0) #0 {
  ret { i64, i64 } { i64 72, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Exception_B_init_messageString({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 136
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Exception_B_init_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 144
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Exception_B_set_info_line_numberPtri32_file_nameString({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 152
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Exception_B_report_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 160
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Exception_B_print_message_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 168
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @Exception_init_messageString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 9027164862567808692
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %hash_coef_ptr.i.i10 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i11 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i12 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i13 = load i64, ptr %hash_coef_ptr.i.i10, align 4
  %tbl_size.i.i14 = load i64, ptr %tbl_size_ptr.i.i11, align 4
  %offset_tbl.i.i15 = load ptr, ptr %offset_tbl_ptr.i.i12, align 8
  %product.i.i.i16 = mul i64 %hash_coef.i.i13, 6499063144389013426
  %shifted.i.i.i17 = lshr i64 %product.i.i.i16, 32
  %xored.i.i.i18 = xor i64 %shifted.i.i.i17, %product.i.i.i16
  %hash.i.i.i19 = and i64 %xored.i.i.i18, %tbl_size.i.i14
  %offset_ptr.i.i20 = getelementptr i32, ptr %offset_tbl.i.i15, i64 %hash.i.i.i19
  %offset.i.i35 = load i32, ptr %offset_ptr.i.i20, align 4
  %5 = tail call ptr @llvm.invariant.start.p0(i64 104, ptr %.fca.0.extract1)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract1, i64 %6
  %8 = getelementptr i8, ptr %7, i64 16
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr i8, ptr %9, i64 8
  %11 = load ptr, ptr %10, align 8
  %12 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.1.extract, 1
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.2.extract, 2
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, i32 %offset.i.i35, 3
  tail call void %11(ptr %.fca.1.extract3, { ptr, ptr, ptr, i32 } %15)
  %16 = tail call ptr @llvm.invariant.start.p0(i64 104, ptr %.fca.0.extract1)
  %17 = load ptr, ptr %7, align 8
  %18 = getelementptr i8, ptr %17, i64 8
  %19 = load ptr, ptr %18, align 8
  tail call void %19(ptr %.fca.1.extract3, i32 0)
  %result.i = tail call noalias dereferenceable_or_null(1) ptr @bump_malloc_inner(i64 noundef 1, ptr nonnull @current_ptr) #29
  %result.i37 = tail call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %20 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %result.i37, 1
  %21 = insertvalue { ptr, ptr, ptr, i32 } %20, ptr undef, 2
  %22 = insertvalue { ptr, ptr, ptr, i32 } %21, i32 9, 3
  store ptr %result.i, ptr %result.i37, align 8
  %23 = getelementptr i8, ptr %result.i37, i64 8
  store i32 0, ptr %23, align 4
  %24 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %25 = getelementptr i8, ptr %result.i37, i64 12
  store i32 1, ptr %25, align 4
  %26 = tail call ptr @llvm.invariant.start.p0(i64 104, ptr %.fca.0.extract1)
  %27 = getelementptr i8, ptr %7, i64 8
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr i8, ptr %28, i64 8
  %30 = load ptr, ptr %29, align 8
  tail call void %30(ptr %.fca.1.extract3, { ptr, ptr, ptr, i32 } %22)
  ret void
}

define void @Exception_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 9027164862567808692
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %4 = tail call ptr @llvm.invariant.start.p0(i64 104, ptr %.fca.0.extract)
  %5 = sext i32 %offset.i.i to i64
  %6 = getelementptr ptr, ptr %.fca.0.extract, i64 %5
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr i8, ptr %7, i64 8
  %9 = load ptr, ptr %8, align 8
  tail call void %9(ptr %.fca.1.extract, i32 0)
  %result.i = tail call noalias dereferenceable_or_null(7) ptr @bump_malloc_inner(i64 noundef 7, ptr nonnull @current_ptr) #29
  store <6 x i8> <i8 60, i8 78, i8 111, i8 110, i8 101, i8 62>, ptr %result.i, align 8
  %result.i2 = tail call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %10 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %result.i2, 1
  %11 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr undef, 2
  %12 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 9, 3
  store ptr %result.i, ptr %result.i2, align 8
  %13 = getelementptr i8, ptr %result.i2, i64 8
  store i32 6, ptr %13, align 4
  %14 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %15 = getelementptr i8, ptr %result.i2, i64 12
  store i32 7, ptr %15, align 4
  %16 = tail call ptr @llvm.invariant.start.p0(i64 104, ptr %.fca.0.extract)
  %17 = getelementptr i8, ptr %6, i64 16
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr i8, ptr %18, i64 8
  %20 = load ptr, ptr %19, align 8
  tail call void %20(ptr %.fca.1.extract, { ptr, ptr, ptr, i32 } %12)
  %result.i17 = tail call noalias dereferenceable_or_null(1) ptr @bump_malloc_inner(i64 noundef 1, ptr nonnull @current_ptr) #29
  %result.i18 = tail call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %21 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %result.i18, 1
  %22 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr undef, 2
  %23 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 9, 3
  store ptr %result.i17, ptr %result.i18, align 8
  %24 = getelementptr i8, ptr %result.i18, i64 8
  store i32 0, ptr %24, align 4
  %25 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %26 = getelementptr i8, ptr %result.i18, i64 12
  store i32 1, ptr %26, align 4
  %27 = tail call ptr @llvm.invariant.start.p0(i64 104, ptr %.fca.0.extract)
  %28 = getelementptr i8, ptr %6, i64 8
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  tail call void %31(ptr %.fca.1.extract, { ptr, ptr, ptr, i32 } %23)
  ret void
}

define void @Exception_set_info_line_numberPtri32_file_nameString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3, { ptr, ptr, ptr, i32 } %4) {
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 9027164862567808692
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %6 = tail call ptr @llvm.invariant.start.p0(i64 104, ptr %.fca.0.extract1)
  %7 = sext i32 %offset.i.i to i64
  %8 = getelementptr ptr, ptr %.fca.0.extract1, i64 %7
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr i8, ptr %9, i64 8
  %11 = load ptr, ptr %10, align 8
  tail call void %11(ptr %.fca.1.extract3, i32 %3)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %hash_coef_ptr.i.i10 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i11 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i12 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i13 = load i64, ptr %hash_coef_ptr.i.i10, align 4
  %tbl_size.i.i14 = load i64, ptr %tbl_size_ptr.i.i11, align 4
  %offset_tbl.i.i15 = load ptr, ptr %offset_tbl_ptr.i.i12, align 8
  %product.i.i.i16 = mul i64 %hash_coef.i.i13, 6499063144389013426
  %shifted.i.i.i17 = lshr i64 %product.i.i.i16, 32
  %xored.i.i.i18 = xor i64 %shifted.i.i.i17, %product.i.i.i16
  %hash.i.i.i19 = and i64 %xored.i.i.i18, %tbl_size.i.i14
  %offset_ptr.i.i20 = getelementptr i32, ptr %offset_tbl.i.i15, i64 %hash.i.i.i19
  %offset.i.i35 = load i32, ptr %offset_ptr.i.i20, align 4
  %12 = tail call ptr @llvm.invariant.start.p0(i64 104, ptr %.fca.0.extract1)
  %13 = getelementptr i8, ptr %8, i64 8
  %14 = load ptr, ptr %13, align 8
  %15 = getelementptr i8, ptr %14, i64 8
  %16 = load ptr, ptr %15, align 8
  %17 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %18 = insertvalue { ptr, ptr, ptr, i32 } %17, ptr %.fca.1.extract, 1
  %19 = insertvalue { ptr, ptr, ptr, i32 } %18, ptr %.fca.2.extract, 2
  %20 = insertvalue { ptr, ptr, ptr, i32 } %19, i32 %offset.i.i35, 3
  tail call void %16(ptr %.fca.1.extract3, { ptr, ptr, ptr, i32 } %20)
  ret void
}

define void @Exception_report_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
.lr.ph.i:
  %3 = alloca [0 x ptr], align 8
  %.fca.0.extract19 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract21 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract19, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract19, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract19, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 9027164862567808692
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %result.i = tail call noalias dereferenceable_or_null(10) ptr @bump_malloc_inner(i64 noundef 10, ptr nonnull @current_ptr) #29
  store <9 x i8> <i8 45, i8 45, i8 45, i8 45, i8 45, i8 45, i8 45, i8 45, i8 45>, ptr %result.i, align 16
  %result.i.i = tail call noalias dereferenceable_or_null(10) ptr @bump_malloc_inner(i64 noundef 10, ptr nonnull @current_ptr) #29
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 1 dereferenceable(9) %result.i.i, ptr noundef nonnull align 1 dereferenceable(9) %result.i, i64 9, i1 false)
  %puts = tail call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i)
  %result.i33 = tail call noalias dereferenceable_or_null(27) ptr @bump_malloc_inner(i64 noundef 27, ptr nonnull @current_ptr) #29
  store <26 x i8> <i8 69, i8 120, i8 99, i8 101, i8 112, i8 116, i8 105, i8 111, i8 110, i8 32, i8 116, i8 104, i8 114, i8 111, i8 119, i8 110, i8 32, i8 102, i8 114, i8 111, i8 109, i8 32, i8 102, i8 105, i8 108, i8 101>, ptr %result.i33, align 32
  %result.i.i132 = tail call noalias dereferenceable_or_null(27) ptr @bump_malloc_inner(i64 noundef 27, ptr nonnull @current_ptr) #29
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 1 dereferenceable(26) %result.i.i132, ptr noundef nonnull align 1 dereferenceable(26) %result.i33, i64 26, i1 false)
  %4 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %puts27 = tail call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i132)
  %5 = tail call ptr @llvm.invariant.start.p0(i64 104, ptr %.fca.0.extract19)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract19, i64 %6
  %8 = getelementptr i8, ptr %7, i64 8
  %9 = load ptr, ptr %8, align 8
  %10 = load ptr, ptr %9, align 8
  %11 = tail call { ptr, ptr, ptr, i32 } %10(ptr %.fca.1.extract21)
  %.fca.0.extract10 = extractvalue { ptr, ptr, ptr, i32 } %11, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %11, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %11, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %11, 3
  %hash_coef_ptr.i.i36 = getelementptr i8, ptr %.fca.0.extract10, i64 8
  %tbl_size_ptr.i.i37 = getelementptr i8, ptr %.fca.0.extract10, i64 16
  %offset_tbl_ptr.i.i38 = getelementptr i8, ptr %.fca.0.extract10, i64 40
  %hash_coef.i.i39 = load i64, ptr %hash_coef_ptr.i.i36, align 4
  %tbl_size.i.i40 = load i64, ptr %tbl_size_ptr.i.i37, align 4
  %offset_tbl.i.i41 = load ptr, ptr %offset_tbl_ptr.i.i38, align 8
  %product.i.i.i42 = mul i64 %hash_coef.i.i39, 6499063144389013426
  %shifted.i.i.i43 = lshr i64 %product.i.i.i42, 32
  %xored.i.i.i44 = xor i64 %shifted.i.i.i43, %product.i.i.i42
  %hash.i.i.i45 = and i64 %xored.i.i.i44, %tbl_size.i.i40
  %offset_ptr.i.i46 = getelementptr i32, ptr %offset_tbl.i.i41, i64 %hash.i.i.i45
  %offset.i.i47 = load i32, ptr %offset_ptr.i.i46, align 4
  %eq.i = icmp eq i32 %.fca.3.extract, %offset.i.i47
  tail call void @llvm.assume(i1 %eq.i) #30
  %12 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract10, 0
  %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.1.extract, 1
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.2.extract, 2
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, i32 %.fca.3.extract, 3
  %16 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
  %17 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract10)
  %18 = sext i32 %.fca.3.extract to i64
  %19 = getelementptr ptr, ptr %.fca.0.extract10, i64 %18
  %20 = getelementptr i8, ptr %19, i64 112
  %21 = load ptr, ptr %20, align 8
  %22 = call ptr %21({ ptr, ptr, ptr, i32 } %15, ptr nonnull %3)
  %23 = call { ptr } %22({ ptr, ptr, ptr, i32 } %15, { ptr, ptr, ptr, i32 } %15, ptr nonnull %3)
  %.fca.0.extract8 = extractvalue { ptr } %23, 0
  %puts28 = call i32 @puts(ptr nonnull dereferenceable(1) %.fca.0.extract8)
  %result.i49 = call noalias dereferenceable_or_null(8) ptr @bump_malloc_inner(i64 noundef 8, ptr nonnull @current_ptr) #29
  store <7 x i8> <i8 65, i8 116, i8 32, i8 108, i8 105, i8 110, i8 101>, ptr %result.i49, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
  %result.i.i152 = call noalias dereferenceable_or_null(8) ptr @bump_malloc_inner(i64 noundef 8, ptr nonnull @current_ptr) #29
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 1 dereferenceable(7) %result.i.i152, ptr noundef nonnull align 1 dereferenceable(7) %result.i49, i64 7, i1 false)
  %25 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %26 = getelementptr i8, ptr %result.i.i152, i64 7
  store i8 0, ptr %26, align 1
  %puts29 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i152)
  %27 = call ptr @llvm.invariant.start.p0(i64 104, ptr %.fca.0.extract19)
  %28 = load ptr, ptr %7, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %.fca.1.extract21)
  %31 = call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i32_string, i32 %30)
  %result.i51 = call noalias dereferenceable_or_null(13) ptr @bump_malloc_inner(i64 noundef 13, ptr nonnull @current_ptr) #29
  store <12 x i8> <i8 87, i8 105, i8 116, i8 104, i8 32, i8 109, i8 101, i8 115, i8 115, i8 97, i8 103, i8 101>, ptr %result.i51, align 16
  %32 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
  %result.i.i172 = call noalias dereferenceable_or_null(13) ptr @bump_malloc_inner(i64 noundef 13, ptr nonnull @current_ptr) #29
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 1 dereferenceable(12) %result.i.i172, ptr noundef nonnull align 1 dereferenceable(12) %result.i51, i64 12, i1 false)
  %.fca.2.extract23 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %33 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %34 = getelementptr i8, ptr %result.i.i172, i64 12
  store i8 0, ptr %34, align 1
  %puts30 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i172)
  %35 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract19, 0
  %36 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %.fca.1.extract21, 1
  %37 = insertvalue { ptr, ptr, ptr, i32 } %36, ptr %.fca.2.extract23, 2
  %38 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %offset.i.i, 3
  %39 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
  %40 = call ptr @llvm.invariant.start.p0(i64 104, ptr %.fca.0.extract19)
  %41 = getelementptr i8, ptr %7, i64 56
  %42 = load ptr, ptr %41, align 8
  %43 = call ptr %42({ ptr, ptr, ptr, i32 } %38, ptr nonnull %3)
  call void %43({ ptr, ptr, ptr, i32 } %38, { ptr, ptr, ptr, i32 } %38, ptr nonnull %3)
  %result.i53 = call noalias dereferenceable_or_null(10) ptr @bump_malloc_inner(i64 noundef 10, ptr nonnull @current_ptr) #29
  store <9 x i8> <i8 45, i8 45, i8 45, i8 45, i8 45, i8 45, i8 45, i8 45, i8 45>, ptr %result.i53, align 16
  %44 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
  %result.i.i192 = call noalias dereferenceable_or_null(10) ptr @bump_malloc_inner(i64 noundef 10, ptr nonnull @current_ptr) #29
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 1 dereferenceable(9) %result.i.i192, ptr noundef nonnull align 1 dereferenceable(9) %result.i53, i64 9, i1 false)
  %45 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %46 = getelementptr i8, ptr %result.i.i192, i64 9
  store i8 0, ptr %46, align 1
  %puts31 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i192)
  ret void
}

define void @Exception_print_message_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 9027164862567808692
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %5 = tail call ptr @llvm.invariant.start.p0(i64 104, ptr %.fca.0.extract2)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract2, i64 %6
  %8 = getelementptr i8, ptr %7, i64 16
  %9 = load ptr, ptr %8, align 8
  %10 = load ptr, ptr %9, align 8
  %11 = tail call { ptr, ptr, ptr, i32 } %10(ptr %.fca.1.extract4)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %11, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %11, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %11, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %11, 3
  %hash_coef_ptr.i.i11 = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i12 = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i13 = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i14 = load i64, ptr %hash_coef_ptr.i.i11, align 4
  %tbl_size.i.i15 = load i64, ptr %tbl_size_ptr.i.i12, align 4
  %offset_tbl.i.i16 = load ptr, ptr %offset_tbl_ptr.i.i13, align 8
  %product.i.i.i17 = mul i64 %hash_coef.i.i14, 6499063144389013426
  %shifted.i.i.i18 = lshr i64 %product.i.i.i17, 32
  %xored.i.i.i19 = xor i64 %shifted.i.i.i18, %product.i.i.i17
  %hash.i.i.i20 = and i64 %xored.i.i.i19, %tbl_size.i.i15
  %offset_ptr.i.i21 = getelementptr i32, ptr %offset_tbl.i.i16, i64 %hash.i.i.i20
  %offset.i.i22 = load i32, ptr %offset_ptr.i.i21, align 4
  %eq.i = icmp eq i32 %.fca.3.extract, %offset.i.i22
  tail call void @llvm.assume(i1 %eq.i) #30
  %12 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.1.extract, 1
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.2.extract, 2
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, i32 %.fca.3.extract, 3
  %16 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %17 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract1)
  %18 = sext i32 %.fca.3.extract to i64
  %19 = getelementptr ptr, ptr %.fca.0.extract1, i64 %18
  %20 = getelementptr i8, ptr %19, i64 112
  %21 = load ptr, ptr %20, align 8
  %22 = call ptr %21({ ptr, ptr, ptr, i32 } %15, ptr nonnull %4)
  %23 = call { ptr } %22({ ptr, ptr, ptr, i32 } %15, { ptr, ptr, ptr, i32 } %15, ptr nonnull %4)
  %.fca.0.extract = extractvalue { ptr } %23, 0
  %puts = call i32 @puts(ptr nonnull dereferenceable(1) %.fca.0.extract)
  ret void
}

; Function Attrs: nofree nounwind
declare noundef i32 @printf(ptr nocapture noundef readonly, ...) local_unnamed_addr #11

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @Exception_getter_message(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 48
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 56
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 64
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Exception_setter_message(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #6 {
  %3 = getelementptr i8, ptr %0, i64 40
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 48
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 56
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 64
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @Exception_getter_file_name(ptr nocapture readonly %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Exception_setter_file_name(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #6 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 32
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @Exception_getter_line_number(ptr nocapture readonly %0) #3 {
  %2 = load i32, ptr %0, align 4
  ret i32 %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Exception_setter_line_number(ptr nocapture writeonly %0, i32 %1) #6 {
  store i32 %1, ptr %0, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Iterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 80
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @report_exception({ ptr } %0) local_unnamed_addr {
  %2 = alloca [0 x ptr], align 8
  %.fca.0.extract2 = extractvalue { ptr } %0, 0
  %3 = getelementptr i8, ptr %.fca.0.extract2, i64 48
  %4 = load { ptr, i160 }, ptr %3, align 8
  %.fca.0.extract = extractvalue { ptr, i160 } %4, 0
  %5 = icmp ne ptr %.fca.0.extract, @nil_typ
  %6 = icmp ne ptr %.fca.0.extract, null
  %.not4 = and i1 %5, %6
  br i1 %.not4, label %7, label %._crit_edge

7:                                                ; preds = %1
  %.fca.1.extract = extractvalue { ptr, i160 } %4, 1
  %.sroa.3.8.extract.trunc = trunc i160 %.fca.1.extract to i64
  %8 = inttoptr i64 %.sroa.3.8.extract.trunc to ptr
  %.sroa.5.8.extract.shift = lshr i160 %.fca.1.extract, 64
  %.sroa.5.8.extract.trunc = trunc i160 %.sroa.5.8.extract.shift to i64
  %9 = inttoptr i64 %.sroa.5.8.extract.trunc to ptr
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 9027164862567808692
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %11 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %8, 1
  %12 = insertvalue { ptr, ptr, ptr, i32 } %11, ptr %9, 2
  %13 = insertvalue { ptr, ptr, ptr, i32 } %12, i32 %offset.i.i, 3
  %14 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %15 = tail call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract)
  %16 = sext i32 %offset.i.i to i64
  %17 = getelementptr ptr, ptr %.fca.0.extract, i64 %16
  %18 = getelementptr i8, ptr %17, i64 48
  %19 = load ptr, ptr %18, align 8
  %20 = call ptr %19({ ptr, ptr, ptr, i32 } %13, ptr nonnull %2)
  call void %20({ ptr, ptr, ptr, i32 } %13, { ptr, ptr, ptr, i32 } %13, ptr nonnull %2)
  br label %._crit_edge

._crit_edge:                                      ; preds = %1, %7
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_IO(ptr nocapture readnone %0) #0 {
  ret { i64, i64 } { i64 0, i64 1 }
}

; Function Attrs: mustprogress willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil(ptr nocapture %0) #4 {
  %2 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %3 = load ptr, ptr %0, align 8
  %4 = getelementptr i8, ptr %3, i64 8
  %5 = getelementptr i8, ptr %3, i64 16
  %6 = getelementptr i8, ptr %3, i64 24
  %7 = getelementptr i8, ptr %3, i64 32
  %8 = load i64, ptr %4, align 4
  %9 = load i64, ptr %5, align 4
  %10 = load ptr, ptr %6, align 8
  %11 = load ptr, ptr %7, align 8
  %result.i = tail call i1 %10(i64 %9, i64 %8, i64 -5126806859456325683, i64 ptrtoint (ptr @nil_typ to i64), ptr readonly %11) #3
  %12 = icmp eq ptr %3, null
  %13 = or i1 %12, %result.i
  br i1 %13, label %21, label %14

14:                                               ; preds = %1
  %result.i3 = tail call i1 %10(i64 %9, i64 %8, i64 2582149688529881115, i64 ptrtoint (ptr @i8_typ to i64), ptr readonly %11) #3
  br i1 %result.i3, label %21, label %15

15:                                               ; preds = %14
  %result.i4 = tail call i1 %10(i64 %9, i64 %8, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr readonly %11) #3
  %result.i5 = tail call i1 %10(i64 %9, i64 %8, i64 6681222582356018452, i64 ptrtoint (ptr @Character to i64), ptr readonly %11) #3
  %not.result.i4 = xor i1 %result.i4, true
  %.reg2mem49.0 = select i1 %not.result.i4, i1 true, i1 %result.i5
  br i1 %.reg2mem49.0, label %16, label %21

16:                                               ; preds = %15
  %result.i6 = tail call i1 %10(i64 %9, i64 %8, i64 -757315540097298781, i64 ptrtoint (ptr @f64_typ to i64), ptr readonly %11) #3
  br i1 %result.i6, label %21, label %17

17:                                               ; preds = %16
  %not.result.i5 = xor i1 %result.i5, true
  %.reg2mem47.0 = or i1 %result.i4, %not.result.i5
  br i1 %.reg2mem47.0, label %18, label %21

18:                                               ; preds = %17
  %result.i9 = tail call i1 %10(i64 %9, i64 %8, i64 -7260840641129990118, i64 ptrtoint (ptr @Representable to i64), ptr readonly %11) #3
  %result.i9.not = xor i1 %result.i9, true
  %.reg2mem45.0 = or i1 %result.i4, %result.i5
  %or.cond = select i1 %result.i9.not, i1 true, i1 %.reg2mem45.0
  br i1 %or.cond, label %.critedge, label %21

.critedge:                                        ; preds = %18
  %result.i12 = tail call i1 %10(i64 %9, i64 %8, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr readonly %11) #3
  br i1 %result.i12, label %21, label %19

19:                                               ; preds = %.critedge
  %result.i13 = tail call i1 %10(i64 %9, i64 %8, i64 5801531371504802705, i64 ptrtoint (ptr @bool_typ to i64), ptr readonly %11) #3
  %20 = select i1 %result.i13, i32 5, i32 1
  br label %21

21:                                               ; preds = %18, %14, %15, %16, %17, %.critedge, %19, %1
  %.reg2mem29.0 = phi i32 [ 9, %1 ], [ 2, %14 ], [ 3, %16 ], [ %20, %19 ], [ 7, %.critedge ], [ 8, %17 ], [ 4, %15 ], [ 6, %18 ]
  %22 = zext nneg i32 %.reg2mem29.0 to i64
  %23 = getelementptr [10 x ptr], ptr @IO, i64 0, i64 %22
  %24 = getelementptr i8, ptr %23, i64 72
  %25 = load ptr, ptr %24, align 8
  ret ptr %25
}

; Function Attrs: nofree nounwind
define void @IO__Self_print_xPtri64(ptr nocapture readnone %0, { ptr, i160 } %1) #11 {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i64
  %3 = tail call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i64_string, i64 %.sroa.1.8.extract.trunc)
  ret void
}

; Function Attrs: nofree nounwind
define void @IO__Self_print_xPtri8(ptr nocapture readnone %0, { ptr, i160 } %1) #11 {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i8
  %3 = sext i8 %.sroa.1.8.extract.trunc to i32
  %4 = tail call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i32_string, i32 %3)
  ret void
}

; Function Attrs: nofree nounwind
define void @IO__Self_print_xPtrf64(ptr nocapture readnone %0, { ptr, i160 } %1) #11 {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i64
  %3 = bitcast i64 %.sroa.1.8.extract.trunc to double
  %4 = tail call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @float_string, double %3)
  ret void
}

define void @IO__Self_print_xString(ptr nocapture readnone %0, { ptr, i160 } %1) {
  %3 = alloca [0 x ptr], align 8
  %.fca.0.extract1 = extractvalue { ptr, i160 } %1, 0
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.3.8.extract.trunc = trunc i160 %.fca.1.extract to i64
  %4 = inttoptr i64 %.sroa.3.8.extract.trunc to ptr
  %.sroa.5.8.extract.shift = lshr i160 %.fca.1.extract, 64
  %.sroa.5.8.extract.trunc = trunc i160 %.sroa.5.8.extract.shift to i64
  %5 = inttoptr i64 %.sroa.5.8.extract.trunc to ptr
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 6499063144389013426
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %6 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %7 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr %4, 1
  %8 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %5, 2
  %9 = insertvalue { ptr, ptr, ptr, i32 } %8, i32 %offset.i.i, 3
  %10 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
  %11 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract1)
  %12 = sext i32 %offset.i.i to i64
  %13 = getelementptr ptr, ptr %.fca.0.extract1, i64 %12
  %14 = getelementptr i8, ptr %13, i64 112
  %15 = load ptr, ptr %14, align 8
  %16 = call ptr %15({ ptr, ptr, ptr, i32 } %9, ptr nonnull %3)
  %17 = call { ptr } %16({ ptr, ptr, ptr, i32 } %9, { ptr, ptr, ptr, i32 } %9, ptr nonnull %3)
  %.fca.0.extract = extractvalue { ptr } %17, 0
  %puts = call i32 @puts(ptr nonnull dereferenceable(1) %.fca.0.extract)
  ret void
}

; Function Attrs: nofree nounwind
define void @IO__Self_print_xPtri1(ptr nocapture readnone %0, { ptr, i160 } %1) #11 {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %3 = trunc i160 %.fca.1.extract to i1
  br i1 %3, label %4, label %5

4:                                                ; preds = %2
  %result.i = tail call noalias dereferenceable_or_null(5) ptr @bump_malloc_inner(i64 noundef 5, ptr nonnull @current_ptr) #29
  store <4 x i8> <i8 116, i8 114, i8 117, i8 101>, ptr %result.i, align 4
  br label %.lr.ph.i

5:                                                ; preds = %2
  %result.i8 = tail call noalias dereferenceable_or_null(6) ptr @bump_malloc_inner(i64 noundef 6, ptr nonnull @current_ptr) #29
  store <5 x i8> <i8 102, i8 97, i8 108, i8 115, i8 101>, ptr %result.i8, align 8
  br label %.lr.ph.i

.lr.ph.i:                                         ; preds = %4, %5
  %result.i8.sink = phi ptr [ %result.i8, %5 ], [ %result.i, %4 ]
  %.sink27 = phi i32 [ 5, %5 ], [ 4, %4 ]
  %6 = add nuw nsw i32 %.sink27, 1
  %7 = zext nneg i32 %6 to i64
  %result.i.i = tail call noalias ptr @bump_malloc_inner(i64 noundef %7, ptr nonnull @current_ptr) #29
  %8 = zext nneg i32 %.sink27 to i64
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 1 dereferenceable(1) %result.i.i, ptr noundef nonnull align 1 dereferenceable(1) %result.i8.sink, i64 %8, i1 false)
  %9 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %10 = zext nneg i32 %.sink27 to i64
  %11 = getelementptr i8, ptr %result.i.i, i64 %10
  store i8 0, ptr %11, align 1
  %puts = tail call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i)
  ret void
}

define void @IO__Self_print_xRepresentable(ptr nocapture readnone %0, { ptr, i160 } %1) {
  %3 = alloca [0 x ptr], align 8
  %.fca.0.extract2 = extractvalue { ptr, i160 } %1, 0
  %.fca.1.extract4 = extractvalue { ptr, i160 } %1, 1
  %.sroa.321.8.extract.trunc = trunc i160 %.fca.1.extract4 to i64
  %4 = inttoptr i64 %.sroa.321.8.extract.trunc to ptr
  %.sroa.522.8.extract.shift = lshr i160 %.fca.1.extract4, 64
  %.sroa.522.8.extract.trunc = trunc i160 %.sroa.522.8.extract.shift to i64
  %5 = inttoptr i64 %.sroa.522.8.extract.trunc to ptr
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -7260840641129990118
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %6 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract2, 0
  %7 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr %4, 1
  %8 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %5, 2
  %9 = insertvalue { ptr, ptr, ptr, i32 } %8, i32 %offset.i.i, 3
  %10 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
  %11 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %.fca.0.extract2)
  %12 = sext i32 %offset.i.i to i64
  %13 = getelementptr ptr, ptr %.fca.0.extract2, i64 %12
  %14 = load ptr, ptr %13, align 8
  %15 = call ptr %14({ ptr, ptr, ptr, i32 } %9, ptr nonnull %3)
  %16 = call { ptr, ptr, ptr, i32 } %15({ ptr, ptr, ptr, i32 } %9, { ptr, ptr, ptr, i32 } %9, ptr nonnull %3)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %16, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %16, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %16, 2
  %hash_coef_ptr.i.i7 = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i8 = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i9 = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i10 = load i64, ptr %hash_coef_ptr.i.i7, align 4
  %tbl_size.i.i11 = load i64, ptr %tbl_size_ptr.i.i8, align 4
  %offset_tbl.i.i12 = load ptr, ptr %offset_tbl_ptr.i.i9, align 8
  %product.i.i.i13 = mul i64 %hash_coef.i.i10, 6499063144389013426
  %shifted.i.i.i14 = lshr i64 %product.i.i.i13, 32
  %xored.i.i.i15 = xor i64 %shifted.i.i.i14, %product.i.i.i13
  %hash.i.i.i16 = and i64 %xored.i.i.i15, %tbl_size.i.i11
  %offset_ptr.i.i17 = getelementptr i32, ptr %offset_tbl.i.i12, i64 %hash.i.i.i16
  %offset.i.i18 = load i32, ptr %offset_ptr.i.i17, align 4
  %17 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %18 = insertvalue { ptr, ptr, ptr, i32 } %17, ptr %.fca.1.extract, 1
  %19 = insertvalue { ptr, ptr, ptr, i32 } %18, ptr %.fca.2.extract, 2
  %20 = insertvalue { ptr, ptr, ptr, i32 } %19, i32 %offset.i.i18, 3
  %21 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
  %22 = call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract1)
  %23 = sext i32 %offset.i.i18 to i64
  %24 = getelementptr ptr, ptr %.fca.0.extract1, i64 %23
  %25 = getelementptr i8, ptr %24, i64 112
  %26 = load ptr, ptr %25, align 8
  %27 = call ptr %26({ ptr, ptr, ptr, i32 } %20, ptr nonnull %3)
  %28 = call { ptr } %27({ ptr, ptr, ptr, i32 } %20, { ptr, ptr, ptr, i32 } %20, ptr nonnull %3)
  %.fca.0.extract = extractvalue { ptr } %28, 0
  %puts = call i32 @puts(ptr nonnull dereferenceable(1) %.fca.0.extract)
  ret void
}

; Function Attrs: nofree nounwind
define void @IO__Self_print_xPtri32(ptr nocapture readnone %0, { ptr, i160 } %1) #11 {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %3 = tail call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i32_string, i32 %.sroa.1.8.extract.trunc)
  ret void
}

define void @IO__Self_print_xCharacter(ptr nocapture readnone %0, { ptr, i160 } %1) {
  %3 = alloca [0 x ptr], align 8
  %.fca.0.extract = extractvalue { ptr, i160 } %1, 0
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.3.8.extract.trunc = trunc i160 %.fca.1.extract to i64
  %4 = inttoptr i64 %.sroa.3.8.extract.trunc to ptr
  %.sroa.5.8.extract.shift = lshr i160 %.fca.1.extract, 64
  %.sroa.5.8.extract.trunc = trunc i160 %.sroa.5.8.extract.shift to i64
  %5 = inttoptr i64 %.sroa.5.8.extract.trunc to ptr
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 6681222582356018452
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %result.i = tail call noalias dereferenceable_or_null(2) ptr @bump_malloc_inner(i64 noundef 2, ptr nonnull @current_ptr) #29
  %6 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %7 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr %4, 1
  %8 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %5, 2
  %9 = insertvalue { ptr, ptr, ptr, i32 } %8, i32 %offset.i.i, 3
  %10 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
  %11 = tail call ptr @llvm.invariant.start.p0(i64 40, ptr %.fca.0.extract)
  %12 = sext i32 %offset.i.i to i64
  %13 = getelementptr ptr, ptr %.fca.0.extract, i64 %12
  %14 = getelementptr i8, ptr %13, i64 8
  %15 = load ptr, ptr %14, align 8
  %16 = call ptr %15({ ptr, ptr, ptr, i32 } %9, ptr nonnull %3)
  %17 = call i8 %16({ ptr, ptr, ptr, i32 } %9, { ptr, ptr, ptr, i32 } %9, ptr nonnull %3)
  store i8 %17, ptr %result.i, align 1
  %puts = call i32 @puts(ptr nonnull dereferenceable(1) %result.i)
  ret void
}

; Function Attrs: nofree nounwind
define void @IO__Self_print_xNil(ptr nocapture readnone %0, { ptr, i160 } %1) #11 {
.lr.ph.i:
  %result.i = tail call noalias dereferenceable_or_null(4) ptr @bump_malloc_inner(i64 noundef 4, ptr nonnull @current_ptr) #29
  store <3 x i8> <i8 110, i8 105, i8 108>, ptr %result.i, align 4
  %result.i.i = tail call noalias dereferenceable_or_null(4) ptr @bump_malloc_inner(i64 noundef 4, ptr nonnull @current_ptr) #29
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 1 dereferenceable(3) %result.i.i, ptr noundef nonnull align 1 dereferenceable(3) %result.i, i64 3, i1 false)
  %2 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %puts = tail call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i)
  ret void
}

define linkonce_odr { i64, i64 } @_size_f64_typ(ptr %0) {
  ret { i64, i64 } { i64 8, i64 8 }
}

define linkonce_odr { ptr, i160 } @_box_f64_typ(ptr %0, ptr %1) {
  %3 = load i64, ptr %0, align 1
  %.sroa.2.sroa.0.0.insert.ext = zext i64 %3 to i160
  %4 = insertvalue { ptr, i160 } { ptr @f64_typ, i160 undef }, i160 %.sroa.2.sroa.0.0.insert.ext, 1
  ret { ptr, i160 } %4
}

define linkonce_odr void @_unbox_f64_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %.fca.1.extract = extractvalue { ptr, i160 } %0, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i64
  store i64 %.sroa.1.8.extract.trunc, ptr %2, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @adjust_trampoline(ptr readonly %tramp) local_unnamed_addr #3 {
  %ret = tail call ptr @llvm.adjust.trampoline(ptr %tramp) #31
  ret ptr %ret
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: read)
declare ptr @llvm.adjust.trampoline(ptr) #12

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn allockind("alloc,zeroed") allocsize(0) memory(readwrite, argmem: none, inaccessiblemem: none)
define noalias ptr @bump_malloc(i64 noundef %size) local_unnamed_addr #13 {
  %result = tail call noalias ptr @bump_malloc_inner(i64 noundef %size, ptr nonnull @current_ptr) #29
  ret ptr %result
}

; Function Attrs: mustprogress nofree noinline norecurse nosync nounwind willreturn allockind("alloc,zeroed") allocsize(0) memory(argmem: readwrite)
define noalias ptr @bump_malloc_inner(i64 noundef %size, ptr nocapture %current_ptr) local_unnamed_addr #14 {
  %size_plus_15 = add i64 %size, 15
  %aligned_size = and i64 %size_plus_15, -16
  %current = load ptr, ptr %current_ptr, align 8
  %new_ptr = getelementptr i8, ptr %current, i64 %aligned_size
  store ptr %new_ptr, ptr %current_ptr, align 8
  ret ptr %current
}

define { i64, i64 } @_size_tuple_typ(ptr nocapture readonly %0) local_unnamed_addr {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load i64, ptr %2, align 4
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %1, %.lr.ph
  %.reg2mem20.010.reg2mem.0 = phi i64 [ %12, %.lr.ph ], [ 1, %1 ]
  %.reg2mem22.011.reg2mem.0 = phi i64 [ %18, %.lr.ph ], [ 0, %1 ]
  %.reg2mem14.0 = phi i64 [ %19, %.lr.ph ], [ 1, %1 ]
  %.in.reg2mem.0 = phi i64 [ %21, %.lr.ph ], [ %3, %1 ]
  %5 = inttoptr i64 %.in.reg2mem.0 to ptr
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr i8, ptr %6, i64 48
  %8 = load ptr, ptr %7, align 8
  %9 = tail call { i64, i64 } %8(ptr nonnull %5)
  %10 = extractvalue { i64, i64 } %9, 0
  %11 = extractvalue { i64, i64 } %9, 1
  %12 = tail call i64 @llvm.umax.i64(i64 %11, i64 %.reg2mem20.010.reg2mem.0)
  %13 = urem i64 %.reg2mem22.011.reg2mem.0, %11
  %14 = icmp eq i64 %13, 0
  %15 = sub i64 %11, %13
  %16 = select i1 %14, i64 0, i64 %15
  %17 = add i64 %10, %.reg2mem22.011.reg2mem.0
  %18 = add i64 %17, %16
  %19 = add i64 %.reg2mem14.0, 1
  %20 = getelementptr ptr, ptr %0, i64 %19
  %21 = load i64, ptr %20, align 4
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %._crit_edge, label %.lr.ph

._crit_edge:                                      ; preds = %.lr.ph, %1
  %.reg2mem22.0.lcssa.reg2mem.0 = phi i64 [ 0, %1 ], [ %18, %.lr.ph ]
  %.reg2mem20.0.lcssa.reg2mem.0 = phi i64 [ 1, %1 ], [ %12, %.lr.ph ]
  %23 = urem i64 %.reg2mem22.0.lcssa.reg2mem.0, %.reg2mem20.0.lcssa.reg2mem.0
  %24 = icmp eq i64 %23, 0
  %25 = sub i64 %.reg2mem20.0.lcssa.reg2mem.0, %23
  %26 = select i1 %24, i64 0, i64 %25
  %27 = add i64 %26, %.reg2mem22.0.lcssa.reg2mem.0
  %28 = insertvalue { i64, i64 } undef, i64 %27, 0
  %29 = insertvalue { i64, i64 } %28, i64 %.reg2mem20.0.lcssa.reg2mem.0, 1
  ret { i64, i64 } %29
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.umax.i64(i64, i64) #15

define { i64, i64 } @_size_union_typ(ptr nocapture readonly %0) {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load i64, ptr %2, align 4
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %1, %.lr.ph
  %.reg2mem20.010.reg2mem.0 = phi i64 [ %12, %.lr.ph ], [ 1, %1 ]
  %.reg2mem22.011.reg2mem.0 = phi i64 [ %18, %.lr.ph ], [ 0, %1 ]
  %.reg2mem14.0 = phi i64 [ %19, %.lr.ph ], [ 1, %1 ]
  %.in.reg2mem.0 = phi i64 [ %21, %.lr.ph ], [ %3, %1 ]
  %5 = inttoptr i64 %.in.reg2mem.0 to ptr
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr i8, ptr %6, i64 48
  %8 = load ptr, ptr %7, align 8
  %9 = tail call { i64, i64 } %8(ptr nonnull %5)
  %10 = extractvalue { i64, i64 } %9, 0
  %11 = extractvalue { i64, i64 } %9, 1
  %12 = tail call i64 @llvm.umax.i64(i64 %11, i64 %.reg2mem20.010.reg2mem.0)
  %13 = urem i64 %.reg2mem22.011.reg2mem.0, %11
  %14 = icmp eq i64 %13, 0
  %15 = sub i64 %11, %13
  %16 = select i1 %14, i64 0, i64 %15
  %17 = add i64 %10, %.reg2mem22.011.reg2mem.0
  %18 = tail call i64 @llvm.umax.i64(i64 %17, i64 %16)
  %19 = add i64 %.reg2mem14.0, 1
  %20 = getelementptr ptr, ptr %0, i64 %19
  %21 = load i64, ptr %20, align 4
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %.lr.ph.._crit_edge_crit_edge, label %.lr.ph

.lr.ph.._crit_edge_crit_edge:                     ; preds = %.lr.ph
  %23 = add i64 %18, 8
  br label %._crit_edge

._crit_edge:                                      ; preds = %1, %.lr.ph.._crit_edge_crit_edge
  %.reg2mem22.0.lcssa.reg2mem.0 = phi i64 [ %23, %.lr.ph.._crit_edge_crit_edge ], [ 8, %1 ]
  %.reg2mem20.0.lcssa.reg2mem.0 = phi i64 [ %12, %.lr.ph.._crit_edge_crit_edge ], [ 1, %1 ]
  %24 = urem i64 %.reg2mem22.0.lcssa.reg2mem.0, %.reg2mem20.0.lcssa.reg2mem.0
  %25 = icmp eq i64 %24, 0
  %26 = sub i64 %.reg2mem20.0.lcssa.reg2mem.0, %24
  %27 = select i1 %25, i64 0, i64 %26
  %28 = add i64 %27, %.reg2mem22.0.lcssa.reg2mem.0
  %29 = insertvalue { i64, i64 } undef, i64 %28, 0
  %30 = insertvalue { i64, i64 } %29, i64 %.reg2mem20.0.lcssa.reg2mem.0, 1
  ret { i64, i64 } %30
}

define void @_unbox_union_typ({ ptr, i160 } %0, ptr nocapture readonly %1, ptr nocapture writeonly %2) {
  %4 = alloca { ptr, i160 }, align 8
  %.fca.0.extract = extractvalue { ptr, i160 } %0, 0
  store ptr %.fca.0.extract, ptr %4, align 8
  %.fca.1.extract = extractvalue { ptr, i160 } %0, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %4, i64 8
  store i160 %.fca.1.extract, ptr %.fca.1.gep, align 8
  %5 = getelementptr i8, ptr %1, i64 8
  %6 = load i64, ptr %5, align 4
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %_size_union_typ.exit, label %.lr.ph.i

.lr.ph.i:                                         ; preds = %3, %.lr.ph.i
  %.reg2mem20.010.reg2mem.0.i = phi i64 [ %15, %.lr.ph.i ], [ 1, %3 ]
  %.reg2mem22.011.reg2mem.0.i = phi i64 [ %21, %.lr.ph.i ], [ 0, %3 ]
  %.reg2mem14.0.i = phi i64 [ %22, %.lr.ph.i ], [ 1, %3 ]
  %.in.reg2mem.0.i = phi i64 [ %24, %.lr.ph.i ], [ %6, %3 ]
  %8 = inttoptr i64 %.in.reg2mem.0.i to ptr
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr i8, ptr %9, i64 48
  %11 = load ptr, ptr %10, align 8
  %12 = tail call { i64, i64 } %11(ptr nonnull %8)
  %13 = extractvalue { i64, i64 } %12, 0
  %14 = extractvalue { i64, i64 } %12, 1
  %15 = tail call i64 @llvm.umax.i64(i64 %14, i64 %.reg2mem20.010.reg2mem.0.i)
  %16 = urem i64 %.reg2mem22.011.reg2mem.0.i, %14
  %17 = icmp eq i64 %16, 0
  %18 = sub i64 %14, %16
  %19 = select i1 %17, i64 0, i64 %18
  %20 = add i64 %13, %.reg2mem22.011.reg2mem.0.i
  %21 = tail call i64 @llvm.umax.i64(i64 %20, i64 %19)
  %22 = add i64 %.reg2mem14.0.i, 1
  %23 = getelementptr ptr, ptr %1, i64 %22
  %24 = load i64, ptr %23, align 4
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %.lr.ph.._crit_edge_crit_edge.i, label %.lr.ph.i

.lr.ph.._crit_edge_crit_edge.i:                   ; preds = %.lr.ph.i
  %26 = add i64 %21, 8
  br label %_size_union_typ.exit

_size_union_typ.exit:                             ; preds = %3, %.lr.ph.._crit_edge_crit_edge.i
  %.reg2mem22.0.lcssa.reg2mem.0.i = phi i64 [ %26, %.lr.ph.._crit_edge_crit_edge.i ], [ 8, %3 ]
  %.reg2mem20.0.lcssa.reg2mem.0.i = phi i64 [ %15, %.lr.ph.._crit_edge_crit_edge.i ], [ 1, %3 ]
  %27 = trunc i160 %.fca.1.extract to i64
  %28 = inttoptr i64 %27 to ptr
  %29 = urem i64 %.reg2mem22.0.lcssa.reg2mem.0.i, %.reg2mem20.0.lcssa.reg2mem.0.i
  %30 = icmp eq i64 %29, 0
  %31 = sub i64 %.reg2mem20.0.lcssa.reg2mem.0.i, %29
  %32 = select i1 %30, i64 0, i64 %31
  %33 = add i64 %32, %.reg2mem22.0.lcssa.reg2mem.0.i
  %34 = icmp slt i64 %33, 17
  %35 = icmp eq i64 %33, 32
  %36 = select i1 %34, ptr %.fca.1.gep, ptr %28
  %37 = select i1 %35, ptr %4, ptr %36
  call void @llvm.memcpy.inline.p0.p0.i64(ptr align 1 %2, ptr align 1 %37, i64 %33, i1 false)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, i160 } @_box_Default(ptr nocapture readonly %fat_ptr, ptr nocapture readnone %parameterization) #3 {
  %vptr = load ptr, ptr %fat_ptr, align 8
  %1 = insertvalue { ptr, i160 } undef, ptr %vptr, 0
  %2 = getelementptr i8, ptr %fat_ptr, i64 8
  %3 = load i160, ptr %2, align 4
  %4 = insertvalue { ptr, i160 } %1, i160 %3, 1
  ret { ptr, i160 } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @_unbox_Default({ ptr, i160 } %fat_ptr, ptr nocapture readnone %parameterization, ptr nocapture writeonly %destination) #6 {
  %vptr = extractvalue { ptr, i160 } %fat_ptr, 0
  %data = extractvalue { ptr, i160 } %fat_ptr, 1
  %dest_data = getelementptr i8, ptr %destination, i64 8
  store ptr %vptr, ptr %destination, align 8
  store i160 %data, ptr %dest_data, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @anoint_trampoline(ptr %tramp) local_unnamed_addr #16 {
  %oldProtect = alloca i32, align 4
  %result = call i32 @VirtualProtect(ptr %tramp, i64 16, i32 64, ptr nonnull %oldProtect) #16
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
declare i32 @VirtualProtect(ptr, i64, i32, ptr) local_unnamed_addr #16

define noundef ptr @coroutine_create(ptr %func, ptr %arg_passer) local_unnamed_addr {
  %stack = tail call noalias dereferenceable_or_null(8388608) ptr @VirtualAlloc(ptr null, i64 8388608, i32 12288, i32 4) #33
  store ptr %func, ptr %stack, align 8
  %stack_top = getelementptr i8, ptr %stack, i64 8388608
  %stack_top_i64 = ptrtoint ptr %stack_top to i64
  %stack_top_aligned = and i64 %stack_top_i64, -16
  %into_callee_buf = getelementptr i8, ptr %stack, i64 8
  %arg_passer_slot = getelementptr i8, ptr %stack, i64 32
  %into_callee_second_word = getelementptr i8, ptr %stack, i64 16
  %into_callee_third_word = getelementptr i8, ptr %stack, i64 24
  store i64 %stack_top_aligned, ptr %into_callee_buf, align 4
  store i64 %stack_top_aligned, ptr %into_callee_third_word, align 4
  store ptr %arg_passer, ptr %arg_passer_slot, align 8
  %is_finished = getelementptr i8, ptr %stack, i64 40
  store i1 false, ptr %is_finished, align 1
  tail call void @coroutine_trampoline(ptr %into_callee_second_word)
  ret ptr %stack
}

; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,zeroed") allocsize(1)
declare noalias ptr @VirtualAlloc(ptr, i64, i32, i32) local_unnamed_addr #17

declare void @coroutine_trampoline(ptr) local_unnamed_addr

define void @setup_landing_pad() {
  %region = tail call noalias dereferenceable_or_null(21474836480) ptr @VirtualAlloc(ptr null, i64 21474836480, i32 12288, i32 4) #33
  store ptr %region, ptr @current_ptr, align 8
  %sp = tail call ptr @llvm.stacksave.p0() #34
  store ptr %sp, ptr @into_caller_buf, align 8
  store ptr blockaddress(@setup_landing_pad, %landing_pad), ptr getelementptr inbounds (i8, ptr @into_caller_buf, i64 8), align 8
  store ptr %sp, ptr getelementptr inbounds (i8, ptr @into_caller_buf, i64 16), align 8
  %stack.i = tail call noalias dereferenceable_or_null(8388608) ptr @VirtualAlloc(ptr null, i64 8388608, i32 12288, i32 4) #33
  store ptr @setup_landing_pad, ptr %stack.i, align 8
  %stack_top.i = getelementptr i8, ptr %stack.i, i64 8388608
  %stack_top_i64.i = ptrtoint ptr %stack_top.i to i64
  %stack_top_aligned.i = and i64 %stack_top_i64.i, -16
  %into_callee_buf.i = getelementptr i8, ptr %stack.i, i64 8
  %arg_passer_slot.i = getelementptr i8, ptr %stack.i, i64 32
  %into_callee_second_word.i = getelementptr i8, ptr %stack.i, i64 16
  %into_callee_third_word.i = getelementptr i8, ptr %stack.i, i64 24
  store i64 %stack_top_aligned.i, ptr %into_callee_buf.i, align 4
  store i64 %stack_top_aligned.i, ptr %into_callee_third_word.i, align 4
  store ptr @arg_passer, ptr %arg_passer_slot.i, align 8
  %is_finished.i = getelementptr i8, ptr %stack.i, i64 40
  store i1 false, ptr %is_finished.i, align 1
  tail call void @coroutine_trampoline(ptr %into_callee_second_word.i)
  store ptr %stack.i, ptr @current_coroutine, align 8
  %retval.i = load i1, ptr @always_one, align 1
  br i1 %retval.i, label %exit, label %landing_pad

landing_pad:                                      ; preds = %0
  %ok = tail call i32 @printf(ptr nonnull @string_string.59, ptr nonnull @exception_message)
  %cc.unpack = load ptr, ptr @current_coroutine, align 8
  %cc1 = insertvalue { ptr } poison, ptr %cc.unpack, 0
  tail call void @report_exception({ ptr } %cc1)
  tail call void @exit()
  unreachable

exit:                                             ; preds = %0
  ret void
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn
declare ptr @llvm.stacksave.p0() #18

define void @arg_passer(ptr nocapture readonly %current_coroutine) {
  %func = load ptr, ptr %current_coroutine, align 8
  tail call void %func()
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: none, inaccessiblemem: none)
define i1 @returns_one() local_unnamed_addr #19 {
  %retval = load i1, ptr @always_one, align 1
  ret i1 %retval
}

declare void @exit() local_unnamed_addr

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, inaccessiblemem: none)
define i32 @get_offset(ptr nocapture readonly %vptr, ptr nocapture readonly %id_ptr) local_unnamed_addr #10 {
  %id = load i64, ptr %id_ptr, align 4
  %hash_coef_ptr = getelementptr i8, ptr %vptr, i64 8
  %tbl_size_ptr = getelementptr i8, ptr %vptr, i64 16
  %offset_tbl_ptr = getelementptr i8, ptr %vptr, i64 40
  %hash_coef = load i64, ptr %hash_coef_ptr, align 4
  %tbl_size = load i64, ptr %tbl_size_ptr, align 4
  %offset_tbl = load ptr, ptr %offset_tbl_ptr, align 8
  %product.i = mul i64 %hash_coef, %id
  %shifted.i = lshr i64 %product.i, 32
  %xored.i = xor i64 %shifted.i, %product.i
  %hash.i = and i64 %xored.i, %tbl_size
  %offset_ptr = getelementptr i32, ptr %offset_tbl, i64 %hash.i
  %offset = load i32, ptr %offset_ptr, align 4
  ret i32 %offset
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define i64 @hash_to_index(i64 %tbl_size, i64 %hash_coef, i64 %cand_id) local_unnamed_addr #0 {
  %product = mul i64 %cand_id, %hash_coef
  %shifted = lshr i64 %product, 32
  %xored = xor i64 %shifted, %product
  %hash = and i64 %xored, %tbl_size
  ret i64 %hash
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, inaccessiblemem: write)
define void @assume_offset(ptr nocapture readonly %fat_ptr, ptr nocapture readonly %id_ptr) local_unnamed_addr #20 {
  %vptr = load ptr, ptr %fat_ptr, align 8
  %id.i = load i64, ptr %id_ptr, align 4
  %hash_coef_ptr.i = getelementptr i8, ptr %vptr, i64 8
  %tbl_size_ptr.i = getelementptr i8, ptr %vptr, i64 16
  %offset_tbl_ptr.i = getelementptr i8, ptr %vptr, i64 40
  %hash_coef.i = load i64, ptr %hash_coef_ptr.i, align 4
  %tbl_size.i = load i64, ptr %tbl_size_ptr.i, align 4
  %offset_tbl.i = load ptr, ptr %offset_tbl_ptr.i, align 8
  %product.i.i = mul i64 %hash_coef.i, %id.i
  %shifted.i.i = lshr i64 %product.i.i, 32
  %xored.i.i = xor i64 %shifted.i.i, %product.i.i
  %hash.i.i = and i64 %xored.i.i, %tbl_size.i
  %offset_ptr.i = getelementptr i32, ptr %offset_tbl.i, i64 %hash.i.i
  %offset.i = load i32, ptr %offset_ptr.i, align 4
  %destination = getelementptr i8, ptr %fat_ptr, i64 24
  %dest_value = load i32, ptr %destination, align 4
  %eq = icmp eq i32 %dest_value, %offset.i
  tail call void @llvm.assume(i1 %eq) #30
  ret void
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write)
declare void @llvm.assume(i1 noundef) #21

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define void @set_offset(ptr nocapture %fat_ptr, ptr nocapture readonly %id_ptr) local_unnamed_addr #1 {
  %vptr = load ptr, ptr %fat_ptr, align 8
  %id.i = load i64, ptr %id_ptr, align 4
  %hash_coef_ptr.i = getelementptr i8, ptr %vptr, i64 8
  %tbl_size_ptr.i = getelementptr i8, ptr %vptr, i64 16
  %offset_tbl_ptr.i = getelementptr i8, ptr %vptr, i64 40
  %hash_coef.i = load i64, ptr %hash_coef_ptr.i, align 4
  %tbl_size.i = load i64, ptr %tbl_size_ptr.i, align 4
  %offset_tbl.i = load ptr, ptr %offset_tbl_ptr.i, align 8
  %product.i.i = mul i64 %hash_coef.i, %id.i
  %shifted.i.i = lshr i64 %product.i.i, 32
  %xored.i.i = xor i64 %shifted.i.i, %product.i.i
  %hash.i.i = and i64 %xored.i.i, %tbl_size.i
  %offset_ptr.i = getelementptr i32, ptr %offset_tbl.i, i64 %hash.i.i
  %offset.i = load i32, ptr %offset_ptr.i, align 4
  %destination = getelementptr i8, ptr %fat_ptr, i64 24
  store i32 %offset.i, ptr %destination, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define i1 @subtype_test(i64 %tbl_size, i64 %hash_coef, i64 %cand_id, i64 %candidate, ptr nocapture readonly %supertype_tbl) #22 {
  %product.i = mul i64 %cand_id, %hash_coef
  %shifted.i = lshr i64 %product.i, 32
  %xored.i = xor i64 %shifted.i, %product.i
  %hash.i = and i64 %xored.i, %tbl_size
  %gep = getelementptr i64, ptr %supertype_tbl, i64 %hash.i
  %stored_val = load i64, ptr %gep, align 4
  %eq = icmp eq i64 %stored_val, %candidate
  ret i1 %eq
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define i1 @subtype_test_wrapper(ptr nocapture readonly %f, i64 %tbl_size, i64 %hash_coef, i64 %cand_id, i64 %candidate, ptr readonly %supertype_tbl) local_unnamed_addr #22 {
  %result = tail call i1 %f(i64 %tbl_size, i64 %hash_coef, i64 %cand_id, i64 %candidate, ptr %supertype_tbl) #3
  ret i1 %result
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define void @arg_buffer_filler(ptr nocapture readnone %coroutine) local_unnamed_addr #0 {
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: none, inaccessiblemem: none)
define ptr @get_current_coroutine() local_unnamed_addr #19 {
  %current_coroutine = load ptr, ptr @current_coroutine, align 8
  ret ptr %current_coroutine
}

; Function Attrs: noinline nounwind memory(readwrite)
define preserve_nonecc void @context_switch(ptr nocapture writeonly %from_buf, ptr %to_buf) #23 {
  %from_buf_second_word = getelementptr i8, ptr %from_buf, i64 8
  %from_buf_third_word = getelementptr i8, ptr %from_buf, i64 16
  store ptr blockaddress(@context_switch, %return_from_switch), ptr %from_buf_second_word, align 8
  %sp = tail call ptr @llvm.stacksave.p0() #34
  store ptr %sp, ptr %from_buf, align 8
  store ptr %sp, ptr %from_buf_third_word, align 8
  %retval.i = load i1, ptr @always_one, align 1
  br i1 %retval.i, label %do_switch, label %return_from_switch

do_switch:                                        ; preds = %0
  tail call void @llvm.eh.sjlj.longjmp(ptr %to_buf) #24
  unreachable

return_from_switch:                               ; preds = %0
  ret void
}

; Function Attrs: noreturn nounwind
declare void @llvm.eh.sjlj.longjmp(ptr) #24

; Function Attrs: nounwind
define void @coroutine_yield(ptr nocapture writeonly %current_coroutine) local_unnamed_addr #25 {
  %into_callee_buf = getelementptr i8, ptr %current_coroutine, i64 8
  tail call preserve_nonecc void @context_switch(ptr nocapture writeonly %into_callee_buf, ptr nonnull @into_caller_buf) #32
  ret void
}

; Function Attrs: nounwind
define void @coroutine_call(ptr %coroutine) local_unnamed_addr #25 {
  %old_into_caller.unpack = load ptr, ptr @into_caller_buf, align 8
  %old_into_caller.unpack1 = load ptr, ptr getelementptr inbounds (i8, ptr @into_caller_buf, i64 8), align 8
  %old_into_caller.unpack2 = load ptr, ptr getelementptr inbounds (i8, ptr @into_caller_buf, i64 16), align 8
  %old_coroutine = load ptr, ptr @current_coroutine, align 8
  store ptr %coroutine, ptr @current_coroutine, align 8
  %into_callee_buf = getelementptr i8, ptr %coroutine, i64 8
  tail call preserve_nonecc void @context_switch(ptr nocapture nonnull writeonly @into_caller_buf, ptr %into_callee_buf) #32
  store ptr %old_coroutine, ptr @current_coroutine, align 8
  store ptr %old_into_caller.unpack, ptr @into_caller_buf, align 8
  store ptr %old_into_caller.unpack1, ptr getelementptr inbounds (i8, ptr @into_caller_buf, i64 8), align 8
  store ptr %old_into_caller.unpack2, ptr getelementptr inbounds (i8, ptr @into_caller_buf, i64 16), align 8
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #26

; Function Attrs: nofree nounwind
declare noundef i32 @puts(ptr nocapture noundef readonly) local_unnamed_addr #11

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #27

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #27

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #28

attributes #0 = { mustprogress nofree norecurse nosync nounwind willreturn memory(none) }
attributes #1 = { mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none) }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #3 = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read) }
attributes #4 = { mustprogress willreturn memory(read, argmem: readwrite, inaccessiblemem: none) }
attributes #5 = { mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #6 = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write) }
attributes #7 = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: readwrite) }
attributes #8 = { mustprogress nofree norecurse nosync nounwind willreturn memory(readwrite, argmem: none, inaccessiblemem: none) }
attributes #9 = { mustprogress nofree norecurse nosync nounwind willreturn memory(readwrite, argmem: read, inaccessiblemem: none) }
attributes #10 = { mustprogress nofree norecurse nosync nounwind willreturn memory(read, inaccessiblemem: none) }
attributes #11 = { nofree nounwind }
attributes #12 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: read) }
attributes #13 = { mustprogress nofree norecurse nosync nounwind willreturn allockind("alloc,zeroed") allocsize(0) memory(readwrite, argmem: none, inaccessiblemem: none) "alloc-family"="malloc" }
attributes #14 = { mustprogress nofree noinline norecurse nosync nounwind willreturn allockind("alloc,zeroed") allocsize(0) memory(argmem: readwrite) "alloc-family"="malloc" }
attributes #15 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #16 = { mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #17 = { mustprogress nofree nounwind willreturn allockind("alloc,zeroed") allocsize(1) "alloc-family"="malloc" }
attributes #18 = { mustprogress nocallback nofree nosync nounwind willreturn }
attributes #19 = { mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: none, inaccessiblemem: none) }
attributes #20 = { mustprogress nofree norecurse nosync nounwind willreturn memory(read, inaccessiblemem: write) }
attributes #21 = { mustprogress nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write) }
attributes #22 = { mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read) }
attributes #23 = { noinline nounwind memory(readwrite) }
attributes #24 = { noreturn nounwind }
attributes #25 = { nounwind }
attributes #26 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #27 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #28 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #29 = { mustprogress nofree nounwind willreturn allockind("alloc,zeroed") allocsize(0) "alloc-family"="malloc" }
attributes #30 = { mustprogress nofree nosync nounwind willreturn memory(inaccessiblemem: write) }
attributes #31 = { mustprogress nofree nosync nounwind willreturn memory(argmem: read) }
attributes #32 = { nounwind memory(readwrite) }
attributes #33 = { mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(1) "alloc-family"="malloc" }
attributes #34 = { mustprogress nofree nosync nounwind willreturn }

!llvm.module.flags = !{!0}

!0 = !{i32 2, !"Debug Info Version", i32 3}
