; ModuleID = 'out_reg2mem.ll'
source_filename = "llvm-link"

@wkcxk__HashMap_Benchmarks_Cuckoo_Hashing__Rev__Cleaned_ = internal unnamed_addr constant [59 x i8] c"--- HashMap Benchmarks (Cuckoo Hashing - Rev 3 Cleaned) ---"
@cshax_Warning_Remove_returned_Nil_for_key_ = internal unnamed_addr constant [37 x i8] c"Warning: Remove returned Nil for key "
@uzymi_Warning_Remove_returned_wrong_value_for_key_ = internal unnamed_addr constant [45 x i8] c"Warning: Remove returned wrong value for key "
@xrmfr_Error_Nil_returned_during_random_hit_test_for_key_ = internal unnamed_addr constant [51 x i8] c"Error: Nil returned during random hit test for key "
@enrjd__unique_keys_for_random_hit_test = internal unnamed_addr constant [33 x i8] c" unique keys for random hit test."
@aysju_Error_Nil_returned_during_sequential_hit_test_for_key_ = internal unnamed_addr constant [55 x i8] c"Error: Nil returned during sequential hit test for key "
@_parameterization_PairPtri32._Ptri1 = linkonce_odr constant [4 x ptr] [ptr @Pair, ptr @_parameterization_Ptri32, ptr @_parameterization_Ptri1, ptr null]
@_parameterization_PairPtri32._Ptri32 = linkonce_odr constant [4 x ptr] [ptr @Pair, ptr @_parameterization_Ptri32, ptr @_parameterization_Ptri32, ptr null]
@_parameterization_Nil = linkonce_odr constant [2 x ptr] [ptr @nil_typ, ptr null]
@Entry_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Entry, ptr @Object, ptr @any_typ, ptr null]
@Entry_offset_tbl = linkonce_odr constant [4 x i32] [i32 9, i32 22, i32 9, i32 0]
@Entry = constant { [3 x i64], [6 x ptr], [13 x ptr] } { [3 x i64] [i64 4015701072841558310, i64 4611686018427388181, i64 3], [6 x ptr] [ptr @subtype_test, ptr @Entry_hashtbl, ptr @Entry_offset_tbl, ptr @_size_Entry, ptr @_box_Default, ptr @_unbox_Default], [13 x ptr] [ptr @Entry_field_Entry_0, ptr @Entry_field_Entry_1, ptr @Entry_field_primary_hash, ptr @Entry_field_key, ptr @Entry_field_value, ptr @Entry_B_init_keyK_valueV_primary_hashPtri32, ptr @Entry_B_key_, ptr @Entry_B_value_, ptr @Entry_B_primary_hash_, ptr @Entry_init_keyK_valueV_primary_hashPtri32, ptr @Entry_key_, ptr @Entry_value_, ptr @Entry_primary_hash_] }
@HashMap_hashtbl = linkonce_odr constant [8 x ptr] [ptr null, ptr @HashMap, ptr @Container, ptr null, ptr @Object, ptr null, ptr @any_typ, ptr @Iterable2]
@HashMap_offset_tbl = linkonce_odr constant [8 x i32] [i32 0, i32 9, i32 89, i32 0, i32 89, i32 0, i32 9, i32 66]
@HashMap = constant { [3 x i64], [6 x ptr], [80 x ptr] } { [3 x i64] [i64 -2849643283898152329, i64 4611686018427388091, i64 7], [6 x ptr] [ptr @subtype_test, ptr @HashMap_hashtbl, ptr @HashMap_offset_tbl, ptr @_size_HashMap, ptr @_box_Default, ptr @_unbox_Default], [80 x ptr] [ptr @HashMap_field_HashMap_0, ptr @HashMap_field_HashMap_1, ptr @HashMap_field_HashMap_2, ptr @HashMap_field_table1, ptr @HashMap_field_table2, ptr @HashMap_field_size, ptr @HashMap_field_hasher, ptr @HashMap_field_eq, ptr @HashMap_field_max_displacements, ptr @HashMap_B_init_hasherFunctionK_to_Ptri32_eqFunctionK._K_to_Ptri1, ptr @HashMap_B_hash1_keyK, ptr @HashMap_B_hash2_from_primary_primary_hashPtri32, ptr @HashMap_B_index1_primary_hashPtri32, ptr @HashMap_B_index2_secondary_hashPtri32, ptr @HashMap_B_place_entry_or_get_failed_entry_to_insertEntryK._V, ptr @HashMap_B_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32, ptr @HashMap_B_resize_, ptr @HashMap_B_insert_keyK_valueV, ptr @HashMap_B_get_keyK, ptr @HashMap_B_remove_keyK, ptr @HashMap_B_clear_, ptr @HashMap_B_size_, ptr @HashMap_B_iterator_, ptr @HashMap_B_each_fFunctionT_to_Nothing, ptr @HashMap_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @HashMap_B_all_fFunctionT_to_Ptri1, ptr @HashMap_B_any_fFunctionT_to_Ptri1, ptr @HashMap_B_map_fFunctionT_to_U, ptr @HashMap_B_filter_fFunctionT_to_Ptri1, ptr @HashMap_B_chain_otherIterable2T, ptr @HashMap_B_interleave_otherIterable2T, ptr @HashMap_B_zip_otherIterable2U, ptr @HashMap_B_product_otherIterable2U, ptr @HashMap_init_hasherFunctionK_to_Ptri32_eqFunctionK._K_to_Ptri1, ptr @HashMap_hash1_keyK, ptr @HashMap_hash2_from_primary_primary_hashPtri32, ptr @HashMap_index1_primary_hashPtri32, ptr @HashMap_index2_secondary_hashPtri32, ptr @HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V, ptr @HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32, ptr @HashMap_resize_, ptr @HashMap_insert_keyK_valueV, ptr @HashMap_get_keyK, ptr @HashMap_remove_keyK, ptr @HashMap_clear_, ptr @HashMap_size_, ptr @HashMap_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @HashMap_field_HashMap_2, ptr @HashMap_B_iterator_, ptr @HashMap_B_each_fFunctionT_to_Nothing, ptr @HashMap_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @HashMap_B_all_fFunctionT_to_Ptri1, ptr @HashMap_B_any_fFunctionT_to_Ptri1, ptr @HashMap_B_map_fFunctionT_to_U, ptr @HashMap_B_filter_fFunctionT_to_Ptri1, ptr @HashMap_B_chain_otherIterable2T, ptr @HashMap_B_interleave_otherIterable2T, ptr @HashMap_B_zip_otherIterable2U, ptr @HashMap_B_product_otherIterable2U, ptr @HashMap_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
@HashMapIterator_hashtbl = linkonce_odr constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr @HashMapIterator, ptr null, ptr @Iterator2, ptr null]
@HashMapIterator_offset_tbl = linkonce_odr constant [8 x i32] [i32 25, i32 9, i32 0, i32 25, i32 9, i32 0, i32 22, i32 0]
@HashMapIterator = constant { [3 x i64], [6 x ptr], [16 x ptr] } { [3 x i64] [i64 -704669437586349537, i64 4611686018427388081, i64 7], [6 x ptr] [ptr @subtype_test, ptr @HashMapIterator_hashtbl, ptr @HashMapIterator_offset_tbl, ptr @_size_HashMapIterator, ptr @_box_Default, ptr @_unbox_Default], [16 x ptr] [ptr @HashMapIterator_field_HashMapIterator_0, ptr @HashMapIterator_field_HashMapIterator_1, ptr @HashMapIterator_field_HashMapIterator_2, ptr @HashMapIterator_field_map_table1, ptr @HashMapIterator_field_map_table2, ptr @HashMapIterator_field_current_table, ptr @HashMapIterator_field_index, ptr @HashMapIterator_field_len1, ptr @HashMapIterator_field_len2, ptr @HashMapIterator_B_init_map_table1ArrayEntryK._V_or_Nil_map_table2ArrayEntryK._V_or_Nil, ptr @HashMapIterator_B_next_, ptr @HashMapIterator_init_map_table1ArrayEntryK._V_or_Nil_map_table2ArrayEntryK._V_or_Nil, ptr @HashMapIterator_next_, ptr @HashMapIterator_field_HashMapIterator_2, ptr @HashMapIterator_B_next_, ptr @HashMapIterator_next_] }
@PRNG_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @PRNG, ptr null]
@PRNG_offset_tbl = linkonce_odr constant [4 x i32] [i32 14, i32 9, i32 9, i32 0]
@PRNG = constant { [3 x i64], [6 x ptr], [5 x ptr] } { [3 x i64] [i64 -4401938362882229211, i64 4611686018427388081, i64 3], [6 x ptr] [ptr @subtype_test, ptr @PRNG_hashtbl, ptr @PRNG_offset_tbl, ptr @_size_PRNG, ptr @_box_Default, ptr @_unbox_Default], [5 x ptr] [ptr @PRNG_field_seed, ptr @PRNG_B_init_initial_seedPtri32, ptr @PRNG_B_next_, ptr @PRNG_init_initial_seedPtri32, ptr @PRNG_next_] }
@Entry_field_primary_hash = internal constant { ptr, ptr } { ptr @Entry_getter_primary_hash, ptr @Entry_setter_primary_hash }
@Entry_field_key = internal constant { ptr, ptr } { ptr @Entry_getter_key, ptr @Entry_setter_key }
@Entry_field_value = internal constant { ptr, ptr } { ptr @Entry_getter_value, ptr @Entry_setter_value }
@HashMap_field_table1 = internal constant { ptr, ptr } { ptr @HashMap_getter_table1, ptr @HashMap_setter_table1 }
@HashMap_field_table2 = internal constant { ptr, ptr } { ptr @HashMap_getter_table2, ptr @HashMap_setter_table2 }
@HashMap_field_size = internal constant { ptr, ptr } { ptr @HashMap_getter_size, ptr @HashMap_setter_size }
@HashMap_field_hasher = internal constant { ptr, ptr } { ptr @HashMap_getter_hasher, ptr @HashMap_setter_hasher }
@HashMap_field_eq = internal constant { ptr, ptr } { ptr @HashMap_getter_eq, ptr @HashMap_setter_eq }
@HashMap_field_max_displacements = internal constant { ptr, ptr } { ptr @HashMap_getter_max_displacements, ptr @HashMap_setter_max_displacements }
@HashMapIterator_field_map_table1 = internal constant { ptr, ptr } { ptr @HashMapIterator_getter_map_table1, ptr @HashMapIterator_setter_map_table1 }
@HashMapIterator_field_map_table2 = internal constant { ptr, ptr } { ptr @HashMapIterator_getter_map_table2, ptr @HashMapIterator_setter_map_table2 }
@HashMapIterator_field_current_table = internal constant { ptr, ptr } { ptr @HashMapIterator_getter_current_table, ptr @HashMapIterator_setter_current_table }
@HashMapIterator_field_index = internal constant { ptr, ptr } { ptr @HashMapIterator_getter_index, ptr @HashMapIterator_setter_index }
@HashMapIterator_field_len1 = internal constant { ptr, ptr } { ptr @HashMapIterator_getter_len1, ptr @HashMapIterator_setter_len1 }
@HashMapIterator_field_len2 = internal constant { ptr, ptr } { ptr @HashMapIterator_getter_len2, ptr @HashMapIterator_setter_len2 }
@PRNG_field_seed = internal constant { ptr, ptr } { ptr @PRNG_getter_seed, ptr @PRNG_setter_seed }
@_parameterization_Ptri1 = linkonce_odr constant [2 x ptr] [ptr @bool_typ, ptr null]
@Pair_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @Pair, ptr null]
@Pair_offset_tbl = linkonce_odr constant [4 x i32] [i32 19, i32 9, i32 9, i32 0]
@Pair = constant { [3 x i64], [6 x ptr], [10 x ptr] } { [3 x i64] [i64 9197944775169318296, i64 4611686018427388081, i64 3], [6 x ptr] [ptr @subtype_test, ptr @Pair_hashtbl, ptr @Pair_offset_tbl, ptr @_size_Pair, ptr @_box_Default, ptr @_unbox_Default], [10 x ptr] [ptr @Pair_field_Pair_0, ptr @Pair_field_Pair_1, ptr @Pair_field_first, ptr @Pair_field_second, ptr @Pair_B_init_firstT_secondU, ptr @Pair_B_first_, ptr @Pair_B_second_, ptr @Pair_init_firstT_secondU, ptr @Pair_first_, ptr @Pair_second_] }
@Container_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container]
@Container_offset_tbl = linkonce_odr constant [4 x i32] [i32 9, i32 9, i32 0, i32 9]
@Container = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 9056556090793359372, i64 4611686018427388081, i64 3], [6 x ptr] [ptr @subtype_test, ptr @Container_hashtbl, ptr @Container_offset_tbl, ptr @_size_Container, ptr @_box_Default, ptr @_unbox_Default], [0 x ptr] undef }
@Iterator2_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @Iterator2, ptr @Container]
@Iterator2_offset_tbl = linkonce_odr constant [4 x i32] [i32 12, i32 9, i32 9, i32 12]
@Iterator2 = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 4189192806087951739, i64 4611686018427388081, i64 3], [6 x ptr] [ptr @subtype_test, ptr @Iterator2_hashtbl, ptr @Iterator2_offset_tbl, ptr @_size_Iterator2, ptr @_box_Default, ptr @_unbox_Default], [0 x ptr] undef }
@Iterable2_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Iterable2, ptr @any_typ, ptr @Container, ptr @Object]
@Iterable2_offset_tbl = linkonce_odr constant [4 x i32] [i32 9, i32 9, i32 32, i32 32]
@Iterable2 = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 5693646204635713916, i64 4611686018427388349, i64 3], [6 x ptr] [ptr @subtype_test, ptr @Iterable2_hashtbl, ptr @Iterable2_offset_tbl, ptr @_size_Iterable2, ptr @_box_Default, ptr @_unbox_Default], [0 x ptr] undef }
@Array_hashtbl = linkonce_odr constant [8 x ptr] [ptr @Container, ptr null, ptr @Iterable2, ptr @Object, ptr @any_typ, ptr null, ptr null, ptr @Array]
@Array_offset_tbl = linkonce_odr constant [8 x i32] [i32 84, i32 0, i32 61, i32 84, i32 9, i32 0, i32 0, i32 9]
@Array = constant { [3 x i64], [6 x ptr], [75 x ptr] } { [3 x i64] [i64 -5261542750394134544, i64 4611686018427388289, i64 7], [6 x ptr] [ptr @subtype_test, ptr @Array_hashtbl, ptr @Array_offset_tbl, ptr @_size_Array, ptr @_box_Default, ptr @_unbox_Default], [75 x ptr] [ptr @Array_field_Array_0, ptr @Array_field_buffer, ptr @Array_field_length, ptr @Array_field_capacity, ptr @Array_B__Self_from_iterable_iterableIterable2T, ptr @Array_B_init_, ptr @Array_B_init_capacityPtri32, ptr @Array_B_init_lengthPtri32_capacityPtri32, ptr @Array_B_length_, ptr @Array_B_capacity_, ptr @Array_B_append_xT, ptr @Array_B_reserve_new_capacityPtri32, ptr @Array_B__index_xPtri32, ptr @Array_B__set_index_xPtri32_valueT, ptr @Array_B_throw_oob_xPtri32, ptr @Array_B_unchecked_index_xPtri32, ptr @Array_B_unchecked_insert_xPtri32_valueT, ptr @Array_B_iterator_, ptr @Array_B_each_fFunctionT_to_Nothing, ptr @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Array_B_all_fFunctionT_to_Ptri1, ptr @Array_B_any_fFunctionT_to_Ptri1, ptr @Array_B_map_fFunctionT_to_U, ptr @Array_B_filter_fFunctionT_to_Ptri1, ptr @Array_B_chain_otherIterable2T, ptr @Array_B_interleave_otherIterable2T, ptr @Array_B_zip_otherIterable2U, ptr @Array_B_product_otherIterable2U, ptr @Array__Self_from_iterable_iterableIterable2T, ptr @Array_init_, ptr @Array_init_capacityPtri32, ptr @Array_init_lengthPtri32_capacityPtri32, ptr @Array_length_, ptr @Array_capacity_, ptr @Array_append_xT, ptr @Array_reserve_new_capacityPtri32, ptr @Array__index_xPtri32, ptr @Array__set_index_xPtri32_valueT, ptr @Array_throw_oob_xPtri32, ptr @Array_unchecked_index_xPtri32, ptr @Array_unchecked_insert_xPtri32_valueT, ptr @Array_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @Array_field_Array_0, ptr @Array_B_iterator_, ptr @Array_B_each_fFunctionT_to_Nothing, ptr @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Array_B_all_fFunctionT_to_Ptri1, ptr @Array_B_any_fFunctionT_to_Ptri1, ptr @Array_B_map_fFunctionT_to_U, ptr @Array_B_filter_fFunctionT_to_Ptri1, ptr @Array_B_chain_otherIterable2T, ptr @Array_B_interleave_otherIterable2T, ptr @Array_B_zip_otherIterable2U, ptr @Array_B_product_otherIterable2U, ptr @Array_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
@ArrayIterator_hashtbl = linkonce_odr constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr @ArrayIterator, ptr null, ptr @Iterator2, ptr null]
@ArrayIterator_offset_tbl = linkonce_odr constant [8 x i32] [i32 19, i32 9, i32 0, i32 19, i32 9, i32 0, i32 16, i32 0]
@ArrayIterator = constant { [3 x i64], [6 x ptr], [10 x ptr] } { [3 x i64] [i64 3447345754186651411, i64 4611686018427388081, i64 7], [6 x ptr] [ptr @subtype_test, ptr @ArrayIterator_hashtbl, ptr @ArrayIterator_offset_tbl, ptr @_size_ArrayIterator, ptr @_box_Default, ptr @_unbox_Default], [10 x ptr] [ptr @ArrayIterator_field_ArrayIterator_0, ptr @ArrayIterator_field_array, ptr @ArrayIterator_field_index, ptr @ArrayIterator_B_init_arrayArrayT, ptr @ArrayIterator_B_next_, ptr @ArrayIterator_init_arrayArrayT, ptr @ArrayIterator_next_, ptr @ArrayIterator_field_ArrayIterator_0, ptr @ArrayIterator_B_next_, ptr @ArrayIterator_next_] }
@MapIterable2_hashtbl = linkonce_odr constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr @MapIterable2, ptr @Container, ptr null, ptr @Iterable2, ptr null, ptr null]
@MapIterable2_offset_tbl = linkonce_odr constant [8 x i32] [i32 60, i32 9, i32 9, i32 60, i32 0, i32 37, i32 0, i32 0]
@MapIterable2 = constant { [3 x i64], [6 x ptr], [51 x ptr] } { [3 x i64] [i64 -1724859134596891929, i64 4611686018427388081, i64 7], [6 x ptr] [ptr @subtype_test, ptr @MapIterable2_hashtbl, ptr @MapIterable2_offset_tbl, ptr @_size_MapIterable2, ptr @_box_Default, ptr @_unbox_Default], [51 x ptr] [ptr @MapIterable2_field_MapIterable2_0, ptr @MapIterable2_field_MapIterable2_1, ptr @MapIterable2_field_iterable, ptr @MapIterable2_field_f, ptr @MapIterable2_B_init_iterableIterable2T_fFunctionT_to_U, ptr @MapIterable2_B_iterator_, ptr @MapIterable2_B_each_fFunctionT_to_Nothing, ptr @MapIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @MapIterable2_B_all_fFunctionT_to_Ptri1, ptr @MapIterable2_B_any_fFunctionT_to_Ptri1, ptr @MapIterable2_B_map_fFunctionT_to_U, ptr @MapIterable2_B_filter_fFunctionT_to_Ptri1, ptr @MapIterable2_B_chain_otherIterable2T, ptr @MapIterable2_B_interleave_otherIterable2T, ptr @MapIterable2_B_zip_otherIterable2U, ptr @MapIterable2_B_product_otherIterable2U, ptr @MapIterable2_init_iterableIterable2T_fFunctionT_to_U, ptr @MapIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @MapIterable2_field_MapIterable2_1, ptr @MapIterable2_B_iterator_, ptr @MapIterable2_B_each_fFunctionT_to_Nothing, ptr @MapIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @MapIterable2_B_all_fFunctionT_to_Ptri1, ptr @MapIterable2_B_any_fFunctionT_to_Ptri1, ptr @MapIterable2_B_map_fFunctionT_to_U, ptr @MapIterable2_B_filter_fFunctionT_to_Ptri1, ptr @MapIterable2_B_chain_otherIterable2T, ptr @MapIterable2_B_interleave_otherIterable2T, ptr @MapIterable2_B_zip_otherIterable2U, ptr @MapIterable2_B_product_otherIterable2U, ptr @MapIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
@MapIterator2_hashtbl = linkonce_odr constant [8 x ptr] [ptr null, ptr @Container, ptr @MapIterator2, ptr null, ptr @Object, ptr @Iterator2, ptr null, ptr @any_typ]
@MapIterator2_offset_tbl = linkonce_odr constant [8 x i32] [i32 0, i32 20, i32 9, i32 0, i32 20, i32 17, i32 0, i32 9]
@MapIterator2 = constant { [3 x i64], [6 x ptr], [11 x ptr] } { [3 x i64] [i64 -10255947709272500, i64 4611686018427388279, i64 7], [6 x ptr] [ptr @subtype_test, ptr @MapIterator2_hashtbl, ptr @MapIterator2_offset_tbl, ptr @_size_MapIterator2, ptr @_box_Default, ptr @_unbox_Default], [11 x ptr] [ptr @MapIterator2_field_MapIterator2_0, ptr @MapIterator2_field_MapIterator2_1, ptr @MapIterator2_field_iterator, ptr @MapIterator2_field_f, ptr @MapIterator2_B_init_iteratorIterator2T_fFunctionT_to_U, ptr @MapIterator2_B_next_, ptr @MapIterator2_init_iteratorIterator2T_fFunctionT_to_U, ptr @MapIterator2_next_, ptr @MapIterator2_field_MapIterator2_1, ptr @MapIterator2_B_next_, ptr @MapIterator2_next_] }
@FilterIterable2_hashtbl = linkonce_odr constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr null, ptr @Iterable2, ptr @FilterIterable2, ptr null]
@FilterIterable2_offset_tbl = linkonce_odr constant [8 x i32] [i32 59, i32 9, i32 0, i32 59, i32 0, i32 36, i32 9, i32 0]
@FilterIterable2 = constant { [3 x i64], [6 x ptr], [50 x ptr] } { [3 x i64] [i64 1178467452958968374, i64 4611686018427388081, i64 7], [6 x ptr] [ptr @subtype_test, ptr @FilterIterable2_hashtbl, ptr @FilterIterable2_offset_tbl, ptr @_size_FilterIterable2, ptr @_box_Default, ptr @_unbox_Default], [50 x ptr] [ptr @FilterIterable2_field_FilterIterable2_0, ptr @FilterIterable2_field_iterable, ptr @FilterIterable2_field_f, ptr @FilterIterable2_B_init_iterableIterable2T_fFunctionT_to_Ptri1, ptr @FilterIterable2_B_iterator_, ptr @FilterIterable2_B_each_fFunctionT_to_Nothing, ptr @FilterIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @FilterIterable2_B_all_fFunctionT_to_Ptri1, ptr @FilterIterable2_B_any_fFunctionT_to_Ptri1, ptr @FilterIterable2_B_map_fFunctionT_to_U, ptr @FilterIterable2_B_filter_fFunctionT_to_Ptri1, ptr @FilterIterable2_B_chain_otherIterable2T, ptr @FilterIterable2_B_interleave_otherIterable2T, ptr @FilterIterable2_B_zip_otherIterable2U, ptr @FilterIterable2_B_product_otherIterable2U, ptr @FilterIterable2_init_iterableIterable2T_fFunctionT_to_Ptri1, ptr @FilterIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @FilterIterable2_field_FilterIterable2_0, ptr @FilterIterable2_B_iterator_, ptr @FilterIterable2_B_each_fFunctionT_to_Nothing, ptr @FilterIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @FilterIterable2_B_all_fFunctionT_to_Ptri1, ptr @FilterIterable2_B_any_fFunctionT_to_Ptri1, ptr @FilterIterable2_B_map_fFunctionT_to_U, ptr @FilterIterable2_B_filter_fFunctionT_to_Ptri1, ptr @FilterIterable2_B_chain_otherIterable2T, ptr @FilterIterable2_B_interleave_otherIterable2T, ptr @FilterIterable2_B_zip_otherIterable2U, ptr @FilterIterable2_B_product_otherIterable2U, ptr @FilterIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
@FilterIterator2_hashtbl = linkonce_odr constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr @FilterIterator2, ptr @Container, ptr null, ptr null, ptr @Iterator2, ptr null]
@FilterIterator2_offset_tbl = linkonce_odr constant [8 x i32] [i32 19, i32 9, i32 9, i32 19, i32 0, i32 0, i32 16, i32 0]
@FilterIterator2 = constant { [3 x i64], [6 x ptr], [10 x ptr] } { [3 x i64] [i64 8213847504843366470, i64 4611686018427388081, i64 7], [6 x ptr] [ptr @subtype_test, ptr @FilterIterator2_hashtbl, ptr @FilterIterator2_offset_tbl, ptr @_size_FilterIterator2, ptr @_box_Default, ptr @_unbox_Default], [10 x ptr] [ptr @FilterIterator2_field_FilterIterator2_0, ptr @FilterIterator2_field_iterator, ptr @FilterIterator2_field_f, ptr @FilterIterator2_B_init_iteratorIterator2T_fFunctionT_to_Ptri1, ptr @FilterIterator2_B_next_, ptr @FilterIterator2_init_iteratorIterator2T_fFunctionT_to_Ptri1, ptr @FilterIterator2_next_, ptr @FilterIterator2_field_FilterIterator2_0, ptr @FilterIterator2_B_next_, ptr @FilterIterator2_next_] }
@ChainIterable2_hashtbl = linkonce_odr constant [8 x ptr] [ptr @ChainIterable2, ptr @Object, ptr @any_typ, ptr null, ptr null, ptr @Container, ptr null, ptr @Iterable2]
@ChainIterable2_offset_tbl = linkonce_odr constant [8 x i32] [i32 9, i32 59, i32 9, i32 0, i32 0, i32 59, i32 0, i32 36]
@ChainIterable2 = constant { [3 x i64], [6 x ptr], [50 x ptr] } { [3 x i64] [i64 -5233298072945030060, i64 4611686018427388319, i64 7], [6 x ptr] [ptr @subtype_test, ptr @ChainIterable2_hashtbl, ptr @ChainIterable2_offset_tbl, ptr @_size_ChainIterable2, ptr @_box_Default, ptr @_unbox_Default], [50 x ptr] [ptr @ChainIterable2_field_ChainIterable2_0, ptr @ChainIterable2_field_first, ptr @ChainIterable2_field_second, ptr @ChainIterable2_B_init_firstIterable2T_secondIterable2T, ptr @ChainIterable2_B_iterator_, ptr @ChainIterable2_B_each_fFunctionT_to_Nothing, ptr @ChainIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ChainIterable2_B_all_fFunctionT_to_Ptri1, ptr @ChainIterable2_B_any_fFunctionT_to_Ptri1, ptr @ChainIterable2_B_map_fFunctionT_to_U, ptr @ChainIterable2_B_filter_fFunctionT_to_Ptri1, ptr @ChainIterable2_B_chain_otherIterable2T, ptr @ChainIterable2_B_interleave_otherIterable2T, ptr @ChainIterable2_B_zip_otherIterable2U, ptr @ChainIterable2_B_product_otherIterable2U, ptr @ChainIterable2_init_firstIterable2T_secondIterable2T, ptr @ChainIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @ChainIterable2_field_ChainIterable2_0, ptr @ChainIterable2_B_iterator_, ptr @ChainIterable2_B_each_fFunctionT_to_Nothing, ptr @ChainIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ChainIterable2_B_all_fFunctionT_to_Ptri1, ptr @ChainIterable2_B_any_fFunctionT_to_Ptri1, ptr @ChainIterable2_B_map_fFunctionT_to_U, ptr @ChainIterable2_B_filter_fFunctionT_to_Ptri1, ptr @ChainIterable2_B_chain_otherIterable2T, ptr @ChainIterable2_B_interleave_otherIterable2T, ptr @ChainIterable2_B_zip_otherIterable2U, ptr @ChainIterable2_B_product_otherIterable2U, ptr @ChainIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
@ChainIterator2_hashtbl = linkonce_odr constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr null, ptr null, ptr @Iterator2, ptr @ChainIterator2]
@ChainIterator2_offset_tbl = linkonce_odr constant [8 x i32] [i32 20, i32 9, i32 0, i32 20, i32 0, i32 0, i32 17, i32 9]
@ChainIterator2 = constant { [3 x i64], [6 x ptr], [11 x ptr] } { [3 x i64] [i64 -228267985060461774, i64 4611686018427388081, i64 7], [6 x ptr] [ptr @subtype_test, ptr @ChainIterator2_hashtbl, ptr @ChainIterator2_offset_tbl, ptr @_size_ChainIterator2, ptr @_box_Default, ptr @_unbox_Default], [11 x ptr] [ptr @ChainIterator2_field_ChainIterator2_0, ptr @ChainIterator2_field_first, ptr @ChainIterator2_field_second, ptr @ChainIterator2_field_on_first, ptr @ChainIterator2_B_init_firstIterator2T_secondIterator2T, ptr @ChainIterator2_B_next_, ptr @ChainIterator2_init_firstIterator2T_secondIterator2T, ptr @ChainIterator2_next_, ptr @ChainIterator2_field_ChainIterator2_0, ptr @ChainIterator2_B_next_, ptr @ChainIterator2_next_] }
@InterleaveIterable2_hashtbl = linkonce_odr constant [8 x ptr] [ptr @Iterable2, ptr null, ptr null, ptr @InterleaveIterable2, ptr @any_typ, ptr @Object, ptr null, ptr @Container]
@InterleaveIterable2_offset_tbl = linkonce_odr constant [8 x i32] [i32 36, i32 0, i32 0, i32 9, i32 9, i32 59, i32 0, i32 59]
@InterleaveIterable2 = constant { [3 x i64], [6 x ptr], [50 x ptr] } { [3 x i64] [i64 -6258231685215461775, i64 4611686018427388207, i64 7], [6 x ptr] [ptr @subtype_test, ptr @InterleaveIterable2_hashtbl, ptr @InterleaveIterable2_offset_tbl, ptr @_size_InterleaveIterable2, ptr @_box_Default, ptr @_unbox_Default], [50 x ptr] [ptr @InterleaveIterable2_field_InterleaveIterable2_0, ptr @InterleaveIterable2_field_first, ptr @InterleaveIterable2_field_second, ptr @InterleaveIterable2_B_init_firstIterable2T_secondIterable2T, ptr @InterleaveIterable2_B_iterator_, ptr @InterleaveIterable2_B_each_fFunctionT_to_Nothing, ptr @InterleaveIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @InterleaveIterable2_B_all_fFunctionT_to_Ptri1, ptr @InterleaveIterable2_B_any_fFunctionT_to_Ptri1, ptr @InterleaveIterable2_B_map_fFunctionT_to_U, ptr @InterleaveIterable2_B_filter_fFunctionT_to_Ptri1, ptr @InterleaveIterable2_B_chain_otherIterable2T, ptr @InterleaveIterable2_B_interleave_otherIterable2T, ptr @InterleaveIterable2_B_zip_otherIterable2U, ptr @InterleaveIterable2_B_product_otherIterable2U, ptr @InterleaveIterable2_init_firstIterable2T_secondIterable2T, ptr @InterleaveIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @InterleaveIterable2_field_InterleaveIterable2_0, ptr @InterleaveIterable2_B_iterator_, ptr @InterleaveIterable2_B_each_fFunctionT_to_Nothing, ptr @InterleaveIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @InterleaveIterable2_B_all_fFunctionT_to_Ptri1, ptr @InterleaveIterable2_B_any_fFunctionT_to_Ptri1, ptr @InterleaveIterable2_B_map_fFunctionT_to_U, ptr @InterleaveIterable2_B_filter_fFunctionT_to_Ptri1, ptr @InterleaveIterable2_B_chain_otherIterable2T, ptr @InterleaveIterable2_B_interleave_otherIterable2T, ptr @InterleaveIterable2_B_zip_otherIterable2U, ptr @InterleaveIterable2_B_product_otherIterable2U, ptr @InterleaveIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
@InterleaveIterator2_hashtbl = linkonce_odr constant [8 x ptr] [ptr @any_typ, ptr null, ptr null, ptr @InterleaveIterator2, ptr @Container, ptr null, ptr @Iterator2, ptr @Object]
@InterleaveIterator2_offset_tbl = linkonce_odr constant [8 x i32] [i32 9, i32 0, i32 0, i32 9, i32 20, i32 0, i32 17, i32 20]
@InterleaveIterator2 = constant { [3 x i64], [6 x ptr], [11 x ptr] } { [3 x i64] [i64 6709847746581360093, i64 4611686018427388247, i64 7], [6 x ptr] [ptr @subtype_test, ptr @InterleaveIterator2_hashtbl, ptr @InterleaveIterator2_offset_tbl, ptr @_size_InterleaveIterator2, ptr @_box_Default, ptr @_unbox_Default], [11 x ptr] [ptr @InterleaveIterator2_field_InterleaveIterator2_0, ptr @InterleaveIterator2_field_first, ptr @InterleaveIterator2_field_second, ptr @InterleaveIterator2_field_on_first, ptr @InterleaveIterator2_B_init_firstIterator2T_secondIterator2T, ptr @InterleaveIterator2_B_next_, ptr @InterleaveIterator2_init_firstIterator2T_secondIterator2T, ptr @InterleaveIterator2_next_, ptr @InterleaveIterator2_field_InterleaveIterator2_0, ptr @InterleaveIterator2_B_next_, ptr @InterleaveIterator2_next_] }
@ZipIterable2_hashtbl = linkonce_odr constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr @ZipIterable2, ptr @Container, ptr null, ptr @Iterable2, ptr null, ptr null]
@ZipIterable2_offset_tbl = linkonce_odr constant [8 x i32] [i32 61, i32 9, i32 9, i32 61, i32 0, i32 38, i32 0, i32 0]
@ZipIterable2 = constant { [3 x i64], [6 x ptr], [52 x ptr] } { [3 x i64] [i64 -3218950579047519815, i64 4611686018427388081, i64 7], [6 x ptr] [ptr @subtype_test, ptr @ZipIterable2_hashtbl, ptr @ZipIterable2_offset_tbl, ptr @_size_ZipIterable2, ptr @_box_Default, ptr @_unbox_Default], [52 x ptr] [ptr @ZipIterable2_field_ZipIterable2_0, ptr @ZipIterable2_field_ZipIterable2_1, ptr @ZipIterable2_field_ZipIterable2_2, ptr @ZipIterable2_field_first, ptr @ZipIterable2_field_second, ptr @ZipIterable2_B_init_firstIterable2T_secondIterable2U, ptr @ZipIterable2_B_iterator_, ptr @ZipIterable2_B_each_fFunctionT_to_Nothing, ptr @ZipIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ZipIterable2_B_all_fFunctionT_to_Ptri1, ptr @ZipIterable2_B_any_fFunctionT_to_Ptri1, ptr @ZipIterable2_B_map_fFunctionT_to_U, ptr @ZipIterable2_B_filter_fFunctionT_to_Ptri1, ptr @ZipIterable2_B_chain_otherIterable2T, ptr @ZipIterable2_B_interleave_otherIterable2T, ptr @ZipIterable2_B_zip_otherIterable2U, ptr @ZipIterable2_B_product_otherIterable2U, ptr @ZipIterable2_init_firstIterable2T_secondIterable2U, ptr @ZipIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @ZipIterable2_field_ZipIterable2_2, ptr @ZipIterable2_B_iterator_, ptr @ZipIterable2_B_each_fFunctionT_to_Nothing, ptr @ZipIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ZipIterable2_B_all_fFunctionT_to_Ptri1, ptr @ZipIterable2_B_any_fFunctionT_to_Ptri1, ptr @ZipIterable2_B_map_fFunctionT_to_U, ptr @ZipIterable2_B_filter_fFunctionT_to_Ptri1, ptr @ZipIterable2_B_chain_otherIterable2T, ptr @ZipIterable2_B_interleave_otherIterable2T, ptr @ZipIterable2_B_zip_otherIterable2U, ptr @ZipIterable2_B_product_otherIterable2U, ptr @ZipIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
@ZipIterator2_hashtbl = linkonce_odr constant [8 x ptr] [ptr @any_typ, ptr null, ptr null, ptr @ZipIterator2, ptr @Container, ptr null, ptr @Iterator2, ptr @Object]
@ZipIterator2_offset_tbl = linkonce_odr constant [8 x i32] [i32 9, i32 0, i32 0, i32 9, i32 21, i32 0, i32 18, i32 21]
@ZipIterator2 = constant { [3 x i64], [6 x ptr], [12 x ptr] } { [3 x i64] [i64 5502728639611621286, i64 4611686018427388247, i64 7], [6 x ptr] [ptr @subtype_test, ptr @ZipIterator2_hashtbl, ptr @ZipIterator2_offset_tbl, ptr @_size_ZipIterator2, ptr @_box_Default, ptr @_unbox_Default], [12 x ptr] [ptr @ZipIterator2_field_ZipIterator2_0, ptr @ZipIterator2_field_ZipIterator2_1, ptr @ZipIterator2_field_ZipIterator2_2, ptr @ZipIterator2_field_first, ptr @ZipIterator2_field_second, ptr @ZipIterator2_B_init_firstIterator2T_secondIterator2U, ptr @ZipIterator2_B_next_, ptr @ZipIterator2_init_firstIterator2T_secondIterator2U, ptr @ZipIterator2_next_, ptr @ZipIterator2_field_ZipIterator2_2, ptr @ZipIterator2_B_next_, ptr @ZipIterator2_next_] }
@ProductIterable2_hashtbl = linkonce_odr constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr null, ptr @Iterable2, ptr @ProductIterable2, ptr null]
@ProductIterable2_offset_tbl = linkonce_odr constant [8 x i32] [i32 61, i32 9, i32 0, i32 61, i32 0, i32 38, i32 9, i32 0]
@ProductIterable2 = constant { [3 x i64], [6 x ptr], [52 x ptr] } { [3 x i64] [i64 7827074759551300494, i64 4611686018427388081, i64 7], [6 x ptr] [ptr @subtype_test, ptr @ProductIterable2_hashtbl, ptr @ProductIterable2_offset_tbl, ptr @_size_ProductIterable2, ptr @_box_Default, ptr @_unbox_Default], [52 x ptr] [ptr @ProductIterable2_field_ProductIterable2_0, ptr @ProductIterable2_field_ProductIterable2_1, ptr @ProductIterable2_field_ProductIterable2_2, ptr @ProductIterable2_field_first, ptr @ProductIterable2_field_second, ptr @ProductIterable2_B_init_firstIterable2T_secondIterable2U, ptr @ProductIterable2_B_iterator_, ptr @ProductIterable2_B_each_fFunctionT_to_Nothing, ptr @ProductIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ProductIterable2_B_all_fFunctionT_to_Ptri1, ptr @ProductIterable2_B_any_fFunctionT_to_Ptri1, ptr @ProductIterable2_B_map_fFunctionT_to_U, ptr @ProductIterable2_B_filter_fFunctionT_to_Ptri1, ptr @ProductIterable2_B_chain_otherIterable2T, ptr @ProductIterable2_B_interleave_otherIterable2T, ptr @ProductIterable2_B_zip_otherIterable2U, ptr @ProductIterable2_B_product_otherIterable2U, ptr @ProductIterable2_init_firstIterable2T_secondIterable2U, ptr @ProductIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @ProductIterable2_field_ProductIterable2_2, ptr @ProductIterable2_B_iterator_, ptr @ProductIterable2_B_each_fFunctionT_to_Nothing, ptr @ProductIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ProductIterable2_B_all_fFunctionT_to_Ptri1, ptr @ProductIterable2_B_any_fFunctionT_to_Ptri1, ptr @ProductIterable2_B_map_fFunctionT_to_U, ptr @ProductIterable2_B_filter_fFunctionT_to_Ptri1, ptr @ProductIterable2_B_chain_otherIterable2T, ptr @ProductIterable2_B_interleave_otherIterable2T, ptr @ProductIterable2_B_zip_otherIterable2U, ptr @ProductIterable2_B_product_otherIterable2U, ptr @ProductIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
@ProductIterator2_hashtbl = linkonce_odr constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr null, ptr @ProductIterator2, ptr @Iterator2, ptr null]
@ProductIterator2_offset_tbl = linkonce_odr constant [8 x i32] [i32 23, i32 9, i32 0, i32 23, i32 0, i32 9, i32 20, i32 0]
@ProductIterator2 = constant { [3 x i64], [6 x ptr], [14 x ptr] } { [3 x i64] [i64 4440657219728359865, i64 4611686018427388081, i64 7], [6 x ptr] [ptr @subtype_test, ptr @ProductIterator2_hashtbl, ptr @ProductIterator2_offset_tbl, ptr @_size_ProductIterator2, ptr @_box_Default, ptr @_unbox_Default], [14 x ptr] [ptr @ProductIterator2_field_ProductIterator2_0, ptr @ProductIterator2_field_ProductIterator2_1, ptr @ProductIterator2_field_ProductIterator2_2, ptr @ProductIterator2_field_first_iterator, ptr @ProductIterator2_field_second_iterator, ptr @ProductIterator2_field_second_iterable, ptr @ProductIterator2_field_current_first, ptr @ProductIterator2_B_init_first_iteratorIterator2T_second_iterableIterable2U, ptr @ProductIterator2_B_next_, ptr @ProductIterator2_init_first_iteratorIterator2T_second_iterableIterable2U, ptr @ProductIterator2_next_, ptr @ProductIterator2_field_ProductIterator2_2, ptr @ProductIterator2_B_next_, ptr @ProductIterator2_next_] }
@Pair_field_first = internal constant { ptr, ptr } { ptr @Pair_getter_first, ptr @Pair_setter_first }
@Pair_field_second = internal constant { ptr, ptr } { ptr @Pair_getter_second, ptr @Pair_setter_second }
@Array_field_buffer = internal constant { ptr, ptr } { ptr @Array_getter_buffer, ptr @Array_setter_buffer }
@Array_field_length = internal constant { ptr, ptr } { ptr @Array_getter_length, ptr @Array_setter_length }
@Array_field_capacity = internal constant { ptr, ptr } { ptr @Array_getter_capacity, ptr @Array_setter_capacity }
@ArrayIterator_field_array = internal constant { ptr, ptr } { ptr @ArrayIterator_getter_array, ptr @ArrayIterator_setter_array }
@ArrayIterator_field_index = internal constant { ptr, ptr } { ptr @ArrayIterator_getter_index, ptr @ArrayIterator_setter_index }
@MapIterable2_field_iterable = internal constant { ptr, ptr } { ptr @MapIterable2_getter_iterable, ptr @MapIterable2_setter_iterable }
@MapIterable2_field_f = internal constant { ptr, ptr } { ptr @MapIterable2_getter_f, ptr @MapIterable2_setter_f }
@MapIterator2_field_iterator = internal constant { ptr, ptr } { ptr @MapIterator2_getter_iterator, ptr @MapIterator2_setter_iterator }
@MapIterator2_field_f = internal constant { ptr, ptr } { ptr @MapIterator2_getter_f, ptr @MapIterator2_setter_f }
@FilterIterable2_field_iterable = internal constant { ptr, ptr } { ptr @FilterIterable2_getter_iterable, ptr @FilterIterable2_setter_iterable }
@FilterIterable2_field_f = internal constant { ptr, ptr } { ptr @FilterIterable2_getter_f, ptr @FilterIterable2_setter_f }
@FilterIterator2_field_iterator = internal constant { ptr, ptr } { ptr @FilterIterator2_getter_iterator, ptr @FilterIterator2_setter_iterator }
@FilterIterator2_field_f = internal constant { ptr, ptr } { ptr @FilterIterator2_getter_f, ptr @FilterIterator2_setter_f }
@ChainIterable2_field_first = internal constant { ptr, ptr } { ptr @ChainIterable2_getter_first, ptr @ChainIterable2_setter_first }
@ChainIterable2_field_second = internal constant { ptr, ptr } { ptr @ChainIterable2_getter_second, ptr @ChainIterable2_setter_second }
@ChainIterator2_field_first = internal constant { ptr, ptr } { ptr @ChainIterator2_getter_first, ptr @ChainIterator2_setter_first }
@ChainIterator2_field_second = internal constant { ptr, ptr } { ptr @ChainIterator2_getter_second, ptr @ChainIterator2_setter_second }
@ChainIterator2_field_on_first = internal constant { ptr, ptr } { ptr @ChainIterator2_getter_on_first, ptr @ChainIterator2_setter_on_first }
@InterleaveIterable2_field_first = internal constant { ptr, ptr } { ptr @InterleaveIterable2_getter_first, ptr @InterleaveIterable2_setter_first }
@InterleaveIterable2_field_second = internal constant { ptr, ptr } { ptr @InterleaveIterable2_getter_second, ptr @InterleaveIterable2_setter_second }
@InterleaveIterator2_field_first = internal constant { ptr, ptr } { ptr @InterleaveIterator2_getter_first, ptr @InterleaveIterator2_setter_first }
@InterleaveIterator2_field_second = internal constant { ptr, ptr } { ptr @InterleaveIterator2_getter_second, ptr @InterleaveIterator2_setter_second }
@InterleaveIterator2_field_on_first = internal constant { ptr, ptr } { ptr @InterleaveIterator2_getter_on_first, ptr @InterleaveIterator2_setter_on_first }
@ZipIterable2_field_first = internal constant { ptr, ptr } { ptr @ZipIterable2_getter_first, ptr @ZipIterable2_setter_first }
@ZipIterable2_field_second = internal constant { ptr, ptr } { ptr @ZipIterable2_getter_second, ptr @ZipIterable2_setter_second }
@ZipIterator2_field_first = internal constant { ptr, ptr } { ptr @ZipIterator2_getter_first, ptr @ZipIterator2_setter_first }
@ZipIterator2_field_second = internal constant { ptr, ptr } { ptr @ZipIterator2_getter_second, ptr @ZipIterator2_setter_second }
@ProductIterable2_field_first = internal constant { ptr, ptr } { ptr @ProductIterable2_getter_first, ptr @ProductIterable2_setter_first }
@ProductIterable2_field_second = internal constant { ptr, ptr } { ptr @ProductIterable2_getter_second, ptr @ProductIterable2_setter_second }
@ProductIterator2_field_first_iterator = internal constant { ptr, ptr } { ptr @ProductIterator2_getter_first_iterator, ptr @ProductIterator2_setter_first_iterator }
@ProductIterator2_field_second_iterator = internal constant { ptr, ptr } { ptr @ProductIterator2_getter_second_iterator, ptr @ProductIterator2_setter_second_iterator }
@ProductIterator2_field_second_iterable = internal constant { ptr, ptr } { ptr @ProductIterator2_getter_second_iterable, ptr @ProductIterator2_setter_second_iterable }
@ProductIterator2_field_current_first = internal constant { ptr, ptr } { ptr @ProductIterator2_getter_current_first, ptr @ProductIterator2_setter_current_first }
@_parameterization_Ptri8 = linkonce_odr constant [2 x ptr] [ptr @i8_typ, ptr null]
@_parameterization_String = linkonce_odr constant [2 x ptr] [ptr @String, ptr null]
@Object_hashtbl = linkonce_odr constant [2 x ptr] [ptr @Object, ptr @any_typ]
@Object_offset_tbl = linkonce_odr constant [2 x i32] [i32 9, i32 9]
@Iterator_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @Iterator]
@Iterator_offset_tbl = linkonce_odr constant [4 x i32] [i32 9, i32 0, i32 9, i32 9]
@Iterable_hashtbl = linkonce_odr constant [4 x ptr] [ptr null, ptr @Iterable, ptr @any_typ, ptr @Object]
@Iterable_offset_tbl = linkonce_odr constant [4 x i32] [i32 0, i32 9, i32 9, i32 11]
@Representable_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Representable, ptr null, ptr @any_typ, ptr @Object]
@Representable_offset_tbl = linkonce_odr constant [4 x i32] [i32 9, i32 0, i32 9, i32 11]
@String_hashtbl = linkonce_odr constant [8 x ptr] [ptr @any_typ, ptr null, ptr @String, ptr @Representable, ptr @Object, ptr null, ptr null, ptr @Iterable]
@String_offset_tbl = linkonce_odr constant [8 x i32] [i32 9, i32 0, i32 9, i32 42, i32 42, i32 0, i32 0, i32 40]
@Character_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @Character]
@Character_offset_tbl = linkonce_odr constant [4 x i32] [i32 14, i32 0, i32 9, i32 9]
@StringIterator_hashtbl = linkonce_odr constant [4 x ptr] [ptr @StringIterator, ptr @Object, ptr @any_typ, ptr @Iterator]
@StringIterator_offset_tbl = linkonce_odr constant [4 x i32] [i32 9, i32 15, i32 9, i32 15]
@Exception_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @Exception]
@Exception_offset_tbl = linkonce_odr constant [4 x i32] [i32 22, i32 0, i32 9, i32 9]
@String_field_bytes = internal constant { ptr, ptr } { ptr @String_getter_bytes, ptr @String_setter_bytes }
@String_field_length = internal constant { ptr, ptr } { ptr @String_getter_length, ptr @String_setter_length }
@String_field_capacity = internal constant { ptr, ptr } { ptr @String_getter_capacity, ptr @String_setter_capacity }
@Character_field_byte = internal constant { ptr, ptr } { ptr @Character_getter_byte, ptr @Character_setter_byte }
@StringIterator_field_str = internal constant { ptr, ptr } { ptr @StringIterator_getter_str, ptr @StringIterator_setter_str }
@StringIterator_field_index = internal constant { ptr, ptr } { ptr @StringIterator_getter_index, ptr @StringIterator_setter_index }
@Exception_field_line_number = internal constant { ptr, ptr } { ptr @Exception_getter_line_number, ptr @Exception_setter_line_number }
@Exception_field_file_name = internal constant { ptr, ptr } { ptr @Exception_getter_file_name, ptr @Exception_setter_file_name }
@Exception_field_message = internal constant { ptr, ptr } { ptr @Exception_getter_message, ptr @Exception_setter_message }
@_parameterization_Ptri32 = linkonce_odr constant [2 x ptr] [ptr @i32_typ, ptr null]
@i32_string = linkonce_odr constant [4 x i8] c"%d\0A\00"
@i64_string = linkonce_odr constant [6 x i8] c"%lld\0A\00"
@bool_typ_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @bool_typ]
@bool_typ_offset_tbl = linkonce_odr constant [4 x i32] [i32 9, i32 9, i32 0, i32 9]
@bool_typ = linkonce_odr constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 5801531371504802705, i64 4611686018427388081, i64 3], [6 x ptr] [ptr @subtype_test, ptr @bool_typ_hashtbl, ptr @bool_typ_offset_tbl, ptr @_size_bool_typ, ptr @_box_bool_typ, ptr @_unbox_bool_typ], [0 x ptr] undef }
@i8_typ_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @i8_typ]
@i8_typ_offset_tbl = linkonce_odr constant [4 x i32] [i32 9, i32 9, i32 0, i32 9]
@i8_typ = linkonce_odr constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 2582149688529881115, i64 4611686018427388081, i64 3], [6 x ptr] [ptr @subtype_test, ptr @i8_typ_hashtbl, ptr @i8_typ_offset_tbl, ptr @_size_i8_typ, ptr @_box_i8_typ, ptr @_unbox_i8_typ], [0 x ptr] undef }
@i32_typ_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @i32_typ, ptr null]
@i32_typ_offset_tbl = linkonce_odr constant [4 x i32] [i32 9, i32 9, i32 9, i32 0]
@i32_typ = linkonce_odr constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 -2253724949814257982, i64 4611686018427388081, i64 3], [6 x ptr] [ptr @subtype_test, ptr @i32_typ_hashtbl, ptr @i32_typ_offset_tbl, ptr @_size_i32_typ, ptr @_box_i32_typ, ptr @_unbox_i32_typ], [0 x ptr] undef }
@f64_typ_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @f64_typ]
@f64_typ_offset_tbl = linkonce_odr constant [4 x i32] [i32 9, i32 9, i32 0, i32 9]
@f64_typ = linkonce_odr constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 -757315540097298781, i64 4611686018427388081, i64 3], [6 x ptr] [ptr @subtype_test, ptr @f64_typ_hashtbl, ptr @f64_typ_offset_tbl, ptr @_size_f64_typ, ptr @_box_f64_typ, ptr @_unbox_f64_typ], [0 x ptr] undef }
@nil_typ_hashtbl = linkonce_odr constant [2 x ptr] [ptr @nil_typ, ptr @any_typ]
@nil_typ_offset_tbl = linkonce_odr constant [2 x i32] [i32 9, i32 9]
@nil_typ = linkonce_odr constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 -5126806859456325683, i64 4611686018427388081, i64 1], [6 x ptr] [ptr @subtype_test, ptr @nil_typ_hashtbl, ptr @nil_typ_offset_tbl, ptr @_size_nil_typ, ptr @_box_nil_typ, ptr @_unbox_nil_typ], [0 x ptr] undef }
@any_typ_hashtbl = linkonce_odr constant [1 x ptr] [ptr @any_typ]
@any_typ_offset_tbl = linkonce_odr constant [1 x i32] [i32 9]
@any_typ = linkonce_odr constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 3084208142191802847, i64 4611686018427388073, i64 0], [6 x ptr] [ptr @subtype_test, ptr @any_typ_hashtbl, ptr @any_typ_offset_tbl, ptr @_size_any_typ, ptr @_box_Default, ptr @_unbox_Default], [0 x ptr] undef }
@function_typ_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @function_typ, ptr null]
@function_typ_offset_tbl = linkonce_odr constant [4 x i32] [i32 9, i32 9, i32 9, i32 0]
@function_typ = linkonce_odr constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 7927147055246173914, i64 4611686018427388081, i64 3], [6 x ptr] [ptr @subtype_test, ptr @function_typ_hashtbl, ptr @function_typ_offset_tbl, ptr @_size_function_typ, ptr @_box_function_typ, ptr @_unbox_function_typ], [0 x ptr] undef }
@union_typ_hashtbl = linkonce_odr constant [4 x ptr] [ptr @union_typ, ptr null, ptr @any_typ, ptr @Object]
@union_typ_offset_tbl = linkonce_odr constant [4 x i32] [i32 9, i32 0, i32 9, i32 9]
@union_typ = linkonce_odr constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 -7543233778997666740, i64 4611686018427388093, i64 3], [6 x ptr] [ptr @subtype_test, ptr @union_typ_hashtbl, ptr @union_typ_offset_tbl, ptr @_size_union_typ, ptr @_box_union_typ, ptr @_unbox_union_typ], [0 x ptr] undef }
@Object = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 3282773614056351330, i64 4611686018427388081, i64 1], [6 x ptr] [ptr @subtype_test, ptr @Object_hashtbl, ptr @Object_offset_tbl, ptr @_size_Object, ptr @_box_Default, ptr @_unbox_Default], [0 x ptr] undef }
@Iterator = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 8673632051301757104, i64 4611686018427388091, i64 3], [6 x ptr] [ptr @subtype_test, ptr @Iterator_hashtbl, ptr @Iterator_offset_tbl, ptr @_size_Iterator, ptr @_box_Default, ptr @_unbox_Default], [0 x ptr] undef }
@Iterable = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 3037712219555723519, i64 4611686018427388093, i64 3], [6 x ptr] [ptr @subtype_test, ptr @Iterable_hashtbl, ptr @Iterable_offset_tbl, ptr @_size_Iterable, ptr @_box_Default, ptr @_unbox_Default], [0 x ptr] undef }
@Representable = constant { [3 x i64], [6 x ptr], [2 x ptr] } { [3 x i64] [i64 -7260840641129990118, i64 4611686018427388093, i64 3], [6 x ptr] [ptr @subtype_test, ptr @Representable_hashtbl, ptr @Representable_offset_tbl, ptr @_size_Representable, ptr @_box_Default, ptr @_unbox_Default], [2 x ptr] [ptr @Representable_B_repr_, ptr @Representable_repr_] }
@String = constant { [3 x i64], [6 x ptr], [35 x ptr] } { [3 x i64] [i64 6499063144389013426, i64 4611686018427388073, i64 7], [6 x ptr] [ptr @subtype_test, ptr @String_hashtbl, ptr @String_offset_tbl, ptr @_size_String, ptr @_box_Default, ptr @_unbox_Default], [35 x ptr] [ptr @String_field_bytes, ptr @String_field_length, ptr @String_field_capacity, ptr @String_B_init_, ptr @String_B_init_bytesBufferPtri8_lengthPtri32_capacityPtri32, ptr @String_B_length_, ptr @String_B_capacity_, ptr @String_B_bytes_, ptr @String_B_append_xPtri8, ptr @String_B_extend_strString, ptr @String_B__index_xPtri32, ptr @String_B__EQ_otherString, ptr @String_B_pop_, ptr @String_B_copy_, ptr @String_B_c_string_, ptr @String_B_iterator_, ptr @String_B_repr_, ptr @String_init_, ptr @String_init_bytesBufferPtri8_lengthPtri32_capacityPtri32, ptr @String_length_, ptr @String_capacity_, ptr @String_bytes_, ptr @String_append_xPtri8, ptr @String_extend_strString, ptr @String__index_xPtri32, ptr @String__EQ_otherString, ptr @String_pop_, ptr @String_copy_, ptr @String_c_string_, ptr @String_iterator_, ptr @String_repr_, ptr @String_B_iterator_, ptr @String_iterator_, ptr @String_B_repr_, ptr @String_repr_] }
@Character = constant { [3 x i64], [6 x ptr], [5 x ptr] } { [3 x i64] [i64 6681222582356018452, i64 4611686018427388091, i64 3], [6 x ptr] [ptr @subtype_test, ptr @Character_hashtbl, ptr @Character_offset_tbl, ptr @_size_Character, ptr @_box_Default, ptr @_unbox_Default], [5 x ptr] [ptr @Character_field_byte, ptr @Character_B_byte_, ptr @Character_B_init_bytePtri8, ptr @Character_byte_, ptr @Character_init_bytePtri8] }
@StringIterator = constant { [3 x i64], [6 x ptr], [6 x ptr] } { [3 x i64] [i64 -7260570988945952630, i64 4611686018427388097, i64 3], [6 x ptr] [ptr @subtype_test, ptr @StringIterator_hashtbl, ptr @StringIterator_offset_tbl, ptr @_size_StringIterator, ptr @_box_Default, ptr @_unbox_Default], [6 x ptr] [ptr @StringIterator_field_str, ptr @StringIterator_field_index, ptr @StringIterator_B_init_strString, ptr @StringIterator_B_next_, ptr @StringIterator_init_strString, ptr @StringIterator_next_] }
@Exception = constant { [3 x i64], [6 x ptr], [13 x ptr] } { [3 x i64] [i64 9027164862567808692, i64 4611686018427388091, i64 3], [6 x ptr] [ptr @subtype_test, ptr @Exception_hashtbl, ptr @Exception_offset_tbl, ptr @_size_Exception, ptr @_box_Default, ptr @_unbox_Default], [13 x ptr] [ptr @Exception_field_line_number, ptr @Exception_field_file_name, ptr @Exception_field_message, ptr @Exception_B_init_messageString, ptr @Exception_B_init_, ptr @Exception_B_set_info_line_numberPtri32_file_nameString, ptr @Exception_B_report_, ptr @Exception_B_print_message_, ptr @Exception_init_messageString, ptr @Exception_init_, ptr @Exception_set_info_line_numberPtri32_file_nameString, ptr @Exception_report_, ptr @Exception_print_message_] }
@IO_hashtbl = linkonce_odr constant [4 x ptr] [ptr @any_typ, ptr @IO, ptr null, ptr @Object]
@IO_offset_tbl = linkonce_odr constant [4 x i32] [i32 9, i32 9, i32 0, i32 19]
@IO = constant { [3 x i64], [6 x ptr], [10 x ptr] } { [3 x i64] [i64 5359822646784595218, i64 4611686018427388247, i64 3], [6 x ptr] [ptr @subtype_test, ptr @IO_hashtbl, ptr @IO_offset_tbl, ptr @_size_IO, ptr @_box_Default, ptr @_unbox_Default], [10 x ptr] [ptr @IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil, ptr @IO__Self_print_xPtri64, ptr @IO__Self_print_xPtri8, ptr @IO__Self_print_xPtrf64, ptr @IO__Self_print_xString, ptr @IO__Self_print_xPtri1, ptr @IO__Self_print_xRepresentable, ptr @IO__Self_print_xPtri32, ptr @IO__Self_print_xCharacter, ptr @IO__Self_print_xNil] }
@string_string.59 = internal constant [4 x i8] c"%s\0A\00"
@float_string = linkonce_odr constant [4 x i8] c"%f\0A\00"
@exception_message = internal constant [45 x i8] c"Error: uncaught exception. Program aborted.\0A\00"
@into_caller_buf = linkonce_odr thread_local global [3 x ptr] zeroinitializer
@current_coroutine = linkonce_odr thread_local local_unnamed_addr global ptr null
@always_one = linkonce thread_local local_unnamed_addr global i1 true
@current_ptr = internal thread_local global ptr null

define { i64, i64 } @_size_Entry(ptr nocapture readonly %0) {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr i8, ptr %4, i64 48
  %6 = load ptr, ptr %5, align 8
  %7 = tail call { i64, i64 } %6(ptr nonnull %3)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = extractvalue { i64, i64 } %7, 1
  %10 = urem i64 20, %9
  %11 = icmp eq i64 %10, 0
  %12 = sub i64 %9, %10
  %13 = select i1 %11, i64 0, i64 %12
  %14 = add i64 %8, 20
  %15 = add i64 %14, %13
  %16 = getelementptr i8, ptr %0, i64 16
  %17 = load ptr, ptr %16, align 8
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr i8, ptr %18, i64 48
  %20 = load ptr, ptr %19, align 8
  %21 = tail call { i64, i64 } %20(ptr nonnull %17)
  %22 = extractvalue { i64, i64 } %21, 0
  %23 = extractvalue { i64, i64 } %21, 1
  %24 = tail call i64 @llvm.umax.i64(i64 %9, i64 %23)
  %25 = tail call i64 @llvm.umax.i64(i64 %24, i64 8)
  %26 = urem i64 %15, %23
  %27 = icmp eq i64 %26, 0
  %28 = sub i64 %23, %26
  %29 = select i1 %27, i64 0, i64 %28
  %30 = add i64 %22, %15
  %31 = add i64 %30, %29
  %32 = urem i64 %31, %25
  %33 = icmp eq i64 %32, 0
  %34 = sub i64 %25, %32
  %35 = select i1 %33, i64 0, i64 %34
  %36 = add i64 %31, %35
  %37 = insertvalue { i64, i64 } undef, i64 %36, 0
  %38 = insertvalue { i64, i64 } %37, i64 %25, 1
  ret { i64, i64 } %38
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @Entry_field_Entry_0(ptr nocapture readonly %0) #0 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @Entry_field_Entry_1(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Entry_B_init_keyK_valueV_primary_hashPtri32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 144
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Entry_B_key_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 152
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Entry_B_value_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 160
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Entry_B_primary_hash_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 168
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @Entry_init_keyK_valueV_primary_hashPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, i160 } %3, { ptr, i160 } %4, i32 %5) {
  %.fca.0.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract11, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract11, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract11, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 4015701072841558310
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %7 = tail call ptr @llvm.invariant.start.p0(i64 104, ptr %.fca.0.extract11)
  %8 = sext i32 %offset.i.i to i64
  %9 = getelementptr ptr, ptr %.fca.0.extract11, i64 %8
  %10 = getelementptr i8, ptr %9, i64 24
  %11 = load ptr, ptr %10, align 8
  %12 = getelementptr i8, ptr %11, i64 8
  %13 = load ptr, ptr %12, align 8
  tail call void %13(ptr %.fca.1.extract12, { ptr, i160 } %3)
  %14 = tail call ptr @llvm.invariant.start.p0(i64 104, ptr %.fca.0.extract11)
  %15 = getelementptr i8, ptr %9, i64 32
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr i8, ptr %16, i64 8
  %18 = load ptr, ptr %17, align 8
  tail call void %18(ptr %.fca.1.extract12, { ptr, i160 } %4)
  %19 = tail call ptr @llvm.invariant.start.p0(i64 104, ptr %.fca.0.extract11)
  %20 = getelementptr i8, ptr %9, i64 16
  %21 = load ptr, ptr %20, align 8
  %22 = getelementptr i8, ptr %21, i64 8
  %23 = load ptr, ptr %22, align 8
  tail call void %23(ptr %.fca.1.extract12, i32 %5)
  ret void
}

define { ptr, i160 } @Entry_key_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 4015701072841558310
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %4 = tail call ptr @llvm.invariant.start.p0(i64 104, ptr %.fca.0.extract3)
  %5 = sext i32 %offset.i.i to i64
  %6 = getelementptr ptr, ptr %.fca.0.extract3, i64 %5
  %7 = getelementptr i8, ptr %6, i64 24
  %8 = load ptr, ptr %7, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = tail call { ptr, i160 } %9(ptr %.fca.1.extract4)
  ret { ptr, i160 } %10
}

define { ptr, i160 } @Entry_value_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 4015701072841558310
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %4 = tail call ptr @llvm.invariant.start.p0(i64 104, ptr %.fca.0.extract3)
  %5 = sext i32 %offset.i.i to i64
  %6 = getelementptr ptr, ptr %.fca.0.extract3, i64 %5
  %7 = getelementptr i8, ptr %6, i64 32
  %8 = load ptr, ptr %7, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = tail call { ptr, i160 } %9(ptr %.fca.1.extract4)
  ret { ptr, i160 } %10
}

define i32 @Entry_primary_hash_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 4015701072841558310
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %4 = tail call ptr @llvm.invariant.start.p0(i64 104, ptr %.fca.0.extract)
  %5 = sext i32 %offset.i.i to i64
  %6 = getelementptr ptr, ptr %.fca.0.extract, i64 %5
  %7 = getelementptr i8, ptr %6, i64 16
  %8 = load ptr, ptr %7, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = tail call i32 %9(ptr %.fca.1.extract)
  ret i32 %10
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare ptr @llvm.invariant.start.p0(i64 immarg, ptr nocapture) #2

define linkonce_odr { i64, i64 } @_size_i32_typ(ptr %0) {
  ret { i64, i64 } { i64 4, i64 4 }
}

define linkonce_odr { ptr, i160 } @_box_i32_typ(ptr %0, ptr %1) {
  %3 = load i32, ptr %0, align 1
  %.sroa.2.sroa.0.0.insert.ext = zext i32 %3 to i160
  %4 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.2.sroa.0.0.insert.ext, 1
  ret { ptr, i160 } %4
}

define linkonce_odr void @_unbox_i32_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %.fca.1.extract = extractvalue { ptr, i160 } %0, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  store i32 %.sroa.1.8.extract.trunc, ptr %2, align 1
  ret void
}

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.inline.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #3

define linkonce_odr { i64, i64 } @_size_any_typ(ptr %0) {
  ret { i64, i64 } { i64 32, i64 8 }
}

define { ptr, i160 } @Entry_getter_value(ptr %0) {
  %2 = load ptr, ptr %0, align 8
  %3 = load ptr, ptr %2, align 8
  %4 = getelementptr i8, ptr %3, i64 48
  %5 = load ptr, ptr %4, align 8
  %6 = tail call { i64, i64 } %5(ptr nonnull %2)
  %7 = extractvalue { i64, i64 } %6, 0
  %8 = extractvalue { i64, i64 } %6, 1
  %9 = urem i64 20, %8
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 %8, %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %7, 20
  %14 = add i64 %13, %12
  %15 = getelementptr i8, ptr %0, i64 8
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = getelementptr i8, ptr %17, i64 48
  %19 = load ptr, ptr %18, align 8
  %20 = tail call { i64, i64 } %19(ptr nonnull %16)
  %21 = extractvalue { i64, i64 } %20, 1
  %22 = urem i64 %14, %21
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 %21, %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = getelementptr i8, ptr %0, i64 %14
  %27 = getelementptr i8, ptr %26, i64 %25
  %28 = load ptr, ptr %15, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 56
  %31 = load ptr, ptr %30, align 8
  %32 = tail call { ptr, i160 } %31(ptr %27, ptr nonnull %28)
  ret { ptr, i160 } %32
}

define void @Entry_setter_value(ptr %0, { ptr, i160 } %1) {
  %3 = load ptr, ptr %0, align 8
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr i8, ptr %4, i64 48
  %6 = load ptr, ptr %5, align 8
  %7 = tail call { i64, i64 } %6(ptr nonnull %3)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = extractvalue { i64, i64 } %7, 1
  %10 = urem i64 20, %9
  %11 = icmp eq i64 %10, 0
  %12 = sub i64 %9, %10
  %13 = select i1 %11, i64 0, i64 %12
  %14 = add i64 %8, 20
  %15 = add i64 %14, %13
  %16 = getelementptr i8, ptr %0, i64 8
  %17 = load ptr, ptr %16, align 8
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr i8, ptr %18, i64 48
  %20 = load ptr, ptr %19, align 8
  %21 = tail call { i64, i64 } %20(ptr nonnull %17)
  %22 = extractvalue { i64, i64 } %21, 1
  %23 = urem i64 %15, %22
  %24 = icmp eq i64 %23, 0
  %25 = sub i64 %22, %23
  %26 = select i1 %24, i64 0, i64 %25
  %27 = getelementptr i8, ptr %0, i64 %15
  %28 = getelementptr i8, ptr %27, i64 %26
  %29 = load ptr, ptr %16, align 8
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr i8, ptr %30, i64 64
  %32 = load ptr, ptr %31, align 8
  tail call void %32({ ptr, i160 } %1, ptr nonnull %29, ptr %28)
  ret void
}

define { ptr, i160 } @Entry_getter_key(ptr %0) {
  %2 = load ptr, ptr %0, align 8
  %3 = load ptr, ptr %2, align 8
  %4 = getelementptr i8, ptr %3, i64 48
  %5 = load ptr, ptr %4, align 8
  %6 = tail call { i64, i64 } %5(ptr nonnull %2)
  %7 = extractvalue { i64, i64 } %6, 1
  %8 = urem i64 20, %7
  %9 = icmp eq i64 %8, 0
  %reass.sub = sub i64 %7, %8
  %10 = add i64 %reass.sub, 20
  %11 = select i1 %9, i64 20, i64 %10
  %12 = getelementptr i8, ptr %0, i64 %11
  %13 = load ptr, ptr %0, align 8
  %14 = load ptr, ptr %13, align 8
  %15 = getelementptr i8, ptr %14, i64 56
  %16 = load ptr, ptr %15, align 8
  %17 = tail call { ptr, i160 } %16(ptr %12, ptr nonnull %13)
  ret { ptr, i160 } %17
}

define void @Entry_setter_key(ptr %0, { ptr, i160 } %1) {
  %3 = load ptr, ptr %0, align 8
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr i8, ptr %4, i64 48
  %6 = load ptr, ptr %5, align 8
  %7 = tail call { i64, i64 } %6(ptr nonnull %3)
  %8 = extractvalue { i64, i64 } %7, 1
  %9 = urem i64 20, %8
  %10 = icmp eq i64 %9, 0
  %reass.sub = sub i64 %8, %9
  %11 = add i64 %reass.sub, 20
  %12 = select i1 %10, i64 20, i64 %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = load ptr, ptr %0, align 8
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 64
  %17 = load ptr, ptr %16, align 8
  tail call void %17({ ptr, i160 } %1, ptr nonnull %14, ptr %13)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @Entry_getter_primary_hash(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Entry_setter_primary_hash(ptr nocapture writeonly %0, i32 %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 16
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_HashMap(ptr nocapture readnone %0) #5 {
  ret { i64, i64 } { i64 120, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @HashMap_field_HashMap_0(ptr nocapture readonly %0) #0 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @HashMap_field_HashMap_1(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @HashMap_field_HashMap_2(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @HashMap_B_init_hasherFunctionK_to_Ptri32_eqFunctionK._K_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 336
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @HashMap_B_hash1_keyK({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 344
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @HashMap_B_hash2_from_primary_primary_hashPtri32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 352
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @HashMap_B_index1_primary_hashPtri32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 360
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @HashMap_B_index2_secondary_hashPtri32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 368
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @HashMap_B_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 376
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @HashMap_B_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 384
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @HashMap_B_resize_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 392
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @HashMap_B_insert_keyK_valueV({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 400
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @HashMap_B_get_keyK({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 408
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @HashMap_B_remove_keyK({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 416
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @HashMap_B_clear_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 424
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @HashMap_B_size_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 432
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @HashMap_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 440
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @HashMap_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 448
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @HashMap_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 456
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @HashMap_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 464
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @HashMap_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 472
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @HashMap_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 480
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @HashMap_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 488
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @HashMap_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 496
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @HashMap_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 504
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @HashMap_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 512
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @HashMap_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 520
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @HashMap_init_hasherFunctionK_to_Ptri32_eqFunctionK._K_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr } %3, { ptr } %4) {
  %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -2849643283898152329
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %6 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract3)
  %7 = sext i32 %offset.i.i to i64
  %8 = getelementptr ptr, ptr %.fca.0.extract3, i64 %7
  %9 = getelementptr i8, ptr %8, i64 48
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr i8, ptr %10, i64 8
  %12 = load ptr, ptr %11, align 8
  tail call void %12(ptr %.fca.1.extract, { ptr } %3)
  %13 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract3)
  %14 = getelementptr i8, ptr %8, i64 56
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = load ptr, ptr %16, align 8
  tail call void %17(ptr %.fca.1.extract, { ptr } %4)
  %18 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract3)
  %19 = load ptr, ptr %8, align 8
  %20 = tail call ptr %19(ptr %.fca.1.extract)
  %21 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract3)
  %22 = getelementptr i8, ptr %8, i64 8
  %23 = load ptr, ptr %22, align 8
  %24 = tail call ptr %23(ptr %.fca.1.extract)
  %result.i = tail call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %25 = getelementptr i8, ptr %result.i, i64 16
  store ptr @_parameterization_Nil, ptr %25, align 8
  %result.i4 = tail call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %26 = getelementptr i8, ptr %result.i4, i64 16
  store ptr %24, ptr %26, align 8
  %27 = getelementptr i8, ptr %result.i4, i64 8
  store ptr %20, ptr %27, align 8
  %28 = getelementptr i8, ptr %result.i4, i64 24
  store ptr null, ptr %28, align 8
  %29 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i4)
  store ptr @Entry, ptr %result.i4, align 8
  %30 = getelementptr i8, ptr %result.i, i64 8
  store ptr %result.i4, ptr %30, align 8
  %31 = getelementptr i8, ptr %result.i, i64 24
  store ptr null, ptr %31, align 8
  %32 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i)
  store ptr @union_typ, ptr %result.i, align 8
  %result.i5 = tail call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i, ptr %result.i5, align 8
  %33 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i5)
  %34 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Array, ptr undef, ptr undef, i32 undef }, ptr %result.i5, 1
  %35 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr undef, 2
  %36 = insertvalue { ptr, ptr, ptr, i32 } %35, i32 9, 3
  %37 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract3)
  %38 = load ptr, ptr %8, align 8
  %39 = tail call ptr %38(ptr %.fca.1.extract)
  %40 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract3)
  %41 = load ptr, ptr %22, align 8
  %42 = tail call ptr %41(ptr %.fca.1.extract)
  %43 = getelementptr i8, ptr %result.i5, i64 16
  store i32 8, ptr %43, align 4
  %44 = getelementptr i8, ptr %result.i5, i64 20
  store i32 8, ptr %44, align 4
  %result.i.i = tail call noalias dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nonnull @current_ptr) #29
  %45 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %46 = getelementptr i8, ptr %result.i5, i64 8
  store ptr %result.i.i, ptr %46, align 8
  %47 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract3)
  %48 = getelementptr i8, ptr %8, i64 24
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr i8, ptr %49, i64 8
  %51 = load ptr, ptr %50, align 8
  tail call void %51(ptr %.fca.1.extract, { ptr, ptr, ptr, i32 } %36)
  %52 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract3)
  %53 = load ptr, ptr %8, align 8
  %54 = tail call ptr %53(ptr %.fca.1.extract)
  %55 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract3)
  %56 = load ptr, ptr %22, align 8
  %57 = tail call ptr %56(ptr %.fca.1.extract)
  %result.i20 = tail call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %58 = getelementptr i8, ptr %result.i20, i64 16
  store ptr @_parameterization_Nil, ptr %58, align 8
  %result.i21 = tail call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %59 = getelementptr i8, ptr %result.i21, i64 16
  store ptr %57, ptr %59, align 8
  %60 = getelementptr i8, ptr %result.i21, i64 8
  store ptr %54, ptr %60, align 8
  %61 = getelementptr i8, ptr %result.i21, i64 24
  store ptr null, ptr %61, align 8
  %62 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i21)
  store ptr @Entry, ptr %result.i21, align 8
  %63 = getelementptr i8, ptr %result.i20, i64 8
  store ptr %result.i21, ptr %63, align 8
  %64 = getelementptr i8, ptr %result.i20, i64 24
  store ptr null, ptr %64, align 8
  %65 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i20)
  store ptr @union_typ, ptr %result.i20, align 8
  %result.i22 = tail call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i20, ptr %result.i22, align 8
  %66 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i22)
  %67 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Array, ptr undef, ptr undef, i32 undef }, ptr %result.i22, 1
  %68 = insertvalue { ptr, ptr, ptr, i32 } %67, ptr undef, 2
  %69 = insertvalue { ptr, ptr, ptr, i32 } %68, i32 9, 3
  %70 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract3)
  %71 = load ptr, ptr %8, align 8
  %72 = tail call ptr %71(ptr %.fca.1.extract)
  %73 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract3)
  %74 = load ptr, ptr %22, align 8
  %75 = tail call ptr %74(ptr %.fca.1.extract)
  %76 = getelementptr i8, ptr %result.i22, i64 16
  store i32 8, ptr %76, align 4
  %77 = getelementptr i8, ptr %result.i22, i64 20
  store i32 8, ptr %77, align 4
  %result.i.i97 = tail call noalias dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nonnull @current_ptr) #29
  %78 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %79 = getelementptr i8, ptr %result.i22, i64 8
  store ptr %result.i.i97, ptr %79, align 8
  %80 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract3)
  %81 = getelementptr i8, ptr %8, i64 32
  %82 = load ptr, ptr %81, align 8
  %83 = getelementptr i8, ptr %82, i64 8
  %84 = load ptr, ptr %83, align 8
  tail call void %84(ptr %.fca.1.extract, { ptr, ptr, ptr, i32 } %69)
  %85 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract3)
  %86 = getelementptr i8, ptr %8, i64 40
  %87 = load ptr, ptr %86, align 8
  %88 = getelementptr i8, ptr %87, i64 8
  %89 = load ptr, ptr %88, align 8
  tail call void %89(ptr %.fca.1.extract, i32 0)
  %90 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract3)
  %91 = getelementptr i8, ptr %8, i64 64
  %92 = load ptr, ptr %91, align 8
  %93 = getelementptr i8, ptr %92, i64 8
  %94 = load ptr, ptr %93, align 8
  tail call void %94(ptr %.fca.1.extract, i32 100)
  ret void
}

define i32 @HashMap_hash1_keyK({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, i160 } %3) {
  %.fca.0.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract5, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract5, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract5, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -2849643283898152329
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %5 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract5)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract5, i64 %6
  %8 = getelementptr i8, ptr %7, i64 48
  %9 = load ptr, ptr %8, align 8
  %10 = load ptr, ptr %9, align 8
  %11 = tail call { ptr } %10(ptr %.fca.1.extract6)
  %.fca.0.extract = extractvalue { ptr } %11, 0
  %12 = tail call i32 %.fca.0.extract({ ptr, i160 } %3)
  ret i32 %12
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define i32 @HashMap_hash2_from_primary_primary_hashPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) #5 {
  %5 = add i32 %3, 2127912214
  %6 = shl i32 %3, 12
  %7 = add i32 %5, %6
  %8 = ashr i32 %7, 19
  %9 = xor i32 %7, %8
  %10 = xor i32 %9, -949894596
  %11 = add i32 %10, 374761393
  %12 = shl i32 %10, 5
  %13 = add i32 %11, %12
  %14 = add i32 %13, -744332180
  %15 = shl i32 %13, 9
  %16 = xor i32 %14, %15
  %17 = add i32 %16, -42973499
  %18 = shl i32 %16, 3
  %19 = add i32 %17, %18
  %20 = ashr i32 %19, 16
  %21 = xor i32 %19, %20
  %22 = xor i32 %21, -1252372727
  ret i32 %22
}

define i32 @HashMap_index1_primary_hashPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
  %5 = alloca [0 x ptr], align 8
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -2849643283898152329
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %6 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract1)
  %7 = sext i32 %offset.i.i to i64
  %8 = getelementptr ptr, ptr %.fca.0.extract1, i64 %7
  %9 = getelementptr i8, ptr %8, i64 24
  %10 = load ptr, ptr %9, align 8
  %11 = load ptr, ptr %10, align 8
  %12 = tail call { ptr, ptr, ptr, i32 } %11(ptr %.fca.1.extract3)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %12, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %12, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %12, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %12, 3
  %hash_coef_ptr.i.i10 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i11 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i12 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i13 = load i64, ptr %hash_coef_ptr.i.i10, align 4
  %tbl_size.i.i14 = load i64, ptr %tbl_size_ptr.i.i11, align 4
  %offset_tbl.i.i15 = load ptr, ptr %offset_tbl_ptr.i.i12, align 8
  %product.i.i.i16 = mul i64 %hash_coef.i.i13, -5261542750394134544
  %shifted.i.i.i17 = lshr i64 %product.i.i.i16, 32
  %xored.i.i.i18 = xor i64 %shifted.i.i.i17, %product.i.i.i16
  %hash.i.i.i19 = and i64 %xored.i.i.i18, %tbl_size.i.i14
  %offset_ptr.i.i20 = getelementptr i32, ptr %offset_tbl.i.i15, i64 %hash.i.i.i19
  %offset.i.i21 = load i32, ptr %offset_ptr.i.i20, align 4
  %eq.i = icmp eq i32 %.fca.3.extract, %offset.i.i21
  tail call void @llvm.assume(i1 %eq.i) #30
  %13 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.1.extract, 1
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, ptr %.fca.2.extract, 2
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, i32 %.fca.3.extract, 3
  %17 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract1)
  %18 = load ptr, ptr %8, align 8
  %19 = tail call ptr %18(ptr %.fca.1.extract3)
  %20 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract1)
  %21 = getelementptr i8, ptr %8, i64 8
  %22 = load ptr, ptr %21, align 8
  %23 = tail call ptr %22(ptr %.fca.1.extract3)
  %24 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %25 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract)
  %26 = sext i32 %.fca.3.extract to i64
  %27 = getelementptr ptr, ptr %.fca.0.extract, i64 %26
  %28 = getelementptr i8, ptr %27, i64 64
  %29 = load ptr, ptr %28, align 8
  %30 = call ptr %29({ ptr, ptr, ptr, i32 } %16, ptr nonnull %5)
  %31 = call i32 %30({ ptr, ptr, ptr, i32 } %16, { ptr, ptr, ptr, i32 } %16, ptr nonnull %5)
  %32 = add i32 %31, -1
  %33 = and i32 %32, %3
  ret i32 %33
}

define i32 @HashMap_index2_secondary_hashPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
  %5 = alloca [0 x ptr], align 8
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -2849643283898152329
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %6 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract1)
  %7 = sext i32 %offset.i.i to i64
  %8 = getelementptr ptr, ptr %.fca.0.extract1, i64 %7
  %9 = getelementptr i8, ptr %8, i64 32
  %10 = load ptr, ptr %9, align 8
  %11 = load ptr, ptr %10, align 8
  %12 = tail call { ptr, ptr, ptr, i32 } %11(ptr %.fca.1.extract3)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %12, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %12, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %12, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %12, 3
  %hash_coef_ptr.i.i10 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i11 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i12 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i13 = load i64, ptr %hash_coef_ptr.i.i10, align 4
  %tbl_size.i.i14 = load i64, ptr %tbl_size_ptr.i.i11, align 4
  %offset_tbl.i.i15 = load ptr, ptr %offset_tbl_ptr.i.i12, align 8
  %product.i.i.i16 = mul i64 %hash_coef.i.i13, -5261542750394134544
  %shifted.i.i.i17 = lshr i64 %product.i.i.i16, 32
  %xored.i.i.i18 = xor i64 %shifted.i.i.i17, %product.i.i.i16
  %hash.i.i.i19 = and i64 %xored.i.i.i18, %tbl_size.i.i14
  %offset_ptr.i.i20 = getelementptr i32, ptr %offset_tbl.i.i15, i64 %hash.i.i.i19
  %offset.i.i21 = load i32, ptr %offset_ptr.i.i20, align 4
  %eq.i = icmp eq i32 %.fca.3.extract, %offset.i.i21
  tail call void @llvm.assume(i1 %eq.i) #30
  %13 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.1.extract, 1
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, ptr %.fca.2.extract, 2
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, i32 %.fca.3.extract, 3
  %17 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract1)
  %18 = load ptr, ptr %8, align 8
  %19 = tail call ptr %18(ptr %.fca.1.extract3)
  %20 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract1)
  %21 = getelementptr i8, ptr %8, i64 8
  %22 = load ptr, ptr %21, align 8
  %23 = tail call ptr %22(ptr %.fca.1.extract3)
  %24 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %25 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract)
  %26 = sext i32 %.fca.3.extract to i64
  %27 = getelementptr ptr, ptr %.fca.0.extract, i64 %26
  %28 = getelementptr i8, ptr %27, i64 64
  %29 = load ptr, ptr %28, align 8
  %30 = call ptr %29({ ptr, ptr, ptr, i32 } %16, ptr nonnull %5)
  %31 = call i32 %30({ ptr, ptr, ptr, i32 } %16, { ptr, ptr, ptr, i32 } %16, ptr nonnull %5)
  %32 = add i32 %31, -1
  %33 = and i32 %32, %3
  ret i32 %33
}

define { ptr, i160 } @HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca [1 x ptr], align 8
  %7 = alloca { ptr }, align 8
  %8 = alloca [1 x ptr], align 8
  %9 = alloca { ptr }, align 8
  %10 = alloca [2 x ptr], align 8
  %11 = alloca { ptr, ptr }, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %.sroa.0680 = alloca ptr, align 8
  %.sroa.1681 = alloca i160, align 8
  %15 = alloca i64, align 8
  %16 = alloca [1 x ptr], align 8
  %17 = alloca { ptr }, align 8
  %18 = alloca [1 x ptr], align 8
  %19 = alloca { ptr }, align 8
  %20 = alloca [1 x ptr], align 8
  %21 = alloca { ptr }, align 8
  %22 = alloca [2 x ptr], align 8
  %23 = alloca { ptr, ptr }, align 8
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %.sroa.0 = alloca ptr, align 8
  %.sroa.1 = alloca i160, align 8
  %27 = alloca i64, align 8
  %.fca.0.extract14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract16 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract14, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract14, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract14, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -2849643283898152329
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %hash_coef_ptr.i.i144 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i145 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i146 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i147 = load i64, ptr %hash_coef_ptr.i.i144, align 4
  %tbl_size.i.i148 = load i64, ptr %tbl_size_ptr.i.i145, align 4
  %offset_tbl.i.i149 = load ptr, ptr %offset_tbl_ptr.i.i146, align 8
  %product.i.i.i150 = mul i64 %hash_coef.i.i147, 4015701072841558310
  %shifted.i.i.i151 = lshr i64 %product.i.i.i150, 32
  %xored.i.i.i152 = xor i64 %shifted.i.i.i151, %product.i.i.i150
  %hash.i.i.i153 = and i64 %xored.i.i.i152, %tbl_size.i.i148
  %offset_ptr.i.i154 = getelementptr i32, ptr %offset_tbl.i.i149, i64 %hash.i.i.i153
  %offset.i.i169 = load i32, ptr %offset_ptr.i.i154, align 4
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %28, align 8
  %29 = getelementptr inbounds i8, ptr %28, i64 8
  store ptr %.fca.1.extract, ptr %29, align 8
  %30 = getelementptr inbounds i8, ptr %28, i64 16
  store ptr %.fca.2.extract, ptr %30, align 8
  %31 = getelementptr inbounds i8, ptr %28, i64 24
  store i32 %offset.i.i169, ptr %31, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %28)
  %33 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract14)
  %34 = sext i32 %offset.i.i to i64
  %35 = getelementptr ptr, ptr %.fca.0.extract14, i64 %34
  %36 = getelementptr i8, ptr %35, i64 64
  %37 = load ptr, ptr %36, align 8
  %38 = load ptr, ptr %37, align 8
  %39 = tail call i32 %38(ptr %.fca.1.extract16)
  %40 = icmp sgt i32 %39, 0
  br i1 %40, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %4
  %.fca.2.extract18 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %41 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract14)
  %42 = getelementptr i8, ptr %35, i64 8
  %43 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract14, 0
  %44 = insertvalue { ptr, ptr, ptr, i32 } %43, ptr %.fca.1.extract16, 1
  %45 = insertvalue { ptr, ptr, ptr, i32 } %44, ptr %.fca.2.extract18, 2
  %46 = insertvalue { ptr, ptr, ptr, i32 } %45, i32 %offset.i.i, 3
  %47 = getelementptr i8, ptr %35, i64 88
  %48 = getelementptr i8, ptr %35, i64 104
  %49 = getelementptr i8, ptr %35, i64 32
  %50 = getelementptr inbounds i8, ptr %22, i64 8
  %51 = getelementptr inbounds i8, ptr %23, i64 8
  %52 = getelementptr i8, ptr %35, i64 96
  %53 = getelementptr i8, ptr %35, i64 24
  %54 = getelementptr inbounds i8, ptr %10, i64 8
  %55 = getelementptr inbounds i8, ptr %11, i64 8
  br label %56

56:                                               ; preds = %.lr.ph, %.cont.cont
  %.reg2mem195.0678 = phi i32 [ 1, %.lr.ph ], [ %222, %.cont.cont ]
  %.reg2mem193.0677 = phi i32 [ 0, %.lr.ph ], [ %223, %.cont.cont ]
  %57 = load ptr, ptr %28, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %57, 0
  %59 = load ptr, ptr %29, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } %58, ptr %59, 1
  %61 = load ptr, ptr %30, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %61, 2
  %63 = load i32, ptr %31, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %62, i32 %63, 3
  %65 = load ptr, ptr %35, align 8
  %66 = call ptr %65(ptr %.fca.1.extract16)
  %67 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract14)
  %68 = load ptr, ptr %42, align 8
  %69 = call ptr %68(ptr %.fca.1.extract16)
  %70 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %71 = call ptr @llvm.invariant.start.p0(i64 104, ptr %57)
  %72 = sext i32 %63 to i64
  %73 = getelementptr ptr, ptr %57, i64 %72
  %74 = getelementptr i8, ptr %73, i64 64
  %75 = load ptr, ptr %74, align 8
  %76 = call ptr %75({ ptr, ptr, ptr, i32 } %64, ptr nonnull %5)
  %77 = call i32 %76({ ptr, ptr, ptr, i32 } %64, { ptr, ptr, ptr, i32 } %64, ptr nonnull %5)
  %78 = icmp eq i32 %.reg2mem195.0678, 1
  %79 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract14)
  %80 = load ptr, ptr %35, align 8
  %81 = call ptr %80(ptr %.fca.1.extract16)
  %82 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract14)
  %83 = load ptr, ptr %42, align 8
  %84 = call ptr %83(ptr %.fca.1.extract16)
  br i1 %78, label %85, label %148

85:                                               ; preds = %56
  store ptr @_parameterization_Ptri32, ptr %6, align 8
  %86 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %6)
  %87 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract14)
  %88 = load ptr, ptr %52, align 8
  store ptr @i32_typ, ptr %7, align 8
  %89 = call ptr %88({ ptr, ptr, ptr, i32 } %46, ptr nonnull %7)
  %90 = call i32 %89({ ptr, ptr, ptr, i32 } %46, { ptr, ptr, ptr, i32 } %46, ptr nonnull %6, i32 %77)
  %91 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract14)
  %92 = load ptr, ptr %53, align 8
  %93 = load ptr, ptr %92, align 8
  %94 = call { ptr, ptr, ptr, i32 } %93(ptr %.fca.1.extract16)
  %.fca.0.extract116 = extractvalue { ptr, ptr, ptr, i32 } %94, 0
  %.fca.1.extract118 = extractvalue { ptr, ptr, ptr, i32 } %94, 1
  %.fca.2.extract120 = extractvalue { ptr, ptr, ptr, i32 } %94, 2
  %.fca.3.extract122 = extractvalue { ptr, ptr, ptr, i32 } %94, 3
  %hash_coef_ptr.i.i172 = getelementptr i8, ptr %.fca.0.extract116, i64 8
  %tbl_size_ptr.i.i173 = getelementptr i8, ptr %.fca.0.extract116, i64 16
  %offset_tbl_ptr.i.i174 = getelementptr i8, ptr %.fca.0.extract116, i64 40
  %hash_coef.i.i175 = load i64, ptr %hash_coef_ptr.i.i172, align 4
  %tbl_size.i.i176 = load i64, ptr %tbl_size_ptr.i.i173, align 4
  %offset_tbl.i.i177 = load ptr, ptr %offset_tbl_ptr.i.i174, align 8
  %product.i.i.i178 = mul i64 %hash_coef.i.i175, -5261542750394134544
  %shifted.i.i.i179 = lshr i64 %product.i.i.i178, 32
  %xored.i.i.i180 = xor i64 %shifted.i.i.i179, %product.i.i.i178
  %hash.i.i.i181 = and i64 %xored.i.i.i180, %tbl_size.i.i176
  %offset_ptr.i.i182 = getelementptr i32, ptr %offset_tbl.i.i177, i64 %hash.i.i.i181
  %offset.i.i183 = load i32, ptr %offset_ptr.i.i182, align 4
  %eq.i = icmp eq i32 %.fca.3.extract122, %offset.i.i183
  call void @llvm.assume(i1 %eq.i) #30
  %95 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract116, 0
  %96 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %.fca.1.extract118, 1
  %97 = insertvalue { ptr, ptr, ptr, i32 } %96, ptr %.fca.2.extract120, 2
  %98 = insertvalue { ptr, ptr, ptr, i32 } %97, i32 %.fca.3.extract122, 3
  %99 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract14)
  %100 = load ptr, ptr %35, align 8
  %101 = call ptr %100(ptr %.fca.1.extract16)
  %102 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract14)
  %103 = load ptr, ptr %42, align 8
  %104 = call ptr %103(ptr %.fca.1.extract16)
  store ptr @_parameterization_Ptri32, ptr %8, align 8
  %105 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %8)
  %106 = call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract116)
  %107 = sext i32 %.fca.3.extract122 to i64
  %108 = getelementptr ptr, ptr %.fca.0.extract116, i64 %107
  %109 = getelementptr i8, ptr %108, i64 120
  %110 = load ptr, ptr %109, align 8
  store ptr @i32_typ, ptr %9, align 8
  %111 = call ptr %110({ ptr, ptr, ptr, i32 } %98, ptr nonnull %9)
  %112 = call { ptr, i160 } %111({ ptr, ptr, ptr, i32 } %98, { ptr, ptr, ptr, i32 } %98, ptr nonnull %8, i32 %90)
  %.fca.0.extract112 = extractvalue { ptr, i160 } %112, 0
  %113 = load ptr, ptr %28, align 8
  %114 = load ptr, ptr %29, align 8
  %115 = load ptr, ptr %30, align 8
  %116 = load i32, ptr %31, align 8
  %117 = insertvalue { ptr, i160 } undef, ptr %113, 0
  %118 = ptrtoint ptr %114 to i64
  %119 = ptrtoint ptr %115 to i64
  %.sroa.3111.0.insert.ext = zext i32 %116 to i160
  %.sroa.3111.0.insert.shift = shl nuw i160 %.sroa.3111.0.insert.ext, 128
  %.sroa.2110.0.insert.ext = zext i64 %119 to i160
  %.sroa.2110.0.insert.shift = shl nuw nsw i160 %.sroa.2110.0.insert.ext, 64
  %.sroa.2110.0.insert.insert = or disjoint i160 %.sroa.3111.0.insert.shift, %.sroa.2110.0.insert.shift
  %.sroa.0109.0.insert.ext = zext i64 %118 to i160
  %.sroa.0109.0.insert.insert = or disjoint i160 %.sroa.2110.0.insert.insert, %.sroa.0109.0.insert.ext
  %120 = insertvalue { ptr, i160 } %117, i160 %.sroa.0109.0.insert.insert, 1
  %121 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract14)
  %122 = load ptr, ptr %53, align 8
  %123 = load ptr, ptr %122, align 8
  %124 = call { ptr, ptr, ptr, i32 } %123(ptr %.fca.1.extract16)
  %.fca.0.extract100 = extractvalue { ptr, ptr, ptr, i32 } %124, 0
  %.fca.1.extract102 = extractvalue { ptr, ptr, ptr, i32 } %124, 1
  %.fca.2.extract104 = extractvalue { ptr, ptr, ptr, i32 } %124, 2
  %.fca.3.extract106 = extractvalue { ptr, ptr, ptr, i32 } %124, 3
  %hash_coef_ptr.i.i186 = getelementptr i8, ptr %.fca.0.extract100, i64 8
  %tbl_size_ptr.i.i187 = getelementptr i8, ptr %.fca.0.extract100, i64 16
  %offset_tbl_ptr.i.i188 = getelementptr i8, ptr %.fca.0.extract100, i64 40
  %hash_coef.i.i189 = load i64, ptr %hash_coef_ptr.i.i186, align 4
  %tbl_size.i.i190 = load i64, ptr %tbl_size_ptr.i.i187, align 4
  %offset_tbl.i.i191 = load ptr, ptr %offset_tbl_ptr.i.i188, align 8
  %product.i.i.i192 = mul i64 %hash_coef.i.i189, -5261542750394134544
  %shifted.i.i.i193 = lshr i64 %product.i.i.i192, 32
  %xored.i.i.i194 = xor i64 %shifted.i.i.i193, %product.i.i.i192
  %hash.i.i.i195 = and i64 %xored.i.i.i194, %tbl_size.i.i190
  %offset_ptr.i.i196 = getelementptr i32, ptr %offset_tbl.i.i191, i64 %hash.i.i.i195
  %offset.i.i197 = load i32, ptr %offset_ptr.i.i196, align 4
  %eq.i200 = icmp eq i32 %.fca.3.extract106, %offset.i.i197
  call void @llvm.assume(i1 %eq.i200) #30
  %125 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract100, 0
  %126 = insertvalue { ptr, ptr, ptr, i32 } %125, ptr %.fca.1.extract102, 1
  %127 = insertvalue { ptr, ptr, ptr, i32 } %126, ptr %.fca.2.extract104, 2
  %128 = insertvalue { ptr, ptr, ptr, i32 } %127, i32 %.fca.3.extract106, 3
  %129 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract14)
  %130 = load ptr, ptr %35, align 8
  %131 = call ptr %130(ptr %.fca.1.extract16)
  %132 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract14)
  %133 = load ptr, ptr %42, align 8
  %134 = call ptr %133(ptr %.fca.1.extract16)
  %result.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %135 = getelementptr i8, ptr %result.i, i64 16
  store ptr %134, ptr %135, align 8
  %136 = getelementptr i8, ptr %result.i, i64 8
  store ptr %131, ptr %136, align 8
  %137 = getelementptr i8, ptr %result.i, i64 24
  store ptr null, ptr %137, align 8
  %138 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i)
  store ptr @Entry, ptr %result.i, align 8
  store ptr @_parameterization_Ptri32, ptr %10, align 8
  store ptr %result.i, ptr %54, align 8
  %139 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %10)
  %140 = call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract100)
  %141 = sext i32 %.fca.3.extract106 to i64
  %142 = getelementptr ptr, ptr %.fca.0.extract100, i64 %141
  %143 = getelementptr i8, ptr %142, i64 128
  %144 = load ptr, ptr %143, align 8
  store ptr @i32_typ, ptr %11, align 8
  store ptr %113, ptr %55, align 8
  %145 = call ptr %144({ ptr, ptr, ptr, i32 } %128, ptr nonnull %11)
  call void %145({ ptr, ptr, ptr, i32 } %128, { ptr, ptr, ptr, i32 } %128, ptr nonnull %10, i32 %90, { ptr, i160 } %120)
  %146 = icmp ne ptr %.fca.0.extract112, @nil_typ
  %147 = icmp ne ptr %.fca.0.extract112, null
  %.not140 = and i1 %146, %147
  br i1 %.not140, label %.cont.cont, label %228

148:                                              ; preds = %56
  store ptr @_parameterization_Ptri32, ptr %16, align 8
  %149 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %16)
  %150 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract14)
  %151 = load ptr, ptr %47, align 8
  store ptr @i32_typ, ptr %17, align 8
  %152 = call ptr %151({ ptr, ptr, ptr, i32 } %46, ptr nonnull %17)
  %153 = call i32 %152({ ptr, ptr, ptr, i32 } %46, { ptr, ptr, ptr, i32 } %46, ptr nonnull %16, i32 %77)
  %154 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract14)
  %155 = load ptr, ptr %35, align 8
  %156 = call ptr %155(ptr %.fca.1.extract16)
  %157 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract14)
  %158 = load ptr, ptr %42, align 8
  %159 = call ptr %158(ptr %.fca.1.extract16)
  store ptr @_parameterization_Ptri32, ptr %18, align 8
  %160 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %18)
  %161 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract14)
  %162 = load ptr, ptr %48, align 8
  store ptr @i32_typ, ptr %19, align 8
  %163 = call ptr %162({ ptr, ptr, ptr, i32 } %46, ptr nonnull %19)
  %164 = call i32 %163({ ptr, ptr, ptr, i32 } %46, { ptr, ptr, ptr, i32 } %46, ptr nonnull %18, i32 %153)
  %165 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract14)
  %166 = load ptr, ptr %49, align 8
  %167 = load ptr, ptr %166, align 8
  %168 = call { ptr, ptr, ptr, i32 } %167(ptr %.fca.1.extract16)
  %.fca.0.extract91 = extractvalue { ptr, ptr, ptr, i32 } %168, 0
  %.fca.1.extract93 = extractvalue { ptr, ptr, ptr, i32 } %168, 1
  %.fca.2.extract95 = extractvalue { ptr, ptr, ptr, i32 } %168, 2
  %.fca.3.extract97 = extractvalue { ptr, ptr, ptr, i32 } %168, 3
  %hash_coef_ptr.i.i202 = getelementptr i8, ptr %.fca.0.extract91, i64 8
  %tbl_size_ptr.i.i203 = getelementptr i8, ptr %.fca.0.extract91, i64 16
  %offset_tbl_ptr.i.i204 = getelementptr i8, ptr %.fca.0.extract91, i64 40
  %hash_coef.i.i205 = load i64, ptr %hash_coef_ptr.i.i202, align 4
  %tbl_size.i.i206 = load i64, ptr %tbl_size_ptr.i.i203, align 4
  %offset_tbl.i.i207 = load ptr, ptr %offset_tbl_ptr.i.i204, align 8
  %product.i.i.i208 = mul i64 %hash_coef.i.i205, -5261542750394134544
  %shifted.i.i.i209 = lshr i64 %product.i.i.i208, 32
  %xored.i.i.i210 = xor i64 %shifted.i.i.i209, %product.i.i.i208
  %hash.i.i.i211 = and i64 %xored.i.i.i210, %tbl_size.i.i206
  %offset_ptr.i.i212 = getelementptr i32, ptr %offset_tbl.i.i207, i64 %hash.i.i.i211
  %offset.i.i213 = load i32, ptr %offset_ptr.i.i212, align 4
  %eq.i216 = icmp eq i32 %.fca.3.extract97, %offset.i.i213
  call void @llvm.assume(i1 %eq.i216) #30
  %169 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract91, 0
  %170 = insertvalue { ptr, ptr, ptr, i32 } %169, ptr %.fca.1.extract93, 1
  %171 = insertvalue { ptr, ptr, ptr, i32 } %170, ptr %.fca.2.extract95, 2
  %172 = insertvalue { ptr, ptr, ptr, i32 } %171, i32 %.fca.3.extract97, 3
  %173 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract14)
  %174 = load ptr, ptr %35, align 8
  %175 = call ptr %174(ptr %.fca.1.extract16)
  %176 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract14)
  %177 = load ptr, ptr %42, align 8
  %178 = call ptr %177(ptr %.fca.1.extract16)
  store ptr @_parameterization_Ptri32, ptr %20, align 8
  %179 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %20)
  %180 = call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract91)
  %181 = sext i32 %.fca.3.extract97 to i64
  %182 = getelementptr ptr, ptr %.fca.0.extract91, i64 %181
  %183 = getelementptr i8, ptr %182, i64 120
  %184 = load ptr, ptr %183, align 8
  store ptr @i32_typ, ptr %21, align 8
  %185 = call ptr %184({ ptr, ptr, ptr, i32 } %172, ptr nonnull %21)
  %186 = call { ptr, i160 } %185({ ptr, ptr, ptr, i32 } %172, { ptr, ptr, ptr, i32 } %172, ptr nonnull %20, i32 %164)
  %.fca.0.extract87 = extractvalue { ptr, i160 } %186, 0
  %187 = load ptr, ptr %28, align 8
  %188 = load ptr, ptr %29, align 8
  %189 = load ptr, ptr %30, align 8
  %190 = load i32, ptr %31, align 8
  %191 = insertvalue { ptr, i160 } undef, ptr %187, 0
  %192 = ptrtoint ptr %188 to i64
  %193 = ptrtoint ptr %189 to i64
  %.sroa.3.0.insert.ext = zext i32 %190 to i160
  %.sroa.3.0.insert.shift = shl nuw i160 %.sroa.3.0.insert.ext, 128
  %.sroa.2.0.insert.ext = zext i64 %193 to i160
  %.sroa.2.0.insert.shift = shl nuw nsw i160 %.sroa.2.0.insert.ext, 64
  %.sroa.2.0.insert.insert = or disjoint i160 %.sroa.3.0.insert.shift, %.sroa.2.0.insert.shift
  %.sroa.0.0.insert.ext = zext i64 %192 to i160
  %.sroa.0.0.insert.insert = or disjoint i160 %.sroa.2.0.insert.insert, %.sroa.0.0.insert.ext
  %194 = insertvalue { ptr, i160 } %191, i160 %.sroa.0.0.insert.insert, 1
  %195 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract14)
  %196 = load ptr, ptr %49, align 8
  %197 = load ptr, ptr %196, align 8
  %198 = call { ptr, ptr, ptr, i32 } %197(ptr %.fca.1.extract16)
  %.fca.0.extract79 = extractvalue { ptr, ptr, ptr, i32 } %198, 0
  %.fca.1.extract81 = extractvalue { ptr, ptr, ptr, i32 } %198, 1
  %.fca.2.extract83 = extractvalue { ptr, ptr, ptr, i32 } %198, 2
  %.fca.3.extract85 = extractvalue { ptr, ptr, ptr, i32 } %198, 3
  %hash_coef_ptr.i.i218 = getelementptr i8, ptr %.fca.0.extract79, i64 8
  %tbl_size_ptr.i.i219 = getelementptr i8, ptr %.fca.0.extract79, i64 16
  %offset_tbl_ptr.i.i220 = getelementptr i8, ptr %.fca.0.extract79, i64 40
  %hash_coef.i.i221 = load i64, ptr %hash_coef_ptr.i.i218, align 4
  %tbl_size.i.i222 = load i64, ptr %tbl_size_ptr.i.i219, align 4
  %offset_tbl.i.i223 = load ptr, ptr %offset_tbl_ptr.i.i220, align 8
  %product.i.i.i224 = mul i64 %hash_coef.i.i221, -5261542750394134544
  %shifted.i.i.i225 = lshr i64 %product.i.i.i224, 32
  %xored.i.i.i226 = xor i64 %shifted.i.i.i225, %product.i.i.i224
  %hash.i.i.i227 = and i64 %xored.i.i.i226, %tbl_size.i.i222
  %offset_ptr.i.i228 = getelementptr i32, ptr %offset_tbl.i.i223, i64 %hash.i.i.i227
  %offset.i.i229 = load i32, ptr %offset_ptr.i.i228, align 4
  %eq.i232 = icmp eq i32 %.fca.3.extract85, %offset.i.i229
  call void @llvm.assume(i1 %eq.i232) #30
  %199 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract79, 0
  %200 = insertvalue { ptr, ptr, ptr, i32 } %199, ptr %.fca.1.extract81, 1
  %201 = insertvalue { ptr, ptr, ptr, i32 } %200, ptr %.fca.2.extract83, 2
  %202 = insertvalue { ptr, ptr, ptr, i32 } %201, i32 %.fca.3.extract85, 3
  %203 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract14)
  %204 = load ptr, ptr %35, align 8
  %205 = call ptr %204(ptr %.fca.1.extract16)
  %206 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract14)
  %207 = load ptr, ptr %42, align 8
  %208 = call ptr %207(ptr %.fca.1.extract16)
  %result.i233 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %209 = getelementptr i8, ptr %result.i233, i64 16
  store ptr %208, ptr %209, align 8
  %210 = getelementptr i8, ptr %result.i233, i64 8
  store ptr %205, ptr %210, align 8
  %211 = getelementptr i8, ptr %result.i233, i64 24
  store ptr null, ptr %211, align 8
  %212 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i233)
  store ptr @Entry, ptr %result.i233, align 8
  store ptr @_parameterization_Ptri32, ptr %22, align 8
  store ptr %result.i233, ptr %50, align 8
  %213 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %22)
  %214 = call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract79)
  %215 = sext i32 %.fca.3.extract85 to i64
  %216 = getelementptr ptr, ptr %.fca.0.extract79, i64 %215
  %217 = getelementptr i8, ptr %216, i64 128
  %218 = load ptr, ptr %217, align 8
  store ptr @i32_typ, ptr %23, align 8
  store ptr %187, ptr %51, align 8
  %219 = call ptr %218({ ptr, ptr, ptr, i32 } %202, ptr nonnull %23)
  call void %219({ ptr, ptr, ptr, i32 } %202, { ptr, ptr, ptr, i32 } %202, ptr nonnull %22, i32 %164, { ptr, i160 } %194)
  %220 = icmp ne ptr %.fca.0.extract87, @nil_typ
  %221 = icmp ne ptr %.fca.0.extract87, null
  %.not138 = and i1 %220, %221
  br i1 %.not138, label %.cont.cont, label %228

.cont.cont:                                       ; preds = %148, %85
  %.sink = phi { ptr, i160 } [ %112, %85 ], [ %186, %148 ]
  %222 = phi i32 [ 2, %85 ], [ 1, %148 ]
  %vptr.i248.sroa.speculated = phi ptr [ %.fca.0.extract112, %85 ], [ %.fca.0.extract87, %148 ]
  %.fca.1.extract114 = extractvalue { ptr, i160 } %.sink, 1
  %.sroa.9.8.extract.shift = lshr i160 %.fca.1.extract114, 64
  %.sroa.9.8.extract.trunc = trunc i160 %.sroa.9.8.extract.shift to i64
  %.sroa.5440.8.extract.trunc = trunc i160 %.fca.1.extract114 to i64
  %.sroa.speculated352 = inttoptr i64 %.sroa.5440.8.extract.trunc to ptr
  %.sroa.speculated346 = inttoptr i64 %.sroa.9.8.extract.trunc to ptr
  %hash_coef_ptr.i.i249 = getelementptr i8, ptr %vptr.i248.sroa.speculated, i64 8
  %tbl_size_ptr.i.i250 = getelementptr i8, ptr %vptr.i248.sroa.speculated, i64 16
  %offset_tbl_ptr.i.i251 = getelementptr i8, ptr %vptr.i248.sroa.speculated, i64 40
  %hash_coef.i.i252 = load i64, ptr %hash_coef_ptr.i.i249, align 4
  %tbl_size.i.i253 = load i64, ptr %tbl_size_ptr.i.i250, align 4
  %offset_tbl.i.i254 = load ptr, ptr %offset_tbl_ptr.i.i251, align 8
  %product.i.i.i255 = mul i64 %hash_coef.i.i252, 4015701072841558310
  %shifted.i.i.i256 = lshr i64 %product.i.i.i255, 32
  %xored.i.i.i257 = xor i64 %shifted.i.i.i256, %product.i.i.i255
  %hash.i.i.i258 = and i64 %xored.i.i.i257, %tbl_size.i.i253
  %offset_ptr.i.i259 = getelementptr i32, ptr %offset_tbl.i.i254, i64 %hash.i.i.i258
  %offset.i.i260 = load i32, ptr %offset_ptr.i.i259, align 4
  store ptr %vptr.i248.sroa.speculated, ptr %28, align 8
  store ptr %.sroa.speculated352, ptr %29, align 8
  store ptr %.sroa.speculated346, ptr %30, align 8
  store i32 %offset.i.i260, ptr %31, align 8
  %223 = add nuw nsw i32 %.reg2mem193.0677, 1
  %224 = load ptr, ptr %36, align 8
  %225 = load ptr, ptr %224, align 8
  %226 = call i32 %225(ptr %.fca.1.extract16)
  %227 = icmp slt i32 %223, %226
  br i1 %227, label %56, label %._crit_edge

228:                                              ; preds = %148, %85
  %229 = phi ptr [ %24, %148 ], [ %12, %85 ]
  %230 = phi ptr [ %25, %148 ], [ %13, %85 ]
  %231 = phi ptr [ %26, %148 ], [ %14, %85 ]
  %.sroa.phi = phi ptr [ %.sroa.1, %148 ], [ %.sroa.1681, %85 ]
  %232 = phi ptr [ %.sroa.0, %148 ], [ %.sroa.0680, %85 ]
  %233 = phi ptr [ %27, %148 ], [ %15, %85 ]
  %234 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract14)
  %235 = getelementptr i8, ptr %35, i64 40
  %236 = load ptr, ptr %235, align 8
  %237 = load ptr, ptr %236, align 8
  %238 = call i32 %237(ptr %.fca.1.extract16)
  store i32 %238, ptr %229, align 4
  store i32 1, ptr %230, align 4
  %239 = add i32 %238, 1
  store i32 %239, ptr %231, align 4
  %240 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract14)
  %241 = load ptr, ptr %235, align 8
  %242 = getelementptr i8, ptr %241, i64 8
  %243 = load ptr, ptr %242, align 8
  call void %243(ptr %.fca.1.extract16, i32 %239)
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %233, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %232, align 8
  %244 = load i160, ptr %.sroa.phi, align 8
  br label %247

._crit_edge:                                      ; preds = %.cont.cont, %4
  %245 = load ptr, ptr %28, align 8
  %246 = load i160, ptr %29, align 8
  br label %247

247:                                              ; preds = %._crit_edge, %228
  %.reg2mem135.sroa.3.0 = phi i160 [ %244, %228 ], [ %246, %._crit_edge ]
  %.reg2mem135.sroa.0.0 = phi ptr [ @nil_typ, %228 ], [ %245, %._crit_edge ]
  %.reload136.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %.reg2mem135.sroa.0.0, 0
  %.reload136.fca.1.insert = insertvalue { ptr, i160 } %.reload136.fca.0.insert, i160 %.reg2mem135.sroa.3.0, 1
  ret { ptr, i160 } %.reload136.fca.1.insert
}

define void @HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, i32 %4) {
  %6 = alloca [1 x ptr], align 8
  %7 = alloca { ptr }, align 8
  %8 = alloca [1 x ptr], align 8
  %9 = alloca { ptr }, align 8
  %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %10 = icmp sgt i32 %4, 0
  br i1 %10, label %.lr.ph, label %._crit_edge1._crit_edge

.lr.ph:                                           ; preds = %5
  %invariant.gep = getelementptr i8, ptr %.fca.0.extract, i64 120
  %offset_tbl_ptr.i.i21 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %offset_tbl.i.i24 = load ptr, ptr %offset_tbl_ptr.i.i21, align 8
  %hash_coef_ptr.i.i19 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %hash_coef.i.i22 = load i64, ptr %hash_coef_ptr.i.i19, align 4
  %product.i.i.i25 = mul i64 %hash_coef.i.i22, -5261542750394134544
  %shifted.i.i.i26 = lshr i64 %product.i.i.i25, 32
  %xored.i.i.i27 = xor i64 %shifted.i.i.i26, %product.i.i.i25
  %tbl_size_ptr.i.i20 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %tbl_size.i.i23 = load i64, ptr %tbl_size_ptr.i.i20, align 4
  %hash.i.i.i28 = and i64 %xored.i.i.i27, %tbl_size.i.i23
  %offset_ptr.i.i29 = getelementptr i32, ptr %offset_tbl.i.i24, i64 %hash.i.i.i28
  %offset.i.i30 = load i32, ptr %offset_ptr.i.i29, align 4
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 40
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 8
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %product.i.i.i = mul i64 %hash_coef.i.i, -2849643283898152329
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 16
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.2.extract7 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %11 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %12 = insertvalue { ptr, ptr, ptr, i32 } %11, ptr %.fca.1.extract, 1
  %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.2.extract, 2
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, i32 %offset.i.i30, 3
  %15 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract3)
  %16 = sext i32 %offset.i.i to i64
  %17 = getelementptr ptr, ptr %.fca.0.extract3, i64 %16
  %18 = getelementptr i8, ptr %17, i64 8
  %19 = sext i32 %offset.i.i30 to i64
  %gep = getelementptr ptr, ptr %invariant.gep, i64 %19
  %20 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract3, 0
  %21 = insertvalue { ptr, ptr, ptr, i32 } %20, ptr %.fca.1.extract5, 1
  %22 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %.fca.2.extract7, 2
  %23 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 %offset.i.i, 3
  %24 = getelementptr i8, ptr %17, i64 112
  br label %25

25:                                               ; preds = %.lr.ph, %._crit_edge1
  %.reg2mem13.079 = phi i32 [ 0, %.lr.ph ], [ %60, %._crit_edge1 ]
  %26 = load ptr, ptr %17, align 8
  %27 = call ptr %26(ptr %.fca.1.extract5)
  %28 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract3)
  %29 = load ptr, ptr %18, align 8
  %30 = call ptr %29(ptr %.fca.1.extract5)
  store ptr @_parameterization_Ptri32, ptr %6, align 8
  %31 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %6)
  %32 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %.fca.0.extract)
  %33 = load ptr, ptr %gep, align 8
  store ptr @i32_typ, ptr %7, align 8
  %34 = call ptr %33({ ptr, ptr, ptr, i32 } %14, ptr nonnull %7)
  %35 = call { ptr, i160 } %34({ ptr, ptr, ptr, i32 } %14, { ptr, ptr, ptr, i32 } %14, ptr nonnull %6, i32 %.reg2mem13.079)
  %.fca.0.extract11 = extractvalue { ptr, i160 } %35, 0
  %36 = icmp ne ptr %.fca.0.extract11, @nil_typ
  %37 = icmp ne ptr %.fca.0.extract11, null
  %.not17 = and i1 %36, %37
  br i1 %.not17, label %38, label %._crit_edge1

38:                                               ; preds = %25
  %.fca.1.extract13 = extractvalue { ptr, i160 } %35, 1
  %.sroa.375.8.extract.trunc = trunc i160 %.fca.1.extract13 to i64
  %39 = inttoptr i64 %.sroa.375.8.extract.trunc to ptr
  %.sroa.576.8.extract.shift = lshr i160 %.fca.1.extract13, 64
  %.sroa.576.8.extract.trunc = trunc i160 %.sroa.576.8.extract.shift to i64
  %40 = inttoptr i64 %.sroa.576.8.extract.trunc to ptr
  %hash_coef_ptr.i.i33 = getelementptr i8, ptr %.fca.0.extract11, i64 8
  %tbl_size_ptr.i.i34 = getelementptr i8, ptr %.fca.0.extract11, i64 16
  %offset_tbl_ptr.i.i35 = getelementptr i8, ptr %.fca.0.extract11, i64 40
  %hash_coef.i.i36 = load i64, ptr %hash_coef_ptr.i.i33, align 4
  %tbl_size.i.i37 = load i64, ptr %tbl_size_ptr.i.i34, align 4
  %offset_tbl.i.i38 = load ptr, ptr %offset_tbl_ptr.i.i35, align 8
  %product.i.i.i39 = mul i64 %hash_coef.i.i36, 4015701072841558310
  %shifted.i.i.i40 = lshr i64 %product.i.i.i39, 32
  %xored.i.i.i41 = xor i64 %shifted.i.i.i40, %product.i.i.i39
  %hash.i.i.i42 = and i64 %xored.i.i.i41, %tbl_size.i.i37
  %offset_ptr.i.i43 = getelementptr i32, ptr %offset_tbl.i.i38, i64 %hash.i.i.i42
  %offset.i.i58 = load i32, ptr %offset_ptr.i.i43, align 4
  %41 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11, 0
  %42 = insertvalue { ptr, ptr, ptr, i32 } %41, ptr %39, 1
  %43 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %40, 2
  %44 = insertvalue { ptr, ptr, ptr, i32 } %43, i32 %offset.i.i58, 3
  %45 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract3)
  %46 = load ptr, ptr %17, align 8
  %47 = call ptr %46(ptr %.fca.1.extract5)
  %48 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract3)
  %49 = load ptr, ptr %18, align 8
  %50 = call ptr %49(ptr %.fca.1.extract5)
  %result.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %51 = getelementptr i8, ptr %result.i, i64 16
  store ptr %50, ptr %51, align 8
  %52 = getelementptr i8, ptr %result.i, i64 8
  store ptr %47, ptr %52, align 8
  %53 = getelementptr i8, ptr %result.i, i64 24
  store ptr null, ptr %53, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i)
  store ptr @Entry, ptr %result.i, align 8
  store ptr %result.i, ptr %8, align 8
  %55 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %8)
  %56 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract3)
  %57 = load ptr, ptr %24, align 8
  store ptr %.fca.0.extract11, ptr %9, align 8
  %58 = call ptr %57({ ptr, ptr, ptr, i32 } %23, ptr nonnull %9)
  %59 = call { ptr, i160 } %58({ ptr, ptr, ptr, i32 } %23, { ptr, ptr, ptr, i32 } %23, ptr nonnull %8, { ptr, ptr, ptr, i32 } %44)
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %38, %25
  %60 = add nuw nsw i32 %.reg2mem13.079, 1
  %61 = icmp slt i32 %60, %4
  br i1 %61, label %25, label %._crit_edge1._crit_edge

._crit_edge1._crit_edge:                          ; preds = %._crit_edge1, %5
  ret void
}

define void @HashMap_resize_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = alloca [2 x ptr], align 8
  %8 = alloca { ptr, ptr }, align 8
  %9 = alloca [2 x ptr], align 8
  %10 = alloca { ptr, ptr }, align 8
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract13 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -2849643283898152329
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %11 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract9)
  %12 = sext i32 %offset.i.i to i64
  %13 = getelementptr ptr, ptr %.fca.0.extract9, i64 %12
  %14 = getelementptr i8, ptr %13, i64 24
  %15 = load ptr, ptr %14, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = tail call { ptr, ptr, ptr, i32 } %16(ptr %.fca.1.extract11)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %17, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %17, 1
  %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %17, 2
  %.fca.3.extract7 = extractvalue { ptr, ptr, ptr, i32 } %17, 3
  %hash_coef_ptr.i.i18 = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i19 = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i20 = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i21 = load i64, ptr %hash_coef_ptr.i.i18, align 4
  %tbl_size.i.i22 = load i64, ptr %tbl_size_ptr.i.i19, align 4
  %offset_tbl.i.i23 = load ptr, ptr %offset_tbl_ptr.i.i20, align 8
  %product.i.i.i24 = mul i64 %hash_coef.i.i21, -5261542750394134544
  %shifted.i.i.i25 = lshr i64 %product.i.i.i24, 32
  %xored.i.i.i26 = xor i64 %shifted.i.i.i25, %product.i.i.i24
  %hash.i.i.i27 = and i64 %xored.i.i.i26, %tbl_size.i.i22
  %offset_ptr.i.i28 = getelementptr i32, ptr %offset_tbl.i.i23, i64 %hash.i.i.i27
  %offset.i.i29 = load i32, ptr %offset_ptr.i.i28, align 4
  %eq.i = icmp eq i32 %.fca.3.extract7, %offset.i.i29
  tail call void @llvm.assume(i1 %eq.i) #30
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %18, align 8
  %19 = getelementptr inbounds i8, ptr %18, i64 8
  store ptr %.fca.1.extract3, ptr %19, align 8
  %20 = getelementptr inbounds i8, ptr %18, i64 16
  store ptr %.fca.2.extract5, ptr %20, align 8
  %21 = getelementptr inbounds i8, ptr %18, i64 24
  store i32 %.fca.3.extract7, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %18)
  %23 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract9)
  %24 = getelementptr i8, ptr %13, i64 32
  %25 = load ptr, ptr %24, align 8
  %26 = load ptr, ptr %25, align 8
  %27 = tail call { ptr, ptr, ptr, i32 } %26(ptr %.fca.1.extract11)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %27, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %27, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %27, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %27, 3
  %hash_coef_ptr.i.i46 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i47 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i48 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i49 = load i64, ptr %hash_coef_ptr.i.i46, align 4
  %tbl_size.i.i50 = load i64, ptr %tbl_size_ptr.i.i47, align 4
  %offset_tbl.i.i51 = load ptr, ptr %offset_tbl_ptr.i.i48, align 8
  %product.i.i.i52 = mul i64 %hash_coef.i.i49, -5261542750394134544
  %shifted.i.i.i53 = lshr i64 %product.i.i.i52, 32
  %xored.i.i.i54 = xor i64 %shifted.i.i.i53, %product.i.i.i52
  %hash.i.i.i55 = and i64 %xored.i.i.i54, %tbl_size.i.i50
  %offset_ptr.i.i56 = getelementptr i32, ptr %offset_tbl.i.i51, i64 %hash.i.i.i55
  %offset.i.i57 = load i32, ptr %offset_ptr.i.i56, align 4
  %eq.i60 = icmp eq i32 %.fca.3.extract, %offset.i.i57
  tail call void @llvm.assume(i1 %eq.i60) #30
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %28, align 8
  %29 = getelementptr inbounds i8, ptr %28, i64 8
  store ptr %.fca.1.extract, ptr %29, align 8
  %30 = getelementptr inbounds i8, ptr %28, i64 16
  store ptr %.fca.2.extract, ptr %30, align 8
  %31 = getelementptr inbounds i8, ptr %28, i64 24
  store i32 %.fca.3.extract, ptr %31, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %28)
  %33 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %34 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %.fca.1.extract3, 1
  %35 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %.fca.2.extract5, 2
  %36 = insertvalue { ptr, ptr, ptr, i32 } %35, i32 %.fca.3.extract7, 3
  %37 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract9)
  %38 = load ptr, ptr %13, align 8
  %39 = tail call ptr %38(ptr %.fca.1.extract11)
  %40 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract9)
  %41 = getelementptr i8, ptr %13, i64 8
  %42 = load ptr, ptr %41, align 8
  %43 = tail call ptr %42(ptr %.fca.1.extract11)
  %44 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %45 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract1)
  %46 = sext i32 %.fca.3.extract7 to i64
  %47 = getelementptr ptr, ptr %.fca.0.extract1, i64 %46
  %48 = getelementptr i8, ptr %47, i64 64
  %49 = load ptr, ptr %48, align 8
  %50 = call ptr %49({ ptr, ptr, ptr, i32 } %36, ptr nonnull %4)
  %51 = call i32 %50({ ptr, ptr, ptr, i32 } %36, { ptr, ptr, ptr, i32 } %36, ptr nonnull %4)
  %52 = shl i32 %51, 1
  %53 = call i32 @llvm.smax.i32(i32 %52, i32 16)
  %54 = call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract9)
  %55 = load ptr, ptr %13, align 8
  %56 = call ptr %55(ptr %.fca.1.extract11)
  %57 = call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract9)
  %58 = load ptr, ptr %41, align 8
  %59 = call ptr %58(ptr %.fca.1.extract11)
  %result.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %60 = getelementptr i8, ptr %result.i, i64 16
  store ptr @_parameterization_Nil, ptr %60, align 8
  %result.i75 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %61 = getelementptr i8, ptr %result.i75, i64 16
  store ptr %59, ptr %61, align 8
  %62 = getelementptr i8, ptr %result.i75, i64 8
  store ptr %56, ptr %62, align 8
  %63 = getelementptr i8, ptr %result.i75, i64 24
  store ptr null, ptr %63, align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i75)
  store ptr @Entry, ptr %result.i75, align 8
  %65 = getelementptr i8, ptr %result.i, i64 8
  store ptr %result.i75, ptr %65, align 8
  %66 = getelementptr i8, ptr %result.i, i64 24
  store ptr null, ptr %66, align 8
  %67 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i)
  store ptr @union_typ, ptr %result.i, align 8
  %result.i76 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i, ptr %result.i76, align 8
  %68 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i76)
  %69 = getelementptr inbounds i8, ptr %5, i64 8
  %70 = getelementptr inbounds i8, ptr %5, i64 24
  store ptr @Array, ptr %5, align 8
  store ptr %result.i76, ptr %69, align 8
  store i32 9, ptr %70, align 8
  %71 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %5)
  %72 = getelementptr inbounds i8, ptr %5, i64 16
  %73 = call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract9)
  %74 = load ptr, ptr %13, align 8
  %75 = call ptr %74(ptr %.fca.1.extract11)
  %76 = call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract9)
  %77 = load ptr, ptr %41, align 8
  %78 = call ptr %77(ptr %.fca.1.extract11)
  %79 = getelementptr i8, ptr %result.i76, i64 16
  store i32 %53, ptr %79, align 4
  %80 = getelementptr i8, ptr %result.i76, i64 20
  store i32 %53, ptr %80, align 4
  %81 = zext nneg i32 %53 to i64
  %82 = shl nuw nsw i64 %81, 5
  %result.i.i = call noalias ptr @bump_malloc_inner(i64 noundef %82, ptr nonnull @current_ptr) #29
  %83 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %84 = getelementptr i8, ptr %result.i76, i64 8
  store ptr %result.i.i, ptr %84, align 8
  %85 = load ptr, ptr %5, align 8
  %86 = load ptr, ptr %69, align 8
  %87 = load ptr, ptr %72, align 8
  %hash_coef_ptr.i.i78 = getelementptr i8, ptr %85, i64 8
  %tbl_size_ptr.i.i79 = getelementptr i8, ptr %85, i64 16
  %offset_tbl_ptr.i.i80 = getelementptr i8, ptr %85, i64 40
  %hash_coef.i.i81 = load i64, ptr %hash_coef_ptr.i.i78, align 4
  %tbl_size.i.i82 = load i64, ptr %tbl_size_ptr.i.i79, align 4
  %offset_tbl.i.i83 = load ptr, ptr %offset_tbl_ptr.i.i80, align 8
  %product.i.i.i84 = mul i64 %hash_coef.i.i81, -5261542750394134544
  %shifted.i.i.i85 = lshr i64 %product.i.i.i84, 32
  %xored.i.i.i86 = xor i64 %shifted.i.i.i85, %product.i.i.i84
  %hash.i.i.i87 = and i64 %xored.i.i.i86, %tbl_size.i.i82
  %offset_ptr.i.i88 = getelementptr i32, ptr %offset_tbl.i.i83, i64 %hash.i.i.i87
  %offset.i.i89 = load i32, ptr %offset_ptr.i.i88, align 4
  %88 = call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract9)
  %89 = load ptr, ptr %14, align 8
  %90 = getelementptr i8, ptr %89, i64 8
  %91 = load ptr, ptr %90, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %85, 0
  %93 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %86, 1
  %94 = insertvalue { ptr, ptr, ptr, i32 } %93, ptr %87, 2
  %95 = insertvalue { ptr, ptr, ptr, i32 } %94, i32 %offset.i.i89, 3
  call void %91(ptr %.fca.1.extract11, { ptr, ptr, ptr, i32 } %95)
  %96 = call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract9)
  %97 = load ptr, ptr %13, align 8
  %98 = call ptr %97(ptr %.fca.1.extract11)
  %99 = call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract9)
  %100 = load ptr, ptr %41, align 8
  %101 = call ptr %100(ptr %.fca.1.extract11)
  %result.i91 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %102 = getelementptr i8, ptr %result.i91, i64 16
  store ptr @_parameterization_Nil, ptr %102, align 8
  %result.i92 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %103 = getelementptr i8, ptr %result.i92, i64 16
  store ptr %101, ptr %103, align 8
  %104 = getelementptr i8, ptr %result.i92, i64 8
  store ptr %98, ptr %104, align 8
  %105 = getelementptr i8, ptr %result.i92, i64 24
  store ptr null, ptr %105, align 8
  %106 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i92)
  store ptr @Entry, ptr %result.i92, align 8
  %107 = getelementptr i8, ptr %result.i91, i64 8
  store ptr %result.i92, ptr %107, align 8
  %108 = getelementptr i8, ptr %result.i91, i64 24
  store ptr null, ptr %108, align 8
  %109 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i91)
  store ptr @union_typ, ptr %result.i91, align 8
  %result.i93 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i91, ptr %result.i93, align 8
  %110 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i93)
  %111 = getelementptr inbounds i8, ptr %6, i64 8
  %112 = getelementptr inbounds i8, ptr %6, i64 24
  store ptr @Array, ptr %6, align 8
  store ptr %result.i93, ptr %111, align 8
  store i32 9, ptr %112, align 8
  %113 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %6)
  %114 = getelementptr inbounds i8, ptr %6, i64 16
  %115 = call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract9)
  %116 = load ptr, ptr %13, align 8
  %117 = call ptr %116(ptr %.fca.1.extract11)
  %118 = call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract9)
  %119 = load ptr, ptr %41, align 8
  %120 = call ptr %119(ptr %.fca.1.extract11)
  %121 = getelementptr i8, ptr %result.i93, i64 16
  store i32 %53, ptr %121, align 4
  %122 = getelementptr i8, ptr %result.i93, i64 20
  store i32 %53, ptr %122, align 4
  %result.i.i234 = call noalias ptr @bump_malloc_inner(i64 noundef %82, ptr nonnull @current_ptr) #29
  %123 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %124 = getelementptr i8, ptr %result.i93, i64 8
  store ptr %result.i.i234, ptr %124, align 8
  %125 = load ptr, ptr %6, align 8
  %126 = load ptr, ptr %111, align 8
  %127 = load ptr, ptr %114, align 8
  %hash_coef_ptr.i.i95 = getelementptr i8, ptr %125, i64 8
  %tbl_size_ptr.i.i96 = getelementptr i8, ptr %125, i64 16
  %offset_tbl_ptr.i.i97 = getelementptr i8, ptr %125, i64 40
  %hash_coef.i.i98 = load i64, ptr %hash_coef_ptr.i.i95, align 4
  %tbl_size.i.i99 = load i64, ptr %tbl_size_ptr.i.i96, align 4
  %offset_tbl.i.i100 = load ptr, ptr %offset_tbl_ptr.i.i97, align 8
  %product.i.i.i101 = mul i64 %hash_coef.i.i98, -5261542750394134544
  %shifted.i.i.i102 = lshr i64 %product.i.i.i101, 32
  %xored.i.i.i103 = xor i64 %shifted.i.i.i102, %product.i.i.i101
  %hash.i.i.i104 = and i64 %xored.i.i.i103, %tbl_size.i.i99
  %offset_ptr.i.i105 = getelementptr i32, ptr %offset_tbl.i.i100, i64 %hash.i.i.i104
  %offset.i.i106 = load i32, ptr %offset_ptr.i.i105, align 4
  %128 = call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract9)
  %129 = load ptr, ptr %24, align 8
  %130 = getelementptr i8, ptr %129, i64 8
  %131 = load ptr, ptr %130, align 8
  %132 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %125, 0
  %133 = insertvalue { ptr, ptr, ptr, i32 } %132, ptr %126, 1
  %134 = insertvalue { ptr, ptr, ptr, i32 } %133, ptr %127, 2
  %135 = insertvalue { ptr, ptr, ptr, i32 } %134, i32 %offset.i.i106, 3
  call void %131(ptr %.fca.1.extract11, { ptr, ptr, ptr, i32 } %135)
  %136 = call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract9)
  %137 = getelementptr i8, ptr %13, i64 40
  %138 = load ptr, ptr %137, align 8
  %139 = getelementptr i8, ptr %138, i64 8
  %140 = load ptr, ptr %139, align 8
  call void %140(ptr %.fca.1.extract11, i32 0)
  %141 = load ptr, ptr %18, align 8
  %142 = load ptr, ptr %19, align 8
  %143 = load ptr, ptr %20, align 8
  %hash_coef_ptr.i.i109 = getelementptr i8, ptr %141, i64 8
  %tbl_size_ptr.i.i110 = getelementptr i8, ptr %141, i64 16
  %offset_tbl_ptr.i.i111 = getelementptr i8, ptr %141, i64 40
  %hash_coef.i.i112 = load i64, ptr %hash_coef_ptr.i.i109, align 4
  %tbl_size.i.i113 = load i64, ptr %tbl_size_ptr.i.i110, align 4
  %offset_tbl.i.i114 = load ptr, ptr %offset_tbl_ptr.i.i111, align 8
  %product.i.i.i115 = mul i64 %hash_coef.i.i112, -5261542750394134544
  %shifted.i.i.i116 = lshr i64 %product.i.i.i115, 32
  %xored.i.i.i117 = xor i64 %shifted.i.i.i116, %product.i.i.i115
  %hash.i.i.i118 = and i64 %xored.i.i.i117, %tbl_size.i.i113
  %offset_ptr.i.i119 = getelementptr i32, ptr %offset_tbl.i.i114, i64 %hash.i.i.i118
  %offset.i.i120 = load i32, ptr %offset_ptr.i.i119, align 4
  %144 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %141, 0
  %145 = insertvalue { ptr, ptr, ptr, i32 } %144, ptr %142, 1
  %146 = insertvalue { ptr, ptr, ptr, i32 } %145, ptr %143, 2
  %147 = insertvalue { ptr, ptr, ptr, i32 } %146, i32 %offset.i.i120, 3
  %148 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract9, 0
  %149 = insertvalue { ptr, ptr, ptr, i32 } %148, ptr %.fca.1.extract11, 1
  %150 = insertvalue { ptr, ptr, ptr, i32 } %149, ptr %.fca.2.extract13, 2
  %151 = insertvalue { ptr, ptr, ptr, i32 } %150, i32 %offset.i.i, 3
  %152 = call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract9)
  %153 = load ptr, ptr %13, align 8
  %154 = call ptr %153(ptr %.fca.1.extract11)
  %155 = call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract9)
  %156 = load ptr, ptr %41, align 8
  %157 = call ptr %156(ptr %.fca.1.extract11)
  %result.i122 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  %result.i123 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %158 = getelementptr i8, ptr %result.i123, i64 16
  store ptr @_parameterization_Nil, ptr %158, align 8
  %result.i124 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %159 = getelementptr i8, ptr %result.i124, i64 16
  store ptr %157, ptr %159, align 8
  %160 = getelementptr i8, ptr %result.i124, i64 8
  store ptr %154, ptr %160, align 8
  %161 = getelementptr i8, ptr %result.i124, i64 24
  store ptr null, ptr %161, align 8
  %162 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i124)
  store ptr @Entry, ptr %result.i124, align 8
  %163 = getelementptr i8, ptr %result.i123, i64 8
  store ptr %result.i124, ptr %163, align 8
  %164 = getelementptr i8, ptr %result.i123, i64 24
  store ptr null, ptr %164, align 8
  %165 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i123)
  store ptr @union_typ, ptr %result.i123, align 8
  %166 = getelementptr i8, ptr %result.i122, i64 8
  store ptr %result.i123, ptr %166, align 8
  %167 = getelementptr i8, ptr %result.i122, i64 16
  store ptr null, ptr %167, align 8
  %168 = call ptr @llvm.invariant.start.p0(i64 16, ptr %result.i122)
  store ptr @Array, ptr %result.i122, align 8
  store ptr %result.i122, ptr %7, align 8
  %169 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr @_parameterization_Ptri32, ptr %169, align 8
  %170 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %7)
  %171 = call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract9)
  %172 = getelementptr i8, ptr %13, i64 120
  %173 = load ptr, ptr %172, align 8
  store ptr %141, ptr %8, align 8
  %174 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr @i32_typ, ptr %174, align 8
  %175 = call ptr %173({ ptr, ptr, ptr, i32 } %151, ptr nonnull %8)
  call void %175({ ptr, ptr, ptr, i32 } %151, { ptr, ptr, ptr, i32 } %151, ptr nonnull %7, { ptr, ptr, ptr, i32 } %147, i32 %51)
  %176 = load ptr, ptr %28, align 8
  %177 = load ptr, ptr %29, align 8
  %178 = load ptr, ptr %30, align 8
  %hash_coef_ptr.i.i126 = getelementptr i8, ptr %176, i64 8
  %tbl_size_ptr.i.i127 = getelementptr i8, ptr %176, i64 16
  %offset_tbl_ptr.i.i128 = getelementptr i8, ptr %176, i64 40
  %hash_coef.i.i129 = load i64, ptr %hash_coef_ptr.i.i126, align 4
  %tbl_size.i.i130 = load i64, ptr %tbl_size_ptr.i.i127, align 4
  %offset_tbl.i.i131 = load ptr, ptr %offset_tbl_ptr.i.i128, align 8
  %product.i.i.i132 = mul i64 %hash_coef.i.i129, -5261542750394134544
  %shifted.i.i.i133 = lshr i64 %product.i.i.i132, 32
  %xored.i.i.i134 = xor i64 %shifted.i.i.i133, %product.i.i.i132
  %hash.i.i.i135 = and i64 %xored.i.i.i134, %tbl_size.i.i130
  %offset_ptr.i.i136 = getelementptr i32, ptr %offset_tbl.i.i131, i64 %hash.i.i.i135
  %offset.i.i137 = load i32, ptr %offset_ptr.i.i136, align 4
  %179 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %176, 0
  %180 = insertvalue { ptr, ptr, ptr, i32 } %179, ptr %177, 1
  %181 = insertvalue { ptr, ptr, ptr, i32 } %180, ptr %178, 2
  %182 = insertvalue { ptr, ptr, ptr, i32 } %181, i32 %offset.i.i137, 3
  %183 = call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract9)
  %184 = load ptr, ptr %13, align 8
  %185 = call ptr %184(ptr %.fca.1.extract11)
  %186 = call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract9)
  %187 = load ptr, ptr %41, align 8
  %188 = call ptr %187(ptr %.fca.1.extract11)
  %result.i139 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  %result.i140 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %189 = getelementptr i8, ptr %result.i140, i64 16
  store ptr @_parameterization_Nil, ptr %189, align 8
  %result.i141 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %190 = getelementptr i8, ptr %result.i141, i64 16
  store ptr %188, ptr %190, align 8
  %191 = getelementptr i8, ptr %result.i141, i64 8
  store ptr %185, ptr %191, align 8
  %192 = getelementptr i8, ptr %result.i141, i64 24
  store ptr null, ptr %192, align 8
  %193 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i141)
  store ptr @Entry, ptr %result.i141, align 8
  %194 = getelementptr i8, ptr %result.i140, i64 8
  store ptr %result.i141, ptr %194, align 8
  %195 = getelementptr i8, ptr %result.i140, i64 24
  store ptr null, ptr %195, align 8
  %196 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i140)
  store ptr @union_typ, ptr %result.i140, align 8
  %197 = getelementptr i8, ptr %result.i139, i64 8
  store ptr %result.i140, ptr %197, align 8
  %198 = getelementptr i8, ptr %result.i139, i64 16
  store ptr null, ptr %198, align 8
  %199 = call ptr @llvm.invariant.start.p0(i64 16, ptr %result.i139)
  store ptr @Array, ptr %result.i139, align 8
  store ptr %result.i139, ptr %9, align 8
  %200 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr @_parameterization_Ptri32, ptr %200, align 8
  %201 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %9)
  %202 = call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract9)
  %203 = load ptr, ptr %172, align 8
  store ptr %176, ptr %10, align 8
  %204 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr @i32_typ, ptr %204, align 8
  %205 = call ptr %203({ ptr, ptr, ptr, i32 } %151, ptr nonnull %10)
  call void %205({ ptr, ptr, ptr, i32 } %151, { ptr, ptr, ptr, i32 } %151, ptr nonnull %9, { ptr, ptr, ptr, i32 } %182, i32 %51)
  ret void
}

define void @HashMap_insert_keyK_valueV({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, i160 } %3, { ptr, i160 } %4) {
  %6 = alloca [0 x ptr], align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = alloca [2 x ptr], align 8
  %9 = alloca { ptr, ptr }, align 8
  %10 = alloca [1 x ptr], align 8
  %11 = alloca { ptr }, align 8
  %12 = alloca [1 x ptr], align 8
  %13 = alloca { ptr }, align 8
  %14 = alloca [1 x ptr], align 8
  %15 = alloca { ptr }, align 8
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  %17 = alloca [2 x ptr], align 8
  %18 = alloca { ptr, ptr }, align 8
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %20 = alloca [1 x ptr], align 8
  %21 = alloca { ptr }, align 8
  %.fca.0.extract45 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract47 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract49 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract45, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract45, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract45, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -2849643283898152329
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract30 = extractvalue { ptr, i160 } %3, 0
  %22 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract45, 0
  %23 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %.fca.1.extract47, 1
  %24 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %.fca.2.extract49, 2
  %25 = insertvalue { ptr, ptr, ptr, i32 } %24, i32 %offset.i.i, 3
  %26 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract45)
  %27 = sext i32 %offset.i.i to i64
  %28 = getelementptr ptr, ptr %.fca.0.extract45, i64 %27
  %29 = load ptr, ptr %28, align 8
  %30 = tail call ptr %29(ptr %.fca.1.extract47)
  %31 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract45)
  %32 = getelementptr i8, ptr %28, i64 8
  %33 = load ptr, ptr %32, align 8
  %34 = tail call ptr %33(ptr %.fca.1.extract47)
  %35 = alloca [1 x ptr], align 8
  store ptr %30, ptr %35, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %35)
  %37 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract45)
  %38 = getelementptr i8, ptr %28, i64 80
  %39 = load ptr, ptr %38, align 8
  %40 = alloca { ptr }, align 8
  store ptr %.fca.0.extract30, ptr %40, align 8
  %41 = call ptr %39({ ptr, ptr, ptr, i32 } %25, ptr nonnull %40)
  %42 = call i32 %41({ ptr, ptr, ptr, i32 } %25, { ptr, ptr, ptr, i32 } %25, ptr nonnull %35, { ptr, i160 } %3)
  %43 = call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract45)
  %44 = load ptr, ptr %28, align 8
  %45 = call ptr %44(ptr %.fca.1.extract47)
  %46 = call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract45)
  %47 = load ptr, ptr %32, align 8
  %48 = call ptr %47(ptr %.fca.1.extract47)
  %49 = alloca [1 x ptr], align 8
  store ptr @_parameterization_Ptri32, ptr %49, align 8
  %50 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %49)
  %51 = call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract45)
  %52 = getelementptr i8, ptr %28, i64 96
  %53 = load ptr, ptr %52, align 8
  %54 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %54, align 8
  %55 = call ptr %53({ ptr, ptr, ptr, i32 } %25, ptr nonnull %54)
  %56 = call i32 %55({ ptr, ptr, ptr, i32 } %25, { ptr, ptr, ptr, i32 } %25, ptr nonnull %49, i32 %42)
  %57 = call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract45)
  %58 = getelementptr i8, ptr %28, i64 24
  %59 = load ptr, ptr %58, align 8
  %60 = load ptr, ptr %59, align 8
  %61 = call { ptr, ptr, ptr, i32 } %60(ptr %.fca.1.extract47)
  %.fca.0.extract5 = extractvalue { ptr, ptr, ptr, i32 } %61, 0
  %.fca.1.extract6 = extractvalue { ptr, ptr, ptr, i32 } %61, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %61, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %61, 3
  %hash_coef_ptr.i.i160 = getelementptr i8, ptr %.fca.0.extract5, i64 8
  %tbl_size_ptr.i.i161 = getelementptr i8, ptr %.fca.0.extract5, i64 16
  %offset_tbl_ptr.i.i162 = getelementptr i8, ptr %.fca.0.extract5, i64 40
  %hash_coef.i.i163 = load i64, ptr %hash_coef_ptr.i.i160, align 4
  %tbl_size.i.i164 = load i64, ptr %tbl_size_ptr.i.i161, align 4
  %offset_tbl.i.i165 = load ptr, ptr %offset_tbl_ptr.i.i162, align 8
  %product.i.i.i166 = mul i64 %hash_coef.i.i163, -5261542750394134544
  %shifted.i.i.i167 = lshr i64 %product.i.i.i166, 32
  %xored.i.i.i168 = xor i64 %shifted.i.i.i167, %product.i.i.i166
  %hash.i.i.i169 = and i64 %xored.i.i.i168, %tbl_size.i.i164
  %offset_ptr.i.i170 = getelementptr i32, ptr %offset_tbl.i.i165, i64 %hash.i.i.i169
  %offset.i.i171 = load i32, ptr %offset_ptr.i.i170, align 4
  %eq.i = icmp eq i32 %.fca.3.extract, %offset.i.i171
  call void @llvm.assume(i1 %eq.i) #30
  %62 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract5, 0
  %63 = insertvalue { ptr, ptr, ptr, i32 } %62, ptr %.fca.1.extract6, 1
  %64 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %.fca.2.extract, 2
  %65 = insertvalue { ptr, ptr, ptr, i32 } %64, i32 %.fca.3.extract, 3
  %66 = call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract45)
  %67 = load ptr, ptr %28, align 8
  %68 = call ptr %67(ptr %.fca.1.extract47)
  %69 = call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract45)
  %70 = load ptr, ptr %32, align 8
  %71 = call ptr %70(ptr %.fca.1.extract47)
  %72 = alloca [1 x ptr], align 8
  store ptr @_parameterization_Ptri32, ptr %72, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %72)
  %74 = call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract5)
  %75 = sext i32 %.fca.3.extract to i64
  %76 = getelementptr ptr, ptr %.fca.0.extract5, i64 %75
  %77 = getelementptr i8, ptr %76, i64 120
  %78 = load ptr, ptr %77, align 8
  %79 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %79, align 8
  %80 = call ptr %78({ ptr, ptr, ptr, i32 } %65, ptr nonnull %79)
  %81 = call { ptr, i160 } %80({ ptr, ptr, ptr, i32 } %65, { ptr, ptr, ptr, i32 } %65, ptr nonnull %72, i32 %56)
  %.fca.0.extract = extractvalue { ptr, i160 } %81, 0
  %82 = icmp ne ptr %.fca.0.extract, @nil_typ
  %83 = icmp ne ptr %.fca.0.extract, null
  %.not151 = and i1 %82, %83
  br i1 %.not151, label %84, label %.critedge

84:                                               ; preds = %5
  %.fca.1.extract = extractvalue { ptr, i160 } %81, 1
  %.sroa.4518.8.extract.trunc = trunc i160 %.fca.1.extract to i64
  %85 = inttoptr i64 %.sroa.4518.8.extract.trunc to ptr
  %.sroa.7520.8.extract.shift = lshr i160 %.fca.1.extract, 64
  %.sroa.7520.8.extract.trunc = trunc i160 %.sroa.7520.8.extract.shift to i64
  %86 = inttoptr i64 %.sroa.7520.8.extract.trunc to ptr
  %hash_coef_ptr.i.i174 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i175 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i176 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i177 = load i64, ptr %hash_coef_ptr.i.i174, align 4
  %tbl_size.i.i178 = load i64, ptr %tbl_size_ptr.i.i175, align 4
  %offset_tbl.i.i179 = load ptr, ptr %offset_tbl_ptr.i.i176, align 8
  %product.i.i.i180 = mul i64 %hash_coef.i.i177, 4015701072841558310
  %shifted.i.i.i181 = lshr i64 %product.i.i.i180, 32
  %xored.i.i.i182 = xor i64 %shifted.i.i.i181, %product.i.i.i180
  %hash.i.i.i183 = and i64 %xored.i.i.i182, %tbl_size.i.i178
  %offset_ptr.i.i184 = getelementptr i32, ptr %offset_tbl.i.i179, i64 %hash.i.i.i183
  %offset.i.i185 = load i32, ptr %offset_ptr.i.i184, align 4
  %87 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %88 = insertvalue { ptr, ptr, ptr, i32 } %87, ptr %85, 1
  %89 = insertvalue { ptr, ptr, ptr, i32 } %88, ptr %86, 2
  %90 = insertvalue { ptr, ptr, ptr, i32 } %89, i32 %offset.i.i185, 3
  %91 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %92 = load ptr, ptr %28, align 8
  %93 = call ptr %92(ptr %.fca.1.extract47)
  %94 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %95 = load ptr, ptr %32, align 8
  %96 = call ptr %95(ptr %.fca.1.extract47)
  %97 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %6)
  %98 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract)
  %99 = sext i32 %offset.i.i185 to i64
  %100 = getelementptr ptr, ptr %.fca.0.extract, i64 %99
  %101 = getelementptr i8, ptr %100, i64 64
  %102 = load ptr, ptr %101, align 8
  %103 = call ptr %102({ ptr, ptr, ptr, i32 } %90, ptr nonnull %6)
  %104 = call i32 %103({ ptr, ptr, ptr, i32 } %90, { ptr, ptr, ptr, i32 } %90, ptr nonnull %6)
  %105 = icmp eq i32 %104, %42
  br i1 %105, label %106, label %.critedge

106:                                              ; preds = %84
  %107 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %108 = load ptr, ptr %28, align 8
  %109 = call ptr %108(ptr %.fca.1.extract47)
  %110 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %111 = load ptr, ptr %32, align 8
  %112 = call ptr %111(ptr %.fca.1.extract47)
  %113 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %6)
  %114 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract)
  %115 = getelementptr i8, ptr %100, i64 48
  %116 = load ptr, ptr %115, align 8
  %117 = call ptr %116({ ptr, ptr, ptr, i32 } %90, ptr nonnull %6)
  %118 = call { ptr, i160 } %117({ ptr, ptr, ptr, i32 } %90, { ptr, ptr, ptr, i32 } %90, ptr nonnull %6)
  %119 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %120 = getelementptr i8, ptr %28, i64 56
  %121 = load ptr, ptr %120, align 8
  %122 = load ptr, ptr %121, align 8
  %123 = call { ptr } %122(ptr %.fca.1.extract47)
  %.fca.0.extract135 = extractvalue { ptr } %123, 0
  %124 = call i1 %.fca.0.extract135({ ptr, i160 } %118, { ptr, i160 } %3)
  br i1 %124, label %.thread525, label %.critedge

.thread525:                                       ; preds = %106
  %125 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %126 = load ptr, ptr %28, align 8
  %127 = call ptr %126(ptr %.fca.1.extract47)
  %128 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %129 = load ptr, ptr %32, align 8
  %130 = call ptr %129(ptr %.fca.1.extract47)
  %131 = load ptr, ptr %127, align 8
  %132 = getelementptr i8, ptr %131, i64 48
  %133 = load ptr, ptr %132, align 8
  %134 = call { i64, i64 } %133(ptr nonnull %127)
  %135 = extractvalue { i64, i64 } %134, 0
  %136 = extractvalue { i64, i64 } %134, 1
  %137 = urem i64 20, %136
  %138 = icmp eq i64 %137, 0
  %139 = sub i64 %136, %137
  %140 = select i1 %138, i64 0, i64 %139
  %141 = add i64 %135, 20
  %142 = add i64 %141, %140
  %143 = load ptr, ptr %130, align 8
  %144 = getelementptr i8, ptr %143, i64 48
  %145 = load ptr, ptr %144, align 8
  %146 = call { i64, i64 } %145(ptr nonnull %130)
  %147 = extractvalue { i64, i64 } %146, 0
  %148 = extractvalue { i64, i64 } %146, 1
  %149 = call i64 @llvm.umax.i64(i64 %136, i64 %148)
  %150 = call i64 @llvm.umax.i64(i64 %149, i64 8)
  %151 = urem i64 %142, %148
  %152 = icmp eq i64 %151, 0
  %153 = sub i64 %148, %151
  %154 = select i1 %152, i64 0, i64 %153
  %155 = add i64 %147, %142
  %156 = add i64 %155, %154
  %157 = urem i64 %156, %150
  %158 = icmp eq i64 %157, 0
  %159 = sub i64 %150, %157
  %160 = select i1 %158, i64 0, i64 %159
  %161 = add i64 %160, %156
  %result.i = call noalias ptr @bump_malloc_inner(i64 noundef %161, ptr nonnull @current_ptr) #29
  store ptr %127, ptr %result.i, align 8
  %162 = getelementptr i8, ptr %result.i, i64 8
  store ptr %130, ptr %162, align 8
  %163 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i)
  %164 = getelementptr inbounds i8, ptr %7, i64 8
  %165 = getelementptr inbounds i8, ptr %7, i64 24
  store ptr @Entry, ptr %7, align 8
  store ptr %result.i, ptr %164, align 8
  store i32 9, ptr %165, align 8
  %166 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %7)
  %167 = getelementptr inbounds i8, ptr %7, i64 16
  %168 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %169 = load ptr, ptr %28, align 8
  %170 = call ptr %169(ptr %.fca.1.extract47)
  %171 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %172 = load ptr, ptr %32, align 8
  %173 = call ptr %172(ptr %.fca.1.extract47)
  %174 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %175 = load ptr, ptr %result.i, align 8
  %176 = load ptr, ptr %175, align 8
  %177 = getelementptr i8, ptr %176, i64 48
  %178 = load ptr, ptr %177, align 8
  %179 = call { i64, i64 } %178(ptr nonnull %175)
  %180 = extractvalue { i64, i64 } %179, 1
  %181 = urem i64 20, %180
  %182 = icmp eq i64 %181, 0
  %reass.sub564 = sub i64 %180, %181
  %183 = add i64 %reass.sub564, 20
  %184 = select i1 %182, i64 20, i64 %183
  %185 = getelementptr i8, ptr %result.i, i64 %184
  %186 = load ptr, ptr %result.i, align 8
  %187 = load ptr, ptr %186, align 8
  %188 = getelementptr i8, ptr %187, i64 64
  %189 = load ptr, ptr %188, align 8
  call void %189({ ptr, i160 } %3, ptr nonnull %186, ptr %185)
  %190 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %191 = load ptr, ptr %result.i, align 8
  %192 = load ptr, ptr %191, align 8
  %193 = getelementptr i8, ptr %192, i64 48
  %194 = load ptr, ptr %193, align 8
  %195 = call { i64, i64 } %194(ptr nonnull %191)
  %196 = extractvalue { i64, i64 } %195, 0
  %197 = extractvalue { i64, i64 } %195, 1
  %198 = urem i64 20, %197
  %199 = icmp eq i64 %198, 0
  %200 = sub i64 %197, %198
  %201 = select i1 %199, i64 0, i64 %200
  %202 = add i64 %196, 20
  %203 = add i64 %202, %201
  %204 = load ptr, ptr %162, align 8
  %205 = load ptr, ptr %204, align 8
  %206 = getelementptr i8, ptr %205, i64 48
  %207 = load ptr, ptr %206, align 8
  %208 = call { i64, i64 } %207(ptr nonnull %204)
  %209 = extractvalue { i64, i64 } %208, 1
  %210 = urem i64 %203, %209
  %211 = icmp eq i64 %210, 0
  %212 = sub i64 %209, %210
  %213 = select i1 %211, i64 0, i64 %212
  %214 = getelementptr i8, ptr %result.i, i64 %203
  %215 = getelementptr i8, ptr %214, i64 %213
  %216 = load ptr, ptr %162, align 8
  %217 = load ptr, ptr %216, align 8
  %218 = getelementptr i8, ptr %217, i64 64
  %219 = load ptr, ptr %218, align 8
  call void %219({ ptr, i160 } %4, ptr nonnull %216, ptr %215)
  %220 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %221 = getelementptr i8, ptr %result.i, i64 16
  store i32 %42, ptr %221, align 4
  %222 = load ptr, ptr %7, align 8
  %223 = load ptr, ptr %164, align 8
  %224 = load ptr, ptr %167, align 8
  %hash_coef_ptr.i.i188 = getelementptr i8, ptr %222, i64 8
  %tbl_size_ptr.i.i189 = getelementptr i8, ptr %222, i64 16
  %offset_tbl_ptr.i.i190 = getelementptr i8, ptr %222, i64 40
  %hash_coef.i.i191 = load i64, ptr %hash_coef_ptr.i.i188, align 4
  %tbl_size.i.i192 = load i64, ptr %tbl_size_ptr.i.i189, align 4
  %offset_tbl.i.i193 = load ptr, ptr %offset_tbl_ptr.i.i190, align 8
  %product.i.i.i194 = mul i64 %hash_coef.i.i191, 4015701072841558310
  %shifted.i.i.i195 = lshr i64 %product.i.i.i194, 32
  %xored.i.i.i196 = xor i64 %shifted.i.i.i195, %product.i.i.i194
  %hash.i.i.i197 = and i64 %xored.i.i.i196, %tbl_size.i.i192
  %offset_ptr.i.i198 = getelementptr i32, ptr %offset_tbl.i.i193, i64 %hash.i.i.i197
  %offset.i.i199 = load i32, ptr %offset_ptr.i.i198, align 4
  %225 = insertvalue { ptr, i160 } undef, ptr %222, 0
  %226 = ptrtoint ptr %223 to i64
  %227 = ptrtoint ptr %224 to i64
  %.sroa.3130.0.insert.ext = zext i32 %offset.i.i199 to i160
  %.sroa.3130.0.insert.shift = shl nuw i160 %.sroa.3130.0.insert.ext, 128
  %.sroa.2129.0.insert.ext = zext i64 %227 to i160
  %.sroa.2129.0.insert.shift = shl nuw nsw i160 %.sroa.2129.0.insert.ext, 64
  %.sroa.2129.0.insert.insert = or disjoint i160 %.sroa.3130.0.insert.shift, %.sroa.2129.0.insert.shift
  %.sroa.0128.0.insert.ext = zext i64 %226 to i160
  %.sroa.0128.0.insert.insert = or disjoint i160 %.sroa.2129.0.insert.insert, %.sroa.0128.0.insert.ext
  %228 = insertvalue { ptr, i160 } %225, i160 %.sroa.0128.0.insert.insert, 1
  %229 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %230 = load ptr, ptr %58, align 8
  %231 = load ptr, ptr %230, align 8
  %232 = call { ptr, ptr, ptr, i32 } %231(ptr %.fca.1.extract47)
  %.fca.0.extract119 = extractvalue { ptr, ptr, ptr, i32 } %232, 0
  %.fca.1.extract121 = extractvalue { ptr, ptr, ptr, i32 } %232, 1
  %.fca.2.extract123 = extractvalue { ptr, ptr, ptr, i32 } %232, 2
  %.fca.3.extract125 = extractvalue { ptr, ptr, ptr, i32 } %232, 3
  %hash_coef_ptr.i.i202 = getelementptr i8, ptr %.fca.0.extract119, i64 8
  %tbl_size_ptr.i.i203 = getelementptr i8, ptr %.fca.0.extract119, i64 16
  %offset_tbl_ptr.i.i204 = getelementptr i8, ptr %.fca.0.extract119, i64 40
  %hash_coef.i.i205 = load i64, ptr %hash_coef_ptr.i.i202, align 4
  %tbl_size.i.i206 = load i64, ptr %tbl_size_ptr.i.i203, align 4
  %offset_tbl.i.i207 = load ptr, ptr %offset_tbl_ptr.i.i204, align 8
  %product.i.i.i208 = mul i64 %hash_coef.i.i205, -5261542750394134544
  %shifted.i.i.i209 = lshr i64 %product.i.i.i208, 32
  %xored.i.i.i210 = xor i64 %shifted.i.i.i209, %product.i.i.i208
  %hash.i.i.i211 = and i64 %xored.i.i.i210, %tbl_size.i.i206
  %offset_ptr.i.i212 = getelementptr i32, ptr %offset_tbl.i.i207, i64 %hash.i.i.i211
  %offset.i.i213 = load i32, ptr %offset_ptr.i.i212, align 4
  %eq.i216 = icmp eq i32 %.fca.3.extract125, %offset.i.i213
  call void @llvm.assume(i1 %eq.i216) #30
  %233 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract119, 0
  %234 = insertvalue { ptr, ptr, ptr, i32 } %233, ptr %.fca.1.extract121, 1
  %235 = insertvalue { ptr, ptr, ptr, i32 } %234, ptr %.fca.2.extract123, 2
  %236 = insertvalue { ptr, ptr, ptr, i32 } %235, i32 %.fca.3.extract125, 3
  %237 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %238 = load ptr, ptr %28, align 8
  %239 = call ptr %238(ptr %.fca.1.extract47)
  %240 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %241 = load ptr, ptr %32, align 8
  %242 = call ptr %241(ptr %.fca.1.extract47)
  %result.i217 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %243 = getelementptr i8, ptr %result.i217, i64 16
  store ptr %242, ptr %243, align 8
  %244 = getelementptr i8, ptr %result.i217, i64 8
  store ptr %239, ptr %244, align 8
  %245 = getelementptr i8, ptr %result.i217, i64 24
  store ptr null, ptr %245, align 8
  %246 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i217)
  store ptr @Entry, ptr %result.i217, align 8
  store ptr @_parameterization_Ptri32, ptr %8, align 8
  %247 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr %result.i217, ptr %247, align 8
  %248 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %8)
  %249 = call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract119)
  %250 = sext i32 %.fca.3.extract125 to i64
  %251 = getelementptr ptr, ptr %.fca.0.extract119, i64 %250
  %252 = getelementptr i8, ptr %251, i64 128
  %253 = load ptr, ptr %252, align 8
  store ptr @i32_typ, ptr %9, align 8
  %254 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %222, ptr %254, align 8
  %255 = call ptr %253({ ptr, ptr, ptr, i32 } %236, ptr nonnull %9)
  call void %255({ ptr, ptr, ptr, i32 } %236, { ptr, ptr, ptr, i32 } %236, ptr nonnull %8, i32 %56, { ptr, i160 } %228)
  br label %.thread529

.critedge:                                        ; preds = %106, %84, %5
  %256 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %257 = load ptr, ptr %28, align 8
  %258 = call ptr %257(ptr %.fca.1.extract47)
  %259 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %260 = load ptr, ptr %32, align 8
  %261 = call ptr %260(ptr %.fca.1.extract47)
  store ptr @_parameterization_Ptri32, ptr %10, align 8
  %262 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %10)
  %263 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %264 = getelementptr i8, ptr %28, i64 88
  %265 = load ptr, ptr %264, align 8
  store ptr @i32_typ, ptr %11, align 8
  %266 = call ptr %265({ ptr, ptr, ptr, i32 } %25, ptr nonnull %11)
  %267 = call i32 %266({ ptr, ptr, ptr, i32 } %25, { ptr, ptr, ptr, i32 } %25, ptr nonnull %10, i32 %42)
  %268 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %269 = load ptr, ptr %28, align 8
  %270 = call ptr %269(ptr %.fca.1.extract47)
  %271 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %272 = load ptr, ptr %32, align 8
  %273 = call ptr %272(ptr %.fca.1.extract47)
  store ptr @_parameterization_Ptri32, ptr %12, align 8
  %274 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %12)
  %275 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %276 = getelementptr i8, ptr %28, i64 104
  %277 = load ptr, ptr %276, align 8
  store ptr @i32_typ, ptr %13, align 8
  %278 = call ptr %277({ ptr, ptr, ptr, i32 } %25, ptr nonnull %13)
  %279 = call i32 %278({ ptr, ptr, ptr, i32 } %25, { ptr, ptr, ptr, i32 } %25, ptr nonnull %12, i32 %267)
  %280 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %281 = getelementptr i8, ptr %28, i64 32
  %282 = load ptr, ptr %281, align 8
  %283 = load ptr, ptr %282, align 8
  %284 = call { ptr, ptr, ptr, i32 } %283(ptr %.fca.1.extract47)
  %.fca.0.extract111 = extractvalue { ptr, ptr, ptr, i32 } %284, 0
  %.fca.1.extract113 = extractvalue { ptr, ptr, ptr, i32 } %284, 1
  %.fca.2.extract115 = extractvalue { ptr, ptr, ptr, i32 } %284, 2
  %.fca.3.extract117 = extractvalue { ptr, ptr, ptr, i32 } %284, 3
  %hash_coef_ptr.i.i219 = getelementptr i8, ptr %.fca.0.extract111, i64 8
  %tbl_size_ptr.i.i220 = getelementptr i8, ptr %.fca.0.extract111, i64 16
  %offset_tbl_ptr.i.i221 = getelementptr i8, ptr %.fca.0.extract111, i64 40
  %hash_coef.i.i222 = load i64, ptr %hash_coef_ptr.i.i219, align 4
  %tbl_size.i.i223 = load i64, ptr %tbl_size_ptr.i.i220, align 4
  %offset_tbl.i.i224 = load ptr, ptr %offset_tbl_ptr.i.i221, align 8
  %product.i.i.i225 = mul i64 %hash_coef.i.i222, -5261542750394134544
  %shifted.i.i.i226 = lshr i64 %product.i.i.i225, 32
  %xored.i.i.i227 = xor i64 %shifted.i.i.i226, %product.i.i.i225
  %hash.i.i.i228 = and i64 %xored.i.i.i227, %tbl_size.i.i223
  %offset_ptr.i.i229 = getelementptr i32, ptr %offset_tbl.i.i224, i64 %hash.i.i.i228
  %offset.i.i230 = load i32, ptr %offset_ptr.i.i229, align 4
  %eq.i233 = icmp eq i32 %.fca.3.extract117, %offset.i.i230
  call void @llvm.assume(i1 %eq.i233) #30
  %285 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract111, 0
  %286 = insertvalue { ptr, ptr, ptr, i32 } %285, ptr %.fca.1.extract113, 1
  %287 = insertvalue { ptr, ptr, ptr, i32 } %286, ptr %.fca.2.extract115, 2
  %288 = insertvalue { ptr, ptr, ptr, i32 } %287, i32 %.fca.3.extract117, 3
  %289 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %290 = load ptr, ptr %28, align 8
  %291 = call ptr %290(ptr %.fca.1.extract47)
  %292 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %293 = load ptr, ptr %32, align 8
  %294 = call ptr %293(ptr %.fca.1.extract47)
  store ptr @_parameterization_Ptri32, ptr %14, align 8
  %295 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %14)
  %296 = call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract111)
  %297 = sext i32 %.fca.3.extract117 to i64
  %298 = getelementptr ptr, ptr %.fca.0.extract111, i64 %297
  %299 = getelementptr i8, ptr %298, i64 120
  %300 = load ptr, ptr %299, align 8
  store ptr @i32_typ, ptr %15, align 8
  %301 = call ptr %300({ ptr, ptr, ptr, i32 } %288, ptr nonnull %15)
  %302 = call { ptr, i160 } %301({ ptr, ptr, ptr, i32 } %288, { ptr, ptr, ptr, i32 } %288, ptr nonnull %14, i32 %279)
  %.fca.0.extract104 = extractvalue { ptr, i160 } %302, 0
  %303 = icmp ne ptr %.fca.0.extract104, @nil_typ
  %304 = icmp ne ptr %.fca.0.extract104, null
  %.not153 = and i1 %303, %304
  br i1 %.not153, label %305, label %.critedge158

305:                                              ; preds = %.critedge
  %.fca.1.extract106 = extractvalue { ptr, i160 } %302, 1
  %.sroa.4.8.extract.trunc = trunc i160 %.fca.1.extract106 to i64
  %306 = inttoptr i64 %.sroa.4.8.extract.trunc to ptr
  %.sroa.7506.8.extract.shift = lshr i160 %.fca.1.extract106, 64
  %.sroa.7506.8.extract.trunc = trunc i160 %.sroa.7506.8.extract.shift to i64
  %307 = inttoptr i64 %.sroa.7506.8.extract.trunc to ptr
  %hash_coef_ptr.i.i235 = getelementptr i8, ptr %.fca.0.extract104, i64 8
  %tbl_size_ptr.i.i236 = getelementptr i8, ptr %.fca.0.extract104, i64 16
  %offset_tbl_ptr.i.i237 = getelementptr i8, ptr %.fca.0.extract104, i64 40
  %hash_coef.i.i238 = load i64, ptr %hash_coef_ptr.i.i235, align 4
  %tbl_size.i.i239 = load i64, ptr %tbl_size_ptr.i.i236, align 4
  %offset_tbl.i.i240 = load ptr, ptr %offset_tbl_ptr.i.i237, align 8
  %product.i.i.i241 = mul i64 %hash_coef.i.i238, 4015701072841558310
  %shifted.i.i.i242 = lshr i64 %product.i.i.i241, 32
  %xored.i.i.i243 = xor i64 %shifted.i.i.i242, %product.i.i.i241
  %hash.i.i.i244 = and i64 %xored.i.i.i243, %tbl_size.i.i239
  %offset_ptr.i.i245 = getelementptr i32, ptr %offset_tbl.i.i240, i64 %hash.i.i.i244
  %offset.i.i246 = load i32, ptr %offset_ptr.i.i245, align 4
  %308 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract104, 0
  %309 = insertvalue { ptr, ptr, ptr, i32 } %308, ptr %306, 1
  %310 = insertvalue { ptr, ptr, ptr, i32 } %309, ptr %307, 2
  %311 = insertvalue { ptr, ptr, ptr, i32 } %310, i32 %offset.i.i246, 3
  %312 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %313 = load ptr, ptr %28, align 8
  %314 = call ptr %313(ptr %.fca.1.extract47)
  %315 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %316 = load ptr, ptr %32, align 8
  %317 = call ptr %316(ptr %.fca.1.extract47)
  %318 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %6)
  %319 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract104)
  %320 = sext i32 %offset.i.i246 to i64
  %321 = getelementptr ptr, ptr %.fca.0.extract104, i64 %320
  %322 = getelementptr i8, ptr %321, i64 64
  %323 = load ptr, ptr %322, align 8
  %324 = call ptr %323({ ptr, ptr, ptr, i32 } %311, ptr nonnull %6)
  %325 = call i32 %324({ ptr, ptr, ptr, i32 } %311, { ptr, ptr, ptr, i32 } %311, ptr nonnull %6)
  %326 = icmp eq i32 %325, %42
  br i1 %326, label %327, label %.critedge158

327:                                              ; preds = %305
  %328 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %329 = load ptr, ptr %28, align 8
  %330 = call ptr %329(ptr %.fca.1.extract47)
  %331 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %332 = load ptr, ptr %32, align 8
  %333 = call ptr %332(ptr %.fca.1.extract47)
  %334 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %6)
  %335 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract104)
  %336 = getelementptr i8, ptr %321, i64 48
  %337 = load ptr, ptr %336, align 8
  %338 = call ptr %337({ ptr, ptr, ptr, i32 } %311, ptr nonnull %6)
  %339 = call { ptr, i160 } %338({ ptr, ptr, ptr, i32 } %311, { ptr, ptr, ptr, i32 } %311, ptr nonnull %6)
  %340 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %341 = getelementptr i8, ptr %28, i64 56
  %342 = load ptr, ptr %341, align 8
  %343 = load ptr, ptr %342, align 8
  %344 = call { ptr } %343(ptr %.fca.1.extract47)
  %.fca.0.extract89 = extractvalue { ptr } %344, 0
  %345 = call i1 %.fca.0.extract89({ ptr, i160 } %339, { ptr, i160 } %3)
  br i1 %345, label %.thread528, label %.critedge158

.thread528:                                       ; preds = %327
  %346 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %347 = load ptr, ptr %28, align 8
  %348 = call ptr %347(ptr %.fca.1.extract47)
  %349 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %350 = load ptr, ptr %32, align 8
  %351 = call ptr %350(ptr %.fca.1.extract47)
  %352 = load ptr, ptr %348, align 8
  %353 = getelementptr i8, ptr %352, i64 48
  %354 = load ptr, ptr %353, align 8
  %355 = call { i64, i64 } %354(ptr nonnull %348)
  %356 = extractvalue { i64, i64 } %355, 0
  %357 = extractvalue { i64, i64 } %355, 1
  %358 = urem i64 20, %357
  %359 = icmp eq i64 %358, 0
  %360 = sub i64 %357, %358
  %361 = select i1 %359, i64 0, i64 %360
  %362 = add i64 %356, 20
  %363 = add i64 %362, %361
  %364 = load ptr, ptr %351, align 8
  %365 = getelementptr i8, ptr %364, i64 48
  %366 = load ptr, ptr %365, align 8
  %367 = call { i64, i64 } %366(ptr nonnull %351)
  %368 = extractvalue { i64, i64 } %367, 0
  %369 = extractvalue { i64, i64 } %367, 1
  %370 = call i64 @llvm.umax.i64(i64 %357, i64 %369)
  %371 = call i64 @llvm.umax.i64(i64 %370, i64 8)
  %372 = urem i64 %363, %369
  %373 = icmp eq i64 %372, 0
  %374 = sub i64 %369, %372
  %375 = select i1 %373, i64 0, i64 %374
  %376 = add i64 %368, %363
  %377 = add i64 %376, %375
  %378 = urem i64 %377, %371
  %379 = icmp eq i64 %378, 0
  %380 = sub i64 %371, %378
  %381 = select i1 %379, i64 0, i64 %380
  %382 = add i64 %381, %377
  %result.i248 = call noalias ptr @bump_malloc_inner(i64 noundef %382, ptr nonnull @current_ptr) #29
  store ptr %348, ptr %result.i248, align 8
  %383 = getelementptr i8, ptr %result.i248, i64 8
  store ptr %351, ptr %383, align 8
  %384 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i248)
  %385 = getelementptr inbounds i8, ptr %16, i64 8
  %386 = getelementptr inbounds i8, ptr %16, i64 24
  store ptr @Entry, ptr %16, align 8
  store ptr %result.i248, ptr %385, align 8
  store i32 9, ptr %386, align 8
  %387 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %16)
  %388 = getelementptr inbounds i8, ptr %16, i64 16
  %389 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %390 = load ptr, ptr %28, align 8
  %391 = call ptr %390(ptr %.fca.1.extract47)
  %392 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %393 = load ptr, ptr %32, align 8
  %394 = call ptr %393(ptr %.fca.1.extract47)
  %395 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %396 = load ptr, ptr %result.i248, align 8
  %397 = load ptr, ptr %396, align 8
  %398 = getelementptr i8, ptr %397, i64 48
  %399 = load ptr, ptr %398, align 8
  %400 = call { i64, i64 } %399(ptr nonnull %396)
  %401 = extractvalue { i64, i64 } %400, 1
  %402 = urem i64 20, %401
  %403 = icmp eq i64 %402, 0
  %reass.sub563 = sub i64 %401, %402
  %404 = add i64 %reass.sub563, 20
  %405 = select i1 %403, i64 20, i64 %404
  %406 = getelementptr i8, ptr %result.i248, i64 %405
  %407 = load ptr, ptr %result.i248, align 8
  %408 = load ptr, ptr %407, align 8
  %409 = getelementptr i8, ptr %408, i64 64
  %410 = load ptr, ptr %409, align 8
  call void %410({ ptr, i160 } %3, ptr nonnull %407, ptr %406)
  %411 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %412 = load ptr, ptr %result.i248, align 8
  %413 = load ptr, ptr %412, align 8
  %414 = getelementptr i8, ptr %413, i64 48
  %415 = load ptr, ptr %414, align 8
  %416 = call { i64, i64 } %415(ptr nonnull %412)
  %417 = extractvalue { i64, i64 } %416, 0
  %418 = extractvalue { i64, i64 } %416, 1
  %419 = urem i64 20, %418
  %420 = icmp eq i64 %419, 0
  %421 = sub i64 %418, %419
  %422 = select i1 %420, i64 0, i64 %421
  %423 = add i64 %417, 20
  %424 = add i64 %423, %422
  %425 = load ptr, ptr %383, align 8
  %426 = load ptr, ptr %425, align 8
  %427 = getelementptr i8, ptr %426, i64 48
  %428 = load ptr, ptr %427, align 8
  %429 = call { i64, i64 } %428(ptr nonnull %425)
  %430 = extractvalue { i64, i64 } %429, 1
  %431 = urem i64 %424, %430
  %432 = icmp eq i64 %431, 0
  %433 = sub i64 %430, %431
  %434 = select i1 %432, i64 0, i64 %433
  %435 = getelementptr i8, ptr %result.i248, i64 %424
  %436 = getelementptr i8, ptr %435, i64 %434
  %437 = load ptr, ptr %383, align 8
  %438 = load ptr, ptr %437, align 8
  %439 = getelementptr i8, ptr %438, i64 64
  %440 = load ptr, ptr %439, align 8
  call void %440({ ptr, i160 } %4, ptr nonnull %437, ptr %436)
  %441 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %442 = getelementptr i8, ptr %result.i248, i64 16
  store i32 %42, ptr %442, align 4
  %443 = load ptr, ptr %16, align 8
  %444 = load ptr, ptr %385, align 8
  %445 = load ptr, ptr %388, align 8
  %hash_coef_ptr.i.i250 = getelementptr i8, ptr %443, i64 8
  %tbl_size_ptr.i.i251 = getelementptr i8, ptr %443, i64 16
  %offset_tbl_ptr.i.i252 = getelementptr i8, ptr %443, i64 40
  %hash_coef.i.i253 = load i64, ptr %hash_coef_ptr.i.i250, align 4
  %tbl_size.i.i254 = load i64, ptr %tbl_size_ptr.i.i251, align 4
  %offset_tbl.i.i255 = load ptr, ptr %offset_tbl_ptr.i.i252, align 8
  %product.i.i.i256 = mul i64 %hash_coef.i.i253, 4015701072841558310
  %shifted.i.i.i257 = lshr i64 %product.i.i.i256, 32
  %xored.i.i.i258 = xor i64 %shifted.i.i.i257, %product.i.i.i256
  %hash.i.i.i259 = and i64 %xored.i.i.i258, %tbl_size.i.i254
  %offset_ptr.i.i260 = getelementptr i32, ptr %offset_tbl.i.i255, i64 %hash.i.i.i259
  %offset.i.i261 = load i32, ptr %offset_ptr.i.i260, align 4
  %446 = insertvalue { ptr, i160 } undef, ptr %443, 0
  %447 = ptrtoint ptr %444 to i64
  %448 = ptrtoint ptr %445 to i64
  %.sroa.3.0.insert.ext = zext i32 %offset.i.i261 to i160
  %.sroa.3.0.insert.shift = shl nuw i160 %.sroa.3.0.insert.ext, 128
  %.sroa.284.0.insert.ext = zext i64 %448 to i160
  %.sroa.284.0.insert.shift = shl nuw nsw i160 %.sroa.284.0.insert.ext, 64
  %.sroa.284.0.insert.insert = or disjoint i160 %.sroa.3.0.insert.shift, %.sroa.284.0.insert.shift
  %.sroa.083.0.insert.ext = zext i64 %447 to i160
  %.sroa.083.0.insert.insert = or disjoint i160 %.sroa.284.0.insert.insert, %.sroa.083.0.insert.ext
  %449 = insertvalue { ptr, i160 } %446, i160 %.sroa.083.0.insert.insert, 1
  %450 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %451 = load ptr, ptr %281, align 8
  %452 = load ptr, ptr %451, align 8
  %453 = call { ptr, ptr, ptr, i32 } %452(ptr %.fca.1.extract47)
  %.fca.0.extract74 = extractvalue { ptr, ptr, ptr, i32 } %453, 0
  %.fca.1.extract76 = extractvalue { ptr, ptr, ptr, i32 } %453, 1
  %.fca.2.extract78 = extractvalue { ptr, ptr, ptr, i32 } %453, 2
  %.fca.3.extract80 = extractvalue { ptr, ptr, ptr, i32 } %453, 3
  %hash_coef_ptr.i.i264 = getelementptr i8, ptr %.fca.0.extract74, i64 8
  %tbl_size_ptr.i.i265 = getelementptr i8, ptr %.fca.0.extract74, i64 16
  %offset_tbl_ptr.i.i266 = getelementptr i8, ptr %.fca.0.extract74, i64 40
  %hash_coef.i.i267 = load i64, ptr %hash_coef_ptr.i.i264, align 4
  %tbl_size.i.i268 = load i64, ptr %tbl_size_ptr.i.i265, align 4
  %offset_tbl.i.i269 = load ptr, ptr %offset_tbl_ptr.i.i266, align 8
  %product.i.i.i270 = mul i64 %hash_coef.i.i267, -5261542750394134544
  %shifted.i.i.i271 = lshr i64 %product.i.i.i270, 32
  %xored.i.i.i272 = xor i64 %shifted.i.i.i271, %product.i.i.i270
  %hash.i.i.i273 = and i64 %xored.i.i.i272, %tbl_size.i.i268
  %offset_ptr.i.i274 = getelementptr i32, ptr %offset_tbl.i.i269, i64 %hash.i.i.i273
  %offset.i.i275 = load i32, ptr %offset_ptr.i.i274, align 4
  %eq.i278 = icmp eq i32 %.fca.3.extract80, %offset.i.i275
  call void @llvm.assume(i1 %eq.i278) #30
  %454 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract74, 0
  %455 = insertvalue { ptr, ptr, ptr, i32 } %454, ptr %.fca.1.extract76, 1
  %456 = insertvalue { ptr, ptr, ptr, i32 } %455, ptr %.fca.2.extract78, 2
  %457 = insertvalue { ptr, ptr, ptr, i32 } %456, i32 %.fca.3.extract80, 3
  %458 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %459 = load ptr, ptr %28, align 8
  %460 = call ptr %459(ptr %.fca.1.extract47)
  %461 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %462 = load ptr, ptr %32, align 8
  %463 = call ptr %462(ptr %.fca.1.extract47)
  %result.i279 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %464 = getelementptr i8, ptr %result.i279, i64 16
  store ptr %463, ptr %464, align 8
  %465 = getelementptr i8, ptr %result.i279, i64 8
  store ptr %460, ptr %465, align 8
  %466 = getelementptr i8, ptr %result.i279, i64 24
  store ptr null, ptr %466, align 8
  %467 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i279)
  store ptr @Entry, ptr %result.i279, align 8
  store ptr @_parameterization_Ptri32, ptr %17, align 8
  %468 = getelementptr inbounds i8, ptr %17, i64 8
  store ptr %result.i279, ptr %468, align 8
  %469 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %17)
  %470 = call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract74)
  %471 = sext i32 %.fca.3.extract80 to i64
  %472 = getelementptr ptr, ptr %.fca.0.extract74, i64 %471
  %473 = getelementptr i8, ptr %472, i64 128
  %474 = load ptr, ptr %473, align 8
  store ptr @i32_typ, ptr %18, align 8
  %475 = getelementptr inbounds i8, ptr %18, i64 8
  store ptr %443, ptr %475, align 8
  %476 = call ptr %474({ ptr, ptr, ptr, i32 } %457, ptr nonnull %18)
  call void %476({ ptr, ptr, ptr, i32 } %457, { ptr, ptr, ptr, i32 } %457, ptr nonnull %17, i32 %279, { ptr, i160 } %449)
  br label %.thread529

.critedge158:                                     ; preds = %327, %305, %.critedge
  %477 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %478 = load ptr, ptr %58, align 8
  %479 = load ptr, ptr %478, align 8
  %480 = call { ptr, ptr, ptr, i32 } %479(ptr %.fca.1.extract47)
  %.fca.0.extract66 = extractvalue { ptr, ptr, ptr, i32 } %480, 0
  %.fca.1.extract68 = extractvalue { ptr, ptr, ptr, i32 } %480, 1
  %.fca.2.extract70 = extractvalue { ptr, ptr, ptr, i32 } %480, 2
  %.fca.3.extract72 = extractvalue { ptr, ptr, ptr, i32 } %480, 3
  %hash_coef_ptr.i.i281 = getelementptr i8, ptr %.fca.0.extract66, i64 8
  %tbl_size_ptr.i.i282 = getelementptr i8, ptr %.fca.0.extract66, i64 16
  %offset_tbl_ptr.i.i283 = getelementptr i8, ptr %.fca.0.extract66, i64 40
  %hash_coef.i.i284 = load i64, ptr %hash_coef_ptr.i.i281, align 4
  %tbl_size.i.i285 = load i64, ptr %tbl_size_ptr.i.i282, align 4
  %offset_tbl.i.i286 = load ptr, ptr %offset_tbl_ptr.i.i283, align 8
  %product.i.i.i287 = mul i64 %hash_coef.i.i284, -5261542750394134544
  %shifted.i.i.i288 = lshr i64 %product.i.i.i287, 32
  %xored.i.i.i289 = xor i64 %shifted.i.i.i288, %product.i.i.i287
  %hash.i.i.i290 = and i64 %xored.i.i.i289, %tbl_size.i.i285
  %offset_ptr.i.i291 = getelementptr i32, ptr %offset_tbl.i.i286, i64 %hash.i.i.i290
  %offset.i.i292 = load i32, ptr %offset_ptr.i.i291, align 4
  %eq.i295 = icmp eq i32 %.fca.3.extract72, %offset.i.i292
  call void @llvm.assume(i1 %eq.i295) #30
  %481 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract66, 0
  %482 = insertvalue { ptr, ptr, ptr, i32 } %481, ptr %.fca.1.extract68, 1
  %483 = insertvalue { ptr, ptr, ptr, i32 } %482, ptr %.fca.2.extract70, 2
  %484 = insertvalue { ptr, ptr, ptr, i32 } %483, i32 %.fca.3.extract72, 3
  %485 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %486 = load ptr, ptr %28, align 8
  %487 = call ptr %486(ptr %.fca.1.extract47)
  %488 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %489 = load ptr, ptr %32, align 8
  %490 = call ptr %489(ptr %.fca.1.extract47)
  %491 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %6)
  %492 = call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract66)
  %493 = sext i32 %.fca.3.extract72 to i64
  %494 = getelementptr ptr, ptr %.fca.0.extract66, i64 %493
  %495 = getelementptr i8, ptr %494, i64 64
  %496 = load ptr, ptr %495, align 8
  %497 = call ptr %496({ ptr, ptr, ptr, i32 } %484, ptr nonnull %6)
  %498 = call i32 %497({ ptr, ptr, ptr, i32 } %484, { ptr, ptr, ptr, i32 } %484, ptr nonnull %6)
  %499 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %500 = getelementptr i8, ptr %28, i64 40
  %501 = load ptr, ptr %500, align 8
  %502 = load ptr, ptr %501, align 8
  %503 = call i32 %502(ptr %.fca.1.extract47)
  %.not = icmp slt i32 %503, %498
  br i1 %.not, label %._crit_edge2, label %504

504:                                              ; preds = %.critedge158
  %505 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %506 = load ptr, ptr %28, align 8
  %507 = call ptr %506(ptr %.fca.1.extract47)
  %508 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %509 = load ptr, ptr %32, align 8
  %510 = call ptr %509(ptr %.fca.1.extract47)
  %511 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %6)
  %512 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %513 = getelementptr i8, ptr %28, i64 128
  %514 = load ptr, ptr %513, align 8
  %515 = call ptr %514({ ptr, ptr, ptr, i32 } %25, ptr nonnull %6)
  call void %515({ ptr, ptr, ptr, i32 } %25, { ptr, ptr, ptr, i32 } %25, ptr nonnull %6)
  br label %._crit_edge2

._crit_edge2:                                     ; preds = %.critedge158, %504
  %516 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %517 = load ptr, ptr %28, align 8
  %518 = call ptr %517(ptr %.fca.1.extract47)
  %519 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %520 = load ptr, ptr %32, align 8
  %521 = call ptr %520(ptr %.fca.1.extract47)
  %522 = load ptr, ptr %518, align 8
  %523 = getelementptr i8, ptr %522, i64 48
  %524 = load ptr, ptr %523, align 8
  %525 = call { i64, i64 } %524(ptr nonnull %518)
  %526 = extractvalue { i64, i64 } %525, 0
  %527 = extractvalue { i64, i64 } %525, 1
  %528 = urem i64 20, %527
  %529 = icmp eq i64 %528, 0
  %530 = sub i64 %527, %528
  %531 = select i1 %529, i64 0, i64 %530
  %532 = add i64 %526, 20
  %533 = add i64 %532, %531
  %534 = load ptr, ptr %521, align 8
  %535 = getelementptr i8, ptr %534, i64 48
  %536 = load ptr, ptr %535, align 8
  %537 = call { i64, i64 } %536(ptr nonnull %521)
  %538 = extractvalue { i64, i64 } %537, 0
  %539 = extractvalue { i64, i64 } %537, 1
  %540 = call i64 @llvm.umax.i64(i64 %527, i64 %539)
  %541 = call i64 @llvm.umax.i64(i64 %540, i64 8)
  %542 = urem i64 %533, %539
  %543 = icmp eq i64 %542, 0
  %544 = sub i64 %539, %542
  %545 = select i1 %543, i64 0, i64 %544
  %546 = add i64 %538, %533
  %547 = add i64 %546, %545
  %548 = urem i64 %547, %541
  %549 = icmp eq i64 %548, 0
  %550 = sub i64 %541, %548
  %551 = select i1 %549, i64 0, i64 %550
  %552 = add i64 %551, %547
  %result.i296 = call noalias ptr @bump_malloc_inner(i64 noundef %552, ptr nonnull @current_ptr) #29
  store ptr %518, ptr %result.i296, align 8
  %553 = getelementptr i8, ptr %result.i296, i64 8
  store ptr %521, ptr %553, align 8
  %554 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i296)
  %555 = getelementptr inbounds i8, ptr %19, i64 8
  %556 = getelementptr inbounds i8, ptr %19, i64 24
  store ptr @Entry, ptr %19, align 8
  store ptr %result.i296, ptr %555, align 8
  store i32 9, ptr %556, align 8
  %557 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %19)
  %558 = getelementptr inbounds i8, ptr %19, i64 16
  %559 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %560 = load ptr, ptr %28, align 8
  %561 = call ptr %560(ptr %.fca.1.extract47)
  %562 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %563 = load ptr, ptr %32, align 8
  %564 = call ptr %563(ptr %.fca.1.extract47)
  %565 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %566 = load ptr, ptr %result.i296, align 8
  %567 = load ptr, ptr %566, align 8
  %568 = getelementptr i8, ptr %567, i64 48
  %569 = load ptr, ptr %568, align 8
  %570 = call { i64, i64 } %569(ptr nonnull %566)
  %571 = extractvalue { i64, i64 } %570, 1
  %572 = urem i64 20, %571
  %573 = icmp eq i64 %572, 0
  %reass.sub = sub i64 %571, %572
  %574 = add i64 %reass.sub, 20
  %575 = select i1 %573, i64 20, i64 %574
  %576 = getelementptr i8, ptr %result.i296, i64 %575
  %577 = load ptr, ptr %result.i296, align 8
  %578 = load ptr, ptr %577, align 8
  %579 = getelementptr i8, ptr %578, i64 64
  %580 = load ptr, ptr %579, align 8
  call void %580({ ptr, i160 } %3, ptr nonnull %577, ptr %576)
  %581 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %582 = load ptr, ptr %result.i296, align 8
  %583 = load ptr, ptr %582, align 8
  %584 = getelementptr i8, ptr %583, i64 48
  %585 = load ptr, ptr %584, align 8
  %586 = call { i64, i64 } %585(ptr nonnull %582)
  %587 = extractvalue { i64, i64 } %586, 0
  %588 = extractvalue { i64, i64 } %586, 1
  %589 = urem i64 20, %588
  %590 = icmp eq i64 %589, 0
  %591 = sub i64 %588, %589
  %592 = select i1 %590, i64 0, i64 %591
  %593 = add i64 %587, 20
  %594 = add i64 %593, %592
  %595 = load ptr, ptr %553, align 8
  %596 = load ptr, ptr %595, align 8
  %597 = getelementptr i8, ptr %596, i64 48
  %598 = load ptr, ptr %597, align 8
  %599 = call { i64, i64 } %598(ptr nonnull %595)
  %600 = extractvalue { i64, i64 } %599, 1
  %601 = urem i64 %594, %600
  %602 = icmp eq i64 %601, 0
  %603 = sub i64 %600, %601
  %604 = select i1 %602, i64 0, i64 %603
  %605 = getelementptr i8, ptr %result.i296, i64 %594
  %606 = getelementptr i8, ptr %605, i64 %604
  %607 = load ptr, ptr %553, align 8
  %608 = load ptr, ptr %607, align 8
  %609 = getelementptr i8, ptr %608, i64 64
  %610 = load ptr, ptr %609, align 8
  call void %610({ ptr, i160 } %4, ptr nonnull %607, ptr %606)
  %611 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %612 = getelementptr i8, ptr %result.i296, i64 16
  store i32 %42, ptr %612, align 4
  %613 = load ptr, ptr %19, align 8
  %614 = load ptr, ptr %555, align 8
  %615 = load ptr, ptr %558, align 8
  %hash_coef_ptr.i.i298 = getelementptr i8, ptr %613, i64 8
  %tbl_size_ptr.i.i299 = getelementptr i8, ptr %613, i64 16
  %offset_tbl_ptr.i.i300 = getelementptr i8, ptr %613, i64 40
  %hash_coef.i.i301 = load i64, ptr %hash_coef_ptr.i.i298, align 4
  %tbl_size.i.i302 = load i64, ptr %tbl_size_ptr.i.i299, align 4
  %offset_tbl.i.i303 = load ptr, ptr %offset_tbl_ptr.i.i300, align 8
  %product.i.i.i304 = mul i64 %hash_coef.i.i301, 4015701072841558310
  %shifted.i.i.i305 = lshr i64 %product.i.i.i304, 32
  %xored.i.i.i306 = xor i64 %shifted.i.i.i305, %product.i.i.i304
  %hash.i.i.i307 = and i64 %xored.i.i.i306, %tbl_size.i.i302
  %offset_ptr.i.i308 = getelementptr i32, ptr %offset_tbl.i.i303, i64 %hash.i.i.i307
  %offset.i.i309 = load i32, ptr %offset_ptr.i.i308, align 4
  %616 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %613, 0
  %617 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %618 = getelementptr i8, ptr %28, i64 112
  %619 = getelementptr i8, ptr %28, i64 128
  %620 = insertvalue { ptr, ptr, ptr, i32 } %616, ptr %614, 1
  %621 = insertvalue { ptr, ptr, ptr, i32 } %620, ptr %615, 2
  %622 = insertvalue { ptr, ptr, ptr, i32 } %621, i32 %offset.i.i309, 3
  %623 = load ptr, ptr %28, align 8
  %624 = call ptr %623(ptr %.fca.1.extract47)
  %625 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %626 = load ptr, ptr %32, align 8
  %627 = call ptr %626(ptr %.fca.1.extract47)
  %result.i325 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %628 = getelementptr i8, ptr %result.i325, i64 16
  store ptr @_parameterization_Nil, ptr %628, align 8
  %result.i326 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %629 = getelementptr i8, ptr %result.i326, i64 16
  store ptr %627, ptr %629, align 8
  %630 = getelementptr i8, ptr %result.i326, i64 8
  store ptr %624, ptr %630, align 8
  %631 = getelementptr i8, ptr %result.i326, i64 24
  store ptr null, ptr %631, align 8
  %632 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i326)
  store ptr @Entry, ptr %result.i326, align 8
  %633 = getelementptr i8, ptr %result.i325, i64 8
  store ptr %result.i326, ptr %633, align 8
  %634 = getelementptr i8, ptr %result.i325, i64 24
  store ptr null, ptr %634, align 8
  %635 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i325)
  store ptr @union_typ, ptr %result.i325, align 8
  store ptr %result.i325, ptr %20, align 8
  %636 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %20)
  %637 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %638 = load ptr, ptr %618, align 8
  store ptr @union_typ, ptr %21, align 8
  %639 = call ptr %638({ ptr, ptr, ptr, i32 } %25, ptr nonnull %21)
  %640 = call { ptr, i160 } %639({ ptr, ptr, ptr, i32 } %25, { ptr, ptr, ptr, i32 } %25, ptr nonnull %20, { ptr, ptr, ptr, i32 } %622)
  %.fca.0.extract53 = extractvalue { ptr, i160 } %640, 0
  %641 = icmp ne ptr %.fca.0.extract53, @nil_typ
  %642 = icmp ne ptr %.fca.0.extract53, null
  %.not156 = and i1 %641, %642
  br i1 %.not156, label %._crit_edge3, label %.thread529

._crit_edge3:                                     ; preds = %._crit_edge2
  %.fca.1.extract55 = extractvalue { ptr, i160 } %640, 1
  %643 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %644 = load ptr, ptr %28, align 8
  %645 = call ptr %644(ptr %.fca.1.extract47)
  %646 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %647 = load ptr, ptr %32, align 8
  %648 = call ptr %647(ptr %.fca.1.extract47)
  %649 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %6)
  %650 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %651 = load ptr, ptr %619, align 8
  %652 = call ptr %651({ ptr, ptr, ptr, i32 } %25, ptr nonnull %6)
  call void %652({ ptr, ptr, ptr, i32 } %25, { ptr, ptr, ptr, i32 } %25, ptr nonnull %6)
  %653 = trunc i160 %.fca.1.extract55 to i64
  %654 = lshr i160 %.fca.1.extract55, 64
  %655 = trunc i160 %654 to i64
  %656 = inttoptr i64 %653 to ptr
  %657 = inttoptr i64 %655 to ptr
  %hash_coef.i.i315.1 = load i64, ptr %hash_coef_ptr.i.i298, align 4
  %tbl_size.i.i316.1 = load i64, ptr %tbl_size_ptr.i.i299, align 4
  %offset_tbl.i.i317.1 = load ptr, ptr %offset_tbl_ptr.i.i300, align 8
  %product.i.i.i318.1 = mul i64 %hash_coef.i.i315.1, 4015701072841558310
  %shifted.i.i.i319.1 = lshr i64 %product.i.i.i318.1, 32
  %xored.i.i.i320.1 = xor i64 %shifted.i.i.i319.1, %product.i.i.i318.1
  %hash.i.i.i321.1 = and i64 %xored.i.i.i320.1, %tbl_size.i.i316.1
  %offset_ptr.i.i322.1 = getelementptr i32, ptr %offset_tbl.i.i317.1, i64 %hash.i.i.i321.1
  %offset.i.i323.1 = load i32, ptr %offset_ptr.i.i322.1, align 4
  %658 = insertvalue { ptr, ptr, ptr, i32 } %616, ptr %656, 1
  %659 = insertvalue { ptr, ptr, ptr, i32 } %658, ptr %657, 2
  %660 = insertvalue { ptr, ptr, ptr, i32 } %659, i32 %offset.i.i323.1, 3
  %661 = load ptr, ptr %28, align 8
  %662 = call ptr %661(ptr %.fca.1.extract47)
  %663 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %664 = load ptr, ptr %32, align 8
  %665 = call ptr %664(ptr %.fca.1.extract47)
  %result.i325.1 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %666 = getelementptr i8, ptr %result.i325.1, i64 16
  store ptr @_parameterization_Nil, ptr %666, align 8
  %result.i326.1 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %667 = getelementptr i8, ptr %result.i326.1, i64 16
  store ptr %665, ptr %667, align 8
  %668 = getelementptr i8, ptr %result.i326.1, i64 8
  store ptr %662, ptr %668, align 8
  %669 = getelementptr i8, ptr %result.i326.1, i64 24
  store ptr null, ptr %669, align 8
  %670 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i326.1)
  store ptr @Entry, ptr %result.i326.1, align 8
  %671 = getelementptr i8, ptr %result.i325.1, i64 8
  store ptr %result.i326.1, ptr %671, align 8
  %672 = getelementptr i8, ptr %result.i325.1, i64 24
  store ptr null, ptr %672, align 8
  %673 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i325.1)
  store ptr @union_typ, ptr %result.i325.1, align 8
  store ptr %result.i325.1, ptr %20, align 8
  %674 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %20)
  %675 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %676 = load ptr, ptr %618, align 8
  store ptr @union_typ, ptr %21, align 8
  %677 = call ptr %676({ ptr, ptr, ptr, i32 } %25, ptr nonnull %21)
  %678 = call { ptr, i160 } %677({ ptr, ptr, ptr, i32 } %25, { ptr, ptr, ptr, i32 } %25, ptr nonnull %20, { ptr, ptr, ptr, i32 } %660)
  %.fca.0.extract53.1 = extractvalue { ptr, i160 } %678, 0
  %679 = icmp ne ptr %.fca.0.extract53.1, @nil_typ
  %680 = icmp ne ptr %.fca.0.extract53.1, null
  %.not156.1 = and i1 %679, %680
  br i1 %.not156.1, label %._crit_edge3.1, label %.thread529

._crit_edge3.1:                                   ; preds = %._crit_edge3
  %681 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %682 = load ptr, ptr %28, align 8
  %683 = call ptr %682(ptr %.fca.1.extract47)
  %684 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %685 = load ptr, ptr %32, align 8
  %686 = call ptr %685(ptr %.fca.1.extract47)
  %687 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %6)
  %688 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract45)
  %689 = load ptr, ptr %619, align 8
  %690 = call ptr %689({ ptr, ptr, ptr, i32 } %25, ptr nonnull %6)
  call void %690({ ptr, ptr, ptr, i32 } %25, { ptr, ptr, ptr, i32 } %25, ptr nonnull %6)
  br label %.thread529

.thread529:                                       ; preds = %._crit_edge2, %._crit_edge3, %._crit_edge3.1, %.thread528, %.thread525
  ret void
}

define { ptr, i160 } @HashMap_get_keyK({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, i160 } %3) {
  %5 = alloca [0 x ptr], align 8
  %.sroa.0271 = alloca ptr, align 8
  %.sroa.1 = alloca i160, align 8
  %.sroa.0 = alloca ptr, align 8
  %.sroa.2 = alloca i160, align 8
  %6 = alloca [1 x ptr], align 8
  %7 = alloca { ptr }, align 8
  %8 = alloca [1 x ptr], align 8
  %9 = alloca { ptr }, align 8
  %10 = alloca [1 x ptr], align 8
  %11 = alloca { ptr }, align 8
  %.sroa.0123 = alloca ptr, align 8
  %.sroa.2124 = alloca i160, align 8
  %.sroa.0115 = alloca ptr, align 8
  %.sroa.2116 = alloca i160, align 8
  %.fca.0.extract32 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract34 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract36 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract32, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract32, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract32, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -2849643283898152329
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract12 = extractvalue { ptr, i160 } %3, 0
  %12 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract32, 0
  %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.1.extract34, 1
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.2.extract36, 2
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, i32 %offset.i.i, 3
  %16 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract32)
  %17 = sext i32 %offset.i.i to i64
  %18 = getelementptr ptr, ptr %.fca.0.extract32, i64 %17
  %19 = load ptr, ptr %18, align 8
  %20 = tail call ptr %19(ptr %.fca.1.extract34)
  %21 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract32)
  %22 = getelementptr i8, ptr %18, i64 8
  %23 = load ptr, ptr %22, align 8
  %24 = tail call ptr %23(ptr %.fca.1.extract34)
  %25 = alloca [1 x ptr], align 8
  store ptr %20, ptr %25, align 8
  %26 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %25)
  %27 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract32)
  %28 = getelementptr i8, ptr %18, i64 80
  %29 = load ptr, ptr %28, align 8
  %30 = alloca { ptr }, align 8
  store ptr %.fca.0.extract12, ptr %30, align 8
  %31 = call ptr %29({ ptr, ptr, ptr, i32 } %15, ptr nonnull %30)
  %32 = call i32 %31({ ptr, ptr, ptr, i32 } %15, { ptr, ptr, ptr, i32 } %15, ptr nonnull %25, { ptr, i160 } %3)
  %33 = call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract32)
  %34 = load ptr, ptr %18, align 8
  %35 = call ptr %34(ptr %.fca.1.extract34)
  %36 = call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract32)
  %37 = load ptr, ptr %22, align 8
  %38 = call ptr %37(ptr %.fca.1.extract34)
  %39 = alloca [1 x ptr], align 8
  store ptr @_parameterization_Ptri32, ptr %39, align 8
  %40 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %39)
  %41 = call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract32)
  %42 = getelementptr i8, ptr %18, i64 96
  %43 = load ptr, ptr %42, align 8
  %44 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %44, align 8
  %45 = call ptr %43({ ptr, ptr, ptr, i32 } %15, ptr nonnull %44)
  %46 = call i32 %45({ ptr, ptr, ptr, i32 } %15, { ptr, ptr, ptr, i32 } %15, ptr nonnull %39, i32 %32)
  %47 = call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract32)
  %48 = getelementptr i8, ptr %18, i64 24
  %49 = load ptr, ptr %48, align 8
  %50 = load ptr, ptr %49, align 8
  %51 = call { ptr, ptr, ptr, i32 } %50(ptr %.fca.1.extract34)
  %.fca.0.extract4 = extractvalue { ptr, ptr, ptr, i32 } %51, 0
  %.fca.1.extract5 = extractvalue { ptr, ptr, ptr, i32 } %51, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %51, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %51, 3
  %hash_coef_ptr.i.i130 = getelementptr i8, ptr %.fca.0.extract4, i64 8
  %tbl_size_ptr.i.i131 = getelementptr i8, ptr %.fca.0.extract4, i64 16
  %offset_tbl_ptr.i.i132 = getelementptr i8, ptr %.fca.0.extract4, i64 40
  %hash_coef.i.i133 = load i64, ptr %hash_coef_ptr.i.i130, align 4
  %tbl_size.i.i134 = load i64, ptr %tbl_size_ptr.i.i131, align 4
  %offset_tbl.i.i135 = load ptr, ptr %offset_tbl_ptr.i.i132, align 8
  %product.i.i.i136 = mul i64 %hash_coef.i.i133, -5261542750394134544
  %shifted.i.i.i137 = lshr i64 %product.i.i.i136, 32
  %xored.i.i.i138 = xor i64 %shifted.i.i.i137, %product.i.i.i136
  %hash.i.i.i139 = and i64 %xored.i.i.i138, %tbl_size.i.i134
  %offset_ptr.i.i140 = getelementptr i32, ptr %offset_tbl.i.i135, i64 %hash.i.i.i139
  %offset.i.i141 = load i32, ptr %offset_ptr.i.i140, align 4
  %eq.i = icmp eq i32 %.fca.3.extract, %offset.i.i141
  call void @llvm.assume(i1 %eq.i) #30
  %52 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract4, 0
  %53 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %.fca.1.extract5, 1
  %54 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %.fca.2.extract, 2
  %55 = insertvalue { ptr, ptr, ptr, i32 } %54, i32 %.fca.3.extract, 3
  %56 = call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract32)
  %57 = load ptr, ptr %18, align 8
  %58 = call ptr %57(ptr %.fca.1.extract34)
  %59 = call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract32)
  %60 = load ptr, ptr %22, align 8
  %61 = call ptr %60(ptr %.fca.1.extract34)
  %62 = alloca [1 x ptr], align 8
  store ptr @_parameterization_Ptri32, ptr %62, align 8
  %63 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %62)
  %64 = call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract4)
  %65 = sext i32 %.fca.3.extract to i64
  %66 = getelementptr ptr, ptr %.fca.0.extract4, i64 %65
  %67 = getelementptr i8, ptr %66, i64 120
  %68 = load ptr, ptr %67, align 8
  %69 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %69, align 8
  %70 = call ptr %68({ ptr, ptr, ptr, i32 } %55, ptr nonnull %69)
  %71 = call { ptr, i160 } %70({ ptr, ptr, ptr, i32 } %55, { ptr, ptr, ptr, i32 } %55, ptr nonnull %62, i32 %46)
  %.fca.0.extract = extractvalue { ptr, i160 } %71, 0
  %72 = icmp ne ptr %.fca.0.extract, @nil_typ
  %73 = icmp ne ptr %.fca.0.extract, null
  %.not126 = and i1 %72, %73
  br i1 %.not126, label %74, label %.critedge

74:                                               ; preds = %4
  %.fca.1.extract = extractvalue { ptr, i160 } %71, 1
  %.sroa.5.8.extract.trunc = trunc i160 %.fca.1.extract to i64
  %75 = inttoptr i64 %.sroa.5.8.extract.trunc to ptr
  %.sroa.9.8.extract.shift = lshr i160 %.fca.1.extract, 64
  %.sroa.9.8.extract.trunc = trunc i160 %.sroa.9.8.extract.shift to i64
  %76 = inttoptr i64 %.sroa.9.8.extract.trunc to ptr
  %hash_coef_ptr.i.i144 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i145 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i146 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i147 = load i64, ptr %hash_coef_ptr.i.i144, align 4
  %tbl_size.i.i148 = load i64, ptr %tbl_size_ptr.i.i145, align 4
  %offset_tbl.i.i149 = load ptr, ptr %offset_tbl_ptr.i.i146, align 8
  %product.i.i.i150 = mul i64 %hash_coef.i.i147, 4015701072841558310
  %shifted.i.i.i151 = lshr i64 %product.i.i.i150, 32
  %xored.i.i.i152 = xor i64 %shifted.i.i.i151, %product.i.i.i150
  %hash.i.i.i153 = and i64 %xored.i.i.i152, %tbl_size.i.i148
  %offset_ptr.i.i154 = getelementptr i32, ptr %offset_tbl.i.i149, i64 %hash.i.i.i153
  %offset.i.i155 = load i32, ptr %offset_ptr.i.i154, align 4
  %77 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %78 = insertvalue { ptr, ptr, ptr, i32 } %77, ptr %75, 1
  %79 = insertvalue { ptr, ptr, ptr, i32 } %78, ptr %76, 2
  %80 = insertvalue { ptr, ptr, ptr, i32 } %79, i32 %offset.i.i155, 3
  %81 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract32)
  %82 = load ptr, ptr %18, align 8
  %83 = call ptr %82(ptr %.fca.1.extract34)
  %84 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract32)
  %85 = load ptr, ptr %22, align 8
  %86 = call ptr %85(ptr %.fca.1.extract34)
  %87 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %88 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract)
  %89 = sext i32 %offset.i.i155 to i64
  %90 = getelementptr ptr, ptr %.fca.0.extract, i64 %89
  %91 = getelementptr i8, ptr %90, i64 64
  %92 = load ptr, ptr %91, align 8
  %93 = call ptr %92({ ptr, ptr, ptr, i32 } %80, ptr nonnull %5)
  %94 = call i32 %93({ ptr, ptr, ptr, i32 } %80, { ptr, ptr, ptr, i32 } %80, ptr nonnull %5)
  %95 = icmp eq i32 %94, %32
  %96 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract32)
  %97 = load ptr, ptr %18, align 8
  %98 = call ptr %97(ptr %.fca.1.extract34)
  %99 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract32)
  %100 = load ptr, ptr %22, align 8
  %101 = call ptr %100(ptr %.fca.1.extract34)
  %102 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %103 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract)
  %104 = getelementptr i8, ptr %90, i64 48
  %105 = load ptr, ptr %104, align 8
  %106 = call ptr %105({ ptr, ptr, ptr, i32 } %80, ptr nonnull %5)
  %107 = call { ptr, i160 } %106({ ptr, ptr, ptr, i32 } %80, { ptr, ptr, ptr, i32 } %80, ptr nonnull %5)
  %108 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract32)
  %109 = getelementptr i8, ptr %18, i64 56
  %110 = load ptr, ptr %109, align 8
  %111 = load ptr, ptr %110, align 8
  %112 = call { ptr } %111(ptr %.fca.1.extract34)
  %.fca.0.extract72 = extractvalue { ptr } %112, 0
  %113 = call i1 %.fca.0.extract72({ ptr, i160 } %107, { ptr, i160 } %3)
  %114 = and i1 %95, %113
  br i1 %114, label %.thread, label %.critedge

.critedge:                                        ; preds = %4, %74
  %115 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract32)
  %116 = load ptr, ptr %18, align 8
  %117 = call ptr %116(ptr %.fca.1.extract34)
  %118 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract32)
  %119 = load ptr, ptr %22, align 8
  %120 = call ptr %119(ptr %.fca.1.extract34)
  store ptr @_parameterization_Ptri32, ptr %6, align 8
  %121 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %6)
  %122 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract32)
  %123 = getelementptr i8, ptr %18, i64 88
  %124 = load ptr, ptr %123, align 8
  store ptr @i32_typ, ptr %7, align 8
  %125 = call ptr %124({ ptr, ptr, ptr, i32 } %15, ptr nonnull %7)
  %126 = call i32 %125({ ptr, ptr, ptr, i32 } %15, { ptr, ptr, ptr, i32 } %15, ptr nonnull %6, i32 %32)
  %127 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract32)
  %128 = load ptr, ptr %18, align 8
  %129 = call ptr %128(ptr %.fca.1.extract34)
  %130 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract32)
  %131 = load ptr, ptr %22, align 8
  %132 = call ptr %131(ptr %.fca.1.extract34)
  store ptr @_parameterization_Ptri32, ptr %8, align 8
  %133 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %8)
  %134 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract32)
  %135 = getelementptr i8, ptr %18, i64 104
  %136 = load ptr, ptr %135, align 8
  store ptr @i32_typ, ptr %9, align 8
  %137 = call ptr %136({ ptr, ptr, ptr, i32 } %15, ptr nonnull %9)
  %138 = call i32 %137({ ptr, ptr, ptr, i32 } %15, { ptr, ptr, ptr, i32 } %15, ptr nonnull %8, i32 %126)
  %139 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract32)
  %140 = getelementptr i8, ptr %18, i64 32
  %141 = load ptr, ptr %140, align 8
  %142 = load ptr, ptr %141, align 8
  %143 = call { ptr, ptr, ptr, i32 } %142(ptr %.fca.1.extract34)
  %.fca.0.extract64 = extractvalue { ptr, ptr, ptr, i32 } %143, 0
  %.fca.1.extract66 = extractvalue { ptr, ptr, ptr, i32 } %143, 1
  %.fca.2.extract68 = extractvalue { ptr, ptr, ptr, i32 } %143, 2
  %.fca.3.extract70 = extractvalue { ptr, ptr, ptr, i32 } %143, 3
  %hash_coef_ptr.i.i158 = getelementptr i8, ptr %.fca.0.extract64, i64 8
  %tbl_size_ptr.i.i159 = getelementptr i8, ptr %.fca.0.extract64, i64 16
  %offset_tbl_ptr.i.i160 = getelementptr i8, ptr %.fca.0.extract64, i64 40
  %hash_coef.i.i161 = load i64, ptr %hash_coef_ptr.i.i158, align 4
  %tbl_size.i.i162 = load i64, ptr %tbl_size_ptr.i.i159, align 4
  %offset_tbl.i.i163 = load ptr, ptr %offset_tbl_ptr.i.i160, align 8
  %product.i.i.i164 = mul i64 %hash_coef.i.i161, -5261542750394134544
  %shifted.i.i.i165 = lshr i64 %product.i.i.i164, 32
  %xored.i.i.i166 = xor i64 %shifted.i.i.i165, %product.i.i.i164
  %hash.i.i.i167 = and i64 %xored.i.i.i166, %tbl_size.i.i162
  %offset_ptr.i.i168 = getelementptr i32, ptr %offset_tbl.i.i163, i64 %hash.i.i.i167
  %offset.i.i169 = load i32, ptr %offset_ptr.i.i168, align 4
  %eq.i172 = icmp eq i32 %.fca.3.extract70, %offset.i.i169
  call void @llvm.assume(i1 %eq.i172) #30
  %144 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract64, 0
  %145 = insertvalue { ptr, ptr, ptr, i32 } %144, ptr %.fca.1.extract66, 1
  %146 = insertvalue { ptr, ptr, ptr, i32 } %145, ptr %.fca.2.extract68, 2
  %147 = insertvalue { ptr, ptr, ptr, i32 } %146, i32 %.fca.3.extract70, 3
  %148 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract32)
  %149 = load ptr, ptr %18, align 8
  %150 = call ptr %149(ptr %.fca.1.extract34)
  %151 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract32)
  %152 = load ptr, ptr %22, align 8
  %153 = call ptr %152(ptr %.fca.1.extract34)
  store ptr @_parameterization_Ptri32, ptr %10, align 8
  %154 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %10)
  %155 = call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract64)
  %156 = sext i32 %.fca.3.extract70 to i64
  %157 = getelementptr ptr, ptr %.fca.0.extract64, i64 %156
  %158 = getelementptr i8, ptr %157, i64 120
  %159 = load ptr, ptr %158, align 8
  store ptr @i32_typ, ptr %11, align 8
  %160 = call ptr %159({ ptr, ptr, ptr, i32 } %147, ptr nonnull %11)
  %161 = call { ptr, i160 } %160({ ptr, ptr, ptr, i32 } %147, { ptr, ptr, ptr, i32 } %147, ptr nonnull %10, i32 %138)
  %.fca.0.extract57 = extractvalue { ptr, i160 } %161, 0
  %162 = icmp ne ptr %.fca.0.extract57, @nil_typ
  %163 = icmp ne ptr %.fca.0.extract57, null
  %.not128 = and i1 %162, %163
  br i1 %.not128, label %164, label %.thread294

164:                                              ; preds = %.critedge
  %.fca.1.extract59 = extractvalue { ptr, i160 } %161, 1
  %.sroa.6.8.extract.trunc = trunc i160 %.fca.1.extract59 to i64
  %165 = inttoptr i64 %.sroa.6.8.extract.trunc to ptr
  %.sroa.11.8.extract.shift = lshr i160 %.fca.1.extract59, 64
  %.sroa.11.8.extract.trunc = trunc i160 %.sroa.11.8.extract.shift to i64
  %166 = inttoptr i64 %.sroa.11.8.extract.trunc to ptr
  %hash_coef_ptr.i.i174 = getelementptr i8, ptr %.fca.0.extract57, i64 8
  %tbl_size_ptr.i.i175 = getelementptr i8, ptr %.fca.0.extract57, i64 16
  %offset_tbl_ptr.i.i176 = getelementptr i8, ptr %.fca.0.extract57, i64 40
  %hash_coef.i.i177 = load i64, ptr %hash_coef_ptr.i.i174, align 4
  %tbl_size.i.i178 = load i64, ptr %tbl_size_ptr.i.i175, align 4
  %offset_tbl.i.i179 = load ptr, ptr %offset_tbl_ptr.i.i176, align 8
  %product.i.i.i180 = mul i64 %hash_coef.i.i177, 4015701072841558310
  %shifted.i.i.i181 = lshr i64 %product.i.i.i180, 32
  %xored.i.i.i182 = xor i64 %shifted.i.i.i181, %product.i.i.i180
  %hash.i.i.i183 = and i64 %xored.i.i.i182, %tbl_size.i.i178
  %offset_ptr.i.i184 = getelementptr i32, ptr %offset_tbl.i.i179, i64 %hash.i.i.i183
  %offset.i.i185 = load i32, ptr %offset_ptr.i.i184, align 4
  %167 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract57, 0
  %168 = insertvalue { ptr, ptr, ptr, i32 } %167, ptr %165, 1
  %169 = insertvalue { ptr, ptr, ptr, i32 } %168, ptr %166, 2
  %170 = insertvalue { ptr, ptr, ptr, i32 } %169, i32 %offset.i.i185, 3
  %171 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract32)
  %172 = load ptr, ptr %18, align 8
  %173 = call ptr %172(ptr %.fca.1.extract34)
  %174 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract32)
  %175 = load ptr, ptr %22, align 8
  %176 = call ptr %175(ptr %.fca.1.extract34)
  %177 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %178 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract57)
  %179 = sext i32 %offset.i.i185 to i64
  %180 = getelementptr ptr, ptr %.fca.0.extract57, i64 %179
  %181 = getelementptr i8, ptr %180, i64 64
  %182 = load ptr, ptr %181, align 8
  %183 = call ptr %182({ ptr, ptr, ptr, i32 } %170, ptr nonnull %5)
  %184 = call i32 %183({ ptr, ptr, ptr, i32 } %170, { ptr, ptr, ptr, i32 } %170, ptr nonnull %5)
  %185 = icmp eq i32 %184, %32
  %186 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract32)
  %187 = load ptr, ptr %18, align 8
  %188 = call ptr %187(ptr %.fca.1.extract34)
  %189 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract32)
  %190 = load ptr, ptr %22, align 8
  %191 = call ptr %190(ptr %.fca.1.extract34)
  %192 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %193 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract57)
  %194 = getelementptr i8, ptr %180, i64 48
  %195 = load ptr, ptr %194, align 8
  %196 = call ptr %195({ ptr, ptr, ptr, i32 } %170, ptr nonnull %5)
  %197 = call { ptr, i160 } %196({ ptr, ptr, ptr, i32 } %170, { ptr, ptr, ptr, i32 } %170, ptr nonnull %5)
  %198 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract32)
  %199 = getelementptr i8, ptr %18, i64 56
  %200 = load ptr, ptr %199, align 8
  %201 = load ptr, ptr %200, align 8
  %202 = call { ptr } %201(ptr %.fca.1.extract34)
  %.fca.0.extract42 = extractvalue { ptr } %202, 0
  %203 = call i1 %.fca.0.extract42({ ptr, i160 } %197, { ptr, i160 } %3)
  %204 = and i1 %185, %203
  br i1 %204, label %.thread, label %.thread294

.thread:                                          ; preds = %74, %164
  %.pre-phi313 = phi i64 [ %89, %74 ], [ %179, %164 ]
  %.pre-phi312 = phi { ptr, ptr, ptr, i32 } [ %80, %74 ], [ %170, %164 ]
  %.reg2mem65.0.sroa.phi290.sroa.speculated = phi ptr [ %.fca.0.extract, %74 ], [ %.fca.0.extract57, %164 ]
  %.reg2mem59.0.sroa.phi120289 = phi ptr [ %.sroa.1, %74 ], [ %.sroa.2124, %164 ]
  %.reg2mem59.0.sroa.phi117288 = phi ptr [ %.sroa.0271, %74 ], [ %.sroa.0123, %164 ]
  %.reg2mem57.0.sroa.phi94287 = phi ptr [ %.sroa.2, %74 ], [ %.sroa.2116, %164 ]
  %.reg2mem57.0.sroa.phi91286 = phi ptr [ %.sroa.0, %74 ], [ %.sroa.0115, %164 ]
  %205 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract32)
  %206 = load ptr, ptr %18, align 8
  %207 = call ptr %206(ptr %.fca.1.extract34)
  %208 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract32)
  %209 = load ptr, ptr %22, align 8
  %210 = call ptr %209(ptr %.fca.1.extract34)
  %211 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %212 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.reg2mem65.0.sroa.phi290.sroa.speculated)
  %213 = getelementptr ptr, ptr %.reg2mem65.0.sroa.phi290.sroa.speculated, i64 %.pre-phi313
  %214 = getelementptr i8, ptr %213, i64 56
  %215 = load ptr, ptr %214, align 8
  %216 = call ptr %215({ ptr, ptr, ptr, i32 } %.pre-phi312, ptr nonnull %5)
  %217 = call { ptr, i160 } %216({ ptr, ptr, ptr, i32 } %.pre-phi312, { ptr, ptr, ptr, i32 } %.pre-phi312, ptr nonnull %5)
  %.fca.0.extract97 = extractvalue { ptr, i160 } %217, 0
  store ptr %.fca.0.extract97, ptr %.reg2mem59.0.sroa.phi117288, align 8
  %.fca.1.extract99 = extractvalue { ptr, i160 } %217, 1
  store i160 %.fca.1.extract99, ptr %.reg2mem59.0.sroa.phi120289, align 8
  store ptr %.fca.0.extract97, ptr %.reg2mem57.0.sroa.phi91286, align 8
  store i160 %.fca.1.extract99, ptr %.reg2mem57.0.sroa.phi94287, align 8
  br label %.thread294

.thread294:                                       ; preds = %.critedge, %164, %.thread
  %.reg2mem51.sroa.0.0 = phi ptr [ %.fca.0.extract97, %.thread ], [ @nil_typ, %164 ], [ @nil_typ, %.critedge ]
  %.reg2mem51.sroa.3.0 = phi i160 [ %.fca.1.extract99, %.thread ], [ undef, %164 ], [ undef, %.critedge ]
  %.reload52.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %.reg2mem51.sroa.0.0, 0
  %.reload52.fca.1.insert = insertvalue { ptr, i160 } %.reload52.fca.0.insert, i160 %.reg2mem51.sroa.3.0, 1
  ret { ptr, i160 } %.reload52.fca.1.insert
}

define { ptr, i160 } @HashMap_remove_keyK({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, i160 } %3) {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca [2 x ptr], align 8
  %7 = alloca { ptr, ptr }, align 8
  %8 = alloca [1 x ptr], align 8
  %9 = alloca { ptr }, align 8
  %10 = alloca [1 x ptr], align 8
  %11 = alloca { ptr }, align 8
  %12 = alloca [1 x ptr], align 8
  %13 = alloca { ptr }, align 8
  %14 = alloca [2 x ptr], align 8
  %15 = alloca { ptr, ptr }, align 8
  %.fca.0.extract41 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract43 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract45 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract41, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract41, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract41, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -2849643283898152329
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract11 = extractvalue { ptr, i160 } %3, 0
  %16 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract41, 0
  %17 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %.fca.1.extract43, 1
  %18 = insertvalue { ptr, ptr, ptr, i32 } %17, ptr %.fca.2.extract45, 2
  %19 = insertvalue { ptr, ptr, ptr, i32 } %18, i32 %offset.i.i, 3
  %20 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract41)
  %21 = sext i32 %offset.i.i to i64
  %22 = getelementptr ptr, ptr %.fca.0.extract41, i64 %21
  %23 = load ptr, ptr %22, align 8
  %24 = tail call ptr %23(ptr %.fca.1.extract43)
  %25 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract41)
  %26 = getelementptr i8, ptr %22, i64 8
  %27 = load ptr, ptr %26, align 8
  %28 = tail call ptr %27(ptr %.fca.1.extract43)
  %29 = alloca [1 x ptr], align 8
  store ptr %24, ptr %29, align 8
  %30 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %29)
  %31 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract41)
  %32 = getelementptr i8, ptr %22, i64 80
  %33 = load ptr, ptr %32, align 8
  %34 = alloca { ptr }, align 8
  store ptr %.fca.0.extract11, ptr %34, align 8
  %35 = call ptr %33({ ptr, ptr, ptr, i32 } %19, ptr nonnull %34)
  %36 = call i32 %35({ ptr, ptr, ptr, i32 } %19, { ptr, ptr, ptr, i32 } %19, ptr nonnull %29, { ptr, i160 } %3)
  %37 = call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract41)
  %38 = load ptr, ptr %22, align 8
  %39 = call ptr %38(ptr %.fca.1.extract43)
  %40 = call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract41)
  %41 = load ptr, ptr %26, align 8
  %42 = call ptr %41(ptr %.fca.1.extract43)
  %43 = alloca [1 x ptr], align 8
  store ptr @_parameterization_Ptri32, ptr %43, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %43)
  %45 = call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract41)
  %46 = getelementptr i8, ptr %22, i64 96
  %47 = load ptr, ptr %46, align 8
  %48 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %48, align 8
  %49 = call ptr %47({ ptr, ptr, ptr, i32 } %19, ptr nonnull %48)
  %50 = call i32 %49({ ptr, ptr, ptr, i32 } %19, { ptr, ptr, ptr, i32 } %19, ptr nonnull %43, i32 %36)
  %51 = call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract41)
  %52 = getelementptr i8, ptr %22, i64 24
  %53 = load ptr, ptr %52, align 8
  %54 = load ptr, ptr %53, align 8
  %55 = call { ptr, ptr, ptr, i32 } %54(ptr %.fca.1.extract43)
  %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %55, 0
  %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %55, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %55, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %55, 3
  %hash_coef_ptr.i.i137 = getelementptr i8, ptr %.fca.0.extract3, i64 8
  %tbl_size_ptr.i.i138 = getelementptr i8, ptr %.fca.0.extract3, i64 16
  %offset_tbl_ptr.i.i139 = getelementptr i8, ptr %.fca.0.extract3, i64 40
  %hash_coef.i.i140 = load i64, ptr %hash_coef_ptr.i.i137, align 4
  %tbl_size.i.i141 = load i64, ptr %tbl_size_ptr.i.i138, align 4
  %offset_tbl.i.i142 = load ptr, ptr %offset_tbl_ptr.i.i139, align 8
  %product.i.i.i143 = mul i64 %hash_coef.i.i140, -5261542750394134544
  %shifted.i.i.i144 = lshr i64 %product.i.i.i143, 32
  %xored.i.i.i145 = xor i64 %shifted.i.i.i144, %product.i.i.i143
  %hash.i.i.i146 = and i64 %xored.i.i.i145, %tbl_size.i.i141
  %offset_ptr.i.i147 = getelementptr i32, ptr %offset_tbl.i.i142, i64 %hash.i.i.i146
  %offset.i.i148 = load i32, ptr %offset_ptr.i.i147, align 4
  %eq.i = icmp eq i32 %.fca.3.extract, %offset.i.i148
  call void @llvm.assume(i1 %eq.i) #30
  %56 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract3, 0
  %57 = insertvalue { ptr, ptr, ptr, i32 } %56, ptr %.fca.1.extract4, 1
  %58 = insertvalue { ptr, ptr, ptr, i32 } %57, ptr %.fca.2.extract, 2
  %59 = insertvalue { ptr, ptr, ptr, i32 } %58, i32 %.fca.3.extract, 3
  %60 = call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract41)
  %61 = load ptr, ptr %22, align 8
  %62 = call ptr %61(ptr %.fca.1.extract43)
  %63 = call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract41)
  %64 = load ptr, ptr %26, align 8
  %65 = call ptr %64(ptr %.fca.1.extract43)
  %66 = alloca [1 x ptr], align 8
  store ptr @_parameterization_Ptri32, ptr %66, align 8
  %67 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %66)
  %68 = call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract3)
  %69 = sext i32 %.fca.3.extract to i64
  %70 = getelementptr ptr, ptr %.fca.0.extract3, i64 %69
  %71 = getelementptr i8, ptr %70, i64 120
  %72 = load ptr, ptr %71, align 8
  %73 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %73, align 8
  %74 = call ptr %72({ ptr, ptr, ptr, i32 } %59, ptr nonnull %73)
  %75 = call { ptr, i160 } %74({ ptr, ptr, ptr, i32 } %59, { ptr, ptr, ptr, i32 } %59, ptr nonnull %66, i32 %50)
  %.fca.0.extract = extractvalue { ptr, i160 } %75, 0
  %76 = icmp ne ptr %.fca.0.extract, @nil_typ
  %77 = icmp ne ptr %.fca.0.extract, null
  %.not133 = and i1 %76, %77
  br i1 %.not133, label %78, label %155

78:                                               ; preds = %4
  %.fca.1.extract = extractvalue { ptr, i160 } %75, 1
  %.sroa.5352.8.extract.trunc = trunc i160 %.fca.1.extract to i64
  %79 = inttoptr i64 %.sroa.5352.8.extract.trunc to ptr
  %.sroa.9355.8.extract.shift = lshr i160 %.fca.1.extract, 64
  %.sroa.9355.8.extract.trunc = trunc i160 %.sroa.9355.8.extract.shift to i64
  %80 = inttoptr i64 %.sroa.9355.8.extract.trunc to ptr
  %hash_coef_ptr.i.i151 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i152 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i153 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i154 = load i64, ptr %hash_coef_ptr.i.i151, align 4
  %tbl_size.i.i155 = load i64, ptr %tbl_size_ptr.i.i152, align 4
  %offset_tbl.i.i156 = load ptr, ptr %offset_tbl_ptr.i.i153, align 8
  %product.i.i.i157 = mul i64 %hash_coef.i.i154, 4015701072841558310
  %shifted.i.i.i158 = lshr i64 %product.i.i.i157, 32
  %xored.i.i.i159 = xor i64 %shifted.i.i.i158, %product.i.i.i157
  %hash.i.i.i160 = and i64 %xored.i.i.i159, %tbl_size.i.i155
  %offset_ptr.i.i161 = getelementptr i32, ptr %offset_tbl.i.i156, i64 %hash.i.i.i160
  %offset.i.i162 = load i32, ptr %offset_ptr.i.i161, align 4
  %81 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %82 = insertvalue { ptr, ptr, ptr, i32 } %81, ptr %79, 1
  %83 = insertvalue { ptr, ptr, ptr, i32 } %82, ptr %80, 2
  %84 = insertvalue { ptr, ptr, ptr, i32 } %83, i32 %offset.i.i162, 3
  %85 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract41)
  %86 = load ptr, ptr %22, align 8
  %87 = call ptr %86(ptr %.fca.1.extract43)
  %88 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract41)
  %89 = load ptr, ptr %26, align 8
  %90 = call ptr %89(ptr %.fca.1.extract43)
  %91 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %92 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract)
  %93 = sext i32 %offset.i.i162 to i64
  %94 = getelementptr ptr, ptr %.fca.0.extract, i64 %93
  %95 = getelementptr i8, ptr %94, i64 64
  %96 = load ptr, ptr %95, align 8
  %97 = call ptr %96({ ptr, ptr, ptr, i32 } %84, ptr nonnull %5)
  %98 = call i32 %97({ ptr, ptr, ptr, i32 } %84, { ptr, ptr, ptr, i32 } %84, ptr nonnull %5)
  %99 = icmp eq i32 %98, %36
  %100 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract41)
  %101 = load ptr, ptr %22, align 8
  %102 = call ptr %101(ptr %.fca.1.extract43)
  %103 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract41)
  %104 = load ptr, ptr %26, align 8
  %105 = call ptr %104(ptr %.fca.1.extract43)
  %106 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %107 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract)
  %108 = getelementptr i8, ptr %94, i64 48
  %109 = load ptr, ptr %108, align 8
  %110 = call ptr %109({ ptr, ptr, ptr, i32 } %84, ptr nonnull %5)
  %111 = call { ptr, i160 } %110({ ptr, ptr, ptr, i32 } %84, { ptr, ptr, ptr, i32 } %84, ptr nonnull %5)
  %112 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract41)
  %113 = getelementptr i8, ptr %22, i64 56
  %114 = load ptr, ptr %113, align 8
  %115 = load ptr, ptr %114, align 8
  %116 = call { ptr } %115(ptr %.fca.1.extract43)
  %.fca.0.extract117 = extractvalue { ptr } %116, 0
  %117 = call i1 %.fca.0.extract117({ ptr, i160 } %111, { ptr, i160 } %3)
  %118 = and i1 %99, %117
  br i1 %118, label %119, label %155

119:                                              ; preds = %78
  %120 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract41)
  %121 = load ptr, ptr %22, align 8
  %122 = call ptr %121(ptr %.fca.1.extract43)
  %123 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract41)
  %124 = load ptr, ptr %26, align 8
  %125 = call ptr %124(ptr %.fca.1.extract43)
  %126 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %127 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract)
  %128 = getelementptr i8, ptr %94, i64 56
  %129 = load ptr, ptr %128, align 8
  %130 = call ptr %129({ ptr, ptr, ptr, i32 } %84, ptr nonnull %5)
  %131 = call { ptr, i160 } %130({ ptr, ptr, ptr, i32 } %84, { ptr, ptr, ptr, i32 } %84, ptr nonnull %5)
  %132 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract41)
  %133 = load ptr, ptr %52, align 8
  %134 = load ptr, ptr %133, align 8
  %135 = call { ptr, ptr, ptr, i32 } %134(ptr %.fca.1.extract43)
  %.fca.0.extract99 = extractvalue { ptr, ptr, ptr, i32 } %135, 0
  %.fca.1.extract101 = extractvalue { ptr, ptr, ptr, i32 } %135, 1
  %.fca.2.extract103 = extractvalue { ptr, ptr, ptr, i32 } %135, 2
  %.fca.3.extract105 = extractvalue { ptr, ptr, ptr, i32 } %135, 3
  %hash_coef_ptr.i.i165 = getelementptr i8, ptr %.fca.0.extract99, i64 8
  %tbl_size_ptr.i.i166 = getelementptr i8, ptr %.fca.0.extract99, i64 16
  %offset_tbl_ptr.i.i167 = getelementptr i8, ptr %.fca.0.extract99, i64 40
  %hash_coef.i.i168 = load i64, ptr %hash_coef_ptr.i.i165, align 4
  %tbl_size.i.i169 = load i64, ptr %tbl_size_ptr.i.i166, align 4
  %offset_tbl.i.i170 = load ptr, ptr %offset_tbl_ptr.i.i167, align 8
  %product.i.i.i171 = mul i64 %hash_coef.i.i168, -5261542750394134544
  %shifted.i.i.i172 = lshr i64 %product.i.i.i171, 32
  %xored.i.i.i173 = xor i64 %shifted.i.i.i172, %product.i.i.i171
  %hash.i.i.i174 = and i64 %xored.i.i.i173, %tbl_size.i.i169
  %offset_ptr.i.i175 = getelementptr i32, ptr %offset_tbl.i.i170, i64 %hash.i.i.i174
  %offset.i.i176 = load i32, ptr %offset_ptr.i.i175, align 4
  %eq.i179 = icmp eq i32 %.fca.3.extract105, %offset.i.i176
  call void @llvm.assume(i1 %eq.i179) #30
  %136 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract99, 0
  %137 = insertvalue { ptr, ptr, ptr, i32 } %136, ptr %.fca.1.extract101, 1
  %138 = insertvalue { ptr, ptr, ptr, i32 } %137, ptr %.fca.2.extract103, 2
  %139 = insertvalue { ptr, ptr, ptr, i32 } %138, i32 %.fca.3.extract105, 3
  %140 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract41)
  %141 = load ptr, ptr %22, align 8
  %142 = call ptr %141(ptr %.fca.1.extract43)
  %143 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract41)
  %144 = load ptr, ptr %26, align 8
  %145 = call ptr %144(ptr %.fca.1.extract43)
  store ptr @_parameterization_Ptri32, ptr %6, align 8
  %146 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr @_parameterization_Nil, ptr %146, align 8
  %147 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %6)
  %148 = call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract99)
  %149 = sext i32 %.fca.3.extract105 to i64
  %150 = getelementptr ptr, ptr %.fca.0.extract99, i64 %149
  %151 = getelementptr i8, ptr %150, i64 128
  %152 = load ptr, ptr %151, align 8
  store ptr @i32_typ, ptr %7, align 8
  %153 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr @nil_typ, ptr %153, align 8
  %154 = call ptr %152({ ptr, ptr, ptr, i32 } %139, ptr nonnull %7)
  call void %154({ ptr, ptr, ptr, i32 } %139, { ptr, ptr, ptr, i32 } %139, ptr nonnull %6, i32 %50, { ptr, i160 } { ptr @nil_typ, i160 undef })
  br label %.thread365.sink.split

155:                                              ; preds = %78, %4
  %156 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract41)
  %157 = load ptr, ptr %22, align 8
  %158 = call ptr %157(ptr %.fca.1.extract43)
  %159 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract41)
  %160 = load ptr, ptr %26, align 8
  %161 = call ptr %160(ptr %.fca.1.extract43)
  store ptr @_parameterization_Ptri32, ptr %8, align 8
  %162 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %8)
  %163 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract41)
  %164 = getelementptr i8, ptr %22, i64 88
  %165 = load ptr, ptr %164, align 8
  store ptr @i32_typ, ptr %9, align 8
  %166 = call ptr %165({ ptr, ptr, ptr, i32 } %19, ptr nonnull %9)
  %167 = call i32 %166({ ptr, ptr, ptr, i32 } %19, { ptr, ptr, ptr, i32 } %19, ptr nonnull %8, i32 %36)
  %168 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract41)
  %169 = load ptr, ptr %22, align 8
  %170 = call ptr %169(ptr %.fca.1.extract43)
  %171 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract41)
  %172 = load ptr, ptr %26, align 8
  %173 = call ptr %172(ptr %.fca.1.extract43)
  store ptr @_parameterization_Ptri32, ptr %10, align 8
  %174 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %10)
  %175 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract41)
  %176 = getelementptr i8, ptr %22, i64 104
  %177 = load ptr, ptr %176, align 8
  store ptr @i32_typ, ptr %11, align 8
  %178 = call ptr %177({ ptr, ptr, ptr, i32 } %19, ptr nonnull %11)
  %179 = call i32 %178({ ptr, ptr, ptr, i32 } %19, { ptr, ptr, ptr, i32 } %19, ptr nonnull %10, i32 %167)
  %180 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract41)
  %181 = getelementptr i8, ptr %22, i64 32
  %182 = load ptr, ptr %181, align 8
  %183 = load ptr, ptr %182, align 8
  %184 = call { ptr, ptr, ptr, i32 } %183(ptr %.fca.1.extract43)
  %.fca.0.extract91 = extractvalue { ptr, ptr, ptr, i32 } %184, 0
  %.fca.1.extract93 = extractvalue { ptr, ptr, ptr, i32 } %184, 1
  %.fca.2.extract95 = extractvalue { ptr, ptr, ptr, i32 } %184, 2
  %.fca.3.extract97 = extractvalue { ptr, ptr, ptr, i32 } %184, 3
  %hash_coef_ptr.i.i181 = getelementptr i8, ptr %.fca.0.extract91, i64 8
  %tbl_size_ptr.i.i182 = getelementptr i8, ptr %.fca.0.extract91, i64 16
  %offset_tbl_ptr.i.i183 = getelementptr i8, ptr %.fca.0.extract91, i64 40
  %hash_coef.i.i184 = load i64, ptr %hash_coef_ptr.i.i181, align 4
  %tbl_size.i.i185 = load i64, ptr %tbl_size_ptr.i.i182, align 4
  %offset_tbl.i.i186 = load ptr, ptr %offset_tbl_ptr.i.i183, align 8
  %product.i.i.i187 = mul i64 %hash_coef.i.i184, -5261542750394134544
  %shifted.i.i.i188 = lshr i64 %product.i.i.i187, 32
  %xored.i.i.i189 = xor i64 %shifted.i.i.i188, %product.i.i.i187
  %hash.i.i.i190 = and i64 %xored.i.i.i189, %tbl_size.i.i185
  %offset_ptr.i.i191 = getelementptr i32, ptr %offset_tbl.i.i186, i64 %hash.i.i.i190
  %offset.i.i192 = load i32, ptr %offset_ptr.i.i191, align 4
  %eq.i195 = icmp eq i32 %.fca.3.extract97, %offset.i.i192
  call void @llvm.assume(i1 %eq.i195) #30
  %185 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract91, 0
  %186 = insertvalue { ptr, ptr, ptr, i32 } %185, ptr %.fca.1.extract93, 1
  %187 = insertvalue { ptr, ptr, ptr, i32 } %186, ptr %.fca.2.extract95, 2
  %188 = insertvalue { ptr, ptr, ptr, i32 } %187, i32 %.fca.3.extract97, 3
  %189 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract41)
  %190 = load ptr, ptr %22, align 8
  %191 = call ptr %190(ptr %.fca.1.extract43)
  %192 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract41)
  %193 = load ptr, ptr %26, align 8
  %194 = call ptr %193(ptr %.fca.1.extract43)
  store ptr @_parameterization_Ptri32, ptr %12, align 8
  %195 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %12)
  %196 = call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract91)
  %197 = sext i32 %.fca.3.extract97 to i64
  %198 = getelementptr ptr, ptr %.fca.0.extract91, i64 %197
  %199 = getelementptr i8, ptr %198, i64 120
  %200 = load ptr, ptr %199, align 8
  store ptr @i32_typ, ptr %13, align 8
  %201 = call ptr %200({ ptr, ptr, ptr, i32 } %188, ptr nonnull %13)
  %202 = call { ptr, i160 } %201({ ptr, ptr, ptr, i32 } %188, { ptr, ptr, ptr, i32 } %188, ptr nonnull %12, i32 %179)
  %.fca.0.extract84 = extractvalue { ptr, i160 } %202, 0
  %203 = icmp ne ptr %.fca.0.extract84, @nil_typ
  %204 = icmp ne ptr %.fca.0.extract84, null
  %.not135 = and i1 %203, %204
  br i1 %.not135, label %205, label %.thread365

205:                                              ; preds = %155
  %.fca.1.extract86 = extractvalue { ptr, i160 } %202, 1
  %.sroa.5.8.extract.trunc = trunc i160 %.fca.1.extract86 to i64
  %206 = inttoptr i64 %.sroa.5.8.extract.trunc to ptr
  %.sroa.9.8.extract.shift = lshr i160 %.fca.1.extract86, 64
  %.sroa.9.8.extract.trunc = trunc i160 %.sroa.9.8.extract.shift to i64
  %207 = inttoptr i64 %.sroa.9.8.extract.trunc to ptr
  %hash_coef_ptr.i.i197 = getelementptr i8, ptr %.fca.0.extract84, i64 8
  %tbl_size_ptr.i.i198 = getelementptr i8, ptr %.fca.0.extract84, i64 16
  %offset_tbl_ptr.i.i199 = getelementptr i8, ptr %.fca.0.extract84, i64 40
  %hash_coef.i.i200 = load i64, ptr %hash_coef_ptr.i.i197, align 4
  %tbl_size.i.i201 = load i64, ptr %tbl_size_ptr.i.i198, align 4
  %offset_tbl.i.i202 = load ptr, ptr %offset_tbl_ptr.i.i199, align 8
  %product.i.i.i203 = mul i64 %hash_coef.i.i200, 4015701072841558310
  %shifted.i.i.i204 = lshr i64 %product.i.i.i203, 32
  %xored.i.i.i205 = xor i64 %shifted.i.i.i204, %product.i.i.i203
  %hash.i.i.i206 = and i64 %xored.i.i.i205, %tbl_size.i.i201
  %offset_ptr.i.i207 = getelementptr i32, ptr %offset_tbl.i.i202, i64 %hash.i.i.i206
  %offset.i.i208 = load i32, ptr %offset_ptr.i.i207, align 4
  %208 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract84, 0
  %209 = insertvalue { ptr, ptr, ptr, i32 } %208, ptr %206, 1
  %210 = insertvalue { ptr, ptr, ptr, i32 } %209, ptr %207, 2
  %211 = insertvalue { ptr, ptr, ptr, i32 } %210, i32 %offset.i.i208, 3
  %212 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract41)
  %213 = load ptr, ptr %22, align 8
  %214 = call ptr %213(ptr %.fca.1.extract43)
  %215 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract41)
  %216 = load ptr, ptr %26, align 8
  %217 = call ptr %216(ptr %.fca.1.extract43)
  %218 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %219 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract84)
  %220 = sext i32 %offset.i.i208 to i64
  %221 = getelementptr ptr, ptr %.fca.0.extract84, i64 %220
  %222 = getelementptr i8, ptr %221, i64 64
  %223 = load ptr, ptr %222, align 8
  %224 = call ptr %223({ ptr, ptr, ptr, i32 } %211, ptr nonnull %5)
  %225 = call i32 %224({ ptr, ptr, ptr, i32 } %211, { ptr, ptr, ptr, i32 } %211, ptr nonnull %5)
  %226 = icmp eq i32 %225, %36
  %227 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract41)
  %228 = load ptr, ptr %22, align 8
  %229 = call ptr %228(ptr %.fca.1.extract43)
  %230 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract41)
  %231 = load ptr, ptr %26, align 8
  %232 = call ptr %231(ptr %.fca.1.extract43)
  %233 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %234 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract84)
  %235 = getelementptr i8, ptr %221, i64 48
  %236 = load ptr, ptr %235, align 8
  %237 = call ptr %236({ ptr, ptr, ptr, i32 } %211, ptr nonnull %5)
  %238 = call { ptr, i160 } %237({ ptr, ptr, ptr, i32 } %211, { ptr, ptr, ptr, i32 } %211, ptr nonnull %5)
  %239 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract41)
  %240 = getelementptr i8, ptr %22, i64 56
  %241 = load ptr, ptr %240, align 8
  %242 = load ptr, ptr %241, align 8
  %243 = call { ptr } %242(ptr %.fca.1.extract43)
  %.fca.0.extract69 = extractvalue { ptr } %243, 0
  %244 = call i1 %.fca.0.extract69({ ptr, i160 } %238, { ptr, i160 } %3)
  %245 = and i1 %226, %244
  br i1 %245, label %246, label %.thread365

246:                                              ; preds = %205
  %247 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract41)
  %248 = load ptr, ptr %22, align 8
  %249 = call ptr %248(ptr %.fca.1.extract43)
  %250 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract41)
  %251 = load ptr, ptr %26, align 8
  %252 = call ptr %251(ptr %.fca.1.extract43)
  %253 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %254 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract84)
  %255 = getelementptr i8, ptr %221, i64 56
  %256 = load ptr, ptr %255, align 8
  %257 = call ptr %256({ ptr, ptr, ptr, i32 } %211, ptr nonnull %5)
  %258 = call { ptr, i160 } %257({ ptr, ptr, ptr, i32 } %211, { ptr, ptr, ptr, i32 } %211, ptr nonnull %5)
  %259 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract41)
  %260 = load ptr, ptr %181, align 8
  %261 = load ptr, ptr %260, align 8
  %262 = call { ptr, ptr, ptr, i32 } %261(ptr %.fca.1.extract43)
  %.fca.0.extract51 = extractvalue { ptr, ptr, ptr, i32 } %262, 0
  %.fca.1.extract53 = extractvalue { ptr, ptr, ptr, i32 } %262, 1
  %.fca.2.extract55 = extractvalue { ptr, ptr, ptr, i32 } %262, 2
  %.fca.3.extract57 = extractvalue { ptr, ptr, ptr, i32 } %262, 3
  %hash_coef_ptr.i.i211 = getelementptr i8, ptr %.fca.0.extract51, i64 8
  %tbl_size_ptr.i.i212 = getelementptr i8, ptr %.fca.0.extract51, i64 16
  %offset_tbl_ptr.i.i213 = getelementptr i8, ptr %.fca.0.extract51, i64 40
  %hash_coef.i.i214 = load i64, ptr %hash_coef_ptr.i.i211, align 4
  %tbl_size.i.i215 = load i64, ptr %tbl_size_ptr.i.i212, align 4
  %offset_tbl.i.i216 = load ptr, ptr %offset_tbl_ptr.i.i213, align 8
  %product.i.i.i217 = mul i64 %hash_coef.i.i214, -5261542750394134544
  %shifted.i.i.i218 = lshr i64 %product.i.i.i217, 32
  %xored.i.i.i219 = xor i64 %shifted.i.i.i218, %product.i.i.i217
  %hash.i.i.i220 = and i64 %xored.i.i.i219, %tbl_size.i.i215
  %offset_ptr.i.i221 = getelementptr i32, ptr %offset_tbl.i.i216, i64 %hash.i.i.i220
  %offset.i.i222 = load i32, ptr %offset_ptr.i.i221, align 4
  %eq.i225 = icmp eq i32 %.fca.3.extract57, %offset.i.i222
  call void @llvm.assume(i1 %eq.i225) #30
  %263 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract51, 0
  %264 = insertvalue { ptr, ptr, ptr, i32 } %263, ptr %.fca.1.extract53, 1
  %265 = insertvalue { ptr, ptr, ptr, i32 } %264, ptr %.fca.2.extract55, 2
  %266 = insertvalue { ptr, ptr, ptr, i32 } %265, i32 %.fca.3.extract57, 3
  %267 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract41)
  %268 = load ptr, ptr %22, align 8
  %269 = call ptr %268(ptr %.fca.1.extract43)
  %270 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract41)
  %271 = load ptr, ptr %26, align 8
  %272 = call ptr %271(ptr %.fca.1.extract43)
  store ptr @_parameterization_Ptri32, ptr %14, align 8
  %273 = getelementptr inbounds i8, ptr %14, i64 8
  store ptr @_parameterization_Nil, ptr %273, align 8
  %274 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %14)
  %275 = call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract51)
  %276 = sext i32 %.fca.3.extract57 to i64
  %277 = getelementptr ptr, ptr %.fca.0.extract51, i64 %276
  %278 = getelementptr i8, ptr %277, i64 128
  %279 = load ptr, ptr %278, align 8
  store ptr @i32_typ, ptr %15, align 8
  %280 = getelementptr inbounds i8, ptr %15, i64 8
  store ptr @nil_typ, ptr %280, align 8
  %281 = call ptr %279({ ptr, ptr, ptr, i32 } %266, ptr nonnull %15)
  call void %281({ ptr, ptr, ptr, i32 } %266, { ptr, ptr, ptr, i32 } %266, ptr nonnull %14, i32 %179, { ptr, i160 } { ptr @nil_typ, i160 undef })
  br label %.thread365.sink.split

.thread365.sink.split:                            ; preds = %119, %246
  %.pn = phi { ptr, i160 } [ %258, %246 ], [ %131, %119 ]
  %.reg2mem34.sroa.3.0.ph = extractvalue { ptr, i160 } %.pn, 1
  %.reg2mem34.sroa.0.0.ph = extractvalue { ptr, i160 } %.pn, 0
  %282 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract41)
  %283 = getelementptr i8, ptr %22, i64 40
  %284 = load ptr, ptr %283, align 8
  %285 = load ptr, ptr %284, align 8
  %286 = call i32 %285(ptr %.fca.1.extract43)
  %287 = add i32 %286, -1
  %288 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull %.fca.0.extract41)
  %289 = load ptr, ptr %283, align 8
  %290 = getelementptr i8, ptr %289, i64 8
  %291 = load ptr, ptr %290, align 8
  call void %291(ptr %.fca.1.extract43, i32 %287)
  br label %.thread365

.thread365:                                       ; preds = %.thread365.sink.split, %155, %205
  %.reg2mem34.sroa.0.0 = phi ptr [ @nil_typ, %205 ], [ @nil_typ, %155 ], [ %.reg2mem34.sroa.0.0.ph, %.thread365.sink.split ]
  %.reg2mem34.sroa.3.0 = phi i160 [ poison, %205 ], [ poison, %155 ], [ %.reg2mem34.sroa.3.0.ph, %.thread365.sink.split ]
  %.reload35.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %.reg2mem34.sroa.0.0, 0
  %.reload35.fca.1.insert = insertvalue { ptr, i160 } %.reload35.fca.0.insert, i160 %.reg2mem34.sroa.3.0, 1
  ret { ptr, i160 } %.reload35.fca.1.insert
}

define void @HashMap_clear_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -2849643283898152329
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %4 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract)
  %5 = sext i32 %offset.i.i to i64
  %6 = getelementptr ptr, ptr %.fca.0.extract, i64 %5
  %7 = load ptr, ptr %6, align 8
  %8 = tail call ptr %7(ptr %.fca.1.extract)
  %9 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract)
  %10 = getelementptr i8, ptr %6, i64 8
  %11 = load ptr, ptr %10, align 8
  %12 = tail call ptr %11(ptr %.fca.1.extract)
  %result.i = tail call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %13 = getelementptr i8, ptr %result.i, i64 16
  store ptr @_parameterization_Nil, ptr %13, align 8
  %result.i1 = tail call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %14 = getelementptr i8, ptr %result.i1, i64 16
  store ptr %12, ptr %14, align 8
  %15 = getelementptr i8, ptr %result.i1, i64 8
  store ptr %8, ptr %15, align 8
  %16 = getelementptr i8, ptr %result.i1, i64 24
  store ptr null, ptr %16, align 8
  %17 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i1)
  store ptr @Entry, ptr %result.i1, align 8
  %18 = getelementptr i8, ptr %result.i, i64 8
  store ptr %result.i1, ptr %18, align 8
  %19 = getelementptr i8, ptr %result.i, i64 24
  store ptr null, ptr %19, align 8
  %20 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i)
  store ptr @union_typ, ptr %result.i, align 8
  %result.i2 = tail call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i, ptr %result.i2, align 8
  %21 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i2)
  %22 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Array, ptr undef, ptr undef, i32 undef }, ptr %result.i2, 1
  %23 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr undef, 2
  %24 = insertvalue { ptr, ptr, ptr, i32 } %23, i32 9, 3
  %25 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract)
  %26 = load ptr, ptr %6, align 8
  %27 = tail call ptr %26(ptr %.fca.1.extract)
  %28 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract)
  %29 = load ptr, ptr %10, align 8
  %30 = tail call ptr %29(ptr %.fca.1.extract)
  %31 = getelementptr i8, ptr %result.i2, i64 16
  store i32 8, ptr %31, align 4
  %32 = getelementptr i8, ptr %result.i2, i64 20
  store i32 8, ptr %32, align 4
  %result.i.i = tail call noalias dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nonnull @current_ptr) #29
  %33 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %34 = getelementptr i8, ptr %result.i2, i64 8
  store ptr %result.i.i, ptr %34, align 8
  %35 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract)
  %36 = getelementptr i8, ptr %6, i64 24
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr i8, ptr %37, i64 8
  %39 = load ptr, ptr %38, align 8
  tail call void %39(ptr %.fca.1.extract, { ptr, ptr, ptr, i32 } %24)
  %40 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract)
  %41 = load ptr, ptr %6, align 8
  %42 = tail call ptr %41(ptr %.fca.1.extract)
  %43 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract)
  %44 = load ptr, ptr %10, align 8
  %45 = tail call ptr %44(ptr %.fca.1.extract)
  %result.i17 = tail call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %46 = getelementptr i8, ptr %result.i17, i64 16
  store ptr @_parameterization_Nil, ptr %46, align 8
  %result.i18 = tail call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %47 = getelementptr i8, ptr %result.i18, i64 16
  store ptr %45, ptr %47, align 8
  %48 = getelementptr i8, ptr %result.i18, i64 8
  store ptr %42, ptr %48, align 8
  %49 = getelementptr i8, ptr %result.i18, i64 24
  store ptr null, ptr %49, align 8
  %50 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i18)
  store ptr @Entry, ptr %result.i18, align 8
  %51 = getelementptr i8, ptr %result.i17, i64 8
  store ptr %result.i18, ptr %51, align 8
  %52 = getelementptr i8, ptr %result.i17, i64 24
  store ptr null, ptr %52, align 8
  %53 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i17)
  store ptr @union_typ, ptr %result.i17, align 8
  %result.i19 = tail call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i17, ptr %result.i19, align 8
  %54 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i19)
  %55 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Array, ptr undef, ptr undef, i32 undef }, ptr %result.i19, 1
  %56 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr undef, 2
  %57 = insertvalue { ptr, ptr, ptr, i32 } %56, i32 9, 3
  %58 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract)
  %59 = load ptr, ptr %6, align 8
  %60 = tail call ptr %59(ptr %.fca.1.extract)
  %61 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract)
  %62 = load ptr, ptr %10, align 8
  %63 = tail call ptr %62(ptr %.fca.1.extract)
  %64 = getelementptr i8, ptr %result.i19, i64 16
  store i32 8, ptr %64, align 4
  %65 = getelementptr i8, ptr %result.i19, i64 20
  store i32 8, ptr %65, align 4
  %result.i.i85 = tail call noalias dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nonnull @current_ptr) #29
  %66 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %67 = getelementptr i8, ptr %result.i19, i64 8
  store ptr %result.i.i85, ptr %67, align 8
  %68 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract)
  %69 = getelementptr i8, ptr %6, i64 32
  %70 = load ptr, ptr %69, align 8
  %71 = getelementptr i8, ptr %70, i64 8
  %72 = load ptr, ptr %71, align 8
  tail call void %72(ptr %.fca.1.extract, { ptr, ptr, ptr, i32 } %57)
  %73 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract)
  %74 = getelementptr i8, ptr %6, i64 40
  %75 = load ptr, ptr %74, align 8
  %76 = getelementptr i8, ptr %75, i64 8
  %77 = load ptr, ptr %76, align 8
  tail call void %77(ptr %.fca.1.extract, i32 0)
  ret void
}

define i32 @HashMap_size_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -2849643283898152329
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %4 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract)
  %5 = sext i32 %offset.i.i to i64
  %6 = getelementptr ptr, ptr %.fca.0.extract, i64 %5
  %7 = getelementptr i8, ptr %6, i64 40
  %8 = load ptr, ptr %7, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = tail call i32 %9(ptr %.fca.1.extract)
  ret i32 %10
}

define { ptr, ptr, ptr, i32 } @HashMap_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract25 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract27 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract25, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract25, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract25, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -2849643283898152329
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %5 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract25)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract25, i64 %6
  %8 = getelementptr i8, ptr %7, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = load ptr, ptr %9, align 8
  %11 = tail call { ptr, ptr, ptr, i32 } %10(ptr %.fca.1.extract27)
  %.fca.0.extract17 = extractvalue { ptr, ptr, ptr, i32 } %11, 0
  %.fca.3.extract23 = extractvalue { ptr, ptr, ptr, i32 } %11, 3
  %hash_coef_ptr.i.i34 = getelementptr i8, ptr %.fca.0.extract17, i64 8
  %tbl_size_ptr.i.i35 = getelementptr i8, ptr %.fca.0.extract17, i64 16
  %offset_tbl_ptr.i.i36 = getelementptr i8, ptr %.fca.0.extract17, i64 40
  %hash_coef.i.i37 = load i64, ptr %hash_coef_ptr.i.i34, align 4
  %tbl_size.i.i38 = load i64, ptr %tbl_size_ptr.i.i35, align 4
  %offset_tbl.i.i39 = load ptr, ptr %offset_tbl_ptr.i.i36, align 8
  %product.i.i.i40 = mul i64 %hash_coef.i.i37, -5261542750394134544
  %shifted.i.i.i41 = lshr i64 %product.i.i.i40, 32
  %xored.i.i.i42 = xor i64 %shifted.i.i.i41, %product.i.i.i40
  %hash.i.i.i43 = and i64 %xored.i.i.i42, %tbl_size.i.i38
  %offset_ptr.i.i44 = getelementptr i32, ptr %offset_tbl.i.i39, i64 %hash.i.i.i43
  %offset.i.i45 = load i32, ptr %offset_ptr.i.i44, align 4
  %eq.i = icmp eq i32 %.fca.3.extract23, %offset.i.i45
  tail call void @llvm.assume(i1 %eq.i) #30
  %12 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract25)
  %13 = getelementptr i8, ptr %7, i64 32
  %14 = load ptr, ptr %13, align 8
  %15 = load ptr, ptr %14, align 8
  %16 = tail call { ptr, ptr, ptr, i32 } %15(ptr %.fca.1.extract27)
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %16, 0
  %.fca.3.extract15 = extractvalue { ptr, ptr, ptr, i32 } %16, 3
  %hash_coef_ptr.i.i48 = getelementptr i8, ptr %.fca.0.extract9, i64 8
  %tbl_size_ptr.i.i49 = getelementptr i8, ptr %.fca.0.extract9, i64 16
  %offset_tbl_ptr.i.i50 = getelementptr i8, ptr %.fca.0.extract9, i64 40
  %hash_coef.i.i51 = load i64, ptr %hash_coef_ptr.i.i48, align 4
  %tbl_size.i.i52 = load i64, ptr %tbl_size_ptr.i.i49, align 4
  %offset_tbl.i.i53 = load ptr, ptr %offset_tbl_ptr.i.i50, align 8
  %product.i.i.i54 = mul i64 %hash_coef.i.i51, -5261542750394134544
  %shifted.i.i.i55 = lshr i64 %product.i.i.i54, 32
  %xored.i.i.i56 = xor i64 %shifted.i.i.i55, %product.i.i.i54
  %hash.i.i.i57 = and i64 %xored.i.i.i56, %tbl_size.i.i52
  %offset_ptr.i.i58 = getelementptr i32, ptr %offset_tbl.i.i53, i64 %hash.i.i.i57
  %offset.i.i59 = load i32, ptr %offset_ptr.i.i58, align 4
  %eq.i62 = icmp eq i32 %.fca.3.extract15, %offset.i.i59
  tail call void @llvm.assume(i1 %eq.i62) #30
  %17 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract25)
  %18 = load ptr, ptr %7, align 8
  %19 = tail call ptr %18(ptr %.fca.1.extract27)
  %20 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract25)
  %21 = getelementptr i8, ptr %7, i64 8
  %22 = load ptr, ptr %21, align 8
  %23 = tail call ptr %22(ptr %.fca.1.extract27)
  %result.i = tail call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %24 = getelementptr i8, ptr %result.i, i64 16
  store ptr %23, ptr %24, align 8
  %25 = getelementptr i8, ptr %result.i, i64 8
  store ptr %19, ptr %25, align 8
  %26 = getelementptr i8, ptr %result.i, i64 24
  store ptr null, ptr %26, align 8
  %27 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i)
  store ptr @Pair, ptr %result.i, align 8
  %result.i63 = tail call noalias dereferenceable_or_null(104) ptr @bump_malloc_inner(i64 noundef 104, ptr nonnull @current_ptr) #29
  store ptr %19, ptr %result.i63, align 8
  %28 = getelementptr i8, ptr %result.i63, i64 8
  store ptr %23, ptr %28, align 8
  %29 = getelementptr i8, ptr %result.i63, i64 16
  store ptr %result.i, ptr %29, align 8
  %30 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %result.i63)
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  %32 = getelementptr inbounds i8, ptr %31, i64 8
  %33 = getelementptr inbounds i8, ptr %31, i64 24
  store ptr @HashMapIterator, ptr %31, align 8
  store ptr %result.i63, ptr %32, align 8
  store i32 9, ptr %33, align 8
  %34 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %31)
  %35 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract25)
  %36 = load ptr, ptr %8, align 8
  %37 = load ptr, ptr %36, align 8
  %38 = tail call { ptr, ptr, ptr, i32 } %37(ptr %.fca.1.extract27)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %38, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %38, 1
  %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %38, 2
  %.fca.3.extract7 = extractvalue { ptr, ptr, ptr, i32 } %38, 3
  %hash_coef_ptr.i.i65 = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i66 = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i67 = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i68 = load i64, ptr %hash_coef_ptr.i.i65, align 4
  %tbl_size.i.i69 = load i64, ptr %tbl_size_ptr.i.i66, align 4
  %offset_tbl.i.i70 = load ptr, ptr %offset_tbl_ptr.i.i67, align 8
  %product.i.i.i71 = mul i64 %hash_coef.i.i68, -5261542750394134544
  %shifted.i.i.i72 = lshr i64 %product.i.i.i71, 32
  %xored.i.i.i73 = xor i64 %shifted.i.i.i72, %product.i.i.i71
  %hash.i.i.i74 = and i64 %xored.i.i.i73, %tbl_size.i.i69
  %offset_ptr.i.i75 = getelementptr i32, ptr %offset_tbl.i.i70, i64 %hash.i.i.i74
  %offset.i.i76 = load i32, ptr %offset_ptr.i.i75, align 4
  %eq.i79 = icmp eq i32 %.fca.3.extract7, %offset.i.i76
  tail call void @llvm.assume(i1 %eq.i79) #30
  %39 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract25)
  %40 = load ptr, ptr %13, align 8
  %41 = load ptr, ptr %40, align 8
  %42 = tail call { ptr, ptr, ptr, i32 } %41(ptr %.fca.1.extract27)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %42, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %42, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %42, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %42, 3
  %hash_coef_ptr.i.i81 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i82 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i83 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i84 = load i64, ptr %hash_coef_ptr.i.i81, align 4
  %tbl_size.i.i85 = load i64, ptr %tbl_size_ptr.i.i82, align 4
  %offset_tbl.i.i86 = load ptr, ptr %offset_tbl_ptr.i.i83, align 8
  %product.i.i.i87 = mul i64 %hash_coef.i.i84, -5261542750394134544
  %shifted.i.i.i88 = lshr i64 %product.i.i.i87, 32
  %xored.i.i.i89 = xor i64 %shifted.i.i.i88, %product.i.i.i87
  %hash.i.i.i90 = and i64 %xored.i.i.i89, %tbl_size.i.i85
  %offset_ptr.i.i91 = getelementptr i32, ptr %offset_tbl.i.i86, i64 %hash.i.i.i90
  %offset.i.i92 = load i32, ptr %offset_ptr.i.i91, align 4
  %eq.i95 = icmp eq i32 %.fca.3.extract, %offset.i.i92
  tail call void @llvm.assume(i1 %eq.i95) #30
  %43 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %44 = insertvalue { ptr, ptr, ptr, i32 } %43, ptr %.fca.1.extract3, 1
  %45 = insertvalue { ptr, ptr, ptr, i32 } %44, ptr %.fca.2.extract5, 2
  %46 = insertvalue { ptr, ptr, ptr, i32 } { ptr @HashMapIterator, ptr undef, ptr undef, i32 undef }, ptr %result.i63, 1
  %47 = getelementptr inbounds i8, ptr %31, i64 16
  %48 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract25)
  %49 = load ptr, ptr %7, align 8
  %50 = tail call ptr %49(ptr %.fca.1.extract27)
  %51 = tail call ptr @llvm.invariant.start.p0(i64 640, ptr %.fca.0.extract25)
  %52 = load ptr, ptr %21, align 8
  %53 = tail call ptr %52(ptr %.fca.1.extract27)
  %54 = tail call ptr @llvm.invariant.start.p0(i64 128, ptr nonnull @HashMapIterator)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %4)
  %hash_coef.i.i37.i = load i64, ptr %hash_coef_ptr.i.i65, align 4
  %tbl_size.i.i38.i = load i64, ptr %tbl_size_ptr.i.i66, align 4
  %offset_tbl.i.i39.i = load ptr, ptr %offset_tbl_ptr.i.i67, align 8
  %product.i.i.i40.i = mul i64 %hash_coef.i.i37.i, -5261542750394134544
  %shifted.i.i.i41.i = lshr i64 %product.i.i.i40.i, 32
  %xored.i.i.i42.i = xor i64 %shifted.i.i.i41.i, %product.i.i.i40.i
  %hash.i.i.i43.i = and i64 %xored.i.i.i42.i, %tbl_size.i.i38.i
  %offset_ptr.i.i44.i = getelementptr i32, ptr %offset_tbl.i.i39.i, i64 %hash.i.i.i43.i
  %offset.i.i59.i = load i32, ptr %offset_ptr.i.i44.i, align 4
  %55 = tail call ptr @llvm.invariant.start.p0(i64 128, ptr nonnull @HashMapIterator)
  %56 = getelementptr i8, ptr %result.i63, i64 24
  store ptr %.fca.0.extract1, ptr %56, align 8
  %57 = getelementptr i8, ptr %result.i63, i64 32
  store ptr %.fca.1.extract3, ptr %57, align 8
  %58 = getelementptr i8, ptr %result.i63, i64 40
  store ptr %.fca.2.extract5, ptr %58, align 8
  %59 = getelementptr i8, ptr %result.i63, i64 48
  store i32 %offset.i.i59.i, ptr %59, align 4
  %hash_coef.i.i65.i = load i64, ptr %hash_coef_ptr.i.i81, align 4
  %tbl_size.i.i66.i = load i64, ptr %tbl_size_ptr.i.i82, align 4
  %offset_tbl.i.i67.i = load ptr, ptr %offset_tbl_ptr.i.i83, align 8
  %product.i.i.i68.i = mul i64 %hash_coef.i.i65.i, -5261542750394134544
  %shifted.i.i.i69.i = lshr i64 %product.i.i.i68.i, 32
  %xored.i.i.i70.i = xor i64 %shifted.i.i.i69.i, %product.i.i.i68.i
  %hash.i.i.i71.i = and i64 %xored.i.i.i70.i, %tbl_size.i.i66.i
  %offset_ptr.i.i72.i = getelementptr i32, ptr %offset_tbl.i.i67.i, i64 %hash.i.i.i71.i
  %offset.i.i87.i = load i32, ptr %offset_ptr.i.i72.i, align 4
  %60 = getelementptr i8, ptr %result.i63, i64 56
  store ptr %.fca.0.extract, ptr %60, align 8
  %61 = getelementptr i8, ptr %result.i63, i64 64
  store ptr %.fca.1.extract, ptr %61, align 8
  %62 = getelementptr i8, ptr %result.i63, i64 72
  store ptr %.fca.2.extract, ptr %62, align 8
  %63 = getelementptr i8, ptr %result.i63, i64 80
  store i32 %offset.i.i87.i, ptr %63, align 4
  %64 = getelementptr i8, ptr %result.i63, i64 92
  store i32 0, ptr %64, align 4
  %65 = getelementptr i8, ptr %result.i63, i64 88
  store i32 1, ptr %65, align 4
  %66 = tail call ptr @llvm.invariant.start.p0(i64 128, ptr nonnull @HashMapIterator)
  %67 = insertvalue { ptr, ptr, ptr, i32 } %45, i32 %offset.i.i59.i, 3
  %hash_coef.i.i93.i = load i64, ptr %hash_coef_ptr.i.i65, align 4
  %tbl_size.i.i94.i = load i64, ptr %tbl_size_ptr.i.i66, align 4
  %offset_tbl.i.i95.i = load ptr, ptr %offset_tbl_ptr.i.i67, align 8
  %product.i.i.i96.i = mul i64 %hash_coef.i.i93.i, -5261542750394134544
  %shifted.i.i.i97.i = lshr i64 %product.i.i.i96.i, 32
  %xored.i.i.i98.i = xor i64 %shifted.i.i.i97.i, %product.i.i.i96.i
  %hash.i.i.i99.i = and i64 %xored.i.i.i98.i, %tbl_size.i.i94.i
  %offset_ptr.i.i100.i = getelementptr i32, ptr %offset_tbl.i.i95.i, i64 %hash.i.i.i99.i
  %offset.i.i101.i = load i32, ptr %offset_ptr.i.i100.i, align 4
  %eq.i.i = icmp eq i32 %offset.i.i59.i, %offset.i.i101.i
  tail call void @llvm.assume(i1 %eq.i.i) #30
  %68 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %69 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract1)
  %70 = sext i32 %offset.i.i59.i to i64
  %71 = getelementptr ptr, ptr %.fca.0.extract1, i64 %70
  %72 = getelementptr i8, ptr %71, i64 64
  %73 = load ptr, ptr %72, align 8
  %74 = call ptr %73({ ptr, ptr, ptr, i32 } %67, ptr nonnull %4)
  %75 = call i32 %74({ ptr, ptr, ptr, i32 } %67, { ptr, ptr, ptr, i32 } %67, ptr nonnull %4)
  %76 = getelementptr i8, ptr %result.i63, i64 96
  store i32 %75, ptr %76, align 4
  %77 = call ptr @llvm.invariant.start.p0(i64 128, ptr nonnull @HashMapIterator)
  %78 = load ptr, ptr %60, align 8
  %79 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %78, 0
  %80 = load ptr, ptr %61, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %80, 1
  %82 = load ptr, ptr %62, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %81, ptr %82, 2
  %84 = load i32, ptr %63, align 4
  %85 = insertvalue { ptr, ptr, ptr, i32 } %83, i32 %84, 3
  %hash_coef_ptr.i.i104.i = getelementptr i8, ptr %78, i64 8
  %tbl_size_ptr.i.i105.i = getelementptr i8, ptr %78, i64 16
  %offset_tbl_ptr.i.i106.i = getelementptr i8, ptr %78, i64 40
  %hash_coef.i.i107.i = load i64, ptr %hash_coef_ptr.i.i104.i, align 4
  %tbl_size.i.i108.i = load i64, ptr %tbl_size_ptr.i.i105.i, align 4
  %offset_tbl.i.i109.i = load ptr, ptr %offset_tbl_ptr.i.i106.i, align 8
  %product.i.i.i110.i = mul i64 %hash_coef.i.i107.i, -5261542750394134544
  %shifted.i.i.i111.i = lshr i64 %product.i.i.i110.i, 32
  %xored.i.i.i112.i = xor i64 %shifted.i.i.i111.i, %product.i.i.i110.i
  %hash.i.i.i113.i = and i64 %xored.i.i.i112.i, %tbl_size.i.i108.i
  %offset_ptr.i.i114.i = getelementptr i32, ptr %offset_tbl.i.i109.i, i64 %hash.i.i.i113.i
  %offset.i.i115.i = load i32, ptr %offset_ptr.i.i114.i, align 4
  %eq.i118.i = icmp eq i32 %84, %offset.i.i115.i
  call void @llvm.assume(i1 %eq.i118.i) #30
  %86 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %87 = call ptr @llvm.invariant.start.p0(i64 600, ptr %78)
  %88 = sext i32 %84 to i64
  %89 = getelementptr ptr, ptr %78, i64 %88
  %90 = getelementptr i8, ptr %89, i64 64
  %91 = load ptr, ptr %90, align 8
  %92 = call ptr %91({ ptr, ptr, ptr, i32 } %85, ptr nonnull %4)
  %93 = call i32 %92({ ptr, ptr, ptr, i32 } %85, { ptr, ptr, ptr, i32 } %85, ptr nonnull %4)
  %94 = call ptr @llvm.invariant.start.p0(i64 128, ptr nonnull @HashMapIterator)
  %95 = getelementptr i8, ptr %result.i63, i64 100
  store i32 %93, ptr %95, align 4
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %4)
  %96 = load ptr, ptr %47, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %46, ptr %96, 2
  %98 = insertvalue { ptr, ptr, ptr, i32 } %97, i32 22, 3
  ret { ptr, ptr, ptr, i32 } %98
}

define linkonce_odr { ptr, i160 } @_box_union_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %4 = getelementptr inbounds i8, ptr %3, i64 8
  store ptr @union_typ, ptr %3, align 8
  %5 = getelementptr i8, ptr %1, i64 8
  %6 = load i64, ptr %5, align 4
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %_size_union_typ.exit, label %.lr.ph.i

.lr.ph.i:                                         ; preds = %2, %.lr.ph.i
  %.reg2mem20.010.reg2mem.0.i = phi i64 [ %15, %.lr.ph.i ], [ 1, %2 ]
  %.reg2mem22.011.reg2mem.0.i = phi i64 [ %21, %.lr.ph.i ], [ 0, %2 ]
  %.reg2mem14.0.i = phi i64 [ %22, %.lr.ph.i ], [ 1, %2 ]
  %.in.reg2mem.0.i = phi i64 [ %24, %.lr.ph.i ], [ %6, %2 ]
  %8 = inttoptr i64 %.in.reg2mem.0.i to ptr
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr i8, ptr %9, i64 48
  %11 = load ptr, ptr %10, align 8
  %12 = tail call { i64, i64 } %11(ptr nonnull %8)
  %13 = extractvalue { i64, i64 } %12, 0
  %14 = extractvalue { i64, i64 } %12, 1
  %15 = tail call i64 @llvm.umax.i64(i64 %14, i64 %.reg2mem20.010.reg2mem.0.i)
  %16 = urem i64 %.reg2mem22.011.reg2mem.0.i, %14
  %17 = icmp eq i64 %16, 0
  %18 = sub i64 %14, %16
  %19 = select i1 %17, i64 0, i64 %18
  %20 = add i64 %13, %.reg2mem22.011.reg2mem.0.i
  %21 = tail call i64 @llvm.umax.i64(i64 %20, i64 %19)
  %22 = add i64 %.reg2mem14.0.i, 1
  %23 = getelementptr ptr, ptr %1, i64 %22
  %24 = load i64, ptr %23, align 4
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %.lr.ph.._crit_edge_crit_edge.i, label %.lr.ph.i

.lr.ph.._crit_edge_crit_edge.i:                   ; preds = %.lr.ph.i
  %26 = add i64 %21, 8
  br label %_size_union_typ.exit

_size_union_typ.exit:                             ; preds = %2, %.lr.ph.._crit_edge_crit_edge.i
  %.reg2mem22.0.lcssa.reg2mem.0.i = phi i64 [ %26, %.lr.ph.._crit_edge_crit_edge.i ], [ 8, %2 ]
  %.reg2mem20.0.lcssa.reg2mem.0.i = phi i64 [ %15, %.lr.ph.._crit_edge_crit_edge.i ], [ 1, %2 ]
  %27 = urem i64 %.reg2mem22.0.lcssa.reg2mem.0.i, %.reg2mem20.0.lcssa.reg2mem.0.i
  %28 = icmp eq i64 %27, 0
  %29 = sub i64 %.reg2mem20.0.lcssa.reg2mem.0.i, %27
  %30 = select i1 %28, i64 0, i64 %29
  %31 = add i64 %30, %.reg2mem22.0.lcssa.reg2mem.0.i
  %32 = icmp eq i64 %31, 32
  br i1 %32, label %._crit_edge, label %33

._crit_edge:                                      ; preds = %33, %_size_union_typ.exit
  %.reg2mem9.0 = phi ptr [ %3, %_size_union_typ.exit ], [ %4, %33 ]
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 1 %.reg2mem9.0, ptr align 1 %0, i64 %31, i1 false)
  %.pre = load ptr, ptr %3, align 8
  br label %36

33:                                               ; preds = %_size_union_typ.exit
  %34 = icmp slt i64 %31, 17
  br i1 %34, label %._crit_edge, label %35

35:                                               ; preds = %33
  %result.i = tail call noalias ptr @bump_malloc_inner(i64 noundef %31, ptr nonnull @current_ptr) #29
  tail call void @llvm.memcpy.inline.p0.p0.i64(ptr align 1 %result.i, ptr align 1 %0, i64 %31, i1 false)
  store ptr %result.i, ptr %4, align 8
  br label %36

36:                                               ; preds = %35, %._crit_edge
  %37 = phi ptr [ @union_typ, %35 ], [ %.pre, %._crit_edge ]
  %38 = insertvalue { ptr, i160 } undef, ptr %37, 0
  %39 = load i160, ptr %4, align 8
  %40 = insertvalue { ptr, i160 } %38, i160 %39, 1
  ret { ptr, i160 } %40
}

define linkonce_odr { i64, i64 } @_size_nil_typ(ptr %0) {
  ret { i64, i64 } { i64 ptrtoint (ptr getelementptr ([0 x i8], ptr null, i32 1) to i64), i64 1 }
}

define linkonce_odr { ptr, i160 } @_box_nil_typ(ptr %0, ptr %1) {
  ret { ptr, i160 } { ptr @nil_typ, i160 undef }
}

define linkonce_odr void @_unbox_nil_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_HashMapIterator(ptr nocapture readnone %0) #5 {
  ret { i64, i64 } { i64 104, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @HashMapIterator_field_HashMapIterator_0(ptr nocapture readonly %0) #0 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @HashMapIterator_field_HashMapIterator_1(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @HashMapIterator_field_HashMapIterator_2(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @HashMapIterator_B_init_map_table1ArrayEntryK._V_or_Nil_map_table2ArrayEntryK._V_or_Nil({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 160
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @HashMapIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 168
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @HashMapIterator_init_map_table1ArrayEntryK._V_or_Nil_map_table2ArrayEntryK._V_or_Nil({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca [0 x ptr], align 8
  %.fca.0.extract25 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract27 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract25, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract25, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract25, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -704669437586349537
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract17 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract19 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract21 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %hash_coef_ptr.i.i34 = getelementptr i8, ptr %.fca.0.extract17, i64 8
  %tbl_size_ptr.i.i35 = getelementptr i8, ptr %.fca.0.extract17, i64 16
  %offset_tbl_ptr.i.i36 = getelementptr i8, ptr %.fca.0.extract17, i64 40
  %hash_coef.i.i37 = load i64, ptr %hash_coef_ptr.i.i34, align 4
  %tbl_size.i.i38 = load i64, ptr %tbl_size_ptr.i.i35, align 4
  %offset_tbl.i.i39 = load ptr, ptr %offset_tbl_ptr.i.i36, align 8
  %product.i.i.i40 = mul i64 %hash_coef.i.i37, -5261542750394134544
  %shifted.i.i.i41 = lshr i64 %product.i.i.i40, 32
  %xored.i.i.i42 = xor i64 %shifted.i.i.i41, %product.i.i.i40
  %hash.i.i.i43 = and i64 %xored.i.i.i42, %tbl_size.i.i38
  %offset_ptr.i.i44 = getelementptr i32, ptr %offset_tbl.i.i39, i64 %hash.i.i.i43
  %offset.i.i59 = load i32, ptr %offset_ptr.i.i44, align 4
  %7 = tail call ptr @llvm.invariant.start.p0(i64 128, ptr %.fca.0.extract25)
  %8 = sext i32 %offset.i.i to i64
  %9 = getelementptr ptr, ptr %.fca.0.extract25, i64 %8
  %10 = getelementptr i8, ptr %9, i64 24
  %11 = load ptr, ptr %10, align 8
  %12 = getelementptr i8, ptr %11, i64 8
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract17, 0
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, ptr %.fca.1.extract19, 1
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, ptr %.fca.2.extract21, 2
  %17 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %offset.i.i59, 3
  tail call void %13(ptr %.fca.1.extract27, { ptr, ptr, ptr, i32 } %17)
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %.fca.2.extract13 = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %hash_coef_ptr.i.i62 = getelementptr i8, ptr %.fca.0.extract9, i64 8
  %tbl_size_ptr.i.i63 = getelementptr i8, ptr %.fca.0.extract9, i64 16
  %offset_tbl_ptr.i.i64 = getelementptr i8, ptr %.fca.0.extract9, i64 40
  %hash_coef.i.i65 = load i64, ptr %hash_coef_ptr.i.i62, align 4
  %tbl_size.i.i66 = load i64, ptr %tbl_size_ptr.i.i63, align 4
  %offset_tbl.i.i67 = load ptr, ptr %offset_tbl_ptr.i.i64, align 8
  %product.i.i.i68 = mul i64 %hash_coef.i.i65, -5261542750394134544
  %shifted.i.i.i69 = lshr i64 %product.i.i.i68, 32
  %xored.i.i.i70 = xor i64 %shifted.i.i.i69, %product.i.i.i68
  %hash.i.i.i71 = and i64 %xored.i.i.i70, %tbl_size.i.i66
  %offset_ptr.i.i72 = getelementptr i32, ptr %offset_tbl.i.i67, i64 %hash.i.i.i71
  %offset.i.i87 = load i32, ptr %offset_ptr.i.i72, align 4
  %18 = tail call ptr @llvm.invariant.start.p0(i64 128, ptr %.fca.0.extract25)
  %19 = getelementptr i8, ptr %9, i64 32
  %20 = load ptr, ptr %19, align 8
  %21 = getelementptr i8, ptr %20, i64 8
  %22 = load ptr, ptr %21, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract9, 0
  %24 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %.fca.1.extract11, 1
  %25 = insertvalue { ptr, ptr, ptr, i32 } %24, ptr %.fca.2.extract13, 2
  %26 = insertvalue { ptr, ptr, ptr, i32 } %25, i32 %offset.i.i87, 3
  tail call void %22(ptr %.fca.1.extract27, { ptr, ptr, ptr, i32 } %26)
  %27 = tail call ptr @llvm.invariant.start.p0(i64 128, ptr %.fca.0.extract25)
  %28 = getelementptr i8, ptr %9, i64 48
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  tail call void %31(ptr %.fca.1.extract27, i32 0)
  %32 = tail call ptr @llvm.invariant.start.p0(i64 128, ptr %.fca.0.extract25)
  %33 = getelementptr i8, ptr %9, i64 40
  %34 = load ptr, ptr %33, align 8
  %35 = getelementptr i8, ptr %34, i64 8
  %36 = load ptr, ptr %35, align 8
  tail call void %36(ptr %.fca.1.extract27, i32 1)
  %37 = tail call ptr @llvm.invariant.start.p0(i64 128, ptr %.fca.0.extract25)
  %38 = load ptr, ptr %10, align 8
  %39 = load ptr, ptr %38, align 8
  %40 = tail call { ptr, ptr, ptr, i32 } %39(ptr %.fca.1.extract27)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %40, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %40, 1
  %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %40, 2
  %.fca.3.extract7 = extractvalue { ptr, ptr, ptr, i32 } %40, 3
  %hash_coef_ptr.i.i90 = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i91 = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i92 = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i93 = load i64, ptr %hash_coef_ptr.i.i90, align 4
  %tbl_size.i.i94 = load i64, ptr %tbl_size_ptr.i.i91, align 4
  %offset_tbl.i.i95 = load ptr, ptr %offset_tbl_ptr.i.i92, align 8
  %product.i.i.i96 = mul i64 %hash_coef.i.i93, -5261542750394134544
  %shifted.i.i.i97 = lshr i64 %product.i.i.i96, 32
  %xored.i.i.i98 = xor i64 %shifted.i.i.i97, %product.i.i.i96
  %hash.i.i.i99 = and i64 %xored.i.i.i98, %tbl_size.i.i94
  %offset_ptr.i.i100 = getelementptr i32, ptr %offset_tbl.i.i95, i64 %hash.i.i.i99
  %offset.i.i101 = load i32, ptr %offset_ptr.i.i100, align 4
  %eq.i = icmp eq i32 %.fca.3.extract7, %offset.i.i101
  tail call void @llvm.assume(i1 %eq.i) #30
  %41 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %42 = insertvalue { ptr, ptr, ptr, i32 } %41, ptr %.fca.1.extract3, 1
  %43 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %.fca.2.extract5, 2
  %44 = insertvalue { ptr, ptr, ptr, i32 } %43, i32 %.fca.3.extract7, 3
  %45 = tail call ptr @llvm.invariant.start.p0(i64 128, ptr %.fca.0.extract25)
  %46 = load ptr, ptr %9, align 8
  %47 = tail call ptr %46(ptr %.fca.1.extract27)
  %48 = tail call ptr @llvm.invariant.start.p0(i64 128, ptr %.fca.0.extract25)
  %49 = getelementptr i8, ptr %9, i64 8
  %50 = load ptr, ptr %49, align 8
  %51 = tail call ptr %50(ptr %.fca.1.extract27)
  %52 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %6)
  %53 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract1)
  %54 = sext i32 %.fca.3.extract7 to i64
  %55 = getelementptr ptr, ptr %.fca.0.extract1, i64 %54
  %56 = getelementptr i8, ptr %55, i64 64
  %57 = load ptr, ptr %56, align 8
  %58 = call ptr %57({ ptr, ptr, ptr, i32 } %44, ptr nonnull %6)
  %59 = call i32 %58({ ptr, ptr, ptr, i32 } %44, { ptr, ptr, ptr, i32 } %44, ptr nonnull %6)
  %60 = call ptr @llvm.invariant.start.p0(i64 128, ptr %.fca.0.extract25)
  %61 = getelementptr i8, ptr %9, i64 56
  %62 = load ptr, ptr %61, align 8
  %63 = getelementptr i8, ptr %62, i64 8
  %64 = load ptr, ptr %63, align 8
  call void %64(ptr %.fca.1.extract27, i32 %59)
  %65 = call ptr @llvm.invariant.start.p0(i64 128, ptr %.fca.0.extract25)
  %66 = load ptr, ptr %19, align 8
  %67 = load ptr, ptr %66, align 8
  %68 = call { ptr, ptr, ptr, i32 } %67(ptr %.fca.1.extract27)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %68, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %68, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %68, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %68, 3
  %hash_coef_ptr.i.i104 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i105 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i106 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i107 = load i64, ptr %hash_coef_ptr.i.i104, align 4
  %tbl_size.i.i108 = load i64, ptr %tbl_size_ptr.i.i105, align 4
  %offset_tbl.i.i109 = load ptr, ptr %offset_tbl_ptr.i.i106, align 8
  %product.i.i.i110 = mul i64 %hash_coef.i.i107, -5261542750394134544
  %shifted.i.i.i111 = lshr i64 %product.i.i.i110, 32
  %xored.i.i.i112 = xor i64 %shifted.i.i.i111, %product.i.i.i110
  %hash.i.i.i113 = and i64 %xored.i.i.i112, %tbl_size.i.i108
  %offset_ptr.i.i114 = getelementptr i32, ptr %offset_tbl.i.i109, i64 %hash.i.i.i113
  %offset.i.i115 = load i32, ptr %offset_ptr.i.i114, align 4
  %eq.i118 = icmp eq i32 %.fca.3.extract, %offset.i.i115
  call void @llvm.assume(i1 %eq.i118) #30
  %69 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %70 = insertvalue { ptr, ptr, ptr, i32 } %69, ptr %.fca.1.extract, 1
  %71 = insertvalue { ptr, ptr, ptr, i32 } %70, ptr %.fca.2.extract, 2
  %72 = insertvalue { ptr, ptr, ptr, i32 } %71, i32 %.fca.3.extract, 3
  %73 = call ptr @llvm.invariant.start.p0(i64 128, ptr %.fca.0.extract25)
  %74 = load ptr, ptr %9, align 8
  %75 = call ptr %74(ptr %.fca.1.extract27)
  %76 = call ptr @llvm.invariant.start.p0(i64 128, ptr %.fca.0.extract25)
  %77 = load ptr, ptr %49, align 8
  %78 = call ptr %77(ptr %.fca.1.extract27)
  %79 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %6)
  %80 = call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract)
  %81 = sext i32 %.fca.3.extract to i64
  %82 = getelementptr ptr, ptr %.fca.0.extract, i64 %81
  %83 = getelementptr i8, ptr %82, i64 64
  %84 = load ptr, ptr %83, align 8
  %85 = call ptr %84({ ptr, ptr, ptr, i32 } %72, ptr nonnull %6)
  %86 = call i32 %85({ ptr, ptr, ptr, i32 } %72, { ptr, ptr, ptr, i32 } %72, ptr nonnull %6)
  %87 = call ptr @llvm.invariant.start.p0(i64 128, ptr %.fca.0.extract25)
  %88 = getelementptr i8, ptr %9, i64 64
  %89 = load ptr, ptr %88, align 8
  %90 = getelementptr i8, ptr %89, i64 8
  %91 = load ptr, ptr %90, align 8
  call void %91(ptr %.fca.1.extract27, i32 %86)
  ret void
}

define { ptr, i160 } @HashMapIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %5 = alloca [1 x ptr], align 8
  %6 = alloca { ptr }, align 8
  %.sroa.3268 = alloca i160, align 8
  %.sroa.0435 = alloca ptr, align 8
  %.sroa.1436 = alloca [20 x i8], align 8
  %.sroa.0265 = alloca ptr, align 8
  %.sroa.2266 = alloca i160, align 8
  %.sroa.0257 = alloca ptr, align 8
  %.sroa.1258 = alloca i160, align 8
  %.sroa.0255 = alloca ptr, align 8
  %.sroa.2256 = alloca i160, align 8
  %.sroa.0247 = alloca ptr, align 8
  %.sroa.1248 = alloca i160, align 8
  %.sroa.0432 = alloca ptr, align 8
  %.sroa.1433 = alloca ptr, align 8
  %.sroa.3434 = alloca ptr, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.sroa.0245 = alloca ptr, align 8
  %.sroa.2246 = alloca i160, align 8
  %.sroa.0237 = alloca ptr, align 8
  %.sroa.2238 = alloca i160, align 8
  %.sroa.0235 = alloca ptr, align 8
  %.sroa.2236 = alloca i160, align 8
  %.sroa.0227 = alloca ptr, align 8
  %.sroa.2228 = alloca i160, align 8
  %.sroa.0225 = alloca ptr, align 8
  %.sroa.2226 = alloca i160, align 8
  %.sroa.0223 = alloca ptr, align 8
  %.sroa.2224 = alloca i160, align 8
  %8 = alloca [2 x ptr], align 8
  %9 = alloca { ptr, ptr }, align 8
  %10 = alloca [1 x ptr], align 8
  %11 = alloca { ptr }, align 8
  %.sroa.3 = alloca i160, align 8
  %.sroa.0427 = alloca ptr, align 8
  %.sroa.1428 = alloca [20 x i8], align 8
  %.sroa.0424 = alloca ptr, align 8
  %.sroa.1425 = alloca i160, align 8
  %.sroa.0156 = alloca ptr, align 8
  %.sroa.1157 = alloca i160, align 8
  %.sroa.0422 = alloca ptr, align 8
  %.sroa.1423 = alloca i160, align 8
  %.sroa.0143 = alloca ptr, align 8
  %.sroa.1 = alloca i160, align 8
  %.sroa.0419 = alloca ptr, align 8
  %.sroa.1420 = alloca ptr, align 8
  %.sroa.3421 = alloca ptr, align 8
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.sroa.0411 = alloca ptr, align 8
  %.sroa.1412 = alloca i160, align 8
  %.sroa.0103 = alloca ptr, align 8
  %.sroa.2104 = alloca i160, align 8
  %.sroa.0409 = alloca ptr, align 8
  %.sroa.1410 = alloca i160, align 8
  %.sroa.083 = alloca ptr, align 8
  %.sroa.284 = alloca i160, align 8
  %.sroa.071 = alloca ptr, align 8
  %.sroa.272 = alloca i160, align 8
  %.sroa.0 = alloca ptr, align 8
  %.sroa.2 = alloca i160, align 8
  %13 = alloca [2 x ptr], align 8
  %14 = alloca { ptr, ptr }, align 8
  %.fca.0.extract17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract18 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract17, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract17, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract17, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -704669437586349537
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.reg2mem513.0.sroa.gep45 = getelementptr inbounds i8, ptr %9, i64 8
  %.reg2mem513.0.sroa.gep46 = getelementptr inbounds i8, ptr %14, i64 8
  %.reg2mem515.0.sroa.gep49 = getelementptr inbounds i8, ptr %8, i64 8
  %.reg2mem515.0.sroa.gep50 = getelementptr inbounds i8, ptr %13, i64 8
  %.reg2mem537.0.sroa.gep = getelementptr inbounds i8, ptr %7, i64 8
  %.reg2mem537.0.sroa.gep113 = getelementptr inbounds i8, ptr %12, i64 8
  %.reg2mem537.0.sroa.gep115 = getelementptr inbounds i8, ptr %7, i64 24
  %.reg2mem537.0.sroa.gep116 = getelementptr inbounds i8, ptr %12, i64 24
  %.reg2mem537.0.sroa.gep124 = getelementptr inbounds i8, ptr %7, i64 16
  %.reg2mem537.0.sroa.gep125 = getelementptr inbounds i8, ptr %12, i64 16
  %.sroa.1436.8.sroa_idx = getelementptr inbounds i8, ptr %.sroa.1436, i64 8
  %.sroa.1428.8.sroa_idx = getelementptr inbounds i8, ptr %.sroa.1428, i64 8
  %.sroa.1436.16.sroa_idx551 = getelementptr inbounds i8, ptr %.sroa.1436, i64 16
  %.sroa.1428.16.sroa_idx550 = getelementptr inbounds i8, ptr %.sroa.1428, i64 16
  %15 = tail call ptr @llvm.invariant.start.p0(i64 128, ptr nonnull %.fca.0.extract17)
  %16 = sext i32 %offset.i.i to i64
  %17 = getelementptr ptr, ptr %.fca.0.extract17, i64 %16
  %18 = getelementptr i8, ptr %17, i64 40
  %19 = getelementptr i8, ptr %17, i64 48
  %20 = getelementptr i8, ptr %17, i64 56
  %21 = getelementptr i8, ptr %17, i64 24
  %22 = getelementptr i8, ptr %17, i64 8
  br label %23

23:                                               ; preds = %.critedge270, %3
  %24 = load ptr, ptr %18, align 8
  %25 = load ptr, ptr %24, align 8
  %26 = call i32 %25(ptr %.fca.1.extract18)
  %27 = icmp eq i32 %26, 1
  br i1 %27, label %.preheader539, label %.critedge270

.preheader539:                                    ; preds = %23
  %28 = call ptr @llvm.invariant.start.p0(i64 128, ptr nonnull %.fca.0.extract17)
  br label %29

29:                                               ; preds = %.preheader539, %39
  %30 = load ptr, ptr %19, align 8
  %31 = load ptr, ptr %30, align 8
  %32 = call i32 %31(ptr %.fca.1.extract18)
  %33 = call ptr @llvm.invariant.start.p0(i64 128, ptr nonnull %.fca.0.extract17)
  %34 = load ptr, ptr %20, align 8
  %35 = load ptr, ptr %34, align 8
  %36 = call i32 %35(ptr %.fca.1.extract18)
  %37 = icmp slt i32 %32, %36
  %38 = call ptr @llvm.invariant.start.p0(i64 128, ptr nonnull %.fca.0.extract17)
  br i1 %37, label %39, label %77

39:                                               ; preds = %29
  %40 = load ptr, ptr %19, align 8
  %41 = load ptr, ptr %40, align 8
  %42 = call i32 %41(ptr %.fca.1.extract18)
  %43 = call ptr @llvm.invariant.start.p0(i64 128, ptr nonnull %.fca.0.extract17)
  %44 = load ptr, ptr %21, align 8
  %45 = load ptr, ptr %44, align 8
  %46 = call { ptr, ptr, ptr, i32 } %45(ptr %.fca.1.extract18)
  %.fca.0.extract35 = extractvalue { ptr, ptr, ptr, i32 } %46, 0
  %.fca.1.extract37 = extractvalue { ptr, ptr, ptr, i32 } %46, 1
  %.fca.2.extract39 = extractvalue { ptr, ptr, ptr, i32 } %46, 2
  %.fca.3.extract41 = extractvalue { ptr, ptr, ptr, i32 } %46, 3
  %hash_coef_ptr.i.i272 = getelementptr i8, ptr %.fca.0.extract35, i64 8
  %tbl_size_ptr.i.i273 = getelementptr i8, ptr %.fca.0.extract35, i64 16
  %offset_tbl_ptr.i.i274 = getelementptr i8, ptr %.fca.0.extract35, i64 40
  %hash_coef.i.i275 = load i64, ptr %hash_coef_ptr.i.i272, align 4
  %tbl_size.i.i276 = load i64, ptr %tbl_size_ptr.i.i273, align 4
  %offset_tbl.i.i277 = load ptr, ptr %offset_tbl_ptr.i.i274, align 8
  %product.i.i.i278 = mul i64 %hash_coef.i.i275, -5261542750394134544
  %shifted.i.i.i279 = lshr i64 %product.i.i.i278, 32
  %xored.i.i.i280 = xor i64 %shifted.i.i.i279, %product.i.i.i278
  %hash.i.i.i281 = and i64 %xored.i.i.i280, %tbl_size.i.i276
  %offset_ptr.i.i282 = getelementptr i32, ptr %offset_tbl.i.i277, i64 %hash.i.i.i281
  %offset.i.i283 = load i32, ptr %offset_ptr.i.i282, align 4
  %eq.i = icmp eq i32 %.fca.3.extract41, %offset.i.i283
  call void @llvm.assume(i1 %eq.i) #30
  %47 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract35, 0
  %48 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %.fca.1.extract37, 1
  %49 = insertvalue { ptr, ptr, ptr, i32 } %48, ptr %.fca.2.extract39, 2
  %50 = insertvalue { ptr, ptr, ptr, i32 } %49, i32 %.fca.3.extract41, 3
  %51 = call ptr @llvm.invariant.start.p0(i64 128, ptr nonnull %.fca.0.extract17)
  %52 = load ptr, ptr %17, align 8
  %53 = call ptr %52(ptr %.fca.1.extract18)
  %54 = call ptr @llvm.invariant.start.p0(i64 128, ptr nonnull %.fca.0.extract17)
  %55 = load ptr, ptr %22, align 8
  %56 = call ptr %55(ptr %.fca.1.extract18)
  store ptr @_parameterization_Ptri32, ptr %5, align 8
  %57 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %5)
  %58 = call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract35)
  %59 = sext i32 %.fca.3.extract41 to i64
  %60 = getelementptr ptr, ptr %.fca.0.extract35, i64 %59
  %61 = getelementptr i8, ptr %60, i64 120
  %62 = load ptr, ptr %61, align 8
  store ptr @i32_typ, ptr %6, align 8
  %63 = call ptr %62({ ptr, ptr, ptr, i32 } %50, ptr nonnull %6)
  %64 = call { ptr, i160 } %63({ ptr, ptr, ptr, i32 } %50, { ptr, ptr, ptr, i32 } %50, ptr nonnull %5, i32 %42)
  %.fca.0.extract31 = extractvalue { ptr, i160 } %64, 0
  %.fca.1.extract33 = extractvalue { ptr, i160 } %64, 1
  store i160 %.fca.1.extract33, ptr %.sroa.3268, align 8
  %65 = call ptr @llvm.invariant.start.p0(i64 128, ptr nonnull %.fca.0.extract17)
  %66 = load ptr, ptr %19, align 8
  %67 = load ptr, ptr %66, align 8
  %68 = call i32 %67(ptr %.fca.1.extract18)
  %69 = add i32 %68, 1
  %70 = call ptr @llvm.invariant.start.p0(i64 128, ptr nonnull %.fca.0.extract17)
  %71 = load ptr, ptr %19, align 8
  %72 = getelementptr i8, ptr %71, i64 8
  %73 = load ptr, ptr %72, align 8
  call void %73(ptr %.fca.1.extract18, i32 %69)
  %74 = icmp eq ptr %.fca.0.extract31, @nil_typ
  %75 = icmp eq ptr %.fca.0.extract31, null
  %76 = or i1 %74, %75
  br i1 %76, label %29, label %.thread448

77:                                               ; preds = %29
  %78 = load ptr, ptr %18, align 8
  %79 = getelementptr i8, ptr %78, i64 8
  %80 = load ptr, ptr %79, align 8
  call void %80(ptr %.fca.1.extract18, i32 2)
  %81 = call ptr @llvm.invariant.start.p0(i64 128, ptr nonnull %.fca.0.extract17)
  %82 = load ptr, ptr %19, align 8
  %83 = getelementptr i8, ptr %82, i64 8
  %84 = load ptr, ptr %83, align 8
  call void %84(ptr %.fca.1.extract18, i32 0)
  br label %.critedge270

.critedge270:                                     ; preds = %23, %77
  %85 = call ptr @llvm.invariant.start.p0(i64 128, ptr nonnull %.fca.0.extract17)
  %86 = load ptr, ptr %18, align 8
  %87 = load ptr, ptr %86, align 8
  %88 = call i32 %87(ptr %.fca.1.extract18)
  %.not = icmp eq i32 %88, 2
  br i1 %.not, label %.preheader, label %23

.preheader:                                       ; preds = %.critedge270
  %89 = call ptr @llvm.invariant.start.p0(i64 128, ptr nonnull %.fca.0.extract17)
  %90 = getelementptr i8, ptr %17, i64 64
  %91 = getelementptr i8, ptr %17, i64 32
  br label %92

92:                                               ; preds = %.preheader, %101
  %93 = load ptr, ptr %19, align 8
  %94 = load ptr, ptr %93, align 8
  %95 = call i32 %94(ptr %.fca.1.extract18)
  %96 = call ptr @llvm.invariant.start.p0(i64 128, ptr nonnull %.fca.0.extract17)
  %97 = load ptr, ptr %90, align 8
  %98 = load ptr, ptr %97, align 8
  %99 = call i32 %98(ptr %.fca.1.extract18)
  %100 = icmp slt i32 %95, %99
  br i1 %100, label %101, label %.loopexit

101:                                              ; preds = %92
  %102 = call ptr @llvm.invariant.start.p0(i64 128, ptr nonnull %.fca.0.extract17)
  %103 = load ptr, ptr %19, align 8
  %104 = load ptr, ptr %103, align 8
  %105 = call i32 %104(ptr %.fca.1.extract18)
  %106 = call ptr @llvm.invariant.start.p0(i64 128, ptr nonnull %.fca.0.extract17)
  %107 = load ptr, ptr %91, align 8
  %108 = load ptr, ptr %107, align 8
  %109 = call { ptr, ptr, ptr, i32 } %108(ptr %.fca.1.extract18)
  %.fca.0.extract23 = extractvalue { ptr, ptr, ptr, i32 } %109, 0
  %.fca.1.extract25 = extractvalue { ptr, ptr, ptr, i32 } %109, 1
  %.fca.2.extract27 = extractvalue { ptr, ptr, ptr, i32 } %109, 2
  %.fca.3.extract29 = extractvalue { ptr, ptr, ptr, i32 } %109, 3
  %hash_coef_ptr.i.i286 = getelementptr i8, ptr %.fca.0.extract23, i64 8
  %tbl_size_ptr.i.i287 = getelementptr i8, ptr %.fca.0.extract23, i64 16
  %offset_tbl_ptr.i.i288 = getelementptr i8, ptr %.fca.0.extract23, i64 40
  %hash_coef.i.i289 = load i64, ptr %hash_coef_ptr.i.i286, align 4
  %tbl_size.i.i290 = load i64, ptr %tbl_size_ptr.i.i287, align 4
  %offset_tbl.i.i291 = load ptr, ptr %offset_tbl_ptr.i.i288, align 8
  %product.i.i.i292 = mul i64 %hash_coef.i.i289, -5261542750394134544
  %shifted.i.i.i293 = lshr i64 %product.i.i.i292, 32
  %xored.i.i.i294 = xor i64 %shifted.i.i.i293, %product.i.i.i292
  %hash.i.i.i295 = and i64 %xored.i.i.i294, %tbl_size.i.i290
  %offset_ptr.i.i296 = getelementptr i32, ptr %offset_tbl.i.i291, i64 %hash.i.i.i295
  %offset.i.i297 = load i32, ptr %offset_ptr.i.i296, align 4
  %eq.i300 = icmp eq i32 %.fca.3.extract29, %offset.i.i297
  call void @llvm.assume(i1 %eq.i300) #30
  %110 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract23, 0
  %111 = insertvalue { ptr, ptr, ptr, i32 } %110, ptr %.fca.1.extract25, 1
  %112 = insertvalue { ptr, ptr, ptr, i32 } %111, ptr %.fca.2.extract27, 2
  %113 = insertvalue { ptr, ptr, ptr, i32 } %112, i32 %.fca.3.extract29, 3
  %114 = call ptr @llvm.invariant.start.p0(i64 128, ptr nonnull %.fca.0.extract17)
  %115 = load ptr, ptr %17, align 8
  %116 = call ptr %115(ptr %.fca.1.extract18)
  %117 = call ptr @llvm.invariant.start.p0(i64 128, ptr nonnull %.fca.0.extract17)
  %118 = load ptr, ptr %22, align 8
  %119 = call ptr %118(ptr %.fca.1.extract18)
  store ptr @_parameterization_Ptri32, ptr %10, align 8
  %120 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %10)
  %121 = call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract23)
  %122 = sext i32 %.fca.3.extract29 to i64
  %123 = getelementptr ptr, ptr %.fca.0.extract23, i64 %122
  %124 = getelementptr i8, ptr %123, i64 120
  %125 = load ptr, ptr %124, align 8
  store ptr @i32_typ, ptr %11, align 8
  %126 = call ptr %125({ ptr, ptr, ptr, i32 } %113, ptr nonnull %11)
  %127 = call { ptr, i160 } %126({ ptr, ptr, ptr, i32 } %113, { ptr, ptr, ptr, i32 } %113, ptr nonnull %10, i32 %105)
  %.fca.0.extract19 = extractvalue { ptr, i160 } %127, 0
  %.fca.1.extract21 = extractvalue { ptr, i160 } %127, 1
  store i160 %.fca.1.extract21, ptr %.sroa.3, align 8
  %128 = call ptr @llvm.invariant.start.p0(i64 128, ptr nonnull %.fca.0.extract17)
  %129 = load ptr, ptr %19, align 8
  %130 = load ptr, ptr %129, align 8
  %131 = call i32 %130(ptr %.fca.1.extract18)
  %132 = add i32 %131, 1
  %133 = call ptr @llvm.invariant.start.p0(i64 128, ptr nonnull %.fca.0.extract17)
  %134 = load ptr, ptr %19, align 8
  %135 = getelementptr i8, ptr %134, i64 8
  %136 = load ptr, ptr %135, align 8
  call void %136(ptr %.fca.1.extract18, i32 %132)
  %137 = icmp eq ptr %.fca.0.extract19, @nil_typ
  %138 = icmp eq ptr %.fca.0.extract19, null
  %139 = or i1 %137, %138
  br i1 %139, label %92, label %.thread448

.thread448:                                       ; preds = %39, %101
  %.reg2mem513.0.sroa.phi44.ph = phi ptr [ %.reg2mem513.0.sroa.gep46, %101 ], [ %.reg2mem513.0.sroa.gep45, %39 ]
  %.reg2mem513.0.ph = phi ptr [ %14, %101 ], [ %9, %39 ]
  %.reg2mem515.0.sroa.phi48.ph = phi ptr [ %.reg2mem515.0.sroa.gep50, %101 ], [ %.reg2mem515.0.sroa.gep49, %39 ]
  %.reg2mem515.0.ph = phi ptr [ %13, %101 ], [ %8, %39 ]
  %.reg2mem517.0.sroa.phi55.ph = phi ptr [ %.sroa.0, %101 ], [ %.sroa.0223, %39 ]
  %.reg2mem517.0.sroa.phi58.ph = phi ptr [ %.sroa.2, %101 ], [ %.sroa.2224, %39 ]
  %.reg2mem519.0.sroa.phi65.ph = phi ptr [ %.sroa.071, %101 ], [ %.sroa.0225, %39 ]
  %.reg2mem519.0.sroa.phi68.ph = phi ptr [ %.sroa.272, %101 ], [ %.sroa.2226, %39 ]
  %.reg2mem521.0.sroa.phi77.ph = phi ptr [ %.sroa.083, %101 ], [ %.sroa.0227, %39 ]
  %.reg2mem521.0.sroa.phi80.ph = phi ptr [ %.sroa.284, %101 ], [ %.sroa.2228, %39 ]
  %.reg2mem523.0.sroa.phi229.ph = phi ptr [ %.sroa.0409, %101 ], [ %.sroa.0235, %39 ]
  %.reg2mem523.0.sroa.phi232.ph = phi ptr [ %.sroa.1410, %101 ], [ %.sroa.2236, %39 ]
  %.reg2mem529.0.sroa.phi97.ph = phi ptr [ %.sroa.0103, %101 ], [ %.sroa.0237, %39 ]
  %.reg2mem529.0.sroa.phi100.ph = phi ptr [ %.sroa.2104, %101 ], [ %.sroa.2238, %39 ]
  %.reg2mem531.0.sroa.phi239.ph = phi ptr [ %.sroa.0411, %101 ], [ %.sroa.0245, %39 ]
  %.reg2mem531.0.sroa.phi242.ph = phi ptr [ %.sroa.1412, %101 ], [ %.sroa.2246, %39 ]
  %.reg2mem537.0.sroa.phi123.ph = phi ptr [ %.reg2mem537.0.sroa.gep125, %101 ], [ %.reg2mem537.0.sroa.gep124, %39 ]
  %.reg2mem537.0.sroa.phi126.ph = phi ptr [ %.reg2mem537.0.sroa.gep116, %101 ], [ %.reg2mem537.0.sroa.gep115, %39 ]
  %.reg2mem537.0.sroa.phi132.ph = phi ptr [ %.reg2mem537.0.sroa.gep113, %101 ], [ %.reg2mem537.0.sroa.gep, %39 ]
  %.reg2mem537.0.ph = phi ptr [ %12, %101 ], [ %7, %39 ]
  %.reg2mem539.0.sroa.phi.ph = phi ptr [ %.sroa.1420, %101 ], [ %.sroa.1433, %39 ]
  %.reg2mem539.0.sroa.phi136.ph = phi ptr [ %.sroa.3421, %101 ], [ %.sroa.3434, %39 ]
  %.reg2mem539.0.ph = phi ptr [ %.sroa.0419, %101 ], [ %.sroa.0432, %39 ]
  %.reg2mem541.0.sroa.phi.ph = phi ptr [ %.sroa.0143, %101 ], [ %.sroa.0247, %39 ]
  %.reg2mem541.0.sroa.phi140.ph = phi ptr [ %.sroa.1, %101 ], [ %.sroa.1248, %39 ]
  %.reg2mem543.0.sroa.phi249.ph = phi ptr [ %.sroa.0422, %101 ], [ %.sroa.0255, %39 ]
  %.reg2mem543.0.sroa.phi252.ph = phi ptr [ %.sroa.1423, %101 ], [ %.sroa.2256, %39 ]
  %.reg2mem549.0.sroa.phi.ph = phi ptr [ %.sroa.0156, %101 ], [ %.sroa.0257, %39 ]
  %.reg2mem549.0.sroa.phi153.ph = phi ptr [ %.sroa.1157, %101 ], [ %.sroa.1258, %39 ]
  %.reg2mem551.0.sroa.phi259.ph = phi ptr [ %.sroa.0424, %101 ], [ %.sroa.0265, %39 ]
  %.reg2mem551.0.sroa.phi262.ph = phi ptr [ %.sroa.1425, %101 ], [ %.sroa.2266, %39 ]
  %.reg2mem557.0.sroa.phi209.ph = phi ptr [ %.sroa.1428, %101 ], [ %.sroa.1436, %39 ]
  %.reg2mem557.0.sroa.phi212.ph = phi ptr [ %.sroa.1428.8.sroa_idx, %101 ], [ %.sroa.1436.8.sroa_idx, %39 ]
  %.reg2mem557.0.sroa.phi215.ph = phi ptr [ %.sroa.1428.16.sroa_idx550, %101 ], [ %.sroa.1436.16.sroa_idx551, %39 ]
  %.reg2mem557.0.ph = phi ptr [ %.sroa.0427, %101 ], [ %.sroa.0435, %39 ]
  %.reg2mem559.0.sroa.phi.ph.sroa.speculated = phi ptr [ %.fca.0.extract19, %101 ], [ %.fca.0.extract31, %39 ]
  %.reg2mem559.0.sroa.phi219.ph = phi ptr [ %.sroa.3, %101 ], [ %.sroa.3268, %39 ]
  store ptr %.reg2mem559.0.sroa.phi.ph.sroa.speculated, ptr %.reg2mem557.0.ph, align 8
  %140 = load i160, ptr %.reg2mem559.0.sroa.phi219.ph, align 8
  store i160 %140, ptr %.reg2mem557.0.sroa.phi209.ph, align 8
  %hash_coef_ptr.i.i302 = getelementptr i8, ptr %.reg2mem559.0.sroa.phi.ph.sroa.speculated, i64 8
  %tbl_size_ptr.i.i303 = getelementptr i8, ptr %.reg2mem559.0.sroa.phi.ph.sroa.speculated, i64 16
  %offset_tbl_ptr.i.i304 = getelementptr i8, ptr %.reg2mem559.0.sroa.phi.ph.sroa.speculated, i64 40
  %hash_coef.i.i305 = load i64, ptr %hash_coef_ptr.i.i302, align 4
  %tbl_size.i.i306 = load i64, ptr %tbl_size_ptr.i.i303, align 4
  %offset_tbl.i.i307 = load ptr, ptr %offset_tbl_ptr.i.i304, align 8
  %product.i.i.i308 = mul i64 %hash_coef.i.i305, 4015701072841558310
  %shifted.i.i.i309 = lshr i64 %product.i.i.i308, 32
  %xored.i.i.i310 = xor i64 %shifted.i.i.i309, %product.i.i.i308
  %hash.i.i.i311 = and i64 %xored.i.i.i310, %tbl_size.i.i306
  %offset_ptr.i.i312 = getelementptr i32, ptr %offset_tbl.i.i307, i64 %hash.i.i.i311
  %offset.i.i313 = load i32, ptr %offset_ptr.i.i312, align 4
  store i32 %offset.i.i313, ptr %.reg2mem557.0.sroa.phi215.ph, align 4
  %141 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.reg2mem559.0.sroa.phi.ph.sroa.speculated, 0
  %142 = trunc i160 %140 to i64
  %143 = inttoptr i64 %142 to ptr
  %144 = insertvalue { ptr, ptr, ptr, i32 } %141, ptr %143, 1
  %145 = load ptr, ptr %.reg2mem557.0.sroa.phi212.ph, align 8
  %146 = insertvalue { ptr, ptr, ptr, i32 } %144, ptr %145, 2
  %147 = insertvalue { ptr, ptr, ptr, i32 } %146, i32 %offset.i.i313, 3
  %148 = call ptr @llvm.invariant.start.p0(i64 128, ptr nonnull %.fca.0.extract17)
  %149 = load ptr, ptr %17, align 8
  %150 = call ptr %149(ptr %.fca.1.extract18)
  %151 = call ptr @llvm.invariant.start.p0(i64 128, ptr nonnull %.fca.0.extract17)
  %152 = load ptr, ptr %22, align 8
  %153 = call ptr %152(ptr %.fca.1.extract18)
  %154 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %155 = call ptr @llvm.invariant.start.p0(i64 104, ptr %.reg2mem559.0.sroa.phi.ph.sroa.speculated)
  %156 = sext i32 %offset.i.i313 to i64
  %157 = getelementptr ptr, ptr %.reg2mem559.0.sroa.phi.ph.sroa.speculated, i64 %156
  %158 = getelementptr i8, ptr %157, i64 48
  %159 = load ptr, ptr %158, align 8
  %160 = call ptr %159({ ptr, ptr, ptr, i32 } %147, ptr nonnull %4)
  %161 = call { ptr, i160 } %160({ ptr, ptr, ptr, i32 } %147, { ptr, ptr, ptr, i32 } %147, ptr nonnull %4)
  %.fca.0.extract158 = extractvalue { ptr, i160 } %161, 0
  store ptr %.fca.0.extract158, ptr %.reg2mem551.0.sroa.phi259.ph, align 8
  %.fca.1.extract160 = extractvalue { ptr, i160 } %161, 1
  store i160 %.fca.1.extract160, ptr %.reg2mem551.0.sroa.phi262.ph, align 8
  store ptr %.fca.0.extract158, ptr %.reg2mem549.0.sroa.phi.ph, align 8
  store i160 %.fca.1.extract160, ptr %.reg2mem549.0.sroa.phi153.ph, align 8
  %162 = load ptr, ptr %.reg2mem557.0.ph, align 8
  %163 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %162, 0
  %164 = load ptr, ptr %.reg2mem557.0.sroa.phi209.ph, align 8
  %165 = insertvalue { ptr, ptr, ptr, i32 } %163, ptr %164, 1
  %166 = load ptr, ptr %.reg2mem557.0.sroa.phi212.ph, align 8
  %167 = insertvalue { ptr, ptr, ptr, i32 } %165, ptr %166, 2
  %168 = load i32, ptr %.reg2mem557.0.sroa.phi215.ph, align 4
  %169 = insertvalue { ptr, ptr, ptr, i32 } %167, i32 %168, 3
  %170 = call ptr @llvm.invariant.start.p0(i64 128, ptr nonnull %.fca.0.extract17)
  %171 = load ptr, ptr %17, align 8
  %172 = call ptr %171(ptr %.fca.1.extract18)
  %173 = call ptr @llvm.invariant.start.p0(i64 128, ptr nonnull %.fca.0.extract17)
  %174 = load ptr, ptr %22, align 8
  %175 = call ptr %174(ptr %.fca.1.extract18)
  %176 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %177 = call ptr @llvm.invariant.start.p0(i64 104, ptr %162)
  %178 = sext i32 %168 to i64
  %179 = getelementptr ptr, ptr %162, i64 %178
  %180 = getelementptr i8, ptr %179, i64 56
  %181 = load ptr, ptr %180, align 8
  %182 = call ptr %181({ ptr, ptr, ptr, i32 } %169, ptr nonnull %4)
  %183 = call { ptr, i160 } %182({ ptr, ptr, ptr, i32 } %169, { ptr, ptr, ptr, i32 } %169, ptr nonnull %4)
  %.fca.0.extract144 = extractvalue { ptr, i160 } %183, 0
  store ptr %.fca.0.extract144, ptr %.reg2mem543.0.sroa.phi249.ph, align 8
  %.fca.1.extract146 = extractvalue { ptr, i160 } %183, 1
  store i160 %.fca.1.extract146, ptr %.reg2mem543.0.sroa.phi252.ph, align 8
  store ptr %.fca.0.extract144, ptr %.reg2mem541.0.sroa.phi.ph, align 8
  store i160 %.fca.1.extract146, ptr %.reg2mem541.0.sroa.phi140.ph, align 8
  %184 = call ptr @llvm.invariant.start.p0(i64 128, ptr nonnull %.fca.0.extract17)
  %185 = load ptr, ptr %17, align 8
  %186 = call ptr %185(ptr %.fca.1.extract18)
  %187 = call ptr @llvm.invariant.start.p0(i64 128, ptr nonnull %.fca.0.extract17)
  %188 = load ptr, ptr %22, align 8
  %189 = call ptr %188(ptr %.fca.1.extract18)
  store ptr @Pair, ptr %.reg2mem539.0.ph, align 8
  store ptr %186, ptr %.reg2mem539.0.sroa.phi.ph, align 8
  store ptr %189, ptr %.reg2mem539.0.sroa.phi136.ph, align 8
  %190 = load ptr, ptr %186, align 8
  %191 = getelementptr i8, ptr %190, i64 48
  %192 = load ptr, ptr %191, align 8
  %193 = call { i64, i64 } %192(ptr nonnull %186)
  %194 = extractvalue { i64, i64 } %193, 0
  %195 = extractvalue { i64, i64 } %193, 1
  %196 = urem i64 16, %195
  %197 = icmp eq i64 %196, 0
  %198 = sub i64 %195, %196
  %199 = select i1 %197, i64 0, i64 %198
  %200 = add i64 %194, 16
  %201 = add i64 %200, %199
  %202 = load ptr, ptr %.reg2mem539.0.sroa.phi136.ph, align 8
  %203 = load ptr, ptr %202, align 8
  %204 = getelementptr i8, ptr %203, i64 48
  %205 = load ptr, ptr %204, align 8
  %206 = call { i64, i64 } %205(ptr nonnull %202)
  %207 = extractvalue { i64, i64 } %206, 0
  %208 = extractvalue { i64, i64 } %206, 1
  %209 = call i64 @llvm.umax.i64(i64 %195, i64 %208)
  %210 = call i64 @llvm.umax.i64(i64 %209, i64 8)
  %211 = urem i64 %201, %208
  %212 = icmp eq i64 %211, 0
  %213 = sub i64 %208, %211
  %214 = select i1 %212, i64 0, i64 %213
  %215 = add i64 %207, %201
  %216 = add i64 %215, %214
  %217 = urem i64 %216, %210
  %218 = icmp eq i64 %217, 0
  %219 = sub i64 %210, %217
  %220 = select i1 %218, i64 0, i64 %219
  %221 = add i64 %220, %216
  %result.i = call noalias ptr @bump_malloc_inner(i64 noundef %221, ptr nonnull @current_ptr) #29
  store ptr %186, ptr %result.i, align 8
  %222 = getelementptr i8, ptr %result.i, i64 8
  store ptr %189, ptr %222, align 8
  %223 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i)
  store ptr @Pair, ptr %.reg2mem537.0.ph, align 8
  store ptr %result.i, ptr %.reg2mem537.0.sroa.phi132.ph, align 8
  store i32 9, ptr %.reg2mem537.0.sroa.phi126.ph, align 4
  %224 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %.reg2mem537.0.ph)
  %225 = load ptr, ptr %.reg2mem557.0.ph, align 8
  %226 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %225, 0
  %227 = load ptr, ptr %.reg2mem557.0.sroa.phi209.ph, align 8
  %228 = insertvalue { ptr, ptr, ptr, i32 } %226, ptr %227, 1
  %229 = load ptr, ptr %.reg2mem557.0.sroa.phi212.ph, align 8
  %230 = insertvalue { ptr, ptr, ptr, i32 } %228, ptr %229, 2
  %231 = load i32, ptr %.reg2mem557.0.sroa.phi215.ph, align 4
  %232 = insertvalue { ptr, ptr, ptr, i32 } %230, i32 %231, 3
  %233 = call ptr @llvm.invariant.start.p0(i64 128, ptr nonnull %.fca.0.extract17)
  %234 = load ptr, ptr %17, align 8
  %235 = call ptr %234(ptr %.fca.1.extract18)
  %236 = call ptr @llvm.invariant.start.p0(i64 128, ptr nonnull %.fca.0.extract17)
  %237 = load ptr, ptr %22, align 8
  %238 = call ptr %237(ptr %.fca.1.extract18)
  %239 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %240 = call ptr @llvm.invariant.start.p0(i64 104, ptr %225)
  %241 = sext i32 %231 to i64
  %242 = getelementptr ptr, ptr %225, i64 %241
  %243 = getelementptr i8, ptr %242, i64 48
  %244 = load ptr, ptr %243, align 8
  %245 = call ptr %244({ ptr, ptr, ptr, i32 } %232, ptr nonnull %4)
  %246 = call { ptr, i160 } %245({ ptr, ptr, ptr, i32 } %232, { ptr, ptr, ptr, i32 } %232, ptr nonnull %4)
  %.fca.0.extract105 = extractvalue { ptr, i160 } %246, 0
  store ptr %.fca.0.extract105, ptr %.reg2mem531.0.sroa.phi239.ph, align 8
  %.fca.1.extract107 = extractvalue { ptr, i160 } %246, 1
  store i160 %.fca.1.extract107, ptr %.reg2mem531.0.sroa.phi242.ph, align 8
  store ptr %.fca.0.extract105, ptr %.reg2mem529.0.sroa.phi97.ph, align 8
  store i160 %.fca.1.extract107, ptr %.reg2mem529.0.sroa.phi100.ph, align 8
  %247 = load ptr, ptr %.reg2mem557.0.ph, align 8
  %248 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %247, 0
  %249 = load ptr, ptr %.reg2mem557.0.sroa.phi209.ph, align 8
  %250 = insertvalue { ptr, ptr, ptr, i32 } %248, ptr %249, 1
  %251 = load ptr, ptr %.reg2mem557.0.sroa.phi212.ph, align 8
  %252 = insertvalue { ptr, ptr, ptr, i32 } %250, ptr %251, 2
  %253 = load i32, ptr %.reg2mem557.0.sroa.phi215.ph, align 4
  %254 = insertvalue { ptr, ptr, ptr, i32 } %252, i32 %253, 3
  %255 = call ptr @llvm.invariant.start.p0(i64 128, ptr nonnull %.fca.0.extract17)
  %256 = load ptr, ptr %17, align 8
  %257 = call ptr %256(ptr %.fca.1.extract18)
  %258 = call ptr @llvm.invariant.start.p0(i64 128, ptr nonnull %.fca.0.extract17)
  %259 = load ptr, ptr %22, align 8
  %260 = call ptr %259(ptr %.fca.1.extract18)
  %261 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %262 = call ptr @llvm.invariant.start.p0(i64 104, ptr %247)
  %263 = sext i32 %253 to i64
  %264 = getelementptr ptr, ptr %247, i64 %263
  %265 = getelementptr i8, ptr %264, i64 56
  %266 = load ptr, ptr %265, align 8
  %267 = call ptr %266({ ptr, ptr, ptr, i32 } %254, ptr nonnull %4)
  %268 = call { ptr, i160 } %267({ ptr, ptr, ptr, i32 } %254, { ptr, ptr, ptr, i32 } %254, ptr nonnull %4)
  %.fca.0.extract85 = extractvalue { ptr, i160 } %268, 0
  store ptr %.fca.0.extract85, ptr %.reg2mem523.0.sroa.phi229.ph, align 8
  %.fca.1.extract87 = extractvalue { ptr, i160 } %268, 1
  store i160 %.fca.1.extract87, ptr %.reg2mem523.0.sroa.phi232.ph, align 8
  store ptr %.fca.0.extract85, ptr %.reg2mem521.0.sroa.phi77.ph, align 8
  store i160 %.fca.1.extract87, ptr %.reg2mem521.0.sroa.phi80.ph, align 8
  %269 = load ptr, ptr %.reg2mem529.0.sroa.phi97.ph, align 8
  store ptr %269, ptr %.reg2mem519.0.sroa.phi65.ph, align 8
  %270 = load i160, ptr %.reg2mem529.0.sroa.phi100.ph, align 8
  store i160 %270, ptr %.reg2mem519.0.sroa.phi68.ph, align 8
  %271 = insertvalue { ptr, i160 } undef, ptr %269, 0
  %272 = insertvalue { ptr, i160 } %271, i160 %270, 1
  store ptr %.fca.0.extract85, ptr %.reg2mem517.0.sroa.phi55.ph, align 8
  store i160 %.fca.1.extract87, ptr %.reg2mem517.0.sroa.phi58.ph, align 8
  %273 = load ptr, ptr %.reg2mem537.0.ph, align 8
  %274 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %273, 0
  %275 = load ptr, ptr %.reg2mem537.0.sroa.phi132.ph, align 8
  %276 = insertvalue { ptr, ptr, ptr, i32 } %274, ptr %275, 1
  %277 = load ptr, ptr %.reg2mem537.0.sroa.phi123.ph, align 8
  %278 = insertvalue { ptr, ptr, ptr, i32 } %276, ptr %277, 2
  %279 = load i32, ptr %.reg2mem537.0.sroa.phi126.ph, align 4
  %280 = insertvalue { ptr, ptr, ptr, i32 } %278, i32 %279, 3
  %281 = call ptr @llvm.invariant.start.p0(i64 128, ptr nonnull %.fca.0.extract17)
  %282 = load ptr, ptr %17, align 8
  %283 = call ptr %282(ptr %.fca.1.extract18)
  %284 = call ptr @llvm.invariant.start.p0(i64 128, ptr nonnull %.fca.0.extract17)
  %285 = load ptr, ptr %22, align 8
  %286 = call ptr %285(ptr %.fca.1.extract18)
  store ptr %283, ptr %.reg2mem515.0.ph, align 8
  store ptr %286, ptr %.reg2mem515.0.sroa.phi48.ph, align 8
  %287 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %.reg2mem515.0.ph)
  %288 = call ptr @llvm.invariant.start.p0(i64 80, ptr %273)
  %289 = sext i32 %279 to i64
  %290 = getelementptr ptr, ptr %273, i64 %289
  %291 = getelementptr i8, ptr %290, i64 32
  %292 = load ptr, ptr %291, align 8
  store ptr %269, ptr %.reg2mem513.0.ph, align 8
  store ptr %.fca.0.extract85, ptr %.reg2mem513.0.sroa.phi44.ph, align 8
  %293 = call ptr %292({ ptr, ptr, ptr, i32 } %280, ptr nonnull %.reg2mem513.0.ph)
  call void %293({ ptr, ptr, ptr, i32 } %280, { ptr, ptr, ptr, i32 } %280, ptr nonnull %.reg2mem515.0.ph, { ptr, i160 } %272, { ptr, i160 } %268)
  %294 = load ptr, ptr %.reg2mem537.0.ph, align 8
  %295 = load i160, ptr %.reg2mem537.0.sroa.phi132.ph, align 4
  br label %.loopexit

.loopexit:                                        ; preds = %92, %.thread448
  %.reg2mem507.sroa.4.0 = phi i160 [ %295, %.thread448 ], [ undef, %92 ]
  %.reg2mem507.sroa.0.0 = phi ptr [ %294, %.thread448 ], [ @nil_typ, %92 ]
  %.reload502.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %.reg2mem507.sroa.0.0, 0
  %.reload502.fca.1.insert = insertvalue { ptr, i160 } %.reload502.fca.0.insert, i160 %.reg2mem507.sroa.4.0, 1
  ret { ptr, i160 } %.reload502.fca.1.insert
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @HashMapIterator_getter_len2(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 100
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @HashMapIterator_setter_len2(ptr nocapture writeonly %0, i32 %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 100
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @HashMapIterator_getter_len1(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 96
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @HashMapIterator_setter_len1(ptr nocapture writeonly %0, i32 %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 96
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @HashMapIterator_getter_index(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 92
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @HashMapIterator_setter_index(ptr nocapture writeonly %0, i32 %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 92
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @HashMapIterator_getter_current_table(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 88
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @HashMapIterator_setter_current_table(ptr nocapture writeonly %0, i32 %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 88
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @HashMapIterator_getter_map_table2(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 56
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 64
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 72
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 80
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @HashMapIterator_setter_map_table2(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 56
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 64
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 72
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 80
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @HashMapIterator_getter_map_table1(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 24
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 32
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 40
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 48
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @HashMapIterator_setter_map_table1(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 24
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 32
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 40
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 48
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define i32 @i32_hasher(i32 %0) #5 {
  %2 = add i32 %0, 2127912214
  %3 = shl i32 %0, 12
  %4 = add i32 %2, %3
  %5 = ashr i32 %4, 19
  %6 = xor i32 %4, %5
  %7 = xor i32 %6, -949894596
  %8 = add i32 %7, 374761393
  %9 = shl i32 %7, 5
  %10 = add i32 %8, %9
  %11 = add i32 %10, -744332180
  %12 = shl i32 %10, 9
  %13 = xor i32 %11, %12
  %14 = add i32 %13, -42973499
  %15 = shl i32 %13, 3
  %16 = add i32 %14, %15
  %17 = ashr i32 %16, 16
  %18 = xor i32 %16, %17
  %19 = xor i32 %18, -1252372727
  ret i32 %19
}

define linkonce_odr { i64, i64 } @_size_function_typ(ptr %0) {
  ret { i64, i64 } { i64 8, i64 8 }
}

define linkonce_odr { ptr, i160 } @_box_function_typ(ptr %0, ptr %1) {
  %3 = load i64, ptr %0, align 1
  %.sroa.2.sroa.0.0.insert.ext = zext i64 %3 to i160
  %4 = insertvalue { ptr, i160 } { ptr @function_typ, i160 undef }, i160 %.sroa.2.sroa.0.0.insert.ext, 1
  ret { ptr, i160 } %4
}

define linkonce_odr void @_unbox_function_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %.fca.1.extract = extractvalue { ptr, i160 } %0, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i64
  store i64 %.sroa.1.8.extract.trunc, ptr %2, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @HashMap_getter_max_displacements(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 112
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @HashMap_setter_max_displacements(ptr nocapture writeonly %0, i32 %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 112
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr } @HashMap_getter_eq(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 104
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr } undef, ptr %3, 0
  ret { ptr } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @HashMap_setter_eq(ptr nocapture writeonly %0, { ptr } %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 104
  %.fca.0.extract = extractvalue { ptr } %1, 0
  store ptr %.fca.0.extract, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr } @HashMap_getter_hasher(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 96
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr } undef, ptr %3, 0
  ret { ptr } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @HashMap_setter_hasher(ptr nocapture writeonly %0, { ptr } %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 96
  %.fca.0.extract = extractvalue { ptr } %1, 0
  store ptr %.fca.0.extract, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @HashMap_getter_size(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 88
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @HashMap_setter_size(ptr nocapture writeonly %0, i32 %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 88
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @HashMap_getter_table2(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 56
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 64
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 72
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 80
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @HashMap_setter_table2(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 56
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 64
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 72
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 80
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @HashMap_getter_table1(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 24
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 32
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 40
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 48
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @HashMap_setter_table1(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 24
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 32
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 40
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 48
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_PRNG(ptr nocapture readnone %0) #5 {
  ret { i64, i64 } { i64 4, i64 4 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @PRNG_B_init_initial_seedPtri32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 96
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @PRNG_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 104
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @PRNG_init_initial_seedPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -4401938362882229211
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %5 = tail call ptr @llvm.invariant.start.p0(i64 40, ptr nonnull %.fca.0.extract)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract, i64 %6
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr i8, ptr %8, i64 8
  %10 = load ptr, ptr %9, align 8
  %. = tail call i32 @llvm.smax.i32(i32 %3, i32 1)
  tail call void %10(ptr %.fca.1.extract, i32 %.)
  ret void
}

define i32 @PRNG_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -4401938362882229211
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %4 = tail call ptr @llvm.invariant.start.p0(i64 40, ptr %.fca.0.extract)
  %5 = sext i32 %offset.i.i to i64
  %6 = getelementptr ptr, ptr %.fca.0.extract, i64 %5
  %7 = load ptr, ptr %6, align 8
  %8 = load ptr, ptr %7, align 8
  %9 = tail call i32 %8(ptr %.fca.1.extract)
  %10 = mul i32 %9, 1103515245
  %11 = add i32 %10, 12345
  %12 = and i32 %11, 2147483647
  %13 = tail call ptr @llvm.invariant.start.p0(i64 40, ptr %.fca.0.extract)
  %14 = load ptr, ptr %6, align 8
  %15 = getelementptr i8, ptr %14, i64 8
  %16 = load ptr, ptr %15, align 8
  tail call void %16(ptr %.fca.1.extract, i32 %12)
  %17 = tail call ptr @llvm.invariant.start.p0(i64 40, ptr %.fca.0.extract)
  %18 = load ptr, ptr %6, align 8
  %19 = load ptr, ptr %18, align 8
  %20 = tail call i32 %19(ptr %.fca.1.extract)
  ret i32 %20
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @PRNG_getter_seed(ptr nocapture readonly %0) #0 {
  %2 = load i32, ptr %0, align 4
  ret i32 %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @PRNG_setter_seed(ptr nocapture writeonly %0, i32 %1) #4 {
  store i32 %1, ptr %0, align 4
  ret void
}

define i1 @cohscmaral(ptr nest nocapture readonly %0, { ptr, i160 } %1, { ptr, i160 } %2) {
  %.fca.1.extract2 = extractvalue { ptr, i160 } %1, 1
  %.sroa.14.8.extract.trunc = trunc i160 %.fca.1.extract2 to i32
  %.fca.1.extract = extractvalue { ptr, i160 } %2, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %4 = tail call i1 %0(i32 %.sroa.14.8.extract.trunc, i32 %.sroa.1.8.extract.trunc)
  ret i1 %4
}

define i32 @mkxcrwwhcc(ptr nest nocapture readonly %0, { ptr, i160 } %1) {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %3 = tail call i32 %0(i32 %.sroa.1.8.extract.trunc)
  ret i32 %3
}

define i1 @cayekynbzj(ptr nest nocapture readonly %0, { ptr, i160 } %1, { ptr, i160 } %2) {
  %.fca.1.extract2 = extractvalue { ptr, i160 } %1, 1
  %.sroa.14.8.extract.trunc = trunc i160 %.fca.1.extract2 to i32
  %.fca.1.extract = extractvalue { ptr, i160 } %2, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %4 = tail call i1 %0(i32 %.sroa.14.8.extract.trunc, i32 %.sroa.1.8.extract.trunc)
  ret i1 %4
}

define i32 @tgbqackegg(ptr nest nocapture readonly %0, { ptr, i160 } %1) {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %3 = tail call i32 %0(i32 %.sroa.1.8.extract.trunc)
  ret i32 %3
}

define i1 @xnibmcfper(ptr nest nocapture readonly %0, { ptr, i160 } %1, { ptr, i160 } %2) {
  %.fca.1.extract2 = extractvalue { ptr, i160 } %1, 1
  %.sroa.14.8.extract.trunc = trunc i160 %.fca.1.extract2 to i32
  %.fca.1.extract = extractvalue { ptr, i160 } %2, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %4 = tail call i1 %0(i32 %.sroa.14.8.extract.trunc, i32 %.sroa.1.8.extract.trunc)
  ret i1 %4
}

define i32 @puzwrxvkwk(ptr nest nocapture readonly %0, { ptr, i160 } %1) {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %3 = tail call i32 %0(i32 %.sroa.1.8.extract.trunc)
  ret i32 %3
}

define i1 @sebxllzgzj(ptr nest nocapture readonly %0, { ptr, i160 } %1, { ptr, i160 } %2) {
  %.fca.1.extract2 = extractvalue { ptr, i160 } %1, 1
  %.sroa.14.8.extract.trunc = trunc i160 %.fca.1.extract2 to i32
  %.fca.1.extract = extractvalue { ptr, i160 } %2, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %4 = tail call i1 %0(i32 %.sroa.14.8.extract.trunc, i32 %.sroa.1.8.extract.trunc)
  ret i1 %4
}

define i32 @bymbwiydvb(ptr nest nocapture readonly %0, { ptr, i160 } %1) {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %3 = tail call i32 %0(i32 %.sroa.1.8.extract.trunc)
  ret i32 %3
}

define i1 @txjdgwldxv(ptr nest nocapture readonly %0, { ptr, i160 } %1, { ptr, i160 } %2) {
  %.fca.1.extract2 = extractvalue { ptr, i160 } %1, 1
  %.sroa.14.8.extract.trunc = trunc i160 %.fca.1.extract2 to i32
  %.fca.1.extract = extractvalue { ptr, i160 } %2, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %4 = tail call i1 %0(i32 %.sroa.14.8.extract.trunc, i32 %.sroa.1.8.extract.trunc)
  ret i1 %4
}

define i32 @hxlaoascfo(ptr nest nocapture readonly %0, { ptr, i160 } %1) {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %3 = tail call i32 %0(i32 %.sroa.1.8.extract.trunc)
  ret i32 %3
}

define i1 @mtctyiiviy(ptr nest nocapture readonly %0, { ptr, i160 } %1, { ptr, i160 } %2) {
  %.fca.1.extract2 = extractvalue { ptr, i160 } %1, 1
  %.sroa.14.8.extract.trunc = trunc i160 %.fca.1.extract2 to i32
  %.fca.1.extract = extractvalue { ptr, i160 } %2, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %4 = tail call i1 %0(i32 %.sroa.14.8.extract.trunc, i32 %.sroa.1.8.extract.trunc)
  ret i1 %4
}

define i32 @xztzoilqpm(ptr nest nocapture readonly %0, { ptr, i160 } %1) {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %3 = tail call i32 %0(i32 %.sroa.1.8.extract.trunc)
  ret i32 %3
}

define i1 @lriczewffd(ptr nest nocapture readonly %0, { ptr, i160 } %1, { ptr, i160 } %2) {
  %.fca.1.extract2 = extractvalue { ptr, i160 } %1, 1
  %.sroa.14.8.extract.trunc = trunc i160 %.fca.1.extract2 to i32
  %.fca.1.extract = extractvalue { ptr, i160 } %2, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %4 = tail call i1 %0(i32 %.sroa.14.8.extract.trunc, i32 %.sroa.1.8.extract.trunc)
  ret i1 %4
}

define i32 @qqaoonuean(ptr nest nocapture readonly %0, { ptr, i160 } %1) {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %3 = tail call i32 %0(i32 %.sroa.1.8.extract.trunc)
  ret i32 %3
}

define i1 @awbyfttpwe(ptr nest nocapture readonly %0, { ptr, i160 } %1, { ptr, i160 } %2) {
  %.fca.1.extract2 = extractvalue { ptr, i160 } %1, 1
  %.sroa.14.8.extract.trunc = trunc i160 %.fca.1.extract2 to i32
  %.fca.1.extract = extractvalue { ptr, i160 } %2, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %4 = tail call i1 %0(i32 %.sroa.14.8.extract.trunc, i32 %.sroa.1.8.extract.trunc)
  ret i1 %4
}

define i32 @hpiagppyyl(ptr nest nocapture readonly %0, { ptr, i160 } %1) {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %3 = tail call i32 %0(i32 %.sroa.1.8.extract.trunc)
  ret i32 %3
}

define i1 @pkiyefowgp(ptr nest nocapture readonly %0, { ptr, i160 } %1, { ptr, i160 } %2) {
  %.fca.1.extract2 = extractvalue { ptr, i160 } %1, 1
  %.sroa.14.8.extract.trunc = trunc i160 %.fca.1.extract2 to i32
  %.fca.1.extract = extractvalue { ptr, i160 } %2, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %4 = tail call i1 %0(i32 %.sroa.14.8.extract.trunc, i32 %.sroa.1.8.extract.trunc)
  ret i1 %4
}

define i32 @drtevzvlwq(ptr nest nocapture readonly %0, { ptr, i160 } %1) {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %3 = tail call i32 %0(i32 %.sroa.1.8.extract.trunc)
  ret i32 %3
}

define i1 @cuiaypnmsn(ptr nest nocapture readonly %0, { ptr, i160 } %1, { ptr, i160 } %2) {
  %.fca.1.extract2 = extractvalue { ptr, i160 } %1, 1
  %.sroa.14.8.extract.trunc = trunc i160 %.fca.1.extract2 to i32
  %.fca.1.extract = extractvalue { ptr, i160 } %2, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %4 = tail call i1 %0(i32 %.sroa.14.8.extract.trunc, i32 %.sroa.1.8.extract.trunc)
  ret i1 %4
}

define i32 @wzakivevxv(ptr nest nocapture readonly %0, { ptr, i160 } %1) {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %3 = tail call i32 %0(i32 %.sroa.1.8.extract.trunc)
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define i1 @i32_eq(i32 %0, i32 %1) #5 {
  %3 = icmp eq i32 %0, %1
  ret i1 %3
}

define range(i32 0, -2147483648) i32 @string_hasher({ ptr, ptr, ptr, i32 } %0) local_unnamed_addr {
  %2 = alloca [0 x ptr], align 8
  %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract7 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 6499063144389013426
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %3 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract3, 0
  %4 = insertvalue { ptr, ptr, ptr, i32 } %3, ptr %.fca.1.extract5, 1
  %5 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %.fca.2.extract7, 2
  %6 = insertvalue { ptr, ptr, ptr, i32 } %5, i32 %offset.i.i, 3
  %7 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %8 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract3)
  %9 = sext i32 %offset.i.i to i64
  %10 = getelementptr ptr, ptr %.fca.0.extract3, i64 %9
  %11 = getelementptr i8, ptr %10, i64 120
  %12 = load ptr, ptr %11, align 8
  %13 = call ptr %12({ ptr, ptr, ptr, i32 } %6, ptr nonnull %2)
  %14 = call { ptr, ptr, ptr, i32 } %13({ ptr, ptr, ptr, i32 } %6, { ptr, ptr, ptr, i32 } %6, ptr nonnull %2)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %14, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %14, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %14, 2
  %hash_coef_ptr.i.i18 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i19 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i20 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i21 = load i64, ptr %hash_coef_ptr.i.i18, align 4
  %tbl_size.i.i22 = load i64, ptr %tbl_size_ptr.i.i19, align 4
  %offset_tbl.i.i23 = load ptr, ptr %offset_tbl_ptr.i.i20, align 8
  %product.i.i.i24 = mul i64 %hash_coef.i.i21, -7260570988945952630
  %shifted.i.i.i25 = lshr i64 %product.i.i.i24, 32
  %xored.i.i.i26 = xor i64 %shifted.i.i.i25, %product.i.i.i24
  %hash.i.i.i27 = and i64 %xored.i.i.i26, %tbl_size.i.i22
  %offset_ptr.i.i28 = getelementptr i32, ptr %offset_tbl.i.i23, i64 %hash.i.i.i27
  %offset.i.i43 = load i32, ptr %offset_ptr.i.i28, align 4
  %15 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, ptr %.fca.1.extract, 1
  %17 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %.fca.2.extract, 2
  %18 = insertvalue { ptr, ptr, ptr, i32 } %17, i32 %offset.i.i43, 3
  %19 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %20 = call ptr @llvm.invariant.start.p0(i64 48, ptr nonnull %.fca.0.extract)
  %21 = sext i32 %offset.i.i43 to i64
  %22 = getelementptr ptr, ptr %.fca.0.extract, i64 %21
  %23 = getelementptr i8, ptr %22, i64 24
  %24 = load ptr, ptr %23, align 8
  %25 = call ptr %24({ ptr, ptr, ptr, i32 } %18, ptr nonnull %2)
  %26 = call { ptr, i160 } %25({ ptr, ptr, ptr, i32 } %18, { ptr, ptr, ptr, i32 } %18, ptr nonnull %2)
  %.fca.0.extract1197 = extractvalue { ptr, i160 } %26, 0
  %27 = icmp ne ptr %.fca.0.extract1197, @nil_typ
  %28 = icmp ne ptr %.fca.0.extract1197, null
  %.not1698 = and i1 %27, %28
  br i1 %.not1698, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %1
  %29 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  br label %30

30:                                               ; preds = %.lr.ph, %30
  %.fca.0.extract11100 = phi ptr [ %.fca.0.extract1197, %.lr.ph ], [ %.fca.0.extract11, %30 ]
  %31 = phi { ptr, i160 } [ %26, %.lr.ph ], [ %51, %30 ]
  %.reg2mem26.099 = phi i32 [ 0, %.lr.ph ], [ %48, %30 ]
  %.fca.1.extract13 = extractvalue { ptr, i160 } %31, 1
  %.sroa.594.8.extract.shift = lshr i160 %.fca.1.extract13, 64
  %.sroa.594.8.extract.trunc = trunc i160 %.sroa.594.8.extract.shift to i64
  %.sroa.2.8.extract.trunc = trunc i160 %.fca.1.extract13 to i64
  %32 = inttoptr i64 %.sroa.2.8.extract.trunc to ptr
  %33 = inttoptr i64 %.sroa.594.8.extract.trunc to ptr
  %hash_coef_ptr.i.i46 = getelementptr i8, ptr %.fca.0.extract11100, i64 8
  %tbl_size_ptr.i.i47 = getelementptr i8, ptr %.fca.0.extract11100, i64 16
  %offset_tbl_ptr.i.i48 = getelementptr i8, ptr %.fca.0.extract11100, i64 40
  %hash_coef.i.i49 = load i64, ptr %hash_coef_ptr.i.i46, align 4
  %tbl_size.i.i50 = load i64, ptr %tbl_size_ptr.i.i47, align 4
  %offset_tbl.i.i51 = load ptr, ptr %offset_tbl_ptr.i.i48, align 8
  %product.i.i.i52 = mul i64 %hash_coef.i.i49, 6681222582356018452
  %shifted.i.i.i53 = lshr i64 %product.i.i.i52, 32
  %xored.i.i.i54 = xor i64 %shifted.i.i.i53, %product.i.i.i52
  %hash.i.i.i55 = and i64 %xored.i.i.i54, %tbl_size.i.i50
  %offset_ptr.i.i56 = getelementptr i32, ptr %offset_tbl.i.i51, i64 %hash.i.i.i55
  %offset.i.i57 = load i32, ptr %offset_ptr.i.i56, align 4
  %34 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11100, 0
  %35 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %32, 1
  %36 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %33, 2
  %37 = insertvalue { ptr, ptr, ptr, i32 } %36, i32 %offset.i.i57, 3
  %38 = call ptr @llvm.invariant.start.p0(i64 40, ptr nonnull %.fca.0.extract11100)
  %39 = sext i32 %offset.i.i57 to i64
  %40 = getelementptr ptr, ptr %.fca.0.extract11100, i64 %39
  %41 = getelementptr i8, ptr %40, i64 8
  %42 = load ptr, ptr %41, align 8
  %43 = call ptr %42({ ptr, ptr, ptr, i32 } %37, ptr nonnull %2)
  %44 = call i8 %43({ ptr, ptr, ptr, i32 } %37, { ptr, ptr, ptr, i32 } %37, ptr nonnull %2)
  %45 = sext i8 %44 to i32
  %46 = mul i32 %.reg2mem26.099, 31
  %47 = add i32 %46, %45
  %48 = and i32 %47, 2147483647
  %49 = load ptr, ptr %23, align 8
  %50 = call ptr %49({ ptr, ptr, ptr, i32 } %18, ptr nonnull %2)
  %51 = call { ptr, i160 } %50({ ptr, ptr, ptr, i32 } %18, { ptr, ptr, ptr, i32 } %18, ptr nonnull %2)
  %.fca.0.extract11 = extractvalue { ptr, i160 } %51, 0
  %52 = icmp ne ptr %.fca.0.extract11, @nil_typ
  %53 = icmp ne ptr %.fca.0.extract11, null
  %.not16 = and i1 %52, %53
  br i1 %.not16, label %30, label %._crit_edge

._crit_edge:                                      ; preds = %30, %1
  %.reg2mem26.0.lcssa = phi i32 [ 0, %1 ], [ %48, %30 ]
  ret i32 %.reg2mem26.0.lcssa
}

define i1 @string_eq({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1) local_unnamed_addr {
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 6499063144389013426
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %hash_coef_ptr.i.i10 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i11 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i12 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i13 = load i64, ptr %hash_coef_ptr.i.i10, align 4
  %tbl_size.i.i14 = load i64, ptr %tbl_size_ptr.i.i11, align 4
  %offset_tbl.i.i15 = load ptr, ptr %offset_tbl_ptr.i.i12, align 8
  %product.i.i.i16 = mul i64 %hash_coef.i.i13, 6499063144389013426
  %shifted.i.i.i17 = lshr i64 %product.i.i.i16, 32
  %xored.i.i.i18 = xor i64 %shifted.i.i.i17, %product.i.i.i16
  %hash.i.i.i19 = and i64 %xored.i.i.i18, %tbl_size.i.i14
  %offset_ptr.i.i20 = getelementptr i32, ptr %offset_tbl.i.i15, i64 %hash.i.i.i19
  %offset.i.i35 = load i32, ptr %offset_ptr.i.i20, align 4
  %3 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %4 = insertvalue { ptr, ptr, ptr, i32 } %3, ptr %.fca.1.extract, 1
  %5 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %.fca.2.extract, 2
  %6 = insertvalue { ptr, ptr, ptr, i32 } %5, i32 %offset.i.i35, 3
  %7 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %8 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %.fca.1.extract3, 1
  %9 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %.fca.2.extract5, 2
  %10 = insertvalue { ptr, ptr, ptr, i32 } %9, i32 %offset.i.i, 3
  %11 = alloca [1 x ptr], align 8
  store ptr @_parameterization_String, ptr %11, align 8
  %12 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %11)
  %13 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract1)
  %14 = sext i32 %offset.i.i to i64
  %15 = getelementptr ptr, ptr %.fca.0.extract1, i64 %14
  %16 = getelementptr i8, ptr %15, i64 88
  %17 = load ptr, ptr %16, align 8
  %18 = alloca { ptr }, align 8
  store ptr %.fca.0.extract, ptr %18, align 8
  %19 = call ptr %17({ ptr, ptr, ptr, i32 } %10, ptr nonnull %18)
  %20 = call i1 %19({ ptr, ptr, ptr, i32 } %10, { ptr, ptr, ptr, i32 } %10, ptr nonnull %11, { ptr, ptr, ptr, i32 } %6)
  ret i1 %20
}

define void @print_benchmark_result({ ptr, ptr, ptr, i32 } %0, i32 %1, i64 %2) local_unnamed_addr {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 6499063144389013426
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %6 = insertvalue { ptr, i160 } undef, ptr %.fca.0.extract, 0
  %7 = ptrtoint ptr %.fca.1.extract to i64
  %8 = ptrtoint ptr %.fca.2.extract to i64
  %.sroa.6.8.insert.ext = zext i32 %offset.i.i to i160
  %.sroa.6.8.insert.shift = shl nuw i160 %.sroa.6.8.insert.ext, 128
  %.sroa.5.8.insert.ext = zext i64 %8 to i160
  %.sroa.5.8.insert.shift = shl nuw nsw i160 %.sroa.5.8.insert.ext, 64
  %.sroa.5.8.insert.insert = or disjoint i160 %.sroa.6.8.insert.shift, %.sroa.5.8.insert.shift
  %.sroa.3.8.insert.ext = zext i64 %7 to i160
  %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.5.8.insert.insert, %.sroa.3.8.insert.ext
  %9 = insertvalue { ptr, i160 } %6, i160 %.sroa.3.8.insert.insert, 1
  %10 = alloca [1 x ptr], align 8
  store ptr @_parameterization_String, ptr %10, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %10)
  %12 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %13 = getelementptr i8, ptr %.fca.0.extract, i64 24
  %14 = getelementptr i8, ptr %.fca.0.extract, i64 32
  %15 = load i64, ptr %hash_coef_ptr.i.i, align 4
  %16 = load i64, ptr %tbl_size_ptr.i.i, align 4
  %17 = load ptr, ptr %13, align 8
  %18 = load ptr, ptr %14, align 8
  %result.i.i = tail call i1 %17(i64 %16, i64 %15, i64 -5126806859456325683, i64 ptrtoint (ptr @nil_typ to i64), ptr readonly %18) #0
  %19 = icmp eq ptr %.fca.0.extract, null
  %20 = or i1 %19, %result.i.i
  br i1 %20, label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit116, label %21

21:                                               ; preds = %3
  %result.i3.i = tail call i1 %17(i64 %16, i64 %15, i64 2582149688529881115, i64 ptrtoint (ptr @i8_typ to i64), ptr readonly %18) #0
  br i1 %result.i3.i, label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit116, label %22

22:                                               ; preds = %21
  %result.i4.i = tail call i1 %17(i64 %16, i64 %15, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr readonly %18) #0
  %result.i5.i = tail call i1 %17(i64 %16, i64 %15, i64 6681222582356018452, i64 ptrtoint (ptr @Character to i64), ptr readonly %18) #0
  %not.result.i4.i = xor i1 %result.i4.i, true
  %.reg2mem49.0.i = select i1 %not.result.i4.i, i1 true, i1 %result.i5.i
  br i1 %.reg2mem49.0.i, label %23, label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit116

23:                                               ; preds = %22
  %result.i6.i = tail call i1 %17(i64 %16, i64 %15, i64 -757315540097298781, i64 ptrtoint (ptr @f64_typ to i64), ptr readonly %18) #0
  br i1 %result.i6.i, label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit116, label %24

24:                                               ; preds = %23
  %not.result.i5.i = xor i1 %result.i5.i, true
  %.reg2mem47.0.i = or i1 %result.i4.i, %not.result.i5.i
  br i1 %.reg2mem47.0.i, label %25, label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit116

25:                                               ; preds = %24
  %result.i9.i = tail call i1 %17(i64 %16, i64 %15, i64 -7260840641129990118, i64 ptrtoint (ptr @Representable to i64), ptr readonly %18) #0
  %result.i9.not.i = xor i1 %result.i9.i, true
  %.reg2mem45.0.i = or i1 %result.i4.i, %result.i5.i
  %or.cond.i = select i1 %result.i9.not.i, i1 true, i1 %.reg2mem45.0.i
  br i1 %or.cond.i, label %.critedge.i, label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit116

.critedge.i:                                      ; preds = %25
  %result.i12.i = tail call i1 %17(i64 %16, i64 %15, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr readonly %18) #0
  br i1 %result.i12.i, label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit116, label %26

26:                                               ; preds = %.critedge.i
  %result.i13.i = tail call i1 %17(i64 %16, i64 %15, i64 5801531371504802705, i64 ptrtoint (ptr @bool_typ to i64), ptr readonly %18) #0
  %27 = select i1 %result.i13.i, i32 5, i32 1
  br label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit116

IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit116: ; preds = %3, %21, %22, %23, %24, %25, %.critedge.i, %26
  %.reg2mem29.0.i = phi i32 [ 9, %3 ], [ 2, %21 ], [ 3, %23 ], [ %27, %26 ], [ 7, %.critedge.i ], [ 8, %24 ], [ 4, %22 ], [ 6, %25 ]
  %28 = zext nneg i32 %.reg2mem29.0.i to i64
  %29 = getelementptr [10 x ptr], ptr @IO, i64 0, i64 %28
  %30 = getelementptr i8, ptr %29, i64 72
  %31 = load ptr, ptr %30, align 8
  call void %31(ptr nonnull %10, { ptr, i160 } %9)
  %result.i = call noalias dereferenceable_or_null(15) ptr @bump_malloc_inner(i64 noundef 15, ptr nonnull @current_ptr) #29
  store <14 x i8> <i8 32, i8 32, i8 79, i8 112, i8 101, i8 114, i8 97, i8 116, i8 105, i8 111, i8 110, i8 115, i8 58, i8 32>, ptr %result.i, align 16
  %result.i22 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %32 = alloca { ptr, ptr, ptr, i32 }, align 8
  %33 = getelementptr inbounds i8, ptr %32, i64 8
  %34 = getelementptr inbounds i8, ptr %32, i64 24
  store ptr @String, ptr %32, align 8
  store ptr %result.i22, ptr %33, align 8
  store i32 9, ptr %34, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %32)
  store ptr %result.i, ptr %result.i22, align 8
  %36 = getelementptr i8, ptr %result.i22, i64 8
  store i32 14, ptr %36, align 4
  %37 = getelementptr i8, ptr %result.i22, i64 12
  store i32 15, ptr %37, align 4
  %38 = load i160, ptr %33, align 8
  %39 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %.sroa.3.8.extract.trunc.i = trunc i160 %38 to i64
  %40 = inttoptr i64 %.sroa.3.8.extract.trunc.i to ptr
  %41 = getelementptr i8, ptr %40, i64 8
  %42 = load i32, ptr %41, align 4
  %43 = add i32 %42, 1
  %44 = sext i32 %43 to i64
  %result.i.i306 = call noalias ptr @bump_malloc_inner(i64 noundef %44, ptr nonnull @current_ptr) #29
  %45 = load i32, ptr %41, align 4
  %46 = icmp sgt i32 %45, 0
  br i1 %46, label %.lr.ph.i, label %String_c_string_.exit

.lr.ph.i:                                         ; preds = %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit116
  %47 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %48 = load ptr, ptr %40, align 8
  %49 = zext nneg i32 %45 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i306, ptr align 1 %48, i64 %49, i1 false)
  br label %String_c_string_.exit

String_c_string_.exit:                            ; preds = %.lr.ph.i, %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit116
  %50 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %51 = sext i32 %45 to i64
  %52 = getelementptr i8, ptr %result.i.i306, i64 %51
  store i8 0, ptr %52, align 1
  %puts.i = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i306)
  %53 = call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i32_string, i32 %1)
  %result.i59 = call noalias dereferenceable_or_null(15) ptr @bump_malloc_inner(i64 noundef 15, ptr nonnull @current_ptr) #29
  store <14 x i8> <i8 32, i8 32, i8 84, i8 111, i8 116, i8 97, i8 108, i8 32, i8 84, i8 105, i8 109, i8 101, i8 58, i8 32>, ptr %result.i59, align 16
  %result.i60 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %54 = alloca { ptr, ptr, ptr, i32 }, align 8
  %55 = getelementptr inbounds i8, ptr %54, i64 8
  %56 = getelementptr inbounds i8, ptr %54, i64 24
  store ptr @String, ptr %54, align 8
  store ptr %result.i60, ptr %55, align 8
  store i32 9, ptr %56, align 8
  %57 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %54)
  store ptr %result.i59, ptr %result.i60, align 8
  %58 = getelementptr i8, ptr %result.i60, i64 8
  store i32 14, ptr %58, align 4
  %59 = getelementptr i8, ptr %result.i60, i64 12
  store i32 15, ptr %59, align 4
  %60 = load i160, ptr %55, align 8
  %61 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %.sroa.3.8.extract.trunc.i231 = trunc i160 %60 to i64
  %62 = inttoptr i64 %.sroa.3.8.extract.trunc.i231 to ptr
  %63 = getelementptr i8, ptr %62, i64 8
  %64 = load i32, ptr %63, align 4
  %65 = add i32 %64, 1
  %66 = sext i32 %65 to i64
  %result.i.i320 = call noalias ptr @bump_malloc_inner(i64 noundef %66, ptr nonnull @current_ptr) #29
  %67 = load i32, ptr %63, align 4
  %68 = icmp sgt i32 %67, 0
  br i1 %68, label %.lr.ph.i321, label %String_c_string_.exit325

.lr.ph.i321:                                      ; preds = %String_c_string_.exit
  %69 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %70 = load ptr, ptr %62, align 8
  %71 = zext nneg i32 %67 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i320, ptr align 1 %70, i64 %71, i1 false)
  br label %String_c_string_.exit325

String_c_string_.exit325:                         ; preds = %.lr.ph.i321, %String_c_string_.exit
  %72 = sext i32 %67 to i64
  %73 = getelementptr i8, ptr %result.i.i320, i64 %72
  store i8 0, ptr %73, align 1
  %puts.i247 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i320)
  %74 = call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i64_string, i64 %2)
  %result.i97 = call noalias dereferenceable_or_null(4) ptr @bump_malloc_inner(i64 noundef 4, ptr nonnull @current_ptr) #29
  store <3 x i8> <i8 32, i8 109, i8 115>, ptr %result.i97, align 4
  %result.i98 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %75 = alloca { ptr, ptr, ptr, i32 }, align 8
  %76 = getelementptr inbounds i8, ptr %75, i64 8
  %77 = getelementptr inbounds i8, ptr %75, i64 24
  store ptr @String, ptr %75, align 8
  store ptr %result.i98, ptr %76, align 8
  store i32 9, ptr %77, align 8
  %78 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %75)
  store ptr %result.i97, ptr %result.i98, align 8
  %79 = getelementptr i8, ptr %result.i98, i64 8
  store i32 3, ptr %79, align 4
  %80 = getelementptr i8, ptr %result.i98, i64 12
  store i32 4, ptr %80, align 4
  %81 = load i160, ptr %76, align 8
  %82 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %.sroa.3.8.extract.trunc.i250 = trunc i160 %81 to i64
  %83 = inttoptr i64 %.sroa.3.8.extract.trunc.i250 to ptr
  %84 = getelementptr i8, ptr %83, i64 8
  %85 = load i32, ptr %84, align 4
  %86 = add i32 %85, 1
  %87 = sext i32 %86 to i64
  %result.i.i339 = call noalias ptr @bump_malloc_inner(i64 noundef %87, ptr nonnull @current_ptr) #29
  %88 = load i32, ptr %84, align 4
  %89 = icmp sgt i32 %88, 0
  br i1 %89, label %.lr.ph.i340, label %String_c_string_.exit344

.lr.ph.i340:                                      ; preds = %String_c_string_.exit325
  %90 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %91 = load ptr, ptr %83, align 8
  %92 = zext nneg i32 %88 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i339, ptr align 1 %91, i64 %92, i1 false)
  br label %String_c_string_.exit344

String_c_string_.exit344:                         ; preds = %.lr.ph.i340, %String_c_string_.exit325
  %93 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %94 = sext i32 %88 to i64
  %95 = getelementptr i8, ptr %result.i.i339, i64 %94
  store i8 0, ptr %95, align 1
  %puts.i266 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i339)
  %96 = icmp sgt i32 %1, 0
  br i1 %96, label %97, label %._crit_edge

97:                                               ; preds = %String_c_string_.exit344
  %98 = icmp sgt i64 %2, 0
  br i1 %98, label %99, label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit174

99:                                               ; preds = %97
  %100 = zext nneg i32 %1 to i64
  %101 = mul i64 %2, 1000000
  %102 = sdiv i64 %101, %100
  br label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit174

IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit174: ; preds = %97, %99
  %.reg2mem6.0 = phi i64 [ %102, %99 ], [ 0, %97 ]
  %result.i117 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  store <15 x i8> <i8 32, i8 32, i8 84, i8 105, i8 109, i8 101, i8 47, i8 79, i8 112, i8 58, i8 32, i8 32, i8 32, i8 32, i8 126>, ptr %result.i117, align 16
  %result.i118 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %103 = getelementptr inbounds i8, ptr %4, i64 8
  %104 = getelementptr inbounds i8, ptr %4, i64 24
  store ptr @String, ptr %4, align 8
  store ptr %result.i118, ptr %103, align 8
  store i32 9, ptr %104, align 8
  %105 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %4)
  store ptr %result.i117, ptr %result.i118, align 8
  %106 = getelementptr i8, ptr %result.i118, i64 8
  store i32 15, ptr %106, align 4
  %107 = getelementptr i8, ptr %result.i118, i64 12
  store i32 16, ptr %107, align 4
  %108 = load i160, ptr %103, align 8
  %109 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %.sroa.3.8.extract.trunc.i269 = trunc i160 %108 to i64
  %110 = inttoptr i64 %.sroa.3.8.extract.trunc.i269 to ptr
  %111 = getelementptr i8, ptr %110, i64 8
  %112 = load i32, ptr %111, align 4
  %113 = add i32 %112, 1
  %114 = sext i32 %113 to i64
  %result.i.i358 = call noalias ptr @bump_malloc_inner(i64 noundef %114, ptr nonnull @current_ptr) #29
  %115 = load i32, ptr %111, align 4
  %116 = icmp sgt i32 %115, 0
  br i1 %116, label %.lr.ph.i359, label %String_c_string_.exit363

.lr.ph.i359:                                      ; preds = %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit174
  %117 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %118 = load ptr, ptr %110, align 8
  %119 = zext nneg i32 %115 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i358, ptr align 1 %118, i64 %119, i1 false)
  br label %String_c_string_.exit363

String_c_string_.exit363:                         ; preds = %.lr.ph.i359, %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit174
  %120 = sext i32 %115 to i64
  %121 = getelementptr i8, ptr %result.i.i358, i64 %120
  store i8 0, ptr %121, align 1
  %puts.i285 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i358)
  %122 = call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i64_string, i64 %.reg2mem6.0)
  %result.i155 = call noalias dereferenceable_or_null(4) ptr @bump_malloc_inner(i64 noundef 4, ptr nonnull @current_ptr) #29
  store <3 x i8> <i8 32, i8 110, i8 115>, ptr %result.i155, align 4
  %result.i156 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %123 = getelementptr inbounds i8, ptr %5, i64 8
  %124 = getelementptr inbounds i8, ptr %5, i64 24
  store ptr @String, ptr %5, align 8
  store ptr %result.i156, ptr %123, align 8
  store i32 9, ptr %124, align 8
  %125 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %5)
  store ptr %result.i155, ptr %result.i156, align 8
  %126 = getelementptr i8, ptr %result.i156, i64 8
  store i32 3, ptr %126, align 4
  %127 = getelementptr i8, ptr %result.i156, i64 12
  store i32 4, ptr %127, align 4
  %128 = load i160, ptr %123, align 8
  %129 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %.sroa.3.8.extract.trunc.i288 = trunc i160 %128 to i64
  %130 = inttoptr i64 %.sroa.3.8.extract.trunc.i288 to ptr
  %131 = getelementptr i8, ptr %130, i64 8
  %132 = load i32, ptr %131, align 4
  %133 = add i32 %132, 1
  %134 = sext i32 %133 to i64
  %result.i.i377 = call noalias ptr @bump_malloc_inner(i64 noundef %134, ptr nonnull @current_ptr) #29
  %135 = load i32, ptr %131, align 4
  %136 = icmp sgt i32 %135, 0
  br i1 %136, label %.lr.ph.i378, label %String_c_string_.exit382

.lr.ph.i378:                                      ; preds = %String_c_string_.exit363
  %137 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %138 = load ptr, ptr %130, align 8
  %139 = zext nneg i32 %135 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i377, ptr align 1 %138, i64 %139, i1 false)
  br label %String_c_string_.exit382

String_c_string_.exit382:                         ; preds = %.lr.ph.i378, %String_c_string_.exit363
  %140 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %141 = sext i32 %135 to i64
  %142 = getelementptr i8, ptr %result.i.i377, i64 %141
  store i8 0, ptr %142, align 1
  %puts.i304 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i377)
  br label %._crit_edge

._crit_edge:                                      ; preds = %String_c_string_.exit344, %String_c_string_.exit382
  ret void
}

define void @benchmark_insert_sequential(i32 %0) local_unnamed_addr {
  %2 = alloca [0 x ptr], align 8
  %3 = alloca [1 x ptr], align 8
  %4 = alloca { ptr }, align 8
  %5 = alloca [1 x ptr], align 8
  %6 = alloca { ptr }, align 8
  %7 = alloca [1 x ptr], align 8
  %8 = alloca { ptr }, align 8
  %9 = alloca [1 x ptr], align 8
  %10 = alloca { ptr }, align 8
  %11 = alloca [1 x ptr], align 8
  %12 = alloca { ptr }, align 8
  %13 = alloca [1 x ptr], align 8
  %14 = alloca { ptr }, align 8
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  %17 = alloca [1 x ptr], align 8
  %18 = alloca { ptr }, align 8
  %19 = alloca [2 x ptr], align 8
  %20 = alloca { ptr, ptr }, align 8
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %.sroa.0680.i510 = alloca ptr, align 8
  %24 = alloca i64, align 8
  %25 = alloca [1 x ptr], align 8
  %26 = alloca { ptr }, align 8
  %27 = alloca [2 x ptr], align 8
  %28 = alloca { ptr, ptr }, align 8
  %29 = alloca i32, align 4
  %30 = alloca i32, align 4
  %31 = alloca i32, align 4
  %.sroa.0.i512 = alloca ptr, align 8
  %32 = alloca i64, align 8
  %33 = alloca { ptr, ptr, ptr, i32 }, align 8
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = alloca [1 x ptr], align 8
  %36 = alloca { ptr }, align 8
  %37 = alloca [2 x ptr], align 8
  %38 = alloca { ptr, ptr }, align 8
  %39 = alloca i32, align 4
  %40 = alloca i32, align 4
  %41 = alloca i32, align 4
  %.sroa.0680.i = alloca ptr, align 8
  %42 = alloca i64, align 8
  %43 = alloca [1 x ptr], align 8
  %44 = alloca { ptr }, align 8
  %45 = alloca [2 x ptr], align 8
  %46 = alloca { ptr, ptr }, align 8
  %47 = alloca i32, align 4
  %48 = alloca i32, align 4
  %49 = alloca i32, align 4
  %.sroa.0.i354 = alloca ptr, align 8
  %50 = alloca i64, align 8
  %51 = alloca { ptr, ptr, ptr, i32 }, align 8
  %52 = alloca { ptr, ptr, ptr, i32 }, align 8
  %53 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.sroa.0271.i = alloca ptr, align 8
  %.sroa.1.i = alloca i160, align 8
  %.sroa.0.i = alloca ptr, align 8
  %.sroa.2.i = alloca i160, align 8
  %54 = alloca [1 x ptr], align 8
  %55 = alloca { ptr }, align 8
  %.sroa.0123.i = alloca ptr, align 8
  %.sroa.2124.i = alloca i160, align 8
  %.sroa.0115.i = alloca ptr, align 8
  %.sroa.2116.i = alloca i160, align 8
  %56 = alloca [1 x ptr], align 8
  %57 = alloca { ptr }, align 8
  %58 = alloca { ptr, ptr, ptr, i32 }, align 8
  %59 = alloca [2 x ptr], align 8
  %60 = alloca { ptr, ptr }, align 8
  %61 = alloca [1 x ptr], align 8
  %62 = alloca { ptr }, align 8
  %63 = alloca { ptr, ptr, ptr, i32 }, align 8
  %64 = alloca [2 x ptr], align 8
  %65 = alloca { ptr, ptr }, align 8
  %66 = alloca { ptr, ptr, ptr, i32 }, align 8
  %67 = alloca [1 x ptr], align 8
  %68 = alloca { ptr }, align 8
  %oldProtect.i33 = alloca i32, align 4
  %oldProtect.i = alloca i32, align 4
  %69 = alloca { ptr, ptr, ptr, i32 }, align 8
  %70 = alloca { ptr, ptr, ptr, i32 }, align 8
  %71 = alloca { ptr, ptr, ptr, i32 }, align 8
  %result.i = tail call noalias dereferenceable_or_null(120) ptr @bump_malloc_inner(i64 noundef 120, ptr nonnull @current_ptr) #29
  store ptr @_parameterization_Ptri32, ptr %result.i, align 8
  %72 = getelementptr i8, ptr %result.i, i64 8
  store ptr @_parameterization_Ptri32, ptr %72, align 8
  %73 = getelementptr i8, ptr %result.i, i64 16
  store ptr @_parameterization_PairPtri32._Ptri32, ptr %73, align 8
  %74 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %result.i)
  %result.i30 = tail call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %oldProtect.i)
  %result.i31 = call i32 @VirtualProtect(ptr %result.i30, i64 16, i32 64, ptr nonnull %oldProtect.i) #16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %oldProtect.i)
  call void @llvm.init.trampoline(ptr %result.i30, ptr nonnull @wzakivevxv, ptr nonnull @i32_hasher)
  %ret.i = call ptr @llvm.adjust.trampoline(ptr readonly %result.i30) #31
  %75 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i30)
  %result.i32 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %oldProtect.i33)
  %result.i34 = call i32 @VirtualProtect(ptr %result.i32, i64 16, i32 64, ptr nonnull %oldProtect.i33) #16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %oldProtect.i33)
  call void @llvm.init.trampoline(ptr %result.i32, ptr nonnull @cuiaypnmsn, ptr nonnull @i32_eq)
  %ret.i35 = call ptr @llvm.adjust.trampoline(ptr readonly %result.i32) #31
  %76 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i32)
  %77 = getelementptr i8, ptr %result.i, i64 96
  store ptr %ret.i, ptr %77, align 8
  %78 = getelementptr i8, ptr %result.i, i64 104
  store ptr %ret.i35, ptr %78, align 8
  %result.i.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %79 = getelementptr i8, ptr %result.i.i, i64 16
  store ptr @_parameterization_Nil, ptr %79, align 8
  %result.i4.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %80 = getelementptr i8, ptr %result.i4.i, i64 16
  store ptr @_parameterization_Ptri32, ptr %80, align 8
  %81 = getelementptr i8, ptr %result.i4.i, i64 8
  store ptr @_parameterization_Ptri32, ptr %81, align 8
  %82 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i4.i)
  store ptr @Entry, ptr %result.i4.i, align 8
  %83 = getelementptr i8, ptr %result.i.i, i64 8
  store ptr %result.i4.i, ptr %83, align 8
  %84 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i)
  store ptr @union_typ, ptr %result.i.i, align 8
  %result.i5.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i, ptr %result.i5.i, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i5.i)
  %86 = getelementptr i8, ptr %result.i5.i, i64 16
  store i32 8, ptr %86, align 4
  %87 = getelementptr i8, ptr %result.i5.i, i64 20
  store i32 8, ptr %87, align 4
  %result.i.i.i = call noalias dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nonnull @current_ptr) #29
  %88 = getelementptr i8, ptr %result.i5.i, i64 8
  store ptr %result.i.i.i, ptr %88, align 8
  %89 = getelementptr i8, ptr %result.i, i64 24
  store ptr @Array, ptr %89, align 8
  %90 = getelementptr i8, ptr %result.i, i64 32
  store ptr %result.i5.i, ptr %90, align 8
  %91 = getelementptr i8, ptr %result.i, i64 40
  %92 = getelementptr i8, ptr %result.i, i64 48
  store i32 9, ptr %92, align 4
  %result.i20.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %93 = getelementptr i8, ptr %result.i20.i, i64 16
  store ptr @_parameterization_Nil, ptr %93, align 8
  %result.i21.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %94 = getelementptr i8, ptr %result.i21.i, i64 16
  store ptr @_parameterization_Ptri32, ptr %94, align 8
  %95 = getelementptr i8, ptr %result.i21.i, i64 8
  store ptr @_parameterization_Ptri32, ptr %95, align 8
  %96 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i21.i)
  store ptr @Entry, ptr %result.i21.i, align 8
  %97 = getelementptr i8, ptr %result.i20.i, i64 8
  store ptr %result.i21.i, ptr %97, align 8
  %98 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i20.i)
  store ptr @union_typ, ptr %result.i20.i, align 8
  %result.i22.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i20.i, ptr %result.i22.i, align 8
  %99 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i22.i)
  %100 = getelementptr i8, ptr %result.i22.i, i64 16
  store i32 8, ptr %100, align 4
  %101 = getelementptr i8, ptr %result.i22.i, i64 20
  store i32 8, ptr %101, align 4
  %result.i.i97.i = call noalias dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nonnull @current_ptr) #29
  %102 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %103 = getelementptr i8, ptr %result.i22.i, i64 8
  store ptr %result.i.i97.i, ptr %103, align 8
  %104 = getelementptr i8, ptr %result.i, i64 56
  store ptr @Array, ptr %104, align 8
  %105 = getelementptr i8, ptr %result.i, i64 64
  store ptr %result.i22.i, ptr %105, align 8
  %106 = getelementptr i8, ptr %result.i, i64 72
  %107 = getelementptr i8, ptr %result.i, i64 80
  store i32 9, ptr %107, align 4
  %108 = getelementptr i8, ptr %result.i, i64 88
  %109 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %110 = getelementptr i8, ptr %result.i, i64 112
  store i32 100, ptr %110, align 4
  %111 = call i64 @clock()
  %112 = icmp sgt i32 %0, 0
  br i1 %112, label %._crit_edge.preheader, label %1489

._crit_edge.preheader:                            ; preds = %1
  %113 = getelementptr inbounds i8, ptr %66, i64 8
  %114 = getelementptr inbounds i8, ptr %66, i64 24
  %115 = getelementptr inbounds i8, ptr %66, i64 16
  %116 = getelementptr inbounds i8, ptr %63, i64 8
  %117 = getelementptr inbounds i8, ptr %63, i64 24
  %118 = getelementptr inbounds i8, ptr %63, i64 16
  %119 = getelementptr inbounds i8, ptr %64, i64 8
  %120 = getelementptr inbounds i8, ptr %65, i64 8
  %121 = getelementptr inbounds i8, ptr %58, i64 8
  %122 = getelementptr inbounds i8, ptr %58, i64 24
  %123 = getelementptr inbounds i8, ptr %58, i64 16
  %124 = getelementptr inbounds i8, ptr %59, i64 8
  %125 = getelementptr inbounds i8, ptr %60, i64 8
  %126 = getelementptr inbounds i8, ptr %52, i64 8
  %127 = getelementptr inbounds i8, ptr %52, i64 24
  %128 = getelementptr inbounds i8, ptr %52, i64 16
  %129 = getelementptr inbounds i8, ptr %53, i64 8
  %130 = getelementptr inbounds i8, ptr %53, i64 24
  %131 = getelementptr inbounds i8, ptr %53, i64 16
  %132 = getelementptr inbounds i8, ptr %51, i64 8
  %133 = getelementptr inbounds i8, ptr %51, i64 16
  %134 = getelementptr inbounds i8, ptr %51, i64 24
  %135 = getelementptr inbounds i8, ptr %45, i64 8
  %136 = getelementptr inbounds i8, ptr %46, i64 8
  %137 = getelementptr inbounds i8, ptr %37, i64 8
  %138 = getelementptr inbounds i8, ptr %38, i64 8
  %139 = getelementptr inbounds i8, ptr %33, i64 8
  %140 = getelementptr inbounds i8, ptr %33, i64 24
  %141 = getelementptr inbounds i8, ptr %33, i64 16
  %142 = getelementptr inbounds i8, ptr %34, i64 8
  %143 = getelementptr inbounds i8, ptr %34, i64 24
  %144 = getelementptr inbounds i8, ptr %34, i64 16
  %145 = getelementptr inbounds i8, ptr %27, i64 8
  %146 = getelementptr inbounds i8, ptr %28, i64 8
  %147 = getelementptr inbounds i8, ptr %19, i64 8
  %148 = getelementptr inbounds i8, ptr %20, i64 8
  %149 = getelementptr inbounds i8, ptr %15, i64 8
  %150 = getelementptr inbounds i8, ptr %15, i64 24
  %151 = getelementptr inbounds i8, ptr %15, i64 16
  %152 = getelementptr inbounds i8, ptr %16, i64 8
  %153 = getelementptr inbounds i8, ptr %16, i64 24
  %154 = getelementptr inbounds i8, ptr %16, i64 16
  %155 = insertvalue { ptr, ptr, ptr, i32 } { ptr @HashMap, ptr undef, ptr undef, i32 undef }, ptr %result.i, 1
  %156 = insertvalue { ptr, ptr, ptr, i32 } %155, ptr undef, 2
  %157 = insertvalue { ptr, ptr, ptr, i32 } %156, i32 9, 3
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.preheader, %HashMap_insert_keyK_valueV.exit
  %.reg2mem48.085 = phi i32 [ %158, %HashMap_insert_keyK_valueV.exit ], [ 0, %._crit_edge.preheader ]
  %158 = add nuw nsw i32 %.reg2mem48.085, 1
  %.sroa.023.0.insert.ext = zext nneg i32 %.reg2mem48.085 to i160
  %159 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.023.0.insert.ext, 1
  %.sroa.020.0.insert.ext = zext nneg i32 %158 to i160
  %160 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.020.0.insert.ext, 1
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %58)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %59)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %60)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %61)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %62)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %63)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %64)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %65)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %66)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %67)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %68)
  %161 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %162 = load ptr, ptr %77, align 8
  %163 = call i32 %162({ ptr, i160 } %159)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %164 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %165 = load ptr, ptr %89, align 8
  %166 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %165, 0
  %167 = load ptr, ptr %90, align 8
  %168 = insertvalue { ptr, ptr, ptr, i32 } %166, ptr %167, 1
  %169 = load ptr, ptr %91, align 8
  %170 = insertvalue { ptr, ptr, ptr, i32 } %168, ptr %169, 2
  %171 = load i32, ptr %92, align 4
  %172 = insertvalue { ptr, ptr, ptr, i32 } %170, i32 %171, 3
  %hash_coef_ptr.i.i10.i = getelementptr i8, ptr %165, i64 8
  %tbl_size_ptr.i.i11.i = getelementptr i8, ptr %165, i64 16
  %offset_tbl_ptr.i.i12.i = getelementptr i8, ptr %165, i64 40
  %hash_coef.i.i13.i = load i64, ptr %hash_coef_ptr.i.i10.i, align 4
  %tbl_size.i.i14.i = load i64, ptr %tbl_size_ptr.i.i11.i, align 4
  %offset_tbl.i.i15.i = load ptr, ptr %offset_tbl_ptr.i.i12.i, align 8
  %product.i.i.i16.i = mul i64 %hash_coef.i.i13.i, -5261542750394134544
  %shifted.i.i.i17.i = lshr i64 %product.i.i.i16.i, 32
  %xored.i.i.i18.i = xor i64 %shifted.i.i.i17.i, %product.i.i.i16.i
  %hash.i.i.i19.i = and i64 %xored.i.i.i18.i, %tbl_size.i.i14.i
  %offset_ptr.i.i20.i = getelementptr i32, ptr %offset_tbl.i.i15.i, i64 %hash.i.i.i19.i
  %offset.i.i21.i = load i32, ptr %offset_ptr.i.i20.i, align 4
  %eq.i.i303 = icmp eq i32 %171, %offset.i.i21.i
  call void @llvm.assume(i1 %eq.i.i303) #30
  %173 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %174 = call ptr @llvm.invariant.start.p0(i64 600, ptr %165)
  %175 = sext i32 %171 to i64
  %176 = getelementptr ptr, ptr %165, i64 %175
  %177 = getelementptr i8, ptr %176, i64 64
  %178 = load ptr, ptr %177, align 8
  %179 = call ptr %178({ ptr, ptr, ptr, i32 } %172, ptr nonnull %2)
  %180 = call i32 %179({ ptr, ptr, ptr, i32 } %172, { ptr, ptr, ptr, i32 } %172, ptr nonnull %2)
  %181 = add i32 %180, -1
  %182 = and i32 %181, %163
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %183 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %184 = load ptr, ptr %89, align 8
  %185 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %184, 0
  %186 = load ptr, ptr %90, align 8
  %187 = insertvalue { ptr, ptr, ptr, i32 } %185, ptr %186, 1
  %188 = load ptr, ptr %91, align 8
  %189 = insertvalue { ptr, ptr, ptr, i32 } %187, ptr %188, 2
  %190 = load i32, ptr %92, align 4
  %191 = insertvalue { ptr, ptr, ptr, i32 } %189, i32 %190, 3
  %hash_coef_ptr.i.i160.i = getelementptr i8, ptr %184, i64 8
  %tbl_size_ptr.i.i161.i = getelementptr i8, ptr %184, i64 16
  %offset_tbl_ptr.i.i162.i = getelementptr i8, ptr %184, i64 40
  %hash_coef.i.i163.i = load i64, ptr %hash_coef_ptr.i.i160.i, align 4
  %tbl_size.i.i164.i = load i64, ptr %tbl_size_ptr.i.i161.i, align 4
  %offset_tbl.i.i165.i = load ptr, ptr %offset_tbl_ptr.i.i162.i, align 8
  %product.i.i.i166.i = mul i64 %hash_coef.i.i163.i, -5261542750394134544
  %shifted.i.i.i167.i = lshr i64 %product.i.i.i166.i, 32
  %xored.i.i.i168.i = xor i64 %shifted.i.i.i167.i, %product.i.i.i166.i
  %hash.i.i.i169.i = and i64 %xored.i.i.i168.i, %tbl_size.i.i164.i
  %offset_ptr.i.i170.i = getelementptr i32, ptr %offset_tbl.i.i165.i, i64 %hash.i.i.i169.i
  %offset.i.i171.i = load i32, ptr %offset_ptr.i.i170.i, align 4
  %eq.i.i = icmp eq i32 %190, %offset.i.i171.i
  call void @llvm.assume(i1 %eq.i.i) #30
  store ptr @_parameterization_Ptri32, ptr %67, align 8
  %192 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %67)
  %193 = call ptr @llvm.invariant.start.p0(i64 600, ptr %184)
  %194 = sext i32 %190 to i64
  %195 = getelementptr ptr, ptr %184, i64 %194
  %196 = getelementptr i8, ptr %195, i64 120
  %197 = load ptr, ptr %196, align 8
  store ptr @i32_typ, ptr %68, align 8
  %198 = call ptr %197({ ptr, ptr, ptr, i32 } %191, ptr nonnull %68)
  %199 = call { ptr, i160 } %198({ ptr, ptr, ptr, i32 } %191, { ptr, ptr, ptr, i32 } %191, ptr nonnull %67, i32 %182)
  %.fca.0.extract.i = extractvalue { ptr, i160 } %199, 0
  %200 = icmp ne ptr %.fca.0.extract.i, @nil_typ
  %201 = icmp ne ptr %.fca.0.extract.i, null
  %.not151.i = and i1 %200, %201
  br i1 %.not151.i, label %202, label %.critedge.i

202:                                              ; preds = %._crit_edge
  %.fca.1.extract.i = extractvalue { ptr, i160 } %199, 1
  %.sroa.4518.8.extract.trunc.i = trunc i160 %.fca.1.extract.i to i64
  %203 = inttoptr i64 %.sroa.4518.8.extract.trunc.i to ptr
  %.sroa.7520.8.extract.shift.i = lshr i160 %.fca.1.extract.i, 64
  %.sroa.7520.8.extract.trunc.i = trunc i160 %.sroa.7520.8.extract.shift.i to i64
  %204 = inttoptr i64 %.sroa.7520.8.extract.trunc.i to ptr
  %hash_coef_ptr.i.i174.i = getelementptr i8, ptr %.fca.0.extract.i, i64 8
  %tbl_size_ptr.i.i175.i = getelementptr i8, ptr %.fca.0.extract.i, i64 16
  %offset_tbl_ptr.i.i176.i = getelementptr i8, ptr %.fca.0.extract.i, i64 40
  %hash_coef.i.i177.i = load i64, ptr %hash_coef_ptr.i.i174.i, align 4
  %tbl_size.i.i178.i = load i64, ptr %tbl_size_ptr.i.i175.i, align 4
  %offset_tbl.i.i179.i = load ptr, ptr %offset_tbl_ptr.i.i176.i, align 8
  %product.i.i.i180.i = mul i64 %hash_coef.i.i177.i, 4015701072841558310
  %shifted.i.i.i181.i = lshr i64 %product.i.i.i180.i, 32
  %xored.i.i.i182.i = xor i64 %shifted.i.i.i181.i, %product.i.i.i180.i
  %hash.i.i.i183.i = and i64 %xored.i.i.i182.i, %tbl_size.i.i178.i
  %offset_ptr.i.i184.i = getelementptr i32, ptr %offset_tbl.i.i179.i, i64 %hash.i.i.i183.i
  %offset.i.i185.i = load i32, ptr %offset_ptr.i.i184.i, align 4
  %205 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract.i, 0
  %206 = insertvalue { ptr, ptr, ptr, i32 } %205, ptr %203, 1
  %207 = insertvalue { ptr, ptr, ptr, i32 } %206, ptr %204, 2
  %208 = insertvalue { ptr, ptr, ptr, i32 } %207, i32 %offset.i.i185.i, 3
  %209 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %210 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %211 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract.i)
  %212 = sext i32 %offset.i.i185.i to i64
  %213 = getelementptr ptr, ptr %.fca.0.extract.i, i64 %212
  %214 = getelementptr i8, ptr %213, i64 64
  %215 = load ptr, ptr %214, align 8
  %216 = call ptr %215({ ptr, ptr, ptr, i32 } %208, ptr nonnull %2)
  %217 = call i32 %216({ ptr, ptr, ptr, i32 } %208, { ptr, ptr, ptr, i32 } %208, ptr nonnull %2)
  %218 = icmp eq i32 %217, %163
  br i1 %218, label %219, label %.critedge.i

219:                                              ; preds = %202
  %220 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %221 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %222 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract.i)
  %223 = getelementptr i8, ptr %213, i64 48
  %224 = load ptr, ptr %223, align 8
  %225 = call ptr %224({ ptr, ptr, ptr, i32 } %208, ptr nonnull %2)
  %226 = call { ptr, i160 } %225({ ptr, ptr, ptr, i32 } %208, { ptr, ptr, ptr, i32 } %208, ptr nonnull %2)
  %227 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %228 = load ptr, ptr %78, align 8
  %229 = call i1 %228({ ptr, i160 } %226, { ptr, i160 } %159)
  br i1 %229, label %.thread525.i, label %.critedge.i

.thread525.i:                                     ; preds = %219
  %230 = load ptr, ptr %result.i, align 8
  %231 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %232 = load ptr, ptr %72, align 8
  %233 = load ptr, ptr %230, align 8
  %234 = getelementptr i8, ptr %233, i64 48
  %235 = load ptr, ptr %234, align 8
  %236 = call { i64, i64 } %235(ptr nonnull %230)
  %237 = extractvalue { i64, i64 } %236, 0
  %238 = extractvalue { i64, i64 } %236, 1
  %239 = urem i64 20, %238
  %240 = icmp eq i64 %239, 0
  %241 = sub i64 %238, %239
  %242 = select i1 %240, i64 0, i64 %241
  %243 = add i64 %237, 20
  %244 = add i64 %243, %242
  %245 = load ptr, ptr %232, align 8
  %246 = getelementptr i8, ptr %245, i64 48
  %247 = load ptr, ptr %246, align 8
  %248 = call { i64, i64 } %247(ptr nonnull %232)
  %249 = extractvalue { i64, i64 } %248, 0
  %250 = extractvalue { i64, i64 } %248, 1
  %251 = call i64 @llvm.umax.i64(i64 %238, i64 %250)
  %252 = call i64 @llvm.umax.i64(i64 %251, i64 8)
  %253 = urem i64 %244, %250
  %254 = icmp eq i64 %253, 0
  %255 = sub i64 %250, %253
  %256 = select i1 %254, i64 0, i64 %255
  %257 = add i64 %249, %244
  %258 = add i64 %257, %256
  %259 = urem i64 %258, %252
  %260 = icmp eq i64 %259, 0
  %261 = sub i64 %252, %259
  %262 = select i1 %260, i64 0, i64 %261
  %263 = add i64 %262, %258
  %result.i.i153 = call noalias ptr @bump_malloc_inner(i64 noundef %263, ptr nonnull @current_ptr) #29
  store ptr %230, ptr %result.i.i153, align 8
  %264 = getelementptr i8, ptr %result.i.i153, i64 8
  store ptr %232, ptr %264, align 8
  %265 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i.i153)
  store ptr @Entry, ptr %58, align 8
  store ptr %result.i.i153, ptr %121, align 8
  store i32 9, ptr %122, align 8
  %266 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %58)
  %267 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %268 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %269 = load ptr, ptr %230, align 8
  %270 = getelementptr i8, ptr %269, i64 48
  %271 = load ptr, ptr %270, align 8
  %272 = call { i64, i64 } %271(ptr nonnull %230)
  %273 = extractvalue { i64, i64 } %272, 1
  %274 = urem i64 20, %273
  %275 = icmp eq i64 %274, 0
  %reass.sub1365 = sub i64 %273, %274
  %276 = add i64 %reass.sub1365, 20
  %277 = select i1 %275, i64 20, i64 %276
  %278 = getelementptr i8, ptr %result.i.i153, i64 %277
  %279 = load ptr, ptr %result.i.i153, align 8
  %280 = load ptr, ptr %279, align 8
  %281 = getelementptr i8, ptr %280, i64 64
  %282 = load ptr, ptr %281, align 8
  call void %282({ ptr, i160 } %159, ptr nonnull %279, ptr %278)
  %283 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %284 = load ptr, ptr %result.i.i153, align 8
  %285 = load ptr, ptr %284, align 8
  %286 = getelementptr i8, ptr %285, i64 48
  %287 = load ptr, ptr %286, align 8
  %288 = call { i64, i64 } %287(ptr nonnull %284)
  %289 = extractvalue { i64, i64 } %288, 0
  %290 = extractvalue { i64, i64 } %288, 1
  %291 = urem i64 20, %290
  %292 = icmp eq i64 %291, 0
  %293 = sub i64 %290, %291
  %294 = select i1 %292, i64 0, i64 %293
  %295 = add i64 %289, 20
  %296 = add i64 %295, %294
  %297 = load ptr, ptr %264, align 8
  %298 = load ptr, ptr %297, align 8
  %299 = getelementptr i8, ptr %298, i64 48
  %300 = load ptr, ptr %299, align 8
  %301 = call { i64, i64 } %300(ptr nonnull %297)
  %302 = extractvalue { i64, i64 } %301, 1
  %303 = urem i64 %296, %302
  %304 = icmp eq i64 %303, 0
  %305 = sub i64 %302, %303
  %306 = select i1 %304, i64 0, i64 %305
  %307 = getelementptr i8, ptr %result.i.i153, i64 %296
  %308 = getelementptr i8, ptr %307, i64 %306
  %309 = load ptr, ptr %264, align 8
  %310 = load ptr, ptr %309, align 8
  %311 = getelementptr i8, ptr %310, i64 64
  %312 = load ptr, ptr %311, align 8
  call void %312({ ptr, i160 } %160, ptr nonnull %309, ptr %308)
  %313 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %314 = getelementptr i8, ptr %result.i.i153, i64 16
  store i32 %163, ptr %314, align 4
  %315 = load ptr, ptr %123, align 8
  %316 = ptrtoint ptr %result.i.i153 to i64
  %317 = ptrtoint ptr %315 to i64
  %.sroa.2129.0.insert.ext.i = zext i64 %317 to i160
  %.sroa.2129.0.insert.shift.i = shl nuw nsw i160 %.sroa.2129.0.insert.ext.i, 64
  %.sroa.0128.0.insert.ext.i = zext i64 %316 to i160
  %.sroa.2129.0.insert.insert.i = or disjoint i160 %.sroa.2129.0.insert.shift.i, %.sroa.0128.0.insert.ext.i
  %.sroa.0128.0.insert.insert.i = or disjoint i160 %.sroa.2129.0.insert.insert.i, 3062541302288446171170371466885913903104
  %318 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0128.0.insert.insert.i, 1
  %319 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %320 = load ptr, ptr %89, align 8
  %321 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %320, 0
  %322 = load ptr, ptr %90, align 8
  %323 = insertvalue { ptr, ptr, ptr, i32 } %321, ptr %322, 1
  %324 = load ptr, ptr %91, align 8
  %325 = insertvalue { ptr, ptr, ptr, i32 } %323, ptr %324, 2
  %326 = load i32, ptr %92, align 4
  %327 = insertvalue { ptr, ptr, ptr, i32 } %325, i32 %326, 3
  %hash_coef_ptr.i.i202.i = getelementptr i8, ptr %320, i64 8
  %tbl_size_ptr.i.i203.i = getelementptr i8, ptr %320, i64 16
  %offset_tbl_ptr.i.i204.i = getelementptr i8, ptr %320, i64 40
  %hash_coef.i.i205.i = load i64, ptr %hash_coef_ptr.i.i202.i, align 4
  %tbl_size.i.i206.i = load i64, ptr %tbl_size_ptr.i.i203.i, align 4
  %offset_tbl.i.i207.i = load ptr, ptr %offset_tbl_ptr.i.i204.i, align 8
  %product.i.i.i208.i = mul i64 %hash_coef.i.i205.i, -5261542750394134544
  %shifted.i.i.i209.i = lshr i64 %product.i.i.i208.i, 32
  %xored.i.i.i210.i = xor i64 %shifted.i.i.i209.i, %product.i.i.i208.i
  %hash.i.i.i211.i = and i64 %xored.i.i.i210.i, %tbl_size.i.i206.i
  %offset_ptr.i.i212.i = getelementptr i32, ptr %offset_tbl.i.i207.i, i64 %hash.i.i.i211.i
  %offset.i.i213.i = load i32, ptr %offset_ptr.i.i212.i, align 4
  %eq.i216.i = icmp eq i32 %326, %offset.i.i213.i
  call void @llvm.assume(i1 %eq.i216.i) #30
  %328 = load ptr, ptr %result.i, align 8
  %329 = load ptr, ptr %72, align 8
  %result.i217.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %330 = getelementptr i8, ptr %result.i217.i, i64 16
  store ptr %329, ptr %330, align 8
  %331 = getelementptr i8, ptr %result.i217.i, i64 8
  store ptr %328, ptr %331, align 8
  %332 = getelementptr i8, ptr %result.i217.i, i64 24
  store ptr null, ptr %332, align 8
  %333 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i217.i)
  store ptr @Entry, ptr %result.i217.i, align 8
  store ptr @_parameterization_Ptri32, ptr %59, align 8
  store ptr %result.i217.i, ptr %124, align 8
  %334 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %59)
  %335 = call ptr @llvm.invariant.start.p0(i64 600, ptr %320)
  %336 = sext i32 %326 to i64
  %337 = getelementptr ptr, ptr %320, i64 %336
  %338 = getelementptr i8, ptr %337, i64 128
  %339 = load ptr, ptr %338, align 8
  store ptr @i32_typ, ptr %60, align 8
  store ptr @Entry, ptr %125, align 8
  %340 = call ptr %339({ ptr, ptr, ptr, i32 } %327, ptr nonnull %60)
  call void %340({ ptr, ptr, ptr, i32 } %327, { ptr, ptr, ptr, i32 } %327, ptr nonnull %59, i32 %182, { ptr, i160 } %318)
  br label %HashMap_insert_keyK_valueV.exit

.critedge.i:                                      ; preds = %219, %202, %._crit_edge
  %341 = add i32 %163, 2127912214
  %342 = shl i32 %163, 12
  %343 = add i32 %341, %342
  %344 = ashr i32 %343, 19
  %345 = xor i32 %343, %344
  %346 = xor i32 %345, -949894596
  %347 = add i32 %346, 374761393
  %348 = shl i32 %346, 5
  %349 = add i32 %347, %348
  %350 = add i32 %349, -744332180
  %351 = shl i32 %349, 9
  %352 = xor i32 %350, %351
  %353 = add i32 %352, -42973499
  %354 = shl i32 %352, 3
  %355 = add i32 %353, %354
  %356 = ashr i32 %355, 16
  %357 = xor i32 %355, %356
  %358 = xor i32 %357, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %359 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %360 = load ptr, ptr %104, align 8
  %361 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %360, 0
  %362 = load ptr, ptr %105, align 8
  %363 = insertvalue { ptr, ptr, ptr, i32 } %361, ptr %362, 1
  %364 = load ptr, ptr %106, align 8
  %365 = insertvalue { ptr, ptr, ptr, i32 } %363, ptr %364, 2
  %366 = load i32, ptr %107, align 4
  %367 = insertvalue { ptr, ptr, ptr, i32 } %365, i32 %366, 3
  %hash_coef_ptr.i.i10.i321 = getelementptr i8, ptr %360, i64 8
  %tbl_size_ptr.i.i11.i322 = getelementptr i8, ptr %360, i64 16
  %offset_tbl_ptr.i.i12.i323 = getelementptr i8, ptr %360, i64 40
  %hash_coef.i.i13.i324 = load i64, ptr %hash_coef_ptr.i.i10.i321, align 4
  %tbl_size.i.i14.i325 = load i64, ptr %tbl_size_ptr.i.i11.i322, align 4
  %offset_tbl.i.i15.i326 = load ptr, ptr %offset_tbl_ptr.i.i12.i323, align 8
  %product.i.i.i16.i327 = mul i64 %hash_coef.i.i13.i324, -5261542750394134544
  %shifted.i.i.i17.i328 = lshr i64 %product.i.i.i16.i327, 32
  %xored.i.i.i18.i329 = xor i64 %shifted.i.i.i17.i328, %product.i.i.i16.i327
  %hash.i.i.i19.i330 = and i64 %xored.i.i.i18.i329, %tbl_size.i.i14.i325
  %offset_ptr.i.i20.i331 = getelementptr i32, ptr %offset_tbl.i.i15.i326, i64 %hash.i.i.i19.i330
  %offset.i.i21.i332 = load i32, ptr %offset_ptr.i.i20.i331, align 4
  %eq.i.i333 = icmp eq i32 %366, %offset.i.i21.i332
  call void @llvm.assume(i1 %eq.i.i333) #30
  %368 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %369 = call ptr @llvm.invariant.start.p0(i64 600, ptr %360)
  %370 = sext i32 %366 to i64
  %371 = getelementptr ptr, ptr %360, i64 %370
  %372 = getelementptr i8, ptr %371, i64 64
  %373 = load ptr, ptr %372, align 8
  %374 = call ptr %373({ ptr, ptr, ptr, i32 } %367, ptr nonnull %2)
  %375 = call i32 %374({ ptr, ptr, ptr, i32 } %367, { ptr, ptr, ptr, i32 } %367, ptr nonnull %2)
  %376 = add i32 %375, -1
  %377 = and i32 %376, %358
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %378 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %379 = load ptr, ptr %104, align 8
  %380 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %379, 0
  %381 = load ptr, ptr %105, align 8
  %382 = insertvalue { ptr, ptr, ptr, i32 } %380, ptr %381, 1
  %383 = load ptr, ptr %106, align 8
  %384 = insertvalue { ptr, ptr, ptr, i32 } %382, ptr %383, 2
  %385 = load i32, ptr %107, align 4
  %386 = insertvalue { ptr, ptr, ptr, i32 } %384, i32 %385, 3
  %hash_coef_ptr.i.i219.i = getelementptr i8, ptr %379, i64 8
  %tbl_size_ptr.i.i220.i = getelementptr i8, ptr %379, i64 16
  %offset_tbl_ptr.i.i221.i = getelementptr i8, ptr %379, i64 40
  %hash_coef.i.i222.i = load i64, ptr %hash_coef_ptr.i.i219.i, align 4
  %tbl_size.i.i223.i = load i64, ptr %tbl_size_ptr.i.i220.i, align 4
  %offset_tbl.i.i224.i = load ptr, ptr %offset_tbl_ptr.i.i221.i, align 8
  %product.i.i.i225.i = mul i64 %hash_coef.i.i222.i, -5261542750394134544
  %shifted.i.i.i226.i = lshr i64 %product.i.i.i225.i, 32
  %xored.i.i.i227.i = xor i64 %shifted.i.i.i226.i, %product.i.i.i225.i
  %hash.i.i.i228.i = and i64 %xored.i.i.i227.i, %tbl_size.i.i223.i
  %offset_ptr.i.i229.i = getelementptr i32, ptr %offset_tbl.i.i224.i, i64 %hash.i.i.i228.i
  %offset.i.i230.i = load i32, ptr %offset_ptr.i.i229.i, align 4
  %eq.i233.i = icmp eq i32 %385, %offset.i.i230.i
  call void @llvm.assume(i1 %eq.i233.i) #30
  store ptr @_parameterization_Ptri32, ptr %61, align 8
  %387 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %61)
  %388 = call ptr @llvm.invariant.start.p0(i64 600, ptr %379)
  %389 = sext i32 %385 to i64
  %390 = getelementptr ptr, ptr %379, i64 %389
  %391 = getelementptr i8, ptr %390, i64 120
  %392 = load ptr, ptr %391, align 8
  store ptr @i32_typ, ptr %62, align 8
  %393 = call ptr %392({ ptr, ptr, ptr, i32 } %386, ptr nonnull %62)
  %394 = call { ptr, i160 } %393({ ptr, ptr, ptr, i32 } %386, { ptr, ptr, ptr, i32 } %386, ptr nonnull %61, i32 %377)
  %.fca.0.extract104.i = extractvalue { ptr, i160 } %394, 0
  %395 = icmp ne ptr %.fca.0.extract104.i, @nil_typ
  %396 = icmp ne ptr %.fca.0.extract104.i, null
  %.not153.i = and i1 %395, %396
  br i1 %.not153.i, label %397, label %.critedge158.i

397:                                              ; preds = %.critedge.i
  %.fca.1.extract106.i = extractvalue { ptr, i160 } %394, 1
  %.sroa.4.8.extract.trunc.i = trunc i160 %.fca.1.extract106.i to i64
  %398 = inttoptr i64 %.sroa.4.8.extract.trunc.i to ptr
  %.sroa.7506.8.extract.shift.i = lshr i160 %.fca.1.extract106.i, 64
  %.sroa.7506.8.extract.trunc.i = trunc i160 %.sroa.7506.8.extract.shift.i to i64
  %399 = inttoptr i64 %.sroa.7506.8.extract.trunc.i to ptr
  %hash_coef_ptr.i.i235.i = getelementptr i8, ptr %.fca.0.extract104.i, i64 8
  %tbl_size_ptr.i.i236.i = getelementptr i8, ptr %.fca.0.extract104.i, i64 16
  %offset_tbl_ptr.i.i237.i = getelementptr i8, ptr %.fca.0.extract104.i, i64 40
  %hash_coef.i.i238.i = load i64, ptr %hash_coef_ptr.i.i235.i, align 4
  %tbl_size.i.i239.i = load i64, ptr %tbl_size_ptr.i.i236.i, align 4
  %offset_tbl.i.i240.i = load ptr, ptr %offset_tbl_ptr.i.i237.i, align 8
  %product.i.i.i241.i = mul i64 %hash_coef.i.i238.i, 4015701072841558310
  %shifted.i.i.i242.i = lshr i64 %product.i.i.i241.i, 32
  %xored.i.i.i243.i = xor i64 %shifted.i.i.i242.i, %product.i.i.i241.i
  %hash.i.i.i244.i = and i64 %xored.i.i.i243.i, %tbl_size.i.i239.i
  %offset_ptr.i.i245.i = getelementptr i32, ptr %offset_tbl.i.i240.i, i64 %hash.i.i.i244.i
  %offset.i.i246.i = load i32, ptr %offset_ptr.i.i245.i, align 4
  %400 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract104.i, 0
  %401 = insertvalue { ptr, ptr, ptr, i32 } %400, ptr %398, 1
  %402 = insertvalue { ptr, ptr, ptr, i32 } %401, ptr %399, 2
  %403 = insertvalue { ptr, ptr, ptr, i32 } %402, i32 %offset.i.i246.i, 3
  %404 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %405 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %406 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract104.i)
  %407 = sext i32 %offset.i.i246.i to i64
  %408 = getelementptr ptr, ptr %.fca.0.extract104.i, i64 %407
  %409 = getelementptr i8, ptr %408, i64 64
  %410 = load ptr, ptr %409, align 8
  %411 = call ptr %410({ ptr, ptr, ptr, i32 } %403, ptr nonnull %2)
  %412 = call i32 %411({ ptr, ptr, ptr, i32 } %403, { ptr, ptr, ptr, i32 } %403, ptr nonnull %2)
  %413 = icmp eq i32 %412, %163
  br i1 %413, label %414, label %.critedge158.i

414:                                              ; preds = %397
  %415 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %416 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %417 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract104.i)
  %418 = getelementptr i8, ptr %408, i64 48
  %419 = load ptr, ptr %418, align 8
  %420 = call ptr %419({ ptr, ptr, ptr, i32 } %403, ptr nonnull %2)
  %421 = call { ptr, i160 } %420({ ptr, ptr, ptr, i32 } %403, { ptr, ptr, ptr, i32 } %403, ptr nonnull %2)
  %422 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %423 = load ptr, ptr %78, align 8
  %424 = call i1 %423({ ptr, i160 } %421, { ptr, i160 } %159)
  br i1 %424, label %.thread528.i, label %.critedge158.i

.thread528.i:                                     ; preds = %414
  %425 = load ptr, ptr %result.i, align 8
  %426 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %427 = load ptr, ptr %72, align 8
  %428 = load ptr, ptr %425, align 8
  %429 = getelementptr i8, ptr %428, i64 48
  %430 = load ptr, ptr %429, align 8
  %431 = call { i64, i64 } %430(ptr nonnull %425)
  %432 = extractvalue { i64, i64 } %431, 0
  %433 = extractvalue { i64, i64 } %431, 1
  %434 = urem i64 20, %433
  %435 = icmp eq i64 %434, 0
  %436 = sub i64 %433, %434
  %437 = select i1 %435, i64 0, i64 %436
  %438 = add i64 %432, 20
  %439 = add i64 %438, %437
  %440 = load ptr, ptr %427, align 8
  %441 = getelementptr i8, ptr %440, i64 48
  %442 = load ptr, ptr %441, align 8
  %443 = call { i64, i64 } %442(ptr nonnull %427)
  %444 = extractvalue { i64, i64 } %443, 0
  %445 = extractvalue { i64, i64 } %443, 1
  %446 = call i64 @llvm.umax.i64(i64 %433, i64 %445)
  %447 = call i64 @llvm.umax.i64(i64 %446, i64 8)
  %448 = urem i64 %439, %445
  %449 = icmp eq i64 %448, 0
  %450 = sub i64 %445, %448
  %451 = select i1 %449, i64 0, i64 %450
  %452 = add i64 %444, %439
  %453 = add i64 %452, %451
  %454 = urem i64 %453, %447
  %455 = icmp eq i64 %454, 0
  %456 = sub i64 %447, %454
  %457 = select i1 %455, i64 0, i64 %456
  %458 = add i64 %457, %453
  %result.i248.i = call noalias ptr @bump_malloc_inner(i64 noundef %458, ptr nonnull @current_ptr) #29
  store ptr %425, ptr %result.i248.i, align 8
  %459 = getelementptr i8, ptr %result.i248.i, i64 8
  store ptr %427, ptr %459, align 8
  %460 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i248.i)
  store ptr @Entry, ptr %63, align 8
  store ptr %result.i248.i, ptr %116, align 8
  store i32 9, ptr %117, align 8
  %461 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %63)
  %462 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %463 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %464 = load ptr, ptr %425, align 8
  %465 = getelementptr i8, ptr %464, i64 48
  %466 = load ptr, ptr %465, align 8
  %467 = call { i64, i64 } %466(ptr nonnull %425)
  %468 = extractvalue { i64, i64 } %467, 1
  %469 = urem i64 20, %468
  %470 = icmp eq i64 %469, 0
  %reass.sub = sub i64 %468, %469
  %471 = add i64 %reass.sub, 20
  %472 = select i1 %470, i64 20, i64 %471
  %473 = getelementptr i8, ptr %result.i248.i, i64 %472
  %474 = load ptr, ptr %result.i248.i, align 8
  %475 = load ptr, ptr %474, align 8
  %476 = getelementptr i8, ptr %475, i64 64
  %477 = load ptr, ptr %476, align 8
  call void %477({ ptr, i160 } %159, ptr nonnull %474, ptr %473)
  %478 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %479 = load ptr, ptr %result.i248.i, align 8
  %480 = load ptr, ptr %479, align 8
  %481 = getelementptr i8, ptr %480, i64 48
  %482 = load ptr, ptr %481, align 8
  %483 = call { i64, i64 } %482(ptr nonnull %479)
  %484 = extractvalue { i64, i64 } %483, 0
  %485 = extractvalue { i64, i64 } %483, 1
  %486 = urem i64 20, %485
  %487 = icmp eq i64 %486, 0
  %488 = sub i64 %485, %486
  %489 = select i1 %487, i64 0, i64 %488
  %490 = add i64 %484, 20
  %491 = add i64 %490, %489
  %492 = load ptr, ptr %459, align 8
  %493 = load ptr, ptr %492, align 8
  %494 = getelementptr i8, ptr %493, i64 48
  %495 = load ptr, ptr %494, align 8
  %496 = call { i64, i64 } %495(ptr nonnull %492)
  %497 = extractvalue { i64, i64 } %496, 1
  %498 = urem i64 %491, %497
  %499 = icmp eq i64 %498, 0
  %500 = sub i64 %497, %498
  %501 = select i1 %499, i64 0, i64 %500
  %502 = getelementptr i8, ptr %result.i248.i, i64 %491
  %503 = getelementptr i8, ptr %502, i64 %501
  %504 = load ptr, ptr %459, align 8
  %505 = load ptr, ptr %504, align 8
  %506 = getelementptr i8, ptr %505, i64 64
  %507 = load ptr, ptr %506, align 8
  call void %507({ ptr, i160 } %160, ptr nonnull %504, ptr %503)
  %508 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %509 = getelementptr i8, ptr %result.i248.i, i64 16
  store i32 %163, ptr %509, align 4
  %510 = load ptr, ptr %118, align 8
  %511 = ptrtoint ptr %result.i248.i to i64
  %512 = ptrtoint ptr %510 to i64
  %.sroa.284.0.insert.ext.i = zext i64 %512 to i160
  %.sroa.284.0.insert.shift.i = shl nuw nsw i160 %.sroa.284.0.insert.ext.i, 64
  %.sroa.083.0.insert.ext.i = zext i64 %511 to i160
  %.sroa.284.0.insert.insert.i = or disjoint i160 %.sroa.284.0.insert.shift.i, %.sroa.083.0.insert.ext.i
  %.sroa.083.0.insert.insert.i = or disjoint i160 %.sroa.284.0.insert.insert.i, 3062541302288446171170371466885913903104
  %513 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.083.0.insert.insert.i, 1
  %514 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %515 = load ptr, ptr %104, align 8
  %516 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %515, 0
  %517 = load ptr, ptr %105, align 8
  %518 = insertvalue { ptr, ptr, ptr, i32 } %516, ptr %517, 1
  %519 = load ptr, ptr %106, align 8
  %520 = insertvalue { ptr, ptr, ptr, i32 } %518, ptr %519, 2
  %521 = load i32, ptr %107, align 4
  %522 = insertvalue { ptr, ptr, ptr, i32 } %520, i32 %521, 3
  %hash_coef_ptr.i.i264.i = getelementptr i8, ptr %515, i64 8
  %tbl_size_ptr.i.i265.i = getelementptr i8, ptr %515, i64 16
  %offset_tbl_ptr.i.i266.i = getelementptr i8, ptr %515, i64 40
  %hash_coef.i.i267.i = load i64, ptr %hash_coef_ptr.i.i264.i, align 4
  %tbl_size.i.i268.i = load i64, ptr %tbl_size_ptr.i.i265.i, align 4
  %offset_tbl.i.i269.i = load ptr, ptr %offset_tbl_ptr.i.i266.i, align 8
  %product.i.i.i270.i = mul i64 %hash_coef.i.i267.i, -5261542750394134544
  %shifted.i.i.i271.i = lshr i64 %product.i.i.i270.i, 32
  %xored.i.i.i272.i = xor i64 %shifted.i.i.i271.i, %product.i.i.i270.i
  %hash.i.i.i273.i = and i64 %xored.i.i.i272.i, %tbl_size.i.i268.i
  %offset_ptr.i.i274.i = getelementptr i32, ptr %offset_tbl.i.i269.i, i64 %hash.i.i.i273.i
  %offset.i.i275.i = load i32, ptr %offset_ptr.i.i274.i, align 4
  %eq.i278.i = icmp eq i32 %521, %offset.i.i275.i
  call void @llvm.assume(i1 %eq.i278.i) #30
  %523 = load ptr, ptr %result.i, align 8
  %524 = load ptr, ptr %72, align 8
  %result.i279.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %525 = getelementptr i8, ptr %result.i279.i, i64 16
  store ptr %524, ptr %525, align 8
  %526 = getelementptr i8, ptr %result.i279.i, i64 8
  store ptr %523, ptr %526, align 8
  %527 = getelementptr i8, ptr %result.i279.i, i64 24
  store ptr null, ptr %527, align 8
  %528 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i279.i)
  store ptr @Entry, ptr %result.i279.i, align 8
  store ptr @_parameterization_Ptri32, ptr %64, align 8
  store ptr %result.i279.i, ptr %119, align 8
  %529 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %64)
  %530 = call ptr @llvm.invariant.start.p0(i64 600, ptr %515)
  %531 = sext i32 %521 to i64
  %532 = getelementptr ptr, ptr %515, i64 %531
  %533 = getelementptr i8, ptr %532, i64 128
  %534 = load ptr, ptr %533, align 8
  store ptr @i32_typ, ptr %65, align 8
  store ptr @Entry, ptr %120, align 8
  %535 = call ptr %534({ ptr, ptr, ptr, i32 } %522, ptr nonnull %65)
  call void %535({ ptr, ptr, ptr, i32 } %522, { ptr, ptr, ptr, i32 } %522, ptr nonnull %64, i32 %377, { ptr, i160 } %513)
  br label %HashMap_insert_keyK_valueV.exit

.critedge158.i:                                   ; preds = %414, %397, %.critedge.i
  %536 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %537 = load ptr, ptr %89, align 8
  %538 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %537, 0
  %539 = load ptr, ptr %90, align 8
  %540 = insertvalue { ptr, ptr, ptr, i32 } %538, ptr %539, 1
  %541 = load ptr, ptr %91, align 8
  %542 = insertvalue { ptr, ptr, ptr, i32 } %540, ptr %541, 2
  %543 = load i32, ptr %92, align 4
  %544 = insertvalue { ptr, ptr, ptr, i32 } %542, i32 %543, 3
  %hash_coef_ptr.i.i281.i = getelementptr i8, ptr %537, i64 8
  %tbl_size_ptr.i.i282.i = getelementptr i8, ptr %537, i64 16
  %offset_tbl_ptr.i.i283.i = getelementptr i8, ptr %537, i64 40
  %hash_coef.i.i284.i = load i64, ptr %hash_coef_ptr.i.i281.i, align 4
  %tbl_size.i.i285.i = load i64, ptr %tbl_size_ptr.i.i282.i, align 4
  %offset_tbl.i.i286.i = load ptr, ptr %offset_tbl_ptr.i.i283.i, align 8
  %product.i.i.i287.i = mul i64 %hash_coef.i.i284.i, -5261542750394134544
  %shifted.i.i.i288.i = lshr i64 %product.i.i.i287.i, 32
  %xored.i.i.i289.i = xor i64 %shifted.i.i.i288.i, %product.i.i.i287.i
  %hash.i.i.i290.i = and i64 %xored.i.i.i289.i, %tbl_size.i.i285.i
  %offset_ptr.i.i291.i = getelementptr i32, ptr %offset_tbl.i.i286.i, i64 %hash.i.i.i290.i
  %offset.i.i292.i = load i32, ptr %offset_ptr.i.i291.i, align 4
  %eq.i295.i = icmp eq i32 %543, %offset.i.i292.i
  call void @llvm.assume(i1 %eq.i295.i) #30
  %545 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %546 = call ptr @llvm.invariant.start.p0(i64 600, ptr %537)
  %547 = sext i32 %543 to i64
  %548 = getelementptr ptr, ptr %537, i64 %547
  %549 = getelementptr i8, ptr %548, i64 64
  %550 = load ptr, ptr %549, align 8
  %551 = call ptr %550({ ptr, ptr, ptr, i32 } %544, ptr nonnull %2)
  %552 = call i32 %551({ ptr, ptr, ptr, i32 } %544, { ptr, ptr, ptr, i32 } %544, ptr nonnull %2)
  %553 = load i32, ptr %108, align 4
  %.not.i = icmp slt i32 %553, %552
  br i1 %.not.i, label %._crit_edge2.i, label %554

554:                                              ; preds = %.critedge158.i
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %52)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %53)
  %555 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %556 = load ptr, ptr %89, align 8
  %557 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %556, 0
  %558 = load ptr, ptr %90, align 8
  %559 = insertvalue { ptr, ptr, ptr, i32 } %557, ptr %558, 1
  %560 = load ptr, ptr %91, align 8
  %561 = insertvalue { ptr, ptr, ptr, i32 } %559, ptr %560, 2
  %562 = load i32, ptr %92, align 4
  %563 = insertvalue { ptr, ptr, ptr, i32 } %561, i32 %562, 3
  %hash_coef_ptr.i.i18.i = getelementptr i8, ptr %556, i64 8
  %tbl_size_ptr.i.i19.i = getelementptr i8, ptr %556, i64 16
  %offset_tbl_ptr.i.i20.i = getelementptr i8, ptr %556, i64 40
  %hash_coef.i.i21.i = load i64, ptr %hash_coef_ptr.i.i18.i, align 4
  %tbl_size.i.i22.i = load i64, ptr %tbl_size_ptr.i.i19.i, align 4
  %offset_tbl.i.i23.i = load ptr, ptr %offset_tbl_ptr.i.i20.i, align 8
  %product.i.i.i24.i = mul i64 %hash_coef.i.i21.i, -5261542750394134544
  %shifted.i.i.i25.i = lshr i64 %product.i.i.i24.i, 32
  %xored.i.i.i26.i = xor i64 %shifted.i.i.i25.i, %product.i.i.i24.i
  %hash.i.i.i27.i = and i64 %xored.i.i.i26.i, %tbl_size.i.i22.i
  %offset_ptr.i.i28.i = getelementptr i32, ptr %offset_tbl.i.i23.i, i64 %hash.i.i.i27.i
  %offset.i.i29.i = load i32, ptr %offset_ptr.i.i28.i, align 4
  %eq.i.i347 = icmp eq i32 %562, %offset.i.i29.i
  call void @llvm.assume(i1 %eq.i.i347) #30
  %564 = load ptr, ptr %104, align 8
  %565 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %564, 0
  %566 = load ptr, ptr %105, align 8
  %567 = insertvalue { ptr, ptr, ptr, i32 } %565, ptr %566, 1
  %568 = load ptr, ptr %106, align 8
  %569 = insertvalue { ptr, ptr, ptr, i32 } %567, ptr %568, 2
  %570 = load i32, ptr %107, align 4
  %hash_coef_ptr.i.i46.i = getelementptr i8, ptr %564, i64 8
  %tbl_size_ptr.i.i47.i = getelementptr i8, ptr %564, i64 16
  %offset_tbl_ptr.i.i48.i = getelementptr i8, ptr %564, i64 40
  %hash_coef.i.i49.i = load i64, ptr %hash_coef_ptr.i.i46.i, align 4
  %tbl_size.i.i50.i = load i64, ptr %tbl_size_ptr.i.i47.i, align 4
  %offset_tbl.i.i51.i = load ptr, ptr %offset_tbl_ptr.i.i48.i, align 8
  %product.i.i.i52.i = mul i64 %hash_coef.i.i49.i, -5261542750394134544
  %shifted.i.i.i53.i = lshr i64 %product.i.i.i52.i, 32
  %xored.i.i.i54.i = xor i64 %shifted.i.i.i53.i, %product.i.i.i52.i
  %hash.i.i.i55.i = and i64 %xored.i.i.i54.i, %tbl_size.i.i50.i
  %offset_ptr.i.i56.i = getelementptr i32, ptr %offset_tbl.i.i51.i, i64 %hash.i.i.i55.i
  %offset.i.i57.i = load i32, ptr %offset_ptr.i.i56.i, align 4
  %eq.i60.i = icmp eq i32 %570, %offset.i.i57.i
  call void @llvm.assume(i1 %eq.i60.i) #30
  %571 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %572 = call ptr @llvm.invariant.start.p0(i64 600, ptr %556)
  %573 = sext i32 %562 to i64
  %574 = getelementptr ptr, ptr %556, i64 %573
  %575 = getelementptr i8, ptr %574, i64 64
  %576 = load ptr, ptr %575, align 8
  %577 = call ptr %576({ ptr, ptr, ptr, i32 } %563, ptr nonnull %2)
  %578 = call i32 %577({ ptr, ptr, ptr, i32 } %563, { ptr, ptr, ptr, i32 } %563, ptr nonnull %2)
  %579 = shl i32 %578, 1
  %580 = call i32 @llvm.smax.i32(i32 %579, i32 16)
  %581 = load ptr, ptr %result.i, align 8
  %582 = load ptr, ptr %72, align 8
  %result.i.i352 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %583 = getelementptr i8, ptr %result.i.i352, i64 16
  store ptr @_parameterization_Nil, ptr %583, align 8
  %result.i75.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %584 = getelementptr i8, ptr %result.i75.i, i64 16
  store ptr %582, ptr %584, align 8
  %585 = getelementptr i8, ptr %result.i75.i, i64 8
  store ptr %581, ptr %585, align 8
  %586 = getelementptr i8, ptr %result.i75.i, i64 24
  store ptr null, ptr %586, align 8
  %587 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i75.i)
  store ptr @Entry, ptr %result.i75.i, align 8
  %588 = getelementptr i8, ptr %result.i.i352, i64 8
  store ptr %result.i75.i, ptr %588, align 8
  %589 = getelementptr i8, ptr %result.i.i352, i64 24
  store ptr null, ptr %589, align 8
  %590 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i352)
  store ptr @union_typ, ptr %result.i.i352, align 8
  %result.i76.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i352, ptr %result.i76.i, align 8
  %591 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i76.i)
  store ptr @Array, ptr %52, align 8
  store ptr %result.i76.i, ptr %126, align 8
  store i32 9, ptr %127, align 8
  %592 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %52)
  %593 = getelementptr i8, ptr %result.i76.i, i64 16
  store i32 %580, ptr %593, align 4
  %594 = getelementptr i8, ptr %result.i76.i, i64 20
  store i32 %580, ptr %594, align 4
  %595 = zext nneg i32 %580 to i64
  %596 = shl nuw nsw i64 %595, 5
  %result.i.i.i353 = call noalias ptr @bump_malloc_inner(i64 noundef %596, ptr nonnull @current_ptr) #29
  %597 = getelementptr i8, ptr %result.i76.i, i64 8
  store ptr %result.i.i.i353, ptr %597, align 8
  %598 = load ptr, ptr %128, align 8
  store ptr @Array, ptr %89, align 8
  store ptr %result.i76.i, ptr %90, align 8
  store ptr %598, ptr %91, align 8
  store i32 9, ptr %92, align 4
  %result.i91.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %599 = getelementptr i8, ptr %result.i91.i, i64 16
  store ptr @_parameterization_Nil, ptr %599, align 8
  %result.i92.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %600 = getelementptr i8, ptr %result.i92.i, i64 16
  store ptr %582, ptr %600, align 8
  %601 = getelementptr i8, ptr %result.i92.i, i64 8
  store ptr %581, ptr %601, align 8
  %602 = getelementptr i8, ptr %result.i92.i, i64 24
  store ptr null, ptr %602, align 8
  %603 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i92.i)
  store ptr @Entry, ptr %result.i92.i, align 8
  %604 = getelementptr i8, ptr %result.i91.i, i64 8
  store ptr %result.i92.i, ptr %604, align 8
  %605 = getelementptr i8, ptr %result.i91.i, i64 24
  store ptr null, ptr %605, align 8
  %606 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i91.i)
  store ptr @union_typ, ptr %result.i91.i, align 8
  %result.i93.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i91.i, ptr %result.i93.i, align 8
  %607 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i93.i)
  store ptr @Array, ptr %53, align 8
  store ptr %result.i93.i, ptr %129, align 8
  store i32 9, ptr %130, align 8
  %608 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %53)
  %609 = getelementptr i8, ptr %result.i93.i, i64 16
  store i32 %580, ptr %609, align 4
  %610 = getelementptr i8, ptr %result.i93.i, i64 20
  store i32 %580, ptr %610, align 4
  %result.i.i234.i = call noalias ptr @bump_malloc_inner(i64 noundef %596, ptr nonnull @current_ptr) #29
  %611 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %612 = getelementptr i8, ptr %result.i93.i, i64 8
  store ptr %result.i.i234.i, ptr %612, align 8
  %613 = load ptr, ptr %131, align 8
  store ptr @Array, ptr %104, align 8
  store ptr %result.i93.i, ptr %105, align 8
  store ptr %613, ptr %106, align 8
  store i32 9, ptr %107, align 4
  store i32 0, ptr %108, align 4
  %614 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %13)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %14)
  %615 = icmp sgt i32 %578, 0
  br i1 %615, label %.lr.ph.i965, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1019.critedge

.lr.ph.i965:                                      ; preds = %554
  %invariant.gep.i = getelementptr i8, ptr %556, i64 120
  %offset_tbl.i.i24.i = load ptr, ptr %offset_tbl_ptr.i.i20.i, align 8
  %hash_coef.i.i22.i = load i64, ptr %hash_coef_ptr.i.i18.i, align 4
  %product.i.i.i25.i = mul i64 %hash_coef.i.i22.i, -5261542750394134544
  %shifted.i.i.i26.i = lshr i64 %product.i.i.i25.i, 32
  %xored.i.i.i27.i = xor i64 %shifted.i.i.i26.i, %product.i.i.i25.i
  %tbl_size.i.i23.i = load i64, ptr %tbl_size_ptr.i.i19.i, align 4
  %hash.i.i.i28.i = and i64 %xored.i.i.i27.i, %tbl_size.i.i23.i
  %offset_ptr.i.i29.i = getelementptr i32, ptr %offset_tbl.i.i24.i, i64 %hash.i.i.i28.i
  %offset.i.i30.i = load i32, ptr %offset_ptr.i.i29.i, align 4
  %616 = insertvalue { ptr, ptr, ptr, i32 } %561, i32 %offset.i.i30.i, 3
  %617 = sext i32 %offset.i.i30.i to i64
  %gep.i = getelementptr ptr, ptr %invariant.gep.i, i64 %617
  %618 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %619

619:                                              ; preds = %._crit_edge1.i, %.lr.ph.i965
  %.reg2mem13.079.i = phi i32 [ 0, %.lr.ph.i965 ], [ %636, %._crit_edge1.i ]
  store ptr @_parameterization_Ptri32, ptr %13, align 8
  %620 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %13)
  %621 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %556)
  %622 = load ptr, ptr %gep.i, align 8
  store ptr @i32_typ, ptr %14, align 8
  %623 = call ptr %622({ ptr, ptr, ptr, i32 } %616, ptr nonnull %14)
  %624 = call { ptr, i160 } %623({ ptr, ptr, ptr, i32 } %616, { ptr, ptr, ptr, i32 } %616, ptr nonnull %13, i32 %.reg2mem13.079.i)
  %.fca.0.extract11.i = extractvalue { ptr, i160 } %624, 0
  %625 = icmp ne ptr %.fca.0.extract11.i, @nil_typ
  %626 = icmp ne ptr %.fca.0.extract11.i, null
  %.not17.i = and i1 %625, %626
  br i1 %.not17.i, label %627, label %._crit_edge1.i

627:                                              ; preds = %619
  %.fca.1.extract13.i = extractvalue { ptr, i160 } %624, 1
  %.sroa.375.8.extract.trunc.i = trunc i160 %.fca.1.extract13.i to i64
  %628 = inttoptr i64 %.sroa.375.8.extract.trunc.i to ptr
  %.sroa.576.8.extract.shift.i = lshr i160 %.fca.1.extract13.i, 64
  %.sroa.576.8.extract.trunc.i = trunc i160 %.sroa.576.8.extract.shift.i to i64
  %629 = inttoptr i64 %.sroa.576.8.extract.trunc.i to ptr
  %hash_coef_ptr.i.i33.i = getelementptr i8, ptr %.fca.0.extract11.i, i64 8
  %tbl_size_ptr.i.i34.i = getelementptr i8, ptr %.fca.0.extract11.i, i64 16
  %offset_tbl_ptr.i.i35.i = getelementptr i8, ptr %.fca.0.extract11.i, i64 40
  %hash_coef.i.i36.i = load i64, ptr %hash_coef_ptr.i.i33.i, align 4
  %tbl_size.i.i37.i = load i64, ptr %tbl_size_ptr.i.i34.i, align 4
  %offset_tbl.i.i38.i = load ptr, ptr %offset_tbl_ptr.i.i35.i, align 8
  %product.i.i.i39.i = mul i64 %hash_coef.i.i36.i, 4015701072841558310
  %shifted.i.i.i40.i = lshr i64 %product.i.i.i39.i, 32
  %xored.i.i.i41.i = xor i64 %shifted.i.i.i40.i, %product.i.i.i39.i
  %hash.i.i.i42.i = and i64 %xored.i.i.i41.i, %tbl_size.i.i37.i
  %offset_ptr.i.i43.i = getelementptr i32, ptr %offset_tbl.i.i38.i, i64 %hash.i.i.i42.i
  %offset.i.i58.i = load i32, ptr %offset_ptr.i.i43.i, align 4
  %630 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i, 0
  %631 = insertvalue { ptr, ptr, ptr, i32 } %630, ptr %628, 1
  %632 = insertvalue { ptr, ptr, ptr, i32 } %631, ptr %629, 2
  %633 = insertvalue { ptr, ptr, ptr, i32 } %632, i32 %offset.i.i58.i, 3
  %634 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %635 = call { ptr, i160 } @HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %157, { ptr, ptr, ptr, i32 } poison, ptr nonnull poison, { ptr, ptr, ptr, i32 } %633)
  br label %._crit_edge1.i

._crit_edge1.i:                                   ; preds = %627, %619
  %636 = add nuw nsw i32 %.reg2mem13.079.i, 1
  %637 = icmp slt i32 %636, %578
  br i1 %637, label %619, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit: ; preds = %._crit_edge1.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %13)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %14)
  %638 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %11)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %12)
  %invariant.gep.i971 = getelementptr i8, ptr %564, i64 120
  %offset_tbl.i.i24.i973 = load ptr, ptr %offset_tbl_ptr.i.i48.i, align 8
  %hash_coef.i.i22.i975 = load i64, ptr %hash_coef_ptr.i.i46.i, align 4
  %product.i.i.i25.i976 = mul i64 %hash_coef.i.i22.i975, -5261542750394134544
  %shifted.i.i.i26.i977 = lshr i64 %product.i.i.i25.i976, 32
  %xored.i.i.i27.i978 = xor i64 %shifted.i.i.i26.i977, %product.i.i.i25.i976
  %tbl_size.i.i23.i980 = load i64, ptr %tbl_size_ptr.i.i47.i, align 4
  %hash.i.i.i28.i981 = and i64 %xored.i.i.i27.i978, %tbl_size.i.i23.i980
  %offset_ptr.i.i29.i982 = getelementptr i32, ptr %offset_tbl.i.i24.i973, i64 %hash.i.i.i28.i981
  %offset.i.i30.i983 = load i32, ptr %offset_ptr.i.i29.i982, align 4
  %639 = insertvalue { ptr, ptr, ptr, i32 } %569, i32 %offset.i.i30.i983, 3
  %640 = sext i32 %offset.i.i30.i983 to i64
  %gep.i997 = getelementptr ptr, ptr %invariant.gep.i971, i64 %640
  %641 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %642

642:                                              ; preds = %._crit_edge1.i1001, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit
  %.reg2mem13.079.i998 = phi i32 [ 0, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit ], [ %659, %._crit_edge1.i1001 ]
  store ptr @_parameterization_Ptri32, ptr %11, align 8
  %643 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %11)
  %644 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %564)
  %645 = load ptr, ptr %gep.i997, align 8
  store ptr @i32_typ, ptr %12, align 8
  %646 = call ptr %645({ ptr, ptr, ptr, i32 } %639, ptr nonnull %12)
  %647 = call { ptr, i160 } %646({ ptr, ptr, ptr, i32 } %639, { ptr, ptr, ptr, i32 } %639, ptr nonnull %11, i32 %.reg2mem13.079.i998)
  %.fca.0.extract11.i999 = extractvalue { ptr, i160 } %647, 0
  %648 = icmp ne ptr %.fca.0.extract11.i999, @nil_typ
  %649 = icmp ne ptr %.fca.0.extract11.i999, null
  %.not17.i1000 = and i1 %648, %649
  br i1 %.not17.i1000, label %650, label %._crit_edge1.i1001

650:                                              ; preds = %642
  %.fca.1.extract13.i1002 = extractvalue { ptr, i160 } %647, 1
  %.sroa.375.8.extract.trunc.i1003 = trunc i160 %.fca.1.extract13.i1002 to i64
  %651 = inttoptr i64 %.sroa.375.8.extract.trunc.i1003 to ptr
  %.sroa.576.8.extract.shift.i1004 = lshr i160 %.fca.1.extract13.i1002, 64
  %.sroa.576.8.extract.trunc.i1005 = trunc i160 %.sroa.576.8.extract.shift.i1004 to i64
  %652 = inttoptr i64 %.sroa.576.8.extract.trunc.i1005 to ptr
  %hash_coef_ptr.i.i33.i1006 = getelementptr i8, ptr %.fca.0.extract11.i999, i64 8
  %tbl_size_ptr.i.i34.i1007 = getelementptr i8, ptr %.fca.0.extract11.i999, i64 16
  %offset_tbl_ptr.i.i35.i1008 = getelementptr i8, ptr %.fca.0.extract11.i999, i64 40
  %hash_coef.i.i36.i1009 = load i64, ptr %hash_coef_ptr.i.i33.i1006, align 4
  %tbl_size.i.i37.i1010 = load i64, ptr %tbl_size_ptr.i.i34.i1007, align 4
  %offset_tbl.i.i38.i1011 = load ptr, ptr %offset_tbl_ptr.i.i35.i1008, align 8
  %product.i.i.i39.i1012 = mul i64 %hash_coef.i.i36.i1009, 4015701072841558310
  %shifted.i.i.i40.i1013 = lshr i64 %product.i.i.i39.i1012, 32
  %xored.i.i.i41.i1014 = xor i64 %shifted.i.i.i40.i1013, %product.i.i.i39.i1012
  %hash.i.i.i42.i1015 = and i64 %xored.i.i.i41.i1014, %tbl_size.i.i37.i1010
  %offset_ptr.i.i43.i1016 = getelementptr i32, ptr %offset_tbl.i.i38.i1011, i64 %hash.i.i.i42.i1015
  %offset.i.i58.i1017 = load i32, ptr %offset_ptr.i.i43.i1016, align 4
  %653 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i999, 0
  %654 = insertvalue { ptr, ptr, ptr, i32 } %653, ptr %651, 1
  %655 = insertvalue { ptr, ptr, ptr, i32 } %654, ptr %652, 2
  %656 = insertvalue { ptr, ptr, ptr, i32 } %655, i32 %offset.i.i58.i1017, 3
  %657 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %658 = call { ptr, i160 } @HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %157, { ptr, ptr, ptr, i32 } poison, ptr nonnull poison, { ptr, ptr, ptr, i32 } %656)
  br label %._crit_edge1.i1001

._crit_edge1.i1001:                               ; preds = %650, %642
  %659 = add nuw nsw i32 %.reg2mem13.079.i998, 1
  %660 = icmp slt i32 %659, %578
  br i1 %660, label %642, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1019

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1019.critedge: ; preds = %554
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %13)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %14)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %11)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %12)
  br label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1019

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1019: ; preds = %._crit_edge1.i1001, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1019.critedge
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %11)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %12)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %52)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %53)
  br label %._crit_edge2.i

._crit_edge2.i:                                   ; preds = %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1019, %.critedge158.i
  %661 = load ptr, ptr %result.i, align 8
  %662 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %663 = load ptr, ptr %72, align 8
  %664 = load ptr, ptr %661, align 8
  %665 = getelementptr i8, ptr %664, i64 48
  %666 = load ptr, ptr %665, align 8
  %667 = call { i64, i64 } %666(ptr nonnull %661)
  %668 = extractvalue { i64, i64 } %667, 0
  %669 = extractvalue { i64, i64 } %667, 1
  %670 = urem i64 20, %669
  %671 = icmp eq i64 %670, 0
  %672 = sub i64 %669, %670
  %673 = select i1 %671, i64 0, i64 %672
  %674 = add i64 %668, 20
  %675 = add i64 %674, %673
  %676 = load ptr, ptr %663, align 8
  %677 = getelementptr i8, ptr %676, i64 48
  %678 = load ptr, ptr %677, align 8
  %679 = call { i64, i64 } %678(ptr nonnull %663)
  %680 = extractvalue { i64, i64 } %679, 0
  %681 = extractvalue { i64, i64 } %679, 1
  %682 = call i64 @llvm.umax.i64(i64 %669, i64 %681)
  %683 = call i64 @llvm.umax.i64(i64 %682, i64 8)
  %684 = urem i64 %675, %681
  %685 = icmp eq i64 %684, 0
  %686 = sub i64 %681, %684
  %687 = select i1 %685, i64 0, i64 %686
  %688 = add i64 %680, %675
  %689 = add i64 %688, %687
  %690 = urem i64 %689, %683
  %691 = icmp eq i64 %690, 0
  %692 = sub i64 %683, %690
  %693 = select i1 %691, i64 0, i64 %692
  %694 = add i64 %693, %689
  %result.i296.i = call noalias ptr @bump_malloc_inner(i64 noundef %694, ptr nonnull @current_ptr) #29
  store ptr %661, ptr %result.i296.i, align 8
  %695 = getelementptr i8, ptr %result.i296.i, i64 8
  store ptr %663, ptr %695, align 8
  %696 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i296.i)
  store ptr @Entry, ptr %66, align 8
  store ptr %result.i296.i, ptr %113, align 8
  store i32 9, ptr %114, align 8
  %697 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %66)
  %698 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %699 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %700 = load ptr, ptr %661, align 8
  %701 = getelementptr i8, ptr %700, i64 48
  %702 = load ptr, ptr %701, align 8
  %703 = call { i64, i64 } %702(ptr nonnull %661)
  %704 = extractvalue { i64, i64 } %703, 1
  %705 = urem i64 20, %704
  %706 = icmp eq i64 %705, 0
  %reass.sub1364 = sub i64 %704, %705
  %707 = add i64 %reass.sub1364, 20
  %708 = select i1 %706, i64 20, i64 %707
  %709 = getelementptr i8, ptr %result.i296.i, i64 %708
  %710 = load ptr, ptr %result.i296.i, align 8
  %711 = load ptr, ptr %710, align 8
  %712 = getelementptr i8, ptr %711, i64 64
  %713 = load ptr, ptr %712, align 8
  call void %713({ ptr, i160 } %159, ptr nonnull %710, ptr %709)
  %714 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %715 = load ptr, ptr %result.i296.i, align 8
  %716 = load ptr, ptr %715, align 8
  %717 = getelementptr i8, ptr %716, i64 48
  %718 = load ptr, ptr %717, align 8
  %719 = call { i64, i64 } %718(ptr nonnull %715)
  %720 = extractvalue { i64, i64 } %719, 0
  %721 = extractvalue { i64, i64 } %719, 1
  %722 = urem i64 20, %721
  %723 = icmp eq i64 %722, 0
  %724 = sub i64 %721, %722
  %725 = select i1 %723, i64 0, i64 %724
  %726 = add i64 %720, 20
  %727 = add i64 %726, %725
  %728 = load ptr, ptr %695, align 8
  %729 = load ptr, ptr %728, align 8
  %730 = getelementptr i8, ptr %729, i64 48
  %731 = load ptr, ptr %730, align 8
  %732 = call { i64, i64 } %731(ptr nonnull %728)
  %733 = extractvalue { i64, i64 } %732, 1
  %734 = urem i64 %727, %733
  %735 = icmp eq i64 %734, 0
  %736 = sub i64 %733, %734
  %737 = select i1 %735, i64 0, i64 %736
  %738 = getelementptr i8, ptr %result.i296.i, i64 %727
  %739 = getelementptr i8, ptr %738, i64 %737
  %740 = load ptr, ptr %695, align 8
  %741 = load ptr, ptr %740, align 8
  %742 = getelementptr i8, ptr %741, i64 64
  %743 = load ptr, ptr %742, align 8
  call void %743({ ptr, i160 } %160, ptr nonnull %740, ptr %739)
  %744 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %745 = getelementptr i8, ptr %result.i296.i, i64 16
  store i32 %163, ptr %745, align 4
  %746 = load ptr, ptr %115, align 8
  %747 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %35)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %36)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %37)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %38)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %39)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %40)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %41)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0680.i)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %42)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %43)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %44)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %45)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %46)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %47)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %48)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %49)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i354)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %50)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %51)
  store ptr @Entry, ptr %51, align 8
  store ptr %result.i296.i, ptr %132, align 8
  store ptr %746, ptr %133, align 8
  store i32 9, ptr %134, align 8
  %748 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %51)
  %749 = load i32, ptr %110, align 4
  %750 = icmp sgt i32 %749, 0
  br i1 %750, label %.lr.ph.i, label %._crit_edge3.i

.lr.ph.i:                                         ; preds = %._crit_edge2.i
  %751 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %752 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %753 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  br label %754

754:                                              ; preds = %.cont.cont.i, %.lr.ph.i
  %offset.i.i260.i912 = phi i32 [ 9, %.lr.ph.i ], [ %offset.i.i260.i, %.cont.cont.i ]
  %.sroa.speculated346.i910 = phi ptr [ %746, %.lr.ph.i ], [ %.sroa.speculated346.i, %.cont.cont.i ]
  %.sroa.speculated352.i908 = phi ptr [ %result.i296.i, %.lr.ph.i ], [ %.sroa.speculated352.i, %.cont.cont.i ]
  %.reg2mem195.0678.i = phi i32 [ 1, %.lr.ph.i ], [ %909, %.cont.cont.i ]
  %.reg2mem193.0677.i = phi i32 [ 0, %.lr.ph.i ], [ %910, %.cont.cont.i ]
  %755 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Entry, ptr undef, ptr undef, i32 undef }, ptr %.sroa.speculated352.i908, 1
  %756 = insertvalue { ptr, ptr, ptr, i32 } %755, ptr %.sroa.speculated346.i910, 2
  %757 = insertvalue { ptr, ptr, ptr, i32 } %756, i32 %offset.i.i260.i912, 3
  %758 = sext i32 %offset.i.i260.i912 to i64
  %gep = getelementptr ptr, ptr getelementptr inbounds (i8, ptr @Entry, i64 64), i64 %758
  %759 = load ptr, ptr %gep, align 8
  %760 = call ptr %759({ ptr, ptr, ptr, i32 } %757, ptr nonnull %2)
  %761 = call i32 %760({ ptr, ptr, ptr, i32 } %757, { ptr, ptr, ptr, i32 } %757, ptr nonnull %2)
  %762 = icmp eq i32 %.reg2mem195.0678.i, 1
  br i1 %762, label %763, label %827

763:                                              ; preds = %754
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %764 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %765 = load ptr, ptr %89, align 8
  %766 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %765, 0
  %767 = load ptr, ptr %90, align 8
  %768 = insertvalue { ptr, ptr, ptr, i32 } %766, ptr %767, 1
  %769 = load ptr, ptr %91, align 8
  %770 = insertvalue { ptr, ptr, ptr, i32 } %768, ptr %769, 2
  %771 = load i32, ptr %92, align 4
  %772 = insertvalue { ptr, ptr, ptr, i32 } %770, i32 %771, 3
  %hash_coef_ptr.i.i10.i1034 = getelementptr i8, ptr %765, i64 8
  %tbl_size_ptr.i.i11.i1035 = getelementptr i8, ptr %765, i64 16
  %offset_tbl_ptr.i.i12.i1036 = getelementptr i8, ptr %765, i64 40
  %hash_coef.i.i13.i1037 = load i64, ptr %hash_coef_ptr.i.i10.i1034, align 4
  %tbl_size.i.i14.i1038 = load i64, ptr %tbl_size_ptr.i.i11.i1035, align 4
  %offset_tbl.i.i15.i1039 = load ptr, ptr %offset_tbl_ptr.i.i12.i1036, align 8
  %product.i.i.i16.i1040 = mul i64 %hash_coef.i.i13.i1037, -5261542750394134544
  %shifted.i.i.i17.i1041 = lshr i64 %product.i.i.i16.i1040, 32
  %xored.i.i.i18.i1042 = xor i64 %shifted.i.i.i17.i1041, %product.i.i.i16.i1040
  %hash.i.i.i19.i1043 = and i64 %xored.i.i.i18.i1042, %tbl_size.i.i14.i1038
  %offset_ptr.i.i20.i1044 = getelementptr i32, ptr %offset_tbl.i.i15.i1039, i64 %hash.i.i.i19.i1043
  %offset.i.i21.i1045 = load i32, ptr %offset_ptr.i.i20.i1044, align 4
  %eq.i.i1046 = icmp eq i32 %771, %offset.i.i21.i1045
  call void @llvm.assume(i1 %eq.i.i1046) #30
  %773 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %774 = call ptr @llvm.invariant.start.p0(i64 600, ptr %765)
  %775 = sext i32 %771 to i64
  %776 = getelementptr ptr, ptr %765, i64 %775
  %777 = getelementptr i8, ptr %776, i64 64
  %778 = load ptr, ptr %777, align 8
  %779 = call ptr %778({ ptr, ptr, ptr, i32 } %772, ptr nonnull %2)
  %780 = call i32 %779({ ptr, ptr, ptr, i32 } %772, { ptr, ptr, ptr, i32 } %772, ptr nonnull %2)
  %781 = add i32 %780, -1
  %782 = and i32 %781, %761
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %783 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %784 = load ptr, ptr %89, align 8
  %785 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %784, 0
  %786 = load ptr, ptr %90, align 8
  %787 = insertvalue { ptr, ptr, ptr, i32 } %785, ptr %786, 1
  %788 = load ptr, ptr %91, align 8
  %789 = insertvalue { ptr, ptr, ptr, i32 } %787, ptr %788, 2
  %790 = load i32, ptr %92, align 4
  %791 = insertvalue { ptr, ptr, ptr, i32 } %789, i32 %790, 3
  %hash_coef_ptr.i.i172.i = getelementptr i8, ptr %784, i64 8
  %tbl_size_ptr.i.i173.i = getelementptr i8, ptr %784, i64 16
  %offset_tbl_ptr.i.i174.i = getelementptr i8, ptr %784, i64 40
  %hash_coef.i.i175.i = load i64, ptr %hash_coef_ptr.i.i172.i, align 4
  %tbl_size.i.i176.i = load i64, ptr %tbl_size_ptr.i.i173.i, align 4
  %offset_tbl.i.i177.i = load ptr, ptr %offset_tbl_ptr.i.i174.i, align 8
  %product.i.i.i178.i = mul i64 %hash_coef.i.i175.i, -5261542750394134544
  %shifted.i.i.i179.i = lshr i64 %product.i.i.i178.i, 32
  %xored.i.i.i180.i = xor i64 %shifted.i.i.i179.i, %product.i.i.i178.i
  %hash.i.i.i181.i = and i64 %xored.i.i.i180.i, %tbl_size.i.i176.i
  %offset_ptr.i.i182.i = getelementptr i32, ptr %offset_tbl.i.i177.i, i64 %hash.i.i.i181.i
  %offset.i.i183.i = load i32, ptr %offset_ptr.i.i182.i, align 4
  %eq.i.i396 = icmp eq i32 %790, %offset.i.i183.i
  call void @llvm.assume(i1 %eq.i.i396) #30
  store ptr @_parameterization_Ptri32, ptr %35, align 8
  %792 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %35)
  %793 = call ptr @llvm.invariant.start.p0(i64 600, ptr %784)
  %794 = sext i32 %790 to i64
  %795 = getelementptr ptr, ptr %784, i64 %794
  %796 = getelementptr i8, ptr %795, i64 120
  %797 = load ptr, ptr %796, align 8
  store ptr @i32_typ, ptr %36, align 8
  %798 = call ptr %797({ ptr, ptr, ptr, i32 } %791, ptr nonnull %36)
  %799 = call { ptr, i160 } %798({ ptr, ptr, ptr, i32 } %791, { ptr, ptr, ptr, i32 } %791, ptr nonnull %35, i32 %782)
  %.fca.0.extract112.i = extractvalue { ptr, i160 } %799, 0
  %800 = ptrtoint ptr %.sroa.speculated352.i908 to i64
  %801 = ptrtoint ptr %.sroa.speculated346.i910 to i64
  %.sroa.3111.0.insert.ext.i = zext i32 %offset.i.i260.i912 to i160
  %.sroa.3111.0.insert.shift.i = shl nuw i160 %.sroa.3111.0.insert.ext.i, 128
  %.sroa.2110.0.insert.ext.i = zext i64 %801 to i160
  %.sroa.2110.0.insert.shift.i = shl nuw nsw i160 %.sroa.2110.0.insert.ext.i, 64
  %.sroa.2110.0.insert.insert.i = or disjoint i160 %.sroa.2110.0.insert.shift.i, %.sroa.3111.0.insert.shift.i
  %.sroa.0109.0.insert.ext.i = zext i64 %800 to i160
  %.sroa.0109.0.insert.insert.i = or disjoint i160 %.sroa.2110.0.insert.insert.i, %.sroa.0109.0.insert.ext.i
  %802 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0109.0.insert.insert.i, 1
  %803 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %804 = load ptr, ptr %89, align 8
  %805 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %804, 0
  %806 = load ptr, ptr %90, align 8
  %807 = insertvalue { ptr, ptr, ptr, i32 } %805, ptr %806, 1
  %808 = load ptr, ptr %91, align 8
  %809 = insertvalue { ptr, ptr, ptr, i32 } %807, ptr %808, 2
  %810 = load i32, ptr %92, align 4
  %811 = insertvalue { ptr, ptr, ptr, i32 } %809, i32 %810, 3
  %hash_coef_ptr.i.i186.i = getelementptr i8, ptr %804, i64 8
  %tbl_size_ptr.i.i187.i = getelementptr i8, ptr %804, i64 16
  %offset_tbl_ptr.i.i188.i = getelementptr i8, ptr %804, i64 40
  %hash_coef.i.i189.i = load i64, ptr %hash_coef_ptr.i.i186.i, align 4
  %tbl_size.i.i190.i = load i64, ptr %tbl_size_ptr.i.i187.i, align 4
  %offset_tbl.i.i191.i = load ptr, ptr %offset_tbl_ptr.i.i188.i, align 8
  %product.i.i.i192.i = mul i64 %hash_coef.i.i189.i, -5261542750394134544
  %shifted.i.i.i193.i = lshr i64 %product.i.i.i192.i, 32
  %xored.i.i.i194.i = xor i64 %shifted.i.i.i193.i, %product.i.i.i192.i
  %hash.i.i.i195.i = and i64 %xored.i.i.i194.i, %tbl_size.i.i190.i
  %offset_ptr.i.i196.i = getelementptr i32, ptr %offset_tbl.i.i191.i, i64 %hash.i.i.i195.i
  %offset.i.i197.i = load i32, ptr %offset_ptr.i.i196.i, align 4
  %eq.i200.i = icmp eq i32 %810, %offset.i.i197.i
  call void @llvm.assume(i1 %eq.i200.i) #30
  %812 = load ptr, ptr %result.i, align 8
  %813 = load ptr, ptr %72, align 8
  %result.i.i397 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %814 = getelementptr i8, ptr %result.i.i397, i64 16
  store ptr %813, ptr %814, align 8
  %815 = getelementptr i8, ptr %result.i.i397, i64 8
  store ptr %812, ptr %815, align 8
  %816 = getelementptr i8, ptr %result.i.i397, i64 24
  store ptr null, ptr %816, align 8
  %817 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i397)
  store ptr @Entry, ptr %result.i.i397, align 8
  store ptr @_parameterization_Ptri32, ptr %37, align 8
  store ptr %result.i.i397, ptr %137, align 8
  %818 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %37)
  %819 = call ptr @llvm.invariant.start.p0(i64 600, ptr %804)
  %820 = sext i32 %810 to i64
  %821 = getelementptr ptr, ptr %804, i64 %820
  %822 = getelementptr i8, ptr %821, i64 128
  %823 = load ptr, ptr %822, align 8
  store ptr @i32_typ, ptr %38, align 8
  store ptr @Entry, ptr %138, align 8
  %824 = call ptr %823({ ptr, ptr, ptr, i32 } %811, ptr nonnull %38)
  call void %824({ ptr, ptr, ptr, i32 } %811, { ptr, ptr, ptr, i32 } %811, ptr nonnull %37, i32 %782, { ptr, i160 } %802)
  %825 = icmp ne ptr %.fca.0.extract112.i, @nil_typ
  %826 = icmp ne ptr %.fca.0.extract112.i, null
  %.not140.i = and i1 %825, %826
  br i1 %.not140.i, label %.cont.cont.i, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit.thread

827:                                              ; preds = %754
  %828 = add i32 %761, 2127912214
  %829 = shl i32 %761, 12
  %830 = add i32 %828, %829
  %831 = ashr i32 %830, 19
  %832 = xor i32 %830, %831
  %833 = xor i32 %832, -949894596
  %834 = add i32 %833, 374761393
  %835 = shl i32 %833, 5
  %836 = add i32 %834, %835
  %837 = add i32 %836, -744332180
  %838 = shl i32 %836, 9
  %839 = xor i32 %837, %838
  %840 = add i32 %839, -42973499
  %841 = shl i32 %839, 3
  %842 = add i32 %840, %841
  %843 = ashr i32 %842, 16
  %844 = xor i32 %842, %843
  %845 = xor i32 %844, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %846 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %847 = load ptr, ptr %104, align 8
  %848 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %847, 0
  %849 = load ptr, ptr %105, align 8
  %850 = insertvalue { ptr, ptr, ptr, i32 } %848, ptr %849, 1
  %851 = load ptr, ptr %106, align 8
  %852 = insertvalue { ptr, ptr, ptr, i32 } %850, ptr %851, 2
  %853 = load i32, ptr %107, align 4
  %854 = insertvalue { ptr, ptr, ptr, i32 } %852, i32 %853, 3
  %hash_coef_ptr.i.i10.i1064 = getelementptr i8, ptr %847, i64 8
  %tbl_size_ptr.i.i11.i1065 = getelementptr i8, ptr %847, i64 16
  %offset_tbl_ptr.i.i12.i1066 = getelementptr i8, ptr %847, i64 40
  %hash_coef.i.i13.i1067 = load i64, ptr %hash_coef_ptr.i.i10.i1064, align 4
  %tbl_size.i.i14.i1068 = load i64, ptr %tbl_size_ptr.i.i11.i1065, align 4
  %offset_tbl.i.i15.i1069 = load ptr, ptr %offset_tbl_ptr.i.i12.i1066, align 8
  %product.i.i.i16.i1070 = mul i64 %hash_coef.i.i13.i1067, -5261542750394134544
  %shifted.i.i.i17.i1071 = lshr i64 %product.i.i.i16.i1070, 32
  %xored.i.i.i18.i1072 = xor i64 %shifted.i.i.i17.i1071, %product.i.i.i16.i1070
  %hash.i.i.i19.i1073 = and i64 %xored.i.i.i18.i1072, %tbl_size.i.i14.i1068
  %offset_ptr.i.i20.i1074 = getelementptr i32, ptr %offset_tbl.i.i15.i1069, i64 %hash.i.i.i19.i1073
  %offset.i.i21.i1075 = load i32, ptr %offset_ptr.i.i20.i1074, align 4
  %eq.i.i1076 = icmp eq i32 %853, %offset.i.i21.i1075
  call void @llvm.assume(i1 %eq.i.i1076) #30
  %855 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %856 = call ptr @llvm.invariant.start.p0(i64 600, ptr %847)
  %857 = sext i32 %853 to i64
  %858 = getelementptr ptr, ptr %847, i64 %857
  %859 = getelementptr i8, ptr %858, i64 64
  %860 = load ptr, ptr %859, align 8
  %861 = call ptr %860({ ptr, ptr, ptr, i32 } %854, ptr nonnull %2)
  %862 = call i32 %861({ ptr, ptr, ptr, i32 } %854, { ptr, ptr, ptr, i32 } %854, ptr nonnull %2)
  %863 = add i32 %862, -1
  %864 = and i32 %863, %845
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %865 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %866 = load ptr, ptr %104, align 8
  %867 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %866, 0
  %868 = load ptr, ptr %105, align 8
  %869 = insertvalue { ptr, ptr, ptr, i32 } %867, ptr %868, 1
  %870 = load ptr, ptr %106, align 8
  %871 = insertvalue { ptr, ptr, ptr, i32 } %869, ptr %870, 2
  %872 = load i32, ptr %107, align 4
  %873 = insertvalue { ptr, ptr, ptr, i32 } %871, i32 %872, 3
  %hash_coef_ptr.i.i202.i383 = getelementptr i8, ptr %866, i64 8
  %tbl_size_ptr.i.i203.i384 = getelementptr i8, ptr %866, i64 16
  %offset_tbl_ptr.i.i204.i385 = getelementptr i8, ptr %866, i64 40
  %hash_coef.i.i205.i386 = load i64, ptr %hash_coef_ptr.i.i202.i383, align 4
  %tbl_size.i.i206.i387 = load i64, ptr %tbl_size_ptr.i.i203.i384, align 4
  %offset_tbl.i.i207.i388 = load ptr, ptr %offset_tbl_ptr.i.i204.i385, align 8
  %product.i.i.i208.i389 = mul i64 %hash_coef.i.i205.i386, -5261542750394134544
  %shifted.i.i.i209.i390 = lshr i64 %product.i.i.i208.i389, 32
  %xored.i.i.i210.i391 = xor i64 %shifted.i.i.i209.i390, %product.i.i.i208.i389
  %hash.i.i.i211.i392 = and i64 %xored.i.i.i210.i391, %tbl_size.i.i206.i387
  %offset_ptr.i.i212.i393 = getelementptr i32, ptr %offset_tbl.i.i207.i388, i64 %hash.i.i.i211.i392
  %offset.i.i213.i394 = load i32, ptr %offset_ptr.i.i212.i393, align 4
  %eq.i216.i395 = icmp eq i32 %872, %offset.i.i213.i394
  call void @llvm.assume(i1 %eq.i216.i395) #30
  store ptr @_parameterization_Ptri32, ptr %43, align 8
  %874 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %43)
  %875 = call ptr @llvm.invariant.start.p0(i64 600, ptr %866)
  %876 = sext i32 %872 to i64
  %877 = getelementptr ptr, ptr %866, i64 %876
  %878 = getelementptr i8, ptr %877, i64 120
  %879 = load ptr, ptr %878, align 8
  store ptr @i32_typ, ptr %44, align 8
  %880 = call ptr %879({ ptr, ptr, ptr, i32 } %873, ptr nonnull %44)
  %881 = call { ptr, i160 } %880({ ptr, ptr, ptr, i32 } %873, { ptr, ptr, ptr, i32 } %873, ptr nonnull %43, i32 %864)
  %.fca.0.extract87.i = extractvalue { ptr, i160 } %881, 0
  %882 = ptrtoint ptr %.sroa.speculated352.i908 to i64
  %883 = ptrtoint ptr %.sroa.speculated346.i910 to i64
  %.sroa.3.0.insert.ext.i = zext i32 %offset.i.i260.i912 to i160
  %.sroa.3.0.insert.shift.i = shl nuw i160 %.sroa.3.0.insert.ext.i, 128
  %.sroa.2.0.insert.ext.i = zext i64 %883 to i160
  %.sroa.2.0.insert.shift.i = shl nuw nsw i160 %.sroa.2.0.insert.ext.i, 64
  %.sroa.2.0.insert.insert.i = or disjoint i160 %.sroa.2.0.insert.shift.i, %.sroa.3.0.insert.shift.i
  %.sroa.0.0.insert.ext.i = zext i64 %882 to i160
  %.sroa.0.0.insert.insert.i = or disjoint i160 %.sroa.2.0.insert.insert.i, %.sroa.0.0.insert.ext.i
  %884 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0.0.insert.insert.i, 1
  %885 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %886 = load ptr, ptr %104, align 8
  %887 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %886, 0
  %888 = load ptr, ptr %105, align 8
  %889 = insertvalue { ptr, ptr, ptr, i32 } %887, ptr %888, 1
  %890 = load ptr, ptr %106, align 8
  %891 = insertvalue { ptr, ptr, ptr, i32 } %889, ptr %890, 2
  %892 = load i32, ptr %107, align 4
  %893 = insertvalue { ptr, ptr, ptr, i32 } %891, i32 %892, 3
  %hash_coef_ptr.i.i218.i = getelementptr i8, ptr %886, i64 8
  %tbl_size_ptr.i.i219.i = getelementptr i8, ptr %886, i64 16
  %offset_tbl_ptr.i.i220.i = getelementptr i8, ptr %886, i64 40
  %hash_coef.i.i221.i = load i64, ptr %hash_coef_ptr.i.i218.i, align 4
  %tbl_size.i.i222.i = load i64, ptr %tbl_size_ptr.i.i219.i, align 4
  %offset_tbl.i.i223.i = load ptr, ptr %offset_tbl_ptr.i.i220.i, align 8
  %product.i.i.i224.i = mul i64 %hash_coef.i.i221.i, -5261542750394134544
  %shifted.i.i.i225.i = lshr i64 %product.i.i.i224.i, 32
  %xored.i.i.i226.i = xor i64 %shifted.i.i.i225.i, %product.i.i.i224.i
  %hash.i.i.i227.i = and i64 %xored.i.i.i226.i, %tbl_size.i.i222.i
  %offset_ptr.i.i228.i = getelementptr i32, ptr %offset_tbl.i.i223.i, i64 %hash.i.i.i227.i
  %offset.i.i229.i = load i32, ptr %offset_ptr.i.i228.i, align 4
  %eq.i232.i = icmp eq i32 %892, %offset.i.i229.i
  call void @llvm.assume(i1 %eq.i232.i) #30
  %894 = load ptr, ptr %result.i, align 8
  %895 = load ptr, ptr %72, align 8
  %result.i233.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %896 = getelementptr i8, ptr %result.i233.i, i64 16
  store ptr %895, ptr %896, align 8
  %897 = getelementptr i8, ptr %result.i233.i, i64 8
  store ptr %894, ptr %897, align 8
  %898 = getelementptr i8, ptr %result.i233.i, i64 24
  store ptr null, ptr %898, align 8
  %899 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i233.i)
  store ptr @Entry, ptr %result.i233.i, align 8
  store ptr @_parameterization_Ptri32, ptr %45, align 8
  store ptr %result.i233.i, ptr %135, align 8
  %900 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %45)
  %901 = call ptr @llvm.invariant.start.p0(i64 600, ptr %886)
  %902 = sext i32 %892 to i64
  %903 = getelementptr ptr, ptr %886, i64 %902
  %904 = getelementptr i8, ptr %903, i64 128
  %905 = load ptr, ptr %904, align 8
  store ptr @i32_typ, ptr %46, align 8
  store ptr @Entry, ptr %136, align 8
  %906 = call ptr %905({ ptr, ptr, ptr, i32 } %893, ptr nonnull %46)
  call void %906({ ptr, ptr, ptr, i32 } %893, { ptr, ptr, ptr, i32 } %893, ptr nonnull %45, i32 %864, { ptr, i160 } %884)
  %907 = icmp ne ptr %.fca.0.extract87.i, @nil_typ
  %908 = icmp ne ptr %.fca.0.extract87.i, null
  %.not138.i = and i1 %907, %908
  br i1 %.not138.i, label %.cont.cont.i, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit.thread

.cont.cont.i:                                     ; preds = %827, %763
  %.sink = phi { ptr, i160 } [ %799, %763 ], [ %881, %827 ]
  %909 = phi i32 [ 2, %763 ], [ 1, %827 ]
  %vptr.i248.sroa.speculated.i = phi ptr [ %.fca.0.extract112.i, %763 ], [ %.fca.0.extract87.i, %827 ]
  %.fca.1.extract89.i = extractvalue { ptr, i160 } %.sink, 1
  %.sroa.3407.sroa.4.0.extract.shift.i = lshr i160 %.fca.1.extract89.i, 64
  %.sroa.3407.sroa.4.0.extract.trunc.i = trunc i160 %.sroa.3407.sroa.4.0.extract.shift.i to i64
  %.sroa.3407.sroa.0.0.extract.trunc.i = trunc i160 %.fca.1.extract89.i to i64
  %.sroa.speculated352.i = inttoptr i64 %.sroa.3407.sroa.0.0.extract.trunc.i to ptr
  %.sroa.speculated346.i = inttoptr i64 %.sroa.3407.sroa.4.0.extract.trunc.i to ptr
  %hash_coef_ptr.i.i249.i = getelementptr i8, ptr %vptr.i248.sroa.speculated.i, i64 8
  %tbl_size_ptr.i.i250.i = getelementptr i8, ptr %vptr.i248.sroa.speculated.i, i64 16
  %offset_tbl_ptr.i.i251.i = getelementptr i8, ptr %vptr.i248.sroa.speculated.i, i64 40
  %hash_coef.i.i252.i = load i64, ptr %hash_coef_ptr.i.i249.i, align 4
  %tbl_size.i.i253.i = load i64, ptr %tbl_size_ptr.i.i250.i, align 4
  %offset_tbl.i.i254.i = load ptr, ptr %offset_tbl_ptr.i.i251.i, align 8
  %product.i.i.i255.i = mul i64 %hash_coef.i.i252.i, 4015701072841558310
  %shifted.i.i.i256.i = lshr i64 %product.i.i.i255.i, 32
  %xored.i.i.i257.i = xor i64 %shifted.i.i.i256.i, %product.i.i.i255.i
  %hash.i.i.i258.i = and i64 %xored.i.i.i257.i, %tbl_size.i.i253.i
  %offset_ptr.i.i259.i = getelementptr i32, ptr %offset_tbl.i.i254.i, i64 %hash.i.i.i258.i
  %offset.i.i260.i = load i32, ptr %offset_ptr.i.i259.i, align 4
  store ptr %vptr.i248.sroa.speculated.i, ptr %51, align 8
  store ptr %.sroa.speculated352.i, ptr %132, align 8
  store ptr %.sroa.speculated346.i, ptr %133, align 8
  store i32 %offset.i.i260.i, ptr %134, align 8
  %910 = add nuw nsw i32 %.reg2mem193.0677.i, 1
  %911 = load i32, ptr %110, align 4
  %912 = icmp slt i32 %910, %911
  br i1 %912, label %754, label %._crit_edge3.i

HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit.thread: ; preds = %763, %827
  %913 = phi ptr [ %47, %827 ], [ %39, %763 ]
  %914 = phi ptr [ %48, %827 ], [ %40, %763 ]
  %915 = phi ptr [ %49, %827 ], [ %41, %763 ]
  %916 = phi ptr [ %.sroa.0.i354, %827 ], [ %.sroa.0680.i, %763 ]
  %917 = phi ptr [ %50, %827 ], [ %42, %763 ]
  %918 = load i32, ptr %108, align 4
  store i32 %918, ptr %913, align 4
  store i32 1, ptr %914, align 4
  %919 = add i32 %918, 1
  store i32 %919, ptr %915, align 4
  %920 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  store i32 %919, ptr %108, align 4
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %917, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %916, align 8
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %35)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %36)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %37)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %38)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %39)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %40)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %41)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %42)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %43)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %44)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %45)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %46)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %47)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %48)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %49)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i354)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %50)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %51)
  br label %HashMap_insert_keyK_valueV.exit

._crit_edge3.i:                                   ; preds = %.cont.cont.i, %._crit_edge2.i
  %921 = load i160, ptr %132, align 8
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %35)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %36)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %37)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %38)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %39)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %40)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %41)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %42)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %43)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %44)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %45)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %46)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %47)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %48)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %49)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i354)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %50)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %51)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %33)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %34)
  %922 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %923 = load ptr, ptr %89, align 8
  %924 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %923, 0
  %925 = load ptr, ptr %90, align 8
  %926 = insertvalue { ptr, ptr, ptr, i32 } %924, ptr %925, 1
  %927 = load ptr, ptr %91, align 8
  %928 = insertvalue { ptr, ptr, ptr, i32 } %926, ptr %927, 2
  %929 = load i32, ptr %92, align 4
  %930 = insertvalue { ptr, ptr, ptr, i32 } %928, i32 %929, 3
  %hash_coef_ptr.i.i18.i418 = getelementptr i8, ptr %923, i64 8
  %tbl_size_ptr.i.i19.i419 = getelementptr i8, ptr %923, i64 16
  %offset_tbl_ptr.i.i20.i420 = getelementptr i8, ptr %923, i64 40
  %hash_coef.i.i21.i421 = load i64, ptr %hash_coef_ptr.i.i18.i418, align 4
  %tbl_size.i.i22.i422 = load i64, ptr %tbl_size_ptr.i.i19.i419, align 4
  %offset_tbl.i.i23.i423 = load ptr, ptr %offset_tbl_ptr.i.i20.i420, align 8
  %product.i.i.i24.i424 = mul i64 %hash_coef.i.i21.i421, -5261542750394134544
  %shifted.i.i.i25.i425 = lshr i64 %product.i.i.i24.i424, 32
  %xored.i.i.i26.i426 = xor i64 %shifted.i.i.i25.i425, %product.i.i.i24.i424
  %hash.i.i.i27.i427 = and i64 %xored.i.i.i26.i426, %tbl_size.i.i22.i422
  %offset_ptr.i.i28.i428 = getelementptr i32, ptr %offset_tbl.i.i23.i423, i64 %hash.i.i.i27.i427
  %offset.i.i29.i429 = load i32, ptr %offset_ptr.i.i28.i428, align 4
  %eq.i.i430 = icmp eq i32 %929, %offset.i.i29.i429
  call void @llvm.assume(i1 %eq.i.i430) #30
  %931 = load ptr, ptr %104, align 8
  %932 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %931, 0
  %933 = load ptr, ptr %105, align 8
  %934 = insertvalue { ptr, ptr, ptr, i32 } %932, ptr %933, 1
  %935 = load ptr, ptr %106, align 8
  %936 = insertvalue { ptr, ptr, ptr, i32 } %934, ptr %935, 2
  %937 = load i32, ptr %107, align 4
  %hash_coef_ptr.i.i46.i435 = getelementptr i8, ptr %931, i64 8
  %tbl_size_ptr.i.i47.i436 = getelementptr i8, ptr %931, i64 16
  %offset_tbl_ptr.i.i48.i437 = getelementptr i8, ptr %931, i64 40
  %hash_coef.i.i49.i438 = load i64, ptr %hash_coef_ptr.i.i46.i435, align 4
  %tbl_size.i.i50.i439 = load i64, ptr %tbl_size_ptr.i.i47.i436, align 4
  %offset_tbl.i.i51.i440 = load ptr, ptr %offset_tbl_ptr.i.i48.i437, align 8
  %product.i.i.i52.i441 = mul i64 %hash_coef.i.i49.i438, -5261542750394134544
  %shifted.i.i.i53.i442 = lshr i64 %product.i.i.i52.i441, 32
  %xored.i.i.i54.i443 = xor i64 %shifted.i.i.i53.i442, %product.i.i.i52.i441
  %hash.i.i.i55.i444 = and i64 %xored.i.i.i54.i443, %tbl_size.i.i50.i439
  %offset_ptr.i.i56.i445 = getelementptr i32, ptr %offset_tbl.i.i51.i440, i64 %hash.i.i.i55.i444
  %offset.i.i57.i446 = load i32, ptr %offset_ptr.i.i56.i445, align 4
  %eq.i60.i447 = icmp eq i32 %937, %offset.i.i57.i446
  call void @llvm.assume(i1 %eq.i60.i447) #30
  %938 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %939 = call ptr @llvm.invariant.start.p0(i64 600, ptr %923)
  %940 = sext i32 %929 to i64
  %941 = getelementptr ptr, ptr %923, i64 %940
  %942 = getelementptr i8, ptr %941, i64 64
  %943 = load ptr, ptr %942, align 8
  %944 = call ptr %943({ ptr, ptr, ptr, i32 } %930, ptr nonnull %2)
  %945 = call i32 %944({ ptr, ptr, ptr, i32 } %930, { ptr, ptr, ptr, i32 } %930, ptr nonnull %2)
  %946 = shl i32 %945, 1
  %947 = call i32 @llvm.smax.i32(i32 %946, i32 16)
  %948 = load ptr, ptr %result.i, align 8
  %949 = load ptr, ptr %72, align 8
  %result.i.i448 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %950 = getelementptr i8, ptr %result.i.i448, i64 16
  store ptr @_parameterization_Nil, ptr %950, align 8
  %result.i75.i449 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %951 = getelementptr i8, ptr %result.i75.i449, i64 16
  store ptr %949, ptr %951, align 8
  %952 = getelementptr i8, ptr %result.i75.i449, i64 8
  store ptr %948, ptr %952, align 8
  %953 = getelementptr i8, ptr %result.i75.i449, i64 24
  store ptr null, ptr %953, align 8
  %954 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i75.i449)
  store ptr @Entry, ptr %result.i75.i449, align 8
  %955 = getelementptr i8, ptr %result.i.i448, i64 8
  store ptr %result.i75.i449, ptr %955, align 8
  %956 = getelementptr i8, ptr %result.i.i448, i64 24
  store ptr null, ptr %956, align 8
  %957 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i448)
  store ptr @union_typ, ptr %result.i.i448, align 8
  %result.i76.i450 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i448, ptr %result.i76.i450, align 8
  %958 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i76.i450)
  store ptr @Array, ptr %33, align 8
  store ptr %result.i76.i450, ptr %139, align 8
  store i32 9, ptr %140, align 8
  %959 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %33)
  %960 = getelementptr i8, ptr %result.i76.i450, i64 16
  store i32 %947, ptr %960, align 4
  %961 = getelementptr i8, ptr %result.i76.i450, i64 20
  store i32 %947, ptr %961, align 4
  %962 = zext nneg i32 %947 to i64
  %963 = shl nuw nsw i64 %962, 5
  %result.i.i.i451 = call noalias ptr @bump_malloc_inner(i64 noundef %963, ptr nonnull @current_ptr) #29
  %964 = getelementptr i8, ptr %result.i76.i450, i64 8
  store ptr %result.i.i.i451, ptr %964, align 8
  %965 = load ptr, ptr %141, align 8
  store ptr @Array, ptr %89, align 8
  store ptr %result.i76.i450, ptr %90, align 8
  store ptr %965, ptr %91, align 8
  store i32 9, ptr %92, align 4
  %result.i91.i464 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %966 = getelementptr i8, ptr %result.i91.i464, i64 16
  store ptr @_parameterization_Nil, ptr %966, align 8
  %result.i92.i465 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %967 = getelementptr i8, ptr %result.i92.i465, i64 16
  store ptr %949, ptr %967, align 8
  %968 = getelementptr i8, ptr %result.i92.i465, i64 8
  store ptr %948, ptr %968, align 8
  %969 = getelementptr i8, ptr %result.i92.i465, i64 24
  store ptr null, ptr %969, align 8
  %970 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i92.i465)
  store ptr @Entry, ptr %result.i92.i465, align 8
  %971 = getelementptr i8, ptr %result.i91.i464, i64 8
  store ptr %result.i92.i465, ptr %971, align 8
  %972 = getelementptr i8, ptr %result.i91.i464, i64 24
  store ptr null, ptr %972, align 8
  %973 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i91.i464)
  store ptr @union_typ, ptr %result.i91.i464, align 8
  %result.i93.i466 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i91.i464, ptr %result.i93.i466, align 8
  %974 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i93.i466)
  store ptr @Array, ptr %34, align 8
  store ptr %result.i93.i466, ptr %142, align 8
  store i32 9, ptr %143, align 8
  %975 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %34)
  %976 = getelementptr i8, ptr %result.i93.i466, i64 16
  store i32 %947, ptr %976, align 4
  %977 = getelementptr i8, ptr %result.i93.i466, i64 20
  store i32 %947, ptr %977, align 4
  %result.i.i234.i467 = call noalias ptr @bump_malloc_inner(i64 noundef %963, ptr nonnull @current_ptr) #29
  %978 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %979 = getelementptr i8, ptr %result.i93.i466, i64 8
  store ptr %result.i.i234.i467, ptr %979, align 8
  %980 = load ptr, ptr %144, align 8
  store ptr @Array, ptr %104, align 8
  store ptr %result.i93.i466, ptr %105, align 8
  store ptr %980, ptr %106, align 8
  store i32 9, ptr %107, align 4
  store i32 0, ptr %108, align 4
  %981 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10)
  %982 = icmp sgt i32 %945, 0
  br i1 %982, label %.lr.ph.i1079, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1182.critedge

.lr.ph.i1079:                                     ; preds = %._crit_edge3.i
  %invariant.gep.i1080 = getelementptr i8, ptr %923, i64 120
  %offset_tbl.i.i24.i1082 = load ptr, ptr %offset_tbl_ptr.i.i20.i420, align 8
  %hash_coef.i.i22.i1084 = load i64, ptr %hash_coef_ptr.i.i18.i418, align 4
  %product.i.i.i25.i1085 = mul i64 %hash_coef.i.i22.i1084, -5261542750394134544
  %shifted.i.i.i26.i1086 = lshr i64 %product.i.i.i25.i1085, 32
  %xored.i.i.i27.i1087 = xor i64 %shifted.i.i.i26.i1086, %product.i.i.i25.i1085
  %tbl_size.i.i23.i1089 = load i64, ptr %tbl_size_ptr.i.i19.i419, align 4
  %hash.i.i.i28.i1090 = and i64 %xored.i.i.i27.i1087, %tbl_size.i.i23.i1089
  %offset_ptr.i.i29.i1091 = getelementptr i32, ptr %offset_tbl.i.i24.i1082, i64 %hash.i.i.i28.i1090
  %offset.i.i30.i1092 = load i32, ptr %offset_ptr.i.i29.i1091, align 4
  %983 = insertvalue { ptr, ptr, ptr, i32 } %928, i32 %offset.i.i30.i1092, 3
  %984 = sext i32 %offset.i.i30.i1092 to i64
  %gep.i1107 = getelementptr ptr, ptr %invariant.gep.i1080, i64 %984
  %985 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %986

986:                                              ; preds = %._crit_edge1.i1111, %.lr.ph.i1079
  %.reg2mem13.079.i1108 = phi i32 [ 0, %.lr.ph.i1079 ], [ %1003, %._crit_edge1.i1111 ]
  store ptr @_parameterization_Ptri32, ptr %9, align 8
  %987 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %9)
  %988 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %923)
  %989 = load ptr, ptr %gep.i1107, align 8
  store ptr @i32_typ, ptr %10, align 8
  %990 = call ptr %989({ ptr, ptr, ptr, i32 } %983, ptr nonnull %10)
  %991 = call { ptr, i160 } %990({ ptr, ptr, ptr, i32 } %983, { ptr, ptr, ptr, i32 } %983, ptr nonnull %9, i32 %.reg2mem13.079.i1108)
  %.fca.0.extract11.i1109 = extractvalue { ptr, i160 } %991, 0
  %992 = icmp ne ptr %.fca.0.extract11.i1109, @nil_typ
  %993 = icmp ne ptr %.fca.0.extract11.i1109, null
  %.not17.i1110 = and i1 %992, %993
  br i1 %.not17.i1110, label %994, label %._crit_edge1.i1111

994:                                              ; preds = %986
  %.fca.1.extract13.i1112 = extractvalue { ptr, i160 } %991, 1
  %.sroa.375.8.extract.trunc.i1113 = trunc i160 %.fca.1.extract13.i1112 to i64
  %995 = inttoptr i64 %.sroa.375.8.extract.trunc.i1113 to ptr
  %.sroa.576.8.extract.shift.i1114 = lshr i160 %.fca.1.extract13.i1112, 64
  %.sroa.576.8.extract.trunc.i1115 = trunc i160 %.sroa.576.8.extract.shift.i1114 to i64
  %996 = inttoptr i64 %.sroa.576.8.extract.trunc.i1115 to ptr
  %hash_coef_ptr.i.i33.i1116 = getelementptr i8, ptr %.fca.0.extract11.i1109, i64 8
  %tbl_size_ptr.i.i34.i1117 = getelementptr i8, ptr %.fca.0.extract11.i1109, i64 16
  %offset_tbl_ptr.i.i35.i1118 = getelementptr i8, ptr %.fca.0.extract11.i1109, i64 40
  %hash_coef.i.i36.i1119 = load i64, ptr %hash_coef_ptr.i.i33.i1116, align 4
  %tbl_size.i.i37.i1120 = load i64, ptr %tbl_size_ptr.i.i34.i1117, align 4
  %offset_tbl.i.i38.i1121 = load ptr, ptr %offset_tbl_ptr.i.i35.i1118, align 8
  %product.i.i.i39.i1122 = mul i64 %hash_coef.i.i36.i1119, 4015701072841558310
  %shifted.i.i.i40.i1123 = lshr i64 %product.i.i.i39.i1122, 32
  %xored.i.i.i41.i1124 = xor i64 %shifted.i.i.i40.i1123, %product.i.i.i39.i1122
  %hash.i.i.i42.i1125 = and i64 %xored.i.i.i41.i1124, %tbl_size.i.i37.i1120
  %offset_ptr.i.i43.i1126 = getelementptr i32, ptr %offset_tbl.i.i38.i1121, i64 %hash.i.i.i42.i1125
  %offset.i.i58.i1127 = load i32, ptr %offset_ptr.i.i43.i1126, align 4
  %997 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i1109, 0
  %998 = insertvalue { ptr, ptr, ptr, i32 } %997, ptr %995, 1
  %999 = insertvalue { ptr, ptr, ptr, i32 } %998, ptr %996, 2
  %1000 = insertvalue { ptr, ptr, ptr, i32 } %999, i32 %offset.i.i58.i1127, 3
  %1001 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1002 = call { ptr, i160 } @HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %157, { ptr, ptr, ptr, i32 } poison, ptr nonnull poison, { ptr, ptr, ptr, i32 } %1000)
  br label %._crit_edge1.i1111

._crit_edge1.i1111:                               ; preds = %994, %986
  %1003 = add nuw nsw i32 %.reg2mem13.079.i1108, 1
  %1004 = icmp slt i32 %1003, %945
  br i1 %1004, label %986, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1129

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1129: ; preds = %._crit_edge1.i1111
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10)
  %1005 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8)
  %invariant.gep.i1133 = getelementptr i8, ptr %931, i64 120
  %offset_tbl.i.i24.i1135 = load ptr, ptr %offset_tbl_ptr.i.i48.i437, align 8
  %hash_coef.i.i22.i1137 = load i64, ptr %hash_coef_ptr.i.i46.i435, align 4
  %product.i.i.i25.i1138 = mul i64 %hash_coef.i.i22.i1137, -5261542750394134544
  %shifted.i.i.i26.i1139 = lshr i64 %product.i.i.i25.i1138, 32
  %xored.i.i.i27.i1140 = xor i64 %shifted.i.i.i26.i1139, %product.i.i.i25.i1138
  %tbl_size.i.i23.i1142 = load i64, ptr %tbl_size_ptr.i.i47.i436, align 4
  %hash.i.i.i28.i1143 = and i64 %xored.i.i.i27.i1140, %tbl_size.i.i23.i1142
  %offset_ptr.i.i29.i1144 = getelementptr i32, ptr %offset_tbl.i.i24.i1135, i64 %hash.i.i.i28.i1143
  %offset.i.i30.i1145 = load i32, ptr %offset_ptr.i.i29.i1144, align 4
  %1006 = insertvalue { ptr, ptr, ptr, i32 } %936, i32 %offset.i.i30.i1145, 3
  %1007 = sext i32 %offset.i.i30.i1145 to i64
  %gep.i1160 = getelementptr ptr, ptr %invariant.gep.i1133, i64 %1007
  %1008 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %1009

1009:                                             ; preds = %._crit_edge1.i1164, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1129
  %.reg2mem13.079.i1161 = phi i32 [ 0, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1129 ], [ %1026, %._crit_edge1.i1164 ]
  store ptr @_parameterization_Ptri32, ptr %7, align 8
  %1010 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %7)
  %1011 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %931)
  %1012 = load ptr, ptr %gep.i1160, align 8
  store ptr @i32_typ, ptr %8, align 8
  %1013 = call ptr %1012({ ptr, ptr, ptr, i32 } %1006, ptr nonnull %8)
  %1014 = call { ptr, i160 } %1013({ ptr, ptr, ptr, i32 } %1006, { ptr, ptr, ptr, i32 } %1006, ptr nonnull %7, i32 %.reg2mem13.079.i1161)
  %.fca.0.extract11.i1162 = extractvalue { ptr, i160 } %1014, 0
  %1015 = icmp ne ptr %.fca.0.extract11.i1162, @nil_typ
  %1016 = icmp ne ptr %.fca.0.extract11.i1162, null
  %.not17.i1163 = and i1 %1015, %1016
  br i1 %.not17.i1163, label %1017, label %._crit_edge1.i1164

1017:                                             ; preds = %1009
  %.fca.1.extract13.i1165 = extractvalue { ptr, i160 } %1014, 1
  %.sroa.375.8.extract.trunc.i1166 = trunc i160 %.fca.1.extract13.i1165 to i64
  %1018 = inttoptr i64 %.sroa.375.8.extract.trunc.i1166 to ptr
  %.sroa.576.8.extract.shift.i1167 = lshr i160 %.fca.1.extract13.i1165, 64
  %.sroa.576.8.extract.trunc.i1168 = trunc i160 %.sroa.576.8.extract.shift.i1167 to i64
  %1019 = inttoptr i64 %.sroa.576.8.extract.trunc.i1168 to ptr
  %hash_coef_ptr.i.i33.i1169 = getelementptr i8, ptr %.fca.0.extract11.i1162, i64 8
  %tbl_size_ptr.i.i34.i1170 = getelementptr i8, ptr %.fca.0.extract11.i1162, i64 16
  %offset_tbl_ptr.i.i35.i1171 = getelementptr i8, ptr %.fca.0.extract11.i1162, i64 40
  %hash_coef.i.i36.i1172 = load i64, ptr %hash_coef_ptr.i.i33.i1169, align 4
  %tbl_size.i.i37.i1173 = load i64, ptr %tbl_size_ptr.i.i34.i1170, align 4
  %offset_tbl.i.i38.i1174 = load ptr, ptr %offset_tbl_ptr.i.i35.i1171, align 8
  %product.i.i.i39.i1175 = mul i64 %hash_coef.i.i36.i1172, 4015701072841558310
  %shifted.i.i.i40.i1176 = lshr i64 %product.i.i.i39.i1175, 32
  %xored.i.i.i41.i1177 = xor i64 %shifted.i.i.i40.i1176, %product.i.i.i39.i1175
  %hash.i.i.i42.i1178 = and i64 %xored.i.i.i41.i1177, %tbl_size.i.i37.i1173
  %offset_ptr.i.i43.i1179 = getelementptr i32, ptr %offset_tbl.i.i38.i1174, i64 %hash.i.i.i42.i1178
  %offset.i.i58.i1180 = load i32, ptr %offset_ptr.i.i43.i1179, align 4
  %1020 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i1162, 0
  %1021 = insertvalue { ptr, ptr, ptr, i32 } %1020, ptr %1018, 1
  %1022 = insertvalue { ptr, ptr, ptr, i32 } %1021, ptr %1019, 2
  %1023 = insertvalue { ptr, ptr, ptr, i32 } %1022, i32 %offset.i.i58.i1180, 3
  %1024 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1025 = call { ptr, i160 } @HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %157, { ptr, ptr, ptr, i32 } poison, ptr nonnull poison, { ptr, ptr, ptr, i32 } %1023)
  br label %._crit_edge1.i1164

._crit_edge1.i1164:                               ; preds = %1017, %1009
  %1026 = add nuw nsw i32 %.reg2mem13.079.i1161, 1
  %1027 = icmp slt i32 %1026, %945
  br i1 %1027, label %1009, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1182

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1182.critedge: ; preds = %._crit_edge3.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8)
  br label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1182

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1182: ; preds = %._crit_edge1.i1164, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1182.critedge
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %33)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %34)
  %1028 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %17)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %18)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %19)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %20)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %21)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %22)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %23)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0680.i510)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %24)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %25)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %26)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %27)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %28)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %29)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %30)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %31)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i512)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %32)
  %1029 = load i32, ptr %110, align 4
  %1030 = icmp sgt i32 %1029, 0
  br i1 %1030, label %.lr.ph.i547, label %._crit_edge3.1.i

.lr.ph.i547:                                      ; preds = %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1182
  %1031 = lshr i160 %921, 64
  %1032 = insertelement <2 x i160> poison, i160 %1031, i64 0
  %1033 = insertelement <2 x i160> %1032, i160 %921, i64 1
  %1034 = trunc <2 x i160> %1033 to <2 x i64>
  %1035 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1036 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1037 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  br label %1038

1038:                                             ; preds = %.cont.cont.i601, %.lr.ph.i547
  %offset.i.i260.i618920 = phi i32 [ 9, %.lr.ph.i547 ], [ %offset.i.i260.i618, %.cont.cont.i601 ]
  %.reg2mem195.0678.i549 = phi i32 [ 1, %.lr.ph.i547 ], [ %1192, %.cont.cont.i601 ]
  %.reg2mem193.0677.i550 = phi i32 [ 0, %.lr.ph.i547 ], [ %1197, %.cont.cont.i601 ]
  %1039 = phi <2 x i64> [ %1034, %.lr.ph.i547 ], [ %1196, %.cont.cont.i601 ]
  %1040 = extractelement <2 x i64> %1039, i64 1
  %.sroa.speculated352.i605916 = inttoptr i64 %1040 to ptr
  %1041 = extractelement <2 x i64> %1039, i64 0
  %.sroa.speculated346.i606918 = inttoptr i64 %1041 to ptr
  %1042 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Entry, ptr undef, ptr undef, i32 undef }, ptr %.sroa.speculated352.i605916, 1
  %1043 = insertvalue { ptr, ptr, ptr, i32 } %1042, ptr %.sroa.speculated346.i606918, 2
  %1044 = insertvalue { ptr, ptr, ptr, i32 } %1043, i32 %offset.i.i260.i618920, 3
  %1045 = sext i32 %offset.i.i260.i618920 to i64
  %gep914 = getelementptr ptr, ptr getelementptr inbounds (i8, ptr @Entry, i64 64), i64 %1045
  %1046 = load ptr, ptr %gep914, align 8
  %1047 = call ptr %1046({ ptr, ptr, ptr, i32 } %1044, ptr nonnull %2)
  %1048 = call i32 %1047({ ptr, ptr, ptr, i32 } %1044, { ptr, ptr, ptr, i32 } %1044, ptr nonnull %2)
  %1049 = icmp eq i32 %.reg2mem195.0678.i549, 1
  br i1 %1049, label %1050, label %1112

1050:                                             ; preds = %1038
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %1051 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1052 = load ptr, ptr %89, align 8
  %1053 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1052, 0
  %1054 = load ptr, ptr %90, align 8
  %1055 = insertvalue { ptr, ptr, ptr, i32 } %1053, ptr %1054, 1
  %1056 = load ptr, ptr %91, align 8
  %1057 = insertvalue { ptr, ptr, ptr, i32 } %1055, ptr %1056, 2
  %1058 = load i32, ptr %92, align 4
  %1059 = insertvalue { ptr, ptr, ptr, i32 } %1057, i32 %1058, 3
  %hash_coef_ptr.i.i10.i1200 = getelementptr i8, ptr %1052, i64 8
  %tbl_size_ptr.i.i11.i1201 = getelementptr i8, ptr %1052, i64 16
  %offset_tbl_ptr.i.i12.i1202 = getelementptr i8, ptr %1052, i64 40
  %hash_coef.i.i13.i1203 = load i64, ptr %hash_coef_ptr.i.i10.i1200, align 4
  %tbl_size.i.i14.i1204 = load i64, ptr %tbl_size_ptr.i.i11.i1201, align 4
  %offset_tbl.i.i15.i1205 = load ptr, ptr %offset_tbl_ptr.i.i12.i1202, align 8
  %product.i.i.i16.i1206 = mul i64 %hash_coef.i.i13.i1203, -5261542750394134544
  %shifted.i.i.i17.i1207 = lshr i64 %product.i.i.i16.i1206, 32
  %xored.i.i.i18.i1208 = xor i64 %shifted.i.i.i17.i1207, %product.i.i.i16.i1206
  %hash.i.i.i19.i1209 = and i64 %xored.i.i.i18.i1208, %tbl_size.i.i14.i1204
  %offset_ptr.i.i20.i1210 = getelementptr i32, ptr %offset_tbl.i.i15.i1205, i64 %hash.i.i.i19.i1209
  %offset.i.i21.i1211 = load i32, ptr %offset_ptr.i.i20.i1210, align 4
  %eq.i.i1212 = icmp eq i32 %1058, %offset.i.i21.i1211
  call void @llvm.assume(i1 %eq.i.i1212) #30
  %1060 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1061 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1052)
  %1062 = sext i32 %1058 to i64
  %1063 = getelementptr ptr, ptr %1052, i64 %1062
  %1064 = getelementptr i8, ptr %1063, i64 64
  %1065 = load ptr, ptr %1064, align 8
  %1066 = call ptr %1065({ ptr, ptr, ptr, i32 } %1059, ptr nonnull %2)
  %1067 = call i32 %1066({ ptr, ptr, ptr, i32 } %1059, { ptr, ptr, ptr, i32 } %1059, ptr nonnull %2)
  %1068 = add i32 %1067, -1
  %1069 = and i32 %1068, %1048
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %1070 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1071 = load ptr, ptr %89, align 8
  %1072 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1071, 0
  %1073 = load ptr, ptr %90, align 8
  %1074 = insertvalue { ptr, ptr, ptr, i32 } %1072, ptr %1073, 1
  %1075 = load ptr, ptr %91, align 8
  %1076 = insertvalue { ptr, ptr, ptr, i32 } %1074, ptr %1075, 2
  %1077 = load i32, ptr %92, align 4
  %1078 = insertvalue { ptr, ptr, ptr, i32 } %1076, i32 %1077, 3
  %hash_coef_ptr.i.i172.i623 = getelementptr i8, ptr %1071, i64 8
  %tbl_size_ptr.i.i173.i624 = getelementptr i8, ptr %1071, i64 16
  %offset_tbl_ptr.i.i174.i625 = getelementptr i8, ptr %1071, i64 40
  %hash_coef.i.i175.i626 = load i64, ptr %hash_coef_ptr.i.i172.i623, align 4
  %tbl_size.i.i176.i627 = load i64, ptr %tbl_size_ptr.i.i173.i624, align 4
  %offset_tbl.i.i177.i628 = load ptr, ptr %offset_tbl_ptr.i.i174.i625, align 8
  %product.i.i.i178.i629 = mul i64 %hash_coef.i.i175.i626, -5261542750394134544
  %shifted.i.i.i179.i630 = lshr i64 %product.i.i.i178.i629, 32
  %xored.i.i.i180.i631 = xor i64 %shifted.i.i.i179.i630, %product.i.i.i178.i629
  %hash.i.i.i181.i632 = and i64 %xored.i.i.i180.i631, %tbl_size.i.i176.i627
  %offset_ptr.i.i182.i633 = getelementptr i32, ptr %offset_tbl.i.i177.i628, i64 %hash.i.i.i181.i632
  %offset.i.i183.i634 = load i32, ptr %offset_ptr.i.i182.i633, align 4
  %eq.i.i635 = icmp eq i32 %1077, %offset.i.i183.i634
  call void @llvm.assume(i1 %eq.i.i635) #30
  store ptr @_parameterization_Ptri32, ptr %17, align 8
  %1079 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %17)
  %1080 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1071)
  %1081 = sext i32 %1077 to i64
  %1082 = getelementptr ptr, ptr %1071, i64 %1081
  %1083 = getelementptr i8, ptr %1082, i64 120
  %1084 = load ptr, ptr %1083, align 8
  store ptr @i32_typ, ptr %18, align 8
  %1085 = call ptr %1084({ ptr, ptr, ptr, i32 } %1078, ptr nonnull %18)
  %1086 = call { ptr, i160 } %1085({ ptr, ptr, ptr, i32 } %1078, { ptr, ptr, ptr, i32 } %1078, ptr nonnull %17, i32 %1069)
  %.fca.0.extract112.i636 = extractvalue { ptr, i160 } %1086, 0
  %.sroa.3111.0.insert.ext.i637 = zext i32 %offset.i.i260.i618920 to i160
  %.sroa.3111.0.insert.shift.i638 = shl nuw i160 %.sroa.3111.0.insert.ext.i637, 128
  %.sroa.2110.0.insert.ext.i639 = zext i64 %1041 to i160
  %.sroa.2110.0.insert.shift.i640 = shl nuw nsw i160 %.sroa.2110.0.insert.ext.i639, 64
  %.sroa.2110.0.insert.insert.i641 = or disjoint i160 %.sroa.2110.0.insert.shift.i640, %.sroa.3111.0.insert.shift.i638
  %.sroa.0109.0.insert.ext.i642 = zext i64 %1040 to i160
  %.sroa.0109.0.insert.insert.i643 = or disjoint i160 %.sroa.2110.0.insert.insert.i641, %.sroa.0109.0.insert.ext.i642
  %1087 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0109.0.insert.insert.i643, 1
  %1088 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1089 = load ptr, ptr %89, align 8
  %1090 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1089, 0
  %1091 = load ptr, ptr %90, align 8
  %1092 = insertvalue { ptr, ptr, ptr, i32 } %1090, ptr %1091, 1
  %1093 = load ptr, ptr %91, align 8
  %1094 = insertvalue { ptr, ptr, ptr, i32 } %1092, ptr %1093, 2
  %1095 = load i32, ptr %92, align 4
  %1096 = insertvalue { ptr, ptr, ptr, i32 } %1094, i32 %1095, 3
  %hash_coef_ptr.i.i186.i648 = getelementptr i8, ptr %1089, i64 8
  %tbl_size_ptr.i.i187.i649 = getelementptr i8, ptr %1089, i64 16
  %offset_tbl_ptr.i.i188.i650 = getelementptr i8, ptr %1089, i64 40
  %hash_coef.i.i189.i651 = load i64, ptr %hash_coef_ptr.i.i186.i648, align 4
  %tbl_size.i.i190.i652 = load i64, ptr %tbl_size_ptr.i.i187.i649, align 4
  %offset_tbl.i.i191.i653 = load ptr, ptr %offset_tbl_ptr.i.i188.i650, align 8
  %product.i.i.i192.i654 = mul i64 %hash_coef.i.i189.i651, -5261542750394134544
  %shifted.i.i.i193.i655 = lshr i64 %product.i.i.i192.i654, 32
  %xored.i.i.i194.i656 = xor i64 %shifted.i.i.i193.i655, %product.i.i.i192.i654
  %hash.i.i.i195.i657 = and i64 %xored.i.i.i194.i656, %tbl_size.i.i190.i652
  %offset_ptr.i.i196.i658 = getelementptr i32, ptr %offset_tbl.i.i191.i653, i64 %hash.i.i.i195.i657
  %offset.i.i197.i659 = load i32, ptr %offset_ptr.i.i196.i658, align 4
  %eq.i200.i660 = icmp eq i32 %1095, %offset.i.i197.i659
  call void @llvm.assume(i1 %eq.i200.i660) #30
  %1097 = load ptr, ptr %result.i, align 8
  %1098 = load ptr, ptr %72, align 8
  %result.i.i661 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1099 = getelementptr i8, ptr %result.i.i661, i64 16
  store ptr %1098, ptr %1099, align 8
  %1100 = getelementptr i8, ptr %result.i.i661, i64 8
  store ptr %1097, ptr %1100, align 8
  %1101 = getelementptr i8, ptr %result.i.i661, i64 24
  store ptr null, ptr %1101, align 8
  %1102 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i661)
  store ptr @Entry, ptr %result.i.i661, align 8
  store ptr @_parameterization_Ptri32, ptr %19, align 8
  store ptr %result.i.i661, ptr %147, align 8
  %1103 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %19)
  %1104 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1089)
  %1105 = sext i32 %1095 to i64
  %1106 = getelementptr ptr, ptr %1089, i64 %1105
  %1107 = getelementptr i8, ptr %1106, i64 128
  %1108 = load ptr, ptr %1107, align 8
  store ptr @i32_typ, ptr %20, align 8
  store ptr @Entry, ptr %148, align 8
  %1109 = call ptr %1108({ ptr, ptr, ptr, i32 } %1096, ptr nonnull %20)
  call void %1109({ ptr, ptr, ptr, i32 } %1096, { ptr, ptr, ptr, i32 } %1096, ptr nonnull %19, i32 %1069, { ptr, i160 } %1087)
  %1110 = icmp ne ptr %.fca.0.extract112.i636, @nil_typ
  %1111 = icmp ne ptr %.fca.0.extract112.i636, null
  %.not140.i662 = and i1 %1110, %1111
  br i1 %.not140.i662, label %.cont.cont.i601, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit668.thread

1112:                                             ; preds = %1038
  %1113 = add i32 %1048, 2127912214
  %1114 = shl i32 %1048, 12
  %1115 = add i32 %1113, %1114
  %1116 = ashr i32 %1115, 19
  %1117 = xor i32 %1115, %1116
  %1118 = xor i32 %1117, -949894596
  %1119 = add i32 %1118, 374761393
  %1120 = shl i32 %1118, 5
  %1121 = add i32 %1119, %1120
  %1122 = add i32 %1121, -744332180
  %1123 = shl i32 %1121, 9
  %1124 = xor i32 %1122, %1123
  %1125 = add i32 %1124, -42973499
  %1126 = shl i32 %1124, 3
  %1127 = add i32 %1125, %1126
  %1128 = ashr i32 %1127, 16
  %1129 = xor i32 %1127, %1128
  %1130 = xor i32 %1129, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %1131 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1132 = load ptr, ptr %104, align 8
  %1133 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1132, 0
  %1134 = load ptr, ptr %105, align 8
  %1135 = insertvalue { ptr, ptr, ptr, i32 } %1133, ptr %1134, 1
  %1136 = load ptr, ptr %106, align 8
  %1137 = insertvalue { ptr, ptr, ptr, i32 } %1135, ptr %1136, 2
  %1138 = load i32, ptr %107, align 4
  %1139 = insertvalue { ptr, ptr, ptr, i32 } %1137, i32 %1138, 3
  %hash_coef_ptr.i.i10.i1230 = getelementptr i8, ptr %1132, i64 8
  %tbl_size_ptr.i.i11.i1231 = getelementptr i8, ptr %1132, i64 16
  %offset_tbl_ptr.i.i12.i1232 = getelementptr i8, ptr %1132, i64 40
  %hash_coef.i.i13.i1233 = load i64, ptr %hash_coef_ptr.i.i10.i1230, align 4
  %tbl_size.i.i14.i1234 = load i64, ptr %tbl_size_ptr.i.i11.i1231, align 4
  %offset_tbl.i.i15.i1235 = load ptr, ptr %offset_tbl_ptr.i.i12.i1232, align 8
  %product.i.i.i16.i1236 = mul i64 %hash_coef.i.i13.i1233, -5261542750394134544
  %shifted.i.i.i17.i1237 = lshr i64 %product.i.i.i16.i1236, 32
  %xored.i.i.i18.i1238 = xor i64 %shifted.i.i.i17.i1237, %product.i.i.i16.i1236
  %hash.i.i.i19.i1239 = and i64 %xored.i.i.i18.i1238, %tbl_size.i.i14.i1234
  %offset_ptr.i.i20.i1240 = getelementptr i32, ptr %offset_tbl.i.i15.i1235, i64 %hash.i.i.i19.i1239
  %offset.i.i21.i1241 = load i32, ptr %offset_ptr.i.i20.i1240, align 4
  %eq.i.i1242 = icmp eq i32 %1138, %offset.i.i21.i1241
  call void @llvm.assume(i1 %eq.i.i1242) #30
  %1140 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1141 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1132)
  %1142 = sext i32 %1138 to i64
  %1143 = getelementptr ptr, ptr %1132, i64 %1142
  %1144 = getelementptr i8, ptr %1143, i64 64
  %1145 = load ptr, ptr %1144, align 8
  %1146 = call ptr %1145({ ptr, ptr, ptr, i32 } %1139, ptr nonnull %2)
  %1147 = call i32 %1146({ ptr, ptr, ptr, i32 } %1139, { ptr, ptr, ptr, i32 } %1139, ptr nonnull %2)
  %1148 = add i32 %1147, -1
  %1149 = and i32 %1148, %1130
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %1150 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1151 = load ptr, ptr %104, align 8
  %1152 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1151, 0
  %1153 = load ptr, ptr %105, align 8
  %1154 = insertvalue { ptr, ptr, ptr, i32 } %1152, ptr %1153, 1
  %1155 = load ptr, ptr %106, align 8
  %1156 = insertvalue { ptr, ptr, ptr, i32 } %1154, ptr %1155, 2
  %1157 = load i32, ptr %107, align 4
  %1158 = insertvalue { ptr, ptr, ptr, i32 } %1156, i32 %1157, 3
  %hash_coef_ptr.i.i202.i555 = getelementptr i8, ptr %1151, i64 8
  %tbl_size_ptr.i.i203.i556 = getelementptr i8, ptr %1151, i64 16
  %offset_tbl_ptr.i.i204.i557 = getelementptr i8, ptr %1151, i64 40
  %hash_coef.i.i205.i558 = load i64, ptr %hash_coef_ptr.i.i202.i555, align 4
  %tbl_size.i.i206.i559 = load i64, ptr %tbl_size_ptr.i.i203.i556, align 4
  %offset_tbl.i.i207.i560 = load ptr, ptr %offset_tbl_ptr.i.i204.i557, align 8
  %product.i.i.i208.i561 = mul i64 %hash_coef.i.i205.i558, -5261542750394134544
  %shifted.i.i.i209.i562 = lshr i64 %product.i.i.i208.i561, 32
  %xored.i.i.i210.i563 = xor i64 %shifted.i.i.i209.i562, %product.i.i.i208.i561
  %hash.i.i.i211.i564 = and i64 %xored.i.i.i210.i563, %tbl_size.i.i206.i559
  %offset_ptr.i.i212.i565 = getelementptr i32, ptr %offset_tbl.i.i207.i560, i64 %hash.i.i.i211.i564
  %offset.i.i213.i566 = load i32, ptr %offset_ptr.i.i212.i565, align 4
  %eq.i216.i567 = icmp eq i32 %1157, %offset.i.i213.i566
  call void @llvm.assume(i1 %eq.i216.i567) #30
  store ptr @_parameterization_Ptri32, ptr %25, align 8
  %1159 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %25)
  %1160 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1151)
  %1161 = sext i32 %1157 to i64
  %1162 = getelementptr ptr, ptr %1151, i64 %1161
  %1163 = getelementptr i8, ptr %1162, i64 120
  %1164 = load ptr, ptr %1163, align 8
  store ptr @i32_typ, ptr %26, align 8
  %1165 = call ptr %1164({ ptr, ptr, ptr, i32 } %1158, ptr nonnull %26)
  %1166 = call { ptr, i160 } %1165({ ptr, ptr, ptr, i32 } %1158, { ptr, ptr, ptr, i32 } %1158, ptr nonnull %25, i32 %1149)
  %.fca.0.extract87.i568 = extractvalue { ptr, i160 } %1166, 0
  %.sroa.3.0.insert.ext.i569 = zext i32 %offset.i.i260.i618920 to i160
  %.sroa.3.0.insert.shift.i570 = shl nuw i160 %.sroa.3.0.insert.ext.i569, 128
  %.sroa.2.0.insert.ext.i571 = zext i64 %1041 to i160
  %.sroa.2.0.insert.shift.i572 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i571, 64
  %.sroa.2.0.insert.insert.i573 = or disjoint i160 %.sroa.2.0.insert.shift.i572, %.sroa.3.0.insert.shift.i570
  %.sroa.0.0.insert.ext.i574 = zext i64 %1040 to i160
  %.sroa.0.0.insert.insert.i575 = or disjoint i160 %.sroa.2.0.insert.insert.i573, %.sroa.0.0.insert.ext.i574
  %1167 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0.0.insert.insert.i575, 1
  %1168 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1169 = load ptr, ptr %104, align 8
  %1170 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1169, 0
  %1171 = load ptr, ptr %105, align 8
  %1172 = insertvalue { ptr, ptr, ptr, i32 } %1170, ptr %1171, 1
  %1173 = load ptr, ptr %106, align 8
  %1174 = insertvalue { ptr, ptr, ptr, i32 } %1172, ptr %1173, 2
  %1175 = load i32, ptr %107, align 4
  %1176 = insertvalue { ptr, ptr, ptr, i32 } %1174, i32 %1175, 3
  %hash_coef_ptr.i.i218.i580 = getelementptr i8, ptr %1169, i64 8
  %tbl_size_ptr.i.i219.i581 = getelementptr i8, ptr %1169, i64 16
  %offset_tbl_ptr.i.i220.i582 = getelementptr i8, ptr %1169, i64 40
  %hash_coef.i.i221.i583 = load i64, ptr %hash_coef_ptr.i.i218.i580, align 4
  %tbl_size.i.i222.i584 = load i64, ptr %tbl_size_ptr.i.i219.i581, align 4
  %offset_tbl.i.i223.i585 = load ptr, ptr %offset_tbl_ptr.i.i220.i582, align 8
  %product.i.i.i224.i586 = mul i64 %hash_coef.i.i221.i583, -5261542750394134544
  %shifted.i.i.i225.i587 = lshr i64 %product.i.i.i224.i586, 32
  %xored.i.i.i226.i588 = xor i64 %shifted.i.i.i225.i587, %product.i.i.i224.i586
  %hash.i.i.i227.i589 = and i64 %xored.i.i.i226.i588, %tbl_size.i.i222.i584
  %offset_ptr.i.i228.i590 = getelementptr i32, ptr %offset_tbl.i.i223.i585, i64 %hash.i.i.i227.i589
  %offset.i.i229.i591 = load i32, ptr %offset_ptr.i.i228.i590, align 4
  %eq.i232.i592 = icmp eq i32 %1175, %offset.i.i229.i591
  call void @llvm.assume(i1 %eq.i232.i592) #30
  %1177 = load ptr, ptr %result.i, align 8
  %1178 = load ptr, ptr %72, align 8
  %result.i233.i593 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1179 = getelementptr i8, ptr %result.i233.i593, i64 16
  store ptr %1178, ptr %1179, align 8
  %1180 = getelementptr i8, ptr %result.i233.i593, i64 8
  store ptr %1177, ptr %1180, align 8
  %1181 = getelementptr i8, ptr %result.i233.i593, i64 24
  store ptr null, ptr %1181, align 8
  %1182 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i233.i593)
  store ptr @Entry, ptr %result.i233.i593, align 8
  store ptr @_parameterization_Ptri32, ptr %27, align 8
  store ptr %result.i233.i593, ptr %145, align 8
  %1183 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %27)
  %1184 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1169)
  %1185 = sext i32 %1175 to i64
  %1186 = getelementptr ptr, ptr %1169, i64 %1185
  %1187 = getelementptr i8, ptr %1186, i64 128
  %1188 = load ptr, ptr %1187, align 8
  store ptr @i32_typ, ptr %28, align 8
  store ptr @Entry, ptr %146, align 8
  %1189 = call ptr %1188({ ptr, ptr, ptr, i32 } %1176, ptr nonnull %28)
  call void %1189({ ptr, ptr, ptr, i32 } %1176, { ptr, ptr, ptr, i32 } %1176, ptr nonnull %27, i32 %1149, { ptr, i160 } %1167)
  %1190 = icmp ne ptr %.fca.0.extract87.i568, @nil_typ
  %1191 = icmp ne ptr %.fca.0.extract87.i568, null
  %.not138.i594 = and i1 %1190, %1191
  br i1 %.not138.i594, label %.cont.cont.i601, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit668.thread

.cont.cont.i601:                                  ; preds = %1112, %1050
  %.sink928 = phi { ptr, i160 } [ %1086, %1050 ], [ %1166, %1112 ]
  %1192 = phi i32 [ 2, %1050 ], [ 1, %1112 ]
  %vptr.i248.sroa.speculated.i604 = phi ptr [ %.fca.0.extract112.i636, %1050 ], [ %.fca.0.extract87.i568, %1112 ]
  %.fca.1.extract89.i597 = extractvalue { ptr, i160 } %.sink928, 1
  %.sroa.3407.sroa.4.0.extract.shift.i598 = lshr i160 %.fca.1.extract89.i597, 64
  %1193 = trunc i160 %.sroa.3407.sroa.4.0.extract.shift.i598 to i64
  %1194 = insertelement <2 x i64> poison, i64 %1193, i64 0
  %1195 = trunc i160 %.fca.1.extract89.i597 to i64
  %1196 = insertelement <2 x i64> %1194, i64 %1195, i64 1
  %hash_coef_ptr.i.i249.i607 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i604, i64 8
  %tbl_size_ptr.i.i250.i608 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i604, i64 16
  %offset_tbl_ptr.i.i251.i609 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i604, i64 40
  %hash_coef.i.i252.i610 = load i64, ptr %hash_coef_ptr.i.i249.i607, align 4
  %tbl_size.i.i253.i611 = load i64, ptr %tbl_size_ptr.i.i250.i608, align 4
  %offset_tbl.i.i254.i612 = load ptr, ptr %offset_tbl_ptr.i.i251.i609, align 8
  %product.i.i.i255.i613 = mul i64 %hash_coef.i.i252.i610, 4015701072841558310
  %shifted.i.i.i256.i614 = lshr i64 %product.i.i.i255.i613, 32
  %xored.i.i.i257.i615 = xor i64 %shifted.i.i.i256.i614, %product.i.i.i255.i613
  %hash.i.i.i258.i616 = and i64 %xored.i.i.i257.i615, %tbl_size.i.i253.i611
  %offset_ptr.i.i259.i617 = getelementptr i32, ptr %offset_tbl.i.i254.i612, i64 %hash.i.i.i258.i616
  %offset.i.i260.i618 = load i32, ptr %offset_ptr.i.i259.i617, align 4
  %1197 = add nuw nsw i32 %.reg2mem193.0677.i550, 1
  %1198 = load i32, ptr %110, align 4
  %1199 = icmp slt i32 %1197, %1198
  br i1 %1199, label %1038, label %._crit_edge3.1.i

HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit668.thread: ; preds = %1050, %1112
  %1200 = phi ptr [ %29, %1112 ], [ %21, %1050 ]
  %1201 = phi ptr [ %30, %1112 ], [ %22, %1050 ]
  %1202 = phi ptr [ %31, %1112 ], [ %23, %1050 ]
  %1203 = phi ptr [ %.sroa.0.i512, %1112 ], [ %.sroa.0680.i510, %1050 ]
  %1204 = phi ptr [ %32, %1112 ], [ %24, %1050 ]
  %1205 = load i32, ptr %108, align 4
  store i32 %1205, ptr %1200, align 4
  store i32 1, ptr %1201, align 4
  %1206 = add i32 %1205, 1
  store i32 %1206, ptr %1202, align 4
  %1207 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  store i32 %1206, ptr %108, align 4
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %1204, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %1203, align 8
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %17)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %18)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %19)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %20)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %21)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %22)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %23)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i510)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %24)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %25)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %26)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %27)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %28)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %29)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %30)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %31)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i512)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %32)
  br label %HashMap_insert_keyK_valueV.exit

._crit_edge3.1.i:                                 ; preds = %.cont.cont.i601, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1182
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %17)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %18)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %19)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %20)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %21)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %22)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %23)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i510)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %24)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %25)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %26)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %27)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %28)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %29)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %30)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %31)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i512)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %32)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %15)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %16)
  %1208 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1209 = load ptr, ptr %89, align 8
  %1210 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1209, 0
  %1211 = load ptr, ptr %90, align 8
  %1212 = insertvalue { ptr, ptr, ptr, i32 } %1210, ptr %1211, 1
  %1213 = load ptr, ptr %91, align 8
  %1214 = insertvalue { ptr, ptr, ptr, i32 } %1212, ptr %1213, 2
  %1215 = load i32, ptr %92, align 4
  %1216 = insertvalue { ptr, ptr, ptr, i32 } %1214, i32 %1215, 3
  %hash_coef_ptr.i.i18.i687 = getelementptr i8, ptr %1209, i64 8
  %tbl_size_ptr.i.i19.i688 = getelementptr i8, ptr %1209, i64 16
  %offset_tbl_ptr.i.i20.i689 = getelementptr i8, ptr %1209, i64 40
  %hash_coef.i.i21.i690 = load i64, ptr %hash_coef_ptr.i.i18.i687, align 4
  %tbl_size.i.i22.i691 = load i64, ptr %tbl_size_ptr.i.i19.i688, align 4
  %offset_tbl.i.i23.i692 = load ptr, ptr %offset_tbl_ptr.i.i20.i689, align 8
  %product.i.i.i24.i693 = mul i64 %hash_coef.i.i21.i690, -5261542750394134544
  %shifted.i.i.i25.i694 = lshr i64 %product.i.i.i24.i693, 32
  %xored.i.i.i26.i695 = xor i64 %shifted.i.i.i25.i694, %product.i.i.i24.i693
  %hash.i.i.i27.i696 = and i64 %xored.i.i.i26.i695, %tbl_size.i.i22.i691
  %offset_ptr.i.i28.i697 = getelementptr i32, ptr %offset_tbl.i.i23.i692, i64 %hash.i.i.i27.i696
  %offset.i.i29.i698 = load i32, ptr %offset_ptr.i.i28.i697, align 4
  %eq.i.i699 = icmp eq i32 %1215, %offset.i.i29.i698
  call void @llvm.assume(i1 %eq.i.i699) #30
  %1217 = load ptr, ptr %104, align 8
  %1218 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1217, 0
  %1219 = load ptr, ptr %105, align 8
  %1220 = insertvalue { ptr, ptr, ptr, i32 } %1218, ptr %1219, 1
  %1221 = load ptr, ptr %106, align 8
  %1222 = insertvalue { ptr, ptr, ptr, i32 } %1220, ptr %1221, 2
  %1223 = load i32, ptr %107, align 4
  %hash_coef_ptr.i.i46.i704 = getelementptr i8, ptr %1217, i64 8
  %tbl_size_ptr.i.i47.i705 = getelementptr i8, ptr %1217, i64 16
  %offset_tbl_ptr.i.i48.i706 = getelementptr i8, ptr %1217, i64 40
  %hash_coef.i.i49.i707 = load i64, ptr %hash_coef_ptr.i.i46.i704, align 4
  %tbl_size.i.i50.i708 = load i64, ptr %tbl_size_ptr.i.i47.i705, align 4
  %offset_tbl.i.i51.i709 = load ptr, ptr %offset_tbl_ptr.i.i48.i706, align 8
  %product.i.i.i52.i710 = mul i64 %hash_coef.i.i49.i707, -5261542750394134544
  %shifted.i.i.i53.i711 = lshr i64 %product.i.i.i52.i710, 32
  %xored.i.i.i54.i712 = xor i64 %shifted.i.i.i53.i711, %product.i.i.i52.i710
  %hash.i.i.i55.i713 = and i64 %xored.i.i.i54.i712, %tbl_size.i.i50.i708
  %offset_ptr.i.i56.i714 = getelementptr i32, ptr %offset_tbl.i.i51.i709, i64 %hash.i.i.i55.i713
  %offset.i.i57.i715 = load i32, ptr %offset_ptr.i.i56.i714, align 4
  %eq.i60.i716 = icmp eq i32 %1223, %offset.i.i57.i715
  call void @llvm.assume(i1 %eq.i60.i716) #30
  %1224 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1225 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1209)
  %1226 = sext i32 %1215 to i64
  %1227 = getelementptr ptr, ptr %1209, i64 %1226
  %1228 = getelementptr i8, ptr %1227, i64 64
  %1229 = load ptr, ptr %1228, align 8
  %1230 = call ptr %1229({ ptr, ptr, ptr, i32 } %1216, ptr nonnull %2)
  %1231 = call i32 %1230({ ptr, ptr, ptr, i32 } %1216, { ptr, ptr, ptr, i32 } %1216, ptr nonnull %2)
  %1232 = shl i32 %1231, 1
  %1233 = call i32 @llvm.smax.i32(i32 %1232, i32 16)
  %1234 = load ptr, ptr %result.i, align 8
  %1235 = load ptr, ptr %72, align 8
  %result.i.i717 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1236 = getelementptr i8, ptr %result.i.i717, i64 16
  store ptr @_parameterization_Nil, ptr %1236, align 8
  %result.i75.i718 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1237 = getelementptr i8, ptr %result.i75.i718, i64 16
  store ptr %1235, ptr %1237, align 8
  %1238 = getelementptr i8, ptr %result.i75.i718, i64 8
  store ptr %1234, ptr %1238, align 8
  %1239 = getelementptr i8, ptr %result.i75.i718, i64 24
  store ptr null, ptr %1239, align 8
  %1240 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i75.i718)
  store ptr @Entry, ptr %result.i75.i718, align 8
  %1241 = getelementptr i8, ptr %result.i.i717, i64 8
  store ptr %result.i75.i718, ptr %1241, align 8
  %1242 = getelementptr i8, ptr %result.i.i717, i64 24
  store ptr null, ptr %1242, align 8
  %1243 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i717)
  store ptr @union_typ, ptr %result.i.i717, align 8
  %result.i76.i719 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i717, ptr %result.i76.i719, align 8
  %1244 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i76.i719)
  store ptr @Array, ptr %15, align 8
  store ptr %result.i76.i719, ptr %149, align 8
  store i32 9, ptr %150, align 8
  %1245 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %15)
  %1246 = getelementptr i8, ptr %result.i76.i719, i64 16
  store i32 %1233, ptr %1246, align 4
  %1247 = getelementptr i8, ptr %result.i76.i719, i64 20
  store i32 %1233, ptr %1247, align 4
  %1248 = zext nneg i32 %1233 to i64
  %1249 = shl nuw nsw i64 %1248, 5
  %result.i.i.i720 = call noalias ptr @bump_malloc_inner(i64 noundef %1249, ptr nonnull @current_ptr) #29
  %1250 = getelementptr i8, ptr %result.i76.i719, i64 8
  store ptr %result.i.i.i720, ptr %1250, align 8
  %1251 = load ptr, ptr %151, align 8
  store ptr @Array, ptr %89, align 8
  store ptr %result.i76.i719, ptr %90, align 8
  store ptr %1251, ptr %91, align 8
  store i32 9, ptr %92, align 4
  %result.i91.i733 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1252 = getelementptr i8, ptr %result.i91.i733, i64 16
  store ptr @_parameterization_Nil, ptr %1252, align 8
  %result.i92.i734 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1253 = getelementptr i8, ptr %result.i92.i734, i64 16
  store ptr %1235, ptr %1253, align 8
  %1254 = getelementptr i8, ptr %result.i92.i734, i64 8
  store ptr %1234, ptr %1254, align 8
  %1255 = getelementptr i8, ptr %result.i92.i734, i64 24
  store ptr null, ptr %1255, align 8
  %1256 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i92.i734)
  store ptr @Entry, ptr %result.i92.i734, align 8
  %1257 = getelementptr i8, ptr %result.i91.i733, i64 8
  store ptr %result.i92.i734, ptr %1257, align 8
  %1258 = getelementptr i8, ptr %result.i91.i733, i64 24
  store ptr null, ptr %1258, align 8
  %1259 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i91.i733)
  store ptr @union_typ, ptr %result.i91.i733, align 8
  %result.i93.i735 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i91.i733, ptr %result.i93.i735, align 8
  %1260 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i93.i735)
  store ptr @Array, ptr %16, align 8
  store ptr %result.i93.i735, ptr %152, align 8
  store i32 9, ptr %153, align 8
  %1261 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %16)
  %1262 = getelementptr i8, ptr %result.i93.i735, i64 16
  store i32 %1233, ptr %1262, align 4
  %1263 = getelementptr i8, ptr %result.i93.i735, i64 20
  store i32 %1233, ptr %1263, align 4
  %result.i.i234.i736 = call noalias ptr @bump_malloc_inner(i64 noundef %1249, ptr nonnull @current_ptr) #29
  %1264 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %1265 = getelementptr i8, ptr %result.i93.i735, i64 8
  store ptr %result.i.i234.i736, ptr %1265, align 8
  %1266 = load ptr, ptr %154, align 8
  store ptr @Array, ptr %104, align 8
  store ptr %result.i93.i735, ptr %105, align 8
  store ptr %1266, ptr %106, align 8
  store i32 9, ptr %107, align 4
  store i32 0, ptr %108, align 4
  %1267 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6)
  %1268 = icmp sgt i32 %1231, 0
  br i1 %1268, label %.lr.ph.i1245, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1348.critedge

.lr.ph.i1245:                                     ; preds = %._crit_edge3.1.i
  %invariant.gep.i1246 = getelementptr i8, ptr %1209, i64 120
  %offset_tbl.i.i24.i1248 = load ptr, ptr %offset_tbl_ptr.i.i20.i689, align 8
  %hash_coef.i.i22.i1250 = load i64, ptr %hash_coef_ptr.i.i18.i687, align 4
  %product.i.i.i25.i1251 = mul i64 %hash_coef.i.i22.i1250, -5261542750394134544
  %shifted.i.i.i26.i1252 = lshr i64 %product.i.i.i25.i1251, 32
  %xored.i.i.i27.i1253 = xor i64 %shifted.i.i.i26.i1252, %product.i.i.i25.i1251
  %tbl_size.i.i23.i1255 = load i64, ptr %tbl_size_ptr.i.i19.i688, align 4
  %hash.i.i.i28.i1256 = and i64 %xored.i.i.i27.i1253, %tbl_size.i.i23.i1255
  %offset_ptr.i.i29.i1257 = getelementptr i32, ptr %offset_tbl.i.i24.i1248, i64 %hash.i.i.i28.i1256
  %offset.i.i30.i1258 = load i32, ptr %offset_ptr.i.i29.i1257, align 4
  %1269 = insertvalue { ptr, ptr, ptr, i32 } %1214, i32 %offset.i.i30.i1258, 3
  %1270 = sext i32 %offset.i.i30.i1258 to i64
  %gep.i1273 = getelementptr ptr, ptr %invariant.gep.i1246, i64 %1270
  %1271 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %1272

1272:                                             ; preds = %._crit_edge1.i1277, %.lr.ph.i1245
  %.reg2mem13.079.i1274 = phi i32 [ 0, %.lr.ph.i1245 ], [ %1289, %._crit_edge1.i1277 ]
  store ptr @_parameterization_Ptri32, ptr %5, align 8
  %1273 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %5)
  %1274 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %1209)
  %1275 = load ptr, ptr %gep.i1273, align 8
  store ptr @i32_typ, ptr %6, align 8
  %1276 = call ptr %1275({ ptr, ptr, ptr, i32 } %1269, ptr nonnull %6)
  %1277 = call { ptr, i160 } %1276({ ptr, ptr, ptr, i32 } %1269, { ptr, ptr, ptr, i32 } %1269, ptr nonnull %5, i32 %.reg2mem13.079.i1274)
  %.fca.0.extract11.i1275 = extractvalue { ptr, i160 } %1277, 0
  %1278 = icmp ne ptr %.fca.0.extract11.i1275, @nil_typ
  %1279 = icmp ne ptr %.fca.0.extract11.i1275, null
  %.not17.i1276 = and i1 %1278, %1279
  br i1 %.not17.i1276, label %1280, label %._crit_edge1.i1277

1280:                                             ; preds = %1272
  %.fca.1.extract13.i1278 = extractvalue { ptr, i160 } %1277, 1
  %.sroa.375.8.extract.trunc.i1279 = trunc i160 %.fca.1.extract13.i1278 to i64
  %1281 = inttoptr i64 %.sroa.375.8.extract.trunc.i1279 to ptr
  %.sroa.576.8.extract.shift.i1280 = lshr i160 %.fca.1.extract13.i1278, 64
  %.sroa.576.8.extract.trunc.i1281 = trunc i160 %.sroa.576.8.extract.shift.i1280 to i64
  %1282 = inttoptr i64 %.sroa.576.8.extract.trunc.i1281 to ptr
  %hash_coef_ptr.i.i33.i1282 = getelementptr i8, ptr %.fca.0.extract11.i1275, i64 8
  %tbl_size_ptr.i.i34.i1283 = getelementptr i8, ptr %.fca.0.extract11.i1275, i64 16
  %offset_tbl_ptr.i.i35.i1284 = getelementptr i8, ptr %.fca.0.extract11.i1275, i64 40
  %hash_coef.i.i36.i1285 = load i64, ptr %hash_coef_ptr.i.i33.i1282, align 4
  %tbl_size.i.i37.i1286 = load i64, ptr %tbl_size_ptr.i.i34.i1283, align 4
  %offset_tbl.i.i38.i1287 = load ptr, ptr %offset_tbl_ptr.i.i35.i1284, align 8
  %product.i.i.i39.i1288 = mul i64 %hash_coef.i.i36.i1285, 4015701072841558310
  %shifted.i.i.i40.i1289 = lshr i64 %product.i.i.i39.i1288, 32
  %xored.i.i.i41.i1290 = xor i64 %shifted.i.i.i40.i1289, %product.i.i.i39.i1288
  %hash.i.i.i42.i1291 = and i64 %xored.i.i.i41.i1290, %tbl_size.i.i37.i1286
  %offset_ptr.i.i43.i1292 = getelementptr i32, ptr %offset_tbl.i.i38.i1287, i64 %hash.i.i.i42.i1291
  %offset.i.i58.i1293 = load i32, ptr %offset_ptr.i.i43.i1292, align 4
  %1283 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i1275, 0
  %1284 = insertvalue { ptr, ptr, ptr, i32 } %1283, ptr %1281, 1
  %1285 = insertvalue { ptr, ptr, ptr, i32 } %1284, ptr %1282, 2
  %1286 = insertvalue { ptr, ptr, ptr, i32 } %1285, i32 %offset.i.i58.i1293, 3
  %1287 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1288 = call { ptr, i160 } @HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %157, { ptr, ptr, ptr, i32 } poison, ptr nonnull poison, { ptr, ptr, ptr, i32 } %1286)
  br label %._crit_edge1.i1277

._crit_edge1.i1277:                               ; preds = %1280, %1272
  %1289 = add nuw nsw i32 %.reg2mem13.079.i1274, 1
  %1290 = icmp slt i32 %1289, %1231
  br i1 %1290, label %1272, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1295

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1295: ; preds = %._crit_edge1.i1277
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6)
  %1291 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %invariant.gep.i1299 = getelementptr i8, ptr %1217, i64 120
  %offset_tbl.i.i24.i1301 = load ptr, ptr %offset_tbl_ptr.i.i48.i706, align 8
  %hash_coef.i.i22.i1303 = load i64, ptr %hash_coef_ptr.i.i46.i704, align 4
  %product.i.i.i25.i1304 = mul i64 %hash_coef.i.i22.i1303, -5261542750394134544
  %shifted.i.i.i26.i1305 = lshr i64 %product.i.i.i25.i1304, 32
  %xored.i.i.i27.i1306 = xor i64 %shifted.i.i.i26.i1305, %product.i.i.i25.i1304
  %tbl_size.i.i23.i1308 = load i64, ptr %tbl_size_ptr.i.i47.i705, align 4
  %hash.i.i.i28.i1309 = and i64 %xored.i.i.i27.i1306, %tbl_size.i.i23.i1308
  %offset_ptr.i.i29.i1310 = getelementptr i32, ptr %offset_tbl.i.i24.i1301, i64 %hash.i.i.i28.i1309
  %offset.i.i30.i1311 = load i32, ptr %offset_ptr.i.i29.i1310, align 4
  %1292 = insertvalue { ptr, ptr, ptr, i32 } %1222, i32 %offset.i.i30.i1311, 3
  %1293 = sext i32 %offset.i.i30.i1311 to i64
  %gep.i1326 = getelementptr ptr, ptr %invariant.gep.i1299, i64 %1293
  %1294 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %1295

1295:                                             ; preds = %._crit_edge1.i1330, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1295
  %.reg2mem13.079.i1327 = phi i32 [ 0, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1295 ], [ %1312, %._crit_edge1.i1330 ]
  store ptr @_parameterization_Ptri32, ptr %3, align 8
  %1296 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %3)
  %1297 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %1217)
  %1298 = load ptr, ptr %gep.i1326, align 8
  store ptr @i32_typ, ptr %4, align 8
  %1299 = call ptr %1298({ ptr, ptr, ptr, i32 } %1292, ptr nonnull %4)
  %1300 = call { ptr, i160 } %1299({ ptr, ptr, ptr, i32 } %1292, { ptr, ptr, ptr, i32 } %1292, ptr nonnull %3, i32 %.reg2mem13.079.i1327)
  %.fca.0.extract11.i1328 = extractvalue { ptr, i160 } %1300, 0
  %1301 = icmp ne ptr %.fca.0.extract11.i1328, @nil_typ
  %1302 = icmp ne ptr %.fca.0.extract11.i1328, null
  %.not17.i1329 = and i1 %1301, %1302
  br i1 %.not17.i1329, label %1303, label %._crit_edge1.i1330

1303:                                             ; preds = %1295
  %.fca.1.extract13.i1331 = extractvalue { ptr, i160 } %1300, 1
  %.sroa.375.8.extract.trunc.i1332 = trunc i160 %.fca.1.extract13.i1331 to i64
  %1304 = inttoptr i64 %.sroa.375.8.extract.trunc.i1332 to ptr
  %.sroa.576.8.extract.shift.i1333 = lshr i160 %.fca.1.extract13.i1331, 64
  %.sroa.576.8.extract.trunc.i1334 = trunc i160 %.sroa.576.8.extract.shift.i1333 to i64
  %1305 = inttoptr i64 %.sroa.576.8.extract.trunc.i1334 to ptr
  %hash_coef_ptr.i.i33.i1335 = getelementptr i8, ptr %.fca.0.extract11.i1328, i64 8
  %tbl_size_ptr.i.i34.i1336 = getelementptr i8, ptr %.fca.0.extract11.i1328, i64 16
  %offset_tbl_ptr.i.i35.i1337 = getelementptr i8, ptr %.fca.0.extract11.i1328, i64 40
  %hash_coef.i.i36.i1338 = load i64, ptr %hash_coef_ptr.i.i33.i1335, align 4
  %tbl_size.i.i37.i1339 = load i64, ptr %tbl_size_ptr.i.i34.i1336, align 4
  %offset_tbl.i.i38.i1340 = load ptr, ptr %offset_tbl_ptr.i.i35.i1337, align 8
  %product.i.i.i39.i1341 = mul i64 %hash_coef.i.i36.i1338, 4015701072841558310
  %shifted.i.i.i40.i1342 = lshr i64 %product.i.i.i39.i1341, 32
  %xored.i.i.i41.i1343 = xor i64 %shifted.i.i.i40.i1342, %product.i.i.i39.i1341
  %hash.i.i.i42.i1344 = and i64 %xored.i.i.i41.i1343, %tbl_size.i.i37.i1339
  %offset_ptr.i.i43.i1345 = getelementptr i32, ptr %offset_tbl.i.i38.i1340, i64 %hash.i.i.i42.i1344
  %offset.i.i58.i1346 = load i32, ptr %offset_ptr.i.i43.i1345, align 4
  %1306 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i1328, 0
  %1307 = insertvalue { ptr, ptr, ptr, i32 } %1306, ptr %1304, 1
  %1308 = insertvalue { ptr, ptr, ptr, i32 } %1307, ptr %1305, 2
  %1309 = insertvalue { ptr, ptr, ptr, i32 } %1308, i32 %offset.i.i58.i1346, 3
  %1310 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1311 = call { ptr, i160 } @HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %157, { ptr, ptr, ptr, i32 } poison, ptr nonnull poison, { ptr, ptr, ptr, i32 } %1309)
  br label %._crit_edge1.i1330

._crit_edge1.i1330:                               ; preds = %1303, %1295
  %1312 = add nuw nsw i32 %.reg2mem13.079.i1327, 1
  %1313 = icmp slt i32 %1312, %1231
  br i1 %1313, label %1295, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1348

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1348.critedge: ; preds = %._crit_edge3.1.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6)
  %1314 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  br label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1348

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1348: ; preds = %._crit_edge1.i1330, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1348.critedge
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %15)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %16)
  br label %HashMap_insert_keyK_valueV.exit

HashMap_insert_keyK_valueV.exit:                  ; preds = %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit668.thread, %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit.thread, %.thread525.i, %.thread528.i, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1348
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %58)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %59)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %60)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %61)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %62)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %63)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %64)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %65)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %66)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %67)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %68)
  %1315 = icmp slt i32 %158, %0
  br i1 %1315, label %._crit_edge, label %._crit_edge1

._crit_edge1:                                     ; preds = %HashMap_insert_keyK_valueV.exit
  %1316 = call i64 @clock()
  %1317 = add nsw i32 %0, -1
  %.sroa.017.0.insert.ext = zext nneg i32 %1317 to i160
  %1318 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.017.0.insert.ext, 1
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0271.i)
  call void @llvm.lifetime.start.p0(i64 20, ptr nonnull %.sroa.1.i)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i)
  call void @llvm.lifetime.start.p0(i64 20, ptr nonnull %.sroa.2.i)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %54)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %55)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0123.i)
  call void @llvm.lifetime.start.p0(i64 20, ptr nonnull %.sroa.2124.i)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0115.i)
  call void @llvm.lifetime.start.p0(i64 20, ptr nonnull %.sroa.2116.i)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %56)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %57)
  %1319 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1320 = load ptr, ptr %77, align 8
  %1321 = call i32 %1320({ ptr, i160 } %1318)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %1322 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1323 = load ptr, ptr %89, align 8
  %1324 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1323, 0
  %1325 = load ptr, ptr %90, align 8
  %1326 = insertvalue { ptr, ptr, ptr, i32 } %1324, ptr %1325, 1
  %1327 = load ptr, ptr %91, align 8
  %1328 = insertvalue { ptr, ptr, ptr, i32 } %1326, ptr %1327, 2
  %1329 = load i32, ptr %92, align 4
  %1330 = insertvalue { ptr, ptr, ptr, i32 } %1328, i32 %1329, 3
  %hash_coef_ptr.i.i10.i811 = getelementptr i8, ptr %1323, i64 8
  %tbl_size_ptr.i.i11.i812 = getelementptr i8, ptr %1323, i64 16
  %offset_tbl_ptr.i.i12.i813 = getelementptr i8, ptr %1323, i64 40
  %hash_coef.i.i13.i814 = load i64, ptr %hash_coef_ptr.i.i10.i811, align 4
  %tbl_size.i.i14.i815 = load i64, ptr %tbl_size_ptr.i.i11.i812, align 4
  %offset_tbl.i.i15.i816 = load ptr, ptr %offset_tbl_ptr.i.i12.i813, align 8
  %product.i.i.i16.i817 = mul i64 %hash_coef.i.i13.i814, -5261542750394134544
  %shifted.i.i.i17.i818 = lshr i64 %product.i.i.i16.i817, 32
  %xored.i.i.i18.i819 = xor i64 %shifted.i.i.i17.i818, %product.i.i.i16.i817
  %hash.i.i.i19.i820 = and i64 %xored.i.i.i18.i819, %tbl_size.i.i14.i815
  %offset_ptr.i.i20.i821 = getelementptr i32, ptr %offset_tbl.i.i15.i816, i64 %hash.i.i.i19.i820
  %offset.i.i21.i822 = load i32, ptr %offset_ptr.i.i20.i821, align 4
  %eq.i.i823 = icmp eq i32 %1329, %offset.i.i21.i822
  call void @llvm.assume(i1 %eq.i.i823) #30
  %1331 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1332 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1323)
  %1333 = sext i32 %1329 to i64
  %1334 = getelementptr ptr, ptr %1323, i64 %1333
  %1335 = getelementptr i8, ptr %1334, i64 64
  %1336 = load ptr, ptr %1335, align 8
  %1337 = call ptr %1336({ ptr, ptr, ptr, i32 } %1330, ptr nonnull %2)
  %1338 = call i32 %1337({ ptr, ptr, ptr, i32 } %1330, { ptr, ptr, ptr, i32 } %1330, ptr nonnull %2)
  %1339 = add i32 %1338, -1
  %1340 = and i32 %1339, %1321
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %1341 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1342 = load ptr, ptr %89, align 8
  %1343 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1342, 0
  %1344 = load ptr, ptr %90, align 8
  %1345 = insertvalue { ptr, ptr, ptr, i32 } %1343, ptr %1344, 1
  %1346 = load ptr, ptr %91, align 8
  %1347 = insertvalue { ptr, ptr, ptr, i32 } %1345, ptr %1346, 2
  %1348 = load i32, ptr %92, align 4
  %1349 = insertvalue { ptr, ptr, ptr, i32 } %1347, i32 %1348, 3
  %hash_coef_ptr.i.i130.i = getelementptr i8, ptr %1342, i64 8
  %tbl_size_ptr.i.i131.i = getelementptr i8, ptr %1342, i64 16
  %offset_tbl_ptr.i.i132.i = getelementptr i8, ptr %1342, i64 40
  %hash_coef.i.i133.i = load i64, ptr %hash_coef_ptr.i.i130.i, align 4
  %tbl_size.i.i134.i = load i64, ptr %tbl_size_ptr.i.i131.i, align 4
  %offset_tbl.i.i135.i = load ptr, ptr %offset_tbl_ptr.i.i132.i, align 8
  %product.i.i.i136.i = mul i64 %hash_coef.i.i133.i, -5261542750394134544
  %shifted.i.i.i137.i = lshr i64 %product.i.i.i136.i, 32
  %xored.i.i.i138.i = xor i64 %shifted.i.i.i137.i, %product.i.i.i136.i
  %hash.i.i.i139.i = and i64 %xored.i.i.i138.i, %tbl_size.i.i134.i
  %offset_ptr.i.i140.i = getelementptr i32, ptr %offset_tbl.i.i135.i, i64 %hash.i.i.i139.i
  %offset.i.i141.i = load i32, ptr %offset_ptr.i.i140.i, align 4
  %eq.i.i168 = icmp eq i32 %1348, %offset.i.i141.i
  call void @llvm.assume(i1 %eq.i.i168) #30
  store ptr @_parameterization_Ptri32, ptr %56, align 8
  %1350 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %56)
  %1351 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1342)
  %1352 = sext i32 %1348 to i64
  %1353 = getelementptr ptr, ptr %1342, i64 %1352
  %1354 = getelementptr i8, ptr %1353, i64 120
  %1355 = load ptr, ptr %1354, align 8
  store ptr @i32_typ, ptr %57, align 8
  %1356 = call ptr %1355({ ptr, ptr, ptr, i32 } %1349, ptr nonnull %57)
  %1357 = call { ptr, i160 } %1356({ ptr, ptr, ptr, i32 } %1349, { ptr, ptr, ptr, i32 } %1349, ptr nonnull %56, i32 %1340)
  %.fca.0.extract.i169 = extractvalue { ptr, i160 } %1357, 0
  %1358 = icmp ne ptr %.fca.0.extract.i169, @nil_typ
  %1359 = icmp ne ptr %.fca.0.extract.i169, null
  %.not126.i = and i1 %1358, %1359
  br i1 %.not126.i, label %1360, label %.critedge.i170

1360:                                             ; preds = %._crit_edge1
  %.fca.1.extract.i183 = extractvalue { ptr, i160 } %1357, 1
  %.sroa.5.8.extract.trunc.i = trunc i160 %.fca.1.extract.i183 to i64
  %1361 = inttoptr i64 %.sroa.5.8.extract.trunc.i to ptr
  %.sroa.9.8.extract.shift.i = lshr i160 %.fca.1.extract.i183, 64
  %.sroa.9.8.extract.trunc.i = trunc i160 %.sroa.9.8.extract.shift.i to i64
  %1362 = inttoptr i64 %.sroa.9.8.extract.trunc.i to ptr
  %hash_coef_ptr.i.i144.i = getelementptr i8, ptr %.fca.0.extract.i169, i64 8
  %tbl_size_ptr.i.i145.i = getelementptr i8, ptr %.fca.0.extract.i169, i64 16
  %offset_tbl_ptr.i.i146.i = getelementptr i8, ptr %.fca.0.extract.i169, i64 40
  %hash_coef.i.i147.i = load i64, ptr %hash_coef_ptr.i.i144.i, align 4
  %tbl_size.i.i148.i = load i64, ptr %tbl_size_ptr.i.i145.i, align 4
  %offset_tbl.i.i149.i = load ptr, ptr %offset_tbl_ptr.i.i146.i, align 8
  %product.i.i.i150.i = mul i64 %hash_coef.i.i147.i, 4015701072841558310
  %shifted.i.i.i151.i = lshr i64 %product.i.i.i150.i, 32
  %xored.i.i.i152.i = xor i64 %shifted.i.i.i151.i, %product.i.i.i150.i
  %hash.i.i.i153.i = and i64 %xored.i.i.i152.i, %tbl_size.i.i148.i
  %offset_ptr.i.i154.i = getelementptr i32, ptr %offset_tbl.i.i149.i, i64 %hash.i.i.i153.i
  %offset.i.i155.i = load i32, ptr %offset_ptr.i.i154.i, align 4
  %1363 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract.i169, 0
  %1364 = insertvalue { ptr, ptr, ptr, i32 } %1363, ptr %1361, 1
  %1365 = insertvalue { ptr, ptr, ptr, i32 } %1364, ptr %1362, 2
  %1366 = insertvalue { ptr, ptr, ptr, i32 } %1365, i32 %offset.i.i155.i, 3
  %1367 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1368 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1369 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract.i169)
  %1370 = sext i32 %offset.i.i155.i to i64
  %1371 = getelementptr ptr, ptr %.fca.0.extract.i169, i64 %1370
  %1372 = getelementptr i8, ptr %1371, i64 64
  %1373 = load ptr, ptr %1372, align 8
  %1374 = call ptr %1373({ ptr, ptr, ptr, i32 } %1366, ptr nonnull %2)
  %1375 = call i32 %1374({ ptr, ptr, ptr, i32 } %1366, { ptr, ptr, ptr, i32 } %1366, ptr nonnull %2)
  %1376 = icmp eq i32 %1375, %1321
  %1377 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1378 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1379 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract.i169)
  %1380 = getelementptr i8, ptr %1371, i64 48
  %1381 = load ptr, ptr %1380, align 8
  %1382 = call ptr %1381({ ptr, ptr, ptr, i32 } %1366, ptr nonnull %2)
  %1383 = call { ptr, i160 } %1382({ ptr, ptr, ptr, i32 } %1366, { ptr, ptr, ptr, i32 } %1366, ptr nonnull %2)
  %1384 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1385 = load ptr, ptr %78, align 8
  %1386 = call i1 %1385({ ptr, i160 } %1383, { ptr, i160 } %1318)
  %1387 = and i1 %1376, %1386
  br i1 %1387, label %HashMap_get_keyK.exit, label %.critedge.i170

.critedge.i170:                                   ; preds = %1360, %._crit_edge1
  %1388 = add i32 %1321, 2127912214
  %1389 = shl i32 %1321, 12
  %1390 = add i32 %1388, %1389
  %1391 = ashr i32 %1390, 19
  %1392 = xor i32 %1390, %1391
  %1393 = xor i32 %1392, -949894596
  %1394 = add i32 %1393, 374761393
  %1395 = shl i32 %1393, 5
  %1396 = add i32 %1394, %1395
  %1397 = add i32 %1396, -744332180
  %1398 = shl i32 %1396, 9
  %1399 = xor i32 %1397, %1398
  %1400 = add i32 %1399, -42973499
  %1401 = shl i32 %1399, 3
  %1402 = add i32 %1400, %1401
  %1403 = ashr i32 %1402, 16
  %1404 = xor i32 %1402, %1403
  %1405 = xor i32 %1404, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %1406 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1407 = load ptr, ptr %104, align 8
  %1408 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1407, 0
  %1409 = load ptr, ptr %105, align 8
  %1410 = insertvalue { ptr, ptr, ptr, i32 } %1408, ptr %1409, 1
  %1411 = load ptr, ptr %106, align 8
  %1412 = insertvalue { ptr, ptr, ptr, i32 } %1410, ptr %1411, 2
  %1413 = load i32, ptr %107, align 4
  %1414 = insertvalue { ptr, ptr, ptr, i32 } %1412, i32 %1413, 3
  %hash_coef_ptr.i.i10.i842 = getelementptr i8, ptr %1407, i64 8
  %tbl_size_ptr.i.i11.i843 = getelementptr i8, ptr %1407, i64 16
  %offset_tbl_ptr.i.i12.i844 = getelementptr i8, ptr %1407, i64 40
  %hash_coef.i.i13.i845 = load i64, ptr %hash_coef_ptr.i.i10.i842, align 4
  %tbl_size.i.i14.i846 = load i64, ptr %tbl_size_ptr.i.i11.i843, align 4
  %offset_tbl.i.i15.i847 = load ptr, ptr %offset_tbl_ptr.i.i12.i844, align 8
  %product.i.i.i16.i848 = mul i64 %hash_coef.i.i13.i845, -5261542750394134544
  %shifted.i.i.i17.i849 = lshr i64 %product.i.i.i16.i848, 32
  %xored.i.i.i18.i850 = xor i64 %shifted.i.i.i17.i849, %product.i.i.i16.i848
  %hash.i.i.i19.i851 = and i64 %xored.i.i.i18.i850, %tbl_size.i.i14.i846
  %offset_ptr.i.i20.i852 = getelementptr i32, ptr %offset_tbl.i.i15.i847, i64 %hash.i.i.i19.i851
  %offset.i.i21.i853 = load i32, ptr %offset_ptr.i.i20.i852, align 4
  %eq.i.i854 = icmp eq i32 %1413, %offset.i.i21.i853
  call void @llvm.assume(i1 %eq.i.i854) #30
  %1415 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1416 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1407)
  %1417 = sext i32 %1413 to i64
  %1418 = getelementptr ptr, ptr %1407, i64 %1417
  %1419 = getelementptr i8, ptr %1418, i64 64
  %1420 = load ptr, ptr %1419, align 8
  %1421 = call ptr %1420({ ptr, ptr, ptr, i32 } %1414, ptr nonnull %2)
  %1422 = call i32 %1421({ ptr, ptr, ptr, i32 } %1414, { ptr, ptr, ptr, i32 } %1414, ptr nonnull %2)
  %1423 = add i32 %1422, -1
  %1424 = and i32 %1423, %1405
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %1425 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1426 = load ptr, ptr %104, align 8
  %1427 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1426, 0
  %1428 = load ptr, ptr %105, align 8
  %1429 = insertvalue { ptr, ptr, ptr, i32 } %1427, ptr %1428, 1
  %1430 = load ptr, ptr %106, align 8
  %1431 = insertvalue { ptr, ptr, ptr, i32 } %1429, ptr %1430, 2
  %1432 = load i32, ptr %107, align 4
  %1433 = insertvalue { ptr, ptr, ptr, i32 } %1431, i32 %1432, 3
  %hash_coef_ptr.i.i158.i = getelementptr i8, ptr %1426, i64 8
  %tbl_size_ptr.i.i159.i = getelementptr i8, ptr %1426, i64 16
  %offset_tbl_ptr.i.i160.i = getelementptr i8, ptr %1426, i64 40
  %hash_coef.i.i161.i = load i64, ptr %hash_coef_ptr.i.i158.i, align 4
  %tbl_size.i.i162.i = load i64, ptr %tbl_size_ptr.i.i159.i, align 4
  %offset_tbl.i.i163.i = load ptr, ptr %offset_tbl_ptr.i.i160.i, align 8
  %product.i.i.i164.i = mul i64 %hash_coef.i.i161.i, -5261542750394134544
  %shifted.i.i.i165.i = lshr i64 %product.i.i.i164.i, 32
  %xored.i.i.i166.i = xor i64 %shifted.i.i.i165.i, %product.i.i.i164.i
  %hash.i.i.i167.i = and i64 %xored.i.i.i166.i, %tbl_size.i.i162.i
  %offset_ptr.i.i168.i = getelementptr i32, ptr %offset_tbl.i.i163.i, i64 %hash.i.i.i167.i
  %offset.i.i169.i = load i32, ptr %offset_ptr.i.i168.i, align 4
  %eq.i172.i = icmp eq i32 %1432, %offset.i.i169.i
  call void @llvm.assume(i1 %eq.i172.i) #30
  store ptr @_parameterization_Ptri32, ptr %54, align 8
  %1434 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %54)
  %1435 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1426)
  %1436 = sext i32 %1432 to i64
  %1437 = getelementptr ptr, ptr %1426, i64 %1436
  %1438 = getelementptr i8, ptr %1437, i64 120
  %1439 = load ptr, ptr %1438, align 8
  store ptr @i32_typ, ptr %55, align 8
  %1440 = call ptr %1439({ ptr, ptr, ptr, i32 } %1433, ptr nonnull %55)
  %1441 = call { ptr, i160 } %1440({ ptr, ptr, ptr, i32 } %1433, { ptr, ptr, ptr, i32 } %1433, ptr nonnull %54, i32 %1424)
  %.fca.0.extract57.i = extractvalue { ptr, i160 } %1441, 0
  %1442 = icmp ne ptr %.fca.0.extract57.i, @nil_typ
  %1443 = icmp ne ptr %.fca.0.extract57.i, null
  %.not128.i = and i1 %1442, %1443
  br i1 %.not128.i, label %1444, label %HashMap_get_keyK.exit.thread

1444:                                             ; preds = %.critedge.i170
  %.fca.1.extract59.i = extractvalue { ptr, i160 } %1441, 1
  %.sroa.6.8.extract.trunc.i = trunc i160 %.fca.1.extract59.i to i64
  %1445 = inttoptr i64 %.sroa.6.8.extract.trunc.i to ptr
  %.sroa.11.8.extract.shift.i = lshr i160 %.fca.1.extract59.i, 64
  %.sroa.11.8.extract.trunc.i = trunc i160 %.sroa.11.8.extract.shift.i to i64
  %1446 = inttoptr i64 %.sroa.11.8.extract.trunc.i to ptr
  %hash_coef_ptr.i.i174.i171 = getelementptr i8, ptr %.fca.0.extract57.i, i64 8
  %tbl_size_ptr.i.i175.i172 = getelementptr i8, ptr %.fca.0.extract57.i, i64 16
  %offset_tbl_ptr.i.i176.i173 = getelementptr i8, ptr %.fca.0.extract57.i, i64 40
  %hash_coef.i.i177.i174 = load i64, ptr %hash_coef_ptr.i.i174.i171, align 4
  %tbl_size.i.i178.i175 = load i64, ptr %tbl_size_ptr.i.i175.i172, align 4
  %offset_tbl.i.i179.i176 = load ptr, ptr %offset_tbl_ptr.i.i176.i173, align 8
  %product.i.i.i180.i177 = mul i64 %hash_coef.i.i177.i174, 4015701072841558310
  %shifted.i.i.i181.i178 = lshr i64 %product.i.i.i180.i177, 32
  %xored.i.i.i182.i179 = xor i64 %shifted.i.i.i181.i178, %product.i.i.i180.i177
  %hash.i.i.i183.i180 = and i64 %xored.i.i.i182.i179, %tbl_size.i.i178.i175
  %offset_ptr.i.i184.i181 = getelementptr i32, ptr %offset_tbl.i.i179.i176, i64 %hash.i.i.i183.i180
  %offset.i.i185.i182 = load i32, ptr %offset_ptr.i.i184.i181, align 4
  %1447 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract57.i, 0
  %1448 = insertvalue { ptr, ptr, ptr, i32 } %1447, ptr %1445, 1
  %1449 = insertvalue { ptr, ptr, ptr, i32 } %1448, ptr %1446, 2
  %1450 = insertvalue { ptr, ptr, ptr, i32 } %1449, i32 %offset.i.i185.i182, 3
  %1451 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1452 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1453 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract57.i)
  %1454 = sext i32 %offset.i.i185.i182 to i64
  %1455 = getelementptr ptr, ptr %.fca.0.extract57.i, i64 %1454
  %1456 = getelementptr i8, ptr %1455, i64 64
  %1457 = load ptr, ptr %1456, align 8
  %1458 = call ptr %1457({ ptr, ptr, ptr, i32 } %1450, ptr nonnull %2)
  %1459 = call i32 %1458({ ptr, ptr, ptr, i32 } %1450, { ptr, ptr, ptr, i32 } %1450, ptr nonnull %2)
  %1460 = icmp eq i32 %1459, %1321
  %1461 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1462 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1463 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract57.i)
  %1464 = getelementptr i8, ptr %1455, i64 48
  %1465 = load ptr, ptr %1464, align 8
  %1466 = call ptr %1465({ ptr, ptr, ptr, i32 } %1450, ptr nonnull %2)
  %1467 = call { ptr, i160 } %1466({ ptr, ptr, ptr, i32 } %1450, { ptr, ptr, ptr, i32 } %1450, ptr nonnull %2)
  %1468 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1469 = load ptr, ptr %78, align 8
  %1470 = call i1 %1469({ ptr, i160 } %1467, { ptr, i160 } %1318)
  %1471 = and i1 %1460, %1470
  br i1 %1471, label %HashMap_get_keyK.exit, label %HashMap_get_keyK.exit.thread

HashMap_get_keyK.exit.thread:                     ; preds = %1444, %.critedge.i170
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0271.i)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.1.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %54)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %55)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0123.i)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2124.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0115.i)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2116.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %56)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %57)
  br label %1483

HashMap_get_keyK.exit:                            ; preds = %1360, %1444
  %.pre-phi313.i = phi i64 [ %1370, %1360 ], [ %1454, %1444 ]
  %.pre-phi312.i = phi { ptr, ptr, ptr, i32 } [ %1366, %1360 ], [ %1450, %1444 ]
  %.reg2mem65.0.sroa.phi290.sroa.speculated.i = phi ptr [ %.fca.0.extract.i169, %1360 ], [ %.fca.0.extract57.i, %1444 ]
  %.reg2mem59.0.sroa.phi120289.i = phi ptr [ %.sroa.1.i, %1360 ], [ %.sroa.2124.i, %1444 ]
  %.reg2mem59.0.sroa.phi117288.i = phi ptr [ %.sroa.0271.i, %1360 ], [ %.sroa.0123.i, %1444 ]
  %.reg2mem57.0.sroa.phi94287.i = phi ptr [ %.sroa.2.i, %1360 ], [ %.sroa.2116.i, %1444 ]
  %.reg2mem57.0.sroa.phi91286.i = phi ptr [ %.sroa.0.i, %1360 ], [ %.sroa.0115.i, %1444 ]
  %1472 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1473 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1474 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.reg2mem65.0.sroa.phi290.sroa.speculated.i)
  %1475 = getelementptr ptr, ptr %.reg2mem65.0.sroa.phi290.sroa.speculated.i, i64 %.pre-phi313.i
  %1476 = getelementptr i8, ptr %1475, i64 56
  %1477 = load ptr, ptr %1476, align 8
  %1478 = call ptr %1477({ ptr, ptr, ptr, i32 } %.pre-phi312.i, ptr nonnull %2)
  %1479 = call { ptr, i160 } %1478({ ptr, ptr, ptr, i32 } %.pre-phi312.i, { ptr, ptr, ptr, i32 } %.pre-phi312.i, ptr nonnull %2)
  %.fca.0.extract97.i = extractvalue { ptr, i160 } %1479, 0
  store ptr %.fca.0.extract97.i, ptr %.reg2mem59.0.sroa.phi117288.i, align 8
  %.fca.1.extract99.i = extractvalue { ptr, i160 } %1479, 1
  store i160 %.fca.1.extract99.i, ptr %.reg2mem59.0.sroa.phi120289.i, align 8
  store ptr %.fca.0.extract97.i, ptr %.reg2mem57.0.sroa.phi91286.i, align 8
  store i160 %.fca.1.extract99.i, ptr %.reg2mem57.0.sroa.phi94287.i, align 8
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0271.i)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.1.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %54)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %55)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0123.i)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2124.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0115.i)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2116.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %56)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %57)
  %1480 = icmp ne ptr %.fca.0.extract97.i, @nil_typ
  %1481 = icmp ne ptr %.fca.0.extract97.i, null
  %.not27 = and i1 %1480, %1481
  br i1 %.not27, label %1482, label %1483

1482:                                             ; preds = %HashMap_get_keyK.exit
  %.sroa.2.8.extract.trunc = trunc i160 %.fca.1.extract99.i to i32
  %.not = icmp eq i32 %0, %.sroa.2.8.extract.trunc
  br label %1483

1483:                                             ; preds = %HashMap_get_keyK.exit.thread, %HashMap_get_keyK.exit, %1482
  %.reg2mem44.0 = phi i1 [ %.not, %1482 ], [ false, %HashMap_get_keyK.exit ], [ false, %HashMap_get_keyK.exit.thread ]
  %1484 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1485 = load i32, ptr %108, align 4
  %1486 = icmp eq i32 %1485, %0
  %1487 = select i1 %1486, i1 %.reg2mem44.0, i1 false
  %1488 = freeze i1 %1487
  br label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit

1489:                                             ; preds = %1
  %1490 = call i64 @clock()
  %1491 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit

IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit: ; preds = %1483, %1489
  %1492 = phi i64 [ %1316, %1483 ], [ %1490, %1489 ]
  %.reg2mem40.0.in = phi i1 [ %1488, %1483 ], [ true, %1489 ]
  %result.i36 = call noalias dereferenceable_or_null(18) ptr @bump_malloc_inner(i64 noundef 18, ptr nonnull @current_ptr) #29
  store <17 x i8> <i8 73, i8 110, i8 115, i8 101, i8 114, i8 116, i8 32, i8 83, i8 101, i8 113, i8 117, i8 101, i8 110, i8 116, i8 105, i8 97, i8 108>, ptr %result.i36, align 32
  %result.i37 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %1493 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %result.i37, 1
  %1494 = insertvalue { ptr, ptr, ptr, i32 } %1493, ptr undef, 2
  %1495 = insertvalue { ptr, ptr, ptr, i32 } %1494, i32 9, 3
  store ptr %result.i36, ptr %result.i37, align 8
  %1496 = getelementptr i8, ptr %result.i37, i64 8
  store i32 17, ptr %1496, align 4
  %1497 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %1498 = getelementptr i8, ptr %result.i37, i64 12
  store i32 18, ptr %1498, align 4
  %1499 = sub i64 %1492, %111
  call void @print_benchmark_result({ ptr, ptr, ptr, i32 } %1495, i32 %0, i64 %1499)
  %result.i38 = call noalias dereferenceable_or_null(19) ptr @bump_malloc_inner(i64 noundef 19, ptr nonnull @current_ptr) #29
  store <18 x i8> <i8 32, i8 32, i8 32, i8 32, i8 86, i8 101, i8 114, i8 105, i8 102, i8 105, i8 99, i8 97, i8 116, i8 105, i8 111, i8 110, i8 58, i8 32>, ptr %result.i38, align 32
  %result.i39 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %1500 = getelementptr inbounds i8, ptr %69, i64 8
  %1501 = getelementptr inbounds i8, ptr %69, i64 24
  store ptr @String, ptr %69, align 8
  store ptr %result.i39, ptr %1500, align 8
  store i32 9, ptr %1501, align 8
  %1502 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %69)
  store ptr %result.i38, ptr %result.i39, align 8
  %1503 = getelementptr i8, ptr %result.i39, i64 8
  store i32 18, ptr %1503, align 4
  %1504 = getelementptr i8, ptr %result.i39, i64 12
  store i32 19, ptr %1504, align 4
  %1505 = load i160, ptr %1500, align 8
  %1506 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %.sroa.3.8.extract.trunc.i = trunc i160 %1505 to i64
  %1507 = inttoptr i64 %.sroa.3.8.extract.trunc.i to ptr
  %1508 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1509 = getelementptr i8, ptr %1507, i64 8
  %1510 = load i32, ptr %1509, align 4
  %1511 = add i32 %1510, 1
  %1512 = sext i32 %1511 to i64
  %result.i.i869 = call noalias ptr @bump_malloc_inner(i64 noundef %1512, ptr nonnull @current_ptr) #29
  %1513 = load i32, ptr %1509, align 4
  %1514 = icmp sgt i32 %1513, 0
  br i1 %1514, label %.lr.ph.i870, label %String_c_string_.exit

.lr.ph.i870:                                      ; preds = %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit
  %1515 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %1516 = load ptr, ptr %1507, align 8
  %1517 = zext nneg i32 %1513 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i869, ptr align 1 %1516, i64 %1517, i1 false)
  br label %String_c_string_.exit

String_c_string_.exit:                            ; preds = %.lr.ph.i870, %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit
  %1518 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %1519 = sext i32 %1513 to i64
  %1520 = getelementptr i8, ptr %result.i.i869, i64 %1519
  store i8 0, ptr %1520, align 1
  %puts.i = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i869)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %result.i40 = call noalias dereferenceable_or_null(5) ptr @bump_malloc_inner(i64 noundef 5, ptr nonnull @current_ptr) #29
  %spec.select = select i1 %.reg2mem40.0.in, <4 x i8> <i8 80, i8 65, i8 83, i8 83>, <4 x i8> <i8 70, i8 65, i8 73, i8 76>
  %1521 = select i1 %.reg2mem40.0.in, ptr %70, ptr %71
  store <4 x i8> %spec.select, ptr %result.i40, align 4
  %result.i61 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v = select i1 %.reg2mem40.0.in, ptr %70, ptr %71
  %.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel = getelementptr inbounds i8, ptr %.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v, i64 8
  %.sroa.sel895.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v = select i1 %.reg2mem40.0.in, ptr %70, ptr %71
  %.sroa.sel895.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel = getelementptr inbounds i8, ptr %.sroa.sel895.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v, i64 24
  store ptr @String, ptr %1521, align 8
  store ptr %result.i61, ptr %.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  store i32 9, ptr %.sroa.sel895.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  %1522 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %1521)
  store ptr %result.i40, ptr %result.i61, align 8
  %1523 = getelementptr i8, ptr %result.i61, i64 8
  store i32 4, ptr %1523, align 4
  %1524 = getelementptr i8, ptr %result.i61, i64 12
  store i32 5, ptr %1524, align 4
  %1525 = load i160, ptr %.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  %1526 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %.sroa.3.8.extract.trunc.i232 = trunc i160 %1525 to i64
  %1527 = inttoptr i64 %.sroa.3.8.extract.trunc.i232 to ptr
  %1528 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1529 = getelementptr i8, ptr %1527, i64 8
  %1530 = load i32, ptr %1529, align 4
  %1531 = add i32 %1530, 1
  %1532 = sext i32 %1531 to i64
  %result.i.i886 = call noalias ptr @bump_malloc_inner(i64 noundef %1532, ptr nonnull @current_ptr) #29
  %1533 = load i32, ptr %1529, align 4
  %1534 = icmp sgt i32 %1533, 0
  br i1 %1534, label %.lr.ph.i887, label %String_c_string_.exit891

.lr.ph.i887:                                      ; preds = %String_c_string_.exit
  %1535 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %1536 = load ptr, ptr %1527, align 8
  %1537 = zext nneg i32 %1533 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i886, ptr align 1 %1536, i64 %1537, i1 false)
  br label %String_c_string_.exit891

String_c_string_.exit891:                         ; preds = %.lr.ph.i887, %String_c_string_.exit
  %1538 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %1539 = sext i32 %1533 to i64
  %1540 = getelementptr i8, ptr %result.i.i886, i64 %1539
  store i8 0, ptr %1540, align 1
  %puts.i248 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i886)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  ret void
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.init.trampoline(ptr nocapture writeonly, ptr readnone, ptr readnone) #2

declare i64 @clock() local_unnamed_addr

define linkonce_odr { i64, i64 } @_size_bool_typ(ptr %0) {
  ret { i64, i64 } { i64 ptrtoint (ptr getelementptr (i1, ptr null, i32 1) to i64), i64 1 }
}

define linkonce_odr { ptr, i160 } @_box_bool_typ(ptr %0, ptr %1) {
  %3 = load i8, ptr %0, align 1
  %.sroa.2.sroa.0.0.insert.ext = zext i8 %3 to i160
  %4 = insertvalue { ptr, i160 } { ptr @bool_typ, i160 undef }, i160 %.sroa.2.sroa.0.0.insert.ext, 1
  ret { ptr, i160 } %4
}

define linkonce_odr void @_unbox_bool_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %.fca.1.extract = extractvalue { ptr, i160 } %0, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i8
  store i8 %.sroa.1.8.extract.trunc, ptr %2, align 1
  ret void
}

define void @benchmark_insert_random(i32 %0) local_unnamed_addr {
  %2 = alloca [0 x ptr], align 8
  %3 = alloca [1 x ptr], align 8
  %4 = alloca { ptr }, align 8
  %5 = alloca [1 x ptr], align 8
  %6 = alloca { ptr }, align 8
  %7 = alloca [1 x ptr], align 8
  %8 = alloca { ptr }, align 8
  %9 = alloca [1 x ptr], align 8
  %10 = alloca { ptr }, align 8
  %11 = alloca [1 x ptr], align 8
  %12 = alloca { ptr }, align 8
  %13 = alloca [1 x ptr], align 8
  %14 = alloca { ptr }, align 8
  %15 = alloca [1 x ptr], align 8
  %16 = alloca { ptr }, align 8
  %17 = alloca [1 x ptr], align 8
  %18 = alloca { ptr }, align 8
  %19 = alloca [1 x ptr], align 8
  %20 = alloca { ptr }, align 8
  %21 = alloca [1 x ptr], align 8
  %22 = alloca { ptr }, align 8
  %23 = alloca [1 x ptr], align 8
  %24 = alloca { ptr }, align 8
  %25 = alloca [1 x ptr], align 8
  %26 = alloca { ptr }, align 8
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  %29 = alloca [1 x ptr], align 8
  %30 = alloca { ptr }, align 8
  %31 = alloca [2 x ptr], align 8
  %32 = alloca { ptr, ptr }, align 8
  %33 = alloca i32, align 4
  %34 = alloca i32, align 4
  %35 = alloca i32, align 4
  %.sroa.0680.i1820 = alloca ptr, align 8
  %36 = alloca i64, align 8
  %37 = alloca [1 x ptr], align 8
  %38 = alloca { ptr }, align 8
  %39 = alloca [2 x ptr], align 8
  %40 = alloca { ptr, ptr }, align 8
  %41 = alloca i32, align 4
  %42 = alloca i32, align 4
  %43 = alloca i32, align 4
  %.sroa.0.i1822 = alloca ptr, align 8
  %44 = alloca i64, align 8
  %45 = alloca { ptr, ptr, ptr, i32 }, align 8
  %46 = alloca { ptr, ptr, ptr, i32 }, align 8
  %47 = alloca [1 x ptr], align 8
  %48 = alloca { ptr }, align 8
  %49 = alloca [2 x ptr], align 8
  %50 = alloca { ptr, ptr }, align 8
  %51 = alloca i32, align 4
  %52 = alloca i32, align 4
  %53 = alloca i32, align 4
  %.sroa.0680.i1567 = alloca ptr, align 8
  %54 = alloca i64, align 8
  %55 = alloca [1 x ptr], align 8
  %56 = alloca { ptr }, align 8
  %57 = alloca [2 x ptr], align 8
  %58 = alloca { ptr, ptr }, align 8
  %59 = alloca i32, align 4
  %60 = alloca i32, align 4
  %61 = alloca i32, align 4
  %.sroa.0.i1568 = alloca ptr, align 8
  %62 = alloca i64, align 8
  %63 = alloca { ptr, ptr, ptr, i32 }, align 8
  %64 = alloca { ptr, ptr, ptr, i32 }, align 8
  %65 = alloca { ptr, ptr, ptr, i32 }, align 8
  %66 = alloca { ptr, ptr, ptr, i32 }, align 8
  %67 = alloca { ptr, ptr, ptr, i32 }, align 8
  %68 = alloca [1 x ptr], align 8
  %69 = alloca { ptr }, align 8
  %70 = alloca [2 x ptr], align 8
  %71 = alloca { ptr, ptr }, align 8
  %72 = alloca i32, align 4
  %73 = alloca i32, align 4
  %74 = alloca i32, align 4
  %.sroa.0680.i1008 = alloca ptr, align 8
  %75 = alloca i64, align 8
  %76 = alloca [1 x ptr], align 8
  %77 = alloca { ptr }, align 8
  %78 = alloca [2 x ptr], align 8
  %79 = alloca { ptr, ptr }, align 8
  %80 = alloca i32, align 4
  %81 = alloca i32, align 4
  %82 = alloca i32, align 4
  %.sroa.0.i1010 = alloca ptr, align 8
  %83 = alloca i64, align 8
  %84 = alloca { ptr, ptr, ptr, i32 }, align 8
  %85 = alloca { ptr, ptr, ptr, i32 }, align 8
  %86 = alloca [1 x ptr], align 8
  %87 = alloca { ptr }, align 8
  %88 = alloca [2 x ptr], align 8
  %89 = alloca { ptr, ptr }, align 8
  %90 = alloca i32, align 4
  %91 = alloca i32, align 4
  %92 = alloca i32, align 4
  %.sroa.0680.i = alloca ptr, align 8
  %93 = alloca i64, align 8
  %94 = alloca [1 x ptr], align 8
  %95 = alloca { ptr }, align 8
  %96 = alloca [2 x ptr], align 8
  %97 = alloca { ptr, ptr }, align 8
  %98 = alloca i32, align 4
  %99 = alloca i32, align 4
  %100 = alloca i32, align 4
  %.sroa.0.i852 = alloca ptr, align 8
  %101 = alloca i64, align 8
  %102 = alloca { ptr, ptr, ptr, i32 }, align 8
  %103 = alloca { ptr, ptr, ptr, i32 }, align 8
  %104 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.sroa.0271.i = alloca ptr, align 8
  %.sroa.1.i = alloca i160, align 8
  %.sroa.0.i = alloca ptr, align 8
  %.sroa.2.i = alloca i160, align 8
  %105 = alloca [1 x ptr], align 8
  %106 = alloca { ptr }, align 8
  %.sroa.0123.i = alloca ptr, align 8
  %.sroa.2124.i = alloca i160, align 8
  %.sroa.0115.i = alloca ptr, align 8
  %.sroa.2116.i = alloca i160, align 8
  %107 = alloca [1 x ptr], align 8
  %108 = alloca { ptr }, align 8
  %109 = alloca { ptr, ptr, ptr, i32 }, align 8
  %110 = alloca [2 x ptr], align 8
  %111 = alloca { ptr, ptr }, align 8
  %112 = alloca [1 x ptr], align 8
  %113 = alloca { ptr }, align 8
  %114 = alloca { ptr, ptr, ptr, i32 }, align 8
  %115 = alloca [2 x ptr], align 8
  %116 = alloca { ptr, ptr }, align 8
  %117 = alloca { ptr, ptr, ptr, i32 }, align 8
  %118 = alloca [1 x ptr], align 8
  %119 = alloca { ptr }, align 8
  %120 = alloca { ptr, ptr, ptr, i32 }, align 8
  %121 = alloca [2 x ptr], align 8
  %122 = alloca { ptr, ptr }, align 8
  %123 = alloca [1 x ptr], align 8
  %124 = alloca { ptr }, align 8
  %125 = alloca { ptr, ptr, ptr, i32 }, align 8
  %126 = alloca [2 x ptr], align 8
  %127 = alloca { ptr, ptr }, align 8
  %128 = alloca { ptr, ptr, ptr, i32 }, align 8
  %129 = alloca [1 x ptr], align 8
  %130 = alloca { ptr }, align 8
  %oldProtect.i94 = alloca i32, align 4
  %oldProtect.i90 = alloca i32, align 4
  %oldProtect.i55 = alloca i32, align 4
  %oldProtect.i = alloca i32, align 4
  %.sroa.039.sroa.0 = alloca i8, align 8
  %131 = alloca { ptr, ptr, ptr, i32 }, align 8
  %132 = alloca { ptr, ptr, ptr, i32 }, align 8
  %133 = alloca { ptr, ptr, ptr, i32 }, align 8
  %134 = alloca { ptr, ptr, ptr, i32 }, align 8
  %135 = alloca { ptr, ptr, ptr, i32 }, align 8
  %result.i = tail call noalias dereferenceable_or_null(120) ptr @bump_malloc_inner(i64 noundef 120, ptr nonnull @current_ptr) #29
  store ptr @_parameterization_Ptri32, ptr %result.i, align 8
  %136 = getelementptr i8, ptr %result.i, i64 8
  store ptr @_parameterization_Ptri32, ptr %136, align 8
  %137 = getelementptr i8, ptr %result.i, i64 16
  store ptr @_parameterization_PairPtri32._Ptri32, ptr %137, align 8
  %138 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %result.i)
  %result.i52 = tail call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %oldProtect.i)
  %result.i53 = call i32 @VirtualProtect(ptr %result.i52, i64 16, i32 64, ptr nonnull %oldProtect.i) #16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %oldProtect.i)
  call void @llvm.init.trampoline(ptr %result.i52, ptr nonnull @drtevzvlwq, ptr nonnull @i32_hasher)
  %ret.i = call ptr @llvm.adjust.trampoline(ptr readonly %result.i52) #31
  %139 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i52)
  %result.i54 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %oldProtect.i55)
  %result.i56 = call i32 @VirtualProtect(ptr %result.i54, i64 16, i32 64, ptr nonnull %oldProtect.i55) #16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %oldProtect.i55)
  call void @llvm.init.trampoline(ptr %result.i54, ptr nonnull @pkiyefowgp, ptr nonnull @i32_eq)
  %ret.i57 = call ptr @llvm.adjust.trampoline(ptr readonly %result.i54) #31
  %140 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i54)
  %141 = getelementptr i8, ptr %result.i, i64 96
  store ptr %ret.i, ptr %141, align 8
  %142 = getelementptr i8, ptr %result.i, i64 104
  store ptr %ret.i57, ptr %142, align 8
  %result.i.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %143 = getelementptr i8, ptr %result.i.i, i64 16
  store ptr @_parameterization_Nil, ptr %143, align 8
  %result.i4.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %144 = getelementptr i8, ptr %result.i4.i, i64 16
  store ptr @_parameterization_Ptri32, ptr %144, align 8
  %145 = getelementptr i8, ptr %result.i4.i, i64 8
  store ptr @_parameterization_Ptri32, ptr %145, align 8
  %146 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i4.i)
  store ptr @Entry, ptr %result.i4.i, align 8
  %147 = getelementptr i8, ptr %result.i.i, i64 8
  store ptr %result.i4.i, ptr %147, align 8
  %148 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i)
  store ptr @union_typ, ptr %result.i.i, align 8
  %result.i5.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i, ptr %result.i5.i, align 8
  %149 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i5.i)
  %150 = getelementptr i8, ptr %result.i5.i, i64 16
  store i32 8, ptr %150, align 4
  %151 = getelementptr i8, ptr %result.i5.i, i64 20
  store i32 8, ptr %151, align 4
  %result.i.i.i = call noalias dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nonnull @current_ptr) #29
  %152 = getelementptr i8, ptr %result.i5.i, i64 8
  store ptr %result.i.i.i, ptr %152, align 8
  %153 = getelementptr i8, ptr %result.i, i64 24
  store ptr @Array, ptr %153, align 8
  %154 = getelementptr i8, ptr %result.i, i64 32
  store ptr %result.i5.i, ptr %154, align 8
  %155 = getelementptr i8, ptr %result.i, i64 48
  store i32 9, ptr %155, align 4
  %result.i20.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %156 = getelementptr i8, ptr %result.i20.i, i64 16
  store ptr @_parameterization_Nil, ptr %156, align 8
  %result.i21.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %157 = getelementptr i8, ptr %result.i21.i, i64 16
  store ptr @_parameterization_Ptri32, ptr %157, align 8
  %158 = getelementptr i8, ptr %result.i21.i, i64 8
  store ptr @_parameterization_Ptri32, ptr %158, align 8
  %159 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i21.i)
  store ptr @Entry, ptr %result.i21.i, align 8
  %160 = getelementptr i8, ptr %result.i20.i, i64 8
  store ptr %result.i21.i, ptr %160, align 8
  %161 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i20.i)
  store ptr @union_typ, ptr %result.i20.i, align 8
  %result.i22.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i20.i, ptr %result.i22.i, align 8
  %162 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i22.i)
  %163 = getelementptr i8, ptr %result.i22.i, i64 16
  store i32 8, ptr %163, align 4
  %164 = getelementptr i8, ptr %result.i22.i, i64 20
  store i32 8, ptr %164, align 4
  %result.i.i97.i = call noalias dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nonnull @current_ptr) #29
  %165 = getelementptr i8, ptr %result.i22.i, i64 8
  store ptr %result.i.i97.i, ptr %165, align 8
  %166 = getelementptr i8, ptr %result.i, i64 56
  store ptr @Array, ptr %166, align 8
  %167 = getelementptr i8, ptr %result.i, i64 64
  store ptr %result.i22.i, ptr %167, align 8
  %168 = getelementptr i8, ptr %result.i, i64 80
  store i32 9, ptr %168, align 4
  %169 = getelementptr i8, ptr %result.i, i64 112
  store i32 100, ptr %169, align 4
  %result.i58 = call noalias dereferenceable_or_null(4) ptr @bump_malloc_inner(i64 noundef 4, ptr nonnull @current_ptr) #29
  %170 = call ptr @llvm.invariant.start.p0(i64 40, ptr nonnull @PRNG)
  store i32 123, ptr %result.i58, align 4
  %result.i73 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr @_parameterization_Ptri32, ptr %result.i73, align 8
  %171 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i73)
  %172 = getelementptr i8, ptr %result.i73, i64 20
  store i32 %0, ptr %172, align 4
  %173 = sext i32 %0 to i64
  %174 = shl nsw i64 %173, 5
  %result.i.i257 = call noalias ptr @bump_malloc_inner(i64 noundef %174, ptr nonnull @current_ptr) #29
  %175 = getelementptr i8, ptr %result.i73, i64 8
  store ptr %result.i.i257, ptr %175, align 8
  %result.i88 = call noalias dereferenceable_or_null(120) ptr @bump_malloc_inner(i64 noundef 120, ptr nonnull @current_ptr) #29
  store ptr @_parameterization_Ptri32, ptr %result.i88, align 8
  %176 = getelementptr i8, ptr %result.i88, i64 8
  store ptr @_parameterization_Ptri1, ptr %176, align 8
  %177 = getelementptr i8, ptr %result.i88, i64 16
  store ptr @_parameterization_PairPtri32._Ptri1, ptr %177, align 8
  %178 = call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %result.i88)
  %result.i89 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %oldProtect.i90)
  %result.i91 = call i32 @VirtualProtect(ptr %result.i89, i64 16, i32 64, ptr nonnull %oldProtect.i90) #16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %oldProtect.i90)
  call void @llvm.init.trampoline(ptr %result.i89, ptr nonnull @hpiagppyyl, ptr nonnull @i32_hasher)
  %ret.i92 = call ptr @llvm.adjust.trampoline(ptr readonly %result.i89) #31
  %179 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i89)
  %result.i93 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %oldProtect.i94)
  %result.i95 = call i32 @VirtualProtect(ptr %result.i93, i64 16, i32 64, ptr nonnull %oldProtect.i94) #16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %oldProtect.i94)
  call void @llvm.init.trampoline(ptr %result.i93, ptr nonnull @awbyfttpwe, ptr nonnull @i32_eq)
  %ret.i96 = call ptr @llvm.adjust.trampoline(ptr readonly %result.i93) #31
  %180 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i93)
  %181 = getelementptr i8, ptr %result.i88, i64 96
  store ptr %ret.i92, ptr %181, align 8
  %182 = getelementptr i8, ptr %result.i88, i64 104
  store ptr %ret.i96, ptr %182, align 8
  %result.i.i368 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %183 = getelementptr i8, ptr %result.i.i368, i64 16
  store ptr @_parameterization_Nil, ptr %183, align 8
  %result.i4.i369 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %184 = getelementptr i8, ptr %result.i4.i369, i64 16
  store ptr @_parameterization_Ptri1, ptr %184, align 8
  %185 = getelementptr i8, ptr %result.i4.i369, i64 8
  store ptr @_parameterization_Ptri32, ptr %185, align 8
  %186 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i4.i369)
  store ptr @Entry, ptr %result.i4.i369, align 8
  %187 = getelementptr i8, ptr %result.i.i368, i64 8
  store ptr %result.i4.i369, ptr %187, align 8
  %188 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i368)
  store ptr @union_typ, ptr %result.i.i368, align 8
  %result.i5.i370 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i368, ptr %result.i5.i370, align 8
  %189 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i5.i370)
  %190 = getelementptr i8, ptr %result.i5.i370, i64 16
  store i32 8, ptr %190, align 4
  %191 = getelementptr i8, ptr %result.i5.i370, i64 20
  store i32 8, ptr %191, align 4
  %result.i.i.i371 = call noalias dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nonnull @current_ptr) #29
  %192 = getelementptr i8, ptr %result.i5.i370, i64 8
  store ptr %result.i.i.i371, ptr %192, align 8
  %193 = getelementptr i8, ptr %result.i88, i64 24
  store ptr @Array, ptr %193, align 8
  %194 = getelementptr i8, ptr %result.i88, i64 32
  store ptr %result.i5.i370, ptr %194, align 8
  %195 = getelementptr i8, ptr %result.i88, i64 40
  %196 = getelementptr i8, ptr %result.i88, i64 48
  store i32 9, ptr %196, align 4
  %197 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %result.i20.i372 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %198 = getelementptr i8, ptr %result.i20.i372, i64 16
  store ptr @_parameterization_Nil, ptr %198, align 8
  %result.i21.i373 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %199 = getelementptr i8, ptr %result.i21.i373, i64 16
  store ptr @_parameterization_Ptri1, ptr %199, align 8
  %200 = getelementptr i8, ptr %result.i21.i373, i64 8
  store ptr @_parameterization_Ptri32, ptr %200, align 8
  %201 = getelementptr i8, ptr %result.i21.i373, i64 24
  store ptr null, ptr %201, align 8
  %202 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i21.i373)
  store ptr @Entry, ptr %result.i21.i373, align 8
  %203 = getelementptr i8, ptr %result.i20.i372, i64 8
  store ptr %result.i21.i373, ptr %203, align 8
  %204 = getelementptr i8, ptr %result.i20.i372, i64 24
  store ptr null, ptr %204, align 8
  %205 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i20.i372)
  store ptr @union_typ, ptr %result.i20.i372, align 8
  %result.i22.i374 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i20.i372, ptr %result.i22.i374, align 8
  %206 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i22.i374)
  %207 = getelementptr i8, ptr %result.i22.i374, i64 16
  store i32 8, ptr %207, align 4
  %208 = getelementptr i8, ptr %result.i22.i374, i64 20
  store i32 8, ptr %208, align 4
  %result.i.i97.i375 = call noalias dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nonnull @current_ptr) #29
  %209 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %210 = getelementptr i8, ptr %result.i22.i374, i64 8
  store ptr %result.i.i97.i375, ptr %210, align 8
  %211 = getelementptr i8, ptr %result.i88, i64 56
  store ptr @Array, ptr %211, align 8
  %212 = getelementptr i8, ptr %result.i88, i64 64
  store ptr %result.i22.i374, ptr %212, align 8
  %213 = getelementptr i8, ptr %result.i88, i64 72
  %214 = getelementptr i8, ptr %result.i88, i64 80
  store i32 9, ptr %214, align 4
  %215 = getelementptr i8, ptr %result.i88, i64 88
  store i32 0, ptr %215, align 4
  %216 = getelementptr i8, ptr %result.i88, i64 112
  store i32 100, ptr %216, align 4
  %217 = icmp sgt i32 %0, 0
  br i1 %217, label %.lr.ph, label %._crit_edge240.thread

._crit_edge240.thread:                            ; preds = %1
  %218 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %219 = call i64 @clock()
  %220 = call i64 @clock()
  %221 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %222 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %223 = getelementptr i8, ptr %result.i, i64 88
  %224 = load i32, ptr %223, align 4
  %225 = icmp eq i32 %224, 0
  br label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit

.lr.ph:                                           ; preds = %1
  %226 = add nsw i32 %0, -1
  %227 = getelementptr inbounds i8, ptr %128, i64 8
  %228 = getelementptr inbounds i8, ptr %128, i64 24
  %229 = getelementptr inbounds i8, ptr %128, i64 16
  %230 = getelementptr inbounds i8, ptr %125, i64 8
  %231 = getelementptr inbounds i8, ptr %125, i64 24
  %232 = getelementptr inbounds i8, ptr %125, i64 16
  %233 = getelementptr inbounds i8, ptr %126, i64 8
  %234 = getelementptr inbounds i8, ptr %127, i64 8
  %235 = getelementptr inbounds i8, ptr %120, i64 8
  %236 = getelementptr inbounds i8, ptr %120, i64 24
  %237 = getelementptr inbounds i8, ptr %120, i64 16
  %238 = getelementptr inbounds i8, ptr %121, i64 8
  %239 = getelementptr inbounds i8, ptr %122, i64 8
  %240 = getelementptr inbounds i8, ptr %103, i64 8
  %241 = getelementptr inbounds i8, ptr %103, i64 24
  %242 = getelementptr inbounds i8, ptr %103, i64 16
  %243 = getelementptr inbounds i8, ptr %104, i64 8
  %244 = getelementptr inbounds i8, ptr %104, i64 24
  %245 = getelementptr inbounds i8, ptr %104, i64 16
  %246 = getelementptr inbounds i8, ptr %102, i64 8
  %247 = getelementptr inbounds i8, ptr %102, i64 16
  %248 = getelementptr inbounds i8, ptr %102, i64 24
  %249 = getelementptr inbounds i8, ptr %96, i64 8
  %250 = getelementptr inbounds i8, ptr %97, i64 8
  %251 = getelementptr inbounds i8, ptr %88, i64 8
  %252 = getelementptr inbounds i8, ptr %89, i64 8
  %253 = getelementptr inbounds i8, ptr %84, i64 8
  %254 = getelementptr inbounds i8, ptr %84, i64 24
  %255 = getelementptr inbounds i8, ptr %84, i64 16
  %256 = getelementptr inbounds i8, ptr %85, i64 8
  %257 = getelementptr inbounds i8, ptr %85, i64 24
  %258 = getelementptr inbounds i8, ptr %85, i64 16
  %259 = getelementptr inbounds i8, ptr %78, i64 8
  %260 = getelementptr inbounds i8, ptr %79, i64 8
  %261 = getelementptr inbounds i8, ptr %70, i64 8
  %262 = getelementptr inbounds i8, ptr %71, i64 8
  %263 = getelementptr inbounds i8, ptr %66, i64 8
  %264 = getelementptr inbounds i8, ptr %66, i64 24
  %265 = getelementptr inbounds i8, ptr %66, i64 16
  %266 = getelementptr inbounds i8, ptr %67, i64 8
  %267 = getelementptr inbounds i8, ptr %67, i64 24
  %268 = getelementptr inbounds i8, ptr %67, i64 16
  %269 = insertvalue { ptr, ptr, ptr, i32 } { ptr @HashMap, ptr undef, ptr undef, i32 undef }, ptr %result.i88, 1
  %270 = insertvalue { ptr, ptr, ptr, i32 } %269, ptr undef, 2
  %271 = insertvalue { ptr, ptr, ptr, i32 } %270, i32 9, 3
  br label %272

272:                                              ; preds = %.lr.ph, %HashMap_insert_keyK_valueV.exit
  %.reg2mem87.0238 = phi i32 [ 0, %.lr.ph ], [ %1442, %HashMap_insert_keyK_valueV.exit ]
  %.reg2mem85.0237 = phi i32 [ -1, %.lr.ph ], [ %286, %HashMap_insert_keyK_valueV.exit ]
  %273 = load i32, ptr %result.i58, align 4
  %274 = mul i32 %273, 1103515245
  %275 = add i32 %274, 12345
  %276 = and i32 %275, 2147483647
  store i32 %276, ptr %result.i58, align 4
  %277 = call ptr @llvm.invariant.start.p0(i64 40, ptr nonnull @PRNG)
  %.sroa.045.0.insert.ext = zext nneg i32 %276 to i160
  %278 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.045.0.insert.ext, 1
  %279 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %280 = load ptr, ptr %175, align 8
  %281 = zext nneg i32 %.reg2mem87.0238 to i64
  %282 = shl nuw nsw i64 %281, 5
  %283 = getelementptr i8, ptr %280, i64 %282
  store ptr @i32_typ, ptr %283, align 8
  %284 = getelementptr i8, ptr %283, i64 8
  store i160 %.sroa.045.0.insert.ext, ptr %284, align 4
  %285 = icmp eq i32 %.reg2mem87.0238, %226
  %286 = select i1 %285, i32 %276, i32 %.reg2mem85.0237
  store i1 true, ptr %.sroa.039.sroa.0, align 8
  %.sroa.039.sroa.0.0..sroa.039.sroa.0.0..sroa.039.sroa.0.0..sroa.039.sroa.0.0..sroa.039.sroa.0.0..sroa.039.sroa.0.0..sroa.039.sroa.0.0..sroa.039.sroa.0.0..sroa.039.sroa.0.0..sroa.039.sroa.0.0..sroa.039.sroa.0.0..sroa.039.sroa.0.0..sroa.039.sroa.0.0..sroa.039.sroa.0.0..sroa.039.sroa.0.0..sroa.039.sroa.0.0..sroa.039.sroa.0.0..sroa.039.sroa.0.0..sroa.039.sroa.0.0..sroa.039.sroa.0.0..sroa.039.sroa.0.0..sroa.039.0. = load i8, ptr %.sroa.039.sroa.0, align 8
  %.sroa.039.0.insert.ext = zext i8 %.sroa.039.sroa.0.0..sroa.039.sroa.0.0..sroa.039.sroa.0.0..sroa.039.sroa.0.0..sroa.039.sroa.0.0..sroa.039.sroa.0.0..sroa.039.sroa.0.0..sroa.039.sroa.0.0..sroa.039.sroa.0.0..sroa.039.sroa.0.0..sroa.039.sroa.0.0..sroa.039.sroa.0.0..sroa.039.sroa.0.0..sroa.039.sroa.0.0..sroa.039.sroa.0.0..sroa.039.sroa.0.0..sroa.039.sroa.0.0..sroa.039.sroa.0.0..sroa.039.sroa.0.0..sroa.039.sroa.0.0..sroa.039.sroa.0.0..sroa.039.0. to i160
  %287 = insertvalue { ptr, i160 } { ptr @bool_typ, i160 undef }, i160 %.sroa.039.0.insert.ext, 1
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %120)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %121)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %122)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %123)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %124)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %125)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %126)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %127)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %128)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %129)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %130)
  %288 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %289 = load ptr, ptr %181, align 8
  %290 = call i32 %289({ ptr, i160 } %278)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %291 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %292 = load ptr, ptr %193, align 8
  %293 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %292, 0
  %294 = load ptr, ptr %194, align 8
  %295 = insertvalue { ptr, ptr, ptr, i32 } %293, ptr %294, 1
  %296 = load ptr, ptr %195, align 8
  %297 = insertvalue { ptr, ptr, ptr, i32 } %295, ptr %296, 2
  %298 = load i32, ptr %196, align 4
  %299 = insertvalue { ptr, ptr, ptr, i32 } %297, i32 %298, 3
  %hash_coef_ptr.i.i10.i = getelementptr i8, ptr %292, i64 8
  %tbl_size_ptr.i.i11.i = getelementptr i8, ptr %292, i64 16
  %offset_tbl_ptr.i.i12.i = getelementptr i8, ptr %292, i64 40
  %hash_coef.i.i13.i = load i64, ptr %hash_coef_ptr.i.i10.i, align 4
  %tbl_size.i.i14.i = load i64, ptr %tbl_size_ptr.i.i11.i, align 4
  %offset_tbl.i.i15.i = load ptr, ptr %offset_tbl_ptr.i.i12.i, align 8
  %product.i.i.i16.i = mul i64 %hash_coef.i.i13.i, -5261542750394134544
  %shifted.i.i.i17.i = lshr i64 %product.i.i.i16.i, 32
  %xored.i.i.i18.i = xor i64 %shifted.i.i.i17.i, %product.i.i.i16.i
  %hash.i.i.i19.i = and i64 %xored.i.i.i18.i, %tbl_size.i.i14.i
  %offset_ptr.i.i20.i = getelementptr i32, ptr %offset_tbl.i.i15.i, i64 %hash.i.i.i19.i
  %offset.i.i21.i = load i32, ptr %offset_ptr.i.i20.i, align 4
  %eq.i.i801 = icmp eq i32 %298, %offset.i.i21.i
  call void @llvm.assume(i1 %eq.i.i801) #30
  %300 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %301 = call ptr @llvm.invariant.start.p0(i64 600, ptr %292)
  %302 = sext i32 %298 to i64
  %303 = getelementptr ptr, ptr %292, i64 %302
  %304 = getelementptr i8, ptr %303, i64 64
  %305 = load ptr, ptr %304, align 8
  %306 = call ptr %305({ ptr, ptr, ptr, i32 } %299, ptr nonnull %2)
  %307 = call i32 %306({ ptr, ptr, ptr, i32 } %299, { ptr, ptr, ptr, i32 } %299, ptr nonnull %2)
  %308 = add i32 %307, -1
  %309 = and i32 %308, %290
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %310 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %311 = load ptr, ptr %193, align 8
  %312 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %311, 0
  %313 = load ptr, ptr %194, align 8
  %314 = insertvalue { ptr, ptr, ptr, i32 } %312, ptr %313, 1
  %315 = load ptr, ptr %195, align 8
  %316 = insertvalue { ptr, ptr, ptr, i32 } %314, ptr %315, 2
  %317 = load i32, ptr %196, align 4
  %318 = insertvalue { ptr, ptr, ptr, i32 } %316, i32 %317, 3
  %hash_coef_ptr.i.i160.i = getelementptr i8, ptr %311, i64 8
  %tbl_size_ptr.i.i161.i = getelementptr i8, ptr %311, i64 16
  %offset_tbl_ptr.i.i162.i = getelementptr i8, ptr %311, i64 40
  %hash_coef.i.i163.i = load i64, ptr %hash_coef_ptr.i.i160.i, align 4
  %tbl_size.i.i164.i = load i64, ptr %tbl_size_ptr.i.i161.i, align 4
  %offset_tbl.i.i165.i = load ptr, ptr %offset_tbl_ptr.i.i162.i, align 8
  %product.i.i.i166.i = mul i64 %hash_coef.i.i163.i, -5261542750394134544
  %shifted.i.i.i167.i = lshr i64 %product.i.i.i166.i, 32
  %xored.i.i.i168.i = xor i64 %shifted.i.i.i167.i, %product.i.i.i166.i
  %hash.i.i.i169.i = and i64 %xored.i.i.i168.i, %tbl_size.i.i164.i
  %offset_ptr.i.i170.i = getelementptr i32, ptr %offset_tbl.i.i165.i, i64 %hash.i.i.i169.i
  %offset.i.i171.i = load i32, ptr %offset_ptr.i.i170.i, align 4
  %eq.i.i = icmp eq i32 %317, %offset.i.i171.i
  call void @llvm.assume(i1 %eq.i.i) #30
  store ptr @_parameterization_Ptri32, ptr %129, align 8
  %319 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %129)
  %320 = call ptr @llvm.invariant.start.p0(i64 600, ptr %311)
  %321 = sext i32 %317 to i64
  %322 = getelementptr ptr, ptr %311, i64 %321
  %323 = getelementptr i8, ptr %322, i64 120
  %324 = load ptr, ptr %323, align 8
  store ptr @i32_typ, ptr %130, align 8
  %325 = call ptr %324({ ptr, ptr, ptr, i32 } %318, ptr nonnull %130)
  %326 = call { ptr, i160 } %325({ ptr, ptr, ptr, i32 } %318, { ptr, ptr, ptr, i32 } %318, ptr nonnull %129, i32 %309)
  %.fca.0.extract.i414 = extractvalue { ptr, i160 } %326, 0
  %327 = icmp ne ptr %.fca.0.extract.i414, @nil_typ
  %328 = icmp ne ptr %.fca.0.extract.i414, null
  %.not151.i = and i1 %327, %328
  br i1 %.not151.i, label %329, label %.critedge.i

329:                                              ; preds = %272
  %.fca.1.extract.i = extractvalue { ptr, i160 } %326, 1
  %.sroa.4518.8.extract.trunc.i = trunc i160 %.fca.1.extract.i to i64
  %330 = inttoptr i64 %.sroa.4518.8.extract.trunc.i to ptr
  %.sroa.7520.8.extract.shift.i = lshr i160 %.fca.1.extract.i, 64
  %.sroa.7520.8.extract.trunc.i = trunc i160 %.sroa.7520.8.extract.shift.i to i64
  %331 = inttoptr i64 %.sroa.7520.8.extract.trunc.i to ptr
  %hash_coef_ptr.i.i174.i = getelementptr i8, ptr %.fca.0.extract.i414, i64 8
  %tbl_size_ptr.i.i175.i = getelementptr i8, ptr %.fca.0.extract.i414, i64 16
  %offset_tbl_ptr.i.i176.i = getelementptr i8, ptr %.fca.0.extract.i414, i64 40
  %hash_coef.i.i177.i = load i64, ptr %hash_coef_ptr.i.i174.i, align 4
  %tbl_size.i.i178.i = load i64, ptr %tbl_size_ptr.i.i175.i, align 4
  %offset_tbl.i.i179.i = load ptr, ptr %offset_tbl_ptr.i.i176.i, align 8
  %product.i.i.i180.i = mul i64 %hash_coef.i.i177.i, 4015701072841558310
  %shifted.i.i.i181.i = lshr i64 %product.i.i.i180.i, 32
  %xored.i.i.i182.i = xor i64 %shifted.i.i.i181.i, %product.i.i.i180.i
  %hash.i.i.i183.i = and i64 %xored.i.i.i182.i, %tbl_size.i.i178.i
  %offset_ptr.i.i184.i = getelementptr i32, ptr %offset_tbl.i.i179.i, i64 %hash.i.i.i183.i
  %offset.i.i185.i = load i32, ptr %offset_ptr.i.i184.i, align 4
  %332 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract.i414, 0
  %333 = insertvalue { ptr, ptr, ptr, i32 } %332, ptr %330, 1
  %334 = insertvalue { ptr, ptr, ptr, i32 } %333, ptr %331, 2
  %335 = insertvalue { ptr, ptr, ptr, i32 } %334, i32 %offset.i.i185.i, 3
  %336 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %337 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %338 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract.i414)
  %339 = sext i32 %offset.i.i185.i to i64
  %340 = getelementptr ptr, ptr %.fca.0.extract.i414, i64 %339
  %341 = getelementptr i8, ptr %340, i64 64
  %342 = load ptr, ptr %341, align 8
  %343 = call ptr %342({ ptr, ptr, ptr, i32 } %335, ptr nonnull %2)
  %344 = call i32 %343({ ptr, ptr, ptr, i32 } %335, { ptr, ptr, ptr, i32 } %335, ptr nonnull %2)
  %345 = icmp eq i32 %344, %290
  br i1 %345, label %346, label %.critedge.i

346:                                              ; preds = %329
  %347 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %348 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %349 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract.i414)
  %350 = getelementptr i8, ptr %340, i64 48
  %351 = load ptr, ptr %350, align 8
  %352 = call ptr %351({ ptr, ptr, ptr, i32 } %335, ptr nonnull %2)
  %353 = call { ptr, i160 } %352({ ptr, ptr, ptr, i32 } %335, { ptr, ptr, ptr, i32 } %335, ptr nonnull %2)
  %354 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %355 = load ptr, ptr %182, align 8
  %356 = call i1 %355({ ptr, i160 } %353, { ptr, i160 } %278)
  br i1 %356, label %.thread525.i, label %.critedge.i

.thread525.i:                                     ; preds = %346
  %357 = load ptr, ptr %result.i88, align 8
  %358 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %359 = load ptr, ptr %176, align 8
  %360 = load ptr, ptr %357, align 8
  %361 = getelementptr i8, ptr %360, i64 48
  %362 = load ptr, ptr %361, align 8
  %363 = call { i64, i64 } %362(ptr nonnull %357)
  %364 = extractvalue { i64, i64 } %363, 0
  %365 = extractvalue { i64, i64 } %363, 1
  %366 = urem i64 20, %365
  %367 = icmp eq i64 %366, 0
  %368 = sub i64 %365, %366
  %369 = select i1 %367, i64 0, i64 %368
  %370 = add i64 %364, 20
  %371 = add i64 %370, %369
  %372 = load ptr, ptr %359, align 8
  %373 = getelementptr i8, ptr %372, i64 48
  %374 = load ptr, ptr %373, align 8
  %375 = call { i64, i64 } %374(ptr nonnull %359)
  %376 = extractvalue { i64, i64 } %375, 0
  %377 = extractvalue { i64, i64 } %375, 1
  %378 = call i64 @llvm.umax.i64(i64 %365, i64 %377)
  %379 = call i64 @llvm.umax.i64(i64 %378, i64 8)
  %380 = urem i64 %371, %377
  %381 = icmp eq i64 %380, 0
  %382 = sub i64 %377, %380
  %383 = select i1 %381, i64 0, i64 %382
  %384 = add i64 %376, %371
  %385 = add i64 %384, %383
  %386 = urem i64 %385, %379
  %387 = icmp eq i64 %386, 0
  %388 = sub i64 %379, %386
  %389 = select i1 %387, i64 0, i64 %388
  %390 = add i64 %389, %385
  %result.i.i415 = call noalias ptr @bump_malloc_inner(i64 noundef %390, ptr nonnull @current_ptr) #29
  store ptr %357, ptr %result.i.i415, align 8
  %391 = getelementptr i8, ptr %result.i.i415, i64 8
  store ptr %359, ptr %391, align 8
  %392 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i.i415)
  store ptr @Entry, ptr %120, align 8
  store ptr %result.i.i415, ptr %235, align 8
  store i32 9, ptr %236, align 8
  %393 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %120)
  %394 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %395 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %396 = load ptr, ptr %357, align 8
  %397 = getelementptr i8, ptr %396, i64 48
  %398 = load ptr, ptr %397, align 8
  %399 = call { i64, i64 } %398(ptr nonnull %357)
  %400 = extractvalue { i64, i64 } %399, 1
  %401 = urem i64 20, %400
  %402 = icmp eq i64 %401, 0
  %reass.sub3080 = sub i64 %400, %401
  %403 = add i64 %reass.sub3080, 20
  %404 = select i1 %402, i64 20, i64 %403
  %405 = getelementptr i8, ptr %result.i.i415, i64 %404
  %406 = load ptr, ptr %result.i.i415, align 8
  %407 = load ptr, ptr %406, align 8
  %408 = getelementptr i8, ptr %407, i64 64
  %409 = load ptr, ptr %408, align 8
  call void %409({ ptr, i160 } %278, ptr nonnull %406, ptr %405)
  %410 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %411 = load ptr, ptr %result.i.i415, align 8
  %412 = load ptr, ptr %411, align 8
  %413 = getelementptr i8, ptr %412, i64 48
  %414 = load ptr, ptr %413, align 8
  %415 = call { i64, i64 } %414(ptr nonnull %411)
  %416 = extractvalue { i64, i64 } %415, 0
  %417 = extractvalue { i64, i64 } %415, 1
  %418 = urem i64 20, %417
  %419 = icmp eq i64 %418, 0
  %420 = sub i64 %417, %418
  %421 = select i1 %419, i64 0, i64 %420
  %422 = add i64 %416, 20
  %423 = add i64 %422, %421
  %424 = load ptr, ptr %391, align 8
  %425 = load ptr, ptr %424, align 8
  %426 = getelementptr i8, ptr %425, i64 48
  %427 = load ptr, ptr %426, align 8
  %428 = call { i64, i64 } %427(ptr nonnull %424)
  %429 = extractvalue { i64, i64 } %428, 1
  %430 = urem i64 %423, %429
  %431 = icmp eq i64 %430, 0
  %432 = sub i64 %429, %430
  %433 = select i1 %431, i64 0, i64 %432
  %434 = getelementptr i8, ptr %result.i.i415, i64 %423
  %435 = getelementptr i8, ptr %434, i64 %433
  %436 = load ptr, ptr %391, align 8
  %437 = load ptr, ptr %436, align 8
  %438 = getelementptr i8, ptr %437, i64 64
  %439 = load ptr, ptr %438, align 8
  call void %439({ ptr, i160 } %287, ptr nonnull %436, ptr %435)
  %440 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %441 = getelementptr i8, ptr %result.i.i415, i64 16
  store i32 %290, ptr %441, align 4
  %442 = load ptr, ptr %237, align 8
  %443 = ptrtoint ptr %result.i.i415 to i64
  %444 = ptrtoint ptr %442 to i64
  %.sroa.2129.0.insert.ext.i = zext i64 %444 to i160
  %.sroa.2129.0.insert.shift.i = shl nuw nsw i160 %.sroa.2129.0.insert.ext.i, 64
  %.sroa.0128.0.insert.ext.i = zext i64 %443 to i160
  %.sroa.2129.0.insert.insert.i = or disjoint i160 %.sroa.2129.0.insert.shift.i, %.sroa.0128.0.insert.ext.i
  %.sroa.0128.0.insert.insert.i = or disjoint i160 %.sroa.2129.0.insert.insert.i, 3062541302288446171170371466885913903104
  %445 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0128.0.insert.insert.i, 1
  %446 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %447 = load ptr, ptr %193, align 8
  %448 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %447, 0
  %449 = load ptr, ptr %194, align 8
  %450 = insertvalue { ptr, ptr, ptr, i32 } %448, ptr %449, 1
  %451 = load ptr, ptr %195, align 8
  %452 = insertvalue { ptr, ptr, ptr, i32 } %450, ptr %451, 2
  %453 = load i32, ptr %196, align 4
  %454 = insertvalue { ptr, ptr, ptr, i32 } %452, i32 %453, 3
  %hash_coef_ptr.i.i202.i = getelementptr i8, ptr %447, i64 8
  %tbl_size_ptr.i.i203.i = getelementptr i8, ptr %447, i64 16
  %offset_tbl_ptr.i.i204.i = getelementptr i8, ptr %447, i64 40
  %hash_coef.i.i205.i = load i64, ptr %hash_coef_ptr.i.i202.i, align 4
  %tbl_size.i.i206.i = load i64, ptr %tbl_size_ptr.i.i203.i, align 4
  %offset_tbl.i.i207.i = load ptr, ptr %offset_tbl_ptr.i.i204.i, align 8
  %product.i.i.i208.i = mul i64 %hash_coef.i.i205.i, -5261542750394134544
  %shifted.i.i.i209.i = lshr i64 %product.i.i.i208.i, 32
  %xored.i.i.i210.i = xor i64 %shifted.i.i.i209.i, %product.i.i.i208.i
  %hash.i.i.i211.i = and i64 %xored.i.i.i210.i, %tbl_size.i.i206.i
  %offset_ptr.i.i212.i = getelementptr i32, ptr %offset_tbl.i.i207.i, i64 %hash.i.i.i211.i
  %offset.i.i213.i = load i32, ptr %offset_ptr.i.i212.i, align 4
  %eq.i216.i = icmp eq i32 %453, %offset.i.i213.i
  call void @llvm.assume(i1 %eq.i216.i) #30
  %455 = load ptr, ptr %result.i88, align 8
  %456 = load ptr, ptr %176, align 8
  %result.i217.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %457 = getelementptr i8, ptr %result.i217.i, i64 16
  store ptr %456, ptr %457, align 8
  %458 = getelementptr i8, ptr %result.i217.i, i64 8
  store ptr %455, ptr %458, align 8
  %459 = getelementptr i8, ptr %result.i217.i, i64 24
  store ptr null, ptr %459, align 8
  %460 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i217.i)
  store ptr @Entry, ptr %result.i217.i, align 8
  store ptr @_parameterization_Ptri32, ptr %121, align 8
  store ptr %result.i217.i, ptr %238, align 8
  %461 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %121)
  %462 = call ptr @llvm.invariant.start.p0(i64 600, ptr %447)
  %463 = sext i32 %453 to i64
  %464 = getelementptr ptr, ptr %447, i64 %463
  %465 = getelementptr i8, ptr %464, i64 128
  %466 = load ptr, ptr %465, align 8
  store ptr @i32_typ, ptr %122, align 8
  store ptr @Entry, ptr %239, align 8
  %467 = call ptr %466({ ptr, ptr, ptr, i32 } %454, ptr nonnull %122)
  call void %467({ ptr, ptr, ptr, i32 } %454, { ptr, ptr, ptr, i32 } %454, ptr nonnull %121, i32 %309, { ptr, i160 } %445)
  br label %HashMap_insert_keyK_valueV.exit

.critedge.i:                                      ; preds = %346, %329, %272
  %468 = add i32 %290, 2127912214
  %469 = shl i32 %290, 12
  %470 = add i32 %468, %469
  %471 = ashr i32 %470, 19
  %472 = xor i32 %470, %471
  %473 = xor i32 %472, -949894596
  %474 = add i32 %473, 374761393
  %475 = shl i32 %473, 5
  %476 = add i32 %474, %475
  %477 = add i32 %476, -744332180
  %478 = shl i32 %476, 9
  %479 = xor i32 %477, %478
  %480 = add i32 %479, -42973499
  %481 = shl i32 %479, 3
  %482 = add i32 %480, %481
  %483 = ashr i32 %482, 16
  %484 = xor i32 %482, %483
  %485 = xor i32 %484, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %486 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %487 = load ptr, ptr %211, align 8
  %488 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %487, 0
  %489 = load ptr, ptr %212, align 8
  %490 = insertvalue { ptr, ptr, ptr, i32 } %488, ptr %489, 1
  %491 = load ptr, ptr %213, align 8
  %492 = insertvalue { ptr, ptr, ptr, i32 } %490, ptr %491, 2
  %493 = load i32, ptr %214, align 4
  %494 = insertvalue { ptr, ptr, ptr, i32 } %492, i32 %493, 3
  %hash_coef_ptr.i.i10.i819 = getelementptr i8, ptr %487, i64 8
  %tbl_size_ptr.i.i11.i820 = getelementptr i8, ptr %487, i64 16
  %offset_tbl_ptr.i.i12.i821 = getelementptr i8, ptr %487, i64 40
  %hash_coef.i.i13.i822 = load i64, ptr %hash_coef_ptr.i.i10.i819, align 4
  %tbl_size.i.i14.i823 = load i64, ptr %tbl_size_ptr.i.i11.i820, align 4
  %offset_tbl.i.i15.i824 = load ptr, ptr %offset_tbl_ptr.i.i12.i821, align 8
  %product.i.i.i16.i825 = mul i64 %hash_coef.i.i13.i822, -5261542750394134544
  %shifted.i.i.i17.i826 = lshr i64 %product.i.i.i16.i825, 32
  %xored.i.i.i18.i827 = xor i64 %shifted.i.i.i17.i826, %product.i.i.i16.i825
  %hash.i.i.i19.i828 = and i64 %xored.i.i.i18.i827, %tbl_size.i.i14.i823
  %offset_ptr.i.i20.i829 = getelementptr i32, ptr %offset_tbl.i.i15.i824, i64 %hash.i.i.i19.i828
  %offset.i.i21.i830 = load i32, ptr %offset_ptr.i.i20.i829, align 4
  %eq.i.i831 = icmp eq i32 %493, %offset.i.i21.i830
  call void @llvm.assume(i1 %eq.i.i831) #30
  %495 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %496 = call ptr @llvm.invariant.start.p0(i64 600, ptr %487)
  %497 = sext i32 %493 to i64
  %498 = getelementptr ptr, ptr %487, i64 %497
  %499 = getelementptr i8, ptr %498, i64 64
  %500 = load ptr, ptr %499, align 8
  %501 = call ptr %500({ ptr, ptr, ptr, i32 } %494, ptr nonnull %2)
  %502 = call i32 %501({ ptr, ptr, ptr, i32 } %494, { ptr, ptr, ptr, i32 } %494, ptr nonnull %2)
  %503 = add i32 %502, -1
  %504 = and i32 %503, %485
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %505 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %506 = load ptr, ptr %211, align 8
  %507 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %506, 0
  %508 = load ptr, ptr %212, align 8
  %509 = insertvalue { ptr, ptr, ptr, i32 } %507, ptr %508, 1
  %510 = load ptr, ptr %213, align 8
  %511 = insertvalue { ptr, ptr, ptr, i32 } %509, ptr %510, 2
  %512 = load i32, ptr %214, align 4
  %513 = insertvalue { ptr, ptr, ptr, i32 } %511, i32 %512, 3
  %hash_coef_ptr.i.i219.i = getelementptr i8, ptr %506, i64 8
  %tbl_size_ptr.i.i220.i = getelementptr i8, ptr %506, i64 16
  %offset_tbl_ptr.i.i221.i = getelementptr i8, ptr %506, i64 40
  %hash_coef.i.i222.i = load i64, ptr %hash_coef_ptr.i.i219.i, align 4
  %tbl_size.i.i223.i = load i64, ptr %tbl_size_ptr.i.i220.i, align 4
  %offset_tbl.i.i224.i = load ptr, ptr %offset_tbl_ptr.i.i221.i, align 8
  %product.i.i.i225.i = mul i64 %hash_coef.i.i222.i, -5261542750394134544
  %shifted.i.i.i226.i = lshr i64 %product.i.i.i225.i, 32
  %xored.i.i.i227.i = xor i64 %shifted.i.i.i226.i, %product.i.i.i225.i
  %hash.i.i.i228.i = and i64 %xored.i.i.i227.i, %tbl_size.i.i223.i
  %offset_ptr.i.i229.i = getelementptr i32, ptr %offset_tbl.i.i224.i, i64 %hash.i.i.i228.i
  %offset.i.i230.i = load i32, ptr %offset_ptr.i.i229.i, align 4
  %eq.i233.i = icmp eq i32 %512, %offset.i.i230.i
  call void @llvm.assume(i1 %eq.i233.i) #30
  store ptr @_parameterization_Ptri32, ptr %123, align 8
  %514 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %123)
  %515 = call ptr @llvm.invariant.start.p0(i64 600, ptr %506)
  %516 = sext i32 %512 to i64
  %517 = getelementptr ptr, ptr %506, i64 %516
  %518 = getelementptr i8, ptr %517, i64 120
  %519 = load ptr, ptr %518, align 8
  store ptr @i32_typ, ptr %124, align 8
  %520 = call ptr %519({ ptr, ptr, ptr, i32 } %513, ptr nonnull %124)
  %521 = call { ptr, i160 } %520({ ptr, ptr, ptr, i32 } %513, { ptr, ptr, ptr, i32 } %513, ptr nonnull %123, i32 %504)
  %.fca.0.extract104.i = extractvalue { ptr, i160 } %521, 0
  %522 = icmp ne ptr %.fca.0.extract104.i, @nil_typ
  %523 = icmp ne ptr %.fca.0.extract104.i, null
  %.not153.i = and i1 %522, %523
  br i1 %.not153.i, label %524, label %.critedge158.i

524:                                              ; preds = %.critedge.i
  %.fca.1.extract106.i = extractvalue { ptr, i160 } %521, 1
  %.sroa.4.8.extract.trunc.i = trunc i160 %.fca.1.extract106.i to i64
  %525 = inttoptr i64 %.sroa.4.8.extract.trunc.i to ptr
  %.sroa.7506.8.extract.shift.i = lshr i160 %.fca.1.extract106.i, 64
  %.sroa.7506.8.extract.trunc.i = trunc i160 %.sroa.7506.8.extract.shift.i to i64
  %526 = inttoptr i64 %.sroa.7506.8.extract.trunc.i to ptr
  %hash_coef_ptr.i.i235.i = getelementptr i8, ptr %.fca.0.extract104.i, i64 8
  %tbl_size_ptr.i.i236.i = getelementptr i8, ptr %.fca.0.extract104.i, i64 16
  %offset_tbl_ptr.i.i237.i = getelementptr i8, ptr %.fca.0.extract104.i, i64 40
  %hash_coef.i.i238.i = load i64, ptr %hash_coef_ptr.i.i235.i, align 4
  %tbl_size.i.i239.i = load i64, ptr %tbl_size_ptr.i.i236.i, align 4
  %offset_tbl.i.i240.i = load ptr, ptr %offset_tbl_ptr.i.i237.i, align 8
  %product.i.i.i241.i = mul i64 %hash_coef.i.i238.i, 4015701072841558310
  %shifted.i.i.i242.i = lshr i64 %product.i.i.i241.i, 32
  %xored.i.i.i243.i = xor i64 %shifted.i.i.i242.i, %product.i.i.i241.i
  %hash.i.i.i244.i = and i64 %xored.i.i.i243.i, %tbl_size.i.i239.i
  %offset_ptr.i.i245.i = getelementptr i32, ptr %offset_tbl.i.i240.i, i64 %hash.i.i.i244.i
  %offset.i.i246.i = load i32, ptr %offset_ptr.i.i245.i, align 4
  %527 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract104.i, 0
  %528 = insertvalue { ptr, ptr, ptr, i32 } %527, ptr %525, 1
  %529 = insertvalue { ptr, ptr, ptr, i32 } %528, ptr %526, 2
  %530 = insertvalue { ptr, ptr, ptr, i32 } %529, i32 %offset.i.i246.i, 3
  %531 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %532 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %533 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract104.i)
  %534 = sext i32 %offset.i.i246.i to i64
  %535 = getelementptr ptr, ptr %.fca.0.extract104.i, i64 %534
  %536 = getelementptr i8, ptr %535, i64 64
  %537 = load ptr, ptr %536, align 8
  %538 = call ptr %537({ ptr, ptr, ptr, i32 } %530, ptr nonnull %2)
  %539 = call i32 %538({ ptr, ptr, ptr, i32 } %530, { ptr, ptr, ptr, i32 } %530, ptr nonnull %2)
  %540 = icmp eq i32 %539, %290
  br i1 %540, label %541, label %.critedge158.i

541:                                              ; preds = %524
  %542 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %543 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %544 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract104.i)
  %545 = getelementptr i8, ptr %535, i64 48
  %546 = load ptr, ptr %545, align 8
  %547 = call ptr %546({ ptr, ptr, ptr, i32 } %530, ptr nonnull %2)
  %548 = call { ptr, i160 } %547({ ptr, ptr, ptr, i32 } %530, { ptr, ptr, ptr, i32 } %530, ptr nonnull %2)
  %549 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %550 = load ptr, ptr %182, align 8
  %551 = call i1 %550({ ptr, i160 } %548, { ptr, i160 } %278)
  br i1 %551, label %.thread528.i, label %.critedge158.i

.thread528.i:                                     ; preds = %541
  %552 = load ptr, ptr %result.i88, align 8
  %553 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %554 = load ptr, ptr %176, align 8
  %555 = load ptr, ptr %552, align 8
  %556 = getelementptr i8, ptr %555, i64 48
  %557 = load ptr, ptr %556, align 8
  %558 = call { i64, i64 } %557(ptr nonnull %552)
  %559 = extractvalue { i64, i64 } %558, 0
  %560 = extractvalue { i64, i64 } %558, 1
  %561 = urem i64 20, %560
  %562 = icmp eq i64 %561, 0
  %563 = sub i64 %560, %561
  %564 = select i1 %562, i64 0, i64 %563
  %565 = add i64 %559, 20
  %566 = add i64 %565, %564
  %567 = load ptr, ptr %554, align 8
  %568 = getelementptr i8, ptr %567, i64 48
  %569 = load ptr, ptr %568, align 8
  %570 = call { i64, i64 } %569(ptr nonnull %554)
  %571 = extractvalue { i64, i64 } %570, 0
  %572 = extractvalue { i64, i64 } %570, 1
  %573 = call i64 @llvm.umax.i64(i64 %560, i64 %572)
  %574 = call i64 @llvm.umax.i64(i64 %573, i64 8)
  %575 = urem i64 %566, %572
  %576 = icmp eq i64 %575, 0
  %577 = sub i64 %572, %575
  %578 = select i1 %576, i64 0, i64 %577
  %579 = add i64 %571, %566
  %580 = add i64 %579, %578
  %581 = urem i64 %580, %574
  %582 = icmp eq i64 %581, 0
  %583 = sub i64 %574, %581
  %584 = select i1 %582, i64 0, i64 %583
  %585 = add i64 %584, %580
  %result.i248.i = call noalias ptr @bump_malloc_inner(i64 noundef %585, ptr nonnull @current_ptr) #29
  store ptr %552, ptr %result.i248.i, align 8
  %586 = getelementptr i8, ptr %result.i248.i, i64 8
  store ptr %554, ptr %586, align 8
  %587 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i248.i)
  store ptr @Entry, ptr %125, align 8
  store ptr %result.i248.i, ptr %230, align 8
  store i32 9, ptr %231, align 8
  %588 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %125)
  %589 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %590 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %591 = load ptr, ptr %552, align 8
  %592 = getelementptr i8, ptr %591, i64 48
  %593 = load ptr, ptr %592, align 8
  %594 = call { i64, i64 } %593(ptr nonnull %552)
  %595 = extractvalue { i64, i64 } %594, 1
  %596 = urem i64 20, %595
  %597 = icmp eq i64 %596, 0
  %reass.sub3079 = sub i64 %595, %596
  %598 = add i64 %reass.sub3079, 20
  %599 = select i1 %597, i64 20, i64 %598
  %600 = getelementptr i8, ptr %result.i248.i, i64 %599
  %601 = load ptr, ptr %result.i248.i, align 8
  %602 = load ptr, ptr %601, align 8
  %603 = getelementptr i8, ptr %602, i64 64
  %604 = load ptr, ptr %603, align 8
  call void %604({ ptr, i160 } %278, ptr nonnull %601, ptr %600)
  %605 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %606 = load ptr, ptr %result.i248.i, align 8
  %607 = load ptr, ptr %606, align 8
  %608 = getelementptr i8, ptr %607, i64 48
  %609 = load ptr, ptr %608, align 8
  %610 = call { i64, i64 } %609(ptr nonnull %606)
  %611 = extractvalue { i64, i64 } %610, 0
  %612 = extractvalue { i64, i64 } %610, 1
  %613 = urem i64 20, %612
  %614 = icmp eq i64 %613, 0
  %615 = sub i64 %612, %613
  %616 = select i1 %614, i64 0, i64 %615
  %617 = add i64 %611, 20
  %618 = add i64 %617, %616
  %619 = load ptr, ptr %586, align 8
  %620 = load ptr, ptr %619, align 8
  %621 = getelementptr i8, ptr %620, i64 48
  %622 = load ptr, ptr %621, align 8
  %623 = call { i64, i64 } %622(ptr nonnull %619)
  %624 = extractvalue { i64, i64 } %623, 1
  %625 = urem i64 %618, %624
  %626 = icmp eq i64 %625, 0
  %627 = sub i64 %624, %625
  %628 = select i1 %626, i64 0, i64 %627
  %629 = getelementptr i8, ptr %result.i248.i, i64 %618
  %630 = getelementptr i8, ptr %629, i64 %628
  %631 = load ptr, ptr %586, align 8
  %632 = load ptr, ptr %631, align 8
  %633 = getelementptr i8, ptr %632, i64 64
  %634 = load ptr, ptr %633, align 8
  call void %634({ ptr, i160 } %287, ptr nonnull %631, ptr %630)
  %635 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %636 = getelementptr i8, ptr %result.i248.i, i64 16
  store i32 %290, ptr %636, align 4
  %637 = load ptr, ptr %232, align 8
  %638 = ptrtoint ptr %result.i248.i to i64
  %639 = ptrtoint ptr %637 to i64
  %.sroa.284.0.insert.ext.i = zext i64 %639 to i160
  %.sroa.284.0.insert.shift.i = shl nuw nsw i160 %.sroa.284.0.insert.ext.i, 64
  %.sroa.083.0.insert.ext.i = zext i64 %638 to i160
  %.sroa.284.0.insert.insert.i = or disjoint i160 %.sroa.284.0.insert.shift.i, %.sroa.083.0.insert.ext.i
  %.sroa.083.0.insert.insert.i = or disjoint i160 %.sroa.284.0.insert.insert.i, 3062541302288446171170371466885913903104
  %640 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.083.0.insert.insert.i, 1
  %641 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %642 = load ptr, ptr %211, align 8
  %643 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %642, 0
  %644 = load ptr, ptr %212, align 8
  %645 = insertvalue { ptr, ptr, ptr, i32 } %643, ptr %644, 1
  %646 = load ptr, ptr %213, align 8
  %647 = insertvalue { ptr, ptr, ptr, i32 } %645, ptr %646, 2
  %648 = load i32, ptr %214, align 4
  %649 = insertvalue { ptr, ptr, ptr, i32 } %647, i32 %648, 3
  %hash_coef_ptr.i.i264.i = getelementptr i8, ptr %642, i64 8
  %tbl_size_ptr.i.i265.i = getelementptr i8, ptr %642, i64 16
  %offset_tbl_ptr.i.i266.i = getelementptr i8, ptr %642, i64 40
  %hash_coef.i.i267.i = load i64, ptr %hash_coef_ptr.i.i264.i, align 4
  %tbl_size.i.i268.i = load i64, ptr %tbl_size_ptr.i.i265.i, align 4
  %offset_tbl.i.i269.i = load ptr, ptr %offset_tbl_ptr.i.i266.i, align 8
  %product.i.i.i270.i = mul i64 %hash_coef.i.i267.i, -5261542750394134544
  %shifted.i.i.i271.i = lshr i64 %product.i.i.i270.i, 32
  %xored.i.i.i272.i = xor i64 %shifted.i.i.i271.i, %product.i.i.i270.i
  %hash.i.i.i273.i = and i64 %xored.i.i.i272.i, %tbl_size.i.i268.i
  %offset_ptr.i.i274.i = getelementptr i32, ptr %offset_tbl.i.i269.i, i64 %hash.i.i.i273.i
  %offset.i.i275.i = load i32, ptr %offset_ptr.i.i274.i, align 4
  %eq.i278.i = icmp eq i32 %648, %offset.i.i275.i
  call void @llvm.assume(i1 %eq.i278.i) #30
  %650 = load ptr, ptr %result.i88, align 8
  %651 = load ptr, ptr %176, align 8
  %result.i279.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %652 = getelementptr i8, ptr %result.i279.i, i64 16
  store ptr %651, ptr %652, align 8
  %653 = getelementptr i8, ptr %result.i279.i, i64 8
  store ptr %650, ptr %653, align 8
  %654 = getelementptr i8, ptr %result.i279.i, i64 24
  store ptr null, ptr %654, align 8
  %655 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i279.i)
  store ptr @Entry, ptr %result.i279.i, align 8
  store ptr @_parameterization_Ptri32, ptr %126, align 8
  store ptr %result.i279.i, ptr %233, align 8
  %656 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %126)
  %657 = call ptr @llvm.invariant.start.p0(i64 600, ptr %642)
  %658 = sext i32 %648 to i64
  %659 = getelementptr ptr, ptr %642, i64 %658
  %660 = getelementptr i8, ptr %659, i64 128
  %661 = load ptr, ptr %660, align 8
  store ptr @i32_typ, ptr %127, align 8
  store ptr @Entry, ptr %234, align 8
  %662 = call ptr %661({ ptr, ptr, ptr, i32 } %649, ptr nonnull %127)
  call void %662({ ptr, ptr, ptr, i32 } %649, { ptr, ptr, ptr, i32 } %649, ptr nonnull %126, i32 %504, { ptr, i160 } %640)
  br label %HashMap_insert_keyK_valueV.exit

.critedge158.i:                                   ; preds = %541, %524, %.critedge.i
  %663 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %664 = load ptr, ptr %193, align 8
  %665 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %664, 0
  %666 = load ptr, ptr %194, align 8
  %667 = insertvalue { ptr, ptr, ptr, i32 } %665, ptr %666, 1
  %668 = load ptr, ptr %195, align 8
  %669 = insertvalue { ptr, ptr, ptr, i32 } %667, ptr %668, 2
  %670 = load i32, ptr %196, align 4
  %671 = insertvalue { ptr, ptr, ptr, i32 } %669, i32 %670, 3
  %hash_coef_ptr.i.i281.i = getelementptr i8, ptr %664, i64 8
  %tbl_size_ptr.i.i282.i = getelementptr i8, ptr %664, i64 16
  %offset_tbl_ptr.i.i283.i = getelementptr i8, ptr %664, i64 40
  %hash_coef.i.i284.i = load i64, ptr %hash_coef_ptr.i.i281.i, align 4
  %tbl_size.i.i285.i = load i64, ptr %tbl_size_ptr.i.i282.i, align 4
  %offset_tbl.i.i286.i = load ptr, ptr %offset_tbl_ptr.i.i283.i, align 8
  %product.i.i.i287.i = mul i64 %hash_coef.i.i284.i, -5261542750394134544
  %shifted.i.i.i288.i = lshr i64 %product.i.i.i287.i, 32
  %xored.i.i.i289.i = xor i64 %shifted.i.i.i288.i, %product.i.i.i287.i
  %hash.i.i.i290.i = and i64 %xored.i.i.i289.i, %tbl_size.i.i285.i
  %offset_ptr.i.i291.i = getelementptr i32, ptr %offset_tbl.i.i286.i, i64 %hash.i.i.i290.i
  %offset.i.i292.i = load i32, ptr %offset_ptr.i.i291.i, align 4
  %eq.i295.i = icmp eq i32 %670, %offset.i.i292.i
  call void @llvm.assume(i1 %eq.i295.i) #30
  %672 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %673 = call ptr @llvm.invariant.start.p0(i64 600, ptr %664)
  %674 = sext i32 %670 to i64
  %675 = getelementptr ptr, ptr %664, i64 %674
  %676 = getelementptr i8, ptr %675, i64 64
  %677 = load ptr, ptr %676, align 8
  %678 = call ptr %677({ ptr, ptr, ptr, i32 } %671, ptr nonnull %2)
  %679 = call i32 %678({ ptr, ptr, ptr, i32 } %671, { ptr, ptr, ptr, i32 } %671, ptr nonnull %2)
  %680 = load i32, ptr %215, align 4
  %.not.i = icmp slt i32 %680, %679
  br i1 %.not.i, label %._crit_edge2.i, label %681

681:                                              ; preds = %.critedge158.i
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %103)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %104)
  %682 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %683 = load ptr, ptr %193, align 8
  %684 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %683, 0
  %685 = load ptr, ptr %194, align 8
  %686 = insertvalue { ptr, ptr, ptr, i32 } %684, ptr %685, 1
  %687 = load ptr, ptr %195, align 8
  %688 = insertvalue { ptr, ptr, ptr, i32 } %686, ptr %687, 2
  %689 = load i32, ptr %196, align 4
  %690 = insertvalue { ptr, ptr, ptr, i32 } %688, i32 %689, 3
  %hash_coef_ptr.i.i18.i = getelementptr i8, ptr %683, i64 8
  %tbl_size_ptr.i.i19.i = getelementptr i8, ptr %683, i64 16
  %offset_tbl_ptr.i.i20.i = getelementptr i8, ptr %683, i64 40
  %hash_coef.i.i21.i = load i64, ptr %hash_coef_ptr.i.i18.i, align 4
  %tbl_size.i.i22.i = load i64, ptr %tbl_size_ptr.i.i19.i, align 4
  %offset_tbl.i.i23.i = load ptr, ptr %offset_tbl_ptr.i.i20.i, align 8
  %product.i.i.i24.i = mul i64 %hash_coef.i.i21.i, -5261542750394134544
  %shifted.i.i.i25.i = lshr i64 %product.i.i.i24.i, 32
  %xored.i.i.i26.i = xor i64 %shifted.i.i.i25.i, %product.i.i.i24.i
  %hash.i.i.i27.i = and i64 %xored.i.i.i26.i, %tbl_size.i.i22.i
  %offset_ptr.i.i28.i = getelementptr i32, ptr %offset_tbl.i.i23.i, i64 %hash.i.i.i27.i
  %offset.i.i29.i = load i32, ptr %offset_ptr.i.i28.i, align 4
  %eq.i.i845 = icmp eq i32 %689, %offset.i.i29.i
  call void @llvm.assume(i1 %eq.i.i845) #30
  %691 = load ptr, ptr %211, align 8
  %692 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %691, 0
  %693 = load ptr, ptr %212, align 8
  %694 = insertvalue { ptr, ptr, ptr, i32 } %692, ptr %693, 1
  %695 = load ptr, ptr %213, align 8
  %696 = insertvalue { ptr, ptr, ptr, i32 } %694, ptr %695, 2
  %697 = load i32, ptr %214, align 4
  %hash_coef_ptr.i.i46.i = getelementptr i8, ptr %691, i64 8
  %tbl_size_ptr.i.i47.i = getelementptr i8, ptr %691, i64 16
  %offset_tbl_ptr.i.i48.i = getelementptr i8, ptr %691, i64 40
  %hash_coef.i.i49.i = load i64, ptr %hash_coef_ptr.i.i46.i, align 4
  %tbl_size.i.i50.i = load i64, ptr %tbl_size_ptr.i.i47.i, align 4
  %offset_tbl.i.i51.i = load ptr, ptr %offset_tbl_ptr.i.i48.i, align 8
  %product.i.i.i52.i = mul i64 %hash_coef.i.i49.i, -5261542750394134544
  %shifted.i.i.i53.i = lshr i64 %product.i.i.i52.i, 32
  %xored.i.i.i54.i = xor i64 %shifted.i.i.i53.i, %product.i.i.i52.i
  %hash.i.i.i55.i = and i64 %xored.i.i.i54.i, %tbl_size.i.i50.i
  %offset_ptr.i.i56.i = getelementptr i32, ptr %offset_tbl.i.i51.i, i64 %hash.i.i.i55.i
  %offset.i.i57.i = load i32, ptr %offset_ptr.i.i56.i, align 4
  %eq.i60.i = icmp eq i32 %697, %offset.i.i57.i
  call void @llvm.assume(i1 %eq.i60.i) #30
  %698 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %699 = call ptr @llvm.invariant.start.p0(i64 600, ptr %683)
  %700 = sext i32 %689 to i64
  %701 = getelementptr ptr, ptr %683, i64 %700
  %702 = getelementptr i8, ptr %701, i64 64
  %703 = load ptr, ptr %702, align 8
  %704 = call ptr %703({ ptr, ptr, ptr, i32 } %690, ptr nonnull %2)
  %705 = call i32 %704({ ptr, ptr, ptr, i32 } %690, { ptr, ptr, ptr, i32 } %690, ptr nonnull %2)
  %706 = shl i32 %705, 1
  %707 = call i32 @llvm.smax.i32(i32 %706, i32 16)
  %708 = load ptr, ptr %result.i88, align 8
  %709 = load ptr, ptr %176, align 8
  %result.i.i850 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %710 = getelementptr i8, ptr %result.i.i850, i64 16
  store ptr @_parameterization_Nil, ptr %710, align 8
  %result.i75.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %711 = getelementptr i8, ptr %result.i75.i, i64 16
  store ptr %709, ptr %711, align 8
  %712 = getelementptr i8, ptr %result.i75.i, i64 8
  store ptr %708, ptr %712, align 8
  %713 = getelementptr i8, ptr %result.i75.i, i64 24
  store ptr null, ptr %713, align 8
  %714 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i75.i)
  store ptr @Entry, ptr %result.i75.i, align 8
  %715 = getelementptr i8, ptr %result.i.i850, i64 8
  store ptr %result.i75.i, ptr %715, align 8
  %716 = getelementptr i8, ptr %result.i.i850, i64 24
  store ptr null, ptr %716, align 8
  %717 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i850)
  store ptr @union_typ, ptr %result.i.i850, align 8
  %result.i76.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i850, ptr %result.i76.i, align 8
  %718 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i76.i)
  store ptr @Array, ptr %103, align 8
  store ptr %result.i76.i, ptr %240, align 8
  store i32 9, ptr %241, align 8
  %719 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %103)
  %720 = getelementptr i8, ptr %result.i76.i, i64 16
  store i32 %707, ptr %720, align 4
  %721 = getelementptr i8, ptr %result.i76.i, i64 20
  store i32 %707, ptr %721, align 4
  %722 = zext nneg i32 %707 to i64
  %723 = shl nuw nsw i64 %722, 5
  %result.i.i.i851 = call noalias ptr @bump_malloc_inner(i64 noundef %723, ptr nonnull @current_ptr) #29
  %724 = getelementptr i8, ptr %result.i76.i, i64 8
  store ptr %result.i.i.i851, ptr %724, align 8
  %725 = load ptr, ptr %242, align 8
  store ptr @Array, ptr %193, align 8
  store ptr %result.i76.i, ptr %194, align 8
  store ptr %725, ptr %195, align 8
  store i32 9, ptr %196, align 4
  %result.i91.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %726 = getelementptr i8, ptr %result.i91.i, i64 16
  store ptr @_parameterization_Nil, ptr %726, align 8
  %result.i92.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %727 = getelementptr i8, ptr %result.i92.i, i64 16
  store ptr %709, ptr %727, align 8
  %728 = getelementptr i8, ptr %result.i92.i, i64 8
  store ptr %708, ptr %728, align 8
  %729 = getelementptr i8, ptr %result.i92.i, i64 24
  store ptr null, ptr %729, align 8
  %730 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i92.i)
  store ptr @Entry, ptr %result.i92.i, align 8
  %731 = getelementptr i8, ptr %result.i91.i, i64 8
  store ptr %result.i92.i, ptr %731, align 8
  %732 = getelementptr i8, ptr %result.i91.i, i64 24
  store ptr null, ptr %732, align 8
  %733 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i91.i)
  store ptr @union_typ, ptr %result.i91.i, align 8
  %result.i93.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i91.i, ptr %result.i93.i, align 8
  %734 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i93.i)
  store ptr @Array, ptr %104, align 8
  store ptr %result.i93.i, ptr %243, align 8
  store i32 9, ptr %244, align 8
  %735 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %104)
  %736 = getelementptr i8, ptr %result.i93.i, i64 16
  store i32 %707, ptr %736, align 4
  %737 = getelementptr i8, ptr %result.i93.i, i64 20
  store i32 %707, ptr %737, align 4
  %result.i.i234.i = call noalias ptr @bump_malloc_inner(i64 noundef %723, ptr nonnull @current_ptr) #29
  %738 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %739 = getelementptr i8, ptr %result.i93.i, i64 8
  store ptr %result.i.i234.i, ptr %739, align 8
  %740 = load ptr, ptr %245, align 8
  store ptr @Array, ptr %211, align 8
  store ptr %result.i93.i, ptr %212, align 8
  store ptr %740, ptr %213, align 8
  store i32 9, ptr %214, align 4
  store i32 0, ptr %215, align 4
  %741 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %25)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %26)
  %742 = icmp sgt i32 %705, 0
  br i1 %742, label %.lr.ph.i2211, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2264.critedge

.lr.ph.i2211:                                     ; preds = %681
  %invariant.gep.i = getelementptr i8, ptr %683, i64 120
  %offset_tbl.i.i24.i = load ptr, ptr %offset_tbl_ptr.i.i20.i, align 8
  %hash_coef.i.i22.i = load i64, ptr %hash_coef_ptr.i.i18.i, align 4
  %product.i.i.i25.i = mul i64 %hash_coef.i.i22.i, -5261542750394134544
  %shifted.i.i.i26.i = lshr i64 %product.i.i.i25.i, 32
  %xored.i.i.i27.i = xor i64 %shifted.i.i.i26.i, %product.i.i.i25.i
  %tbl_size.i.i23.i = load i64, ptr %tbl_size_ptr.i.i19.i, align 4
  %hash.i.i.i28.i = and i64 %xored.i.i.i27.i, %tbl_size.i.i23.i
  %offset_ptr.i.i29.i = getelementptr i32, ptr %offset_tbl.i.i24.i, i64 %hash.i.i.i28.i
  %offset.i.i30.i = load i32, ptr %offset_ptr.i.i29.i, align 4
  %743 = insertvalue { ptr, ptr, ptr, i32 } %688, i32 %offset.i.i30.i, 3
  %744 = sext i32 %offset.i.i30.i to i64
  %gep.i = getelementptr ptr, ptr %invariant.gep.i, i64 %744
  %745 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %746

746:                                              ; preds = %._crit_edge1.i, %.lr.ph.i2211
  %.reg2mem13.079.i = phi i32 [ 0, %.lr.ph.i2211 ], [ %763, %._crit_edge1.i ]
  store ptr @_parameterization_Ptri32, ptr %25, align 8
  %747 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %25)
  %748 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %683)
  %749 = load ptr, ptr %gep.i, align 8
  store ptr @i32_typ, ptr %26, align 8
  %750 = call ptr %749({ ptr, ptr, ptr, i32 } %743, ptr nonnull %26)
  %751 = call { ptr, i160 } %750({ ptr, ptr, ptr, i32 } %743, { ptr, ptr, ptr, i32 } %743, ptr nonnull %25, i32 %.reg2mem13.079.i)
  %.fca.0.extract11.i = extractvalue { ptr, i160 } %751, 0
  %752 = icmp ne ptr %.fca.0.extract11.i, @nil_typ
  %753 = icmp ne ptr %.fca.0.extract11.i, null
  %.not17.i = and i1 %752, %753
  br i1 %.not17.i, label %754, label %._crit_edge1.i

754:                                              ; preds = %746
  %.fca.1.extract13.i = extractvalue { ptr, i160 } %751, 1
  %.sroa.375.8.extract.trunc.i = trunc i160 %.fca.1.extract13.i to i64
  %755 = inttoptr i64 %.sroa.375.8.extract.trunc.i to ptr
  %.sroa.576.8.extract.shift.i = lshr i160 %.fca.1.extract13.i, 64
  %.sroa.576.8.extract.trunc.i = trunc i160 %.sroa.576.8.extract.shift.i to i64
  %756 = inttoptr i64 %.sroa.576.8.extract.trunc.i to ptr
  %hash_coef_ptr.i.i33.i = getelementptr i8, ptr %.fca.0.extract11.i, i64 8
  %tbl_size_ptr.i.i34.i = getelementptr i8, ptr %.fca.0.extract11.i, i64 16
  %offset_tbl_ptr.i.i35.i = getelementptr i8, ptr %.fca.0.extract11.i, i64 40
  %hash_coef.i.i36.i = load i64, ptr %hash_coef_ptr.i.i33.i, align 4
  %tbl_size.i.i37.i = load i64, ptr %tbl_size_ptr.i.i34.i, align 4
  %offset_tbl.i.i38.i = load ptr, ptr %offset_tbl_ptr.i.i35.i, align 8
  %product.i.i.i39.i = mul i64 %hash_coef.i.i36.i, 4015701072841558310
  %shifted.i.i.i40.i = lshr i64 %product.i.i.i39.i, 32
  %xored.i.i.i41.i = xor i64 %shifted.i.i.i40.i, %product.i.i.i39.i
  %hash.i.i.i42.i = and i64 %xored.i.i.i41.i, %tbl_size.i.i37.i
  %offset_ptr.i.i43.i = getelementptr i32, ptr %offset_tbl.i.i38.i, i64 %hash.i.i.i42.i
  %offset.i.i58.i = load i32, ptr %offset_ptr.i.i43.i, align 4
  %757 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i, 0
  %758 = insertvalue { ptr, ptr, ptr, i32 } %757, ptr %755, 1
  %759 = insertvalue { ptr, ptr, ptr, i32 } %758, ptr %756, 2
  %760 = insertvalue { ptr, ptr, ptr, i32 } %759, i32 %offset.i.i58.i, 3
  %761 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %762 = call { ptr, i160 } @HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %271, { ptr, ptr, ptr, i32 } poison, ptr nonnull poison, { ptr, ptr, ptr, i32 } %760)
  br label %._crit_edge1.i

._crit_edge1.i:                                   ; preds = %754, %746
  %763 = add nuw nsw i32 %.reg2mem13.079.i, 1
  %764 = icmp slt i32 %763, %705
  br i1 %764, label %746, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit: ; preds = %._crit_edge1.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %25)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %26)
  %765 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %23)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %24)
  %invariant.gep.i2216 = getelementptr i8, ptr %691, i64 120
  %offset_tbl.i.i24.i2218 = load ptr, ptr %offset_tbl_ptr.i.i48.i, align 8
  %hash_coef.i.i22.i2220 = load i64, ptr %hash_coef_ptr.i.i46.i, align 4
  %product.i.i.i25.i2221 = mul i64 %hash_coef.i.i22.i2220, -5261542750394134544
  %shifted.i.i.i26.i2222 = lshr i64 %product.i.i.i25.i2221, 32
  %xored.i.i.i27.i2223 = xor i64 %shifted.i.i.i26.i2222, %product.i.i.i25.i2221
  %tbl_size.i.i23.i2225 = load i64, ptr %tbl_size_ptr.i.i47.i, align 4
  %hash.i.i.i28.i2226 = and i64 %xored.i.i.i27.i2223, %tbl_size.i.i23.i2225
  %offset_ptr.i.i29.i2227 = getelementptr i32, ptr %offset_tbl.i.i24.i2218, i64 %hash.i.i.i28.i2226
  %offset.i.i30.i2228 = load i32, ptr %offset_ptr.i.i29.i2227, align 4
  %766 = insertvalue { ptr, ptr, ptr, i32 } %696, i32 %offset.i.i30.i2228, 3
  %767 = sext i32 %offset.i.i30.i2228 to i64
  %gep.i2242 = getelementptr ptr, ptr %invariant.gep.i2216, i64 %767
  %768 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %769

769:                                              ; preds = %._crit_edge1.i2246, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit
  %.reg2mem13.079.i2243 = phi i32 [ 0, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit ], [ %786, %._crit_edge1.i2246 ]
  store ptr @_parameterization_Ptri32, ptr %23, align 8
  %770 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %23)
  %771 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %691)
  %772 = load ptr, ptr %gep.i2242, align 8
  store ptr @i32_typ, ptr %24, align 8
  %773 = call ptr %772({ ptr, ptr, ptr, i32 } %766, ptr nonnull %24)
  %774 = call { ptr, i160 } %773({ ptr, ptr, ptr, i32 } %766, { ptr, ptr, ptr, i32 } %766, ptr nonnull %23, i32 %.reg2mem13.079.i2243)
  %.fca.0.extract11.i2244 = extractvalue { ptr, i160 } %774, 0
  %775 = icmp ne ptr %.fca.0.extract11.i2244, @nil_typ
  %776 = icmp ne ptr %.fca.0.extract11.i2244, null
  %.not17.i2245 = and i1 %775, %776
  br i1 %.not17.i2245, label %777, label %._crit_edge1.i2246

777:                                              ; preds = %769
  %.fca.1.extract13.i2247 = extractvalue { ptr, i160 } %774, 1
  %.sroa.375.8.extract.trunc.i2248 = trunc i160 %.fca.1.extract13.i2247 to i64
  %778 = inttoptr i64 %.sroa.375.8.extract.trunc.i2248 to ptr
  %.sroa.576.8.extract.shift.i2249 = lshr i160 %.fca.1.extract13.i2247, 64
  %.sroa.576.8.extract.trunc.i2250 = trunc i160 %.sroa.576.8.extract.shift.i2249 to i64
  %779 = inttoptr i64 %.sroa.576.8.extract.trunc.i2250 to ptr
  %hash_coef_ptr.i.i33.i2251 = getelementptr i8, ptr %.fca.0.extract11.i2244, i64 8
  %tbl_size_ptr.i.i34.i2252 = getelementptr i8, ptr %.fca.0.extract11.i2244, i64 16
  %offset_tbl_ptr.i.i35.i2253 = getelementptr i8, ptr %.fca.0.extract11.i2244, i64 40
  %hash_coef.i.i36.i2254 = load i64, ptr %hash_coef_ptr.i.i33.i2251, align 4
  %tbl_size.i.i37.i2255 = load i64, ptr %tbl_size_ptr.i.i34.i2252, align 4
  %offset_tbl.i.i38.i2256 = load ptr, ptr %offset_tbl_ptr.i.i35.i2253, align 8
  %product.i.i.i39.i2257 = mul i64 %hash_coef.i.i36.i2254, 4015701072841558310
  %shifted.i.i.i40.i2258 = lshr i64 %product.i.i.i39.i2257, 32
  %xored.i.i.i41.i2259 = xor i64 %shifted.i.i.i40.i2258, %product.i.i.i39.i2257
  %hash.i.i.i42.i2260 = and i64 %xored.i.i.i41.i2259, %tbl_size.i.i37.i2255
  %offset_ptr.i.i43.i2261 = getelementptr i32, ptr %offset_tbl.i.i38.i2256, i64 %hash.i.i.i42.i2260
  %offset.i.i58.i2262 = load i32, ptr %offset_ptr.i.i43.i2261, align 4
  %780 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i2244, 0
  %781 = insertvalue { ptr, ptr, ptr, i32 } %780, ptr %778, 1
  %782 = insertvalue { ptr, ptr, ptr, i32 } %781, ptr %779, 2
  %783 = insertvalue { ptr, ptr, ptr, i32 } %782, i32 %offset.i.i58.i2262, 3
  %784 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %785 = call { ptr, i160 } @HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %271, { ptr, ptr, ptr, i32 } poison, ptr nonnull poison, { ptr, ptr, ptr, i32 } %783)
  br label %._crit_edge1.i2246

._crit_edge1.i2246:                               ; preds = %777, %769
  %786 = add nuw nsw i32 %.reg2mem13.079.i2243, 1
  %787 = icmp slt i32 %786, %705
  br i1 %787, label %769, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2264

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2264.critedge: ; preds = %681
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %25)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %26)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %23)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %24)
  br label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2264

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2264: ; preds = %._crit_edge1.i2246, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2264.critedge
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %23)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %24)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %103)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %104)
  br label %._crit_edge2.i

._crit_edge2.i:                                   ; preds = %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2264, %.critedge158.i
  %788 = load ptr, ptr %result.i88, align 8
  %789 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %790 = load ptr, ptr %176, align 8
  %791 = load ptr, ptr %788, align 8
  %792 = getelementptr i8, ptr %791, i64 48
  %793 = load ptr, ptr %792, align 8
  %794 = call { i64, i64 } %793(ptr nonnull %788)
  %795 = extractvalue { i64, i64 } %794, 0
  %796 = extractvalue { i64, i64 } %794, 1
  %797 = urem i64 20, %796
  %798 = icmp eq i64 %797, 0
  %799 = sub i64 %796, %797
  %800 = select i1 %798, i64 0, i64 %799
  %801 = add i64 %795, 20
  %802 = add i64 %801, %800
  %803 = load ptr, ptr %790, align 8
  %804 = getelementptr i8, ptr %803, i64 48
  %805 = load ptr, ptr %804, align 8
  %806 = call { i64, i64 } %805(ptr nonnull %790)
  %807 = extractvalue { i64, i64 } %806, 0
  %808 = extractvalue { i64, i64 } %806, 1
  %809 = call i64 @llvm.umax.i64(i64 %796, i64 %808)
  %810 = call i64 @llvm.umax.i64(i64 %809, i64 8)
  %811 = urem i64 %802, %808
  %812 = icmp eq i64 %811, 0
  %813 = sub i64 %808, %811
  %814 = select i1 %812, i64 0, i64 %813
  %815 = add i64 %807, %802
  %816 = add i64 %815, %814
  %817 = urem i64 %816, %810
  %818 = icmp eq i64 %817, 0
  %819 = sub i64 %810, %817
  %820 = select i1 %818, i64 0, i64 %819
  %821 = add i64 %820, %816
  %result.i296.i = call noalias ptr @bump_malloc_inner(i64 noundef %821, ptr nonnull @current_ptr) #29
  store ptr %788, ptr %result.i296.i, align 8
  %822 = getelementptr i8, ptr %result.i296.i, i64 8
  store ptr %790, ptr %822, align 8
  %823 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i296.i)
  store ptr @Entry, ptr %128, align 8
  store ptr %result.i296.i, ptr %227, align 8
  store i32 9, ptr %228, align 8
  %824 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %128)
  %825 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %826 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %827 = load ptr, ptr %788, align 8
  %828 = getelementptr i8, ptr %827, i64 48
  %829 = load ptr, ptr %828, align 8
  %830 = call { i64, i64 } %829(ptr nonnull %788)
  %831 = extractvalue { i64, i64 } %830, 1
  %832 = urem i64 20, %831
  %833 = icmp eq i64 %832, 0
  %reass.sub3078 = sub i64 %831, %832
  %834 = add i64 %reass.sub3078, 20
  %835 = select i1 %833, i64 20, i64 %834
  %836 = getelementptr i8, ptr %result.i296.i, i64 %835
  %837 = load ptr, ptr %result.i296.i, align 8
  %838 = load ptr, ptr %837, align 8
  %839 = getelementptr i8, ptr %838, i64 64
  %840 = load ptr, ptr %839, align 8
  call void %840({ ptr, i160 } %278, ptr nonnull %837, ptr %836)
  %841 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %842 = load ptr, ptr %result.i296.i, align 8
  %843 = load ptr, ptr %842, align 8
  %844 = getelementptr i8, ptr %843, i64 48
  %845 = load ptr, ptr %844, align 8
  %846 = call { i64, i64 } %845(ptr nonnull %842)
  %847 = extractvalue { i64, i64 } %846, 0
  %848 = extractvalue { i64, i64 } %846, 1
  %849 = urem i64 20, %848
  %850 = icmp eq i64 %849, 0
  %851 = sub i64 %848, %849
  %852 = select i1 %850, i64 0, i64 %851
  %853 = add i64 %847, 20
  %854 = add i64 %853, %852
  %855 = load ptr, ptr %822, align 8
  %856 = load ptr, ptr %855, align 8
  %857 = getelementptr i8, ptr %856, i64 48
  %858 = load ptr, ptr %857, align 8
  %859 = call { i64, i64 } %858(ptr nonnull %855)
  %860 = extractvalue { i64, i64 } %859, 1
  %861 = urem i64 %854, %860
  %862 = icmp eq i64 %861, 0
  %863 = sub i64 %860, %861
  %864 = select i1 %862, i64 0, i64 %863
  %865 = getelementptr i8, ptr %result.i296.i, i64 %854
  %866 = getelementptr i8, ptr %865, i64 %864
  %867 = load ptr, ptr %822, align 8
  %868 = load ptr, ptr %867, align 8
  %869 = getelementptr i8, ptr %868, i64 64
  %870 = load ptr, ptr %869, align 8
  call void %870({ ptr, i160 } %287, ptr nonnull %867, ptr %866)
  %871 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %872 = getelementptr i8, ptr %result.i296.i, i64 16
  store i32 %290, ptr %872, align 4
  %873 = load ptr, ptr %229, align 8
  %874 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %86)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %87)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %88)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %89)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %90)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %91)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %92)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0680.i)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %93)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %94)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %95)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %96)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %97)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %98)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %99)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %100)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i852)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %101)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %102)
  store ptr @Entry, ptr %102, align 8
  store ptr %result.i296.i, ptr %246, align 8
  store ptr %873, ptr %247, align 8
  store i32 9, ptr %248, align 8
  %875 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %102)
  %876 = load i32, ptr %216, align 4
  %877 = icmp sgt i32 %876, 0
  br i1 %877, label %.lr.ph.i, label %._crit_edge3.i

.lr.ph.i:                                         ; preds = %._crit_edge2.i
  %878 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %879 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %880 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  br label %881

881:                                              ; preds = %.cont.cont.i, %.lr.ph.i
  %offset.i.i260.i1380 = phi i32 [ 9, %.lr.ph.i ], [ %offset.i.i260.i, %.cont.cont.i ]
  %.sroa.speculated346.i1378 = phi ptr [ %873, %.lr.ph.i ], [ %.sroa.speculated346.i, %.cont.cont.i ]
  %.sroa.speculated352.i1376 = phi ptr [ %result.i296.i, %.lr.ph.i ], [ %.sroa.speculated352.i, %.cont.cont.i ]
  %.reg2mem195.0678.i = phi i32 [ 1, %.lr.ph.i ], [ %1036, %.cont.cont.i ]
  %.reg2mem193.0677.i = phi i32 [ 0, %.lr.ph.i ], [ %1037, %.cont.cont.i ]
  %882 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Entry, ptr undef, ptr undef, i32 undef }, ptr %.sroa.speculated352.i1376, 1
  %883 = insertvalue { ptr, ptr, ptr, i32 } %882, ptr %.sroa.speculated346.i1378, 2
  %884 = insertvalue { ptr, ptr, ptr, i32 } %883, i32 %offset.i.i260.i1380, 3
  %885 = sext i32 %offset.i.i260.i1380 to i64
  %gep1375 = getelementptr ptr, ptr getelementptr inbounds (i8, ptr @Entry, i64 64), i64 %885
  %886 = load ptr, ptr %gep1375, align 8
  %887 = call ptr %886({ ptr, ptr, ptr, i32 } %884, ptr nonnull %2)
  %888 = call i32 %887({ ptr, ptr, ptr, i32 } %884, { ptr, ptr, ptr, i32 } %884, ptr nonnull %2)
  %889 = icmp eq i32 %.reg2mem195.0678.i, 1
  br i1 %889, label %890, label %954

890:                                              ; preds = %881
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %891 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %892 = load ptr, ptr %193, align 8
  %893 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %892, 0
  %894 = load ptr, ptr %194, align 8
  %895 = insertvalue { ptr, ptr, ptr, i32 } %893, ptr %894, 1
  %896 = load ptr, ptr %195, align 8
  %897 = insertvalue { ptr, ptr, ptr, i32 } %895, ptr %896, 2
  %898 = load i32, ptr %196, align 4
  %899 = insertvalue { ptr, ptr, ptr, i32 } %897, i32 %898, 3
  %hash_coef_ptr.i.i10.i2278 = getelementptr i8, ptr %892, i64 8
  %tbl_size_ptr.i.i11.i2279 = getelementptr i8, ptr %892, i64 16
  %offset_tbl_ptr.i.i12.i2280 = getelementptr i8, ptr %892, i64 40
  %hash_coef.i.i13.i2281 = load i64, ptr %hash_coef_ptr.i.i10.i2278, align 4
  %tbl_size.i.i14.i2282 = load i64, ptr %tbl_size_ptr.i.i11.i2279, align 4
  %offset_tbl.i.i15.i2283 = load ptr, ptr %offset_tbl_ptr.i.i12.i2280, align 8
  %product.i.i.i16.i2284 = mul i64 %hash_coef.i.i13.i2281, -5261542750394134544
  %shifted.i.i.i17.i2285 = lshr i64 %product.i.i.i16.i2284, 32
  %xored.i.i.i18.i2286 = xor i64 %shifted.i.i.i17.i2285, %product.i.i.i16.i2284
  %hash.i.i.i19.i2287 = and i64 %xored.i.i.i18.i2286, %tbl_size.i.i14.i2282
  %offset_ptr.i.i20.i2288 = getelementptr i32, ptr %offset_tbl.i.i15.i2283, i64 %hash.i.i.i19.i2287
  %offset.i.i21.i2289 = load i32, ptr %offset_ptr.i.i20.i2288, align 4
  %eq.i.i2290 = icmp eq i32 %898, %offset.i.i21.i2289
  call void @llvm.assume(i1 %eq.i.i2290) #30
  %900 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %901 = call ptr @llvm.invariant.start.p0(i64 600, ptr %892)
  %902 = sext i32 %898 to i64
  %903 = getelementptr ptr, ptr %892, i64 %902
  %904 = getelementptr i8, ptr %903, i64 64
  %905 = load ptr, ptr %904, align 8
  %906 = call ptr %905({ ptr, ptr, ptr, i32 } %899, ptr nonnull %2)
  %907 = call i32 %906({ ptr, ptr, ptr, i32 } %899, { ptr, ptr, ptr, i32 } %899, ptr nonnull %2)
  %908 = add i32 %907, -1
  %909 = and i32 %908, %888
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %910 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %911 = load ptr, ptr %193, align 8
  %912 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %911, 0
  %913 = load ptr, ptr %194, align 8
  %914 = insertvalue { ptr, ptr, ptr, i32 } %912, ptr %913, 1
  %915 = load ptr, ptr %195, align 8
  %916 = insertvalue { ptr, ptr, ptr, i32 } %914, ptr %915, 2
  %917 = load i32, ptr %196, align 4
  %918 = insertvalue { ptr, ptr, ptr, i32 } %916, i32 %917, 3
  %hash_coef_ptr.i.i172.i = getelementptr i8, ptr %911, i64 8
  %tbl_size_ptr.i.i173.i = getelementptr i8, ptr %911, i64 16
  %offset_tbl_ptr.i.i174.i = getelementptr i8, ptr %911, i64 40
  %hash_coef.i.i175.i = load i64, ptr %hash_coef_ptr.i.i172.i, align 4
  %tbl_size.i.i176.i = load i64, ptr %tbl_size_ptr.i.i173.i, align 4
  %offset_tbl.i.i177.i = load ptr, ptr %offset_tbl_ptr.i.i174.i, align 8
  %product.i.i.i178.i = mul i64 %hash_coef.i.i175.i, -5261542750394134544
  %shifted.i.i.i179.i = lshr i64 %product.i.i.i178.i, 32
  %xored.i.i.i180.i = xor i64 %shifted.i.i.i179.i, %product.i.i.i178.i
  %hash.i.i.i181.i = and i64 %xored.i.i.i180.i, %tbl_size.i.i176.i
  %offset_ptr.i.i182.i = getelementptr i32, ptr %offset_tbl.i.i177.i, i64 %hash.i.i.i181.i
  %offset.i.i183.i = load i32, ptr %offset_ptr.i.i182.i, align 4
  %eq.i.i894 = icmp eq i32 %917, %offset.i.i183.i
  call void @llvm.assume(i1 %eq.i.i894) #30
  store ptr @_parameterization_Ptri32, ptr %86, align 8
  %919 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %86)
  %920 = call ptr @llvm.invariant.start.p0(i64 600, ptr %911)
  %921 = sext i32 %917 to i64
  %922 = getelementptr ptr, ptr %911, i64 %921
  %923 = getelementptr i8, ptr %922, i64 120
  %924 = load ptr, ptr %923, align 8
  store ptr @i32_typ, ptr %87, align 8
  %925 = call ptr %924({ ptr, ptr, ptr, i32 } %918, ptr nonnull %87)
  %926 = call { ptr, i160 } %925({ ptr, ptr, ptr, i32 } %918, { ptr, ptr, ptr, i32 } %918, ptr nonnull %86, i32 %909)
  %.fca.0.extract112.i = extractvalue { ptr, i160 } %926, 0
  %927 = ptrtoint ptr %.sroa.speculated352.i1376 to i64
  %928 = ptrtoint ptr %.sroa.speculated346.i1378 to i64
  %.sroa.3111.0.insert.ext.i = zext i32 %offset.i.i260.i1380 to i160
  %.sroa.3111.0.insert.shift.i = shl nuw i160 %.sroa.3111.0.insert.ext.i, 128
  %.sroa.2110.0.insert.ext.i = zext i64 %928 to i160
  %.sroa.2110.0.insert.shift.i = shl nuw nsw i160 %.sroa.2110.0.insert.ext.i, 64
  %.sroa.2110.0.insert.insert.i = or disjoint i160 %.sroa.2110.0.insert.shift.i, %.sroa.3111.0.insert.shift.i
  %.sroa.0109.0.insert.ext.i = zext i64 %927 to i160
  %.sroa.0109.0.insert.insert.i = or disjoint i160 %.sroa.2110.0.insert.insert.i, %.sroa.0109.0.insert.ext.i
  %929 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0109.0.insert.insert.i, 1
  %930 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %931 = load ptr, ptr %193, align 8
  %932 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %931, 0
  %933 = load ptr, ptr %194, align 8
  %934 = insertvalue { ptr, ptr, ptr, i32 } %932, ptr %933, 1
  %935 = load ptr, ptr %195, align 8
  %936 = insertvalue { ptr, ptr, ptr, i32 } %934, ptr %935, 2
  %937 = load i32, ptr %196, align 4
  %938 = insertvalue { ptr, ptr, ptr, i32 } %936, i32 %937, 3
  %hash_coef_ptr.i.i186.i = getelementptr i8, ptr %931, i64 8
  %tbl_size_ptr.i.i187.i = getelementptr i8, ptr %931, i64 16
  %offset_tbl_ptr.i.i188.i = getelementptr i8, ptr %931, i64 40
  %hash_coef.i.i189.i = load i64, ptr %hash_coef_ptr.i.i186.i, align 4
  %tbl_size.i.i190.i = load i64, ptr %tbl_size_ptr.i.i187.i, align 4
  %offset_tbl.i.i191.i = load ptr, ptr %offset_tbl_ptr.i.i188.i, align 8
  %product.i.i.i192.i = mul i64 %hash_coef.i.i189.i, -5261542750394134544
  %shifted.i.i.i193.i = lshr i64 %product.i.i.i192.i, 32
  %xored.i.i.i194.i = xor i64 %shifted.i.i.i193.i, %product.i.i.i192.i
  %hash.i.i.i195.i = and i64 %xored.i.i.i194.i, %tbl_size.i.i190.i
  %offset_ptr.i.i196.i = getelementptr i32, ptr %offset_tbl.i.i191.i, i64 %hash.i.i.i195.i
  %offset.i.i197.i = load i32, ptr %offset_ptr.i.i196.i, align 4
  %eq.i200.i = icmp eq i32 %937, %offset.i.i197.i
  call void @llvm.assume(i1 %eq.i200.i) #30
  %939 = load ptr, ptr %result.i88, align 8
  %940 = load ptr, ptr %176, align 8
  %result.i.i895 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %941 = getelementptr i8, ptr %result.i.i895, i64 16
  store ptr %940, ptr %941, align 8
  %942 = getelementptr i8, ptr %result.i.i895, i64 8
  store ptr %939, ptr %942, align 8
  %943 = getelementptr i8, ptr %result.i.i895, i64 24
  store ptr null, ptr %943, align 8
  %944 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i895)
  store ptr @Entry, ptr %result.i.i895, align 8
  store ptr @_parameterization_Ptri32, ptr %88, align 8
  store ptr %result.i.i895, ptr %251, align 8
  %945 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %88)
  %946 = call ptr @llvm.invariant.start.p0(i64 600, ptr %931)
  %947 = sext i32 %937 to i64
  %948 = getelementptr ptr, ptr %931, i64 %947
  %949 = getelementptr i8, ptr %948, i64 128
  %950 = load ptr, ptr %949, align 8
  store ptr @i32_typ, ptr %89, align 8
  store ptr @Entry, ptr %252, align 8
  %951 = call ptr %950({ ptr, ptr, ptr, i32 } %938, ptr nonnull %89)
  call void %951({ ptr, ptr, ptr, i32 } %938, { ptr, ptr, ptr, i32 } %938, ptr nonnull %88, i32 %909, { ptr, i160 } %929)
  %952 = icmp ne ptr %.fca.0.extract112.i, @nil_typ
  %953 = icmp ne ptr %.fca.0.extract112.i, null
  %.not140.i = and i1 %952, %953
  br i1 %.not140.i, label %.cont.cont.i, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit.thread

954:                                              ; preds = %881
  %955 = add i32 %888, 2127912214
  %956 = shl i32 %888, 12
  %957 = add i32 %955, %956
  %958 = ashr i32 %957, 19
  %959 = xor i32 %957, %958
  %960 = xor i32 %959, -949894596
  %961 = add i32 %960, 374761393
  %962 = shl i32 %960, 5
  %963 = add i32 %961, %962
  %964 = add i32 %963, -744332180
  %965 = shl i32 %963, 9
  %966 = xor i32 %964, %965
  %967 = add i32 %966, -42973499
  %968 = shl i32 %966, 3
  %969 = add i32 %967, %968
  %970 = ashr i32 %969, 16
  %971 = xor i32 %969, %970
  %972 = xor i32 %971, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %973 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %974 = load ptr, ptr %211, align 8
  %975 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %974, 0
  %976 = load ptr, ptr %212, align 8
  %977 = insertvalue { ptr, ptr, ptr, i32 } %975, ptr %976, 1
  %978 = load ptr, ptr %213, align 8
  %979 = insertvalue { ptr, ptr, ptr, i32 } %977, ptr %978, 2
  %980 = load i32, ptr %214, align 4
  %981 = insertvalue { ptr, ptr, ptr, i32 } %979, i32 %980, 3
  %hash_coef_ptr.i.i10.i2308 = getelementptr i8, ptr %974, i64 8
  %tbl_size_ptr.i.i11.i2309 = getelementptr i8, ptr %974, i64 16
  %offset_tbl_ptr.i.i12.i2310 = getelementptr i8, ptr %974, i64 40
  %hash_coef.i.i13.i2311 = load i64, ptr %hash_coef_ptr.i.i10.i2308, align 4
  %tbl_size.i.i14.i2312 = load i64, ptr %tbl_size_ptr.i.i11.i2309, align 4
  %offset_tbl.i.i15.i2313 = load ptr, ptr %offset_tbl_ptr.i.i12.i2310, align 8
  %product.i.i.i16.i2314 = mul i64 %hash_coef.i.i13.i2311, -5261542750394134544
  %shifted.i.i.i17.i2315 = lshr i64 %product.i.i.i16.i2314, 32
  %xored.i.i.i18.i2316 = xor i64 %shifted.i.i.i17.i2315, %product.i.i.i16.i2314
  %hash.i.i.i19.i2317 = and i64 %xored.i.i.i18.i2316, %tbl_size.i.i14.i2312
  %offset_ptr.i.i20.i2318 = getelementptr i32, ptr %offset_tbl.i.i15.i2313, i64 %hash.i.i.i19.i2317
  %offset.i.i21.i2319 = load i32, ptr %offset_ptr.i.i20.i2318, align 4
  %eq.i.i2320 = icmp eq i32 %980, %offset.i.i21.i2319
  call void @llvm.assume(i1 %eq.i.i2320) #30
  %982 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %983 = call ptr @llvm.invariant.start.p0(i64 600, ptr %974)
  %984 = sext i32 %980 to i64
  %985 = getelementptr ptr, ptr %974, i64 %984
  %986 = getelementptr i8, ptr %985, i64 64
  %987 = load ptr, ptr %986, align 8
  %988 = call ptr %987({ ptr, ptr, ptr, i32 } %981, ptr nonnull %2)
  %989 = call i32 %988({ ptr, ptr, ptr, i32 } %981, { ptr, ptr, ptr, i32 } %981, ptr nonnull %2)
  %990 = add i32 %989, -1
  %991 = and i32 %990, %972
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %992 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %993 = load ptr, ptr %211, align 8
  %994 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %993, 0
  %995 = load ptr, ptr %212, align 8
  %996 = insertvalue { ptr, ptr, ptr, i32 } %994, ptr %995, 1
  %997 = load ptr, ptr %213, align 8
  %998 = insertvalue { ptr, ptr, ptr, i32 } %996, ptr %997, 2
  %999 = load i32, ptr %214, align 4
  %1000 = insertvalue { ptr, ptr, ptr, i32 } %998, i32 %999, 3
  %hash_coef_ptr.i.i202.i881 = getelementptr i8, ptr %993, i64 8
  %tbl_size_ptr.i.i203.i882 = getelementptr i8, ptr %993, i64 16
  %offset_tbl_ptr.i.i204.i883 = getelementptr i8, ptr %993, i64 40
  %hash_coef.i.i205.i884 = load i64, ptr %hash_coef_ptr.i.i202.i881, align 4
  %tbl_size.i.i206.i885 = load i64, ptr %tbl_size_ptr.i.i203.i882, align 4
  %offset_tbl.i.i207.i886 = load ptr, ptr %offset_tbl_ptr.i.i204.i883, align 8
  %product.i.i.i208.i887 = mul i64 %hash_coef.i.i205.i884, -5261542750394134544
  %shifted.i.i.i209.i888 = lshr i64 %product.i.i.i208.i887, 32
  %xored.i.i.i210.i889 = xor i64 %shifted.i.i.i209.i888, %product.i.i.i208.i887
  %hash.i.i.i211.i890 = and i64 %xored.i.i.i210.i889, %tbl_size.i.i206.i885
  %offset_ptr.i.i212.i891 = getelementptr i32, ptr %offset_tbl.i.i207.i886, i64 %hash.i.i.i211.i890
  %offset.i.i213.i892 = load i32, ptr %offset_ptr.i.i212.i891, align 4
  %eq.i216.i893 = icmp eq i32 %999, %offset.i.i213.i892
  call void @llvm.assume(i1 %eq.i216.i893) #30
  store ptr @_parameterization_Ptri32, ptr %94, align 8
  %1001 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %94)
  %1002 = call ptr @llvm.invariant.start.p0(i64 600, ptr %993)
  %1003 = sext i32 %999 to i64
  %1004 = getelementptr ptr, ptr %993, i64 %1003
  %1005 = getelementptr i8, ptr %1004, i64 120
  %1006 = load ptr, ptr %1005, align 8
  store ptr @i32_typ, ptr %95, align 8
  %1007 = call ptr %1006({ ptr, ptr, ptr, i32 } %1000, ptr nonnull %95)
  %1008 = call { ptr, i160 } %1007({ ptr, ptr, ptr, i32 } %1000, { ptr, ptr, ptr, i32 } %1000, ptr nonnull %94, i32 %991)
  %.fca.0.extract87.i = extractvalue { ptr, i160 } %1008, 0
  %1009 = ptrtoint ptr %.sroa.speculated352.i1376 to i64
  %1010 = ptrtoint ptr %.sroa.speculated346.i1378 to i64
  %.sroa.3.0.insert.ext.i = zext i32 %offset.i.i260.i1380 to i160
  %.sroa.3.0.insert.shift.i = shl nuw i160 %.sroa.3.0.insert.ext.i, 128
  %.sroa.2.0.insert.ext.i = zext i64 %1010 to i160
  %.sroa.2.0.insert.shift.i = shl nuw nsw i160 %.sroa.2.0.insert.ext.i, 64
  %.sroa.2.0.insert.insert.i = or disjoint i160 %.sroa.2.0.insert.shift.i, %.sroa.3.0.insert.shift.i
  %.sroa.0.0.insert.ext.i = zext i64 %1009 to i160
  %.sroa.0.0.insert.insert.i = or disjoint i160 %.sroa.2.0.insert.insert.i, %.sroa.0.0.insert.ext.i
  %1011 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0.0.insert.insert.i, 1
  %1012 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1013 = load ptr, ptr %211, align 8
  %1014 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1013, 0
  %1015 = load ptr, ptr %212, align 8
  %1016 = insertvalue { ptr, ptr, ptr, i32 } %1014, ptr %1015, 1
  %1017 = load ptr, ptr %213, align 8
  %1018 = insertvalue { ptr, ptr, ptr, i32 } %1016, ptr %1017, 2
  %1019 = load i32, ptr %214, align 4
  %1020 = insertvalue { ptr, ptr, ptr, i32 } %1018, i32 %1019, 3
  %hash_coef_ptr.i.i218.i = getelementptr i8, ptr %1013, i64 8
  %tbl_size_ptr.i.i219.i = getelementptr i8, ptr %1013, i64 16
  %offset_tbl_ptr.i.i220.i = getelementptr i8, ptr %1013, i64 40
  %hash_coef.i.i221.i = load i64, ptr %hash_coef_ptr.i.i218.i, align 4
  %tbl_size.i.i222.i = load i64, ptr %tbl_size_ptr.i.i219.i, align 4
  %offset_tbl.i.i223.i = load ptr, ptr %offset_tbl_ptr.i.i220.i, align 8
  %product.i.i.i224.i = mul i64 %hash_coef.i.i221.i, -5261542750394134544
  %shifted.i.i.i225.i = lshr i64 %product.i.i.i224.i, 32
  %xored.i.i.i226.i = xor i64 %shifted.i.i.i225.i, %product.i.i.i224.i
  %hash.i.i.i227.i = and i64 %xored.i.i.i226.i, %tbl_size.i.i222.i
  %offset_ptr.i.i228.i = getelementptr i32, ptr %offset_tbl.i.i223.i, i64 %hash.i.i.i227.i
  %offset.i.i229.i = load i32, ptr %offset_ptr.i.i228.i, align 4
  %eq.i232.i = icmp eq i32 %1019, %offset.i.i229.i
  call void @llvm.assume(i1 %eq.i232.i) #30
  %1021 = load ptr, ptr %result.i88, align 8
  %1022 = load ptr, ptr %176, align 8
  %result.i233.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1023 = getelementptr i8, ptr %result.i233.i, i64 16
  store ptr %1022, ptr %1023, align 8
  %1024 = getelementptr i8, ptr %result.i233.i, i64 8
  store ptr %1021, ptr %1024, align 8
  %1025 = getelementptr i8, ptr %result.i233.i, i64 24
  store ptr null, ptr %1025, align 8
  %1026 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i233.i)
  store ptr @Entry, ptr %result.i233.i, align 8
  store ptr @_parameterization_Ptri32, ptr %96, align 8
  store ptr %result.i233.i, ptr %249, align 8
  %1027 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %96)
  %1028 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1013)
  %1029 = sext i32 %1019 to i64
  %1030 = getelementptr ptr, ptr %1013, i64 %1029
  %1031 = getelementptr i8, ptr %1030, i64 128
  %1032 = load ptr, ptr %1031, align 8
  store ptr @i32_typ, ptr %97, align 8
  store ptr @Entry, ptr %250, align 8
  %1033 = call ptr %1032({ ptr, ptr, ptr, i32 } %1020, ptr nonnull %97)
  call void %1033({ ptr, ptr, ptr, i32 } %1020, { ptr, ptr, ptr, i32 } %1020, ptr nonnull %96, i32 %991, { ptr, i160 } %1011)
  %1034 = icmp ne ptr %.fca.0.extract87.i, @nil_typ
  %1035 = icmp ne ptr %.fca.0.extract87.i, null
  %.not138.i = and i1 %1034, %1035
  br i1 %.not138.i, label %.cont.cont.i, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit.thread

.cont.cont.i:                                     ; preds = %954, %890
  %.sink = phi { ptr, i160 } [ %926, %890 ], [ %1008, %954 ]
  %1036 = phi i32 [ 2, %890 ], [ 1, %954 ]
  %vptr.i248.sroa.speculated.i = phi ptr [ %.fca.0.extract112.i, %890 ], [ %.fca.0.extract87.i, %954 ]
  %.fca.1.extract89.i = extractvalue { ptr, i160 } %.sink, 1
  %.sroa.3407.sroa.4.0.extract.shift.i = lshr i160 %.fca.1.extract89.i, 64
  %.sroa.3407.sroa.4.0.extract.trunc.i = trunc i160 %.sroa.3407.sroa.4.0.extract.shift.i to i64
  %.sroa.3407.sroa.0.0.extract.trunc.i = trunc i160 %.fca.1.extract89.i to i64
  %.sroa.speculated352.i = inttoptr i64 %.sroa.3407.sroa.0.0.extract.trunc.i to ptr
  %.sroa.speculated346.i = inttoptr i64 %.sroa.3407.sroa.4.0.extract.trunc.i to ptr
  %hash_coef_ptr.i.i249.i = getelementptr i8, ptr %vptr.i248.sroa.speculated.i, i64 8
  %tbl_size_ptr.i.i250.i = getelementptr i8, ptr %vptr.i248.sroa.speculated.i, i64 16
  %offset_tbl_ptr.i.i251.i = getelementptr i8, ptr %vptr.i248.sroa.speculated.i, i64 40
  %hash_coef.i.i252.i = load i64, ptr %hash_coef_ptr.i.i249.i, align 4
  %tbl_size.i.i253.i = load i64, ptr %tbl_size_ptr.i.i250.i, align 4
  %offset_tbl.i.i254.i = load ptr, ptr %offset_tbl_ptr.i.i251.i, align 8
  %product.i.i.i255.i = mul i64 %hash_coef.i.i252.i, 4015701072841558310
  %shifted.i.i.i256.i = lshr i64 %product.i.i.i255.i, 32
  %xored.i.i.i257.i = xor i64 %shifted.i.i.i256.i, %product.i.i.i255.i
  %hash.i.i.i258.i = and i64 %xored.i.i.i257.i, %tbl_size.i.i253.i
  %offset_ptr.i.i259.i = getelementptr i32, ptr %offset_tbl.i.i254.i, i64 %hash.i.i.i258.i
  %offset.i.i260.i = load i32, ptr %offset_ptr.i.i259.i, align 4
  store ptr %vptr.i248.sroa.speculated.i, ptr %102, align 8
  store ptr %.sroa.speculated352.i, ptr %246, align 8
  store ptr %.sroa.speculated346.i, ptr %247, align 8
  store i32 %offset.i.i260.i, ptr %248, align 8
  %1037 = add nuw nsw i32 %.reg2mem193.0677.i, 1
  %1038 = load i32, ptr %216, align 4
  %1039 = icmp slt i32 %1037, %1038
  br i1 %1039, label %881, label %._crit_edge3.i

HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit.thread: ; preds = %890, %954
  %1040 = phi ptr [ %98, %954 ], [ %90, %890 ]
  %1041 = phi ptr [ %99, %954 ], [ %91, %890 ]
  %1042 = phi ptr [ %100, %954 ], [ %92, %890 ]
  %1043 = phi ptr [ %.sroa.0.i852, %954 ], [ %.sroa.0680.i, %890 ]
  %1044 = phi ptr [ %101, %954 ], [ %93, %890 ]
  %1045 = load i32, ptr %215, align 4
  store i32 %1045, ptr %1040, align 4
  store i32 1, ptr %1041, align 4
  %1046 = add i32 %1045, 1
  store i32 %1046, ptr %1042, align 4
  %1047 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  store i32 %1046, ptr %215, align 4
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %1044, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %1043, align 8
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %86)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %87)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %88)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %89)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %90)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %91)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %92)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %93)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %94)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %95)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %96)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %97)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %98)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %99)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %100)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i852)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %101)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %102)
  br label %HashMap_insert_keyK_valueV.exit

._crit_edge3.i:                                   ; preds = %.cont.cont.i, %._crit_edge2.i
  %1048 = load i160, ptr %246, align 8
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %86)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %87)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %88)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %89)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %90)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %91)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %92)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %93)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %94)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %95)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %96)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %97)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %98)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %99)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %100)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i852)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %101)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %102)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %84)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %85)
  %1049 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1050 = load ptr, ptr %193, align 8
  %1051 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1050, 0
  %1052 = load ptr, ptr %194, align 8
  %1053 = insertvalue { ptr, ptr, ptr, i32 } %1051, ptr %1052, 1
  %1054 = load ptr, ptr %195, align 8
  %1055 = insertvalue { ptr, ptr, ptr, i32 } %1053, ptr %1054, 2
  %1056 = load i32, ptr %196, align 4
  %1057 = insertvalue { ptr, ptr, ptr, i32 } %1055, i32 %1056, 3
  %hash_coef_ptr.i.i18.i916 = getelementptr i8, ptr %1050, i64 8
  %tbl_size_ptr.i.i19.i917 = getelementptr i8, ptr %1050, i64 16
  %offset_tbl_ptr.i.i20.i918 = getelementptr i8, ptr %1050, i64 40
  %hash_coef.i.i21.i919 = load i64, ptr %hash_coef_ptr.i.i18.i916, align 4
  %tbl_size.i.i22.i920 = load i64, ptr %tbl_size_ptr.i.i19.i917, align 4
  %offset_tbl.i.i23.i921 = load ptr, ptr %offset_tbl_ptr.i.i20.i918, align 8
  %product.i.i.i24.i922 = mul i64 %hash_coef.i.i21.i919, -5261542750394134544
  %shifted.i.i.i25.i923 = lshr i64 %product.i.i.i24.i922, 32
  %xored.i.i.i26.i924 = xor i64 %shifted.i.i.i25.i923, %product.i.i.i24.i922
  %hash.i.i.i27.i925 = and i64 %xored.i.i.i26.i924, %tbl_size.i.i22.i920
  %offset_ptr.i.i28.i926 = getelementptr i32, ptr %offset_tbl.i.i23.i921, i64 %hash.i.i.i27.i925
  %offset.i.i29.i927 = load i32, ptr %offset_ptr.i.i28.i926, align 4
  %eq.i.i928 = icmp eq i32 %1056, %offset.i.i29.i927
  call void @llvm.assume(i1 %eq.i.i928) #30
  %1058 = load ptr, ptr %211, align 8
  %1059 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1058, 0
  %1060 = load ptr, ptr %212, align 8
  %1061 = insertvalue { ptr, ptr, ptr, i32 } %1059, ptr %1060, 1
  %1062 = load ptr, ptr %213, align 8
  %1063 = insertvalue { ptr, ptr, ptr, i32 } %1061, ptr %1062, 2
  %1064 = load i32, ptr %214, align 4
  %hash_coef_ptr.i.i46.i933 = getelementptr i8, ptr %1058, i64 8
  %tbl_size_ptr.i.i47.i934 = getelementptr i8, ptr %1058, i64 16
  %offset_tbl_ptr.i.i48.i935 = getelementptr i8, ptr %1058, i64 40
  %hash_coef.i.i49.i936 = load i64, ptr %hash_coef_ptr.i.i46.i933, align 4
  %tbl_size.i.i50.i937 = load i64, ptr %tbl_size_ptr.i.i47.i934, align 4
  %offset_tbl.i.i51.i938 = load ptr, ptr %offset_tbl_ptr.i.i48.i935, align 8
  %product.i.i.i52.i939 = mul i64 %hash_coef.i.i49.i936, -5261542750394134544
  %shifted.i.i.i53.i940 = lshr i64 %product.i.i.i52.i939, 32
  %xored.i.i.i54.i941 = xor i64 %shifted.i.i.i53.i940, %product.i.i.i52.i939
  %hash.i.i.i55.i942 = and i64 %xored.i.i.i54.i941, %tbl_size.i.i50.i937
  %offset_ptr.i.i56.i943 = getelementptr i32, ptr %offset_tbl.i.i51.i938, i64 %hash.i.i.i55.i942
  %offset.i.i57.i944 = load i32, ptr %offset_ptr.i.i56.i943, align 4
  %eq.i60.i945 = icmp eq i32 %1064, %offset.i.i57.i944
  call void @llvm.assume(i1 %eq.i60.i945) #30
  %1065 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1066 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1050)
  %1067 = sext i32 %1056 to i64
  %1068 = getelementptr ptr, ptr %1050, i64 %1067
  %1069 = getelementptr i8, ptr %1068, i64 64
  %1070 = load ptr, ptr %1069, align 8
  %1071 = call ptr %1070({ ptr, ptr, ptr, i32 } %1057, ptr nonnull %2)
  %1072 = call i32 %1071({ ptr, ptr, ptr, i32 } %1057, { ptr, ptr, ptr, i32 } %1057, ptr nonnull %2)
  %1073 = shl i32 %1072, 1
  %1074 = call i32 @llvm.smax.i32(i32 %1073, i32 16)
  %1075 = load ptr, ptr %result.i88, align 8
  %1076 = load ptr, ptr %176, align 8
  %result.i.i946 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1077 = getelementptr i8, ptr %result.i.i946, i64 16
  store ptr @_parameterization_Nil, ptr %1077, align 8
  %result.i75.i947 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1078 = getelementptr i8, ptr %result.i75.i947, i64 16
  store ptr %1076, ptr %1078, align 8
  %1079 = getelementptr i8, ptr %result.i75.i947, i64 8
  store ptr %1075, ptr %1079, align 8
  %1080 = getelementptr i8, ptr %result.i75.i947, i64 24
  store ptr null, ptr %1080, align 8
  %1081 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i75.i947)
  store ptr @Entry, ptr %result.i75.i947, align 8
  %1082 = getelementptr i8, ptr %result.i.i946, i64 8
  store ptr %result.i75.i947, ptr %1082, align 8
  %1083 = getelementptr i8, ptr %result.i.i946, i64 24
  store ptr null, ptr %1083, align 8
  %1084 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i946)
  store ptr @union_typ, ptr %result.i.i946, align 8
  %result.i76.i948 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i946, ptr %result.i76.i948, align 8
  %1085 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i76.i948)
  store ptr @Array, ptr %84, align 8
  store ptr %result.i76.i948, ptr %253, align 8
  store i32 9, ptr %254, align 8
  %1086 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %84)
  %1087 = getelementptr i8, ptr %result.i76.i948, i64 16
  store i32 %1074, ptr %1087, align 4
  %1088 = getelementptr i8, ptr %result.i76.i948, i64 20
  store i32 %1074, ptr %1088, align 4
  %1089 = zext nneg i32 %1074 to i64
  %1090 = shl nuw nsw i64 %1089, 5
  %result.i.i.i949 = call noalias ptr @bump_malloc_inner(i64 noundef %1090, ptr nonnull @current_ptr) #29
  %1091 = getelementptr i8, ptr %result.i76.i948, i64 8
  store ptr %result.i.i.i949, ptr %1091, align 8
  %1092 = load ptr, ptr %255, align 8
  store ptr @Array, ptr %193, align 8
  store ptr %result.i76.i948, ptr %194, align 8
  store ptr %1092, ptr %195, align 8
  store i32 9, ptr %196, align 4
  %result.i91.i962 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1093 = getelementptr i8, ptr %result.i91.i962, i64 16
  store ptr @_parameterization_Nil, ptr %1093, align 8
  %result.i92.i963 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1094 = getelementptr i8, ptr %result.i92.i963, i64 16
  store ptr %1076, ptr %1094, align 8
  %1095 = getelementptr i8, ptr %result.i92.i963, i64 8
  store ptr %1075, ptr %1095, align 8
  %1096 = getelementptr i8, ptr %result.i92.i963, i64 24
  store ptr null, ptr %1096, align 8
  %1097 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i92.i963)
  store ptr @Entry, ptr %result.i92.i963, align 8
  %1098 = getelementptr i8, ptr %result.i91.i962, i64 8
  store ptr %result.i92.i963, ptr %1098, align 8
  %1099 = getelementptr i8, ptr %result.i91.i962, i64 24
  store ptr null, ptr %1099, align 8
  %1100 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i91.i962)
  store ptr @union_typ, ptr %result.i91.i962, align 8
  %result.i93.i964 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i91.i962, ptr %result.i93.i964, align 8
  %1101 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i93.i964)
  store ptr @Array, ptr %85, align 8
  store ptr %result.i93.i964, ptr %256, align 8
  store i32 9, ptr %257, align 8
  %1102 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %85)
  %1103 = getelementptr i8, ptr %result.i93.i964, i64 16
  store i32 %1074, ptr %1103, align 4
  %1104 = getelementptr i8, ptr %result.i93.i964, i64 20
  store i32 %1074, ptr %1104, align 4
  %result.i.i234.i965 = call noalias ptr @bump_malloc_inner(i64 noundef %1090, ptr nonnull @current_ptr) #29
  %1105 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %1106 = getelementptr i8, ptr %result.i93.i964, i64 8
  store ptr %result.i.i234.i965, ptr %1106, align 8
  %1107 = load ptr, ptr %258, align 8
  store ptr @Array, ptr %211, align 8
  store ptr %result.i93.i964, ptr %212, align 8
  store ptr %1107, ptr %213, align 8
  store i32 9, ptr %214, align 4
  store i32 0, ptr %215, align 4
  %1108 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %21)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %22)
  %1109 = icmp sgt i32 %1072, 0
  br i1 %1109, label %.lr.ph.i2323, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2426.critedge

.lr.ph.i2323:                                     ; preds = %._crit_edge3.i
  %invariant.gep.i2324 = getelementptr i8, ptr %1050, i64 120
  %offset_tbl.i.i24.i2326 = load ptr, ptr %offset_tbl_ptr.i.i20.i918, align 8
  %hash_coef.i.i22.i2328 = load i64, ptr %hash_coef_ptr.i.i18.i916, align 4
  %product.i.i.i25.i2329 = mul i64 %hash_coef.i.i22.i2328, -5261542750394134544
  %shifted.i.i.i26.i2330 = lshr i64 %product.i.i.i25.i2329, 32
  %xored.i.i.i27.i2331 = xor i64 %shifted.i.i.i26.i2330, %product.i.i.i25.i2329
  %tbl_size.i.i23.i2333 = load i64, ptr %tbl_size_ptr.i.i19.i917, align 4
  %hash.i.i.i28.i2334 = and i64 %xored.i.i.i27.i2331, %tbl_size.i.i23.i2333
  %offset_ptr.i.i29.i2335 = getelementptr i32, ptr %offset_tbl.i.i24.i2326, i64 %hash.i.i.i28.i2334
  %offset.i.i30.i2336 = load i32, ptr %offset_ptr.i.i29.i2335, align 4
  %1110 = insertvalue { ptr, ptr, ptr, i32 } %1055, i32 %offset.i.i30.i2336, 3
  %1111 = sext i32 %offset.i.i30.i2336 to i64
  %gep.i2351 = getelementptr ptr, ptr %invariant.gep.i2324, i64 %1111
  %1112 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %1113

1113:                                             ; preds = %._crit_edge1.i2355, %.lr.ph.i2323
  %.reg2mem13.079.i2352 = phi i32 [ 0, %.lr.ph.i2323 ], [ %1130, %._crit_edge1.i2355 ]
  store ptr @_parameterization_Ptri32, ptr %21, align 8
  %1114 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %21)
  %1115 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %1050)
  %1116 = load ptr, ptr %gep.i2351, align 8
  store ptr @i32_typ, ptr %22, align 8
  %1117 = call ptr %1116({ ptr, ptr, ptr, i32 } %1110, ptr nonnull %22)
  %1118 = call { ptr, i160 } %1117({ ptr, ptr, ptr, i32 } %1110, { ptr, ptr, ptr, i32 } %1110, ptr nonnull %21, i32 %.reg2mem13.079.i2352)
  %.fca.0.extract11.i2353 = extractvalue { ptr, i160 } %1118, 0
  %1119 = icmp ne ptr %.fca.0.extract11.i2353, @nil_typ
  %1120 = icmp ne ptr %.fca.0.extract11.i2353, null
  %.not17.i2354 = and i1 %1119, %1120
  br i1 %.not17.i2354, label %1121, label %._crit_edge1.i2355

1121:                                             ; preds = %1113
  %.fca.1.extract13.i2356 = extractvalue { ptr, i160 } %1118, 1
  %.sroa.375.8.extract.trunc.i2357 = trunc i160 %.fca.1.extract13.i2356 to i64
  %1122 = inttoptr i64 %.sroa.375.8.extract.trunc.i2357 to ptr
  %.sroa.576.8.extract.shift.i2358 = lshr i160 %.fca.1.extract13.i2356, 64
  %.sroa.576.8.extract.trunc.i2359 = trunc i160 %.sroa.576.8.extract.shift.i2358 to i64
  %1123 = inttoptr i64 %.sroa.576.8.extract.trunc.i2359 to ptr
  %hash_coef_ptr.i.i33.i2360 = getelementptr i8, ptr %.fca.0.extract11.i2353, i64 8
  %tbl_size_ptr.i.i34.i2361 = getelementptr i8, ptr %.fca.0.extract11.i2353, i64 16
  %offset_tbl_ptr.i.i35.i2362 = getelementptr i8, ptr %.fca.0.extract11.i2353, i64 40
  %hash_coef.i.i36.i2363 = load i64, ptr %hash_coef_ptr.i.i33.i2360, align 4
  %tbl_size.i.i37.i2364 = load i64, ptr %tbl_size_ptr.i.i34.i2361, align 4
  %offset_tbl.i.i38.i2365 = load ptr, ptr %offset_tbl_ptr.i.i35.i2362, align 8
  %product.i.i.i39.i2366 = mul i64 %hash_coef.i.i36.i2363, 4015701072841558310
  %shifted.i.i.i40.i2367 = lshr i64 %product.i.i.i39.i2366, 32
  %xored.i.i.i41.i2368 = xor i64 %shifted.i.i.i40.i2367, %product.i.i.i39.i2366
  %hash.i.i.i42.i2369 = and i64 %xored.i.i.i41.i2368, %tbl_size.i.i37.i2364
  %offset_ptr.i.i43.i2370 = getelementptr i32, ptr %offset_tbl.i.i38.i2365, i64 %hash.i.i.i42.i2369
  %offset.i.i58.i2371 = load i32, ptr %offset_ptr.i.i43.i2370, align 4
  %1124 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i2353, 0
  %1125 = insertvalue { ptr, ptr, ptr, i32 } %1124, ptr %1122, 1
  %1126 = insertvalue { ptr, ptr, ptr, i32 } %1125, ptr %1123, 2
  %1127 = insertvalue { ptr, ptr, ptr, i32 } %1126, i32 %offset.i.i58.i2371, 3
  %1128 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1129 = call { ptr, i160 } @HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %271, { ptr, ptr, ptr, i32 } poison, ptr nonnull poison, { ptr, ptr, ptr, i32 } %1127)
  br label %._crit_edge1.i2355

._crit_edge1.i2355:                               ; preds = %1121, %1113
  %1130 = add nuw nsw i32 %.reg2mem13.079.i2352, 1
  %1131 = icmp slt i32 %1130, %1072
  br i1 %1131, label %1113, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2373

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2373: ; preds = %._crit_edge1.i2355
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %21)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %22)
  %1132 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %19)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %20)
  %invariant.gep.i2377 = getelementptr i8, ptr %1058, i64 120
  %offset_tbl.i.i24.i2379 = load ptr, ptr %offset_tbl_ptr.i.i48.i935, align 8
  %hash_coef.i.i22.i2381 = load i64, ptr %hash_coef_ptr.i.i46.i933, align 4
  %product.i.i.i25.i2382 = mul i64 %hash_coef.i.i22.i2381, -5261542750394134544
  %shifted.i.i.i26.i2383 = lshr i64 %product.i.i.i25.i2382, 32
  %xored.i.i.i27.i2384 = xor i64 %shifted.i.i.i26.i2383, %product.i.i.i25.i2382
  %tbl_size.i.i23.i2386 = load i64, ptr %tbl_size_ptr.i.i47.i934, align 4
  %hash.i.i.i28.i2387 = and i64 %xored.i.i.i27.i2384, %tbl_size.i.i23.i2386
  %offset_ptr.i.i29.i2388 = getelementptr i32, ptr %offset_tbl.i.i24.i2379, i64 %hash.i.i.i28.i2387
  %offset.i.i30.i2389 = load i32, ptr %offset_ptr.i.i29.i2388, align 4
  %1133 = insertvalue { ptr, ptr, ptr, i32 } %1063, i32 %offset.i.i30.i2389, 3
  %1134 = sext i32 %offset.i.i30.i2389 to i64
  %gep.i2404 = getelementptr ptr, ptr %invariant.gep.i2377, i64 %1134
  %1135 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %1136

1136:                                             ; preds = %._crit_edge1.i2408, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2373
  %.reg2mem13.079.i2405 = phi i32 [ 0, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2373 ], [ %1153, %._crit_edge1.i2408 ]
  store ptr @_parameterization_Ptri32, ptr %19, align 8
  %1137 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %19)
  %1138 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %1058)
  %1139 = load ptr, ptr %gep.i2404, align 8
  store ptr @i32_typ, ptr %20, align 8
  %1140 = call ptr %1139({ ptr, ptr, ptr, i32 } %1133, ptr nonnull %20)
  %1141 = call { ptr, i160 } %1140({ ptr, ptr, ptr, i32 } %1133, { ptr, ptr, ptr, i32 } %1133, ptr nonnull %19, i32 %.reg2mem13.079.i2405)
  %.fca.0.extract11.i2406 = extractvalue { ptr, i160 } %1141, 0
  %1142 = icmp ne ptr %.fca.0.extract11.i2406, @nil_typ
  %1143 = icmp ne ptr %.fca.0.extract11.i2406, null
  %.not17.i2407 = and i1 %1142, %1143
  br i1 %.not17.i2407, label %1144, label %._crit_edge1.i2408

1144:                                             ; preds = %1136
  %.fca.1.extract13.i2409 = extractvalue { ptr, i160 } %1141, 1
  %.sroa.375.8.extract.trunc.i2410 = trunc i160 %.fca.1.extract13.i2409 to i64
  %1145 = inttoptr i64 %.sroa.375.8.extract.trunc.i2410 to ptr
  %.sroa.576.8.extract.shift.i2411 = lshr i160 %.fca.1.extract13.i2409, 64
  %.sroa.576.8.extract.trunc.i2412 = trunc i160 %.sroa.576.8.extract.shift.i2411 to i64
  %1146 = inttoptr i64 %.sroa.576.8.extract.trunc.i2412 to ptr
  %hash_coef_ptr.i.i33.i2413 = getelementptr i8, ptr %.fca.0.extract11.i2406, i64 8
  %tbl_size_ptr.i.i34.i2414 = getelementptr i8, ptr %.fca.0.extract11.i2406, i64 16
  %offset_tbl_ptr.i.i35.i2415 = getelementptr i8, ptr %.fca.0.extract11.i2406, i64 40
  %hash_coef.i.i36.i2416 = load i64, ptr %hash_coef_ptr.i.i33.i2413, align 4
  %tbl_size.i.i37.i2417 = load i64, ptr %tbl_size_ptr.i.i34.i2414, align 4
  %offset_tbl.i.i38.i2418 = load ptr, ptr %offset_tbl_ptr.i.i35.i2415, align 8
  %product.i.i.i39.i2419 = mul i64 %hash_coef.i.i36.i2416, 4015701072841558310
  %shifted.i.i.i40.i2420 = lshr i64 %product.i.i.i39.i2419, 32
  %xored.i.i.i41.i2421 = xor i64 %shifted.i.i.i40.i2420, %product.i.i.i39.i2419
  %hash.i.i.i42.i2422 = and i64 %xored.i.i.i41.i2421, %tbl_size.i.i37.i2417
  %offset_ptr.i.i43.i2423 = getelementptr i32, ptr %offset_tbl.i.i38.i2418, i64 %hash.i.i.i42.i2422
  %offset.i.i58.i2424 = load i32, ptr %offset_ptr.i.i43.i2423, align 4
  %1147 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i2406, 0
  %1148 = insertvalue { ptr, ptr, ptr, i32 } %1147, ptr %1145, 1
  %1149 = insertvalue { ptr, ptr, ptr, i32 } %1148, ptr %1146, 2
  %1150 = insertvalue { ptr, ptr, ptr, i32 } %1149, i32 %offset.i.i58.i2424, 3
  %1151 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1152 = call { ptr, i160 } @HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %271, { ptr, ptr, ptr, i32 } poison, ptr nonnull poison, { ptr, ptr, ptr, i32 } %1150)
  br label %._crit_edge1.i2408

._crit_edge1.i2408:                               ; preds = %1144, %1136
  %1153 = add nuw nsw i32 %.reg2mem13.079.i2405, 1
  %1154 = icmp slt i32 %1153, %1072
  br i1 %1154, label %1136, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2426

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2426.critedge: ; preds = %._crit_edge3.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %21)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %22)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %19)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %20)
  br label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2426

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2426: ; preds = %._crit_edge1.i2408, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2426.critedge
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %19)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %20)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %84)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %85)
  %1155 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %68)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %69)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %70)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %71)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %72)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %73)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %74)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0680.i1008)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %75)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %76)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %77)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %78)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %79)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %80)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %81)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %82)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i1010)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %83)
  %1156 = load i32, ptr %216, align 4
  %1157 = icmp sgt i32 %1156, 0
  br i1 %1157, label %.lr.ph.i1045, label %._crit_edge3.1.i

.lr.ph.i1045:                                     ; preds = %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2426
  %1158 = lshr i160 %1048, 64
  %1159 = insertelement <2 x i160> poison, i160 %1158, i64 0
  %1160 = insertelement <2 x i160> %1159, i160 %1048, i64 1
  %1161 = trunc <2 x i160> %1160 to <2 x i64>
  %1162 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1163 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1164 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  br label %1165

1165:                                             ; preds = %.cont.cont.i1099, %.lr.ph.i1045
  %offset.i.i260.i11161388 = phi i32 [ 9, %.lr.ph.i1045 ], [ %offset.i.i260.i1116, %.cont.cont.i1099 ]
  %.reg2mem195.0678.i1047 = phi i32 [ 1, %.lr.ph.i1045 ], [ %1319, %.cont.cont.i1099 ]
  %.reg2mem193.0677.i1048 = phi i32 [ 0, %.lr.ph.i1045 ], [ %1324, %.cont.cont.i1099 ]
  %1166 = phi <2 x i64> [ %1161, %.lr.ph.i1045 ], [ %1323, %.cont.cont.i1099 ]
  %1167 = extractelement <2 x i64> %1166, i64 1
  %.sroa.speculated352.i11031384 = inttoptr i64 %1167 to ptr
  %1168 = extractelement <2 x i64> %1166, i64 0
  %.sroa.speculated346.i11041386 = inttoptr i64 %1168 to ptr
  %1169 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Entry, ptr undef, ptr undef, i32 undef }, ptr %.sroa.speculated352.i11031384, 1
  %1170 = insertvalue { ptr, ptr, ptr, i32 } %1169, ptr %.sroa.speculated346.i11041386, 2
  %1171 = insertvalue { ptr, ptr, ptr, i32 } %1170, i32 %offset.i.i260.i11161388, 3
  %1172 = sext i32 %offset.i.i260.i11161388 to i64
  %gep1382 = getelementptr ptr, ptr getelementptr inbounds (i8, ptr @Entry, i64 64), i64 %1172
  %1173 = load ptr, ptr %gep1382, align 8
  %1174 = call ptr %1173({ ptr, ptr, ptr, i32 } %1171, ptr nonnull %2)
  %1175 = call i32 %1174({ ptr, ptr, ptr, i32 } %1171, { ptr, ptr, ptr, i32 } %1171, ptr nonnull %2)
  %1176 = icmp eq i32 %.reg2mem195.0678.i1047, 1
  br i1 %1176, label %1177, label %1239

1177:                                             ; preds = %1165
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %1178 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1179 = load ptr, ptr %193, align 8
  %1180 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1179, 0
  %1181 = load ptr, ptr %194, align 8
  %1182 = insertvalue { ptr, ptr, ptr, i32 } %1180, ptr %1181, 1
  %1183 = load ptr, ptr %195, align 8
  %1184 = insertvalue { ptr, ptr, ptr, i32 } %1182, ptr %1183, 2
  %1185 = load i32, ptr %196, align 4
  %1186 = insertvalue { ptr, ptr, ptr, i32 } %1184, i32 %1185, 3
  %hash_coef_ptr.i.i10.i2444 = getelementptr i8, ptr %1179, i64 8
  %tbl_size_ptr.i.i11.i2445 = getelementptr i8, ptr %1179, i64 16
  %offset_tbl_ptr.i.i12.i2446 = getelementptr i8, ptr %1179, i64 40
  %hash_coef.i.i13.i2447 = load i64, ptr %hash_coef_ptr.i.i10.i2444, align 4
  %tbl_size.i.i14.i2448 = load i64, ptr %tbl_size_ptr.i.i11.i2445, align 4
  %offset_tbl.i.i15.i2449 = load ptr, ptr %offset_tbl_ptr.i.i12.i2446, align 8
  %product.i.i.i16.i2450 = mul i64 %hash_coef.i.i13.i2447, -5261542750394134544
  %shifted.i.i.i17.i2451 = lshr i64 %product.i.i.i16.i2450, 32
  %xored.i.i.i18.i2452 = xor i64 %shifted.i.i.i17.i2451, %product.i.i.i16.i2450
  %hash.i.i.i19.i2453 = and i64 %xored.i.i.i18.i2452, %tbl_size.i.i14.i2448
  %offset_ptr.i.i20.i2454 = getelementptr i32, ptr %offset_tbl.i.i15.i2449, i64 %hash.i.i.i19.i2453
  %offset.i.i21.i2455 = load i32, ptr %offset_ptr.i.i20.i2454, align 4
  %eq.i.i2456 = icmp eq i32 %1185, %offset.i.i21.i2455
  call void @llvm.assume(i1 %eq.i.i2456) #30
  %1187 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1188 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1179)
  %1189 = sext i32 %1185 to i64
  %1190 = getelementptr ptr, ptr %1179, i64 %1189
  %1191 = getelementptr i8, ptr %1190, i64 64
  %1192 = load ptr, ptr %1191, align 8
  %1193 = call ptr %1192({ ptr, ptr, ptr, i32 } %1186, ptr nonnull %2)
  %1194 = call i32 %1193({ ptr, ptr, ptr, i32 } %1186, { ptr, ptr, ptr, i32 } %1186, ptr nonnull %2)
  %1195 = add i32 %1194, -1
  %1196 = and i32 %1195, %1175
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %1197 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1198 = load ptr, ptr %193, align 8
  %1199 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1198, 0
  %1200 = load ptr, ptr %194, align 8
  %1201 = insertvalue { ptr, ptr, ptr, i32 } %1199, ptr %1200, 1
  %1202 = load ptr, ptr %195, align 8
  %1203 = insertvalue { ptr, ptr, ptr, i32 } %1201, ptr %1202, 2
  %1204 = load i32, ptr %196, align 4
  %1205 = insertvalue { ptr, ptr, ptr, i32 } %1203, i32 %1204, 3
  %hash_coef_ptr.i.i172.i1121 = getelementptr i8, ptr %1198, i64 8
  %tbl_size_ptr.i.i173.i1122 = getelementptr i8, ptr %1198, i64 16
  %offset_tbl_ptr.i.i174.i1123 = getelementptr i8, ptr %1198, i64 40
  %hash_coef.i.i175.i1124 = load i64, ptr %hash_coef_ptr.i.i172.i1121, align 4
  %tbl_size.i.i176.i1125 = load i64, ptr %tbl_size_ptr.i.i173.i1122, align 4
  %offset_tbl.i.i177.i1126 = load ptr, ptr %offset_tbl_ptr.i.i174.i1123, align 8
  %product.i.i.i178.i1127 = mul i64 %hash_coef.i.i175.i1124, -5261542750394134544
  %shifted.i.i.i179.i1128 = lshr i64 %product.i.i.i178.i1127, 32
  %xored.i.i.i180.i1129 = xor i64 %shifted.i.i.i179.i1128, %product.i.i.i178.i1127
  %hash.i.i.i181.i1130 = and i64 %xored.i.i.i180.i1129, %tbl_size.i.i176.i1125
  %offset_ptr.i.i182.i1131 = getelementptr i32, ptr %offset_tbl.i.i177.i1126, i64 %hash.i.i.i181.i1130
  %offset.i.i183.i1132 = load i32, ptr %offset_ptr.i.i182.i1131, align 4
  %eq.i.i1133 = icmp eq i32 %1204, %offset.i.i183.i1132
  call void @llvm.assume(i1 %eq.i.i1133) #30
  store ptr @_parameterization_Ptri32, ptr %68, align 8
  %1206 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %68)
  %1207 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1198)
  %1208 = sext i32 %1204 to i64
  %1209 = getelementptr ptr, ptr %1198, i64 %1208
  %1210 = getelementptr i8, ptr %1209, i64 120
  %1211 = load ptr, ptr %1210, align 8
  store ptr @i32_typ, ptr %69, align 8
  %1212 = call ptr %1211({ ptr, ptr, ptr, i32 } %1205, ptr nonnull %69)
  %1213 = call { ptr, i160 } %1212({ ptr, ptr, ptr, i32 } %1205, { ptr, ptr, ptr, i32 } %1205, ptr nonnull %68, i32 %1196)
  %.fca.0.extract112.i1134 = extractvalue { ptr, i160 } %1213, 0
  %.sroa.3111.0.insert.ext.i1135 = zext i32 %offset.i.i260.i11161388 to i160
  %.sroa.3111.0.insert.shift.i1136 = shl nuw i160 %.sroa.3111.0.insert.ext.i1135, 128
  %.sroa.2110.0.insert.ext.i1137 = zext i64 %1168 to i160
  %.sroa.2110.0.insert.shift.i1138 = shl nuw nsw i160 %.sroa.2110.0.insert.ext.i1137, 64
  %.sroa.2110.0.insert.insert.i1139 = or disjoint i160 %.sroa.2110.0.insert.shift.i1138, %.sroa.3111.0.insert.shift.i1136
  %.sroa.0109.0.insert.ext.i1140 = zext i64 %1167 to i160
  %.sroa.0109.0.insert.insert.i1141 = or disjoint i160 %.sroa.2110.0.insert.insert.i1139, %.sroa.0109.0.insert.ext.i1140
  %1214 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0109.0.insert.insert.i1141, 1
  %1215 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1216 = load ptr, ptr %193, align 8
  %1217 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1216, 0
  %1218 = load ptr, ptr %194, align 8
  %1219 = insertvalue { ptr, ptr, ptr, i32 } %1217, ptr %1218, 1
  %1220 = load ptr, ptr %195, align 8
  %1221 = insertvalue { ptr, ptr, ptr, i32 } %1219, ptr %1220, 2
  %1222 = load i32, ptr %196, align 4
  %1223 = insertvalue { ptr, ptr, ptr, i32 } %1221, i32 %1222, 3
  %hash_coef_ptr.i.i186.i1146 = getelementptr i8, ptr %1216, i64 8
  %tbl_size_ptr.i.i187.i1147 = getelementptr i8, ptr %1216, i64 16
  %offset_tbl_ptr.i.i188.i1148 = getelementptr i8, ptr %1216, i64 40
  %hash_coef.i.i189.i1149 = load i64, ptr %hash_coef_ptr.i.i186.i1146, align 4
  %tbl_size.i.i190.i1150 = load i64, ptr %tbl_size_ptr.i.i187.i1147, align 4
  %offset_tbl.i.i191.i1151 = load ptr, ptr %offset_tbl_ptr.i.i188.i1148, align 8
  %product.i.i.i192.i1152 = mul i64 %hash_coef.i.i189.i1149, -5261542750394134544
  %shifted.i.i.i193.i1153 = lshr i64 %product.i.i.i192.i1152, 32
  %xored.i.i.i194.i1154 = xor i64 %shifted.i.i.i193.i1153, %product.i.i.i192.i1152
  %hash.i.i.i195.i1155 = and i64 %xored.i.i.i194.i1154, %tbl_size.i.i190.i1150
  %offset_ptr.i.i196.i1156 = getelementptr i32, ptr %offset_tbl.i.i191.i1151, i64 %hash.i.i.i195.i1155
  %offset.i.i197.i1157 = load i32, ptr %offset_ptr.i.i196.i1156, align 4
  %eq.i200.i1158 = icmp eq i32 %1222, %offset.i.i197.i1157
  call void @llvm.assume(i1 %eq.i200.i1158) #30
  %1224 = load ptr, ptr %result.i88, align 8
  %1225 = load ptr, ptr %176, align 8
  %result.i.i1159 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1226 = getelementptr i8, ptr %result.i.i1159, i64 16
  store ptr %1225, ptr %1226, align 8
  %1227 = getelementptr i8, ptr %result.i.i1159, i64 8
  store ptr %1224, ptr %1227, align 8
  %1228 = getelementptr i8, ptr %result.i.i1159, i64 24
  store ptr null, ptr %1228, align 8
  %1229 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i1159)
  store ptr @Entry, ptr %result.i.i1159, align 8
  store ptr @_parameterization_Ptri32, ptr %70, align 8
  store ptr %result.i.i1159, ptr %261, align 8
  %1230 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %70)
  %1231 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1216)
  %1232 = sext i32 %1222 to i64
  %1233 = getelementptr ptr, ptr %1216, i64 %1232
  %1234 = getelementptr i8, ptr %1233, i64 128
  %1235 = load ptr, ptr %1234, align 8
  store ptr @i32_typ, ptr %71, align 8
  store ptr @Entry, ptr %262, align 8
  %1236 = call ptr %1235({ ptr, ptr, ptr, i32 } %1223, ptr nonnull %71)
  call void %1236({ ptr, ptr, ptr, i32 } %1223, { ptr, ptr, ptr, i32 } %1223, ptr nonnull %70, i32 %1196, { ptr, i160 } %1214)
  %1237 = icmp ne ptr %.fca.0.extract112.i1134, @nil_typ
  %1238 = icmp ne ptr %.fca.0.extract112.i1134, null
  %.not140.i1160 = and i1 %1237, %1238
  br i1 %.not140.i1160, label %.cont.cont.i1099, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit1166.thread

1239:                                             ; preds = %1165
  %1240 = add i32 %1175, 2127912214
  %1241 = shl i32 %1175, 12
  %1242 = add i32 %1240, %1241
  %1243 = ashr i32 %1242, 19
  %1244 = xor i32 %1242, %1243
  %1245 = xor i32 %1244, -949894596
  %1246 = add i32 %1245, 374761393
  %1247 = shl i32 %1245, 5
  %1248 = add i32 %1246, %1247
  %1249 = add i32 %1248, -744332180
  %1250 = shl i32 %1248, 9
  %1251 = xor i32 %1249, %1250
  %1252 = add i32 %1251, -42973499
  %1253 = shl i32 %1251, 3
  %1254 = add i32 %1252, %1253
  %1255 = ashr i32 %1254, 16
  %1256 = xor i32 %1254, %1255
  %1257 = xor i32 %1256, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %1258 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1259 = load ptr, ptr %211, align 8
  %1260 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1259, 0
  %1261 = load ptr, ptr %212, align 8
  %1262 = insertvalue { ptr, ptr, ptr, i32 } %1260, ptr %1261, 1
  %1263 = load ptr, ptr %213, align 8
  %1264 = insertvalue { ptr, ptr, ptr, i32 } %1262, ptr %1263, 2
  %1265 = load i32, ptr %214, align 4
  %1266 = insertvalue { ptr, ptr, ptr, i32 } %1264, i32 %1265, 3
  %hash_coef_ptr.i.i10.i2474 = getelementptr i8, ptr %1259, i64 8
  %tbl_size_ptr.i.i11.i2475 = getelementptr i8, ptr %1259, i64 16
  %offset_tbl_ptr.i.i12.i2476 = getelementptr i8, ptr %1259, i64 40
  %hash_coef.i.i13.i2477 = load i64, ptr %hash_coef_ptr.i.i10.i2474, align 4
  %tbl_size.i.i14.i2478 = load i64, ptr %tbl_size_ptr.i.i11.i2475, align 4
  %offset_tbl.i.i15.i2479 = load ptr, ptr %offset_tbl_ptr.i.i12.i2476, align 8
  %product.i.i.i16.i2480 = mul i64 %hash_coef.i.i13.i2477, -5261542750394134544
  %shifted.i.i.i17.i2481 = lshr i64 %product.i.i.i16.i2480, 32
  %xored.i.i.i18.i2482 = xor i64 %shifted.i.i.i17.i2481, %product.i.i.i16.i2480
  %hash.i.i.i19.i2483 = and i64 %xored.i.i.i18.i2482, %tbl_size.i.i14.i2478
  %offset_ptr.i.i20.i2484 = getelementptr i32, ptr %offset_tbl.i.i15.i2479, i64 %hash.i.i.i19.i2483
  %offset.i.i21.i2485 = load i32, ptr %offset_ptr.i.i20.i2484, align 4
  %eq.i.i2486 = icmp eq i32 %1265, %offset.i.i21.i2485
  call void @llvm.assume(i1 %eq.i.i2486) #30
  %1267 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1268 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1259)
  %1269 = sext i32 %1265 to i64
  %1270 = getelementptr ptr, ptr %1259, i64 %1269
  %1271 = getelementptr i8, ptr %1270, i64 64
  %1272 = load ptr, ptr %1271, align 8
  %1273 = call ptr %1272({ ptr, ptr, ptr, i32 } %1266, ptr nonnull %2)
  %1274 = call i32 %1273({ ptr, ptr, ptr, i32 } %1266, { ptr, ptr, ptr, i32 } %1266, ptr nonnull %2)
  %1275 = add i32 %1274, -1
  %1276 = and i32 %1275, %1257
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %1277 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1278 = load ptr, ptr %211, align 8
  %1279 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1278, 0
  %1280 = load ptr, ptr %212, align 8
  %1281 = insertvalue { ptr, ptr, ptr, i32 } %1279, ptr %1280, 1
  %1282 = load ptr, ptr %213, align 8
  %1283 = insertvalue { ptr, ptr, ptr, i32 } %1281, ptr %1282, 2
  %1284 = load i32, ptr %214, align 4
  %1285 = insertvalue { ptr, ptr, ptr, i32 } %1283, i32 %1284, 3
  %hash_coef_ptr.i.i202.i1053 = getelementptr i8, ptr %1278, i64 8
  %tbl_size_ptr.i.i203.i1054 = getelementptr i8, ptr %1278, i64 16
  %offset_tbl_ptr.i.i204.i1055 = getelementptr i8, ptr %1278, i64 40
  %hash_coef.i.i205.i1056 = load i64, ptr %hash_coef_ptr.i.i202.i1053, align 4
  %tbl_size.i.i206.i1057 = load i64, ptr %tbl_size_ptr.i.i203.i1054, align 4
  %offset_tbl.i.i207.i1058 = load ptr, ptr %offset_tbl_ptr.i.i204.i1055, align 8
  %product.i.i.i208.i1059 = mul i64 %hash_coef.i.i205.i1056, -5261542750394134544
  %shifted.i.i.i209.i1060 = lshr i64 %product.i.i.i208.i1059, 32
  %xored.i.i.i210.i1061 = xor i64 %shifted.i.i.i209.i1060, %product.i.i.i208.i1059
  %hash.i.i.i211.i1062 = and i64 %xored.i.i.i210.i1061, %tbl_size.i.i206.i1057
  %offset_ptr.i.i212.i1063 = getelementptr i32, ptr %offset_tbl.i.i207.i1058, i64 %hash.i.i.i211.i1062
  %offset.i.i213.i1064 = load i32, ptr %offset_ptr.i.i212.i1063, align 4
  %eq.i216.i1065 = icmp eq i32 %1284, %offset.i.i213.i1064
  call void @llvm.assume(i1 %eq.i216.i1065) #30
  store ptr @_parameterization_Ptri32, ptr %76, align 8
  %1286 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %76)
  %1287 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1278)
  %1288 = sext i32 %1284 to i64
  %1289 = getelementptr ptr, ptr %1278, i64 %1288
  %1290 = getelementptr i8, ptr %1289, i64 120
  %1291 = load ptr, ptr %1290, align 8
  store ptr @i32_typ, ptr %77, align 8
  %1292 = call ptr %1291({ ptr, ptr, ptr, i32 } %1285, ptr nonnull %77)
  %1293 = call { ptr, i160 } %1292({ ptr, ptr, ptr, i32 } %1285, { ptr, ptr, ptr, i32 } %1285, ptr nonnull %76, i32 %1276)
  %.fca.0.extract87.i1066 = extractvalue { ptr, i160 } %1293, 0
  %.sroa.3.0.insert.ext.i1067 = zext i32 %offset.i.i260.i11161388 to i160
  %.sroa.3.0.insert.shift.i1068 = shl nuw i160 %.sroa.3.0.insert.ext.i1067, 128
  %.sroa.2.0.insert.ext.i1069 = zext i64 %1168 to i160
  %.sroa.2.0.insert.shift.i1070 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i1069, 64
  %.sroa.2.0.insert.insert.i1071 = or disjoint i160 %.sroa.2.0.insert.shift.i1070, %.sroa.3.0.insert.shift.i1068
  %.sroa.0.0.insert.ext.i1072 = zext i64 %1167 to i160
  %.sroa.0.0.insert.insert.i1073 = or disjoint i160 %.sroa.2.0.insert.insert.i1071, %.sroa.0.0.insert.ext.i1072
  %1294 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0.0.insert.insert.i1073, 1
  %1295 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1296 = load ptr, ptr %211, align 8
  %1297 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1296, 0
  %1298 = load ptr, ptr %212, align 8
  %1299 = insertvalue { ptr, ptr, ptr, i32 } %1297, ptr %1298, 1
  %1300 = load ptr, ptr %213, align 8
  %1301 = insertvalue { ptr, ptr, ptr, i32 } %1299, ptr %1300, 2
  %1302 = load i32, ptr %214, align 4
  %1303 = insertvalue { ptr, ptr, ptr, i32 } %1301, i32 %1302, 3
  %hash_coef_ptr.i.i218.i1078 = getelementptr i8, ptr %1296, i64 8
  %tbl_size_ptr.i.i219.i1079 = getelementptr i8, ptr %1296, i64 16
  %offset_tbl_ptr.i.i220.i1080 = getelementptr i8, ptr %1296, i64 40
  %hash_coef.i.i221.i1081 = load i64, ptr %hash_coef_ptr.i.i218.i1078, align 4
  %tbl_size.i.i222.i1082 = load i64, ptr %tbl_size_ptr.i.i219.i1079, align 4
  %offset_tbl.i.i223.i1083 = load ptr, ptr %offset_tbl_ptr.i.i220.i1080, align 8
  %product.i.i.i224.i1084 = mul i64 %hash_coef.i.i221.i1081, -5261542750394134544
  %shifted.i.i.i225.i1085 = lshr i64 %product.i.i.i224.i1084, 32
  %xored.i.i.i226.i1086 = xor i64 %shifted.i.i.i225.i1085, %product.i.i.i224.i1084
  %hash.i.i.i227.i1087 = and i64 %xored.i.i.i226.i1086, %tbl_size.i.i222.i1082
  %offset_ptr.i.i228.i1088 = getelementptr i32, ptr %offset_tbl.i.i223.i1083, i64 %hash.i.i.i227.i1087
  %offset.i.i229.i1089 = load i32, ptr %offset_ptr.i.i228.i1088, align 4
  %eq.i232.i1090 = icmp eq i32 %1302, %offset.i.i229.i1089
  call void @llvm.assume(i1 %eq.i232.i1090) #30
  %1304 = load ptr, ptr %result.i88, align 8
  %1305 = load ptr, ptr %176, align 8
  %result.i233.i1091 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1306 = getelementptr i8, ptr %result.i233.i1091, i64 16
  store ptr %1305, ptr %1306, align 8
  %1307 = getelementptr i8, ptr %result.i233.i1091, i64 8
  store ptr %1304, ptr %1307, align 8
  %1308 = getelementptr i8, ptr %result.i233.i1091, i64 24
  store ptr null, ptr %1308, align 8
  %1309 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i233.i1091)
  store ptr @Entry, ptr %result.i233.i1091, align 8
  store ptr @_parameterization_Ptri32, ptr %78, align 8
  store ptr %result.i233.i1091, ptr %259, align 8
  %1310 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %78)
  %1311 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1296)
  %1312 = sext i32 %1302 to i64
  %1313 = getelementptr ptr, ptr %1296, i64 %1312
  %1314 = getelementptr i8, ptr %1313, i64 128
  %1315 = load ptr, ptr %1314, align 8
  store ptr @i32_typ, ptr %79, align 8
  store ptr @Entry, ptr %260, align 8
  %1316 = call ptr %1315({ ptr, ptr, ptr, i32 } %1303, ptr nonnull %79)
  call void %1316({ ptr, ptr, ptr, i32 } %1303, { ptr, ptr, ptr, i32 } %1303, ptr nonnull %78, i32 %1276, { ptr, i160 } %1294)
  %1317 = icmp ne ptr %.fca.0.extract87.i1066, @nil_typ
  %1318 = icmp ne ptr %.fca.0.extract87.i1066, null
  %.not138.i1092 = and i1 %1317, %1318
  br i1 %.not138.i1092, label %.cont.cont.i1099, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit1166.thread

.cont.cont.i1099:                                 ; preds = %1239, %1177
  %.sink1399 = phi { ptr, i160 } [ %1213, %1177 ], [ %1293, %1239 ]
  %1319 = phi i32 [ 2, %1177 ], [ 1, %1239 ]
  %vptr.i248.sroa.speculated.i1102 = phi ptr [ %.fca.0.extract112.i1134, %1177 ], [ %.fca.0.extract87.i1066, %1239 ]
  %.fca.1.extract89.i1095 = extractvalue { ptr, i160 } %.sink1399, 1
  %.sroa.3407.sroa.4.0.extract.shift.i1096 = lshr i160 %.fca.1.extract89.i1095, 64
  %1320 = trunc i160 %.sroa.3407.sroa.4.0.extract.shift.i1096 to i64
  %1321 = insertelement <2 x i64> poison, i64 %1320, i64 0
  %1322 = trunc i160 %.fca.1.extract89.i1095 to i64
  %1323 = insertelement <2 x i64> %1321, i64 %1322, i64 1
  %hash_coef_ptr.i.i249.i1105 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i1102, i64 8
  %tbl_size_ptr.i.i250.i1106 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i1102, i64 16
  %offset_tbl_ptr.i.i251.i1107 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i1102, i64 40
  %hash_coef.i.i252.i1108 = load i64, ptr %hash_coef_ptr.i.i249.i1105, align 4
  %tbl_size.i.i253.i1109 = load i64, ptr %tbl_size_ptr.i.i250.i1106, align 4
  %offset_tbl.i.i254.i1110 = load ptr, ptr %offset_tbl_ptr.i.i251.i1107, align 8
  %product.i.i.i255.i1111 = mul i64 %hash_coef.i.i252.i1108, 4015701072841558310
  %shifted.i.i.i256.i1112 = lshr i64 %product.i.i.i255.i1111, 32
  %xored.i.i.i257.i1113 = xor i64 %shifted.i.i.i256.i1112, %product.i.i.i255.i1111
  %hash.i.i.i258.i1114 = and i64 %xored.i.i.i257.i1113, %tbl_size.i.i253.i1109
  %offset_ptr.i.i259.i1115 = getelementptr i32, ptr %offset_tbl.i.i254.i1110, i64 %hash.i.i.i258.i1114
  %offset.i.i260.i1116 = load i32, ptr %offset_ptr.i.i259.i1115, align 4
  %1324 = add nuw nsw i32 %.reg2mem193.0677.i1048, 1
  %1325 = load i32, ptr %216, align 4
  %1326 = icmp slt i32 %1324, %1325
  br i1 %1326, label %1165, label %._crit_edge3.1.i

HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit1166.thread: ; preds = %1177, %1239
  %1327 = phi ptr [ %80, %1239 ], [ %72, %1177 ]
  %1328 = phi ptr [ %81, %1239 ], [ %73, %1177 ]
  %1329 = phi ptr [ %82, %1239 ], [ %74, %1177 ]
  %1330 = phi ptr [ %.sroa.0.i1010, %1239 ], [ %.sroa.0680.i1008, %1177 ]
  %1331 = phi ptr [ %83, %1239 ], [ %75, %1177 ]
  %1332 = load i32, ptr %215, align 4
  store i32 %1332, ptr %1327, align 4
  store i32 1, ptr %1328, align 4
  %1333 = add i32 %1332, 1
  store i32 %1333, ptr %1329, align 4
  %1334 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  store i32 %1333, ptr %215, align 4
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %1331, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %1330, align 8
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %68)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %69)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %70)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %71)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %72)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %73)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %74)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i1008)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %75)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %76)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %77)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %78)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %79)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %80)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %81)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %82)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i1010)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %83)
  br label %HashMap_insert_keyK_valueV.exit

._crit_edge3.1.i:                                 ; preds = %.cont.cont.i1099, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2426
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %68)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %69)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %70)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %71)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %72)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %73)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %74)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i1008)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %75)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %76)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %77)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %78)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %79)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %80)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %81)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %82)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i1010)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %83)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %66)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %67)
  %1335 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1336 = load ptr, ptr %193, align 8
  %1337 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1336, 0
  %1338 = load ptr, ptr %194, align 8
  %1339 = insertvalue { ptr, ptr, ptr, i32 } %1337, ptr %1338, 1
  %1340 = load ptr, ptr %195, align 8
  %1341 = insertvalue { ptr, ptr, ptr, i32 } %1339, ptr %1340, 2
  %1342 = load i32, ptr %196, align 4
  %1343 = insertvalue { ptr, ptr, ptr, i32 } %1341, i32 %1342, 3
  %hash_coef_ptr.i.i18.i1185 = getelementptr i8, ptr %1336, i64 8
  %tbl_size_ptr.i.i19.i1186 = getelementptr i8, ptr %1336, i64 16
  %offset_tbl_ptr.i.i20.i1187 = getelementptr i8, ptr %1336, i64 40
  %hash_coef.i.i21.i1188 = load i64, ptr %hash_coef_ptr.i.i18.i1185, align 4
  %tbl_size.i.i22.i1189 = load i64, ptr %tbl_size_ptr.i.i19.i1186, align 4
  %offset_tbl.i.i23.i1190 = load ptr, ptr %offset_tbl_ptr.i.i20.i1187, align 8
  %product.i.i.i24.i1191 = mul i64 %hash_coef.i.i21.i1188, -5261542750394134544
  %shifted.i.i.i25.i1192 = lshr i64 %product.i.i.i24.i1191, 32
  %xored.i.i.i26.i1193 = xor i64 %shifted.i.i.i25.i1192, %product.i.i.i24.i1191
  %hash.i.i.i27.i1194 = and i64 %xored.i.i.i26.i1193, %tbl_size.i.i22.i1189
  %offset_ptr.i.i28.i1195 = getelementptr i32, ptr %offset_tbl.i.i23.i1190, i64 %hash.i.i.i27.i1194
  %offset.i.i29.i1196 = load i32, ptr %offset_ptr.i.i28.i1195, align 4
  %eq.i.i1197 = icmp eq i32 %1342, %offset.i.i29.i1196
  call void @llvm.assume(i1 %eq.i.i1197) #30
  %1344 = load ptr, ptr %211, align 8
  %1345 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1344, 0
  %1346 = load ptr, ptr %212, align 8
  %1347 = insertvalue { ptr, ptr, ptr, i32 } %1345, ptr %1346, 1
  %1348 = load ptr, ptr %213, align 8
  %1349 = insertvalue { ptr, ptr, ptr, i32 } %1347, ptr %1348, 2
  %1350 = load i32, ptr %214, align 4
  %hash_coef_ptr.i.i46.i1202 = getelementptr i8, ptr %1344, i64 8
  %tbl_size_ptr.i.i47.i1203 = getelementptr i8, ptr %1344, i64 16
  %offset_tbl_ptr.i.i48.i1204 = getelementptr i8, ptr %1344, i64 40
  %hash_coef.i.i49.i1205 = load i64, ptr %hash_coef_ptr.i.i46.i1202, align 4
  %tbl_size.i.i50.i1206 = load i64, ptr %tbl_size_ptr.i.i47.i1203, align 4
  %offset_tbl.i.i51.i1207 = load ptr, ptr %offset_tbl_ptr.i.i48.i1204, align 8
  %product.i.i.i52.i1208 = mul i64 %hash_coef.i.i49.i1205, -5261542750394134544
  %shifted.i.i.i53.i1209 = lshr i64 %product.i.i.i52.i1208, 32
  %xored.i.i.i54.i1210 = xor i64 %shifted.i.i.i53.i1209, %product.i.i.i52.i1208
  %hash.i.i.i55.i1211 = and i64 %xored.i.i.i54.i1210, %tbl_size.i.i50.i1206
  %offset_ptr.i.i56.i1212 = getelementptr i32, ptr %offset_tbl.i.i51.i1207, i64 %hash.i.i.i55.i1211
  %offset.i.i57.i1213 = load i32, ptr %offset_ptr.i.i56.i1212, align 4
  %eq.i60.i1214 = icmp eq i32 %1350, %offset.i.i57.i1213
  call void @llvm.assume(i1 %eq.i60.i1214) #30
  %1351 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1352 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1336)
  %1353 = sext i32 %1342 to i64
  %1354 = getelementptr ptr, ptr %1336, i64 %1353
  %1355 = getelementptr i8, ptr %1354, i64 64
  %1356 = load ptr, ptr %1355, align 8
  %1357 = call ptr %1356({ ptr, ptr, ptr, i32 } %1343, ptr nonnull %2)
  %1358 = call i32 %1357({ ptr, ptr, ptr, i32 } %1343, { ptr, ptr, ptr, i32 } %1343, ptr nonnull %2)
  %1359 = shl i32 %1358, 1
  %1360 = call i32 @llvm.smax.i32(i32 %1359, i32 16)
  %1361 = load ptr, ptr %result.i88, align 8
  %1362 = load ptr, ptr %176, align 8
  %result.i.i1215 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1363 = getelementptr i8, ptr %result.i.i1215, i64 16
  store ptr @_parameterization_Nil, ptr %1363, align 8
  %result.i75.i1216 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1364 = getelementptr i8, ptr %result.i75.i1216, i64 16
  store ptr %1362, ptr %1364, align 8
  %1365 = getelementptr i8, ptr %result.i75.i1216, i64 8
  store ptr %1361, ptr %1365, align 8
  %1366 = getelementptr i8, ptr %result.i75.i1216, i64 24
  store ptr null, ptr %1366, align 8
  %1367 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i75.i1216)
  store ptr @Entry, ptr %result.i75.i1216, align 8
  %1368 = getelementptr i8, ptr %result.i.i1215, i64 8
  store ptr %result.i75.i1216, ptr %1368, align 8
  %1369 = getelementptr i8, ptr %result.i.i1215, i64 24
  store ptr null, ptr %1369, align 8
  %1370 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i1215)
  store ptr @union_typ, ptr %result.i.i1215, align 8
  %result.i76.i1217 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i1215, ptr %result.i76.i1217, align 8
  %1371 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i76.i1217)
  store ptr @Array, ptr %66, align 8
  store ptr %result.i76.i1217, ptr %263, align 8
  store i32 9, ptr %264, align 8
  %1372 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %66)
  %1373 = getelementptr i8, ptr %result.i76.i1217, i64 16
  store i32 %1360, ptr %1373, align 4
  %1374 = getelementptr i8, ptr %result.i76.i1217, i64 20
  store i32 %1360, ptr %1374, align 4
  %1375 = zext nneg i32 %1360 to i64
  %1376 = shl nuw nsw i64 %1375, 5
  %result.i.i.i1218 = call noalias ptr @bump_malloc_inner(i64 noundef %1376, ptr nonnull @current_ptr) #29
  %1377 = getelementptr i8, ptr %result.i76.i1217, i64 8
  store ptr %result.i.i.i1218, ptr %1377, align 8
  %1378 = load ptr, ptr %265, align 8
  store ptr @Array, ptr %193, align 8
  store ptr %result.i76.i1217, ptr %194, align 8
  store ptr %1378, ptr %195, align 8
  store i32 9, ptr %196, align 4
  %result.i91.i1231 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1379 = getelementptr i8, ptr %result.i91.i1231, i64 16
  store ptr @_parameterization_Nil, ptr %1379, align 8
  %result.i92.i1232 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1380 = getelementptr i8, ptr %result.i92.i1232, i64 16
  store ptr %1362, ptr %1380, align 8
  %1381 = getelementptr i8, ptr %result.i92.i1232, i64 8
  store ptr %1361, ptr %1381, align 8
  %1382 = getelementptr i8, ptr %result.i92.i1232, i64 24
  store ptr null, ptr %1382, align 8
  %1383 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i92.i1232)
  store ptr @Entry, ptr %result.i92.i1232, align 8
  %1384 = getelementptr i8, ptr %result.i91.i1231, i64 8
  store ptr %result.i92.i1232, ptr %1384, align 8
  %1385 = getelementptr i8, ptr %result.i91.i1231, i64 24
  store ptr null, ptr %1385, align 8
  %1386 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i91.i1231)
  store ptr @union_typ, ptr %result.i91.i1231, align 8
  %result.i93.i1233 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i91.i1231, ptr %result.i93.i1233, align 8
  %1387 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i93.i1233)
  store ptr @Array, ptr %67, align 8
  store ptr %result.i93.i1233, ptr %266, align 8
  store i32 9, ptr %267, align 8
  %1388 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %67)
  %1389 = getelementptr i8, ptr %result.i93.i1233, i64 16
  store i32 %1360, ptr %1389, align 4
  %1390 = getelementptr i8, ptr %result.i93.i1233, i64 20
  store i32 %1360, ptr %1390, align 4
  %result.i.i234.i1234 = call noalias ptr @bump_malloc_inner(i64 noundef %1376, ptr nonnull @current_ptr) #29
  %1391 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %1392 = getelementptr i8, ptr %result.i93.i1233, i64 8
  store ptr %result.i.i234.i1234, ptr %1392, align 8
  %1393 = load ptr, ptr %268, align 8
  store ptr @Array, ptr %211, align 8
  store ptr %result.i93.i1233, ptr %212, align 8
  store ptr %1393, ptr %213, align 8
  store i32 9, ptr %214, align 4
  store i32 0, ptr %215, align 4
  %1394 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %17)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %18)
  %1395 = icmp sgt i32 %1358, 0
  br i1 %1395, label %.lr.ph.i2489, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2592.critedge

.lr.ph.i2489:                                     ; preds = %._crit_edge3.1.i
  %invariant.gep.i2490 = getelementptr i8, ptr %1336, i64 120
  %offset_tbl.i.i24.i2492 = load ptr, ptr %offset_tbl_ptr.i.i20.i1187, align 8
  %hash_coef.i.i22.i2494 = load i64, ptr %hash_coef_ptr.i.i18.i1185, align 4
  %product.i.i.i25.i2495 = mul i64 %hash_coef.i.i22.i2494, -5261542750394134544
  %shifted.i.i.i26.i2496 = lshr i64 %product.i.i.i25.i2495, 32
  %xored.i.i.i27.i2497 = xor i64 %shifted.i.i.i26.i2496, %product.i.i.i25.i2495
  %tbl_size.i.i23.i2499 = load i64, ptr %tbl_size_ptr.i.i19.i1186, align 4
  %hash.i.i.i28.i2500 = and i64 %xored.i.i.i27.i2497, %tbl_size.i.i23.i2499
  %offset_ptr.i.i29.i2501 = getelementptr i32, ptr %offset_tbl.i.i24.i2492, i64 %hash.i.i.i28.i2500
  %offset.i.i30.i2502 = load i32, ptr %offset_ptr.i.i29.i2501, align 4
  %1396 = insertvalue { ptr, ptr, ptr, i32 } %1341, i32 %offset.i.i30.i2502, 3
  %1397 = sext i32 %offset.i.i30.i2502 to i64
  %gep.i2517 = getelementptr ptr, ptr %invariant.gep.i2490, i64 %1397
  %1398 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %1399

1399:                                             ; preds = %._crit_edge1.i2521, %.lr.ph.i2489
  %.reg2mem13.079.i2518 = phi i32 [ 0, %.lr.ph.i2489 ], [ %1416, %._crit_edge1.i2521 ]
  store ptr @_parameterization_Ptri32, ptr %17, align 8
  %1400 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %17)
  %1401 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %1336)
  %1402 = load ptr, ptr %gep.i2517, align 8
  store ptr @i32_typ, ptr %18, align 8
  %1403 = call ptr %1402({ ptr, ptr, ptr, i32 } %1396, ptr nonnull %18)
  %1404 = call { ptr, i160 } %1403({ ptr, ptr, ptr, i32 } %1396, { ptr, ptr, ptr, i32 } %1396, ptr nonnull %17, i32 %.reg2mem13.079.i2518)
  %.fca.0.extract11.i2519 = extractvalue { ptr, i160 } %1404, 0
  %1405 = icmp ne ptr %.fca.0.extract11.i2519, @nil_typ
  %1406 = icmp ne ptr %.fca.0.extract11.i2519, null
  %.not17.i2520 = and i1 %1405, %1406
  br i1 %.not17.i2520, label %1407, label %._crit_edge1.i2521

1407:                                             ; preds = %1399
  %.fca.1.extract13.i2522 = extractvalue { ptr, i160 } %1404, 1
  %.sroa.375.8.extract.trunc.i2523 = trunc i160 %.fca.1.extract13.i2522 to i64
  %1408 = inttoptr i64 %.sroa.375.8.extract.trunc.i2523 to ptr
  %.sroa.576.8.extract.shift.i2524 = lshr i160 %.fca.1.extract13.i2522, 64
  %.sroa.576.8.extract.trunc.i2525 = trunc i160 %.sroa.576.8.extract.shift.i2524 to i64
  %1409 = inttoptr i64 %.sroa.576.8.extract.trunc.i2525 to ptr
  %hash_coef_ptr.i.i33.i2526 = getelementptr i8, ptr %.fca.0.extract11.i2519, i64 8
  %tbl_size_ptr.i.i34.i2527 = getelementptr i8, ptr %.fca.0.extract11.i2519, i64 16
  %offset_tbl_ptr.i.i35.i2528 = getelementptr i8, ptr %.fca.0.extract11.i2519, i64 40
  %hash_coef.i.i36.i2529 = load i64, ptr %hash_coef_ptr.i.i33.i2526, align 4
  %tbl_size.i.i37.i2530 = load i64, ptr %tbl_size_ptr.i.i34.i2527, align 4
  %offset_tbl.i.i38.i2531 = load ptr, ptr %offset_tbl_ptr.i.i35.i2528, align 8
  %product.i.i.i39.i2532 = mul i64 %hash_coef.i.i36.i2529, 4015701072841558310
  %shifted.i.i.i40.i2533 = lshr i64 %product.i.i.i39.i2532, 32
  %xored.i.i.i41.i2534 = xor i64 %shifted.i.i.i40.i2533, %product.i.i.i39.i2532
  %hash.i.i.i42.i2535 = and i64 %xored.i.i.i41.i2534, %tbl_size.i.i37.i2530
  %offset_ptr.i.i43.i2536 = getelementptr i32, ptr %offset_tbl.i.i38.i2531, i64 %hash.i.i.i42.i2535
  %offset.i.i58.i2537 = load i32, ptr %offset_ptr.i.i43.i2536, align 4
  %1410 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i2519, 0
  %1411 = insertvalue { ptr, ptr, ptr, i32 } %1410, ptr %1408, 1
  %1412 = insertvalue { ptr, ptr, ptr, i32 } %1411, ptr %1409, 2
  %1413 = insertvalue { ptr, ptr, ptr, i32 } %1412, i32 %offset.i.i58.i2537, 3
  %1414 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1415 = call { ptr, i160 } @HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %271, { ptr, ptr, ptr, i32 } poison, ptr nonnull poison, { ptr, ptr, ptr, i32 } %1413)
  br label %._crit_edge1.i2521

._crit_edge1.i2521:                               ; preds = %1407, %1399
  %1416 = add nuw nsw i32 %.reg2mem13.079.i2518, 1
  %1417 = icmp slt i32 %1416, %1358
  br i1 %1417, label %1399, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2539

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2539: ; preds = %._crit_edge1.i2521
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %17)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %18)
  %1418 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %15)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %16)
  %invariant.gep.i2543 = getelementptr i8, ptr %1344, i64 120
  %offset_tbl.i.i24.i2545 = load ptr, ptr %offset_tbl_ptr.i.i48.i1204, align 8
  %hash_coef.i.i22.i2547 = load i64, ptr %hash_coef_ptr.i.i46.i1202, align 4
  %product.i.i.i25.i2548 = mul i64 %hash_coef.i.i22.i2547, -5261542750394134544
  %shifted.i.i.i26.i2549 = lshr i64 %product.i.i.i25.i2548, 32
  %xored.i.i.i27.i2550 = xor i64 %shifted.i.i.i26.i2549, %product.i.i.i25.i2548
  %tbl_size.i.i23.i2552 = load i64, ptr %tbl_size_ptr.i.i47.i1203, align 4
  %hash.i.i.i28.i2553 = and i64 %xored.i.i.i27.i2550, %tbl_size.i.i23.i2552
  %offset_ptr.i.i29.i2554 = getelementptr i32, ptr %offset_tbl.i.i24.i2545, i64 %hash.i.i.i28.i2553
  %offset.i.i30.i2555 = load i32, ptr %offset_ptr.i.i29.i2554, align 4
  %1419 = insertvalue { ptr, ptr, ptr, i32 } %1349, i32 %offset.i.i30.i2555, 3
  %1420 = sext i32 %offset.i.i30.i2555 to i64
  %gep.i2570 = getelementptr ptr, ptr %invariant.gep.i2543, i64 %1420
  %1421 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %1422

1422:                                             ; preds = %._crit_edge1.i2574, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2539
  %.reg2mem13.079.i2571 = phi i32 [ 0, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2539 ], [ %1439, %._crit_edge1.i2574 ]
  store ptr @_parameterization_Ptri32, ptr %15, align 8
  %1423 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %15)
  %1424 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %1344)
  %1425 = load ptr, ptr %gep.i2570, align 8
  store ptr @i32_typ, ptr %16, align 8
  %1426 = call ptr %1425({ ptr, ptr, ptr, i32 } %1419, ptr nonnull %16)
  %1427 = call { ptr, i160 } %1426({ ptr, ptr, ptr, i32 } %1419, { ptr, ptr, ptr, i32 } %1419, ptr nonnull %15, i32 %.reg2mem13.079.i2571)
  %.fca.0.extract11.i2572 = extractvalue { ptr, i160 } %1427, 0
  %1428 = icmp ne ptr %.fca.0.extract11.i2572, @nil_typ
  %1429 = icmp ne ptr %.fca.0.extract11.i2572, null
  %.not17.i2573 = and i1 %1428, %1429
  br i1 %.not17.i2573, label %1430, label %._crit_edge1.i2574

1430:                                             ; preds = %1422
  %.fca.1.extract13.i2575 = extractvalue { ptr, i160 } %1427, 1
  %.sroa.375.8.extract.trunc.i2576 = trunc i160 %.fca.1.extract13.i2575 to i64
  %1431 = inttoptr i64 %.sroa.375.8.extract.trunc.i2576 to ptr
  %.sroa.576.8.extract.shift.i2577 = lshr i160 %.fca.1.extract13.i2575, 64
  %.sroa.576.8.extract.trunc.i2578 = trunc i160 %.sroa.576.8.extract.shift.i2577 to i64
  %1432 = inttoptr i64 %.sroa.576.8.extract.trunc.i2578 to ptr
  %hash_coef_ptr.i.i33.i2579 = getelementptr i8, ptr %.fca.0.extract11.i2572, i64 8
  %tbl_size_ptr.i.i34.i2580 = getelementptr i8, ptr %.fca.0.extract11.i2572, i64 16
  %offset_tbl_ptr.i.i35.i2581 = getelementptr i8, ptr %.fca.0.extract11.i2572, i64 40
  %hash_coef.i.i36.i2582 = load i64, ptr %hash_coef_ptr.i.i33.i2579, align 4
  %tbl_size.i.i37.i2583 = load i64, ptr %tbl_size_ptr.i.i34.i2580, align 4
  %offset_tbl.i.i38.i2584 = load ptr, ptr %offset_tbl_ptr.i.i35.i2581, align 8
  %product.i.i.i39.i2585 = mul i64 %hash_coef.i.i36.i2582, 4015701072841558310
  %shifted.i.i.i40.i2586 = lshr i64 %product.i.i.i39.i2585, 32
  %xored.i.i.i41.i2587 = xor i64 %shifted.i.i.i40.i2586, %product.i.i.i39.i2585
  %hash.i.i.i42.i2588 = and i64 %xored.i.i.i41.i2587, %tbl_size.i.i37.i2583
  %offset_ptr.i.i43.i2589 = getelementptr i32, ptr %offset_tbl.i.i38.i2584, i64 %hash.i.i.i42.i2588
  %offset.i.i58.i2590 = load i32, ptr %offset_ptr.i.i43.i2589, align 4
  %1433 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i2572, 0
  %1434 = insertvalue { ptr, ptr, ptr, i32 } %1433, ptr %1431, 1
  %1435 = insertvalue { ptr, ptr, ptr, i32 } %1434, ptr %1432, 2
  %1436 = insertvalue { ptr, ptr, ptr, i32 } %1435, i32 %offset.i.i58.i2590, 3
  %1437 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1438 = call { ptr, i160 } @HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %271, { ptr, ptr, ptr, i32 } poison, ptr nonnull poison, { ptr, ptr, ptr, i32 } %1436)
  br label %._crit_edge1.i2574

._crit_edge1.i2574:                               ; preds = %1430, %1422
  %1439 = add nuw nsw i32 %.reg2mem13.079.i2571, 1
  %1440 = icmp slt i32 %1439, %1358
  br i1 %1440, label %1422, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2592

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2592.critedge: ; preds = %._crit_edge3.1.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %17)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %18)
  %1441 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %15)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %16)
  br label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2592

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2592: ; preds = %._crit_edge1.i2574, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2592.critedge
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %15)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %16)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %66)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %67)
  br label %HashMap_insert_keyK_valueV.exit

HashMap_insert_keyK_valueV.exit:                  ; preds = %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit1166.thread, %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit.thread, %.thread525.i, %.thread528.i, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2592
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %120)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %121)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %122)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %123)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %124)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %125)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %126)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %127)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %128)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %129)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %130)
  %1442 = add nuw nsw i32 %.reg2mem87.0238, 1
  %1443 = icmp slt i32 %1442, %0
  br i1 %1443, label %272, label %._crit_edge240

._crit_edge240:                                   ; preds = %HashMap_insert_keyK_valueV.exit
  %1444 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1445 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1446 = load i32, ptr %215, align 4
  %1447 = call i64 @clock()
  %1448 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %1449 = load ptr, ptr %175, align 8
  %invariant.gep = getelementptr i8, ptr %1449, i64 8
  %1450 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1451 = getelementptr inbounds i8, ptr %117, i64 8
  %1452 = getelementptr inbounds i8, ptr %117, i64 24
  %1453 = getelementptr inbounds i8, ptr %117, i64 16
  %1454 = getelementptr inbounds i8, ptr %114, i64 8
  %1455 = getelementptr inbounds i8, ptr %114, i64 24
  %1456 = getelementptr inbounds i8, ptr %114, i64 16
  %1457 = getelementptr inbounds i8, ptr %115, i64 8
  %1458 = getelementptr inbounds i8, ptr %116, i64 8
  %1459 = getelementptr inbounds i8, ptr %109, i64 8
  %1460 = getelementptr inbounds i8, ptr %109, i64 24
  %1461 = getelementptr inbounds i8, ptr %109, i64 16
  %1462 = getelementptr inbounds i8, ptr %110, i64 8
  %1463 = getelementptr inbounds i8, ptr %111, i64 8
  %1464 = getelementptr i8, ptr %result.i, i64 40
  %1465 = getelementptr i8, ptr %result.i, i64 72
  %1466 = getelementptr i8, ptr %result.i, i64 88
  %1467 = getelementptr inbounds i8, ptr %64, i64 8
  %1468 = getelementptr inbounds i8, ptr %64, i64 24
  %1469 = getelementptr inbounds i8, ptr %64, i64 16
  %1470 = getelementptr inbounds i8, ptr %65, i64 8
  %1471 = getelementptr inbounds i8, ptr %65, i64 24
  %1472 = getelementptr inbounds i8, ptr %65, i64 16
  %1473 = getelementptr inbounds i8, ptr %63, i64 8
  %1474 = getelementptr inbounds i8, ptr %63, i64 16
  %1475 = getelementptr inbounds i8, ptr %63, i64 24
  %1476 = getelementptr inbounds i8, ptr %57, i64 8
  %1477 = getelementptr inbounds i8, ptr %58, i64 8
  %1478 = getelementptr inbounds i8, ptr %49, i64 8
  %1479 = getelementptr inbounds i8, ptr %50, i64 8
  %1480 = getelementptr inbounds i8, ptr %45, i64 8
  %1481 = getelementptr inbounds i8, ptr %45, i64 24
  %1482 = getelementptr inbounds i8, ptr %45, i64 16
  %1483 = getelementptr inbounds i8, ptr %46, i64 8
  %1484 = getelementptr inbounds i8, ptr %46, i64 24
  %1485 = getelementptr inbounds i8, ptr %46, i64 16
  %1486 = getelementptr inbounds i8, ptr %39, i64 8
  %1487 = getelementptr inbounds i8, ptr %40, i64 8
  %1488 = getelementptr inbounds i8, ptr %31, i64 8
  %1489 = getelementptr inbounds i8, ptr %32, i64 8
  %1490 = getelementptr inbounds i8, ptr %27, i64 8
  %1491 = getelementptr inbounds i8, ptr %27, i64 24
  %1492 = getelementptr inbounds i8, ptr %27, i64 16
  %1493 = getelementptr inbounds i8, ptr %28, i64 8
  %1494 = getelementptr inbounds i8, ptr %28, i64 24
  %1495 = getelementptr inbounds i8, ptr %28, i64 16
  %1496 = insertvalue { ptr, ptr, ptr, i32 } { ptr @HashMap, ptr undef, ptr undef, i32 undef }, ptr %result.i, 1
  %1497 = insertvalue { ptr, ptr, ptr, i32 } %1496, ptr undef, 2
  %1498 = insertvalue { ptr, ptr, ptr, i32 } %1497, i32 9, 3
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge240, %HashMap_insert_keyK_valueV.exit703
  %.reg2mem75.0241 = phi i32 [ 0, %._crit_edge240 ], [ %2659, %HashMap_insert_keyK_valueV.exit703 ]
  %1499 = zext nneg i32 %.reg2mem75.0241 to i64
  %1500 = shl nuw nsw i64 %1499, 5
  %gep = getelementptr i8, ptr %invariant.gep, i64 %1500
  %1501 = load i160, ptr %gep, align 4
  %.sroa.1.8.extract.trunc = trunc i160 %1501 to i32
  %1502 = add i32 %.sroa.1.8.extract.trunc, 1
  %.sroa.033.0.insert.ext = and i160 %1501, 4294967295
  %1503 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.033.0.insert.ext, 1
  %.sroa.030.0.insert.ext = zext i32 %1502 to i160
  %1504 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.030.0.insert.ext, 1
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %109)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %110)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %111)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %112)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %113)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %114)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %115)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %116)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %117)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %118)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %119)
  %1505 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1506 = load ptr, ptr %141, align 8
  %1507 = call i32 %1506({ ptr, i160 } %1503)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %1508 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1509 = load ptr, ptr %153, align 8
  %1510 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1509, 0
  %1511 = load ptr, ptr %154, align 8
  %1512 = insertvalue { ptr, ptr, ptr, i32 } %1510, ptr %1511, 1
  %1513 = load ptr, ptr %1464, align 8
  %1514 = insertvalue { ptr, ptr, ptr, i32 } %1512, ptr %1513, 2
  %1515 = load i32, ptr %155, align 4
  %1516 = insertvalue { ptr, ptr, ptr, i32 } %1514, i32 %1515, 3
  %hash_coef_ptr.i.i10.i1442 = getelementptr i8, ptr %1509, i64 8
  %tbl_size_ptr.i.i11.i1443 = getelementptr i8, ptr %1509, i64 16
  %offset_tbl_ptr.i.i12.i1444 = getelementptr i8, ptr %1509, i64 40
  %hash_coef.i.i13.i1445 = load i64, ptr %hash_coef_ptr.i.i10.i1442, align 4
  %tbl_size.i.i14.i1446 = load i64, ptr %tbl_size_ptr.i.i11.i1443, align 4
  %offset_tbl.i.i15.i1447 = load ptr, ptr %offset_tbl_ptr.i.i12.i1444, align 8
  %product.i.i.i16.i1448 = mul i64 %hash_coef.i.i13.i1445, -5261542750394134544
  %shifted.i.i.i17.i1449 = lshr i64 %product.i.i.i16.i1448, 32
  %xored.i.i.i18.i1450 = xor i64 %shifted.i.i.i17.i1449, %product.i.i.i16.i1448
  %hash.i.i.i19.i1451 = and i64 %xored.i.i.i18.i1450, %tbl_size.i.i14.i1446
  %offset_ptr.i.i20.i1452 = getelementptr i32, ptr %offset_tbl.i.i15.i1447, i64 %hash.i.i.i19.i1451
  %offset.i.i21.i1453 = load i32, ptr %offset_ptr.i.i20.i1452, align 4
  %eq.i.i1454 = icmp eq i32 %1515, %offset.i.i21.i1453
  call void @llvm.assume(i1 %eq.i.i1454) #30
  %1517 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1518 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1509)
  %1519 = sext i32 %1515 to i64
  %1520 = getelementptr ptr, ptr %1509, i64 %1519
  %1521 = getelementptr i8, ptr %1520, i64 64
  %1522 = load ptr, ptr %1521, align 8
  %1523 = call ptr %1522({ ptr, ptr, ptr, i32 } %1516, ptr nonnull %2)
  %1524 = call i32 %1523({ ptr, ptr, ptr, i32 } %1516, { ptr, ptr, ptr, i32 } %1516, ptr nonnull %2)
  %1525 = add i32 %1524, -1
  %1526 = and i32 %1525, %1507
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %1527 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1528 = load ptr, ptr %153, align 8
  %1529 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1528, 0
  %1530 = load ptr, ptr %154, align 8
  %1531 = insertvalue { ptr, ptr, ptr, i32 } %1529, ptr %1530, 1
  %1532 = load ptr, ptr %1464, align 8
  %1533 = insertvalue { ptr, ptr, ptr, i32 } %1531, ptr %1532, 2
  %1534 = load i32, ptr %155, align 4
  %1535 = insertvalue { ptr, ptr, ptr, i32 } %1533, i32 %1534, 3
  %hash_coef_ptr.i.i160.i552 = getelementptr i8, ptr %1528, i64 8
  %tbl_size_ptr.i.i161.i553 = getelementptr i8, ptr %1528, i64 16
  %offset_tbl_ptr.i.i162.i554 = getelementptr i8, ptr %1528, i64 40
  %hash_coef.i.i163.i555 = load i64, ptr %hash_coef_ptr.i.i160.i552, align 4
  %tbl_size.i.i164.i556 = load i64, ptr %tbl_size_ptr.i.i161.i553, align 4
  %offset_tbl.i.i165.i557 = load ptr, ptr %offset_tbl_ptr.i.i162.i554, align 8
  %product.i.i.i166.i558 = mul i64 %hash_coef.i.i163.i555, -5261542750394134544
  %shifted.i.i.i167.i559 = lshr i64 %product.i.i.i166.i558, 32
  %xored.i.i.i168.i560 = xor i64 %shifted.i.i.i167.i559, %product.i.i.i166.i558
  %hash.i.i.i169.i561 = and i64 %xored.i.i.i168.i560, %tbl_size.i.i164.i556
  %offset_ptr.i.i170.i562 = getelementptr i32, ptr %offset_tbl.i.i165.i557, i64 %hash.i.i.i169.i561
  %offset.i.i171.i563 = load i32, ptr %offset_ptr.i.i170.i562, align 4
  %eq.i.i564 = icmp eq i32 %1534, %offset.i.i171.i563
  call void @llvm.assume(i1 %eq.i.i564) #30
  store ptr @_parameterization_Ptri32, ptr %118, align 8
  %1536 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %118)
  %1537 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1528)
  %1538 = sext i32 %1534 to i64
  %1539 = getelementptr ptr, ptr %1528, i64 %1538
  %1540 = getelementptr i8, ptr %1539, i64 120
  %1541 = load ptr, ptr %1540, align 8
  store ptr @i32_typ, ptr %119, align 8
  %1542 = call ptr %1541({ ptr, ptr, ptr, i32 } %1535, ptr nonnull %119)
  %1543 = call { ptr, i160 } %1542({ ptr, ptr, ptr, i32 } %1535, { ptr, ptr, ptr, i32 } %1535, ptr nonnull %118, i32 %1526)
  %.fca.0.extract.i565 = extractvalue { ptr, i160 } %1543, 0
  %1544 = icmp ne ptr %.fca.0.extract.i565, @nil_typ
  %1545 = icmp ne ptr %.fca.0.extract.i565, null
  %.not151.i566 = and i1 %1544, %1545
  br i1 %.not151.i566, label %1546, label %.critedge.i567

1546:                                             ; preds = %._crit_edge
  %.fca.1.extract.i661 = extractvalue { ptr, i160 } %1543, 1
  %.sroa.4518.8.extract.trunc.i662 = trunc i160 %.fca.1.extract.i661 to i64
  %1547 = inttoptr i64 %.sroa.4518.8.extract.trunc.i662 to ptr
  %.sroa.7520.8.extract.shift.i663 = lshr i160 %.fca.1.extract.i661, 64
  %.sroa.7520.8.extract.trunc.i664 = trunc i160 %.sroa.7520.8.extract.shift.i663 to i64
  %1548 = inttoptr i64 %.sroa.7520.8.extract.trunc.i664 to ptr
  %hash_coef_ptr.i.i174.i665 = getelementptr i8, ptr %.fca.0.extract.i565, i64 8
  %tbl_size_ptr.i.i175.i666 = getelementptr i8, ptr %.fca.0.extract.i565, i64 16
  %offset_tbl_ptr.i.i176.i667 = getelementptr i8, ptr %.fca.0.extract.i565, i64 40
  %hash_coef.i.i177.i668 = load i64, ptr %hash_coef_ptr.i.i174.i665, align 4
  %tbl_size.i.i178.i669 = load i64, ptr %tbl_size_ptr.i.i175.i666, align 4
  %offset_tbl.i.i179.i670 = load ptr, ptr %offset_tbl_ptr.i.i176.i667, align 8
  %product.i.i.i180.i671 = mul i64 %hash_coef.i.i177.i668, 4015701072841558310
  %shifted.i.i.i181.i672 = lshr i64 %product.i.i.i180.i671, 32
  %xored.i.i.i182.i673 = xor i64 %shifted.i.i.i181.i672, %product.i.i.i180.i671
  %hash.i.i.i183.i674 = and i64 %xored.i.i.i182.i673, %tbl_size.i.i178.i669
  %offset_ptr.i.i184.i675 = getelementptr i32, ptr %offset_tbl.i.i179.i670, i64 %hash.i.i.i183.i674
  %offset.i.i185.i676 = load i32, ptr %offset_ptr.i.i184.i675, align 4
  %1549 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract.i565, 0
  %1550 = insertvalue { ptr, ptr, ptr, i32 } %1549, ptr %1547, 1
  %1551 = insertvalue { ptr, ptr, ptr, i32 } %1550, ptr %1548, 2
  %1552 = insertvalue { ptr, ptr, ptr, i32 } %1551, i32 %offset.i.i185.i676, 3
  %1553 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1554 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1555 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract.i565)
  %1556 = sext i32 %offset.i.i185.i676 to i64
  %1557 = getelementptr ptr, ptr %.fca.0.extract.i565, i64 %1556
  %1558 = getelementptr i8, ptr %1557, i64 64
  %1559 = load ptr, ptr %1558, align 8
  %1560 = call ptr %1559({ ptr, ptr, ptr, i32 } %1552, ptr nonnull %2)
  %1561 = call i32 %1560({ ptr, ptr, ptr, i32 } %1552, { ptr, ptr, ptr, i32 } %1552, ptr nonnull %2)
  %1562 = icmp eq i32 %1561, %1507
  br i1 %1562, label %1563, label %.critedge.i567

1563:                                             ; preds = %1546
  %1564 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1565 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1566 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract.i565)
  %1567 = getelementptr i8, ptr %1557, i64 48
  %1568 = load ptr, ptr %1567, align 8
  %1569 = call ptr %1568({ ptr, ptr, ptr, i32 } %1552, ptr nonnull %2)
  %1570 = call { ptr, i160 } %1569({ ptr, ptr, ptr, i32 } %1552, { ptr, ptr, ptr, i32 } %1552, ptr nonnull %2)
  %1571 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1572 = load ptr, ptr %142, align 8
  %1573 = call i1 %1572({ ptr, i160 } %1570, { ptr, i160 } %1503)
  br i1 %1573, label %.thread525.i678, label %.critedge.i567

.thread525.i678:                                  ; preds = %1563
  %1574 = load ptr, ptr %result.i, align 8
  %1575 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1576 = load ptr, ptr %136, align 8
  %1577 = load ptr, ptr %1574, align 8
  %1578 = getelementptr i8, ptr %1577, i64 48
  %1579 = load ptr, ptr %1578, align 8
  %1580 = call { i64, i64 } %1579(ptr nonnull %1574)
  %1581 = extractvalue { i64, i64 } %1580, 0
  %1582 = extractvalue { i64, i64 } %1580, 1
  %1583 = urem i64 20, %1582
  %1584 = icmp eq i64 %1583, 0
  %1585 = sub i64 %1582, %1583
  %1586 = select i1 %1584, i64 0, i64 %1585
  %1587 = add i64 %1581, 20
  %1588 = add i64 %1587, %1586
  %1589 = load ptr, ptr %1576, align 8
  %1590 = getelementptr i8, ptr %1589, i64 48
  %1591 = load ptr, ptr %1590, align 8
  %1592 = call { i64, i64 } %1591(ptr nonnull %1576)
  %1593 = extractvalue { i64, i64 } %1592, 0
  %1594 = extractvalue { i64, i64 } %1592, 1
  %1595 = call i64 @llvm.umax.i64(i64 %1582, i64 %1594)
  %1596 = call i64 @llvm.umax.i64(i64 %1595, i64 8)
  %1597 = urem i64 %1588, %1594
  %1598 = icmp eq i64 %1597, 0
  %1599 = sub i64 %1594, %1597
  %1600 = select i1 %1598, i64 0, i64 %1599
  %1601 = add i64 %1593, %1588
  %1602 = add i64 %1601, %1600
  %1603 = urem i64 %1602, %1596
  %1604 = icmp eq i64 %1603, 0
  %1605 = sub i64 %1596, %1603
  %1606 = select i1 %1604, i64 0, i64 %1605
  %1607 = add i64 %1606, %1602
  %result.i.i679 = call noalias ptr @bump_malloc_inner(i64 noundef %1607, ptr nonnull @current_ptr) #29
  store ptr %1574, ptr %result.i.i679, align 8
  %1608 = getelementptr i8, ptr %result.i.i679, i64 8
  store ptr %1576, ptr %1608, align 8
  %1609 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i.i679)
  store ptr @Entry, ptr %109, align 8
  store ptr %result.i.i679, ptr %1459, align 8
  store i32 9, ptr %1460, align 8
  %1610 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %109)
  %1611 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1612 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %1613 = load ptr, ptr %1574, align 8
  %1614 = getelementptr i8, ptr %1613, i64 48
  %1615 = load ptr, ptr %1614, align 8
  %1616 = call { i64, i64 } %1615(ptr nonnull %1574)
  %1617 = extractvalue { i64, i64 } %1616, 1
  %1618 = urem i64 20, %1617
  %1619 = icmp eq i64 %1618, 0
  %reass.sub3083 = sub i64 %1617, %1618
  %1620 = add i64 %reass.sub3083, 20
  %1621 = select i1 %1619, i64 20, i64 %1620
  %1622 = getelementptr i8, ptr %result.i.i679, i64 %1621
  %1623 = load ptr, ptr %result.i.i679, align 8
  %1624 = load ptr, ptr %1623, align 8
  %1625 = getelementptr i8, ptr %1624, i64 64
  %1626 = load ptr, ptr %1625, align 8
  call void %1626({ ptr, i160 } %1503, ptr nonnull %1623, ptr %1622)
  %1627 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %1628 = load ptr, ptr %result.i.i679, align 8
  %1629 = load ptr, ptr %1628, align 8
  %1630 = getelementptr i8, ptr %1629, i64 48
  %1631 = load ptr, ptr %1630, align 8
  %1632 = call { i64, i64 } %1631(ptr nonnull %1628)
  %1633 = extractvalue { i64, i64 } %1632, 0
  %1634 = extractvalue { i64, i64 } %1632, 1
  %1635 = urem i64 20, %1634
  %1636 = icmp eq i64 %1635, 0
  %1637 = sub i64 %1634, %1635
  %1638 = select i1 %1636, i64 0, i64 %1637
  %1639 = add i64 %1633, 20
  %1640 = add i64 %1639, %1638
  %1641 = load ptr, ptr %1608, align 8
  %1642 = load ptr, ptr %1641, align 8
  %1643 = getelementptr i8, ptr %1642, i64 48
  %1644 = load ptr, ptr %1643, align 8
  %1645 = call { i64, i64 } %1644(ptr nonnull %1641)
  %1646 = extractvalue { i64, i64 } %1645, 1
  %1647 = urem i64 %1640, %1646
  %1648 = icmp eq i64 %1647, 0
  %1649 = sub i64 %1646, %1647
  %1650 = select i1 %1648, i64 0, i64 %1649
  %1651 = getelementptr i8, ptr %result.i.i679, i64 %1640
  %1652 = getelementptr i8, ptr %1651, i64 %1650
  %1653 = load ptr, ptr %1608, align 8
  %1654 = load ptr, ptr %1653, align 8
  %1655 = getelementptr i8, ptr %1654, i64 64
  %1656 = load ptr, ptr %1655, align 8
  call void %1656({ ptr, i160 } %1504, ptr nonnull %1653, ptr %1652)
  %1657 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %1658 = getelementptr i8, ptr %result.i.i679, i64 16
  store i32 %1507, ptr %1658, align 4
  %1659 = load ptr, ptr %1461, align 8
  %1660 = ptrtoint ptr %result.i.i679 to i64
  %1661 = ptrtoint ptr %1659 to i64
  %.sroa.2129.0.insert.ext.i680 = zext i64 %1661 to i160
  %.sroa.2129.0.insert.shift.i681 = shl nuw nsw i160 %.sroa.2129.0.insert.ext.i680, 64
  %.sroa.0128.0.insert.ext.i683 = zext i64 %1660 to i160
  %.sroa.2129.0.insert.insert.i682 = or disjoint i160 %.sroa.2129.0.insert.shift.i681, %.sroa.0128.0.insert.ext.i683
  %.sroa.0128.0.insert.insert.i684 = or disjoint i160 %.sroa.2129.0.insert.insert.i682, 3062541302288446171170371466885913903104
  %1662 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0128.0.insert.insert.i684, 1
  %1663 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1664 = load ptr, ptr %153, align 8
  %1665 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1664, 0
  %1666 = load ptr, ptr %154, align 8
  %1667 = insertvalue { ptr, ptr, ptr, i32 } %1665, ptr %1666, 1
  %1668 = load ptr, ptr %1464, align 8
  %1669 = insertvalue { ptr, ptr, ptr, i32 } %1667, ptr %1668, 2
  %1670 = load i32, ptr %155, align 4
  %1671 = insertvalue { ptr, ptr, ptr, i32 } %1669, i32 %1670, 3
  %hash_coef_ptr.i.i202.i689 = getelementptr i8, ptr %1664, i64 8
  %tbl_size_ptr.i.i203.i690 = getelementptr i8, ptr %1664, i64 16
  %offset_tbl_ptr.i.i204.i691 = getelementptr i8, ptr %1664, i64 40
  %hash_coef.i.i205.i692 = load i64, ptr %hash_coef_ptr.i.i202.i689, align 4
  %tbl_size.i.i206.i693 = load i64, ptr %tbl_size_ptr.i.i203.i690, align 4
  %offset_tbl.i.i207.i694 = load ptr, ptr %offset_tbl_ptr.i.i204.i691, align 8
  %product.i.i.i208.i695 = mul i64 %hash_coef.i.i205.i692, -5261542750394134544
  %shifted.i.i.i209.i696 = lshr i64 %product.i.i.i208.i695, 32
  %xored.i.i.i210.i697 = xor i64 %shifted.i.i.i209.i696, %product.i.i.i208.i695
  %hash.i.i.i211.i698 = and i64 %xored.i.i.i210.i697, %tbl_size.i.i206.i693
  %offset_ptr.i.i212.i699 = getelementptr i32, ptr %offset_tbl.i.i207.i694, i64 %hash.i.i.i211.i698
  %offset.i.i213.i700 = load i32, ptr %offset_ptr.i.i212.i699, align 4
  %eq.i216.i701 = icmp eq i32 %1670, %offset.i.i213.i700
  call void @llvm.assume(i1 %eq.i216.i701) #30
  %1672 = load ptr, ptr %result.i, align 8
  %1673 = load ptr, ptr %136, align 8
  %result.i217.i702 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1674 = getelementptr i8, ptr %result.i217.i702, i64 16
  store ptr %1673, ptr %1674, align 8
  %1675 = getelementptr i8, ptr %result.i217.i702, i64 8
  store ptr %1672, ptr %1675, align 8
  %1676 = getelementptr i8, ptr %result.i217.i702, i64 24
  store ptr null, ptr %1676, align 8
  %1677 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i217.i702)
  store ptr @Entry, ptr %result.i217.i702, align 8
  store ptr @_parameterization_Ptri32, ptr %110, align 8
  store ptr %result.i217.i702, ptr %1462, align 8
  %1678 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %110)
  %1679 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1664)
  %1680 = sext i32 %1670 to i64
  %1681 = getelementptr ptr, ptr %1664, i64 %1680
  %1682 = getelementptr i8, ptr %1681, i64 128
  %1683 = load ptr, ptr %1682, align 8
  store ptr @i32_typ, ptr %111, align 8
  store ptr @Entry, ptr %1463, align 8
  %1684 = call ptr %1683({ ptr, ptr, ptr, i32 } %1671, ptr nonnull %111)
  call void %1684({ ptr, ptr, ptr, i32 } %1671, { ptr, ptr, ptr, i32 } %1671, ptr nonnull %110, i32 %1526, { ptr, i160 } %1662)
  br label %HashMap_insert_keyK_valueV.exit703

.critedge.i567:                                   ; preds = %1563, %1546, %._crit_edge
  %1685 = add i32 %1507, 2127912214
  %1686 = shl i32 %1507, 12
  %1687 = add i32 %1685, %1686
  %1688 = ashr i32 %1687, 19
  %1689 = xor i32 %1687, %1688
  %1690 = xor i32 %1689, -949894596
  %1691 = add i32 %1690, 374761393
  %1692 = shl i32 %1690, 5
  %1693 = add i32 %1691, %1692
  %1694 = add i32 %1693, -744332180
  %1695 = shl i32 %1693, 9
  %1696 = xor i32 %1694, %1695
  %1697 = add i32 %1696, -42973499
  %1698 = shl i32 %1696, 3
  %1699 = add i32 %1697, %1698
  %1700 = ashr i32 %1699, 16
  %1701 = xor i32 %1699, %1700
  %1702 = xor i32 %1701, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %1703 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1704 = load ptr, ptr %166, align 8
  %1705 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1704, 0
  %1706 = load ptr, ptr %167, align 8
  %1707 = insertvalue { ptr, ptr, ptr, i32 } %1705, ptr %1706, 1
  %1708 = load ptr, ptr %1465, align 8
  %1709 = insertvalue { ptr, ptr, ptr, i32 } %1707, ptr %1708, 2
  %1710 = load i32, ptr %168, align 4
  %1711 = insertvalue { ptr, ptr, ptr, i32 } %1709, i32 %1710, 3
  %hash_coef_ptr.i.i10.i1473 = getelementptr i8, ptr %1704, i64 8
  %tbl_size_ptr.i.i11.i1474 = getelementptr i8, ptr %1704, i64 16
  %offset_tbl_ptr.i.i12.i1475 = getelementptr i8, ptr %1704, i64 40
  %hash_coef.i.i13.i1476 = load i64, ptr %hash_coef_ptr.i.i10.i1473, align 4
  %tbl_size.i.i14.i1477 = load i64, ptr %tbl_size_ptr.i.i11.i1474, align 4
  %offset_tbl.i.i15.i1478 = load ptr, ptr %offset_tbl_ptr.i.i12.i1475, align 8
  %product.i.i.i16.i1479 = mul i64 %hash_coef.i.i13.i1476, -5261542750394134544
  %shifted.i.i.i17.i1480 = lshr i64 %product.i.i.i16.i1479, 32
  %xored.i.i.i18.i1481 = xor i64 %shifted.i.i.i17.i1480, %product.i.i.i16.i1479
  %hash.i.i.i19.i1482 = and i64 %xored.i.i.i18.i1481, %tbl_size.i.i14.i1477
  %offset_ptr.i.i20.i1483 = getelementptr i32, ptr %offset_tbl.i.i15.i1478, i64 %hash.i.i.i19.i1482
  %offset.i.i21.i1484 = load i32, ptr %offset_ptr.i.i20.i1483, align 4
  %eq.i.i1485 = icmp eq i32 %1710, %offset.i.i21.i1484
  call void @llvm.assume(i1 %eq.i.i1485) #30
  %1712 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1713 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1704)
  %1714 = sext i32 %1710 to i64
  %1715 = getelementptr ptr, ptr %1704, i64 %1714
  %1716 = getelementptr i8, ptr %1715, i64 64
  %1717 = load ptr, ptr %1716, align 8
  %1718 = call ptr %1717({ ptr, ptr, ptr, i32 } %1711, ptr nonnull %2)
  %1719 = call i32 %1718({ ptr, ptr, ptr, i32 } %1711, { ptr, ptr, ptr, i32 } %1711, ptr nonnull %2)
  %1720 = add i32 %1719, -1
  %1721 = and i32 %1720, %1702
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %1722 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1723 = load ptr, ptr %166, align 8
  %1724 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1723, 0
  %1725 = load ptr, ptr %167, align 8
  %1726 = insertvalue { ptr, ptr, ptr, i32 } %1724, ptr %1725, 1
  %1727 = load ptr, ptr %1465, align 8
  %1728 = insertvalue { ptr, ptr, ptr, i32 } %1726, ptr %1727, 2
  %1729 = load i32, ptr %168, align 4
  %1730 = insertvalue { ptr, ptr, ptr, i32 } %1728, i32 %1729, 3
  %hash_coef_ptr.i.i219.i572 = getelementptr i8, ptr %1723, i64 8
  %tbl_size_ptr.i.i220.i573 = getelementptr i8, ptr %1723, i64 16
  %offset_tbl_ptr.i.i221.i574 = getelementptr i8, ptr %1723, i64 40
  %hash_coef.i.i222.i575 = load i64, ptr %hash_coef_ptr.i.i219.i572, align 4
  %tbl_size.i.i223.i576 = load i64, ptr %tbl_size_ptr.i.i220.i573, align 4
  %offset_tbl.i.i224.i577 = load ptr, ptr %offset_tbl_ptr.i.i221.i574, align 8
  %product.i.i.i225.i578 = mul i64 %hash_coef.i.i222.i575, -5261542750394134544
  %shifted.i.i.i226.i579 = lshr i64 %product.i.i.i225.i578, 32
  %xored.i.i.i227.i580 = xor i64 %shifted.i.i.i226.i579, %product.i.i.i225.i578
  %hash.i.i.i228.i581 = and i64 %xored.i.i.i227.i580, %tbl_size.i.i223.i576
  %offset_ptr.i.i229.i582 = getelementptr i32, ptr %offset_tbl.i.i224.i577, i64 %hash.i.i.i228.i581
  %offset.i.i230.i583 = load i32, ptr %offset_ptr.i.i229.i582, align 4
  %eq.i233.i584 = icmp eq i32 %1729, %offset.i.i230.i583
  call void @llvm.assume(i1 %eq.i233.i584) #30
  store ptr @_parameterization_Ptri32, ptr %112, align 8
  %1731 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %112)
  %1732 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1723)
  %1733 = sext i32 %1729 to i64
  %1734 = getelementptr ptr, ptr %1723, i64 %1733
  %1735 = getelementptr i8, ptr %1734, i64 120
  %1736 = load ptr, ptr %1735, align 8
  store ptr @i32_typ, ptr %113, align 8
  %1737 = call ptr %1736({ ptr, ptr, ptr, i32 } %1730, ptr nonnull %113)
  %1738 = call { ptr, i160 } %1737({ ptr, ptr, ptr, i32 } %1730, { ptr, ptr, ptr, i32 } %1730, ptr nonnull %112, i32 %1721)
  %.fca.0.extract104.i585 = extractvalue { ptr, i160 } %1738, 0
  %1739 = icmp ne ptr %.fca.0.extract104.i585, @nil_typ
  %1740 = icmp ne ptr %.fca.0.extract104.i585, null
  %.not153.i586 = and i1 %1739, %1740
  br i1 %.not153.i586, label %1741, label %.critedge158.i587

1741:                                             ; preds = %.critedge.i567
  %.fca.1.extract106.i619 = extractvalue { ptr, i160 } %1738, 1
  %.sroa.4.8.extract.trunc.i620 = trunc i160 %.fca.1.extract106.i619 to i64
  %1742 = inttoptr i64 %.sroa.4.8.extract.trunc.i620 to ptr
  %.sroa.7506.8.extract.shift.i621 = lshr i160 %.fca.1.extract106.i619, 64
  %.sroa.7506.8.extract.trunc.i622 = trunc i160 %.sroa.7506.8.extract.shift.i621 to i64
  %1743 = inttoptr i64 %.sroa.7506.8.extract.trunc.i622 to ptr
  %hash_coef_ptr.i.i235.i623 = getelementptr i8, ptr %.fca.0.extract104.i585, i64 8
  %tbl_size_ptr.i.i236.i624 = getelementptr i8, ptr %.fca.0.extract104.i585, i64 16
  %offset_tbl_ptr.i.i237.i625 = getelementptr i8, ptr %.fca.0.extract104.i585, i64 40
  %hash_coef.i.i238.i626 = load i64, ptr %hash_coef_ptr.i.i235.i623, align 4
  %tbl_size.i.i239.i627 = load i64, ptr %tbl_size_ptr.i.i236.i624, align 4
  %offset_tbl.i.i240.i628 = load ptr, ptr %offset_tbl_ptr.i.i237.i625, align 8
  %product.i.i.i241.i629 = mul i64 %hash_coef.i.i238.i626, 4015701072841558310
  %shifted.i.i.i242.i630 = lshr i64 %product.i.i.i241.i629, 32
  %xored.i.i.i243.i631 = xor i64 %shifted.i.i.i242.i630, %product.i.i.i241.i629
  %hash.i.i.i244.i632 = and i64 %xored.i.i.i243.i631, %tbl_size.i.i239.i627
  %offset_ptr.i.i245.i633 = getelementptr i32, ptr %offset_tbl.i.i240.i628, i64 %hash.i.i.i244.i632
  %offset.i.i246.i634 = load i32, ptr %offset_ptr.i.i245.i633, align 4
  %1744 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract104.i585, 0
  %1745 = insertvalue { ptr, ptr, ptr, i32 } %1744, ptr %1742, 1
  %1746 = insertvalue { ptr, ptr, ptr, i32 } %1745, ptr %1743, 2
  %1747 = insertvalue { ptr, ptr, ptr, i32 } %1746, i32 %offset.i.i246.i634, 3
  %1748 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1749 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1750 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract104.i585)
  %1751 = sext i32 %offset.i.i246.i634 to i64
  %1752 = getelementptr ptr, ptr %.fca.0.extract104.i585, i64 %1751
  %1753 = getelementptr i8, ptr %1752, i64 64
  %1754 = load ptr, ptr %1753, align 8
  %1755 = call ptr %1754({ ptr, ptr, ptr, i32 } %1747, ptr nonnull %2)
  %1756 = call i32 %1755({ ptr, ptr, ptr, i32 } %1747, { ptr, ptr, ptr, i32 } %1747, ptr nonnull %2)
  %1757 = icmp eq i32 %1756, %1507
  br i1 %1757, label %1758, label %.critedge158.i587

1758:                                             ; preds = %1741
  %1759 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1760 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1761 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract104.i585)
  %1762 = getelementptr i8, ptr %1752, i64 48
  %1763 = load ptr, ptr %1762, align 8
  %1764 = call ptr %1763({ ptr, ptr, ptr, i32 } %1747, ptr nonnull %2)
  %1765 = call { ptr, i160 } %1764({ ptr, ptr, ptr, i32 } %1747, { ptr, ptr, ptr, i32 } %1747, ptr nonnull %2)
  %1766 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1767 = load ptr, ptr %142, align 8
  %1768 = call i1 %1767({ ptr, i160 } %1765, { ptr, i160 } %1503)
  br i1 %1768, label %.thread528.i636, label %.critedge158.i587

.thread528.i636:                                  ; preds = %1758
  %1769 = load ptr, ptr %result.i, align 8
  %1770 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1771 = load ptr, ptr %136, align 8
  %1772 = load ptr, ptr %1769, align 8
  %1773 = getelementptr i8, ptr %1772, i64 48
  %1774 = load ptr, ptr %1773, align 8
  %1775 = call { i64, i64 } %1774(ptr nonnull %1769)
  %1776 = extractvalue { i64, i64 } %1775, 0
  %1777 = extractvalue { i64, i64 } %1775, 1
  %1778 = urem i64 20, %1777
  %1779 = icmp eq i64 %1778, 0
  %1780 = sub i64 %1777, %1778
  %1781 = select i1 %1779, i64 0, i64 %1780
  %1782 = add i64 %1776, 20
  %1783 = add i64 %1782, %1781
  %1784 = load ptr, ptr %1771, align 8
  %1785 = getelementptr i8, ptr %1784, i64 48
  %1786 = load ptr, ptr %1785, align 8
  %1787 = call { i64, i64 } %1786(ptr nonnull %1771)
  %1788 = extractvalue { i64, i64 } %1787, 0
  %1789 = extractvalue { i64, i64 } %1787, 1
  %1790 = call i64 @llvm.umax.i64(i64 %1777, i64 %1789)
  %1791 = call i64 @llvm.umax.i64(i64 %1790, i64 8)
  %1792 = urem i64 %1783, %1789
  %1793 = icmp eq i64 %1792, 0
  %1794 = sub i64 %1789, %1792
  %1795 = select i1 %1793, i64 0, i64 %1794
  %1796 = add i64 %1788, %1783
  %1797 = add i64 %1796, %1795
  %1798 = urem i64 %1797, %1791
  %1799 = icmp eq i64 %1798, 0
  %1800 = sub i64 %1791, %1798
  %1801 = select i1 %1799, i64 0, i64 %1800
  %1802 = add i64 %1801, %1797
  %result.i248.i637 = call noalias ptr @bump_malloc_inner(i64 noundef %1802, ptr nonnull @current_ptr) #29
  store ptr %1769, ptr %result.i248.i637, align 8
  %1803 = getelementptr i8, ptr %result.i248.i637, i64 8
  store ptr %1771, ptr %1803, align 8
  %1804 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i248.i637)
  store ptr @Entry, ptr %114, align 8
  store ptr %result.i248.i637, ptr %1454, align 8
  store i32 9, ptr %1455, align 8
  %1805 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %114)
  %1806 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1807 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %1808 = load ptr, ptr %1769, align 8
  %1809 = getelementptr i8, ptr %1808, i64 48
  %1810 = load ptr, ptr %1809, align 8
  %1811 = call { i64, i64 } %1810(ptr nonnull %1769)
  %1812 = extractvalue { i64, i64 } %1811, 1
  %1813 = urem i64 20, %1812
  %1814 = icmp eq i64 %1813, 0
  %reass.sub3082 = sub i64 %1812, %1813
  %1815 = add i64 %reass.sub3082, 20
  %1816 = select i1 %1814, i64 20, i64 %1815
  %1817 = getelementptr i8, ptr %result.i248.i637, i64 %1816
  %1818 = load ptr, ptr %result.i248.i637, align 8
  %1819 = load ptr, ptr %1818, align 8
  %1820 = getelementptr i8, ptr %1819, i64 64
  %1821 = load ptr, ptr %1820, align 8
  call void %1821({ ptr, i160 } %1503, ptr nonnull %1818, ptr %1817)
  %1822 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %1823 = load ptr, ptr %result.i248.i637, align 8
  %1824 = load ptr, ptr %1823, align 8
  %1825 = getelementptr i8, ptr %1824, i64 48
  %1826 = load ptr, ptr %1825, align 8
  %1827 = call { i64, i64 } %1826(ptr nonnull %1823)
  %1828 = extractvalue { i64, i64 } %1827, 0
  %1829 = extractvalue { i64, i64 } %1827, 1
  %1830 = urem i64 20, %1829
  %1831 = icmp eq i64 %1830, 0
  %1832 = sub i64 %1829, %1830
  %1833 = select i1 %1831, i64 0, i64 %1832
  %1834 = add i64 %1828, 20
  %1835 = add i64 %1834, %1833
  %1836 = load ptr, ptr %1803, align 8
  %1837 = load ptr, ptr %1836, align 8
  %1838 = getelementptr i8, ptr %1837, i64 48
  %1839 = load ptr, ptr %1838, align 8
  %1840 = call { i64, i64 } %1839(ptr nonnull %1836)
  %1841 = extractvalue { i64, i64 } %1840, 1
  %1842 = urem i64 %1835, %1841
  %1843 = icmp eq i64 %1842, 0
  %1844 = sub i64 %1841, %1842
  %1845 = select i1 %1843, i64 0, i64 %1844
  %1846 = getelementptr i8, ptr %result.i248.i637, i64 %1835
  %1847 = getelementptr i8, ptr %1846, i64 %1845
  %1848 = load ptr, ptr %1803, align 8
  %1849 = load ptr, ptr %1848, align 8
  %1850 = getelementptr i8, ptr %1849, i64 64
  %1851 = load ptr, ptr %1850, align 8
  call void %1851({ ptr, i160 } %1504, ptr nonnull %1848, ptr %1847)
  %1852 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %1853 = getelementptr i8, ptr %result.i248.i637, i64 16
  store i32 %1507, ptr %1853, align 4
  %1854 = load ptr, ptr %1456, align 8
  %1855 = ptrtoint ptr %result.i248.i637 to i64
  %1856 = ptrtoint ptr %1854 to i64
  %.sroa.284.0.insert.ext.i638 = zext i64 %1856 to i160
  %.sroa.284.0.insert.shift.i639 = shl nuw nsw i160 %.sroa.284.0.insert.ext.i638, 64
  %.sroa.083.0.insert.ext.i641 = zext i64 %1855 to i160
  %.sroa.284.0.insert.insert.i640 = or disjoint i160 %.sroa.284.0.insert.shift.i639, %.sroa.083.0.insert.ext.i641
  %.sroa.083.0.insert.insert.i642 = or disjoint i160 %.sroa.284.0.insert.insert.i640, 3062541302288446171170371466885913903104
  %1857 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.083.0.insert.insert.i642, 1
  %1858 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1859 = load ptr, ptr %166, align 8
  %1860 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1859, 0
  %1861 = load ptr, ptr %167, align 8
  %1862 = insertvalue { ptr, ptr, ptr, i32 } %1860, ptr %1861, 1
  %1863 = load ptr, ptr %1465, align 8
  %1864 = insertvalue { ptr, ptr, ptr, i32 } %1862, ptr %1863, 2
  %1865 = load i32, ptr %168, align 4
  %1866 = insertvalue { ptr, ptr, ptr, i32 } %1864, i32 %1865, 3
  %hash_coef_ptr.i.i264.i647 = getelementptr i8, ptr %1859, i64 8
  %tbl_size_ptr.i.i265.i648 = getelementptr i8, ptr %1859, i64 16
  %offset_tbl_ptr.i.i266.i649 = getelementptr i8, ptr %1859, i64 40
  %hash_coef.i.i267.i650 = load i64, ptr %hash_coef_ptr.i.i264.i647, align 4
  %tbl_size.i.i268.i651 = load i64, ptr %tbl_size_ptr.i.i265.i648, align 4
  %offset_tbl.i.i269.i652 = load ptr, ptr %offset_tbl_ptr.i.i266.i649, align 8
  %product.i.i.i270.i653 = mul i64 %hash_coef.i.i267.i650, -5261542750394134544
  %shifted.i.i.i271.i654 = lshr i64 %product.i.i.i270.i653, 32
  %xored.i.i.i272.i655 = xor i64 %shifted.i.i.i271.i654, %product.i.i.i270.i653
  %hash.i.i.i273.i656 = and i64 %xored.i.i.i272.i655, %tbl_size.i.i268.i651
  %offset_ptr.i.i274.i657 = getelementptr i32, ptr %offset_tbl.i.i269.i652, i64 %hash.i.i.i273.i656
  %offset.i.i275.i658 = load i32, ptr %offset_ptr.i.i274.i657, align 4
  %eq.i278.i659 = icmp eq i32 %1865, %offset.i.i275.i658
  call void @llvm.assume(i1 %eq.i278.i659) #30
  %1867 = load ptr, ptr %result.i, align 8
  %1868 = load ptr, ptr %136, align 8
  %result.i279.i660 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1869 = getelementptr i8, ptr %result.i279.i660, i64 16
  store ptr %1868, ptr %1869, align 8
  %1870 = getelementptr i8, ptr %result.i279.i660, i64 8
  store ptr %1867, ptr %1870, align 8
  %1871 = getelementptr i8, ptr %result.i279.i660, i64 24
  store ptr null, ptr %1871, align 8
  %1872 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i279.i660)
  store ptr @Entry, ptr %result.i279.i660, align 8
  store ptr @_parameterization_Ptri32, ptr %115, align 8
  store ptr %result.i279.i660, ptr %1457, align 8
  %1873 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %115)
  %1874 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1859)
  %1875 = sext i32 %1865 to i64
  %1876 = getelementptr ptr, ptr %1859, i64 %1875
  %1877 = getelementptr i8, ptr %1876, i64 128
  %1878 = load ptr, ptr %1877, align 8
  store ptr @i32_typ, ptr %116, align 8
  store ptr @Entry, ptr %1458, align 8
  %1879 = call ptr %1878({ ptr, ptr, ptr, i32 } %1866, ptr nonnull %116)
  call void %1879({ ptr, ptr, ptr, i32 } %1866, { ptr, ptr, ptr, i32 } %1866, ptr nonnull %115, i32 %1721, { ptr, i160 } %1857)
  br label %HashMap_insert_keyK_valueV.exit703

.critedge158.i587:                                ; preds = %1758, %1741, %.critedge.i567
  %1880 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1881 = load ptr, ptr %153, align 8
  %1882 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1881, 0
  %1883 = load ptr, ptr %154, align 8
  %1884 = insertvalue { ptr, ptr, ptr, i32 } %1882, ptr %1883, 1
  %1885 = load ptr, ptr %1464, align 8
  %1886 = insertvalue { ptr, ptr, ptr, i32 } %1884, ptr %1885, 2
  %1887 = load i32, ptr %155, align 4
  %1888 = insertvalue { ptr, ptr, ptr, i32 } %1886, i32 %1887, 3
  %hash_coef_ptr.i.i281.i592 = getelementptr i8, ptr %1881, i64 8
  %tbl_size_ptr.i.i282.i593 = getelementptr i8, ptr %1881, i64 16
  %offset_tbl_ptr.i.i283.i594 = getelementptr i8, ptr %1881, i64 40
  %hash_coef.i.i284.i595 = load i64, ptr %hash_coef_ptr.i.i281.i592, align 4
  %tbl_size.i.i285.i596 = load i64, ptr %tbl_size_ptr.i.i282.i593, align 4
  %offset_tbl.i.i286.i597 = load ptr, ptr %offset_tbl_ptr.i.i283.i594, align 8
  %product.i.i.i287.i598 = mul i64 %hash_coef.i.i284.i595, -5261542750394134544
  %shifted.i.i.i288.i599 = lshr i64 %product.i.i.i287.i598, 32
  %xored.i.i.i289.i600 = xor i64 %shifted.i.i.i288.i599, %product.i.i.i287.i598
  %hash.i.i.i290.i601 = and i64 %xored.i.i.i289.i600, %tbl_size.i.i285.i596
  %offset_ptr.i.i291.i602 = getelementptr i32, ptr %offset_tbl.i.i286.i597, i64 %hash.i.i.i290.i601
  %offset.i.i292.i603 = load i32, ptr %offset_ptr.i.i291.i602, align 4
  %eq.i295.i604 = icmp eq i32 %1887, %offset.i.i292.i603
  call void @llvm.assume(i1 %eq.i295.i604) #30
  %1889 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1890 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1881)
  %1891 = sext i32 %1887 to i64
  %1892 = getelementptr ptr, ptr %1881, i64 %1891
  %1893 = getelementptr i8, ptr %1892, i64 64
  %1894 = load ptr, ptr %1893, align 8
  %1895 = call ptr %1894({ ptr, ptr, ptr, i32 } %1888, ptr nonnull %2)
  %1896 = call i32 %1895({ ptr, ptr, ptr, i32 } %1888, { ptr, ptr, ptr, i32 } %1888, ptr nonnull %2)
  %1897 = load i32, ptr %1466, align 4
  %.not.i605 = icmp slt i32 %1897, %1896
  br i1 %.not.i605, label %._crit_edge2.i606, label %1898

1898:                                             ; preds = %.critedge158.i587
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %64)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %65)
  %1899 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1900 = load ptr, ptr %153, align 8
  %1901 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1900, 0
  %1902 = load ptr, ptr %154, align 8
  %1903 = insertvalue { ptr, ptr, ptr, i32 } %1901, ptr %1902, 1
  %1904 = load ptr, ptr %1464, align 8
  %1905 = insertvalue { ptr, ptr, ptr, i32 } %1903, ptr %1904, 2
  %1906 = load i32, ptr %155, align 4
  %1907 = insertvalue { ptr, ptr, ptr, i32 } %1905, i32 %1906, 3
  %hash_coef_ptr.i.i18.i1502 = getelementptr i8, ptr %1900, i64 8
  %tbl_size_ptr.i.i19.i1503 = getelementptr i8, ptr %1900, i64 16
  %offset_tbl_ptr.i.i20.i1504 = getelementptr i8, ptr %1900, i64 40
  %hash_coef.i.i21.i1505 = load i64, ptr %hash_coef_ptr.i.i18.i1502, align 4
  %tbl_size.i.i22.i1506 = load i64, ptr %tbl_size_ptr.i.i19.i1503, align 4
  %offset_tbl.i.i23.i1507 = load ptr, ptr %offset_tbl_ptr.i.i20.i1504, align 8
  %product.i.i.i24.i1508 = mul i64 %hash_coef.i.i21.i1505, -5261542750394134544
  %shifted.i.i.i25.i1509 = lshr i64 %product.i.i.i24.i1508, 32
  %xored.i.i.i26.i1510 = xor i64 %shifted.i.i.i25.i1509, %product.i.i.i24.i1508
  %hash.i.i.i27.i1511 = and i64 %xored.i.i.i26.i1510, %tbl_size.i.i22.i1506
  %offset_ptr.i.i28.i1512 = getelementptr i32, ptr %offset_tbl.i.i23.i1507, i64 %hash.i.i.i27.i1511
  %offset.i.i29.i1513 = load i32, ptr %offset_ptr.i.i28.i1512, align 4
  %eq.i.i1514 = icmp eq i32 %1906, %offset.i.i29.i1513
  call void @llvm.assume(i1 %eq.i.i1514) #30
  %1908 = load ptr, ptr %166, align 8
  %1909 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1908, 0
  %1910 = load ptr, ptr %167, align 8
  %1911 = insertvalue { ptr, ptr, ptr, i32 } %1909, ptr %1910, 1
  %1912 = load ptr, ptr %1465, align 8
  %1913 = insertvalue { ptr, ptr, ptr, i32 } %1911, ptr %1912, 2
  %1914 = load i32, ptr %168, align 4
  %hash_coef_ptr.i.i46.i1519 = getelementptr i8, ptr %1908, i64 8
  %tbl_size_ptr.i.i47.i1520 = getelementptr i8, ptr %1908, i64 16
  %offset_tbl_ptr.i.i48.i1521 = getelementptr i8, ptr %1908, i64 40
  %hash_coef.i.i49.i1522 = load i64, ptr %hash_coef_ptr.i.i46.i1519, align 4
  %tbl_size.i.i50.i1523 = load i64, ptr %tbl_size_ptr.i.i47.i1520, align 4
  %offset_tbl.i.i51.i1524 = load ptr, ptr %offset_tbl_ptr.i.i48.i1521, align 8
  %product.i.i.i52.i1525 = mul i64 %hash_coef.i.i49.i1522, -5261542750394134544
  %shifted.i.i.i53.i1526 = lshr i64 %product.i.i.i52.i1525, 32
  %xored.i.i.i54.i1527 = xor i64 %shifted.i.i.i53.i1526, %product.i.i.i52.i1525
  %hash.i.i.i55.i1528 = and i64 %xored.i.i.i54.i1527, %tbl_size.i.i50.i1523
  %offset_ptr.i.i56.i1529 = getelementptr i32, ptr %offset_tbl.i.i51.i1524, i64 %hash.i.i.i55.i1528
  %offset.i.i57.i1530 = load i32, ptr %offset_ptr.i.i56.i1529, align 4
  %eq.i60.i1531 = icmp eq i32 %1914, %offset.i.i57.i1530
  call void @llvm.assume(i1 %eq.i60.i1531) #30
  %1915 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1916 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1900)
  %1917 = sext i32 %1906 to i64
  %1918 = getelementptr ptr, ptr %1900, i64 %1917
  %1919 = getelementptr i8, ptr %1918, i64 64
  %1920 = load ptr, ptr %1919, align 8
  %1921 = call ptr %1920({ ptr, ptr, ptr, i32 } %1907, ptr nonnull %2)
  %1922 = call i32 %1921({ ptr, ptr, ptr, i32 } %1907, { ptr, ptr, ptr, i32 } %1907, ptr nonnull %2)
  %1923 = shl i32 %1922, 1
  %1924 = call i32 @llvm.smax.i32(i32 %1923, i32 16)
  %1925 = load ptr, ptr %result.i, align 8
  %1926 = load ptr, ptr %136, align 8
  %result.i.i1532 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1927 = getelementptr i8, ptr %result.i.i1532, i64 16
  store ptr @_parameterization_Nil, ptr %1927, align 8
  %result.i75.i1533 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1928 = getelementptr i8, ptr %result.i75.i1533, i64 16
  store ptr %1926, ptr %1928, align 8
  %1929 = getelementptr i8, ptr %result.i75.i1533, i64 8
  store ptr %1925, ptr %1929, align 8
  %1930 = getelementptr i8, ptr %result.i75.i1533, i64 24
  store ptr null, ptr %1930, align 8
  %1931 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i75.i1533)
  store ptr @Entry, ptr %result.i75.i1533, align 8
  %1932 = getelementptr i8, ptr %result.i.i1532, i64 8
  store ptr %result.i75.i1533, ptr %1932, align 8
  %1933 = getelementptr i8, ptr %result.i.i1532, i64 24
  store ptr null, ptr %1933, align 8
  %1934 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i1532)
  store ptr @union_typ, ptr %result.i.i1532, align 8
  %result.i76.i1534 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i1532, ptr %result.i76.i1534, align 8
  %1935 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i76.i1534)
  store ptr @Array, ptr %64, align 8
  store ptr %result.i76.i1534, ptr %1467, align 8
  store i32 9, ptr %1468, align 8
  %1936 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %64)
  %1937 = getelementptr i8, ptr %result.i76.i1534, i64 16
  store i32 %1924, ptr %1937, align 4
  %1938 = getelementptr i8, ptr %result.i76.i1534, i64 20
  store i32 %1924, ptr %1938, align 4
  %1939 = zext nneg i32 %1924 to i64
  %1940 = shl nuw nsw i64 %1939, 5
  %result.i.i.i1535 = call noalias ptr @bump_malloc_inner(i64 noundef %1940, ptr nonnull @current_ptr) #29
  %1941 = getelementptr i8, ptr %result.i76.i1534, i64 8
  store ptr %result.i.i.i1535, ptr %1941, align 8
  %1942 = load ptr, ptr %1469, align 8
  store ptr @Array, ptr %153, align 8
  store ptr %result.i76.i1534, ptr %154, align 8
  store ptr %1942, ptr %1464, align 8
  store i32 9, ptr %155, align 4
  %result.i91.i1536 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1943 = getelementptr i8, ptr %result.i91.i1536, i64 16
  store ptr @_parameterization_Nil, ptr %1943, align 8
  %result.i92.i1537 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1944 = getelementptr i8, ptr %result.i92.i1537, i64 16
  store ptr %1926, ptr %1944, align 8
  %1945 = getelementptr i8, ptr %result.i92.i1537, i64 8
  store ptr %1925, ptr %1945, align 8
  %1946 = getelementptr i8, ptr %result.i92.i1537, i64 24
  store ptr null, ptr %1946, align 8
  %1947 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i92.i1537)
  store ptr @Entry, ptr %result.i92.i1537, align 8
  %1948 = getelementptr i8, ptr %result.i91.i1536, i64 8
  store ptr %result.i92.i1537, ptr %1948, align 8
  %1949 = getelementptr i8, ptr %result.i91.i1536, i64 24
  store ptr null, ptr %1949, align 8
  %1950 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i91.i1536)
  store ptr @union_typ, ptr %result.i91.i1536, align 8
  %result.i93.i1538 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i91.i1536, ptr %result.i93.i1538, align 8
  %1951 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i93.i1538)
  store ptr @Array, ptr %65, align 8
  store ptr %result.i93.i1538, ptr %1470, align 8
  store i32 9, ptr %1471, align 8
  %1952 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %65)
  %1953 = getelementptr i8, ptr %result.i93.i1538, i64 16
  store i32 %1924, ptr %1953, align 4
  %1954 = getelementptr i8, ptr %result.i93.i1538, i64 20
  store i32 %1924, ptr %1954, align 4
  %result.i.i234.i1539 = call noalias ptr @bump_malloc_inner(i64 noundef %1940, ptr nonnull @current_ptr) #29
  %1955 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %1956 = getelementptr i8, ptr %result.i93.i1538, i64 8
  store ptr %result.i.i234.i1539, ptr %1956, align 8
  %1957 = load ptr, ptr %1472, align 8
  store ptr @Array, ptr %166, align 8
  store ptr %result.i93.i1538, ptr %167, align 8
  store ptr %1957, ptr %1465, align 8
  store i32 9, ptr %168, align 4
  store i32 0, ptr %1466, align 4
  %1958 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %13)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %14)
  %1959 = icmp sgt i32 %1922, 0
  br i1 %1959, label %.lr.ph.i2634, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2722.critedge

.lr.ph.i2634:                                     ; preds = %1898
  %invariant.gep.i2635 = getelementptr i8, ptr %1900, i64 120
  %offset_tbl.i.i24.i2636 = load ptr, ptr %offset_tbl_ptr.i.i20.i1504, align 8
  %hash_coef.i.i22.i2637 = load i64, ptr %hash_coef_ptr.i.i18.i1502, align 4
  %product.i.i.i25.i2638 = mul i64 %hash_coef.i.i22.i2637, -5261542750394134544
  %shifted.i.i.i26.i2639 = lshr i64 %product.i.i.i25.i2638, 32
  %xored.i.i.i27.i2640 = xor i64 %shifted.i.i.i26.i2639, %product.i.i.i25.i2638
  %tbl_size.i.i23.i2641 = load i64, ptr %tbl_size_ptr.i.i19.i1503, align 4
  %hash.i.i.i28.i2642 = and i64 %xored.i.i.i27.i2640, %tbl_size.i.i23.i2641
  %offset_ptr.i.i29.i2643 = getelementptr i32, ptr %offset_tbl.i.i24.i2636, i64 %hash.i.i.i28.i2642
  %offset.i.i30.i2644 = load i32, ptr %offset_ptr.i.i29.i2643, align 4
  %1960 = insertvalue { ptr, ptr, ptr, i32 } %1905, i32 %offset.i.i30.i2644, 3
  %1961 = sext i32 %offset.i.i30.i2644 to i64
  %gep.i2647 = getelementptr ptr, ptr %invariant.gep.i2635, i64 %1961
  %1962 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %1963

1963:                                             ; preds = %._crit_edge1.i2651, %.lr.ph.i2634
  %.reg2mem13.079.i2648 = phi i32 [ 0, %.lr.ph.i2634 ], [ %1980, %._crit_edge1.i2651 ]
  store ptr @_parameterization_Ptri32, ptr %13, align 8
  %1964 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %13)
  %1965 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %1900)
  %1966 = load ptr, ptr %gep.i2647, align 8
  store ptr @i32_typ, ptr %14, align 8
  %1967 = call ptr %1966({ ptr, ptr, ptr, i32 } %1960, ptr nonnull %14)
  %1968 = call { ptr, i160 } %1967({ ptr, ptr, ptr, i32 } %1960, { ptr, ptr, ptr, i32 } %1960, ptr nonnull %13, i32 %.reg2mem13.079.i2648)
  %.fca.0.extract11.i2649 = extractvalue { ptr, i160 } %1968, 0
  %1969 = icmp ne ptr %.fca.0.extract11.i2649, @nil_typ
  %1970 = icmp ne ptr %.fca.0.extract11.i2649, null
  %.not17.i2650 = and i1 %1969, %1970
  br i1 %.not17.i2650, label %1971, label %._crit_edge1.i2651

1971:                                             ; preds = %1963
  %.fca.1.extract13.i2652 = extractvalue { ptr, i160 } %1968, 1
  %.sroa.375.8.extract.trunc.i2653 = trunc i160 %.fca.1.extract13.i2652 to i64
  %1972 = inttoptr i64 %.sroa.375.8.extract.trunc.i2653 to ptr
  %.sroa.576.8.extract.shift.i2654 = lshr i160 %.fca.1.extract13.i2652, 64
  %.sroa.576.8.extract.trunc.i2655 = trunc i160 %.sroa.576.8.extract.shift.i2654 to i64
  %1973 = inttoptr i64 %.sroa.576.8.extract.trunc.i2655 to ptr
  %hash_coef_ptr.i.i33.i2656 = getelementptr i8, ptr %.fca.0.extract11.i2649, i64 8
  %tbl_size_ptr.i.i34.i2657 = getelementptr i8, ptr %.fca.0.extract11.i2649, i64 16
  %offset_tbl_ptr.i.i35.i2658 = getelementptr i8, ptr %.fca.0.extract11.i2649, i64 40
  %hash_coef.i.i36.i2659 = load i64, ptr %hash_coef_ptr.i.i33.i2656, align 4
  %tbl_size.i.i37.i2660 = load i64, ptr %tbl_size_ptr.i.i34.i2657, align 4
  %offset_tbl.i.i38.i2661 = load ptr, ptr %offset_tbl_ptr.i.i35.i2658, align 8
  %product.i.i.i39.i2662 = mul i64 %hash_coef.i.i36.i2659, 4015701072841558310
  %shifted.i.i.i40.i2663 = lshr i64 %product.i.i.i39.i2662, 32
  %xored.i.i.i41.i2664 = xor i64 %shifted.i.i.i40.i2663, %product.i.i.i39.i2662
  %hash.i.i.i42.i2665 = and i64 %xored.i.i.i41.i2664, %tbl_size.i.i37.i2660
  %offset_ptr.i.i43.i2666 = getelementptr i32, ptr %offset_tbl.i.i38.i2661, i64 %hash.i.i.i42.i2665
  %offset.i.i58.i2667 = load i32, ptr %offset_ptr.i.i43.i2666, align 4
  %1974 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i2649, 0
  %1975 = insertvalue { ptr, ptr, ptr, i32 } %1974, ptr %1972, 1
  %1976 = insertvalue { ptr, ptr, ptr, i32 } %1975, ptr %1973, 2
  %1977 = insertvalue { ptr, ptr, ptr, i32 } %1976, i32 %offset.i.i58.i2667, 3
  %1978 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1979 = call { ptr, i160 } @HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %1498, { ptr, ptr, ptr, i32 } poison, ptr nonnull poison, { ptr, ptr, ptr, i32 } %1977)
  br label %._crit_edge1.i2651

._crit_edge1.i2651:                               ; preds = %1971, %1963
  %1980 = add nuw nsw i32 %.reg2mem13.079.i2648, 1
  %1981 = icmp slt i32 %1980, %1922
  br i1 %1981, label %1963, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2669

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2669: ; preds = %._crit_edge1.i2651
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %13)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %14)
  %1982 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %11)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %12)
  %invariant.gep.i2673 = getelementptr i8, ptr %1908, i64 120
  %offset_tbl.i.i24.i2675 = load ptr, ptr %offset_tbl_ptr.i.i48.i1521, align 8
  %hash_coef.i.i22.i2677 = load i64, ptr %hash_coef_ptr.i.i46.i1519, align 4
  %product.i.i.i25.i2678 = mul i64 %hash_coef.i.i22.i2677, -5261542750394134544
  %shifted.i.i.i26.i2679 = lshr i64 %product.i.i.i25.i2678, 32
  %xored.i.i.i27.i2680 = xor i64 %shifted.i.i.i26.i2679, %product.i.i.i25.i2678
  %tbl_size.i.i23.i2682 = load i64, ptr %tbl_size_ptr.i.i47.i1520, align 4
  %hash.i.i.i28.i2683 = and i64 %xored.i.i.i27.i2680, %tbl_size.i.i23.i2682
  %offset_ptr.i.i29.i2684 = getelementptr i32, ptr %offset_tbl.i.i24.i2675, i64 %hash.i.i.i28.i2683
  %offset.i.i30.i2685 = load i32, ptr %offset_ptr.i.i29.i2684, align 4
  %1983 = insertvalue { ptr, ptr, ptr, i32 } %1913, i32 %offset.i.i30.i2685, 3
  %1984 = sext i32 %offset.i.i30.i2685 to i64
  %gep.i2700 = getelementptr ptr, ptr %invariant.gep.i2673, i64 %1984
  %1985 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %1986

1986:                                             ; preds = %._crit_edge1.i2704, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2669
  %.reg2mem13.079.i2701 = phi i32 [ 0, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2669 ], [ %2003, %._crit_edge1.i2704 ]
  store ptr @_parameterization_Ptri32, ptr %11, align 8
  %1987 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %11)
  %1988 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %1908)
  %1989 = load ptr, ptr %gep.i2700, align 8
  store ptr @i32_typ, ptr %12, align 8
  %1990 = call ptr %1989({ ptr, ptr, ptr, i32 } %1983, ptr nonnull %12)
  %1991 = call { ptr, i160 } %1990({ ptr, ptr, ptr, i32 } %1983, { ptr, ptr, ptr, i32 } %1983, ptr nonnull %11, i32 %.reg2mem13.079.i2701)
  %.fca.0.extract11.i2702 = extractvalue { ptr, i160 } %1991, 0
  %1992 = icmp ne ptr %.fca.0.extract11.i2702, @nil_typ
  %1993 = icmp ne ptr %.fca.0.extract11.i2702, null
  %.not17.i2703 = and i1 %1992, %1993
  br i1 %.not17.i2703, label %1994, label %._crit_edge1.i2704

1994:                                             ; preds = %1986
  %.fca.1.extract13.i2705 = extractvalue { ptr, i160 } %1991, 1
  %.sroa.375.8.extract.trunc.i2706 = trunc i160 %.fca.1.extract13.i2705 to i64
  %1995 = inttoptr i64 %.sroa.375.8.extract.trunc.i2706 to ptr
  %.sroa.576.8.extract.shift.i2707 = lshr i160 %.fca.1.extract13.i2705, 64
  %.sroa.576.8.extract.trunc.i2708 = trunc i160 %.sroa.576.8.extract.shift.i2707 to i64
  %1996 = inttoptr i64 %.sroa.576.8.extract.trunc.i2708 to ptr
  %hash_coef_ptr.i.i33.i2709 = getelementptr i8, ptr %.fca.0.extract11.i2702, i64 8
  %tbl_size_ptr.i.i34.i2710 = getelementptr i8, ptr %.fca.0.extract11.i2702, i64 16
  %offset_tbl_ptr.i.i35.i2711 = getelementptr i8, ptr %.fca.0.extract11.i2702, i64 40
  %hash_coef.i.i36.i2712 = load i64, ptr %hash_coef_ptr.i.i33.i2709, align 4
  %tbl_size.i.i37.i2713 = load i64, ptr %tbl_size_ptr.i.i34.i2710, align 4
  %offset_tbl.i.i38.i2714 = load ptr, ptr %offset_tbl_ptr.i.i35.i2711, align 8
  %product.i.i.i39.i2715 = mul i64 %hash_coef.i.i36.i2712, 4015701072841558310
  %shifted.i.i.i40.i2716 = lshr i64 %product.i.i.i39.i2715, 32
  %xored.i.i.i41.i2717 = xor i64 %shifted.i.i.i40.i2716, %product.i.i.i39.i2715
  %hash.i.i.i42.i2718 = and i64 %xored.i.i.i41.i2717, %tbl_size.i.i37.i2713
  %offset_ptr.i.i43.i2719 = getelementptr i32, ptr %offset_tbl.i.i38.i2714, i64 %hash.i.i.i42.i2718
  %offset.i.i58.i2720 = load i32, ptr %offset_ptr.i.i43.i2719, align 4
  %1997 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i2702, 0
  %1998 = insertvalue { ptr, ptr, ptr, i32 } %1997, ptr %1995, 1
  %1999 = insertvalue { ptr, ptr, ptr, i32 } %1998, ptr %1996, 2
  %2000 = insertvalue { ptr, ptr, ptr, i32 } %1999, i32 %offset.i.i58.i2720, 3
  %2001 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2002 = call { ptr, i160 } @HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %1498, { ptr, ptr, ptr, i32 } poison, ptr nonnull poison, { ptr, ptr, ptr, i32 } %2000)
  br label %._crit_edge1.i2704

._crit_edge1.i2704:                               ; preds = %1994, %1986
  %2003 = add nuw nsw i32 %.reg2mem13.079.i2701, 1
  %2004 = icmp slt i32 %2003, %1922
  br i1 %2004, label %1986, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2722

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2722.critedge: ; preds = %1898
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %13)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %14)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %11)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %12)
  br label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2722

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2722: ; preds = %._crit_edge1.i2704, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2722.critedge
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %11)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %12)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %64)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %65)
  br label %._crit_edge2.i606

._crit_edge2.i606:                                ; preds = %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2722, %.critedge158.i587
  %2005 = load ptr, ptr %result.i, align 8
  %2006 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2007 = load ptr, ptr %136, align 8
  %2008 = load ptr, ptr %2005, align 8
  %2009 = getelementptr i8, ptr %2008, i64 48
  %2010 = load ptr, ptr %2009, align 8
  %2011 = call { i64, i64 } %2010(ptr nonnull %2005)
  %2012 = extractvalue { i64, i64 } %2011, 0
  %2013 = extractvalue { i64, i64 } %2011, 1
  %2014 = urem i64 20, %2013
  %2015 = icmp eq i64 %2014, 0
  %2016 = sub i64 %2013, %2014
  %2017 = select i1 %2015, i64 0, i64 %2016
  %2018 = add i64 %2012, 20
  %2019 = add i64 %2018, %2017
  %2020 = load ptr, ptr %2007, align 8
  %2021 = getelementptr i8, ptr %2020, i64 48
  %2022 = load ptr, ptr %2021, align 8
  %2023 = call { i64, i64 } %2022(ptr nonnull %2007)
  %2024 = extractvalue { i64, i64 } %2023, 0
  %2025 = extractvalue { i64, i64 } %2023, 1
  %2026 = call i64 @llvm.umax.i64(i64 %2013, i64 %2025)
  %2027 = call i64 @llvm.umax.i64(i64 %2026, i64 8)
  %2028 = urem i64 %2019, %2025
  %2029 = icmp eq i64 %2028, 0
  %2030 = sub i64 %2025, %2028
  %2031 = select i1 %2029, i64 0, i64 %2030
  %2032 = add i64 %2024, %2019
  %2033 = add i64 %2032, %2031
  %2034 = urem i64 %2033, %2027
  %2035 = icmp eq i64 %2034, 0
  %2036 = sub i64 %2027, %2034
  %2037 = select i1 %2035, i64 0, i64 %2036
  %2038 = add i64 %2037, %2033
  %result.i296.i607 = call noalias ptr @bump_malloc_inner(i64 noundef %2038, ptr nonnull @current_ptr) #29
  store ptr %2005, ptr %result.i296.i607, align 8
  %2039 = getelementptr i8, ptr %result.i296.i607, i64 8
  store ptr %2007, ptr %2039, align 8
  %2040 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i296.i607)
  store ptr @Entry, ptr %117, align 8
  store ptr %result.i296.i607, ptr %1451, align 8
  store i32 9, ptr %1452, align 8
  %2041 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %117)
  %2042 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2043 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %2044 = load ptr, ptr %2005, align 8
  %2045 = getelementptr i8, ptr %2044, i64 48
  %2046 = load ptr, ptr %2045, align 8
  %2047 = call { i64, i64 } %2046(ptr nonnull %2005)
  %2048 = extractvalue { i64, i64 } %2047, 1
  %2049 = urem i64 20, %2048
  %2050 = icmp eq i64 %2049, 0
  %reass.sub3081 = sub i64 %2048, %2049
  %2051 = add i64 %reass.sub3081, 20
  %2052 = select i1 %2050, i64 20, i64 %2051
  %2053 = getelementptr i8, ptr %result.i296.i607, i64 %2052
  %2054 = load ptr, ptr %result.i296.i607, align 8
  %2055 = load ptr, ptr %2054, align 8
  %2056 = getelementptr i8, ptr %2055, i64 64
  %2057 = load ptr, ptr %2056, align 8
  call void %2057({ ptr, i160 } %1503, ptr nonnull %2054, ptr %2053)
  %2058 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %2059 = load ptr, ptr %result.i296.i607, align 8
  %2060 = load ptr, ptr %2059, align 8
  %2061 = getelementptr i8, ptr %2060, i64 48
  %2062 = load ptr, ptr %2061, align 8
  %2063 = call { i64, i64 } %2062(ptr nonnull %2059)
  %2064 = extractvalue { i64, i64 } %2063, 0
  %2065 = extractvalue { i64, i64 } %2063, 1
  %2066 = urem i64 20, %2065
  %2067 = icmp eq i64 %2066, 0
  %2068 = sub i64 %2065, %2066
  %2069 = select i1 %2067, i64 0, i64 %2068
  %2070 = add i64 %2064, 20
  %2071 = add i64 %2070, %2069
  %2072 = load ptr, ptr %2039, align 8
  %2073 = load ptr, ptr %2072, align 8
  %2074 = getelementptr i8, ptr %2073, i64 48
  %2075 = load ptr, ptr %2074, align 8
  %2076 = call { i64, i64 } %2075(ptr nonnull %2072)
  %2077 = extractvalue { i64, i64 } %2076, 1
  %2078 = urem i64 %2071, %2077
  %2079 = icmp eq i64 %2078, 0
  %2080 = sub i64 %2077, %2078
  %2081 = select i1 %2079, i64 0, i64 %2080
  %2082 = getelementptr i8, ptr %result.i296.i607, i64 %2071
  %2083 = getelementptr i8, ptr %2082, i64 %2081
  %2084 = load ptr, ptr %2039, align 8
  %2085 = load ptr, ptr %2084, align 8
  %2086 = getelementptr i8, ptr %2085, i64 64
  %2087 = load ptr, ptr %2086, align 8
  call void %2087({ ptr, i160 } %1504, ptr nonnull %2084, ptr %2083)
  %2088 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %2089 = getelementptr i8, ptr %result.i296.i607, i64 16
  store i32 %1507, ptr %2089, align 4
  %2090 = load ptr, ptr %1453, align 8
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %47)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %48)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %49)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %50)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %51)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %52)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %53)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0680.i1567)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %54)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %55)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %56)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %57)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %58)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %59)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %60)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %61)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i1568)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %62)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %63)
  store ptr @Entry, ptr %63, align 8
  store ptr %result.i296.i607, ptr %1473, align 8
  store ptr %2090, ptr %1474, align 8
  store i32 9, ptr %1475, align 8
  %2091 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %63)
  %2092 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2093 = load i32, ptr %169, align 4
  %2094 = icmp sgt i32 %2093, 0
  br i1 %2094, label %.lr.ph.i1597, label %._crit_edge3.i612

.lr.ph.i1597:                                     ; preds = %._crit_edge2.i606
  %2095 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2096 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  br label %2097

2097:                                             ; preds = %.cont.cont.i1648, %.lr.ph.i1597
  %offset.i.i260.i16632190 = phi i32 [ 9, %.lr.ph.i1597 ], [ %offset.i.i260.i1663, %.cont.cont.i1648 ]
  %.sroa.speculated346.i16512188 = phi ptr [ %2090, %.lr.ph.i1597 ], [ %.sroa.speculated346.i1651, %.cont.cont.i1648 ]
  %.sroa.speculated352.i16502186 = phi ptr [ %result.i296.i607, %.lr.ph.i1597 ], [ %.sroa.speculated352.i1650, %.cont.cont.i1648 ]
  %.reg2mem195.0678.i1598 = phi i32 [ 1, %.lr.ph.i1597 ], [ %2253, %.cont.cont.i1648 ]
  %.reg2mem193.0677.i1599 = phi i32 [ 0, %.lr.ph.i1597 ], [ %2254, %.cont.cont.i1648 ]
  %2098 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Entry, ptr undef, ptr undef, i32 undef }, ptr %.sroa.speculated352.i16502186, 1
  %2099 = insertvalue { ptr, ptr, ptr, i32 } %2098, ptr %.sroa.speculated346.i16512188, 2
  %2100 = insertvalue { ptr, ptr, ptr, i32 } %2099, i32 %offset.i.i260.i16632190, 3
  %2101 = sext i32 %offset.i.i260.i16632190 to i64
  %gep2185 = getelementptr ptr, ptr getelementptr inbounds (i8, ptr @Entry, i64 64), i64 %2101
  %2102 = load ptr, ptr %gep2185, align 8
  %2103 = call ptr %2102({ ptr, ptr, ptr, i32 } %2100, ptr nonnull %2)
  %2104 = call i32 %2103({ ptr, ptr, ptr, i32 } %2100, { ptr, ptr, ptr, i32 } %2100, ptr nonnull %2)
  %2105 = icmp eq i32 %.reg2mem195.0678.i1598, 1
  %2106 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br i1 %2105, label %2107, label %2171

2107:                                             ; preds = %2097
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %2108 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2109 = load ptr, ptr %153, align 8
  %2110 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2109, 0
  %2111 = load ptr, ptr %154, align 8
  %2112 = insertvalue { ptr, ptr, ptr, i32 } %2110, ptr %2111, 1
  %2113 = load ptr, ptr %1464, align 8
  %2114 = insertvalue { ptr, ptr, ptr, i32 } %2112, ptr %2113, 2
  %2115 = load i32, ptr %155, align 4
  %2116 = insertvalue { ptr, ptr, ptr, i32 } %2114, i32 %2115, 3
  %hash_coef_ptr.i.i10.i2739 = getelementptr i8, ptr %2109, i64 8
  %tbl_size_ptr.i.i11.i2740 = getelementptr i8, ptr %2109, i64 16
  %offset_tbl_ptr.i.i12.i2741 = getelementptr i8, ptr %2109, i64 40
  %hash_coef.i.i13.i2742 = load i64, ptr %hash_coef_ptr.i.i10.i2739, align 4
  %tbl_size.i.i14.i2743 = load i64, ptr %tbl_size_ptr.i.i11.i2740, align 4
  %offset_tbl.i.i15.i2744 = load ptr, ptr %offset_tbl_ptr.i.i12.i2741, align 8
  %product.i.i.i16.i2745 = mul i64 %hash_coef.i.i13.i2742, -5261542750394134544
  %shifted.i.i.i17.i2746 = lshr i64 %product.i.i.i16.i2745, 32
  %xored.i.i.i18.i2747 = xor i64 %shifted.i.i.i17.i2746, %product.i.i.i16.i2745
  %hash.i.i.i19.i2748 = and i64 %xored.i.i.i18.i2747, %tbl_size.i.i14.i2743
  %offset_ptr.i.i20.i2749 = getelementptr i32, ptr %offset_tbl.i.i15.i2744, i64 %hash.i.i.i19.i2748
  %offset.i.i21.i2750 = load i32, ptr %offset_ptr.i.i20.i2749, align 4
  %eq.i.i2751 = icmp eq i32 %2115, %offset.i.i21.i2750
  call void @llvm.assume(i1 %eq.i.i2751) #30
  %2117 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2118 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2109)
  %2119 = sext i32 %2115 to i64
  %2120 = getelementptr ptr, ptr %2109, i64 %2119
  %2121 = getelementptr i8, ptr %2120, i64 64
  %2122 = load ptr, ptr %2121, align 8
  %2123 = call ptr %2122({ ptr, ptr, ptr, i32 } %2116, ptr nonnull %2)
  %2124 = call i32 %2123({ ptr, ptr, ptr, i32 } %2116, { ptr, ptr, ptr, i32 } %2116, ptr nonnull %2)
  %2125 = add i32 %2124, -1
  %2126 = and i32 %2125, %2104
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %2127 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2128 = load ptr, ptr %153, align 8
  %2129 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2128, 0
  %2130 = load ptr, ptr %154, align 8
  %2131 = insertvalue { ptr, ptr, ptr, i32 } %2129, ptr %2130, 1
  %2132 = load ptr, ptr %1464, align 8
  %2133 = insertvalue { ptr, ptr, ptr, i32 } %2131, ptr %2132, 2
  %2134 = load i32, ptr %155, align 4
  %2135 = insertvalue { ptr, ptr, ptr, i32 } %2133, i32 %2134, 3
  %hash_coef_ptr.i.i172.i1668 = getelementptr i8, ptr %2128, i64 8
  %tbl_size_ptr.i.i173.i1669 = getelementptr i8, ptr %2128, i64 16
  %offset_tbl_ptr.i.i174.i1670 = getelementptr i8, ptr %2128, i64 40
  %hash_coef.i.i175.i1671 = load i64, ptr %hash_coef_ptr.i.i172.i1668, align 4
  %tbl_size.i.i176.i1672 = load i64, ptr %tbl_size_ptr.i.i173.i1669, align 4
  %offset_tbl.i.i177.i1673 = load ptr, ptr %offset_tbl_ptr.i.i174.i1670, align 8
  %product.i.i.i178.i1674 = mul i64 %hash_coef.i.i175.i1671, -5261542750394134544
  %shifted.i.i.i179.i1675 = lshr i64 %product.i.i.i178.i1674, 32
  %xored.i.i.i180.i1676 = xor i64 %shifted.i.i.i179.i1675, %product.i.i.i178.i1674
  %hash.i.i.i181.i1677 = and i64 %xored.i.i.i180.i1676, %tbl_size.i.i176.i1672
  %offset_ptr.i.i182.i1678 = getelementptr i32, ptr %offset_tbl.i.i177.i1673, i64 %hash.i.i.i181.i1677
  %offset.i.i183.i1679 = load i32, ptr %offset_ptr.i.i182.i1678, align 4
  %eq.i.i1680 = icmp eq i32 %2134, %offset.i.i183.i1679
  call void @llvm.assume(i1 %eq.i.i1680) #30
  store ptr @_parameterization_Ptri32, ptr %47, align 8
  %2136 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %47)
  %2137 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2128)
  %2138 = sext i32 %2134 to i64
  %2139 = getelementptr ptr, ptr %2128, i64 %2138
  %2140 = getelementptr i8, ptr %2139, i64 120
  %2141 = load ptr, ptr %2140, align 8
  store ptr @i32_typ, ptr %48, align 8
  %2142 = call ptr %2141({ ptr, ptr, ptr, i32 } %2135, ptr nonnull %48)
  %2143 = call { ptr, i160 } %2142({ ptr, ptr, ptr, i32 } %2135, { ptr, ptr, ptr, i32 } %2135, ptr nonnull %47, i32 %2126)
  %.fca.0.extract112.i1681 = extractvalue { ptr, i160 } %2143, 0
  %2144 = ptrtoint ptr %.sroa.speculated352.i16502186 to i64
  %2145 = ptrtoint ptr %.sroa.speculated346.i16512188 to i64
  %.sroa.3111.0.insert.ext.i1682 = zext i32 %offset.i.i260.i16632190 to i160
  %.sroa.3111.0.insert.shift.i1683 = shl nuw i160 %.sroa.3111.0.insert.ext.i1682, 128
  %.sroa.2110.0.insert.ext.i1684 = zext i64 %2145 to i160
  %.sroa.2110.0.insert.shift.i1685 = shl nuw nsw i160 %.sroa.2110.0.insert.ext.i1684, 64
  %.sroa.2110.0.insert.insert.i1686 = or disjoint i160 %.sroa.2110.0.insert.shift.i1685, %.sroa.3111.0.insert.shift.i1683
  %.sroa.0109.0.insert.ext.i1687 = zext i64 %2144 to i160
  %.sroa.0109.0.insert.insert.i1688 = or disjoint i160 %.sroa.2110.0.insert.insert.i1686, %.sroa.0109.0.insert.ext.i1687
  %2146 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0109.0.insert.insert.i1688, 1
  %2147 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2148 = load ptr, ptr %153, align 8
  %2149 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2148, 0
  %2150 = load ptr, ptr %154, align 8
  %2151 = insertvalue { ptr, ptr, ptr, i32 } %2149, ptr %2150, 1
  %2152 = load ptr, ptr %1464, align 8
  %2153 = insertvalue { ptr, ptr, ptr, i32 } %2151, ptr %2152, 2
  %2154 = load i32, ptr %155, align 4
  %2155 = insertvalue { ptr, ptr, ptr, i32 } %2153, i32 %2154, 3
  %hash_coef_ptr.i.i186.i1693 = getelementptr i8, ptr %2148, i64 8
  %tbl_size_ptr.i.i187.i1694 = getelementptr i8, ptr %2148, i64 16
  %offset_tbl_ptr.i.i188.i1695 = getelementptr i8, ptr %2148, i64 40
  %hash_coef.i.i189.i1696 = load i64, ptr %hash_coef_ptr.i.i186.i1693, align 4
  %tbl_size.i.i190.i1697 = load i64, ptr %tbl_size_ptr.i.i187.i1694, align 4
  %offset_tbl.i.i191.i1698 = load ptr, ptr %offset_tbl_ptr.i.i188.i1695, align 8
  %product.i.i.i192.i1699 = mul i64 %hash_coef.i.i189.i1696, -5261542750394134544
  %shifted.i.i.i193.i1700 = lshr i64 %product.i.i.i192.i1699, 32
  %xored.i.i.i194.i1701 = xor i64 %shifted.i.i.i193.i1700, %product.i.i.i192.i1699
  %hash.i.i.i195.i1702 = and i64 %xored.i.i.i194.i1701, %tbl_size.i.i190.i1697
  %offset_ptr.i.i196.i1703 = getelementptr i32, ptr %offset_tbl.i.i191.i1698, i64 %hash.i.i.i195.i1702
  %offset.i.i197.i1704 = load i32, ptr %offset_ptr.i.i196.i1703, align 4
  %eq.i200.i1705 = icmp eq i32 %2154, %offset.i.i197.i1704
  call void @llvm.assume(i1 %eq.i200.i1705) #30
  %2156 = load ptr, ptr %result.i, align 8
  %2157 = load ptr, ptr %136, align 8
  %result.i.i1706 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2158 = getelementptr i8, ptr %result.i.i1706, i64 16
  store ptr %2157, ptr %2158, align 8
  %2159 = getelementptr i8, ptr %result.i.i1706, i64 8
  store ptr %2156, ptr %2159, align 8
  %2160 = getelementptr i8, ptr %result.i.i1706, i64 24
  store ptr null, ptr %2160, align 8
  %2161 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i1706)
  store ptr @Entry, ptr %result.i.i1706, align 8
  store ptr @_parameterization_Ptri32, ptr %49, align 8
  store ptr %result.i.i1706, ptr %1478, align 8
  %2162 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %49)
  %2163 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2148)
  %2164 = sext i32 %2154 to i64
  %2165 = getelementptr ptr, ptr %2148, i64 %2164
  %2166 = getelementptr i8, ptr %2165, i64 128
  %2167 = load ptr, ptr %2166, align 8
  store ptr @i32_typ, ptr %50, align 8
  store ptr @Entry, ptr %1479, align 8
  %2168 = call ptr %2167({ ptr, ptr, ptr, i32 } %2155, ptr nonnull %50)
  call void %2168({ ptr, ptr, ptr, i32 } %2155, { ptr, ptr, ptr, i32 } %2155, ptr nonnull %49, i32 %2126, { ptr, i160 } %2146)
  %2169 = icmp ne ptr %.fca.0.extract112.i1681, @nil_typ
  %2170 = icmp ne ptr %.fca.0.extract112.i1681, null
  %.not140.i1707 = and i1 %2169, %2170
  br i1 %.not140.i1707, label %.cont.cont.i1648, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit.thread2168

2171:                                             ; preds = %2097
  %2172 = add i32 %2104, 2127912214
  %2173 = shl i32 %2104, 12
  %2174 = add i32 %2172, %2173
  %2175 = ashr i32 %2174, 19
  %2176 = xor i32 %2174, %2175
  %2177 = xor i32 %2176, -949894596
  %2178 = add i32 %2177, 374761393
  %2179 = shl i32 %2177, 5
  %2180 = add i32 %2178, %2179
  %2181 = add i32 %2180, -744332180
  %2182 = shl i32 %2180, 9
  %2183 = xor i32 %2181, %2182
  %2184 = add i32 %2183, -42973499
  %2185 = shl i32 %2183, 3
  %2186 = add i32 %2184, %2185
  %2187 = ashr i32 %2186, 16
  %2188 = xor i32 %2186, %2187
  %2189 = xor i32 %2188, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %2190 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2191 = load ptr, ptr %166, align 8
  %2192 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2191, 0
  %2193 = load ptr, ptr %167, align 8
  %2194 = insertvalue { ptr, ptr, ptr, i32 } %2192, ptr %2193, 1
  %2195 = load ptr, ptr %1465, align 8
  %2196 = insertvalue { ptr, ptr, ptr, i32 } %2194, ptr %2195, 2
  %2197 = load i32, ptr %168, align 4
  %2198 = insertvalue { ptr, ptr, ptr, i32 } %2196, i32 %2197, 3
  %hash_coef_ptr.i.i10.i2769 = getelementptr i8, ptr %2191, i64 8
  %tbl_size_ptr.i.i11.i2770 = getelementptr i8, ptr %2191, i64 16
  %offset_tbl_ptr.i.i12.i2771 = getelementptr i8, ptr %2191, i64 40
  %hash_coef.i.i13.i2772 = load i64, ptr %hash_coef_ptr.i.i10.i2769, align 4
  %tbl_size.i.i14.i2773 = load i64, ptr %tbl_size_ptr.i.i11.i2770, align 4
  %offset_tbl.i.i15.i2774 = load ptr, ptr %offset_tbl_ptr.i.i12.i2771, align 8
  %product.i.i.i16.i2775 = mul i64 %hash_coef.i.i13.i2772, -5261542750394134544
  %shifted.i.i.i17.i2776 = lshr i64 %product.i.i.i16.i2775, 32
  %xored.i.i.i18.i2777 = xor i64 %shifted.i.i.i17.i2776, %product.i.i.i16.i2775
  %hash.i.i.i19.i2778 = and i64 %xored.i.i.i18.i2777, %tbl_size.i.i14.i2773
  %offset_ptr.i.i20.i2779 = getelementptr i32, ptr %offset_tbl.i.i15.i2774, i64 %hash.i.i.i19.i2778
  %offset.i.i21.i2780 = load i32, ptr %offset_ptr.i.i20.i2779, align 4
  %eq.i.i2781 = icmp eq i32 %2197, %offset.i.i21.i2780
  call void @llvm.assume(i1 %eq.i.i2781) #30
  %2199 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2200 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2191)
  %2201 = sext i32 %2197 to i64
  %2202 = getelementptr ptr, ptr %2191, i64 %2201
  %2203 = getelementptr i8, ptr %2202, i64 64
  %2204 = load ptr, ptr %2203, align 8
  %2205 = call ptr %2204({ ptr, ptr, ptr, i32 } %2198, ptr nonnull %2)
  %2206 = call i32 %2205({ ptr, ptr, ptr, i32 } %2198, { ptr, ptr, ptr, i32 } %2198, ptr nonnull %2)
  %2207 = add i32 %2206, -1
  %2208 = and i32 %2207, %2189
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %2209 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2210 = load ptr, ptr %166, align 8
  %2211 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2210, 0
  %2212 = load ptr, ptr %167, align 8
  %2213 = insertvalue { ptr, ptr, ptr, i32 } %2211, ptr %2212, 1
  %2214 = load ptr, ptr %1465, align 8
  %2215 = insertvalue { ptr, ptr, ptr, i32 } %2213, ptr %2214, 2
  %2216 = load i32, ptr %168, align 4
  %2217 = insertvalue { ptr, ptr, ptr, i32 } %2215, i32 %2216, 3
  %hash_coef_ptr.i.i202.i1604 = getelementptr i8, ptr %2210, i64 8
  %tbl_size_ptr.i.i203.i1605 = getelementptr i8, ptr %2210, i64 16
  %offset_tbl_ptr.i.i204.i1606 = getelementptr i8, ptr %2210, i64 40
  %hash_coef.i.i205.i1607 = load i64, ptr %hash_coef_ptr.i.i202.i1604, align 4
  %tbl_size.i.i206.i1608 = load i64, ptr %tbl_size_ptr.i.i203.i1605, align 4
  %offset_tbl.i.i207.i1609 = load ptr, ptr %offset_tbl_ptr.i.i204.i1606, align 8
  %product.i.i.i208.i1610 = mul i64 %hash_coef.i.i205.i1607, -5261542750394134544
  %shifted.i.i.i209.i1611 = lshr i64 %product.i.i.i208.i1610, 32
  %xored.i.i.i210.i1612 = xor i64 %shifted.i.i.i209.i1611, %product.i.i.i208.i1610
  %hash.i.i.i211.i1613 = and i64 %xored.i.i.i210.i1612, %tbl_size.i.i206.i1608
  %offset_ptr.i.i212.i1614 = getelementptr i32, ptr %offset_tbl.i.i207.i1609, i64 %hash.i.i.i211.i1613
  %offset.i.i213.i1615 = load i32, ptr %offset_ptr.i.i212.i1614, align 4
  %eq.i216.i1616 = icmp eq i32 %2216, %offset.i.i213.i1615
  call void @llvm.assume(i1 %eq.i216.i1616) #30
  store ptr @_parameterization_Ptri32, ptr %55, align 8
  %2218 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %55)
  %2219 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2210)
  %2220 = sext i32 %2216 to i64
  %2221 = getelementptr ptr, ptr %2210, i64 %2220
  %2222 = getelementptr i8, ptr %2221, i64 120
  %2223 = load ptr, ptr %2222, align 8
  store ptr @i32_typ, ptr %56, align 8
  %2224 = call ptr %2223({ ptr, ptr, ptr, i32 } %2217, ptr nonnull %56)
  %2225 = call { ptr, i160 } %2224({ ptr, ptr, ptr, i32 } %2217, { ptr, ptr, ptr, i32 } %2217, ptr nonnull %55, i32 %2208)
  %.fca.0.extract87.i1617 = extractvalue { ptr, i160 } %2225, 0
  %2226 = ptrtoint ptr %.sroa.speculated352.i16502186 to i64
  %2227 = ptrtoint ptr %.sroa.speculated346.i16512188 to i64
  %.sroa.3.0.insert.ext.i1618 = zext i32 %offset.i.i260.i16632190 to i160
  %.sroa.3.0.insert.shift.i1619 = shl nuw i160 %.sroa.3.0.insert.ext.i1618, 128
  %.sroa.2.0.insert.ext.i1620 = zext i64 %2227 to i160
  %.sroa.2.0.insert.shift.i1621 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i1620, 64
  %.sroa.2.0.insert.insert.i1622 = or disjoint i160 %.sroa.2.0.insert.shift.i1621, %.sroa.3.0.insert.shift.i1619
  %.sroa.0.0.insert.ext.i1623 = zext i64 %2226 to i160
  %.sroa.0.0.insert.insert.i1624 = or disjoint i160 %.sroa.2.0.insert.insert.i1622, %.sroa.0.0.insert.ext.i1623
  %2228 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0.0.insert.insert.i1624, 1
  %2229 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2230 = load ptr, ptr %166, align 8
  %2231 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2230, 0
  %2232 = load ptr, ptr %167, align 8
  %2233 = insertvalue { ptr, ptr, ptr, i32 } %2231, ptr %2232, 1
  %2234 = load ptr, ptr %1465, align 8
  %2235 = insertvalue { ptr, ptr, ptr, i32 } %2233, ptr %2234, 2
  %2236 = load i32, ptr %168, align 4
  %2237 = insertvalue { ptr, ptr, ptr, i32 } %2235, i32 %2236, 3
  %hash_coef_ptr.i.i218.i1629 = getelementptr i8, ptr %2230, i64 8
  %tbl_size_ptr.i.i219.i1630 = getelementptr i8, ptr %2230, i64 16
  %offset_tbl_ptr.i.i220.i1631 = getelementptr i8, ptr %2230, i64 40
  %hash_coef.i.i221.i1632 = load i64, ptr %hash_coef_ptr.i.i218.i1629, align 4
  %tbl_size.i.i222.i1633 = load i64, ptr %tbl_size_ptr.i.i219.i1630, align 4
  %offset_tbl.i.i223.i1634 = load ptr, ptr %offset_tbl_ptr.i.i220.i1631, align 8
  %product.i.i.i224.i1635 = mul i64 %hash_coef.i.i221.i1632, -5261542750394134544
  %shifted.i.i.i225.i1636 = lshr i64 %product.i.i.i224.i1635, 32
  %xored.i.i.i226.i1637 = xor i64 %shifted.i.i.i225.i1636, %product.i.i.i224.i1635
  %hash.i.i.i227.i1638 = and i64 %xored.i.i.i226.i1637, %tbl_size.i.i222.i1633
  %offset_ptr.i.i228.i1639 = getelementptr i32, ptr %offset_tbl.i.i223.i1634, i64 %hash.i.i.i227.i1638
  %offset.i.i229.i1640 = load i32, ptr %offset_ptr.i.i228.i1639, align 4
  %eq.i232.i1641 = icmp eq i32 %2236, %offset.i.i229.i1640
  call void @llvm.assume(i1 %eq.i232.i1641) #30
  %2238 = load ptr, ptr %result.i, align 8
  %2239 = load ptr, ptr %136, align 8
  %result.i233.i1642 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2240 = getelementptr i8, ptr %result.i233.i1642, i64 16
  store ptr %2239, ptr %2240, align 8
  %2241 = getelementptr i8, ptr %result.i233.i1642, i64 8
  store ptr %2238, ptr %2241, align 8
  %2242 = getelementptr i8, ptr %result.i233.i1642, i64 24
  store ptr null, ptr %2242, align 8
  %2243 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i233.i1642)
  store ptr @Entry, ptr %result.i233.i1642, align 8
  store ptr @_parameterization_Ptri32, ptr %57, align 8
  store ptr %result.i233.i1642, ptr %1476, align 8
  %2244 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %57)
  %2245 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2230)
  %2246 = sext i32 %2236 to i64
  %2247 = getelementptr ptr, ptr %2230, i64 %2246
  %2248 = getelementptr i8, ptr %2247, i64 128
  %2249 = load ptr, ptr %2248, align 8
  store ptr @i32_typ, ptr %58, align 8
  store ptr @Entry, ptr %1477, align 8
  %2250 = call ptr %2249({ ptr, ptr, ptr, i32 } %2237, ptr nonnull %58)
  call void %2250({ ptr, ptr, ptr, i32 } %2237, { ptr, ptr, ptr, i32 } %2237, ptr nonnull %57, i32 %2208, { ptr, i160 } %2228)
  %2251 = icmp ne ptr %.fca.0.extract87.i1617, @nil_typ
  %2252 = icmp ne ptr %.fca.0.extract87.i1617, null
  %.not138.i1643 = and i1 %2251, %2252
  br i1 %.not138.i1643, label %.cont.cont.i1648, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit.thread2168

.cont.cont.i1648:                                 ; preds = %2171, %2107
  %.sink2208 = phi { ptr, i160 } [ %2143, %2107 ], [ %2225, %2171 ]
  %2253 = phi i32 [ 2, %2107 ], [ 1, %2171 ]
  %vptr.i248.sroa.speculated.i1649 = phi ptr [ %.fca.0.extract112.i1681, %2107 ], [ %.fca.0.extract87.i1617, %2171 ]
  %.fca.1.extract89.i1644 = extractvalue { ptr, i160 } %.sink2208, 1
  %.sroa.3407.sroa.4.0.extract.shift.i1645 = lshr i160 %.fca.1.extract89.i1644, 64
  %.sroa.3407.sroa.4.0.extract.trunc.i1646 = trunc i160 %.sroa.3407.sroa.4.0.extract.shift.i1645 to i64
  %.sroa.3407.sroa.0.0.extract.trunc.i1647 = trunc i160 %.fca.1.extract89.i1644 to i64
  %.sroa.speculated352.i1650 = inttoptr i64 %.sroa.3407.sroa.0.0.extract.trunc.i1647 to ptr
  %.sroa.speculated346.i1651 = inttoptr i64 %.sroa.3407.sroa.4.0.extract.trunc.i1646 to ptr
  %hash_coef_ptr.i.i249.i1652 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i1649, i64 8
  %tbl_size_ptr.i.i250.i1653 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i1649, i64 16
  %offset_tbl_ptr.i.i251.i1654 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i1649, i64 40
  %hash_coef.i.i252.i1655 = load i64, ptr %hash_coef_ptr.i.i249.i1652, align 4
  %tbl_size.i.i253.i1656 = load i64, ptr %tbl_size_ptr.i.i250.i1653, align 4
  %offset_tbl.i.i254.i1657 = load ptr, ptr %offset_tbl_ptr.i.i251.i1654, align 8
  %product.i.i.i255.i1658 = mul i64 %hash_coef.i.i252.i1655, 4015701072841558310
  %shifted.i.i.i256.i1659 = lshr i64 %product.i.i.i255.i1658, 32
  %xored.i.i.i257.i1660 = xor i64 %shifted.i.i.i256.i1659, %product.i.i.i255.i1658
  %hash.i.i.i258.i1661 = and i64 %xored.i.i.i257.i1660, %tbl_size.i.i253.i1656
  %offset_ptr.i.i259.i1662 = getelementptr i32, ptr %offset_tbl.i.i254.i1657, i64 %hash.i.i.i258.i1661
  %offset.i.i260.i1663 = load i32, ptr %offset_ptr.i.i259.i1662, align 4
  store ptr %vptr.i248.sroa.speculated.i1649, ptr %63, align 8
  store ptr %.sroa.speculated352.i1650, ptr %1473, align 8
  store ptr %.sroa.speculated346.i1651, ptr %1474, align 8
  store i32 %offset.i.i260.i1663, ptr %1475, align 8
  %2254 = add nuw nsw i32 %.reg2mem193.0677.i1599, 1
  %2255 = load i32, ptr %169, align 4
  %2256 = icmp slt i32 %2254, %2255
  br i1 %2256, label %2097, label %._crit_edge3.i612

HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit.thread2168: ; preds = %2107, %2171
  %2257 = phi ptr [ %59, %2171 ], [ %51, %2107 ]
  %2258 = phi ptr [ %60, %2171 ], [ %52, %2107 ]
  %2259 = phi ptr [ %61, %2171 ], [ %53, %2107 ]
  %2260 = phi ptr [ %.sroa.0.i1568, %2171 ], [ %.sroa.0680.i1567, %2107 ]
  %2261 = phi ptr [ %62, %2171 ], [ %54, %2107 ]
  %2262 = load i32, ptr %1466, align 4
  store i32 %2262, ptr %2257, align 4
  store i32 1, ptr %2258, align 4
  %2263 = add i32 %2262, 1
  store i32 %2263, ptr %2259, align 4
  %2264 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  store i32 %2263, ptr %1466, align 4
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %2261, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %2260, align 8
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %47)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %48)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %49)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %50)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %51)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %52)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %53)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i1567)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %54)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %55)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %56)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %57)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %58)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %59)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %60)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %61)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i1568)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %62)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %63)
  br label %HashMap_insert_keyK_valueV.exit703

._crit_edge3.i612:                                ; preds = %.cont.cont.i1648, %._crit_edge2.i606
  %2265 = load i160, ptr %1473, align 8
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %47)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %48)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %49)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %50)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %51)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %52)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %53)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i1567)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %54)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %55)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %56)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %57)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %58)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %59)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %60)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %61)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i1568)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %62)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %63)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %45)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %46)
  %2266 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2267 = load ptr, ptr %153, align 8
  %2268 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2267, 0
  %2269 = load ptr, ptr %154, align 8
  %2270 = insertvalue { ptr, ptr, ptr, i32 } %2268, ptr %2269, 1
  %2271 = load ptr, ptr %1464, align 8
  %2272 = insertvalue { ptr, ptr, ptr, i32 } %2270, ptr %2271, 2
  %2273 = load i32, ptr %155, align 4
  %2274 = insertvalue { ptr, ptr, ptr, i32 } %2272, i32 %2273, 3
  %hash_coef_ptr.i.i18.i1728 = getelementptr i8, ptr %2267, i64 8
  %tbl_size_ptr.i.i19.i1729 = getelementptr i8, ptr %2267, i64 16
  %offset_tbl_ptr.i.i20.i1730 = getelementptr i8, ptr %2267, i64 40
  %hash_coef.i.i21.i1731 = load i64, ptr %hash_coef_ptr.i.i18.i1728, align 4
  %tbl_size.i.i22.i1732 = load i64, ptr %tbl_size_ptr.i.i19.i1729, align 4
  %offset_tbl.i.i23.i1733 = load ptr, ptr %offset_tbl_ptr.i.i20.i1730, align 8
  %product.i.i.i24.i1734 = mul i64 %hash_coef.i.i21.i1731, -5261542750394134544
  %shifted.i.i.i25.i1735 = lshr i64 %product.i.i.i24.i1734, 32
  %xored.i.i.i26.i1736 = xor i64 %shifted.i.i.i25.i1735, %product.i.i.i24.i1734
  %hash.i.i.i27.i1737 = and i64 %xored.i.i.i26.i1736, %tbl_size.i.i22.i1732
  %offset_ptr.i.i28.i1738 = getelementptr i32, ptr %offset_tbl.i.i23.i1733, i64 %hash.i.i.i27.i1737
  %offset.i.i29.i1739 = load i32, ptr %offset_ptr.i.i28.i1738, align 4
  %eq.i.i1740 = icmp eq i32 %2273, %offset.i.i29.i1739
  call void @llvm.assume(i1 %eq.i.i1740) #30
  %2275 = load ptr, ptr %166, align 8
  %2276 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2275, 0
  %2277 = load ptr, ptr %167, align 8
  %2278 = insertvalue { ptr, ptr, ptr, i32 } %2276, ptr %2277, 1
  %2279 = load ptr, ptr %1465, align 8
  %2280 = insertvalue { ptr, ptr, ptr, i32 } %2278, ptr %2279, 2
  %2281 = load i32, ptr %168, align 4
  %hash_coef_ptr.i.i46.i1745 = getelementptr i8, ptr %2275, i64 8
  %tbl_size_ptr.i.i47.i1746 = getelementptr i8, ptr %2275, i64 16
  %offset_tbl_ptr.i.i48.i1747 = getelementptr i8, ptr %2275, i64 40
  %hash_coef.i.i49.i1748 = load i64, ptr %hash_coef_ptr.i.i46.i1745, align 4
  %tbl_size.i.i50.i1749 = load i64, ptr %tbl_size_ptr.i.i47.i1746, align 4
  %offset_tbl.i.i51.i1750 = load ptr, ptr %offset_tbl_ptr.i.i48.i1747, align 8
  %product.i.i.i52.i1751 = mul i64 %hash_coef.i.i49.i1748, -5261542750394134544
  %shifted.i.i.i53.i1752 = lshr i64 %product.i.i.i52.i1751, 32
  %xored.i.i.i54.i1753 = xor i64 %shifted.i.i.i53.i1752, %product.i.i.i52.i1751
  %hash.i.i.i55.i1754 = and i64 %xored.i.i.i54.i1753, %tbl_size.i.i50.i1749
  %offset_ptr.i.i56.i1755 = getelementptr i32, ptr %offset_tbl.i.i51.i1750, i64 %hash.i.i.i55.i1754
  %offset.i.i57.i1756 = load i32, ptr %offset_ptr.i.i56.i1755, align 4
  %eq.i60.i1757 = icmp eq i32 %2281, %offset.i.i57.i1756
  call void @llvm.assume(i1 %eq.i60.i1757) #30
  %2282 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2283 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2267)
  %2284 = sext i32 %2273 to i64
  %2285 = getelementptr ptr, ptr %2267, i64 %2284
  %2286 = getelementptr i8, ptr %2285, i64 64
  %2287 = load ptr, ptr %2286, align 8
  %2288 = call ptr %2287({ ptr, ptr, ptr, i32 } %2274, ptr nonnull %2)
  %2289 = call i32 %2288({ ptr, ptr, ptr, i32 } %2274, { ptr, ptr, ptr, i32 } %2274, ptr nonnull %2)
  %2290 = shl i32 %2289, 1
  %2291 = call i32 @llvm.smax.i32(i32 %2290, i32 16)
  %2292 = load ptr, ptr %result.i, align 8
  %2293 = load ptr, ptr %136, align 8
  %result.i.i1758 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2294 = getelementptr i8, ptr %result.i.i1758, i64 16
  store ptr @_parameterization_Nil, ptr %2294, align 8
  %result.i75.i1759 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2295 = getelementptr i8, ptr %result.i75.i1759, i64 16
  store ptr %2293, ptr %2295, align 8
  %2296 = getelementptr i8, ptr %result.i75.i1759, i64 8
  store ptr %2292, ptr %2296, align 8
  %2297 = getelementptr i8, ptr %result.i75.i1759, i64 24
  store ptr null, ptr %2297, align 8
  %2298 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i75.i1759)
  store ptr @Entry, ptr %result.i75.i1759, align 8
  %2299 = getelementptr i8, ptr %result.i.i1758, i64 8
  store ptr %result.i75.i1759, ptr %2299, align 8
  %2300 = getelementptr i8, ptr %result.i.i1758, i64 24
  store ptr null, ptr %2300, align 8
  %2301 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i1758)
  store ptr @union_typ, ptr %result.i.i1758, align 8
  %result.i76.i1760 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i1758, ptr %result.i76.i1760, align 8
  %2302 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i76.i1760)
  store ptr @Array, ptr %45, align 8
  store ptr %result.i76.i1760, ptr %1480, align 8
  store i32 9, ptr %1481, align 8
  %2303 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %45)
  %2304 = getelementptr i8, ptr %result.i76.i1760, i64 16
  store i32 %2291, ptr %2304, align 4
  %2305 = getelementptr i8, ptr %result.i76.i1760, i64 20
  store i32 %2291, ptr %2305, align 4
  %2306 = zext nneg i32 %2291 to i64
  %2307 = shl nuw nsw i64 %2306, 5
  %result.i.i.i1761 = call noalias ptr @bump_malloc_inner(i64 noundef %2307, ptr nonnull @current_ptr) #29
  %2308 = getelementptr i8, ptr %result.i76.i1760, i64 8
  store ptr %result.i.i.i1761, ptr %2308, align 8
  %2309 = load ptr, ptr %1482, align 8
  store ptr @Array, ptr %153, align 8
  store ptr %result.i76.i1760, ptr %154, align 8
  store ptr %2309, ptr %1464, align 8
  store i32 9, ptr %155, align 4
  %result.i91.i1774 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2310 = getelementptr i8, ptr %result.i91.i1774, i64 16
  store ptr @_parameterization_Nil, ptr %2310, align 8
  %result.i92.i1775 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2311 = getelementptr i8, ptr %result.i92.i1775, i64 16
  store ptr %2293, ptr %2311, align 8
  %2312 = getelementptr i8, ptr %result.i92.i1775, i64 8
  store ptr %2292, ptr %2312, align 8
  %2313 = getelementptr i8, ptr %result.i92.i1775, i64 24
  store ptr null, ptr %2313, align 8
  %2314 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i92.i1775)
  store ptr @Entry, ptr %result.i92.i1775, align 8
  %2315 = getelementptr i8, ptr %result.i91.i1774, i64 8
  store ptr %result.i92.i1775, ptr %2315, align 8
  %2316 = getelementptr i8, ptr %result.i91.i1774, i64 24
  store ptr null, ptr %2316, align 8
  %2317 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i91.i1774)
  store ptr @union_typ, ptr %result.i91.i1774, align 8
  %result.i93.i1776 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i91.i1774, ptr %result.i93.i1776, align 8
  %2318 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i93.i1776)
  store ptr @Array, ptr %46, align 8
  store ptr %result.i93.i1776, ptr %1483, align 8
  store i32 9, ptr %1484, align 8
  %2319 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %46)
  %2320 = getelementptr i8, ptr %result.i93.i1776, i64 16
  store i32 %2291, ptr %2320, align 4
  %2321 = getelementptr i8, ptr %result.i93.i1776, i64 20
  store i32 %2291, ptr %2321, align 4
  %result.i.i234.i1777 = call noalias ptr @bump_malloc_inner(i64 noundef %2307, ptr nonnull @current_ptr) #29
  %2322 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %2323 = getelementptr i8, ptr %result.i93.i1776, i64 8
  store ptr %result.i.i234.i1777, ptr %2323, align 8
  %2324 = load ptr, ptr %1485, align 8
  store ptr @Array, ptr %166, align 8
  store ptr %result.i93.i1776, ptr %167, align 8
  store ptr %2324, ptr %1465, align 8
  store i32 9, ptr %168, align 4
  store i32 0, ptr %1466, align 4
  %2325 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10)
  %2326 = icmp sgt i32 %2289, 0
  br i1 %2326, label %.lr.ph.i2784, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2887.critedge

.lr.ph.i2784:                                     ; preds = %._crit_edge3.i612
  %invariant.gep.i2785 = getelementptr i8, ptr %2267, i64 120
  %offset_tbl.i.i24.i2787 = load ptr, ptr %offset_tbl_ptr.i.i20.i1730, align 8
  %hash_coef.i.i22.i2789 = load i64, ptr %hash_coef_ptr.i.i18.i1728, align 4
  %product.i.i.i25.i2790 = mul i64 %hash_coef.i.i22.i2789, -5261542750394134544
  %shifted.i.i.i26.i2791 = lshr i64 %product.i.i.i25.i2790, 32
  %xored.i.i.i27.i2792 = xor i64 %shifted.i.i.i26.i2791, %product.i.i.i25.i2790
  %tbl_size.i.i23.i2794 = load i64, ptr %tbl_size_ptr.i.i19.i1729, align 4
  %hash.i.i.i28.i2795 = and i64 %xored.i.i.i27.i2792, %tbl_size.i.i23.i2794
  %offset_ptr.i.i29.i2796 = getelementptr i32, ptr %offset_tbl.i.i24.i2787, i64 %hash.i.i.i28.i2795
  %offset.i.i30.i2797 = load i32, ptr %offset_ptr.i.i29.i2796, align 4
  %2327 = insertvalue { ptr, ptr, ptr, i32 } %2272, i32 %offset.i.i30.i2797, 3
  %2328 = sext i32 %offset.i.i30.i2797 to i64
  %gep.i2812 = getelementptr ptr, ptr %invariant.gep.i2785, i64 %2328
  %2329 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %2330

2330:                                             ; preds = %._crit_edge1.i2816, %.lr.ph.i2784
  %.reg2mem13.079.i2813 = phi i32 [ 0, %.lr.ph.i2784 ], [ %2347, %._crit_edge1.i2816 ]
  store ptr @_parameterization_Ptri32, ptr %9, align 8
  %2331 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %9)
  %2332 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %2267)
  %2333 = load ptr, ptr %gep.i2812, align 8
  store ptr @i32_typ, ptr %10, align 8
  %2334 = call ptr %2333({ ptr, ptr, ptr, i32 } %2327, ptr nonnull %10)
  %2335 = call { ptr, i160 } %2334({ ptr, ptr, ptr, i32 } %2327, { ptr, ptr, ptr, i32 } %2327, ptr nonnull %9, i32 %.reg2mem13.079.i2813)
  %.fca.0.extract11.i2814 = extractvalue { ptr, i160 } %2335, 0
  %2336 = icmp ne ptr %.fca.0.extract11.i2814, @nil_typ
  %2337 = icmp ne ptr %.fca.0.extract11.i2814, null
  %.not17.i2815 = and i1 %2336, %2337
  br i1 %.not17.i2815, label %2338, label %._crit_edge1.i2816

2338:                                             ; preds = %2330
  %.fca.1.extract13.i2817 = extractvalue { ptr, i160 } %2335, 1
  %.sroa.375.8.extract.trunc.i2818 = trunc i160 %.fca.1.extract13.i2817 to i64
  %2339 = inttoptr i64 %.sroa.375.8.extract.trunc.i2818 to ptr
  %.sroa.576.8.extract.shift.i2819 = lshr i160 %.fca.1.extract13.i2817, 64
  %.sroa.576.8.extract.trunc.i2820 = trunc i160 %.sroa.576.8.extract.shift.i2819 to i64
  %2340 = inttoptr i64 %.sroa.576.8.extract.trunc.i2820 to ptr
  %hash_coef_ptr.i.i33.i2821 = getelementptr i8, ptr %.fca.0.extract11.i2814, i64 8
  %tbl_size_ptr.i.i34.i2822 = getelementptr i8, ptr %.fca.0.extract11.i2814, i64 16
  %offset_tbl_ptr.i.i35.i2823 = getelementptr i8, ptr %.fca.0.extract11.i2814, i64 40
  %hash_coef.i.i36.i2824 = load i64, ptr %hash_coef_ptr.i.i33.i2821, align 4
  %tbl_size.i.i37.i2825 = load i64, ptr %tbl_size_ptr.i.i34.i2822, align 4
  %offset_tbl.i.i38.i2826 = load ptr, ptr %offset_tbl_ptr.i.i35.i2823, align 8
  %product.i.i.i39.i2827 = mul i64 %hash_coef.i.i36.i2824, 4015701072841558310
  %shifted.i.i.i40.i2828 = lshr i64 %product.i.i.i39.i2827, 32
  %xored.i.i.i41.i2829 = xor i64 %shifted.i.i.i40.i2828, %product.i.i.i39.i2827
  %hash.i.i.i42.i2830 = and i64 %xored.i.i.i41.i2829, %tbl_size.i.i37.i2825
  %offset_ptr.i.i43.i2831 = getelementptr i32, ptr %offset_tbl.i.i38.i2826, i64 %hash.i.i.i42.i2830
  %offset.i.i58.i2832 = load i32, ptr %offset_ptr.i.i43.i2831, align 4
  %2341 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i2814, 0
  %2342 = insertvalue { ptr, ptr, ptr, i32 } %2341, ptr %2339, 1
  %2343 = insertvalue { ptr, ptr, ptr, i32 } %2342, ptr %2340, 2
  %2344 = insertvalue { ptr, ptr, ptr, i32 } %2343, i32 %offset.i.i58.i2832, 3
  %2345 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2346 = call { ptr, i160 } @HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %1498, { ptr, ptr, ptr, i32 } poison, ptr nonnull poison, { ptr, ptr, ptr, i32 } %2344)
  br label %._crit_edge1.i2816

._crit_edge1.i2816:                               ; preds = %2338, %2330
  %2347 = add nuw nsw i32 %.reg2mem13.079.i2813, 1
  %2348 = icmp slt i32 %2347, %2289
  br i1 %2348, label %2330, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2834

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2834: ; preds = %._crit_edge1.i2816
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10)
  %2349 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8)
  %invariant.gep.i2838 = getelementptr i8, ptr %2275, i64 120
  %offset_tbl.i.i24.i2840 = load ptr, ptr %offset_tbl_ptr.i.i48.i1747, align 8
  %hash_coef.i.i22.i2842 = load i64, ptr %hash_coef_ptr.i.i46.i1745, align 4
  %product.i.i.i25.i2843 = mul i64 %hash_coef.i.i22.i2842, -5261542750394134544
  %shifted.i.i.i26.i2844 = lshr i64 %product.i.i.i25.i2843, 32
  %xored.i.i.i27.i2845 = xor i64 %shifted.i.i.i26.i2844, %product.i.i.i25.i2843
  %tbl_size.i.i23.i2847 = load i64, ptr %tbl_size_ptr.i.i47.i1746, align 4
  %hash.i.i.i28.i2848 = and i64 %xored.i.i.i27.i2845, %tbl_size.i.i23.i2847
  %offset_ptr.i.i29.i2849 = getelementptr i32, ptr %offset_tbl.i.i24.i2840, i64 %hash.i.i.i28.i2848
  %offset.i.i30.i2850 = load i32, ptr %offset_ptr.i.i29.i2849, align 4
  %2350 = insertvalue { ptr, ptr, ptr, i32 } %2280, i32 %offset.i.i30.i2850, 3
  %2351 = sext i32 %offset.i.i30.i2850 to i64
  %gep.i2865 = getelementptr ptr, ptr %invariant.gep.i2838, i64 %2351
  %2352 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %2353

2353:                                             ; preds = %._crit_edge1.i2869, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2834
  %.reg2mem13.079.i2866 = phi i32 [ 0, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2834 ], [ %2370, %._crit_edge1.i2869 ]
  store ptr @_parameterization_Ptri32, ptr %7, align 8
  %2354 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %7)
  %2355 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %2275)
  %2356 = load ptr, ptr %gep.i2865, align 8
  store ptr @i32_typ, ptr %8, align 8
  %2357 = call ptr %2356({ ptr, ptr, ptr, i32 } %2350, ptr nonnull %8)
  %2358 = call { ptr, i160 } %2357({ ptr, ptr, ptr, i32 } %2350, { ptr, ptr, ptr, i32 } %2350, ptr nonnull %7, i32 %.reg2mem13.079.i2866)
  %.fca.0.extract11.i2867 = extractvalue { ptr, i160 } %2358, 0
  %2359 = icmp ne ptr %.fca.0.extract11.i2867, @nil_typ
  %2360 = icmp ne ptr %.fca.0.extract11.i2867, null
  %.not17.i2868 = and i1 %2359, %2360
  br i1 %.not17.i2868, label %2361, label %._crit_edge1.i2869

2361:                                             ; preds = %2353
  %.fca.1.extract13.i2870 = extractvalue { ptr, i160 } %2358, 1
  %.sroa.375.8.extract.trunc.i2871 = trunc i160 %.fca.1.extract13.i2870 to i64
  %2362 = inttoptr i64 %.sroa.375.8.extract.trunc.i2871 to ptr
  %.sroa.576.8.extract.shift.i2872 = lshr i160 %.fca.1.extract13.i2870, 64
  %.sroa.576.8.extract.trunc.i2873 = trunc i160 %.sroa.576.8.extract.shift.i2872 to i64
  %2363 = inttoptr i64 %.sroa.576.8.extract.trunc.i2873 to ptr
  %hash_coef_ptr.i.i33.i2874 = getelementptr i8, ptr %.fca.0.extract11.i2867, i64 8
  %tbl_size_ptr.i.i34.i2875 = getelementptr i8, ptr %.fca.0.extract11.i2867, i64 16
  %offset_tbl_ptr.i.i35.i2876 = getelementptr i8, ptr %.fca.0.extract11.i2867, i64 40
  %hash_coef.i.i36.i2877 = load i64, ptr %hash_coef_ptr.i.i33.i2874, align 4
  %tbl_size.i.i37.i2878 = load i64, ptr %tbl_size_ptr.i.i34.i2875, align 4
  %offset_tbl.i.i38.i2879 = load ptr, ptr %offset_tbl_ptr.i.i35.i2876, align 8
  %product.i.i.i39.i2880 = mul i64 %hash_coef.i.i36.i2877, 4015701072841558310
  %shifted.i.i.i40.i2881 = lshr i64 %product.i.i.i39.i2880, 32
  %xored.i.i.i41.i2882 = xor i64 %shifted.i.i.i40.i2881, %product.i.i.i39.i2880
  %hash.i.i.i42.i2883 = and i64 %xored.i.i.i41.i2882, %tbl_size.i.i37.i2878
  %offset_ptr.i.i43.i2884 = getelementptr i32, ptr %offset_tbl.i.i38.i2879, i64 %hash.i.i.i42.i2883
  %offset.i.i58.i2885 = load i32, ptr %offset_ptr.i.i43.i2884, align 4
  %2364 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i2867, 0
  %2365 = insertvalue { ptr, ptr, ptr, i32 } %2364, ptr %2362, 1
  %2366 = insertvalue { ptr, ptr, ptr, i32 } %2365, ptr %2363, 2
  %2367 = insertvalue { ptr, ptr, ptr, i32 } %2366, i32 %offset.i.i58.i2885, 3
  %2368 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2369 = call { ptr, i160 } @HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %1498, { ptr, ptr, ptr, i32 } poison, ptr nonnull poison, { ptr, ptr, ptr, i32 } %2367)
  br label %._crit_edge1.i2869

._crit_edge1.i2869:                               ; preds = %2361, %2353
  %2370 = add nuw nsw i32 %.reg2mem13.079.i2866, 1
  %2371 = icmp slt i32 %2370, %2289
  br i1 %2371, label %2353, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2887

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2887.critedge: ; preds = %._crit_edge3.i612
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8)
  br label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2887

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2887: ; preds = %._crit_edge1.i2869, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2887.critedge
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %45)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %46)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %29)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %30)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %31)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %32)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %33)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %34)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %35)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0680.i1820)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %36)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %37)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %38)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %39)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %40)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %41)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %42)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %43)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i1822)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %44)
  %2372 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2373 = load i32, ptr %169, align 4
  %2374 = icmp sgt i32 %2373, 0
  br i1 %2374, label %.lr.ph.i1857, label %._crit_edge3.1.i618

.lr.ph.i1857:                                     ; preds = %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2887
  %2375 = lshr i160 %2265, 64
  %2376 = insertelement <2 x i160> poison, i160 %2375, i64 0
  %2377 = insertelement <2 x i160> %2376, i160 %2265, i64 1
  %2378 = trunc <2 x i160> %2377 to <2 x i64>
  %2379 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2380 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  br label %2381

2381:                                             ; preds = %.cont.cont.i1911, %.lr.ph.i1857
  %offset.i.i260.i19282198 = phi i32 [ 9, %.lr.ph.i1857 ], [ %offset.i.i260.i1928, %.cont.cont.i1911 ]
  %.reg2mem195.0678.i1859 = phi i32 [ 1, %.lr.ph.i1857 ], [ %2536, %.cont.cont.i1911 ]
  %.reg2mem193.0677.i1860 = phi i32 [ 0, %.lr.ph.i1857 ], [ %2541, %.cont.cont.i1911 ]
  %2382 = phi <2 x i64> [ %2378, %.lr.ph.i1857 ], [ %2540, %.cont.cont.i1911 ]
  %2383 = extractelement <2 x i64> %2382, i64 1
  %.sroa.speculated352.i19152194 = inttoptr i64 %2383 to ptr
  %2384 = extractelement <2 x i64> %2382, i64 0
  %.sroa.speculated346.i19162196 = inttoptr i64 %2384 to ptr
  %2385 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Entry, ptr undef, ptr undef, i32 undef }, ptr %.sroa.speculated352.i19152194, 1
  %2386 = insertvalue { ptr, ptr, ptr, i32 } %2385, ptr %.sroa.speculated346.i19162196, 2
  %2387 = insertvalue { ptr, ptr, ptr, i32 } %2386, i32 %offset.i.i260.i19282198, 3
  %2388 = sext i32 %offset.i.i260.i19282198 to i64
  %gep2192 = getelementptr ptr, ptr getelementptr inbounds (i8, ptr @Entry, i64 64), i64 %2388
  %2389 = load ptr, ptr %gep2192, align 8
  %2390 = call ptr %2389({ ptr, ptr, ptr, i32 } %2387, ptr nonnull %2)
  %2391 = call i32 %2390({ ptr, ptr, ptr, i32 } %2387, { ptr, ptr, ptr, i32 } %2387, ptr nonnull %2)
  %2392 = icmp eq i32 %.reg2mem195.0678.i1859, 1
  %2393 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br i1 %2392, label %2394, label %2456

2394:                                             ; preds = %2381
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %2395 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2396 = load ptr, ptr %153, align 8
  %2397 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2396, 0
  %2398 = load ptr, ptr %154, align 8
  %2399 = insertvalue { ptr, ptr, ptr, i32 } %2397, ptr %2398, 1
  %2400 = load ptr, ptr %1464, align 8
  %2401 = insertvalue { ptr, ptr, ptr, i32 } %2399, ptr %2400, 2
  %2402 = load i32, ptr %155, align 4
  %2403 = insertvalue { ptr, ptr, ptr, i32 } %2401, i32 %2402, 3
  %hash_coef_ptr.i.i10.i2905 = getelementptr i8, ptr %2396, i64 8
  %tbl_size_ptr.i.i11.i2906 = getelementptr i8, ptr %2396, i64 16
  %offset_tbl_ptr.i.i12.i2907 = getelementptr i8, ptr %2396, i64 40
  %hash_coef.i.i13.i2908 = load i64, ptr %hash_coef_ptr.i.i10.i2905, align 4
  %tbl_size.i.i14.i2909 = load i64, ptr %tbl_size_ptr.i.i11.i2906, align 4
  %offset_tbl.i.i15.i2910 = load ptr, ptr %offset_tbl_ptr.i.i12.i2907, align 8
  %product.i.i.i16.i2911 = mul i64 %hash_coef.i.i13.i2908, -5261542750394134544
  %shifted.i.i.i17.i2912 = lshr i64 %product.i.i.i16.i2911, 32
  %xored.i.i.i18.i2913 = xor i64 %shifted.i.i.i17.i2912, %product.i.i.i16.i2911
  %hash.i.i.i19.i2914 = and i64 %xored.i.i.i18.i2913, %tbl_size.i.i14.i2909
  %offset_ptr.i.i20.i2915 = getelementptr i32, ptr %offset_tbl.i.i15.i2910, i64 %hash.i.i.i19.i2914
  %offset.i.i21.i2916 = load i32, ptr %offset_ptr.i.i20.i2915, align 4
  %eq.i.i2917 = icmp eq i32 %2402, %offset.i.i21.i2916
  call void @llvm.assume(i1 %eq.i.i2917) #30
  %2404 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2405 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2396)
  %2406 = sext i32 %2402 to i64
  %2407 = getelementptr ptr, ptr %2396, i64 %2406
  %2408 = getelementptr i8, ptr %2407, i64 64
  %2409 = load ptr, ptr %2408, align 8
  %2410 = call ptr %2409({ ptr, ptr, ptr, i32 } %2403, ptr nonnull %2)
  %2411 = call i32 %2410({ ptr, ptr, ptr, i32 } %2403, { ptr, ptr, ptr, i32 } %2403, ptr nonnull %2)
  %2412 = add i32 %2411, -1
  %2413 = and i32 %2412, %2391
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %2414 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2415 = load ptr, ptr %153, align 8
  %2416 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2415, 0
  %2417 = load ptr, ptr %154, align 8
  %2418 = insertvalue { ptr, ptr, ptr, i32 } %2416, ptr %2417, 1
  %2419 = load ptr, ptr %1464, align 8
  %2420 = insertvalue { ptr, ptr, ptr, i32 } %2418, ptr %2419, 2
  %2421 = load i32, ptr %155, align 4
  %2422 = insertvalue { ptr, ptr, ptr, i32 } %2420, i32 %2421, 3
  %hash_coef_ptr.i.i172.i1933 = getelementptr i8, ptr %2415, i64 8
  %tbl_size_ptr.i.i173.i1934 = getelementptr i8, ptr %2415, i64 16
  %offset_tbl_ptr.i.i174.i1935 = getelementptr i8, ptr %2415, i64 40
  %hash_coef.i.i175.i1936 = load i64, ptr %hash_coef_ptr.i.i172.i1933, align 4
  %tbl_size.i.i176.i1937 = load i64, ptr %tbl_size_ptr.i.i173.i1934, align 4
  %offset_tbl.i.i177.i1938 = load ptr, ptr %offset_tbl_ptr.i.i174.i1935, align 8
  %product.i.i.i178.i1939 = mul i64 %hash_coef.i.i175.i1936, -5261542750394134544
  %shifted.i.i.i179.i1940 = lshr i64 %product.i.i.i178.i1939, 32
  %xored.i.i.i180.i1941 = xor i64 %shifted.i.i.i179.i1940, %product.i.i.i178.i1939
  %hash.i.i.i181.i1942 = and i64 %xored.i.i.i180.i1941, %tbl_size.i.i176.i1937
  %offset_ptr.i.i182.i1943 = getelementptr i32, ptr %offset_tbl.i.i177.i1938, i64 %hash.i.i.i181.i1942
  %offset.i.i183.i1944 = load i32, ptr %offset_ptr.i.i182.i1943, align 4
  %eq.i.i1945 = icmp eq i32 %2421, %offset.i.i183.i1944
  call void @llvm.assume(i1 %eq.i.i1945) #30
  store ptr @_parameterization_Ptri32, ptr %29, align 8
  %2423 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %29)
  %2424 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2415)
  %2425 = sext i32 %2421 to i64
  %2426 = getelementptr ptr, ptr %2415, i64 %2425
  %2427 = getelementptr i8, ptr %2426, i64 120
  %2428 = load ptr, ptr %2427, align 8
  store ptr @i32_typ, ptr %30, align 8
  %2429 = call ptr %2428({ ptr, ptr, ptr, i32 } %2422, ptr nonnull %30)
  %2430 = call { ptr, i160 } %2429({ ptr, ptr, ptr, i32 } %2422, { ptr, ptr, ptr, i32 } %2422, ptr nonnull %29, i32 %2413)
  %.fca.0.extract112.i1946 = extractvalue { ptr, i160 } %2430, 0
  %.sroa.3111.0.insert.ext.i1947 = zext i32 %offset.i.i260.i19282198 to i160
  %.sroa.3111.0.insert.shift.i1948 = shl nuw i160 %.sroa.3111.0.insert.ext.i1947, 128
  %.sroa.2110.0.insert.ext.i1949 = zext i64 %2384 to i160
  %.sroa.2110.0.insert.shift.i1950 = shl nuw nsw i160 %.sroa.2110.0.insert.ext.i1949, 64
  %.sroa.2110.0.insert.insert.i1951 = or disjoint i160 %.sroa.2110.0.insert.shift.i1950, %.sroa.3111.0.insert.shift.i1948
  %.sroa.0109.0.insert.ext.i1952 = zext i64 %2383 to i160
  %.sroa.0109.0.insert.insert.i1953 = or disjoint i160 %.sroa.2110.0.insert.insert.i1951, %.sroa.0109.0.insert.ext.i1952
  %2431 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0109.0.insert.insert.i1953, 1
  %2432 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2433 = load ptr, ptr %153, align 8
  %2434 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2433, 0
  %2435 = load ptr, ptr %154, align 8
  %2436 = insertvalue { ptr, ptr, ptr, i32 } %2434, ptr %2435, 1
  %2437 = load ptr, ptr %1464, align 8
  %2438 = insertvalue { ptr, ptr, ptr, i32 } %2436, ptr %2437, 2
  %2439 = load i32, ptr %155, align 4
  %2440 = insertvalue { ptr, ptr, ptr, i32 } %2438, i32 %2439, 3
  %hash_coef_ptr.i.i186.i1958 = getelementptr i8, ptr %2433, i64 8
  %tbl_size_ptr.i.i187.i1959 = getelementptr i8, ptr %2433, i64 16
  %offset_tbl_ptr.i.i188.i1960 = getelementptr i8, ptr %2433, i64 40
  %hash_coef.i.i189.i1961 = load i64, ptr %hash_coef_ptr.i.i186.i1958, align 4
  %tbl_size.i.i190.i1962 = load i64, ptr %tbl_size_ptr.i.i187.i1959, align 4
  %offset_tbl.i.i191.i1963 = load ptr, ptr %offset_tbl_ptr.i.i188.i1960, align 8
  %product.i.i.i192.i1964 = mul i64 %hash_coef.i.i189.i1961, -5261542750394134544
  %shifted.i.i.i193.i1965 = lshr i64 %product.i.i.i192.i1964, 32
  %xored.i.i.i194.i1966 = xor i64 %shifted.i.i.i193.i1965, %product.i.i.i192.i1964
  %hash.i.i.i195.i1967 = and i64 %xored.i.i.i194.i1966, %tbl_size.i.i190.i1962
  %offset_ptr.i.i196.i1968 = getelementptr i32, ptr %offset_tbl.i.i191.i1963, i64 %hash.i.i.i195.i1967
  %offset.i.i197.i1969 = load i32, ptr %offset_ptr.i.i196.i1968, align 4
  %eq.i200.i1970 = icmp eq i32 %2439, %offset.i.i197.i1969
  call void @llvm.assume(i1 %eq.i200.i1970) #30
  %2441 = load ptr, ptr %result.i, align 8
  %2442 = load ptr, ptr %136, align 8
  %result.i.i1971 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2443 = getelementptr i8, ptr %result.i.i1971, i64 16
  store ptr %2442, ptr %2443, align 8
  %2444 = getelementptr i8, ptr %result.i.i1971, i64 8
  store ptr %2441, ptr %2444, align 8
  %2445 = getelementptr i8, ptr %result.i.i1971, i64 24
  store ptr null, ptr %2445, align 8
  %2446 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i1971)
  store ptr @Entry, ptr %result.i.i1971, align 8
  store ptr @_parameterization_Ptri32, ptr %31, align 8
  store ptr %result.i.i1971, ptr %1488, align 8
  %2447 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %31)
  %2448 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2433)
  %2449 = sext i32 %2439 to i64
  %2450 = getelementptr ptr, ptr %2433, i64 %2449
  %2451 = getelementptr i8, ptr %2450, i64 128
  %2452 = load ptr, ptr %2451, align 8
  store ptr @i32_typ, ptr %32, align 8
  store ptr @Entry, ptr %1489, align 8
  %2453 = call ptr %2452({ ptr, ptr, ptr, i32 } %2440, ptr nonnull %32)
  call void %2453({ ptr, ptr, ptr, i32 } %2440, { ptr, ptr, ptr, i32 } %2440, ptr nonnull %31, i32 %2413, { ptr, i160 } %2431)
  %2454 = icmp ne ptr %.fca.0.extract112.i1946, @nil_typ
  %2455 = icmp ne ptr %.fca.0.extract112.i1946, null
  %.not140.i1972 = and i1 %2454, %2455
  br i1 %.not140.i1972, label %.cont.cont.i1911, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit1978.thread

2456:                                             ; preds = %2381
  %2457 = add i32 %2391, 2127912214
  %2458 = shl i32 %2391, 12
  %2459 = add i32 %2457, %2458
  %2460 = ashr i32 %2459, 19
  %2461 = xor i32 %2459, %2460
  %2462 = xor i32 %2461, -949894596
  %2463 = add i32 %2462, 374761393
  %2464 = shl i32 %2462, 5
  %2465 = add i32 %2463, %2464
  %2466 = add i32 %2465, -744332180
  %2467 = shl i32 %2465, 9
  %2468 = xor i32 %2466, %2467
  %2469 = add i32 %2468, -42973499
  %2470 = shl i32 %2468, 3
  %2471 = add i32 %2469, %2470
  %2472 = ashr i32 %2471, 16
  %2473 = xor i32 %2471, %2472
  %2474 = xor i32 %2473, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %2475 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2476 = load ptr, ptr %166, align 8
  %2477 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2476, 0
  %2478 = load ptr, ptr %167, align 8
  %2479 = insertvalue { ptr, ptr, ptr, i32 } %2477, ptr %2478, 1
  %2480 = load ptr, ptr %1465, align 8
  %2481 = insertvalue { ptr, ptr, ptr, i32 } %2479, ptr %2480, 2
  %2482 = load i32, ptr %168, align 4
  %2483 = insertvalue { ptr, ptr, ptr, i32 } %2481, i32 %2482, 3
  %hash_coef_ptr.i.i10.i2935 = getelementptr i8, ptr %2476, i64 8
  %tbl_size_ptr.i.i11.i2936 = getelementptr i8, ptr %2476, i64 16
  %offset_tbl_ptr.i.i12.i2937 = getelementptr i8, ptr %2476, i64 40
  %hash_coef.i.i13.i2938 = load i64, ptr %hash_coef_ptr.i.i10.i2935, align 4
  %tbl_size.i.i14.i2939 = load i64, ptr %tbl_size_ptr.i.i11.i2936, align 4
  %offset_tbl.i.i15.i2940 = load ptr, ptr %offset_tbl_ptr.i.i12.i2937, align 8
  %product.i.i.i16.i2941 = mul i64 %hash_coef.i.i13.i2938, -5261542750394134544
  %shifted.i.i.i17.i2942 = lshr i64 %product.i.i.i16.i2941, 32
  %xored.i.i.i18.i2943 = xor i64 %shifted.i.i.i17.i2942, %product.i.i.i16.i2941
  %hash.i.i.i19.i2944 = and i64 %xored.i.i.i18.i2943, %tbl_size.i.i14.i2939
  %offset_ptr.i.i20.i2945 = getelementptr i32, ptr %offset_tbl.i.i15.i2940, i64 %hash.i.i.i19.i2944
  %offset.i.i21.i2946 = load i32, ptr %offset_ptr.i.i20.i2945, align 4
  %eq.i.i2947 = icmp eq i32 %2482, %offset.i.i21.i2946
  call void @llvm.assume(i1 %eq.i.i2947) #30
  %2484 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2485 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2476)
  %2486 = sext i32 %2482 to i64
  %2487 = getelementptr ptr, ptr %2476, i64 %2486
  %2488 = getelementptr i8, ptr %2487, i64 64
  %2489 = load ptr, ptr %2488, align 8
  %2490 = call ptr %2489({ ptr, ptr, ptr, i32 } %2483, ptr nonnull %2)
  %2491 = call i32 %2490({ ptr, ptr, ptr, i32 } %2483, { ptr, ptr, ptr, i32 } %2483, ptr nonnull %2)
  %2492 = add i32 %2491, -1
  %2493 = and i32 %2492, %2474
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %2494 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2495 = load ptr, ptr %166, align 8
  %2496 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2495, 0
  %2497 = load ptr, ptr %167, align 8
  %2498 = insertvalue { ptr, ptr, ptr, i32 } %2496, ptr %2497, 1
  %2499 = load ptr, ptr %1465, align 8
  %2500 = insertvalue { ptr, ptr, ptr, i32 } %2498, ptr %2499, 2
  %2501 = load i32, ptr %168, align 4
  %2502 = insertvalue { ptr, ptr, ptr, i32 } %2500, i32 %2501, 3
  %hash_coef_ptr.i.i202.i1865 = getelementptr i8, ptr %2495, i64 8
  %tbl_size_ptr.i.i203.i1866 = getelementptr i8, ptr %2495, i64 16
  %offset_tbl_ptr.i.i204.i1867 = getelementptr i8, ptr %2495, i64 40
  %hash_coef.i.i205.i1868 = load i64, ptr %hash_coef_ptr.i.i202.i1865, align 4
  %tbl_size.i.i206.i1869 = load i64, ptr %tbl_size_ptr.i.i203.i1866, align 4
  %offset_tbl.i.i207.i1870 = load ptr, ptr %offset_tbl_ptr.i.i204.i1867, align 8
  %product.i.i.i208.i1871 = mul i64 %hash_coef.i.i205.i1868, -5261542750394134544
  %shifted.i.i.i209.i1872 = lshr i64 %product.i.i.i208.i1871, 32
  %xored.i.i.i210.i1873 = xor i64 %shifted.i.i.i209.i1872, %product.i.i.i208.i1871
  %hash.i.i.i211.i1874 = and i64 %xored.i.i.i210.i1873, %tbl_size.i.i206.i1869
  %offset_ptr.i.i212.i1875 = getelementptr i32, ptr %offset_tbl.i.i207.i1870, i64 %hash.i.i.i211.i1874
  %offset.i.i213.i1876 = load i32, ptr %offset_ptr.i.i212.i1875, align 4
  %eq.i216.i1877 = icmp eq i32 %2501, %offset.i.i213.i1876
  call void @llvm.assume(i1 %eq.i216.i1877) #30
  store ptr @_parameterization_Ptri32, ptr %37, align 8
  %2503 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %37)
  %2504 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2495)
  %2505 = sext i32 %2501 to i64
  %2506 = getelementptr ptr, ptr %2495, i64 %2505
  %2507 = getelementptr i8, ptr %2506, i64 120
  %2508 = load ptr, ptr %2507, align 8
  store ptr @i32_typ, ptr %38, align 8
  %2509 = call ptr %2508({ ptr, ptr, ptr, i32 } %2502, ptr nonnull %38)
  %2510 = call { ptr, i160 } %2509({ ptr, ptr, ptr, i32 } %2502, { ptr, ptr, ptr, i32 } %2502, ptr nonnull %37, i32 %2493)
  %.fca.0.extract87.i1878 = extractvalue { ptr, i160 } %2510, 0
  %.sroa.3.0.insert.ext.i1879 = zext i32 %offset.i.i260.i19282198 to i160
  %.sroa.3.0.insert.shift.i1880 = shl nuw i160 %.sroa.3.0.insert.ext.i1879, 128
  %.sroa.2.0.insert.ext.i1881 = zext i64 %2384 to i160
  %.sroa.2.0.insert.shift.i1882 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i1881, 64
  %.sroa.2.0.insert.insert.i1883 = or disjoint i160 %.sroa.2.0.insert.shift.i1882, %.sroa.3.0.insert.shift.i1880
  %.sroa.0.0.insert.ext.i1884 = zext i64 %2383 to i160
  %.sroa.0.0.insert.insert.i1885 = or disjoint i160 %.sroa.2.0.insert.insert.i1883, %.sroa.0.0.insert.ext.i1884
  %2511 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0.0.insert.insert.i1885, 1
  %2512 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2513 = load ptr, ptr %166, align 8
  %2514 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2513, 0
  %2515 = load ptr, ptr %167, align 8
  %2516 = insertvalue { ptr, ptr, ptr, i32 } %2514, ptr %2515, 1
  %2517 = load ptr, ptr %1465, align 8
  %2518 = insertvalue { ptr, ptr, ptr, i32 } %2516, ptr %2517, 2
  %2519 = load i32, ptr %168, align 4
  %2520 = insertvalue { ptr, ptr, ptr, i32 } %2518, i32 %2519, 3
  %hash_coef_ptr.i.i218.i1890 = getelementptr i8, ptr %2513, i64 8
  %tbl_size_ptr.i.i219.i1891 = getelementptr i8, ptr %2513, i64 16
  %offset_tbl_ptr.i.i220.i1892 = getelementptr i8, ptr %2513, i64 40
  %hash_coef.i.i221.i1893 = load i64, ptr %hash_coef_ptr.i.i218.i1890, align 4
  %tbl_size.i.i222.i1894 = load i64, ptr %tbl_size_ptr.i.i219.i1891, align 4
  %offset_tbl.i.i223.i1895 = load ptr, ptr %offset_tbl_ptr.i.i220.i1892, align 8
  %product.i.i.i224.i1896 = mul i64 %hash_coef.i.i221.i1893, -5261542750394134544
  %shifted.i.i.i225.i1897 = lshr i64 %product.i.i.i224.i1896, 32
  %xored.i.i.i226.i1898 = xor i64 %shifted.i.i.i225.i1897, %product.i.i.i224.i1896
  %hash.i.i.i227.i1899 = and i64 %xored.i.i.i226.i1898, %tbl_size.i.i222.i1894
  %offset_ptr.i.i228.i1900 = getelementptr i32, ptr %offset_tbl.i.i223.i1895, i64 %hash.i.i.i227.i1899
  %offset.i.i229.i1901 = load i32, ptr %offset_ptr.i.i228.i1900, align 4
  %eq.i232.i1902 = icmp eq i32 %2519, %offset.i.i229.i1901
  call void @llvm.assume(i1 %eq.i232.i1902) #30
  %2521 = load ptr, ptr %result.i, align 8
  %2522 = load ptr, ptr %136, align 8
  %result.i233.i1903 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2523 = getelementptr i8, ptr %result.i233.i1903, i64 16
  store ptr %2522, ptr %2523, align 8
  %2524 = getelementptr i8, ptr %result.i233.i1903, i64 8
  store ptr %2521, ptr %2524, align 8
  %2525 = getelementptr i8, ptr %result.i233.i1903, i64 24
  store ptr null, ptr %2525, align 8
  %2526 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i233.i1903)
  store ptr @Entry, ptr %result.i233.i1903, align 8
  store ptr @_parameterization_Ptri32, ptr %39, align 8
  store ptr %result.i233.i1903, ptr %1486, align 8
  %2527 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %39)
  %2528 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2513)
  %2529 = sext i32 %2519 to i64
  %2530 = getelementptr ptr, ptr %2513, i64 %2529
  %2531 = getelementptr i8, ptr %2530, i64 128
  %2532 = load ptr, ptr %2531, align 8
  store ptr @i32_typ, ptr %40, align 8
  store ptr @Entry, ptr %1487, align 8
  %2533 = call ptr %2532({ ptr, ptr, ptr, i32 } %2520, ptr nonnull %40)
  call void %2533({ ptr, ptr, ptr, i32 } %2520, { ptr, ptr, ptr, i32 } %2520, ptr nonnull %39, i32 %2493, { ptr, i160 } %2511)
  %2534 = icmp ne ptr %.fca.0.extract87.i1878, @nil_typ
  %2535 = icmp ne ptr %.fca.0.extract87.i1878, null
  %.not138.i1904 = and i1 %2534, %2535
  br i1 %.not138.i1904, label %.cont.cont.i1911, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit1978.thread

.cont.cont.i1911:                                 ; preds = %2456, %2394
  %.sink2210 = phi { ptr, i160 } [ %2430, %2394 ], [ %2510, %2456 ]
  %2536 = phi i32 [ 2, %2394 ], [ 1, %2456 ]
  %vptr.i248.sroa.speculated.i1914 = phi ptr [ %.fca.0.extract112.i1946, %2394 ], [ %.fca.0.extract87.i1878, %2456 ]
  %.fca.1.extract89.i1907 = extractvalue { ptr, i160 } %.sink2210, 1
  %.sroa.3407.sroa.4.0.extract.shift.i1908 = lshr i160 %.fca.1.extract89.i1907, 64
  %2537 = trunc i160 %.sroa.3407.sroa.4.0.extract.shift.i1908 to i64
  %2538 = insertelement <2 x i64> poison, i64 %2537, i64 0
  %2539 = trunc i160 %.fca.1.extract89.i1907 to i64
  %2540 = insertelement <2 x i64> %2538, i64 %2539, i64 1
  %hash_coef_ptr.i.i249.i1917 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i1914, i64 8
  %tbl_size_ptr.i.i250.i1918 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i1914, i64 16
  %offset_tbl_ptr.i.i251.i1919 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i1914, i64 40
  %hash_coef.i.i252.i1920 = load i64, ptr %hash_coef_ptr.i.i249.i1917, align 4
  %tbl_size.i.i253.i1921 = load i64, ptr %tbl_size_ptr.i.i250.i1918, align 4
  %offset_tbl.i.i254.i1922 = load ptr, ptr %offset_tbl_ptr.i.i251.i1919, align 8
  %product.i.i.i255.i1923 = mul i64 %hash_coef.i.i252.i1920, 4015701072841558310
  %shifted.i.i.i256.i1924 = lshr i64 %product.i.i.i255.i1923, 32
  %xored.i.i.i257.i1925 = xor i64 %shifted.i.i.i256.i1924, %product.i.i.i255.i1923
  %hash.i.i.i258.i1926 = and i64 %xored.i.i.i257.i1925, %tbl_size.i.i253.i1921
  %offset_ptr.i.i259.i1927 = getelementptr i32, ptr %offset_tbl.i.i254.i1922, i64 %hash.i.i.i258.i1926
  %offset.i.i260.i1928 = load i32, ptr %offset_ptr.i.i259.i1927, align 4
  %2541 = add nuw nsw i32 %.reg2mem193.0677.i1860, 1
  %2542 = load i32, ptr %169, align 4
  %2543 = icmp slt i32 %2541, %2542
  br i1 %2543, label %2381, label %._crit_edge3.1.i618

HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit1978.thread: ; preds = %2394, %2456
  %2544 = phi ptr [ %41, %2456 ], [ %33, %2394 ]
  %2545 = phi ptr [ %42, %2456 ], [ %34, %2394 ]
  %2546 = phi ptr [ %43, %2456 ], [ %35, %2394 ]
  %2547 = phi ptr [ %.sroa.0.i1822, %2456 ], [ %.sroa.0680.i1820, %2394 ]
  %2548 = phi ptr [ %44, %2456 ], [ %36, %2394 ]
  %2549 = load i32, ptr %1466, align 4
  store i32 %2549, ptr %2544, align 4
  store i32 1, ptr %2545, align 4
  %2550 = add i32 %2549, 1
  store i32 %2550, ptr %2546, align 4
  %2551 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  store i32 %2550, ptr %1466, align 4
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %2548, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %2547, align 8
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %29)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %30)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %31)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %32)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %33)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %34)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %35)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i1820)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %36)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %37)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %38)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %39)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %40)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %41)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %42)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %43)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i1822)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %44)
  br label %HashMap_insert_keyK_valueV.exit703

._crit_edge3.1.i618:                              ; preds = %.cont.cont.i1911, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2887
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %29)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %30)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %31)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %32)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %33)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %34)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %35)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i1820)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %36)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %37)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %38)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %39)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %40)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %41)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %42)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %43)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i1822)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %44)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %27)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %28)
  %2552 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2553 = load ptr, ptr %153, align 8
  %2554 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2553, 0
  %2555 = load ptr, ptr %154, align 8
  %2556 = insertvalue { ptr, ptr, ptr, i32 } %2554, ptr %2555, 1
  %2557 = load ptr, ptr %1464, align 8
  %2558 = insertvalue { ptr, ptr, ptr, i32 } %2556, ptr %2557, 2
  %2559 = load i32, ptr %155, align 4
  %2560 = insertvalue { ptr, ptr, ptr, i32 } %2558, i32 %2559, 3
  %hash_coef_ptr.i.i18.i1997 = getelementptr i8, ptr %2553, i64 8
  %tbl_size_ptr.i.i19.i1998 = getelementptr i8, ptr %2553, i64 16
  %offset_tbl_ptr.i.i20.i1999 = getelementptr i8, ptr %2553, i64 40
  %hash_coef.i.i21.i2000 = load i64, ptr %hash_coef_ptr.i.i18.i1997, align 4
  %tbl_size.i.i22.i2001 = load i64, ptr %tbl_size_ptr.i.i19.i1998, align 4
  %offset_tbl.i.i23.i2002 = load ptr, ptr %offset_tbl_ptr.i.i20.i1999, align 8
  %product.i.i.i24.i2003 = mul i64 %hash_coef.i.i21.i2000, -5261542750394134544
  %shifted.i.i.i25.i2004 = lshr i64 %product.i.i.i24.i2003, 32
  %xored.i.i.i26.i2005 = xor i64 %shifted.i.i.i25.i2004, %product.i.i.i24.i2003
  %hash.i.i.i27.i2006 = and i64 %xored.i.i.i26.i2005, %tbl_size.i.i22.i2001
  %offset_ptr.i.i28.i2007 = getelementptr i32, ptr %offset_tbl.i.i23.i2002, i64 %hash.i.i.i27.i2006
  %offset.i.i29.i2008 = load i32, ptr %offset_ptr.i.i28.i2007, align 4
  %eq.i.i2009 = icmp eq i32 %2559, %offset.i.i29.i2008
  call void @llvm.assume(i1 %eq.i.i2009) #30
  %2561 = load ptr, ptr %166, align 8
  %2562 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2561, 0
  %2563 = load ptr, ptr %167, align 8
  %2564 = insertvalue { ptr, ptr, ptr, i32 } %2562, ptr %2563, 1
  %2565 = load ptr, ptr %1465, align 8
  %2566 = insertvalue { ptr, ptr, ptr, i32 } %2564, ptr %2565, 2
  %2567 = load i32, ptr %168, align 4
  %hash_coef_ptr.i.i46.i2014 = getelementptr i8, ptr %2561, i64 8
  %tbl_size_ptr.i.i47.i2015 = getelementptr i8, ptr %2561, i64 16
  %offset_tbl_ptr.i.i48.i2016 = getelementptr i8, ptr %2561, i64 40
  %hash_coef.i.i49.i2017 = load i64, ptr %hash_coef_ptr.i.i46.i2014, align 4
  %tbl_size.i.i50.i2018 = load i64, ptr %tbl_size_ptr.i.i47.i2015, align 4
  %offset_tbl.i.i51.i2019 = load ptr, ptr %offset_tbl_ptr.i.i48.i2016, align 8
  %product.i.i.i52.i2020 = mul i64 %hash_coef.i.i49.i2017, -5261542750394134544
  %shifted.i.i.i53.i2021 = lshr i64 %product.i.i.i52.i2020, 32
  %xored.i.i.i54.i2022 = xor i64 %shifted.i.i.i53.i2021, %product.i.i.i52.i2020
  %hash.i.i.i55.i2023 = and i64 %xored.i.i.i54.i2022, %tbl_size.i.i50.i2018
  %offset_ptr.i.i56.i2024 = getelementptr i32, ptr %offset_tbl.i.i51.i2019, i64 %hash.i.i.i55.i2023
  %offset.i.i57.i2025 = load i32, ptr %offset_ptr.i.i56.i2024, align 4
  %eq.i60.i2026 = icmp eq i32 %2567, %offset.i.i57.i2025
  call void @llvm.assume(i1 %eq.i60.i2026) #30
  %2568 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2569 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2553)
  %2570 = sext i32 %2559 to i64
  %2571 = getelementptr ptr, ptr %2553, i64 %2570
  %2572 = getelementptr i8, ptr %2571, i64 64
  %2573 = load ptr, ptr %2572, align 8
  %2574 = call ptr %2573({ ptr, ptr, ptr, i32 } %2560, ptr nonnull %2)
  %2575 = call i32 %2574({ ptr, ptr, ptr, i32 } %2560, { ptr, ptr, ptr, i32 } %2560, ptr nonnull %2)
  %2576 = shl i32 %2575, 1
  %2577 = call i32 @llvm.smax.i32(i32 %2576, i32 16)
  %2578 = load ptr, ptr %result.i, align 8
  %2579 = load ptr, ptr %136, align 8
  %result.i.i2027 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2580 = getelementptr i8, ptr %result.i.i2027, i64 16
  store ptr @_parameterization_Nil, ptr %2580, align 8
  %result.i75.i2028 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2581 = getelementptr i8, ptr %result.i75.i2028, i64 16
  store ptr %2579, ptr %2581, align 8
  %2582 = getelementptr i8, ptr %result.i75.i2028, i64 8
  store ptr %2578, ptr %2582, align 8
  %2583 = getelementptr i8, ptr %result.i75.i2028, i64 24
  store ptr null, ptr %2583, align 8
  %2584 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i75.i2028)
  store ptr @Entry, ptr %result.i75.i2028, align 8
  %2585 = getelementptr i8, ptr %result.i.i2027, i64 8
  store ptr %result.i75.i2028, ptr %2585, align 8
  %2586 = getelementptr i8, ptr %result.i.i2027, i64 24
  store ptr null, ptr %2586, align 8
  %2587 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i2027)
  store ptr @union_typ, ptr %result.i.i2027, align 8
  %result.i76.i2029 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i2027, ptr %result.i76.i2029, align 8
  %2588 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i76.i2029)
  store ptr @Array, ptr %27, align 8
  store ptr %result.i76.i2029, ptr %1490, align 8
  store i32 9, ptr %1491, align 8
  %2589 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %27)
  %2590 = getelementptr i8, ptr %result.i76.i2029, i64 16
  store i32 %2577, ptr %2590, align 4
  %2591 = getelementptr i8, ptr %result.i76.i2029, i64 20
  store i32 %2577, ptr %2591, align 4
  %2592 = zext nneg i32 %2577 to i64
  %2593 = shl nuw nsw i64 %2592, 5
  %result.i.i.i2030 = call noalias ptr @bump_malloc_inner(i64 noundef %2593, ptr nonnull @current_ptr) #29
  %2594 = getelementptr i8, ptr %result.i76.i2029, i64 8
  store ptr %result.i.i.i2030, ptr %2594, align 8
  %2595 = load ptr, ptr %1492, align 8
  store ptr @Array, ptr %153, align 8
  store ptr %result.i76.i2029, ptr %154, align 8
  store ptr %2595, ptr %1464, align 8
  store i32 9, ptr %155, align 4
  %result.i91.i2043 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2596 = getelementptr i8, ptr %result.i91.i2043, i64 16
  store ptr @_parameterization_Nil, ptr %2596, align 8
  %result.i92.i2044 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2597 = getelementptr i8, ptr %result.i92.i2044, i64 16
  store ptr %2579, ptr %2597, align 8
  %2598 = getelementptr i8, ptr %result.i92.i2044, i64 8
  store ptr %2578, ptr %2598, align 8
  %2599 = getelementptr i8, ptr %result.i92.i2044, i64 24
  store ptr null, ptr %2599, align 8
  %2600 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i92.i2044)
  store ptr @Entry, ptr %result.i92.i2044, align 8
  %2601 = getelementptr i8, ptr %result.i91.i2043, i64 8
  store ptr %result.i92.i2044, ptr %2601, align 8
  %2602 = getelementptr i8, ptr %result.i91.i2043, i64 24
  store ptr null, ptr %2602, align 8
  %2603 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i91.i2043)
  store ptr @union_typ, ptr %result.i91.i2043, align 8
  %result.i93.i2045 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i91.i2043, ptr %result.i93.i2045, align 8
  %2604 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i93.i2045)
  store ptr @Array, ptr %28, align 8
  store ptr %result.i93.i2045, ptr %1493, align 8
  store i32 9, ptr %1494, align 8
  %2605 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %28)
  %2606 = getelementptr i8, ptr %result.i93.i2045, i64 16
  store i32 %2577, ptr %2606, align 4
  %2607 = getelementptr i8, ptr %result.i93.i2045, i64 20
  store i32 %2577, ptr %2607, align 4
  %result.i.i234.i2046 = call noalias ptr @bump_malloc_inner(i64 noundef %2593, ptr nonnull @current_ptr) #29
  %2608 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %2609 = getelementptr i8, ptr %result.i93.i2045, i64 8
  store ptr %result.i.i234.i2046, ptr %2609, align 8
  %2610 = load ptr, ptr %1495, align 8
  store ptr @Array, ptr %166, align 8
  store ptr %result.i93.i2045, ptr %167, align 8
  store ptr %2610, ptr %1465, align 8
  store i32 9, ptr %168, align 4
  store i32 0, ptr %1466, align 4
  %2611 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6)
  %2612 = icmp sgt i32 %2575, 0
  br i1 %2612, label %.lr.ph.i2950, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3053.critedge

.lr.ph.i2950:                                     ; preds = %._crit_edge3.1.i618
  %invariant.gep.i2951 = getelementptr i8, ptr %2553, i64 120
  %offset_tbl.i.i24.i2953 = load ptr, ptr %offset_tbl_ptr.i.i20.i1999, align 8
  %hash_coef.i.i22.i2955 = load i64, ptr %hash_coef_ptr.i.i18.i1997, align 4
  %product.i.i.i25.i2956 = mul i64 %hash_coef.i.i22.i2955, -5261542750394134544
  %shifted.i.i.i26.i2957 = lshr i64 %product.i.i.i25.i2956, 32
  %xored.i.i.i27.i2958 = xor i64 %shifted.i.i.i26.i2957, %product.i.i.i25.i2956
  %tbl_size.i.i23.i2960 = load i64, ptr %tbl_size_ptr.i.i19.i1998, align 4
  %hash.i.i.i28.i2961 = and i64 %xored.i.i.i27.i2958, %tbl_size.i.i23.i2960
  %offset_ptr.i.i29.i2962 = getelementptr i32, ptr %offset_tbl.i.i24.i2953, i64 %hash.i.i.i28.i2961
  %offset.i.i30.i2963 = load i32, ptr %offset_ptr.i.i29.i2962, align 4
  %2613 = insertvalue { ptr, ptr, ptr, i32 } %2558, i32 %offset.i.i30.i2963, 3
  %2614 = sext i32 %offset.i.i30.i2963 to i64
  %gep.i2978 = getelementptr ptr, ptr %invariant.gep.i2951, i64 %2614
  %2615 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %2616

2616:                                             ; preds = %._crit_edge1.i2982, %.lr.ph.i2950
  %.reg2mem13.079.i2979 = phi i32 [ 0, %.lr.ph.i2950 ], [ %2633, %._crit_edge1.i2982 ]
  store ptr @_parameterization_Ptri32, ptr %5, align 8
  %2617 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %5)
  %2618 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %2553)
  %2619 = load ptr, ptr %gep.i2978, align 8
  store ptr @i32_typ, ptr %6, align 8
  %2620 = call ptr %2619({ ptr, ptr, ptr, i32 } %2613, ptr nonnull %6)
  %2621 = call { ptr, i160 } %2620({ ptr, ptr, ptr, i32 } %2613, { ptr, ptr, ptr, i32 } %2613, ptr nonnull %5, i32 %.reg2mem13.079.i2979)
  %.fca.0.extract11.i2980 = extractvalue { ptr, i160 } %2621, 0
  %2622 = icmp ne ptr %.fca.0.extract11.i2980, @nil_typ
  %2623 = icmp ne ptr %.fca.0.extract11.i2980, null
  %.not17.i2981 = and i1 %2622, %2623
  br i1 %.not17.i2981, label %2624, label %._crit_edge1.i2982

2624:                                             ; preds = %2616
  %.fca.1.extract13.i2983 = extractvalue { ptr, i160 } %2621, 1
  %.sroa.375.8.extract.trunc.i2984 = trunc i160 %.fca.1.extract13.i2983 to i64
  %2625 = inttoptr i64 %.sroa.375.8.extract.trunc.i2984 to ptr
  %.sroa.576.8.extract.shift.i2985 = lshr i160 %.fca.1.extract13.i2983, 64
  %.sroa.576.8.extract.trunc.i2986 = trunc i160 %.sroa.576.8.extract.shift.i2985 to i64
  %2626 = inttoptr i64 %.sroa.576.8.extract.trunc.i2986 to ptr
  %hash_coef_ptr.i.i33.i2987 = getelementptr i8, ptr %.fca.0.extract11.i2980, i64 8
  %tbl_size_ptr.i.i34.i2988 = getelementptr i8, ptr %.fca.0.extract11.i2980, i64 16
  %offset_tbl_ptr.i.i35.i2989 = getelementptr i8, ptr %.fca.0.extract11.i2980, i64 40
  %hash_coef.i.i36.i2990 = load i64, ptr %hash_coef_ptr.i.i33.i2987, align 4
  %tbl_size.i.i37.i2991 = load i64, ptr %tbl_size_ptr.i.i34.i2988, align 4
  %offset_tbl.i.i38.i2992 = load ptr, ptr %offset_tbl_ptr.i.i35.i2989, align 8
  %product.i.i.i39.i2993 = mul i64 %hash_coef.i.i36.i2990, 4015701072841558310
  %shifted.i.i.i40.i2994 = lshr i64 %product.i.i.i39.i2993, 32
  %xored.i.i.i41.i2995 = xor i64 %shifted.i.i.i40.i2994, %product.i.i.i39.i2993
  %hash.i.i.i42.i2996 = and i64 %xored.i.i.i41.i2995, %tbl_size.i.i37.i2991
  %offset_ptr.i.i43.i2997 = getelementptr i32, ptr %offset_tbl.i.i38.i2992, i64 %hash.i.i.i42.i2996
  %offset.i.i58.i2998 = load i32, ptr %offset_ptr.i.i43.i2997, align 4
  %2627 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i2980, 0
  %2628 = insertvalue { ptr, ptr, ptr, i32 } %2627, ptr %2625, 1
  %2629 = insertvalue { ptr, ptr, ptr, i32 } %2628, ptr %2626, 2
  %2630 = insertvalue { ptr, ptr, ptr, i32 } %2629, i32 %offset.i.i58.i2998, 3
  %2631 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2632 = call { ptr, i160 } @HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %1498, { ptr, ptr, ptr, i32 } poison, ptr nonnull poison, { ptr, ptr, ptr, i32 } %2630)
  br label %._crit_edge1.i2982

._crit_edge1.i2982:                               ; preds = %2624, %2616
  %2633 = add nuw nsw i32 %.reg2mem13.079.i2979, 1
  %2634 = icmp slt i32 %2633, %2575
  br i1 %2634, label %2616, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3000

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3000: ; preds = %._crit_edge1.i2982
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6)
  %2635 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %invariant.gep.i3004 = getelementptr i8, ptr %2561, i64 120
  %offset_tbl.i.i24.i3006 = load ptr, ptr %offset_tbl_ptr.i.i48.i2016, align 8
  %hash_coef.i.i22.i3008 = load i64, ptr %hash_coef_ptr.i.i46.i2014, align 4
  %product.i.i.i25.i3009 = mul i64 %hash_coef.i.i22.i3008, -5261542750394134544
  %shifted.i.i.i26.i3010 = lshr i64 %product.i.i.i25.i3009, 32
  %xored.i.i.i27.i3011 = xor i64 %shifted.i.i.i26.i3010, %product.i.i.i25.i3009
  %tbl_size.i.i23.i3013 = load i64, ptr %tbl_size_ptr.i.i47.i2015, align 4
  %hash.i.i.i28.i3014 = and i64 %xored.i.i.i27.i3011, %tbl_size.i.i23.i3013
  %offset_ptr.i.i29.i3015 = getelementptr i32, ptr %offset_tbl.i.i24.i3006, i64 %hash.i.i.i28.i3014
  %offset.i.i30.i3016 = load i32, ptr %offset_ptr.i.i29.i3015, align 4
  %2636 = insertvalue { ptr, ptr, ptr, i32 } %2566, i32 %offset.i.i30.i3016, 3
  %2637 = sext i32 %offset.i.i30.i3016 to i64
  %gep.i3031 = getelementptr ptr, ptr %invariant.gep.i3004, i64 %2637
  %2638 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %2639

2639:                                             ; preds = %._crit_edge1.i3035, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3000
  %.reg2mem13.079.i3032 = phi i32 [ 0, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3000 ], [ %2656, %._crit_edge1.i3035 ]
  store ptr @_parameterization_Ptri32, ptr %3, align 8
  %2640 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %3)
  %2641 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %2561)
  %2642 = load ptr, ptr %gep.i3031, align 8
  store ptr @i32_typ, ptr %4, align 8
  %2643 = call ptr %2642({ ptr, ptr, ptr, i32 } %2636, ptr nonnull %4)
  %2644 = call { ptr, i160 } %2643({ ptr, ptr, ptr, i32 } %2636, { ptr, ptr, ptr, i32 } %2636, ptr nonnull %3, i32 %.reg2mem13.079.i3032)
  %.fca.0.extract11.i3033 = extractvalue { ptr, i160 } %2644, 0
  %2645 = icmp ne ptr %.fca.0.extract11.i3033, @nil_typ
  %2646 = icmp ne ptr %.fca.0.extract11.i3033, null
  %.not17.i3034 = and i1 %2645, %2646
  br i1 %.not17.i3034, label %2647, label %._crit_edge1.i3035

2647:                                             ; preds = %2639
  %.fca.1.extract13.i3036 = extractvalue { ptr, i160 } %2644, 1
  %.sroa.375.8.extract.trunc.i3037 = trunc i160 %.fca.1.extract13.i3036 to i64
  %2648 = inttoptr i64 %.sroa.375.8.extract.trunc.i3037 to ptr
  %.sroa.576.8.extract.shift.i3038 = lshr i160 %.fca.1.extract13.i3036, 64
  %.sroa.576.8.extract.trunc.i3039 = trunc i160 %.sroa.576.8.extract.shift.i3038 to i64
  %2649 = inttoptr i64 %.sroa.576.8.extract.trunc.i3039 to ptr
  %hash_coef_ptr.i.i33.i3040 = getelementptr i8, ptr %.fca.0.extract11.i3033, i64 8
  %tbl_size_ptr.i.i34.i3041 = getelementptr i8, ptr %.fca.0.extract11.i3033, i64 16
  %offset_tbl_ptr.i.i35.i3042 = getelementptr i8, ptr %.fca.0.extract11.i3033, i64 40
  %hash_coef.i.i36.i3043 = load i64, ptr %hash_coef_ptr.i.i33.i3040, align 4
  %tbl_size.i.i37.i3044 = load i64, ptr %tbl_size_ptr.i.i34.i3041, align 4
  %offset_tbl.i.i38.i3045 = load ptr, ptr %offset_tbl_ptr.i.i35.i3042, align 8
  %product.i.i.i39.i3046 = mul i64 %hash_coef.i.i36.i3043, 4015701072841558310
  %shifted.i.i.i40.i3047 = lshr i64 %product.i.i.i39.i3046, 32
  %xored.i.i.i41.i3048 = xor i64 %shifted.i.i.i40.i3047, %product.i.i.i39.i3046
  %hash.i.i.i42.i3049 = and i64 %xored.i.i.i41.i3048, %tbl_size.i.i37.i3044
  %offset_ptr.i.i43.i3050 = getelementptr i32, ptr %offset_tbl.i.i38.i3045, i64 %hash.i.i.i42.i3049
  %offset.i.i58.i3051 = load i32, ptr %offset_ptr.i.i43.i3050, align 4
  %2650 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i3033, 0
  %2651 = insertvalue { ptr, ptr, ptr, i32 } %2650, ptr %2648, 1
  %2652 = insertvalue { ptr, ptr, ptr, i32 } %2651, ptr %2649, 2
  %2653 = insertvalue { ptr, ptr, ptr, i32 } %2652, i32 %offset.i.i58.i3051, 3
  %2654 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2655 = call { ptr, i160 } @HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %1498, { ptr, ptr, ptr, i32 } poison, ptr nonnull poison, { ptr, ptr, ptr, i32 } %2653)
  br label %._crit_edge1.i3035

._crit_edge1.i3035:                               ; preds = %2647, %2639
  %2656 = add nuw nsw i32 %.reg2mem13.079.i3032, 1
  %2657 = icmp slt i32 %2656, %2575
  br i1 %2657, label %2639, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3053

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3053.critedge: ; preds = %._crit_edge3.1.i618
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6)
  %2658 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  br label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3053

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3053: ; preds = %._crit_edge1.i3035, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3053.critedge
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %27)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %28)
  br label %HashMap_insert_keyK_valueV.exit703

HashMap_insert_keyK_valueV.exit703:               ; preds = %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit1978.thread, %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit.thread2168, %.thread525.i678, %.thread528.i636, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3053
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %109)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %110)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %111)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %112)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %113)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %114)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %115)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %116)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %117)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %118)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %119)
  %2659 = add nuw nsw i32 %.reg2mem75.0241, 1
  %2660 = icmp slt i32 %2659, %0
  br i1 %2660, label %._crit_edge, label %._crit_edge1

._crit_edge1:                                     ; preds = %HashMap_insert_keyK_valueV.exit703
  %2661 = call i64 @clock()
  %.sroa.027.0.insert.ext = zext i32 %286 to i160
  %2662 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.027.0.insert.ext, 1
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0271.i)
  call void @llvm.lifetime.start.p0(i64 20, ptr nonnull %.sroa.1.i)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i)
  call void @llvm.lifetime.start.p0(i64 20, ptr nonnull %.sroa.2.i)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %105)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %106)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0123.i)
  call void @llvm.lifetime.start.p0(i64 20, ptr nonnull %.sroa.2124.i)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0115.i)
  call void @llvm.lifetime.start.p0(i64 20, ptr nonnull %.sroa.2116.i)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %107)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %108)
  %2663 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2664 = load ptr, ptr %141, align 8
  %2665 = call i32 %2664({ ptr, i160 } %2662)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %2666 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2667 = load ptr, ptr %153, align 8
  %2668 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2667, 0
  %2669 = load ptr, ptr %154, align 8
  %2670 = insertvalue { ptr, ptr, ptr, i32 } %2668, ptr %2669, 1
  %2671 = load ptr, ptr %1464, align 8
  %2672 = insertvalue { ptr, ptr, ptr, i32 } %2670, ptr %2671, 2
  %2673 = load i32, ptr %155, align 4
  %2674 = insertvalue { ptr, ptr, ptr, i32 } %2672, i32 %2673, 3
  %hash_coef_ptr.i.i10.i2121 = getelementptr i8, ptr %2667, i64 8
  %tbl_size_ptr.i.i11.i2122 = getelementptr i8, ptr %2667, i64 16
  %offset_tbl_ptr.i.i12.i2123 = getelementptr i8, ptr %2667, i64 40
  %hash_coef.i.i13.i2124 = load i64, ptr %hash_coef_ptr.i.i10.i2121, align 4
  %tbl_size.i.i14.i2125 = load i64, ptr %tbl_size_ptr.i.i11.i2122, align 4
  %offset_tbl.i.i15.i2126 = load ptr, ptr %offset_tbl_ptr.i.i12.i2123, align 8
  %product.i.i.i16.i2127 = mul i64 %hash_coef.i.i13.i2124, -5261542750394134544
  %shifted.i.i.i17.i2128 = lshr i64 %product.i.i.i16.i2127, 32
  %xored.i.i.i18.i2129 = xor i64 %shifted.i.i.i17.i2128, %product.i.i.i16.i2127
  %hash.i.i.i19.i2130 = and i64 %xored.i.i.i18.i2129, %tbl_size.i.i14.i2125
  %offset_ptr.i.i20.i2131 = getelementptr i32, ptr %offset_tbl.i.i15.i2126, i64 %hash.i.i.i19.i2130
  %offset.i.i21.i2132 = load i32, ptr %offset_ptr.i.i20.i2131, align 4
  %eq.i.i2133 = icmp eq i32 %2673, %offset.i.i21.i2132
  call void @llvm.assume(i1 %eq.i.i2133) #30
  %2675 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2676 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2667)
  %2677 = sext i32 %2673 to i64
  %2678 = getelementptr ptr, ptr %2667, i64 %2677
  %2679 = getelementptr i8, ptr %2678, i64 64
  %2680 = load ptr, ptr %2679, align 8
  %2681 = call ptr %2680({ ptr, ptr, ptr, i32 } %2674, ptr nonnull %2)
  %2682 = call i32 %2681({ ptr, ptr, ptr, i32 } %2674, { ptr, ptr, ptr, i32 } %2674, ptr nonnull %2)
  %2683 = add i32 %2682, -1
  %2684 = and i32 %2683, %2665
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %2685 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2686 = load ptr, ptr %153, align 8
  %2687 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2686, 0
  %2688 = load ptr, ptr %154, align 8
  %2689 = insertvalue { ptr, ptr, ptr, i32 } %2687, ptr %2688, 1
  %2690 = load ptr, ptr %1464, align 8
  %2691 = insertvalue { ptr, ptr, ptr, i32 } %2689, ptr %2690, 2
  %2692 = load i32, ptr %155, align 4
  %2693 = insertvalue { ptr, ptr, ptr, i32 } %2691, i32 %2692, 3
  %hash_coef_ptr.i.i130.i = getelementptr i8, ptr %2686, i64 8
  %tbl_size_ptr.i.i131.i = getelementptr i8, ptr %2686, i64 16
  %offset_tbl_ptr.i.i132.i = getelementptr i8, ptr %2686, i64 40
  %hash_coef.i.i133.i = load i64, ptr %hash_coef_ptr.i.i130.i, align 4
  %tbl_size.i.i134.i = load i64, ptr %tbl_size_ptr.i.i131.i, align 4
  %offset_tbl.i.i135.i = load ptr, ptr %offset_tbl_ptr.i.i132.i, align 8
  %product.i.i.i136.i = mul i64 %hash_coef.i.i133.i, -5261542750394134544
  %shifted.i.i.i137.i = lshr i64 %product.i.i.i136.i, 32
  %xored.i.i.i138.i = xor i64 %shifted.i.i.i137.i, %product.i.i.i136.i
  %hash.i.i.i139.i = and i64 %xored.i.i.i138.i, %tbl_size.i.i134.i
  %offset_ptr.i.i140.i = getelementptr i32, ptr %offset_tbl.i.i135.i, i64 %hash.i.i.i139.i
  %offset.i.i141.i = load i32, ptr %offset_ptr.i.i140.i, align 4
  %eq.i.i718 = icmp eq i32 %2692, %offset.i.i141.i
  call void @llvm.assume(i1 %eq.i.i718) #30
  store ptr @_parameterization_Ptri32, ptr %107, align 8
  %2694 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %107)
  %2695 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2686)
  %2696 = sext i32 %2692 to i64
  %2697 = getelementptr ptr, ptr %2686, i64 %2696
  %2698 = getelementptr i8, ptr %2697, i64 120
  %2699 = load ptr, ptr %2698, align 8
  store ptr @i32_typ, ptr %108, align 8
  %2700 = call ptr %2699({ ptr, ptr, ptr, i32 } %2693, ptr nonnull %108)
  %2701 = call { ptr, i160 } %2700({ ptr, ptr, ptr, i32 } %2693, { ptr, ptr, ptr, i32 } %2693, ptr nonnull %107, i32 %2684)
  %.fca.0.extract.i719 = extractvalue { ptr, i160 } %2701, 0
  %2702 = icmp ne ptr %.fca.0.extract.i719, @nil_typ
  %2703 = icmp ne ptr %.fca.0.extract.i719, null
  %.not126.i = and i1 %2702, %2703
  br i1 %.not126.i, label %2704, label %.critedge.i720

2704:                                             ; preds = %._crit_edge1
  %.fca.1.extract.i733 = extractvalue { ptr, i160 } %2701, 1
  %.sroa.5.8.extract.trunc.i734 = trunc i160 %.fca.1.extract.i733 to i64
  %2705 = inttoptr i64 %.sroa.5.8.extract.trunc.i734 to ptr
  %.sroa.9.8.extract.shift.i = lshr i160 %.fca.1.extract.i733, 64
  %.sroa.9.8.extract.trunc.i = trunc i160 %.sroa.9.8.extract.shift.i to i64
  %2706 = inttoptr i64 %.sroa.9.8.extract.trunc.i to ptr
  %hash_coef_ptr.i.i144.i = getelementptr i8, ptr %.fca.0.extract.i719, i64 8
  %tbl_size_ptr.i.i145.i = getelementptr i8, ptr %.fca.0.extract.i719, i64 16
  %offset_tbl_ptr.i.i146.i = getelementptr i8, ptr %.fca.0.extract.i719, i64 40
  %hash_coef.i.i147.i = load i64, ptr %hash_coef_ptr.i.i144.i, align 4
  %tbl_size.i.i148.i = load i64, ptr %tbl_size_ptr.i.i145.i, align 4
  %offset_tbl.i.i149.i = load ptr, ptr %offset_tbl_ptr.i.i146.i, align 8
  %product.i.i.i150.i = mul i64 %hash_coef.i.i147.i, 4015701072841558310
  %shifted.i.i.i151.i = lshr i64 %product.i.i.i150.i, 32
  %xored.i.i.i152.i = xor i64 %shifted.i.i.i151.i, %product.i.i.i150.i
  %hash.i.i.i153.i = and i64 %xored.i.i.i152.i, %tbl_size.i.i148.i
  %offset_ptr.i.i154.i = getelementptr i32, ptr %offset_tbl.i.i149.i, i64 %hash.i.i.i153.i
  %offset.i.i155.i = load i32, ptr %offset_ptr.i.i154.i, align 4
  %2707 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract.i719, 0
  %2708 = insertvalue { ptr, ptr, ptr, i32 } %2707, ptr %2705, 1
  %2709 = insertvalue { ptr, ptr, ptr, i32 } %2708, ptr %2706, 2
  %2710 = insertvalue { ptr, ptr, ptr, i32 } %2709, i32 %offset.i.i155.i, 3
  %2711 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2712 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2713 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract.i719)
  %2714 = sext i32 %offset.i.i155.i to i64
  %2715 = getelementptr ptr, ptr %.fca.0.extract.i719, i64 %2714
  %2716 = getelementptr i8, ptr %2715, i64 64
  %2717 = load ptr, ptr %2716, align 8
  %2718 = call ptr %2717({ ptr, ptr, ptr, i32 } %2710, ptr nonnull %2)
  %2719 = call i32 %2718({ ptr, ptr, ptr, i32 } %2710, { ptr, ptr, ptr, i32 } %2710, ptr nonnull %2)
  %2720 = icmp eq i32 %2719, %2665
  %2721 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2722 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2723 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract.i719)
  %2724 = getelementptr i8, ptr %2715, i64 48
  %2725 = load ptr, ptr %2724, align 8
  %2726 = call ptr %2725({ ptr, ptr, ptr, i32 } %2710, ptr nonnull %2)
  %2727 = call { ptr, i160 } %2726({ ptr, ptr, ptr, i32 } %2710, { ptr, ptr, ptr, i32 } %2710, ptr nonnull %2)
  %2728 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2729 = load ptr, ptr %142, align 8
  %2730 = call i1 %2729({ ptr, i160 } %2727, { ptr, i160 } %2662)
  %2731 = and i1 %2720, %2730
  br i1 %2731, label %HashMap_get_keyK.exit, label %.critedge.i720

.critedge.i720:                                   ; preds = %2704, %._crit_edge1
  %2732 = add i32 %2665, 2127912214
  %2733 = shl i32 %2665, 12
  %2734 = add i32 %2732, %2733
  %2735 = ashr i32 %2734, 19
  %2736 = xor i32 %2734, %2735
  %2737 = xor i32 %2736, -949894596
  %2738 = add i32 %2737, 374761393
  %2739 = shl i32 %2737, 5
  %2740 = add i32 %2738, %2739
  %2741 = add i32 %2740, -744332180
  %2742 = shl i32 %2740, 9
  %2743 = xor i32 %2741, %2742
  %2744 = add i32 %2743, -42973499
  %2745 = shl i32 %2743, 3
  %2746 = add i32 %2744, %2745
  %2747 = ashr i32 %2746, 16
  %2748 = xor i32 %2746, %2747
  %2749 = xor i32 %2748, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %2750 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2751 = load ptr, ptr %166, align 8
  %2752 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2751, 0
  %2753 = load ptr, ptr %167, align 8
  %2754 = insertvalue { ptr, ptr, ptr, i32 } %2752, ptr %2753, 1
  %2755 = load ptr, ptr %1465, align 8
  %2756 = insertvalue { ptr, ptr, ptr, i32 } %2754, ptr %2755, 2
  %2757 = load i32, ptr %168, align 4
  %2758 = insertvalue { ptr, ptr, ptr, i32 } %2756, i32 %2757, 3
  %hash_coef_ptr.i.i10.i2152 = getelementptr i8, ptr %2751, i64 8
  %tbl_size_ptr.i.i11.i2153 = getelementptr i8, ptr %2751, i64 16
  %offset_tbl_ptr.i.i12.i2154 = getelementptr i8, ptr %2751, i64 40
  %hash_coef.i.i13.i2155 = load i64, ptr %hash_coef_ptr.i.i10.i2152, align 4
  %tbl_size.i.i14.i2156 = load i64, ptr %tbl_size_ptr.i.i11.i2153, align 4
  %offset_tbl.i.i15.i2157 = load ptr, ptr %offset_tbl_ptr.i.i12.i2154, align 8
  %product.i.i.i16.i2158 = mul i64 %hash_coef.i.i13.i2155, -5261542750394134544
  %shifted.i.i.i17.i2159 = lshr i64 %product.i.i.i16.i2158, 32
  %xored.i.i.i18.i2160 = xor i64 %shifted.i.i.i17.i2159, %product.i.i.i16.i2158
  %hash.i.i.i19.i2161 = and i64 %xored.i.i.i18.i2160, %tbl_size.i.i14.i2156
  %offset_ptr.i.i20.i2162 = getelementptr i32, ptr %offset_tbl.i.i15.i2157, i64 %hash.i.i.i19.i2161
  %offset.i.i21.i2163 = load i32, ptr %offset_ptr.i.i20.i2162, align 4
  %eq.i.i2164 = icmp eq i32 %2757, %offset.i.i21.i2163
  call void @llvm.assume(i1 %eq.i.i2164) #30
  %2759 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2760 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2751)
  %2761 = sext i32 %2757 to i64
  %2762 = getelementptr ptr, ptr %2751, i64 %2761
  %2763 = getelementptr i8, ptr %2762, i64 64
  %2764 = load ptr, ptr %2763, align 8
  %2765 = call ptr %2764({ ptr, ptr, ptr, i32 } %2758, ptr nonnull %2)
  %2766 = call i32 %2765({ ptr, ptr, ptr, i32 } %2758, { ptr, ptr, ptr, i32 } %2758, ptr nonnull %2)
  %2767 = add i32 %2766, -1
  %2768 = and i32 %2767, %2749
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %2769 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2770 = load ptr, ptr %166, align 8
  %2771 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2770, 0
  %2772 = load ptr, ptr %167, align 8
  %2773 = insertvalue { ptr, ptr, ptr, i32 } %2771, ptr %2772, 1
  %2774 = load ptr, ptr %1465, align 8
  %2775 = insertvalue { ptr, ptr, ptr, i32 } %2773, ptr %2774, 2
  %2776 = load i32, ptr %168, align 4
  %2777 = insertvalue { ptr, ptr, ptr, i32 } %2775, i32 %2776, 3
  %hash_coef_ptr.i.i158.i = getelementptr i8, ptr %2770, i64 8
  %tbl_size_ptr.i.i159.i = getelementptr i8, ptr %2770, i64 16
  %offset_tbl_ptr.i.i160.i = getelementptr i8, ptr %2770, i64 40
  %hash_coef.i.i161.i = load i64, ptr %hash_coef_ptr.i.i158.i, align 4
  %tbl_size.i.i162.i = load i64, ptr %tbl_size_ptr.i.i159.i, align 4
  %offset_tbl.i.i163.i = load ptr, ptr %offset_tbl_ptr.i.i160.i, align 8
  %product.i.i.i164.i = mul i64 %hash_coef.i.i161.i, -5261542750394134544
  %shifted.i.i.i165.i = lshr i64 %product.i.i.i164.i, 32
  %xored.i.i.i166.i = xor i64 %shifted.i.i.i165.i, %product.i.i.i164.i
  %hash.i.i.i167.i = and i64 %xored.i.i.i166.i, %tbl_size.i.i162.i
  %offset_ptr.i.i168.i = getelementptr i32, ptr %offset_tbl.i.i163.i, i64 %hash.i.i.i167.i
  %offset.i.i169.i = load i32, ptr %offset_ptr.i.i168.i, align 4
  %eq.i172.i = icmp eq i32 %2776, %offset.i.i169.i
  call void @llvm.assume(i1 %eq.i172.i) #30
  store ptr @_parameterization_Ptri32, ptr %105, align 8
  %2778 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %105)
  %2779 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2770)
  %2780 = sext i32 %2776 to i64
  %2781 = getelementptr ptr, ptr %2770, i64 %2780
  %2782 = getelementptr i8, ptr %2781, i64 120
  %2783 = load ptr, ptr %2782, align 8
  store ptr @i32_typ, ptr %106, align 8
  %2784 = call ptr %2783({ ptr, ptr, ptr, i32 } %2777, ptr nonnull %106)
  %2785 = call { ptr, i160 } %2784({ ptr, ptr, ptr, i32 } %2777, { ptr, ptr, ptr, i32 } %2777, ptr nonnull %105, i32 %2768)
  %.fca.0.extract57.i = extractvalue { ptr, i160 } %2785, 0
  %2786 = icmp ne ptr %.fca.0.extract57.i, @nil_typ
  %2787 = icmp ne ptr %.fca.0.extract57.i, null
  %.not128.i = and i1 %2786, %2787
  br i1 %.not128.i, label %2788, label %HashMap_get_keyK.exit.thread

2788:                                             ; preds = %.critedge.i720
  %.fca.1.extract59.i = extractvalue { ptr, i160 } %2785, 1
  %.sroa.6.8.extract.trunc.i = trunc i160 %.fca.1.extract59.i to i64
  %2789 = inttoptr i64 %.sroa.6.8.extract.trunc.i to ptr
  %.sroa.11.8.extract.shift.i = lshr i160 %.fca.1.extract59.i, 64
  %.sroa.11.8.extract.trunc.i = trunc i160 %.sroa.11.8.extract.shift.i to i64
  %2790 = inttoptr i64 %.sroa.11.8.extract.trunc.i to ptr
  %hash_coef_ptr.i.i174.i721 = getelementptr i8, ptr %.fca.0.extract57.i, i64 8
  %tbl_size_ptr.i.i175.i722 = getelementptr i8, ptr %.fca.0.extract57.i, i64 16
  %offset_tbl_ptr.i.i176.i723 = getelementptr i8, ptr %.fca.0.extract57.i, i64 40
  %hash_coef.i.i177.i724 = load i64, ptr %hash_coef_ptr.i.i174.i721, align 4
  %tbl_size.i.i178.i725 = load i64, ptr %tbl_size_ptr.i.i175.i722, align 4
  %offset_tbl.i.i179.i726 = load ptr, ptr %offset_tbl_ptr.i.i176.i723, align 8
  %product.i.i.i180.i727 = mul i64 %hash_coef.i.i177.i724, 4015701072841558310
  %shifted.i.i.i181.i728 = lshr i64 %product.i.i.i180.i727, 32
  %xored.i.i.i182.i729 = xor i64 %shifted.i.i.i181.i728, %product.i.i.i180.i727
  %hash.i.i.i183.i730 = and i64 %xored.i.i.i182.i729, %tbl_size.i.i178.i725
  %offset_ptr.i.i184.i731 = getelementptr i32, ptr %offset_tbl.i.i179.i726, i64 %hash.i.i.i183.i730
  %offset.i.i185.i732 = load i32, ptr %offset_ptr.i.i184.i731, align 4
  %2791 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract57.i, 0
  %2792 = insertvalue { ptr, ptr, ptr, i32 } %2791, ptr %2789, 1
  %2793 = insertvalue { ptr, ptr, ptr, i32 } %2792, ptr %2790, 2
  %2794 = insertvalue { ptr, ptr, ptr, i32 } %2793, i32 %offset.i.i185.i732, 3
  %2795 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2796 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2797 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract57.i)
  %2798 = sext i32 %offset.i.i185.i732 to i64
  %2799 = getelementptr ptr, ptr %.fca.0.extract57.i, i64 %2798
  %2800 = getelementptr i8, ptr %2799, i64 64
  %2801 = load ptr, ptr %2800, align 8
  %2802 = call ptr %2801({ ptr, ptr, ptr, i32 } %2794, ptr nonnull %2)
  %2803 = call i32 %2802({ ptr, ptr, ptr, i32 } %2794, { ptr, ptr, ptr, i32 } %2794, ptr nonnull %2)
  %2804 = icmp eq i32 %2803, %2665
  %2805 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2806 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2807 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract57.i)
  %2808 = getelementptr i8, ptr %2799, i64 48
  %2809 = load ptr, ptr %2808, align 8
  %2810 = call ptr %2809({ ptr, ptr, ptr, i32 } %2794, ptr nonnull %2)
  %2811 = call { ptr, i160 } %2810({ ptr, ptr, ptr, i32 } %2794, { ptr, ptr, ptr, i32 } %2794, ptr nonnull %2)
  %2812 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2813 = load ptr, ptr %142, align 8
  %2814 = call i1 %2813({ ptr, i160 } %2811, { ptr, i160 } %2662)
  %2815 = and i1 %2804, %2814
  br i1 %2815, label %HashMap_get_keyK.exit, label %HashMap_get_keyK.exit.thread

HashMap_get_keyK.exit.thread:                     ; preds = %2788, %.critedge.i720
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0271.i)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.1.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %105)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %106)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0123.i)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2124.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0115.i)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2116.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %107)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %108)
  br label %2828

HashMap_get_keyK.exit:                            ; preds = %2704, %2788
  %.pre-phi313.i = phi i64 [ %2714, %2704 ], [ %2798, %2788 ]
  %.pre-phi312.i = phi { ptr, ptr, ptr, i32 } [ %2710, %2704 ], [ %2794, %2788 ]
  %.reg2mem65.0.sroa.phi290.sroa.speculated.i = phi ptr [ %.fca.0.extract.i719, %2704 ], [ %.fca.0.extract57.i, %2788 ]
  %.reg2mem59.0.sroa.phi120289.i = phi ptr [ %.sroa.1.i, %2704 ], [ %.sroa.2124.i, %2788 ]
  %.reg2mem59.0.sroa.phi117288.i = phi ptr [ %.sroa.0271.i, %2704 ], [ %.sroa.0123.i, %2788 ]
  %.reg2mem57.0.sroa.phi94287.i = phi ptr [ %.sroa.2.i, %2704 ], [ %.sroa.2116.i, %2788 ]
  %.reg2mem57.0.sroa.phi91286.i = phi ptr [ %.sroa.0.i, %2704 ], [ %.sroa.0115.i, %2788 ]
  %2816 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2817 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2818 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.reg2mem65.0.sroa.phi290.sroa.speculated.i)
  %2819 = getelementptr ptr, ptr %.reg2mem65.0.sroa.phi290.sroa.speculated.i, i64 %.pre-phi313.i
  %2820 = getelementptr i8, ptr %2819, i64 56
  %2821 = load ptr, ptr %2820, align 8
  %2822 = call ptr %2821({ ptr, ptr, ptr, i32 } %.pre-phi312.i, ptr nonnull %2)
  %2823 = call { ptr, i160 } %2822({ ptr, ptr, ptr, i32 } %.pre-phi312.i, { ptr, ptr, ptr, i32 } %.pre-phi312.i, ptr nonnull %2)
  %.fca.0.extract97.i = extractvalue { ptr, i160 } %2823, 0
  store ptr %.fca.0.extract97.i, ptr %.reg2mem59.0.sroa.phi117288.i, align 8
  %.fca.1.extract99.i = extractvalue { ptr, i160 } %2823, 1
  store i160 %.fca.1.extract99.i, ptr %.reg2mem59.0.sroa.phi120289.i, align 8
  store ptr %.fca.0.extract97.i, ptr %.reg2mem57.0.sroa.phi91286.i, align 8
  store i160 %.fca.1.extract99.i, ptr %.reg2mem57.0.sroa.phi94287.i, align 8
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0271.i)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.1.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %105)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %106)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0123.i)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2124.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0115.i)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2116.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %107)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %108)
  %2824 = icmp ne ptr %.fca.0.extract97.i, @nil_typ
  %2825 = icmp ne ptr %.fca.0.extract97.i, null
  %.not49 = and i1 %2824, %2825
  br i1 %.not49, label %2826, label %2828

2826:                                             ; preds = %HashMap_get_keyK.exit
  %.sroa.2.8.extract.trunc = trunc i160 %.fca.1.extract99.i to i32
  %2827 = add i32 %286, 1
  %.not = icmp eq i32 %2827, %.sroa.2.8.extract.trunc
  br label %2828

2828:                                             ; preds = %HashMap_get_keyK.exit.thread, %HashMap_get_keyK.exit, %2826
  %.reg2mem71.0 = phi i1 [ %.not, %2826 ], [ false, %HashMap_get_keyK.exit ], [ false, %HashMap_get_keyK.exit.thread ]
  %2829 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2830 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2831 = load i32, ptr %1466, align 4
  %2832 = icmp eq i32 %2831, %1446
  %2833 = select i1 %2832, i1 %.reg2mem71.0, i1 false
  br label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit

IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit: ; preds = %2828, %._crit_edge240.thread
  %2834 = phi i64 [ %1447, %2828 ], [ %219, %._crit_edge240.thread ]
  %2835 = phi i32 [ %1446, %2828 ], [ 0, %._crit_edge240.thread ]
  %2836 = phi i64 [ %2661, %2828 ], [ %220, %._crit_edge240.thread ]
  %.reg2mem67.0.in = phi i1 [ %2833, %2828 ], [ %225, %._crit_edge240.thread ]
  %result.i111 = call noalias dereferenceable_or_null(14) ptr @bump_malloc_inner(i64 noundef 14, ptr nonnull @current_ptr) #29
  store <13 x i8> <i8 73, i8 110, i8 115, i8 101, i8 114, i8 116, i8 32, i8 82, i8 97, i8 110, i8 100, i8 111, i8 109>, ptr %result.i111, align 16
  %result.i112 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %2837 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %result.i112, 1
  %2838 = insertvalue { ptr, ptr, ptr, i32 } %2837, ptr undef, 2
  %2839 = insertvalue { ptr, ptr, ptr, i32 } %2838, i32 9, 3
  store ptr %result.i111, ptr %result.i112, align 8
  %2840 = getelementptr i8, ptr %result.i112, i64 8
  store i32 13, ptr %2840, align 4
  %2841 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %2842 = getelementptr i8, ptr %result.i112, i64 12
  store i32 14, ptr %2842, align 4
  %2843 = sub i64 %2836, %2834
  call void @print_benchmark_result({ ptr, ptr, ptr, i32 } %2839, i32 %0, i64 %2843)
  %result.i113 = call noalias dereferenceable_or_null(19) ptr @bump_malloc_inner(i64 noundef 19, ptr nonnull @current_ptr) #29
  store <18 x i8> <i8 32, i8 32, i8 32, i8 32, i8 86, i8 101, i8 114, i8 105, i8 102, i8 105, i8 99, i8 97, i8 116, i8 105, i8 111, i8 110, i8 58, i8 32>, ptr %result.i113, align 32
  %result.i114 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %2844 = getelementptr inbounds i8, ptr %131, i64 8
  %2845 = getelementptr inbounds i8, ptr %131, i64 24
  store ptr @String, ptr %131, align 8
  store ptr %result.i114, ptr %2844, align 8
  store i32 9, ptr %2845, align 8
  %2846 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %131)
  store ptr %result.i113, ptr %result.i114, align 8
  %2847 = getelementptr i8, ptr %result.i114, i64 8
  store i32 18, ptr %2847, align 4
  %2848 = getelementptr i8, ptr %result.i114, i64 12
  store i32 19, ptr %2848, align 4
  %2849 = load i160, ptr %2844, align 8
  %2850 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %.sroa.3.8.extract.trunc.i = trunc i160 %2849 to i64
  %2851 = inttoptr i64 %.sroa.3.8.extract.trunc.i to ptr
  %2852 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2853 = getelementptr i8, ptr %2851, i64 8
  %2854 = load i32, ptr %2853, align 4
  %2855 = add i32 %2854, 1
  %2856 = sext i32 %2855 to i64
  %result.i.i1291 = call noalias ptr @bump_malloc_inner(i64 noundef %2856, ptr nonnull @current_ptr) #29
  %2857 = load i32, ptr %2853, align 4
  %2858 = icmp sgt i32 %2857, 0
  br i1 %2858, label %.lr.ph.i1292, label %String_c_string_.exit

.lr.ph.i1292:                                     ; preds = %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit
  %2859 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %2860 = load ptr, ptr %2851, align 8
  %2861 = zext nneg i32 %2857 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i1291, ptr align 1 %2860, i64 %2861, i1 false)
  br label %String_c_string_.exit

String_c_string_.exit:                            ; preds = %.lr.ph.i1292, %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit
  %2862 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %2863 = sext i32 %2857 to i64
  %2864 = getelementptr i8, ptr %result.i.i1291, i64 %2863
  store i8 0, ptr %2864, align 1
  %puts.i = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i1291)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %result.i115 = call noalias dereferenceable_or_null(5) ptr @bump_malloc_inner(i64 noundef 5, ptr nonnull @current_ptr) #29
  %. = select i1 %.reg2mem67.0.in, <4 x i8> <i8 80, i8 65, i8 83, i8 83>, <4 x i8> <i8 70, i8 65, i8 73, i8 76>
  %.353 = select i1 %.reg2mem67.0.in, ptr %132, ptr %133
  store <4 x i8> %., ptr %result.i115, align 4
  %result.i116 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %.353.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v = select i1 %.reg2mem67.0.in, ptr %132, ptr %133
  %.353.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel = getelementptr inbounds i8, ptr %.353.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v, i64 8
  %.353.sroa.sel524.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v = select i1 %.reg2mem67.0.in, ptr %132, ptr %133
  %.353.sroa.sel524.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel = getelementptr inbounds i8, ptr %.353.sroa.sel524.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v, i64 24
  store ptr @String, ptr %.353, align 8
  store ptr %result.i116, ptr %.353.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  store i32 9, ptr %.353.sroa.sel524.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  %2865 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %.353)
  store ptr %result.i115, ptr %result.i116, align 8
  %2866 = getelementptr i8, ptr %result.i116, i64 8
  store i32 4, ptr %2866, align 4
  %2867 = getelementptr i8, ptr %result.i116, i64 12
  store i32 5, ptr %2867, align 4
  %2868 = load i160, ptr %.353.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  %2869 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %.sroa.3.8.extract.trunc.i463 = trunc i160 %2868 to i64
  %2870 = inttoptr i64 %.sroa.3.8.extract.trunc.i463 to ptr
  %2871 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2872 = getelementptr i8, ptr %2870, i64 8
  %2873 = load i32, ptr %2872, align 4
  %2874 = add i32 %2873, 1
  %2875 = sext i32 %2874 to i64
  %result.i.i1309 = call noalias ptr @bump_malloc_inner(i64 noundef %2875, ptr nonnull @current_ptr) #29
  %2876 = load i32, ptr %2872, align 4
  %2877 = icmp sgt i32 %2876, 0
  br i1 %2877, label %.lr.ph.i1310, label %String_c_string_.exit1314

.lr.ph.i1310:                                     ; preds = %String_c_string_.exit
  %2878 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %2879 = load ptr, ptr %2870, align 8
  %2880 = zext nneg i32 %2876 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i1309, ptr align 1 %2879, i64 %2880, i1 false)
  br label %String_c_string_.exit1314

String_c_string_.exit1314:                        ; preds = %.lr.ph.i1310, %String_c_string_.exit
  %2881 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %2882 = sext i32 %2876 to i64
  %2883 = getelementptr i8, ptr %result.i.i1309, i64 %2882
  store i8 0, ptr %2883, align 1
  %puts.i479 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i1309)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %result.i155 = call noalias dereferenceable_or_null(28) ptr @bump_malloc_inner(i64 noundef 28, ptr nonnull @current_ptr) #29
  store <27 x i8> <i8 32, i8 32, i8 32, i8 32, i8 40, i8 69, i8 120, i8 112, i8 101, i8 99, i8 116, i8 101, i8 100, i8 32, i8 117, i8 110, i8 105, i8 113, i8 117, i8 101, i8 32, i8 115, i8 105, i8 122, i8 101, i8 58, i8 32>, ptr %result.i155, align 32
  %result.i156 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %2884 = getelementptr inbounds i8, ptr %134, i64 8
  %2885 = getelementptr inbounds i8, ptr %134, i64 24
  store ptr @String, ptr %134, align 8
  store ptr %result.i156, ptr %2884, align 8
  store i32 9, ptr %2885, align 8
  %2886 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %134)
  store ptr %result.i155, ptr %result.i156, align 8
  %2887 = getelementptr i8, ptr %result.i156, i64 8
  store i32 27, ptr %2887, align 4
  %2888 = getelementptr i8, ptr %result.i156, i64 12
  store i32 28, ptr %2888, align 4
  %2889 = load i160, ptr %2884, align 8
  %2890 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %.sroa.3.8.extract.trunc.i483 = trunc i160 %2889 to i64
  %2891 = inttoptr i64 %.sroa.3.8.extract.trunc.i483 to ptr
  %2892 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2893 = getelementptr i8, ptr %2891, i64 8
  %2894 = load i32, ptr %2893, align 4
  %2895 = add i32 %2894, 1
  %2896 = sext i32 %2895 to i64
  %result.i.i1329 = call noalias ptr @bump_malloc_inner(i64 noundef %2896, ptr nonnull @current_ptr) #29
  %2897 = load i32, ptr %2893, align 4
  %2898 = icmp sgt i32 %2897, 0
  br i1 %2898, label %.lr.ph.i1330, label %String_c_string_.exit1334

.lr.ph.i1330:                                     ; preds = %String_c_string_.exit1314
  %2899 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %2900 = load ptr, ptr %2891, align 8
  %2901 = zext nneg i32 %2897 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i1329, ptr align 1 %2900, i64 %2901, i1 false)
  br label %String_c_string_.exit1334

String_c_string_.exit1334:                        ; preds = %.lr.ph.i1330, %String_c_string_.exit1314
  %2902 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %2903 = sext i32 %2897 to i64
  %2904 = getelementptr i8, ptr %result.i.i1329, i64 %2903
  store i8 0, ptr %2904, align 1
  %puts.i499 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i1329)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %2905 = call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i32_string, i32 %2835)
  %result.i193 = call noalias dereferenceable_or_null(2) ptr @bump_malloc_inner(i64 noundef 2, ptr nonnull @current_ptr) #29
  store <1 x i8> <i8 41>, ptr %result.i193, align 1
  %result.i194 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %2906 = getelementptr inbounds i8, ptr %135, i64 8
  %2907 = getelementptr inbounds i8, ptr %135, i64 24
  store ptr @String, ptr %135, align 8
  store ptr %result.i194, ptr %2906, align 8
  store i32 9, ptr %2907, align 8
  %2908 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %135)
  store ptr %result.i193, ptr %result.i194, align 8
  %2909 = getelementptr i8, ptr %result.i194, i64 8
  store i32 1, ptr %2909, align 4
  %2910 = getelementptr i8, ptr %result.i194, i64 12
  store i32 2, ptr %2910, align 4
  %2911 = load i160, ptr %2906, align 8
  %2912 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %.sroa.3.8.extract.trunc.i504 = trunc i160 %2911 to i64
  %2913 = inttoptr i64 %.sroa.3.8.extract.trunc.i504 to ptr
  %2914 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2915 = getelementptr i8, ptr %2913, i64 8
  %2916 = load i32, ptr %2915, align 4
  %2917 = add i32 %2916, 1
  %2918 = sext i32 %2917 to i64
  %result.i.i1349 = call noalias ptr @bump_malloc_inner(i64 noundef %2918, ptr nonnull @current_ptr) #29
  %2919 = load i32, ptr %2915, align 4
  %2920 = icmp sgt i32 %2919, 0
  br i1 %2920, label %.lr.ph.i1350, label %String_c_string_.exit1354

.lr.ph.i1350:                                     ; preds = %String_c_string_.exit1334
  %2921 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %2922 = load ptr, ptr %2913, align 8
  %2923 = zext nneg i32 %2919 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i1349, ptr align 1 %2922, i64 %2923, i1 false)
  br label %String_c_string_.exit1354

String_c_string_.exit1354:                        ; preds = %.lr.ph.i1350, %String_c_string_.exit1334
  %2924 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %2925 = sext i32 %2919 to i64
  %2926 = getelementptr i8, ptr %result.i.i1349, i64 %2925
  store i8 0, ptr %2926, align 1
  %puts.i520 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i1349)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  ret void
}

define void @benchmark_get_sequential_hit(i32 %0) local_unnamed_addr {
  %2 = alloca [0 x ptr], align 8
  %3 = alloca [1 x ptr], align 8
  %4 = alloca { ptr }, align 8
  %5 = alloca [1 x ptr], align 8
  %6 = alloca { ptr }, align 8
  %7 = alloca [1 x ptr], align 8
  %8 = alloca { ptr }, align 8
  %9 = alloca [1 x ptr], align 8
  %10 = alloca { ptr }, align 8
  %11 = alloca [1 x ptr], align 8
  %12 = alloca { ptr }, align 8
  %13 = alloca [1 x ptr], align 8
  %14 = alloca { ptr }, align 8
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  %17 = alloca [1 x ptr], align 8
  %18 = alloca { ptr }, align 8
  %19 = alloca [2 x ptr], align 8
  %20 = alloca { ptr, ptr }, align 8
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %.sroa.0680.i596 = alloca ptr, align 8
  %24 = alloca i64, align 8
  %25 = alloca [1 x ptr], align 8
  %26 = alloca { ptr }, align 8
  %27 = alloca [2 x ptr], align 8
  %28 = alloca { ptr, ptr }, align 8
  %29 = alloca i32, align 4
  %30 = alloca i32, align 4
  %31 = alloca i32, align 4
  %.sroa.0.i598 = alloca ptr, align 8
  %32 = alloca i64, align 8
  %33 = alloca { ptr, ptr, ptr, i32 }, align 8
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = alloca [1 x ptr], align 8
  %36 = alloca { ptr }, align 8
  %37 = alloca [2 x ptr], align 8
  %38 = alloca { ptr, ptr }, align 8
  %39 = alloca i32, align 4
  %40 = alloca i32, align 4
  %41 = alloca i32, align 4
  %.sroa.0680.i = alloca ptr, align 8
  %42 = alloca i64, align 8
  %43 = alloca [1 x ptr], align 8
  %44 = alloca { ptr }, align 8
  %45 = alloca [2 x ptr], align 8
  %46 = alloca { ptr, ptr }, align 8
  %47 = alloca i32, align 4
  %48 = alloca i32, align 4
  %49 = alloca i32, align 4
  %.sroa.0.i440 = alloca ptr, align 8
  %50 = alloca i64, align 8
  %51 = alloca { ptr, ptr, ptr, i32 }, align 8
  %52 = alloca { ptr, ptr, ptr, i32 }, align 8
  %53 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.sroa.0271.i = alloca ptr, align 8
  %.sroa.1.i = alloca i160, align 8
  %.sroa.0.i = alloca ptr, align 8
  %.sroa.2.i = alloca i160, align 8
  %54 = alloca [1 x ptr], align 8
  %55 = alloca { ptr }, align 8
  %.sroa.0123.i = alloca ptr, align 8
  %.sroa.2124.i = alloca i160, align 8
  %.sroa.0115.i = alloca ptr, align 8
  %.sroa.2116.i = alloca i160, align 8
  %56 = alloca [1 x ptr], align 8
  %57 = alloca { ptr }, align 8
  %58 = alloca { ptr, ptr, ptr, i32 }, align 8
  %59 = alloca [2 x ptr], align 8
  %60 = alloca { ptr, ptr }, align 8
  %61 = alloca [1 x ptr], align 8
  %62 = alloca { ptr }, align 8
  %63 = alloca { ptr, ptr, ptr, i32 }, align 8
  %64 = alloca [2 x ptr], align 8
  %65 = alloca { ptr, ptr }, align 8
  %66 = alloca { ptr, ptr, ptr, i32 }, align 8
  %67 = alloca [1 x ptr], align 8
  %68 = alloca { ptr }, align 8
  %oldProtect.i37 = alloca i32, align 4
  %oldProtect.i = alloca i32, align 4
  %69 = alloca { ptr, ptr, ptr, i32 }, align 8
  %70 = alloca { ptr, ptr, ptr, i32 }, align 8
  %71 = alloca { ptr, ptr, ptr, i32 }, align 8
  %72 = alloca { ptr, ptr, ptr, i32 }, align 8
  %result.i = tail call noalias dereferenceable_or_null(120) ptr @bump_malloc_inner(i64 noundef 120, ptr nonnull @current_ptr) #29
  store ptr @_parameterization_Ptri32, ptr %result.i, align 8
  %73 = getelementptr i8, ptr %result.i, i64 8
  store ptr @_parameterization_Ptri32, ptr %73, align 8
  %74 = getelementptr i8, ptr %result.i, i64 16
  store ptr @_parameterization_PairPtri32._Ptri32, ptr %74, align 8
  %75 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %result.i)
  %result.i34 = tail call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %oldProtect.i)
  %result.i35 = call i32 @VirtualProtect(ptr %result.i34, i64 16, i32 64, ptr nonnull %oldProtect.i) #16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %oldProtect.i)
  call void @llvm.init.trampoline(ptr %result.i34, ptr nonnull @qqaoonuean, ptr nonnull @i32_hasher)
  %ret.i = call ptr @llvm.adjust.trampoline(ptr readonly %result.i34) #31
  %76 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i34)
  %result.i36 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %oldProtect.i37)
  %result.i38 = call i32 @VirtualProtect(ptr %result.i36, i64 16, i32 64, ptr nonnull %oldProtect.i37) #16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %oldProtect.i37)
  call void @llvm.init.trampoline(ptr %result.i36, ptr nonnull @lriczewffd, ptr nonnull @i32_eq)
  %ret.i39 = call ptr @llvm.adjust.trampoline(ptr readonly %result.i36) #31
  %77 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i36)
  %78 = getelementptr i8, ptr %result.i, i64 96
  store ptr %ret.i, ptr %78, align 8
  %79 = getelementptr i8, ptr %result.i, i64 104
  store ptr %ret.i39, ptr %79, align 8
  %result.i.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %80 = getelementptr i8, ptr %result.i.i, i64 16
  store ptr @_parameterization_Nil, ptr %80, align 8
  %result.i4.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %81 = getelementptr i8, ptr %result.i4.i, i64 16
  store ptr @_parameterization_Ptri32, ptr %81, align 8
  %82 = getelementptr i8, ptr %result.i4.i, i64 8
  store ptr @_parameterization_Ptri32, ptr %82, align 8
  %83 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i4.i)
  store ptr @Entry, ptr %result.i4.i, align 8
  %84 = getelementptr i8, ptr %result.i.i, i64 8
  store ptr %result.i4.i, ptr %84, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i)
  store ptr @union_typ, ptr %result.i.i, align 8
  %result.i5.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i, ptr %result.i5.i, align 8
  %86 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i5.i)
  %87 = getelementptr i8, ptr %result.i5.i, i64 16
  store i32 8, ptr %87, align 4
  %88 = getelementptr i8, ptr %result.i5.i, i64 20
  store i32 8, ptr %88, align 4
  %result.i.i.i = call noalias dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nonnull @current_ptr) #29
  %89 = getelementptr i8, ptr %result.i5.i, i64 8
  store ptr %result.i.i.i, ptr %89, align 8
  %90 = getelementptr i8, ptr %result.i, i64 24
  store ptr @Array, ptr %90, align 8
  %91 = getelementptr i8, ptr %result.i, i64 32
  store ptr %result.i5.i, ptr %91, align 8
  %92 = getelementptr i8, ptr %result.i, i64 40
  %93 = getelementptr i8, ptr %result.i, i64 48
  store i32 9, ptr %93, align 4
  %result.i20.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %94 = getelementptr i8, ptr %result.i20.i, i64 16
  store ptr @_parameterization_Nil, ptr %94, align 8
  %result.i21.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %95 = getelementptr i8, ptr %result.i21.i, i64 16
  store ptr @_parameterization_Ptri32, ptr %95, align 8
  %96 = getelementptr i8, ptr %result.i21.i, i64 8
  store ptr @_parameterization_Ptri32, ptr %96, align 8
  %97 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i21.i)
  store ptr @Entry, ptr %result.i21.i, align 8
  %98 = getelementptr i8, ptr %result.i20.i, i64 8
  store ptr %result.i21.i, ptr %98, align 8
  %99 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i20.i)
  store ptr @union_typ, ptr %result.i20.i, align 8
  %result.i22.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i20.i, ptr %result.i22.i, align 8
  %100 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i22.i)
  %101 = getelementptr i8, ptr %result.i22.i, i64 16
  store i32 8, ptr %101, align 4
  %102 = getelementptr i8, ptr %result.i22.i, i64 20
  store i32 8, ptr %102, align 4
  %result.i.i97.i = call noalias dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nonnull @current_ptr) #29
  %103 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %104 = getelementptr i8, ptr %result.i22.i, i64 8
  store ptr %result.i.i97.i, ptr %104, align 8
  %105 = getelementptr i8, ptr %result.i, i64 56
  store ptr @Array, ptr %105, align 8
  %106 = getelementptr i8, ptr %result.i, i64 64
  store ptr %result.i22.i, ptr %106, align 8
  %107 = getelementptr i8, ptr %result.i, i64 72
  %108 = getelementptr i8, ptr %result.i, i64 80
  store i32 9, ptr %108, align 4
  %109 = getelementptr i8, ptr %result.i, i64 88
  %110 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %111 = getelementptr i8, ptr %result.i, i64 112
  store i32 100, ptr %111, align 4
  %112 = icmp sgt i32 %0, 0
  br i1 %112, label %.lr.ph.preheader, label %._crit_edge.thread

.lr.ph.preheader:                                 ; preds = %1
  %113 = getelementptr inbounds i8, ptr %66, i64 8
  %114 = getelementptr inbounds i8, ptr %66, i64 24
  %115 = getelementptr inbounds i8, ptr %66, i64 16
  %116 = getelementptr inbounds i8, ptr %63, i64 8
  %117 = getelementptr inbounds i8, ptr %63, i64 24
  %118 = getelementptr inbounds i8, ptr %63, i64 16
  %119 = getelementptr inbounds i8, ptr %64, i64 8
  %120 = getelementptr inbounds i8, ptr %65, i64 8
  %121 = getelementptr inbounds i8, ptr %58, i64 8
  %122 = getelementptr inbounds i8, ptr %58, i64 24
  %123 = getelementptr inbounds i8, ptr %58, i64 16
  %124 = getelementptr inbounds i8, ptr %59, i64 8
  %125 = getelementptr inbounds i8, ptr %60, i64 8
  %126 = getelementptr inbounds i8, ptr %52, i64 8
  %127 = getelementptr inbounds i8, ptr %52, i64 24
  %128 = getelementptr inbounds i8, ptr %52, i64 16
  %129 = getelementptr inbounds i8, ptr %53, i64 8
  %130 = getelementptr inbounds i8, ptr %53, i64 24
  %131 = getelementptr inbounds i8, ptr %53, i64 16
  %132 = getelementptr inbounds i8, ptr %51, i64 8
  %133 = getelementptr inbounds i8, ptr %51, i64 16
  %134 = getelementptr inbounds i8, ptr %51, i64 24
  %135 = getelementptr inbounds i8, ptr %45, i64 8
  %136 = getelementptr inbounds i8, ptr %46, i64 8
  %137 = getelementptr inbounds i8, ptr %37, i64 8
  %138 = getelementptr inbounds i8, ptr %38, i64 8
  %139 = getelementptr inbounds i8, ptr %33, i64 8
  %140 = getelementptr inbounds i8, ptr %33, i64 24
  %141 = getelementptr inbounds i8, ptr %33, i64 16
  %142 = getelementptr inbounds i8, ptr %34, i64 8
  %143 = getelementptr inbounds i8, ptr %34, i64 24
  %144 = getelementptr inbounds i8, ptr %34, i64 16
  %145 = getelementptr inbounds i8, ptr %27, i64 8
  %146 = getelementptr inbounds i8, ptr %28, i64 8
  %147 = getelementptr inbounds i8, ptr %19, i64 8
  %148 = getelementptr inbounds i8, ptr %20, i64 8
  %149 = getelementptr inbounds i8, ptr %15, i64 8
  %150 = getelementptr inbounds i8, ptr %15, i64 24
  %151 = getelementptr inbounds i8, ptr %15, i64 16
  %152 = getelementptr inbounds i8, ptr %16, i64 8
  %153 = getelementptr inbounds i8, ptr %16, i64 24
  %154 = getelementptr inbounds i8, ptr %16, i64 16
  %155 = insertvalue { ptr, ptr, ptr, i32 } { ptr @HashMap, ptr undef, ptr undef, i32 undef }, ptr %result.i, 1
  %156 = insertvalue { ptr, ptr, ptr, i32 } %155, ptr undef, 2
  %157 = insertvalue { ptr, ptr, ptr, i32 } %156, i32 9, 3
  br label %.lr.ph

._crit_edge.thread:                               ; preds = %1
  %158 = call i64 @clock()
  br label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit81

.lr.ph:                                           ; preds = %.lr.ph.preheader, %HashMap_insert_keyK_valueV.exit
  %.reg2mem92.0134 = phi i64 [ %1317, %HashMap_insert_keyK_valueV.exit ], [ 0, %.lr.ph.preheader ]
  %.reg2mem90.0133 = phi i32 [ %159, %HashMap_insert_keyK_valueV.exit ], [ 0, %.lr.ph.preheader ]
  %159 = add nuw nsw i32 %.reg2mem90.0133, 1
  %160 = zext nneg i32 %159 to i64
  %.sroa.030.0.insert.ext = zext nneg i32 %.reg2mem90.0133 to i160
  %161 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.030.0.insert.ext, 1
  %.sroa.027.0.insert.ext = zext nneg i32 %159 to i160
  %162 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.027.0.insert.ext, 1
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %58)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %59)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %60)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %61)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %62)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %63)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %64)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %65)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %66)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %67)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %68)
  %163 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %164 = load ptr, ptr %78, align 8
  %165 = call i32 %164({ ptr, i160 } %161)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %166 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %167 = load ptr, ptr %90, align 8
  %168 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %167, 0
  %169 = load ptr, ptr %91, align 8
  %170 = insertvalue { ptr, ptr, ptr, i32 } %168, ptr %169, 1
  %171 = load ptr, ptr %92, align 8
  %172 = insertvalue { ptr, ptr, ptr, i32 } %170, ptr %171, 2
  %173 = load i32, ptr %93, align 4
  %174 = insertvalue { ptr, ptr, ptr, i32 } %172, i32 %173, 3
  %hash_coef_ptr.i.i10.i = getelementptr i8, ptr %167, i64 8
  %tbl_size_ptr.i.i11.i = getelementptr i8, ptr %167, i64 16
  %offset_tbl_ptr.i.i12.i = getelementptr i8, ptr %167, i64 40
  %hash_coef.i.i13.i = load i64, ptr %hash_coef_ptr.i.i10.i, align 4
  %tbl_size.i.i14.i = load i64, ptr %tbl_size_ptr.i.i11.i, align 4
  %offset_tbl.i.i15.i = load ptr, ptr %offset_tbl_ptr.i.i12.i, align 8
  %product.i.i.i16.i = mul i64 %hash_coef.i.i13.i, -5261542750394134544
  %shifted.i.i.i17.i = lshr i64 %product.i.i.i16.i, 32
  %xored.i.i.i18.i = xor i64 %shifted.i.i.i17.i, %product.i.i.i16.i
  %hash.i.i.i19.i = and i64 %xored.i.i.i18.i, %tbl_size.i.i14.i
  %offset_ptr.i.i20.i = getelementptr i32, ptr %offset_tbl.i.i15.i, i64 %hash.i.i.i19.i
  %offset.i.i21.i = load i32, ptr %offset_ptr.i.i20.i, align 4
  %eq.i.i389 = icmp eq i32 %173, %offset.i.i21.i
  call void @llvm.assume(i1 %eq.i.i389) #30
  %175 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %176 = call ptr @llvm.invariant.start.p0(i64 600, ptr %167)
  %177 = sext i32 %173 to i64
  %178 = getelementptr ptr, ptr %167, i64 %177
  %179 = getelementptr i8, ptr %178, i64 64
  %180 = load ptr, ptr %179, align 8
  %181 = call ptr %180({ ptr, ptr, ptr, i32 } %174, ptr nonnull %2)
  %182 = call i32 %181({ ptr, ptr, ptr, i32 } %174, { ptr, ptr, ptr, i32 } %174, ptr nonnull %2)
  %183 = add i32 %182, -1
  %184 = and i32 %183, %165
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %185 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %186 = load ptr, ptr %90, align 8
  %187 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %186, 0
  %188 = load ptr, ptr %91, align 8
  %189 = insertvalue { ptr, ptr, ptr, i32 } %187, ptr %188, 1
  %190 = load ptr, ptr %92, align 8
  %191 = insertvalue { ptr, ptr, ptr, i32 } %189, ptr %190, 2
  %192 = load i32, ptr %93, align 4
  %193 = insertvalue { ptr, ptr, ptr, i32 } %191, i32 %192, 3
  %hash_coef_ptr.i.i160.i = getelementptr i8, ptr %186, i64 8
  %tbl_size_ptr.i.i161.i = getelementptr i8, ptr %186, i64 16
  %offset_tbl_ptr.i.i162.i = getelementptr i8, ptr %186, i64 40
  %hash_coef.i.i163.i = load i64, ptr %hash_coef_ptr.i.i160.i, align 4
  %tbl_size.i.i164.i = load i64, ptr %tbl_size_ptr.i.i161.i, align 4
  %offset_tbl.i.i165.i = load ptr, ptr %offset_tbl_ptr.i.i162.i, align 8
  %product.i.i.i166.i = mul i64 %hash_coef.i.i163.i, -5261542750394134544
  %shifted.i.i.i167.i = lshr i64 %product.i.i.i166.i, 32
  %xored.i.i.i168.i = xor i64 %shifted.i.i.i167.i, %product.i.i.i166.i
  %hash.i.i.i169.i = and i64 %xored.i.i.i168.i, %tbl_size.i.i164.i
  %offset_ptr.i.i170.i = getelementptr i32, ptr %offset_tbl.i.i165.i, i64 %hash.i.i.i169.i
  %offset.i.i171.i = load i32, ptr %offset_ptr.i.i170.i, align 4
  %eq.i.i = icmp eq i32 %192, %offset.i.i171.i
  call void @llvm.assume(i1 %eq.i.i) #30
  store ptr @_parameterization_Ptri32, ptr %67, align 8
  %194 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %67)
  %195 = call ptr @llvm.invariant.start.p0(i64 600, ptr %186)
  %196 = sext i32 %192 to i64
  %197 = getelementptr ptr, ptr %186, i64 %196
  %198 = getelementptr i8, ptr %197, i64 120
  %199 = load ptr, ptr %198, align 8
  store ptr @i32_typ, ptr %68, align 8
  %200 = call ptr %199({ ptr, ptr, ptr, i32 } %193, ptr nonnull %68)
  %201 = call { ptr, i160 } %200({ ptr, ptr, ptr, i32 } %193, { ptr, ptr, ptr, i32 } %193, ptr nonnull %67, i32 %184)
  %.fca.0.extract.i = extractvalue { ptr, i160 } %201, 0
  %202 = icmp ne ptr %.fca.0.extract.i, @nil_typ
  %203 = icmp ne ptr %.fca.0.extract.i, null
  %.not151.i = and i1 %202, %203
  br i1 %.not151.i, label %204, label %.critedge.i

204:                                              ; preds = %.lr.ph
  %.fca.1.extract.i = extractvalue { ptr, i160 } %201, 1
  %.sroa.4518.8.extract.trunc.i = trunc i160 %.fca.1.extract.i to i64
  %205 = inttoptr i64 %.sroa.4518.8.extract.trunc.i to ptr
  %.sroa.7520.8.extract.shift.i = lshr i160 %.fca.1.extract.i, 64
  %.sroa.7520.8.extract.trunc.i = trunc i160 %.sroa.7520.8.extract.shift.i to i64
  %206 = inttoptr i64 %.sroa.7520.8.extract.trunc.i to ptr
  %hash_coef_ptr.i.i174.i = getelementptr i8, ptr %.fca.0.extract.i, i64 8
  %tbl_size_ptr.i.i175.i = getelementptr i8, ptr %.fca.0.extract.i, i64 16
  %offset_tbl_ptr.i.i176.i = getelementptr i8, ptr %.fca.0.extract.i, i64 40
  %hash_coef.i.i177.i = load i64, ptr %hash_coef_ptr.i.i174.i, align 4
  %tbl_size.i.i178.i = load i64, ptr %tbl_size_ptr.i.i175.i, align 4
  %offset_tbl.i.i179.i = load ptr, ptr %offset_tbl_ptr.i.i176.i, align 8
  %product.i.i.i180.i = mul i64 %hash_coef.i.i177.i, 4015701072841558310
  %shifted.i.i.i181.i = lshr i64 %product.i.i.i180.i, 32
  %xored.i.i.i182.i = xor i64 %shifted.i.i.i181.i, %product.i.i.i180.i
  %hash.i.i.i183.i = and i64 %xored.i.i.i182.i, %tbl_size.i.i178.i
  %offset_ptr.i.i184.i = getelementptr i32, ptr %offset_tbl.i.i179.i, i64 %hash.i.i.i183.i
  %offset.i.i185.i = load i32, ptr %offset_ptr.i.i184.i, align 4
  %207 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract.i, 0
  %208 = insertvalue { ptr, ptr, ptr, i32 } %207, ptr %205, 1
  %209 = insertvalue { ptr, ptr, ptr, i32 } %208, ptr %206, 2
  %210 = insertvalue { ptr, ptr, ptr, i32 } %209, i32 %offset.i.i185.i, 3
  %211 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %212 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %213 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract.i)
  %214 = sext i32 %offset.i.i185.i to i64
  %215 = getelementptr ptr, ptr %.fca.0.extract.i, i64 %214
  %216 = getelementptr i8, ptr %215, i64 64
  %217 = load ptr, ptr %216, align 8
  %218 = call ptr %217({ ptr, ptr, ptr, i32 } %210, ptr nonnull %2)
  %219 = call i32 %218({ ptr, ptr, ptr, i32 } %210, { ptr, ptr, ptr, i32 } %210, ptr nonnull %2)
  %220 = icmp eq i32 %219, %165
  br i1 %220, label %221, label %.critedge.i

221:                                              ; preds = %204
  %222 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %223 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %224 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract.i)
  %225 = getelementptr i8, ptr %215, i64 48
  %226 = load ptr, ptr %225, align 8
  %227 = call ptr %226({ ptr, ptr, ptr, i32 } %210, ptr nonnull %2)
  %228 = call { ptr, i160 } %227({ ptr, ptr, ptr, i32 } %210, { ptr, ptr, ptr, i32 } %210, ptr nonnull %2)
  %229 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %230 = load ptr, ptr %79, align 8
  %231 = call i1 %230({ ptr, i160 } %228, { ptr, i160 } %161)
  br i1 %231, label %.thread525.i, label %.critedge.i

.thread525.i:                                     ; preds = %221
  %232 = load ptr, ptr %result.i, align 8
  %233 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %234 = load ptr, ptr %73, align 8
  %235 = load ptr, ptr %232, align 8
  %236 = getelementptr i8, ptr %235, i64 48
  %237 = load ptr, ptr %236, align 8
  %238 = call { i64, i64 } %237(ptr nonnull %232)
  %239 = extractvalue { i64, i64 } %238, 0
  %240 = extractvalue { i64, i64 } %238, 1
  %241 = urem i64 20, %240
  %242 = icmp eq i64 %241, 0
  %243 = sub i64 %240, %241
  %244 = select i1 %242, i64 0, i64 %243
  %245 = add i64 %239, 20
  %246 = add i64 %245, %244
  %247 = load ptr, ptr %234, align 8
  %248 = getelementptr i8, ptr %247, i64 48
  %249 = load ptr, ptr %248, align 8
  %250 = call { i64, i64 } %249(ptr nonnull %234)
  %251 = extractvalue { i64, i64 } %250, 0
  %252 = extractvalue { i64, i64 } %250, 1
  %253 = call i64 @llvm.umax.i64(i64 %240, i64 %252)
  %254 = call i64 @llvm.umax.i64(i64 %253, i64 8)
  %255 = urem i64 %246, %252
  %256 = icmp eq i64 %255, 0
  %257 = sub i64 %252, %255
  %258 = select i1 %256, i64 0, i64 %257
  %259 = add i64 %251, %246
  %260 = add i64 %259, %258
  %261 = urem i64 %260, %254
  %262 = icmp eq i64 %261, 0
  %263 = sub i64 %254, %261
  %264 = select i1 %262, i64 0, i64 %263
  %265 = add i64 %264, %260
  %result.i.i242 = call noalias ptr @bump_malloc_inner(i64 noundef %265, ptr nonnull @current_ptr) #29
  store ptr %232, ptr %result.i.i242, align 8
  %266 = getelementptr i8, ptr %result.i.i242, i64 8
  store ptr %234, ptr %266, align 8
  %267 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i.i242)
  store ptr @Entry, ptr %58, align 8
  store ptr %result.i.i242, ptr %121, align 8
  store i32 9, ptr %122, align 8
  %268 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %58)
  %269 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %270 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %271 = load ptr, ptr %232, align 8
  %272 = getelementptr i8, ptr %271, i64 48
  %273 = load ptr, ptr %272, align 8
  %274 = call { i64, i64 } %273(ptr nonnull %232)
  %275 = extractvalue { i64, i64 } %274, 1
  %276 = urem i64 20, %275
  %277 = icmp eq i64 %276, 0
  %reass.sub1480 = sub i64 %275, %276
  %278 = add i64 %reass.sub1480, 20
  %279 = select i1 %277, i64 20, i64 %278
  %280 = getelementptr i8, ptr %result.i.i242, i64 %279
  %281 = load ptr, ptr %result.i.i242, align 8
  %282 = load ptr, ptr %281, align 8
  %283 = getelementptr i8, ptr %282, i64 64
  %284 = load ptr, ptr %283, align 8
  call void %284({ ptr, i160 } %161, ptr nonnull %281, ptr %280)
  %285 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %286 = load ptr, ptr %result.i.i242, align 8
  %287 = load ptr, ptr %286, align 8
  %288 = getelementptr i8, ptr %287, i64 48
  %289 = load ptr, ptr %288, align 8
  %290 = call { i64, i64 } %289(ptr nonnull %286)
  %291 = extractvalue { i64, i64 } %290, 0
  %292 = extractvalue { i64, i64 } %290, 1
  %293 = urem i64 20, %292
  %294 = icmp eq i64 %293, 0
  %295 = sub i64 %292, %293
  %296 = select i1 %294, i64 0, i64 %295
  %297 = add i64 %291, 20
  %298 = add i64 %297, %296
  %299 = load ptr, ptr %266, align 8
  %300 = load ptr, ptr %299, align 8
  %301 = getelementptr i8, ptr %300, i64 48
  %302 = load ptr, ptr %301, align 8
  %303 = call { i64, i64 } %302(ptr nonnull %299)
  %304 = extractvalue { i64, i64 } %303, 1
  %305 = urem i64 %298, %304
  %306 = icmp eq i64 %305, 0
  %307 = sub i64 %304, %305
  %308 = select i1 %306, i64 0, i64 %307
  %309 = getelementptr i8, ptr %result.i.i242, i64 %298
  %310 = getelementptr i8, ptr %309, i64 %308
  %311 = load ptr, ptr %266, align 8
  %312 = load ptr, ptr %311, align 8
  %313 = getelementptr i8, ptr %312, i64 64
  %314 = load ptr, ptr %313, align 8
  call void %314({ ptr, i160 } %162, ptr nonnull %311, ptr %310)
  %315 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %316 = getelementptr i8, ptr %result.i.i242, i64 16
  store i32 %165, ptr %316, align 4
  %317 = load ptr, ptr %123, align 8
  %318 = ptrtoint ptr %result.i.i242 to i64
  %319 = ptrtoint ptr %317 to i64
  %.sroa.2129.0.insert.ext.i = zext i64 %319 to i160
  %.sroa.2129.0.insert.shift.i = shl nuw nsw i160 %.sroa.2129.0.insert.ext.i, 64
  %.sroa.0128.0.insert.ext.i = zext i64 %318 to i160
  %.sroa.2129.0.insert.insert.i = or disjoint i160 %.sroa.2129.0.insert.shift.i, %.sroa.0128.0.insert.ext.i
  %.sroa.0128.0.insert.insert.i = or disjoint i160 %.sroa.2129.0.insert.insert.i, 3062541302288446171170371466885913903104
  %320 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0128.0.insert.insert.i, 1
  %321 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %322 = load ptr, ptr %90, align 8
  %323 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %322, 0
  %324 = load ptr, ptr %91, align 8
  %325 = insertvalue { ptr, ptr, ptr, i32 } %323, ptr %324, 1
  %326 = load ptr, ptr %92, align 8
  %327 = insertvalue { ptr, ptr, ptr, i32 } %325, ptr %326, 2
  %328 = load i32, ptr %93, align 4
  %329 = insertvalue { ptr, ptr, ptr, i32 } %327, i32 %328, 3
  %hash_coef_ptr.i.i202.i = getelementptr i8, ptr %322, i64 8
  %tbl_size_ptr.i.i203.i = getelementptr i8, ptr %322, i64 16
  %offset_tbl_ptr.i.i204.i = getelementptr i8, ptr %322, i64 40
  %hash_coef.i.i205.i = load i64, ptr %hash_coef_ptr.i.i202.i, align 4
  %tbl_size.i.i206.i = load i64, ptr %tbl_size_ptr.i.i203.i, align 4
  %offset_tbl.i.i207.i = load ptr, ptr %offset_tbl_ptr.i.i204.i, align 8
  %product.i.i.i208.i = mul i64 %hash_coef.i.i205.i, -5261542750394134544
  %shifted.i.i.i209.i = lshr i64 %product.i.i.i208.i, 32
  %xored.i.i.i210.i = xor i64 %shifted.i.i.i209.i, %product.i.i.i208.i
  %hash.i.i.i211.i = and i64 %xored.i.i.i210.i, %tbl_size.i.i206.i
  %offset_ptr.i.i212.i = getelementptr i32, ptr %offset_tbl.i.i207.i, i64 %hash.i.i.i211.i
  %offset.i.i213.i = load i32, ptr %offset_ptr.i.i212.i, align 4
  %eq.i216.i = icmp eq i32 %328, %offset.i.i213.i
  call void @llvm.assume(i1 %eq.i216.i) #30
  %330 = load ptr, ptr %result.i, align 8
  %331 = load ptr, ptr %73, align 8
  %result.i217.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %332 = getelementptr i8, ptr %result.i217.i, i64 16
  store ptr %331, ptr %332, align 8
  %333 = getelementptr i8, ptr %result.i217.i, i64 8
  store ptr %330, ptr %333, align 8
  %334 = getelementptr i8, ptr %result.i217.i, i64 24
  store ptr null, ptr %334, align 8
  %335 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i217.i)
  store ptr @Entry, ptr %result.i217.i, align 8
  store ptr @_parameterization_Ptri32, ptr %59, align 8
  store ptr %result.i217.i, ptr %124, align 8
  %336 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %59)
  %337 = call ptr @llvm.invariant.start.p0(i64 600, ptr %322)
  %338 = sext i32 %328 to i64
  %339 = getelementptr ptr, ptr %322, i64 %338
  %340 = getelementptr i8, ptr %339, i64 128
  %341 = load ptr, ptr %340, align 8
  store ptr @i32_typ, ptr %60, align 8
  store ptr @Entry, ptr %125, align 8
  %342 = call ptr %341({ ptr, ptr, ptr, i32 } %329, ptr nonnull %60)
  call void %342({ ptr, ptr, ptr, i32 } %329, { ptr, ptr, ptr, i32 } %329, ptr nonnull %59, i32 %184, { ptr, i160 } %320)
  br label %HashMap_insert_keyK_valueV.exit

.critedge.i:                                      ; preds = %221, %204, %.lr.ph
  %343 = add i32 %165, 2127912214
  %344 = shl i32 %165, 12
  %345 = add i32 %343, %344
  %346 = ashr i32 %345, 19
  %347 = xor i32 %345, %346
  %348 = xor i32 %347, -949894596
  %349 = add i32 %348, 374761393
  %350 = shl i32 %348, 5
  %351 = add i32 %349, %350
  %352 = add i32 %351, -744332180
  %353 = shl i32 %351, 9
  %354 = xor i32 %352, %353
  %355 = add i32 %354, -42973499
  %356 = shl i32 %354, 3
  %357 = add i32 %355, %356
  %358 = ashr i32 %357, 16
  %359 = xor i32 %357, %358
  %360 = xor i32 %359, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %361 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %362 = load ptr, ptr %105, align 8
  %363 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %362, 0
  %364 = load ptr, ptr %106, align 8
  %365 = insertvalue { ptr, ptr, ptr, i32 } %363, ptr %364, 1
  %366 = load ptr, ptr %107, align 8
  %367 = insertvalue { ptr, ptr, ptr, i32 } %365, ptr %366, 2
  %368 = load i32, ptr %108, align 4
  %369 = insertvalue { ptr, ptr, ptr, i32 } %367, i32 %368, 3
  %hash_coef_ptr.i.i10.i407 = getelementptr i8, ptr %362, i64 8
  %tbl_size_ptr.i.i11.i408 = getelementptr i8, ptr %362, i64 16
  %offset_tbl_ptr.i.i12.i409 = getelementptr i8, ptr %362, i64 40
  %hash_coef.i.i13.i410 = load i64, ptr %hash_coef_ptr.i.i10.i407, align 4
  %tbl_size.i.i14.i411 = load i64, ptr %tbl_size_ptr.i.i11.i408, align 4
  %offset_tbl.i.i15.i412 = load ptr, ptr %offset_tbl_ptr.i.i12.i409, align 8
  %product.i.i.i16.i413 = mul i64 %hash_coef.i.i13.i410, -5261542750394134544
  %shifted.i.i.i17.i414 = lshr i64 %product.i.i.i16.i413, 32
  %xored.i.i.i18.i415 = xor i64 %shifted.i.i.i17.i414, %product.i.i.i16.i413
  %hash.i.i.i19.i416 = and i64 %xored.i.i.i18.i415, %tbl_size.i.i14.i411
  %offset_ptr.i.i20.i417 = getelementptr i32, ptr %offset_tbl.i.i15.i412, i64 %hash.i.i.i19.i416
  %offset.i.i21.i418 = load i32, ptr %offset_ptr.i.i20.i417, align 4
  %eq.i.i419 = icmp eq i32 %368, %offset.i.i21.i418
  call void @llvm.assume(i1 %eq.i.i419) #30
  %370 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %371 = call ptr @llvm.invariant.start.p0(i64 600, ptr %362)
  %372 = sext i32 %368 to i64
  %373 = getelementptr ptr, ptr %362, i64 %372
  %374 = getelementptr i8, ptr %373, i64 64
  %375 = load ptr, ptr %374, align 8
  %376 = call ptr %375({ ptr, ptr, ptr, i32 } %369, ptr nonnull %2)
  %377 = call i32 %376({ ptr, ptr, ptr, i32 } %369, { ptr, ptr, ptr, i32 } %369, ptr nonnull %2)
  %378 = add i32 %377, -1
  %379 = and i32 %378, %360
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %380 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %381 = load ptr, ptr %105, align 8
  %382 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %381, 0
  %383 = load ptr, ptr %106, align 8
  %384 = insertvalue { ptr, ptr, ptr, i32 } %382, ptr %383, 1
  %385 = load ptr, ptr %107, align 8
  %386 = insertvalue { ptr, ptr, ptr, i32 } %384, ptr %385, 2
  %387 = load i32, ptr %108, align 4
  %388 = insertvalue { ptr, ptr, ptr, i32 } %386, i32 %387, 3
  %hash_coef_ptr.i.i219.i = getelementptr i8, ptr %381, i64 8
  %tbl_size_ptr.i.i220.i = getelementptr i8, ptr %381, i64 16
  %offset_tbl_ptr.i.i221.i = getelementptr i8, ptr %381, i64 40
  %hash_coef.i.i222.i = load i64, ptr %hash_coef_ptr.i.i219.i, align 4
  %tbl_size.i.i223.i = load i64, ptr %tbl_size_ptr.i.i220.i, align 4
  %offset_tbl.i.i224.i = load ptr, ptr %offset_tbl_ptr.i.i221.i, align 8
  %product.i.i.i225.i = mul i64 %hash_coef.i.i222.i, -5261542750394134544
  %shifted.i.i.i226.i = lshr i64 %product.i.i.i225.i, 32
  %xored.i.i.i227.i = xor i64 %shifted.i.i.i226.i, %product.i.i.i225.i
  %hash.i.i.i228.i = and i64 %xored.i.i.i227.i, %tbl_size.i.i223.i
  %offset_ptr.i.i229.i = getelementptr i32, ptr %offset_tbl.i.i224.i, i64 %hash.i.i.i228.i
  %offset.i.i230.i = load i32, ptr %offset_ptr.i.i229.i, align 4
  %eq.i233.i = icmp eq i32 %387, %offset.i.i230.i
  call void @llvm.assume(i1 %eq.i233.i) #30
  store ptr @_parameterization_Ptri32, ptr %61, align 8
  %389 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %61)
  %390 = call ptr @llvm.invariant.start.p0(i64 600, ptr %381)
  %391 = sext i32 %387 to i64
  %392 = getelementptr ptr, ptr %381, i64 %391
  %393 = getelementptr i8, ptr %392, i64 120
  %394 = load ptr, ptr %393, align 8
  store ptr @i32_typ, ptr %62, align 8
  %395 = call ptr %394({ ptr, ptr, ptr, i32 } %388, ptr nonnull %62)
  %396 = call { ptr, i160 } %395({ ptr, ptr, ptr, i32 } %388, { ptr, ptr, ptr, i32 } %388, ptr nonnull %61, i32 %379)
  %.fca.0.extract104.i = extractvalue { ptr, i160 } %396, 0
  %397 = icmp ne ptr %.fca.0.extract104.i, @nil_typ
  %398 = icmp ne ptr %.fca.0.extract104.i, null
  %.not153.i = and i1 %397, %398
  br i1 %.not153.i, label %399, label %.critedge158.i

399:                                              ; preds = %.critedge.i
  %.fca.1.extract106.i = extractvalue { ptr, i160 } %396, 1
  %.sroa.4.8.extract.trunc.i = trunc i160 %.fca.1.extract106.i to i64
  %400 = inttoptr i64 %.sroa.4.8.extract.trunc.i to ptr
  %.sroa.7506.8.extract.shift.i = lshr i160 %.fca.1.extract106.i, 64
  %.sroa.7506.8.extract.trunc.i = trunc i160 %.sroa.7506.8.extract.shift.i to i64
  %401 = inttoptr i64 %.sroa.7506.8.extract.trunc.i to ptr
  %hash_coef_ptr.i.i235.i = getelementptr i8, ptr %.fca.0.extract104.i, i64 8
  %tbl_size_ptr.i.i236.i = getelementptr i8, ptr %.fca.0.extract104.i, i64 16
  %offset_tbl_ptr.i.i237.i = getelementptr i8, ptr %.fca.0.extract104.i, i64 40
  %hash_coef.i.i238.i = load i64, ptr %hash_coef_ptr.i.i235.i, align 4
  %tbl_size.i.i239.i = load i64, ptr %tbl_size_ptr.i.i236.i, align 4
  %offset_tbl.i.i240.i = load ptr, ptr %offset_tbl_ptr.i.i237.i, align 8
  %product.i.i.i241.i = mul i64 %hash_coef.i.i238.i, 4015701072841558310
  %shifted.i.i.i242.i = lshr i64 %product.i.i.i241.i, 32
  %xored.i.i.i243.i = xor i64 %shifted.i.i.i242.i, %product.i.i.i241.i
  %hash.i.i.i244.i = and i64 %xored.i.i.i243.i, %tbl_size.i.i239.i
  %offset_ptr.i.i245.i = getelementptr i32, ptr %offset_tbl.i.i240.i, i64 %hash.i.i.i244.i
  %offset.i.i246.i = load i32, ptr %offset_ptr.i.i245.i, align 4
  %402 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract104.i, 0
  %403 = insertvalue { ptr, ptr, ptr, i32 } %402, ptr %400, 1
  %404 = insertvalue { ptr, ptr, ptr, i32 } %403, ptr %401, 2
  %405 = insertvalue { ptr, ptr, ptr, i32 } %404, i32 %offset.i.i246.i, 3
  %406 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %407 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %408 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract104.i)
  %409 = sext i32 %offset.i.i246.i to i64
  %410 = getelementptr ptr, ptr %.fca.0.extract104.i, i64 %409
  %411 = getelementptr i8, ptr %410, i64 64
  %412 = load ptr, ptr %411, align 8
  %413 = call ptr %412({ ptr, ptr, ptr, i32 } %405, ptr nonnull %2)
  %414 = call i32 %413({ ptr, ptr, ptr, i32 } %405, { ptr, ptr, ptr, i32 } %405, ptr nonnull %2)
  %415 = icmp eq i32 %414, %165
  br i1 %415, label %416, label %.critedge158.i

416:                                              ; preds = %399
  %417 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %418 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %419 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract104.i)
  %420 = getelementptr i8, ptr %410, i64 48
  %421 = load ptr, ptr %420, align 8
  %422 = call ptr %421({ ptr, ptr, ptr, i32 } %405, ptr nonnull %2)
  %423 = call { ptr, i160 } %422({ ptr, ptr, ptr, i32 } %405, { ptr, ptr, ptr, i32 } %405, ptr nonnull %2)
  %424 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %425 = load ptr, ptr %79, align 8
  %426 = call i1 %425({ ptr, i160 } %423, { ptr, i160 } %161)
  br i1 %426, label %.thread528.i, label %.critedge158.i

.thread528.i:                                     ; preds = %416
  %427 = load ptr, ptr %result.i, align 8
  %428 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %429 = load ptr, ptr %73, align 8
  %430 = load ptr, ptr %427, align 8
  %431 = getelementptr i8, ptr %430, i64 48
  %432 = load ptr, ptr %431, align 8
  %433 = call { i64, i64 } %432(ptr nonnull %427)
  %434 = extractvalue { i64, i64 } %433, 0
  %435 = extractvalue { i64, i64 } %433, 1
  %436 = urem i64 20, %435
  %437 = icmp eq i64 %436, 0
  %438 = sub i64 %435, %436
  %439 = select i1 %437, i64 0, i64 %438
  %440 = add i64 %434, 20
  %441 = add i64 %440, %439
  %442 = load ptr, ptr %429, align 8
  %443 = getelementptr i8, ptr %442, i64 48
  %444 = load ptr, ptr %443, align 8
  %445 = call { i64, i64 } %444(ptr nonnull %429)
  %446 = extractvalue { i64, i64 } %445, 0
  %447 = extractvalue { i64, i64 } %445, 1
  %448 = call i64 @llvm.umax.i64(i64 %435, i64 %447)
  %449 = call i64 @llvm.umax.i64(i64 %448, i64 8)
  %450 = urem i64 %441, %447
  %451 = icmp eq i64 %450, 0
  %452 = sub i64 %447, %450
  %453 = select i1 %451, i64 0, i64 %452
  %454 = add i64 %446, %441
  %455 = add i64 %454, %453
  %456 = urem i64 %455, %449
  %457 = icmp eq i64 %456, 0
  %458 = sub i64 %449, %456
  %459 = select i1 %457, i64 0, i64 %458
  %460 = add i64 %459, %455
  %result.i248.i = call noalias ptr @bump_malloc_inner(i64 noundef %460, ptr nonnull @current_ptr) #29
  store ptr %427, ptr %result.i248.i, align 8
  %461 = getelementptr i8, ptr %result.i248.i, i64 8
  store ptr %429, ptr %461, align 8
  %462 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i248.i)
  store ptr @Entry, ptr %63, align 8
  store ptr %result.i248.i, ptr %116, align 8
  store i32 9, ptr %117, align 8
  %463 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %63)
  %464 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %465 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %466 = load ptr, ptr %427, align 8
  %467 = getelementptr i8, ptr %466, i64 48
  %468 = load ptr, ptr %467, align 8
  %469 = call { i64, i64 } %468(ptr nonnull %427)
  %470 = extractvalue { i64, i64 } %469, 1
  %471 = urem i64 20, %470
  %472 = icmp eq i64 %471, 0
  %reass.sub = sub i64 %470, %471
  %473 = add i64 %reass.sub, 20
  %474 = select i1 %472, i64 20, i64 %473
  %475 = getelementptr i8, ptr %result.i248.i, i64 %474
  %476 = load ptr, ptr %result.i248.i, align 8
  %477 = load ptr, ptr %476, align 8
  %478 = getelementptr i8, ptr %477, i64 64
  %479 = load ptr, ptr %478, align 8
  call void %479({ ptr, i160 } %161, ptr nonnull %476, ptr %475)
  %480 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %481 = load ptr, ptr %result.i248.i, align 8
  %482 = load ptr, ptr %481, align 8
  %483 = getelementptr i8, ptr %482, i64 48
  %484 = load ptr, ptr %483, align 8
  %485 = call { i64, i64 } %484(ptr nonnull %481)
  %486 = extractvalue { i64, i64 } %485, 0
  %487 = extractvalue { i64, i64 } %485, 1
  %488 = urem i64 20, %487
  %489 = icmp eq i64 %488, 0
  %490 = sub i64 %487, %488
  %491 = select i1 %489, i64 0, i64 %490
  %492 = add i64 %486, 20
  %493 = add i64 %492, %491
  %494 = load ptr, ptr %461, align 8
  %495 = load ptr, ptr %494, align 8
  %496 = getelementptr i8, ptr %495, i64 48
  %497 = load ptr, ptr %496, align 8
  %498 = call { i64, i64 } %497(ptr nonnull %494)
  %499 = extractvalue { i64, i64 } %498, 1
  %500 = urem i64 %493, %499
  %501 = icmp eq i64 %500, 0
  %502 = sub i64 %499, %500
  %503 = select i1 %501, i64 0, i64 %502
  %504 = getelementptr i8, ptr %result.i248.i, i64 %493
  %505 = getelementptr i8, ptr %504, i64 %503
  %506 = load ptr, ptr %461, align 8
  %507 = load ptr, ptr %506, align 8
  %508 = getelementptr i8, ptr %507, i64 64
  %509 = load ptr, ptr %508, align 8
  call void %509({ ptr, i160 } %162, ptr nonnull %506, ptr %505)
  %510 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %511 = getelementptr i8, ptr %result.i248.i, i64 16
  store i32 %165, ptr %511, align 4
  %512 = load ptr, ptr %118, align 8
  %513 = ptrtoint ptr %result.i248.i to i64
  %514 = ptrtoint ptr %512 to i64
  %.sroa.284.0.insert.ext.i = zext i64 %514 to i160
  %.sroa.284.0.insert.shift.i = shl nuw nsw i160 %.sroa.284.0.insert.ext.i, 64
  %.sroa.083.0.insert.ext.i = zext i64 %513 to i160
  %.sroa.284.0.insert.insert.i = or disjoint i160 %.sroa.284.0.insert.shift.i, %.sroa.083.0.insert.ext.i
  %.sroa.083.0.insert.insert.i = or disjoint i160 %.sroa.284.0.insert.insert.i, 3062541302288446171170371466885913903104
  %515 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.083.0.insert.insert.i, 1
  %516 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %517 = load ptr, ptr %105, align 8
  %518 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %517, 0
  %519 = load ptr, ptr %106, align 8
  %520 = insertvalue { ptr, ptr, ptr, i32 } %518, ptr %519, 1
  %521 = load ptr, ptr %107, align 8
  %522 = insertvalue { ptr, ptr, ptr, i32 } %520, ptr %521, 2
  %523 = load i32, ptr %108, align 4
  %524 = insertvalue { ptr, ptr, ptr, i32 } %522, i32 %523, 3
  %hash_coef_ptr.i.i264.i = getelementptr i8, ptr %517, i64 8
  %tbl_size_ptr.i.i265.i = getelementptr i8, ptr %517, i64 16
  %offset_tbl_ptr.i.i266.i = getelementptr i8, ptr %517, i64 40
  %hash_coef.i.i267.i = load i64, ptr %hash_coef_ptr.i.i264.i, align 4
  %tbl_size.i.i268.i = load i64, ptr %tbl_size_ptr.i.i265.i, align 4
  %offset_tbl.i.i269.i = load ptr, ptr %offset_tbl_ptr.i.i266.i, align 8
  %product.i.i.i270.i = mul i64 %hash_coef.i.i267.i, -5261542750394134544
  %shifted.i.i.i271.i = lshr i64 %product.i.i.i270.i, 32
  %xored.i.i.i272.i = xor i64 %shifted.i.i.i271.i, %product.i.i.i270.i
  %hash.i.i.i273.i = and i64 %xored.i.i.i272.i, %tbl_size.i.i268.i
  %offset_ptr.i.i274.i = getelementptr i32, ptr %offset_tbl.i.i269.i, i64 %hash.i.i.i273.i
  %offset.i.i275.i = load i32, ptr %offset_ptr.i.i274.i, align 4
  %eq.i278.i = icmp eq i32 %523, %offset.i.i275.i
  call void @llvm.assume(i1 %eq.i278.i) #30
  %525 = load ptr, ptr %result.i, align 8
  %526 = load ptr, ptr %73, align 8
  %result.i279.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %527 = getelementptr i8, ptr %result.i279.i, i64 16
  store ptr %526, ptr %527, align 8
  %528 = getelementptr i8, ptr %result.i279.i, i64 8
  store ptr %525, ptr %528, align 8
  %529 = getelementptr i8, ptr %result.i279.i, i64 24
  store ptr null, ptr %529, align 8
  %530 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i279.i)
  store ptr @Entry, ptr %result.i279.i, align 8
  store ptr @_parameterization_Ptri32, ptr %64, align 8
  store ptr %result.i279.i, ptr %119, align 8
  %531 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %64)
  %532 = call ptr @llvm.invariant.start.p0(i64 600, ptr %517)
  %533 = sext i32 %523 to i64
  %534 = getelementptr ptr, ptr %517, i64 %533
  %535 = getelementptr i8, ptr %534, i64 128
  %536 = load ptr, ptr %535, align 8
  store ptr @i32_typ, ptr %65, align 8
  store ptr @Entry, ptr %120, align 8
  %537 = call ptr %536({ ptr, ptr, ptr, i32 } %524, ptr nonnull %65)
  call void %537({ ptr, ptr, ptr, i32 } %524, { ptr, ptr, ptr, i32 } %524, ptr nonnull %64, i32 %379, { ptr, i160 } %515)
  br label %HashMap_insert_keyK_valueV.exit

.critedge158.i:                                   ; preds = %416, %399, %.critedge.i
  %538 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %539 = load ptr, ptr %90, align 8
  %540 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %539, 0
  %541 = load ptr, ptr %91, align 8
  %542 = insertvalue { ptr, ptr, ptr, i32 } %540, ptr %541, 1
  %543 = load ptr, ptr %92, align 8
  %544 = insertvalue { ptr, ptr, ptr, i32 } %542, ptr %543, 2
  %545 = load i32, ptr %93, align 4
  %546 = insertvalue { ptr, ptr, ptr, i32 } %544, i32 %545, 3
  %hash_coef_ptr.i.i281.i = getelementptr i8, ptr %539, i64 8
  %tbl_size_ptr.i.i282.i = getelementptr i8, ptr %539, i64 16
  %offset_tbl_ptr.i.i283.i = getelementptr i8, ptr %539, i64 40
  %hash_coef.i.i284.i = load i64, ptr %hash_coef_ptr.i.i281.i, align 4
  %tbl_size.i.i285.i = load i64, ptr %tbl_size_ptr.i.i282.i, align 4
  %offset_tbl.i.i286.i = load ptr, ptr %offset_tbl_ptr.i.i283.i, align 8
  %product.i.i.i287.i = mul i64 %hash_coef.i.i284.i, -5261542750394134544
  %shifted.i.i.i288.i = lshr i64 %product.i.i.i287.i, 32
  %xored.i.i.i289.i = xor i64 %shifted.i.i.i288.i, %product.i.i.i287.i
  %hash.i.i.i290.i = and i64 %xored.i.i.i289.i, %tbl_size.i.i285.i
  %offset_ptr.i.i291.i = getelementptr i32, ptr %offset_tbl.i.i286.i, i64 %hash.i.i.i290.i
  %offset.i.i292.i = load i32, ptr %offset_ptr.i.i291.i, align 4
  %eq.i295.i = icmp eq i32 %545, %offset.i.i292.i
  call void @llvm.assume(i1 %eq.i295.i) #30
  %547 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %548 = call ptr @llvm.invariant.start.p0(i64 600, ptr %539)
  %549 = sext i32 %545 to i64
  %550 = getelementptr ptr, ptr %539, i64 %549
  %551 = getelementptr i8, ptr %550, i64 64
  %552 = load ptr, ptr %551, align 8
  %553 = call ptr %552({ ptr, ptr, ptr, i32 } %546, ptr nonnull %2)
  %554 = call i32 %553({ ptr, ptr, ptr, i32 } %546, { ptr, ptr, ptr, i32 } %546, ptr nonnull %2)
  %555 = load i32, ptr %109, align 4
  %.not.i = icmp slt i32 %555, %554
  br i1 %.not.i, label %._crit_edge2.i, label %556

556:                                              ; preds = %.critedge158.i
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %52)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %53)
  %557 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %558 = load ptr, ptr %90, align 8
  %559 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %558, 0
  %560 = load ptr, ptr %91, align 8
  %561 = insertvalue { ptr, ptr, ptr, i32 } %559, ptr %560, 1
  %562 = load ptr, ptr %92, align 8
  %563 = insertvalue { ptr, ptr, ptr, i32 } %561, ptr %562, 2
  %564 = load i32, ptr %93, align 4
  %565 = insertvalue { ptr, ptr, ptr, i32 } %563, i32 %564, 3
  %hash_coef_ptr.i.i18.i = getelementptr i8, ptr %558, i64 8
  %tbl_size_ptr.i.i19.i = getelementptr i8, ptr %558, i64 16
  %offset_tbl_ptr.i.i20.i = getelementptr i8, ptr %558, i64 40
  %hash_coef.i.i21.i = load i64, ptr %hash_coef_ptr.i.i18.i, align 4
  %tbl_size.i.i22.i = load i64, ptr %tbl_size_ptr.i.i19.i, align 4
  %offset_tbl.i.i23.i = load ptr, ptr %offset_tbl_ptr.i.i20.i, align 8
  %product.i.i.i24.i = mul i64 %hash_coef.i.i21.i, -5261542750394134544
  %shifted.i.i.i25.i = lshr i64 %product.i.i.i24.i, 32
  %xored.i.i.i26.i = xor i64 %shifted.i.i.i25.i, %product.i.i.i24.i
  %hash.i.i.i27.i = and i64 %xored.i.i.i26.i, %tbl_size.i.i22.i
  %offset_ptr.i.i28.i = getelementptr i32, ptr %offset_tbl.i.i23.i, i64 %hash.i.i.i27.i
  %offset.i.i29.i = load i32, ptr %offset_ptr.i.i28.i, align 4
  %eq.i.i433 = icmp eq i32 %564, %offset.i.i29.i
  call void @llvm.assume(i1 %eq.i.i433) #30
  %566 = load ptr, ptr %105, align 8
  %567 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %566, 0
  %568 = load ptr, ptr %106, align 8
  %569 = insertvalue { ptr, ptr, ptr, i32 } %567, ptr %568, 1
  %570 = load ptr, ptr %107, align 8
  %571 = insertvalue { ptr, ptr, ptr, i32 } %569, ptr %570, 2
  %572 = load i32, ptr %108, align 4
  %hash_coef_ptr.i.i46.i = getelementptr i8, ptr %566, i64 8
  %tbl_size_ptr.i.i47.i = getelementptr i8, ptr %566, i64 16
  %offset_tbl_ptr.i.i48.i = getelementptr i8, ptr %566, i64 40
  %hash_coef.i.i49.i = load i64, ptr %hash_coef_ptr.i.i46.i, align 4
  %tbl_size.i.i50.i = load i64, ptr %tbl_size_ptr.i.i47.i, align 4
  %offset_tbl.i.i51.i = load ptr, ptr %offset_tbl_ptr.i.i48.i, align 8
  %product.i.i.i52.i = mul i64 %hash_coef.i.i49.i, -5261542750394134544
  %shifted.i.i.i53.i = lshr i64 %product.i.i.i52.i, 32
  %xored.i.i.i54.i = xor i64 %shifted.i.i.i53.i, %product.i.i.i52.i
  %hash.i.i.i55.i = and i64 %xored.i.i.i54.i, %tbl_size.i.i50.i
  %offset_ptr.i.i56.i = getelementptr i32, ptr %offset_tbl.i.i51.i, i64 %hash.i.i.i55.i
  %offset.i.i57.i = load i32, ptr %offset_ptr.i.i56.i, align 4
  %eq.i60.i = icmp eq i32 %572, %offset.i.i57.i
  call void @llvm.assume(i1 %eq.i60.i) #30
  %573 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %574 = call ptr @llvm.invariant.start.p0(i64 600, ptr %558)
  %575 = sext i32 %564 to i64
  %576 = getelementptr ptr, ptr %558, i64 %575
  %577 = getelementptr i8, ptr %576, i64 64
  %578 = load ptr, ptr %577, align 8
  %579 = call ptr %578({ ptr, ptr, ptr, i32 } %565, ptr nonnull %2)
  %580 = call i32 %579({ ptr, ptr, ptr, i32 } %565, { ptr, ptr, ptr, i32 } %565, ptr nonnull %2)
  %581 = shl i32 %580, 1
  %582 = call i32 @llvm.smax.i32(i32 %581, i32 16)
  %583 = load ptr, ptr %result.i, align 8
  %584 = load ptr, ptr %73, align 8
  %result.i.i438 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %585 = getelementptr i8, ptr %result.i.i438, i64 16
  store ptr @_parameterization_Nil, ptr %585, align 8
  %result.i75.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %586 = getelementptr i8, ptr %result.i75.i, i64 16
  store ptr %584, ptr %586, align 8
  %587 = getelementptr i8, ptr %result.i75.i, i64 8
  store ptr %583, ptr %587, align 8
  %588 = getelementptr i8, ptr %result.i75.i, i64 24
  store ptr null, ptr %588, align 8
  %589 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i75.i)
  store ptr @Entry, ptr %result.i75.i, align 8
  %590 = getelementptr i8, ptr %result.i.i438, i64 8
  store ptr %result.i75.i, ptr %590, align 8
  %591 = getelementptr i8, ptr %result.i.i438, i64 24
  store ptr null, ptr %591, align 8
  %592 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i438)
  store ptr @union_typ, ptr %result.i.i438, align 8
  %result.i76.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i438, ptr %result.i76.i, align 8
  %593 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i76.i)
  store ptr @Array, ptr %52, align 8
  store ptr %result.i76.i, ptr %126, align 8
  store i32 9, ptr %127, align 8
  %594 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %52)
  %595 = getelementptr i8, ptr %result.i76.i, i64 16
  store i32 %582, ptr %595, align 4
  %596 = getelementptr i8, ptr %result.i76.i, i64 20
  store i32 %582, ptr %596, align 4
  %597 = zext nneg i32 %582 to i64
  %598 = shl nuw nsw i64 %597, 5
  %result.i.i.i439 = call noalias ptr @bump_malloc_inner(i64 noundef %598, ptr nonnull @current_ptr) #29
  %599 = getelementptr i8, ptr %result.i76.i, i64 8
  store ptr %result.i.i.i439, ptr %599, align 8
  %600 = load ptr, ptr %128, align 8
  store ptr @Array, ptr %90, align 8
  store ptr %result.i76.i, ptr %91, align 8
  store ptr %600, ptr %92, align 8
  store i32 9, ptr %93, align 4
  %result.i91.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %601 = getelementptr i8, ptr %result.i91.i, i64 16
  store ptr @_parameterization_Nil, ptr %601, align 8
  %result.i92.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %602 = getelementptr i8, ptr %result.i92.i, i64 16
  store ptr %584, ptr %602, align 8
  %603 = getelementptr i8, ptr %result.i92.i, i64 8
  store ptr %583, ptr %603, align 8
  %604 = getelementptr i8, ptr %result.i92.i, i64 24
  store ptr null, ptr %604, align 8
  %605 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i92.i)
  store ptr @Entry, ptr %result.i92.i, align 8
  %606 = getelementptr i8, ptr %result.i91.i, i64 8
  store ptr %result.i92.i, ptr %606, align 8
  %607 = getelementptr i8, ptr %result.i91.i, i64 24
  store ptr null, ptr %607, align 8
  %608 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i91.i)
  store ptr @union_typ, ptr %result.i91.i, align 8
  %result.i93.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i91.i, ptr %result.i93.i, align 8
  %609 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i93.i)
  store ptr @Array, ptr %53, align 8
  store ptr %result.i93.i, ptr %129, align 8
  store i32 9, ptr %130, align 8
  %610 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %53)
  %611 = getelementptr i8, ptr %result.i93.i, i64 16
  store i32 %582, ptr %611, align 4
  %612 = getelementptr i8, ptr %result.i93.i, i64 20
  store i32 %582, ptr %612, align 4
  %result.i.i234.i = call noalias ptr @bump_malloc_inner(i64 noundef %598, ptr nonnull @current_ptr) #29
  %613 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %614 = getelementptr i8, ptr %result.i93.i, i64 8
  store ptr %result.i.i234.i, ptr %614, align 8
  %615 = load ptr, ptr %131, align 8
  store ptr @Array, ptr %105, align 8
  store ptr %result.i93.i, ptr %106, align 8
  store ptr %615, ptr %107, align 8
  store i32 9, ptr %108, align 4
  store i32 0, ptr %109, align 4
  %616 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %13)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %14)
  %617 = icmp sgt i32 %580, 0
  br i1 %617, label %.lr.ph.i1076, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1130.critedge

.lr.ph.i1076:                                     ; preds = %556
  %invariant.gep.i = getelementptr i8, ptr %558, i64 120
  %offset_tbl.i.i24.i = load ptr, ptr %offset_tbl_ptr.i.i20.i, align 8
  %hash_coef.i.i22.i = load i64, ptr %hash_coef_ptr.i.i18.i, align 4
  %product.i.i.i25.i = mul i64 %hash_coef.i.i22.i, -5261542750394134544
  %shifted.i.i.i26.i = lshr i64 %product.i.i.i25.i, 32
  %xored.i.i.i27.i = xor i64 %shifted.i.i.i26.i, %product.i.i.i25.i
  %tbl_size.i.i23.i = load i64, ptr %tbl_size_ptr.i.i19.i, align 4
  %hash.i.i.i28.i = and i64 %xored.i.i.i27.i, %tbl_size.i.i23.i
  %offset_ptr.i.i29.i = getelementptr i32, ptr %offset_tbl.i.i24.i, i64 %hash.i.i.i28.i
  %offset.i.i30.i = load i32, ptr %offset_ptr.i.i29.i, align 4
  %618 = insertvalue { ptr, ptr, ptr, i32 } %563, i32 %offset.i.i30.i, 3
  %619 = sext i32 %offset.i.i30.i to i64
  %gep.i = getelementptr ptr, ptr %invariant.gep.i, i64 %619
  %620 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %621

621:                                              ; preds = %._crit_edge1.i, %.lr.ph.i1076
  %.reg2mem13.079.i = phi i32 [ 0, %.lr.ph.i1076 ], [ %638, %._crit_edge1.i ]
  store ptr @_parameterization_Ptri32, ptr %13, align 8
  %622 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %13)
  %623 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %558)
  %624 = load ptr, ptr %gep.i, align 8
  store ptr @i32_typ, ptr %14, align 8
  %625 = call ptr %624({ ptr, ptr, ptr, i32 } %618, ptr nonnull %14)
  %626 = call { ptr, i160 } %625({ ptr, ptr, ptr, i32 } %618, { ptr, ptr, ptr, i32 } %618, ptr nonnull %13, i32 %.reg2mem13.079.i)
  %.fca.0.extract11.i = extractvalue { ptr, i160 } %626, 0
  %627 = icmp ne ptr %.fca.0.extract11.i, @nil_typ
  %628 = icmp ne ptr %.fca.0.extract11.i, null
  %.not17.i = and i1 %627, %628
  br i1 %.not17.i, label %629, label %._crit_edge1.i

629:                                              ; preds = %621
  %.fca.1.extract13.i = extractvalue { ptr, i160 } %626, 1
  %.sroa.375.8.extract.trunc.i = trunc i160 %.fca.1.extract13.i to i64
  %630 = inttoptr i64 %.sroa.375.8.extract.trunc.i to ptr
  %.sroa.576.8.extract.shift.i = lshr i160 %.fca.1.extract13.i, 64
  %.sroa.576.8.extract.trunc.i = trunc i160 %.sroa.576.8.extract.shift.i to i64
  %631 = inttoptr i64 %.sroa.576.8.extract.trunc.i to ptr
  %hash_coef_ptr.i.i33.i = getelementptr i8, ptr %.fca.0.extract11.i, i64 8
  %tbl_size_ptr.i.i34.i = getelementptr i8, ptr %.fca.0.extract11.i, i64 16
  %offset_tbl_ptr.i.i35.i = getelementptr i8, ptr %.fca.0.extract11.i, i64 40
  %hash_coef.i.i36.i = load i64, ptr %hash_coef_ptr.i.i33.i, align 4
  %tbl_size.i.i37.i = load i64, ptr %tbl_size_ptr.i.i34.i, align 4
  %offset_tbl.i.i38.i = load ptr, ptr %offset_tbl_ptr.i.i35.i, align 8
  %product.i.i.i39.i = mul i64 %hash_coef.i.i36.i, 4015701072841558310
  %shifted.i.i.i40.i = lshr i64 %product.i.i.i39.i, 32
  %xored.i.i.i41.i = xor i64 %shifted.i.i.i40.i, %product.i.i.i39.i
  %hash.i.i.i42.i = and i64 %xored.i.i.i41.i, %tbl_size.i.i37.i
  %offset_ptr.i.i43.i = getelementptr i32, ptr %offset_tbl.i.i38.i, i64 %hash.i.i.i42.i
  %offset.i.i58.i = load i32, ptr %offset_ptr.i.i43.i, align 4
  %632 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i, 0
  %633 = insertvalue { ptr, ptr, ptr, i32 } %632, ptr %630, 1
  %634 = insertvalue { ptr, ptr, ptr, i32 } %633, ptr %631, 2
  %635 = insertvalue { ptr, ptr, ptr, i32 } %634, i32 %offset.i.i58.i, 3
  %636 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %637 = call { ptr, i160 } @HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %157, { ptr, ptr, ptr, i32 } poison, ptr nonnull poison, { ptr, ptr, ptr, i32 } %635)
  br label %._crit_edge1.i

._crit_edge1.i:                                   ; preds = %629, %621
  %638 = add nuw nsw i32 %.reg2mem13.079.i, 1
  %639 = icmp slt i32 %638, %580
  br i1 %639, label %621, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit: ; preds = %._crit_edge1.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %13)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %14)
  %640 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %11)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %12)
  %invariant.gep.i1082 = getelementptr i8, ptr %566, i64 120
  %offset_tbl.i.i24.i1084 = load ptr, ptr %offset_tbl_ptr.i.i48.i, align 8
  %hash_coef.i.i22.i1086 = load i64, ptr %hash_coef_ptr.i.i46.i, align 4
  %product.i.i.i25.i1087 = mul i64 %hash_coef.i.i22.i1086, -5261542750394134544
  %shifted.i.i.i26.i1088 = lshr i64 %product.i.i.i25.i1087, 32
  %xored.i.i.i27.i1089 = xor i64 %shifted.i.i.i26.i1088, %product.i.i.i25.i1087
  %tbl_size.i.i23.i1091 = load i64, ptr %tbl_size_ptr.i.i47.i, align 4
  %hash.i.i.i28.i1092 = and i64 %xored.i.i.i27.i1089, %tbl_size.i.i23.i1091
  %offset_ptr.i.i29.i1093 = getelementptr i32, ptr %offset_tbl.i.i24.i1084, i64 %hash.i.i.i28.i1092
  %offset.i.i30.i1094 = load i32, ptr %offset_ptr.i.i29.i1093, align 4
  %641 = insertvalue { ptr, ptr, ptr, i32 } %571, i32 %offset.i.i30.i1094, 3
  %642 = sext i32 %offset.i.i30.i1094 to i64
  %gep.i1108 = getelementptr ptr, ptr %invariant.gep.i1082, i64 %642
  %643 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %644

644:                                              ; preds = %._crit_edge1.i1112, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit
  %.reg2mem13.079.i1109 = phi i32 [ 0, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit ], [ %661, %._crit_edge1.i1112 ]
  store ptr @_parameterization_Ptri32, ptr %11, align 8
  %645 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %11)
  %646 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %566)
  %647 = load ptr, ptr %gep.i1108, align 8
  store ptr @i32_typ, ptr %12, align 8
  %648 = call ptr %647({ ptr, ptr, ptr, i32 } %641, ptr nonnull %12)
  %649 = call { ptr, i160 } %648({ ptr, ptr, ptr, i32 } %641, { ptr, ptr, ptr, i32 } %641, ptr nonnull %11, i32 %.reg2mem13.079.i1109)
  %.fca.0.extract11.i1110 = extractvalue { ptr, i160 } %649, 0
  %650 = icmp ne ptr %.fca.0.extract11.i1110, @nil_typ
  %651 = icmp ne ptr %.fca.0.extract11.i1110, null
  %.not17.i1111 = and i1 %650, %651
  br i1 %.not17.i1111, label %652, label %._crit_edge1.i1112

652:                                              ; preds = %644
  %.fca.1.extract13.i1113 = extractvalue { ptr, i160 } %649, 1
  %.sroa.375.8.extract.trunc.i1114 = trunc i160 %.fca.1.extract13.i1113 to i64
  %653 = inttoptr i64 %.sroa.375.8.extract.trunc.i1114 to ptr
  %.sroa.576.8.extract.shift.i1115 = lshr i160 %.fca.1.extract13.i1113, 64
  %.sroa.576.8.extract.trunc.i1116 = trunc i160 %.sroa.576.8.extract.shift.i1115 to i64
  %654 = inttoptr i64 %.sroa.576.8.extract.trunc.i1116 to ptr
  %hash_coef_ptr.i.i33.i1117 = getelementptr i8, ptr %.fca.0.extract11.i1110, i64 8
  %tbl_size_ptr.i.i34.i1118 = getelementptr i8, ptr %.fca.0.extract11.i1110, i64 16
  %offset_tbl_ptr.i.i35.i1119 = getelementptr i8, ptr %.fca.0.extract11.i1110, i64 40
  %hash_coef.i.i36.i1120 = load i64, ptr %hash_coef_ptr.i.i33.i1117, align 4
  %tbl_size.i.i37.i1121 = load i64, ptr %tbl_size_ptr.i.i34.i1118, align 4
  %offset_tbl.i.i38.i1122 = load ptr, ptr %offset_tbl_ptr.i.i35.i1119, align 8
  %product.i.i.i39.i1123 = mul i64 %hash_coef.i.i36.i1120, 4015701072841558310
  %shifted.i.i.i40.i1124 = lshr i64 %product.i.i.i39.i1123, 32
  %xored.i.i.i41.i1125 = xor i64 %shifted.i.i.i40.i1124, %product.i.i.i39.i1123
  %hash.i.i.i42.i1126 = and i64 %xored.i.i.i41.i1125, %tbl_size.i.i37.i1121
  %offset_ptr.i.i43.i1127 = getelementptr i32, ptr %offset_tbl.i.i38.i1122, i64 %hash.i.i.i42.i1126
  %offset.i.i58.i1128 = load i32, ptr %offset_ptr.i.i43.i1127, align 4
  %655 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i1110, 0
  %656 = insertvalue { ptr, ptr, ptr, i32 } %655, ptr %653, 1
  %657 = insertvalue { ptr, ptr, ptr, i32 } %656, ptr %654, 2
  %658 = insertvalue { ptr, ptr, ptr, i32 } %657, i32 %offset.i.i58.i1128, 3
  %659 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %660 = call { ptr, i160 } @HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %157, { ptr, ptr, ptr, i32 } poison, ptr nonnull poison, { ptr, ptr, ptr, i32 } %658)
  br label %._crit_edge1.i1112

._crit_edge1.i1112:                               ; preds = %652, %644
  %661 = add nuw nsw i32 %.reg2mem13.079.i1109, 1
  %662 = icmp slt i32 %661, %580
  br i1 %662, label %644, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1130

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1130.critedge: ; preds = %556
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %13)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %14)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %11)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %12)
  br label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1130

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1130: ; preds = %._crit_edge1.i1112, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1130.critedge
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %11)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %12)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %52)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %53)
  br label %._crit_edge2.i

._crit_edge2.i:                                   ; preds = %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1130, %.critedge158.i
  %663 = load ptr, ptr %result.i, align 8
  %664 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %665 = load ptr, ptr %73, align 8
  %666 = load ptr, ptr %663, align 8
  %667 = getelementptr i8, ptr %666, i64 48
  %668 = load ptr, ptr %667, align 8
  %669 = call { i64, i64 } %668(ptr nonnull %663)
  %670 = extractvalue { i64, i64 } %669, 0
  %671 = extractvalue { i64, i64 } %669, 1
  %672 = urem i64 20, %671
  %673 = icmp eq i64 %672, 0
  %674 = sub i64 %671, %672
  %675 = select i1 %673, i64 0, i64 %674
  %676 = add i64 %670, 20
  %677 = add i64 %676, %675
  %678 = load ptr, ptr %665, align 8
  %679 = getelementptr i8, ptr %678, i64 48
  %680 = load ptr, ptr %679, align 8
  %681 = call { i64, i64 } %680(ptr nonnull %665)
  %682 = extractvalue { i64, i64 } %681, 0
  %683 = extractvalue { i64, i64 } %681, 1
  %684 = call i64 @llvm.umax.i64(i64 %671, i64 %683)
  %685 = call i64 @llvm.umax.i64(i64 %684, i64 8)
  %686 = urem i64 %677, %683
  %687 = icmp eq i64 %686, 0
  %688 = sub i64 %683, %686
  %689 = select i1 %687, i64 0, i64 %688
  %690 = add i64 %682, %677
  %691 = add i64 %690, %689
  %692 = urem i64 %691, %685
  %693 = icmp eq i64 %692, 0
  %694 = sub i64 %685, %692
  %695 = select i1 %693, i64 0, i64 %694
  %696 = add i64 %695, %691
  %result.i296.i = call noalias ptr @bump_malloc_inner(i64 noundef %696, ptr nonnull @current_ptr) #29
  store ptr %663, ptr %result.i296.i, align 8
  %697 = getelementptr i8, ptr %result.i296.i, i64 8
  store ptr %665, ptr %697, align 8
  %698 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i296.i)
  store ptr @Entry, ptr %66, align 8
  store ptr %result.i296.i, ptr %113, align 8
  store i32 9, ptr %114, align 8
  %699 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %66)
  %700 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %701 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %702 = load ptr, ptr %663, align 8
  %703 = getelementptr i8, ptr %702, i64 48
  %704 = load ptr, ptr %703, align 8
  %705 = call { i64, i64 } %704(ptr nonnull %663)
  %706 = extractvalue { i64, i64 } %705, 1
  %707 = urem i64 20, %706
  %708 = icmp eq i64 %707, 0
  %reass.sub1479 = sub i64 %706, %707
  %709 = add i64 %reass.sub1479, 20
  %710 = select i1 %708, i64 20, i64 %709
  %711 = getelementptr i8, ptr %result.i296.i, i64 %710
  %712 = load ptr, ptr %result.i296.i, align 8
  %713 = load ptr, ptr %712, align 8
  %714 = getelementptr i8, ptr %713, i64 64
  %715 = load ptr, ptr %714, align 8
  call void %715({ ptr, i160 } %161, ptr nonnull %712, ptr %711)
  %716 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %717 = load ptr, ptr %result.i296.i, align 8
  %718 = load ptr, ptr %717, align 8
  %719 = getelementptr i8, ptr %718, i64 48
  %720 = load ptr, ptr %719, align 8
  %721 = call { i64, i64 } %720(ptr nonnull %717)
  %722 = extractvalue { i64, i64 } %721, 0
  %723 = extractvalue { i64, i64 } %721, 1
  %724 = urem i64 20, %723
  %725 = icmp eq i64 %724, 0
  %726 = sub i64 %723, %724
  %727 = select i1 %725, i64 0, i64 %726
  %728 = add i64 %722, 20
  %729 = add i64 %728, %727
  %730 = load ptr, ptr %697, align 8
  %731 = load ptr, ptr %730, align 8
  %732 = getelementptr i8, ptr %731, i64 48
  %733 = load ptr, ptr %732, align 8
  %734 = call { i64, i64 } %733(ptr nonnull %730)
  %735 = extractvalue { i64, i64 } %734, 1
  %736 = urem i64 %729, %735
  %737 = icmp eq i64 %736, 0
  %738 = sub i64 %735, %736
  %739 = select i1 %737, i64 0, i64 %738
  %740 = getelementptr i8, ptr %result.i296.i, i64 %729
  %741 = getelementptr i8, ptr %740, i64 %739
  %742 = load ptr, ptr %697, align 8
  %743 = load ptr, ptr %742, align 8
  %744 = getelementptr i8, ptr %743, i64 64
  %745 = load ptr, ptr %744, align 8
  call void %745({ ptr, i160 } %162, ptr nonnull %742, ptr %741)
  %746 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %747 = getelementptr i8, ptr %result.i296.i, i64 16
  store i32 %165, ptr %747, align 4
  %748 = load ptr, ptr %115, align 8
  %749 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %35)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %36)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %37)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %38)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %39)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %40)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %41)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0680.i)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %42)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %43)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %44)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %45)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %46)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %47)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %48)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %49)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i440)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %50)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %51)
  store ptr @Entry, ptr %51, align 8
  store ptr %result.i296.i, ptr %132, align 8
  store ptr %748, ptr %133, align 8
  store i32 9, ptr %134, align 8
  %750 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %51)
  %751 = load i32, ptr %111, align 4
  %752 = icmp sgt i32 %751, 0
  br i1 %752, label %.lr.ph.i, label %._crit_edge3.i

.lr.ph.i:                                         ; preds = %._crit_edge2.i
  %753 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %754 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %755 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  br label %756

756:                                              ; preds = %.cont.cont.i, %.lr.ph.i
  %offset.i.i260.i1018 = phi i32 [ 9, %.lr.ph.i ], [ %offset.i.i260.i, %.cont.cont.i ]
  %.sroa.speculated346.i1016 = phi ptr [ %748, %.lr.ph.i ], [ %.sroa.speculated346.i, %.cont.cont.i ]
  %.sroa.speculated352.i1014 = phi ptr [ %result.i296.i, %.lr.ph.i ], [ %.sroa.speculated352.i, %.cont.cont.i ]
  %.reg2mem195.0678.i = phi i32 [ 1, %.lr.ph.i ], [ %911, %.cont.cont.i ]
  %.reg2mem193.0677.i = phi i32 [ 0, %.lr.ph.i ], [ %912, %.cont.cont.i ]
  %757 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Entry, ptr undef, ptr undef, i32 undef }, ptr %.sroa.speculated352.i1014, 1
  %758 = insertvalue { ptr, ptr, ptr, i32 } %757, ptr %.sroa.speculated346.i1016, 2
  %759 = insertvalue { ptr, ptr, ptr, i32 } %758, i32 %offset.i.i260.i1018, 3
  %760 = sext i32 %offset.i.i260.i1018 to i64
  %gep = getelementptr ptr, ptr getelementptr inbounds (i8, ptr @Entry, i64 64), i64 %760
  %761 = load ptr, ptr %gep, align 8
  %762 = call ptr %761({ ptr, ptr, ptr, i32 } %759, ptr nonnull %2)
  %763 = call i32 %762({ ptr, ptr, ptr, i32 } %759, { ptr, ptr, ptr, i32 } %759, ptr nonnull %2)
  %764 = icmp eq i32 %.reg2mem195.0678.i, 1
  br i1 %764, label %765, label %829

765:                                              ; preds = %756
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %766 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %767 = load ptr, ptr %90, align 8
  %768 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %767, 0
  %769 = load ptr, ptr %91, align 8
  %770 = insertvalue { ptr, ptr, ptr, i32 } %768, ptr %769, 1
  %771 = load ptr, ptr %92, align 8
  %772 = insertvalue { ptr, ptr, ptr, i32 } %770, ptr %771, 2
  %773 = load i32, ptr %93, align 4
  %774 = insertvalue { ptr, ptr, ptr, i32 } %772, i32 %773, 3
  %hash_coef_ptr.i.i10.i1145 = getelementptr i8, ptr %767, i64 8
  %tbl_size_ptr.i.i11.i1146 = getelementptr i8, ptr %767, i64 16
  %offset_tbl_ptr.i.i12.i1147 = getelementptr i8, ptr %767, i64 40
  %hash_coef.i.i13.i1148 = load i64, ptr %hash_coef_ptr.i.i10.i1145, align 4
  %tbl_size.i.i14.i1149 = load i64, ptr %tbl_size_ptr.i.i11.i1146, align 4
  %offset_tbl.i.i15.i1150 = load ptr, ptr %offset_tbl_ptr.i.i12.i1147, align 8
  %product.i.i.i16.i1151 = mul i64 %hash_coef.i.i13.i1148, -5261542750394134544
  %shifted.i.i.i17.i1152 = lshr i64 %product.i.i.i16.i1151, 32
  %xored.i.i.i18.i1153 = xor i64 %shifted.i.i.i17.i1152, %product.i.i.i16.i1151
  %hash.i.i.i19.i1154 = and i64 %xored.i.i.i18.i1153, %tbl_size.i.i14.i1149
  %offset_ptr.i.i20.i1155 = getelementptr i32, ptr %offset_tbl.i.i15.i1150, i64 %hash.i.i.i19.i1154
  %offset.i.i21.i1156 = load i32, ptr %offset_ptr.i.i20.i1155, align 4
  %eq.i.i1157 = icmp eq i32 %773, %offset.i.i21.i1156
  call void @llvm.assume(i1 %eq.i.i1157) #30
  %775 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %776 = call ptr @llvm.invariant.start.p0(i64 600, ptr %767)
  %777 = sext i32 %773 to i64
  %778 = getelementptr ptr, ptr %767, i64 %777
  %779 = getelementptr i8, ptr %778, i64 64
  %780 = load ptr, ptr %779, align 8
  %781 = call ptr %780({ ptr, ptr, ptr, i32 } %774, ptr nonnull %2)
  %782 = call i32 %781({ ptr, ptr, ptr, i32 } %774, { ptr, ptr, ptr, i32 } %774, ptr nonnull %2)
  %783 = add i32 %782, -1
  %784 = and i32 %783, %763
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %785 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %786 = load ptr, ptr %90, align 8
  %787 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %786, 0
  %788 = load ptr, ptr %91, align 8
  %789 = insertvalue { ptr, ptr, ptr, i32 } %787, ptr %788, 1
  %790 = load ptr, ptr %92, align 8
  %791 = insertvalue { ptr, ptr, ptr, i32 } %789, ptr %790, 2
  %792 = load i32, ptr %93, align 4
  %793 = insertvalue { ptr, ptr, ptr, i32 } %791, i32 %792, 3
  %hash_coef_ptr.i.i172.i = getelementptr i8, ptr %786, i64 8
  %tbl_size_ptr.i.i173.i = getelementptr i8, ptr %786, i64 16
  %offset_tbl_ptr.i.i174.i = getelementptr i8, ptr %786, i64 40
  %hash_coef.i.i175.i = load i64, ptr %hash_coef_ptr.i.i172.i, align 4
  %tbl_size.i.i176.i = load i64, ptr %tbl_size_ptr.i.i173.i, align 4
  %offset_tbl.i.i177.i = load ptr, ptr %offset_tbl_ptr.i.i174.i, align 8
  %product.i.i.i178.i = mul i64 %hash_coef.i.i175.i, -5261542750394134544
  %shifted.i.i.i179.i = lshr i64 %product.i.i.i178.i, 32
  %xored.i.i.i180.i = xor i64 %shifted.i.i.i179.i, %product.i.i.i178.i
  %hash.i.i.i181.i = and i64 %xored.i.i.i180.i, %tbl_size.i.i176.i
  %offset_ptr.i.i182.i = getelementptr i32, ptr %offset_tbl.i.i177.i, i64 %hash.i.i.i181.i
  %offset.i.i183.i = load i32, ptr %offset_ptr.i.i182.i, align 4
  %eq.i.i482 = icmp eq i32 %792, %offset.i.i183.i
  call void @llvm.assume(i1 %eq.i.i482) #30
  store ptr @_parameterization_Ptri32, ptr %35, align 8
  %794 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %35)
  %795 = call ptr @llvm.invariant.start.p0(i64 600, ptr %786)
  %796 = sext i32 %792 to i64
  %797 = getelementptr ptr, ptr %786, i64 %796
  %798 = getelementptr i8, ptr %797, i64 120
  %799 = load ptr, ptr %798, align 8
  store ptr @i32_typ, ptr %36, align 8
  %800 = call ptr %799({ ptr, ptr, ptr, i32 } %793, ptr nonnull %36)
  %801 = call { ptr, i160 } %800({ ptr, ptr, ptr, i32 } %793, { ptr, ptr, ptr, i32 } %793, ptr nonnull %35, i32 %784)
  %.fca.0.extract112.i = extractvalue { ptr, i160 } %801, 0
  %802 = ptrtoint ptr %.sroa.speculated352.i1014 to i64
  %803 = ptrtoint ptr %.sroa.speculated346.i1016 to i64
  %.sroa.3111.0.insert.ext.i = zext i32 %offset.i.i260.i1018 to i160
  %.sroa.3111.0.insert.shift.i = shl nuw i160 %.sroa.3111.0.insert.ext.i, 128
  %.sroa.2110.0.insert.ext.i = zext i64 %803 to i160
  %.sroa.2110.0.insert.shift.i = shl nuw nsw i160 %.sroa.2110.0.insert.ext.i, 64
  %.sroa.2110.0.insert.insert.i = or disjoint i160 %.sroa.2110.0.insert.shift.i, %.sroa.3111.0.insert.shift.i
  %.sroa.0109.0.insert.ext.i = zext i64 %802 to i160
  %.sroa.0109.0.insert.insert.i = or disjoint i160 %.sroa.2110.0.insert.insert.i, %.sroa.0109.0.insert.ext.i
  %804 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0109.0.insert.insert.i, 1
  %805 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %806 = load ptr, ptr %90, align 8
  %807 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %806, 0
  %808 = load ptr, ptr %91, align 8
  %809 = insertvalue { ptr, ptr, ptr, i32 } %807, ptr %808, 1
  %810 = load ptr, ptr %92, align 8
  %811 = insertvalue { ptr, ptr, ptr, i32 } %809, ptr %810, 2
  %812 = load i32, ptr %93, align 4
  %813 = insertvalue { ptr, ptr, ptr, i32 } %811, i32 %812, 3
  %hash_coef_ptr.i.i186.i = getelementptr i8, ptr %806, i64 8
  %tbl_size_ptr.i.i187.i = getelementptr i8, ptr %806, i64 16
  %offset_tbl_ptr.i.i188.i = getelementptr i8, ptr %806, i64 40
  %hash_coef.i.i189.i = load i64, ptr %hash_coef_ptr.i.i186.i, align 4
  %tbl_size.i.i190.i = load i64, ptr %tbl_size_ptr.i.i187.i, align 4
  %offset_tbl.i.i191.i = load ptr, ptr %offset_tbl_ptr.i.i188.i, align 8
  %product.i.i.i192.i = mul i64 %hash_coef.i.i189.i, -5261542750394134544
  %shifted.i.i.i193.i = lshr i64 %product.i.i.i192.i, 32
  %xored.i.i.i194.i = xor i64 %shifted.i.i.i193.i, %product.i.i.i192.i
  %hash.i.i.i195.i = and i64 %xored.i.i.i194.i, %tbl_size.i.i190.i
  %offset_ptr.i.i196.i = getelementptr i32, ptr %offset_tbl.i.i191.i, i64 %hash.i.i.i195.i
  %offset.i.i197.i = load i32, ptr %offset_ptr.i.i196.i, align 4
  %eq.i200.i = icmp eq i32 %812, %offset.i.i197.i
  call void @llvm.assume(i1 %eq.i200.i) #30
  %814 = load ptr, ptr %result.i, align 8
  %815 = load ptr, ptr %73, align 8
  %result.i.i483 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %816 = getelementptr i8, ptr %result.i.i483, i64 16
  store ptr %815, ptr %816, align 8
  %817 = getelementptr i8, ptr %result.i.i483, i64 8
  store ptr %814, ptr %817, align 8
  %818 = getelementptr i8, ptr %result.i.i483, i64 24
  store ptr null, ptr %818, align 8
  %819 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i483)
  store ptr @Entry, ptr %result.i.i483, align 8
  store ptr @_parameterization_Ptri32, ptr %37, align 8
  store ptr %result.i.i483, ptr %137, align 8
  %820 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %37)
  %821 = call ptr @llvm.invariant.start.p0(i64 600, ptr %806)
  %822 = sext i32 %812 to i64
  %823 = getelementptr ptr, ptr %806, i64 %822
  %824 = getelementptr i8, ptr %823, i64 128
  %825 = load ptr, ptr %824, align 8
  store ptr @i32_typ, ptr %38, align 8
  store ptr @Entry, ptr %138, align 8
  %826 = call ptr %825({ ptr, ptr, ptr, i32 } %813, ptr nonnull %38)
  call void %826({ ptr, ptr, ptr, i32 } %813, { ptr, ptr, ptr, i32 } %813, ptr nonnull %37, i32 %784, { ptr, i160 } %804)
  %827 = icmp ne ptr %.fca.0.extract112.i, @nil_typ
  %828 = icmp ne ptr %.fca.0.extract112.i, null
  %.not140.i = and i1 %827, %828
  br i1 %.not140.i, label %.cont.cont.i, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit.thread

829:                                              ; preds = %756
  %830 = add i32 %763, 2127912214
  %831 = shl i32 %763, 12
  %832 = add i32 %830, %831
  %833 = ashr i32 %832, 19
  %834 = xor i32 %832, %833
  %835 = xor i32 %834, -949894596
  %836 = add i32 %835, 374761393
  %837 = shl i32 %835, 5
  %838 = add i32 %836, %837
  %839 = add i32 %838, -744332180
  %840 = shl i32 %838, 9
  %841 = xor i32 %839, %840
  %842 = add i32 %841, -42973499
  %843 = shl i32 %841, 3
  %844 = add i32 %842, %843
  %845 = ashr i32 %844, 16
  %846 = xor i32 %844, %845
  %847 = xor i32 %846, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %848 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %849 = load ptr, ptr %105, align 8
  %850 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %849, 0
  %851 = load ptr, ptr %106, align 8
  %852 = insertvalue { ptr, ptr, ptr, i32 } %850, ptr %851, 1
  %853 = load ptr, ptr %107, align 8
  %854 = insertvalue { ptr, ptr, ptr, i32 } %852, ptr %853, 2
  %855 = load i32, ptr %108, align 4
  %856 = insertvalue { ptr, ptr, ptr, i32 } %854, i32 %855, 3
  %hash_coef_ptr.i.i10.i1175 = getelementptr i8, ptr %849, i64 8
  %tbl_size_ptr.i.i11.i1176 = getelementptr i8, ptr %849, i64 16
  %offset_tbl_ptr.i.i12.i1177 = getelementptr i8, ptr %849, i64 40
  %hash_coef.i.i13.i1178 = load i64, ptr %hash_coef_ptr.i.i10.i1175, align 4
  %tbl_size.i.i14.i1179 = load i64, ptr %tbl_size_ptr.i.i11.i1176, align 4
  %offset_tbl.i.i15.i1180 = load ptr, ptr %offset_tbl_ptr.i.i12.i1177, align 8
  %product.i.i.i16.i1181 = mul i64 %hash_coef.i.i13.i1178, -5261542750394134544
  %shifted.i.i.i17.i1182 = lshr i64 %product.i.i.i16.i1181, 32
  %xored.i.i.i18.i1183 = xor i64 %shifted.i.i.i17.i1182, %product.i.i.i16.i1181
  %hash.i.i.i19.i1184 = and i64 %xored.i.i.i18.i1183, %tbl_size.i.i14.i1179
  %offset_ptr.i.i20.i1185 = getelementptr i32, ptr %offset_tbl.i.i15.i1180, i64 %hash.i.i.i19.i1184
  %offset.i.i21.i1186 = load i32, ptr %offset_ptr.i.i20.i1185, align 4
  %eq.i.i1187 = icmp eq i32 %855, %offset.i.i21.i1186
  call void @llvm.assume(i1 %eq.i.i1187) #30
  %857 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %858 = call ptr @llvm.invariant.start.p0(i64 600, ptr %849)
  %859 = sext i32 %855 to i64
  %860 = getelementptr ptr, ptr %849, i64 %859
  %861 = getelementptr i8, ptr %860, i64 64
  %862 = load ptr, ptr %861, align 8
  %863 = call ptr %862({ ptr, ptr, ptr, i32 } %856, ptr nonnull %2)
  %864 = call i32 %863({ ptr, ptr, ptr, i32 } %856, { ptr, ptr, ptr, i32 } %856, ptr nonnull %2)
  %865 = add i32 %864, -1
  %866 = and i32 %865, %847
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %867 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %868 = load ptr, ptr %105, align 8
  %869 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %868, 0
  %870 = load ptr, ptr %106, align 8
  %871 = insertvalue { ptr, ptr, ptr, i32 } %869, ptr %870, 1
  %872 = load ptr, ptr %107, align 8
  %873 = insertvalue { ptr, ptr, ptr, i32 } %871, ptr %872, 2
  %874 = load i32, ptr %108, align 4
  %875 = insertvalue { ptr, ptr, ptr, i32 } %873, i32 %874, 3
  %hash_coef_ptr.i.i202.i469 = getelementptr i8, ptr %868, i64 8
  %tbl_size_ptr.i.i203.i470 = getelementptr i8, ptr %868, i64 16
  %offset_tbl_ptr.i.i204.i471 = getelementptr i8, ptr %868, i64 40
  %hash_coef.i.i205.i472 = load i64, ptr %hash_coef_ptr.i.i202.i469, align 4
  %tbl_size.i.i206.i473 = load i64, ptr %tbl_size_ptr.i.i203.i470, align 4
  %offset_tbl.i.i207.i474 = load ptr, ptr %offset_tbl_ptr.i.i204.i471, align 8
  %product.i.i.i208.i475 = mul i64 %hash_coef.i.i205.i472, -5261542750394134544
  %shifted.i.i.i209.i476 = lshr i64 %product.i.i.i208.i475, 32
  %xored.i.i.i210.i477 = xor i64 %shifted.i.i.i209.i476, %product.i.i.i208.i475
  %hash.i.i.i211.i478 = and i64 %xored.i.i.i210.i477, %tbl_size.i.i206.i473
  %offset_ptr.i.i212.i479 = getelementptr i32, ptr %offset_tbl.i.i207.i474, i64 %hash.i.i.i211.i478
  %offset.i.i213.i480 = load i32, ptr %offset_ptr.i.i212.i479, align 4
  %eq.i216.i481 = icmp eq i32 %874, %offset.i.i213.i480
  call void @llvm.assume(i1 %eq.i216.i481) #30
  store ptr @_parameterization_Ptri32, ptr %43, align 8
  %876 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %43)
  %877 = call ptr @llvm.invariant.start.p0(i64 600, ptr %868)
  %878 = sext i32 %874 to i64
  %879 = getelementptr ptr, ptr %868, i64 %878
  %880 = getelementptr i8, ptr %879, i64 120
  %881 = load ptr, ptr %880, align 8
  store ptr @i32_typ, ptr %44, align 8
  %882 = call ptr %881({ ptr, ptr, ptr, i32 } %875, ptr nonnull %44)
  %883 = call { ptr, i160 } %882({ ptr, ptr, ptr, i32 } %875, { ptr, ptr, ptr, i32 } %875, ptr nonnull %43, i32 %866)
  %.fca.0.extract87.i = extractvalue { ptr, i160 } %883, 0
  %884 = ptrtoint ptr %.sroa.speculated352.i1014 to i64
  %885 = ptrtoint ptr %.sroa.speculated346.i1016 to i64
  %.sroa.3.0.insert.ext.i = zext i32 %offset.i.i260.i1018 to i160
  %.sroa.3.0.insert.shift.i = shl nuw i160 %.sroa.3.0.insert.ext.i, 128
  %.sroa.2.0.insert.ext.i = zext i64 %885 to i160
  %.sroa.2.0.insert.shift.i = shl nuw nsw i160 %.sroa.2.0.insert.ext.i, 64
  %.sroa.2.0.insert.insert.i = or disjoint i160 %.sroa.2.0.insert.shift.i, %.sroa.3.0.insert.shift.i
  %.sroa.0.0.insert.ext.i = zext i64 %884 to i160
  %.sroa.0.0.insert.insert.i = or disjoint i160 %.sroa.2.0.insert.insert.i, %.sroa.0.0.insert.ext.i
  %886 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0.0.insert.insert.i, 1
  %887 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %888 = load ptr, ptr %105, align 8
  %889 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %888, 0
  %890 = load ptr, ptr %106, align 8
  %891 = insertvalue { ptr, ptr, ptr, i32 } %889, ptr %890, 1
  %892 = load ptr, ptr %107, align 8
  %893 = insertvalue { ptr, ptr, ptr, i32 } %891, ptr %892, 2
  %894 = load i32, ptr %108, align 4
  %895 = insertvalue { ptr, ptr, ptr, i32 } %893, i32 %894, 3
  %hash_coef_ptr.i.i218.i = getelementptr i8, ptr %888, i64 8
  %tbl_size_ptr.i.i219.i = getelementptr i8, ptr %888, i64 16
  %offset_tbl_ptr.i.i220.i = getelementptr i8, ptr %888, i64 40
  %hash_coef.i.i221.i = load i64, ptr %hash_coef_ptr.i.i218.i, align 4
  %tbl_size.i.i222.i = load i64, ptr %tbl_size_ptr.i.i219.i, align 4
  %offset_tbl.i.i223.i = load ptr, ptr %offset_tbl_ptr.i.i220.i, align 8
  %product.i.i.i224.i = mul i64 %hash_coef.i.i221.i, -5261542750394134544
  %shifted.i.i.i225.i = lshr i64 %product.i.i.i224.i, 32
  %xored.i.i.i226.i = xor i64 %shifted.i.i.i225.i, %product.i.i.i224.i
  %hash.i.i.i227.i = and i64 %xored.i.i.i226.i, %tbl_size.i.i222.i
  %offset_ptr.i.i228.i = getelementptr i32, ptr %offset_tbl.i.i223.i, i64 %hash.i.i.i227.i
  %offset.i.i229.i = load i32, ptr %offset_ptr.i.i228.i, align 4
  %eq.i232.i = icmp eq i32 %894, %offset.i.i229.i
  call void @llvm.assume(i1 %eq.i232.i) #30
  %896 = load ptr, ptr %result.i, align 8
  %897 = load ptr, ptr %73, align 8
  %result.i233.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %898 = getelementptr i8, ptr %result.i233.i, i64 16
  store ptr %897, ptr %898, align 8
  %899 = getelementptr i8, ptr %result.i233.i, i64 8
  store ptr %896, ptr %899, align 8
  %900 = getelementptr i8, ptr %result.i233.i, i64 24
  store ptr null, ptr %900, align 8
  %901 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i233.i)
  store ptr @Entry, ptr %result.i233.i, align 8
  store ptr @_parameterization_Ptri32, ptr %45, align 8
  store ptr %result.i233.i, ptr %135, align 8
  %902 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %45)
  %903 = call ptr @llvm.invariant.start.p0(i64 600, ptr %888)
  %904 = sext i32 %894 to i64
  %905 = getelementptr ptr, ptr %888, i64 %904
  %906 = getelementptr i8, ptr %905, i64 128
  %907 = load ptr, ptr %906, align 8
  store ptr @i32_typ, ptr %46, align 8
  store ptr @Entry, ptr %136, align 8
  %908 = call ptr %907({ ptr, ptr, ptr, i32 } %895, ptr nonnull %46)
  call void %908({ ptr, ptr, ptr, i32 } %895, { ptr, ptr, ptr, i32 } %895, ptr nonnull %45, i32 %866, { ptr, i160 } %886)
  %909 = icmp ne ptr %.fca.0.extract87.i, @nil_typ
  %910 = icmp ne ptr %.fca.0.extract87.i, null
  %.not138.i = and i1 %909, %910
  br i1 %.not138.i, label %.cont.cont.i, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit.thread

.cont.cont.i:                                     ; preds = %829, %765
  %.sink = phi { ptr, i160 } [ %801, %765 ], [ %883, %829 ]
  %911 = phi i32 [ 2, %765 ], [ 1, %829 ]
  %vptr.i248.sroa.speculated.i = phi ptr [ %.fca.0.extract112.i, %765 ], [ %.fca.0.extract87.i, %829 ]
  %.fca.1.extract89.i = extractvalue { ptr, i160 } %.sink, 1
  %.sroa.3407.sroa.4.0.extract.shift.i = lshr i160 %.fca.1.extract89.i, 64
  %.sroa.3407.sroa.4.0.extract.trunc.i = trunc i160 %.sroa.3407.sroa.4.0.extract.shift.i to i64
  %.sroa.3407.sroa.0.0.extract.trunc.i = trunc i160 %.fca.1.extract89.i to i64
  %.sroa.speculated352.i = inttoptr i64 %.sroa.3407.sroa.0.0.extract.trunc.i to ptr
  %.sroa.speculated346.i = inttoptr i64 %.sroa.3407.sroa.4.0.extract.trunc.i to ptr
  %hash_coef_ptr.i.i249.i = getelementptr i8, ptr %vptr.i248.sroa.speculated.i, i64 8
  %tbl_size_ptr.i.i250.i = getelementptr i8, ptr %vptr.i248.sroa.speculated.i, i64 16
  %offset_tbl_ptr.i.i251.i = getelementptr i8, ptr %vptr.i248.sroa.speculated.i, i64 40
  %hash_coef.i.i252.i = load i64, ptr %hash_coef_ptr.i.i249.i, align 4
  %tbl_size.i.i253.i = load i64, ptr %tbl_size_ptr.i.i250.i, align 4
  %offset_tbl.i.i254.i = load ptr, ptr %offset_tbl_ptr.i.i251.i, align 8
  %product.i.i.i255.i = mul i64 %hash_coef.i.i252.i, 4015701072841558310
  %shifted.i.i.i256.i = lshr i64 %product.i.i.i255.i, 32
  %xored.i.i.i257.i = xor i64 %shifted.i.i.i256.i, %product.i.i.i255.i
  %hash.i.i.i258.i = and i64 %xored.i.i.i257.i, %tbl_size.i.i253.i
  %offset_ptr.i.i259.i = getelementptr i32, ptr %offset_tbl.i.i254.i, i64 %hash.i.i.i258.i
  %offset.i.i260.i = load i32, ptr %offset_ptr.i.i259.i, align 4
  store ptr %vptr.i248.sroa.speculated.i, ptr %51, align 8
  store ptr %.sroa.speculated352.i, ptr %132, align 8
  store ptr %.sroa.speculated346.i, ptr %133, align 8
  store i32 %offset.i.i260.i, ptr %134, align 8
  %912 = add nuw nsw i32 %.reg2mem193.0677.i, 1
  %913 = load i32, ptr %111, align 4
  %914 = icmp slt i32 %912, %913
  br i1 %914, label %756, label %._crit_edge3.i

HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit.thread: ; preds = %765, %829
  %915 = phi ptr [ %47, %829 ], [ %39, %765 ]
  %916 = phi ptr [ %48, %829 ], [ %40, %765 ]
  %917 = phi ptr [ %49, %829 ], [ %41, %765 ]
  %918 = phi ptr [ %.sroa.0.i440, %829 ], [ %.sroa.0680.i, %765 ]
  %919 = phi ptr [ %50, %829 ], [ %42, %765 ]
  %920 = load i32, ptr %109, align 4
  store i32 %920, ptr %915, align 4
  store i32 1, ptr %916, align 4
  %921 = add i32 %920, 1
  store i32 %921, ptr %917, align 4
  %922 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  store i32 %921, ptr %109, align 4
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %919, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %918, align 8
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %35)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %36)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %37)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %38)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %39)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %40)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %41)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %42)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %43)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %44)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %45)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %46)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %47)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %48)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %49)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i440)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %50)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %51)
  br label %HashMap_insert_keyK_valueV.exit

._crit_edge3.i:                                   ; preds = %.cont.cont.i, %._crit_edge2.i
  %923 = load i160, ptr %132, align 8
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %35)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %36)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %37)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %38)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %39)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %40)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %41)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %42)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %43)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %44)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %45)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %46)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %47)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %48)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %49)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i440)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %50)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %51)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %33)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %34)
  %924 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %925 = load ptr, ptr %90, align 8
  %926 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %925, 0
  %927 = load ptr, ptr %91, align 8
  %928 = insertvalue { ptr, ptr, ptr, i32 } %926, ptr %927, 1
  %929 = load ptr, ptr %92, align 8
  %930 = insertvalue { ptr, ptr, ptr, i32 } %928, ptr %929, 2
  %931 = load i32, ptr %93, align 4
  %932 = insertvalue { ptr, ptr, ptr, i32 } %930, i32 %931, 3
  %hash_coef_ptr.i.i18.i504 = getelementptr i8, ptr %925, i64 8
  %tbl_size_ptr.i.i19.i505 = getelementptr i8, ptr %925, i64 16
  %offset_tbl_ptr.i.i20.i506 = getelementptr i8, ptr %925, i64 40
  %hash_coef.i.i21.i507 = load i64, ptr %hash_coef_ptr.i.i18.i504, align 4
  %tbl_size.i.i22.i508 = load i64, ptr %tbl_size_ptr.i.i19.i505, align 4
  %offset_tbl.i.i23.i509 = load ptr, ptr %offset_tbl_ptr.i.i20.i506, align 8
  %product.i.i.i24.i510 = mul i64 %hash_coef.i.i21.i507, -5261542750394134544
  %shifted.i.i.i25.i511 = lshr i64 %product.i.i.i24.i510, 32
  %xored.i.i.i26.i512 = xor i64 %shifted.i.i.i25.i511, %product.i.i.i24.i510
  %hash.i.i.i27.i513 = and i64 %xored.i.i.i26.i512, %tbl_size.i.i22.i508
  %offset_ptr.i.i28.i514 = getelementptr i32, ptr %offset_tbl.i.i23.i509, i64 %hash.i.i.i27.i513
  %offset.i.i29.i515 = load i32, ptr %offset_ptr.i.i28.i514, align 4
  %eq.i.i516 = icmp eq i32 %931, %offset.i.i29.i515
  call void @llvm.assume(i1 %eq.i.i516) #30
  %933 = load ptr, ptr %105, align 8
  %934 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %933, 0
  %935 = load ptr, ptr %106, align 8
  %936 = insertvalue { ptr, ptr, ptr, i32 } %934, ptr %935, 1
  %937 = load ptr, ptr %107, align 8
  %938 = insertvalue { ptr, ptr, ptr, i32 } %936, ptr %937, 2
  %939 = load i32, ptr %108, align 4
  %hash_coef_ptr.i.i46.i521 = getelementptr i8, ptr %933, i64 8
  %tbl_size_ptr.i.i47.i522 = getelementptr i8, ptr %933, i64 16
  %offset_tbl_ptr.i.i48.i523 = getelementptr i8, ptr %933, i64 40
  %hash_coef.i.i49.i524 = load i64, ptr %hash_coef_ptr.i.i46.i521, align 4
  %tbl_size.i.i50.i525 = load i64, ptr %tbl_size_ptr.i.i47.i522, align 4
  %offset_tbl.i.i51.i526 = load ptr, ptr %offset_tbl_ptr.i.i48.i523, align 8
  %product.i.i.i52.i527 = mul i64 %hash_coef.i.i49.i524, -5261542750394134544
  %shifted.i.i.i53.i528 = lshr i64 %product.i.i.i52.i527, 32
  %xored.i.i.i54.i529 = xor i64 %shifted.i.i.i53.i528, %product.i.i.i52.i527
  %hash.i.i.i55.i530 = and i64 %xored.i.i.i54.i529, %tbl_size.i.i50.i525
  %offset_ptr.i.i56.i531 = getelementptr i32, ptr %offset_tbl.i.i51.i526, i64 %hash.i.i.i55.i530
  %offset.i.i57.i532 = load i32, ptr %offset_ptr.i.i56.i531, align 4
  %eq.i60.i533 = icmp eq i32 %939, %offset.i.i57.i532
  call void @llvm.assume(i1 %eq.i60.i533) #30
  %940 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %941 = call ptr @llvm.invariant.start.p0(i64 600, ptr %925)
  %942 = sext i32 %931 to i64
  %943 = getelementptr ptr, ptr %925, i64 %942
  %944 = getelementptr i8, ptr %943, i64 64
  %945 = load ptr, ptr %944, align 8
  %946 = call ptr %945({ ptr, ptr, ptr, i32 } %932, ptr nonnull %2)
  %947 = call i32 %946({ ptr, ptr, ptr, i32 } %932, { ptr, ptr, ptr, i32 } %932, ptr nonnull %2)
  %948 = shl i32 %947, 1
  %949 = call i32 @llvm.smax.i32(i32 %948, i32 16)
  %950 = load ptr, ptr %result.i, align 8
  %951 = load ptr, ptr %73, align 8
  %result.i.i534 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %952 = getelementptr i8, ptr %result.i.i534, i64 16
  store ptr @_parameterization_Nil, ptr %952, align 8
  %result.i75.i535 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %953 = getelementptr i8, ptr %result.i75.i535, i64 16
  store ptr %951, ptr %953, align 8
  %954 = getelementptr i8, ptr %result.i75.i535, i64 8
  store ptr %950, ptr %954, align 8
  %955 = getelementptr i8, ptr %result.i75.i535, i64 24
  store ptr null, ptr %955, align 8
  %956 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i75.i535)
  store ptr @Entry, ptr %result.i75.i535, align 8
  %957 = getelementptr i8, ptr %result.i.i534, i64 8
  store ptr %result.i75.i535, ptr %957, align 8
  %958 = getelementptr i8, ptr %result.i.i534, i64 24
  store ptr null, ptr %958, align 8
  %959 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i534)
  store ptr @union_typ, ptr %result.i.i534, align 8
  %result.i76.i536 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i534, ptr %result.i76.i536, align 8
  %960 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i76.i536)
  store ptr @Array, ptr %33, align 8
  store ptr %result.i76.i536, ptr %139, align 8
  store i32 9, ptr %140, align 8
  %961 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %33)
  %962 = getelementptr i8, ptr %result.i76.i536, i64 16
  store i32 %949, ptr %962, align 4
  %963 = getelementptr i8, ptr %result.i76.i536, i64 20
  store i32 %949, ptr %963, align 4
  %964 = zext nneg i32 %949 to i64
  %965 = shl nuw nsw i64 %964, 5
  %result.i.i.i537 = call noalias ptr @bump_malloc_inner(i64 noundef %965, ptr nonnull @current_ptr) #29
  %966 = getelementptr i8, ptr %result.i76.i536, i64 8
  store ptr %result.i.i.i537, ptr %966, align 8
  %967 = load ptr, ptr %141, align 8
  store ptr @Array, ptr %90, align 8
  store ptr %result.i76.i536, ptr %91, align 8
  store ptr %967, ptr %92, align 8
  store i32 9, ptr %93, align 4
  %result.i91.i550 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %968 = getelementptr i8, ptr %result.i91.i550, i64 16
  store ptr @_parameterization_Nil, ptr %968, align 8
  %result.i92.i551 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %969 = getelementptr i8, ptr %result.i92.i551, i64 16
  store ptr %951, ptr %969, align 8
  %970 = getelementptr i8, ptr %result.i92.i551, i64 8
  store ptr %950, ptr %970, align 8
  %971 = getelementptr i8, ptr %result.i92.i551, i64 24
  store ptr null, ptr %971, align 8
  %972 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i92.i551)
  store ptr @Entry, ptr %result.i92.i551, align 8
  %973 = getelementptr i8, ptr %result.i91.i550, i64 8
  store ptr %result.i92.i551, ptr %973, align 8
  %974 = getelementptr i8, ptr %result.i91.i550, i64 24
  store ptr null, ptr %974, align 8
  %975 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i91.i550)
  store ptr @union_typ, ptr %result.i91.i550, align 8
  %result.i93.i552 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i91.i550, ptr %result.i93.i552, align 8
  %976 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i93.i552)
  store ptr @Array, ptr %34, align 8
  store ptr %result.i93.i552, ptr %142, align 8
  store i32 9, ptr %143, align 8
  %977 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %34)
  %978 = getelementptr i8, ptr %result.i93.i552, i64 16
  store i32 %949, ptr %978, align 4
  %979 = getelementptr i8, ptr %result.i93.i552, i64 20
  store i32 %949, ptr %979, align 4
  %result.i.i234.i553 = call noalias ptr @bump_malloc_inner(i64 noundef %965, ptr nonnull @current_ptr) #29
  %980 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %981 = getelementptr i8, ptr %result.i93.i552, i64 8
  store ptr %result.i.i234.i553, ptr %981, align 8
  %982 = load ptr, ptr %144, align 8
  store ptr @Array, ptr %105, align 8
  store ptr %result.i93.i552, ptr %106, align 8
  store ptr %982, ptr %107, align 8
  store i32 9, ptr %108, align 4
  store i32 0, ptr %109, align 4
  %983 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10)
  %984 = icmp sgt i32 %947, 0
  br i1 %984, label %.lr.ph.i1190, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1293.critedge

.lr.ph.i1190:                                     ; preds = %._crit_edge3.i
  %invariant.gep.i1191 = getelementptr i8, ptr %925, i64 120
  %offset_tbl.i.i24.i1193 = load ptr, ptr %offset_tbl_ptr.i.i20.i506, align 8
  %hash_coef.i.i22.i1195 = load i64, ptr %hash_coef_ptr.i.i18.i504, align 4
  %product.i.i.i25.i1196 = mul i64 %hash_coef.i.i22.i1195, -5261542750394134544
  %shifted.i.i.i26.i1197 = lshr i64 %product.i.i.i25.i1196, 32
  %xored.i.i.i27.i1198 = xor i64 %shifted.i.i.i26.i1197, %product.i.i.i25.i1196
  %tbl_size.i.i23.i1200 = load i64, ptr %tbl_size_ptr.i.i19.i505, align 4
  %hash.i.i.i28.i1201 = and i64 %xored.i.i.i27.i1198, %tbl_size.i.i23.i1200
  %offset_ptr.i.i29.i1202 = getelementptr i32, ptr %offset_tbl.i.i24.i1193, i64 %hash.i.i.i28.i1201
  %offset.i.i30.i1203 = load i32, ptr %offset_ptr.i.i29.i1202, align 4
  %985 = insertvalue { ptr, ptr, ptr, i32 } %930, i32 %offset.i.i30.i1203, 3
  %986 = sext i32 %offset.i.i30.i1203 to i64
  %gep.i1218 = getelementptr ptr, ptr %invariant.gep.i1191, i64 %986
  %987 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %988

988:                                              ; preds = %._crit_edge1.i1222, %.lr.ph.i1190
  %.reg2mem13.079.i1219 = phi i32 [ 0, %.lr.ph.i1190 ], [ %1005, %._crit_edge1.i1222 ]
  store ptr @_parameterization_Ptri32, ptr %9, align 8
  %989 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %9)
  %990 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %925)
  %991 = load ptr, ptr %gep.i1218, align 8
  store ptr @i32_typ, ptr %10, align 8
  %992 = call ptr %991({ ptr, ptr, ptr, i32 } %985, ptr nonnull %10)
  %993 = call { ptr, i160 } %992({ ptr, ptr, ptr, i32 } %985, { ptr, ptr, ptr, i32 } %985, ptr nonnull %9, i32 %.reg2mem13.079.i1219)
  %.fca.0.extract11.i1220 = extractvalue { ptr, i160 } %993, 0
  %994 = icmp ne ptr %.fca.0.extract11.i1220, @nil_typ
  %995 = icmp ne ptr %.fca.0.extract11.i1220, null
  %.not17.i1221 = and i1 %994, %995
  br i1 %.not17.i1221, label %996, label %._crit_edge1.i1222

996:                                              ; preds = %988
  %.fca.1.extract13.i1223 = extractvalue { ptr, i160 } %993, 1
  %.sroa.375.8.extract.trunc.i1224 = trunc i160 %.fca.1.extract13.i1223 to i64
  %997 = inttoptr i64 %.sroa.375.8.extract.trunc.i1224 to ptr
  %.sroa.576.8.extract.shift.i1225 = lshr i160 %.fca.1.extract13.i1223, 64
  %.sroa.576.8.extract.trunc.i1226 = trunc i160 %.sroa.576.8.extract.shift.i1225 to i64
  %998 = inttoptr i64 %.sroa.576.8.extract.trunc.i1226 to ptr
  %hash_coef_ptr.i.i33.i1227 = getelementptr i8, ptr %.fca.0.extract11.i1220, i64 8
  %tbl_size_ptr.i.i34.i1228 = getelementptr i8, ptr %.fca.0.extract11.i1220, i64 16
  %offset_tbl_ptr.i.i35.i1229 = getelementptr i8, ptr %.fca.0.extract11.i1220, i64 40
  %hash_coef.i.i36.i1230 = load i64, ptr %hash_coef_ptr.i.i33.i1227, align 4
  %tbl_size.i.i37.i1231 = load i64, ptr %tbl_size_ptr.i.i34.i1228, align 4
  %offset_tbl.i.i38.i1232 = load ptr, ptr %offset_tbl_ptr.i.i35.i1229, align 8
  %product.i.i.i39.i1233 = mul i64 %hash_coef.i.i36.i1230, 4015701072841558310
  %shifted.i.i.i40.i1234 = lshr i64 %product.i.i.i39.i1233, 32
  %xored.i.i.i41.i1235 = xor i64 %shifted.i.i.i40.i1234, %product.i.i.i39.i1233
  %hash.i.i.i42.i1236 = and i64 %xored.i.i.i41.i1235, %tbl_size.i.i37.i1231
  %offset_ptr.i.i43.i1237 = getelementptr i32, ptr %offset_tbl.i.i38.i1232, i64 %hash.i.i.i42.i1236
  %offset.i.i58.i1238 = load i32, ptr %offset_ptr.i.i43.i1237, align 4
  %999 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i1220, 0
  %1000 = insertvalue { ptr, ptr, ptr, i32 } %999, ptr %997, 1
  %1001 = insertvalue { ptr, ptr, ptr, i32 } %1000, ptr %998, 2
  %1002 = insertvalue { ptr, ptr, ptr, i32 } %1001, i32 %offset.i.i58.i1238, 3
  %1003 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1004 = call { ptr, i160 } @HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %157, { ptr, ptr, ptr, i32 } poison, ptr nonnull poison, { ptr, ptr, ptr, i32 } %1002)
  br label %._crit_edge1.i1222

._crit_edge1.i1222:                               ; preds = %996, %988
  %1005 = add nuw nsw i32 %.reg2mem13.079.i1219, 1
  %1006 = icmp slt i32 %1005, %947
  br i1 %1006, label %988, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1240

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1240: ; preds = %._crit_edge1.i1222
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10)
  %1007 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8)
  %invariant.gep.i1244 = getelementptr i8, ptr %933, i64 120
  %offset_tbl.i.i24.i1246 = load ptr, ptr %offset_tbl_ptr.i.i48.i523, align 8
  %hash_coef.i.i22.i1248 = load i64, ptr %hash_coef_ptr.i.i46.i521, align 4
  %product.i.i.i25.i1249 = mul i64 %hash_coef.i.i22.i1248, -5261542750394134544
  %shifted.i.i.i26.i1250 = lshr i64 %product.i.i.i25.i1249, 32
  %xored.i.i.i27.i1251 = xor i64 %shifted.i.i.i26.i1250, %product.i.i.i25.i1249
  %tbl_size.i.i23.i1253 = load i64, ptr %tbl_size_ptr.i.i47.i522, align 4
  %hash.i.i.i28.i1254 = and i64 %xored.i.i.i27.i1251, %tbl_size.i.i23.i1253
  %offset_ptr.i.i29.i1255 = getelementptr i32, ptr %offset_tbl.i.i24.i1246, i64 %hash.i.i.i28.i1254
  %offset.i.i30.i1256 = load i32, ptr %offset_ptr.i.i29.i1255, align 4
  %1008 = insertvalue { ptr, ptr, ptr, i32 } %938, i32 %offset.i.i30.i1256, 3
  %1009 = sext i32 %offset.i.i30.i1256 to i64
  %gep.i1271 = getelementptr ptr, ptr %invariant.gep.i1244, i64 %1009
  %1010 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %1011

1011:                                             ; preds = %._crit_edge1.i1275, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1240
  %.reg2mem13.079.i1272 = phi i32 [ 0, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1240 ], [ %1028, %._crit_edge1.i1275 ]
  store ptr @_parameterization_Ptri32, ptr %7, align 8
  %1012 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %7)
  %1013 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %933)
  %1014 = load ptr, ptr %gep.i1271, align 8
  store ptr @i32_typ, ptr %8, align 8
  %1015 = call ptr %1014({ ptr, ptr, ptr, i32 } %1008, ptr nonnull %8)
  %1016 = call { ptr, i160 } %1015({ ptr, ptr, ptr, i32 } %1008, { ptr, ptr, ptr, i32 } %1008, ptr nonnull %7, i32 %.reg2mem13.079.i1272)
  %.fca.0.extract11.i1273 = extractvalue { ptr, i160 } %1016, 0
  %1017 = icmp ne ptr %.fca.0.extract11.i1273, @nil_typ
  %1018 = icmp ne ptr %.fca.0.extract11.i1273, null
  %.not17.i1274 = and i1 %1017, %1018
  br i1 %.not17.i1274, label %1019, label %._crit_edge1.i1275

1019:                                             ; preds = %1011
  %.fca.1.extract13.i1276 = extractvalue { ptr, i160 } %1016, 1
  %.sroa.375.8.extract.trunc.i1277 = trunc i160 %.fca.1.extract13.i1276 to i64
  %1020 = inttoptr i64 %.sroa.375.8.extract.trunc.i1277 to ptr
  %.sroa.576.8.extract.shift.i1278 = lshr i160 %.fca.1.extract13.i1276, 64
  %.sroa.576.8.extract.trunc.i1279 = trunc i160 %.sroa.576.8.extract.shift.i1278 to i64
  %1021 = inttoptr i64 %.sroa.576.8.extract.trunc.i1279 to ptr
  %hash_coef_ptr.i.i33.i1280 = getelementptr i8, ptr %.fca.0.extract11.i1273, i64 8
  %tbl_size_ptr.i.i34.i1281 = getelementptr i8, ptr %.fca.0.extract11.i1273, i64 16
  %offset_tbl_ptr.i.i35.i1282 = getelementptr i8, ptr %.fca.0.extract11.i1273, i64 40
  %hash_coef.i.i36.i1283 = load i64, ptr %hash_coef_ptr.i.i33.i1280, align 4
  %tbl_size.i.i37.i1284 = load i64, ptr %tbl_size_ptr.i.i34.i1281, align 4
  %offset_tbl.i.i38.i1285 = load ptr, ptr %offset_tbl_ptr.i.i35.i1282, align 8
  %product.i.i.i39.i1286 = mul i64 %hash_coef.i.i36.i1283, 4015701072841558310
  %shifted.i.i.i40.i1287 = lshr i64 %product.i.i.i39.i1286, 32
  %xored.i.i.i41.i1288 = xor i64 %shifted.i.i.i40.i1287, %product.i.i.i39.i1286
  %hash.i.i.i42.i1289 = and i64 %xored.i.i.i41.i1288, %tbl_size.i.i37.i1284
  %offset_ptr.i.i43.i1290 = getelementptr i32, ptr %offset_tbl.i.i38.i1285, i64 %hash.i.i.i42.i1289
  %offset.i.i58.i1291 = load i32, ptr %offset_ptr.i.i43.i1290, align 4
  %1022 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i1273, 0
  %1023 = insertvalue { ptr, ptr, ptr, i32 } %1022, ptr %1020, 1
  %1024 = insertvalue { ptr, ptr, ptr, i32 } %1023, ptr %1021, 2
  %1025 = insertvalue { ptr, ptr, ptr, i32 } %1024, i32 %offset.i.i58.i1291, 3
  %1026 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1027 = call { ptr, i160 } @HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %157, { ptr, ptr, ptr, i32 } poison, ptr nonnull poison, { ptr, ptr, ptr, i32 } %1025)
  br label %._crit_edge1.i1275

._crit_edge1.i1275:                               ; preds = %1019, %1011
  %1028 = add nuw nsw i32 %.reg2mem13.079.i1272, 1
  %1029 = icmp slt i32 %1028, %947
  br i1 %1029, label %1011, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1293

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1293.critedge: ; preds = %._crit_edge3.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8)
  br label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1293

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1293: ; preds = %._crit_edge1.i1275, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1293.critedge
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %33)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %34)
  %1030 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %17)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %18)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %19)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %20)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %21)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %22)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %23)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0680.i596)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %24)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %25)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %26)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %27)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %28)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %29)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %30)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %31)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i598)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %32)
  %1031 = load i32, ptr %111, align 4
  %1032 = icmp sgt i32 %1031, 0
  br i1 %1032, label %.lr.ph.i633, label %._crit_edge3.1.i

.lr.ph.i633:                                      ; preds = %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1293
  %1033 = lshr i160 %923, 64
  %1034 = insertelement <2 x i160> poison, i160 %1033, i64 0
  %1035 = insertelement <2 x i160> %1034, i160 %923, i64 1
  %1036 = trunc <2 x i160> %1035 to <2 x i64>
  %1037 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1038 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1039 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  br label %1040

1040:                                             ; preds = %.cont.cont.i687, %.lr.ph.i633
  %offset.i.i260.i7041026 = phi i32 [ 9, %.lr.ph.i633 ], [ %offset.i.i260.i704, %.cont.cont.i687 ]
  %.reg2mem195.0678.i635 = phi i32 [ 1, %.lr.ph.i633 ], [ %1194, %.cont.cont.i687 ]
  %.reg2mem193.0677.i636 = phi i32 [ 0, %.lr.ph.i633 ], [ %1199, %.cont.cont.i687 ]
  %1041 = phi <2 x i64> [ %1036, %.lr.ph.i633 ], [ %1198, %.cont.cont.i687 ]
  %1042 = extractelement <2 x i64> %1041, i64 1
  %.sroa.speculated352.i6911022 = inttoptr i64 %1042 to ptr
  %1043 = extractelement <2 x i64> %1041, i64 0
  %.sroa.speculated346.i6921024 = inttoptr i64 %1043 to ptr
  %1044 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Entry, ptr undef, ptr undef, i32 undef }, ptr %.sroa.speculated352.i6911022, 1
  %1045 = insertvalue { ptr, ptr, ptr, i32 } %1044, ptr %.sroa.speculated346.i6921024, 2
  %1046 = insertvalue { ptr, ptr, ptr, i32 } %1045, i32 %offset.i.i260.i7041026, 3
  %1047 = sext i32 %offset.i.i260.i7041026 to i64
  %gep1020 = getelementptr ptr, ptr getelementptr inbounds (i8, ptr @Entry, i64 64), i64 %1047
  %1048 = load ptr, ptr %gep1020, align 8
  %1049 = call ptr %1048({ ptr, ptr, ptr, i32 } %1046, ptr nonnull %2)
  %1050 = call i32 %1049({ ptr, ptr, ptr, i32 } %1046, { ptr, ptr, ptr, i32 } %1046, ptr nonnull %2)
  %1051 = icmp eq i32 %.reg2mem195.0678.i635, 1
  br i1 %1051, label %1052, label %1114

1052:                                             ; preds = %1040
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %1053 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1054 = load ptr, ptr %90, align 8
  %1055 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1054, 0
  %1056 = load ptr, ptr %91, align 8
  %1057 = insertvalue { ptr, ptr, ptr, i32 } %1055, ptr %1056, 1
  %1058 = load ptr, ptr %92, align 8
  %1059 = insertvalue { ptr, ptr, ptr, i32 } %1057, ptr %1058, 2
  %1060 = load i32, ptr %93, align 4
  %1061 = insertvalue { ptr, ptr, ptr, i32 } %1059, i32 %1060, 3
  %hash_coef_ptr.i.i10.i1311 = getelementptr i8, ptr %1054, i64 8
  %tbl_size_ptr.i.i11.i1312 = getelementptr i8, ptr %1054, i64 16
  %offset_tbl_ptr.i.i12.i1313 = getelementptr i8, ptr %1054, i64 40
  %hash_coef.i.i13.i1314 = load i64, ptr %hash_coef_ptr.i.i10.i1311, align 4
  %tbl_size.i.i14.i1315 = load i64, ptr %tbl_size_ptr.i.i11.i1312, align 4
  %offset_tbl.i.i15.i1316 = load ptr, ptr %offset_tbl_ptr.i.i12.i1313, align 8
  %product.i.i.i16.i1317 = mul i64 %hash_coef.i.i13.i1314, -5261542750394134544
  %shifted.i.i.i17.i1318 = lshr i64 %product.i.i.i16.i1317, 32
  %xored.i.i.i18.i1319 = xor i64 %shifted.i.i.i17.i1318, %product.i.i.i16.i1317
  %hash.i.i.i19.i1320 = and i64 %xored.i.i.i18.i1319, %tbl_size.i.i14.i1315
  %offset_ptr.i.i20.i1321 = getelementptr i32, ptr %offset_tbl.i.i15.i1316, i64 %hash.i.i.i19.i1320
  %offset.i.i21.i1322 = load i32, ptr %offset_ptr.i.i20.i1321, align 4
  %eq.i.i1323 = icmp eq i32 %1060, %offset.i.i21.i1322
  call void @llvm.assume(i1 %eq.i.i1323) #30
  %1062 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1063 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1054)
  %1064 = sext i32 %1060 to i64
  %1065 = getelementptr ptr, ptr %1054, i64 %1064
  %1066 = getelementptr i8, ptr %1065, i64 64
  %1067 = load ptr, ptr %1066, align 8
  %1068 = call ptr %1067({ ptr, ptr, ptr, i32 } %1061, ptr nonnull %2)
  %1069 = call i32 %1068({ ptr, ptr, ptr, i32 } %1061, { ptr, ptr, ptr, i32 } %1061, ptr nonnull %2)
  %1070 = add i32 %1069, -1
  %1071 = and i32 %1070, %1050
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %1072 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1073 = load ptr, ptr %90, align 8
  %1074 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1073, 0
  %1075 = load ptr, ptr %91, align 8
  %1076 = insertvalue { ptr, ptr, ptr, i32 } %1074, ptr %1075, 1
  %1077 = load ptr, ptr %92, align 8
  %1078 = insertvalue { ptr, ptr, ptr, i32 } %1076, ptr %1077, 2
  %1079 = load i32, ptr %93, align 4
  %1080 = insertvalue { ptr, ptr, ptr, i32 } %1078, i32 %1079, 3
  %hash_coef_ptr.i.i172.i709 = getelementptr i8, ptr %1073, i64 8
  %tbl_size_ptr.i.i173.i710 = getelementptr i8, ptr %1073, i64 16
  %offset_tbl_ptr.i.i174.i711 = getelementptr i8, ptr %1073, i64 40
  %hash_coef.i.i175.i712 = load i64, ptr %hash_coef_ptr.i.i172.i709, align 4
  %tbl_size.i.i176.i713 = load i64, ptr %tbl_size_ptr.i.i173.i710, align 4
  %offset_tbl.i.i177.i714 = load ptr, ptr %offset_tbl_ptr.i.i174.i711, align 8
  %product.i.i.i178.i715 = mul i64 %hash_coef.i.i175.i712, -5261542750394134544
  %shifted.i.i.i179.i716 = lshr i64 %product.i.i.i178.i715, 32
  %xored.i.i.i180.i717 = xor i64 %shifted.i.i.i179.i716, %product.i.i.i178.i715
  %hash.i.i.i181.i718 = and i64 %xored.i.i.i180.i717, %tbl_size.i.i176.i713
  %offset_ptr.i.i182.i719 = getelementptr i32, ptr %offset_tbl.i.i177.i714, i64 %hash.i.i.i181.i718
  %offset.i.i183.i720 = load i32, ptr %offset_ptr.i.i182.i719, align 4
  %eq.i.i721 = icmp eq i32 %1079, %offset.i.i183.i720
  call void @llvm.assume(i1 %eq.i.i721) #30
  store ptr @_parameterization_Ptri32, ptr %17, align 8
  %1081 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %17)
  %1082 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1073)
  %1083 = sext i32 %1079 to i64
  %1084 = getelementptr ptr, ptr %1073, i64 %1083
  %1085 = getelementptr i8, ptr %1084, i64 120
  %1086 = load ptr, ptr %1085, align 8
  store ptr @i32_typ, ptr %18, align 8
  %1087 = call ptr %1086({ ptr, ptr, ptr, i32 } %1080, ptr nonnull %18)
  %1088 = call { ptr, i160 } %1087({ ptr, ptr, ptr, i32 } %1080, { ptr, ptr, ptr, i32 } %1080, ptr nonnull %17, i32 %1071)
  %.fca.0.extract112.i722 = extractvalue { ptr, i160 } %1088, 0
  %.sroa.3111.0.insert.ext.i723 = zext i32 %offset.i.i260.i7041026 to i160
  %.sroa.3111.0.insert.shift.i724 = shl nuw i160 %.sroa.3111.0.insert.ext.i723, 128
  %.sroa.2110.0.insert.ext.i725 = zext i64 %1043 to i160
  %.sroa.2110.0.insert.shift.i726 = shl nuw nsw i160 %.sroa.2110.0.insert.ext.i725, 64
  %.sroa.2110.0.insert.insert.i727 = or disjoint i160 %.sroa.2110.0.insert.shift.i726, %.sroa.3111.0.insert.shift.i724
  %.sroa.0109.0.insert.ext.i728 = zext i64 %1042 to i160
  %.sroa.0109.0.insert.insert.i729 = or disjoint i160 %.sroa.2110.0.insert.insert.i727, %.sroa.0109.0.insert.ext.i728
  %1089 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0109.0.insert.insert.i729, 1
  %1090 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1091 = load ptr, ptr %90, align 8
  %1092 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1091, 0
  %1093 = load ptr, ptr %91, align 8
  %1094 = insertvalue { ptr, ptr, ptr, i32 } %1092, ptr %1093, 1
  %1095 = load ptr, ptr %92, align 8
  %1096 = insertvalue { ptr, ptr, ptr, i32 } %1094, ptr %1095, 2
  %1097 = load i32, ptr %93, align 4
  %1098 = insertvalue { ptr, ptr, ptr, i32 } %1096, i32 %1097, 3
  %hash_coef_ptr.i.i186.i734 = getelementptr i8, ptr %1091, i64 8
  %tbl_size_ptr.i.i187.i735 = getelementptr i8, ptr %1091, i64 16
  %offset_tbl_ptr.i.i188.i736 = getelementptr i8, ptr %1091, i64 40
  %hash_coef.i.i189.i737 = load i64, ptr %hash_coef_ptr.i.i186.i734, align 4
  %tbl_size.i.i190.i738 = load i64, ptr %tbl_size_ptr.i.i187.i735, align 4
  %offset_tbl.i.i191.i739 = load ptr, ptr %offset_tbl_ptr.i.i188.i736, align 8
  %product.i.i.i192.i740 = mul i64 %hash_coef.i.i189.i737, -5261542750394134544
  %shifted.i.i.i193.i741 = lshr i64 %product.i.i.i192.i740, 32
  %xored.i.i.i194.i742 = xor i64 %shifted.i.i.i193.i741, %product.i.i.i192.i740
  %hash.i.i.i195.i743 = and i64 %xored.i.i.i194.i742, %tbl_size.i.i190.i738
  %offset_ptr.i.i196.i744 = getelementptr i32, ptr %offset_tbl.i.i191.i739, i64 %hash.i.i.i195.i743
  %offset.i.i197.i745 = load i32, ptr %offset_ptr.i.i196.i744, align 4
  %eq.i200.i746 = icmp eq i32 %1097, %offset.i.i197.i745
  call void @llvm.assume(i1 %eq.i200.i746) #30
  %1099 = load ptr, ptr %result.i, align 8
  %1100 = load ptr, ptr %73, align 8
  %result.i.i747 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1101 = getelementptr i8, ptr %result.i.i747, i64 16
  store ptr %1100, ptr %1101, align 8
  %1102 = getelementptr i8, ptr %result.i.i747, i64 8
  store ptr %1099, ptr %1102, align 8
  %1103 = getelementptr i8, ptr %result.i.i747, i64 24
  store ptr null, ptr %1103, align 8
  %1104 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i747)
  store ptr @Entry, ptr %result.i.i747, align 8
  store ptr @_parameterization_Ptri32, ptr %19, align 8
  store ptr %result.i.i747, ptr %147, align 8
  %1105 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %19)
  %1106 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1091)
  %1107 = sext i32 %1097 to i64
  %1108 = getelementptr ptr, ptr %1091, i64 %1107
  %1109 = getelementptr i8, ptr %1108, i64 128
  %1110 = load ptr, ptr %1109, align 8
  store ptr @i32_typ, ptr %20, align 8
  store ptr @Entry, ptr %148, align 8
  %1111 = call ptr %1110({ ptr, ptr, ptr, i32 } %1098, ptr nonnull %20)
  call void %1111({ ptr, ptr, ptr, i32 } %1098, { ptr, ptr, ptr, i32 } %1098, ptr nonnull %19, i32 %1071, { ptr, i160 } %1089)
  %1112 = icmp ne ptr %.fca.0.extract112.i722, @nil_typ
  %1113 = icmp ne ptr %.fca.0.extract112.i722, null
  %.not140.i748 = and i1 %1112, %1113
  br i1 %.not140.i748, label %.cont.cont.i687, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit754.thread

1114:                                             ; preds = %1040
  %1115 = add i32 %1050, 2127912214
  %1116 = shl i32 %1050, 12
  %1117 = add i32 %1115, %1116
  %1118 = ashr i32 %1117, 19
  %1119 = xor i32 %1117, %1118
  %1120 = xor i32 %1119, -949894596
  %1121 = add i32 %1120, 374761393
  %1122 = shl i32 %1120, 5
  %1123 = add i32 %1121, %1122
  %1124 = add i32 %1123, -744332180
  %1125 = shl i32 %1123, 9
  %1126 = xor i32 %1124, %1125
  %1127 = add i32 %1126, -42973499
  %1128 = shl i32 %1126, 3
  %1129 = add i32 %1127, %1128
  %1130 = ashr i32 %1129, 16
  %1131 = xor i32 %1129, %1130
  %1132 = xor i32 %1131, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %1133 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1134 = load ptr, ptr %105, align 8
  %1135 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1134, 0
  %1136 = load ptr, ptr %106, align 8
  %1137 = insertvalue { ptr, ptr, ptr, i32 } %1135, ptr %1136, 1
  %1138 = load ptr, ptr %107, align 8
  %1139 = insertvalue { ptr, ptr, ptr, i32 } %1137, ptr %1138, 2
  %1140 = load i32, ptr %108, align 4
  %1141 = insertvalue { ptr, ptr, ptr, i32 } %1139, i32 %1140, 3
  %hash_coef_ptr.i.i10.i1341 = getelementptr i8, ptr %1134, i64 8
  %tbl_size_ptr.i.i11.i1342 = getelementptr i8, ptr %1134, i64 16
  %offset_tbl_ptr.i.i12.i1343 = getelementptr i8, ptr %1134, i64 40
  %hash_coef.i.i13.i1344 = load i64, ptr %hash_coef_ptr.i.i10.i1341, align 4
  %tbl_size.i.i14.i1345 = load i64, ptr %tbl_size_ptr.i.i11.i1342, align 4
  %offset_tbl.i.i15.i1346 = load ptr, ptr %offset_tbl_ptr.i.i12.i1343, align 8
  %product.i.i.i16.i1347 = mul i64 %hash_coef.i.i13.i1344, -5261542750394134544
  %shifted.i.i.i17.i1348 = lshr i64 %product.i.i.i16.i1347, 32
  %xored.i.i.i18.i1349 = xor i64 %shifted.i.i.i17.i1348, %product.i.i.i16.i1347
  %hash.i.i.i19.i1350 = and i64 %xored.i.i.i18.i1349, %tbl_size.i.i14.i1345
  %offset_ptr.i.i20.i1351 = getelementptr i32, ptr %offset_tbl.i.i15.i1346, i64 %hash.i.i.i19.i1350
  %offset.i.i21.i1352 = load i32, ptr %offset_ptr.i.i20.i1351, align 4
  %eq.i.i1353 = icmp eq i32 %1140, %offset.i.i21.i1352
  call void @llvm.assume(i1 %eq.i.i1353) #30
  %1142 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1143 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1134)
  %1144 = sext i32 %1140 to i64
  %1145 = getelementptr ptr, ptr %1134, i64 %1144
  %1146 = getelementptr i8, ptr %1145, i64 64
  %1147 = load ptr, ptr %1146, align 8
  %1148 = call ptr %1147({ ptr, ptr, ptr, i32 } %1141, ptr nonnull %2)
  %1149 = call i32 %1148({ ptr, ptr, ptr, i32 } %1141, { ptr, ptr, ptr, i32 } %1141, ptr nonnull %2)
  %1150 = add i32 %1149, -1
  %1151 = and i32 %1150, %1132
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %1152 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1153 = load ptr, ptr %105, align 8
  %1154 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1153, 0
  %1155 = load ptr, ptr %106, align 8
  %1156 = insertvalue { ptr, ptr, ptr, i32 } %1154, ptr %1155, 1
  %1157 = load ptr, ptr %107, align 8
  %1158 = insertvalue { ptr, ptr, ptr, i32 } %1156, ptr %1157, 2
  %1159 = load i32, ptr %108, align 4
  %1160 = insertvalue { ptr, ptr, ptr, i32 } %1158, i32 %1159, 3
  %hash_coef_ptr.i.i202.i641 = getelementptr i8, ptr %1153, i64 8
  %tbl_size_ptr.i.i203.i642 = getelementptr i8, ptr %1153, i64 16
  %offset_tbl_ptr.i.i204.i643 = getelementptr i8, ptr %1153, i64 40
  %hash_coef.i.i205.i644 = load i64, ptr %hash_coef_ptr.i.i202.i641, align 4
  %tbl_size.i.i206.i645 = load i64, ptr %tbl_size_ptr.i.i203.i642, align 4
  %offset_tbl.i.i207.i646 = load ptr, ptr %offset_tbl_ptr.i.i204.i643, align 8
  %product.i.i.i208.i647 = mul i64 %hash_coef.i.i205.i644, -5261542750394134544
  %shifted.i.i.i209.i648 = lshr i64 %product.i.i.i208.i647, 32
  %xored.i.i.i210.i649 = xor i64 %shifted.i.i.i209.i648, %product.i.i.i208.i647
  %hash.i.i.i211.i650 = and i64 %xored.i.i.i210.i649, %tbl_size.i.i206.i645
  %offset_ptr.i.i212.i651 = getelementptr i32, ptr %offset_tbl.i.i207.i646, i64 %hash.i.i.i211.i650
  %offset.i.i213.i652 = load i32, ptr %offset_ptr.i.i212.i651, align 4
  %eq.i216.i653 = icmp eq i32 %1159, %offset.i.i213.i652
  call void @llvm.assume(i1 %eq.i216.i653) #30
  store ptr @_parameterization_Ptri32, ptr %25, align 8
  %1161 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %25)
  %1162 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1153)
  %1163 = sext i32 %1159 to i64
  %1164 = getelementptr ptr, ptr %1153, i64 %1163
  %1165 = getelementptr i8, ptr %1164, i64 120
  %1166 = load ptr, ptr %1165, align 8
  store ptr @i32_typ, ptr %26, align 8
  %1167 = call ptr %1166({ ptr, ptr, ptr, i32 } %1160, ptr nonnull %26)
  %1168 = call { ptr, i160 } %1167({ ptr, ptr, ptr, i32 } %1160, { ptr, ptr, ptr, i32 } %1160, ptr nonnull %25, i32 %1151)
  %.fca.0.extract87.i654 = extractvalue { ptr, i160 } %1168, 0
  %.sroa.3.0.insert.ext.i655 = zext i32 %offset.i.i260.i7041026 to i160
  %.sroa.3.0.insert.shift.i656 = shl nuw i160 %.sroa.3.0.insert.ext.i655, 128
  %.sroa.2.0.insert.ext.i657 = zext i64 %1043 to i160
  %.sroa.2.0.insert.shift.i658 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i657, 64
  %.sroa.2.0.insert.insert.i659 = or disjoint i160 %.sroa.2.0.insert.shift.i658, %.sroa.3.0.insert.shift.i656
  %.sroa.0.0.insert.ext.i660 = zext i64 %1042 to i160
  %.sroa.0.0.insert.insert.i661 = or disjoint i160 %.sroa.2.0.insert.insert.i659, %.sroa.0.0.insert.ext.i660
  %1169 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0.0.insert.insert.i661, 1
  %1170 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1171 = load ptr, ptr %105, align 8
  %1172 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1171, 0
  %1173 = load ptr, ptr %106, align 8
  %1174 = insertvalue { ptr, ptr, ptr, i32 } %1172, ptr %1173, 1
  %1175 = load ptr, ptr %107, align 8
  %1176 = insertvalue { ptr, ptr, ptr, i32 } %1174, ptr %1175, 2
  %1177 = load i32, ptr %108, align 4
  %1178 = insertvalue { ptr, ptr, ptr, i32 } %1176, i32 %1177, 3
  %hash_coef_ptr.i.i218.i666 = getelementptr i8, ptr %1171, i64 8
  %tbl_size_ptr.i.i219.i667 = getelementptr i8, ptr %1171, i64 16
  %offset_tbl_ptr.i.i220.i668 = getelementptr i8, ptr %1171, i64 40
  %hash_coef.i.i221.i669 = load i64, ptr %hash_coef_ptr.i.i218.i666, align 4
  %tbl_size.i.i222.i670 = load i64, ptr %tbl_size_ptr.i.i219.i667, align 4
  %offset_tbl.i.i223.i671 = load ptr, ptr %offset_tbl_ptr.i.i220.i668, align 8
  %product.i.i.i224.i672 = mul i64 %hash_coef.i.i221.i669, -5261542750394134544
  %shifted.i.i.i225.i673 = lshr i64 %product.i.i.i224.i672, 32
  %xored.i.i.i226.i674 = xor i64 %shifted.i.i.i225.i673, %product.i.i.i224.i672
  %hash.i.i.i227.i675 = and i64 %xored.i.i.i226.i674, %tbl_size.i.i222.i670
  %offset_ptr.i.i228.i676 = getelementptr i32, ptr %offset_tbl.i.i223.i671, i64 %hash.i.i.i227.i675
  %offset.i.i229.i677 = load i32, ptr %offset_ptr.i.i228.i676, align 4
  %eq.i232.i678 = icmp eq i32 %1177, %offset.i.i229.i677
  call void @llvm.assume(i1 %eq.i232.i678) #30
  %1179 = load ptr, ptr %result.i, align 8
  %1180 = load ptr, ptr %73, align 8
  %result.i233.i679 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1181 = getelementptr i8, ptr %result.i233.i679, i64 16
  store ptr %1180, ptr %1181, align 8
  %1182 = getelementptr i8, ptr %result.i233.i679, i64 8
  store ptr %1179, ptr %1182, align 8
  %1183 = getelementptr i8, ptr %result.i233.i679, i64 24
  store ptr null, ptr %1183, align 8
  %1184 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i233.i679)
  store ptr @Entry, ptr %result.i233.i679, align 8
  store ptr @_parameterization_Ptri32, ptr %27, align 8
  store ptr %result.i233.i679, ptr %145, align 8
  %1185 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %27)
  %1186 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1171)
  %1187 = sext i32 %1177 to i64
  %1188 = getelementptr ptr, ptr %1171, i64 %1187
  %1189 = getelementptr i8, ptr %1188, i64 128
  %1190 = load ptr, ptr %1189, align 8
  store ptr @i32_typ, ptr %28, align 8
  store ptr @Entry, ptr %146, align 8
  %1191 = call ptr %1190({ ptr, ptr, ptr, i32 } %1178, ptr nonnull %28)
  call void %1191({ ptr, ptr, ptr, i32 } %1178, { ptr, ptr, ptr, i32 } %1178, ptr nonnull %27, i32 %1151, { ptr, i160 } %1169)
  %1192 = icmp ne ptr %.fca.0.extract87.i654, @nil_typ
  %1193 = icmp ne ptr %.fca.0.extract87.i654, null
  %.not138.i680 = and i1 %1192, %1193
  br i1 %.not138.i680, label %.cont.cont.i687, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit754.thread

.cont.cont.i687:                                  ; preds = %1114, %1052
  %.sink1036 = phi { ptr, i160 } [ %1088, %1052 ], [ %1168, %1114 ]
  %1194 = phi i32 [ 2, %1052 ], [ 1, %1114 ]
  %vptr.i248.sroa.speculated.i690 = phi ptr [ %.fca.0.extract112.i722, %1052 ], [ %.fca.0.extract87.i654, %1114 ]
  %.fca.1.extract89.i683 = extractvalue { ptr, i160 } %.sink1036, 1
  %.sroa.3407.sroa.4.0.extract.shift.i684 = lshr i160 %.fca.1.extract89.i683, 64
  %1195 = trunc i160 %.sroa.3407.sroa.4.0.extract.shift.i684 to i64
  %1196 = insertelement <2 x i64> poison, i64 %1195, i64 0
  %1197 = trunc i160 %.fca.1.extract89.i683 to i64
  %1198 = insertelement <2 x i64> %1196, i64 %1197, i64 1
  %hash_coef_ptr.i.i249.i693 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i690, i64 8
  %tbl_size_ptr.i.i250.i694 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i690, i64 16
  %offset_tbl_ptr.i.i251.i695 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i690, i64 40
  %hash_coef.i.i252.i696 = load i64, ptr %hash_coef_ptr.i.i249.i693, align 4
  %tbl_size.i.i253.i697 = load i64, ptr %tbl_size_ptr.i.i250.i694, align 4
  %offset_tbl.i.i254.i698 = load ptr, ptr %offset_tbl_ptr.i.i251.i695, align 8
  %product.i.i.i255.i699 = mul i64 %hash_coef.i.i252.i696, 4015701072841558310
  %shifted.i.i.i256.i700 = lshr i64 %product.i.i.i255.i699, 32
  %xored.i.i.i257.i701 = xor i64 %shifted.i.i.i256.i700, %product.i.i.i255.i699
  %hash.i.i.i258.i702 = and i64 %xored.i.i.i257.i701, %tbl_size.i.i253.i697
  %offset_ptr.i.i259.i703 = getelementptr i32, ptr %offset_tbl.i.i254.i698, i64 %hash.i.i.i258.i702
  %offset.i.i260.i704 = load i32, ptr %offset_ptr.i.i259.i703, align 4
  %1199 = add nuw nsw i32 %.reg2mem193.0677.i636, 1
  %1200 = load i32, ptr %111, align 4
  %1201 = icmp slt i32 %1199, %1200
  br i1 %1201, label %1040, label %._crit_edge3.1.i

HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit754.thread: ; preds = %1052, %1114
  %1202 = phi ptr [ %29, %1114 ], [ %21, %1052 ]
  %1203 = phi ptr [ %30, %1114 ], [ %22, %1052 ]
  %1204 = phi ptr [ %31, %1114 ], [ %23, %1052 ]
  %1205 = phi ptr [ %.sroa.0.i598, %1114 ], [ %.sroa.0680.i596, %1052 ]
  %1206 = phi ptr [ %32, %1114 ], [ %24, %1052 ]
  %1207 = load i32, ptr %109, align 4
  store i32 %1207, ptr %1202, align 4
  store i32 1, ptr %1203, align 4
  %1208 = add i32 %1207, 1
  store i32 %1208, ptr %1204, align 4
  %1209 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  store i32 %1208, ptr %109, align 4
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %1206, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %1205, align 8
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %17)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %18)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %19)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %20)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %21)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %22)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %23)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i596)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %24)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %25)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %26)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %27)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %28)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %29)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %30)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %31)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i598)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %32)
  br label %HashMap_insert_keyK_valueV.exit

._crit_edge3.1.i:                                 ; preds = %.cont.cont.i687, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1293
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %17)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %18)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %19)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %20)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %21)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %22)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %23)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i596)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %24)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %25)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %26)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %27)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %28)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %29)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %30)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %31)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i598)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %32)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %15)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %16)
  %1210 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1211 = load ptr, ptr %90, align 8
  %1212 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1211, 0
  %1213 = load ptr, ptr %91, align 8
  %1214 = insertvalue { ptr, ptr, ptr, i32 } %1212, ptr %1213, 1
  %1215 = load ptr, ptr %92, align 8
  %1216 = insertvalue { ptr, ptr, ptr, i32 } %1214, ptr %1215, 2
  %1217 = load i32, ptr %93, align 4
  %1218 = insertvalue { ptr, ptr, ptr, i32 } %1216, i32 %1217, 3
  %hash_coef_ptr.i.i18.i773 = getelementptr i8, ptr %1211, i64 8
  %tbl_size_ptr.i.i19.i774 = getelementptr i8, ptr %1211, i64 16
  %offset_tbl_ptr.i.i20.i775 = getelementptr i8, ptr %1211, i64 40
  %hash_coef.i.i21.i776 = load i64, ptr %hash_coef_ptr.i.i18.i773, align 4
  %tbl_size.i.i22.i777 = load i64, ptr %tbl_size_ptr.i.i19.i774, align 4
  %offset_tbl.i.i23.i778 = load ptr, ptr %offset_tbl_ptr.i.i20.i775, align 8
  %product.i.i.i24.i779 = mul i64 %hash_coef.i.i21.i776, -5261542750394134544
  %shifted.i.i.i25.i780 = lshr i64 %product.i.i.i24.i779, 32
  %xored.i.i.i26.i781 = xor i64 %shifted.i.i.i25.i780, %product.i.i.i24.i779
  %hash.i.i.i27.i782 = and i64 %xored.i.i.i26.i781, %tbl_size.i.i22.i777
  %offset_ptr.i.i28.i783 = getelementptr i32, ptr %offset_tbl.i.i23.i778, i64 %hash.i.i.i27.i782
  %offset.i.i29.i784 = load i32, ptr %offset_ptr.i.i28.i783, align 4
  %eq.i.i785 = icmp eq i32 %1217, %offset.i.i29.i784
  call void @llvm.assume(i1 %eq.i.i785) #30
  %1219 = load ptr, ptr %105, align 8
  %1220 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1219, 0
  %1221 = load ptr, ptr %106, align 8
  %1222 = insertvalue { ptr, ptr, ptr, i32 } %1220, ptr %1221, 1
  %1223 = load ptr, ptr %107, align 8
  %1224 = insertvalue { ptr, ptr, ptr, i32 } %1222, ptr %1223, 2
  %1225 = load i32, ptr %108, align 4
  %hash_coef_ptr.i.i46.i790 = getelementptr i8, ptr %1219, i64 8
  %tbl_size_ptr.i.i47.i791 = getelementptr i8, ptr %1219, i64 16
  %offset_tbl_ptr.i.i48.i792 = getelementptr i8, ptr %1219, i64 40
  %hash_coef.i.i49.i793 = load i64, ptr %hash_coef_ptr.i.i46.i790, align 4
  %tbl_size.i.i50.i794 = load i64, ptr %tbl_size_ptr.i.i47.i791, align 4
  %offset_tbl.i.i51.i795 = load ptr, ptr %offset_tbl_ptr.i.i48.i792, align 8
  %product.i.i.i52.i796 = mul i64 %hash_coef.i.i49.i793, -5261542750394134544
  %shifted.i.i.i53.i797 = lshr i64 %product.i.i.i52.i796, 32
  %xored.i.i.i54.i798 = xor i64 %shifted.i.i.i53.i797, %product.i.i.i52.i796
  %hash.i.i.i55.i799 = and i64 %xored.i.i.i54.i798, %tbl_size.i.i50.i794
  %offset_ptr.i.i56.i800 = getelementptr i32, ptr %offset_tbl.i.i51.i795, i64 %hash.i.i.i55.i799
  %offset.i.i57.i801 = load i32, ptr %offset_ptr.i.i56.i800, align 4
  %eq.i60.i802 = icmp eq i32 %1225, %offset.i.i57.i801
  call void @llvm.assume(i1 %eq.i60.i802) #30
  %1226 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1227 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1211)
  %1228 = sext i32 %1217 to i64
  %1229 = getelementptr ptr, ptr %1211, i64 %1228
  %1230 = getelementptr i8, ptr %1229, i64 64
  %1231 = load ptr, ptr %1230, align 8
  %1232 = call ptr %1231({ ptr, ptr, ptr, i32 } %1218, ptr nonnull %2)
  %1233 = call i32 %1232({ ptr, ptr, ptr, i32 } %1218, { ptr, ptr, ptr, i32 } %1218, ptr nonnull %2)
  %1234 = shl i32 %1233, 1
  %1235 = call i32 @llvm.smax.i32(i32 %1234, i32 16)
  %1236 = load ptr, ptr %result.i, align 8
  %1237 = load ptr, ptr %73, align 8
  %result.i.i803 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1238 = getelementptr i8, ptr %result.i.i803, i64 16
  store ptr @_parameterization_Nil, ptr %1238, align 8
  %result.i75.i804 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1239 = getelementptr i8, ptr %result.i75.i804, i64 16
  store ptr %1237, ptr %1239, align 8
  %1240 = getelementptr i8, ptr %result.i75.i804, i64 8
  store ptr %1236, ptr %1240, align 8
  %1241 = getelementptr i8, ptr %result.i75.i804, i64 24
  store ptr null, ptr %1241, align 8
  %1242 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i75.i804)
  store ptr @Entry, ptr %result.i75.i804, align 8
  %1243 = getelementptr i8, ptr %result.i.i803, i64 8
  store ptr %result.i75.i804, ptr %1243, align 8
  %1244 = getelementptr i8, ptr %result.i.i803, i64 24
  store ptr null, ptr %1244, align 8
  %1245 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i803)
  store ptr @union_typ, ptr %result.i.i803, align 8
  %result.i76.i805 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i803, ptr %result.i76.i805, align 8
  %1246 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i76.i805)
  store ptr @Array, ptr %15, align 8
  store ptr %result.i76.i805, ptr %149, align 8
  store i32 9, ptr %150, align 8
  %1247 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %15)
  %1248 = getelementptr i8, ptr %result.i76.i805, i64 16
  store i32 %1235, ptr %1248, align 4
  %1249 = getelementptr i8, ptr %result.i76.i805, i64 20
  store i32 %1235, ptr %1249, align 4
  %1250 = zext nneg i32 %1235 to i64
  %1251 = shl nuw nsw i64 %1250, 5
  %result.i.i.i806 = call noalias ptr @bump_malloc_inner(i64 noundef %1251, ptr nonnull @current_ptr) #29
  %1252 = getelementptr i8, ptr %result.i76.i805, i64 8
  store ptr %result.i.i.i806, ptr %1252, align 8
  %1253 = load ptr, ptr %151, align 8
  store ptr @Array, ptr %90, align 8
  store ptr %result.i76.i805, ptr %91, align 8
  store ptr %1253, ptr %92, align 8
  store i32 9, ptr %93, align 4
  %result.i91.i819 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1254 = getelementptr i8, ptr %result.i91.i819, i64 16
  store ptr @_parameterization_Nil, ptr %1254, align 8
  %result.i92.i820 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1255 = getelementptr i8, ptr %result.i92.i820, i64 16
  store ptr %1237, ptr %1255, align 8
  %1256 = getelementptr i8, ptr %result.i92.i820, i64 8
  store ptr %1236, ptr %1256, align 8
  %1257 = getelementptr i8, ptr %result.i92.i820, i64 24
  store ptr null, ptr %1257, align 8
  %1258 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i92.i820)
  store ptr @Entry, ptr %result.i92.i820, align 8
  %1259 = getelementptr i8, ptr %result.i91.i819, i64 8
  store ptr %result.i92.i820, ptr %1259, align 8
  %1260 = getelementptr i8, ptr %result.i91.i819, i64 24
  store ptr null, ptr %1260, align 8
  %1261 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i91.i819)
  store ptr @union_typ, ptr %result.i91.i819, align 8
  %result.i93.i821 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i91.i819, ptr %result.i93.i821, align 8
  %1262 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i93.i821)
  store ptr @Array, ptr %16, align 8
  store ptr %result.i93.i821, ptr %152, align 8
  store i32 9, ptr %153, align 8
  %1263 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %16)
  %1264 = getelementptr i8, ptr %result.i93.i821, i64 16
  store i32 %1235, ptr %1264, align 4
  %1265 = getelementptr i8, ptr %result.i93.i821, i64 20
  store i32 %1235, ptr %1265, align 4
  %result.i.i234.i822 = call noalias ptr @bump_malloc_inner(i64 noundef %1251, ptr nonnull @current_ptr) #29
  %1266 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %1267 = getelementptr i8, ptr %result.i93.i821, i64 8
  store ptr %result.i.i234.i822, ptr %1267, align 8
  %1268 = load ptr, ptr %154, align 8
  store ptr @Array, ptr %105, align 8
  store ptr %result.i93.i821, ptr %106, align 8
  store ptr %1268, ptr %107, align 8
  store i32 9, ptr %108, align 4
  store i32 0, ptr %109, align 4
  %1269 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6)
  %1270 = icmp sgt i32 %1233, 0
  br i1 %1270, label %.lr.ph.i1356, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1459.critedge

.lr.ph.i1356:                                     ; preds = %._crit_edge3.1.i
  %invariant.gep.i1357 = getelementptr i8, ptr %1211, i64 120
  %offset_tbl.i.i24.i1359 = load ptr, ptr %offset_tbl_ptr.i.i20.i775, align 8
  %hash_coef.i.i22.i1361 = load i64, ptr %hash_coef_ptr.i.i18.i773, align 4
  %product.i.i.i25.i1362 = mul i64 %hash_coef.i.i22.i1361, -5261542750394134544
  %shifted.i.i.i26.i1363 = lshr i64 %product.i.i.i25.i1362, 32
  %xored.i.i.i27.i1364 = xor i64 %shifted.i.i.i26.i1363, %product.i.i.i25.i1362
  %tbl_size.i.i23.i1366 = load i64, ptr %tbl_size_ptr.i.i19.i774, align 4
  %hash.i.i.i28.i1367 = and i64 %xored.i.i.i27.i1364, %tbl_size.i.i23.i1366
  %offset_ptr.i.i29.i1368 = getelementptr i32, ptr %offset_tbl.i.i24.i1359, i64 %hash.i.i.i28.i1367
  %offset.i.i30.i1369 = load i32, ptr %offset_ptr.i.i29.i1368, align 4
  %1271 = insertvalue { ptr, ptr, ptr, i32 } %1216, i32 %offset.i.i30.i1369, 3
  %1272 = sext i32 %offset.i.i30.i1369 to i64
  %gep.i1384 = getelementptr ptr, ptr %invariant.gep.i1357, i64 %1272
  %1273 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %1274

1274:                                             ; preds = %._crit_edge1.i1388, %.lr.ph.i1356
  %.reg2mem13.079.i1385 = phi i32 [ 0, %.lr.ph.i1356 ], [ %1291, %._crit_edge1.i1388 ]
  store ptr @_parameterization_Ptri32, ptr %5, align 8
  %1275 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %5)
  %1276 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %1211)
  %1277 = load ptr, ptr %gep.i1384, align 8
  store ptr @i32_typ, ptr %6, align 8
  %1278 = call ptr %1277({ ptr, ptr, ptr, i32 } %1271, ptr nonnull %6)
  %1279 = call { ptr, i160 } %1278({ ptr, ptr, ptr, i32 } %1271, { ptr, ptr, ptr, i32 } %1271, ptr nonnull %5, i32 %.reg2mem13.079.i1385)
  %.fca.0.extract11.i1386 = extractvalue { ptr, i160 } %1279, 0
  %1280 = icmp ne ptr %.fca.0.extract11.i1386, @nil_typ
  %1281 = icmp ne ptr %.fca.0.extract11.i1386, null
  %.not17.i1387 = and i1 %1280, %1281
  br i1 %.not17.i1387, label %1282, label %._crit_edge1.i1388

1282:                                             ; preds = %1274
  %.fca.1.extract13.i1389 = extractvalue { ptr, i160 } %1279, 1
  %.sroa.375.8.extract.trunc.i1390 = trunc i160 %.fca.1.extract13.i1389 to i64
  %1283 = inttoptr i64 %.sroa.375.8.extract.trunc.i1390 to ptr
  %.sroa.576.8.extract.shift.i1391 = lshr i160 %.fca.1.extract13.i1389, 64
  %.sroa.576.8.extract.trunc.i1392 = trunc i160 %.sroa.576.8.extract.shift.i1391 to i64
  %1284 = inttoptr i64 %.sroa.576.8.extract.trunc.i1392 to ptr
  %hash_coef_ptr.i.i33.i1393 = getelementptr i8, ptr %.fca.0.extract11.i1386, i64 8
  %tbl_size_ptr.i.i34.i1394 = getelementptr i8, ptr %.fca.0.extract11.i1386, i64 16
  %offset_tbl_ptr.i.i35.i1395 = getelementptr i8, ptr %.fca.0.extract11.i1386, i64 40
  %hash_coef.i.i36.i1396 = load i64, ptr %hash_coef_ptr.i.i33.i1393, align 4
  %tbl_size.i.i37.i1397 = load i64, ptr %tbl_size_ptr.i.i34.i1394, align 4
  %offset_tbl.i.i38.i1398 = load ptr, ptr %offset_tbl_ptr.i.i35.i1395, align 8
  %product.i.i.i39.i1399 = mul i64 %hash_coef.i.i36.i1396, 4015701072841558310
  %shifted.i.i.i40.i1400 = lshr i64 %product.i.i.i39.i1399, 32
  %xored.i.i.i41.i1401 = xor i64 %shifted.i.i.i40.i1400, %product.i.i.i39.i1399
  %hash.i.i.i42.i1402 = and i64 %xored.i.i.i41.i1401, %tbl_size.i.i37.i1397
  %offset_ptr.i.i43.i1403 = getelementptr i32, ptr %offset_tbl.i.i38.i1398, i64 %hash.i.i.i42.i1402
  %offset.i.i58.i1404 = load i32, ptr %offset_ptr.i.i43.i1403, align 4
  %1285 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i1386, 0
  %1286 = insertvalue { ptr, ptr, ptr, i32 } %1285, ptr %1283, 1
  %1287 = insertvalue { ptr, ptr, ptr, i32 } %1286, ptr %1284, 2
  %1288 = insertvalue { ptr, ptr, ptr, i32 } %1287, i32 %offset.i.i58.i1404, 3
  %1289 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1290 = call { ptr, i160 } @HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %157, { ptr, ptr, ptr, i32 } poison, ptr nonnull poison, { ptr, ptr, ptr, i32 } %1288)
  br label %._crit_edge1.i1388

._crit_edge1.i1388:                               ; preds = %1282, %1274
  %1291 = add nuw nsw i32 %.reg2mem13.079.i1385, 1
  %1292 = icmp slt i32 %1291, %1233
  br i1 %1292, label %1274, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1406

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1406: ; preds = %._crit_edge1.i1388
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6)
  %1293 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %invariant.gep.i1410 = getelementptr i8, ptr %1219, i64 120
  %offset_tbl.i.i24.i1412 = load ptr, ptr %offset_tbl_ptr.i.i48.i792, align 8
  %hash_coef.i.i22.i1414 = load i64, ptr %hash_coef_ptr.i.i46.i790, align 4
  %product.i.i.i25.i1415 = mul i64 %hash_coef.i.i22.i1414, -5261542750394134544
  %shifted.i.i.i26.i1416 = lshr i64 %product.i.i.i25.i1415, 32
  %xored.i.i.i27.i1417 = xor i64 %shifted.i.i.i26.i1416, %product.i.i.i25.i1415
  %tbl_size.i.i23.i1419 = load i64, ptr %tbl_size_ptr.i.i47.i791, align 4
  %hash.i.i.i28.i1420 = and i64 %xored.i.i.i27.i1417, %tbl_size.i.i23.i1419
  %offset_ptr.i.i29.i1421 = getelementptr i32, ptr %offset_tbl.i.i24.i1412, i64 %hash.i.i.i28.i1420
  %offset.i.i30.i1422 = load i32, ptr %offset_ptr.i.i29.i1421, align 4
  %1294 = insertvalue { ptr, ptr, ptr, i32 } %1224, i32 %offset.i.i30.i1422, 3
  %1295 = sext i32 %offset.i.i30.i1422 to i64
  %gep.i1437 = getelementptr ptr, ptr %invariant.gep.i1410, i64 %1295
  %1296 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %1297

1297:                                             ; preds = %._crit_edge1.i1441, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1406
  %.reg2mem13.079.i1438 = phi i32 [ 0, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1406 ], [ %1314, %._crit_edge1.i1441 ]
  store ptr @_parameterization_Ptri32, ptr %3, align 8
  %1298 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %3)
  %1299 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %1219)
  %1300 = load ptr, ptr %gep.i1437, align 8
  store ptr @i32_typ, ptr %4, align 8
  %1301 = call ptr %1300({ ptr, ptr, ptr, i32 } %1294, ptr nonnull %4)
  %1302 = call { ptr, i160 } %1301({ ptr, ptr, ptr, i32 } %1294, { ptr, ptr, ptr, i32 } %1294, ptr nonnull %3, i32 %.reg2mem13.079.i1438)
  %.fca.0.extract11.i1439 = extractvalue { ptr, i160 } %1302, 0
  %1303 = icmp ne ptr %.fca.0.extract11.i1439, @nil_typ
  %1304 = icmp ne ptr %.fca.0.extract11.i1439, null
  %.not17.i1440 = and i1 %1303, %1304
  br i1 %.not17.i1440, label %1305, label %._crit_edge1.i1441

1305:                                             ; preds = %1297
  %.fca.1.extract13.i1442 = extractvalue { ptr, i160 } %1302, 1
  %.sroa.375.8.extract.trunc.i1443 = trunc i160 %.fca.1.extract13.i1442 to i64
  %1306 = inttoptr i64 %.sroa.375.8.extract.trunc.i1443 to ptr
  %.sroa.576.8.extract.shift.i1444 = lshr i160 %.fca.1.extract13.i1442, 64
  %.sroa.576.8.extract.trunc.i1445 = trunc i160 %.sroa.576.8.extract.shift.i1444 to i64
  %1307 = inttoptr i64 %.sroa.576.8.extract.trunc.i1445 to ptr
  %hash_coef_ptr.i.i33.i1446 = getelementptr i8, ptr %.fca.0.extract11.i1439, i64 8
  %tbl_size_ptr.i.i34.i1447 = getelementptr i8, ptr %.fca.0.extract11.i1439, i64 16
  %offset_tbl_ptr.i.i35.i1448 = getelementptr i8, ptr %.fca.0.extract11.i1439, i64 40
  %hash_coef.i.i36.i1449 = load i64, ptr %hash_coef_ptr.i.i33.i1446, align 4
  %tbl_size.i.i37.i1450 = load i64, ptr %tbl_size_ptr.i.i34.i1447, align 4
  %offset_tbl.i.i38.i1451 = load ptr, ptr %offset_tbl_ptr.i.i35.i1448, align 8
  %product.i.i.i39.i1452 = mul i64 %hash_coef.i.i36.i1449, 4015701072841558310
  %shifted.i.i.i40.i1453 = lshr i64 %product.i.i.i39.i1452, 32
  %xored.i.i.i41.i1454 = xor i64 %shifted.i.i.i40.i1453, %product.i.i.i39.i1452
  %hash.i.i.i42.i1455 = and i64 %xored.i.i.i41.i1454, %tbl_size.i.i37.i1450
  %offset_ptr.i.i43.i1456 = getelementptr i32, ptr %offset_tbl.i.i38.i1451, i64 %hash.i.i.i42.i1455
  %offset.i.i58.i1457 = load i32, ptr %offset_ptr.i.i43.i1456, align 4
  %1308 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i1439, 0
  %1309 = insertvalue { ptr, ptr, ptr, i32 } %1308, ptr %1306, 1
  %1310 = insertvalue { ptr, ptr, ptr, i32 } %1309, ptr %1307, 2
  %1311 = insertvalue { ptr, ptr, ptr, i32 } %1310, i32 %offset.i.i58.i1457, 3
  %1312 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1313 = call { ptr, i160 } @HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %157, { ptr, ptr, ptr, i32 } poison, ptr nonnull poison, { ptr, ptr, ptr, i32 } %1311)
  br label %._crit_edge1.i1441

._crit_edge1.i1441:                               ; preds = %1305, %1297
  %1314 = add nuw nsw i32 %.reg2mem13.079.i1438, 1
  %1315 = icmp slt i32 %1314, %1233
  br i1 %1315, label %1297, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1459

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1459.critedge: ; preds = %._crit_edge3.1.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6)
  %1316 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  br label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1459

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1459: ; preds = %._crit_edge1.i1441, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1459.critedge
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %15)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %16)
  br label %HashMap_insert_keyK_valueV.exit

HashMap_insert_keyK_valueV.exit:                  ; preds = %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit754.thread, %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit.thread, %.thread525.i, %.thread528.i, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit1459
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %58)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %59)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %60)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %61)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %62)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %63)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %64)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %65)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %66)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %67)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %68)
  %1317 = add i64 %.reg2mem92.0134, %160
  %1318 = icmp slt i32 %159, %0
  br i1 %1318, label %.lr.ph, label %.lr.ph140

.lr.ph140:                                        ; preds = %HashMap_insert_keyK_valueV.exit
  %1319 = call i64 @clock()
  %1320 = getelementptr inbounds i8, ptr %69, i64 8
  %1321 = getelementptr inbounds i8, ptr %69, i64 24
  br label %1322

1322:                                             ; preds = %.lr.ph140, %1512
  %.reg2mem80.0138 = phi i64 [ 0, %.lr.ph140 ], [ %.reg2mem74.0, %1512 ]
  %.reg2mem78.0137 = phi i1 [ true, %.lr.ph140 ], [ %1513, %1512 ]
  %.reg2mem76.0136 = phi i32 [ 0, %.lr.ph140 ], [ %1514, %1512 ]
  %.sroa.024.0.insert.ext = zext nneg i32 %.reg2mem76.0136 to i160
  %1323 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.024.0.insert.ext, 1
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0271.i)
  call void @llvm.lifetime.start.p0(i64 20, ptr nonnull %.sroa.1.i)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i)
  call void @llvm.lifetime.start.p0(i64 20, ptr nonnull %.sroa.2.i)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %54)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %55)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0123.i)
  call void @llvm.lifetime.start.p0(i64 20, ptr nonnull %.sroa.2124.i)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0115.i)
  call void @llvm.lifetime.start.p0(i64 20, ptr nonnull %.sroa.2116.i)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %56)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %57)
  %1324 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1325 = load ptr, ptr %78, align 8
  %1326 = call i32 %1325({ ptr, i160 } %1323)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %1327 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1328 = load ptr, ptr %90, align 8
  %1329 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1328, 0
  %1330 = load ptr, ptr %91, align 8
  %1331 = insertvalue { ptr, ptr, ptr, i32 } %1329, ptr %1330, 1
  %1332 = load ptr, ptr %92, align 8
  %1333 = insertvalue { ptr, ptr, ptr, i32 } %1331, ptr %1332, 2
  %1334 = load i32, ptr %93, align 4
  %1335 = insertvalue { ptr, ptr, ptr, i32 } %1333, i32 %1334, 3
  %hash_coef_ptr.i.i10.i897 = getelementptr i8, ptr %1328, i64 8
  %tbl_size_ptr.i.i11.i898 = getelementptr i8, ptr %1328, i64 16
  %offset_tbl_ptr.i.i12.i899 = getelementptr i8, ptr %1328, i64 40
  %hash_coef.i.i13.i900 = load i64, ptr %hash_coef_ptr.i.i10.i897, align 4
  %tbl_size.i.i14.i901 = load i64, ptr %tbl_size_ptr.i.i11.i898, align 4
  %offset_tbl.i.i15.i902 = load ptr, ptr %offset_tbl_ptr.i.i12.i899, align 8
  %product.i.i.i16.i903 = mul i64 %hash_coef.i.i13.i900, -5261542750394134544
  %shifted.i.i.i17.i904 = lshr i64 %product.i.i.i16.i903, 32
  %xored.i.i.i18.i905 = xor i64 %shifted.i.i.i17.i904, %product.i.i.i16.i903
  %hash.i.i.i19.i906 = and i64 %xored.i.i.i18.i905, %tbl_size.i.i14.i901
  %offset_ptr.i.i20.i907 = getelementptr i32, ptr %offset_tbl.i.i15.i902, i64 %hash.i.i.i19.i906
  %offset.i.i21.i908 = load i32, ptr %offset_ptr.i.i20.i907, align 4
  %eq.i.i909 = icmp eq i32 %1334, %offset.i.i21.i908
  call void @llvm.assume(i1 %eq.i.i909) #30
  %1336 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1337 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1328)
  %1338 = sext i32 %1334 to i64
  %1339 = getelementptr ptr, ptr %1328, i64 %1338
  %1340 = getelementptr i8, ptr %1339, i64 64
  %1341 = load ptr, ptr %1340, align 8
  %1342 = call ptr %1341({ ptr, ptr, ptr, i32 } %1335, ptr nonnull %2)
  %1343 = call i32 %1342({ ptr, ptr, ptr, i32 } %1335, { ptr, ptr, ptr, i32 } %1335, ptr nonnull %2)
  %1344 = add i32 %1343, -1
  %1345 = and i32 %1344, %1326
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %1346 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1347 = load ptr, ptr %90, align 8
  %1348 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1347, 0
  %1349 = load ptr, ptr %91, align 8
  %1350 = insertvalue { ptr, ptr, ptr, i32 } %1348, ptr %1349, 1
  %1351 = load ptr, ptr %92, align 8
  %1352 = insertvalue { ptr, ptr, ptr, i32 } %1350, ptr %1351, 2
  %1353 = load i32, ptr %93, align 4
  %1354 = insertvalue { ptr, ptr, ptr, i32 } %1352, i32 %1353, 3
  %hash_coef_ptr.i.i130.i = getelementptr i8, ptr %1347, i64 8
  %tbl_size_ptr.i.i131.i = getelementptr i8, ptr %1347, i64 16
  %offset_tbl_ptr.i.i132.i = getelementptr i8, ptr %1347, i64 40
  %hash_coef.i.i133.i = load i64, ptr %hash_coef_ptr.i.i130.i, align 4
  %tbl_size.i.i134.i = load i64, ptr %tbl_size_ptr.i.i131.i, align 4
  %offset_tbl.i.i135.i = load ptr, ptr %offset_tbl_ptr.i.i132.i, align 8
  %product.i.i.i136.i = mul i64 %hash_coef.i.i133.i, -5261542750394134544
  %shifted.i.i.i137.i = lshr i64 %product.i.i.i136.i, 32
  %xored.i.i.i138.i = xor i64 %shifted.i.i.i137.i, %product.i.i.i136.i
  %hash.i.i.i139.i = and i64 %xored.i.i.i138.i, %tbl_size.i.i134.i
  %offset_ptr.i.i140.i = getelementptr i32, ptr %offset_tbl.i.i135.i, i64 %hash.i.i.i139.i
  %offset.i.i141.i = load i32, ptr %offset_ptr.i.i140.i, align 4
  %eq.i.i257 = icmp eq i32 %1353, %offset.i.i141.i
  call void @llvm.assume(i1 %eq.i.i257) #30
  store ptr @_parameterization_Ptri32, ptr %56, align 8
  %1355 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %56)
  %1356 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1347)
  %1357 = sext i32 %1353 to i64
  %1358 = getelementptr ptr, ptr %1347, i64 %1357
  %1359 = getelementptr i8, ptr %1358, i64 120
  %1360 = load ptr, ptr %1359, align 8
  store ptr @i32_typ, ptr %57, align 8
  %1361 = call ptr %1360({ ptr, ptr, ptr, i32 } %1354, ptr nonnull %57)
  %1362 = call { ptr, i160 } %1361({ ptr, ptr, ptr, i32 } %1354, { ptr, ptr, ptr, i32 } %1354, ptr nonnull %56, i32 %1345)
  %.fca.0.extract.i258 = extractvalue { ptr, i160 } %1362, 0
  %1363 = icmp ne ptr %.fca.0.extract.i258, @nil_typ
  %1364 = icmp ne ptr %.fca.0.extract.i258, null
  %.not126.i = and i1 %1363, %1364
  br i1 %.not126.i, label %1365, label %.critedge.i259

1365:                                             ; preds = %1322
  %.fca.1.extract.i272 = extractvalue { ptr, i160 } %1362, 1
  %.sroa.5.8.extract.trunc.i = trunc i160 %.fca.1.extract.i272 to i64
  %1366 = inttoptr i64 %.sroa.5.8.extract.trunc.i to ptr
  %.sroa.9.8.extract.shift.i = lshr i160 %.fca.1.extract.i272, 64
  %.sroa.9.8.extract.trunc.i = trunc i160 %.sroa.9.8.extract.shift.i to i64
  %1367 = inttoptr i64 %.sroa.9.8.extract.trunc.i to ptr
  %hash_coef_ptr.i.i144.i = getelementptr i8, ptr %.fca.0.extract.i258, i64 8
  %tbl_size_ptr.i.i145.i = getelementptr i8, ptr %.fca.0.extract.i258, i64 16
  %offset_tbl_ptr.i.i146.i = getelementptr i8, ptr %.fca.0.extract.i258, i64 40
  %hash_coef.i.i147.i = load i64, ptr %hash_coef_ptr.i.i144.i, align 4
  %tbl_size.i.i148.i = load i64, ptr %tbl_size_ptr.i.i145.i, align 4
  %offset_tbl.i.i149.i = load ptr, ptr %offset_tbl_ptr.i.i146.i, align 8
  %product.i.i.i150.i = mul i64 %hash_coef.i.i147.i, 4015701072841558310
  %shifted.i.i.i151.i = lshr i64 %product.i.i.i150.i, 32
  %xored.i.i.i152.i = xor i64 %shifted.i.i.i151.i, %product.i.i.i150.i
  %hash.i.i.i153.i = and i64 %xored.i.i.i152.i, %tbl_size.i.i148.i
  %offset_ptr.i.i154.i = getelementptr i32, ptr %offset_tbl.i.i149.i, i64 %hash.i.i.i153.i
  %offset.i.i155.i = load i32, ptr %offset_ptr.i.i154.i, align 4
  %1368 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract.i258, 0
  %1369 = insertvalue { ptr, ptr, ptr, i32 } %1368, ptr %1366, 1
  %1370 = insertvalue { ptr, ptr, ptr, i32 } %1369, ptr %1367, 2
  %1371 = insertvalue { ptr, ptr, ptr, i32 } %1370, i32 %offset.i.i155.i, 3
  %1372 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1373 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1374 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract.i258)
  %1375 = sext i32 %offset.i.i155.i to i64
  %1376 = getelementptr ptr, ptr %.fca.0.extract.i258, i64 %1375
  %1377 = getelementptr i8, ptr %1376, i64 64
  %1378 = load ptr, ptr %1377, align 8
  %1379 = call ptr %1378({ ptr, ptr, ptr, i32 } %1371, ptr nonnull %2)
  %1380 = call i32 %1379({ ptr, ptr, ptr, i32 } %1371, { ptr, ptr, ptr, i32 } %1371, ptr nonnull %2)
  %1381 = icmp eq i32 %1380, %1326
  %1382 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1383 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1384 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract.i258)
  %1385 = getelementptr i8, ptr %1376, i64 48
  %1386 = load ptr, ptr %1385, align 8
  %1387 = call ptr %1386({ ptr, ptr, ptr, i32 } %1371, ptr nonnull %2)
  %1388 = call { ptr, i160 } %1387({ ptr, ptr, ptr, i32 } %1371, { ptr, ptr, ptr, i32 } %1371, ptr nonnull %2)
  %1389 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1390 = load ptr, ptr %79, align 8
  %1391 = call i1 %1390({ ptr, i160 } %1388, { ptr, i160 } %1323)
  %1392 = and i1 %1381, %1391
  br i1 %1392, label %HashMap_get_keyK.exit, label %.critedge.i259

.critedge.i259:                                   ; preds = %1365, %1322
  %1393 = add i32 %1326, 2127912214
  %1394 = shl i32 %1326, 12
  %1395 = add i32 %1393, %1394
  %1396 = ashr i32 %1395, 19
  %1397 = xor i32 %1395, %1396
  %1398 = xor i32 %1397, -949894596
  %1399 = add i32 %1398, 374761393
  %1400 = shl i32 %1398, 5
  %1401 = add i32 %1399, %1400
  %1402 = add i32 %1401, -744332180
  %1403 = shl i32 %1401, 9
  %1404 = xor i32 %1402, %1403
  %1405 = add i32 %1404, -42973499
  %1406 = shl i32 %1404, 3
  %1407 = add i32 %1405, %1406
  %1408 = ashr i32 %1407, 16
  %1409 = xor i32 %1407, %1408
  %1410 = xor i32 %1409, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %1411 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1412 = load ptr, ptr %105, align 8
  %1413 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1412, 0
  %1414 = load ptr, ptr %106, align 8
  %1415 = insertvalue { ptr, ptr, ptr, i32 } %1413, ptr %1414, 1
  %1416 = load ptr, ptr %107, align 8
  %1417 = insertvalue { ptr, ptr, ptr, i32 } %1415, ptr %1416, 2
  %1418 = load i32, ptr %108, align 4
  %1419 = insertvalue { ptr, ptr, ptr, i32 } %1417, i32 %1418, 3
  %hash_coef_ptr.i.i10.i928 = getelementptr i8, ptr %1412, i64 8
  %tbl_size_ptr.i.i11.i929 = getelementptr i8, ptr %1412, i64 16
  %offset_tbl_ptr.i.i12.i930 = getelementptr i8, ptr %1412, i64 40
  %hash_coef.i.i13.i931 = load i64, ptr %hash_coef_ptr.i.i10.i928, align 4
  %tbl_size.i.i14.i932 = load i64, ptr %tbl_size_ptr.i.i11.i929, align 4
  %offset_tbl.i.i15.i933 = load ptr, ptr %offset_tbl_ptr.i.i12.i930, align 8
  %product.i.i.i16.i934 = mul i64 %hash_coef.i.i13.i931, -5261542750394134544
  %shifted.i.i.i17.i935 = lshr i64 %product.i.i.i16.i934, 32
  %xored.i.i.i18.i936 = xor i64 %shifted.i.i.i17.i935, %product.i.i.i16.i934
  %hash.i.i.i19.i937 = and i64 %xored.i.i.i18.i936, %tbl_size.i.i14.i932
  %offset_ptr.i.i20.i938 = getelementptr i32, ptr %offset_tbl.i.i15.i933, i64 %hash.i.i.i19.i937
  %offset.i.i21.i939 = load i32, ptr %offset_ptr.i.i20.i938, align 4
  %eq.i.i940 = icmp eq i32 %1418, %offset.i.i21.i939
  call void @llvm.assume(i1 %eq.i.i940) #30
  %1420 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1421 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1412)
  %1422 = sext i32 %1418 to i64
  %1423 = getelementptr ptr, ptr %1412, i64 %1422
  %1424 = getelementptr i8, ptr %1423, i64 64
  %1425 = load ptr, ptr %1424, align 8
  %1426 = call ptr %1425({ ptr, ptr, ptr, i32 } %1419, ptr nonnull %2)
  %1427 = call i32 %1426({ ptr, ptr, ptr, i32 } %1419, { ptr, ptr, ptr, i32 } %1419, ptr nonnull %2)
  %1428 = add i32 %1427, -1
  %1429 = and i32 %1428, %1410
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %1430 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1431 = load ptr, ptr %105, align 8
  %1432 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1431, 0
  %1433 = load ptr, ptr %106, align 8
  %1434 = insertvalue { ptr, ptr, ptr, i32 } %1432, ptr %1433, 1
  %1435 = load ptr, ptr %107, align 8
  %1436 = insertvalue { ptr, ptr, ptr, i32 } %1434, ptr %1435, 2
  %1437 = load i32, ptr %108, align 4
  %1438 = insertvalue { ptr, ptr, ptr, i32 } %1436, i32 %1437, 3
  %hash_coef_ptr.i.i158.i = getelementptr i8, ptr %1431, i64 8
  %tbl_size_ptr.i.i159.i = getelementptr i8, ptr %1431, i64 16
  %offset_tbl_ptr.i.i160.i = getelementptr i8, ptr %1431, i64 40
  %hash_coef.i.i161.i = load i64, ptr %hash_coef_ptr.i.i158.i, align 4
  %tbl_size.i.i162.i = load i64, ptr %tbl_size_ptr.i.i159.i, align 4
  %offset_tbl.i.i163.i = load ptr, ptr %offset_tbl_ptr.i.i160.i, align 8
  %product.i.i.i164.i = mul i64 %hash_coef.i.i161.i, -5261542750394134544
  %shifted.i.i.i165.i = lshr i64 %product.i.i.i164.i, 32
  %xored.i.i.i166.i = xor i64 %shifted.i.i.i165.i, %product.i.i.i164.i
  %hash.i.i.i167.i = and i64 %xored.i.i.i166.i, %tbl_size.i.i162.i
  %offset_ptr.i.i168.i = getelementptr i32, ptr %offset_tbl.i.i163.i, i64 %hash.i.i.i167.i
  %offset.i.i169.i = load i32, ptr %offset_ptr.i.i168.i, align 4
  %eq.i172.i = icmp eq i32 %1437, %offset.i.i169.i
  call void @llvm.assume(i1 %eq.i172.i) #30
  store ptr @_parameterization_Ptri32, ptr %54, align 8
  %1439 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %54)
  %1440 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1431)
  %1441 = sext i32 %1437 to i64
  %1442 = getelementptr ptr, ptr %1431, i64 %1441
  %1443 = getelementptr i8, ptr %1442, i64 120
  %1444 = load ptr, ptr %1443, align 8
  store ptr @i32_typ, ptr %55, align 8
  %1445 = call ptr %1444({ ptr, ptr, ptr, i32 } %1438, ptr nonnull %55)
  %1446 = call { ptr, i160 } %1445({ ptr, ptr, ptr, i32 } %1438, { ptr, ptr, ptr, i32 } %1438, ptr nonnull %54, i32 %1429)
  %.fca.0.extract57.i = extractvalue { ptr, i160 } %1446, 0
  %1447 = icmp ne ptr %.fca.0.extract57.i, @nil_typ
  %1448 = icmp ne ptr %.fca.0.extract57.i, null
  %.not128.i = and i1 %1447, %1448
  br i1 %.not128.i, label %1449, label %HashMap_get_keyK.exit.thread

1449:                                             ; preds = %.critedge.i259
  %.fca.1.extract59.i = extractvalue { ptr, i160 } %1446, 1
  %.sroa.6.8.extract.trunc.i = trunc i160 %.fca.1.extract59.i to i64
  %1450 = inttoptr i64 %.sroa.6.8.extract.trunc.i to ptr
  %.sroa.11.8.extract.shift.i = lshr i160 %.fca.1.extract59.i, 64
  %.sroa.11.8.extract.trunc.i = trunc i160 %.sroa.11.8.extract.shift.i to i64
  %1451 = inttoptr i64 %.sroa.11.8.extract.trunc.i to ptr
  %hash_coef_ptr.i.i174.i260 = getelementptr i8, ptr %.fca.0.extract57.i, i64 8
  %tbl_size_ptr.i.i175.i261 = getelementptr i8, ptr %.fca.0.extract57.i, i64 16
  %offset_tbl_ptr.i.i176.i262 = getelementptr i8, ptr %.fca.0.extract57.i, i64 40
  %hash_coef.i.i177.i263 = load i64, ptr %hash_coef_ptr.i.i174.i260, align 4
  %tbl_size.i.i178.i264 = load i64, ptr %tbl_size_ptr.i.i175.i261, align 4
  %offset_tbl.i.i179.i265 = load ptr, ptr %offset_tbl_ptr.i.i176.i262, align 8
  %product.i.i.i180.i266 = mul i64 %hash_coef.i.i177.i263, 4015701072841558310
  %shifted.i.i.i181.i267 = lshr i64 %product.i.i.i180.i266, 32
  %xored.i.i.i182.i268 = xor i64 %shifted.i.i.i181.i267, %product.i.i.i180.i266
  %hash.i.i.i183.i269 = and i64 %xored.i.i.i182.i268, %tbl_size.i.i178.i264
  %offset_ptr.i.i184.i270 = getelementptr i32, ptr %offset_tbl.i.i179.i265, i64 %hash.i.i.i183.i269
  %offset.i.i185.i271 = load i32, ptr %offset_ptr.i.i184.i270, align 4
  %1452 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract57.i, 0
  %1453 = insertvalue { ptr, ptr, ptr, i32 } %1452, ptr %1450, 1
  %1454 = insertvalue { ptr, ptr, ptr, i32 } %1453, ptr %1451, 2
  %1455 = insertvalue { ptr, ptr, ptr, i32 } %1454, i32 %offset.i.i185.i271, 3
  %1456 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1457 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1458 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract57.i)
  %1459 = sext i32 %offset.i.i185.i271 to i64
  %1460 = getelementptr ptr, ptr %.fca.0.extract57.i, i64 %1459
  %1461 = getelementptr i8, ptr %1460, i64 64
  %1462 = load ptr, ptr %1461, align 8
  %1463 = call ptr %1462({ ptr, ptr, ptr, i32 } %1455, ptr nonnull %2)
  %1464 = call i32 %1463({ ptr, ptr, ptr, i32 } %1455, { ptr, ptr, ptr, i32 } %1455, ptr nonnull %2)
  %1465 = icmp eq i32 %1464, %1326
  %1466 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1467 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1468 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract57.i)
  %1469 = getelementptr i8, ptr %1460, i64 48
  %1470 = load ptr, ptr %1469, align 8
  %1471 = call ptr %1470({ ptr, ptr, ptr, i32 } %1455, ptr nonnull %2)
  %1472 = call { ptr, i160 } %1471({ ptr, ptr, ptr, i32 } %1455, { ptr, ptr, ptr, i32 } %1455, ptr nonnull %2)
  %1473 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1474 = load ptr, ptr %79, align 8
  %1475 = call i1 %1474({ ptr, i160 } %1472, { ptr, i160 } %1323)
  %1476 = and i1 %1465, %1475
  br i1 %1476, label %HashMap_get_keyK.exit, label %HashMap_get_keyK.exit.thread

HashMap_get_keyK.exit.thread:                     ; preds = %1449, %.critedge.i259
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0271.i)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.1.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %54)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %55)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0123.i)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2124.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0115.i)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2116.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %56)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %57)
  br label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit

HashMap_get_keyK.exit:                            ; preds = %1365, %1449
  %.pre-phi313.i = phi i64 [ %1375, %1365 ], [ %1459, %1449 ]
  %.pre-phi312.i = phi { ptr, ptr, ptr, i32 } [ %1371, %1365 ], [ %1455, %1449 ]
  %.reg2mem65.0.sroa.phi290.sroa.speculated.i = phi ptr [ %.fca.0.extract.i258, %1365 ], [ %.fca.0.extract57.i, %1449 ]
  %.reg2mem59.0.sroa.phi120289.i = phi ptr [ %.sroa.1.i, %1365 ], [ %.sroa.2124.i, %1449 ]
  %.reg2mem59.0.sroa.phi117288.i = phi ptr [ %.sroa.0271.i, %1365 ], [ %.sroa.0123.i, %1449 ]
  %.reg2mem57.0.sroa.phi94287.i = phi ptr [ %.sroa.2.i, %1365 ], [ %.sroa.2116.i, %1449 ]
  %.reg2mem57.0.sroa.phi91286.i = phi ptr [ %.sroa.0.i, %1365 ], [ %.sroa.0115.i, %1449 ]
  %1477 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1478 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1479 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.reg2mem65.0.sroa.phi290.sroa.speculated.i)
  %1480 = getelementptr ptr, ptr %.reg2mem65.0.sroa.phi290.sroa.speculated.i, i64 %.pre-phi313.i
  %1481 = getelementptr i8, ptr %1480, i64 56
  %1482 = load ptr, ptr %1481, align 8
  %1483 = call ptr %1482({ ptr, ptr, ptr, i32 } %.pre-phi312.i, ptr nonnull %2)
  %1484 = call { ptr, i160 } %1483({ ptr, ptr, ptr, i32 } %.pre-phi312.i, { ptr, ptr, ptr, i32 } %.pre-phi312.i, ptr nonnull %2)
  %.fca.0.extract97.i = extractvalue { ptr, i160 } %1484, 0
  store ptr %.fca.0.extract97.i, ptr %.reg2mem59.0.sroa.phi117288.i, align 8
  %.fca.1.extract99.i = extractvalue { ptr, i160 } %1484, 1
  store i160 %.fca.1.extract99.i, ptr %.reg2mem59.0.sroa.phi120289.i, align 8
  store ptr %.fca.0.extract97.i, ptr %.reg2mem57.0.sroa.phi91286.i, align 8
  store i160 %.fca.1.extract99.i, ptr %.reg2mem57.0.sroa.phi94287.i, align 8
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0271.i)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.1.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %54)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %55)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0123.i)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2124.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0115.i)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2116.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %56)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %57)
  %1485 = icmp ne ptr %.fca.0.extract97.i, @nil_typ
  %1486 = icmp ne ptr %.fca.0.extract97.i, null
  %.not33 = and i1 %1485, %1486
  br i1 %.not33, label %1487, label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit

1487:                                             ; preds = %HashMap_get_keyK.exit
  %.sroa.2.8.extract.trunc = trunc i160 %.fca.1.extract99.i to i32
  %1488 = sext i32 %.sroa.2.8.extract.trunc to i64
  %1489 = add i64 %.reg2mem80.0138, %1488
  br label %1512

IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit: ; preds = %HashMap_get_keyK.exit.thread, %HashMap_get_keyK.exit
  %result.i40 = call noalias dereferenceable_or_null(56) ptr @bump_malloc_inner(i64 noundef 56, ptr nonnull @current_ptr) #29
  %1490 = load <55 x i8>, ptr @aysju_Error_Nil_returned_during_sequential_hit_test_for_key_, align 64
  store <55 x i8> %1490, ptr %result.i40, align 64
  %result.i41 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  store ptr @String, ptr %69, align 8
  store ptr %result.i41, ptr %1320, align 8
  store i32 9, ptr %1321, align 8
  %1491 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %69)
  store ptr %result.i40, ptr %result.i41, align 8
  %1492 = getelementptr i8, ptr %result.i41, i64 8
  store i32 55, ptr %1492, align 4
  %1493 = getelementptr i8, ptr %result.i41, i64 12
  store i32 56, ptr %1493, align 4
  %1494 = load i160, ptr %1320, align 8
  %1495 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %.sroa.3.8.extract.trunc.i = trunc i160 %1494 to i64
  %1496 = inttoptr i64 %.sroa.3.8.extract.trunc.i to ptr
  %1497 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1498 = getelementptr i8, ptr %1496, i64 8
  %1499 = load i32, ptr %1498, align 4
  %1500 = add i32 %1499, 1
  %1501 = sext i32 %1500 to i64
  %result.i.i955 = call noalias ptr @bump_malloc_inner(i64 noundef %1501, ptr nonnull @current_ptr) #29
  %1502 = load i32, ptr %1498, align 4
  %1503 = icmp sgt i32 %1502, 0
  br i1 %1503, label %.lr.ph.i956, label %String_c_string_.exit

.lr.ph.i956:                                      ; preds = %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit
  %1504 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %1505 = load ptr, ptr %1496, align 8
  %1506 = zext nneg i32 %1502 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i955, ptr align 1 %1505, i64 %1506, i1 false)
  br label %String_c_string_.exit

String_c_string_.exit:                            ; preds = %.lr.ph.i956, %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit
  %1507 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %1508 = sext i32 %1502 to i64
  %1509 = getelementptr i8, ptr %result.i.i955, i64 %1508
  store i8 0, ptr %1509, align 1
  %puts.i = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i955)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %1510 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %1511 = call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i32_string, i32 %.reg2mem76.0136)
  br label %1512

1512:                                             ; preds = %1487, %String_c_string_.exit
  %1513 = phi i1 [ %.reg2mem78.0137, %1487 ], [ false, %String_c_string_.exit ]
  %.reg2mem74.0 = phi i64 [ %1489, %1487 ], [ %.reg2mem80.0138, %String_c_string_.exit ]
  %1514 = add nuw nsw i32 %.reg2mem76.0136, 1
  %1515 = icmp slt i32 %1514, %0
  br i1 %1515, label %1322, label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit81

IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit81: ; preds = %1512, %._crit_edge.thread
  %1516 = phi i64 [ %158, %._crit_edge.thread ], [ %1319, %1512 ]
  %.reg2mem92.0.lcssa158 = phi i64 [ 0, %._crit_edge.thread ], [ %1317, %1512 ]
  %.reg2mem78.0.lcssa = phi i1 [ true, %._crit_edge.thread ], [ %1513, %1512 ]
  %.reg2mem80.0.lcssa = phi i64 [ 0, %._crit_edge.thread ], [ %.reg2mem74.0, %1512 ]
  %1517 = call i64 @clock()
  %.not = icmp eq i64 %.reg2mem80.0.lcssa, %.reg2mem92.0.lcssa158
  %1518 = select i1 %.not, i1 %.reg2mem78.0.lcssa, i1 false
  %result.i60 = call noalias dereferenceable_or_null(19) ptr @bump_malloc_inner(i64 noundef 19, ptr nonnull @current_ptr) #29
  store <18 x i8> <i8 71, i8 101, i8 116, i8 32, i8 83, i8 101, i8 113, i8 117, i8 101, i8 110, i8 116, i8 105, i8 97, i8 108, i8 32, i8 72, i8 105, i8 116>, ptr %result.i60, align 32
  %result.i61 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %1519 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %result.i61, 1
  %1520 = insertvalue { ptr, ptr, ptr, i32 } %1519, ptr undef, 2
  %1521 = insertvalue { ptr, ptr, ptr, i32 } %1520, i32 9, 3
  store ptr %result.i60, ptr %result.i61, align 8
  %1522 = getelementptr i8, ptr %result.i61, i64 8
  store i32 18, ptr %1522, align 4
  %1523 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %1524 = getelementptr i8, ptr %result.i61, i64 12
  store i32 19, ptr %1524, align 4
  %1525 = sub i64 %1517, %1516
  call void @print_benchmark_result({ ptr, ptr, ptr, i32 } %1521, i32 %0, i64 %1525)
  %result.i62 = call noalias dereferenceable_or_null(19) ptr @bump_malloc_inner(i64 noundef 19, ptr nonnull @current_ptr) #29
  store <18 x i8> <i8 32, i8 32, i8 32, i8 32, i8 86, i8 101, i8 114, i8 105, i8 102, i8 105, i8 99, i8 97, i8 116, i8 105, i8 111, i8 110, i8 58, i8 32>, ptr %result.i62, align 32
  %result.i63 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %1526 = getelementptr inbounds i8, ptr %70, i64 8
  %1527 = getelementptr inbounds i8, ptr %70, i64 24
  store ptr @String, ptr %70, align 8
  store ptr %result.i63, ptr %1526, align 8
  store i32 9, ptr %1527, align 8
  %1528 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %70)
  store ptr %result.i62, ptr %result.i63, align 8
  %1529 = getelementptr i8, ptr %result.i63, i64 8
  store i32 18, ptr %1529, align 4
  %1530 = getelementptr i8, ptr %result.i63, i64 12
  store i32 19, ptr %1530, align 4
  %1531 = load i160, ptr %1526, align 8
  %1532 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %.sroa.3.8.extract.trunc.i294 = trunc i160 %1531 to i64
  %1533 = inttoptr i64 %.sroa.3.8.extract.trunc.i294 to ptr
  %1534 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1535 = getelementptr i8, ptr %1533, i64 8
  %1536 = load i32, ptr %1535, align 4
  %1537 = add i32 %1536, 1
  %1538 = sext i32 %1537 to i64
  %result.i.i972 = call noalias ptr @bump_malloc_inner(i64 noundef %1538, ptr nonnull @current_ptr) #29
  %1539 = load i32, ptr %1535, align 4
  %1540 = icmp sgt i32 %1539, 0
  br i1 %1540, label %.lr.ph.i973, label %String_c_string_.exit977

.lr.ph.i973:                                      ; preds = %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit81
  %1541 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %1542 = load ptr, ptr %1533, align 8
  %1543 = zext nneg i32 %1539 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i972, ptr align 1 %1542, i64 %1543, i1 false)
  br label %String_c_string_.exit977

String_c_string_.exit977:                         ; preds = %.lr.ph.i973, %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit81
  %1544 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %1545 = sext i32 %1539 to i64
  %1546 = getelementptr i8, ptr %result.i.i972, i64 %1545
  store i8 0, ptr %1546, align 1
  %puts.i310 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i972)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %result.i82 = call noalias dereferenceable_or_null(5) ptr @bump_malloc_inner(i64 noundef 5, ptr nonnull @current_ptr) #29
  %. = select i1 %1518, <4 x i8> <i8 80, i8 65, i8 83, i8 83>, <4 x i8> <i8 70, i8 65, i8 73, i8 76>
  %.228 = select i1 %1518, ptr %71, ptr %72
  store <4 x i8> %., ptr %result.i82, align 4
  %result.i103 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %.228.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v = select i1 %1518, ptr %71, ptr %72
  %.228.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel = getelementptr inbounds i8, ptr %.228.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v, i64 8
  %.228.sroa.sel334.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v = select i1 %1518, ptr %71, ptr %72
  %.228.sroa.sel334.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel = getelementptr inbounds i8, ptr %.228.sroa.sel334.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v, i64 24
  store ptr @String, ptr %.228, align 8
  store ptr %result.i103, ptr %.228.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  store i32 9, ptr %.228.sroa.sel334.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  %1547 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %.228)
  store ptr %result.i82, ptr %result.i103, align 8
  %1548 = getelementptr i8, ptr %result.i103, i64 8
  store i32 4, ptr %1548, align 4
  %1549 = getelementptr i8, ptr %result.i103, i64 12
  store i32 5, ptr %1549, align 4
  %1550 = load i160, ptr %.228.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  %1551 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %.sroa.3.8.extract.trunc.i314 = trunc i160 %1550 to i64
  %1552 = inttoptr i64 %.sroa.3.8.extract.trunc.i314 to ptr
  %1553 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1554 = getelementptr i8, ptr %1552, i64 8
  %1555 = load i32, ptr %1554, align 4
  %1556 = add i32 %1555, 1
  %1557 = sext i32 %1556 to i64
  %result.i.i992 = call noalias ptr @bump_malloc_inner(i64 noundef %1557, ptr nonnull @current_ptr) #29
  %1558 = load i32, ptr %1554, align 4
  %1559 = icmp sgt i32 %1558, 0
  br i1 %1559, label %.lr.ph.i993, label %String_c_string_.exit997

.lr.ph.i993:                                      ; preds = %String_c_string_.exit977
  %1560 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %1561 = load ptr, ptr %1552, align 8
  %1562 = zext nneg i32 %1558 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i992, ptr align 1 %1561, i64 %1562, i1 false)
  br label %String_c_string_.exit997

String_c_string_.exit997:                         ; preds = %.lr.ph.i993, %String_c_string_.exit977
  %1563 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %1564 = sext i32 %1558 to i64
  %1565 = getelementptr i8, ptr %result.i.i992, i64 %1564
  store i8 0, ptr %1565, align 1
  %puts.i330 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i992)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  ret void
}

define void @benchmark_get_random_hit(i32 %0) local_unnamed_addr {
  %2 = alloca [0 x ptr], align 8
  %3 = alloca [1 x ptr], align 8
  %4 = alloca { ptr }, align 8
  %5 = alloca [2 x ptr], align 8
  %6 = alloca { ptr, ptr }, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %.sroa.0680.i4454 = alloca ptr, align 8
  %10 = alloca i64, align 8
  %11 = alloca [1 x ptr], align 8
  %12 = alloca { ptr }, align 8
  %13 = alloca [2 x ptr], align 8
  %14 = alloca { ptr, ptr }, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %.sroa.0.i4456 = alloca ptr, align 8
  %18 = alloca i64, align 8
  %19 = alloca [1 x ptr], align 8
  %20 = alloca { ptr }, align 8
  %21 = alloca [2 x ptr], align 8
  %22 = alloca { ptr, ptr }, align 8
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %.sroa.0680.i4298 = alloca ptr, align 8
  %26 = alloca i64, align 8
  %27 = alloca [1 x ptr], align 8
  %28 = alloca { ptr }, align 8
  %29 = alloca [2 x ptr], align 8
  %30 = alloca { ptr, ptr }, align 8
  %31 = alloca i32, align 4
  %32 = alloca i32, align 4
  %33 = alloca i32, align 4
  %.sroa.0.i4300 = alloca ptr, align 8
  %34 = alloca i64, align 8
  %35 = alloca [1 x ptr], align 8
  %36 = alloca { ptr }, align 8
  %37 = alloca [2 x ptr], align 8
  %38 = alloca { ptr, ptr }, align 8
  %39 = alloca i32, align 4
  %40 = alloca i32, align 4
  %41 = alloca i32, align 4
  %.sroa.0680.i4142 = alloca ptr, align 8
  %42 = alloca i64, align 8
  %43 = alloca [1 x ptr], align 8
  %44 = alloca { ptr }, align 8
  %45 = alloca [2 x ptr], align 8
  %46 = alloca { ptr, ptr }, align 8
  %47 = alloca i32, align 4
  %48 = alloca i32, align 4
  %49 = alloca i32, align 4
  %.sroa.0.i4144 = alloca ptr, align 8
  %50 = alloca i64, align 8
  %51 = alloca [1 x ptr], align 8
  %52 = alloca { ptr }, align 8
  %53 = alloca [2 x ptr], align 8
  %54 = alloca { ptr, ptr }, align 8
  %55 = alloca i32, align 4
  %56 = alloca i32, align 4
  %57 = alloca i32, align 4
  %.sroa.0680.i4012 = alloca ptr, align 8
  %58 = alloca i64, align 8
  %59 = alloca [1 x ptr], align 8
  %60 = alloca { ptr }, align 8
  %61 = alloca [2 x ptr], align 8
  %62 = alloca { ptr, ptr }, align 8
  %63 = alloca i32, align 4
  %64 = alloca i32, align 4
  %65 = alloca i32, align 4
  %.sroa.0.i4013 = alloca ptr, align 8
  %66 = alloca i64, align 8
  %67 = alloca [1 x ptr], align 8
  %68 = alloca { ptr }, align 8
  %69 = alloca [2 x ptr], align 8
  %70 = alloca { ptr, ptr }, align 8
  %71 = alloca i32, align 4
  %72 = alloca i32, align 4
  %73 = alloca i32, align 4
  %.sroa.0680.i3797 = alloca ptr, align 8
  %74 = alloca i64, align 8
  %75 = alloca [1 x ptr], align 8
  %76 = alloca { ptr }, align 8
  %77 = alloca [2 x ptr], align 8
  %78 = alloca { ptr, ptr }, align 8
  %79 = alloca i32, align 4
  %80 = alloca i32, align 4
  %81 = alloca i32, align 4
  %.sroa.0.i3799 = alloca ptr, align 8
  %82 = alloca i64, align 8
  %83 = alloca [1 x ptr], align 8
  %84 = alloca { ptr }, align 8
  %85 = alloca [2 x ptr], align 8
  %86 = alloca { ptr, ptr }, align 8
  %87 = alloca i32, align 4
  %88 = alloca i32, align 4
  %89 = alloca i32, align 4
  %.sroa.0680.i3640 = alloca ptr, align 8
  %90 = alloca i64, align 8
  %91 = alloca [1 x ptr], align 8
  %92 = alloca { ptr }, align 8
  %93 = alloca [2 x ptr], align 8
  %94 = alloca { ptr, ptr }, align 8
  %95 = alloca i32, align 4
  %96 = alloca i32, align 4
  %97 = alloca i32, align 4
  %.sroa.0.i3642 = alloca ptr, align 8
  %98 = alloca i64, align 8
  %99 = alloca [1 x ptr], align 8
  %100 = alloca { ptr }, align 8
  %101 = alloca [2 x ptr], align 8
  %102 = alloca { ptr, ptr }, align 8
  %103 = alloca i32, align 4
  %104 = alloca i32, align 4
  %105 = alloca i32, align 4
  %.sroa.0680.i3483 = alloca ptr, align 8
  %106 = alloca i64, align 8
  %107 = alloca [1 x ptr], align 8
  %108 = alloca { ptr }, align 8
  %109 = alloca [2 x ptr], align 8
  %110 = alloca { ptr, ptr }, align 8
  %111 = alloca i32, align 4
  %112 = alloca i32, align 4
  %113 = alloca i32, align 4
  %.sroa.0.i3485 = alloca ptr, align 8
  %114 = alloca i64, align 8
  %115 = alloca [1 x ptr], align 8
  %116 = alloca { ptr }, align 8
  %117 = alloca [2 x ptr], align 8
  %118 = alloca { ptr, ptr }, align 8
  %119 = alloca i32, align 4
  %120 = alloca i32, align 4
  %121 = alloca i32, align 4
  %.sroa.0680.i3369 = alloca ptr, align 8
  %122 = alloca i64, align 8
  %123 = alloca [1 x ptr], align 8
  %124 = alloca { ptr }, align 8
  %125 = alloca [2 x ptr], align 8
  %126 = alloca { ptr, ptr }, align 8
  %127 = alloca i32, align 4
  %128 = alloca i32, align 4
  %129 = alloca i32, align 4
  %.sroa.0.i3370 = alloca ptr, align 8
  %130 = alloca i64, align 8
  %131 = alloca [1 x ptr], align 8
  %132 = alloca { ptr }, align 8
  %133 = alloca [1 x ptr], align 8
  %134 = alloca { ptr }, align 8
  %135 = alloca [1 x ptr], align 8
  %136 = alloca { ptr }, align 8
  %137 = alloca [1 x ptr], align 8
  %138 = alloca { ptr }, align 8
  %139 = alloca [1 x ptr], align 8
  %140 = alloca { ptr }, align 8
  %141 = alloca [1 x ptr], align 8
  %142 = alloca { ptr }, align 8
  %143 = alloca [1 x ptr], align 8
  %144 = alloca { ptr }, align 8
  %145 = alloca [1 x ptr], align 8
  %146 = alloca { ptr }, align 8
  %147 = alloca [1 x ptr], align 8
  %148 = alloca { ptr }, align 8
  %149 = alloca [1 x ptr], align 8
  %150 = alloca { ptr }, align 8
  %151 = alloca [1 x ptr], align 8
  %152 = alloca { ptr }, align 8
  %153 = alloca [1 x ptr], align 8
  %154 = alloca { ptr }, align 8
  %155 = alloca { ptr, ptr, ptr, i32 }, align 8
  %156 = alloca { ptr, ptr, ptr, i32 }, align 8
  %157 = alloca [1 x ptr], align 8
  %158 = alloca { ptr }, align 8
  %159 = alloca [2 x ptr], align 8
  %160 = alloca { ptr, ptr }, align 8
  %161 = alloca i32, align 4
  %162 = alloca i32, align 4
  %163 = alloca i32, align 4
  %.sroa.0680.i2098 = alloca ptr, align 8
  %164 = alloca i64, align 8
  %165 = alloca [1 x ptr], align 8
  %166 = alloca { ptr }, align 8
  %167 = alloca [2 x ptr], align 8
  %168 = alloca { ptr, ptr }, align 8
  %169 = alloca i32, align 4
  %170 = alloca i32, align 4
  %171 = alloca i32, align 4
  %.sroa.0.i2100 = alloca ptr, align 8
  %172 = alloca i64, align 8
  %173 = alloca { ptr, ptr, ptr, i32 }, align 8
  %174 = alloca { ptr, ptr, ptr, i32 }, align 8
  %175 = alloca [1 x ptr], align 8
  %176 = alloca { ptr }, align 8
  %177 = alloca [2 x ptr], align 8
  %178 = alloca { ptr, ptr }, align 8
  %179 = alloca i32, align 4
  %180 = alloca i32, align 4
  %181 = alloca i32, align 4
  %.sroa.0680.i1845 = alloca ptr, align 8
  %182 = alloca i64, align 8
  %183 = alloca [1 x ptr], align 8
  %184 = alloca { ptr }, align 8
  %185 = alloca [2 x ptr], align 8
  %186 = alloca { ptr, ptr }, align 8
  %187 = alloca i32, align 4
  %188 = alloca i32, align 4
  %189 = alloca i32, align 4
  %.sroa.0.i1846 = alloca ptr, align 8
  %190 = alloca i64, align 8
  %191 = alloca { ptr, ptr, ptr, i32 }, align 8
  %192 = alloca { ptr, ptr, ptr, i32 }, align 8
  %193 = alloca { ptr, ptr, ptr, i32 }, align 8
  %194 = alloca { ptr, ptr, ptr, i32 }, align 8
  %195 = alloca { ptr, ptr, ptr, i32 }, align 8
  %196 = alloca [1 x ptr], align 8
  %197 = alloca { ptr }, align 8
  %198 = alloca [2 x ptr], align 8
  %199 = alloca { ptr, ptr }, align 8
  %200 = alloca i32, align 4
  %201 = alloca i32, align 4
  %202 = alloca i32, align 4
  %.sroa.0680.i1289 = alloca ptr, align 8
  %203 = alloca i64, align 8
  %204 = alloca [1 x ptr], align 8
  %205 = alloca { ptr }, align 8
  %206 = alloca [2 x ptr], align 8
  %207 = alloca { ptr, ptr }, align 8
  %208 = alloca i32, align 4
  %209 = alloca i32, align 4
  %210 = alloca i32, align 4
  %.sroa.0.i1291 = alloca ptr, align 8
  %211 = alloca i64, align 8
  %212 = alloca { ptr, ptr, ptr, i32 }, align 8
  %213 = alloca { ptr, ptr, ptr, i32 }, align 8
  %214 = alloca [1 x ptr], align 8
  %215 = alloca { ptr }, align 8
  %216 = alloca [2 x ptr], align 8
  %217 = alloca { ptr, ptr }, align 8
  %218 = alloca i32, align 4
  %219 = alloca i32, align 4
  %220 = alloca i32, align 4
  %.sroa.0680.i = alloca ptr, align 8
  %221 = alloca i64, align 8
  %222 = alloca [1 x ptr], align 8
  %223 = alloca { ptr }, align 8
  %224 = alloca [2 x ptr], align 8
  %225 = alloca { ptr, ptr }, align 8
  %226 = alloca i32, align 4
  %227 = alloca i32, align 4
  %228 = alloca i32, align 4
  %.sroa.0.i1133 = alloca ptr, align 8
  %229 = alloca i64, align 8
  %230 = alloca { ptr, ptr, ptr, i32 }, align 8
  %231 = alloca { ptr, ptr, ptr, i32 }, align 8
  %232 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.sroa.0271.i866 = alloca ptr, align 8
  %.sroa.1.i867 = alloca i160, align 8
  %.sroa.0.i868 = alloca ptr, align 8
  %.sroa.2.i869 = alloca i160, align 8
  %233 = alloca [1 x ptr], align 8
  %234 = alloca { ptr }, align 8
  %.sroa.0123.i870 = alloca ptr, align 8
  %.sroa.2124.i871 = alloca i160, align 8
  %.sroa.0115.i872 = alloca ptr, align 8
  %.sroa.2116.i873 = alloca i160, align 8
  %235 = alloca [1 x ptr], align 8
  %236 = alloca { ptr }, align 8
  %237 = alloca { ptr, ptr, ptr, i32 }, align 8
  %238 = alloca [2 x ptr], align 8
  %239 = alloca { ptr, ptr }, align 8
  %240 = alloca [1 x ptr], align 8
  %241 = alloca { ptr }, align 8
  %242 = alloca { ptr, ptr, ptr, i32 }, align 8
  %243 = alloca [2 x ptr], align 8
  %244 = alloca { ptr, ptr }, align 8
  %245 = alloca { ptr, ptr, ptr, i32 }, align 8
  %246 = alloca [1 x ptr], align 8
  %247 = alloca { ptr }, align 8
  %248 = alloca { ptr, ptr, ptr, i32 }, align 8
  %249 = alloca [2 x ptr], align 8
  %250 = alloca { ptr, ptr }, align 8
  %251 = alloca [1 x ptr], align 8
  %252 = alloca { ptr }, align 8
  %253 = alloca { ptr, ptr, ptr, i32 }, align 8
  %254 = alloca [2 x ptr], align 8
  %255 = alloca { ptr, ptr }, align 8
  %256 = alloca { ptr, ptr, ptr, i32 }, align 8
  %257 = alloca [1 x ptr], align 8
  %258 = alloca { ptr }, align 8
  %.sroa.0271.i = alloca ptr, align 8
  %.sroa.1.i = alloca i160, align 8
  %.sroa.0.i = alloca ptr, align 8
  %.sroa.2.i = alloca i160, align 8
  %259 = alloca [1 x ptr], align 8
  %260 = alloca { ptr }, align 8
  %.sroa.0123.i = alloca ptr, align 8
  %.sroa.2124.i = alloca i160, align 8
  %.sroa.0115.i = alloca ptr, align 8
  %.sroa.2116.i = alloca i160, align 8
  %261 = alloca [1 x ptr], align 8
  %262 = alloca { ptr }, align 8
  %oldProtect.i117 = alloca i32, align 4
  %oldProtect.i113 = alloca i32, align 4
  %oldProtect.i78 = alloca i32, align 4
  %oldProtect.i = alloca i32, align 4
  %.sroa.048.sroa.0 = alloca i8, align 8
  %263 = alloca { ptr, ptr, ptr, i32 }, align 8
  %264 = alloca { ptr, ptr, ptr, i32 }, align 8
  %265 = alloca { ptr, ptr, ptr, i32 }, align 8
  %266 = alloca { ptr, ptr, ptr, i32 }, align 8
  %267 = alloca { ptr, ptr, ptr, i32 }, align 8
  %268 = alloca { ptr, ptr, ptr, i32 }, align 8
  %result.i = tail call noalias dereferenceable_or_null(120) ptr @bump_malloc_inner(i64 noundef 120, ptr nonnull @current_ptr) #29
  store ptr @_parameterization_Ptri32, ptr %result.i, align 8
  %269 = getelementptr i8, ptr %result.i, i64 8
  store ptr @_parameterization_Ptri32, ptr %269, align 8
  %270 = getelementptr i8, ptr %result.i, i64 16
  store ptr @_parameterization_PairPtri32._Ptri32, ptr %270, align 8
  %271 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %result.i)
  %result.i75 = tail call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %oldProtect.i)
  %result.i76 = call i32 @VirtualProtect(ptr %result.i75, i64 16, i32 64, ptr nonnull %oldProtect.i) #16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %oldProtect.i)
  call void @llvm.init.trampoline(ptr %result.i75, ptr nonnull @xztzoilqpm, ptr nonnull @i32_hasher)
  %ret.i = call ptr @llvm.adjust.trampoline(ptr readonly %result.i75) #31
  %272 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i75)
  %result.i77 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %oldProtect.i78)
  %result.i79 = call i32 @VirtualProtect(ptr %result.i77, i64 16, i32 64, ptr nonnull %oldProtect.i78) #16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %oldProtect.i78)
  call void @llvm.init.trampoline(ptr %result.i77, ptr nonnull @mtctyiiviy, ptr nonnull @i32_eq)
  %ret.i80 = call ptr @llvm.adjust.trampoline(ptr readonly %result.i77) #31
  %273 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i77)
  %274 = getelementptr i8, ptr %result.i, i64 96
  store ptr %ret.i, ptr %274, align 8
  %275 = getelementptr i8, ptr %result.i, i64 104
  store ptr %ret.i80, ptr %275, align 8
  %result.i.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %276 = getelementptr i8, ptr %result.i.i, i64 16
  store ptr @_parameterization_Nil, ptr %276, align 8
  %result.i4.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %277 = getelementptr i8, ptr %result.i4.i, i64 16
  store ptr @_parameterization_Ptri32, ptr %277, align 8
  %278 = getelementptr i8, ptr %result.i4.i, i64 8
  store ptr @_parameterization_Ptri32, ptr %278, align 8
  %279 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i4.i)
  store ptr @Entry, ptr %result.i4.i, align 8
  %280 = getelementptr i8, ptr %result.i.i, i64 8
  store ptr %result.i4.i, ptr %280, align 8
  %281 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i)
  store ptr @union_typ, ptr %result.i.i, align 8
  %result.i5.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i, ptr %result.i5.i, align 8
  %282 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i5.i)
  %283 = getelementptr i8, ptr %result.i5.i, i64 16
  store i32 8, ptr %283, align 4
  %284 = getelementptr i8, ptr %result.i5.i, i64 20
  store i32 8, ptr %284, align 4
  %result.i.i.i = call noalias dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nonnull @current_ptr) #29
  %285 = getelementptr i8, ptr %result.i5.i, i64 8
  store ptr %result.i.i.i, ptr %285, align 8
  %286 = getelementptr i8, ptr %result.i, i64 24
  store ptr @Array, ptr %286, align 8
  %287 = getelementptr i8, ptr %result.i, i64 32
  store ptr %result.i5.i, ptr %287, align 8
  %288 = getelementptr i8, ptr %result.i, i64 48
  store i32 9, ptr %288, align 4
  %result.i20.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %289 = getelementptr i8, ptr %result.i20.i, i64 16
  store ptr @_parameterization_Nil, ptr %289, align 8
  %result.i21.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %290 = getelementptr i8, ptr %result.i21.i, i64 16
  store ptr @_parameterization_Ptri32, ptr %290, align 8
  %291 = getelementptr i8, ptr %result.i21.i, i64 8
  store ptr @_parameterization_Ptri32, ptr %291, align 8
  %292 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i21.i)
  store ptr @Entry, ptr %result.i21.i, align 8
  %293 = getelementptr i8, ptr %result.i20.i, i64 8
  store ptr %result.i21.i, ptr %293, align 8
  %294 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i20.i)
  store ptr @union_typ, ptr %result.i20.i, align 8
  %result.i22.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i20.i, ptr %result.i22.i, align 8
  %295 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i22.i)
  %296 = getelementptr i8, ptr %result.i22.i, i64 16
  store i32 8, ptr %296, align 4
  %297 = getelementptr i8, ptr %result.i22.i, i64 20
  store i32 8, ptr %297, align 4
  %result.i.i97.i = call noalias dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nonnull @current_ptr) #29
  %298 = getelementptr i8, ptr %result.i22.i, i64 8
  store ptr %result.i.i97.i, ptr %298, align 8
  %299 = getelementptr i8, ptr %result.i, i64 56
  store ptr @Array, ptr %299, align 8
  %300 = getelementptr i8, ptr %result.i, i64 64
  store ptr %result.i22.i, ptr %300, align 8
  %301 = getelementptr i8, ptr %result.i, i64 80
  store i32 9, ptr %301, align 4
  %302 = getelementptr i8, ptr %result.i, i64 112
  store i32 100, ptr %302, align 4
  %result.i81 = call noalias dereferenceable_or_null(4) ptr @bump_malloc_inner(i64 noundef 4, ptr nonnull @current_ptr) #29
  %303 = call ptr @llvm.invariant.start.p0(i64 40, ptr nonnull @PRNG)
  store i32 456, ptr %result.i81, align 4
  %result.i96 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr @_parameterization_Ptri32, ptr %result.i96, align 8
  %304 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i96)
  %305 = getelementptr i8, ptr %result.i96, i64 20
  store i32 %0, ptr %305, align 4
  %306 = sext i32 %0 to i64
  %307 = shl nsw i64 %306, 5
  %result.i.i346 = call noalias ptr @bump_malloc_inner(i64 noundef %307, ptr nonnull @current_ptr) #29
  %308 = getelementptr i8, ptr %result.i96, i64 8
  store ptr %result.i.i346, ptr %308, align 8
  %result.i111 = call noalias dereferenceable_or_null(120) ptr @bump_malloc_inner(i64 noundef 120, ptr nonnull @current_ptr) #29
  store ptr @_parameterization_Ptri32, ptr %result.i111, align 8
  %309 = getelementptr i8, ptr %result.i111, i64 8
  store ptr @_parameterization_Ptri1, ptr %309, align 8
  %310 = getelementptr i8, ptr %result.i111, i64 16
  store ptr @_parameterization_PairPtri32._Ptri1, ptr %310, align 8
  %311 = call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %result.i111)
  %result.i112 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %oldProtect.i113)
  %result.i114 = call i32 @VirtualProtect(ptr %result.i112, i64 16, i32 64, ptr nonnull %oldProtect.i113) #16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %oldProtect.i113)
  call void @llvm.init.trampoline(ptr %result.i112, ptr nonnull @hxlaoascfo, ptr nonnull @i32_hasher)
  %ret.i115 = call ptr @llvm.adjust.trampoline(ptr readonly %result.i112) #31
  %312 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i112)
  %result.i116 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %oldProtect.i117)
  %result.i118 = call i32 @VirtualProtect(ptr %result.i116, i64 16, i32 64, ptr nonnull %oldProtect.i117) #16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %oldProtect.i117)
  call void @llvm.init.trampoline(ptr %result.i116, ptr nonnull @txjdgwldxv, ptr nonnull @i32_eq)
  %ret.i119 = call ptr @llvm.adjust.trampoline(ptr readonly %result.i116) #31
  %313 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i116)
  %314 = getelementptr i8, ptr %result.i111, i64 96
  store ptr %ret.i115, ptr %314, align 8
  %315 = getelementptr i8, ptr %result.i111, i64 104
  store ptr %ret.i119, ptr %315, align 8
  %result.i.i483 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %316 = getelementptr i8, ptr %result.i.i483, i64 16
  store ptr @_parameterization_Nil, ptr %316, align 8
  %result.i4.i484 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %317 = getelementptr i8, ptr %result.i4.i484, i64 16
  store ptr @_parameterization_Ptri1, ptr %317, align 8
  %318 = getelementptr i8, ptr %result.i4.i484, i64 8
  store ptr @_parameterization_Ptri32, ptr %318, align 8
  %319 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i4.i484)
  store ptr @Entry, ptr %result.i4.i484, align 8
  %320 = getelementptr i8, ptr %result.i.i483, i64 8
  store ptr %result.i4.i484, ptr %320, align 8
  %321 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i483)
  store ptr @union_typ, ptr %result.i.i483, align 8
  %result.i5.i485 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i483, ptr %result.i5.i485, align 8
  %322 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i5.i485)
  %323 = getelementptr i8, ptr %result.i5.i485, i64 16
  store i32 8, ptr %323, align 4
  %324 = getelementptr i8, ptr %result.i5.i485, i64 20
  store i32 8, ptr %324, align 4
  %result.i.i.i486 = call noalias dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nonnull @current_ptr) #29
  %325 = getelementptr i8, ptr %result.i5.i485, i64 8
  store ptr %result.i.i.i486, ptr %325, align 8
  %326 = getelementptr i8, ptr %result.i111, i64 24
  store ptr @Array, ptr %326, align 8
  %327 = getelementptr i8, ptr %result.i111, i64 32
  store ptr %result.i5.i485, ptr %327, align 8
  %328 = getelementptr i8, ptr %result.i111, i64 40
  %329 = getelementptr i8, ptr %result.i111, i64 48
  store i32 9, ptr %329, align 4
  %result.i20.i487 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %330 = getelementptr i8, ptr %result.i20.i487, i64 16
  store ptr @_parameterization_Nil, ptr %330, align 8
  %result.i21.i488 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %331 = getelementptr i8, ptr %result.i21.i488, i64 16
  store ptr @_parameterization_Ptri1, ptr %331, align 8
  %332 = getelementptr i8, ptr %result.i21.i488, i64 8
  store ptr @_parameterization_Ptri32, ptr %332, align 8
  %333 = getelementptr i8, ptr %result.i21.i488, i64 24
  store ptr null, ptr %333, align 8
  %334 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i21.i488)
  store ptr @Entry, ptr %result.i21.i488, align 8
  %335 = getelementptr i8, ptr %result.i20.i487, i64 8
  store ptr %result.i21.i488, ptr %335, align 8
  %336 = getelementptr i8, ptr %result.i20.i487, i64 24
  store ptr null, ptr %336, align 8
  %337 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i20.i487)
  store ptr @union_typ, ptr %result.i20.i487, align 8
  %result.i22.i489 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i20.i487, ptr %result.i22.i489, align 8
  %338 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i22.i489)
  %339 = getelementptr i8, ptr %result.i22.i489, i64 16
  store i32 8, ptr %339, align 4
  %340 = getelementptr i8, ptr %result.i22.i489, i64 20
  store i32 8, ptr %340, align 4
  %result.i.i97.i490 = call noalias dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nonnull @current_ptr) #29
  %341 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %342 = getelementptr i8, ptr %result.i22.i489, i64 8
  store ptr %result.i.i97.i490, ptr %342, align 8
  %343 = getelementptr i8, ptr %result.i111, i64 56
  store ptr @Array, ptr %343, align 8
  %344 = getelementptr i8, ptr %result.i111, i64 64
  store ptr %result.i22.i489, ptr %344, align 8
  %345 = getelementptr i8, ptr %result.i111, i64 72
  %346 = getelementptr i8, ptr %result.i111, i64 80
  store i32 9, ptr %346, align 4
  %347 = getelementptr i8, ptr %result.i111, i64 88
  store i32 0, ptr %347, align 4
  %348 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %349 = getelementptr i8, ptr %result.i111, i64 112
  store i32 100, ptr %349, align 4
  %350 = mul i32 %0, 10
  %351 = icmp sgt i32 %0, 0
  %352 = icmp sgt i32 %350, 0
  %353 = and i1 %351, %352
  br i1 %353, label %.lr.ph, label %._crit_edge306

.lr.ph:                                           ; preds = %1
  %354 = getelementptr inbounds i8, ptr %256, i64 8
  %355 = getelementptr inbounds i8, ptr %256, i64 24
  %356 = getelementptr inbounds i8, ptr %256, i64 16
  %357 = getelementptr inbounds i8, ptr %253, i64 8
  %358 = getelementptr inbounds i8, ptr %253, i64 24
  %359 = getelementptr inbounds i8, ptr %253, i64 16
  %360 = getelementptr inbounds i8, ptr %254, i64 8
  %361 = getelementptr inbounds i8, ptr %255, i64 8
  %362 = getelementptr inbounds i8, ptr %248, i64 8
  %363 = getelementptr inbounds i8, ptr %248, i64 24
  %364 = getelementptr inbounds i8, ptr %248, i64 16
  %365 = getelementptr inbounds i8, ptr %249, i64 8
  %366 = getelementptr inbounds i8, ptr %250, i64 8
  %367 = getelementptr inbounds i8, ptr %245, i64 8
  %368 = getelementptr inbounds i8, ptr %245, i64 24
  %369 = getelementptr inbounds i8, ptr %245, i64 16
  %370 = getelementptr inbounds i8, ptr %242, i64 8
  %371 = getelementptr inbounds i8, ptr %242, i64 24
  %372 = getelementptr inbounds i8, ptr %242, i64 16
  %373 = getelementptr inbounds i8, ptr %243, i64 8
  %374 = getelementptr inbounds i8, ptr %244, i64 8
  %375 = getelementptr inbounds i8, ptr %237, i64 8
  %376 = getelementptr inbounds i8, ptr %237, i64 24
  %377 = getelementptr inbounds i8, ptr %237, i64 16
  %378 = getelementptr inbounds i8, ptr %238, i64 8
  %379 = getelementptr inbounds i8, ptr %239, i64 8
  %380 = getelementptr i8, ptr %result.i, i64 40
  %381 = getelementptr i8, ptr %result.i, i64 72
  %382 = getelementptr i8, ptr %result.i, i64 88
  %383 = getelementptr inbounds i8, ptr %231, i64 8
  %384 = getelementptr inbounds i8, ptr %231, i64 24
  %385 = getelementptr inbounds i8, ptr %231, i64 16
  %386 = getelementptr inbounds i8, ptr %232, i64 8
  %387 = getelementptr inbounds i8, ptr %232, i64 24
  %388 = getelementptr inbounds i8, ptr %232, i64 16
  %389 = getelementptr inbounds i8, ptr %230, i64 8
  %390 = getelementptr inbounds i8, ptr %230, i64 16
  %391 = getelementptr inbounds i8, ptr %230, i64 24
  %392 = getelementptr inbounds i8, ptr %224, i64 8
  %393 = getelementptr inbounds i8, ptr %225, i64 8
  %394 = getelementptr inbounds i8, ptr %216, i64 8
  %395 = getelementptr inbounds i8, ptr %217, i64 8
  %396 = getelementptr inbounds i8, ptr %212, i64 8
  %397 = getelementptr inbounds i8, ptr %212, i64 24
  %398 = getelementptr inbounds i8, ptr %212, i64 16
  %399 = getelementptr inbounds i8, ptr %213, i64 8
  %400 = getelementptr inbounds i8, ptr %213, i64 24
  %401 = getelementptr inbounds i8, ptr %213, i64 16
  %402 = getelementptr inbounds i8, ptr %206, i64 8
  %403 = getelementptr inbounds i8, ptr %207, i64 8
  %404 = getelementptr inbounds i8, ptr %198, i64 8
  %405 = getelementptr inbounds i8, ptr %199, i64 8
  %406 = getelementptr inbounds i8, ptr %194, i64 8
  %407 = getelementptr inbounds i8, ptr %194, i64 24
  %408 = getelementptr inbounds i8, ptr %194, i64 16
  %409 = getelementptr inbounds i8, ptr %195, i64 8
  %410 = getelementptr inbounds i8, ptr %195, i64 24
  %411 = getelementptr inbounds i8, ptr %195, i64 16
  %412 = getelementptr inbounds i8, ptr %192, i64 8
  %413 = getelementptr inbounds i8, ptr %192, i64 24
  %414 = getelementptr inbounds i8, ptr %192, i64 16
  %415 = getelementptr inbounds i8, ptr %193, i64 8
  %416 = getelementptr inbounds i8, ptr %193, i64 24
  %417 = getelementptr inbounds i8, ptr %193, i64 16
  %418 = getelementptr inbounds i8, ptr %191, i64 8
  %419 = getelementptr inbounds i8, ptr %191, i64 16
  %420 = getelementptr inbounds i8, ptr %191, i64 24
  %421 = getelementptr inbounds i8, ptr %185, i64 8
  %422 = getelementptr inbounds i8, ptr %186, i64 8
  %423 = getelementptr inbounds i8, ptr %177, i64 8
  %424 = getelementptr inbounds i8, ptr %178, i64 8
  %425 = getelementptr inbounds i8, ptr %173, i64 8
  %426 = getelementptr inbounds i8, ptr %173, i64 24
  %427 = getelementptr inbounds i8, ptr %173, i64 16
  %428 = getelementptr inbounds i8, ptr %174, i64 8
  %429 = getelementptr inbounds i8, ptr %174, i64 24
  %430 = getelementptr inbounds i8, ptr %174, i64 16
  %431 = getelementptr inbounds i8, ptr %167, i64 8
  %432 = getelementptr inbounds i8, ptr %168, i64 8
  %433 = getelementptr inbounds i8, ptr %159, i64 8
  %434 = getelementptr inbounds i8, ptr %160, i64 8
  %435 = getelementptr inbounds i8, ptr %155, i64 8
  %436 = getelementptr inbounds i8, ptr %155, i64 24
  %437 = getelementptr inbounds i8, ptr %155, i64 16
  %438 = getelementptr inbounds i8, ptr %156, i64 8
  %439 = getelementptr inbounds i8, ptr %156, i64 24
  %440 = getelementptr inbounds i8, ptr %156, i64 16
  %441 = insertvalue { ptr, ptr, ptr, i32 } { ptr @HashMap, ptr undef, ptr undef, i32 undef }, ptr %result.i111, 1
  %442 = insertvalue { ptr, ptr, ptr, i32 } %441, ptr undef, 2
  %443 = insertvalue { ptr, ptr, ptr, i32 } %442, i32 9, 3
  %444 = insertvalue { ptr, ptr, ptr, i32 } { ptr @HashMap, ptr undef, ptr undef, i32 undef }, ptr %result.i, 1
  %445 = insertvalue { ptr, ptr, ptr, i32 } %444, ptr undef, 2
  %446 = insertvalue { ptr, ptr, ptr, i32 } %445, i32 9, 3
  %447 = getelementptr inbounds i8, ptr %125, i64 8
  %448 = getelementptr inbounds i8, ptr %126, i64 8
  %449 = getelementptr inbounds i8, ptr %117, i64 8
  %450 = getelementptr inbounds i8, ptr %118, i64 8
  %451 = getelementptr inbounds i8, ptr %109, i64 8
  %452 = getelementptr inbounds i8, ptr %110, i64 8
  %453 = getelementptr inbounds i8, ptr %101, i64 8
  %454 = getelementptr inbounds i8, ptr %102, i64 8
  %455 = getelementptr inbounds i8, ptr %93, i64 8
  %456 = getelementptr inbounds i8, ptr %94, i64 8
  %457 = getelementptr inbounds i8, ptr %85, i64 8
  %458 = getelementptr inbounds i8, ptr %86, i64 8
  %459 = getelementptr inbounds i8, ptr %77, i64 8
  %460 = getelementptr inbounds i8, ptr %78, i64 8
  %461 = getelementptr inbounds i8, ptr %69, i64 8
  %462 = getelementptr inbounds i8, ptr %70, i64 8
  %463 = getelementptr inbounds i8, ptr %61, i64 8
  %464 = getelementptr inbounds i8, ptr %62, i64 8
  %465 = getelementptr inbounds i8, ptr %53, i64 8
  %466 = getelementptr inbounds i8, ptr %54, i64 8
  %467 = getelementptr inbounds i8, ptr %45, i64 8
  %468 = getelementptr inbounds i8, ptr %46, i64 8
  %469 = getelementptr inbounds i8, ptr %37, i64 8
  %470 = getelementptr inbounds i8, ptr %38, i64 8
  %471 = getelementptr inbounds i8, ptr %29, i64 8
  %472 = getelementptr inbounds i8, ptr %30, i64 8
  %473 = getelementptr inbounds i8, ptr %21, i64 8
  %474 = getelementptr inbounds i8, ptr %22, i64 8
  %475 = getelementptr inbounds i8, ptr %13, i64 8
  %476 = getelementptr inbounds i8, ptr %14, i64 8
  %477 = getelementptr inbounds i8, ptr %5, i64 8
  %478 = getelementptr inbounds i8, ptr %6, i64 8
  br label %479

479:                                              ; preds = %.lr.ph, %4382
  %.reg2mem133.0304 = phi i64 [ 0, %.lr.ph ], [ %.reg2mem127.0, %4382 ]
  %.reg2mem131.0303 = phi i32 [ 0, %.lr.ph ], [ %.reg2mem125.0, %4382 ]
  %.reg2mem129.0302 = phi i32 [ 0, %.lr.ph ], [ %4383, %4382 ]
  %480 = load i32, ptr %result.i81, align 4
  %481 = mul i32 %480, 1103515245
  %482 = add i32 %481, 12345
  %483 = and i32 %482, 2147483647
  store i32 %483, ptr %result.i81, align 4
  %484 = call ptr @llvm.invariant.start.p0(i64 40, ptr nonnull @PRNG)
  %.sroa.071.0.insert.ext = zext nneg i32 %483 to i160
  %485 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.071.0.insert.ext, 1
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0271.i)
  call void @llvm.lifetime.start.p0(i64 20, ptr nonnull %.sroa.1.i)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i)
  call void @llvm.lifetime.start.p0(i64 20, ptr nonnull %.sroa.2.i)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %259)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %260)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0123.i)
  call void @llvm.lifetime.start.p0(i64 20, ptr nonnull %.sroa.2124.i)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0115.i)
  call void @llvm.lifetime.start.p0(i64 20, ptr nonnull %.sroa.2116.i)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %261)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %262)
  %486 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %487 = load ptr, ptr %314, align 8
  %488 = call i32 %487({ ptr, i160 } %485)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %489 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %490 = load ptr, ptr %326, align 8
  %491 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %490, 0
  %492 = load ptr, ptr %327, align 8
  %493 = insertvalue { ptr, ptr, ptr, i32 } %491, ptr %492, 1
  %494 = load ptr, ptr %328, align 8
  %495 = insertvalue { ptr, ptr, ptr, i32 } %493, ptr %494, 2
  %496 = load i32, ptr %329, align 4
  %497 = insertvalue { ptr, ptr, ptr, i32 } %495, i32 %496, 3
  %hash_coef_ptr.i.i10.i = getelementptr i8, ptr %490, i64 8
  %tbl_size_ptr.i.i11.i = getelementptr i8, ptr %490, i64 16
  %offset_tbl_ptr.i.i12.i = getelementptr i8, ptr %490, i64 40
  %hash_coef.i.i13.i = load i64, ptr %hash_coef_ptr.i.i10.i, align 4
  %tbl_size.i.i14.i = load i64, ptr %tbl_size_ptr.i.i11.i, align 4
  %offset_tbl.i.i15.i = load ptr, ptr %offset_tbl_ptr.i.i12.i, align 8
  %product.i.i.i16.i = mul i64 %hash_coef.i.i13.i, -5261542750394134544
  %shifted.i.i.i17.i = lshr i64 %product.i.i.i16.i, 32
  %xored.i.i.i18.i = xor i64 %shifted.i.i.i17.i, %product.i.i.i16.i
  %hash.i.i.i19.i = and i64 %xored.i.i.i18.i, %tbl_size.i.i14.i
  %offset_ptr.i.i20.i = getelementptr i32, ptr %offset_tbl.i.i15.i, i64 %hash.i.i.i19.i
  %offset.i.i21.i = load i32, ptr %offset_ptr.i.i20.i, align 4
  %eq.i.i1008 = icmp eq i32 %496, %offset.i.i21.i
  call void @llvm.assume(i1 %eq.i.i1008) #30
  %498 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %499 = call ptr @llvm.invariant.start.p0(i64 600, ptr %490)
  %500 = sext i32 %496 to i64
  %501 = getelementptr ptr, ptr %490, i64 %500
  %502 = getelementptr i8, ptr %501, i64 64
  %503 = load ptr, ptr %502, align 8
  %504 = call ptr %503({ ptr, ptr, ptr, i32 } %497, ptr nonnull %2)
  %505 = call i32 %504({ ptr, ptr, ptr, i32 } %497, { ptr, ptr, ptr, i32 } %497, ptr nonnull %2)
  %506 = add i32 %505, -1
  %507 = and i32 %506, %488
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %508 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %509 = load ptr, ptr %326, align 8
  %510 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %509, 0
  %511 = load ptr, ptr %327, align 8
  %512 = insertvalue { ptr, ptr, ptr, i32 } %510, ptr %511, 1
  %513 = load ptr, ptr %328, align 8
  %514 = insertvalue { ptr, ptr, ptr, i32 } %512, ptr %513, 2
  %515 = load i32, ptr %329, align 4
  %516 = insertvalue { ptr, ptr, ptr, i32 } %514, i32 %515, 3
  %hash_coef_ptr.i.i130.i = getelementptr i8, ptr %509, i64 8
  %tbl_size_ptr.i.i131.i = getelementptr i8, ptr %509, i64 16
  %offset_tbl_ptr.i.i132.i = getelementptr i8, ptr %509, i64 40
  %hash_coef.i.i133.i = load i64, ptr %hash_coef_ptr.i.i130.i, align 4
  %tbl_size.i.i134.i = load i64, ptr %tbl_size_ptr.i.i131.i, align 4
  %offset_tbl.i.i135.i = load ptr, ptr %offset_tbl_ptr.i.i132.i, align 8
  %product.i.i.i136.i = mul i64 %hash_coef.i.i133.i, -5261542750394134544
  %shifted.i.i.i137.i = lshr i64 %product.i.i.i136.i, 32
  %xored.i.i.i138.i = xor i64 %shifted.i.i.i137.i, %product.i.i.i136.i
  %hash.i.i.i139.i = and i64 %xored.i.i.i138.i, %tbl_size.i.i134.i
  %offset_ptr.i.i140.i = getelementptr i32, ptr %offset_tbl.i.i135.i, i64 %hash.i.i.i139.i
  %offset.i.i141.i = load i32, ptr %offset_ptr.i.i140.i, align 4
  %eq.i.i = icmp eq i32 %515, %offset.i.i141.i
  call void @llvm.assume(i1 %eq.i.i) #30
  store ptr @_parameterization_Ptri32, ptr %261, align 8
  %517 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %261)
  %518 = call ptr @llvm.invariant.start.p0(i64 600, ptr %509)
  %519 = sext i32 %515 to i64
  %520 = getelementptr ptr, ptr %509, i64 %519
  %521 = getelementptr i8, ptr %520, i64 120
  %522 = load ptr, ptr %521, align 8
  store ptr @i32_typ, ptr %262, align 8
  %523 = call ptr %522({ ptr, ptr, ptr, i32 } %516, ptr nonnull %262)
  %524 = call { ptr, i160 } %523({ ptr, ptr, ptr, i32 } %516, { ptr, ptr, ptr, i32 } %516, ptr nonnull %261, i32 %507)
  %.fca.0.extract.i515 = extractvalue { ptr, i160 } %524, 0
  %525 = icmp ne ptr %.fca.0.extract.i515, @nil_typ
  %526 = icmp ne ptr %.fca.0.extract.i515, null
  %.not126.i = and i1 %525, %526
  br i1 %.not126.i, label %527, label %.critedge.i

527:                                              ; preds = %479
  %.fca.1.extract.i = extractvalue { ptr, i160 } %524, 1
  %.sroa.5.8.extract.trunc.i = trunc i160 %.fca.1.extract.i to i64
  %528 = inttoptr i64 %.sroa.5.8.extract.trunc.i to ptr
  %.sroa.9.8.extract.shift.i = lshr i160 %.fca.1.extract.i, 64
  %.sroa.9.8.extract.trunc.i = trunc i160 %.sroa.9.8.extract.shift.i to i64
  %529 = inttoptr i64 %.sroa.9.8.extract.trunc.i to ptr
  %hash_coef_ptr.i.i144.i = getelementptr i8, ptr %.fca.0.extract.i515, i64 8
  %tbl_size_ptr.i.i145.i = getelementptr i8, ptr %.fca.0.extract.i515, i64 16
  %offset_tbl_ptr.i.i146.i = getelementptr i8, ptr %.fca.0.extract.i515, i64 40
  %hash_coef.i.i147.i = load i64, ptr %hash_coef_ptr.i.i144.i, align 4
  %tbl_size.i.i148.i = load i64, ptr %tbl_size_ptr.i.i145.i, align 4
  %offset_tbl.i.i149.i = load ptr, ptr %offset_tbl_ptr.i.i146.i, align 8
  %product.i.i.i150.i = mul i64 %hash_coef.i.i147.i, 4015701072841558310
  %shifted.i.i.i151.i = lshr i64 %product.i.i.i150.i, 32
  %xored.i.i.i152.i = xor i64 %shifted.i.i.i151.i, %product.i.i.i150.i
  %hash.i.i.i153.i = and i64 %xored.i.i.i152.i, %tbl_size.i.i148.i
  %offset_ptr.i.i154.i = getelementptr i32, ptr %offset_tbl.i.i149.i, i64 %hash.i.i.i153.i
  %offset.i.i155.i = load i32, ptr %offset_ptr.i.i154.i, align 4
  %530 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract.i515, 0
  %531 = insertvalue { ptr, ptr, ptr, i32 } %530, ptr %528, 1
  %532 = insertvalue { ptr, ptr, ptr, i32 } %531, ptr %529, 2
  %533 = insertvalue { ptr, ptr, ptr, i32 } %532, i32 %offset.i.i155.i, 3
  %534 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %535 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %536 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract.i515)
  %537 = sext i32 %offset.i.i155.i to i64
  %538 = getelementptr ptr, ptr %.fca.0.extract.i515, i64 %537
  %539 = getelementptr i8, ptr %538, i64 64
  %540 = load ptr, ptr %539, align 8
  %541 = call ptr %540({ ptr, ptr, ptr, i32 } %533, ptr nonnull %2)
  %542 = call i32 %541({ ptr, ptr, ptr, i32 } %533, { ptr, ptr, ptr, i32 } %533, ptr nonnull %2)
  %543 = icmp eq i32 %542, %488
  %544 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %545 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %546 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract.i515)
  %547 = getelementptr i8, ptr %538, i64 48
  %548 = load ptr, ptr %547, align 8
  %549 = call ptr %548({ ptr, ptr, ptr, i32 } %533, ptr nonnull %2)
  %550 = call { ptr, i160 } %549({ ptr, ptr, ptr, i32 } %533, { ptr, ptr, ptr, i32 } %533, ptr nonnull %2)
  %551 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %552 = load ptr, ptr %315, align 8
  %553 = call i1 %552({ ptr, i160 } %550, { ptr, i160 } %485)
  %554 = and i1 %543, %553
  br i1 %554, label %HashMap_get_keyK.exit, label %.critedge.i

.critedge.i:                                      ; preds = %527, %479
  %555 = add i32 %488, 2127912214
  %556 = shl i32 %488, 12
  %557 = add i32 %555, %556
  %558 = ashr i32 %557, 19
  %559 = xor i32 %557, %558
  %560 = xor i32 %559, -949894596
  %561 = add i32 %560, 374761393
  %562 = shl i32 %560, 5
  %563 = add i32 %561, %562
  %564 = add i32 %563, -744332180
  %565 = shl i32 %563, 9
  %566 = xor i32 %564, %565
  %567 = add i32 %566, -42973499
  %568 = shl i32 %566, 3
  %569 = add i32 %567, %568
  %570 = ashr i32 %569, 16
  %571 = xor i32 %569, %570
  %572 = xor i32 %571, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %573 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %574 = load ptr, ptr %343, align 8
  %575 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %574, 0
  %576 = load ptr, ptr %344, align 8
  %577 = insertvalue { ptr, ptr, ptr, i32 } %575, ptr %576, 1
  %578 = load ptr, ptr %345, align 8
  %579 = insertvalue { ptr, ptr, ptr, i32 } %577, ptr %578, 2
  %580 = load i32, ptr %346, align 4
  %581 = insertvalue { ptr, ptr, ptr, i32 } %579, i32 %580, 3
  %hash_coef_ptr.i.i10.i1026 = getelementptr i8, ptr %574, i64 8
  %tbl_size_ptr.i.i11.i1027 = getelementptr i8, ptr %574, i64 16
  %offset_tbl_ptr.i.i12.i1028 = getelementptr i8, ptr %574, i64 40
  %hash_coef.i.i13.i1029 = load i64, ptr %hash_coef_ptr.i.i10.i1026, align 4
  %tbl_size.i.i14.i1030 = load i64, ptr %tbl_size_ptr.i.i11.i1027, align 4
  %offset_tbl.i.i15.i1031 = load ptr, ptr %offset_tbl_ptr.i.i12.i1028, align 8
  %product.i.i.i16.i1032 = mul i64 %hash_coef.i.i13.i1029, -5261542750394134544
  %shifted.i.i.i17.i1033 = lshr i64 %product.i.i.i16.i1032, 32
  %xored.i.i.i18.i1034 = xor i64 %shifted.i.i.i17.i1033, %product.i.i.i16.i1032
  %hash.i.i.i19.i1035 = and i64 %xored.i.i.i18.i1034, %tbl_size.i.i14.i1030
  %offset_ptr.i.i20.i1036 = getelementptr i32, ptr %offset_tbl.i.i15.i1031, i64 %hash.i.i.i19.i1035
  %offset.i.i21.i1037 = load i32, ptr %offset_ptr.i.i20.i1036, align 4
  %eq.i.i1038 = icmp eq i32 %580, %offset.i.i21.i1037
  call void @llvm.assume(i1 %eq.i.i1038) #30
  %582 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %583 = call ptr @llvm.invariant.start.p0(i64 600, ptr %574)
  %584 = sext i32 %580 to i64
  %585 = getelementptr ptr, ptr %574, i64 %584
  %586 = getelementptr i8, ptr %585, i64 64
  %587 = load ptr, ptr %586, align 8
  %588 = call ptr %587({ ptr, ptr, ptr, i32 } %581, ptr nonnull %2)
  %589 = call i32 %588({ ptr, ptr, ptr, i32 } %581, { ptr, ptr, ptr, i32 } %581, ptr nonnull %2)
  %590 = add i32 %589, -1
  %591 = and i32 %590, %572
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %592 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %593 = load ptr, ptr %343, align 8
  %594 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %593, 0
  %595 = load ptr, ptr %344, align 8
  %596 = insertvalue { ptr, ptr, ptr, i32 } %594, ptr %595, 1
  %597 = load ptr, ptr %345, align 8
  %598 = insertvalue { ptr, ptr, ptr, i32 } %596, ptr %597, 2
  %599 = load i32, ptr %346, align 4
  %600 = insertvalue { ptr, ptr, ptr, i32 } %598, i32 %599, 3
  %hash_coef_ptr.i.i158.i = getelementptr i8, ptr %593, i64 8
  %tbl_size_ptr.i.i159.i = getelementptr i8, ptr %593, i64 16
  %offset_tbl_ptr.i.i160.i = getelementptr i8, ptr %593, i64 40
  %hash_coef.i.i161.i = load i64, ptr %hash_coef_ptr.i.i158.i, align 4
  %tbl_size.i.i162.i = load i64, ptr %tbl_size_ptr.i.i159.i, align 4
  %offset_tbl.i.i163.i = load ptr, ptr %offset_tbl_ptr.i.i160.i, align 8
  %product.i.i.i164.i = mul i64 %hash_coef.i.i161.i, -5261542750394134544
  %shifted.i.i.i165.i = lshr i64 %product.i.i.i164.i, 32
  %xored.i.i.i166.i = xor i64 %shifted.i.i.i165.i, %product.i.i.i164.i
  %hash.i.i.i167.i = and i64 %xored.i.i.i166.i, %tbl_size.i.i162.i
  %offset_ptr.i.i168.i = getelementptr i32, ptr %offset_tbl.i.i163.i, i64 %hash.i.i.i167.i
  %offset.i.i169.i = load i32, ptr %offset_ptr.i.i168.i, align 4
  %eq.i172.i = icmp eq i32 %599, %offset.i.i169.i
  call void @llvm.assume(i1 %eq.i172.i) #30
  store ptr @_parameterization_Ptri32, ptr %259, align 8
  %601 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %259)
  %602 = call ptr @llvm.invariant.start.p0(i64 600, ptr %593)
  %603 = sext i32 %599 to i64
  %604 = getelementptr ptr, ptr %593, i64 %603
  %605 = getelementptr i8, ptr %604, i64 120
  %606 = load ptr, ptr %605, align 8
  store ptr @i32_typ, ptr %260, align 8
  %607 = call ptr %606({ ptr, ptr, ptr, i32 } %600, ptr nonnull %260)
  %608 = call { ptr, i160 } %607({ ptr, ptr, ptr, i32 } %600, { ptr, ptr, ptr, i32 } %600, ptr nonnull %259, i32 %591)
  %.fca.0.extract57.i = extractvalue { ptr, i160 } %608, 0
  %609 = icmp ne ptr %.fca.0.extract57.i, @nil_typ
  %610 = icmp ne ptr %.fca.0.extract57.i, null
  %.not128.i = and i1 %609, %610
  br i1 %.not128.i, label %611, label %HashMap_get_keyK.exit.thread

611:                                              ; preds = %.critedge.i
  %.fca.1.extract59.i = extractvalue { ptr, i160 } %608, 1
  %.sroa.6.8.extract.trunc.i = trunc i160 %.fca.1.extract59.i to i64
  %612 = inttoptr i64 %.sroa.6.8.extract.trunc.i to ptr
  %.sroa.11.8.extract.shift.i = lshr i160 %.fca.1.extract59.i, 64
  %.sroa.11.8.extract.trunc.i = trunc i160 %.sroa.11.8.extract.shift.i to i64
  %613 = inttoptr i64 %.sroa.11.8.extract.trunc.i to ptr
  %hash_coef_ptr.i.i174.i = getelementptr i8, ptr %.fca.0.extract57.i, i64 8
  %tbl_size_ptr.i.i175.i = getelementptr i8, ptr %.fca.0.extract57.i, i64 16
  %offset_tbl_ptr.i.i176.i = getelementptr i8, ptr %.fca.0.extract57.i, i64 40
  %hash_coef.i.i177.i = load i64, ptr %hash_coef_ptr.i.i174.i, align 4
  %tbl_size.i.i178.i = load i64, ptr %tbl_size_ptr.i.i175.i, align 4
  %offset_tbl.i.i179.i = load ptr, ptr %offset_tbl_ptr.i.i176.i, align 8
  %product.i.i.i180.i = mul i64 %hash_coef.i.i177.i, 4015701072841558310
  %shifted.i.i.i181.i = lshr i64 %product.i.i.i180.i, 32
  %xored.i.i.i182.i = xor i64 %shifted.i.i.i181.i, %product.i.i.i180.i
  %hash.i.i.i183.i = and i64 %xored.i.i.i182.i, %tbl_size.i.i178.i
  %offset_ptr.i.i184.i = getelementptr i32, ptr %offset_tbl.i.i179.i, i64 %hash.i.i.i183.i
  %offset.i.i185.i = load i32, ptr %offset_ptr.i.i184.i, align 4
  %614 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract57.i, 0
  %615 = insertvalue { ptr, ptr, ptr, i32 } %614, ptr %612, 1
  %616 = insertvalue { ptr, ptr, ptr, i32 } %615, ptr %613, 2
  %617 = insertvalue { ptr, ptr, ptr, i32 } %616, i32 %offset.i.i185.i, 3
  %618 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %619 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %620 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract57.i)
  %621 = sext i32 %offset.i.i185.i to i64
  %622 = getelementptr ptr, ptr %.fca.0.extract57.i, i64 %621
  %623 = getelementptr i8, ptr %622, i64 64
  %624 = load ptr, ptr %623, align 8
  %625 = call ptr %624({ ptr, ptr, ptr, i32 } %617, ptr nonnull %2)
  %626 = call i32 %625({ ptr, ptr, ptr, i32 } %617, { ptr, ptr, ptr, i32 } %617, ptr nonnull %2)
  %627 = icmp eq i32 %626, %488
  %628 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %629 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %630 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract57.i)
  %631 = getelementptr i8, ptr %622, i64 48
  %632 = load ptr, ptr %631, align 8
  %633 = call ptr %632({ ptr, ptr, ptr, i32 } %617, ptr nonnull %2)
  %634 = call { ptr, i160 } %633({ ptr, ptr, ptr, i32 } %617, { ptr, ptr, ptr, i32 } %617, ptr nonnull %2)
  %635 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %636 = load ptr, ptr %315, align 8
  %637 = call i1 %636({ ptr, i160 } %634, { ptr, i160 } %485)
  %638 = and i1 %627, %637
  br i1 %638, label %HashMap_get_keyK.exit, label %HashMap_get_keyK.exit.thread

HashMap_get_keyK.exit.thread:                     ; preds = %611, %.critedge.i
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0271.i)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.1.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %259)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %260)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0123.i)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2124.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0115.i)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2116.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %261)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %262)
  br label %650

HashMap_get_keyK.exit:                            ; preds = %527, %611
  %.pre-phi313.i = phi i64 [ %537, %527 ], [ %621, %611 ]
  %.pre-phi312.i = phi { ptr, ptr, ptr, i32 } [ %533, %527 ], [ %617, %611 ]
  %.reg2mem65.0.sroa.phi290.sroa.speculated.i = phi ptr [ %.fca.0.extract.i515, %527 ], [ %.fca.0.extract57.i, %611 ]
  %.reg2mem59.0.sroa.phi120289.i = phi ptr [ %.sroa.1.i, %527 ], [ %.sroa.2124.i, %611 ]
  %.reg2mem59.0.sroa.phi117288.i = phi ptr [ %.sroa.0271.i, %527 ], [ %.sroa.0123.i, %611 ]
  %.reg2mem57.0.sroa.phi94287.i = phi ptr [ %.sroa.2.i, %527 ], [ %.sroa.2116.i, %611 ]
  %.reg2mem57.0.sroa.phi91286.i = phi ptr [ %.sroa.0.i, %527 ], [ %.sroa.0115.i, %611 ]
  %639 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %640 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %641 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.reg2mem65.0.sroa.phi290.sroa.speculated.i)
  %642 = getelementptr ptr, ptr %.reg2mem65.0.sroa.phi290.sroa.speculated.i, i64 %.pre-phi313.i
  %643 = getelementptr i8, ptr %642, i64 56
  %644 = load ptr, ptr %643, align 8
  %645 = call ptr %644({ ptr, ptr, ptr, i32 } %.pre-phi312.i, ptr nonnull %2)
  %646 = call { ptr, i160 } %645({ ptr, ptr, ptr, i32 } %.pre-phi312.i, { ptr, ptr, ptr, i32 } %.pre-phi312.i, ptr nonnull %2)
  %.fca.0.extract97.i = extractvalue { ptr, i160 } %646, 0
  store ptr %.fca.0.extract97.i, ptr %.reg2mem59.0.sroa.phi117288.i, align 8
  %.fca.1.extract99.i = extractvalue { ptr, i160 } %646, 1
  store i160 %.fca.1.extract99.i, ptr %.reg2mem59.0.sroa.phi120289.i, align 8
  store ptr %.fca.0.extract97.i, ptr %.reg2mem57.0.sroa.phi91286.i, align 8
  store i160 %.fca.1.extract99.i, ptr %.reg2mem57.0.sroa.phi94287.i, align 8
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0271.i)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.1.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %259)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %260)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0123.i)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2124.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0115.i)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2116.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %261)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %262)
  %647 = icmp eq ptr %.fca.0.extract97.i, @nil_typ
  %648 = icmp eq ptr %.fca.0.extract97.i, null
  %649 = or i1 %647, %648
  br i1 %649, label %650, label %4382

650:                                              ; preds = %HashMap_get_keyK.exit.thread, %HashMap_get_keyK.exit
  %651 = add nuw i32 %483, 1
  %.sroa.057.0.insert.ext = zext i32 %651 to i160
  %652 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.057.0.insert.ext, 1
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %237)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %238)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %239)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %240)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %241)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %242)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %243)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %244)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %245)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %246)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %247)
  %653 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %654 = load ptr, ptr %274, align 8
  %655 = call i32 %654({ ptr, i160 } %485)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %656 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %657 = load ptr, ptr %286, align 8
  %658 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %657, 0
  %659 = load ptr, ptr %287, align 8
  %660 = insertvalue { ptr, ptr, ptr, i32 } %658, ptr %659, 1
  %661 = load ptr, ptr %380, align 8
  %662 = insertvalue { ptr, ptr, ptr, i32 } %660, ptr %661, 2
  %663 = load i32, ptr %288, align 4
  %664 = insertvalue { ptr, ptr, ptr, i32 } %662, i32 %663, 3
  %hash_coef_ptr.i.i10.i1720 = getelementptr i8, ptr %657, i64 8
  %tbl_size_ptr.i.i11.i1721 = getelementptr i8, ptr %657, i64 16
  %offset_tbl_ptr.i.i12.i1722 = getelementptr i8, ptr %657, i64 40
  %hash_coef.i.i13.i1723 = load i64, ptr %hash_coef_ptr.i.i10.i1720, align 4
  %tbl_size.i.i14.i1724 = load i64, ptr %tbl_size_ptr.i.i11.i1721, align 4
  %offset_tbl.i.i15.i1725 = load ptr, ptr %offset_tbl_ptr.i.i12.i1722, align 8
  %product.i.i.i16.i1726 = mul i64 %hash_coef.i.i13.i1723, -5261542750394134544
  %shifted.i.i.i17.i1727 = lshr i64 %product.i.i.i16.i1726, 32
  %xored.i.i.i18.i1728 = xor i64 %shifted.i.i.i17.i1727, %product.i.i.i16.i1726
  %hash.i.i.i19.i1729 = and i64 %xored.i.i.i18.i1728, %tbl_size.i.i14.i1724
  %offset_ptr.i.i20.i1730 = getelementptr i32, ptr %offset_tbl.i.i15.i1725, i64 %hash.i.i.i19.i1729
  %offset.i.i21.i1731 = load i32, ptr %offset_ptr.i.i20.i1730, align 4
  %eq.i.i1732 = icmp eq i32 %663, %offset.i.i21.i1731
  call void @llvm.assume(i1 %eq.i.i1732) #30
  %665 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %666 = call ptr @llvm.invariant.start.p0(i64 600, ptr %657)
  %667 = sext i32 %663 to i64
  %668 = getelementptr ptr, ptr %657, i64 %667
  %669 = getelementptr i8, ptr %668, i64 64
  %670 = load ptr, ptr %669, align 8
  %671 = call ptr %670({ ptr, ptr, ptr, i32 } %664, ptr nonnull %2)
  %672 = call i32 %671({ ptr, ptr, ptr, i32 } %664, { ptr, ptr, ptr, i32 } %664, ptr nonnull %2)
  %673 = add i32 %672, -1
  %674 = and i32 %673, %655
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %675 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %676 = load ptr, ptr %286, align 8
  %677 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %676, 0
  %678 = load ptr, ptr %287, align 8
  %679 = insertvalue { ptr, ptr, ptr, i32 } %677, ptr %678, 1
  %680 = load ptr, ptr %380, align 8
  %681 = insertvalue { ptr, ptr, ptr, i32 } %679, ptr %680, 2
  %682 = load i32, ptr %288, align 4
  %683 = insertvalue { ptr, ptr, ptr, i32 } %681, i32 %682, 3
  %hash_coef_ptr.i.i160.i714 = getelementptr i8, ptr %676, i64 8
  %tbl_size_ptr.i.i161.i715 = getelementptr i8, ptr %676, i64 16
  %offset_tbl_ptr.i.i162.i716 = getelementptr i8, ptr %676, i64 40
  %hash_coef.i.i163.i717 = load i64, ptr %hash_coef_ptr.i.i160.i714, align 4
  %tbl_size.i.i164.i718 = load i64, ptr %tbl_size_ptr.i.i161.i715, align 4
  %offset_tbl.i.i165.i719 = load ptr, ptr %offset_tbl_ptr.i.i162.i716, align 8
  %product.i.i.i166.i720 = mul i64 %hash_coef.i.i163.i717, -5261542750394134544
  %shifted.i.i.i167.i721 = lshr i64 %product.i.i.i166.i720, 32
  %xored.i.i.i168.i722 = xor i64 %shifted.i.i.i167.i721, %product.i.i.i166.i720
  %hash.i.i.i169.i723 = and i64 %xored.i.i.i168.i722, %tbl_size.i.i164.i718
  %offset_ptr.i.i170.i724 = getelementptr i32, ptr %offset_tbl.i.i165.i719, i64 %hash.i.i.i169.i723
  %offset.i.i171.i725 = load i32, ptr %offset_ptr.i.i170.i724, align 4
  %eq.i.i726 = icmp eq i32 %682, %offset.i.i171.i725
  call void @llvm.assume(i1 %eq.i.i726) #30
  store ptr @_parameterization_Ptri32, ptr %246, align 8
  %684 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %246)
  %685 = call ptr @llvm.invariant.start.p0(i64 600, ptr %676)
  %686 = sext i32 %682 to i64
  %687 = getelementptr ptr, ptr %676, i64 %686
  %688 = getelementptr i8, ptr %687, i64 120
  %689 = load ptr, ptr %688, align 8
  store ptr @i32_typ, ptr %247, align 8
  %690 = call ptr %689({ ptr, ptr, ptr, i32 } %683, ptr nonnull %247)
  %691 = call { ptr, i160 } %690({ ptr, ptr, ptr, i32 } %683, { ptr, ptr, ptr, i32 } %683, ptr nonnull %246, i32 %674)
  %.fca.0.extract.i727 = extractvalue { ptr, i160 } %691, 0
  %692 = icmp ne ptr %.fca.0.extract.i727, @nil_typ
  %693 = icmp ne ptr %.fca.0.extract.i727, null
  %.not151.i728 = and i1 %692, %693
  br i1 %.not151.i728, label %694, label %.critedge.i729

694:                                              ; preds = %650
  %.fca.1.extract.i823 = extractvalue { ptr, i160 } %691, 1
  %.sroa.4518.8.extract.trunc.i824 = trunc i160 %.fca.1.extract.i823 to i64
  %695 = inttoptr i64 %.sroa.4518.8.extract.trunc.i824 to ptr
  %.sroa.7520.8.extract.shift.i825 = lshr i160 %.fca.1.extract.i823, 64
  %.sroa.7520.8.extract.trunc.i826 = trunc i160 %.sroa.7520.8.extract.shift.i825 to i64
  %696 = inttoptr i64 %.sroa.7520.8.extract.trunc.i826 to ptr
  %hash_coef_ptr.i.i174.i827 = getelementptr i8, ptr %.fca.0.extract.i727, i64 8
  %tbl_size_ptr.i.i175.i828 = getelementptr i8, ptr %.fca.0.extract.i727, i64 16
  %offset_tbl_ptr.i.i176.i829 = getelementptr i8, ptr %.fca.0.extract.i727, i64 40
  %hash_coef.i.i177.i830 = load i64, ptr %hash_coef_ptr.i.i174.i827, align 4
  %tbl_size.i.i178.i831 = load i64, ptr %tbl_size_ptr.i.i175.i828, align 4
  %offset_tbl.i.i179.i832 = load ptr, ptr %offset_tbl_ptr.i.i176.i829, align 8
  %product.i.i.i180.i833 = mul i64 %hash_coef.i.i177.i830, 4015701072841558310
  %shifted.i.i.i181.i834 = lshr i64 %product.i.i.i180.i833, 32
  %xored.i.i.i182.i835 = xor i64 %shifted.i.i.i181.i834, %product.i.i.i180.i833
  %hash.i.i.i183.i836 = and i64 %xored.i.i.i182.i835, %tbl_size.i.i178.i831
  %offset_ptr.i.i184.i837 = getelementptr i32, ptr %offset_tbl.i.i179.i832, i64 %hash.i.i.i183.i836
  %offset.i.i185.i838 = load i32, ptr %offset_ptr.i.i184.i837, align 4
  %697 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract.i727, 0
  %698 = insertvalue { ptr, ptr, ptr, i32 } %697, ptr %695, 1
  %699 = insertvalue { ptr, ptr, ptr, i32 } %698, ptr %696, 2
  %700 = insertvalue { ptr, ptr, ptr, i32 } %699, i32 %offset.i.i185.i838, 3
  %701 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %702 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %703 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract.i727)
  %704 = sext i32 %offset.i.i185.i838 to i64
  %705 = getelementptr ptr, ptr %.fca.0.extract.i727, i64 %704
  %706 = getelementptr i8, ptr %705, i64 64
  %707 = load ptr, ptr %706, align 8
  %708 = call ptr %707({ ptr, ptr, ptr, i32 } %700, ptr nonnull %2)
  %709 = call i32 %708({ ptr, ptr, ptr, i32 } %700, { ptr, ptr, ptr, i32 } %700, ptr nonnull %2)
  %710 = icmp eq i32 %709, %655
  br i1 %710, label %711, label %.critedge.i729

711:                                              ; preds = %694
  %712 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %713 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %714 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract.i727)
  %715 = getelementptr i8, ptr %705, i64 48
  %716 = load ptr, ptr %715, align 8
  %717 = call ptr %716({ ptr, ptr, ptr, i32 } %700, ptr nonnull %2)
  %718 = call { ptr, i160 } %717({ ptr, ptr, ptr, i32 } %700, { ptr, ptr, ptr, i32 } %700, ptr nonnull %2)
  %719 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %720 = load ptr, ptr %275, align 8
  %721 = call i1 %720({ ptr, i160 } %718, { ptr, i160 } %485)
  br i1 %721, label %.thread525.i840, label %.critedge.i729

.thread525.i840:                                  ; preds = %711
  %722 = load ptr, ptr %result.i, align 8
  %723 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %724 = load ptr, ptr %269, align 8
  %725 = load ptr, ptr %722, align 8
  %726 = getelementptr i8, ptr %725, i64 48
  %727 = load ptr, ptr %726, align 8
  %728 = call { i64, i64 } %727(ptr nonnull %722)
  %729 = extractvalue { i64, i64 } %728, 0
  %730 = extractvalue { i64, i64 } %728, 1
  %731 = urem i64 20, %730
  %732 = icmp eq i64 %731, 0
  %733 = sub i64 %730, %731
  %734 = select i1 %732, i64 0, i64 %733
  %735 = add i64 %729, 20
  %736 = add i64 %735, %734
  %737 = load ptr, ptr %724, align 8
  %738 = getelementptr i8, ptr %737, i64 48
  %739 = load ptr, ptr %738, align 8
  %740 = call { i64, i64 } %739(ptr nonnull %724)
  %741 = extractvalue { i64, i64 } %740, 0
  %742 = extractvalue { i64, i64 } %740, 1
  %743 = call i64 @llvm.umax.i64(i64 %730, i64 %742)
  %744 = call i64 @llvm.umax.i64(i64 %743, i64 8)
  %745 = urem i64 %736, %742
  %746 = icmp eq i64 %745, 0
  %747 = sub i64 %742, %745
  %748 = select i1 %746, i64 0, i64 %747
  %749 = add i64 %741, %736
  %750 = add i64 %749, %748
  %751 = urem i64 %750, %744
  %752 = icmp eq i64 %751, 0
  %753 = sub i64 %744, %751
  %754 = select i1 %752, i64 0, i64 %753
  %755 = add i64 %754, %750
  %result.i.i841 = call noalias ptr @bump_malloc_inner(i64 noundef %755, ptr nonnull @current_ptr) #29
  store ptr %722, ptr %result.i.i841, align 8
  %756 = getelementptr i8, ptr %result.i.i841, i64 8
  store ptr %724, ptr %756, align 8
  %757 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i.i841)
  store ptr @Entry, ptr %237, align 8
  store ptr %result.i.i841, ptr %375, align 8
  store i32 9, ptr %376, align 8
  %758 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %237)
  %759 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %760 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %761 = load ptr, ptr %722, align 8
  %762 = getelementptr i8, ptr %761, i64 48
  %763 = load ptr, ptr %762, align 8
  %764 = call { i64, i64 } %763(ptr nonnull %722)
  %765 = extractvalue { i64, i64 } %764, 1
  %766 = urem i64 20, %765
  %767 = icmp eq i64 %766, 0
  %reass.sub5167 = sub i64 %765, %766
  %768 = add i64 %reass.sub5167, 20
  %769 = select i1 %767, i64 20, i64 %768
  %770 = getelementptr i8, ptr %result.i.i841, i64 %769
  %771 = load ptr, ptr %result.i.i841, align 8
  %772 = load ptr, ptr %771, align 8
  %773 = getelementptr i8, ptr %772, i64 64
  %774 = load ptr, ptr %773, align 8
  call void %774({ ptr, i160 } %485, ptr nonnull %771, ptr %770)
  %775 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %776 = load ptr, ptr %result.i.i841, align 8
  %777 = load ptr, ptr %776, align 8
  %778 = getelementptr i8, ptr %777, i64 48
  %779 = load ptr, ptr %778, align 8
  %780 = call { i64, i64 } %779(ptr nonnull %776)
  %781 = extractvalue { i64, i64 } %780, 0
  %782 = extractvalue { i64, i64 } %780, 1
  %783 = urem i64 20, %782
  %784 = icmp eq i64 %783, 0
  %785 = sub i64 %782, %783
  %786 = select i1 %784, i64 0, i64 %785
  %787 = add i64 %781, 20
  %788 = add i64 %787, %786
  %789 = load ptr, ptr %756, align 8
  %790 = load ptr, ptr %789, align 8
  %791 = getelementptr i8, ptr %790, i64 48
  %792 = load ptr, ptr %791, align 8
  %793 = call { i64, i64 } %792(ptr nonnull %789)
  %794 = extractvalue { i64, i64 } %793, 1
  %795 = urem i64 %788, %794
  %796 = icmp eq i64 %795, 0
  %797 = sub i64 %794, %795
  %798 = select i1 %796, i64 0, i64 %797
  %799 = getelementptr i8, ptr %result.i.i841, i64 %788
  %800 = getelementptr i8, ptr %799, i64 %798
  %801 = load ptr, ptr %756, align 8
  %802 = load ptr, ptr %801, align 8
  %803 = getelementptr i8, ptr %802, i64 64
  %804 = load ptr, ptr %803, align 8
  call void %804({ ptr, i160 } %652, ptr nonnull %801, ptr %800)
  %805 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %806 = getelementptr i8, ptr %result.i.i841, i64 16
  store i32 %655, ptr %806, align 4
  %807 = load ptr, ptr %377, align 8
  %808 = ptrtoint ptr %result.i.i841 to i64
  %809 = ptrtoint ptr %807 to i64
  %.sroa.2129.0.insert.ext.i842 = zext i64 %809 to i160
  %.sroa.2129.0.insert.shift.i843 = shl nuw nsw i160 %.sroa.2129.0.insert.ext.i842, 64
  %.sroa.0128.0.insert.ext.i845 = zext i64 %808 to i160
  %.sroa.2129.0.insert.insert.i844 = or disjoint i160 %.sroa.2129.0.insert.shift.i843, %.sroa.0128.0.insert.ext.i845
  %.sroa.0128.0.insert.insert.i846 = or disjoint i160 %.sroa.2129.0.insert.insert.i844, 3062541302288446171170371466885913903104
  %810 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0128.0.insert.insert.i846, 1
  %811 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %812 = load ptr, ptr %286, align 8
  %813 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %812, 0
  %814 = load ptr, ptr %287, align 8
  %815 = insertvalue { ptr, ptr, ptr, i32 } %813, ptr %814, 1
  %816 = load ptr, ptr %380, align 8
  %817 = insertvalue { ptr, ptr, ptr, i32 } %815, ptr %816, 2
  %818 = load i32, ptr %288, align 4
  %819 = insertvalue { ptr, ptr, ptr, i32 } %817, i32 %818, 3
  %hash_coef_ptr.i.i202.i851 = getelementptr i8, ptr %812, i64 8
  %tbl_size_ptr.i.i203.i852 = getelementptr i8, ptr %812, i64 16
  %offset_tbl_ptr.i.i204.i853 = getelementptr i8, ptr %812, i64 40
  %hash_coef.i.i205.i854 = load i64, ptr %hash_coef_ptr.i.i202.i851, align 4
  %tbl_size.i.i206.i855 = load i64, ptr %tbl_size_ptr.i.i203.i852, align 4
  %offset_tbl.i.i207.i856 = load ptr, ptr %offset_tbl_ptr.i.i204.i853, align 8
  %product.i.i.i208.i857 = mul i64 %hash_coef.i.i205.i854, -5261542750394134544
  %shifted.i.i.i209.i858 = lshr i64 %product.i.i.i208.i857, 32
  %xored.i.i.i210.i859 = xor i64 %shifted.i.i.i209.i858, %product.i.i.i208.i857
  %hash.i.i.i211.i860 = and i64 %xored.i.i.i210.i859, %tbl_size.i.i206.i855
  %offset_ptr.i.i212.i861 = getelementptr i32, ptr %offset_tbl.i.i207.i856, i64 %hash.i.i.i211.i860
  %offset.i.i213.i862 = load i32, ptr %offset_ptr.i.i212.i861, align 4
  %eq.i216.i863 = icmp eq i32 %818, %offset.i.i213.i862
  call void @llvm.assume(i1 %eq.i216.i863) #30
  %820 = load ptr, ptr %result.i, align 8
  %821 = load ptr, ptr %269, align 8
  %result.i217.i864 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %822 = getelementptr i8, ptr %result.i217.i864, i64 16
  store ptr %821, ptr %822, align 8
  %823 = getelementptr i8, ptr %result.i217.i864, i64 8
  store ptr %820, ptr %823, align 8
  %824 = getelementptr i8, ptr %result.i217.i864, i64 24
  store ptr null, ptr %824, align 8
  %825 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i217.i864)
  store ptr @Entry, ptr %result.i217.i864, align 8
  store ptr @_parameterization_Ptri32, ptr %238, align 8
  store ptr %result.i217.i864, ptr %378, align 8
  %826 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %238)
  %827 = call ptr @llvm.invariant.start.p0(i64 600, ptr %812)
  %828 = sext i32 %818 to i64
  %829 = getelementptr ptr, ptr %812, i64 %828
  %830 = getelementptr i8, ptr %829, i64 128
  %831 = load ptr, ptr %830, align 8
  store ptr @i32_typ, ptr %239, align 8
  store ptr @Entry, ptr %379, align 8
  %832 = call ptr %831({ ptr, ptr, ptr, i32 } %819, ptr nonnull %239)
  call void %832({ ptr, ptr, ptr, i32 } %819, { ptr, ptr, ptr, i32 } %819, ptr nonnull %238, i32 %674, { ptr, i160 } %810)
  br label %HashMap_insert_keyK_valueV.exit865

.critedge.i729:                                   ; preds = %711, %694, %650
  %833 = add i32 %655, 2127912214
  %834 = shl i32 %655, 12
  %835 = add i32 %833, %834
  %836 = ashr i32 %835, 19
  %837 = xor i32 %835, %836
  %838 = xor i32 %837, -949894596
  %839 = add i32 %838, 374761393
  %840 = shl i32 %838, 5
  %841 = add i32 %839, %840
  %842 = add i32 %841, -744332180
  %843 = shl i32 %841, 9
  %844 = xor i32 %842, %843
  %845 = add i32 %844, -42973499
  %846 = shl i32 %844, 3
  %847 = add i32 %845, %846
  %848 = ashr i32 %847, 16
  %849 = xor i32 %847, %848
  %850 = xor i32 %849, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %851 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %852 = load ptr, ptr %299, align 8
  %853 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %852, 0
  %854 = load ptr, ptr %300, align 8
  %855 = insertvalue { ptr, ptr, ptr, i32 } %853, ptr %854, 1
  %856 = load ptr, ptr %381, align 8
  %857 = insertvalue { ptr, ptr, ptr, i32 } %855, ptr %856, 2
  %858 = load i32, ptr %301, align 4
  %859 = insertvalue { ptr, ptr, ptr, i32 } %857, i32 %858, 3
  %hash_coef_ptr.i.i10.i1751 = getelementptr i8, ptr %852, i64 8
  %tbl_size_ptr.i.i11.i1752 = getelementptr i8, ptr %852, i64 16
  %offset_tbl_ptr.i.i12.i1753 = getelementptr i8, ptr %852, i64 40
  %hash_coef.i.i13.i1754 = load i64, ptr %hash_coef_ptr.i.i10.i1751, align 4
  %tbl_size.i.i14.i1755 = load i64, ptr %tbl_size_ptr.i.i11.i1752, align 4
  %offset_tbl.i.i15.i1756 = load ptr, ptr %offset_tbl_ptr.i.i12.i1753, align 8
  %product.i.i.i16.i1757 = mul i64 %hash_coef.i.i13.i1754, -5261542750394134544
  %shifted.i.i.i17.i1758 = lshr i64 %product.i.i.i16.i1757, 32
  %xored.i.i.i18.i1759 = xor i64 %shifted.i.i.i17.i1758, %product.i.i.i16.i1757
  %hash.i.i.i19.i1760 = and i64 %xored.i.i.i18.i1759, %tbl_size.i.i14.i1755
  %offset_ptr.i.i20.i1761 = getelementptr i32, ptr %offset_tbl.i.i15.i1756, i64 %hash.i.i.i19.i1760
  %offset.i.i21.i1762 = load i32, ptr %offset_ptr.i.i20.i1761, align 4
  %eq.i.i1763 = icmp eq i32 %858, %offset.i.i21.i1762
  call void @llvm.assume(i1 %eq.i.i1763) #30
  %860 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %861 = call ptr @llvm.invariant.start.p0(i64 600, ptr %852)
  %862 = sext i32 %858 to i64
  %863 = getelementptr ptr, ptr %852, i64 %862
  %864 = getelementptr i8, ptr %863, i64 64
  %865 = load ptr, ptr %864, align 8
  %866 = call ptr %865({ ptr, ptr, ptr, i32 } %859, ptr nonnull %2)
  %867 = call i32 %866({ ptr, ptr, ptr, i32 } %859, { ptr, ptr, ptr, i32 } %859, ptr nonnull %2)
  %868 = add i32 %867, -1
  %869 = and i32 %868, %850
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %870 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %871 = load ptr, ptr %299, align 8
  %872 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %871, 0
  %873 = load ptr, ptr %300, align 8
  %874 = insertvalue { ptr, ptr, ptr, i32 } %872, ptr %873, 1
  %875 = load ptr, ptr %381, align 8
  %876 = insertvalue { ptr, ptr, ptr, i32 } %874, ptr %875, 2
  %877 = load i32, ptr %301, align 4
  %878 = insertvalue { ptr, ptr, ptr, i32 } %876, i32 %877, 3
  %hash_coef_ptr.i.i219.i734 = getelementptr i8, ptr %871, i64 8
  %tbl_size_ptr.i.i220.i735 = getelementptr i8, ptr %871, i64 16
  %offset_tbl_ptr.i.i221.i736 = getelementptr i8, ptr %871, i64 40
  %hash_coef.i.i222.i737 = load i64, ptr %hash_coef_ptr.i.i219.i734, align 4
  %tbl_size.i.i223.i738 = load i64, ptr %tbl_size_ptr.i.i220.i735, align 4
  %offset_tbl.i.i224.i739 = load ptr, ptr %offset_tbl_ptr.i.i221.i736, align 8
  %product.i.i.i225.i740 = mul i64 %hash_coef.i.i222.i737, -5261542750394134544
  %shifted.i.i.i226.i741 = lshr i64 %product.i.i.i225.i740, 32
  %xored.i.i.i227.i742 = xor i64 %shifted.i.i.i226.i741, %product.i.i.i225.i740
  %hash.i.i.i228.i743 = and i64 %xored.i.i.i227.i742, %tbl_size.i.i223.i738
  %offset_ptr.i.i229.i744 = getelementptr i32, ptr %offset_tbl.i.i224.i739, i64 %hash.i.i.i228.i743
  %offset.i.i230.i745 = load i32, ptr %offset_ptr.i.i229.i744, align 4
  %eq.i233.i746 = icmp eq i32 %877, %offset.i.i230.i745
  call void @llvm.assume(i1 %eq.i233.i746) #30
  store ptr @_parameterization_Ptri32, ptr %240, align 8
  %879 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %240)
  %880 = call ptr @llvm.invariant.start.p0(i64 600, ptr %871)
  %881 = sext i32 %877 to i64
  %882 = getelementptr ptr, ptr %871, i64 %881
  %883 = getelementptr i8, ptr %882, i64 120
  %884 = load ptr, ptr %883, align 8
  store ptr @i32_typ, ptr %241, align 8
  %885 = call ptr %884({ ptr, ptr, ptr, i32 } %878, ptr nonnull %241)
  %886 = call { ptr, i160 } %885({ ptr, ptr, ptr, i32 } %878, { ptr, ptr, ptr, i32 } %878, ptr nonnull %240, i32 %869)
  %.fca.0.extract104.i747 = extractvalue { ptr, i160 } %886, 0
  %887 = icmp ne ptr %.fca.0.extract104.i747, @nil_typ
  %888 = icmp ne ptr %.fca.0.extract104.i747, null
  %.not153.i748 = and i1 %887, %888
  br i1 %.not153.i748, label %889, label %.critedge158.i749

889:                                              ; preds = %.critedge.i729
  %.fca.1.extract106.i781 = extractvalue { ptr, i160 } %886, 1
  %.sroa.4.8.extract.trunc.i782 = trunc i160 %.fca.1.extract106.i781 to i64
  %890 = inttoptr i64 %.sroa.4.8.extract.trunc.i782 to ptr
  %.sroa.7506.8.extract.shift.i783 = lshr i160 %.fca.1.extract106.i781, 64
  %.sroa.7506.8.extract.trunc.i784 = trunc i160 %.sroa.7506.8.extract.shift.i783 to i64
  %891 = inttoptr i64 %.sroa.7506.8.extract.trunc.i784 to ptr
  %hash_coef_ptr.i.i235.i785 = getelementptr i8, ptr %.fca.0.extract104.i747, i64 8
  %tbl_size_ptr.i.i236.i786 = getelementptr i8, ptr %.fca.0.extract104.i747, i64 16
  %offset_tbl_ptr.i.i237.i787 = getelementptr i8, ptr %.fca.0.extract104.i747, i64 40
  %hash_coef.i.i238.i788 = load i64, ptr %hash_coef_ptr.i.i235.i785, align 4
  %tbl_size.i.i239.i789 = load i64, ptr %tbl_size_ptr.i.i236.i786, align 4
  %offset_tbl.i.i240.i790 = load ptr, ptr %offset_tbl_ptr.i.i237.i787, align 8
  %product.i.i.i241.i791 = mul i64 %hash_coef.i.i238.i788, 4015701072841558310
  %shifted.i.i.i242.i792 = lshr i64 %product.i.i.i241.i791, 32
  %xored.i.i.i243.i793 = xor i64 %shifted.i.i.i242.i792, %product.i.i.i241.i791
  %hash.i.i.i244.i794 = and i64 %xored.i.i.i243.i793, %tbl_size.i.i239.i789
  %offset_ptr.i.i245.i795 = getelementptr i32, ptr %offset_tbl.i.i240.i790, i64 %hash.i.i.i244.i794
  %offset.i.i246.i796 = load i32, ptr %offset_ptr.i.i245.i795, align 4
  %892 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract104.i747, 0
  %893 = insertvalue { ptr, ptr, ptr, i32 } %892, ptr %890, 1
  %894 = insertvalue { ptr, ptr, ptr, i32 } %893, ptr %891, 2
  %895 = insertvalue { ptr, ptr, ptr, i32 } %894, i32 %offset.i.i246.i796, 3
  %896 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %897 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %898 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract104.i747)
  %899 = sext i32 %offset.i.i246.i796 to i64
  %900 = getelementptr ptr, ptr %.fca.0.extract104.i747, i64 %899
  %901 = getelementptr i8, ptr %900, i64 64
  %902 = load ptr, ptr %901, align 8
  %903 = call ptr %902({ ptr, ptr, ptr, i32 } %895, ptr nonnull %2)
  %904 = call i32 %903({ ptr, ptr, ptr, i32 } %895, { ptr, ptr, ptr, i32 } %895, ptr nonnull %2)
  %905 = icmp eq i32 %904, %655
  br i1 %905, label %906, label %.critedge158.i749

906:                                              ; preds = %889
  %907 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %908 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %909 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract104.i747)
  %910 = getelementptr i8, ptr %900, i64 48
  %911 = load ptr, ptr %910, align 8
  %912 = call ptr %911({ ptr, ptr, ptr, i32 } %895, ptr nonnull %2)
  %913 = call { ptr, i160 } %912({ ptr, ptr, ptr, i32 } %895, { ptr, ptr, ptr, i32 } %895, ptr nonnull %2)
  %914 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %915 = load ptr, ptr %275, align 8
  %916 = call i1 %915({ ptr, i160 } %913, { ptr, i160 } %485)
  br i1 %916, label %.thread528.i798, label %.critedge158.i749

.thread528.i798:                                  ; preds = %906
  %917 = load ptr, ptr %result.i, align 8
  %918 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %919 = load ptr, ptr %269, align 8
  %920 = load ptr, ptr %917, align 8
  %921 = getelementptr i8, ptr %920, i64 48
  %922 = load ptr, ptr %921, align 8
  %923 = call { i64, i64 } %922(ptr nonnull %917)
  %924 = extractvalue { i64, i64 } %923, 0
  %925 = extractvalue { i64, i64 } %923, 1
  %926 = urem i64 20, %925
  %927 = icmp eq i64 %926, 0
  %928 = sub i64 %925, %926
  %929 = select i1 %927, i64 0, i64 %928
  %930 = add i64 %924, 20
  %931 = add i64 %930, %929
  %932 = load ptr, ptr %919, align 8
  %933 = getelementptr i8, ptr %932, i64 48
  %934 = load ptr, ptr %933, align 8
  %935 = call { i64, i64 } %934(ptr nonnull %919)
  %936 = extractvalue { i64, i64 } %935, 0
  %937 = extractvalue { i64, i64 } %935, 1
  %938 = call i64 @llvm.umax.i64(i64 %925, i64 %937)
  %939 = call i64 @llvm.umax.i64(i64 %938, i64 8)
  %940 = urem i64 %931, %937
  %941 = icmp eq i64 %940, 0
  %942 = sub i64 %937, %940
  %943 = select i1 %941, i64 0, i64 %942
  %944 = add i64 %936, %931
  %945 = add i64 %944, %943
  %946 = urem i64 %945, %939
  %947 = icmp eq i64 %946, 0
  %948 = sub i64 %939, %946
  %949 = select i1 %947, i64 0, i64 %948
  %950 = add i64 %949, %945
  %result.i248.i799 = call noalias ptr @bump_malloc_inner(i64 noundef %950, ptr nonnull @current_ptr) #29
  store ptr %917, ptr %result.i248.i799, align 8
  %951 = getelementptr i8, ptr %result.i248.i799, i64 8
  store ptr %919, ptr %951, align 8
  %952 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i248.i799)
  store ptr @Entry, ptr %242, align 8
  store ptr %result.i248.i799, ptr %370, align 8
  store i32 9, ptr %371, align 8
  %953 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %242)
  %954 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %955 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %956 = load ptr, ptr %917, align 8
  %957 = getelementptr i8, ptr %956, i64 48
  %958 = load ptr, ptr %957, align 8
  %959 = call { i64, i64 } %958(ptr nonnull %917)
  %960 = extractvalue { i64, i64 } %959, 1
  %961 = urem i64 20, %960
  %962 = icmp eq i64 %961, 0
  %reass.sub5166 = sub i64 %960, %961
  %963 = add i64 %reass.sub5166, 20
  %964 = select i1 %962, i64 20, i64 %963
  %965 = getelementptr i8, ptr %result.i248.i799, i64 %964
  %966 = load ptr, ptr %result.i248.i799, align 8
  %967 = load ptr, ptr %966, align 8
  %968 = getelementptr i8, ptr %967, i64 64
  %969 = load ptr, ptr %968, align 8
  call void %969({ ptr, i160 } %485, ptr nonnull %966, ptr %965)
  %970 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %971 = load ptr, ptr %result.i248.i799, align 8
  %972 = load ptr, ptr %971, align 8
  %973 = getelementptr i8, ptr %972, i64 48
  %974 = load ptr, ptr %973, align 8
  %975 = call { i64, i64 } %974(ptr nonnull %971)
  %976 = extractvalue { i64, i64 } %975, 0
  %977 = extractvalue { i64, i64 } %975, 1
  %978 = urem i64 20, %977
  %979 = icmp eq i64 %978, 0
  %980 = sub i64 %977, %978
  %981 = select i1 %979, i64 0, i64 %980
  %982 = add i64 %976, 20
  %983 = add i64 %982, %981
  %984 = load ptr, ptr %951, align 8
  %985 = load ptr, ptr %984, align 8
  %986 = getelementptr i8, ptr %985, i64 48
  %987 = load ptr, ptr %986, align 8
  %988 = call { i64, i64 } %987(ptr nonnull %984)
  %989 = extractvalue { i64, i64 } %988, 1
  %990 = urem i64 %983, %989
  %991 = icmp eq i64 %990, 0
  %992 = sub i64 %989, %990
  %993 = select i1 %991, i64 0, i64 %992
  %994 = getelementptr i8, ptr %result.i248.i799, i64 %983
  %995 = getelementptr i8, ptr %994, i64 %993
  %996 = load ptr, ptr %951, align 8
  %997 = load ptr, ptr %996, align 8
  %998 = getelementptr i8, ptr %997, i64 64
  %999 = load ptr, ptr %998, align 8
  call void %999({ ptr, i160 } %652, ptr nonnull %996, ptr %995)
  %1000 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %1001 = getelementptr i8, ptr %result.i248.i799, i64 16
  store i32 %655, ptr %1001, align 4
  %1002 = load ptr, ptr %372, align 8
  %1003 = ptrtoint ptr %result.i248.i799 to i64
  %1004 = ptrtoint ptr %1002 to i64
  %.sroa.284.0.insert.ext.i800 = zext i64 %1004 to i160
  %.sroa.284.0.insert.shift.i801 = shl nuw nsw i160 %.sroa.284.0.insert.ext.i800, 64
  %.sroa.083.0.insert.ext.i803 = zext i64 %1003 to i160
  %.sroa.284.0.insert.insert.i802 = or disjoint i160 %.sroa.284.0.insert.shift.i801, %.sroa.083.0.insert.ext.i803
  %.sroa.083.0.insert.insert.i804 = or disjoint i160 %.sroa.284.0.insert.insert.i802, 3062541302288446171170371466885913903104
  %1005 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.083.0.insert.insert.i804, 1
  %1006 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1007 = load ptr, ptr %299, align 8
  %1008 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1007, 0
  %1009 = load ptr, ptr %300, align 8
  %1010 = insertvalue { ptr, ptr, ptr, i32 } %1008, ptr %1009, 1
  %1011 = load ptr, ptr %381, align 8
  %1012 = insertvalue { ptr, ptr, ptr, i32 } %1010, ptr %1011, 2
  %1013 = load i32, ptr %301, align 4
  %1014 = insertvalue { ptr, ptr, ptr, i32 } %1012, i32 %1013, 3
  %hash_coef_ptr.i.i264.i809 = getelementptr i8, ptr %1007, i64 8
  %tbl_size_ptr.i.i265.i810 = getelementptr i8, ptr %1007, i64 16
  %offset_tbl_ptr.i.i266.i811 = getelementptr i8, ptr %1007, i64 40
  %hash_coef.i.i267.i812 = load i64, ptr %hash_coef_ptr.i.i264.i809, align 4
  %tbl_size.i.i268.i813 = load i64, ptr %tbl_size_ptr.i.i265.i810, align 4
  %offset_tbl.i.i269.i814 = load ptr, ptr %offset_tbl_ptr.i.i266.i811, align 8
  %product.i.i.i270.i815 = mul i64 %hash_coef.i.i267.i812, -5261542750394134544
  %shifted.i.i.i271.i816 = lshr i64 %product.i.i.i270.i815, 32
  %xored.i.i.i272.i817 = xor i64 %shifted.i.i.i271.i816, %product.i.i.i270.i815
  %hash.i.i.i273.i818 = and i64 %xored.i.i.i272.i817, %tbl_size.i.i268.i813
  %offset_ptr.i.i274.i819 = getelementptr i32, ptr %offset_tbl.i.i269.i814, i64 %hash.i.i.i273.i818
  %offset.i.i275.i820 = load i32, ptr %offset_ptr.i.i274.i819, align 4
  %eq.i278.i821 = icmp eq i32 %1013, %offset.i.i275.i820
  call void @llvm.assume(i1 %eq.i278.i821) #30
  %1015 = load ptr, ptr %result.i, align 8
  %1016 = load ptr, ptr %269, align 8
  %result.i279.i822 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1017 = getelementptr i8, ptr %result.i279.i822, i64 16
  store ptr %1016, ptr %1017, align 8
  %1018 = getelementptr i8, ptr %result.i279.i822, i64 8
  store ptr %1015, ptr %1018, align 8
  %1019 = getelementptr i8, ptr %result.i279.i822, i64 24
  store ptr null, ptr %1019, align 8
  %1020 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i279.i822)
  store ptr @Entry, ptr %result.i279.i822, align 8
  store ptr @_parameterization_Ptri32, ptr %243, align 8
  store ptr %result.i279.i822, ptr %373, align 8
  %1021 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %243)
  %1022 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1007)
  %1023 = sext i32 %1013 to i64
  %1024 = getelementptr ptr, ptr %1007, i64 %1023
  %1025 = getelementptr i8, ptr %1024, i64 128
  %1026 = load ptr, ptr %1025, align 8
  store ptr @i32_typ, ptr %244, align 8
  store ptr @Entry, ptr %374, align 8
  %1027 = call ptr %1026({ ptr, ptr, ptr, i32 } %1014, ptr nonnull %244)
  call void %1027({ ptr, ptr, ptr, i32 } %1014, { ptr, ptr, ptr, i32 } %1014, ptr nonnull %243, i32 %869, { ptr, i160 } %1005)
  br label %HashMap_insert_keyK_valueV.exit865

.critedge158.i749:                                ; preds = %906, %889, %.critedge.i729
  %1028 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1029 = load ptr, ptr %286, align 8
  %1030 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1029, 0
  %1031 = load ptr, ptr %287, align 8
  %1032 = insertvalue { ptr, ptr, ptr, i32 } %1030, ptr %1031, 1
  %1033 = load ptr, ptr %380, align 8
  %1034 = insertvalue { ptr, ptr, ptr, i32 } %1032, ptr %1033, 2
  %1035 = load i32, ptr %288, align 4
  %1036 = insertvalue { ptr, ptr, ptr, i32 } %1034, i32 %1035, 3
  %hash_coef_ptr.i.i281.i754 = getelementptr i8, ptr %1029, i64 8
  %tbl_size_ptr.i.i282.i755 = getelementptr i8, ptr %1029, i64 16
  %offset_tbl_ptr.i.i283.i756 = getelementptr i8, ptr %1029, i64 40
  %hash_coef.i.i284.i757 = load i64, ptr %hash_coef_ptr.i.i281.i754, align 4
  %tbl_size.i.i285.i758 = load i64, ptr %tbl_size_ptr.i.i282.i755, align 4
  %offset_tbl.i.i286.i759 = load ptr, ptr %offset_tbl_ptr.i.i283.i756, align 8
  %product.i.i.i287.i760 = mul i64 %hash_coef.i.i284.i757, -5261542750394134544
  %shifted.i.i.i288.i761 = lshr i64 %product.i.i.i287.i760, 32
  %xored.i.i.i289.i762 = xor i64 %shifted.i.i.i288.i761, %product.i.i.i287.i760
  %hash.i.i.i290.i763 = and i64 %xored.i.i.i289.i762, %tbl_size.i.i285.i758
  %offset_ptr.i.i291.i764 = getelementptr i32, ptr %offset_tbl.i.i286.i759, i64 %hash.i.i.i290.i763
  %offset.i.i292.i765 = load i32, ptr %offset_ptr.i.i291.i764, align 4
  %eq.i295.i766 = icmp eq i32 %1035, %offset.i.i292.i765
  call void @llvm.assume(i1 %eq.i295.i766) #30
  %1037 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1038 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1029)
  %1039 = sext i32 %1035 to i64
  %1040 = getelementptr ptr, ptr %1029, i64 %1039
  %1041 = getelementptr i8, ptr %1040, i64 64
  %1042 = load ptr, ptr %1041, align 8
  %1043 = call ptr %1042({ ptr, ptr, ptr, i32 } %1036, ptr nonnull %2)
  %1044 = call i32 %1043({ ptr, ptr, ptr, i32 } %1036, { ptr, ptr, ptr, i32 } %1036, ptr nonnull %2)
  %1045 = load i32, ptr %382, align 4
  %.not.i767 = icmp slt i32 %1045, %1044
  br i1 %.not.i767, label %._crit_edge2.i768, label %1046

1046:                                             ; preds = %.critedge158.i749
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %192)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %193)
  %1047 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1048 = load ptr, ptr %286, align 8
  %1049 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1048, 0
  %1050 = load ptr, ptr %287, align 8
  %1051 = insertvalue { ptr, ptr, ptr, i32 } %1049, ptr %1050, 1
  %1052 = load ptr, ptr %380, align 8
  %1053 = insertvalue { ptr, ptr, ptr, i32 } %1051, ptr %1052, 2
  %1054 = load i32, ptr %288, align 4
  %1055 = insertvalue { ptr, ptr, ptr, i32 } %1053, i32 %1054, 3
  %hash_coef_ptr.i.i18.i1780 = getelementptr i8, ptr %1048, i64 8
  %tbl_size_ptr.i.i19.i1781 = getelementptr i8, ptr %1048, i64 16
  %offset_tbl_ptr.i.i20.i1782 = getelementptr i8, ptr %1048, i64 40
  %hash_coef.i.i21.i1783 = load i64, ptr %hash_coef_ptr.i.i18.i1780, align 4
  %tbl_size.i.i22.i1784 = load i64, ptr %tbl_size_ptr.i.i19.i1781, align 4
  %offset_tbl.i.i23.i1785 = load ptr, ptr %offset_tbl_ptr.i.i20.i1782, align 8
  %product.i.i.i24.i1786 = mul i64 %hash_coef.i.i21.i1783, -5261542750394134544
  %shifted.i.i.i25.i1787 = lshr i64 %product.i.i.i24.i1786, 32
  %xored.i.i.i26.i1788 = xor i64 %shifted.i.i.i25.i1787, %product.i.i.i24.i1786
  %hash.i.i.i27.i1789 = and i64 %xored.i.i.i26.i1788, %tbl_size.i.i22.i1784
  %offset_ptr.i.i28.i1790 = getelementptr i32, ptr %offset_tbl.i.i23.i1785, i64 %hash.i.i.i27.i1789
  %offset.i.i29.i1791 = load i32, ptr %offset_ptr.i.i28.i1790, align 4
  %eq.i.i1792 = icmp eq i32 %1054, %offset.i.i29.i1791
  call void @llvm.assume(i1 %eq.i.i1792) #30
  %1056 = load ptr, ptr %299, align 8
  %1057 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1056, 0
  %1058 = load ptr, ptr %300, align 8
  %1059 = insertvalue { ptr, ptr, ptr, i32 } %1057, ptr %1058, 1
  %1060 = load ptr, ptr %381, align 8
  %1061 = insertvalue { ptr, ptr, ptr, i32 } %1059, ptr %1060, 2
  %1062 = load i32, ptr %301, align 4
  %hash_coef_ptr.i.i46.i1797 = getelementptr i8, ptr %1056, i64 8
  %tbl_size_ptr.i.i47.i1798 = getelementptr i8, ptr %1056, i64 16
  %offset_tbl_ptr.i.i48.i1799 = getelementptr i8, ptr %1056, i64 40
  %hash_coef.i.i49.i1800 = load i64, ptr %hash_coef_ptr.i.i46.i1797, align 4
  %tbl_size.i.i50.i1801 = load i64, ptr %tbl_size_ptr.i.i47.i1798, align 4
  %offset_tbl.i.i51.i1802 = load ptr, ptr %offset_tbl_ptr.i.i48.i1799, align 8
  %product.i.i.i52.i1803 = mul i64 %hash_coef.i.i49.i1800, -5261542750394134544
  %shifted.i.i.i53.i1804 = lshr i64 %product.i.i.i52.i1803, 32
  %xored.i.i.i54.i1805 = xor i64 %shifted.i.i.i53.i1804, %product.i.i.i52.i1803
  %hash.i.i.i55.i1806 = and i64 %xored.i.i.i54.i1805, %tbl_size.i.i50.i1801
  %offset_ptr.i.i56.i1807 = getelementptr i32, ptr %offset_tbl.i.i51.i1802, i64 %hash.i.i.i55.i1806
  %offset.i.i57.i1808 = load i32, ptr %offset_ptr.i.i56.i1807, align 4
  %eq.i60.i1809 = icmp eq i32 %1062, %offset.i.i57.i1808
  call void @llvm.assume(i1 %eq.i60.i1809) #30
  %1063 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1064 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1048)
  %1065 = sext i32 %1054 to i64
  %1066 = getelementptr ptr, ptr %1048, i64 %1065
  %1067 = getelementptr i8, ptr %1066, i64 64
  %1068 = load ptr, ptr %1067, align 8
  %1069 = call ptr %1068({ ptr, ptr, ptr, i32 } %1055, ptr nonnull %2)
  %1070 = call i32 %1069({ ptr, ptr, ptr, i32 } %1055, { ptr, ptr, ptr, i32 } %1055, ptr nonnull %2)
  %1071 = shl i32 %1070, 1
  %1072 = call i32 @llvm.smax.i32(i32 %1071, i32 16)
  %1073 = load ptr, ptr %result.i, align 8
  %1074 = load ptr, ptr %269, align 8
  %result.i.i1810 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1075 = getelementptr i8, ptr %result.i.i1810, i64 16
  store ptr @_parameterization_Nil, ptr %1075, align 8
  %result.i75.i1811 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1076 = getelementptr i8, ptr %result.i75.i1811, i64 16
  store ptr %1074, ptr %1076, align 8
  %1077 = getelementptr i8, ptr %result.i75.i1811, i64 8
  store ptr %1073, ptr %1077, align 8
  %1078 = getelementptr i8, ptr %result.i75.i1811, i64 24
  store ptr null, ptr %1078, align 8
  %1079 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i75.i1811)
  store ptr @Entry, ptr %result.i75.i1811, align 8
  %1080 = getelementptr i8, ptr %result.i.i1810, i64 8
  store ptr %result.i75.i1811, ptr %1080, align 8
  %1081 = getelementptr i8, ptr %result.i.i1810, i64 24
  store ptr null, ptr %1081, align 8
  %1082 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i1810)
  store ptr @union_typ, ptr %result.i.i1810, align 8
  %result.i76.i1812 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i1810, ptr %result.i76.i1812, align 8
  %1083 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i76.i1812)
  store ptr @Array, ptr %192, align 8
  store ptr %result.i76.i1812, ptr %412, align 8
  store i32 9, ptr %413, align 8
  %1084 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %192)
  %1085 = getelementptr i8, ptr %result.i76.i1812, i64 16
  store i32 %1072, ptr %1085, align 4
  %1086 = getelementptr i8, ptr %result.i76.i1812, i64 20
  store i32 %1072, ptr %1086, align 4
  %1087 = zext nneg i32 %1072 to i64
  %1088 = shl nuw nsw i64 %1087, 5
  %result.i.i.i1813 = call noalias ptr @bump_malloc_inner(i64 noundef %1088, ptr nonnull @current_ptr) #29
  %1089 = getelementptr i8, ptr %result.i76.i1812, i64 8
  store ptr %result.i.i.i1813, ptr %1089, align 8
  %1090 = load ptr, ptr %414, align 8
  store ptr @Array, ptr %286, align 8
  store ptr %result.i76.i1812, ptr %287, align 8
  store ptr %1090, ptr %380, align 8
  store i32 9, ptr %288, align 4
  %result.i91.i1814 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1091 = getelementptr i8, ptr %result.i91.i1814, i64 16
  store ptr @_parameterization_Nil, ptr %1091, align 8
  %result.i92.i1815 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1092 = getelementptr i8, ptr %result.i92.i1815, i64 16
  store ptr %1074, ptr %1092, align 8
  %1093 = getelementptr i8, ptr %result.i92.i1815, i64 8
  store ptr %1073, ptr %1093, align 8
  %1094 = getelementptr i8, ptr %result.i92.i1815, i64 24
  store ptr null, ptr %1094, align 8
  %1095 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i92.i1815)
  store ptr @Entry, ptr %result.i92.i1815, align 8
  %1096 = getelementptr i8, ptr %result.i91.i1814, i64 8
  store ptr %result.i92.i1815, ptr %1096, align 8
  %1097 = getelementptr i8, ptr %result.i91.i1814, i64 24
  store ptr null, ptr %1097, align 8
  %1098 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i91.i1814)
  store ptr @union_typ, ptr %result.i91.i1814, align 8
  %result.i93.i1816 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i91.i1814, ptr %result.i93.i1816, align 8
  %1099 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i93.i1816)
  store ptr @Array, ptr %193, align 8
  store ptr %result.i93.i1816, ptr %415, align 8
  store i32 9, ptr %416, align 8
  %1100 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %193)
  %1101 = getelementptr i8, ptr %result.i93.i1816, i64 16
  store i32 %1072, ptr %1101, align 4
  %1102 = getelementptr i8, ptr %result.i93.i1816, i64 20
  store i32 %1072, ptr %1102, align 4
  %result.i.i234.i1817 = call noalias ptr @bump_malloc_inner(i64 noundef %1088, ptr nonnull @current_ptr) #29
  %1103 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %1104 = getelementptr i8, ptr %result.i93.i1816, i64 8
  store ptr %result.i.i234.i1817, ptr %1104, align 8
  %1105 = load ptr, ptr %417, align 8
  store ptr @Array, ptr %299, align 8
  store ptr %result.i93.i1816, ptr %300, align 8
  store ptr %1105, ptr %381, align 8
  store i32 9, ptr %301, align 4
  store i32 0, ptr %382, align 4
  %1106 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %141)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %142)
  %1107 = icmp sgt i32 %1070, 0
  br i1 %1107, label %.lr.ph.i2932, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3019.critedge

.lr.ph.i2932:                                     ; preds = %1046
  %invariant.gep.i2933 = getelementptr i8, ptr %1048, i64 120
  %offset_tbl.i.i24.i2934 = load ptr, ptr %offset_tbl_ptr.i.i20.i1782, align 8
  %hash_coef.i.i22.i2935 = load i64, ptr %hash_coef_ptr.i.i18.i1780, align 4
  %product.i.i.i25.i2936 = mul i64 %hash_coef.i.i22.i2935, -5261542750394134544
  %shifted.i.i.i26.i2937 = lshr i64 %product.i.i.i25.i2936, 32
  %xored.i.i.i27.i2938 = xor i64 %shifted.i.i.i26.i2937, %product.i.i.i25.i2936
  %tbl_size.i.i23.i2939 = load i64, ptr %tbl_size_ptr.i.i19.i1781, align 4
  %hash.i.i.i28.i2940 = and i64 %xored.i.i.i27.i2938, %tbl_size.i.i23.i2939
  %offset_ptr.i.i29.i2941 = getelementptr i32, ptr %offset_tbl.i.i24.i2934, i64 %hash.i.i.i28.i2940
  %offset.i.i30.i2942 = load i32, ptr %offset_ptr.i.i29.i2941, align 4
  %1108 = insertvalue { ptr, ptr, ptr, i32 } %1053, i32 %offset.i.i30.i2942, 3
  %1109 = sext i32 %offset.i.i30.i2942 to i64
  %gep.i2945 = getelementptr ptr, ptr %invariant.gep.i2933, i64 %1109
  %1110 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %1111

1111:                                             ; preds = %._crit_edge1.i2949, %.lr.ph.i2932
  %.reg2mem13.079.i2946 = phi i32 [ 0, %.lr.ph.i2932 ], [ %1308, %._crit_edge1.i2949 ]
  store ptr @_parameterization_Ptri32, ptr %141, align 8
  %1112 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %141)
  %1113 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %1048)
  %1114 = load ptr, ptr %gep.i2945, align 8
  store ptr @i32_typ, ptr %142, align 8
  %1115 = call ptr %1114({ ptr, ptr, ptr, i32 } %1108, ptr nonnull %142)
  %1116 = call { ptr, i160 } %1115({ ptr, ptr, ptr, i32 } %1108, { ptr, ptr, ptr, i32 } %1108, ptr nonnull %141, i32 %.reg2mem13.079.i2946)
  %.fca.0.extract11.i2947 = extractvalue { ptr, i160 } %1116, 0
  %1117 = icmp ne ptr %.fca.0.extract11.i2947, @nil_typ
  %1118 = icmp ne ptr %.fca.0.extract11.i2947, null
  %.not17.i2948 = and i1 %1117, %1118
  br i1 %.not17.i2948, label %1119, label %._crit_edge1.i2949

1119:                                             ; preds = %1111
  %hash_coef_ptr.i.i33.i2954 = getelementptr i8, ptr %.fca.0.extract11.i2947, i64 8
  %tbl_size_ptr.i.i34.i2955 = getelementptr i8, ptr %.fca.0.extract11.i2947, i64 16
  %offset_tbl_ptr.i.i35.i2956 = getelementptr i8, ptr %.fca.0.extract11.i2947, i64 40
  %1120 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %51)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %52)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %53)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %54)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %55)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %56)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %57)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0680.i4012)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %58)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %59)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %60)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %61)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %62)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %63)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %64)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %65)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i4013)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %66)
  %hash_coef.i.i147.i4019 = load i64, ptr %hash_coef_ptr.i.i33.i2954, align 4
  %tbl_size.i.i148.i4020 = load i64, ptr %tbl_size_ptr.i.i34.i2955, align 4
  %offset_tbl.i.i149.i4021 = load ptr, ptr %offset_tbl_ptr.i.i35.i2956, align 8
  %product.i.i.i150.i4022 = mul i64 %hash_coef.i.i147.i4019, 4015701072841558310
  %shifted.i.i.i151.i4023 = lshr i64 %product.i.i.i150.i4022, 32
  %xored.i.i.i152.i4024 = xor i64 %shifted.i.i.i151.i4023, %product.i.i.i150.i4022
  %hash.i.i.i153.i4025 = and i64 %xored.i.i.i152.i4024, %tbl_size.i.i148.i4020
  %offset_ptr.i.i154.i4026 = getelementptr i32, ptr %offset_tbl.i.i149.i4021, i64 %hash.i.i.i153.i4025
  %offset.i.i169.i4027 = load i32, ptr %offset_ptr.i.i154.i4026, align 4
  %1121 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1122 = load i32, ptr %302, align 4
  %1123 = icmp sgt i32 %1122, 0
  br i1 %1123, label %.lr.ph.i4028, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4141

.lr.ph.i4028:                                     ; preds = %1119
  %.fca.1.extract13.i2950 = extractvalue { ptr, i160 } %1116, 1
  %.sroa.576.8.extract.shift.i2952 = lshr i160 %.fca.1.extract13.i2950, 64
  %1124 = insertelement <2 x i160> poison, i160 %.sroa.576.8.extract.shift.i2952, i64 0
  %1125 = insertelement <2 x i160> %1124, i160 %.fca.1.extract13.i2950, i64 1
  %1126 = trunc <2 x i160> %1125 to <2 x i64>
  %1127 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i2947, 0
  %1128 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1129 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract11.i2947)
  %invariant.gep4619 = getelementptr i8, ptr %.fca.0.extract11.i2947, i64 64
  br label %1130

1130:                                             ; preds = %.cont.cont.i4079, %.lr.ph.i4028
  %1131 = phi ptr [ %.fca.0.extract11.i2947, %.lr.ph.i4028 ], [ %vptr.i248.sroa.speculated.i4080, %.cont.cont.i4079 ]
  %1132 = phi i32 [ %offset.i.i169.i4027, %.lr.ph.i4028 ], [ %offset.i.i260.i4094, %.cont.cont.i4079 ]
  %.reg2mem195.0678.i4029 = phi i32 [ 1, %.lr.ph.i4028 ], [ %1291, %.cont.cont.i4079 ]
  %.reg2mem193.0677.i4030 = phi i32 [ 0, %.lr.ph.i4028 ], [ %1296, %.cont.cont.i4079 ]
  %1133 = phi <2 x i64> [ %1126, %.lr.ph.i4028 ], [ %1295, %.cont.cont.i4079 ]
  %1134 = extractelement <2 x i64> %1133, i64 1
  %1135 = inttoptr i64 %1134 to ptr
  %1136 = extractelement <2 x i64> %1133, i64 0
  %1137 = inttoptr i64 %1136 to ptr
  %1138 = insertvalue { ptr, ptr, ptr, i32 } %1127, ptr %1135, 1
  %1139 = insertvalue { ptr, ptr, ptr, i32 } %1138, ptr %1137, 2
  %1140 = insertvalue { ptr, ptr, ptr, i32 } %1139, i32 %1132, 3
  %1141 = sext i32 %1132 to i64
  %gep4620 = getelementptr ptr, ptr %invariant.gep4619, i64 %1141
  %1142 = load ptr, ptr %gep4620, align 8
  %1143 = call ptr %1142({ ptr, ptr, ptr, i32 } %1140, ptr nonnull %2)
  %1144 = call i32 %1143({ ptr, ptr, ptr, i32 } %1140, { ptr, ptr, ptr, i32 } %1140, ptr nonnull %2)
  %1145 = icmp eq i32 %.reg2mem195.0678.i4029, 1
  %1146 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br i1 %1145, label %1147, label %1210

1147:                                             ; preds = %1130
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %1148 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1149 = load ptr, ptr %286, align 8
  %1150 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1149, 0
  %1151 = load ptr, ptr %287, align 8
  %1152 = insertvalue { ptr, ptr, ptr, i32 } %1150, ptr %1151, 1
  %1153 = load ptr, ptr %380, align 8
  %1154 = insertvalue { ptr, ptr, ptr, i32 } %1152, ptr %1153, 2
  %1155 = load i32, ptr %288, align 4
  %1156 = insertvalue { ptr, ptr, ptr, i32 } %1154, i32 %1155, 3
  %hash_coef_ptr.i.i10.i4914 = getelementptr i8, ptr %1149, i64 8
  %tbl_size_ptr.i.i11.i4915 = getelementptr i8, ptr %1149, i64 16
  %offset_tbl_ptr.i.i12.i4916 = getelementptr i8, ptr %1149, i64 40
  %hash_coef.i.i13.i4917 = load i64, ptr %hash_coef_ptr.i.i10.i4914, align 4
  %tbl_size.i.i14.i4918 = load i64, ptr %tbl_size_ptr.i.i11.i4915, align 4
  %offset_tbl.i.i15.i4919 = load ptr, ptr %offset_tbl_ptr.i.i12.i4916, align 8
  %product.i.i.i16.i4920 = mul i64 %hash_coef.i.i13.i4917, -5261542750394134544
  %shifted.i.i.i17.i4921 = lshr i64 %product.i.i.i16.i4920, 32
  %xored.i.i.i18.i4922 = xor i64 %shifted.i.i.i17.i4921, %product.i.i.i16.i4920
  %hash.i.i.i19.i4923 = and i64 %xored.i.i.i18.i4922, %tbl_size.i.i14.i4918
  %offset_ptr.i.i20.i4924 = getelementptr i32, ptr %offset_tbl.i.i15.i4919, i64 %hash.i.i.i19.i4923
  %offset.i.i21.i4925 = load i32, ptr %offset_ptr.i.i20.i4924, align 4
  %eq.i.i4926 = icmp eq i32 %1155, %offset.i.i21.i4925
  call void @llvm.assume(i1 %eq.i.i4926) #30
  %1157 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1158 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1149)
  %1159 = sext i32 %1155 to i64
  %1160 = getelementptr ptr, ptr %1149, i64 %1159
  %1161 = getelementptr i8, ptr %1160, i64 64
  %1162 = load ptr, ptr %1161, align 8
  %1163 = call ptr %1162({ ptr, ptr, ptr, i32 } %1156, ptr nonnull %2)
  %1164 = call i32 %1163({ ptr, ptr, ptr, i32 } %1156, { ptr, ptr, ptr, i32 } %1156, ptr nonnull %2)
  %1165 = add i32 %1164, -1
  %1166 = and i32 %1165, %1144
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %1167 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1168 = load ptr, ptr %286, align 8
  %1169 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1168, 0
  %1170 = load ptr, ptr %287, align 8
  %1171 = insertvalue { ptr, ptr, ptr, i32 } %1169, ptr %1170, 1
  %1172 = load ptr, ptr %380, align 8
  %1173 = insertvalue { ptr, ptr, ptr, i32 } %1171, ptr %1172, 2
  %1174 = load i32, ptr %288, align 4
  %1175 = insertvalue { ptr, ptr, ptr, i32 } %1173, i32 %1174, 3
  %hash_coef_ptr.i.i172.i4099 = getelementptr i8, ptr %1168, i64 8
  %tbl_size_ptr.i.i173.i4100 = getelementptr i8, ptr %1168, i64 16
  %offset_tbl_ptr.i.i174.i4101 = getelementptr i8, ptr %1168, i64 40
  %hash_coef.i.i175.i4102 = load i64, ptr %hash_coef_ptr.i.i172.i4099, align 4
  %tbl_size.i.i176.i4103 = load i64, ptr %tbl_size_ptr.i.i173.i4100, align 4
  %offset_tbl.i.i177.i4104 = load ptr, ptr %offset_tbl_ptr.i.i174.i4101, align 8
  %product.i.i.i178.i4105 = mul i64 %hash_coef.i.i175.i4102, -5261542750394134544
  %shifted.i.i.i179.i4106 = lshr i64 %product.i.i.i178.i4105, 32
  %xored.i.i.i180.i4107 = xor i64 %shifted.i.i.i179.i4106, %product.i.i.i178.i4105
  %hash.i.i.i181.i4108 = and i64 %xored.i.i.i180.i4107, %tbl_size.i.i176.i4103
  %offset_ptr.i.i182.i4109 = getelementptr i32, ptr %offset_tbl.i.i177.i4104, i64 %hash.i.i.i181.i4108
  %offset.i.i183.i4110 = load i32, ptr %offset_ptr.i.i182.i4109, align 4
  %eq.i.i4111 = icmp eq i32 %1174, %offset.i.i183.i4110
  call void @llvm.assume(i1 %eq.i.i4111) #30
  store ptr @_parameterization_Ptri32, ptr %51, align 8
  %1176 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %51)
  %1177 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1168)
  %1178 = sext i32 %1174 to i64
  %1179 = getelementptr ptr, ptr %1168, i64 %1178
  %1180 = getelementptr i8, ptr %1179, i64 120
  %1181 = load ptr, ptr %1180, align 8
  store ptr @i32_typ, ptr %52, align 8
  %1182 = call ptr %1181({ ptr, ptr, ptr, i32 } %1175, ptr nonnull %52)
  %1183 = call { ptr, i160 } %1182({ ptr, ptr, ptr, i32 } %1175, { ptr, ptr, ptr, i32 } %1175, ptr nonnull %51, i32 %1166)
  %.fca.0.extract112.i4112 = extractvalue { ptr, i160 } %1183, 0
  %1184 = insertvalue { ptr, i160 } undef, ptr %1131, 0
  %.sroa.3111.0.insert.ext.i4113 = zext i32 %1132 to i160
  %.sroa.3111.0.insert.shift.i4114 = shl nuw i160 %.sroa.3111.0.insert.ext.i4113, 128
  %.sroa.2110.0.insert.ext.i4115 = zext i64 %1136 to i160
  %.sroa.2110.0.insert.shift.i4116 = shl nuw nsw i160 %.sroa.2110.0.insert.ext.i4115, 64
  %.sroa.2110.0.insert.insert.i4117 = or disjoint i160 %.sroa.2110.0.insert.shift.i4116, %.sroa.3111.0.insert.shift.i4114
  %.sroa.0109.0.insert.ext.i4118 = zext i64 %1134 to i160
  %.sroa.0109.0.insert.insert.i4119 = or disjoint i160 %.sroa.2110.0.insert.insert.i4117, %.sroa.0109.0.insert.ext.i4118
  %1185 = insertvalue { ptr, i160 } %1184, i160 %.sroa.0109.0.insert.insert.i4119, 1
  %1186 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1187 = load ptr, ptr %286, align 8
  %1188 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1187, 0
  %1189 = load ptr, ptr %287, align 8
  %1190 = insertvalue { ptr, ptr, ptr, i32 } %1188, ptr %1189, 1
  %1191 = load ptr, ptr %380, align 8
  %1192 = insertvalue { ptr, ptr, ptr, i32 } %1190, ptr %1191, 2
  %1193 = load i32, ptr %288, align 4
  %1194 = insertvalue { ptr, ptr, ptr, i32 } %1192, i32 %1193, 3
  %hash_coef_ptr.i.i186.i4124 = getelementptr i8, ptr %1187, i64 8
  %tbl_size_ptr.i.i187.i4125 = getelementptr i8, ptr %1187, i64 16
  %offset_tbl_ptr.i.i188.i4126 = getelementptr i8, ptr %1187, i64 40
  %hash_coef.i.i189.i4127 = load i64, ptr %hash_coef_ptr.i.i186.i4124, align 4
  %tbl_size.i.i190.i4128 = load i64, ptr %tbl_size_ptr.i.i187.i4125, align 4
  %offset_tbl.i.i191.i4129 = load ptr, ptr %offset_tbl_ptr.i.i188.i4126, align 8
  %product.i.i.i192.i4130 = mul i64 %hash_coef.i.i189.i4127, -5261542750394134544
  %shifted.i.i.i193.i4131 = lshr i64 %product.i.i.i192.i4130, 32
  %xored.i.i.i194.i4132 = xor i64 %shifted.i.i.i193.i4131, %product.i.i.i192.i4130
  %hash.i.i.i195.i4133 = and i64 %xored.i.i.i194.i4132, %tbl_size.i.i190.i4128
  %offset_ptr.i.i196.i4134 = getelementptr i32, ptr %offset_tbl.i.i191.i4129, i64 %hash.i.i.i195.i4133
  %offset.i.i197.i4135 = load i32, ptr %offset_ptr.i.i196.i4134, align 4
  %eq.i200.i4136 = icmp eq i32 %1193, %offset.i.i197.i4135
  call void @llvm.assume(i1 %eq.i200.i4136) #30
  %1195 = load ptr, ptr %result.i, align 8
  %1196 = load ptr, ptr %269, align 8
  %result.i.i4137 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1197 = getelementptr i8, ptr %result.i.i4137, i64 16
  store ptr %1196, ptr %1197, align 8
  %1198 = getelementptr i8, ptr %result.i.i4137, i64 8
  store ptr %1195, ptr %1198, align 8
  %1199 = getelementptr i8, ptr %result.i.i4137, i64 24
  store ptr null, ptr %1199, align 8
  %1200 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i4137)
  store ptr @Entry, ptr %result.i.i4137, align 8
  store ptr @_parameterization_Ptri32, ptr %53, align 8
  store ptr %result.i.i4137, ptr %465, align 8
  %1201 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %53)
  %1202 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1187)
  %1203 = sext i32 %1193 to i64
  %1204 = getelementptr ptr, ptr %1187, i64 %1203
  %1205 = getelementptr i8, ptr %1204, i64 128
  %1206 = load ptr, ptr %1205, align 8
  store ptr @i32_typ, ptr %54, align 8
  store ptr %1131, ptr %466, align 8
  %1207 = call ptr %1206({ ptr, ptr, ptr, i32 } %1194, ptr nonnull %54)
  call void %1207({ ptr, ptr, ptr, i32 } %1194, { ptr, ptr, ptr, i32 } %1194, ptr nonnull %53, i32 %1166, { ptr, i160 } %1185)
  %1208 = icmp ne ptr %.fca.0.extract112.i4112, @nil_typ
  %1209 = icmp ne ptr %.fca.0.extract112.i4112, null
  %.not140.i4138 = and i1 %1208, %1209
  br i1 %.not140.i4138, label %.cont.cont.i4079, label %1299

1210:                                             ; preds = %1130
  %1211 = add i32 %1144, 2127912214
  %1212 = shl i32 %1144, 12
  %1213 = add i32 %1211, %1212
  %1214 = ashr i32 %1213, 19
  %1215 = xor i32 %1213, %1214
  %1216 = xor i32 %1215, -949894596
  %1217 = add i32 %1216, 374761393
  %1218 = shl i32 %1216, 5
  %1219 = add i32 %1217, %1218
  %1220 = add i32 %1219, -744332180
  %1221 = shl i32 %1219, 9
  %1222 = xor i32 %1220, %1221
  %1223 = add i32 %1222, -42973499
  %1224 = shl i32 %1222, 3
  %1225 = add i32 %1223, %1224
  %1226 = ashr i32 %1225, 16
  %1227 = xor i32 %1225, %1226
  %1228 = xor i32 %1227, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %1229 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1230 = load ptr, ptr %299, align 8
  %1231 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1230, 0
  %1232 = load ptr, ptr %300, align 8
  %1233 = insertvalue { ptr, ptr, ptr, i32 } %1231, ptr %1232, 1
  %1234 = load ptr, ptr %381, align 8
  %1235 = insertvalue { ptr, ptr, ptr, i32 } %1233, ptr %1234, 2
  %1236 = load i32, ptr %301, align 4
  %1237 = insertvalue { ptr, ptr, ptr, i32 } %1235, i32 %1236, 3
  %hash_coef_ptr.i.i10.i4944 = getelementptr i8, ptr %1230, i64 8
  %tbl_size_ptr.i.i11.i4945 = getelementptr i8, ptr %1230, i64 16
  %offset_tbl_ptr.i.i12.i4946 = getelementptr i8, ptr %1230, i64 40
  %hash_coef.i.i13.i4947 = load i64, ptr %hash_coef_ptr.i.i10.i4944, align 4
  %tbl_size.i.i14.i4948 = load i64, ptr %tbl_size_ptr.i.i11.i4945, align 4
  %offset_tbl.i.i15.i4949 = load ptr, ptr %offset_tbl_ptr.i.i12.i4946, align 8
  %product.i.i.i16.i4950 = mul i64 %hash_coef.i.i13.i4947, -5261542750394134544
  %shifted.i.i.i17.i4951 = lshr i64 %product.i.i.i16.i4950, 32
  %xored.i.i.i18.i4952 = xor i64 %shifted.i.i.i17.i4951, %product.i.i.i16.i4950
  %hash.i.i.i19.i4953 = and i64 %xored.i.i.i18.i4952, %tbl_size.i.i14.i4948
  %offset_ptr.i.i20.i4954 = getelementptr i32, ptr %offset_tbl.i.i15.i4949, i64 %hash.i.i.i19.i4953
  %offset.i.i21.i4955 = load i32, ptr %offset_ptr.i.i20.i4954, align 4
  %eq.i.i4956 = icmp eq i32 %1236, %offset.i.i21.i4955
  call void @llvm.assume(i1 %eq.i.i4956) #30
  %1238 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1239 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1230)
  %1240 = sext i32 %1236 to i64
  %1241 = getelementptr ptr, ptr %1230, i64 %1240
  %1242 = getelementptr i8, ptr %1241, i64 64
  %1243 = load ptr, ptr %1242, align 8
  %1244 = call ptr %1243({ ptr, ptr, ptr, i32 } %1237, ptr nonnull %2)
  %1245 = call i32 %1244({ ptr, ptr, ptr, i32 } %1237, { ptr, ptr, ptr, i32 } %1237, ptr nonnull %2)
  %1246 = add i32 %1245, -1
  %1247 = and i32 %1246, %1228
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %1248 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1249 = load ptr, ptr %299, align 8
  %1250 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1249, 0
  %1251 = load ptr, ptr %300, align 8
  %1252 = insertvalue { ptr, ptr, ptr, i32 } %1250, ptr %1251, 1
  %1253 = load ptr, ptr %381, align 8
  %1254 = insertvalue { ptr, ptr, ptr, i32 } %1252, ptr %1253, 2
  %1255 = load i32, ptr %301, align 4
  %1256 = insertvalue { ptr, ptr, ptr, i32 } %1254, i32 %1255, 3
  %hash_coef_ptr.i.i202.i4035 = getelementptr i8, ptr %1249, i64 8
  %tbl_size_ptr.i.i203.i4036 = getelementptr i8, ptr %1249, i64 16
  %offset_tbl_ptr.i.i204.i4037 = getelementptr i8, ptr %1249, i64 40
  %hash_coef.i.i205.i4038 = load i64, ptr %hash_coef_ptr.i.i202.i4035, align 4
  %tbl_size.i.i206.i4039 = load i64, ptr %tbl_size_ptr.i.i203.i4036, align 4
  %offset_tbl.i.i207.i4040 = load ptr, ptr %offset_tbl_ptr.i.i204.i4037, align 8
  %product.i.i.i208.i4041 = mul i64 %hash_coef.i.i205.i4038, -5261542750394134544
  %shifted.i.i.i209.i4042 = lshr i64 %product.i.i.i208.i4041, 32
  %xored.i.i.i210.i4043 = xor i64 %shifted.i.i.i209.i4042, %product.i.i.i208.i4041
  %hash.i.i.i211.i4044 = and i64 %xored.i.i.i210.i4043, %tbl_size.i.i206.i4039
  %offset_ptr.i.i212.i4045 = getelementptr i32, ptr %offset_tbl.i.i207.i4040, i64 %hash.i.i.i211.i4044
  %offset.i.i213.i4046 = load i32, ptr %offset_ptr.i.i212.i4045, align 4
  %eq.i216.i4047 = icmp eq i32 %1255, %offset.i.i213.i4046
  call void @llvm.assume(i1 %eq.i216.i4047) #30
  store ptr @_parameterization_Ptri32, ptr %59, align 8
  %1257 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %59)
  %1258 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1249)
  %1259 = sext i32 %1255 to i64
  %1260 = getelementptr ptr, ptr %1249, i64 %1259
  %1261 = getelementptr i8, ptr %1260, i64 120
  %1262 = load ptr, ptr %1261, align 8
  store ptr @i32_typ, ptr %60, align 8
  %1263 = call ptr %1262({ ptr, ptr, ptr, i32 } %1256, ptr nonnull %60)
  %1264 = call { ptr, i160 } %1263({ ptr, ptr, ptr, i32 } %1256, { ptr, ptr, ptr, i32 } %1256, ptr nonnull %59, i32 %1247)
  %.fca.0.extract87.i4048 = extractvalue { ptr, i160 } %1264, 0
  %1265 = insertvalue { ptr, i160 } undef, ptr %1131, 0
  %.sroa.3.0.insert.ext.i4049 = zext i32 %1132 to i160
  %.sroa.3.0.insert.shift.i4050 = shl nuw i160 %.sroa.3.0.insert.ext.i4049, 128
  %.sroa.2.0.insert.ext.i4051 = zext i64 %1136 to i160
  %.sroa.2.0.insert.shift.i4052 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i4051, 64
  %.sroa.2.0.insert.insert.i4053 = or disjoint i160 %.sroa.2.0.insert.shift.i4052, %.sroa.3.0.insert.shift.i4050
  %.sroa.0.0.insert.ext.i4054 = zext i64 %1134 to i160
  %.sroa.0.0.insert.insert.i4055 = or disjoint i160 %.sroa.2.0.insert.insert.i4053, %.sroa.0.0.insert.ext.i4054
  %1266 = insertvalue { ptr, i160 } %1265, i160 %.sroa.0.0.insert.insert.i4055, 1
  %1267 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1268 = load ptr, ptr %299, align 8
  %1269 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1268, 0
  %1270 = load ptr, ptr %300, align 8
  %1271 = insertvalue { ptr, ptr, ptr, i32 } %1269, ptr %1270, 1
  %1272 = load ptr, ptr %381, align 8
  %1273 = insertvalue { ptr, ptr, ptr, i32 } %1271, ptr %1272, 2
  %1274 = load i32, ptr %301, align 4
  %1275 = insertvalue { ptr, ptr, ptr, i32 } %1273, i32 %1274, 3
  %hash_coef_ptr.i.i218.i4060 = getelementptr i8, ptr %1268, i64 8
  %tbl_size_ptr.i.i219.i4061 = getelementptr i8, ptr %1268, i64 16
  %offset_tbl_ptr.i.i220.i4062 = getelementptr i8, ptr %1268, i64 40
  %hash_coef.i.i221.i4063 = load i64, ptr %hash_coef_ptr.i.i218.i4060, align 4
  %tbl_size.i.i222.i4064 = load i64, ptr %tbl_size_ptr.i.i219.i4061, align 4
  %offset_tbl.i.i223.i4065 = load ptr, ptr %offset_tbl_ptr.i.i220.i4062, align 8
  %product.i.i.i224.i4066 = mul i64 %hash_coef.i.i221.i4063, -5261542750394134544
  %shifted.i.i.i225.i4067 = lshr i64 %product.i.i.i224.i4066, 32
  %xored.i.i.i226.i4068 = xor i64 %shifted.i.i.i225.i4067, %product.i.i.i224.i4066
  %hash.i.i.i227.i4069 = and i64 %xored.i.i.i226.i4068, %tbl_size.i.i222.i4064
  %offset_ptr.i.i228.i4070 = getelementptr i32, ptr %offset_tbl.i.i223.i4065, i64 %hash.i.i.i227.i4069
  %offset.i.i229.i4071 = load i32, ptr %offset_ptr.i.i228.i4070, align 4
  %eq.i232.i4072 = icmp eq i32 %1274, %offset.i.i229.i4071
  call void @llvm.assume(i1 %eq.i232.i4072) #30
  %1276 = load ptr, ptr %result.i, align 8
  %1277 = load ptr, ptr %269, align 8
  %result.i233.i4073 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1278 = getelementptr i8, ptr %result.i233.i4073, i64 16
  store ptr %1277, ptr %1278, align 8
  %1279 = getelementptr i8, ptr %result.i233.i4073, i64 8
  store ptr %1276, ptr %1279, align 8
  %1280 = getelementptr i8, ptr %result.i233.i4073, i64 24
  store ptr null, ptr %1280, align 8
  %1281 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i233.i4073)
  store ptr @Entry, ptr %result.i233.i4073, align 8
  store ptr @_parameterization_Ptri32, ptr %61, align 8
  store ptr %result.i233.i4073, ptr %463, align 8
  %1282 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %61)
  %1283 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1268)
  %1284 = sext i32 %1274 to i64
  %1285 = getelementptr ptr, ptr %1268, i64 %1284
  %1286 = getelementptr i8, ptr %1285, i64 128
  %1287 = load ptr, ptr %1286, align 8
  store ptr @i32_typ, ptr %62, align 8
  store ptr %1131, ptr %464, align 8
  %1288 = call ptr %1287({ ptr, ptr, ptr, i32 } %1275, ptr nonnull %62)
  call void %1288({ ptr, ptr, ptr, i32 } %1275, { ptr, ptr, ptr, i32 } %1275, ptr nonnull %61, i32 %1247, { ptr, i160 } %1266)
  %1289 = icmp ne ptr %.fca.0.extract87.i4048, @nil_typ
  %1290 = icmp ne ptr %.fca.0.extract87.i4048, null
  %.not138.i4074 = and i1 %1289, %1290
  br i1 %.not138.i4074, label %.cont.cont.i4079, label %1299

.cont.cont.i4079:                                 ; preds = %1210, %1147
  %.sink4660 = phi { ptr, i160 } [ %1183, %1147 ], [ %1264, %1210 ]
  %1291 = phi i32 [ 2, %1147 ], [ 1, %1210 ]
  %vptr.i248.sroa.speculated.i4080 = phi ptr [ %.fca.0.extract112.i4112, %1147 ], [ %.fca.0.extract87.i4048, %1210 ]
  %.fca.1.extract89.i4075 = extractvalue { ptr, i160 } %.sink4660, 1
  %.sroa.3407.sroa.4.0.extract.shift.i4076 = lshr i160 %.fca.1.extract89.i4075, 64
  %1292 = trunc i160 %.sroa.3407.sroa.4.0.extract.shift.i4076 to i64
  %1293 = insertelement <2 x i64> poison, i64 %1292, i64 0
  %1294 = trunc i160 %.fca.1.extract89.i4075 to i64
  %1295 = insertelement <2 x i64> %1293, i64 %1294, i64 1
  %hash_coef_ptr.i.i249.i4083 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i4080, i64 8
  %tbl_size_ptr.i.i250.i4084 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i4080, i64 16
  %offset_tbl_ptr.i.i251.i4085 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i4080, i64 40
  %hash_coef.i.i252.i4086 = load i64, ptr %hash_coef_ptr.i.i249.i4083, align 4
  %tbl_size.i.i253.i4087 = load i64, ptr %tbl_size_ptr.i.i250.i4084, align 4
  %offset_tbl.i.i254.i4088 = load ptr, ptr %offset_tbl_ptr.i.i251.i4085, align 8
  %product.i.i.i255.i4089 = mul i64 %hash_coef.i.i252.i4086, 4015701072841558310
  %shifted.i.i.i256.i4090 = lshr i64 %product.i.i.i255.i4089, 32
  %xored.i.i.i257.i4091 = xor i64 %shifted.i.i.i256.i4090, %product.i.i.i255.i4089
  %hash.i.i.i258.i4092 = and i64 %xored.i.i.i257.i4091, %tbl_size.i.i253.i4087
  %offset_ptr.i.i259.i4093 = getelementptr i32, ptr %offset_tbl.i.i254.i4088, i64 %hash.i.i.i258.i4092
  %offset.i.i260.i4094 = load i32, ptr %offset_ptr.i.i259.i4093, align 4
  %1296 = add nuw nsw i32 %.reg2mem193.0677.i4030, 1
  %1297 = load i32, ptr %302, align 4
  %1298 = icmp slt i32 %1296, %1297
  br i1 %1298, label %1130, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4141

1299:                                             ; preds = %1210, %1147
  %1300 = phi ptr [ %63, %1210 ], [ %55, %1147 ]
  %1301 = phi ptr [ %64, %1210 ], [ %56, %1147 ]
  %1302 = phi ptr [ %65, %1210 ], [ %57, %1147 ]
  %1303 = phi ptr [ %.sroa.0.i4013, %1210 ], [ %.sroa.0680.i4012, %1147 ]
  %1304 = phi ptr [ %66, %1210 ], [ %58, %1147 ]
  %1305 = load i32, ptr %382, align 4
  store i32 %1305, ptr %1300, align 4
  store i32 1, ptr %1301, align 4
  %1306 = add i32 %1305, 1
  store i32 %1306, ptr %1302, align 4
  %1307 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  store i32 %1306, ptr %382, align 4
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %1304, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %1303, align 8
  br label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4141

HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4141: ; preds = %.cont.cont.i4079, %1119, %1299
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %51)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %52)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %53)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %54)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %55)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %56)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %57)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i4012)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %58)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %59)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %60)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %61)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %62)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %63)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %64)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %65)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i4013)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %66)
  br label %._crit_edge1.i2949

._crit_edge1.i2949:                               ; preds = %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4141, %1111
  %1308 = add nuw nsw i32 %.reg2mem13.079.i2946, 1
  %1309 = icmp slt i32 %1308, %1070
  br i1 %1309, label %1111, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2967

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2967: ; preds = %._crit_edge1.i2949
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %141)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %142)
  %1310 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %139)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %140)
  %invariant.gep.i2970 = getelementptr i8, ptr %1056, i64 120
  %offset_tbl.i.i24.i2972 = load ptr, ptr %offset_tbl_ptr.i.i48.i1799, align 8
  %hash_coef.i.i22.i2974 = load i64, ptr %hash_coef_ptr.i.i46.i1797, align 4
  %product.i.i.i25.i2975 = mul i64 %hash_coef.i.i22.i2974, -5261542750394134544
  %shifted.i.i.i26.i2976 = lshr i64 %product.i.i.i25.i2975, 32
  %xored.i.i.i27.i2977 = xor i64 %shifted.i.i.i26.i2976, %product.i.i.i25.i2975
  %tbl_size.i.i23.i2979 = load i64, ptr %tbl_size_ptr.i.i47.i1798, align 4
  %hash.i.i.i28.i2980 = and i64 %xored.i.i.i27.i2977, %tbl_size.i.i23.i2979
  %offset_ptr.i.i29.i2981 = getelementptr i32, ptr %offset_tbl.i.i24.i2972, i64 %hash.i.i.i28.i2980
  %offset.i.i30.i2982 = load i32, ptr %offset_ptr.i.i29.i2981, align 4
  %1311 = insertvalue { ptr, ptr, ptr, i32 } %1061, i32 %offset.i.i30.i2982, 3
  %1312 = sext i32 %offset.i.i30.i2982 to i64
  %gep.i2997 = getelementptr ptr, ptr %invariant.gep.i2970, i64 %1312
  %1313 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %1314

1314:                                             ; preds = %._crit_edge1.i3001, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2967
  %.reg2mem13.079.i2998 = phi i32 [ 0, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2967 ], [ %1511, %._crit_edge1.i3001 ]
  store ptr @_parameterization_Ptri32, ptr %139, align 8
  %1315 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %139)
  %1316 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %1056)
  %1317 = load ptr, ptr %gep.i2997, align 8
  store ptr @i32_typ, ptr %140, align 8
  %1318 = call ptr %1317({ ptr, ptr, ptr, i32 } %1311, ptr nonnull %140)
  %1319 = call { ptr, i160 } %1318({ ptr, ptr, ptr, i32 } %1311, { ptr, ptr, ptr, i32 } %1311, ptr nonnull %139, i32 %.reg2mem13.079.i2998)
  %.fca.0.extract11.i2999 = extractvalue { ptr, i160 } %1319, 0
  %1320 = icmp ne ptr %.fca.0.extract11.i2999, @nil_typ
  %1321 = icmp ne ptr %.fca.0.extract11.i2999, null
  %.not17.i3000 = and i1 %1320, %1321
  br i1 %.not17.i3000, label %1322, label %._crit_edge1.i3001

1322:                                             ; preds = %1314
  %hash_coef_ptr.i.i33.i3006 = getelementptr i8, ptr %.fca.0.extract11.i2999, i64 8
  %tbl_size_ptr.i.i34.i3007 = getelementptr i8, ptr %.fca.0.extract11.i2999, i64 16
  %offset_tbl_ptr.i.i35.i3008 = getelementptr i8, ptr %.fca.0.extract11.i2999, i64 40
  %1323 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %35)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %36)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %37)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %38)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %39)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %40)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %41)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0680.i4142)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %42)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %43)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %44)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %45)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %46)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %47)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %48)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %49)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i4144)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %50)
  %hash_coef.i.i147.i4163 = load i64, ptr %hash_coef_ptr.i.i33.i3006, align 4
  %tbl_size.i.i148.i4164 = load i64, ptr %tbl_size_ptr.i.i34.i3007, align 4
  %offset_tbl.i.i149.i4165 = load ptr, ptr %offset_tbl_ptr.i.i35.i3008, align 8
  %product.i.i.i150.i4166 = mul i64 %hash_coef.i.i147.i4163, 4015701072841558310
  %shifted.i.i.i151.i4167 = lshr i64 %product.i.i.i150.i4166, 32
  %xored.i.i.i152.i4168 = xor i64 %shifted.i.i.i151.i4167, %product.i.i.i150.i4166
  %hash.i.i.i153.i4169 = and i64 %xored.i.i.i152.i4168, %tbl_size.i.i148.i4164
  %offset_ptr.i.i154.i4170 = getelementptr i32, ptr %offset_tbl.i.i149.i4165, i64 %hash.i.i.i153.i4169
  %offset.i.i169.i4171 = load i32, ptr %offset_ptr.i.i154.i4170, align 4
  %1324 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1325 = load i32, ptr %302, align 4
  %1326 = icmp sgt i32 %1325, 0
  br i1 %1326, label %.lr.ph.i4177, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4297

.lr.ph.i4177:                                     ; preds = %1322
  %.fca.1.extract13.i3002 = extractvalue { ptr, i160 } %1319, 1
  %.sroa.576.8.extract.shift.i3004 = lshr i160 %.fca.1.extract13.i3002, 64
  %1327 = insertelement <2 x i160> poison, i160 %.sroa.576.8.extract.shift.i3004, i64 0
  %1328 = insertelement <2 x i160> %1327, i160 %.fca.1.extract13.i3002, i64 1
  %1329 = trunc <2 x i160> %1328 to <2 x i64>
  %1330 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i2999, 0
  %1331 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1332 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract11.i2999)
  %invariant.gep4624 = getelementptr i8, ptr %.fca.0.extract11.i2999, i64 64
  br label %1333

1333:                                             ; preds = %.cont.cont.i4230, %.lr.ph.i4177
  %1334 = phi ptr [ %.fca.0.extract11.i2999, %.lr.ph.i4177 ], [ %vptr.i248.sroa.speculated.i4233, %.cont.cont.i4230 ]
  %1335 = phi i32 [ %offset.i.i169.i4171, %.lr.ph.i4177 ], [ %offset.i.i260.i4247, %.cont.cont.i4230 ]
  %.reg2mem195.0678.i4178 = phi i32 [ 1, %.lr.ph.i4177 ], [ %1494, %.cont.cont.i4230 ]
  %.reg2mem193.0677.i4179 = phi i32 [ 0, %.lr.ph.i4177 ], [ %1499, %.cont.cont.i4230 ]
  %1336 = phi <2 x i64> [ %1329, %.lr.ph.i4177 ], [ %1498, %.cont.cont.i4230 ]
  %1337 = extractelement <2 x i64> %1336, i64 1
  %1338 = inttoptr i64 %1337 to ptr
  %1339 = extractelement <2 x i64> %1336, i64 0
  %1340 = inttoptr i64 %1339 to ptr
  %1341 = insertvalue { ptr, ptr, ptr, i32 } %1330, ptr %1338, 1
  %1342 = insertvalue { ptr, ptr, ptr, i32 } %1341, ptr %1340, 2
  %1343 = insertvalue { ptr, ptr, ptr, i32 } %1342, i32 %1335, 3
  %1344 = sext i32 %1335 to i64
  %gep4625 = getelementptr ptr, ptr %invariant.gep4624, i64 %1344
  %1345 = load ptr, ptr %gep4625, align 8
  %1346 = call ptr %1345({ ptr, ptr, ptr, i32 } %1343, ptr nonnull %2)
  %1347 = call i32 %1346({ ptr, ptr, ptr, i32 } %1343, { ptr, ptr, ptr, i32 } %1343, ptr nonnull %2)
  %1348 = icmp eq i32 %.reg2mem195.0678.i4178, 1
  %1349 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br i1 %1348, label %1350, label %1413

1350:                                             ; preds = %1333
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %1351 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1352 = load ptr, ptr %286, align 8
  %1353 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1352, 0
  %1354 = load ptr, ptr %287, align 8
  %1355 = insertvalue { ptr, ptr, ptr, i32 } %1353, ptr %1354, 1
  %1356 = load ptr, ptr %380, align 8
  %1357 = insertvalue { ptr, ptr, ptr, i32 } %1355, ptr %1356, 2
  %1358 = load i32, ptr %288, align 4
  %1359 = insertvalue { ptr, ptr, ptr, i32 } %1357, i32 %1358, 3
  %hash_coef_ptr.i.i10.i4974 = getelementptr i8, ptr %1352, i64 8
  %tbl_size_ptr.i.i11.i4975 = getelementptr i8, ptr %1352, i64 16
  %offset_tbl_ptr.i.i12.i4976 = getelementptr i8, ptr %1352, i64 40
  %hash_coef.i.i13.i4977 = load i64, ptr %hash_coef_ptr.i.i10.i4974, align 4
  %tbl_size.i.i14.i4978 = load i64, ptr %tbl_size_ptr.i.i11.i4975, align 4
  %offset_tbl.i.i15.i4979 = load ptr, ptr %offset_tbl_ptr.i.i12.i4976, align 8
  %product.i.i.i16.i4980 = mul i64 %hash_coef.i.i13.i4977, -5261542750394134544
  %shifted.i.i.i17.i4981 = lshr i64 %product.i.i.i16.i4980, 32
  %xored.i.i.i18.i4982 = xor i64 %shifted.i.i.i17.i4981, %product.i.i.i16.i4980
  %hash.i.i.i19.i4983 = and i64 %xored.i.i.i18.i4982, %tbl_size.i.i14.i4978
  %offset_ptr.i.i20.i4984 = getelementptr i32, ptr %offset_tbl.i.i15.i4979, i64 %hash.i.i.i19.i4983
  %offset.i.i21.i4985 = load i32, ptr %offset_ptr.i.i20.i4984, align 4
  %eq.i.i4986 = icmp eq i32 %1358, %offset.i.i21.i4985
  call void @llvm.assume(i1 %eq.i.i4986) #30
  %1360 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1361 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1352)
  %1362 = sext i32 %1358 to i64
  %1363 = getelementptr ptr, ptr %1352, i64 %1362
  %1364 = getelementptr i8, ptr %1363, i64 64
  %1365 = load ptr, ptr %1364, align 8
  %1366 = call ptr %1365({ ptr, ptr, ptr, i32 } %1359, ptr nonnull %2)
  %1367 = call i32 %1366({ ptr, ptr, ptr, i32 } %1359, { ptr, ptr, ptr, i32 } %1359, ptr nonnull %2)
  %1368 = add i32 %1367, -1
  %1369 = and i32 %1368, %1347
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %1370 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1371 = load ptr, ptr %286, align 8
  %1372 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1371, 0
  %1373 = load ptr, ptr %287, align 8
  %1374 = insertvalue { ptr, ptr, ptr, i32 } %1372, ptr %1373, 1
  %1375 = load ptr, ptr %380, align 8
  %1376 = insertvalue { ptr, ptr, ptr, i32 } %1374, ptr %1375, 2
  %1377 = load i32, ptr %288, align 4
  %1378 = insertvalue { ptr, ptr, ptr, i32 } %1376, i32 %1377, 3
  %hash_coef_ptr.i.i172.i4252 = getelementptr i8, ptr %1371, i64 8
  %tbl_size_ptr.i.i173.i4253 = getelementptr i8, ptr %1371, i64 16
  %offset_tbl_ptr.i.i174.i4254 = getelementptr i8, ptr %1371, i64 40
  %hash_coef.i.i175.i4255 = load i64, ptr %hash_coef_ptr.i.i172.i4252, align 4
  %tbl_size.i.i176.i4256 = load i64, ptr %tbl_size_ptr.i.i173.i4253, align 4
  %offset_tbl.i.i177.i4257 = load ptr, ptr %offset_tbl_ptr.i.i174.i4254, align 8
  %product.i.i.i178.i4258 = mul i64 %hash_coef.i.i175.i4255, -5261542750394134544
  %shifted.i.i.i179.i4259 = lshr i64 %product.i.i.i178.i4258, 32
  %xored.i.i.i180.i4260 = xor i64 %shifted.i.i.i179.i4259, %product.i.i.i178.i4258
  %hash.i.i.i181.i4261 = and i64 %xored.i.i.i180.i4260, %tbl_size.i.i176.i4256
  %offset_ptr.i.i182.i4262 = getelementptr i32, ptr %offset_tbl.i.i177.i4257, i64 %hash.i.i.i181.i4261
  %offset.i.i183.i4263 = load i32, ptr %offset_ptr.i.i182.i4262, align 4
  %eq.i.i4264 = icmp eq i32 %1377, %offset.i.i183.i4263
  call void @llvm.assume(i1 %eq.i.i4264) #30
  store ptr @_parameterization_Ptri32, ptr %35, align 8
  %1379 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %35)
  %1380 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1371)
  %1381 = sext i32 %1377 to i64
  %1382 = getelementptr ptr, ptr %1371, i64 %1381
  %1383 = getelementptr i8, ptr %1382, i64 120
  %1384 = load ptr, ptr %1383, align 8
  store ptr @i32_typ, ptr %36, align 8
  %1385 = call ptr %1384({ ptr, ptr, ptr, i32 } %1378, ptr nonnull %36)
  %1386 = call { ptr, i160 } %1385({ ptr, ptr, ptr, i32 } %1378, { ptr, ptr, ptr, i32 } %1378, ptr nonnull %35, i32 %1369)
  %.fca.0.extract112.i4265 = extractvalue { ptr, i160 } %1386, 0
  %1387 = insertvalue { ptr, i160 } undef, ptr %1334, 0
  %.sroa.3111.0.insert.ext.i4266 = zext i32 %1335 to i160
  %.sroa.3111.0.insert.shift.i4267 = shl nuw i160 %.sroa.3111.0.insert.ext.i4266, 128
  %.sroa.2110.0.insert.ext.i4268 = zext i64 %1339 to i160
  %.sroa.2110.0.insert.shift.i4269 = shl nuw nsw i160 %.sroa.2110.0.insert.ext.i4268, 64
  %.sroa.2110.0.insert.insert.i4270 = or disjoint i160 %.sroa.2110.0.insert.shift.i4269, %.sroa.3111.0.insert.shift.i4267
  %.sroa.0109.0.insert.ext.i4271 = zext i64 %1337 to i160
  %.sroa.0109.0.insert.insert.i4272 = or disjoint i160 %.sroa.2110.0.insert.insert.i4270, %.sroa.0109.0.insert.ext.i4271
  %1388 = insertvalue { ptr, i160 } %1387, i160 %.sroa.0109.0.insert.insert.i4272, 1
  %1389 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1390 = load ptr, ptr %286, align 8
  %1391 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1390, 0
  %1392 = load ptr, ptr %287, align 8
  %1393 = insertvalue { ptr, ptr, ptr, i32 } %1391, ptr %1392, 1
  %1394 = load ptr, ptr %380, align 8
  %1395 = insertvalue { ptr, ptr, ptr, i32 } %1393, ptr %1394, 2
  %1396 = load i32, ptr %288, align 4
  %1397 = insertvalue { ptr, ptr, ptr, i32 } %1395, i32 %1396, 3
  %hash_coef_ptr.i.i186.i4277 = getelementptr i8, ptr %1390, i64 8
  %tbl_size_ptr.i.i187.i4278 = getelementptr i8, ptr %1390, i64 16
  %offset_tbl_ptr.i.i188.i4279 = getelementptr i8, ptr %1390, i64 40
  %hash_coef.i.i189.i4280 = load i64, ptr %hash_coef_ptr.i.i186.i4277, align 4
  %tbl_size.i.i190.i4281 = load i64, ptr %tbl_size_ptr.i.i187.i4278, align 4
  %offset_tbl.i.i191.i4282 = load ptr, ptr %offset_tbl_ptr.i.i188.i4279, align 8
  %product.i.i.i192.i4283 = mul i64 %hash_coef.i.i189.i4280, -5261542750394134544
  %shifted.i.i.i193.i4284 = lshr i64 %product.i.i.i192.i4283, 32
  %xored.i.i.i194.i4285 = xor i64 %shifted.i.i.i193.i4284, %product.i.i.i192.i4283
  %hash.i.i.i195.i4286 = and i64 %xored.i.i.i194.i4285, %tbl_size.i.i190.i4281
  %offset_ptr.i.i196.i4287 = getelementptr i32, ptr %offset_tbl.i.i191.i4282, i64 %hash.i.i.i195.i4286
  %offset.i.i197.i4288 = load i32, ptr %offset_ptr.i.i196.i4287, align 4
  %eq.i200.i4289 = icmp eq i32 %1396, %offset.i.i197.i4288
  call void @llvm.assume(i1 %eq.i200.i4289) #30
  %1398 = load ptr, ptr %result.i, align 8
  %1399 = load ptr, ptr %269, align 8
  %result.i.i4290 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1400 = getelementptr i8, ptr %result.i.i4290, i64 16
  store ptr %1399, ptr %1400, align 8
  %1401 = getelementptr i8, ptr %result.i.i4290, i64 8
  store ptr %1398, ptr %1401, align 8
  %1402 = getelementptr i8, ptr %result.i.i4290, i64 24
  store ptr null, ptr %1402, align 8
  %1403 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i4290)
  store ptr @Entry, ptr %result.i.i4290, align 8
  store ptr @_parameterization_Ptri32, ptr %37, align 8
  store ptr %result.i.i4290, ptr %469, align 8
  %1404 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %37)
  %1405 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1390)
  %1406 = sext i32 %1396 to i64
  %1407 = getelementptr ptr, ptr %1390, i64 %1406
  %1408 = getelementptr i8, ptr %1407, i64 128
  %1409 = load ptr, ptr %1408, align 8
  store ptr @i32_typ, ptr %38, align 8
  store ptr %1334, ptr %470, align 8
  %1410 = call ptr %1409({ ptr, ptr, ptr, i32 } %1397, ptr nonnull %38)
  call void %1410({ ptr, ptr, ptr, i32 } %1397, { ptr, ptr, ptr, i32 } %1397, ptr nonnull %37, i32 %1369, { ptr, i160 } %1388)
  %1411 = icmp ne ptr %.fca.0.extract112.i4265, @nil_typ
  %1412 = icmp ne ptr %.fca.0.extract112.i4265, null
  %.not140.i4291 = and i1 %1411, %1412
  br i1 %.not140.i4291, label %.cont.cont.i4230, label %1502

1413:                                             ; preds = %1333
  %1414 = add i32 %1347, 2127912214
  %1415 = shl i32 %1347, 12
  %1416 = add i32 %1414, %1415
  %1417 = ashr i32 %1416, 19
  %1418 = xor i32 %1416, %1417
  %1419 = xor i32 %1418, -949894596
  %1420 = add i32 %1419, 374761393
  %1421 = shl i32 %1419, 5
  %1422 = add i32 %1420, %1421
  %1423 = add i32 %1422, -744332180
  %1424 = shl i32 %1422, 9
  %1425 = xor i32 %1423, %1424
  %1426 = add i32 %1425, -42973499
  %1427 = shl i32 %1425, 3
  %1428 = add i32 %1426, %1427
  %1429 = ashr i32 %1428, 16
  %1430 = xor i32 %1428, %1429
  %1431 = xor i32 %1430, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %1432 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1433 = load ptr, ptr %299, align 8
  %1434 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1433, 0
  %1435 = load ptr, ptr %300, align 8
  %1436 = insertvalue { ptr, ptr, ptr, i32 } %1434, ptr %1435, 1
  %1437 = load ptr, ptr %381, align 8
  %1438 = insertvalue { ptr, ptr, ptr, i32 } %1436, ptr %1437, 2
  %1439 = load i32, ptr %301, align 4
  %1440 = insertvalue { ptr, ptr, ptr, i32 } %1438, i32 %1439, 3
  %hash_coef_ptr.i.i10.i5004 = getelementptr i8, ptr %1433, i64 8
  %tbl_size_ptr.i.i11.i5005 = getelementptr i8, ptr %1433, i64 16
  %offset_tbl_ptr.i.i12.i5006 = getelementptr i8, ptr %1433, i64 40
  %hash_coef.i.i13.i5007 = load i64, ptr %hash_coef_ptr.i.i10.i5004, align 4
  %tbl_size.i.i14.i5008 = load i64, ptr %tbl_size_ptr.i.i11.i5005, align 4
  %offset_tbl.i.i15.i5009 = load ptr, ptr %offset_tbl_ptr.i.i12.i5006, align 8
  %product.i.i.i16.i5010 = mul i64 %hash_coef.i.i13.i5007, -5261542750394134544
  %shifted.i.i.i17.i5011 = lshr i64 %product.i.i.i16.i5010, 32
  %xored.i.i.i18.i5012 = xor i64 %shifted.i.i.i17.i5011, %product.i.i.i16.i5010
  %hash.i.i.i19.i5013 = and i64 %xored.i.i.i18.i5012, %tbl_size.i.i14.i5008
  %offset_ptr.i.i20.i5014 = getelementptr i32, ptr %offset_tbl.i.i15.i5009, i64 %hash.i.i.i19.i5013
  %offset.i.i21.i5015 = load i32, ptr %offset_ptr.i.i20.i5014, align 4
  %eq.i.i5016 = icmp eq i32 %1439, %offset.i.i21.i5015
  call void @llvm.assume(i1 %eq.i.i5016) #30
  %1441 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1442 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1433)
  %1443 = sext i32 %1439 to i64
  %1444 = getelementptr ptr, ptr %1433, i64 %1443
  %1445 = getelementptr i8, ptr %1444, i64 64
  %1446 = load ptr, ptr %1445, align 8
  %1447 = call ptr %1446({ ptr, ptr, ptr, i32 } %1440, ptr nonnull %2)
  %1448 = call i32 %1447({ ptr, ptr, ptr, i32 } %1440, { ptr, ptr, ptr, i32 } %1440, ptr nonnull %2)
  %1449 = add i32 %1448, -1
  %1450 = and i32 %1449, %1431
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %1451 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1452 = load ptr, ptr %299, align 8
  %1453 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1452, 0
  %1454 = load ptr, ptr %300, align 8
  %1455 = insertvalue { ptr, ptr, ptr, i32 } %1453, ptr %1454, 1
  %1456 = load ptr, ptr %381, align 8
  %1457 = insertvalue { ptr, ptr, ptr, i32 } %1455, ptr %1456, 2
  %1458 = load i32, ptr %301, align 4
  %1459 = insertvalue { ptr, ptr, ptr, i32 } %1457, i32 %1458, 3
  %hash_coef_ptr.i.i202.i4184 = getelementptr i8, ptr %1452, i64 8
  %tbl_size_ptr.i.i203.i4185 = getelementptr i8, ptr %1452, i64 16
  %offset_tbl_ptr.i.i204.i4186 = getelementptr i8, ptr %1452, i64 40
  %hash_coef.i.i205.i4187 = load i64, ptr %hash_coef_ptr.i.i202.i4184, align 4
  %tbl_size.i.i206.i4188 = load i64, ptr %tbl_size_ptr.i.i203.i4185, align 4
  %offset_tbl.i.i207.i4189 = load ptr, ptr %offset_tbl_ptr.i.i204.i4186, align 8
  %product.i.i.i208.i4190 = mul i64 %hash_coef.i.i205.i4187, -5261542750394134544
  %shifted.i.i.i209.i4191 = lshr i64 %product.i.i.i208.i4190, 32
  %xored.i.i.i210.i4192 = xor i64 %shifted.i.i.i209.i4191, %product.i.i.i208.i4190
  %hash.i.i.i211.i4193 = and i64 %xored.i.i.i210.i4192, %tbl_size.i.i206.i4188
  %offset_ptr.i.i212.i4194 = getelementptr i32, ptr %offset_tbl.i.i207.i4189, i64 %hash.i.i.i211.i4193
  %offset.i.i213.i4195 = load i32, ptr %offset_ptr.i.i212.i4194, align 4
  %eq.i216.i4196 = icmp eq i32 %1458, %offset.i.i213.i4195
  call void @llvm.assume(i1 %eq.i216.i4196) #30
  store ptr @_parameterization_Ptri32, ptr %43, align 8
  %1460 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %43)
  %1461 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1452)
  %1462 = sext i32 %1458 to i64
  %1463 = getelementptr ptr, ptr %1452, i64 %1462
  %1464 = getelementptr i8, ptr %1463, i64 120
  %1465 = load ptr, ptr %1464, align 8
  store ptr @i32_typ, ptr %44, align 8
  %1466 = call ptr %1465({ ptr, ptr, ptr, i32 } %1459, ptr nonnull %44)
  %1467 = call { ptr, i160 } %1466({ ptr, ptr, ptr, i32 } %1459, { ptr, ptr, ptr, i32 } %1459, ptr nonnull %43, i32 %1450)
  %.fca.0.extract87.i4197 = extractvalue { ptr, i160 } %1467, 0
  %1468 = insertvalue { ptr, i160 } undef, ptr %1334, 0
  %.sroa.3.0.insert.ext.i4198 = zext i32 %1335 to i160
  %.sroa.3.0.insert.shift.i4199 = shl nuw i160 %.sroa.3.0.insert.ext.i4198, 128
  %.sroa.2.0.insert.ext.i4200 = zext i64 %1339 to i160
  %.sroa.2.0.insert.shift.i4201 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i4200, 64
  %.sroa.2.0.insert.insert.i4202 = or disjoint i160 %.sroa.2.0.insert.shift.i4201, %.sroa.3.0.insert.shift.i4199
  %.sroa.0.0.insert.ext.i4203 = zext i64 %1337 to i160
  %.sroa.0.0.insert.insert.i4204 = or disjoint i160 %.sroa.2.0.insert.insert.i4202, %.sroa.0.0.insert.ext.i4203
  %1469 = insertvalue { ptr, i160 } %1468, i160 %.sroa.0.0.insert.insert.i4204, 1
  %1470 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1471 = load ptr, ptr %299, align 8
  %1472 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1471, 0
  %1473 = load ptr, ptr %300, align 8
  %1474 = insertvalue { ptr, ptr, ptr, i32 } %1472, ptr %1473, 1
  %1475 = load ptr, ptr %381, align 8
  %1476 = insertvalue { ptr, ptr, ptr, i32 } %1474, ptr %1475, 2
  %1477 = load i32, ptr %301, align 4
  %1478 = insertvalue { ptr, ptr, ptr, i32 } %1476, i32 %1477, 3
  %hash_coef_ptr.i.i218.i4209 = getelementptr i8, ptr %1471, i64 8
  %tbl_size_ptr.i.i219.i4210 = getelementptr i8, ptr %1471, i64 16
  %offset_tbl_ptr.i.i220.i4211 = getelementptr i8, ptr %1471, i64 40
  %hash_coef.i.i221.i4212 = load i64, ptr %hash_coef_ptr.i.i218.i4209, align 4
  %tbl_size.i.i222.i4213 = load i64, ptr %tbl_size_ptr.i.i219.i4210, align 4
  %offset_tbl.i.i223.i4214 = load ptr, ptr %offset_tbl_ptr.i.i220.i4211, align 8
  %product.i.i.i224.i4215 = mul i64 %hash_coef.i.i221.i4212, -5261542750394134544
  %shifted.i.i.i225.i4216 = lshr i64 %product.i.i.i224.i4215, 32
  %xored.i.i.i226.i4217 = xor i64 %shifted.i.i.i225.i4216, %product.i.i.i224.i4215
  %hash.i.i.i227.i4218 = and i64 %xored.i.i.i226.i4217, %tbl_size.i.i222.i4213
  %offset_ptr.i.i228.i4219 = getelementptr i32, ptr %offset_tbl.i.i223.i4214, i64 %hash.i.i.i227.i4218
  %offset.i.i229.i4220 = load i32, ptr %offset_ptr.i.i228.i4219, align 4
  %eq.i232.i4221 = icmp eq i32 %1477, %offset.i.i229.i4220
  call void @llvm.assume(i1 %eq.i232.i4221) #30
  %1479 = load ptr, ptr %result.i, align 8
  %1480 = load ptr, ptr %269, align 8
  %result.i233.i4222 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1481 = getelementptr i8, ptr %result.i233.i4222, i64 16
  store ptr %1480, ptr %1481, align 8
  %1482 = getelementptr i8, ptr %result.i233.i4222, i64 8
  store ptr %1479, ptr %1482, align 8
  %1483 = getelementptr i8, ptr %result.i233.i4222, i64 24
  store ptr null, ptr %1483, align 8
  %1484 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i233.i4222)
  store ptr @Entry, ptr %result.i233.i4222, align 8
  store ptr @_parameterization_Ptri32, ptr %45, align 8
  store ptr %result.i233.i4222, ptr %467, align 8
  %1485 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %45)
  %1486 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1471)
  %1487 = sext i32 %1477 to i64
  %1488 = getelementptr ptr, ptr %1471, i64 %1487
  %1489 = getelementptr i8, ptr %1488, i64 128
  %1490 = load ptr, ptr %1489, align 8
  store ptr @i32_typ, ptr %46, align 8
  store ptr %1334, ptr %468, align 8
  %1491 = call ptr %1490({ ptr, ptr, ptr, i32 } %1478, ptr nonnull %46)
  call void %1491({ ptr, ptr, ptr, i32 } %1478, { ptr, ptr, ptr, i32 } %1478, ptr nonnull %45, i32 %1450, { ptr, i160 } %1469)
  %1492 = icmp ne ptr %.fca.0.extract87.i4197, @nil_typ
  %1493 = icmp ne ptr %.fca.0.extract87.i4197, null
  %.not138.i4223 = and i1 %1492, %1493
  br i1 %.not138.i4223, label %.cont.cont.i4230, label %1502

.cont.cont.i4230:                                 ; preds = %1413, %1350
  %.sink4662 = phi { ptr, i160 } [ %1386, %1350 ], [ %1467, %1413 ]
  %1494 = phi i32 [ 2, %1350 ], [ 1, %1413 ]
  %vptr.i248.sroa.speculated.i4233 = phi ptr [ %.fca.0.extract112.i4265, %1350 ], [ %.fca.0.extract87.i4197, %1413 ]
  %.fca.1.extract89.i4226 = extractvalue { ptr, i160 } %.sink4662, 1
  %.sroa.3407.sroa.4.0.extract.shift.i4227 = lshr i160 %.fca.1.extract89.i4226, 64
  %1495 = trunc i160 %.sroa.3407.sroa.4.0.extract.shift.i4227 to i64
  %1496 = insertelement <2 x i64> poison, i64 %1495, i64 0
  %1497 = trunc i160 %.fca.1.extract89.i4226 to i64
  %1498 = insertelement <2 x i64> %1496, i64 %1497, i64 1
  %hash_coef_ptr.i.i249.i4236 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i4233, i64 8
  %tbl_size_ptr.i.i250.i4237 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i4233, i64 16
  %offset_tbl_ptr.i.i251.i4238 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i4233, i64 40
  %hash_coef.i.i252.i4239 = load i64, ptr %hash_coef_ptr.i.i249.i4236, align 4
  %tbl_size.i.i253.i4240 = load i64, ptr %tbl_size_ptr.i.i250.i4237, align 4
  %offset_tbl.i.i254.i4241 = load ptr, ptr %offset_tbl_ptr.i.i251.i4238, align 8
  %product.i.i.i255.i4242 = mul i64 %hash_coef.i.i252.i4239, 4015701072841558310
  %shifted.i.i.i256.i4243 = lshr i64 %product.i.i.i255.i4242, 32
  %xored.i.i.i257.i4244 = xor i64 %shifted.i.i.i256.i4243, %product.i.i.i255.i4242
  %hash.i.i.i258.i4245 = and i64 %xored.i.i.i257.i4244, %tbl_size.i.i253.i4240
  %offset_ptr.i.i259.i4246 = getelementptr i32, ptr %offset_tbl.i.i254.i4241, i64 %hash.i.i.i258.i4245
  %offset.i.i260.i4247 = load i32, ptr %offset_ptr.i.i259.i4246, align 4
  %1499 = add nuw nsw i32 %.reg2mem193.0677.i4179, 1
  %1500 = load i32, ptr %302, align 4
  %1501 = icmp slt i32 %1499, %1500
  br i1 %1501, label %1333, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4297

1502:                                             ; preds = %1413, %1350
  %1503 = phi ptr [ %47, %1413 ], [ %39, %1350 ]
  %1504 = phi ptr [ %48, %1413 ], [ %40, %1350 ]
  %1505 = phi ptr [ %49, %1413 ], [ %41, %1350 ]
  %1506 = phi ptr [ %.sroa.0.i4144, %1413 ], [ %.sroa.0680.i4142, %1350 ]
  %1507 = phi ptr [ %50, %1413 ], [ %42, %1350 ]
  %1508 = load i32, ptr %382, align 4
  store i32 %1508, ptr %1503, align 4
  store i32 1, ptr %1504, align 4
  %1509 = add i32 %1508, 1
  store i32 %1509, ptr %1505, align 4
  %1510 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  store i32 %1509, ptr %382, align 4
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %1507, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %1506, align 8
  br label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4297

HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4297: ; preds = %.cont.cont.i4230, %1322, %1502
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %35)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %36)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %37)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %38)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %39)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %40)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %41)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i4142)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %42)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %43)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %44)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %45)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %46)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %47)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %48)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %49)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i4144)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %50)
  br label %._crit_edge1.i3001

._crit_edge1.i3001:                               ; preds = %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4297, %1314
  %1511 = add nuw nsw i32 %.reg2mem13.079.i2998, 1
  %1512 = icmp slt i32 %1511, %1070
  br i1 %1512, label %1314, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3019

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3019.critedge: ; preds = %1046
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %141)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %142)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %139)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %140)
  br label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3019

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3019: ; preds = %._crit_edge1.i3001, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3019.critedge
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %139)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %140)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %192)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %193)
  br label %._crit_edge2.i768

._crit_edge2.i768:                                ; preds = %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3019, %.critedge158.i749
  %1513 = load ptr, ptr %result.i, align 8
  %1514 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1515 = load ptr, ptr %269, align 8
  %1516 = load ptr, ptr %1513, align 8
  %1517 = getelementptr i8, ptr %1516, i64 48
  %1518 = load ptr, ptr %1517, align 8
  %1519 = call { i64, i64 } %1518(ptr nonnull %1513)
  %1520 = extractvalue { i64, i64 } %1519, 0
  %1521 = extractvalue { i64, i64 } %1519, 1
  %1522 = urem i64 20, %1521
  %1523 = icmp eq i64 %1522, 0
  %1524 = sub i64 %1521, %1522
  %1525 = select i1 %1523, i64 0, i64 %1524
  %1526 = add i64 %1520, 20
  %1527 = add i64 %1526, %1525
  %1528 = load ptr, ptr %1515, align 8
  %1529 = getelementptr i8, ptr %1528, i64 48
  %1530 = load ptr, ptr %1529, align 8
  %1531 = call { i64, i64 } %1530(ptr nonnull %1515)
  %1532 = extractvalue { i64, i64 } %1531, 0
  %1533 = extractvalue { i64, i64 } %1531, 1
  %1534 = call i64 @llvm.umax.i64(i64 %1521, i64 %1533)
  %1535 = call i64 @llvm.umax.i64(i64 %1534, i64 8)
  %1536 = urem i64 %1527, %1533
  %1537 = icmp eq i64 %1536, 0
  %1538 = sub i64 %1533, %1536
  %1539 = select i1 %1537, i64 0, i64 %1538
  %1540 = add i64 %1532, %1527
  %1541 = add i64 %1540, %1539
  %1542 = urem i64 %1541, %1535
  %1543 = icmp eq i64 %1542, 0
  %1544 = sub i64 %1535, %1542
  %1545 = select i1 %1543, i64 0, i64 %1544
  %1546 = add i64 %1545, %1541
  %result.i296.i769 = call noalias ptr @bump_malloc_inner(i64 noundef %1546, ptr nonnull @current_ptr) #29
  store ptr %1513, ptr %result.i296.i769, align 8
  %1547 = getelementptr i8, ptr %result.i296.i769, i64 8
  store ptr %1515, ptr %1547, align 8
  %1548 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i296.i769)
  store ptr @Entry, ptr %245, align 8
  store ptr %result.i296.i769, ptr %367, align 8
  store i32 9, ptr %368, align 8
  %1549 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %245)
  %1550 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1551 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %1552 = load ptr, ptr %1513, align 8
  %1553 = getelementptr i8, ptr %1552, i64 48
  %1554 = load ptr, ptr %1553, align 8
  %1555 = call { i64, i64 } %1554(ptr nonnull %1513)
  %1556 = extractvalue { i64, i64 } %1555, 1
  %1557 = urem i64 20, %1556
  %1558 = icmp eq i64 %1557, 0
  %reass.sub5165 = sub i64 %1556, %1557
  %1559 = add i64 %reass.sub5165, 20
  %1560 = select i1 %1558, i64 20, i64 %1559
  %1561 = getelementptr i8, ptr %result.i296.i769, i64 %1560
  %1562 = load ptr, ptr %result.i296.i769, align 8
  %1563 = load ptr, ptr %1562, align 8
  %1564 = getelementptr i8, ptr %1563, i64 64
  %1565 = load ptr, ptr %1564, align 8
  call void %1565({ ptr, i160 } %485, ptr nonnull %1562, ptr %1561)
  %1566 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %1567 = load ptr, ptr %result.i296.i769, align 8
  %1568 = load ptr, ptr %1567, align 8
  %1569 = getelementptr i8, ptr %1568, i64 48
  %1570 = load ptr, ptr %1569, align 8
  %1571 = call { i64, i64 } %1570(ptr nonnull %1567)
  %1572 = extractvalue { i64, i64 } %1571, 0
  %1573 = extractvalue { i64, i64 } %1571, 1
  %1574 = urem i64 20, %1573
  %1575 = icmp eq i64 %1574, 0
  %1576 = sub i64 %1573, %1574
  %1577 = select i1 %1575, i64 0, i64 %1576
  %1578 = add i64 %1572, 20
  %1579 = add i64 %1578, %1577
  %1580 = load ptr, ptr %1547, align 8
  %1581 = load ptr, ptr %1580, align 8
  %1582 = getelementptr i8, ptr %1581, i64 48
  %1583 = load ptr, ptr %1582, align 8
  %1584 = call { i64, i64 } %1583(ptr nonnull %1580)
  %1585 = extractvalue { i64, i64 } %1584, 1
  %1586 = urem i64 %1579, %1585
  %1587 = icmp eq i64 %1586, 0
  %1588 = sub i64 %1585, %1586
  %1589 = select i1 %1587, i64 0, i64 %1588
  %1590 = getelementptr i8, ptr %result.i296.i769, i64 %1579
  %1591 = getelementptr i8, ptr %1590, i64 %1589
  %1592 = load ptr, ptr %1547, align 8
  %1593 = load ptr, ptr %1592, align 8
  %1594 = getelementptr i8, ptr %1593, i64 64
  %1595 = load ptr, ptr %1594, align 8
  call void %1595({ ptr, i160 } %652, ptr nonnull %1592, ptr %1591)
  %1596 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %1597 = getelementptr i8, ptr %result.i296.i769, i64 16
  store i32 %655, ptr %1597, align 4
  %1598 = load ptr, ptr %369, align 8
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %175)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %176)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %177)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %178)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %179)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %180)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %181)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0680.i1845)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %182)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %183)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %184)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %185)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %186)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %187)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %188)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %189)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i1846)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %190)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %191)
  store ptr @Entry, ptr %191, align 8
  store ptr %result.i296.i769, ptr %418, align 8
  store ptr %1598, ptr %419, align 8
  store i32 9, ptr %420, align 8
  %1599 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %191)
  %1600 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1601 = load i32, ptr %302, align 4
  %1602 = icmp sgt i32 %1601, 0
  br i1 %1602, label %.lr.ph.i1875, label %._crit_edge3.i774

.lr.ph.i1875:                                     ; preds = %._crit_edge2.i768
  %1603 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1604 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  br label %1605

1605:                                             ; preds = %.cont.cont.i1926, %.lr.ph.i1875
  %offset.i.i260.i19412493 = phi i32 [ 9, %.lr.ph.i1875 ], [ %offset.i.i260.i1941, %.cont.cont.i1926 ]
  %.sroa.speculated346.i19292491 = phi ptr [ %1598, %.lr.ph.i1875 ], [ %.sroa.speculated346.i1929, %.cont.cont.i1926 ]
  %.sroa.speculated352.i19282489 = phi ptr [ %result.i296.i769, %.lr.ph.i1875 ], [ %.sroa.speculated352.i1928, %.cont.cont.i1926 ]
  %.reg2mem195.0678.i1876 = phi i32 [ 1, %.lr.ph.i1875 ], [ %1761, %.cont.cont.i1926 ]
  %.reg2mem193.0677.i1877 = phi i32 [ 0, %.lr.ph.i1875 ], [ %1762, %.cont.cont.i1926 ]
  %1606 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Entry, ptr undef, ptr undef, i32 undef }, ptr %.sroa.speculated352.i19282489, 1
  %1607 = insertvalue { ptr, ptr, ptr, i32 } %1606, ptr %.sroa.speculated346.i19292491, 2
  %1608 = insertvalue { ptr, ptr, ptr, i32 } %1607, i32 %offset.i.i260.i19412493, 3
  %1609 = sext i32 %offset.i.i260.i19412493 to i64
  %gep2488 = getelementptr ptr, ptr getelementptr inbounds (i8, ptr @Entry, i64 64), i64 %1609
  %1610 = load ptr, ptr %gep2488, align 8
  %1611 = call ptr %1610({ ptr, ptr, ptr, i32 } %1608, ptr nonnull %2)
  %1612 = call i32 %1611({ ptr, ptr, ptr, i32 } %1608, { ptr, ptr, ptr, i32 } %1608, ptr nonnull %2)
  %1613 = icmp eq i32 %.reg2mem195.0678.i1876, 1
  %1614 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br i1 %1613, label %1615, label %1679

1615:                                             ; preds = %1605
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %1616 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1617 = load ptr, ptr %286, align 8
  %1618 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1617, 0
  %1619 = load ptr, ptr %287, align 8
  %1620 = insertvalue { ptr, ptr, ptr, i32 } %1618, ptr %1619, 1
  %1621 = load ptr, ptr %380, align 8
  %1622 = insertvalue { ptr, ptr, ptr, i32 } %1620, ptr %1621, 2
  %1623 = load i32, ptr %288, align 4
  %1624 = insertvalue { ptr, ptr, ptr, i32 } %1622, i32 %1623, 3
  %hash_coef_ptr.i.i10.i3035 = getelementptr i8, ptr %1617, i64 8
  %tbl_size_ptr.i.i11.i3036 = getelementptr i8, ptr %1617, i64 16
  %offset_tbl_ptr.i.i12.i3037 = getelementptr i8, ptr %1617, i64 40
  %hash_coef.i.i13.i3038 = load i64, ptr %hash_coef_ptr.i.i10.i3035, align 4
  %tbl_size.i.i14.i3039 = load i64, ptr %tbl_size_ptr.i.i11.i3036, align 4
  %offset_tbl.i.i15.i3040 = load ptr, ptr %offset_tbl_ptr.i.i12.i3037, align 8
  %product.i.i.i16.i3041 = mul i64 %hash_coef.i.i13.i3038, -5261542750394134544
  %shifted.i.i.i17.i3042 = lshr i64 %product.i.i.i16.i3041, 32
  %xored.i.i.i18.i3043 = xor i64 %shifted.i.i.i17.i3042, %product.i.i.i16.i3041
  %hash.i.i.i19.i3044 = and i64 %xored.i.i.i18.i3043, %tbl_size.i.i14.i3039
  %offset_ptr.i.i20.i3045 = getelementptr i32, ptr %offset_tbl.i.i15.i3040, i64 %hash.i.i.i19.i3044
  %offset.i.i21.i3046 = load i32, ptr %offset_ptr.i.i20.i3045, align 4
  %eq.i.i3047 = icmp eq i32 %1623, %offset.i.i21.i3046
  call void @llvm.assume(i1 %eq.i.i3047) #30
  %1625 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1626 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1617)
  %1627 = sext i32 %1623 to i64
  %1628 = getelementptr ptr, ptr %1617, i64 %1627
  %1629 = getelementptr i8, ptr %1628, i64 64
  %1630 = load ptr, ptr %1629, align 8
  %1631 = call ptr %1630({ ptr, ptr, ptr, i32 } %1624, ptr nonnull %2)
  %1632 = call i32 %1631({ ptr, ptr, ptr, i32 } %1624, { ptr, ptr, ptr, i32 } %1624, ptr nonnull %2)
  %1633 = add i32 %1632, -1
  %1634 = and i32 %1633, %1612
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %1635 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1636 = load ptr, ptr %286, align 8
  %1637 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1636, 0
  %1638 = load ptr, ptr %287, align 8
  %1639 = insertvalue { ptr, ptr, ptr, i32 } %1637, ptr %1638, 1
  %1640 = load ptr, ptr %380, align 8
  %1641 = insertvalue { ptr, ptr, ptr, i32 } %1639, ptr %1640, 2
  %1642 = load i32, ptr %288, align 4
  %1643 = insertvalue { ptr, ptr, ptr, i32 } %1641, i32 %1642, 3
  %hash_coef_ptr.i.i172.i1946 = getelementptr i8, ptr %1636, i64 8
  %tbl_size_ptr.i.i173.i1947 = getelementptr i8, ptr %1636, i64 16
  %offset_tbl_ptr.i.i174.i1948 = getelementptr i8, ptr %1636, i64 40
  %hash_coef.i.i175.i1949 = load i64, ptr %hash_coef_ptr.i.i172.i1946, align 4
  %tbl_size.i.i176.i1950 = load i64, ptr %tbl_size_ptr.i.i173.i1947, align 4
  %offset_tbl.i.i177.i1951 = load ptr, ptr %offset_tbl_ptr.i.i174.i1948, align 8
  %product.i.i.i178.i1952 = mul i64 %hash_coef.i.i175.i1949, -5261542750394134544
  %shifted.i.i.i179.i1953 = lshr i64 %product.i.i.i178.i1952, 32
  %xored.i.i.i180.i1954 = xor i64 %shifted.i.i.i179.i1953, %product.i.i.i178.i1952
  %hash.i.i.i181.i1955 = and i64 %xored.i.i.i180.i1954, %tbl_size.i.i176.i1950
  %offset_ptr.i.i182.i1956 = getelementptr i32, ptr %offset_tbl.i.i177.i1951, i64 %hash.i.i.i181.i1955
  %offset.i.i183.i1957 = load i32, ptr %offset_ptr.i.i182.i1956, align 4
  %eq.i.i1958 = icmp eq i32 %1642, %offset.i.i183.i1957
  call void @llvm.assume(i1 %eq.i.i1958) #30
  store ptr @_parameterization_Ptri32, ptr %175, align 8
  %1644 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %175)
  %1645 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1636)
  %1646 = sext i32 %1642 to i64
  %1647 = getelementptr ptr, ptr %1636, i64 %1646
  %1648 = getelementptr i8, ptr %1647, i64 120
  %1649 = load ptr, ptr %1648, align 8
  store ptr @i32_typ, ptr %176, align 8
  %1650 = call ptr %1649({ ptr, ptr, ptr, i32 } %1643, ptr nonnull %176)
  %1651 = call { ptr, i160 } %1650({ ptr, ptr, ptr, i32 } %1643, { ptr, ptr, ptr, i32 } %1643, ptr nonnull %175, i32 %1634)
  %.fca.0.extract112.i1959 = extractvalue { ptr, i160 } %1651, 0
  %1652 = ptrtoint ptr %.sroa.speculated352.i19282489 to i64
  %1653 = ptrtoint ptr %.sroa.speculated346.i19292491 to i64
  %.sroa.3111.0.insert.ext.i1960 = zext i32 %offset.i.i260.i19412493 to i160
  %.sroa.3111.0.insert.shift.i1961 = shl nuw i160 %.sroa.3111.0.insert.ext.i1960, 128
  %.sroa.2110.0.insert.ext.i1962 = zext i64 %1653 to i160
  %.sroa.2110.0.insert.shift.i1963 = shl nuw nsw i160 %.sroa.2110.0.insert.ext.i1962, 64
  %.sroa.2110.0.insert.insert.i1964 = or disjoint i160 %.sroa.2110.0.insert.shift.i1963, %.sroa.3111.0.insert.shift.i1961
  %.sroa.0109.0.insert.ext.i1965 = zext i64 %1652 to i160
  %.sroa.0109.0.insert.insert.i1966 = or disjoint i160 %.sroa.2110.0.insert.insert.i1964, %.sroa.0109.0.insert.ext.i1965
  %1654 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0109.0.insert.insert.i1966, 1
  %1655 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1656 = load ptr, ptr %286, align 8
  %1657 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1656, 0
  %1658 = load ptr, ptr %287, align 8
  %1659 = insertvalue { ptr, ptr, ptr, i32 } %1657, ptr %1658, 1
  %1660 = load ptr, ptr %380, align 8
  %1661 = insertvalue { ptr, ptr, ptr, i32 } %1659, ptr %1660, 2
  %1662 = load i32, ptr %288, align 4
  %1663 = insertvalue { ptr, ptr, ptr, i32 } %1661, i32 %1662, 3
  %hash_coef_ptr.i.i186.i1971 = getelementptr i8, ptr %1656, i64 8
  %tbl_size_ptr.i.i187.i1972 = getelementptr i8, ptr %1656, i64 16
  %offset_tbl_ptr.i.i188.i1973 = getelementptr i8, ptr %1656, i64 40
  %hash_coef.i.i189.i1974 = load i64, ptr %hash_coef_ptr.i.i186.i1971, align 4
  %tbl_size.i.i190.i1975 = load i64, ptr %tbl_size_ptr.i.i187.i1972, align 4
  %offset_tbl.i.i191.i1976 = load ptr, ptr %offset_tbl_ptr.i.i188.i1973, align 8
  %product.i.i.i192.i1977 = mul i64 %hash_coef.i.i189.i1974, -5261542750394134544
  %shifted.i.i.i193.i1978 = lshr i64 %product.i.i.i192.i1977, 32
  %xored.i.i.i194.i1979 = xor i64 %shifted.i.i.i193.i1978, %product.i.i.i192.i1977
  %hash.i.i.i195.i1980 = and i64 %xored.i.i.i194.i1979, %tbl_size.i.i190.i1975
  %offset_ptr.i.i196.i1981 = getelementptr i32, ptr %offset_tbl.i.i191.i1976, i64 %hash.i.i.i195.i1980
  %offset.i.i197.i1982 = load i32, ptr %offset_ptr.i.i196.i1981, align 4
  %eq.i200.i1983 = icmp eq i32 %1662, %offset.i.i197.i1982
  call void @llvm.assume(i1 %eq.i200.i1983) #30
  %1664 = load ptr, ptr %result.i, align 8
  %1665 = load ptr, ptr %269, align 8
  %result.i.i1984 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1666 = getelementptr i8, ptr %result.i.i1984, i64 16
  store ptr %1665, ptr %1666, align 8
  %1667 = getelementptr i8, ptr %result.i.i1984, i64 8
  store ptr %1664, ptr %1667, align 8
  %1668 = getelementptr i8, ptr %result.i.i1984, i64 24
  store ptr null, ptr %1668, align 8
  %1669 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i1984)
  store ptr @Entry, ptr %result.i.i1984, align 8
  store ptr @_parameterization_Ptri32, ptr %177, align 8
  store ptr %result.i.i1984, ptr %423, align 8
  %1670 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %177)
  %1671 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1656)
  %1672 = sext i32 %1662 to i64
  %1673 = getelementptr ptr, ptr %1656, i64 %1672
  %1674 = getelementptr i8, ptr %1673, i64 128
  %1675 = load ptr, ptr %1674, align 8
  store ptr @i32_typ, ptr %178, align 8
  store ptr @Entry, ptr %424, align 8
  %1676 = call ptr %1675({ ptr, ptr, ptr, i32 } %1663, ptr nonnull %178)
  call void %1676({ ptr, ptr, ptr, i32 } %1663, { ptr, ptr, ptr, i32 } %1663, ptr nonnull %177, i32 %1634, { ptr, i160 } %1654)
  %1677 = icmp ne ptr %.fca.0.extract112.i1959, @nil_typ
  %1678 = icmp ne ptr %.fca.0.extract112.i1959, null
  %.not140.i1985 = and i1 %1677, %1678
  br i1 %.not140.i1985, label %.cont.cont.i1926, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit.thread2470

1679:                                             ; preds = %1605
  %1680 = add i32 %1612, 2127912214
  %1681 = shl i32 %1612, 12
  %1682 = add i32 %1680, %1681
  %1683 = ashr i32 %1682, 19
  %1684 = xor i32 %1682, %1683
  %1685 = xor i32 %1684, -949894596
  %1686 = add i32 %1685, 374761393
  %1687 = shl i32 %1685, 5
  %1688 = add i32 %1686, %1687
  %1689 = add i32 %1688, -744332180
  %1690 = shl i32 %1688, 9
  %1691 = xor i32 %1689, %1690
  %1692 = add i32 %1691, -42973499
  %1693 = shl i32 %1691, 3
  %1694 = add i32 %1692, %1693
  %1695 = ashr i32 %1694, 16
  %1696 = xor i32 %1694, %1695
  %1697 = xor i32 %1696, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %1698 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1699 = load ptr, ptr %299, align 8
  %1700 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1699, 0
  %1701 = load ptr, ptr %300, align 8
  %1702 = insertvalue { ptr, ptr, ptr, i32 } %1700, ptr %1701, 1
  %1703 = load ptr, ptr %381, align 8
  %1704 = insertvalue { ptr, ptr, ptr, i32 } %1702, ptr %1703, 2
  %1705 = load i32, ptr %301, align 4
  %1706 = insertvalue { ptr, ptr, ptr, i32 } %1704, i32 %1705, 3
  %hash_coef_ptr.i.i10.i3065 = getelementptr i8, ptr %1699, i64 8
  %tbl_size_ptr.i.i11.i3066 = getelementptr i8, ptr %1699, i64 16
  %offset_tbl_ptr.i.i12.i3067 = getelementptr i8, ptr %1699, i64 40
  %hash_coef.i.i13.i3068 = load i64, ptr %hash_coef_ptr.i.i10.i3065, align 4
  %tbl_size.i.i14.i3069 = load i64, ptr %tbl_size_ptr.i.i11.i3066, align 4
  %offset_tbl.i.i15.i3070 = load ptr, ptr %offset_tbl_ptr.i.i12.i3067, align 8
  %product.i.i.i16.i3071 = mul i64 %hash_coef.i.i13.i3068, -5261542750394134544
  %shifted.i.i.i17.i3072 = lshr i64 %product.i.i.i16.i3071, 32
  %xored.i.i.i18.i3073 = xor i64 %shifted.i.i.i17.i3072, %product.i.i.i16.i3071
  %hash.i.i.i19.i3074 = and i64 %xored.i.i.i18.i3073, %tbl_size.i.i14.i3069
  %offset_ptr.i.i20.i3075 = getelementptr i32, ptr %offset_tbl.i.i15.i3070, i64 %hash.i.i.i19.i3074
  %offset.i.i21.i3076 = load i32, ptr %offset_ptr.i.i20.i3075, align 4
  %eq.i.i3077 = icmp eq i32 %1705, %offset.i.i21.i3076
  call void @llvm.assume(i1 %eq.i.i3077) #30
  %1707 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1708 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1699)
  %1709 = sext i32 %1705 to i64
  %1710 = getelementptr ptr, ptr %1699, i64 %1709
  %1711 = getelementptr i8, ptr %1710, i64 64
  %1712 = load ptr, ptr %1711, align 8
  %1713 = call ptr %1712({ ptr, ptr, ptr, i32 } %1706, ptr nonnull %2)
  %1714 = call i32 %1713({ ptr, ptr, ptr, i32 } %1706, { ptr, ptr, ptr, i32 } %1706, ptr nonnull %2)
  %1715 = add i32 %1714, -1
  %1716 = and i32 %1715, %1697
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %1717 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1718 = load ptr, ptr %299, align 8
  %1719 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1718, 0
  %1720 = load ptr, ptr %300, align 8
  %1721 = insertvalue { ptr, ptr, ptr, i32 } %1719, ptr %1720, 1
  %1722 = load ptr, ptr %381, align 8
  %1723 = insertvalue { ptr, ptr, ptr, i32 } %1721, ptr %1722, 2
  %1724 = load i32, ptr %301, align 4
  %1725 = insertvalue { ptr, ptr, ptr, i32 } %1723, i32 %1724, 3
  %hash_coef_ptr.i.i202.i1882 = getelementptr i8, ptr %1718, i64 8
  %tbl_size_ptr.i.i203.i1883 = getelementptr i8, ptr %1718, i64 16
  %offset_tbl_ptr.i.i204.i1884 = getelementptr i8, ptr %1718, i64 40
  %hash_coef.i.i205.i1885 = load i64, ptr %hash_coef_ptr.i.i202.i1882, align 4
  %tbl_size.i.i206.i1886 = load i64, ptr %tbl_size_ptr.i.i203.i1883, align 4
  %offset_tbl.i.i207.i1887 = load ptr, ptr %offset_tbl_ptr.i.i204.i1884, align 8
  %product.i.i.i208.i1888 = mul i64 %hash_coef.i.i205.i1885, -5261542750394134544
  %shifted.i.i.i209.i1889 = lshr i64 %product.i.i.i208.i1888, 32
  %xored.i.i.i210.i1890 = xor i64 %shifted.i.i.i209.i1889, %product.i.i.i208.i1888
  %hash.i.i.i211.i1891 = and i64 %xored.i.i.i210.i1890, %tbl_size.i.i206.i1886
  %offset_ptr.i.i212.i1892 = getelementptr i32, ptr %offset_tbl.i.i207.i1887, i64 %hash.i.i.i211.i1891
  %offset.i.i213.i1893 = load i32, ptr %offset_ptr.i.i212.i1892, align 4
  %eq.i216.i1894 = icmp eq i32 %1724, %offset.i.i213.i1893
  call void @llvm.assume(i1 %eq.i216.i1894) #30
  store ptr @_parameterization_Ptri32, ptr %183, align 8
  %1726 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %183)
  %1727 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1718)
  %1728 = sext i32 %1724 to i64
  %1729 = getelementptr ptr, ptr %1718, i64 %1728
  %1730 = getelementptr i8, ptr %1729, i64 120
  %1731 = load ptr, ptr %1730, align 8
  store ptr @i32_typ, ptr %184, align 8
  %1732 = call ptr %1731({ ptr, ptr, ptr, i32 } %1725, ptr nonnull %184)
  %1733 = call { ptr, i160 } %1732({ ptr, ptr, ptr, i32 } %1725, { ptr, ptr, ptr, i32 } %1725, ptr nonnull %183, i32 %1716)
  %.fca.0.extract87.i1895 = extractvalue { ptr, i160 } %1733, 0
  %1734 = ptrtoint ptr %.sroa.speculated352.i19282489 to i64
  %1735 = ptrtoint ptr %.sroa.speculated346.i19292491 to i64
  %.sroa.3.0.insert.ext.i1896 = zext i32 %offset.i.i260.i19412493 to i160
  %.sroa.3.0.insert.shift.i1897 = shl nuw i160 %.sroa.3.0.insert.ext.i1896, 128
  %.sroa.2.0.insert.ext.i1898 = zext i64 %1735 to i160
  %.sroa.2.0.insert.shift.i1899 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i1898, 64
  %.sroa.2.0.insert.insert.i1900 = or disjoint i160 %.sroa.2.0.insert.shift.i1899, %.sroa.3.0.insert.shift.i1897
  %.sroa.0.0.insert.ext.i1901 = zext i64 %1734 to i160
  %.sroa.0.0.insert.insert.i1902 = or disjoint i160 %.sroa.2.0.insert.insert.i1900, %.sroa.0.0.insert.ext.i1901
  %1736 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0.0.insert.insert.i1902, 1
  %1737 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1738 = load ptr, ptr %299, align 8
  %1739 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1738, 0
  %1740 = load ptr, ptr %300, align 8
  %1741 = insertvalue { ptr, ptr, ptr, i32 } %1739, ptr %1740, 1
  %1742 = load ptr, ptr %381, align 8
  %1743 = insertvalue { ptr, ptr, ptr, i32 } %1741, ptr %1742, 2
  %1744 = load i32, ptr %301, align 4
  %1745 = insertvalue { ptr, ptr, ptr, i32 } %1743, i32 %1744, 3
  %hash_coef_ptr.i.i218.i1907 = getelementptr i8, ptr %1738, i64 8
  %tbl_size_ptr.i.i219.i1908 = getelementptr i8, ptr %1738, i64 16
  %offset_tbl_ptr.i.i220.i1909 = getelementptr i8, ptr %1738, i64 40
  %hash_coef.i.i221.i1910 = load i64, ptr %hash_coef_ptr.i.i218.i1907, align 4
  %tbl_size.i.i222.i1911 = load i64, ptr %tbl_size_ptr.i.i219.i1908, align 4
  %offset_tbl.i.i223.i1912 = load ptr, ptr %offset_tbl_ptr.i.i220.i1909, align 8
  %product.i.i.i224.i1913 = mul i64 %hash_coef.i.i221.i1910, -5261542750394134544
  %shifted.i.i.i225.i1914 = lshr i64 %product.i.i.i224.i1913, 32
  %xored.i.i.i226.i1915 = xor i64 %shifted.i.i.i225.i1914, %product.i.i.i224.i1913
  %hash.i.i.i227.i1916 = and i64 %xored.i.i.i226.i1915, %tbl_size.i.i222.i1911
  %offset_ptr.i.i228.i1917 = getelementptr i32, ptr %offset_tbl.i.i223.i1912, i64 %hash.i.i.i227.i1916
  %offset.i.i229.i1918 = load i32, ptr %offset_ptr.i.i228.i1917, align 4
  %eq.i232.i1919 = icmp eq i32 %1744, %offset.i.i229.i1918
  call void @llvm.assume(i1 %eq.i232.i1919) #30
  %1746 = load ptr, ptr %result.i, align 8
  %1747 = load ptr, ptr %269, align 8
  %result.i233.i1920 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1748 = getelementptr i8, ptr %result.i233.i1920, i64 16
  store ptr %1747, ptr %1748, align 8
  %1749 = getelementptr i8, ptr %result.i233.i1920, i64 8
  store ptr %1746, ptr %1749, align 8
  %1750 = getelementptr i8, ptr %result.i233.i1920, i64 24
  store ptr null, ptr %1750, align 8
  %1751 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i233.i1920)
  store ptr @Entry, ptr %result.i233.i1920, align 8
  store ptr @_parameterization_Ptri32, ptr %185, align 8
  store ptr %result.i233.i1920, ptr %421, align 8
  %1752 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %185)
  %1753 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1738)
  %1754 = sext i32 %1744 to i64
  %1755 = getelementptr ptr, ptr %1738, i64 %1754
  %1756 = getelementptr i8, ptr %1755, i64 128
  %1757 = load ptr, ptr %1756, align 8
  store ptr @i32_typ, ptr %186, align 8
  store ptr @Entry, ptr %422, align 8
  %1758 = call ptr %1757({ ptr, ptr, ptr, i32 } %1745, ptr nonnull %186)
  call void %1758({ ptr, ptr, ptr, i32 } %1745, { ptr, ptr, ptr, i32 } %1745, ptr nonnull %185, i32 %1716, { ptr, i160 } %1736)
  %1759 = icmp ne ptr %.fca.0.extract87.i1895, @nil_typ
  %1760 = icmp ne ptr %.fca.0.extract87.i1895, null
  %.not138.i1921 = and i1 %1759, %1760
  br i1 %.not138.i1921, label %.cont.cont.i1926, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit.thread2470

.cont.cont.i1926:                                 ; preds = %1679, %1615
  %.sink2514 = phi { ptr, i160 } [ %1651, %1615 ], [ %1733, %1679 ]
  %1761 = phi i32 [ 2, %1615 ], [ 1, %1679 ]
  %vptr.i248.sroa.speculated.i1927 = phi ptr [ %.fca.0.extract112.i1959, %1615 ], [ %.fca.0.extract87.i1895, %1679 ]
  %.fca.1.extract89.i1922 = extractvalue { ptr, i160 } %.sink2514, 1
  %.sroa.3407.sroa.4.0.extract.shift.i1923 = lshr i160 %.fca.1.extract89.i1922, 64
  %.sroa.3407.sroa.4.0.extract.trunc.i1924 = trunc i160 %.sroa.3407.sroa.4.0.extract.shift.i1923 to i64
  %.sroa.3407.sroa.0.0.extract.trunc.i1925 = trunc i160 %.fca.1.extract89.i1922 to i64
  %.sroa.speculated352.i1928 = inttoptr i64 %.sroa.3407.sroa.0.0.extract.trunc.i1925 to ptr
  %.sroa.speculated346.i1929 = inttoptr i64 %.sroa.3407.sroa.4.0.extract.trunc.i1924 to ptr
  %hash_coef_ptr.i.i249.i1930 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i1927, i64 8
  %tbl_size_ptr.i.i250.i1931 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i1927, i64 16
  %offset_tbl_ptr.i.i251.i1932 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i1927, i64 40
  %hash_coef.i.i252.i1933 = load i64, ptr %hash_coef_ptr.i.i249.i1930, align 4
  %tbl_size.i.i253.i1934 = load i64, ptr %tbl_size_ptr.i.i250.i1931, align 4
  %offset_tbl.i.i254.i1935 = load ptr, ptr %offset_tbl_ptr.i.i251.i1932, align 8
  %product.i.i.i255.i1936 = mul i64 %hash_coef.i.i252.i1933, 4015701072841558310
  %shifted.i.i.i256.i1937 = lshr i64 %product.i.i.i255.i1936, 32
  %xored.i.i.i257.i1938 = xor i64 %shifted.i.i.i256.i1937, %product.i.i.i255.i1936
  %hash.i.i.i258.i1939 = and i64 %xored.i.i.i257.i1938, %tbl_size.i.i253.i1934
  %offset_ptr.i.i259.i1940 = getelementptr i32, ptr %offset_tbl.i.i254.i1935, i64 %hash.i.i.i258.i1939
  %offset.i.i260.i1941 = load i32, ptr %offset_ptr.i.i259.i1940, align 4
  store ptr %vptr.i248.sroa.speculated.i1927, ptr %191, align 8
  store ptr %.sroa.speculated352.i1928, ptr %418, align 8
  store ptr %.sroa.speculated346.i1929, ptr %419, align 8
  store i32 %offset.i.i260.i1941, ptr %420, align 8
  %1762 = add nuw nsw i32 %.reg2mem193.0677.i1877, 1
  %1763 = load i32, ptr %302, align 4
  %1764 = icmp slt i32 %1762, %1763
  br i1 %1764, label %1605, label %._crit_edge3.i774

HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit.thread2470: ; preds = %1615, %1679
  %1765 = phi ptr [ %187, %1679 ], [ %179, %1615 ]
  %1766 = phi ptr [ %188, %1679 ], [ %180, %1615 ]
  %1767 = phi ptr [ %189, %1679 ], [ %181, %1615 ]
  %1768 = phi ptr [ %.sroa.0.i1846, %1679 ], [ %.sroa.0680.i1845, %1615 ]
  %1769 = phi ptr [ %190, %1679 ], [ %182, %1615 ]
  %1770 = load i32, ptr %382, align 4
  store i32 %1770, ptr %1765, align 4
  store i32 1, ptr %1766, align 4
  %1771 = add i32 %1770, 1
  store i32 %1771, ptr %1767, align 4
  %1772 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  store i32 %1771, ptr %382, align 4
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %1769, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %1768, align 8
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %175)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %176)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %177)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %178)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %179)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %180)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %181)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i1845)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %182)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %183)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %184)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %185)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %186)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %187)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %188)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %189)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i1846)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %190)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %191)
  br label %HashMap_insert_keyK_valueV.exit865

._crit_edge3.i774:                                ; preds = %.cont.cont.i1926, %._crit_edge2.i768
  %1773 = load i160, ptr %418, align 8
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %175)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %176)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %177)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %178)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %179)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %180)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %181)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i1845)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %182)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %183)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %184)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %185)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %186)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %187)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %188)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %189)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i1846)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %190)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %191)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %173)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %174)
  %1774 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1775 = load ptr, ptr %286, align 8
  %1776 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1775, 0
  %1777 = load ptr, ptr %287, align 8
  %1778 = insertvalue { ptr, ptr, ptr, i32 } %1776, ptr %1777, 1
  %1779 = load ptr, ptr %380, align 8
  %1780 = insertvalue { ptr, ptr, ptr, i32 } %1778, ptr %1779, 2
  %1781 = load i32, ptr %288, align 4
  %1782 = insertvalue { ptr, ptr, ptr, i32 } %1780, i32 %1781, 3
  %hash_coef_ptr.i.i18.i2006 = getelementptr i8, ptr %1775, i64 8
  %tbl_size_ptr.i.i19.i2007 = getelementptr i8, ptr %1775, i64 16
  %offset_tbl_ptr.i.i20.i2008 = getelementptr i8, ptr %1775, i64 40
  %hash_coef.i.i21.i2009 = load i64, ptr %hash_coef_ptr.i.i18.i2006, align 4
  %tbl_size.i.i22.i2010 = load i64, ptr %tbl_size_ptr.i.i19.i2007, align 4
  %offset_tbl.i.i23.i2011 = load ptr, ptr %offset_tbl_ptr.i.i20.i2008, align 8
  %product.i.i.i24.i2012 = mul i64 %hash_coef.i.i21.i2009, -5261542750394134544
  %shifted.i.i.i25.i2013 = lshr i64 %product.i.i.i24.i2012, 32
  %xored.i.i.i26.i2014 = xor i64 %shifted.i.i.i25.i2013, %product.i.i.i24.i2012
  %hash.i.i.i27.i2015 = and i64 %xored.i.i.i26.i2014, %tbl_size.i.i22.i2010
  %offset_ptr.i.i28.i2016 = getelementptr i32, ptr %offset_tbl.i.i23.i2011, i64 %hash.i.i.i27.i2015
  %offset.i.i29.i2017 = load i32, ptr %offset_ptr.i.i28.i2016, align 4
  %eq.i.i2018 = icmp eq i32 %1781, %offset.i.i29.i2017
  call void @llvm.assume(i1 %eq.i.i2018) #30
  %1783 = load ptr, ptr %299, align 8
  %1784 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1783, 0
  %1785 = load ptr, ptr %300, align 8
  %1786 = insertvalue { ptr, ptr, ptr, i32 } %1784, ptr %1785, 1
  %1787 = load ptr, ptr %381, align 8
  %1788 = insertvalue { ptr, ptr, ptr, i32 } %1786, ptr %1787, 2
  %1789 = load i32, ptr %301, align 4
  %hash_coef_ptr.i.i46.i2023 = getelementptr i8, ptr %1783, i64 8
  %tbl_size_ptr.i.i47.i2024 = getelementptr i8, ptr %1783, i64 16
  %offset_tbl_ptr.i.i48.i2025 = getelementptr i8, ptr %1783, i64 40
  %hash_coef.i.i49.i2026 = load i64, ptr %hash_coef_ptr.i.i46.i2023, align 4
  %tbl_size.i.i50.i2027 = load i64, ptr %tbl_size_ptr.i.i47.i2024, align 4
  %offset_tbl.i.i51.i2028 = load ptr, ptr %offset_tbl_ptr.i.i48.i2025, align 8
  %product.i.i.i52.i2029 = mul i64 %hash_coef.i.i49.i2026, -5261542750394134544
  %shifted.i.i.i53.i2030 = lshr i64 %product.i.i.i52.i2029, 32
  %xored.i.i.i54.i2031 = xor i64 %shifted.i.i.i53.i2030, %product.i.i.i52.i2029
  %hash.i.i.i55.i2032 = and i64 %xored.i.i.i54.i2031, %tbl_size.i.i50.i2027
  %offset_ptr.i.i56.i2033 = getelementptr i32, ptr %offset_tbl.i.i51.i2028, i64 %hash.i.i.i55.i2032
  %offset.i.i57.i2034 = load i32, ptr %offset_ptr.i.i56.i2033, align 4
  %eq.i60.i2035 = icmp eq i32 %1789, %offset.i.i57.i2034
  call void @llvm.assume(i1 %eq.i60.i2035) #30
  %1790 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1791 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1775)
  %1792 = sext i32 %1781 to i64
  %1793 = getelementptr ptr, ptr %1775, i64 %1792
  %1794 = getelementptr i8, ptr %1793, i64 64
  %1795 = load ptr, ptr %1794, align 8
  %1796 = call ptr %1795({ ptr, ptr, ptr, i32 } %1782, ptr nonnull %2)
  %1797 = call i32 %1796({ ptr, ptr, ptr, i32 } %1782, { ptr, ptr, ptr, i32 } %1782, ptr nonnull %2)
  %1798 = shl i32 %1797, 1
  %1799 = call i32 @llvm.smax.i32(i32 %1798, i32 16)
  %1800 = load ptr, ptr %result.i, align 8
  %1801 = load ptr, ptr %269, align 8
  %result.i.i2036 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1802 = getelementptr i8, ptr %result.i.i2036, i64 16
  store ptr @_parameterization_Nil, ptr %1802, align 8
  %result.i75.i2037 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1803 = getelementptr i8, ptr %result.i75.i2037, i64 16
  store ptr %1801, ptr %1803, align 8
  %1804 = getelementptr i8, ptr %result.i75.i2037, i64 8
  store ptr %1800, ptr %1804, align 8
  %1805 = getelementptr i8, ptr %result.i75.i2037, i64 24
  store ptr null, ptr %1805, align 8
  %1806 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i75.i2037)
  store ptr @Entry, ptr %result.i75.i2037, align 8
  %1807 = getelementptr i8, ptr %result.i.i2036, i64 8
  store ptr %result.i75.i2037, ptr %1807, align 8
  %1808 = getelementptr i8, ptr %result.i.i2036, i64 24
  store ptr null, ptr %1808, align 8
  %1809 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i2036)
  store ptr @union_typ, ptr %result.i.i2036, align 8
  %result.i76.i2038 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i2036, ptr %result.i76.i2038, align 8
  %1810 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i76.i2038)
  store ptr @Array, ptr %173, align 8
  store ptr %result.i76.i2038, ptr %425, align 8
  store i32 9, ptr %426, align 8
  %1811 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %173)
  %1812 = getelementptr i8, ptr %result.i76.i2038, i64 16
  store i32 %1799, ptr %1812, align 4
  %1813 = getelementptr i8, ptr %result.i76.i2038, i64 20
  store i32 %1799, ptr %1813, align 4
  %1814 = zext nneg i32 %1799 to i64
  %1815 = shl nuw nsw i64 %1814, 5
  %result.i.i.i2039 = call noalias ptr @bump_malloc_inner(i64 noundef %1815, ptr nonnull @current_ptr) #29
  %1816 = getelementptr i8, ptr %result.i76.i2038, i64 8
  store ptr %result.i.i.i2039, ptr %1816, align 8
  %1817 = load ptr, ptr %427, align 8
  store ptr @Array, ptr %286, align 8
  store ptr %result.i76.i2038, ptr %287, align 8
  store ptr %1817, ptr %380, align 8
  store i32 9, ptr %288, align 4
  %result.i91.i2052 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1818 = getelementptr i8, ptr %result.i91.i2052, i64 16
  store ptr @_parameterization_Nil, ptr %1818, align 8
  %result.i92.i2053 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1819 = getelementptr i8, ptr %result.i92.i2053, i64 16
  store ptr %1801, ptr %1819, align 8
  %1820 = getelementptr i8, ptr %result.i92.i2053, i64 8
  store ptr %1800, ptr %1820, align 8
  %1821 = getelementptr i8, ptr %result.i92.i2053, i64 24
  store ptr null, ptr %1821, align 8
  %1822 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i92.i2053)
  store ptr @Entry, ptr %result.i92.i2053, align 8
  %1823 = getelementptr i8, ptr %result.i91.i2052, i64 8
  store ptr %result.i92.i2053, ptr %1823, align 8
  %1824 = getelementptr i8, ptr %result.i91.i2052, i64 24
  store ptr null, ptr %1824, align 8
  %1825 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i91.i2052)
  store ptr @union_typ, ptr %result.i91.i2052, align 8
  %result.i93.i2054 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i91.i2052, ptr %result.i93.i2054, align 8
  %1826 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i93.i2054)
  store ptr @Array, ptr %174, align 8
  store ptr %result.i93.i2054, ptr %428, align 8
  store i32 9, ptr %429, align 8
  %1827 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %174)
  %1828 = getelementptr i8, ptr %result.i93.i2054, i64 16
  store i32 %1799, ptr %1828, align 4
  %1829 = getelementptr i8, ptr %result.i93.i2054, i64 20
  store i32 %1799, ptr %1829, align 4
  %result.i.i234.i2055 = call noalias ptr @bump_malloc_inner(i64 noundef %1815, ptr nonnull @current_ptr) #29
  %1830 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %1831 = getelementptr i8, ptr %result.i93.i2054, i64 8
  store ptr %result.i.i234.i2055, ptr %1831, align 8
  %1832 = load ptr, ptr %430, align 8
  store ptr @Array, ptr %299, align 8
  store ptr %result.i93.i2054, ptr %300, align 8
  store ptr %1832, ptr %381, align 8
  store i32 9, ptr %301, align 4
  store i32 0, ptr %382, align 4
  %1833 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %137)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %138)
  %1834 = icmp sgt i32 %1797, 0
  br i1 %1834, label %.lr.ph.i3080, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3183.critedge

.lr.ph.i3080:                                     ; preds = %._crit_edge3.i774
  %invariant.gep.i3081 = getelementptr i8, ptr %1775, i64 120
  %offset_tbl.i.i24.i3083 = load ptr, ptr %offset_tbl_ptr.i.i20.i2008, align 8
  %hash_coef.i.i22.i3085 = load i64, ptr %hash_coef_ptr.i.i18.i2006, align 4
  %product.i.i.i25.i3086 = mul i64 %hash_coef.i.i22.i3085, -5261542750394134544
  %shifted.i.i.i26.i3087 = lshr i64 %product.i.i.i25.i3086, 32
  %xored.i.i.i27.i3088 = xor i64 %shifted.i.i.i26.i3087, %product.i.i.i25.i3086
  %tbl_size.i.i23.i3090 = load i64, ptr %tbl_size_ptr.i.i19.i2007, align 4
  %hash.i.i.i28.i3091 = and i64 %xored.i.i.i27.i3088, %tbl_size.i.i23.i3090
  %offset_ptr.i.i29.i3092 = getelementptr i32, ptr %offset_tbl.i.i24.i3083, i64 %hash.i.i.i28.i3091
  %offset.i.i30.i3093 = load i32, ptr %offset_ptr.i.i29.i3092, align 4
  %1835 = insertvalue { ptr, ptr, ptr, i32 } %1780, i32 %offset.i.i30.i3093, 3
  %1836 = sext i32 %offset.i.i30.i3093 to i64
  %gep.i3108 = getelementptr ptr, ptr %invariant.gep.i3081, i64 %1836
  %1837 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %1838

1838:                                             ; preds = %._crit_edge1.i3112, %.lr.ph.i3080
  %.reg2mem13.079.i3109 = phi i32 [ 0, %.lr.ph.i3080 ], [ %1855, %._crit_edge1.i3112 ]
  store ptr @_parameterization_Ptri32, ptr %137, align 8
  %1839 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %137)
  %1840 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %1775)
  %1841 = load ptr, ptr %gep.i3108, align 8
  store ptr @i32_typ, ptr %138, align 8
  %1842 = call ptr %1841({ ptr, ptr, ptr, i32 } %1835, ptr nonnull %138)
  %1843 = call { ptr, i160 } %1842({ ptr, ptr, ptr, i32 } %1835, { ptr, ptr, ptr, i32 } %1835, ptr nonnull %137, i32 %.reg2mem13.079.i3109)
  %.fca.0.extract11.i3110 = extractvalue { ptr, i160 } %1843, 0
  %1844 = icmp ne ptr %.fca.0.extract11.i3110, @nil_typ
  %1845 = icmp ne ptr %.fca.0.extract11.i3110, null
  %.not17.i3111 = and i1 %1844, %1845
  br i1 %.not17.i3111, label %1846, label %._crit_edge1.i3112

1846:                                             ; preds = %1838
  %.fca.1.extract13.i3113 = extractvalue { ptr, i160 } %1843, 1
  %.sroa.375.8.extract.trunc.i3114 = trunc i160 %.fca.1.extract13.i3113 to i64
  %1847 = inttoptr i64 %.sroa.375.8.extract.trunc.i3114 to ptr
  %.sroa.576.8.extract.shift.i3115 = lshr i160 %.fca.1.extract13.i3113, 64
  %.sroa.576.8.extract.trunc.i3116 = trunc i160 %.sroa.576.8.extract.shift.i3115 to i64
  %1848 = inttoptr i64 %.sroa.576.8.extract.trunc.i3116 to ptr
  %hash_coef_ptr.i.i33.i3117 = getelementptr i8, ptr %.fca.0.extract11.i3110, i64 8
  %tbl_size_ptr.i.i34.i3118 = getelementptr i8, ptr %.fca.0.extract11.i3110, i64 16
  %offset_tbl_ptr.i.i35.i3119 = getelementptr i8, ptr %.fca.0.extract11.i3110, i64 40
  %hash_coef.i.i36.i3120 = load i64, ptr %hash_coef_ptr.i.i33.i3117, align 4
  %tbl_size.i.i37.i3121 = load i64, ptr %tbl_size_ptr.i.i34.i3118, align 4
  %offset_tbl.i.i38.i3122 = load ptr, ptr %offset_tbl_ptr.i.i35.i3119, align 8
  %product.i.i.i39.i3123 = mul i64 %hash_coef.i.i36.i3120, 4015701072841558310
  %shifted.i.i.i40.i3124 = lshr i64 %product.i.i.i39.i3123, 32
  %xored.i.i.i41.i3125 = xor i64 %shifted.i.i.i40.i3124, %product.i.i.i39.i3123
  %hash.i.i.i42.i3126 = and i64 %xored.i.i.i41.i3125, %tbl_size.i.i37.i3121
  %offset_ptr.i.i43.i3127 = getelementptr i32, ptr %offset_tbl.i.i38.i3122, i64 %hash.i.i.i42.i3126
  %offset.i.i58.i3128 = load i32, ptr %offset_ptr.i.i43.i3127, align 4
  %1849 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i3110, 0
  %1850 = insertvalue { ptr, ptr, ptr, i32 } %1849, ptr %1847, 1
  %1851 = insertvalue { ptr, ptr, ptr, i32 } %1850, ptr %1848, 2
  %1852 = insertvalue { ptr, ptr, ptr, i32 } %1851, i32 %offset.i.i58.i3128, 3
  %1853 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1854 = call { ptr, i160 } @HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %446, { ptr, ptr, ptr, i32 } poison, ptr nonnull poison, { ptr, ptr, ptr, i32 } %1852)
  br label %._crit_edge1.i3112

._crit_edge1.i3112:                               ; preds = %1846, %1838
  %1855 = add nuw nsw i32 %.reg2mem13.079.i3109, 1
  %1856 = icmp slt i32 %1855, %1797
  br i1 %1856, label %1838, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3130

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3130: ; preds = %._crit_edge1.i3112
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %137)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %138)
  %1857 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %135)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %136)
  %invariant.gep.i3134 = getelementptr i8, ptr %1783, i64 120
  %offset_tbl.i.i24.i3136 = load ptr, ptr %offset_tbl_ptr.i.i48.i2025, align 8
  %hash_coef.i.i22.i3138 = load i64, ptr %hash_coef_ptr.i.i46.i2023, align 4
  %product.i.i.i25.i3139 = mul i64 %hash_coef.i.i22.i3138, -5261542750394134544
  %shifted.i.i.i26.i3140 = lshr i64 %product.i.i.i25.i3139, 32
  %xored.i.i.i27.i3141 = xor i64 %shifted.i.i.i26.i3140, %product.i.i.i25.i3139
  %tbl_size.i.i23.i3143 = load i64, ptr %tbl_size_ptr.i.i47.i2024, align 4
  %hash.i.i.i28.i3144 = and i64 %xored.i.i.i27.i3141, %tbl_size.i.i23.i3143
  %offset_ptr.i.i29.i3145 = getelementptr i32, ptr %offset_tbl.i.i24.i3136, i64 %hash.i.i.i28.i3144
  %offset.i.i30.i3146 = load i32, ptr %offset_ptr.i.i29.i3145, align 4
  %1858 = insertvalue { ptr, ptr, ptr, i32 } %1788, i32 %offset.i.i30.i3146, 3
  %1859 = sext i32 %offset.i.i30.i3146 to i64
  %gep.i3161 = getelementptr ptr, ptr %invariant.gep.i3134, i64 %1859
  %1860 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %1861

1861:                                             ; preds = %._crit_edge1.i3165, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3130
  %.reg2mem13.079.i3162 = phi i32 [ 0, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3130 ], [ %1878, %._crit_edge1.i3165 ]
  store ptr @_parameterization_Ptri32, ptr %135, align 8
  %1862 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %135)
  %1863 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %1783)
  %1864 = load ptr, ptr %gep.i3161, align 8
  store ptr @i32_typ, ptr %136, align 8
  %1865 = call ptr %1864({ ptr, ptr, ptr, i32 } %1858, ptr nonnull %136)
  %1866 = call { ptr, i160 } %1865({ ptr, ptr, ptr, i32 } %1858, { ptr, ptr, ptr, i32 } %1858, ptr nonnull %135, i32 %.reg2mem13.079.i3162)
  %.fca.0.extract11.i3163 = extractvalue { ptr, i160 } %1866, 0
  %1867 = icmp ne ptr %.fca.0.extract11.i3163, @nil_typ
  %1868 = icmp ne ptr %.fca.0.extract11.i3163, null
  %.not17.i3164 = and i1 %1867, %1868
  br i1 %.not17.i3164, label %1869, label %._crit_edge1.i3165

1869:                                             ; preds = %1861
  %.fca.1.extract13.i3166 = extractvalue { ptr, i160 } %1866, 1
  %.sroa.375.8.extract.trunc.i3167 = trunc i160 %.fca.1.extract13.i3166 to i64
  %1870 = inttoptr i64 %.sroa.375.8.extract.trunc.i3167 to ptr
  %.sroa.576.8.extract.shift.i3168 = lshr i160 %.fca.1.extract13.i3166, 64
  %.sroa.576.8.extract.trunc.i3169 = trunc i160 %.sroa.576.8.extract.shift.i3168 to i64
  %1871 = inttoptr i64 %.sroa.576.8.extract.trunc.i3169 to ptr
  %hash_coef_ptr.i.i33.i3170 = getelementptr i8, ptr %.fca.0.extract11.i3163, i64 8
  %tbl_size_ptr.i.i34.i3171 = getelementptr i8, ptr %.fca.0.extract11.i3163, i64 16
  %offset_tbl_ptr.i.i35.i3172 = getelementptr i8, ptr %.fca.0.extract11.i3163, i64 40
  %hash_coef.i.i36.i3173 = load i64, ptr %hash_coef_ptr.i.i33.i3170, align 4
  %tbl_size.i.i37.i3174 = load i64, ptr %tbl_size_ptr.i.i34.i3171, align 4
  %offset_tbl.i.i38.i3175 = load ptr, ptr %offset_tbl_ptr.i.i35.i3172, align 8
  %product.i.i.i39.i3176 = mul i64 %hash_coef.i.i36.i3173, 4015701072841558310
  %shifted.i.i.i40.i3177 = lshr i64 %product.i.i.i39.i3176, 32
  %xored.i.i.i41.i3178 = xor i64 %shifted.i.i.i40.i3177, %product.i.i.i39.i3176
  %hash.i.i.i42.i3179 = and i64 %xored.i.i.i41.i3178, %tbl_size.i.i37.i3174
  %offset_ptr.i.i43.i3180 = getelementptr i32, ptr %offset_tbl.i.i38.i3175, i64 %hash.i.i.i42.i3179
  %offset.i.i58.i3181 = load i32, ptr %offset_ptr.i.i43.i3180, align 4
  %1872 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i3163, 0
  %1873 = insertvalue { ptr, ptr, ptr, i32 } %1872, ptr %1870, 1
  %1874 = insertvalue { ptr, ptr, ptr, i32 } %1873, ptr %1871, 2
  %1875 = insertvalue { ptr, ptr, ptr, i32 } %1874, i32 %offset.i.i58.i3181, 3
  %1876 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1877 = call { ptr, i160 } @HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %446, { ptr, ptr, ptr, i32 } poison, ptr nonnull poison, { ptr, ptr, ptr, i32 } %1875)
  br label %._crit_edge1.i3165

._crit_edge1.i3165:                               ; preds = %1869, %1861
  %1878 = add nuw nsw i32 %.reg2mem13.079.i3162, 1
  %1879 = icmp slt i32 %1878, %1797
  br i1 %1879, label %1861, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3183

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3183.critedge: ; preds = %._crit_edge3.i774
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %137)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %138)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %135)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %136)
  br label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3183

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3183: ; preds = %._crit_edge1.i3165, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3183.critedge
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %135)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %136)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %173)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %174)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %157)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %158)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %159)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %160)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %161)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %162)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %163)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0680.i2098)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %164)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %165)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %166)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %167)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %168)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %169)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %170)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %171)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i2100)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %172)
  %1880 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1881 = load i32, ptr %302, align 4
  %1882 = icmp sgt i32 %1881, 0
  br i1 %1882, label %.lr.ph.i2135, label %._crit_edge3.1.i780

.lr.ph.i2135:                                     ; preds = %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3183
  %1883 = lshr i160 %1773, 64
  %1884 = insertelement <2 x i160> poison, i160 %1883, i64 0
  %1885 = insertelement <2 x i160> %1884, i160 %1773, i64 1
  %1886 = trunc <2 x i160> %1885 to <2 x i64>
  %1887 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1888 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  br label %1889

1889:                                             ; preds = %.cont.cont.i2189, %.lr.ph.i2135
  %offset.i.i260.i22062501 = phi i32 [ 9, %.lr.ph.i2135 ], [ %offset.i.i260.i2206, %.cont.cont.i2189 ]
  %.reg2mem195.0678.i2137 = phi i32 [ 1, %.lr.ph.i2135 ], [ %2044, %.cont.cont.i2189 ]
  %.reg2mem193.0677.i2138 = phi i32 [ 0, %.lr.ph.i2135 ], [ %2049, %.cont.cont.i2189 ]
  %1890 = phi <2 x i64> [ %1886, %.lr.ph.i2135 ], [ %2048, %.cont.cont.i2189 ]
  %1891 = extractelement <2 x i64> %1890, i64 1
  %.sroa.speculated352.i21932497 = inttoptr i64 %1891 to ptr
  %1892 = extractelement <2 x i64> %1890, i64 0
  %.sroa.speculated346.i21942499 = inttoptr i64 %1892 to ptr
  %1893 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Entry, ptr undef, ptr undef, i32 undef }, ptr %.sroa.speculated352.i21932497, 1
  %1894 = insertvalue { ptr, ptr, ptr, i32 } %1893, ptr %.sroa.speculated346.i21942499, 2
  %1895 = insertvalue { ptr, ptr, ptr, i32 } %1894, i32 %offset.i.i260.i22062501, 3
  %1896 = sext i32 %offset.i.i260.i22062501 to i64
  %gep2495 = getelementptr ptr, ptr getelementptr inbounds (i8, ptr @Entry, i64 64), i64 %1896
  %1897 = load ptr, ptr %gep2495, align 8
  %1898 = call ptr %1897({ ptr, ptr, ptr, i32 } %1895, ptr nonnull %2)
  %1899 = call i32 %1898({ ptr, ptr, ptr, i32 } %1895, { ptr, ptr, ptr, i32 } %1895, ptr nonnull %2)
  %1900 = icmp eq i32 %.reg2mem195.0678.i2137, 1
  %1901 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br i1 %1900, label %1902, label %1964

1902:                                             ; preds = %1889
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %1903 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1904 = load ptr, ptr %286, align 8
  %1905 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1904, 0
  %1906 = load ptr, ptr %287, align 8
  %1907 = insertvalue { ptr, ptr, ptr, i32 } %1905, ptr %1906, 1
  %1908 = load ptr, ptr %380, align 8
  %1909 = insertvalue { ptr, ptr, ptr, i32 } %1907, ptr %1908, 2
  %1910 = load i32, ptr %288, align 4
  %1911 = insertvalue { ptr, ptr, ptr, i32 } %1909, i32 %1910, 3
  %hash_coef_ptr.i.i10.i3201 = getelementptr i8, ptr %1904, i64 8
  %tbl_size_ptr.i.i11.i3202 = getelementptr i8, ptr %1904, i64 16
  %offset_tbl_ptr.i.i12.i3203 = getelementptr i8, ptr %1904, i64 40
  %hash_coef.i.i13.i3204 = load i64, ptr %hash_coef_ptr.i.i10.i3201, align 4
  %tbl_size.i.i14.i3205 = load i64, ptr %tbl_size_ptr.i.i11.i3202, align 4
  %offset_tbl.i.i15.i3206 = load ptr, ptr %offset_tbl_ptr.i.i12.i3203, align 8
  %product.i.i.i16.i3207 = mul i64 %hash_coef.i.i13.i3204, -5261542750394134544
  %shifted.i.i.i17.i3208 = lshr i64 %product.i.i.i16.i3207, 32
  %xored.i.i.i18.i3209 = xor i64 %shifted.i.i.i17.i3208, %product.i.i.i16.i3207
  %hash.i.i.i19.i3210 = and i64 %xored.i.i.i18.i3209, %tbl_size.i.i14.i3205
  %offset_ptr.i.i20.i3211 = getelementptr i32, ptr %offset_tbl.i.i15.i3206, i64 %hash.i.i.i19.i3210
  %offset.i.i21.i3212 = load i32, ptr %offset_ptr.i.i20.i3211, align 4
  %eq.i.i3213 = icmp eq i32 %1910, %offset.i.i21.i3212
  call void @llvm.assume(i1 %eq.i.i3213) #30
  %1912 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1913 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1904)
  %1914 = sext i32 %1910 to i64
  %1915 = getelementptr ptr, ptr %1904, i64 %1914
  %1916 = getelementptr i8, ptr %1915, i64 64
  %1917 = load ptr, ptr %1916, align 8
  %1918 = call ptr %1917({ ptr, ptr, ptr, i32 } %1911, ptr nonnull %2)
  %1919 = call i32 %1918({ ptr, ptr, ptr, i32 } %1911, { ptr, ptr, ptr, i32 } %1911, ptr nonnull %2)
  %1920 = add i32 %1919, -1
  %1921 = and i32 %1920, %1899
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %1922 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1923 = load ptr, ptr %286, align 8
  %1924 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1923, 0
  %1925 = load ptr, ptr %287, align 8
  %1926 = insertvalue { ptr, ptr, ptr, i32 } %1924, ptr %1925, 1
  %1927 = load ptr, ptr %380, align 8
  %1928 = insertvalue { ptr, ptr, ptr, i32 } %1926, ptr %1927, 2
  %1929 = load i32, ptr %288, align 4
  %1930 = insertvalue { ptr, ptr, ptr, i32 } %1928, i32 %1929, 3
  %hash_coef_ptr.i.i172.i2211 = getelementptr i8, ptr %1923, i64 8
  %tbl_size_ptr.i.i173.i2212 = getelementptr i8, ptr %1923, i64 16
  %offset_tbl_ptr.i.i174.i2213 = getelementptr i8, ptr %1923, i64 40
  %hash_coef.i.i175.i2214 = load i64, ptr %hash_coef_ptr.i.i172.i2211, align 4
  %tbl_size.i.i176.i2215 = load i64, ptr %tbl_size_ptr.i.i173.i2212, align 4
  %offset_tbl.i.i177.i2216 = load ptr, ptr %offset_tbl_ptr.i.i174.i2213, align 8
  %product.i.i.i178.i2217 = mul i64 %hash_coef.i.i175.i2214, -5261542750394134544
  %shifted.i.i.i179.i2218 = lshr i64 %product.i.i.i178.i2217, 32
  %xored.i.i.i180.i2219 = xor i64 %shifted.i.i.i179.i2218, %product.i.i.i178.i2217
  %hash.i.i.i181.i2220 = and i64 %xored.i.i.i180.i2219, %tbl_size.i.i176.i2215
  %offset_ptr.i.i182.i2221 = getelementptr i32, ptr %offset_tbl.i.i177.i2216, i64 %hash.i.i.i181.i2220
  %offset.i.i183.i2222 = load i32, ptr %offset_ptr.i.i182.i2221, align 4
  %eq.i.i2223 = icmp eq i32 %1929, %offset.i.i183.i2222
  call void @llvm.assume(i1 %eq.i.i2223) #30
  store ptr @_parameterization_Ptri32, ptr %157, align 8
  %1931 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %157)
  %1932 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1923)
  %1933 = sext i32 %1929 to i64
  %1934 = getelementptr ptr, ptr %1923, i64 %1933
  %1935 = getelementptr i8, ptr %1934, i64 120
  %1936 = load ptr, ptr %1935, align 8
  store ptr @i32_typ, ptr %158, align 8
  %1937 = call ptr %1936({ ptr, ptr, ptr, i32 } %1930, ptr nonnull %158)
  %1938 = call { ptr, i160 } %1937({ ptr, ptr, ptr, i32 } %1930, { ptr, ptr, ptr, i32 } %1930, ptr nonnull %157, i32 %1921)
  %.fca.0.extract112.i2224 = extractvalue { ptr, i160 } %1938, 0
  %.sroa.3111.0.insert.ext.i2225 = zext i32 %offset.i.i260.i22062501 to i160
  %.sroa.3111.0.insert.shift.i2226 = shl nuw i160 %.sroa.3111.0.insert.ext.i2225, 128
  %.sroa.2110.0.insert.ext.i2227 = zext i64 %1892 to i160
  %.sroa.2110.0.insert.shift.i2228 = shl nuw nsw i160 %.sroa.2110.0.insert.ext.i2227, 64
  %.sroa.2110.0.insert.insert.i2229 = or disjoint i160 %.sroa.2110.0.insert.shift.i2228, %.sroa.3111.0.insert.shift.i2226
  %.sroa.0109.0.insert.ext.i2230 = zext i64 %1891 to i160
  %.sroa.0109.0.insert.insert.i2231 = or disjoint i160 %.sroa.2110.0.insert.insert.i2229, %.sroa.0109.0.insert.ext.i2230
  %1939 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0109.0.insert.insert.i2231, 1
  %1940 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1941 = load ptr, ptr %286, align 8
  %1942 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1941, 0
  %1943 = load ptr, ptr %287, align 8
  %1944 = insertvalue { ptr, ptr, ptr, i32 } %1942, ptr %1943, 1
  %1945 = load ptr, ptr %380, align 8
  %1946 = insertvalue { ptr, ptr, ptr, i32 } %1944, ptr %1945, 2
  %1947 = load i32, ptr %288, align 4
  %1948 = insertvalue { ptr, ptr, ptr, i32 } %1946, i32 %1947, 3
  %hash_coef_ptr.i.i186.i2236 = getelementptr i8, ptr %1941, i64 8
  %tbl_size_ptr.i.i187.i2237 = getelementptr i8, ptr %1941, i64 16
  %offset_tbl_ptr.i.i188.i2238 = getelementptr i8, ptr %1941, i64 40
  %hash_coef.i.i189.i2239 = load i64, ptr %hash_coef_ptr.i.i186.i2236, align 4
  %tbl_size.i.i190.i2240 = load i64, ptr %tbl_size_ptr.i.i187.i2237, align 4
  %offset_tbl.i.i191.i2241 = load ptr, ptr %offset_tbl_ptr.i.i188.i2238, align 8
  %product.i.i.i192.i2242 = mul i64 %hash_coef.i.i189.i2239, -5261542750394134544
  %shifted.i.i.i193.i2243 = lshr i64 %product.i.i.i192.i2242, 32
  %xored.i.i.i194.i2244 = xor i64 %shifted.i.i.i193.i2243, %product.i.i.i192.i2242
  %hash.i.i.i195.i2245 = and i64 %xored.i.i.i194.i2244, %tbl_size.i.i190.i2240
  %offset_ptr.i.i196.i2246 = getelementptr i32, ptr %offset_tbl.i.i191.i2241, i64 %hash.i.i.i195.i2245
  %offset.i.i197.i2247 = load i32, ptr %offset_ptr.i.i196.i2246, align 4
  %eq.i200.i2248 = icmp eq i32 %1947, %offset.i.i197.i2247
  call void @llvm.assume(i1 %eq.i200.i2248) #30
  %1949 = load ptr, ptr %result.i, align 8
  %1950 = load ptr, ptr %269, align 8
  %result.i.i2249 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1951 = getelementptr i8, ptr %result.i.i2249, i64 16
  store ptr %1950, ptr %1951, align 8
  %1952 = getelementptr i8, ptr %result.i.i2249, i64 8
  store ptr %1949, ptr %1952, align 8
  %1953 = getelementptr i8, ptr %result.i.i2249, i64 24
  store ptr null, ptr %1953, align 8
  %1954 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i2249)
  store ptr @Entry, ptr %result.i.i2249, align 8
  store ptr @_parameterization_Ptri32, ptr %159, align 8
  store ptr %result.i.i2249, ptr %433, align 8
  %1955 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %159)
  %1956 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1941)
  %1957 = sext i32 %1947 to i64
  %1958 = getelementptr ptr, ptr %1941, i64 %1957
  %1959 = getelementptr i8, ptr %1958, i64 128
  %1960 = load ptr, ptr %1959, align 8
  store ptr @i32_typ, ptr %160, align 8
  store ptr @Entry, ptr %434, align 8
  %1961 = call ptr %1960({ ptr, ptr, ptr, i32 } %1948, ptr nonnull %160)
  call void %1961({ ptr, ptr, ptr, i32 } %1948, { ptr, ptr, ptr, i32 } %1948, ptr nonnull %159, i32 %1921, { ptr, i160 } %1939)
  %1962 = icmp ne ptr %.fca.0.extract112.i2224, @nil_typ
  %1963 = icmp ne ptr %.fca.0.extract112.i2224, null
  %.not140.i2250 = and i1 %1962, %1963
  br i1 %.not140.i2250, label %.cont.cont.i2189, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit2256.thread

1964:                                             ; preds = %1889
  %1965 = add i32 %1899, 2127912214
  %1966 = shl i32 %1899, 12
  %1967 = add i32 %1965, %1966
  %1968 = ashr i32 %1967, 19
  %1969 = xor i32 %1967, %1968
  %1970 = xor i32 %1969, -949894596
  %1971 = add i32 %1970, 374761393
  %1972 = shl i32 %1970, 5
  %1973 = add i32 %1971, %1972
  %1974 = add i32 %1973, -744332180
  %1975 = shl i32 %1973, 9
  %1976 = xor i32 %1974, %1975
  %1977 = add i32 %1976, -42973499
  %1978 = shl i32 %1976, 3
  %1979 = add i32 %1977, %1978
  %1980 = ashr i32 %1979, 16
  %1981 = xor i32 %1979, %1980
  %1982 = xor i32 %1981, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %1983 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1984 = load ptr, ptr %299, align 8
  %1985 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1984, 0
  %1986 = load ptr, ptr %300, align 8
  %1987 = insertvalue { ptr, ptr, ptr, i32 } %1985, ptr %1986, 1
  %1988 = load ptr, ptr %381, align 8
  %1989 = insertvalue { ptr, ptr, ptr, i32 } %1987, ptr %1988, 2
  %1990 = load i32, ptr %301, align 4
  %1991 = insertvalue { ptr, ptr, ptr, i32 } %1989, i32 %1990, 3
  %hash_coef_ptr.i.i10.i3231 = getelementptr i8, ptr %1984, i64 8
  %tbl_size_ptr.i.i11.i3232 = getelementptr i8, ptr %1984, i64 16
  %offset_tbl_ptr.i.i12.i3233 = getelementptr i8, ptr %1984, i64 40
  %hash_coef.i.i13.i3234 = load i64, ptr %hash_coef_ptr.i.i10.i3231, align 4
  %tbl_size.i.i14.i3235 = load i64, ptr %tbl_size_ptr.i.i11.i3232, align 4
  %offset_tbl.i.i15.i3236 = load ptr, ptr %offset_tbl_ptr.i.i12.i3233, align 8
  %product.i.i.i16.i3237 = mul i64 %hash_coef.i.i13.i3234, -5261542750394134544
  %shifted.i.i.i17.i3238 = lshr i64 %product.i.i.i16.i3237, 32
  %xored.i.i.i18.i3239 = xor i64 %shifted.i.i.i17.i3238, %product.i.i.i16.i3237
  %hash.i.i.i19.i3240 = and i64 %xored.i.i.i18.i3239, %tbl_size.i.i14.i3235
  %offset_ptr.i.i20.i3241 = getelementptr i32, ptr %offset_tbl.i.i15.i3236, i64 %hash.i.i.i19.i3240
  %offset.i.i21.i3242 = load i32, ptr %offset_ptr.i.i20.i3241, align 4
  %eq.i.i3243 = icmp eq i32 %1990, %offset.i.i21.i3242
  call void @llvm.assume(i1 %eq.i.i3243) #30
  %1992 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1993 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1984)
  %1994 = sext i32 %1990 to i64
  %1995 = getelementptr ptr, ptr %1984, i64 %1994
  %1996 = getelementptr i8, ptr %1995, i64 64
  %1997 = load ptr, ptr %1996, align 8
  %1998 = call ptr %1997({ ptr, ptr, ptr, i32 } %1991, ptr nonnull %2)
  %1999 = call i32 %1998({ ptr, ptr, ptr, i32 } %1991, { ptr, ptr, ptr, i32 } %1991, ptr nonnull %2)
  %2000 = add i32 %1999, -1
  %2001 = and i32 %2000, %1982
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %2002 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2003 = load ptr, ptr %299, align 8
  %2004 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2003, 0
  %2005 = load ptr, ptr %300, align 8
  %2006 = insertvalue { ptr, ptr, ptr, i32 } %2004, ptr %2005, 1
  %2007 = load ptr, ptr %381, align 8
  %2008 = insertvalue { ptr, ptr, ptr, i32 } %2006, ptr %2007, 2
  %2009 = load i32, ptr %301, align 4
  %2010 = insertvalue { ptr, ptr, ptr, i32 } %2008, i32 %2009, 3
  %hash_coef_ptr.i.i202.i2143 = getelementptr i8, ptr %2003, i64 8
  %tbl_size_ptr.i.i203.i2144 = getelementptr i8, ptr %2003, i64 16
  %offset_tbl_ptr.i.i204.i2145 = getelementptr i8, ptr %2003, i64 40
  %hash_coef.i.i205.i2146 = load i64, ptr %hash_coef_ptr.i.i202.i2143, align 4
  %tbl_size.i.i206.i2147 = load i64, ptr %tbl_size_ptr.i.i203.i2144, align 4
  %offset_tbl.i.i207.i2148 = load ptr, ptr %offset_tbl_ptr.i.i204.i2145, align 8
  %product.i.i.i208.i2149 = mul i64 %hash_coef.i.i205.i2146, -5261542750394134544
  %shifted.i.i.i209.i2150 = lshr i64 %product.i.i.i208.i2149, 32
  %xored.i.i.i210.i2151 = xor i64 %shifted.i.i.i209.i2150, %product.i.i.i208.i2149
  %hash.i.i.i211.i2152 = and i64 %xored.i.i.i210.i2151, %tbl_size.i.i206.i2147
  %offset_ptr.i.i212.i2153 = getelementptr i32, ptr %offset_tbl.i.i207.i2148, i64 %hash.i.i.i211.i2152
  %offset.i.i213.i2154 = load i32, ptr %offset_ptr.i.i212.i2153, align 4
  %eq.i216.i2155 = icmp eq i32 %2009, %offset.i.i213.i2154
  call void @llvm.assume(i1 %eq.i216.i2155) #30
  store ptr @_parameterization_Ptri32, ptr %165, align 8
  %2011 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %165)
  %2012 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2003)
  %2013 = sext i32 %2009 to i64
  %2014 = getelementptr ptr, ptr %2003, i64 %2013
  %2015 = getelementptr i8, ptr %2014, i64 120
  %2016 = load ptr, ptr %2015, align 8
  store ptr @i32_typ, ptr %166, align 8
  %2017 = call ptr %2016({ ptr, ptr, ptr, i32 } %2010, ptr nonnull %166)
  %2018 = call { ptr, i160 } %2017({ ptr, ptr, ptr, i32 } %2010, { ptr, ptr, ptr, i32 } %2010, ptr nonnull %165, i32 %2001)
  %.fca.0.extract87.i2156 = extractvalue { ptr, i160 } %2018, 0
  %.sroa.3.0.insert.ext.i2157 = zext i32 %offset.i.i260.i22062501 to i160
  %.sroa.3.0.insert.shift.i2158 = shl nuw i160 %.sroa.3.0.insert.ext.i2157, 128
  %.sroa.2.0.insert.ext.i2159 = zext i64 %1892 to i160
  %.sroa.2.0.insert.shift.i2160 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i2159, 64
  %.sroa.2.0.insert.insert.i2161 = or disjoint i160 %.sroa.2.0.insert.shift.i2160, %.sroa.3.0.insert.shift.i2158
  %.sroa.0.0.insert.ext.i2162 = zext i64 %1891 to i160
  %.sroa.0.0.insert.insert.i2163 = or disjoint i160 %.sroa.2.0.insert.insert.i2161, %.sroa.0.0.insert.ext.i2162
  %2019 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0.0.insert.insert.i2163, 1
  %2020 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2021 = load ptr, ptr %299, align 8
  %2022 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2021, 0
  %2023 = load ptr, ptr %300, align 8
  %2024 = insertvalue { ptr, ptr, ptr, i32 } %2022, ptr %2023, 1
  %2025 = load ptr, ptr %381, align 8
  %2026 = insertvalue { ptr, ptr, ptr, i32 } %2024, ptr %2025, 2
  %2027 = load i32, ptr %301, align 4
  %2028 = insertvalue { ptr, ptr, ptr, i32 } %2026, i32 %2027, 3
  %hash_coef_ptr.i.i218.i2168 = getelementptr i8, ptr %2021, i64 8
  %tbl_size_ptr.i.i219.i2169 = getelementptr i8, ptr %2021, i64 16
  %offset_tbl_ptr.i.i220.i2170 = getelementptr i8, ptr %2021, i64 40
  %hash_coef.i.i221.i2171 = load i64, ptr %hash_coef_ptr.i.i218.i2168, align 4
  %tbl_size.i.i222.i2172 = load i64, ptr %tbl_size_ptr.i.i219.i2169, align 4
  %offset_tbl.i.i223.i2173 = load ptr, ptr %offset_tbl_ptr.i.i220.i2170, align 8
  %product.i.i.i224.i2174 = mul i64 %hash_coef.i.i221.i2171, -5261542750394134544
  %shifted.i.i.i225.i2175 = lshr i64 %product.i.i.i224.i2174, 32
  %xored.i.i.i226.i2176 = xor i64 %shifted.i.i.i225.i2175, %product.i.i.i224.i2174
  %hash.i.i.i227.i2177 = and i64 %xored.i.i.i226.i2176, %tbl_size.i.i222.i2172
  %offset_ptr.i.i228.i2178 = getelementptr i32, ptr %offset_tbl.i.i223.i2173, i64 %hash.i.i.i227.i2177
  %offset.i.i229.i2179 = load i32, ptr %offset_ptr.i.i228.i2178, align 4
  %eq.i232.i2180 = icmp eq i32 %2027, %offset.i.i229.i2179
  call void @llvm.assume(i1 %eq.i232.i2180) #30
  %2029 = load ptr, ptr %result.i, align 8
  %2030 = load ptr, ptr %269, align 8
  %result.i233.i2181 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2031 = getelementptr i8, ptr %result.i233.i2181, i64 16
  store ptr %2030, ptr %2031, align 8
  %2032 = getelementptr i8, ptr %result.i233.i2181, i64 8
  store ptr %2029, ptr %2032, align 8
  %2033 = getelementptr i8, ptr %result.i233.i2181, i64 24
  store ptr null, ptr %2033, align 8
  %2034 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i233.i2181)
  store ptr @Entry, ptr %result.i233.i2181, align 8
  store ptr @_parameterization_Ptri32, ptr %167, align 8
  store ptr %result.i233.i2181, ptr %431, align 8
  %2035 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %167)
  %2036 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2021)
  %2037 = sext i32 %2027 to i64
  %2038 = getelementptr ptr, ptr %2021, i64 %2037
  %2039 = getelementptr i8, ptr %2038, i64 128
  %2040 = load ptr, ptr %2039, align 8
  store ptr @i32_typ, ptr %168, align 8
  store ptr @Entry, ptr %432, align 8
  %2041 = call ptr %2040({ ptr, ptr, ptr, i32 } %2028, ptr nonnull %168)
  call void %2041({ ptr, ptr, ptr, i32 } %2028, { ptr, ptr, ptr, i32 } %2028, ptr nonnull %167, i32 %2001, { ptr, i160 } %2019)
  %2042 = icmp ne ptr %.fca.0.extract87.i2156, @nil_typ
  %2043 = icmp ne ptr %.fca.0.extract87.i2156, null
  %.not138.i2182 = and i1 %2042, %2043
  br i1 %.not138.i2182, label %.cont.cont.i2189, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit2256.thread

.cont.cont.i2189:                                 ; preds = %1964, %1902
  %.sink2516 = phi { ptr, i160 } [ %1938, %1902 ], [ %2018, %1964 ]
  %2044 = phi i32 [ 2, %1902 ], [ 1, %1964 ]
  %vptr.i248.sroa.speculated.i2192 = phi ptr [ %.fca.0.extract112.i2224, %1902 ], [ %.fca.0.extract87.i2156, %1964 ]
  %.fca.1.extract89.i2185 = extractvalue { ptr, i160 } %.sink2516, 1
  %.sroa.3407.sroa.4.0.extract.shift.i2186 = lshr i160 %.fca.1.extract89.i2185, 64
  %2045 = trunc i160 %.sroa.3407.sroa.4.0.extract.shift.i2186 to i64
  %2046 = insertelement <2 x i64> poison, i64 %2045, i64 0
  %2047 = trunc i160 %.fca.1.extract89.i2185 to i64
  %2048 = insertelement <2 x i64> %2046, i64 %2047, i64 1
  %hash_coef_ptr.i.i249.i2195 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i2192, i64 8
  %tbl_size_ptr.i.i250.i2196 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i2192, i64 16
  %offset_tbl_ptr.i.i251.i2197 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i2192, i64 40
  %hash_coef.i.i252.i2198 = load i64, ptr %hash_coef_ptr.i.i249.i2195, align 4
  %tbl_size.i.i253.i2199 = load i64, ptr %tbl_size_ptr.i.i250.i2196, align 4
  %offset_tbl.i.i254.i2200 = load ptr, ptr %offset_tbl_ptr.i.i251.i2197, align 8
  %product.i.i.i255.i2201 = mul i64 %hash_coef.i.i252.i2198, 4015701072841558310
  %shifted.i.i.i256.i2202 = lshr i64 %product.i.i.i255.i2201, 32
  %xored.i.i.i257.i2203 = xor i64 %shifted.i.i.i256.i2202, %product.i.i.i255.i2201
  %hash.i.i.i258.i2204 = and i64 %xored.i.i.i257.i2203, %tbl_size.i.i253.i2199
  %offset_ptr.i.i259.i2205 = getelementptr i32, ptr %offset_tbl.i.i254.i2200, i64 %hash.i.i.i258.i2204
  %offset.i.i260.i2206 = load i32, ptr %offset_ptr.i.i259.i2205, align 4
  %2049 = add nuw nsw i32 %.reg2mem193.0677.i2138, 1
  %2050 = load i32, ptr %302, align 4
  %2051 = icmp slt i32 %2049, %2050
  br i1 %2051, label %1889, label %._crit_edge3.1.i780

HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit2256.thread: ; preds = %1902, %1964
  %2052 = phi ptr [ %169, %1964 ], [ %161, %1902 ]
  %2053 = phi ptr [ %170, %1964 ], [ %162, %1902 ]
  %2054 = phi ptr [ %171, %1964 ], [ %163, %1902 ]
  %2055 = phi ptr [ %.sroa.0.i2100, %1964 ], [ %.sroa.0680.i2098, %1902 ]
  %2056 = phi ptr [ %172, %1964 ], [ %164, %1902 ]
  %2057 = load i32, ptr %382, align 4
  store i32 %2057, ptr %2052, align 4
  store i32 1, ptr %2053, align 4
  %2058 = add i32 %2057, 1
  store i32 %2058, ptr %2054, align 4
  %2059 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  store i32 %2058, ptr %382, align 4
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %2056, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %2055, align 8
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %157)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %158)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %159)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %160)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %161)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %162)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %163)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i2098)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %164)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %165)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %166)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %167)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %168)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %169)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %170)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %171)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i2100)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %172)
  br label %HashMap_insert_keyK_valueV.exit865

._crit_edge3.1.i780:                              ; preds = %.cont.cont.i2189, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3183
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %157)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %158)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %159)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %160)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %161)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %162)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %163)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i2098)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %164)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %165)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %166)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %167)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %168)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %169)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %170)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %171)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i2100)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %172)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %155)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %156)
  %2060 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2061 = load ptr, ptr %286, align 8
  %2062 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2061, 0
  %2063 = load ptr, ptr %287, align 8
  %2064 = insertvalue { ptr, ptr, ptr, i32 } %2062, ptr %2063, 1
  %2065 = load ptr, ptr %380, align 8
  %2066 = insertvalue { ptr, ptr, ptr, i32 } %2064, ptr %2065, 2
  %2067 = load i32, ptr %288, align 4
  %2068 = insertvalue { ptr, ptr, ptr, i32 } %2066, i32 %2067, 3
  %hash_coef_ptr.i.i18.i2275 = getelementptr i8, ptr %2061, i64 8
  %tbl_size_ptr.i.i19.i2276 = getelementptr i8, ptr %2061, i64 16
  %offset_tbl_ptr.i.i20.i2277 = getelementptr i8, ptr %2061, i64 40
  %hash_coef.i.i21.i2278 = load i64, ptr %hash_coef_ptr.i.i18.i2275, align 4
  %tbl_size.i.i22.i2279 = load i64, ptr %tbl_size_ptr.i.i19.i2276, align 4
  %offset_tbl.i.i23.i2280 = load ptr, ptr %offset_tbl_ptr.i.i20.i2277, align 8
  %product.i.i.i24.i2281 = mul i64 %hash_coef.i.i21.i2278, -5261542750394134544
  %shifted.i.i.i25.i2282 = lshr i64 %product.i.i.i24.i2281, 32
  %xored.i.i.i26.i2283 = xor i64 %shifted.i.i.i25.i2282, %product.i.i.i24.i2281
  %hash.i.i.i27.i2284 = and i64 %xored.i.i.i26.i2283, %tbl_size.i.i22.i2279
  %offset_ptr.i.i28.i2285 = getelementptr i32, ptr %offset_tbl.i.i23.i2280, i64 %hash.i.i.i27.i2284
  %offset.i.i29.i2286 = load i32, ptr %offset_ptr.i.i28.i2285, align 4
  %eq.i.i2287 = icmp eq i32 %2067, %offset.i.i29.i2286
  call void @llvm.assume(i1 %eq.i.i2287) #30
  %2069 = load ptr, ptr %299, align 8
  %2070 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2069, 0
  %2071 = load ptr, ptr %300, align 8
  %2072 = insertvalue { ptr, ptr, ptr, i32 } %2070, ptr %2071, 1
  %2073 = load ptr, ptr %381, align 8
  %2074 = insertvalue { ptr, ptr, ptr, i32 } %2072, ptr %2073, 2
  %2075 = load i32, ptr %301, align 4
  %hash_coef_ptr.i.i46.i2292 = getelementptr i8, ptr %2069, i64 8
  %tbl_size_ptr.i.i47.i2293 = getelementptr i8, ptr %2069, i64 16
  %offset_tbl_ptr.i.i48.i2294 = getelementptr i8, ptr %2069, i64 40
  %hash_coef.i.i49.i2295 = load i64, ptr %hash_coef_ptr.i.i46.i2292, align 4
  %tbl_size.i.i50.i2296 = load i64, ptr %tbl_size_ptr.i.i47.i2293, align 4
  %offset_tbl.i.i51.i2297 = load ptr, ptr %offset_tbl_ptr.i.i48.i2294, align 8
  %product.i.i.i52.i2298 = mul i64 %hash_coef.i.i49.i2295, -5261542750394134544
  %shifted.i.i.i53.i2299 = lshr i64 %product.i.i.i52.i2298, 32
  %xored.i.i.i54.i2300 = xor i64 %shifted.i.i.i53.i2299, %product.i.i.i52.i2298
  %hash.i.i.i55.i2301 = and i64 %xored.i.i.i54.i2300, %tbl_size.i.i50.i2296
  %offset_ptr.i.i56.i2302 = getelementptr i32, ptr %offset_tbl.i.i51.i2297, i64 %hash.i.i.i55.i2301
  %offset.i.i57.i2303 = load i32, ptr %offset_ptr.i.i56.i2302, align 4
  %eq.i60.i2304 = icmp eq i32 %2075, %offset.i.i57.i2303
  call void @llvm.assume(i1 %eq.i60.i2304) #30
  %2076 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2077 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2061)
  %2078 = sext i32 %2067 to i64
  %2079 = getelementptr ptr, ptr %2061, i64 %2078
  %2080 = getelementptr i8, ptr %2079, i64 64
  %2081 = load ptr, ptr %2080, align 8
  %2082 = call ptr %2081({ ptr, ptr, ptr, i32 } %2068, ptr nonnull %2)
  %2083 = call i32 %2082({ ptr, ptr, ptr, i32 } %2068, { ptr, ptr, ptr, i32 } %2068, ptr nonnull %2)
  %2084 = shl i32 %2083, 1
  %2085 = call i32 @llvm.smax.i32(i32 %2084, i32 16)
  %2086 = load ptr, ptr %result.i, align 8
  %2087 = load ptr, ptr %269, align 8
  %result.i.i2305 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2088 = getelementptr i8, ptr %result.i.i2305, i64 16
  store ptr @_parameterization_Nil, ptr %2088, align 8
  %result.i75.i2306 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2089 = getelementptr i8, ptr %result.i75.i2306, i64 16
  store ptr %2087, ptr %2089, align 8
  %2090 = getelementptr i8, ptr %result.i75.i2306, i64 8
  store ptr %2086, ptr %2090, align 8
  %2091 = getelementptr i8, ptr %result.i75.i2306, i64 24
  store ptr null, ptr %2091, align 8
  %2092 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i75.i2306)
  store ptr @Entry, ptr %result.i75.i2306, align 8
  %2093 = getelementptr i8, ptr %result.i.i2305, i64 8
  store ptr %result.i75.i2306, ptr %2093, align 8
  %2094 = getelementptr i8, ptr %result.i.i2305, i64 24
  store ptr null, ptr %2094, align 8
  %2095 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i2305)
  store ptr @union_typ, ptr %result.i.i2305, align 8
  %result.i76.i2307 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i2305, ptr %result.i76.i2307, align 8
  %2096 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i76.i2307)
  store ptr @Array, ptr %155, align 8
  store ptr %result.i76.i2307, ptr %435, align 8
  store i32 9, ptr %436, align 8
  %2097 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %155)
  %2098 = getelementptr i8, ptr %result.i76.i2307, i64 16
  store i32 %2085, ptr %2098, align 4
  %2099 = getelementptr i8, ptr %result.i76.i2307, i64 20
  store i32 %2085, ptr %2099, align 4
  %2100 = zext nneg i32 %2085 to i64
  %2101 = shl nuw nsw i64 %2100, 5
  %result.i.i.i2308 = call noalias ptr @bump_malloc_inner(i64 noundef %2101, ptr nonnull @current_ptr) #29
  %2102 = getelementptr i8, ptr %result.i76.i2307, i64 8
  store ptr %result.i.i.i2308, ptr %2102, align 8
  %2103 = load ptr, ptr %437, align 8
  store ptr @Array, ptr %286, align 8
  store ptr %result.i76.i2307, ptr %287, align 8
  store ptr %2103, ptr %380, align 8
  store i32 9, ptr %288, align 4
  %result.i91.i2321 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2104 = getelementptr i8, ptr %result.i91.i2321, i64 16
  store ptr @_parameterization_Nil, ptr %2104, align 8
  %result.i92.i2322 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2105 = getelementptr i8, ptr %result.i92.i2322, i64 16
  store ptr %2087, ptr %2105, align 8
  %2106 = getelementptr i8, ptr %result.i92.i2322, i64 8
  store ptr %2086, ptr %2106, align 8
  %2107 = getelementptr i8, ptr %result.i92.i2322, i64 24
  store ptr null, ptr %2107, align 8
  %2108 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i92.i2322)
  store ptr @Entry, ptr %result.i92.i2322, align 8
  %2109 = getelementptr i8, ptr %result.i91.i2321, i64 8
  store ptr %result.i92.i2322, ptr %2109, align 8
  %2110 = getelementptr i8, ptr %result.i91.i2321, i64 24
  store ptr null, ptr %2110, align 8
  %2111 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i91.i2321)
  store ptr @union_typ, ptr %result.i91.i2321, align 8
  %result.i93.i2323 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i91.i2321, ptr %result.i93.i2323, align 8
  %2112 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i93.i2323)
  store ptr @Array, ptr %156, align 8
  store ptr %result.i93.i2323, ptr %438, align 8
  store i32 9, ptr %439, align 8
  %2113 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %156)
  %2114 = getelementptr i8, ptr %result.i93.i2323, i64 16
  store i32 %2085, ptr %2114, align 4
  %2115 = getelementptr i8, ptr %result.i93.i2323, i64 20
  store i32 %2085, ptr %2115, align 4
  %result.i.i234.i2324 = call noalias ptr @bump_malloc_inner(i64 noundef %2101, ptr nonnull @current_ptr) #29
  %2116 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %2117 = getelementptr i8, ptr %result.i93.i2323, i64 8
  store ptr %result.i.i234.i2324, ptr %2117, align 8
  %2118 = load ptr, ptr %440, align 8
  store ptr @Array, ptr %299, align 8
  store ptr %result.i93.i2323, ptr %300, align 8
  store ptr %2118, ptr %381, align 8
  store i32 9, ptr %301, align 4
  store i32 0, ptr %382, align 4
  %2119 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %133)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %134)
  %2120 = icmp sgt i32 %2083, 0
  br i1 %2120, label %.lr.ph.i3246, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3349.critedge

.lr.ph.i3246:                                     ; preds = %._crit_edge3.1.i780
  %invariant.gep.i3247 = getelementptr i8, ptr %2061, i64 120
  %offset_tbl.i.i24.i3249 = load ptr, ptr %offset_tbl_ptr.i.i20.i2277, align 8
  %hash_coef.i.i22.i3251 = load i64, ptr %hash_coef_ptr.i.i18.i2275, align 4
  %product.i.i.i25.i3252 = mul i64 %hash_coef.i.i22.i3251, -5261542750394134544
  %shifted.i.i.i26.i3253 = lshr i64 %product.i.i.i25.i3252, 32
  %xored.i.i.i27.i3254 = xor i64 %shifted.i.i.i26.i3253, %product.i.i.i25.i3252
  %tbl_size.i.i23.i3256 = load i64, ptr %tbl_size_ptr.i.i19.i2276, align 4
  %hash.i.i.i28.i3257 = and i64 %xored.i.i.i27.i3254, %tbl_size.i.i23.i3256
  %offset_ptr.i.i29.i3258 = getelementptr i32, ptr %offset_tbl.i.i24.i3249, i64 %hash.i.i.i28.i3257
  %offset.i.i30.i3259 = load i32, ptr %offset_ptr.i.i29.i3258, align 4
  %2121 = insertvalue { ptr, ptr, ptr, i32 } %2066, i32 %offset.i.i30.i3259, 3
  %2122 = sext i32 %offset.i.i30.i3259 to i64
  %gep.i3274 = getelementptr ptr, ptr %invariant.gep.i3247, i64 %2122
  %2123 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %2124

2124:                                             ; preds = %._crit_edge1.i3278, %.lr.ph.i3246
  %.reg2mem13.079.i3275 = phi i32 [ 0, %.lr.ph.i3246 ], [ %2316, %._crit_edge1.i3278 ]
  store ptr @_parameterization_Ptri32, ptr %133, align 8
  %2125 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %133)
  %2126 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %2061)
  %2127 = load ptr, ptr %gep.i3274, align 8
  store ptr @i32_typ, ptr %134, align 8
  %2128 = call ptr %2127({ ptr, ptr, ptr, i32 } %2121, ptr nonnull %134)
  %2129 = call { ptr, i160 } %2128({ ptr, ptr, ptr, i32 } %2121, { ptr, ptr, ptr, i32 } %2121, ptr nonnull %133, i32 %.reg2mem13.079.i3275)
  %.fca.0.extract11.i3276 = extractvalue { ptr, i160 } %2129, 0
  %2130 = icmp ne ptr %.fca.0.extract11.i3276, @nil_typ
  %2131 = icmp ne ptr %.fca.0.extract11.i3276, null
  %.not17.i3277 = and i1 %2130, %2131
  br i1 %.not17.i3277, label %2132, label %._crit_edge1.i3278

2132:                                             ; preds = %2124
  %hash_coef_ptr.i.i33.i3283 = getelementptr i8, ptr %.fca.0.extract11.i3276, i64 8
  %tbl_size_ptr.i.i34.i3284 = getelementptr i8, ptr %.fca.0.extract11.i3276, i64 16
  %offset_tbl_ptr.i.i35.i3285 = getelementptr i8, ptr %.fca.0.extract11.i3276, i64 40
  %2133 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %19)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %20)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %21)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %22)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %23)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %24)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %25)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0680.i4298)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %26)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %27)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %28)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %29)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %30)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %31)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %32)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %33)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i4300)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %34)
  %hash_coef.i.i147.i4319 = load i64, ptr %hash_coef_ptr.i.i33.i3283, align 4
  %tbl_size.i.i148.i4320 = load i64, ptr %tbl_size_ptr.i.i34.i3284, align 4
  %offset_tbl.i.i149.i4321 = load ptr, ptr %offset_tbl_ptr.i.i35.i3285, align 8
  %product.i.i.i150.i4322 = mul i64 %hash_coef.i.i147.i4319, 4015701072841558310
  %shifted.i.i.i151.i4323 = lshr i64 %product.i.i.i150.i4322, 32
  %xored.i.i.i152.i4324 = xor i64 %shifted.i.i.i151.i4323, %product.i.i.i150.i4322
  %hash.i.i.i153.i4325 = and i64 %xored.i.i.i152.i4324, %tbl_size.i.i148.i4320
  %offset_ptr.i.i154.i4326 = getelementptr i32, ptr %offset_tbl.i.i149.i4321, i64 %hash.i.i.i153.i4325
  %offset.i.i169.i4327 = load i32, ptr %offset_ptr.i.i154.i4326, align 4
  %2134 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2135 = load i32, ptr %302, align 4
  %2136 = icmp sgt i32 %2135, 0
  br i1 %2136, label %.lr.ph.i4333, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4453

.lr.ph.i4333:                                     ; preds = %2132
  %.fca.1.extract13.i3279 = extractvalue { ptr, i160 } %2129, 1
  %.sroa.576.8.extract.shift.i3281 = lshr i160 %.fca.1.extract13.i3279, 64
  %2137 = insertelement <2 x i160> poison, i160 %.sroa.576.8.extract.shift.i3281, i64 0
  %2138 = insertelement <2 x i160> %2137, i160 %.fca.1.extract13.i3279, i64 1
  %2139 = trunc <2 x i160> %2138 to <2 x i64>
  %2140 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i3276, 0
  %2141 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2142 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract11.i3276)
  %invariant.gep4630 = getelementptr i8, ptr %.fca.0.extract11.i3276, i64 64
  %2143 = insertvalue { ptr, i160 } undef, ptr %.fca.0.extract11.i3276, 0
  br label %2144

2144:                                             ; preds = %.cont.cont.i4386, %.lr.ph.i4333
  %offset.i.i260.i44034637 = phi i32 [ %offset.i.i169.i4327, %.lr.ph.i4333 ], [ %offset.i.i260.i4403, %.cont.cont.i4386 ]
  %.reg2mem195.0678.i4334 = phi i32 [ 1, %.lr.ph.i4333 ], [ %2299, %.cont.cont.i4386 ]
  %.reg2mem193.0677.i4335 = phi i32 [ 0, %.lr.ph.i4333 ], [ %2304, %.cont.cont.i4386 ]
  %2145 = phi <2 x i64> [ %2139, %.lr.ph.i4333 ], [ %2303, %.cont.cont.i4386 ]
  %2146 = extractelement <2 x i64> %2145, i64 1
  %.sroa.speculated352.i43904633 = inttoptr i64 %2146 to ptr
  %2147 = extractelement <2 x i64> %2145, i64 0
  %.sroa.speculated346.i43914635 = inttoptr i64 %2147 to ptr
  %2148 = insertvalue { ptr, ptr, ptr, i32 } %2140, ptr %.sroa.speculated352.i43904633, 1
  %2149 = insertvalue { ptr, ptr, ptr, i32 } %2148, ptr %.sroa.speculated346.i43914635, 2
  %2150 = insertvalue { ptr, ptr, ptr, i32 } %2149, i32 %offset.i.i260.i44034637, 3
  %2151 = sext i32 %offset.i.i260.i44034637 to i64
  %gep4631 = getelementptr ptr, ptr %invariant.gep4630, i64 %2151
  %2152 = load ptr, ptr %gep4631, align 8
  %2153 = call ptr %2152({ ptr, ptr, ptr, i32 } %2150, ptr nonnull %2)
  %2154 = call i32 %2153({ ptr, ptr, ptr, i32 } %2150, { ptr, ptr, ptr, i32 } %2150, ptr nonnull %2)
  %2155 = icmp eq i32 %.reg2mem195.0678.i4334, 1
  %2156 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br i1 %2155, label %2157, label %2219

2157:                                             ; preds = %2144
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %2158 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2159 = load ptr, ptr %286, align 8
  %2160 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2159, 0
  %2161 = load ptr, ptr %287, align 8
  %2162 = insertvalue { ptr, ptr, ptr, i32 } %2160, ptr %2161, 1
  %2163 = load ptr, ptr %380, align 8
  %2164 = insertvalue { ptr, ptr, ptr, i32 } %2162, ptr %2163, 2
  %2165 = load i32, ptr %288, align 4
  %2166 = insertvalue { ptr, ptr, ptr, i32 } %2164, i32 %2165, 3
  %hash_coef_ptr.i.i10.i5034 = getelementptr i8, ptr %2159, i64 8
  %tbl_size_ptr.i.i11.i5035 = getelementptr i8, ptr %2159, i64 16
  %offset_tbl_ptr.i.i12.i5036 = getelementptr i8, ptr %2159, i64 40
  %hash_coef.i.i13.i5037 = load i64, ptr %hash_coef_ptr.i.i10.i5034, align 4
  %tbl_size.i.i14.i5038 = load i64, ptr %tbl_size_ptr.i.i11.i5035, align 4
  %offset_tbl.i.i15.i5039 = load ptr, ptr %offset_tbl_ptr.i.i12.i5036, align 8
  %product.i.i.i16.i5040 = mul i64 %hash_coef.i.i13.i5037, -5261542750394134544
  %shifted.i.i.i17.i5041 = lshr i64 %product.i.i.i16.i5040, 32
  %xored.i.i.i18.i5042 = xor i64 %shifted.i.i.i17.i5041, %product.i.i.i16.i5040
  %hash.i.i.i19.i5043 = and i64 %xored.i.i.i18.i5042, %tbl_size.i.i14.i5038
  %offset_ptr.i.i20.i5044 = getelementptr i32, ptr %offset_tbl.i.i15.i5039, i64 %hash.i.i.i19.i5043
  %offset.i.i21.i5045 = load i32, ptr %offset_ptr.i.i20.i5044, align 4
  %eq.i.i5046 = icmp eq i32 %2165, %offset.i.i21.i5045
  call void @llvm.assume(i1 %eq.i.i5046) #30
  %2167 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2168 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2159)
  %2169 = sext i32 %2165 to i64
  %2170 = getelementptr ptr, ptr %2159, i64 %2169
  %2171 = getelementptr i8, ptr %2170, i64 64
  %2172 = load ptr, ptr %2171, align 8
  %2173 = call ptr %2172({ ptr, ptr, ptr, i32 } %2166, ptr nonnull %2)
  %2174 = call i32 %2173({ ptr, ptr, ptr, i32 } %2166, { ptr, ptr, ptr, i32 } %2166, ptr nonnull %2)
  %2175 = add i32 %2174, -1
  %2176 = and i32 %2175, %2154
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %2177 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2178 = load ptr, ptr %286, align 8
  %2179 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2178, 0
  %2180 = load ptr, ptr %287, align 8
  %2181 = insertvalue { ptr, ptr, ptr, i32 } %2179, ptr %2180, 1
  %2182 = load ptr, ptr %380, align 8
  %2183 = insertvalue { ptr, ptr, ptr, i32 } %2181, ptr %2182, 2
  %2184 = load i32, ptr %288, align 4
  %2185 = insertvalue { ptr, ptr, ptr, i32 } %2183, i32 %2184, 3
  %hash_coef_ptr.i.i172.i4408 = getelementptr i8, ptr %2178, i64 8
  %tbl_size_ptr.i.i173.i4409 = getelementptr i8, ptr %2178, i64 16
  %offset_tbl_ptr.i.i174.i4410 = getelementptr i8, ptr %2178, i64 40
  %hash_coef.i.i175.i4411 = load i64, ptr %hash_coef_ptr.i.i172.i4408, align 4
  %tbl_size.i.i176.i4412 = load i64, ptr %tbl_size_ptr.i.i173.i4409, align 4
  %offset_tbl.i.i177.i4413 = load ptr, ptr %offset_tbl_ptr.i.i174.i4410, align 8
  %product.i.i.i178.i4414 = mul i64 %hash_coef.i.i175.i4411, -5261542750394134544
  %shifted.i.i.i179.i4415 = lshr i64 %product.i.i.i178.i4414, 32
  %xored.i.i.i180.i4416 = xor i64 %shifted.i.i.i179.i4415, %product.i.i.i178.i4414
  %hash.i.i.i181.i4417 = and i64 %xored.i.i.i180.i4416, %tbl_size.i.i176.i4412
  %offset_ptr.i.i182.i4418 = getelementptr i32, ptr %offset_tbl.i.i177.i4413, i64 %hash.i.i.i181.i4417
  %offset.i.i183.i4419 = load i32, ptr %offset_ptr.i.i182.i4418, align 4
  %eq.i.i4420 = icmp eq i32 %2184, %offset.i.i183.i4419
  call void @llvm.assume(i1 %eq.i.i4420) #30
  store ptr @_parameterization_Ptri32, ptr %19, align 8
  %2186 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %19)
  %2187 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2178)
  %2188 = sext i32 %2184 to i64
  %2189 = getelementptr ptr, ptr %2178, i64 %2188
  %2190 = getelementptr i8, ptr %2189, i64 120
  %2191 = load ptr, ptr %2190, align 8
  store ptr @i32_typ, ptr %20, align 8
  %2192 = call ptr %2191({ ptr, ptr, ptr, i32 } %2185, ptr nonnull %20)
  %2193 = call { ptr, i160 } %2192({ ptr, ptr, ptr, i32 } %2185, { ptr, ptr, ptr, i32 } %2185, ptr nonnull %19, i32 %2176)
  %.fca.0.extract112.i4421 = extractvalue { ptr, i160 } %2193, 0
  %.sroa.3111.0.insert.ext.i4422 = zext i32 %offset.i.i260.i44034637 to i160
  %.sroa.3111.0.insert.shift.i4423 = shl nuw i160 %.sroa.3111.0.insert.ext.i4422, 128
  %.sroa.2110.0.insert.ext.i4424 = zext i64 %2147 to i160
  %.sroa.2110.0.insert.shift.i4425 = shl nuw nsw i160 %.sroa.2110.0.insert.ext.i4424, 64
  %.sroa.2110.0.insert.insert.i4426 = or disjoint i160 %.sroa.2110.0.insert.shift.i4425, %.sroa.3111.0.insert.shift.i4423
  %.sroa.0109.0.insert.ext.i4427 = zext i64 %2146 to i160
  %.sroa.0109.0.insert.insert.i4428 = or disjoint i160 %.sroa.2110.0.insert.insert.i4426, %.sroa.0109.0.insert.ext.i4427
  %2194 = insertvalue { ptr, i160 } %2143, i160 %.sroa.0109.0.insert.insert.i4428, 1
  %2195 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2196 = load ptr, ptr %286, align 8
  %2197 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2196, 0
  %2198 = load ptr, ptr %287, align 8
  %2199 = insertvalue { ptr, ptr, ptr, i32 } %2197, ptr %2198, 1
  %2200 = load ptr, ptr %380, align 8
  %2201 = insertvalue { ptr, ptr, ptr, i32 } %2199, ptr %2200, 2
  %2202 = load i32, ptr %288, align 4
  %2203 = insertvalue { ptr, ptr, ptr, i32 } %2201, i32 %2202, 3
  %hash_coef_ptr.i.i186.i4433 = getelementptr i8, ptr %2196, i64 8
  %tbl_size_ptr.i.i187.i4434 = getelementptr i8, ptr %2196, i64 16
  %offset_tbl_ptr.i.i188.i4435 = getelementptr i8, ptr %2196, i64 40
  %hash_coef.i.i189.i4436 = load i64, ptr %hash_coef_ptr.i.i186.i4433, align 4
  %tbl_size.i.i190.i4437 = load i64, ptr %tbl_size_ptr.i.i187.i4434, align 4
  %offset_tbl.i.i191.i4438 = load ptr, ptr %offset_tbl_ptr.i.i188.i4435, align 8
  %product.i.i.i192.i4439 = mul i64 %hash_coef.i.i189.i4436, -5261542750394134544
  %shifted.i.i.i193.i4440 = lshr i64 %product.i.i.i192.i4439, 32
  %xored.i.i.i194.i4441 = xor i64 %shifted.i.i.i193.i4440, %product.i.i.i192.i4439
  %hash.i.i.i195.i4442 = and i64 %xored.i.i.i194.i4441, %tbl_size.i.i190.i4437
  %offset_ptr.i.i196.i4443 = getelementptr i32, ptr %offset_tbl.i.i191.i4438, i64 %hash.i.i.i195.i4442
  %offset.i.i197.i4444 = load i32, ptr %offset_ptr.i.i196.i4443, align 4
  %eq.i200.i4445 = icmp eq i32 %2202, %offset.i.i197.i4444
  call void @llvm.assume(i1 %eq.i200.i4445) #30
  %2204 = load ptr, ptr %result.i, align 8
  %2205 = load ptr, ptr %269, align 8
  %result.i.i4446 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2206 = getelementptr i8, ptr %result.i.i4446, i64 16
  store ptr %2205, ptr %2206, align 8
  %2207 = getelementptr i8, ptr %result.i.i4446, i64 8
  store ptr %2204, ptr %2207, align 8
  %2208 = getelementptr i8, ptr %result.i.i4446, i64 24
  store ptr null, ptr %2208, align 8
  %2209 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i4446)
  store ptr @Entry, ptr %result.i.i4446, align 8
  store ptr @_parameterization_Ptri32, ptr %21, align 8
  store ptr %result.i.i4446, ptr %473, align 8
  %2210 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %21)
  %2211 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2196)
  %2212 = sext i32 %2202 to i64
  %2213 = getelementptr ptr, ptr %2196, i64 %2212
  %2214 = getelementptr i8, ptr %2213, i64 128
  %2215 = load ptr, ptr %2214, align 8
  store ptr @i32_typ, ptr %22, align 8
  store ptr %.fca.0.extract11.i3276, ptr %474, align 8
  %2216 = call ptr %2215({ ptr, ptr, ptr, i32 } %2203, ptr nonnull %22)
  call void %2216({ ptr, ptr, ptr, i32 } %2203, { ptr, ptr, ptr, i32 } %2203, ptr nonnull %21, i32 %2176, { ptr, i160 } %2194)
  %2217 = icmp ne ptr %.fca.0.extract112.i4421, @nil_typ
  %2218 = icmp ne ptr %.fca.0.extract112.i4421, null
  %.not140.i4447 = and i1 %2217, %2218
  br i1 %.not140.i4447, label %.cont.cont.i4386, label %2307

2219:                                             ; preds = %2144
  %2220 = add i32 %2154, 2127912214
  %2221 = shl i32 %2154, 12
  %2222 = add i32 %2220, %2221
  %2223 = ashr i32 %2222, 19
  %2224 = xor i32 %2222, %2223
  %2225 = xor i32 %2224, -949894596
  %2226 = add i32 %2225, 374761393
  %2227 = shl i32 %2225, 5
  %2228 = add i32 %2226, %2227
  %2229 = add i32 %2228, -744332180
  %2230 = shl i32 %2228, 9
  %2231 = xor i32 %2229, %2230
  %2232 = add i32 %2231, -42973499
  %2233 = shl i32 %2231, 3
  %2234 = add i32 %2232, %2233
  %2235 = ashr i32 %2234, 16
  %2236 = xor i32 %2234, %2235
  %2237 = xor i32 %2236, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %2238 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2239 = load ptr, ptr %299, align 8
  %2240 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2239, 0
  %2241 = load ptr, ptr %300, align 8
  %2242 = insertvalue { ptr, ptr, ptr, i32 } %2240, ptr %2241, 1
  %2243 = load ptr, ptr %381, align 8
  %2244 = insertvalue { ptr, ptr, ptr, i32 } %2242, ptr %2243, 2
  %2245 = load i32, ptr %301, align 4
  %2246 = insertvalue { ptr, ptr, ptr, i32 } %2244, i32 %2245, 3
  %hash_coef_ptr.i.i10.i5064 = getelementptr i8, ptr %2239, i64 8
  %tbl_size_ptr.i.i11.i5065 = getelementptr i8, ptr %2239, i64 16
  %offset_tbl_ptr.i.i12.i5066 = getelementptr i8, ptr %2239, i64 40
  %hash_coef.i.i13.i5067 = load i64, ptr %hash_coef_ptr.i.i10.i5064, align 4
  %tbl_size.i.i14.i5068 = load i64, ptr %tbl_size_ptr.i.i11.i5065, align 4
  %offset_tbl.i.i15.i5069 = load ptr, ptr %offset_tbl_ptr.i.i12.i5066, align 8
  %product.i.i.i16.i5070 = mul i64 %hash_coef.i.i13.i5067, -5261542750394134544
  %shifted.i.i.i17.i5071 = lshr i64 %product.i.i.i16.i5070, 32
  %xored.i.i.i18.i5072 = xor i64 %shifted.i.i.i17.i5071, %product.i.i.i16.i5070
  %hash.i.i.i19.i5073 = and i64 %xored.i.i.i18.i5072, %tbl_size.i.i14.i5068
  %offset_ptr.i.i20.i5074 = getelementptr i32, ptr %offset_tbl.i.i15.i5069, i64 %hash.i.i.i19.i5073
  %offset.i.i21.i5075 = load i32, ptr %offset_ptr.i.i20.i5074, align 4
  %eq.i.i5076 = icmp eq i32 %2245, %offset.i.i21.i5075
  call void @llvm.assume(i1 %eq.i.i5076) #30
  %2247 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2248 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2239)
  %2249 = sext i32 %2245 to i64
  %2250 = getelementptr ptr, ptr %2239, i64 %2249
  %2251 = getelementptr i8, ptr %2250, i64 64
  %2252 = load ptr, ptr %2251, align 8
  %2253 = call ptr %2252({ ptr, ptr, ptr, i32 } %2246, ptr nonnull %2)
  %2254 = call i32 %2253({ ptr, ptr, ptr, i32 } %2246, { ptr, ptr, ptr, i32 } %2246, ptr nonnull %2)
  %2255 = add i32 %2254, -1
  %2256 = and i32 %2255, %2237
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %2257 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2258 = load ptr, ptr %299, align 8
  %2259 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2258, 0
  %2260 = load ptr, ptr %300, align 8
  %2261 = insertvalue { ptr, ptr, ptr, i32 } %2259, ptr %2260, 1
  %2262 = load ptr, ptr %381, align 8
  %2263 = insertvalue { ptr, ptr, ptr, i32 } %2261, ptr %2262, 2
  %2264 = load i32, ptr %301, align 4
  %2265 = insertvalue { ptr, ptr, ptr, i32 } %2263, i32 %2264, 3
  %hash_coef_ptr.i.i202.i4340 = getelementptr i8, ptr %2258, i64 8
  %tbl_size_ptr.i.i203.i4341 = getelementptr i8, ptr %2258, i64 16
  %offset_tbl_ptr.i.i204.i4342 = getelementptr i8, ptr %2258, i64 40
  %hash_coef.i.i205.i4343 = load i64, ptr %hash_coef_ptr.i.i202.i4340, align 4
  %tbl_size.i.i206.i4344 = load i64, ptr %tbl_size_ptr.i.i203.i4341, align 4
  %offset_tbl.i.i207.i4345 = load ptr, ptr %offset_tbl_ptr.i.i204.i4342, align 8
  %product.i.i.i208.i4346 = mul i64 %hash_coef.i.i205.i4343, -5261542750394134544
  %shifted.i.i.i209.i4347 = lshr i64 %product.i.i.i208.i4346, 32
  %xored.i.i.i210.i4348 = xor i64 %shifted.i.i.i209.i4347, %product.i.i.i208.i4346
  %hash.i.i.i211.i4349 = and i64 %xored.i.i.i210.i4348, %tbl_size.i.i206.i4344
  %offset_ptr.i.i212.i4350 = getelementptr i32, ptr %offset_tbl.i.i207.i4345, i64 %hash.i.i.i211.i4349
  %offset.i.i213.i4351 = load i32, ptr %offset_ptr.i.i212.i4350, align 4
  %eq.i216.i4352 = icmp eq i32 %2264, %offset.i.i213.i4351
  call void @llvm.assume(i1 %eq.i216.i4352) #30
  store ptr @_parameterization_Ptri32, ptr %27, align 8
  %2266 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %27)
  %2267 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2258)
  %2268 = sext i32 %2264 to i64
  %2269 = getelementptr ptr, ptr %2258, i64 %2268
  %2270 = getelementptr i8, ptr %2269, i64 120
  %2271 = load ptr, ptr %2270, align 8
  store ptr @i32_typ, ptr %28, align 8
  %2272 = call ptr %2271({ ptr, ptr, ptr, i32 } %2265, ptr nonnull %28)
  %2273 = call { ptr, i160 } %2272({ ptr, ptr, ptr, i32 } %2265, { ptr, ptr, ptr, i32 } %2265, ptr nonnull %27, i32 %2256)
  %.fca.0.extract87.i4353 = extractvalue { ptr, i160 } %2273, 0
  %.sroa.3.0.insert.ext.i4354 = zext i32 %offset.i.i260.i44034637 to i160
  %.sroa.3.0.insert.shift.i4355 = shl nuw i160 %.sroa.3.0.insert.ext.i4354, 128
  %.sroa.2.0.insert.ext.i4356 = zext i64 %2147 to i160
  %.sroa.2.0.insert.shift.i4357 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i4356, 64
  %.sroa.2.0.insert.insert.i4358 = or disjoint i160 %.sroa.2.0.insert.shift.i4357, %.sroa.3.0.insert.shift.i4355
  %.sroa.0.0.insert.ext.i4359 = zext i64 %2146 to i160
  %.sroa.0.0.insert.insert.i4360 = or disjoint i160 %.sroa.2.0.insert.insert.i4358, %.sroa.0.0.insert.ext.i4359
  %2274 = insertvalue { ptr, i160 } %2143, i160 %.sroa.0.0.insert.insert.i4360, 1
  %2275 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2276 = load ptr, ptr %299, align 8
  %2277 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2276, 0
  %2278 = load ptr, ptr %300, align 8
  %2279 = insertvalue { ptr, ptr, ptr, i32 } %2277, ptr %2278, 1
  %2280 = load ptr, ptr %381, align 8
  %2281 = insertvalue { ptr, ptr, ptr, i32 } %2279, ptr %2280, 2
  %2282 = load i32, ptr %301, align 4
  %2283 = insertvalue { ptr, ptr, ptr, i32 } %2281, i32 %2282, 3
  %hash_coef_ptr.i.i218.i4365 = getelementptr i8, ptr %2276, i64 8
  %tbl_size_ptr.i.i219.i4366 = getelementptr i8, ptr %2276, i64 16
  %offset_tbl_ptr.i.i220.i4367 = getelementptr i8, ptr %2276, i64 40
  %hash_coef.i.i221.i4368 = load i64, ptr %hash_coef_ptr.i.i218.i4365, align 4
  %tbl_size.i.i222.i4369 = load i64, ptr %tbl_size_ptr.i.i219.i4366, align 4
  %offset_tbl.i.i223.i4370 = load ptr, ptr %offset_tbl_ptr.i.i220.i4367, align 8
  %product.i.i.i224.i4371 = mul i64 %hash_coef.i.i221.i4368, -5261542750394134544
  %shifted.i.i.i225.i4372 = lshr i64 %product.i.i.i224.i4371, 32
  %xored.i.i.i226.i4373 = xor i64 %shifted.i.i.i225.i4372, %product.i.i.i224.i4371
  %hash.i.i.i227.i4374 = and i64 %xored.i.i.i226.i4373, %tbl_size.i.i222.i4369
  %offset_ptr.i.i228.i4375 = getelementptr i32, ptr %offset_tbl.i.i223.i4370, i64 %hash.i.i.i227.i4374
  %offset.i.i229.i4376 = load i32, ptr %offset_ptr.i.i228.i4375, align 4
  %eq.i232.i4377 = icmp eq i32 %2282, %offset.i.i229.i4376
  call void @llvm.assume(i1 %eq.i232.i4377) #30
  %2284 = load ptr, ptr %result.i, align 8
  %2285 = load ptr, ptr %269, align 8
  %result.i233.i4378 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2286 = getelementptr i8, ptr %result.i233.i4378, i64 16
  store ptr %2285, ptr %2286, align 8
  %2287 = getelementptr i8, ptr %result.i233.i4378, i64 8
  store ptr %2284, ptr %2287, align 8
  %2288 = getelementptr i8, ptr %result.i233.i4378, i64 24
  store ptr null, ptr %2288, align 8
  %2289 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i233.i4378)
  store ptr @Entry, ptr %result.i233.i4378, align 8
  store ptr @_parameterization_Ptri32, ptr %29, align 8
  store ptr %result.i233.i4378, ptr %471, align 8
  %2290 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %29)
  %2291 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2276)
  %2292 = sext i32 %2282 to i64
  %2293 = getelementptr ptr, ptr %2276, i64 %2292
  %2294 = getelementptr i8, ptr %2293, i64 128
  %2295 = load ptr, ptr %2294, align 8
  store ptr @i32_typ, ptr %30, align 8
  store ptr %.fca.0.extract11.i3276, ptr %472, align 8
  %2296 = call ptr %2295({ ptr, ptr, ptr, i32 } %2283, ptr nonnull %30)
  call void %2296({ ptr, ptr, ptr, i32 } %2283, { ptr, ptr, ptr, i32 } %2283, ptr nonnull %29, i32 %2256, { ptr, i160 } %2274)
  %2297 = icmp ne ptr %.fca.0.extract87.i4353, @nil_typ
  %2298 = icmp ne ptr %.fca.0.extract87.i4353, null
  %.not138.i4379 = and i1 %2297, %2298
  br i1 %.not138.i4379, label %.cont.cont.i4386, label %2307

.cont.cont.i4386:                                 ; preds = %2219, %2157
  %.sink4664 = phi { ptr, i160 } [ %2193, %2157 ], [ %2273, %2219 ]
  %2299 = phi i32 [ 2, %2157 ], [ 1, %2219 ]
  %vptr.i248.sroa.speculated.i4389 = phi ptr [ %.fca.0.extract112.i4421, %2157 ], [ %.fca.0.extract87.i4353, %2219 ]
  %.fca.1.extract89.i4382 = extractvalue { ptr, i160 } %.sink4664, 1
  %.sroa.3407.sroa.4.0.extract.shift.i4383 = lshr i160 %.fca.1.extract89.i4382, 64
  %2300 = trunc i160 %.sroa.3407.sroa.4.0.extract.shift.i4383 to i64
  %2301 = insertelement <2 x i64> poison, i64 %2300, i64 0
  %2302 = trunc i160 %.fca.1.extract89.i4382 to i64
  %2303 = insertelement <2 x i64> %2301, i64 %2302, i64 1
  %hash_coef_ptr.i.i249.i4392 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i4389, i64 8
  %tbl_size_ptr.i.i250.i4393 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i4389, i64 16
  %offset_tbl_ptr.i.i251.i4394 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i4389, i64 40
  %hash_coef.i.i252.i4395 = load i64, ptr %hash_coef_ptr.i.i249.i4392, align 4
  %tbl_size.i.i253.i4396 = load i64, ptr %tbl_size_ptr.i.i250.i4393, align 4
  %offset_tbl.i.i254.i4397 = load ptr, ptr %offset_tbl_ptr.i.i251.i4394, align 8
  %product.i.i.i255.i4398 = mul i64 %hash_coef.i.i252.i4395, 4015701072841558310
  %shifted.i.i.i256.i4399 = lshr i64 %product.i.i.i255.i4398, 32
  %xored.i.i.i257.i4400 = xor i64 %shifted.i.i.i256.i4399, %product.i.i.i255.i4398
  %hash.i.i.i258.i4401 = and i64 %xored.i.i.i257.i4400, %tbl_size.i.i253.i4396
  %offset_ptr.i.i259.i4402 = getelementptr i32, ptr %offset_tbl.i.i254.i4397, i64 %hash.i.i.i258.i4401
  %offset.i.i260.i4403 = load i32, ptr %offset_ptr.i.i259.i4402, align 4
  %2304 = add nuw nsw i32 %.reg2mem193.0677.i4335, 1
  %2305 = load i32, ptr %302, align 4
  %2306 = icmp slt i32 %2304, %2305
  br i1 %2306, label %2144, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4453

2307:                                             ; preds = %2219, %2157
  %2308 = phi ptr [ %31, %2219 ], [ %23, %2157 ]
  %2309 = phi ptr [ %32, %2219 ], [ %24, %2157 ]
  %2310 = phi ptr [ %33, %2219 ], [ %25, %2157 ]
  %2311 = phi ptr [ %.sroa.0.i4300, %2219 ], [ %.sroa.0680.i4298, %2157 ]
  %2312 = phi ptr [ %34, %2219 ], [ %26, %2157 ]
  %2313 = load i32, ptr %382, align 4
  store i32 %2313, ptr %2308, align 4
  store i32 1, ptr %2309, align 4
  %2314 = add i32 %2313, 1
  store i32 %2314, ptr %2310, align 4
  %2315 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  store i32 %2314, ptr %382, align 4
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %2312, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %2311, align 8
  br label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4453

HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4453: ; preds = %.cont.cont.i4386, %2132, %2307
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %19)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %20)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %21)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %22)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %23)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %24)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %25)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i4298)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %26)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %27)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %28)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %29)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %30)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %31)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %32)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %33)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i4300)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %34)
  br label %._crit_edge1.i3278

._crit_edge1.i3278:                               ; preds = %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4453, %2124
  %2316 = add nuw nsw i32 %.reg2mem13.079.i3275, 1
  %2317 = icmp slt i32 %2316, %2083
  br i1 %2317, label %2124, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3296

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3296: ; preds = %._crit_edge1.i3278
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %133)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %134)
  %2318 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %131)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %132)
  %invariant.gep.i3300 = getelementptr i8, ptr %2069, i64 120
  %offset_tbl.i.i24.i3302 = load ptr, ptr %offset_tbl_ptr.i.i48.i2294, align 8
  %hash_coef.i.i22.i3304 = load i64, ptr %hash_coef_ptr.i.i46.i2292, align 4
  %product.i.i.i25.i3305 = mul i64 %hash_coef.i.i22.i3304, -5261542750394134544
  %shifted.i.i.i26.i3306 = lshr i64 %product.i.i.i25.i3305, 32
  %xored.i.i.i27.i3307 = xor i64 %shifted.i.i.i26.i3306, %product.i.i.i25.i3305
  %tbl_size.i.i23.i3309 = load i64, ptr %tbl_size_ptr.i.i47.i2293, align 4
  %hash.i.i.i28.i3310 = and i64 %xored.i.i.i27.i3307, %tbl_size.i.i23.i3309
  %offset_ptr.i.i29.i3311 = getelementptr i32, ptr %offset_tbl.i.i24.i3302, i64 %hash.i.i.i28.i3310
  %offset.i.i30.i3312 = load i32, ptr %offset_ptr.i.i29.i3311, align 4
  %2319 = insertvalue { ptr, ptr, ptr, i32 } %2074, i32 %offset.i.i30.i3312, 3
  %2320 = sext i32 %offset.i.i30.i3312 to i64
  %gep.i3327 = getelementptr ptr, ptr %invariant.gep.i3300, i64 %2320
  %2321 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %2322

2322:                                             ; preds = %._crit_edge1.i3331, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3296
  %.reg2mem13.079.i3328 = phi i32 [ 0, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3296 ], [ %2514, %._crit_edge1.i3331 ]
  store ptr @_parameterization_Ptri32, ptr %131, align 8
  %2323 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %131)
  %2324 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %2069)
  %2325 = load ptr, ptr %gep.i3327, align 8
  store ptr @i32_typ, ptr %132, align 8
  %2326 = call ptr %2325({ ptr, ptr, ptr, i32 } %2319, ptr nonnull %132)
  %2327 = call { ptr, i160 } %2326({ ptr, ptr, ptr, i32 } %2319, { ptr, ptr, ptr, i32 } %2319, ptr nonnull %131, i32 %.reg2mem13.079.i3328)
  %.fca.0.extract11.i3329 = extractvalue { ptr, i160 } %2327, 0
  %2328 = icmp ne ptr %.fca.0.extract11.i3329, @nil_typ
  %2329 = icmp ne ptr %.fca.0.extract11.i3329, null
  %.not17.i3330 = and i1 %2328, %2329
  br i1 %.not17.i3330, label %2330, label %._crit_edge1.i3331

2330:                                             ; preds = %2322
  %hash_coef_ptr.i.i33.i3336 = getelementptr i8, ptr %.fca.0.extract11.i3329, i64 8
  %tbl_size_ptr.i.i34.i3337 = getelementptr i8, ptr %.fca.0.extract11.i3329, i64 16
  %offset_tbl_ptr.i.i35.i3338 = getelementptr i8, ptr %.fca.0.extract11.i3329, i64 40
  %2331 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %5)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %6)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %7)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %8)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %9)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0680.i4454)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %11)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %12)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %13)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %14)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %15)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %16)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %17)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i4456)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %18)
  %hash_coef.i.i147.i4475 = load i64, ptr %hash_coef_ptr.i.i33.i3336, align 4
  %tbl_size.i.i148.i4476 = load i64, ptr %tbl_size_ptr.i.i34.i3337, align 4
  %offset_tbl.i.i149.i4477 = load ptr, ptr %offset_tbl_ptr.i.i35.i3338, align 8
  %product.i.i.i150.i4478 = mul i64 %hash_coef.i.i147.i4475, 4015701072841558310
  %shifted.i.i.i151.i4479 = lshr i64 %product.i.i.i150.i4478, 32
  %xored.i.i.i152.i4480 = xor i64 %shifted.i.i.i151.i4479, %product.i.i.i150.i4478
  %hash.i.i.i153.i4481 = and i64 %xored.i.i.i152.i4480, %tbl_size.i.i148.i4476
  %offset_ptr.i.i154.i4482 = getelementptr i32, ptr %offset_tbl.i.i149.i4477, i64 %hash.i.i.i153.i4481
  %offset.i.i169.i4483 = load i32, ptr %offset_ptr.i.i154.i4482, align 4
  %2332 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2333 = load i32, ptr %302, align 4
  %2334 = icmp sgt i32 %2333, 0
  br i1 %2334, label %.lr.ph.i4489, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4609

.lr.ph.i4489:                                     ; preds = %2330
  %.fca.1.extract13.i3332 = extractvalue { ptr, i160 } %2327, 1
  %.sroa.576.8.extract.shift.i3334 = lshr i160 %.fca.1.extract13.i3332, 64
  %2335 = insertelement <2 x i160> poison, i160 %.sroa.576.8.extract.shift.i3334, i64 0
  %2336 = insertelement <2 x i160> %2335, i160 %.fca.1.extract13.i3332, i64 1
  %2337 = trunc <2 x i160> %2336 to <2 x i64>
  %2338 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i3329, 0
  %2339 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2340 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract11.i3329)
  %invariant.gep4638 = getelementptr i8, ptr %.fca.0.extract11.i3329, i64 64
  %2341 = insertvalue { ptr, i160 } undef, ptr %.fca.0.extract11.i3329, 0
  br label %2342

2342:                                             ; preds = %.cont.cont.i4542, %.lr.ph.i4489
  %offset.i.i260.i45594645 = phi i32 [ %offset.i.i169.i4483, %.lr.ph.i4489 ], [ %offset.i.i260.i4559, %.cont.cont.i4542 ]
  %.reg2mem195.0678.i4490 = phi i32 [ 1, %.lr.ph.i4489 ], [ %2497, %.cont.cont.i4542 ]
  %.reg2mem193.0677.i4491 = phi i32 [ 0, %.lr.ph.i4489 ], [ %2502, %.cont.cont.i4542 ]
  %2343 = phi <2 x i64> [ %2337, %.lr.ph.i4489 ], [ %2501, %.cont.cont.i4542 ]
  %2344 = extractelement <2 x i64> %2343, i64 1
  %.sroa.speculated352.i45464641 = inttoptr i64 %2344 to ptr
  %2345 = extractelement <2 x i64> %2343, i64 0
  %.sroa.speculated346.i45474643 = inttoptr i64 %2345 to ptr
  %2346 = insertvalue { ptr, ptr, ptr, i32 } %2338, ptr %.sroa.speculated352.i45464641, 1
  %2347 = insertvalue { ptr, ptr, ptr, i32 } %2346, ptr %.sroa.speculated346.i45474643, 2
  %2348 = insertvalue { ptr, ptr, ptr, i32 } %2347, i32 %offset.i.i260.i45594645, 3
  %2349 = sext i32 %offset.i.i260.i45594645 to i64
  %gep4639 = getelementptr ptr, ptr %invariant.gep4638, i64 %2349
  %2350 = load ptr, ptr %gep4639, align 8
  %2351 = call ptr %2350({ ptr, ptr, ptr, i32 } %2348, ptr nonnull %2)
  %2352 = call i32 %2351({ ptr, ptr, ptr, i32 } %2348, { ptr, ptr, ptr, i32 } %2348, ptr nonnull %2)
  %2353 = icmp eq i32 %.reg2mem195.0678.i4490, 1
  %2354 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br i1 %2353, label %2355, label %2417

2355:                                             ; preds = %2342
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %2356 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2357 = load ptr, ptr %286, align 8
  %2358 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2357, 0
  %2359 = load ptr, ptr %287, align 8
  %2360 = insertvalue { ptr, ptr, ptr, i32 } %2358, ptr %2359, 1
  %2361 = load ptr, ptr %380, align 8
  %2362 = insertvalue { ptr, ptr, ptr, i32 } %2360, ptr %2361, 2
  %2363 = load i32, ptr %288, align 4
  %2364 = insertvalue { ptr, ptr, ptr, i32 } %2362, i32 %2363, 3
  %hash_coef_ptr.i.i10.i5094 = getelementptr i8, ptr %2357, i64 8
  %tbl_size_ptr.i.i11.i5095 = getelementptr i8, ptr %2357, i64 16
  %offset_tbl_ptr.i.i12.i5096 = getelementptr i8, ptr %2357, i64 40
  %hash_coef.i.i13.i5097 = load i64, ptr %hash_coef_ptr.i.i10.i5094, align 4
  %tbl_size.i.i14.i5098 = load i64, ptr %tbl_size_ptr.i.i11.i5095, align 4
  %offset_tbl.i.i15.i5099 = load ptr, ptr %offset_tbl_ptr.i.i12.i5096, align 8
  %product.i.i.i16.i5100 = mul i64 %hash_coef.i.i13.i5097, -5261542750394134544
  %shifted.i.i.i17.i5101 = lshr i64 %product.i.i.i16.i5100, 32
  %xored.i.i.i18.i5102 = xor i64 %shifted.i.i.i17.i5101, %product.i.i.i16.i5100
  %hash.i.i.i19.i5103 = and i64 %xored.i.i.i18.i5102, %tbl_size.i.i14.i5098
  %offset_ptr.i.i20.i5104 = getelementptr i32, ptr %offset_tbl.i.i15.i5099, i64 %hash.i.i.i19.i5103
  %offset.i.i21.i5105 = load i32, ptr %offset_ptr.i.i20.i5104, align 4
  %eq.i.i5106 = icmp eq i32 %2363, %offset.i.i21.i5105
  call void @llvm.assume(i1 %eq.i.i5106) #30
  %2365 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2366 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2357)
  %2367 = sext i32 %2363 to i64
  %2368 = getelementptr ptr, ptr %2357, i64 %2367
  %2369 = getelementptr i8, ptr %2368, i64 64
  %2370 = load ptr, ptr %2369, align 8
  %2371 = call ptr %2370({ ptr, ptr, ptr, i32 } %2364, ptr nonnull %2)
  %2372 = call i32 %2371({ ptr, ptr, ptr, i32 } %2364, { ptr, ptr, ptr, i32 } %2364, ptr nonnull %2)
  %2373 = add i32 %2372, -1
  %2374 = and i32 %2373, %2352
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %2375 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2376 = load ptr, ptr %286, align 8
  %2377 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2376, 0
  %2378 = load ptr, ptr %287, align 8
  %2379 = insertvalue { ptr, ptr, ptr, i32 } %2377, ptr %2378, 1
  %2380 = load ptr, ptr %380, align 8
  %2381 = insertvalue { ptr, ptr, ptr, i32 } %2379, ptr %2380, 2
  %2382 = load i32, ptr %288, align 4
  %2383 = insertvalue { ptr, ptr, ptr, i32 } %2381, i32 %2382, 3
  %hash_coef_ptr.i.i172.i4564 = getelementptr i8, ptr %2376, i64 8
  %tbl_size_ptr.i.i173.i4565 = getelementptr i8, ptr %2376, i64 16
  %offset_tbl_ptr.i.i174.i4566 = getelementptr i8, ptr %2376, i64 40
  %hash_coef.i.i175.i4567 = load i64, ptr %hash_coef_ptr.i.i172.i4564, align 4
  %tbl_size.i.i176.i4568 = load i64, ptr %tbl_size_ptr.i.i173.i4565, align 4
  %offset_tbl.i.i177.i4569 = load ptr, ptr %offset_tbl_ptr.i.i174.i4566, align 8
  %product.i.i.i178.i4570 = mul i64 %hash_coef.i.i175.i4567, -5261542750394134544
  %shifted.i.i.i179.i4571 = lshr i64 %product.i.i.i178.i4570, 32
  %xored.i.i.i180.i4572 = xor i64 %shifted.i.i.i179.i4571, %product.i.i.i178.i4570
  %hash.i.i.i181.i4573 = and i64 %xored.i.i.i180.i4572, %tbl_size.i.i176.i4568
  %offset_ptr.i.i182.i4574 = getelementptr i32, ptr %offset_tbl.i.i177.i4569, i64 %hash.i.i.i181.i4573
  %offset.i.i183.i4575 = load i32, ptr %offset_ptr.i.i182.i4574, align 4
  %eq.i.i4576 = icmp eq i32 %2382, %offset.i.i183.i4575
  call void @llvm.assume(i1 %eq.i.i4576) #30
  store ptr @_parameterization_Ptri32, ptr %3, align 8
  %2384 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %3)
  %2385 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2376)
  %2386 = sext i32 %2382 to i64
  %2387 = getelementptr ptr, ptr %2376, i64 %2386
  %2388 = getelementptr i8, ptr %2387, i64 120
  %2389 = load ptr, ptr %2388, align 8
  store ptr @i32_typ, ptr %4, align 8
  %2390 = call ptr %2389({ ptr, ptr, ptr, i32 } %2383, ptr nonnull %4)
  %2391 = call { ptr, i160 } %2390({ ptr, ptr, ptr, i32 } %2383, { ptr, ptr, ptr, i32 } %2383, ptr nonnull %3, i32 %2374)
  %.fca.0.extract112.i4577 = extractvalue { ptr, i160 } %2391, 0
  %.sroa.3111.0.insert.ext.i4578 = zext i32 %offset.i.i260.i45594645 to i160
  %.sroa.3111.0.insert.shift.i4579 = shl nuw i160 %.sroa.3111.0.insert.ext.i4578, 128
  %.sroa.2110.0.insert.ext.i4580 = zext i64 %2345 to i160
  %.sroa.2110.0.insert.shift.i4581 = shl nuw nsw i160 %.sroa.2110.0.insert.ext.i4580, 64
  %.sroa.2110.0.insert.insert.i4582 = or disjoint i160 %.sroa.2110.0.insert.shift.i4581, %.sroa.3111.0.insert.shift.i4579
  %.sroa.0109.0.insert.ext.i4583 = zext i64 %2344 to i160
  %.sroa.0109.0.insert.insert.i4584 = or disjoint i160 %.sroa.2110.0.insert.insert.i4582, %.sroa.0109.0.insert.ext.i4583
  %2392 = insertvalue { ptr, i160 } %2341, i160 %.sroa.0109.0.insert.insert.i4584, 1
  %2393 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2394 = load ptr, ptr %286, align 8
  %2395 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2394, 0
  %2396 = load ptr, ptr %287, align 8
  %2397 = insertvalue { ptr, ptr, ptr, i32 } %2395, ptr %2396, 1
  %2398 = load ptr, ptr %380, align 8
  %2399 = insertvalue { ptr, ptr, ptr, i32 } %2397, ptr %2398, 2
  %2400 = load i32, ptr %288, align 4
  %2401 = insertvalue { ptr, ptr, ptr, i32 } %2399, i32 %2400, 3
  %hash_coef_ptr.i.i186.i4589 = getelementptr i8, ptr %2394, i64 8
  %tbl_size_ptr.i.i187.i4590 = getelementptr i8, ptr %2394, i64 16
  %offset_tbl_ptr.i.i188.i4591 = getelementptr i8, ptr %2394, i64 40
  %hash_coef.i.i189.i4592 = load i64, ptr %hash_coef_ptr.i.i186.i4589, align 4
  %tbl_size.i.i190.i4593 = load i64, ptr %tbl_size_ptr.i.i187.i4590, align 4
  %offset_tbl.i.i191.i4594 = load ptr, ptr %offset_tbl_ptr.i.i188.i4591, align 8
  %product.i.i.i192.i4595 = mul i64 %hash_coef.i.i189.i4592, -5261542750394134544
  %shifted.i.i.i193.i4596 = lshr i64 %product.i.i.i192.i4595, 32
  %xored.i.i.i194.i4597 = xor i64 %shifted.i.i.i193.i4596, %product.i.i.i192.i4595
  %hash.i.i.i195.i4598 = and i64 %xored.i.i.i194.i4597, %tbl_size.i.i190.i4593
  %offset_ptr.i.i196.i4599 = getelementptr i32, ptr %offset_tbl.i.i191.i4594, i64 %hash.i.i.i195.i4598
  %offset.i.i197.i4600 = load i32, ptr %offset_ptr.i.i196.i4599, align 4
  %eq.i200.i4601 = icmp eq i32 %2400, %offset.i.i197.i4600
  call void @llvm.assume(i1 %eq.i200.i4601) #30
  %2402 = load ptr, ptr %result.i, align 8
  %2403 = load ptr, ptr %269, align 8
  %result.i.i4602 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2404 = getelementptr i8, ptr %result.i.i4602, i64 16
  store ptr %2403, ptr %2404, align 8
  %2405 = getelementptr i8, ptr %result.i.i4602, i64 8
  store ptr %2402, ptr %2405, align 8
  %2406 = getelementptr i8, ptr %result.i.i4602, i64 24
  store ptr null, ptr %2406, align 8
  %2407 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i4602)
  store ptr @Entry, ptr %result.i.i4602, align 8
  store ptr @_parameterization_Ptri32, ptr %5, align 8
  store ptr %result.i.i4602, ptr %477, align 8
  %2408 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %5)
  %2409 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2394)
  %2410 = sext i32 %2400 to i64
  %2411 = getelementptr ptr, ptr %2394, i64 %2410
  %2412 = getelementptr i8, ptr %2411, i64 128
  %2413 = load ptr, ptr %2412, align 8
  store ptr @i32_typ, ptr %6, align 8
  store ptr %.fca.0.extract11.i3329, ptr %478, align 8
  %2414 = call ptr %2413({ ptr, ptr, ptr, i32 } %2401, ptr nonnull %6)
  call void %2414({ ptr, ptr, ptr, i32 } %2401, { ptr, ptr, ptr, i32 } %2401, ptr nonnull %5, i32 %2374, { ptr, i160 } %2392)
  %2415 = icmp ne ptr %.fca.0.extract112.i4577, @nil_typ
  %2416 = icmp ne ptr %.fca.0.extract112.i4577, null
  %.not140.i4603 = and i1 %2415, %2416
  br i1 %.not140.i4603, label %.cont.cont.i4542, label %2505

2417:                                             ; preds = %2342
  %2418 = add i32 %2352, 2127912214
  %2419 = shl i32 %2352, 12
  %2420 = add i32 %2418, %2419
  %2421 = ashr i32 %2420, 19
  %2422 = xor i32 %2420, %2421
  %2423 = xor i32 %2422, -949894596
  %2424 = add i32 %2423, 374761393
  %2425 = shl i32 %2423, 5
  %2426 = add i32 %2424, %2425
  %2427 = add i32 %2426, -744332180
  %2428 = shl i32 %2426, 9
  %2429 = xor i32 %2427, %2428
  %2430 = add i32 %2429, -42973499
  %2431 = shl i32 %2429, 3
  %2432 = add i32 %2430, %2431
  %2433 = ashr i32 %2432, 16
  %2434 = xor i32 %2432, %2433
  %2435 = xor i32 %2434, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %2436 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2437 = load ptr, ptr %299, align 8
  %2438 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2437, 0
  %2439 = load ptr, ptr %300, align 8
  %2440 = insertvalue { ptr, ptr, ptr, i32 } %2438, ptr %2439, 1
  %2441 = load ptr, ptr %381, align 8
  %2442 = insertvalue { ptr, ptr, ptr, i32 } %2440, ptr %2441, 2
  %2443 = load i32, ptr %301, align 4
  %2444 = insertvalue { ptr, ptr, ptr, i32 } %2442, i32 %2443, 3
  %hash_coef_ptr.i.i10.i5124 = getelementptr i8, ptr %2437, i64 8
  %tbl_size_ptr.i.i11.i5125 = getelementptr i8, ptr %2437, i64 16
  %offset_tbl_ptr.i.i12.i5126 = getelementptr i8, ptr %2437, i64 40
  %hash_coef.i.i13.i5127 = load i64, ptr %hash_coef_ptr.i.i10.i5124, align 4
  %tbl_size.i.i14.i5128 = load i64, ptr %tbl_size_ptr.i.i11.i5125, align 4
  %offset_tbl.i.i15.i5129 = load ptr, ptr %offset_tbl_ptr.i.i12.i5126, align 8
  %product.i.i.i16.i5130 = mul i64 %hash_coef.i.i13.i5127, -5261542750394134544
  %shifted.i.i.i17.i5131 = lshr i64 %product.i.i.i16.i5130, 32
  %xored.i.i.i18.i5132 = xor i64 %shifted.i.i.i17.i5131, %product.i.i.i16.i5130
  %hash.i.i.i19.i5133 = and i64 %xored.i.i.i18.i5132, %tbl_size.i.i14.i5128
  %offset_ptr.i.i20.i5134 = getelementptr i32, ptr %offset_tbl.i.i15.i5129, i64 %hash.i.i.i19.i5133
  %offset.i.i21.i5135 = load i32, ptr %offset_ptr.i.i20.i5134, align 4
  %eq.i.i5136 = icmp eq i32 %2443, %offset.i.i21.i5135
  call void @llvm.assume(i1 %eq.i.i5136) #30
  %2445 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2446 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2437)
  %2447 = sext i32 %2443 to i64
  %2448 = getelementptr ptr, ptr %2437, i64 %2447
  %2449 = getelementptr i8, ptr %2448, i64 64
  %2450 = load ptr, ptr %2449, align 8
  %2451 = call ptr %2450({ ptr, ptr, ptr, i32 } %2444, ptr nonnull %2)
  %2452 = call i32 %2451({ ptr, ptr, ptr, i32 } %2444, { ptr, ptr, ptr, i32 } %2444, ptr nonnull %2)
  %2453 = add i32 %2452, -1
  %2454 = and i32 %2453, %2435
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %2455 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2456 = load ptr, ptr %299, align 8
  %2457 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2456, 0
  %2458 = load ptr, ptr %300, align 8
  %2459 = insertvalue { ptr, ptr, ptr, i32 } %2457, ptr %2458, 1
  %2460 = load ptr, ptr %381, align 8
  %2461 = insertvalue { ptr, ptr, ptr, i32 } %2459, ptr %2460, 2
  %2462 = load i32, ptr %301, align 4
  %2463 = insertvalue { ptr, ptr, ptr, i32 } %2461, i32 %2462, 3
  %hash_coef_ptr.i.i202.i4496 = getelementptr i8, ptr %2456, i64 8
  %tbl_size_ptr.i.i203.i4497 = getelementptr i8, ptr %2456, i64 16
  %offset_tbl_ptr.i.i204.i4498 = getelementptr i8, ptr %2456, i64 40
  %hash_coef.i.i205.i4499 = load i64, ptr %hash_coef_ptr.i.i202.i4496, align 4
  %tbl_size.i.i206.i4500 = load i64, ptr %tbl_size_ptr.i.i203.i4497, align 4
  %offset_tbl.i.i207.i4501 = load ptr, ptr %offset_tbl_ptr.i.i204.i4498, align 8
  %product.i.i.i208.i4502 = mul i64 %hash_coef.i.i205.i4499, -5261542750394134544
  %shifted.i.i.i209.i4503 = lshr i64 %product.i.i.i208.i4502, 32
  %xored.i.i.i210.i4504 = xor i64 %shifted.i.i.i209.i4503, %product.i.i.i208.i4502
  %hash.i.i.i211.i4505 = and i64 %xored.i.i.i210.i4504, %tbl_size.i.i206.i4500
  %offset_ptr.i.i212.i4506 = getelementptr i32, ptr %offset_tbl.i.i207.i4501, i64 %hash.i.i.i211.i4505
  %offset.i.i213.i4507 = load i32, ptr %offset_ptr.i.i212.i4506, align 4
  %eq.i216.i4508 = icmp eq i32 %2462, %offset.i.i213.i4507
  call void @llvm.assume(i1 %eq.i216.i4508) #30
  store ptr @_parameterization_Ptri32, ptr %11, align 8
  %2464 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %11)
  %2465 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2456)
  %2466 = sext i32 %2462 to i64
  %2467 = getelementptr ptr, ptr %2456, i64 %2466
  %2468 = getelementptr i8, ptr %2467, i64 120
  %2469 = load ptr, ptr %2468, align 8
  store ptr @i32_typ, ptr %12, align 8
  %2470 = call ptr %2469({ ptr, ptr, ptr, i32 } %2463, ptr nonnull %12)
  %2471 = call { ptr, i160 } %2470({ ptr, ptr, ptr, i32 } %2463, { ptr, ptr, ptr, i32 } %2463, ptr nonnull %11, i32 %2454)
  %.fca.0.extract87.i4509 = extractvalue { ptr, i160 } %2471, 0
  %.sroa.3.0.insert.ext.i4510 = zext i32 %offset.i.i260.i45594645 to i160
  %.sroa.3.0.insert.shift.i4511 = shl nuw i160 %.sroa.3.0.insert.ext.i4510, 128
  %.sroa.2.0.insert.ext.i4512 = zext i64 %2345 to i160
  %.sroa.2.0.insert.shift.i4513 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i4512, 64
  %.sroa.2.0.insert.insert.i4514 = or disjoint i160 %.sroa.2.0.insert.shift.i4513, %.sroa.3.0.insert.shift.i4511
  %.sroa.0.0.insert.ext.i4515 = zext i64 %2344 to i160
  %.sroa.0.0.insert.insert.i4516 = or disjoint i160 %.sroa.2.0.insert.insert.i4514, %.sroa.0.0.insert.ext.i4515
  %2472 = insertvalue { ptr, i160 } %2341, i160 %.sroa.0.0.insert.insert.i4516, 1
  %2473 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2474 = load ptr, ptr %299, align 8
  %2475 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2474, 0
  %2476 = load ptr, ptr %300, align 8
  %2477 = insertvalue { ptr, ptr, ptr, i32 } %2475, ptr %2476, 1
  %2478 = load ptr, ptr %381, align 8
  %2479 = insertvalue { ptr, ptr, ptr, i32 } %2477, ptr %2478, 2
  %2480 = load i32, ptr %301, align 4
  %2481 = insertvalue { ptr, ptr, ptr, i32 } %2479, i32 %2480, 3
  %hash_coef_ptr.i.i218.i4521 = getelementptr i8, ptr %2474, i64 8
  %tbl_size_ptr.i.i219.i4522 = getelementptr i8, ptr %2474, i64 16
  %offset_tbl_ptr.i.i220.i4523 = getelementptr i8, ptr %2474, i64 40
  %hash_coef.i.i221.i4524 = load i64, ptr %hash_coef_ptr.i.i218.i4521, align 4
  %tbl_size.i.i222.i4525 = load i64, ptr %tbl_size_ptr.i.i219.i4522, align 4
  %offset_tbl.i.i223.i4526 = load ptr, ptr %offset_tbl_ptr.i.i220.i4523, align 8
  %product.i.i.i224.i4527 = mul i64 %hash_coef.i.i221.i4524, -5261542750394134544
  %shifted.i.i.i225.i4528 = lshr i64 %product.i.i.i224.i4527, 32
  %xored.i.i.i226.i4529 = xor i64 %shifted.i.i.i225.i4528, %product.i.i.i224.i4527
  %hash.i.i.i227.i4530 = and i64 %xored.i.i.i226.i4529, %tbl_size.i.i222.i4525
  %offset_ptr.i.i228.i4531 = getelementptr i32, ptr %offset_tbl.i.i223.i4526, i64 %hash.i.i.i227.i4530
  %offset.i.i229.i4532 = load i32, ptr %offset_ptr.i.i228.i4531, align 4
  %eq.i232.i4533 = icmp eq i32 %2480, %offset.i.i229.i4532
  call void @llvm.assume(i1 %eq.i232.i4533) #30
  %2482 = load ptr, ptr %result.i, align 8
  %2483 = load ptr, ptr %269, align 8
  %result.i233.i4534 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2484 = getelementptr i8, ptr %result.i233.i4534, i64 16
  store ptr %2483, ptr %2484, align 8
  %2485 = getelementptr i8, ptr %result.i233.i4534, i64 8
  store ptr %2482, ptr %2485, align 8
  %2486 = getelementptr i8, ptr %result.i233.i4534, i64 24
  store ptr null, ptr %2486, align 8
  %2487 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i233.i4534)
  store ptr @Entry, ptr %result.i233.i4534, align 8
  store ptr @_parameterization_Ptri32, ptr %13, align 8
  store ptr %result.i233.i4534, ptr %475, align 8
  %2488 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %13)
  %2489 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2474)
  %2490 = sext i32 %2480 to i64
  %2491 = getelementptr ptr, ptr %2474, i64 %2490
  %2492 = getelementptr i8, ptr %2491, i64 128
  %2493 = load ptr, ptr %2492, align 8
  store ptr @i32_typ, ptr %14, align 8
  store ptr %.fca.0.extract11.i3329, ptr %476, align 8
  %2494 = call ptr %2493({ ptr, ptr, ptr, i32 } %2481, ptr nonnull %14)
  call void %2494({ ptr, ptr, ptr, i32 } %2481, { ptr, ptr, ptr, i32 } %2481, ptr nonnull %13, i32 %2454, { ptr, i160 } %2472)
  %2495 = icmp ne ptr %.fca.0.extract87.i4509, @nil_typ
  %2496 = icmp ne ptr %.fca.0.extract87.i4509, null
  %.not138.i4535 = and i1 %2495, %2496
  br i1 %.not138.i4535, label %.cont.cont.i4542, label %2505

.cont.cont.i4542:                                 ; preds = %2417, %2355
  %.sink4666 = phi { ptr, i160 } [ %2391, %2355 ], [ %2471, %2417 ]
  %2497 = phi i32 [ 2, %2355 ], [ 1, %2417 ]
  %vptr.i248.sroa.speculated.i4545 = phi ptr [ %.fca.0.extract112.i4577, %2355 ], [ %.fca.0.extract87.i4509, %2417 ]
  %.fca.1.extract89.i4538 = extractvalue { ptr, i160 } %.sink4666, 1
  %.sroa.3407.sroa.4.0.extract.shift.i4539 = lshr i160 %.fca.1.extract89.i4538, 64
  %2498 = trunc i160 %.sroa.3407.sroa.4.0.extract.shift.i4539 to i64
  %2499 = insertelement <2 x i64> poison, i64 %2498, i64 0
  %2500 = trunc i160 %.fca.1.extract89.i4538 to i64
  %2501 = insertelement <2 x i64> %2499, i64 %2500, i64 1
  %hash_coef_ptr.i.i249.i4548 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i4545, i64 8
  %tbl_size_ptr.i.i250.i4549 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i4545, i64 16
  %offset_tbl_ptr.i.i251.i4550 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i4545, i64 40
  %hash_coef.i.i252.i4551 = load i64, ptr %hash_coef_ptr.i.i249.i4548, align 4
  %tbl_size.i.i253.i4552 = load i64, ptr %tbl_size_ptr.i.i250.i4549, align 4
  %offset_tbl.i.i254.i4553 = load ptr, ptr %offset_tbl_ptr.i.i251.i4550, align 8
  %product.i.i.i255.i4554 = mul i64 %hash_coef.i.i252.i4551, 4015701072841558310
  %shifted.i.i.i256.i4555 = lshr i64 %product.i.i.i255.i4554, 32
  %xored.i.i.i257.i4556 = xor i64 %shifted.i.i.i256.i4555, %product.i.i.i255.i4554
  %hash.i.i.i258.i4557 = and i64 %xored.i.i.i257.i4556, %tbl_size.i.i253.i4552
  %offset_ptr.i.i259.i4558 = getelementptr i32, ptr %offset_tbl.i.i254.i4553, i64 %hash.i.i.i258.i4557
  %offset.i.i260.i4559 = load i32, ptr %offset_ptr.i.i259.i4558, align 4
  %2502 = add nuw nsw i32 %.reg2mem193.0677.i4491, 1
  %2503 = load i32, ptr %302, align 4
  %2504 = icmp slt i32 %2502, %2503
  br i1 %2504, label %2342, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4609

2505:                                             ; preds = %2417, %2355
  %2506 = phi ptr [ %15, %2417 ], [ %7, %2355 ]
  %2507 = phi ptr [ %16, %2417 ], [ %8, %2355 ]
  %2508 = phi ptr [ %17, %2417 ], [ %9, %2355 ]
  %2509 = phi ptr [ %.sroa.0.i4456, %2417 ], [ %.sroa.0680.i4454, %2355 ]
  %2510 = phi ptr [ %18, %2417 ], [ %10, %2355 ]
  %2511 = load i32, ptr %382, align 4
  store i32 %2511, ptr %2506, align 4
  store i32 1, ptr %2507, align 4
  %2512 = add i32 %2511, 1
  store i32 %2512, ptr %2508, align 4
  %2513 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  store i32 %2512, ptr %382, align 4
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %2510, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %2509, align 8
  br label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4609

HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4609: ; preds = %.cont.cont.i4542, %2330, %2505
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %5)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %6)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %7)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %8)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %9)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i4454)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %11)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %12)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %13)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %14)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %15)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %16)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %17)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i4456)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %18)
  br label %._crit_edge1.i3331

._crit_edge1.i3331:                               ; preds = %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4609, %2322
  %2514 = add nuw nsw i32 %.reg2mem13.079.i3328, 1
  %2515 = icmp slt i32 %2514, %2083
  br i1 %2515, label %2322, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3349

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3349.critedge: ; preds = %._crit_edge3.1.i780
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %133)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %134)
  %2516 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %131)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %132)
  br label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3349

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3349: ; preds = %._crit_edge1.i3331, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3349.critedge
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %131)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %132)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %155)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %156)
  br label %HashMap_insert_keyK_valueV.exit865

HashMap_insert_keyK_valueV.exit865:               ; preds = %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit2256.thread, %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit.thread2470, %.thread525.i840, %.thread528.i798, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3349
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %237)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %238)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %239)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %240)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %241)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %242)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %243)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %244)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %245)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %246)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %247)
  %2517 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %2518 = load ptr, ptr %308, align 8
  %2519 = sext i32 %.reg2mem131.0303 to i64
  %2520 = shl nsw i64 %2519, 5
  %2521 = getelementptr i8, ptr %2518, i64 %2520
  store ptr @i32_typ, ptr %2521, align 8
  %2522 = getelementptr i8, ptr %2521, i64 8
  store i160 %.sroa.071.0.insert.ext, ptr %2522, align 4
  store i1 true, ptr %.sroa.048.sroa.0, align 8
  %.sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.0. = load i8, ptr %.sroa.048.sroa.0, align 8
  %.sroa.048.0.insert.ext = zext i8 %.sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.sroa.0.0..sroa.048.0. to i160
  %2523 = insertvalue { ptr, i160 } { ptr @bool_typ, i160 undef }, i160 %.sroa.048.0.insert.ext, 1
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %248)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %249)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %250)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %251)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %252)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %253)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %254)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %255)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %256)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %257)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %258)
  %2524 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2525 = load ptr, ptr %314, align 8
  %2526 = call i32 %2525({ ptr, i160 } %485)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %2527 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2528 = load ptr, ptr %326, align 8
  %2529 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2528, 0
  %2530 = load ptr, ptr %327, align 8
  %2531 = insertvalue { ptr, ptr, ptr, i32 } %2529, ptr %2530, 1
  %2532 = load ptr, ptr %328, align 8
  %2533 = insertvalue { ptr, ptr, ptr, i32 } %2531, ptr %2532, 2
  %2534 = load i32, ptr %329, align 4
  %2535 = insertvalue { ptr, ptr, ptr, i32 } %2533, i32 %2534, 3
  %hash_coef_ptr.i.i10.i1070 = getelementptr i8, ptr %2528, i64 8
  %tbl_size_ptr.i.i11.i1071 = getelementptr i8, ptr %2528, i64 16
  %offset_tbl_ptr.i.i12.i1072 = getelementptr i8, ptr %2528, i64 40
  %hash_coef.i.i13.i1073 = load i64, ptr %hash_coef_ptr.i.i10.i1070, align 4
  %tbl_size.i.i14.i1074 = load i64, ptr %tbl_size_ptr.i.i11.i1071, align 4
  %offset_tbl.i.i15.i1075 = load ptr, ptr %offset_tbl_ptr.i.i12.i1072, align 8
  %product.i.i.i16.i1076 = mul i64 %hash_coef.i.i13.i1073, -5261542750394134544
  %shifted.i.i.i17.i1077 = lshr i64 %product.i.i.i16.i1076, 32
  %xored.i.i.i18.i1078 = xor i64 %shifted.i.i.i17.i1077, %product.i.i.i16.i1076
  %hash.i.i.i19.i1079 = and i64 %xored.i.i.i18.i1078, %tbl_size.i.i14.i1074
  %offset_ptr.i.i20.i1080 = getelementptr i32, ptr %offset_tbl.i.i15.i1075, i64 %hash.i.i.i19.i1079
  %offset.i.i21.i1081 = load i32, ptr %offset_ptr.i.i20.i1080, align 4
  %eq.i.i1082 = icmp eq i32 %2534, %offset.i.i21.i1081
  call void @llvm.assume(i1 %eq.i.i1082) #30
  %2536 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2537 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2528)
  %2538 = sext i32 %2534 to i64
  %2539 = getelementptr ptr, ptr %2528, i64 %2538
  %2540 = getelementptr i8, ptr %2539, i64 64
  %2541 = load ptr, ptr %2540, align 8
  %2542 = call ptr %2541({ ptr, ptr, ptr, i32 } %2535, ptr nonnull %2)
  %2543 = call i32 %2542({ ptr, ptr, ptr, i32 } %2535, { ptr, ptr, ptr, i32 } %2535, ptr nonnull %2)
  %2544 = add i32 %2543, -1
  %2545 = and i32 %2544, %2526
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %2546 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2547 = load ptr, ptr %326, align 8
  %2548 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2547, 0
  %2549 = load ptr, ptr %327, align 8
  %2550 = insertvalue { ptr, ptr, ptr, i32 } %2548, ptr %2549, 1
  %2551 = load ptr, ptr %328, align 8
  %2552 = insertvalue { ptr, ptr, ptr, i32 } %2550, ptr %2551, 2
  %2553 = load i32, ptr %329, align 4
  %2554 = insertvalue { ptr, ptr, ptr, i32 } %2552, i32 %2553, 3
  %hash_coef_ptr.i.i160.i = getelementptr i8, ptr %2547, i64 8
  %tbl_size_ptr.i.i161.i = getelementptr i8, ptr %2547, i64 16
  %offset_tbl_ptr.i.i162.i = getelementptr i8, ptr %2547, i64 40
  %hash_coef.i.i163.i = load i64, ptr %hash_coef_ptr.i.i160.i, align 4
  %tbl_size.i.i164.i = load i64, ptr %tbl_size_ptr.i.i161.i, align 4
  %offset_tbl.i.i165.i = load ptr, ptr %offset_tbl_ptr.i.i162.i, align 8
  %product.i.i.i166.i = mul i64 %hash_coef.i.i163.i, -5261542750394134544
  %shifted.i.i.i167.i = lshr i64 %product.i.i.i166.i, 32
  %xored.i.i.i168.i = xor i64 %shifted.i.i.i167.i, %product.i.i.i166.i
  %hash.i.i.i169.i = and i64 %xored.i.i.i168.i, %tbl_size.i.i164.i
  %offset_ptr.i.i170.i = getelementptr i32, ptr %offset_tbl.i.i165.i, i64 %hash.i.i.i169.i
  %offset.i.i171.i = load i32, ptr %offset_ptr.i.i170.i, align 4
  %eq.i.i546 = icmp eq i32 %2553, %offset.i.i171.i
  call void @llvm.assume(i1 %eq.i.i546) #30
  store ptr @_parameterization_Ptri32, ptr %257, align 8
  %2555 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %257)
  %2556 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2547)
  %2557 = sext i32 %2553 to i64
  %2558 = getelementptr ptr, ptr %2547, i64 %2557
  %2559 = getelementptr i8, ptr %2558, i64 120
  %2560 = load ptr, ptr %2559, align 8
  store ptr @i32_typ, ptr %258, align 8
  %2561 = call ptr %2560({ ptr, ptr, ptr, i32 } %2554, ptr nonnull %258)
  %2562 = call { ptr, i160 } %2561({ ptr, ptr, ptr, i32 } %2554, { ptr, ptr, ptr, i32 } %2554, ptr nonnull %257, i32 %2545)
  %.fca.0.extract.i547 = extractvalue { ptr, i160 } %2562, 0
  %2563 = icmp ne ptr %.fca.0.extract.i547, @nil_typ
  %2564 = icmp ne ptr %.fca.0.extract.i547, null
  %.not151.i = and i1 %2563, %2564
  br i1 %.not151.i, label %2565, label %.critedge.i548

2565:                                             ; preds = %HashMap_insert_keyK_valueV.exit865
  %.fca.1.extract.i549 = extractvalue { ptr, i160 } %2562, 1
  %.sroa.4518.8.extract.trunc.i = trunc i160 %.fca.1.extract.i549 to i64
  %2566 = inttoptr i64 %.sroa.4518.8.extract.trunc.i to ptr
  %.sroa.7520.8.extract.shift.i = lshr i160 %.fca.1.extract.i549, 64
  %.sroa.7520.8.extract.trunc.i = trunc i160 %.sroa.7520.8.extract.shift.i to i64
  %2567 = inttoptr i64 %.sroa.7520.8.extract.trunc.i to ptr
  %hash_coef_ptr.i.i174.i550 = getelementptr i8, ptr %.fca.0.extract.i547, i64 8
  %tbl_size_ptr.i.i175.i551 = getelementptr i8, ptr %.fca.0.extract.i547, i64 16
  %offset_tbl_ptr.i.i176.i552 = getelementptr i8, ptr %.fca.0.extract.i547, i64 40
  %hash_coef.i.i177.i553 = load i64, ptr %hash_coef_ptr.i.i174.i550, align 4
  %tbl_size.i.i178.i554 = load i64, ptr %tbl_size_ptr.i.i175.i551, align 4
  %offset_tbl.i.i179.i555 = load ptr, ptr %offset_tbl_ptr.i.i176.i552, align 8
  %product.i.i.i180.i556 = mul i64 %hash_coef.i.i177.i553, 4015701072841558310
  %shifted.i.i.i181.i557 = lshr i64 %product.i.i.i180.i556, 32
  %xored.i.i.i182.i558 = xor i64 %shifted.i.i.i181.i557, %product.i.i.i180.i556
  %hash.i.i.i183.i559 = and i64 %xored.i.i.i182.i558, %tbl_size.i.i178.i554
  %offset_ptr.i.i184.i560 = getelementptr i32, ptr %offset_tbl.i.i179.i555, i64 %hash.i.i.i183.i559
  %offset.i.i185.i561 = load i32, ptr %offset_ptr.i.i184.i560, align 4
  %2568 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract.i547, 0
  %2569 = insertvalue { ptr, ptr, ptr, i32 } %2568, ptr %2566, 1
  %2570 = insertvalue { ptr, ptr, ptr, i32 } %2569, ptr %2567, 2
  %2571 = insertvalue { ptr, ptr, ptr, i32 } %2570, i32 %offset.i.i185.i561, 3
  %2572 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2573 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2574 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract.i547)
  %2575 = sext i32 %offset.i.i185.i561 to i64
  %2576 = getelementptr ptr, ptr %.fca.0.extract.i547, i64 %2575
  %2577 = getelementptr i8, ptr %2576, i64 64
  %2578 = load ptr, ptr %2577, align 8
  %2579 = call ptr %2578({ ptr, ptr, ptr, i32 } %2571, ptr nonnull %2)
  %2580 = call i32 %2579({ ptr, ptr, ptr, i32 } %2571, { ptr, ptr, ptr, i32 } %2571, ptr nonnull %2)
  %2581 = icmp eq i32 %2580, %2526
  br i1 %2581, label %2582, label %.critedge.i548

2582:                                             ; preds = %2565
  %2583 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2584 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2585 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract.i547)
  %2586 = getelementptr i8, ptr %2576, i64 48
  %2587 = load ptr, ptr %2586, align 8
  %2588 = call ptr %2587({ ptr, ptr, ptr, i32 } %2571, ptr nonnull %2)
  %2589 = call { ptr, i160 } %2588({ ptr, ptr, ptr, i32 } %2571, { ptr, ptr, ptr, i32 } %2571, ptr nonnull %2)
  %2590 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2591 = load ptr, ptr %315, align 8
  %2592 = call i1 %2591({ ptr, i160 } %2589, { ptr, i160 } %485)
  br i1 %2592, label %.thread525.i, label %.critedge.i548

.thread525.i:                                     ; preds = %2582
  %2593 = load ptr, ptr %result.i111, align 8
  %2594 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2595 = load ptr, ptr %309, align 8
  %2596 = load ptr, ptr %2593, align 8
  %2597 = getelementptr i8, ptr %2596, i64 48
  %2598 = load ptr, ptr %2597, align 8
  %2599 = call { i64, i64 } %2598(ptr nonnull %2593)
  %2600 = extractvalue { i64, i64 } %2599, 0
  %2601 = extractvalue { i64, i64 } %2599, 1
  %2602 = urem i64 20, %2601
  %2603 = icmp eq i64 %2602, 0
  %2604 = sub i64 %2601, %2602
  %2605 = select i1 %2603, i64 0, i64 %2604
  %2606 = add i64 %2600, 20
  %2607 = add i64 %2606, %2605
  %2608 = load ptr, ptr %2595, align 8
  %2609 = getelementptr i8, ptr %2608, i64 48
  %2610 = load ptr, ptr %2609, align 8
  %2611 = call { i64, i64 } %2610(ptr nonnull %2595)
  %2612 = extractvalue { i64, i64 } %2611, 0
  %2613 = extractvalue { i64, i64 } %2611, 1
  %2614 = call i64 @llvm.umax.i64(i64 %2601, i64 %2613)
  %2615 = call i64 @llvm.umax.i64(i64 %2614, i64 8)
  %2616 = urem i64 %2607, %2613
  %2617 = icmp eq i64 %2616, 0
  %2618 = sub i64 %2613, %2616
  %2619 = select i1 %2617, i64 0, i64 %2618
  %2620 = add i64 %2612, %2607
  %2621 = add i64 %2620, %2619
  %2622 = urem i64 %2621, %2615
  %2623 = icmp eq i64 %2622, 0
  %2624 = sub i64 %2615, %2622
  %2625 = select i1 %2623, i64 0, i64 %2624
  %2626 = add i64 %2625, %2621
  %result.i.i562 = call noalias ptr @bump_malloc_inner(i64 noundef %2626, ptr nonnull @current_ptr) #29
  store ptr %2593, ptr %result.i.i562, align 8
  %2627 = getelementptr i8, ptr %result.i.i562, i64 8
  store ptr %2595, ptr %2627, align 8
  %2628 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i.i562)
  store ptr @Entry, ptr %248, align 8
  store ptr %result.i.i562, ptr %362, align 8
  store i32 9, ptr %363, align 8
  %2629 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %248)
  %2630 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2631 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %2632 = load ptr, ptr %2593, align 8
  %2633 = getelementptr i8, ptr %2632, i64 48
  %2634 = load ptr, ptr %2633, align 8
  %2635 = call { i64, i64 } %2634(ptr nonnull %2593)
  %2636 = extractvalue { i64, i64 } %2635, 1
  %2637 = urem i64 20, %2636
  %2638 = icmp eq i64 %2637, 0
  %reass.sub5170 = sub i64 %2636, %2637
  %2639 = add i64 %reass.sub5170, 20
  %2640 = select i1 %2638, i64 20, i64 %2639
  %2641 = getelementptr i8, ptr %result.i.i562, i64 %2640
  %2642 = load ptr, ptr %result.i.i562, align 8
  %2643 = load ptr, ptr %2642, align 8
  %2644 = getelementptr i8, ptr %2643, i64 64
  %2645 = load ptr, ptr %2644, align 8
  call void %2645({ ptr, i160 } %485, ptr nonnull %2642, ptr %2641)
  %2646 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %2647 = load ptr, ptr %result.i.i562, align 8
  %2648 = load ptr, ptr %2647, align 8
  %2649 = getelementptr i8, ptr %2648, i64 48
  %2650 = load ptr, ptr %2649, align 8
  %2651 = call { i64, i64 } %2650(ptr nonnull %2647)
  %2652 = extractvalue { i64, i64 } %2651, 0
  %2653 = extractvalue { i64, i64 } %2651, 1
  %2654 = urem i64 20, %2653
  %2655 = icmp eq i64 %2654, 0
  %2656 = sub i64 %2653, %2654
  %2657 = select i1 %2655, i64 0, i64 %2656
  %2658 = add i64 %2652, 20
  %2659 = add i64 %2658, %2657
  %2660 = load ptr, ptr %2627, align 8
  %2661 = load ptr, ptr %2660, align 8
  %2662 = getelementptr i8, ptr %2661, i64 48
  %2663 = load ptr, ptr %2662, align 8
  %2664 = call { i64, i64 } %2663(ptr nonnull %2660)
  %2665 = extractvalue { i64, i64 } %2664, 1
  %2666 = urem i64 %2659, %2665
  %2667 = icmp eq i64 %2666, 0
  %2668 = sub i64 %2665, %2666
  %2669 = select i1 %2667, i64 0, i64 %2668
  %2670 = getelementptr i8, ptr %result.i.i562, i64 %2659
  %2671 = getelementptr i8, ptr %2670, i64 %2669
  %2672 = load ptr, ptr %2627, align 8
  %2673 = load ptr, ptr %2672, align 8
  %2674 = getelementptr i8, ptr %2673, i64 64
  %2675 = load ptr, ptr %2674, align 8
  call void %2675({ ptr, i160 } %2523, ptr nonnull %2672, ptr %2671)
  %2676 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %2677 = getelementptr i8, ptr %result.i.i562, i64 16
  store i32 %2526, ptr %2677, align 4
  %2678 = load ptr, ptr %364, align 8
  %2679 = ptrtoint ptr %result.i.i562 to i64
  %2680 = ptrtoint ptr %2678 to i64
  %.sroa.2129.0.insert.ext.i = zext i64 %2680 to i160
  %.sroa.2129.0.insert.shift.i = shl nuw nsw i160 %.sroa.2129.0.insert.ext.i, 64
  %.sroa.0128.0.insert.ext.i = zext i64 %2679 to i160
  %.sroa.2129.0.insert.insert.i = or disjoint i160 %.sroa.2129.0.insert.shift.i, %.sroa.0128.0.insert.ext.i
  %.sroa.0128.0.insert.insert.i = or disjoint i160 %.sroa.2129.0.insert.insert.i, 3062541302288446171170371466885913903104
  %2681 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0128.0.insert.insert.i, 1
  %2682 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2683 = load ptr, ptr %326, align 8
  %2684 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2683, 0
  %2685 = load ptr, ptr %327, align 8
  %2686 = insertvalue { ptr, ptr, ptr, i32 } %2684, ptr %2685, 1
  %2687 = load ptr, ptr %328, align 8
  %2688 = insertvalue { ptr, ptr, ptr, i32 } %2686, ptr %2687, 2
  %2689 = load i32, ptr %329, align 4
  %2690 = insertvalue { ptr, ptr, ptr, i32 } %2688, i32 %2689, 3
  %hash_coef_ptr.i.i202.i = getelementptr i8, ptr %2683, i64 8
  %tbl_size_ptr.i.i203.i = getelementptr i8, ptr %2683, i64 16
  %offset_tbl_ptr.i.i204.i = getelementptr i8, ptr %2683, i64 40
  %hash_coef.i.i205.i = load i64, ptr %hash_coef_ptr.i.i202.i, align 4
  %tbl_size.i.i206.i = load i64, ptr %tbl_size_ptr.i.i203.i, align 4
  %offset_tbl.i.i207.i = load ptr, ptr %offset_tbl_ptr.i.i204.i, align 8
  %product.i.i.i208.i = mul i64 %hash_coef.i.i205.i, -5261542750394134544
  %shifted.i.i.i209.i = lshr i64 %product.i.i.i208.i, 32
  %xored.i.i.i210.i = xor i64 %shifted.i.i.i209.i, %product.i.i.i208.i
  %hash.i.i.i211.i = and i64 %xored.i.i.i210.i, %tbl_size.i.i206.i
  %offset_ptr.i.i212.i = getelementptr i32, ptr %offset_tbl.i.i207.i, i64 %hash.i.i.i211.i
  %offset.i.i213.i = load i32, ptr %offset_ptr.i.i212.i, align 4
  %eq.i216.i = icmp eq i32 %2689, %offset.i.i213.i
  call void @llvm.assume(i1 %eq.i216.i) #30
  %2691 = load ptr, ptr %result.i111, align 8
  %2692 = load ptr, ptr %309, align 8
  %result.i217.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2693 = getelementptr i8, ptr %result.i217.i, i64 16
  store ptr %2692, ptr %2693, align 8
  %2694 = getelementptr i8, ptr %result.i217.i, i64 8
  store ptr %2691, ptr %2694, align 8
  %2695 = getelementptr i8, ptr %result.i217.i, i64 24
  store ptr null, ptr %2695, align 8
  %2696 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i217.i)
  store ptr @Entry, ptr %result.i217.i, align 8
  store ptr @_parameterization_Ptri32, ptr %249, align 8
  store ptr %result.i217.i, ptr %365, align 8
  %2697 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %249)
  %2698 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2683)
  %2699 = sext i32 %2689 to i64
  %2700 = getelementptr ptr, ptr %2683, i64 %2699
  %2701 = getelementptr i8, ptr %2700, i64 128
  %2702 = load ptr, ptr %2701, align 8
  store ptr @i32_typ, ptr %250, align 8
  store ptr @Entry, ptr %366, align 8
  %2703 = call ptr %2702({ ptr, ptr, ptr, i32 } %2690, ptr nonnull %250)
  call void %2703({ ptr, ptr, ptr, i32 } %2690, { ptr, ptr, ptr, i32 } %2690, ptr nonnull %249, i32 %2545, { ptr, i160 } %2681)
  br label %HashMap_insert_keyK_valueV.exit

.critedge.i548:                                   ; preds = %2582, %2565, %HashMap_insert_keyK_valueV.exit865
  %2704 = add i32 %2526, 2127912214
  %2705 = shl i32 %2526, 12
  %2706 = add i32 %2704, %2705
  %2707 = ashr i32 %2706, 19
  %2708 = xor i32 %2706, %2707
  %2709 = xor i32 %2708, -949894596
  %2710 = add i32 %2709, 374761393
  %2711 = shl i32 %2709, 5
  %2712 = add i32 %2710, %2711
  %2713 = add i32 %2712, -744332180
  %2714 = shl i32 %2712, 9
  %2715 = xor i32 %2713, %2714
  %2716 = add i32 %2715, -42973499
  %2717 = shl i32 %2715, 3
  %2718 = add i32 %2716, %2717
  %2719 = ashr i32 %2718, 16
  %2720 = xor i32 %2718, %2719
  %2721 = xor i32 %2720, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %2722 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2723 = load ptr, ptr %343, align 8
  %2724 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2723, 0
  %2725 = load ptr, ptr %344, align 8
  %2726 = insertvalue { ptr, ptr, ptr, i32 } %2724, ptr %2725, 1
  %2727 = load ptr, ptr %345, align 8
  %2728 = insertvalue { ptr, ptr, ptr, i32 } %2726, ptr %2727, 2
  %2729 = load i32, ptr %346, align 4
  %2730 = insertvalue { ptr, ptr, ptr, i32 } %2728, i32 %2729, 3
  %hash_coef_ptr.i.i10.i1100 = getelementptr i8, ptr %2723, i64 8
  %tbl_size_ptr.i.i11.i1101 = getelementptr i8, ptr %2723, i64 16
  %offset_tbl_ptr.i.i12.i1102 = getelementptr i8, ptr %2723, i64 40
  %hash_coef.i.i13.i1103 = load i64, ptr %hash_coef_ptr.i.i10.i1100, align 4
  %tbl_size.i.i14.i1104 = load i64, ptr %tbl_size_ptr.i.i11.i1101, align 4
  %offset_tbl.i.i15.i1105 = load ptr, ptr %offset_tbl_ptr.i.i12.i1102, align 8
  %product.i.i.i16.i1106 = mul i64 %hash_coef.i.i13.i1103, -5261542750394134544
  %shifted.i.i.i17.i1107 = lshr i64 %product.i.i.i16.i1106, 32
  %xored.i.i.i18.i1108 = xor i64 %shifted.i.i.i17.i1107, %product.i.i.i16.i1106
  %hash.i.i.i19.i1109 = and i64 %xored.i.i.i18.i1108, %tbl_size.i.i14.i1104
  %offset_ptr.i.i20.i1110 = getelementptr i32, ptr %offset_tbl.i.i15.i1105, i64 %hash.i.i.i19.i1109
  %offset.i.i21.i1111 = load i32, ptr %offset_ptr.i.i20.i1110, align 4
  %eq.i.i1112 = icmp eq i32 %2729, %offset.i.i21.i1111
  call void @llvm.assume(i1 %eq.i.i1112) #30
  %2731 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2732 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2723)
  %2733 = sext i32 %2729 to i64
  %2734 = getelementptr ptr, ptr %2723, i64 %2733
  %2735 = getelementptr i8, ptr %2734, i64 64
  %2736 = load ptr, ptr %2735, align 8
  %2737 = call ptr %2736({ ptr, ptr, ptr, i32 } %2730, ptr nonnull %2)
  %2738 = call i32 %2737({ ptr, ptr, ptr, i32 } %2730, { ptr, ptr, ptr, i32 } %2730, ptr nonnull %2)
  %2739 = add i32 %2738, -1
  %2740 = and i32 %2739, %2721
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %2741 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2742 = load ptr, ptr %343, align 8
  %2743 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2742, 0
  %2744 = load ptr, ptr %344, align 8
  %2745 = insertvalue { ptr, ptr, ptr, i32 } %2743, ptr %2744, 1
  %2746 = load ptr, ptr %345, align 8
  %2747 = insertvalue { ptr, ptr, ptr, i32 } %2745, ptr %2746, 2
  %2748 = load i32, ptr %346, align 4
  %2749 = insertvalue { ptr, ptr, ptr, i32 } %2747, i32 %2748, 3
  %hash_coef_ptr.i.i219.i = getelementptr i8, ptr %2742, i64 8
  %tbl_size_ptr.i.i220.i = getelementptr i8, ptr %2742, i64 16
  %offset_tbl_ptr.i.i221.i = getelementptr i8, ptr %2742, i64 40
  %hash_coef.i.i222.i = load i64, ptr %hash_coef_ptr.i.i219.i, align 4
  %tbl_size.i.i223.i = load i64, ptr %tbl_size_ptr.i.i220.i, align 4
  %offset_tbl.i.i224.i = load ptr, ptr %offset_tbl_ptr.i.i221.i, align 8
  %product.i.i.i225.i = mul i64 %hash_coef.i.i222.i, -5261542750394134544
  %shifted.i.i.i226.i = lshr i64 %product.i.i.i225.i, 32
  %xored.i.i.i227.i = xor i64 %shifted.i.i.i226.i, %product.i.i.i225.i
  %hash.i.i.i228.i = and i64 %xored.i.i.i227.i, %tbl_size.i.i223.i
  %offset_ptr.i.i229.i = getelementptr i32, ptr %offset_tbl.i.i224.i, i64 %hash.i.i.i228.i
  %offset.i.i230.i = load i32, ptr %offset_ptr.i.i229.i, align 4
  %eq.i233.i = icmp eq i32 %2748, %offset.i.i230.i
  call void @llvm.assume(i1 %eq.i233.i) #30
  store ptr @_parameterization_Ptri32, ptr %251, align 8
  %2750 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %251)
  %2751 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2742)
  %2752 = sext i32 %2748 to i64
  %2753 = getelementptr ptr, ptr %2742, i64 %2752
  %2754 = getelementptr i8, ptr %2753, i64 120
  %2755 = load ptr, ptr %2754, align 8
  store ptr @i32_typ, ptr %252, align 8
  %2756 = call ptr %2755({ ptr, ptr, ptr, i32 } %2749, ptr nonnull %252)
  %2757 = call { ptr, i160 } %2756({ ptr, ptr, ptr, i32 } %2749, { ptr, ptr, ptr, i32 } %2749, ptr nonnull %251, i32 %2740)
  %.fca.0.extract104.i = extractvalue { ptr, i160 } %2757, 0
  %2758 = icmp ne ptr %.fca.0.extract104.i, @nil_typ
  %2759 = icmp ne ptr %.fca.0.extract104.i, null
  %.not153.i = and i1 %2758, %2759
  br i1 %.not153.i, label %2760, label %.critedge158.i

2760:                                             ; preds = %.critedge.i548
  %.fca.1.extract106.i = extractvalue { ptr, i160 } %2757, 1
  %.sroa.4.8.extract.trunc.i = trunc i160 %.fca.1.extract106.i to i64
  %2761 = inttoptr i64 %.sroa.4.8.extract.trunc.i to ptr
  %.sroa.7506.8.extract.shift.i = lshr i160 %.fca.1.extract106.i, 64
  %.sroa.7506.8.extract.trunc.i = trunc i160 %.sroa.7506.8.extract.shift.i to i64
  %2762 = inttoptr i64 %.sroa.7506.8.extract.trunc.i to ptr
  %hash_coef_ptr.i.i235.i = getelementptr i8, ptr %.fca.0.extract104.i, i64 8
  %tbl_size_ptr.i.i236.i = getelementptr i8, ptr %.fca.0.extract104.i, i64 16
  %offset_tbl_ptr.i.i237.i = getelementptr i8, ptr %.fca.0.extract104.i, i64 40
  %hash_coef.i.i238.i = load i64, ptr %hash_coef_ptr.i.i235.i, align 4
  %tbl_size.i.i239.i = load i64, ptr %tbl_size_ptr.i.i236.i, align 4
  %offset_tbl.i.i240.i = load ptr, ptr %offset_tbl_ptr.i.i237.i, align 8
  %product.i.i.i241.i = mul i64 %hash_coef.i.i238.i, 4015701072841558310
  %shifted.i.i.i242.i = lshr i64 %product.i.i.i241.i, 32
  %xored.i.i.i243.i = xor i64 %shifted.i.i.i242.i, %product.i.i.i241.i
  %hash.i.i.i244.i = and i64 %xored.i.i.i243.i, %tbl_size.i.i239.i
  %offset_ptr.i.i245.i = getelementptr i32, ptr %offset_tbl.i.i240.i, i64 %hash.i.i.i244.i
  %offset.i.i246.i = load i32, ptr %offset_ptr.i.i245.i, align 4
  %2763 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract104.i, 0
  %2764 = insertvalue { ptr, ptr, ptr, i32 } %2763, ptr %2761, 1
  %2765 = insertvalue { ptr, ptr, ptr, i32 } %2764, ptr %2762, 2
  %2766 = insertvalue { ptr, ptr, ptr, i32 } %2765, i32 %offset.i.i246.i, 3
  %2767 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2768 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2769 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract104.i)
  %2770 = sext i32 %offset.i.i246.i to i64
  %2771 = getelementptr ptr, ptr %.fca.0.extract104.i, i64 %2770
  %2772 = getelementptr i8, ptr %2771, i64 64
  %2773 = load ptr, ptr %2772, align 8
  %2774 = call ptr %2773({ ptr, ptr, ptr, i32 } %2766, ptr nonnull %2)
  %2775 = call i32 %2774({ ptr, ptr, ptr, i32 } %2766, { ptr, ptr, ptr, i32 } %2766, ptr nonnull %2)
  %2776 = icmp eq i32 %2775, %2526
  br i1 %2776, label %2777, label %.critedge158.i

2777:                                             ; preds = %2760
  %2778 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2779 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2780 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract104.i)
  %2781 = getelementptr i8, ptr %2771, i64 48
  %2782 = load ptr, ptr %2781, align 8
  %2783 = call ptr %2782({ ptr, ptr, ptr, i32 } %2766, ptr nonnull %2)
  %2784 = call { ptr, i160 } %2783({ ptr, ptr, ptr, i32 } %2766, { ptr, ptr, ptr, i32 } %2766, ptr nonnull %2)
  %2785 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2786 = load ptr, ptr %315, align 8
  %2787 = call i1 %2786({ ptr, i160 } %2784, { ptr, i160 } %485)
  br i1 %2787, label %.thread528.i, label %.critedge158.i

.thread528.i:                                     ; preds = %2777
  %2788 = load ptr, ptr %result.i111, align 8
  %2789 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2790 = load ptr, ptr %309, align 8
  %2791 = load ptr, ptr %2788, align 8
  %2792 = getelementptr i8, ptr %2791, i64 48
  %2793 = load ptr, ptr %2792, align 8
  %2794 = call { i64, i64 } %2793(ptr nonnull %2788)
  %2795 = extractvalue { i64, i64 } %2794, 0
  %2796 = extractvalue { i64, i64 } %2794, 1
  %2797 = urem i64 20, %2796
  %2798 = icmp eq i64 %2797, 0
  %2799 = sub i64 %2796, %2797
  %2800 = select i1 %2798, i64 0, i64 %2799
  %2801 = add i64 %2795, 20
  %2802 = add i64 %2801, %2800
  %2803 = load ptr, ptr %2790, align 8
  %2804 = getelementptr i8, ptr %2803, i64 48
  %2805 = load ptr, ptr %2804, align 8
  %2806 = call { i64, i64 } %2805(ptr nonnull %2790)
  %2807 = extractvalue { i64, i64 } %2806, 0
  %2808 = extractvalue { i64, i64 } %2806, 1
  %2809 = call i64 @llvm.umax.i64(i64 %2796, i64 %2808)
  %2810 = call i64 @llvm.umax.i64(i64 %2809, i64 8)
  %2811 = urem i64 %2802, %2808
  %2812 = icmp eq i64 %2811, 0
  %2813 = sub i64 %2808, %2811
  %2814 = select i1 %2812, i64 0, i64 %2813
  %2815 = add i64 %2807, %2802
  %2816 = add i64 %2815, %2814
  %2817 = urem i64 %2816, %2810
  %2818 = icmp eq i64 %2817, 0
  %2819 = sub i64 %2810, %2817
  %2820 = select i1 %2818, i64 0, i64 %2819
  %2821 = add i64 %2820, %2816
  %result.i248.i = call noalias ptr @bump_malloc_inner(i64 noundef %2821, ptr nonnull @current_ptr) #29
  store ptr %2788, ptr %result.i248.i, align 8
  %2822 = getelementptr i8, ptr %result.i248.i, i64 8
  store ptr %2790, ptr %2822, align 8
  %2823 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i248.i)
  store ptr @Entry, ptr %253, align 8
  store ptr %result.i248.i, ptr %357, align 8
  store i32 9, ptr %358, align 8
  %2824 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %253)
  %2825 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2826 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %2827 = load ptr, ptr %2788, align 8
  %2828 = getelementptr i8, ptr %2827, i64 48
  %2829 = load ptr, ptr %2828, align 8
  %2830 = call { i64, i64 } %2829(ptr nonnull %2788)
  %2831 = extractvalue { i64, i64 } %2830, 1
  %2832 = urem i64 20, %2831
  %2833 = icmp eq i64 %2832, 0
  %reass.sub5169 = sub i64 %2831, %2832
  %2834 = add i64 %reass.sub5169, 20
  %2835 = select i1 %2833, i64 20, i64 %2834
  %2836 = getelementptr i8, ptr %result.i248.i, i64 %2835
  %2837 = load ptr, ptr %result.i248.i, align 8
  %2838 = load ptr, ptr %2837, align 8
  %2839 = getelementptr i8, ptr %2838, i64 64
  %2840 = load ptr, ptr %2839, align 8
  call void %2840({ ptr, i160 } %485, ptr nonnull %2837, ptr %2836)
  %2841 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %2842 = load ptr, ptr %result.i248.i, align 8
  %2843 = load ptr, ptr %2842, align 8
  %2844 = getelementptr i8, ptr %2843, i64 48
  %2845 = load ptr, ptr %2844, align 8
  %2846 = call { i64, i64 } %2845(ptr nonnull %2842)
  %2847 = extractvalue { i64, i64 } %2846, 0
  %2848 = extractvalue { i64, i64 } %2846, 1
  %2849 = urem i64 20, %2848
  %2850 = icmp eq i64 %2849, 0
  %2851 = sub i64 %2848, %2849
  %2852 = select i1 %2850, i64 0, i64 %2851
  %2853 = add i64 %2847, 20
  %2854 = add i64 %2853, %2852
  %2855 = load ptr, ptr %2822, align 8
  %2856 = load ptr, ptr %2855, align 8
  %2857 = getelementptr i8, ptr %2856, i64 48
  %2858 = load ptr, ptr %2857, align 8
  %2859 = call { i64, i64 } %2858(ptr nonnull %2855)
  %2860 = extractvalue { i64, i64 } %2859, 1
  %2861 = urem i64 %2854, %2860
  %2862 = icmp eq i64 %2861, 0
  %2863 = sub i64 %2860, %2861
  %2864 = select i1 %2862, i64 0, i64 %2863
  %2865 = getelementptr i8, ptr %result.i248.i, i64 %2854
  %2866 = getelementptr i8, ptr %2865, i64 %2864
  %2867 = load ptr, ptr %2822, align 8
  %2868 = load ptr, ptr %2867, align 8
  %2869 = getelementptr i8, ptr %2868, i64 64
  %2870 = load ptr, ptr %2869, align 8
  call void %2870({ ptr, i160 } %2523, ptr nonnull %2867, ptr %2866)
  %2871 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %2872 = getelementptr i8, ptr %result.i248.i, i64 16
  store i32 %2526, ptr %2872, align 4
  %2873 = load ptr, ptr %359, align 8
  %2874 = ptrtoint ptr %result.i248.i to i64
  %2875 = ptrtoint ptr %2873 to i64
  %.sroa.284.0.insert.ext.i = zext i64 %2875 to i160
  %.sroa.284.0.insert.shift.i = shl nuw nsw i160 %.sroa.284.0.insert.ext.i, 64
  %.sroa.083.0.insert.ext.i = zext i64 %2874 to i160
  %.sroa.284.0.insert.insert.i = or disjoint i160 %.sroa.284.0.insert.shift.i, %.sroa.083.0.insert.ext.i
  %.sroa.083.0.insert.insert.i = or disjoint i160 %.sroa.284.0.insert.insert.i, 3062541302288446171170371466885913903104
  %2876 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.083.0.insert.insert.i, 1
  %2877 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2878 = load ptr, ptr %343, align 8
  %2879 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2878, 0
  %2880 = load ptr, ptr %344, align 8
  %2881 = insertvalue { ptr, ptr, ptr, i32 } %2879, ptr %2880, 1
  %2882 = load ptr, ptr %345, align 8
  %2883 = insertvalue { ptr, ptr, ptr, i32 } %2881, ptr %2882, 2
  %2884 = load i32, ptr %346, align 4
  %2885 = insertvalue { ptr, ptr, ptr, i32 } %2883, i32 %2884, 3
  %hash_coef_ptr.i.i264.i = getelementptr i8, ptr %2878, i64 8
  %tbl_size_ptr.i.i265.i = getelementptr i8, ptr %2878, i64 16
  %offset_tbl_ptr.i.i266.i = getelementptr i8, ptr %2878, i64 40
  %hash_coef.i.i267.i = load i64, ptr %hash_coef_ptr.i.i264.i, align 4
  %tbl_size.i.i268.i = load i64, ptr %tbl_size_ptr.i.i265.i, align 4
  %offset_tbl.i.i269.i = load ptr, ptr %offset_tbl_ptr.i.i266.i, align 8
  %product.i.i.i270.i = mul i64 %hash_coef.i.i267.i, -5261542750394134544
  %shifted.i.i.i271.i = lshr i64 %product.i.i.i270.i, 32
  %xored.i.i.i272.i = xor i64 %shifted.i.i.i271.i, %product.i.i.i270.i
  %hash.i.i.i273.i = and i64 %xored.i.i.i272.i, %tbl_size.i.i268.i
  %offset_ptr.i.i274.i = getelementptr i32, ptr %offset_tbl.i.i269.i, i64 %hash.i.i.i273.i
  %offset.i.i275.i = load i32, ptr %offset_ptr.i.i274.i, align 4
  %eq.i278.i = icmp eq i32 %2884, %offset.i.i275.i
  call void @llvm.assume(i1 %eq.i278.i) #30
  %2886 = load ptr, ptr %result.i111, align 8
  %2887 = load ptr, ptr %309, align 8
  %result.i279.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2888 = getelementptr i8, ptr %result.i279.i, i64 16
  store ptr %2887, ptr %2888, align 8
  %2889 = getelementptr i8, ptr %result.i279.i, i64 8
  store ptr %2886, ptr %2889, align 8
  %2890 = getelementptr i8, ptr %result.i279.i, i64 24
  store ptr null, ptr %2890, align 8
  %2891 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i279.i)
  store ptr @Entry, ptr %result.i279.i, align 8
  store ptr @_parameterization_Ptri32, ptr %254, align 8
  store ptr %result.i279.i, ptr %360, align 8
  %2892 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %254)
  %2893 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2878)
  %2894 = sext i32 %2884 to i64
  %2895 = getelementptr ptr, ptr %2878, i64 %2894
  %2896 = getelementptr i8, ptr %2895, i64 128
  %2897 = load ptr, ptr %2896, align 8
  store ptr @i32_typ, ptr %255, align 8
  store ptr @Entry, ptr %361, align 8
  %2898 = call ptr %2897({ ptr, ptr, ptr, i32 } %2885, ptr nonnull %255)
  call void %2898({ ptr, ptr, ptr, i32 } %2885, { ptr, ptr, ptr, i32 } %2885, ptr nonnull %254, i32 %2740, { ptr, i160 } %2876)
  br label %HashMap_insert_keyK_valueV.exit

.critedge158.i:                                   ; preds = %2777, %2760, %.critedge.i548
  %2899 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2900 = load ptr, ptr %326, align 8
  %2901 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2900, 0
  %2902 = load ptr, ptr %327, align 8
  %2903 = insertvalue { ptr, ptr, ptr, i32 } %2901, ptr %2902, 1
  %2904 = load ptr, ptr %328, align 8
  %2905 = insertvalue { ptr, ptr, ptr, i32 } %2903, ptr %2904, 2
  %2906 = load i32, ptr %329, align 4
  %2907 = insertvalue { ptr, ptr, ptr, i32 } %2905, i32 %2906, 3
  %hash_coef_ptr.i.i281.i = getelementptr i8, ptr %2900, i64 8
  %tbl_size_ptr.i.i282.i = getelementptr i8, ptr %2900, i64 16
  %offset_tbl_ptr.i.i283.i = getelementptr i8, ptr %2900, i64 40
  %hash_coef.i.i284.i = load i64, ptr %hash_coef_ptr.i.i281.i, align 4
  %tbl_size.i.i285.i = load i64, ptr %tbl_size_ptr.i.i282.i, align 4
  %offset_tbl.i.i286.i = load ptr, ptr %offset_tbl_ptr.i.i283.i, align 8
  %product.i.i.i287.i = mul i64 %hash_coef.i.i284.i, -5261542750394134544
  %shifted.i.i.i288.i = lshr i64 %product.i.i.i287.i, 32
  %xored.i.i.i289.i = xor i64 %shifted.i.i.i288.i, %product.i.i.i287.i
  %hash.i.i.i290.i = and i64 %xored.i.i.i289.i, %tbl_size.i.i285.i
  %offset_ptr.i.i291.i = getelementptr i32, ptr %offset_tbl.i.i286.i, i64 %hash.i.i.i290.i
  %offset.i.i292.i = load i32, ptr %offset_ptr.i.i291.i, align 4
  %eq.i295.i = icmp eq i32 %2906, %offset.i.i292.i
  call void @llvm.assume(i1 %eq.i295.i) #30
  %2908 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2909 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2900)
  %2910 = sext i32 %2906 to i64
  %2911 = getelementptr ptr, ptr %2900, i64 %2910
  %2912 = getelementptr i8, ptr %2911, i64 64
  %2913 = load ptr, ptr %2912, align 8
  %2914 = call ptr %2913({ ptr, ptr, ptr, i32 } %2907, ptr nonnull %2)
  %2915 = call i32 %2914({ ptr, ptr, ptr, i32 } %2907, { ptr, ptr, ptr, i32 } %2907, ptr nonnull %2)
  %2916 = load i32, ptr %347, align 4
  %.not.i = icmp slt i32 %2916, %2915
  br i1 %.not.i, label %._crit_edge2.i, label %2917

2917:                                             ; preds = %.critedge158.i
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %231)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %232)
  %2918 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2919 = load ptr, ptr %326, align 8
  %2920 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2919, 0
  %2921 = load ptr, ptr %327, align 8
  %2922 = insertvalue { ptr, ptr, ptr, i32 } %2920, ptr %2921, 1
  %2923 = load ptr, ptr %328, align 8
  %2924 = insertvalue { ptr, ptr, ptr, i32 } %2922, ptr %2923, 2
  %2925 = load i32, ptr %329, align 4
  %2926 = insertvalue { ptr, ptr, ptr, i32 } %2924, i32 %2925, 3
  %hash_coef_ptr.i.i18.i = getelementptr i8, ptr %2919, i64 8
  %tbl_size_ptr.i.i19.i = getelementptr i8, ptr %2919, i64 16
  %offset_tbl_ptr.i.i20.i = getelementptr i8, ptr %2919, i64 40
  %hash_coef.i.i21.i = load i64, ptr %hash_coef_ptr.i.i18.i, align 4
  %tbl_size.i.i22.i = load i64, ptr %tbl_size_ptr.i.i19.i, align 4
  %offset_tbl.i.i23.i = load ptr, ptr %offset_tbl_ptr.i.i20.i, align 8
  %product.i.i.i24.i = mul i64 %hash_coef.i.i21.i, -5261542750394134544
  %shifted.i.i.i25.i = lshr i64 %product.i.i.i24.i, 32
  %xored.i.i.i26.i = xor i64 %shifted.i.i.i25.i, %product.i.i.i24.i
  %hash.i.i.i27.i = and i64 %xored.i.i.i26.i, %tbl_size.i.i22.i
  %offset_ptr.i.i28.i = getelementptr i32, ptr %offset_tbl.i.i23.i, i64 %hash.i.i.i27.i
  %offset.i.i29.i = load i32, ptr %offset_ptr.i.i28.i, align 4
  %eq.i.i1126 = icmp eq i32 %2925, %offset.i.i29.i
  call void @llvm.assume(i1 %eq.i.i1126) #30
  %2927 = load ptr, ptr %343, align 8
  %2928 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2927, 0
  %2929 = load ptr, ptr %344, align 8
  %2930 = insertvalue { ptr, ptr, ptr, i32 } %2928, ptr %2929, 1
  %2931 = load ptr, ptr %345, align 8
  %2932 = insertvalue { ptr, ptr, ptr, i32 } %2930, ptr %2931, 2
  %2933 = load i32, ptr %346, align 4
  %hash_coef_ptr.i.i46.i = getelementptr i8, ptr %2927, i64 8
  %tbl_size_ptr.i.i47.i = getelementptr i8, ptr %2927, i64 16
  %offset_tbl_ptr.i.i48.i = getelementptr i8, ptr %2927, i64 40
  %hash_coef.i.i49.i = load i64, ptr %hash_coef_ptr.i.i46.i, align 4
  %tbl_size.i.i50.i = load i64, ptr %tbl_size_ptr.i.i47.i, align 4
  %offset_tbl.i.i51.i = load ptr, ptr %offset_tbl_ptr.i.i48.i, align 8
  %product.i.i.i52.i = mul i64 %hash_coef.i.i49.i, -5261542750394134544
  %shifted.i.i.i53.i = lshr i64 %product.i.i.i52.i, 32
  %xored.i.i.i54.i = xor i64 %shifted.i.i.i53.i, %product.i.i.i52.i
  %hash.i.i.i55.i = and i64 %xored.i.i.i54.i, %tbl_size.i.i50.i
  %offset_ptr.i.i56.i = getelementptr i32, ptr %offset_tbl.i.i51.i, i64 %hash.i.i.i55.i
  %offset.i.i57.i = load i32, ptr %offset_ptr.i.i56.i, align 4
  %eq.i60.i = icmp eq i32 %2933, %offset.i.i57.i
  call void @llvm.assume(i1 %eq.i60.i) #30
  %2934 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2935 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2919)
  %2936 = sext i32 %2925 to i64
  %2937 = getelementptr ptr, ptr %2919, i64 %2936
  %2938 = getelementptr i8, ptr %2937, i64 64
  %2939 = load ptr, ptr %2938, align 8
  %2940 = call ptr %2939({ ptr, ptr, ptr, i32 } %2926, ptr nonnull %2)
  %2941 = call i32 %2940({ ptr, ptr, ptr, i32 } %2926, { ptr, ptr, ptr, i32 } %2926, ptr nonnull %2)
  %2942 = shl i32 %2941, 1
  %2943 = call i32 @llvm.smax.i32(i32 %2942, i32 16)
  %2944 = load ptr, ptr %result.i111, align 8
  %2945 = load ptr, ptr %309, align 8
  %result.i.i1131 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2946 = getelementptr i8, ptr %result.i.i1131, i64 16
  store ptr @_parameterization_Nil, ptr %2946, align 8
  %result.i75.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2947 = getelementptr i8, ptr %result.i75.i, i64 16
  store ptr %2945, ptr %2947, align 8
  %2948 = getelementptr i8, ptr %result.i75.i, i64 8
  store ptr %2944, ptr %2948, align 8
  %2949 = getelementptr i8, ptr %result.i75.i, i64 24
  store ptr null, ptr %2949, align 8
  %2950 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i75.i)
  store ptr @Entry, ptr %result.i75.i, align 8
  %2951 = getelementptr i8, ptr %result.i.i1131, i64 8
  store ptr %result.i75.i, ptr %2951, align 8
  %2952 = getelementptr i8, ptr %result.i.i1131, i64 24
  store ptr null, ptr %2952, align 8
  %2953 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i1131)
  store ptr @union_typ, ptr %result.i.i1131, align 8
  %result.i76.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i1131, ptr %result.i76.i, align 8
  %2954 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i76.i)
  store ptr @Array, ptr %231, align 8
  store ptr %result.i76.i, ptr %383, align 8
  store i32 9, ptr %384, align 8
  %2955 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %231)
  %2956 = getelementptr i8, ptr %result.i76.i, i64 16
  store i32 %2943, ptr %2956, align 4
  %2957 = getelementptr i8, ptr %result.i76.i, i64 20
  store i32 %2943, ptr %2957, align 4
  %2958 = zext nneg i32 %2943 to i64
  %2959 = shl nuw nsw i64 %2958, 5
  %result.i.i.i1132 = call noalias ptr @bump_malloc_inner(i64 noundef %2959, ptr nonnull @current_ptr) #29
  %2960 = getelementptr i8, ptr %result.i76.i, i64 8
  store ptr %result.i.i.i1132, ptr %2960, align 8
  %2961 = load ptr, ptr %385, align 8
  store ptr @Array, ptr %326, align 8
  store ptr %result.i76.i, ptr %327, align 8
  store ptr %2961, ptr %328, align 8
  store i32 9, ptr %329, align 4
  %result.i91.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2962 = getelementptr i8, ptr %result.i91.i, i64 16
  store ptr @_parameterization_Nil, ptr %2962, align 8
  %result.i92.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2963 = getelementptr i8, ptr %result.i92.i, i64 16
  store ptr %2945, ptr %2963, align 8
  %2964 = getelementptr i8, ptr %result.i92.i, i64 8
  store ptr %2944, ptr %2964, align 8
  %2965 = getelementptr i8, ptr %result.i92.i, i64 24
  store ptr null, ptr %2965, align 8
  %2966 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i92.i)
  store ptr @Entry, ptr %result.i92.i, align 8
  %2967 = getelementptr i8, ptr %result.i91.i, i64 8
  store ptr %result.i92.i, ptr %2967, align 8
  %2968 = getelementptr i8, ptr %result.i91.i, i64 24
  store ptr null, ptr %2968, align 8
  %2969 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i91.i)
  store ptr @union_typ, ptr %result.i91.i, align 8
  %result.i93.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i91.i, ptr %result.i93.i, align 8
  %2970 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i93.i)
  store ptr @Array, ptr %232, align 8
  store ptr %result.i93.i, ptr %386, align 8
  store i32 9, ptr %387, align 8
  %2971 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %232)
  %2972 = getelementptr i8, ptr %result.i93.i, i64 16
  store i32 %2943, ptr %2972, align 4
  %2973 = getelementptr i8, ptr %result.i93.i, i64 20
  store i32 %2943, ptr %2973, align 4
  %result.i.i234.i = call noalias ptr @bump_malloc_inner(i64 noundef %2959, ptr nonnull @current_ptr) #29
  %2974 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %2975 = getelementptr i8, ptr %result.i93.i, i64 8
  store ptr %result.i.i234.i, ptr %2975, align 8
  %2976 = load ptr, ptr %388, align 8
  store ptr @Array, ptr %343, align 8
  store ptr %result.i93.i, ptr %344, align 8
  store ptr %2976, ptr %345, align 8
  store i32 9, ptr %346, align 4
  store i32 0, ptr %347, align 4
  %2977 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %153)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %154)
  %2978 = icmp sgt i32 %2941, 0
  br i1 %2978, label %.lr.ph.i2529, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2583.critedge

.lr.ph.i2529:                                     ; preds = %2917
  %invariant.gep.i = getelementptr i8, ptr %2919, i64 120
  %offset_tbl.i.i24.i = load ptr, ptr %offset_tbl_ptr.i.i20.i, align 8
  %hash_coef.i.i22.i = load i64, ptr %hash_coef_ptr.i.i18.i, align 4
  %product.i.i.i25.i = mul i64 %hash_coef.i.i22.i, -5261542750394134544
  %shifted.i.i.i26.i = lshr i64 %product.i.i.i25.i, 32
  %xored.i.i.i27.i = xor i64 %shifted.i.i.i26.i, %product.i.i.i25.i
  %tbl_size.i.i23.i = load i64, ptr %tbl_size_ptr.i.i19.i, align 4
  %hash.i.i.i28.i = and i64 %xored.i.i.i27.i, %tbl_size.i.i23.i
  %offset_ptr.i.i29.i = getelementptr i32, ptr %offset_tbl.i.i24.i, i64 %hash.i.i.i28.i
  %offset.i.i30.i = load i32, ptr %offset_ptr.i.i29.i, align 4
  %2979 = insertvalue { ptr, ptr, ptr, i32 } %2924, i32 %offset.i.i30.i, 3
  %2980 = sext i32 %offset.i.i30.i to i64
  %gep.i = getelementptr ptr, ptr %invariant.gep.i, i64 %2980
  %2981 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %2982

2982:                                             ; preds = %._crit_edge1.i, %.lr.ph.i2529
  %.reg2mem13.079.i = phi i32 [ 0, %.lr.ph.i2529 ], [ %3174, %._crit_edge1.i ]
  store ptr @_parameterization_Ptri32, ptr %153, align 8
  %2983 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %153)
  %2984 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %2919)
  %2985 = load ptr, ptr %gep.i, align 8
  store ptr @i32_typ, ptr %154, align 8
  %2986 = call ptr %2985({ ptr, ptr, ptr, i32 } %2979, ptr nonnull %154)
  %2987 = call { ptr, i160 } %2986({ ptr, ptr, ptr, i32 } %2979, { ptr, ptr, ptr, i32 } %2979, ptr nonnull %153, i32 %.reg2mem13.079.i)
  %.fca.0.extract11.i = extractvalue { ptr, i160 } %2987, 0
  %2988 = icmp ne ptr %.fca.0.extract11.i, @nil_typ
  %2989 = icmp ne ptr %.fca.0.extract11.i, null
  %.not17.i = and i1 %2988, %2989
  br i1 %.not17.i, label %2990, label %._crit_edge1.i

2990:                                             ; preds = %2982
  %hash_coef_ptr.i.i33.i = getelementptr i8, ptr %.fca.0.extract11.i, i64 8
  %tbl_size_ptr.i.i34.i = getelementptr i8, ptr %.fca.0.extract11.i, i64 16
  %offset_tbl_ptr.i.i35.i = getelementptr i8, ptr %.fca.0.extract11.i, i64 40
  %2991 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %115)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %116)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %117)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %118)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %119)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %120)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %121)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0680.i3369)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %122)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %123)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %124)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %125)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %126)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %127)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %128)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %129)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i3370)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %130)
  %hash_coef.i.i147.i3377 = load i64, ptr %hash_coef_ptr.i.i33.i, align 4
  %tbl_size.i.i148.i3378 = load i64, ptr %tbl_size_ptr.i.i34.i, align 4
  %offset_tbl.i.i149.i3379 = load ptr, ptr %offset_tbl_ptr.i.i35.i, align 8
  %product.i.i.i150.i3380 = mul i64 %hash_coef.i.i147.i3377, 4015701072841558310
  %shifted.i.i.i151.i3381 = lshr i64 %product.i.i.i150.i3380, 32
  %xored.i.i.i152.i3382 = xor i64 %shifted.i.i.i151.i3381, %product.i.i.i150.i3380
  %hash.i.i.i153.i3383 = and i64 %xored.i.i.i152.i3382, %tbl_size.i.i148.i3378
  %offset_ptr.i.i154.i3384 = getelementptr i32, ptr %offset_tbl.i.i149.i3379, i64 %hash.i.i.i153.i3383
  %offset.i.i169.i3385 = load i32, ptr %offset_ptr.i.i154.i3384, align 4
  %2992 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2993 = load i32, ptr %349, align 4
  %2994 = icmp sgt i32 %2993, 0
  br i1 %2994, label %.lr.ph.i3386, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit

.lr.ph.i3386:                                     ; preds = %2990
  %.fca.1.extract13.i = extractvalue { ptr, i160 } %2987, 1
  %.sroa.576.8.extract.shift.i = lshr i160 %.fca.1.extract13.i, 64
  %2995 = insertelement <2 x i160> poison, i160 %.sroa.576.8.extract.shift.i, i64 0
  %2996 = insertelement <2 x i160> %2995, i160 %.fca.1.extract13.i, i64 1
  %2997 = trunc <2 x i160> %2996 to <2 x i64>
  %2998 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i, 0
  %2999 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %3000 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract11.i)
  %invariant.gep3963 = getelementptr i8, ptr %.fca.0.extract11.i, i64 64
  %3001 = insertvalue { ptr, i160 } undef, ptr %.fca.0.extract11.i, 0
  br label %3002

3002:                                             ; preds = %.cont.cont.i3429, %.lr.ph.i3386
  %offset.i.i260.i34443969 = phi i32 [ %offset.i.i169.i3385, %.lr.ph.i3386 ], [ %offset.i.i260.i3444, %.cont.cont.i3429 ]
  %.reg2mem195.0678.i3387 = phi i32 [ 1, %.lr.ph.i3386 ], [ %3157, %.cont.cont.i3429 ]
  %.reg2mem193.0677.i3388 = phi i32 [ 0, %.lr.ph.i3386 ], [ %3162, %.cont.cont.i3429 ]
  %3003 = phi <2 x i64> [ %2997, %.lr.ph.i3386 ], [ %3161, %.cont.cont.i3429 ]
  %3004 = extractelement <2 x i64> %3003, i64 1
  %.sroa.speculated352.i34313965 = inttoptr i64 %3004 to ptr
  %3005 = extractelement <2 x i64> %3003, i64 0
  %.sroa.speculated346.i34323967 = inttoptr i64 %3005 to ptr
  %3006 = insertvalue { ptr, ptr, ptr, i32 } %2998, ptr %.sroa.speculated352.i34313965, 1
  %3007 = insertvalue { ptr, ptr, ptr, i32 } %3006, ptr %.sroa.speculated346.i34323967, 2
  %3008 = insertvalue { ptr, ptr, ptr, i32 } %3007, i32 %offset.i.i260.i34443969, 3
  %3009 = sext i32 %offset.i.i260.i34443969 to i64
  %gep3964 = getelementptr ptr, ptr %invariant.gep3963, i64 %3009
  %3010 = load ptr, ptr %gep3964, align 8
  %3011 = call ptr %3010({ ptr, ptr, ptr, i32 } %3008, ptr nonnull %2)
  %3012 = call i32 %3011({ ptr, ptr, ptr, i32 } %3008, { ptr, ptr, ptr, i32 } %3008, ptr nonnull %2)
  %3013 = icmp eq i32 %.reg2mem195.0678.i3387, 1
  %3014 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br i1 %3013, label %3015, label %3077

3015:                                             ; preds = %3002
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %3016 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3017 = load ptr, ptr %326, align 8
  %3018 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3017, 0
  %3019 = load ptr, ptr %327, align 8
  %3020 = insertvalue { ptr, ptr, ptr, i32 } %3018, ptr %3019, 1
  %3021 = load ptr, ptr %328, align 8
  %3022 = insertvalue { ptr, ptr, ptr, i32 } %3020, ptr %3021, 2
  %3023 = load i32, ptr %329, align 4
  %3024 = insertvalue { ptr, ptr, ptr, i32 } %3022, i32 %3023, 3
  %hash_coef_ptr.i.i10.i4668 = getelementptr i8, ptr %3017, i64 8
  %tbl_size_ptr.i.i11.i4669 = getelementptr i8, ptr %3017, i64 16
  %offset_tbl_ptr.i.i12.i4670 = getelementptr i8, ptr %3017, i64 40
  %hash_coef.i.i13.i4671 = load i64, ptr %hash_coef_ptr.i.i10.i4668, align 4
  %tbl_size.i.i14.i4672 = load i64, ptr %tbl_size_ptr.i.i11.i4669, align 4
  %offset_tbl.i.i15.i4673 = load ptr, ptr %offset_tbl_ptr.i.i12.i4670, align 8
  %product.i.i.i16.i4674 = mul i64 %hash_coef.i.i13.i4671, -5261542750394134544
  %shifted.i.i.i17.i4675 = lshr i64 %product.i.i.i16.i4674, 32
  %xored.i.i.i18.i4676 = xor i64 %shifted.i.i.i17.i4675, %product.i.i.i16.i4674
  %hash.i.i.i19.i4677 = and i64 %xored.i.i.i18.i4676, %tbl_size.i.i14.i4672
  %offset_ptr.i.i20.i4678 = getelementptr i32, ptr %offset_tbl.i.i15.i4673, i64 %hash.i.i.i19.i4677
  %offset.i.i21.i4679 = load i32, ptr %offset_ptr.i.i20.i4678, align 4
  %eq.i.i4680 = icmp eq i32 %3023, %offset.i.i21.i4679
  call void @llvm.assume(i1 %eq.i.i4680) #30
  %3025 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %3026 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3017)
  %3027 = sext i32 %3023 to i64
  %3028 = getelementptr ptr, ptr %3017, i64 %3027
  %3029 = getelementptr i8, ptr %3028, i64 64
  %3030 = load ptr, ptr %3029, align 8
  %3031 = call ptr %3030({ ptr, ptr, ptr, i32 } %3024, ptr nonnull %2)
  %3032 = call i32 %3031({ ptr, ptr, ptr, i32 } %3024, { ptr, ptr, ptr, i32 } %3024, ptr nonnull %2)
  %3033 = add i32 %3032, -1
  %3034 = and i32 %3033, %3012
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %3035 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3036 = load ptr, ptr %326, align 8
  %3037 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3036, 0
  %3038 = load ptr, ptr %327, align 8
  %3039 = insertvalue { ptr, ptr, ptr, i32 } %3037, ptr %3038, 1
  %3040 = load ptr, ptr %328, align 8
  %3041 = insertvalue { ptr, ptr, ptr, i32 } %3039, ptr %3040, 2
  %3042 = load i32, ptr %329, align 4
  %3043 = insertvalue { ptr, ptr, ptr, i32 } %3041, i32 %3042, 3
  %hash_coef_ptr.i.i172.i3445 = getelementptr i8, ptr %3036, i64 8
  %tbl_size_ptr.i.i173.i3446 = getelementptr i8, ptr %3036, i64 16
  %offset_tbl_ptr.i.i174.i3447 = getelementptr i8, ptr %3036, i64 40
  %hash_coef.i.i175.i3448 = load i64, ptr %hash_coef_ptr.i.i172.i3445, align 4
  %tbl_size.i.i176.i3449 = load i64, ptr %tbl_size_ptr.i.i173.i3446, align 4
  %offset_tbl.i.i177.i3450 = load ptr, ptr %offset_tbl_ptr.i.i174.i3447, align 8
  %product.i.i.i178.i3451 = mul i64 %hash_coef.i.i175.i3448, -5261542750394134544
  %shifted.i.i.i179.i3452 = lshr i64 %product.i.i.i178.i3451, 32
  %xored.i.i.i180.i3453 = xor i64 %shifted.i.i.i179.i3452, %product.i.i.i178.i3451
  %hash.i.i.i181.i3454 = and i64 %xored.i.i.i180.i3453, %tbl_size.i.i176.i3449
  %offset_ptr.i.i182.i3455 = getelementptr i32, ptr %offset_tbl.i.i177.i3450, i64 %hash.i.i.i181.i3454
  %offset.i.i183.i3456 = load i32, ptr %offset_ptr.i.i182.i3455, align 4
  %eq.i.i3457 = icmp eq i32 %3042, %offset.i.i183.i3456
  call void @llvm.assume(i1 %eq.i.i3457) #30
  store ptr @_parameterization_Ptri32, ptr %115, align 8
  %3044 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %115)
  %3045 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3036)
  %3046 = sext i32 %3042 to i64
  %3047 = getelementptr ptr, ptr %3036, i64 %3046
  %3048 = getelementptr i8, ptr %3047, i64 120
  %3049 = load ptr, ptr %3048, align 8
  store ptr @i32_typ, ptr %116, align 8
  %3050 = call ptr %3049({ ptr, ptr, ptr, i32 } %3043, ptr nonnull %116)
  %3051 = call { ptr, i160 } %3050({ ptr, ptr, ptr, i32 } %3043, { ptr, ptr, ptr, i32 } %3043, ptr nonnull %115, i32 %3034)
  %.fca.0.extract112.i3458 = extractvalue { ptr, i160 } %3051, 0
  %.sroa.3111.0.insert.ext.i3459 = zext i32 %offset.i.i260.i34443969 to i160
  %.sroa.3111.0.insert.shift.i3460 = shl nuw i160 %.sroa.3111.0.insert.ext.i3459, 128
  %.sroa.2110.0.insert.ext.i3461 = zext i64 %3005 to i160
  %.sroa.2110.0.insert.shift.i3462 = shl nuw nsw i160 %.sroa.2110.0.insert.ext.i3461, 64
  %.sroa.2110.0.insert.insert.i3463 = or disjoint i160 %.sroa.2110.0.insert.shift.i3462, %.sroa.3111.0.insert.shift.i3460
  %.sroa.0109.0.insert.ext.i3464 = zext i64 %3004 to i160
  %.sroa.0109.0.insert.insert.i3465 = or disjoint i160 %.sroa.2110.0.insert.insert.i3463, %.sroa.0109.0.insert.ext.i3464
  %3052 = insertvalue { ptr, i160 } %3001, i160 %.sroa.0109.0.insert.insert.i3465, 1
  %3053 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3054 = load ptr, ptr %326, align 8
  %3055 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3054, 0
  %3056 = load ptr, ptr %327, align 8
  %3057 = insertvalue { ptr, ptr, ptr, i32 } %3055, ptr %3056, 1
  %3058 = load ptr, ptr %328, align 8
  %3059 = insertvalue { ptr, ptr, ptr, i32 } %3057, ptr %3058, 2
  %3060 = load i32, ptr %329, align 4
  %3061 = insertvalue { ptr, ptr, ptr, i32 } %3059, i32 %3060, 3
  %hash_coef_ptr.i.i186.i3466 = getelementptr i8, ptr %3054, i64 8
  %tbl_size_ptr.i.i187.i3467 = getelementptr i8, ptr %3054, i64 16
  %offset_tbl_ptr.i.i188.i3468 = getelementptr i8, ptr %3054, i64 40
  %hash_coef.i.i189.i3469 = load i64, ptr %hash_coef_ptr.i.i186.i3466, align 4
  %tbl_size.i.i190.i3470 = load i64, ptr %tbl_size_ptr.i.i187.i3467, align 4
  %offset_tbl.i.i191.i3471 = load ptr, ptr %offset_tbl_ptr.i.i188.i3468, align 8
  %product.i.i.i192.i3472 = mul i64 %hash_coef.i.i189.i3469, -5261542750394134544
  %shifted.i.i.i193.i3473 = lshr i64 %product.i.i.i192.i3472, 32
  %xored.i.i.i194.i3474 = xor i64 %shifted.i.i.i193.i3473, %product.i.i.i192.i3472
  %hash.i.i.i195.i3475 = and i64 %xored.i.i.i194.i3474, %tbl_size.i.i190.i3470
  %offset_ptr.i.i196.i3476 = getelementptr i32, ptr %offset_tbl.i.i191.i3471, i64 %hash.i.i.i195.i3475
  %offset.i.i197.i3477 = load i32, ptr %offset_ptr.i.i196.i3476, align 4
  %eq.i200.i3478 = icmp eq i32 %3060, %offset.i.i197.i3477
  call void @llvm.assume(i1 %eq.i200.i3478) #30
  %3062 = load ptr, ptr %result.i111, align 8
  %3063 = load ptr, ptr %309, align 8
  %result.i.i3479 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3064 = getelementptr i8, ptr %result.i.i3479, i64 16
  store ptr %3063, ptr %3064, align 8
  %3065 = getelementptr i8, ptr %result.i.i3479, i64 8
  store ptr %3062, ptr %3065, align 8
  %3066 = getelementptr i8, ptr %result.i.i3479, i64 24
  store ptr null, ptr %3066, align 8
  %3067 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i3479)
  store ptr @Entry, ptr %result.i.i3479, align 8
  store ptr @_parameterization_Ptri32, ptr %117, align 8
  store ptr %result.i.i3479, ptr %449, align 8
  %3068 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %117)
  %3069 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3054)
  %3070 = sext i32 %3060 to i64
  %3071 = getelementptr ptr, ptr %3054, i64 %3070
  %3072 = getelementptr i8, ptr %3071, i64 128
  %3073 = load ptr, ptr %3072, align 8
  store ptr @i32_typ, ptr %118, align 8
  store ptr %.fca.0.extract11.i, ptr %450, align 8
  %3074 = call ptr %3073({ ptr, ptr, ptr, i32 } %3061, ptr nonnull %118)
  call void %3074({ ptr, ptr, ptr, i32 } %3061, { ptr, ptr, ptr, i32 } %3061, ptr nonnull %117, i32 %3034, { ptr, i160 } %3052)
  %3075 = icmp ne ptr %.fca.0.extract112.i3458, @nil_typ
  %3076 = icmp ne ptr %.fca.0.extract112.i3458, null
  %.not140.i3480 = and i1 %3075, %3076
  br i1 %.not140.i3480, label %.cont.cont.i3429, label %3165

3077:                                             ; preds = %3002
  %3078 = add i32 %3012, 2127912214
  %3079 = shl i32 %3012, 12
  %3080 = add i32 %3078, %3079
  %3081 = ashr i32 %3080, 19
  %3082 = xor i32 %3080, %3081
  %3083 = xor i32 %3082, -949894596
  %3084 = add i32 %3083, 374761393
  %3085 = shl i32 %3083, 5
  %3086 = add i32 %3084, %3085
  %3087 = add i32 %3086, -744332180
  %3088 = shl i32 %3086, 9
  %3089 = xor i32 %3087, %3088
  %3090 = add i32 %3089, -42973499
  %3091 = shl i32 %3089, 3
  %3092 = add i32 %3090, %3091
  %3093 = ashr i32 %3092, 16
  %3094 = xor i32 %3092, %3093
  %3095 = xor i32 %3094, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %3096 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3097 = load ptr, ptr %343, align 8
  %3098 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3097, 0
  %3099 = load ptr, ptr %344, align 8
  %3100 = insertvalue { ptr, ptr, ptr, i32 } %3098, ptr %3099, 1
  %3101 = load ptr, ptr %345, align 8
  %3102 = insertvalue { ptr, ptr, ptr, i32 } %3100, ptr %3101, 2
  %3103 = load i32, ptr %346, align 4
  %3104 = insertvalue { ptr, ptr, ptr, i32 } %3102, i32 %3103, 3
  %hash_coef_ptr.i.i10.i4698 = getelementptr i8, ptr %3097, i64 8
  %tbl_size_ptr.i.i11.i4699 = getelementptr i8, ptr %3097, i64 16
  %offset_tbl_ptr.i.i12.i4700 = getelementptr i8, ptr %3097, i64 40
  %hash_coef.i.i13.i4701 = load i64, ptr %hash_coef_ptr.i.i10.i4698, align 4
  %tbl_size.i.i14.i4702 = load i64, ptr %tbl_size_ptr.i.i11.i4699, align 4
  %offset_tbl.i.i15.i4703 = load ptr, ptr %offset_tbl_ptr.i.i12.i4700, align 8
  %product.i.i.i16.i4704 = mul i64 %hash_coef.i.i13.i4701, -5261542750394134544
  %shifted.i.i.i17.i4705 = lshr i64 %product.i.i.i16.i4704, 32
  %xored.i.i.i18.i4706 = xor i64 %shifted.i.i.i17.i4705, %product.i.i.i16.i4704
  %hash.i.i.i19.i4707 = and i64 %xored.i.i.i18.i4706, %tbl_size.i.i14.i4702
  %offset_ptr.i.i20.i4708 = getelementptr i32, ptr %offset_tbl.i.i15.i4703, i64 %hash.i.i.i19.i4707
  %offset.i.i21.i4709 = load i32, ptr %offset_ptr.i.i20.i4708, align 4
  %eq.i.i4710 = icmp eq i32 %3103, %offset.i.i21.i4709
  call void @llvm.assume(i1 %eq.i.i4710) #30
  %3105 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %3106 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3097)
  %3107 = sext i32 %3103 to i64
  %3108 = getelementptr ptr, ptr %3097, i64 %3107
  %3109 = getelementptr i8, ptr %3108, i64 64
  %3110 = load ptr, ptr %3109, align 8
  %3111 = call ptr %3110({ ptr, ptr, ptr, i32 } %3104, ptr nonnull %2)
  %3112 = call i32 %3111({ ptr, ptr, ptr, i32 } %3104, { ptr, ptr, ptr, i32 } %3104, ptr nonnull %2)
  %3113 = add i32 %3112, -1
  %3114 = and i32 %3113, %3095
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %3115 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3116 = load ptr, ptr %343, align 8
  %3117 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3116, 0
  %3118 = load ptr, ptr %344, align 8
  %3119 = insertvalue { ptr, ptr, ptr, i32 } %3117, ptr %3118, 1
  %3120 = load ptr, ptr %345, align 8
  %3121 = insertvalue { ptr, ptr, ptr, i32 } %3119, ptr %3120, 2
  %3122 = load i32, ptr %346, align 4
  %3123 = insertvalue { ptr, ptr, ptr, i32 } %3121, i32 %3122, 3
  %hash_coef_ptr.i.i202.i3389 = getelementptr i8, ptr %3116, i64 8
  %tbl_size_ptr.i.i203.i3390 = getelementptr i8, ptr %3116, i64 16
  %offset_tbl_ptr.i.i204.i3391 = getelementptr i8, ptr %3116, i64 40
  %hash_coef.i.i205.i3392 = load i64, ptr %hash_coef_ptr.i.i202.i3389, align 4
  %tbl_size.i.i206.i3393 = load i64, ptr %tbl_size_ptr.i.i203.i3390, align 4
  %offset_tbl.i.i207.i3394 = load ptr, ptr %offset_tbl_ptr.i.i204.i3391, align 8
  %product.i.i.i208.i3395 = mul i64 %hash_coef.i.i205.i3392, -5261542750394134544
  %shifted.i.i.i209.i3396 = lshr i64 %product.i.i.i208.i3395, 32
  %xored.i.i.i210.i3397 = xor i64 %shifted.i.i.i209.i3396, %product.i.i.i208.i3395
  %hash.i.i.i211.i3398 = and i64 %xored.i.i.i210.i3397, %tbl_size.i.i206.i3393
  %offset_ptr.i.i212.i3399 = getelementptr i32, ptr %offset_tbl.i.i207.i3394, i64 %hash.i.i.i211.i3398
  %offset.i.i213.i3400 = load i32, ptr %offset_ptr.i.i212.i3399, align 4
  %eq.i216.i3401 = icmp eq i32 %3122, %offset.i.i213.i3400
  call void @llvm.assume(i1 %eq.i216.i3401) #30
  store ptr @_parameterization_Ptri32, ptr %123, align 8
  %3124 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %123)
  %3125 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3116)
  %3126 = sext i32 %3122 to i64
  %3127 = getelementptr ptr, ptr %3116, i64 %3126
  %3128 = getelementptr i8, ptr %3127, i64 120
  %3129 = load ptr, ptr %3128, align 8
  store ptr @i32_typ, ptr %124, align 8
  %3130 = call ptr %3129({ ptr, ptr, ptr, i32 } %3123, ptr nonnull %124)
  %3131 = call { ptr, i160 } %3130({ ptr, ptr, ptr, i32 } %3123, { ptr, ptr, ptr, i32 } %3123, ptr nonnull %123, i32 %3114)
  %.fca.0.extract87.i3402 = extractvalue { ptr, i160 } %3131, 0
  %.sroa.3.0.insert.ext.i3403 = zext i32 %offset.i.i260.i34443969 to i160
  %.sroa.3.0.insert.shift.i3404 = shl nuw i160 %.sroa.3.0.insert.ext.i3403, 128
  %.sroa.2.0.insert.ext.i3405 = zext i64 %3005 to i160
  %.sroa.2.0.insert.shift.i3406 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i3405, 64
  %.sroa.2.0.insert.insert.i3407 = or disjoint i160 %.sroa.2.0.insert.shift.i3406, %.sroa.3.0.insert.shift.i3404
  %.sroa.0.0.insert.ext.i3408 = zext i64 %3004 to i160
  %.sroa.0.0.insert.insert.i3409 = or disjoint i160 %.sroa.2.0.insert.insert.i3407, %.sroa.0.0.insert.ext.i3408
  %3132 = insertvalue { ptr, i160 } %3001, i160 %.sroa.0.0.insert.insert.i3409, 1
  %3133 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3134 = load ptr, ptr %343, align 8
  %3135 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3134, 0
  %3136 = load ptr, ptr %344, align 8
  %3137 = insertvalue { ptr, ptr, ptr, i32 } %3135, ptr %3136, 1
  %3138 = load ptr, ptr %345, align 8
  %3139 = insertvalue { ptr, ptr, ptr, i32 } %3137, ptr %3138, 2
  %3140 = load i32, ptr %346, align 4
  %3141 = insertvalue { ptr, ptr, ptr, i32 } %3139, i32 %3140, 3
  %hash_coef_ptr.i.i218.i3410 = getelementptr i8, ptr %3134, i64 8
  %tbl_size_ptr.i.i219.i3411 = getelementptr i8, ptr %3134, i64 16
  %offset_tbl_ptr.i.i220.i3412 = getelementptr i8, ptr %3134, i64 40
  %hash_coef.i.i221.i3413 = load i64, ptr %hash_coef_ptr.i.i218.i3410, align 4
  %tbl_size.i.i222.i3414 = load i64, ptr %tbl_size_ptr.i.i219.i3411, align 4
  %offset_tbl.i.i223.i3415 = load ptr, ptr %offset_tbl_ptr.i.i220.i3412, align 8
  %product.i.i.i224.i3416 = mul i64 %hash_coef.i.i221.i3413, -5261542750394134544
  %shifted.i.i.i225.i3417 = lshr i64 %product.i.i.i224.i3416, 32
  %xored.i.i.i226.i3418 = xor i64 %shifted.i.i.i225.i3417, %product.i.i.i224.i3416
  %hash.i.i.i227.i3419 = and i64 %xored.i.i.i226.i3418, %tbl_size.i.i222.i3414
  %offset_ptr.i.i228.i3420 = getelementptr i32, ptr %offset_tbl.i.i223.i3415, i64 %hash.i.i.i227.i3419
  %offset.i.i229.i3421 = load i32, ptr %offset_ptr.i.i228.i3420, align 4
  %eq.i232.i3422 = icmp eq i32 %3140, %offset.i.i229.i3421
  call void @llvm.assume(i1 %eq.i232.i3422) #30
  %3142 = load ptr, ptr %result.i111, align 8
  %3143 = load ptr, ptr %309, align 8
  %result.i233.i3423 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3144 = getelementptr i8, ptr %result.i233.i3423, i64 16
  store ptr %3143, ptr %3144, align 8
  %3145 = getelementptr i8, ptr %result.i233.i3423, i64 8
  store ptr %3142, ptr %3145, align 8
  %3146 = getelementptr i8, ptr %result.i233.i3423, i64 24
  store ptr null, ptr %3146, align 8
  %3147 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i233.i3423)
  store ptr @Entry, ptr %result.i233.i3423, align 8
  store ptr @_parameterization_Ptri32, ptr %125, align 8
  store ptr %result.i233.i3423, ptr %447, align 8
  %3148 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %125)
  %3149 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3134)
  %3150 = sext i32 %3140 to i64
  %3151 = getelementptr ptr, ptr %3134, i64 %3150
  %3152 = getelementptr i8, ptr %3151, i64 128
  %3153 = load ptr, ptr %3152, align 8
  store ptr @i32_typ, ptr %126, align 8
  store ptr %.fca.0.extract11.i, ptr %448, align 8
  %3154 = call ptr %3153({ ptr, ptr, ptr, i32 } %3141, ptr nonnull %126)
  call void %3154({ ptr, ptr, ptr, i32 } %3141, { ptr, ptr, ptr, i32 } %3141, ptr nonnull %125, i32 %3114, { ptr, i160 } %3132)
  %3155 = icmp ne ptr %.fca.0.extract87.i3402, @nil_typ
  %3156 = icmp ne ptr %.fca.0.extract87.i3402, null
  %.not138.i3424 = and i1 %3155, %3156
  br i1 %.not138.i3424, label %.cont.cont.i3429, label %3165

.cont.cont.i3429:                                 ; preds = %3077, %3015
  %.sink4005 = phi { ptr, i160 } [ %3051, %3015 ], [ %3131, %3077 ]
  %3157 = phi i32 [ 2, %3015 ], [ 1, %3077 ]
  %vptr.i248.sroa.speculated.i3430 = phi ptr [ %.fca.0.extract112.i3458, %3015 ], [ %.fca.0.extract87.i3402, %3077 ]
  %.fca.1.extract89.i3425 = extractvalue { ptr, i160 } %.sink4005, 1
  %.sroa.3407.sroa.4.0.extract.shift.i3426 = lshr i160 %.fca.1.extract89.i3425, 64
  %3158 = trunc i160 %.sroa.3407.sroa.4.0.extract.shift.i3426 to i64
  %3159 = insertelement <2 x i64> poison, i64 %3158, i64 0
  %3160 = trunc i160 %.fca.1.extract89.i3425 to i64
  %3161 = insertelement <2 x i64> %3159, i64 %3160, i64 1
  %hash_coef_ptr.i.i249.i3433 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i3430, i64 8
  %tbl_size_ptr.i.i250.i3434 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i3430, i64 16
  %offset_tbl_ptr.i.i251.i3435 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i3430, i64 40
  %hash_coef.i.i252.i3436 = load i64, ptr %hash_coef_ptr.i.i249.i3433, align 4
  %tbl_size.i.i253.i3437 = load i64, ptr %tbl_size_ptr.i.i250.i3434, align 4
  %offset_tbl.i.i254.i3438 = load ptr, ptr %offset_tbl_ptr.i.i251.i3435, align 8
  %product.i.i.i255.i3439 = mul i64 %hash_coef.i.i252.i3436, 4015701072841558310
  %shifted.i.i.i256.i3440 = lshr i64 %product.i.i.i255.i3439, 32
  %xored.i.i.i257.i3441 = xor i64 %shifted.i.i.i256.i3440, %product.i.i.i255.i3439
  %hash.i.i.i258.i3442 = and i64 %xored.i.i.i257.i3441, %tbl_size.i.i253.i3437
  %offset_ptr.i.i259.i3443 = getelementptr i32, ptr %offset_tbl.i.i254.i3438, i64 %hash.i.i.i258.i3442
  %offset.i.i260.i3444 = load i32, ptr %offset_ptr.i.i259.i3443, align 4
  %3162 = add nuw nsw i32 %.reg2mem193.0677.i3388, 1
  %3163 = load i32, ptr %349, align 4
  %3164 = icmp slt i32 %3162, %3163
  br i1 %3164, label %3002, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit

3165:                                             ; preds = %3077, %3015
  %3166 = phi ptr [ %127, %3077 ], [ %119, %3015 ]
  %3167 = phi ptr [ %128, %3077 ], [ %120, %3015 ]
  %3168 = phi ptr [ %129, %3077 ], [ %121, %3015 ]
  %3169 = phi ptr [ %.sroa.0.i3370, %3077 ], [ %.sroa.0680.i3369, %3015 ]
  %3170 = phi ptr [ %130, %3077 ], [ %122, %3015 ]
  %3171 = load i32, ptr %347, align 4
  store i32 %3171, ptr %3166, align 4
  store i32 1, ptr %3167, align 4
  %3172 = add i32 %3171, 1
  store i32 %3172, ptr %3168, align 4
  %3173 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  store i32 %3172, ptr %347, align 4
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %3170, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %3169, align 8
  br label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit

HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit: ; preds = %.cont.cont.i3429, %2990, %3165
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %115)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %116)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %117)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %118)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %119)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %120)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %121)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i3369)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %122)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %123)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %124)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %125)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %126)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %127)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %128)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %129)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i3370)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %130)
  br label %._crit_edge1.i

._crit_edge1.i:                                   ; preds = %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit, %2982
  %3174 = add nuw nsw i32 %.reg2mem13.079.i, 1
  %3175 = icmp slt i32 %3174, %2941
  br i1 %3175, label %2982, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit: ; preds = %._crit_edge1.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %153)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %154)
  %3176 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %151)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %152)
  %invariant.gep.i2535 = getelementptr i8, ptr %2927, i64 120
  %offset_tbl.i.i24.i2537 = load ptr, ptr %offset_tbl_ptr.i.i48.i, align 8
  %hash_coef.i.i22.i2539 = load i64, ptr %hash_coef_ptr.i.i46.i, align 4
  %product.i.i.i25.i2540 = mul i64 %hash_coef.i.i22.i2539, -5261542750394134544
  %shifted.i.i.i26.i2541 = lshr i64 %product.i.i.i25.i2540, 32
  %xored.i.i.i27.i2542 = xor i64 %shifted.i.i.i26.i2541, %product.i.i.i25.i2540
  %tbl_size.i.i23.i2544 = load i64, ptr %tbl_size_ptr.i.i47.i, align 4
  %hash.i.i.i28.i2545 = and i64 %xored.i.i.i27.i2542, %tbl_size.i.i23.i2544
  %offset_ptr.i.i29.i2546 = getelementptr i32, ptr %offset_tbl.i.i24.i2537, i64 %hash.i.i.i28.i2545
  %offset.i.i30.i2547 = load i32, ptr %offset_ptr.i.i29.i2546, align 4
  %3177 = insertvalue { ptr, ptr, ptr, i32 } %2932, i32 %offset.i.i30.i2547, 3
  %3178 = sext i32 %offset.i.i30.i2547 to i64
  %gep.i2561 = getelementptr ptr, ptr %invariant.gep.i2535, i64 %3178
  %3179 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %3180

3180:                                             ; preds = %._crit_edge1.i2565, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit
  %.reg2mem13.079.i2562 = phi i32 [ 0, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit ], [ %3372, %._crit_edge1.i2565 ]
  store ptr @_parameterization_Ptri32, ptr %151, align 8
  %3181 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %151)
  %3182 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %2927)
  %3183 = load ptr, ptr %gep.i2561, align 8
  store ptr @i32_typ, ptr %152, align 8
  %3184 = call ptr %3183({ ptr, ptr, ptr, i32 } %3177, ptr nonnull %152)
  %3185 = call { ptr, i160 } %3184({ ptr, ptr, ptr, i32 } %3177, { ptr, ptr, ptr, i32 } %3177, ptr nonnull %151, i32 %.reg2mem13.079.i2562)
  %.fca.0.extract11.i2563 = extractvalue { ptr, i160 } %3185, 0
  %3186 = icmp ne ptr %.fca.0.extract11.i2563, @nil_typ
  %3187 = icmp ne ptr %.fca.0.extract11.i2563, null
  %.not17.i2564 = and i1 %3186, %3187
  br i1 %.not17.i2564, label %3188, label %._crit_edge1.i2565

3188:                                             ; preds = %3180
  %hash_coef_ptr.i.i33.i2570 = getelementptr i8, ptr %.fca.0.extract11.i2563, i64 8
  %tbl_size_ptr.i.i34.i2571 = getelementptr i8, ptr %.fca.0.extract11.i2563, i64 16
  %offset_tbl_ptr.i.i35.i2572 = getelementptr i8, ptr %.fca.0.extract11.i2563, i64 40
  %3189 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %99)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %100)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %101)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %102)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %103)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %104)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %105)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0680.i3483)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %106)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %107)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %108)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %109)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %110)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %111)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %112)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %113)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i3485)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %114)
  %hash_coef.i.i147.i3505 = load i64, ptr %hash_coef_ptr.i.i33.i2570, align 4
  %tbl_size.i.i148.i3506 = load i64, ptr %tbl_size_ptr.i.i34.i2571, align 4
  %offset_tbl.i.i149.i3507 = load ptr, ptr %offset_tbl_ptr.i.i35.i2572, align 8
  %product.i.i.i150.i3508 = mul i64 %hash_coef.i.i147.i3505, 4015701072841558310
  %shifted.i.i.i151.i3509 = lshr i64 %product.i.i.i150.i3508, 32
  %xored.i.i.i152.i3510 = xor i64 %shifted.i.i.i151.i3509, %product.i.i.i150.i3508
  %hash.i.i.i153.i3511 = and i64 %xored.i.i.i152.i3510, %tbl_size.i.i148.i3506
  %offset_ptr.i.i154.i3512 = getelementptr i32, ptr %offset_tbl.i.i149.i3507, i64 %hash.i.i.i153.i3511
  %offset.i.i169.i3513 = load i32, ptr %offset_ptr.i.i154.i3512, align 4
  %3190 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3191 = load i32, ptr %349, align 4
  %3192 = icmp sgt i32 %3191, 0
  br i1 %3192, label %.lr.ph.i3519, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit3639

.lr.ph.i3519:                                     ; preds = %3188
  %.fca.1.extract13.i2566 = extractvalue { ptr, i160 } %3185, 1
  %.sroa.576.8.extract.shift.i2568 = lshr i160 %.fca.1.extract13.i2566, 64
  %3193 = insertelement <2 x i160> poison, i160 %.sroa.576.8.extract.shift.i2568, i64 0
  %3194 = insertelement <2 x i160> %3193, i160 %.fca.1.extract13.i2566, i64 1
  %3195 = trunc <2 x i160> %3194 to <2 x i64>
  %3196 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i2563, 0
  %3197 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %3198 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract11.i2563)
  %invariant.gep3970 = getelementptr i8, ptr %.fca.0.extract11.i2563, i64 64
  %3199 = insertvalue { ptr, i160 } undef, ptr %.fca.0.extract11.i2563, 0
  br label %3200

3200:                                             ; preds = %.cont.cont.i3572, %.lr.ph.i3519
  %offset.i.i260.i35893977 = phi i32 [ %offset.i.i169.i3513, %.lr.ph.i3519 ], [ %offset.i.i260.i3589, %.cont.cont.i3572 ]
  %.reg2mem195.0678.i3520 = phi i32 [ 1, %.lr.ph.i3519 ], [ %3355, %.cont.cont.i3572 ]
  %.reg2mem193.0677.i3521 = phi i32 [ 0, %.lr.ph.i3519 ], [ %3360, %.cont.cont.i3572 ]
  %3201 = phi <2 x i64> [ %3195, %.lr.ph.i3519 ], [ %3359, %.cont.cont.i3572 ]
  %3202 = extractelement <2 x i64> %3201, i64 1
  %.sroa.speculated352.i35763973 = inttoptr i64 %3202 to ptr
  %3203 = extractelement <2 x i64> %3201, i64 0
  %.sroa.speculated346.i35773975 = inttoptr i64 %3203 to ptr
  %3204 = insertvalue { ptr, ptr, ptr, i32 } %3196, ptr %.sroa.speculated352.i35763973, 1
  %3205 = insertvalue { ptr, ptr, ptr, i32 } %3204, ptr %.sroa.speculated346.i35773975, 2
  %3206 = insertvalue { ptr, ptr, ptr, i32 } %3205, i32 %offset.i.i260.i35893977, 3
  %3207 = sext i32 %offset.i.i260.i35893977 to i64
  %gep3971 = getelementptr ptr, ptr %invariant.gep3970, i64 %3207
  %3208 = load ptr, ptr %gep3971, align 8
  %3209 = call ptr %3208({ ptr, ptr, ptr, i32 } %3206, ptr nonnull %2)
  %3210 = call i32 %3209({ ptr, ptr, ptr, i32 } %3206, { ptr, ptr, ptr, i32 } %3206, ptr nonnull %2)
  %3211 = icmp eq i32 %.reg2mem195.0678.i3520, 1
  %3212 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br i1 %3211, label %3213, label %3275

3213:                                             ; preds = %3200
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %3214 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3215 = load ptr, ptr %326, align 8
  %3216 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3215, 0
  %3217 = load ptr, ptr %327, align 8
  %3218 = insertvalue { ptr, ptr, ptr, i32 } %3216, ptr %3217, 1
  %3219 = load ptr, ptr %328, align 8
  %3220 = insertvalue { ptr, ptr, ptr, i32 } %3218, ptr %3219, 2
  %3221 = load i32, ptr %329, align 4
  %3222 = insertvalue { ptr, ptr, ptr, i32 } %3220, i32 %3221, 3
  %hash_coef_ptr.i.i10.i4728 = getelementptr i8, ptr %3215, i64 8
  %tbl_size_ptr.i.i11.i4729 = getelementptr i8, ptr %3215, i64 16
  %offset_tbl_ptr.i.i12.i4730 = getelementptr i8, ptr %3215, i64 40
  %hash_coef.i.i13.i4731 = load i64, ptr %hash_coef_ptr.i.i10.i4728, align 4
  %tbl_size.i.i14.i4732 = load i64, ptr %tbl_size_ptr.i.i11.i4729, align 4
  %offset_tbl.i.i15.i4733 = load ptr, ptr %offset_tbl_ptr.i.i12.i4730, align 8
  %product.i.i.i16.i4734 = mul i64 %hash_coef.i.i13.i4731, -5261542750394134544
  %shifted.i.i.i17.i4735 = lshr i64 %product.i.i.i16.i4734, 32
  %xored.i.i.i18.i4736 = xor i64 %shifted.i.i.i17.i4735, %product.i.i.i16.i4734
  %hash.i.i.i19.i4737 = and i64 %xored.i.i.i18.i4736, %tbl_size.i.i14.i4732
  %offset_ptr.i.i20.i4738 = getelementptr i32, ptr %offset_tbl.i.i15.i4733, i64 %hash.i.i.i19.i4737
  %offset.i.i21.i4739 = load i32, ptr %offset_ptr.i.i20.i4738, align 4
  %eq.i.i4740 = icmp eq i32 %3221, %offset.i.i21.i4739
  call void @llvm.assume(i1 %eq.i.i4740) #30
  %3223 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %3224 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3215)
  %3225 = sext i32 %3221 to i64
  %3226 = getelementptr ptr, ptr %3215, i64 %3225
  %3227 = getelementptr i8, ptr %3226, i64 64
  %3228 = load ptr, ptr %3227, align 8
  %3229 = call ptr %3228({ ptr, ptr, ptr, i32 } %3222, ptr nonnull %2)
  %3230 = call i32 %3229({ ptr, ptr, ptr, i32 } %3222, { ptr, ptr, ptr, i32 } %3222, ptr nonnull %2)
  %3231 = add i32 %3230, -1
  %3232 = and i32 %3231, %3210
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %3233 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3234 = load ptr, ptr %326, align 8
  %3235 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3234, 0
  %3236 = load ptr, ptr %327, align 8
  %3237 = insertvalue { ptr, ptr, ptr, i32 } %3235, ptr %3236, 1
  %3238 = load ptr, ptr %328, align 8
  %3239 = insertvalue { ptr, ptr, ptr, i32 } %3237, ptr %3238, 2
  %3240 = load i32, ptr %329, align 4
  %3241 = insertvalue { ptr, ptr, ptr, i32 } %3239, i32 %3240, 3
  %hash_coef_ptr.i.i172.i3594 = getelementptr i8, ptr %3234, i64 8
  %tbl_size_ptr.i.i173.i3595 = getelementptr i8, ptr %3234, i64 16
  %offset_tbl_ptr.i.i174.i3596 = getelementptr i8, ptr %3234, i64 40
  %hash_coef.i.i175.i3597 = load i64, ptr %hash_coef_ptr.i.i172.i3594, align 4
  %tbl_size.i.i176.i3598 = load i64, ptr %tbl_size_ptr.i.i173.i3595, align 4
  %offset_tbl.i.i177.i3599 = load ptr, ptr %offset_tbl_ptr.i.i174.i3596, align 8
  %product.i.i.i178.i3600 = mul i64 %hash_coef.i.i175.i3597, -5261542750394134544
  %shifted.i.i.i179.i3601 = lshr i64 %product.i.i.i178.i3600, 32
  %xored.i.i.i180.i3602 = xor i64 %shifted.i.i.i179.i3601, %product.i.i.i178.i3600
  %hash.i.i.i181.i3603 = and i64 %xored.i.i.i180.i3602, %tbl_size.i.i176.i3598
  %offset_ptr.i.i182.i3604 = getelementptr i32, ptr %offset_tbl.i.i177.i3599, i64 %hash.i.i.i181.i3603
  %offset.i.i183.i3605 = load i32, ptr %offset_ptr.i.i182.i3604, align 4
  %eq.i.i3606 = icmp eq i32 %3240, %offset.i.i183.i3605
  call void @llvm.assume(i1 %eq.i.i3606) #30
  store ptr @_parameterization_Ptri32, ptr %99, align 8
  %3242 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %99)
  %3243 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3234)
  %3244 = sext i32 %3240 to i64
  %3245 = getelementptr ptr, ptr %3234, i64 %3244
  %3246 = getelementptr i8, ptr %3245, i64 120
  %3247 = load ptr, ptr %3246, align 8
  store ptr @i32_typ, ptr %100, align 8
  %3248 = call ptr %3247({ ptr, ptr, ptr, i32 } %3241, ptr nonnull %100)
  %3249 = call { ptr, i160 } %3248({ ptr, ptr, ptr, i32 } %3241, { ptr, ptr, ptr, i32 } %3241, ptr nonnull %99, i32 %3232)
  %.fca.0.extract112.i3607 = extractvalue { ptr, i160 } %3249, 0
  %.sroa.3111.0.insert.ext.i3608 = zext i32 %offset.i.i260.i35893977 to i160
  %.sroa.3111.0.insert.shift.i3609 = shl nuw i160 %.sroa.3111.0.insert.ext.i3608, 128
  %.sroa.2110.0.insert.ext.i3610 = zext i64 %3203 to i160
  %.sroa.2110.0.insert.shift.i3611 = shl nuw nsw i160 %.sroa.2110.0.insert.ext.i3610, 64
  %.sroa.2110.0.insert.insert.i3612 = or disjoint i160 %.sroa.2110.0.insert.shift.i3611, %.sroa.3111.0.insert.shift.i3609
  %.sroa.0109.0.insert.ext.i3613 = zext i64 %3202 to i160
  %.sroa.0109.0.insert.insert.i3614 = or disjoint i160 %.sroa.2110.0.insert.insert.i3612, %.sroa.0109.0.insert.ext.i3613
  %3250 = insertvalue { ptr, i160 } %3199, i160 %.sroa.0109.0.insert.insert.i3614, 1
  %3251 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3252 = load ptr, ptr %326, align 8
  %3253 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3252, 0
  %3254 = load ptr, ptr %327, align 8
  %3255 = insertvalue { ptr, ptr, ptr, i32 } %3253, ptr %3254, 1
  %3256 = load ptr, ptr %328, align 8
  %3257 = insertvalue { ptr, ptr, ptr, i32 } %3255, ptr %3256, 2
  %3258 = load i32, ptr %329, align 4
  %3259 = insertvalue { ptr, ptr, ptr, i32 } %3257, i32 %3258, 3
  %hash_coef_ptr.i.i186.i3619 = getelementptr i8, ptr %3252, i64 8
  %tbl_size_ptr.i.i187.i3620 = getelementptr i8, ptr %3252, i64 16
  %offset_tbl_ptr.i.i188.i3621 = getelementptr i8, ptr %3252, i64 40
  %hash_coef.i.i189.i3622 = load i64, ptr %hash_coef_ptr.i.i186.i3619, align 4
  %tbl_size.i.i190.i3623 = load i64, ptr %tbl_size_ptr.i.i187.i3620, align 4
  %offset_tbl.i.i191.i3624 = load ptr, ptr %offset_tbl_ptr.i.i188.i3621, align 8
  %product.i.i.i192.i3625 = mul i64 %hash_coef.i.i189.i3622, -5261542750394134544
  %shifted.i.i.i193.i3626 = lshr i64 %product.i.i.i192.i3625, 32
  %xored.i.i.i194.i3627 = xor i64 %shifted.i.i.i193.i3626, %product.i.i.i192.i3625
  %hash.i.i.i195.i3628 = and i64 %xored.i.i.i194.i3627, %tbl_size.i.i190.i3623
  %offset_ptr.i.i196.i3629 = getelementptr i32, ptr %offset_tbl.i.i191.i3624, i64 %hash.i.i.i195.i3628
  %offset.i.i197.i3630 = load i32, ptr %offset_ptr.i.i196.i3629, align 4
  %eq.i200.i3631 = icmp eq i32 %3258, %offset.i.i197.i3630
  call void @llvm.assume(i1 %eq.i200.i3631) #30
  %3260 = load ptr, ptr %result.i111, align 8
  %3261 = load ptr, ptr %309, align 8
  %result.i.i3632 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3262 = getelementptr i8, ptr %result.i.i3632, i64 16
  store ptr %3261, ptr %3262, align 8
  %3263 = getelementptr i8, ptr %result.i.i3632, i64 8
  store ptr %3260, ptr %3263, align 8
  %3264 = getelementptr i8, ptr %result.i.i3632, i64 24
  store ptr null, ptr %3264, align 8
  %3265 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i3632)
  store ptr @Entry, ptr %result.i.i3632, align 8
  store ptr @_parameterization_Ptri32, ptr %101, align 8
  store ptr %result.i.i3632, ptr %453, align 8
  %3266 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %101)
  %3267 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3252)
  %3268 = sext i32 %3258 to i64
  %3269 = getelementptr ptr, ptr %3252, i64 %3268
  %3270 = getelementptr i8, ptr %3269, i64 128
  %3271 = load ptr, ptr %3270, align 8
  store ptr @i32_typ, ptr %102, align 8
  store ptr %.fca.0.extract11.i2563, ptr %454, align 8
  %3272 = call ptr %3271({ ptr, ptr, ptr, i32 } %3259, ptr nonnull %102)
  call void %3272({ ptr, ptr, ptr, i32 } %3259, { ptr, ptr, ptr, i32 } %3259, ptr nonnull %101, i32 %3232, { ptr, i160 } %3250)
  %3273 = icmp ne ptr %.fca.0.extract112.i3607, @nil_typ
  %3274 = icmp ne ptr %.fca.0.extract112.i3607, null
  %.not140.i3633 = and i1 %3273, %3274
  br i1 %.not140.i3633, label %.cont.cont.i3572, label %3363

3275:                                             ; preds = %3200
  %3276 = add i32 %3210, 2127912214
  %3277 = shl i32 %3210, 12
  %3278 = add i32 %3276, %3277
  %3279 = ashr i32 %3278, 19
  %3280 = xor i32 %3278, %3279
  %3281 = xor i32 %3280, -949894596
  %3282 = add i32 %3281, 374761393
  %3283 = shl i32 %3281, 5
  %3284 = add i32 %3282, %3283
  %3285 = add i32 %3284, -744332180
  %3286 = shl i32 %3284, 9
  %3287 = xor i32 %3285, %3286
  %3288 = add i32 %3287, -42973499
  %3289 = shl i32 %3287, 3
  %3290 = add i32 %3288, %3289
  %3291 = ashr i32 %3290, 16
  %3292 = xor i32 %3290, %3291
  %3293 = xor i32 %3292, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %3294 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3295 = load ptr, ptr %343, align 8
  %3296 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3295, 0
  %3297 = load ptr, ptr %344, align 8
  %3298 = insertvalue { ptr, ptr, ptr, i32 } %3296, ptr %3297, 1
  %3299 = load ptr, ptr %345, align 8
  %3300 = insertvalue { ptr, ptr, ptr, i32 } %3298, ptr %3299, 2
  %3301 = load i32, ptr %346, align 4
  %3302 = insertvalue { ptr, ptr, ptr, i32 } %3300, i32 %3301, 3
  %hash_coef_ptr.i.i10.i4758 = getelementptr i8, ptr %3295, i64 8
  %tbl_size_ptr.i.i11.i4759 = getelementptr i8, ptr %3295, i64 16
  %offset_tbl_ptr.i.i12.i4760 = getelementptr i8, ptr %3295, i64 40
  %hash_coef.i.i13.i4761 = load i64, ptr %hash_coef_ptr.i.i10.i4758, align 4
  %tbl_size.i.i14.i4762 = load i64, ptr %tbl_size_ptr.i.i11.i4759, align 4
  %offset_tbl.i.i15.i4763 = load ptr, ptr %offset_tbl_ptr.i.i12.i4760, align 8
  %product.i.i.i16.i4764 = mul i64 %hash_coef.i.i13.i4761, -5261542750394134544
  %shifted.i.i.i17.i4765 = lshr i64 %product.i.i.i16.i4764, 32
  %xored.i.i.i18.i4766 = xor i64 %shifted.i.i.i17.i4765, %product.i.i.i16.i4764
  %hash.i.i.i19.i4767 = and i64 %xored.i.i.i18.i4766, %tbl_size.i.i14.i4762
  %offset_ptr.i.i20.i4768 = getelementptr i32, ptr %offset_tbl.i.i15.i4763, i64 %hash.i.i.i19.i4767
  %offset.i.i21.i4769 = load i32, ptr %offset_ptr.i.i20.i4768, align 4
  %eq.i.i4770 = icmp eq i32 %3301, %offset.i.i21.i4769
  call void @llvm.assume(i1 %eq.i.i4770) #30
  %3303 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %3304 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3295)
  %3305 = sext i32 %3301 to i64
  %3306 = getelementptr ptr, ptr %3295, i64 %3305
  %3307 = getelementptr i8, ptr %3306, i64 64
  %3308 = load ptr, ptr %3307, align 8
  %3309 = call ptr %3308({ ptr, ptr, ptr, i32 } %3302, ptr nonnull %2)
  %3310 = call i32 %3309({ ptr, ptr, ptr, i32 } %3302, { ptr, ptr, ptr, i32 } %3302, ptr nonnull %2)
  %3311 = add i32 %3310, -1
  %3312 = and i32 %3311, %3293
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %3313 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3314 = load ptr, ptr %343, align 8
  %3315 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3314, 0
  %3316 = load ptr, ptr %344, align 8
  %3317 = insertvalue { ptr, ptr, ptr, i32 } %3315, ptr %3316, 1
  %3318 = load ptr, ptr %345, align 8
  %3319 = insertvalue { ptr, ptr, ptr, i32 } %3317, ptr %3318, 2
  %3320 = load i32, ptr %346, align 4
  %3321 = insertvalue { ptr, ptr, ptr, i32 } %3319, i32 %3320, 3
  %hash_coef_ptr.i.i202.i3526 = getelementptr i8, ptr %3314, i64 8
  %tbl_size_ptr.i.i203.i3527 = getelementptr i8, ptr %3314, i64 16
  %offset_tbl_ptr.i.i204.i3528 = getelementptr i8, ptr %3314, i64 40
  %hash_coef.i.i205.i3529 = load i64, ptr %hash_coef_ptr.i.i202.i3526, align 4
  %tbl_size.i.i206.i3530 = load i64, ptr %tbl_size_ptr.i.i203.i3527, align 4
  %offset_tbl.i.i207.i3531 = load ptr, ptr %offset_tbl_ptr.i.i204.i3528, align 8
  %product.i.i.i208.i3532 = mul i64 %hash_coef.i.i205.i3529, -5261542750394134544
  %shifted.i.i.i209.i3533 = lshr i64 %product.i.i.i208.i3532, 32
  %xored.i.i.i210.i3534 = xor i64 %shifted.i.i.i209.i3533, %product.i.i.i208.i3532
  %hash.i.i.i211.i3535 = and i64 %xored.i.i.i210.i3534, %tbl_size.i.i206.i3530
  %offset_ptr.i.i212.i3536 = getelementptr i32, ptr %offset_tbl.i.i207.i3531, i64 %hash.i.i.i211.i3535
  %offset.i.i213.i3537 = load i32, ptr %offset_ptr.i.i212.i3536, align 4
  %eq.i216.i3538 = icmp eq i32 %3320, %offset.i.i213.i3537
  call void @llvm.assume(i1 %eq.i216.i3538) #30
  store ptr @_parameterization_Ptri32, ptr %107, align 8
  %3322 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %107)
  %3323 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3314)
  %3324 = sext i32 %3320 to i64
  %3325 = getelementptr ptr, ptr %3314, i64 %3324
  %3326 = getelementptr i8, ptr %3325, i64 120
  %3327 = load ptr, ptr %3326, align 8
  store ptr @i32_typ, ptr %108, align 8
  %3328 = call ptr %3327({ ptr, ptr, ptr, i32 } %3321, ptr nonnull %108)
  %3329 = call { ptr, i160 } %3328({ ptr, ptr, ptr, i32 } %3321, { ptr, ptr, ptr, i32 } %3321, ptr nonnull %107, i32 %3312)
  %.fca.0.extract87.i3539 = extractvalue { ptr, i160 } %3329, 0
  %.sroa.3.0.insert.ext.i3540 = zext i32 %offset.i.i260.i35893977 to i160
  %.sroa.3.0.insert.shift.i3541 = shl nuw i160 %.sroa.3.0.insert.ext.i3540, 128
  %.sroa.2.0.insert.ext.i3542 = zext i64 %3203 to i160
  %.sroa.2.0.insert.shift.i3543 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i3542, 64
  %.sroa.2.0.insert.insert.i3544 = or disjoint i160 %.sroa.2.0.insert.shift.i3543, %.sroa.3.0.insert.shift.i3541
  %.sroa.0.0.insert.ext.i3545 = zext i64 %3202 to i160
  %.sroa.0.0.insert.insert.i3546 = or disjoint i160 %.sroa.2.0.insert.insert.i3544, %.sroa.0.0.insert.ext.i3545
  %3330 = insertvalue { ptr, i160 } %3199, i160 %.sroa.0.0.insert.insert.i3546, 1
  %3331 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3332 = load ptr, ptr %343, align 8
  %3333 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3332, 0
  %3334 = load ptr, ptr %344, align 8
  %3335 = insertvalue { ptr, ptr, ptr, i32 } %3333, ptr %3334, 1
  %3336 = load ptr, ptr %345, align 8
  %3337 = insertvalue { ptr, ptr, ptr, i32 } %3335, ptr %3336, 2
  %3338 = load i32, ptr %346, align 4
  %3339 = insertvalue { ptr, ptr, ptr, i32 } %3337, i32 %3338, 3
  %hash_coef_ptr.i.i218.i3551 = getelementptr i8, ptr %3332, i64 8
  %tbl_size_ptr.i.i219.i3552 = getelementptr i8, ptr %3332, i64 16
  %offset_tbl_ptr.i.i220.i3553 = getelementptr i8, ptr %3332, i64 40
  %hash_coef.i.i221.i3554 = load i64, ptr %hash_coef_ptr.i.i218.i3551, align 4
  %tbl_size.i.i222.i3555 = load i64, ptr %tbl_size_ptr.i.i219.i3552, align 4
  %offset_tbl.i.i223.i3556 = load ptr, ptr %offset_tbl_ptr.i.i220.i3553, align 8
  %product.i.i.i224.i3557 = mul i64 %hash_coef.i.i221.i3554, -5261542750394134544
  %shifted.i.i.i225.i3558 = lshr i64 %product.i.i.i224.i3557, 32
  %xored.i.i.i226.i3559 = xor i64 %shifted.i.i.i225.i3558, %product.i.i.i224.i3557
  %hash.i.i.i227.i3560 = and i64 %xored.i.i.i226.i3559, %tbl_size.i.i222.i3555
  %offset_ptr.i.i228.i3561 = getelementptr i32, ptr %offset_tbl.i.i223.i3556, i64 %hash.i.i.i227.i3560
  %offset.i.i229.i3562 = load i32, ptr %offset_ptr.i.i228.i3561, align 4
  %eq.i232.i3563 = icmp eq i32 %3338, %offset.i.i229.i3562
  call void @llvm.assume(i1 %eq.i232.i3563) #30
  %3340 = load ptr, ptr %result.i111, align 8
  %3341 = load ptr, ptr %309, align 8
  %result.i233.i3564 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3342 = getelementptr i8, ptr %result.i233.i3564, i64 16
  store ptr %3341, ptr %3342, align 8
  %3343 = getelementptr i8, ptr %result.i233.i3564, i64 8
  store ptr %3340, ptr %3343, align 8
  %3344 = getelementptr i8, ptr %result.i233.i3564, i64 24
  store ptr null, ptr %3344, align 8
  %3345 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i233.i3564)
  store ptr @Entry, ptr %result.i233.i3564, align 8
  store ptr @_parameterization_Ptri32, ptr %109, align 8
  store ptr %result.i233.i3564, ptr %451, align 8
  %3346 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %109)
  %3347 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3332)
  %3348 = sext i32 %3338 to i64
  %3349 = getelementptr ptr, ptr %3332, i64 %3348
  %3350 = getelementptr i8, ptr %3349, i64 128
  %3351 = load ptr, ptr %3350, align 8
  store ptr @i32_typ, ptr %110, align 8
  store ptr %.fca.0.extract11.i2563, ptr %452, align 8
  %3352 = call ptr %3351({ ptr, ptr, ptr, i32 } %3339, ptr nonnull %110)
  call void %3352({ ptr, ptr, ptr, i32 } %3339, { ptr, ptr, ptr, i32 } %3339, ptr nonnull %109, i32 %3312, { ptr, i160 } %3330)
  %3353 = icmp ne ptr %.fca.0.extract87.i3539, @nil_typ
  %3354 = icmp ne ptr %.fca.0.extract87.i3539, null
  %.not138.i3565 = and i1 %3353, %3354
  br i1 %.not138.i3565, label %.cont.cont.i3572, label %3363

.cont.cont.i3572:                                 ; preds = %3275, %3213
  %.sink4007 = phi { ptr, i160 } [ %3249, %3213 ], [ %3329, %3275 ]
  %3355 = phi i32 [ 2, %3213 ], [ 1, %3275 ]
  %vptr.i248.sroa.speculated.i3575 = phi ptr [ %.fca.0.extract112.i3607, %3213 ], [ %.fca.0.extract87.i3539, %3275 ]
  %.fca.1.extract89.i3568 = extractvalue { ptr, i160 } %.sink4007, 1
  %.sroa.3407.sroa.4.0.extract.shift.i3569 = lshr i160 %.fca.1.extract89.i3568, 64
  %3356 = trunc i160 %.sroa.3407.sroa.4.0.extract.shift.i3569 to i64
  %3357 = insertelement <2 x i64> poison, i64 %3356, i64 0
  %3358 = trunc i160 %.fca.1.extract89.i3568 to i64
  %3359 = insertelement <2 x i64> %3357, i64 %3358, i64 1
  %hash_coef_ptr.i.i249.i3578 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i3575, i64 8
  %tbl_size_ptr.i.i250.i3579 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i3575, i64 16
  %offset_tbl_ptr.i.i251.i3580 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i3575, i64 40
  %hash_coef.i.i252.i3581 = load i64, ptr %hash_coef_ptr.i.i249.i3578, align 4
  %tbl_size.i.i253.i3582 = load i64, ptr %tbl_size_ptr.i.i250.i3579, align 4
  %offset_tbl.i.i254.i3583 = load ptr, ptr %offset_tbl_ptr.i.i251.i3580, align 8
  %product.i.i.i255.i3584 = mul i64 %hash_coef.i.i252.i3581, 4015701072841558310
  %shifted.i.i.i256.i3585 = lshr i64 %product.i.i.i255.i3584, 32
  %xored.i.i.i257.i3586 = xor i64 %shifted.i.i.i256.i3585, %product.i.i.i255.i3584
  %hash.i.i.i258.i3587 = and i64 %xored.i.i.i257.i3586, %tbl_size.i.i253.i3582
  %offset_ptr.i.i259.i3588 = getelementptr i32, ptr %offset_tbl.i.i254.i3583, i64 %hash.i.i.i258.i3587
  %offset.i.i260.i3589 = load i32, ptr %offset_ptr.i.i259.i3588, align 4
  %3360 = add nuw nsw i32 %.reg2mem193.0677.i3521, 1
  %3361 = load i32, ptr %349, align 4
  %3362 = icmp slt i32 %3360, %3361
  br i1 %3362, label %3200, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit3639

3363:                                             ; preds = %3275, %3213
  %3364 = phi ptr [ %111, %3275 ], [ %103, %3213 ]
  %3365 = phi ptr [ %112, %3275 ], [ %104, %3213 ]
  %3366 = phi ptr [ %113, %3275 ], [ %105, %3213 ]
  %3367 = phi ptr [ %.sroa.0.i3485, %3275 ], [ %.sroa.0680.i3483, %3213 ]
  %3368 = phi ptr [ %114, %3275 ], [ %106, %3213 ]
  %3369 = load i32, ptr %347, align 4
  store i32 %3369, ptr %3364, align 4
  store i32 1, ptr %3365, align 4
  %3370 = add i32 %3369, 1
  store i32 %3370, ptr %3366, align 4
  %3371 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  store i32 %3370, ptr %347, align 4
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %3368, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %3367, align 8
  br label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit3639

HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit3639: ; preds = %.cont.cont.i3572, %3188, %3363
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %99)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %100)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %101)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %102)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %103)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %104)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %105)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i3483)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %106)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %107)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %108)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %109)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %110)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %111)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %112)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %113)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i3485)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %114)
  br label %._crit_edge1.i2565

._crit_edge1.i2565:                               ; preds = %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit3639, %3180
  %3372 = add nuw nsw i32 %.reg2mem13.079.i2562, 1
  %3373 = icmp slt i32 %3372, %2941
  br i1 %3373, label %3180, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2583

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2583.critedge: ; preds = %2917
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %153)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %154)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %151)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %152)
  br label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2583

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2583: ; preds = %._crit_edge1.i2565, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2583.critedge
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %151)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %152)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %231)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %232)
  br label %._crit_edge2.i

._crit_edge2.i:                                   ; preds = %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2583, %.critedge158.i
  %3374 = load ptr, ptr %result.i111, align 8
  %3375 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3376 = load ptr, ptr %309, align 8
  %3377 = load ptr, ptr %3374, align 8
  %3378 = getelementptr i8, ptr %3377, i64 48
  %3379 = load ptr, ptr %3378, align 8
  %3380 = call { i64, i64 } %3379(ptr nonnull %3374)
  %3381 = extractvalue { i64, i64 } %3380, 0
  %3382 = extractvalue { i64, i64 } %3380, 1
  %3383 = urem i64 20, %3382
  %3384 = icmp eq i64 %3383, 0
  %3385 = sub i64 %3382, %3383
  %3386 = select i1 %3384, i64 0, i64 %3385
  %3387 = add i64 %3381, 20
  %3388 = add i64 %3387, %3386
  %3389 = load ptr, ptr %3376, align 8
  %3390 = getelementptr i8, ptr %3389, i64 48
  %3391 = load ptr, ptr %3390, align 8
  %3392 = call { i64, i64 } %3391(ptr nonnull %3376)
  %3393 = extractvalue { i64, i64 } %3392, 0
  %3394 = extractvalue { i64, i64 } %3392, 1
  %3395 = call i64 @llvm.umax.i64(i64 %3382, i64 %3394)
  %3396 = call i64 @llvm.umax.i64(i64 %3395, i64 8)
  %3397 = urem i64 %3388, %3394
  %3398 = icmp eq i64 %3397, 0
  %3399 = sub i64 %3394, %3397
  %3400 = select i1 %3398, i64 0, i64 %3399
  %3401 = add i64 %3393, %3388
  %3402 = add i64 %3401, %3400
  %3403 = urem i64 %3402, %3396
  %3404 = icmp eq i64 %3403, 0
  %3405 = sub i64 %3396, %3403
  %3406 = select i1 %3404, i64 0, i64 %3405
  %3407 = add i64 %3406, %3402
  %result.i296.i = call noalias ptr @bump_malloc_inner(i64 noundef %3407, ptr nonnull @current_ptr) #29
  store ptr %3374, ptr %result.i296.i, align 8
  %3408 = getelementptr i8, ptr %result.i296.i, i64 8
  store ptr %3376, ptr %3408, align 8
  %3409 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i296.i)
  store ptr @Entry, ptr %256, align 8
  store ptr %result.i296.i, ptr %354, align 8
  store i32 9, ptr %355, align 8
  %3410 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %256)
  %3411 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3412 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %3413 = load ptr, ptr %3374, align 8
  %3414 = getelementptr i8, ptr %3413, i64 48
  %3415 = load ptr, ptr %3414, align 8
  %3416 = call { i64, i64 } %3415(ptr nonnull %3374)
  %3417 = extractvalue { i64, i64 } %3416, 1
  %3418 = urem i64 20, %3417
  %3419 = icmp eq i64 %3418, 0
  %reass.sub5168 = sub i64 %3417, %3418
  %3420 = add i64 %reass.sub5168, 20
  %3421 = select i1 %3419, i64 20, i64 %3420
  %3422 = getelementptr i8, ptr %result.i296.i, i64 %3421
  %3423 = load ptr, ptr %result.i296.i, align 8
  %3424 = load ptr, ptr %3423, align 8
  %3425 = getelementptr i8, ptr %3424, i64 64
  %3426 = load ptr, ptr %3425, align 8
  call void %3426({ ptr, i160 } %485, ptr nonnull %3423, ptr %3422)
  %3427 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %3428 = load ptr, ptr %result.i296.i, align 8
  %3429 = load ptr, ptr %3428, align 8
  %3430 = getelementptr i8, ptr %3429, i64 48
  %3431 = load ptr, ptr %3430, align 8
  %3432 = call { i64, i64 } %3431(ptr nonnull %3428)
  %3433 = extractvalue { i64, i64 } %3432, 0
  %3434 = extractvalue { i64, i64 } %3432, 1
  %3435 = urem i64 20, %3434
  %3436 = icmp eq i64 %3435, 0
  %3437 = sub i64 %3434, %3435
  %3438 = select i1 %3436, i64 0, i64 %3437
  %3439 = add i64 %3433, 20
  %3440 = add i64 %3439, %3438
  %3441 = load ptr, ptr %3408, align 8
  %3442 = load ptr, ptr %3441, align 8
  %3443 = getelementptr i8, ptr %3442, i64 48
  %3444 = load ptr, ptr %3443, align 8
  %3445 = call { i64, i64 } %3444(ptr nonnull %3441)
  %3446 = extractvalue { i64, i64 } %3445, 1
  %3447 = urem i64 %3440, %3446
  %3448 = icmp eq i64 %3447, 0
  %3449 = sub i64 %3446, %3447
  %3450 = select i1 %3448, i64 0, i64 %3449
  %3451 = getelementptr i8, ptr %result.i296.i, i64 %3440
  %3452 = getelementptr i8, ptr %3451, i64 %3450
  %3453 = load ptr, ptr %3408, align 8
  %3454 = load ptr, ptr %3453, align 8
  %3455 = getelementptr i8, ptr %3454, i64 64
  %3456 = load ptr, ptr %3455, align 8
  call void %3456({ ptr, i160 } %2523, ptr nonnull %3453, ptr %3452)
  %3457 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %3458 = getelementptr i8, ptr %result.i296.i, i64 16
  store i32 %2526, ptr %3458, align 4
  %3459 = load ptr, ptr %356, align 8
  %3460 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %214)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %215)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %216)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %217)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %218)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %219)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %220)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0680.i)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %221)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %222)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %223)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %224)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %225)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %226)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %227)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %228)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i1133)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %229)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %230)
  store ptr @Entry, ptr %230, align 8
  store ptr %result.i296.i, ptr %389, align 8
  store ptr %3459, ptr %390, align 8
  store i32 9, ptr %391, align 8
  %3461 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %230)
  %3462 = load i32, ptr %349, align 4
  %3463 = icmp sgt i32 %3462, 0
  br i1 %3463, label %.lr.ph.i, label %._crit_edge3.i

.lr.ph.i:                                         ; preds = %._crit_edge2.i
  %3464 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3465 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %3466 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  br label %3467

3467:                                             ; preds = %.cont.cont.i, %.lr.ph.i
  %offset.i.i260.i1680 = phi i32 [ 9, %.lr.ph.i ], [ %offset.i.i260.i, %.cont.cont.i ]
  %.sroa.speculated346.i1678 = phi ptr [ %3459, %.lr.ph.i ], [ %.sroa.speculated346.i, %.cont.cont.i ]
  %.sroa.speculated352.i1676 = phi ptr [ %result.i296.i, %.lr.ph.i ], [ %.sroa.speculated352.i, %.cont.cont.i ]
  %.reg2mem195.0678.i = phi i32 [ 1, %.lr.ph.i ], [ %3623, %.cont.cont.i ]
  %.reg2mem193.0677.i = phi i32 [ 0, %.lr.ph.i ], [ %3624, %.cont.cont.i ]
  %3468 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Entry, ptr undef, ptr undef, i32 undef }, ptr %.sroa.speculated352.i1676, 1
  %3469 = insertvalue { ptr, ptr, ptr, i32 } %3468, ptr %.sroa.speculated346.i1678, 2
  %3470 = insertvalue { ptr, ptr, ptr, i32 } %3469, i32 %offset.i.i260.i1680, 3
  %3471 = sext i32 %offset.i.i260.i1680 to i64
  %gep1675 = getelementptr ptr, ptr getelementptr inbounds (i8, ptr @Entry, i64 64), i64 %3471
  %3472 = load ptr, ptr %gep1675, align 8
  %3473 = call ptr %3472({ ptr, ptr, ptr, i32 } %3470, ptr nonnull %2)
  %3474 = call i32 %3473({ ptr, ptr, ptr, i32 } %3470, { ptr, ptr, ptr, i32 } %3470, ptr nonnull %2)
  %3475 = icmp eq i32 %.reg2mem195.0678.i, 1
  %3476 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br i1 %3475, label %3477, label %3541

3477:                                             ; preds = %3467
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %3478 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3479 = load ptr, ptr %326, align 8
  %3480 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3479, 0
  %3481 = load ptr, ptr %327, align 8
  %3482 = insertvalue { ptr, ptr, ptr, i32 } %3480, ptr %3481, 1
  %3483 = load ptr, ptr %328, align 8
  %3484 = insertvalue { ptr, ptr, ptr, i32 } %3482, ptr %3483, 2
  %3485 = load i32, ptr %329, align 4
  %3486 = insertvalue { ptr, ptr, ptr, i32 } %3484, i32 %3485, 3
  %hash_coef_ptr.i.i10.i2598 = getelementptr i8, ptr %3479, i64 8
  %tbl_size_ptr.i.i11.i2599 = getelementptr i8, ptr %3479, i64 16
  %offset_tbl_ptr.i.i12.i2600 = getelementptr i8, ptr %3479, i64 40
  %hash_coef.i.i13.i2601 = load i64, ptr %hash_coef_ptr.i.i10.i2598, align 4
  %tbl_size.i.i14.i2602 = load i64, ptr %tbl_size_ptr.i.i11.i2599, align 4
  %offset_tbl.i.i15.i2603 = load ptr, ptr %offset_tbl_ptr.i.i12.i2600, align 8
  %product.i.i.i16.i2604 = mul i64 %hash_coef.i.i13.i2601, -5261542750394134544
  %shifted.i.i.i17.i2605 = lshr i64 %product.i.i.i16.i2604, 32
  %xored.i.i.i18.i2606 = xor i64 %shifted.i.i.i17.i2605, %product.i.i.i16.i2604
  %hash.i.i.i19.i2607 = and i64 %xored.i.i.i18.i2606, %tbl_size.i.i14.i2602
  %offset_ptr.i.i20.i2608 = getelementptr i32, ptr %offset_tbl.i.i15.i2603, i64 %hash.i.i.i19.i2607
  %offset.i.i21.i2609 = load i32, ptr %offset_ptr.i.i20.i2608, align 4
  %eq.i.i2610 = icmp eq i32 %3485, %offset.i.i21.i2609
  call void @llvm.assume(i1 %eq.i.i2610) #30
  %3487 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %3488 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3479)
  %3489 = sext i32 %3485 to i64
  %3490 = getelementptr ptr, ptr %3479, i64 %3489
  %3491 = getelementptr i8, ptr %3490, i64 64
  %3492 = load ptr, ptr %3491, align 8
  %3493 = call ptr %3492({ ptr, ptr, ptr, i32 } %3486, ptr nonnull %2)
  %3494 = call i32 %3493({ ptr, ptr, ptr, i32 } %3486, { ptr, ptr, ptr, i32 } %3486, ptr nonnull %2)
  %3495 = add i32 %3494, -1
  %3496 = and i32 %3495, %3474
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %3497 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3498 = load ptr, ptr %326, align 8
  %3499 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3498, 0
  %3500 = load ptr, ptr %327, align 8
  %3501 = insertvalue { ptr, ptr, ptr, i32 } %3499, ptr %3500, 1
  %3502 = load ptr, ptr %328, align 8
  %3503 = insertvalue { ptr, ptr, ptr, i32 } %3501, ptr %3502, 2
  %3504 = load i32, ptr %329, align 4
  %3505 = insertvalue { ptr, ptr, ptr, i32 } %3503, i32 %3504, 3
  %hash_coef_ptr.i.i172.i = getelementptr i8, ptr %3498, i64 8
  %tbl_size_ptr.i.i173.i = getelementptr i8, ptr %3498, i64 16
  %offset_tbl_ptr.i.i174.i = getelementptr i8, ptr %3498, i64 40
  %hash_coef.i.i175.i = load i64, ptr %hash_coef_ptr.i.i172.i, align 4
  %tbl_size.i.i176.i = load i64, ptr %tbl_size_ptr.i.i173.i, align 4
  %offset_tbl.i.i177.i = load ptr, ptr %offset_tbl_ptr.i.i174.i, align 8
  %product.i.i.i178.i = mul i64 %hash_coef.i.i175.i, -5261542750394134544
  %shifted.i.i.i179.i = lshr i64 %product.i.i.i178.i, 32
  %xored.i.i.i180.i = xor i64 %shifted.i.i.i179.i, %product.i.i.i178.i
  %hash.i.i.i181.i = and i64 %xored.i.i.i180.i, %tbl_size.i.i176.i
  %offset_ptr.i.i182.i = getelementptr i32, ptr %offset_tbl.i.i177.i, i64 %hash.i.i.i181.i
  %offset.i.i183.i = load i32, ptr %offset_ptr.i.i182.i, align 4
  %eq.i.i1175 = icmp eq i32 %3504, %offset.i.i183.i
  call void @llvm.assume(i1 %eq.i.i1175) #30
  store ptr @_parameterization_Ptri32, ptr %214, align 8
  %3506 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %214)
  %3507 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3498)
  %3508 = sext i32 %3504 to i64
  %3509 = getelementptr ptr, ptr %3498, i64 %3508
  %3510 = getelementptr i8, ptr %3509, i64 120
  %3511 = load ptr, ptr %3510, align 8
  store ptr @i32_typ, ptr %215, align 8
  %3512 = call ptr %3511({ ptr, ptr, ptr, i32 } %3505, ptr nonnull %215)
  %3513 = call { ptr, i160 } %3512({ ptr, ptr, ptr, i32 } %3505, { ptr, ptr, ptr, i32 } %3505, ptr nonnull %214, i32 %3496)
  %.fca.0.extract112.i = extractvalue { ptr, i160 } %3513, 0
  %3514 = ptrtoint ptr %.sroa.speculated352.i1676 to i64
  %3515 = ptrtoint ptr %.sroa.speculated346.i1678 to i64
  %.sroa.3111.0.insert.ext.i = zext i32 %offset.i.i260.i1680 to i160
  %.sroa.3111.0.insert.shift.i = shl nuw i160 %.sroa.3111.0.insert.ext.i, 128
  %.sroa.2110.0.insert.ext.i = zext i64 %3515 to i160
  %.sroa.2110.0.insert.shift.i = shl nuw nsw i160 %.sroa.2110.0.insert.ext.i, 64
  %.sroa.2110.0.insert.insert.i = or disjoint i160 %.sroa.2110.0.insert.shift.i, %.sroa.3111.0.insert.shift.i
  %.sroa.0109.0.insert.ext.i = zext i64 %3514 to i160
  %.sroa.0109.0.insert.insert.i = or disjoint i160 %.sroa.2110.0.insert.insert.i, %.sroa.0109.0.insert.ext.i
  %3516 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0109.0.insert.insert.i, 1
  %3517 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3518 = load ptr, ptr %326, align 8
  %3519 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3518, 0
  %3520 = load ptr, ptr %327, align 8
  %3521 = insertvalue { ptr, ptr, ptr, i32 } %3519, ptr %3520, 1
  %3522 = load ptr, ptr %328, align 8
  %3523 = insertvalue { ptr, ptr, ptr, i32 } %3521, ptr %3522, 2
  %3524 = load i32, ptr %329, align 4
  %3525 = insertvalue { ptr, ptr, ptr, i32 } %3523, i32 %3524, 3
  %hash_coef_ptr.i.i186.i = getelementptr i8, ptr %3518, i64 8
  %tbl_size_ptr.i.i187.i = getelementptr i8, ptr %3518, i64 16
  %offset_tbl_ptr.i.i188.i = getelementptr i8, ptr %3518, i64 40
  %hash_coef.i.i189.i = load i64, ptr %hash_coef_ptr.i.i186.i, align 4
  %tbl_size.i.i190.i = load i64, ptr %tbl_size_ptr.i.i187.i, align 4
  %offset_tbl.i.i191.i = load ptr, ptr %offset_tbl_ptr.i.i188.i, align 8
  %product.i.i.i192.i = mul i64 %hash_coef.i.i189.i, -5261542750394134544
  %shifted.i.i.i193.i = lshr i64 %product.i.i.i192.i, 32
  %xored.i.i.i194.i = xor i64 %shifted.i.i.i193.i, %product.i.i.i192.i
  %hash.i.i.i195.i = and i64 %xored.i.i.i194.i, %tbl_size.i.i190.i
  %offset_ptr.i.i196.i = getelementptr i32, ptr %offset_tbl.i.i191.i, i64 %hash.i.i.i195.i
  %offset.i.i197.i = load i32, ptr %offset_ptr.i.i196.i, align 4
  %eq.i200.i = icmp eq i32 %3524, %offset.i.i197.i
  call void @llvm.assume(i1 %eq.i200.i) #30
  %3526 = load ptr, ptr %result.i111, align 8
  %3527 = load ptr, ptr %309, align 8
  %result.i.i1176 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3528 = getelementptr i8, ptr %result.i.i1176, i64 16
  store ptr %3527, ptr %3528, align 8
  %3529 = getelementptr i8, ptr %result.i.i1176, i64 8
  store ptr %3526, ptr %3529, align 8
  %3530 = getelementptr i8, ptr %result.i.i1176, i64 24
  store ptr null, ptr %3530, align 8
  %3531 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i1176)
  store ptr @Entry, ptr %result.i.i1176, align 8
  store ptr @_parameterization_Ptri32, ptr %216, align 8
  store ptr %result.i.i1176, ptr %394, align 8
  %3532 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %216)
  %3533 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3518)
  %3534 = sext i32 %3524 to i64
  %3535 = getelementptr ptr, ptr %3518, i64 %3534
  %3536 = getelementptr i8, ptr %3535, i64 128
  %3537 = load ptr, ptr %3536, align 8
  store ptr @i32_typ, ptr %217, align 8
  store ptr @Entry, ptr %395, align 8
  %3538 = call ptr %3537({ ptr, ptr, ptr, i32 } %3525, ptr nonnull %217)
  call void %3538({ ptr, ptr, ptr, i32 } %3525, { ptr, ptr, ptr, i32 } %3525, ptr nonnull %216, i32 %3496, { ptr, i160 } %3516)
  %3539 = icmp ne ptr %.fca.0.extract112.i, @nil_typ
  %3540 = icmp ne ptr %.fca.0.extract112.i, null
  %.not140.i = and i1 %3539, %3540
  br i1 %.not140.i, label %.cont.cont.i, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit.thread

3541:                                             ; preds = %3467
  %3542 = add i32 %3474, 2127912214
  %3543 = shl i32 %3474, 12
  %3544 = add i32 %3542, %3543
  %3545 = ashr i32 %3544, 19
  %3546 = xor i32 %3544, %3545
  %3547 = xor i32 %3546, -949894596
  %3548 = add i32 %3547, 374761393
  %3549 = shl i32 %3547, 5
  %3550 = add i32 %3548, %3549
  %3551 = add i32 %3550, -744332180
  %3552 = shl i32 %3550, 9
  %3553 = xor i32 %3551, %3552
  %3554 = add i32 %3553, -42973499
  %3555 = shl i32 %3553, 3
  %3556 = add i32 %3554, %3555
  %3557 = ashr i32 %3556, 16
  %3558 = xor i32 %3556, %3557
  %3559 = xor i32 %3558, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %3560 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3561 = load ptr, ptr %343, align 8
  %3562 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3561, 0
  %3563 = load ptr, ptr %344, align 8
  %3564 = insertvalue { ptr, ptr, ptr, i32 } %3562, ptr %3563, 1
  %3565 = load ptr, ptr %345, align 8
  %3566 = insertvalue { ptr, ptr, ptr, i32 } %3564, ptr %3565, 2
  %3567 = load i32, ptr %346, align 4
  %3568 = insertvalue { ptr, ptr, ptr, i32 } %3566, i32 %3567, 3
  %hash_coef_ptr.i.i10.i2628 = getelementptr i8, ptr %3561, i64 8
  %tbl_size_ptr.i.i11.i2629 = getelementptr i8, ptr %3561, i64 16
  %offset_tbl_ptr.i.i12.i2630 = getelementptr i8, ptr %3561, i64 40
  %hash_coef.i.i13.i2631 = load i64, ptr %hash_coef_ptr.i.i10.i2628, align 4
  %tbl_size.i.i14.i2632 = load i64, ptr %tbl_size_ptr.i.i11.i2629, align 4
  %offset_tbl.i.i15.i2633 = load ptr, ptr %offset_tbl_ptr.i.i12.i2630, align 8
  %product.i.i.i16.i2634 = mul i64 %hash_coef.i.i13.i2631, -5261542750394134544
  %shifted.i.i.i17.i2635 = lshr i64 %product.i.i.i16.i2634, 32
  %xored.i.i.i18.i2636 = xor i64 %shifted.i.i.i17.i2635, %product.i.i.i16.i2634
  %hash.i.i.i19.i2637 = and i64 %xored.i.i.i18.i2636, %tbl_size.i.i14.i2632
  %offset_ptr.i.i20.i2638 = getelementptr i32, ptr %offset_tbl.i.i15.i2633, i64 %hash.i.i.i19.i2637
  %offset.i.i21.i2639 = load i32, ptr %offset_ptr.i.i20.i2638, align 4
  %eq.i.i2640 = icmp eq i32 %3567, %offset.i.i21.i2639
  call void @llvm.assume(i1 %eq.i.i2640) #30
  %3569 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %3570 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3561)
  %3571 = sext i32 %3567 to i64
  %3572 = getelementptr ptr, ptr %3561, i64 %3571
  %3573 = getelementptr i8, ptr %3572, i64 64
  %3574 = load ptr, ptr %3573, align 8
  %3575 = call ptr %3574({ ptr, ptr, ptr, i32 } %3568, ptr nonnull %2)
  %3576 = call i32 %3575({ ptr, ptr, ptr, i32 } %3568, { ptr, ptr, ptr, i32 } %3568, ptr nonnull %2)
  %3577 = add i32 %3576, -1
  %3578 = and i32 %3577, %3559
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %3579 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3580 = load ptr, ptr %343, align 8
  %3581 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3580, 0
  %3582 = load ptr, ptr %344, align 8
  %3583 = insertvalue { ptr, ptr, ptr, i32 } %3581, ptr %3582, 1
  %3584 = load ptr, ptr %345, align 8
  %3585 = insertvalue { ptr, ptr, ptr, i32 } %3583, ptr %3584, 2
  %3586 = load i32, ptr %346, align 4
  %3587 = insertvalue { ptr, ptr, ptr, i32 } %3585, i32 %3586, 3
  %hash_coef_ptr.i.i202.i1162 = getelementptr i8, ptr %3580, i64 8
  %tbl_size_ptr.i.i203.i1163 = getelementptr i8, ptr %3580, i64 16
  %offset_tbl_ptr.i.i204.i1164 = getelementptr i8, ptr %3580, i64 40
  %hash_coef.i.i205.i1165 = load i64, ptr %hash_coef_ptr.i.i202.i1162, align 4
  %tbl_size.i.i206.i1166 = load i64, ptr %tbl_size_ptr.i.i203.i1163, align 4
  %offset_tbl.i.i207.i1167 = load ptr, ptr %offset_tbl_ptr.i.i204.i1164, align 8
  %product.i.i.i208.i1168 = mul i64 %hash_coef.i.i205.i1165, -5261542750394134544
  %shifted.i.i.i209.i1169 = lshr i64 %product.i.i.i208.i1168, 32
  %xored.i.i.i210.i1170 = xor i64 %shifted.i.i.i209.i1169, %product.i.i.i208.i1168
  %hash.i.i.i211.i1171 = and i64 %xored.i.i.i210.i1170, %tbl_size.i.i206.i1166
  %offset_ptr.i.i212.i1172 = getelementptr i32, ptr %offset_tbl.i.i207.i1167, i64 %hash.i.i.i211.i1171
  %offset.i.i213.i1173 = load i32, ptr %offset_ptr.i.i212.i1172, align 4
  %eq.i216.i1174 = icmp eq i32 %3586, %offset.i.i213.i1173
  call void @llvm.assume(i1 %eq.i216.i1174) #30
  store ptr @_parameterization_Ptri32, ptr %222, align 8
  %3588 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %222)
  %3589 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3580)
  %3590 = sext i32 %3586 to i64
  %3591 = getelementptr ptr, ptr %3580, i64 %3590
  %3592 = getelementptr i8, ptr %3591, i64 120
  %3593 = load ptr, ptr %3592, align 8
  store ptr @i32_typ, ptr %223, align 8
  %3594 = call ptr %3593({ ptr, ptr, ptr, i32 } %3587, ptr nonnull %223)
  %3595 = call { ptr, i160 } %3594({ ptr, ptr, ptr, i32 } %3587, { ptr, ptr, ptr, i32 } %3587, ptr nonnull %222, i32 %3578)
  %.fca.0.extract87.i = extractvalue { ptr, i160 } %3595, 0
  %3596 = ptrtoint ptr %.sroa.speculated352.i1676 to i64
  %3597 = ptrtoint ptr %.sroa.speculated346.i1678 to i64
  %.sroa.3.0.insert.ext.i = zext i32 %offset.i.i260.i1680 to i160
  %.sroa.3.0.insert.shift.i = shl nuw i160 %.sroa.3.0.insert.ext.i, 128
  %.sroa.2.0.insert.ext.i = zext i64 %3597 to i160
  %.sroa.2.0.insert.shift.i = shl nuw nsw i160 %.sroa.2.0.insert.ext.i, 64
  %.sroa.2.0.insert.insert.i = or disjoint i160 %.sroa.2.0.insert.shift.i, %.sroa.3.0.insert.shift.i
  %.sroa.0.0.insert.ext.i = zext i64 %3596 to i160
  %.sroa.0.0.insert.insert.i = or disjoint i160 %.sroa.2.0.insert.insert.i, %.sroa.0.0.insert.ext.i
  %3598 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0.0.insert.insert.i, 1
  %3599 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3600 = load ptr, ptr %343, align 8
  %3601 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3600, 0
  %3602 = load ptr, ptr %344, align 8
  %3603 = insertvalue { ptr, ptr, ptr, i32 } %3601, ptr %3602, 1
  %3604 = load ptr, ptr %345, align 8
  %3605 = insertvalue { ptr, ptr, ptr, i32 } %3603, ptr %3604, 2
  %3606 = load i32, ptr %346, align 4
  %3607 = insertvalue { ptr, ptr, ptr, i32 } %3605, i32 %3606, 3
  %hash_coef_ptr.i.i218.i = getelementptr i8, ptr %3600, i64 8
  %tbl_size_ptr.i.i219.i = getelementptr i8, ptr %3600, i64 16
  %offset_tbl_ptr.i.i220.i = getelementptr i8, ptr %3600, i64 40
  %hash_coef.i.i221.i = load i64, ptr %hash_coef_ptr.i.i218.i, align 4
  %tbl_size.i.i222.i = load i64, ptr %tbl_size_ptr.i.i219.i, align 4
  %offset_tbl.i.i223.i = load ptr, ptr %offset_tbl_ptr.i.i220.i, align 8
  %product.i.i.i224.i = mul i64 %hash_coef.i.i221.i, -5261542750394134544
  %shifted.i.i.i225.i = lshr i64 %product.i.i.i224.i, 32
  %xored.i.i.i226.i = xor i64 %shifted.i.i.i225.i, %product.i.i.i224.i
  %hash.i.i.i227.i = and i64 %xored.i.i.i226.i, %tbl_size.i.i222.i
  %offset_ptr.i.i228.i = getelementptr i32, ptr %offset_tbl.i.i223.i, i64 %hash.i.i.i227.i
  %offset.i.i229.i = load i32, ptr %offset_ptr.i.i228.i, align 4
  %eq.i232.i = icmp eq i32 %3606, %offset.i.i229.i
  call void @llvm.assume(i1 %eq.i232.i) #30
  %3608 = load ptr, ptr %result.i111, align 8
  %3609 = load ptr, ptr %309, align 8
  %result.i233.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3610 = getelementptr i8, ptr %result.i233.i, i64 16
  store ptr %3609, ptr %3610, align 8
  %3611 = getelementptr i8, ptr %result.i233.i, i64 8
  store ptr %3608, ptr %3611, align 8
  %3612 = getelementptr i8, ptr %result.i233.i, i64 24
  store ptr null, ptr %3612, align 8
  %3613 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i233.i)
  store ptr @Entry, ptr %result.i233.i, align 8
  store ptr @_parameterization_Ptri32, ptr %224, align 8
  store ptr %result.i233.i, ptr %392, align 8
  %3614 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %224)
  %3615 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3600)
  %3616 = sext i32 %3606 to i64
  %3617 = getelementptr ptr, ptr %3600, i64 %3616
  %3618 = getelementptr i8, ptr %3617, i64 128
  %3619 = load ptr, ptr %3618, align 8
  store ptr @i32_typ, ptr %225, align 8
  store ptr @Entry, ptr %393, align 8
  %3620 = call ptr %3619({ ptr, ptr, ptr, i32 } %3607, ptr nonnull %225)
  call void %3620({ ptr, ptr, ptr, i32 } %3607, { ptr, ptr, ptr, i32 } %3607, ptr nonnull %224, i32 %3578, { ptr, i160 } %3598)
  %3621 = icmp ne ptr %.fca.0.extract87.i, @nil_typ
  %3622 = icmp ne ptr %.fca.0.extract87.i, null
  %.not138.i = and i1 %3621, %3622
  br i1 %.not138.i, label %.cont.cont.i, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit.thread

.cont.cont.i:                                     ; preds = %3541, %3477
  %.sink = phi { ptr, i160 } [ %3513, %3477 ], [ %3595, %3541 ]
  %3623 = phi i32 [ 2, %3477 ], [ 1, %3541 ]
  %vptr.i248.sroa.speculated.i = phi ptr [ %.fca.0.extract112.i, %3477 ], [ %.fca.0.extract87.i, %3541 ]
  %.fca.1.extract89.i = extractvalue { ptr, i160 } %.sink, 1
  %.sroa.3407.sroa.4.0.extract.shift.i = lshr i160 %.fca.1.extract89.i, 64
  %.sroa.3407.sroa.4.0.extract.trunc.i = trunc i160 %.sroa.3407.sroa.4.0.extract.shift.i to i64
  %.sroa.3407.sroa.0.0.extract.trunc.i = trunc i160 %.fca.1.extract89.i to i64
  %.sroa.speculated352.i = inttoptr i64 %.sroa.3407.sroa.0.0.extract.trunc.i to ptr
  %.sroa.speculated346.i = inttoptr i64 %.sroa.3407.sroa.4.0.extract.trunc.i to ptr
  %hash_coef_ptr.i.i249.i = getelementptr i8, ptr %vptr.i248.sroa.speculated.i, i64 8
  %tbl_size_ptr.i.i250.i = getelementptr i8, ptr %vptr.i248.sroa.speculated.i, i64 16
  %offset_tbl_ptr.i.i251.i = getelementptr i8, ptr %vptr.i248.sroa.speculated.i, i64 40
  %hash_coef.i.i252.i = load i64, ptr %hash_coef_ptr.i.i249.i, align 4
  %tbl_size.i.i253.i = load i64, ptr %tbl_size_ptr.i.i250.i, align 4
  %offset_tbl.i.i254.i = load ptr, ptr %offset_tbl_ptr.i.i251.i, align 8
  %product.i.i.i255.i = mul i64 %hash_coef.i.i252.i, 4015701072841558310
  %shifted.i.i.i256.i = lshr i64 %product.i.i.i255.i, 32
  %xored.i.i.i257.i = xor i64 %shifted.i.i.i256.i, %product.i.i.i255.i
  %hash.i.i.i258.i = and i64 %xored.i.i.i257.i, %tbl_size.i.i253.i
  %offset_ptr.i.i259.i = getelementptr i32, ptr %offset_tbl.i.i254.i, i64 %hash.i.i.i258.i
  %offset.i.i260.i = load i32, ptr %offset_ptr.i.i259.i, align 4
  store ptr %vptr.i248.sroa.speculated.i, ptr %230, align 8
  store ptr %.sroa.speculated352.i, ptr %389, align 8
  store ptr %.sroa.speculated346.i, ptr %390, align 8
  store i32 %offset.i.i260.i, ptr %391, align 8
  %3624 = add nuw nsw i32 %.reg2mem193.0677.i, 1
  %3625 = load i32, ptr %349, align 4
  %3626 = icmp slt i32 %3624, %3625
  br i1 %3626, label %3467, label %._crit_edge3.i

HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit.thread: ; preds = %3477, %3541
  %3627 = phi ptr [ %226, %3541 ], [ %218, %3477 ]
  %3628 = phi ptr [ %227, %3541 ], [ %219, %3477 ]
  %3629 = phi ptr [ %228, %3541 ], [ %220, %3477 ]
  %3630 = phi ptr [ %.sroa.0.i1133, %3541 ], [ %.sroa.0680.i, %3477 ]
  %3631 = phi ptr [ %229, %3541 ], [ %221, %3477 ]
  %3632 = load i32, ptr %347, align 4
  store i32 %3632, ptr %3627, align 4
  store i32 1, ptr %3628, align 4
  %3633 = add i32 %3632, 1
  store i32 %3633, ptr %3629, align 4
  %3634 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  store i32 %3633, ptr %347, align 4
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %3631, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %3630, align 8
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %214)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %215)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %216)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %217)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %218)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %219)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %220)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %221)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %222)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %223)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %224)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %225)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %226)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %227)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %228)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i1133)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %229)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %230)
  br label %HashMap_insert_keyK_valueV.exit

._crit_edge3.i:                                   ; preds = %.cont.cont.i, %._crit_edge2.i
  %3635 = load i160, ptr %389, align 8
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %214)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %215)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %216)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %217)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %218)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %219)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %220)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %221)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %222)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %223)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %224)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %225)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %226)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %227)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %228)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i1133)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %229)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %230)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %212)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %213)
  %3636 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3637 = load ptr, ptr %326, align 8
  %3638 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3637, 0
  %3639 = load ptr, ptr %327, align 8
  %3640 = insertvalue { ptr, ptr, ptr, i32 } %3638, ptr %3639, 1
  %3641 = load ptr, ptr %328, align 8
  %3642 = insertvalue { ptr, ptr, ptr, i32 } %3640, ptr %3641, 2
  %3643 = load i32, ptr %329, align 4
  %3644 = insertvalue { ptr, ptr, ptr, i32 } %3642, i32 %3643, 3
  %hash_coef_ptr.i.i18.i1197 = getelementptr i8, ptr %3637, i64 8
  %tbl_size_ptr.i.i19.i1198 = getelementptr i8, ptr %3637, i64 16
  %offset_tbl_ptr.i.i20.i1199 = getelementptr i8, ptr %3637, i64 40
  %hash_coef.i.i21.i1200 = load i64, ptr %hash_coef_ptr.i.i18.i1197, align 4
  %tbl_size.i.i22.i1201 = load i64, ptr %tbl_size_ptr.i.i19.i1198, align 4
  %offset_tbl.i.i23.i1202 = load ptr, ptr %offset_tbl_ptr.i.i20.i1199, align 8
  %product.i.i.i24.i1203 = mul i64 %hash_coef.i.i21.i1200, -5261542750394134544
  %shifted.i.i.i25.i1204 = lshr i64 %product.i.i.i24.i1203, 32
  %xored.i.i.i26.i1205 = xor i64 %shifted.i.i.i25.i1204, %product.i.i.i24.i1203
  %hash.i.i.i27.i1206 = and i64 %xored.i.i.i26.i1205, %tbl_size.i.i22.i1201
  %offset_ptr.i.i28.i1207 = getelementptr i32, ptr %offset_tbl.i.i23.i1202, i64 %hash.i.i.i27.i1206
  %offset.i.i29.i1208 = load i32, ptr %offset_ptr.i.i28.i1207, align 4
  %eq.i.i1209 = icmp eq i32 %3643, %offset.i.i29.i1208
  call void @llvm.assume(i1 %eq.i.i1209) #30
  %3645 = load ptr, ptr %343, align 8
  %3646 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3645, 0
  %3647 = load ptr, ptr %344, align 8
  %3648 = insertvalue { ptr, ptr, ptr, i32 } %3646, ptr %3647, 1
  %3649 = load ptr, ptr %345, align 8
  %3650 = insertvalue { ptr, ptr, ptr, i32 } %3648, ptr %3649, 2
  %3651 = load i32, ptr %346, align 4
  %hash_coef_ptr.i.i46.i1214 = getelementptr i8, ptr %3645, i64 8
  %tbl_size_ptr.i.i47.i1215 = getelementptr i8, ptr %3645, i64 16
  %offset_tbl_ptr.i.i48.i1216 = getelementptr i8, ptr %3645, i64 40
  %hash_coef.i.i49.i1217 = load i64, ptr %hash_coef_ptr.i.i46.i1214, align 4
  %tbl_size.i.i50.i1218 = load i64, ptr %tbl_size_ptr.i.i47.i1215, align 4
  %offset_tbl.i.i51.i1219 = load ptr, ptr %offset_tbl_ptr.i.i48.i1216, align 8
  %product.i.i.i52.i1220 = mul i64 %hash_coef.i.i49.i1217, -5261542750394134544
  %shifted.i.i.i53.i1221 = lshr i64 %product.i.i.i52.i1220, 32
  %xored.i.i.i54.i1222 = xor i64 %shifted.i.i.i53.i1221, %product.i.i.i52.i1220
  %hash.i.i.i55.i1223 = and i64 %xored.i.i.i54.i1222, %tbl_size.i.i50.i1218
  %offset_ptr.i.i56.i1224 = getelementptr i32, ptr %offset_tbl.i.i51.i1219, i64 %hash.i.i.i55.i1223
  %offset.i.i57.i1225 = load i32, ptr %offset_ptr.i.i56.i1224, align 4
  %eq.i60.i1226 = icmp eq i32 %3651, %offset.i.i57.i1225
  call void @llvm.assume(i1 %eq.i60.i1226) #30
  %3652 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %3653 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3637)
  %3654 = sext i32 %3643 to i64
  %3655 = getelementptr ptr, ptr %3637, i64 %3654
  %3656 = getelementptr i8, ptr %3655, i64 64
  %3657 = load ptr, ptr %3656, align 8
  %3658 = call ptr %3657({ ptr, ptr, ptr, i32 } %3644, ptr nonnull %2)
  %3659 = call i32 %3658({ ptr, ptr, ptr, i32 } %3644, { ptr, ptr, ptr, i32 } %3644, ptr nonnull %2)
  %3660 = shl i32 %3659, 1
  %3661 = call i32 @llvm.smax.i32(i32 %3660, i32 16)
  %3662 = load ptr, ptr %result.i111, align 8
  %3663 = load ptr, ptr %309, align 8
  %result.i.i1227 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3664 = getelementptr i8, ptr %result.i.i1227, i64 16
  store ptr @_parameterization_Nil, ptr %3664, align 8
  %result.i75.i1228 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3665 = getelementptr i8, ptr %result.i75.i1228, i64 16
  store ptr %3663, ptr %3665, align 8
  %3666 = getelementptr i8, ptr %result.i75.i1228, i64 8
  store ptr %3662, ptr %3666, align 8
  %3667 = getelementptr i8, ptr %result.i75.i1228, i64 24
  store ptr null, ptr %3667, align 8
  %3668 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i75.i1228)
  store ptr @Entry, ptr %result.i75.i1228, align 8
  %3669 = getelementptr i8, ptr %result.i.i1227, i64 8
  store ptr %result.i75.i1228, ptr %3669, align 8
  %3670 = getelementptr i8, ptr %result.i.i1227, i64 24
  store ptr null, ptr %3670, align 8
  %3671 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i1227)
  store ptr @union_typ, ptr %result.i.i1227, align 8
  %result.i76.i1229 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i1227, ptr %result.i76.i1229, align 8
  %3672 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i76.i1229)
  store ptr @Array, ptr %212, align 8
  store ptr %result.i76.i1229, ptr %396, align 8
  store i32 9, ptr %397, align 8
  %3673 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %212)
  %3674 = getelementptr i8, ptr %result.i76.i1229, i64 16
  store i32 %3661, ptr %3674, align 4
  %3675 = getelementptr i8, ptr %result.i76.i1229, i64 20
  store i32 %3661, ptr %3675, align 4
  %3676 = zext nneg i32 %3661 to i64
  %3677 = shl nuw nsw i64 %3676, 5
  %result.i.i.i1230 = call noalias ptr @bump_malloc_inner(i64 noundef %3677, ptr nonnull @current_ptr) #29
  %3678 = getelementptr i8, ptr %result.i76.i1229, i64 8
  store ptr %result.i.i.i1230, ptr %3678, align 8
  %3679 = load ptr, ptr %398, align 8
  store ptr @Array, ptr %326, align 8
  store ptr %result.i76.i1229, ptr %327, align 8
  store ptr %3679, ptr %328, align 8
  store i32 9, ptr %329, align 4
  %result.i91.i1243 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3680 = getelementptr i8, ptr %result.i91.i1243, i64 16
  store ptr @_parameterization_Nil, ptr %3680, align 8
  %result.i92.i1244 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3681 = getelementptr i8, ptr %result.i92.i1244, i64 16
  store ptr %3663, ptr %3681, align 8
  %3682 = getelementptr i8, ptr %result.i92.i1244, i64 8
  store ptr %3662, ptr %3682, align 8
  %3683 = getelementptr i8, ptr %result.i92.i1244, i64 24
  store ptr null, ptr %3683, align 8
  %3684 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i92.i1244)
  store ptr @Entry, ptr %result.i92.i1244, align 8
  %3685 = getelementptr i8, ptr %result.i91.i1243, i64 8
  store ptr %result.i92.i1244, ptr %3685, align 8
  %3686 = getelementptr i8, ptr %result.i91.i1243, i64 24
  store ptr null, ptr %3686, align 8
  %3687 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i91.i1243)
  store ptr @union_typ, ptr %result.i91.i1243, align 8
  %result.i93.i1245 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i91.i1243, ptr %result.i93.i1245, align 8
  %3688 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i93.i1245)
  store ptr @Array, ptr %213, align 8
  store ptr %result.i93.i1245, ptr %399, align 8
  store i32 9, ptr %400, align 8
  %3689 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %213)
  %3690 = getelementptr i8, ptr %result.i93.i1245, i64 16
  store i32 %3661, ptr %3690, align 4
  %3691 = getelementptr i8, ptr %result.i93.i1245, i64 20
  store i32 %3661, ptr %3691, align 4
  %result.i.i234.i1246 = call noalias ptr @bump_malloc_inner(i64 noundef %3677, ptr nonnull @current_ptr) #29
  %3692 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %3693 = getelementptr i8, ptr %result.i93.i1245, i64 8
  store ptr %result.i.i234.i1246, ptr %3693, align 8
  %3694 = load ptr, ptr %401, align 8
  store ptr @Array, ptr %343, align 8
  store ptr %result.i93.i1245, ptr %344, align 8
  store ptr %3694, ptr %345, align 8
  store i32 9, ptr %346, align 4
  store i32 0, ptr %347, align 4
  %3695 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %149)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %150)
  %3696 = icmp sgt i32 %3659, 0
  br i1 %3696, label %.lr.ph.i2643, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2746.critedge

.lr.ph.i2643:                                     ; preds = %._crit_edge3.i
  %invariant.gep.i2644 = getelementptr i8, ptr %3637, i64 120
  %offset_tbl.i.i24.i2646 = load ptr, ptr %offset_tbl_ptr.i.i20.i1199, align 8
  %hash_coef.i.i22.i2648 = load i64, ptr %hash_coef_ptr.i.i18.i1197, align 4
  %product.i.i.i25.i2649 = mul i64 %hash_coef.i.i22.i2648, -5261542750394134544
  %shifted.i.i.i26.i2650 = lshr i64 %product.i.i.i25.i2649, 32
  %xored.i.i.i27.i2651 = xor i64 %shifted.i.i.i26.i2650, %product.i.i.i25.i2649
  %tbl_size.i.i23.i2653 = load i64, ptr %tbl_size_ptr.i.i19.i1198, align 4
  %hash.i.i.i28.i2654 = and i64 %xored.i.i.i27.i2651, %tbl_size.i.i23.i2653
  %offset_ptr.i.i29.i2655 = getelementptr i32, ptr %offset_tbl.i.i24.i2646, i64 %hash.i.i.i28.i2654
  %offset.i.i30.i2656 = load i32, ptr %offset_ptr.i.i29.i2655, align 4
  %3697 = insertvalue { ptr, ptr, ptr, i32 } %3642, i32 %offset.i.i30.i2656, 3
  %3698 = sext i32 %offset.i.i30.i2656 to i64
  %gep.i2671 = getelementptr ptr, ptr %invariant.gep.i2644, i64 %3698
  %3699 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %3700

3700:                                             ; preds = %._crit_edge1.i2675, %.lr.ph.i2643
  %.reg2mem13.079.i2672 = phi i32 [ 0, %.lr.ph.i2643 ], [ %3717, %._crit_edge1.i2675 ]
  store ptr @_parameterization_Ptri32, ptr %149, align 8
  %3701 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %149)
  %3702 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %3637)
  %3703 = load ptr, ptr %gep.i2671, align 8
  store ptr @i32_typ, ptr %150, align 8
  %3704 = call ptr %3703({ ptr, ptr, ptr, i32 } %3697, ptr nonnull %150)
  %3705 = call { ptr, i160 } %3704({ ptr, ptr, ptr, i32 } %3697, { ptr, ptr, ptr, i32 } %3697, ptr nonnull %149, i32 %.reg2mem13.079.i2672)
  %.fca.0.extract11.i2673 = extractvalue { ptr, i160 } %3705, 0
  %3706 = icmp ne ptr %.fca.0.extract11.i2673, @nil_typ
  %3707 = icmp ne ptr %.fca.0.extract11.i2673, null
  %.not17.i2674 = and i1 %3706, %3707
  br i1 %.not17.i2674, label %3708, label %._crit_edge1.i2675

3708:                                             ; preds = %3700
  %.fca.1.extract13.i2676 = extractvalue { ptr, i160 } %3705, 1
  %.sroa.375.8.extract.trunc.i2677 = trunc i160 %.fca.1.extract13.i2676 to i64
  %3709 = inttoptr i64 %.sroa.375.8.extract.trunc.i2677 to ptr
  %.sroa.576.8.extract.shift.i2678 = lshr i160 %.fca.1.extract13.i2676, 64
  %.sroa.576.8.extract.trunc.i2679 = trunc i160 %.sroa.576.8.extract.shift.i2678 to i64
  %3710 = inttoptr i64 %.sroa.576.8.extract.trunc.i2679 to ptr
  %hash_coef_ptr.i.i33.i2680 = getelementptr i8, ptr %.fca.0.extract11.i2673, i64 8
  %tbl_size_ptr.i.i34.i2681 = getelementptr i8, ptr %.fca.0.extract11.i2673, i64 16
  %offset_tbl_ptr.i.i35.i2682 = getelementptr i8, ptr %.fca.0.extract11.i2673, i64 40
  %hash_coef.i.i36.i2683 = load i64, ptr %hash_coef_ptr.i.i33.i2680, align 4
  %tbl_size.i.i37.i2684 = load i64, ptr %tbl_size_ptr.i.i34.i2681, align 4
  %offset_tbl.i.i38.i2685 = load ptr, ptr %offset_tbl_ptr.i.i35.i2682, align 8
  %product.i.i.i39.i2686 = mul i64 %hash_coef.i.i36.i2683, 4015701072841558310
  %shifted.i.i.i40.i2687 = lshr i64 %product.i.i.i39.i2686, 32
  %xored.i.i.i41.i2688 = xor i64 %shifted.i.i.i40.i2687, %product.i.i.i39.i2686
  %hash.i.i.i42.i2689 = and i64 %xored.i.i.i41.i2688, %tbl_size.i.i37.i2684
  %offset_ptr.i.i43.i2690 = getelementptr i32, ptr %offset_tbl.i.i38.i2685, i64 %hash.i.i.i42.i2689
  %offset.i.i58.i2691 = load i32, ptr %offset_ptr.i.i43.i2690, align 4
  %3711 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i2673, 0
  %3712 = insertvalue { ptr, ptr, ptr, i32 } %3711, ptr %3709, 1
  %3713 = insertvalue { ptr, ptr, ptr, i32 } %3712, ptr %3710, 2
  %3714 = insertvalue { ptr, ptr, ptr, i32 } %3713, i32 %offset.i.i58.i2691, 3
  %3715 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3716 = call { ptr, i160 } @HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %443, { ptr, ptr, ptr, i32 } poison, ptr nonnull poison, { ptr, ptr, ptr, i32 } %3714)
  br label %._crit_edge1.i2675

._crit_edge1.i2675:                               ; preds = %3708, %3700
  %3717 = add nuw nsw i32 %.reg2mem13.079.i2672, 1
  %3718 = icmp slt i32 %3717, %3659
  br i1 %3718, label %3700, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2693

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2693: ; preds = %._crit_edge1.i2675
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %149)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %150)
  %3719 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %147)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %148)
  %invariant.gep.i2697 = getelementptr i8, ptr %3645, i64 120
  %offset_tbl.i.i24.i2699 = load ptr, ptr %offset_tbl_ptr.i.i48.i1216, align 8
  %hash_coef.i.i22.i2701 = load i64, ptr %hash_coef_ptr.i.i46.i1214, align 4
  %product.i.i.i25.i2702 = mul i64 %hash_coef.i.i22.i2701, -5261542750394134544
  %shifted.i.i.i26.i2703 = lshr i64 %product.i.i.i25.i2702, 32
  %xored.i.i.i27.i2704 = xor i64 %shifted.i.i.i26.i2703, %product.i.i.i25.i2702
  %tbl_size.i.i23.i2706 = load i64, ptr %tbl_size_ptr.i.i47.i1215, align 4
  %hash.i.i.i28.i2707 = and i64 %xored.i.i.i27.i2704, %tbl_size.i.i23.i2706
  %offset_ptr.i.i29.i2708 = getelementptr i32, ptr %offset_tbl.i.i24.i2699, i64 %hash.i.i.i28.i2707
  %offset.i.i30.i2709 = load i32, ptr %offset_ptr.i.i29.i2708, align 4
  %3720 = insertvalue { ptr, ptr, ptr, i32 } %3650, i32 %offset.i.i30.i2709, 3
  %3721 = sext i32 %offset.i.i30.i2709 to i64
  %gep.i2724 = getelementptr ptr, ptr %invariant.gep.i2697, i64 %3721
  %3722 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %3723

3723:                                             ; preds = %._crit_edge1.i2728, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2693
  %.reg2mem13.079.i2725 = phi i32 [ 0, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2693 ], [ %3740, %._crit_edge1.i2728 ]
  store ptr @_parameterization_Ptri32, ptr %147, align 8
  %3724 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %147)
  %3725 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %3645)
  %3726 = load ptr, ptr %gep.i2724, align 8
  store ptr @i32_typ, ptr %148, align 8
  %3727 = call ptr %3726({ ptr, ptr, ptr, i32 } %3720, ptr nonnull %148)
  %3728 = call { ptr, i160 } %3727({ ptr, ptr, ptr, i32 } %3720, { ptr, ptr, ptr, i32 } %3720, ptr nonnull %147, i32 %.reg2mem13.079.i2725)
  %.fca.0.extract11.i2726 = extractvalue { ptr, i160 } %3728, 0
  %3729 = icmp ne ptr %.fca.0.extract11.i2726, @nil_typ
  %3730 = icmp ne ptr %.fca.0.extract11.i2726, null
  %.not17.i2727 = and i1 %3729, %3730
  br i1 %.not17.i2727, label %3731, label %._crit_edge1.i2728

3731:                                             ; preds = %3723
  %.fca.1.extract13.i2729 = extractvalue { ptr, i160 } %3728, 1
  %.sroa.375.8.extract.trunc.i2730 = trunc i160 %.fca.1.extract13.i2729 to i64
  %3732 = inttoptr i64 %.sroa.375.8.extract.trunc.i2730 to ptr
  %.sroa.576.8.extract.shift.i2731 = lshr i160 %.fca.1.extract13.i2729, 64
  %.sroa.576.8.extract.trunc.i2732 = trunc i160 %.sroa.576.8.extract.shift.i2731 to i64
  %3733 = inttoptr i64 %.sroa.576.8.extract.trunc.i2732 to ptr
  %hash_coef_ptr.i.i33.i2733 = getelementptr i8, ptr %.fca.0.extract11.i2726, i64 8
  %tbl_size_ptr.i.i34.i2734 = getelementptr i8, ptr %.fca.0.extract11.i2726, i64 16
  %offset_tbl_ptr.i.i35.i2735 = getelementptr i8, ptr %.fca.0.extract11.i2726, i64 40
  %hash_coef.i.i36.i2736 = load i64, ptr %hash_coef_ptr.i.i33.i2733, align 4
  %tbl_size.i.i37.i2737 = load i64, ptr %tbl_size_ptr.i.i34.i2734, align 4
  %offset_tbl.i.i38.i2738 = load ptr, ptr %offset_tbl_ptr.i.i35.i2735, align 8
  %product.i.i.i39.i2739 = mul i64 %hash_coef.i.i36.i2736, 4015701072841558310
  %shifted.i.i.i40.i2740 = lshr i64 %product.i.i.i39.i2739, 32
  %xored.i.i.i41.i2741 = xor i64 %shifted.i.i.i40.i2740, %product.i.i.i39.i2739
  %hash.i.i.i42.i2742 = and i64 %xored.i.i.i41.i2741, %tbl_size.i.i37.i2737
  %offset_ptr.i.i43.i2743 = getelementptr i32, ptr %offset_tbl.i.i38.i2738, i64 %hash.i.i.i42.i2742
  %offset.i.i58.i2744 = load i32, ptr %offset_ptr.i.i43.i2743, align 4
  %3734 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i2726, 0
  %3735 = insertvalue { ptr, ptr, ptr, i32 } %3734, ptr %3732, 1
  %3736 = insertvalue { ptr, ptr, ptr, i32 } %3735, ptr %3733, 2
  %3737 = insertvalue { ptr, ptr, ptr, i32 } %3736, i32 %offset.i.i58.i2744, 3
  %3738 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3739 = call { ptr, i160 } @HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %443, { ptr, ptr, ptr, i32 } poison, ptr nonnull poison, { ptr, ptr, ptr, i32 } %3737)
  br label %._crit_edge1.i2728

._crit_edge1.i2728:                               ; preds = %3731, %3723
  %3740 = add nuw nsw i32 %.reg2mem13.079.i2725, 1
  %3741 = icmp slt i32 %3740, %3659
  br i1 %3741, label %3723, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2746

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2746.critedge: ; preds = %._crit_edge3.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %149)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %150)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %147)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %148)
  br label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2746

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2746: ; preds = %._crit_edge1.i2728, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2746.critedge
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %147)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %148)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %212)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %213)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %196)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %197)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %198)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %199)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %200)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %201)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %202)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0680.i1289)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %203)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %204)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %205)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %206)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %207)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %208)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %209)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %210)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i1291)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %211)
  %3742 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3743 = load i32, ptr %349, align 4
  %3744 = icmp sgt i32 %3743, 0
  br i1 %3744, label %.lr.ph.i1326, label %._crit_edge3.1.i

.lr.ph.i1326:                                     ; preds = %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2746
  %3745 = lshr i160 %3635, 64
  %3746 = insertelement <2 x i160> poison, i160 %3745, i64 0
  %3747 = insertelement <2 x i160> %3746, i160 %3635, i64 1
  %3748 = trunc <2 x i160> %3747 to <2 x i64>
  %3749 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %3750 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  br label %3751

3751:                                             ; preds = %.cont.cont.i1380, %.lr.ph.i1326
  %offset.i.i260.i13971688 = phi i32 [ 9, %.lr.ph.i1326 ], [ %offset.i.i260.i1397, %.cont.cont.i1380 ]
  %.reg2mem195.0678.i1328 = phi i32 [ 1, %.lr.ph.i1326 ], [ %3906, %.cont.cont.i1380 ]
  %.reg2mem193.0677.i1329 = phi i32 [ 0, %.lr.ph.i1326 ], [ %3911, %.cont.cont.i1380 ]
  %3752 = phi <2 x i64> [ %3748, %.lr.ph.i1326 ], [ %3910, %.cont.cont.i1380 ]
  %3753 = extractelement <2 x i64> %3752, i64 1
  %.sroa.speculated352.i13841684 = inttoptr i64 %3753 to ptr
  %3754 = extractelement <2 x i64> %3752, i64 0
  %.sroa.speculated346.i13851686 = inttoptr i64 %3754 to ptr
  %3755 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Entry, ptr undef, ptr undef, i32 undef }, ptr %.sroa.speculated352.i13841684, 1
  %3756 = insertvalue { ptr, ptr, ptr, i32 } %3755, ptr %.sroa.speculated346.i13851686, 2
  %3757 = insertvalue { ptr, ptr, ptr, i32 } %3756, i32 %offset.i.i260.i13971688, 3
  %3758 = sext i32 %offset.i.i260.i13971688 to i64
  %gep1682 = getelementptr ptr, ptr getelementptr inbounds (i8, ptr @Entry, i64 64), i64 %3758
  %3759 = load ptr, ptr %gep1682, align 8
  %3760 = call ptr %3759({ ptr, ptr, ptr, i32 } %3757, ptr nonnull %2)
  %3761 = call i32 %3760({ ptr, ptr, ptr, i32 } %3757, { ptr, ptr, ptr, i32 } %3757, ptr nonnull %2)
  %3762 = icmp eq i32 %.reg2mem195.0678.i1328, 1
  %3763 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br i1 %3762, label %3764, label %3826

3764:                                             ; preds = %3751
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %3765 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3766 = load ptr, ptr %326, align 8
  %3767 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3766, 0
  %3768 = load ptr, ptr %327, align 8
  %3769 = insertvalue { ptr, ptr, ptr, i32 } %3767, ptr %3768, 1
  %3770 = load ptr, ptr %328, align 8
  %3771 = insertvalue { ptr, ptr, ptr, i32 } %3769, ptr %3770, 2
  %3772 = load i32, ptr %329, align 4
  %3773 = insertvalue { ptr, ptr, ptr, i32 } %3771, i32 %3772, 3
  %hash_coef_ptr.i.i10.i2764 = getelementptr i8, ptr %3766, i64 8
  %tbl_size_ptr.i.i11.i2765 = getelementptr i8, ptr %3766, i64 16
  %offset_tbl_ptr.i.i12.i2766 = getelementptr i8, ptr %3766, i64 40
  %hash_coef.i.i13.i2767 = load i64, ptr %hash_coef_ptr.i.i10.i2764, align 4
  %tbl_size.i.i14.i2768 = load i64, ptr %tbl_size_ptr.i.i11.i2765, align 4
  %offset_tbl.i.i15.i2769 = load ptr, ptr %offset_tbl_ptr.i.i12.i2766, align 8
  %product.i.i.i16.i2770 = mul i64 %hash_coef.i.i13.i2767, -5261542750394134544
  %shifted.i.i.i17.i2771 = lshr i64 %product.i.i.i16.i2770, 32
  %xored.i.i.i18.i2772 = xor i64 %shifted.i.i.i17.i2771, %product.i.i.i16.i2770
  %hash.i.i.i19.i2773 = and i64 %xored.i.i.i18.i2772, %tbl_size.i.i14.i2768
  %offset_ptr.i.i20.i2774 = getelementptr i32, ptr %offset_tbl.i.i15.i2769, i64 %hash.i.i.i19.i2773
  %offset.i.i21.i2775 = load i32, ptr %offset_ptr.i.i20.i2774, align 4
  %eq.i.i2776 = icmp eq i32 %3772, %offset.i.i21.i2775
  call void @llvm.assume(i1 %eq.i.i2776) #30
  %3774 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %3775 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3766)
  %3776 = sext i32 %3772 to i64
  %3777 = getelementptr ptr, ptr %3766, i64 %3776
  %3778 = getelementptr i8, ptr %3777, i64 64
  %3779 = load ptr, ptr %3778, align 8
  %3780 = call ptr %3779({ ptr, ptr, ptr, i32 } %3773, ptr nonnull %2)
  %3781 = call i32 %3780({ ptr, ptr, ptr, i32 } %3773, { ptr, ptr, ptr, i32 } %3773, ptr nonnull %2)
  %3782 = add i32 %3781, -1
  %3783 = and i32 %3782, %3761
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %3784 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3785 = load ptr, ptr %326, align 8
  %3786 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3785, 0
  %3787 = load ptr, ptr %327, align 8
  %3788 = insertvalue { ptr, ptr, ptr, i32 } %3786, ptr %3787, 1
  %3789 = load ptr, ptr %328, align 8
  %3790 = insertvalue { ptr, ptr, ptr, i32 } %3788, ptr %3789, 2
  %3791 = load i32, ptr %329, align 4
  %3792 = insertvalue { ptr, ptr, ptr, i32 } %3790, i32 %3791, 3
  %hash_coef_ptr.i.i172.i1402 = getelementptr i8, ptr %3785, i64 8
  %tbl_size_ptr.i.i173.i1403 = getelementptr i8, ptr %3785, i64 16
  %offset_tbl_ptr.i.i174.i1404 = getelementptr i8, ptr %3785, i64 40
  %hash_coef.i.i175.i1405 = load i64, ptr %hash_coef_ptr.i.i172.i1402, align 4
  %tbl_size.i.i176.i1406 = load i64, ptr %tbl_size_ptr.i.i173.i1403, align 4
  %offset_tbl.i.i177.i1407 = load ptr, ptr %offset_tbl_ptr.i.i174.i1404, align 8
  %product.i.i.i178.i1408 = mul i64 %hash_coef.i.i175.i1405, -5261542750394134544
  %shifted.i.i.i179.i1409 = lshr i64 %product.i.i.i178.i1408, 32
  %xored.i.i.i180.i1410 = xor i64 %shifted.i.i.i179.i1409, %product.i.i.i178.i1408
  %hash.i.i.i181.i1411 = and i64 %xored.i.i.i180.i1410, %tbl_size.i.i176.i1406
  %offset_ptr.i.i182.i1412 = getelementptr i32, ptr %offset_tbl.i.i177.i1407, i64 %hash.i.i.i181.i1411
  %offset.i.i183.i1413 = load i32, ptr %offset_ptr.i.i182.i1412, align 4
  %eq.i.i1414 = icmp eq i32 %3791, %offset.i.i183.i1413
  call void @llvm.assume(i1 %eq.i.i1414) #30
  store ptr @_parameterization_Ptri32, ptr %196, align 8
  %3793 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %196)
  %3794 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3785)
  %3795 = sext i32 %3791 to i64
  %3796 = getelementptr ptr, ptr %3785, i64 %3795
  %3797 = getelementptr i8, ptr %3796, i64 120
  %3798 = load ptr, ptr %3797, align 8
  store ptr @i32_typ, ptr %197, align 8
  %3799 = call ptr %3798({ ptr, ptr, ptr, i32 } %3792, ptr nonnull %197)
  %3800 = call { ptr, i160 } %3799({ ptr, ptr, ptr, i32 } %3792, { ptr, ptr, ptr, i32 } %3792, ptr nonnull %196, i32 %3783)
  %.fca.0.extract112.i1415 = extractvalue { ptr, i160 } %3800, 0
  %.sroa.3111.0.insert.ext.i1416 = zext i32 %offset.i.i260.i13971688 to i160
  %.sroa.3111.0.insert.shift.i1417 = shl nuw i160 %.sroa.3111.0.insert.ext.i1416, 128
  %.sroa.2110.0.insert.ext.i1418 = zext i64 %3754 to i160
  %.sroa.2110.0.insert.shift.i1419 = shl nuw nsw i160 %.sroa.2110.0.insert.ext.i1418, 64
  %.sroa.2110.0.insert.insert.i1420 = or disjoint i160 %.sroa.2110.0.insert.shift.i1419, %.sroa.3111.0.insert.shift.i1417
  %.sroa.0109.0.insert.ext.i1421 = zext i64 %3753 to i160
  %.sroa.0109.0.insert.insert.i1422 = or disjoint i160 %.sroa.2110.0.insert.insert.i1420, %.sroa.0109.0.insert.ext.i1421
  %3801 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0109.0.insert.insert.i1422, 1
  %3802 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3803 = load ptr, ptr %326, align 8
  %3804 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3803, 0
  %3805 = load ptr, ptr %327, align 8
  %3806 = insertvalue { ptr, ptr, ptr, i32 } %3804, ptr %3805, 1
  %3807 = load ptr, ptr %328, align 8
  %3808 = insertvalue { ptr, ptr, ptr, i32 } %3806, ptr %3807, 2
  %3809 = load i32, ptr %329, align 4
  %3810 = insertvalue { ptr, ptr, ptr, i32 } %3808, i32 %3809, 3
  %hash_coef_ptr.i.i186.i1427 = getelementptr i8, ptr %3803, i64 8
  %tbl_size_ptr.i.i187.i1428 = getelementptr i8, ptr %3803, i64 16
  %offset_tbl_ptr.i.i188.i1429 = getelementptr i8, ptr %3803, i64 40
  %hash_coef.i.i189.i1430 = load i64, ptr %hash_coef_ptr.i.i186.i1427, align 4
  %tbl_size.i.i190.i1431 = load i64, ptr %tbl_size_ptr.i.i187.i1428, align 4
  %offset_tbl.i.i191.i1432 = load ptr, ptr %offset_tbl_ptr.i.i188.i1429, align 8
  %product.i.i.i192.i1433 = mul i64 %hash_coef.i.i189.i1430, -5261542750394134544
  %shifted.i.i.i193.i1434 = lshr i64 %product.i.i.i192.i1433, 32
  %xored.i.i.i194.i1435 = xor i64 %shifted.i.i.i193.i1434, %product.i.i.i192.i1433
  %hash.i.i.i195.i1436 = and i64 %xored.i.i.i194.i1435, %tbl_size.i.i190.i1431
  %offset_ptr.i.i196.i1437 = getelementptr i32, ptr %offset_tbl.i.i191.i1432, i64 %hash.i.i.i195.i1436
  %offset.i.i197.i1438 = load i32, ptr %offset_ptr.i.i196.i1437, align 4
  %eq.i200.i1439 = icmp eq i32 %3809, %offset.i.i197.i1438
  call void @llvm.assume(i1 %eq.i200.i1439) #30
  %3811 = load ptr, ptr %result.i111, align 8
  %3812 = load ptr, ptr %309, align 8
  %result.i.i1440 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3813 = getelementptr i8, ptr %result.i.i1440, i64 16
  store ptr %3812, ptr %3813, align 8
  %3814 = getelementptr i8, ptr %result.i.i1440, i64 8
  store ptr %3811, ptr %3814, align 8
  %3815 = getelementptr i8, ptr %result.i.i1440, i64 24
  store ptr null, ptr %3815, align 8
  %3816 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i1440)
  store ptr @Entry, ptr %result.i.i1440, align 8
  store ptr @_parameterization_Ptri32, ptr %198, align 8
  store ptr %result.i.i1440, ptr %404, align 8
  %3817 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %198)
  %3818 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3803)
  %3819 = sext i32 %3809 to i64
  %3820 = getelementptr ptr, ptr %3803, i64 %3819
  %3821 = getelementptr i8, ptr %3820, i64 128
  %3822 = load ptr, ptr %3821, align 8
  store ptr @i32_typ, ptr %199, align 8
  store ptr @Entry, ptr %405, align 8
  %3823 = call ptr %3822({ ptr, ptr, ptr, i32 } %3810, ptr nonnull %199)
  call void %3823({ ptr, ptr, ptr, i32 } %3810, { ptr, ptr, ptr, i32 } %3810, ptr nonnull %198, i32 %3783, { ptr, i160 } %3801)
  %3824 = icmp ne ptr %.fca.0.extract112.i1415, @nil_typ
  %3825 = icmp ne ptr %.fca.0.extract112.i1415, null
  %.not140.i1441 = and i1 %3824, %3825
  br i1 %.not140.i1441, label %.cont.cont.i1380, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit1447.thread

3826:                                             ; preds = %3751
  %3827 = add i32 %3761, 2127912214
  %3828 = shl i32 %3761, 12
  %3829 = add i32 %3827, %3828
  %3830 = ashr i32 %3829, 19
  %3831 = xor i32 %3829, %3830
  %3832 = xor i32 %3831, -949894596
  %3833 = add i32 %3832, 374761393
  %3834 = shl i32 %3832, 5
  %3835 = add i32 %3833, %3834
  %3836 = add i32 %3835, -744332180
  %3837 = shl i32 %3835, 9
  %3838 = xor i32 %3836, %3837
  %3839 = add i32 %3838, -42973499
  %3840 = shl i32 %3838, 3
  %3841 = add i32 %3839, %3840
  %3842 = ashr i32 %3841, 16
  %3843 = xor i32 %3841, %3842
  %3844 = xor i32 %3843, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %3845 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3846 = load ptr, ptr %343, align 8
  %3847 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3846, 0
  %3848 = load ptr, ptr %344, align 8
  %3849 = insertvalue { ptr, ptr, ptr, i32 } %3847, ptr %3848, 1
  %3850 = load ptr, ptr %345, align 8
  %3851 = insertvalue { ptr, ptr, ptr, i32 } %3849, ptr %3850, 2
  %3852 = load i32, ptr %346, align 4
  %3853 = insertvalue { ptr, ptr, ptr, i32 } %3851, i32 %3852, 3
  %hash_coef_ptr.i.i10.i2794 = getelementptr i8, ptr %3846, i64 8
  %tbl_size_ptr.i.i11.i2795 = getelementptr i8, ptr %3846, i64 16
  %offset_tbl_ptr.i.i12.i2796 = getelementptr i8, ptr %3846, i64 40
  %hash_coef.i.i13.i2797 = load i64, ptr %hash_coef_ptr.i.i10.i2794, align 4
  %tbl_size.i.i14.i2798 = load i64, ptr %tbl_size_ptr.i.i11.i2795, align 4
  %offset_tbl.i.i15.i2799 = load ptr, ptr %offset_tbl_ptr.i.i12.i2796, align 8
  %product.i.i.i16.i2800 = mul i64 %hash_coef.i.i13.i2797, -5261542750394134544
  %shifted.i.i.i17.i2801 = lshr i64 %product.i.i.i16.i2800, 32
  %xored.i.i.i18.i2802 = xor i64 %shifted.i.i.i17.i2801, %product.i.i.i16.i2800
  %hash.i.i.i19.i2803 = and i64 %xored.i.i.i18.i2802, %tbl_size.i.i14.i2798
  %offset_ptr.i.i20.i2804 = getelementptr i32, ptr %offset_tbl.i.i15.i2799, i64 %hash.i.i.i19.i2803
  %offset.i.i21.i2805 = load i32, ptr %offset_ptr.i.i20.i2804, align 4
  %eq.i.i2806 = icmp eq i32 %3852, %offset.i.i21.i2805
  call void @llvm.assume(i1 %eq.i.i2806) #30
  %3854 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %3855 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3846)
  %3856 = sext i32 %3852 to i64
  %3857 = getelementptr ptr, ptr %3846, i64 %3856
  %3858 = getelementptr i8, ptr %3857, i64 64
  %3859 = load ptr, ptr %3858, align 8
  %3860 = call ptr %3859({ ptr, ptr, ptr, i32 } %3853, ptr nonnull %2)
  %3861 = call i32 %3860({ ptr, ptr, ptr, i32 } %3853, { ptr, ptr, ptr, i32 } %3853, ptr nonnull %2)
  %3862 = add i32 %3861, -1
  %3863 = and i32 %3862, %3844
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %3864 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3865 = load ptr, ptr %343, align 8
  %3866 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3865, 0
  %3867 = load ptr, ptr %344, align 8
  %3868 = insertvalue { ptr, ptr, ptr, i32 } %3866, ptr %3867, 1
  %3869 = load ptr, ptr %345, align 8
  %3870 = insertvalue { ptr, ptr, ptr, i32 } %3868, ptr %3869, 2
  %3871 = load i32, ptr %346, align 4
  %3872 = insertvalue { ptr, ptr, ptr, i32 } %3870, i32 %3871, 3
  %hash_coef_ptr.i.i202.i1334 = getelementptr i8, ptr %3865, i64 8
  %tbl_size_ptr.i.i203.i1335 = getelementptr i8, ptr %3865, i64 16
  %offset_tbl_ptr.i.i204.i1336 = getelementptr i8, ptr %3865, i64 40
  %hash_coef.i.i205.i1337 = load i64, ptr %hash_coef_ptr.i.i202.i1334, align 4
  %tbl_size.i.i206.i1338 = load i64, ptr %tbl_size_ptr.i.i203.i1335, align 4
  %offset_tbl.i.i207.i1339 = load ptr, ptr %offset_tbl_ptr.i.i204.i1336, align 8
  %product.i.i.i208.i1340 = mul i64 %hash_coef.i.i205.i1337, -5261542750394134544
  %shifted.i.i.i209.i1341 = lshr i64 %product.i.i.i208.i1340, 32
  %xored.i.i.i210.i1342 = xor i64 %shifted.i.i.i209.i1341, %product.i.i.i208.i1340
  %hash.i.i.i211.i1343 = and i64 %xored.i.i.i210.i1342, %tbl_size.i.i206.i1338
  %offset_ptr.i.i212.i1344 = getelementptr i32, ptr %offset_tbl.i.i207.i1339, i64 %hash.i.i.i211.i1343
  %offset.i.i213.i1345 = load i32, ptr %offset_ptr.i.i212.i1344, align 4
  %eq.i216.i1346 = icmp eq i32 %3871, %offset.i.i213.i1345
  call void @llvm.assume(i1 %eq.i216.i1346) #30
  store ptr @_parameterization_Ptri32, ptr %204, align 8
  %3873 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %204)
  %3874 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3865)
  %3875 = sext i32 %3871 to i64
  %3876 = getelementptr ptr, ptr %3865, i64 %3875
  %3877 = getelementptr i8, ptr %3876, i64 120
  %3878 = load ptr, ptr %3877, align 8
  store ptr @i32_typ, ptr %205, align 8
  %3879 = call ptr %3878({ ptr, ptr, ptr, i32 } %3872, ptr nonnull %205)
  %3880 = call { ptr, i160 } %3879({ ptr, ptr, ptr, i32 } %3872, { ptr, ptr, ptr, i32 } %3872, ptr nonnull %204, i32 %3863)
  %.fca.0.extract87.i1347 = extractvalue { ptr, i160 } %3880, 0
  %.sroa.3.0.insert.ext.i1348 = zext i32 %offset.i.i260.i13971688 to i160
  %.sroa.3.0.insert.shift.i1349 = shl nuw i160 %.sroa.3.0.insert.ext.i1348, 128
  %.sroa.2.0.insert.ext.i1350 = zext i64 %3754 to i160
  %.sroa.2.0.insert.shift.i1351 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i1350, 64
  %.sroa.2.0.insert.insert.i1352 = or disjoint i160 %.sroa.2.0.insert.shift.i1351, %.sroa.3.0.insert.shift.i1349
  %.sroa.0.0.insert.ext.i1353 = zext i64 %3753 to i160
  %.sroa.0.0.insert.insert.i1354 = or disjoint i160 %.sroa.2.0.insert.insert.i1352, %.sroa.0.0.insert.ext.i1353
  %3881 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0.0.insert.insert.i1354, 1
  %3882 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3883 = load ptr, ptr %343, align 8
  %3884 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3883, 0
  %3885 = load ptr, ptr %344, align 8
  %3886 = insertvalue { ptr, ptr, ptr, i32 } %3884, ptr %3885, 1
  %3887 = load ptr, ptr %345, align 8
  %3888 = insertvalue { ptr, ptr, ptr, i32 } %3886, ptr %3887, 2
  %3889 = load i32, ptr %346, align 4
  %3890 = insertvalue { ptr, ptr, ptr, i32 } %3888, i32 %3889, 3
  %hash_coef_ptr.i.i218.i1359 = getelementptr i8, ptr %3883, i64 8
  %tbl_size_ptr.i.i219.i1360 = getelementptr i8, ptr %3883, i64 16
  %offset_tbl_ptr.i.i220.i1361 = getelementptr i8, ptr %3883, i64 40
  %hash_coef.i.i221.i1362 = load i64, ptr %hash_coef_ptr.i.i218.i1359, align 4
  %tbl_size.i.i222.i1363 = load i64, ptr %tbl_size_ptr.i.i219.i1360, align 4
  %offset_tbl.i.i223.i1364 = load ptr, ptr %offset_tbl_ptr.i.i220.i1361, align 8
  %product.i.i.i224.i1365 = mul i64 %hash_coef.i.i221.i1362, -5261542750394134544
  %shifted.i.i.i225.i1366 = lshr i64 %product.i.i.i224.i1365, 32
  %xored.i.i.i226.i1367 = xor i64 %shifted.i.i.i225.i1366, %product.i.i.i224.i1365
  %hash.i.i.i227.i1368 = and i64 %xored.i.i.i226.i1367, %tbl_size.i.i222.i1363
  %offset_ptr.i.i228.i1369 = getelementptr i32, ptr %offset_tbl.i.i223.i1364, i64 %hash.i.i.i227.i1368
  %offset.i.i229.i1370 = load i32, ptr %offset_ptr.i.i228.i1369, align 4
  %eq.i232.i1371 = icmp eq i32 %3889, %offset.i.i229.i1370
  call void @llvm.assume(i1 %eq.i232.i1371) #30
  %3891 = load ptr, ptr %result.i111, align 8
  %3892 = load ptr, ptr %309, align 8
  %result.i233.i1372 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3893 = getelementptr i8, ptr %result.i233.i1372, i64 16
  store ptr %3892, ptr %3893, align 8
  %3894 = getelementptr i8, ptr %result.i233.i1372, i64 8
  store ptr %3891, ptr %3894, align 8
  %3895 = getelementptr i8, ptr %result.i233.i1372, i64 24
  store ptr null, ptr %3895, align 8
  %3896 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i233.i1372)
  store ptr @Entry, ptr %result.i233.i1372, align 8
  store ptr @_parameterization_Ptri32, ptr %206, align 8
  store ptr %result.i233.i1372, ptr %402, align 8
  %3897 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %206)
  %3898 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3883)
  %3899 = sext i32 %3889 to i64
  %3900 = getelementptr ptr, ptr %3883, i64 %3899
  %3901 = getelementptr i8, ptr %3900, i64 128
  %3902 = load ptr, ptr %3901, align 8
  store ptr @i32_typ, ptr %207, align 8
  store ptr @Entry, ptr %403, align 8
  %3903 = call ptr %3902({ ptr, ptr, ptr, i32 } %3890, ptr nonnull %207)
  call void %3903({ ptr, ptr, ptr, i32 } %3890, { ptr, ptr, ptr, i32 } %3890, ptr nonnull %206, i32 %3863, { ptr, i160 } %3881)
  %3904 = icmp ne ptr %.fca.0.extract87.i1347, @nil_typ
  %3905 = icmp ne ptr %.fca.0.extract87.i1347, null
  %.not138.i1373 = and i1 %3904, %3905
  br i1 %.not138.i1373, label %.cont.cont.i1380, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit1447.thread

.cont.cont.i1380:                                 ; preds = %3826, %3764
  %.sink1701 = phi { ptr, i160 } [ %3800, %3764 ], [ %3880, %3826 ]
  %3906 = phi i32 [ 2, %3764 ], [ 1, %3826 ]
  %vptr.i248.sroa.speculated.i1383 = phi ptr [ %.fca.0.extract112.i1415, %3764 ], [ %.fca.0.extract87.i1347, %3826 ]
  %.fca.1.extract89.i1376 = extractvalue { ptr, i160 } %.sink1701, 1
  %.sroa.3407.sroa.4.0.extract.shift.i1377 = lshr i160 %.fca.1.extract89.i1376, 64
  %3907 = trunc i160 %.sroa.3407.sroa.4.0.extract.shift.i1377 to i64
  %3908 = insertelement <2 x i64> poison, i64 %3907, i64 0
  %3909 = trunc i160 %.fca.1.extract89.i1376 to i64
  %3910 = insertelement <2 x i64> %3908, i64 %3909, i64 1
  %hash_coef_ptr.i.i249.i1386 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i1383, i64 8
  %tbl_size_ptr.i.i250.i1387 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i1383, i64 16
  %offset_tbl_ptr.i.i251.i1388 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i1383, i64 40
  %hash_coef.i.i252.i1389 = load i64, ptr %hash_coef_ptr.i.i249.i1386, align 4
  %tbl_size.i.i253.i1390 = load i64, ptr %tbl_size_ptr.i.i250.i1387, align 4
  %offset_tbl.i.i254.i1391 = load ptr, ptr %offset_tbl_ptr.i.i251.i1388, align 8
  %product.i.i.i255.i1392 = mul i64 %hash_coef.i.i252.i1389, 4015701072841558310
  %shifted.i.i.i256.i1393 = lshr i64 %product.i.i.i255.i1392, 32
  %xored.i.i.i257.i1394 = xor i64 %shifted.i.i.i256.i1393, %product.i.i.i255.i1392
  %hash.i.i.i258.i1395 = and i64 %xored.i.i.i257.i1394, %tbl_size.i.i253.i1390
  %offset_ptr.i.i259.i1396 = getelementptr i32, ptr %offset_tbl.i.i254.i1391, i64 %hash.i.i.i258.i1395
  %offset.i.i260.i1397 = load i32, ptr %offset_ptr.i.i259.i1396, align 4
  %3911 = add nuw nsw i32 %.reg2mem193.0677.i1329, 1
  %3912 = load i32, ptr %349, align 4
  %3913 = icmp slt i32 %3911, %3912
  br i1 %3913, label %3751, label %._crit_edge3.1.i

HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit1447.thread: ; preds = %3764, %3826
  %3914 = phi ptr [ %208, %3826 ], [ %200, %3764 ]
  %3915 = phi ptr [ %209, %3826 ], [ %201, %3764 ]
  %3916 = phi ptr [ %210, %3826 ], [ %202, %3764 ]
  %3917 = phi ptr [ %.sroa.0.i1291, %3826 ], [ %.sroa.0680.i1289, %3764 ]
  %3918 = phi ptr [ %211, %3826 ], [ %203, %3764 ]
  %3919 = load i32, ptr %347, align 4
  store i32 %3919, ptr %3914, align 4
  store i32 1, ptr %3915, align 4
  %3920 = add i32 %3919, 1
  store i32 %3920, ptr %3916, align 4
  %3921 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  store i32 %3920, ptr %347, align 4
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %3918, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %3917, align 8
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %196)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %197)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %198)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %199)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %200)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %201)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %202)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i1289)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %203)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %204)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %205)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %206)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %207)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %208)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %209)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %210)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i1291)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %211)
  br label %HashMap_insert_keyK_valueV.exit

._crit_edge3.1.i:                                 ; preds = %.cont.cont.i1380, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2746
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %196)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %197)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %198)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %199)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %200)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %201)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %202)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i1289)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %203)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %204)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %205)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %206)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %207)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %208)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %209)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %210)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i1291)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %211)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %194)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %195)
  %3922 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3923 = load ptr, ptr %326, align 8
  %3924 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3923, 0
  %3925 = load ptr, ptr %327, align 8
  %3926 = insertvalue { ptr, ptr, ptr, i32 } %3924, ptr %3925, 1
  %3927 = load ptr, ptr %328, align 8
  %3928 = insertvalue { ptr, ptr, ptr, i32 } %3926, ptr %3927, 2
  %3929 = load i32, ptr %329, align 4
  %3930 = insertvalue { ptr, ptr, ptr, i32 } %3928, i32 %3929, 3
  %hash_coef_ptr.i.i18.i1466 = getelementptr i8, ptr %3923, i64 8
  %tbl_size_ptr.i.i19.i1467 = getelementptr i8, ptr %3923, i64 16
  %offset_tbl_ptr.i.i20.i1468 = getelementptr i8, ptr %3923, i64 40
  %hash_coef.i.i21.i1469 = load i64, ptr %hash_coef_ptr.i.i18.i1466, align 4
  %tbl_size.i.i22.i1470 = load i64, ptr %tbl_size_ptr.i.i19.i1467, align 4
  %offset_tbl.i.i23.i1471 = load ptr, ptr %offset_tbl_ptr.i.i20.i1468, align 8
  %product.i.i.i24.i1472 = mul i64 %hash_coef.i.i21.i1469, -5261542750394134544
  %shifted.i.i.i25.i1473 = lshr i64 %product.i.i.i24.i1472, 32
  %xored.i.i.i26.i1474 = xor i64 %shifted.i.i.i25.i1473, %product.i.i.i24.i1472
  %hash.i.i.i27.i1475 = and i64 %xored.i.i.i26.i1474, %tbl_size.i.i22.i1470
  %offset_ptr.i.i28.i1476 = getelementptr i32, ptr %offset_tbl.i.i23.i1471, i64 %hash.i.i.i27.i1475
  %offset.i.i29.i1477 = load i32, ptr %offset_ptr.i.i28.i1476, align 4
  %eq.i.i1478 = icmp eq i32 %3929, %offset.i.i29.i1477
  call void @llvm.assume(i1 %eq.i.i1478) #30
  %3931 = load ptr, ptr %343, align 8
  %3932 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3931, 0
  %3933 = load ptr, ptr %344, align 8
  %3934 = insertvalue { ptr, ptr, ptr, i32 } %3932, ptr %3933, 1
  %3935 = load ptr, ptr %345, align 8
  %3936 = insertvalue { ptr, ptr, ptr, i32 } %3934, ptr %3935, 2
  %3937 = load i32, ptr %346, align 4
  %hash_coef_ptr.i.i46.i1483 = getelementptr i8, ptr %3931, i64 8
  %tbl_size_ptr.i.i47.i1484 = getelementptr i8, ptr %3931, i64 16
  %offset_tbl_ptr.i.i48.i1485 = getelementptr i8, ptr %3931, i64 40
  %hash_coef.i.i49.i1486 = load i64, ptr %hash_coef_ptr.i.i46.i1483, align 4
  %tbl_size.i.i50.i1487 = load i64, ptr %tbl_size_ptr.i.i47.i1484, align 4
  %offset_tbl.i.i51.i1488 = load ptr, ptr %offset_tbl_ptr.i.i48.i1485, align 8
  %product.i.i.i52.i1489 = mul i64 %hash_coef.i.i49.i1486, -5261542750394134544
  %shifted.i.i.i53.i1490 = lshr i64 %product.i.i.i52.i1489, 32
  %xored.i.i.i54.i1491 = xor i64 %shifted.i.i.i53.i1490, %product.i.i.i52.i1489
  %hash.i.i.i55.i1492 = and i64 %xored.i.i.i54.i1491, %tbl_size.i.i50.i1487
  %offset_ptr.i.i56.i1493 = getelementptr i32, ptr %offset_tbl.i.i51.i1488, i64 %hash.i.i.i55.i1492
  %offset.i.i57.i1494 = load i32, ptr %offset_ptr.i.i56.i1493, align 4
  %eq.i60.i1495 = icmp eq i32 %3937, %offset.i.i57.i1494
  call void @llvm.assume(i1 %eq.i60.i1495) #30
  %3938 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %3939 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3923)
  %3940 = sext i32 %3929 to i64
  %3941 = getelementptr ptr, ptr %3923, i64 %3940
  %3942 = getelementptr i8, ptr %3941, i64 64
  %3943 = load ptr, ptr %3942, align 8
  %3944 = call ptr %3943({ ptr, ptr, ptr, i32 } %3930, ptr nonnull %2)
  %3945 = call i32 %3944({ ptr, ptr, ptr, i32 } %3930, { ptr, ptr, ptr, i32 } %3930, ptr nonnull %2)
  %3946 = shl i32 %3945, 1
  %3947 = call i32 @llvm.smax.i32(i32 %3946, i32 16)
  %3948 = load ptr, ptr %result.i111, align 8
  %3949 = load ptr, ptr %309, align 8
  %result.i.i1496 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3950 = getelementptr i8, ptr %result.i.i1496, i64 16
  store ptr @_parameterization_Nil, ptr %3950, align 8
  %result.i75.i1497 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3951 = getelementptr i8, ptr %result.i75.i1497, i64 16
  store ptr %3949, ptr %3951, align 8
  %3952 = getelementptr i8, ptr %result.i75.i1497, i64 8
  store ptr %3948, ptr %3952, align 8
  %3953 = getelementptr i8, ptr %result.i75.i1497, i64 24
  store ptr null, ptr %3953, align 8
  %3954 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i75.i1497)
  store ptr @Entry, ptr %result.i75.i1497, align 8
  %3955 = getelementptr i8, ptr %result.i.i1496, i64 8
  store ptr %result.i75.i1497, ptr %3955, align 8
  %3956 = getelementptr i8, ptr %result.i.i1496, i64 24
  store ptr null, ptr %3956, align 8
  %3957 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i1496)
  store ptr @union_typ, ptr %result.i.i1496, align 8
  %result.i76.i1498 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i1496, ptr %result.i76.i1498, align 8
  %3958 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i76.i1498)
  store ptr @Array, ptr %194, align 8
  store ptr %result.i76.i1498, ptr %406, align 8
  store i32 9, ptr %407, align 8
  %3959 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %194)
  %3960 = getelementptr i8, ptr %result.i76.i1498, i64 16
  store i32 %3947, ptr %3960, align 4
  %3961 = getelementptr i8, ptr %result.i76.i1498, i64 20
  store i32 %3947, ptr %3961, align 4
  %3962 = zext nneg i32 %3947 to i64
  %3963 = shl nuw nsw i64 %3962, 5
  %result.i.i.i1499 = call noalias ptr @bump_malloc_inner(i64 noundef %3963, ptr nonnull @current_ptr) #29
  %3964 = getelementptr i8, ptr %result.i76.i1498, i64 8
  store ptr %result.i.i.i1499, ptr %3964, align 8
  %3965 = load ptr, ptr %408, align 8
  store ptr @Array, ptr %326, align 8
  store ptr %result.i76.i1498, ptr %327, align 8
  store ptr %3965, ptr %328, align 8
  store i32 9, ptr %329, align 4
  %result.i91.i1512 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3966 = getelementptr i8, ptr %result.i91.i1512, i64 16
  store ptr @_parameterization_Nil, ptr %3966, align 8
  %result.i92.i1513 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3967 = getelementptr i8, ptr %result.i92.i1513, i64 16
  store ptr %3949, ptr %3967, align 8
  %3968 = getelementptr i8, ptr %result.i92.i1513, i64 8
  store ptr %3948, ptr %3968, align 8
  %3969 = getelementptr i8, ptr %result.i92.i1513, i64 24
  store ptr null, ptr %3969, align 8
  %3970 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i92.i1513)
  store ptr @Entry, ptr %result.i92.i1513, align 8
  %3971 = getelementptr i8, ptr %result.i91.i1512, i64 8
  store ptr %result.i92.i1513, ptr %3971, align 8
  %3972 = getelementptr i8, ptr %result.i91.i1512, i64 24
  store ptr null, ptr %3972, align 8
  %3973 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i91.i1512)
  store ptr @union_typ, ptr %result.i91.i1512, align 8
  %result.i93.i1514 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i91.i1512, ptr %result.i93.i1514, align 8
  %3974 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i93.i1514)
  store ptr @Array, ptr %195, align 8
  store ptr %result.i93.i1514, ptr %409, align 8
  store i32 9, ptr %410, align 8
  %3975 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %195)
  %3976 = getelementptr i8, ptr %result.i93.i1514, i64 16
  store i32 %3947, ptr %3976, align 4
  %3977 = getelementptr i8, ptr %result.i93.i1514, i64 20
  store i32 %3947, ptr %3977, align 4
  %result.i.i234.i1515 = call noalias ptr @bump_malloc_inner(i64 noundef %3963, ptr nonnull @current_ptr) #29
  %3978 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %3979 = getelementptr i8, ptr %result.i93.i1514, i64 8
  store ptr %result.i.i234.i1515, ptr %3979, align 8
  %3980 = load ptr, ptr %411, align 8
  store ptr @Array, ptr %343, align 8
  store ptr %result.i93.i1514, ptr %344, align 8
  store ptr %3980, ptr %345, align 8
  store i32 9, ptr %346, align 4
  store i32 0, ptr %347, align 4
  %3981 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %145)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %146)
  %3982 = icmp sgt i32 %3945, 0
  br i1 %3982, label %.lr.ph.i2809, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2912.critedge

.lr.ph.i2809:                                     ; preds = %._crit_edge3.1.i
  %invariant.gep.i2810 = getelementptr i8, ptr %3923, i64 120
  %offset_tbl.i.i24.i2812 = load ptr, ptr %offset_tbl_ptr.i.i20.i1468, align 8
  %hash_coef.i.i22.i2814 = load i64, ptr %hash_coef_ptr.i.i18.i1466, align 4
  %product.i.i.i25.i2815 = mul i64 %hash_coef.i.i22.i2814, -5261542750394134544
  %shifted.i.i.i26.i2816 = lshr i64 %product.i.i.i25.i2815, 32
  %xored.i.i.i27.i2817 = xor i64 %shifted.i.i.i26.i2816, %product.i.i.i25.i2815
  %tbl_size.i.i23.i2819 = load i64, ptr %tbl_size_ptr.i.i19.i1467, align 4
  %hash.i.i.i28.i2820 = and i64 %xored.i.i.i27.i2817, %tbl_size.i.i23.i2819
  %offset_ptr.i.i29.i2821 = getelementptr i32, ptr %offset_tbl.i.i24.i2812, i64 %hash.i.i.i28.i2820
  %offset.i.i30.i2822 = load i32, ptr %offset_ptr.i.i29.i2821, align 4
  %3983 = insertvalue { ptr, ptr, ptr, i32 } %3928, i32 %offset.i.i30.i2822, 3
  %3984 = sext i32 %offset.i.i30.i2822 to i64
  %gep.i2837 = getelementptr ptr, ptr %invariant.gep.i2810, i64 %3984
  %3985 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %3986

3986:                                             ; preds = %._crit_edge1.i2841, %.lr.ph.i2809
  %.reg2mem13.079.i2838 = phi i32 [ 0, %.lr.ph.i2809 ], [ %4178, %._crit_edge1.i2841 ]
  store ptr @_parameterization_Ptri32, ptr %145, align 8
  %3987 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %145)
  %3988 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %3923)
  %3989 = load ptr, ptr %gep.i2837, align 8
  store ptr @i32_typ, ptr %146, align 8
  %3990 = call ptr %3989({ ptr, ptr, ptr, i32 } %3983, ptr nonnull %146)
  %3991 = call { ptr, i160 } %3990({ ptr, ptr, ptr, i32 } %3983, { ptr, ptr, ptr, i32 } %3983, ptr nonnull %145, i32 %.reg2mem13.079.i2838)
  %.fca.0.extract11.i2839 = extractvalue { ptr, i160 } %3991, 0
  %3992 = icmp ne ptr %.fca.0.extract11.i2839, @nil_typ
  %3993 = icmp ne ptr %.fca.0.extract11.i2839, null
  %.not17.i2840 = and i1 %3992, %3993
  br i1 %.not17.i2840, label %3994, label %._crit_edge1.i2841

3994:                                             ; preds = %3986
  %hash_coef_ptr.i.i33.i2846 = getelementptr i8, ptr %.fca.0.extract11.i2839, i64 8
  %tbl_size_ptr.i.i34.i2847 = getelementptr i8, ptr %.fca.0.extract11.i2839, i64 16
  %offset_tbl_ptr.i.i35.i2848 = getelementptr i8, ptr %.fca.0.extract11.i2839, i64 40
  %3995 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %83)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %84)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %85)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %86)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %87)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %88)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %89)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0680.i3640)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %90)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %91)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %92)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %93)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %94)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %95)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %96)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %97)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i3642)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %98)
  %hash_coef.i.i147.i3662 = load i64, ptr %hash_coef_ptr.i.i33.i2846, align 4
  %tbl_size.i.i148.i3663 = load i64, ptr %tbl_size_ptr.i.i34.i2847, align 4
  %offset_tbl.i.i149.i3664 = load ptr, ptr %offset_tbl_ptr.i.i35.i2848, align 8
  %product.i.i.i150.i3665 = mul i64 %hash_coef.i.i147.i3662, 4015701072841558310
  %shifted.i.i.i151.i3666 = lshr i64 %product.i.i.i150.i3665, 32
  %xored.i.i.i152.i3667 = xor i64 %shifted.i.i.i151.i3666, %product.i.i.i150.i3665
  %hash.i.i.i153.i3668 = and i64 %xored.i.i.i152.i3667, %tbl_size.i.i148.i3663
  %offset_ptr.i.i154.i3669 = getelementptr i32, ptr %offset_tbl.i.i149.i3664, i64 %hash.i.i.i153.i3668
  %offset.i.i169.i3670 = load i32, ptr %offset_ptr.i.i154.i3669, align 4
  %3996 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3997 = load i32, ptr %349, align 4
  %3998 = icmp sgt i32 %3997, 0
  br i1 %3998, label %.lr.ph.i3676, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit3796

.lr.ph.i3676:                                     ; preds = %3994
  %.fca.1.extract13.i2842 = extractvalue { ptr, i160 } %3991, 1
  %.sroa.576.8.extract.shift.i2844 = lshr i160 %.fca.1.extract13.i2842, 64
  %3999 = insertelement <2 x i160> poison, i160 %.sroa.576.8.extract.shift.i2844, i64 0
  %4000 = insertelement <2 x i160> %3999, i160 %.fca.1.extract13.i2842, i64 1
  %4001 = trunc <2 x i160> %4000 to <2 x i64>
  %4002 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i2839, 0
  %4003 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4004 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract11.i2839)
  %invariant.gep3978 = getelementptr i8, ptr %.fca.0.extract11.i2839, i64 64
  %4005 = insertvalue { ptr, i160 } undef, ptr %.fca.0.extract11.i2839, 0
  br label %4006

4006:                                             ; preds = %.cont.cont.i3729, %.lr.ph.i3676
  %offset.i.i260.i37463985 = phi i32 [ %offset.i.i169.i3670, %.lr.ph.i3676 ], [ %offset.i.i260.i3746, %.cont.cont.i3729 ]
  %.reg2mem195.0678.i3677 = phi i32 [ 1, %.lr.ph.i3676 ], [ %4161, %.cont.cont.i3729 ]
  %.reg2mem193.0677.i3678 = phi i32 [ 0, %.lr.ph.i3676 ], [ %4166, %.cont.cont.i3729 ]
  %4007 = phi <2 x i64> [ %4001, %.lr.ph.i3676 ], [ %4165, %.cont.cont.i3729 ]
  %4008 = extractelement <2 x i64> %4007, i64 1
  %.sroa.speculated352.i37333981 = inttoptr i64 %4008 to ptr
  %4009 = extractelement <2 x i64> %4007, i64 0
  %.sroa.speculated346.i37343983 = inttoptr i64 %4009 to ptr
  %4010 = insertvalue { ptr, ptr, ptr, i32 } %4002, ptr %.sroa.speculated352.i37333981, 1
  %4011 = insertvalue { ptr, ptr, ptr, i32 } %4010, ptr %.sroa.speculated346.i37343983, 2
  %4012 = insertvalue { ptr, ptr, ptr, i32 } %4011, i32 %offset.i.i260.i37463985, 3
  %4013 = sext i32 %offset.i.i260.i37463985 to i64
  %gep3979 = getelementptr ptr, ptr %invariant.gep3978, i64 %4013
  %4014 = load ptr, ptr %gep3979, align 8
  %4015 = call ptr %4014({ ptr, ptr, ptr, i32 } %4012, ptr nonnull %2)
  %4016 = call i32 %4015({ ptr, ptr, ptr, i32 } %4012, { ptr, ptr, ptr, i32 } %4012, ptr nonnull %2)
  %4017 = icmp eq i32 %.reg2mem195.0678.i3677, 1
  %4018 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br i1 %4017, label %4019, label %4081

4019:                                             ; preds = %4006
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %4020 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4021 = load ptr, ptr %326, align 8
  %4022 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4021, 0
  %4023 = load ptr, ptr %327, align 8
  %4024 = insertvalue { ptr, ptr, ptr, i32 } %4022, ptr %4023, 1
  %4025 = load ptr, ptr %328, align 8
  %4026 = insertvalue { ptr, ptr, ptr, i32 } %4024, ptr %4025, 2
  %4027 = load i32, ptr %329, align 4
  %4028 = insertvalue { ptr, ptr, ptr, i32 } %4026, i32 %4027, 3
  %hash_coef_ptr.i.i10.i4788 = getelementptr i8, ptr %4021, i64 8
  %tbl_size_ptr.i.i11.i4789 = getelementptr i8, ptr %4021, i64 16
  %offset_tbl_ptr.i.i12.i4790 = getelementptr i8, ptr %4021, i64 40
  %hash_coef.i.i13.i4791 = load i64, ptr %hash_coef_ptr.i.i10.i4788, align 4
  %tbl_size.i.i14.i4792 = load i64, ptr %tbl_size_ptr.i.i11.i4789, align 4
  %offset_tbl.i.i15.i4793 = load ptr, ptr %offset_tbl_ptr.i.i12.i4790, align 8
  %product.i.i.i16.i4794 = mul i64 %hash_coef.i.i13.i4791, -5261542750394134544
  %shifted.i.i.i17.i4795 = lshr i64 %product.i.i.i16.i4794, 32
  %xored.i.i.i18.i4796 = xor i64 %shifted.i.i.i17.i4795, %product.i.i.i16.i4794
  %hash.i.i.i19.i4797 = and i64 %xored.i.i.i18.i4796, %tbl_size.i.i14.i4792
  %offset_ptr.i.i20.i4798 = getelementptr i32, ptr %offset_tbl.i.i15.i4793, i64 %hash.i.i.i19.i4797
  %offset.i.i21.i4799 = load i32, ptr %offset_ptr.i.i20.i4798, align 4
  %eq.i.i4800 = icmp eq i32 %4027, %offset.i.i21.i4799
  call void @llvm.assume(i1 %eq.i.i4800) #30
  %4029 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4030 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4021)
  %4031 = sext i32 %4027 to i64
  %4032 = getelementptr ptr, ptr %4021, i64 %4031
  %4033 = getelementptr i8, ptr %4032, i64 64
  %4034 = load ptr, ptr %4033, align 8
  %4035 = call ptr %4034({ ptr, ptr, ptr, i32 } %4028, ptr nonnull %2)
  %4036 = call i32 %4035({ ptr, ptr, ptr, i32 } %4028, { ptr, ptr, ptr, i32 } %4028, ptr nonnull %2)
  %4037 = add i32 %4036, -1
  %4038 = and i32 %4037, %4016
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %4039 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4040 = load ptr, ptr %326, align 8
  %4041 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4040, 0
  %4042 = load ptr, ptr %327, align 8
  %4043 = insertvalue { ptr, ptr, ptr, i32 } %4041, ptr %4042, 1
  %4044 = load ptr, ptr %328, align 8
  %4045 = insertvalue { ptr, ptr, ptr, i32 } %4043, ptr %4044, 2
  %4046 = load i32, ptr %329, align 4
  %4047 = insertvalue { ptr, ptr, ptr, i32 } %4045, i32 %4046, 3
  %hash_coef_ptr.i.i172.i3751 = getelementptr i8, ptr %4040, i64 8
  %tbl_size_ptr.i.i173.i3752 = getelementptr i8, ptr %4040, i64 16
  %offset_tbl_ptr.i.i174.i3753 = getelementptr i8, ptr %4040, i64 40
  %hash_coef.i.i175.i3754 = load i64, ptr %hash_coef_ptr.i.i172.i3751, align 4
  %tbl_size.i.i176.i3755 = load i64, ptr %tbl_size_ptr.i.i173.i3752, align 4
  %offset_tbl.i.i177.i3756 = load ptr, ptr %offset_tbl_ptr.i.i174.i3753, align 8
  %product.i.i.i178.i3757 = mul i64 %hash_coef.i.i175.i3754, -5261542750394134544
  %shifted.i.i.i179.i3758 = lshr i64 %product.i.i.i178.i3757, 32
  %xored.i.i.i180.i3759 = xor i64 %shifted.i.i.i179.i3758, %product.i.i.i178.i3757
  %hash.i.i.i181.i3760 = and i64 %xored.i.i.i180.i3759, %tbl_size.i.i176.i3755
  %offset_ptr.i.i182.i3761 = getelementptr i32, ptr %offset_tbl.i.i177.i3756, i64 %hash.i.i.i181.i3760
  %offset.i.i183.i3762 = load i32, ptr %offset_ptr.i.i182.i3761, align 4
  %eq.i.i3763 = icmp eq i32 %4046, %offset.i.i183.i3762
  call void @llvm.assume(i1 %eq.i.i3763) #30
  store ptr @_parameterization_Ptri32, ptr %83, align 8
  %4048 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %83)
  %4049 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4040)
  %4050 = sext i32 %4046 to i64
  %4051 = getelementptr ptr, ptr %4040, i64 %4050
  %4052 = getelementptr i8, ptr %4051, i64 120
  %4053 = load ptr, ptr %4052, align 8
  store ptr @i32_typ, ptr %84, align 8
  %4054 = call ptr %4053({ ptr, ptr, ptr, i32 } %4047, ptr nonnull %84)
  %4055 = call { ptr, i160 } %4054({ ptr, ptr, ptr, i32 } %4047, { ptr, ptr, ptr, i32 } %4047, ptr nonnull %83, i32 %4038)
  %.fca.0.extract112.i3764 = extractvalue { ptr, i160 } %4055, 0
  %.sroa.3111.0.insert.ext.i3765 = zext i32 %offset.i.i260.i37463985 to i160
  %.sroa.3111.0.insert.shift.i3766 = shl nuw i160 %.sroa.3111.0.insert.ext.i3765, 128
  %.sroa.2110.0.insert.ext.i3767 = zext i64 %4009 to i160
  %.sroa.2110.0.insert.shift.i3768 = shl nuw nsw i160 %.sroa.2110.0.insert.ext.i3767, 64
  %.sroa.2110.0.insert.insert.i3769 = or disjoint i160 %.sroa.2110.0.insert.shift.i3768, %.sroa.3111.0.insert.shift.i3766
  %.sroa.0109.0.insert.ext.i3770 = zext i64 %4008 to i160
  %.sroa.0109.0.insert.insert.i3771 = or disjoint i160 %.sroa.2110.0.insert.insert.i3769, %.sroa.0109.0.insert.ext.i3770
  %4056 = insertvalue { ptr, i160 } %4005, i160 %.sroa.0109.0.insert.insert.i3771, 1
  %4057 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4058 = load ptr, ptr %326, align 8
  %4059 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4058, 0
  %4060 = load ptr, ptr %327, align 8
  %4061 = insertvalue { ptr, ptr, ptr, i32 } %4059, ptr %4060, 1
  %4062 = load ptr, ptr %328, align 8
  %4063 = insertvalue { ptr, ptr, ptr, i32 } %4061, ptr %4062, 2
  %4064 = load i32, ptr %329, align 4
  %4065 = insertvalue { ptr, ptr, ptr, i32 } %4063, i32 %4064, 3
  %hash_coef_ptr.i.i186.i3776 = getelementptr i8, ptr %4058, i64 8
  %tbl_size_ptr.i.i187.i3777 = getelementptr i8, ptr %4058, i64 16
  %offset_tbl_ptr.i.i188.i3778 = getelementptr i8, ptr %4058, i64 40
  %hash_coef.i.i189.i3779 = load i64, ptr %hash_coef_ptr.i.i186.i3776, align 4
  %tbl_size.i.i190.i3780 = load i64, ptr %tbl_size_ptr.i.i187.i3777, align 4
  %offset_tbl.i.i191.i3781 = load ptr, ptr %offset_tbl_ptr.i.i188.i3778, align 8
  %product.i.i.i192.i3782 = mul i64 %hash_coef.i.i189.i3779, -5261542750394134544
  %shifted.i.i.i193.i3783 = lshr i64 %product.i.i.i192.i3782, 32
  %xored.i.i.i194.i3784 = xor i64 %shifted.i.i.i193.i3783, %product.i.i.i192.i3782
  %hash.i.i.i195.i3785 = and i64 %xored.i.i.i194.i3784, %tbl_size.i.i190.i3780
  %offset_ptr.i.i196.i3786 = getelementptr i32, ptr %offset_tbl.i.i191.i3781, i64 %hash.i.i.i195.i3785
  %offset.i.i197.i3787 = load i32, ptr %offset_ptr.i.i196.i3786, align 4
  %eq.i200.i3788 = icmp eq i32 %4064, %offset.i.i197.i3787
  call void @llvm.assume(i1 %eq.i200.i3788) #30
  %4066 = load ptr, ptr %result.i111, align 8
  %4067 = load ptr, ptr %309, align 8
  %result.i.i3789 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %4068 = getelementptr i8, ptr %result.i.i3789, i64 16
  store ptr %4067, ptr %4068, align 8
  %4069 = getelementptr i8, ptr %result.i.i3789, i64 8
  store ptr %4066, ptr %4069, align 8
  %4070 = getelementptr i8, ptr %result.i.i3789, i64 24
  store ptr null, ptr %4070, align 8
  %4071 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i3789)
  store ptr @Entry, ptr %result.i.i3789, align 8
  store ptr @_parameterization_Ptri32, ptr %85, align 8
  store ptr %result.i.i3789, ptr %457, align 8
  %4072 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %85)
  %4073 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4058)
  %4074 = sext i32 %4064 to i64
  %4075 = getelementptr ptr, ptr %4058, i64 %4074
  %4076 = getelementptr i8, ptr %4075, i64 128
  %4077 = load ptr, ptr %4076, align 8
  store ptr @i32_typ, ptr %86, align 8
  store ptr %.fca.0.extract11.i2839, ptr %458, align 8
  %4078 = call ptr %4077({ ptr, ptr, ptr, i32 } %4065, ptr nonnull %86)
  call void %4078({ ptr, ptr, ptr, i32 } %4065, { ptr, ptr, ptr, i32 } %4065, ptr nonnull %85, i32 %4038, { ptr, i160 } %4056)
  %4079 = icmp ne ptr %.fca.0.extract112.i3764, @nil_typ
  %4080 = icmp ne ptr %.fca.0.extract112.i3764, null
  %.not140.i3790 = and i1 %4079, %4080
  br i1 %.not140.i3790, label %.cont.cont.i3729, label %4169

4081:                                             ; preds = %4006
  %4082 = add i32 %4016, 2127912214
  %4083 = shl i32 %4016, 12
  %4084 = add i32 %4082, %4083
  %4085 = ashr i32 %4084, 19
  %4086 = xor i32 %4084, %4085
  %4087 = xor i32 %4086, -949894596
  %4088 = add i32 %4087, 374761393
  %4089 = shl i32 %4087, 5
  %4090 = add i32 %4088, %4089
  %4091 = add i32 %4090, -744332180
  %4092 = shl i32 %4090, 9
  %4093 = xor i32 %4091, %4092
  %4094 = add i32 %4093, -42973499
  %4095 = shl i32 %4093, 3
  %4096 = add i32 %4094, %4095
  %4097 = ashr i32 %4096, 16
  %4098 = xor i32 %4096, %4097
  %4099 = xor i32 %4098, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %4100 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4101 = load ptr, ptr %343, align 8
  %4102 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4101, 0
  %4103 = load ptr, ptr %344, align 8
  %4104 = insertvalue { ptr, ptr, ptr, i32 } %4102, ptr %4103, 1
  %4105 = load ptr, ptr %345, align 8
  %4106 = insertvalue { ptr, ptr, ptr, i32 } %4104, ptr %4105, 2
  %4107 = load i32, ptr %346, align 4
  %4108 = insertvalue { ptr, ptr, ptr, i32 } %4106, i32 %4107, 3
  %hash_coef_ptr.i.i10.i4818 = getelementptr i8, ptr %4101, i64 8
  %tbl_size_ptr.i.i11.i4819 = getelementptr i8, ptr %4101, i64 16
  %offset_tbl_ptr.i.i12.i4820 = getelementptr i8, ptr %4101, i64 40
  %hash_coef.i.i13.i4821 = load i64, ptr %hash_coef_ptr.i.i10.i4818, align 4
  %tbl_size.i.i14.i4822 = load i64, ptr %tbl_size_ptr.i.i11.i4819, align 4
  %offset_tbl.i.i15.i4823 = load ptr, ptr %offset_tbl_ptr.i.i12.i4820, align 8
  %product.i.i.i16.i4824 = mul i64 %hash_coef.i.i13.i4821, -5261542750394134544
  %shifted.i.i.i17.i4825 = lshr i64 %product.i.i.i16.i4824, 32
  %xored.i.i.i18.i4826 = xor i64 %shifted.i.i.i17.i4825, %product.i.i.i16.i4824
  %hash.i.i.i19.i4827 = and i64 %xored.i.i.i18.i4826, %tbl_size.i.i14.i4822
  %offset_ptr.i.i20.i4828 = getelementptr i32, ptr %offset_tbl.i.i15.i4823, i64 %hash.i.i.i19.i4827
  %offset.i.i21.i4829 = load i32, ptr %offset_ptr.i.i20.i4828, align 4
  %eq.i.i4830 = icmp eq i32 %4107, %offset.i.i21.i4829
  call void @llvm.assume(i1 %eq.i.i4830) #30
  %4109 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4110 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4101)
  %4111 = sext i32 %4107 to i64
  %4112 = getelementptr ptr, ptr %4101, i64 %4111
  %4113 = getelementptr i8, ptr %4112, i64 64
  %4114 = load ptr, ptr %4113, align 8
  %4115 = call ptr %4114({ ptr, ptr, ptr, i32 } %4108, ptr nonnull %2)
  %4116 = call i32 %4115({ ptr, ptr, ptr, i32 } %4108, { ptr, ptr, ptr, i32 } %4108, ptr nonnull %2)
  %4117 = add i32 %4116, -1
  %4118 = and i32 %4117, %4099
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %4119 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4120 = load ptr, ptr %343, align 8
  %4121 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4120, 0
  %4122 = load ptr, ptr %344, align 8
  %4123 = insertvalue { ptr, ptr, ptr, i32 } %4121, ptr %4122, 1
  %4124 = load ptr, ptr %345, align 8
  %4125 = insertvalue { ptr, ptr, ptr, i32 } %4123, ptr %4124, 2
  %4126 = load i32, ptr %346, align 4
  %4127 = insertvalue { ptr, ptr, ptr, i32 } %4125, i32 %4126, 3
  %hash_coef_ptr.i.i202.i3683 = getelementptr i8, ptr %4120, i64 8
  %tbl_size_ptr.i.i203.i3684 = getelementptr i8, ptr %4120, i64 16
  %offset_tbl_ptr.i.i204.i3685 = getelementptr i8, ptr %4120, i64 40
  %hash_coef.i.i205.i3686 = load i64, ptr %hash_coef_ptr.i.i202.i3683, align 4
  %tbl_size.i.i206.i3687 = load i64, ptr %tbl_size_ptr.i.i203.i3684, align 4
  %offset_tbl.i.i207.i3688 = load ptr, ptr %offset_tbl_ptr.i.i204.i3685, align 8
  %product.i.i.i208.i3689 = mul i64 %hash_coef.i.i205.i3686, -5261542750394134544
  %shifted.i.i.i209.i3690 = lshr i64 %product.i.i.i208.i3689, 32
  %xored.i.i.i210.i3691 = xor i64 %shifted.i.i.i209.i3690, %product.i.i.i208.i3689
  %hash.i.i.i211.i3692 = and i64 %xored.i.i.i210.i3691, %tbl_size.i.i206.i3687
  %offset_ptr.i.i212.i3693 = getelementptr i32, ptr %offset_tbl.i.i207.i3688, i64 %hash.i.i.i211.i3692
  %offset.i.i213.i3694 = load i32, ptr %offset_ptr.i.i212.i3693, align 4
  %eq.i216.i3695 = icmp eq i32 %4126, %offset.i.i213.i3694
  call void @llvm.assume(i1 %eq.i216.i3695) #30
  store ptr @_parameterization_Ptri32, ptr %91, align 8
  %4128 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %91)
  %4129 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4120)
  %4130 = sext i32 %4126 to i64
  %4131 = getelementptr ptr, ptr %4120, i64 %4130
  %4132 = getelementptr i8, ptr %4131, i64 120
  %4133 = load ptr, ptr %4132, align 8
  store ptr @i32_typ, ptr %92, align 8
  %4134 = call ptr %4133({ ptr, ptr, ptr, i32 } %4127, ptr nonnull %92)
  %4135 = call { ptr, i160 } %4134({ ptr, ptr, ptr, i32 } %4127, { ptr, ptr, ptr, i32 } %4127, ptr nonnull %91, i32 %4118)
  %.fca.0.extract87.i3696 = extractvalue { ptr, i160 } %4135, 0
  %.sroa.3.0.insert.ext.i3697 = zext i32 %offset.i.i260.i37463985 to i160
  %.sroa.3.0.insert.shift.i3698 = shl nuw i160 %.sroa.3.0.insert.ext.i3697, 128
  %.sroa.2.0.insert.ext.i3699 = zext i64 %4009 to i160
  %.sroa.2.0.insert.shift.i3700 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i3699, 64
  %.sroa.2.0.insert.insert.i3701 = or disjoint i160 %.sroa.2.0.insert.shift.i3700, %.sroa.3.0.insert.shift.i3698
  %.sroa.0.0.insert.ext.i3702 = zext i64 %4008 to i160
  %.sroa.0.0.insert.insert.i3703 = or disjoint i160 %.sroa.2.0.insert.insert.i3701, %.sroa.0.0.insert.ext.i3702
  %4136 = insertvalue { ptr, i160 } %4005, i160 %.sroa.0.0.insert.insert.i3703, 1
  %4137 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4138 = load ptr, ptr %343, align 8
  %4139 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4138, 0
  %4140 = load ptr, ptr %344, align 8
  %4141 = insertvalue { ptr, ptr, ptr, i32 } %4139, ptr %4140, 1
  %4142 = load ptr, ptr %345, align 8
  %4143 = insertvalue { ptr, ptr, ptr, i32 } %4141, ptr %4142, 2
  %4144 = load i32, ptr %346, align 4
  %4145 = insertvalue { ptr, ptr, ptr, i32 } %4143, i32 %4144, 3
  %hash_coef_ptr.i.i218.i3708 = getelementptr i8, ptr %4138, i64 8
  %tbl_size_ptr.i.i219.i3709 = getelementptr i8, ptr %4138, i64 16
  %offset_tbl_ptr.i.i220.i3710 = getelementptr i8, ptr %4138, i64 40
  %hash_coef.i.i221.i3711 = load i64, ptr %hash_coef_ptr.i.i218.i3708, align 4
  %tbl_size.i.i222.i3712 = load i64, ptr %tbl_size_ptr.i.i219.i3709, align 4
  %offset_tbl.i.i223.i3713 = load ptr, ptr %offset_tbl_ptr.i.i220.i3710, align 8
  %product.i.i.i224.i3714 = mul i64 %hash_coef.i.i221.i3711, -5261542750394134544
  %shifted.i.i.i225.i3715 = lshr i64 %product.i.i.i224.i3714, 32
  %xored.i.i.i226.i3716 = xor i64 %shifted.i.i.i225.i3715, %product.i.i.i224.i3714
  %hash.i.i.i227.i3717 = and i64 %xored.i.i.i226.i3716, %tbl_size.i.i222.i3712
  %offset_ptr.i.i228.i3718 = getelementptr i32, ptr %offset_tbl.i.i223.i3713, i64 %hash.i.i.i227.i3717
  %offset.i.i229.i3719 = load i32, ptr %offset_ptr.i.i228.i3718, align 4
  %eq.i232.i3720 = icmp eq i32 %4144, %offset.i.i229.i3719
  call void @llvm.assume(i1 %eq.i232.i3720) #30
  %4146 = load ptr, ptr %result.i111, align 8
  %4147 = load ptr, ptr %309, align 8
  %result.i233.i3721 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %4148 = getelementptr i8, ptr %result.i233.i3721, i64 16
  store ptr %4147, ptr %4148, align 8
  %4149 = getelementptr i8, ptr %result.i233.i3721, i64 8
  store ptr %4146, ptr %4149, align 8
  %4150 = getelementptr i8, ptr %result.i233.i3721, i64 24
  store ptr null, ptr %4150, align 8
  %4151 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i233.i3721)
  store ptr @Entry, ptr %result.i233.i3721, align 8
  store ptr @_parameterization_Ptri32, ptr %93, align 8
  store ptr %result.i233.i3721, ptr %455, align 8
  %4152 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %93)
  %4153 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4138)
  %4154 = sext i32 %4144 to i64
  %4155 = getelementptr ptr, ptr %4138, i64 %4154
  %4156 = getelementptr i8, ptr %4155, i64 128
  %4157 = load ptr, ptr %4156, align 8
  store ptr @i32_typ, ptr %94, align 8
  store ptr %.fca.0.extract11.i2839, ptr %456, align 8
  %4158 = call ptr %4157({ ptr, ptr, ptr, i32 } %4145, ptr nonnull %94)
  call void %4158({ ptr, ptr, ptr, i32 } %4145, { ptr, ptr, ptr, i32 } %4145, ptr nonnull %93, i32 %4118, { ptr, i160 } %4136)
  %4159 = icmp ne ptr %.fca.0.extract87.i3696, @nil_typ
  %4160 = icmp ne ptr %.fca.0.extract87.i3696, null
  %.not138.i3722 = and i1 %4159, %4160
  br i1 %.not138.i3722, label %.cont.cont.i3729, label %4169

.cont.cont.i3729:                                 ; preds = %4081, %4019
  %.sink4009 = phi { ptr, i160 } [ %4055, %4019 ], [ %4135, %4081 ]
  %4161 = phi i32 [ 2, %4019 ], [ 1, %4081 ]
  %vptr.i248.sroa.speculated.i3732 = phi ptr [ %.fca.0.extract112.i3764, %4019 ], [ %.fca.0.extract87.i3696, %4081 ]
  %.fca.1.extract89.i3725 = extractvalue { ptr, i160 } %.sink4009, 1
  %.sroa.3407.sroa.4.0.extract.shift.i3726 = lshr i160 %.fca.1.extract89.i3725, 64
  %4162 = trunc i160 %.sroa.3407.sroa.4.0.extract.shift.i3726 to i64
  %4163 = insertelement <2 x i64> poison, i64 %4162, i64 0
  %4164 = trunc i160 %.fca.1.extract89.i3725 to i64
  %4165 = insertelement <2 x i64> %4163, i64 %4164, i64 1
  %hash_coef_ptr.i.i249.i3735 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i3732, i64 8
  %tbl_size_ptr.i.i250.i3736 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i3732, i64 16
  %offset_tbl_ptr.i.i251.i3737 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i3732, i64 40
  %hash_coef.i.i252.i3738 = load i64, ptr %hash_coef_ptr.i.i249.i3735, align 4
  %tbl_size.i.i253.i3739 = load i64, ptr %tbl_size_ptr.i.i250.i3736, align 4
  %offset_tbl.i.i254.i3740 = load ptr, ptr %offset_tbl_ptr.i.i251.i3737, align 8
  %product.i.i.i255.i3741 = mul i64 %hash_coef.i.i252.i3738, 4015701072841558310
  %shifted.i.i.i256.i3742 = lshr i64 %product.i.i.i255.i3741, 32
  %xored.i.i.i257.i3743 = xor i64 %shifted.i.i.i256.i3742, %product.i.i.i255.i3741
  %hash.i.i.i258.i3744 = and i64 %xored.i.i.i257.i3743, %tbl_size.i.i253.i3739
  %offset_ptr.i.i259.i3745 = getelementptr i32, ptr %offset_tbl.i.i254.i3740, i64 %hash.i.i.i258.i3744
  %offset.i.i260.i3746 = load i32, ptr %offset_ptr.i.i259.i3745, align 4
  %4166 = add nuw nsw i32 %.reg2mem193.0677.i3678, 1
  %4167 = load i32, ptr %349, align 4
  %4168 = icmp slt i32 %4166, %4167
  br i1 %4168, label %4006, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit3796

4169:                                             ; preds = %4081, %4019
  %4170 = phi ptr [ %95, %4081 ], [ %87, %4019 ]
  %4171 = phi ptr [ %96, %4081 ], [ %88, %4019 ]
  %4172 = phi ptr [ %97, %4081 ], [ %89, %4019 ]
  %4173 = phi ptr [ %.sroa.0.i3642, %4081 ], [ %.sroa.0680.i3640, %4019 ]
  %4174 = phi ptr [ %98, %4081 ], [ %90, %4019 ]
  %4175 = load i32, ptr %347, align 4
  store i32 %4175, ptr %4170, align 4
  store i32 1, ptr %4171, align 4
  %4176 = add i32 %4175, 1
  store i32 %4176, ptr %4172, align 4
  %4177 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  store i32 %4176, ptr %347, align 4
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %4174, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %4173, align 8
  br label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit3796

HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit3796: ; preds = %.cont.cont.i3729, %3994, %4169
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %83)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %84)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %85)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %86)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %87)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %88)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %89)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i3640)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %90)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %91)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %92)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %93)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %94)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %95)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %96)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %97)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i3642)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %98)
  br label %._crit_edge1.i2841

._crit_edge1.i2841:                               ; preds = %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit3796, %3986
  %4178 = add nuw nsw i32 %.reg2mem13.079.i2838, 1
  %4179 = icmp slt i32 %4178, %3945
  br i1 %4179, label %3986, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2859

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2859: ; preds = %._crit_edge1.i2841
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %145)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %146)
  %4180 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %143)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %144)
  %invariant.gep.i2863 = getelementptr i8, ptr %3931, i64 120
  %offset_tbl.i.i24.i2865 = load ptr, ptr %offset_tbl_ptr.i.i48.i1485, align 8
  %hash_coef.i.i22.i2867 = load i64, ptr %hash_coef_ptr.i.i46.i1483, align 4
  %product.i.i.i25.i2868 = mul i64 %hash_coef.i.i22.i2867, -5261542750394134544
  %shifted.i.i.i26.i2869 = lshr i64 %product.i.i.i25.i2868, 32
  %xored.i.i.i27.i2870 = xor i64 %shifted.i.i.i26.i2869, %product.i.i.i25.i2868
  %tbl_size.i.i23.i2872 = load i64, ptr %tbl_size_ptr.i.i47.i1484, align 4
  %hash.i.i.i28.i2873 = and i64 %xored.i.i.i27.i2870, %tbl_size.i.i23.i2872
  %offset_ptr.i.i29.i2874 = getelementptr i32, ptr %offset_tbl.i.i24.i2865, i64 %hash.i.i.i28.i2873
  %offset.i.i30.i2875 = load i32, ptr %offset_ptr.i.i29.i2874, align 4
  %4181 = insertvalue { ptr, ptr, ptr, i32 } %3936, i32 %offset.i.i30.i2875, 3
  %4182 = sext i32 %offset.i.i30.i2875 to i64
  %gep.i2890 = getelementptr ptr, ptr %invariant.gep.i2863, i64 %4182
  %4183 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %4184

4184:                                             ; preds = %._crit_edge1.i2894, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2859
  %.reg2mem13.079.i2891 = phi i32 [ 0, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2859 ], [ %4376, %._crit_edge1.i2894 ]
  store ptr @_parameterization_Ptri32, ptr %143, align 8
  %4185 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %143)
  %4186 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %3931)
  %4187 = load ptr, ptr %gep.i2890, align 8
  store ptr @i32_typ, ptr %144, align 8
  %4188 = call ptr %4187({ ptr, ptr, ptr, i32 } %4181, ptr nonnull %144)
  %4189 = call { ptr, i160 } %4188({ ptr, ptr, ptr, i32 } %4181, { ptr, ptr, ptr, i32 } %4181, ptr nonnull %143, i32 %.reg2mem13.079.i2891)
  %.fca.0.extract11.i2892 = extractvalue { ptr, i160 } %4189, 0
  %4190 = icmp ne ptr %.fca.0.extract11.i2892, @nil_typ
  %4191 = icmp ne ptr %.fca.0.extract11.i2892, null
  %.not17.i2893 = and i1 %4190, %4191
  br i1 %.not17.i2893, label %4192, label %._crit_edge1.i2894

4192:                                             ; preds = %4184
  %hash_coef_ptr.i.i33.i2899 = getelementptr i8, ptr %.fca.0.extract11.i2892, i64 8
  %tbl_size_ptr.i.i34.i2900 = getelementptr i8, ptr %.fca.0.extract11.i2892, i64 16
  %offset_tbl_ptr.i.i35.i2901 = getelementptr i8, ptr %.fca.0.extract11.i2892, i64 40
  %4193 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %67)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %68)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %69)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %70)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %71)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %72)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %73)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0680.i3797)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %74)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %75)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %76)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %77)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %78)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %79)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %80)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %81)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i3799)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %82)
  %hash_coef.i.i147.i3819 = load i64, ptr %hash_coef_ptr.i.i33.i2899, align 4
  %tbl_size.i.i148.i3820 = load i64, ptr %tbl_size_ptr.i.i34.i2900, align 4
  %offset_tbl.i.i149.i3821 = load ptr, ptr %offset_tbl_ptr.i.i35.i2901, align 8
  %product.i.i.i150.i3822 = mul i64 %hash_coef.i.i147.i3819, 4015701072841558310
  %shifted.i.i.i151.i3823 = lshr i64 %product.i.i.i150.i3822, 32
  %xored.i.i.i152.i3824 = xor i64 %shifted.i.i.i151.i3823, %product.i.i.i150.i3822
  %hash.i.i.i153.i3825 = and i64 %xored.i.i.i152.i3824, %tbl_size.i.i148.i3820
  %offset_ptr.i.i154.i3826 = getelementptr i32, ptr %offset_tbl.i.i149.i3821, i64 %hash.i.i.i153.i3825
  %offset.i.i169.i3827 = load i32, ptr %offset_ptr.i.i154.i3826, align 4
  %4194 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4195 = load i32, ptr %349, align 4
  %4196 = icmp sgt i32 %4195, 0
  br i1 %4196, label %.lr.ph.i3833, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit3953

.lr.ph.i3833:                                     ; preds = %4192
  %.fca.1.extract13.i2895 = extractvalue { ptr, i160 } %4189, 1
  %.sroa.576.8.extract.shift.i2897 = lshr i160 %.fca.1.extract13.i2895, 64
  %4197 = insertelement <2 x i160> poison, i160 %.sroa.576.8.extract.shift.i2897, i64 0
  %4198 = insertelement <2 x i160> %4197, i160 %.fca.1.extract13.i2895, i64 1
  %4199 = trunc <2 x i160> %4198 to <2 x i64>
  %4200 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i2892, 0
  %4201 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4202 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract11.i2892)
  %invariant.gep3986 = getelementptr i8, ptr %.fca.0.extract11.i2892, i64 64
  %4203 = insertvalue { ptr, i160 } undef, ptr %.fca.0.extract11.i2892, 0
  br label %4204

4204:                                             ; preds = %.cont.cont.i3886, %.lr.ph.i3833
  %offset.i.i260.i39033993 = phi i32 [ %offset.i.i169.i3827, %.lr.ph.i3833 ], [ %offset.i.i260.i3903, %.cont.cont.i3886 ]
  %.reg2mem195.0678.i3834 = phi i32 [ 1, %.lr.ph.i3833 ], [ %4359, %.cont.cont.i3886 ]
  %.reg2mem193.0677.i3835 = phi i32 [ 0, %.lr.ph.i3833 ], [ %4364, %.cont.cont.i3886 ]
  %4205 = phi <2 x i64> [ %4199, %.lr.ph.i3833 ], [ %4363, %.cont.cont.i3886 ]
  %4206 = extractelement <2 x i64> %4205, i64 1
  %.sroa.speculated352.i38903989 = inttoptr i64 %4206 to ptr
  %4207 = extractelement <2 x i64> %4205, i64 0
  %.sroa.speculated346.i38913991 = inttoptr i64 %4207 to ptr
  %4208 = insertvalue { ptr, ptr, ptr, i32 } %4200, ptr %.sroa.speculated352.i38903989, 1
  %4209 = insertvalue { ptr, ptr, ptr, i32 } %4208, ptr %.sroa.speculated346.i38913991, 2
  %4210 = insertvalue { ptr, ptr, ptr, i32 } %4209, i32 %offset.i.i260.i39033993, 3
  %4211 = sext i32 %offset.i.i260.i39033993 to i64
  %gep3987 = getelementptr ptr, ptr %invariant.gep3986, i64 %4211
  %4212 = load ptr, ptr %gep3987, align 8
  %4213 = call ptr %4212({ ptr, ptr, ptr, i32 } %4210, ptr nonnull %2)
  %4214 = call i32 %4213({ ptr, ptr, ptr, i32 } %4210, { ptr, ptr, ptr, i32 } %4210, ptr nonnull %2)
  %4215 = icmp eq i32 %.reg2mem195.0678.i3834, 1
  %4216 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br i1 %4215, label %4217, label %4279

4217:                                             ; preds = %4204
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %4218 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4219 = load ptr, ptr %326, align 8
  %4220 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4219, 0
  %4221 = load ptr, ptr %327, align 8
  %4222 = insertvalue { ptr, ptr, ptr, i32 } %4220, ptr %4221, 1
  %4223 = load ptr, ptr %328, align 8
  %4224 = insertvalue { ptr, ptr, ptr, i32 } %4222, ptr %4223, 2
  %4225 = load i32, ptr %329, align 4
  %4226 = insertvalue { ptr, ptr, ptr, i32 } %4224, i32 %4225, 3
  %hash_coef_ptr.i.i10.i4848 = getelementptr i8, ptr %4219, i64 8
  %tbl_size_ptr.i.i11.i4849 = getelementptr i8, ptr %4219, i64 16
  %offset_tbl_ptr.i.i12.i4850 = getelementptr i8, ptr %4219, i64 40
  %hash_coef.i.i13.i4851 = load i64, ptr %hash_coef_ptr.i.i10.i4848, align 4
  %tbl_size.i.i14.i4852 = load i64, ptr %tbl_size_ptr.i.i11.i4849, align 4
  %offset_tbl.i.i15.i4853 = load ptr, ptr %offset_tbl_ptr.i.i12.i4850, align 8
  %product.i.i.i16.i4854 = mul i64 %hash_coef.i.i13.i4851, -5261542750394134544
  %shifted.i.i.i17.i4855 = lshr i64 %product.i.i.i16.i4854, 32
  %xored.i.i.i18.i4856 = xor i64 %shifted.i.i.i17.i4855, %product.i.i.i16.i4854
  %hash.i.i.i19.i4857 = and i64 %xored.i.i.i18.i4856, %tbl_size.i.i14.i4852
  %offset_ptr.i.i20.i4858 = getelementptr i32, ptr %offset_tbl.i.i15.i4853, i64 %hash.i.i.i19.i4857
  %offset.i.i21.i4859 = load i32, ptr %offset_ptr.i.i20.i4858, align 4
  %eq.i.i4860 = icmp eq i32 %4225, %offset.i.i21.i4859
  call void @llvm.assume(i1 %eq.i.i4860) #30
  %4227 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4228 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4219)
  %4229 = sext i32 %4225 to i64
  %4230 = getelementptr ptr, ptr %4219, i64 %4229
  %4231 = getelementptr i8, ptr %4230, i64 64
  %4232 = load ptr, ptr %4231, align 8
  %4233 = call ptr %4232({ ptr, ptr, ptr, i32 } %4226, ptr nonnull %2)
  %4234 = call i32 %4233({ ptr, ptr, ptr, i32 } %4226, { ptr, ptr, ptr, i32 } %4226, ptr nonnull %2)
  %4235 = add i32 %4234, -1
  %4236 = and i32 %4235, %4214
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %4237 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4238 = load ptr, ptr %326, align 8
  %4239 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4238, 0
  %4240 = load ptr, ptr %327, align 8
  %4241 = insertvalue { ptr, ptr, ptr, i32 } %4239, ptr %4240, 1
  %4242 = load ptr, ptr %328, align 8
  %4243 = insertvalue { ptr, ptr, ptr, i32 } %4241, ptr %4242, 2
  %4244 = load i32, ptr %329, align 4
  %4245 = insertvalue { ptr, ptr, ptr, i32 } %4243, i32 %4244, 3
  %hash_coef_ptr.i.i172.i3908 = getelementptr i8, ptr %4238, i64 8
  %tbl_size_ptr.i.i173.i3909 = getelementptr i8, ptr %4238, i64 16
  %offset_tbl_ptr.i.i174.i3910 = getelementptr i8, ptr %4238, i64 40
  %hash_coef.i.i175.i3911 = load i64, ptr %hash_coef_ptr.i.i172.i3908, align 4
  %tbl_size.i.i176.i3912 = load i64, ptr %tbl_size_ptr.i.i173.i3909, align 4
  %offset_tbl.i.i177.i3913 = load ptr, ptr %offset_tbl_ptr.i.i174.i3910, align 8
  %product.i.i.i178.i3914 = mul i64 %hash_coef.i.i175.i3911, -5261542750394134544
  %shifted.i.i.i179.i3915 = lshr i64 %product.i.i.i178.i3914, 32
  %xored.i.i.i180.i3916 = xor i64 %shifted.i.i.i179.i3915, %product.i.i.i178.i3914
  %hash.i.i.i181.i3917 = and i64 %xored.i.i.i180.i3916, %tbl_size.i.i176.i3912
  %offset_ptr.i.i182.i3918 = getelementptr i32, ptr %offset_tbl.i.i177.i3913, i64 %hash.i.i.i181.i3917
  %offset.i.i183.i3919 = load i32, ptr %offset_ptr.i.i182.i3918, align 4
  %eq.i.i3920 = icmp eq i32 %4244, %offset.i.i183.i3919
  call void @llvm.assume(i1 %eq.i.i3920) #30
  store ptr @_parameterization_Ptri32, ptr %67, align 8
  %4246 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %67)
  %4247 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4238)
  %4248 = sext i32 %4244 to i64
  %4249 = getelementptr ptr, ptr %4238, i64 %4248
  %4250 = getelementptr i8, ptr %4249, i64 120
  %4251 = load ptr, ptr %4250, align 8
  store ptr @i32_typ, ptr %68, align 8
  %4252 = call ptr %4251({ ptr, ptr, ptr, i32 } %4245, ptr nonnull %68)
  %4253 = call { ptr, i160 } %4252({ ptr, ptr, ptr, i32 } %4245, { ptr, ptr, ptr, i32 } %4245, ptr nonnull %67, i32 %4236)
  %.fca.0.extract112.i3921 = extractvalue { ptr, i160 } %4253, 0
  %.sroa.3111.0.insert.ext.i3922 = zext i32 %offset.i.i260.i39033993 to i160
  %.sroa.3111.0.insert.shift.i3923 = shl nuw i160 %.sroa.3111.0.insert.ext.i3922, 128
  %.sroa.2110.0.insert.ext.i3924 = zext i64 %4207 to i160
  %.sroa.2110.0.insert.shift.i3925 = shl nuw nsw i160 %.sroa.2110.0.insert.ext.i3924, 64
  %.sroa.2110.0.insert.insert.i3926 = or disjoint i160 %.sroa.2110.0.insert.shift.i3925, %.sroa.3111.0.insert.shift.i3923
  %.sroa.0109.0.insert.ext.i3927 = zext i64 %4206 to i160
  %.sroa.0109.0.insert.insert.i3928 = or disjoint i160 %.sroa.2110.0.insert.insert.i3926, %.sroa.0109.0.insert.ext.i3927
  %4254 = insertvalue { ptr, i160 } %4203, i160 %.sroa.0109.0.insert.insert.i3928, 1
  %4255 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4256 = load ptr, ptr %326, align 8
  %4257 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4256, 0
  %4258 = load ptr, ptr %327, align 8
  %4259 = insertvalue { ptr, ptr, ptr, i32 } %4257, ptr %4258, 1
  %4260 = load ptr, ptr %328, align 8
  %4261 = insertvalue { ptr, ptr, ptr, i32 } %4259, ptr %4260, 2
  %4262 = load i32, ptr %329, align 4
  %4263 = insertvalue { ptr, ptr, ptr, i32 } %4261, i32 %4262, 3
  %hash_coef_ptr.i.i186.i3933 = getelementptr i8, ptr %4256, i64 8
  %tbl_size_ptr.i.i187.i3934 = getelementptr i8, ptr %4256, i64 16
  %offset_tbl_ptr.i.i188.i3935 = getelementptr i8, ptr %4256, i64 40
  %hash_coef.i.i189.i3936 = load i64, ptr %hash_coef_ptr.i.i186.i3933, align 4
  %tbl_size.i.i190.i3937 = load i64, ptr %tbl_size_ptr.i.i187.i3934, align 4
  %offset_tbl.i.i191.i3938 = load ptr, ptr %offset_tbl_ptr.i.i188.i3935, align 8
  %product.i.i.i192.i3939 = mul i64 %hash_coef.i.i189.i3936, -5261542750394134544
  %shifted.i.i.i193.i3940 = lshr i64 %product.i.i.i192.i3939, 32
  %xored.i.i.i194.i3941 = xor i64 %shifted.i.i.i193.i3940, %product.i.i.i192.i3939
  %hash.i.i.i195.i3942 = and i64 %xored.i.i.i194.i3941, %tbl_size.i.i190.i3937
  %offset_ptr.i.i196.i3943 = getelementptr i32, ptr %offset_tbl.i.i191.i3938, i64 %hash.i.i.i195.i3942
  %offset.i.i197.i3944 = load i32, ptr %offset_ptr.i.i196.i3943, align 4
  %eq.i200.i3945 = icmp eq i32 %4262, %offset.i.i197.i3944
  call void @llvm.assume(i1 %eq.i200.i3945) #30
  %4264 = load ptr, ptr %result.i111, align 8
  %4265 = load ptr, ptr %309, align 8
  %result.i.i3946 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %4266 = getelementptr i8, ptr %result.i.i3946, i64 16
  store ptr %4265, ptr %4266, align 8
  %4267 = getelementptr i8, ptr %result.i.i3946, i64 8
  store ptr %4264, ptr %4267, align 8
  %4268 = getelementptr i8, ptr %result.i.i3946, i64 24
  store ptr null, ptr %4268, align 8
  %4269 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i3946)
  store ptr @Entry, ptr %result.i.i3946, align 8
  store ptr @_parameterization_Ptri32, ptr %69, align 8
  store ptr %result.i.i3946, ptr %461, align 8
  %4270 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %69)
  %4271 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4256)
  %4272 = sext i32 %4262 to i64
  %4273 = getelementptr ptr, ptr %4256, i64 %4272
  %4274 = getelementptr i8, ptr %4273, i64 128
  %4275 = load ptr, ptr %4274, align 8
  store ptr @i32_typ, ptr %70, align 8
  store ptr %.fca.0.extract11.i2892, ptr %462, align 8
  %4276 = call ptr %4275({ ptr, ptr, ptr, i32 } %4263, ptr nonnull %70)
  call void %4276({ ptr, ptr, ptr, i32 } %4263, { ptr, ptr, ptr, i32 } %4263, ptr nonnull %69, i32 %4236, { ptr, i160 } %4254)
  %4277 = icmp ne ptr %.fca.0.extract112.i3921, @nil_typ
  %4278 = icmp ne ptr %.fca.0.extract112.i3921, null
  %.not140.i3947 = and i1 %4277, %4278
  br i1 %.not140.i3947, label %.cont.cont.i3886, label %4367

4279:                                             ; preds = %4204
  %4280 = add i32 %4214, 2127912214
  %4281 = shl i32 %4214, 12
  %4282 = add i32 %4280, %4281
  %4283 = ashr i32 %4282, 19
  %4284 = xor i32 %4282, %4283
  %4285 = xor i32 %4284, -949894596
  %4286 = add i32 %4285, 374761393
  %4287 = shl i32 %4285, 5
  %4288 = add i32 %4286, %4287
  %4289 = add i32 %4288, -744332180
  %4290 = shl i32 %4288, 9
  %4291 = xor i32 %4289, %4290
  %4292 = add i32 %4291, -42973499
  %4293 = shl i32 %4291, 3
  %4294 = add i32 %4292, %4293
  %4295 = ashr i32 %4294, 16
  %4296 = xor i32 %4294, %4295
  %4297 = xor i32 %4296, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %4298 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4299 = load ptr, ptr %343, align 8
  %4300 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4299, 0
  %4301 = load ptr, ptr %344, align 8
  %4302 = insertvalue { ptr, ptr, ptr, i32 } %4300, ptr %4301, 1
  %4303 = load ptr, ptr %345, align 8
  %4304 = insertvalue { ptr, ptr, ptr, i32 } %4302, ptr %4303, 2
  %4305 = load i32, ptr %346, align 4
  %4306 = insertvalue { ptr, ptr, ptr, i32 } %4304, i32 %4305, 3
  %hash_coef_ptr.i.i10.i4878 = getelementptr i8, ptr %4299, i64 8
  %tbl_size_ptr.i.i11.i4879 = getelementptr i8, ptr %4299, i64 16
  %offset_tbl_ptr.i.i12.i4880 = getelementptr i8, ptr %4299, i64 40
  %hash_coef.i.i13.i4881 = load i64, ptr %hash_coef_ptr.i.i10.i4878, align 4
  %tbl_size.i.i14.i4882 = load i64, ptr %tbl_size_ptr.i.i11.i4879, align 4
  %offset_tbl.i.i15.i4883 = load ptr, ptr %offset_tbl_ptr.i.i12.i4880, align 8
  %product.i.i.i16.i4884 = mul i64 %hash_coef.i.i13.i4881, -5261542750394134544
  %shifted.i.i.i17.i4885 = lshr i64 %product.i.i.i16.i4884, 32
  %xored.i.i.i18.i4886 = xor i64 %shifted.i.i.i17.i4885, %product.i.i.i16.i4884
  %hash.i.i.i19.i4887 = and i64 %xored.i.i.i18.i4886, %tbl_size.i.i14.i4882
  %offset_ptr.i.i20.i4888 = getelementptr i32, ptr %offset_tbl.i.i15.i4883, i64 %hash.i.i.i19.i4887
  %offset.i.i21.i4889 = load i32, ptr %offset_ptr.i.i20.i4888, align 4
  %eq.i.i4890 = icmp eq i32 %4305, %offset.i.i21.i4889
  call void @llvm.assume(i1 %eq.i.i4890) #30
  %4307 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4308 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4299)
  %4309 = sext i32 %4305 to i64
  %4310 = getelementptr ptr, ptr %4299, i64 %4309
  %4311 = getelementptr i8, ptr %4310, i64 64
  %4312 = load ptr, ptr %4311, align 8
  %4313 = call ptr %4312({ ptr, ptr, ptr, i32 } %4306, ptr nonnull %2)
  %4314 = call i32 %4313({ ptr, ptr, ptr, i32 } %4306, { ptr, ptr, ptr, i32 } %4306, ptr nonnull %2)
  %4315 = add i32 %4314, -1
  %4316 = and i32 %4315, %4297
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %4317 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4318 = load ptr, ptr %343, align 8
  %4319 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4318, 0
  %4320 = load ptr, ptr %344, align 8
  %4321 = insertvalue { ptr, ptr, ptr, i32 } %4319, ptr %4320, 1
  %4322 = load ptr, ptr %345, align 8
  %4323 = insertvalue { ptr, ptr, ptr, i32 } %4321, ptr %4322, 2
  %4324 = load i32, ptr %346, align 4
  %4325 = insertvalue { ptr, ptr, ptr, i32 } %4323, i32 %4324, 3
  %hash_coef_ptr.i.i202.i3840 = getelementptr i8, ptr %4318, i64 8
  %tbl_size_ptr.i.i203.i3841 = getelementptr i8, ptr %4318, i64 16
  %offset_tbl_ptr.i.i204.i3842 = getelementptr i8, ptr %4318, i64 40
  %hash_coef.i.i205.i3843 = load i64, ptr %hash_coef_ptr.i.i202.i3840, align 4
  %tbl_size.i.i206.i3844 = load i64, ptr %tbl_size_ptr.i.i203.i3841, align 4
  %offset_tbl.i.i207.i3845 = load ptr, ptr %offset_tbl_ptr.i.i204.i3842, align 8
  %product.i.i.i208.i3846 = mul i64 %hash_coef.i.i205.i3843, -5261542750394134544
  %shifted.i.i.i209.i3847 = lshr i64 %product.i.i.i208.i3846, 32
  %xored.i.i.i210.i3848 = xor i64 %shifted.i.i.i209.i3847, %product.i.i.i208.i3846
  %hash.i.i.i211.i3849 = and i64 %xored.i.i.i210.i3848, %tbl_size.i.i206.i3844
  %offset_ptr.i.i212.i3850 = getelementptr i32, ptr %offset_tbl.i.i207.i3845, i64 %hash.i.i.i211.i3849
  %offset.i.i213.i3851 = load i32, ptr %offset_ptr.i.i212.i3850, align 4
  %eq.i216.i3852 = icmp eq i32 %4324, %offset.i.i213.i3851
  call void @llvm.assume(i1 %eq.i216.i3852) #30
  store ptr @_parameterization_Ptri32, ptr %75, align 8
  %4326 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %75)
  %4327 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4318)
  %4328 = sext i32 %4324 to i64
  %4329 = getelementptr ptr, ptr %4318, i64 %4328
  %4330 = getelementptr i8, ptr %4329, i64 120
  %4331 = load ptr, ptr %4330, align 8
  store ptr @i32_typ, ptr %76, align 8
  %4332 = call ptr %4331({ ptr, ptr, ptr, i32 } %4325, ptr nonnull %76)
  %4333 = call { ptr, i160 } %4332({ ptr, ptr, ptr, i32 } %4325, { ptr, ptr, ptr, i32 } %4325, ptr nonnull %75, i32 %4316)
  %.fca.0.extract87.i3853 = extractvalue { ptr, i160 } %4333, 0
  %.sroa.3.0.insert.ext.i3854 = zext i32 %offset.i.i260.i39033993 to i160
  %.sroa.3.0.insert.shift.i3855 = shl nuw i160 %.sroa.3.0.insert.ext.i3854, 128
  %.sroa.2.0.insert.ext.i3856 = zext i64 %4207 to i160
  %.sroa.2.0.insert.shift.i3857 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i3856, 64
  %.sroa.2.0.insert.insert.i3858 = or disjoint i160 %.sroa.2.0.insert.shift.i3857, %.sroa.3.0.insert.shift.i3855
  %.sroa.0.0.insert.ext.i3859 = zext i64 %4206 to i160
  %.sroa.0.0.insert.insert.i3860 = or disjoint i160 %.sroa.2.0.insert.insert.i3858, %.sroa.0.0.insert.ext.i3859
  %4334 = insertvalue { ptr, i160 } %4203, i160 %.sroa.0.0.insert.insert.i3860, 1
  %4335 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4336 = load ptr, ptr %343, align 8
  %4337 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4336, 0
  %4338 = load ptr, ptr %344, align 8
  %4339 = insertvalue { ptr, ptr, ptr, i32 } %4337, ptr %4338, 1
  %4340 = load ptr, ptr %345, align 8
  %4341 = insertvalue { ptr, ptr, ptr, i32 } %4339, ptr %4340, 2
  %4342 = load i32, ptr %346, align 4
  %4343 = insertvalue { ptr, ptr, ptr, i32 } %4341, i32 %4342, 3
  %hash_coef_ptr.i.i218.i3865 = getelementptr i8, ptr %4336, i64 8
  %tbl_size_ptr.i.i219.i3866 = getelementptr i8, ptr %4336, i64 16
  %offset_tbl_ptr.i.i220.i3867 = getelementptr i8, ptr %4336, i64 40
  %hash_coef.i.i221.i3868 = load i64, ptr %hash_coef_ptr.i.i218.i3865, align 4
  %tbl_size.i.i222.i3869 = load i64, ptr %tbl_size_ptr.i.i219.i3866, align 4
  %offset_tbl.i.i223.i3870 = load ptr, ptr %offset_tbl_ptr.i.i220.i3867, align 8
  %product.i.i.i224.i3871 = mul i64 %hash_coef.i.i221.i3868, -5261542750394134544
  %shifted.i.i.i225.i3872 = lshr i64 %product.i.i.i224.i3871, 32
  %xored.i.i.i226.i3873 = xor i64 %shifted.i.i.i225.i3872, %product.i.i.i224.i3871
  %hash.i.i.i227.i3874 = and i64 %xored.i.i.i226.i3873, %tbl_size.i.i222.i3869
  %offset_ptr.i.i228.i3875 = getelementptr i32, ptr %offset_tbl.i.i223.i3870, i64 %hash.i.i.i227.i3874
  %offset.i.i229.i3876 = load i32, ptr %offset_ptr.i.i228.i3875, align 4
  %eq.i232.i3877 = icmp eq i32 %4342, %offset.i.i229.i3876
  call void @llvm.assume(i1 %eq.i232.i3877) #30
  %4344 = load ptr, ptr %result.i111, align 8
  %4345 = load ptr, ptr %309, align 8
  %result.i233.i3878 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %4346 = getelementptr i8, ptr %result.i233.i3878, i64 16
  store ptr %4345, ptr %4346, align 8
  %4347 = getelementptr i8, ptr %result.i233.i3878, i64 8
  store ptr %4344, ptr %4347, align 8
  %4348 = getelementptr i8, ptr %result.i233.i3878, i64 24
  store ptr null, ptr %4348, align 8
  %4349 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i233.i3878)
  store ptr @Entry, ptr %result.i233.i3878, align 8
  store ptr @_parameterization_Ptri32, ptr %77, align 8
  store ptr %result.i233.i3878, ptr %459, align 8
  %4350 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %77)
  %4351 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4336)
  %4352 = sext i32 %4342 to i64
  %4353 = getelementptr ptr, ptr %4336, i64 %4352
  %4354 = getelementptr i8, ptr %4353, i64 128
  %4355 = load ptr, ptr %4354, align 8
  store ptr @i32_typ, ptr %78, align 8
  store ptr %.fca.0.extract11.i2892, ptr %460, align 8
  %4356 = call ptr %4355({ ptr, ptr, ptr, i32 } %4343, ptr nonnull %78)
  call void %4356({ ptr, ptr, ptr, i32 } %4343, { ptr, ptr, ptr, i32 } %4343, ptr nonnull %77, i32 %4316, { ptr, i160 } %4334)
  %4357 = icmp ne ptr %.fca.0.extract87.i3853, @nil_typ
  %4358 = icmp ne ptr %.fca.0.extract87.i3853, null
  %.not138.i3879 = and i1 %4357, %4358
  br i1 %.not138.i3879, label %.cont.cont.i3886, label %4367

.cont.cont.i3886:                                 ; preds = %4279, %4217
  %.sink4011 = phi { ptr, i160 } [ %4253, %4217 ], [ %4333, %4279 ]
  %4359 = phi i32 [ 2, %4217 ], [ 1, %4279 ]
  %vptr.i248.sroa.speculated.i3889 = phi ptr [ %.fca.0.extract112.i3921, %4217 ], [ %.fca.0.extract87.i3853, %4279 ]
  %.fca.1.extract89.i3882 = extractvalue { ptr, i160 } %.sink4011, 1
  %.sroa.3407.sroa.4.0.extract.shift.i3883 = lshr i160 %.fca.1.extract89.i3882, 64
  %4360 = trunc i160 %.sroa.3407.sroa.4.0.extract.shift.i3883 to i64
  %4361 = insertelement <2 x i64> poison, i64 %4360, i64 0
  %4362 = trunc i160 %.fca.1.extract89.i3882 to i64
  %4363 = insertelement <2 x i64> %4361, i64 %4362, i64 1
  %hash_coef_ptr.i.i249.i3892 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i3889, i64 8
  %tbl_size_ptr.i.i250.i3893 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i3889, i64 16
  %offset_tbl_ptr.i.i251.i3894 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i3889, i64 40
  %hash_coef.i.i252.i3895 = load i64, ptr %hash_coef_ptr.i.i249.i3892, align 4
  %tbl_size.i.i253.i3896 = load i64, ptr %tbl_size_ptr.i.i250.i3893, align 4
  %offset_tbl.i.i254.i3897 = load ptr, ptr %offset_tbl_ptr.i.i251.i3894, align 8
  %product.i.i.i255.i3898 = mul i64 %hash_coef.i.i252.i3895, 4015701072841558310
  %shifted.i.i.i256.i3899 = lshr i64 %product.i.i.i255.i3898, 32
  %xored.i.i.i257.i3900 = xor i64 %shifted.i.i.i256.i3899, %product.i.i.i255.i3898
  %hash.i.i.i258.i3901 = and i64 %xored.i.i.i257.i3900, %tbl_size.i.i253.i3896
  %offset_ptr.i.i259.i3902 = getelementptr i32, ptr %offset_tbl.i.i254.i3897, i64 %hash.i.i.i258.i3901
  %offset.i.i260.i3903 = load i32, ptr %offset_ptr.i.i259.i3902, align 4
  %4364 = add nuw nsw i32 %.reg2mem193.0677.i3835, 1
  %4365 = load i32, ptr %349, align 4
  %4366 = icmp slt i32 %4364, %4365
  br i1 %4366, label %4204, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit3953

4367:                                             ; preds = %4279, %4217
  %4368 = phi ptr [ %79, %4279 ], [ %71, %4217 ]
  %4369 = phi ptr [ %80, %4279 ], [ %72, %4217 ]
  %4370 = phi ptr [ %81, %4279 ], [ %73, %4217 ]
  %4371 = phi ptr [ %.sroa.0.i3799, %4279 ], [ %.sroa.0680.i3797, %4217 ]
  %4372 = phi ptr [ %82, %4279 ], [ %74, %4217 ]
  %4373 = load i32, ptr %347, align 4
  store i32 %4373, ptr %4368, align 4
  store i32 1, ptr %4369, align 4
  %4374 = add i32 %4373, 1
  store i32 %4374, ptr %4370, align 4
  %4375 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  store i32 %4374, ptr %347, align 4
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %4372, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %4371, align 8
  br label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit3953

HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit3953: ; preds = %.cont.cont.i3886, %4192, %4367
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %67)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %68)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %69)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %70)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %71)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %72)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %73)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i3797)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %74)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %75)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %76)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %77)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %78)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %79)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %80)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %81)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i3799)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %82)
  br label %._crit_edge1.i2894

._crit_edge1.i2894:                               ; preds = %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit3953, %4184
  %4376 = add nuw nsw i32 %.reg2mem13.079.i2891, 1
  %4377 = icmp slt i32 %4376, %3945
  br i1 %4377, label %4184, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2912

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2912.critedge: ; preds = %._crit_edge3.1.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %145)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %146)
  %4378 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %143)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %144)
  br label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2912

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2912: ; preds = %._crit_edge1.i2894, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2912.critedge
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %143)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %144)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %194)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %195)
  br label %HashMap_insert_keyK_valueV.exit

HashMap_insert_keyK_valueV.exit:                  ; preds = %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit1447.thread, %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit.thread, %.thread525.i, %.thread528.i, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2912
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %248)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %249)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %250)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %251)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %252)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %253)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %254)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %255)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %256)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %257)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %258)
  %4379 = sext i32 %651 to i64
  %4380 = add i64 %.reg2mem133.0304, %4379
  %4381 = add nsw i32 %.reg2mem131.0303, 1
  br label %4382

4382:                                             ; preds = %HashMap_insert_keyK_valueV.exit, %HashMap_get_keyK.exit
  %.reg2mem125.0 = phi i32 [ %4381, %HashMap_insert_keyK_valueV.exit ], [ %.reg2mem131.0303, %HashMap_get_keyK.exit ]
  %.reg2mem127.0 = phi i64 [ %4380, %HashMap_insert_keyK_valueV.exit ], [ %.reg2mem133.0304, %HashMap_get_keyK.exit ]
  %4383 = add nuw nsw i32 %.reg2mem129.0302, 1
  %4384 = icmp slt i32 %.reg2mem125.0, %0
  %4385 = icmp slt i32 %4383, %350
  %4386 = and i1 %4385, %4384
  br i1 %4386, label %479, label %._crit_edge306.loopexit

._crit_edge306.loopexit:                          ; preds = %4382
  %4387 = call i32 @llvm.smin.i32(i32 %.reg2mem125.0, i32 %0)
  br i1 %4384, label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit173, label %._crit_edge

._crit_edge306:                                   ; preds = %1
  %4388 = call i32 @llvm.smin.i32(i32 %0, i32 0)
  br i1 %351, label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit173, label %._crit_edge.thread

._crit_edge.thread:                               ; preds = %._crit_edge306
  %4389 = call i64 @clock()
  br label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit233

IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit173: ; preds = %._crit_edge306.loopexit, %._crit_edge306
  %4390 = phi i32 [ %4387, %._crit_edge306.loopexit ], [ %4388, %._crit_edge306 ]
  %.reg2mem133.0.lcssa451 = phi i64 [ %.reg2mem127.0, %._crit_edge306.loopexit ], [ 0, %._crit_edge306 ]
  %.reg2mem131.0.lcssa449 = phi i32 [ %.reg2mem125.0, %._crit_edge306.loopexit ], [ 0, %._crit_edge306 ]
  %result.i134 = call noalias dereferenceable_or_null(30) ptr @bump_malloc_inner(i64 noundef 30, ptr nonnull @current_ptr) #29
  store <29 x i8> <i8 87, i8 97, i8 114, i8 110, i8 105, i8 110, i8 103, i8 58, i8 32, i8 67, i8 111, i8 117, i8 108, i8 100, i8 32, i8 111, i8 110, i8 108, i8 121, i8 32, i8 103, i8 101, i8 110, i8 101, i8 114, i8 97, i8 116, i8 101, i8 32>, ptr %result.i134, align 32
  %result.i135 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %4391 = getelementptr inbounds i8, ptr %263, i64 8
  %4392 = getelementptr inbounds i8, ptr %263, i64 24
  store ptr @String, ptr %263, align 8
  store ptr %result.i135, ptr %4391, align 8
  store i32 9, ptr %4392, align 8
  %4393 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %263)
  store ptr %result.i134, ptr %result.i135, align 8
  %4394 = getelementptr i8, ptr %result.i135, i64 8
  store i32 29, ptr %4394, align 4
  %4395 = getelementptr i8, ptr %result.i135, i64 12
  store i32 30, ptr %4395, align 4
  %4396 = load i160, ptr %4391, align 8
  %4397 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %.sroa.3.8.extract.trunc.i = trunc i160 %4396 to i64
  %4398 = inttoptr i64 %.sroa.3.8.extract.trunc.i to ptr
  %4399 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4400 = getelementptr i8, ptr %4398, i64 8
  %4401 = load i32, ptr %4400, align 4
  %4402 = add i32 %4401, 1
  %4403 = sext i32 %4402 to i64
  %result.i.i1572 = call noalias ptr @bump_malloc_inner(i64 noundef %4403, ptr nonnull @current_ptr) #29
  %4404 = load i32, ptr %4400, align 4
  %4405 = icmp sgt i32 %4404, 0
  br i1 %4405, label %.lr.ph.i1573, label %String_c_string_.exit

.lr.ph.i1573:                                     ; preds = %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit173
  %4406 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %4407 = load ptr, ptr %4398, align 8
  %4408 = zext nneg i32 %4404 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i1572, ptr align 1 %4407, i64 %4408, i1 false)
  br label %String_c_string_.exit

String_c_string_.exit:                            ; preds = %.lr.ph.i1573, %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit173
  %4409 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %4410 = sext i32 %4404 to i64
  %4411 = getelementptr i8, ptr %result.i.i1572, i64 %4410
  store i8 0, ptr %4411, align 1
  %puts.i = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i1572)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %4412 = call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i32_string, i32 %.reg2mem131.0.lcssa449)
  %result.i154 = call noalias dereferenceable_or_null(34) ptr @bump_malloc_inner(i64 noundef 34, ptr nonnull @current_ptr) #29
  %4413 = load <33 x i8>, ptr @enrjd__unique_keys_for_random_hit_test, align 64
  store <33 x i8> %4413, ptr %result.i154, align 64
  %result.i155 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %4414 = getelementptr inbounds i8, ptr %264, i64 8
  %4415 = getelementptr inbounds i8, ptr %264, i64 24
  store ptr @String, ptr %264, align 8
  store ptr %result.i155, ptr %4414, align 8
  store i32 9, ptr %4415, align 8
  %4416 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %264)
  store ptr %result.i154, ptr %result.i155, align 8
  %4417 = getelementptr i8, ptr %result.i155, i64 8
  store i32 33, ptr %4417, align 4
  %4418 = getelementptr i8, ptr %result.i155, i64 12
  store i32 34, ptr %4418, align 4
  %4419 = load i160, ptr %4414, align 8
  %4420 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %.sroa.3.8.extract.trunc.i583 = trunc i160 %4419 to i64
  %4421 = inttoptr i64 %.sroa.3.8.extract.trunc.i583 to ptr
  %4422 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4423 = getelementptr i8, ptr %4421, i64 8
  %4424 = load i32, ptr %4423, align 4
  %4425 = add i32 %4424, 1
  %4426 = sext i32 %4425 to i64
  %result.i.i1589 = call noalias ptr @bump_malloc_inner(i64 noundef %4426, ptr nonnull @current_ptr) #29
  %4427 = load i32, ptr %4423, align 4
  %4428 = icmp sgt i32 %4427, 0
  br i1 %4428, label %.lr.ph.i1590, label %String_c_string_.exit1594

.lr.ph.i1590:                                     ; preds = %String_c_string_.exit
  %4429 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %4430 = load ptr, ptr %4421, align 8
  %4431 = zext nneg i32 %4427 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i1589, ptr align 1 %4430, i64 %4431, i1 false)
  br label %String_c_string_.exit1594

String_c_string_.exit1594:                        ; preds = %.lr.ph.i1590, %String_c_string_.exit
  %4432 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %4433 = sext i32 %4427 to i64
  %4434 = getelementptr i8, ptr %result.i.i1589, i64 %4433
  store i8 0, ptr %4434, align 1
  %puts.i599 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i1589)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge306.loopexit, %String_c_string_.exit1594
  %4435 = phi i32 [ %4387, %._crit_edge306.loopexit ], [ %4390, %String_c_string_.exit1594 ]
  %.reg2mem133.0.lcssa450 = phi i64 [ %.reg2mem127.0, %._crit_edge306.loopexit ], [ %.reg2mem133.0.lcssa451, %String_c_string_.exit1594 ]
  %4436 = call i64 @clock()
  %4437 = icmp sgt i32 %4435, 0
  br i1 %4437, label %.lr.ph313, label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit233

.lr.ph313:                                        ; preds = %._crit_edge
  %4438 = getelementptr inbounds i8, ptr %265, i64 8
  %4439 = getelementptr inbounds i8, ptr %265, i64 24
  %4440 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %4441 = load ptr, ptr %308, align 8
  %invariant.gep = getelementptr i8, ptr %4441, i64 8
  %4442 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4443 = getelementptr i8, ptr %result.i, i64 40
  %4444 = getelementptr i8, ptr %result.i, i64 72
  br label %4445

4445:                                             ; preds = %.lr.ph313, %4638
  %.reg2mem111.0312 = phi i64 [ 0, %.lr.ph313 ], [ %.reg2mem105.0, %4638 ]
  %.reg2mem109.0311 = phi i1 [ true, %.lr.ph313 ], [ %4639, %4638 ]
  %.reg2mem107.0310 = phi i32 [ 0, %.lr.ph313 ], [ %4640, %4638 ]
  %4446 = zext nneg i32 %.reg2mem107.0310 to i64
  %4447 = shl nuw nsw i64 %4446, 5
  %gep = getelementptr i8, ptr %invariant.gep, i64 %4447
  %4448 = load i160, ptr %gep, align 4
  %.sroa.035.0.insert.ext = and i160 %4448, 4294967295
  %4449 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.035.0.insert.ext, 1
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0271.i866)
  call void @llvm.lifetime.start.p0(i64 20, ptr nonnull %.sroa.1.i867)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i868)
  call void @llvm.lifetime.start.p0(i64 20, ptr nonnull %.sroa.2.i869)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %233)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %234)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0123.i870)
  call void @llvm.lifetime.start.p0(i64 20, ptr nonnull %.sroa.2124.i871)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0115.i872)
  call void @llvm.lifetime.start.p0(i64 20, ptr nonnull %.sroa.2116.i873)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %235)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %236)
  %4450 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4451 = load ptr, ptr %274, align 8
  %4452 = call i32 %4451({ ptr, i160 } %4449)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %4453 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4454 = load ptr, ptr %286, align 8
  %4455 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4454, 0
  %4456 = load ptr, ptr %287, align 8
  %4457 = insertvalue { ptr, ptr, ptr, i32 } %4455, ptr %4456, 1
  %4458 = load ptr, ptr %4443, align 8
  %4459 = insertvalue { ptr, ptr, ptr, i32 } %4457, ptr %4458, 2
  %4460 = load i32, ptr %288, align 4
  %4461 = insertvalue { ptr, ptr, ptr, i32 } %4459, i32 %4460, 3
  %hash_coef_ptr.i.i10.i2423 = getelementptr i8, ptr %4454, i64 8
  %tbl_size_ptr.i.i11.i2424 = getelementptr i8, ptr %4454, i64 16
  %offset_tbl_ptr.i.i12.i2425 = getelementptr i8, ptr %4454, i64 40
  %hash_coef.i.i13.i2426 = load i64, ptr %hash_coef_ptr.i.i10.i2423, align 4
  %tbl_size.i.i14.i2427 = load i64, ptr %tbl_size_ptr.i.i11.i2424, align 4
  %offset_tbl.i.i15.i2428 = load ptr, ptr %offset_tbl_ptr.i.i12.i2425, align 8
  %product.i.i.i16.i2429 = mul i64 %hash_coef.i.i13.i2426, -5261542750394134544
  %shifted.i.i.i17.i2430 = lshr i64 %product.i.i.i16.i2429, 32
  %xored.i.i.i18.i2431 = xor i64 %shifted.i.i.i17.i2430, %product.i.i.i16.i2429
  %hash.i.i.i19.i2432 = and i64 %xored.i.i.i18.i2431, %tbl_size.i.i14.i2427
  %offset_ptr.i.i20.i2433 = getelementptr i32, ptr %offset_tbl.i.i15.i2428, i64 %hash.i.i.i19.i2432
  %offset.i.i21.i2434 = load i32, ptr %offset_ptr.i.i20.i2433, align 4
  %eq.i.i2435 = icmp eq i32 %4460, %offset.i.i21.i2434
  call void @llvm.assume(i1 %eq.i.i2435) #30
  %4462 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4463 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4454)
  %4464 = sext i32 %4460 to i64
  %4465 = getelementptr ptr, ptr %4454, i64 %4464
  %4466 = getelementptr i8, ptr %4465, i64 64
  %4467 = load ptr, ptr %4466, align 8
  %4468 = call ptr %4467({ ptr, ptr, ptr, i32 } %4461, ptr nonnull %2)
  %4469 = call i32 %4468({ ptr, ptr, ptr, i32 } %4461, { ptr, ptr, ptr, i32 } %4461, ptr nonnull %2)
  %4470 = add i32 %4469, -1
  %4471 = and i32 %4470, %4452
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %4472 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4473 = load ptr, ptr %286, align 8
  %4474 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4473, 0
  %4475 = load ptr, ptr %287, align 8
  %4476 = insertvalue { ptr, ptr, ptr, i32 } %4474, ptr %4475, 1
  %4477 = load ptr, ptr %4443, align 8
  %4478 = insertvalue { ptr, ptr, ptr, i32 } %4476, ptr %4477, 2
  %4479 = load i32, ptr %288, align 4
  %4480 = insertvalue { ptr, ptr, ptr, i32 } %4478, i32 %4479, 3
  %hash_coef_ptr.i.i130.i890 = getelementptr i8, ptr %4473, i64 8
  %tbl_size_ptr.i.i131.i891 = getelementptr i8, ptr %4473, i64 16
  %offset_tbl_ptr.i.i132.i892 = getelementptr i8, ptr %4473, i64 40
  %hash_coef.i.i133.i893 = load i64, ptr %hash_coef_ptr.i.i130.i890, align 4
  %tbl_size.i.i134.i894 = load i64, ptr %tbl_size_ptr.i.i131.i891, align 4
  %offset_tbl.i.i135.i895 = load ptr, ptr %offset_tbl_ptr.i.i132.i892, align 8
  %product.i.i.i136.i896 = mul i64 %hash_coef.i.i133.i893, -5261542750394134544
  %shifted.i.i.i137.i897 = lshr i64 %product.i.i.i136.i896, 32
  %xored.i.i.i138.i898 = xor i64 %shifted.i.i.i137.i897, %product.i.i.i136.i896
  %hash.i.i.i139.i899 = and i64 %xored.i.i.i138.i898, %tbl_size.i.i134.i894
  %offset_ptr.i.i140.i900 = getelementptr i32, ptr %offset_tbl.i.i135.i895, i64 %hash.i.i.i139.i899
  %offset.i.i141.i901 = load i32, ptr %offset_ptr.i.i140.i900, align 4
  %eq.i.i902 = icmp eq i32 %4479, %offset.i.i141.i901
  call void @llvm.assume(i1 %eq.i.i902) #30
  store ptr @_parameterization_Ptri32, ptr %235, align 8
  %4481 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %235)
  %4482 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4473)
  %4483 = sext i32 %4479 to i64
  %4484 = getelementptr ptr, ptr %4473, i64 %4483
  %4485 = getelementptr i8, ptr %4484, i64 120
  %4486 = load ptr, ptr %4485, align 8
  store ptr @i32_typ, ptr %236, align 8
  %4487 = call ptr %4486({ ptr, ptr, ptr, i32 } %4480, ptr nonnull %236)
  %4488 = call { ptr, i160 } %4487({ ptr, ptr, ptr, i32 } %4480, { ptr, ptr, ptr, i32 } %4480, ptr nonnull %235, i32 %4471)
  %.fca.0.extract.i903 = extractvalue { ptr, i160 } %4488, 0
  %4489 = icmp ne ptr %.fca.0.extract.i903, @nil_typ
  %4490 = icmp ne ptr %.fca.0.extract.i903, null
  %.not126.i904 = and i1 %4489, %4490
  br i1 %.not126.i904, label %4491, label %.critedge.i905

4491:                                             ; preds = %4445
  %.fca.1.extract.i951 = extractvalue { ptr, i160 } %4488, 1
  %.sroa.5.8.extract.trunc.i952 = trunc i160 %.fca.1.extract.i951 to i64
  %4492 = inttoptr i64 %.sroa.5.8.extract.trunc.i952 to ptr
  %.sroa.9.8.extract.shift.i953 = lshr i160 %.fca.1.extract.i951, 64
  %.sroa.9.8.extract.trunc.i954 = trunc i160 %.sroa.9.8.extract.shift.i953 to i64
  %4493 = inttoptr i64 %.sroa.9.8.extract.trunc.i954 to ptr
  %hash_coef_ptr.i.i144.i955 = getelementptr i8, ptr %.fca.0.extract.i903, i64 8
  %tbl_size_ptr.i.i145.i956 = getelementptr i8, ptr %.fca.0.extract.i903, i64 16
  %offset_tbl_ptr.i.i146.i957 = getelementptr i8, ptr %.fca.0.extract.i903, i64 40
  %hash_coef.i.i147.i958 = load i64, ptr %hash_coef_ptr.i.i144.i955, align 4
  %tbl_size.i.i148.i959 = load i64, ptr %tbl_size_ptr.i.i145.i956, align 4
  %offset_tbl.i.i149.i960 = load ptr, ptr %offset_tbl_ptr.i.i146.i957, align 8
  %product.i.i.i150.i961 = mul i64 %hash_coef.i.i147.i958, 4015701072841558310
  %shifted.i.i.i151.i962 = lshr i64 %product.i.i.i150.i961, 32
  %xored.i.i.i152.i963 = xor i64 %shifted.i.i.i151.i962, %product.i.i.i150.i961
  %hash.i.i.i153.i964 = and i64 %xored.i.i.i152.i963, %tbl_size.i.i148.i959
  %offset_ptr.i.i154.i965 = getelementptr i32, ptr %offset_tbl.i.i149.i960, i64 %hash.i.i.i153.i964
  %offset.i.i155.i966 = load i32, ptr %offset_ptr.i.i154.i965, align 4
  %4494 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract.i903, 0
  %4495 = insertvalue { ptr, ptr, ptr, i32 } %4494, ptr %4492, 1
  %4496 = insertvalue { ptr, ptr, ptr, i32 } %4495, ptr %4493, 2
  %4497 = insertvalue { ptr, ptr, ptr, i32 } %4496, i32 %offset.i.i155.i966, 3
  %4498 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4499 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4500 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract.i903)
  %4501 = sext i32 %offset.i.i155.i966 to i64
  %4502 = getelementptr ptr, ptr %.fca.0.extract.i903, i64 %4501
  %4503 = getelementptr i8, ptr %4502, i64 64
  %4504 = load ptr, ptr %4503, align 8
  %4505 = call ptr %4504({ ptr, ptr, ptr, i32 } %4497, ptr nonnull %2)
  %4506 = call i32 %4505({ ptr, ptr, ptr, i32 } %4497, { ptr, ptr, ptr, i32 } %4497, ptr nonnull %2)
  %4507 = icmp eq i32 %4506, %4452
  %4508 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4509 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4510 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract.i903)
  %4511 = getelementptr i8, ptr %4502, i64 48
  %4512 = load ptr, ptr %4511, align 8
  %4513 = call ptr %4512({ ptr, ptr, ptr, i32 } %4497, ptr nonnull %2)
  %4514 = call { ptr, i160 } %4513({ ptr, ptr, ptr, i32 } %4497, { ptr, ptr, ptr, i32 } %4497, ptr nonnull %2)
  %4515 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4516 = load ptr, ptr %275, align 8
  %4517 = call i1 %4516({ ptr, i160 } %4514, { ptr, i160 } %4449)
  %4518 = and i1 %4507, %4517
  br i1 %4518, label %HashMap_get_keyK.exit968, label %.critedge.i905

.critedge.i905:                                   ; preds = %4491, %4445
  %4519 = add i32 %4452, 2127912214
  %4520 = shl i32 %4452, 12
  %4521 = add i32 %4519, %4520
  %4522 = ashr i32 %4521, 19
  %4523 = xor i32 %4521, %4522
  %4524 = xor i32 %4523, -949894596
  %4525 = add i32 %4524, 374761393
  %4526 = shl i32 %4524, 5
  %4527 = add i32 %4525, %4526
  %4528 = add i32 %4527, -744332180
  %4529 = shl i32 %4527, 9
  %4530 = xor i32 %4528, %4529
  %4531 = add i32 %4530, -42973499
  %4532 = shl i32 %4530, 3
  %4533 = add i32 %4531, %4532
  %4534 = ashr i32 %4533, 16
  %4535 = xor i32 %4533, %4534
  %4536 = xor i32 %4535, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %4537 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4538 = load ptr, ptr %299, align 8
  %4539 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4538, 0
  %4540 = load ptr, ptr %300, align 8
  %4541 = insertvalue { ptr, ptr, ptr, i32 } %4539, ptr %4540, 1
  %4542 = load ptr, ptr %4444, align 8
  %4543 = insertvalue { ptr, ptr, ptr, i32 } %4541, ptr %4542, 2
  %4544 = load i32, ptr %301, align 4
  %4545 = insertvalue { ptr, ptr, ptr, i32 } %4543, i32 %4544, 3
  %hash_coef_ptr.i.i10.i2454 = getelementptr i8, ptr %4538, i64 8
  %tbl_size_ptr.i.i11.i2455 = getelementptr i8, ptr %4538, i64 16
  %offset_tbl_ptr.i.i12.i2456 = getelementptr i8, ptr %4538, i64 40
  %hash_coef.i.i13.i2457 = load i64, ptr %hash_coef_ptr.i.i10.i2454, align 4
  %tbl_size.i.i14.i2458 = load i64, ptr %tbl_size_ptr.i.i11.i2455, align 4
  %offset_tbl.i.i15.i2459 = load ptr, ptr %offset_tbl_ptr.i.i12.i2456, align 8
  %product.i.i.i16.i2460 = mul i64 %hash_coef.i.i13.i2457, -5261542750394134544
  %shifted.i.i.i17.i2461 = lshr i64 %product.i.i.i16.i2460, 32
  %xored.i.i.i18.i2462 = xor i64 %shifted.i.i.i17.i2461, %product.i.i.i16.i2460
  %hash.i.i.i19.i2463 = and i64 %xored.i.i.i18.i2462, %tbl_size.i.i14.i2458
  %offset_ptr.i.i20.i2464 = getelementptr i32, ptr %offset_tbl.i.i15.i2459, i64 %hash.i.i.i19.i2463
  %offset.i.i21.i2465 = load i32, ptr %offset_ptr.i.i20.i2464, align 4
  %eq.i.i2466 = icmp eq i32 %4544, %offset.i.i21.i2465
  call void @llvm.assume(i1 %eq.i.i2466) #30
  %4546 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4547 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4538)
  %4548 = sext i32 %4544 to i64
  %4549 = getelementptr ptr, ptr %4538, i64 %4548
  %4550 = getelementptr i8, ptr %4549, i64 64
  %4551 = load ptr, ptr %4550, align 8
  %4552 = call ptr %4551({ ptr, ptr, ptr, i32 } %4545, ptr nonnull %2)
  %4553 = call i32 %4552({ ptr, ptr, ptr, i32 } %4545, { ptr, ptr, ptr, i32 } %4545, ptr nonnull %2)
  %4554 = add i32 %4553, -1
  %4555 = and i32 %4554, %4536
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %4556 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4557 = load ptr, ptr %299, align 8
  %4558 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4557, 0
  %4559 = load ptr, ptr %300, align 8
  %4560 = insertvalue { ptr, ptr, ptr, i32 } %4558, ptr %4559, 1
  %4561 = load ptr, ptr %4444, align 8
  %4562 = insertvalue { ptr, ptr, ptr, i32 } %4560, ptr %4561, 2
  %4563 = load i32, ptr %301, align 4
  %4564 = insertvalue { ptr, ptr, ptr, i32 } %4562, i32 %4563, 3
  %hash_coef_ptr.i.i158.i910 = getelementptr i8, ptr %4557, i64 8
  %tbl_size_ptr.i.i159.i911 = getelementptr i8, ptr %4557, i64 16
  %offset_tbl_ptr.i.i160.i912 = getelementptr i8, ptr %4557, i64 40
  %hash_coef.i.i161.i913 = load i64, ptr %hash_coef_ptr.i.i158.i910, align 4
  %tbl_size.i.i162.i914 = load i64, ptr %tbl_size_ptr.i.i159.i911, align 4
  %offset_tbl.i.i163.i915 = load ptr, ptr %offset_tbl_ptr.i.i160.i912, align 8
  %product.i.i.i164.i916 = mul i64 %hash_coef.i.i161.i913, -5261542750394134544
  %shifted.i.i.i165.i917 = lshr i64 %product.i.i.i164.i916, 32
  %xored.i.i.i166.i918 = xor i64 %shifted.i.i.i165.i917, %product.i.i.i164.i916
  %hash.i.i.i167.i919 = and i64 %xored.i.i.i166.i918, %tbl_size.i.i162.i914
  %offset_ptr.i.i168.i920 = getelementptr i32, ptr %offset_tbl.i.i163.i915, i64 %hash.i.i.i167.i919
  %offset.i.i169.i921 = load i32, ptr %offset_ptr.i.i168.i920, align 4
  %eq.i172.i922 = icmp eq i32 %4563, %offset.i.i169.i921
  call void @llvm.assume(i1 %eq.i172.i922) #30
  store ptr @_parameterization_Ptri32, ptr %233, align 8
  %4565 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %233)
  %4566 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4557)
  %4567 = sext i32 %4563 to i64
  %4568 = getelementptr ptr, ptr %4557, i64 %4567
  %4569 = getelementptr i8, ptr %4568, i64 120
  %4570 = load ptr, ptr %4569, align 8
  store ptr @i32_typ, ptr %234, align 8
  %4571 = call ptr %4570({ ptr, ptr, ptr, i32 } %4564, ptr nonnull %234)
  %4572 = call { ptr, i160 } %4571({ ptr, ptr, ptr, i32 } %4564, { ptr, ptr, ptr, i32 } %4564, ptr nonnull %233, i32 %4555)
  %.fca.0.extract57.i923 = extractvalue { ptr, i160 } %4572, 0
  %4573 = icmp ne ptr %.fca.0.extract57.i923, @nil_typ
  %4574 = icmp ne ptr %.fca.0.extract57.i923, null
  %.not128.i924 = and i1 %4573, %4574
  br i1 %.not128.i924, label %4575, label %HashMap_get_keyK.exit968.thread

4575:                                             ; preds = %.critedge.i905
  %.fca.1.extract59.i925 = extractvalue { ptr, i160 } %4572, 1
  %.sroa.6.8.extract.trunc.i926 = trunc i160 %.fca.1.extract59.i925 to i64
  %4576 = inttoptr i64 %.sroa.6.8.extract.trunc.i926 to ptr
  %.sroa.11.8.extract.shift.i927 = lshr i160 %.fca.1.extract59.i925, 64
  %.sroa.11.8.extract.trunc.i928 = trunc i160 %.sroa.11.8.extract.shift.i927 to i64
  %4577 = inttoptr i64 %.sroa.11.8.extract.trunc.i928 to ptr
  %hash_coef_ptr.i.i174.i929 = getelementptr i8, ptr %.fca.0.extract57.i923, i64 8
  %tbl_size_ptr.i.i175.i930 = getelementptr i8, ptr %.fca.0.extract57.i923, i64 16
  %offset_tbl_ptr.i.i176.i931 = getelementptr i8, ptr %.fca.0.extract57.i923, i64 40
  %hash_coef.i.i177.i932 = load i64, ptr %hash_coef_ptr.i.i174.i929, align 4
  %tbl_size.i.i178.i933 = load i64, ptr %tbl_size_ptr.i.i175.i930, align 4
  %offset_tbl.i.i179.i934 = load ptr, ptr %offset_tbl_ptr.i.i176.i931, align 8
  %product.i.i.i180.i935 = mul i64 %hash_coef.i.i177.i932, 4015701072841558310
  %shifted.i.i.i181.i936 = lshr i64 %product.i.i.i180.i935, 32
  %xored.i.i.i182.i937 = xor i64 %shifted.i.i.i181.i936, %product.i.i.i180.i935
  %hash.i.i.i183.i938 = and i64 %xored.i.i.i182.i937, %tbl_size.i.i178.i933
  %offset_ptr.i.i184.i939 = getelementptr i32, ptr %offset_tbl.i.i179.i934, i64 %hash.i.i.i183.i938
  %offset.i.i185.i940 = load i32, ptr %offset_ptr.i.i184.i939, align 4
  %4578 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract57.i923, 0
  %4579 = insertvalue { ptr, ptr, ptr, i32 } %4578, ptr %4576, 1
  %4580 = insertvalue { ptr, ptr, ptr, i32 } %4579, ptr %4577, 2
  %4581 = insertvalue { ptr, ptr, ptr, i32 } %4580, i32 %offset.i.i185.i940, 3
  %4582 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4583 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4584 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract57.i923)
  %4585 = sext i32 %offset.i.i185.i940 to i64
  %4586 = getelementptr ptr, ptr %.fca.0.extract57.i923, i64 %4585
  %4587 = getelementptr i8, ptr %4586, i64 64
  %4588 = load ptr, ptr %4587, align 8
  %4589 = call ptr %4588({ ptr, ptr, ptr, i32 } %4581, ptr nonnull %2)
  %4590 = call i32 %4589({ ptr, ptr, ptr, i32 } %4581, { ptr, ptr, ptr, i32 } %4581, ptr nonnull %2)
  %4591 = icmp eq i32 %4590, %4452
  %4592 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4593 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4594 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract57.i923)
  %4595 = getelementptr i8, ptr %4586, i64 48
  %4596 = load ptr, ptr %4595, align 8
  %4597 = call ptr %4596({ ptr, ptr, ptr, i32 } %4581, ptr nonnull %2)
  %4598 = call { ptr, i160 } %4597({ ptr, ptr, ptr, i32 } %4581, { ptr, ptr, ptr, i32 } %4581, ptr nonnull %2)
  %4599 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4600 = load ptr, ptr %275, align 8
  %4601 = call i1 %4600({ ptr, i160 } %4598, { ptr, i160 } %4449)
  %4602 = and i1 %4591, %4601
  br i1 %4602, label %HashMap_get_keyK.exit968, label %HashMap_get_keyK.exit968.thread

HashMap_get_keyK.exit968.thread:                  ; preds = %4575, %.critedge.i905
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0271.i866)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.1.i867)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i868)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2.i869)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %233)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %234)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0123.i870)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2124.i871)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0115.i872)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2116.i873)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %235)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %236)
  br label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit193

HashMap_get_keyK.exit968:                         ; preds = %4491, %4575
  %.pre-phi313.i942 = phi i64 [ %4501, %4491 ], [ %4585, %4575 ]
  %.pre-phi312.i943 = phi { ptr, ptr, ptr, i32 } [ %4497, %4491 ], [ %4581, %4575 ]
  %.reg2mem65.0.sroa.phi290.sroa.speculated.i944 = phi ptr [ %.fca.0.extract.i903, %4491 ], [ %.fca.0.extract57.i923, %4575 ]
  %.reg2mem59.0.sroa.phi120289.i945 = phi ptr [ %.sroa.1.i867, %4491 ], [ %.sroa.2124.i871, %4575 ]
  %.reg2mem59.0.sroa.phi117288.i946 = phi ptr [ %.sroa.0271.i866, %4491 ], [ %.sroa.0123.i870, %4575 ]
  %.reg2mem57.0.sroa.phi94287.i947 = phi ptr [ %.sroa.2.i869, %4491 ], [ %.sroa.2116.i873, %4575 ]
  %.reg2mem57.0.sroa.phi91286.i948 = phi ptr [ %.sroa.0.i868, %4491 ], [ %.sroa.0115.i872, %4575 ]
  %4603 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4604 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4605 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.reg2mem65.0.sroa.phi290.sroa.speculated.i944)
  %4606 = getelementptr ptr, ptr %.reg2mem65.0.sroa.phi290.sroa.speculated.i944, i64 %.pre-phi313.i942
  %4607 = getelementptr i8, ptr %4606, i64 56
  %4608 = load ptr, ptr %4607, align 8
  %4609 = call ptr %4608({ ptr, ptr, ptr, i32 } %.pre-phi312.i943, ptr nonnull %2)
  %4610 = call { ptr, i160 } %4609({ ptr, ptr, ptr, i32 } %.pre-phi312.i943, { ptr, ptr, ptr, i32 } %.pre-phi312.i943, ptr nonnull %2)
  %.fca.0.extract97.i949 = extractvalue { ptr, i160 } %4610, 0
  store ptr %.fca.0.extract97.i949, ptr %.reg2mem59.0.sroa.phi117288.i946, align 8
  %.fca.1.extract99.i950 = extractvalue { ptr, i160 } %4610, 1
  store i160 %.fca.1.extract99.i950, ptr %.reg2mem59.0.sroa.phi120289.i945, align 8
  store ptr %.fca.0.extract97.i949, ptr %.reg2mem57.0.sroa.phi91286.i948, align 8
  store i160 %.fca.1.extract99.i950, ptr %.reg2mem57.0.sroa.phi94287.i947, align 8
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0271.i866)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.1.i867)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i868)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2.i869)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %233)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %234)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0123.i870)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2124.i871)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0115.i872)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2116.i873)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %235)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %236)
  %4611 = icmp ne ptr %.fca.0.extract97.i949, @nil_typ
  %4612 = icmp ne ptr %.fca.0.extract97.i949, null
  %.not74 = and i1 %4611, %4612
  br i1 %.not74, label %4613, label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit193

4613:                                             ; preds = %HashMap_get_keyK.exit968
  %.sroa.2.8.extract.trunc = trunc i160 %.fca.1.extract99.i950 to i32
  %4614 = sext i32 %.sroa.2.8.extract.trunc to i64
  %4615 = add i64 %.reg2mem111.0312, %4614
  br label %4638

IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit193: ; preds = %HashMap_get_keyK.exit968.thread, %HashMap_get_keyK.exit968
  %result.i174 = call noalias dereferenceable_or_null(52) ptr @bump_malloc_inner(i64 noundef 52, ptr nonnull @current_ptr) #29
  %4616 = load <51 x i8>, ptr @xrmfr_Error_Nil_returned_during_random_hit_test_for_key_, align 64
  store <51 x i8> %4616, ptr %result.i174, align 64
  %result.i175 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  store ptr @String, ptr %265, align 8
  store ptr %result.i175, ptr %4438, align 8
  store i32 9, ptr %4439, align 8
  %4617 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %265)
  store ptr %result.i174, ptr %result.i175, align 8
  %4618 = getelementptr i8, ptr %result.i175, i64 8
  store i32 51, ptr %4618, align 4
  %4619 = getelementptr i8, ptr %result.i175, i64 12
  store i32 52, ptr %4619, align 4
  %4620 = load i160, ptr %4438, align 8
  %4621 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %.sroa.3.8.extract.trunc.i617 = trunc i160 %4620 to i64
  %4622 = inttoptr i64 %.sroa.3.8.extract.trunc.i617 to ptr
  %4623 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4624 = getelementptr i8, ptr %4622, i64 8
  %4625 = load i32, ptr %4624, align 4
  %4626 = add i32 %4625, 1
  %4627 = sext i32 %4626 to i64
  %result.i.i1609 = call noalias ptr @bump_malloc_inner(i64 noundef %4627, ptr nonnull @current_ptr) #29
  %4628 = load i32, ptr %4624, align 4
  %4629 = icmp sgt i32 %4628, 0
  br i1 %4629, label %.lr.ph.i1610, label %String_c_string_.exit1614

.lr.ph.i1610:                                     ; preds = %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit193
  %4630 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %4631 = load ptr, ptr %4622, align 8
  %4632 = zext nneg i32 %4628 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i1609, ptr align 1 %4631, i64 %4632, i1 false)
  br label %String_c_string_.exit1614

String_c_string_.exit1614:                        ; preds = %.lr.ph.i1610, %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit193
  %4633 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %4634 = sext i32 %4628 to i64
  %4635 = getelementptr i8, ptr %result.i.i1609, i64 %4634
  store i8 0, ptr %4635, align 1
  %puts.i633 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i1609)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %4636 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %.sroa.1.8.extract.trunc.i = trunc i160 %4448 to i32
  %4637 = call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i32_string, i32 %.sroa.1.8.extract.trunc.i)
  br label %4638

4638:                                             ; preds = %4613, %String_c_string_.exit1614
  %4639 = phi i1 [ %.reg2mem109.0311, %4613 ], [ false, %String_c_string_.exit1614 ]
  %.reg2mem105.0 = phi i64 [ %4615, %4613 ], [ %.reg2mem111.0312, %String_c_string_.exit1614 ]
  %4640 = add nuw nsw i32 %.reg2mem107.0310, 1
  %4641 = icmp slt i32 %4640, %4435
  br i1 %4641, label %4445, label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit233

IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit233: ; preds = %4638, %._crit_edge.thread, %._crit_edge
  %4642 = phi i64 [ %4436, %._crit_edge ], [ %4389, %._crit_edge.thread ], [ %4436, %4638 ]
  %.reg2mem133.0.lcssa450453 = phi i64 [ %.reg2mem133.0.lcssa450, %._crit_edge ], [ 0, %._crit_edge.thread ], [ %.reg2mem133.0.lcssa450, %4638 ]
  %4643 = phi i32 [ %4435, %._crit_edge ], [ %4388, %._crit_edge.thread ], [ %4435, %4638 ]
  %.reg2mem109.0.lcssa = phi i1 [ true, %._crit_edge ], [ true, %._crit_edge.thread ], [ %4639, %4638 ]
  %.reg2mem111.0.lcssa = phi i64 [ 0, %._crit_edge ], [ 0, %._crit_edge.thread ], [ %.reg2mem105.0, %4638 ]
  %4644 = call i64 @clock()
  %.not = icmp eq i64 %.reg2mem111.0.lcssa, %.reg2mem133.0.lcssa450453
  %4645 = select i1 %.not, i1 %.reg2mem109.0.lcssa, i1 false
  %result.i212 = call noalias dereferenceable_or_null(15) ptr @bump_malloc_inner(i64 noundef 15, ptr nonnull @current_ptr) #29
  store <14 x i8> <i8 71, i8 101, i8 116, i8 32, i8 82, i8 97, i8 110, i8 100, i8 111, i8 109, i8 32, i8 72, i8 105, i8 116>, ptr %result.i212, align 16
  %result.i213 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %4646 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %result.i213, 1
  %4647 = insertvalue { ptr, ptr, ptr, i32 } %4646, ptr undef, 2
  %4648 = insertvalue { ptr, ptr, ptr, i32 } %4647, i32 9, 3
  store ptr %result.i212, ptr %result.i213, align 8
  %4649 = getelementptr i8, ptr %result.i213, i64 8
  store i32 14, ptr %4649, align 4
  %4650 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %4651 = getelementptr i8, ptr %result.i213, i64 12
  store i32 15, ptr %4651, align 4
  %4652 = sub i64 %4644, %4642
  call void @print_benchmark_result({ ptr, ptr, ptr, i32 } %4648, i32 %4643, i64 %4652)
  %result.i214 = call noalias dereferenceable_or_null(19) ptr @bump_malloc_inner(i64 noundef 19, ptr nonnull @current_ptr) #29
  store <18 x i8> <i8 32, i8 32, i8 32, i8 32, i8 86, i8 101, i8 114, i8 105, i8 102, i8 105, i8 99, i8 97, i8 116, i8 105, i8 111, i8 110, i8 58, i8 32>, ptr %result.i214, align 32
  %result.i215 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %4653 = getelementptr inbounds i8, ptr %266, i64 8
  %4654 = getelementptr inbounds i8, ptr %266, i64 24
  store ptr @String, ptr %266, align 8
  store ptr %result.i215, ptr %4653, align 8
  store i32 9, ptr %4654, align 8
  %4655 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %266)
  store ptr %result.i214, ptr %result.i215, align 8
  %4656 = getelementptr i8, ptr %result.i215, i64 8
  store i32 18, ptr %4656, align 4
  %4657 = getelementptr i8, ptr %result.i215, i64 12
  store i32 19, ptr %4657, align 4
  %4658 = load i160, ptr %4653, align 8
  %4659 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %.sroa.3.8.extract.trunc.i639 = trunc i160 %4658 to i64
  %4660 = inttoptr i64 %.sroa.3.8.extract.trunc.i639 to ptr
  %4661 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4662 = getelementptr i8, ptr %4660, i64 8
  %4663 = load i32, ptr %4662, align 4
  %4664 = add i32 %4663, 1
  %4665 = sext i32 %4664 to i64
  %result.i.i1629 = call noalias ptr @bump_malloc_inner(i64 noundef %4665, ptr nonnull @current_ptr) #29
  %4666 = load i32, ptr %4662, align 4
  %4667 = icmp sgt i32 %4666, 0
  br i1 %4667, label %.lr.ph.i1630, label %String_c_string_.exit1634

.lr.ph.i1630:                                     ; preds = %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit233
  %4668 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %4669 = load ptr, ptr %4660, align 8
  %4670 = zext nneg i32 %4666 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i1629, ptr align 1 %4669, i64 %4670, i1 false)
  br label %String_c_string_.exit1634

String_c_string_.exit1634:                        ; preds = %.lr.ph.i1630, %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit233
  %4671 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %4672 = sext i32 %4666 to i64
  %4673 = getelementptr i8, ptr %result.i.i1629, i64 %4672
  store i8 0, ptr %4673, align 1
  %puts.i655 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i1629)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %result.i234 = call noalias dereferenceable_or_null(5) ptr @bump_malloc_inner(i64 noundef 5, ptr nonnull @current_ptr) #29
  %. = select i1 %4645, <4 x i8> <i8 80, i8 65, i8 83, i8 83>, <4 x i8> <i8 70, i8 65, i8 73, i8 76>
  %.468 = select i1 %4645, ptr %267, ptr %268
  store <4 x i8> %., ptr %result.i234, align 4
  %result.i255 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %.468.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v = select i1 %4645, ptr %267, ptr %268
  %.468.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel = getelementptr inbounds i8, ptr %.468.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v, i64 8
  %.468.sroa.sel679.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v = select i1 %4645, ptr %267, ptr %268
  %.468.sroa.sel679.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel = getelementptr inbounds i8, ptr %.468.sroa.sel679.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v, i64 24
  store ptr @String, ptr %.468, align 8
  store ptr %result.i255, ptr %.468.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  store i32 9, ptr %.468.sroa.sel679.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  %4674 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %.468)
  store ptr %result.i234, ptr %result.i255, align 8
  %4675 = getelementptr i8, ptr %result.i255, i64 8
  store i32 4, ptr %4675, align 4
  %4676 = getelementptr i8, ptr %result.i255, i64 12
  store i32 5, ptr %4676, align 4
  %4677 = load i160, ptr %.468.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  %4678 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %.sroa.3.8.extract.trunc.i659 = trunc i160 %4677 to i64
  %4679 = inttoptr i64 %.sroa.3.8.extract.trunc.i659 to ptr
  %4680 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4681 = getelementptr i8, ptr %4679, i64 8
  %4682 = load i32, ptr %4681, align 4
  %4683 = add i32 %4682, 1
  %4684 = sext i32 %4683 to i64
  %result.i.i1649 = call noalias ptr @bump_malloc_inner(i64 noundef %4684, ptr nonnull @current_ptr) #29
  %4685 = load i32, ptr %4681, align 4
  %4686 = icmp sgt i32 %4685, 0
  br i1 %4686, label %.lr.ph.i1650, label %String_c_string_.exit1654

.lr.ph.i1650:                                     ; preds = %String_c_string_.exit1634
  %4687 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %4688 = load ptr, ptr %4679, align 8
  %4689 = zext nneg i32 %4685 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i1649, ptr align 1 %4688, i64 %4689, i1 false)
  br label %String_c_string_.exit1654

String_c_string_.exit1654:                        ; preds = %.lr.ph.i1650, %String_c_string_.exit1634
  %4690 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %4691 = sext i32 %4685 to i64
  %4692 = getelementptr i8, ptr %result.i.i1649, i64 %4691
  store i8 0, ptr %4692, align 1
  %puts.i675 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i1649)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  ret void
}

define void @benchmark_get_random_miss(i32 %0) local_unnamed_addr {
  %2 = alloca [0 x ptr], align 8
  %3 = alloca [1 x ptr], align 8
  %4 = alloca { ptr }, align 8
  %5 = alloca [2 x ptr], align 8
  %6 = alloca { ptr, ptr }, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %.sroa.0680.i4909 = alloca ptr, align 8
  %10 = alloca i64, align 8
  %11 = alloca [1 x ptr], align 8
  %12 = alloca { ptr }, align 8
  %13 = alloca [2 x ptr], align 8
  %14 = alloca { ptr, ptr }, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %.sroa.0.i4911 = alloca ptr, align 8
  %18 = alloca i64, align 8
  %19 = alloca [1 x ptr], align 8
  %20 = alloca { ptr }, align 8
  %21 = alloca [2 x ptr], align 8
  %22 = alloca { ptr, ptr }, align 8
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %.sroa.0680.i4753 = alloca ptr, align 8
  %26 = alloca i64, align 8
  %27 = alloca [1 x ptr], align 8
  %28 = alloca { ptr }, align 8
  %29 = alloca [2 x ptr], align 8
  %30 = alloca { ptr, ptr }, align 8
  %31 = alloca i32, align 4
  %32 = alloca i32, align 4
  %33 = alloca i32, align 4
  %.sroa.0.i4755 = alloca ptr, align 8
  %34 = alloca i64, align 8
  %35 = alloca [1 x ptr], align 8
  %36 = alloca { ptr }, align 8
  %37 = alloca [2 x ptr], align 8
  %38 = alloca { ptr, ptr }, align 8
  %39 = alloca i32, align 4
  %40 = alloca i32, align 4
  %41 = alloca i32, align 4
  %.sroa.0680.i4597 = alloca ptr, align 8
  %42 = alloca i64, align 8
  %43 = alloca [1 x ptr], align 8
  %44 = alloca { ptr }, align 8
  %45 = alloca [2 x ptr], align 8
  %46 = alloca { ptr, ptr }, align 8
  %47 = alloca i32, align 4
  %48 = alloca i32, align 4
  %49 = alloca i32, align 4
  %.sroa.0.i4599 = alloca ptr, align 8
  %50 = alloca i64, align 8
  %51 = alloca [1 x ptr], align 8
  %52 = alloca { ptr }, align 8
  %53 = alloca [2 x ptr], align 8
  %54 = alloca { ptr, ptr }, align 8
  %55 = alloca i32, align 4
  %56 = alloca i32, align 4
  %57 = alloca i32, align 4
  %.sroa.0680.i4467 = alloca ptr, align 8
  %58 = alloca i64, align 8
  %59 = alloca [1 x ptr], align 8
  %60 = alloca { ptr }, align 8
  %61 = alloca [2 x ptr], align 8
  %62 = alloca { ptr, ptr }, align 8
  %63 = alloca i32, align 4
  %64 = alloca i32, align 4
  %65 = alloca i32, align 4
  %.sroa.0.i4468 = alloca ptr, align 8
  %66 = alloca i64, align 8
  %67 = alloca [1 x ptr], align 8
  %68 = alloca { ptr }, align 8
  %69 = alloca [2 x ptr], align 8
  %70 = alloca { ptr, ptr }, align 8
  %71 = alloca i32, align 4
  %72 = alloca i32, align 4
  %73 = alloca i32, align 4
  %.sroa.0680.i4251 = alloca ptr, align 8
  %74 = alloca i64, align 8
  %75 = alloca [1 x ptr], align 8
  %76 = alloca { ptr }, align 8
  %77 = alloca [2 x ptr], align 8
  %78 = alloca { ptr, ptr }, align 8
  %79 = alloca i32, align 4
  %80 = alloca i32, align 4
  %81 = alloca i32, align 4
  %.sroa.0.i4253 = alloca ptr, align 8
  %82 = alloca i64, align 8
  %83 = alloca [1 x ptr], align 8
  %84 = alloca { ptr }, align 8
  %85 = alloca [2 x ptr], align 8
  %86 = alloca { ptr, ptr }, align 8
  %87 = alloca i32, align 4
  %88 = alloca i32, align 4
  %89 = alloca i32, align 4
  %.sroa.0680.i4094 = alloca ptr, align 8
  %90 = alloca i64, align 8
  %91 = alloca [1 x ptr], align 8
  %92 = alloca { ptr }, align 8
  %93 = alloca [2 x ptr], align 8
  %94 = alloca { ptr, ptr }, align 8
  %95 = alloca i32, align 4
  %96 = alloca i32, align 4
  %97 = alloca i32, align 4
  %.sroa.0.i4096 = alloca ptr, align 8
  %98 = alloca i64, align 8
  %99 = alloca [1 x ptr], align 8
  %100 = alloca { ptr }, align 8
  %101 = alloca [2 x ptr], align 8
  %102 = alloca { ptr, ptr }, align 8
  %103 = alloca i32, align 4
  %104 = alloca i32, align 4
  %105 = alloca i32, align 4
  %.sroa.0680.i3937 = alloca ptr, align 8
  %106 = alloca i64, align 8
  %107 = alloca [1 x ptr], align 8
  %108 = alloca { ptr }, align 8
  %109 = alloca [2 x ptr], align 8
  %110 = alloca { ptr, ptr }, align 8
  %111 = alloca i32, align 4
  %112 = alloca i32, align 4
  %113 = alloca i32, align 4
  %.sroa.0.i3939 = alloca ptr, align 8
  %114 = alloca i64, align 8
  %115 = alloca [1 x ptr], align 8
  %116 = alloca { ptr }, align 8
  %117 = alloca [2 x ptr], align 8
  %118 = alloca { ptr, ptr }, align 8
  %119 = alloca i32, align 4
  %120 = alloca i32, align 4
  %121 = alloca i32, align 4
  %.sroa.0680.i3823 = alloca ptr, align 8
  %122 = alloca i64, align 8
  %123 = alloca [1 x ptr], align 8
  %124 = alloca { ptr }, align 8
  %125 = alloca [2 x ptr], align 8
  %126 = alloca { ptr, ptr }, align 8
  %127 = alloca i32, align 4
  %128 = alloca i32, align 4
  %129 = alloca i32, align 4
  %.sroa.0.i3824 = alloca ptr, align 8
  %130 = alloca i64, align 8
  %131 = alloca [1 x ptr], align 8
  %132 = alloca { ptr }, align 8
  %133 = alloca [1 x ptr], align 8
  %134 = alloca { ptr }, align 8
  %135 = alloca [1 x ptr], align 8
  %136 = alloca { ptr }, align 8
  %137 = alloca [1 x ptr], align 8
  %138 = alloca { ptr }, align 8
  %139 = alloca [1 x ptr], align 8
  %140 = alloca { ptr }, align 8
  %141 = alloca [1 x ptr], align 8
  %142 = alloca { ptr }, align 8
  %143 = alloca [1 x ptr], align 8
  %144 = alloca { ptr }, align 8
  %145 = alloca [1 x ptr], align 8
  %146 = alloca { ptr }, align 8
  %147 = alloca [1 x ptr], align 8
  %148 = alloca { ptr }, align 8
  %149 = alloca [1 x ptr], align 8
  %150 = alloca { ptr }, align 8
  %151 = alloca [1 x ptr], align 8
  %152 = alloca { ptr }, align 8
  %153 = alloca [1 x ptr], align 8
  %154 = alloca { ptr }, align 8
  %155 = alloca { ptr, ptr, ptr, i32 }, align 8
  %156 = alloca { ptr, ptr, ptr, i32 }, align 8
  %157 = alloca [1 x ptr], align 8
  %158 = alloca { ptr }, align 8
  %159 = alloca [2 x ptr], align 8
  %160 = alloca { ptr, ptr }, align 8
  %161 = alloca i32, align 4
  %162 = alloca i32, align 4
  %163 = alloca i32, align 4
  %.sroa.0680.i2551 = alloca ptr, align 8
  %164 = alloca i64, align 8
  %165 = alloca [1 x ptr], align 8
  %166 = alloca { ptr }, align 8
  %167 = alloca [2 x ptr], align 8
  %168 = alloca { ptr, ptr }, align 8
  %169 = alloca i32, align 4
  %170 = alloca i32, align 4
  %171 = alloca i32, align 4
  %.sroa.0.i2553 = alloca ptr, align 8
  %172 = alloca i64, align 8
  %173 = alloca { ptr, ptr, ptr, i32 }, align 8
  %174 = alloca { ptr, ptr, ptr, i32 }, align 8
  %175 = alloca [1 x ptr], align 8
  %176 = alloca { ptr }, align 8
  %177 = alloca [2 x ptr], align 8
  %178 = alloca { ptr, ptr }, align 8
  %179 = alloca i32, align 4
  %180 = alloca i32, align 4
  %181 = alloca i32, align 4
  %.sroa.0680.i2298 = alloca ptr, align 8
  %182 = alloca i64, align 8
  %183 = alloca [1 x ptr], align 8
  %184 = alloca { ptr }, align 8
  %185 = alloca [2 x ptr], align 8
  %186 = alloca { ptr, ptr }, align 8
  %187 = alloca i32, align 4
  %188 = alloca i32, align 4
  %189 = alloca i32, align 4
  %.sroa.0.i2299 = alloca ptr, align 8
  %190 = alloca i64, align 8
  %191 = alloca { ptr, ptr, ptr, i32 }, align 8
  %192 = alloca { ptr, ptr, ptr, i32 }, align 8
  %193 = alloca { ptr, ptr, ptr, i32 }, align 8
  %194 = alloca { ptr, ptr, ptr, i32 }, align 8
  %195 = alloca { ptr, ptr, ptr, i32 }, align 8
  %196 = alloca [1 x ptr], align 8
  %197 = alloca { ptr }, align 8
  %198 = alloca [2 x ptr], align 8
  %199 = alloca { ptr, ptr }, align 8
  %200 = alloca i32, align 4
  %201 = alloca i32, align 4
  %202 = alloca i32, align 4
  %.sroa.0680.i1624 = alloca ptr, align 8
  %203 = alloca i64, align 8
  %204 = alloca [1 x ptr], align 8
  %205 = alloca { ptr }, align 8
  %206 = alloca [2 x ptr], align 8
  %207 = alloca { ptr, ptr }, align 8
  %208 = alloca i32, align 4
  %209 = alloca i32, align 4
  %210 = alloca i32, align 4
  %.sroa.0.i1626 = alloca ptr, align 8
  %211 = alloca i64, align 8
  %212 = alloca { ptr, ptr, ptr, i32 }, align 8
  %213 = alloca { ptr, ptr, ptr, i32 }, align 8
  %214 = alloca [1 x ptr], align 8
  %215 = alloca { ptr }, align 8
  %216 = alloca [2 x ptr], align 8
  %217 = alloca { ptr, ptr }, align 8
  %218 = alloca i32, align 4
  %219 = alloca i32, align 4
  %220 = alloca i32, align 4
  %.sroa.0680.i = alloca ptr, align 8
  %221 = alloca i64, align 8
  %222 = alloca [1 x ptr], align 8
  %223 = alloca { ptr }, align 8
  %224 = alloca [2 x ptr], align 8
  %225 = alloca { ptr, ptr }, align 8
  %226 = alloca i32, align 4
  %227 = alloca i32, align 4
  %228 = alloca i32, align 4
  %.sroa.0.i1468 = alloca ptr, align 8
  %229 = alloca i64, align 8
  %230 = alloca { ptr, ptr, ptr, i32 }, align 8
  %231 = alloca { ptr, ptr, ptr, i32 }, align 8
  %232 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.sroa.0271.i1184 = alloca ptr, align 8
  %.sroa.1.i1185 = alloca i160, align 8
  %.sroa.0.i1186 = alloca ptr, align 8
  %.sroa.2.i1187 = alloca i160, align 8
  %233 = alloca [1 x ptr], align 8
  %234 = alloca { ptr }, align 8
  %.sroa.0123.i1188 = alloca ptr, align 8
  %.sroa.2124.i1189 = alloca i160, align 8
  %.sroa.0115.i1190 = alloca ptr, align 8
  %.sroa.2116.i1191 = alloca i160, align 8
  %235 = alloca [1 x ptr], align 8
  %236 = alloca { ptr }, align 8
  %237 = alloca { ptr, ptr, ptr, i32 }, align 8
  %238 = alloca [2 x ptr], align 8
  %239 = alloca { ptr, ptr }, align 8
  %240 = alloca [1 x ptr], align 8
  %241 = alloca { ptr }, align 8
  %242 = alloca { ptr, ptr, ptr, i32 }, align 8
  %243 = alloca [2 x ptr], align 8
  %244 = alloca { ptr, ptr }, align 8
  %245 = alloca { ptr, ptr, ptr, i32 }, align 8
  %246 = alloca [1 x ptr], align 8
  %247 = alloca { ptr }, align 8
  %.sroa.0271.i695 = alloca ptr, align 8
  %.sroa.1.i696 = alloca i160, align 8
  %.sroa.0.i697 = alloca ptr, align 8
  %.sroa.2.i698 = alloca i160, align 8
  %248 = alloca [1 x ptr], align 8
  %249 = alloca { ptr }, align 8
  %.sroa.0123.i699 = alloca ptr, align 8
  %.sroa.2124.i700 = alloca i160, align 8
  %.sroa.0115.i701 = alloca ptr, align 8
  %.sroa.2116.i702 = alloca i160, align 8
  %250 = alloca [1 x ptr], align 8
  %251 = alloca { ptr }, align 8
  %252 = alloca { ptr, ptr, ptr, i32 }, align 8
  %253 = alloca [2 x ptr], align 8
  %254 = alloca { ptr, ptr }, align 8
  %255 = alloca [1 x ptr], align 8
  %256 = alloca { ptr }, align 8
  %257 = alloca { ptr, ptr, ptr, i32 }, align 8
  %258 = alloca [2 x ptr], align 8
  %259 = alloca { ptr, ptr }, align 8
  %260 = alloca { ptr, ptr, ptr, i32 }, align 8
  %261 = alloca [1 x ptr], align 8
  %262 = alloca { ptr }, align 8
  %.sroa.0271.i = alloca ptr, align 8
  %.sroa.1.i = alloca i160, align 8
  %.sroa.0.i = alloca ptr, align 8
  %.sroa.2.i = alloca i160, align 8
  %263 = alloca [1 x ptr], align 8
  %264 = alloca { ptr }, align 8
  %.sroa.0123.i = alloca ptr, align 8
  %.sroa.2124.i = alloca i160, align 8
  %.sroa.0115.i = alloca ptr, align 8
  %.sroa.2116.i = alloca i160, align 8
  %265 = alloca [1 x ptr], align 8
  %266 = alloca { ptr }, align 8
  %oldProtect.i142 = alloca i32, align 4
  %oldProtect.i138 = alloca i32, align 4
  %oldProtect.i103 = alloca i32, align 4
  %oldProtect.i = alloca i32, align 4
  %.sroa.078.sroa.0 = alloca i8, align 8
  %267 = alloca [2 x ptr], align 8
  %268 = alloca { ptr, ptr, ptr, i32 }, align 8
  %269 = alloca { ptr, ptr, ptr, i32 }, align 8
  %270 = alloca { ptr, ptr, ptr, i32 }, align 8
  %271 = alloca { ptr, ptr, ptr, i32 }, align 8
  %272 = alloca { ptr, ptr, ptr, i32 }, align 8
  %273 = alloca { ptr, ptr, ptr, i32 }, align 8
  %274 = alloca { ptr, ptr, ptr, i32 }, align 8
  %275 = alloca { ptr, ptr, ptr, i32 }, align 8
  %result.i = tail call noalias dereferenceable_or_null(120) ptr @bump_malloc_inner(i64 noundef 120, ptr nonnull @current_ptr) #29
  store ptr @_parameterization_Ptri32, ptr %result.i, align 8
  %276 = getelementptr i8, ptr %result.i, i64 8
  store ptr @_parameterization_Ptri32, ptr %276, align 8
  %277 = getelementptr i8, ptr %result.i, i64 16
  store ptr @_parameterization_PairPtri32._Ptri32, ptr %277, align 8
  %278 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %result.i)
  %result.i100 = tail call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %oldProtect.i)
  %result.i101 = call i32 @VirtualProtect(ptr %result.i100, i64 16, i32 64, ptr nonnull %oldProtect.i) #16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %oldProtect.i)
  call void @llvm.init.trampoline(ptr %result.i100, ptr nonnull @bymbwiydvb, ptr nonnull @i32_hasher)
  %ret.i = call ptr @llvm.adjust.trampoline(ptr readonly %result.i100) #31
  %279 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i100)
  %result.i102 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %oldProtect.i103)
  %result.i104 = call i32 @VirtualProtect(ptr %result.i102, i64 16, i32 64, ptr nonnull %oldProtect.i103) #16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %oldProtect.i103)
  call void @llvm.init.trampoline(ptr %result.i102, ptr nonnull @sebxllzgzj, ptr nonnull @i32_eq)
  %ret.i105 = call ptr @llvm.adjust.trampoline(ptr readonly %result.i102) #31
  %280 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i102)
  %281 = getelementptr i8, ptr %result.i, i64 96
  store ptr %ret.i, ptr %281, align 8
  %282 = getelementptr i8, ptr %result.i, i64 104
  store ptr %ret.i105, ptr %282, align 8
  %result.i.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %283 = getelementptr i8, ptr %result.i.i, i64 16
  store ptr @_parameterization_Nil, ptr %283, align 8
  %result.i4.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %284 = getelementptr i8, ptr %result.i4.i, i64 16
  store ptr @_parameterization_Ptri32, ptr %284, align 8
  %285 = getelementptr i8, ptr %result.i4.i, i64 8
  store ptr @_parameterization_Ptri32, ptr %285, align 8
  %286 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i4.i)
  store ptr @Entry, ptr %result.i4.i, align 8
  %287 = getelementptr i8, ptr %result.i.i, i64 8
  store ptr %result.i4.i, ptr %287, align 8
  %288 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i)
  store ptr @union_typ, ptr %result.i.i, align 8
  %result.i5.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i, ptr %result.i5.i, align 8
  %289 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i5.i)
  %290 = getelementptr i8, ptr %result.i5.i, i64 16
  store i32 8, ptr %290, align 4
  %291 = getelementptr i8, ptr %result.i5.i, i64 20
  store i32 8, ptr %291, align 4
  %result.i.i.i = call noalias dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nonnull @current_ptr) #29
  %292 = getelementptr i8, ptr %result.i5.i, i64 8
  store ptr %result.i.i.i, ptr %292, align 8
  %293 = getelementptr i8, ptr %result.i, i64 24
  store ptr @Array, ptr %293, align 8
  %294 = getelementptr i8, ptr %result.i, i64 32
  store ptr %result.i5.i, ptr %294, align 8
  %295 = getelementptr i8, ptr %result.i, i64 48
  store i32 9, ptr %295, align 4
  %result.i20.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %296 = getelementptr i8, ptr %result.i20.i, i64 16
  store ptr @_parameterization_Nil, ptr %296, align 8
  %result.i21.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %297 = getelementptr i8, ptr %result.i21.i, i64 16
  store ptr @_parameterization_Ptri32, ptr %297, align 8
  %298 = getelementptr i8, ptr %result.i21.i, i64 8
  store ptr @_parameterization_Ptri32, ptr %298, align 8
  %299 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i21.i)
  store ptr @Entry, ptr %result.i21.i, align 8
  %300 = getelementptr i8, ptr %result.i20.i, i64 8
  store ptr %result.i21.i, ptr %300, align 8
  %301 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i20.i)
  store ptr @union_typ, ptr %result.i20.i, align 8
  %result.i22.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i20.i, ptr %result.i22.i, align 8
  %302 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i22.i)
  %303 = getelementptr i8, ptr %result.i22.i, i64 16
  store i32 8, ptr %303, align 4
  %304 = getelementptr i8, ptr %result.i22.i, i64 20
  store i32 8, ptr %304, align 4
  %result.i.i97.i = call noalias dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nonnull @current_ptr) #29
  %305 = getelementptr i8, ptr %result.i22.i, i64 8
  store ptr %result.i.i97.i, ptr %305, align 8
  %306 = getelementptr i8, ptr %result.i, i64 56
  store ptr @Array, ptr %306, align 8
  %307 = getelementptr i8, ptr %result.i, i64 64
  store ptr %result.i22.i, ptr %307, align 8
  %308 = getelementptr i8, ptr %result.i, i64 80
  store i32 9, ptr %308, align 4
  %309 = getelementptr i8, ptr %result.i, i64 112
  store i32 100, ptr %309, align 4
  %result.i106 = call noalias dereferenceable_or_null(4) ptr @bump_malloc_inner(i64 noundef 4, ptr nonnull @current_ptr) #29
  store i32 789, ptr %result.i106, align 4
  %result.i121 = call noalias dereferenceable_or_null(4) ptr @bump_malloc_inner(i64 noundef 4, ptr nonnull @current_ptr) #29
  %310 = call ptr @llvm.invariant.start.p0(i64 40, ptr nonnull @PRNG)
  store i32 987, ptr %result.i121, align 4
  %result.i136 = call noalias dereferenceable_or_null(120) ptr @bump_malloc_inner(i64 noundef 120, ptr nonnull @current_ptr) #29
  store ptr @_parameterization_Ptri32, ptr %result.i136, align 8
  %311 = getelementptr i8, ptr %result.i136, i64 8
  store ptr @_parameterization_Ptri1, ptr %311, align 8
  %312 = getelementptr i8, ptr %result.i136, i64 16
  store ptr @_parameterization_PairPtri32._Ptri1, ptr %312, align 8
  %313 = call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %result.i136)
  %result.i137 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %oldProtect.i138)
  %result.i139 = call i32 @VirtualProtect(ptr %result.i137, i64 16, i32 64, ptr nonnull %oldProtect.i138) #16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %oldProtect.i138)
  call void @llvm.init.trampoline(ptr %result.i137, ptr nonnull @puzwrxvkwk, ptr nonnull @i32_hasher)
  %ret.i140 = call ptr @llvm.adjust.trampoline(ptr readonly %result.i137) #31
  %314 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i137)
  %result.i141 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %oldProtect.i142)
  %result.i143 = call i32 @VirtualProtect(ptr %result.i141, i64 16, i32 64, ptr nonnull %oldProtect.i142) #16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %oldProtect.i142)
  call void @llvm.init.trampoline(ptr %result.i141, ptr nonnull @xnibmcfper, ptr nonnull @i32_eq)
  %ret.i144 = call ptr @llvm.adjust.trampoline(ptr readonly %result.i141) #31
  %315 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i141)
  %316 = getelementptr i8, ptr %result.i136, i64 96
  store ptr %ret.i140, ptr %316, align 8
  %317 = getelementptr i8, ptr %result.i136, i64 104
  store ptr %ret.i144, ptr %317, align 8
  %result.i.i616 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %318 = getelementptr i8, ptr %result.i.i616, i64 16
  store ptr @_parameterization_Nil, ptr %318, align 8
  %result.i4.i617 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %319 = getelementptr i8, ptr %result.i4.i617, i64 16
  store ptr @_parameterization_Ptri1, ptr %319, align 8
  %320 = getelementptr i8, ptr %result.i4.i617, i64 8
  store ptr @_parameterization_Ptri32, ptr %320, align 8
  %321 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i4.i617)
  store ptr @Entry, ptr %result.i4.i617, align 8
  %322 = getelementptr i8, ptr %result.i.i616, i64 8
  store ptr %result.i4.i617, ptr %322, align 8
  %323 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i616)
  store ptr @union_typ, ptr %result.i.i616, align 8
  %result.i5.i618 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i616, ptr %result.i5.i618, align 8
  %324 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i5.i618)
  %325 = getelementptr i8, ptr %result.i5.i618, i64 16
  store i32 8, ptr %325, align 4
  %326 = getelementptr i8, ptr %result.i5.i618, i64 20
  store i32 8, ptr %326, align 4
  %result.i.i.i619 = call noalias dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nonnull @current_ptr) #29
  %327 = getelementptr i8, ptr %result.i5.i618, i64 8
  store ptr %result.i.i.i619, ptr %327, align 8
  %328 = getelementptr i8, ptr %result.i136, i64 24
  store ptr @Array, ptr %328, align 8
  %329 = getelementptr i8, ptr %result.i136, i64 32
  store ptr %result.i5.i618, ptr %329, align 8
  %330 = getelementptr i8, ptr %result.i136, i64 40
  %331 = getelementptr i8, ptr %result.i136, i64 48
  store i32 9, ptr %331, align 4
  %result.i20.i620 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %332 = getelementptr i8, ptr %result.i20.i620, i64 16
  store ptr @_parameterization_Nil, ptr %332, align 8
  %result.i21.i621 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %333 = getelementptr i8, ptr %result.i21.i621, i64 16
  store ptr @_parameterization_Ptri1, ptr %333, align 8
  %334 = getelementptr i8, ptr %result.i21.i621, i64 8
  store ptr @_parameterization_Ptri32, ptr %334, align 8
  %335 = getelementptr i8, ptr %result.i21.i621, i64 24
  store ptr null, ptr %335, align 8
  %336 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i21.i621)
  store ptr @Entry, ptr %result.i21.i621, align 8
  %337 = getelementptr i8, ptr %result.i20.i620, i64 8
  store ptr %result.i21.i621, ptr %337, align 8
  %338 = getelementptr i8, ptr %result.i20.i620, i64 24
  store ptr null, ptr %338, align 8
  %339 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i20.i620)
  store ptr @union_typ, ptr %result.i20.i620, align 8
  %result.i22.i622 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i20.i620, ptr %result.i22.i622, align 8
  %340 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i22.i622)
  %341 = getelementptr i8, ptr %result.i22.i622, i64 16
  store i32 8, ptr %341, align 4
  %342 = getelementptr i8, ptr %result.i22.i622, i64 20
  store i32 8, ptr %342, align 4
  %result.i.i97.i623 = call noalias dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nonnull @current_ptr) #29
  %343 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %344 = getelementptr i8, ptr %result.i22.i622, i64 8
  store ptr %result.i.i97.i623, ptr %344, align 8
  %345 = getelementptr i8, ptr %result.i136, i64 56
  store ptr @Array, ptr %345, align 8
  %346 = getelementptr i8, ptr %result.i136, i64 64
  store ptr %result.i22.i622, ptr %346, align 8
  %347 = getelementptr i8, ptr %result.i136, i64 72
  %348 = getelementptr i8, ptr %result.i136, i64 80
  store i32 9, ptr %348, align 4
  %349 = getelementptr i8, ptr %result.i136, i64 88
  store i32 0, ptr %349, align 4
  %350 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %351 = getelementptr i8, ptr %result.i136, i64 112
  store i32 100, ptr %351, align 4
  %352 = mul i32 %0, 10
  %353 = icmp sgt i32 %0, 0
  %354 = icmp sgt i32 %352, 0
  %355 = and i1 %353, %354
  br i1 %355, label %.lr.ph, label %._crit_edge._crit_edge

.lr.ph:                                           ; preds = %1
  %356 = getelementptr inbounds i8, ptr %267, i64 8
  %.promoted = load ptr, ptr %356, align 8
  %357 = getelementptr inbounds i8, ptr %260, i64 8
  %358 = getelementptr inbounds i8, ptr %260, i64 24
  %359 = getelementptr inbounds i8, ptr %260, i64 16
  %360 = getelementptr inbounds i8, ptr %257, i64 8
  %361 = getelementptr inbounds i8, ptr %257, i64 24
  %362 = getelementptr inbounds i8, ptr %257, i64 16
  %363 = getelementptr inbounds i8, ptr %258, i64 8
  %364 = getelementptr inbounds i8, ptr %259, i64 8
  %365 = getelementptr inbounds i8, ptr %252, i64 8
  %366 = getelementptr inbounds i8, ptr %252, i64 24
  %367 = getelementptr inbounds i8, ptr %252, i64 16
  %368 = getelementptr inbounds i8, ptr %253, i64 8
  %369 = getelementptr inbounds i8, ptr %254, i64 8
  %370 = getelementptr inbounds i8, ptr %245, i64 8
  %371 = getelementptr inbounds i8, ptr %245, i64 24
  %372 = getelementptr inbounds i8, ptr %245, i64 16
  %373 = getelementptr inbounds i8, ptr %242, i64 8
  %374 = getelementptr inbounds i8, ptr %242, i64 24
  %375 = getelementptr inbounds i8, ptr %242, i64 16
  %376 = getelementptr inbounds i8, ptr %243, i64 8
  %377 = getelementptr inbounds i8, ptr %244, i64 8
  %378 = getelementptr inbounds i8, ptr %237, i64 8
  %379 = getelementptr inbounds i8, ptr %237, i64 24
  %380 = getelementptr inbounds i8, ptr %237, i64 16
  %381 = getelementptr inbounds i8, ptr %238, i64 8
  %382 = getelementptr inbounds i8, ptr %239, i64 8
  %383 = getelementptr i8, ptr %result.i, i64 40
  %384 = getelementptr i8, ptr %result.i, i64 72
  %385 = getelementptr i8, ptr %result.i, i64 88
  %386 = getelementptr inbounds i8, ptr %231, i64 8
  %387 = getelementptr inbounds i8, ptr %231, i64 24
  %388 = getelementptr inbounds i8, ptr %231, i64 16
  %389 = getelementptr inbounds i8, ptr %232, i64 8
  %390 = getelementptr inbounds i8, ptr %232, i64 24
  %391 = getelementptr inbounds i8, ptr %232, i64 16
  %392 = getelementptr inbounds i8, ptr %230, i64 8
  %393 = getelementptr inbounds i8, ptr %230, i64 16
  %394 = getelementptr inbounds i8, ptr %230, i64 24
  %395 = getelementptr inbounds i8, ptr %224, i64 8
  %396 = getelementptr inbounds i8, ptr %225, i64 8
  %397 = getelementptr inbounds i8, ptr %216, i64 8
  %398 = getelementptr inbounds i8, ptr %217, i64 8
  %399 = getelementptr inbounds i8, ptr %212, i64 8
  %400 = getelementptr inbounds i8, ptr %212, i64 24
  %401 = getelementptr inbounds i8, ptr %212, i64 16
  %402 = getelementptr inbounds i8, ptr %213, i64 8
  %403 = getelementptr inbounds i8, ptr %213, i64 24
  %404 = getelementptr inbounds i8, ptr %213, i64 16
  %405 = getelementptr inbounds i8, ptr %206, i64 8
  %406 = getelementptr inbounds i8, ptr %207, i64 8
  %407 = getelementptr inbounds i8, ptr %198, i64 8
  %408 = getelementptr inbounds i8, ptr %199, i64 8
  %409 = getelementptr inbounds i8, ptr %194, i64 8
  %410 = getelementptr inbounds i8, ptr %194, i64 24
  %411 = getelementptr inbounds i8, ptr %194, i64 16
  %412 = getelementptr inbounds i8, ptr %195, i64 8
  %413 = getelementptr inbounds i8, ptr %195, i64 24
  %414 = getelementptr inbounds i8, ptr %195, i64 16
  %415 = getelementptr inbounds i8, ptr %192, i64 8
  %416 = getelementptr inbounds i8, ptr %192, i64 24
  %417 = getelementptr inbounds i8, ptr %192, i64 16
  %418 = getelementptr inbounds i8, ptr %193, i64 8
  %419 = getelementptr inbounds i8, ptr %193, i64 24
  %420 = getelementptr inbounds i8, ptr %193, i64 16
  %421 = getelementptr inbounds i8, ptr %191, i64 8
  %422 = getelementptr inbounds i8, ptr %191, i64 16
  %423 = getelementptr inbounds i8, ptr %191, i64 24
  %424 = getelementptr inbounds i8, ptr %185, i64 8
  %425 = getelementptr inbounds i8, ptr %186, i64 8
  %426 = getelementptr inbounds i8, ptr %177, i64 8
  %427 = getelementptr inbounds i8, ptr %178, i64 8
  %428 = getelementptr inbounds i8, ptr %173, i64 8
  %429 = getelementptr inbounds i8, ptr %173, i64 24
  %430 = getelementptr inbounds i8, ptr %173, i64 16
  %431 = getelementptr inbounds i8, ptr %174, i64 8
  %432 = getelementptr inbounds i8, ptr %174, i64 24
  %433 = getelementptr inbounds i8, ptr %174, i64 16
  %434 = getelementptr inbounds i8, ptr %167, i64 8
  %435 = getelementptr inbounds i8, ptr %168, i64 8
  %436 = getelementptr inbounds i8, ptr %159, i64 8
  %437 = getelementptr inbounds i8, ptr %160, i64 8
  %438 = getelementptr inbounds i8, ptr %155, i64 8
  %439 = getelementptr inbounds i8, ptr %155, i64 24
  %440 = getelementptr inbounds i8, ptr %155, i64 16
  %441 = getelementptr inbounds i8, ptr %156, i64 8
  %442 = getelementptr inbounds i8, ptr %156, i64 24
  %443 = getelementptr inbounds i8, ptr %156, i64 16
  %444 = insertvalue { ptr, ptr, ptr, i32 } { ptr @HashMap, ptr undef, ptr undef, i32 undef }, ptr %result.i136, 1
  %445 = insertvalue { ptr, ptr, ptr, i32 } %444, ptr undef, 2
  %446 = insertvalue { ptr, ptr, ptr, i32 } %445, i32 9, 3
  %447 = insertvalue { ptr, ptr, ptr, i32 } { ptr @HashMap, ptr undef, ptr undef, i32 undef }, ptr %result.i, 1
  %448 = insertvalue { ptr, ptr, ptr, i32 } %447, ptr undef, 2
  %449 = insertvalue { ptr, ptr, ptr, i32 } %448, i32 9, 3
  %450 = getelementptr inbounds i8, ptr %125, i64 8
  %451 = getelementptr inbounds i8, ptr %126, i64 8
  %452 = getelementptr inbounds i8, ptr %117, i64 8
  %453 = getelementptr inbounds i8, ptr %118, i64 8
  %454 = getelementptr inbounds i8, ptr %109, i64 8
  %455 = getelementptr inbounds i8, ptr %110, i64 8
  %456 = getelementptr inbounds i8, ptr %101, i64 8
  %457 = getelementptr inbounds i8, ptr %102, i64 8
  %458 = getelementptr inbounds i8, ptr %93, i64 8
  %459 = getelementptr inbounds i8, ptr %94, i64 8
  %460 = getelementptr inbounds i8, ptr %85, i64 8
  %461 = getelementptr inbounds i8, ptr %86, i64 8
  %462 = getelementptr inbounds i8, ptr %77, i64 8
  %463 = getelementptr inbounds i8, ptr %78, i64 8
  %464 = getelementptr inbounds i8, ptr %69, i64 8
  %465 = getelementptr inbounds i8, ptr %70, i64 8
  %466 = getelementptr inbounds i8, ptr %61, i64 8
  %467 = getelementptr inbounds i8, ptr %62, i64 8
  %468 = getelementptr inbounds i8, ptr %53, i64 8
  %469 = getelementptr inbounds i8, ptr %54, i64 8
  %470 = getelementptr inbounds i8, ptr %45, i64 8
  %471 = getelementptr inbounds i8, ptr %46, i64 8
  %472 = getelementptr inbounds i8, ptr %37, i64 8
  %473 = getelementptr inbounds i8, ptr %38, i64 8
  %474 = getelementptr inbounds i8, ptr %29, i64 8
  %475 = getelementptr inbounds i8, ptr %30, i64 8
  %476 = getelementptr inbounds i8, ptr %21, i64 8
  %477 = getelementptr inbounds i8, ptr %22, i64 8
  %478 = getelementptr inbounds i8, ptr %13, i64 8
  %479 = getelementptr inbounds i8, ptr %14, i64 8
  %480 = getelementptr inbounds i8, ptr %5, i64 8
  %481 = getelementptr inbounds i8, ptr %6, i64 8
  br label %482

482:                                              ; preds = %.lr.ph, %._crit_edge
  %_parameterization_Ptri1 = phi ptr [ %.promoted, %.lr.ph ], [ %_parameterization_Ptri1583, %._crit_edge ]
  %.reg2mem170.0412 = phi i32 [ 0, %.lr.ph ], [ %.reg2mem166.0, %._crit_edge ]
  %.reg2mem168.0411 = phi i32 [ 0, %.lr.ph ], [ %4378, %._crit_edge ]
  %483 = load i32, ptr %result.i106, align 4
  %484 = mul i32 %483, 1103515245
  %485 = add i32 %484, 12345
  %486 = and i32 %485, 2147483647
  store i32 %486, ptr %result.i106, align 4
  %487 = call ptr @llvm.invariant.start.p0(i64 40, ptr nonnull @PRNG)
  %.sroa.098.0.insert.ext = zext nneg i32 %486 to i160
  %488 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.098.0.insert.ext, 1
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0271.i)
  call void @llvm.lifetime.start.p0(i64 20, ptr nonnull %.sroa.1.i)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i)
  call void @llvm.lifetime.start.p0(i64 20, ptr nonnull %.sroa.2.i)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %263)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %264)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0123.i)
  call void @llvm.lifetime.start.p0(i64 20, ptr nonnull %.sroa.2124.i)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0115.i)
  call void @llvm.lifetime.start.p0(i64 20, ptr nonnull %.sroa.2116.i)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %265)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %266)
  %489 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %490 = load ptr, ptr %316, align 8
  %491 = call i32 %490({ ptr, i160 } %488)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %492 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %493 = load ptr, ptr %328, align 8
  %494 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %493, 0
  %495 = load ptr, ptr %329, align 8
  %496 = insertvalue { ptr, ptr, ptr, i32 } %494, ptr %495, 1
  %497 = load ptr, ptr %330, align 8
  %498 = insertvalue { ptr, ptr, ptr, i32 } %496, ptr %497, 2
  %499 = load i32, ptr %331, align 4
  %500 = insertvalue { ptr, ptr, ptr, i32 } %498, i32 %499, 3
  %hash_coef_ptr.i.i10.i = getelementptr i8, ptr %493, i64 8
  %tbl_size_ptr.i.i11.i = getelementptr i8, ptr %493, i64 16
  %offset_tbl_ptr.i.i12.i = getelementptr i8, ptr %493, i64 40
  %hash_coef.i.i13.i = load i64, ptr %hash_coef_ptr.i.i10.i, align 4
  %tbl_size.i.i14.i = load i64, ptr %tbl_size_ptr.i.i11.i, align 4
  %offset_tbl.i.i15.i = load ptr, ptr %offset_tbl_ptr.i.i12.i, align 8
  %product.i.i.i16.i = mul i64 %hash_coef.i.i13.i, -5261542750394134544
  %shifted.i.i.i17.i = lshr i64 %product.i.i.i16.i, 32
  %xored.i.i.i18.i = xor i64 %shifted.i.i.i17.i, %product.i.i.i16.i
  %hash.i.i.i19.i = and i64 %xored.i.i.i18.i, %tbl_size.i.i14.i
  %offset_ptr.i.i20.i = getelementptr i32, ptr %offset_tbl.i.i15.i, i64 %hash.i.i.i19.i
  %offset.i.i21.i = load i32, ptr %offset_ptr.i.i20.i, align 4
  %eq.i.i1343 = icmp eq i32 %499, %offset.i.i21.i
  call void @llvm.assume(i1 %eq.i.i1343) #30
  %501 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %502 = call ptr @llvm.invariant.start.p0(i64 600, ptr %493)
  %503 = sext i32 %499 to i64
  %504 = getelementptr ptr, ptr %493, i64 %503
  %505 = getelementptr i8, ptr %504, i64 64
  %506 = load ptr, ptr %505, align 8
  %507 = call ptr %506({ ptr, ptr, ptr, i32 } %500, ptr nonnull %2)
  %508 = call i32 %507({ ptr, ptr, ptr, i32 } %500, { ptr, ptr, ptr, i32 } %500, ptr nonnull %2)
  %509 = add i32 %508, -1
  %510 = and i32 %509, %491
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %511 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %512 = load ptr, ptr %328, align 8
  %513 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %512, 0
  %514 = load ptr, ptr %329, align 8
  %515 = insertvalue { ptr, ptr, ptr, i32 } %513, ptr %514, 1
  %516 = load ptr, ptr %330, align 8
  %517 = insertvalue { ptr, ptr, ptr, i32 } %515, ptr %516, 2
  %518 = load i32, ptr %331, align 4
  %519 = insertvalue { ptr, ptr, ptr, i32 } %517, i32 %518, 3
  %hash_coef_ptr.i.i130.i = getelementptr i8, ptr %512, i64 8
  %tbl_size_ptr.i.i131.i = getelementptr i8, ptr %512, i64 16
  %offset_tbl_ptr.i.i132.i = getelementptr i8, ptr %512, i64 40
  %hash_coef.i.i133.i = load i64, ptr %hash_coef_ptr.i.i130.i, align 4
  %tbl_size.i.i134.i = load i64, ptr %tbl_size_ptr.i.i131.i, align 4
  %offset_tbl.i.i135.i = load ptr, ptr %offset_tbl_ptr.i.i132.i, align 8
  %product.i.i.i136.i = mul i64 %hash_coef.i.i133.i, -5261542750394134544
  %shifted.i.i.i137.i = lshr i64 %product.i.i.i136.i, 32
  %xored.i.i.i138.i = xor i64 %shifted.i.i.i137.i, %product.i.i.i136.i
  %hash.i.i.i139.i = and i64 %xored.i.i.i138.i, %tbl_size.i.i134.i
  %offset_ptr.i.i140.i = getelementptr i32, ptr %offset_tbl.i.i135.i, i64 %hash.i.i.i139.i
  %offset.i.i141.i = load i32, ptr %offset_ptr.i.i140.i, align 4
  %eq.i.i = icmp eq i32 %518, %offset.i.i141.i
  call void @llvm.assume(i1 %eq.i.i) #30
  store ptr @_parameterization_Ptri32, ptr %265, align 8
  %520 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %265)
  %521 = call ptr @llvm.invariant.start.p0(i64 600, ptr %512)
  %522 = sext i32 %518 to i64
  %523 = getelementptr ptr, ptr %512, i64 %522
  %524 = getelementptr i8, ptr %523, i64 120
  %525 = load ptr, ptr %524, align 8
  store ptr @i32_typ, ptr %266, align 8
  %526 = call ptr %525({ ptr, ptr, ptr, i32 } %519, ptr nonnull %266)
  %527 = call { ptr, i160 } %526({ ptr, ptr, ptr, i32 } %519, { ptr, ptr, ptr, i32 } %519, ptr nonnull %265, i32 %510)
  %.fca.0.extract.i648 = extractvalue { ptr, i160 } %527, 0
  %528 = icmp ne ptr %.fca.0.extract.i648, @nil_typ
  %529 = icmp ne ptr %.fca.0.extract.i648, null
  %.not126.i = and i1 %528, %529
  br i1 %.not126.i, label %530, label %.critedge.i

530:                                              ; preds = %482
  %.fca.1.extract.i = extractvalue { ptr, i160 } %527, 1
  %.sroa.5.8.extract.trunc.i = trunc i160 %.fca.1.extract.i to i64
  %531 = inttoptr i64 %.sroa.5.8.extract.trunc.i to ptr
  %.sroa.9.8.extract.shift.i = lshr i160 %.fca.1.extract.i, 64
  %.sroa.9.8.extract.trunc.i = trunc i160 %.sroa.9.8.extract.shift.i to i64
  %532 = inttoptr i64 %.sroa.9.8.extract.trunc.i to ptr
  %hash_coef_ptr.i.i144.i = getelementptr i8, ptr %.fca.0.extract.i648, i64 8
  %tbl_size_ptr.i.i145.i = getelementptr i8, ptr %.fca.0.extract.i648, i64 16
  %offset_tbl_ptr.i.i146.i = getelementptr i8, ptr %.fca.0.extract.i648, i64 40
  %hash_coef.i.i147.i = load i64, ptr %hash_coef_ptr.i.i144.i, align 4
  %tbl_size.i.i148.i = load i64, ptr %tbl_size_ptr.i.i145.i, align 4
  %offset_tbl.i.i149.i = load ptr, ptr %offset_tbl_ptr.i.i146.i, align 8
  %product.i.i.i150.i = mul i64 %hash_coef.i.i147.i, 4015701072841558310
  %shifted.i.i.i151.i = lshr i64 %product.i.i.i150.i, 32
  %xored.i.i.i152.i = xor i64 %shifted.i.i.i151.i, %product.i.i.i150.i
  %hash.i.i.i153.i = and i64 %xored.i.i.i152.i, %tbl_size.i.i148.i
  %offset_ptr.i.i154.i = getelementptr i32, ptr %offset_tbl.i.i149.i, i64 %hash.i.i.i153.i
  %offset.i.i155.i = load i32, ptr %offset_ptr.i.i154.i, align 4
  %533 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract.i648, 0
  %534 = insertvalue { ptr, ptr, ptr, i32 } %533, ptr %531, 1
  %535 = insertvalue { ptr, ptr, ptr, i32 } %534, ptr %532, 2
  %536 = insertvalue { ptr, ptr, ptr, i32 } %535, i32 %offset.i.i155.i, 3
  %537 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %538 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %539 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract.i648)
  %540 = sext i32 %offset.i.i155.i to i64
  %541 = getelementptr ptr, ptr %.fca.0.extract.i648, i64 %540
  %542 = getelementptr i8, ptr %541, i64 64
  %543 = load ptr, ptr %542, align 8
  %544 = call ptr %543({ ptr, ptr, ptr, i32 } %536, ptr nonnull %2)
  %545 = call i32 %544({ ptr, ptr, ptr, i32 } %536, { ptr, ptr, ptr, i32 } %536, ptr nonnull %2)
  %546 = icmp eq i32 %545, %491
  %547 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %548 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %549 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract.i648)
  %550 = getelementptr i8, ptr %541, i64 48
  %551 = load ptr, ptr %550, align 8
  %552 = call ptr %551({ ptr, ptr, ptr, i32 } %536, ptr nonnull %2)
  %553 = call { ptr, i160 } %552({ ptr, ptr, ptr, i32 } %536, { ptr, ptr, ptr, i32 } %536, ptr nonnull %2)
  %554 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %555 = load ptr, ptr %317, align 8
  %556 = call i1 %555({ ptr, i160 } %553, { ptr, i160 } %488)
  %557 = and i1 %546, %556
  br i1 %557, label %HashMap_get_keyK.exit, label %.critedge.i

.critedge.i:                                      ; preds = %530, %482
  %558 = add i32 %491, 2127912214
  %559 = shl i32 %491, 12
  %560 = add i32 %558, %559
  %561 = ashr i32 %560, 19
  %562 = xor i32 %560, %561
  %563 = xor i32 %562, -949894596
  %564 = add i32 %563, 374761393
  %565 = shl i32 %563, 5
  %566 = add i32 %564, %565
  %567 = add i32 %566, -744332180
  %568 = shl i32 %566, 9
  %569 = xor i32 %567, %568
  %570 = add i32 %569, -42973499
  %571 = shl i32 %569, 3
  %572 = add i32 %570, %571
  %573 = ashr i32 %572, 16
  %574 = xor i32 %572, %573
  %575 = xor i32 %574, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %576 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %577 = load ptr, ptr %345, align 8
  %578 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %577, 0
  %579 = load ptr, ptr %346, align 8
  %580 = insertvalue { ptr, ptr, ptr, i32 } %578, ptr %579, 1
  %581 = load ptr, ptr %347, align 8
  %582 = insertvalue { ptr, ptr, ptr, i32 } %580, ptr %581, 2
  %583 = load i32, ptr %348, align 4
  %584 = insertvalue { ptr, ptr, ptr, i32 } %582, i32 %583, 3
  %hash_coef_ptr.i.i10.i1361 = getelementptr i8, ptr %577, i64 8
  %tbl_size_ptr.i.i11.i1362 = getelementptr i8, ptr %577, i64 16
  %offset_tbl_ptr.i.i12.i1363 = getelementptr i8, ptr %577, i64 40
  %hash_coef.i.i13.i1364 = load i64, ptr %hash_coef_ptr.i.i10.i1361, align 4
  %tbl_size.i.i14.i1365 = load i64, ptr %tbl_size_ptr.i.i11.i1362, align 4
  %offset_tbl.i.i15.i1366 = load ptr, ptr %offset_tbl_ptr.i.i12.i1363, align 8
  %product.i.i.i16.i1367 = mul i64 %hash_coef.i.i13.i1364, -5261542750394134544
  %shifted.i.i.i17.i1368 = lshr i64 %product.i.i.i16.i1367, 32
  %xored.i.i.i18.i1369 = xor i64 %shifted.i.i.i17.i1368, %product.i.i.i16.i1367
  %hash.i.i.i19.i1370 = and i64 %xored.i.i.i18.i1369, %tbl_size.i.i14.i1365
  %offset_ptr.i.i20.i1371 = getelementptr i32, ptr %offset_tbl.i.i15.i1366, i64 %hash.i.i.i19.i1370
  %offset.i.i21.i1372 = load i32, ptr %offset_ptr.i.i20.i1371, align 4
  %eq.i.i1373 = icmp eq i32 %583, %offset.i.i21.i1372
  call void @llvm.assume(i1 %eq.i.i1373) #30
  %585 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %586 = call ptr @llvm.invariant.start.p0(i64 600, ptr %577)
  %587 = sext i32 %583 to i64
  %588 = getelementptr ptr, ptr %577, i64 %587
  %589 = getelementptr i8, ptr %588, i64 64
  %590 = load ptr, ptr %589, align 8
  %591 = call ptr %590({ ptr, ptr, ptr, i32 } %584, ptr nonnull %2)
  %592 = call i32 %591({ ptr, ptr, ptr, i32 } %584, { ptr, ptr, ptr, i32 } %584, ptr nonnull %2)
  %593 = add i32 %592, -1
  %594 = and i32 %593, %575
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %595 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %596 = load ptr, ptr %345, align 8
  %597 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %596, 0
  %598 = load ptr, ptr %346, align 8
  %599 = insertvalue { ptr, ptr, ptr, i32 } %597, ptr %598, 1
  %600 = load ptr, ptr %347, align 8
  %601 = insertvalue { ptr, ptr, ptr, i32 } %599, ptr %600, 2
  %602 = load i32, ptr %348, align 4
  %603 = insertvalue { ptr, ptr, ptr, i32 } %601, i32 %602, 3
  %hash_coef_ptr.i.i158.i = getelementptr i8, ptr %596, i64 8
  %tbl_size_ptr.i.i159.i = getelementptr i8, ptr %596, i64 16
  %offset_tbl_ptr.i.i160.i = getelementptr i8, ptr %596, i64 40
  %hash_coef.i.i161.i = load i64, ptr %hash_coef_ptr.i.i158.i, align 4
  %tbl_size.i.i162.i = load i64, ptr %tbl_size_ptr.i.i159.i, align 4
  %offset_tbl.i.i163.i = load ptr, ptr %offset_tbl_ptr.i.i160.i, align 8
  %product.i.i.i164.i = mul i64 %hash_coef.i.i161.i, -5261542750394134544
  %shifted.i.i.i165.i = lshr i64 %product.i.i.i164.i, 32
  %xored.i.i.i166.i = xor i64 %shifted.i.i.i165.i, %product.i.i.i164.i
  %hash.i.i.i167.i = and i64 %xored.i.i.i166.i, %tbl_size.i.i162.i
  %offset_ptr.i.i168.i = getelementptr i32, ptr %offset_tbl.i.i163.i, i64 %hash.i.i.i167.i
  %offset.i.i169.i = load i32, ptr %offset_ptr.i.i168.i, align 4
  %eq.i172.i = icmp eq i32 %602, %offset.i.i169.i
  call void @llvm.assume(i1 %eq.i172.i) #30
  store ptr @_parameterization_Ptri32, ptr %263, align 8
  %604 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %263)
  %605 = call ptr @llvm.invariant.start.p0(i64 600, ptr %596)
  %606 = sext i32 %602 to i64
  %607 = getelementptr ptr, ptr %596, i64 %606
  %608 = getelementptr i8, ptr %607, i64 120
  %609 = load ptr, ptr %608, align 8
  store ptr @i32_typ, ptr %264, align 8
  %610 = call ptr %609({ ptr, ptr, ptr, i32 } %603, ptr nonnull %264)
  %611 = call { ptr, i160 } %610({ ptr, ptr, ptr, i32 } %603, { ptr, ptr, ptr, i32 } %603, ptr nonnull %263, i32 %594)
  %.fca.0.extract57.i = extractvalue { ptr, i160 } %611, 0
  %612 = icmp ne ptr %.fca.0.extract57.i, @nil_typ
  %613 = icmp ne ptr %.fca.0.extract57.i, null
  %.not128.i = and i1 %612, %613
  br i1 %.not128.i, label %614, label %HashMap_get_keyK.exit.thread

614:                                              ; preds = %.critedge.i
  %.fca.1.extract59.i = extractvalue { ptr, i160 } %611, 1
  %.sroa.6.8.extract.trunc.i = trunc i160 %.fca.1.extract59.i to i64
  %615 = inttoptr i64 %.sroa.6.8.extract.trunc.i to ptr
  %.sroa.11.8.extract.shift.i = lshr i160 %.fca.1.extract59.i, 64
  %.sroa.11.8.extract.trunc.i = trunc i160 %.sroa.11.8.extract.shift.i to i64
  %616 = inttoptr i64 %.sroa.11.8.extract.trunc.i to ptr
  %hash_coef_ptr.i.i174.i = getelementptr i8, ptr %.fca.0.extract57.i, i64 8
  %tbl_size_ptr.i.i175.i = getelementptr i8, ptr %.fca.0.extract57.i, i64 16
  %offset_tbl_ptr.i.i176.i = getelementptr i8, ptr %.fca.0.extract57.i, i64 40
  %hash_coef.i.i177.i = load i64, ptr %hash_coef_ptr.i.i174.i, align 4
  %tbl_size.i.i178.i = load i64, ptr %tbl_size_ptr.i.i175.i, align 4
  %offset_tbl.i.i179.i = load ptr, ptr %offset_tbl_ptr.i.i176.i, align 8
  %product.i.i.i180.i = mul i64 %hash_coef.i.i177.i, 4015701072841558310
  %shifted.i.i.i181.i = lshr i64 %product.i.i.i180.i, 32
  %xored.i.i.i182.i = xor i64 %shifted.i.i.i181.i, %product.i.i.i180.i
  %hash.i.i.i183.i = and i64 %xored.i.i.i182.i, %tbl_size.i.i178.i
  %offset_ptr.i.i184.i = getelementptr i32, ptr %offset_tbl.i.i179.i, i64 %hash.i.i.i183.i
  %offset.i.i185.i = load i32, ptr %offset_ptr.i.i184.i, align 4
  %617 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract57.i, 0
  %618 = insertvalue { ptr, ptr, ptr, i32 } %617, ptr %615, 1
  %619 = insertvalue { ptr, ptr, ptr, i32 } %618, ptr %616, 2
  %620 = insertvalue { ptr, ptr, ptr, i32 } %619, i32 %offset.i.i185.i, 3
  %621 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %622 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %623 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract57.i)
  %624 = sext i32 %offset.i.i185.i to i64
  %625 = getelementptr ptr, ptr %.fca.0.extract57.i, i64 %624
  %626 = getelementptr i8, ptr %625, i64 64
  %627 = load ptr, ptr %626, align 8
  %628 = call ptr %627({ ptr, ptr, ptr, i32 } %620, ptr nonnull %2)
  %629 = call i32 %628({ ptr, ptr, ptr, i32 } %620, { ptr, ptr, ptr, i32 } %620, ptr nonnull %2)
  %630 = icmp eq i32 %629, %491
  %631 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %632 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %633 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract57.i)
  %634 = getelementptr i8, ptr %625, i64 48
  %635 = load ptr, ptr %634, align 8
  %636 = call ptr %635({ ptr, ptr, ptr, i32 } %620, ptr nonnull %2)
  %637 = call { ptr, i160 } %636({ ptr, ptr, ptr, i32 } %620, { ptr, ptr, ptr, i32 } %620, ptr nonnull %2)
  %638 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %639 = load ptr, ptr %317, align 8
  %640 = call i1 %639({ ptr, i160 } %637, { ptr, i160 } %488)
  %641 = and i1 %630, %640
  br i1 %641, label %HashMap_get_keyK.exit, label %HashMap_get_keyK.exit.thread

HashMap_get_keyK.exit.thread:                     ; preds = %614, %.critedge.i
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0271.i)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.1.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %263)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %264)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0123.i)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2124.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0115.i)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2116.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %265)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %266)
  br label %653

HashMap_get_keyK.exit:                            ; preds = %530, %614
  %.pre-phi313.i = phi i64 [ %540, %530 ], [ %624, %614 ]
  %.pre-phi312.i = phi { ptr, ptr, ptr, i32 } [ %536, %530 ], [ %620, %614 ]
  %.reg2mem65.0.sroa.phi290.sroa.speculated.i = phi ptr [ %.fca.0.extract.i648, %530 ], [ %.fca.0.extract57.i, %614 ]
  %.reg2mem59.0.sroa.phi120289.i = phi ptr [ %.sroa.1.i, %530 ], [ %.sroa.2124.i, %614 ]
  %.reg2mem59.0.sroa.phi117288.i = phi ptr [ %.sroa.0271.i, %530 ], [ %.sroa.0123.i, %614 ]
  %.reg2mem57.0.sroa.phi94287.i = phi ptr [ %.sroa.2.i, %530 ], [ %.sroa.2116.i, %614 ]
  %.reg2mem57.0.sroa.phi91286.i = phi ptr [ %.sroa.0.i, %530 ], [ %.sroa.0115.i, %614 ]
  %642 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %643 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %644 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.reg2mem65.0.sroa.phi290.sroa.speculated.i)
  %645 = getelementptr ptr, ptr %.reg2mem65.0.sroa.phi290.sroa.speculated.i, i64 %.pre-phi313.i
  %646 = getelementptr i8, ptr %645, i64 56
  %647 = load ptr, ptr %646, align 8
  %648 = call ptr %647({ ptr, ptr, ptr, i32 } %.pre-phi312.i, ptr nonnull %2)
  %649 = call { ptr, i160 } %648({ ptr, ptr, ptr, i32 } %.pre-phi312.i, { ptr, ptr, ptr, i32 } %.pre-phi312.i, ptr nonnull %2)
  %.fca.0.extract97.i = extractvalue { ptr, i160 } %649, 0
  store ptr %.fca.0.extract97.i, ptr %.reg2mem59.0.sroa.phi117288.i, align 8
  %.fca.1.extract99.i = extractvalue { ptr, i160 } %649, 1
  store i160 %.fca.1.extract99.i, ptr %.reg2mem59.0.sroa.phi120289.i, align 8
  store ptr %.fca.0.extract97.i, ptr %.reg2mem57.0.sroa.phi91286.i, align 8
  store i160 %.fca.1.extract99.i, ptr %.reg2mem57.0.sroa.phi94287.i, align 8
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0271.i)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.1.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %263)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %264)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0123.i)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2124.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0115.i)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2116.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %265)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %266)
  %650 = icmp eq ptr %.fca.0.extract97.i, @nil_typ
  %651 = icmp eq ptr %.fca.0.extract97.i, null
  %652 = or i1 %650, %651
  br i1 %652, label %653, label %._crit_edge

653:                                              ; preds = %HashMap_get_keyK.exit.thread, %HashMap_get_keyK.exit
  %654 = add nuw i32 %486, 1
  %.sroa.084.0.insert.ext = zext i32 %654 to i160
  %655 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.084.0.insert.ext, 1
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %237)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %238)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %239)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %240)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %241)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %242)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %243)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %244)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %245)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %246)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %247)
  %656 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %657 = load ptr, ptr %281, align 8
  %658 = call i32 %657({ ptr, i160 } %488)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %659 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %660 = load ptr, ptr %293, align 8
  %661 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %660, 0
  %662 = load ptr, ptr %294, align 8
  %663 = insertvalue { ptr, ptr, ptr, i32 } %661, ptr %662, 1
  %664 = load ptr, ptr %383, align 8
  %665 = insertvalue { ptr, ptr, ptr, i32 } %663, ptr %664, 2
  %666 = load i32, ptr %295, align 4
  %667 = insertvalue { ptr, ptr, ptr, i32 } %665, i32 %666, 3
  %hash_coef_ptr.i.i10.i2173 = getelementptr i8, ptr %660, i64 8
  %tbl_size_ptr.i.i11.i2174 = getelementptr i8, ptr %660, i64 16
  %offset_tbl_ptr.i.i12.i2175 = getelementptr i8, ptr %660, i64 40
  %hash_coef.i.i13.i2176 = load i64, ptr %hash_coef_ptr.i.i10.i2173, align 4
  %tbl_size.i.i14.i2177 = load i64, ptr %tbl_size_ptr.i.i11.i2174, align 4
  %offset_tbl.i.i15.i2178 = load ptr, ptr %offset_tbl_ptr.i.i12.i2175, align 8
  %product.i.i.i16.i2179 = mul i64 %hash_coef.i.i13.i2176, -5261542750394134544
  %shifted.i.i.i17.i2180 = lshr i64 %product.i.i.i16.i2179, 32
  %xored.i.i.i18.i2181 = xor i64 %shifted.i.i.i17.i2180, %product.i.i.i16.i2179
  %hash.i.i.i19.i2182 = and i64 %xored.i.i.i18.i2181, %tbl_size.i.i14.i2177
  %offset_ptr.i.i20.i2183 = getelementptr i32, ptr %offset_tbl.i.i15.i2178, i64 %hash.i.i.i19.i2182
  %offset.i.i21.i2184 = load i32, ptr %offset_ptr.i.i20.i2183, align 4
  %eq.i.i2185 = icmp eq i32 %666, %offset.i.i21.i2184
  call void @llvm.assume(i1 %eq.i.i2185) #30
  %668 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %669 = call ptr @llvm.invariant.start.p0(i64 600, ptr %660)
  %670 = sext i32 %666 to i64
  %671 = getelementptr ptr, ptr %660, i64 %670
  %672 = getelementptr i8, ptr %671, i64 64
  %673 = load ptr, ptr %672, align 8
  %674 = call ptr %673({ ptr, ptr, ptr, i32 } %667, ptr nonnull %2)
  %675 = call i32 %674({ ptr, ptr, ptr, i32 } %667, { ptr, ptr, ptr, i32 } %667, ptr nonnull %2)
  %676 = add i32 %675, -1
  %677 = and i32 %676, %658
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %678 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %679 = load ptr, ptr %293, align 8
  %680 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %679, 0
  %681 = load ptr, ptr %294, align 8
  %682 = insertvalue { ptr, ptr, ptr, i32 } %680, ptr %681, 1
  %683 = load ptr, ptr %383, align 8
  %684 = insertvalue { ptr, ptr, ptr, i32 } %682, ptr %683, 2
  %685 = load i32, ptr %295, align 4
  %686 = insertvalue { ptr, ptr, ptr, i32 } %684, i32 %685, 3
  %hash_coef_ptr.i.i160.i1032 = getelementptr i8, ptr %679, i64 8
  %tbl_size_ptr.i.i161.i1033 = getelementptr i8, ptr %679, i64 16
  %offset_tbl_ptr.i.i162.i1034 = getelementptr i8, ptr %679, i64 40
  %hash_coef.i.i163.i1035 = load i64, ptr %hash_coef_ptr.i.i160.i1032, align 4
  %tbl_size.i.i164.i1036 = load i64, ptr %tbl_size_ptr.i.i161.i1033, align 4
  %offset_tbl.i.i165.i1037 = load ptr, ptr %offset_tbl_ptr.i.i162.i1034, align 8
  %product.i.i.i166.i1038 = mul i64 %hash_coef.i.i163.i1035, -5261542750394134544
  %shifted.i.i.i167.i1039 = lshr i64 %product.i.i.i166.i1038, 32
  %xored.i.i.i168.i1040 = xor i64 %shifted.i.i.i167.i1039, %product.i.i.i166.i1038
  %hash.i.i.i169.i1041 = and i64 %xored.i.i.i168.i1040, %tbl_size.i.i164.i1036
  %offset_ptr.i.i170.i1042 = getelementptr i32, ptr %offset_tbl.i.i165.i1037, i64 %hash.i.i.i169.i1041
  %offset.i.i171.i1043 = load i32, ptr %offset_ptr.i.i170.i1042, align 4
  %eq.i.i1044 = icmp eq i32 %685, %offset.i.i171.i1043
  call void @llvm.assume(i1 %eq.i.i1044) #30
  store ptr @_parameterization_Ptri32, ptr %246, align 8
  %687 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %246)
  %688 = call ptr @llvm.invariant.start.p0(i64 600, ptr %679)
  %689 = sext i32 %685 to i64
  %690 = getelementptr ptr, ptr %679, i64 %689
  %691 = getelementptr i8, ptr %690, i64 120
  %692 = load ptr, ptr %691, align 8
  store ptr @i32_typ, ptr %247, align 8
  %693 = call ptr %692({ ptr, ptr, ptr, i32 } %686, ptr nonnull %247)
  %694 = call { ptr, i160 } %693({ ptr, ptr, ptr, i32 } %686, { ptr, ptr, ptr, i32 } %686, ptr nonnull %246, i32 %677)
  %.fca.0.extract.i1045 = extractvalue { ptr, i160 } %694, 0
  %695 = icmp ne ptr %.fca.0.extract.i1045, @nil_typ
  %696 = icmp ne ptr %.fca.0.extract.i1045, null
  %.not151.i1046 = and i1 %695, %696
  br i1 %.not151.i1046, label %697, label %.critedge.i1047

697:                                              ; preds = %653
  %.fca.1.extract.i1141 = extractvalue { ptr, i160 } %694, 1
  %.sroa.4518.8.extract.trunc.i1142 = trunc i160 %.fca.1.extract.i1141 to i64
  %698 = inttoptr i64 %.sroa.4518.8.extract.trunc.i1142 to ptr
  %.sroa.7520.8.extract.shift.i1143 = lshr i160 %.fca.1.extract.i1141, 64
  %.sroa.7520.8.extract.trunc.i1144 = trunc i160 %.sroa.7520.8.extract.shift.i1143 to i64
  %699 = inttoptr i64 %.sroa.7520.8.extract.trunc.i1144 to ptr
  %hash_coef_ptr.i.i174.i1145 = getelementptr i8, ptr %.fca.0.extract.i1045, i64 8
  %tbl_size_ptr.i.i175.i1146 = getelementptr i8, ptr %.fca.0.extract.i1045, i64 16
  %offset_tbl_ptr.i.i176.i1147 = getelementptr i8, ptr %.fca.0.extract.i1045, i64 40
  %hash_coef.i.i177.i1148 = load i64, ptr %hash_coef_ptr.i.i174.i1145, align 4
  %tbl_size.i.i178.i1149 = load i64, ptr %tbl_size_ptr.i.i175.i1146, align 4
  %offset_tbl.i.i179.i1150 = load ptr, ptr %offset_tbl_ptr.i.i176.i1147, align 8
  %product.i.i.i180.i1151 = mul i64 %hash_coef.i.i177.i1148, 4015701072841558310
  %shifted.i.i.i181.i1152 = lshr i64 %product.i.i.i180.i1151, 32
  %xored.i.i.i182.i1153 = xor i64 %shifted.i.i.i181.i1152, %product.i.i.i180.i1151
  %hash.i.i.i183.i1154 = and i64 %xored.i.i.i182.i1153, %tbl_size.i.i178.i1149
  %offset_ptr.i.i184.i1155 = getelementptr i32, ptr %offset_tbl.i.i179.i1150, i64 %hash.i.i.i183.i1154
  %offset.i.i185.i1156 = load i32, ptr %offset_ptr.i.i184.i1155, align 4
  %700 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract.i1045, 0
  %701 = insertvalue { ptr, ptr, ptr, i32 } %700, ptr %698, 1
  %702 = insertvalue { ptr, ptr, ptr, i32 } %701, ptr %699, 2
  %703 = insertvalue { ptr, ptr, ptr, i32 } %702, i32 %offset.i.i185.i1156, 3
  %704 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %705 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %706 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract.i1045)
  %707 = sext i32 %offset.i.i185.i1156 to i64
  %708 = getelementptr ptr, ptr %.fca.0.extract.i1045, i64 %707
  %709 = getelementptr i8, ptr %708, i64 64
  %710 = load ptr, ptr %709, align 8
  %711 = call ptr %710({ ptr, ptr, ptr, i32 } %703, ptr nonnull %2)
  %712 = call i32 %711({ ptr, ptr, ptr, i32 } %703, { ptr, ptr, ptr, i32 } %703, ptr nonnull %2)
  %713 = icmp eq i32 %712, %658
  br i1 %713, label %714, label %.critedge.i1047

714:                                              ; preds = %697
  %715 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %716 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %717 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract.i1045)
  %718 = getelementptr i8, ptr %708, i64 48
  %719 = load ptr, ptr %718, align 8
  %720 = call ptr %719({ ptr, ptr, ptr, i32 } %703, ptr nonnull %2)
  %721 = call { ptr, i160 } %720({ ptr, ptr, ptr, i32 } %703, { ptr, ptr, ptr, i32 } %703, ptr nonnull %2)
  %722 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %723 = load ptr, ptr %282, align 8
  %724 = call i1 %723({ ptr, i160 } %721, { ptr, i160 } %488)
  br i1 %724, label %.thread525.i1158, label %.critedge.i1047

.thread525.i1158:                                 ; preds = %714
  %725 = load ptr, ptr %result.i, align 8
  %726 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %727 = load ptr, ptr %276, align 8
  %728 = load ptr, ptr %725, align 8
  %729 = getelementptr i8, ptr %728, i64 48
  %730 = load ptr, ptr %729, align 8
  %731 = call { i64, i64 } %730(ptr nonnull %725)
  %732 = extractvalue { i64, i64 } %731, 0
  %733 = extractvalue { i64, i64 } %731, 1
  %734 = urem i64 20, %733
  %735 = icmp eq i64 %734, 0
  %736 = sub i64 %733, %734
  %737 = select i1 %735, i64 0, i64 %736
  %738 = add i64 %732, 20
  %739 = add i64 %738, %737
  %740 = load ptr, ptr %727, align 8
  %741 = getelementptr i8, ptr %740, i64 48
  %742 = load ptr, ptr %741, align 8
  %743 = call { i64, i64 } %742(ptr nonnull %727)
  %744 = extractvalue { i64, i64 } %743, 0
  %745 = extractvalue { i64, i64 } %743, 1
  %746 = call i64 @llvm.umax.i64(i64 %733, i64 %745)
  %747 = call i64 @llvm.umax.i64(i64 %746, i64 8)
  %748 = urem i64 %739, %745
  %749 = icmp eq i64 %748, 0
  %750 = sub i64 %745, %748
  %751 = select i1 %749, i64 0, i64 %750
  %752 = add i64 %744, %739
  %753 = add i64 %752, %751
  %754 = urem i64 %753, %747
  %755 = icmp eq i64 %754, 0
  %756 = sub i64 %747, %754
  %757 = select i1 %755, i64 0, i64 %756
  %758 = add i64 %757, %753
  %result.i.i1159 = call noalias ptr @bump_malloc_inner(i64 noundef %758, ptr nonnull @current_ptr) #29
  store ptr %725, ptr %result.i.i1159, align 8
  %759 = getelementptr i8, ptr %result.i.i1159, i64 8
  store ptr %727, ptr %759, align 8
  %760 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i.i1159)
  store ptr @Entry, ptr %237, align 8
  store ptr %result.i.i1159, ptr %378, align 8
  store i32 9, ptr %379, align 8
  %761 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %237)
  %762 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %763 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %764 = load ptr, ptr %725, align 8
  %765 = getelementptr i8, ptr %764, i64 48
  %766 = load ptr, ptr %765, align 8
  %767 = call { i64, i64 } %766(ptr nonnull %725)
  %768 = extractvalue { i64, i64 } %767, 1
  %769 = urem i64 20, %768
  %770 = icmp eq i64 %769, 0
  %reass.sub5623 = sub i64 %768, %769
  %771 = add i64 %reass.sub5623, 20
  %772 = select i1 %770, i64 20, i64 %771
  %773 = getelementptr i8, ptr %result.i.i1159, i64 %772
  %774 = load ptr, ptr %result.i.i1159, align 8
  %775 = load ptr, ptr %774, align 8
  %776 = getelementptr i8, ptr %775, i64 64
  %777 = load ptr, ptr %776, align 8
  call void %777({ ptr, i160 } %488, ptr nonnull %774, ptr %773)
  %778 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %779 = load ptr, ptr %result.i.i1159, align 8
  %780 = load ptr, ptr %779, align 8
  %781 = getelementptr i8, ptr %780, i64 48
  %782 = load ptr, ptr %781, align 8
  %783 = call { i64, i64 } %782(ptr nonnull %779)
  %784 = extractvalue { i64, i64 } %783, 0
  %785 = extractvalue { i64, i64 } %783, 1
  %786 = urem i64 20, %785
  %787 = icmp eq i64 %786, 0
  %788 = sub i64 %785, %786
  %789 = select i1 %787, i64 0, i64 %788
  %790 = add i64 %784, 20
  %791 = add i64 %790, %789
  %792 = load ptr, ptr %759, align 8
  %793 = load ptr, ptr %792, align 8
  %794 = getelementptr i8, ptr %793, i64 48
  %795 = load ptr, ptr %794, align 8
  %796 = call { i64, i64 } %795(ptr nonnull %792)
  %797 = extractvalue { i64, i64 } %796, 1
  %798 = urem i64 %791, %797
  %799 = icmp eq i64 %798, 0
  %800 = sub i64 %797, %798
  %801 = select i1 %799, i64 0, i64 %800
  %802 = getelementptr i8, ptr %result.i.i1159, i64 %791
  %803 = getelementptr i8, ptr %802, i64 %801
  %804 = load ptr, ptr %759, align 8
  %805 = load ptr, ptr %804, align 8
  %806 = getelementptr i8, ptr %805, i64 64
  %807 = load ptr, ptr %806, align 8
  call void %807({ ptr, i160 } %655, ptr nonnull %804, ptr %803)
  %808 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %809 = getelementptr i8, ptr %result.i.i1159, i64 16
  store i32 %658, ptr %809, align 4
  %810 = load ptr, ptr %380, align 8
  %811 = ptrtoint ptr %result.i.i1159 to i64
  %812 = ptrtoint ptr %810 to i64
  %.sroa.2129.0.insert.ext.i1160 = zext i64 %812 to i160
  %.sroa.2129.0.insert.shift.i1161 = shl nuw nsw i160 %.sroa.2129.0.insert.ext.i1160, 64
  %.sroa.0128.0.insert.ext.i1163 = zext i64 %811 to i160
  %.sroa.2129.0.insert.insert.i1162 = or disjoint i160 %.sroa.2129.0.insert.shift.i1161, %.sroa.0128.0.insert.ext.i1163
  %.sroa.0128.0.insert.insert.i1164 = or disjoint i160 %.sroa.2129.0.insert.insert.i1162, 3062541302288446171170371466885913903104
  %813 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0128.0.insert.insert.i1164, 1
  %814 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %815 = load ptr, ptr %293, align 8
  %816 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %815, 0
  %817 = load ptr, ptr %294, align 8
  %818 = insertvalue { ptr, ptr, ptr, i32 } %816, ptr %817, 1
  %819 = load ptr, ptr %383, align 8
  %820 = insertvalue { ptr, ptr, ptr, i32 } %818, ptr %819, 2
  %821 = load i32, ptr %295, align 4
  %822 = insertvalue { ptr, ptr, ptr, i32 } %820, i32 %821, 3
  %hash_coef_ptr.i.i202.i1169 = getelementptr i8, ptr %815, i64 8
  %tbl_size_ptr.i.i203.i1170 = getelementptr i8, ptr %815, i64 16
  %offset_tbl_ptr.i.i204.i1171 = getelementptr i8, ptr %815, i64 40
  %hash_coef.i.i205.i1172 = load i64, ptr %hash_coef_ptr.i.i202.i1169, align 4
  %tbl_size.i.i206.i1173 = load i64, ptr %tbl_size_ptr.i.i203.i1170, align 4
  %offset_tbl.i.i207.i1174 = load ptr, ptr %offset_tbl_ptr.i.i204.i1171, align 8
  %product.i.i.i208.i1175 = mul i64 %hash_coef.i.i205.i1172, -5261542750394134544
  %shifted.i.i.i209.i1176 = lshr i64 %product.i.i.i208.i1175, 32
  %xored.i.i.i210.i1177 = xor i64 %shifted.i.i.i209.i1176, %product.i.i.i208.i1175
  %hash.i.i.i211.i1178 = and i64 %xored.i.i.i210.i1177, %tbl_size.i.i206.i1173
  %offset_ptr.i.i212.i1179 = getelementptr i32, ptr %offset_tbl.i.i207.i1174, i64 %hash.i.i.i211.i1178
  %offset.i.i213.i1180 = load i32, ptr %offset_ptr.i.i212.i1179, align 4
  %eq.i216.i1181 = icmp eq i32 %821, %offset.i.i213.i1180
  call void @llvm.assume(i1 %eq.i216.i1181) #30
  %823 = load ptr, ptr %result.i, align 8
  %824 = load ptr, ptr %276, align 8
  %result.i217.i1182 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %825 = getelementptr i8, ptr %result.i217.i1182, i64 16
  store ptr %824, ptr %825, align 8
  %826 = getelementptr i8, ptr %result.i217.i1182, i64 8
  store ptr %823, ptr %826, align 8
  %827 = getelementptr i8, ptr %result.i217.i1182, i64 24
  store ptr null, ptr %827, align 8
  %828 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i217.i1182)
  store ptr @Entry, ptr %result.i217.i1182, align 8
  store ptr @_parameterization_Ptri32, ptr %238, align 8
  store ptr %result.i217.i1182, ptr %381, align 8
  %829 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %238)
  %830 = call ptr @llvm.invariant.start.p0(i64 600, ptr %815)
  %831 = sext i32 %821 to i64
  %832 = getelementptr ptr, ptr %815, i64 %831
  %833 = getelementptr i8, ptr %832, i64 128
  %834 = load ptr, ptr %833, align 8
  store ptr @i32_typ, ptr %239, align 8
  store ptr @Entry, ptr %382, align 8
  %835 = call ptr %834({ ptr, ptr, ptr, i32 } %822, ptr nonnull %239)
  call void %835({ ptr, ptr, ptr, i32 } %822, { ptr, ptr, ptr, i32 } %822, ptr nonnull %238, i32 %677, { ptr, i160 } %813)
  br label %HashMap_insert_keyK_valueV.exit1183

.critedge.i1047:                                  ; preds = %714, %697, %653
  %836 = add i32 %658, 2127912214
  %837 = shl i32 %658, 12
  %838 = add i32 %836, %837
  %839 = ashr i32 %838, 19
  %840 = xor i32 %838, %839
  %841 = xor i32 %840, -949894596
  %842 = add i32 %841, 374761393
  %843 = shl i32 %841, 5
  %844 = add i32 %842, %843
  %845 = add i32 %844, -744332180
  %846 = shl i32 %844, 9
  %847 = xor i32 %845, %846
  %848 = add i32 %847, -42973499
  %849 = shl i32 %847, 3
  %850 = add i32 %848, %849
  %851 = ashr i32 %850, 16
  %852 = xor i32 %850, %851
  %853 = xor i32 %852, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %854 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %855 = load ptr, ptr %306, align 8
  %856 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %855, 0
  %857 = load ptr, ptr %307, align 8
  %858 = insertvalue { ptr, ptr, ptr, i32 } %856, ptr %857, 1
  %859 = load ptr, ptr %384, align 8
  %860 = insertvalue { ptr, ptr, ptr, i32 } %858, ptr %859, 2
  %861 = load i32, ptr %308, align 4
  %862 = insertvalue { ptr, ptr, ptr, i32 } %860, i32 %861, 3
  %hash_coef_ptr.i.i10.i2204 = getelementptr i8, ptr %855, i64 8
  %tbl_size_ptr.i.i11.i2205 = getelementptr i8, ptr %855, i64 16
  %offset_tbl_ptr.i.i12.i2206 = getelementptr i8, ptr %855, i64 40
  %hash_coef.i.i13.i2207 = load i64, ptr %hash_coef_ptr.i.i10.i2204, align 4
  %tbl_size.i.i14.i2208 = load i64, ptr %tbl_size_ptr.i.i11.i2205, align 4
  %offset_tbl.i.i15.i2209 = load ptr, ptr %offset_tbl_ptr.i.i12.i2206, align 8
  %product.i.i.i16.i2210 = mul i64 %hash_coef.i.i13.i2207, -5261542750394134544
  %shifted.i.i.i17.i2211 = lshr i64 %product.i.i.i16.i2210, 32
  %xored.i.i.i18.i2212 = xor i64 %shifted.i.i.i17.i2211, %product.i.i.i16.i2210
  %hash.i.i.i19.i2213 = and i64 %xored.i.i.i18.i2212, %tbl_size.i.i14.i2208
  %offset_ptr.i.i20.i2214 = getelementptr i32, ptr %offset_tbl.i.i15.i2209, i64 %hash.i.i.i19.i2213
  %offset.i.i21.i2215 = load i32, ptr %offset_ptr.i.i20.i2214, align 4
  %eq.i.i2216 = icmp eq i32 %861, %offset.i.i21.i2215
  call void @llvm.assume(i1 %eq.i.i2216) #30
  %863 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %864 = call ptr @llvm.invariant.start.p0(i64 600, ptr %855)
  %865 = sext i32 %861 to i64
  %866 = getelementptr ptr, ptr %855, i64 %865
  %867 = getelementptr i8, ptr %866, i64 64
  %868 = load ptr, ptr %867, align 8
  %869 = call ptr %868({ ptr, ptr, ptr, i32 } %862, ptr nonnull %2)
  %870 = call i32 %869({ ptr, ptr, ptr, i32 } %862, { ptr, ptr, ptr, i32 } %862, ptr nonnull %2)
  %871 = add i32 %870, -1
  %872 = and i32 %871, %853
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %873 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %874 = load ptr, ptr %306, align 8
  %875 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %874, 0
  %876 = load ptr, ptr %307, align 8
  %877 = insertvalue { ptr, ptr, ptr, i32 } %875, ptr %876, 1
  %878 = load ptr, ptr %384, align 8
  %879 = insertvalue { ptr, ptr, ptr, i32 } %877, ptr %878, 2
  %880 = load i32, ptr %308, align 4
  %881 = insertvalue { ptr, ptr, ptr, i32 } %879, i32 %880, 3
  %hash_coef_ptr.i.i219.i1052 = getelementptr i8, ptr %874, i64 8
  %tbl_size_ptr.i.i220.i1053 = getelementptr i8, ptr %874, i64 16
  %offset_tbl_ptr.i.i221.i1054 = getelementptr i8, ptr %874, i64 40
  %hash_coef.i.i222.i1055 = load i64, ptr %hash_coef_ptr.i.i219.i1052, align 4
  %tbl_size.i.i223.i1056 = load i64, ptr %tbl_size_ptr.i.i220.i1053, align 4
  %offset_tbl.i.i224.i1057 = load ptr, ptr %offset_tbl_ptr.i.i221.i1054, align 8
  %product.i.i.i225.i1058 = mul i64 %hash_coef.i.i222.i1055, -5261542750394134544
  %shifted.i.i.i226.i1059 = lshr i64 %product.i.i.i225.i1058, 32
  %xored.i.i.i227.i1060 = xor i64 %shifted.i.i.i226.i1059, %product.i.i.i225.i1058
  %hash.i.i.i228.i1061 = and i64 %xored.i.i.i227.i1060, %tbl_size.i.i223.i1056
  %offset_ptr.i.i229.i1062 = getelementptr i32, ptr %offset_tbl.i.i224.i1057, i64 %hash.i.i.i228.i1061
  %offset.i.i230.i1063 = load i32, ptr %offset_ptr.i.i229.i1062, align 4
  %eq.i233.i1064 = icmp eq i32 %880, %offset.i.i230.i1063
  call void @llvm.assume(i1 %eq.i233.i1064) #30
  store ptr @_parameterization_Ptri32, ptr %240, align 8
  %882 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %240)
  %883 = call ptr @llvm.invariant.start.p0(i64 600, ptr %874)
  %884 = sext i32 %880 to i64
  %885 = getelementptr ptr, ptr %874, i64 %884
  %886 = getelementptr i8, ptr %885, i64 120
  %887 = load ptr, ptr %886, align 8
  store ptr @i32_typ, ptr %241, align 8
  %888 = call ptr %887({ ptr, ptr, ptr, i32 } %881, ptr nonnull %241)
  %889 = call { ptr, i160 } %888({ ptr, ptr, ptr, i32 } %881, { ptr, ptr, ptr, i32 } %881, ptr nonnull %240, i32 %872)
  %.fca.0.extract104.i1065 = extractvalue { ptr, i160 } %889, 0
  %890 = icmp ne ptr %.fca.0.extract104.i1065, @nil_typ
  %891 = icmp ne ptr %.fca.0.extract104.i1065, null
  %.not153.i1066 = and i1 %890, %891
  br i1 %.not153.i1066, label %892, label %.critedge158.i1067

892:                                              ; preds = %.critedge.i1047
  %.fca.1.extract106.i1099 = extractvalue { ptr, i160 } %889, 1
  %.sroa.4.8.extract.trunc.i1100 = trunc i160 %.fca.1.extract106.i1099 to i64
  %893 = inttoptr i64 %.sroa.4.8.extract.trunc.i1100 to ptr
  %.sroa.7506.8.extract.shift.i1101 = lshr i160 %.fca.1.extract106.i1099, 64
  %.sroa.7506.8.extract.trunc.i1102 = trunc i160 %.sroa.7506.8.extract.shift.i1101 to i64
  %894 = inttoptr i64 %.sroa.7506.8.extract.trunc.i1102 to ptr
  %hash_coef_ptr.i.i235.i1103 = getelementptr i8, ptr %.fca.0.extract104.i1065, i64 8
  %tbl_size_ptr.i.i236.i1104 = getelementptr i8, ptr %.fca.0.extract104.i1065, i64 16
  %offset_tbl_ptr.i.i237.i1105 = getelementptr i8, ptr %.fca.0.extract104.i1065, i64 40
  %hash_coef.i.i238.i1106 = load i64, ptr %hash_coef_ptr.i.i235.i1103, align 4
  %tbl_size.i.i239.i1107 = load i64, ptr %tbl_size_ptr.i.i236.i1104, align 4
  %offset_tbl.i.i240.i1108 = load ptr, ptr %offset_tbl_ptr.i.i237.i1105, align 8
  %product.i.i.i241.i1109 = mul i64 %hash_coef.i.i238.i1106, 4015701072841558310
  %shifted.i.i.i242.i1110 = lshr i64 %product.i.i.i241.i1109, 32
  %xored.i.i.i243.i1111 = xor i64 %shifted.i.i.i242.i1110, %product.i.i.i241.i1109
  %hash.i.i.i244.i1112 = and i64 %xored.i.i.i243.i1111, %tbl_size.i.i239.i1107
  %offset_ptr.i.i245.i1113 = getelementptr i32, ptr %offset_tbl.i.i240.i1108, i64 %hash.i.i.i244.i1112
  %offset.i.i246.i1114 = load i32, ptr %offset_ptr.i.i245.i1113, align 4
  %895 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract104.i1065, 0
  %896 = insertvalue { ptr, ptr, ptr, i32 } %895, ptr %893, 1
  %897 = insertvalue { ptr, ptr, ptr, i32 } %896, ptr %894, 2
  %898 = insertvalue { ptr, ptr, ptr, i32 } %897, i32 %offset.i.i246.i1114, 3
  %899 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %900 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %901 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract104.i1065)
  %902 = sext i32 %offset.i.i246.i1114 to i64
  %903 = getelementptr ptr, ptr %.fca.0.extract104.i1065, i64 %902
  %904 = getelementptr i8, ptr %903, i64 64
  %905 = load ptr, ptr %904, align 8
  %906 = call ptr %905({ ptr, ptr, ptr, i32 } %898, ptr nonnull %2)
  %907 = call i32 %906({ ptr, ptr, ptr, i32 } %898, { ptr, ptr, ptr, i32 } %898, ptr nonnull %2)
  %908 = icmp eq i32 %907, %658
  br i1 %908, label %909, label %.critedge158.i1067

909:                                              ; preds = %892
  %910 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %911 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %912 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract104.i1065)
  %913 = getelementptr i8, ptr %903, i64 48
  %914 = load ptr, ptr %913, align 8
  %915 = call ptr %914({ ptr, ptr, ptr, i32 } %898, ptr nonnull %2)
  %916 = call { ptr, i160 } %915({ ptr, ptr, ptr, i32 } %898, { ptr, ptr, ptr, i32 } %898, ptr nonnull %2)
  %917 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %918 = load ptr, ptr %282, align 8
  %919 = call i1 %918({ ptr, i160 } %916, { ptr, i160 } %488)
  br i1 %919, label %.thread528.i1116, label %.critedge158.i1067

.thread528.i1116:                                 ; preds = %909
  %920 = load ptr, ptr %result.i, align 8
  %921 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %922 = load ptr, ptr %276, align 8
  %923 = load ptr, ptr %920, align 8
  %924 = getelementptr i8, ptr %923, i64 48
  %925 = load ptr, ptr %924, align 8
  %926 = call { i64, i64 } %925(ptr nonnull %920)
  %927 = extractvalue { i64, i64 } %926, 0
  %928 = extractvalue { i64, i64 } %926, 1
  %929 = urem i64 20, %928
  %930 = icmp eq i64 %929, 0
  %931 = sub i64 %928, %929
  %932 = select i1 %930, i64 0, i64 %931
  %933 = add i64 %927, 20
  %934 = add i64 %933, %932
  %935 = load ptr, ptr %922, align 8
  %936 = getelementptr i8, ptr %935, i64 48
  %937 = load ptr, ptr %936, align 8
  %938 = call { i64, i64 } %937(ptr nonnull %922)
  %939 = extractvalue { i64, i64 } %938, 0
  %940 = extractvalue { i64, i64 } %938, 1
  %941 = call i64 @llvm.umax.i64(i64 %928, i64 %940)
  %942 = call i64 @llvm.umax.i64(i64 %941, i64 8)
  %943 = urem i64 %934, %940
  %944 = icmp eq i64 %943, 0
  %945 = sub i64 %940, %943
  %946 = select i1 %944, i64 0, i64 %945
  %947 = add i64 %939, %934
  %948 = add i64 %947, %946
  %949 = urem i64 %948, %942
  %950 = icmp eq i64 %949, 0
  %951 = sub i64 %942, %949
  %952 = select i1 %950, i64 0, i64 %951
  %953 = add i64 %952, %948
  %result.i248.i1117 = call noalias ptr @bump_malloc_inner(i64 noundef %953, ptr nonnull @current_ptr) #29
  store ptr %920, ptr %result.i248.i1117, align 8
  %954 = getelementptr i8, ptr %result.i248.i1117, i64 8
  store ptr %922, ptr %954, align 8
  %955 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i248.i1117)
  store ptr @Entry, ptr %242, align 8
  store ptr %result.i248.i1117, ptr %373, align 8
  store i32 9, ptr %374, align 8
  %956 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %242)
  %957 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %958 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %959 = load ptr, ptr %920, align 8
  %960 = getelementptr i8, ptr %959, i64 48
  %961 = load ptr, ptr %960, align 8
  %962 = call { i64, i64 } %961(ptr nonnull %920)
  %963 = extractvalue { i64, i64 } %962, 1
  %964 = urem i64 20, %963
  %965 = icmp eq i64 %964, 0
  %reass.sub5622 = sub i64 %963, %964
  %966 = add i64 %reass.sub5622, 20
  %967 = select i1 %965, i64 20, i64 %966
  %968 = getelementptr i8, ptr %result.i248.i1117, i64 %967
  %969 = load ptr, ptr %result.i248.i1117, align 8
  %970 = load ptr, ptr %969, align 8
  %971 = getelementptr i8, ptr %970, i64 64
  %972 = load ptr, ptr %971, align 8
  call void %972({ ptr, i160 } %488, ptr nonnull %969, ptr %968)
  %973 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %974 = load ptr, ptr %result.i248.i1117, align 8
  %975 = load ptr, ptr %974, align 8
  %976 = getelementptr i8, ptr %975, i64 48
  %977 = load ptr, ptr %976, align 8
  %978 = call { i64, i64 } %977(ptr nonnull %974)
  %979 = extractvalue { i64, i64 } %978, 0
  %980 = extractvalue { i64, i64 } %978, 1
  %981 = urem i64 20, %980
  %982 = icmp eq i64 %981, 0
  %983 = sub i64 %980, %981
  %984 = select i1 %982, i64 0, i64 %983
  %985 = add i64 %979, 20
  %986 = add i64 %985, %984
  %987 = load ptr, ptr %954, align 8
  %988 = load ptr, ptr %987, align 8
  %989 = getelementptr i8, ptr %988, i64 48
  %990 = load ptr, ptr %989, align 8
  %991 = call { i64, i64 } %990(ptr nonnull %987)
  %992 = extractvalue { i64, i64 } %991, 1
  %993 = urem i64 %986, %992
  %994 = icmp eq i64 %993, 0
  %995 = sub i64 %992, %993
  %996 = select i1 %994, i64 0, i64 %995
  %997 = getelementptr i8, ptr %result.i248.i1117, i64 %986
  %998 = getelementptr i8, ptr %997, i64 %996
  %999 = load ptr, ptr %954, align 8
  %1000 = load ptr, ptr %999, align 8
  %1001 = getelementptr i8, ptr %1000, i64 64
  %1002 = load ptr, ptr %1001, align 8
  call void %1002({ ptr, i160 } %655, ptr nonnull %999, ptr %998)
  %1003 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %1004 = getelementptr i8, ptr %result.i248.i1117, i64 16
  store i32 %658, ptr %1004, align 4
  %1005 = load ptr, ptr %375, align 8
  %1006 = ptrtoint ptr %result.i248.i1117 to i64
  %1007 = ptrtoint ptr %1005 to i64
  %.sroa.284.0.insert.ext.i1118 = zext i64 %1007 to i160
  %.sroa.284.0.insert.shift.i1119 = shl nuw nsw i160 %.sroa.284.0.insert.ext.i1118, 64
  %.sroa.083.0.insert.ext.i1121 = zext i64 %1006 to i160
  %.sroa.284.0.insert.insert.i1120 = or disjoint i160 %.sroa.284.0.insert.shift.i1119, %.sroa.083.0.insert.ext.i1121
  %.sroa.083.0.insert.insert.i1122 = or disjoint i160 %.sroa.284.0.insert.insert.i1120, 3062541302288446171170371466885913903104
  %1008 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.083.0.insert.insert.i1122, 1
  %1009 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1010 = load ptr, ptr %306, align 8
  %1011 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1010, 0
  %1012 = load ptr, ptr %307, align 8
  %1013 = insertvalue { ptr, ptr, ptr, i32 } %1011, ptr %1012, 1
  %1014 = load ptr, ptr %384, align 8
  %1015 = insertvalue { ptr, ptr, ptr, i32 } %1013, ptr %1014, 2
  %1016 = load i32, ptr %308, align 4
  %1017 = insertvalue { ptr, ptr, ptr, i32 } %1015, i32 %1016, 3
  %hash_coef_ptr.i.i264.i1127 = getelementptr i8, ptr %1010, i64 8
  %tbl_size_ptr.i.i265.i1128 = getelementptr i8, ptr %1010, i64 16
  %offset_tbl_ptr.i.i266.i1129 = getelementptr i8, ptr %1010, i64 40
  %hash_coef.i.i267.i1130 = load i64, ptr %hash_coef_ptr.i.i264.i1127, align 4
  %tbl_size.i.i268.i1131 = load i64, ptr %tbl_size_ptr.i.i265.i1128, align 4
  %offset_tbl.i.i269.i1132 = load ptr, ptr %offset_tbl_ptr.i.i266.i1129, align 8
  %product.i.i.i270.i1133 = mul i64 %hash_coef.i.i267.i1130, -5261542750394134544
  %shifted.i.i.i271.i1134 = lshr i64 %product.i.i.i270.i1133, 32
  %xored.i.i.i272.i1135 = xor i64 %shifted.i.i.i271.i1134, %product.i.i.i270.i1133
  %hash.i.i.i273.i1136 = and i64 %xored.i.i.i272.i1135, %tbl_size.i.i268.i1131
  %offset_ptr.i.i274.i1137 = getelementptr i32, ptr %offset_tbl.i.i269.i1132, i64 %hash.i.i.i273.i1136
  %offset.i.i275.i1138 = load i32, ptr %offset_ptr.i.i274.i1137, align 4
  %eq.i278.i1139 = icmp eq i32 %1016, %offset.i.i275.i1138
  call void @llvm.assume(i1 %eq.i278.i1139) #30
  %1018 = load ptr, ptr %result.i, align 8
  %1019 = load ptr, ptr %276, align 8
  %result.i279.i1140 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1020 = getelementptr i8, ptr %result.i279.i1140, i64 16
  store ptr %1019, ptr %1020, align 8
  %1021 = getelementptr i8, ptr %result.i279.i1140, i64 8
  store ptr %1018, ptr %1021, align 8
  %1022 = getelementptr i8, ptr %result.i279.i1140, i64 24
  store ptr null, ptr %1022, align 8
  %1023 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i279.i1140)
  store ptr @Entry, ptr %result.i279.i1140, align 8
  store ptr @_parameterization_Ptri32, ptr %243, align 8
  store ptr %result.i279.i1140, ptr %376, align 8
  %1024 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %243)
  %1025 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1010)
  %1026 = sext i32 %1016 to i64
  %1027 = getelementptr ptr, ptr %1010, i64 %1026
  %1028 = getelementptr i8, ptr %1027, i64 128
  %1029 = load ptr, ptr %1028, align 8
  store ptr @i32_typ, ptr %244, align 8
  store ptr @Entry, ptr %377, align 8
  %1030 = call ptr %1029({ ptr, ptr, ptr, i32 } %1017, ptr nonnull %244)
  call void %1030({ ptr, ptr, ptr, i32 } %1017, { ptr, ptr, ptr, i32 } %1017, ptr nonnull %243, i32 %872, { ptr, i160 } %1008)
  br label %HashMap_insert_keyK_valueV.exit1183

.critedge158.i1067:                               ; preds = %909, %892, %.critedge.i1047
  %1031 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1032 = load ptr, ptr %293, align 8
  %1033 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1032, 0
  %1034 = load ptr, ptr %294, align 8
  %1035 = insertvalue { ptr, ptr, ptr, i32 } %1033, ptr %1034, 1
  %1036 = load ptr, ptr %383, align 8
  %1037 = insertvalue { ptr, ptr, ptr, i32 } %1035, ptr %1036, 2
  %1038 = load i32, ptr %295, align 4
  %1039 = insertvalue { ptr, ptr, ptr, i32 } %1037, i32 %1038, 3
  %hash_coef_ptr.i.i281.i1072 = getelementptr i8, ptr %1032, i64 8
  %tbl_size_ptr.i.i282.i1073 = getelementptr i8, ptr %1032, i64 16
  %offset_tbl_ptr.i.i283.i1074 = getelementptr i8, ptr %1032, i64 40
  %hash_coef.i.i284.i1075 = load i64, ptr %hash_coef_ptr.i.i281.i1072, align 4
  %tbl_size.i.i285.i1076 = load i64, ptr %tbl_size_ptr.i.i282.i1073, align 4
  %offset_tbl.i.i286.i1077 = load ptr, ptr %offset_tbl_ptr.i.i283.i1074, align 8
  %product.i.i.i287.i1078 = mul i64 %hash_coef.i.i284.i1075, -5261542750394134544
  %shifted.i.i.i288.i1079 = lshr i64 %product.i.i.i287.i1078, 32
  %xored.i.i.i289.i1080 = xor i64 %shifted.i.i.i288.i1079, %product.i.i.i287.i1078
  %hash.i.i.i290.i1081 = and i64 %xored.i.i.i289.i1080, %tbl_size.i.i285.i1076
  %offset_ptr.i.i291.i1082 = getelementptr i32, ptr %offset_tbl.i.i286.i1077, i64 %hash.i.i.i290.i1081
  %offset.i.i292.i1083 = load i32, ptr %offset_ptr.i.i291.i1082, align 4
  %eq.i295.i1084 = icmp eq i32 %1038, %offset.i.i292.i1083
  call void @llvm.assume(i1 %eq.i295.i1084) #30
  %1040 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1041 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1032)
  %1042 = sext i32 %1038 to i64
  %1043 = getelementptr ptr, ptr %1032, i64 %1042
  %1044 = getelementptr i8, ptr %1043, i64 64
  %1045 = load ptr, ptr %1044, align 8
  %1046 = call ptr %1045({ ptr, ptr, ptr, i32 } %1039, ptr nonnull %2)
  %1047 = call i32 %1046({ ptr, ptr, ptr, i32 } %1039, { ptr, ptr, ptr, i32 } %1039, ptr nonnull %2)
  %1048 = load i32, ptr %385, align 4
  %.not.i1085 = icmp slt i32 %1048, %1047
  br i1 %.not.i1085, label %._crit_edge2.i1086, label %1049

1049:                                             ; preds = %.critedge158.i1067
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %192)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %193)
  %1050 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1051 = load ptr, ptr %293, align 8
  %1052 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1051, 0
  %1053 = load ptr, ptr %294, align 8
  %1054 = insertvalue { ptr, ptr, ptr, i32 } %1052, ptr %1053, 1
  %1055 = load ptr, ptr %383, align 8
  %1056 = insertvalue { ptr, ptr, ptr, i32 } %1054, ptr %1055, 2
  %1057 = load i32, ptr %295, align 4
  %1058 = insertvalue { ptr, ptr, ptr, i32 } %1056, i32 %1057, 3
  %hash_coef_ptr.i.i18.i2233 = getelementptr i8, ptr %1051, i64 8
  %tbl_size_ptr.i.i19.i2234 = getelementptr i8, ptr %1051, i64 16
  %offset_tbl_ptr.i.i20.i2235 = getelementptr i8, ptr %1051, i64 40
  %hash_coef.i.i21.i2236 = load i64, ptr %hash_coef_ptr.i.i18.i2233, align 4
  %tbl_size.i.i22.i2237 = load i64, ptr %tbl_size_ptr.i.i19.i2234, align 4
  %offset_tbl.i.i23.i2238 = load ptr, ptr %offset_tbl_ptr.i.i20.i2235, align 8
  %product.i.i.i24.i2239 = mul i64 %hash_coef.i.i21.i2236, -5261542750394134544
  %shifted.i.i.i25.i2240 = lshr i64 %product.i.i.i24.i2239, 32
  %xored.i.i.i26.i2241 = xor i64 %shifted.i.i.i25.i2240, %product.i.i.i24.i2239
  %hash.i.i.i27.i2242 = and i64 %xored.i.i.i26.i2241, %tbl_size.i.i22.i2237
  %offset_ptr.i.i28.i2243 = getelementptr i32, ptr %offset_tbl.i.i23.i2238, i64 %hash.i.i.i27.i2242
  %offset.i.i29.i2244 = load i32, ptr %offset_ptr.i.i28.i2243, align 4
  %eq.i.i2245 = icmp eq i32 %1057, %offset.i.i29.i2244
  call void @llvm.assume(i1 %eq.i.i2245) #30
  %1059 = load ptr, ptr %306, align 8
  %1060 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1059, 0
  %1061 = load ptr, ptr %307, align 8
  %1062 = insertvalue { ptr, ptr, ptr, i32 } %1060, ptr %1061, 1
  %1063 = load ptr, ptr %384, align 8
  %1064 = insertvalue { ptr, ptr, ptr, i32 } %1062, ptr %1063, 2
  %1065 = load i32, ptr %308, align 4
  %hash_coef_ptr.i.i46.i2250 = getelementptr i8, ptr %1059, i64 8
  %tbl_size_ptr.i.i47.i2251 = getelementptr i8, ptr %1059, i64 16
  %offset_tbl_ptr.i.i48.i2252 = getelementptr i8, ptr %1059, i64 40
  %hash_coef.i.i49.i2253 = load i64, ptr %hash_coef_ptr.i.i46.i2250, align 4
  %tbl_size.i.i50.i2254 = load i64, ptr %tbl_size_ptr.i.i47.i2251, align 4
  %offset_tbl.i.i51.i2255 = load ptr, ptr %offset_tbl_ptr.i.i48.i2252, align 8
  %product.i.i.i52.i2256 = mul i64 %hash_coef.i.i49.i2253, -5261542750394134544
  %shifted.i.i.i53.i2257 = lshr i64 %product.i.i.i52.i2256, 32
  %xored.i.i.i54.i2258 = xor i64 %shifted.i.i.i53.i2257, %product.i.i.i52.i2256
  %hash.i.i.i55.i2259 = and i64 %xored.i.i.i54.i2258, %tbl_size.i.i50.i2254
  %offset_ptr.i.i56.i2260 = getelementptr i32, ptr %offset_tbl.i.i51.i2255, i64 %hash.i.i.i55.i2259
  %offset.i.i57.i2261 = load i32, ptr %offset_ptr.i.i56.i2260, align 4
  %eq.i60.i2262 = icmp eq i32 %1065, %offset.i.i57.i2261
  call void @llvm.assume(i1 %eq.i60.i2262) #30
  %1066 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1067 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1051)
  %1068 = sext i32 %1057 to i64
  %1069 = getelementptr ptr, ptr %1051, i64 %1068
  %1070 = getelementptr i8, ptr %1069, i64 64
  %1071 = load ptr, ptr %1070, align 8
  %1072 = call ptr %1071({ ptr, ptr, ptr, i32 } %1058, ptr nonnull %2)
  %1073 = call i32 %1072({ ptr, ptr, ptr, i32 } %1058, { ptr, ptr, ptr, i32 } %1058, ptr nonnull %2)
  %1074 = shl i32 %1073, 1
  %1075 = call i32 @llvm.smax.i32(i32 %1074, i32 16)
  %1076 = load ptr, ptr %result.i, align 8
  %1077 = load ptr, ptr %276, align 8
  %result.i.i2263 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1078 = getelementptr i8, ptr %result.i.i2263, i64 16
  store ptr @_parameterization_Nil, ptr %1078, align 8
  %result.i75.i2264 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1079 = getelementptr i8, ptr %result.i75.i2264, i64 16
  store ptr %1077, ptr %1079, align 8
  %1080 = getelementptr i8, ptr %result.i75.i2264, i64 8
  store ptr %1076, ptr %1080, align 8
  %1081 = getelementptr i8, ptr %result.i75.i2264, i64 24
  store ptr null, ptr %1081, align 8
  %1082 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i75.i2264)
  store ptr @Entry, ptr %result.i75.i2264, align 8
  %1083 = getelementptr i8, ptr %result.i.i2263, i64 8
  store ptr %result.i75.i2264, ptr %1083, align 8
  %1084 = getelementptr i8, ptr %result.i.i2263, i64 24
  store ptr null, ptr %1084, align 8
  %1085 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i2263)
  store ptr @union_typ, ptr %result.i.i2263, align 8
  %result.i76.i2265 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i2263, ptr %result.i76.i2265, align 8
  %1086 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i76.i2265)
  store ptr @Array, ptr %192, align 8
  store ptr %result.i76.i2265, ptr %415, align 8
  store i32 9, ptr %416, align 8
  %1087 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %192)
  %1088 = getelementptr i8, ptr %result.i76.i2265, i64 16
  store i32 %1075, ptr %1088, align 4
  %1089 = getelementptr i8, ptr %result.i76.i2265, i64 20
  store i32 %1075, ptr %1089, align 4
  %1090 = zext nneg i32 %1075 to i64
  %1091 = shl nuw nsw i64 %1090, 5
  %result.i.i.i2266 = call noalias ptr @bump_malloc_inner(i64 noundef %1091, ptr nonnull @current_ptr) #29
  %1092 = getelementptr i8, ptr %result.i76.i2265, i64 8
  store ptr %result.i.i.i2266, ptr %1092, align 8
  %1093 = load ptr, ptr %417, align 8
  store ptr @Array, ptr %293, align 8
  store ptr %result.i76.i2265, ptr %294, align 8
  store ptr %1093, ptr %383, align 8
  store i32 9, ptr %295, align 4
  %result.i91.i2267 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1094 = getelementptr i8, ptr %result.i91.i2267, i64 16
  store ptr @_parameterization_Nil, ptr %1094, align 8
  %result.i92.i2268 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1095 = getelementptr i8, ptr %result.i92.i2268, i64 16
  store ptr %1077, ptr %1095, align 8
  %1096 = getelementptr i8, ptr %result.i92.i2268, i64 8
  store ptr %1076, ptr %1096, align 8
  %1097 = getelementptr i8, ptr %result.i92.i2268, i64 24
  store ptr null, ptr %1097, align 8
  %1098 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i92.i2268)
  store ptr @Entry, ptr %result.i92.i2268, align 8
  %1099 = getelementptr i8, ptr %result.i91.i2267, i64 8
  store ptr %result.i92.i2268, ptr %1099, align 8
  %1100 = getelementptr i8, ptr %result.i91.i2267, i64 24
  store ptr null, ptr %1100, align 8
  %1101 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i91.i2267)
  store ptr @union_typ, ptr %result.i91.i2267, align 8
  %result.i93.i2269 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i91.i2267, ptr %result.i93.i2269, align 8
  %1102 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i93.i2269)
  store ptr @Array, ptr %193, align 8
  store ptr %result.i93.i2269, ptr %418, align 8
  store i32 9, ptr %419, align 8
  %1103 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %193)
  %1104 = getelementptr i8, ptr %result.i93.i2269, i64 16
  store i32 %1075, ptr %1104, align 4
  %1105 = getelementptr i8, ptr %result.i93.i2269, i64 20
  store i32 %1075, ptr %1105, align 4
  %result.i.i234.i2270 = call noalias ptr @bump_malloc_inner(i64 noundef %1091, ptr nonnull @current_ptr) #29
  %1106 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %1107 = getelementptr i8, ptr %result.i93.i2269, i64 8
  store ptr %result.i.i234.i2270, ptr %1107, align 8
  %1108 = load ptr, ptr %420, align 8
  store ptr @Array, ptr %306, align 8
  store ptr %result.i93.i2269, ptr %307, align 8
  store ptr %1108, ptr %384, align 8
  store i32 9, ptr %308, align 4
  store i32 0, ptr %385, align 4
  %1109 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %141)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %142)
  %1110 = icmp sgt i32 %1073, 0
  br i1 %1110, label %.lr.ph.i3386, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3473.critedge

.lr.ph.i3386:                                     ; preds = %1049
  %invariant.gep.i3387 = getelementptr i8, ptr %1051, i64 120
  %offset_tbl.i.i24.i3388 = load ptr, ptr %offset_tbl_ptr.i.i20.i2235, align 8
  %hash_coef.i.i22.i3389 = load i64, ptr %hash_coef_ptr.i.i18.i2233, align 4
  %product.i.i.i25.i3390 = mul i64 %hash_coef.i.i22.i3389, -5261542750394134544
  %shifted.i.i.i26.i3391 = lshr i64 %product.i.i.i25.i3390, 32
  %xored.i.i.i27.i3392 = xor i64 %shifted.i.i.i26.i3391, %product.i.i.i25.i3390
  %tbl_size.i.i23.i3393 = load i64, ptr %tbl_size_ptr.i.i19.i2234, align 4
  %hash.i.i.i28.i3394 = and i64 %xored.i.i.i27.i3392, %tbl_size.i.i23.i3393
  %offset_ptr.i.i29.i3395 = getelementptr i32, ptr %offset_tbl.i.i24.i3388, i64 %hash.i.i.i28.i3394
  %offset.i.i30.i3396 = load i32, ptr %offset_ptr.i.i29.i3395, align 4
  %1111 = insertvalue { ptr, ptr, ptr, i32 } %1056, i32 %offset.i.i30.i3396, 3
  %1112 = sext i32 %offset.i.i30.i3396 to i64
  %gep.i3399 = getelementptr ptr, ptr %invariant.gep.i3387, i64 %1112
  %1113 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %1114

1114:                                             ; preds = %._crit_edge1.i3403, %.lr.ph.i3386
  %.reg2mem13.079.i3400 = phi i32 [ 0, %.lr.ph.i3386 ], [ %1311, %._crit_edge1.i3403 ]
  store ptr @_parameterization_Ptri32, ptr %141, align 8
  %1115 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %141)
  %1116 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %1051)
  %1117 = load ptr, ptr %gep.i3399, align 8
  store ptr @i32_typ, ptr %142, align 8
  %1118 = call ptr %1117({ ptr, ptr, ptr, i32 } %1111, ptr nonnull %142)
  %1119 = call { ptr, i160 } %1118({ ptr, ptr, ptr, i32 } %1111, { ptr, ptr, ptr, i32 } %1111, ptr nonnull %141, i32 %.reg2mem13.079.i3400)
  %.fca.0.extract11.i3401 = extractvalue { ptr, i160 } %1119, 0
  %1120 = icmp ne ptr %.fca.0.extract11.i3401, @nil_typ
  %1121 = icmp ne ptr %.fca.0.extract11.i3401, null
  %.not17.i3402 = and i1 %1120, %1121
  br i1 %.not17.i3402, label %1122, label %._crit_edge1.i3403

1122:                                             ; preds = %1114
  %hash_coef_ptr.i.i33.i3408 = getelementptr i8, ptr %.fca.0.extract11.i3401, i64 8
  %tbl_size_ptr.i.i34.i3409 = getelementptr i8, ptr %.fca.0.extract11.i3401, i64 16
  %offset_tbl_ptr.i.i35.i3410 = getelementptr i8, ptr %.fca.0.extract11.i3401, i64 40
  %1123 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %51)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %52)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %53)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %54)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %55)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %56)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %57)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0680.i4467)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %58)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %59)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %60)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %61)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %62)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %63)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %64)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %65)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i4468)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %66)
  %hash_coef.i.i147.i4474 = load i64, ptr %hash_coef_ptr.i.i33.i3408, align 4
  %tbl_size.i.i148.i4475 = load i64, ptr %tbl_size_ptr.i.i34.i3409, align 4
  %offset_tbl.i.i149.i4476 = load ptr, ptr %offset_tbl_ptr.i.i35.i3410, align 8
  %product.i.i.i150.i4477 = mul i64 %hash_coef.i.i147.i4474, 4015701072841558310
  %shifted.i.i.i151.i4478 = lshr i64 %product.i.i.i150.i4477, 32
  %xored.i.i.i152.i4479 = xor i64 %shifted.i.i.i151.i4478, %product.i.i.i150.i4477
  %hash.i.i.i153.i4480 = and i64 %xored.i.i.i152.i4479, %tbl_size.i.i148.i4475
  %offset_ptr.i.i154.i4481 = getelementptr i32, ptr %offset_tbl.i.i149.i4476, i64 %hash.i.i.i153.i4480
  %offset.i.i169.i4482 = load i32, ptr %offset_ptr.i.i154.i4481, align 4
  %1124 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1125 = load i32, ptr %309, align 4
  %1126 = icmp sgt i32 %1125, 0
  br i1 %1126, label %.lr.ph.i4483, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4596

.lr.ph.i4483:                                     ; preds = %1122
  %.fca.1.extract13.i3404 = extractvalue { ptr, i160 } %1119, 1
  %.sroa.576.8.extract.shift.i3406 = lshr i160 %.fca.1.extract13.i3404, 64
  %1127 = insertelement <2 x i160> poison, i160 %.sroa.576.8.extract.shift.i3406, i64 0
  %1128 = insertelement <2 x i160> %1127, i160 %.fca.1.extract13.i3404, i64 1
  %1129 = trunc <2 x i160> %1128 to <2 x i64>
  %1130 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i3401, 0
  %1131 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1132 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract11.i3401)
  %invariant.gep5074 = getelementptr i8, ptr %.fca.0.extract11.i3401, i64 64
  br label %1133

1133:                                             ; preds = %.cont.cont.i4534, %.lr.ph.i4483
  %1134 = phi ptr [ %.fca.0.extract11.i3401, %.lr.ph.i4483 ], [ %vptr.i248.sroa.speculated.i4535, %.cont.cont.i4534 ]
  %1135 = phi i32 [ %offset.i.i169.i4482, %.lr.ph.i4483 ], [ %offset.i.i260.i4549, %.cont.cont.i4534 ]
  %.reg2mem195.0678.i4484 = phi i32 [ 1, %.lr.ph.i4483 ], [ %1294, %.cont.cont.i4534 ]
  %.reg2mem193.0677.i4485 = phi i32 [ 0, %.lr.ph.i4483 ], [ %1299, %.cont.cont.i4534 ]
  %1136 = phi <2 x i64> [ %1129, %.lr.ph.i4483 ], [ %1298, %.cont.cont.i4534 ]
  %1137 = extractelement <2 x i64> %1136, i64 1
  %1138 = inttoptr i64 %1137 to ptr
  %1139 = extractelement <2 x i64> %1136, i64 0
  %1140 = inttoptr i64 %1139 to ptr
  %1141 = insertvalue { ptr, ptr, ptr, i32 } %1130, ptr %1138, 1
  %1142 = insertvalue { ptr, ptr, ptr, i32 } %1141, ptr %1140, 2
  %1143 = insertvalue { ptr, ptr, ptr, i32 } %1142, i32 %1135, 3
  %1144 = sext i32 %1135 to i64
  %gep5075 = getelementptr ptr, ptr %invariant.gep5074, i64 %1144
  %1145 = load ptr, ptr %gep5075, align 8
  %1146 = call ptr %1145({ ptr, ptr, ptr, i32 } %1143, ptr nonnull %2)
  %1147 = call i32 %1146({ ptr, ptr, ptr, i32 } %1143, { ptr, ptr, ptr, i32 } %1143, ptr nonnull %2)
  %1148 = icmp eq i32 %.reg2mem195.0678.i4484, 1
  %1149 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br i1 %1148, label %1150, label %1213

1150:                                             ; preds = %1133
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %1151 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1152 = load ptr, ptr %293, align 8
  %1153 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1152, 0
  %1154 = load ptr, ptr %294, align 8
  %1155 = insertvalue { ptr, ptr, ptr, i32 } %1153, ptr %1154, 1
  %1156 = load ptr, ptr %383, align 8
  %1157 = insertvalue { ptr, ptr, ptr, i32 } %1155, ptr %1156, 2
  %1158 = load i32, ptr %295, align 4
  %1159 = insertvalue { ptr, ptr, ptr, i32 } %1157, i32 %1158, 3
  %hash_coef_ptr.i.i10.i5370 = getelementptr i8, ptr %1152, i64 8
  %tbl_size_ptr.i.i11.i5371 = getelementptr i8, ptr %1152, i64 16
  %offset_tbl_ptr.i.i12.i5372 = getelementptr i8, ptr %1152, i64 40
  %hash_coef.i.i13.i5373 = load i64, ptr %hash_coef_ptr.i.i10.i5370, align 4
  %tbl_size.i.i14.i5374 = load i64, ptr %tbl_size_ptr.i.i11.i5371, align 4
  %offset_tbl.i.i15.i5375 = load ptr, ptr %offset_tbl_ptr.i.i12.i5372, align 8
  %product.i.i.i16.i5376 = mul i64 %hash_coef.i.i13.i5373, -5261542750394134544
  %shifted.i.i.i17.i5377 = lshr i64 %product.i.i.i16.i5376, 32
  %xored.i.i.i18.i5378 = xor i64 %shifted.i.i.i17.i5377, %product.i.i.i16.i5376
  %hash.i.i.i19.i5379 = and i64 %xored.i.i.i18.i5378, %tbl_size.i.i14.i5374
  %offset_ptr.i.i20.i5380 = getelementptr i32, ptr %offset_tbl.i.i15.i5375, i64 %hash.i.i.i19.i5379
  %offset.i.i21.i5381 = load i32, ptr %offset_ptr.i.i20.i5380, align 4
  %eq.i.i5382 = icmp eq i32 %1158, %offset.i.i21.i5381
  call void @llvm.assume(i1 %eq.i.i5382) #30
  %1160 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1161 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1152)
  %1162 = sext i32 %1158 to i64
  %1163 = getelementptr ptr, ptr %1152, i64 %1162
  %1164 = getelementptr i8, ptr %1163, i64 64
  %1165 = load ptr, ptr %1164, align 8
  %1166 = call ptr %1165({ ptr, ptr, ptr, i32 } %1159, ptr nonnull %2)
  %1167 = call i32 %1166({ ptr, ptr, ptr, i32 } %1159, { ptr, ptr, ptr, i32 } %1159, ptr nonnull %2)
  %1168 = add i32 %1167, -1
  %1169 = and i32 %1168, %1147
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %1170 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1171 = load ptr, ptr %293, align 8
  %1172 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1171, 0
  %1173 = load ptr, ptr %294, align 8
  %1174 = insertvalue { ptr, ptr, ptr, i32 } %1172, ptr %1173, 1
  %1175 = load ptr, ptr %383, align 8
  %1176 = insertvalue { ptr, ptr, ptr, i32 } %1174, ptr %1175, 2
  %1177 = load i32, ptr %295, align 4
  %1178 = insertvalue { ptr, ptr, ptr, i32 } %1176, i32 %1177, 3
  %hash_coef_ptr.i.i172.i4554 = getelementptr i8, ptr %1171, i64 8
  %tbl_size_ptr.i.i173.i4555 = getelementptr i8, ptr %1171, i64 16
  %offset_tbl_ptr.i.i174.i4556 = getelementptr i8, ptr %1171, i64 40
  %hash_coef.i.i175.i4557 = load i64, ptr %hash_coef_ptr.i.i172.i4554, align 4
  %tbl_size.i.i176.i4558 = load i64, ptr %tbl_size_ptr.i.i173.i4555, align 4
  %offset_tbl.i.i177.i4559 = load ptr, ptr %offset_tbl_ptr.i.i174.i4556, align 8
  %product.i.i.i178.i4560 = mul i64 %hash_coef.i.i175.i4557, -5261542750394134544
  %shifted.i.i.i179.i4561 = lshr i64 %product.i.i.i178.i4560, 32
  %xored.i.i.i180.i4562 = xor i64 %shifted.i.i.i179.i4561, %product.i.i.i178.i4560
  %hash.i.i.i181.i4563 = and i64 %xored.i.i.i180.i4562, %tbl_size.i.i176.i4558
  %offset_ptr.i.i182.i4564 = getelementptr i32, ptr %offset_tbl.i.i177.i4559, i64 %hash.i.i.i181.i4563
  %offset.i.i183.i4565 = load i32, ptr %offset_ptr.i.i182.i4564, align 4
  %eq.i.i4566 = icmp eq i32 %1177, %offset.i.i183.i4565
  call void @llvm.assume(i1 %eq.i.i4566) #30
  store ptr @_parameterization_Ptri32, ptr %51, align 8
  %1179 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %51)
  %1180 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1171)
  %1181 = sext i32 %1177 to i64
  %1182 = getelementptr ptr, ptr %1171, i64 %1181
  %1183 = getelementptr i8, ptr %1182, i64 120
  %1184 = load ptr, ptr %1183, align 8
  store ptr @i32_typ, ptr %52, align 8
  %1185 = call ptr %1184({ ptr, ptr, ptr, i32 } %1178, ptr nonnull %52)
  %1186 = call { ptr, i160 } %1185({ ptr, ptr, ptr, i32 } %1178, { ptr, ptr, ptr, i32 } %1178, ptr nonnull %51, i32 %1169)
  %.fca.0.extract112.i4567 = extractvalue { ptr, i160 } %1186, 0
  %1187 = insertvalue { ptr, i160 } undef, ptr %1134, 0
  %.sroa.3111.0.insert.ext.i4568 = zext i32 %1135 to i160
  %.sroa.3111.0.insert.shift.i4569 = shl nuw i160 %.sroa.3111.0.insert.ext.i4568, 128
  %.sroa.2110.0.insert.ext.i4570 = zext i64 %1139 to i160
  %.sroa.2110.0.insert.shift.i4571 = shl nuw nsw i160 %.sroa.2110.0.insert.ext.i4570, 64
  %.sroa.2110.0.insert.insert.i4572 = or disjoint i160 %.sroa.2110.0.insert.shift.i4571, %.sroa.3111.0.insert.shift.i4569
  %.sroa.0109.0.insert.ext.i4573 = zext i64 %1137 to i160
  %.sroa.0109.0.insert.insert.i4574 = or disjoint i160 %.sroa.2110.0.insert.insert.i4572, %.sroa.0109.0.insert.ext.i4573
  %1188 = insertvalue { ptr, i160 } %1187, i160 %.sroa.0109.0.insert.insert.i4574, 1
  %1189 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1190 = load ptr, ptr %293, align 8
  %1191 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1190, 0
  %1192 = load ptr, ptr %294, align 8
  %1193 = insertvalue { ptr, ptr, ptr, i32 } %1191, ptr %1192, 1
  %1194 = load ptr, ptr %383, align 8
  %1195 = insertvalue { ptr, ptr, ptr, i32 } %1193, ptr %1194, 2
  %1196 = load i32, ptr %295, align 4
  %1197 = insertvalue { ptr, ptr, ptr, i32 } %1195, i32 %1196, 3
  %hash_coef_ptr.i.i186.i4579 = getelementptr i8, ptr %1190, i64 8
  %tbl_size_ptr.i.i187.i4580 = getelementptr i8, ptr %1190, i64 16
  %offset_tbl_ptr.i.i188.i4581 = getelementptr i8, ptr %1190, i64 40
  %hash_coef.i.i189.i4582 = load i64, ptr %hash_coef_ptr.i.i186.i4579, align 4
  %tbl_size.i.i190.i4583 = load i64, ptr %tbl_size_ptr.i.i187.i4580, align 4
  %offset_tbl.i.i191.i4584 = load ptr, ptr %offset_tbl_ptr.i.i188.i4581, align 8
  %product.i.i.i192.i4585 = mul i64 %hash_coef.i.i189.i4582, -5261542750394134544
  %shifted.i.i.i193.i4586 = lshr i64 %product.i.i.i192.i4585, 32
  %xored.i.i.i194.i4587 = xor i64 %shifted.i.i.i193.i4586, %product.i.i.i192.i4585
  %hash.i.i.i195.i4588 = and i64 %xored.i.i.i194.i4587, %tbl_size.i.i190.i4583
  %offset_ptr.i.i196.i4589 = getelementptr i32, ptr %offset_tbl.i.i191.i4584, i64 %hash.i.i.i195.i4588
  %offset.i.i197.i4590 = load i32, ptr %offset_ptr.i.i196.i4589, align 4
  %eq.i200.i4591 = icmp eq i32 %1196, %offset.i.i197.i4590
  call void @llvm.assume(i1 %eq.i200.i4591) #30
  %1198 = load ptr, ptr %result.i, align 8
  %1199 = load ptr, ptr %276, align 8
  %result.i.i4592 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1200 = getelementptr i8, ptr %result.i.i4592, i64 16
  store ptr %1199, ptr %1200, align 8
  %1201 = getelementptr i8, ptr %result.i.i4592, i64 8
  store ptr %1198, ptr %1201, align 8
  %1202 = getelementptr i8, ptr %result.i.i4592, i64 24
  store ptr null, ptr %1202, align 8
  %1203 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i4592)
  store ptr @Entry, ptr %result.i.i4592, align 8
  store ptr @_parameterization_Ptri32, ptr %53, align 8
  store ptr %result.i.i4592, ptr %468, align 8
  %1204 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %53)
  %1205 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1190)
  %1206 = sext i32 %1196 to i64
  %1207 = getelementptr ptr, ptr %1190, i64 %1206
  %1208 = getelementptr i8, ptr %1207, i64 128
  %1209 = load ptr, ptr %1208, align 8
  store ptr @i32_typ, ptr %54, align 8
  store ptr %1134, ptr %469, align 8
  %1210 = call ptr %1209({ ptr, ptr, ptr, i32 } %1197, ptr nonnull %54)
  call void %1210({ ptr, ptr, ptr, i32 } %1197, { ptr, ptr, ptr, i32 } %1197, ptr nonnull %53, i32 %1169, { ptr, i160 } %1188)
  %1211 = icmp ne ptr %.fca.0.extract112.i4567, @nil_typ
  %1212 = icmp ne ptr %.fca.0.extract112.i4567, null
  %.not140.i4593 = and i1 %1211, %1212
  br i1 %.not140.i4593, label %.cont.cont.i4534, label %1302

1213:                                             ; preds = %1133
  %1214 = add i32 %1147, 2127912214
  %1215 = shl i32 %1147, 12
  %1216 = add i32 %1214, %1215
  %1217 = ashr i32 %1216, 19
  %1218 = xor i32 %1216, %1217
  %1219 = xor i32 %1218, -949894596
  %1220 = add i32 %1219, 374761393
  %1221 = shl i32 %1219, 5
  %1222 = add i32 %1220, %1221
  %1223 = add i32 %1222, -744332180
  %1224 = shl i32 %1222, 9
  %1225 = xor i32 %1223, %1224
  %1226 = add i32 %1225, -42973499
  %1227 = shl i32 %1225, 3
  %1228 = add i32 %1226, %1227
  %1229 = ashr i32 %1228, 16
  %1230 = xor i32 %1228, %1229
  %1231 = xor i32 %1230, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %1232 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1233 = load ptr, ptr %306, align 8
  %1234 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1233, 0
  %1235 = load ptr, ptr %307, align 8
  %1236 = insertvalue { ptr, ptr, ptr, i32 } %1234, ptr %1235, 1
  %1237 = load ptr, ptr %384, align 8
  %1238 = insertvalue { ptr, ptr, ptr, i32 } %1236, ptr %1237, 2
  %1239 = load i32, ptr %308, align 4
  %1240 = insertvalue { ptr, ptr, ptr, i32 } %1238, i32 %1239, 3
  %hash_coef_ptr.i.i10.i5400 = getelementptr i8, ptr %1233, i64 8
  %tbl_size_ptr.i.i11.i5401 = getelementptr i8, ptr %1233, i64 16
  %offset_tbl_ptr.i.i12.i5402 = getelementptr i8, ptr %1233, i64 40
  %hash_coef.i.i13.i5403 = load i64, ptr %hash_coef_ptr.i.i10.i5400, align 4
  %tbl_size.i.i14.i5404 = load i64, ptr %tbl_size_ptr.i.i11.i5401, align 4
  %offset_tbl.i.i15.i5405 = load ptr, ptr %offset_tbl_ptr.i.i12.i5402, align 8
  %product.i.i.i16.i5406 = mul i64 %hash_coef.i.i13.i5403, -5261542750394134544
  %shifted.i.i.i17.i5407 = lshr i64 %product.i.i.i16.i5406, 32
  %xored.i.i.i18.i5408 = xor i64 %shifted.i.i.i17.i5407, %product.i.i.i16.i5406
  %hash.i.i.i19.i5409 = and i64 %xored.i.i.i18.i5408, %tbl_size.i.i14.i5404
  %offset_ptr.i.i20.i5410 = getelementptr i32, ptr %offset_tbl.i.i15.i5405, i64 %hash.i.i.i19.i5409
  %offset.i.i21.i5411 = load i32, ptr %offset_ptr.i.i20.i5410, align 4
  %eq.i.i5412 = icmp eq i32 %1239, %offset.i.i21.i5411
  call void @llvm.assume(i1 %eq.i.i5412) #30
  %1241 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1242 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1233)
  %1243 = sext i32 %1239 to i64
  %1244 = getelementptr ptr, ptr %1233, i64 %1243
  %1245 = getelementptr i8, ptr %1244, i64 64
  %1246 = load ptr, ptr %1245, align 8
  %1247 = call ptr %1246({ ptr, ptr, ptr, i32 } %1240, ptr nonnull %2)
  %1248 = call i32 %1247({ ptr, ptr, ptr, i32 } %1240, { ptr, ptr, ptr, i32 } %1240, ptr nonnull %2)
  %1249 = add i32 %1248, -1
  %1250 = and i32 %1249, %1231
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %1251 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1252 = load ptr, ptr %306, align 8
  %1253 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1252, 0
  %1254 = load ptr, ptr %307, align 8
  %1255 = insertvalue { ptr, ptr, ptr, i32 } %1253, ptr %1254, 1
  %1256 = load ptr, ptr %384, align 8
  %1257 = insertvalue { ptr, ptr, ptr, i32 } %1255, ptr %1256, 2
  %1258 = load i32, ptr %308, align 4
  %1259 = insertvalue { ptr, ptr, ptr, i32 } %1257, i32 %1258, 3
  %hash_coef_ptr.i.i202.i4490 = getelementptr i8, ptr %1252, i64 8
  %tbl_size_ptr.i.i203.i4491 = getelementptr i8, ptr %1252, i64 16
  %offset_tbl_ptr.i.i204.i4492 = getelementptr i8, ptr %1252, i64 40
  %hash_coef.i.i205.i4493 = load i64, ptr %hash_coef_ptr.i.i202.i4490, align 4
  %tbl_size.i.i206.i4494 = load i64, ptr %tbl_size_ptr.i.i203.i4491, align 4
  %offset_tbl.i.i207.i4495 = load ptr, ptr %offset_tbl_ptr.i.i204.i4492, align 8
  %product.i.i.i208.i4496 = mul i64 %hash_coef.i.i205.i4493, -5261542750394134544
  %shifted.i.i.i209.i4497 = lshr i64 %product.i.i.i208.i4496, 32
  %xored.i.i.i210.i4498 = xor i64 %shifted.i.i.i209.i4497, %product.i.i.i208.i4496
  %hash.i.i.i211.i4499 = and i64 %xored.i.i.i210.i4498, %tbl_size.i.i206.i4494
  %offset_ptr.i.i212.i4500 = getelementptr i32, ptr %offset_tbl.i.i207.i4495, i64 %hash.i.i.i211.i4499
  %offset.i.i213.i4501 = load i32, ptr %offset_ptr.i.i212.i4500, align 4
  %eq.i216.i4502 = icmp eq i32 %1258, %offset.i.i213.i4501
  call void @llvm.assume(i1 %eq.i216.i4502) #30
  store ptr @_parameterization_Ptri32, ptr %59, align 8
  %1260 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %59)
  %1261 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1252)
  %1262 = sext i32 %1258 to i64
  %1263 = getelementptr ptr, ptr %1252, i64 %1262
  %1264 = getelementptr i8, ptr %1263, i64 120
  %1265 = load ptr, ptr %1264, align 8
  store ptr @i32_typ, ptr %60, align 8
  %1266 = call ptr %1265({ ptr, ptr, ptr, i32 } %1259, ptr nonnull %60)
  %1267 = call { ptr, i160 } %1266({ ptr, ptr, ptr, i32 } %1259, { ptr, ptr, ptr, i32 } %1259, ptr nonnull %59, i32 %1250)
  %.fca.0.extract87.i4503 = extractvalue { ptr, i160 } %1267, 0
  %1268 = insertvalue { ptr, i160 } undef, ptr %1134, 0
  %.sroa.3.0.insert.ext.i4504 = zext i32 %1135 to i160
  %.sroa.3.0.insert.shift.i4505 = shl nuw i160 %.sroa.3.0.insert.ext.i4504, 128
  %.sroa.2.0.insert.ext.i4506 = zext i64 %1139 to i160
  %.sroa.2.0.insert.shift.i4507 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i4506, 64
  %.sroa.2.0.insert.insert.i4508 = or disjoint i160 %.sroa.2.0.insert.shift.i4507, %.sroa.3.0.insert.shift.i4505
  %.sroa.0.0.insert.ext.i4509 = zext i64 %1137 to i160
  %.sroa.0.0.insert.insert.i4510 = or disjoint i160 %.sroa.2.0.insert.insert.i4508, %.sroa.0.0.insert.ext.i4509
  %1269 = insertvalue { ptr, i160 } %1268, i160 %.sroa.0.0.insert.insert.i4510, 1
  %1270 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1271 = load ptr, ptr %306, align 8
  %1272 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1271, 0
  %1273 = load ptr, ptr %307, align 8
  %1274 = insertvalue { ptr, ptr, ptr, i32 } %1272, ptr %1273, 1
  %1275 = load ptr, ptr %384, align 8
  %1276 = insertvalue { ptr, ptr, ptr, i32 } %1274, ptr %1275, 2
  %1277 = load i32, ptr %308, align 4
  %1278 = insertvalue { ptr, ptr, ptr, i32 } %1276, i32 %1277, 3
  %hash_coef_ptr.i.i218.i4515 = getelementptr i8, ptr %1271, i64 8
  %tbl_size_ptr.i.i219.i4516 = getelementptr i8, ptr %1271, i64 16
  %offset_tbl_ptr.i.i220.i4517 = getelementptr i8, ptr %1271, i64 40
  %hash_coef.i.i221.i4518 = load i64, ptr %hash_coef_ptr.i.i218.i4515, align 4
  %tbl_size.i.i222.i4519 = load i64, ptr %tbl_size_ptr.i.i219.i4516, align 4
  %offset_tbl.i.i223.i4520 = load ptr, ptr %offset_tbl_ptr.i.i220.i4517, align 8
  %product.i.i.i224.i4521 = mul i64 %hash_coef.i.i221.i4518, -5261542750394134544
  %shifted.i.i.i225.i4522 = lshr i64 %product.i.i.i224.i4521, 32
  %xored.i.i.i226.i4523 = xor i64 %shifted.i.i.i225.i4522, %product.i.i.i224.i4521
  %hash.i.i.i227.i4524 = and i64 %xored.i.i.i226.i4523, %tbl_size.i.i222.i4519
  %offset_ptr.i.i228.i4525 = getelementptr i32, ptr %offset_tbl.i.i223.i4520, i64 %hash.i.i.i227.i4524
  %offset.i.i229.i4526 = load i32, ptr %offset_ptr.i.i228.i4525, align 4
  %eq.i232.i4527 = icmp eq i32 %1277, %offset.i.i229.i4526
  call void @llvm.assume(i1 %eq.i232.i4527) #30
  %1279 = load ptr, ptr %result.i, align 8
  %1280 = load ptr, ptr %276, align 8
  %result.i233.i4528 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1281 = getelementptr i8, ptr %result.i233.i4528, i64 16
  store ptr %1280, ptr %1281, align 8
  %1282 = getelementptr i8, ptr %result.i233.i4528, i64 8
  store ptr %1279, ptr %1282, align 8
  %1283 = getelementptr i8, ptr %result.i233.i4528, i64 24
  store ptr null, ptr %1283, align 8
  %1284 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i233.i4528)
  store ptr @Entry, ptr %result.i233.i4528, align 8
  store ptr @_parameterization_Ptri32, ptr %61, align 8
  store ptr %result.i233.i4528, ptr %466, align 8
  %1285 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %61)
  %1286 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1271)
  %1287 = sext i32 %1277 to i64
  %1288 = getelementptr ptr, ptr %1271, i64 %1287
  %1289 = getelementptr i8, ptr %1288, i64 128
  %1290 = load ptr, ptr %1289, align 8
  store ptr @i32_typ, ptr %62, align 8
  store ptr %1134, ptr %467, align 8
  %1291 = call ptr %1290({ ptr, ptr, ptr, i32 } %1278, ptr nonnull %62)
  call void %1291({ ptr, ptr, ptr, i32 } %1278, { ptr, ptr, ptr, i32 } %1278, ptr nonnull %61, i32 %1250, { ptr, i160 } %1269)
  %1292 = icmp ne ptr %.fca.0.extract87.i4503, @nil_typ
  %1293 = icmp ne ptr %.fca.0.extract87.i4503, null
  %.not138.i4529 = and i1 %1292, %1293
  br i1 %.not138.i4529, label %.cont.cont.i4534, label %1302

.cont.cont.i4534:                                 ; preds = %1213, %1150
  %.sink5116 = phi { ptr, i160 } [ %1186, %1150 ], [ %1267, %1213 ]
  %1294 = phi i32 [ 2, %1150 ], [ 1, %1213 ]
  %vptr.i248.sroa.speculated.i4535 = phi ptr [ %.fca.0.extract112.i4567, %1150 ], [ %.fca.0.extract87.i4503, %1213 ]
  %.fca.1.extract89.i4530 = extractvalue { ptr, i160 } %.sink5116, 1
  %.sroa.3407.sroa.4.0.extract.shift.i4531 = lshr i160 %.fca.1.extract89.i4530, 64
  %1295 = trunc i160 %.sroa.3407.sroa.4.0.extract.shift.i4531 to i64
  %1296 = insertelement <2 x i64> poison, i64 %1295, i64 0
  %1297 = trunc i160 %.fca.1.extract89.i4530 to i64
  %1298 = insertelement <2 x i64> %1296, i64 %1297, i64 1
  %hash_coef_ptr.i.i249.i4538 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i4535, i64 8
  %tbl_size_ptr.i.i250.i4539 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i4535, i64 16
  %offset_tbl_ptr.i.i251.i4540 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i4535, i64 40
  %hash_coef.i.i252.i4541 = load i64, ptr %hash_coef_ptr.i.i249.i4538, align 4
  %tbl_size.i.i253.i4542 = load i64, ptr %tbl_size_ptr.i.i250.i4539, align 4
  %offset_tbl.i.i254.i4543 = load ptr, ptr %offset_tbl_ptr.i.i251.i4540, align 8
  %product.i.i.i255.i4544 = mul i64 %hash_coef.i.i252.i4541, 4015701072841558310
  %shifted.i.i.i256.i4545 = lshr i64 %product.i.i.i255.i4544, 32
  %xored.i.i.i257.i4546 = xor i64 %shifted.i.i.i256.i4545, %product.i.i.i255.i4544
  %hash.i.i.i258.i4547 = and i64 %xored.i.i.i257.i4546, %tbl_size.i.i253.i4542
  %offset_ptr.i.i259.i4548 = getelementptr i32, ptr %offset_tbl.i.i254.i4543, i64 %hash.i.i.i258.i4547
  %offset.i.i260.i4549 = load i32, ptr %offset_ptr.i.i259.i4548, align 4
  %1299 = add nuw nsw i32 %.reg2mem193.0677.i4485, 1
  %1300 = load i32, ptr %309, align 4
  %1301 = icmp slt i32 %1299, %1300
  br i1 %1301, label %1133, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4596

1302:                                             ; preds = %1213, %1150
  %1303 = phi ptr [ %63, %1213 ], [ %55, %1150 ]
  %1304 = phi ptr [ %64, %1213 ], [ %56, %1150 ]
  %1305 = phi ptr [ %65, %1213 ], [ %57, %1150 ]
  %1306 = phi ptr [ %.sroa.0.i4468, %1213 ], [ %.sroa.0680.i4467, %1150 ]
  %1307 = phi ptr [ %66, %1213 ], [ %58, %1150 ]
  %1308 = load i32, ptr %385, align 4
  store i32 %1308, ptr %1303, align 4
  store i32 1, ptr %1304, align 4
  %1309 = add i32 %1308, 1
  store i32 %1309, ptr %1305, align 4
  %1310 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  store i32 %1309, ptr %385, align 4
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %1307, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %1306, align 8
  br label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4596

HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4596: ; preds = %.cont.cont.i4534, %1122, %1302
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %51)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %52)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %53)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %54)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %55)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %56)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %57)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i4467)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %58)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %59)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %60)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %61)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %62)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %63)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %64)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %65)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i4468)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %66)
  br label %._crit_edge1.i3403

._crit_edge1.i3403:                               ; preds = %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4596, %1114
  %1311 = add nuw nsw i32 %.reg2mem13.079.i3400, 1
  %1312 = icmp slt i32 %1311, %1073
  br i1 %1312, label %1114, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3421

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3421: ; preds = %._crit_edge1.i3403
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %141)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %142)
  %1313 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %139)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %140)
  %invariant.gep.i3424 = getelementptr i8, ptr %1059, i64 120
  %offset_tbl.i.i24.i3426 = load ptr, ptr %offset_tbl_ptr.i.i48.i2252, align 8
  %hash_coef.i.i22.i3428 = load i64, ptr %hash_coef_ptr.i.i46.i2250, align 4
  %product.i.i.i25.i3429 = mul i64 %hash_coef.i.i22.i3428, -5261542750394134544
  %shifted.i.i.i26.i3430 = lshr i64 %product.i.i.i25.i3429, 32
  %xored.i.i.i27.i3431 = xor i64 %shifted.i.i.i26.i3430, %product.i.i.i25.i3429
  %tbl_size.i.i23.i3433 = load i64, ptr %tbl_size_ptr.i.i47.i2251, align 4
  %hash.i.i.i28.i3434 = and i64 %xored.i.i.i27.i3431, %tbl_size.i.i23.i3433
  %offset_ptr.i.i29.i3435 = getelementptr i32, ptr %offset_tbl.i.i24.i3426, i64 %hash.i.i.i28.i3434
  %offset.i.i30.i3436 = load i32, ptr %offset_ptr.i.i29.i3435, align 4
  %1314 = insertvalue { ptr, ptr, ptr, i32 } %1064, i32 %offset.i.i30.i3436, 3
  %1315 = sext i32 %offset.i.i30.i3436 to i64
  %gep.i3451 = getelementptr ptr, ptr %invariant.gep.i3424, i64 %1315
  %1316 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %1317

1317:                                             ; preds = %._crit_edge1.i3455, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3421
  %.reg2mem13.079.i3452 = phi i32 [ 0, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3421 ], [ %1514, %._crit_edge1.i3455 ]
  store ptr @_parameterization_Ptri32, ptr %139, align 8
  %1318 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %139)
  %1319 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %1059)
  %1320 = load ptr, ptr %gep.i3451, align 8
  store ptr @i32_typ, ptr %140, align 8
  %1321 = call ptr %1320({ ptr, ptr, ptr, i32 } %1314, ptr nonnull %140)
  %1322 = call { ptr, i160 } %1321({ ptr, ptr, ptr, i32 } %1314, { ptr, ptr, ptr, i32 } %1314, ptr nonnull %139, i32 %.reg2mem13.079.i3452)
  %.fca.0.extract11.i3453 = extractvalue { ptr, i160 } %1322, 0
  %1323 = icmp ne ptr %.fca.0.extract11.i3453, @nil_typ
  %1324 = icmp ne ptr %.fca.0.extract11.i3453, null
  %.not17.i3454 = and i1 %1323, %1324
  br i1 %.not17.i3454, label %1325, label %._crit_edge1.i3455

1325:                                             ; preds = %1317
  %hash_coef_ptr.i.i33.i3460 = getelementptr i8, ptr %.fca.0.extract11.i3453, i64 8
  %tbl_size_ptr.i.i34.i3461 = getelementptr i8, ptr %.fca.0.extract11.i3453, i64 16
  %offset_tbl_ptr.i.i35.i3462 = getelementptr i8, ptr %.fca.0.extract11.i3453, i64 40
  %1326 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %35)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %36)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %37)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %38)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %39)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %40)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %41)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0680.i4597)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %42)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %43)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %44)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %45)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %46)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %47)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %48)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %49)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i4599)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %50)
  %hash_coef.i.i147.i4618 = load i64, ptr %hash_coef_ptr.i.i33.i3460, align 4
  %tbl_size.i.i148.i4619 = load i64, ptr %tbl_size_ptr.i.i34.i3461, align 4
  %offset_tbl.i.i149.i4620 = load ptr, ptr %offset_tbl_ptr.i.i35.i3462, align 8
  %product.i.i.i150.i4621 = mul i64 %hash_coef.i.i147.i4618, 4015701072841558310
  %shifted.i.i.i151.i4622 = lshr i64 %product.i.i.i150.i4621, 32
  %xored.i.i.i152.i4623 = xor i64 %shifted.i.i.i151.i4622, %product.i.i.i150.i4621
  %hash.i.i.i153.i4624 = and i64 %xored.i.i.i152.i4623, %tbl_size.i.i148.i4619
  %offset_ptr.i.i154.i4625 = getelementptr i32, ptr %offset_tbl.i.i149.i4620, i64 %hash.i.i.i153.i4624
  %offset.i.i169.i4626 = load i32, ptr %offset_ptr.i.i154.i4625, align 4
  %1327 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1328 = load i32, ptr %309, align 4
  %1329 = icmp sgt i32 %1328, 0
  br i1 %1329, label %.lr.ph.i4632, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4752

.lr.ph.i4632:                                     ; preds = %1325
  %.fca.1.extract13.i3456 = extractvalue { ptr, i160 } %1322, 1
  %.sroa.576.8.extract.shift.i3458 = lshr i160 %.fca.1.extract13.i3456, 64
  %1330 = insertelement <2 x i160> poison, i160 %.sroa.576.8.extract.shift.i3458, i64 0
  %1331 = insertelement <2 x i160> %1330, i160 %.fca.1.extract13.i3456, i64 1
  %1332 = trunc <2 x i160> %1331 to <2 x i64>
  %1333 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i3453, 0
  %1334 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1335 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract11.i3453)
  %invariant.gep5080 = getelementptr i8, ptr %.fca.0.extract11.i3453, i64 64
  br label %1336

1336:                                             ; preds = %.cont.cont.i4685, %.lr.ph.i4632
  %1337 = phi ptr [ %.fca.0.extract11.i3453, %.lr.ph.i4632 ], [ %vptr.i248.sroa.speculated.i4688, %.cont.cont.i4685 ]
  %1338 = phi i32 [ %offset.i.i169.i4626, %.lr.ph.i4632 ], [ %offset.i.i260.i4702, %.cont.cont.i4685 ]
  %.reg2mem195.0678.i4633 = phi i32 [ 1, %.lr.ph.i4632 ], [ %1497, %.cont.cont.i4685 ]
  %.reg2mem193.0677.i4634 = phi i32 [ 0, %.lr.ph.i4632 ], [ %1502, %.cont.cont.i4685 ]
  %1339 = phi <2 x i64> [ %1332, %.lr.ph.i4632 ], [ %1501, %.cont.cont.i4685 ]
  %1340 = extractelement <2 x i64> %1339, i64 1
  %1341 = inttoptr i64 %1340 to ptr
  %1342 = extractelement <2 x i64> %1339, i64 0
  %1343 = inttoptr i64 %1342 to ptr
  %1344 = insertvalue { ptr, ptr, ptr, i32 } %1333, ptr %1341, 1
  %1345 = insertvalue { ptr, ptr, ptr, i32 } %1344, ptr %1343, 2
  %1346 = insertvalue { ptr, ptr, ptr, i32 } %1345, i32 %1338, 3
  %1347 = sext i32 %1338 to i64
  %gep5081 = getelementptr ptr, ptr %invariant.gep5080, i64 %1347
  %1348 = load ptr, ptr %gep5081, align 8
  %1349 = call ptr %1348({ ptr, ptr, ptr, i32 } %1346, ptr nonnull %2)
  %1350 = call i32 %1349({ ptr, ptr, ptr, i32 } %1346, { ptr, ptr, ptr, i32 } %1346, ptr nonnull %2)
  %1351 = icmp eq i32 %.reg2mem195.0678.i4633, 1
  %1352 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br i1 %1351, label %1353, label %1416

1353:                                             ; preds = %1336
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %1354 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1355 = load ptr, ptr %293, align 8
  %1356 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1355, 0
  %1357 = load ptr, ptr %294, align 8
  %1358 = insertvalue { ptr, ptr, ptr, i32 } %1356, ptr %1357, 1
  %1359 = load ptr, ptr %383, align 8
  %1360 = insertvalue { ptr, ptr, ptr, i32 } %1358, ptr %1359, 2
  %1361 = load i32, ptr %295, align 4
  %1362 = insertvalue { ptr, ptr, ptr, i32 } %1360, i32 %1361, 3
  %hash_coef_ptr.i.i10.i5430 = getelementptr i8, ptr %1355, i64 8
  %tbl_size_ptr.i.i11.i5431 = getelementptr i8, ptr %1355, i64 16
  %offset_tbl_ptr.i.i12.i5432 = getelementptr i8, ptr %1355, i64 40
  %hash_coef.i.i13.i5433 = load i64, ptr %hash_coef_ptr.i.i10.i5430, align 4
  %tbl_size.i.i14.i5434 = load i64, ptr %tbl_size_ptr.i.i11.i5431, align 4
  %offset_tbl.i.i15.i5435 = load ptr, ptr %offset_tbl_ptr.i.i12.i5432, align 8
  %product.i.i.i16.i5436 = mul i64 %hash_coef.i.i13.i5433, -5261542750394134544
  %shifted.i.i.i17.i5437 = lshr i64 %product.i.i.i16.i5436, 32
  %xored.i.i.i18.i5438 = xor i64 %shifted.i.i.i17.i5437, %product.i.i.i16.i5436
  %hash.i.i.i19.i5439 = and i64 %xored.i.i.i18.i5438, %tbl_size.i.i14.i5434
  %offset_ptr.i.i20.i5440 = getelementptr i32, ptr %offset_tbl.i.i15.i5435, i64 %hash.i.i.i19.i5439
  %offset.i.i21.i5441 = load i32, ptr %offset_ptr.i.i20.i5440, align 4
  %eq.i.i5442 = icmp eq i32 %1361, %offset.i.i21.i5441
  call void @llvm.assume(i1 %eq.i.i5442) #30
  %1363 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1364 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1355)
  %1365 = sext i32 %1361 to i64
  %1366 = getelementptr ptr, ptr %1355, i64 %1365
  %1367 = getelementptr i8, ptr %1366, i64 64
  %1368 = load ptr, ptr %1367, align 8
  %1369 = call ptr %1368({ ptr, ptr, ptr, i32 } %1362, ptr nonnull %2)
  %1370 = call i32 %1369({ ptr, ptr, ptr, i32 } %1362, { ptr, ptr, ptr, i32 } %1362, ptr nonnull %2)
  %1371 = add i32 %1370, -1
  %1372 = and i32 %1371, %1350
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %1373 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1374 = load ptr, ptr %293, align 8
  %1375 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1374, 0
  %1376 = load ptr, ptr %294, align 8
  %1377 = insertvalue { ptr, ptr, ptr, i32 } %1375, ptr %1376, 1
  %1378 = load ptr, ptr %383, align 8
  %1379 = insertvalue { ptr, ptr, ptr, i32 } %1377, ptr %1378, 2
  %1380 = load i32, ptr %295, align 4
  %1381 = insertvalue { ptr, ptr, ptr, i32 } %1379, i32 %1380, 3
  %hash_coef_ptr.i.i172.i4707 = getelementptr i8, ptr %1374, i64 8
  %tbl_size_ptr.i.i173.i4708 = getelementptr i8, ptr %1374, i64 16
  %offset_tbl_ptr.i.i174.i4709 = getelementptr i8, ptr %1374, i64 40
  %hash_coef.i.i175.i4710 = load i64, ptr %hash_coef_ptr.i.i172.i4707, align 4
  %tbl_size.i.i176.i4711 = load i64, ptr %tbl_size_ptr.i.i173.i4708, align 4
  %offset_tbl.i.i177.i4712 = load ptr, ptr %offset_tbl_ptr.i.i174.i4709, align 8
  %product.i.i.i178.i4713 = mul i64 %hash_coef.i.i175.i4710, -5261542750394134544
  %shifted.i.i.i179.i4714 = lshr i64 %product.i.i.i178.i4713, 32
  %xored.i.i.i180.i4715 = xor i64 %shifted.i.i.i179.i4714, %product.i.i.i178.i4713
  %hash.i.i.i181.i4716 = and i64 %xored.i.i.i180.i4715, %tbl_size.i.i176.i4711
  %offset_ptr.i.i182.i4717 = getelementptr i32, ptr %offset_tbl.i.i177.i4712, i64 %hash.i.i.i181.i4716
  %offset.i.i183.i4718 = load i32, ptr %offset_ptr.i.i182.i4717, align 4
  %eq.i.i4719 = icmp eq i32 %1380, %offset.i.i183.i4718
  call void @llvm.assume(i1 %eq.i.i4719) #30
  store ptr @_parameterization_Ptri32, ptr %35, align 8
  %1382 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %35)
  %1383 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1374)
  %1384 = sext i32 %1380 to i64
  %1385 = getelementptr ptr, ptr %1374, i64 %1384
  %1386 = getelementptr i8, ptr %1385, i64 120
  %1387 = load ptr, ptr %1386, align 8
  store ptr @i32_typ, ptr %36, align 8
  %1388 = call ptr %1387({ ptr, ptr, ptr, i32 } %1381, ptr nonnull %36)
  %1389 = call { ptr, i160 } %1388({ ptr, ptr, ptr, i32 } %1381, { ptr, ptr, ptr, i32 } %1381, ptr nonnull %35, i32 %1372)
  %.fca.0.extract112.i4720 = extractvalue { ptr, i160 } %1389, 0
  %1390 = insertvalue { ptr, i160 } undef, ptr %1337, 0
  %.sroa.3111.0.insert.ext.i4721 = zext i32 %1338 to i160
  %.sroa.3111.0.insert.shift.i4722 = shl nuw i160 %.sroa.3111.0.insert.ext.i4721, 128
  %.sroa.2110.0.insert.ext.i4723 = zext i64 %1342 to i160
  %.sroa.2110.0.insert.shift.i4724 = shl nuw nsw i160 %.sroa.2110.0.insert.ext.i4723, 64
  %.sroa.2110.0.insert.insert.i4725 = or disjoint i160 %.sroa.2110.0.insert.shift.i4724, %.sroa.3111.0.insert.shift.i4722
  %.sroa.0109.0.insert.ext.i4726 = zext i64 %1340 to i160
  %.sroa.0109.0.insert.insert.i4727 = or disjoint i160 %.sroa.2110.0.insert.insert.i4725, %.sroa.0109.0.insert.ext.i4726
  %1391 = insertvalue { ptr, i160 } %1390, i160 %.sroa.0109.0.insert.insert.i4727, 1
  %1392 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1393 = load ptr, ptr %293, align 8
  %1394 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1393, 0
  %1395 = load ptr, ptr %294, align 8
  %1396 = insertvalue { ptr, ptr, ptr, i32 } %1394, ptr %1395, 1
  %1397 = load ptr, ptr %383, align 8
  %1398 = insertvalue { ptr, ptr, ptr, i32 } %1396, ptr %1397, 2
  %1399 = load i32, ptr %295, align 4
  %1400 = insertvalue { ptr, ptr, ptr, i32 } %1398, i32 %1399, 3
  %hash_coef_ptr.i.i186.i4732 = getelementptr i8, ptr %1393, i64 8
  %tbl_size_ptr.i.i187.i4733 = getelementptr i8, ptr %1393, i64 16
  %offset_tbl_ptr.i.i188.i4734 = getelementptr i8, ptr %1393, i64 40
  %hash_coef.i.i189.i4735 = load i64, ptr %hash_coef_ptr.i.i186.i4732, align 4
  %tbl_size.i.i190.i4736 = load i64, ptr %tbl_size_ptr.i.i187.i4733, align 4
  %offset_tbl.i.i191.i4737 = load ptr, ptr %offset_tbl_ptr.i.i188.i4734, align 8
  %product.i.i.i192.i4738 = mul i64 %hash_coef.i.i189.i4735, -5261542750394134544
  %shifted.i.i.i193.i4739 = lshr i64 %product.i.i.i192.i4738, 32
  %xored.i.i.i194.i4740 = xor i64 %shifted.i.i.i193.i4739, %product.i.i.i192.i4738
  %hash.i.i.i195.i4741 = and i64 %xored.i.i.i194.i4740, %tbl_size.i.i190.i4736
  %offset_ptr.i.i196.i4742 = getelementptr i32, ptr %offset_tbl.i.i191.i4737, i64 %hash.i.i.i195.i4741
  %offset.i.i197.i4743 = load i32, ptr %offset_ptr.i.i196.i4742, align 4
  %eq.i200.i4744 = icmp eq i32 %1399, %offset.i.i197.i4743
  call void @llvm.assume(i1 %eq.i200.i4744) #30
  %1401 = load ptr, ptr %result.i, align 8
  %1402 = load ptr, ptr %276, align 8
  %result.i.i4745 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1403 = getelementptr i8, ptr %result.i.i4745, i64 16
  store ptr %1402, ptr %1403, align 8
  %1404 = getelementptr i8, ptr %result.i.i4745, i64 8
  store ptr %1401, ptr %1404, align 8
  %1405 = getelementptr i8, ptr %result.i.i4745, i64 24
  store ptr null, ptr %1405, align 8
  %1406 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i4745)
  store ptr @Entry, ptr %result.i.i4745, align 8
  store ptr @_parameterization_Ptri32, ptr %37, align 8
  store ptr %result.i.i4745, ptr %472, align 8
  %1407 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %37)
  %1408 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1393)
  %1409 = sext i32 %1399 to i64
  %1410 = getelementptr ptr, ptr %1393, i64 %1409
  %1411 = getelementptr i8, ptr %1410, i64 128
  %1412 = load ptr, ptr %1411, align 8
  store ptr @i32_typ, ptr %38, align 8
  store ptr %1337, ptr %473, align 8
  %1413 = call ptr %1412({ ptr, ptr, ptr, i32 } %1400, ptr nonnull %38)
  call void %1413({ ptr, ptr, ptr, i32 } %1400, { ptr, ptr, ptr, i32 } %1400, ptr nonnull %37, i32 %1372, { ptr, i160 } %1391)
  %1414 = icmp ne ptr %.fca.0.extract112.i4720, @nil_typ
  %1415 = icmp ne ptr %.fca.0.extract112.i4720, null
  %.not140.i4746 = and i1 %1414, %1415
  br i1 %.not140.i4746, label %.cont.cont.i4685, label %1505

1416:                                             ; preds = %1336
  %1417 = add i32 %1350, 2127912214
  %1418 = shl i32 %1350, 12
  %1419 = add i32 %1417, %1418
  %1420 = ashr i32 %1419, 19
  %1421 = xor i32 %1419, %1420
  %1422 = xor i32 %1421, -949894596
  %1423 = add i32 %1422, 374761393
  %1424 = shl i32 %1422, 5
  %1425 = add i32 %1423, %1424
  %1426 = add i32 %1425, -744332180
  %1427 = shl i32 %1425, 9
  %1428 = xor i32 %1426, %1427
  %1429 = add i32 %1428, -42973499
  %1430 = shl i32 %1428, 3
  %1431 = add i32 %1429, %1430
  %1432 = ashr i32 %1431, 16
  %1433 = xor i32 %1431, %1432
  %1434 = xor i32 %1433, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %1435 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1436 = load ptr, ptr %306, align 8
  %1437 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1436, 0
  %1438 = load ptr, ptr %307, align 8
  %1439 = insertvalue { ptr, ptr, ptr, i32 } %1437, ptr %1438, 1
  %1440 = load ptr, ptr %384, align 8
  %1441 = insertvalue { ptr, ptr, ptr, i32 } %1439, ptr %1440, 2
  %1442 = load i32, ptr %308, align 4
  %1443 = insertvalue { ptr, ptr, ptr, i32 } %1441, i32 %1442, 3
  %hash_coef_ptr.i.i10.i5460 = getelementptr i8, ptr %1436, i64 8
  %tbl_size_ptr.i.i11.i5461 = getelementptr i8, ptr %1436, i64 16
  %offset_tbl_ptr.i.i12.i5462 = getelementptr i8, ptr %1436, i64 40
  %hash_coef.i.i13.i5463 = load i64, ptr %hash_coef_ptr.i.i10.i5460, align 4
  %tbl_size.i.i14.i5464 = load i64, ptr %tbl_size_ptr.i.i11.i5461, align 4
  %offset_tbl.i.i15.i5465 = load ptr, ptr %offset_tbl_ptr.i.i12.i5462, align 8
  %product.i.i.i16.i5466 = mul i64 %hash_coef.i.i13.i5463, -5261542750394134544
  %shifted.i.i.i17.i5467 = lshr i64 %product.i.i.i16.i5466, 32
  %xored.i.i.i18.i5468 = xor i64 %shifted.i.i.i17.i5467, %product.i.i.i16.i5466
  %hash.i.i.i19.i5469 = and i64 %xored.i.i.i18.i5468, %tbl_size.i.i14.i5464
  %offset_ptr.i.i20.i5470 = getelementptr i32, ptr %offset_tbl.i.i15.i5465, i64 %hash.i.i.i19.i5469
  %offset.i.i21.i5471 = load i32, ptr %offset_ptr.i.i20.i5470, align 4
  %eq.i.i5472 = icmp eq i32 %1442, %offset.i.i21.i5471
  call void @llvm.assume(i1 %eq.i.i5472) #30
  %1444 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1445 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1436)
  %1446 = sext i32 %1442 to i64
  %1447 = getelementptr ptr, ptr %1436, i64 %1446
  %1448 = getelementptr i8, ptr %1447, i64 64
  %1449 = load ptr, ptr %1448, align 8
  %1450 = call ptr %1449({ ptr, ptr, ptr, i32 } %1443, ptr nonnull %2)
  %1451 = call i32 %1450({ ptr, ptr, ptr, i32 } %1443, { ptr, ptr, ptr, i32 } %1443, ptr nonnull %2)
  %1452 = add i32 %1451, -1
  %1453 = and i32 %1452, %1434
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %1454 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1455 = load ptr, ptr %306, align 8
  %1456 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1455, 0
  %1457 = load ptr, ptr %307, align 8
  %1458 = insertvalue { ptr, ptr, ptr, i32 } %1456, ptr %1457, 1
  %1459 = load ptr, ptr %384, align 8
  %1460 = insertvalue { ptr, ptr, ptr, i32 } %1458, ptr %1459, 2
  %1461 = load i32, ptr %308, align 4
  %1462 = insertvalue { ptr, ptr, ptr, i32 } %1460, i32 %1461, 3
  %hash_coef_ptr.i.i202.i4639 = getelementptr i8, ptr %1455, i64 8
  %tbl_size_ptr.i.i203.i4640 = getelementptr i8, ptr %1455, i64 16
  %offset_tbl_ptr.i.i204.i4641 = getelementptr i8, ptr %1455, i64 40
  %hash_coef.i.i205.i4642 = load i64, ptr %hash_coef_ptr.i.i202.i4639, align 4
  %tbl_size.i.i206.i4643 = load i64, ptr %tbl_size_ptr.i.i203.i4640, align 4
  %offset_tbl.i.i207.i4644 = load ptr, ptr %offset_tbl_ptr.i.i204.i4641, align 8
  %product.i.i.i208.i4645 = mul i64 %hash_coef.i.i205.i4642, -5261542750394134544
  %shifted.i.i.i209.i4646 = lshr i64 %product.i.i.i208.i4645, 32
  %xored.i.i.i210.i4647 = xor i64 %shifted.i.i.i209.i4646, %product.i.i.i208.i4645
  %hash.i.i.i211.i4648 = and i64 %xored.i.i.i210.i4647, %tbl_size.i.i206.i4643
  %offset_ptr.i.i212.i4649 = getelementptr i32, ptr %offset_tbl.i.i207.i4644, i64 %hash.i.i.i211.i4648
  %offset.i.i213.i4650 = load i32, ptr %offset_ptr.i.i212.i4649, align 4
  %eq.i216.i4651 = icmp eq i32 %1461, %offset.i.i213.i4650
  call void @llvm.assume(i1 %eq.i216.i4651) #30
  store ptr @_parameterization_Ptri32, ptr %43, align 8
  %1463 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %43)
  %1464 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1455)
  %1465 = sext i32 %1461 to i64
  %1466 = getelementptr ptr, ptr %1455, i64 %1465
  %1467 = getelementptr i8, ptr %1466, i64 120
  %1468 = load ptr, ptr %1467, align 8
  store ptr @i32_typ, ptr %44, align 8
  %1469 = call ptr %1468({ ptr, ptr, ptr, i32 } %1462, ptr nonnull %44)
  %1470 = call { ptr, i160 } %1469({ ptr, ptr, ptr, i32 } %1462, { ptr, ptr, ptr, i32 } %1462, ptr nonnull %43, i32 %1453)
  %.fca.0.extract87.i4652 = extractvalue { ptr, i160 } %1470, 0
  %1471 = insertvalue { ptr, i160 } undef, ptr %1337, 0
  %.sroa.3.0.insert.ext.i4653 = zext i32 %1338 to i160
  %.sroa.3.0.insert.shift.i4654 = shl nuw i160 %.sroa.3.0.insert.ext.i4653, 128
  %.sroa.2.0.insert.ext.i4655 = zext i64 %1342 to i160
  %.sroa.2.0.insert.shift.i4656 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i4655, 64
  %.sroa.2.0.insert.insert.i4657 = or disjoint i160 %.sroa.2.0.insert.shift.i4656, %.sroa.3.0.insert.shift.i4654
  %.sroa.0.0.insert.ext.i4658 = zext i64 %1340 to i160
  %.sroa.0.0.insert.insert.i4659 = or disjoint i160 %.sroa.2.0.insert.insert.i4657, %.sroa.0.0.insert.ext.i4658
  %1472 = insertvalue { ptr, i160 } %1471, i160 %.sroa.0.0.insert.insert.i4659, 1
  %1473 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1474 = load ptr, ptr %306, align 8
  %1475 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1474, 0
  %1476 = load ptr, ptr %307, align 8
  %1477 = insertvalue { ptr, ptr, ptr, i32 } %1475, ptr %1476, 1
  %1478 = load ptr, ptr %384, align 8
  %1479 = insertvalue { ptr, ptr, ptr, i32 } %1477, ptr %1478, 2
  %1480 = load i32, ptr %308, align 4
  %1481 = insertvalue { ptr, ptr, ptr, i32 } %1479, i32 %1480, 3
  %hash_coef_ptr.i.i218.i4664 = getelementptr i8, ptr %1474, i64 8
  %tbl_size_ptr.i.i219.i4665 = getelementptr i8, ptr %1474, i64 16
  %offset_tbl_ptr.i.i220.i4666 = getelementptr i8, ptr %1474, i64 40
  %hash_coef.i.i221.i4667 = load i64, ptr %hash_coef_ptr.i.i218.i4664, align 4
  %tbl_size.i.i222.i4668 = load i64, ptr %tbl_size_ptr.i.i219.i4665, align 4
  %offset_tbl.i.i223.i4669 = load ptr, ptr %offset_tbl_ptr.i.i220.i4666, align 8
  %product.i.i.i224.i4670 = mul i64 %hash_coef.i.i221.i4667, -5261542750394134544
  %shifted.i.i.i225.i4671 = lshr i64 %product.i.i.i224.i4670, 32
  %xored.i.i.i226.i4672 = xor i64 %shifted.i.i.i225.i4671, %product.i.i.i224.i4670
  %hash.i.i.i227.i4673 = and i64 %xored.i.i.i226.i4672, %tbl_size.i.i222.i4668
  %offset_ptr.i.i228.i4674 = getelementptr i32, ptr %offset_tbl.i.i223.i4669, i64 %hash.i.i.i227.i4673
  %offset.i.i229.i4675 = load i32, ptr %offset_ptr.i.i228.i4674, align 4
  %eq.i232.i4676 = icmp eq i32 %1480, %offset.i.i229.i4675
  call void @llvm.assume(i1 %eq.i232.i4676) #30
  %1482 = load ptr, ptr %result.i, align 8
  %1483 = load ptr, ptr %276, align 8
  %result.i233.i4677 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1484 = getelementptr i8, ptr %result.i233.i4677, i64 16
  store ptr %1483, ptr %1484, align 8
  %1485 = getelementptr i8, ptr %result.i233.i4677, i64 8
  store ptr %1482, ptr %1485, align 8
  %1486 = getelementptr i8, ptr %result.i233.i4677, i64 24
  store ptr null, ptr %1486, align 8
  %1487 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i233.i4677)
  store ptr @Entry, ptr %result.i233.i4677, align 8
  store ptr @_parameterization_Ptri32, ptr %45, align 8
  store ptr %result.i233.i4677, ptr %470, align 8
  %1488 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %45)
  %1489 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1474)
  %1490 = sext i32 %1480 to i64
  %1491 = getelementptr ptr, ptr %1474, i64 %1490
  %1492 = getelementptr i8, ptr %1491, i64 128
  %1493 = load ptr, ptr %1492, align 8
  store ptr @i32_typ, ptr %46, align 8
  store ptr %1337, ptr %471, align 8
  %1494 = call ptr %1493({ ptr, ptr, ptr, i32 } %1481, ptr nonnull %46)
  call void %1494({ ptr, ptr, ptr, i32 } %1481, { ptr, ptr, ptr, i32 } %1481, ptr nonnull %45, i32 %1453, { ptr, i160 } %1472)
  %1495 = icmp ne ptr %.fca.0.extract87.i4652, @nil_typ
  %1496 = icmp ne ptr %.fca.0.extract87.i4652, null
  %.not138.i4678 = and i1 %1495, %1496
  br i1 %.not138.i4678, label %.cont.cont.i4685, label %1505

.cont.cont.i4685:                                 ; preds = %1416, %1353
  %.sink5118 = phi { ptr, i160 } [ %1389, %1353 ], [ %1470, %1416 ]
  %1497 = phi i32 [ 2, %1353 ], [ 1, %1416 ]
  %vptr.i248.sroa.speculated.i4688 = phi ptr [ %.fca.0.extract112.i4720, %1353 ], [ %.fca.0.extract87.i4652, %1416 ]
  %.fca.1.extract89.i4681 = extractvalue { ptr, i160 } %.sink5118, 1
  %.sroa.3407.sroa.4.0.extract.shift.i4682 = lshr i160 %.fca.1.extract89.i4681, 64
  %1498 = trunc i160 %.sroa.3407.sroa.4.0.extract.shift.i4682 to i64
  %1499 = insertelement <2 x i64> poison, i64 %1498, i64 0
  %1500 = trunc i160 %.fca.1.extract89.i4681 to i64
  %1501 = insertelement <2 x i64> %1499, i64 %1500, i64 1
  %hash_coef_ptr.i.i249.i4691 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i4688, i64 8
  %tbl_size_ptr.i.i250.i4692 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i4688, i64 16
  %offset_tbl_ptr.i.i251.i4693 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i4688, i64 40
  %hash_coef.i.i252.i4694 = load i64, ptr %hash_coef_ptr.i.i249.i4691, align 4
  %tbl_size.i.i253.i4695 = load i64, ptr %tbl_size_ptr.i.i250.i4692, align 4
  %offset_tbl.i.i254.i4696 = load ptr, ptr %offset_tbl_ptr.i.i251.i4693, align 8
  %product.i.i.i255.i4697 = mul i64 %hash_coef.i.i252.i4694, 4015701072841558310
  %shifted.i.i.i256.i4698 = lshr i64 %product.i.i.i255.i4697, 32
  %xored.i.i.i257.i4699 = xor i64 %shifted.i.i.i256.i4698, %product.i.i.i255.i4697
  %hash.i.i.i258.i4700 = and i64 %xored.i.i.i257.i4699, %tbl_size.i.i253.i4695
  %offset_ptr.i.i259.i4701 = getelementptr i32, ptr %offset_tbl.i.i254.i4696, i64 %hash.i.i.i258.i4700
  %offset.i.i260.i4702 = load i32, ptr %offset_ptr.i.i259.i4701, align 4
  %1502 = add nuw nsw i32 %.reg2mem193.0677.i4634, 1
  %1503 = load i32, ptr %309, align 4
  %1504 = icmp slt i32 %1502, %1503
  br i1 %1504, label %1336, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4752

1505:                                             ; preds = %1416, %1353
  %1506 = phi ptr [ %47, %1416 ], [ %39, %1353 ]
  %1507 = phi ptr [ %48, %1416 ], [ %40, %1353 ]
  %1508 = phi ptr [ %49, %1416 ], [ %41, %1353 ]
  %1509 = phi ptr [ %.sroa.0.i4599, %1416 ], [ %.sroa.0680.i4597, %1353 ]
  %1510 = phi ptr [ %50, %1416 ], [ %42, %1353 ]
  %1511 = load i32, ptr %385, align 4
  store i32 %1511, ptr %1506, align 4
  store i32 1, ptr %1507, align 4
  %1512 = add i32 %1511, 1
  store i32 %1512, ptr %1508, align 4
  %1513 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  store i32 %1512, ptr %385, align 4
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %1510, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %1509, align 8
  br label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4752

HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4752: ; preds = %.cont.cont.i4685, %1325, %1505
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %35)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %36)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %37)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %38)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %39)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %40)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %41)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i4597)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %42)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %43)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %44)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %45)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %46)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %47)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %48)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %49)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i4599)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %50)
  br label %._crit_edge1.i3455

._crit_edge1.i3455:                               ; preds = %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4752, %1317
  %1514 = add nuw nsw i32 %.reg2mem13.079.i3452, 1
  %1515 = icmp slt i32 %1514, %1073
  br i1 %1515, label %1317, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3473

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3473.critedge: ; preds = %1049
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %141)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %142)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %139)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %140)
  br label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3473

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3473: ; preds = %._crit_edge1.i3455, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3473.critedge
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %139)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %140)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %192)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %193)
  br label %._crit_edge2.i1086

._crit_edge2.i1086:                               ; preds = %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3473, %.critedge158.i1067
  %1516 = load ptr, ptr %result.i, align 8
  %1517 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1518 = load ptr, ptr %276, align 8
  %1519 = load ptr, ptr %1516, align 8
  %1520 = getelementptr i8, ptr %1519, i64 48
  %1521 = load ptr, ptr %1520, align 8
  %1522 = call { i64, i64 } %1521(ptr nonnull %1516)
  %1523 = extractvalue { i64, i64 } %1522, 0
  %1524 = extractvalue { i64, i64 } %1522, 1
  %1525 = urem i64 20, %1524
  %1526 = icmp eq i64 %1525, 0
  %1527 = sub i64 %1524, %1525
  %1528 = select i1 %1526, i64 0, i64 %1527
  %1529 = add i64 %1523, 20
  %1530 = add i64 %1529, %1528
  %1531 = load ptr, ptr %1518, align 8
  %1532 = getelementptr i8, ptr %1531, i64 48
  %1533 = load ptr, ptr %1532, align 8
  %1534 = call { i64, i64 } %1533(ptr nonnull %1518)
  %1535 = extractvalue { i64, i64 } %1534, 0
  %1536 = extractvalue { i64, i64 } %1534, 1
  %1537 = call i64 @llvm.umax.i64(i64 %1524, i64 %1536)
  %1538 = call i64 @llvm.umax.i64(i64 %1537, i64 8)
  %1539 = urem i64 %1530, %1536
  %1540 = icmp eq i64 %1539, 0
  %1541 = sub i64 %1536, %1539
  %1542 = select i1 %1540, i64 0, i64 %1541
  %1543 = add i64 %1535, %1530
  %1544 = add i64 %1543, %1542
  %1545 = urem i64 %1544, %1538
  %1546 = icmp eq i64 %1545, 0
  %1547 = sub i64 %1538, %1545
  %1548 = select i1 %1546, i64 0, i64 %1547
  %1549 = add i64 %1548, %1544
  %result.i296.i1087 = call noalias ptr @bump_malloc_inner(i64 noundef %1549, ptr nonnull @current_ptr) #29
  store ptr %1516, ptr %result.i296.i1087, align 8
  %1550 = getelementptr i8, ptr %result.i296.i1087, i64 8
  store ptr %1518, ptr %1550, align 8
  %1551 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i296.i1087)
  store ptr @Entry, ptr %245, align 8
  store ptr %result.i296.i1087, ptr %370, align 8
  store i32 9, ptr %371, align 8
  %1552 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %245)
  %1553 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1554 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %1555 = load ptr, ptr %1516, align 8
  %1556 = getelementptr i8, ptr %1555, i64 48
  %1557 = load ptr, ptr %1556, align 8
  %1558 = call { i64, i64 } %1557(ptr nonnull %1516)
  %1559 = extractvalue { i64, i64 } %1558, 1
  %1560 = urem i64 20, %1559
  %1561 = icmp eq i64 %1560, 0
  %reass.sub5621 = sub i64 %1559, %1560
  %1562 = add i64 %reass.sub5621, 20
  %1563 = select i1 %1561, i64 20, i64 %1562
  %1564 = getelementptr i8, ptr %result.i296.i1087, i64 %1563
  %1565 = load ptr, ptr %result.i296.i1087, align 8
  %1566 = load ptr, ptr %1565, align 8
  %1567 = getelementptr i8, ptr %1566, i64 64
  %1568 = load ptr, ptr %1567, align 8
  call void %1568({ ptr, i160 } %488, ptr nonnull %1565, ptr %1564)
  %1569 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %1570 = load ptr, ptr %result.i296.i1087, align 8
  %1571 = load ptr, ptr %1570, align 8
  %1572 = getelementptr i8, ptr %1571, i64 48
  %1573 = load ptr, ptr %1572, align 8
  %1574 = call { i64, i64 } %1573(ptr nonnull %1570)
  %1575 = extractvalue { i64, i64 } %1574, 0
  %1576 = extractvalue { i64, i64 } %1574, 1
  %1577 = urem i64 20, %1576
  %1578 = icmp eq i64 %1577, 0
  %1579 = sub i64 %1576, %1577
  %1580 = select i1 %1578, i64 0, i64 %1579
  %1581 = add i64 %1575, 20
  %1582 = add i64 %1581, %1580
  %1583 = load ptr, ptr %1550, align 8
  %1584 = load ptr, ptr %1583, align 8
  %1585 = getelementptr i8, ptr %1584, i64 48
  %1586 = load ptr, ptr %1585, align 8
  %1587 = call { i64, i64 } %1586(ptr nonnull %1583)
  %1588 = extractvalue { i64, i64 } %1587, 1
  %1589 = urem i64 %1582, %1588
  %1590 = icmp eq i64 %1589, 0
  %1591 = sub i64 %1588, %1589
  %1592 = select i1 %1590, i64 0, i64 %1591
  %1593 = getelementptr i8, ptr %result.i296.i1087, i64 %1582
  %1594 = getelementptr i8, ptr %1593, i64 %1592
  %1595 = load ptr, ptr %1550, align 8
  %1596 = load ptr, ptr %1595, align 8
  %1597 = getelementptr i8, ptr %1596, i64 64
  %1598 = load ptr, ptr %1597, align 8
  call void %1598({ ptr, i160 } %655, ptr nonnull %1595, ptr %1594)
  %1599 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %1600 = getelementptr i8, ptr %result.i296.i1087, i64 16
  store i32 %658, ptr %1600, align 4
  %1601 = load ptr, ptr %372, align 8
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %175)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %176)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %177)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %178)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %179)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %180)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %181)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0680.i2298)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %182)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %183)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %184)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %185)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %186)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %187)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %188)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %189)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i2299)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %190)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %191)
  store ptr @Entry, ptr %191, align 8
  store ptr %result.i296.i1087, ptr %421, align 8
  store ptr %1601, ptr %422, align 8
  store i32 9, ptr %423, align 8
  %1602 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %191)
  %1603 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1604 = load i32, ptr %309, align 4
  %1605 = icmp sgt i32 %1604, 0
  br i1 %1605, label %.lr.ph.i2328, label %._crit_edge3.i1092

.lr.ph.i2328:                                     ; preds = %._crit_edge2.i1086
  %1606 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1607 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  br label %1608

1608:                                             ; preds = %.cont.cont.i2379, %.lr.ph.i2328
  %offset.i.i260.i23942947 = phi i32 [ 9, %.lr.ph.i2328 ], [ %offset.i.i260.i2394, %.cont.cont.i2379 ]
  %.sroa.speculated346.i23822945 = phi ptr [ %1601, %.lr.ph.i2328 ], [ %.sroa.speculated346.i2382, %.cont.cont.i2379 ]
  %.sroa.speculated352.i23812943 = phi ptr [ %result.i296.i1087, %.lr.ph.i2328 ], [ %.sroa.speculated352.i2381, %.cont.cont.i2379 ]
  %.reg2mem195.0678.i2329 = phi i32 [ 1, %.lr.ph.i2328 ], [ %1764, %.cont.cont.i2379 ]
  %.reg2mem193.0677.i2330 = phi i32 [ 0, %.lr.ph.i2328 ], [ %1765, %.cont.cont.i2379 ]
  %1609 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Entry, ptr undef, ptr undef, i32 undef }, ptr %.sroa.speculated352.i23812943, 1
  %1610 = insertvalue { ptr, ptr, ptr, i32 } %1609, ptr %.sroa.speculated346.i23822945, 2
  %1611 = insertvalue { ptr, ptr, ptr, i32 } %1610, i32 %offset.i.i260.i23942947, 3
  %1612 = sext i32 %offset.i.i260.i23942947 to i64
  %gep2941 = getelementptr ptr, ptr getelementptr inbounds (i8, ptr @Entry, i64 64), i64 %1612
  %1613 = load ptr, ptr %gep2941, align 8
  %1614 = call ptr %1613({ ptr, ptr, ptr, i32 } %1611, ptr nonnull %2)
  %1615 = call i32 %1614({ ptr, ptr, ptr, i32 } %1611, { ptr, ptr, ptr, i32 } %1611, ptr nonnull %2)
  %1616 = icmp eq i32 %.reg2mem195.0678.i2329, 1
  %1617 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br i1 %1616, label %1618, label %1682

1618:                                             ; preds = %1608
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %1619 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1620 = load ptr, ptr %293, align 8
  %1621 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1620, 0
  %1622 = load ptr, ptr %294, align 8
  %1623 = insertvalue { ptr, ptr, ptr, i32 } %1621, ptr %1622, 1
  %1624 = load ptr, ptr %383, align 8
  %1625 = insertvalue { ptr, ptr, ptr, i32 } %1623, ptr %1624, 2
  %1626 = load i32, ptr %295, align 4
  %1627 = insertvalue { ptr, ptr, ptr, i32 } %1625, i32 %1626, 3
  %hash_coef_ptr.i.i10.i3489 = getelementptr i8, ptr %1620, i64 8
  %tbl_size_ptr.i.i11.i3490 = getelementptr i8, ptr %1620, i64 16
  %offset_tbl_ptr.i.i12.i3491 = getelementptr i8, ptr %1620, i64 40
  %hash_coef.i.i13.i3492 = load i64, ptr %hash_coef_ptr.i.i10.i3489, align 4
  %tbl_size.i.i14.i3493 = load i64, ptr %tbl_size_ptr.i.i11.i3490, align 4
  %offset_tbl.i.i15.i3494 = load ptr, ptr %offset_tbl_ptr.i.i12.i3491, align 8
  %product.i.i.i16.i3495 = mul i64 %hash_coef.i.i13.i3492, -5261542750394134544
  %shifted.i.i.i17.i3496 = lshr i64 %product.i.i.i16.i3495, 32
  %xored.i.i.i18.i3497 = xor i64 %shifted.i.i.i17.i3496, %product.i.i.i16.i3495
  %hash.i.i.i19.i3498 = and i64 %xored.i.i.i18.i3497, %tbl_size.i.i14.i3493
  %offset_ptr.i.i20.i3499 = getelementptr i32, ptr %offset_tbl.i.i15.i3494, i64 %hash.i.i.i19.i3498
  %offset.i.i21.i3500 = load i32, ptr %offset_ptr.i.i20.i3499, align 4
  %eq.i.i3501 = icmp eq i32 %1626, %offset.i.i21.i3500
  call void @llvm.assume(i1 %eq.i.i3501) #30
  %1628 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1629 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1620)
  %1630 = sext i32 %1626 to i64
  %1631 = getelementptr ptr, ptr %1620, i64 %1630
  %1632 = getelementptr i8, ptr %1631, i64 64
  %1633 = load ptr, ptr %1632, align 8
  %1634 = call ptr %1633({ ptr, ptr, ptr, i32 } %1627, ptr nonnull %2)
  %1635 = call i32 %1634({ ptr, ptr, ptr, i32 } %1627, { ptr, ptr, ptr, i32 } %1627, ptr nonnull %2)
  %1636 = add i32 %1635, -1
  %1637 = and i32 %1636, %1615
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %1638 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1639 = load ptr, ptr %293, align 8
  %1640 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1639, 0
  %1641 = load ptr, ptr %294, align 8
  %1642 = insertvalue { ptr, ptr, ptr, i32 } %1640, ptr %1641, 1
  %1643 = load ptr, ptr %383, align 8
  %1644 = insertvalue { ptr, ptr, ptr, i32 } %1642, ptr %1643, 2
  %1645 = load i32, ptr %295, align 4
  %1646 = insertvalue { ptr, ptr, ptr, i32 } %1644, i32 %1645, 3
  %hash_coef_ptr.i.i172.i2399 = getelementptr i8, ptr %1639, i64 8
  %tbl_size_ptr.i.i173.i2400 = getelementptr i8, ptr %1639, i64 16
  %offset_tbl_ptr.i.i174.i2401 = getelementptr i8, ptr %1639, i64 40
  %hash_coef.i.i175.i2402 = load i64, ptr %hash_coef_ptr.i.i172.i2399, align 4
  %tbl_size.i.i176.i2403 = load i64, ptr %tbl_size_ptr.i.i173.i2400, align 4
  %offset_tbl.i.i177.i2404 = load ptr, ptr %offset_tbl_ptr.i.i174.i2401, align 8
  %product.i.i.i178.i2405 = mul i64 %hash_coef.i.i175.i2402, -5261542750394134544
  %shifted.i.i.i179.i2406 = lshr i64 %product.i.i.i178.i2405, 32
  %xored.i.i.i180.i2407 = xor i64 %shifted.i.i.i179.i2406, %product.i.i.i178.i2405
  %hash.i.i.i181.i2408 = and i64 %xored.i.i.i180.i2407, %tbl_size.i.i176.i2403
  %offset_ptr.i.i182.i2409 = getelementptr i32, ptr %offset_tbl.i.i177.i2404, i64 %hash.i.i.i181.i2408
  %offset.i.i183.i2410 = load i32, ptr %offset_ptr.i.i182.i2409, align 4
  %eq.i.i2411 = icmp eq i32 %1645, %offset.i.i183.i2410
  call void @llvm.assume(i1 %eq.i.i2411) #30
  store ptr @_parameterization_Ptri32, ptr %175, align 8
  %1647 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %175)
  %1648 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1639)
  %1649 = sext i32 %1645 to i64
  %1650 = getelementptr ptr, ptr %1639, i64 %1649
  %1651 = getelementptr i8, ptr %1650, i64 120
  %1652 = load ptr, ptr %1651, align 8
  store ptr @i32_typ, ptr %176, align 8
  %1653 = call ptr %1652({ ptr, ptr, ptr, i32 } %1646, ptr nonnull %176)
  %1654 = call { ptr, i160 } %1653({ ptr, ptr, ptr, i32 } %1646, { ptr, ptr, ptr, i32 } %1646, ptr nonnull %175, i32 %1637)
  %.fca.0.extract112.i2412 = extractvalue { ptr, i160 } %1654, 0
  %1655 = ptrtoint ptr %.sroa.speculated352.i23812943 to i64
  %1656 = ptrtoint ptr %.sroa.speculated346.i23822945 to i64
  %.sroa.3111.0.insert.ext.i2413 = zext i32 %offset.i.i260.i23942947 to i160
  %.sroa.3111.0.insert.shift.i2414 = shl nuw i160 %.sroa.3111.0.insert.ext.i2413, 128
  %.sroa.2110.0.insert.ext.i2415 = zext i64 %1656 to i160
  %.sroa.2110.0.insert.shift.i2416 = shl nuw nsw i160 %.sroa.2110.0.insert.ext.i2415, 64
  %.sroa.2110.0.insert.insert.i2417 = or disjoint i160 %.sroa.2110.0.insert.shift.i2416, %.sroa.3111.0.insert.shift.i2414
  %.sroa.0109.0.insert.ext.i2418 = zext i64 %1655 to i160
  %.sroa.0109.0.insert.insert.i2419 = or disjoint i160 %.sroa.2110.0.insert.insert.i2417, %.sroa.0109.0.insert.ext.i2418
  %1657 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0109.0.insert.insert.i2419, 1
  %1658 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1659 = load ptr, ptr %293, align 8
  %1660 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1659, 0
  %1661 = load ptr, ptr %294, align 8
  %1662 = insertvalue { ptr, ptr, ptr, i32 } %1660, ptr %1661, 1
  %1663 = load ptr, ptr %383, align 8
  %1664 = insertvalue { ptr, ptr, ptr, i32 } %1662, ptr %1663, 2
  %1665 = load i32, ptr %295, align 4
  %1666 = insertvalue { ptr, ptr, ptr, i32 } %1664, i32 %1665, 3
  %hash_coef_ptr.i.i186.i2424 = getelementptr i8, ptr %1659, i64 8
  %tbl_size_ptr.i.i187.i2425 = getelementptr i8, ptr %1659, i64 16
  %offset_tbl_ptr.i.i188.i2426 = getelementptr i8, ptr %1659, i64 40
  %hash_coef.i.i189.i2427 = load i64, ptr %hash_coef_ptr.i.i186.i2424, align 4
  %tbl_size.i.i190.i2428 = load i64, ptr %tbl_size_ptr.i.i187.i2425, align 4
  %offset_tbl.i.i191.i2429 = load ptr, ptr %offset_tbl_ptr.i.i188.i2426, align 8
  %product.i.i.i192.i2430 = mul i64 %hash_coef.i.i189.i2427, -5261542750394134544
  %shifted.i.i.i193.i2431 = lshr i64 %product.i.i.i192.i2430, 32
  %xored.i.i.i194.i2432 = xor i64 %shifted.i.i.i193.i2431, %product.i.i.i192.i2430
  %hash.i.i.i195.i2433 = and i64 %xored.i.i.i194.i2432, %tbl_size.i.i190.i2428
  %offset_ptr.i.i196.i2434 = getelementptr i32, ptr %offset_tbl.i.i191.i2429, i64 %hash.i.i.i195.i2433
  %offset.i.i197.i2435 = load i32, ptr %offset_ptr.i.i196.i2434, align 4
  %eq.i200.i2436 = icmp eq i32 %1665, %offset.i.i197.i2435
  call void @llvm.assume(i1 %eq.i200.i2436) #30
  %1667 = load ptr, ptr %result.i, align 8
  %1668 = load ptr, ptr %276, align 8
  %result.i.i2437 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1669 = getelementptr i8, ptr %result.i.i2437, i64 16
  store ptr %1668, ptr %1669, align 8
  %1670 = getelementptr i8, ptr %result.i.i2437, i64 8
  store ptr %1667, ptr %1670, align 8
  %1671 = getelementptr i8, ptr %result.i.i2437, i64 24
  store ptr null, ptr %1671, align 8
  %1672 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i2437)
  store ptr @Entry, ptr %result.i.i2437, align 8
  store ptr @_parameterization_Ptri32, ptr %177, align 8
  store ptr %result.i.i2437, ptr %426, align 8
  %1673 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %177)
  %1674 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1659)
  %1675 = sext i32 %1665 to i64
  %1676 = getelementptr ptr, ptr %1659, i64 %1675
  %1677 = getelementptr i8, ptr %1676, i64 128
  %1678 = load ptr, ptr %1677, align 8
  store ptr @i32_typ, ptr %178, align 8
  store ptr @Entry, ptr %427, align 8
  %1679 = call ptr %1678({ ptr, ptr, ptr, i32 } %1666, ptr nonnull %178)
  call void %1679({ ptr, ptr, ptr, i32 } %1666, { ptr, ptr, ptr, i32 } %1666, ptr nonnull %177, i32 %1637, { ptr, i160 } %1657)
  %1680 = icmp ne ptr %.fca.0.extract112.i2412, @nil_typ
  %1681 = icmp ne ptr %.fca.0.extract112.i2412, null
  %.not140.i2438 = and i1 %1680, %1681
  br i1 %.not140.i2438, label %.cont.cont.i2379, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit.thread2923

1682:                                             ; preds = %1608
  %1683 = add i32 %1615, 2127912214
  %1684 = shl i32 %1615, 12
  %1685 = add i32 %1683, %1684
  %1686 = ashr i32 %1685, 19
  %1687 = xor i32 %1685, %1686
  %1688 = xor i32 %1687, -949894596
  %1689 = add i32 %1688, 374761393
  %1690 = shl i32 %1688, 5
  %1691 = add i32 %1689, %1690
  %1692 = add i32 %1691, -744332180
  %1693 = shl i32 %1691, 9
  %1694 = xor i32 %1692, %1693
  %1695 = add i32 %1694, -42973499
  %1696 = shl i32 %1694, 3
  %1697 = add i32 %1695, %1696
  %1698 = ashr i32 %1697, 16
  %1699 = xor i32 %1697, %1698
  %1700 = xor i32 %1699, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %1701 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1702 = load ptr, ptr %306, align 8
  %1703 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1702, 0
  %1704 = load ptr, ptr %307, align 8
  %1705 = insertvalue { ptr, ptr, ptr, i32 } %1703, ptr %1704, 1
  %1706 = load ptr, ptr %384, align 8
  %1707 = insertvalue { ptr, ptr, ptr, i32 } %1705, ptr %1706, 2
  %1708 = load i32, ptr %308, align 4
  %1709 = insertvalue { ptr, ptr, ptr, i32 } %1707, i32 %1708, 3
  %hash_coef_ptr.i.i10.i3519 = getelementptr i8, ptr %1702, i64 8
  %tbl_size_ptr.i.i11.i3520 = getelementptr i8, ptr %1702, i64 16
  %offset_tbl_ptr.i.i12.i3521 = getelementptr i8, ptr %1702, i64 40
  %hash_coef.i.i13.i3522 = load i64, ptr %hash_coef_ptr.i.i10.i3519, align 4
  %tbl_size.i.i14.i3523 = load i64, ptr %tbl_size_ptr.i.i11.i3520, align 4
  %offset_tbl.i.i15.i3524 = load ptr, ptr %offset_tbl_ptr.i.i12.i3521, align 8
  %product.i.i.i16.i3525 = mul i64 %hash_coef.i.i13.i3522, -5261542750394134544
  %shifted.i.i.i17.i3526 = lshr i64 %product.i.i.i16.i3525, 32
  %xored.i.i.i18.i3527 = xor i64 %shifted.i.i.i17.i3526, %product.i.i.i16.i3525
  %hash.i.i.i19.i3528 = and i64 %xored.i.i.i18.i3527, %tbl_size.i.i14.i3523
  %offset_ptr.i.i20.i3529 = getelementptr i32, ptr %offset_tbl.i.i15.i3524, i64 %hash.i.i.i19.i3528
  %offset.i.i21.i3530 = load i32, ptr %offset_ptr.i.i20.i3529, align 4
  %eq.i.i3531 = icmp eq i32 %1708, %offset.i.i21.i3530
  call void @llvm.assume(i1 %eq.i.i3531) #30
  %1710 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1711 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1702)
  %1712 = sext i32 %1708 to i64
  %1713 = getelementptr ptr, ptr %1702, i64 %1712
  %1714 = getelementptr i8, ptr %1713, i64 64
  %1715 = load ptr, ptr %1714, align 8
  %1716 = call ptr %1715({ ptr, ptr, ptr, i32 } %1709, ptr nonnull %2)
  %1717 = call i32 %1716({ ptr, ptr, ptr, i32 } %1709, { ptr, ptr, ptr, i32 } %1709, ptr nonnull %2)
  %1718 = add i32 %1717, -1
  %1719 = and i32 %1718, %1700
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %1720 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1721 = load ptr, ptr %306, align 8
  %1722 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1721, 0
  %1723 = load ptr, ptr %307, align 8
  %1724 = insertvalue { ptr, ptr, ptr, i32 } %1722, ptr %1723, 1
  %1725 = load ptr, ptr %384, align 8
  %1726 = insertvalue { ptr, ptr, ptr, i32 } %1724, ptr %1725, 2
  %1727 = load i32, ptr %308, align 4
  %1728 = insertvalue { ptr, ptr, ptr, i32 } %1726, i32 %1727, 3
  %hash_coef_ptr.i.i202.i2335 = getelementptr i8, ptr %1721, i64 8
  %tbl_size_ptr.i.i203.i2336 = getelementptr i8, ptr %1721, i64 16
  %offset_tbl_ptr.i.i204.i2337 = getelementptr i8, ptr %1721, i64 40
  %hash_coef.i.i205.i2338 = load i64, ptr %hash_coef_ptr.i.i202.i2335, align 4
  %tbl_size.i.i206.i2339 = load i64, ptr %tbl_size_ptr.i.i203.i2336, align 4
  %offset_tbl.i.i207.i2340 = load ptr, ptr %offset_tbl_ptr.i.i204.i2337, align 8
  %product.i.i.i208.i2341 = mul i64 %hash_coef.i.i205.i2338, -5261542750394134544
  %shifted.i.i.i209.i2342 = lshr i64 %product.i.i.i208.i2341, 32
  %xored.i.i.i210.i2343 = xor i64 %shifted.i.i.i209.i2342, %product.i.i.i208.i2341
  %hash.i.i.i211.i2344 = and i64 %xored.i.i.i210.i2343, %tbl_size.i.i206.i2339
  %offset_ptr.i.i212.i2345 = getelementptr i32, ptr %offset_tbl.i.i207.i2340, i64 %hash.i.i.i211.i2344
  %offset.i.i213.i2346 = load i32, ptr %offset_ptr.i.i212.i2345, align 4
  %eq.i216.i2347 = icmp eq i32 %1727, %offset.i.i213.i2346
  call void @llvm.assume(i1 %eq.i216.i2347) #30
  store ptr @_parameterization_Ptri32, ptr %183, align 8
  %1729 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %183)
  %1730 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1721)
  %1731 = sext i32 %1727 to i64
  %1732 = getelementptr ptr, ptr %1721, i64 %1731
  %1733 = getelementptr i8, ptr %1732, i64 120
  %1734 = load ptr, ptr %1733, align 8
  store ptr @i32_typ, ptr %184, align 8
  %1735 = call ptr %1734({ ptr, ptr, ptr, i32 } %1728, ptr nonnull %184)
  %1736 = call { ptr, i160 } %1735({ ptr, ptr, ptr, i32 } %1728, { ptr, ptr, ptr, i32 } %1728, ptr nonnull %183, i32 %1719)
  %.fca.0.extract87.i2348 = extractvalue { ptr, i160 } %1736, 0
  %1737 = ptrtoint ptr %.sroa.speculated352.i23812943 to i64
  %1738 = ptrtoint ptr %.sroa.speculated346.i23822945 to i64
  %.sroa.3.0.insert.ext.i2349 = zext i32 %offset.i.i260.i23942947 to i160
  %.sroa.3.0.insert.shift.i2350 = shl nuw i160 %.sroa.3.0.insert.ext.i2349, 128
  %.sroa.2.0.insert.ext.i2351 = zext i64 %1738 to i160
  %.sroa.2.0.insert.shift.i2352 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i2351, 64
  %.sroa.2.0.insert.insert.i2353 = or disjoint i160 %.sroa.2.0.insert.shift.i2352, %.sroa.3.0.insert.shift.i2350
  %.sroa.0.0.insert.ext.i2354 = zext i64 %1737 to i160
  %.sroa.0.0.insert.insert.i2355 = or disjoint i160 %.sroa.2.0.insert.insert.i2353, %.sroa.0.0.insert.ext.i2354
  %1739 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0.0.insert.insert.i2355, 1
  %1740 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1741 = load ptr, ptr %306, align 8
  %1742 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1741, 0
  %1743 = load ptr, ptr %307, align 8
  %1744 = insertvalue { ptr, ptr, ptr, i32 } %1742, ptr %1743, 1
  %1745 = load ptr, ptr %384, align 8
  %1746 = insertvalue { ptr, ptr, ptr, i32 } %1744, ptr %1745, 2
  %1747 = load i32, ptr %308, align 4
  %1748 = insertvalue { ptr, ptr, ptr, i32 } %1746, i32 %1747, 3
  %hash_coef_ptr.i.i218.i2360 = getelementptr i8, ptr %1741, i64 8
  %tbl_size_ptr.i.i219.i2361 = getelementptr i8, ptr %1741, i64 16
  %offset_tbl_ptr.i.i220.i2362 = getelementptr i8, ptr %1741, i64 40
  %hash_coef.i.i221.i2363 = load i64, ptr %hash_coef_ptr.i.i218.i2360, align 4
  %tbl_size.i.i222.i2364 = load i64, ptr %tbl_size_ptr.i.i219.i2361, align 4
  %offset_tbl.i.i223.i2365 = load ptr, ptr %offset_tbl_ptr.i.i220.i2362, align 8
  %product.i.i.i224.i2366 = mul i64 %hash_coef.i.i221.i2363, -5261542750394134544
  %shifted.i.i.i225.i2367 = lshr i64 %product.i.i.i224.i2366, 32
  %xored.i.i.i226.i2368 = xor i64 %shifted.i.i.i225.i2367, %product.i.i.i224.i2366
  %hash.i.i.i227.i2369 = and i64 %xored.i.i.i226.i2368, %tbl_size.i.i222.i2364
  %offset_ptr.i.i228.i2370 = getelementptr i32, ptr %offset_tbl.i.i223.i2365, i64 %hash.i.i.i227.i2369
  %offset.i.i229.i2371 = load i32, ptr %offset_ptr.i.i228.i2370, align 4
  %eq.i232.i2372 = icmp eq i32 %1747, %offset.i.i229.i2371
  call void @llvm.assume(i1 %eq.i232.i2372) #30
  %1749 = load ptr, ptr %result.i, align 8
  %1750 = load ptr, ptr %276, align 8
  %result.i233.i2373 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1751 = getelementptr i8, ptr %result.i233.i2373, i64 16
  store ptr %1750, ptr %1751, align 8
  %1752 = getelementptr i8, ptr %result.i233.i2373, i64 8
  store ptr %1749, ptr %1752, align 8
  %1753 = getelementptr i8, ptr %result.i233.i2373, i64 24
  store ptr null, ptr %1753, align 8
  %1754 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i233.i2373)
  store ptr @Entry, ptr %result.i233.i2373, align 8
  store ptr @_parameterization_Ptri32, ptr %185, align 8
  store ptr %result.i233.i2373, ptr %424, align 8
  %1755 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %185)
  %1756 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1741)
  %1757 = sext i32 %1747 to i64
  %1758 = getelementptr ptr, ptr %1741, i64 %1757
  %1759 = getelementptr i8, ptr %1758, i64 128
  %1760 = load ptr, ptr %1759, align 8
  store ptr @i32_typ, ptr %186, align 8
  store ptr @Entry, ptr %425, align 8
  %1761 = call ptr %1760({ ptr, ptr, ptr, i32 } %1748, ptr nonnull %186)
  call void %1761({ ptr, ptr, ptr, i32 } %1748, { ptr, ptr, ptr, i32 } %1748, ptr nonnull %185, i32 %1719, { ptr, i160 } %1739)
  %1762 = icmp ne ptr %.fca.0.extract87.i2348, @nil_typ
  %1763 = icmp ne ptr %.fca.0.extract87.i2348, null
  %.not138.i2374 = and i1 %1762, %1763
  br i1 %.not138.i2374, label %.cont.cont.i2379, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit.thread2923

.cont.cont.i2379:                                 ; preds = %1682, %1618
  %.sink2968 = phi { ptr, i160 } [ %1654, %1618 ], [ %1736, %1682 ]
  %1764 = phi i32 [ 2, %1618 ], [ 1, %1682 ]
  %vptr.i248.sroa.speculated.i2380 = phi ptr [ %.fca.0.extract112.i2412, %1618 ], [ %.fca.0.extract87.i2348, %1682 ]
  %.fca.1.extract89.i2375 = extractvalue { ptr, i160 } %.sink2968, 1
  %.sroa.3407.sroa.4.0.extract.shift.i2376 = lshr i160 %.fca.1.extract89.i2375, 64
  %.sroa.3407.sroa.4.0.extract.trunc.i2377 = trunc i160 %.sroa.3407.sroa.4.0.extract.shift.i2376 to i64
  %.sroa.3407.sroa.0.0.extract.trunc.i2378 = trunc i160 %.fca.1.extract89.i2375 to i64
  %.sroa.speculated352.i2381 = inttoptr i64 %.sroa.3407.sroa.0.0.extract.trunc.i2378 to ptr
  %.sroa.speculated346.i2382 = inttoptr i64 %.sroa.3407.sroa.4.0.extract.trunc.i2377 to ptr
  %hash_coef_ptr.i.i249.i2383 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i2380, i64 8
  %tbl_size_ptr.i.i250.i2384 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i2380, i64 16
  %offset_tbl_ptr.i.i251.i2385 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i2380, i64 40
  %hash_coef.i.i252.i2386 = load i64, ptr %hash_coef_ptr.i.i249.i2383, align 4
  %tbl_size.i.i253.i2387 = load i64, ptr %tbl_size_ptr.i.i250.i2384, align 4
  %offset_tbl.i.i254.i2388 = load ptr, ptr %offset_tbl_ptr.i.i251.i2385, align 8
  %product.i.i.i255.i2389 = mul i64 %hash_coef.i.i252.i2386, 4015701072841558310
  %shifted.i.i.i256.i2390 = lshr i64 %product.i.i.i255.i2389, 32
  %xored.i.i.i257.i2391 = xor i64 %shifted.i.i.i256.i2390, %product.i.i.i255.i2389
  %hash.i.i.i258.i2392 = and i64 %xored.i.i.i257.i2391, %tbl_size.i.i253.i2387
  %offset_ptr.i.i259.i2393 = getelementptr i32, ptr %offset_tbl.i.i254.i2388, i64 %hash.i.i.i258.i2392
  %offset.i.i260.i2394 = load i32, ptr %offset_ptr.i.i259.i2393, align 4
  store ptr %vptr.i248.sroa.speculated.i2380, ptr %191, align 8
  store ptr %.sroa.speculated352.i2381, ptr %421, align 8
  store ptr %.sroa.speculated346.i2382, ptr %422, align 8
  store i32 %offset.i.i260.i2394, ptr %423, align 8
  %1765 = add nuw nsw i32 %.reg2mem193.0677.i2330, 1
  %1766 = load i32, ptr %309, align 4
  %1767 = icmp slt i32 %1765, %1766
  br i1 %1767, label %1608, label %._crit_edge3.i1092

HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit.thread2923: ; preds = %1618, %1682
  %1768 = phi ptr [ %187, %1682 ], [ %179, %1618 ]
  %1769 = phi ptr [ %188, %1682 ], [ %180, %1618 ]
  %1770 = phi ptr [ %189, %1682 ], [ %181, %1618 ]
  %1771 = phi ptr [ %.sroa.0.i2299, %1682 ], [ %.sroa.0680.i2298, %1618 ]
  %1772 = phi ptr [ %190, %1682 ], [ %182, %1618 ]
  %1773 = load i32, ptr %385, align 4
  store i32 %1773, ptr %1768, align 4
  store i32 1, ptr %1769, align 4
  %1774 = add i32 %1773, 1
  store i32 %1774, ptr %1770, align 4
  %1775 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  store i32 %1774, ptr %385, align 4
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %1772, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %1771, align 8
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %175)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %176)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %177)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %178)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %179)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %180)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %181)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i2298)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %182)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %183)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %184)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %185)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %186)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %187)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %188)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %189)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i2299)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %190)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %191)
  br label %HashMap_insert_keyK_valueV.exit1183

._crit_edge3.i1092:                               ; preds = %.cont.cont.i2379, %._crit_edge2.i1086
  %1776 = load i160, ptr %421, align 8
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %175)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %176)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %177)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %178)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %179)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %180)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %181)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i2298)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %182)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %183)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %184)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %185)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %186)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %187)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %188)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %189)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i2299)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %190)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %191)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %173)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %174)
  %1777 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1778 = load ptr, ptr %293, align 8
  %1779 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1778, 0
  %1780 = load ptr, ptr %294, align 8
  %1781 = insertvalue { ptr, ptr, ptr, i32 } %1779, ptr %1780, 1
  %1782 = load ptr, ptr %383, align 8
  %1783 = insertvalue { ptr, ptr, ptr, i32 } %1781, ptr %1782, 2
  %1784 = load i32, ptr %295, align 4
  %1785 = insertvalue { ptr, ptr, ptr, i32 } %1783, i32 %1784, 3
  %hash_coef_ptr.i.i18.i2459 = getelementptr i8, ptr %1778, i64 8
  %tbl_size_ptr.i.i19.i2460 = getelementptr i8, ptr %1778, i64 16
  %offset_tbl_ptr.i.i20.i2461 = getelementptr i8, ptr %1778, i64 40
  %hash_coef.i.i21.i2462 = load i64, ptr %hash_coef_ptr.i.i18.i2459, align 4
  %tbl_size.i.i22.i2463 = load i64, ptr %tbl_size_ptr.i.i19.i2460, align 4
  %offset_tbl.i.i23.i2464 = load ptr, ptr %offset_tbl_ptr.i.i20.i2461, align 8
  %product.i.i.i24.i2465 = mul i64 %hash_coef.i.i21.i2462, -5261542750394134544
  %shifted.i.i.i25.i2466 = lshr i64 %product.i.i.i24.i2465, 32
  %xored.i.i.i26.i2467 = xor i64 %shifted.i.i.i25.i2466, %product.i.i.i24.i2465
  %hash.i.i.i27.i2468 = and i64 %xored.i.i.i26.i2467, %tbl_size.i.i22.i2463
  %offset_ptr.i.i28.i2469 = getelementptr i32, ptr %offset_tbl.i.i23.i2464, i64 %hash.i.i.i27.i2468
  %offset.i.i29.i2470 = load i32, ptr %offset_ptr.i.i28.i2469, align 4
  %eq.i.i2471 = icmp eq i32 %1784, %offset.i.i29.i2470
  call void @llvm.assume(i1 %eq.i.i2471) #30
  %1786 = load ptr, ptr %306, align 8
  %1787 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1786, 0
  %1788 = load ptr, ptr %307, align 8
  %1789 = insertvalue { ptr, ptr, ptr, i32 } %1787, ptr %1788, 1
  %1790 = load ptr, ptr %384, align 8
  %1791 = insertvalue { ptr, ptr, ptr, i32 } %1789, ptr %1790, 2
  %1792 = load i32, ptr %308, align 4
  %hash_coef_ptr.i.i46.i2476 = getelementptr i8, ptr %1786, i64 8
  %tbl_size_ptr.i.i47.i2477 = getelementptr i8, ptr %1786, i64 16
  %offset_tbl_ptr.i.i48.i2478 = getelementptr i8, ptr %1786, i64 40
  %hash_coef.i.i49.i2479 = load i64, ptr %hash_coef_ptr.i.i46.i2476, align 4
  %tbl_size.i.i50.i2480 = load i64, ptr %tbl_size_ptr.i.i47.i2477, align 4
  %offset_tbl.i.i51.i2481 = load ptr, ptr %offset_tbl_ptr.i.i48.i2478, align 8
  %product.i.i.i52.i2482 = mul i64 %hash_coef.i.i49.i2479, -5261542750394134544
  %shifted.i.i.i53.i2483 = lshr i64 %product.i.i.i52.i2482, 32
  %xored.i.i.i54.i2484 = xor i64 %shifted.i.i.i53.i2483, %product.i.i.i52.i2482
  %hash.i.i.i55.i2485 = and i64 %xored.i.i.i54.i2484, %tbl_size.i.i50.i2480
  %offset_ptr.i.i56.i2486 = getelementptr i32, ptr %offset_tbl.i.i51.i2481, i64 %hash.i.i.i55.i2485
  %offset.i.i57.i2487 = load i32, ptr %offset_ptr.i.i56.i2486, align 4
  %eq.i60.i2488 = icmp eq i32 %1792, %offset.i.i57.i2487
  call void @llvm.assume(i1 %eq.i60.i2488) #30
  %1793 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1794 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1778)
  %1795 = sext i32 %1784 to i64
  %1796 = getelementptr ptr, ptr %1778, i64 %1795
  %1797 = getelementptr i8, ptr %1796, i64 64
  %1798 = load ptr, ptr %1797, align 8
  %1799 = call ptr %1798({ ptr, ptr, ptr, i32 } %1785, ptr nonnull %2)
  %1800 = call i32 %1799({ ptr, ptr, ptr, i32 } %1785, { ptr, ptr, ptr, i32 } %1785, ptr nonnull %2)
  %1801 = shl i32 %1800, 1
  %1802 = call i32 @llvm.smax.i32(i32 %1801, i32 16)
  %1803 = load ptr, ptr %result.i, align 8
  %1804 = load ptr, ptr %276, align 8
  %result.i.i2489 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1805 = getelementptr i8, ptr %result.i.i2489, i64 16
  store ptr @_parameterization_Nil, ptr %1805, align 8
  %result.i75.i2490 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1806 = getelementptr i8, ptr %result.i75.i2490, i64 16
  store ptr %1804, ptr %1806, align 8
  %1807 = getelementptr i8, ptr %result.i75.i2490, i64 8
  store ptr %1803, ptr %1807, align 8
  %1808 = getelementptr i8, ptr %result.i75.i2490, i64 24
  store ptr null, ptr %1808, align 8
  %1809 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i75.i2490)
  store ptr @Entry, ptr %result.i75.i2490, align 8
  %1810 = getelementptr i8, ptr %result.i.i2489, i64 8
  store ptr %result.i75.i2490, ptr %1810, align 8
  %1811 = getelementptr i8, ptr %result.i.i2489, i64 24
  store ptr null, ptr %1811, align 8
  %1812 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i2489)
  store ptr @union_typ, ptr %result.i.i2489, align 8
  %result.i76.i2491 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i2489, ptr %result.i76.i2491, align 8
  %1813 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i76.i2491)
  store ptr @Array, ptr %173, align 8
  store ptr %result.i76.i2491, ptr %428, align 8
  store i32 9, ptr %429, align 8
  %1814 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %173)
  %1815 = getelementptr i8, ptr %result.i76.i2491, i64 16
  store i32 %1802, ptr %1815, align 4
  %1816 = getelementptr i8, ptr %result.i76.i2491, i64 20
  store i32 %1802, ptr %1816, align 4
  %1817 = zext nneg i32 %1802 to i64
  %1818 = shl nuw nsw i64 %1817, 5
  %result.i.i.i2492 = call noalias ptr @bump_malloc_inner(i64 noundef %1818, ptr nonnull @current_ptr) #29
  %1819 = getelementptr i8, ptr %result.i76.i2491, i64 8
  store ptr %result.i.i.i2492, ptr %1819, align 8
  %1820 = load ptr, ptr %430, align 8
  store ptr @Array, ptr %293, align 8
  store ptr %result.i76.i2491, ptr %294, align 8
  store ptr %1820, ptr %383, align 8
  store i32 9, ptr %295, align 4
  %result.i91.i2505 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1821 = getelementptr i8, ptr %result.i91.i2505, i64 16
  store ptr @_parameterization_Nil, ptr %1821, align 8
  %result.i92.i2506 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1822 = getelementptr i8, ptr %result.i92.i2506, i64 16
  store ptr %1804, ptr %1822, align 8
  %1823 = getelementptr i8, ptr %result.i92.i2506, i64 8
  store ptr %1803, ptr %1823, align 8
  %1824 = getelementptr i8, ptr %result.i92.i2506, i64 24
  store ptr null, ptr %1824, align 8
  %1825 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i92.i2506)
  store ptr @Entry, ptr %result.i92.i2506, align 8
  %1826 = getelementptr i8, ptr %result.i91.i2505, i64 8
  store ptr %result.i92.i2506, ptr %1826, align 8
  %1827 = getelementptr i8, ptr %result.i91.i2505, i64 24
  store ptr null, ptr %1827, align 8
  %1828 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i91.i2505)
  store ptr @union_typ, ptr %result.i91.i2505, align 8
  %result.i93.i2507 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i91.i2505, ptr %result.i93.i2507, align 8
  %1829 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i93.i2507)
  store ptr @Array, ptr %174, align 8
  store ptr %result.i93.i2507, ptr %431, align 8
  store i32 9, ptr %432, align 8
  %1830 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %174)
  %1831 = getelementptr i8, ptr %result.i93.i2507, i64 16
  store i32 %1802, ptr %1831, align 4
  %1832 = getelementptr i8, ptr %result.i93.i2507, i64 20
  store i32 %1802, ptr %1832, align 4
  %result.i.i234.i2508 = call noalias ptr @bump_malloc_inner(i64 noundef %1818, ptr nonnull @current_ptr) #29
  %1833 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %1834 = getelementptr i8, ptr %result.i93.i2507, i64 8
  store ptr %result.i.i234.i2508, ptr %1834, align 8
  %1835 = load ptr, ptr %433, align 8
  store ptr @Array, ptr %306, align 8
  store ptr %result.i93.i2507, ptr %307, align 8
  store ptr %1835, ptr %384, align 8
  store i32 9, ptr %308, align 4
  store i32 0, ptr %385, align 4
  %1836 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %137)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %138)
  %1837 = icmp sgt i32 %1800, 0
  br i1 %1837, label %.lr.ph.i3534, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3637.critedge

.lr.ph.i3534:                                     ; preds = %._crit_edge3.i1092
  %invariant.gep.i3535 = getelementptr i8, ptr %1778, i64 120
  %offset_tbl.i.i24.i3537 = load ptr, ptr %offset_tbl_ptr.i.i20.i2461, align 8
  %hash_coef.i.i22.i3539 = load i64, ptr %hash_coef_ptr.i.i18.i2459, align 4
  %product.i.i.i25.i3540 = mul i64 %hash_coef.i.i22.i3539, -5261542750394134544
  %shifted.i.i.i26.i3541 = lshr i64 %product.i.i.i25.i3540, 32
  %xored.i.i.i27.i3542 = xor i64 %shifted.i.i.i26.i3541, %product.i.i.i25.i3540
  %tbl_size.i.i23.i3544 = load i64, ptr %tbl_size_ptr.i.i19.i2460, align 4
  %hash.i.i.i28.i3545 = and i64 %xored.i.i.i27.i3542, %tbl_size.i.i23.i3544
  %offset_ptr.i.i29.i3546 = getelementptr i32, ptr %offset_tbl.i.i24.i3537, i64 %hash.i.i.i28.i3545
  %offset.i.i30.i3547 = load i32, ptr %offset_ptr.i.i29.i3546, align 4
  %1838 = insertvalue { ptr, ptr, ptr, i32 } %1783, i32 %offset.i.i30.i3547, 3
  %1839 = sext i32 %offset.i.i30.i3547 to i64
  %gep.i3562 = getelementptr ptr, ptr %invariant.gep.i3535, i64 %1839
  %1840 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %1841

1841:                                             ; preds = %._crit_edge1.i3566, %.lr.ph.i3534
  %.reg2mem13.079.i3563 = phi i32 [ 0, %.lr.ph.i3534 ], [ %1858, %._crit_edge1.i3566 ]
  store ptr @_parameterization_Ptri32, ptr %137, align 8
  %1842 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %137)
  %1843 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %1778)
  %1844 = load ptr, ptr %gep.i3562, align 8
  store ptr @i32_typ, ptr %138, align 8
  %1845 = call ptr %1844({ ptr, ptr, ptr, i32 } %1838, ptr nonnull %138)
  %1846 = call { ptr, i160 } %1845({ ptr, ptr, ptr, i32 } %1838, { ptr, ptr, ptr, i32 } %1838, ptr nonnull %137, i32 %.reg2mem13.079.i3563)
  %.fca.0.extract11.i3564 = extractvalue { ptr, i160 } %1846, 0
  %1847 = icmp ne ptr %.fca.0.extract11.i3564, @nil_typ
  %1848 = icmp ne ptr %.fca.0.extract11.i3564, null
  %.not17.i3565 = and i1 %1847, %1848
  br i1 %.not17.i3565, label %1849, label %._crit_edge1.i3566

1849:                                             ; preds = %1841
  %.fca.1.extract13.i3567 = extractvalue { ptr, i160 } %1846, 1
  %.sroa.375.8.extract.trunc.i3568 = trunc i160 %.fca.1.extract13.i3567 to i64
  %1850 = inttoptr i64 %.sroa.375.8.extract.trunc.i3568 to ptr
  %.sroa.576.8.extract.shift.i3569 = lshr i160 %.fca.1.extract13.i3567, 64
  %.sroa.576.8.extract.trunc.i3570 = trunc i160 %.sroa.576.8.extract.shift.i3569 to i64
  %1851 = inttoptr i64 %.sroa.576.8.extract.trunc.i3570 to ptr
  %hash_coef_ptr.i.i33.i3571 = getelementptr i8, ptr %.fca.0.extract11.i3564, i64 8
  %tbl_size_ptr.i.i34.i3572 = getelementptr i8, ptr %.fca.0.extract11.i3564, i64 16
  %offset_tbl_ptr.i.i35.i3573 = getelementptr i8, ptr %.fca.0.extract11.i3564, i64 40
  %hash_coef.i.i36.i3574 = load i64, ptr %hash_coef_ptr.i.i33.i3571, align 4
  %tbl_size.i.i37.i3575 = load i64, ptr %tbl_size_ptr.i.i34.i3572, align 4
  %offset_tbl.i.i38.i3576 = load ptr, ptr %offset_tbl_ptr.i.i35.i3573, align 8
  %product.i.i.i39.i3577 = mul i64 %hash_coef.i.i36.i3574, 4015701072841558310
  %shifted.i.i.i40.i3578 = lshr i64 %product.i.i.i39.i3577, 32
  %xored.i.i.i41.i3579 = xor i64 %shifted.i.i.i40.i3578, %product.i.i.i39.i3577
  %hash.i.i.i42.i3580 = and i64 %xored.i.i.i41.i3579, %tbl_size.i.i37.i3575
  %offset_ptr.i.i43.i3581 = getelementptr i32, ptr %offset_tbl.i.i38.i3576, i64 %hash.i.i.i42.i3580
  %offset.i.i58.i3582 = load i32, ptr %offset_ptr.i.i43.i3581, align 4
  %1852 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i3564, 0
  %1853 = insertvalue { ptr, ptr, ptr, i32 } %1852, ptr %1850, 1
  %1854 = insertvalue { ptr, ptr, ptr, i32 } %1853, ptr %1851, 2
  %1855 = insertvalue { ptr, ptr, ptr, i32 } %1854, i32 %offset.i.i58.i3582, 3
  %1856 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1857 = call { ptr, i160 } @HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %449, { ptr, ptr, ptr, i32 } poison, ptr nonnull poison, { ptr, ptr, ptr, i32 } %1855)
  br label %._crit_edge1.i3566

._crit_edge1.i3566:                               ; preds = %1849, %1841
  %1858 = add nuw nsw i32 %.reg2mem13.079.i3563, 1
  %1859 = icmp slt i32 %1858, %1800
  br i1 %1859, label %1841, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3584

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3584: ; preds = %._crit_edge1.i3566
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %137)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %138)
  %1860 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %135)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %136)
  %invariant.gep.i3588 = getelementptr i8, ptr %1786, i64 120
  %offset_tbl.i.i24.i3590 = load ptr, ptr %offset_tbl_ptr.i.i48.i2478, align 8
  %hash_coef.i.i22.i3592 = load i64, ptr %hash_coef_ptr.i.i46.i2476, align 4
  %product.i.i.i25.i3593 = mul i64 %hash_coef.i.i22.i3592, -5261542750394134544
  %shifted.i.i.i26.i3594 = lshr i64 %product.i.i.i25.i3593, 32
  %xored.i.i.i27.i3595 = xor i64 %shifted.i.i.i26.i3594, %product.i.i.i25.i3593
  %tbl_size.i.i23.i3597 = load i64, ptr %tbl_size_ptr.i.i47.i2477, align 4
  %hash.i.i.i28.i3598 = and i64 %xored.i.i.i27.i3595, %tbl_size.i.i23.i3597
  %offset_ptr.i.i29.i3599 = getelementptr i32, ptr %offset_tbl.i.i24.i3590, i64 %hash.i.i.i28.i3598
  %offset.i.i30.i3600 = load i32, ptr %offset_ptr.i.i29.i3599, align 4
  %1861 = insertvalue { ptr, ptr, ptr, i32 } %1791, i32 %offset.i.i30.i3600, 3
  %1862 = sext i32 %offset.i.i30.i3600 to i64
  %gep.i3615 = getelementptr ptr, ptr %invariant.gep.i3588, i64 %1862
  %1863 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %1864

1864:                                             ; preds = %._crit_edge1.i3619, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3584
  %.reg2mem13.079.i3616 = phi i32 [ 0, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3584 ], [ %1881, %._crit_edge1.i3619 ]
  store ptr @_parameterization_Ptri32, ptr %135, align 8
  %1865 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %135)
  %1866 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %1786)
  %1867 = load ptr, ptr %gep.i3615, align 8
  store ptr @i32_typ, ptr %136, align 8
  %1868 = call ptr %1867({ ptr, ptr, ptr, i32 } %1861, ptr nonnull %136)
  %1869 = call { ptr, i160 } %1868({ ptr, ptr, ptr, i32 } %1861, { ptr, ptr, ptr, i32 } %1861, ptr nonnull %135, i32 %.reg2mem13.079.i3616)
  %.fca.0.extract11.i3617 = extractvalue { ptr, i160 } %1869, 0
  %1870 = icmp ne ptr %.fca.0.extract11.i3617, @nil_typ
  %1871 = icmp ne ptr %.fca.0.extract11.i3617, null
  %.not17.i3618 = and i1 %1870, %1871
  br i1 %.not17.i3618, label %1872, label %._crit_edge1.i3619

1872:                                             ; preds = %1864
  %.fca.1.extract13.i3620 = extractvalue { ptr, i160 } %1869, 1
  %.sroa.375.8.extract.trunc.i3621 = trunc i160 %.fca.1.extract13.i3620 to i64
  %1873 = inttoptr i64 %.sroa.375.8.extract.trunc.i3621 to ptr
  %.sroa.576.8.extract.shift.i3622 = lshr i160 %.fca.1.extract13.i3620, 64
  %.sroa.576.8.extract.trunc.i3623 = trunc i160 %.sroa.576.8.extract.shift.i3622 to i64
  %1874 = inttoptr i64 %.sroa.576.8.extract.trunc.i3623 to ptr
  %hash_coef_ptr.i.i33.i3624 = getelementptr i8, ptr %.fca.0.extract11.i3617, i64 8
  %tbl_size_ptr.i.i34.i3625 = getelementptr i8, ptr %.fca.0.extract11.i3617, i64 16
  %offset_tbl_ptr.i.i35.i3626 = getelementptr i8, ptr %.fca.0.extract11.i3617, i64 40
  %hash_coef.i.i36.i3627 = load i64, ptr %hash_coef_ptr.i.i33.i3624, align 4
  %tbl_size.i.i37.i3628 = load i64, ptr %tbl_size_ptr.i.i34.i3625, align 4
  %offset_tbl.i.i38.i3629 = load ptr, ptr %offset_tbl_ptr.i.i35.i3626, align 8
  %product.i.i.i39.i3630 = mul i64 %hash_coef.i.i36.i3627, 4015701072841558310
  %shifted.i.i.i40.i3631 = lshr i64 %product.i.i.i39.i3630, 32
  %xored.i.i.i41.i3632 = xor i64 %shifted.i.i.i40.i3631, %product.i.i.i39.i3630
  %hash.i.i.i42.i3633 = and i64 %xored.i.i.i41.i3632, %tbl_size.i.i37.i3628
  %offset_ptr.i.i43.i3634 = getelementptr i32, ptr %offset_tbl.i.i38.i3629, i64 %hash.i.i.i42.i3633
  %offset.i.i58.i3635 = load i32, ptr %offset_ptr.i.i43.i3634, align 4
  %1875 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i3617, 0
  %1876 = insertvalue { ptr, ptr, ptr, i32 } %1875, ptr %1873, 1
  %1877 = insertvalue { ptr, ptr, ptr, i32 } %1876, ptr %1874, 2
  %1878 = insertvalue { ptr, ptr, ptr, i32 } %1877, i32 %offset.i.i58.i3635, 3
  %1879 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1880 = call { ptr, i160 } @HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %449, { ptr, ptr, ptr, i32 } poison, ptr nonnull poison, { ptr, ptr, ptr, i32 } %1878)
  br label %._crit_edge1.i3619

._crit_edge1.i3619:                               ; preds = %1872, %1864
  %1881 = add nuw nsw i32 %.reg2mem13.079.i3616, 1
  %1882 = icmp slt i32 %1881, %1800
  br i1 %1882, label %1864, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3637

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3637.critedge: ; preds = %._crit_edge3.i1092
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %137)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %138)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %135)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %136)
  br label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3637

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3637: ; preds = %._crit_edge1.i3619, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3637.critedge
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %135)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %136)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %173)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %174)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %157)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %158)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %159)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %160)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %161)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %162)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %163)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0680.i2551)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %164)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %165)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %166)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %167)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %168)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %169)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %170)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %171)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i2553)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %172)
  %1883 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1884 = load i32, ptr %309, align 4
  %1885 = icmp sgt i32 %1884, 0
  br i1 %1885, label %.lr.ph.i2588, label %._crit_edge3.1.i1098

.lr.ph.i2588:                                     ; preds = %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3637
  %1886 = lshr i160 %1776, 64
  %1887 = insertelement <2 x i160> poison, i160 %1886, i64 0
  %1888 = insertelement <2 x i160> %1887, i160 %1776, i64 1
  %1889 = trunc <2 x i160> %1888 to <2 x i64>
  %1890 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1891 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  br label %1892

1892:                                             ; preds = %.cont.cont.i2642, %.lr.ph.i2588
  %offset.i.i260.i26592955 = phi i32 [ 9, %.lr.ph.i2588 ], [ %offset.i.i260.i2659, %.cont.cont.i2642 ]
  %.reg2mem195.0678.i2590 = phi i32 [ 1, %.lr.ph.i2588 ], [ %2047, %.cont.cont.i2642 ]
  %.reg2mem193.0677.i2591 = phi i32 [ 0, %.lr.ph.i2588 ], [ %2052, %.cont.cont.i2642 ]
  %1893 = phi <2 x i64> [ %1889, %.lr.ph.i2588 ], [ %2051, %.cont.cont.i2642 ]
  %1894 = extractelement <2 x i64> %1893, i64 1
  %.sroa.speculated352.i26462951 = inttoptr i64 %1894 to ptr
  %1895 = extractelement <2 x i64> %1893, i64 0
  %.sroa.speculated346.i26472953 = inttoptr i64 %1895 to ptr
  %1896 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Entry, ptr undef, ptr undef, i32 undef }, ptr %.sroa.speculated352.i26462951, 1
  %1897 = insertvalue { ptr, ptr, ptr, i32 } %1896, ptr %.sroa.speculated346.i26472953, 2
  %1898 = insertvalue { ptr, ptr, ptr, i32 } %1897, i32 %offset.i.i260.i26592955, 3
  %1899 = sext i32 %offset.i.i260.i26592955 to i64
  %gep2949 = getelementptr ptr, ptr getelementptr inbounds (i8, ptr @Entry, i64 64), i64 %1899
  %1900 = load ptr, ptr %gep2949, align 8
  %1901 = call ptr %1900({ ptr, ptr, ptr, i32 } %1898, ptr nonnull %2)
  %1902 = call i32 %1901({ ptr, ptr, ptr, i32 } %1898, { ptr, ptr, ptr, i32 } %1898, ptr nonnull %2)
  %1903 = icmp eq i32 %.reg2mem195.0678.i2590, 1
  %1904 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br i1 %1903, label %1905, label %1967

1905:                                             ; preds = %1892
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %1906 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1907 = load ptr, ptr %293, align 8
  %1908 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1907, 0
  %1909 = load ptr, ptr %294, align 8
  %1910 = insertvalue { ptr, ptr, ptr, i32 } %1908, ptr %1909, 1
  %1911 = load ptr, ptr %383, align 8
  %1912 = insertvalue { ptr, ptr, ptr, i32 } %1910, ptr %1911, 2
  %1913 = load i32, ptr %295, align 4
  %1914 = insertvalue { ptr, ptr, ptr, i32 } %1912, i32 %1913, 3
  %hash_coef_ptr.i.i10.i3655 = getelementptr i8, ptr %1907, i64 8
  %tbl_size_ptr.i.i11.i3656 = getelementptr i8, ptr %1907, i64 16
  %offset_tbl_ptr.i.i12.i3657 = getelementptr i8, ptr %1907, i64 40
  %hash_coef.i.i13.i3658 = load i64, ptr %hash_coef_ptr.i.i10.i3655, align 4
  %tbl_size.i.i14.i3659 = load i64, ptr %tbl_size_ptr.i.i11.i3656, align 4
  %offset_tbl.i.i15.i3660 = load ptr, ptr %offset_tbl_ptr.i.i12.i3657, align 8
  %product.i.i.i16.i3661 = mul i64 %hash_coef.i.i13.i3658, -5261542750394134544
  %shifted.i.i.i17.i3662 = lshr i64 %product.i.i.i16.i3661, 32
  %xored.i.i.i18.i3663 = xor i64 %shifted.i.i.i17.i3662, %product.i.i.i16.i3661
  %hash.i.i.i19.i3664 = and i64 %xored.i.i.i18.i3663, %tbl_size.i.i14.i3659
  %offset_ptr.i.i20.i3665 = getelementptr i32, ptr %offset_tbl.i.i15.i3660, i64 %hash.i.i.i19.i3664
  %offset.i.i21.i3666 = load i32, ptr %offset_ptr.i.i20.i3665, align 4
  %eq.i.i3667 = icmp eq i32 %1913, %offset.i.i21.i3666
  call void @llvm.assume(i1 %eq.i.i3667) #30
  %1915 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1916 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1907)
  %1917 = sext i32 %1913 to i64
  %1918 = getelementptr ptr, ptr %1907, i64 %1917
  %1919 = getelementptr i8, ptr %1918, i64 64
  %1920 = load ptr, ptr %1919, align 8
  %1921 = call ptr %1920({ ptr, ptr, ptr, i32 } %1914, ptr nonnull %2)
  %1922 = call i32 %1921({ ptr, ptr, ptr, i32 } %1914, { ptr, ptr, ptr, i32 } %1914, ptr nonnull %2)
  %1923 = add i32 %1922, -1
  %1924 = and i32 %1923, %1902
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %1925 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1926 = load ptr, ptr %293, align 8
  %1927 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1926, 0
  %1928 = load ptr, ptr %294, align 8
  %1929 = insertvalue { ptr, ptr, ptr, i32 } %1927, ptr %1928, 1
  %1930 = load ptr, ptr %383, align 8
  %1931 = insertvalue { ptr, ptr, ptr, i32 } %1929, ptr %1930, 2
  %1932 = load i32, ptr %295, align 4
  %1933 = insertvalue { ptr, ptr, ptr, i32 } %1931, i32 %1932, 3
  %hash_coef_ptr.i.i172.i2664 = getelementptr i8, ptr %1926, i64 8
  %tbl_size_ptr.i.i173.i2665 = getelementptr i8, ptr %1926, i64 16
  %offset_tbl_ptr.i.i174.i2666 = getelementptr i8, ptr %1926, i64 40
  %hash_coef.i.i175.i2667 = load i64, ptr %hash_coef_ptr.i.i172.i2664, align 4
  %tbl_size.i.i176.i2668 = load i64, ptr %tbl_size_ptr.i.i173.i2665, align 4
  %offset_tbl.i.i177.i2669 = load ptr, ptr %offset_tbl_ptr.i.i174.i2666, align 8
  %product.i.i.i178.i2670 = mul i64 %hash_coef.i.i175.i2667, -5261542750394134544
  %shifted.i.i.i179.i2671 = lshr i64 %product.i.i.i178.i2670, 32
  %xored.i.i.i180.i2672 = xor i64 %shifted.i.i.i179.i2671, %product.i.i.i178.i2670
  %hash.i.i.i181.i2673 = and i64 %xored.i.i.i180.i2672, %tbl_size.i.i176.i2668
  %offset_ptr.i.i182.i2674 = getelementptr i32, ptr %offset_tbl.i.i177.i2669, i64 %hash.i.i.i181.i2673
  %offset.i.i183.i2675 = load i32, ptr %offset_ptr.i.i182.i2674, align 4
  %eq.i.i2676 = icmp eq i32 %1932, %offset.i.i183.i2675
  call void @llvm.assume(i1 %eq.i.i2676) #30
  store ptr @_parameterization_Ptri32, ptr %157, align 8
  %1934 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %157)
  %1935 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1926)
  %1936 = sext i32 %1932 to i64
  %1937 = getelementptr ptr, ptr %1926, i64 %1936
  %1938 = getelementptr i8, ptr %1937, i64 120
  %1939 = load ptr, ptr %1938, align 8
  store ptr @i32_typ, ptr %158, align 8
  %1940 = call ptr %1939({ ptr, ptr, ptr, i32 } %1933, ptr nonnull %158)
  %1941 = call { ptr, i160 } %1940({ ptr, ptr, ptr, i32 } %1933, { ptr, ptr, ptr, i32 } %1933, ptr nonnull %157, i32 %1924)
  %.fca.0.extract112.i2677 = extractvalue { ptr, i160 } %1941, 0
  %.sroa.3111.0.insert.ext.i2678 = zext i32 %offset.i.i260.i26592955 to i160
  %.sroa.3111.0.insert.shift.i2679 = shl nuw i160 %.sroa.3111.0.insert.ext.i2678, 128
  %.sroa.2110.0.insert.ext.i2680 = zext i64 %1895 to i160
  %.sroa.2110.0.insert.shift.i2681 = shl nuw nsw i160 %.sroa.2110.0.insert.ext.i2680, 64
  %.sroa.2110.0.insert.insert.i2682 = or disjoint i160 %.sroa.2110.0.insert.shift.i2681, %.sroa.3111.0.insert.shift.i2679
  %.sroa.0109.0.insert.ext.i2683 = zext i64 %1894 to i160
  %.sroa.0109.0.insert.insert.i2684 = or disjoint i160 %.sroa.2110.0.insert.insert.i2682, %.sroa.0109.0.insert.ext.i2683
  %1942 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0109.0.insert.insert.i2684, 1
  %1943 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1944 = load ptr, ptr %293, align 8
  %1945 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1944, 0
  %1946 = load ptr, ptr %294, align 8
  %1947 = insertvalue { ptr, ptr, ptr, i32 } %1945, ptr %1946, 1
  %1948 = load ptr, ptr %383, align 8
  %1949 = insertvalue { ptr, ptr, ptr, i32 } %1947, ptr %1948, 2
  %1950 = load i32, ptr %295, align 4
  %1951 = insertvalue { ptr, ptr, ptr, i32 } %1949, i32 %1950, 3
  %hash_coef_ptr.i.i186.i2689 = getelementptr i8, ptr %1944, i64 8
  %tbl_size_ptr.i.i187.i2690 = getelementptr i8, ptr %1944, i64 16
  %offset_tbl_ptr.i.i188.i2691 = getelementptr i8, ptr %1944, i64 40
  %hash_coef.i.i189.i2692 = load i64, ptr %hash_coef_ptr.i.i186.i2689, align 4
  %tbl_size.i.i190.i2693 = load i64, ptr %tbl_size_ptr.i.i187.i2690, align 4
  %offset_tbl.i.i191.i2694 = load ptr, ptr %offset_tbl_ptr.i.i188.i2691, align 8
  %product.i.i.i192.i2695 = mul i64 %hash_coef.i.i189.i2692, -5261542750394134544
  %shifted.i.i.i193.i2696 = lshr i64 %product.i.i.i192.i2695, 32
  %xored.i.i.i194.i2697 = xor i64 %shifted.i.i.i193.i2696, %product.i.i.i192.i2695
  %hash.i.i.i195.i2698 = and i64 %xored.i.i.i194.i2697, %tbl_size.i.i190.i2693
  %offset_ptr.i.i196.i2699 = getelementptr i32, ptr %offset_tbl.i.i191.i2694, i64 %hash.i.i.i195.i2698
  %offset.i.i197.i2700 = load i32, ptr %offset_ptr.i.i196.i2699, align 4
  %eq.i200.i2701 = icmp eq i32 %1950, %offset.i.i197.i2700
  call void @llvm.assume(i1 %eq.i200.i2701) #30
  %1952 = load ptr, ptr %result.i, align 8
  %1953 = load ptr, ptr %276, align 8
  %result.i.i2702 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1954 = getelementptr i8, ptr %result.i.i2702, i64 16
  store ptr %1953, ptr %1954, align 8
  %1955 = getelementptr i8, ptr %result.i.i2702, i64 8
  store ptr %1952, ptr %1955, align 8
  %1956 = getelementptr i8, ptr %result.i.i2702, i64 24
  store ptr null, ptr %1956, align 8
  %1957 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i2702)
  store ptr @Entry, ptr %result.i.i2702, align 8
  store ptr @_parameterization_Ptri32, ptr %159, align 8
  store ptr %result.i.i2702, ptr %436, align 8
  %1958 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %159)
  %1959 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1944)
  %1960 = sext i32 %1950 to i64
  %1961 = getelementptr ptr, ptr %1944, i64 %1960
  %1962 = getelementptr i8, ptr %1961, i64 128
  %1963 = load ptr, ptr %1962, align 8
  store ptr @i32_typ, ptr %160, align 8
  store ptr @Entry, ptr %437, align 8
  %1964 = call ptr %1963({ ptr, ptr, ptr, i32 } %1951, ptr nonnull %160)
  call void %1964({ ptr, ptr, ptr, i32 } %1951, { ptr, ptr, ptr, i32 } %1951, ptr nonnull %159, i32 %1924, { ptr, i160 } %1942)
  %1965 = icmp ne ptr %.fca.0.extract112.i2677, @nil_typ
  %1966 = icmp ne ptr %.fca.0.extract112.i2677, null
  %.not140.i2703 = and i1 %1965, %1966
  br i1 %.not140.i2703, label %.cont.cont.i2642, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit2709.thread

1967:                                             ; preds = %1892
  %1968 = add i32 %1902, 2127912214
  %1969 = shl i32 %1902, 12
  %1970 = add i32 %1968, %1969
  %1971 = ashr i32 %1970, 19
  %1972 = xor i32 %1970, %1971
  %1973 = xor i32 %1972, -949894596
  %1974 = add i32 %1973, 374761393
  %1975 = shl i32 %1973, 5
  %1976 = add i32 %1974, %1975
  %1977 = add i32 %1976, -744332180
  %1978 = shl i32 %1976, 9
  %1979 = xor i32 %1977, %1978
  %1980 = add i32 %1979, -42973499
  %1981 = shl i32 %1979, 3
  %1982 = add i32 %1980, %1981
  %1983 = ashr i32 %1982, 16
  %1984 = xor i32 %1982, %1983
  %1985 = xor i32 %1984, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %1986 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1987 = load ptr, ptr %306, align 8
  %1988 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1987, 0
  %1989 = load ptr, ptr %307, align 8
  %1990 = insertvalue { ptr, ptr, ptr, i32 } %1988, ptr %1989, 1
  %1991 = load ptr, ptr %384, align 8
  %1992 = insertvalue { ptr, ptr, ptr, i32 } %1990, ptr %1991, 2
  %1993 = load i32, ptr %308, align 4
  %1994 = insertvalue { ptr, ptr, ptr, i32 } %1992, i32 %1993, 3
  %hash_coef_ptr.i.i10.i3685 = getelementptr i8, ptr %1987, i64 8
  %tbl_size_ptr.i.i11.i3686 = getelementptr i8, ptr %1987, i64 16
  %offset_tbl_ptr.i.i12.i3687 = getelementptr i8, ptr %1987, i64 40
  %hash_coef.i.i13.i3688 = load i64, ptr %hash_coef_ptr.i.i10.i3685, align 4
  %tbl_size.i.i14.i3689 = load i64, ptr %tbl_size_ptr.i.i11.i3686, align 4
  %offset_tbl.i.i15.i3690 = load ptr, ptr %offset_tbl_ptr.i.i12.i3687, align 8
  %product.i.i.i16.i3691 = mul i64 %hash_coef.i.i13.i3688, -5261542750394134544
  %shifted.i.i.i17.i3692 = lshr i64 %product.i.i.i16.i3691, 32
  %xored.i.i.i18.i3693 = xor i64 %shifted.i.i.i17.i3692, %product.i.i.i16.i3691
  %hash.i.i.i19.i3694 = and i64 %xored.i.i.i18.i3693, %tbl_size.i.i14.i3689
  %offset_ptr.i.i20.i3695 = getelementptr i32, ptr %offset_tbl.i.i15.i3690, i64 %hash.i.i.i19.i3694
  %offset.i.i21.i3696 = load i32, ptr %offset_ptr.i.i20.i3695, align 4
  %eq.i.i3697 = icmp eq i32 %1993, %offset.i.i21.i3696
  call void @llvm.assume(i1 %eq.i.i3697) #30
  %1995 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1996 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1987)
  %1997 = sext i32 %1993 to i64
  %1998 = getelementptr ptr, ptr %1987, i64 %1997
  %1999 = getelementptr i8, ptr %1998, i64 64
  %2000 = load ptr, ptr %1999, align 8
  %2001 = call ptr %2000({ ptr, ptr, ptr, i32 } %1994, ptr nonnull %2)
  %2002 = call i32 %2001({ ptr, ptr, ptr, i32 } %1994, { ptr, ptr, ptr, i32 } %1994, ptr nonnull %2)
  %2003 = add i32 %2002, -1
  %2004 = and i32 %2003, %1985
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %2005 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2006 = load ptr, ptr %306, align 8
  %2007 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2006, 0
  %2008 = load ptr, ptr %307, align 8
  %2009 = insertvalue { ptr, ptr, ptr, i32 } %2007, ptr %2008, 1
  %2010 = load ptr, ptr %384, align 8
  %2011 = insertvalue { ptr, ptr, ptr, i32 } %2009, ptr %2010, 2
  %2012 = load i32, ptr %308, align 4
  %2013 = insertvalue { ptr, ptr, ptr, i32 } %2011, i32 %2012, 3
  %hash_coef_ptr.i.i202.i2596 = getelementptr i8, ptr %2006, i64 8
  %tbl_size_ptr.i.i203.i2597 = getelementptr i8, ptr %2006, i64 16
  %offset_tbl_ptr.i.i204.i2598 = getelementptr i8, ptr %2006, i64 40
  %hash_coef.i.i205.i2599 = load i64, ptr %hash_coef_ptr.i.i202.i2596, align 4
  %tbl_size.i.i206.i2600 = load i64, ptr %tbl_size_ptr.i.i203.i2597, align 4
  %offset_tbl.i.i207.i2601 = load ptr, ptr %offset_tbl_ptr.i.i204.i2598, align 8
  %product.i.i.i208.i2602 = mul i64 %hash_coef.i.i205.i2599, -5261542750394134544
  %shifted.i.i.i209.i2603 = lshr i64 %product.i.i.i208.i2602, 32
  %xored.i.i.i210.i2604 = xor i64 %shifted.i.i.i209.i2603, %product.i.i.i208.i2602
  %hash.i.i.i211.i2605 = and i64 %xored.i.i.i210.i2604, %tbl_size.i.i206.i2600
  %offset_ptr.i.i212.i2606 = getelementptr i32, ptr %offset_tbl.i.i207.i2601, i64 %hash.i.i.i211.i2605
  %offset.i.i213.i2607 = load i32, ptr %offset_ptr.i.i212.i2606, align 4
  %eq.i216.i2608 = icmp eq i32 %2012, %offset.i.i213.i2607
  call void @llvm.assume(i1 %eq.i216.i2608) #30
  store ptr @_parameterization_Ptri32, ptr %165, align 8
  %2014 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %165)
  %2015 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2006)
  %2016 = sext i32 %2012 to i64
  %2017 = getelementptr ptr, ptr %2006, i64 %2016
  %2018 = getelementptr i8, ptr %2017, i64 120
  %2019 = load ptr, ptr %2018, align 8
  store ptr @i32_typ, ptr %166, align 8
  %2020 = call ptr %2019({ ptr, ptr, ptr, i32 } %2013, ptr nonnull %166)
  %2021 = call { ptr, i160 } %2020({ ptr, ptr, ptr, i32 } %2013, { ptr, ptr, ptr, i32 } %2013, ptr nonnull %165, i32 %2004)
  %.fca.0.extract87.i2609 = extractvalue { ptr, i160 } %2021, 0
  %.sroa.3.0.insert.ext.i2610 = zext i32 %offset.i.i260.i26592955 to i160
  %.sroa.3.0.insert.shift.i2611 = shl nuw i160 %.sroa.3.0.insert.ext.i2610, 128
  %.sroa.2.0.insert.ext.i2612 = zext i64 %1895 to i160
  %.sroa.2.0.insert.shift.i2613 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i2612, 64
  %.sroa.2.0.insert.insert.i2614 = or disjoint i160 %.sroa.2.0.insert.shift.i2613, %.sroa.3.0.insert.shift.i2611
  %.sroa.0.0.insert.ext.i2615 = zext i64 %1894 to i160
  %.sroa.0.0.insert.insert.i2616 = or disjoint i160 %.sroa.2.0.insert.insert.i2614, %.sroa.0.0.insert.ext.i2615
  %2022 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0.0.insert.insert.i2616, 1
  %2023 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2024 = load ptr, ptr %306, align 8
  %2025 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2024, 0
  %2026 = load ptr, ptr %307, align 8
  %2027 = insertvalue { ptr, ptr, ptr, i32 } %2025, ptr %2026, 1
  %2028 = load ptr, ptr %384, align 8
  %2029 = insertvalue { ptr, ptr, ptr, i32 } %2027, ptr %2028, 2
  %2030 = load i32, ptr %308, align 4
  %2031 = insertvalue { ptr, ptr, ptr, i32 } %2029, i32 %2030, 3
  %hash_coef_ptr.i.i218.i2621 = getelementptr i8, ptr %2024, i64 8
  %tbl_size_ptr.i.i219.i2622 = getelementptr i8, ptr %2024, i64 16
  %offset_tbl_ptr.i.i220.i2623 = getelementptr i8, ptr %2024, i64 40
  %hash_coef.i.i221.i2624 = load i64, ptr %hash_coef_ptr.i.i218.i2621, align 4
  %tbl_size.i.i222.i2625 = load i64, ptr %tbl_size_ptr.i.i219.i2622, align 4
  %offset_tbl.i.i223.i2626 = load ptr, ptr %offset_tbl_ptr.i.i220.i2623, align 8
  %product.i.i.i224.i2627 = mul i64 %hash_coef.i.i221.i2624, -5261542750394134544
  %shifted.i.i.i225.i2628 = lshr i64 %product.i.i.i224.i2627, 32
  %xored.i.i.i226.i2629 = xor i64 %shifted.i.i.i225.i2628, %product.i.i.i224.i2627
  %hash.i.i.i227.i2630 = and i64 %xored.i.i.i226.i2629, %tbl_size.i.i222.i2625
  %offset_ptr.i.i228.i2631 = getelementptr i32, ptr %offset_tbl.i.i223.i2626, i64 %hash.i.i.i227.i2630
  %offset.i.i229.i2632 = load i32, ptr %offset_ptr.i.i228.i2631, align 4
  %eq.i232.i2633 = icmp eq i32 %2030, %offset.i.i229.i2632
  call void @llvm.assume(i1 %eq.i232.i2633) #30
  %2032 = load ptr, ptr %result.i, align 8
  %2033 = load ptr, ptr %276, align 8
  %result.i233.i2634 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2034 = getelementptr i8, ptr %result.i233.i2634, i64 16
  store ptr %2033, ptr %2034, align 8
  %2035 = getelementptr i8, ptr %result.i233.i2634, i64 8
  store ptr %2032, ptr %2035, align 8
  %2036 = getelementptr i8, ptr %result.i233.i2634, i64 24
  store ptr null, ptr %2036, align 8
  %2037 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i233.i2634)
  store ptr @Entry, ptr %result.i233.i2634, align 8
  store ptr @_parameterization_Ptri32, ptr %167, align 8
  store ptr %result.i233.i2634, ptr %434, align 8
  %2038 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %167)
  %2039 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2024)
  %2040 = sext i32 %2030 to i64
  %2041 = getelementptr ptr, ptr %2024, i64 %2040
  %2042 = getelementptr i8, ptr %2041, i64 128
  %2043 = load ptr, ptr %2042, align 8
  store ptr @i32_typ, ptr %168, align 8
  store ptr @Entry, ptr %435, align 8
  %2044 = call ptr %2043({ ptr, ptr, ptr, i32 } %2031, ptr nonnull %168)
  call void %2044({ ptr, ptr, ptr, i32 } %2031, { ptr, ptr, ptr, i32 } %2031, ptr nonnull %167, i32 %2004, { ptr, i160 } %2022)
  %2045 = icmp ne ptr %.fca.0.extract87.i2609, @nil_typ
  %2046 = icmp ne ptr %.fca.0.extract87.i2609, null
  %.not138.i2635 = and i1 %2045, %2046
  br i1 %.not138.i2635, label %.cont.cont.i2642, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit2709.thread

.cont.cont.i2642:                                 ; preds = %1967, %1905
  %.sink2970 = phi { ptr, i160 } [ %1941, %1905 ], [ %2021, %1967 ]
  %2047 = phi i32 [ 2, %1905 ], [ 1, %1967 ]
  %vptr.i248.sroa.speculated.i2645 = phi ptr [ %.fca.0.extract112.i2677, %1905 ], [ %.fca.0.extract87.i2609, %1967 ]
  %.fca.1.extract89.i2638 = extractvalue { ptr, i160 } %.sink2970, 1
  %.sroa.3407.sroa.4.0.extract.shift.i2639 = lshr i160 %.fca.1.extract89.i2638, 64
  %2048 = trunc i160 %.sroa.3407.sroa.4.0.extract.shift.i2639 to i64
  %2049 = insertelement <2 x i64> poison, i64 %2048, i64 0
  %2050 = trunc i160 %.fca.1.extract89.i2638 to i64
  %2051 = insertelement <2 x i64> %2049, i64 %2050, i64 1
  %hash_coef_ptr.i.i249.i2648 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i2645, i64 8
  %tbl_size_ptr.i.i250.i2649 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i2645, i64 16
  %offset_tbl_ptr.i.i251.i2650 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i2645, i64 40
  %hash_coef.i.i252.i2651 = load i64, ptr %hash_coef_ptr.i.i249.i2648, align 4
  %tbl_size.i.i253.i2652 = load i64, ptr %tbl_size_ptr.i.i250.i2649, align 4
  %offset_tbl.i.i254.i2653 = load ptr, ptr %offset_tbl_ptr.i.i251.i2650, align 8
  %product.i.i.i255.i2654 = mul i64 %hash_coef.i.i252.i2651, 4015701072841558310
  %shifted.i.i.i256.i2655 = lshr i64 %product.i.i.i255.i2654, 32
  %xored.i.i.i257.i2656 = xor i64 %shifted.i.i.i256.i2655, %product.i.i.i255.i2654
  %hash.i.i.i258.i2657 = and i64 %xored.i.i.i257.i2656, %tbl_size.i.i253.i2652
  %offset_ptr.i.i259.i2658 = getelementptr i32, ptr %offset_tbl.i.i254.i2653, i64 %hash.i.i.i258.i2657
  %offset.i.i260.i2659 = load i32, ptr %offset_ptr.i.i259.i2658, align 4
  %2052 = add nuw nsw i32 %.reg2mem193.0677.i2591, 1
  %2053 = load i32, ptr %309, align 4
  %2054 = icmp slt i32 %2052, %2053
  br i1 %2054, label %1892, label %._crit_edge3.1.i1098

HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit2709.thread: ; preds = %1905, %1967
  %2055 = phi ptr [ %169, %1967 ], [ %161, %1905 ]
  %2056 = phi ptr [ %170, %1967 ], [ %162, %1905 ]
  %2057 = phi ptr [ %171, %1967 ], [ %163, %1905 ]
  %2058 = phi ptr [ %.sroa.0.i2553, %1967 ], [ %.sroa.0680.i2551, %1905 ]
  %2059 = phi ptr [ %172, %1967 ], [ %164, %1905 ]
  %2060 = load i32, ptr %385, align 4
  store i32 %2060, ptr %2055, align 4
  store i32 1, ptr %2056, align 4
  %2061 = add i32 %2060, 1
  store i32 %2061, ptr %2057, align 4
  %2062 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  store i32 %2061, ptr %385, align 4
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %2059, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %2058, align 8
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %157)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %158)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %159)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %160)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %161)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %162)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %163)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i2551)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %164)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %165)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %166)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %167)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %168)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %169)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %170)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %171)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i2553)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %172)
  br label %HashMap_insert_keyK_valueV.exit1183

._crit_edge3.1.i1098:                             ; preds = %.cont.cont.i2642, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3637
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %157)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %158)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %159)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %160)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %161)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %162)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %163)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i2551)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %164)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %165)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %166)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %167)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %168)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %169)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %170)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %171)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i2553)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %172)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %155)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %156)
  %2063 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2064 = load ptr, ptr %293, align 8
  %2065 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2064, 0
  %2066 = load ptr, ptr %294, align 8
  %2067 = insertvalue { ptr, ptr, ptr, i32 } %2065, ptr %2066, 1
  %2068 = load ptr, ptr %383, align 8
  %2069 = insertvalue { ptr, ptr, ptr, i32 } %2067, ptr %2068, 2
  %2070 = load i32, ptr %295, align 4
  %2071 = insertvalue { ptr, ptr, ptr, i32 } %2069, i32 %2070, 3
  %hash_coef_ptr.i.i18.i2728 = getelementptr i8, ptr %2064, i64 8
  %tbl_size_ptr.i.i19.i2729 = getelementptr i8, ptr %2064, i64 16
  %offset_tbl_ptr.i.i20.i2730 = getelementptr i8, ptr %2064, i64 40
  %hash_coef.i.i21.i2731 = load i64, ptr %hash_coef_ptr.i.i18.i2728, align 4
  %tbl_size.i.i22.i2732 = load i64, ptr %tbl_size_ptr.i.i19.i2729, align 4
  %offset_tbl.i.i23.i2733 = load ptr, ptr %offset_tbl_ptr.i.i20.i2730, align 8
  %product.i.i.i24.i2734 = mul i64 %hash_coef.i.i21.i2731, -5261542750394134544
  %shifted.i.i.i25.i2735 = lshr i64 %product.i.i.i24.i2734, 32
  %xored.i.i.i26.i2736 = xor i64 %shifted.i.i.i25.i2735, %product.i.i.i24.i2734
  %hash.i.i.i27.i2737 = and i64 %xored.i.i.i26.i2736, %tbl_size.i.i22.i2732
  %offset_ptr.i.i28.i2738 = getelementptr i32, ptr %offset_tbl.i.i23.i2733, i64 %hash.i.i.i27.i2737
  %offset.i.i29.i2739 = load i32, ptr %offset_ptr.i.i28.i2738, align 4
  %eq.i.i2740 = icmp eq i32 %2070, %offset.i.i29.i2739
  call void @llvm.assume(i1 %eq.i.i2740) #30
  %2072 = load ptr, ptr %306, align 8
  %2073 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2072, 0
  %2074 = load ptr, ptr %307, align 8
  %2075 = insertvalue { ptr, ptr, ptr, i32 } %2073, ptr %2074, 1
  %2076 = load ptr, ptr %384, align 8
  %2077 = insertvalue { ptr, ptr, ptr, i32 } %2075, ptr %2076, 2
  %2078 = load i32, ptr %308, align 4
  %hash_coef_ptr.i.i46.i2745 = getelementptr i8, ptr %2072, i64 8
  %tbl_size_ptr.i.i47.i2746 = getelementptr i8, ptr %2072, i64 16
  %offset_tbl_ptr.i.i48.i2747 = getelementptr i8, ptr %2072, i64 40
  %hash_coef.i.i49.i2748 = load i64, ptr %hash_coef_ptr.i.i46.i2745, align 4
  %tbl_size.i.i50.i2749 = load i64, ptr %tbl_size_ptr.i.i47.i2746, align 4
  %offset_tbl.i.i51.i2750 = load ptr, ptr %offset_tbl_ptr.i.i48.i2747, align 8
  %product.i.i.i52.i2751 = mul i64 %hash_coef.i.i49.i2748, -5261542750394134544
  %shifted.i.i.i53.i2752 = lshr i64 %product.i.i.i52.i2751, 32
  %xored.i.i.i54.i2753 = xor i64 %shifted.i.i.i53.i2752, %product.i.i.i52.i2751
  %hash.i.i.i55.i2754 = and i64 %xored.i.i.i54.i2753, %tbl_size.i.i50.i2749
  %offset_ptr.i.i56.i2755 = getelementptr i32, ptr %offset_tbl.i.i51.i2750, i64 %hash.i.i.i55.i2754
  %offset.i.i57.i2756 = load i32, ptr %offset_ptr.i.i56.i2755, align 4
  %eq.i60.i2757 = icmp eq i32 %2078, %offset.i.i57.i2756
  call void @llvm.assume(i1 %eq.i60.i2757) #30
  %2079 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2080 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2064)
  %2081 = sext i32 %2070 to i64
  %2082 = getelementptr ptr, ptr %2064, i64 %2081
  %2083 = getelementptr i8, ptr %2082, i64 64
  %2084 = load ptr, ptr %2083, align 8
  %2085 = call ptr %2084({ ptr, ptr, ptr, i32 } %2071, ptr nonnull %2)
  %2086 = call i32 %2085({ ptr, ptr, ptr, i32 } %2071, { ptr, ptr, ptr, i32 } %2071, ptr nonnull %2)
  %2087 = shl i32 %2086, 1
  %2088 = call i32 @llvm.smax.i32(i32 %2087, i32 16)
  %2089 = load ptr, ptr %result.i, align 8
  %2090 = load ptr, ptr %276, align 8
  %result.i.i2758 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2091 = getelementptr i8, ptr %result.i.i2758, i64 16
  store ptr @_parameterization_Nil, ptr %2091, align 8
  %result.i75.i2759 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2092 = getelementptr i8, ptr %result.i75.i2759, i64 16
  store ptr %2090, ptr %2092, align 8
  %2093 = getelementptr i8, ptr %result.i75.i2759, i64 8
  store ptr %2089, ptr %2093, align 8
  %2094 = getelementptr i8, ptr %result.i75.i2759, i64 24
  store ptr null, ptr %2094, align 8
  %2095 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i75.i2759)
  store ptr @Entry, ptr %result.i75.i2759, align 8
  %2096 = getelementptr i8, ptr %result.i.i2758, i64 8
  store ptr %result.i75.i2759, ptr %2096, align 8
  %2097 = getelementptr i8, ptr %result.i.i2758, i64 24
  store ptr null, ptr %2097, align 8
  %2098 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i2758)
  store ptr @union_typ, ptr %result.i.i2758, align 8
  %result.i76.i2760 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i2758, ptr %result.i76.i2760, align 8
  %2099 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i76.i2760)
  store ptr @Array, ptr %155, align 8
  store ptr %result.i76.i2760, ptr %438, align 8
  store i32 9, ptr %439, align 8
  %2100 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %155)
  %2101 = getelementptr i8, ptr %result.i76.i2760, i64 16
  store i32 %2088, ptr %2101, align 4
  %2102 = getelementptr i8, ptr %result.i76.i2760, i64 20
  store i32 %2088, ptr %2102, align 4
  %2103 = zext nneg i32 %2088 to i64
  %2104 = shl nuw nsw i64 %2103, 5
  %result.i.i.i2761 = call noalias ptr @bump_malloc_inner(i64 noundef %2104, ptr nonnull @current_ptr) #29
  %2105 = getelementptr i8, ptr %result.i76.i2760, i64 8
  store ptr %result.i.i.i2761, ptr %2105, align 8
  %2106 = load ptr, ptr %440, align 8
  store ptr @Array, ptr %293, align 8
  store ptr %result.i76.i2760, ptr %294, align 8
  store ptr %2106, ptr %383, align 8
  store i32 9, ptr %295, align 4
  %result.i91.i2774 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2107 = getelementptr i8, ptr %result.i91.i2774, i64 16
  store ptr @_parameterization_Nil, ptr %2107, align 8
  %result.i92.i2775 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2108 = getelementptr i8, ptr %result.i92.i2775, i64 16
  store ptr %2090, ptr %2108, align 8
  %2109 = getelementptr i8, ptr %result.i92.i2775, i64 8
  store ptr %2089, ptr %2109, align 8
  %2110 = getelementptr i8, ptr %result.i92.i2775, i64 24
  store ptr null, ptr %2110, align 8
  %2111 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i92.i2775)
  store ptr @Entry, ptr %result.i92.i2775, align 8
  %2112 = getelementptr i8, ptr %result.i91.i2774, i64 8
  store ptr %result.i92.i2775, ptr %2112, align 8
  %2113 = getelementptr i8, ptr %result.i91.i2774, i64 24
  store ptr null, ptr %2113, align 8
  %2114 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i91.i2774)
  store ptr @union_typ, ptr %result.i91.i2774, align 8
  %result.i93.i2776 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i91.i2774, ptr %result.i93.i2776, align 8
  %2115 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i93.i2776)
  store ptr @Array, ptr %156, align 8
  store ptr %result.i93.i2776, ptr %441, align 8
  store i32 9, ptr %442, align 8
  %2116 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %156)
  %2117 = getelementptr i8, ptr %result.i93.i2776, i64 16
  store i32 %2088, ptr %2117, align 4
  %2118 = getelementptr i8, ptr %result.i93.i2776, i64 20
  store i32 %2088, ptr %2118, align 4
  %result.i.i234.i2777 = call noalias ptr @bump_malloc_inner(i64 noundef %2104, ptr nonnull @current_ptr) #29
  %2119 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %2120 = getelementptr i8, ptr %result.i93.i2776, i64 8
  store ptr %result.i.i234.i2777, ptr %2120, align 8
  %2121 = load ptr, ptr %443, align 8
  store ptr @Array, ptr %306, align 8
  store ptr %result.i93.i2776, ptr %307, align 8
  store ptr %2121, ptr %384, align 8
  store i32 9, ptr %308, align 4
  store i32 0, ptr %385, align 4
  %2122 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %133)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %134)
  %2123 = icmp sgt i32 %2086, 0
  br i1 %2123, label %.lr.ph.i3700, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3803.critedge

.lr.ph.i3700:                                     ; preds = %._crit_edge3.1.i1098
  %invariant.gep.i3701 = getelementptr i8, ptr %2064, i64 120
  %offset_tbl.i.i24.i3703 = load ptr, ptr %offset_tbl_ptr.i.i20.i2730, align 8
  %hash_coef.i.i22.i3705 = load i64, ptr %hash_coef_ptr.i.i18.i2728, align 4
  %product.i.i.i25.i3706 = mul i64 %hash_coef.i.i22.i3705, -5261542750394134544
  %shifted.i.i.i26.i3707 = lshr i64 %product.i.i.i25.i3706, 32
  %xored.i.i.i27.i3708 = xor i64 %shifted.i.i.i26.i3707, %product.i.i.i25.i3706
  %tbl_size.i.i23.i3710 = load i64, ptr %tbl_size_ptr.i.i19.i2729, align 4
  %hash.i.i.i28.i3711 = and i64 %xored.i.i.i27.i3708, %tbl_size.i.i23.i3710
  %offset_ptr.i.i29.i3712 = getelementptr i32, ptr %offset_tbl.i.i24.i3703, i64 %hash.i.i.i28.i3711
  %offset.i.i30.i3713 = load i32, ptr %offset_ptr.i.i29.i3712, align 4
  %2124 = insertvalue { ptr, ptr, ptr, i32 } %2069, i32 %offset.i.i30.i3713, 3
  %2125 = sext i32 %offset.i.i30.i3713 to i64
  %gep.i3728 = getelementptr ptr, ptr %invariant.gep.i3701, i64 %2125
  %2126 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %2127

2127:                                             ; preds = %._crit_edge1.i3732, %.lr.ph.i3700
  %.reg2mem13.079.i3729 = phi i32 [ 0, %.lr.ph.i3700 ], [ %2319, %._crit_edge1.i3732 ]
  store ptr @_parameterization_Ptri32, ptr %133, align 8
  %2128 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %133)
  %2129 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %2064)
  %2130 = load ptr, ptr %gep.i3728, align 8
  store ptr @i32_typ, ptr %134, align 8
  %2131 = call ptr %2130({ ptr, ptr, ptr, i32 } %2124, ptr nonnull %134)
  %2132 = call { ptr, i160 } %2131({ ptr, ptr, ptr, i32 } %2124, { ptr, ptr, ptr, i32 } %2124, ptr nonnull %133, i32 %.reg2mem13.079.i3729)
  %.fca.0.extract11.i3730 = extractvalue { ptr, i160 } %2132, 0
  %2133 = icmp ne ptr %.fca.0.extract11.i3730, @nil_typ
  %2134 = icmp ne ptr %.fca.0.extract11.i3730, null
  %.not17.i3731 = and i1 %2133, %2134
  br i1 %.not17.i3731, label %2135, label %._crit_edge1.i3732

2135:                                             ; preds = %2127
  %hash_coef_ptr.i.i33.i3737 = getelementptr i8, ptr %.fca.0.extract11.i3730, i64 8
  %tbl_size_ptr.i.i34.i3738 = getelementptr i8, ptr %.fca.0.extract11.i3730, i64 16
  %offset_tbl_ptr.i.i35.i3739 = getelementptr i8, ptr %.fca.0.extract11.i3730, i64 40
  %2136 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %19)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %20)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %21)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %22)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %23)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %24)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %25)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0680.i4753)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %26)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %27)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %28)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %29)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %30)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %31)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %32)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %33)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i4755)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %34)
  %hash_coef.i.i147.i4774 = load i64, ptr %hash_coef_ptr.i.i33.i3737, align 4
  %tbl_size.i.i148.i4775 = load i64, ptr %tbl_size_ptr.i.i34.i3738, align 4
  %offset_tbl.i.i149.i4776 = load ptr, ptr %offset_tbl_ptr.i.i35.i3739, align 8
  %product.i.i.i150.i4777 = mul i64 %hash_coef.i.i147.i4774, 4015701072841558310
  %shifted.i.i.i151.i4778 = lshr i64 %product.i.i.i150.i4777, 32
  %xored.i.i.i152.i4779 = xor i64 %shifted.i.i.i151.i4778, %product.i.i.i150.i4777
  %hash.i.i.i153.i4780 = and i64 %xored.i.i.i152.i4779, %tbl_size.i.i148.i4775
  %offset_ptr.i.i154.i4781 = getelementptr i32, ptr %offset_tbl.i.i149.i4776, i64 %hash.i.i.i153.i4780
  %offset.i.i169.i4782 = load i32, ptr %offset_ptr.i.i154.i4781, align 4
  %2137 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2138 = load i32, ptr %309, align 4
  %2139 = icmp sgt i32 %2138, 0
  br i1 %2139, label %.lr.ph.i4788, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4908

.lr.ph.i4788:                                     ; preds = %2135
  %.fca.1.extract13.i3733 = extractvalue { ptr, i160 } %2132, 1
  %.sroa.576.8.extract.shift.i3735 = lshr i160 %.fca.1.extract13.i3733, 64
  %2140 = insertelement <2 x i160> poison, i160 %.sroa.576.8.extract.shift.i3735, i64 0
  %2141 = insertelement <2 x i160> %2140, i160 %.fca.1.extract13.i3733, i64 1
  %2142 = trunc <2 x i160> %2141 to <2 x i64>
  %2143 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i3730, 0
  %2144 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2145 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract11.i3730)
  %invariant.gep5086 = getelementptr i8, ptr %.fca.0.extract11.i3730, i64 64
  %2146 = insertvalue { ptr, i160 } undef, ptr %.fca.0.extract11.i3730, 0
  br label %2147

2147:                                             ; preds = %.cont.cont.i4841, %.lr.ph.i4788
  %offset.i.i260.i48585093 = phi i32 [ %offset.i.i169.i4782, %.lr.ph.i4788 ], [ %offset.i.i260.i4858, %.cont.cont.i4841 ]
  %.reg2mem195.0678.i4789 = phi i32 [ 1, %.lr.ph.i4788 ], [ %2302, %.cont.cont.i4841 ]
  %.reg2mem193.0677.i4790 = phi i32 [ 0, %.lr.ph.i4788 ], [ %2307, %.cont.cont.i4841 ]
  %2148 = phi <2 x i64> [ %2142, %.lr.ph.i4788 ], [ %2306, %.cont.cont.i4841 ]
  %2149 = extractelement <2 x i64> %2148, i64 1
  %.sroa.speculated352.i48455089 = inttoptr i64 %2149 to ptr
  %2150 = extractelement <2 x i64> %2148, i64 0
  %.sroa.speculated346.i48465091 = inttoptr i64 %2150 to ptr
  %2151 = insertvalue { ptr, ptr, ptr, i32 } %2143, ptr %.sroa.speculated352.i48455089, 1
  %2152 = insertvalue { ptr, ptr, ptr, i32 } %2151, ptr %.sroa.speculated346.i48465091, 2
  %2153 = insertvalue { ptr, ptr, ptr, i32 } %2152, i32 %offset.i.i260.i48585093, 3
  %2154 = sext i32 %offset.i.i260.i48585093 to i64
  %gep5087 = getelementptr ptr, ptr %invariant.gep5086, i64 %2154
  %2155 = load ptr, ptr %gep5087, align 8
  %2156 = call ptr %2155({ ptr, ptr, ptr, i32 } %2153, ptr nonnull %2)
  %2157 = call i32 %2156({ ptr, ptr, ptr, i32 } %2153, { ptr, ptr, ptr, i32 } %2153, ptr nonnull %2)
  %2158 = icmp eq i32 %.reg2mem195.0678.i4789, 1
  %2159 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br i1 %2158, label %2160, label %2222

2160:                                             ; preds = %2147
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %2161 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2162 = load ptr, ptr %293, align 8
  %2163 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2162, 0
  %2164 = load ptr, ptr %294, align 8
  %2165 = insertvalue { ptr, ptr, ptr, i32 } %2163, ptr %2164, 1
  %2166 = load ptr, ptr %383, align 8
  %2167 = insertvalue { ptr, ptr, ptr, i32 } %2165, ptr %2166, 2
  %2168 = load i32, ptr %295, align 4
  %2169 = insertvalue { ptr, ptr, ptr, i32 } %2167, i32 %2168, 3
  %hash_coef_ptr.i.i10.i5490 = getelementptr i8, ptr %2162, i64 8
  %tbl_size_ptr.i.i11.i5491 = getelementptr i8, ptr %2162, i64 16
  %offset_tbl_ptr.i.i12.i5492 = getelementptr i8, ptr %2162, i64 40
  %hash_coef.i.i13.i5493 = load i64, ptr %hash_coef_ptr.i.i10.i5490, align 4
  %tbl_size.i.i14.i5494 = load i64, ptr %tbl_size_ptr.i.i11.i5491, align 4
  %offset_tbl.i.i15.i5495 = load ptr, ptr %offset_tbl_ptr.i.i12.i5492, align 8
  %product.i.i.i16.i5496 = mul i64 %hash_coef.i.i13.i5493, -5261542750394134544
  %shifted.i.i.i17.i5497 = lshr i64 %product.i.i.i16.i5496, 32
  %xored.i.i.i18.i5498 = xor i64 %shifted.i.i.i17.i5497, %product.i.i.i16.i5496
  %hash.i.i.i19.i5499 = and i64 %xored.i.i.i18.i5498, %tbl_size.i.i14.i5494
  %offset_ptr.i.i20.i5500 = getelementptr i32, ptr %offset_tbl.i.i15.i5495, i64 %hash.i.i.i19.i5499
  %offset.i.i21.i5501 = load i32, ptr %offset_ptr.i.i20.i5500, align 4
  %eq.i.i5502 = icmp eq i32 %2168, %offset.i.i21.i5501
  call void @llvm.assume(i1 %eq.i.i5502) #30
  %2170 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2171 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2162)
  %2172 = sext i32 %2168 to i64
  %2173 = getelementptr ptr, ptr %2162, i64 %2172
  %2174 = getelementptr i8, ptr %2173, i64 64
  %2175 = load ptr, ptr %2174, align 8
  %2176 = call ptr %2175({ ptr, ptr, ptr, i32 } %2169, ptr nonnull %2)
  %2177 = call i32 %2176({ ptr, ptr, ptr, i32 } %2169, { ptr, ptr, ptr, i32 } %2169, ptr nonnull %2)
  %2178 = add i32 %2177, -1
  %2179 = and i32 %2178, %2157
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %2180 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2181 = load ptr, ptr %293, align 8
  %2182 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2181, 0
  %2183 = load ptr, ptr %294, align 8
  %2184 = insertvalue { ptr, ptr, ptr, i32 } %2182, ptr %2183, 1
  %2185 = load ptr, ptr %383, align 8
  %2186 = insertvalue { ptr, ptr, ptr, i32 } %2184, ptr %2185, 2
  %2187 = load i32, ptr %295, align 4
  %2188 = insertvalue { ptr, ptr, ptr, i32 } %2186, i32 %2187, 3
  %hash_coef_ptr.i.i172.i4863 = getelementptr i8, ptr %2181, i64 8
  %tbl_size_ptr.i.i173.i4864 = getelementptr i8, ptr %2181, i64 16
  %offset_tbl_ptr.i.i174.i4865 = getelementptr i8, ptr %2181, i64 40
  %hash_coef.i.i175.i4866 = load i64, ptr %hash_coef_ptr.i.i172.i4863, align 4
  %tbl_size.i.i176.i4867 = load i64, ptr %tbl_size_ptr.i.i173.i4864, align 4
  %offset_tbl.i.i177.i4868 = load ptr, ptr %offset_tbl_ptr.i.i174.i4865, align 8
  %product.i.i.i178.i4869 = mul i64 %hash_coef.i.i175.i4866, -5261542750394134544
  %shifted.i.i.i179.i4870 = lshr i64 %product.i.i.i178.i4869, 32
  %xored.i.i.i180.i4871 = xor i64 %shifted.i.i.i179.i4870, %product.i.i.i178.i4869
  %hash.i.i.i181.i4872 = and i64 %xored.i.i.i180.i4871, %tbl_size.i.i176.i4867
  %offset_ptr.i.i182.i4873 = getelementptr i32, ptr %offset_tbl.i.i177.i4868, i64 %hash.i.i.i181.i4872
  %offset.i.i183.i4874 = load i32, ptr %offset_ptr.i.i182.i4873, align 4
  %eq.i.i4875 = icmp eq i32 %2187, %offset.i.i183.i4874
  call void @llvm.assume(i1 %eq.i.i4875) #30
  store ptr @_parameterization_Ptri32, ptr %19, align 8
  %2189 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %19)
  %2190 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2181)
  %2191 = sext i32 %2187 to i64
  %2192 = getelementptr ptr, ptr %2181, i64 %2191
  %2193 = getelementptr i8, ptr %2192, i64 120
  %2194 = load ptr, ptr %2193, align 8
  store ptr @i32_typ, ptr %20, align 8
  %2195 = call ptr %2194({ ptr, ptr, ptr, i32 } %2188, ptr nonnull %20)
  %2196 = call { ptr, i160 } %2195({ ptr, ptr, ptr, i32 } %2188, { ptr, ptr, ptr, i32 } %2188, ptr nonnull %19, i32 %2179)
  %.fca.0.extract112.i4876 = extractvalue { ptr, i160 } %2196, 0
  %.sroa.3111.0.insert.ext.i4877 = zext i32 %offset.i.i260.i48585093 to i160
  %.sroa.3111.0.insert.shift.i4878 = shl nuw i160 %.sroa.3111.0.insert.ext.i4877, 128
  %.sroa.2110.0.insert.ext.i4879 = zext i64 %2150 to i160
  %.sroa.2110.0.insert.shift.i4880 = shl nuw nsw i160 %.sroa.2110.0.insert.ext.i4879, 64
  %.sroa.2110.0.insert.insert.i4881 = or disjoint i160 %.sroa.2110.0.insert.shift.i4880, %.sroa.3111.0.insert.shift.i4878
  %.sroa.0109.0.insert.ext.i4882 = zext i64 %2149 to i160
  %.sroa.0109.0.insert.insert.i4883 = or disjoint i160 %.sroa.2110.0.insert.insert.i4881, %.sroa.0109.0.insert.ext.i4882
  %2197 = insertvalue { ptr, i160 } %2146, i160 %.sroa.0109.0.insert.insert.i4883, 1
  %2198 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2199 = load ptr, ptr %293, align 8
  %2200 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2199, 0
  %2201 = load ptr, ptr %294, align 8
  %2202 = insertvalue { ptr, ptr, ptr, i32 } %2200, ptr %2201, 1
  %2203 = load ptr, ptr %383, align 8
  %2204 = insertvalue { ptr, ptr, ptr, i32 } %2202, ptr %2203, 2
  %2205 = load i32, ptr %295, align 4
  %2206 = insertvalue { ptr, ptr, ptr, i32 } %2204, i32 %2205, 3
  %hash_coef_ptr.i.i186.i4888 = getelementptr i8, ptr %2199, i64 8
  %tbl_size_ptr.i.i187.i4889 = getelementptr i8, ptr %2199, i64 16
  %offset_tbl_ptr.i.i188.i4890 = getelementptr i8, ptr %2199, i64 40
  %hash_coef.i.i189.i4891 = load i64, ptr %hash_coef_ptr.i.i186.i4888, align 4
  %tbl_size.i.i190.i4892 = load i64, ptr %tbl_size_ptr.i.i187.i4889, align 4
  %offset_tbl.i.i191.i4893 = load ptr, ptr %offset_tbl_ptr.i.i188.i4890, align 8
  %product.i.i.i192.i4894 = mul i64 %hash_coef.i.i189.i4891, -5261542750394134544
  %shifted.i.i.i193.i4895 = lshr i64 %product.i.i.i192.i4894, 32
  %xored.i.i.i194.i4896 = xor i64 %shifted.i.i.i193.i4895, %product.i.i.i192.i4894
  %hash.i.i.i195.i4897 = and i64 %xored.i.i.i194.i4896, %tbl_size.i.i190.i4892
  %offset_ptr.i.i196.i4898 = getelementptr i32, ptr %offset_tbl.i.i191.i4893, i64 %hash.i.i.i195.i4897
  %offset.i.i197.i4899 = load i32, ptr %offset_ptr.i.i196.i4898, align 4
  %eq.i200.i4900 = icmp eq i32 %2205, %offset.i.i197.i4899
  call void @llvm.assume(i1 %eq.i200.i4900) #30
  %2207 = load ptr, ptr %result.i, align 8
  %2208 = load ptr, ptr %276, align 8
  %result.i.i4901 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2209 = getelementptr i8, ptr %result.i.i4901, i64 16
  store ptr %2208, ptr %2209, align 8
  %2210 = getelementptr i8, ptr %result.i.i4901, i64 8
  store ptr %2207, ptr %2210, align 8
  %2211 = getelementptr i8, ptr %result.i.i4901, i64 24
  store ptr null, ptr %2211, align 8
  %2212 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i4901)
  store ptr @Entry, ptr %result.i.i4901, align 8
  store ptr @_parameterization_Ptri32, ptr %21, align 8
  store ptr %result.i.i4901, ptr %476, align 8
  %2213 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %21)
  %2214 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2199)
  %2215 = sext i32 %2205 to i64
  %2216 = getelementptr ptr, ptr %2199, i64 %2215
  %2217 = getelementptr i8, ptr %2216, i64 128
  %2218 = load ptr, ptr %2217, align 8
  store ptr @i32_typ, ptr %22, align 8
  store ptr %.fca.0.extract11.i3730, ptr %477, align 8
  %2219 = call ptr %2218({ ptr, ptr, ptr, i32 } %2206, ptr nonnull %22)
  call void %2219({ ptr, ptr, ptr, i32 } %2206, { ptr, ptr, ptr, i32 } %2206, ptr nonnull %21, i32 %2179, { ptr, i160 } %2197)
  %2220 = icmp ne ptr %.fca.0.extract112.i4876, @nil_typ
  %2221 = icmp ne ptr %.fca.0.extract112.i4876, null
  %.not140.i4902 = and i1 %2220, %2221
  br i1 %.not140.i4902, label %.cont.cont.i4841, label %2310

2222:                                             ; preds = %2147
  %2223 = add i32 %2157, 2127912214
  %2224 = shl i32 %2157, 12
  %2225 = add i32 %2223, %2224
  %2226 = ashr i32 %2225, 19
  %2227 = xor i32 %2225, %2226
  %2228 = xor i32 %2227, -949894596
  %2229 = add i32 %2228, 374761393
  %2230 = shl i32 %2228, 5
  %2231 = add i32 %2229, %2230
  %2232 = add i32 %2231, -744332180
  %2233 = shl i32 %2231, 9
  %2234 = xor i32 %2232, %2233
  %2235 = add i32 %2234, -42973499
  %2236 = shl i32 %2234, 3
  %2237 = add i32 %2235, %2236
  %2238 = ashr i32 %2237, 16
  %2239 = xor i32 %2237, %2238
  %2240 = xor i32 %2239, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %2241 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2242 = load ptr, ptr %306, align 8
  %2243 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2242, 0
  %2244 = load ptr, ptr %307, align 8
  %2245 = insertvalue { ptr, ptr, ptr, i32 } %2243, ptr %2244, 1
  %2246 = load ptr, ptr %384, align 8
  %2247 = insertvalue { ptr, ptr, ptr, i32 } %2245, ptr %2246, 2
  %2248 = load i32, ptr %308, align 4
  %2249 = insertvalue { ptr, ptr, ptr, i32 } %2247, i32 %2248, 3
  %hash_coef_ptr.i.i10.i5520 = getelementptr i8, ptr %2242, i64 8
  %tbl_size_ptr.i.i11.i5521 = getelementptr i8, ptr %2242, i64 16
  %offset_tbl_ptr.i.i12.i5522 = getelementptr i8, ptr %2242, i64 40
  %hash_coef.i.i13.i5523 = load i64, ptr %hash_coef_ptr.i.i10.i5520, align 4
  %tbl_size.i.i14.i5524 = load i64, ptr %tbl_size_ptr.i.i11.i5521, align 4
  %offset_tbl.i.i15.i5525 = load ptr, ptr %offset_tbl_ptr.i.i12.i5522, align 8
  %product.i.i.i16.i5526 = mul i64 %hash_coef.i.i13.i5523, -5261542750394134544
  %shifted.i.i.i17.i5527 = lshr i64 %product.i.i.i16.i5526, 32
  %xored.i.i.i18.i5528 = xor i64 %shifted.i.i.i17.i5527, %product.i.i.i16.i5526
  %hash.i.i.i19.i5529 = and i64 %xored.i.i.i18.i5528, %tbl_size.i.i14.i5524
  %offset_ptr.i.i20.i5530 = getelementptr i32, ptr %offset_tbl.i.i15.i5525, i64 %hash.i.i.i19.i5529
  %offset.i.i21.i5531 = load i32, ptr %offset_ptr.i.i20.i5530, align 4
  %eq.i.i5532 = icmp eq i32 %2248, %offset.i.i21.i5531
  call void @llvm.assume(i1 %eq.i.i5532) #30
  %2250 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2251 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2242)
  %2252 = sext i32 %2248 to i64
  %2253 = getelementptr ptr, ptr %2242, i64 %2252
  %2254 = getelementptr i8, ptr %2253, i64 64
  %2255 = load ptr, ptr %2254, align 8
  %2256 = call ptr %2255({ ptr, ptr, ptr, i32 } %2249, ptr nonnull %2)
  %2257 = call i32 %2256({ ptr, ptr, ptr, i32 } %2249, { ptr, ptr, ptr, i32 } %2249, ptr nonnull %2)
  %2258 = add i32 %2257, -1
  %2259 = and i32 %2258, %2240
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %2260 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2261 = load ptr, ptr %306, align 8
  %2262 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2261, 0
  %2263 = load ptr, ptr %307, align 8
  %2264 = insertvalue { ptr, ptr, ptr, i32 } %2262, ptr %2263, 1
  %2265 = load ptr, ptr %384, align 8
  %2266 = insertvalue { ptr, ptr, ptr, i32 } %2264, ptr %2265, 2
  %2267 = load i32, ptr %308, align 4
  %2268 = insertvalue { ptr, ptr, ptr, i32 } %2266, i32 %2267, 3
  %hash_coef_ptr.i.i202.i4795 = getelementptr i8, ptr %2261, i64 8
  %tbl_size_ptr.i.i203.i4796 = getelementptr i8, ptr %2261, i64 16
  %offset_tbl_ptr.i.i204.i4797 = getelementptr i8, ptr %2261, i64 40
  %hash_coef.i.i205.i4798 = load i64, ptr %hash_coef_ptr.i.i202.i4795, align 4
  %tbl_size.i.i206.i4799 = load i64, ptr %tbl_size_ptr.i.i203.i4796, align 4
  %offset_tbl.i.i207.i4800 = load ptr, ptr %offset_tbl_ptr.i.i204.i4797, align 8
  %product.i.i.i208.i4801 = mul i64 %hash_coef.i.i205.i4798, -5261542750394134544
  %shifted.i.i.i209.i4802 = lshr i64 %product.i.i.i208.i4801, 32
  %xored.i.i.i210.i4803 = xor i64 %shifted.i.i.i209.i4802, %product.i.i.i208.i4801
  %hash.i.i.i211.i4804 = and i64 %xored.i.i.i210.i4803, %tbl_size.i.i206.i4799
  %offset_ptr.i.i212.i4805 = getelementptr i32, ptr %offset_tbl.i.i207.i4800, i64 %hash.i.i.i211.i4804
  %offset.i.i213.i4806 = load i32, ptr %offset_ptr.i.i212.i4805, align 4
  %eq.i216.i4807 = icmp eq i32 %2267, %offset.i.i213.i4806
  call void @llvm.assume(i1 %eq.i216.i4807) #30
  store ptr @_parameterization_Ptri32, ptr %27, align 8
  %2269 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %27)
  %2270 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2261)
  %2271 = sext i32 %2267 to i64
  %2272 = getelementptr ptr, ptr %2261, i64 %2271
  %2273 = getelementptr i8, ptr %2272, i64 120
  %2274 = load ptr, ptr %2273, align 8
  store ptr @i32_typ, ptr %28, align 8
  %2275 = call ptr %2274({ ptr, ptr, ptr, i32 } %2268, ptr nonnull %28)
  %2276 = call { ptr, i160 } %2275({ ptr, ptr, ptr, i32 } %2268, { ptr, ptr, ptr, i32 } %2268, ptr nonnull %27, i32 %2259)
  %.fca.0.extract87.i4808 = extractvalue { ptr, i160 } %2276, 0
  %.sroa.3.0.insert.ext.i4809 = zext i32 %offset.i.i260.i48585093 to i160
  %.sroa.3.0.insert.shift.i4810 = shl nuw i160 %.sroa.3.0.insert.ext.i4809, 128
  %.sroa.2.0.insert.ext.i4811 = zext i64 %2150 to i160
  %.sroa.2.0.insert.shift.i4812 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i4811, 64
  %.sroa.2.0.insert.insert.i4813 = or disjoint i160 %.sroa.2.0.insert.shift.i4812, %.sroa.3.0.insert.shift.i4810
  %.sroa.0.0.insert.ext.i4814 = zext i64 %2149 to i160
  %.sroa.0.0.insert.insert.i4815 = or disjoint i160 %.sroa.2.0.insert.insert.i4813, %.sroa.0.0.insert.ext.i4814
  %2277 = insertvalue { ptr, i160 } %2146, i160 %.sroa.0.0.insert.insert.i4815, 1
  %2278 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2279 = load ptr, ptr %306, align 8
  %2280 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2279, 0
  %2281 = load ptr, ptr %307, align 8
  %2282 = insertvalue { ptr, ptr, ptr, i32 } %2280, ptr %2281, 1
  %2283 = load ptr, ptr %384, align 8
  %2284 = insertvalue { ptr, ptr, ptr, i32 } %2282, ptr %2283, 2
  %2285 = load i32, ptr %308, align 4
  %2286 = insertvalue { ptr, ptr, ptr, i32 } %2284, i32 %2285, 3
  %hash_coef_ptr.i.i218.i4820 = getelementptr i8, ptr %2279, i64 8
  %tbl_size_ptr.i.i219.i4821 = getelementptr i8, ptr %2279, i64 16
  %offset_tbl_ptr.i.i220.i4822 = getelementptr i8, ptr %2279, i64 40
  %hash_coef.i.i221.i4823 = load i64, ptr %hash_coef_ptr.i.i218.i4820, align 4
  %tbl_size.i.i222.i4824 = load i64, ptr %tbl_size_ptr.i.i219.i4821, align 4
  %offset_tbl.i.i223.i4825 = load ptr, ptr %offset_tbl_ptr.i.i220.i4822, align 8
  %product.i.i.i224.i4826 = mul i64 %hash_coef.i.i221.i4823, -5261542750394134544
  %shifted.i.i.i225.i4827 = lshr i64 %product.i.i.i224.i4826, 32
  %xored.i.i.i226.i4828 = xor i64 %shifted.i.i.i225.i4827, %product.i.i.i224.i4826
  %hash.i.i.i227.i4829 = and i64 %xored.i.i.i226.i4828, %tbl_size.i.i222.i4824
  %offset_ptr.i.i228.i4830 = getelementptr i32, ptr %offset_tbl.i.i223.i4825, i64 %hash.i.i.i227.i4829
  %offset.i.i229.i4831 = load i32, ptr %offset_ptr.i.i228.i4830, align 4
  %eq.i232.i4832 = icmp eq i32 %2285, %offset.i.i229.i4831
  call void @llvm.assume(i1 %eq.i232.i4832) #30
  %2287 = load ptr, ptr %result.i, align 8
  %2288 = load ptr, ptr %276, align 8
  %result.i233.i4833 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2289 = getelementptr i8, ptr %result.i233.i4833, i64 16
  store ptr %2288, ptr %2289, align 8
  %2290 = getelementptr i8, ptr %result.i233.i4833, i64 8
  store ptr %2287, ptr %2290, align 8
  %2291 = getelementptr i8, ptr %result.i233.i4833, i64 24
  store ptr null, ptr %2291, align 8
  %2292 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i233.i4833)
  store ptr @Entry, ptr %result.i233.i4833, align 8
  store ptr @_parameterization_Ptri32, ptr %29, align 8
  store ptr %result.i233.i4833, ptr %474, align 8
  %2293 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %29)
  %2294 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2279)
  %2295 = sext i32 %2285 to i64
  %2296 = getelementptr ptr, ptr %2279, i64 %2295
  %2297 = getelementptr i8, ptr %2296, i64 128
  %2298 = load ptr, ptr %2297, align 8
  store ptr @i32_typ, ptr %30, align 8
  store ptr %.fca.0.extract11.i3730, ptr %475, align 8
  %2299 = call ptr %2298({ ptr, ptr, ptr, i32 } %2286, ptr nonnull %30)
  call void %2299({ ptr, ptr, ptr, i32 } %2286, { ptr, ptr, ptr, i32 } %2286, ptr nonnull %29, i32 %2259, { ptr, i160 } %2277)
  %2300 = icmp ne ptr %.fca.0.extract87.i4808, @nil_typ
  %2301 = icmp ne ptr %.fca.0.extract87.i4808, null
  %.not138.i4834 = and i1 %2300, %2301
  br i1 %.not138.i4834, label %.cont.cont.i4841, label %2310

.cont.cont.i4841:                                 ; preds = %2222, %2160
  %.sink5120 = phi { ptr, i160 } [ %2196, %2160 ], [ %2276, %2222 ]
  %2302 = phi i32 [ 2, %2160 ], [ 1, %2222 ]
  %vptr.i248.sroa.speculated.i4844 = phi ptr [ %.fca.0.extract112.i4876, %2160 ], [ %.fca.0.extract87.i4808, %2222 ]
  %.fca.1.extract89.i4837 = extractvalue { ptr, i160 } %.sink5120, 1
  %.sroa.3407.sroa.4.0.extract.shift.i4838 = lshr i160 %.fca.1.extract89.i4837, 64
  %2303 = trunc i160 %.sroa.3407.sroa.4.0.extract.shift.i4838 to i64
  %2304 = insertelement <2 x i64> poison, i64 %2303, i64 0
  %2305 = trunc i160 %.fca.1.extract89.i4837 to i64
  %2306 = insertelement <2 x i64> %2304, i64 %2305, i64 1
  %hash_coef_ptr.i.i249.i4847 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i4844, i64 8
  %tbl_size_ptr.i.i250.i4848 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i4844, i64 16
  %offset_tbl_ptr.i.i251.i4849 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i4844, i64 40
  %hash_coef.i.i252.i4850 = load i64, ptr %hash_coef_ptr.i.i249.i4847, align 4
  %tbl_size.i.i253.i4851 = load i64, ptr %tbl_size_ptr.i.i250.i4848, align 4
  %offset_tbl.i.i254.i4852 = load ptr, ptr %offset_tbl_ptr.i.i251.i4849, align 8
  %product.i.i.i255.i4853 = mul i64 %hash_coef.i.i252.i4850, 4015701072841558310
  %shifted.i.i.i256.i4854 = lshr i64 %product.i.i.i255.i4853, 32
  %xored.i.i.i257.i4855 = xor i64 %shifted.i.i.i256.i4854, %product.i.i.i255.i4853
  %hash.i.i.i258.i4856 = and i64 %xored.i.i.i257.i4855, %tbl_size.i.i253.i4851
  %offset_ptr.i.i259.i4857 = getelementptr i32, ptr %offset_tbl.i.i254.i4852, i64 %hash.i.i.i258.i4856
  %offset.i.i260.i4858 = load i32, ptr %offset_ptr.i.i259.i4857, align 4
  %2307 = add nuw nsw i32 %.reg2mem193.0677.i4790, 1
  %2308 = load i32, ptr %309, align 4
  %2309 = icmp slt i32 %2307, %2308
  br i1 %2309, label %2147, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4908

2310:                                             ; preds = %2222, %2160
  %2311 = phi ptr [ %31, %2222 ], [ %23, %2160 ]
  %2312 = phi ptr [ %32, %2222 ], [ %24, %2160 ]
  %2313 = phi ptr [ %33, %2222 ], [ %25, %2160 ]
  %2314 = phi ptr [ %.sroa.0.i4755, %2222 ], [ %.sroa.0680.i4753, %2160 ]
  %2315 = phi ptr [ %34, %2222 ], [ %26, %2160 ]
  %2316 = load i32, ptr %385, align 4
  store i32 %2316, ptr %2311, align 4
  store i32 1, ptr %2312, align 4
  %2317 = add i32 %2316, 1
  store i32 %2317, ptr %2313, align 4
  %2318 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  store i32 %2317, ptr %385, align 4
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %2315, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %2314, align 8
  br label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4908

HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4908: ; preds = %.cont.cont.i4841, %2135, %2310
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %19)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %20)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %21)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %22)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %23)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %24)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %25)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i4753)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %26)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %27)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %28)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %29)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %30)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %31)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %32)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %33)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i4755)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %34)
  br label %._crit_edge1.i3732

._crit_edge1.i3732:                               ; preds = %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4908, %2127
  %2319 = add nuw nsw i32 %.reg2mem13.079.i3729, 1
  %2320 = icmp slt i32 %2319, %2086
  br i1 %2320, label %2127, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3750

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3750: ; preds = %._crit_edge1.i3732
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %133)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %134)
  %2321 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %131)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %132)
  %invariant.gep.i3754 = getelementptr i8, ptr %2072, i64 120
  %offset_tbl.i.i24.i3756 = load ptr, ptr %offset_tbl_ptr.i.i48.i2747, align 8
  %hash_coef.i.i22.i3758 = load i64, ptr %hash_coef_ptr.i.i46.i2745, align 4
  %product.i.i.i25.i3759 = mul i64 %hash_coef.i.i22.i3758, -5261542750394134544
  %shifted.i.i.i26.i3760 = lshr i64 %product.i.i.i25.i3759, 32
  %xored.i.i.i27.i3761 = xor i64 %shifted.i.i.i26.i3760, %product.i.i.i25.i3759
  %tbl_size.i.i23.i3763 = load i64, ptr %tbl_size_ptr.i.i47.i2746, align 4
  %hash.i.i.i28.i3764 = and i64 %xored.i.i.i27.i3761, %tbl_size.i.i23.i3763
  %offset_ptr.i.i29.i3765 = getelementptr i32, ptr %offset_tbl.i.i24.i3756, i64 %hash.i.i.i28.i3764
  %offset.i.i30.i3766 = load i32, ptr %offset_ptr.i.i29.i3765, align 4
  %2322 = insertvalue { ptr, ptr, ptr, i32 } %2077, i32 %offset.i.i30.i3766, 3
  %2323 = sext i32 %offset.i.i30.i3766 to i64
  %gep.i3781 = getelementptr ptr, ptr %invariant.gep.i3754, i64 %2323
  %2324 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %2325

2325:                                             ; preds = %._crit_edge1.i3785, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3750
  %.reg2mem13.079.i3782 = phi i32 [ 0, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3750 ], [ %2517, %._crit_edge1.i3785 ]
  store ptr @_parameterization_Ptri32, ptr %131, align 8
  %2326 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %131)
  %2327 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %2072)
  %2328 = load ptr, ptr %gep.i3781, align 8
  store ptr @i32_typ, ptr %132, align 8
  %2329 = call ptr %2328({ ptr, ptr, ptr, i32 } %2322, ptr nonnull %132)
  %2330 = call { ptr, i160 } %2329({ ptr, ptr, ptr, i32 } %2322, { ptr, ptr, ptr, i32 } %2322, ptr nonnull %131, i32 %.reg2mem13.079.i3782)
  %.fca.0.extract11.i3783 = extractvalue { ptr, i160 } %2330, 0
  %2331 = icmp ne ptr %.fca.0.extract11.i3783, @nil_typ
  %2332 = icmp ne ptr %.fca.0.extract11.i3783, null
  %.not17.i3784 = and i1 %2331, %2332
  br i1 %.not17.i3784, label %2333, label %._crit_edge1.i3785

2333:                                             ; preds = %2325
  %hash_coef_ptr.i.i33.i3790 = getelementptr i8, ptr %.fca.0.extract11.i3783, i64 8
  %tbl_size_ptr.i.i34.i3791 = getelementptr i8, ptr %.fca.0.extract11.i3783, i64 16
  %offset_tbl_ptr.i.i35.i3792 = getelementptr i8, ptr %.fca.0.extract11.i3783, i64 40
  %2334 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %5)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %6)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %7)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %8)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %9)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0680.i4909)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %11)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %12)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %13)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %14)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %15)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %16)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %17)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i4911)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %18)
  %hash_coef.i.i147.i4930 = load i64, ptr %hash_coef_ptr.i.i33.i3790, align 4
  %tbl_size.i.i148.i4931 = load i64, ptr %tbl_size_ptr.i.i34.i3791, align 4
  %offset_tbl.i.i149.i4932 = load ptr, ptr %offset_tbl_ptr.i.i35.i3792, align 8
  %product.i.i.i150.i4933 = mul i64 %hash_coef.i.i147.i4930, 4015701072841558310
  %shifted.i.i.i151.i4934 = lshr i64 %product.i.i.i150.i4933, 32
  %xored.i.i.i152.i4935 = xor i64 %shifted.i.i.i151.i4934, %product.i.i.i150.i4933
  %hash.i.i.i153.i4936 = and i64 %xored.i.i.i152.i4935, %tbl_size.i.i148.i4931
  %offset_ptr.i.i154.i4937 = getelementptr i32, ptr %offset_tbl.i.i149.i4932, i64 %hash.i.i.i153.i4936
  %offset.i.i169.i4938 = load i32, ptr %offset_ptr.i.i154.i4937, align 4
  %2335 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2336 = load i32, ptr %309, align 4
  %2337 = icmp sgt i32 %2336, 0
  br i1 %2337, label %.lr.ph.i4944, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit5064

.lr.ph.i4944:                                     ; preds = %2333
  %.fca.1.extract13.i3786 = extractvalue { ptr, i160 } %2330, 1
  %.sroa.576.8.extract.shift.i3788 = lshr i160 %.fca.1.extract13.i3786, 64
  %2338 = insertelement <2 x i160> poison, i160 %.sroa.576.8.extract.shift.i3788, i64 0
  %2339 = insertelement <2 x i160> %2338, i160 %.fca.1.extract13.i3786, i64 1
  %2340 = trunc <2 x i160> %2339 to <2 x i64>
  %2341 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i3783, 0
  %2342 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2343 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract11.i3783)
  %invariant.gep5094 = getelementptr i8, ptr %.fca.0.extract11.i3783, i64 64
  %2344 = insertvalue { ptr, i160 } undef, ptr %.fca.0.extract11.i3783, 0
  br label %2345

2345:                                             ; preds = %.cont.cont.i4997, %.lr.ph.i4944
  %offset.i.i260.i50145101 = phi i32 [ %offset.i.i169.i4938, %.lr.ph.i4944 ], [ %offset.i.i260.i5014, %.cont.cont.i4997 ]
  %.reg2mem195.0678.i4945 = phi i32 [ 1, %.lr.ph.i4944 ], [ %2500, %.cont.cont.i4997 ]
  %.reg2mem193.0677.i4946 = phi i32 [ 0, %.lr.ph.i4944 ], [ %2505, %.cont.cont.i4997 ]
  %2346 = phi <2 x i64> [ %2340, %.lr.ph.i4944 ], [ %2504, %.cont.cont.i4997 ]
  %2347 = extractelement <2 x i64> %2346, i64 1
  %.sroa.speculated352.i50015097 = inttoptr i64 %2347 to ptr
  %2348 = extractelement <2 x i64> %2346, i64 0
  %.sroa.speculated346.i50025099 = inttoptr i64 %2348 to ptr
  %2349 = insertvalue { ptr, ptr, ptr, i32 } %2341, ptr %.sroa.speculated352.i50015097, 1
  %2350 = insertvalue { ptr, ptr, ptr, i32 } %2349, ptr %.sroa.speculated346.i50025099, 2
  %2351 = insertvalue { ptr, ptr, ptr, i32 } %2350, i32 %offset.i.i260.i50145101, 3
  %2352 = sext i32 %offset.i.i260.i50145101 to i64
  %gep5095 = getelementptr ptr, ptr %invariant.gep5094, i64 %2352
  %2353 = load ptr, ptr %gep5095, align 8
  %2354 = call ptr %2353({ ptr, ptr, ptr, i32 } %2351, ptr nonnull %2)
  %2355 = call i32 %2354({ ptr, ptr, ptr, i32 } %2351, { ptr, ptr, ptr, i32 } %2351, ptr nonnull %2)
  %2356 = icmp eq i32 %.reg2mem195.0678.i4945, 1
  %2357 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br i1 %2356, label %2358, label %2420

2358:                                             ; preds = %2345
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %2359 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2360 = load ptr, ptr %293, align 8
  %2361 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2360, 0
  %2362 = load ptr, ptr %294, align 8
  %2363 = insertvalue { ptr, ptr, ptr, i32 } %2361, ptr %2362, 1
  %2364 = load ptr, ptr %383, align 8
  %2365 = insertvalue { ptr, ptr, ptr, i32 } %2363, ptr %2364, 2
  %2366 = load i32, ptr %295, align 4
  %2367 = insertvalue { ptr, ptr, ptr, i32 } %2365, i32 %2366, 3
  %hash_coef_ptr.i.i10.i5550 = getelementptr i8, ptr %2360, i64 8
  %tbl_size_ptr.i.i11.i5551 = getelementptr i8, ptr %2360, i64 16
  %offset_tbl_ptr.i.i12.i5552 = getelementptr i8, ptr %2360, i64 40
  %hash_coef.i.i13.i5553 = load i64, ptr %hash_coef_ptr.i.i10.i5550, align 4
  %tbl_size.i.i14.i5554 = load i64, ptr %tbl_size_ptr.i.i11.i5551, align 4
  %offset_tbl.i.i15.i5555 = load ptr, ptr %offset_tbl_ptr.i.i12.i5552, align 8
  %product.i.i.i16.i5556 = mul i64 %hash_coef.i.i13.i5553, -5261542750394134544
  %shifted.i.i.i17.i5557 = lshr i64 %product.i.i.i16.i5556, 32
  %xored.i.i.i18.i5558 = xor i64 %shifted.i.i.i17.i5557, %product.i.i.i16.i5556
  %hash.i.i.i19.i5559 = and i64 %xored.i.i.i18.i5558, %tbl_size.i.i14.i5554
  %offset_ptr.i.i20.i5560 = getelementptr i32, ptr %offset_tbl.i.i15.i5555, i64 %hash.i.i.i19.i5559
  %offset.i.i21.i5561 = load i32, ptr %offset_ptr.i.i20.i5560, align 4
  %eq.i.i5562 = icmp eq i32 %2366, %offset.i.i21.i5561
  call void @llvm.assume(i1 %eq.i.i5562) #30
  %2368 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2369 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2360)
  %2370 = sext i32 %2366 to i64
  %2371 = getelementptr ptr, ptr %2360, i64 %2370
  %2372 = getelementptr i8, ptr %2371, i64 64
  %2373 = load ptr, ptr %2372, align 8
  %2374 = call ptr %2373({ ptr, ptr, ptr, i32 } %2367, ptr nonnull %2)
  %2375 = call i32 %2374({ ptr, ptr, ptr, i32 } %2367, { ptr, ptr, ptr, i32 } %2367, ptr nonnull %2)
  %2376 = add i32 %2375, -1
  %2377 = and i32 %2376, %2355
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %2378 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2379 = load ptr, ptr %293, align 8
  %2380 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2379, 0
  %2381 = load ptr, ptr %294, align 8
  %2382 = insertvalue { ptr, ptr, ptr, i32 } %2380, ptr %2381, 1
  %2383 = load ptr, ptr %383, align 8
  %2384 = insertvalue { ptr, ptr, ptr, i32 } %2382, ptr %2383, 2
  %2385 = load i32, ptr %295, align 4
  %2386 = insertvalue { ptr, ptr, ptr, i32 } %2384, i32 %2385, 3
  %hash_coef_ptr.i.i172.i5019 = getelementptr i8, ptr %2379, i64 8
  %tbl_size_ptr.i.i173.i5020 = getelementptr i8, ptr %2379, i64 16
  %offset_tbl_ptr.i.i174.i5021 = getelementptr i8, ptr %2379, i64 40
  %hash_coef.i.i175.i5022 = load i64, ptr %hash_coef_ptr.i.i172.i5019, align 4
  %tbl_size.i.i176.i5023 = load i64, ptr %tbl_size_ptr.i.i173.i5020, align 4
  %offset_tbl.i.i177.i5024 = load ptr, ptr %offset_tbl_ptr.i.i174.i5021, align 8
  %product.i.i.i178.i5025 = mul i64 %hash_coef.i.i175.i5022, -5261542750394134544
  %shifted.i.i.i179.i5026 = lshr i64 %product.i.i.i178.i5025, 32
  %xored.i.i.i180.i5027 = xor i64 %shifted.i.i.i179.i5026, %product.i.i.i178.i5025
  %hash.i.i.i181.i5028 = and i64 %xored.i.i.i180.i5027, %tbl_size.i.i176.i5023
  %offset_ptr.i.i182.i5029 = getelementptr i32, ptr %offset_tbl.i.i177.i5024, i64 %hash.i.i.i181.i5028
  %offset.i.i183.i5030 = load i32, ptr %offset_ptr.i.i182.i5029, align 4
  %eq.i.i5031 = icmp eq i32 %2385, %offset.i.i183.i5030
  call void @llvm.assume(i1 %eq.i.i5031) #30
  store ptr @_parameterization_Ptri32, ptr %3, align 8
  %2387 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %3)
  %2388 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2379)
  %2389 = sext i32 %2385 to i64
  %2390 = getelementptr ptr, ptr %2379, i64 %2389
  %2391 = getelementptr i8, ptr %2390, i64 120
  %2392 = load ptr, ptr %2391, align 8
  store ptr @i32_typ, ptr %4, align 8
  %2393 = call ptr %2392({ ptr, ptr, ptr, i32 } %2386, ptr nonnull %4)
  %2394 = call { ptr, i160 } %2393({ ptr, ptr, ptr, i32 } %2386, { ptr, ptr, ptr, i32 } %2386, ptr nonnull %3, i32 %2377)
  %.fca.0.extract112.i5032 = extractvalue { ptr, i160 } %2394, 0
  %.sroa.3111.0.insert.ext.i5033 = zext i32 %offset.i.i260.i50145101 to i160
  %.sroa.3111.0.insert.shift.i5034 = shl nuw i160 %.sroa.3111.0.insert.ext.i5033, 128
  %.sroa.2110.0.insert.ext.i5035 = zext i64 %2348 to i160
  %.sroa.2110.0.insert.shift.i5036 = shl nuw nsw i160 %.sroa.2110.0.insert.ext.i5035, 64
  %.sroa.2110.0.insert.insert.i5037 = or disjoint i160 %.sroa.2110.0.insert.shift.i5036, %.sroa.3111.0.insert.shift.i5034
  %.sroa.0109.0.insert.ext.i5038 = zext i64 %2347 to i160
  %.sroa.0109.0.insert.insert.i5039 = or disjoint i160 %.sroa.2110.0.insert.insert.i5037, %.sroa.0109.0.insert.ext.i5038
  %2395 = insertvalue { ptr, i160 } %2344, i160 %.sroa.0109.0.insert.insert.i5039, 1
  %2396 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2397 = load ptr, ptr %293, align 8
  %2398 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2397, 0
  %2399 = load ptr, ptr %294, align 8
  %2400 = insertvalue { ptr, ptr, ptr, i32 } %2398, ptr %2399, 1
  %2401 = load ptr, ptr %383, align 8
  %2402 = insertvalue { ptr, ptr, ptr, i32 } %2400, ptr %2401, 2
  %2403 = load i32, ptr %295, align 4
  %2404 = insertvalue { ptr, ptr, ptr, i32 } %2402, i32 %2403, 3
  %hash_coef_ptr.i.i186.i5044 = getelementptr i8, ptr %2397, i64 8
  %tbl_size_ptr.i.i187.i5045 = getelementptr i8, ptr %2397, i64 16
  %offset_tbl_ptr.i.i188.i5046 = getelementptr i8, ptr %2397, i64 40
  %hash_coef.i.i189.i5047 = load i64, ptr %hash_coef_ptr.i.i186.i5044, align 4
  %tbl_size.i.i190.i5048 = load i64, ptr %tbl_size_ptr.i.i187.i5045, align 4
  %offset_tbl.i.i191.i5049 = load ptr, ptr %offset_tbl_ptr.i.i188.i5046, align 8
  %product.i.i.i192.i5050 = mul i64 %hash_coef.i.i189.i5047, -5261542750394134544
  %shifted.i.i.i193.i5051 = lshr i64 %product.i.i.i192.i5050, 32
  %xored.i.i.i194.i5052 = xor i64 %shifted.i.i.i193.i5051, %product.i.i.i192.i5050
  %hash.i.i.i195.i5053 = and i64 %xored.i.i.i194.i5052, %tbl_size.i.i190.i5048
  %offset_ptr.i.i196.i5054 = getelementptr i32, ptr %offset_tbl.i.i191.i5049, i64 %hash.i.i.i195.i5053
  %offset.i.i197.i5055 = load i32, ptr %offset_ptr.i.i196.i5054, align 4
  %eq.i200.i5056 = icmp eq i32 %2403, %offset.i.i197.i5055
  call void @llvm.assume(i1 %eq.i200.i5056) #30
  %2405 = load ptr, ptr %result.i, align 8
  %2406 = load ptr, ptr %276, align 8
  %result.i.i5057 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2407 = getelementptr i8, ptr %result.i.i5057, i64 16
  store ptr %2406, ptr %2407, align 8
  %2408 = getelementptr i8, ptr %result.i.i5057, i64 8
  store ptr %2405, ptr %2408, align 8
  %2409 = getelementptr i8, ptr %result.i.i5057, i64 24
  store ptr null, ptr %2409, align 8
  %2410 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i5057)
  store ptr @Entry, ptr %result.i.i5057, align 8
  store ptr @_parameterization_Ptri32, ptr %5, align 8
  store ptr %result.i.i5057, ptr %480, align 8
  %2411 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %5)
  %2412 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2397)
  %2413 = sext i32 %2403 to i64
  %2414 = getelementptr ptr, ptr %2397, i64 %2413
  %2415 = getelementptr i8, ptr %2414, i64 128
  %2416 = load ptr, ptr %2415, align 8
  store ptr @i32_typ, ptr %6, align 8
  store ptr %.fca.0.extract11.i3783, ptr %481, align 8
  %2417 = call ptr %2416({ ptr, ptr, ptr, i32 } %2404, ptr nonnull %6)
  call void %2417({ ptr, ptr, ptr, i32 } %2404, { ptr, ptr, ptr, i32 } %2404, ptr nonnull %5, i32 %2377, { ptr, i160 } %2395)
  %2418 = icmp ne ptr %.fca.0.extract112.i5032, @nil_typ
  %2419 = icmp ne ptr %.fca.0.extract112.i5032, null
  %.not140.i5058 = and i1 %2418, %2419
  br i1 %.not140.i5058, label %.cont.cont.i4997, label %2508

2420:                                             ; preds = %2345
  %2421 = add i32 %2355, 2127912214
  %2422 = shl i32 %2355, 12
  %2423 = add i32 %2421, %2422
  %2424 = ashr i32 %2423, 19
  %2425 = xor i32 %2423, %2424
  %2426 = xor i32 %2425, -949894596
  %2427 = add i32 %2426, 374761393
  %2428 = shl i32 %2426, 5
  %2429 = add i32 %2427, %2428
  %2430 = add i32 %2429, -744332180
  %2431 = shl i32 %2429, 9
  %2432 = xor i32 %2430, %2431
  %2433 = add i32 %2432, -42973499
  %2434 = shl i32 %2432, 3
  %2435 = add i32 %2433, %2434
  %2436 = ashr i32 %2435, 16
  %2437 = xor i32 %2435, %2436
  %2438 = xor i32 %2437, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %2439 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2440 = load ptr, ptr %306, align 8
  %2441 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2440, 0
  %2442 = load ptr, ptr %307, align 8
  %2443 = insertvalue { ptr, ptr, ptr, i32 } %2441, ptr %2442, 1
  %2444 = load ptr, ptr %384, align 8
  %2445 = insertvalue { ptr, ptr, ptr, i32 } %2443, ptr %2444, 2
  %2446 = load i32, ptr %308, align 4
  %2447 = insertvalue { ptr, ptr, ptr, i32 } %2445, i32 %2446, 3
  %hash_coef_ptr.i.i10.i5580 = getelementptr i8, ptr %2440, i64 8
  %tbl_size_ptr.i.i11.i5581 = getelementptr i8, ptr %2440, i64 16
  %offset_tbl_ptr.i.i12.i5582 = getelementptr i8, ptr %2440, i64 40
  %hash_coef.i.i13.i5583 = load i64, ptr %hash_coef_ptr.i.i10.i5580, align 4
  %tbl_size.i.i14.i5584 = load i64, ptr %tbl_size_ptr.i.i11.i5581, align 4
  %offset_tbl.i.i15.i5585 = load ptr, ptr %offset_tbl_ptr.i.i12.i5582, align 8
  %product.i.i.i16.i5586 = mul i64 %hash_coef.i.i13.i5583, -5261542750394134544
  %shifted.i.i.i17.i5587 = lshr i64 %product.i.i.i16.i5586, 32
  %xored.i.i.i18.i5588 = xor i64 %shifted.i.i.i17.i5587, %product.i.i.i16.i5586
  %hash.i.i.i19.i5589 = and i64 %xored.i.i.i18.i5588, %tbl_size.i.i14.i5584
  %offset_ptr.i.i20.i5590 = getelementptr i32, ptr %offset_tbl.i.i15.i5585, i64 %hash.i.i.i19.i5589
  %offset.i.i21.i5591 = load i32, ptr %offset_ptr.i.i20.i5590, align 4
  %eq.i.i5592 = icmp eq i32 %2446, %offset.i.i21.i5591
  call void @llvm.assume(i1 %eq.i.i5592) #30
  %2448 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2449 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2440)
  %2450 = sext i32 %2446 to i64
  %2451 = getelementptr ptr, ptr %2440, i64 %2450
  %2452 = getelementptr i8, ptr %2451, i64 64
  %2453 = load ptr, ptr %2452, align 8
  %2454 = call ptr %2453({ ptr, ptr, ptr, i32 } %2447, ptr nonnull %2)
  %2455 = call i32 %2454({ ptr, ptr, ptr, i32 } %2447, { ptr, ptr, ptr, i32 } %2447, ptr nonnull %2)
  %2456 = add i32 %2455, -1
  %2457 = and i32 %2456, %2438
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %2458 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2459 = load ptr, ptr %306, align 8
  %2460 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2459, 0
  %2461 = load ptr, ptr %307, align 8
  %2462 = insertvalue { ptr, ptr, ptr, i32 } %2460, ptr %2461, 1
  %2463 = load ptr, ptr %384, align 8
  %2464 = insertvalue { ptr, ptr, ptr, i32 } %2462, ptr %2463, 2
  %2465 = load i32, ptr %308, align 4
  %2466 = insertvalue { ptr, ptr, ptr, i32 } %2464, i32 %2465, 3
  %hash_coef_ptr.i.i202.i4951 = getelementptr i8, ptr %2459, i64 8
  %tbl_size_ptr.i.i203.i4952 = getelementptr i8, ptr %2459, i64 16
  %offset_tbl_ptr.i.i204.i4953 = getelementptr i8, ptr %2459, i64 40
  %hash_coef.i.i205.i4954 = load i64, ptr %hash_coef_ptr.i.i202.i4951, align 4
  %tbl_size.i.i206.i4955 = load i64, ptr %tbl_size_ptr.i.i203.i4952, align 4
  %offset_tbl.i.i207.i4956 = load ptr, ptr %offset_tbl_ptr.i.i204.i4953, align 8
  %product.i.i.i208.i4957 = mul i64 %hash_coef.i.i205.i4954, -5261542750394134544
  %shifted.i.i.i209.i4958 = lshr i64 %product.i.i.i208.i4957, 32
  %xored.i.i.i210.i4959 = xor i64 %shifted.i.i.i209.i4958, %product.i.i.i208.i4957
  %hash.i.i.i211.i4960 = and i64 %xored.i.i.i210.i4959, %tbl_size.i.i206.i4955
  %offset_ptr.i.i212.i4961 = getelementptr i32, ptr %offset_tbl.i.i207.i4956, i64 %hash.i.i.i211.i4960
  %offset.i.i213.i4962 = load i32, ptr %offset_ptr.i.i212.i4961, align 4
  %eq.i216.i4963 = icmp eq i32 %2465, %offset.i.i213.i4962
  call void @llvm.assume(i1 %eq.i216.i4963) #30
  store ptr @_parameterization_Ptri32, ptr %11, align 8
  %2467 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %11)
  %2468 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2459)
  %2469 = sext i32 %2465 to i64
  %2470 = getelementptr ptr, ptr %2459, i64 %2469
  %2471 = getelementptr i8, ptr %2470, i64 120
  %2472 = load ptr, ptr %2471, align 8
  store ptr @i32_typ, ptr %12, align 8
  %2473 = call ptr %2472({ ptr, ptr, ptr, i32 } %2466, ptr nonnull %12)
  %2474 = call { ptr, i160 } %2473({ ptr, ptr, ptr, i32 } %2466, { ptr, ptr, ptr, i32 } %2466, ptr nonnull %11, i32 %2457)
  %.fca.0.extract87.i4964 = extractvalue { ptr, i160 } %2474, 0
  %.sroa.3.0.insert.ext.i4965 = zext i32 %offset.i.i260.i50145101 to i160
  %.sroa.3.0.insert.shift.i4966 = shl nuw i160 %.sroa.3.0.insert.ext.i4965, 128
  %.sroa.2.0.insert.ext.i4967 = zext i64 %2348 to i160
  %.sroa.2.0.insert.shift.i4968 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i4967, 64
  %.sroa.2.0.insert.insert.i4969 = or disjoint i160 %.sroa.2.0.insert.shift.i4968, %.sroa.3.0.insert.shift.i4966
  %.sroa.0.0.insert.ext.i4970 = zext i64 %2347 to i160
  %.sroa.0.0.insert.insert.i4971 = or disjoint i160 %.sroa.2.0.insert.insert.i4969, %.sroa.0.0.insert.ext.i4970
  %2475 = insertvalue { ptr, i160 } %2344, i160 %.sroa.0.0.insert.insert.i4971, 1
  %2476 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2477 = load ptr, ptr %306, align 8
  %2478 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2477, 0
  %2479 = load ptr, ptr %307, align 8
  %2480 = insertvalue { ptr, ptr, ptr, i32 } %2478, ptr %2479, 1
  %2481 = load ptr, ptr %384, align 8
  %2482 = insertvalue { ptr, ptr, ptr, i32 } %2480, ptr %2481, 2
  %2483 = load i32, ptr %308, align 4
  %2484 = insertvalue { ptr, ptr, ptr, i32 } %2482, i32 %2483, 3
  %hash_coef_ptr.i.i218.i4976 = getelementptr i8, ptr %2477, i64 8
  %tbl_size_ptr.i.i219.i4977 = getelementptr i8, ptr %2477, i64 16
  %offset_tbl_ptr.i.i220.i4978 = getelementptr i8, ptr %2477, i64 40
  %hash_coef.i.i221.i4979 = load i64, ptr %hash_coef_ptr.i.i218.i4976, align 4
  %tbl_size.i.i222.i4980 = load i64, ptr %tbl_size_ptr.i.i219.i4977, align 4
  %offset_tbl.i.i223.i4981 = load ptr, ptr %offset_tbl_ptr.i.i220.i4978, align 8
  %product.i.i.i224.i4982 = mul i64 %hash_coef.i.i221.i4979, -5261542750394134544
  %shifted.i.i.i225.i4983 = lshr i64 %product.i.i.i224.i4982, 32
  %xored.i.i.i226.i4984 = xor i64 %shifted.i.i.i225.i4983, %product.i.i.i224.i4982
  %hash.i.i.i227.i4985 = and i64 %xored.i.i.i226.i4984, %tbl_size.i.i222.i4980
  %offset_ptr.i.i228.i4986 = getelementptr i32, ptr %offset_tbl.i.i223.i4981, i64 %hash.i.i.i227.i4985
  %offset.i.i229.i4987 = load i32, ptr %offset_ptr.i.i228.i4986, align 4
  %eq.i232.i4988 = icmp eq i32 %2483, %offset.i.i229.i4987
  call void @llvm.assume(i1 %eq.i232.i4988) #30
  %2485 = load ptr, ptr %result.i, align 8
  %2486 = load ptr, ptr %276, align 8
  %result.i233.i4989 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2487 = getelementptr i8, ptr %result.i233.i4989, i64 16
  store ptr %2486, ptr %2487, align 8
  %2488 = getelementptr i8, ptr %result.i233.i4989, i64 8
  store ptr %2485, ptr %2488, align 8
  %2489 = getelementptr i8, ptr %result.i233.i4989, i64 24
  store ptr null, ptr %2489, align 8
  %2490 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i233.i4989)
  store ptr @Entry, ptr %result.i233.i4989, align 8
  store ptr @_parameterization_Ptri32, ptr %13, align 8
  store ptr %result.i233.i4989, ptr %478, align 8
  %2491 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %13)
  %2492 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2477)
  %2493 = sext i32 %2483 to i64
  %2494 = getelementptr ptr, ptr %2477, i64 %2493
  %2495 = getelementptr i8, ptr %2494, i64 128
  %2496 = load ptr, ptr %2495, align 8
  store ptr @i32_typ, ptr %14, align 8
  store ptr %.fca.0.extract11.i3783, ptr %479, align 8
  %2497 = call ptr %2496({ ptr, ptr, ptr, i32 } %2484, ptr nonnull %14)
  call void %2497({ ptr, ptr, ptr, i32 } %2484, { ptr, ptr, ptr, i32 } %2484, ptr nonnull %13, i32 %2457, { ptr, i160 } %2475)
  %2498 = icmp ne ptr %.fca.0.extract87.i4964, @nil_typ
  %2499 = icmp ne ptr %.fca.0.extract87.i4964, null
  %.not138.i4990 = and i1 %2498, %2499
  br i1 %.not138.i4990, label %.cont.cont.i4997, label %2508

.cont.cont.i4997:                                 ; preds = %2420, %2358
  %.sink5122 = phi { ptr, i160 } [ %2394, %2358 ], [ %2474, %2420 ]
  %2500 = phi i32 [ 2, %2358 ], [ 1, %2420 ]
  %vptr.i248.sroa.speculated.i5000 = phi ptr [ %.fca.0.extract112.i5032, %2358 ], [ %.fca.0.extract87.i4964, %2420 ]
  %.fca.1.extract89.i4993 = extractvalue { ptr, i160 } %.sink5122, 1
  %.sroa.3407.sroa.4.0.extract.shift.i4994 = lshr i160 %.fca.1.extract89.i4993, 64
  %2501 = trunc i160 %.sroa.3407.sroa.4.0.extract.shift.i4994 to i64
  %2502 = insertelement <2 x i64> poison, i64 %2501, i64 0
  %2503 = trunc i160 %.fca.1.extract89.i4993 to i64
  %2504 = insertelement <2 x i64> %2502, i64 %2503, i64 1
  %hash_coef_ptr.i.i249.i5003 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i5000, i64 8
  %tbl_size_ptr.i.i250.i5004 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i5000, i64 16
  %offset_tbl_ptr.i.i251.i5005 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i5000, i64 40
  %hash_coef.i.i252.i5006 = load i64, ptr %hash_coef_ptr.i.i249.i5003, align 4
  %tbl_size.i.i253.i5007 = load i64, ptr %tbl_size_ptr.i.i250.i5004, align 4
  %offset_tbl.i.i254.i5008 = load ptr, ptr %offset_tbl_ptr.i.i251.i5005, align 8
  %product.i.i.i255.i5009 = mul i64 %hash_coef.i.i252.i5006, 4015701072841558310
  %shifted.i.i.i256.i5010 = lshr i64 %product.i.i.i255.i5009, 32
  %xored.i.i.i257.i5011 = xor i64 %shifted.i.i.i256.i5010, %product.i.i.i255.i5009
  %hash.i.i.i258.i5012 = and i64 %xored.i.i.i257.i5011, %tbl_size.i.i253.i5007
  %offset_ptr.i.i259.i5013 = getelementptr i32, ptr %offset_tbl.i.i254.i5008, i64 %hash.i.i.i258.i5012
  %offset.i.i260.i5014 = load i32, ptr %offset_ptr.i.i259.i5013, align 4
  %2505 = add nuw nsw i32 %.reg2mem193.0677.i4946, 1
  %2506 = load i32, ptr %309, align 4
  %2507 = icmp slt i32 %2505, %2506
  br i1 %2507, label %2345, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit5064

2508:                                             ; preds = %2420, %2358
  %2509 = phi ptr [ %15, %2420 ], [ %7, %2358 ]
  %2510 = phi ptr [ %16, %2420 ], [ %8, %2358 ]
  %2511 = phi ptr [ %17, %2420 ], [ %9, %2358 ]
  %2512 = phi ptr [ %.sroa.0.i4911, %2420 ], [ %.sroa.0680.i4909, %2358 ]
  %2513 = phi ptr [ %18, %2420 ], [ %10, %2358 ]
  %2514 = load i32, ptr %385, align 4
  store i32 %2514, ptr %2509, align 4
  store i32 1, ptr %2510, align 4
  %2515 = add i32 %2514, 1
  store i32 %2515, ptr %2511, align 4
  %2516 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  store i32 %2515, ptr %385, align 4
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %2513, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %2512, align 8
  br label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit5064

HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit5064: ; preds = %.cont.cont.i4997, %2333, %2508
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %5)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %6)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %7)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %8)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %9)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i4909)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %11)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %12)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %13)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %14)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %15)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %16)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %17)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i4911)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %18)
  br label %._crit_edge1.i3785

._crit_edge1.i3785:                               ; preds = %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit5064, %2325
  %2517 = add nuw nsw i32 %.reg2mem13.079.i3782, 1
  %2518 = icmp slt i32 %2517, %2086
  br i1 %2518, label %2325, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3803

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3803.critedge: ; preds = %._crit_edge3.1.i1098
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %133)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %134)
  %2519 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %131)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %132)
  br label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3803

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3803: ; preds = %._crit_edge1.i3785, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3803.critedge
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %131)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %132)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %155)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %156)
  br label %HashMap_insert_keyK_valueV.exit1183

HashMap_insert_keyK_valueV.exit1183:              ; preds = %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit2709.thread, %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit.thread2923, %.thread525.i1158, %.thread528.i1116, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3803
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %237)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %238)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %239)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %240)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %241)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %242)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %243)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %244)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %245)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %246)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %247)
  store i1 true, ptr %.sroa.078.sroa.0, align 8
  %.sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.0. = load i8, ptr %.sroa.078.sroa.0, align 8
  %.sroa.078.0.insert.ext = zext i8 %.sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.sroa.0.0..sroa.078.0. to i160
  %2520 = insertvalue { ptr, i160 } { ptr @bool_typ, i160 undef }, i160 %.sroa.078.0.insert.ext, 1
  store ptr @_parameterization_Ptri32, ptr %267, align 8
  %2521 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %267)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %252)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %253)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %254)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %255)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %256)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %257)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %258)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %259)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %260)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %261)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %262)
  %2522 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2523 = load ptr, ptr %316, align 8
  %2524 = call i32 %2523({ ptr, i160 } %488)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %2525 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2526 = load ptr, ptr %328, align 8
  %2527 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2526, 0
  %2528 = load ptr, ptr %329, align 8
  %2529 = insertvalue { ptr, ptr, ptr, i32 } %2527, ptr %2528, 1
  %2530 = load ptr, ptr %330, align 8
  %2531 = insertvalue { ptr, ptr, ptr, i32 } %2529, ptr %2530, 2
  %2532 = load i32, ptr %331, align 4
  %2533 = insertvalue { ptr, ptr, ptr, i32 } %2531, i32 %2532, 3
  %hash_coef_ptr.i.i10.i1405 = getelementptr i8, ptr %2526, i64 8
  %tbl_size_ptr.i.i11.i1406 = getelementptr i8, ptr %2526, i64 16
  %offset_tbl_ptr.i.i12.i1407 = getelementptr i8, ptr %2526, i64 40
  %hash_coef.i.i13.i1408 = load i64, ptr %hash_coef_ptr.i.i10.i1405, align 4
  %tbl_size.i.i14.i1409 = load i64, ptr %tbl_size_ptr.i.i11.i1406, align 4
  %offset_tbl.i.i15.i1410 = load ptr, ptr %offset_tbl_ptr.i.i12.i1407, align 8
  %product.i.i.i16.i1411 = mul i64 %hash_coef.i.i13.i1408, -5261542750394134544
  %shifted.i.i.i17.i1412 = lshr i64 %product.i.i.i16.i1411, 32
  %xored.i.i.i18.i1413 = xor i64 %shifted.i.i.i17.i1412, %product.i.i.i16.i1411
  %hash.i.i.i19.i1414 = and i64 %xored.i.i.i18.i1413, %tbl_size.i.i14.i1409
  %offset_ptr.i.i20.i1415 = getelementptr i32, ptr %offset_tbl.i.i15.i1410, i64 %hash.i.i.i19.i1414
  %offset.i.i21.i1416 = load i32, ptr %offset_ptr.i.i20.i1415, align 4
  %eq.i.i1417 = icmp eq i32 %2532, %offset.i.i21.i1416
  call void @llvm.assume(i1 %eq.i.i1417) #30
  %2534 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2535 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2526)
  %2536 = sext i32 %2532 to i64
  %2537 = getelementptr ptr, ptr %2526, i64 %2536
  %2538 = getelementptr i8, ptr %2537, i64 64
  %2539 = load ptr, ptr %2538, align 8
  %2540 = call ptr %2539({ ptr, ptr, ptr, i32 } %2533, ptr nonnull %2)
  %2541 = call i32 %2540({ ptr, ptr, ptr, i32 } %2533, { ptr, ptr, ptr, i32 } %2533, ptr nonnull %2)
  %2542 = add i32 %2541, -1
  %2543 = and i32 %2542, %2524
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %2544 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2545 = load ptr, ptr %328, align 8
  %2546 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2545, 0
  %2547 = load ptr, ptr %329, align 8
  %2548 = insertvalue { ptr, ptr, ptr, i32 } %2546, ptr %2547, 1
  %2549 = load ptr, ptr %330, align 8
  %2550 = insertvalue { ptr, ptr, ptr, i32 } %2548, ptr %2549, 2
  %2551 = load i32, ptr %331, align 4
  %2552 = insertvalue { ptr, ptr, ptr, i32 } %2550, i32 %2551, 3
  %hash_coef_ptr.i.i160.i = getelementptr i8, ptr %2545, i64 8
  %tbl_size_ptr.i.i161.i = getelementptr i8, ptr %2545, i64 16
  %offset_tbl_ptr.i.i162.i = getelementptr i8, ptr %2545, i64 40
  %hash_coef.i.i163.i = load i64, ptr %hash_coef_ptr.i.i160.i, align 4
  %tbl_size.i.i164.i = load i64, ptr %tbl_size_ptr.i.i161.i, align 4
  %offset_tbl.i.i165.i = load ptr, ptr %offset_tbl_ptr.i.i162.i, align 8
  %product.i.i.i166.i = mul i64 %hash_coef.i.i163.i, -5261542750394134544
  %shifted.i.i.i167.i = lshr i64 %product.i.i.i166.i, 32
  %xored.i.i.i168.i = xor i64 %shifted.i.i.i167.i, %product.i.i.i166.i
  %hash.i.i.i169.i = and i64 %xored.i.i.i168.i, %tbl_size.i.i164.i
  %offset_ptr.i.i170.i = getelementptr i32, ptr %offset_tbl.i.i165.i, i64 %hash.i.i.i169.i
  %offset.i.i171.i = load i32, ptr %offset_ptr.i.i170.i, align 4
  %eq.i.i663 = icmp eq i32 %2551, %offset.i.i171.i
  call void @llvm.assume(i1 %eq.i.i663) #30
  store ptr @_parameterization_Ptri32, ptr %261, align 8
  %2553 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %261)
  %2554 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2545)
  %2555 = sext i32 %2551 to i64
  %2556 = getelementptr ptr, ptr %2545, i64 %2555
  %2557 = getelementptr i8, ptr %2556, i64 120
  %2558 = load ptr, ptr %2557, align 8
  store ptr @i32_typ, ptr %262, align 8
  %2559 = call ptr %2558({ ptr, ptr, ptr, i32 } %2552, ptr nonnull %262)
  %2560 = call { ptr, i160 } %2559({ ptr, ptr, ptr, i32 } %2552, { ptr, ptr, ptr, i32 } %2552, ptr nonnull %261, i32 %2543)
  %.fca.0.extract.i664 = extractvalue { ptr, i160 } %2560, 0
  %2561 = icmp ne ptr %.fca.0.extract.i664, @nil_typ
  %2562 = icmp ne ptr %.fca.0.extract.i664, null
  %.not151.i = and i1 %2561, %2562
  br i1 %.not151.i, label %2563, label %.critedge.i665

2563:                                             ; preds = %HashMap_insert_keyK_valueV.exit1183
  %.fca.1.extract.i666 = extractvalue { ptr, i160 } %2560, 1
  %.sroa.4518.8.extract.trunc.i = trunc i160 %.fca.1.extract.i666 to i64
  %2564 = inttoptr i64 %.sroa.4518.8.extract.trunc.i to ptr
  %.sroa.7520.8.extract.shift.i = lshr i160 %.fca.1.extract.i666, 64
  %.sroa.7520.8.extract.trunc.i = trunc i160 %.sroa.7520.8.extract.shift.i to i64
  %2565 = inttoptr i64 %.sroa.7520.8.extract.trunc.i to ptr
  %hash_coef_ptr.i.i174.i667 = getelementptr i8, ptr %.fca.0.extract.i664, i64 8
  %tbl_size_ptr.i.i175.i668 = getelementptr i8, ptr %.fca.0.extract.i664, i64 16
  %offset_tbl_ptr.i.i176.i669 = getelementptr i8, ptr %.fca.0.extract.i664, i64 40
  %hash_coef.i.i177.i670 = load i64, ptr %hash_coef_ptr.i.i174.i667, align 4
  %tbl_size.i.i178.i671 = load i64, ptr %tbl_size_ptr.i.i175.i668, align 4
  %offset_tbl.i.i179.i672 = load ptr, ptr %offset_tbl_ptr.i.i176.i669, align 8
  %product.i.i.i180.i673 = mul i64 %hash_coef.i.i177.i670, 4015701072841558310
  %shifted.i.i.i181.i674 = lshr i64 %product.i.i.i180.i673, 32
  %xored.i.i.i182.i675 = xor i64 %shifted.i.i.i181.i674, %product.i.i.i180.i673
  %hash.i.i.i183.i676 = and i64 %xored.i.i.i182.i675, %tbl_size.i.i178.i671
  %offset_ptr.i.i184.i677 = getelementptr i32, ptr %offset_tbl.i.i179.i672, i64 %hash.i.i.i183.i676
  %offset.i.i185.i678 = load i32, ptr %offset_ptr.i.i184.i677, align 4
  %2566 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract.i664, 0
  %2567 = insertvalue { ptr, ptr, ptr, i32 } %2566, ptr %2564, 1
  %2568 = insertvalue { ptr, ptr, ptr, i32 } %2567, ptr %2565, 2
  %2569 = insertvalue { ptr, ptr, ptr, i32 } %2568, i32 %offset.i.i185.i678, 3
  %2570 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2571 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2572 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract.i664)
  %2573 = sext i32 %offset.i.i185.i678 to i64
  %2574 = getelementptr ptr, ptr %.fca.0.extract.i664, i64 %2573
  %2575 = getelementptr i8, ptr %2574, i64 64
  %2576 = load ptr, ptr %2575, align 8
  %2577 = call ptr %2576({ ptr, ptr, ptr, i32 } %2569, ptr nonnull %2)
  %2578 = call i32 %2577({ ptr, ptr, ptr, i32 } %2569, { ptr, ptr, ptr, i32 } %2569, ptr nonnull %2)
  %2579 = icmp eq i32 %2578, %2524
  br i1 %2579, label %2580, label %.critedge.i665

2580:                                             ; preds = %2563
  %2581 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2582 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2583 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract.i664)
  %2584 = getelementptr i8, ptr %2574, i64 48
  %2585 = load ptr, ptr %2584, align 8
  %2586 = call ptr %2585({ ptr, ptr, ptr, i32 } %2569, ptr nonnull %2)
  %2587 = call { ptr, i160 } %2586({ ptr, ptr, ptr, i32 } %2569, { ptr, ptr, ptr, i32 } %2569, ptr nonnull %2)
  %2588 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2589 = load ptr, ptr %317, align 8
  %2590 = call i1 %2589({ ptr, i160 } %2587, { ptr, i160 } %488)
  br i1 %2590, label %.thread525.i, label %.critedge.i665

.thread525.i:                                     ; preds = %2580
  %2591 = load ptr, ptr %result.i136, align 8
  %2592 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2593 = load ptr, ptr %311, align 8
  %2594 = load ptr, ptr %2591, align 8
  %2595 = getelementptr i8, ptr %2594, i64 48
  %2596 = load ptr, ptr %2595, align 8
  %2597 = call { i64, i64 } %2596(ptr nonnull %2591)
  %2598 = extractvalue { i64, i64 } %2597, 0
  %2599 = extractvalue { i64, i64 } %2597, 1
  %2600 = urem i64 20, %2599
  %2601 = icmp eq i64 %2600, 0
  %2602 = sub i64 %2599, %2600
  %2603 = select i1 %2601, i64 0, i64 %2602
  %2604 = add i64 %2598, 20
  %2605 = add i64 %2604, %2603
  %2606 = load ptr, ptr %2593, align 8
  %2607 = getelementptr i8, ptr %2606, i64 48
  %2608 = load ptr, ptr %2607, align 8
  %2609 = call { i64, i64 } %2608(ptr nonnull %2593)
  %2610 = extractvalue { i64, i64 } %2609, 0
  %2611 = extractvalue { i64, i64 } %2609, 1
  %2612 = call i64 @llvm.umax.i64(i64 %2599, i64 %2611)
  %2613 = call i64 @llvm.umax.i64(i64 %2612, i64 8)
  %2614 = urem i64 %2605, %2611
  %2615 = icmp eq i64 %2614, 0
  %2616 = sub i64 %2611, %2614
  %2617 = select i1 %2615, i64 0, i64 %2616
  %2618 = add i64 %2610, %2605
  %2619 = add i64 %2618, %2617
  %2620 = urem i64 %2619, %2613
  %2621 = icmp eq i64 %2620, 0
  %2622 = sub i64 %2613, %2620
  %2623 = select i1 %2621, i64 0, i64 %2622
  %2624 = add i64 %2623, %2619
  %result.i.i679 = call noalias ptr @bump_malloc_inner(i64 noundef %2624, ptr nonnull @current_ptr) #29
  store ptr %2591, ptr %result.i.i679, align 8
  %2625 = getelementptr i8, ptr %result.i.i679, i64 8
  store ptr %2593, ptr %2625, align 8
  %2626 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i.i679)
  store ptr @Entry, ptr %252, align 8
  store ptr %result.i.i679, ptr %365, align 8
  store i32 9, ptr %366, align 8
  %2627 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %252)
  %2628 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2629 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %2630 = load ptr, ptr %2591, align 8
  %2631 = getelementptr i8, ptr %2630, i64 48
  %2632 = load ptr, ptr %2631, align 8
  %2633 = call { i64, i64 } %2632(ptr nonnull %2591)
  %2634 = extractvalue { i64, i64 } %2633, 1
  %2635 = urem i64 20, %2634
  %2636 = icmp eq i64 %2635, 0
  %reass.sub5626 = sub i64 %2634, %2635
  %2637 = add i64 %reass.sub5626, 20
  %2638 = select i1 %2636, i64 20, i64 %2637
  %2639 = getelementptr i8, ptr %result.i.i679, i64 %2638
  %2640 = load ptr, ptr %result.i.i679, align 8
  %2641 = load ptr, ptr %2640, align 8
  %2642 = getelementptr i8, ptr %2641, i64 64
  %2643 = load ptr, ptr %2642, align 8
  call void %2643({ ptr, i160 } %488, ptr nonnull %2640, ptr %2639)
  %2644 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %2645 = load ptr, ptr %result.i.i679, align 8
  %2646 = load ptr, ptr %2645, align 8
  %2647 = getelementptr i8, ptr %2646, i64 48
  %2648 = load ptr, ptr %2647, align 8
  %2649 = call { i64, i64 } %2648(ptr nonnull %2645)
  %2650 = extractvalue { i64, i64 } %2649, 0
  %2651 = extractvalue { i64, i64 } %2649, 1
  %2652 = urem i64 20, %2651
  %2653 = icmp eq i64 %2652, 0
  %2654 = sub i64 %2651, %2652
  %2655 = select i1 %2653, i64 0, i64 %2654
  %2656 = add i64 %2650, 20
  %2657 = add i64 %2656, %2655
  %2658 = load ptr, ptr %2625, align 8
  %2659 = load ptr, ptr %2658, align 8
  %2660 = getelementptr i8, ptr %2659, i64 48
  %2661 = load ptr, ptr %2660, align 8
  %2662 = call { i64, i64 } %2661(ptr nonnull %2658)
  %2663 = extractvalue { i64, i64 } %2662, 1
  %2664 = urem i64 %2657, %2663
  %2665 = icmp eq i64 %2664, 0
  %2666 = sub i64 %2663, %2664
  %2667 = select i1 %2665, i64 0, i64 %2666
  %2668 = getelementptr i8, ptr %result.i.i679, i64 %2657
  %2669 = getelementptr i8, ptr %2668, i64 %2667
  %2670 = load ptr, ptr %2625, align 8
  %2671 = load ptr, ptr %2670, align 8
  %2672 = getelementptr i8, ptr %2671, i64 64
  %2673 = load ptr, ptr %2672, align 8
  call void %2673({ ptr, i160 } %2520, ptr nonnull %2670, ptr %2669)
  %2674 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %2675 = getelementptr i8, ptr %result.i.i679, i64 16
  store i32 %2524, ptr %2675, align 4
  %2676 = load ptr, ptr %367, align 8
  %2677 = ptrtoint ptr %result.i.i679 to i64
  %2678 = ptrtoint ptr %2676 to i64
  %.sroa.2129.0.insert.ext.i = zext i64 %2678 to i160
  %.sroa.2129.0.insert.shift.i = shl nuw nsw i160 %.sroa.2129.0.insert.ext.i, 64
  %.sroa.0128.0.insert.ext.i = zext i64 %2677 to i160
  %.sroa.2129.0.insert.insert.i = or disjoint i160 %.sroa.2129.0.insert.shift.i, %.sroa.0128.0.insert.ext.i
  %.sroa.0128.0.insert.insert.i = or disjoint i160 %.sroa.2129.0.insert.insert.i, 3062541302288446171170371466885913903104
  %2679 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0128.0.insert.insert.i, 1
  %2680 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2681 = load ptr, ptr %328, align 8
  %2682 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2681, 0
  %2683 = load ptr, ptr %329, align 8
  %2684 = insertvalue { ptr, ptr, ptr, i32 } %2682, ptr %2683, 1
  %2685 = load ptr, ptr %330, align 8
  %2686 = insertvalue { ptr, ptr, ptr, i32 } %2684, ptr %2685, 2
  %2687 = load i32, ptr %331, align 4
  %2688 = insertvalue { ptr, ptr, ptr, i32 } %2686, i32 %2687, 3
  %hash_coef_ptr.i.i202.i = getelementptr i8, ptr %2681, i64 8
  %tbl_size_ptr.i.i203.i = getelementptr i8, ptr %2681, i64 16
  %offset_tbl_ptr.i.i204.i = getelementptr i8, ptr %2681, i64 40
  %hash_coef.i.i205.i = load i64, ptr %hash_coef_ptr.i.i202.i, align 4
  %tbl_size.i.i206.i = load i64, ptr %tbl_size_ptr.i.i203.i, align 4
  %offset_tbl.i.i207.i = load ptr, ptr %offset_tbl_ptr.i.i204.i, align 8
  %product.i.i.i208.i = mul i64 %hash_coef.i.i205.i, -5261542750394134544
  %shifted.i.i.i209.i = lshr i64 %product.i.i.i208.i, 32
  %xored.i.i.i210.i = xor i64 %shifted.i.i.i209.i, %product.i.i.i208.i
  %hash.i.i.i211.i = and i64 %xored.i.i.i210.i, %tbl_size.i.i206.i
  %offset_ptr.i.i212.i = getelementptr i32, ptr %offset_tbl.i.i207.i, i64 %hash.i.i.i211.i
  %offset.i.i213.i = load i32, ptr %offset_ptr.i.i212.i, align 4
  %eq.i216.i = icmp eq i32 %2687, %offset.i.i213.i
  call void @llvm.assume(i1 %eq.i216.i) #30
  %2689 = load ptr, ptr %result.i136, align 8
  %2690 = load ptr, ptr %311, align 8
  %result.i217.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2691 = getelementptr i8, ptr %result.i217.i, i64 16
  store ptr %2690, ptr %2691, align 8
  %2692 = getelementptr i8, ptr %result.i217.i, i64 8
  store ptr %2689, ptr %2692, align 8
  %2693 = getelementptr i8, ptr %result.i217.i, i64 24
  store ptr null, ptr %2693, align 8
  %2694 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i217.i)
  store ptr @Entry, ptr %result.i217.i, align 8
  store ptr @_parameterization_Ptri32, ptr %253, align 8
  store ptr %result.i217.i, ptr %368, align 8
  %2695 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %253)
  %2696 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2681)
  %2697 = sext i32 %2687 to i64
  %2698 = getelementptr ptr, ptr %2681, i64 %2697
  %2699 = getelementptr i8, ptr %2698, i64 128
  %2700 = load ptr, ptr %2699, align 8
  store ptr @i32_typ, ptr %254, align 8
  store ptr @Entry, ptr %369, align 8
  %2701 = call ptr %2700({ ptr, ptr, ptr, i32 } %2688, ptr nonnull %254)
  call void %2701({ ptr, ptr, ptr, i32 } %2688, { ptr, ptr, ptr, i32 } %2688, ptr nonnull %253, i32 %2543, { ptr, i160 } %2679)
  br label %HashMap_insert_keyK_valueV.exit

.critedge.i665:                                   ; preds = %2580, %2563, %HashMap_insert_keyK_valueV.exit1183
  %2702 = add i32 %2524, 2127912214
  %2703 = shl i32 %2524, 12
  %2704 = add i32 %2702, %2703
  %2705 = ashr i32 %2704, 19
  %2706 = xor i32 %2704, %2705
  %2707 = xor i32 %2706, -949894596
  %2708 = add i32 %2707, 374761393
  %2709 = shl i32 %2707, 5
  %2710 = add i32 %2708, %2709
  %2711 = add i32 %2710, -744332180
  %2712 = shl i32 %2710, 9
  %2713 = xor i32 %2711, %2712
  %2714 = add i32 %2713, -42973499
  %2715 = shl i32 %2713, 3
  %2716 = add i32 %2714, %2715
  %2717 = ashr i32 %2716, 16
  %2718 = xor i32 %2716, %2717
  %2719 = xor i32 %2718, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %2720 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2721 = load ptr, ptr %345, align 8
  %2722 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2721, 0
  %2723 = load ptr, ptr %346, align 8
  %2724 = insertvalue { ptr, ptr, ptr, i32 } %2722, ptr %2723, 1
  %2725 = load ptr, ptr %347, align 8
  %2726 = insertvalue { ptr, ptr, ptr, i32 } %2724, ptr %2725, 2
  %2727 = load i32, ptr %348, align 4
  %2728 = insertvalue { ptr, ptr, ptr, i32 } %2726, i32 %2727, 3
  %hash_coef_ptr.i.i10.i1435 = getelementptr i8, ptr %2721, i64 8
  %tbl_size_ptr.i.i11.i1436 = getelementptr i8, ptr %2721, i64 16
  %offset_tbl_ptr.i.i12.i1437 = getelementptr i8, ptr %2721, i64 40
  %hash_coef.i.i13.i1438 = load i64, ptr %hash_coef_ptr.i.i10.i1435, align 4
  %tbl_size.i.i14.i1439 = load i64, ptr %tbl_size_ptr.i.i11.i1436, align 4
  %offset_tbl.i.i15.i1440 = load ptr, ptr %offset_tbl_ptr.i.i12.i1437, align 8
  %product.i.i.i16.i1441 = mul i64 %hash_coef.i.i13.i1438, -5261542750394134544
  %shifted.i.i.i17.i1442 = lshr i64 %product.i.i.i16.i1441, 32
  %xored.i.i.i18.i1443 = xor i64 %shifted.i.i.i17.i1442, %product.i.i.i16.i1441
  %hash.i.i.i19.i1444 = and i64 %xored.i.i.i18.i1443, %tbl_size.i.i14.i1439
  %offset_ptr.i.i20.i1445 = getelementptr i32, ptr %offset_tbl.i.i15.i1440, i64 %hash.i.i.i19.i1444
  %offset.i.i21.i1446 = load i32, ptr %offset_ptr.i.i20.i1445, align 4
  %eq.i.i1447 = icmp eq i32 %2727, %offset.i.i21.i1446
  call void @llvm.assume(i1 %eq.i.i1447) #30
  %2729 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2730 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2721)
  %2731 = sext i32 %2727 to i64
  %2732 = getelementptr ptr, ptr %2721, i64 %2731
  %2733 = getelementptr i8, ptr %2732, i64 64
  %2734 = load ptr, ptr %2733, align 8
  %2735 = call ptr %2734({ ptr, ptr, ptr, i32 } %2728, ptr nonnull %2)
  %2736 = call i32 %2735({ ptr, ptr, ptr, i32 } %2728, { ptr, ptr, ptr, i32 } %2728, ptr nonnull %2)
  %2737 = add i32 %2736, -1
  %2738 = and i32 %2737, %2719
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %2739 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2740 = load ptr, ptr %345, align 8
  %2741 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2740, 0
  %2742 = load ptr, ptr %346, align 8
  %2743 = insertvalue { ptr, ptr, ptr, i32 } %2741, ptr %2742, 1
  %2744 = load ptr, ptr %347, align 8
  %2745 = insertvalue { ptr, ptr, ptr, i32 } %2743, ptr %2744, 2
  %2746 = load i32, ptr %348, align 4
  %2747 = insertvalue { ptr, ptr, ptr, i32 } %2745, i32 %2746, 3
  %hash_coef_ptr.i.i219.i = getelementptr i8, ptr %2740, i64 8
  %tbl_size_ptr.i.i220.i = getelementptr i8, ptr %2740, i64 16
  %offset_tbl_ptr.i.i221.i = getelementptr i8, ptr %2740, i64 40
  %hash_coef.i.i222.i = load i64, ptr %hash_coef_ptr.i.i219.i, align 4
  %tbl_size.i.i223.i = load i64, ptr %tbl_size_ptr.i.i220.i, align 4
  %offset_tbl.i.i224.i = load ptr, ptr %offset_tbl_ptr.i.i221.i, align 8
  %product.i.i.i225.i = mul i64 %hash_coef.i.i222.i, -5261542750394134544
  %shifted.i.i.i226.i = lshr i64 %product.i.i.i225.i, 32
  %xored.i.i.i227.i = xor i64 %shifted.i.i.i226.i, %product.i.i.i225.i
  %hash.i.i.i228.i = and i64 %xored.i.i.i227.i, %tbl_size.i.i223.i
  %offset_ptr.i.i229.i = getelementptr i32, ptr %offset_tbl.i.i224.i, i64 %hash.i.i.i228.i
  %offset.i.i230.i = load i32, ptr %offset_ptr.i.i229.i, align 4
  %eq.i233.i = icmp eq i32 %2746, %offset.i.i230.i
  call void @llvm.assume(i1 %eq.i233.i) #30
  store ptr @_parameterization_Ptri32, ptr %255, align 8
  %2748 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %255)
  %2749 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2740)
  %2750 = sext i32 %2746 to i64
  %2751 = getelementptr ptr, ptr %2740, i64 %2750
  %2752 = getelementptr i8, ptr %2751, i64 120
  %2753 = load ptr, ptr %2752, align 8
  store ptr @i32_typ, ptr %256, align 8
  %2754 = call ptr %2753({ ptr, ptr, ptr, i32 } %2747, ptr nonnull %256)
  %2755 = call { ptr, i160 } %2754({ ptr, ptr, ptr, i32 } %2747, { ptr, ptr, ptr, i32 } %2747, ptr nonnull %255, i32 %2738)
  %.fca.0.extract104.i = extractvalue { ptr, i160 } %2755, 0
  %2756 = icmp ne ptr %.fca.0.extract104.i, @nil_typ
  %2757 = icmp ne ptr %.fca.0.extract104.i, null
  %.not153.i = and i1 %2756, %2757
  br i1 %.not153.i, label %2758, label %.critedge158.i

2758:                                             ; preds = %.critedge.i665
  %.fca.1.extract106.i = extractvalue { ptr, i160 } %2755, 1
  %.sroa.4.8.extract.trunc.i = trunc i160 %.fca.1.extract106.i to i64
  %2759 = inttoptr i64 %.sroa.4.8.extract.trunc.i to ptr
  %.sroa.7506.8.extract.shift.i = lshr i160 %.fca.1.extract106.i, 64
  %.sroa.7506.8.extract.trunc.i = trunc i160 %.sroa.7506.8.extract.shift.i to i64
  %2760 = inttoptr i64 %.sroa.7506.8.extract.trunc.i to ptr
  %hash_coef_ptr.i.i235.i = getelementptr i8, ptr %.fca.0.extract104.i, i64 8
  %tbl_size_ptr.i.i236.i = getelementptr i8, ptr %.fca.0.extract104.i, i64 16
  %offset_tbl_ptr.i.i237.i = getelementptr i8, ptr %.fca.0.extract104.i, i64 40
  %hash_coef.i.i238.i = load i64, ptr %hash_coef_ptr.i.i235.i, align 4
  %tbl_size.i.i239.i = load i64, ptr %tbl_size_ptr.i.i236.i, align 4
  %offset_tbl.i.i240.i = load ptr, ptr %offset_tbl_ptr.i.i237.i, align 8
  %product.i.i.i241.i = mul i64 %hash_coef.i.i238.i, 4015701072841558310
  %shifted.i.i.i242.i = lshr i64 %product.i.i.i241.i, 32
  %xored.i.i.i243.i = xor i64 %shifted.i.i.i242.i, %product.i.i.i241.i
  %hash.i.i.i244.i = and i64 %xored.i.i.i243.i, %tbl_size.i.i239.i
  %offset_ptr.i.i245.i = getelementptr i32, ptr %offset_tbl.i.i240.i, i64 %hash.i.i.i244.i
  %offset.i.i246.i = load i32, ptr %offset_ptr.i.i245.i, align 4
  %2761 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract104.i, 0
  %2762 = insertvalue { ptr, ptr, ptr, i32 } %2761, ptr %2759, 1
  %2763 = insertvalue { ptr, ptr, ptr, i32 } %2762, ptr %2760, 2
  %2764 = insertvalue { ptr, ptr, ptr, i32 } %2763, i32 %offset.i.i246.i, 3
  %2765 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2766 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2767 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract104.i)
  %2768 = sext i32 %offset.i.i246.i to i64
  %2769 = getelementptr ptr, ptr %.fca.0.extract104.i, i64 %2768
  %2770 = getelementptr i8, ptr %2769, i64 64
  %2771 = load ptr, ptr %2770, align 8
  %2772 = call ptr %2771({ ptr, ptr, ptr, i32 } %2764, ptr nonnull %2)
  %2773 = call i32 %2772({ ptr, ptr, ptr, i32 } %2764, { ptr, ptr, ptr, i32 } %2764, ptr nonnull %2)
  %2774 = icmp eq i32 %2773, %2524
  br i1 %2774, label %2775, label %.critedge158.i

2775:                                             ; preds = %2758
  %2776 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2777 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2778 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract104.i)
  %2779 = getelementptr i8, ptr %2769, i64 48
  %2780 = load ptr, ptr %2779, align 8
  %2781 = call ptr %2780({ ptr, ptr, ptr, i32 } %2764, ptr nonnull %2)
  %2782 = call { ptr, i160 } %2781({ ptr, ptr, ptr, i32 } %2764, { ptr, ptr, ptr, i32 } %2764, ptr nonnull %2)
  %2783 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2784 = load ptr, ptr %317, align 8
  %2785 = call i1 %2784({ ptr, i160 } %2782, { ptr, i160 } %488)
  br i1 %2785, label %.thread528.i, label %.critedge158.i

.thread528.i:                                     ; preds = %2775
  %2786 = load ptr, ptr %result.i136, align 8
  %2787 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2788 = load ptr, ptr %311, align 8
  %2789 = load ptr, ptr %2786, align 8
  %2790 = getelementptr i8, ptr %2789, i64 48
  %2791 = load ptr, ptr %2790, align 8
  %2792 = call { i64, i64 } %2791(ptr nonnull %2786)
  %2793 = extractvalue { i64, i64 } %2792, 0
  %2794 = extractvalue { i64, i64 } %2792, 1
  %2795 = urem i64 20, %2794
  %2796 = icmp eq i64 %2795, 0
  %2797 = sub i64 %2794, %2795
  %2798 = select i1 %2796, i64 0, i64 %2797
  %2799 = add i64 %2793, 20
  %2800 = add i64 %2799, %2798
  %2801 = load ptr, ptr %2788, align 8
  %2802 = getelementptr i8, ptr %2801, i64 48
  %2803 = load ptr, ptr %2802, align 8
  %2804 = call { i64, i64 } %2803(ptr nonnull %2788)
  %2805 = extractvalue { i64, i64 } %2804, 0
  %2806 = extractvalue { i64, i64 } %2804, 1
  %2807 = call i64 @llvm.umax.i64(i64 %2794, i64 %2806)
  %2808 = call i64 @llvm.umax.i64(i64 %2807, i64 8)
  %2809 = urem i64 %2800, %2806
  %2810 = icmp eq i64 %2809, 0
  %2811 = sub i64 %2806, %2809
  %2812 = select i1 %2810, i64 0, i64 %2811
  %2813 = add i64 %2805, %2800
  %2814 = add i64 %2813, %2812
  %2815 = urem i64 %2814, %2808
  %2816 = icmp eq i64 %2815, 0
  %2817 = sub i64 %2808, %2815
  %2818 = select i1 %2816, i64 0, i64 %2817
  %2819 = add i64 %2818, %2814
  %result.i248.i = call noalias ptr @bump_malloc_inner(i64 noundef %2819, ptr nonnull @current_ptr) #29
  store ptr %2786, ptr %result.i248.i, align 8
  %2820 = getelementptr i8, ptr %result.i248.i, i64 8
  store ptr %2788, ptr %2820, align 8
  %2821 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i248.i)
  store ptr @Entry, ptr %257, align 8
  store ptr %result.i248.i, ptr %360, align 8
  store i32 9, ptr %361, align 8
  %2822 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %257)
  %2823 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2824 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %2825 = load ptr, ptr %2786, align 8
  %2826 = getelementptr i8, ptr %2825, i64 48
  %2827 = load ptr, ptr %2826, align 8
  %2828 = call { i64, i64 } %2827(ptr nonnull %2786)
  %2829 = extractvalue { i64, i64 } %2828, 1
  %2830 = urem i64 20, %2829
  %2831 = icmp eq i64 %2830, 0
  %reass.sub5625 = sub i64 %2829, %2830
  %2832 = add i64 %reass.sub5625, 20
  %2833 = select i1 %2831, i64 20, i64 %2832
  %2834 = getelementptr i8, ptr %result.i248.i, i64 %2833
  %2835 = load ptr, ptr %result.i248.i, align 8
  %2836 = load ptr, ptr %2835, align 8
  %2837 = getelementptr i8, ptr %2836, i64 64
  %2838 = load ptr, ptr %2837, align 8
  call void %2838({ ptr, i160 } %488, ptr nonnull %2835, ptr %2834)
  %2839 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %2840 = load ptr, ptr %result.i248.i, align 8
  %2841 = load ptr, ptr %2840, align 8
  %2842 = getelementptr i8, ptr %2841, i64 48
  %2843 = load ptr, ptr %2842, align 8
  %2844 = call { i64, i64 } %2843(ptr nonnull %2840)
  %2845 = extractvalue { i64, i64 } %2844, 0
  %2846 = extractvalue { i64, i64 } %2844, 1
  %2847 = urem i64 20, %2846
  %2848 = icmp eq i64 %2847, 0
  %2849 = sub i64 %2846, %2847
  %2850 = select i1 %2848, i64 0, i64 %2849
  %2851 = add i64 %2845, 20
  %2852 = add i64 %2851, %2850
  %2853 = load ptr, ptr %2820, align 8
  %2854 = load ptr, ptr %2853, align 8
  %2855 = getelementptr i8, ptr %2854, i64 48
  %2856 = load ptr, ptr %2855, align 8
  %2857 = call { i64, i64 } %2856(ptr nonnull %2853)
  %2858 = extractvalue { i64, i64 } %2857, 1
  %2859 = urem i64 %2852, %2858
  %2860 = icmp eq i64 %2859, 0
  %2861 = sub i64 %2858, %2859
  %2862 = select i1 %2860, i64 0, i64 %2861
  %2863 = getelementptr i8, ptr %result.i248.i, i64 %2852
  %2864 = getelementptr i8, ptr %2863, i64 %2862
  %2865 = load ptr, ptr %2820, align 8
  %2866 = load ptr, ptr %2865, align 8
  %2867 = getelementptr i8, ptr %2866, i64 64
  %2868 = load ptr, ptr %2867, align 8
  call void %2868({ ptr, i160 } %2520, ptr nonnull %2865, ptr %2864)
  %2869 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %2870 = getelementptr i8, ptr %result.i248.i, i64 16
  store i32 %2524, ptr %2870, align 4
  %2871 = load ptr, ptr %362, align 8
  %2872 = ptrtoint ptr %result.i248.i to i64
  %2873 = ptrtoint ptr %2871 to i64
  %.sroa.284.0.insert.ext.i = zext i64 %2873 to i160
  %.sroa.284.0.insert.shift.i = shl nuw nsw i160 %.sroa.284.0.insert.ext.i, 64
  %.sroa.083.0.insert.ext.i = zext i64 %2872 to i160
  %.sroa.284.0.insert.insert.i = or disjoint i160 %.sroa.284.0.insert.shift.i, %.sroa.083.0.insert.ext.i
  %.sroa.083.0.insert.insert.i = or disjoint i160 %.sroa.284.0.insert.insert.i, 3062541302288446171170371466885913903104
  %2874 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.083.0.insert.insert.i, 1
  %2875 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2876 = load ptr, ptr %345, align 8
  %2877 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2876, 0
  %2878 = load ptr, ptr %346, align 8
  %2879 = insertvalue { ptr, ptr, ptr, i32 } %2877, ptr %2878, 1
  %2880 = load ptr, ptr %347, align 8
  %2881 = insertvalue { ptr, ptr, ptr, i32 } %2879, ptr %2880, 2
  %2882 = load i32, ptr %348, align 4
  %2883 = insertvalue { ptr, ptr, ptr, i32 } %2881, i32 %2882, 3
  %hash_coef_ptr.i.i264.i = getelementptr i8, ptr %2876, i64 8
  %tbl_size_ptr.i.i265.i = getelementptr i8, ptr %2876, i64 16
  %offset_tbl_ptr.i.i266.i = getelementptr i8, ptr %2876, i64 40
  %hash_coef.i.i267.i = load i64, ptr %hash_coef_ptr.i.i264.i, align 4
  %tbl_size.i.i268.i = load i64, ptr %tbl_size_ptr.i.i265.i, align 4
  %offset_tbl.i.i269.i = load ptr, ptr %offset_tbl_ptr.i.i266.i, align 8
  %product.i.i.i270.i = mul i64 %hash_coef.i.i267.i, -5261542750394134544
  %shifted.i.i.i271.i = lshr i64 %product.i.i.i270.i, 32
  %xored.i.i.i272.i = xor i64 %shifted.i.i.i271.i, %product.i.i.i270.i
  %hash.i.i.i273.i = and i64 %xored.i.i.i272.i, %tbl_size.i.i268.i
  %offset_ptr.i.i274.i = getelementptr i32, ptr %offset_tbl.i.i269.i, i64 %hash.i.i.i273.i
  %offset.i.i275.i = load i32, ptr %offset_ptr.i.i274.i, align 4
  %eq.i278.i = icmp eq i32 %2882, %offset.i.i275.i
  call void @llvm.assume(i1 %eq.i278.i) #30
  %2884 = load ptr, ptr %result.i136, align 8
  %2885 = load ptr, ptr %311, align 8
  %result.i279.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2886 = getelementptr i8, ptr %result.i279.i, i64 16
  store ptr %2885, ptr %2886, align 8
  %2887 = getelementptr i8, ptr %result.i279.i, i64 8
  store ptr %2884, ptr %2887, align 8
  %2888 = getelementptr i8, ptr %result.i279.i, i64 24
  store ptr null, ptr %2888, align 8
  %2889 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i279.i)
  store ptr @Entry, ptr %result.i279.i, align 8
  store ptr @_parameterization_Ptri32, ptr %258, align 8
  store ptr %result.i279.i, ptr %363, align 8
  %2890 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %258)
  %2891 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2876)
  %2892 = sext i32 %2882 to i64
  %2893 = getelementptr ptr, ptr %2876, i64 %2892
  %2894 = getelementptr i8, ptr %2893, i64 128
  %2895 = load ptr, ptr %2894, align 8
  store ptr @i32_typ, ptr %259, align 8
  store ptr @Entry, ptr %364, align 8
  %2896 = call ptr %2895({ ptr, ptr, ptr, i32 } %2883, ptr nonnull %259)
  call void %2896({ ptr, ptr, ptr, i32 } %2883, { ptr, ptr, ptr, i32 } %2883, ptr nonnull %258, i32 %2738, { ptr, i160 } %2874)
  br label %HashMap_insert_keyK_valueV.exit

.critedge158.i:                                   ; preds = %2775, %2758, %.critedge.i665
  %2897 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2898 = load ptr, ptr %328, align 8
  %2899 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2898, 0
  %2900 = load ptr, ptr %329, align 8
  %2901 = insertvalue { ptr, ptr, ptr, i32 } %2899, ptr %2900, 1
  %2902 = load ptr, ptr %330, align 8
  %2903 = insertvalue { ptr, ptr, ptr, i32 } %2901, ptr %2902, 2
  %2904 = load i32, ptr %331, align 4
  %2905 = insertvalue { ptr, ptr, ptr, i32 } %2903, i32 %2904, 3
  %hash_coef_ptr.i.i281.i = getelementptr i8, ptr %2898, i64 8
  %tbl_size_ptr.i.i282.i = getelementptr i8, ptr %2898, i64 16
  %offset_tbl_ptr.i.i283.i = getelementptr i8, ptr %2898, i64 40
  %hash_coef.i.i284.i = load i64, ptr %hash_coef_ptr.i.i281.i, align 4
  %tbl_size.i.i285.i = load i64, ptr %tbl_size_ptr.i.i282.i, align 4
  %offset_tbl.i.i286.i = load ptr, ptr %offset_tbl_ptr.i.i283.i, align 8
  %product.i.i.i287.i = mul i64 %hash_coef.i.i284.i, -5261542750394134544
  %shifted.i.i.i288.i = lshr i64 %product.i.i.i287.i, 32
  %xored.i.i.i289.i = xor i64 %shifted.i.i.i288.i, %product.i.i.i287.i
  %hash.i.i.i290.i = and i64 %xored.i.i.i289.i, %tbl_size.i.i285.i
  %offset_ptr.i.i291.i = getelementptr i32, ptr %offset_tbl.i.i286.i, i64 %hash.i.i.i290.i
  %offset.i.i292.i = load i32, ptr %offset_ptr.i.i291.i, align 4
  %eq.i295.i = icmp eq i32 %2904, %offset.i.i292.i
  call void @llvm.assume(i1 %eq.i295.i) #30
  %2906 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2907 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2898)
  %2908 = sext i32 %2904 to i64
  %2909 = getelementptr ptr, ptr %2898, i64 %2908
  %2910 = getelementptr i8, ptr %2909, i64 64
  %2911 = load ptr, ptr %2910, align 8
  %2912 = call ptr %2911({ ptr, ptr, ptr, i32 } %2905, ptr nonnull %2)
  %2913 = call i32 %2912({ ptr, ptr, ptr, i32 } %2905, { ptr, ptr, ptr, i32 } %2905, ptr nonnull %2)
  %2914 = load i32, ptr %349, align 4
  %.not.i = icmp slt i32 %2914, %2913
  br i1 %.not.i, label %._crit_edge2.i, label %2915

2915:                                             ; preds = %.critedge158.i
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %231)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %232)
  %2916 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2917 = load ptr, ptr %328, align 8
  %2918 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2917, 0
  %2919 = load ptr, ptr %329, align 8
  %2920 = insertvalue { ptr, ptr, ptr, i32 } %2918, ptr %2919, 1
  %2921 = load ptr, ptr %330, align 8
  %2922 = insertvalue { ptr, ptr, ptr, i32 } %2920, ptr %2921, 2
  %2923 = load i32, ptr %331, align 4
  %2924 = insertvalue { ptr, ptr, ptr, i32 } %2922, i32 %2923, 3
  %hash_coef_ptr.i.i18.i = getelementptr i8, ptr %2917, i64 8
  %tbl_size_ptr.i.i19.i = getelementptr i8, ptr %2917, i64 16
  %offset_tbl_ptr.i.i20.i = getelementptr i8, ptr %2917, i64 40
  %hash_coef.i.i21.i = load i64, ptr %hash_coef_ptr.i.i18.i, align 4
  %tbl_size.i.i22.i = load i64, ptr %tbl_size_ptr.i.i19.i, align 4
  %offset_tbl.i.i23.i = load ptr, ptr %offset_tbl_ptr.i.i20.i, align 8
  %product.i.i.i24.i = mul i64 %hash_coef.i.i21.i, -5261542750394134544
  %shifted.i.i.i25.i = lshr i64 %product.i.i.i24.i, 32
  %xored.i.i.i26.i = xor i64 %shifted.i.i.i25.i, %product.i.i.i24.i
  %hash.i.i.i27.i = and i64 %xored.i.i.i26.i, %tbl_size.i.i22.i
  %offset_ptr.i.i28.i = getelementptr i32, ptr %offset_tbl.i.i23.i, i64 %hash.i.i.i27.i
  %offset.i.i29.i = load i32, ptr %offset_ptr.i.i28.i, align 4
  %eq.i.i1461 = icmp eq i32 %2923, %offset.i.i29.i
  call void @llvm.assume(i1 %eq.i.i1461) #30
  %2925 = load ptr, ptr %345, align 8
  %2926 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2925, 0
  %2927 = load ptr, ptr %346, align 8
  %2928 = insertvalue { ptr, ptr, ptr, i32 } %2926, ptr %2927, 1
  %2929 = load ptr, ptr %347, align 8
  %2930 = insertvalue { ptr, ptr, ptr, i32 } %2928, ptr %2929, 2
  %2931 = load i32, ptr %348, align 4
  %hash_coef_ptr.i.i46.i = getelementptr i8, ptr %2925, i64 8
  %tbl_size_ptr.i.i47.i = getelementptr i8, ptr %2925, i64 16
  %offset_tbl_ptr.i.i48.i = getelementptr i8, ptr %2925, i64 40
  %hash_coef.i.i49.i = load i64, ptr %hash_coef_ptr.i.i46.i, align 4
  %tbl_size.i.i50.i = load i64, ptr %tbl_size_ptr.i.i47.i, align 4
  %offset_tbl.i.i51.i = load ptr, ptr %offset_tbl_ptr.i.i48.i, align 8
  %product.i.i.i52.i = mul i64 %hash_coef.i.i49.i, -5261542750394134544
  %shifted.i.i.i53.i = lshr i64 %product.i.i.i52.i, 32
  %xored.i.i.i54.i = xor i64 %shifted.i.i.i53.i, %product.i.i.i52.i
  %hash.i.i.i55.i = and i64 %xored.i.i.i54.i, %tbl_size.i.i50.i
  %offset_ptr.i.i56.i = getelementptr i32, ptr %offset_tbl.i.i51.i, i64 %hash.i.i.i55.i
  %offset.i.i57.i = load i32, ptr %offset_ptr.i.i56.i, align 4
  %eq.i60.i = icmp eq i32 %2931, %offset.i.i57.i
  call void @llvm.assume(i1 %eq.i60.i) #30
  %2932 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2933 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2917)
  %2934 = sext i32 %2923 to i64
  %2935 = getelementptr ptr, ptr %2917, i64 %2934
  %2936 = getelementptr i8, ptr %2935, i64 64
  %2937 = load ptr, ptr %2936, align 8
  %2938 = call ptr %2937({ ptr, ptr, ptr, i32 } %2924, ptr nonnull %2)
  %2939 = call i32 %2938({ ptr, ptr, ptr, i32 } %2924, { ptr, ptr, ptr, i32 } %2924, ptr nonnull %2)
  %2940 = shl i32 %2939, 1
  %2941 = call i32 @llvm.smax.i32(i32 %2940, i32 16)
  %2942 = load ptr, ptr %result.i136, align 8
  %2943 = load ptr, ptr %311, align 8
  %result.i.i1466 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2944 = getelementptr i8, ptr %result.i.i1466, i64 16
  store ptr @_parameterization_Nil, ptr %2944, align 8
  %result.i75.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2945 = getelementptr i8, ptr %result.i75.i, i64 16
  store ptr %2943, ptr %2945, align 8
  %2946 = getelementptr i8, ptr %result.i75.i, i64 8
  store ptr %2942, ptr %2946, align 8
  %2947 = getelementptr i8, ptr %result.i75.i, i64 24
  store ptr null, ptr %2947, align 8
  %2948 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i75.i)
  store ptr @Entry, ptr %result.i75.i, align 8
  %2949 = getelementptr i8, ptr %result.i.i1466, i64 8
  store ptr %result.i75.i, ptr %2949, align 8
  %2950 = getelementptr i8, ptr %result.i.i1466, i64 24
  store ptr null, ptr %2950, align 8
  %2951 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i1466)
  store ptr @union_typ, ptr %result.i.i1466, align 8
  %result.i76.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i1466, ptr %result.i76.i, align 8
  %2952 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i76.i)
  store ptr @Array, ptr %231, align 8
  store ptr %result.i76.i, ptr %386, align 8
  store i32 9, ptr %387, align 8
  %2953 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %231)
  %2954 = getelementptr i8, ptr %result.i76.i, i64 16
  store i32 %2941, ptr %2954, align 4
  %2955 = getelementptr i8, ptr %result.i76.i, i64 20
  store i32 %2941, ptr %2955, align 4
  %2956 = zext nneg i32 %2941 to i64
  %2957 = shl nuw nsw i64 %2956, 5
  %result.i.i.i1467 = call noalias ptr @bump_malloc_inner(i64 noundef %2957, ptr nonnull @current_ptr) #29
  %2958 = getelementptr i8, ptr %result.i76.i, i64 8
  store ptr %result.i.i.i1467, ptr %2958, align 8
  %2959 = load ptr, ptr %388, align 8
  store ptr @Array, ptr %328, align 8
  store ptr %result.i76.i, ptr %329, align 8
  store ptr %2959, ptr %330, align 8
  store i32 9, ptr %331, align 4
  %result.i91.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2960 = getelementptr i8, ptr %result.i91.i, i64 16
  store ptr @_parameterization_Nil, ptr %2960, align 8
  %result.i92.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2961 = getelementptr i8, ptr %result.i92.i, i64 16
  store ptr %2943, ptr %2961, align 8
  %2962 = getelementptr i8, ptr %result.i92.i, i64 8
  store ptr %2942, ptr %2962, align 8
  %2963 = getelementptr i8, ptr %result.i92.i, i64 24
  store ptr null, ptr %2963, align 8
  %2964 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i92.i)
  store ptr @Entry, ptr %result.i92.i, align 8
  %2965 = getelementptr i8, ptr %result.i91.i, i64 8
  store ptr %result.i92.i, ptr %2965, align 8
  %2966 = getelementptr i8, ptr %result.i91.i, i64 24
  store ptr null, ptr %2966, align 8
  %2967 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i91.i)
  store ptr @union_typ, ptr %result.i91.i, align 8
  %result.i93.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i91.i, ptr %result.i93.i, align 8
  %2968 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i93.i)
  store ptr @Array, ptr %232, align 8
  store ptr %result.i93.i, ptr %389, align 8
  store i32 9, ptr %390, align 8
  %2969 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %232)
  %2970 = getelementptr i8, ptr %result.i93.i, i64 16
  store i32 %2941, ptr %2970, align 4
  %2971 = getelementptr i8, ptr %result.i93.i, i64 20
  store i32 %2941, ptr %2971, align 4
  %result.i.i234.i = call noalias ptr @bump_malloc_inner(i64 noundef %2957, ptr nonnull @current_ptr) #29
  %2972 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %2973 = getelementptr i8, ptr %result.i93.i, i64 8
  store ptr %result.i.i234.i, ptr %2973, align 8
  %2974 = load ptr, ptr %391, align 8
  store ptr @Array, ptr %345, align 8
  store ptr %result.i93.i, ptr %346, align 8
  store ptr %2974, ptr %347, align 8
  store i32 9, ptr %348, align 4
  store i32 0, ptr %349, align 4
  %2975 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %153)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %154)
  %2976 = icmp sgt i32 %2939, 0
  br i1 %2976, label %.lr.ph.i2983, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3037.critedge

.lr.ph.i2983:                                     ; preds = %2915
  %invariant.gep.i = getelementptr i8, ptr %2917, i64 120
  %offset_tbl.i.i24.i = load ptr, ptr %offset_tbl_ptr.i.i20.i, align 8
  %hash_coef.i.i22.i = load i64, ptr %hash_coef_ptr.i.i18.i, align 4
  %product.i.i.i25.i = mul i64 %hash_coef.i.i22.i, -5261542750394134544
  %shifted.i.i.i26.i = lshr i64 %product.i.i.i25.i, 32
  %xored.i.i.i27.i = xor i64 %shifted.i.i.i26.i, %product.i.i.i25.i
  %tbl_size.i.i23.i = load i64, ptr %tbl_size_ptr.i.i19.i, align 4
  %hash.i.i.i28.i = and i64 %xored.i.i.i27.i, %tbl_size.i.i23.i
  %offset_ptr.i.i29.i = getelementptr i32, ptr %offset_tbl.i.i24.i, i64 %hash.i.i.i28.i
  %offset.i.i30.i = load i32, ptr %offset_ptr.i.i29.i, align 4
  %2977 = insertvalue { ptr, ptr, ptr, i32 } %2922, i32 %offset.i.i30.i, 3
  %2978 = sext i32 %offset.i.i30.i to i64
  %gep.i = getelementptr ptr, ptr %invariant.gep.i, i64 %2978
  %2979 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %2980

2980:                                             ; preds = %._crit_edge1.i, %.lr.ph.i2983
  %.reg2mem13.079.i = phi i32 [ 0, %.lr.ph.i2983 ], [ %3172, %._crit_edge1.i ]
  store ptr @_parameterization_Ptri32, ptr %153, align 8
  %2981 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %153)
  %2982 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %2917)
  %2983 = load ptr, ptr %gep.i, align 8
  store ptr @i32_typ, ptr %154, align 8
  %2984 = call ptr %2983({ ptr, ptr, ptr, i32 } %2977, ptr nonnull %154)
  %2985 = call { ptr, i160 } %2984({ ptr, ptr, ptr, i32 } %2977, { ptr, ptr, ptr, i32 } %2977, ptr nonnull %153, i32 %.reg2mem13.079.i)
  %.fca.0.extract11.i = extractvalue { ptr, i160 } %2985, 0
  %2986 = icmp ne ptr %.fca.0.extract11.i, @nil_typ
  %2987 = icmp ne ptr %.fca.0.extract11.i, null
  %.not17.i = and i1 %2986, %2987
  br i1 %.not17.i, label %2988, label %._crit_edge1.i

2988:                                             ; preds = %2980
  %hash_coef_ptr.i.i33.i = getelementptr i8, ptr %.fca.0.extract11.i, i64 8
  %tbl_size_ptr.i.i34.i = getelementptr i8, ptr %.fca.0.extract11.i, i64 16
  %offset_tbl_ptr.i.i35.i = getelementptr i8, ptr %.fca.0.extract11.i, i64 40
  %2989 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %115)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %116)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %117)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %118)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %119)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %120)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %121)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0680.i3823)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %122)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %123)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %124)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %125)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %126)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %127)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %128)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %129)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i3824)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %130)
  %hash_coef.i.i147.i3831 = load i64, ptr %hash_coef_ptr.i.i33.i, align 4
  %tbl_size.i.i148.i3832 = load i64, ptr %tbl_size_ptr.i.i34.i, align 4
  %offset_tbl.i.i149.i3833 = load ptr, ptr %offset_tbl_ptr.i.i35.i, align 8
  %product.i.i.i150.i3834 = mul i64 %hash_coef.i.i147.i3831, 4015701072841558310
  %shifted.i.i.i151.i3835 = lshr i64 %product.i.i.i150.i3834, 32
  %xored.i.i.i152.i3836 = xor i64 %shifted.i.i.i151.i3835, %product.i.i.i150.i3834
  %hash.i.i.i153.i3837 = and i64 %xored.i.i.i152.i3836, %tbl_size.i.i148.i3832
  %offset_ptr.i.i154.i3838 = getelementptr i32, ptr %offset_tbl.i.i149.i3833, i64 %hash.i.i.i153.i3837
  %offset.i.i169.i3839 = load i32, ptr %offset_ptr.i.i154.i3838, align 4
  %2990 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2991 = load i32, ptr %351, align 4
  %2992 = icmp sgt i32 %2991, 0
  br i1 %2992, label %.lr.ph.i3840, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit

.lr.ph.i3840:                                     ; preds = %2988
  %.fca.1.extract13.i = extractvalue { ptr, i160 } %2985, 1
  %.sroa.576.8.extract.shift.i = lshr i160 %.fca.1.extract13.i, 64
  %2993 = insertelement <2 x i160> poison, i160 %.sroa.576.8.extract.shift.i, i64 0
  %2994 = insertelement <2 x i160> %2993, i160 %.fca.1.extract13.i, i64 1
  %2995 = trunc <2 x i160> %2994 to <2 x i64>
  %2996 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i, 0
  %2997 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2998 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract11.i)
  %invariant.gep4417 = getelementptr i8, ptr %.fca.0.extract11.i, i64 64
  %2999 = insertvalue { ptr, i160 } undef, ptr %.fca.0.extract11.i, 0
  br label %3000

3000:                                             ; preds = %.cont.cont.i3883, %.lr.ph.i3840
  %offset.i.i260.i38984424 = phi i32 [ %offset.i.i169.i3839, %.lr.ph.i3840 ], [ %offset.i.i260.i3898, %.cont.cont.i3883 ]
  %.reg2mem195.0678.i3841 = phi i32 [ 1, %.lr.ph.i3840 ], [ %3155, %.cont.cont.i3883 ]
  %.reg2mem193.0677.i3842 = phi i32 [ 0, %.lr.ph.i3840 ], [ %3160, %.cont.cont.i3883 ]
  %3001 = phi <2 x i64> [ %2995, %.lr.ph.i3840 ], [ %3159, %.cont.cont.i3883 ]
  %3002 = extractelement <2 x i64> %3001, i64 1
  %.sroa.speculated352.i38854420 = inttoptr i64 %3002 to ptr
  %3003 = extractelement <2 x i64> %3001, i64 0
  %.sroa.speculated346.i38864422 = inttoptr i64 %3003 to ptr
  %3004 = insertvalue { ptr, ptr, ptr, i32 } %2996, ptr %.sroa.speculated352.i38854420, 1
  %3005 = insertvalue { ptr, ptr, ptr, i32 } %3004, ptr %.sroa.speculated346.i38864422, 2
  %3006 = insertvalue { ptr, ptr, ptr, i32 } %3005, i32 %offset.i.i260.i38984424, 3
  %3007 = sext i32 %offset.i.i260.i38984424 to i64
  %gep4418 = getelementptr ptr, ptr %invariant.gep4417, i64 %3007
  %3008 = load ptr, ptr %gep4418, align 8
  %3009 = call ptr %3008({ ptr, ptr, ptr, i32 } %3006, ptr nonnull %2)
  %3010 = call i32 %3009({ ptr, ptr, ptr, i32 } %3006, { ptr, ptr, ptr, i32 } %3006, ptr nonnull %2)
  %3011 = icmp eq i32 %.reg2mem195.0678.i3841, 1
  %3012 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br i1 %3011, label %3013, label %3075

3013:                                             ; preds = %3000
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %3014 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3015 = load ptr, ptr %328, align 8
  %3016 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3015, 0
  %3017 = load ptr, ptr %329, align 8
  %3018 = insertvalue { ptr, ptr, ptr, i32 } %3016, ptr %3017, 1
  %3019 = load ptr, ptr %330, align 8
  %3020 = insertvalue { ptr, ptr, ptr, i32 } %3018, ptr %3019, 2
  %3021 = load i32, ptr %331, align 4
  %3022 = insertvalue { ptr, ptr, ptr, i32 } %3020, i32 %3021, 3
  %hash_coef_ptr.i.i10.i5124 = getelementptr i8, ptr %3015, i64 8
  %tbl_size_ptr.i.i11.i5125 = getelementptr i8, ptr %3015, i64 16
  %offset_tbl_ptr.i.i12.i5126 = getelementptr i8, ptr %3015, i64 40
  %hash_coef.i.i13.i5127 = load i64, ptr %hash_coef_ptr.i.i10.i5124, align 4
  %tbl_size.i.i14.i5128 = load i64, ptr %tbl_size_ptr.i.i11.i5125, align 4
  %offset_tbl.i.i15.i5129 = load ptr, ptr %offset_tbl_ptr.i.i12.i5126, align 8
  %product.i.i.i16.i5130 = mul i64 %hash_coef.i.i13.i5127, -5261542750394134544
  %shifted.i.i.i17.i5131 = lshr i64 %product.i.i.i16.i5130, 32
  %xored.i.i.i18.i5132 = xor i64 %shifted.i.i.i17.i5131, %product.i.i.i16.i5130
  %hash.i.i.i19.i5133 = and i64 %xored.i.i.i18.i5132, %tbl_size.i.i14.i5128
  %offset_ptr.i.i20.i5134 = getelementptr i32, ptr %offset_tbl.i.i15.i5129, i64 %hash.i.i.i19.i5133
  %offset.i.i21.i5135 = load i32, ptr %offset_ptr.i.i20.i5134, align 4
  %eq.i.i5136 = icmp eq i32 %3021, %offset.i.i21.i5135
  call void @llvm.assume(i1 %eq.i.i5136) #30
  %3023 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %3024 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3015)
  %3025 = sext i32 %3021 to i64
  %3026 = getelementptr ptr, ptr %3015, i64 %3025
  %3027 = getelementptr i8, ptr %3026, i64 64
  %3028 = load ptr, ptr %3027, align 8
  %3029 = call ptr %3028({ ptr, ptr, ptr, i32 } %3022, ptr nonnull %2)
  %3030 = call i32 %3029({ ptr, ptr, ptr, i32 } %3022, { ptr, ptr, ptr, i32 } %3022, ptr nonnull %2)
  %3031 = add i32 %3030, -1
  %3032 = and i32 %3031, %3010
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %3033 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3034 = load ptr, ptr %328, align 8
  %3035 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3034, 0
  %3036 = load ptr, ptr %329, align 8
  %3037 = insertvalue { ptr, ptr, ptr, i32 } %3035, ptr %3036, 1
  %3038 = load ptr, ptr %330, align 8
  %3039 = insertvalue { ptr, ptr, ptr, i32 } %3037, ptr %3038, 2
  %3040 = load i32, ptr %331, align 4
  %3041 = insertvalue { ptr, ptr, ptr, i32 } %3039, i32 %3040, 3
  %hash_coef_ptr.i.i172.i3899 = getelementptr i8, ptr %3034, i64 8
  %tbl_size_ptr.i.i173.i3900 = getelementptr i8, ptr %3034, i64 16
  %offset_tbl_ptr.i.i174.i3901 = getelementptr i8, ptr %3034, i64 40
  %hash_coef.i.i175.i3902 = load i64, ptr %hash_coef_ptr.i.i172.i3899, align 4
  %tbl_size.i.i176.i3903 = load i64, ptr %tbl_size_ptr.i.i173.i3900, align 4
  %offset_tbl.i.i177.i3904 = load ptr, ptr %offset_tbl_ptr.i.i174.i3901, align 8
  %product.i.i.i178.i3905 = mul i64 %hash_coef.i.i175.i3902, -5261542750394134544
  %shifted.i.i.i179.i3906 = lshr i64 %product.i.i.i178.i3905, 32
  %xored.i.i.i180.i3907 = xor i64 %shifted.i.i.i179.i3906, %product.i.i.i178.i3905
  %hash.i.i.i181.i3908 = and i64 %xored.i.i.i180.i3907, %tbl_size.i.i176.i3903
  %offset_ptr.i.i182.i3909 = getelementptr i32, ptr %offset_tbl.i.i177.i3904, i64 %hash.i.i.i181.i3908
  %offset.i.i183.i3910 = load i32, ptr %offset_ptr.i.i182.i3909, align 4
  %eq.i.i3911 = icmp eq i32 %3040, %offset.i.i183.i3910
  call void @llvm.assume(i1 %eq.i.i3911) #30
  store ptr @_parameterization_Ptri32, ptr %115, align 8
  %3042 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %115)
  %3043 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3034)
  %3044 = sext i32 %3040 to i64
  %3045 = getelementptr ptr, ptr %3034, i64 %3044
  %3046 = getelementptr i8, ptr %3045, i64 120
  %3047 = load ptr, ptr %3046, align 8
  store ptr @i32_typ, ptr %116, align 8
  %3048 = call ptr %3047({ ptr, ptr, ptr, i32 } %3041, ptr nonnull %116)
  %3049 = call { ptr, i160 } %3048({ ptr, ptr, ptr, i32 } %3041, { ptr, ptr, ptr, i32 } %3041, ptr nonnull %115, i32 %3032)
  %.fca.0.extract112.i3912 = extractvalue { ptr, i160 } %3049, 0
  %.sroa.3111.0.insert.ext.i3913 = zext i32 %offset.i.i260.i38984424 to i160
  %.sroa.3111.0.insert.shift.i3914 = shl nuw i160 %.sroa.3111.0.insert.ext.i3913, 128
  %.sroa.2110.0.insert.ext.i3915 = zext i64 %3003 to i160
  %.sroa.2110.0.insert.shift.i3916 = shl nuw nsw i160 %.sroa.2110.0.insert.ext.i3915, 64
  %.sroa.2110.0.insert.insert.i3917 = or disjoint i160 %.sroa.2110.0.insert.shift.i3916, %.sroa.3111.0.insert.shift.i3914
  %.sroa.0109.0.insert.ext.i3918 = zext i64 %3002 to i160
  %.sroa.0109.0.insert.insert.i3919 = or disjoint i160 %.sroa.2110.0.insert.insert.i3917, %.sroa.0109.0.insert.ext.i3918
  %3050 = insertvalue { ptr, i160 } %2999, i160 %.sroa.0109.0.insert.insert.i3919, 1
  %3051 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3052 = load ptr, ptr %328, align 8
  %3053 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3052, 0
  %3054 = load ptr, ptr %329, align 8
  %3055 = insertvalue { ptr, ptr, ptr, i32 } %3053, ptr %3054, 1
  %3056 = load ptr, ptr %330, align 8
  %3057 = insertvalue { ptr, ptr, ptr, i32 } %3055, ptr %3056, 2
  %3058 = load i32, ptr %331, align 4
  %3059 = insertvalue { ptr, ptr, ptr, i32 } %3057, i32 %3058, 3
  %hash_coef_ptr.i.i186.i3920 = getelementptr i8, ptr %3052, i64 8
  %tbl_size_ptr.i.i187.i3921 = getelementptr i8, ptr %3052, i64 16
  %offset_tbl_ptr.i.i188.i3922 = getelementptr i8, ptr %3052, i64 40
  %hash_coef.i.i189.i3923 = load i64, ptr %hash_coef_ptr.i.i186.i3920, align 4
  %tbl_size.i.i190.i3924 = load i64, ptr %tbl_size_ptr.i.i187.i3921, align 4
  %offset_tbl.i.i191.i3925 = load ptr, ptr %offset_tbl_ptr.i.i188.i3922, align 8
  %product.i.i.i192.i3926 = mul i64 %hash_coef.i.i189.i3923, -5261542750394134544
  %shifted.i.i.i193.i3927 = lshr i64 %product.i.i.i192.i3926, 32
  %xored.i.i.i194.i3928 = xor i64 %shifted.i.i.i193.i3927, %product.i.i.i192.i3926
  %hash.i.i.i195.i3929 = and i64 %xored.i.i.i194.i3928, %tbl_size.i.i190.i3924
  %offset_ptr.i.i196.i3930 = getelementptr i32, ptr %offset_tbl.i.i191.i3925, i64 %hash.i.i.i195.i3929
  %offset.i.i197.i3931 = load i32, ptr %offset_ptr.i.i196.i3930, align 4
  %eq.i200.i3932 = icmp eq i32 %3058, %offset.i.i197.i3931
  call void @llvm.assume(i1 %eq.i200.i3932) #30
  %3060 = load ptr, ptr %result.i136, align 8
  %3061 = load ptr, ptr %311, align 8
  %result.i.i3933 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3062 = getelementptr i8, ptr %result.i.i3933, i64 16
  store ptr %3061, ptr %3062, align 8
  %3063 = getelementptr i8, ptr %result.i.i3933, i64 8
  store ptr %3060, ptr %3063, align 8
  %3064 = getelementptr i8, ptr %result.i.i3933, i64 24
  store ptr null, ptr %3064, align 8
  %3065 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i3933)
  store ptr @Entry, ptr %result.i.i3933, align 8
  store ptr @_parameterization_Ptri32, ptr %117, align 8
  store ptr %result.i.i3933, ptr %452, align 8
  %3066 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %117)
  %3067 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3052)
  %3068 = sext i32 %3058 to i64
  %3069 = getelementptr ptr, ptr %3052, i64 %3068
  %3070 = getelementptr i8, ptr %3069, i64 128
  %3071 = load ptr, ptr %3070, align 8
  store ptr @i32_typ, ptr %118, align 8
  store ptr %.fca.0.extract11.i, ptr %453, align 8
  %3072 = call ptr %3071({ ptr, ptr, ptr, i32 } %3059, ptr nonnull %118)
  call void %3072({ ptr, ptr, ptr, i32 } %3059, { ptr, ptr, ptr, i32 } %3059, ptr nonnull %117, i32 %3032, { ptr, i160 } %3050)
  %3073 = icmp ne ptr %.fca.0.extract112.i3912, @nil_typ
  %3074 = icmp ne ptr %.fca.0.extract112.i3912, null
  %.not140.i3934 = and i1 %3073, %3074
  br i1 %.not140.i3934, label %.cont.cont.i3883, label %3163

3075:                                             ; preds = %3000
  %3076 = add i32 %3010, 2127912214
  %3077 = shl i32 %3010, 12
  %3078 = add i32 %3076, %3077
  %3079 = ashr i32 %3078, 19
  %3080 = xor i32 %3078, %3079
  %3081 = xor i32 %3080, -949894596
  %3082 = add i32 %3081, 374761393
  %3083 = shl i32 %3081, 5
  %3084 = add i32 %3082, %3083
  %3085 = add i32 %3084, -744332180
  %3086 = shl i32 %3084, 9
  %3087 = xor i32 %3085, %3086
  %3088 = add i32 %3087, -42973499
  %3089 = shl i32 %3087, 3
  %3090 = add i32 %3088, %3089
  %3091 = ashr i32 %3090, 16
  %3092 = xor i32 %3090, %3091
  %3093 = xor i32 %3092, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %3094 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3095 = load ptr, ptr %345, align 8
  %3096 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3095, 0
  %3097 = load ptr, ptr %346, align 8
  %3098 = insertvalue { ptr, ptr, ptr, i32 } %3096, ptr %3097, 1
  %3099 = load ptr, ptr %347, align 8
  %3100 = insertvalue { ptr, ptr, ptr, i32 } %3098, ptr %3099, 2
  %3101 = load i32, ptr %348, align 4
  %3102 = insertvalue { ptr, ptr, ptr, i32 } %3100, i32 %3101, 3
  %hash_coef_ptr.i.i10.i5154 = getelementptr i8, ptr %3095, i64 8
  %tbl_size_ptr.i.i11.i5155 = getelementptr i8, ptr %3095, i64 16
  %offset_tbl_ptr.i.i12.i5156 = getelementptr i8, ptr %3095, i64 40
  %hash_coef.i.i13.i5157 = load i64, ptr %hash_coef_ptr.i.i10.i5154, align 4
  %tbl_size.i.i14.i5158 = load i64, ptr %tbl_size_ptr.i.i11.i5155, align 4
  %offset_tbl.i.i15.i5159 = load ptr, ptr %offset_tbl_ptr.i.i12.i5156, align 8
  %product.i.i.i16.i5160 = mul i64 %hash_coef.i.i13.i5157, -5261542750394134544
  %shifted.i.i.i17.i5161 = lshr i64 %product.i.i.i16.i5160, 32
  %xored.i.i.i18.i5162 = xor i64 %shifted.i.i.i17.i5161, %product.i.i.i16.i5160
  %hash.i.i.i19.i5163 = and i64 %xored.i.i.i18.i5162, %tbl_size.i.i14.i5158
  %offset_ptr.i.i20.i5164 = getelementptr i32, ptr %offset_tbl.i.i15.i5159, i64 %hash.i.i.i19.i5163
  %offset.i.i21.i5165 = load i32, ptr %offset_ptr.i.i20.i5164, align 4
  %eq.i.i5166 = icmp eq i32 %3101, %offset.i.i21.i5165
  call void @llvm.assume(i1 %eq.i.i5166) #30
  %3103 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %3104 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3095)
  %3105 = sext i32 %3101 to i64
  %3106 = getelementptr ptr, ptr %3095, i64 %3105
  %3107 = getelementptr i8, ptr %3106, i64 64
  %3108 = load ptr, ptr %3107, align 8
  %3109 = call ptr %3108({ ptr, ptr, ptr, i32 } %3102, ptr nonnull %2)
  %3110 = call i32 %3109({ ptr, ptr, ptr, i32 } %3102, { ptr, ptr, ptr, i32 } %3102, ptr nonnull %2)
  %3111 = add i32 %3110, -1
  %3112 = and i32 %3111, %3093
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %3113 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3114 = load ptr, ptr %345, align 8
  %3115 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3114, 0
  %3116 = load ptr, ptr %346, align 8
  %3117 = insertvalue { ptr, ptr, ptr, i32 } %3115, ptr %3116, 1
  %3118 = load ptr, ptr %347, align 8
  %3119 = insertvalue { ptr, ptr, ptr, i32 } %3117, ptr %3118, 2
  %3120 = load i32, ptr %348, align 4
  %3121 = insertvalue { ptr, ptr, ptr, i32 } %3119, i32 %3120, 3
  %hash_coef_ptr.i.i202.i3843 = getelementptr i8, ptr %3114, i64 8
  %tbl_size_ptr.i.i203.i3844 = getelementptr i8, ptr %3114, i64 16
  %offset_tbl_ptr.i.i204.i3845 = getelementptr i8, ptr %3114, i64 40
  %hash_coef.i.i205.i3846 = load i64, ptr %hash_coef_ptr.i.i202.i3843, align 4
  %tbl_size.i.i206.i3847 = load i64, ptr %tbl_size_ptr.i.i203.i3844, align 4
  %offset_tbl.i.i207.i3848 = load ptr, ptr %offset_tbl_ptr.i.i204.i3845, align 8
  %product.i.i.i208.i3849 = mul i64 %hash_coef.i.i205.i3846, -5261542750394134544
  %shifted.i.i.i209.i3850 = lshr i64 %product.i.i.i208.i3849, 32
  %xored.i.i.i210.i3851 = xor i64 %shifted.i.i.i209.i3850, %product.i.i.i208.i3849
  %hash.i.i.i211.i3852 = and i64 %xored.i.i.i210.i3851, %tbl_size.i.i206.i3847
  %offset_ptr.i.i212.i3853 = getelementptr i32, ptr %offset_tbl.i.i207.i3848, i64 %hash.i.i.i211.i3852
  %offset.i.i213.i3854 = load i32, ptr %offset_ptr.i.i212.i3853, align 4
  %eq.i216.i3855 = icmp eq i32 %3120, %offset.i.i213.i3854
  call void @llvm.assume(i1 %eq.i216.i3855) #30
  store ptr @_parameterization_Ptri32, ptr %123, align 8
  %3122 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %123)
  %3123 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3114)
  %3124 = sext i32 %3120 to i64
  %3125 = getelementptr ptr, ptr %3114, i64 %3124
  %3126 = getelementptr i8, ptr %3125, i64 120
  %3127 = load ptr, ptr %3126, align 8
  store ptr @i32_typ, ptr %124, align 8
  %3128 = call ptr %3127({ ptr, ptr, ptr, i32 } %3121, ptr nonnull %124)
  %3129 = call { ptr, i160 } %3128({ ptr, ptr, ptr, i32 } %3121, { ptr, ptr, ptr, i32 } %3121, ptr nonnull %123, i32 %3112)
  %.fca.0.extract87.i3856 = extractvalue { ptr, i160 } %3129, 0
  %.sroa.3.0.insert.ext.i3857 = zext i32 %offset.i.i260.i38984424 to i160
  %.sroa.3.0.insert.shift.i3858 = shl nuw i160 %.sroa.3.0.insert.ext.i3857, 128
  %.sroa.2.0.insert.ext.i3859 = zext i64 %3003 to i160
  %.sroa.2.0.insert.shift.i3860 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i3859, 64
  %.sroa.2.0.insert.insert.i3861 = or disjoint i160 %.sroa.2.0.insert.shift.i3860, %.sroa.3.0.insert.shift.i3858
  %.sroa.0.0.insert.ext.i3862 = zext i64 %3002 to i160
  %.sroa.0.0.insert.insert.i3863 = or disjoint i160 %.sroa.2.0.insert.insert.i3861, %.sroa.0.0.insert.ext.i3862
  %3130 = insertvalue { ptr, i160 } %2999, i160 %.sroa.0.0.insert.insert.i3863, 1
  %3131 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3132 = load ptr, ptr %345, align 8
  %3133 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3132, 0
  %3134 = load ptr, ptr %346, align 8
  %3135 = insertvalue { ptr, ptr, ptr, i32 } %3133, ptr %3134, 1
  %3136 = load ptr, ptr %347, align 8
  %3137 = insertvalue { ptr, ptr, ptr, i32 } %3135, ptr %3136, 2
  %3138 = load i32, ptr %348, align 4
  %3139 = insertvalue { ptr, ptr, ptr, i32 } %3137, i32 %3138, 3
  %hash_coef_ptr.i.i218.i3864 = getelementptr i8, ptr %3132, i64 8
  %tbl_size_ptr.i.i219.i3865 = getelementptr i8, ptr %3132, i64 16
  %offset_tbl_ptr.i.i220.i3866 = getelementptr i8, ptr %3132, i64 40
  %hash_coef.i.i221.i3867 = load i64, ptr %hash_coef_ptr.i.i218.i3864, align 4
  %tbl_size.i.i222.i3868 = load i64, ptr %tbl_size_ptr.i.i219.i3865, align 4
  %offset_tbl.i.i223.i3869 = load ptr, ptr %offset_tbl_ptr.i.i220.i3866, align 8
  %product.i.i.i224.i3870 = mul i64 %hash_coef.i.i221.i3867, -5261542750394134544
  %shifted.i.i.i225.i3871 = lshr i64 %product.i.i.i224.i3870, 32
  %xored.i.i.i226.i3872 = xor i64 %shifted.i.i.i225.i3871, %product.i.i.i224.i3870
  %hash.i.i.i227.i3873 = and i64 %xored.i.i.i226.i3872, %tbl_size.i.i222.i3868
  %offset_ptr.i.i228.i3874 = getelementptr i32, ptr %offset_tbl.i.i223.i3869, i64 %hash.i.i.i227.i3873
  %offset.i.i229.i3875 = load i32, ptr %offset_ptr.i.i228.i3874, align 4
  %eq.i232.i3876 = icmp eq i32 %3138, %offset.i.i229.i3875
  call void @llvm.assume(i1 %eq.i232.i3876) #30
  %3140 = load ptr, ptr %result.i136, align 8
  %3141 = load ptr, ptr %311, align 8
  %result.i233.i3877 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3142 = getelementptr i8, ptr %result.i233.i3877, i64 16
  store ptr %3141, ptr %3142, align 8
  %3143 = getelementptr i8, ptr %result.i233.i3877, i64 8
  store ptr %3140, ptr %3143, align 8
  %3144 = getelementptr i8, ptr %result.i233.i3877, i64 24
  store ptr null, ptr %3144, align 8
  %3145 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i233.i3877)
  store ptr @Entry, ptr %result.i233.i3877, align 8
  store ptr @_parameterization_Ptri32, ptr %125, align 8
  store ptr %result.i233.i3877, ptr %450, align 8
  %3146 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %125)
  %3147 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3132)
  %3148 = sext i32 %3138 to i64
  %3149 = getelementptr ptr, ptr %3132, i64 %3148
  %3150 = getelementptr i8, ptr %3149, i64 128
  %3151 = load ptr, ptr %3150, align 8
  store ptr @i32_typ, ptr %126, align 8
  store ptr %.fca.0.extract11.i, ptr %451, align 8
  %3152 = call ptr %3151({ ptr, ptr, ptr, i32 } %3139, ptr nonnull %126)
  call void %3152({ ptr, ptr, ptr, i32 } %3139, { ptr, ptr, ptr, i32 } %3139, ptr nonnull %125, i32 %3112, { ptr, i160 } %3130)
  %3153 = icmp ne ptr %.fca.0.extract87.i3856, @nil_typ
  %3154 = icmp ne ptr %.fca.0.extract87.i3856, null
  %.not138.i3878 = and i1 %3153, %3154
  br i1 %.not138.i3878, label %.cont.cont.i3883, label %3163

.cont.cont.i3883:                                 ; preds = %3075, %3013
  %.sink4460 = phi { ptr, i160 } [ %3049, %3013 ], [ %3129, %3075 ]
  %3155 = phi i32 [ 2, %3013 ], [ 1, %3075 ]
  %vptr.i248.sroa.speculated.i3884 = phi ptr [ %.fca.0.extract112.i3912, %3013 ], [ %.fca.0.extract87.i3856, %3075 ]
  %.fca.1.extract89.i3879 = extractvalue { ptr, i160 } %.sink4460, 1
  %.sroa.3407.sroa.4.0.extract.shift.i3880 = lshr i160 %.fca.1.extract89.i3879, 64
  %3156 = trunc i160 %.sroa.3407.sroa.4.0.extract.shift.i3880 to i64
  %3157 = insertelement <2 x i64> poison, i64 %3156, i64 0
  %3158 = trunc i160 %.fca.1.extract89.i3879 to i64
  %3159 = insertelement <2 x i64> %3157, i64 %3158, i64 1
  %hash_coef_ptr.i.i249.i3887 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i3884, i64 8
  %tbl_size_ptr.i.i250.i3888 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i3884, i64 16
  %offset_tbl_ptr.i.i251.i3889 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i3884, i64 40
  %hash_coef.i.i252.i3890 = load i64, ptr %hash_coef_ptr.i.i249.i3887, align 4
  %tbl_size.i.i253.i3891 = load i64, ptr %tbl_size_ptr.i.i250.i3888, align 4
  %offset_tbl.i.i254.i3892 = load ptr, ptr %offset_tbl_ptr.i.i251.i3889, align 8
  %product.i.i.i255.i3893 = mul i64 %hash_coef.i.i252.i3890, 4015701072841558310
  %shifted.i.i.i256.i3894 = lshr i64 %product.i.i.i255.i3893, 32
  %xored.i.i.i257.i3895 = xor i64 %shifted.i.i.i256.i3894, %product.i.i.i255.i3893
  %hash.i.i.i258.i3896 = and i64 %xored.i.i.i257.i3895, %tbl_size.i.i253.i3891
  %offset_ptr.i.i259.i3897 = getelementptr i32, ptr %offset_tbl.i.i254.i3892, i64 %hash.i.i.i258.i3896
  %offset.i.i260.i3898 = load i32, ptr %offset_ptr.i.i259.i3897, align 4
  %3160 = add nuw nsw i32 %.reg2mem193.0677.i3842, 1
  %3161 = load i32, ptr %351, align 4
  %3162 = icmp slt i32 %3160, %3161
  br i1 %3162, label %3000, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit

3163:                                             ; preds = %3075, %3013
  %3164 = phi ptr [ %127, %3075 ], [ %119, %3013 ]
  %3165 = phi ptr [ %128, %3075 ], [ %120, %3013 ]
  %3166 = phi ptr [ %129, %3075 ], [ %121, %3013 ]
  %3167 = phi ptr [ %.sroa.0.i3824, %3075 ], [ %.sroa.0680.i3823, %3013 ]
  %3168 = phi ptr [ %130, %3075 ], [ %122, %3013 ]
  %3169 = load i32, ptr %349, align 4
  store i32 %3169, ptr %3164, align 4
  store i32 1, ptr %3165, align 4
  %3170 = add i32 %3169, 1
  store i32 %3170, ptr %3166, align 4
  %3171 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  store i32 %3170, ptr %349, align 4
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %3168, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %3167, align 8
  br label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit

HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit: ; preds = %.cont.cont.i3883, %2988, %3163
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %115)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %116)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %117)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %118)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %119)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %120)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %121)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i3823)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %122)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %123)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %124)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %125)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %126)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %127)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %128)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %129)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i3824)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %130)
  br label %._crit_edge1.i

._crit_edge1.i:                                   ; preds = %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit, %2980
  %3172 = add nuw nsw i32 %.reg2mem13.079.i, 1
  %3173 = icmp slt i32 %3172, %2939
  br i1 %3173, label %2980, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit: ; preds = %._crit_edge1.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %153)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %154)
  %3174 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %151)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %152)
  %invariant.gep.i2989 = getelementptr i8, ptr %2925, i64 120
  %offset_tbl.i.i24.i2991 = load ptr, ptr %offset_tbl_ptr.i.i48.i, align 8
  %hash_coef.i.i22.i2993 = load i64, ptr %hash_coef_ptr.i.i46.i, align 4
  %product.i.i.i25.i2994 = mul i64 %hash_coef.i.i22.i2993, -5261542750394134544
  %shifted.i.i.i26.i2995 = lshr i64 %product.i.i.i25.i2994, 32
  %xored.i.i.i27.i2996 = xor i64 %shifted.i.i.i26.i2995, %product.i.i.i25.i2994
  %tbl_size.i.i23.i2998 = load i64, ptr %tbl_size_ptr.i.i47.i, align 4
  %hash.i.i.i28.i2999 = and i64 %xored.i.i.i27.i2996, %tbl_size.i.i23.i2998
  %offset_ptr.i.i29.i3000 = getelementptr i32, ptr %offset_tbl.i.i24.i2991, i64 %hash.i.i.i28.i2999
  %offset.i.i30.i3001 = load i32, ptr %offset_ptr.i.i29.i3000, align 4
  %3175 = insertvalue { ptr, ptr, ptr, i32 } %2930, i32 %offset.i.i30.i3001, 3
  %3176 = sext i32 %offset.i.i30.i3001 to i64
  %gep.i3015 = getelementptr ptr, ptr %invariant.gep.i2989, i64 %3176
  %3177 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %3178

3178:                                             ; preds = %._crit_edge1.i3019, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit
  %.reg2mem13.079.i3016 = phi i32 [ 0, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit ], [ %3370, %._crit_edge1.i3019 ]
  store ptr @_parameterization_Ptri32, ptr %151, align 8
  %3179 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %151)
  %3180 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %2925)
  %3181 = load ptr, ptr %gep.i3015, align 8
  store ptr @i32_typ, ptr %152, align 8
  %3182 = call ptr %3181({ ptr, ptr, ptr, i32 } %3175, ptr nonnull %152)
  %3183 = call { ptr, i160 } %3182({ ptr, ptr, ptr, i32 } %3175, { ptr, ptr, ptr, i32 } %3175, ptr nonnull %151, i32 %.reg2mem13.079.i3016)
  %.fca.0.extract11.i3017 = extractvalue { ptr, i160 } %3183, 0
  %3184 = icmp ne ptr %.fca.0.extract11.i3017, @nil_typ
  %3185 = icmp ne ptr %.fca.0.extract11.i3017, null
  %.not17.i3018 = and i1 %3184, %3185
  br i1 %.not17.i3018, label %3186, label %._crit_edge1.i3019

3186:                                             ; preds = %3178
  %hash_coef_ptr.i.i33.i3024 = getelementptr i8, ptr %.fca.0.extract11.i3017, i64 8
  %tbl_size_ptr.i.i34.i3025 = getelementptr i8, ptr %.fca.0.extract11.i3017, i64 16
  %offset_tbl_ptr.i.i35.i3026 = getelementptr i8, ptr %.fca.0.extract11.i3017, i64 40
  %3187 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %99)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %100)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %101)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %102)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %103)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %104)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %105)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0680.i3937)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %106)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %107)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %108)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %109)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %110)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %111)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %112)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %113)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i3939)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %114)
  %hash_coef.i.i147.i3959 = load i64, ptr %hash_coef_ptr.i.i33.i3024, align 4
  %tbl_size.i.i148.i3960 = load i64, ptr %tbl_size_ptr.i.i34.i3025, align 4
  %offset_tbl.i.i149.i3961 = load ptr, ptr %offset_tbl_ptr.i.i35.i3026, align 8
  %product.i.i.i150.i3962 = mul i64 %hash_coef.i.i147.i3959, 4015701072841558310
  %shifted.i.i.i151.i3963 = lshr i64 %product.i.i.i150.i3962, 32
  %xored.i.i.i152.i3964 = xor i64 %shifted.i.i.i151.i3963, %product.i.i.i150.i3962
  %hash.i.i.i153.i3965 = and i64 %xored.i.i.i152.i3964, %tbl_size.i.i148.i3960
  %offset_ptr.i.i154.i3966 = getelementptr i32, ptr %offset_tbl.i.i149.i3961, i64 %hash.i.i.i153.i3965
  %offset.i.i169.i3967 = load i32, ptr %offset_ptr.i.i154.i3966, align 4
  %3188 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3189 = load i32, ptr %351, align 4
  %3190 = icmp sgt i32 %3189, 0
  br i1 %3190, label %.lr.ph.i3973, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4093

.lr.ph.i3973:                                     ; preds = %3186
  %.fca.1.extract13.i3020 = extractvalue { ptr, i160 } %3183, 1
  %.sroa.576.8.extract.shift.i3022 = lshr i160 %.fca.1.extract13.i3020, 64
  %3191 = insertelement <2 x i160> poison, i160 %.sroa.576.8.extract.shift.i3022, i64 0
  %3192 = insertelement <2 x i160> %3191, i160 %.fca.1.extract13.i3020, i64 1
  %3193 = trunc <2 x i160> %3192 to <2 x i64>
  %3194 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i3017, 0
  %3195 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %3196 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract11.i3017)
  %invariant.gep4425 = getelementptr i8, ptr %.fca.0.extract11.i3017, i64 64
  %3197 = insertvalue { ptr, i160 } undef, ptr %.fca.0.extract11.i3017, 0
  br label %3198

3198:                                             ; preds = %.cont.cont.i4026, %.lr.ph.i3973
  %offset.i.i260.i40434432 = phi i32 [ %offset.i.i169.i3967, %.lr.ph.i3973 ], [ %offset.i.i260.i4043, %.cont.cont.i4026 ]
  %.reg2mem195.0678.i3974 = phi i32 [ 1, %.lr.ph.i3973 ], [ %3353, %.cont.cont.i4026 ]
  %.reg2mem193.0677.i3975 = phi i32 [ 0, %.lr.ph.i3973 ], [ %3358, %.cont.cont.i4026 ]
  %3199 = phi <2 x i64> [ %3193, %.lr.ph.i3973 ], [ %3357, %.cont.cont.i4026 ]
  %3200 = extractelement <2 x i64> %3199, i64 1
  %.sroa.speculated352.i40304428 = inttoptr i64 %3200 to ptr
  %3201 = extractelement <2 x i64> %3199, i64 0
  %.sroa.speculated346.i40314430 = inttoptr i64 %3201 to ptr
  %3202 = insertvalue { ptr, ptr, ptr, i32 } %3194, ptr %.sroa.speculated352.i40304428, 1
  %3203 = insertvalue { ptr, ptr, ptr, i32 } %3202, ptr %.sroa.speculated346.i40314430, 2
  %3204 = insertvalue { ptr, ptr, ptr, i32 } %3203, i32 %offset.i.i260.i40434432, 3
  %3205 = sext i32 %offset.i.i260.i40434432 to i64
  %gep4426 = getelementptr ptr, ptr %invariant.gep4425, i64 %3205
  %3206 = load ptr, ptr %gep4426, align 8
  %3207 = call ptr %3206({ ptr, ptr, ptr, i32 } %3204, ptr nonnull %2)
  %3208 = call i32 %3207({ ptr, ptr, ptr, i32 } %3204, { ptr, ptr, ptr, i32 } %3204, ptr nonnull %2)
  %3209 = icmp eq i32 %.reg2mem195.0678.i3974, 1
  %3210 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br i1 %3209, label %3211, label %3273

3211:                                             ; preds = %3198
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %3212 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3213 = load ptr, ptr %328, align 8
  %3214 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3213, 0
  %3215 = load ptr, ptr %329, align 8
  %3216 = insertvalue { ptr, ptr, ptr, i32 } %3214, ptr %3215, 1
  %3217 = load ptr, ptr %330, align 8
  %3218 = insertvalue { ptr, ptr, ptr, i32 } %3216, ptr %3217, 2
  %3219 = load i32, ptr %331, align 4
  %3220 = insertvalue { ptr, ptr, ptr, i32 } %3218, i32 %3219, 3
  %hash_coef_ptr.i.i10.i5184 = getelementptr i8, ptr %3213, i64 8
  %tbl_size_ptr.i.i11.i5185 = getelementptr i8, ptr %3213, i64 16
  %offset_tbl_ptr.i.i12.i5186 = getelementptr i8, ptr %3213, i64 40
  %hash_coef.i.i13.i5187 = load i64, ptr %hash_coef_ptr.i.i10.i5184, align 4
  %tbl_size.i.i14.i5188 = load i64, ptr %tbl_size_ptr.i.i11.i5185, align 4
  %offset_tbl.i.i15.i5189 = load ptr, ptr %offset_tbl_ptr.i.i12.i5186, align 8
  %product.i.i.i16.i5190 = mul i64 %hash_coef.i.i13.i5187, -5261542750394134544
  %shifted.i.i.i17.i5191 = lshr i64 %product.i.i.i16.i5190, 32
  %xored.i.i.i18.i5192 = xor i64 %shifted.i.i.i17.i5191, %product.i.i.i16.i5190
  %hash.i.i.i19.i5193 = and i64 %xored.i.i.i18.i5192, %tbl_size.i.i14.i5188
  %offset_ptr.i.i20.i5194 = getelementptr i32, ptr %offset_tbl.i.i15.i5189, i64 %hash.i.i.i19.i5193
  %offset.i.i21.i5195 = load i32, ptr %offset_ptr.i.i20.i5194, align 4
  %eq.i.i5196 = icmp eq i32 %3219, %offset.i.i21.i5195
  call void @llvm.assume(i1 %eq.i.i5196) #30
  %3221 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %3222 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3213)
  %3223 = sext i32 %3219 to i64
  %3224 = getelementptr ptr, ptr %3213, i64 %3223
  %3225 = getelementptr i8, ptr %3224, i64 64
  %3226 = load ptr, ptr %3225, align 8
  %3227 = call ptr %3226({ ptr, ptr, ptr, i32 } %3220, ptr nonnull %2)
  %3228 = call i32 %3227({ ptr, ptr, ptr, i32 } %3220, { ptr, ptr, ptr, i32 } %3220, ptr nonnull %2)
  %3229 = add i32 %3228, -1
  %3230 = and i32 %3229, %3208
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %3231 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3232 = load ptr, ptr %328, align 8
  %3233 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3232, 0
  %3234 = load ptr, ptr %329, align 8
  %3235 = insertvalue { ptr, ptr, ptr, i32 } %3233, ptr %3234, 1
  %3236 = load ptr, ptr %330, align 8
  %3237 = insertvalue { ptr, ptr, ptr, i32 } %3235, ptr %3236, 2
  %3238 = load i32, ptr %331, align 4
  %3239 = insertvalue { ptr, ptr, ptr, i32 } %3237, i32 %3238, 3
  %hash_coef_ptr.i.i172.i4048 = getelementptr i8, ptr %3232, i64 8
  %tbl_size_ptr.i.i173.i4049 = getelementptr i8, ptr %3232, i64 16
  %offset_tbl_ptr.i.i174.i4050 = getelementptr i8, ptr %3232, i64 40
  %hash_coef.i.i175.i4051 = load i64, ptr %hash_coef_ptr.i.i172.i4048, align 4
  %tbl_size.i.i176.i4052 = load i64, ptr %tbl_size_ptr.i.i173.i4049, align 4
  %offset_tbl.i.i177.i4053 = load ptr, ptr %offset_tbl_ptr.i.i174.i4050, align 8
  %product.i.i.i178.i4054 = mul i64 %hash_coef.i.i175.i4051, -5261542750394134544
  %shifted.i.i.i179.i4055 = lshr i64 %product.i.i.i178.i4054, 32
  %xored.i.i.i180.i4056 = xor i64 %shifted.i.i.i179.i4055, %product.i.i.i178.i4054
  %hash.i.i.i181.i4057 = and i64 %xored.i.i.i180.i4056, %tbl_size.i.i176.i4052
  %offset_ptr.i.i182.i4058 = getelementptr i32, ptr %offset_tbl.i.i177.i4053, i64 %hash.i.i.i181.i4057
  %offset.i.i183.i4059 = load i32, ptr %offset_ptr.i.i182.i4058, align 4
  %eq.i.i4060 = icmp eq i32 %3238, %offset.i.i183.i4059
  call void @llvm.assume(i1 %eq.i.i4060) #30
  store ptr @_parameterization_Ptri32, ptr %99, align 8
  %3240 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %99)
  %3241 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3232)
  %3242 = sext i32 %3238 to i64
  %3243 = getelementptr ptr, ptr %3232, i64 %3242
  %3244 = getelementptr i8, ptr %3243, i64 120
  %3245 = load ptr, ptr %3244, align 8
  store ptr @i32_typ, ptr %100, align 8
  %3246 = call ptr %3245({ ptr, ptr, ptr, i32 } %3239, ptr nonnull %100)
  %3247 = call { ptr, i160 } %3246({ ptr, ptr, ptr, i32 } %3239, { ptr, ptr, ptr, i32 } %3239, ptr nonnull %99, i32 %3230)
  %.fca.0.extract112.i4061 = extractvalue { ptr, i160 } %3247, 0
  %.sroa.3111.0.insert.ext.i4062 = zext i32 %offset.i.i260.i40434432 to i160
  %.sroa.3111.0.insert.shift.i4063 = shl nuw i160 %.sroa.3111.0.insert.ext.i4062, 128
  %.sroa.2110.0.insert.ext.i4064 = zext i64 %3201 to i160
  %.sroa.2110.0.insert.shift.i4065 = shl nuw nsw i160 %.sroa.2110.0.insert.ext.i4064, 64
  %.sroa.2110.0.insert.insert.i4066 = or disjoint i160 %.sroa.2110.0.insert.shift.i4065, %.sroa.3111.0.insert.shift.i4063
  %.sroa.0109.0.insert.ext.i4067 = zext i64 %3200 to i160
  %.sroa.0109.0.insert.insert.i4068 = or disjoint i160 %.sroa.2110.0.insert.insert.i4066, %.sroa.0109.0.insert.ext.i4067
  %3248 = insertvalue { ptr, i160 } %3197, i160 %.sroa.0109.0.insert.insert.i4068, 1
  %3249 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3250 = load ptr, ptr %328, align 8
  %3251 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3250, 0
  %3252 = load ptr, ptr %329, align 8
  %3253 = insertvalue { ptr, ptr, ptr, i32 } %3251, ptr %3252, 1
  %3254 = load ptr, ptr %330, align 8
  %3255 = insertvalue { ptr, ptr, ptr, i32 } %3253, ptr %3254, 2
  %3256 = load i32, ptr %331, align 4
  %3257 = insertvalue { ptr, ptr, ptr, i32 } %3255, i32 %3256, 3
  %hash_coef_ptr.i.i186.i4073 = getelementptr i8, ptr %3250, i64 8
  %tbl_size_ptr.i.i187.i4074 = getelementptr i8, ptr %3250, i64 16
  %offset_tbl_ptr.i.i188.i4075 = getelementptr i8, ptr %3250, i64 40
  %hash_coef.i.i189.i4076 = load i64, ptr %hash_coef_ptr.i.i186.i4073, align 4
  %tbl_size.i.i190.i4077 = load i64, ptr %tbl_size_ptr.i.i187.i4074, align 4
  %offset_tbl.i.i191.i4078 = load ptr, ptr %offset_tbl_ptr.i.i188.i4075, align 8
  %product.i.i.i192.i4079 = mul i64 %hash_coef.i.i189.i4076, -5261542750394134544
  %shifted.i.i.i193.i4080 = lshr i64 %product.i.i.i192.i4079, 32
  %xored.i.i.i194.i4081 = xor i64 %shifted.i.i.i193.i4080, %product.i.i.i192.i4079
  %hash.i.i.i195.i4082 = and i64 %xored.i.i.i194.i4081, %tbl_size.i.i190.i4077
  %offset_ptr.i.i196.i4083 = getelementptr i32, ptr %offset_tbl.i.i191.i4078, i64 %hash.i.i.i195.i4082
  %offset.i.i197.i4084 = load i32, ptr %offset_ptr.i.i196.i4083, align 4
  %eq.i200.i4085 = icmp eq i32 %3256, %offset.i.i197.i4084
  call void @llvm.assume(i1 %eq.i200.i4085) #30
  %3258 = load ptr, ptr %result.i136, align 8
  %3259 = load ptr, ptr %311, align 8
  %result.i.i4086 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3260 = getelementptr i8, ptr %result.i.i4086, i64 16
  store ptr %3259, ptr %3260, align 8
  %3261 = getelementptr i8, ptr %result.i.i4086, i64 8
  store ptr %3258, ptr %3261, align 8
  %3262 = getelementptr i8, ptr %result.i.i4086, i64 24
  store ptr null, ptr %3262, align 8
  %3263 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i4086)
  store ptr @Entry, ptr %result.i.i4086, align 8
  store ptr @_parameterization_Ptri32, ptr %101, align 8
  store ptr %result.i.i4086, ptr %456, align 8
  %3264 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %101)
  %3265 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3250)
  %3266 = sext i32 %3256 to i64
  %3267 = getelementptr ptr, ptr %3250, i64 %3266
  %3268 = getelementptr i8, ptr %3267, i64 128
  %3269 = load ptr, ptr %3268, align 8
  store ptr @i32_typ, ptr %102, align 8
  store ptr %.fca.0.extract11.i3017, ptr %457, align 8
  %3270 = call ptr %3269({ ptr, ptr, ptr, i32 } %3257, ptr nonnull %102)
  call void %3270({ ptr, ptr, ptr, i32 } %3257, { ptr, ptr, ptr, i32 } %3257, ptr nonnull %101, i32 %3230, { ptr, i160 } %3248)
  %3271 = icmp ne ptr %.fca.0.extract112.i4061, @nil_typ
  %3272 = icmp ne ptr %.fca.0.extract112.i4061, null
  %.not140.i4087 = and i1 %3271, %3272
  br i1 %.not140.i4087, label %.cont.cont.i4026, label %3361

3273:                                             ; preds = %3198
  %3274 = add i32 %3208, 2127912214
  %3275 = shl i32 %3208, 12
  %3276 = add i32 %3274, %3275
  %3277 = ashr i32 %3276, 19
  %3278 = xor i32 %3276, %3277
  %3279 = xor i32 %3278, -949894596
  %3280 = add i32 %3279, 374761393
  %3281 = shl i32 %3279, 5
  %3282 = add i32 %3280, %3281
  %3283 = add i32 %3282, -744332180
  %3284 = shl i32 %3282, 9
  %3285 = xor i32 %3283, %3284
  %3286 = add i32 %3285, -42973499
  %3287 = shl i32 %3285, 3
  %3288 = add i32 %3286, %3287
  %3289 = ashr i32 %3288, 16
  %3290 = xor i32 %3288, %3289
  %3291 = xor i32 %3290, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %3292 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3293 = load ptr, ptr %345, align 8
  %3294 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3293, 0
  %3295 = load ptr, ptr %346, align 8
  %3296 = insertvalue { ptr, ptr, ptr, i32 } %3294, ptr %3295, 1
  %3297 = load ptr, ptr %347, align 8
  %3298 = insertvalue { ptr, ptr, ptr, i32 } %3296, ptr %3297, 2
  %3299 = load i32, ptr %348, align 4
  %3300 = insertvalue { ptr, ptr, ptr, i32 } %3298, i32 %3299, 3
  %hash_coef_ptr.i.i10.i5214 = getelementptr i8, ptr %3293, i64 8
  %tbl_size_ptr.i.i11.i5215 = getelementptr i8, ptr %3293, i64 16
  %offset_tbl_ptr.i.i12.i5216 = getelementptr i8, ptr %3293, i64 40
  %hash_coef.i.i13.i5217 = load i64, ptr %hash_coef_ptr.i.i10.i5214, align 4
  %tbl_size.i.i14.i5218 = load i64, ptr %tbl_size_ptr.i.i11.i5215, align 4
  %offset_tbl.i.i15.i5219 = load ptr, ptr %offset_tbl_ptr.i.i12.i5216, align 8
  %product.i.i.i16.i5220 = mul i64 %hash_coef.i.i13.i5217, -5261542750394134544
  %shifted.i.i.i17.i5221 = lshr i64 %product.i.i.i16.i5220, 32
  %xored.i.i.i18.i5222 = xor i64 %shifted.i.i.i17.i5221, %product.i.i.i16.i5220
  %hash.i.i.i19.i5223 = and i64 %xored.i.i.i18.i5222, %tbl_size.i.i14.i5218
  %offset_ptr.i.i20.i5224 = getelementptr i32, ptr %offset_tbl.i.i15.i5219, i64 %hash.i.i.i19.i5223
  %offset.i.i21.i5225 = load i32, ptr %offset_ptr.i.i20.i5224, align 4
  %eq.i.i5226 = icmp eq i32 %3299, %offset.i.i21.i5225
  call void @llvm.assume(i1 %eq.i.i5226) #30
  %3301 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %3302 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3293)
  %3303 = sext i32 %3299 to i64
  %3304 = getelementptr ptr, ptr %3293, i64 %3303
  %3305 = getelementptr i8, ptr %3304, i64 64
  %3306 = load ptr, ptr %3305, align 8
  %3307 = call ptr %3306({ ptr, ptr, ptr, i32 } %3300, ptr nonnull %2)
  %3308 = call i32 %3307({ ptr, ptr, ptr, i32 } %3300, { ptr, ptr, ptr, i32 } %3300, ptr nonnull %2)
  %3309 = add i32 %3308, -1
  %3310 = and i32 %3309, %3291
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %3311 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3312 = load ptr, ptr %345, align 8
  %3313 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3312, 0
  %3314 = load ptr, ptr %346, align 8
  %3315 = insertvalue { ptr, ptr, ptr, i32 } %3313, ptr %3314, 1
  %3316 = load ptr, ptr %347, align 8
  %3317 = insertvalue { ptr, ptr, ptr, i32 } %3315, ptr %3316, 2
  %3318 = load i32, ptr %348, align 4
  %3319 = insertvalue { ptr, ptr, ptr, i32 } %3317, i32 %3318, 3
  %hash_coef_ptr.i.i202.i3980 = getelementptr i8, ptr %3312, i64 8
  %tbl_size_ptr.i.i203.i3981 = getelementptr i8, ptr %3312, i64 16
  %offset_tbl_ptr.i.i204.i3982 = getelementptr i8, ptr %3312, i64 40
  %hash_coef.i.i205.i3983 = load i64, ptr %hash_coef_ptr.i.i202.i3980, align 4
  %tbl_size.i.i206.i3984 = load i64, ptr %tbl_size_ptr.i.i203.i3981, align 4
  %offset_tbl.i.i207.i3985 = load ptr, ptr %offset_tbl_ptr.i.i204.i3982, align 8
  %product.i.i.i208.i3986 = mul i64 %hash_coef.i.i205.i3983, -5261542750394134544
  %shifted.i.i.i209.i3987 = lshr i64 %product.i.i.i208.i3986, 32
  %xored.i.i.i210.i3988 = xor i64 %shifted.i.i.i209.i3987, %product.i.i.i208.i3986
  %hash.i.i.i211.i3989 = and i64 %xored.i.i.i210.i3988, %tbl_size.i.i206.i3984
  %offset_ptr.i.i212.i3990 = getelementptr i32, ptr %offset_tbl.i.i207.i3985, i64 %hash.i.i.i211.i3989
  %offset.i.i213.i3991 = load i32, ptr %offset_ptr.i.i212.i3990, align 4
  %eq.i216.i3992 = icmp eq i32 %3318, %offset.i.i213.i3991
  call void @llvm.assume(i1 %eq.i216.i3992) #30
  store ptr @_parameterization_Ptri32, ptr %107, align 8
  %3320 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %107)
  %3321 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3312)
  %3322 = sext i32 %3318 to i64
  %3323 = getelementptr ptr, ptr %3312, i64 %3322
  %3324 = getelementptr i8, ptr %3323, i64 120
  %3325 = load ptr, ptr %3324, align 8
  store ptr @i32_typ, ptr %108, align 8
  %3326 = call ptr %3325({ ptr, ptr, ptr, i32 } %3319, ptr nonnull %108)
  %3327 = call { ptr, i160 } %3326({ ptr, ptr, ptr, i32 } %3319, { ptr, ptr, ptr, i32 } %3319, ptr nonnull %107, i32 %3310)
  %.fca.0.extract87.i3993 = extractvalue { ptr, i160 } %3327, 0
  %.sroa.3.0.insert.ext.i3994 = zext i32 %offset.i.i260.i40434432 to i160
  %.sroa.3.0.insert.shift.i3995 = shl nuw i160 %.sroa.3.0.insert.ext.i3994, 128
  %.sroa.2.0.insert.ext.i3996 = zext i64 %3201 to i160
  %.sroa.2.0.insert.shift.i3997 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i3996, 64
  %.sroa.2.0.insert.insert.i3998 = or disjoint i160 %.sroa.2.0.insert.shift.i3997, %.sroa.3.0.insert.shift.i3995
  %.sroa.0.0.insert.ext.i3999 = zext i64 %3200 to i160
  %.sroa.0.0.insert.insert.i4000 = or disjoint i160 %.sroa.2.0.insert.insert.i3998, %.sroa.0.0.insert.ext.i3999
  %3328 = insertvalue { ptr, i160 } %3197, i160 %.sroa.0.0.insert.insert.i4000, 1
  %3329 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3330 = load ptr, ptr %345, align 8
  %3331 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3330, 0
  %3332 = load ptr, ptr %346, align 8
  %3333 = insertvalue { ptr, ptr, ptr, i32 } %3331, ptr %3332, 1
  %3334 = load ptr, ptr %347, align 8
  %3335 = insertvalue { ptr, ptr, ptr, i32 } %3333, ptr %3334, 2
  %3336 = load i32, ptr %348, align 4
  %3337 = insertvalue { ptr, ptr, ptr, i32 } %3335, i32 %3336, 3
  %hash_coef_ptr.i.i218.i4005 = getelementptr i8, ptr %3330, i64 8
  %tbl_size_ptr.i.i219.i4006 = getelementptr i8, ptr %3330, i64 16
  %offset_tbl_ptr.i.i220.i4007 = getelementptr i8, ptr %3330, i64 40
  %hash_coef.i.i221.i4008 = load i64, ptr %hash_coef_ptr.i.i218.i4005, align 4
  %tbl_size.i.i222.i4009 = load i64, ptr %tbl_size_ptr.i.i219.i4006, align 4
  %offset_tbl.i.i223.i4010 = load ptr, ptr %offset_tbl_ptr.i.i220.i4007, align 8
  %product.i.i.i224.i4011 = mul i64 %hash_coef.i.i221.i4008, -5261542750394134544
  %shifted.i.i.i225.i4012 = lshr i64 %product.i.i.i224.i4011, 32
  %xored.i.i.i226.i4013 = xor i64 %shifted.i.i.i225.i4012, %product.i.i.i224.i4011
  %hash.i.i.i227.i4014 = and i64 %xored.i.i.i226.i4013, %tbl_size.i.i222.i4009
  %offset_ptr.i.i228.i4015 = getelementptr i32, ptr %offset_tbl.i.i223.i4010, i64 %hash.i.i.i227.i4014
  %offset.i.i229.i4016 = load i32, ptr %offset_ptr.i.i228.i4015, align 4
  %eq.i232.i4017 = icmp eq i32 %3336, %offset.i.i229.i4016
  call void @llvm.assume(i1 %eq.i232.i4017) #30
  %3338 = load ptr, ptr %result.i136, align 8
  %3339 = load ptr, ptr %311, align 8
  %result.i233.i4018 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3340 = getelementptr i8, ptr %result.i233.i4018, i64 16
  store ptr %3339, ptr %3340, align 8
  %3341 = getelementptr i8, ptr %result.i233.i4018, i64 8
  store ptr %3338, ptr %3341, align 8
  %3342 = getelementptr i8, ptr %result.i233.i4018, i64 24
  store ptr null, ptr %3342, align 8
  %3343 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i233.i4018)
  store ptr @Entry, ptr %result.i233.i4018, align 8
  store ptr @_parameterization_Ptri32, ptr %109, align 8
  store ptr %result.i233.i4018, ptr %454, align 8
  %3344 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %109)
  %3345 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3330)
  %3346 = sext i32 %3336 to i64
  %3347 = getelementptr ptr, ptr %3330, i64 %3346
  %3348 = getelementptr i8, ptr %3347, i64 128
  %3349 = load ptr, ptr %3348, align 8
  store ptr @i32_typ, ptr %110, align 8
  store ptr %.fca.0.extract11.i3017, ptr %455, align 8
  %3350 = call ptr %3349({ ptr, ptr, ptr, i32 } %3337, ptr nonnull %110)
  call void %3350({ ptr, ptr, ptr, i32 } %3337, { ptr, ptr, ptr, i32 } %3337, ptr nonnull %109, i32 %3310, { ptr, i160 } %3328)
  %3351 = icmp ne ptr %.fca.0.extract87.i3993, @nil_typ
  %3352 = icmp ne ptr %.fca.0.extract87.i3993, null
  %.not138.i4019 = and i1 %3351, %3352
  br i1 %.not138.i4019, label %.cont.cont.i4026, label %3361

.cont.cont.i4026:                                 ; preds = %3273, %3211
  %.sink4462 = phi { ptr, i160 } [ %3247, %3211 ], [ %3327, %3273 ]
  %3353 = phi i32 [ 2, %3211 ], [ 1, %3273 ]
  %vptr.i248.sroa.speculated.i4029 = phi ptr [ %.fca.0.extract112.i4061, %3211 ], [ %.fca.0.extract87.i3993, %3273 ]
  %.fca.1.extract89.i4022 = extractvalue { ptr, i160 } %.sink4462, 1
  %.sroa.3407.sroa.4.0.extract.shift.i4023 = lshr i160 %.fca.1.extract89.i4022, 64
  %3354 = trunc i160 %.sroa.3407.sroa.4.0.extract.shift.i4023 to i64
  %3355 = insertelement <2 x i64> poison, i64 %3354, i64 0
  %3356 = trunc i160 %.fca.1.extract89.i4022 to i64
  %3357 = insertelement <2 x i64> %3355, i64 %3356, i64 1
  %hash_coef_ptr.i.i249.i4032 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i4029, i64 8
  %tbl_size_ptr.i.i250.i4033 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i4029, i64 16
  %offset_tbl_ptr.i.i251.i4034 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i4029, i64 40
  %hash_coef.i.i252.i4035 = load i64, ptr %hash_coef_ptr.i.i249.i4032, align 4
  %tbl_size.i.i253.i4036 = load i64, ptr %tbl_size_ptr.i.i250.i4033, align 4
  %offset_tbl.i.i254.i4037 = load ptr, ptr %offset_tbl_ptr.i.i251.i4034, align 8
  %product.i.i.i255.i4038 = mul i64 %hash_coef.i.i252.i4035, 4015701072841558310
  %shifted.i.i.i256.i4039 = lshr i64 %product.i.i.i255.i4038, 32
  %xored.i.i.i257.i4040 = xor i64 %shifted.i.i.i256.i4039, %product.i.i.i255.i4038
  %hash.i.i.i258.i4041 = and i64 %xored.i.i.i257.i4040, %tbl_size.i.i253.i4036
  %offset_ptr.i.i259.i4042 = getelementptr i32, ptr %offset_tbl.i.i254.i4037, i64 %hash.i.i.i258.i4041
  %offset.i.i260.i4043 = load i32, ptr %offset_ptr.i.i259.i4042, align 4
  %3358 = add nuw nsw i32 %.reg2mem193.0677.i3975, 1
  %3359 = load i32, ptr %351, align 4
  %3360 = icmp slt i32 %3358, %3359
  br i1 %3360, label %3198, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4093

3361:                                             ; preds = %3273, %3211
  %3362 = phi ptr [ %111, %3273 ], [ %103, %3211 ]
  %3363 = phi ptr [ %112, %3273 ], [ %104, %3211 ]
  %3364 = phi ptr [ %113, %3273 ], [ %105, %3211 ]
  %3365 = phi ptr [ %.sroa.0.i3939, %3273 ], [ %.sroa.0680.i3937, %3211 ]
  %3366 = phi ptr [ %114, %3273 ], [ %106, %3211 ]
  %3367 = load i32, ptr %349, align 4
  store i32 %3367, ptr %3362, align 4
  store i32 1, ptr %3363, align 4
  %3368 = add i32 %3367, 1
  store i32 %3368, ptr %3364, align 4
  %3369 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  store i32 %3368, ptr %349, align 4
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %3366, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %3365, align 8
  br label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4093

HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4093: ; preds = %.cont.cont.i4026, %3186, %3361
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %99)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %100)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %101)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %102)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %103)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %104)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %105)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i3937)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %106)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %107)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %108)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %109)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %110)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %111)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %112)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %113)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i3939)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %114)
  br label %._crit_edge1.i3019

._crit_edge1.i3019:                               ; preds = %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4093, %3178
  %3370 = add nuw nsw i32 %.reg2mem13.079.i3016, 1
  %3371 = icmp slt i32 %3370, %2939
  br i1 %3371, label %3178, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3037

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3037.critedge: ; preds = %2915
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %153)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %154)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %151)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %152)
  br label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3037

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3037: ; preds = %._crit_edge1.i3019, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3037.critedge
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %151)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %152)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %231)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %232)
  br label %._crit_edge2.i

._crit_edge2.i:                                   ; preds = %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3037, %.critedge158.i
  %3372 = load ptr, ptr %result.i136, align 8
  %3373 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3374 = load ptr, ptr %311, align 8
  %3375 = load ptr, ptr %3372, align 8
  %3376 = getelementptr i8, ptr %3375, i64 48
  %3377 = load ptr, ptr %3376, align 8
  %3378 = call { i64, i64 } %3377(ptr nonnull %3372)
  %3379 = extractvalue { i64, i64 } %3378, 0
  %3380 = extractvalue { i64, i64 } %3378, 1
  %3381 = urem i64 20, %3380
  %3382 = icmp eq i64 %3381, 0
  %3383 = sub i64 %3380, %3381
  %3384 = select i1 %3382, i64 0, i64 %3383
  %3385 = add i64 %3379, 20
  %3386 = add i64 %3385, %3384
  %3387 = load ptr, ptr %3374, align 8
  %3388 = getelementptr i8, ptr %3387, i64 48
  %3389 = load ptr, ptr %3388, align 8
  %3390 = call { i64, i64 } %3389(ptr nonnull %3374)
  %3391 = extractvalue { i64, i64 } %3390, 0
  %3392 = extractvalue { i64, i64 } %3390, 1
  %3393 = call i64 @llvm.umax.i64(i64 %3380, i64 %3392)
  %3394 = call i64 @llvm.umax.i64(i64 %3393, i64 8)
  %3395 = urem i64 %3386, %3392
  %3396 = icmp eq i64 %3395, 0
  %3397 = sub i64 %3392, %3395
  %3398 = select i1 %3396, i64 0, i64 %3397
  %3399 = add i64 %3391, %3386
  %3400 = add i64 %3399, %3398
  %3401 = urem i64 %3400, %3394
  %3402 = icmp eq i64 %3401, 0
  %3403 = sub i64 %3394, %3401
  %3404 = select i1 %3402, i64 0, i64 %3403
  %3405 = add i64 %3404, %3400
  %result.i296.i = call noalias ptr @bump_malloc_inner(i64 noundef %3405, ptr nonnull @current_ptr) #29
  store ptr %3372, ptr %result.i296.i, align 8
  %3406 = getelementptr i8, ptr %result.i296.i, i64 8
  store ptr %3374, ptr %3406, align 8
  %3407 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i296.i)
  store ptr @Entry, ptr %260, align 8
  store ptr %result.i296.i, ptr %357, align 8
  store i32 9, ptr %358, align 8
  %3408 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %260)
  %3409 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3410 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %3411 = load ptr, ptr %3372, align 8
  %3412 = getelementptr i8, ptr %3411, i64 48
  %3413 = load ptr, ptr %3412, align 8
  %3414 = call { i64, i64 } %3413(ptr nonnull %3372)
  %3415 = extractvalue { i64, i64 } %3414, 1
  %3416 = urem i64 20, %3415
  %3417 = icmp eq i64 %3416, 0
  %reass.sub5624 = sub i64 %3415, %3416
  %3418 = add i64 %reass.sub5624, 20
  %3419 = select i1 %3417, i64 20, i64 %3418
  %3420 = getelementptr i8, ptr %result.i296.i, i64 %3419
  %3421 = load ptr, ptr %result.i296.i, align 8
  %3422 = load ptr, ptr %3421, align 8
  %3423 = getelementptr i8, ptr %3422, i64 64
  %3424 = load ptr, ptr %3423, align 8
  call void %3424({ ptr, i160 } %488, ptr nonnull %3421, ptr %3420)
  %3425 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %3426 = load ptr, ptr %result.i296.i, align 8
  %3427 = load ptr, ptr %3426, align 8
  %3428 = getelementptr i8, ptr %3427, i64 48
  %3429 = load ptr, ptr %3428, align 8
  %3430 = call { i64, i64 } %3429(ptr nonnull %3426)
  %3431 = extractvalue { i64, i64 } %3430, 0
  %3432 = extractvalue { i64, i64 } %3430, 1
  %3433 = urem i64 20, %3432
  %3434 = icmp eq i64 %3433, 0
  %3435 = sub i64 %3432, %3433
  %3436 = select i1 %3434, i64 0, i64 %3435
  %3437 = add i64 %3431, 20
  %3438 = add i64 %3437, %3436
  %3439 = load ptr, ptr %3406, align 8
  %3440 = load ptr, ptr %3439, align 8
  %3441 = getelementptr i8, ptr %3440, i64 48
  %3442 = load ptr, ptr %3441, align 8
  %3443 = call { i64, i64 } %3442(ptr nonnull %3439)
  %3444 = extractvalue { i64, i64 } %3443, 1
  %3445 = urem i64 %3438, %3444
  %3446 = icmp eq i64 %3445, 0
  %3447 = sub i64 %3444, %3445
  %3448 = select i1 %3446, i64 0, i64 %3447
  %3449 = getelementptr i8, ptr %result.i296.i, i64 %3438
  %3450 = getelementptr i8, ptr %3449, i64 %3448
  %3451 = load ptr, ptr %3406, align 8
  %3452 = load ptr, ptr %3451, align 8
  %3453 = getelementptr i8, ptr %3452, i64 64
  %3454 = load ptr, ptr %3453, align 8
  call void %3454({ ptr, i160 } %2520, ptr nonnull %3451, ptr %3450)
  %3455 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %3456 = getelementptr i8, ptr %result.i296.i, i64 16
  store i32 %2524, ptr %3456, align 4
  %3457 = load ptr, ptr %359, align 8
  %3458 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %214)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %215)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %216)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %217)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %218)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %219)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %220)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0680.i)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %221)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %222)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %223)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %224)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %225)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %226)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %227)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %228)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i1468)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %229)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %230)
  store ptr @Entry, ptr %230, align 8
  store ptr %result.i296.i, ptr %392, align 8
  store ptr %3457, ptr %393, align 8
  store i32 9, ptr %394, align 8
  %3459 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %230)
  %3460 = load i32, ptr %351, align 4
  %3461 = icmp sgt i32 %3460, 0
  br i1 %3461, label %.lr.ph.i, label %._crit_edge3.i

.lr.ph.i:                                         ; preds = %._crit_edge2.i
  %3462 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3463 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %3464 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  br label %3465

3465:                                             ; preds = %.cont.cont.i, %.lr.ph.i
  %offset.i.i260.i2133 = phi i32 [ 9, %.lr.ph.i ], [ %offset.i.i260.i, %.cont.cont.i ]
  %.sroa.speculated346.i2131 = phi ptr [ %3457, %.lr.ph.i ], [ %.sroa.speculated346.i, %.cont.cont.i ]
  %.sroa.speculated352.i2129 = phi ptr [ %result.i296.i, %.lr.ph.i ], [ %.sroa.speculated352.i, %.cont.cont.i ]
  %.reg2mem195.0678.i = phi i32 [ 1, %.lr.ph.i ], [ %3621, %.cont.cont.i ]
  %.reg2mem193.0677.i = phi i32 [ 0, %.lr.ph.i ], [ %3622, %.cont.cont.i ]
  %3466 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Entry, ptr undef, ptr undef, i32 undef }, ptr %.sroa.speculated352.i2129, 1
  %3467 = insertvalue { ptr, ptr, ptr, i32 } %3466, ptr %.sroa.speculated346.i2131, 2
  %3468 = insertvalue { ptr, ptr, ptr, i32 } %3467, i32 %offset.i.i260.i2133, 3
  %3469 = sext i32 %offset.i.i260.i2133 to i64
  %gep2127 = getelementptr ptr, ptr getelementptr inbounds (i8, ptr @Entry, i64 64), i64 %3469
  %3470 = load ptr, ptr %gep2127, align 8
  %3471 = call ptr %3470({ ptr, ptr, ptr, i32 } %3468, ptr nonnull %2)
  %3472 = call i32 %3471({ ptr, ptr, ptr, i32 } %3468, { ptr, ptr, ptr, i32 } %3468, ptr nonnull %2)
  %3473 = icmp eq i32 %.reg2mem195.0678.i, 1
  %3474 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br i1 %3473, label %3475, label %3539

3475:                                             ; preds = %3465
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %3476 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3477 = load ptr, ptr %328, align 8
  %3478 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3477, 0
  %3479 = load ptr, ptr %329, align 8
  %3480 = insertvalue { ptr, ptr, ptr, i32 } %3478, ptr %3479, 1
  %3481 = load ptr, ptr %330, align 8
  %3482 = insertvalue { ptr, ptr, ptr, i32 } %3480, ptr %3481, 2
  %3483 = load i32, ptr %331, align 4
  %3484 = insertvalue { ptr, ptr, ptr, i32 } %3482, i32 %3483, 3
  %hash_coef_ptr.i.i10.i3052 = getelementptr i8, ptr %3477, i64 8
  %tbl_size_ptr.i.i11.i3053 = getelementptr i8, ptr %3477, i64 16
  %offset_tbl_ptr.i.i12.i3054 = getelementptr i8, ptr %3477, i64 40
  %hash_coef.i.i13.i3055 = load i64, ptr %hash_coef_ptr.i.i10.i3052, align 4
  %tbl_size.i.i14.i3056 = load i64, ptr %tbl_size_ptr.i.i11.i3053, align 4
  %offset_tbl.i.i15.i3057 = load ptr, ptr %offset_tbl_ptr.i.i12.i3054, align 8
  %product.i.i.i16.i3058 = mul i64 %hash_coef.i.i13.i3055, -5261542750394134544
  %shifted.i.i.i17.i3059 = lshr i64 %product.i.i.i16.i3058, 32
  %xored.i.i.i18.i3060 = xor i64 %shifted.i.i.i17.i3059, %product.i.i.i16.i3058
  %hash.i.i.i19.i3061 = and i64 %xored.i.i.i18.i3060, %tbl_size.i.i14.i3056
  %offset_ptr.i.i20.i3062 = getelementptr i32, ptr %offset_tbl.i.i15.i3057, i64 %hash.i.i.i19.i3061
  %offset.i.i21.i3063 = load i32, ptr %offset_ptr.i.i20.i3062, align 4
  %eq.i.i3064 = icmp eq i32 %3483, %offset.i.i21.i3063
  call void @llvm.assume(i1 %eq.i.i3064) #30
  %3485 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %3486 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3477)
  %3487 = sext i32 %3483 to i64
  %3488 = getelementptr ptr, ptr %3477, i64 %3487
  %3489 = getelementptr i8, ptr %3488, i64 64
  %3490 = load ptr, ptr %3489, align 8
  %3491 = call ptr %3490({ ptr, ptr, ptr, i32 } %3484, ptr nonnull %2)
  %3492 = call i32 %3491({ ptr, ptr, ptr, i32 } %3484, { ptr, ptr, ptr, i32 } %3484, ptr nonnull %2)
  %3493 = add i32 %3492, -1
  %3494 = and i32 %3493, %3472
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %3495 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3496 = load ptr, ptr %328, align 8
  %3497 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3496, 0
  %3498 = load ptr, ptr %329, align 8
  %3499 = insertvalue { ptr, ptr, ptr, i32 } %3497, ptr %3498, 1
  %3500 = load ptr, ptr %330, align 8
  %3501 = insertvalue { ptr, ptr, ptr, i32 } %3499, ptr %3500, 2
  %3502 = load i32, ptr %331, align 4
  %3503 = insertvalue { ptr, ptr, ptr, i32 } %3501, i32 %3502, 3
  %hash_coef_ptr.i.i172.i = getelementptr i8, ptr %3496, i64 8
  %tbl_size_ptr.i.i173.i = getelementptr i8, ptr %3496, i64 16
  %offset_tbl_ptr.i.i174.i = getelementptr i8, ptr %3496, i64 40
  %hash_coef.i.i175.i = load i64, ptr %hash_coef_ptr.i.i172.i, align 4
  %tbl_size.i.i176.i = load i64, ptr %tbl_size_ptr.i.i173.i, align 4
  %offset_tbl.i.i177.i = load ptr, ptr %offset_tbl_ptr.i.i174.i, align 8
  %product.i.i.i178.i = mul i64 %hash_coef.i.i175.i, -5261542750394134544
  %shifted.i.i.i179.i = lshr i64 %product.i.i.i178.i, 32
  %xored.i.i.i180.i = xor i64 %shifted.i.i.i179.i, %product.i.i.i178.i
  %hash.i.i.i181.i = and i64 %xored.i.i.i180.i, %tbl_size.i.i176.i
  %offset_ptr.i.i182.i = getelementptr i32, ptr %offset_tbl.i.i177.i, i64 %hash.i.i.i181.i
  %offset.i.i183.i = load i32, ptr %offset_ptr.i.i182.i, align 4
  %eq.i.i1510 = icmp eq i32 %3502, %offset.i.i183.i
  call void @llvm.assume(i1 %eq.i.i1510) #30
  store ptr @_parameterization_Ptri32, ptr %214, align 8
  %3504 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %214)
  %3505 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3496)
  %3506 = sext i32 %3502 to i64
  %3507 = getelementptr ptr, ptr %3496, i64 %3506
  %3508 = getelementptr i8, ptr %3507, i64 120
  %3509 = load ptr, ptr %3508, align 8
  store ptr @i32_typ, ptr %215, align 8
  %3510 = call ptr %3509({ ptr, ptr, ptr, i32 } %3503, ptr nonnull %215)
  %3511 = call { ptr, i160 } %3510({ ptr, ptr, ptr, i32 } %3503, { ptr, ptr, ptr, i32 } %3503, ptr nonnull %214, i32 %3494)
  %.fca.0.extract112.i = extractvalue { ptr, i160 } %3511, 0
  %3512 = ptrtoint ptr %.sroa.speculated352.i2129 to i64
  %3513 = ptrtoint ptr %.sroa.speculated346.i2131 to i64
  %.sroa.3111.0.insert.ext.i = zext i32 %offset.i.i260.i2133 to i160
  %.sroa.3111.0.insert.shift.i = shl nuw i160 %.sroa.3111.0.insert.ext.i, 128
  %.sroa.2110.0.insert.ext.i = zext i64 %3513 to i160
  %.sroa.2110.0.insert.shift.i = shl nuw nsw i160 %.sroa.2110.0.insert.ext.i, 64
  %.sroa.2110.0.insert.insert.i = or disjoint i160 %.sroa.2110.0.insert.shift.i, %.sroa.3111.0.insert.shift.i
  %.sroa.0109.0.insert.ext.i = zext i64 %3512 to i160
  %.sroa.0109.0.insert.insert.i = or disjoint i160 %.sroa.2110.0.insert.insert.i, %.sroa.0109.0.insert.ext.i
  %3514 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0109.0.insert.insert.i, 1
  %3515 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3516 = load ptr, ptr %328, align 8
  %3517 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3516, 0
  %3518 = load ptr, ptr %329, align 8
  %3519 = insertvalue { ptr, ptr, ptr, i32 } %3517, ptr %3518, 1
  %3520 = load ptr, ptr %330, align 8
  %3521 = insertvalue { ptr, ptr, ptr, i32 } %3519, ptr %3520, 2
  %3522 = load i32, ptr %331, align 4
  %3523 = insertvalue { ptr, ptr, ptr, i32 } %3521, i32 %3522, 3
  %hash_coef_ptr.i.i186.i = getelementptr i8, ptr %3516, i64 8
  %tbl_size_ptr.i.i187.i = getelementptr i8, ptr %3516, i64 16
  %offset_tbl_ptr.i.i188.i = getelementptr i8, ptr %3516, i64 40
  %hash_coef.i.i189.i = load i64, ptr %hash_coef_ptr.i.i186.i, align 4
  %tbl_size.i.i190.i = load i64, ptr %tbl_size_ptr.i.i187.i, align 4
  %offset_tbl.i.i191.i = load ptr, ptr %offset_tbl_ptr.i.i188.i, align 8
  %product.i.i.i192.i = mul i64 %hash_coef.i.i189.i, -5261542750394134544
  %shifted.i.i.i193.i = lshr i64 %product.i.i.i192.i, 32
  %xored.i.i.i194.i = xor i64 %shifted.i.i.i193.i, %product.i.i.i192.i
  %hash.i.i.i195.i = and i64 %xored.i.i.i194.i, %tbl_size.i.i190.i
  %offset_ptr.i.i196.i = getelementptr i32, ptr %offset_tbl.i.i191.i, i64 %hash.i.i.i195.i
  %offset.i.i197.i = load i32, ptr %offset_ptr.i.i196.i, align 4
  %eq.i200.i = icmp eq i32 %3522, %offset.i.i197.i
  call void @llvm.assume(i1 %eq.i200.i) #30
  %3524 = load ptr, ptr %result.i136, align 8
  %3525 = load ptr, ptr %311, align 8
  %result.i.i1511 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3526 = getelementptr i8, ptr %result.i.i1511, i64 16
  store ptr %3525, ptr %3526, align 8
  %3527 = getelementptr i8, ptr %result.i.i1511, i64 8
  store ptr %3524, ptr %3527, align 8
  %3528 = getelementptr i8, ptr %result.i.i1511, i64 24
  store ptr null, ptr %3528, align 8
  %3529 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i1511)
  store ptr @Entry, ptr %result.i.i1511, align 8
  store ptr @_parameterization_Ptri32, ptr %216, align 8
  store ptr %result.i.i1511, ptr %397, align 8
  %3530 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %216)
  %3531 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3516)
  %3532 = sext i32 %3522 to i64
  %3533 = getelementptr ptr, ptr %3516, i64 %3532
  %3534 = getelementptr i8, ptr %3533, i64 128
  %3535 = load ptr, ptr %3534, align 8
  store ptr @i32_typ, ptr %217, align 8
  store ptr @Entry, ptr %398, align 8
  %3536 = call ptr %3535({ ptr, ptr, ptr, i32 } %3523, ptr nonnull %217)
  call void %3536({ ptr, ptr, ptr, i32 } %3523, { ptr, ptr, ptr, i32 } %3523, ptr nonnull %216, i32 %3494, { ptr, i160 } %3514)
  %3537 = icmp ne ptr %.fca.0.extract112.i, @nil_typ
  %3538 = icmp ne ptr %.fca.0.extract112.i, null
  %.not140.i = and i1 %3537, %3538
  br i1 %.not140.i, label %.cont.cont.i, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit.thread

3539:                                             ; preds = %3465
  %3540 = add i32 %3472, 2127912214
  %3541 = shl i32 %3472, 12
  %3542 = add i32 %3540, %3541
  %3543 = ashr i32 %3542, 19
  %3544 = xor i32 %3542, %3543
  %3545 = xor i32 %3544, -949894596
  %3546 = add i32 %3545, 374761393
  %3547 = shl i32 %3545, 5
  %3548 = add i32 %3546, %3547
  %3549 = add i32 %3548, -744332180
  %3550 = shl i32 %3548, 9
  %3551 = xor i32 %3549, %3550
  %3552 = add i32 %3551, -42973499
  %3553 = shl i32 %3551, 3
  %3554 = add i32 %3552, %3553
  %3555 = ashr i32 %3554, 16
  %3556 = xor i32 %3554, %3555
  %3557 = xor i32 %3556, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %3558 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3559 = load ptr, ptr %345, align 8
  %3560 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3559, 0
  %3561 = load ptr, ptr %346, align 8
  %3562 = insertvalue { ptr, ptr, ptr, i32 } %3560, ptr %3561, 1
  %3563 = load ptr, ptr %347, align 8
  %3564 = insertvalue { ptr, ptr, ptr, i32 } %3562, ptr %3563, 2
  %3565 = load i32, ptr %348, align 4
  %3566 = insertvalue { ptr, ptr, ptr, i32 } %3564, i32 %3565, 3
  %hash_coef_ptr.i.i10.i3082 = getelementptr i8, ptr %3559, i64 8
  %tbl_size_ptr.i.i11.i3083 = getelementptr i8, ptr %3559, i64 16
  %offset_tbl_ptr.i.i12.i3084 = getelementptr i8, ptr %3559, i64 40
  %hash_coef.i.i13.i3085 = load i64, ptr %hash_coef_ptr.i.i10.i3082, align 4
  %tbl_size.i.i14.i3086 = load i64, ptr %tbl_size_ptr.i.i11.i3083, align 4
  %offset_tbl.i.i15.i3087 = load ptr, ptr %offset_tbl_ptr.i.i12.i3084, align 8
  %product.i.i.i16.i3088 = mul i64 %hash_coef.i.i13.i3085, -5261542750394134544
  %shifted.i.i.i17.i3089 = lshr i64 %product.i.i.i16.i3088, 32
  %xored.i.i.i18.i3090 = xor i64 %shifted.i.i.i17.i3089, %product.i.i.i16.i3088
  %hash.i.i.i19.i3091 = and i64 %xored.i.i.i18.i3090, %tbl_size.i.i14.i3086
  %offset_ptr.i.i20.i3092 = getelementptr i32, ptr %offset_tbl.i.i15.i3087, i64 %hash.i.i.i19.i3091
  %offset.i.i21.i3093 = load i32, ptr %offset_ptr.i.i20.i3092, align 4
  %eq.i.i3094 = icmp eq i32 %3565, %offset.i.i21.i3093
  call void @llvm.assume(i1 %eq.i.i3094) #30
  %3567 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %3568 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3559)
  %3569 = sext i32 %3565 to i64
  %3570 = getelementptr ptr, ptr %3559, i64 %3569
  %3571 = getelementptr i8, ptr %3570, i64 64
  %3572 = load ptr, ptr %3571, align 8
  %3573 = call ptr %3572({ ptr, ptr, ptr, i32 } %3566, ptr nonnull %2)
  %3574 = call i32 %3573({ ptr, ptr, ptr, i32 } %3566, { ptr, ptr, ptr, i32 } %3566, ptr nonnull %2)
  %3575 = add i32 %3574, -1
  %3576 = and i32 %3575, %3557
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %3577 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3578 = load ptr, ptr %345, align 8
  %3579 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3578, 0
  %3580 = load ptr, ptr %346, align 8
  %3581 = insertvalue { ptr, ptr, ptr, i32 } %3579, ptr %3580, 1
  %3582 = load ptr, ptr %347, align 8
  %3583 = insertvalue { ptr, ptr, ptr, i32 } %3581, ptr %3582, 2
  %3584 = load i32, ptr %348, align 4
  %3585 = insertvalue { ptr, ptr, ptr, i32 } %3583, i32 %3584, 3
  %hash_coef_ptr.i.i202.i1497 = getelementptr i8, ptr %3578, i64 8
  %tbl_size_ptr.i.i203.i1498 = getelementptr i8, ptr %3578, i64 16
  %offset_tbl_ptr.i.i204.i1499 = getelementptr i8, ptr %3578, i64 40
  %hash_coef.i.i205.i1500 = load i64, ptr %hash_coef_ptr.i.i202.i1497, align 4
  %tbl_size.i.i206.i1501 = load i64, ptr %tbl_size_ptr.i.i203.i1498, align 4
  %offset_tbl.i.i207.i1502 = load ptr, ptr %offset_tbl_ptr.i.i204.i1499, align 8
  %product.i.i.i208.i1503 = mul i64 %hash_coef.i.i205.i1500, -5261542750394134544
  %shifted.i.i.i209.i1504 = lshr i64 %product.i.i.i208.i1503, 32
  %xored.i.i.i210.i1505 = xor i64 %shifted.i.i.i209.i1504, %product.i.i.i208.i1503
  %hash.i.i.i211.i1506 = and i64 %xored.i.i.i210.i1505, %tbl_size.i.i206.i1501
  %offset_ptr.i.i212.i1507 = getelementptr i32, ptr %offset_tbl.i.i207.i1502, i64 %hash.i.i.i211.i1506
  %offset.i.i213.i1508 = load i32, ptr %offset_ptr.i.i212.i1507, align 4
  %eq.i216.i1509 = icmp eq i32 %3584, %offset.i.i213.i1508
  call void @llvm.assume(i1 %eq.i216.i1509) #30
  store ptr @_parameterization_Ptri32, ptr %222, align 8
  %3586 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %222)
  %3587 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3578)
  %3588 = sext i32 %3584 to i64
  %3589 = getelementptr ptr, ptr %3578, i64 %3588
  %3590 = getelementptr i8, ptr %3589, i64 120
  %3591 = load ptr, ptr %3590, align 8
  store ptr @i32_typ, ptr %223, align 8
  %3592 = call ptr %3591({ ptr, ptr, ptr, i32 } %3585, ptr nonnull %223)
  %3593 = call { ptr, i160 } %3592({ ptr, ptr, ptr, i32 } %3585, { ptr, ptr, ptr, i32 } %3585, ptr nonnull %222, i32 %3576)
  %.fca.0.extract87.i = extractvalue { ptr, i160 } %3593, 0
  %3594 = ptrtoint ptr %.sroa.speculated352.i2129 to i64
  %3595 = ptrtoint ptr %.sroa.speculated346.i2131 to i64
  %.sroa.3.0.insert.ext.i = zext i32 %offset.i.i260.i2133 to i160
  %.sroa.3.0.insert.shift.i = shl nuw i160 %.sroa.3.0.insert.ext.i, 128
  %.sroa.2.0.insert.ext.i = zext i64 %3595 to i160
  %.sroa.2.0.insert.shift.i = shl nuw nsw i160 %.sroa.2.0.insert.ext.i, 64
  %.sroa.2.0.insert.insert.i = or disjoint i160 %.sroa.2.0.insert.shift.i, %.sroa.3.0.insert.shift.i
  %.sroa.0.0.insert.ext.i = zext i64 %3594 to i160
  %.sroa.0.0.insert.insert.i = or disjoint i160 %.sroa.2.0.insert.insert.i, %.sroa.0.0.insert.ext.i
  %3596 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0.0.insert.insert.i, 1
  %3597 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3598 = load ptr, ptr %345, align 8
  %3599 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3598, 0
  %3600 = load ptr, ptr %346, align 8
  %3601 = insertvalue { ptr, ptr, ptr, i32 } %3599, ptr %3600, 1
  %3602 = load ptr, ptr %347, align 8
  %3603 = insertvalue { ptr, ptr, ptr, i32 } %3601, ptr %3602, 2
  %3604 = load i32, ptr %348, align 4
  %3605 = insertvalue { ptr, ptr, ptr, i32 } %3603, i32 %3604, 3
  %hash_coef_ptr.i.i218.i = getelementptr i8, ptr %3598, i64 8
  %tbl_size_ptr.i.i219.i = getelementptr i8, ptr %3598, i64 16
  %offset_tbl_ptr.i.i220.i = getelementptr i8, ptr %3598, i64 40
  %hash_coef.i.i221.i = load i64, ptr %hash_coef_ptr.i.i218.i, align 4
  %tbl_size.i.i222.i = load i64, ptr %tbl_size_ptr.i.i219.i, align 4
  %offset_tbl.i.i223.i = load ptr, ptr %offset_tbl_ptr.i.i220.i, align 8
  %product.i.i.i224.i = mul i64 %hash_coef.i.i221.i, -5261542750394134544
  %shifted.i.i.i225.i = lshr i64 %product.i.i.i224.i, 32
  %xored.i.i.i226.i = xor i64 %shifted.i.i.i225.i, %product.i.i.i224.i
  %hash.i.i.i227.i = and i64 %xored.i.i.i226.i, %tbl_size.i.i222.i
  %offset_ptr.i.i228.i = getelementptr i32, ptr %offset_tbl.i.i223.i, i64 %hash.i.i.i227.i
  %offset.i.i229.i = load i32, ptr %offset_ptr.i.i228.i, align 4
  %eq.i232.i = icmp eq i32 %3604, %offset.i.i229.i
  call void @llvm.assume(i1 %eq.i232.i) #30
  %3606 = load ptr, ptr %result.i136, align 8
  %3607 = load ptr, ptr %311, align 8
  %result.i233.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3608 = getelementptr i8, ptr %result.i233.i, i64 16
  store ptr %3607, ptr %3608, align 8
  %3609 = getelementptr i8, ptr %result.i233.i, i64 8
  store ptr %3606, ptr %3609, align 8
  %3610 = getelementptr i8, ptr %result.i233.i, i64 24
  store ptr null, ptr %3610, align 8
  %3611 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i233.i)
  store ptr @Entry, ptr %result.i233.i, align 8
  store ptr @_parameterization_Ptri32, ptr %224, align 8
  store ptr %result.i233.i, ptr %395, align 8
  %3612 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %224)
  %3613 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3598)
  %3614 = sext i32 %3604 to i64
  %3615 = getelementptr ptr, ptr %3598, i64 %3614
  %3616 = getelementptr i8, ptr %3615, i64 128
  %3617 = load ptr, ptr %3616, align 8
  store ptr @i32_typ, ptr %225, align 8
  store ptr @Entry, ptr %396, align 8
  %3618 = call ptr %3617({ ptr, ptr, ptr, i32 } %3605, ptr nonnull %225)
  call void %3618({ ptr, ptr, ptr, i32 } %3605, { ptr, ptr, ptr, i32 } %3605, ptr nonnull %224, i32 %3576, { ptr, i160 } %3596)
  %3619 = icmp ne ptr %.fca.0.extract87.i, @nil_typ
  %3620 = icmp ne ptr %.fca.0.extract87.i, null
  %.not138.i = and i1 %3619, %3620
  br i1 %.not138.i, label %.cont.cont.i, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit.thread

.cont.cont.i:                                     ; preds = %3539, %3475
  %.sink = phi { ptr, i160 } [ %3511, %3475 ], [ %3593, %3539 ]
  %3621 = phi i32 [ 2, %3475 ], [ 1, %3539 ]
  %vptr.i248.sroa.speculated.i = phi ptr [ %.fca.0.extract112.i, %3475 ], [ %.fca.0.extract87.i, %3539 ]
  %.fca.1.extract89.i = extractvalue { ptr, i160 } %.sink, 1
  %.sroa.3407.sroa.4.0.extract.shift.i = lshr i160 %.fca.1.extract89.i, 64
  %.sroa.3407.sroa.4.0.extract.trunc.i = trunc i160 %.sroa.3407.sroa.4.0.extract.shift.i to i64
  %.sroa.3407.sroa.0.0.extract.trunc.i = trunc i160 %.fca.1.extract89.i to i64
  %.sroa.speculated352.i = inttoptr i64 %.sroa.3407.sroa.0.0.extract.trunc.i to ptr
  %.sroa.speculated346.i = inttoptr i64 %.sroa.3407.sroa.4.0.extract.trunc.i to ptr
  %hash_coef_ptr.i.i249.i = getelementptr i8, ptr %vptr.i248.sroa.speculated.i, i64 8
  %tbl_size_ptr.i.i250.i = getelementptr i8, ptr %vptr.i248.sroa.speculated.i, i64 16
  %offset_tbl_ptr.i.i251.i = getelementptr i8, ptr %vptr.i248.sroa.speculated.i, i64 40
  %hash_coef.i.i252.i = load i64, ptr %hash_coef_ptr.i.i249.i, align 4
  %tbl_size.i.i253.i = load i64, ptr %tbl_size_ptr.i.i250.i, align 4
  %offset_tbl.i.i254.i = load ptr, ptr %offset_tbl_ptr.i.i251.i, align 8
  %product.i.i.i255.i = mul i64 %hash_coef.i.i252.i, 4015701072841558310
  %shifted.i.i.i256.i = lshr i64 %product.i.i.i255.i, 32
  %xored.i.i.i257.i = xor i64 %shifted.i.i.i256.i, %product.i.i.i255.i
  %hash.i.i.i258.i = and i64 %xored.i.i.i257.i, %tbl_size.i.i253.i
  %offset_ptr.i.i259.i = getelementptr i32, ptr %offset_tbl.i.i254.i, i64 %hash.i.i.i258.i
  %offset.i.i260.i = load i32, ptr %offset_ptr.i.i259.i, align 4
  store ptr %vptr.i248.sroa.speculated.i, ptr %230, align 8
  store ptr %.sroa.speculated352.i, ptr %392, align 8
  store ptr %.sroa.speculated346.i, ptr %393, align 8
  store i32 %offset.i.i260.i, ptr %394, align 8
  %3622 = add nuw nsw i32 %.reg2mem193.0677.i, 1
  %3623 = load i32, ptr %351, align 4
  %3624 = icmp slt i32 %3622, %3623
  br i1 %3624, label %3465, label %._crit_edge3.i

HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit.thread: ; preds = %3475, %3539
  %3625 = phi ptr [ %226, %3539 ], [ %218, %3475 ]
  %3626 = phi ptr [ %227, %3539 ], [ %219, %3475 ]
  %3627 = phi ptr [ %228, %3539 ], [ %220, %3475 ]
  %3628 = phi ptr [ %.sroa.0.i1468, %3539 ], [ %.sroa.0680.i, %3475 ]
  %3629 = phi ptr [ %229, %3539 ], [ %221, %3475 ]
  %3630 = load i32, ptr %349, align 4
  store i32 %3630, ptr %3625, align 4
  store i32 1, ptr %3626, align 4
  %3631 = add i32 %3630, 1
  store i32 %3631, ptr %3627, align 4
  %3632 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  store i32 %3631, ptr %349, align 4
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %3629, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %3628, align 8
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %214)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %215)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %216)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %217)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %218)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %219)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %220)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %221)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %222)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %223)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %224)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %225)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %226)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %227)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %228)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i1468)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %229)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %230)
  br label %HashMap_insert_keyK_valueV.exit

._crit_edge3.i:                                   ; preds = %.cont.cont.i, %._crit_edge2.i
  %3633 = load i160, ptr %392, align 8
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %214)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %215)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %216)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %217)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %218)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %219)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %220)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %221)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %222)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %223)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %224)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %225)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %226)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %227)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %228)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i1468)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %229)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %230)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %212)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %213)
  %3634 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3635 = load ptr, ptr %328, align 8
  %3636 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3635, 0
  %3637 = load ptr, ptr %329, align 8
  %3638 = insertvalue { ptr, ptr, ptr, i32 } %3636, ptr %3637, 1
  %3639 = load ptr, ptr %330, align 8
  %3640 = insertvalue { ptr, ptr, ptr, i32 } %3638, ptr %3639, 2
  %3641 = load i32, ptr %331, align 4
  %3642 = insertvalue { ptr, ptr, ptr, i32 } %3640, i32 %3641, 3
  %hash_coef_ptr.i.i18.i1532 = getelementptr i8, ptr %3635, i64 8
  %tbl_size_ptr.i.i19.i1533 = getelementptr i8, ptr %3635, i64 16
  %offset_tbl_ptr.i.i20.i1534 = getelementptr i8, ptr %3635, i64 40
  %hash_coef.i.i21.i1535 = load i64, ptr %hash_coef_ptr.i.i18.i1532, align 4
  %tbl_size.i.i22.i1536 = load i64, ptr %tbl_size_ptr.i.i19.i1533, align 4
  %offset_tbl.i.i23.i1537 = load ptr, ptr %offset_tbl_ptr.i.i20.i1534, align 8
  %product.i.i.i24.i1538 = mul i64 %hash_coef.i.i21.i1535, -5261542750394134544
  %shifted.i.i.i25.i1539 = lshr i64 %product.i.i.i24.i1538, 32
  %xored.i.i.i26.i1540 = xor i64 %shifted.i.i.i25.i1539, %product.i.i.i24.i1538
  %hash.i.i.i27.i1541 = and i64 %xored.i.i.i26.i1540, %tbl_size.i.i22.i1536
  %offset_ptr.i.i28.i1542 = getelementptr i32, ptr %offset_tbl.i.i23.i1537, i64 %hash.i.i.i27.i1541
  %offset.i.i29.i1543 = load i32, ptr %offset_ptr.i.i28.i1542, align 4
  %eq.i.i1544 = icmp eq i32 %3641, %offset.i.i29.i1543
  call void @llvm.assume(i1 %eq.i.i1544) #30
  %3643 = load ptr, ptr %345, align 8
  %3644 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3643, 0
  %3645 = load ptr, ptr %346, align 8
  %3646 = insertvalue { ptr, ptr, ptr, i32 } %3644, ptr %3645, 1
  %3647 = load ptr, ptr %347, align 8
  %3648 = insertvalue { ptr, ptr, ptr, i32 } %3646, ptr %3647, 2
  %3649 = load i32, ptr %348, align 4
  %hash_coef_ptr.i.i46.i1549 = getelementptr i8, ptr %3643, i64 8
  %tbl_size_ptr.i.i47.i1550 = getelementptr i8, ptr %3643, i64 16
  %offset_tbl_ptr.i.i48.i1551 = getelementptr i8, ptr %3643, i64 40
  %hash_coef.i.i49.i1552 = load i64, ptr %hash_coef_ptr.i.i46.i1549, align 4
  %tbl_size.i.i50.i1553 = load i64, ptr %tbl_size_ptr.i.i47.i1550, align 4
  %offset_tbl.i.i51.i1554 = load ptr, ptr %offset_tbl_ptr.i.i48.i1551, align 8
  %product.i.i.i52.i1555 = mul i64 %hash_coef.i.i49.i1552, -5261542750394134544
  %shifted.i.i.i53.i1556 = lshr i64 %product.i.i.i52.i1555, 32
  %xored.i.i.i54.i1557 = xor i64 %shifted.i.i.i53.i1556, %product.i.i.i52.i1555
  %hash.i.i.i55.i1558 = and i64 %xored.i.i.i54.i1557, %tbl_size.i.i50.i1553
  %offset_ptr.i.i56.i1559 = getelementptr i32, ptr %offset_tbl.i.i51.i1554, i64 %hash.i.i.i55.i1558
  %offset.i.i57.i1560 = load i32, ptr %offset_ptr.i.i56.i1559, align 4
  %eq.i60.i1561 = icmp eq i32 %3649, %offset.i.i57.i1560
  call void @llvm.assume(i1 %eq.i60.i1561) #30
  %3650 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %3651 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3635)
  %3652 = sext i32 %3641 to i64
  %3653 = getelementptr ptr, ptr %3635, i64 %3652
  %3654 = getelementptr i8, ptr %3653, i64 64
  %3655 = load ptr, ptr %3654, align 8
  %3656 = call ptr %3655({ ptr, ptr, ptr, i32 } %3642, ptr nonnull %2)
  %3657 = call i32 %3656({ ptr, ptr, ptr, i32 } %3642, { ptr, ptr, ptr, i32 } %3642, ptr nonnull %2)
  %3658 = shl i32 %3657, 1
  %3659 = call i32 @llvm.smax.i32(i32 %3658, i32 16)
  %3660 = load ptr, ptr %result.i136, align 8
  %3661 = load ptr, ptr %311, align 8
  %result.i.i1562 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3662 = getelementptr i8, ptr %result.i.i1562, i64 16
  store ptr @_parameterization_Nil, ptr %3662, align 8
  %result.i75.i1563 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3663 = getelementptr i8, ptr %result.i75.i1563, i64 16
  store ptr %3661, ptr %3663, align 8
  %3664 = getelementptr i8, ptr %result.i75.i1563, i64 8
  store ptr %3660, ptr %3664, align 8
  %3665 = getelementptr i8, ptr %result.i75.i1563, i64 24
  store ptr null, ptr %3665, align 8
  %3666 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i75.i1563)
  store ptr @Entry, ptr %result.i75.i1563, align 8
  %3667 = getelementptr i8, ptr %result.i.i1562, i64 8
  store ptr %result.i75.i1563, ptr %3667, align 8
  %3668 = getelementptr i8, ptr %result.i.i1562, i64 24
  store ptr null, ptr %3668, align 8
  %3669 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i1562)
  store ptr @union_typ, ptr %result.i.i1562, align 8
  %result.i76.i1564 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i1562, ptr %result.i76.i1564, align 8
  %3670 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i76.i1564)
  store ptr @Array, ptr %212, align 8
  store ptr %result.i76.i1564, ptr %399, align 8
  store i32 9, ptr %400, align 8
  %3671 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %212)
  %3672 = getelementptr i8, ptr %result.i76.i1564, i64 16
  store i32 %3659, ptr %3672, align 4
  %3673 = getelementptr i8, ptr %result.i76.i1564, i64 20
  store i32 %3659, ptr %3673, align 4
  %3674 = zext nneg i32 %3659 to i64
  %3675 = shl nuw nsw i64 %3674, 5
  %result.i.i.i1565 = call noalias ptr @bump_malloc_inner(i64 noundef %3675, ptr nonnull @current_ptr) #29
  %3676 = getelementptr i8, ptr %result.i76.i1564, i64 8
  store ptr %result.i.i.i1565, ptr %3676, align 8
  %3677 = load ptr, ptr %401, align 8
  store ptr @Array, ptr %328, align 8
  store ptr %result.i76.i1564, ptr %329, align 8
  store ptr %3677, ptr %330, align 8
  store i32 9, ptr %331, align 4
  %result.i91.i1578 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3678 = getelementptr i8, ptr %result.i91.i1578, i64 16
  store ptr @_parameterization_Nil, ptr %3678, align 8
  %result.i92.i1579 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3679 = getelementptr i8, ptr %result.i92.i1579, i64 16
  store ptr %3661, ptr %3679, align 8
  %3680 = getelementptr i8, ptr %result.i92.i1579, i64 8
  store ptr %3660, ptr %3680, align 8
  %3681 = getelementptr i8, ptr %result.i92.i1579, i64 24
  store ptr null, ptr %3681, align 8
  %3682 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i92.i1579)
  store ptr @Entry, ptr %result.i92.i1579, align 8
  %3683 = getelementptr i8, ptr %result.i91.i1578, i64 8
  store ptr %result.i92.i1579, ptr %3683, align 8
  %3684 = getelementptr i8, ptr %result.i91.i1578, i64 24
  store ptr null, ptr %3684, align 8
  %3685 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i91.i1578)
  store ptr @union_typ, ptr %result.i91.i1578, align 8
  %result.i93.i1580 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i91.i1578, ptr %result.i93.i1580, align 8
  %3686 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i93.i1580)
  store ptr @Array, ptr %213, align 8
  store ptr %result.i93.i1580, ptr %402, align 8
  store i32 9, ptr %403, align 8
  %3687 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %213)
  %3688 = getelementptr i8, ptr %result.i93.i1580, i64 16
  store i32 %3659, ptr %3688, align 4
  %3689 = getelementptr i8, ptr %result.i93.i1580, i64 20
  store i32 %3659, ptr %3689, align 4
  %result.i.i234.i1581 = call noalias ptr @bump_malloc_inner(i64 noundef %3675, ptr nonnull @current_ptr) #29
  %3690 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %3691 = getelementptr i8, ptr %result.i93.i1580, i64 8
  store ptr %result.i.i234.i1581, ptr %3691, align 8
  %3692 = load ptr, ptr %404, align 8
  store ptr @Array, ptr %345, align 8
  store ptr %result.i93.i1580, ptr %346, align 8
  store ptr %3692, ptr %347, align 8
  store i32 9, ptr %348, align 4
  store i32 0, ptr %349, align 4
  %3693 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %149)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %150)
  %3694 = icmp sgt i32 %3657, 0
  br i1 %3694, label %.lr.ph.i3097, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3200.critedge

.lr.ph.i3097:                                     ; preds = %._crit_edge3.i
  %invariant.gep.i3098 = getelementptr i8, ptr %3635, i64 120
  %offset_tbl.i.i24.i3100 = load ptr, ptr %offset_tbl_ptr.i.i20.i1534, align 8
  %hash_coef.i.i22.i3102 = load i64, ptr %hash_coef_ptr.i.i18.i1532, align 4
  %product.i.i.i25.i3103 = mul i64 %hash_coef.i.i22.i3102, -5261542750394134544
  %shifted.i.i.i26.i3104 = lshr i64 %product.i.i.i25.i3103, 32
  %xored.i.i.i27.i3105 = xor i64 %shifted.i.i.i26.i3104, %product.i.i.i25.i3103
  %tbl_size.i.i23.i3107 = load i64, ptr %tbl_size_ptr.i.i19.i1533, align 4
  %hash.i.i.i28.i3108 = and i64 %xored.i.i.i27.i3105, %tbl_size.i.i23.i3107
  %offset_ptr.i.i29.i3109 = getelementptr i32, ptr %offset_tbl.i.i24.i3100, i64 %hash.i.i.i28.i3108
  %offset.i.i30.i3110 = load i32, ptr %offset_ptr.i.i29.i3109, align 4
  %3695 = insertvalue { ptr, ptr, ptr, i32 } %3640, i32 %offset.i.i30.i3110, 3
  %3696 = sext i32 %offset.i.i30.i3110 to i64
  %gep.i3125 = getelementptr ptr, ptr %invariant.gep.i3098, i64 %3696
  %3697 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %3698

3698:                                             ; preds = %._crit_edge1.i3129, %.lr.ph.i3097
  %.reg2mem13.079.i3126 = phi i32 [ 0, %.lr.ph.i3097 ], [ %3715, %._crit_edge1.i3129 ]
  store ptr @_parameterization_Ptri32, ptr %149, align 8
  %3699 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %149)
  %3700 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %3635)
  %3701 = load ptr, ptr %gep.i3125, align 8
  store ptr @i32_typ, ptr %150, align 8
  %3702 = call ptr %3701({ ptr, ptr, ptr, i32 } %3695, ptr nonnull %150)
  %3703 = call { ptr, i160 } %3702({ ptr, ptr, ptr, i32 } %3695, { ptr, ptr, ptr, i32 } %3695, ptr nonnull %149, i32 %.reg2mem13.079.i3126)
  %.fca.0.extract11.i3127 = extractvalue { ptr, i160 } %3703, 0
  %3704 = icmp ne ptr %.fca.0.extract11.i3127, @nil_typ
  %3705 = icmp ne ptr %.fca.0.extract11.i3127, null
  %.not17.i3128 = and i1 %3704, %3705
  br i1 %.not17.i3128, label %3706, label %._crit_edge1.i3129

3706:                                             ; preds = %3698
  %.fca.1.extract13.i3130 = extractvalue { ptr, i160 } %3703, 1
  %.sroa.375.8.extract.trunc.i3131 = trunc i160 %.fca.1.extract13.i3130 to i64
  %3707 = inttoptr i64 %.sroa.375.8.extract.trunc.i3131 to ptr
  %.sroa.576.8.extract.shift.i3132 = lshr i160 %.fca.1.extract13.i3130, 64
  %.sroa.576.8.extract.trunc.i3133 = trunc i160 %.sroa.576.8.extract.shift.i3132 to i64
  %3708 = inttoptr i64 %.sroa.576.8.extract.trunc.i3133 to ptr
  %hash_coef_ptr.i.i33.i3134 = getelementptr i8, ptr %.fca.0.extract11.i3127, i64 8
  %tbl_size_ptr.i.i34.i3135 = getelementptr i8, ptr %.fca.0.extract11.i3127, i64 16
  %offset_tbl_ptr.i.i35.i3136 = getelementptr i8, ptr %.fca.0.extract11.i3127, i64 40
  %hash_coef.i.i36.i3137 = load i64, ptr %hash_coef_ptr.i.i33.i3134, align 4
  %tbl_size.i.i37.i3138 = load i64, ptr %tbl_size_ptr.i.i34.i3135, align 4
  %offset_tbl.i.i38.i3139 = load ptr, ptr %offset_tbl_ptr.i.i35.i3136, align 8
  %product.i.i.i39.i3140 = mul i64 %hash_coef.i.i36.i3137, 4015701072841558310
  %shifted.i.i.i40.i3141 = lshr i64 %product.i.i.i39.i3140, 32
  %xored.i.i.i41.i3142 = xor i64 %shifted.i.i.i40.i3141, %product.i.i.i39.i3140
  %hash.i.i.i42.i3143 = and i64 %xored.i.i.i41.i3142, %tbl_size.i.i37.i3138
  %offset_ptr.i.i43.i3144 = getelementptr i32, ptr %offset_tbl.i.i38.i3139, i64 %hash.i.i.i42.i3143
  %offset.i.i58.i3145 = load i32, ptr %offset_ptr.i.i43.i3144, align 4
  %3709 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i3127, 0
  %3710 = insertvalue { ptr, ptr, ptr, i32 } %3709, ptr %3707, 1
  %3711 = insertvalue { ptr, ptr, ptr, i32 } %3710, ptr %3708, 2
  %3712 = insertvalue { ptr, ptr, ptr, i32 } %3711, i32 %offset.i.i58.i3145, 3
  %3713 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3714 = call { ptr, i160 } @HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %446, { ptr, ptr, ptr, i32 } poison, ptr nonnull poison, { ptr, ptr, ptr, i32 } %3712)
  br label %._crit_edge1.i3129

._crit_edge1.i3129:                               ; preds = %3706, %3698
  %3715 = add nuw nsw i32 %.reg2mem13.079.i3126, 1
  %3716 = icmp slt i32 %3715, %3657
  br i1 %3716, label %3698, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3147

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3147: ; preds = %._crit_edge1.i3129
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %149)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %150)
  %3717 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %147)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %148)
  %invariant.gep.i3151 = getelementptr i8, ptr %3643, i64 120
  %offset_tbl.i.i24.i3153 = load ptr, ptr %offset_tbl_ptr.i.i48.i1551, align 8
  %hash_coef.i.i22.i3155 = load i64, ptr %hash_coef_ptr.i.i46.i1549, align 4
  %product.i.i.i25.i3156 = mul i64 %hash_coef.i.i22.i3155, -5261542750394134544
  %shifted.i.i.i26.i3157 = lshr i64 %product.i.i.i25.i3156, 32
  %xored.i.i.i27.i3158 = xor i64 %shifted.i.i.i26.i3157, %product.i.i.i25.i3156
  %tbl_size.i.i23.i3160 = load i64, ptr %tbl_size_ptr.i.i47.i1550, align 4
  %hash.i.i.i28.i3161 = and i64 %xored.i.i.i27.i3158, %tbl_size.i.i23.i3160
  %offset_ptr.i.i29.i3162 = getelementptr i32, ptr %offset_tbl.i.i24.i3153, i64 %hash.i.i.i28.i3161
  %offset.i.i30.i3163 = load i32, ptr %offset_ptr.i.i29.i3162, align 4
  %3718 = insertvalue { ptr, ptr, ptr, i32 } %3648, i32 %offset.i.i30.i3163, 3
  %3719 = sext i32 %offset.i.i30.i3163 to i64
  %gep.i3178 = getelementptr ptr, ptr %invariant.gep.i3151, i64 %3719
  %3720 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %3721

3721:                                             ; preds = %._crit_edge1.i3182, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3147
  %.reg2mem13.079.i3179 = phi i32 [ 0, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3147 ], [ %3738, %._crit_edge1.i3182 ]
  store ptr @_parameterization_Ptri32, ptr %147, align 8
  %3722 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %147)
  %3723 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %3643)
  %3724 = load ptr, ptr %gep.i3178, align 8
  store ptr @i32_typ, ptr %148, align 8
  %3725 = call ptr %3724({ ptr, ptr, ptr, i32 } %3718, ptr nonnull %148)
  %3726 = call { ptr, i160 } %3725({ ptr, ptr, ptr, i32 } %3718, { ptr, ptr, ptr, i32 } %3718, ptr nonnull %147, i32 %.reg2mem13.079.i3179)
  %.fca.0.extract11.i3180 = extractvalue { ptr, i160 } %3726, 0
  %3727 = icmp ne ptr %.fca.0.extract11.i3180, @nil_typ
  %3728 = icmp ne ptr %.fca.0.extract11.i3180, null
  %.not17.i3181 = and i1 %3727, %3728
  br i1 %.not17.i3181, label %3729, label %._crit_edge1.i3182

3729:                                             ; preds = %3721
  %.fca.1.extract13.i3183 = extractvalue { ptr, i160 } %3726, 1
  %.sroa.375.8.extract.trunc.i3184 = trunc i160 %.fca.1.extract13.i3183 to i64
  %3730 = inttoptr i64 %.sroa.375.8.extract.trunc.i3184 to ptr
  %.sroa.576.8.extract.shift.i3185 = lshr i160 %.fca.1.extract13.i3183, 64
  %.sroa.576.8.extract.trunc.i3186 = trunc i160 %.sroa.576.8.extract.shift.i3185 to i64
  %3731 = inttoptr i64 %.sroa.576.8.extract.trunc.i3186 to ptr
  %hash_coef_ptr.i.i33.i3187 = getelementptr i8, ptr %.fca.0.extract11.i3180, i64 8
  %tbl_size_ptr.i.i34.i3188 = getelementptr i8, ptr %.fca.0.extract11.i3180, i64 16
  %offset_tbl_ptr.i.i35.i3189 = getelementptr i8, ptr %.fca.0.extract11.i3180, i64 40
  %hash_coef.i.i36.i3190 = load i64, ptr %hash_coef_ptr.i.i33.i3187, align 4
  %tbl_size.i.i37.i3191 = load i64, ptr %tbl_size_ptr.i.i34.i3188, align 4
  %offset_tbl.i.i38.i3192 = load ptr, ptr %offset_tbl_ptr.i.i35.i3189, align 8
  %product.i.i.i39.i3193 = mul i64 %hash_coef.i.i36.i3190, 4015701072841558310
  %shifted.i.i.i40.i3194 = lshr i64 %product.i.i.i39.i3193, 32
  %xored.i.i.i41.i3195 = xor i64 %shifted.i.i.i40.i3194, %product.i.i.i39.i3193
  %hash.i.i.i42.i3196 = and i64 %xored.i.i.i41.i3195, %tbl_size.i.i37.i3191
  %offset_ptr.i.i43.i3197 = getelementptr i32, ptr %offset_tbl.i.i38.i3192, i64 %hash.i.i.i42.i3196
  %offset.i.i58.i3198 = load i32, ptr %offset_ptr.i.i43.i3197, align 4
  %3732 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i3180, 0
  %3733 = insertvalue { ptr, ptr, ptr, i32 } %3732, ptr %3730, 1
  %3734 = insertvalue { ptr, ptr, ptr, i32 } %3733, ptr %3731, 2
  %3735 = insertvalue { ptr, ptr, ptr, i32 } %3734, i32 %offset.i.i58.i3198, 3
  %3736 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3737 = call { ptr, i160 } @HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %446, { ptr, ptr, ptr, i32 } poison, ptr nonnull poison, { ptr, ptr, ptr, i32 } %3735)
  br label %._crit_edge1.i3182

._crit_edge1.i3182:                               ; preds = %3729, %3721
  %3738 = add nuw nsw i32 %.reg2mem13.079.i3179, 1
  %3739 = icmp slt i32 %3738, %3657
  br i1 %3739, label %3721, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3200

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3200.critedge: ; preds = %._crit_edge3.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %149)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %150)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %147)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %148)
  br label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3200

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3200: ; preds = %._crit_edge1.i3182, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3200.critedge
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %147)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %148)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %212)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %213)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %196)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %197)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %198)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %199)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %200)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %201)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %202)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0680.i1624)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %203)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %204)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %205)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %206)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %207)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %208)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %209)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %210)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i1626)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %211)
  %3740 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3741 = load i32, ptr %351, align 4
  %3742 = icmp sgt i32 %3741, 0
  br i1 %3742, label %.lr.ph.i1661, label %._crit_edge3.1.i

.lr.ph.i1661:                                     ; preds = %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3200
  %3743 = lshr i160 %3633, 64
  %3744 = insertelement <2 x i160> poison, i160 %3743, i64 0
  %3745 = insertelement <2 x i160> %3744, i160 %3633, i64 1
  %3746 = trunc <2 x i160> %3745 to <2 x i64>
  %3747 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %3748 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  br label %3749

3749:                                             ; preds = %.cont.cont.i1715, %.lr.ph.i1661
  %offset.i.i260.i17322141 = phi i32 [ 9, %.lr.ph.i1661 ], [ %offset.i.i260.i1732, %.cont.cont.i1715 ]
  %.reg2mem195.0678.i1663 = phi i32 [ 1, %.lr.ph.i1661 ], [ %3904, %.cont.cont.i1715 ]
  %.reg2mem193.0677.i1664 = phi i32 [ 0, %.lr.ph.i1661 ], [ %3909, %.cont.cont.i1715 ]
  %3750 = phi <2 x i64> [ %3746, %.lr.ph.i1661 ], [ %3908, %.cont.cont.i1715 ]
  %3751 = extractelement <2 x i64> %3750, i64 1
  %.sroa.speculated352.i17192137 = inttoptr i64 %3751 to ptr
  %3752 = extractelement <2 x i64> %3750, i64 0
  %.sroa.speculated346.i17202139 = inttoptr i64 %3752 to ptr
  %3753 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Entry, ptr undef, ptr undef, i32 undef }, ptr %.sroa.speculated352.i17192137, 1
  %3754 = insertvalue { ptr, ptr, ptr, i32 } %3753, ptr %.sroa.speculated346.i17202139, 2
  %3755 = insertvalue { ptr, ptr, ptr, i32 } %3754, i32 %offset.i.i260.i17322141, 3
  %3756 = sext i32 %offset.i.i260.i17322141 to i64
  %gep2135 = getelementptr ptr, ptr getelementptr inbounds (i8, ptr @Entry, i64 64), i64 %3756
  %3757 = load ptr, ptr %gep2135, align 8
  %3758 = call ptr %3757({ ptr, ptr, ptr, i32 } %3755, ptr nonnull %2)
  %3759 = call i32 %3758({ ptr, ptr, ptr, i32 } %3755, { ptr, ptr, ptr, i32 } %3755, ptr nonnull %2)
  %3760 = icmp eq i32 %.reg2mem195.0678.i1663, 1
  %3761 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br i1 %3760, label %3762, label %3824

3762:                                             ; preds = %3749
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %3763 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3764 = load ptr, ptr %328, align 8
  %3765 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3764, 0
  %3766 = load ptr, ptr %329, align 8
  %3767 = insertvalue { ptr, ptr, ptr, i32 } %3765, ptr %3766, 1
  %3768 = load ptr, ptr %330, align 8
  %3769 = insertvalue { ptr, ptr, ptr, i32 } %3767, ptr %3768, 2
  %3770 = load i32, ptr %331, align 4
  %3771 = insertvalue { ptr, ptr, ptr, i32 } %3769, i32 %3770, 3
  %hash_coef_ptr.i.i10.i3218 = getelementptr i8, ptr %3764, i64 8
  %tbl_size_ptr.i.i11.i3219 = getelementptr i8, ptr %3764, i64 16
  %offset_tbl_ptr.i.i12.i3220 = getelementptr i8, ptr %3764, i64 40
  %hash_coef.i.i13.i3221 = load i64, ptr %hash_coef_ptr.i.i10.i3218, align 4
  %tbl_size.i.i14.i3222 = load i64, ptr %tbl_size_ptr.i.i11.i3219, align 4
  %offset_tbl.i.i15.i3223 = load ptr, ptr %offset_tbl_ptr.i.i12.i3220, align 8
  %product.i.i.i16.i3224 = mul i64 %hash_coef.i.i13.i3221, -5261542750394134544
  %shifted.i.i.i17.i3225 = lshr i64 %product.i.i.i16.i3224, 32
  %xored.i.i.i18.i3226 = xor i64 %shifted.i.i.i17.i3225, %product.i.i.i16.i3224
  %hash.i.i.i19.i3227 = and i64 %xored.i.i.i18.i3226, %tbl_size.i.i14.i3222
  %offset_ptr.i.i20.i3228 = getelementptr i32, ptr %offset_tbl.i.i15.i3223, i64 %hash.i.i.i19.i3227
  %offset.i.i21.i3229 = load i32, ptr %offset_ptr.i.i20.i3228, align 4
  %eq.i.i3230 = icmp eq i32 %3770, %offset.i.i21.i3229
  call void @llvm.assume(i1 %eq.i.i3230) #30
  %3772 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %3773 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3764)
  %3774 = sext i32 %3770 to i64
  %3775 = getelementptr ptr, ptr %3764, i64 %3774
  %3776 = getelementptr i8, ptr %3775, i64 64
  %3777 = load ptr, ptr %3776, align 8
  %3778 = call ptr %3777({ ptr, ptr, ptr, i32 } %3771, ptr nonnull %2)
  %3779 = call i32 %3778({ ptr, ptr, ptr, i32 } %3771, { ptr, ptr, ptr, i32 } %3771, ptr nonnull %2)
  %3780 = add i32 %3779, -1
  %3781 = and i32 %3780, %3759
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %3782 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3783 = load ptr, ptr %328, align 8
  %3784 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3783, 0
  %3785 = load ptr, ptr %329, align 8
  %3786 = insertvalue { ptr, ptr, ptr, i32 } %3784, ptr %3785, 1
  %3787 = load ptr, ptr %330, align 8
  %3788 = insertvalue { ptr, ptr, ptr, i32 } %3786, ptr %3787, 2
  %3789 = load i32, ptr %331, align 4
  %3790 = insertvalue { ptr, ptr, ptr, i32 } %3788, i32 %3789, 3
  %hash_coef_ptr.i.i172.i1737 = getelementptr i8, ptr %3783, i64 8
  %tbl_size_ptr.i.i173.i1738 = getelementptr i8, ptr %3783, i64 16
  %offset_tbl_ptr.i.i174.i1739 = getelementptr i8, ptr %3783, i64 40
  %hash_coef.i.i175.i1740 = load i64, ptr %hash_coef_ptr.i.i172.i1737, align 4
  %tbl_size.i.i176.i1741 = load i64, ptr %tbl_size_ptr.i.i173.i1738, align 4
  %offset_tbl.i.i177.i1742 = load ptr, ptr %offset_tbl_ptr.i.i174.i1739, align 8
  %product.i.i.i178.i1743 = mul i64 %hash_coef.i.i175.i1740, -5261542750394134544
  %shifted.i.i.i179.i1744 = lshr i64 %product.i.i.i178.i1743, 32
  %xored.i.i.i180.i1745 = xor i64 %shifted.i.i.i179.i1744, %product.i.i.i178.i1743
  %hash.i.i.i181.i1746 = and i64 %xored.i.i.i180.i1745, %tbl_size.i.i176.i1741
  %offset_ptr.i.i182.i1747 = getelementptr i32, ptr %offset_tbl.i.i177.i1742, i64 %hash.i.i.i181.i1746
  %offset.i.i183.i1748 = load i32, ptr %offset_ptr.i.i182.i1747, align 4
  %eq.i.i1749 = icmp eq i32 %3789, %offset.i.i183.i1748
  call void @llvm.assume(i1 %eq.i.i1749) #30
  store ptr @_parameterization_Ptri32, ptr %196, align 8
  %3791 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %196)
  %3792 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3783)
  %3793 = sext i32 %3789 to i64
  %3794 = getelementptr ptr, ptr %3783, i64 %3793
  %3795 = getelementptr i8, ptr %3794, i64 120
  %3796 = load ptr, ptr %3795, align 8
  store ptr @i32_typ, ptr %197, align 8
  %3797 = call ptr %3796({ ptr, ptr, ptr, i32 } %3790, ptr nonnull %197)
  %3798 = call { ptr, i160 } %3797({ ptr, ptr, ptr, i32 } %3790, { ptr, ptr, ptr, i32 } %3790, ptr nonnull %196, i32 %3781)
  %.fca.0.extract112.i1750 = extractvalue { ptr, i160 } %3798, 0
  %.sroa.3111.0.insert.ext.i1751 = zext i32 %offset.i.i260.i17322141 to i160
  %.sroa.3111.0.insert.shift.i1752 = shl nuw i160 %.sroa.3111.0.insert.ext.i1751, 128
  %.sroa.2110.0.insert.ext.i1753 = zext i64 %3752 to i160
  %.sroa.2110.0.insert.shift.i1754 = shl nuw nsw i160 %.sroa.2110.0.insert.ext.i1753, 64
  %.sroa.2110.0.insert.insert.i1755 = or disjoint i160 %.sroa.2110.0.insert.shift.i1754, %.sroa.3111.0.insert.shift.i1752
  %.sroa.0109.0.insert.ext.i1756 = zext i64 %3751 to i160
  %.sroa.0109.0.insert.insert.i1757 = or disjoint i160 %.sroa.2110.0.insert.insert.i1755, %.sroa.0109.0.insert.ext.i1756
  %3799 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0109.0.insert.insert.i1757, 1
  %3800 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3801 = load ptr, ptr %328, align 8
  %3802 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3801, 0
  %3803 = load ptr, ptr %329, align 8
  %3804 = insertvalue { ptr, ptr, ptr, i32 } %3802, ptr %3803, 1
  %3805 = load ptr, ptr %330, align 8
  %3806 = insertvalue { ptr, ptr, ptr, i32 } %3804, ptr %3805, 2
  %3807 = load i32, ptr %331, align 4
  %3808 = insertvalue { ptr, ptr, ptr, i32 } %3806, i32 %3807, 3
  %hash_coef_ptr.i.i186.i1762 = getelementptr i8, ptr %3801, i64 8
  %tbl_size_ptr.i.i187.i1763 = getelementptr i8, ptr %3801, i64 16
  %offset_tbl_ptr.i.i188.i1764 = getelementptr i8, ptr %3801, i64 40
  %hash_coef.i.i189.i1765 = load i64, ptr %hash_coef_ptr.i.i186.i1762, align 4
  %tbl_size.i.i190.i1766 = load i64, ptr %tbl_size_ptr.i.i187.i1763, align 4
  %offset_tbl.i.i191.i1767 = load ptr, ptr %offset_tbl_ptr.i.i188.i1764, align 8
  %product.i.i.i192.i1768 = mul i64 %hash_coef.i.i189.i1765, -5261542750394134544
  %shifted.i.i.i193.i1769 = lshr i64 %product.i.i.i192.i1768, 32
  %xored.i.i.i194.i1770 = xor i64 %shifted.i.i.i193.i1769, %product.i.i.i192.i1768
  %hash.i.i.i195.i1771 = and i64 %xored.i.i.i194.i1770, %tbl_size.i.i190.i1766
  %offset_ptr.i.i196.i1772 = getelementptr i32, ptr %offset_tbl.i.i191.i1767, i64 %hash.i.i.i195.i1771
  %offset.i.i197.i1773 = load i32, ptr %offset_ptr.i.i196.i1772, align 4
  %eq.i200.i1774 = icmp eq i32 %3807, %offset.i.i197.i1773
  call void @llvm.assume(i1 %eq.i200.i1774) #30
  %3809 = load ptr, ptr %result.i136, align 8
  %3810 = load ptr, ptr %311, align 8
  %result.i.i1775 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3811 = getelementptr i8, ptr %result.i.i1775, i64 16
  store ptr %3810, ptr %3811, align 8
  %3812 = getelementptr i8, ptr %result.i.i1775, i64 8
  store ptr %3809, ptr %3812, align 8
  %3813 = getelementptr i8, ptr %result.i.i1775, i64 24
  store ptr null, ptr %3813, align 8
  %3814 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i1775)
  store ptr @Entry, ptr %result.i.i1775, align 8
  store ptr @_parameterization_Ptri32, ptr %198, align 8
  store ptr %result.i.i1775, ptr %407, align 8
  %3815 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %198)
  %3816 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3801)
  %3817 = sext i32 %3807 to i64
  %3818 = getelementptr ptr, ptr %3801, i64 %3817
  %3819 = getelementptr i8, ptr %3818, i64 128
  %3820 = load ptr, ptr %3819, align 8
  store ptr @i32_typ, ptr %199, align 8
  store ptr @Entry, ptr %408, align 8
  %3821 = call ptr %3820({ ptr, ptr, ptr, i32 } %3808, ptr nonnull %199)
  call void %3821({ ptr, ptr, ptr, i32 } %3808, { ptr, ptr, ptr, i32 } %3808, ptr nonnull %198, i32 %3781, { ptr, i160 } %3799)
  %3822 = icmp ne ptr %.fca.0.extract112.i1750, @nil_typ
  %3823 = icmp ne ptr %.fca.0.extract112.i1750, null
  %.not140.i1776 = and i1 %3822, %3823
  br i1 %.not140.i1776, label %.cont.cont.i1715, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit1782.thread

3824:                                             ; preds = %3749
  %3825 = add i32 %3759, 2127912214
  %3826 = shl i32 %3759, 12
  %3827 = add i32 %3825, %3826
  %3828 = ashr i32 %3827, 19
  %3829 = xor i32 %3827, %3828
  %3830 = xor i32 %3829, -949894596
  %3831 = add i32 %3830, 374761393
  %3832 = shl i32 %3830, 5
  %3833 = add i32 %3831, %3832
  %3834 = add i32 %3833, -744332180
  %3835 = shl i32 %3833, 9
  %3836 = xor i32 %3834, %3835
  %3837 = add i32 %3836, -42973499
  %3838 = shl i32 %3836, 3
  %3839 = add i32 %3837, %3838
  %3840 = ashr i32 %3839, 16
  %3841 = xor i32 %3839, %3840
  %3842 = xor i32 %3841, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %3843 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3844 = load ptr, ptr %345, align 8
  %3845 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3844, 0
  %3846 = load ptr, ptr %346, align 8
  %3847 = insertvalue { ptr, ptr, ptr, i32 } %3845, ptr %3846, 1
  %3848 = load ptr, ptr %347, align 8
  %3849 = insertvalue { ptr, ptr, ptr, i32 } %3847, ptr %3848, 2
  %3850 = load i32, ptr %348, align 4
  %3851 = insertvalue { ptr, ptr, ptr, i32 } %3849, i32 %3850, 3
  %hash_coef_ptr.i.i10.i3248 = getelementptr i8, ptr %3844, i64 8
  %tbl_size_ptr.i.i11.i3249 = getelementptr i8, ptr %3844, i64 16
  %offset_tbl_ptr.i.i12.i3250 = getelementptr i8, ptr %3844, i64 40
  %hash_coef.i.i13.i3251 = load i64, ptr %hash_coef_ptr.i.i10.i3248, align 4
  %tbl_size.i.i14.i3252 = load i64, ptr %tbl_size_ptr.i.i11.i3249, align 4
  %offset_tbl.i.i15.i3253 = load ptr, ptr %offset_tbl_ptr.i.i12.i3250, align 8
  %product.i.i.i16.i3254 = mul i64 %hash_coef.i.i13.i3251, -5261542750394134544
  %shifted.i.i.i17.i3255 = lshr i64 %product.i.i.i16.i3254, 32
  %xored.i.i.i18.i3256 = xor i64 %shifted.i.i.i17.i3255, %product.i.i.i16.i3254
  %hash.i.i.i19.i3257 = and i64 %xored.i.i.i18.i3256, %tbl_size.i.i14.i3252
  %offset_ptr.i.i20.i3258 = getelementptr i32, ptr %offset_tbl.i.i15.i3253, i64 %hash.i.i.i19.i3257
  %offset.i.i21.i3259 = load i32, ptr %offset_ptr.i.i20.i3258, align 4
  %eq.i.i3260 = icmp eq i32 %3850, %offset.i.i21.i3259
  call void @llvm.assume(i1 %eq.i.i3260) #30
  %3852 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %3853 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3844)
  %3854 = sext i32 %3850 to i64
  %3855 = getelementptr ptr, ptr %3844, i64 %3854
  %3856 = getelementptr i8, ptr %3855, i64 64
  %3857 = load ptr, ptr %3856, align 8
  %3858 = call ptr %3857({ ptr, ptr, ptr, i32 } %3851, ptr nonnull %2)
  %3859 = call i32 %3858({ ptr, ptr, ptr, i32 } %3851, { ptr, ptr, ptr, i32 } %3851, ptr nonnull %2)
  %3860 = add i32 %3859, -1
  %3861 = and i32 %3860, %3842
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %3862 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3863 = load ptr, ptr %345, align 8
  %3864 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3863, 0
  %3865 = load ptr, ptr %346, align 8
  %3866 = insertvalue { ptr, ptr, ptr, i32 } %3864, ptr %3865, 1
  %3867 = load ptr, ptr %347, align 8
  %3868 = insertvalue { ptr, ptr, ptr, i32 } %3866, ptr %3867, 2
  %3869 = load i32, ptr %348, align 4
  %3870 = insertvalue { ptr, ptr, ptr, i32 } %3868, i32 %3869, 3
  %hash_coef_ptr.i.i202.i1669 = getelementptr i8, ptr %3863, i64 8
  %tbl_size_ptr.i.i203.i1670 = getelementptr i8, ptr %3863, i64 16
  %offset_tbl_ptr.i.i204.i1671 = getelementptr i8, ptr %3863, i64 40
  %hash_coef.i.i205.i1672 = load i64, ptr %hash_coef_ptr.i.i202.i1669, align 4
  %tbl_size.i.i206.i1673 = load i64, ptr %tbl_size_ptr.i.i203.i1670, align 4
  %offset_tbl.i.i207.i1674 = load ptr, ptr %offset_tbl_ptr.i.i204.i1671, align 8
  %product.i.i.i208.i1675 = mul i64 %hash_coef.i.i205.i1672, -5261542750394134544
  %shifted.i.i.i209.i1676 = lshr i64 %product.i.i.i208.i1675, 32
  %xored.i.i.i210.i1677 = xor i64 %shifted.i.i.i209.i1676, %product.i.i.i208.i1675
  %hash.i.i.i211.i1678 = and i64 %xored.i.i.i210.i1677, %tbl_size.i.i206.i1673
  %offset_ptr.i.i212.i1679 = getelementptr i32, ptr %offset_tbl.i.i207.i1674, i64 %hash.i.i.i211.i1678
  %offset.i.i213.i1680 = load i32, ptr %offset_ptr.i.i212.i1679, align 4
  %eq.i216.i1681 = icmp eq i32 %3869, %offset.i.i213.i1680
  call void @llvm.assume(i1 %eq.i216.i1681) #30
  store ptr @_parameterization_Ptri32, ptr %204, align 8
  %3871 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %204)
  %3872 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3863)
  %3873 = sext i32 %3869 to i64
  %3874 = getelementptr ptr, ptr %3863, i64 %3873
  %3875 = getelementptr i8, ptr %3874, i64 120
  %3876 = load ptr, ptr %3875, align 8
  store ptr @i32_typ, ptr %205, align 8
  %3877 = call ptr %3876({ ptr, ptr, ptr, i32 } %3870, ptr nonnull %205)
  %3878 = call { ptr, i160 } %3877({ ptr, ptr, ptr, i32 } %3870, { ptr, ptr, ptr, i32 } %3870, ptr nonnull %204, i32 %3861)
  %.fca.0.extract87.i1682 = extractvalue { ptr, i160 } %3878, 0
  %.sroa.3.0.insert.ext.i1683 = zext i32 %offset.i.i260.i17322141 to i160
  %.sroa.3.0.insert.shift.i1684 = shl nuw i160 %.sroa.3.0.insert.ext.i1683, 128
  %.sroa.2.0.insert.ext.i1685 = zext i64 %3752 to i160
  %.sroa.2.0.insert.shift.i1686 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i1685, 64
  %.sroa.2.0.insert.insert.i1687 = or disjoint i160 %.sroa.2.0.insert.shift.i1686, %.sroa.3.0.insert.shift.i1684
  %.sroa.0.0.insert.ext.i1688 = zext i64 %3751 to i160
  %.sroa.0.0.insert.insert.i1689 = or disjoint i160 %.sroa.2.0.insert.insert.i1687, %.sroa.0.0.insert.ext.i1688
  %3879 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0.0.insert.insert.i1689, 1
  %3880 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3881 = load ptr, ptr %345, align 8
  %3882 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3881, 0
  %3883 = load ptr, ptr %346, align 8
  %3884 = insertvalue { ptr, ptr, ptr, i32 } %3882, ptr %3883, 1
  %3885 = load ptr, ptr %347, align 8
  %3886 = insertvalue { ptr, ptr, ptr, i32 } %3884, ptr %3885, 2
  %3887 = load i32, ptr %348, align 4
  %3888 = insertvalue { ptr, ptr, ptr, i32 } %3886, i32 %3887, 3
  %hash_coef_ptr.i.i218.i1694 = getelementptr i8, ptr %3881, i64 8
  %tbl_size_ptr.i.i219.i1695 = getelementptr i8, ptr %3881, i64 16
  %offset_tbl_ptr.i.i220.i1696 = getelementptr i8, ptr %3881, i64 40
  %hash_coef.i.i221.i1697 = load i64, ptr %hash_coef_ptr.i.i218.i1694, align 4
  %tbl_size.i.i222.i1698 = load i64, ptr %tbl_size_ptr.i.i219.i1695, align 4
  %offset_tbl.i.i223.i1699 = load ptr, ptr %offset_tbl_ptr.i.i220.i1696, align 8
  %product.i.i.i224.i1700 = mul i64 %hash_coef.i.i221.i1697, -5261542750394134544
  %shifted.i.i.i225.i1701 = lshr i64 %product.i.i.i224.i1700, 32
  %xored.i.i.i226.i1702 = xor i64 %shifted.i.i.i225.i1701, %product.i.i.i224.i1700
  %hash.i.i.i227.i1703 = and i64 %xored.i.i.i226.i1702, %tbl_size.i.i222.i1698
  %offset_ptr.i.i228.i1704 = getelementptr i32, ptr %offset_tbl.i.i223.i1699, i64 %hash.i.i.i227.i1703
  %offset.i.i229.i1705 = load i32, ptr %offset_ptr.i.i228.i1704, align 4
  %eq.i232.i1706 = icmp eq i32 %3887, %offset.i.i229.i1705
  call void @llvm.assume(i1 %eq.i232.i1706) #30
  %3889 = load ptr, ptr %result.i136, align 8
  %3890 = load ptr, ptr %311, align 8
  %result.i233.i1707 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3891 = getelementptr i8, ptr %result.i233.i1707, i64 16
  store ptr %3890, ptr %3891, align 8
  %3892 = getelementptr i8, ptr %result.i233.i1707, i64 8
  store ptr %3889, ptr %3892, align 8
  %3893 = getelementptr i8, ptr %result.i233.i1707, i64 24
  store ptr null, ptr %3893, align 8
  %3894 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i233.i1707)
  store ptr @Entry, ptr %result.i233.i1707, align 8
  store ptr @_parameterization_Ptri32, ptr %206, align 8
  store ptr %result.i233.i1707, ptr %405, align 8
  %3895 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %206)
  %3896 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3881)
  %3897 = sext i32 %3887 to i64
  %3898 = getelementptr ptr, ptr %3881, i64 %3897
  %3899 = getelementptr i8, ptr %3898, i64 128
  %3900 = load ptr, ptr %3899, align 8
  store ptr @i32_typ, ptr %207, align 8
  store ptr @Entry, ptr %406, align 8
  %3901 = call ptr %3900({ ptr, ptr, ptr, i32 } %3888, ptr nonnull %207)
  call void %3901({ ptr, ptr, ptr, i32 } %3888, { ptr, ptr, ptr, i32 } %3888, ptr nonnull %206, i32 %3861, { ptr, i160 } %3879)
  %3902 = icmp ne ptr %.fca.0.extract87.i1682, @nil_typ
  %3903 = icmp ne ptr %.fca.0.extract87.i1682, null
  %.not138.i1708 = and i1 %3902, %3903
  br i1 %.not138.i1708, label %.cont.cont.i1715, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit1782.thread

.cont.cont.i1715:                                 ; preds = %3824, %3762
  %.sink2154 = phi { ptr, i160 } [ %3798, %3762 ], [ %3878, %3824 ]
  %3904 = phi i32 [ 2, %3762 ], [ 1, %3824 ]
  %vptr.i248.sroa.speculated.i1718 = phi ptr [ %.fca.0.extract112.i1750, %3762 ], [ %.fca.0.extract87.i1682, %3824 ]
  %.fca.1.extract89.i1711 = extractvalue { ptr, i160 } %.sink2154, 1
  %.sroa.3407.sroa.4.0.extract.shift.i1712 = lshr i160 %.fca.1.extract89.i1711, 64
  %3905 = trunc i160 %.sroa.3407.sroa.4.0.extract.shift.i1712 to i64
  %3906 = insertelement <2 x i64> poison, i64 %3905, i64 0
  %3907 = trunc i160 %.fca.1.extract89.i1711 to i64
  %3908 = insertelement <2 x i64> %3906, i64 %3907, i64 1
  %hash_coef_ptr.i.i249.i1721 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i1718, i64 8
  %tbl_size_ptr.i.i250.i1722 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i1718, i64 16
  %offset_tbl_ptr.i.i251.i1723 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i1718, i64 40
  %hash_coef.i.i252.i1724 = load i64, ptr %hash_coef_ptr.i.i249.i1721, align 4
  %tbl_size.i.i253.i1725 = load i64, ptr %tbl_size_ptr.i.i250.i1722, align 4
  %offset_tbl.i.i254.i1726 = load ptr, ptr %offset_tbl_ptr.i.i251.i1723, align 8
  %product.i.i.i255.i1727 = mul i64 %hash_coef.i.i252.i1724, 4015701072841558310
  %shifted.i.i.i256.i1728 = lshr i64 %product.i.i.i255.i1727, 32
  %xored.i.i.i257.i1729 = xor i64 %shifted.i.i.i256.i1728, %product.i.i.i255.i1727
  %hash.i.i.i258.i1730 = and i64 %xored.i.i.i257.i1729, %tbl_size.i.i253.i1725
  %offset_ptr.i.i259.i1731 = getelementptr i32, ptr %offset_tbl.i.i254.i1726, i64 %hash.i.i.i258.i1730
  %offset.i.i260.i1732 = load i32, ptr %offset_ptr.i.i259.i1731, align 4
  %3909 = add nuw nsw i32 %.reg2mem193.0677.i1664, 1
  %3910 = load i32, ptr %351, align 4
  %3911 = icmp slt i32 %3909, %3910
  br i1 %3911, label %3749, label %._crit_edge3.1.i

HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit1782.thread: ; preds = %3762, %3824
  %3912 = phi ptr [ %208, %3824 ], [ %200, %3762 ]
  %3913 = phi ptr [ %209, %3824 ], [ %201, %3762 ]
  %3914 = phi ptr [ %210, %3824 ], [ %202, %3762 ]
  %3915 = phi ptr [ %.sroa.0.i1626, %3824 ], [ %.sroa.0680.i1624, %3762 ]
  %3916 = phi ptr [ %211, %3824 ], [ %203, %3762 ]
  %3917 = load i32, ptr %349, align 4
  store i32 %3917, ptr %3912, align 4
  store i32 1, ptr %3913, align 4
  %3918 = add i32 %3917, 1
  store i32 %3918, ptr %3914, align 4
  %3919 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  store i32 %3918, ptr %349, align 4
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %3916, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %3915, align 8
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %196)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %197)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %198)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %199)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %200)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %201)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %202)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i1624)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %203)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %204)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %205)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %206)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %207)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %208)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %209)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %210)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i1626)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %211)
  br label %HashMap_insert_keyK_valueV.exit

._crit_edge3.1.i:                                 ; preds = %.cont.cont.i1715, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3200
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %196)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %197)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %198)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %199)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %200)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %201)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %202)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i1624)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %203)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %204)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %205)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %206)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %207)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %208)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %209)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %210)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i1626)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %211)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %194)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %195)
  %3920 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3921 = load ptr, ptr %328, align 8
  %3922 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3921, 0
  %3923 = load ptr, ptr %329, align 8
  %3924 = insertvalue { ptr, ptr, ptr, i32 } %3922, ptr %3923, 1
  %3925 = load ptr, ptr %330, align 8
  %3926 = insertvalue { ptr, ptr, ptr, i32 } %3924, ptr %3925, 2
  %3927 = load i32, ptr %331, align 4
  %3928 = insertvalue { ptr, ptr, ptr, i32 } %3926, i32 %3927, 3
  %hash_coef_ptr.i.i18.i1801 = getelementptr i8, ptr %3921, i64 8
  %tbl_size_ptr.i.i19.i1802 = getelementptr i8, ptr %3921, i64 16
  %offset_tbl_ptr.i.i20.i1803 = getelementptr i8, ptr %3921, i64 40
  %hash_coef.i.i21.i1804 = load i64, ptr %hash_coef_ptr.i.i18.i1801, align 4
  %tbl_size.i.i22.i1805 = load i64, ptr %tbl_size_ptr.i.i19.i1802, align 4
  %offset_tbl.i.i23.i1806 = load ptr, ptr %offset_tbl_ptr.i.i20.i1803, align 8
  %product.i.i.i24.i1807 = mul i64 %hash_coef.i.i21.i1804, -5261542750394134544
  %shifted.i.i.i25.i1808 = lshr i64 %product.i.i.i24.i1807, 32
  %xored.i.i.i26.i1809 = xor i64 %shifted.i.i.i25.i1808, %product.i.i.i24.i1807
  %hash.i.i.i27.i1810 = and i64 %xored.i.i.i26.i1809, %tbl_size.i.i22.i1805
  %offset_ptr.i.i28.i1811 = getelementptr i32, ptr %offset_tbl.i.i23.i1806, i64 %hash.i.i.i27.i1810
  %offset.i.i29.i1812 = load i32, ptr %offset_ptr.i.i28.i1811, align 4
  %eq.i.i1813 = icmp eq i32 %3927, %offset.i.i29.i1812
  call void @llvm.assume(i1 %eq.i.i1813) #30
  %3929 = load ptr, ptr %345, align 8
  %3930 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3929, 0
  %3931 = load ptr, ptr %346, align 8
  %3932 = insertvalue { ptr, ptr, ptr, i32 } %3930, ptr %3931, 1
  %3933 = load ptr, ptr %347, align 8
  %3934 = insertvalue { ptr, ptr, ptr, i32 } %3932, ptr %3933, 2
  %3935 = load i32, ptr %348, align 4
  %hash_coef_ptr.i.i46.i1818 = getelementptr i8, ptr %3929, i64 8
  %tbl_size_ptr.i.i47.i1819 = getelementptr i8, ptr %3929, i64 16
  %offset_tbl_ptr.i.i48.i1820 = getelementptr i8, ptr %3929, i64 40
  %hash_coef.i.i49.i1821 = load i64, ptr %hash_coef_ptr.i.i46.i1818, align 4
  %tbl_size.i.i50.i1822 = load i64, ptr %tbl_size_ptr.i.i47.i1819, align 4
  %offset_tbl.i.i51.i1823 = load ptr, ptr %offset_tbl_ptr.i.i48.i1820, align 8
  %product.i.i.i52.i1824 = mul i64 %hash_coef.i.i49.i1821, -5261542750394134544
  %shifted.i.i.i53.i1825 = lshr i64 %product.i.i.i52.i1824, 32
  %xored.i.i.i54.i1826 = xor i64 %shifted.i.i.i53.i1825, %product.i.i.i52.i1824
  %hash.i.i.i55.i1827 = and i64 %xored.i.i.i54.i1826, %tbl_size.i.i50.i1822
  %offset_ptr.i.i56.i1828 = getelementptr i32, ptr %offset_tbl.i.i51.i1823, i64 %hash.i.i.i55.i1827
  %offset.i.i57.i1829 = load i32, ptr %offset_ptr.i.i56.i1828, align 4
  %eq.i60.i1830 = icmp eq i32 %3935, %offset.i.i57.i1829
  call void @llvm.assume(i1 %eq.i60.i1830) #30
  %3936 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %3937 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3921)
  %3938 = sext i32 %3927 to i64
  %3939 = getelementptr ptr, ptr %3921, i64 %3938
  %3940 = getelementptr i8, ptr %3939, i64 64
  %3941 = load ptr, ptr %3940, align 8
  %3942 = call ptr %3941({ ptr, ptr, ptr, i32 } %3928, ptr nonnull %2)
  %3943 = call i32 %3942({ ptr, ptr, ptr, i32 } %3928, { ptr, ptr, ptr, i32 } %3928, ptr nonnull %2)
  %3944 = shl i32 %3943, 1
  %3945 = call i32 @llvm.smax.i32(i32 %3944, i32 16)
  %3946 = load ptr, ptr %result.i136, align 8
  %3947 = load ptr, ptr %311, align 8
  %result.i.i1831 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3948 = getelementptr i8, ptr %result.i.i1831, i64 16
  store ptr @_parameterization_Nil, ptr %3948, align 8
  %result.i75.i1832 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3949 = getelementptr i8, ptr %result.i75.i1832, i64 16
  store ptr %3947, ptr %3949, align 8
  %3950 = getelementptr i8, ptr %result.i75.i1832, i64 8
  store ptr %3946, ptr %3950, align 8
  %3951 = getelementptr i8, ptr %result.i75.i1832, i64 24
  store ptr null, ptr %3951, align 8
  %3952 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i75.i1832)
  store ptr @Entry, ptr %result.i75.i1832, align 8
  %3953 = getelementptr i8, ptr %result.i.i1831, i64 8
  store ptr %result.i75.i1832, ptr %3953, align 8
  %3954 = getelementptr i8, ptr %result.i.i1831, i64 24
  store ptr null, ptr %3954, align 8
  %3955 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i1831)
  store ptr @union_typ, ptr %result.i.i1831, align 8
  %result.i76.i1833 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i1831, ptr %result.i76.i1833, align 8
  %3956 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i76.i1833)
  store ptr @Array, ptr %194, align 8
  store ptr %result.i76.i1833, ptr %409, align 8
  store i32 9, ptr %410, align 8
  %3957 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %194)
  %3958 = getelementptr i8, ptr %result.i76.i1833, i64 16
  store i32 %3945, ptr %3958, align 4
  %3959 = getelementptr i8, ptr %result.i76.i1833, i64 20
  store i32 %3945, ptr %3959, align 4
  %3960 = zext nneg i32 %3945 to i64
  %3961 = shl nuw nsw i64 %3960, 5
  %result.i.i.i1834 = call noalias ptr @bump_malloc_inner(i64 noundef %3961, ptr nonnull @current_ptr) #29
  %3962 = getelementptr i8, ptr %result.i76.i1833, i64 8
  store ptr %result.i.i.i1834, ptr %3962, align 8
  %3963 = load ptr, ptr %411, align 8
  store ptr @Array, ptr %328, align 8
  store ptr %result.i76.i1833, ptr %329, align 8
  store ptr %3963, ptr %330, align 8
  store i32 9, ptr %331, align 4
  %result.i91.i1847 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3964 = getelementptr i8, ptr %result.i91.i1847, i64 16
  store ptr @_parameterization_Nil, ptr %3964, align 8
  %result.i92.i1848 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3965 = getelementptr i8, ptr %result.i92.i1848, i64 16
  store ptr %3947, ptr %3965, align 8
  %3966 = getelementptr i8, ptr %result.i92.i1848, i64 8
  store ptr %3946, ptr %3966, align 8
  %3967 = getelementptr i8, ptr %result.i92.i1848, i64 24
  store ptr null, ptr %3967, align 8
  %3968 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i92.i1848)
  store ptr @Entry, ptr %result.i92.i1848, align 8
  %3969 = getelementptr i8, ptr %result.i91.i1847, i64 8
  store ptr %result.i92.i1848, ptr %3969, align 8
  %3970 = getelementptr i8, ptr %result.i91.i1847, i64 24
  store ptr null, ptr %3970, align 8
  %3971 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i91.i1847)
  store ptr @union_typ, ptr %result.i91.i1847, align 8
  %result.i93.i1849 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i91.i1847, ptr %result.i93.i1849, align 8
  %3972 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i93.i1849)
  store ptr @Array, ptr %195, align 8
  store ptr %result.i93.i1849, ptr %412, align 8
  store i32 9, ptr %413, align 8
  %3973 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %195)
  %3974 = getelementptr i8, ptr %result.i93.i1849, i64 16
  store i32 %3945, ptr %3974, align 4
  %3975 = getelementptr i8, ptr %result.i93.i1849, i64 20
  store i32 %3945, ptr %3975, align 4
  %result.i.i234.i1850 = call noalias ptr @bump_malloc_inner(i64 noundef %3961, ptr nonnull @current_ptr) #29
  %3976 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %3977 = getelementptr i8, ptr %result.i93.i1849, i64 8
  store ptr %result.i.i234.i1850, ptr %3977, align 8
  %3978 = load ptr, ptr %414, align 8
  store ptr @Array, ptr %345, align 8
  store ptr %result.i93.i1849, ptr %346, align 8
  store ptr %3978, ptr %347, align 8
  store i32 9, ptr %348, align 4
  store i32 0, ptr %349, align 4
  %3979 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %145)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %146)
  %3980 = icmp sgt i32 %3943, 0
  br i1 %3980, label %.lr.ph.i3263, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3366.critedge

.lr.ph.i3263:                                     ; preds = %._crit_edge3.1.i
  %invariant.gep.i3264 = getelementptr i8, ptr %3921, i64 120
  %offset_tbl.i.i24.i3266 = load ptr, ptr %offset_tbl_ptr.i.i20.i1803, align 8
  %hash_coef.i.i22.i3268 = load i64, ptr %hash_coef_ptr.i.i18.i1801, align 4
  %product.i.i.i25.i3269 = mul i64 %hash_coef.i.i22.i3268, -5261542750394134544
  %shifted.i.i.i26.i3270 = lshr i64 %product.i.i.i25.i3269, 32
  %xored.i.i.i27.i3271 = xor i64 %shifted.i.i.i26.i3270, %product.i.i.i25.i3269
  %tbl_size.i.i23.i3273 = load i64, ptr %tbl_size_ptr.i.i19.i1802, align 4
  %hash.i.i.i28.i3274 = and i64 %xored.i.i.i27.i3271, %tbl_size.i.i23.i3273
  %offset_ptr.i.i29.i3275 = getelementptr i32, ptr %offset_tbl.i.i24.i3266, i64 %hash.i.i.i28.i3274
  %offset.i.i30.i3276 = load i32, ptr %offset_ptr.i.i29.i3275, align 4
  %3981 = insertvalue { ptr, ptr, ptr, i32 } %3926, i32 %offset.i.i30.i3276, 3
  %3982 = sext i32 %offset.i.i30.i3276 to i64
  %gep.i3291 = getelementptr ptr, ptr %invariant.gep.i3264, i64 %3982
  %3983 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %3984

3984:                                             ; preds = %._crit_edge1.i3295, %.lr.ph.i3263
  %.reg2mem13.079.i3292 = phi i32 [ 0, %.lr.ph.i3263 ], [ %4176, %._crit_edge1.i3295 ]
  store ptr @_parameterization_Ptri32, ptr %145, align 8
  %3985 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %145)
  %3986 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %3921)
  %3987 = load ptr, ptr %gep.i3291, align 8
  store ptr @i32_typ, ptr %146, align 8
  %3988 = call ptr %3987({ ptr, ptr, ptr, i32 } %3981, ptr nonnull %146)
  %3989 = call { ptr, i160 } %3988({ ptr, ptr, ptr, i32 } %3981, { ptr, ptr, ptr, i32 } %3981, ptr nonnull %145, i32 %.reg2mem13.079.i3292)
  %.fca.0.extract11.i3293 = extractvalue { ptr, i160 } %3989, 0
  %3990 = icmp ne ptr %.fca.0.extract11.i3293, @nil_typ
  %3991 = icmp ne ptr %.fca.0.extract11.i3293, null
  %.not17.i3294 = and i1 %3990, %3991
  br i1 %.not17.i3294, label %3992, label %._crit_edge1.i3295

3992:                                             ; preds = %3984
  %hash_coef_ptr.i.i33.i3300 = getelementptr i8, ptr %.fca.0.extract11.i3293, i64 8
  %tbl_size_ptr.i.i34.i3301 = getelementptr i8, ptr %.fca.0.extract11.i3293, i64 16
  %offset_tbl_ptr.i.i35.i3302 = getelementptr i8, ptr %.fca.0.extract11.i3293, i64 40
  %3993 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %83)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %84)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %85)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %86)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %87)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %88)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %89)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0680.i4094)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %90)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %91)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %92)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %93)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %94)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %95)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %96)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %97)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i4096)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %98)
  %hash_coef.i.i147.i4116 = load i64, ptr %hash_coef_ptr.i.i33.i3300, align 4
  %tbl_size.i.i148.i4117 = load i64, ptr %tbl_size_ptr.i.i34.i3301, align 4
  %offset_tbl.i.i149.i4118 = load ptr, ptr %offset_tbl_ptr.i.i35.i3302, align 8
  %product.i.i.i150.i4119 = mul i64 %hash_coef.i.i147.i4116, 4015701072841558310
  %shifted.i.i.i151.i4120 = lshr i64 %product.i.i.i150.i4119, 32
  %xored.i.i.i152.i4121 = xor i64 %shifted.i.i.i151.i4120, %product.i.i.i150.i4119
  %hash.i.i.i153.i4122 = and i64 %xored.i.i.i152.i4121, %tbl_size.i.i148.i4117
  %offset_ptr.i.i154.i4123 = getelementptr i32, ptr %offset_tbl.i.i149.i4118, i64 %hash.i.i.i153.i4122
  %offset.i.i169.i4124 = load i32, ptr %offset_ptr.i.i154.i4123, align 4
  %3994 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3995 = load i32, ptr %351, align 4
  %3996 = icmp sgt i32 %3995, 0
  br i1 %3996, label %.lr.ph.i4130, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4250

.lr.ph.i4130:                                     ; preds = %3992
  %.fca.1.extract13.i3296 = extractvalue { ptr, i160 } %3989, 1
  %.sroa.576.8.extract.shift.i3298 = lshr i160 %.fca.1.extract13.i3296, 64
  %3997 = insertelement <2 x i160> poison, i160 %.sroa.576.8.extract.shift.i3298, i64 0
  %3998 = insertelement <2 x i160> %3997, i160 %.fca.1.extract13.i3296, i64 1
  %3999 = trunc <2 x i160> %3998 to <2 x i64>
  %4000 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i3293, 0
  %4001 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4002 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract11.i3293)
  %invariant.gep4433 = getelementptr i8, ptr %.fca.0.extract11.i3293, i64 64
  %4003 = insertvalue { ptr, i160 } undef, ptr %.fca.0.extract11.i3293, 0
  br label %4004

4004:                                             ; preds = %.cont.cont.i4183, %.lr.ph.i4130
  %offset.i.i260.i42004440 = phi i32 [ %offset.i.i169.i4124, %.lr.ph.i4130 ], [ %offset.i.i260.i4200, %.cont.cont.i4183 ]
  %.reg2mem195.0678.i4131 = phi i32 [ 1, %.lr.ph.i4130 ], [ %4159, %.cont.cont.i4183 ]
  %.reg2mem193.0677.i4132 = phi i32 [ 0, %.lr.ph.i4130 ], [ %4164, %.cont.cont.i4183 ]
  %4005 = phi <2 x i64> [ %3999, %.lr.ph.i4130 ], [ %4163, %.cont.cont.i4183 ]
  %4006 = extractelement <2 x i64> %4005, i64 1
  %.sroa.speculated352.i41874436 = inttoptr i64 %4006 to ptr
  %4007 = extractelement <2 x i64> %4005, i64 0
  %.sroa.speculated346.i41884438 = inttoptr i64 %4007 to ptr
  %4008 = insertvalue { ptr, ptr, ptr, i32 } %4000, ptr %.sroa.speculated352.i41874436, 1
  %4009 = insertvalue { ptr, ptr, ptr, i32 } %4008, ptr %.sroa.speculated346.i41884438, 2
  %4010 = insertvalue { ptr, ptr, ptr, i32 } %4009, i32 %offset.i.i260.i42004440, 3
  %4011 = sext i32 %offset.i.i260.i42004440 to i64
  %gep4434 = getelementptr ptr, ptr %invariant.gep4433, i64 %4011
  %4012 = load ptr, ptr %gep4434, align 8
  %4013 = call ptr %4012({ ptr, ptr, ptr, i32 } %4010, ptr nonnull %2)
  %4014 = call i32 %4013({ ptr, ptr, ptr, i32 } %4010, { ptr, ptr, ptr, i32 } %4010, ptr nonnull %2)
  %4015 = icmp eq i32 %.reg2mem195.0678.i4131, 1
  %4016 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br i1 %4015, label %4017, label %4079

4017:                                             ; preds = %4004
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %4018 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4019 = load ptr, ptr %328, align 8
  %4020 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4019, 0
  %4021 = load ptr, ptr %329, align 8
  %4022 = insertvalue { ptr, ptr, ptr, i32 } %4020, ptr %4021, 1
  %4023 = load ptr, ptr %330, align 8
  %4024 = insertvalue { ptr, ptr, ptr, i32 } %4022, ptr %4023, 2
  %4025 = load i32, ptr %331, align 4
  %4026 = insertvalue { ptr, ptr, ptr, i32 } %4024, i32 %4025, 3
  %hash_coef_ptr.i.i10.i5244 = getelementptr i8, ptr %4019, i64 8
  %tbl_size_ptr.i.i11.i5245 = getelementptr i8, ptr %4019, i64 16
  %offset_tbl_ptr.i.i12.i5246 = getelementptr i8, ptr %4019, i64 40
  %hash_coef.i.i13.i5247 = load i64, ptr %hash_coef_ptr.i.i10.i5244, align 4
  %tbl_size.i.i14.i5248 = load i64, ptr %tbl_size_ptr.i.i11.i5245, align 4
  %offset_tbl.i.i15.i5249 = load ptr, ptr %offset_tbl_ptr.i.i12.i5246, align 8
  %product.i.i.i16.i5250 = mul i64 %hash_coef.i.i13.i5247, -5261542750394134544
  %shifted.i.i.i17.i5251 = lshr i64 %product.i.i.i16.i5250, 32
  %xored.i.i.i18.i5252 = xor i64 %shifted.i.i.i17.i5251, %product.i.i.i16.i5250
  %hash.i.i.i19.i5253 = and i64 %xored.i.i.i18.i5252, %tbl_size.i.i14.i5248
  %offset_ptr.i.i20.i5254 = getelementptr i32, ptr %offset_tbl.i.i15.i5249, i64 %hash.i.i.i19.i5253
  %offset.i.i21.i5255 = load i32, ptr %offset_ptr.i.i20.i5254, align 4
  %eq.i.i5256 = icmp eq i32 %4025, %offset.i.i21.i5255
  call void @llvm.assume(i1 %eq.i.i5256) #30
  %4027 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4028 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4019)
  %4029 = sext i32 %4025 to i64
  %4030 = getelementptr ptr, ptr %4019, i64 %4029
  %4031 = getelementptr i8, ptr %4030, i64 64
  %4032 = load ptr, ptr %4031, align 8
  %4033 = call ptr %4032({ ptr, ptr, ptr, i32 } %4026, ptr nonnull %2)
  %4034 = call i32 %4033({ ptr, ptr, ptr, i32 } %4026, { ptr, ptr, ptr, i32 } %4026, ptr nonnull %2)
  %4035 = add i32 %4034, -1
  %4036 = and i32 %4035, %4014
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %4037 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4038 = load ptr, ptr %328, align 8
  %4039 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4038, 0
  %4040 = load ptr, ptr %329, align 8
  %4041 = insertvalue { ptr, ptr, ptr, i32 } %4039, ptr %4040, 1
  %4042 = load ptr, ptr %330, align 8
  %4043 = insertvalue { ptr, ptr, ptr, i32 } %4041, ptr %4042, 2
  %4044 = load i32, ptr %331, align 4
  %4045 = insertvalue { ptr, ptr, ptr, i32 } %4043, i32 %4044, 3
  %hash_coef_ptr.i.i172.i4205 = getelementptr i8, ptr %4038, i64 8
  %tbl_size_ptr.i.i173.i4206 = getelementptr i8, ptr %4038, i64 16
  %offset_tbl_ptr.i.i174.i4207 = getelementptr i8, ptr %4038, i64 40
  %hash_coef.i.i175.i4208 = load i64, ptr %hash_coef_ptr.i.i172.i4205, align 4
  %tbl_size.i.i176.i4209 = load i64, ptr %tbl_size_ptr.i.i173.i4206, align 4
  %offset_tbl.i.i177.i4210 = load ptr, ptr %offset_tbl_ptr.i.i174.i4207, align 8
  %product.i.i.i178.i4211 = mul i64 %hash_coef.i.i175.i4208, -5261542750394134544
  %shifted.i.i.i179.i4212 = lshr i64 %product.i.i.i178.i4211, 32
  %xored.i.i.i180.i4213 = xor i64 %shifted.i.i.i179.i4212, %product.i.i.i178.i4211
  %hash.i.i.i181.i4214 = and i64 %xored.i.i.i180.i4213, %tbl_size.i.i176.i4209
  %offset_ptr.i.i182.i4215 = getelementptr i32, ptr %offset_tbl.i.i177.i4210, i64 %hash.i.i.i181.i4214
  %offset.i.i183.i4216 = load i32, ptr %offset_ptr.i.i182.i4215, align 4
  %eq.i.i4217 = icmp eq i32 %4044, %offset.i.i183.i4216
  call void @llvm.assume(i1 %eq.i.i4217) #30
  store ptr @_parameterization_Ptri32, ptr %83, align 8
  %4046 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %83)
  %4047 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4038)
  %4048 = sext i32 %4044 to i64
  %4049 = getelementptr ptr, ptr %4038, i64 %4048
  %4050 = getelementptr i8, ptr %4049, i64 120
  %4051 = load ptr, ptr %4050, align 8
  store ptr @i32_typ, ptr %84, align 8
  %4052 = call ptr %4051({ ptr, ptr, ptr, i32 } %4045, ptr nonnull %84)
  %4053 = call { ptr, i160 } %4052({ ptr, ptr, ptr, i32 } %4045, { ptr, ptr, ptr, i32 } %4045, ptr nonnull %83, i32 %4036)
  %.fca.0.extract112.i4218 = extractvalue { ptr, i160 } %4053, 0
  %.sroa.3111.0.insert.ext.i4219 = zext i32 %offset.i.i260.i42004440 to i160
  %.sroa.3111.0.insert.shift.i4220 = shl nuw i160 %.sroa.3111.0.insert.ext.i4219, 128
  %.sroa.2110.0.insert.ext.i4221 = zext i64 %4007 to i160
  %.sroa.2110.0.insert.shift.i4222 = shl nuw nsw i160 %.sroa.2110.0.insert.ext.i4221, 64
  %.sroa.2110.0.insert.insert.i4223 = or disjoint i160 %.sroa.2110.0.insert.shift.i4222, %.sroa.3111.0.insert.shift.i4220
  %.sroa.0109.0.insert.ext.i4224 = zext i64 %4006 to i160
  %.sroa.0109.0.insert.insert.i4225 = or disjoint i160 %.sroa.2110.0.insert.insert.i4223, %.sroa.0109.0.insert.ext.i4224
  %4054 = insertvalue { ptr, i160 } %4003, i160 %.sroa.0109.0.insert.insert.i4225, 1
  %4055 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4056 = load ptr, ptr %328, align 8
  %4057 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4056, 0
  %4058 = load ptr, ptr %329, align 8
  %4059 = insertvalue { ptr, ptr, ptr, i32 } %4057, ptr %4058, 1
  %4060 = load ptr, ptr %330, align 8
  %4061 = insertvalue { ptr, ptr, ptr, i32 } %4059, ptr %4060, 2
  %4062 = load i32, ptr %331, align 4
  %4063 = insertvalue { ptr, ptr, ptr, i32 } %4061, i32 %4062, 3
  %hash_coef_ptr.i.i186.i4230 = getelementptr i8, ptr %4056, i64 8
  %tbl_size_ptr.i.i187.i4231 = getelementptr i8, ptr %4056, i64 16
  %offset_tbl_ptr.i.i188.i4232 = getelementptr i8, ptr %4056, i64 40
  %hash_coef.i.i189.i4233 = load i64, ptr %hash_coef_ptr.i.i186.i4230, align 4
  %tbl_size.i.i190.i4234 = load i64, ptr %tbl_size_ptr.i.i187.i4231, align 4
  %offset_tbl.i.i191.i4235 = load ptr, ptr %offset_tbl_ptr.i.i188.i4232, align 8
  %product.i.i.i192.i4236 = mul i64 %hash_coef.i.i189.i4233, -5261542750394134544
  %shifted.i.i.i193.i4237 = lshr i64 %product.i.i.i192.i4236, 32
  %xored.i.i.i194.i4238 = xor i64 %shifted.i.i.i193.i4237, %product.i.i.i192.i4236
  %hash.i.i.i195.i4239 = and i64 %xored.i.i.i194.i4238, %tbl_size.i.i190.i4234
  %offset_ptr.i.i196.i4240 = getelementptr i32, ptr %offset_tbl.i.i191.i4235, i64 %hash.i.i.i195.i4239
  %offset.i.i197.i4241 = load i32, ptr %offset_ptr.i.i196.i4240, align 4
  %eq.i200.i4242 = icmp eq i32 %4062, %offset.i.i197.i4241
  call void @llvm.assume(i1 %eq.i200.i4242) #30
  %4064 = load ptr, ptr %result.i136, align 8
  %4065 = load ptr, ptr %311, align 8
  %result.i.i4243 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %4066 = getelementptr i8, ptr %result.i.i4243, i64 16
  store ptr %4065, ptr %4066, align 8
  %4067 = getelementptr i8, ptr %result.i.i4243, i64 8
  store ptr %4064, ptr %4067, align 8
  %4068 = getelementptr i8, ptr %result.i.i4243, i64 24
  store ptr null, ptr %4068, align 8
  %4069 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i4243)
  store ptr @Entry, ptr %result.i.i4243, align 8
  store ptr @_parameterization_Ptri32, ptr %85, align 8
  store ptr %result.i.i4243, ptr %460, align 8
  %4070 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %85)
  %4071 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4056)
  %4072 = sext i32 %4062 to i64
  %4073 = getelementptr ptr, ptr %4056, i64 %4072
  %4074 = getelementptr i8, ptr %4073, i64 128
  %4075 = load ptr, ptr %4074, align 8
  store ptr @i32_typ, ptr %86, align 8
  store ptr %.fca.0.extract11.i3293, ptr %461, align 8
  %4076 = call ptr %4075({ ptr, ptr, ptr, i32 } %4063, ptr nonnull %86)
  call void %4076({ ptr, ptr, ptr, i32 } %4063, { ptr, ptr, ptr, i32 } %4063, ptr nonnull %85, i32 %4036, { ptr, i160 } %4054)
  %4077 = icmp ne ptr %.fca.0.extract112.i4218, @nil_typ
  %4078 = icmp ne ptr %.fca.0.extract112.i4218, null
  %.not140.i4244 = and i1 %4077, %4078
  br i1 %.not140.i4244, label %.cont.cont.i4183, label %4167

4079:                                             ; preds = %4004
  %4080 = add i32 %4014, 2127912214
  %4081 = shl i32 %4014, 12
  %4082 = add i32 %4080, %4081
  %4083 = ashr i32 %4082, 19
  %4084 = xor i32 %4082, %4083
  %4085 = xor i32 %4084, -949894596
  %4086 = add i32 %4085, 374761393
  %4087 = shl i32 %4085, 5
  %4088 = add i32 %4086, %4087
  %4089 = add i32 %4088, -744332180
  %4090 = shl i32 %4088, 9
  %4091 = xor i32 %4089, %4090
  %4092 = add i32 %4091, -42973499
  %4093 = shl i32 %4091, 3
  %4094 = add i32 %4092, %4093
  %4095 = ashr i32 %4094, 16
  %4096 = xor i32 %4094, %4095
  %4097 = xor i32 %4096, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %4098 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4099 = load ptr, ptr %345, align 8
  %4100 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4099, 0
  %4101 = load ptr, ptr %346, align 8
  %4102 = insertvalue { ptr, ptr, ptr, i32 } %4100, ptr %4101, 1
  %4103 = load ptr, ptr %347, align 8
  %4104 = insertvalue { ptr, ptr, ptr, i32 } %4102, ptr %4103, 2
  %4105 = load i32, ptr %348, align 4
  %4106 = insertvalue { ptr, ptr, ptr, i32 } %4104, i32 %4105, 3
  %hash_coef_ptr.i.i10.i5274 = getelementptr i8, ptr %4099, i64 8
  %tbl_size_ptr.i.i11.i5275 = getelementptr i8, ptr %4099, i64 16
  %offset_tbl_ptr.i.i12.i5276 = getelementptr i8, ptr %4099, i64 40
  %hash_coef.i.i13.i5277 = load i64, ptr %hash_coef_ptr.i.i10.i5274, align 4
  %tbl_size.i.i14.i5278 = load i64, ptr %tbl_size_ptr.i.i11.i5275, align 4
  %offset_tbl.i.i15.i5279 = load ptr, ptr %offset_tbl_ptr.i.i12.i5276, align 8
  %product.i.i.i16.i5280 = mul i64 %hash_coef.i.i13.i5277, -5261542750394134544
  %shifted.i.i.i17.i5281 = lshr i64 %product.i.i.i16.i5280, 32
  %xored.i.i.i18.i5282 = xor i64 %shifted.i.i.i17.i5281, %product.i.i.i16.i5280
  %hash.i.i.i19.i5283 = and i64 %xored.i.i.i18.i5282, %tbl_size.i.i14.i5278
  %offset_ptr.i.i20.i5284 = getelementptr i32, ptr %offset_tbl.i.i15.i5279, i64 %hash.i.i.i19.i5283
  %offset.i.i21.i5285 = load i32, ptr %offset_ptr.i.i20.i5284, align 4
  %eq.i.i5286 = icmp eq i32 %4105, %offset.i.i21.i5285
  call void @llvm.assume(i1 %eq.i.i5286) #30
  %4107 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4108 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4099)
  %4109 = sext i32 %4105 to i64
  %4110 = getelementptr ptr, ptr %4099, i64 %4109
  %4111 = getelementptr i8, ptr %4110, i64 64
  %4112 = load ptr, ptr %4111, align 8
  %4113 = call ptr %4112({ ptr, ptr, ptr, i32 } %4106, ptr nonnull %2)
  %4114 = call i32 %4113({ ptr, ptr, ptr, i32 } %4106, { ptr, ptr, ptr, i32 } %4106, ptr nonnull %2)
  %4115 = add i32 %4114, -1
  %4116 = and i32 %4115, %4097
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %4117 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4118 = load ptr, ptr %345, align 8
  %4119 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4118, 0
  %4120 = load ptr, ptr %346, align 8
  %4121 = insertvalue { ptr, ptr, ptr, i32 } %4119, ptr %4120, 1
  %4122 = load ptr, ptr %347, align 8
  %4123 = insertvalue { ptr, ptr, ptr, i32 } %4121, ptr %4122, 2
  %4124 = load i32, ptr %348, align 4
  %4125 = insertvalue { ptr, ptr, ptr, i32 } %4123, i32 %4124, 3
  %hash_coef_ptr.i.i202.i4137 = getelementptr i8, ptr %4118, i64 8
  %tbl_size_ptr.i.i203.i4138 = getelementptr i8, ptr %4118, i64 16
  %offset_tbl_ptr.i.i204.i4139 = getelementptr i8, ptr %4118, i64 40
  %hash_coef.i.i205.i4140 = load i64, ptr %hash_coef_ptr.i.i202.i4137, align 4
  %tbl_size.i.i206.i4141 = load i64, ptr %tbl_size_ptr.i.i203.i4138, align 4
  %offset_tbl.i.i207.i4142 = load ptr, ptr %offset_tbl_ptr.i.i204.i4139, align 8
  %product.i.i.i208.i4143 = mul i64 %hash_coef.i.i205.i4140, -5261542750394134544
  %shifted.i.i.i209.i4144 = lshr i64 %product.i.i.i208.i4143, 32
  %xored.i.i.i210.i4145 = xor i64 %shifted.i.i.i209.i4144, %product.i.i.i208.i4143
  %hash.i.i.i211.i4146 = and i64 %xored.i.i.i210.i4145, %tbl_size.i.i206.i4141
  %offset_ptr.i.i212.i4147 = getelementptr i32, ptr %offset_tbl.i.i207.i4142, i64 %hash.i.i.i211.i4146
  %offset.i.i213.i4148 = load i32, ptr %offset_ptr.i.i212.i4147, align 4
  %eq.i216.i4149 = icmp eq i32 %4124, %offset.i.i213.i4148
  call void @llvm.assume(i1 %eq.i216.i4149) #30
  store ptr @_parameterization_Ptri32, ptr %91, align 8
  %4126 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %91)
  %4127 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4118)
  %4128 = sext i32 %4124 to i64
  %4129 = getelementptr ptr, ptr %4118, i64 %4128
  %4130 = getelementptr i8, ptr %4129, i64 120
  %4131 = load ptr, ptr %4130, align 8
  store ptr @i32_typ, ptr %92, align 8
  %4132 = call ptr %4131({ ptr, ptr, ptr, i32 } %4125, ptr nonnull %92)
  %4133 = call { ptr, i160 } %4132({ ptr, ptr, ptr, i32 } %4125, { ptr, ptr, ptr, i32 } %4125, ptr nonnull %91, i32 %4116)
  %.fca.0.extract87.i4150 = extractvalue { ptr, i160 } %4133, 0
  %.sroa.3.0.insert.ext.i4151 = zext i32 %offset.i.i260.i42004440 to i160
  %.sroa.3.0.insert.shift.i4152 = shl nuw i160 %.sroa.3.0.insert.ext.i4151, 128
  %.sroa.2.0.insert.ext.i4153 = zext i64 %4007 to i160
  %.sroa.2.0.insert.shift.i4154 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i4153, 64
  %.sroa.2.0.insert.insert.i4155 = or disjoint i160 %.sroa.2.0.insert.shift.i4154, %.sroa.3.0.insert.shift.i4152
  %.sroa.0.0.insert.ext.i4156 = zext i64 %4006 to i160
  %.sroa.0.0.insert.insert.i4157 = or disjoint i160 %.sroa.2.0.insert.insert.i4155, %.sroa.0.0.insert.ext.i4156
  %4134 = insertvalue { ptr, i160 } %4003, i160 %.sroa.0.0.insert.insert.i4157, 1
  %4135 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4136 = load ptr, ptr %345, align 8
  %4137 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4136, 0
  %4138 = load ptr, ptr %346, align 8
  %4139 = insertvalue { ptr, ptr, ptr, i32 } %4137, ptr %4138, 1
  %4140 = load ptr, ptr %347, align 8
  %4141 = insertvalue { ptr, ptr, ptr, i32 } %4139, ptr %4140, 2
  %4142 = load i32, ptr %348, align 4
  %4143 = insertvalue { ptr, ptr, ptr, i32 } %4141, i32 %4142, 3
  %hash_coef_ptr.i.i218.i4162 = getelementptr i8, ptr %4136, i64 8
  %tbl_size_ptr.i.i219.i4163 = getelementptr i8, ptr %4136, i64 16
  %offset_tbl_ptr.i.i220.i4164 = getelementptr i8, ptr %4136, i64 40
  %hash_coef.i.i221.i4165 = load i64, ptr %hash_coef_ptr.i.i218.i4162, align 4
  %tbl_size.i.i222.i4166 = load i64, ptr %tbl_size_ptr.i.i219.i4163, align 4
  %offset_tbl.i.i223.i4167 = load ptr, ptr %offset_tbl_ptr.i.i220.i4164, align 8
  %product.i.i.i224.i4168 = mul i64 %hash_coef.i.i221.i4165, -5261542750394134544
  %shifted.i.i.i225.i4169 = lshr i64 %product.i.i.i224.i4168, 32
  %xored.i.i.i226.i4170 = xor i64 %shifted.i.i.i225.i4169, %product.i.i.i224.i4168
  %hash.i.i.i227.i4171 = and i64 %xored.i.i.i226.i4170, %tbl_size.i.i222.i4166
  %offset_ptr.i.i228.i4172 = getelementptr i32, ptr %offset_tbl.i.i223.i4167, i64 %hash.i.i.i227.i4171
  %offset.i.i229.i4173 = load i32, ptr %offset_ptr.i.i228.i4172, align 4
  %eq.i232.i4174 = icmp eq i32 %4142, %offset.i.i229.i4173
  call void @llvm.assume(i1 %eq.i232.i4174) #30
  %4144 = load ptr, ptr %result.i136, align 8
  %4145 = load ptr, ptr %311, align 8
  %result.i233.i4175 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %4146 = getelementptr i8, ptr %result.i233.i4175, i64 16
  store ptr %4145, ptr %4146, align 8
  %4147 = getelementptr i8, ptr %result.i233.i4175, i64 8
  store ptr %4144, ptr %4147, align 8
  %4148 = getelementptr i8, ptr %result.i233.i4175, i64 24
  store ptr null, ptr %4148, align 8
  %4149 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i233.i4175)
  store ptr @Entry, ptr %result.i233.i4175, align 8
  store ptr @_parameterization_Ptri32, ptr %93, align 8
  store ptr %result.i233.i4175, ptr %458, align 8
  %4150 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %93)
  %4151 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4136)
  %4152 = sext i32 %4142 to i64
  %4153 = getelementptr ptr, ptr %4136, i64 %4152
  %4154 = getelementptr i8, ptr %4153, i64 128
  %4155 = load ptr, ptr %4154, align 8
  store ptr @i32_typ, ptr %94, align 8
  store ptr %.fca.0.extract11.i3293, ptr %459, align 8
  %4156 = call ptr %4155({ ptr, ptr, ptr, i32 } %4143, ptr nonnull %94)
  call void %4156({ ptr, ptr, ptr, i32 } %4143, { ptr, ptr, ptr, i32 } %4143, ptr nonnull %93, i32 %4116, { ptr, i160 } %4134)
  %4157 = icmp ne ptr %.fca.0.extract87.i4150, @nil_typ
  %4158 = icmp ne ptr %.fca.0.extract87.i4150, null
  %.not138.i4176 = and i1 %4157, %4158
  br i1 %.not138.i4176, label %.cont.cont.i4183, label %4167

.cont.cont.i4183:                                 ; preds = %4079, %4017
  %.sink4464 = phi { ptr, i160 } [ %4053, %4017 ], [ %4133, %4079 ]
  %4159 = phi i32 [ 2, %4017 ], [ 1, %4079 ]
  %vptr.i248.sroa.speculated.i4186 = phi ptr [ %.fca.0.extract112.i4218, %4017 ], [ %.fca.0.extract87.i4150, %4079 ]
  %.fca.1.extract89.i4179 = extractvalue { ptr, i160 } %.sink4464, 1
  %.sroa.3407.sroa.4.0.extract.shift.i4180 = lshr i160 %.fca.1.extract89.i4179, 64
  %4160 = trunc i160 %.sroa.3407.sroa.4.0.extract.shift.i4180 to i64
  %4161 = insertelement <2 x i64> poison, i64 %4160, i64 0
  %4162 = trunc i160 %.fca.1.extract89.i4179 to i64
  %4163 = insertelement <2 x i64> %4161, i64 %4162, i64 1
  %hash_coef_ptr.i.i249.i4189 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i4186, i64 8
  %tbl_size_ptr.i.i250.i4190 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i4186, i64 16
  %offset_tbl_ptr.i.i251.i4191 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i4186, i64 40
  %hash_coef.i.i252.i4192 = load i64, ptr %hash_coef_ptr.i.i249.i4189, align 4
  %tbl_size.i.i253.i4193 = load i64, ptr %tbl_size_ptr.i.i250.i4190, align 4
  %offset_tbl.i.i254.i4194 = load ptr, ptr %offset_tbl_ptr.i.i251.i4191, align 8
  %product.i.i.i255.i4195 = mul i64 %hash_coef.i.i252.i4192, 4015701072841558310
  %shifted.i.i.i256.i4196 = lshr i64 %product.i.i.i255.i4195, 32
  %xored.i.i.i257.i4197 = xor i64 %shifted.i.i.i256.i4196, %product.i.i.i255.i4195
  %hash.i.i.i258.i4198 = and i64 %xored.i.i.i257.i4197, %tbl_size.i.i253.i4193
  %offset_ptr.i.i259.i4199 = getelementptr i32, ptr %offset_tbl.i.i254.i4194, i64 %hash.i.i.i258.i4198
  %offset.i.i260.i4200 = load i32, ptr %offset_ptr.i.i259.i4199, align 4
  %4164 = add nuw nsw i32 %.reg2mem193.0677.i4132, 1
  %4165 = load i32, ptr %351, align 4
  %4166 = icmp slt i32 %4164, %4165
  br i1 %4166, label %4004, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4250

4167:                                             ; preds = %4079, %4017
  %4168 = phi ptr [ %95, %4079 ], [ %87, %4017 ]
  %4169 = phi ptr [ %96, %4079 ], [ %88, %4017 ]
  %4170 = phi ptr [ %97, %4079 ], [ %89, %4017 ]
  %4171 = phi ptr [ %.sroa.0.i4096, %4079 ], [ %.sroa.0680.i4094, %4017 ]
  %4172 = phi ptr [ %98, %4079 ], [ %90, %4017 ]
  %4173 = load i32, ptr %349, align 4
  store i32 %4173, ptr %4168, align 4
  store i32 1, ptr %4169, align 4
  %4174 = add i32 %4173, 1
  store i32 %4174, ptr %4170, align 4
  %4175 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  store i32 %4174, ptr %349, align 4
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %4172, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %4171, align 8
  br label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4250

HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4250: ; preds = %.cont.cont.i4183, %3992, %4167
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %83)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %84)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %85)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %86)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %87)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %88)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %89)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i4094)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %90)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %91)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %92)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %93)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %94)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %95)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %96)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %97)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i4096)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %98)
  br label %._crit_edge1.i3295

._crit_edge1.i3295:                               ; preds = %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4250, %3984
  %4176 = add nuw nsw i32 %.reg2mem13.079.i3292, 1
  %4177 = icmp slt i32 %4176, %3943
  br i1 %4177, label %3984, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3313

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3313: ; preds = %._crit_edge1.i3295
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %145)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %146)
  %4178 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %143)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %144)
  %invariant.gep.i3317 = getelementptr i8, ptr %3929, i64 120
  %offset_tbl.i.i24.i3319 = load ptr, ptr %offset_tbl_ptr.i.i48.i1820, align 8
  %hash_coef.i.i22.i3321 = load i64, ptr %hash_coef_ptr.i.i46.i1818, align 4
  %product.i.i.i25.i3322 = mul i64 %hash_coef.i.i22.i3321, -5261542750394134544
  %shifted.i.i.i26.i3323 = lshr i64 %product.i.i.i25.i3322, 32
  %xored.i.i.i27.i3324 = xor i64 %shifted.i.i.i26.i3323, %product.i.i.i25.i3322
  %tbl_size.i.i23.i3326 = load i64, ptr %tbl_size_ptr.i.i47.i1819, align 4
  %hash.i.i.i28.i3327 = and i64 %xored.i.i.i27.i3324, %tbl_size.i.i23.i3326
  %offset_ptr.i.i29.i3328 = getelementptr i32, ptr %offset_tbl.i.i24.i3319, i64 %hash.i.i.i28.i3327
  %offset.i.i30.i3329 = load i32, ptr %offset_ptr.i.i29.i3328, align 4
  %4179 = insertvalue { ptr, ptr, ptr, i32 } %3934, i32 %offset.i.i30.i3329, 3
  %4180 = sext i32 %offset.i.i30.i3329 to i64
  %gep.i3344 = getelementptr ptr, ptr %invariant.gep.i3317, i64 %4180
  %4181 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %4182

4182:                                             ; preds = %._crit_edge1.i3348, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3313
  %.reg2mem13.079.i3345 = phi i32 [ 0, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3313 ], [ %4374, %._crit_edge1.i3348 ]
  store ptr @_parameterization_Ptri32, ptr %143, align 8
  %4183 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %143)
  %4184 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %3929)
  %4185 = load ptr, ptr %gep.i3344, align 8
  store ptr @i32_typ, ptr %144, align 8
  %4186 = call ptr %4185({ ptr, ptr, ptr, i32 } %4179, ptr nonnull %144)
  %4187 = call { ptr, i160 } %4186({ ptr, ptr, ptr, i32 } %4179, { ptr, ptr, ptr, i32 } %4179, ptr nonnull %143, i32 %.reg2mem13.079.i3345)
  %.fca.0.extract11.i3346 = extractvalue { ptr, i160 } %4187, 0
  %4188 = icmp ne ptr %.fca.0.extract11.i3346, @nil_typ
  %4189 = icmp ne ptr %.fca.0.extract11.i3346, null
  %.not17.i3347 = and i1 %4188, %4189
  br i1 %.not17.i3347, label %4190, label %._crit_edge1.i3348

4190:                                             ; preds = %4182
  %hash_coef_ptr.i.i33.i3353 = getelementptr i8, ptr %.fca.0.extract11.i3346, i64 8
  %tbl_size_ptr.i.i34.i3354 = getelementptr i8, ptr %.fca.0.extract11.i3346, i64 16
  %offset_tbl_ptr.i.i35.i3355 = getelementptr i8, ptr %.fca.0.extract11.i3346, i64 40
  %4191 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %67)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %68)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %69)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %70)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %71)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %72)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %73)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0680.i4251)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %74)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %75)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %76)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %77)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %78)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %79)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %80)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %81)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i4253)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %82)
  %hash_coef.i.i147.i4273 = load i64, ptr %hash_coef_ptr.i.i33.i3353, align 4
  %tbl_size.i.i148.i4274 = load i64, ptr %tbl_size_ptr.i.i34.i3354, align 4
  %offset_tbl.i.i149.i4275 = load ptr, ptr %offset_tbl_ptr.i.i35.i3355, align 8
  %product.i.i.i150.i4276 = mul i64 %hash_coef.i.i147.i4273, 4015701072841558310
  %shifted.i.i.i151.i4277 = lshr i64 %product.i.i.i150.i4276, 32
  %xored.i.i.i152.i4278 = xor i64 %shifted.i.i.i151.i4277, %product.i.i.i150.i4276
  %hash.i.i.i153.i4279 = and i64 %xored.i.i.i152.i4278, %tbl_size.i.i148.i4274
  %offset_ptr.i.i154.i4280 = getelementptr i32, ptr %offset_tbl.i.i149.i4275, i64 %hash.i.i.i153.i4279
  %offset.i.i169.i4281 = load i32, ptr %offset_ptr.i.i154.i4280, align 4
  %4192 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4193 = load i32, ptr %351, align 4
  %4194 = icmp sgt i32 %4193, 0
  br i1 %4194, label %.lr.ph.i4287, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4407

.lr.ph.i4287:                                     ; preds = %4190
  %.fca.1.extract13.i3349 = extractvalue { ptr, i160 } %4187, 1
  %.sroa.576.8.extract.shift.i3351 = lshr i160 %.fca.1.extract13.i3349, 64
  %4195 = insertelement <2 x i160> poison, i160 %.sroa.576.8.extract.shift.i3351, i64 0
  %4196 = insertelement <2 x i160> %4195, i160 %.fca.1.extract13.i3349, i64 1
  %4197 = trunc <2 x i160> %4196 to <2 x i64>
  %4198 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i3346, 0
  %4199 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4200 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract11.i3346)
  %invariant.gep4441 = getelementptr i8, ptr %.fca.0.extract11.i3346, i64 64
  %4201 = insertvalue { ptr, i160 } undef, ptr %.fca.0.extract11.i3346, 0
  br label %4202

4202:                                             ; preds = %.cont.cont.i4340, %.lr.ph.i4287
  %offset.i.i260.i43574448 = phi i32 [ %offset.i.i169.i4281, %.lr.ph.i4287 ], [ %offset.i.i260.i4357, %.cont.cont.i4340 ]
  %.reg2mem195.0678.i4288 = phi i32 [ 1, %.lr.ph.i4287 ], [ %4357, %.cont.cont.i4340 ]
  %.reg2mem193.0677.i4289 = phi i32 [ 0, %.lr.ph.i4287 ], [ %4362, %.cont.cont.i4340 ]
  %4203 = phi <2 x i64> [ %4197, %.lr.ph.i4287 ], [ %4361, %.cont.cont.i4340 ]
  %4204 = extractelement <2 x i64> %4203, i64 1
  %.sroa.speculated352.i43444444 = inttoptr i64 %4204 to ptr
  %4205 = extractelement <2 x i64> %4203, i64 0
  %.sroa.speculated346.i43454446 = inttoptr i64 %4205 to ptr
  %4206 = insertvalue { ptr, ptr, ptr, i32 } %4198, ptr %.sroa.speculated352.i43444444, 1
  %4207 = insertvalue { ptr, ptr, ptr, i32 } %4206, ptr %.sroa.speculated346.i43454446, 2
  %4208 = insertvalue { ptr, ptr, ptr, i32 } %4207, i32 %offset.i.i260.i43574448, 3
  %4209 = sext i32 %offset.i.i260.i43574448 to i64
  %gep4442 = getelementptr ptr, ptr %invariant.gep4441, i64 %4209
  %4210 = load ptr, ptr %gep4442, align 8
  %4211 = call ptr %4210({ ptr, ptr, ptr, i32 } %4208, ptr nonnull %2)
  %4212 = call i32 %4211({ ptr, ptr, ptr, i32 } %4208, { ptr, ptr, ptr, i32 } %4208, ptr nonnull %2)
  %4213 = icmp eq i32 %.reg2mem195.0678.i4288, 1
  %4214 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br i1 %4213, label %4215, label %4277

4215:                                             ; preds = %4202
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %4216 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4217 = load ptr, ptr %328, align 8
  %4218 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4217, 0
  %4219 = load ptr, ptr %329, align 8
  %4220 = insertvalue { ptr, ptr, ptr, i32 } %4218, ptr %4219, 1
  %4221 = load ptr, ptr %330, align 8
  %4222 = insertvalue { ptr, ptr, ptr, i32 } %4220, ptr %4221, 2
  %4223 = load i32, ptr %331, align 4
  %4224 = insertvalue { ptr, ptr, ptr, i32 } %4222, i32 %4223, 3
  %hash_coef_ptr.i.i10.i5304 = getelementptr i8, ptr %4217, i64 8
  %tbl_size_ptr.i.i11.i5305 = getelementptr i8, ptr %4217, i64 16
  %offset_tbl_ptr.i.i12.i5306 = getelementptr i8, ptr %4217, i64 40
  %hash_coef.i.i13.i5307 = load i64, ptr %hash_coef_ptr.i.i10.i5304, align 4
  %tbl_size.i.i14.i5308 = load i64, ptr %tbl_size_ptr.i.i11.i5305, align 4
  %offset_tbl.i.i15.i5309 = load ptr, ptr %offset_tbl_ptr.i.i12.i5306, align 8
  %product.i.i.i16.i5310 = mul i64 %hash_coef.i.i13.i5307, -5261542750394134544
  %shifted.i.i.i17.i5311 = lshr i64 %product.i.i.i16.i5310, 32
  %xored.i.i.i18.i5312 = xor i64 %shifted.i.i.i17.i5311, %product.i.i.i16.i5310
  %hash.i.i.i19.i5313 = and i64 %xored.i.i.i18.i5312, %tbl_size.i.i14.i5308
  %offset_ptr.i.i20.i5314 = getelementptr i32, ptr %offset_tbl.i.i15.i5309, i64 %hash.i.i.i19.i5313
  %offset.i.i21.i5315 = load i32, ptr %offset_ptr.i.i20.i5314, align 4
  %eq.i.i5316 = icmp eq i32 %4223, %offset.i.i21.i5315
  call void @llvm.assume(i1 %eq.i.i5316) #30
  %4225 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4226 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4217)
  %4227 = sext i32 %4223 to i64
  %4228 = getelementptr ptr, ptr %4217, i64 %4227
  %4229 = getelementptr i8, ptr %4228, i64 64
  %4230 = load ptr, ptr %4229, align 8
  %4231 = call ptr %4230({ ptr, ptr, ptr, i32 } %4224, ptr nonnull %2)
  %4232 = call i32 %4231({ ptr, ptr, ptr, i32 } %4224, { ptr, ptr, ptr, i32 } %4224, ptr nonnull %2)
  %4233 = add i32 %4232, -1
  %4234 = and i32 %4233, %4212
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %4235 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4236 = load ptr, ptr %328, align 8
  %4237 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4236, 0
  %4238 = load ptr, ptr %329, align 8
  %4239 = insertvalue { ptr, ptr, ptr, i32 } %4237, ptr %4238, 1
  %4240 = load ptr, ptr %330, align 8
  %4241 = insertvalue { ptr, ptr, ptr, i32 } %4239, ptr %4240, 2
  %4242 = load i32, ptr %331, align 4
  %4243 = insertvalue { ptr, ptr, ptr, i32 } %4241, i32 %4242, 3
  %hash_coef_ptr.i.i172.i4362 = getelementptr i8, ptr %4236, i64 8
  %tbl_size_ptr.i.i173.i4363 = getelementptr i8, ptr %4236, i64 16
  %offset_tbl_ptr.i.i174.i4364 = getelementptr i8, ptr %4236, i64 40
  %hash_coef.i.i175.i4365 = load i64, ptr %hash_coef_ptr.i.i172.i4362, align 4
  %tbl_size.i.i176.i4366 = load i64, ptr %tbl_size_ptr.i.i173.i4363, align 4
  %offset_tbl.i.i177.i4367 = load ptr, ptr %offset_tbl_ptr.i.i174.i4364, align 8
  %product.i.i.i178.i4368 = mul i64 %hash_coef.i.i175.i4365, -5261542750394134544
  %shifted.i.i.i179.i4369 = lshr i64 %product.i.i.i178.i4368, 32
  %xored.i.i.i180.i4370 = xor i64 %shifted.i.i.i179.i4369, %product.i.i.i178.i4368
  %hash.i.i.i181.i4371 = and i64 %xored.i.i.i180.i4370, %tbl_size.i.i176.i4366
  %offset_ptr.i.i182.i4372 = getelementptr i32, ptr %offset_tbl.i.i177.i4367, i64 %hash.i.i.i181.i4371
  %offset.i.i183.i4373 = load i32, ptr %offset_ptr.i.i182.i4372, align 4
  %eq.i.i4374 = icmp eq i32 %4242, %offset.i.i183.i4373
  call void @llvm.assume(i1 %eq.i.i4374) #30
  store ptr @_parameterization_Ptri32, ptr %67, align 8
  %4244 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %67)
  %4245 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4236)
  %4246 = sext i32 %4242 to i64
  %4247 = getelementptr ptr, ptr %4236, i64 %4246
  %4248 = getelementptr i8, ptr %4247, i64 120
  %4249 = load ptr, ptr %4248, align 8
  store ptr @i32_typ, ptr %68, align 8
  %4250 = call ptr %4249({ ptr, ptr, ptr, i32 } %4243, ptr nonnull %68)
  %4251 = call { ptr, i160 } %4250({ ptr, ptr, ptr, i32 } %4243, { ptr, ptr, ptr, i32 } %4243, ptr nonnull %67, i32 %4234)
  %.fca.0.extract112.i4375 = extractvalue { ptr, i160 } %4251, 0
  %.sroa.3111.0.insert.ext.i4376 = zext i32 %offset.i.i260.i43574448 to i160
  %.sroa.3111.0.insert.shift.i4377 = shl nuw i160 %.sroa.3111.0.insert.ext.i4376, 128
  %.sroa.2110.0.insert.ext.i4378 = zext i64 %4205 to i160
  %.sroa.2110.0.insert.shift.i4379 = shl nuw nsw i160 %.sroa.2110.0.insert.ext.i4378, 64
  %.sroa.2110.0.insert.insert.i4380 = or disjoint i160 %.sroa.2110.0.insert.shift.i4379, %.sroa.3111.0.insert.shift.i4377
  %.sroa.0109.0.insert.ext.i4381 = zext i64 %4204 to i160
  %.sroa.0109.0.insert.insert.i4382 = or disjoint i160 %.sroa.2110.0.insert.insert.i4380, %.sroa.0109.0.insert.ext.i4381
  %4252 = insertvalue { ptr, i160 } %4201, i160 %.sroa.0109.0.insert.insert.i4382, 1
  %4253 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4254 = load ptr, ptr %328, align 8
  %4255 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4254, 0
  %4256 = load ptr, ptr %329, align 8
  %4257 = insertvalue { ptr, ptr, ptr, i32 } %4255, ptr %4256, 1
  %4258 = load ptr, ptr %330, align 8
  %4259 = insertvalue { ptr, ptr, ptr, i32 } %4257, ptr %4258, 2
  %4260 = load i32, ptr %331, align 4
  %4261 = insertvalue { ptr, ptr, ptr, i32 } %4259, i32 %4260, 3
  %hash_coef_ptr.i.i186.i4387 = getelementptr i8, ptr %4254, i64 8
  %tbl_size_ptr.i.i187.i4388 = getelementptr i8, ptr %4254, i64 16
  %offset_tbl_ptr.i.i188.i4389 = getelementptr i8, ptr %4254, i64 40
  %hash_coef.i.i189.i4390 = load i64, ptr %hash_coef_ptr.i.i186.i4387, align 4
  %tbl_size.i.i190.i4391 = load i64, ptr %tbl_size_ptr.i.i187.i4388, align 4
  %offset_tbl.i.i191.i4392 = load ptr, ptr %offset_tbl_ptr.i.i188.i4389, align 8
  %product.i.i.i192.i4393 = mul i64 %hash_coef.i.i189.i4390, -5261542750394134544
  %shifted.i.i.i193.i4394 = lshr i64 %product.i.i.i192.i4393, 32
  %xored.i.i.i194.i4395 = xor i64 %shifted.i.i.i193.i4394, %product.i.i.i192.i4393
  %hash.i.i.i195.i4396 = and i64 %xored.i.i.i194.i4395, %tbl_size.i.i190.i4391
  %offset_ptr.i.i196.i4397 = getelementptr i32, ptr %offset_tbl.i.i191.i4392, i64 %hash.i.i.i195.i4396
  %offset.i.i197.i4398 = load i32, ptr %offset_ptr.i.i196.i4397, align 4
  %eq.i200.i4399 = icmp eq i32 %4260, %offset.i.i197.i4398
  call void @llvm.assume(i1 %eq.i200.i4399) #30
  %4262 = load ptr, ptr %result.i136, align 8
  %4263 = load ptr, ptr %311, align 8
  %result.i.i4400 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %4264 = getelementptr i8, ptr %result.i.i4400, i64 16
  store ptr %4263, ptr %4264, align 8
  %4265 = getelementptr i8, ptr %result.i.i4400, i64 8
  store ptr %4262, ptr %4265, align 8
  %4266 = getelementptr i8, ptr %result.i.i4400, i64 24
  store ptr null, ptr %4266, align 8
  %4267 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i4400)
  store ptr @Entry, ptr %result.i.i4400, align 8
  store ptr @_parameterization_Ptri32, ptr %69, align 8
  store ptr %result.i.i4400, ptr %464, align 8
  %4268 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %69)
  %4269 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4254)
  %4270 = sext i32 %4260 to i64
  %4271 = getelementptr ptr, ptr %4254, i64 %4270
  %4272 = getelementptr i8, ptr %4271, i64 128
  %4273 = load ptr, ptr %4272, align 8
  store ptr @i32_typ, ptr %70, align 8
  store ptr %.fca.0.extract11.i3346, ptr %465, align 8
  %4274 = call ptr %4273({ ptr, ptr, ptr, i32 } %4261, ptr nonnull %70)
  call void %4274({ ptr, ptr, ptr, i32 } %4261, { ptr, ptr, ptr, i32 } %4261, ptr nonnull %69, i32 %4234, { ptr, i160 } %4252)
  %4275 = icmp ne ptr %.fca.0.extract112.i4375, @nil_typ
  %4276 = icmp ne ptr %.fca.0.extract112.i4375, null
  %.not140.i4401 = and i1 %4275, %4276
  br i1 %.not140.i4401, label %.cont.cont.i4340, label %4365

4277:                                             ; preds = %4202
  %4278 = add i32 %4212, 2127912214
  %4279 = shl i32 %4212, 12
  %4280 = add i32 %4278, %4279
  %4281 = ashr i32 %4280, 19
  %4282 = xor i32 %4280, %4281
  %4283 = xor i32 %4282, -949894596
  %4284 = add i32 %4283, 374761393
  %4285 = shl i32 %4283, 5
  %4286 = add i32 %4284, %4285
  %4287 = add i32 %4286, -744332180
  %4288 = shl i32 %4286, 9
  %4289 = xor i32 %4287, %4288
  %4290 = add i32 %4289, -42973499
  %4291 = shl i32 %4289, 3
  %4292 = add i32 %4290, %4291
  %4293 = ashr i32 %4292, 16
  %4294 = xor i32 %4292, %4293
  %4295 = xor i32 %4294, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %4296 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4297 = load ptr, ptr %345, align 8
  %4298 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4297, 0
  %4299 = load ptr, ptr %346, align 8
  %4300 = insertvalue { ptr, ptr, ptr, i32 } %4298, ptr %4299, 1
  %4301 = load ptr, ptr %347, align 8
  %4302 = insertvalue { ptr, ptr, ptr, i32 } %4300, ptr %4301, 2
  %4303 = load i32, ptr %348, align 4
  %4304 = insertvalue { ptr, ptr, ptr, i32 } %4302, i32 %4303, 3
  %hash_coef_ptr.i.i10.i5334 = getelementptr i8, ptr %4297, i64 8
  %tbl_size_ptr.i.i11.i5335 = getelementptr i8, ptr %4297, i64 16
  %offset_tbl_ptr.i.i12.i5336 = getelementptr i8, ptr %4297, i64 40
  %hash_coef.i.i13.i5337 = load i64, ptr %hash_coef_ptr.i.i10.i5334, align 4
  %tbl_size.i.i14.i5338 = load i64, ptr %tbl_size_ptr.i.i11.i5335, align 4
  %offset_tbl.i.i15.i5339 = load ptr, ptr %offset_tbl_ptr.i.i12.i5336, align 8
  %product.i.i.i16.i5340 = mul i64 %hash_coef.i.i13.i5337, -5261542750394134544
  %shifted.i.i.i17.i5341 = lshr i64 %product.i.i.i16.i5340, 32
  %xored.i.i.i18.i5342 = xor i64 %shifted.i.i.i17.i5341, %product.i.i.i16.i5340
  %hash.i.i.i19.i5343 = and i64 %xored.i.i.i18.i5342, %tbl_size.i.i14.i5338
  %offset_ptr.i.i20.i5344 = getelementptr i32, ptr %offset_tbl.i.i15.i5339, i64 %hash.i.i.i19.i5343
  %offset.i.i21.i5345 = load i32, ptr %offset_ptr.i.i20.i5344, align 4
  %eq.i.i5346 = icmp eq i32 %4303, %offset.i.i21.i5345
  call void @llvm.assume(i1 %eq.i.i5346) #30
  %4305 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4306 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4297)
  %4307 = sext i32 %4303 to i64
  %4308 = getelementptr ptr, ptr %4297, i64 %4307
  %4309 = getelementptr i8, ptr %4308, i64 64
  %4310 = load ptr, ptr %4309, align 8
  %4311 = call ptr %4310({ ptr, ptr, ptr, i32 } %4304, ptr nonnull %2)
  %4312 = call i32 %4311({ ptr, ptr, ptr, i32 } %4304, { ptr, ptr, ptr, i32 } %4304, ptr nonnull %2)
  %4313 = add i32 %4312, -1
  %4314 = and i32 %4313, %4295
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %4315 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4316 = load ptr, ptr %345, align 8
  %4317 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4316, 0
  %4318 = load ptr, ptr %346, align 8
  %4319 = insertvalue { ptr, ptr, ptr, i32 } %4317, ptr %4318, 1
  %4320 = load ptr, ptr %347, align 8
  %4321 = insertvalue { ptr, ptr, ptr, i32 } %4319, ptr %4320, 2
  %4322 = load i32, ptr %348, align 4
  %4323 = insertvalue { ptr, ptr, ptr, i32 } %4321, i32 %4322, 3
  %hash_coef_ptr.i.i202.i4294 = getelementptr i8, ptr %4316, i64 8
  %tbl_size_ptr.i.i203.i4295 = getelementptr i8, ptr %4316, i64 16
  %offset_tbl_ptr.i.i204.i4296 = getelementptr i8, ptr %4316, i64 40
  %hash_coef.i.i205.i4297 = load i64, ptr %hash_coef_ptr.i.i202.i4294, align 4
  %tbl_size.i.i206.i4298 = load i64, ptr %tbl_size_ptr.i.i203.i4295, align 4
  %offset_tbl.i.i207.i4299 = load ptr, ptr %offset_tbl_ptr.i.i204.i4296, align 8
  %product.i.i.i208.i4300 = mul i64 %hash_coef.i.i205.i4297, -5261542750394134544
  %shifted.i.i.i209.i4301 = lshr i64 %product.i.i.i208.i4300, 32
  %xored.i.i.i210.i4302 = xor i64 %shifted.i.i.i209.i4301, %product.i.i.i208.i4300
  %hash.i.i.i211.i4303 = and i64 %xored.i.i.i210.i4302, %tbl_size.i.i206.i4298
  %offset_ptr.i.i212.i4304 = getelementptr i32, ptr %offset_tbl.i.i207.i4299, i64 %hash.i.i.i211.i4303
  %offset.i.i213.i4305 = load i32, ptr %offset_ptr.i.i212.i4304, align 4
  %eq.i216.i4306 = icmp eq i32 %4322, %offset.i.i213.i4305
  call void @llvm.assume(i1 %eq.i216.i4306) #30
  store ptr @_parameterization_Ptri32, ptr %75, align 8
  %4324 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %75)
  %4325 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4316)
  %4326 = sext i32 %4322 to i64
  %4327 = getelementptr ptr, ptr %4316, i64 %4326
  %4328 = getelementptr i8, ptr %4327, i64 120
  %4329 = load ptr, ptr %4328, align 8
  store ptr @i32_typ, ptr %76, align 8
  %4330 = call ptr %4329({ ptr, ptr, ptr, i32 } %4323, ptr nonnull %76)
  %4331 = call { ptr, i160 } %4330({ ptr, ptr, ptr, i32 } %4323, { ptr, ptr, ptr, i32 } %4323, ptr nonnull %75, i32 %4314)
  %.fca.0.extract87.i4307 = extractvalue { ptr, i160 } %4331, 0
  %.sroa.3.0.insert.ext.i4308 = zext i32 %offset.i.i260.i43574448 to i160
  %.sroa.3.0.insert.shift.i4309 = shl nuw i160 %.sroa.3.0.insert.ext.i4308, 128
  %.sroa.2.0.insert.ext.i4310 = zext i64 %4205 to i160
  %.sroa.2.0.insert.shift.i4311 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i4310, 64
  %.sroa.2.0.insert.insert.i4312 = or disjoint i160 %.sroa.2.0.insert.shift.i4311, %.sroa.3.0.insert.shift.i4309
  %.sroa.0.0.insert.ext.i4313 = zext i64 %4204 to i160
  %.sroa.0.0.insert.insert.i4314 = or disjoint i160 %.sroa.2.0.insert.insert.i4312, %.sroa.0.0.insert.ext.i4313
  %4332 = insertvalue { ptr, i160 } %4201, i160 %.sroa.0.0.insert.insert.i4314, 1
  %4333 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4334 = load ptr, ptr %345, align 8
  %4335 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4334, 0
  %4336 = load ptr, ptr %346, align 8
  %4337 = insertvalue { ptr, ptr, ptr, i32 } %4335, ptr %4336, 1
  %4338 = load ptr, ptr %347, align 8
  %4339 = insertvalue { ptr, ptr, ptr, i32 } %4337, ptr %4338, 2
  %4340 = load i32, ptr %348, align 4
  %4341 = insertvalue { ptr, ptr, ptr, i32 } %4339, i32 %4340, 3
  %hash_coef_ptr.i.i218.i4319 = getelementptr i8, ptr %4334, i64 8
  %tbl_size_ptr.i.i219.i4320 = getelementptr i8, ptr %4334, i64 16
  %offset_tbl_ptr.i.i220.i4321 = getelementptr i8, ptr %4334, i64 40
  %hash_coef.i.i221.i4322 = load i64, ptr %hash_coef_ptr.i.i218.i4319, align 4
  %tbl_size.i.i222.i4323 = load i64, ptr %tbl_size_ptr.i.i219.i4320, align 4
  %offset_tbl.i.i223.i4324 = load ptr, ptr %offset_tbl_ptr.i.i220.i4321, align 8
  %product.i.i.i224.i4325 = mul i64 %hash_coef.i.i221.i4322, -5261542750394134544
  %shifted.i.i.i225.i4326 = lshr i64 %product.i.i.i224.i4325, 32
  %xored.i.i.i226.i4327 = xor i64 %shifted.i.i.i225.i4326, %product.i.i.i224.i4325
  %hash.i.i.i227.i4328 = and i64 %xored.i.i.i226.i4327, %tbl_size.i.i222.i4323
  %offset_ptr.i.i228.i4329 = getelementptr i32, ptr %offset_tbl.i.i223.i4324, i64 %hash.i.i.i227.i4328
  %offset.i.i229.i4330 = load i32, ptr %offset_ptr.i.i228.i4329, align 4
  %eq.i232.i4331 = icmp eq i32 %4340, %offset.i.i229.i4330
  call void @llvm.assume(i1 %eq.i232.i4331) #30
  %4342 = load ptr, ptr %result.i136, align 8
  %4343 = load ptr, ptr %311, align 8
  %result.i233.i4332 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %4344 = getelementptr i8, ptr %result.i233.i4332, i64 16
  store ptr %4343, ptr %4344, align 8
  %4345 = getelementptr i8, ptr %result.i233.i4332, i64 8
  store ptr %4342, ptr %4345, align 8
  %4346 = getelementptr i8, ptr %result.i233.i4332, i64 24
  store ptr null, ptr %4346, align 8
  %4347 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i233.i4332)
  store ptr @Entry, ptr %result.i233.i4332, align 8
  store ptr @_parameterization_Ptri32, ptr %77, align 8
  store ptr %result.i233.i4332, ptr %462, align 8
  %4348 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %77)
  %4349 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4334)
  %4350 = sext i32 %4340 to i64
  %4351 = getelementptr ptr, ptr %4334, i64 %4350
  %4352 = getelementptr i8, ptr %4351, i64 128
  %4353 = load ptr, ptr %4352, align 8
  store ptr @i32_typ, ptr %78, align 8
  store ptr %.fca.0.extract11.i3346, ptr %463, align 8
  %4354 = call ptr %4353({ ptr, ptr, ptr, i32 } %4341, ptr nonnull %78)
  call void %4354({ ptr, ptr, ptr, i32 } %4341, { ptr, ptr, ptr, i32 } %4341, ptr nonnull %77, i32 %4314, { ptr, i160 } %4332)
  %4355 = icmp ne ptr %.fca.0.extract87.i4307, @nil_typ
  %4356 = icmp ne ptr %.fca.0.extract87.i4307, null
  %.not138.i4333 = and i1 %4355, %4356
  br i1 %.not138.i4333, label %.cont.cont.i4340, label %4365

.cont.cont.i4340:                                 ; preds = %4277, %4215
  %.sink4466 = phi { ptr, i160 } [ %4251, %4215 ], [ %4331, %4277 ]
  %4357 = phi i32 [ 2, %4215 ], [ 1, %4277 ]
  %vptr.i248.sroa.speculated.i4343 = phi ptr [ %.fca.0.extract112.i4375, %4215 ], [ %.fca.0.extract87.i4307, %4277 ]
  %.fca.1.extract89.i4336 = extractvalue { ptr, i160 } %.sink4466, 1
  %.sroa.3407.sroa.4.0.extract.shift.i4337 = lshr i160 %.fca.1.extract89.i4336, 64
  %4358 = trunc i160 %.sroa.3407.sroa.4.0.extract.shift.i4337 to i64
  %4359 = insertelement <2 x i64> poison, i64 %4358, i64 0
  %4360 = trunc i160 %.fca.1.extract89.i4336 to i64
  %4361 = insertelement <2 x i64> %4359, i64 %4360, i64 1
  %hash_coef_ptr.i.i249.i4346 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i4343, i64 8
  %tbl_size_ptr.i.i250.i4347 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i4343, i64 16
  %offset_tbl_ptr.i.i251.i4348 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i4343, i64 40
  %hash_coef.i.i252.i4349 = load i64, ptr %hash_coef_ptr.i.i249.i4346, align 4
  %tbl_size.i.i253.i4350 = load i64, ptr %tbl_size_ptr.i.i250.i4347, align 4
  %offset_tbl.i.i254.i4351 = load ptr, ptr %offset_tbl_ptr.i.i251.i4348, align 8
  %product.i.i.i255.i4352 = mul i64 %hash_coef.i.i252.i4349, 4015701072841558310
  %shifted.i.i.i256.i4353 = lshr i64 %product.i.i.i255.i4352, 32
  %xored.i.i.i257.i4354 = xor i64 %shifted.i.i.i256.i4353, %product.i.i.i255.i4352
  %hash.i.i.i258.i4355 = and i64 %xored.i.i.i257.i4354, %tbl_size.i.i253.i4350
  %offset_ptr.i.i259.i4356 = getelementptr i32, ptr %offset_tbl.i.i254.i4351, i64 %hash.i.i.i258.i4355
  %offset.i.i260.i4357 = load i32, ptr %offset_ptr.i.i259.i4356, align 4
  %4362 = add nuw nsw i32 %.reg2mem193.0677.i4289, 1
  %4363 = load i32, ptr %351, align 4
  %4364 = icmp slt i32 %4362, %4363
  br i1 %4364, label %4202, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4407

4365:                                             ; preds = %4277, %4215
  %4366 = phi ptr [ %79, %4277 ], [ %71, %4215 ]
  %4367 = phi ptr [ %80, %4277 ], [ %72, %4215 ]
  %4368 = phi ptr [ %81, %4277 ], [ %73, %4215 ]
  %4369 = phi ptr [ %.sroa.0.i4253, %4277 ], [ %.sroa.0680.i4251, %4215 ]
  %4370 = phi ptr [ %82, %4277 ], [ %74, %4215 ]
  %4371 = load i32, ptr %349, align 4
  store i32 %4371, ptr %4366, align 4
  store i32 1, ptr %4367, align 4
  %4372 = add i32 %4371, 1
  store i32 %4372, ptr %4368, align 4
  %4373 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  store i32 %4372, ptr %349, align 4
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %4370, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %4369, align 8
  br label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4407

HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4407: ; preds = %.cont.cont.i4340, %4190, %4365
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %67)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %68)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %69)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %70)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %71)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %72)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %73)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i4251)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %74)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %75)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %76)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %77)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %78)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %79)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %80)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %81)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i4253)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %82)
  br label %._crit_edge1.i3348

._crit_edge1.i3348:                               ; preds = %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4407, %4182
  %4374 = add nuw nsw i32 %.reg2mem13.079.i3345, 1
  %4375 = icmp slt i32 %4374, %3943
  br i1 %4375, label %4182, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3366

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3366.critedge: ; preds = %._crit_edge3.1.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %145)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %146)
  %4376 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %143)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %144)
  br label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3366

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3366: ; preds = %._crit_edge1.i3348, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3366.critedge
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %143)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %144)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %194)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %195)
  br label %HashMap_insert_keyK_valueV.exit

HashMap_insert_keyK_valueV.exit:                  ; preds = %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit1782.thread, %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit.thread, %.thread525.i, %.thread528.i, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3366
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %252)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %253)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %254)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %255)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %256)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %257)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %258)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %259)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %260)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %261)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %262)
  %4377 = add nsw i32 %.reg2mem170.0412, 1
  br label %._crit_edge

._crit_edge:                                      ; preds = %HashMap_insert_keyK_valueV.exit, %HashMap_get_keyK.exit
  %_parameterization_Ptri1583 = phi ptr [ @_parameterization_Ptri1, %HashMap_insert_keyK_valueV.exit ], [ %_parameterization_Ptri1, %HashMap_get_keyK.exit ]
  %.reg2mem166.0 = phi i32 [ %4377, %HashMap_insert_keyK_valueV.exit ], [ %.reg2mem170.0412, %HashMap_get_keyK.exit ]
  %4378 = add nuw nsw i32 %.reg2mem168.0411, 1
  %4379 = icmp slt i32 %.reg2mem166.0, %0
  %4380 = icmp slt i32 %4378, %352
  %4381 = and i1 %4380, %4379
  br i1 %4381, label %482, label %._crit_edge._crit_edge.loopexit

._crit_edge._crit_edge.loopexit:                  ; preds = %._crit_edge
  store ptr %_parameterization_Ptri1583, ptr %356, align 8
  br label %._crit_edge._crit_edge

._crit_edge._crit_edge:                           ; preds = %._crit_edge._crit_edge.loopexit, %1
  %4382 = sext i32 %0 to i64
  %4383 = shl nsw i64 %4382, 5
  %result.i.i461 = call noalias ptr @bump_malloc_inner(i64 noundef %4383, ptr nonnull @current_ptr) #29
  %4384 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %4385 = mul i32 %0, 20
  %4386 = icmp sgt i32 %4385, 0
  %4387 = and i1 %353, %4386
  br i1 %4387, label %.lr.ph417, label %._crit_edge418

.lr.ph417:                                        ; preds = %._crit_edge._crit_edge
  %result.i121.promoted = load i32, ptr %result.i121, align 4
  %4388 = call ptr @llvm.invariant.start.p0(i64 40, ptr nonnull @PRNG)
  br label %4389

4389:                                             ; preds = %.lr.ph417, %4566
  %4390 = phi i32 [ %result.i121.promoted, %.lr.ph417 ], [ %4393, %4566 ]
  %.reg2mem160.0415 = phi i32 [ 0, %.lr.ph417 ], [ %.reg2mem156.0, %4566 ]
  %.reg2mem158.0414 = phi i32 [ 0, %.lr.ph417 ], [ %4567, %4566 ]
  %4391 = mul i32 %4390, 1103515245
  %4392 = add i32 %4391, 12345
  %4393 = and i32 %4392, 2147483647
  %.sroa.073.0.insert.ext = zext nneg i32 %4393 to i160
  %4394 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.073.0.insert.ext, 1
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0271.i695)
  call void @llvm.lifetime.start.p0(i64 20, ptr nonnull %.sroa.1.i696)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i697)
  call void @llvm.lifetime.start.p0(i64 20, ptr nonnull %.sroa.2.i698)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %248)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %249)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0123.i699)
  call void @llvm.lifetime.start.p0(i64 20, ptr nonnull %.sroa.2124.i700)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0115.i701)
  call void @llvm.lifetime.start.p0(i64 20, ptr nonnull %.sroa.2116.i702)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %250)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %251)
  %4395 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4396 = load ptr, ptr %316, align 8
  %4397 = call i32 %4396({ ptr, i160 } %4394)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %4398 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4399 = load ptr, ptr %328, align 8
  %4400 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4399, 0
  %4401 = load ptr, ptr %329, align 8
  %4402 = insertvalue { ptr, ptr, ptr, i32 } %4400, ptr %4401, 1
  %4403 = load ptr, ptr %330, align 8
  %4404 = insertvalue { ptr, ptr, ptr, i32 } %4402, ptr %4403, 2
  %4405 = load i32, ptr %331, align 4
  %4406 = insertvalue { ptr, ptr, ptr, i32 } %4404, i32 %4405, 3
  %hash_coef_ptr.i.i10.i1925 = getelementptr i8, ptr %4399, i64 8
  %tbl_size_ptr.i.i11.i1926 = getelementptr i8, ptr %4399, i64 16
  %offset_tbl_ptr.i.i12.i1927 = getelementptr i8, ptr %4399, i64 40
  %hash_coef.i.i13.i1928 = load i64, ptr %hash_coef_ptr.i.i10.i1925, align 4
  %tbl_size.i.i14.i1929 = load i64, ptr %tbl_size_ptr.i.i11.i1926, align 4
  %offset_tbl.i.i15.i1930 = load ptr, ptr %offset_tbl_ptr.i.i12.i1927, align 8
  %product.i.i.i16.i1931 = mul i64 %hash_coef.i.i13.i1928, -5261542750394134544
  %shifted.i.i.i17.i1932 = lshr i64 %product.i.i.i16.i1931, 32
  %xored.i.i.i18.i1933 = xor i64 %shifted.i.i.i17.i1932, %product.i.i.i16.i1931
  %hash.i.i.i19.i1934 = and i64 %xored.i.i.i18.i1933, %tbl_size.i.i14.i1929
  %offset_ptr.i.i20.i1935 = getelementptr i32, ptr %offset_tbl.i.i15.i1930, i64 %hash.i.i.i19.i1934
  %offset.i.i21.i1936 = load i32, ptr %offset_ptr.i.i20.i1935, align 4
  %eq.i.i1937 = icmp eq i32 %4405, %offset.i.i21.i1936
  call void @llvm.assume(i1 %eq.i.i1937) #30
  %4407 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4408 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4399)
  %4409 = sext i32 %4405 to i64
  %4410 = getelementptr ptr, ptr %4399, i64 %4409
  %4411 = getelementptr i8, ptr %4410, i64 64
  %4412 = load ptr, ptr %4411, align 8
  %4413 = call ptr %4412({ ptr, ptr, ptr, i32 } %4406, ptr nonnull %2)
  %4414 = call i32 %4413({ ptr, ptr, ptr, i32 } %4406, { ptr, ptr, ptr, i32 } %4406, ptr nonnull %2)
  %4415 = add i32 %4414, -1
  %4416 = and i32 %4415, %4397
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %4417 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4418 = load ptr, ptr %328, align 8
  %4419 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4418, 0
  %4420 = load ptr, ptr %329, align 8
  %4421 = insertvalue { ptr, ptr, ptr, i32 } %4419, ptr %4420, 1
  %4422 = load ptr, ptr %330, align 8
  %4423 = insertvalue { ptr, ptr, ptr, i32 } %4421, ptr %4422, 2
  %4424 = load i32, ptr %331, align 4
  %4425 = insertvalue { ptr, ptr, ptr, i32 } %4423, i32 %4424, 3
  %hash_coef_ptr.i.i130.i721 = getelementptr i8, ptr %4418, i64 8
  %tbl_size_ptr.i.i131.i722 = getelementptr i8, ptr %4418, i64 16
  %offset_tbl_ptr.i.i132.i723 = getelementptr i8, ptr %4418, i64 40
  %hash_coef.i.i133.i724 = load i64, ptr %hash_coef_ptr.i.i130.i721, align 4
  %tbl_size.i.i134.i725 = load i64, ptr %tbl_size_ptr.i.i131.i722, align 4
  %offset_tbl.i.i135.i726 = load ptr, ptr %offset_tbl_ptr.i.i132.i723, align 8
  %product.i.i.i136.i727 = mul i64 %hash_coef.i.i133.i724, -5261542750394134544
  %shifted.i.i.i137.i728 = lshr i64 %product.i.i.i136.i727, 32
  %xored.i.i.i138.i729 = xor i64 %shifted.i.i.i137.i728, %product.i.i.i136.i727
  %hash.i.i.i139.i730 = and i64 %xored.i.i.i138.i729, %tbl_size.i.i134.i725
  %offset_ptr.i.i140.i731 = getelementptr i32, ptr %offset_tbl.i.i135.i726, i64 %hash.i.i.i139.i730
  %offset.i.i141.i732 = load i32, ptr %offset_ptr.i.i140.i731, align 4
  %eq.i.i733 = icmp eq i32 %4424, %offset.i.i141.i732
  call void @llvm.assume(i1 %eq.i.i733) #30
  store ptr @_parameterization_Ptri32, ptr %250, align 8
  %4426 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %250)
  %4427 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4418)
  %4428 = sext i32 %4424 to i64
  %4429 = getelementptr ptr, ptr %4418, i64 %4428
  %4430 = getelementptr i8, ptr %4429, i64 120
  %4431 = load ptr, ptr %4430, align 8
  store ptr @i32_typ, ptr %251, align 8
  %4432 = call ptr %4431({ ptr, ptr, ptr, i32 } %4425, ptr nonnull %251)
  %4433 = call { ptr, i160 } %4432({ ptr, ptr, ptr, i32 } %4425, { ptr, ptr, ptr, i32 } %4425, ptr nonnull %250, i32 %4416)
  %.fca.0.extract.i734 = extractvalue { ptr, i160 } %4433, 0
  %4434 = icmp ne ptr %.fca.0.extract.i734, @nil_typ
  %4435 = icmp ne ptr %.fca.0.extract.i734, null
  %.not126.i735 = and i1 %4434, %4435
  br i1 %.not126.i735, label %4436, label %.critedge.i736

4436:                                             ; preds = %4389
  %.fca.1.extract.i787 = extractvalue { ptr, i160 } %4433, 1
  %.sroa.5.8.extract.trunc.i788 = trunc i160 %.fca.1.extract.i787 to i64
  %4437 = inttoptr i64 %.sroa.5.8.extract.trunc.i788 to ptr
  %.sroa.9.8.extract.shift.i789 = lshr i160 %.fca.1.extract.i787, 64
  %.sroa.9.8.extract.trunc.i790 = trunc i160 %.sroa.9.8.extract.shift.i789 to i64
  %4438 = inttoptr i64 %.sroa.9.8.extract.trunc.i790 to ptr
  %hash_coef_ptr.i.i144.i791 = getelementptr i8, ptr %.fca.0.extract.i734, i64 8
  %tbl_size_ptr.i.i145.i792 = getelementptr i8, ptr %.fca.0.extract.i734, i64 16
  %offset_tbl_ptr.i.i146.i793 = getelementptr i8, ptr %.fca.0.extract.i734, i64 40
  %hash_coef.i.i147.i794 = load i64, ptr %hash_coef_ptr.i.i144.i791, align 4
  %tbl_size.i.i148.i795 = load i64, ptr %tbl_size_ptr.i.i145.i792, align 4
  %offset_tbl.i.i149.i796 = load ptr, ptr %offset_tbl_ptr.i.i146.i793, align 8
  %product.i.i.i150.i797 = mul i64 %hash_coef.i.i147.i794, 4015701072841558310
  %shifted.i.i.i151.i798 = lshr i64 %product.i.i.i150.i797, 32
  %xored.i.i.i152.i799 = xor i64 %shifted.i.i.i151.i798, %product.i.i.i150.i797
  %hash.i.i.i153.i800 = and i64 %xored.i.i.i152.i799, %tbl_size.i.i148.i795
  %offset_ptr.i.i154.i801 = getelementptr i32, ptr %offset_tbl.i.i149.i796, i64 %hash.i.i.i153.i800
  %offset.i.i155.i802 = load i32, ptr %offset_ptr.i.i154.i801, align 4
  %4439 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract.i734, 0
  %4440 = insertvalue { ptr, ptr, ptr, i32 } %4439, ptr %4437, 1
  %4441 = insertvalue { ptr, ptr, ptr, i32 } %4440, ptr %4438, 2
  %4442 = insertvalue { ptr, ptr, ptr, i32 } %4441, i32 %offset.i.i155.i802, 3
  %4443 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4444 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4445 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract.i734)
  %4446 = sext i32 %offset.i.i155.i802 to i64
  %4447 = getelementptr ptr, ptr %.fca.0.extract.i734, i64 %4446
  %4448 = getelementptr i8, ptr %4447, i64 64
  %4449 = load ptr, ptr %4448, align 8
  %4450 = call ptr %4449({ ptr, ptr, ptr, i32 } %4442, ptr nonnull %2)
  %4451 = call i32 %4450({ ptr, ptr, ptr, i32 } %4442, { ptr, ptr, ptr, i32 } %4442, ptr nonnull %2)
  %4452 = icmp eq i32 %4451, %4397
  %4453 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4454 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4455 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract.i734)
  %4456 = getelementptr i8, ptr %4447, i64 48
  %4457 = load ptr, ptr %4456, align 8
  %4458 = call ptr %4457({ ptr, ptr, ptr, i32 } %4442, ptr nonnull %2)
  %4459 = call { ptr, i160 } %4458({ ptr, ptr, ptr, i32 } %4442, { ptr, ptr, ptr, i32 } %4442, ptr nonnull %2)
  %4460 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4461 = load ptr, ptr %317, align 8
  %4462 = call i1 %4461({ ptr, i160 } %4459, { ptr, i160 } %4394)
  %4463 = and i1 %4452, %4462
  br i1 %4463, label %HashMap_get_keyK.exit804, label %.critedge.i736

.critedge.i736:                                   ; preds = %4436, %4389
  %4464 = add i32 %4397, 2127912214
  %4465 = shl i32 %4397, 12
  %4466 = add i32 %4464, %4465
  %4467 = ashr i32 %4466, 19
  %4468 = xor i32 %4466, %4467
  %4469 = xor i32 %4468, -949894596
  %4470 = add i32 %4469, 374761393
  %4471 = shl i32 %4469, 5
  %4472 = add i32 %4470, %4471
  %4473 = add i32 %4472, -744332180
  %4474 = shl i32 %4472, 9
  %4475 = xor i32 %4473, %4474
  %4476 = add i32 %4475, -42973499
  %4477 = shl i32 %4475, 3
  %4478 = add i32 %4476, %4477
  %4479 = ashr i32 %4478, 16
  %4480 = xor i32 %4478, %4479
  %4481 = xor i32 %4480, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %4482 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4483 = load ptr, ptr %345, align 8
  %4484 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4483, 0
  %4485 = load ptr, ptr %346, align 8
  %4486 = insertvalue { ptr, ptr, ptr, i32 } %4484, ptr %4485, 1
  %4487 = load ptr, ptr %347, align 8
  %4488 = insertvalue { ptr, ptr, ptr, i32 } %4486, ptr %4487, 2
  %4489 = load i32, ptr %348, align 4
  %4490 = insertvalue { ptr, ptr, ptr, i32 } %4488, i32 %4489, 3
  %hash_coef_ptr.i.i10.i1956 = getelementptr i8, ptr %4483, i64 8
  %tbl_size_ptr.i.i11.i1957 = getelementptr i8, ptr %4483, i64 16
  %offset_tbl_ptr.i.i12.i1958 = getelementptr i8, ptr %4483, i64 40
  %hash_coef.i.i13.i1959 = load i64, ptr %hash_coef_ptr.i.i10.i1956, align 4
  %tbl_size.i.i14.i1960 = load i64, ptr %tbl_size_ptr.i.i11.i1957, align 4
  %offset_tbl.i.i15.i1961 = load ptr, ptr %offset_tbl_ptr.i.i12.i1958, align 8
  %product.i.i.i16.i1962 = mul i64 %hash_coef.i.i13.i1959, -5261542750394134544
  %shifted.i.i.i17.i1963 = lshr i64 %product.i.i.i16.i1962, 32
  %xored.i.i.i18.i1964 = xor i64 %shifted.i.i.i17.i1963, %product.i.i.i16.i1962
  %hash.i.i.i19.i1965 = and i64 %xored.i.i.i18.i1964, %tbl_size.i.i14.i1960
  %offset_ptr.i.i20.i1966 = getelementptr i32, ptr %offset_tbl.i.i15.i1961, i64 %hash.i.i.i19.i1965
  %offset.i.i21.i1967 = load i32, ptr %offset_ptr.i.i20.i1966, align 4
  %eq.i.i1968 = icmp eq i32 %4489, %offset.i.i21.i1967
  call void @llvm.assume(i1 %eq.i.i1968) #30
  %4491 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4492 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4483)
  %4493 = sext i32 %4489 to i64
  %4494 = getelementptr ptr, ptr %4483, i64 %4493
  %4495 = getelementptr i8, ptr %4494, i64 64
  %4496 = load ptr, ptr %4495, align 8
  %4497 = call ptr %4496({ ptr, ptr, ptr, i32 } %4490, ptr nonnull %2)
  %4498 = call i32 %4497({ ptr, ptr, ptr, i32 } %4490, { ptr, ptr, ptr, i32 } %4490, ptr nonnull %2)
  %4499 = add i32 %4498, -1
  %4500 = and i32 %4499, %4481
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %4501 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4502 = load ptr, ptr %345, align 8
  %4503 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4502, 0
  %4504 = load ptr, ptr %346, align 8
  %4505 = insertvalue { ptr, ptr, ptr, i32 } %4503, ptr %4504, 1
  %4506 = load ptr, ptr %347, align 8
  %4507 = insertvalue { ptr, ptr, ptr, i32 } %4505, ptr %4506, 2
  %4508 = load i32, ptr %348, align 4
  %4509 = insertvalue { ptr, ptr, ptr, i32 } %4507, i32 %4508, 3
  %hash_coef_ptr.i.i158.i741 = getelementptr i8, ptr %4502, i64 8
  %tbl_size_ptr.i.i159.i742 = getelementptr i8, ptr %4502, i64 16
  %offset_tbl_ptr.i.i160.i743 = getelementptr i8, ptr %4502, i64 40
  %hash_coef.i.i161.i744 = load i64, ptr %hash_coef_ptr.i.i158.i741, align 4
  %tbl_size.i.i162.i745 = load i64, ptr %tbl_size_ptr.i.i159.i742, align 4
  %offset_tbl.i.i163.i746 = load ptr, ptr %offset_tbl_ptr.i.i160.i743, align 8
  %product.i.i.i164.i747 = mul i64 %hash_coef.i.i161.i744, -5261542750394134544
  %shifted.i.i.i165.i748 = lshr i64 %product.i.i.i164.i747, 32
  %xored.i.i.i166.i749 = xor i64 %shifted.i.i.i165.i748, %product.i.i.i164.i747
  %hash.i.i.i167.i750 = and i64 %xored.i.i.i166.i749, %tbl_size.i.i162.i745
  %offset_ptr.i.i168.i751 = getelementptr i32, ptr %offset_tbl.i.i163.i746, i64 %hash.i.i.i167.i750
  %offset.i.i169.i752 = load i32, ptr %offset_ptr.i.i168.i751, align 4
  %eq.i172.i753 = icmp eq i32 %4508, %offset.i.i169.i752
  call void @llvm.assume(i1 %eq.i172.i753) #30
  store ptr @_parameterization_Ptri32, ptr %248, align 8
  %4510 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %248)
  %4511 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4502)
  %4512 = sext i32 %4508 to i64
  %4513 = getelementptr ptr, ptr %4502, i64 %4512
  %4514 = getelementptr i8, ptr %4513, i64 120
  %4515 = load ptr, ptr %4514, align 8
  store ptr @i32_typ, ptr %249, align 8
  %4516 = call ptr %4515({ ptr, ptr, ptr, i32 } %4509, ptr nonnull %249)
  %4517 = call { ptr, i160 } %4516({ ptr, ptr, ptr, i32 } %4509, { ptr, ptr, ptr, i32 } %4509, ptr nonnull %248, i32 %4500)
  %.fca.0.extract57.i754 = extractvalue { ptr, i160 } %4517, 0
  %4518 = icmp ne ptr %.fca.0.extract57.i754, @nil_typ
  %4519 = icmp ne ptr %.fca.0.extract57.i754, null
  %.not128.i755 = and i1 %4518, %4519
  br i1 %.not128.i755, label %4520, label %HashMap_get_keyK.exit804.thread

4520:                                             ; preds = %.critedge.i736
  %.fca.1.extract59.i760 = extractvalue { ptr, i160 } %4517, 1
  %.sroa.6.8.extract.trunc.i761 = trunc i160 %.fca.1.extract59.i760 to i64
  %4521 = inttoptr i64 %.sroa.6.8.extract.trunc.i761 to ptr
  %.sroa.11.8.extract.shift.i762 = lshr i160 %.fca.1.extract59.i760, 64
  %.sroa.11.8.extract.trunc.i763 = trunc i160 %.sroa.11.8.extract.shift.i762 to i64
  %4522 = inttoptr i64 %.sroa.11.8.extract.trunc.i763 to ptr
  %hash_coef_ptr.i.i174.i764 = getelementptr i8, ptr %.fca.0.extract57.i754, i64 8
  %tbl_size_ptr.i.i175.i765 = getelementptr i8, ptr %.fca.0.extract57.i754, i64 16
  %offset_tbl_ptr.i.i176.i766 = getelementptr i8, ptr %.fca.0.extract57.i754, i64 40
  %hash_coef.i.i177.i767 = load i64, ptr %hash_coef_ptr.i.i174.i764, align 4
  %tbl_size.i.i178.i768 = load i64, ptr %tbl_size_ptr.i.i175.i765, align 4
  %offset_tbl.i.i179.i769 = load ptr, ptr %offset_tbl_ptr.i.i176.i766, align 8
  %product.i.i.i180.i770 = mul i64 %hash_coef.i.i177.i767, 4015701072841558310
  %shifted.i.i.i181.i771 = lshr i64 %product.i.i.i180.i770, 32
  %xored.i.i.i182.i772 = xor i64 %shifted.i.i.i181.i771, %product.i.i.i180.i770
  %hash.i.i.i183.i773 = and i64 %xored.i.i.i182.i772, %tbl_size.i.i178.i768
  %offset_ptr.i.i184.i774 = getelementptr i32, ptr %offset_tbl.i.i179.i769, i64 %hash.i.i.i183.i773
  %offset.i.i185.i775 = load i32, ptr %offset_ptr.i.i184.i774, align 4
  %4523 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract57.i754, 0
  %4524 = insertvalue { ptr, ptr, ptr, i32 } %4523, ptr %4521, 1
  %4525 = insertvalue { ptr, ptr, ptr, i32 } %4524, ptr %4522, 2
  %4526 = insertvalue { ptr, ptr, ptr, i32 } %4525, i32 %offset.i.i185.i775, 3
  %4527 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4528 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4529 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract57.i754)
  %4530 = sext i32 %offset.i.i185.i775 to i64
  %4531 = getelementptr ptr, ptr %.fca.0.extract57.i754, i64 %4530
  %4532 = getelementptr i8, ptr %4531, i64 64
  %4533 = load ptr, ptr %4532, align 8
  %4534 = call ptr %4533({ ptr, ptr, ptr, i32 } %4526, ptr nonnull %2)
  %4535 = call i32 %4534({ ptr, ptr, ptr, i32 } %4526, { ptr, ptr, ptr, i32 } %4526, ptr nonnull %2)
  %4536 = icmp eq i32 %4535, %4397
  %4537 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4538 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4539 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract57.i754)
  %4540 = getelementptr i8, ptr %4531, i64 48
  %4541 = load ptr, ptr %4540, align 8
  %4542 = call ptr %4541({ ptr, ptr, ptr, i32 } %4526, ptr nonnull %2)
  %4543 = call { ptr, i160 } %4542({ ptr, ptr, ptr, i32 } %4526, { ptr, ptr, ptr, i32 } %4526, ptr nonnull %2)
  %4544 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4545 = load ptr, ptr %317, align 8
  %4546 = call i1 %4545({ ptr, i160 } %4543, { ptr, i160 } %4394)
  %4547 = and i1 %4536, %4546
  br i1 %4547, label %HashMap_get_keyK.exit804, label %HashMap_get_keyK.exit804.thread

HashMap_get_keyK.exit804.thread:                  ; preds = %4520, %.critedge.i736
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0271.i695)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.1.i696)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i697)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2.i698)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %248)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %249)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0123.i699)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2124.i700)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0115.i701)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2116.i702)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %250)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %251)
  br label %4559

HashMap_get_keyK.exit804:                         ; preds = %4436, %4520
  %.pre-phi313.i778 = phi i64 [ %4446, %4436 ], [ %4530, %4520 ]
  %.pre-phi312.i779 = phi { ptr, ptr, ptr, i32 } [ %4442, %4436 ], [ %4526, %4520 ]
  %.reg2mem65.0.sroa.phi290.sroa.speculated.i780 = phi ptr [ %.fca.0.extract.i734, %4436 ], [ %.fca.0.extract57.i754, %4520 ]
  %.reg2mem59.0.sroa.phi120289.i781 = phi ptr [ %.sroa.1.i696, %4436 ], [ %.sroa.2124.i700, %4520 ]
  %.reg2mem59.0.sroa.phi117288.i782 = phi ptr [ %.sroa.0271.i695, %4436 ], [ %.sroa.0123.i699, %4520 ]
  %.reg2mem57.0.sroa.phi94287.i783 = phi ptr [ %.sroa.2.i698, %4436 ], [ %.sroa.2116.i702, %4520 ]
  %.reg2mem57.0.sroa.phi91286.i784 = phi ptr [ %.sroa.0.i697, %4436 ], [ %.sroa.0115.i701, %4520 ]
  %4548 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4549 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4550 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.reg2mem65.0.sroa.phi290.sroa.speculated.i780)
  %4551 = getelementptr ptr, ptr %.reg2mem65.0.sroa.phi290.sroa.speculated.i780, i64 %.pre-phi313.i778
  %4552 = getelementptr i8, ptr %4551, i64 56
  %4553 = load ptr, ptr %4552, align 8
  %4554 = call ptr %4553({ ptr, ptr, ptr, i32 } %.pre-phi312.i779, ptr nonnull %2)
  %4555 = call { ptr, i160 } %4554({ ptr, ptr, ptr, i32 } %.pre-phi312.i779, { ptr, ptr, ptr, i32 } %.pre-phi312.i779, ptr nonnull %2)
  %.fca.0.extract97.i785 = extractvalue { ptr, i160 } %4555, 0
  store ptr %.fca.0.extract97.i785, ptr %.reg2mem59.0.sroa.phi117288.i782, align 8
  %.fca.1.extract99.i786 = extractvalue { ptr, i160 } %4555, 1
  store i160 %.fca.1.extract99.i786, ptr %.reg2mem59.0.sroa.phi120289.i781, align 8
  store ptr %.fca.0.extract97.i785, ptr %.reg2mem57.0.sroa.phi91286.i784, align 8
  store i160 %.fca.1.extract99.i786, ptr %.reg2mem57.0.sroa.phi94287.i783, align 8
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0271.i695)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.1.i696)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i697)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2.i698)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %248)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %249)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0123.i699)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2124.i700)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0115.i701)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2116.i702)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %250)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %251)
  %4556 = icmp eq ptr %.fca.0.extract97.i785, @nil_typ
  %4557 = icmp eq ptr %.fca.0.extract97.i785, null
  %4558 = or i1 %4556, %4557
  br i1 %4558, label %4559, label %4566

4559:                                             ; preds = %HashMap_get_keyK.exit804.thread, %HashMap_get_keyK.exit804
  %4560 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %4561 = sext i32 %.reg2mem160.0415 to i64
  %4562 = shl nsw i64 %4561, 5
  %4563 = getelementptr i8, ptr %result.i.i461, i64 %4562
  store ptr @i32_typ, ptr %4563, align 8
  %4564 = getelementptr i8, ptr %4563, i64 8
  store i160 %.sroa.073.0.insert.ext, ptr %4564, align 4
  %4565 = add nsw i32 %.reg2mem160.0415, 1
  br label %4566

4566:                                             ; preds = %4559, %HashMap_get_keyK.exit804
  %.reg2mem156.0 = phi i32 [ %4565, %4559 ], [ %.reg2mem160.0415, %HashMap_get_keyK.exit804 ]
  %4567 = add nuw nsw i32 %.reg2mem158.0414, 1
  %4568 = icmp slt i32 %.reg2mem156.0, %0
  %4569 = icmp slt i32 %4567, %4385
  %4570 = and i1 %4569, %4568
  br i1 %4570, label %4389, label %._crit_edge418.loopexit

._crit_edge418.loopexit:                          ; preds = %4566
  store i32 %4393, ptr %result.i121, align 4
  %4571 = call i32 @llvm.smin.i32(i32 %.reg2mem156.0, i32 %0)
  br i1 %4568, label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit213, label %._crit_edge1

._crit_edge418:                                   ; preds = %._crit_edge._crit_edge
  %4572 = call i32 @llvm.smin.i32(i32 %0, i32 0)
  br i1 %353, label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit213, label %._crit_edge1.thread

._crit_edge1.thread:                              ; preds = %._crit_edge418
  %4573 = call i64 @clock()
  br label %4800

IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit213: ; preds = %._crit_edge418.loopexit, %._crit_edge418
  %4574 = phi i32 [ %4571, %._crit_edge418.loopexit ], [ %4572, %._crit_edge418 ]
  %.reg2mem160.0.lcssa587 = phi i32 [ %.reg2mem156.0, %._crit_edge418.loopexit ], [ 0, %._crit_edge418 ]
  %result.i174 = call noalias dereferenceable_or_null(30) ptr @bump_malloc_inner(i64 noundef 30, ptr nonnull @current_ptr) #29
  store <29 x i8> <i8 87, i8 97, i8 114, i8 110, i8 105, i8 110, i8 103, i8 58, i8 32, i8 67, i8 111, i8 117, i8 108, i8 100, i8 32, i8 111, i8 110, i8 108, i8 121, i8 32, i8 103, i8 101, i8 110, i8 101, i8 114, i8 97, i8 116, i8 101, i8 32>, ptr %result.i174, align 32
  %result.i175 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %4575 = getelementptr inbounds i8, ptr %268, i64 8
  %4576 = getelementptr inbounds i8, ptr %268, i64 24
  store ptr @String, ptr %268, align 8
  store ptr %result.i175, ptr %4575, align 8
  store i32 9, ptr %4576, align 8
  %4577 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %268)
  store ptr %result.i174, ptr %result.i175, align 8
  %4578 = getelementptr i8, ptr %result.i175, i64 8
  store i32 29, ptr %4578, align 4
  %4579 = getelementptr i8, ptr %result.i175, i64 12
  store i32 30, ptr %4579, align 4
  %4580 = load i160, ptr %4575, align 8
  %4581 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %.sroa.3.8.extract.trunc.i = trunc i160 %4580 to i64
  %4582 = inttoptr i64 %.sroa.3.8.extract.trunc.i to ptr
  %4583 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4584 = getelementptr i8, ptr %4582, i64 8
  %4585 = load i32, ptr %4584, align 4
  %4586 = add i32 %4585, 1
  %4587 = sext i32 %4586 to i64
  %result.i.i1983 = call noalias ptr @bump_malloc_inner(i64 noundef %4587, ptr nonnull @current_ptr) #29
  %4588 = load i32, ptr %4584, align 4
  %4589 = icmp sgt i32 %4588, 0
  br i1 %4589, label %.lr.ph.i1984, label %String_c_string_.exit

.lr.ph.i1984:                                     ; preds = %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit213
  %4590 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %4591 = load ptr, ptr %4582, align 8
  %4592 = zext nneg i32 %4588 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i1983, ptr align 1 %4591, i64 %4592, i1 false)
  br label %String_c_string_.exit

String_c_string_.exit:                            ; preds = %.lr.ph.i1984, %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit213
  %4593 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %4594 = sext i32 %4588 to i64
  %4595 = getelementptr i8, ptr %result.i.i1983, i64 %4594
  store i8 0, ptr %4595, align 1
  %puts.i = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i1983)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %4596 = call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i32_string, i32 %.reg2mem160.0.lcssa587)
  %result.i194 = call noalias dereferenceable_or_null(23) ptr @bump_malloc_inner(i64 noundef 23, ptr nonnull @current_ptr) #29
  store <22 x i8> <i8 32, i8 103, i8 117, i8 97, i8 114, i8 97, i8 110, i8 116, i8 101, i8 101, i8 100, i8 32, i8 109, i8 105, i8 115, i8 115, i8 32, i8 107, i8 101, i8 121, i8 115, i8 46>, ptr %result.i194, align 32
  %result.i195 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %4597 = getelementptr inbounds i8, ptr %269, i64 8
  %4598 = getelementptr inbounds i8, ptr %269, i64 24
  store ptr @String, ptr %269, align 8
  store ptr %result.i195, ptr %4597, align 8
  store i32 9, ptr %4598, align 8
  %4599 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %269)
  store ptr %result.i194, ptr %result.i195, align 8
  %4600 = getelementptr i8, ptr %result.i195, i64 8
  store i32 22, ptr %4600, align 4
  %4601 = getelementptr i8, ptr %result.i195, i64 12
  store i32 23, ptr %4601, align 4
  %4602 = load i160, ptr %4597, align 8
  %4603 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %.sroa.3.8.extract.trunc.i842 = trunc i160 %4602 to i64
  %4604 = inttoptr i64 %.sroa.3.8.extract.trunc.i842 to ptr
  %4605 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4606 = getelementptr i8, ptr %4604, i64 8
  %4607 = load i32, ptr %4606, align 4
  %4608 = add i32 %4607, 1
  %4609 = sext i32 %4608 to i64
  %result.i.i2000 = call noalias ptr @bump_malloc_inner(i64 noundef %4609, ptr nonnull @current_ptr) #29
  %4610 = load i32, ptr %4606, align 4
  %4611 = icmp sgt i32 %4610, 0
  br i1 %4611, label %.lr.ph.i2001, label %String_c_string_.exit2005

.lr.ph.i2001:                                     ; preds = %String_c_string_.exit
  %4612 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %4613 = load ptr, ptr %4604, align 8
  %4614 = zext nneg i32 %4610 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i2000, ptr align 1 %4613, i64 %4614, i1 false)
  br label %String_c_string_.exit2005

String_c_string_.exit2005:                        ; preds = %.lr.ph.i2001, %String_c_string_.exit
  %4615 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %4616 = sext i32 %4610 to i64
  %4617 = getelementptr i8, ptr %result.i.i2000, i64 %4616
  store i8 0, ptr %4617, align 1
  %puts.i858 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i2000)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %._crit_edge418.loopexit, %String_c_string_.exit2005
  %4618 = phi i32 [ %4571, %._crit_edge418.loopexit ], [ %4574, %String_c_string_.exit2005 ]
  %4619 = call i64 @clock()
  %4620 = icmp sgt i32 %4618, 0
  br i1 %4620, label %.lr.ph423.preheader, label %4800

.lr.ph423.preheader:                              ; preds = %._crit_edge1
  %4621 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %invariant.gep = getelementptr i8, ptr %result.i.i461, i64 8
  %4622 = getelementptr i8, ptr %result.i, i64 40
  %4623 = getelementptr i8, ptr %result.i, i64 72
  br label %.lr.ph423

.lr.ph423:                                        ; preds = %.lr.ph423.preheader, %HashMap_get_keyK.exit1286
  %.reg2mem146.0422 = phi i32 [ %.reg2mem140.0, %HashMap_get_keyK.exit1286 ], [ 0, %.lr.ph423.preheader ]
  %.reg2mem144.0421 = phi i32 [ %.reg2mem138.0, %HashMap_get_keyK.exit1286 ], [ 0, %.lr.ph423.preheader ]
  %.reg2mem142.0420 = phi i32 [ %4793, %HashMap_get_keyK.exit1286 ], [ 0, %.lr.ph423.preheader ]
  %4624 = zext nneg i32 %.reg2mem142.0420 to i64
  %4625 = shl nuw nsw i64 %4624, 5
  %gep = getelementptr i8, ptr %invariant.gep, i64 %4625
  %4626 = load i160, ptr %gep, align 4
  %.sroa.049.0.insert.ext = and i160 %4626, 4294967295
  %4627 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.049.0.insert.ext, 1
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0271.i1184)
  call void @llvm.lifetime.start.p0(i64 20, ptr nonnull %.sroa.1.i1185)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i1186)
  call void @llvm.lifetime.start.p0(i64 20, ptr nonnull %.sroa.2.i1187)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %233)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %234)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0123.i1188)
  call void @llvm.lifetime.start.p0(i64 20, ptr nonnull %.sroa.2124.i1189)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0115.i1190)
  call void @llvm.lifetime.start.p0(i64 20, ptr nonnull %.sroa.2116.i1191)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %235)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %236)
  %4628 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4629 = load ptr, ptr %281, align 8
  %4630 = call i32 %4629({ ptr, i160 } %4627)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %4631 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4632 = load ptr, ptr %293, align 8
  %4633 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4632, 0
  %4634 = load ptr, ptr %294, align 8
  %4635 = insertvalue { ptr, ptr, ptr, i32 } %4633, ptr %4634, 1
  %4636 = load ptr, ptr %4622, align 8
  %4637 = insertvalue { ptr, ptr, ptr, i32 } %4635, ptr %4636, 2
  %4638 = load i32, ptr %295, align 4
  %4639 = insertvalue { ptr, ptr, ptr, i32 } %4637, i32 %4638, 3
  %hash_coef_ptr.i.i10.i2876 = getelementptr i8, ptr %4632, i64 8
  %tbl_size_ptr.i.i11.i2877 = getelementptr i8, ptr %4632, i64 16
  %offset_tbl_ptr.i.i12.i2878 = getelementptr i8, ptr %4632, i64 40
  %hash_coef.i.i13.i2879 = load i64, ptr %hash_coef_ptr.i.i10.i2876, align 4
  %tbl_size.i.i14.i2880 = load i64, ptr %tbl_size_ptr.i.i11.i2877, align 4
  %offset_tbl.i.i15.i2881 = load ptr, ptr %offset_tbl_ptr.i.i12.i2878, align 8
  %product.i.i.i16.i2882 = mul i64 %hash_coef.i.i13.i2879, -5261542750394134544
  %shifted.i.i.i17.i2883 = lshr i64 %product.i.i.i16.i2882, 32
  %xored.i.i.i18.i2884 = xor i64 %shifted.i.i.i17.i2883, %product.i.i.i16.i2882
  %hash.i.i.i19.i2885 = and i64 %xored.i.i.i18.i2884, %tbl_size.i.i14.i2880
  %offset_ptr.i.i20.i2886 = getelementptr i32, ptr %offset_tbl.i.i15.i2881, i64 %hash.i.i.i19.i2885
  %offset.i.i21.i2887 = load i32, ptr %offset_ptr.i.i20.i2886, align 4
  %eq.i.i2888 = icmp eq i32 %4638, %offset.i.i21.i2887
  call void @llvm.assume(i1 %eq.i.i2888) #30
  %4640 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4641 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4632)
  %4642 = sext i32 %4638 to i64
  %4643 = getelementptr ptr, ptr %4632, i64 %4642
  %4644 = getelementptr i8, ptr %4643, i64 64
  %4645 = load ptr, ptr %4644, align 8
  %4646 = call ptr %4645({ ptr, ptr, ptr, i32 } %4639, ptr nonnull %2)
  %4647 = call i32 %4646({ ptr, ptr, ptr, i32 } %4639, { ptr, ptr, ptr, i32 } %4639, ptr nonnull %2)
  %4648 = add i32 %4647, -1
  %4649 = and i32 %4648, %4630
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %4650 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4651 = load ptr, ptr %293, align 8
  %4652 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4651, 0
  %4653 = load ptr, ptr %294, align 8
  %4654 = insertvalue { ptr, ptr, ptr, i32 } %4652, ptr %4653, 1
  %4655 = load ptr, ptr %4622, align 8
  %4656 = insertvalue { ptr, ptr, ptr, i32 } %4654, ptr %4655, 2
  %4657 = load i32, ptr %295, align 4
  %4658 = insertvalue { ptr, ptr, ptr, i32 } %4656, i32 %4657, 3
  %hash_coef_ptr.i.i130.i1208 = getelementptr i8, ptr %4651, i64 8
  %tbl_size_ptr.i.i131.i1209 = getelementptr i8, ptr %4651, i64 16
  %offset_tbl_ptr.i.i132.i1210 = getelementptr i8, ptr %4651, i64 40
  %hash_coef.i.i133.i1211 = load i64, ptr %hash_coef_ptr.i.i130.i1208, align 4
  %tbl_size.i.i134.i1212 = load i64, ptr %tbl_size_ptr.i.i131.i1209, align 4
  %offset_tbl.i.i135.i1213 = load ptr, ptr %offset_tbl_ptr.i.i132.i1210, align 8
  %product.i.i.i136.i1214 = mul i64 %hash_coef.i.i133.i1211, -5261542750394134544
  %shifted.i.i.i137.i1215 = lshr i64 %product.i.i.i136.i1214, 32
  %xored.i.i.i138.i1216 = xor i64 %shifted.i.i.i137.i1215, %product.i.i.i136.i1214
  %hash.i.i.i139.i1217 = and i64 %xored.i.i.i138.i1216, %tbl_size.i.i134.i1212
  %offset_ptr.i.i140.i1218 = getelementptr i32, ptr %offset_tbl.i.i135.i1213, i64 %hash.i.i.i139.i1217
  %offset.i.i141.i1219 = load i32, ptr %offset_ptr.i.i140.i1218, align 4
  %eq.i.i1220 = icmp eq i32 %4657, %offset.i.i141.i1219
  call void @llvm.assume(i1 %eq.i.i1220) #30
  store ptr @_parameterization_Ptri32, ptr %235, align 8
  %4659 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %235)
  %4660 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4651)
  %4661 = sext i32 %4657 to i64
  %4662 = getelementptr ptr, ptr %4651, i64 %4661
  %4663 = getelementptr i8, ptr %4662, i64 120
  %4664 = load ptr, ptr %4663, align 8
  store ptr @i32_typ, ptr %236, align 8
  %4665 = call ptr %4664({ ptr, ptr, ptr, i32 } %4658, ptr nonnull %236)
  %4666 = call { ptr, i160 } %4665({ ptr, ptr, ptr, i32 } %4658, { ptr, ptr, ptr, i32 } %4658, ptr nonnull %235, i32 %4649)
  %.fca.0.extract.i1221 = extractvalue { ptr, i160 } %4666, 0
  %4667 = icmp ne ptr %.fca.0.extract.i1221, @nil_typ
  %4668 = icmp ne ptr %.fca.0.extract.i1221, null
  %.not126.i1222 = and i1 %4667, %4668
  br i1 %.not126.i1222, label %4669, label %.critedge.i1223

4669:                                             ; preds = %.lr.ph423
  %.fca.1.extract.i1269 = extractvalue { ptr, i160 } %4666, 1
  %.sroa.5.8.extract.trunc.i1270 = trunc i160 %.fca.1.extract.i1269 to i64
  %4670 = inttoptr i64 %.sroa.5.8.extract.trunc.i1270 to ptr
  %.sroa.9.8.extract.shift.i1271 = lshr i160 %.fca.1.extract.i1269, 64
  %.sroa.9.8.extract.trunc.i1272 = trunc i160 %.sroa.9.8.extract.shift.i1271 to i64
  %4671 = inttoptr i64 %.sroa.9.8.extract.trunc.i1272 to ptr
  %hash_coef_ptr.i.i144.i1273 = getelementptr i8, ptr %.fca.0.extract.i1221, i64 8
  %tbl_size_ptr.i.i145.i1274 = getelementptr i8, ptr %.fca.0.extract.i1221, i64 16
  %offset_tbl_ptr.i.i146.i1275 = getelementptr i8, ptr %.fca.0.extract.i1221, i64 40
  %hash_coef.i.i147.i1276 = load i64, ptr %hash_coef_ptr.i.i144.i1273, align 4
  %tbl_size.i.i148.i1277 = load i64, ptr %tbl_size_ptr.i.i145.i1274, align 4
  %offset_tbl.i.i149.i1278 = load ptr, ptr %offset_tbl_ptr.i.i146.i1275, align 8
  %product.i.i.i150.i1279 = mul i64 %hash_coef.i.i147.i1276, 4015701072841558310
  %shifted.i.i.i151.i1280 = lshr i64 %product.i.i.i150.i1279, 32
  %xored.i.i.i152.i1281 = xor i64 %shifted.i.i.i151.i1280, %product.i.i.i150.i1279
  %hash.i.i.i153.i1282 = and i64 %xored.i.i.i152.i1281, %tbl_size.i.i148.i1277
  %offset_ptr.i.i154.i1283 = getelementptr i32, ptr %offset_tbl.i.i149.i1278, i64 %hash.i.i.i153.i1282
  %offset.i.i155.i1284 = load i32, ptr %offset_ptr.i.i154.i1283, align 4
  %4672 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract.i1221, 0
  %4673 = insertvalue { ptr, ptr, ptr, i32 } %4672, ptr %4670, 1
  %4674 = insertvalue { ptr, ptr, ptr, i32 } %4673, ptr %4671, 2
  %4675 = insertvalue { ptr, ptr, ptr, i32 } %4674, i32 %offset.i.i155.i1284, 3
  %4676 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4677 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4678 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract.i1221)
  %4679 = sext i32 %offset.i.i155.i1284 to i64
  %4680 = getelementptr ptr, ptr %.fca.0.extract.i1221, i64 %4679
  %4681 = getelementptr i8, ptr %4680, i64 64
  %4682 = load ptr, ptr %4681, align 8
  %4683 = call ptr %4682({ ptr, ptr, ptr, i32 } %4675, ptr nonnull %2)
  %4684 = call i32 %4683({ ptr, ptr, ptr, i32 } %4675, { ptr, ptr, ptr, i32 } %4675, ptr nonnull %2)
  %4685 = icmp eq i32 %4684, %4630
  %4686 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4687 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4688 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract.i1221)
  %4689 = getelementptr i8, ptr %4680, i64 48
  %4690 = load ptr, ptr %4689, align 8
  %4691 = call ptr %4690({ ptr, ptr, ptr, i32 } %4675, ptr nonnull %2)
  %4692 = call { ptr, i160 } %4691({ ptr, ptr, ptr, i32 } %4675, { ptr, ptr, ptr, i32 } %4675, ptr nonnull %2)
  %4693 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4694 = load ptr, ptr %282, align 8
  %4695 = call i1 %4694({ ptr, i160 } %4692, { ptr, i160 } %4627)
  %4696 = and i1 %4685, %4695
  br i1 %4696, label %.thread.i, label %.critedge.i1223

.critedge.i1223:                                  ; preds = %4669, %.lr.ph423
  %4697 = add i32 %4630, 2127912214
  %4698 = shl i32 %4630, 12
  %4699 = add i32 %4697, %4698
  %4700 = ashr i32 %4699, 19
  %4701 = xor i32 %4699, %4700
  %4702 = xor i32 %4701, -949894596
  %4703 = add i32 %4702, 374761393
  %4704 = shl i32 %4702, 5
  %4705 = add i32 %4703, %4704
  %4706 = add i32 %4705, -744332180
  %4707 = shl i32 %4705, 9
  %4708 = xor i32 %4706, %4707
  %4709 = add i32 %4708, -42973499
  %4710 = shl i32 %4708, 3
  %4711 = add i32 %4709, %4710
  %4712 = ashr i32 %4711, 16
  %4713 = xor i32 %4711, %4712
  %4714 = xor i32 %4713, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %4715 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4716 = load ptr, ptr %306, align 8
  %4717 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4716, 0
  %4718 = load ptr, ptr %307, align 8
  %4719 = insertvalue { ptr, ptr, ptr, i32 } %4717, ptr %4718, 1
  %4720 = load ptr, ptr %4623, align 8
  %4721 = insertvalue { ptr, ptr, ptr, i32 } %4719, ptr %4720, 2
  %4722 = load i32, ptr %308, align 4
  %4723 = insertvalue { ptr, ptr, ptr, i32 } %4721, i32 %4722, 3
  %hash_coef_ptr.i.i10.i2907 = getelementptr i8, ptr %4716, i64 8
  %tbl_size_ptr.i.i11.i2908 = getelementptr i8, ptr %4716, i64 16
  %offset_tbl_ptr.i.i12.i2909 = getelementptr i8, ptr %4716, i64 40
  %hash_coef.i.i13.i2910 = load i64, ptr %hash_coef_ptr.i.i10.i2907, align 4
  %tbl_size.i.i14.i2911 = load i64, ptr %tbl_size_ptr.i.i11.i2908, align 4
  %offset_tbl.i.i15.i2912 = load ptr, ptr %offset_tbl_ptr.i.i12.i2909, align 8
  %product.i.i.i16.i2913 = mul i64 %hash_coef.i.i13.i2910, -5261542750394134544
  %shifted.i.i.i17.i2914 = lshr i64 %product.i.i.i16.i2913, 32
  %xored.i.i.i18.i2915 = xor i64 %shifted.i.i.i17.i2914, %product.i.i.i16.i2913
  %hash.i.i.i19.i2916 = and i64 %xored.i.i.i18.i2915, %tbl_size.i.i14.i2911
  %offset_ptr.i.i20.i2917 = getelementptr i32, ptr %offset_tbl.i.i15.i2912, i64 %hash.i.i.i19.i2916
  %offset.i.i21.i2918 = load i32, ptr %offset_ptr.i.i20.i2917, align 4
  %eq.i.i2919 = icmp eq i32 %4722, %offset.i.i21.i2918
  call void @llvm.assume(i1 %eq.i.i2919) #30
  %4724 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4725 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4716)
  %4726 = sext i32 %4722 to i64
  %4727 = getelementptr ptr, ptr %4716, i64 %4726
  %4728 = getelementptr i8, ptr %4727, i64 64
  %4729 = load ptr, ptr %4728, align 8
  %4730 = call ptr %4729({ ptr, ptr, ptr, i32 } %4723, ptr nonnull %2)
  %4731 = call i32 %4730({ ptr, ptr, ptr, i32 } %4723, { ptr, ptr, ptr, i32 } %4723, ptr nonnull %2)
  %4732 = add i32 %4731, -1
  %4733 = and i32 %4732, %4714
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %4734 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4735 = load ptr, ptr %306, align 8
  %4736 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4735, 0
  %4737 = load ptr, ptr %307, align 8
  %4738 = insertvalue { ptr, ptr, ptr, i32 } %4736, ptr %4737, 1
  %4739 = load ptr, ptr %4623, align 8
  %4740 = insertvalue { ptr, ptr, ptr, i32 } %4738, ptr %4739, 2
  %4741 = load i32, ptr %308, align 4
  %4742 = insertvalue { ptr, ptr, ptr, i32 } %4740, i32 %4741, 3
  %hash_coef_ptr.i.i158.i1228 = getelementptr i8, ptr %4735, i64 8
  %tbl_size_ptr.i.i159.i1229 = getelementptr i8, ptr %4735, i64 16
  %offset_tbl_ptr.i.i160.i1230 = getelementptr i8, ptr %4735, i64 40
  %hash_coef.i.i161.i1231 = load i64, ptr %hash_coef_ptr.i.i158.i1228, align 4
  %tbl_size.i.i162.i1232 = load i64, ptr %tbl_size_ptr.i.i159.i1229, align 4
  %offset_tbl.i.i163.i1233 = load ptr, ptr %offset_tbl_ptr.i.i160.i1230, align 8
  %product.i.i.i164.i1234 = mul i64 %hash_coef.i.i161.i1231, -5261542750394134544
  %shifted.i.i.i165.i1235 = lshr i64 %product.i.i.i164.i1234, 32
  %xored.i.i.i166.i1236 = xor i64 %shifted.i.i.i165.i1235, %product.i.i.i164.i1234
  %hash.i.i.i167.i1237 = and i64 %xored.i.i.i166.i1236, %tbl_size.i.i162.i1232
  %offset_ptr.i.i168.i1238 = getelementptr i32, ptr %offset_tbl.i.i163.i1233, i64 %hash.i.i.i167.i1237
  %offset.i.i169.i1239 = load i32, ptr %offset_ptr.i.i168.i1238, align 4
  %eq.i172.i1240 = icmp eq i32 %4741, %offset.i.i169.i1239
  call void @llvm.assume(i1 %eq.i172.i1240) #30
  store ptr @_parameterization_Ptri32, ptr %233, align 8
  %4743 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %233)
  %4744 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4735)
  %4745 = sext i32 %4741 to i64
  %4746 = getelementptr ptr, ptr %4735, i64 %4745
  %4747 = getelementptr i8, ptr %4746, i64 120
  %4748 = load ptr, ptr %4747, align 8
  store ptr @i32_typ, ptr %234, align 8
  %4749 = call ptr %4748({ ptr, ptr, ptr, i32 } %4742, ptr nonnull %234)
  %4750 = call { ptr, i160 } %4749({ ptr, ptr, ptr, i32 } %4742, { ptr, ptr, ptr, i32 } %4742, ptr nonnull %233, i32 %4733)
  %.fca.0.extract57.i1241 = extractvalue { ptr, i160 } %4750, 0
  %4751 = icmp ne ptr %.fca.0.extract57.i1241, @nil_typ
  %4752 = icmp ne ptr %.fca.0.extract57.i1241, null
  %.not128.i1242 = and i1 %4751, %4752
  br i1 %.not128.i1242, label %4753, label %HashMap_get_keyK.exit1286

4753:                                             ; preds = %.critedge.i1223
  %.fca.1.extract59.i1243 = extractvalue { ptr, i160 } %4750, 1
  %.sroa.6.8.extract.trunc.i1244 = trunc i160 %.fca.1.extract59.i1243 to i64
  %4754 = inttoptr i64 %.sroa.6.8.extract.trunc.i1244 to ptr
  %.sroa.11.8.extract.shift.i1245 = lshr i160 %.fca.1.extract59.i1243, 64
  %.sroa.11.8.extract.trunc.i1246 = trunc i160 %.sroa.11.8.extract.shift.i1245 to i64
  %4755 = inttoptr i64 %.sroa.11.8.extract.trunc.i1246 to ptr
  %hash_coef_ptr.i.i174.i1247 = getelementptr i8, ptr %.fca.0.extract57.i1241, i64 8
  %tbl_size_ptr.i.i175.i1248 = getelementptr i8, ptr %.fca.0.extract57.i1241, i64 16
  %offset_tbl_ptr.i.i176.i1249 = getelementptr i8, ptr %.fca.0.extract57.i1241, i64 40
  %hash_coef.i.i177.i1250 = load i64, ptr %hash_coef_ptr.i.i174.i1247, align 4
  %tbl_size.i.i178.i1251 = load i64, ptr %tbl_size_ptr.i.i175.i1248, align 4
  %offset_tbl.i.i179.i1252 = load ptr, ptr %offset_tbl_ptr.i.i176.i1249, align 8
  %product.i.i.i180.i1253 = mul i64 %hash_coef.i.i177.i1250, 4015701072841558310
  %shifted.i.i.i181.i1254 = lshr i64 %product.i.i.i180.i1253, 32
  %xored.i.i.i182.i1255 = xor i64 %shifted.i.i.i181.i1254, %product.i.i.i180.i1253
  %hash.i.i.i183.i1256 = and i64 %xored.i.i.i182.i1255, %tbl_size.i.i178.i1251
  %offset_ptr.i.i184.i1257 = getelementptr i32, ptr %offset_tbl.i.i179.i1252, i64 %hash.i.i.i183.i1256
  %offset.i.i185.i1258 = load i32, ptr %offset_ptr.i.i184.i1257, align 4
  %4756 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract57.i1241, 0
  %4757 = insertvalue { ptr, ptr, ptr, i32 } %4756, ptr %4754, 1
  %4758 = insertvalue { ptr, ptr, ptr, i32 } %4757, ptr %4755, 2
  %4759 = insertvalue { ptr, ptr, ptr, i32 } %4758, i32 %offset.i.i185.i1258, 3
  %4760 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4761 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4762 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract57.i1241)
  %4763 = sext i32 %offset.i.i185.i1258 to i64
  %4764 = getelementptr ptr, ptr %.fca.0.extract57.i1241, i64 %4763
  %4765 = getelementptr i8, ptr %4764, i64 64
  %4766 = load ptr, ptr %4765, align 8
  %4767 = call ptr %4766({ ptr, ptr, ptr, i32 } %4759, ptr nonnull %2)
  %4768 = call i32 %4767({ ptr, ptr, ptr, i32 } %4759, { ptr, ptr, ptr, i32 } %4759, ptr nonnull %2)
  %4769 = icmp eq i32 %4768, %4630
  %4770 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4771 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4772 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract57.i1241)
  %4773 = getelementptr i8, ptr %4764, i64 48
  %4774 = load ptr, ptr %4773, align 8
  %4775 = call ptr %4774({ ptr, ptr, ptr, i32 } %4759, ptr nonnull %2)
  %4776 = call { ptr, i160 } %4775({ ptr, ptr, ptr, i32 } %4759, { ptr, ptr, ptr, i32 } %4759, ptr nonnull %2)
  %4777 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4778 = load ptr, ptr %282, align 8
  %4779 = call i1 %4778({ ptr, i160 } %4776, { ptr, i160 } %4627)
  %4780 = and i1 %4769, %4779
  br i1 %4780, label %.thread.i, label %HashMap_get_keyK.exit1286

.thread.i:                                        ; preds = %4753, %4669
  %.pre-phi313.i1260 = phi i64 [ %4679, %4669 ], [ %4763, %4753 ]
  %.pre-phi312.i1261 = phi { ptr, ptr, ptr, i32 } [ %4675, %4669 ], [ %4759, %4753 ]
  %.reg2mem65.0.sroa.phi290.sroa.speculated.i1262 = phi ptr [ %.fca.0.extract.i1221, %4669 ], [ %.fca.0.extract57.i1241, %4753 ]
  %.reg2mem59.0.sroa.phi120289.i1263 = phi ptr [ %.sroa.1.i1185, %4669 ], [ %.sroa.2124.i1189, %4753 ]
  %.reg2mem59.0.sroa.phi117288.i1264 = phi ptr [ %.sroa.0271.i1184, %4669 ], [ %.sroa.0123.i1188, %4753 ]
  %.reg2mem57.0.sroa.phi94287.i1265 = phi ptr [ %.sroa.2.i1187, %4669 ], [ %.sroa.2116.i1191, %4753 ]
  %.reg2mem57.0.sroa.phi91286.i1266 = phi ptr [ %.sroa.0.i1186, %4669 ], [ %.sroa.0115.i1190, %4753 ]
  %4781 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4782 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4783 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.reg2mem65.0.sroa.phi290.sroa.speculated.i1262)
  %4784 = getelementptr ptr, ptr %.reg2mem65.0.sroa.phi290.sroa.speculated.i1262, i64 %.pre-phi313.i1260
  %4785 = getelementptr i8, ptr %4784, i64 56
  %4786 = load ptr, ptr %4785, align 8
  %4787 = call ptr %4786({ ptr, ptr, ptr, i32 } %.pre-phi312.i1261, ptr nonnull %2)
  %4788 = call { ptr, i160 } %4787({ ptr, ptr, ptr, i32 } %.pre-phi312.i1261, { ptr, ptr, ptr, i32 } %.pre-phi312.i1261, ptr nonnull %2)
  %.fca.0.extract97.i1267 = extractvalue { ptr, i160 } %4788, 0
  store ptr %.fca.0.extract97.i1267, ptr %.reg2mem59.0.sroa.phi117288.i1264, align 8
  %.fca.1.extract99.i1268 = extractvalue { ptr, i160 } %4788, 1
  store i160 %.fca.1.extract99.i1268, ptr %.reg2mem59.0.sroa.phi120289.i1263, align 8
  store ptr %.fca.0.extract97.i1267, ptr %.reg2mem57.0.sroa.phi91286.i1266, align 8
  store i160 %.fca.1.extract99.i1268, ptr %.reg2mem57.0.sroa.phi94287.i1265, align 8
  br label %HashMap_get_keyK.exit1286

HashMap_get_keyK.exit1286:                        ; preds = %.critedge.i1223, %4753, %.thread.i
  %.reg2mem51.sroa.0.0.i = phi ptr [ %.fca.0.extract97.i1267, %.thread.i ], [ @nil_typ, %4753 ], [ @nil_typ, %.critedge.i1223 ]
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0271.i1184)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.1.i1185)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i1186)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2.i1187)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %233)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %234)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0123.i1188)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2124.i1189)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0115.i1190)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2116.i1191)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %235)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %236)
  %4789 = icmp ne ptr %.reg2mem51.sroa.0.0.i, @nil_typ
  %4790 = icmp ne ptr %.reg2mem51.sroa.0.0.i, null
  %.not410 = and i1 %4789, %4790
  %4791 = zext i1 %.not410 to i32
  %.reg2mem138.0 = add i32 %.reg2mem144.0421, %4791
  %not..not410 = xor i1 %.not410, true
  %4792 = zext i1 %not..not410 to i32
  %.reg2mem140.0 = add i32 %.reg2mem146.0422, %4792
  %4793 = add nuw nsw i32 %.reg2mem142.0420, 1
  %4794 = icmp slt i32 %4793, %4618
  br i1 %4794, label %.lr.ph423, label %4795

4795:                                             ; preds = %HashMap_get_keyK.exit1286
  %4796 = call i64 @clock()
  %4797 = mul i32 %.reg2mem138.0, 100
  %4798 = sdiv i32 %4797, %4618
  %.fr = freeze i32 %4798
  %4799 = icmp slt i32 %.fr, 5
  br label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit235

4800:                                             ; preds = %._crit_edge1.thread, %._crit_edge1
  %4801 = phi i64 [ %4573, %._crit_edge1.thread ], [ %4619, %._crit_edge1 ]
  %4802 = phi i32 [ %4572, %._crit_edge1.thread ], [ %4618, %._crit_edge1 ]
  %4803 = call i64 @clock()
  br label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit235

IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit235: ; preds = %4795, %4800
  %4804 = phi i64 [ %4619, %4795 ], [ %4801, %4800 ]
  %4805 = phi i32 [ %4618, %4795 ], [ %4802, %4800 ]
  %4806 = phi i64 [ %4796, %4795 ], [ %4803, %4800 ]
  %.reg2mem146.0.lcssa432 = phi i32 [ %.reg2mem140.0, %4795 ], [ 0, %4800 ]
  %.reg2mem144.0.lcssa430 = phi i32 [ %.reg2mem138.0, %4795 ], [ 0, %4800 ]
  %.reg2mem124.0.in = phi i1 [ %4799, %4795 ], [ true, %4800 ]
  %result.i214 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  store <15 x i8> <i8 71, i8 101, i8 116, i8 32, i8 82, i8 97, i8 110, i8 100, i8 111, i8 109, i8 32, i8 77, i8 105, i8 115, i8 115>, ptr %result.i214, align 16
  %result.i215 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %4807 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %result.i215, 1
  %4808 = insertvalue { ptr, ptr, ptr, i32 } %4807, ptr undef, 2
  %4809 = insertvalue { ptr, ptr, ptr, i32 } %4808, i32 9, 3
  store ptr %result.i214, ptr %result.i215, align 8
  %4810 = getelementptr i8, ptr %result.i215, i64 8
  store i32 15, ptr %4810, align 4
  %4811 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %4812 = getelementptr i8, ptr %result.i215, i64 12
  store i32 16, ptr %4812, align 4
  %4813 = sub i64 %4806, %4804
  call void @print_benchmark_result({ ptr, ptr, ptr, i32 } %4809, i32 %4805, i64 %4813)
  %result.i216 = call noalias dereferenceable_or_null(19) ptr @bump_malloc_inner(i64 noundef 19, ptr nonnull @current_ptr) #29
  store <18 x i8> <i8 32, i8 32, i8 32, i8 32, i8 86, i8 101, i8 114, i8 105, i8 102, i8 105, i8 99, i8 97, i8 116, i8 105, i8 111, i8 110, i8 58, i8 32>, ptr %result.i216, align 32
  %result.i217 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %4814 = getelementptr inbounds i8, ptr %270, i64 8
  %4815 = getelementptr inbounds i8, ptr %270, i64 24
  store ptr @String, ptr %270, align 8
  store ptr %result.i217, ptr %4814, align 8
  store i32 9, ptr %4815, align 8
  %4816 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %270)
  store ptr %result.i216, ptr %result.i217, align 8
  %4817 = getelementptr i8, ptr %result.i217, i64 8
  store i32 18, ptr %4817, align 4
  %4818 = getelementptr i8, ptr %result.i217, i64 12
  store i32 19, ptr %4818, align 4
  %4819 = load i160, ptr %4814, align 8
  %4820 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %.sroa.3.8.extract.trunc.i877 = trunc i160 %4819 to i64
  %4821 = inttoptr i64 %.sroa.3.8.extract.trunc.i877 to ptr
  %4822 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4823 = getelementptr i8, ptr %4821, i64 8
  %4824 = load i32, ptr %4823, align 4
  %4825 = add i32 %4824, 1
  %4826 = sext i32 %4825 to i64
  %result.i.i2020 = call noalias ptr @bump_malloc_inner(i64 noundef %4826, ptr nonnull @current_ptr) #29
  %4827 = load i32, ptr %4823, align 4
  %4828 = icmp sgt i32 %4827, 0
  br i1 %4828, label %.lr.ph.i2021, label %String_c_string_.exit2025

.lr.ph.i2021:                                     ; preds = %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit235
  %4829 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %4830 = load ptr, ptr %4821, align 8
  %4831 = zext nneg i32 %4827 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i2020, ptr align 1 %4830, i64 %4831, i1 false)
  br label %String_c_string_.exit2025

String_c_string_.exit2025:                        ; preds = %.lr.ph.i2021, %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit235
  %4832 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %4833 = sext i32 %4827 to i64
  %4834 = getelementptr i8, ptr %result.i.i2020, i64 %4833
  store i8 0, ptr %4834, align 1
  %puts.i893 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i2020)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %result.i236 = call noalias dereferenceable_or_null(5) ptr @bump_malloc_inner(i64 noundef 5, ptr nonnull @current_ptr) #29
  %. = select i1 %.reg2mem124.0.in, <4 x i8> <i8 80, i8 65, i8 83, i8 83>, <4 x i8> <i8 70, i8 65, i8 73, i8 76>
  %.1328 = select i1 %.reg2mem124.0.in, ptr %271, ptr %272
  store <4 x i8> %., ptr %result.i236, align 4
  %result.i237 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %.1328.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v = select i1 %.reg2mem124.0.in, ptr %271, ptr %272
  %.1328.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel = getelementptr inbounds i8, ptr %.1328.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v, i64 8
  %.1328.sroa.sel2109.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v = select i1 %.reg2mem124.0.in, ptr %271, ptr %272
  %.1328.sroa.sel2109.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel = getelementptr inbounds i8, ptr %.1328.sroa.sel2109.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v, i64 24
  store ptr @String, ptr %.1328, align 8
  store ptr %result.i237, ptr %.1328.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  store i32 9, ptr %.1328.sroa.sel2109.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  %4835 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %.1328)
  store ptr %result.i236, ptr %result.i237, align 8
  %4836 = getelementptr i8, ptr %result.i237, i64 8
  store i32 4, ptr %4836, align 4
  %4837 = getelementptr i8, ptr %result.i237, i64 12
  store i32 5, ptr %4837, align 4
  %4838 = load i160, ptr %.1328.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  %4839 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %.sroa.3.8.extract.trunc.i897 = trunc i160 %4838 to i64
  %4840 = inttoptr i64 %.sroa.3.8.extract.trunc.i897 to ptr
  %4841 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4842 = getelementptr i8, ptr %4840, i64 8
  %4843 = load i32, ptr %4842, align 4
  %4844 = add i32 %4843, 1
  %4845 = sext i32 %4844 to i64
  %result.i.i2040 = call noalias ptr @bump_malloc_inner(i64 noundef %4845, ptr nonnull @current_ptr) #29
  %4846 = load i32, ptr %4842, align 4
  %4847 = icmp sgt i32 %4846, 0
  br i1 %4847, label %.lr.ph.i2041, label %String_c_string_.exit2045

.lr.ph.i2041:                                     ; preds = %String_c_string_.exit2025
  %4848 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %4849 = load ptr, ptr %4840, align 8
  %4850 = zext nneg i32 %4846 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i2040, ptr align 1 %4849, i64 %4850, i1 false)
  br label %String_c_string_.exit2045

String_c_string_.exit2045:                        ; preds = %.lr.ph.i2041, %String_c_string_.exit2025
  %4851 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %4852 = sext i32 %4846 to i64
  %4853 = getelementptr i8, ptr %result.i.i2040, i64 %4852
  store i8 0, ptr %4853, align 1
  %puts.i913 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i2040)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %result.i276 = call noalias dereferenceable_or_null(14) ptr @bump_malloc_inner(i64 noundef 14, ptr nonnull @current_ptr) #29
  store <13 x i8> <i8 32, i8 32, i8 32, i8 32, i8 40, i8 77, i8 105, i8 115, i8 115, i8 101, i8 115, i8 58, i8 32>, ptr %result.i276, align 16
  %result.i277 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %4854 = getelementptr inbounds i8, ptr %273, i64 8
  %4855 = getelementptr inbounds i8, ptr %273, i64 24
  store ptr @String, ptr %273, align 8
  store ptr %result.i277, ptr %4854, align 8
  store i32 9, ptr %4855, align 8
  %4856 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %273)
  store ptr %result.i276, ptr %result.i277, align 8
  %4857 = getelementptr i8, ptr %result.i277, i64 8
  store i32 13, ptr %4857, align 4
  %4858 = getelementptr i8, ptr %result.i277, i64 12
  store i32 14, ptr %4858, align 4
  %4859 = load i160, ptr %4854, align 8
  %4860 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %.sroa.3.8.extract.trunc.i917 = trunc i160 %4859 to i64
  %4861 = inttoptr i64 %.sroa.3.8.extract.trunc.i917 to ptr
  %4862 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4863 = getelementptr i8, ptr %4861, i64 8
  %4864 = load i32, ptr %4863, align 4
  %4865 = add i32 %4864, 1
  %4866 = sext i32 %4865 to i64
  %result.i.i2060 = call noalias ptr @bump_malloc_inner(i64 noundef %4866, ptr nonnull @current_ptr) #29
  %4867 = load i32, ptr %4863, align 4
  %4868 = icmp sgt i32 %4867, 0
  br i1 %4868, label %.lr.ph.i2061, label %String_c_string_.exit2065

.lr.ph.i2061:                                     ; preds = %String_c_string_.exit2045
  %4869 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %4870 = load ptr, ptr %4861, align 8
  %4871 = zext nneg i32 %4867 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i2060, ptr align 1 %4870, i64 %4871, i1 false)
  br label %String_c_string_.exit2065

String_c_string_.exit2065:                        ; preds = %.lr.ph.i2061, %String_c_string_.exit2045
  %4872 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %4873 = sext i32 %4867 to i64
  %4874 = getelementptr i8, ptr %result.i.i2060, i64 %4873
  store i8 0, ptr %4874, align 1
  %puts.i933 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i2060)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %4875 = call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i32_string, i32 %.reg2mem146.0.lcssa432)
  %result.i314 = call noalias dereferenceable_or_null(9) ptr @bump_malloc_inner(i64 noundef 9, ptr nonnull @current_ptr) #29
  store <8 x i8> <i8 44, i8 32, i8 72, i8 105, i8 116, i8 115, i8 58, i8 32>, ptr %result.i314, align 8
  %result.i315 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %4876 = getelementptr inbounds i8, ptr %274, i64 8
  %4877 = getelementptr inbounds i8, ptr %274, i64 24
  store ptr @String, ptr %274, align 8
  store ptr %result.i315, ptr %4876, align 8
  store i32 9, ptr %4877, align 8
  %4878 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %274)
  store ptr %result.i314, ptr %result.i315, align 8
  %4879 = getelementptr i8, ptr %result.i315, i64 8
  store i32 8, ptr %4879, align 4
  %4880 = getelementptr i8, ptr %result.i315, i64 12
  store i32 9, ptr %4880, align 4
  %4881 = load i160, ptr %4876, align 8
  %4882 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %.sroa.3.8.extract.trunc.i938 = trunc i160 %4881 to i64
  %4883 = inttoptr i64 %.sroa.3.8.extract.trunc.i938 to ptr
  %4884 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4885 = getelementptr i8, ptr %4883, i64 8
  %4886 = load i32, ptr %4885, align 4
  %4887 = add i32 %4886, 1
  %4888 = sext i32 %4887 to i64
  %result.i.i2080 = call noalias ptr @bump_malloc_inner(i64 noundef %4888, ptr nonnull @current_ptr) #29
  %4889 = load i32, ptr %4885, align 4
  %4890 = icmp sgt i32 %4889, 0
  br i1 %4890, label %.lr.ph.i2081, label %String_c_string_.exit2085

.lr.ph.i2081:                                     ; preds = %String_c_string_.exit2065
  %4891 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %4892 = load ptr, ptr %4883, align 8
  %4893 = zext nneg i32 %4889 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i2080, ptr align 1 %4892, i64 %4893, i1 false)
  br label %String_c_string_.exit2085

String_c_string_.exit2085:                        ; preds = %.lr.ph.i2081, %String_c_string_.exit2065
  %4894 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %4895 = sext i32 %4889 to i64
  %4896 = getelementptr i8, ptr %result.i.i2080, i64 %4895
  store i8 0, ptr %4896, align 1
  %puts.i954 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i2080)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %4897 = call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i32_string, i32 %.reg2mem144.0.lcssa430)
  %result.i352 = call noalias dereferenceable_or_null(2) ptr @bump_malloc_inner(i64 noundef 2, ptr nonnull @current_ptr) #29
  store <1 x i8> <i8 41>, ptr %result.i352, align 1
  %result.i353 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %4898 = getelementptr inbounds i8, ptr %275, i64 8
  %4899 = getelementptr inbounds i8, ptr %275, i64 24
  store ptr @String, ptr %275, align 8
  store ptr %result.i353, ptr %4898, align 8
  store i32 9, ptr %4899, align 8
  %4900 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %275)
  store ptr %result.i352, ptr %result.i353, align 8
  %4901 = getelementptr i8, ptr %result.i353, i64 8
  store i32 1, ptr %4901, align 4
  %4902 = getelementptr i8, ptr %result.i353, i64 12
  store i32 2, ptr %4902, align 4
  %4903 = load i160, ptr %4898, align 8
  %4904 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %.sroa.3.8.extract.trunc.i959 = trunc i160 %4903 to i64
  %4905 = inttoptr i64 %.sroa.3.8.extract.trunc.i959 to ptr
  %4906 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4907 = getelementptr i8, ptr %4905, i64 8
  %4908 = load i32, ptr %4907, align 4
  %4909 = add i32 %4908, 1
  %4910 = sext i32 %4909 to i64
  %result.i.i2100 = call noalias ptr @bump_malloc_inner(i64 noundef %4910, ptr nonnull @current_ptr) #29
  %4911 = load i32, ptr %4907, align 4
  %4912 = icmp sgt i32 %4911, 0
  br i1 %4912, label %.lr.ph.i2101, label %String_c_string_.exit2105

.lr.ph.i2101:                                     ; preds = %String_c_string_.exit2085
  %4913 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %4914 = load ptr, ptr %4905, align 8
  %4915 = zext nneg i32 %4911 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i2100, ptr align 1 %4914, i64 %4915, i1 false)
  br label %String_c_string_.exit2105

String_c_string_.exit2105:                        ; preds = %.lr.ph.i2101, %String_c_string_.exit2085
  %4916 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %4917 = sext i32 %4911 to i64
  %4918 = getelementptr i8, ptr %result.i.i2100, i64 %4917
  store i8 0, ptr %4918, align 1
  %puts.i975 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i2100)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  ret void
}

define void @benchmark_remove_random(i32 %0) local_unnamed_addr {
  %2 = alloca [0 x ptr], align 8
  %3 = alloca [1 x ptr], align 8
  %4 = alloca { ptr }, align 8
  %5 = alloca [2 x ptr], align 8
  %6 = alloca { ptr, ptr }, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %.sroa.0680.i4857 = alloca ptr, align 8
  %10 = alloca i64, align 8
  %11 = alloca [1 x ptr], align 8
  %12 = alloca { ptr }, align 8
  %13 = alloca [2 x ptr], align 8
  %14 = alloca { ptr, ptr }, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %.sroa.0.i4859 = alloca ptr, align 8
  %18 = alloca i64, align 8
  %19 = alloca [1 x ptr], align 8
  %20 = alloca { ptr }, align 8
  %21 = alloca [2 x ptr], align 8
  %22 = alloca { ptr, ptr }, align 8
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %.sroa.0680.i4701 = alloca ptr, align 8
  %26 = alloca i64, align 8
  %27 = alloca [1 x ptr], align 8
  %28 = alloca { ptr }, align 8
  %29 = alloca [2 x ptr], align 8
  %30 = alloca { ptr, ptr }, align 8
  %31 = alloca i32, align 4
  %32 = alloca i32, align 4
  %33 = alloca i32, align 4
  %.sroa.0.i4703 = alloca ptr, align 8
  %34 = alloca i64, align 8
  %35 = alloca [1 x ptr], align 8
  %36 = alloca { ptr }, align 8
  %37 = alloca [2 x ptr], align 8
  %38 = alloca { ptr, ptr }, align 8
  %39 = alloca i32, align 4
  %40 = alloca i32, align 4
  %41 = alloca i32, align 4
  %.sroa.0680.i4545 = alloca ptr, align 8
  %42 = alloca i64, align 8
  %43 = alloca [1 x ptr], align 8
  %44 = alloca { ptr }, align 8
  %45 = alloca [2 x ptr], align 8
  %46 = alloca { ptr, ptr }, align 8
  %47 = alloca i32, align 4
  %48 = alloca i32, align 4
  %49 = alloca i32, align 4
  %.sroa.0.i4547 = alloca ptr, align 8
  %50 = alloca i64, align 8
  %51 = alloca [1 x ptr], align 8
  %52 = alloca { ptr }, align 8
  %53 = alloca [2 x ptr], align 8
  %54 = alloca { ptr, ptr }, align 8
  %55 = alloca i32, align 4
  %56 = alloca i32, align 4
  %57 = alloca i32, align 4
  %.sroa.0680.i4415 = alloca ptr, align 8
  %58 = alloca i64, align 8
  %59 = alloca [1 x ptr], align 8
  %60 = alloca { ptr }, align 8
  %61 = alloca [2 x ptr], align 8
  %62 = alloca { ptr, ptr }, align 8
  %63 = alloca i32, align 4
  %64 = alloca i32, align 4
  %65 = alloca i32, align 4
  %.sroa.0.i4416 = alloca ptr, align 8
  %66 = alloca i64, align 8
  %67 = alloca [1 x ptr], align 8
  %68 = alloca { ptr }, align 8
  %69 = alloca [2 x ptr], align 8
  %70 = alloca { ptr, ptr }, align 8
  %71 = alloca i32, align 4
  %72 = alloca i32, align 4
  %73 = alloca i32, align 4
  %.sroa.0680.i4203 = alloca ptr, align 8
  %74 = alloca i64, align 8
  %75 = alloca [1 x ptr], align 8
  %76 = alloca { ptr }, align 8
  %77 = alloca [2 x ptr], align 8
  %78 = alloca { ptr, ptr }, align 8
  %79 = alloca i32, align 4
  %80 = alloca i32, align 4
  %81 = alloca i32, align 4
  %.sroa.0.i4205 = alloca ptr, align 8
  %82 = alloca i64, align 8
  %83 = alloca [1 x ptr], align 8
  %84 = alloca { ptr }, align 8
  %85 = alloca [2 x ptr], align 8
  %86 = alloca { ptr, ptr }, align 8
  %87 = alloca i32, align 4
  %88 = alloca i32, align 4
  %89 = alloca i32, align 4
  %.sroa.0680.i4046 = alloca ptr, align 8
  %90 = alloca i64, align 8
  %91 = alloca [1 x ptr], align 8
  %92 = alloca { ptr }, align 8
  %93 = alloca [2 x ptr], align 8
  %94 = alloca { ptr, ptr }, align 8
  %95 = alloca i32, align 4
  %96 = alloca i32, align 4
  %97 = alloca i32, align 4
  %.sroa.0.i4048 = alloca ptr, align 8
  %98 = alloca i64, align 8
  %99 = alloca [1 x ptr], align 8
  %100 = alloca { ptr }, align 8
  %101 = alloca [2 x ptr], align 8
  %102 = alloca { ptr, ptr }, align 8
  %103 = alloca i32, align 4
  %104 = alloca i32, align 4
  %105 = alloca i32, align 4
  %.sroa.0680.i3889 = alloca ptr, align 8
  %106 = alloca i64, align 8
  %107 = alloca [1 x ptr], align 8
  %108 = alloca { ptr }, align 8
  %109 = alloca [2 x ptr], align 8
  %110 = alloca { ptr, ptr }, align 8
  %111 = alloca i32, align 4
  %112 = alloca i32, align 4
  %113 = alloca i32, align 4
  %.sroa.0.i3891 = alloca ptr, align 8
  %114 = alloca i64, align 8
  %115 = alloca [1 x ptr], align 8
  %116 = alloca { ptr }, align 8
  %117 = alloca [2 x ptr], align 8
  %118 = alloca { ptr, ptr }, align 8
  %119 = alloca i32, align 4
  %120 = alloca i32, align 4
  %121 = alloca i32, align 4
  %.sroa.0680.i3775 = alloca ptr, align 8
  %122 = alloca i64, align 8
  %123 = alloca [1 x ptr], align 8
  %124 = alloca { ptr }, align 8
  %125 = alloca [2 x ptr], align 8
  %126 = alloca { ptr, ptr }, align 8
  %127 = alloca i32, align 4
  %128 = alloca i32, align 4
  %129 = alloca i32, align 4
  %.sroa.0.i3776 = alloca ptr, align 8
  %130 = alloca i64, align 8
  %131 = alloca [1 x ptr], align 8
  %132 = alloca { ptr }, align 8
  %133 = alloca [1 x ptr], align 8
  %134 = alloca { ptr }, align 8
  %135 = alloca [1 x ptr], align 8
  %136 = alloca { ptr }, align 8
  %137 = alloca [1 x ptr], align 8
  %138 = alloca { ptr }, align 8
  %139 = alloca [1 x ptr], align 8
  %140 = alloca { ptr }, align 8
  %141 = alloca [1 x ptr], align 8
  %142 = alloca { ptr }, align 8
  %143 = alloca [1 x ptr], align 8
  %144 = alloca { ptr }, align 8
  %145 = alloca [1 x ptr], align 8
  %146 = alloca { ptr }, align 8
  %147 = alloca [1 x ptr], align 8
  %148 = alloca { ptr }, align 8
  %149 = alloca [1 x ptr], align 8
  %150 = alloca { ptr }, align 8
  %151 = alloca [1 x ptr], align 8
  %152 = alloca { ptr }, align 8
  %153 = alloca [1 x ptr], align 8
  %154 = alloca { ptr }, align 8
  %155 = alloca { ptr, ptr, ptr, i32 }, align 8
  %156 = alloca { ptr, ptr, ptr, i32 }, align 8
  %157 = alloca [1 x ptr], align 8
  %158 = alloca { ptr }, align 8
  %159 = alloca [2 x ptr], align 8
  %160 = alloca { ptr, ptr }, align 8
  %161 = alloca i32, align 4
  %162 = alloca i32, align 4
  %163 = alloca i32, align 4
  %.sroa.0680.i2437 = alloca ptr, align 8
  %164 = alloca i64, align 8
  %165 = alloca [1 x ptr], align 8
  %166 = alloca { ptr }, align 8
  %167 = alloca [2 x ptr], align 8
  %168 = alloca { ptr, ptr }, align 8
  %169 = alloca i32, align 4
  %170 = alloca i32, align 4
  %171 = alloca i32, align 4
  %.sroa.0.i2439 = alloca ptr, align 8
  %172 = alloca i64, align 8
  %173 = alloca { ptr, ptr, ptr, i32 }, align 8
  %174 = alloca { ptr, ptr, ptr, i32 }, align 8
  %175 = alloca [1 x ptr], align 8
  %176 = alloca { ptr }, align 8
  %177 = alloca [2 x ptr], align 8
  %178 = alloca { ptr, ptr }, align 8
  %179 = alloca i32, align 4
  %180 = alloca i32, align 4
  %181 = alloca i32, align 4
  %.sroa.0680.i2188 = alloca ptr, align 8
  %182 = alloca i64, align 8
  %183 = alloca [1 x ptr], align 8
  %184 = alloca { ptr }, align 8
  %185 = alloca [2 x ptr], align 8
  %186 = alloca { ptr, ptr }, align 8
  %187 = alloca i32, align 4
  %188 = alloca i32, align 4
  %189 = alloca i32, align 4
  %.sroa.0.i2189 = alloca ptr, align 8
  %190 = alloca i64, align 8
  %191 = alloca { ptr, ptr, ptr, i32 }, align 8
  %192 = alloca { ptr, ptr, ptr, i32 }, align 8
  %193 = alloca { ptr, ptr, ptr, i32 }, align 8
  %194 = alloca { ptr, ptr, ptr, i32 }, align 8
  %195 = alloca { ptr, ptr, ptr, i32 }, align 8
  %196 = alloca [1 x ptr], align 8
  %197 = alloca { ptr }, align 8
  %198 = alloca [2 x ptr], align 8
  %199 = alloca { ptr, ptr }, align 8
  %200 = alloca i32, align 4
  %201 = alloca i32, align 4
  %202 = alloca i32, align 4
  %.sroa.0680.i1575 = alloca ptr, align 8
  %203 = alloca i64, align 8
  %204 = alloca [1 x ptr], align 8
  %205 = alloca { ptr }, align 8
  %206 = alloca [2 x ptr], align 8
  %207 = alloca { ptr, ptr }, align 8
  %208 = alloca i32, align 4
  %209 = alloca i32, align 4
  %210 = alloca i32, align 4
  %.sroa.0.i1577 = alloca ptr, align 8
  %211 = alloca i64, align 8
  %212 = alloca { ptr, ptr, ptr, i32 }, align 8
  %213 = alloca { ptr, ptr, ptr, i32 }, align 8
  %214 = alloca [1 x ptr], align 8
  %215 = alloca { ptr }, align 8
  %216 = alloca [2 x ptr], align 8
  %217 = alloca { ptr, ptr }, align 8
  %218 = alloca i32, align 4
  %219 = alloca i32, align 4
  %220 = alloca i32, align 4
  %.sroa.0680.i = alloca ptr, align 8
  %221 = alloca i64, align 8
  %222 = alloca [1 x ptr], align 8
  %223 = alloca { ptr }, align 8
  %224 = alloca [2 x ptr], align 8
  %225 = alloca { ptr, ptr }, align 8
  %226 = alloca i32, align 4
  %227 = alloca i32, align 4
  %228 = alloca i32, align 4
  %.sroa.0.i1415 = alloca ptr, align 8
  %229 = alloca i64, align 8
  %230 = alloca { ptr, ptr, ptr, i32 }, align 8
  %231 = alloca { ptr, ptr, ptr, i32 }, align 8
  %232 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.sroa.0271.i1151 = alloca ptr, align 8
  %.sroa.1.i1152 = alloca i160, align 8
  %.sroa.0.i1153 = alloca ptr, align 8
  %.sroa.2.i1154 = alloca i160, align 8
  %233 = alloca [1 x ptr], align 8
  %234 = alloca { ptr }, align 8
  %.sroa.0123.i1155 = alloca ptr, align 8
  %.sroa.2124.i1156 = alloca i160, align 8
  %.sroa.0115.i1157 = alloca ptr, align 8
  %.sroa.2116.i1158 = alloca i160, align 8
  %235 = alloca [1 x ptr], align 8
  %236 = alloca { ptr }, align 8
  %237 = alloca [2 x ptr], align 8
  %238 = alloca { ptr, ptr }, align 8
  %239 = alloca [1 x ptr], align 8
  %240 = alloca { ptr }, align 8
  %241 = alloca [2 x ptr], align 8
  %242 = alloca { ptr, ptr }, align 8
  %243 = alloca [1 x ptr], align 8
  %244 = alloca { ptr }, align 8
  %245 = alloca { ptr, ptr, ptr, i32 }, align 8
  %246 = alloca [2 x ptr], align 8
  %247 = alloca { ptr, ptr }, align 8
  %248 = alloca [1 x ptr], align 8
  %249 = alloca { ptr }, align 8
  %250 = alloca { ptr, ptr, ptr, i32 }, align 8
  %251 = alloca [2 x ptr], align 8
  %252 = alloca { ptr, ptr }, align 8
  %253 = alloca { ptr, ptr, ptr, i32 }, align 8
  %254 = alloca [1 x ptr], align 8
  %255 = alloca { ptr }, align 8
  %256 = alloca { ptr, ptr, ptr, i32 }, align 8
  %257 = alloca [2 x ptr], align 8
  %258 = alloca { ptr, ptr }, align 8
  %259 = alloca [1 x ptr], align 8
  %260 = alloca { ptr }, align 8
  %261 = alloca { ptr, ptr, ptr, i32 }, align 8
  %262 = alloca [2 x ptr], align 8
  %263 = alloca { ptr, ptr }, align 8
  %264 = alloca { ptr, ptr, ptr, i32 }, align 8
  %265 = alloca [1 x ptr], align 8
  %266 = alloca { ptr }, align 8
  %.sroa.0271.i = alloca ptr, align 8
  %.sroa.1.i = alloca i160, align 8
  %.sroa.0.i = alloca ptr, align 8
  %.sroa.2.i = alloca i160, align 8
  %267 = alloca [1 x ptr], align 8
  %268 = alloca { ptr }, align 8
  %.sroa.0123.i = alloca ptr, align 8
  %.sroa.2124.i = alloca i160, align 8
  %.sroa.0115.i = alloca ptr, align 8
  %.sroa.2116.i = alloca i160, align 8
  %269 = alloca [1 x ptr], align 8
  %270 = alloca { ptr }, align 8
  %oldProtect.i157 = alloca i32, align 4
  %oldProtect.i153 = alloca i32, align 4
  %oldProtect.i118 = alloca i32, align 4
  %oldProtect.i = alloca i32, align 4
  %271 = alloca [2 x ptr], align 8
  %.sroa.081.sroa.0 = alloca i8, align 8
  %272 = alloca [2 x ptr], align 8
  %273 = alloca { ptr, ptr, ptr, i32 }, align 8
  %274 = alloca { ptr, ptr, ptr, i32 }, align 8
  %275 = alloca { ptr, ptr, ptr, i32 }, align 8
  %276 = alloca { ptr, ptr, ptr, i32 }, align 8
  %277 = alloca { ptr, ptr, ptr, i32 }, align 8
  %278 = alloca { ptr, ptr, ptr, i32 }, align 8
  %279 = alloca { ptr, ptr, ptr, i32 }, align 8
  %280 = alloca { ptr, ptr, ptr, i32 }, align 8
  %281 = alloca { ptr, ptr, ptr, i32 }, align 8
  %result.i = tail call noalias dereferenceable_or_null(120) ptr @bump_malloc_inner(i64 noundef 120, ptr nonnull @current_ptr) #29
  store ptr @_parameterization_Ptri32, ptr %result.i, align 8
  %282 = getelementptr i8, ptr %result.i, i64 8
  store ptr @_parameterization_Ptri32, ptr %282, align 8
  %283 = getelementptr i8, ptr %result.i, i64 16
  store ptr @_parameterization_PairPtri32._Ptri32, ptr %283, align 8
  %284 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %result.i)
  %result.i115 = tail call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %oldProtect.i)
  %result.i116 = call i32 @VirtualProtect(ptr %result.i115, i64 16, i32 64, ptr nonnull %oldProtect.i) #16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %oldProtect.i)
  call void @llvm.init.trampoline(ptr %result.i115, ptr nonnull @tgbqackegg, ptr nonnull @i32_hasher)
  %ret.i = call ptr @llvm.adjust.trampoline(ptr readonly %result.i115) #31
  %285 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i115)
  %result.i117 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %oldProtect.i118)
  %result.i119 = call i32 @VirtualProtect(ptr %result.i117, i64 16, i32 64, ptr nonnull %oldProtect.i118) #16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %oldProtect.i118)
  call void @llvm.init.trampoline(ptr %result.i117, ptr nonnull @cayekynbzj, ptr nonnull @i32_eq)
  %ret.i120 = call ptr @llvm.adjust.trampoline(ptr readonly %result.i117) #31
  %286 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i117)
  %287 = getelementptr i8, ptr %result.i, i64 96
  store ptr %ret.i, ptr %287, align 8
  %288 = getelementptr i8, ptr %result.i, i64 104
  store ptr %ret.i120, ptr %288, align 8
  %result.i.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %289 = getelementptr i8, ptr %result.i.i, i64 16
  store ptr @_parameterization_Nil, ptr %289, align 8
  %result.i4.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %290 = getelementptr i8, ptr %result.i4.i, i64 16
  store ptr @_parameterization_Ptri32, ptr %290, align 8
  %291 = getelementptr i8, ptr %result.i4.i, i64 8
  store ptr @_parameterization_Ptri32, ptr %291, align 8
  %292 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i4.i)
  store ptr @Entry, ptr %result.i4.i, align 8
  %293 = getelementptr i8, ptr %result.i.i, i64 8
  store ptr %result.i4.i, ptr %293, align 8
  %294 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i)
  store ptr @union_typ, ptr %result.i.i, align 8
  %result.i5.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i, ptr %result.i5.i, align 8
  %295 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i5.i)
  %296 = getelementptr i8, ptr %result.i5.i, i64 16
  store i32 8, ptr %296, align 4
  %297 = getelementptr i8, ptr %result.i5.i, i64 20
  store i32 8, ptr %297, align 4
  %result.i.i.i = call noalias dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nonnull @current_ptr) #29
  %298 = getelementptr i8, ptr %result.i5.i, i64 8
  store ptr %result.i.i.i, ptr %298, align 8
  %299 = getelementptr i8, ptr %result.i, i64 24
  store ptr @Array, ptr %299, align 8
  %300 = getelementptr i8, ptr %result.i, i64 32
  store ptr %result.i5.i, ptr %300, align 8
  %301 = getelementptr i8, ptr %result.i, i64 48
  store i32 9, ptr %301, align 4
  %result.i20.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %302 = getelementptr i8, ptr %result.i20.i, i64 16
  store ptr @_parameterization_Nil, ptr %302, align 8
  %result.i21.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %303 = getelementptr i8, ptr %result.i21.i, i64 16
  store ptr @_parameterization_Ptri32, ptr %303, align 8
  %304 = getelementptr i8, ptr %result.i21.i, i64 8
  store ptr @_parameterization_Ptri32, ptr %304, align 8
  %305 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i21.i)
  store ptr @Entry, ptr %result.i21.i, align 8
  %306 = getelementptr i8, ptr %result.i20.i, i64 8
  store ptr %result.i21.i, ptr %306, align 8
  %307 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i20.i)
  store ptr @union_typ, ptr %result.i20.i, align 8
  %result.i22.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i20.i, ptr %result.i22.i, align 8
  %308 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i22.i)
  %309 = getelementptr i8, ptr %result.i22.i, i64 16
  store i32 8, ptr %309, align 4
  %310 = getelementptr i8, ptr %result.i22.i, i64 20
  store i32 8, ptr %310, align 4
  %result.i.i97.i = call noalias dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nonnull @current_ptr) #29
  %311 = getelementptr i8, ptr %result.i22.i, i64 8
  store ptr %result.i.i97.i, ptr %311, align 8
  %312 = getelementptr i8, ptr %result.i, i64 56
  store ptr @Array, ptr %312, align 8
  %313 = getelementptr i8, ptr %result.i, i64 64
  store ptr %result.i22.i, ptr %313, align 8
  %314 = getelementptr i8, ptr %result.i, i64 80
  store i32 9, ptr %314, align 4
  %315 = getelementptr i8, ptr %result.i, i64 112
  store i32 100, ptr %315, align 4
  %result.i121 = call noalias dereferenceable_or_null(4) ptr @bump_malloc_inner(i64 noundef 4, ptr nonnull @current_ptr) #29
  %316 = call ptr @llvm.invariant.start.p0(i64 40, ptr nonnull @PRNG)
  store i32 101112, ptr %result.i121, align 4
  %result.i136 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr @_parameterization_Ptri32, ptr %result.i136, align 8
  %317 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i136)
  %318 = getelementptr i8, ptr %result.i136, i64 20
  store i32 %0, ptr %318, align 4
  %319 = sext i32 %0 to i64
  %320 = shl nsw i64 %319, 5
  %result.i.i487 = call noalias ptr @bump_malloc_inner(i64 noundef %320, ptr nonnull @current_ptr) #29
  %321 = getelementptr i8, ptr %result.i136, i64 8
  store ptr %result.i.i487, ptr %321, align 8
  %result.i151 = call noalias dereferenceable_or_null(120) ptr @bump_malloc_inner(i64 noundef 120, ptr nonnull @current_ptr) #29
  store ptr @_parameterization_Ptri32, ptr %result.i151, align 8
  %322 = getelementptr i8, ptr %result.i151, i64 8
  store ptr @_parameterization_Ptri1, ptr %322, align 8
  %323 = getelementptr i8, ptr %result.i151, i64 16
  store ptr @_parameterization_PairPtri32._Ptri1, ptr %323, align 8
  %324 = call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %result.i151)
  %result.i152 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %oldProtect.i153)
  %result.i154 = call i32 @VirtualProtect(ptr %result.i152, i64 16, i32 64, ptr nonnull %oldProtect.i153) #16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %oldProtect.i153)
  call void @llvm.init.trampoline(ptr %result.i152, ptr nonnull @mkxcrwwhcc, ptr nonnull @i32_hasher)
  %ret.i155 = call ptr @llvm.adjust.trampoline(ptr readonly %result.i152) #31
  %325 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i152)
  %result.i156 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %oldProtect.i157)
  %result.i158 = call i32 @VirtualProtect(ptr %result.i156, i64 16, i32 64, ptr nonnull %oldProtect.i157) #16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %oldProtect.i157)
  call void @llvm.init.trampoline(ptr %result.i156, ptr nonnull @cohscmaral, ptr nonnull @i32_eq)
  %ret.i159 = call ptr @llvm.adjust.trampoline(ptr readonly %result.i156) #31
  %326 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i156)
  %327 = getelementptr i8, ptr %result.i151, i64 96
  store ptr %ret.i155, ptr %327, align 8
  %328 = getelementptr i8, ptr %result.i151, i64 104
  store ptr %ret.i159, ptr %328, align 8
  %result.i.i658 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %329 = getelementptr i8, ptr %result.i.i658, i64 16
  store ptr @_parameterization_Nil, ptr %329, align 8
  %result.i4.i659 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %330 = getelementptr i8, ptr %result.i4.i659, i64 16
  store ptr @_parameterization_Ptri1, ptr %330, align 8
  %331 = getelementptr i8, ptr %result.i4.i659, i64 8
  store ptr @_parameterization_Ptri32, ptr %331, align 8
  %332 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i4.i659)
  store ptr @Entry, ptr %result.i4.i659, align 8
  %333 = getelementptr i8, ptr %result.i.i658, i64 8
  store ptr %result.i4.i659, ptr %333, align 8
  %334 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i658)
  store ptr @union_typ, ptr %result.i.i658, align 8
  %result.i5.i660 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i658, ptr %result.i5.i660, align 8
  %335 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i5.i660)
  %336 = getelementptr i8, ptr %result.i5.i660, i64 16
  store i32 8, ptr %336, align 4
  %337 = getelementptr i8, ptr %result.i5.i660, i64 20
  store i32 8, ptr %337, align 4
  %result.i.i.i661 = call noalias dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nonnull @current_ptr) #29
  %338 = getelementptr i8, ptr %result.i5.i660, i64 8
  store ptr %result.i.i.i661, ptr %338, align 8
  %339 = getelementptr i8, ptr %result.i151, i64 24
  store ptr @Array, ptr %339, align 8
  %340 = getelementptr i8, ptr %result.i151, i64 32
  store ptr %result.i5.i660, ptr %340, align 8
  %341 = getelementptr i8, ptr %result.i151, i64 40
  %342 = getelementptr i8, ptr %result.i151, i64 48
  store i32 9, ptr %342, align 4
  %result.i20.i662 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %343 = getelementptr i8, ptr %result.i20.i662, i64 16
  store ptr @_parameterization_Nil, ptr %343, align 8
  %result.i21.i663 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %344 = getelementptr i8, ptr %result.i21.i663, i64 16
  store ptr @_parameterization_Ptri1, ptr %344, align 8
  %345 = getelementptr i8, ptr %result.i21.i663, i64 8
  store ptr @_parameterization_Ptri32, ptr %345, align 8
  %346 = getelementptr i8, ptr %result.i21.i663, i64 24
  store ptr null, ptr %346, align 8
  %347 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i21.i663)
  store ptr @Entry, ptr %result.i21.i663, align 8
  %348 = getelementptr i8, ptr %result.i20.i662, i64 8
  store ptr %result.i21.i663, ptr %348, align 8
  %349 = getelementptr i8, ptr %result.i20.i662, i64 24
  store ptr null, ptr %349, align 8
  %350 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i20.i662)
  store ptr @union_typ, ptr %result.i20.i662, align 8
  %result.i22.i664 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i20.i662, ptr %result.i22.i664, align 8
  %351 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i22.i664)
  %352 = getelementptr i8, ptr %result.i22.i664, i64 16
  store i32 8, ptr %352, align 4
  %353 = getelementptr i8, ptr %result.i22.i664, i64 20
  store i32 8, ptr %353, align 4
  %result.i.i97.i665 = call noalias dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nonnull @current_ptr) #29
  %354 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %355 = getelementptr i8, ptr %result.i22.i664, i64 8
  store ptr %result.i.i97.i665, ptr %355, align 8
  %356 = getelementptr i8, ptr %result.i151, i64 56
  store ptr @Array, ptr %356, align 8
  %357 = getelementptr i8, ptr %result.i151, i64 64
  store ptr %result.i22.i664, ptr %357, align 8
  %358 = getelementptr i8, ptr %result.i151, i64 72
  %359 = getelementptr i8, ptr %result.i151, i64 80
  store i32 9, ptr %359, align 4
  %360 = getelementptr i8, ptr %result.i151, i64 88
  store i32 0, ptr %360, align 4
  %361 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %362 = getelementptr i8, ptr %result.i151, i64 112
  store i32 100, ptr %362, align 4
  %363 = mul i32 %0, 10
  %364 = icmp sgt i32 %0, 0
  %365 = icmp sgt i32 %363, 0
  %366 = and i1 %364, %365
  br i1 %366, label %.lr.ph, label %._crit_edge443

.lr.ph:                                           ; preds = %1
  %367 = getelementptr inbounds i8, ptr %271, i64 8
  %368 = getelementptr inbounds i8, ptr %272, i64 8
  %.promoted623 = load ptr, ptr %367, align 8
  %.promoted626 = load ptr, ptr %368, align 8
  %369 = getelementptr inbounds i8, ptr %264, i64 8
  %370 = getelementptr inbounds i8, ptr %264, i64 24
  %371 = getelementptr inbounds i8, ptr %264, i64 16
  %372 = getelementptr inbounds i8, ptr %261, i64 8
  %373 = getelementptr inbounds i8, ptr %261, i64 24
  %374 = getelementptr inbounds i8, ptr %261, i64 16
  %375 = getelementptr inbounds i8, ptr %262, i64 8
  %376 = getelementptr inbounds i8, ptr %263, i64 8
  %377 = getelementptr inbounds i8, ptr %256, i64 8
  %378 = getelementptr inbounds i8, ptr %256, i64 24
  %379 = getelementptr inbounds i8, ptr %256, i64 16
  %380 = getelementptr inbounds i8, ptr %257, i64 8
  %381 = getelementptr inbounds i8, ptr %258, i64 8
  %382 = getelementptr inbounds i8, ptr %253, i64 8
  %383 = getelementptr inbounds i8, ptr %253, i64 24
  %384 = getelementptr inbounds i8, ptr %253, i64 16
  %385 = getelementptr inbounds i8, ptr %250, i64 8
  %386 = getelementptr inbounds i8, ptr %250, i64 24
  %387 = getelementptr inbounds i8, ptr %250, i64 16
  %388 = getelementptr inbounds i8, ptr %251, i64 8
  %389 = getelementptr inbounds i8, ptr %252, i64 8
  %390 = getelementptr inbounds i8, ptr %245, i64 8
  %391 = getelementptr inbounds i8, ptr %245, i64 24
  %392 = getelementptr inbounds i8, ptr %245, i64 16
  %393 = getelementptr inbounds i8, ptr %246, i64 8
  %394 = getelementptr inbounds i8, ptr %247, i64 8
  %395 = getelementptr i8, ptr %result.i, i64 40
  %396 = getelementptr i8, ptr %result.i, i64 72
  %397 = getelementptr i8, ptr %result.i, i64 88
  %398 = getelementptr inbounds i8, ptr %231, i64 8
  %399 = getelementptr inbounds i8, ptr %231, i64 24
  %400 = getelementptr inbounds i8, ptr %231, i64 16
  %401 = getelementptr inbounds i8, ptr %232, i64 8
  %402 = getelementptr inbounds i8, ptr %232, i64 24
  %403 = getelementptr inbounds i8, ptr %232, i64 16
  %404 = getelementptr inbounds i8, ptr %230, i64 8
  %405 = getelementptr inbounds i8, ptr %230, i64 16
  %406 = getelementptr inbounds i8, ptr %230, i64 24
  %407 = getelementptr inbounds i8, ptr %224, i64 8
  %408 = getelementptr inbounds i8, ptr %225, i64 8
  %409 = getelementptr inbounds i8, ptr %216, i64 8
  %410 = getelementptr inbounds i8, ptr %217, i64 8
  %411 = getelementptr inbounds i8, ptr %212, i64 8
  %412 = getelementptr inbounds i8, ptr %212, i64 24
  %413 = getelementptr inbounds i8, ptr %212, i64 16
  %414 = getelementptr inbounds i8, ptr %213, i64 8
  %415 = getelementptr inbounds i8, ptr %213, i64 24
  %416 = getelementptr inbounds i8, ptr %213, i64 16
  %417 = getelementptr inbounds i8, ptr %206, i64 8
  %418 = getelementptr inbounds i8, ptr %207, i64 8
  %419 = getelementptr inbounds i8, ptr %198, i64 8
  %420 = getelementptr inbounds i8, ptr %199, i64 8
  %421 = getelementptr inbounds i8, ptr %194, i64 8
  %422 = getelementptr inbounds i8, ptr %194, i64 24
  %423 = getelementptr inbounds i8, ptr %194, i64 16
  %424 = getelementptr inbounds i8, ptr %195, i64 8
  %425 = getelementptr inbounds i8, ptr %195, i64 24
  %426 = getelementptr inbounds i8, ptr %195, i64 16
  %427 = getelementptr inbounds i8, ptr %192, i64 8
  %428 = getelementptr inbounds i8, ptr %192, i64 24
  %429 = getelementptr inbounds i8, ptr %192, i64 16
  %430 = getelementptr inbounds i8, ptr %193, i64 8
  %431 = getelementptr inbounds i8, ptr %193, i64 24
  %432 = getelementptr inbounds i8, ptr %193, i64 16
  %433 = getelementptr inbounds i8, ptr %191, i64 8
  %434 = getelementptr inbounds i8, ptr %191, i64 16
  %435 = getelementptr inbounds i8, ptr %191, i64 24
  %436 = getelementptr inbounds i8, ptr %185, i64 8
  %437 = getelementptr inbounds i8, ptr %186, i64 8
  %438 = getelementptr inbounds i8, ptr %177, i64 8
  %439 = getelementptr inbounds i8, ptr %178, i64 8
  %440 = getelementptr inbounds i8, ptr %173, i64 8
  %441 = getelementptr inbounds i8, ptr %173, i64 24
  %442 = getelementptr inbounds i8, ptr %173, i64 16
  %443 = getelementptr inbounds i8, ptr %174, i64 8
  %444 = getelementptr inbounds i8, ptr %174, i64 24
  %445 = getelementptr inbounds i8, ptr %174, i64 16
  %446 = getelementptr inbounds i8, ptr %167, i64 8
  %447 = getelementptr inbounds i8, ptr %168, i64 8
  %448 = getelementptr inbounds i8, ptr %159, i64 8
  %449 = getelementptr inbounds i8, ptr %160, i64 8
  %450 = getelementptr inbounds i8, ptr %155, i64 8
  %451 = getelementptr inbounds i8, ptr %155, i64 24
  %452 = getelementptr inbounds i8, ptr %155, i64 16
  %453 = getelementptr inbounds i8, ptr %156, i64 8
  %454 = getelementptr inbounds i8, ptr %156, i64 24
  %455 = getelementptr inbounds i8, ptr %156, i64 16
  %456 = insertvalue { ptr, ptr, ptr, i32 } { ptr @HashMap, ptr undef, ptr undef, i32 undef }, ptr %result.i151, 1
  %457 = insertvalue { ptr, ptr, ptr, i32 } %456, ptr undef, 2
  %458 = insertvalue { ptr, ptr, ptr, i32 } %457, i32 9, 3
  %459 = insertvalue { ptr, ptr, ptr, i32 } { ptr @HashMap, ptr undef, ptr undef, i32 undef }, ptr %result.i, 1
  %460 = insertvalue { ptr, ptr, ptr, i32 } %459, ptr undef, 2
  %461 = insertvalue { ptr, ptr, ptr, i32 } %460, i32 9, 3
  %462 = getelementptr inbounds i8, ptr %125, i64 8
  %463 = getelementptr inbounds i8, ptr %126, i64 8
  %464 = getelementptr inbounds i8, ptr %117, i64 8
  %465 = getelementptr inbounds i8, ptr %118, i64 8
  %466 = getelementptr inbounds i8, ptr %109, i64 8
  %467 = getelementptr inbounds i8, ptr %110, i64 8
  %468 = getelementptr inbounds i8, ptr %101, i64 8
  %469 = getelementptr inbounds i8, ptr %102, i64 8
  %470 = getelementptr inbounds i8, ptr %93, i64 8
  %471 = getelementptr inbounds i8, ptr %94, i64 8
  %472 = getelementptr inbounds i8, ptr %85, i64 8
  %473 = getelementptr inbounds i8, ptr %86, i64 8
  %474 = getelementptr inbounds i8, ptr %77, i64 8
  %475 = getelementptr inbounds i8, ptr %78, i64 8
  %476 = getelementptr inbounds i8, ptr %69, i64 8
  %477 = getelementptr inbounds i8, ptr %70, i64 8
  %478 = getelementptr inbounds i8, ptr %61, i64 8
  %479 = getelementptr inbounds i8, ptr %62, i64 8
  %480 = getelementptr inbounds i8, ptr %53, i64 8
  %481 = getelementptr inbounds i8, ptr %54, i64 8
  %482 = getelementptr inbounds i8, ptr %45, i64 8
  %483 = getelementptr inbounds i8, ptr %46, i64 8
  %484 = getelementptr inbounds i8, ptr %37, i64 8
  %485 = getelementptr inbounds i8, ptr %38, i64 8
  %486 = getelementptr inbounds i8, ptr %29, i64 8
  %487 = getelementptr inbounds i8, ptr %30, i64 8
  %488 = getelementptr inbounds i8, ptr %21, i64 8
  %489 = getelementptr inbounds i8, ptr %22, i64 8
  %490 = getelementptr inbounds i8, ptr %13, i64 8
  %491 = getelementptr inbounds i8, ptr %14, i64 8
  %492 = getelementptr inbounds i8, ptr %5, i64 8
  %493 = getelementptr inbounds i8, ptr %6, i64 8
  br label %494

494:                                              ; preds = %.lr.ph, %4397
  %_parameterization_Ptri1 = phi ptr [ %.promoted626, %.lr.ph ], [ %_parameterization_Ptri1627, %4397 ]
  %_parameterization_Ptri32624 = phi ptr [ %.promoted623, %.lr.ph ], [ %_parameterization_Ptri32625, %4397 ]
  %.reg2mem137.0441 = phi i32 [ 0, %.lr.ph ], [ %.reg2mem133.0, %4397 ]
  %.reg2mem135.0440 = phi i32 [ 0, %.lr.ph ], [ %4398, %4397 ]
  %495 = load i32, ptr %result.i121, align 4
  %496 = mul i32 %495, 1103515245
  %497 = add i32 %496, 12345
  %498 = and i32 %497, 2147483647
  store i32 %498, ptr %result.i121, align 4
  %499 = call ptr @llvm.invariant.start.p0(i64 40, ptr nonnull @PRNG)
  %.sroa.0104.0.insert.ext = zext nneg i32 %498 to i160
  %500 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0104.0.insert.ext, 1
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0271.i)
  call void @llvm.lifetime.start.p0(i64 20, ptr nonnull %.sroa.1.i)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i)
  call void @llvm.lifetime.start.p0(i64 20, ptr nonnull %.sroa.2.i)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %267)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %268)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0123.i)
  call void @llvm.lifetime.start.p0(i64 20, ptr nonnull %.sroa.2124.i)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0115.i)
  call void @llvm.lifetime.start.p0(i64 20, ptr nonnull %.sroa.2116.i)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %269)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %270)
  %501 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %502 = load ptr, ptr %327, align 8
  %503 = call i32 %502({ ptr, i160 } %500)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %504 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %505 = load ptr, ptr %339, align 8
  %506 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %505, 0
  %507 = load ptr, ptr %340, align 8
  %508 = insertvalue { ptr, ptr, ptr, i32 } %506, ptr %507, 1
  %509 = load ptr, ptr %341, align 8
  %510 = insertvalue { ptr, ptr, ptr, i32 } %508, ptr %509, 2
  %511 = load i32, ptr %342, align 4
  %512 = insertvalue { ptr, ptr, ptr, i32 } %510, i32 %511, 3
  %hash_coef_ptr.i.i10.i = getelementptr i8, ptr %505, i64 8
  %tbl_size_ptr.i.i11.i = getelementptr i8, ptr %505, i64 16
  %offset_tbl_ptr.i.i12.i = getelementptr i8, ptr %505, i64 40
  %hash_coef.i.i13.i = load i64, ptr %hash_coef_ptr.i.i10.i, align 4
  %tbl_size.i.i14.i = load i64, ptr %tbl_size_ptr.i.i11.i, align 4
  %offset_tbl.i.i15.i = load ptr, ptr %offset_tbl_ptr.i.i12.i, align 8
  %product.i.i.i16.i = mul i64 %hash_coef.i.i13.i, -5261542750394134544
  %shifted.i.i.i17.i = lshr i64 %product.i.i.i16.i, 32
  %xored.i.i.i18.i = xor i64 %shifted.i.i.i17.i, %product.i.i.i16.i
  %hash.i.i.i19.i = and i64 %xored.i.i.i18.i, %tbl_size.i.i14.i
  %offset_ptr.i.i20.i = getelementptr i32, ptr %offset_tbl.i.i15.i, i64 %hash.i.i.i19.i
  %offset.i.i21.i = load i32, ptr %offset_ptr.i.i20.i, align 4
  %eq.i.i1290 = icmp eq i32 %511, %offset.i.i21.i
  call void @llvm.assume(i1 %eq.i.i1290) #30
  %513 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %514 = call ptr @llvm.invariant.start.p0(i64 600, ptr %505)
  %515 = sext i32 %511 to i64
  %516 = getelementptr ptr, ptr %505, i64 %515
  %517 = getelementptr i8, ptr %516, i64 64
  %518 = load ptr, ptr %517, align 8
  %519 = call ptr %518({ ptr, ptr, ptr, i32 } %512, ptr nonnull %2)
  %520 = call i32 %519({ ptr, ptr, ptr, i32 } %512, { ptr, ptr, ptr, i32 } %512, ptr nonnull %2)
  %521 = add i32 %520, -1
  %522 = and i32 %521, %503
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %523 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %524 = load ptr, ptr %339, align 8
  %525 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %524, 0
  %526 = load ptr, ptr %340, align 8
  %527 = insertvalue { ptr, ptr, ptr, i32 } %525, ptr %526, 1
  %528 = load ptr, ptr %341, align 8
  %529 = insertvalue { ptr, ptr, ptr, i32 } %527, ptr %528, 2
  %530 = load i32, ptr %342, align 4
  %531 = insertvalue { ptr, ptr, ptr, i32 } %529, i32 %530, 3
  %hash_coef_ptr.i.i130.i = getelementptr i8, ptr %524, i64 8
  %tbl_size_ptr.i.i131.i = getelementptr i8, ptr %524, i64 16
  %offset_tbl_ptr.i.i132.i = getelementptr i8, ptr %524, i64 40
  %hash_coef.i.i133.i = load i64, ptr %hash_coef_ptr.i.i130.i, align 4
  %tbl_size.i.i134.i = load i64, ptr %tbl_size_ptr.i.i131.i, align 4
  %offset_tbl.i.i135.i = load ptr, ptr %offset_tbl_ptr.i.i132.i, align 8
  %product.i.i.i136.i = mul i64 %hash_coef.i.i133.i, -5261542750394134544
  %shifted.i.i.i137.i = lshr i64 %product.i.i.i136.i, 32
  %xored.i.i.i138.i = xor i64 %shifted.i.i.i137.i, %product.i.i.i136.i
  %hash.i.i.i139.i = and i64 %xored.i.i.i138.i, %tbl_size.i.i134.i
  %offset_ptr.i.i140.i = getelementptr i32, ptr %offset_tbl.i.i135.i, i64 %hash.i.i.i139.i
  %offset.i.i141.i = load i32, ptr %offset_ptr.i.i140.i, align 4
  %eq.i.i = icmp eq i32 %530, %offset.i.i141.i
  call void @llvm.assume(i1 %eq.i.i) #30
  store ptr @_parameterization_Ptri32, ptr %269, align 8
  %532 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %269)
  %533 = call ptr @llvm.invariant.start.p0(i64 600, ptr %524)
  %534 = sext i32 %530 to i64
  %535 = getelementptr ptr, ptr %524, i64 %534
  %536 = getelementptr i8, ptr %535, i64 120
  %537 = load ptr, ptr %536, align 8
  store ptr @i32_typ, ptr %270, align 8
  %538 = call ptr %537({ ptr, ptr, ptr, i32 } %531, ptr nonnull %270)
  %539 = call { ptr, i160 } %538({ ptr, ptr, ptr, i32 } %531, { ptr, ptr, ptr, i32 } %531, ptr nonnull %269, i32 %522)
  %.fca.0.extract.i690 = extractvalue { ptr, i160 } %539, 0
  %540 = icmp ne ptr %.fca.0.extract.i690, @nil_typ
  %541 = icmp ne ptr %.fca.0.extract.i690, null
  %.not126.i = and i1 %540, %541
  br i1 %.not126.i, label %542, label %.critedge.i

542:                                              ; preds = %494
  %.fca.1.extract.i = extractvalue { ptr, i160 } %539, 1
  %.sroa.5.8.extract.trunc.i = trunc i160 %.fca.1.extract.i to i64
  %543 = inttoptr i64 %.sroa.5.8.extract.trunc.i to ptr
  %.sroa.9.8.extract.shift.i = lshr i160 %.fca.1.extract.i, 64
  %.sroa.9.8.extract.trunc.i = trunc i160 %.sroa.9.8.extract.shift.i to i64
  %544 = inttoptr i64 %.sroa.9.8.extract.trunc.i to ptr
  %hash_coef_ptr.i.i144.i = getelementptr i8, ptr %.fca.0.extract.i690, i64 8
  %tbl_size_ptr.i.i145.i = getelementptr i8, ptr %.fca.0.extract.i690, i64 16
  %offset_tbl_ptr.i.i146.i = getelementptr i8, ptr %.fca.0.extract.i690, i64 40
  %hash_coef.i.i147.i = load i64, ptr %hash_coef_ptr.i.i144.i, align 4
  %tbl_size.i.i148.i = load i64, ptr %tbl_size_ptr.i.i145.i, align 4
  %offset_tbl.i.i149.i = load ptr, ptr %offset_tbl_ptr.i.i146.i, align 8
  %product.i.i.i150.i = mul i64 %hash_coef.i.i147.i, 4015701072841558310
  %shifted.i.i.i151.i = lshr i64 %product.i.i.i150.i, 32
  %xored.i.i.i152.i = xor i64 %shifted.i.i.i151.i, %product.i.i.i150.i
  %hash.i.i.i153.i = and i64 %xored.i.i.i152.i, %tbl_size.i.i148.i
  %offset_ptr.i.i154.i = getelementptr i32, ptr %offset_tbl.i.i149.i, i64 %hash.i.i.i153.i
  %offset.i.i155.i = load i32, ptr %offset_ptr.i.i154.i, align 4
  %545 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract.i690, 0
  %546 = insertvalue { ptr, ptr, ptr, i32 } %545, ptr %543, 1
  %547 = insertvalue { ptr, ptr, ptr, i32 } %546, ptr %544, 2
  %548 = insertvalue { ptr, ptr, ptr, i32 } %547, i32 %offset.i.i155.i, 3
  %549 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %550 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %551 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract.i690)
  %552 = sext i32 %offset.i.i155.i to i64
  %553 = getelementptr ptr, ptr %.fca.0.extract.i690, i64 %552
  %554 = getelementptr i8, ptr %553, i64 64
  %555 = load ptr, ptr %554, align 8
  %556 = call ptr %555({ ptr, ptr, ptr, i32 } %548, ptr nonnull %2)
  %557 = call i32 %556({ ptr, ptr, ptr, i32 } %548, { ptr, ptr, ptr, i32 } %548, ptr nonnull %2)
  %558 = icmp eq i32 %557, %503
  %559 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %560 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %561 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract.i690)
  %562 = getelementptr i8, ptr %553, i64 48
  %563 = load ptr, ptr %562, align 8
  %564 = call ptr %563({ ptr, ptr, ptr, i32 } %548, ptr nonnull %2)
  %565 = call { ptr, i160 } %564({ ptr, ptr, ptr, i32 } %548, { ptr, ptr, ptr, i32 } %548, ptr nonnull %2)
  %566 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %567 = load ptr, ptr %328, align 8
  %568 = call i1 %567({ ptr, i160 } %565, { ptr, i160 } %500)
  %569 = and i1 %558, %568
  br i1 %569, label %HashMap_get_keyK.exit, label %.critedge.i

.critedge.i:                                      ; preds = %542, %494
  %570 = add i32 %503, 2127912214
  %571 = shl i32 %503, 12
  %572 = add i32 %570, %571
  %573 = ashr i32 %572, 19
  %574 = xor i32 %572, %573
  %575 = xor i32 %574, -949894596
  %576 = add i32 %575, 374761393
  %577 = shl i32 %575, 5
  %578 = add i32 %576, %577
  %579 = add i32 %578, -744332180
  %580 = shl i32 %578, 9
  %581 = xor i32 %579, %580
  %582 = add i32 %581, -42973499
  %583 = shl i32 %581, 3
  %584 = add i32 %582, %583
  %585 = ashr i32 %584, 16
  %586 = xor i32 %584, %585
  %587 = xor i32 %586, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %588 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %589 = load ptr, ptr %356, align 8
  %590 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %589, 0
  %591 = load ptr, ptr %357, align 8
  %592 = insertvalue { ptr, ptr, ptr, i32 } %590, ptr %591, 1
  %593 = load ptr, ptr %358, align 8
  %594 = insertvalue { ptr, ptr, ptr, i32 } %592, ptr %593, 2
  %595 = load i32, ptr %359, align 4
  %596 = insertvalue { ptr, ptr, ptr, i32 } %594, i32 %595, 3
  %hash_coef_ptr.i.i10.i1308 = getelementptr i8, ptr %589, i64 8
  %tbl_size_ptr.i.i11.i1309 = getelementptr i8, ptr %589, i64 16
  %offset_tbl_ptr.i.i12.i1310 = getelementptr i8, ptr %589, i64 40
  %hash_coef.i.i13.i1311 = load i64, ptr %hash_coef_ptr.i.i10.i1308, align 4
  %tbl_size.i.i14.i1312 = load i64, ptr %tbl_size_ptr.i.i11.i1309, align 4
  %offset_tbl.i.i15.i1313 = load ptr, ptr %offset_tbl_ptr.i.i12.i1310, align 8
  %product.i.i.i16.i1314 = mul i64 %hash_coef.i.i13.i1311, -5261542750394134544
  %shifted.i.i.i17.i1315 = lshr i64 %product.i.i.i16.i1314, 32
  %xored.i.i.i18.i1316 = xor i64 %shifted.i.i.i17.i1315, %product.i.i.i16.i1314
  %hash.i.i.i19.i1317 = and i64 %xored.i.i.i18.i1316, %tbl_size.i.i14.i1312
  %offset_ptr.i.i20.i1318 = getelementptr i32, ptr %offset_tbl.i.i15.i1313, i64 %hash.i.i.i19.i1317
  %offset.i.i21.i1319 = load i32, ptr %offset_ptr.i.i20.i1318, align 4
  %eq.i.i1320 = icmp eq i32 %595, %offset.i.i21.i1319
  call void @llvm.assume(i1 %eq.i.i1320) #30
  %597 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %598 = call ptr @llvm.invariant.start.p0(i64 600, ptr %589)
  %599 = sext i32 %595 to i64
  %600 = getelementptr ptr, ptr %589, i64 %599
  %601 = getelementptr i8, ptr %600, i64 64
  %602 = load ptr, ptr %601, align 8
  %603 = call ptr %602({ ptr, ptr, ptr, i32 } %596, ptr nonnull %2)
  %604 = call i32 %603({ ptr, ptr, ptr, i32 } %596, { ptr, ptr, ptr, i32 } %596, ptr nonnull %2)
  %605 = add i32 %604, -1
  %606 = and i32 %605, %587
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %607 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %608 = load ptr, ptr %356, align 8
  %609 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %608, 0
  %610 = load ptr, ptr %357, align 8
  %611 = insertvalue { ptr, ptr, ptr, i32 } %609, ptr %610, 1
  %612 = load ptr, ptr %358, align 8
  %613 = insertvalue { ptr, ptr, ptr, i32 } %611, ptr %612, 2
  %614 = load i32, ptr %359, align 4
  %615 = insertvalue { ptr, ptr, ptr, i32 } %613, i32 %614, 3
  %hash_coef_ptr.i.i158.i = getelementptr i8, ptr %608, i64 8
  %tbl_size_ptr.i.i159.i = getelementptr i8, ptr %608, i64 16
  %offset_tbl_ptr.i.i160.i = getelementptr i8, ptr %608, i64 40
  %hash_coef.i.i161.i = load i64, ptr %hash_coef_ptr.i.i158.i, align 4
  %tbl_size.i.i162.i = load i64, ptr %tbl_size_ptr.i.i159.i, align 4
  %offset_tbl.i.i163.i = load ptr, ptr %offset_tbl_ptr.i.i160.i, align 8
  %product.i.i.i164.i = mul i64 %hash_coef.i.i161.i, -5261542750394134544
  %shifted.i.i.i165.i = lshr i64 %product.i.i.i164.i, 32
  %xored.i.i.i166.i = xor i64 %shifted.i.i.i165.i, %product.i.i.i164.i
  %hash.i.i.i167.i = and i64 %xored.i.i.i166.i, %tbl_size.i.i162.i
  %offset_ptr.i.i168.i = getelementptr i32, ptr %offset_tbl.i.i163.i, i64 %hash.i.i.i167.i
  %offset.i.i169.i = load i32, ptr %offset_ptr.i.i168.i, align 4
  %eq.i172.i = icmp eq i32 %614, %offset.i.i169.i
  call void @llvm.assume(i1 %eq.i172.i) #30
  store ptr @_parameterization_Ptri32, ptr %267, align 8
  %616 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %267)
  %617 = call ptr @llvm.invariant.start.p0(i64 600, ptr %608)
  %618 = sext i32 %614 to i64
  %619 = getelementptr ptr, ptr %608, i64 %618
  %620 = getelementptr i8, ptr %619, i64 120
  %621 = load ptr, ptr %620, align 8
  store ptr @i32_typ, ptr %268, align 8
  %622 = call ptr %621({ ptr, ptr, ptr, i32 } %615, ptr nonnull %268)
  %623 = call { ptr, i160 } %622({ ptr, ptr, ptr, i32 } %615, { ptr, ptr, ptr, i32 } %615, ptr nonnull %267, i32 %606)
  %.fca.0.extract57.i = extractvalue { ptr, i160 } %623, 0
  %624 = icmp ne ptr %.fca.0.extract57.i, @nil_typ
  %625 = icmp ne ptr %.fca.0.extract57.i, null
  %.not128.i = and i1 %624, %625
  br i1 %.not128.i, label %626, label %HashMap_get_keyK.exit.thread

626:                                              ; preds = %.critedge.i
  %.fca.1.extract59.i = extractvalue { ptr, i160 } %623, 1
  %.sroa.6.8.extract.trunc.i = trunc i160 %.fca.1.extract59.i to i64
  %627 = inttoptr i64 %.sroa.6.8.extract.trunc.i to ptr
  %.sroa.11.8.extract.shift.i = lshr i160 %.fca.1.extract59.i, 64
  %.sroa.11.8.extract.trunc.i = trunc i160 %.sroa.11.8.extract.shift.i to i64
  %628 = inttoptr i64 %.sroa.11.8.extract.trunc.i to ptr
  %hash_coef_ptr.i.i174.i = getelementptr i8, ptr %.fca.0.extract57.i, i64 8
  %tbl_size_ptr.i.i175.i = getelementptr i8, ptr %.fca.0.extract57.i, i64 16
  %offset_tbl_ptr.i.i176.i = getelementptr i8, ptr %.fca.0.extract57.i, i64 40
  %hash_coef.i.i177.i = load i64, ptr %hash_coef_ptr.i.i174.i, align 4
  %tbl_size.i.i178.i = load i64, ptr %tbl_size_ptr.i.i175.i, align 4
  %offset_tbl.i.i179.i = load ptr, ptr %offset_tbl_ptr.i.i176.i, align 8
  %product.i.i.i180.i = mul i64 %hash_coef.i.i177.i, 4015701072841558310
  %shifted.i.i.i181.i = lshr i64 %product.i.i.i180.i, 32
  %xored.i.i.i182.i = xor i64 %shifted.i.i.i181.i, %product.i.i.i180.i
  %hash.i.i.i183.i = and i64 %xored.i.i.i182.i, %tbl_size.i.i178.i
  %offset_ptr.i.i184.i = getelementptr i32, ptr %offset_tbl.i.i179.i, i64 %hash.i.i.i183.i
  %offset.i.i185.i = load i32, ptr %offset_ptr.i.i184.i, align 4
  %629 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract57.i, 0
  %630 = insertvalue { ptr, ptr, ptr, i32 } %629, ptr %627, 1
  %631 = insertvalue { ptr, ptr, ptr, i32 } %630, ptr %628, 2
  %632 = insertvalue { ptr, ptr, ptr, i32 } %631, i32 %offset.i.i185.i, 3
  %633 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %634 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %635 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract57.i)
  %636 = sext i32 %offset.i.i185.i to i64
  %637 = getelementptr ptr, ptr %.fca.0.extract57.i, i64 %636
  %638 = getelementptr i8, ptr %637, i64 64
  %639 = load ptr, ptr %638, align 8
  %640 = call ptr %639({ ptr, ptr, ptr, i32 } %632, ptr nonnull %2)
  %641 = call i32 %640({ ptr, ptr, ptr, i32 } %632, { ptr, ptr, ptr, i32 } %632, ptr nonnull %2)
  %642 = icmp eq i32 %641, %503
  %643 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %644 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %645 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract57.i)
  %646 = getelementptr i8, ptr %637, i64 48
  %647 = load ptr, ptr %646, align 8
  %648 = call ptr %647({ ptr, ptr, ptr, i32 } %632, ptr nonnull %2)
  %649 = call { ptr, i160 } %648({ ptr, ptr, ptr, i32 } %632, { ptr, ptr, ptr, i32 } %632, ptr nonnull %2)
  %650 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %651 = load ptr, ptr %328, align 8
  %652 = call i1 %651({ ptr, i160 } %649, { ptr, i160 } %500)
  %653 = and i1 %642, %652
  br i1 %653, label %HashMap_get_keyK.exit, label %HashMap_get_keyK.exit.thread

HashMap_get_keyK.exit.thread:                     ; preds = %626, %.critedge.i
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0271.i)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.1.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %267)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %268)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0123.i)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2124.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0115.i)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2116.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %269)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %270)
  br label %665

HashMap_get_keyK.exit:                            ; preds = %542, %626
  %.pre-phi313.i = phi i64 [ %552, %542 ], [ %636, %626 ]
  %.pre-phi312.i = phi { ptr, ptr, ptr, i32 } [ %548, %542 ], [ %632, %626 ]
  %.reg2mem65.0.sroa.phi290.sroa.speculated.i = phi ptr [ %.fca.0.extract.i690, %542 ], [ %.fca.0.extract57.i, %626 ]
  %.reg2mem59.0.sroa.phi120289.i = phi ptr [ %.sroa.1.i, %542 ], [ %.sroa.2124.i, %626 ]
  %.reg2mem59.0.sroa.phi117288.i = phi ptr [ %.sroa.0271.i, %542 ], [ %.sroa.0123.i, %626 ]
  %.reg2mem57.0.sroa.phi94287.i = phi ptr [ %.sroa.2.i, %542 ], [ %.sroa.2116.i, %626 ]
  %.reg2mem57.0.sroa.phi91286.i = phi ptr [ %.sroa.0.i, %542 ], [ %.sroa.0115.i, %626 ]
  %654 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %655 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %656 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.reg2mem65.0.sroa.phi290.sroa.speculated.i)
  %657 = getelementptr ptr, ptr %.reg2mem65.0.sroa.phi290.sroa.speculated.i, i64 %.pre-phi313.i
  %658 = getelementptr i8, ptr %657, i64 56
  %659 = load ptr, ptr %658, align 8
  %660 = call ptr %659({ ptr, ptr, ptr, i32 } %.pre-phi312.i, ptr nonnull %2)
  %661 = call { ptr, i160 } %660({ ptr, ptr, ptr, i32 } %.pre-phi312.i, { ptr, ptr, ptr, i32 } %.pre-phi312.i, ptr nonnull %2)
  %.fca.0.extract97.i = extractvalue { ptr, i160 } %661, 0
  store ptr %.fca.0.extract97.i, ptr %.reg2mem59.0.sroa.phi117288.i, align 8
  %.fca.1.extract99.i = extractvalue { ptr, i160 } %661, 1
  store i160 %.fca.1.extract99.i, ptr %.reg2mem59.0.sroa.phi120289.i, align 8
  store ptr %.fca.0.extract97.i, ptr %.reg2mem57.0.sroa.phi91286.i, align 8
  store i160 %.fca.1.extract99.i, ptr %.reg2mem57.0.sroa.phi94287.i, align 8
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0271.i)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.1.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %267)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %268)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0123.i)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2124.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0115.i)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2116.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %269)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %270)
  %662 = icmp eq ptr %.fca.0.extract97.i, @nil_typ
  %663 = icmp eq ptr %.fca.0.extract97.i, null
  %664 = or i1 %662, %663
  br i1 %664, label %665, label %4397

665:                                              ; preds = %HashMap_get_keyK.exit.thread, %HashMap_get_keyK.exit
  %666 = add nuw i32 %498, 1
  %.sroa.090.0.insert.ext = zext i32 %666 to i160
  %667 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.090.0.insert.ext, 1
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %245)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %246)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %247)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %248)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %249)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %250)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %251)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %252)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %253)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %254)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %255)
  %668 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %669 = load ptr, ptr %287, align 8
  %670 = call i32 %669({ ptr, i160 } %500)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %671 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %672 = load ptr, ptr %299, align 8
  %673 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %672, 0
  %674 = load ptr, ptr %300, align 8
  %675 = insertvalue { ptr, ptr, ptr, i32 } %673, ptr %674, 1
  %676 = load ptr, ptr %395, align 8
  %677 = insertvalue { ptr, ptr, ptr, i32 } %675, ptr %676, 2
  %678 = load i32, ptr %301, align 4
  %679 = insertvalue { ptr, ptr, ptr, i32 } %677, i32 %678, 3
  %hash_coef_ptr.i.i10.i2063 = getelementptr i8, ptr %672, i64 8
  %tbl_size_ptr.i.i11.i2064 = getelementptr i8, ptr %672, i64 16
  %offset_tbl_ptr.i.i12.i2065 = getelementptr i8, ptr %672, i64 40
  %hash_coef.i.i13.i2066 = load i64, ptr %hash_coef_ptr.i.i10.i2063, align 4
  %tbl_size.i.i14.i2067 = load i64, ptr %tbl_size_ptr.i.i11.i2064, align 4
  %offset_tbl.i.i15.i2068 = load ptr, ptr %offset_tbl_ptr.i.i12.i2065, align 8
  %product.i.i.i16.i2069 = mul i64 %hash_coef.i.i13.i2066, -5261542750394134544
  %shifted.i.i.i17.i2070 = lshr i64 %product.i.i.i16.i2069, 32
  %xored.i.i.i18.i2071 = xor i64 %shifted.i.i.i17.i2070, %product.i.i.i16.i2069
  %hash.i.i.i19.i2072 = and i64 %xored.i.i.i18.i2071, %tbl_size.i.i14.i2067
  %offset_ptr.i.i20.i2073 = getelementptr i32, ptr %offset_tbl.i.i15.i2068, i64 %hash.i.i.i19.i2072
  %offset.i.i21.i2074 = load i32, ptr %offset_ptr.i.i20.i2073, align 4
  %eq.i.i2075 = icmp eq i32 %678, %offset.i.i21.i2074
  call void @llvm.assume(i1 %eq.i.i2075) #30
  %680 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %681 = call ptr @llvm.invariant.start.p0(i64 600, ptr %672)
  %682 = sext i32 %678 to i64
  %683 = getelementptr ptr, ptr %672, i64 %682
  %684 = getelementptr i8, ptr %683, i64 64
  %685 = load ptr, ptr %684, align 8
  %686 = call ptr %685({ ptr, ptr, ptr, i32 } %679, ptr nonnull %2)
  %687 = call i32 %686({ ptr, ptr, ptr, i32 } %679, { ptr, ptr, ptr, i32 } %679, ptr nonnull %2)
  %688 = add i32 %687, -1
  %689 = and i32 %688, %670
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %690 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %691 = load ptr, ptr %299, align 8
  %692 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %691, 0
  %693 = load ptr, ptr %300, align 8
  %694 = insertvalue { ptr, ptr, ptr, i32 } %692, ptr %693, 1
  %695 = load ptr, ptr %395, align 8
  %696 = insertvalue { ptr, ptr, ptr, i32 } %694, ptr %695, 2
  %697 = load i32, ptr %301, align 4
  %698 = insertvalue { ptr, ptr, ptr, i32 } %696, i32 %697, 3
  %hash_coef_ptr.i.i160.i965 = getelementptr i8, ptr %691, i64 8
  %tbl_size_ptr.i.i161.i966 = getelementptr i8, ptr %691, i64 16
  %offset_tbl_ptr.i.i162.i967 = getelementptr i8, ptr %691, i64 40
  %hash_coef.i.i163.i968 = load i64, ptr %hash_coef_ptr.i.i160.i965, align 4
  %tbl_size.i.i164.i969 = load i64, ptr %tbl_size_ptr.i.i161.i966, align 4
  %offset_tbl.i.i165.i970 = load ptr, ptr %offset_tbl_ptr.i.i162.i967, align 8
  %product.i.i.i166.i971 = mul i64 %hash_coef.i.i163.i968, -5261542750394134544
  %shifted.i.i.i167.i972 = lshr i64 %product.i.i.i166.i971, 32
  %xored.i.i.i168.i973 = xor i64 %shifted.i.i.i167.i972, %product.i.i.i166.i971
  %hash.i.i.i169.i974 = and i64 %xored.i.i.i168.i973, %tbl_size.i.i164.i969
  %offset_ptr.i.i170.i975 = getelementptr i32, ptr %offset_tbl.i.i165.i970, i64 %hash.i.i.i169.i974
  %offset.i.i171.i976 = load i32, ptr %offset_ptr.i.i170.i975, align 4
  %eq.i.i977 = icmp eq i32 %697, %offset.i.i171.i976
  call void @llvm.assume(i1 %eq.i.i977) #30
  store ptr @_parameterization_Ptri32, ptr %254, align 8
  %699 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %254)
  %700 = call ptr @llvm.invariant.start.p0(i64 600, ptr %691)
  %701 = sext i32 %697 to i64
  %702 = getelementptr ptr, ptr %691, i64 %701
  %703 = getelementptr i8, ptr %702, i64 120
  %704 = load ptr, ptr %703, align 8
  store ptr @i32_typ, ptr %255, align 8
  %705 = call ptr %704({ ptr, ptr, ptr, i32 } %698, ptr nonnull %255)
  %706 = call { ptr, i160 } %705({ ptr, ptr, ptr, i32 } %698, { ptr, ptr, ptr, i32 } %698, ptr nonnull %254, i32 %689)
  %.fca.0.extract.i978 = extractvalue { ptr, i160 } %706, 0
  %707 = icmp ne ptr %.fca.0.extract.i978, @nil_typ
  %708 = icmp ne ptr %.fca.0.extract.i978, null
  %.not151.i979 = and i1 %707, %708
  br i1 %.not151.i979, label %709, label %.critedge.i980

709:                                              ; preds = %665
  %.fca.1.extract.i1074 = extractvalue { ptr, i160 } %706, 1
  %.sroa.4518.8.extract.trunc.i1075 = trunc i160 %.fca.1.extract.i1074 to i64
  %710 = inttoptr i64 %.sroa.4518.8.extract.trunc.i1075 to ptr
  %.sroa.7520.8.extract.shift.i1076 = lshr i160 %.fca.1.extract.i1074, 64
  %.sroa.7520.8.extract.trunc.i1077 = trunc i160 %.sroa.7520.8.extract.shift.i1076 to i64
  %711 = inttoptr i64 %.sroa.7520.8.extract.trunc.i1077 to ptr
  %hash_coef_ptr.i.i174.i1078 = getelementptr i8, ptr %.fca.0.extract.i978, i64 8
  %tbl_size_ptr.i.i175.i1079 = getelementptr i8, ptr %.fca.0.extract.i978, i64 16
  %offset_tbl_ptr.i.i176.i1080 = getelementptr i8, ptr %.fca.0.extract.i978, i64 40
  %hash_coef.i.i177.i1081 = load i64, ptr %hash_coef_ptr.i.i174.i1078, align 4
  %tbl_size.i.i178.i1082 = load i64, ptr %tbl_size_ptr.i.i175.i1079, align 4
  %offset_tbl.i.i179.i1083 = load ptr, ptr %offset_tbl_ptr.i.i176.i1080, align 8
  %product.i.i.i180.i1084 = mul i64 %hash_coef.i.i177.i1081, 4015701072841558310
  %shifted.i.i.i181.i1085 = lshr i64 %product.i.i.i180.i1084, 32
  %xored.i.i.i182.i1086 = xor i64 %shifted.i.i.i181.i1085, %product.i.i.i180.i1084
  %hash.i.i.i183.i1087 = and i64 %xored.i.i.i182.i1086, %tbl_size.i.i178.i1082
  %offset_ptr.i.i184.i1088 = getelementptr i32, ptr %offset_tbl.i.i179.i1083, i64 %hash.i.i.i183.i1087
  %offset.i.i185.i1089 = load i32, ptr %offset_ptr.i.i184.i1088, align 4
  %712 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract.i978, 0
  %713 = insertvalue { ptr, ptr, ptr, i32 } %712, ptr %710, 1
  %714 = insertvalue { ptr, ptr, ptr, i32 } %713, ptr %711, 2
  %715 = insertvalue { ptr, ptr, ptr, i32 } %714, i32 %offset.i.i185.i1089, 3
  %716 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %717 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %718 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract.i978)
  %719 = sext i32 %offset.i.i185.i1089 to i64
  %720 = getelementptr ptr, ptr %.fca.0.extract.i978, i64 %719
  %721 = getelementptr i8, ptr %720, i64 64
  %722 = load ptr, ptr %721, align 8
  %723 = call ptr %722({ ptr, ptr, ptr, i32 } %715, ptr nonnull %2)
  %724 = call i32 %723({ ptr, ptr, ptr, i32 } %715, { ptr, ptr, ptr, i32 } %715, ptr nonnull %2)
  %725 = icmp eq i32 %724, %670
  br i1 %725, label %726, label %.critedge.i980

726:                                              ; preds = %709
  %727 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %728 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %729 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract.i978)
  %730 = getelementptr i8, ptr %720, i64 48
  %731 = load ptr, ptr %730, align 8
  %732 = call ptr %731({ ptr, ptr, ptr, i32 } %715, ptr nonnull %2)
  %733 = call { ptr, i160 } %732({ ptr, ptr, ptr, i32 } %715, { ptr, ptr, ptr, i32 } %715, ptr nonnull %2)
  %734 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %735 = load ptr, ptr %288, align 8
  %736 = call i1 %735({ ptr, i160 } %733, { ptr, i160 } %500)
  br i1 %736, label %.thread525.i1091, label %.critedge.i980

.thread525.i1091:                                 ; preds = %726
  %737 = load ptr, ptr %result.i, align 8
  %738 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %739 = load ptr, ptr %282, align 8
  %740 = load ptr, ptr %737, align 8
  %741 = getelementptr i8, ptr %740, i64 48
  %742 = load ptr, ptr %741, align 8
  %743 = call { i64, i64 } %742(ptr nonnull %737)
  %744 = extractvalue { i64, i64 } %743, 0
  %745 = extractvalue { i64, i64 } %743, 1
  %746 = urem i64 20, %745
  %747 = icmp eq i64 %746, 0
  %748 = sub i64 %745, %746
  %749 = select i1 %747, i64 0, i64 %748
  %750 = add i64 %744, 20
  %751 = add i64 %750, %749
  %752 = load ptr, ptr %739, align 8
  %753 = getelementptr i8, ptr %752, i64 48
  %754 = load ptr, ptr %753, align 8
  %755 = call { i64, i64 } %754(ptr nonnull %739)
  %756 = extractvalue { i64, i64 } %755, 0
  %757 = extractvalue { i64, i64 } %755, 1
  %758 = call i64 @llvm.umax.i64(i64 %745, i64 %757)
  %759 = call i64 @llvm.umax.i64(i64 %758, i64 8)
  %760 = urem i64 %751, %757
  %761 = icmp eq i64 %760, 0
  %762 = sub i64 %757, %760
  %763 = select i1 %761, i64 0, i64 %762
  %764 = add i64 %756, %751
  %765 = add i64 %764, %763
  %766 = urem i64 %765, %759
  %767 = icmp eq i64 %766, 0
  %768 = sub i64 %759, %766
  %769 = select i1 %767, i64 0, i64 %768
  %770 = add i64 %769, %765
  %result.i.i1092 = call noalias ptr @bump_malloc_inner(i64 noundef %770, ptr nonnull @current_ptr) #29
  store ptr %737, ptr %result.i.i1092, align 8
  %771 = getelementptr i8, ptr %result.i.i1092, i64 8
  store ptr %739, ptr %771, align 8
  %772 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i.i1092)
  store ptr @Entry, ptr %245, align 8
  store ptr %result.i.i1092, ptr %390, align 8
  store i32 9, ptr %391, align 8
  %773 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %245)
  %774 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %775 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %776 = load ptr, ptr %737, align 8
  %777 = getelementptr i8, ptr %776, i64 48
  %778 = load ptr, ptr %777, align 8
  %779 = call { i64, i64 } %778(ptr nonnull %737)
  %780 = extractvalue { i64, i64 } %779, 1
  %781 = urem i64 20, %780
  %782 = icmp eq i64 %781, 0
  %reass.sub5560 = sub i64 %780, %781
  %783 = add i64 %reass.sub5560, 20
  %784 = select i1 %782, i64 20, i64 %783
  %785 = getelementptr i8, ptr %result.i.i1092, i64 %784
  %786 = load ptr, ptr %result.i.i1092, align 8
  %787 = load ptr, ptr %786, align 8
  %788 = getelementptr i8, ptr %787, i64 64
  %789 = load ptr, ptr %788, align 8
  call void %789({ ptr, i160 } %500, ptr nonnull %786, ptr %785)
  %790 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %791 = load ptr, ptr %result.i.i1092, align 8
  %792 = load ptr, ptr %791, align 8
  %793 = getelementptr i8, ptr %792, i64 48
  %794 = load ptr, ptr %793, align 8
  %795 = call { i64, i64 } %794(ptr nonnull %791)
  %796 = extractvalue { i64, i64 } %795, 0
  %797 = extractvalue { i64, i64 } %795, 1
  %798 = urem i64 20, %797
  %799 = icmp eq i64 %798, 0
  %800 = sub i64 %797, %798
  %801 = select i1 %799, i64 0, i64 %800
  %802 = add i64 %796, 20
  %803 = add i64 %802, %801
  %804 = load ptr, ptr %771, align 8
  %805 = load ptr, ptr %804, align 8
  %806 = getelementptr i8, ptr %805, i64 48
  %807 = load ptr, ptr %806, align 8
  %808 = call { i64, i64 } %807(ptr nonnull %804)
  %809 = extractvalue { i64, i64 } %808, 1
  %810 = urem i64 %803, %809
  %811 = icmp eq i64 %810, 0
  %812 = sub i64 %809, %810
  %813 = select i1 %811, i64 0, i64 %812
  %814 = getelementptr i8, ptr %result.i.i1092, i64 %803
  %815 = getelementptr i8, ptr %814, i64 %813
  %816 = load ptr, ptr %771, align 8
  %817 = load ptr, ptr %816, align 8
  %818 = getelementptr i8, ptr %817, i64 64
  %819 = load ptr, ptr %818, align 8
  call void %819({ ptr, i160 } %667, ptr nonnull %816, ptr %815)
  %820 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %821 = getelementptr i8, ptr %result.i.i1092, i64 16
  store i32 %670, ptr %821, align 4
  %822 = load ptr, ptr %392, align 8
  %823 = ptrtoint ptr %result.i.i1092 to i64
  %824 = ptrtoint ptr %822 to i64
  %.sroa.2129.0.insert.ext.i1093 = zext i64 %824 to i160
  %.sroa.2129.0.insert.shift.i1094 = shl nuw nsw i160 %.sroa.2129.0.insert.ext.i1093, 64
  %.sroa.0128.0.insert.ext.i1096 = zext i64 %823 to i160
  %.sroa.2129.0.insert.insert.i1095 = or disjoint i160 %.sroa.2129.0.insert.shift.i1094, %.sroa.0128.0.insert.ext.i1096
  %.sroa.0128.0.insert.insert.i1097 = or disjoint i160 %.sroa.2129.0.insert.insert.i1095, 3062541302288446171170371466885913903104
  %825 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0128.0.insert.insert.i1097, 1
  %826 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %827 = load ptr, ptr %299, align 8
  %828 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %827, 0
  %829 = load ptr, ptr %300, align 8
  %830 = insertvalue { ptr, ptr, ptr, i32 } %828, ptr %829, 1
  %831 = load ptr, ptr %395, align 8
  %832 = insertvalue { ptr, ptr, ptr, i32 } %830, ptr %831, 2
  %833 = load i32, ptr %301, align 4
  %834 = insertvalue { ptr, ptr, ptr, i32 } %832, i32 %833, 3
  %hash_coef_ptr.i.i202.i1102 = getelementptr i8, ptr %827, i64 8
  %tbl_size_ptr.i.i203.i1103 = getelementptr i8, ptr %827, i64 16
  %offset_tbl_ptr.i.i204.i1104 = getelementptr i8, ptr %827, i64 40
  %hash_coef.i.i205.i1105 = load i64, ptr %hash_coef_ptr.i.i202.i1102, align 4
  %tbl_size.i.i206.i1106 = load i64, ptr %tbl_size_ptr.i.i203.i1103, align 4
  %offset_tbl.i.i207.i1107 = load ptr, ptr %offset_tbl_ptr.i.i204.i1104, align 8
  %product.i.i.i208.i1108 = mul i64 %hash_coef.i.i205.i1105, -5261542750394134544
  %shifted.i.i.i209.i1109 = lshr i64 %product.i.i.i208.i1108, 32
  %xored.i.i.i210.i1110 = xor i64 %shifted.i.i.i209.i1109, %product.i.i.i208.i1108
  %hash.i.i.i211.i1111 = and i64 %xored.i.i.i210.i1110, %tbl_size.i.i206.i1106
  %offset_ptr.i.i212.i1112 = getelementptr i32, ptr %offset_tbl.i.i207.i1107, i64 %hash.i.i.i211.i1111
  %offset.i.i213.i1113 = load i32, ptr %offset_ptr.i.i212.i1112, align 4
  %eq.i216.i1114 = icmp eq i32 %833, %offset.i.i213.i1113
  call void @llvm.assume(i1 %eq.i216.i1114) #30
  %835 = load ptr, ptr %result.i, align 8
  %836 = load ptr, ptr %282, align 8
  %result.i217.i1115 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %837 = getelementptr i8, ptr %result.i217.i1115, i64 16
  store ptr %836, ptr %837, align 8
  %838 = getelementptr i8, ptr %result.i217.i1115, i64 8
  store ptr %835, ptr %838, align 8
  %839 = getelementptr i8, ptr %result.i217.i1115, i64 24
  store ptr null, ptr %839, align 8
  %840 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i217.i1115)
  store ptr @Entry, ptr %result.i217.i1115, align 8
  store ptr @_parameterization_Ptri32, ptr %246, align 8
  store ptr %result.i217.i1115, ptr %393, align 8
  %841 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %246)
  %842 = call ptr @llvm.invariant.start.p0(i64 600, ptr %827)
  %843 = sext i32 %833 to i64
  %844 = getelementptr ptr, ptr %827, i64 %843
  %845 = getelementptr i8, ptr %844, i64 128
  %846 = load ptr, ptr %845, align 8
  store ptr @i32_typ, ptr %247, align 8
  store ptr @Entry, ptr %394, align 8
  %847 = call ptr %846({ ptr, ptr, ptr, i32 } %834, ptr nonnull %247)
  call void %847({ ptr, ptr, ptr, i32 } %834, { ptr, ptr, ptr, i32 } %834, ptr nonnull %246, i32 %689, { ptr, i160 } %825)
  br label %HashMap_insert_keyK_valueV.exit1116

.critedge.i980:                                   ; preds = %726, %709, %665
  %848 = add i32 %670, 2127912214
  %849 = shl i32 %670, 12
  %850 = add i32 %848, %849
  %851 = ashr i32 %850, 19
  %852 = xor i32 %850, %851
  %853 = xor i32 %852, -949894596
  %854 = add i32 %853, 374761393
  %855 = shl i32 %853, 5
  %856 = add i32 %854, %855
  %857 = add i32 %856, -744332180
  %858 = shl i32 %856, 9
  %859 = xor i32 %857, %858
  %860 = add i32 %859, -42973499
  %861 = shl i32 %859, 3
  %862 = add i32 %860, %861
  %863 = ashr i32 %862, 16
  %864 = xor i32 %862, %863
  %865 = xor i32 %864, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %866 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %867 = load ptr, ptr %312, align 8
  %868 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %867, 0
  %869 = load ptr, ptr %313, align 8
  %870 = insertvalue { ptr, ptr, ptr, i32 } %868, ptr %869, 1
  %871 = load ptr, ptr %396, align 8
  %872 = insertvalue { ptr, ptr, ptr, i32 } %870, ptr %871, 2
  %873 = load i32, ptr %314, align 4
  %874 = insertvalue { ptr, ptr, ptr, i32 } %872, i32 %873, 3
  %hash_coef_ptr.i.i10.i2094 = getelementptr i8, ptr %867, i64 8
  %tbl_size_ptr.i.i11.i2095 = getelementptr i8, ptr %867, i64 16
  %offset_tbl_ptr.i.i12.i2096 = getelementptr i8, ptr %867, i64 40
  %hash_coef.i.i13.i2097 = load i64, ptr %hash_coef_ptr.i.i10.i2094, align 4
  %tbl_size.i.i14.i2098 = load i64, ptr %tbl_size_ptr.i.i11.i2095, align 4
  %offset_tbl.i.i15.i2099 = load ptr, ptr %offset_tbl_ptr.i.i12.i2096, align 8
  %product.i.i.i16.i2100 = mul i64 %hash_coef.i.i13.i2097, -5261542750394134544
  %shifted.i.i.i17.i2101 = lshr i64 %product.i.i.i16.i2100, 32
  %xored.i.i.i18.i2102 = xor i64 %shifted.i.i.i17.i2101, %product.i.i.i16.i2100
  %hash.i.i.i19.i2103 = and i64 %xored.i.i.i18.i2102, %tbl_size.i.i14.i2098
  %offset_ptr.i.i20.i2104 = getelementptr i32, ptr %offset_tbl.i.i15.i2099, i64 %hash.i.i.i19.i2103
  %offset.i.i21.i2105 = load i32, ptr %offset_ptr.i.i20.i2104, align 4
  %eq.i.i2106 = icmp eq i32 %873, %offset.i.i21.i2105
  call void @llvm.assume(i1 %eq.i.i2106) #30
  %875 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %876 = call ptr @llvm.invariant.start.p0(i64 600, ptr %867)
  %877 = sext i32 %873 to i64
  %878 = getelementptr ptr, ptr %867, i64 %877
  %879 = getelementptr i8, ptr %878, i64 64
  %880 = load ptr, ptr %879, align 8
  %881 = call ptr %880({ ptr, ptr, ptr, i32 } %874, ptr nonnull %2)
  %882 = call i32 %881({ ptr, ptr, ptr, i32 } %874, { ptr, ptr, ptr, i32 } %874, ptr nonnull %2)
  %883 = add i32 %882, -1
  %884 = and i32 %883, %865
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %885 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %886 = load ptr, ptr %312, align 8
  %887 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %886, 0
  %888 = load ptr, ptr %313, align 8
  %889 = insertvalue { ptr, ptr, ptr, i32 } %887, ptr %888, 1
  %890 = load ptr, ptr %396, align 8
  %891 = insertvalue { ptr, ptr, ptr, i32 } %889, ptr %890, 2
  %892 = load i32, ptr %314, align 4
  %893 = insertvalue { ptr, ptr, ptr, i32 } %891, i32 %892, 3
  %hash_coef_ptr.i.i219.i985 = getelementptr i8, ptr %886, i64 8
  %tbl_size_ptr.i.i220.i986 = getelementptr i8, ptr %886, i64 16
  %offset_tbl_ptr.i.i221.i987 = getelementptr i8, ptr %886, i64 40
  %hash_coef.i.i222.i988 = load i64, ptr %hash_coef_ptr.i.i219.i985, align 4
  %tbl_size.i.i223.i989 = load i64, ptr %tbl_size_ptr.i.i220.i986, align 4
  %offset_tbl.i.i224.i990 = load ptr, ptr %offset_tbl_ptr.i.i221.i987, align 8
  %product.i.i.i225.i991 = mul i64 %hash_coef.i.i222.i988, -5261542750394134544
  %shifted.i.i.i226.i992 = lshr i64 %product.i.i.i225.i991, 32
  %xored.i.i.i227.i993 = xor i64 %shifted.i.i.i226.i992, %product.i.i.i225.i991
  %hash.i.i.i228.i994 = and i64 %xored.i.i.i227.i993, %tbl_size.i.i223.i989
  %offset_ptr.i.i229.i995 = getelementptr i32, ptr %offset_tbl.i.i224.i990, i64 %hash.i.i.i228.i994
  %offset.i.i230.i996 = load i32, ptr %offset_ptr.i.i229.i995, align 4
  %eq.i233.i997 = icmp eq i32 %892, %offset.i.i230.i996
  call void @llvm.assume(i1 %eq.i233.i997) #30
  store ptr @_parameterization_Ptri32, ptr %248, align 8
  %894 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %248)
  %895 = call ptr @llvm.invariant.start.p0(i64 600, ptr %886)
  %896 = sext i32 %892 to i64
  %897 = getelementptr ptr, ptr %886, i64 %896
  %898 = getelementptr i8, ptr %897, i64 120
  %899 = load ptr, ptr %898, align 8
  store ptr @i32_typ, ptr %249, align 8
  %900 = call ptr %899({ ptr, ptr, ptr, i32 } %893, ptr nonnull %249)
  %901 = call { ptr, i160 } %900({ ptr, ptr, ptr, i32 } %893, { ptr, ptr, ptr, i32 } %893, ptr nonnull %248, i32 %884)
  %.fca.0.extract104.i998 = extractvalue { ptr, i160 } %901, 0
  %902 = icmp ne ptr %.fca.0.extract104.i998, @nil_typ
  %903 = icmp ne ptr %.fca.0.extract104.i998, null
  %.not153.i999 = and i1 %902, %903
  br i1 %.not153.i999, label %904, label %.critedge158.i1000

904:                                              ; preds = %.critedge.i980
  %.fca.1.extract106.i1032 = extractvalue { ptr, i160 } %901, 1
  %.sroa.4.8.extract.trunc.i1033 = trunc i160 %.fca.1.extract106.i1032 to i64
  %905 = inttoptr i64 %.sroa.4.8.extract.trunc.i1033 to ptr
  %.sroa.7506.8.extract.shift.i1034 = lshr i160 %.fca.1.extract106.i1032, 64
  %.sroa.7506.8.extract.trunc.i1035 = trunc i160 %.sroa.7506.8.extract.shift.i1034 to i64
  %906 = inttoptr i64 %.sroa.7506.8.extract.trunc.i1035 to ptr
  %hash_coef_ptr.i.i235.i1036 = getelementptr i8, ptr %.fca.0.extract104.i998, i64 8
  %tbl_size_ptr.i.i236.i1037 = getelementptr i8, ptr %.fca.0.extract104.i998, i64 16
  %offset_tbl_ptr.i.i237.i1038 = getelementptr i8, ptr %.fca.0.extract104.i998, i64 40
  %hash_coef.i.i238.i1039 = load i64, ptr %hash_coef_ptr.i.i235.i1036, align 4
  %tbl_size.i.i239.i1040 = load i64, ptr %tbl_size_ptr.i.i236.i1037, align 4
  %offset_tbl.i.i240.i1041 = load ptr, ptr %offset_tbl_ptr.i.i237.i1038, align 8
  %product.i.i.i241.i1042 = mul i64 %hash_coef.i.i238.i1039, 4015701072841558310
  %shifted.i.i.i242.i1043 = lshr i64 %product.i.i.i241.i1042, 32
  %xored.i.i.i243.i1044 = xor i64 %shifted.i.i.i242.i1043, %product.i.i.i241.i1042
  %hash.i.i.i244.i1045 = and i64 %xored.i.i.i243.i1044, %tbl_size.i.i239.i1040
  %offset_ptr.i.i245.i1046 = getelementptr i32, ptr %offset_tbl.i.i240.i1041, i64 %hash.i.i.i244.i1045
  %offset.i.i246.i1047 = load i32, ptr %offset_ptr.i.i245.i1046, align 4
  %907 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract104.i998, 0
  %908 = insertvalue { ptr, ptr, ptr, i32 } %907, ptr %905, 1
  %909 = insertvalue { ptr, ptr, ptr, i32 } %908, ptr %906, 2
  %910 = insertvalue { ptr, ptr, ptr, i32 } %909, i32 %offset.i.i246.i1047, 3
  %911 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %912 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %913 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract104.i998)
  %914 = sext i32 %offset.i.i246.i1047 to i64
  %915 = getelementptr ptr, ptr %.fca.0.extract104.i998, i64 %914
  %916 = getelementptr i8, ptr %915, i64 64
  %917 = load ptr, ptr %916, align 8
  %918 = call ptr %917({ ptr, ptr, ptr, i32 } %910, ptr nonnull %2)
  %919 = call i32 %918({ ptr, ptr, ptr, i32 } %910, { ptr, ptr, ptr, i32 } %910, ptr nonnull %2)
  %920 = icmp eq i32 %919, %670
  br i1 %920, label %921, label %.critedge158.i1000

921:                                              ; preds = %904
  %922 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %923 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %924 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract104.i998)
  %925 = getelementptr i8, ptr %915, i64 48
  %926 = load ptr, ptr %925, align 8
  %927 = call ptr %926({ ptr, ptr, ptr, i32 } %910, ptr nonnull %2)
  %928 = call { ptr, i160 } %927({ ptr, ptr, ptr, i32 } %910, { ptr, ptr, ptr, i32 } %910, ptr nonnull %2)
  %929 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %930 = load ptr, ptr %288, align 8
  %931 = call i1 %930({ ptr, i160 } %928, { ptr, i160 } %500)
  br i1 %931, label %.thread528.i1049, label %.critedge158.i1000

.thread528.i1049:                                 ; preds = %921
  %932 = load ptr, ptr %result.i, align 8
  %933 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %934 = load ptr, ptr %282, align 8
  %935 = load ptr, ptr %932, align 8
  %936 = getelementptr i8, ptr %935, i64 48
  %937 = load ptr, ptr %936, align 8
  %938 = call { i64, i64 } %937(ptr nonnull %932)
  %939 = extractvalue { i64, i64 } %938, 0
  %940 = extractvalue { i64, i64 } %938, 1
  %941 = urem i64 20, %940
  %942 = icmp eq i64 %941, 0
  %943 = sub i64 %940, %941
  %944 = select i1 %942, i64 0, i64 %943
  %945 = add i64 %939, 20
  %946 = add i64 %945, %944
  %947 = load ptr, ptr %934, align 8
  %948 = getelementptr i8, ptr %947, i64 48
  %949 = load ptr, ptr %948, align 8
  %950 = call { i64, i64 } %949(ptr nonnull %934)
  %951 = extractvalue { i64, i64 } %950, 0
  %952 = extractvalue { i64, i64 } %950, 1
  %953 = call i64 @llvm.umax.i64(i64 %940, i64 %952)
  %954 = call i64 @llvm.umax.i64(i64 %953, i64 8)
  %955 = urem i64 %946, %952
  %956 = icmp eq i64 %955, 0
  %957 = sub i64 %952, %955
  %958 = select i1 %956, i64 0, i64 %957
  %959 = add i64 %951, %946
  %960 = add i64 %959, %958
  %961 = urem i64 %960, %954
  %962 = icmp eq i64 %961, 0
  %963 = sub i64 %954, %961
  %964 = select i1 %962, i64 0, i64 %963
  %965 = add i64 %964, %960
  %result.i248.i1050 = call noalias ptr @bump_malloc_inner(i64 noundef %965, ptr nonnull @current_ptr) #29
  store ptr %932, ptr %result.i248.i1050, align 8
  %966 = getelementptr i8, ptr %result.i248.i1050, i64 8
  store ptr %934, ptr %966, align 8
  %967 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i248.i1050)
  store ptr @Entry, ptr %250, align 8
  store ptr %result.i248.i1050, ptr %385, align 8
  store i32 9, ptr %386, align 8
  %968 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %250)
  %969 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %970 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %971 = load ptr, ptr %932, align 8
  %972 = getelementptr i8, ptr %971, i64 48
  %973 = load ptr, ptr %972, align 8
  %974 = call { i64, i64 } %973(ptr nonnull %932)
  %975 = extractvalue { i64, i64 } %974, 1
  %976 = urem i64 20, %975
  %977 = icmp eq i64 %976, 0
  %reass.sub5559 = sub i64 %975, %976
  %978 = add i64 %reass.sub5559, 20
  %979 = select i1 %977, i64 20, i64 %978
  %980 = getelementptr i8, ptr %result.i248.i1050, i64 %979
  %981 = load ptr, ptr %result.i248.i1050, align 8
  %982 = load ptr, ptr %981, align 8
  %983 = getelementptr i8, ptr %982, i64 64
  %984 = load ptr, ptr %983, align 8
  call void %984({ ptr, i160 } %500, ptr nonnull %981, ptr %980)
  %985 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %986 = load ptr, ptr %result.i248.i1050, align 8
  %987 = load ptr, ptr %986, align 8
  %988 = getelementptr i8, ptr %987, i64 48
  %989 = load ptr, ptr %988, align 8
  %990 = call { i64, i64 } %989(ptr nonnull %986)
  %991 = extractvalue { i64, i64 } %990, 0
  %992 = extractvalue { i64, i64 } %990, 1
  %993 = urem i64 20, %992
  %994 = icmp eq i64 %993, 0
  %995 = sub i64 %992, %993
  %996 = select i1 %994, i64 0, i64 %995
  %997 = add i64 %991, 20
  %998 = add i64 %997, %996
  %999 = load ptr, ptr %966, align 8
  %1000 = load ptr, ptr %999, align 8
  %1001 = getelementptr i8, ptr %1000, i64 48
  %1002 = load ptr, ptr %1001, align 8
  %1003 = call { i64, i64 } %1002(ptr nonnull %999)
  %1004 = extractvalue { i64, i64 } %1003, 1
  %1005 = urem i64 %998, %1004
  %1006 = icmp eq i64 %1005, 0
  %1007 = sub i64 %1004, %1005
  %1008 = select i1 %1006, i64 0, i64 %1007
  %1009 = getelementptr i8, ptr %result.i248.i1050, i64 %998
  %1010 = getelementptr i8, ptr %1009, i64 %1008
  %1011 = load ptr, ptr %966, align 8
  %1012 = load ptr, ptr %1011, align 8
  %1013 = getelementptr i8, ptr %1012, i64 64
  %1014 = load ptr, ptr %1013, align 8
  call void %1014({ ptr, i160 } %667, ptr nonnull %1011, ptr %1010)
  %1015 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %1016 = getelementptr i8, ptr %result.i248.i1050, i64 16
  store i32 %670, ptr %1016, align 4
  %1017 = load ptr, ptr %387, align 8
  %1018 = ptrtoint ptr %result.i248.i1050 to i64
  %1019 = ptrtoint ptr %1017 to i64
  %.sroa.284.0.insert.ext.i1051 = zext i64 %1019 to i160
  %.sroa.284.0.insert.shift.i1052 = shl nuw nsw i160 %.sroa.284.0.insert.ext.i1051, 64
  %.sroa.083.0.insert.ext.i1054 = zext i64 %1018 to i160
  %.sroa.284.0.insert.insert.i1053 = or disjoint i160 %.sroa.284.0.insert.shift.i1052, %.sroa.083.0.insert.ext.i1054
  %.sroa.083.0.insert.insert.i1055 = or disjoint i160 %.sroa.284.0.insert.insert.i1053, 3062541302288446171170371466885913903104
  %1020 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.083.0.insert.insert.i1055, 1
  %1021 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1022 = load ptr, ptr %312, align 8
  %1023 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1022, 0
  %1024 = load ptr, ptr %313, align 8
  %1025 = insertvalue { ptr, ptr, ptr, i32 } %1023, ptr %1024, 1
  %1026 = load ptr, ptr %396, align 8
  %1027 = insertvalue { ptr, ptr, ptr, i32 } %1025, ptr %1026, 2
  %1028 = load i32, ptr %314, align 4
  %1029 = insertvalue { ptr, ptr, ptr, i32 } %1027, i32 %1028, 3
  %hash_coef_ptr.i.i264.i1060 = getelementptr i8, ptr %1022, i64 8
  %tbl_size_ptr.i.i265.i1061 = getelementptr i8, ptr %1022, i64 16
  %offset_tbl_ptr.i.i266.i1062 = getelementptr i8, ptr %1022, i64 40
  %hash_coef.i.i267.i1063 = load i64, ptr %hash_coef_ptr.i.i264.i1060, align 4
  %tbl_size.i.i268.i1064 = load i64, ptr %tbl_size_ptr.i.i265.i1061, align 4
  %offset_tbl.i.i269.i1065 = load ptr, ptr %offset_tbl_ptr.i.i266.i1062, align 8
  %product.i.i.i270.i1066 = mul i64 %hash_coef.i.i267.i1063, -5261542750394134544
  %shifted.i.i.i271.i1067 = lshr i64 %product.i.i.i270.i1066, 32
  %xored.i.i.i272.i1068 = xor i64 %shifted.i.i.i271.i1067, %product.i.i.i270.i1066
  %hash.i.i.i273.i1069 = and i64 %xored.i.i.i272.i1068, %tbl_size.i.i268.i1064
  %offset_ptr.i.i274.i1070 = getelementptr i32, ptr %offset_tbl.i.i269.i1065, i64 %hash.i.i.i273.i1069
  %offset.i.i275.i1071 = load i32, ptr %offset_ptr.i.i274.i1070, align 4
  %eq.i278.i1072 = icmp eq i32 %1028, %offset.i.i275.i1071
  call void @llvm.assume(i1 %eq.i278.i1072) #30
  %1030 = load ptr, ptr %result.i, align 8
  %1031 = load ptr, ptr %282, align 8
  %result.i279.i1073 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1032 = getelementptr i8, ptr %result.i279.i1073, i64 16
  store ptr %1031, ptr %1032, align 8
  %1033 = getelementptr i8, ptr %result.i279.i1073, i64 8
  store ptr %1030, ptr %1033, align 8
  %1034 = getelementptr i8, ptr %result.i279.i1073, i64 24
  store ptr null, ptr %1034, align 8
  %1035 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i279.i1073)
  store ptr @Entry, ptr %result.i279.i1073, align 8
  store ptr @_parameterization_Ptri32, ptr %251, align 8
  store ptr %result.i279.i1073, ptr %388, align 8
  %1036 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %251)
  %1037 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1022)
  %1038 = sext i32 %1028 to i64
  %1039 = getelementptr ptr, ptr %1022, i64 %1038
  %1040 = getelementptr i8, ptr %1039, i64 128
  %1041 = load ptr, ptr %1040, align 8
  store ptr @i32_typ, ptr %252, align 8
  store ptr @Entry, ptr %389, align 8
  %1042 = call ptr %1041({ ptr, ptr, ptr, i32 } %1029, ptr nonnull %252)
  call void %1042({ ptr, ptr, ptr, i32 } %1029, { ptr, ptr, ptr, i32 } %1029, ptr nonnull %251, i32 %884, { ptr, i160 } %1020)
  br label %HashMap_insert_keyK_valueV.exit1116

.critedge158.i1000:                               ; preds = %921, %904, %.critedge.i980
  %1043 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1044 = load ptr, ptr %299, align 8
  %1045 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1044, 0
  %1046 = load ptr, ptr %300, align 8
  %1047 = insertvalue { ptr, ptr, ptr, i32 } %1045, ptr %1046, 1
  %1048 = load ptr, ptr %395, align 8
  %1049 = insertvalue { ptr, ptr, ptr, i32 } %1047, ptr %1048, 2
  %1050 = load i32, ptr %301, align 4
  %1051 = insertvalue { ptr, ptr, ptr, i32 } %1049, i32 %1050, 3
  %hash_coef_ptr.i.i281.i1005 = getelementptr i8, ptr %1044, i64 8
  %tbl_size_ptr.i.i282.i1006 = getelementptr i8, ptr %1044, i64 16
  %offset_tbl_ptr.i.i283.i1007 = getelementptr i8, ptr %1044, i64 40
  %hash_coef.i.i284.i1008 = load i64, ptr %hash_coef_ptr.i.i281.i1005, align 4
  %tbl_size.i.i285.i1009 = load i64, ptr %tbl_size_ptr.i.i282.i1006, align 4
  %offset_tbl.i.i286.i1010 = load ptr, ptr %offset_tbl_ptr.i.i283.i1007, align 8
  %product.i.i.i287.i1011 = mul i64 %hash_coef.i.i284.i1008, -5261542750394134544
  %shifted.i.i.i288.i1012 = lshr i64 %product.i.i.i287.i1011, 32
  %xored.i.i.i289.i1013 = xor i64 %shifted.i.i.i288.i1012, %product.i.i.i287.i1011
  %hash.i.i.i290.i1014 = and i64 %xored.i.i.i289.i1013, %tbl_size.i.i285.i1009
  %offset_ptr.i.i291.i1015 = getelementptr i32, ptr %offset_tbl.i.i286.i1010, i64 %hash.i.i.i290.i1014
  %offset.i.i292.i1016 = load i32, ptr %offset_ptr.i.i291.i1015, align 4
  %eq.i295.i1017 = icmp eq i32 %1050, %offset.i.i292.i1016
  call void @llvm.assume(i1 %eq.i295.i1017) #30
  %1052 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1053 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1044)
  %1054 = sext i32 %1050 to i64
  %1055 = getelementptr ptr, ptr %1044, i64 %1054
  %1056 = getelementptr i8, ptr %1055, i64 64
  %1057 = load ptr, ptr %1056, align 8
  %1058 = call ptr %1057({ ptr, ptr, ptr, i32 } %1051, ptr nonnull %2)
  %1059 = call i32 %1058({ ptr, ptr, ptr, i32 } %1051, { ptr, ptr, ptr, i32 } %1051, ptr nonnull %2)
  %1060 = load i32, ptr %397, align 4
  %.not.i1018 = icmp slt i32 %1060, %1059
  br i1 %.not.i1018, label %._crit_edge2.i1019, label %1061

1061:                                             ; preds = %.critedge158.i1000
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %192)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %193)
  %1062 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1063 = load ptr, ptr %299, align 8
  %1064 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1063, 0
  %1065 = load ptr, ptr %300, align 8
  %1066 = insertvalue { ptr, ptr, ptr, i32 } %1064, ptr %1065, 1
  %1067 = load ptr, ptr %395, align 8
  %1068 = insertvalue { ptr, ptr, ptr, i32 } %1066, ptr %1067, 2
  %1069 = load i32, ptr %301, align 4
  %1070 = insertvalue { ptr, ptr, ptr, i32 } %1068, i32 %1069, 3
  %hash_coef_ptr.i.i18.i2123 = getelementptr i8, ptr %1063, i64 8
  %tbl_size_ptr.i.i19.i2124 = getelementptr i8, ptr %1063, i64 16
  %offset_tbl_ptr.i.i20.i2125 = getelementptr i8, ptr %1063, i64 40
  %hash_coef.i.i21.i2126 = load i64, ptr %hash_coef_ptr.i.i18.i2123, align 4
  %tbl_size.i.i22.i2127 = load i64, ptr %tbl_size_ptr.i.i19.i2124, align 4
  %offset_tbl.i.i23.i2128 = load ptr, ptr %offset_tbl_ptr.i.i20.i2125, align 8
  %product.i.i.i24.i2129 = mul i64 %hash_coef.i.i21.i2126, -5261542750394134544
  %shifted.i.i.i25.i2130 = lshr i64 %product.i.i.i24.i2129, 32
  %xored.i.i.i26.i2131 = xor i64 %shifted.i.i.i25.i2130, %product.i.i.i24.i2129
  %hash.i.i.i27.i2132 = and i64 %xored.i.i.i26.i2131, %tbl_size.i.i22.i2127
  %offset_ptr.i.i28.i2133 = getelementptr i32, ptr %offset_tbl.i.i23.i2128, i64 %hash.i.i.i27.i2132
  %offset.i.i29.i2134 = load i32, ptr %offset_ptr.i.i28.i2133, align 4
  %eq.i.i2135 = icmp eq i32 %1069, %offset.i.i29.i2134
  call void @llvm.assume(i1 %eq.i.i2135) #30
  %1071 = load ptr, ptr %312, align 8
  %1072 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1071, 0
  %1073 = load ptr, ptr %313, align 8
  %1074 = insertvalue { ptr, ptr, ptr, i32 } %1072, ptr %1073, 1
  %1075 = load ptr, ptr %396, align 8
  %1076 = insertvalue { ptr, ptr, ptr, i32 } %1074, ptr %1075, 2
  %1077 = load i32, ptr %314, align 4
  %hash_coef_ptr.i.i46.i2140 = getelementptr i8, ptr %1071, i64 8
  %tbl_size_ptr.i.i47.i2141 = getelementptr i8, ptr %1071, i64 16
  %offset_tbl_ptr.i.i48.i2142 = getelementptr i8, ptr %1071, i64 40
  %hash_coef.i.i49.i2143 = load i64, ptr %hash_coef_ptr.i.i46.i2140, align 4
  %tbl_size.i.i50.i2144 = load i64, ptr %tbl_size_ptr.i.i47.i2141, align 4
  %offset_tbl.i.i51.i2145 = load ptr, ptr %offset_tbl_ptr.i.i48.i2142, align 8
  %product.i.i.i52.i2146 = mul i64 %hash_coef.i.i49.i2143, -5261542750394134544
  %shifted.i.i.i53.i2147 = lshr i64 %product.i.i.i52.i2146, 32
  %xored.i.i.i54.i2148 = xor i64 %shifted.i.i.i53.i2147, %product.i.i.i52.i2146
  %hash.i.i.i55.i2149 = and i64 %xored.i.i.i54.i2148, %tbl_size.i.i50.i2144
  %offset_ptr.i.i56.i2150 = getelementptr i32, ptr %offset_tbl.i.i51.i2145, i64 %hash.i.i.i55.i2149
  %offset.i.i57.i2151 = load i32, ptr %offset_ptr.i.i56.i2150, align 4
  %eq.i60.i2152 = icmp eq i32 %1077, %offset.i.i57.i2151
  call void @llvm.assume(i1 %eq.i60.i2152) #30
  %1078 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1079 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1063)
  %1080 = sext i32 %1069 to i64
  %1081 = getelementptr ptr, ptr %1063, i64 %1080
  %1082 = getelementptr i8, ptr %1081, i64 64
  %1083 = load ptr, ptr %1082, align 8
  %1084 = call ptr %1083({ ptr, ptr, ptr, i32 } %1070, ptr nonnull %2)
  %1085 = call i32 %1084({ ptr, ptr, ptr, i32 } %1070, { ptr, ptr, ptr, i32 } %1070, ptr nonnull %2)
  %1086 = shl i32 %1085, 1
  %1087 = call i32 @llvm.smax.i32(i32 %1086, i32 16)
  %1088 = load ptr, ptr %result.i, align 8
  %1089 = load ptr, ptr %282, align 8
  %result.i.i2153 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1090 = getelementptr i8, ptr %result.i.i2153, i64 16
  store ptr @_parameterization_Nil, ptr %1090, align 8
  %result.i75.i2154 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1091 = getelementptr i8, ptr %result.i75.i2154, i64 16
  store ptr %1089, ptr %1091, align 8
  %1092 = getelementptr i8, ptr %result.i75.i2154, i64 8
  store ptr %1088, ptr %1092, align 8
  %1093 = getelementptr i8, ptr %result.i75.i2154, i64 24
  store ptr null, ptr %1093, align 8
  %1094 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i75.i2154)
  store ptr @Entry, ptr %result.i75.i2154, align 8
  %1095 = getelementptr i8, ptr %result.i.i2153, i64 8
  store ptr %result.i75.i2154, ptr %1095, align 8
  %1096 = getelementptr i8, ptr %result.i.i2153, i64 24
  store ptr null, ptr %1096, align 8
  %1097 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i2153)
  store ptr @union_typ, ptr %result.i.i2153, align 8
  %result.i76.i2155 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i2153, ptr %result.i76.i2155, align 8
  %1098 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i76.i2155)
  store ptr @Array, ptr %192, align 8
  store ptr %result.i76.i2155, ptr %427, align 8
  store i32 9, ptr %428, align 8
  %1099 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %192)
  %1100 = getelementptr i8, ptr %result.i76.i2155, i64 16
  store i32 %1087, ptr %1100, align 4
  %1101 = getelementptr i8, ptr %result.i76.i2155, i64 20
  store i32 %1087, ptr %1101, align 4
  %1102 = zext nneg i32 %1087 to i64
  %1103 = shl nuw nsw i64 %1102, 5
  %result.i.i.i2156 = call noalias ptr @bump_malloc_inner(i64 noundef %1103, ptr nonnull @current_ptr) #29
  %1104 = getelementptr i8, ptr %result.i76.i2155, i64 8
  store ptr %result.i.i.i2156, ptr %1104, align 8
  %1105 = load ptr, ptr %429, align 8
  store ptr @Array, ptr %299, align 8
  store ptr %result.i76.i2155, ptr %300, align 8
  store ptr %1105, ptr %395, align 8
  store i32 9, ptr %301, align 4
  %result.i91.i2157 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1106 = getelementptr i8, ptr %result.i91.i2157, i64 16
  store ptr @_parameterization_Nil, ptr %1106, align 8
  %result.i92.i2158 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1107 = getelementptr i8, ptr %result.i92.i2158, i64 16
  store ptr %1089, ptr %1107, align 8
  %1108 = getelementptr i8, ptr %result.i92.i2158, i64 8
  store ptr %1088, ptr %1108, align 8
  %1109 = getelementptr i8, ptr %result.i92.i2158, i64 24
  store ptr null, ptr %1109, align 8
  %1110 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i92.i2158)
  store ptr @Entry, ptr %result.i92.i2158, align 8
  %1111 = getelementptr i8, ptr %result.i91.i2157, i64 8
  store ptr %result.i92.i2158, ptr %1111, align 8
  %1112 = getelementptr i8, ptr %result.i91.i2157, i64 24
  store ptr null, ptr %1112, align 8
  %1113 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i91.i2157)
  store ptr @union_typ, ptr %result.i91.i2157, align 8
  %result.i93.i2159 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i91.i2157, ptr %result.i93.i2159, align 8
  %1114 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i93.i2159)
  store ptr @Array, ptr %193, align 8
  store ptr %result.i93.i2159, ptr %430, align 8
  store i32 9, ptr %431, align 8
  %1115 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %193)
  %1116 = getelementptr i8, ptr %result.i93.i2159, i64 16
  store i32 %1087, ptr %1116, align 4
  %1117 = getelementptr i8, ptr %result.i93.i2159, i64 20
  store i32 %1087, ptr %1117, align 4
  %result.i.i234.i2160 = call noalias ptr @bump_malloc_inner(i64 noundef %1103, ptr nonnull @current_ptr) #29
  %1118 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %1119 = getelementptr i8, ptr %result.i93.i2159, i64 8
  store ptr %result.i.i234.i2160, ptr %1119, align 8
  %1120 = load ptr, ptr %432, align 8
  store ptr @Array, ptr %312, align 8
  store ptr %result.i93.i2159, ptr %313, align 8
  store ptr %1120, ptr %396, align 8
  store i32 9, ptr %314, align 4
  store i32 0, ptr %397, align 4
  %1121 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %141)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %142)
  %1122 = icmp sgt i32 %1085, 0
  br i1 %1122, label %.lr.ph.i3341, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3428.critedge

.lr.ph.i3341:                                     ; preds = %1061
  %invariant.gep.i3342 = getelementptr i8, ptr %1063, i64 120
  %offset_tbl.i.i24.i3343 = load ptr, ptr %offset_tbl_ptr.i.i20.i2125, align 8
  %hash_coef.i.i22.i3344 = load i64, ptr %hash_coef_ptr.i.i18.i2123, align 4
  %product.i.i.i25.i3345 = mul i64 %hash_coef.i.i22.i3344, -5261542750394134544
  %shifted.i.i.i26.i3346 = lshr i64 %product.i.i.i25.i3345, 32
  %xored.i.i.i27.i3347 = xor i64 %shifted.i.i.i26.i3346, %product.i.i.i25.i3345
  %tbl_size.i.i23.i3348 = load i64, ptr %tbl_size_ptr.i.i19.i2124, align 4
  %hash.i.i.i28.i3349 = and i64 %xored.i.i.i27.i3347, %tbl_size.i.i23.i3348
  %offset_ptr.i.i29.i3350 = getelementptr i32, ptr %offset_tbl.i.i24.i3343, i64 %hash.i.i.i28.i3349
  %offset.i.i30.i3351 = load i32, ptr %offset_ptr.i.i29.i3350, align 4
  %1123 = insertvalue { ptr, ptr, ptr, i32 } %1068, i32 %offset.i.i30.i3351, 3
  %1124 = sext i32 %offset.i.i30.i3351 to i64
  %gep.i3354 = getelementptr ptr, ptr %invariant.gep.i3342, i64 %1124
  %1125 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %1126

1126:                                             ; preds = %._crit_edge1.i3358, %.lr.ph.i3341
  %.reg2mem13.079.i3355 = phi i32 [ 0, %.lr.ph.i3341 ], [ %1323, %._crit_edge1.i3358 ]
  store ptr @_parameterization_Ptri32, ptr %141, align 8
  %1127 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %141)
  %1128 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %1063)
  %1129 = load ptr, ptr %gep.i3354, align 8
  store ptr @i32_typ, ptr %142, align 8
  %1130 = call ptr %1129({ ptr, ptr, ptr, i32 } %1123, ptr nonnull %142)
  %1131 = call { ptr, i160 } %1130({ ptr, ptr, ptr, i32 } %1123, { ptr, ptr, ptr, i32 } %1123, ptr nonnull %141, i32 %.reg2mem13.079.i3355)
  %.fca.0.extract11.i3356 = extractvalue { ptr, i160 } %1131, 0
  %1132 = icmp ne ptr %.fca.0.extract11.i3356, @nil_typ
  %1133 = icmp ne ptr %.fca.0.extract11.i3356, null
  %.not17.i3357 = and i1 %1132, %1133
  br i1 %.not17.i3357, label %1134, label %._crit_edge1.i3358

1134:                                             ; preds = %1126
  %hash_coef_ptr.i.i33.i3363 = getelementptr i8, ptr %.fca.0.extract11.i3356, i64 8
  %tbl_size_ptr.i.i34.i3364 = getelementptr i8, ptr %.fca.0.extract11.i3356, i64 16
  %offset_tbl_ptr.i.i35.i3365 = getelementptr i8, ptr %.fca.0.extract11.i3356, i64 40
  %1135 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %51)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %52)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %53)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %54)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %55)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %56)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %57)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0680.i4415)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %58)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %59)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %60)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %61)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %62)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %63)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %64)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %65)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i4416)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %66)
  %hash_coef.i.i147.i4422 = load i64, ptr %hash_coef_ptr.i.i33.i3363, align 4
  %tbl_size.i.i148.i4423 = load i64, ptr %tbl_size_ptr.i.i34.i3364, align 4
  %offset_tbl.i.i149.i4424 = load ptr, ptr %offset_tbl_ptr.i.i35.i3365, align 8
  %product.i.i.i150.i4425 = mul i64 %hash_coef.i.i147.i4422, 4015701072841558310
  %shifted.i.i.i151.i4426 = lshr i64 %product.i.i.i150.i4425, 32
  %xored.i.i.i152.i4427 = xor i64 %shifted.i.i.i151.i4426, %product.i.i.i150.i4425
  %hash.i.i.i153.i4428 = and i64 %xored.i.i.i152.i4427, %tbl_size.i.i148.i4423
  %offset_ptr.i.i154.i4429 = getelementptr i32, ptr %offset_tbl.i.i149.i4424, i64 %hash.i.i.i153.i4428
  %offset.i.i169.i4430 = load i32, ptr %offset_ptr.i.i154.i4429, align 4
  %1136 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1137 = load i32, ptr %315, align 4
  %1138 = icmp sgt i32 %1137, 0
  br i1 %1138, label %.lr.ph.i4431, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4544

.lr.ph.i4431:                                     ; preds = %1134
  %.fca.1.extract13.i3359 = extractvalue { ptr, i160 } %1131, 1
  %.sroa.576.8.extract.shift.i3361 = lshr i160 %.fca.1.extract13.i3359, 64
  %1139 = insertelement <2 x i160> poison, i160 %.sroa.576.8.extract.shift.i3361, i64 0
  %1140 = insertelement <2 x i160> %1139, i160 %.fca.1.extract13.i3359, i64 1
  %1141 = trunc <2 x i160> %1140 to <2 x i64>
  %1142 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i3356, 0
  %1143 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1144 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract11.i3356)
  %invariant.gep5021 = getelementptr i8, ptr %.fca.0.extract11.i3356, i64 64
  br label %1145

1145:                                             ; preds = %.cont.cont.i4482, %.lr.ph.i4431
  %1146 = phi ptr [ %.fca.0.extract11.i3356, %.lr.ph.i4431 ], [ %vptr.i248.sroa.speculated.i4483, %.cont.cont.i4482 ]
  %1147 = phi i32 [ %offset.i.i169.i4430, %.lr.ph.i4431 ], [ %offset.i.i260.i4497, %.cont.cont.i4482 ]
  %.reg2mem195.0678.i4432 = phi i32 [ 1, %.lr.ph.i4431 ], [ %1306, %.cont.cont.i4482 ]
  %.reg2mem193.0677.i4433 = phi i32 [ 0, %.lr.ph.i4431 ], [ %1311, %.cont.cont.i4482 ]
  %1148 = phi <2 x i64> [ %1141, %.lr.ph.i4431 ], [ %1310, %.cont.cont.i4482 ]
  %1149 = extractelement <2 x i64> %1148, i64 1
  %1150 = inttoptr i64 %1149 to ptr
  %1151 = extractelement <2 x i64> %1148, i64 0
  %1152 = inttoptr i64 %1151 to ptr
  %1153 = insertvalue { ptr, ptr, ptr, i32 } %1142, ptr %1150, 1
  %1154 = insertvalue { ptr, ptr, ptr, i32 } %1153, ptr %1152, 2
  %1155 = insertvalue { ptr, ptr, ptr, i32 } %1154, i32 %1147, 3
  %1156 = sext i32 %1147 to i64
  %gep5022 = getelementptr ptr, ptr %invariant.gep5021, i64 %1156
  %1157 = load ptr, ptr %gep5022, align 8
  %1158 = call ptr %1157({ ptr, ptr, ptr, i32 } %1155, ptr nonnull %2)
  %1159 = call i32 %1158({ ptr, ptr, ptr, i32 } %1155, { ptr, ptr, ptr, i32 } %1155, ptr nonnull %2)
  %1160 = icmp eq i32 %.reg2mem195.0678.i4432, 1
  %1161 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br i1 %1160, label %1162, label %1225

1162:                                             ; preds = %1145
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %1163 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1164 = load ptr, ptr %299, align 8
  %1165 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1164, 0
  %1166 = load ptr, ptr %300, align 8
  %1167 = insertvalue { ptr, ptr, ptr, i32 } %1165, ptr %1166, 1
  %1168 = load ptr, ptr %395, align 8
  %1169 = insertvalue { ptr, ptr, ptr, i32 } %1167, ptr %1168, 2
  %1170 = load i32, ptr %301, align 4
  %1171 = insertvalue { ptr, ptr, ptr, i32 } %1169, i32 %1170, 3
  %hash_coef_ptr.i.i10.i5311 = getelementptr i8, ptr %1164, i64 8
  %tbl_size_ptr.i.i11.i5312 = getelementptr i8, ptr %1164, i64 16
  %offset_tbl_ptr.i.i12.i5313 = getelementptr i8, ptr %1164, i64 40
  %hash_coef.i.i13.i5314 = load i64, ptr %hash_coef_ptr.i.i10.i5311, align 4
  %tbl_size.i.i14.i5315 = load i64, ptr %tbl_size_ptr.i.i11.i5312, align 4
  %offset_tbl.i.i15.i5316 = load ptr, ptr %offset_tbl_ptr.i.i12.i5313, align 8
  %product.i.i.i16.i5317 = mul i64 %hash_coef.i.i13.i5314, -5261542750394134544
  %shifted.i.i.i17.i5318 = lshr i64 %product.i.i.i16.i5317, 32
  %xored.i.i.i18.i5319 = xor i64 %shifted.i.i.i17.i5318, %product.i.i.i16.i5317
  %hash.i.i.i19.i5320 = and i64 %xored.i.i.i18.i5319, %tbl_size.i.i14.i5315
  %offset_ptr.i.i20.i5321 = getelementptr i32, ptr %offset_tbl.i.i15.i5316, i64 %hash.i.i.i19.i5320
  %offset.i.i21.i5322 = load i32, ptr %offset_ptr.i.i20.i5321, align 4
  %eq.i.i5323 = icmp eq i32 %1170, %offset.i.i21.i5322
  call void @llvm.assume(i1 %eq.i.i5323) #30
  %1172 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1173 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1164)
  %1174 = sext i32 %1170 to i64
  %1175 = getelementptr ptr, ptr %1164, i64 %1174
  %1176 = getelementptr i8, ptr %1175, i64 64
  %1177 = load ptr, ptr %1176, align 8
  %1178 = call ptr %1177({ ptr, ptr, ptr, i32 } %1171, ptr nonnull %2)
  %1179 = call i32 %1178({ ptr, ptr, ptr, i32 } %1171, { ptr, ptr, ptr, i32 } %1171, ptr nonnull %2)
  %1180 = add i32 %1179, -1
  %1181 = and i32 %1180, %1159
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %1182 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1183 = load ptr, ptr %299, align 8
  %1184 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1183, 0
  %1185 = load ptr, ptr %300, align 8
  %1186 = insertvalue { ptr, ptr, ptr, i32 } %1184, ptr %1185, 1
  %1187 = load ptr, ptr %395, align 8
  %1188 = insertvalue { ptr, ptr, ptr, i32 } %1186, ptr %1187, 2
  %1189 = load i32, ptr %301, align 4
  %1190 = insertvalue { ptr, ptr, ptr, i32 } %1188, i32 %1189, 3
  %hash_coef_ptr.i.i172.i4502 = getelementptr i8, ptr %1183, i64 8
  %tbl_size_ptr.i.i173.i4503 = getelementptr i8, ptr %1183, i64 16
  %offset_tbl_ptr.i.i174.i4504 = getelementptr i8, ptr %1183, i64 40
  %hash_coef.i.i175.i4505 = load i64, ptr %hash_coef_ptr.i.i172.i4502, align 4
  %tbl_size.i.i176.i4506 = load i64, ptr %tbl_size_ptr.i.i173.i4503, align 4
  %offset_tbl.i.i177.i4507 = load ptr, ptr %offset_tbl_ptr.i.i174.i4504, align 8
  %product.i.i.i178.i4508 = mul i64 %hash_coef.i.i175.i4505, -5261542750394134544
  %shifted.i.i.i179.i4509 = lshr i64 %product.i.i.i178.i4508, 32
  %xored.i.i.i180.i4510 = xor i64 %shifted.i.i.i179.i4509, %product.i.i.i178.i4508
  %hash.i.i.i181.i4511 = and i64 %xored.i.i.i180.i4510, %tbl_size.i.i176.i4506
  %offset_ptr.i.i182.i4512 = getelementptr i32, ptr %offset_tbl.i.i177.i4507, i64 %hash.i.i.i181.i4511
  %offset.i.i183.i4513 = load i32, ptr %offset_ptr.i.i182.i4512, align 4
  %eq.i.i4514 = icmp eq i32 %1189, %offset.i.i183.i4513
  call void @llvm.assume(i1 %eq.i.i4514) #30
  store ptr @_parameterization_Ptri32, ptr %51, align 8
  %1191 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %51)
  %1192 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1183)
  %1193 = sext i32 %1189 to i64
  %1194 = getelementptr ptr, ptr %1183, i64 %1193
  %1195 = getelementptr i8, ptr %1194, i64 120
  %1196 = load ptr, ptr %1195, align 8
  store ptr @i32_typ, ptr %52, align 8
  %1197 = call ptr %1196({ ptr, ptr, ptr, i32 } %1190, ptr nonnull %52)
  %1198 = call { ptr, i160 } %1197({ ptr, ptr, ptr, i32 } %1190, { ptr, ptr, ptr, i32 } %1190, ptr nonnull %51, i32 %1181)
  %.fca.0.extract112.i4515 = extractvalue { ptr, i160 } %1198, 0
  %1199 = insertvalue { ptr, i160 } undef, ptr %1146, 0
  %.sroa.3111.0.insert.ext.i4516 = zext i32 %1147 to i160
  %.sroa.3111.0.insert.shift.i4517 = shl nuw i160 %.sroa.3111.0.insert.ext.i4516, 128
  %.sroa.2110.0.insert.ext.i4518 = zext i64 %1151 to i160
  %.sroa.2110.0.insert.shift.i4519 = shl nuw nsw i160 %.sroa.2110.0.insert.ext.i4518, 64
  %.sroa.2110.0.insert.insert.i4520 = or disjoint i160 %.sroa.2110.0.insert.shift.i4519, %.sroa.3111.0.insert.shift.i4517
  %.sroa.0109.0.insert.ext.i4521 = zext i64 %1149 to i160
  %.sroa.0109.0.insert.insert.i4522 = or disjoint i160 %.sroa.2110.0.insert.insert.i4520, %.sroa.0109.0.insert.ext.i4521
  %1200 = insertvalue { ptr, i160 } %1199, i160 %.sroa.0109.0.insert.insert.i4522, 1
  %1201 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1202 = load ptr, ptr %299, align 8
  %1203 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1202, 0
  %1204 = load ptr, ptr %300, align 8
  %1205 = insertvalue { ptr, ptr, ptr, i32 } %1203, ptr %1204, 1
  %1206 = load ptr, ptr %395, align 8
  %1207 = insertvalue { ptr, ptr, ptr, i32 } %1205, ptr %1206, 2
  %1208 = load i32, ptr %301, align 4
  %1209 = insertvalue { ptr, ptr, ptr, i32 } %1207, i32 %1208, 3
  %hash_coef_ptr.i.i186.i4527 = getelementptr i8, ptr %1202, i64 8
  %tbl_size_ptr.i.i187.i4528 = getelementptr i8, ptr %1202, i64 16
  %offset_tbl_ptr.i.i188.i4529 = getelementptr i8, ptr %1202, i64 40
  %hash_coef.i.i189.i4530 = load i64, ptr %hash_coef_ptr.i.i186.i4527, align 4
  %tbl_size.i.i190.i4531 = load i64, ptr %tbl_size_ptr.i.i187.i4528, align 4
  %offset_tbl.i.i191.i4532 = load ptr, ptr %offset_tbl_ptr.i.i188.i4529, align 8
  %product.i.i.i192.i4533 = mul i64 %hash_coef.i.i189.i4530, -5261542750394134544
  %shifted.i.i.i193.i4534 = lshr i64 %product.i.i.i192.i4533, 32
  %xored.i.i.i194.i4535 = xor i64 %shifted.i.i.i193.i4534, %product.i.i.i192.i4533
  %hash.i.i.i195.i4536 = and i64 %xored.i.i.i194.i4535, %tbl_size.i.i190.i4531
  %offset_ptr.i.i196.i4537 = getelementptr i32, ptr %offset_tbl.i.i191.i4532, i64 %hash.i.i.i195.i4536
  %offset.i.i197.i4538 = load i32, ptr %offset_ptr.i.i196.i4537, align 4
  %eq.i200.i4539 = icmp eq i32 %1208, %offset.i.i197.i4538
  call void @llvm.assume(i1 %eq.i200.i4539) #30
  %1210 = load ptr, ptr %result.i, align 8
  %1211 = load ptr, ptr %282, align 8
  %result.i.i4540 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1212 = getelementptr i8, ptr %result.i.i4540, i64 16
  store ptr %1211, ptr %1212, align 8
  %1213 = getelementptr i8, ptr %result.i.i4540, i64 8
  store ptr %1210, ptr %1213, align 8
  %1214 = getelementptr i8, ptr %result.i.i4540, i64 24
  store ptr null, ptr %1214, align 8
  %1215 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i4540)
  store ptr @Entry, ptr %result.i.i4540, align 8
  store ptr @_parameterization_Ptri32, ptr %53, align 8
  store ptr %result.i.i4540, ptr %480, align 8
  %1216 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %53)
  %1217 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1202)
  %1218 = sext i32 %1208 to i64
  %1219 = getelementptr ptr, ptr %1202, i64 %1218
  %1220 = getelementptr i8, ptr %1219, i64 128
  %1221 = load ptr, ptr %1220, align 8
  store ptr @i32_typ, ptr %54, align 8
  store ptr %1146, ptr %481, align 8
  %1222 = call ptr %1221({ ptr, ptr, ptr, i32 } %1209, ptr nonnull %54)
  call void %1222({ ptr, ptr, ptr, i32 } %1209, { ptr, ptr, ptr, i32 } %1209, ptr nonnull %53, i32 %1181, { ptr, i160 } %1200)
  %1223 = icmp ne ptr %.fca.0.extract112.i4515, @nil_typ
  %1224 = icmp ne ptr %.fca.0.extract112.i4515, null
  %.not140.i4541 = and i1 %1223, %1224
  br i1 %.not140.i4541, label %.cont.cont.i4482, label %1314

1225:                                             ; preds = %1145
  %1226 = add i32 %1159, 2127912214
  %1227 = shl i32 %1159, 12
  %1228 = add i32 %1226, %1227
  %1229 = ashr i32 %1228, 19
  %1230 = xor i32 %1228, %1229
  %1231 = xor i32 %1230, -949894596
  %1232 = add i32 %1231, 374761393
  %1233 = shl i32 %1231, 5
  %1234 = add i32 %1232, %1233
  %1235 = add i32 %1234, -744332180
  %1236 = shl i32 %1234, 9
  %1237 = xor i32 %1235, %1236
  %1238 = add i32 %1237, -42973499
  %1239 = shl i32 %1237, 3
  %1240 = add i32 %1238, %1239
  %1241 = ashr i32 %1240, 16
  %1242 = xor i32 %1240, %1241
  %1243 = xor i32 %1242, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %1244 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1245 = load ptr, ptr %312, align 8
  %1246 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1245, 0
  %1247 = load ptr, ptr %313, align 8
  %1248 = insertvalue { ptr, ptr, ptr, i32 } %1246, ptr %1247, 1
  %1249 = load ptr, ptr %396, align 8
  %1250 = insertvalue { ptr, ptr, ptr, i32 } %1248, ptr %1249, 2
  %1251 = load i32, ptr %314, align 4
  %1252 = insertvalue { ptr, ptr, ptr, i32 } %1250, i32 %1251, 3
  %hash_coef_ptr.i.i10.i5341 = getelementptr i8, ptr %1245, i64 8
  %tbl_size_ptr.i.i11.i5342 = getelementptr i8, ptr %1245, i64 16
  %offset_tbl_ptr.i.i12.i5343 = getelementptr i8, ptr %1245, i64 40
  %hash_coef.i.i13.i5344 = load i64, ptr %hash_coef_ptr.i.i10.i5341, align 4
  %tbl_size.i.i14.i5345 = load i64, ptr %tbl_size_ptr.i.i11.i5342, align 4
  %offset_tbl.i.i15.i5346 = load ptr, ptr %offset_tbl_ptr.i.i12.i5343, align 8
  %product.i.i.i16.i5347 = mul i64 %hash_coef.i.i13.i5344, -5261542750394134544
  %shifted.i.i.i17.i5348 = lshr i64 %product.i.i.i16.i5347, 32
  %xored.i.i.i18.i5349 = xor i64 %shifted.i.i.i17.i5348, %product.i.i.i16.i5347
  %hash.i.i.i19.i5350 = and i64 %xored.i.i.i18.i5349, %tbl_size.i.i14.i5345
  %offset_ptr.i.i20.i5351 = getelementptr i32, ptr %offset_tbl.i.i15.i5346, i64 %hash.i.i.i19.i5350
  %offset.i.i21.i5352 = load i32, ptr %offset_ptr.i.i20.i5351, align 4
  %eq.i.i5353 = icmp eq i32 %1251, %offset.i.i21.i5352
  call void @llvm.assume(i1 %eq.i.i5353) #30
  %1253 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1254 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1245)
  %1255 = sext i32 %1251 to i64
  %1256 = getelementptr ptr, ptr %1245, i64 %1255
  %1257 = getelementptr i8, ptr %1256, i64 64
  %1258 = load ptr, ptr %1257, align 8
  %1259 = call ptr %1258({ ptr, ptr, ptr, i32 } %1252, ptr nonnull %2)
  %1260 = call i32 %1259({ ptr, ptr, ptr, i32 } %1252, { ptr, ptr, ptr, i32 } %1252, ptr nonnull %2)
  %1261 = add i32 %1260, -1
  %1262 = and i32 %1261, %1243
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %1263 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1264 = load ptr, ptr %312, align 8
  %1265 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1264, 0
  %1266 = load ptr, ptr %313, align 8
  %1267 = insertvalue { ptr, ptr, ptr, i32 } %1265, ptr %1266, 1
  %1268 = load ptr, ptr %396, align 8
  %1269 = insertvalue { ptr, ptr, ptr, i32 } %1267, ptr %1268, 2
  %1270 = load i32, ptr %314, align 4
  %1271 = insertvalue { ptr, ptr, ptr, i32 } %1269, i32 %1270, 3
  %hash_coef_ptr.i.i202.i4438 = getelementptr i8, ptr %1264, i64 8
  %tbl_size_ptr.i.i203.i4439 = getelementptr i8, ptr %1264, i64 16
  %offset_tbl_ptr.i.i204.i4440 = getelementptr i8, ptr %1264, i64 40
  %hash_coef.i.i205.i4441 = load i64, ptr %hash_coef_ptr.i.i202.i4438, align 4
  %tbl_size.i.i206.i4442 = load i64, ptr %tbl_size_ptr.i.i203.i4439, align 4
  %offset_tbl.i.i207.i4443 = load ptr, ptr %offset_tbl_ptr.i.i204.i4440, align 8
  %product.i.i.i208.i4444 = mul i64 %hash_coef.i.i205.i4441, -5261542750394134544
  %shifted.i.i.i209.i4445 = lshr i64 %product.i.i.i208.i4444, 32
  %xored.i.i.i210.i4446 = xor i64 %shifted.i.i.i209.i4445, %product.i.i.i208.i4444
  %hash.i.i.i211.i4447 = and i64 %xored.i.i.i210.i4446, %tbl_size.i.i206.i4442
  %offset_ptr.i.i212.i4448 = getelementptr i32, ptr %offset_tbl.i.i207.i4443, i64 %hash.i.i.i211.i4447
  %offset.i.i213.i4449 = load i32, ptr %offset_ptr.i.i212.i4448, align 4
  %eq.i216.i4450 = icmp eq i32 %1270, %offset.i.i213.i4449
  call void @llvm.assume(i1 %eq.i216.i4450) #30
  store ptr @_parameterization_Ptri32, ptr %59, align 8
  %1272 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %59)
  %1273 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1264)
  %1274 = sext i32 %1270 to i64
  %1275 = getelementptr ptr, ptr %1264, i64 %1274
  %1276 = getelementptr i8, ptr %1275, i64 120
  %1277 = load ptr, ptr %1276, align 8
  store ptr @i32_typ, ptr %60, align 8
  %1278 = call ptr %1277({ ptr, ptr, ptr, i32 } %1271, ptr nonnull %60)
  %1279 = call { ptr, i160 } %1278({ ptr, ptr, ptr, i32 } %1271, { ptr, ptr, ptr, i32 } %1271, ptr nonnull %59, i32 %1262)
  %.fca.0.extract87.i4451 = extractvalue { ptr, i160 } %1279, 0
  %1280 = insertvalue { ptr, i160 } undef, ptr %1146, 0
  %.sroa.3.0.insert.ext.i4452 = zext i32 %1147 to i160
  %.sroa.3.0.insert.shift.i4453 = shl nuw i160 %.sroa.3.0.insert.ext.i4452, 128
  %.sroa.2.0.insert.ext.i4454 = zext i64 %1151 to i160
  %.sroa.2.0.insert.shift.i4455 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i4454, 64
  %.sroa.2.0.insert.insert.i4456 = or disjoint i160 %.sroa.2.0.insert.shift.i4455, %.sroa.3.0.insert.shift.i4453
  %.sroa.0.0.insert.ext.i4457 = zext i64 %1149 to i160
  %.sroa.0.0.insert.insert.i4458 = or disjoint i160 %.sroa.2.0.insert.insert.i4456, %.sroa.0.0.insert.ext.i4457
  %1281 = insertvalue { ptr, i160 } %1280, i160 %.sroa.0.0.insert.insert.i4458, 1
  %1282 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1283 = load ptr, ptr %312, align 8
  %1284 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1283, 0
  %1285 = load ptr, ptr %313, align 8
  %1286 = insertvalue { ptr, ptr, ptr, i32 } %1284, ptr %1285, 1
  %1287 = load ptr, ptr %396, align 8
  %1288 = insertvalue { ptr, ptr, ptr, i32 } %1286, ptr %1287, 2
  %1289 = load i32, ptr %314, align 4
  %1290 = insertvalue { ptr, ptr, ptr, i32 } %1288, i32 %1289, 3
  %hash_coef_ptr.i.i218.i4463 = getelementptr i8, ptr %1283, i64 8
  %tbl_size_ptr.i.i219.i4464 = getelementptr i8, ptr %1283, i64 16
  %offset_tbl_ptr.i.i220.i4465 = getelementptr i8, ptr %1283, i64 40
  %hash_coef.i.i221.i4466 = load i64, ptr %hash_coef_ptr.i.i218.i4463, align 4
  %tbl_size.i.i222.i4467 = load i64, ptr %tbl_size_ptr.i.i219.i4464, align 4
  %offset_tbl.i.i223.i4468 = load ptr, ptr %offset_tbl_ptr.i.i220.i4465, align 8
  %product.i.i.i224.i4469 = mul i64 %hash_coef.i.i221.i4466, -5261542750394134544
  %shifted.i.i.i225.i4470 = lshr i64 %product.i.i.i224.i4469, 32
  %xored.i.i.i226.i4471 = xor i64 %shifted.i.i.i225.i4470, %product.i.i.i224.i4469
  %hash.i.i.i227.i4472 = and i64 %xored.i.i.i226.i4471, %tbl_size.i.i222.i4467
  %offset_ptr.i.i228.i4473 = getelementptr i32, ptr %offset_tbl.i.i223.i4468, i64 %hash.i.i.i227.i4472
  %offset.i.i229.i4474 = load i32, ptr %offset_ptr.i.i228.i4473, align 4
  %eq.i232.i4475 = icmp eq i32 %1289, %offset.i.i229.i4474
  call void @llvm.assume(i1 %eq.i232.i4475) #30
  %1291 = load ptr, ptr %result.i, align 8
  %1292 = load ptr, ptr %282, align 8
  %result.i233.i4476 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1293 = getelementptr i8, ptr %result.i233.i4476, i64 16
  store ptr %1292, ptr %1293, align 8
  %1294 = getelementptr i8, ptr %result.i233.i4476, i64 8
  store ptr %1291, ptr %1294, align 8
  %1295 = getelementptr i8, ptr %result.i233.i4476, i64 24
  store ptr null, ptr %1295, align 8
  %1296 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i233.i4476)
  store ptr @Entry, ptr %result.i233.i4476, align 8
  store ptr @_parameterization_Ptri32, ptr %61, align 8
  store ptr %result.i233.i4476, ptr %478, align 8
  %1297 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %61)
  %1298 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1283)
  %1299 = sext i32 %1289 to i64
  %1300 = getelementptr ptr, ptr %1283, i64 %1299
  %1301 = getelementptr i8, ptr %1300, i64 128
  %1302 = load ptr, ptr %1301, align 8
  store ptr @i32_typ, ptr %62, align 8
  store ptr %1146, ptr %479, align 8
  %1303 = call ptr %1302({ ptr, ptr, ptr, i32 } %1290, ptr nonnull %62)
  call void %1303({ ptr, ptr, ptr, i32 } %1290, { ptr, ptr, ptr, i32 } %1290, ptr nonnull %61, i32 %1262, { ptr, i160 } %1281)
  %1304 = icmp ne ptr %.fca.0.extract87.i4451, @nil_typ
  %1305 = icmp ne ptr %.fca.0.extract87.i4451, null
  %.not138.i4477 = and i1 %1304, %1305
  br i1 %.not138.i4477, label %.cont.cont.i4482, label %1314

.cont.cont.i4482:                                 ; preds = %1225, %1162
  %.sink5060 = phi { ptr, i160 } [ %1198, %1162 ], [ %1279, %1225 ]
  %1306 = phi i32 [ 2, %1162 ], [ 1, %1225 ]
  %vptr.i248.sroa.speculated.i4483 = phi ptr [ %.fca.0.extract112.i4515, %1162 ], [ %.fca.0.extract87.i4451, %1225 ]
  %.fca.1.extract89.i4478 = extractvalue { ptr, i160 } %.sink5060, 1
  %.sroa.3407.sroa.4.0.extract.shift.i4479 = lshr i160 %.fca.1.extract89.i4478, 64
  %1307 = trunc i160 %.sroa.3407.sroa.4.0.extract.shift.i4479 to i64
  %1308 = insertelement <2 x i64> poison, i64 %1307, i64 0
  %1309 = trunc i160 %.fca.1.extract89.i4478 to i64
  %1310 = insertelement <2 x i64> %1308, i64 %1309, i64 1
  %hash_coef_ptr.i.i249.i4486 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i4483, i64 8
  %tbl_size_ptr.i.i250.i4487 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i4483, i64 16
  %offset_tbl_ptr.i.i251.i4488 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i4483, i64 40
  %hash_coef.i.i252.i4489 = load i64, ptr %hash_coef_ptr.i.i249.i4486, align 4
  %tbl_size.i.i253.i4490 = load i64, ptr %tbl_size_ptr.i.i250.i4487, align 4
  %offset_tbl.i.i254.i4491 = load ptr, ptr %offset_tbl_ptr.i.i251.i4488, align 8
  %product.i.i.i255.i4492 = mul i64 %hash_coef.i.i252.i4489, 4015701072841558310
  %shifted.i.i.i256.i4493 = lshr i64 %product.i.i.i255.i4492, 32
  %xored.i.i.i257.i4494 = xor i64 %shifted.i.i.i256.i4493, %product.i.i.i255.i4492
  %hash.i.i.i258.i4495 = and i64 %xored.i.i.i257.i4494, %tbl_size.i.i253.i4490
  %offset_ptr.i.i259.i4496 = getelementptr i32, ptr %offset_tbl.i.i254.i4491, i64 %hash.i.i.i258.i4495
  %offset.i.i260.i4497 = load i32, ptr %offset_ptr.i.i259.i4496, align 4
  %1311 = add nuw nsw i32 %.reg2mem193.0677.i4433, 1
  %1312 = load i32, ptr %315, align 4
  %1313 = icmp slt i32 %1311, %1312
  br i1 %1313, label %1145, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4544

1314:                                             ; preds = %1225, %1162
  %1315 = phi ptr [ %63, %1225 ], [ %55, %1162 ]
  %1316 = phi ptr [ %64, %1225 ], [ %56, %1162 ]
  %1317 = phi ptr [ %65, %1225 ], [ %57, %1162 ]
  %1318 = phi ptr [ %.sroa.0.i4416, %1225 ], [ %.sroa.0680.i4415, %1162 ]
  %1319 = phi ptr [ %66, %1225 ], [ %58, %1162 ]
  %1320 = load i32, ptr %397, align 4
  store i32 %1320, ptr %1315, align 4
  store i32 1, ptr %1316, align 4
  %1321 = add i32 %1320, 1
  store i32 %1321, ptr %1317, align 4
  %1322 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  store i32 %1321, ptr %397, align 4
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %1319, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %1318, align 8
  br label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4544

HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4544: ; preds = %.cont.cont.i4482, %1134, %1314
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %51)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %52)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %53)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %54)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %55)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %56)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %57)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i4415)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %58)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %59)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %60)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %61)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %62)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %63)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %64)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %65)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i4416)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %66)
  br label %._crit_edge1.i3358

._crit_edge1.i3358:                               ; preds = %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4544, %1126
  %1323 = add nuw nsw i32 %.reg2mem13.079.i3355, 1
  %1324 = icmp slt i32 %1323, %1085
  br i1 %1324, label %1126, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3376

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3376: ; preds = %._crit_edge1.i3358
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %141)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %142)
  %1325 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %139)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %140)
  %invariant.gep.i3379 = getelementptr i8, ptr %1071, i64 120
  %offset_tbl.i.i24.i3381 = load ptr, ptr %offset_tbl_ptr.i.i48.i2142, align 8
  %hash_coef.i.i22.i3383 = load i64, ptr %hash_coef_ptr.i.i46.i2140, align 4
  %product.i.i.i25.i3384 = mul i64 %hash_coef.i.i22.i3383, -5261542750394134544
  %shifted.i.i.i26.i3385 = lshr i64 %product.i.i.i25.i3384, 32
  %xored.i.i.i27.i3386 = xor i64 %shifted.i.i.i26.i3385, %product.i.i.i25.i3384
  %tbl_size.i.i23.i3388 = load i64, ptr %tbl_size_ptr.i.i47.i2141, align 4
  %hash.i.i.i28.i3389 = and i64 %xored.i.i.i27.i3386, %tbl_size.i.i23.i3388
  %offset_ptr.i.i29.i3390 = getelementptr i32, ptr %offset_tbl.i.i24.i3381, i64 %hash.i.i.i28.i3389
  %offset.i.i30.i3391 = load i32, ptr %offset_ptr.i.i29.i3390, align 4
  %1326 = insertvalue { ptr, ptr, ptr, i32 } %1076, i32 %offset.i.i30.i3391, 3
  %1327 = sext i32 %offset.i.i30.i3391 to i64
  %gep.i3406 = getelementptr ptr, ptr %invariant.gep.i3379, i64 %1327
  %1328 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %1329

1329:                                             ; preds = %._crit_edge1.i3410, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3376
  %.reg2mem13.079.i3407 = phi i32 [ 0, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3376 ], [ %1526, %._crit_edge1.i3410 ]
  store ptr @_parameterization_Ptri32, ptr %139, align 8
  %1330 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %139)
  %1331 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %1071)
  %1332 = load ptr, ptr %gep.i3406, align 8
  store ptr @i32_typ, ptr %140, align 8
  %1333 = call ptr %1332({ ptr, ptr, ptr, i32 } %1326, ptr nonnull %140)
  %1334 = call { ptr, i160 } %1333({ ptr, ptr, ptr, i32 } %1326, { ptr, ptr, ptr, i32 } %1326, ptr nonnull %139, i32 %.reg2mem13.079.i3407)
  %.fca.0.extract11.i3408 = extractvalue { ptr, i160 } %1334, 0
  %1335 = icmp ne ptr %.fca.0.extract11.i3408, @nil_typ
  %1336 = icmp ne ptr %.fca.0.extract11.i3408, null
  %.not17.i3409 = and i1 %1335, %1336
  br i1 %.not17.i3409, label %1337, label %._crit_edge1.i3410

1337:                                             ; preds = %1329
  %hash_coef_ptr.i.i33.i3415 = getelementptr i8, ptr %.fca.0.extract11.i3408, i64 8
  %tbl_size_ptr.i.i34.i3416 = getelementptr i8, ptr %.fca.0.extract11.i3408, i64 16
  %offset_tbl_ptr.i.i35.i3417 = getelementptr i8, ptr %.fca.0.extract11.i3408, i64 40
  %1338 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %35)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %36)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %37)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %38)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %39)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %40)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %41)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0680.i4545)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %42)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %43)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %44)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %45)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %46)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %47)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %48)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %49)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i4547)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %50)
  %hash_coef.i.i147.i4566 = load i64, ptr %hash_coef_ptr.i.i33.i3415, align 4
  %tbl_size.i.i148.i4567 = load i64, ptr %tbl_size_ptr.i.i34.i3416, align 4
  %offset_tbl.i.i149.i4568 = load ptr, ptr %offset_tbl_ptr.i.i35.i3417, align 8
  %product.i.i.i150.i4569 = mul i64 %hash_coef.i.i147.i4566, 4015701072841558310
  %shifted.i.i.i151.i4570 = lshr i64 %product.i.i.i150.i4569, 32
  %xored.i.i.i152.i4571 = xor i64 %shifted.i.i.i151.i4570, %product.i.i.i150.i4569
  %hash.i.i.i153.i4572 = and i64 %xored.i.i.i152.i4571, %tbl_size.i.i148.i4567
  %offset_ptr.i.i154.i4573 = getelementptr i32, ptr %offset_tbl.i.i149.i4568, i64 %hash.i.i.i153.i4572
  %offset.i.i169.i4574 = load i32, ptr %offset_ptr.i.i154.i4573, align 4
  %1339 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1340 = load i32, ptr %315, align 4
  %1341 = icmp sgt i32 %1340, 0
  br i1 %1341, label %.lr.ph.i4580, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4700

.lr.ph.i4580:                                     ; preds = %1337
  %.fca.1.extract13.i3411 = extractvalue { ptr, i160 } %1334, 1
  %.sroa.576.8.extract.shift.i3413 = lshr i160 %.fca.1.extract13.i3411, 64
  %1342 = insertelement <2 x i160> poison, i160 %.sroa.576.8.extract.shift.i3413, i64 0
  %1343 = insertelement <2 x i160> %1342, i160 %.fca.1.extract13.i3411, i64 1
  %1344 = trunc <2 x i160> %1343 to <2 x i64>
  %1345 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i3408, 0
  %1346 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1347 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract11.i3408)
  %invariant.gep5026 = getelementptr i8, ptr %.fca.0.extract11.i3408, i64 64
  br label %1348

1348:                                             ; preds = %.cont.cont.i4633, %.lr.ph.i4580
  %1349 = phi ptr [ %.fca.0.extract11.i3408, %.lr.ph.i4580 ], [ %vptr.i248.sroa.speculated.i4636, %.cont.cont.i4633 ]
  %1350 = phi i32 [ %offset.i.i169.i4574, %.lr.ph.i4580 ], [ %offset.i.i260.i4650, %.cont.cont.i4633 ]
  %.reg2mem195.0678.i4581 = phi i32 [ 1, %.lr.ph.i4580 ], [ %1509, %.cont.cont.i4633 ]
  %.reg2mem193.0677.i4582 = phi i32 [ 0, %.lr.ph.i4580 ], [ %1514, %.cont.cont.i4633 ]
  %1351 = phi <2 x i64> [ %1344, %.lr.ph.i4580 ], [ %1513, %.cont.cont.i4633 ]
  %1352 = extractelement <2 x i64> %1351, i64 1
  %1353 = inttoptr i64 %1352 to ptr
  %1354 = extractelement <2 x i64> %1351, i64 0
  %1355 = inttoptr i64 %1354 to ptr
  %1356 = insertvalue { ptr, ptr, ptr, i32 } %1345, ptr %1353, 1
  %1357 = insertvalue { ptr, ptr, ptr, i32 } %1356, ptr %1355, 2
  %1358 = insertvalue { ptr, ptr, ptr, i32 } %1357, i32 %1350, 3
  %1359 = sext i32 %1350 to i64
  %gep5027 = getelementptr ptr, ptr %invariant.gep5026, i64 %1359
  %1360 = load ptr, ptr %gep5027, align 8
  %1361 = call ptr %1360({ ptr, ptr, ptr, i32 } %1358, ptr nonnull %2)
  %1362 = call i32 %1361({ ptr, ptr, ptr, i32 } %1358, { ptr, ptr, ptr, i32 } %1358, ptr nonnull %2)
  %1363 = icmp eq i32 %.reg2mem195.0678.i4581, 1
  %1364 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br i1 %1363, label %1365, label %1428

1365:                                             ; preds = %1348
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %1366 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1367 = load ptr, ptr %299, align 8
  %1368 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1367, 0
  %1369 = load ptr, ptr %300, align 8
  %1370 = insertvalue { ptr, ptr, ptr, i32 } %1368, ptr %1369, 1
  %1371 = load ptr, ptr %395, align 8
  %1372 = insertvalue { ptr, ptr, ptr, i32 } %1370, ptr %1371, 2
  %1373 = load i32, ptr %301, align 4
  %1374 = insertvalue { ptr, ptr, ptr, i32 } %1372, i32 %1373, 3
  %hash_coef_ptr.i.i10.i5371 = getelementptr i8, ptr %1367, i64 8
  %tbl_size_ptr.i.i11.i5372 = getelementptr i8, ptr %1367, i64 16
  %offset_tbl_ptr.i.i12.i5373 = getelementptr i8, ptr %1367, i64 40
  %hash_coef.i.i13.i5374 = load i64, ptr %hash_coef_ptr.i.i10.i5371, align 4
  %tbl_size.i.i14.i5375 = load i64, ptr %tbl_size_ptr.i.i11.i5372, align 4
  %offset_tbl.i.i15.i5376 = load ptr, ptr %offset_tbl_ptr.i.i12.i5373, align 8
  %product.i.i.i16.i5377 = mul i64 %hash_coef.i.i13.i5374, -5261542750394134544
  %shifted.i.i.i17.i5378 = lshr i64 %product.i.i.i16.i5377, 32
  %xored.i.i.i18.i5379 = xor i64 %shifted.i.i.i17.i5378, %product.i.i.i16.i5377
  %hash.i.i.i19.i5380 = and i64 %xored.i.i.i18.i5379, %tbl_size.i.i14.i5375
  %offset_ptr.i.i20.i5381 = getelementptr i32, ptr %offset_tbl.i.i15.i5376, i64 %hash.i.i.i19.i5380
  %offset.i.i21.i5382 = load i32, ptr %offset_ptr.i.i20.i5381, align 4
  %eq.i.i5383 = icmp eq i32 %1373, %offset.i.i21.i5382
  call void @llvm.assume(i1 %eq.i.i5383) #30
  %1375 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1376 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1367)
  %1377 = sext i32 %1373 to i64
  %1378 = getelementptr ptr, ptr %1367, i64 %1377
  %1379 = getelementptr i8, ptr %1378, i64 64
  %1380 = load ptr, ptr %1379, align 8
  %1381 = call ptr %1380({ ptr, ptr, ptr, i32 } %1374, ptr nonnull %2)
  %1382 = call i32 %1381({ ptr, ptr, ptr, i32 } %1374, { ptr, ptr, ptr, i32 } %1374, ptr nonnull %2)
  %1383 = add i32 %1382, -1
  %1384 = and i32 %1383, %1362
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %1385 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1386 = load ptr, ptr %299, align 8
  %1387 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1386, 0
  %1388 = load ptr, ptr %300, align 8
  %1389 = insertvalue { ptr, ptr, ptr, i32 } %1387, ptr %1388, 1
  %1390 = load ptr, ptr %395, align 8
  %1391 = insertvalue { ptr, ptr, ptr, i32 } %1389, ptr %1390, 2
  %1392 = load i32, ptr %301, align 4
  %1393 = insertvalue { ptr, ptr, ptr, i32 } %1391, i32 %1392, 3
  %hash_coef_ptr.i.i172.i4655 = getelementptr i8, ptr %1386, i64 8
  %tbl_size_ptr.i.i173.i4656 = getelementptr i8, ptr %1386, i64 16
  %offset_tbl_ptr.i.i174.i4657 = getelementptr i8, ptr %1386, i64 40
  %hash_coef.i.i175.i4658 = load i64, ptr %hash_coef_ptr.i.i172.i4655, align 4
  %tbl_size.i.i176.i4659 = load i64, ptr %tbl_size_ptr.i.i173.i4656, align 4
  %offset_tbl.i.i177.i4660 = load ptr, ptr %offset_tbl_ptr.i.i174.i4657, align 8
  %product.i.i.i178.i4661 = mul i64 %hash_coef.i.i175.i4658, -5261542750394134544
  %shifted.i.i.i179.i4662 = lshr i64 %product.i.i.i178.i4661, 32
  %xored.i.i.i180.i4663 = xor i64 %shifted.i.i.i179.i4662, %product.i.i.i178.i4661
  %hash.i.i.i181.i4664 = and i64 %xored.i.i.i180.i4663, %tbl_size.i.i176.i4659
  %offset_ptr.i.i182.i4665 = getelementptr i32, ptr %offset_tbl.i.i177.i4660, i64 %hash.i.i.i181.i4664
  %offset.i.i183.i4666 = load i32, ptr %offset_ptr.i.i182.i4665, align 4
  %eq.i.i4667 = icmp eq i32 %1392, %offset.i.i183.i4666
  call void @llvm.assume(i1 %eq.i.i4667) #30
  store ptr @_parameterization_Ptri32, ptr %35, align 8
  %1394 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %35)
  %1395 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1386)
  %1396 = sext i32 %1392 to i64
  %1397 = getelementptr ptr, ptr %1386, i64 %1396
  %1398 = getelementptr i8, ptr %1397, i64 120
  %1399 = load ptr, ptr %1398, align 8
  store ptr @i32_typ, ptr %36, align 8
  %1400 = call ptr %1399({ ptr, ptr, ptr, i32 } %1393, ptr nonnull %36)
  %1401 = call { ptr, i160 } %1400({ ptr, ptr, ptr, i32 } %1393, { ptr, ptr, ptr, i32 } %1393, ptr nonnull %35, i32 %1384)
  %.fca.0.extract112.i4668 = extractvalue { ptr, i160 } %1401, 0
  %1402 = insertvalue { ptr, i160 } undef, ptr %1349, 0
  %.sroa.3111.0.insert.ext.i4669 = zext i32 %1350 to i160
  %.sroa.3111.0.insert.shift.i4670 = shl nuw i160 %.sroa.3111.0.insert.ext.i4669, 128
  %.sroa.2110.0.insert.ext.i4671 = zext i64 %1354 to i160
  %.sroa.2110.0.insert.shift.i4672 = shl nuw nsw i160 %.sroa.2110.0.insert.ext.i4671, 64
  %.sroa.2110.0.insert.insert.i4673 = or disjoint i160 %.sroa.2110.0.insert.shift.i4672, %.sroa.3111.0.insert.shift.i4670
  %.sroa.0109.0.insert.ext.i4674 = zext i64 %1352 to i160
  %.sroa.0109.0.insert.insert.i4675 = or disjoint i160 %.sroa.2110.0.insert.insert.i4673, %.sroa.0109.0.insert.ext.i4674
  %1403 = insertvalue { ptr, i160 } %1402, i160 %.sroa.0109.0.insert.insert.i4675, 1
  %1404 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1405 = load ptr, ptr %299, align 8
  %1406 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1405, 0
  %1407 = load ptr, ptr %300, align 8
  %1408 = insertvalue { ptr, ptr, ptr, i32 } %1406, ptr %1407, 1
  %1409 = load ptr, ptr %395, align 8
  %1410 = insertvalue { ptr, ptr, ptr, i32 } %1408, ptr %1409, 2
  %1411 = load i32, ptr %301, align 4
  %1412 = insertvalue { ptr, ptr, ptr, i32 } %1410, i32 %1411, 3
  %hash_coef_ptr.i.i186.i4680 = getelementptr i8, ptr %1405, i64 8
  %tbl_size_ptr.i.i187.i4681 = getelementptr i8, ptr %1405, i64 16
  %offset_tbl_ptr.i.i188.i4682 = getelementptr i8, ptr %1405, i64 40
  %hash_coef.i.i189.i4683 = load i64, ptr %hash_coef_ptr.i.i186.i4680, align 4
  %tbl_size.i.i190.i4684 = load i64, ptr %tbl_size_ptr.i.i187.i4681, align 4
  %offset_tbl.i.i191.i4685 = load ptr, ptr %offset_tbl_ptr.i.i188.i4682, align 8
  %product.i.i.i192.i4686 = mul i64 %hash_coef.i.i189.i4683, -5261542750394134544
  %shifted.i.i.i193.i4687 = lshr i64 %product.i.i.i192.i4686, 32
  %xored.i.i.i194.i4688 = xor i64 %shifted.i.i.i193.i4687, %product.i.i.i192.i4686
  %hash.i.i.i195.i4689 = and i64 %xored.i.i.i194.i4688, %tbl_size.i.i190.i4684
  %offset_ptr.i.i196.i4690 = getelementptr i32, ptr %offset_tbl.i.i191.i4685, i64 %hash.i.i.i195.i4689
  %offset.i.i197.i4691 = load i32, ptr %offset_ptr.i.i196.i4690, align 4
  %eq.i200.i4692 = icmp eq i32 %1411, %offset.i.i197.i4691
  call void @llvm.assume(i1 %eq.i200.i4692) #30
  %1413 = load ptr, ptr %result.i, align 8
  %1414 = load ptr, ptr %282, align 8
  %result.i.i4693 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1415 = getelementptr i8, ptr %result.i.i4693, i64 16
  store ptr %1414, ptr %1415, align 8
  %1416 = getelementptr i8, ptr %result.i.i4693, i64 8
  store ptr %1413, ptr %1416, align 8
  %1417 = getelementptr i8, ptr %result.i.i4693, i64 24
  store ptr null, ptr %1417, align 8
  %1418 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i4693)
  store ptr @Entry, ptr %result.i.i4693, align 8
  store ptr @_parameterization_Ptri32, ptr %37, align 8
  store ptr %result.i.i4693, ptr %484, align 8
  %1419 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %37)
  %1420 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1405)
  %1421 = sext i32 %1411 to i64
  %1422 = getelementptr ptr, ptr %1405, i64 %1421
  %1423 = getelementptr i8, ptr %1422, i64 128
  %1424 = load ptr, ptr %1423, align 8
  store ptr @i32_typ, ptr %38, align 8
  store ptr %1349, ptr %485, align 8
  %1425 = call ptr %1424({ ptr, ptr, ptr, i32 } %1412, ptr nonnull %38)
  call void %1425({ ptr, ptr, ptr, i32 } %1412, { ptr, ptr, ptr, i32 } %1412, ptr nonnull %37, i32 %1384, { ptr, i160 } %1403)
  %1426 = icmp ne ptr %.fca.0.extract112.i4668, @nil_typ
  %1427 = icmp ne ptr %.fca.0.extract112.i4668, null
  %.not140.i4694 = and i1 %1426, %1427
  br i1 %.not140.i4694, label %.cont.cont.i4633, label %1517

1428:                                             ; preds = %1348
  %1429 = add i32 %1362, 2127912214
  %1430 = shl i32 %1362, 12
  %1431 = add i32 %1429, %1430
  %1432 = ashr i32 %1431, 19
  %1433 = xor i32 %1431, %1432
  %1434 = xor i32 %1433, -949894596
  %1435 = add i32 %1434, 374761393
  %1436 = shl i32 %1434, 5
  %1437 = add i32 %1435, %1436
  %1438 = add i32 %1437, -744332180
  %1439 = shl i32 %1437, 9
  %1440 = xor i32 %1438, %1439
  %1441 = add i32 %1440, -42973499
  %1442 = shl i32 %1440, 3
  %1443 = add i32 %1441, %1442
  %1444 = ashr i32 %1443, 16
  %1445 = xor i32 %1443, %1444
  %1446 = xor i32 %1445, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %1447 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1448 = load ptr, ptr %312, align 8
  %1449 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1448, 0
  %1450 = load ptr, ptr %313, align 8
  %1451 = insertvalue { ptr, ptr, ptr, i32 } %1449, ptr %1450, 1
  %1452 = load ptr, ptr %396, align 8
  %1453 = insertvalue { ptr, ptr, ptr, i32 } %1451, ptr %1452, 2
  %1454 = load i32, ptr %314, align 4
  %1455 = insertvalue { ptr, ptr, ptr, i32 } %1453, i32 %1454, 3
  %hash_coef_ptr.i.i10.i5401 = getelementptr i8, ptr %1448, i64 8
  %tbl_size_ptr.i.i11.i5402 = getelementptr i8, ptr %1448, i64 16
  %offset_tbl_ptr.i.i12.i5403 = getelementptr i8, ptr %1448, i64 40
  %hash_coef.i.i13.i5404 = load i64, ptr %hash_coef_ptr.i.i10.i5401, align 4
  %tbl_size.i.i14.i5405 = load i64, ptr %tbl_size_ptr.i.i11.i5402, align 4
  %offset_tbl.i.i15.i5406 = load ptr, ptr %offset_tbl_ptr.i.i12.i5403, align 8
  %product.i.i.i16.i5407 = mul i64 %hash_coef.i.i13.i5404, -5261542750394134544
  %shifted.i.i.i17.i5408 = lshr i64 %product.i.i.i16.i5407, 32
  %xored.i.i.i18.i5409 = xor i64 %shifted.i.i.i17.i5408, %product.i.i.i16.i5407
  %hash.i.i.i19.i5410 = and i64 %xored.i.i.i18.i5409, %tbl_size.i.i14.i5405
  %offset_ptr.i.i20.i5411 = getelementptr i32, ptr %offset_tbl.i.i15.i5406, i64 %hash.i.i.i19.i5410
  %offset.i.i21.i5412 = load i32, ptr %offset_ptr.i.i20.i5411, align 4
  %eq.i.i5413 = icmp eq i32 %1454, %offset.i.i21.i5412
  call void @llvm.assume(i1 %eq.i.i5413) #30
  %1456 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1457 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1448)
  %1458 = sext i32 %1454 to i64
  %1459 = getelementptr ptr, ptr %1448, i64 %1458
  %1460 = getelementptr i8, ptr %1459, i64 64
  %1461 = load ptr, ptr %1460, align 8
  %1462 = call ptr %1461({ ptr, ptr, ptr, i32 } %1455, ptr nonnull %2)
  %1463 = call i32 %1462({ ptr, ptr, ptr, i32 } %1455, { ptr, ptr, ptr, i32 } %1455, ptr nonnull %2)
  %1464 = add i32 %1463, -1
  %1465 = and i32 %1464, %1446
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %1466 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1467 = load ptr, ptr %312, align 8
  %1468 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1467, 0
  %1469 = load ptr, ptr %313, align 8
  %1470 = insertvalue { ptr, ptr, ptr, i32 } %1468, ptr %1469, 1
  %1471 = load ptr, ptr %396, align 8
  %1472 = insertvalue { ptr, ptr, ptr, i32 } %1470, ptr %1471, 2
  %1473 = load i32, ptr %314, align 4
  %1474 = insertvalue { ptr, ptr, ptr, i32 } %1472, i32 %1473, 3
  %hash_coef_ptr.i.i202.i4587 = getelementptr i8, ptr %1467, i64 8
  %tbl_size_ptr.i.i203.i4588 = getelementptr i8, ptr %1467, i64 16
  %offset_tbl_ptr.i.i204.i4589 = getelementptr i8, ptr %1467, i64 40
  %hash_coef.i.i205.i4590 = load i64, ptr %hash_coef_ptr.i.i202.i4587, align 4
  %tbl_size.i.i206.i4591 = load i64, ptr %tbl_size_ptr.i.i203.i4588, align 4
  %offset_tbl.i.i207.i4592 = load ptr, ptr %offset_tbl_ptr.i.i204.i4589, align 8
  %product.i.i.i208.i4593 = mul i64 %hash_coef.i.i205.i4590, -5261542750394134544
  %shifted.i.i.i209.i4594 = lshr i64 %product.i.i.i208.i4593, 32
  %xored.i.i.i210.i4595 = xor i64 %shifted.i.i.i209.i4594, %product.i.i.i208.i4593
  %hash.i.i.i211.i4596 = and i64 %xored.i.i.i210.i4595, %tbl_size.i.i206.i4591
  %offset_ptr.i.i212.i4597 = getelementptr i32, ptr %offset_tbl.i.i207.i4592, i64 %hash.i.i.i211.i4596
  %offset.i.i213.i4598 = load i32, ptr %offset_ptr.i.i212.i4597, align 4
  %eq.i216.i4599 = icmp eq i32 %1473, %offset.i.i213.i4598
  call void @llvm.assume(i1 %eq.i216.i4599) #30
  store ptr @_parameterization_Ptri32, ptr %43, align 8
  %1475 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %43)
  %1476 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1467)
  %1477 = sext i32 %1473 to i64
  %1478 = getelementptr ptr, ptr %1467, i64 %1477
  %1479 = getelementptr i8, ptr %1478, i64 120
  %1480 = load ptr, ptr %1479, align 8
  store ptr @i32_typ, ptr %44, align 8
  %1481 = call ptr %1480({ ptr, ptr, ptr, i32 } %1474, ptr nonnull %44)
  %1482 = call { ptr, i160 } %1481({ ptr, ptr, ptr, i32 } %1474, { ptr, ptr, ptr, i32 } %1474, ptr nonnull %43, i32 %1465)
  %.fca.0.extract87.i4600 = extractvalue { ptr, i160 } %1482, 0
  %1483 = insertvalue { ptr, i160 } undef, ptr %1349, 0
  %.sroa.3.0.insert.ext.i4601 = zext i32 %1350 to i160
  %.sroa.3.0.insert.shift.i4602 = shl nuw i160 %.sroa.3.0.insert.ext.i4601, 128
  %.sroa.2.0.insert.ext.i4603 = zext i64 %1354 to i160
  %.sroa.2.0.insert.shift.i4604 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i4603, 64
  %.sroa.2.0.insert.insert.i4605 = or disjoint i160 %.sroa.2.0.insert.shift.i4604, %.sroa.3.0.insert.shift.i4602
  %.sroa.0.0.insert.ext.i4606 = zext i64 %1352 to i160
  %.sroa.0.0.insert.insert.i4607 = or disjoint i160 %.sroa.2.0.insert.insert.i4605, %.sroa.0.0.insert.ext.i4606
  %1484 = insertvalue { ptr, i160 } %1483, i160 %.sroa.0.0.insert.insert.i4607, 1
  %1485 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1486 = load ptr, ptr %312, align 8
  %1487 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1486, 0
  %1488 = load ptr, ptr %313, align 8
  %1489 = insertvalue { ptr, ptr, ptr, i32 } %1487, ptr %1488, 1
  %1490 = load ptr, ptr %396, align 8
  %1491 = insertvalue { ptr, ptr, ptr, i32 } %1489, ptr %1490, 2
  %1492 = load i32, ptr %314, align 4
  %1493 = insertvalue { ptr, ptr, ptr, i32 } %1491, i32 %1492, 3
  %hash_coef_ptr.i.i218.i4612 = getelementptr i8, ptr %1486, i64 8
  %tbl_size_ptr.i.i219.i4613 = getelementptr i8, ptr %1486, i64 16
  %offset_tbl_ptr.i.i220.i4614 = getelementptr i8, ptr %1486, i64 40
  %hash_coef.i.i221.i4615 = load i64, ptr %hash_coef_ptr.i.i218.i4612, align 4
  %tbl_size.i.i222.i4616 = load i64, ptr %tbl_size_ptr.i.i219.i4613, align 4
  %offset_tbl.i.i223.i4617 = load ptr, ptr %offset_tbl_ptr.i.i220.i4614, align 8
  %product.i.i.i224.i4618 = mul i64 %hash_coef.i.i221.i4615, -5261542750394134544
  %shifted.i.i.i225.i4619 = lshr i64 %product.i.i.i224.i4618, 32
  %xored.i.i.i226.i4620 = xor i64 %shifted.i.i.i225.i4619, %product.i.i.i224.i4618
  %hash.i.i.i227.i4621 = and i64 %xored.i.i.i226.i4620, %tbl_size.i.i222.i4616
  %offset_ptr.i.i228.i4622 = getelementptr i32, ptr %offset_tbl.i.i223.i4617, i64 %hash.i.i.i227.i4621
  %offset.i.i229.i4623 = load i32, ptr %offset_ptr.i.i228.i4622, align 4
  %eq.i232.i4624 = icmp eq i32 %1492, %offset.i.i229.i4623
  call void @llvm.assume(i1 %eq.i232.i4624) #30
  %1494 = load ptr, ptr %result.i, align 8
  %1495 = load ptr, ptr %282, align 8
  %result.i233.i4625 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1496 = getelementptr i8, ptr %result.i233.i4625, i64 16
  store ptr %1495, ptr %1496, align 8
  %1497 = getelementptr i8, ptr %result.i233.i4625, i64 8
  store ptr %1494, ptr %1497, align 8
  %1498 = getelementptr i8, ptr %result.i233.i4625, i64 24
  store ptr null, ptr %1498, align 8
  %1499 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i233.i4625)
  store ptr @Entry, ptr %result.i233.i4625, align 8
  store ptr @_parameterization_Ptri32, ptr %45, align 8
  store ptr %result.i233.i4625, ptr %482, align 8
  %1500 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %45)
  %1501 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1486)
  %1502 = sext i32 %1492 to i64
  %1503 = getelementptr ptr, ptr %1486, i64 %1502
  %1504 = getelementptr i8, ptr %1503, i64 128
  %1505 = load ptr, ptr %1504, align 8
  store ptr @i32_typ, ptr %46, align 8
  store ptr %1349, ptr %483, align 8
  %1506 = call ptr %1505({ ptr, ptr, ptr, i32 } %1493, ptr nonnull %46)
  call void %1506({ ptr, ptr, ptr, i32 } %1493, { ptr, ptr, ptr, i32 } %1493, ptr nonnull %45, i32 %1465, { ptr, i160 } %1484)
  %1507 = icmp ne ptr %.fca.0.extract87.i4600, @nil_typ
  %1508 = icmp ne ptr %.fca.0.extract87.i4600, null
  %.not138.i4626 = and i1 %1507, %1508
  br i1 %.not138.i4626, label %.cont.cont.i4633, label %1517

.cont.cont.i4633:                                 ; preds = %1428, %1365
  %.sink5062 = phi { ptr, i160 } [ %1401, %1365 ], [ %1482, %1428 ]
  %1509 = phi i32 [ 2, %1365 ], [ 1, %1428 ]
  %vptr.i248.sroa.speculated.i4636 = phi ptr [ %.fca.0.extract112.i4668, %1365 ], [ %.fca.0.extract87.i4600, %1428 ]
  %.fca.1.extract89.i4629 = extractvalue { ptr, i160 } %.sink5062, 1
  %.sroa.3407.sroa.4.0.extract.shift.i4630 = lshr i160 %.fca.1.extract89.i4629, 64
  %1510 = trunc i160 %.sroa.3407.sroa.4.0.extract.shift.i4630 to i64
  %1511 = insertelement <2 x i64> poison, i64 %1510, i64 0
  %1512 = trunc i160 %.fca.1.extract89.i4629 to i64
  %1513 = insertelement <2 x i64> %1511, i64 %1512, i64 1
  %hash_coef_ptr.i.i249.i4639 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i4636, i64 8
  %tbl_size_ptr.i.i250.i4640 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i4636, i64 16
  %offset_tbl_ptr.i.i251.i4641 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i4636, i64 40
  %hash_coef.i.i252.i4642 = load i64, ptr %hash_coef_ptr.i.i249.i4639, align 4
  %tbl_size.i.i253.i4643 = load i64, ptr %tbl_size_ptr.i.i250.i4640, align 4
  %offset_tbl.i.i254.i4644 = load ptr, ptr %offset_tbl_ptr.i.i251.i4641, align 8
  %product.i.i.i255.i4645 = mul i64 %hash_coef.i.i252.i4642, 4015701072841558310
  %shifted.i.i.i256.i4646 = lshr i64 %product.i.i.i255.i4645, 32
  %xored.i.i.i257.i4647 = xor i64 %shifted.i.i.i256.i4646, %product.i.i.i255.i4645
  %hash.i.i.i258.i4648 = and i64 %xored.i.i.i257.i4647, %tbl_size.i.i253.i4643
  %offset_ptr.i.i259.i4649 = getelementptr i32, ptr %offset_tbl.i.i254.i4644, i64 %hash.i.i.i258.i4648
  %offset.i.i260.i4650 = load i32, ptr %offset_ptr.i.i259.i4649, align 4
  %1514 = add nuw nsw i32 %.reg2mem193.0677.i4582, 1
  %1515 = load i32, ptr %315, align 4
  %1516 = icmp slt i32 %1514, %1515
  br i1 %1516, label %1348, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4700

1517:                                             ; preds = %1428, %1365
  %1518 = phi ptr [ %47, %1428 ], [ %39, %1365 ]
  %1519 = phi ptr [ %48, %1428 ], [ %40, %1365 ]
  %1520 = phi ptr [ %49, %1428 ], [ %41, %1365 ]
  %1521 = phi ptr [ %.sroa.0.i4547, %1428 ], [ %.sroa.0680.i4545, %1365 ]
  %1522 = phi ptr [ %50, %1428 ], [ %42, %1365 ]
  %1523 = load i32, ptr %397, align 4
  store i32 %1523, ptr %1518, align 4
  store i32 1, ptr %1519, align 4
  %1524 = add i32 %1523, 1
  store i32 %1524, ptr %1520, align 4
  %1525 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  store i32 %1524, ptr %397, align 4
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %1522, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %1521, align 8
  br label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4700

HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4700: ; preds = %.cont.cont.i4633, %1337, %1517
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %35)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %36)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %37)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %38)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %39)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %40)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %41)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i4545)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %42)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %43)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %44)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %45)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %46)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %47)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %48)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %49)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i4547)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %50)
  br label %._crit_edge1.i3410

._crit_edge1.i3410:                               ; preds = %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4700, %1329
  %1526 = add nuw nsw i32 %.reg2mem13.079.i3407, 1
  %1527 = icmp slt i32 %1526, %1085
  br i1 %1527, label %1329, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3428

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3428.critedge: ; preds = %1061
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %141)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %142)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %139)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %140)
  br label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3428

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3428: ; preds = %._crit_edge1.i3410, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3428.critedge
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %139)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %140)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %192)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %193)
  br label %._crit_edge2.i1019

._crit_edge2.i1019:                               ; preds = %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3428, %.critedge158.i1000
  %1528 = load ptr, ptr %result.i, align 8
  %1529 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1530 = load ptr, ptr %282, align 8
  %1531 = load ptr, ptr %1528, align 8
  %1532 = getelementptr i8, ptr %1531, i64 48
  %1533 = load ptr, ptr %1532, align 8
  %1534 = call { i64, i64 } %1533(ptr nonnull %1528)
  %1535 = extractvalue { i64, i64 } %1534, 0
  %1536 = extractvalue { i64, i64 } %1534, 1
  %1537 = urem i64 20, %1536
  %1538 = icmp eq i64 %1537, 0
  %1539 = sub i64 %1536, %1537
  %1540 = select i1 %1538, i64 0, i64 %1539
  %1541 = add i64 %1535, 20
  %1542 = add i64 %1541, %1540
  %1543 = load ptr, ptr %1530, align 8
  %1544 = getelementptr i8, ptr %1543, i64 48
  %1545 = load ptr, ptr %1544, align 8
  %1546 = call { i64, i64 } %1545(ptr nonnull %1530)
  %1547 = extractvalue { i64, i64 } %1546, 0
  %1548 = extractvalue { i64, i64 } %1546, 1
  %1549 = call i64 @llvm.umax.i64(i64 %1536, i64 %1548)
  %1550 = call i64 @llvm.umax.i64(i64 %1549, i64 8)
  %1551 = urem i64 %1542, %1548
  %1552 = icmp eq i64 %1551, 0
  %1553 = sub i64 %1548, %1551
  %1554 = select i1 %1552, i64 0, i64 %1553
  %1555 = add i64 %1547, %1542
  %1556 = add i64 %1555, %1554
  %1557 = urem i64 %1556, %1550
  %1558 = icmp eq i64 %1557, 0
  %1559 = sub i64 %1550, %1557
  %1560 = select i1 %1558, i64 0, i64 %1559
  %1561 = add i64 %1560, %1556
  %result.i296.i1020 = call noalias ptr @bump_malloc_inner(i64 noundef %1561, ptr nonnull @current_ptr) #29
  store ptr %1528, ptr %result.i296.i1020, align 8
  %1562 = getelementptr i8, ptr %result.i296.i1020, i64 8
  store ptr %1530, ptr %1562, align 8
  %1563 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i296.i1020)
  store ptr @Entry, ptr %253, align 8
  store ptr %result.i296.i1020, ptr %382, align 8
  store i32 9, ptr %383, align 8
  %1564 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %253)
  %1565 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1566 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %1567 = load ptr, ptr %1528, align 8
  %1568 = getelementptr i8, ptr %1567, i64 48
  %1569 = load ptr, ptr %1568, align 8
  %1570 = call { i64, i64 } %1569(ptr nonnull %1528)
  %1571 = extractvalue { i64, i64 } %1570, 1
  %1572 = urem i64 20, %1571
  %1573 = icmp eq i64 %1572, 0
  %reass.sub5558 = sub i64 %1571, %1572
  %1574 = add i64 %reass.sub5558, 20
  %1575 = select i1 %1573, i64 20, i64 %1574
  %1576 = getelementptr i8, ptr %result.i296.i1020, i64 %1575
  %1577 = load ptr, ptr %result.i296.i1020, align 8
  %1578 = load ptr, ptr %1577, align 8
  %1579 = getelementptr i8, ptr %1578, i64 64
  %1580 = load ptr, ptr %1579, align 8
  call void %1580({ ptr, i160 } %500, ptr nonnull %1577, ptr %1576)
  %1581 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %1582 = load ptr, ptr %result.i296.i1020, align 8
  %1583 = load ptr, ptr %1582, align 8
  %1584 = getelementptr i8, ptr %1583, i64 48
  %1585 = load ptr, ptr %1584, align 8
  %1586 = call { i64, i64 } %1585(ptr nonnull %1582)
  %1587 = extractvalue { i64, i64 } %1586, 0
  %1588 = extractvalue { i64, i64 } %1586, 1
  %1589 = urem i64 20, %1588
  %1590 = icmp eq i64 %1589, 0
  %1591 = sub i64 %1588, %1589
  %1592 = select i1 %1590, i64 0, i64 %1591
  %1593 = add i64 %1587, 20
  %1594 = add i64 %1593, %1592
  %1595 = load ptr, ptr %1562, align 8
  %1596 = load ptr, ptr %1595, align 8
  %1597 = getelementptr i8, ptr %1596, i64 48
  %1598 = load ptr, ptr %1597, align 8
  %1599 = call { i64, i64 } %1598(ptr nonnull %1595)
  %1600 = extractvalue { i64, i64 } %1599, 1
  %1601 = urem i64 %1594, %1600
  %1602 = icmp eq i64 %1601, 0
  %1603 = sub i64 %1600, %1601
  %1604 = select i1 %1602, i64 0, i64 %1603
  %1605 = getelementptr i8, ptr %result.i296.i1020, i64 %1594
  %1606 = getelementptr i8, ptr %1605, i64 %1604
  %1607 = load ptr, ptr %1562, align 8
  %1608 = load ptr, ptr %1607, align 8
  %1609 = getelementptr i8, ptr %1608, i64 64
  %1610 = load ptr, ptr %1609, align 8
  call void %1610({ ptr, i160 } %667, ptr nonnull %1607, ptr %1606)
  %1611 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %1612 = getelementptr i8, ptr %result.i296.i1020, i64 16
  store i32 %670, ptr %1612, align 4
  %1613 = load ptr, ptr %384, align 8
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %175)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %176)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %177)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %178)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %179)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %180)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %181)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0680.i2188)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %182)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %183)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %184)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %185)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %186)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %187)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %188)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %189)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i2189)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %190)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %191)
  store ptr @Entry, ptr %191, align 8
  store ptr %result.i296.i1020, ptr %433, align 8
  store ptr %1613, ptr %434, align 8
  store i32 9, ptr %435, align 8
  %1614 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %191)
  %1615 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1616 = load i32, ptr %315, align 4
  %1617 = icmp sgt i32 %1616, 0
  br i1 %1617, label %.lr.ph.i2218, label %._crit_edge3.i1025

.lr.ph.i2218:                                     ; preds = %._crit_edge2.i1019
  %1618 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1619 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  br label %1620

1620:                                             ; preds = %.cont.cont.i2265, %.lr.ph.i2218
  %offset.i.i260.i22802907 = phi i32 [ 9, %.lr.ph.i2218 ], [ %offset.i.i260.i2280, %.cont.cont.i2265 ]
  %.sroa.speculated346.i22682905 = phi ptr [ %1613, %.lr.ph.i2218 ], [ %.sroa.speculated346.i2268, %.cont.cont.i2265 ]
  %.sroa.speculated352.i22672903 = phi ptr [ %result.i296.i1020, %.lr.ph.i2218 ], [ %.sroa.speculated352.i2267, %.cont.cont.i2265 ]
  %.reg2mem195.0678.i2219 = phi i32 [ 1, %.lr.ph.i2218 ], [ %1776, %.cont.cont.i2265 ]
  %.reg2mem193.0677.i2220 = phi i32 [ 0, %.lr.ph.i2218 ], [ %1777, %.cont.cont.i2265 ]
  %1621 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Entry, ptr undef, ptr undef, i32 undef }, ptr %.sroa.speculated352.i22672903, 1
  %1622 = insertvalue { ptr, ptr, ptr, i32 } %1621, ptr %.sroa.speculated346.i22682905, 2
  %1623 = insertvalue { ptr, ptr, ptr, i32 } %1622, i32 %offset.i.i260.i22802907, 3
  %1624 = sext i32 %offset.i.i260.i22802907 to i64
  %gep2902 = getelementptr ptr, ptr getelementptr inbounds (i8, ptr @Entry, i64 64), i64 %1624
  %1625 = load ptr, ptr %gep2902, align 8
  %1626 = call ptr %1625({ ptr, ptr, ptr, i32 } %1623, ptr nonnull %2)
  %1627 = call i32 %1626({ ptr, ptr, ptr, i32 } %1623, { ptr, ptr, ptr, i32 } %1623, ptr nonnull %2)
  %1628 = icmp eq i32 %.reg2mem195.0678.i2219, 1
  %1629 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br i1 %1628, label %1630, label %1694

1630:                                             ; preds = %1620
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %1631 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1632 = load ptr, ptr %299, align 8
  %1633 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1632, 0
  %1634 = load ptr, ptr %300, align 8
  %1635 = insertvalue { ptr, ptr, ptr, i32 } %1633, ptr %1634, 1
  %1636 = load ptr, ptr %395, align 8
  %1637 = insertvalue { ptr, ptr, ptr, i32 } %1635, ptr %1636, 2
  %1638 = load i32, ptr %301, align 4
  %1639 = insertvalue { ptr, ptr, ptr, i32 } %1637, i32 %1638, 3
  %hash_coef_ptr.i.i10.i3444 = getelementptr i8, ptr %1632, i64 8
  %tbl_size_ptr.i.i11.i3445 = getelementptr i8, ptr %1632, i64 16
  %offset_tbl_ptr.i.i12.i3446 = getelementptr i8, ptr %1632, i64 40
  %hash_coef.i.i13.i3447 = load i64, ptr %hash_coef_ptr.i.i10.i3444, align 4
  %tbl_size.i.i14.i3448 = load i64, ptr %tbl_size_ptr.i.i11.i3445, align 4
  %offset_tbl.i.i15.i3449 = load ptr, ptr %offset_tbl_ptr.i.i12.i3446, align 8
  %product.i.i.i16.i3450 = mul i64 %hash_coef.i.i13.i3447, -5261542750394134544
  %shifted.i.i.i17.i3451 = lshr i64 %product.i.i.i16.i3450, 32
  %xored.i.i.i18.i3452 = xor i64 %shifted.i.i.i17.i3451, %product.i.i.i16.i3450
  %hash.i.i.i19.i3453 = and i64 %xored.i.i.i18.i3452, %tbl_size.i.i14.i3448
  %offset_ptr.i.i20.i3454 = getelementptr i32, ptr %offset_tbl.i.i15.i3449, i64 %hash.i.i.i19.i3453
  %offset.i.i21.i3455 = load i32, ptr %offset_ptr.i.i20.i3454, align 4
  %eq.i.i3456 = icmp eq i32 %1638, %offset.i.i21.i3455
  call void @llvm.assume(i1 %eq.i.i3456) #30
  %1640 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1641 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1632)
  %1642 = sext i32 %1638 to i64
  %1643 = getelementptr ptr, ptr %1632, i64 %1642
  %1644 = getelementptr i8, ptr %1643, i64 64
  %1645 = load ptr, ptr %1644, align 8
  %1646 = call ptr %1645({ ptr, ptr, ptr, i32 } %1639, ptr nonnull %2)
  %1647 = call i32 %1646({ ptr, ptr, ptr, i32 } %1639, { ptr, ptr, ptr, i32 } %1639, ptr nonnull %2)
  %1648 = add i32 %1647, -1
  %1649 = and i32 %1648, %1627
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %1650 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1651 = load ptr, ptr %299, align 8
  %1652 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1651, 0
  %1653 = load ptr, ptr %300, align 8
  %1654 = insertvalue { ptr, ptr, ptr, i32 } %1652, ptr %1653, 1
  %1655 = load ptr, ptr %395, align 8
  %1656 = insertvalue { ptr, ptr, ptr, i32 } %1654, ptr %1655, 2
  %1657 = load i32, ptr %301, align 4
  %1658 = insertvalue { ptr, ptr, ptr, i32 } %1656, i32 %1657, 3
  %hash_coef_ptr.i.i172.i2285 = getelementptr i8, ptr %1651, i64 8
  %tbl_size_ptr.i.i173.i2286 = getelementptr i8, ptr %1651, i64 16
  %offset_tbl_ptr.i.i174.i2287 = getelementptr i8, ptr %1651, i64 40
  %hash_coef.i.i175.i2288 = load i64, ptr %hash_coef_ptr.i.i172.i2285, align 4
  %tbl_size.i.i176.i2289 = load i64, ptr %tbl_size_ptr.i.i173.i2286, align 4
  %offset_tbl.i.i177.i2290 = load ptr, ptr %offset_tbl_ptr.i.i174.i2287, align 8
  %product.i.i.i178.i2291 = mul i64 %hash_coef.i.i175.i2288, -5261542750394134544
  %shifted.i.i.i179.i2292 = lshr i64 %product.i.i.i178.i2291, 32
  %xored.i.i.i180.i2293 = xor i64 %shifted.i.i.i179.i2292, %product.i.i.i178.i2291
  %hash.i.i.i181.i2294 = and i64 %xored.i.i.i180.i2293, %tbl_size.i.i176.i2289
  %offset_ptr.i.i182.i2295 = getelementptr i32, ptr %offset_tbl.i.i177.i2290, i64 %hash.i.i.i181.i2294
  %offset.i.i183.i2296 = load i32, ptr %offset_ptr.i.i182.i2295, align 4
  %eq.i.i2297 = icmp eq i32 %1657, %offset.i.i183.i2296
  call void @llvm.assume(i1 %eq.i.i2297) #30
  store ptr @_parameterization_Ptri32, ptr %175, align 8
  %1659 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %175)
  %1660 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1651)
  %1661 = sext i32 %1657 to i64
  %1662 = getelementptr ptr, ptr %1651, i64 %1661
  %1663 = getelementptr i8, ptr %1662, i64 120
  %1664 = load ptr, ptr %1663, align 8
  store ptr @i32_typ, ptr %176, align 8
  %1665 = call ptr %1664({ ptr, ptr, ptr, i32 } %1658, ptr nonnull %176)
  %1666 = call { ptr, i160 } %1665({ ptr, ptr, ptr, i32 } %1658, { ptr, ptr, ptr, i32 } %1658, ptr nonnull %175, i32 %1649)
  %.fca.0.extract112.i2298 = extractvalue { ptr, i160 } %1666, 0
  %1667 = ptrtoint ptr %.sroa.speculated352.i22672903 to i64
  %1668 = ptrtoint ptr %.sroa.speculated346.i22682905 to i64
  %.sroa.3111.0.insert.ext.i2299 = zext i32 %offset.i.i260.i22802907 to i160
  %.sroa.3111.0.insert.shift.i2300 = shl nuw i160 %.sroa.3111.0.insert.ext.i2299, 128
  %.sroa.2110.0.insert.ext.i2301 = zext i64 %1668 to i160
  %.sroa.2110.0.insert.shift.i2302 = shl nuw nsw i160 %.sroa.2110.0.insert.ext.i2301, 64
  %.sroa.2110.0.insert.insert.i2303 = or disjoint i160 %.sroa.2110.0.insert.shift.i2302, %.sroa.3111.0.insert.shift.i2300
  %.sroa.0109.0.insert.ext.i2304 = zext i64 %1667 to i160
  %.sroa.0109.0.insert.insert.i2305 = or disjoint i160 %.sroa.2110.0.insert.insert.i2303, %.sroa.0109.0.insert.ext.i2304
  %1669 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0109.0.insert.insert.i2305, 1
  %1670 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1671 = load ptr, ptr %299, align 8
  %1672 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1671, 0
  %1673 = load ptr, ptr %300, align 8
  %1674 = insertvalue { ptr, ptr, ptr, i32 } %1672, ptr %1673, 1
  %1675 = load ptr, ptr %395, align 8
  %1676 = insertvalue { ptr, ptr, ptr, i32 } %1674, ptr %1675, 2
  %1677 = load i32, ptr %301, align 4
  %1678 = insertvalue { ptr, ptr, ptr, i32 } %1676, i32 %1677, 3
  %hash_coef_ptr.i.i186.i2310 = getelementptr i8, ptr %1671, i64 8
  %tbl_size_ptr.i.i187.i2311 = getelementptr i8, ptr %1671, i64 16
  %offset_tbl_ptr.i.i188.i2312 = getelementptr i8, ptr %1671, i64 40
  %hash_coef.i.i189.i2313 = load i64, ptr %hash_coef_ptr.i.i186.i2310, align 4
  %tbl_size.i.i190.i2314 = load i64, ptr %tbl_size_ptr.i.i187.i2311, align 4
  %offset_tbl.i.i191.i2315 = load ptr, ptr %offset_tbl_ptr.i.i188.i2312, align 8
  %product.i.i.i192.i2316 = mul i64 %hash_coef.i.i189.i2313, -5261542750394134544
  %shifted.i.i.i193.i2317 = lshr i64 %product.i.i.i192.i2316, 32
  %xored.i.i.i194.i2318 = xor i64 %shifted.i.i.i193.i2317, %product.i.i.i192.i2316
  %hash.i.i.i195.i2319 = and i64 %xored.i.i.i194.i2318, %tbl_size.i.i190.i2314
  %offset_ptr.i.i196.i2320 = getelementptr i32, ptr %offset_tbl.i.i191.i2315, i64 %hash.i.i.i195.i2319
  %offset.i.i197.i2321 = load i32, ptr %offset_ptr.i.i196.i2320, align 4
  %eq.i200.i2322 = icmp eq i32 %1677, %offset.i.i197.i2321
  call void @llvm.assume(i1 %eq.i200.i2322) #30
  %1679 = load ptr, ptr %result.i, align 8
  %1680 = load ptr, ptr %282, align 8
  %result.i.i2323 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1681 = getelementptr i8, ptr %result.i.i2323, i64 16
  store ptr %1680, ptr %1681, align 8
  %1682 = getelementptr i8, ptr %result.i.i2323, i64 8
  store ptr %1679, ptr %1682, align 8
  %1683 = getelementptr i8, ptr %result.i.i2323, i64 24
  store ptr null, ptr %1683, align 8
  %1684 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i2323)
  store ptr @Entry, ptr %result.i.i2323, align 8
  store ptr @_parameterization_Ptri32, ptr %177, align 8
  store ptr %result.i.i2323, ptr %438, align 8
  %1685 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %177)
  %1686 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1671)
  %1687 = sext i32 %1677 to i64
  %1688 = getelementptr ptr, ptr %1671, i64 %1687
  %1689 = getelementptr i8, ptr %1688, i64 128
  %1690 = load ptr, ptr %1689, align 8
  store ptr @i32_typ, ptr %178, align 8
  store ptr @Entry, ptr %439, align 8
  %1691 = call ptr %1690({ ptr, ptr, ptr, i32 } %1678, ptr nonnull %178)
  call void %1691({ ptr, ptr, ptr, i32 } %1678, { ptr, ptr, ptr, i32 } %1678, ptr nonnull %177, i32 %1649, { ptr, i160 } %1669)
  %1692 = icmp ne ptr %.fca.0.extract112.i2298, @nil_typ
  %1693 = icmp ne ptr %.fca.0.extract112.i2298, null
  %.not140.i2324 = and i1 %1692, %1693
  br i1 %.not140.i2324, label %.cont.cont.i2265, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit.thread2885

1694:                                             ; preds = %1620
  %1695 = add i32 %1627, 2127912214
  %1696 = shl i32 %1627, 12
  %1697 = add i32 %1695, %1696
  %1698 = ashr i32 %1697, 19
  %1699 = xor i32 %1697, %1698
  %1700 = xor i32 %1699, -949894596
  %1701 = add i32 %1700, 374761393
  %1702 = shl i32 %1700, 5
  %1703 = add i32 %1701, %1702
  %1704 = add i32 %1703, -744332180
  %1705 = shl i32 %1703, 9
  %1706 = xor i32 %1704, %1705
  %1707 = add i32 %1706, -42973499
  %1708 = shl i32 %1706, 3
  %1709 = add i32 %1707, %1708
  %1710 = ashr i32 %1709, 16
  %1711 = xor i32 %1709, %1710
  %1712 = xor i32 %1711, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %1713 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1714 = load ptr, ptr %312, align 8
  %1715 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1714, 0
  %1716 = load ptr, ptr %313, align 8
  %1717 = insertvalue { ptr, ptr, ptr, i32 } %1715, ptr %1716, 1
  %1718 = load ptr, ptr %396, align 8
  %1719 = insertvalue { ptr, ptr, ptr, i32 } %1717, ptr %1718, 2
  %1720 = load i32, ptr %314, align 4
  %1721 = insertvalue { ptr, ptr, ptr, i32 } %1719, i32 %1720, 3
  %hash_coef_ptr.i.i10.i3474 = getelementptr i8, ptr %1714, i64 8
  %tbl_size_ptr.i.i11.i3475 = getelementptr i8, ptr %1714, i64 16
  %offset_tbl_ptr.i.i12.i3476 = getelementptr i8, ptr %1714, i64 40
  %hash_coef.i.i13.i3477 = load i64, ptr %hash_coef_ptr.i.i10.i3474, align 4
  %tbl_size.i.i14.i3478 = load i64, ptr %tbl_size_ptr.i.i11.i3475, align 4
  %offset_tbl.i.i15.i3479 = load ptr, ptr %offset_tbl_ptr.i.i12.i3476, align 8
  %product.i.i.i16.i3480 = mul i64 %hash_coef.i.i13.i3477, -5261542750394134544
  %shifted.i.i.i17.i3481 = lshr i64 %product.i.i.i16.i3480, 32
  %xored.i.i.i18.i3482 = xor i64 %shifted.i.i.i17.i3481, %product.i.i.i16.i3480
  %hash.i.i.i19.i3483 = and i64 %xored.i.i.i18.i3482, %tbl_size.i.i14.i3478
  %offset_ptr.i.i20.i3484 = getelementptr i32, ptr %offset_tbl.i.i15.i3479, i64 %hash.i.i.i19.i3483
  %offset.i.i21.i3485 = load i32, ptr %offset_ptr.i.i20.i3484, align 4
  %eq.i.i3486 = icmp eq i32 %1720, %offset.i.i21.i3485
  call void @llvm.assume(i1 %eq.i.i3486) #30
  %1722 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1723 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1714)
  %1724 = sext i32 %1720 to i64
  %1725 = getelementptr ptr, ptr %1714, i64 %1724
  %1726 = getelementptr i8, ptr %1725, i64 64
  %1727 = load ptr, ptr %1726, align 8
  %1728 = call ptr %1727({ ptr, ptr, ptr, i32 } %1721, ptr nonnull %2)
  %1729 = call i32 %1728({ ptr, ptr, ptr, i32 } %1721, { ptr, ptr, ptr, i32 } %1721, ptr nonnull %2)
  %1730 = add i32 %1729, -1
  %1731 = and i32 %1730, %1712
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %1732 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1733 = load ptr, ptr %312, align 8
  %1734 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1733, 0
  %1735 = load ptr, ptr %313, align 8
  %1736 = insertvalue { ptr, ptr, ptr, i32 } %1734, ptr %1735, 1
  %1737 = load ptr, ptr %396, align 8
  %1738 = insertvalue { ptr, ptr, ptr, i32 } %1736, ptr %1737, 2
  %1739 = load i32, ptr %314, align 4
  %1740 = insertvalue { ptr, ptr, ptr, i32 } %1738, i32 %1739, 3
  %hash_coef_ptr.i.i202.i2221 = getelementptr i8, ptr %1733, i64 8
  %tbl_size_ptr.i.i203.i2222 = getelementptr i8, ptr %1733, i64 16
  %offset_tbl_ptr.i.i204.i2223 = getelementptr i8, ptr %1733, i64 40
  %hash_coef.i.i205.i2224 = load i64, ptr %hash_coef_ptr.i.i202.i2221, align 4
  %tbl_size.i.i206.i2225 = load i64, ptr %tbl_size_ptr.i.i203.i2222, align 4
  %offset_tbl.i.i207.i2226 = load ptr, ptr %offset_tbl_ptr.i.i204.i2223, align 8
  %product.i.i.i208.i2227 = mul i64 %hash_coef.i.i205.i2224, -5261542750394134544
  %shifted.i.i.i209.i2228 = lshr i64 %product.i.i.i208.i2227, 32
  %xored.i.i.i210.i2229 = xor i64 %shifted.i.i.i209.i2228, %product.i.i.i208.i2227
  %hash.i.i.i211.i2230 = and i64 %xored.i.i.i210.i2229, %tbl_size.i.i206.i2225
  %offset_ptr.i.i212.i2231 = getelementptr i32, ptr %offset_tbl.i.i207.i2226, i64 %hash.i.i.i211.i2230
  %offset.i.i213.i2232 = load i32, ptr %offset_ptr.i.i212.i2231, align 4
  %eq.i216.i2233 = icmp eq i32 %1739, %offset.i.i213.i2232
  call void @llvm.assume(i1 %eq.i216.i2233) #30
  store ptr @_parameterization_Ptri32, ptr %183, align 8
  %1741 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %183)
  %1742 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1733)
  %1743 = sext i32 %1739 to i64
  %1744 = getelementptr ptr, ptr %1733, i64 %1743
  %1745 = getelementptr i8, ptr %1744, i64 120
  %1746 = load ptr, ptr %1745, align 8
  store ptr @i32_typ, ptr %184, align 8
  %1747 = call ptr %1746({ ptr, ptr, ptr, i32 } %1740, ptr nonnull %184)
  %1748 = call { ptr, i160 } %1747({ ptr, ptr, ptr, i32 } %1740, { ptr, ptr, ptr, i32 } %1740, ptr nonnull %183, i32 %1731)
  %.fca.0.extract87.i2234 = extractvalue { ptr, i160 } %1748, 0
  %1749 = ptrtoint ptr %.sroa.speculated352.i22672903 to i64
  %1750 = ptrtoint ptr %.sroa.speculated346.i22682905 to i64
  %.sroa.3.0.insert.ext.i2235 = zext i32 %offset.i.i260.i22802907 to i160
  %.sroa.3.0.insert.shift.i2236 = shl nuw i160 %.sroa.3.0.insert.ext.i2235, 128
  %.sroa.2.0.insert.ext.i2237 = zext i64 %1750 to i160
  %.sroa.2.0.insert.shift.i2238 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i2237, 64
  %.sroa.2.0.insert.insert.i2239 = or disjoint i160 %.sroa.2.0.insert.shift.i2238, %.sroa.3.0.insert.shift.i2236
  %.sroa.0.0.insert.ext.i2240 = zext i64 %1749 to i160
  %.sroa.0.0.insert.insert.i2241 = or disjoint i160 %.sroa.2.0.insert.insert.i2239, %.sroa.0.0.insert.ext.i2240
  %1751 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0.0.insert.insert.i2241, 1
  %1752 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1753 = load ptr, ptr %312, align 8
  %1754 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1753, 0
  %1755 = load ptr, ptr %313, align 8
  %1756 = insertvalue { ptr, ptr, ptr, i32 } %1754, ptr %1755, 1
  %1757 = load ptr, ptr %396, align 8
  %1758 = insertvalue { ptr, ptr, ptr, i32 } %1756, ptr %1757, 2
  %1759 = load i32, ptr %314, align 4
  %1760 = insertvalue { ptr, ptr, ptr, i32 } %1758, i32 %1759, 3
  %hash_coef_ptr.i.i218.i2246 = getelementptr i8, ptr %1753, i64 8
  %tbl_size_ptr.i.i219.i2247 = getelementptr i8, ptr %1753, i64 16
  %offset_tbl_ptr.i.i220.i2248 = getelementptr i8, ptr %1753, i64 40
  %hash_coef.i.i221.i2249 = load i64, ptr %hash_coef_ptr.i.i218.i2246, align 4
  %tbl_size.i.i222.i2250 = load i64, ptr %tbl_size_ptr.i.i219.i2247, align 4
  %offset_tbl.i.i223.i2251 = load ptr, ptr %offset_tbl_ptr.i.i220.i2248, align 8
  %product.i.i.i224.i2252 = mul i64 %hash_coef.i.i221.i2249, -5261542750394134544
  %shifted.i.i.i225.i2253 = lshr i64 %product.i.i.i224.i2252, 32
  %xored.i.i.i226.i2254 = xor i64 %shifted.i.i.i225.i2253, %product.i.i.i224.i2252
  %hash.i.i.i227.i2255 = and i64 %xored.i.i.i226.i2254, %tbl_size.i.i222.i2250
  %offset_ptr.i.i228.i2256 = getelementptr i32, ptr %offset_tbl.i.i223.i2251, i64 %hash.i.i.i227.i2255
  %offset.i.i229.i2257 = load i32, ptr %offset_ptr.i.i228.i2256, align 4
  %eq.i232.i2258 = icmp eq i32 %1759, %offset.i.i229.i2257
  call void @llvm.assume(i1 %eq.i232.i2258) #30
  %1761 = load ptr, ptr %result.i, align 8
  %1762 = load ptr, ptr %282, align 8
  %result.i233.i2259 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1763 = getelementptr i8, ptr %result.i233.i2259, i64 16
  store ptr %1762, ptr %1763, align 8
  %1764 = getelementptr i8, ptr %result.i233.i2259, i64 8
  store ptr %1761, ptr %1764, align 8
  %1765 = getelementptr i8, ptr %result.i233.i2259, i64 24
  store ptr null, ptr %1765, align 8
  %1766 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i233.i2259)
  store ptr @Entry, ptr %result.i233.i2259, align 8
  store ptr @_parameterization_Ptri32, ptr %185, align 8
  store ptr %result.i233.i2259, ptr %436, align 8
  %1767 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %185)
  %1768 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1753)
  %1769 = sext i32 %1759 to i64
  %1770 = getelementptr ptr, ptr %1753, i64 %1769
  %1771 = getelementptr i8, ptr %1770, i64 128
  %1772 = load ptr, ptr %1771, align 8
  store ptr @i32_typ, ptr %186, align 8
  store ptr @Entry, ptr %437, align 8
  %1773 = call ptr %1772({ ptr, ptr, ptr, i32 } %1760, ptr nonnull %186)
  call void %1773({ ptr, ptr, ptr, i32 } %1760, { ptr, ptr, ptr, i32 } %1760, ptr nonnull %185, i32 %1731, { ptr, i160 } %1751)
  %1774 = icmp ne ptr %.fca.0.extract87.i2234, @nil_typ
  %1775 = icmp ne ptr %.fca.0.extract87.i2234, null
  %.not138.i2260 = and i1 %1774, %1775
  br i1 %.not138.i2260, label %.cont.cont.i2265, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit.thread2885

.cont.cont.i2265:                                 ; preds = %1694, %1630
  %.sink2926 = phi { ptr, i160 } [ %1666, %1630 ], [ %1748, %1694 ]
  %1776 = phi i32 [ 2, %1630 ], [ 1, %1694 ]
  %vptr.i248.sroa.speculated.i2266 = phi ptr [ %.fca.0.extract112.i2298, %1630 ], [ %.fca.0.extract87.i2234, %1694 ]
  %.fca.1.extract89.i2261 = extractvalue { ptr, i160 } %.sink2926, 1
  %.sroa.3407.sroa.4.0.extract.shift.i2262 = lshr i160 %.fca.1.extract89.i2261, 64
  %.sroa.3407.sroa.4.0.extract.trunc.i2263 = trunc i160 %.sroa.3407.sroa.4.0.extract.shift.i2262 to i64
  %.sroa.3407.sroa.0.0.extract.trunc.i2264 = trunc i160 %.fca.1.extract89.i2261 to i64
  %.sroa.speculated352.i2267 = inttoptr i64 %.sroa.3407.sroa.0.0.extract.trunc.i2264 to ptr
  %.sroa.speculated346.i2268 = inttoptr i64 %.sroa.3407.sroa.4.0.extract.trunc.i2263 to ptr
  %hash_coef_ptr.i.i249.i2269 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i2266, i64 8
  %tbl_size_ptr.i.i250.i2270 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i2266, i64 16
  %offset_tbl_ptr.i.i251.i2271 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i2266, i64 40
  %hash_coef.i.i252.i2272 = load i64, ptr %hash_coef_ptr.i.i249.i2269, align 4
  %tbl_size.i.i253.i2273 = load i64, ptr %tbl_size_ptr.i.i250.i2270, align 4
  %offset_tbl.i.i254.i2274 = load ptr, ptr %offset_tbl_ptr.i.i251.i2271, align 8
  %product.i.i.i255.i2275 = mul i64 %hash_coef.i.i252.i2272, 4015701072841558310
  %shifted.i.i.i256.i2276 = lshr i64 %product.i.i.i255.i2275, 32
  %xored.i.i.i257.i2277 = xor i64 %shifted.i.i.i256.i2276, %product.i.i.i255.i2275
  %hash.i.i.i258.i2278 = and i64 %xored.i.i.i257.i2277, %tbl_size.i.i253.i2273
  %offset_ptr.i.i259.i2279 = getelementptr i32, ptr %offset_tbl.i.i254.i2274, i64 %hash.i.i.i258.i2278
  %offset.i.i260.i2280 = load i32, ptr %offset_ptr.i.i259.i2279, align 4
  store ptr %vptr.i248.sroa.speculated.i2266, ptr %191, align 8
  store ptr %.sroa.speculated352.i2267, ptr %433, align 8
  store ptr %.sroa.speculated346.i2268, ptr %434, align 8
  store i32 %offset.i.i260.i2280, ptr %435, align 8
  %1777 = add nuw nsw i32 %.reg2mem193.0677.i2220, 1
  %1778 = load i32, ptr %315, align 4
  %1779 = icmp slt i32 %1777, %1778
  br i1 %1779, label %1620, label %._crit_edge3.i1025

HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit.thread2885: ; preds = %1630, %1694
  %1780 = phi ptr [ %187, %1694 ], [ %179, %1630 ]
  %1781 = phi ptr [ %188, %1694 ], [ %180, %1630 ]
  %1782 = phi ptr [ %189, %1694 ], [ %181, %1630 ]
  %1783 = phi ptr [ %.sroa.0.i2189, %1694 ], [ %.sroa.0680.i2188, %1630 ]
  %1784 = phi ptr [ %190, %1694 ], [ %182, %1630 ]
  %1785 = load i32, ptr %397, align 4
  store i32 %1785, ptr %1780, align 4
  store i32 1, ptr %1781, align 4
  %1786 = add i32 %1785, 1
  store i32 %1786, ptr %1782, align 4
  %1787 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  store i32 %1786, ptr %397, align 4
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %1784, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %1783, align 8
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %175)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %176)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %177)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %178)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %179)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %180)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %181)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i2188)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %182)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %183)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %184)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %185)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %186)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %187)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %188)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %189)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i2189)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %190)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %191)
  br label %HashMap_insert_keyK_valueV.exit1116

._crit_edge3.i1025:                               ; preds = %.cont.cont.i2265, %._crit_edge2.i1019
  %1788 = load i160, ptr %433, align 8
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %175)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %176)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %177)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %178)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %179)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %180)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %181)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i2188)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %182)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %183)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %184)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %185)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %186)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %187)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %188)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %189)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i2189)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %190)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %191)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %173)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %174)
  %1789 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1790 = load ptr, ptr %299, align 8
  %1791 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1790, 0
  %1792 = load ptr, ptr %300, align 8
  %1793 = insertvalue { ptr, ptr, ptr, i32 } %1791, ptr %1792, 1
  %1794 = load ptr, ptr %395, align 8
  %1795 = insertvalue { ptr, ptr, ptr, i32 } %1793, ptr %1794, 2
  %1796 = load i32, ptr %301, align 4
  %1797 = insertvalue { ptr, ptr, ptr, i32 } %1795, i32 %1796, 3
  %hash_coef_ptr.i.i18.i2345 = getelementptr i8, ptr %1790, i64 8
  %tbl_size_ptr.i.i19.i2346 = getelementptr i8, ptr %1790, i64 16
  %offset_tbl_ptr.i.i20.i2347 = getelementptr i8, ptr %1790, i64 40
  %hash_coef.i.i21.i2348 = load i64, ptr %hash_coef_ptr.i.i18.i2345, align 4
  %tbl_size.i.i22.i2349 = load i64, ptr %tbl_size_ptr.i.i19.i2346, align 4
  %offset_tbl.i.i23.i2350 = load ptr, ptr %offset_tbl_ptr.i.i20.i2347, align 8
  %product.i.i.i24.i2351 = mul i64 %hash_coef.i.i21.i2348, -5261542750394134544
  %shifted.i.i.i25.i2352 = lshr i64 %product.i.i.i24.i2351, 32
  %xored.i.i.i26.i2353 = xor i64 %shifted.i.i.i25.i2352, %product.i.i.i24.i2351
  %hash.i.i.i27.i2354 = and i64 %xored.i.i.i26.i2353, %tbl_size.i.i22.i2349
  %offset_ptr.i.i28.i2355 = getelementptr i32, ptr %offset_tbl.i.i23.i2350, i64 %hash.i.i.i27.i2354
  %offset.i.i29.i2356 = load i32, ptr %offset_ptr.i.i28.i2355, align 4
  %eq.i.i2357 = icmp eq i32 %1796, %offset.i.i29.i2356
  call void @llvm.assume(i1 %eq.i.i2357) #30
  %1798 = load ptr, ptr %312, align 8
  %1799 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1798, 0
  %1800 = load ptr, ptr %313, align 8
  %1801 = insertvalue { ptr, ptr, ptr, i32 } %1799, ptr %1800, 1
  %1802 = load ptr, ptr %396, align 8
  %1803 = insertvalue { ptr, ptr, ptr, i32 } %1801, ptr %1802, 2
  %1804 = load i32, ptr %314, align 4
  %hash_coef_ptr.i.i46.i2362 = getelementptr i8, ptr %1798, i64 8
  %tbl_size_ptr.i.i47.i2363 = getelementptr i8, ptr %1798, i64 16
  %offset_tbl_ptr.i.i48.i2364 = getelementptr i8, ptr %1798, i64 40
  %hash_coef.i.i49.i2365 = load i64, ptr %hash_coef_ptr.i.i46.i2362, align 4
  %tbl_size.i.i50.i2366 = load i64, ptr %tbl_size_ptr.i.i47.i2363, align 4
  %offset_tbl.i.i51.i2367 = load ptr, ptr %offset_tbl_ptr.i.i48.i2364, align 8
  %product.i.i.i52.i2368 = mul i64 %hash_coef.i.i49.i2365, -5261542750394134544
  %shifted.i.i.i53.i2369 = lshr i64 %product.i.i.i52.i2368, 32
  %xored.i.i.i54.i2370 = xor i64 %shifted.i.i.i53.i2369, %product.i.i.i52.i2368
  %hash.i.i.i55.i2371 = and i64 %xored.i.i.i54.i2370, %tbl_size.i.i50.i2366
  %offset_ptr.i.i56.i2372 = getelementptr i32, ptr %offset_tbl.i.i51.i2367, i64 %hash.i.i.i55.i2371
  %offset.i.i57.i2373 = load i32, ptr %offset_ptr.i.i56.i2372, align 4
  %eq.i60.i2374 = icmp eq i32 %1804, %offset.i.i57.i2373
  call void @llvm.assume(i1 %eq.i60.i2374) #30
  %1805 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1806 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1790)
  %1807 = sext i32 %1796 to i64
  %1808 = getelementptr ptr, ptr %1790, i64 %1807
  %1809 = getelementptr i8, ptr %1808, i64 64
  %1810 = load ptr, ptr %1809, align 8
  %1811 = call ptr %1810({ ptr, ptr, ptr, i32 } %1797, ptr nonnull %2)
  %1812 = call i32 %1811({ ptr, ptr, ptr, i32 } %1797, { ptr, ptr, ptr, i32 } %1797, ptr nonnull %2)
  %1813 = shl i32 %1812, 1
  %1814 = call i32 @llvm.smax.i32(i32 %1813, i32 16)
  %1815 = load ptr, ptr %result.i, align 8
  %1816 = load ptr, ptr %282, align 8
  %result.i.i2375 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1817 = getelementptr i8, ptr %result.i.i2375, i64 16
  store ptr @_parameterization_Nil, ptr %1817, align 8
  %result.i75.i2376 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1818 = getelementptr i8, ptr %result.i75.i2376, i64 16
  store ptr %1816, ptr %1818, align 8
  %1819 = getelementptr i8, ptr %result.i75.i2376, i64 8
  store ptr %1815, ptr %1819, align 8
  %1820 = getelementptr i8, ptr %result.i75.i2376, i64 24
  store ptr null, ptr %1820, align 8
  %1821 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i75.i2376)
  store ptr @Entry, ptr %result.i75.i2376, align 8
  %1822 = getelementptr i8, ptr %result.i.i2375, i64 8
  store ptr %result.i75.i2376, ptr %1822, align 8
  %1823 = getelementptr i8, ptr %result.i.i2375, i64 24
  store ptr null, ptr %1823, align 8
  %1824 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i2375)
  store ptr @union_typ, ptr %result.i.i2375, align 8
  %result.i76.i2377 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i2375, ptr %result.i76.i2377, align 8
  %1825 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i76.i2377)
  store ptr @Array, ptr %173, align 8
  store ptr %result.i76.i2377, ptr %440, align 8
  store i32 9, ptr %441, align 8
  %1826 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %173)
  %1827 = getelementptr i8, ptr %result.i76.i2377, i64 16
  store i32 %1814, ptr %1827, align 4
  %1828 = getelementptr i8, ptr %result.i76.i2377, i64 20
  store i32 %1814, ptr %1828, align 4
  %1829 = zext nneg i32 %1814 to i64
  %1830 = shl nuw nsw i64 %1829, 5
  %result.i.i.i2378 = call noalias ptr @bump_malloc_inner(i64 noundef %1830, ptr nonnull @current_ptr) #29
  %1831 = getelementptr i8, ptr %result.i76.i2377, i64 8
  store ptr %result.i.i.i2378, ptr %1831, align 8
  %1832 = load ptr, ptr %442, align 8
  store ptr @Array, ptr %299, align 8
  store ptr %result.i76.i2377, ptr %300, align 8
  store ptr %1832, ptr %395, align 8
  store i32 9, ptr %301, align 4
  %result.i91.i2391 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1833 = getelementptr i8, ptr %result.i91.i2391, i64 16
  store ptr @_parameterization_Nil, ptr %1833, align 8
  %result.i92.i2392 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1834 = getelementptr i8, ptr %result.i92.i2392, i64 16
  store ptr %1816, ptr %1834, align 8
  %1835 = getelementptr i8, ptr %result.i92.i2392, i64 8
  store ptr %1815, ptr %1835, align 8
  %1836 = getelementptr i8, ptr %result.i92.i2392, i64 24
  store ptr null, ptr %1836, align 8
  %1837 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i92.i2392)
  store ptr @Entry, ptr %result.i92.i2392, align 8
  %1838 = getelementptr i8, ptr %result.i91.i2391, i64 8
  store ptr %result.i92.i2392, ptr %1838, align 8
  %1839 = getelementptr i8, ptr %result.i91.i2391, i64 24
  store ptr null, ptr %1839, align 8
  %1840 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i91.i2391)
  store ptr @union_typ, ptr %result.i91.i2391, align 8
  %result.i93.i2393 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i91.i2391, ptr %result.i93.i2393, align 8
  %1841 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i93.i2393)
  store ptr @Array, ptr %174, align 8
  store ptr %result.i93.i2393, ptr %443, align 8
  store i32 9, ptr %444, align 8
  %1842 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %174)
  %1843 = getelementptr i8, ptr %result.i93.i2393, i64 16
  store i32 %1814, ptr %1843, align 4
  %1844 = getelementptr i8, ptr %result.i93.i2393, i64 20
  store i32 %1814, ptr %1844, align 4
  %result.i.i234.i2394 = call noalias ptr @bump_malloc_inner(i64 noundef %1830, ptr nonnull @current_ptr) #29
  %1845 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %1846 = getelementptr i8, ptr %result.i93.i2393, i64 8
  store ptr %result.i.i234.i2394, ptr %1846, align 8
  %1847 = load ptr, ptr %445, align 8
  store ptr @Array, ptr %312, align 8
  store ptr %result.i93.i2393, ptr %313, align 8
  store ptr %1847, ptr %396, align 8
  store i32 9, ptr %314, align 4
  store i32 0, ptr %397, align 4
  %1848 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %137)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %138)
  %1849 = icmp sgt i32 %1812, 0
  br i1 %1849, label %.lr.ph.i3489, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3592.critedge

.lr.ph.i3489:                                     ; preds = %._crit_edge3.i1025
  %invariant.gep.i3490 = getelementptr i8, ptr %1790, i64 120
  %offset_tbl.i.i24.i3492 = load ptr, ptr %offset_tbl_ptr.i.i20.i2347, align 8
  %hash_coef.i.i22.i3494 = load i64, ptr %hash_coef_ptr.i.i18.i2345, align 4
  %product.i.i.i25.i3495 = mul i64 %hash_coef.i.i22.i3494, -5261542750394134544
  %shifted.i.i.i26.i3496 = lshr i64 %product.i.i.i25.i3495, 32
  %xored.i.i.i27.i3497 = xor i64 %shifted.i.i.i26.i3496, %product.i.i.i25.i3495
  %tbl_size.i.i23.i3499 = load i64, ptr %tbl_size_ptr.i.i19.i2346, align 4
  %hash.i.i.i28.i3500 = and i64 %xored.i.i.i27.i3497, %tbl_size.i.i23.i3499
  %offset_ptr.i.i29.i3501 = getelementptr i32, ptr %offset_tbl.i.i24.i3492, i64 %hash.i.i.i28.i3500
  %offset.i.i30.i3502 = load i32, ptr %offset_ptr.i.i29.i3501, align 4
  %1850 = insertvalue { ptr, ptr, ptr, i32 } %1795, i32 %offset.i.i30.i3502, 3
  %1851 = sext i32 %offset.i.i30.i3502 to i64
  %gep.i3517 = getelementptr ptr, ptr %invariant.gep.i3490, i64 %1851
  %1852 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %1853

1853:                                             ; preds = %._crit_edge1.i3521, %.lr.ph.i3489
  %.reg2mem13.079.i3518 = phi i32 [ 0, %.lr.ph.i3489 ], [ %1870, %._crit_edge1.i3521 ]
  store ptr @_parameterization_Ptri32, ptr %137, align 8
  %1854 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %137)
  %1855 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %1790)
  %1856 = load ptr, ptr %gep.i3517, align 8
  store ptr @i32_typ, ptr %138, align 8
  %1857 = call ptr %1856({ ptr, ptr, ptr, i32 } %1850, ptr nonnull %138)
  %1858 = call { ptr, i160 } %1857({ ptr, ptr, ptr, i32 } %1850, { ptr, ptr, ptr, i32 } %1850, ptr nonnull %137, i32 %.reg2mem13.079.i3518)
  %.fca.0.extract11.i3519 = extractvalue { ptr, i160 } %1858, 0
  %1859 = icmp ne ptr %.fca.0.extract11.i3519, @nil_typ
  %1860 = icmp ne ptr %.fca.0.extract11.i3519, null
  %.not17.i3520 = and i1 %1859, %1860
  br i1 %.not17.i3520, label %1861, label %._crit_edge1.i3521

1861:                                             ; preds = %1853
  %.fca.1.extract13.i3522 = extractvalue { ptr, i160 } %1858, 1
  %.sroa.375.8.extract.trunc.i3523 = trunc i160 %.fca.1.extract13.i3522 to i64
  %1862 = inttoptr i64 %.sroa.375.8.extract.trunc.i3523 to ptr
  %.sroa.576.8.extract.shift.i3524 = lshr i160 %.fca.1.extract13.i3522, 64
  %.sroa.576.8.extract.trunc.i3525 = trunc i160 %.sroa.576.8.extract.shift.i3524 to i64
  %1863 = inttoptr i64 %.sroa.576.8.extract.trunc.i3525 to ptr
  %hash_coef_ptr.i.i33.i3526 = getelementptr i8, ptr %.fca.0.extract11.i3519, i64 8
  %tbl_size_ptr.i.i34.i3527 = getelementptr i8, ptr %.fca.0.extract11.i3519, i64 16
  %offset_tbl_ptr.i.i35.i3528 = getelementptr i8, ptr %.fca.0.extract11.i3519, i64 40
  %hash_coef.i.i36.i3529 = load i64, ptr %hash_coef_ptr.i.i33.i3526, align 4
  %tbl_size.i.i37.i3530 = load i64, ptr %tbl_size_ptr.i.i34.i3527, align 4
  %offset_tbl.i.i38.i3531 = load ptr, ptr %offset_tbl_ptr.i.i35.i3528, align 8
  %product.i.i.i39.i3532 = mul i64 %hash_coef.i.i36.i3529, 4015701072841558310
  %shifted.i.i.i40.i3533 = lshr i64 %product.i.i.i39.i3532, 32
  %xored.i.i.i41.i3534 = xor i64 %shifted.i.i.i40.i3533, %product.i.i.i39.i3532
  %hash.i.i.i42.i3535 = and i64 %xored.i.i.i41.i3534, %tbl_size.i.i37.i3530
  %offset_ptr.i.i43.i3536 = getelementptr i32, ptr %offset_tbl.i.i38.i3531, i64 %hash.i.i.i42.i3535
  %offset.i.i58.i3537 = load i32, ptr %offset_ptr.i.i43.i3536, align 4
  %1864 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i3519, 0
  %1865 = insertvalue { ptr, ptr, ptr, i32 } %1864, ptr %1862, 1
  %1866 = insertvalue { ptr, ptr, ptr, i32 } %1865, ptr %1863, 2
  %1867 = insertvalue { ptr, ptr, ptr, i32 } %1866, i32 %offset.i.i58.i3537, 3
  %1868 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1869 = call { ptr, i160 } @HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %461, { ptr, ptr, ptr, i32 } poison, ptr nonnull poison, { ptr, ptr, ptr, i32 } %1867)
  br label %._crit_edge1.i3521

._crit_edge1.i3521:                               ; preds = %1861, %1853
  %1870 = add nuw nsw i32 %.reg2mem13.079.i3518, 1
  %1871 = icmp slt i32 %1870, %1812
  br i1 %1871, label %1853, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3539

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3539: ; preds = %._crit_edge1.i3521
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %137)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %138)
  %1872 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %135)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %136)
  %invariant.gep.i3543 = getelementptr i8, ptr %1798, i64 120
  %offset_tbl.i.i24.i3545 = load ptr, ptr %offset_tbl_ptr.i.i48.i2364, align 8
  %hash_coef.i.i22.i3547 = load i64, ptr %hash_coef_ptr.i.i46.i2362, align 4
  %product.i.i.i25.i3548 = mul i64 %hash_coef.i.i22.i3547, -5261542750394134544
  %shifted.i.i.i26.i3549 = lshr i64 %product.i.i.i25.i3548, 32
  %xored.i.i.i27.i3550 = xor i64 %shifted.i.i.i26.i3549, %product.i.i.i25.i3548
  %tbl_size.i.i23.i3552 = load i64, ptr %tbl_size_ptr.i.i47.i2363, align 4
  %hash.i.i.i28.i3553 = and i64 %xored.i.i.i27.i3550, %tbl_size.i.i23.i3552
  %offset_ptr.i.i29.i3554 = getelementptr i32, ptr %offset_tbl.i.i24.i3545, i64 %hash.i.i.i28.i3553
  %offset.i.i30.i3555 = load i32, ptr %offset_ptr.i.i29.i3554, align 4
  %1873 = insertvalue { ptr, ptr, ptr, i32 } %1803, i32 %offset.i.i30.i3555, 3
  %1874 = sext i32 %offset.i.i30.i3555 to i64
  %gep.i3570 = getelementptr ptr, ptr %invariant.gep.i3543, i64 %1874
  %1875 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %1876

1876:                                             ; preds = %._crit_edge1.i3574, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3539
  %.reg2mem13.079.i3571 = phi i32 [ 0, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3539 ], [ %1893, %._crit_edge1.i3574 ]
  store ptr @_parameterization_Ptri32, ptr %135, align 8
  %1877 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %135)
  %1878 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %1798)
  %1879 = load ptr, ptr %gep.i3570, align 8
  store ptr @i32_typ, ptr %136, align 8
  %1880 = call ptr %1879({ ptr, ptr, ptr, i32 } %1873, ptr nonnull %136)
  %1881 = call { ptr, i160 } %1880({ ptr, ptr, ptr, i32 } %1873, { ptr, ptr, ptr, i32 } %1873, ptr nonnull %135, i32 %.reg2mem13.079.i3571)
  %.fca.0.extract11.i3572 = extractvalue { ptr, i160 } %1881, 0
  %1882 = icmp ne ptr %.fca.0.extract11.i3572, @nil_typ
  %1883 = icmp ne ptr %.fca.0.extract11.i3572, null
  %.not17.i3573 = and i1 %1882, %1883
  br i1 %.not17.i3573, label %1884, label %._crit_edge1.i3574

1884:                                             ; preds = %1876
  %.fca.1.extract13.i3575 = extractvalue { ptr, i160 } %1881, 1
  %.sroa.375.8.extract.trunc.i3576 = trunc i160 %.fca.1.extract13.i3575 to i64
  %1885 = inttoptr i64 %.sroa.375.8.extract.trunc.i3576 to ptr
  %.sroa.576.8.extract.shift.i3577 = lshr i160 %.fca.1.extract13.i3575, 64
  %.sroa.576.8.extract.trunc.i3578 = trunc i160 %.sroa.576.8.extract.shift.i3577 to i64
  %1886 = inttoptr i64 %.sroa.576.8.extract.trunc.i3578 to ptr
  %hash_coef_ptr.i.i33.i3579 = getelementptr i8, ptr %.fca.0.extract11.i3572, i64 8
  %tbl_size_ptr.i.i34.i3580 = getelementptr i8, ptr %.fca.0.extract11.i3572, i64 16
  %offset_tbl_ptr.i.i35.i3581 = getelementptr i8, ptr %.fca.0.extract11.i3572, i64 40
  %hash_coef.i.i36.i3582 = load i64, ptr %hash_coef_ptr.i.i33.i3579, align 4
  %tbl_size.i.i37.i3583 = load i64, ptr %tbl_size_ptr.i.i34.i3580, align 4
  %offset_tbl.i.i38.i3584 = load ptr, ptr %offset_tbl_ptr.i.i35.i3581, align 8
  %product.i.i.i39.i3585 = mul i64 %hash_coef.i.i36.i3582, 4015701072841558310
  %shifted.i.i.i40.i3586 = lshr i64 %product.i.i.i39.i3585, 32
  %xored.i.i.i41.i3587 = xor i64 %shifted.i.i.i40.i3586, %product.i.i.i39.i3585
  %hash.i.i.i42.i3588 = and i64 %xored.i.i.i41.i3587, %tbl_size.i.i37.i3583
  %offset_ptr.i.i43.i3589 = getelementptr i32, ptr %offset_tbl.i.i38.i3584, i64 %hash.i.i.i42.i3588
  %offset.i.i58.i3590 = load i32, ptr %offset_ptr.i.i43.i3589, align 4
  %1887 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i3572, 0
  %1888 = insertvalue { ptr, ptr, ptr, i32 } %1887, ptr %1885, 1
  %1889 = insertvalue { ptr, ptr, ptr, i32 } %1888, ptr %1886, 2
  %1890 = insertvalue { ptr, ptr, ptr, i32 } %1889, i32 %offset.i.i58.i3590, 3
  %1891 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1892 = call { ptr, i160 } @HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %461, { ptr, ptr, ptr, i32 } poison, ptr nonnull poison, { ptr, ptr, ptr, i32 } %1890)
  br label %._crit_edge1.i3574

._crit_edge1.i3574:                               ; preds = %1884, %1876
  %1893 = add nuw nsw i32 %.reg2mem13.079.i3571, 1
  %1894 = icmp slt i32 %1893, %1812
  br i1 %1894, label %1876, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3592

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3592.critedge: ; preds = %._crit_edge3.i1025
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %137)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %138)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %135)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %136)
  br label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3592

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3592: ; preds = %._crit_edge1.i3574, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3592.critedge
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %135)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %136)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %173)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %174)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %157)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %158)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %159)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %160)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %161)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %162)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %163)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0680.i2437)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %164)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %165)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %166)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %167)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %168)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %169)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %170)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %171)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i2439)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %172)
  %1895 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1896 = load i32, ptr %315, align 4
  %1897 = icmp sgt i32 %1896, 0
  br i1 %1897, label %.lr.ph.i2474, label %._crit_edge3.1.i1031

.lr.ph.i2474:                                     ; preds = %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3592
  %1898 = lshr i160 %1788, 64
  %1899 = insertelement <2 x i160> poison, i160 %1898, i64 0
  %1900 = insertelement <2 x i160> %1899, i160 %1788, i64 1
  %1901 = trunc <2 x i160> %1900 to <2 x i64>
  %1902 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1903 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  br label %1904

1904:                                             ; preds = %.cont.cont.i2528, %.lr.ph.i2474
  %offset.i.i260.i25452915 = phi i32 [ 9, %.lr.ph.i2474 ], [ %offset.i.i260.i2545, %.cont.cont.i2528 ]
  %.reg2mem195.0678.i2476 = phi i32 [ 1, %.lr.ph.i2474 ], [ %2059, %.cont.cont.i2528 ]
  %.reg2mem193.0677.i2477 = phi i32 [ 0, %.lr.ph.i2474 ], [ %2064, %.cont.cont.i2528 ]
  %1905 = phi <2 x i64> [ %1901, %.lr.ph.i2474 ], [ %2063, %.cont.cont.i2528 ]
  %1906 = extractelement <2 x i64> %1905, i64 1
  %.sroa.speculated352.i25322911 = inttoptr i64 %1906 to ptr
  %1907 = extractelement <2 x i64> %1905, i64 0
  %.sroa.speculated346.i25332913 = inttoptr i64 %1907 to ptr
  %1908 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Entry, ptr undef, ptr undef, i32 undef }, ptr %.sroa.speculated352.i25322911, 1
  %1909 = insertvalue { ptr, ptr, ptr, i32 } %1908, ptr %.sroa.speculated346.i25332913, 2
  %1910 = insertvalue { ptr, ptr, ptr, i32 } %1909, i32 %offset.i.i260.i25452915, 3
  %1911 = sext i32 %offset.i.i260.i25452915 to i64
  %gep2909 = getelementptr ptr, ptr getelementptr inbounds (i8, ptr @Entry, i64 64), i64 %1911
  %1912 = load ptr, ptr %gep2909, align 8
  %1913 = call ptr %1912({ ptr, ptr, ptr, i32 } %1910, ptr nonnull %2)
  %1914 = call i32 %1913({ ptr, ptr, ptr, i32 } %1910, { ptr, ptr, ptr, i32 } %1910, ptr nonnull %2)
  %1915 = icmp eq i32 %.reg2mem195.0678.i2476, 1
  %1916 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br i1 %1915, label %1917, label %1979

1917:                                             ; preds = %1904
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %1918 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1919 = load ptr, ptr %299, align 8
  %1920 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1919, 0
  %1921 = load ptr, ptr %300, align 8
  %1922 = insertvalue { ptr, ptr, ptr, i32 } %1920, ptr %1921, 1
  %1923 = load ptr, ptr %395, align 8
  %1924 = insertvalue { ptr, ptr, ptr, i32 } %1922, ptr %1923, 2
  %1925 = load i32, ptr %301, align 4
  %1926 = insertvalue { ptr, ptr, ptr, i32 } %1924, i32 %1925, 3
  %hash_coef_ptr.i.i10.i3610 = getelementptr i8, ptr %1919, i64 8
  %tbl_size_ptr.i.i11.i3611 = getelementptr i8, ptr %1919, i64 16
  %offset_tbl_ptr.i.i12.i3612 = getelementptr i8, ptr %1919, i64 40
  %hash_coef.i.i13.i3613 = load i64, ptr %hash_coef_ptr.i.i10.i3610, align 4
  %tbl_size.i.i14.i3614 = load i64, ptr %tbl_size_ptr.i.i11.i3611, align 4
  %offset_tbl.i.i15.i3615 = load ptr, ptr %offset_tbl_ptr.i.i12.i3612, align 8
  %product.i.i.i16.i3616 = mul i64 %hash_coef.i.i13.i3613, -5261542750394134544
  %shifted.i.i.i17.i3617 = lshr i64 %product.i.i.i16.i3616, 32
  %xored.i.i.i18.i3618 = xor i64 %shifted.i.i.i17.i3617, %product.i.i.i16.i3616
  %hash.i.i.i19.i3619 = and i64 %xored.i.i.i18.i3618, %tbl_size.i.i14.i3614
  %offset_ptr.i.i20.i3620 = getelementptr i32, ptr %offset_tbl.i.i15.i3615, i64 %hash.i.i.i19.i3619
  %offset.i.i21.i3621 = load i32, ptr %offset_ptr.i.i20.i3620, align 4
  %eq.i.i3622 = icmp eq i32 %1925, %offset.i.i21.i3621
  call void @llvm.assume(i1 %eq.i.i3622) #30
  %1927 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %1928 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1919)
  %1929 = sext i32 %1925 to i64
  %1930 = getelementptr ptr, ptr %1919, i64 %1929
  %1931 = getelementptr i8, ptr %1930, i64 64
  %1932 = load ptr, ptr %1931, align 8
  %1933 = call ptr %1932({ ptr, ptr, ptr, i32 } %1926, ptr nonnull %2)
  %1934 = call i32 %1933({ ptr, ptr, ptr, i32 } %1926, { ptr, ptr, ptr, i32 } %1926, ptr nonnull %2)
  %1935 = add i32 %1934, -1
  %1936 = and i32 %1935, %1914
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %1937 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1938 = load ptr, ptr %299, align 8
  %1939 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1938, 0
  %1940 = load ptr, ptr %300, align 8
  %1941 = insertvalue { ptr, ptr, ptr, i32 } %1939, ptr %1940, 1
  %1942 = load ptr, ptr %395, align 8
  %1943 = insertvalue { ptr, ptr, ptr, i32 } %1941, ptr %1942, 2
  %1944 = load i32, ptr %301, align 4
  %1945 = insertvalue { ptr, ptr, ptr, i32 } %1943, i32 %1944, 3
  %hash_coef_ptr.i.i172.i2550 = getelementptr i8, ptr %1938, i64 8
  %tbl_size_ptr.i.i173.i2551 = getelementptr i8, ptr %1938, i64 16
  %offset_tbl_ptr.i.i174.i2552 = getelementptr i8, ptr %1938, i64 40
  %hash_coef.i.i175.i2553 = load i64, ptr %hash_coef_ptr.i.i172.i2550, align 4
  %tbl_size.i.i176.i2554 = load i64, ptr %tbl_size_ptr.i.i173.i2551, align 4
  %offset_tbl.i.i177.i2555 = load ptr, ptr %offset_tbl_ptr.i.i174.i2552, align 8
  %product.i.i.i178.i2556 = mul i64 %hash_coef.i.i175.i2553, -5261542750394134544
  %shifted.i.i.i179.i2557 = lshr i64 %product.i.i.i178.i2556, 32
  %xored.i.i.i180.i2558 = xor i64 %shifted.i.i.i179.i2557, %product.i.i.i178.i2556
  %hash.i.i.i181.i2559 = and i64 %xored.i.i.i180.i2558, %tbl_size.i.i176.i2554
  %offset_ptr.i.i182.i2560 = getelementptr i32, ptr %offset_tbl.i.i177.i2555, i64 %hash.i.i.i181.i2559
  %offset.i.i183.i2561 = load i32, ptr %offset_ptr.i.i182.i2560, align 4
  %eq.i.i2562 = icmp eq i32 %1944, %offset.i.i183.i2561
  call void @llvm.assume(i1 %eq.i.i2562) #30
  store ptr @_parameterization_Ptri32, ptr %157, align 8
  %1946 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %157)
  %1947 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1938)
  %1948 = sext i32 %1944 to i64
  %1949 = getelementptr ptr, ptr %1938, i64 %1948
  %1950 = getelementptr i8, ptr %1949, i64 120
  %1951 = load ptr, ptr %1950, align 8
  store ptr @i32_typ, ptr %158, align 8
  %1952 = call ptr %1951({ ptr, ptr, ptr, i32 } %1945, ptr nonnull %158)
  %1953 = call { ptr, i160 } %1952({ ptr, ptr, ptr, i32 } %1945, { ptr, ptr, ptr, i32 } %1945, ptr nonnull %157, i32 %1936)
  %.fca.0.extract112.i2563 = extractvalue { ptr, i160 } %1953, 0
  %.sroa.3111.0.insert.ext.i2564 = zext i32 %offset.i.i260.i25452915 to i160
  %.sroa.3111.0.insert.shift.i2565 = shl nuw i160 %.sroa.3111.0.insert.ext.i2564, 128
  %.sroa.2110.0.insert.ext.i2566 = zext i64 %1907 to i160
  %.sroa.2110.0.insert.shift.i2567 = shl nuw nsw i160 %.sroa.2110.0.insert.ext.i2566, 64
  %.sroa.2110.0.insert.insert.i2568 = or disjoint i160 %.sroa.2110.0.insert.shift.i2567, %.sroa.3111.0.insert.shift.i2565
  %.sroa.0109.0.insert.ext.i2569 = zext i64 %1906 to i160
  %.sroa.0109.0.insert.insert.i2570 = or disjoint i160 %.sroa.2110.0.insert.insert.i2568, %.sroa.0109.0.insert.ext.i2569
  %1954 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0109.0.insert.insert.i2570, 1
  %1955 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1956 = load ptr, ptr %299, align 8
  %1957 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1956, 0
  %1958 = load ptr, ptr %300, align 8
  %1959 = insertvalue { ptr, ptr, ptr, i32 } %1957, ptr %1958, 1
  %1960 = load ptr, ptr %395, align 8
  %1961 = insertvalue { ptr, ptr, ptr, i32 } %1959, ptr %1960, 2
  %1962 = load i32, ptr %301, align 4
  %1963 = insertvalue { ptr, ptr, ptr, i32 } %1961, i32 %1962, 3
  %hash_coef_ptr.i.i186.i2575 = getelementptr i8, ptr %1956, i64 8
  %tbl_size_ptr.i.i187.i2576 = getelementptr i8, ptr %1956, i64 16
  %offset_tbl_ptr.i.i188.i2577 = getelementptr i8, ptr %1956, i64 40
  %hash_coef.i.i189.i2578 = load i64, ptr %hash_coef_ptr.i.i186.i2575, align 4
  %tbl_size.i.i190.i2579 = load i64, ptr %tbl_size_ptr.i.i187.i2576, align 4
  %offset_tbl.i.i191.i2580 = load ptr, ptr %offset_tbl_ptr.i.i188.i2577, align 8
  %product.i.i.i192.i2581 = mul i64 %hash_coef.i.i189.i2578, -5261542750394134544
  %shifted.i.i.i193.i2582 = lshr i64 %product.i.i.i192.i2581, 32
  %xored.i.i.i194.i2583 = xor i64 %shifted.i.i.i193.i2582, %product.i.i.i192.i2581
  %hash.i.i.i195.i2584 = and i64 %xored.i.i.i194.i2583, %tbl_size.i.i190.i2579
  %offset_ptr.i.i196.i2585 = getelementptr i32, ptr %offset_tbl.i.i191.i2580, i64 %hash.i.i.i195.i2584
  %offset.i.i197.i2586 = load i32, ptr %offset_ptr.i.i196.i2585, align 4
  %eq.i200.i2587 = icmp eq i32 %1962, %offset.i.i197.i2586
  call void @llvm.assume(i1 %eq.i200.i2587) #30
  %1964 = load ptr, ptr %result.i, align 8
  %1965 = load ptr, ptr %282, align 8
  %result.i.i2588 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %1966 = getelementptr i8, ptr %result.i.i2588, i64 16
  store ptr %1965, ptr %1966, align 8
  %1967 = getelementptr i8, ptr %result.i.i2588, i64 8
  store ptr %1964, ptr %1967, align 8
  %1968 = getelementptr i8, ptr %result.i.i2588, i64 24
  store ptr null, ptr %1968, align 8
  %1969 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i2588)
  store ptr @Entry, ptr %result.i.i2588, align 8
  store ptr @_parameterization_Ptri32, ptr %159, align 8
  store ptr %result.i.i2588, ptr %448, align 8
  %1970 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %159)
  %1971 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1956)
  %1972 = sext i32 %1962 to i64
  %1973 = getelementptr ptr, ptr %1956, i64 %1972
  %1974 = getelementptr i8, ptr %1973, i64 128
  %1975 = load ptr, ptr %1974, align 8
  store ptr @i32_typ, ptr %160, align 8
  store ptr @Entry, ptr %449, align 8
  %1976 = call ptr %1975({ ptr, ptr, ptr, i32 } %1963, ptr nonnull %160)
  call void %1976({ ptr, ptr, ptr, i32 } %1963, { ptr, ptr, ptr, i32 } %1963, ptr nonnull %159, i32 %1936, { ptr, i160 } %1954)
  %1977 = icmp ne ptr %.fca.0.extract112.i2563, @nil_typ
  %1978 = icmp ne ptr %.fca.0.extract112.i2563, null
  %.not140.i2589 = and i1 %1977, %1978
  br i1 %.not140.i2589, label %.cont.cont.i2528, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit2595.thread

1979:                                             ; preds = %1904
  %1980 = add i32 %1914, 2127912214
  %1981 = shl i32 %1914, 12
  %1982 = add i32 %1980, %1981
  %1983 = ashr i32 %1982, 19
  %1984 = xor i32 %1982, %1983
  %1985 = xor i32 %1984, -949894596
  %1986 = add i32 %1985, 374761393
  %1987 = shl i32 %1985, 5
  %1988 = add i32 %1986, %1987
  %1989 = add i32 %1988, -744332180
  %1990 = shl i32 %1988, 9
  %1991 = xor i32 %1989, %1990
  %1992 = add i32 %1991, -42973499
  %1993 = shl i32 %1991, 3
  %1994 = add i32 %1992, %1993
  %1995 = ashr i32 %1994, 16
  %1996 = xor i32 %1994, %1995
  %1997 = xor i32 %1996, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %1998 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %1999 = load ptr, ptr %312, align 8
  %2000 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1999, 0
  %2001 = load ptr, ptr %313, align 8
  %2002 = insertvalue { ptr, ptr, ptr, i32 } %2000, ptr %2001, 1
  %2003 = load ptr, ptr %396, align 8
  %2004 = insertvalue { ptr, ptr, ptr, i32 } %2002, ptr %2003, 2
  %2005 = load i32, ptr %314, align 4
  %2006 = insertvalue { ptr, ptr, ptr, i32 } %2004, i32 %2005, 3
  %hash_coef_ptr.i.i10.i3640 = getelementptr i8, ptr %1999, i64 8
  %tbl_size_ptr.i.i11.i3641 = getelementptr i8, ptr %1999, i64 16
  %offset_tbl_ptr.i.i12.i3642 = getelementptr i8, ptr %1999, i64 40
  %hash_coef.i.i13.i3643 = load i64, ptr %hash_coef_ptr.i.i10.i3640, align 4
  %tbl_size.i.i14.i3644 = load i64, ptr %tbl_size_ptr.i.i11.i3641, align 4
  %offset_tbl.i.i15.i3645 = load ptr, ptr %offset_tbl_ptr.i.i12.i3642, align 8
  %product.i.i.i16.i3646 = mul i64 %hash_coef.i.i13.i3643, -5261542750394134544
  %shifted.i.i.i17.i3647 = lshr i64 %product.i.i.i16.i3646, 32
  %xored.i.i.i18.i3648 = xor i64 %shifted.i.i.i17.i3647, %product.i.i.i16.i3646
  %hash.i.i.i19.i3649 = and i64 %xored.i.i.i18.i3648, %tbl_size.i.i14.i3644
  %offset_ptr.i.i20.i3650 = getelementptr i32, ptr %offset_tbl.i.i15.i3645, i64 %hash.i.i.i19.i3649
  %offset.i.i21.i3651 = load i32, ptr %offset_ptr.i.i20.i3650, align 4
  %eq.i.i3652 = icmp eq i32 %2005, %offset.i.i21.i3651
  call void @llvm.assume(i1 %eq.i.i3652) #30
  %2007 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2008 = call ptr @llvm.invariant.start.p0(i64 600, ptr %1999)
  %2009 = sext i32 %2005 to i64
  %2010 = getelementptr ptr, ptr %1999, i64 %2009
  %2011 = getelementptr i8, ptr %2010, i64 64
  %2012 = load ptr, ptr %2011, align 8
  %2013 = call ptr %2012({ ptr, ptr, ptr, i32 } %2006, ptr nonnull %2)
  %2014 = call i32 %2013({ ptr, ptr, ptr, i32 } %2006, { ptr, ptr, ptr, i32 } %2006, ptr nonnull %2)
  %2015 = add i32 %2014, -1
  %2016 = and i32 %2015, %1997
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %2017 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2018 = load ptr, ptr %312, align 8
  %2019 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2018, 0
  %2020 = load ptr, ptr %313, align 8
  %2021 = insertvalue { ptr, ptr, ptr, i32 } %2019, ptr %2020, 1
  %2022 = load ptr, ptr %396, align 8
  %2023 = insertvalue { ptr, ptr, ptr, i32 } %2021, ptr %2022, 2
  %2024 = load i32, ptr %314, align 4
  %2025 = insertvalue { ptr, ptr, ptr, i32 } %2023, i32 %2024, 3
  %hash_coef_ptr.i.i202.i2482 = getelementptr i8, ptr %2018, i64 8
  %tbl_size_ptr.i.i203.i2483 = getelementptr i8, ptr %2018, i64 16
  %offset_tbl_ptr.i.i204.i2484 = getelementptr i8, ptr %2018, i64 40
  %hash_coef.i.i205.i2485 = load i64, ptr %hash_coef_ptr.i.i202.i2482, align 4
  %tbl_size.i.i206.i2486 = load i64, ptr %tbl_size_ptr.i.i203.i2483, align 4
  %offset_tbl.i.i207.i2487 = load ptr, ptr %offset_tbl_ptr.i.i204.i2484, align 8
  %product.i.i.i208.i2488 = mul i64 %hash_coef.i.i205.i2485, -5261542750394134544
  %shifted.i.i.i209.i2489 = lshr i64 %product.i.i.i208.i2488, 32
  %xored.i.i.i210.i2490 = xor i64 %shifted.i.i.i209.i2489, %product.i.i.i208.i2488
  %hash.i.i.i211.i2491 = and i64 %xored.i.i.i210.i2490, %tbl_size.i.i206.i2486
  %offset_ptr.i.i212.i2492 = getelementptr i32, ptr %offset_tbl.i.i207.i2487, i64 %hash.i.i.i211.i2491
  %offset.i.i213.i2493 = load i32, ptr %offset_ptr.i.i212.i2492, align 4
  %eq.i216.i2494 = icmp eq i32 %2024, %offset.i.i213.i2493
  call void @llvm.assume(i1 %eq.i216.i2494) #30
  store ptr @_parameterization_Ptri32, ptr %165, align 8
  %2026 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %165)
  %2027 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2018)
  %2028 = sext i32 %2024 to i64
  %2029 = getelementptr ptr, ptr %2018, i64 %2028
  %2030 = getelementptr i8, ptr %2029, i64 120
  %2031 = load ptr, ptr %2030, align 8
  store ptr @i32_typ, ptr %166, align 8
  %2032 = call ptr %2031({ ptr, ptr, ptr, i32 } %2025, ptr nonnull %166)
  %2033 = call { ptr, i160 } %2032({ ptr, ptr, ptr, i32 } %2025, { ptr, ptr, ptr, i32 } %2025, ptr nonnull %165, i32 %2016)
  %.fca.0.extract87.i2495 = extractvalue { ptr, i160 } %2033, 0
  %.sroa.3.0.insert.ext.i2496 = zext i32 %offset.i.i260.i25452915 to i160
  %.sroa.3.0.insert.shift.i2497 = shl nuw i160 %.sroa.3.0.insert.ext.i2496, 128
  %.sroa.2.0.insert.ext.i2498 = zext i64 %1907 to i160
  %.sroa.2.0.insert.shift.i2499 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i2498, 64
  %.sroa.2.0.insert.insert.i2500 = or disjoint i160 %.sroa.2.0.insert.shift.i2499, %.sroa.3.0.insert.shift.i2497
  %.sroa.0.0.insert.ext.i2501 = zext i64 %1906 to i160
  %.sroa.0.0.insert.insert.i2502 = or disjoint i160 %.sroa.2.0.insert.insert.i2500, %.sroa.0.0.insert.ext.i2501
  %2034 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0.0.insert.insert.i2502, 1
  %2035 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2036 = load ptr, ptr %312, align 8
  %2037 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2036, 0
  %2038 = load ptr, ptr %313, align 8
  %2039 = insertvalue { ptr, ptr, ptr, i32 } %2037, ptr %2038, 1
  %2040 = load ptr, ptr %396, align 8
  %2041 = insertvalue { ptr, ptr, ptr, i32 } %2039, ptr %2040, 2
  %2042 = load i32, ptr %314, align 4
  %2043 = insertvalue { ptr, ptr, ptr, i32 } %2041, i32 %2042, 3
  %hash_coef_ptr.i.i218.i2507 = getelementptr i8, ptr %2036, i64 8
  %tbl_size_ptr.i.i219.i2508 = getelementptr i8, ptr %2036, i64 16
  %offset_tbl_ptr.i.i220.i2509 = getelementptr i8, ptr %2036, i64 40
  %hash_coef.i.i221.i2510 = load i64, ptr %hash_coef_ptr.i.i218.i2507, align 4
  %tbl_size.i.i222.i2511 = load i64, ptr %tbl_size_ptr.i.i219.i2508, align 4
  %offset_tbl.i.i223.i2512 = load ptr, ptr %offset_tbl_ptr.i.i220.i2509, align 8
  %product.i.i.i224.i2513 = mul i64 %hash_coef.i.i221.i2510, -5261542750394134544
  %shifted.i.i.i225.i2514 = lshr i64 %product.i.i.i224.i2513, 32
  %xored.i.i.i226.i2515 = xor i64 %shifted.i.i.i225.i2514, %product.i.i.i224.i2513
  %hash.i.i.i227.i2516 = and i64 %xored.i.i.i226.i2515, %tbl_size.i.i222.i2511
  %offset_ptr.i.i228.i2517 = getelementptr i32, ptr %offset_tbl.i.i223.i2512, i64 %hash.i.i.i227.i2516
  %offset.i.i229.i2518 = load i32, ptr %offset_ptr.i.i228.i2517, align 4
  %eq.i232.i2519 = icmp eq i32 %2042, %offset.i.i229.i2518
  call void @llvm.assume(i1 %eq.i232.i2519) #30
  %2044 = load ptr, ptr %result.i, align 8
  %2045 = load ptr, ptr %282, align 8
  %result.i233.i2520 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2046 = getelementptr i8, ptr %result.i233.i2520, i64 16
  store ptr %2045, ptr %2046, align 8
  %2047 = getelementptr i8, ptr %result.i233.i2520, i64 8
  store ptr %2044, ptr %2047, align 8
  %2048 = getelementptr i8, ptr %result.i233.i2520, i64 24
  store ptr null, ptr %2048, align 8
  %2049 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i233.i2520)
  store ptr @Entry, ptr %result.i233.i2520, align 8
  store ptr @_parameterization_Ptri32, ptr %167, align 8
  store ptr %result.i233.i2520, ptr %446, align 8
  %2050 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %167)
  %2051 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2036)
  %2052 = sext i32 %2042 to i64
  %2053 = getelementptr ptr, ptr %2036, i64 %2052
  %2054 = getelementptr i8, ptr %2053, i64 128
  %2055 = load ptr, ptr %2054, align 8
  store ptr @i32_typ, ptr %168, align 8
  store ptr @Entry, ptr %447, align 8
  %2056 = call ptr %2055({ ptr, ptr, ptr, i32 } %2043, ptr nonnull %168)
  call void %2056({ ptr, ptr, ptr, i32 } %2043, { ptr, ptr, ptr, i32 } %2043, ptr nonnull %167, i32 %2016, { ptr, i160 } %2034)
  %2057 = icmp ne ptr %.fca.0.extract87.i2495, @nil_typ
  %2058 = icmp ne ptr %.fca.0.extract87.i2495, null
  %.not138.i2521 = and i1 %2057, %2058
  br i1 %.not138.i2521, label %.cont.cont.i2528, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit2595.thread

.cont.cont.i2528:                                 ; preds = %1979, %1917
  %.sink2928 = phi { ptr, i160 } [ %1953, %1917 ], [ %2033, %1979 ]
  %2059 = phi i32 [ 2, %1917 ], [ 1, %1979 ]
  %vptr.i248.sroa.speculated.i2531 = phi ptr [ %.fca.0.extract112.i2563, %1917 ], [ %.fca.0.extract87.i2495, %1979 ]
  %.fca.1.extract89.i2524 = extractvalue { ptr, i160 } %.sink2928, 1
  %.sroa.3407.sroa.4.0.extract.shift.i2525 = lshr i160 %.fca.1.extract89.i2524, 64
  %2060 = trunc i160 %.sroa.3407.sroa.4.0.extract.shift.i2525 to i64
  %2061 = insertelement <2 x i64> poison, i64 %2060, i64 0
  %2062 = trunc i160 %.fca.1.extract89.i2524 to i64
  %2063 = insertelement <2 x i64> %2061, i64 %2062, i64 1
  %hash_coef_ptr.i.i249.i2534 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i2531, i64 8
  %tbl_size_ptr.i.i250.i2535 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i2531, i64 16
  %offset_tbl_ptr.i.i251.i2536 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i2531, i64 40
  %hash_coef.i.i252.i2537 = load i64, ptr %hash_coef_ptr.i.i249.i2534, align 4
  %tbl_size.i.i253.i2538 = load i64, ptr %tbl_size_ptr.i.i250.i2535, align 4
  %offset_tbl.i.i254.i2539 = load ptr, ptr %offset_tbl_ptr.i.i251.i2536, align 8
  %product.i.i.i255.i2540 = mul i64 %hash_coef.i.i252.i2537, 4015701072841558310
  %shifted.i.i.i256.i2541 = lshr i64 %product.i.i.i255.i2540, 32
  %xored.i.i.i257.i2542 = xor i64 %shifted.i.i.i256.i2541, %product.i.i.i255.i2540
  %hash.i.i.i258.i2543 = and i64 %xored.i.i.i257.i2542, %tbl_size.i.i253.i2538
  %offset_ptr.i.i259.i2544 = getelementptr i32, ptr %offset_tbl.i.i254.i2539, i64 %hash.i.i.i258.i2543
  %offset.i.i260.i2545 = load i32, ptr %offset_ptr.i.i259.i2544, align 4
  %2064 = add nuw nsw i32 %.reg2mem193.0677.i2477, 1
  %2065 = load i32, ptr %315, align 4
  %2066 = icmp slt i32 %2064, %2065
  br i1 %2066, label %1904, label %._crit_edge3.1.i1031

HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit2595.thread: ; preds = %1917, %1979
  %2067 = phi ptr [ %169, %1979 ], [ %161, %1917 ]
  %2068 = phi ptr [ %170, %1979 ], [ %162, %1917 ]
  %2069 = phi ptr [ %171, %1979 ], [ %163, %1917 ]
  %2070 = phi ptr [ %.sroa.0.i2439, %1979 ], [ %.sroa.0680.i2437, %1917 ]
  %2071 = phi ptr [ %172, %1979 ], [ %164, %1917 ]
  %2072 = load i32, ptr %397, align 4
  store i32 %2072, ptr %2067, align 4
  store i32 1, ptr %2068, align 4
  %2073 = add i32 %2072, 1
  store i32 %2073, ptr %2069, align 4
  %2074 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  store i32 %2073, ptr %397, align 4
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %2071, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %2070, align 8
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %157)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %158)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %159)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %160)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %161)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %162)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %163)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i2437)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %164)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %165)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %166)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %167)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %168)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %169)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %170)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %171)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i2439)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %172)
  br label %HashMap_insert_keyK_valueV.exit1116

._crit_edge3.1.i1031:                             ; preds = %.cont.cont.i2528, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3592
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %157)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %158)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %159)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %160)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %161)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %162)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %163)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i2437)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %164)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %165)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %166)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %167)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %168)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %169)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %170)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %171)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i2439)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %172)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %155)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %156)
  %2075 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2076 = load ptr, ptr %299, align 8
  %2077 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2076, 0
  %2078 = load ptr, ptr %300, align 8
  %2079 = insertvalue { ptr, ptr, ptr, i32 } %2077, ptr %2078, 1
  %2080 = load ptr, ptr %395, align 8
  %2081 = insertvalue { ptr, ptr, ptr, i32 } %2079, ptr %2080, 2
  %2082 = load i32, ptr %301, align 4
  %2083 = insertvalue { ptr, ptr, ptr, i32 } %2081, i32 %2082, 3
  %hash_coef_ptr.i.i18.i2614 = getelementptr i8, ptr %2076, i64 8
  %tbl_size_ptr.i.i19.i2615 = getelementptr i8, ptr %2076, i64 16
  %offset_tbl_ptr.i.i20.i2616 = getelementptr i8, ptr %2076, i64 40
  %hash_coef.i.i21.i2617 = load i64, ptr %hash_coef_ptr.i.i18.i2614, align 4
  %tbl_size.i.i22.i2618 = load i64, ptr %tbl_size_ptr.i.i19.i2615, align 4
  %offset_tbl.i.i23.i2619 = load ptr, ptr %offset_tbl_ptr.i.i20.i2616, align 8
  %product.i.i.i24.i2620 = mul i64 %hash_coef.i.i21.i2617, -5261542750394134544
  %shifted.i.i.i25.i2621 = lshr i64 %product.i.i.i24.i2620, 32
  %xored.i.i.i26.i2622 = xor i64 %shifted.i.i.i25.i2621, %product.i.i.i24.i2620
  %hash.i.i.i27.i2623 = and i64 %xored.i.i.i26.i2622, %tbl_size.i.i22.i2618
  %offset_ptr.i.i28.i2624 = getelementptr i32, ptr %offset_tbl.i.i23.i2619, i64 %hash.i.i.i27.i2623
  %offset.i.i29.i2625 = load i32, ptr %offset_ptr.i.i28.i2624, align 4
  %eq.i.i2626 = icmp eq i32 %2082, %offset.i.i29.i2625
  call void @llvm.assume(i1 %eq.i.i2626) #30
  %2084 = load ptr, ptr %312, align 8
  %2085 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2084, 0
  %2086 = load ptr, ptr %313, align 8
  %2087 = insertvalue { ptr, ptr, ptr, i32 } %2085, ptr %2086, 1
  %2088 = load ptr, ptr %396, align 8
  %2089 = insertvalue { ptr, ptr, ptr, i32 } %2087, ptr %2088, 2
  %2090 = load i32, ptr %314, align 4
  %hash_coef_ptr.i.i46.i2631 = getelementptr i8, ptr %2084, i64 8
  %tbl_size_ptr.i.i47.i2632 = getelementptr i8, ptr %2084, i64 16
  %offset_tbl_ptr.i.i48.i2633 = getelementptr i8, ptr %2084, i64 40
  %hash_coef.i.i49.i2634 = load i64, ptr %hash_coef_ptr.i.i46.i2631, align 4
  %tbl_size.i.i50.i2635 = load i64, ptr %tbl_size_ptr.i.i47.i2632, align 4
  %offset_tbl.i.i51.i2636 = load ptr, ptr %offset_tbl_ptr.i.i48.i2633, align 8
  %product.i.i.i52.i2637 = mul i64 %hash_coef.i.i49.i2634, -5261542750394134544
  %shifted.i.i.i53.i2638 = lshr i64 %product.i.i.i52.i2637, 32
  %xored.i.i.i54.i2639 = xor i64 %shifted.i.i.i53.i2638, %product.i.i.i52.i2637
  %hash.i.i.i55.i2640 = and i64 %xored.i.i.i54.i2639, %tbl_size.i.i50.i2635
  %offset_ptr.i.i56.i2641 = getelementptr i32, ptr %offset_tbl.i.i51.i2636, i64 %hash.i.i.i55.i2640
  %offset.i.i57.i2642 = load i32, ptr %offset_ptr.i.i56.i2641, align 4
  %eq.i60.i2643 = icmp eq i32 %2090, %offset.i.i57.i2642
  call void @llvm.assume(i1 %eq.i60.i2643) #30
  %2091 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2092 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2076)
  %2093 = sext i32 %2082 to i64
  %2094 = getelementptr ptr, ptr %2076, i64 %2093
  %2095 = getelementptr i8, ptr %2094, i64 64
  %2096 = load ptr, ptr %2095, align 8
  %2097 = call ptr %2096({ ptr, ptr, ptr, i32 } %2083, ptr nonnull %2)
  %2098 = call i32 %2097({ ptr, ptr, ptr, i32 } %2083, { ptr, ptr, ptr, i32 } %2083, ptr nonnull %2)
  %2099 = shl i32 %2098, 1
  %2100 = call i32 @llvm.smax.i32(i32 %2099, i32 16)
  %2101 = load ptr, ptr %result.i, align 8
  %2102 = load ptr, ptr %282, align 8
  %result.i.i2644 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2103 = getelementptr i8, ptr %result.i.i2644, i64 16
  store ptr @_parameterization_Nil, ptr %2103, align 8
  %result.i75.i2645 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2104 = getelementptr i8, ptr %result.i75.i2645, i64 16
  store ptr %2102, ptr %2104, align 8
  %2105 = getelementptr i8, ptr %result.i75.i2645, i64 8
  store ptr %2101, ptr %2105, align 8
  %2106 = getelementptr i8, ptr %result.i75.i2645, i64 24
  store ptr null, ptr %2106, align 8
  %2107 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i75.i2645)
  store ptr @Entry, ptr %result.i75.i2645, align 8
  %2108 = getelementptr i8, ptr %result.i.i2644, i64 8
  store ptr %result.i75.i2645, ptr %2108, align 8
  %2109 = getelementptr i8, ptr %result.i.i2644, i64 24
  store ptr null, ptr %2109, align 8
  %2110 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i2644)
  store ptr @union_typ, ptr %result.i.i2644, align 8
  %result.i76.i2646 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i2644, ptr %result.i76.i2646, align 8
  %2111 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i76.i2646)
  store ptr @Array, ptr %155, align 8
  store ptr %result.i76.i2646, ptr %450, align 8
  store i32 9, ptr %451, align 8
  %2112 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %155)
  %2113 = getelementptr i8, ptr %result.i76.i2646, i64 16
  store i32 %2100, ptr %2113, align 4
  %2114 = getelementptr i8, ptr %result.i76.i2646, i64 20
  store i32 %2100, ptr %2114, align 4
  %2115 = zext nneg i32 %2100 to i64
  %2116 = shl nuw nsw i64 %2115, 5
  %result.i.i.i2647 = call noalias ptr @bump_malloc_inner(i64 noundef %2116, ptr nonnull @current_ptr) #29
  %2117 = getelementptr i8, ptr %result.i76.i2646, i64 8
  store ptr %result.i.i.i2647, ptr %2117, align 8
  %2118 = load ptr, ptr %452, align 8
  store ptr @Array, ptr %299, align 8
  store ptr %result.i76.i2646, ptr %300, align 8
  store ptr %2118, ptr %395, align 8
  store i32 9, ptr %301, align 4
  %result.i91.i2660 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2119 = getelementptr i8, ptr %result.i91.i2660, i64 16
  store ptr @_parameterization_Nil, ptr %2119, align 8
  %result.i92.i2661 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2120 = getelementptr i8, ptr %result.i92.i2661, i64 16
  store ptr %2102, ptr %2120, align 8
  %2121 = getelementptr i8, ptr %result.i92.i2661, i64 8
  store ptr %2101, ptr %2121, align 8
  %2122 = getelementptr i8, ptr %result.i92.i2661, i64 24
  store ptr null, ptr %2122, align 8
  %2123 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i92.i2661)
  store ptr @Entry, ptr %result.i92.i2661, align 8
  %2124 = getelementptr i8, ptr %result.i91.i2660, i64 8
  store ptr %result.i92.i2661, ptr %2124, align 8
  %2125 = getelementptr i8, ptr %result.i91.i2660, i64 24
  store ptr null, ptr %2125, align 8
  %2126 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i91.i2660)
  store ptr @union_typ, ptr %result.i91.i2660, align 8
  %result.i93.i2662 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i91.i2660, ptr %result.i93.i2662, align 8
  %2127 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i93.i2662)
  store ptr @Array, ptr %156, align 8
  store ptr %result.i93.i2662, ptr %453, align 8
  store i32 9, ptr %454, align 8
  %2128 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %156)
  %2129 = getelementptr i8, ptr %result.i93.i2662, i64 16
  store i32 %2100, ptr %2129, align 4
  %2130 = getelementptr i8, ptr %result.i93.i2662, i64 20
  store i32 %2100, ptr %2130, align 4
  %result.i.i234.i2663 = call noalias ptr @bump_malloc_inner(i64 noundef %2116, ptr nonnull @current_ptr) #29
  %2131 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %2132 = getelementptr i8, ptr %result.i93.i2662, i64 8
  store ptr %result.i.i234.i2663, ptr %2132, align 8
  %2133 = load ptr, ptr %455, align 8
  store ptr @Array, ptr %312, align 8
  store ptr %result.i93.i2662, ptr %313, align 8
  store ptr %2133, ptr %396, align 8
  store i32 9, ptr %314, align 4
  store i32 0, ptr %397, align 4
  %2134 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %133)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %134)
  %2135 = icmp sgt i32 %2098, 0
  br i1 %2135, label %.lr.ph.i3655, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3758.critedge

.lr.ph.i3655:                                     ; preds = %._crit_edge3.1.i1031
  %invariant.gep.i3656 = getelementptr i8, ptr %2076, i64 120
  %offset_tbl.i.i24.i3658 = load ptr, ptr %offset_tbl_ptr.i.i20.i2616, align 8
  %hash_coef.i.i22.i3660 = load i64, ptr %hash_coef_ptr.i.i18.i2614, align 4
  %product.i.i.i25.i3661 = mul i64 %hash_coef.i.i22.i3660, -5261542750394134544
  %shifted.i.i.i26.i3662 = lshr i64 %product.i.i.i25.i3661, 32
  %xored.i.i.i27.i3663 = xor i64 %shifted.i.i.i26.i3662, %product.i.i.i25.i3661
  %tbl_size.i.i23.i3665 = load i64, ptr %tbl_size_ptr.i.i19.i2615, align 4
  %hash.i.i.i28.i3666 = and i64 %xored.i.i.i27.i3663, %tbl_size.i.i23.i3665
  %offset_ptr.i.i29.i3667 = getelementptr i32, ptr %offset_tbl.i.i24.i3658, i64 %hash.i.i.i28.i3666
  %offset.i.i30.i3668 = load i32, ptr %offset_ptr.i.i29.i3667, align 4
  %2136 = insertvalue { ptr, ptr, ptr, i32 } %2081, i32 %offset.i.i30.i3668, 3
  %2137 = sext i32 %offset.i.i30.i3668 to i64
  %gep.i3683 = getelementptr ptr, ptr %invariant.gep.i3656, i64 %2137
  %2138 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %2139

2139:                                             ; preds = %._crit_edge1.i3687, %.lr.ph.i3655
  %.reg2mem13.079.i3684 = phi i32 [ 0, %.lr.ph.i3655 ], [ %2331, %._crit_edge1.i3687 ]
  store ptr @_parameterization_Ptri32, ptr %133, align 8
  %2140 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %133)
  %2141 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %2076)
  %2142 = load ptr, ptr %gep.i3683, align 8
  store ptr @i32_typ, ptr %134, align 8
  %2143 = call ptr %2142({ ptr, ptr, ptr, i32 } %2136, ptr nonnull %134)
  %2144 = call { ptr, i160 } %2143({ ptr, ptr, ptr, i32 } %2136, { ptr, ptr, ptr, i32 } %2136, ptr nonnull %133, i32 %.reg2mem13.079.i3684)
  %.fca.0.extract11.i3685 = extractvalue { ptr, i160 } %2144, 0
  %2145 = icmp ne ptr %.fca.0.extract11.i3685, @nil_typ
  %2146 = icmp ne ptr %.fca.0.extract11.i3685, null
  %.not17.i3686 = and i1 %2145, %2146
  br i1 %.not17.i3686, label %2147, label %._crit_edge1.i3687

2147:                                             ; preds = %2139
  %hash_coef_ptr.i.i33.i3692 = getelementptr i8, ptr %.fca.0.extract11.i3685, i64 8
  %tbl_size_ptr.i.i34.i3693 = getelementptr i8, ptr %.fca.0.extract11.i3685, i64 16
  %offset_tbl_ptr.i.i35.i3694 = getelementptr i8, ptr %.fca.0.extract11.i3685, i64 40
  %2148 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %19)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %20)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %21)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %22)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %23)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %24)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %25)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0680.i4701)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %26)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %27)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %28)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %29)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %30)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %31)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %32)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %33)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i4703)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %34)
  %hash_coef.i.i147.i4722 = load i64, ptr %hash_coef_ptr.i.i33.i3692, align 4
  %tbl_size.i.i148.i4723 = load i64, ptr %tbl_size_ptr.i.i34.i3693, align 4
  %offset_tbl.i.i149.i4724 = load ptr, ptr %offset_tbl_ptr.i.i35.i3694, align 8
  %product.i.i.i150.i4725 = mul i64 %hash_coef.i.i147.i4722, 4015701072841558310
  %shifted.i.i.i151.i4726 = lshr i64 %product.i.i.i150.i4725, 32
  %xored.i.i.i152.i4727 = xor i64 %shifted.i.i.i151.i4726, %product.i.i.i150.i4725
  %hash.i.i.i153.i4728 = and i64 %xored.i.i.i152.i4727, %tbl_size.i.i148.i4723
  %offset_ptr.i.i154.i4729 = getelementptr i32, ptr %offset_tbl.i.i149.i4724, i64 %hash.i.i.i153.i4728
  %offset.i.i169.i4730 = load i32, ptr %offset_ptr.i.i154.i4729, align 4
  %2149 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2150 = load i32, ptr %315, align 4
  %2151 = icmp sgt i32 %2150, 0
  br i1 %2151, label %.lr.ph.i4736, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4856

.lr.ph.i4736:                                     ; preds = %2147
  %.fca.1.extract13.i3688 = extractvalue { ptr, i160 } %2144, 1
  %.sroa.576.8.extract.shift.i3690 = lshr i160 %.fca.1.extract13.i3688, 64
  %2152 = insertelement <2 x i160> poison, i160 %.sroa.576.8.extract.shift.i3690, i64 0
  %2153 = insertelement <2 x i160> %2152, i160 %.fca.1.extract13.i3688, i64 1
  %2154 = trunc <2 x i160> %2153 to <2 x i64>
  %2155 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i3685, 0
  %2156 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2157 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract11.i3685)
  %invariant.gep5032 = getelementptr i8, ptr %.fca.0.extract11.i3685, i64 64
  %2158 = insertvalue { ptr, i160 } undef, ptr %.fca.0.extract11.i3685, 0
  br label %2159

2159:                                             ; preds = %.cont.cont.i4789, %.lr.ph.i4736
  %offset.i.i260.i48065039 = phi i32 [ %offset.i.i169.i4730, %.lr.ph.i4736 ], [ %offset.i.i260.i4806, %.cont.cont.i4789 ]
  %.reg2mem195.0678.i4737 = phi i32 [ 1, %.lr.ph.i4736 ], [ %2314, %.cont.cont.i4789 ]
  %.reg2mem193.0677.i4738 = phi i32 [ 0, %.lr.ph.i4736 ], [ %2319, %.cont.cont.i4789 ]
  %2160 = phi <2 x i64> [ %2154, %.lr.ph.i4736 ], [ %2318, %.cont.cont.i4789 ]
  %2161 = extractelement <2 x i64> %2160, i64 1
  %.sroa.speculated352.i47935035 = inttoptr i64 %2161 to ptr
  %2162 = extractelement <2 x i64> %2160, i64 0
  %.sroa.speculated346.i47945037 = inttoptr i64 %2162 to ptr
  %2163 = insertvalue { ptr, ptr, ptr, i32 } %2155, ptr %.sroa.speculated352.i47935035, 1
  %2164 = insertvalue { ptr, ptr, ptr, i32 } %2163, ptr %.sroa.speculated346.i47945037, 2
  %2165 = insertvalue { ptr, ptr, ptr, i32 } %2164, i32 %offset.i.i260.i48065039, 3
  %2166 = sext i32 %offset.i.i260.i48065039 to i64
  %gep5033 = getelementptr ptr, ptr %invariant.gep5032, i64 %2166
  %2167 = load ptr, ptr %gep5033, align 8
  %2168 = call ptr %2167({ ptr, ptr, ptr, i32 } %2165, ptr nonnull %2)
  %2169 = call i32 %2168({ ptr, ptr, ptr, i32 } %2165, { ptr, ptr, ptr, i32 } %2165, ptr nonnull %2)
  %2170 = icmp eq i32 %.reg2mem195.0678.i4737, 1
  %2171 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br i1 %2170, label %2172, label %2234

2172:                                             ; preds = %2159
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %2173 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2174 = load ptr, ptr %299, align 8
  %2175 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2174, 0
  %2176 = load ptr, ptr %300, align 8
  %2177 = insertvalue { ptr, ptr, ptr, i32 } %2175, ptr %2176, 1
  %2178 = load ptr, ptr %395, align 8
  %2179 = insertvalue { ptr, ptr, ptr, i32 } %2177, ptr %2178, 2
  %2180 = load i32, ptr %301, align 4
  %2181 = insertvalue { ptr, ptr, ptr, i32 } %2179, i32 %2180, 3
  %hash_coef_ptr.i.i10.i5431 = getelementptr i8, ptr %2174, i64 8
  %tbl_size_ptr.i.i11.i5432 = getelementptr i8, ptr %2174, i64 16
  %offset_tbl_ptr.i.i12.i5433 = getelementptr i8, ptr %2174, i64 40
  %hash_coef.i.i13.i5434 = load i64, ptr %hash_coef_ptr.i.i10.i5431, align 4
  %tbl_size.i.i14.i5435 = load i64, ptr %tbl_size_ptr.i.i11.i5432, align 4
  %offset_tbl.i.i15.i5436 = load ptr, ptr %offset_tbl_ptr.i.i12.i5433, align 8
  %product.i.i.i16.i5437 = mul i64 %hash_coef.i.i13.i5434, -5261542750394134544
  %shifted.i.i.i17.i5438 = lshr i64 %product.i.i.i16.i5437, 32
  %xored.i.i.i18.i5439 = xor i64 %shifted.i.i.i17.i5438, %product.i.i.i16.i5437
  %hash.i.i.i19.i5440 = and i64 %xored.i.i.i18.i5439, %tbl_size.i.i14.i5435
  %offset_ptr.i.i20.i5441 = getelementptr i32, ptr %offset_tbl.i.i15.i5436, i64 %hash.i.i.i19.i5440
  %offset.i.i21.i5442 = load i32, ptr %offset_ptr.i.i20.i5441, align 4
  %eq.i.i5443 = icmp eq i32 %2180, %offset.i.i21.i5442
  call void @llvm.assume(i1 %eq.i.i5443) #30
  %2182 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2183 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2174)
  %2184 = sext i32 %2180 to i64
  %2185 = getelementptr ptr, ptr %2174, i64 %2184
  %2186 = getelementptr i8, ptr %2185, i64 64
  %2187 = load ptr, ptr %2186, align 8
  %2188 = call ptr %2187({ ptr, ptr, ptr, i32 } %2181, ptr nonnull %2)
  %2189 = call i32 %2188({ ptr, ptr, ptr, i32 } %2181, { ptr, ptr, ptr, i32 } %2181, ptr nonnull %2)
  %2190 = add i32 %2189, -1
  %2191 = and i32 %2190, %2169
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %2192 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2193 = load ptr, ptr %299, align 8
  %2194 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2193, 0
  %2195 = load ptr, ptr %300, align 8
  %2196 = insertvalue { ptr, ptr, ptr, i32 } %2194, ptr %2195, 1
  %2197 = load ptr, ptr %395, align 8
  %2198 = insertvalue { ptr, ptr, ptr, i32 } %2196, ptr %2197, 2
  %2199 = load i32, ptr %301, align 4
  %2200 = insertvalue { ptr, ptr, ptr, i32 } %2198, i32 %2199, 3
  %hash_coef_ptr.i.i172.i4811 = getelementptr i8, ptr %2193, i64 8
  %tbl_size_ptr.i.i173.i4812 = getelementptr i8, ptr %2193, i64 16
  %offset_tbl_ptr.i.i174.i4813 = getelementptr i8, ptr %2193, i64 40
  %hash_coef.i.i175.i4814 = load i64, ptr %hash_coef_ptr.i.i172.i4811, align 4
  %tbl_size.i.i176.i4815 = load i64, ptr %tbl_size_ptr.i.i173.i4812, align 4
  %offset_tbl.i.i177.i4816 = load ptr, ptr %offset_tbl_ptr.i.i174.i4813, align 8
  %product.i.i.i178.i4817 = mul i64 %hash_coef.i.i175.i4814, -5261542750394134544
  %shifted.i.i.i179.i4818 = lshr i64 %product.i.i.i178.i4817, 32
  %xored.i.i.i180.i4819 = xor i64 %shifted.i.i.i179.i4818, %product.i.i.i178.i4817
  %hash.i.i.i181.i4820 = and i64 %xored.i.i.i180.i4819, %tbl_size.i.i176.i4815
  %offset_ptr.i.i182.i4821 = getelementptr i32, ptr %offset_tbl.i.i177.i4816, i64 %hash.i.i.i181.i4820
  %offset.i.i183.i4822 = load i32, ptr %offset_ptr.i.i182.i4821, align 4
  %eq.i.i4823 = icmp eq i32 %2199, %offset.i.i183.i4822
  call void @llvm.assume(i1 %eq.i.i4823) #30
  store ptr @_parameterization_Ptri32, ptr %19, align 8
  %2201 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %19)
  %2202 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2193)
  %2203 = sext i32 %2199 to i64
  %2204 = getelementptr ptr, ptr %2193, i64 %2203
  %2205 = getelementptr i8, ptr %2204, i64 120
  %2206 = load ptr, ptr %2205, align 8
  store ptr @i32_typ, ptr %20, align 8
  %2207 = call ptr %2206({ ptr, ptr, ptr, i32 } %2200, ptr nonnull %20)
  %2208 = call { ptr, i160 } %2207({ ptr, ptr, ptr, i32 } %2200, { ptr, ptr, ptr, i32 } %2200, ptr nonnull %19, i32 %2191)
  %.fca.0.extract112.i4824 = extractvalue { ptr, i160 } %2208, 0
  %.sroa.3111.0.insert.ext.i4825 = zext i32 %offset.i.i260.i48065039 to i160
  %.sroa.3111.0.insert.shift.i4826 = shl nuw i160 %.sroa.3111.0.insert.ext.i4825, 128
  %.sroa.2110.0.insert.ext.i4827 = zext i64 %2162 to i160
  %.sroa.2110.0.insert.shift.i4828 = shl nuw nsw i160 %.sroa.2110.0.insert.ext.i4827, 64
  %.sroa.2110.0.insert.insert.i4829 = or disjoint i160 %.sroa.2110.0.insert.shift.i4828, %.sroa.3111.0.insert.shift.i4826
  %.sroa.0109.0.insert.ext.i4830 = zext i64 %2161 to i160
  %.sroa.0109.0.insert.insert.i4831 = or disjoint i160 %.sroa.2110.0.insert.insert.i4829, %.sroa.0109.0.insert.ext.i4830
  %2209 = insertvalue { ptr, i160 } %2158, i160 %.sroa.0109.0.insert.insert.i4831, 1
  %2210 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2211 = load ptr, ptr %299, align 8
  %2212 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2211, 0
  %2213 = load ptr, ptr %300, align 8
  %2214 = insertvalue { ptr, ptr, ptr, i32 } %2212, ptr %2213, 1
  %2215 = load ptr, ptr %395, align 8
  %2216 = insertvalue { ptr, ptr, ptr, i32 } %2214, ptr %2215, 2
  %2217 = load i32, ptr %301, align 4
  %2218 = insertvalue { ptr, ptr, ptr, i32 } %2216, i32 %2217, 3
  %hash_coef_ptr.i.i186.i4836 = getelementptr i8, ptr %2211, i64 8
  %tbl_size_ptr.i.i187.i4837 = getelementptr i8, ptr %2211, i64 16
  %offset_tbl_ptr.i.i188.i4838 = getelementptr i8, ptr %2211, i64 40
  %hash_coef.i.i189.i4839 = load i64, ptr %hash_coef_ptr.i.i186.i4836, align 4
  %tbl_size.i.i190.i4840 = load i64, ptr %tbl_size_ptr.i.i187.i4837, align 4
  %offset_tbl.i.i191.i4841 = load ptr, ptr %offset_tbl_ptr.i.i188.i4838, align 8
  %product.i.i.i192.i4842 = mul i64 %hash_coef.i.i189.i4839, -5261542750394134544
  %shifted.i.i.i193.i4843 = lshr i64 %product.i.i.i192.i4842, 32
  %xored.i.i.i194.i4844 = xor i64 %shifted.i.i.i193.i4843, %product.i.i.i192.i4842
  %hash.i.i.i195.i4845 = and i64 %xored.i.i.i194.i4844, %tbl_size.i.i190.i4840
  %offset_ptr.i.i196.i4846 = getelementptr i32, ptr %offset_tbl.i.i191.i4841, i64 %hash.i.i.i195.i4845
  %offset.i.i197.i4847 = load i32, ptr %offset_ptr.i.i196.i4846, align 4
  %eq.i200.i4848 = icmp eq i32 %2217, %offset.i.i197.i4847
  call void @llvm.assume(i1 %eq.i200.i4848) #30
  %2219 = load ptr, ptr %result.i, align 8
  %2220 = load ptr, ptr %282, align 8
  %result.i.i4849 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2221 = getelementptr i8, ptr %result.i.i4849, i64 16
  store ptr %2220, ptr %2221, align 8
  %2222 = getelementptr i8, ptr %result.i.i4849, i64 8
  store ptr %2219, ptr %2222, align 8
  %2223 = getelementptr i8, ptr %result.i.i4849, i64 24
  store ptr null, ptr %2223, align 8
  %2224 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i4849)
  store ptr @Entry, ptr %result.i.i4849, align 8
  store ptr @_parameterization_Ptri32, ptr %21, align 8
  store ptr %result.i.i4849, ptr %488, align 8
  %2225 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %21)
  %2226 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2211)
  %2227 = sext i32 %2217 to i64
  %2228 = getelementptr ptr, ptr %2211, i64 %2227
  %2229 = getelementptr i8, ptr %2228, i64 128
  %2230 = load ptr, ptr %2229, align 8
  store ptr @i32_typ, ptr %22, align 8
  store ptr %.fca.0.extract11.i3685, ptr %489, align 8
  %2231 = call ptr %2230({ ptr, ptr, ptr, i32 } %2218, ptr nonnull %22)
  call void %2231({ ptr, ptr, ptr, i32 } %2218, { ptr, ptr, ptr, i32 } %2218, ptr nonnull %21, i32 %2191, { ptr, i160 } %2209)
  %2232 = icmp ne ptr %.fca.0.extract112.i4824, @nil_typ
  %2233 = icmp ne ptr %.fca.0.extract112.i4824, null
  %.not140.i4850 = and i1 %2232, %2233
  br i1 %.not140.i4850, label %.cont.cont.i4789, label %2322

2234:                                             ; preds = %2159
  %2235 = add i32 %2169, 2127912214
  %2236 = shl i32 %2169, 12
  %2237 = add i32 %2235, %2236
  %2238 = ashr i32 %2237, 19
  %2239 = xor i32 %2237, %2238
  %2240 = xor i32 %2239, -949894596
  %2241 = add i32 %2240, 374761393
  %2242 = shl i32 %2240, 5
  %2243 = add i32 %2241, %2242
  %2244 = add i32 %2243, -744332180
  %2245 = shl i32 %2243, 9
  %2246 = xor i32 %2244, %2245
  %2247 = add i32 %2246, -42973499
  %2248 = shl i32 %2246, 3
  %2249 = add i32 %2247, %2248
  %2250 = ashr i32 %2249, 16
  %2251 = xor i32 %2249, %2250
  %2252 = xor i32 %2251, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %2253 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2254 = load ptr, ptr %312, align 8
  %2255 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2254, 0
  %2256 = load ptr, ptr %313, align 8
  %2257 = insertvalue { ptr, ptr, ptr, i32 } %2255, ptr %2256, 1
  %2258 = load ptr, ptr %396, align 8
  %2259 = insertvalue { ptr, ptr, ptr, i32 } %2257, ptr %2258, 2
  %2260 = load i32, ptr %314, align 4
  %2261 = insertvalue { ptr, ptr, ptr, i32 } %2259, i32 %2260, 3
  %hash_coef_ptr.i.i10.i5461 = getelementptr i8, ptr %2254, i64 8
  %tbl_size_ptr.i.i11.i5462 = getelementptr i8, ptr %2254, i64 16
  %offset_tbl_ptr.i.i12.i5463 = getelementptr i8, ptr %2254, i64 40
  %hash_coef.i.i13.i5464 = load i64, ptr %hash_coef_ptr.i.i10.i5461, align 4
  %tbl_size.i.i14.i5465 = load i64, ptr %tbl_size_ptr.i.i11.i5462, align 4
  %offset_tbl.i.i15.i5466 = load ptr, ptr %offset_tbl_ptr.i.i12.i5463, align 8
  %product.i.i.i16.i5467 = mul i64 %hash_coef.i.i13.i5464, -5261542750394134544
  %shifted.i.i.i17.i5468 = lshr i64 %product.i.i.i16.i5467, 32
  %xored.i.i.i18.i5469 = xor i64 %shifted.i.i.i17.i5468, %product.i.i.i16.i5467
  %hash.i.i.i19.i5470 = and i64 %xored.i.i.i18.i5469, %tbl_size.i.i14.i5465
  %offset_ptr.i.i20.i5471 = getelementptr i32, ptr %offset_tbl.i.i15.i5466, i64 %hash.i.i.i19.i5470
  %offset.i.i21.i5472 = load i32, ptr %offset_ptr.i.i20.i5471, align 4
  %eq.i.i5473 = icmp eq i32 %2260, %offset.i.i21.i5472
  call void @llvm.assume(i1 %eq.i.i5473) #30
  %2262 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2263 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2254)
  %2264 = sext i32 %2260 to i64
  %2265 = getelementptr ptr, ptr %2254, i64 %2264
  %2266 = getelementptr i8, ptr %2265, i64 64
  %2267 = load ptr, ptr %2266, align 8
  %2268 = call ptr %2267({ ptr, ptr, ptr, i32 } %2261, ptr nonnull %2)
  %2269 = call i32 %2268({ ptr, ptr, ptr, i32 } %2261, { ptr, ptr, ptr, i32 } %2261, ptr nonnull %2)
  %2270 = add i32 %2269, -1
  %2271 = and i32 %2270, %2252
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %2272 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2273 = load ptr, ptr %312, align 8
  %2274 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2273, 0
  %2275 = load ptr, ptr %313, align 8
  %2276 = insertvalue { ptr, ptr, ptr, i32 } %2274, ptr %2275, 1
  %2277 = load ptr, ptr %396, align 8
  %2278 = insertvalue { ptr, ptr, ptr, i32 } %2276, ptr %2277, 2
  %2279 = load i32, ptr %314, align 4
  %2280 = insertvalue { ptr, ptr, ptr, i32 } %2278, i32 %2279, 3
  %hash_coef_ptr.i.i202.i4743 = getelementptr i8, ptr %2273, i64 8
  %tbl_size_ptr.i.i203.i4744 = getelementptr i8, ptr %2273, i64 16
  %offset_tbl_ptr.i.i204.i4745 = getelementptr i8, ptr %2273, i64 40
  %hash_coef.i.i205.i4746 = load i64, ptr %hash_coef_ptr.i.i202.i4743, align 4
  %tbl_size.i.i206.i4747 = load i64, ptr %tbl_size_ptr.i.i203.i4744, align 4
  %offset_tbl.i.i207.i4748 = load ptr, ptr %offset_tbl_ptr.i.i204.i4745, align 8
  %product.i.i.i208.i4749 = mul i64 %hash_coef.i.i205.i4746, -5261542750394134544
  %shifted.i.i.i209.i4750 = lshr i64 %product.i.i.i208.i4749, 32
  %xored.i.i.i210.i4751 = xor i64 %shifted.i.i.i209.i4750, %product.i.i.i208.i4749
  %hash.i.i.i211.i4752 = and i64 %xored.i.i.i210.i4751, %tbl_size.i.i206.i4747
  %offset_ptr.i.i212.i4753 = getelementptr i32, ptr %offset_tbl.i.i207.i4748, i64 %hash.i.i.i211.i4752
  %offset.i.i213.i4754 = load i32, ptr %offset_ptr.i.i212.i4753, align 4
  %eq.i216.i4755 = icmp eq i32 %2279, %offset.i.i213.i4754
  call void @llvm.assume(i1 %eq.i216.i4755) #30
  store ptr @_parameterization_Ptri32, ptr %27, align 8
  %2281 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %27)
  %2282 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2273)
  %2283 = sext i32 %2279 to i64
  %2284 = getelementptr ptr, ptr %2273, i64 %2283
  %2285 = getelementptr i8, ptr %2284, i64 120
  %2286 = load ptr, ptr %2285, align 8
  store ptr @i32_typ, ptr %28, align 8
  %2287 = call ptr %2286({ ptr, ptr, ptr, i32 } %2280, ptr nonnull %28)
  %2288 = call { ptr, i160 } %2287({ ptr, ptr, ptr, i32 } %2280, { ptr, ptr, ptr, i32 } %2280, ptr nonnull %27, i32 %2271)
  %.fca.0.extract87.i4756 = extractvalue { ptr, i160 } %2288, 0
  %.sroa.3.0.insert.ext.i4757 = zext i32 %offset.i.i260.i48065039 to i160
  %.sroa.3.0.insert.shift.i4758 = shl nuw i160 %.sroa.3.0.insert.ext.i4757, 128
  %.sroa.2.0.insert.ext.i4759 = zext i64 %2162 to i160
  %.sroa.2.0.insert.shift.i4760 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i4759, 64
  %.sroa.2.0.insert.insert.i4761 = or disjoint i160 %.sroa.2.0.insert.shift.i4760, %.sroa.3.0.insert.shift.i4758
  %.sroa.0.0.insert.ext.i4762 = zext i64 %2161 to i160
  %.sroa.0.0.insert.insert.i4763 = or disjoint i160 %.sroa.2.0.insert.insert.i4761, %.sroa.0.0.insert.ext.i4762
  %2289 = insertvalue { ptr, i160 } %2158, i160 %.sroa.0.0.insert.insert.i4763, 1
  %2290 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2291 = load ptr, ptr %312, align 8
  %2292 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2291, 0
  %2293 = load ptr, ptr %313, align 8
  %2294 = insertvalue { ptr, ptr, ptr, i32 } %2292, ptr %2293, 1
  %2295 = load ptr, ptr %396, align 8
  %2296 = insertvalue { ptr, ptr, ptr, i32 } %2294, ptr %2295, 2
  %2297 = load i32, ptr %314, align 4
  %2298 = insertvalue { ptr, ptr, ptr, i32 } %2296, i32 %2297, 3
  %hash_coef_ptr.i.i218.i4768 = getelementptr i8, ptr %2291, i64 8
  %tbl_size_ptr.i.i219.i4769 = getelementptr i8, ptr %2291, i64 16
  %offset_tbl_ptr.i.i220.i4770 = getelementptr i8, ptr %2291, i64 40
  %hash_coef.i.i221.i4771 = load i64, ptr %hash_coef_ptr.i.i218.i4768, align 4
  %tbl_size.i.i222.i4772 = load i64, ptr %tbl_size_ptr.i.i219.i4769, align 4
  %offset_tbl.i.i223.i4773 = load ptr, ptr %offset_tbl_ptr.i.i220.i4770, align 8
  %product.i.i.i224.i4774 = mul i64 %hash_coef.i.i221.i4771, -5261542750394134544
  %shifted.i.i.i225.i4775 = lshr i64 %product.i.i.i224.i4774, 32
  %xored.i.i.i226.i4776 = xor i64 %shifted.i.i.i225.i4775, %product.i.i.i224.i4774
  %hash.i.i.i227.i4777 = and i64 %xored.i.i.i226.i4776, %tbl_size.i.i222.i4772
  %offset_ptr.i.i228.i4778 = getelementptr i32, ptr %offset_tbl.i.i223.i4773, i64 %hash.i.i.i227.i4777
  %offset.i.i229.i4779 = load i32, ptr %offset_ptr.i.i228.i4778, align 4
  %eq.i232.i4780 = icmp eq i32 %2297, %offset.i.i229.i4779
  call void @llvm.assume(i1 %eq.i232.i4780) #30
  %2299 = load ptr, ptr %result.i, align 8
  %2300 = load ptr, ptr %282, align 8
  %result.i233.i4781 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2301 = getelementptr i8, ptr %result.i233.i4781, i64 16
  store ptr %2300, ptr %2301, align 8
  %2302 = getelementptr i8, ptr %result.i233.i4781, i64 8
  store ptr %2299, ptr %2302, align 8
  %2303 = getelementptr i8, ptr %result.i233.i4781, i64 24
  store ptr null, ptr %2303, align 8
  %2304 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i233.i4781)
  store ptr @Entry, ptr %result.i233.i4781, align 8
  store ptr @_parameterization_Ptri32, ptr %29, align 8
  store ptr %result.i233.i4781, ptr %486, align 8
  %2305 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %29)
  %2306 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2291)
  %2307 = sext i32 %2297 to i64
  %2308 = getelementptr ptr, ptr %2291, i64 %2307
  %2309 = getelementptr i8, ptr %2308, i64 128
  %2310 = load ptr, ptr %2309, align 8
  store ptr @i32_typ, ptr %30, align 8
  store ptr %.fca.0.extract11.i3685, ptr %487, align 8
  %2311 = call ptr %2310({ ptr, ptr, ptr, i32 } %2298, ptr nonnull %30)
  call void %2311({ ptr, ptr, ptr, i32 } %2298, { ptr, ptr, ptr, i32 } %2298, ptr nonnull %29, i32 %2271, { ptr, i160 } %2289)
  %2312 = icmp ne ptr %.fca.0.extract87.i4756, @nil_typ
  %2313 = icmp ne ptr %.fca.0.extract87.i4756, null
  %.not138.i4782 = and i1 %2312, %2313
  br i1 %.not138.i4782, label %.cont.cont.i4789, label %2322

.cont.cont.i4789:                                 ; preds = %2234, %2172
  %.sink5064 = phi { ptr, i160 } [ %2208, %2172 ], [ %2288, %2234 ]
  %2314 = phi i32 [ 2, %2172 ], [ 1, %2234 ]
  %vptr.i248.sroa.speculated.i4792 = phi ptr [ %.fca.0.extract112.i4824, %2172 ], [ %.fca.0.extract87.i4756, %2234 ]
  %.fca.1.extract89.i4785 = extractvalue { ptr, i160 } %.sink5064, 1
  %.sroa.3407.sroa.4.0.extract.shift.i4786 = lshr i160 %.fca.1.extract89.i4785, 64
  %2315 = trunc i160 %.sroa.3407.sroa.4.0.extract.shift.i4786 to i64
  %2316 = insertelement <2 x i64> poison, i64 %2315, i64 0
  %2317 = trunc i160 %.fca.1.extract89.i4785 to i64
  %2318 = insertelement <2 x i64> %2316, i64 %2317, i64 1
  %hash_coef_ptr.i.i249.i4795 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i4792, i64 8
  %tbl_size_ptr.i.i250.i4796 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i4792, i64 16
  %offset_tbl_ptr.i.i251.i4797 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i4792, i64 40
  %hash_coef.i.i252.i4798 = load i64, ptr %hash_coef_ptr.i.i249.i4795, align 4
  %tbl_size.i.i253.i4799 = load i64, ptr %tbl_size_ptr.i.i250.i4796, align 4
  %offset_tbl.i.i254.i4800 = load ptr, ptr %offset_tbl_ptr.i.i251.i4797, align 8
  %product.i.i.i255.i4801 = mul i64 %hash_coef.i.i252.i4798, 4015701072841558310
  %shifted.i.i.i256.i4802 = lshr i64 %product.i.i.i255.i4801, 32
  %xored.i.i.i257.i4803 = xor i64 %shifted.i.i.i256.i4802, %product.i.i.i255.i4801
  %hash.i.i.i258.i4804 = and i64 %xored.i.i.i257.i4803, %tbl_size.i.i253.i4799
  %offset_ptr.i.i259.i4805 = getelementptr i32, ptr %offset_tbl.i.i254.i4800, i64 %hash.i.i.i258.i4804
  %offset.i.i260.i4806 = load i32, ptr %offset_ptr.i.i259.i4805, align 4
  %2319 = add nuw nsw i32 %.reg2mem193.0677.i4738, 1
  %2320 = load i32, ptr %315, align 4
  %2321 = icmp slt i32 %2319, %2320
  br i1 %2321, label %2159, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4856

2322:                                             ; preds = %2234, %2172
  %2323 = phi ptr [ %31, %2234 ], [ %23, %2172 ]
  %2324 = phi ptr [ %32, %2234 ], [ %24, %2172 ]
  %2325 = phi ptr [ %33, %2234 ], [ %25, %2172 ]
  %2326 = phi ptr [ %.sroa.0.i4703, %2234 ], [ %.sroa.0680.i4701, %2172 ]
  %2327 = phi ptr [ %34, %2234 ], [ %26, %2172 ]
  %2328 = load i32, ptr %397, align 4
  store i32 %2328, ptr %2323, align 4
  store i32 1, ptr %2324, align 4
  %2329 = add i32 %2328, 1
  store i32 %2329, ptr %2325, align 4
  %2330 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  store i32 %2329, ptr %397, align 4
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %2327, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %2326, align 8
  br label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4856

HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4856: ; preds = %.cont.cont.i4789, %2147, %2322
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %19)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %20)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %21)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %22)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %23)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %24)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %25)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i4701)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %26)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %27)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %28)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %29)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %30)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %31)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %32)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %33)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i4703)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %34)
  br label %._crit_edge1.i3687

._crit_edge1.i3687:                               ; preds = %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4856, %2139
  %2331 = add nuw nsw i32 %.reg2mem13.079.i3684, 1
  %2332 = icmp slt i32 %2331, %2098
  br i1 %2332, label %2139, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3705

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3705: ; preds = %._crit_edge1.i3687
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %133)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %134)
  %2333 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %131)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %132)
  %invariant.gep.i3709 = getelementptr i8, ptr %2084, i64 120
  %offset_tbl.i.i24.i3711 = load ptr, ptr %offset_tbl_ptr.i.i48.i2633, align 8
  %hash_coef.i.i22.i3713 = load i64, ptr %hash_coef_ptr.i.i46.i2631, align 4
  %product.i.i.i25.i3714 = mul i64 %hash_coef.i.i22.i3713, -5261542750394134544
  %shifted.i.i.i26.i3715 = lshr i64 %product.i.i.i25.i3714, 32
  %xored.i.i.i27.i3716 = xor i64 %shifted.i.i.i26.i3715, %product.i.i.i25.i3714
  %tbl_size.i.i23.i3718 = load i64, ptr %tbl_size_ptr.i.i47.i2632, align 4
  %hash.i.i.i28.i3719 = and i64 %xored.i.i.i27.i3716, %tbl_size.i.i23.i3718
  %offset_ptr.i.i29.i3720 = getelementptr i32, ptr %offset_tbl.i.i24.i3711, i64 %hash.i.i.i28.i3719
  %offset.i.i30.i3721 = load i32, ptr %offset_ptr.i.i29.i3720, align 4
  %2334 = insertvalue { ptr, ptr, ptr, i32 } %2089, i32 %offset.i.i30.i3721, 3
  %2335 = sext i32 %offset.i.i30.i3721 to i64
  %gep.i3736 = getelementptr ptr, ptr %invariant.gep.i3709, i64 %2335
  %2336 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %2337

2337:                                             ; preds = %._crit_edge1.i3740, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3705
  %.reg2mem13.079.i3737 = phi i32 [ 0, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3705 ], [ %2529, %._crit_edge1.i3740 ]
  store ptr @_parameterization_Ptri32, ptr %131, align 8
  %2338 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %131)
  %2339 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %2084)
  %2340 = load ptr, ptr %gep.i3736, align 8
  store ptr @i32_typ, ptr %132, align 8
  %2341 = call ptr %2340({ ptr, ptr, ptr, i32 } %2334, ptr nonnull %132)
  %2342 = call { ptr, i160 } %2341({ ptr, ptr, ptr, i32 } %2334, { ptr, ptr, ptr, i32 } %2334, ptr nonnull %131, i32 %.reg2mem13.079.i3737)
  %.fca.0.extract11.i3738 = extractvalue { ptr, i160 } %2342, 0
  %2343 = icmp ne ptr %.fca.0.extract11.i3738, @nil_typ
  %2344 = icmp ne ptr %.fca.0.extract11.i3738, null
  %.not17.i3739 = and i1 %2343, %2344
  br i1 %.not17.i3739, label %2345, label %._crit_edge1.i3740

2345:                                             ; preds = %2337
  %hash_coef_ptr.i.i33.i3745 = getelementptr i8, ptr %.fca.0.extract11.i3738, i64 8
  %tbl_size_ptr.i.i34.i3746 = getelementptr i8, ptr %.fca.0.extract11.i3738, i64 16
  %offset_tbl_ptr.i.i35.i3747 = getelementptr i8, ptr %.fca.0.extract11.i3738, i64 40
  %2346 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %5)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %6)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %7)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %8)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %9)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0680.i4857)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %11)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %12)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %13)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %14)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %15)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %16)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %17)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i4859)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %18)
  %hash_coef.i.i147.i4878 = load i64, ptr %hash_coef_ptr.i.i33.i3745, align 4
  %tbl_size.i.i148.i4879 = load i64, ptr %tbl_size_ptr.i.i34.i3746, align 4
  %offset_tbl.i.i149.i4880 = load ptr, ptr %offset_tbl_ptr.i.i35.i3747, align 8
  %product.i.i.i150.i4881 = mul i64 %hash_coef.i.i147.i4878, 4015701072841558310
  %shifted.i.i.i151.i4882 = lshr i64 %product.i.i.i150.i4881, 32
  %xored.i.i.i152.i4883 = xor i64 %shifted.i.i.i151.i4882, %product.i.i.i150.i4881
  %hash.i.i.i153.i4884 = and i64 %xored.i.i.i152.i4883, %tbl_size.i.i148.i4879
  %offset_ptr.i.i154.i4885 = getelementptr i32, ptr %offset_tbl.i.i149.i4880, i64 %hash.i.i.i153.i4884
  %offset.i.i169.i4886 = load i32, ptr %offset_ptr.i.i154.i4885, align 4
  %2347 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2348 = load i32, ptr %315, align 4
  %2349 = icmp sgt i32 %2348, 0
  br i1 %2349, label %.lr.ph.i4892, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit5012

.lr.ph.i4892:                                     ; preds = %2345
  %.fca.1.extract13.i3741 = extractvalue { ptr, i160 } %2342, 1
  %.sroa.576.8.extract.shift.i3743 = lshr i160 %.fca.1.extract13.i3741, 64
  %2350 = insertelement <2 x i160> poison, i160 %.sroa.576.8.extract.shift.i3743, i64 0
  %2351 = insertelement <2 x i160> %2350, i160 %.fca.1.extract13.i3741, i64 1
  %2352 = trunc <2 x i160> %2351 to <2 x i64>
  %2353 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i3738, 0
  %2354 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2355 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract11.i3738)
  %invariant.gep5040 = getelementptr i8, ptr %.fca.0.extract11.i3738, i64 64
  %2356 = insertvalue { ptr, i160 } undef, ptr %.fca.0.extract11.i3738, 0
  br label %2357

2357:                                             ; preds = %.cont.cont.i4945, %.lr.ph.i4892
  %offset.i.i260.i49625047 = phi i32 [ %offset.i.i169.i4886, %.lr.ph.i4892 ], [ %offset.i.i260.i4962, %.cont.cont.i4945 ]
  %.reg2mem195.0678.i4893 = phi i32 [ 1, %.lr.ph.i4892 ], [ %2512, %.cont.cont.i4945 ]
  %.reg2mem193.0677.i4894 = phi i32 [ 0, %.lr.ph.i4892 ], [ %2517, %.cont.cont.i4945 ]
  %2358 = phi <2 x i64> [ %2352, %.lr.ph.i4892 ], [ %2516, %.cont.cont.i4945 ]
  %2359 = extractelement <2 x i64> %2358, i64 1
  %.sroa.speculated352.i49495043 = inttoptr i64 %2359 to ptr
  %2360 = extractelement <2 x i64> %2358, i64 0
  %.sroa.speculated346.i49505045 = inttoptr i64 %2360 to ptr
  %2361 = insertvalue { ptr, ptr, ptr, i32 } %2353, ptr %.sroa.speculated352.i49495043, 1
  %2362 = insertvalue { ptr, ptr, ptr, i32 } %2361, ptr %.sroa.speculated346.i49505045, 2
  %2363 = insertvalue { ptr, ptr, ptr, i32 } %2362, i32 %offset.i.i260.i49625047, 3
  %2364 = sext i32 %offset.i.i260.i49625047 to i64
  %gep5041 = getelementptr ptr, ptr %invariant.gep5040, i64 %2364
  %2365 = load ptr, ptr %gep5041, align 8
  %2366 = call ptr %2365({ ptr, ptr, ptr, i32 } %2363, ptr nonnull %2)
  %2367 = call i32 %2366({ ptr, ptr, ptr, i32 } %2363, { ptr, ptr, ptr, i32 } %2363, ptr nonnull %2)
  %2368 = icmp eq i32 %.reg2mem195.0678.i4893, 1
  %2369 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br i1 %2368, label %2370, label %2432

2370:                                             ; preds = %2357
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %2371 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2372 = load ptr, ptr %299, align 8
  %2373 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2372, 0
  %2374 = load ptr, ptr %300, align 8
  %2375 = insertvalue { ptr, ptr, ptr, i32 } %2373, ptr %2374, 1
  %2376 = load ptr, ptr %395, align 8
  %2377 = insertvalue { ptr, ptr, ptr, i32 } %2375, ptr %2376, 2
  %2378 = load i32, ptr %301, align 4
  %2379 = insertvalue { ptr, ptr, ptr, i32 } %2377, i32 %2378, 3
  %hash_coef_ptr.i.i10.i5491 = getelementptr i8, ptr %2372, i64 8
  %tbl_size_ptr.i.i11.i5492 = getelementptr i8, ptr %2372, i64 16
  %offset_tbl_ptr.i.i12.i5493 = getelementptr i8, ptr %2372, i64 40
  %hash_coef.i.i13.i5494 = load i64, ptr %hash_coef_ptr.i.i10.i5491, align 4
  %tbl_size.i.i14.i5495 = load i64, ptr %tbl_size_ptr.i.i11.i5492, align 4
  %offset_tbl.i.i15.i5496 = load ptr, ptr %offset_tbl_ptr.i.i12.i5493, align 8
  %product.i.i.i16.i5497 = mul i64 %hash_coef.i.i13.i5494, -5261542750394134544
  %shifted.i.i.i17.i5498 = lshr i64 %product.i.i.i16.i5497, 32
  %xored.i.i.i18.i5499 = xor i64 %shifted.i.i.i17.i5498, %product.i.i.i16.i5497
  %hash.i.i.i19.i5500 = and i64 %xored.i.i.i18.i5499, %tbl_size.i.i14.i5495
  %offset_ptr.i.i20.i5501 = getelementptr i32, ptr %offset_tbl.i.i15.i5496, i64 %hash.i.i.i19.i5500
  %offset.i.i21.i5502 = load i32, ptr %offset_ptr.i.i20.i5501, align 4
  %eq.i.i5503 = icmp eq i32 %2378, %offset.i.i21.i5502
  call void @llvm.assume(i1 %eq.i.i5503) #30
  %2380 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2381 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2372)
  %2382 = sext i32 %2378 to i64
  %2383 = getelementptr ptr, ptr %2372, i64 %2382
  %2384 = getelementptr i8, ptr %2383, i64 64
  %2385 = load ptr, ptr %2384, align 8
  %2386 = call ptr %2385({ ptr, ptr, ptr, i32 } %2379, ptr nonnull %2)
  %2387 = call i32 %2386({ ptr, ptr, ptr, i32 } %2379, { ptr, ptr, ptr, i32 } %2379, ptr nonnull %2)
  %2388 = add i32 %2387, -1
  %2389 = and i32 %2388, %2367
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %2390 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2391 = load ptr, ptr %299, align 8
  %2392 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2391, 0
  %2393 = load ptr, ptr %300, align 8
  %2394 = insertvalue { ptr, ptr, ptr, i32 } %2392, ptr %2393, 1
  %2395 = load ptr, ptr %395, align 8
  %2396 = insertvalue { ptr, ptr, ptr, i32 } %2394, ptr %2395, 2
  %2397 = load i32, ptr %301, align 4
  %2398 = insertvalue { ptr, ptr, ptr, i32 } %2396, i32 %2397, 3
  %hash_coef_ptr.i.i172.i4967 = getelementptr i8, ptr %2391, i64 8
  %tbl_size_ptr.i.i173.i4968 = getelementptr i8, ptr %2391, i64 16
  %offset_tbl_ptr.i.i174.i4969 = getelementptr i8, ptr %2391, i64 40
  %hash_coef.i.i175.i4970 = load i64, ptr %hash_coef_ptr.i.i172.i4967, align 4
  %tbl_size.i.i176.i4971 = load i64, ptr %tbl_size_ptr.i.i173.i4968, align 4
  %offset_tbl.i.i177.i4972 = load ptr, ptr %offset_tbl_ptr.i.i174.i4969, align 8
  %product.i.i.i178.i4973 = mul i64 %hash_coef.i.i175.i4970, -5261542750394134544
  %shifted.i.i.i179.i4974 = lshr i64 %product.i.i.i178.i4973, 32
  %xored.i.i.i180.i4975 = xor i64 %shifted.i.i.i179.i4974, %product.i.i.i178.i4973
  %hash.i.i.i181.i4976 = and i64 %xored.i.i.i180.i4975, %tbl_size.i.i176.i4971
  %offset_ptr.i.i182.i4977 = getelementptr i32, ptr %offset_tbl.i.i177.i4972, i64 %hash.i.i.i181.i4976
  %offset.i.i183.i4978 = load i32, ptr %offset_ptr.i.i182.i4977, align 4
  %eq.i.i4979 = icmp eq i32 %2397, %offset.i.i183.i4978
  call void @llvm.assume(i1 %eq.i.i4979) #30
  store ptr @_parameterization_Ptri32, ptr %3, align 8
  %2399 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %3)
  %2400 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2391)
  %2401 = sext i32 %2397 to i64
  %2402 = getelementptr ptr, ptr %2391, i64 %2401
  %2403 = getelementptr i8, ptr %2402, i64 120
  %2404 = load ptr, ptr %2403, align 8
  store ptr @i32_typ, ptr %4, align 8
  %2405 = call ptr %2404({ ptr, ptr, ptr, i32 } %2398, ptr nonnull %4)
  %2406 = call { ptr, i160 } %2405({ ptr, ptr, ptr, i32 } %2398, { ptr, ptr, ptr, i32 } %2398, ptr nonnull %3, i32 %2389)
  %.fca.0.extract112.i4980 = extractvalue { ptr, i160 } %2406, 0
  %.sroa.3111.0.insert.ext.i4981 = zext i32 %offset.i.i260.i49625047 to i160
  %.sroa.3111.0.insert.shift.i4982 = shl nuw i160 %.sroa.3111.0.insert.ext.i4981, 128
  %.sroa.2110.0.insert.ext.i4983 = zext i64 %2360 to i160
  %.sroa.2110.0.insert.shift.i4984 = shl nuw nsw i160 %.sroa.2110.0.insert.ext.i4983, 64
  %.sroa.2110.0.insert.insert.i4985 = or disjoint i160 %.sroa.2110.0.insert.shift.i4984, %.sroa.3111.0.insert.shift.i4982
  %.sroa.0109.0.insert.ext.i4986 = zext i64 %2359 to i160
  %.sroa.0109.0.insert.insert.i4987 = or disjoint i160 %.sroa.2110.0.insert.insert.i4985, %.sroa.0109.0.insert.ext.i4986
  %2407 = insertvalue { ptr, i160 } %2356, i160 %.sroa.0109.0.insert.insert.i4987, 1
  %2408 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2409 = load ptr, ptr %299, align 8
  %2410 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2409, 0
  %2411 = load ptr, ptr %300, align 8
  %2412 = insertvalue { ptr, ptr, ptr, i32 } %2410, ptr %2411, 1
  %2413 = load ptr, ptr %395, align 8
  %2414 = insertvalue { ptr, ptr, ptr, i32 } %2412, ptr %2413, 2
  %2415 = load i32, ptr %301, align 4
  %2416 = insertvalue { ptr, ptr, ptr, i32 } %2414, i32 %2415, 3
  %hash_coef_ptr.i.i186.i4992 = getelementptr i8, ptr %2409, i64 8
  %tbl_size_ptr.i.i187.i4993 = getelementptr i8, ptr %2409, i64 16
  %offset_tbl_ptr.i.i188.i4994 = getelementptr i8, ptr %2409, i64 40
  %hash_coef.i.i189.i4995 = load i64, ptr %hash_coef_ptr.i.i186.i4992, align 4
  %tbl_size.i.i190.i4996 = load i64, ptr %tbl_size_ptr.i.i187.i4993, align 4
  %offset_tbl.i.i191.i4997 = load ptr, ptr %offset_tbl_ptr.i.i188.i4994, align 8
  %product.i.i.i192.i4998 = mul i64 %hash_coef.i.i189.i4995, -5261542750394134544
  %shifted.i.i.i193.i4999 = lshr i64 %product.i.i.i192.i4998, 32
  %xored.i.i.i194.i5000 = xor i64 %shifted.i.i.i193.i4999, %product.i.i.i192.i4998
  %hash.i.i.i195.i5001 = and i64 %xored.i.i.i194.i5000, %tbl_size.i.i190.i4996
  %offset_ptr.i.i196.i5002 = getelementptr i32, ptr %offset_tbl.i.i191.i4997, i64 %hash.i.i.i195.i5001
  %offset.i.i197.i5003 = load i32, ptr %offset_ptr.i.i196.i5002, align 4
  %eq.i200.i5004 = icmp eq i32 %2415, %offset.i.i197.i5003
  call void @llvm.assume(i1 %eq.i200.i5004) #30
  %2417 = load ptr, ptr %result.i, align 8
  %2418 = load ptr, ptr %282, align 8
  %result.i.i5005 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2419 = getelementptr i8, ptr %result.i.i5005, i64 16
  store ptr %2418, ptr %2419, align 8
  %2420 = getelementptr i8, ptr %result.i.i5005, i64 8
  store ptr %2417, ptr %2420, align 8
  %2421 = getelementptr i8, ptr %result.i.i5005, i64 24
  store ptr null, ptr %2421, align 8
  %2422 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i5005)
  store ptr @Entry, ptr %result.i.i5005, align 8
  store ptr @_parameterization_Ptri32, ptr %5, align 8
  store ptr %result.i.i5005, ptr %492, align 8
  %2423 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %5)
  %2424 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2409)
  %2425 = sext i32 %2415 to i64
  %2426 = getelementptr ptr, ptr %2409, i64 %2425
  %2427 = getelementptr i8, ptr %2426, i64 128
  %2428 = load ptr, ptr %2427, align 8
  store ptr @i32_typ, ptr %6, align 8
  store ptr %.fca.0.extract11.i3738, ptr %493, align 8
  %2429 = call ptr %2428({ ptr, ptr, ptr, i32 } %2416, ptr nonnull %6)
  call void %2429({ ptr, ptr, ptr, i32 } %2416, { ptr, ptr, ptr, i32 } %2416, ptr nonnull %5, i32 %2389, { ptr, i160 } %2407)
  %2430 = icmp ne ptr %.fca.0.extract112.i4980, @nil_typ
  %2431 = icmp ne ptr %.fca.0.extract112.i4980, null
  %.not140.i5006 = and i1 %2430, %2431
  br i1 %.not140.i5006, label %.cont.cont.i4945, label %2520

2432:                                             ; preds = %2357
  %2433 = add i32 %2367, 2127912214
  %2434 = shl i32 %2367, 12
  %2435 = add i32 %2433, %2434
  %2436 = ashr i32 %2435, 19
  %2437 = xor i32 %2435, %2436
  %2438 = xor i32 %2437, -949894596
  %2439 = add i32 %2438, 374761393
  %2440 = shl i32 %2438, 5
  %2441 = add i32 %2439, %2440
  %2442 = add i32 %2441, -744332180
  %2443 = shl i32 %2441, 9
  %2444 = xor i32 %2442, %2443
  %2445 = add i32 %2444, -42973499
  %2446 = shl i32 %2444, 3
  %2447 = add i32 %2445, %2446
  %2448 = ashr i32 %2447, 16
  %2449 = xor i32 %2447, %2448
  %2450 = xor i32 %2449, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %2451 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2452 = load ptr, ptr %312, align 8
  %2453 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2452, 0
  %2454 = load ptr, ptr %313, align 8
  %2455 = insertvalue { ptr, ptr, ptr, i32 } %2453, ptr %2454, 1
  %2456 = load ptr, ptr %396, align 8
  %2457 = insertvalue { ptr, ptr, ptr, i32 } %2455, ptr %2456, 2
  %2458 = load i32, ptr %314, align 4
  %2459 = insertvalue { ptr, ptr, ptr, i32 } %2457, i32 %2458, 3
  %hash_coef_ptr.i.i10.i5521 = getelementptr i8, ptr %2452, i64 8
  %tbl_size_ptr.i.i11.i5522 = getelementptr i8, ptr %2452, i64 16
  %offset_tbl_ptr.i.i12.i5523 = getelementptr i8, ptr %2452, i64 40
  %hash_coef.i.i13.i5524 = load i64, ptr %hash_coef_ptr.i.i10.i5521, align 4
  %tbl_size.i.i14.i5525 = load i64, ptr %tbl_size_ptr.i.i11.i5522, align 4
  %offset_tbl.i.i15.i5526 = load ptr, ptr %offset_tbl_ptr.i.i12.i5523, align 8
  %product.i.i.i16.i5527 = mul i64 %hash_coef.i.i13.i5524, -5261542750394134544
  %shifted.i.i.i17.i5528 = lshr i64 %product.i.i.i16.i5527, 32
  %xored.i.i.i18.i5529 = xor i64 %shifted.i.i.i17.i5528, %product.i.i.i16.i5527
  %hash.i.i.i19.i5530 = and i64 %xored.i.i.i18.i5529, %tbl_size.i.i14.i5525
  %offset_ptr.i.i20.i5531 = getelementptr i32, ptr %offset_tbl.i.i15.i5526, i64 %hash.i.i.i19.i5530
  %offset.i.i21.i5532 = load i32, ptr %offset_ptr.i.i20.i5531, align 4
  %eq.i.i5533 = icmp eq i32 %2458, %offset.i.i21.i5532
  call void @llvm.assume(i1 %eq.i.i5533) #30
  %2460 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2461 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2452)
  %2462 = sext i32 %2458 to i64
  %2463 = getelementptr ptr, ptr %2452, i64 %2462
  %2464 = getelementptr i8, ptr %2463, i64 64
  %2465 = load ptr, ptr %2464, align 8
  %2466 = call ptr %2465({ ptr, ptr, ptr, i32 } %2459, ptr nonnull %2)
  %2467 = call i32 %2466({ ptr, ptr, ptr, i32 } %2459, { ptr, ptr, ptr, i32 } %2459, ptr nonnull %2)
  %2468 = add i32 %2467, -1
  %2469 = and i32 %2468, %2450
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %2470 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2471 = load ptr, ptr %312, align 8
  %2472 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2471, 0
  %2473 = load ptr, ptr %313, align 8
  %2474 = insertvalue { ptr, ptr, ptr, i32 } %2472, ptr %2473, 1
  %2475 = load ptr, ptr %396, align 8
  %2476 = insertvalue { ptr, ptr, ptr, i32 } %2474, ptr %2475, 2
  %2477 = load i32, ptr %314, align 4
  %2478 = insertvalue { ptr, ptr, ptr, i32 } %2476, i32 %2477, 3
  %hash_coef_ptr.i.i202.i4899 = getelementptr i8, ptr %2471, i64 8
  %tbl_size_ptr.i.i203.i4900 = getelementptr i8, ptr %2471, i64 16
  %offset_tbl_ptr.i.i204.i4901 = getelementptr i8, ptr %2471, i64 40
  %hash_coef.i.i205.i4902 = load i64, ptr %hash_coef_ptr.i.i202.i4899, align 4
  %tbl_size.i.i206.i4903 = load i64, ptr %tbl_size_ptr.i.i203.i4900, align 4
  %offset_tbl.i.i207.i4904 = load ptr, ptr %offset_tbl_ptr.i.i204.i4901, align 8
  %product.i.i.i208.i4905 = mul i64 %hash_coef.i.i205.i4902, -5261542750394134544
  %shifted.i.i.i209.i4906 = lshr i64 %product.i.i.i208.i4905, 32
  %xored.i.i.i210.i4907 = xor i64 %shifted.i.i.i209.i4906, %product.i.i.i208.i4905
  %hash.i.i.i211.i4908 = and i64 %xored.i.i.i210.i4907, %tbl_size.i.i206.i4903
  %offset_ptr.i.i212.i4909 = getelementptr i32, ptr %offset_tbl.i.i207.i4904, i64 %hash.i.i.i211.i4908
  %offset.i.i213.i4910 = load i32, ptr %offset_ptr.i.i212.i4909, align 4
  %eq.i216.i4911 = icmp eq i32 %2477, %offset.i.i213.i4910
  call void @llvm.assume(i1 %eq.i216.i4911) #30
  store ptr @_parameterization_Ptri32, ptr %11, align 8
  %2479 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %11)
  %2480 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2471)
  %2481 = sext i32 %2477 to i64
  %2482 = getelementptr ptr, ptr %2471, i64 %2481
  %2483 = getelementptr i8, ptr %2482, i64 120
  %2484 = load ptr, ptr %2483, align 8
  store ptr @i32_typ, ptr %12, align 8
  %2485 = call ptr %2484({ ptr, ptr, ptr, i32 } %2478, ptr nonnull %12)
  %2486 = call { ptr, i160 } %2485({ ptr, ptr, ptr, i32 } %2478, { ptr, ptr, ptr, i32 } %2478, ptr nonnull %11, i32 %2469)
  %.fca.0.extract87.i4912 = extractvalue { ptr, i160 } %2486, 0
  %.sroa.3.0.insert.ext.i4913 = zext i32 %offset.i.i260.i49625047 to i160
  %.sroa.3.0.insert.shift.i4914 = shl nuw i160 %.sroa.3.0.insert.ext.i4913, 128
  %.sroa.2.0.insert.ext.i4915 = zext i64 %2360 to i160
  %.sroa.2.0.insert.shift.i4916 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i4915, 64
  %.sroa.2.0.insert.insert.i4917 = or disjoint i160 %.sroa.2.0.insert.shift.i4916, %.sroa.3.0.insert.shift.i4914
  %.sroa.0.0.insert.ext.i4918 = zext i64 %2359 to i160
  %.sroa.0.0.insert.insert.i4919 = or disjoint i160 %.sroa.2.0.insert.insert.i4917, %.sroa.0.0.insert.ext.i4918
  %2487 = insertvalue { ptr, i160 } %2356, i160 %.sroa.0.0.insert.insert.i4919, 1
  %2488 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2489 = load ptr, ptr %312, align 8
  %2490 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2489, 0
  %2491 = load ptr, ptr %313, align 8
  %2492 = insertvalue { ptr, ptr, ptr, i32 } %2490, ptr %2491, 1
  %2493 = load ptr, ptr %396, align 8
  %2494 = insertvalue { ptr, ptr, ptr, i32 } %2492, ptr %2493, 2
  %2495 = load i32, ptr %314, align 4
  %2496 = insertvalue { ptr, ptr, ptr, i32 } %2494, i32 %2495, 3
  %hash_coef_ptr.i.i218.i4924 = getelementptr i8, ptr %2489, i64 8
  %tbl_size_ptr.i.i219.i4925 = getelementptr i8, ptr %2489, i64 16
  %offset_tbl_ptr.i.i220.i4926 = getelementptr i8, ptr %2489, i64 40
  %hash_coef.i.i221.i4927 = load i64, ptr %hash_coef_ptr.i.i218.i4924, align 4
  %tbl_size.i.i222.i4928 = load i64, ptr %tbl_size_ptr.i.i219.i4925, align 4
  %offset_tbl.i.i223.i4929 = load ptr, ptr %offset_tbl_ptr.i.i220.i4926, align 8
  %product.i.i.i224.i4930 = mul i64 %hash_coef.i.i221.i4927, -5261542750394134544
  %shifted.i.i.i225.i4931 = lshr i64 %product.i.i.i224.i4930, 32
  %xored.i.i.i226.i4932 = xor i64 %shifted.i.i.i225.i4931, %product.i.i.i224.i4930
  %hash.i.i.i227.i4933 = and i64 %xored.i.i.i226.i4932, %tbl_size.i.i222.i4928
  %offset_ptr.i.i228.i4934 = getelementptr i32, ptr %offset_tbl.i.i223.i4929, i64 %hash.i.i.i227.i4933
  %offset.i.i229.i4935 = load i32, ptr %offset_ptr.i.i228.i4934, align 4
  %eq.i232.i4936 = icmp eq i32 %2495, %offset.i.i229.i4935
  call void @llvm.assume(i1 %eq.i232.i4936) #30
  %2497 = load ptr, ptr %result.i, align 8
  %2498 = load ptr, ptr %282, align 8
  %result.i233.i4937 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2499 = getelementptr i8, ptr %result.i233.i4937, i64 16
  store ptr %2498, ptr %2499, align 8
  %2500 = getelementptr i8, ptr %result.i233.i4937, i64 8
  store ptr %2497, ptr %2500, align 8
  %2501 = getelementptr i8, ptr %result.i233.i4937, i64 24
  store ptr null, ptr %2501, align 8
  %2502 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i233.i4937)
  store ptr @Entry, ptr %result.i233.i4937, align 8
  store ptr @_parameterization_Ptri32, ptr %13, align 8
  store ptr %result.i233.i4937, ptr %490, align 8
  %2503 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %13)
  %2504 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2489)
  %2505 = sext i32 %2495 to i64
  %2506 = getelementptr ptr, ptr %2489, i64 %2505
  %2507 = getelementptr i8, ptr %2506, i64 128
  %2508 = load ptr, ptr %2507, align 8
  store ptr @i32_typ, ptr %14, align 8
  store ptr %.fca.0.extract11.i3738, ptr %491, align 8
  %2509 = call ptr %2508({ ptr, ptr, ptr, i32 } %2496, ptr nonnull %14)
  call void %2509({ ptr, ptr, ptr, i32 } %2496, { ptr, ptr, ptr, i32 } %2496, ptr nonnull %13, i32 %2469, { ptr, i160 } %2487)
  %2510 = icmp ne ptr %.fca.0.extract87.i4912, @nil_typ
  %2511 = icmp ne ptr %.fca.0.extract87.i4912, null
  %.not138.i4938 = and i1 %2510, %2511
  br i1 %.not138.i4938, label %.cont.cont.i4945, label %2520

.cont.cont.i4945:                                 ; preds = %2432, %2370
  %.sink5066 = phi { ptr, i160 } [ %2406, %2370 ], [ %2486, %2432 ]
  %2512 = phi i32 [ 2, %2370 ], [ 1, %2432 ]
  %vptr.i248.sroa.speculated.i4948 = phi ptr [ %.fca.0.extract112.i4980, %2370 ], [ %.fca.0.extract87.i4912, %2432 ]
  %.fca.1.extract89.i4941 = extractvalue { ptr, i160 } %.sink5066, 1
  %.sroa.3407.sroa.4.0.extract.shift.i4942 = lshr i160 %.fca.1.extract89.i4941, 64
  %2513 = trunc i160 %.sroa.3407.sroa.4.0.extract.shift.i4942 to i64
  %2514 = insertelement <2 x i64> poison, i64 %2513, i64 0
  %2515 = trunc i160 %.fca.1.extract89.i4941 to i64
  %2516 = insertelement <2 x i64> %2514, i64 %2515, i64 1
  %hash_coef_ptr.i.i249.i4951 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i4948, i64 8
  %tbl_size_ptr.i.i250.i4952 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i4948, i64 16
  %offset_tbl_ptr.i.i251.i4953 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i4948, i64 40
  %hash_coef.i.i252.i4954 = load i64, ptr %hash_coef_ptr.i.i249.i4951, align 4
  %tbl_size.i.i253.i4955 = load i64, ptr %tbl_size_ptr.i.i250.i4952, align 4
  %offset_tbl.i.i254.i4956 = load ptr, ptr %offset_tbl_ptr.i.i251.i4953, align 8
  %product.i.i.i255.i4957 = mul i64 %hash_coef.i.i252.i4954, 4015701072841558310
  %shifted.i.i.i256.i4958 = lshr i64 %product.i.i.i255.i4957, 32
  %xored.i.i.i257.i4959 = xor i64 %shifted.i.i.i256.i4958, %product.i.i.i255.i4957
  %hash.i.i.i258.i4960 = and i64 %xored.i.i.i257.i4959, %tbl_size.i.i253.i4955
  %offset_ptr.i.i259.i4961 = getelementptr i32, ptr %offset_tbl.i.i254.i4956, i64 %hash.i.i.i258.i4960
  %offset.i.i260.i4962 = load i32, ptr %offset_ptr.i.i259.i4961, align 4
  %2517 = add nuw nsw i32 %.reg2mem193.0677.i4894, 1
  %2518 = load i32, ptr %315, align 4
  %2519 = icmp slt i32 %2517, %2518
  br i1 %2519, label %2357, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit5012

2520:                                             ; preds = %2432, %2370
  %2521 = phi ptr [ %15, %2432 ], [ %7, %2370 ]
  %2522 = phi ptr [ %16, %2432 ], [ %8, %2370 ]
  %2523 = phi ptr [ %17, %2432 ], [ %9, %2370 ]
  %2524 = phi ptr [ %.sroa.0.i4859, %2432 ], [ %.sroa.0680.i4857, %2370 ]
  %2525 = phi ptr [ %18, %2432 ], [ %10, %2370 ]
  %2526 = load i32, ptr %397, align 4
  store i32 %2526, ptr %2521, align 4
  store i32 1, ptr %2522, align 4
  %2527 = add i32 %2526, 1
  store i32 %2527, ptr %2523, align 4
  %2528 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  store i32 %2527, ptr %397, align 4
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %2525, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %2524, align 8
  br label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit5012

HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit5012: ; preds = %.cont.cont.i4945, %2345, %2520
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %5)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %6)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %7)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %8)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %9)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i4857)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %11)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %12)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %13)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %14)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %15)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %16)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %17)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i4859)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %18)
  br label %._crit_edge1.i3740

._crit_edge1.i3740:                               ; preds = %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit5012, %2337
  %2529 = add nuw nsw i32 %.reg2mem13.079.i3737, 1
  %2530 = icmp slt i32 %2529, %2098
  br i1 %2530, label %2337, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3758

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3758.critedge: ; preds = %._crit_edge3.1.i1031
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %133)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %134)
  %2531 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %131)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %132)
  br label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3758

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3758: ; preds = %._crit_edge1.i3740, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3758.critedge
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %131)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %132)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %155)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %156)
  br label %HashMap_insert_keyK_valueV.exit1116

HashMap_insert_keyK_valueV.exit1116:              ; preds = %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit2595.thread, %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit.thread2885, %.thread525.i1091, %.thread528.i1049, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3758
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %245)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %246)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %247)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %248)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %249)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %250)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %251)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %252)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %253)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %254)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %255)
  store ptr @_parameterization_Ptri32, ptr %271, align 8
  %2532 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %271)
  %2533 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %2534 = load ptr, ptr %321, align 8
  %2535 = sext i32 %.reg2mem137.0441 to i64
  %2536 = shl nsw i64 %2535, 5
  %2537 = getelementptr i8, ptr %2534, i64 %2536
  store ptr @i32_typ, ptr %2537, align 8
  %2538 = getelementptr i8, ptr %2537, i64 8
  store i160 %.sroa.0104.0.insert.ext, ptr %2538, align 4
  store i1 true, ptr %.sroa.081.sroa.0, align 8
  %.sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.0. = load i8, ptr %.sroa.081.sroa.0, align 8
  %.sroa.081.0.insert.ext = zext i8 %.sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.sroa.0.0..sroa.081.0. to i160
  %2539 = insertvalue { ptr, i160 } { ptr @bool_typ, i160 undef }, i160 %.sroa.081.0.insert.ext, 1
  store ptr @_parameterization_Ptri32, ptr %272, align 8
  %2540 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %272)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %256)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %257)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %258)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %259)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %260)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %261)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %262)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %263)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %264)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %265)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %266)
  %2541 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2542 = load ptr, ptr %327, align 8
  %2543 = call i32 %2542({ ptr, i160 } %500)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %2544 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2545 = load ptr, ptr %339, align 8
  %2546 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2545, 0
  %2547 = load ptr, ptr %340, align 8
  %2548 = insertvalue { ptr, ptr, ptr, i32 } %2546, ptr %2547, 1
  %2549 = load ptr, ptr %341, align 8
  %2550 = insertvalue { ptr, ptr, ptr, i32 } %2548, ptr %2549, 2
  %2551 = load i32, ptr %342, align 4
  %2552 = insertvalue { ptr, ptr, ptr, i32 } %2550, i32 %2551, 3
  %hash_coef_ptr.i.i10.i1352 = getelementptr i8, ptr %2545, i64 8
  %tbl_size_ptr.i.i11.i1353 = getelementptr i8, ptr %2545, i64 16
  %offset_tbl_ptr.i.i12.i1354 = getelementptr i8, ptr %2545, i64 40
  %hash_coef.i.i13.i1355 = load i64, ptr %hash_coef_ptr.i.i10.i1352, align 4
  %tbl_size.i.i14.i1356 = load i64, ptr %tbl_size_ptr.i.i11.i1353, align 4
  %offset_tbl.i.i15.i1357 = load ptr, ptr %offset_tbl_ptr.i.i12.i1354, align 8
  %product.i.i.i16.i1358 = mul i64 %hash_coef.i.i13.i1355, -5261542750394134544
  %shifted.i.i.i17.i1359 = lshr i64 %product.i.i.i16.i1358, 32
  %xored.i.i.i18.i1360 = xor i64 %shifted.i.i.i17.i1359, %product.i.i.i16.i1358
  %hash.i.i.i19.i1361 = and i64 %xored.i.i.i18.i1360, %tbl_size.i.i14.i1356
  %offset_ptr.i.i20.i1362 = getelementptr i32, ptr %offset_tbl.i.i15.i1357, i64 %hash.i.i.i19.i1361
  %offset.i.i21.i1363 = load i32, ptr %offset_ptr.i.i20.i1362, align 4
  %eq.i.i1364 = icmp eq i32 %2551, %offset.i.i21.i1363
  call void @llvm.assume(i1 %eq.i.i1364) #30
  %2553 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2554 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2545)
  %2555 = sext i32 %2551 to i64
  %2556 = getelementptr ptr, ptr %2545, i64 %2555
  %2557 = getelementptr i8, ptr %2556, i64 64
  %2558 = load ptr, ptr %2557, align 8
  %2559 = call ptr %2558({ ptr, ptr, ptr, i32 } %2552, ptr nonnull %2)
  %2560 = call i32 %2559({ ptr, ptr, ptr, i32 } %2552, { ptr, ptr, ptr, i32 } %2552, ptr nonnull %2)
  %2561 = add i32 %2560, -1
  %2562 = and i32 %2561, %2543
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %2563 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2564 = load ptr, ptr %339, align 8
  %2565 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2564, 0
  %2566 = load ptr, ptr %340, align 8
  %2567 = insertvalue { ptr, ptr, ptr, i32 } %2565, ptr %2566, 1
  %2568 = load ptr, ptr %341, align 8
  %2569 = insertvalue { ptr, ptr, ptr, i32 } %2567, ptr %2568, 2
  %2570 = load i32, ptr %342, align 4
  %2571 = insertvalue { ptr, ptr, ptr, i32 } %2569, i32 %2570, 3
  %hash_coef_ptr.i.i160.i = getelementptr i8, ptr %2564, i64 8
  %tbl_size_ptr.i.i161.i = getelementptr i8, ptr %2564, i64 16
  %offset_tbl_ptr.i.i162.i = getelementptr i8, ptr %2564, i64 40
  %hash_coef.i.i163.i = load i64, ptr %hash_coef_ptr.i.i160.i, align 4
  %tbl_size.i.i164.i = load i64, ptr %tbl_size_ptr.i.i161.i, align 4
  %offset_tbl.i.i165.i = load ptr, ptr %offset_tbl_ptr.i.i162.i, align 8
  %product.i.i.i166.i = mul i64 %hash_coef.i.i163.i, -5261542750394134544
  %shifted.i.i.i167.i = lshr i64 %product.i.i.i166.i, 32
  %xored.i.i.i168.i = xor i64 %shifted.i.i.i167.i, %product.i.i.i166.i
  %hash.i.i.i169.i = and i64 %xored.i.i.i168.i, %tbl_size.i.i164.i
  %offset_ptr.i.i170.i = getelementptr i32, ptr %offset_tbl.i.i165.i, i64 %hash.i.i.i169.i
  %offset.i.i171.i = load i32, ptr %offset_ptr.i.i170.i, align 4
  %eq.i.i721 = icmp eq i32 %2570, %offset.i.i171.i
  call void @llvm.assume(i1 %eq.i.i721) #30
  store ptr @_parameterization_Ptri32, ptr %265, align 8
  %2572 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %265)
  %2573 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2564)
  %2574 = sext i32 %2570 to i64
  %2575 = getelementptr ptr, ptr %2564, i64 %2574
  %2576 = getelementptr i8, ptr %2575, i64 120
  %2577 = load ptr, ptr %2576, align 8
  store ptr @i32_typ, ptr %266, align 8
  %2578 = call ptr %2577({ ptr, ptr, ptr, i32 } %2571, ptr nonnull %266)
  %2579 = call { ptr, i160 } %2578({ ptr, ptr, ptr, i32 } %2571, { ptr, ptr, ptr, i32 } %2571, ptr nonnull %265, i32 %2562)
  %.fca.0.extract.i722 = extractvalue { ptr, i160 } %2579, 0
  %2580 = icmp ne ptr %.fca.0.extract.i722, @nil_typ
  %2581 = icmp ne ptr %.fca.0.extract.i722, null
  %.not151.i = and i1 %2580, %2581
  br i1 %.not151.i, label %2582, label %.critedge.i723

2582:                                             ; preds = %HashMap_insert_keyK_valueV.exit1116
  %.fca.1.extract.i724 = extractvalue { ptr, i160 } %2579, 1
  %.sroa.4518.8.extract.trunc.i = trunc i160 %.fca.1.extract.i724 to i64
  %2583 = inttoptr i64 %.sroa.4518.8.extract.trunc.i to ptr
  %.sroa.7520.8.extract.shift.i = lshr i160 %.fca.1.extract.i724, 64
  %.sroa.7520.8.extract.trunc.i = trunc i160 %.sroa.7520.8.extract.shift.i to i64
  %2584 = inttoptr i64 %.sroa.7520.8.extract.trunc.i to ptr
  %hash_coef_ptr.i.i174.i725 = getelementptr i8, ptr %.fca.0.extract.i722, i64 8
  %tbl_size_ptr.i.i175.i726 = getelementptr i8, ptr %.fca.0.extract.i722, i64 16
  %offset_tbl_ptr.i.i176.i727 = getelementptr i8, ptr %.fca.0.extract.i722, i64 40
  %hash_coef.i.i177.i728 = load i64, ptr %hash_coef_ptr.i.i174.i725, align 4
  %tbl_size.i.i178.i729 = load i64, ptr %tbl_size_ptr.i.i175.i726, align 4
  %offset_tbl.i.i179.i730 = load ptr, ptr %offset_tbl_ptr.i.i176.i727, align 8
  %product.i.i.i180.i731 = mul i64 %hash_coef.i.i177.i728, 4015701072841558310
  %shifted.i.i.i181.i732 = lshr i64 %product.i.i.i180.i731, 32
  %xored.i.i.i182.i733 = xor i64 %shifted.i.i.i181.i732, %product.i.i.i180.i731
  %hash.i.i.i183.i734 = and i64 %xored.i.i.i182.i733, %tbl_size.i.i178.i729
  %offset_ptr.i.i184.i735 = getelementptr i32, ptr %offset_tbl.i.i179.i730, i64 %hash.i.i.i183.i734
  %offset.i.i185.i736 = load i32, ptr %offset_ptr.i.i184.i735, align 4
  %2585 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract.i722, 0
  %2586 = insertvalue { ptr, ptr, ptr, i32 } %2585, ptr %2583, 1
  %2587 = insertvalue { ptr, ptr, ptr, i32 } %2586, ptr %2584, 2
  %2588 = insertvalue { ptr, ptr, ptr, i32 } %2587, i32 %offset.i.i185.i736, 3
  %2589 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2590 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2591 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract.i722)
  %2592 = sext i32 %offset.i.i185.i736 to i64
  %2593 = getelementptr ptr, ptr %.fca.0.extract.i722, i64 %2592
  %2594 = getelementptr i8, ptr %2593, i64 64
  %2595 = load ptr, ptr %2594, align 8
  %2596 = call ptr %2595({ ptr, ptr, ptr, i32 } %2588, ptr nonnull %2)
  %2597 = call i32 %2596({ ptr, ptr, ptr, i32 } %2588, { ptr, ptr, ptr, i32 } %2588, ptr nonnull %2)
  %2598 = icmp eq i32 %2597, %2543
  br i1 %2598, label %2599, label %.critedge.i723

2599:                                             ; preds = %2582
  %2600 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2601 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2602 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract.i722)
  %2603 = getelementptr i8, ptr %2593, i64 48
  %2604 = load ptr, ptr %2603, align 8
  %2605 = call ptr %2604({ ptr, ptr, ptr, i32 } %2588, ptr nonnull %2)
  %2606 = call { ptr, i160 } %2605({ ptr, ptr, ptr, i32 } %2588, { ptr, ptr, ptr, i32 } %2588, ptr nonnull %2)
  %2607 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2608 = load ptr, ptr %328, align 8
  %2609 = call i1 %2608({ ptr, i160 } %2606, { ptr, i160 } %500)
  br i1 %2609, label %.thread525.i, label %.critedge.i723

.thread525.i:                                     ; preds = %2599
  %2610 = load ptr, ptr %result.i151, align 8
  %2611 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2612 = load ptr, ptr %322, align 8
  %2613 = load ptr, ptr %2610, align 8
  %2614 = getelementptr i8, ptr %2613, i64 48
  %2615 = load ptr, ptr %2614, align 8
  %2616 = call { i64, i64 } %2615(ptr nonnull %2610)
  %2617 = extractvalue { i64, i64 } %2616, 0
  %2618 = extractvalue { i64, i64 } %2616, 1
  %2619 = urem i64 20, %2618
  %2620 = icmp eq i64 %2619, 0
  %2621 = sub i64 %2618, %2619
  %2622 = select i1 %2620, i64 0, i64 %2621
  %2623 = add i64 %2617, 20
  %2624 = add i64 %2623, %2622
  %2625 = load ptr, ptr %2612, align 8
  %2626 = getelementptr i8, ptr %2625, i64 48
  %2627 = load ptr, ptr %2626, align 8
  %2628 = call { i64, i64 } %2627(ptr nonnull %2612)
  %2629 = extractvalue { i64, i64 } %2628, 0
  %2630 = extractvalue { i64, i64 } %2628, 1
  %2631 = call i64 @llvm.umax.i64(i64 %2618, i64 %2630)
  %2632 = call i64 @llvm.umax.i64(i64 %2631, i64 8)
  %2633 = urem i64 %2624, %2630
  %2634 = icmp eq i64 %2633, 0
  %2635 = sub i64 %2630, %2633
  %2636 = select i1 %2634, i64 0, i64 %2635
  %2637 = add i64 %2629, %2624
  %2638 = add i64 %2637, %2636
  %2639 = urem i64 %2638, %2632
  %2640 = icmp eq i64 %2639, 0
  %2641 = sub i64 %2632, %2639
  %2642 = select i1 %2640, i64 0, i64 %2641
  %2643 = add i64 %2642, %2638
  %result.i.i737 = call noalias ptr @bump_malloc_inner(i64 noundef %2643, ptr nonnull @current_ptr) #29
  store ptr %2610, ptr %result.i.i737, align 8
  %2644 = getelementptr i8, ptr %result.i.i737, i64 8
  store ptr %2612, ptr %2644, align 8
  %2645 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i.i737)
  store ptr @Entry, ptr %256, align 8
  store ptr %result.i.i737, ptr %377, align 8
  store i32 9, ptr %378, align 8
  %2646 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %256)
  %2647 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2648 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %2649 = load ptr, ptr %2610, align 8
  %2650 = getelementptr i8, ptr %2649, i64 48
  %2651 = load ptr, ptr %2650, align 8
  %2652 = call { i64, i64 } %2651(ptr nonnull %2610)
  %2653 = extractvalue { i64, i64 } %2652, 1
  %2654 = urem i64 20, %2653
  %2655 = icmp eq i64 %2654, 0
  %reass.sub5563 = sub i64 %2653, %2654
  %2656 = add i64 %reass.sub5563, 20
  %2657 = select i1 %2655, i64 20, i64 %2656
  %2658 = getelementptr i8, ptr %result.i.i737, i64 %2657
  %2659 = load ptr, ptr %result.i.i737, align 8
  %2660 = load ptr, ptr %2659, align 8
  %2661 = getelementptr i8, ptr %2660, i64 64
  %2662 = load ptr, ptr %2661, align 8
  call void %2662({ ptr, i160 } %500, ptr nonnull %2659, ptr %2658)
  %2663 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %2664 = load ptr, ptr %result.i.i737, align 8
  %2665 = load ptr, ptr %2664, align 8
  %2666 = getelementptr i8, ptr %2665, i64 48
  %2667 = load ptr, ptr %2666, align 8
  %2668 = call { i64, i64 } %2667(ptr nonnull %2664)
  %2669 = extractvalue { i64, i64 } %2668, 0
  %2670 = extractvalue { i64, i64 } %2668, 1
  %2671 = urem i64 20, %2670
  %2672 = icmp eq i64 %2671, 0
  %2673 = sub i64 %2670, %2671
  %2674 = select i1 %2672, i64 0, i64 %2673
  %2675 = add i64 %2669, 20
  %2676 = add i64 %2675, %2674
  %2677 = load ptr, ptr %2644, align 8
  %2678 = load ptr, ptr %2677, align 8
  %2679 = getelementptr i8, ptr %2678, i64 48
  %2680 = load ptr, ptr %2679, align 8
  %2681 = call { i64, i64 } %2680(ptr nonnull %2677)
  %2682 = extractvalue { i64, i64 } %2681, 1
  %2683 = urem i64 %2676, %2682
  %2684 = icmp eq i64 %2683, 0
  %2685 = sub i64 %2682, %2683
  %2686 = select i1 %2684, i64 0, i64 %2685
  %2687 = getelementptr i8, ptr %result.i.i737, i64 %2676
  %2688 = getelementptr i8, ptr %2687, i64 %2686
  %2689 = load ptr, ptr %2644, align 8
  %2690 = load ptr, ptr %2689, align 8
  %2691 = getelementptr i8, ptr %2690, i64 64
  %2692 = load ptr, ptr %2691, align 8
  call void %2692({ ptr, i160 } %2539, ptr nonnull %2689, ptr %2688)
  %2693 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %2694 = getelementptr i8, ptr %result.i.i737, i64 16
  store i32 %2543, ptr %2694, align 4
  %2695 = load ptr, ptr %379, align 8
  %2696 = ptrtoint ptr %result.i.i737 to i64
  %2697 = ptrtoint ptr %2695 to i64
  %.sroa.2129.0.insert.ext.i = zext i64 %2697 to i160
  %.sroa.2129.0.insert.shift.i = shl nuw nsw i160 %.sroa.2129.0.insert.ext.i, 64
  %.sroa.0128.0.insert.ext.i = zext i64 %2696 to i160
  %.sroa.2129.0.insert.insert.i = or disjoint i160 %.sroa.2129.0.insert.shift.i, %.sroa.0128.0.insert.ext.i
  %.sroa.0128.0.insert.insert.i = or disjoint i160 %.sroa.2129.0.insert.insert.i, 3062541302288446171170371466885913903104
  %2698 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0128.0.insert.insert.i, 1
  %2699 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2700 = load ptr, ptr %339, align 8
  %2701 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2700, 0
  %2702 = load ptr, ptr %340, align 8
  %2703 = insertvalue { ptr, ptr, ptr, i32 } %2701, ptr %2702, 1
  %2704 = load ptr, ptr %341, align 8
  %2705 = insertvalue { ptr, ptr, ptr, i32 } %2703, ptr %2704, 2
  %2706 = load i32, ptr %342, align 4
  %2707 = insertvalue { ptr, ptr, ptr, i32 } %2705, i32 %2706, 3
  %hash_coef_ptr.i.i202.i = getelementptr i8, ptr %2700, i64 8
  %tbl_size_ptr.i.i203.i = getelementptr i8, ptr %2700, i64 16
  %offset_tbl_ptr.i.i204.i = getelementptr i8, ptr %2700, i64 40
  %hash_coef.i.i205.i = load i64, ptr %hash_coef_ptr.i.i202.i, align 4
  %tbl_size.i.i206.i = load i64, ptr %tbl_size_ptr.i.i203.i, align 4
  %offset_tbl.i.i207.i = load ptr, ptr %offset_tbl_ptr.i.i204.i, align 8
  %product.i.i.i208.i = mul i64 %hash_coef.i.i205.i, -5261542750394134544
  %shifted.i.i.i209.i = lshr i64 %product.i.i.i208.i, 32
  %xored.i.i.i210.i = xor i64 %shifted.i.i.i209.i, %product.i.i.i208.i
  %hash.i.i.i211.i = and i64 %xored.i.i.i210.i, %tbl_size.i.i206.i
  %offset_ptr.i.i212.i = getelementptr i32, ptr %offset_tbl.i.i207.i, i64 %hash.i.i.i211.i
  %offset.i.i213.i = load i32, ptr %offset_ptr.i.i212.i, align 4
  %eq.i216.i = icmp eq i32 %2706, %offset.i.i213.i
  call void @llvm.assume(i1 %eq.i216.i) #30
  %2708 = load ptr, ptr %result.i151, align 8
  %2709 = load ptr, ptr %322, align 8
  %result.i217.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2710 = getelementptr i8, ptr %result.i217.i, i64 16
  store ptr %2709, ptr %2710, align 8
  %2711 = getelementptr i8, ptr %result.i217.i, i64 8
  store ptr %2708, ptr %2711, align 8
  %2712 = getelementptr i8, ptr %result.i217.i, i64 24
  store ptr null, ptr %2712, align 8
  %2713 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i217.i)
  store ptr @Entry, ptr %result.i217.i, align 8
  store ptr @_parameterization_Ptri32, ptr %257, align 8
  store ptr %result.i217.i, ptr %380, align 8
  %2714 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %257)
  %2715 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2700)
  %2716 = sext i32 %2706 to i64
  %2717 = getelementptr ptr, ptr %2700, i64 %2716
  %2718 = getelementptr i8, ptr %2717, i64 128
  %2719 = load ptr, ptr %2718, align 8
  store ptr @i32_typ, ptr %258, align 8
  store ptr @Entry, ptr %381, align 8
  %2720 = call ptr %2719({ ptr, ptr, ptr, i32 } %2707, ptr nonnull %258)
  call void %2720({ ptr, ptr, ptr, i32 } %2707, { ptr, ptr, ptr, i32 } %2707, ptr nonnull %257, i32 %2562, { ptr, i160 } %2698)
  br label %HashMap_insert_keyK_valueV.exit

.critedge.i723:                                   ; preds = %2599, %2582, %HashMap_insert_keyK_valueV.exit1116
  %2721 = add i32 %2543, 2127912214
  %2722 = shl i32 %2543, 12
  %2723 = add i32 %2721, %2722
  %2724 = ashr i32 %2723, 19
  %2725 = xor i32 %2723, %2724
  %2726 = xor i32 %2725, -949894596
  %2727 = add i32 %2726, 374761393
  %2728 = shl i32 %2726, 5
  %2729 = add i32 %2727, %2728
  %2730 = add i32 %2729, -744332180
  %2731 = shl i32 %2729, 9
  %2732 = xor i32 %2730, %2731
  %2733 = add i32 %2732, -42973499
  %2734 = shl i32 %2732, 3
  %2735 = add i32 %2733, %2734
  %2736 = ashr i32 %2735, 16
  %2737 = xor i32 %2735, %2736
  %2738 = xor i32 %2737, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %2739 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2740 = load ptr, ptr %356, align 8
  %2741 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2740, 0
  %2742 = load ptr, ptr %357, align 8
  %2743 = insertvalue { ptr, ptr, ptr, i32 } %2741, ptr %2742, 1
  %2744 = load ptr, ptr %358, align 8
  %2745 = insertvalue { ptr, ptr, ptr, i32 } %2743, ptr %2744, 2
  %2746 = load i32, ptr %359, align 4
  %2747 = insertvalue { ptr, ptr, ptr, i32 } %2745, i32 %2746, 3
  %hash_coef_ptr.i.i10.i1382 = getelementptr i8, ptr %2740, i64 8
  %tbl_size_ptr.i.i11.i1383 = getelementptr i8, ptr %2740, i64 16
  %offset_tbl_ptr.i.i12.i1384 = getelementptr i8, ptr %2740, i64 40
  %hash_coef.i.i13.i1385 = load i64, ptr %hash_coef_ptr.i.i10.i1382, align 4
  %tbl_size.i.i14.i1386 = load i64, ptr %tbl_size_ptr.i.i11.i1383, align 4
  %offset_tbl.i.i15.i1387 = load ptr, ptr %offset_tbl_ptr.i.i12.i1384, align 8
  %product.i.i.i16.i1388 = mul i64 %hash_coef.i.i13.i1385, -5261542750394134544
  %shifted.i.i.i17.i1389 = lshr i64 %product.i.i.i16.i1388, 32
  %xored.i.i.i18.i1390 = xor i64 %shifted.i.i.i17.i1389, %product.i.i.i16.i1388
  %hash.i.i.i19.i1391 = and i64 %xored.i.i.i18.i1390, %tbl_size.i.i14.i1386
  %offset_ptr.i.i20.i1392 = getelementptr i32, ptr %offset_tbl.i.i15.i1387, i64 %hash.i.i.i19.i1391
  %offset.i.i21.i1393 = load i32, ptr %offset_ptr.i.i20.i1392, align 4
  %eq.i.i1394 = icmp eq i32 %2746, %offset.i.i21.i1393
  call void @llvm.assume(i1 %eq.i.i1394) #30
  %2748 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2749 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2740)
  %2750 = sext i32 %2746 to i64
  %2751 = getelementptr ptr, ptr %2740, i64 %2750
  %2752 = getelementptr i8, ptr %2751, i64 64
  %2753 = load ptr, ptr %2752, align 8
  %2754 = call ptr %2753({ ptr, ptr, ptr, i32 } %2747, ptr nonnull %2)
  %2755 = call i32 %2754({ ptr, ptr, ptr, i32 } %2747, { ptr, ptr, ptr, i32 } %2747, ptr nonnull %2)
  %2756 = add i32 %2755, -1
  %2757 = and i32 %2756, %2738
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %2758 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2759 = load ptr, ptr %356, align 8
  %2760 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2759, 0
  %2761 = load ptr, ptr %357, align 8
  %2762 = insertvalue { ptr, ptr, ptr, i32 } %2760, ptr %2761, 1
  %2763 = load ptr, ptr %358, align 8
  %2764 = insertvalue { ptr, ptr, ptr, i32 } %2762, ptr %2763, 2
  %2765 = load i32, ptr %359, align 4
  %2766 = insertvalue { ptr, ptr, ptr, i32 } %2764, i32 %2765, 3
  %hash_coef_ptr.i.i219.i = getelementptr i8, ptr %2759, i64 8
  %tbl_size_ptr.i.i220.i = getelementptr i8, ptr %2759, i64 16
  %offset_tbl_ptr.i.i221.i = getelementptr i8, ptr %2759, i64 40
  %hash_coef.i.i222.i = load i64, ptr %hash_coef_ptr.i.i219.i, align 4
  %tbl_size.i.i223.i = load i64, ptr %tbl_size_ptr.i.i220.i, align 4
  %offset_tbl.i.i224.i = load ptr, ptr %offset_tbl_ptr.i.i221.i, align 8
  %product.i.i.i225.i = mul i64 %hash_coef.i.i222.i, -5261542750394134544
  %shifted.i.i.i226.i = lshr i64 %product.i.i.i225.i, 32
  %xored.i.i.i227.i = xor i64 %shifted.i.i.i226.i, %product.i.i.i225.i
  %hash.i.i.i228.i = and i64 %xored.i.i.i227.i, %tbl_size.i.i223.i
  %offset_ptr.i.i229.i = getelementptr i32, ptr %offset_tbl.i.i224.i, i64 %hash.i.i.i228.i
  %offset.i.i230.i = load i32, ptr %offset_ptr.i.i229.i, align 4
  %eq.i233.i = icmp eq i32 %2765, %offset.i.i230.i
  call void @llvm.assume(i1 %eq.i233.i) #30
  store ptr @_parameterization_Ptri32, ptr %259, align 8
  %2767 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %259)
  %2768 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2759)
  %2769 = sext i32 %2765 to i64
  %2770 = getelementptr ptr, ptr %2759, i64 %2769
  %2771 = getelementptr i8, ptr %2770, i64 120
  %2772 = load ptr, ptr %2771, align 8
  store ptr @i32_typ, ptr %260, align 8
  %2773 = call ptr %2772({ ptr, ptr, ptr, i32 } %2766, ptr nonnull %260)
  %2774 = call { ptr, i160 } %2773({ ptr, ptr, ptr, i32 } %2766, { ptr, ptr, ptr, i32 } %2766, ptr nonnull %259, i32 %2757)
  %.fca.0.extract104.i = extractvalue { ptr, i160 } %2774, 0
  %2775 = icmp ne ptr %.fca.0.extract104.i, @nil_typ
  %2776 = icmp ne ptr %.fca.0.extract104.i, null
  %.not153.i = and i1 %2775, %2776
  br i1 %.not153.i, label %2777, label %.critedge158.i

2777:                                             ; preds = %.critedge.i723
  %.fca.1.extract106.i = extractvalue { ptr, i160 } %2774, 1
  %.sroa.4.8.extract.trunc.i = trunc i160 %.fca.1.extract106.i to i64
  %2778 = inttoptr i64 %.sroa.4.8.extract.trunc.i to ptr
  %.sroa.7506.8.extract.shift.i = lshr i160 %.fca.1.extract106.i, 64
  %.sroa.7506.8.extract.trunc.i = trunc i160 %.sroa.7506.8.extract.shift.i to i64
  %2779 = inttoptr i64 %.sroa.7506.8.extract.trunc.i to ptr
  %hash_coef_ptr.i.i235.i = getelementptr i8, ptr %.fca.0.extract104.i, i64 8
  %tbl_size_ptr.i.i236.i = getelementptr i8, ptr %.fca.0.extract104.i, i64 16
  %offset_tbl_ptr.i.i237.i = getelementptr i8, ptr %.fca.0.extract104.i, i64 40
  %hash_coef.i.i238.i = load i64, ptr %hash_coef_ptr.i.i235.i, align 4
  %tbl_size.i.i239.i = load i64, ptr %tbl_size_ptr.i.i236.i, align 4
  %offset_tbl.i.i240.i = load ptr, ptr %offset_tbl_ptr.i.i237.i, align 8
  %product.i.i.i241.i = mul i64 %hash_coef.i.i238.i, 4015701072841558310
  %shifted.i.i.i242.i = lshr i64 %product.i.i.i241.i, 32
  %xored.i.i.i243.i = xor i64 %shifted.i.i.i242.i, %product.i.i.i241.i
  %hash.i.i.i244.i = and i64 %xored.i.i.i243.i, %tbl_size.i.i239.i
  %offset_ptr.i.i245.i = getelementptr i32, ptr %offset_tbl.i.i240.i, i64 %hash.i.i.i244.i
  %offset.i.i246.i = load i32, ptr %offset_ptr.i.i245.i, align 4
  %2780 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract104.i, 0
  %2781 = insertvalue { ptr, ptr, ptr, i32 } %2780, ptr %2778, 1
  %2782 = insertvalue { ptr, ptr, ptr, i32 } %2781, ptr %2779, 2
  %2783 = insertvalue { ptr, ptr, ptr, i32 } %2782, i32 %offset.i.i246.i, 3
  %2784 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2785 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2786 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract104.i)
  %2787 = sext i32 %offset.i.i246.i to i64
  %2788 = getelementptr ptr, ptr %.fca.0.extract104.i, i64 %2787
  %2789 = getelementptr i8, ptr %2788, i64 64
  %2790 = load ptr, ptr %2789, align 8
  %2791 = call ptr %2790({ ptr, ptr, ptr, i32 } %2783, ptr nonnull %2)
  %2792 = call i32 %2791({ ptr, ptr, ptr, i32 } %2783, { ptr, ptr, ptr, i32 } %2783, ptr nonnull %2)
  %2793 = icmp eq i32 %2792, %2543
  br i1 %2793, label %2794, label %.critedge158.i

2794:                                             ; preds = %2777
  %2795 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2796 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2797 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract104.i)
  %2798 = getelementptr i8, ptr %2788, i64 48
  %2799 = load ptr, ptr %2798, align 8
  %2800 = call ptr %2799({ ptr, ptr, ptr, i32 } %2783, ptr nonnull %2)
  %2801 = call { ptr, i160 } %2800({ ptr, ptr, ptr, i32 } %2783, { ptr, ptr, ptr, i32 } %2783, ptr nonnull %2)
  %2802 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2803 = load ptr, ptr %328, align 8
  %2804 = call i1 %2803({ ptr, i160 } %2801, { ptr, i160 } %500)
  br i1 %2804, label %.thread528.i, label %.critedge158.i

.thread528.i:                                     ; preds = %2794
  %2805 = load ptr, ptr %result.i151, align 8
  %2806 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2807 = load ptr, ptr %322, align 8
  %2808 = load ptr, ptr %2805, align 8
  %2809 = getelementptr i8, ptr %2808, i64 48
  %2810 = load ptr, ptr %2809, align 8
  %2811 = call { i64, i64 } %2810(ptr nonnull %2805)
  %2812 = extractvalue { i64, i64 } %2811, 0
  %2813 = extractvalue { i64, i64 } %2811, 1
  %2814 = urem i64 20, %2813
  %2815 = icmp eq i64 %2814, 0
  %2816 = sub i64 %2813, %2814
  %2817 = select i1 %2815, i64 0, i64 %2816
  %2818 = add i64 %2812, 20
  %2819 = add i64 %2818, %2817
  %2820 = load ptr, ptr %2807, align 8
  %2821 = getelementptr i8, ptr %2820, i64 48
  %2822 = load ptr, ptr %2821, align 8
  %2823 = call { i64, i64 } %2822(ptr nonnull %2807)
  %2824 = extractvalue { i64, i64 } %2823, 0
  %2825 = extractvalue { i64, i64 } %2823, 1
  %2826 = call i64 @llvm.umax.i64(i64 %2813, i64 %2825)
  %2827 = call i64 @llvm.umax.i64(i64 %2826, i64 8)
  %2828 = urem i64 %2819, %2825
  %2829 = icmp eq i64 %2828, 0
  %2830 = sub i64 %2825, %2828
  %2831 = select i1 %2829, i64 0, i64 %2830
  %2832 = add i64 %2824, %2819
  %2833 = add i64 %2832, %2831
  %2834 = urem i64 %2833, %2827
  %2835 = icmp eq i64 %2834, 0
  %2836 = sub i64 %2827, %2834
  %2837 = select i1 %2835, i64 0, i64 %2836
  %2838 = add i64 %2837, %2833
  %result.i248.i = call noalias ptr @bump_malloc_inner(i64 noundef %2838, ptr nonnull @current_ptr) #29
  store ptr %2805, ptr %result.i248.i, align 8
  %2839 = getelementptr i8, ptr %result.i248.i, i64 8
  store ptr %2807, ptr %2839, align 8
  %2840 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i248.i)
  store ptr @Entry, ptr %261, align 8
  store ptr %result.i248.i, ptr %372, align 8
  store i32 9, ptr %373, align 8
  %2841 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %261)
  %2842 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2843 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %2844 = load ptr, ptr %2805, align 8
  %2845 = getelementptr i8, ptr %2844, i64 48
  %2846 = load ptr, ptr %2845, align 8
  %2847 = call { i64, i64 } %2846(ptr nonnull %2805)
  %2848 = extractvalue { i64, i64 } %2847, 1
  %2849 = urem i64 20, %2848
  %2850 = icmp eq i64 %2849, 0
  %reass.sub5562 = sub i64 %2848, %2849
  %2851 = add i64 %reass.sub5562, 20
  %2852 = select i1 %2850, i64 20, i64 %2851
  %2853 = getelementptr i8, ptr %result.i248.i, i64 %2852
  %2854 = load ptr, ptr %result.i248.i, align 8
  %2855 = load ptr, ptr %2854, align 8
  %2856 = getelementptr i8, ptr %2855, i64 64
  %2857 = load ptr, ptr %2856, align 8
  call void %2857({ ptr, i160 } %500, ptr nonnull %2854, ptr %2853)
  %2858 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %2859 = load ptr, ptr %result.i248.i, align 8
  %2860 = load ptr, ptr %2859, align 8
  %2861 = getelementptr i8, ptr %2860, i64 48
  %2862 = load ptr, ptr %2861, align 8
  %2863 = call { i64, i64 } %2862(ptr nonnull %2859)
  %2864 = extractvalue { i64, i64 } %2863, 0
  %2865 = extractvalue { i64, i64 } %2863, 1
  %2866 = urem i64 20, %2865
  %2867 = icmp eq i64 %2866, 0
  %2868 = sub i64 %2865, %2866
  %2869 = select i1 %2867, i64 0, i64 %2868
  %2870 = add i64 %2864, 20
  %2871 = add i64 %2870, %2869
  %2872 = load ptr, ptr %2839, align 8
  %2873 = load ptr, ptr %2872, align 8
  %2874 = getelementptr i8, ptr %2873, i64 48
  %2875 = load ptr, ptr %2874, align 8
  %2876 = call { i64, i64 } %2875(ptr nonnull %2872)
  %2877 = extractvalue { i64, i64 } %2876, 1
  %2878 = urem i64 %2871, %2877
  %2879 = icmp eq i64 %2878, 0
  %2880 = sub i64 %2877, %2878
  %2881 = select i1 %2879, i64 0, i64 %2880
  %2882 = getelementptr i8, ptr %result.i248.i, i64 %2871
  %2883 = getelementptr i8, ptr %2882, i64 %2881
  %2884 = load ptr, ptr %2839, align 8
  %2885 = load ptr, ptr %2884, align 8
  %2886 = getelementptr i8, ptr %2885, i64 64
  %2887 = load ptr, ptr %2886, align 8
  call void %2887({ ptr, i160 } %2539, ptr nonnull %2884, ptr %2883)
  %2888 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %2889 = getelementptr i8, ptr %result.i248.i, i64 16
  store i32 %2543, ptr %2889, align 4
  %2890 = load ptr, ptr %374, align 8
  %2891 = ptrtoint ptr %result.i248.i to i64
  %2892 = ptrtoint ptr %2890 to i64
  %.sroa.284.0.insert.ext.i = zext i64 %2892 to i160
  %.sroa.284.0.insert.shift.i = shl nuw nsw i160 %.sroa.284.0.insert.ext.i, 64
  %.sroa.083.0.insert.ext.i = zext i64 %2891 to i160
  %.sroa.284.0.insert.insert.i = or disjoint i160 %.sroa.284.0.insert.shift.i, %.sroa.083.0.insert.ext.i
  %.sroa.083.0.insert.insert.i = or disjoint i160 %.sroa.284.0.insert.insert.i, 3062541302288446171170371466885913903104
  %2893 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.083.0.insert.insert.i, 1
  %2894 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2895 = load ptr, ptr %356, align 8
  %2896 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2895, 0
  %2897 = load ptr, ptr %357, align 8
  %2898 = insertvalue { ptr, ptr, ptr, i32 } %2896, ptr %2897, 1
  %2899 = load ptr, ptr %358, align 8
  %2900 = insertvalue { ptr, ptr, ptr, i32 } %2898, ptr %2899, 2
  %2901 = load i32, ptr %359, align 4
  %2902 = insertvalue { ptr, ptr, ptr, i32 } %2900, i32 %2901, 3
  %hash_coef_ptr.i.i264.i = getelementptr i8, ptr %2895, i64 8
  %tbl_size_ptr.i.i265.i = getelementptr i8, ptr %2895, i64 16
  %offset_tbl_ptr.i.i266.i = getelementptr i8, ptr %2895, i64 40
  %hash_coef.i.i267.i = load i64, ptr %hash_coef_ptr.i.i264.i, align 4
  %tbl_size.i.i268.i = load i64, ptr %tbl_size_ptr.i.i265.i, align 4
  %offset_tbl.i.i269.i = load ptr, ptr %offset_tbl_ptr.i.i266.i, align 8
  %product.i.i.i270.i = mul i64 %hash_coef.i.i267.i, -5261542750394134544
  %shifted.i.i.i271.i = lshr i64 %product.i.i.i270.i, 32
  %xored.i.i.i272.i = xor i64 %shifted.i.i.i271.i, %product.i.i.i270.i
  %hash.i.i.i273.i = and i64 %xored.i.i.i272.i, %tbl_size.i.i268.i
  %offset_ptr.i.i274.i = getelementptr i32, ptr %offset_tbl.i.i269.i, i64 %hash.i.i.i273.i
  %offset.i.i275.i = load i32, ptr %offset_ptr.i.i274.i, align 4
  %eq.i278.i = icmp eq i32 %2901, %offset.i.i275.i
  call void @llvm.assume(i1 %eq.i278.i) #30
  %2903 = load ptr, ptr %result.i151, align 8
  %2904 = load ptr, ptr %322, align 8
  %result.i279.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2905 = getelementptr i8, ptr %result.i279.i, i64 16
  store ptr %2904, ptr %2905, align 8
  %2906 = getelementptr i8, ptr %result.i279.i, i64 8
  store ptr %2903, ptr %2906, align 8
  %2907 = getelementptr i8, ptr %result.i279.i, i64 24
  store ptr null, ptr %2907, align 8
  %2908 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i279.i)
  store ptr @Entry, ptr %result.i279.i, align 8
  store ptr @_parameterization_Ptri32, ptr %262, align 8
  store ptr %result.i279.i, ptr %375, align 8
  %2909 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %262)
  %2910 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2895)
  %2911 = sext i32 %2901 to i64
  %2912 = getelementptr ptr, ptr %2895, i64 %2911
  %2913 = getelementptr i8, ptr %2912, i64 128
  %2914 = load ptr, ptr %2913, align 8
  store ptr @i32_typ, ptr %263, align 8
  store ptr @Entry, ptr %376, align 8
  %2915 = call ptr %2914({ ptr, ptr, ptr, i32 } %2902, ptr nonnull %263)
  call void %2915({ ptr, ptr, ptr, i32 } %2902, { ptr, ptr, ptr, i32 } %2902, ptr nonnull %262, i32 %2757, { ptr, i160 } %2893)
  br label %HashMap_insert_keyK_valueV.exit

.critedge158.i:                                   ; preds = %2794, %2777, %.critedge.i723
  %2916 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2917 = load ptr, ptr %339, align 8
  %2918 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2917, 0
  %2919 = load ptr, ptr %340, align 8
  %2920 = insertvalue { ptr, ptr, ptr, i32 } %2918, ptr %2919, 1
  %2921 = load ptr, ptr %341, align 8
  %2922 = insertvalue { ptr, ptr, ptr, i32 } %2920, ptr %2921, 2
  %2923 = load i32, ptr %342, align 4
  %2924 = insertvalue { ptr, ptr, ptr, i32 } %2922, i32 %2923, 3
  %hash_coef_ptr.i.i281.i = getelementptr i8, ptr %2917, i64 8
  %tbl_size_ptr.i.i282.i = getelementptr i8, ptr %2917, i64 16
  %offset_tbl_ptr.i.i283.i = getelementptr i8, ptr %2917, i64 40
  %hash_coef.i.i284.i = load i64, ptr %hash_coef_ptr.i.i281.i, align 4
  %tbl_size.i.i285.i = load i64, ptr %tbl_size_ptr.i.i282.i, align 4
  %offset_tbl.i.i286.i = load ptr, ptr %offset_tbl_ptr.i.i283.i, align 8
  %product.i.i.i287.i = mul i64 %hash_coef.i.i284.i, -5261542750394134544
  %shifted.i.i.i288.i = lshr i64 %product.i.i.i287.i, 32
  %xored.i.i.i289.i = xor i64 %shifted.i.i.i288.i, %product.i.i.i287.i
  %hash.i.i.i290.i = and i64 %xored.i.i.i289.i, %tbl_size.i.i285.i
  %offset_ptr.i.i291.i = getelementptr i32, ptr %offset_tbl.i.i286.i, i64 %hash.i.i.i290.i
  %offset.i.i292.i = load i32, ptr %offset_ptr.i.i291.i, align 4
  %eq.i295.i = icmp eq i32 %2923, %offset.i.i292.i
  call void @llvm.assume(i1 %eq.i295.i) #30
  %2925 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2926 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2917)
  %2927 = sext i32 %2923 to i64
  %2928 = getelementptr ptr, ptr %2917, i64 %2927
  %2929 = getelementptr i8, ptr %2928, i64 64
  %2930 = load ptr, ptr %2929, align 8
  %2931 = call ptr %2930({ ptr, ptr, ptr, i32 } %2924, ptr nonnull %2)
  %2932 = call i32 %2931({ ptr, ptr, ptr, i32 } %2924, { ptr, ptr, ptr, i32 } %2924, ptr nonnull %2)
  %2933 = load i32, ptr %360, align 4
  %.not.i = icmp slt i32 %2933, %2932
  br i1 %.not.i, label %._crit_edge2.i, label %2934

2934:                                             ; preds = %.critedge158.i
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %231)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %232)
  %2935 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %2936 = load ptr, ptr %339, align 8
  %2937 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2936, 0
  %2938 = load ptr, ptr %340, align 8
  %2939 = insertvalue { ptr, ptr, ptr, i32 } %2937, ptr %2938, 1
  %2940 = load ptr, ptr %341, align 8
  %2941 = insertvalue { ptr, ptr, ptr, i32 } %2939, ptr %2940, 2
  %2942 = load i32, ptr %342, align 4
  %2943 = insertvalue { ptr, ptr, ptr, i32 } %2941, i32 %2942, 3
  %hash_coef_ptr.i.i18.i = getelementptr i8, ptr %2936, i64 8
  %tbl_size_ptr.i.i19.i = getelementptr i8, ptr %2936, i64 16
  %offset_tbl_ptr.i.i20.i = getelementptr i8, ptr %2936, i64 40
  %hash_coef.i.i21.i = load i64, ptr %hash_coef_ptr.i.i18.i, align 4
  %tbl_size.i.i22.i = load i64, ptr %tbl_size_ptr.i.i19.i, align 4
  %offset_tbl.i.i23.i = load ptr, ptr %offset_tbl_ptr.i.i20.i, align 8
  %product.i.i.i24.i = mul i64 %hash_coef.i.i21.i, -5261542750394134544
  %shifted.i.i.i25.i = lshr i64 %product.i.i.i24.i, 32
  %xored.i.i.i26.i = xor i64 %shifted.i.i.i25.i, %product.i.i.i24.i
  %hash.i.i.i27.i = and i64 %xored.i.i.i26.i, %tbl_size.i.i22.i
  %offset_ptr.i.i28.i = getelementptr i32, ptr %offset_tbl.i.i23.i, i64 %hash.i.i.i27.i
  %offset.i.i29.i = load i32, ptr %offset_ptr.i.i28.i, align 4
  %eq.i.i1408 = icmp eq i32 %2942, %offset.i.i29.i
  call void @llvm.assume(i1 %eq.i.i1408) #30
  %2944 = load ptr, ptr %356, align 8
  %2945 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2944, 0
  %2946 = load ptr, ptr %357, align 8
  %2947 = insertvalue { ptr, ptr, ptr, i32 } %2945, ptr %2946, 1
  %2948 = load ptr, ptr %358, align 8
  %2949 = insertvalue { ptr, ptr, ptr, i32 } %2947, ptr %2948, 2
  %2950 = load i32, ptr %359, align 4
  %hash_coef_ptr.i.i46.i = getelementptr i8, ptr %2944, i64 8
  %tbl_size_ptr.i.i47.i = getelementptr i8, ptr %2944, i64 16
  %offset_tbl_ptr.i.i48.i = getelementptr i8, ptr %2944, i64 40
  %hash_coef.i.i49.i = load i64, ptr %hash_coef_ptr.i.i46.i, align 4
  %tbl_size.i.i50.i = load i64, ptr %tbl_size_ptr.i.i47.i, align 4
  %offset_tbl.i.i51.i = load ptr, ptr %offset_tbl_ptr.i.i48.i, align 8
  %product.i.i.i52.i = mul i64 %hash_coef.i.i49.i, -5261542750394134544
  %shifted.i.i.i53.i = lshr i64 %product.i.i.i52.i, 32
  %xored.i.i.i54.i = xor i64 %shifted.i.i.i53.i, %product.i.i.i52.i
  %hash.i.i.i55.i = and i64 %xored.i.i.i54.i, %tbl_size.i.i50.i
  %offset_ptr.i.i56.i = getelementptr i32, ptr %offset_tbl.i.i51.i, i64 %hash.i.i.i55.i
  %offset.i.i57.i = load i32, ptr %offset_ptr.i.i56.i, align 4
  %eq.i60.i = icmp eq i32 %2950, %offset.i.i57.i
  call void @llvm.assume(i1 %eq.i60.i) #30
  %2951 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %2952 = call ptr @llvm.invariant.start.p0(i64 600, ptr %2936)
  %2953 = sext i32 %2942 to i64
  %2954 = getelementptr ptr, ptr %2936, i64 %2953
  %2955 = getelementptr i8, ptr %2954, i64 64
  %2956 = load ptr, ptr %2955, align 8
  %2957 = call ptr %2956({ ptr, ptr, ptr, i32 } %2943, ptr nonnull %2)
  %2958 = call i32 %2957({ ptr, ptr, ptr, i32 } %2943, { ptr, ptr, ptr, i32 } %2943, ptr nonnull %2)
  %2959 = shl i32 %2958, 1
  %2960 = call i32 @llvm.smax.i32(i32 %2959, i32 16)
  %2961 = load ptr, ptr %result.i151, align 8
  %2962 = load ptr, ptr %322, align 8
  %result.i.i1413 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2963 = getelementptr i8, ptr %result.i.i1413, i64 16
  store ptr @_parameterization_Nil, ptr %2963, align 8
  %result.i75.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2964 = getelementptr i8, ptr %result.i75.i, i64 16
  store ptr %2962, ptr %2964, align 8
  %2965 = getelementptr i8, ptr %result.i75.i, i64 8
  store ptr %2961, ptr %2965, align 8
  %2966 = getelementptr i8, ptr %result.i75.i, i64 24
  store ptr null, ptr %2966, align 8
  %2967 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i75.i)
  store ptr @Entry, ptr %result.i75.i, align 8
  %2968 = getelementptr i8, ptr %result.i.i1413, i64 8
  store ptr %result.i75.i, ptr %2968, align 8
  %2969 = getelementptr i8, ptr %result.i.i1413, i64 24
  store ptr null, ptr %2969, align 8
  %2970 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i1413)
  store ptr @union_typ, ptr %result.i.i1413, align 8
  %result.i76.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i1413, ptr %result.i76.i, align 8
  %2971 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i76.i)
  store ptr @Array, ptr %231, align 8
  store ptr %result.i76.i, ptr %398, align 8
  store i32 9, ptr %399, align 8
  %2972 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %231)
  %2973 = getelementptr i8, ptr %result.i76.i, i64 16
  store i32 %2960, ptr %2973, align 4
  %2974 = getelementptr i8, ptr %result.i76.i, i64 20
  store i32 %2960, ptr %2974, align 4
  %2975 = zext nneg i32 %2960 to i64
  %2976 = shl nuw nsw i64 %2975, 5
  %result.i.i.i1414 = call noalias ptr @bump_malloc_inner(i64 noundef %2976, ptr nonnull @current_ptr) #29
  %2977 = getelementptr i8, ptr %result.i76.i, i64 8
  store ptr %result.i.i.i1414, ptr %2977, align 8
  %2978 = load ptr, ptr %400, align 8
  store ptr @Array, ptr %339, align 8
  store ptr %result.i76.i, ptr %340, align 8
  store ptr %2978, ptr %341, align 8
  store i32 9, ptr %342, align 4
  %result.i91.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2979 = getelementptr i8, ptr %result.i91.i, i64 16
  store ptr @_parameterization_Nil, ptr %2979, align 8
  %result.i92.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %2980 = getelementptr i8, ptr %result.i92.i, i64 16
  store ptr %2962, ptr %2980, align 8
  %2981 = getelementptr i8, ptr %result.i92.i, i64 8
  store ptr %2961, ptr %2981, align 8
  %2982 = getelementptr i8, ptr %result.i92.i, i64 24
  store ptr null, ptr %2982, align 8
  %2983 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i92.i)
  store ptr @Entry, ptr %result.i92.i, align 8
  %2984 = getelementptr i8, ptr %result.i91.i, i64 8
  store ptr %result.i92.i, ptr %2984, align 8
  %2985 = getelementptr i8, ptr %result.i91.i, i64 24
  store ptr null, ptr %2985, align 8
  %2986 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i91.i)
  store ptr @union_typ, ptr %result.i91.i, align 8
  %result.i93.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i91.i, ptr %result.i93.i, align 8
  %2987 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i93.i)
  store ptr @Array, ptr %232, align 8
  store ptr %result.i93.i, ptr %401, align 8
  store i32 9, ptr %402, align 8
  %2988 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %232)
  %2989 = getelementptr i8, ptr %result.i93.i, i64 16
  store i32 %2960, ptr %2989, align 4
  %2990 = getelementptr i8, ptr %result.i93.i, i64 20
  store i32 %2960, ptr %2990, align 4
  %result.i.i234.i = call noalias ptr @bump_malloc_inner(i64 noundef %2976, ptr nonnull @current_ptr) #29
  %2991 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %2992 = getelementptr i8, ptr %result.i93.i, i64 8
  store ptr %result.i.i234.i, ptr %2992, align 8
  %2993 = load ptr, ptr %403, align 8
  store ptr @Array, ptr %356, align 8
  store ptr %result.i93.i, ptr %357, align 8
  store ptr %2993, ptr %358, align 8
  store i32 9, ptr %359, align 4
  store i32 0, ptr %360, align 4
  %2994 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %153)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %154)
  %2995 = icmp sgt i32 %2958, 0
  br i1 %2995, label %.lr.ph.i2941, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2995.critedge

.lr.ph.i2941:                                     ; preds = %2934
  %invariant.gep.i = getelementptr i8, ptr %2936, i64 120
  %offset_tbl.i.i24.i = load ptr, ptr %offset_tbl_ptr.i.i20.i, align 8
  %hash_coef.i.i22.i = load i64, ptr %hash_coef_ptr.i.i18.i, align 4
  %product.i.i.i25.i = mul i64 %hash_coef.i.i22.i, -5261542750394134544
  %shifted.i.i.i26.i = lshr i64 %product.i.i.i25.i, 32
  %xored.i.i.i27.i = xor i64 %shifted.i.i.i26.i, %product.i.i.i25.i
  %tbl_size.i.i23.i = load i64, ptr %tbl_size_ptr.i.i19.i, align 4
  %hash.i.i.i28.i = and i64 %xored.i.i.i27.i, %tbl_size.i.i23.i
  %offset_ptr.i.i29.i = getelementptr i32, ptr %offset_tbl.i.i24.i, i64 %hash.i.i.i28.i
  %offset.i.i30.i = load i32, ptr %offset_ptr.i.i29.i, align 4
  %2996 = insertvalue { ptr, ptr, ptr, i32 } %2941, i32 %offset.i.i30.i, 3
  %2997 = sext i32 %offset.i.i30.i to i64
  %gep.i = getelementptr ptr, ptr %invariant.gep.i, i64 %2997
  %2998 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %2999

2999:                                             ; preds = %._crit_edge1.i, %.lr.ph.i2941
  %.reg2mem13.079.i = phi i32 [ 0, %.lr.ph.i2941 ], [ %3191, %._crit_edge1.i ]
  store ptr @_parameterization_Ptri32, ptr %153, align 8
  %3000 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %153)
  %3001 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %2936)
  %3002 = load ptr, ptr %gep.i, align 8
  store ptr @i32_typ, ptr %154, align 8
  %3003 = call ptr %3002({ ptr, ptr, ptr, i32 } %2996, ptr nonnull %154)
  %3004 = call { ptr, i160 } %3003({ ptr, ptr, ptr, i32 } %2996, { ptr, ptr, ptr, i32 } %2996, ptr nonnull %153, i32 %.reg2mem13.079.i)
  %.fca.0.extract11.i = extractvalue { ptr, i160 } %3004, 0
  %3005 = icmp ne ptr %.fca.0.extract11.i, @nil_typ
  %3006 = icmp ne ptr %.fca.0.extract11.i, null
  %.not17.i = and i1 %3005, %3006
  br i1 %.not17.i, label %3007, label %._crit_edge1.i

3007:                                             ; preds = %2999
  %hash_coef_ptr.i.i33.i = getelementptr i8, ptr %.fca.0.extract11.i, i64 8
  %tbl_size_ptr.i.i34.i = getelementptr i8, ptr %.fca.0.extract11.i, i64 16
  %offset_tbl_ptr.i.i35.i = getelementptr i8, ptr %.fca.0.extract11.i, i64 40
  %3008 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %115)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %116)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %117)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %118)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %119)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %120)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %121)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0680.i3775)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %122)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %123)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %124)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %125)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %126)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %127)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %128)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %129)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i3776)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %130)
  %hash_coef.i.i147.i3783 = load i64, ptr %hash_coef_ptr.i.i33.i, align 4
  %tbl_size.i.i148.i3784 = load i64, ptr %tbl_size_ptr.i.i34.i, align 4
  %offset_tbl.i.i149.i3785 = load ptr, ptr %offset_tbl_ptr.i.i35.i, align 8
  %product.i.i.i150.i3786 = mul i64 %hash_coef.i.i147.i3783, 4015701072841558310
  %shifted.i.i.i151.i3787 = lshr i64 %product.i.i.i150.i3786, 32
  %xored.i.i.i152.i3788 = xor i64 %shifted.i.i.i151.i3787, %product.i.i.i150.i3786
  %hash.i.i.i153.i3789 = and i64 %xored.i.i.i152.i3788, %tbl_size.i.i148.i3784
  %offset_ptr.i.i154.i3790 = getelementptr i32, ptr %offset_tbl.i.i149.i3785, i64 %hash.i.i.i153.i3789
  %offset.i.i169.i3791 = load i32, ptr %offset_ptr.i.i154.i3790, align 4
  %3009 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3010 = load i32, ptr %362, align 4
  %3011 = icmp sgt i32 %3010, 0
  br i1 %3011, label %.lr.ph.i3792, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit

.lr.ph.i3792:                                     ; preds = %3007
  %.fca.1.extract13.i = extractvalue { ptr, i160 } %3004, 1
  %.sroa.576.8.extract.shift.i = lshr i160 %.fca.1.extract13.i, 64
  %3012 = insertelement <2 x i160> poison, i160 %.sroa.576.8.extract.shift.i, i64 0
  %3013 = insertelement <2 x i160> %3012, i160 %.fca.1.extract13.i, i64 1
  %3014 = trunc <2 x i160> %3013 to <2 x i64>
  %3015 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i, 0
  %3016 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %3017 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract11.i)
  %invariant.gep4368 = getelementptr i8, ptr %.fca.0.extract11.i, i64 64
  %3018 = insertvalue { ptr, i160 } undef, ptr %.fca.0.extract11.i, 0
  br label %3019

3019:                                             ; preds = %.cont.cont.i3835, %.lr.ph.i3792
  %offset.i.i260.i38504374 = phi i32 [ %offset.i.i169.i3791, %.lr.ph.i3792 ], [ %offset.i.i260.i3850, %.cont.cont.i3835 ]
  %.reg2mem195.0678.i3793 = phi i32 [ 1, %.lr.ph.i3792 ], [ %3174, %.cont.cont.i3835 ]
  %.reg2mem193.0677.i3794 = phi i32 [ 0, %.lr.ph.i3792 ], [ %3179, %.cont.cont.i3835 ]
  %3020 = phi <2 x i64> [ %3014, %.lr.ph.i3792 ], [ %3178, %.cont.cont.i3835 ]
  %3021 = extractelement <2 x i64> %3020, i64 1
  %.sroa.speculated352.i38374370 = inttoptr i64 %3021 to ptr
  %3022 = extractelement <2 x i64> %3020, i64 0
  %.sroa.speculated346.i38384372 = inttoptr i64 %3022 to ptr
  %3023 = insertvalue { ptr, ptr, ptr, i32 } %3015, ptr %.sroa.speculated352.i38374370, 1
  %3024 = insertvalue { ptr, ptr, ptr, i32 } %3023, ptr %.sroa.speculated346.i38384372, 2
  %3025 = insertvalue { ptr, ptr, ptr, i32 } %3024, i32 %offset.i.i260.i38504374, 3
  %3026 = sext i32 %offset.i.i260.i38504374 to i64
  %gep4369 = getelementptr ptr, ptr %invariant.gep4368, i64 %3026
  %3027 = load ptr, ptr %gep4369, align 8
  %3028 = call ptr %3027({ ptr, ptr, ptr, i32 } %3025, ptr nonnull %2)
  %3029 = call i32 %3028({ ptr, ptr, ptr, i32 } %3025, { ptr, ptr, ptr, i32 } %3025, ptr nonnull %2)
  %3030 = icmp eq i32 %.reg2mem195.0678.i3793, 1
  %3031 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br i1 %3030, label %3032, label %3094

3032:                                             ; preds = %3019
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %3033 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3034 = load ptr, ptr %339, align 8
  %3035 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3034, 0
  %3036 = load ptr, ptr %340, align 8
  %3037 = insertvalue { ptr, ptr, ptr, i32 } %3035, ptr %3036, 1
  %3038 = load ptr, ptr %341, align 8
  %3039 = insertvalue { ptr, ptr, ptr, i32 } %3037, ptr %3038, 2
  %3040 = load i32, ptr %342, align 4
  %3041 = insertvalue { ptr, ptr, ptr, i32 } %3039, i32 %3040, 3
  %hash_coef_ptr.i.i10.i5068 = getelementptr i8, ptr %3034, i64 8
  %tbl_size_ptr.i.i11.i5069 = getelementptr i8, ptr %3034, i64 16
  %offset_tbl_ptr.i.i12.i5070 = getelementptr i8, ptr %3034, i64 40
  %hash_coef.i.i13.i5071 = load i64, ptr %hash_coef_ptr.i.i10.i5068, align 4
  %tbl_size.i.i14.i5072 = load i64, ptr %tbl_size_ptr.i.i11.i5069, align 4
  %offset_tbl.i.i15.i5073 = load ptr, ptr %offset_tbl_ptr.i.i12.i5070, align 8
  %product.i.i.i16.i5074 = mul i64 %hash_coef.i.i13.i5071, -5261542750394134544
  %shifted.i.i.i17.i5075 = lshr i64 %product.i.i.i16.i5074, 32
  %xored.i.i.i18.i5076 = xor i64 %shifted.i.i.i17.i5075, %product.i.i.i16.i5074
  %hash.i.i.i19.i5077 = and i64 %xored.i.i.i18.i5076, %tbl_size.i.i14.i5072
  %offset_ptr.i.i20.i5078 = getelementptr i32, ptr %offset_tbl.i.i15.i5073, i64 %hash.i.i.i19.i5077
  %offset.i.i21.i5079 = load i32, ptr %offset_ptr.i.i20.i5078, align 4
  %eq.i.i5080 = icmp eq i32 %3040, %offset.i.i21.i5079
  call void @llvm.assume(i1 %eq.i.i5080) #30
  %3042 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %3043 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3034)
  %3044 = sext i32 %3040 to i64
  %3045 = getelementptr ptr, ptr %3034, i64 %3044
  %3046 = getelementptr i8, ptr %3045, i64 64
  %3047 = load ptr, ptr %3046, align 8
  %3048 = call ptr %3047({ ptr, ptr, ptr, i32 } %3041, ptr nonnull %2)
  %3049 = call i32 %3048({ ptr, ptr, ptr, i32 } %3041, { ptr, ptr, ptr, i32 } %3041, ptr nonnull %2)
  %3050 = add i32 %3049, -1
  %3051 = and i32 %3050, %3029
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %3052 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3053 = load ptr, ptr %339, align 8
  %3054 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3053, 0
  %3055 = load ptr, ptr %340, align 8
  %3056 = insertvalue { ptr, ptr, ptr, i32 } %3054, ptr %3055, 1
  %3057 = load ptr, ptr %341, align 8
  %3058 = insertvalue { ptr, ptr, ptr, i32 } %3056, ptr %3057, 2
  %3059 = load i32, ptr %342, align 4
  %3060 = insertvalue { ptr, ptr, ptr, i32 } %3058, i32 %3059, 3
  %hash_coef_ptr.i.i172.i3851 = getelementptr i8, ptr %3053, i64 8
  %tbl_size_ptr.i.i173.i3852 = getelementptr i8, ptr %3053, i64 16
  %offset_tbl_ptr.i.i174.i3853 = getelementptr i8, ptr %3053, i64 40
  %hash_coef.i.i175.i3854 = load i64, ptr %hash_coef_ptr.i.i172.i3851, align 4
  %tbl_size.i.i176.i3855 = load i64, ptr %tbl_size_ptr.i.i173.i3852, align 4
  %offset_tbl.i.i177.i3856 = load ptr, ptr %offset_tbl_ptr.i.i174.i3853, align 8
  %product.i.i.i178.i3857 = mul i64 %hash_coef.i.i175.i3854, -5261542750394134544
  %shifted.i.i.i179.i3858 = lshr i64 %product.i.i.i178.i3857, 32
  %xored.i.i.i180.i3859 = xor i64 %shifted.i.i.i179.i3858, %product.i.i.i178.i3857
  %hash.i.i.i181.i3860 = and i64 %xored.i.i.i180.i3859, %tbl_size.i.i176.i3855
  %offset_ptr.i.i182.i3861 = getelementptr i32, ptr %offset_tbl.i.i177.i3856, i64 %hash.i.i.i181.i3860
  %offset.i.i183.i3862 = load i32, ptr %offset_ptr.i.i182.i3861, align 4
  %eq.i.i3863 = icmp eq i32 %3059, %offset.i.i183.i3862
  call void @llvm.assume(i1 %eq.i.i3863) #30
  store ptr @_parameterization_Ptri32, ptr %115, align 8
  %3061 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %115)
  %3062 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3053)
  %3063 = sext i32 %3059 to i64
  %3064 = getelementptr ptr, ptr %3053, i64 %3063
  %3065 = getelementptr i8, ptr %3064, i64 120
  %3066 = load ptr, ptr %3065, align 8
  store ptr @i32_typ, ptr %116, align 8
  %3067 = call ptr %3066({ ptr, ptr, ptr, i32 } %3060, ptr nonnull %116)
  %3068 = call { ptr, i160 } %3067({ ptr, ptr, ptr, i32 } %3060, { ptr, ptr, ptr, i32 } %3060, ptr nonnull %115, i32 %3051)
  %.fca.0.extract112.i3864 = extractvalue { ptr, i160 } %3068, 0
  %.sroa.3111.0.insert.ext.i3865 = zext i32 %offset.i.i260.i38504374 to i160
  %.sroa.3111.0.insert.shift.i3866 = shl nuw i160 %.sroa.3111.0.insert.ext.i3865, 128
  %.sroa.2110.0.insert.ext.i3867 = zext i64 %3022 to i160
  %.sroa.2110.0.insert.shift.i3868 = shl nuw nsw i160 %.sroa.2110.0.insert.ext.i3867, 64
  %.sroa.2110.0.insert.insert.i3869 = or disjoint i160 %.sroa.2110.0.insert.shift.i3868, %.sroa.3111.0.insert.shift.i3866
  %.sroa.0109.0.insert.ext.i3870 = zext i64 %3021 to i160
  %.sroa.0109.0.insert.insert.i3871 = or disjoint i160 %.sroa.2110.0.insert.insert.i3869, %.sroa.0109.0.insert.ext.i3870
  %3069 = insertvalue { ptr, i160 } %3018, i160 %.sroa.0109.0.insert.insert.i3871, 1
  %3070 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3071 = load ptr, ptr %339, align 8
  %3072 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3071, 0
  %3073 = load ptr, ptr %340, align 8
  %3074 = insertvalue { ptr, ptr, ptr, i32 } %3072, ptr %3073, 1
  %3075 = load ptr, ptr %341, align 8
  %3076 = insertvalue { ptr, ptr, ptr, i32 } %3074, ptr %3075, 2
  %3077 = load i32, ptr %342, align 4
  %3078 = insertvalue { ptr, ptr, ptr, i32 } %3076, i32 %3077, 3
  %hash_coef_ptr.i.i186.i3872 = getelementptr i8, ptr %3071, i64 8
  %tbl_size_ptr.i.i187.i3873 = getelementptr i8, ptr %3071, i64 16
  %offset_tbl_ptr.i.i188.i3874 = getelementptr i8, ptr %3071, i64 40
  %hash_coef.i.i189.i3875 = load i64, ptr %hash_coef_ptr.i.i186.i3872, align 4
  %tbl_size.i.i190.i3876 = load i64, ptr %tbl_size_ptr.i.i187.i3873, align 4
  %offset_tbl.i.i191.i3877 = load ptr, ptr %offset_tbl_ptr.i.i188.i3874, align 8
  %product.i.i.i192.i3878 = mul i64 %hash_coef.i.i189.i3875, -5261542750394134544
  %shifted.i.i.i193.i3879 = lshr i64 %product.i.i.i192.i3878, 32
  %xored.i.i.i194.i3880 = xor i64 %shifted.i.i.i193.i3879, %product.i.i.i192.i3878
  %hash.i.i.i195.i3881 = and i64 %xored.i.i.i194.i3880, %tbl_size.i.i190.i3876
  %offset_ptr.i.i196.i3882 = getelementptr i32, ptr %offset_tbl.i.i191.i3877, i64 %hash.i.i.i195.i3881
  %offset.i.i197.i3883 = load i32, ptr %offset_ptr.i.i196.i3882, align 4
  %eq.i200.i3884 = icmp eq i32 %3077, %offset.i.i197.i3883
  call void @llvm.assume(i1 %eq.i200.i3884) #30
  %3079 = load ptr, ptr %result.i151, align 8
  %3080 = load ptr, ptr %322, align 8
  %result.i.i3885 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3081 = getelementptr i8, ptr %result.i.i3885, i64 16
  store ptr %3080, ptr %3081, align 8
  %3082 = getelementptr i8, ptr %result.i.i3885, i64 8
  store ptr %3079, ptr %3082, align 8
  %3083 = getelementptr i8, ptr %result.i.i3885, i64 24
  store ptr null, ptr %3083, align 8
  %3084 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i3885)
  store ptr @Entry, ptr %result.i.i3885, align 8
  store ptr @_parameterization_Ptri32, ptr %117, align 8
  store ptr %result.i.i3885, ptr %464, align 8
  %3085 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %117)
  %3086 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3071)
  %3087 = sext i32 %3077 to i64
  %3088 = getelementptr ptr, ptr %3071, i64 %3087
  %3089 = getelementptr i8, ptr %3088, i64 128
  %3090 = load ptr, ptr %3089, align 8
  store ptr @i32_typ, ptr %118, align 8
  store ptr %.fca.0.extract11.i, ptr %465, align 8
  %3091 = call ptr %3090({ ptr, ptr, ptr, i32 } %3078, ptr nonnull %118)
  call void %3091({ ptr, ptr, ptr, i32 } %3078, { ptr, ptr, ptr, i32 } %3078, ptr nonnull %117, i32 %3051, { ptr, i160 } %3069)
  %3092 = icmp ne ptr %.fca.0.extract112.i3864, @nil_typ
  %3093 = icmp ne ptr %.fca.0.extract112.i3864, null
  %.not140.i3886 = and i1 %3092, %3093
  br i1 %.not140.i3886, label %.cont.cont.i3835, label %3182

3094:                                             ; preds = %3019
  %3095 = add i32 %3029, 2127912214
  %3096 = shl i32 %3029, 12
  %3097 = add i32 %3095, %3096
  %3098 = ashr i32 %3097, 19
  %3099 = xor i32 %3097, %3098
  %3100 = xor i32 %3099, -949894596
  %3101 = add i32 %3100, 374761393
  %3102 = shl i32 %3100, 5
  %3103 = add i32 %3101, %3102
  %3104 = add i32 %3103, -744332180
  %3105 = shl i32 %3103, 9
  %3106 = xor i32 %3104, %3105
  %3107 = add i32 %3106, -42973499
  %3108 = shl i32 %3106, 3
  %3109 = add i32 %3107, %3108
  %3110 = ashr i32 %3109, 16
  %3111 = xor i32 %3109, %3110
  %3112 = xor i32 %3111, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %3113 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3114 = load ptr, ptr %356, align 8
  %3115 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3114, 0
  %3116 = load ptr, ptr %357, align 8
  %3117 = insertvalue { ptr, ptr, ptr, i32 } %3115, ptr %3116, 1
  %3118 = load ptr, ptr %358, align 8
  %3119 = insertvalue { ptr, ptr, ptr, i32 } %3117, ptr %3118, 2
  %3120 = load i32, ptr %359, align 4
  %3121 = insertvalue { ptr, ptr, ptr, i32 } %3119, i32 %3120, 3
  %hash_coef_ptr.i.i10.i5098 = getelementptr i8, ptr %3114, i64 8
  %tbl_size_ptr.i.i11.i5099 = getelementptr i8, ptr %3114, i64 16
  %offset_tbl_ptr.i.i12.i5100 = getelementptr i8, ptr %3114, i64 40
  %hash_coef.i.i13.i5101 = load i64, ptr %hash_coef_ptr.i.i10.i5098, align 4
  %tbl_size.i.i14.i5102 = load i64, ptr %tbl_size_ptr.i.i11.i5099, align 4
  %offset_tbl.i.i15.i5103 = load ptr, ptr %offset_tbl_ptr.i.i12.i5100, align 8
  %product.i.i.i16.i5104 = mul i64 %hash_coef.i.i13.i5101, -5261542750394134544
  %shifted.i.i.i17.i5105 = lshr i64 %product.i.i.i16.i5104, 32
  %xored.i.i.i18.i5106 = xor i64 %shifted.i.i.i17.i5105, %product.i.i.i16.i5104
  %hash.i.i.i19.i5107 = and i64 %xored.i.i.i18.i5106, %tbl_size.i.i14.i5102
  %offset_ptr.i.i20.i5108 = getelementptr i32, ptr %offset_tbl.i.i15.i5103, i64 %hash.i.i.i19.i5107
  %offset.i.i21.i5109 = load i32, ptr %offset_ptr.i.i20.i5108, align 4
  %eq.i.i5110 = icmp eq i32 %3120, %offset.i.i21.i5109
  call void @llvm.assume(i1 %eq.i.i5110) #30
  %3122 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %3123 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3114)
  %3124 = sext i32 %3120 to i64
  %3125 = getelementptr ptr, ptr %3114, i64 %3124
  %3126 = getelementptr i8, ptr %3125, i64 64
  %3127 = load ptr, ptr %3126, align 8
  %3128 = call ptr %3127({ ptr, ptr, ptr, i32 } %3121, ptr nonnull %2)
  %3129 = call i32 %3128({ ptr, ptr, ptr, i32 } %3121, { ptr, ptr, ptr, i32 } %3121, ptr nonnull %2)
  %3130 = add i32 %3129, -1
  %3131 = and i32 %3130, %3112
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %3132 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3133 = load ptr, ptr %356, align 8
  %3134 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3133, 0
  %3135 = load ptr, ptr %357, align 8
  %3136 = insertvalue { ptr, ptr, ptr, i32 } %3134, ptr %3135, 1
  %3137 = load ptr, ptr %358, align 8
  %3138 = insertvalue { ptr, ptr, ptr, i32 } %3136, ptr %3137, 2
  %3139 = load i32, ptr %359, align 4
  %3140 = insertvalue { ptr, ptr, ptr, i32 } %3138, i32 %3139, 3
  %hash_coef_ptr.i.i202.i3795 = getelementptr i8, ptr %3133, i64 8
  %tbl_size_ptr.i.i203.i3796 = getelementptr i8, ptr %3133, i64 16
  %offset_tbl_ptr.i.i204.i3797 = getelementptr i8, ptr %3133, i64 40
  %hash_coef.i.i205.i3798 = load i64, ptr %hash_coef_ptr.i.i202.i3795, align 4
  %tbl_size.i.i206.i3799 = load i64, ptr %tbl_size_ptr.i.i203.i3796, align 4
  %offset_tbl.i.i207.i3800 = load ptr, ptr %offset_tbl_ptr.i.i204.i3797, align 8
  %product.i.i.i208.i3801 = mul i64 %hash_coef.i.i205.i3798, -5261542750394134544
  %shifted.i.i.i209.i3802 = lshr i64 %product.i.i.i208.i3801, 32
  %xored.i.i.i210.i3803 = xor i64 %shifted.i.i.i209.i3802, %product.i.i.i208.i3801
  %hash.i.i.i211.i3804 = and i64 %xored.i.i.i210.i3803, %tbl_size.i.i206.i3799
  %offset_ptr.i.i212.i3805 = getelementptr i32, ptr %offset_tbl.i.i207.i3800, i64 %hash.i.i.i211.i3804
  %offset.i.i213.i3806 = load i32, ptr %offset_ptr.i.i212.i3805, align 4
  %eq.i216.i3807 = icmp eq i32 %3139, %offset.i.i213.i3806
  call void @llvm.assume(i1 %eq.i216.i3807) #30
  store ptr @_parameterization_Ptri32, ptr %123, align 8
  %3141 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %123)
  %3142 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3133)
  %3143 = sext i32 %3139 to i64
  %3144 = getelementptr ptr, ptr %3133, i64 %3143
  %3145 = getelementptr i8, ptr %3144, i64 120
  %3146 = load ptr, ptr %3145, align 8
  store ptr @i32_typ, ptr %124, align 8
  %3147 = call ptr %3146({ ptr, ptr, ptr, i32 } %3140, ptr nonnull %124)
  %3148 = call { ptr, i160 } %3147({ ptr, ptr, ptr, i32 } %3140, { ptr, ptr, ptr, i32 } %3140, ptr nonnull %123, i32 %3131)
  %.fca.0.extract87.i3808 = extractvalue { ptr, i160 } %3148, 0
  %.sroa.3.0.insert.ext.i3809 = zext i32 %offset.i.i260.i38504374 to i160
  %.sroa.3.0.insert.shift.i3810 = shl nuw i160 %.sroa.3.0.insert.ext.i3809, 128
  %.sroa.2.0.insert.ext.i3811 = zext i64 %3022 to i160
  %.sroa.2.0.insert.shift.i3812 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i3811, 64
  %.sroa.2.0.insert.insert.i3813 = or disjoint i160 %.sroa.2.0.insert.shift.i3812, %.sroa.3.0.insert.shift.i3810
  %.sroa.0.0.insert.ext.i3814 = zext i64 %3021 to i160
  %.sroa.0.0.insert.insert.i3815 = or disjoint i160 %.sroa.2.0.insert.insert.i3813, %.sroa.0.0.insert.ext.i3814
  %3149 = insertvalue { ptr, i160 } %3018, i160 %.sroa.0.0.insert.insert.i3815, 1
  %3150 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3151 = load ptr, ptr %356, align 8
  %3152 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3151, 0
  %3153 = load ptr, ptr %357, align 8
  %3154 = insertvalue { ptr, ptr, ptr, i32 } %3152, ptr %3153, 1
  %3155 = load ptr, ptr %358, align 8
  %3156 = insertvalue { ptr, ptr, ptr, i32 } %3154, ptr %3155, 2
  %3157 = load i32, ptr %359, align 4
  %3158 = insertvalue { ptr, ptr, ptr, i32 } %3156, i32 %3157, 3
  %hash_coef_ptr.i.i218.i3816 = getelementptr i8, ptr %3151, i64 8
  %tbl_size_ptr.i.i219.i3817 = getelementptr i8, ptr %3151, i64 16
  %offset_tbl_ptr.i.i220.i3818 = getelementptr i8, ptr %3151, i64 40
  %hash_coef.i.i221.i3819 = load i64, ptr %hash_coef_ptr.i.i218.i3816, align 4
  %tbl_size.i.i222.i3820 = load i64, ptr %tbl_size_ptr.i.i219.i3817, align 4
  %offset_tbl.i.i223.i3821 = load ptr, ptr %offset_tbl_ptr.i.i220.i3818, align 8
  %product.i.i.i224.i3822 = mul i64 %hash_coef.i.i221.i3819, -5261542750394134544
  %shifted.i.i.i225.i3823 = lshr i64 %product.i.i.i224.i3822, 32
  %xored.i.i.i226.i3824 = xor i64 %shifted.i.i.i225.i3823, %product.i.i.i224.i3822
  %hash.i.i.i227.i3825 = and i64 %xored.i.i.i226.i3824, %tbl_size.i.i222.i3820
  %offset_ptr.i.i228.i3826 = getelementptr i32, ptr %offset_tbl.i.i223.i3821, i64 %hash.i.i.i227.i3825
  %offset.i.i229.i3827 = load i32, ptr %offset_ptr.i.i228.i3826, align 4
  %eq.i232.i3828 = icmp eq i32 %3157, %offset.i.i229.i3827
  call void @llvm.assume(i1 %eq.i232.i3828) #30
  %3159 = load ptr, ptr %result.i151, align 8
  %3160 = load ptr, ptr %322, align 8
  %result.i233.i3829 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3161 = getelementptr i8, ptr %result.i233.i3829, i64 16
  store ptr %3160, ptr %3161, align 8
  %3162 = getelementptr i8, ptr %result.i233.i3829, i64 8
  store ptr %3159, ptr %3162, align 8
  %3163 = getelementptr i8, ptr %result.i233.i3829, i64 24
  store ptr null, ptr %3163, align 8
  %3164 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i233.i3829)
  store ptr @Entry, ptr %result.i233.i3829, align 8
  store ptr @_parameterization_Ptri32, ptr %125, align 8
  store ptr %result.i233.i3829, ptr %462, align 8
  %3165 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %125)
  %3166 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3151)
  %3167 = sext i32 %3157 to i64
  %3168 = getelementptr ptr, ptr %3151, i64 %3167
  %3169 = getelementptr i8, ptr %3168, i64 128
  %3170 = load ptr, ptr %3169, align 8
  store ptr @i32_typ, ptr %126, align 8
  store ptr %.fca.0.extract11.i, ptr %463, align 8
  %3171 = call ptr %3170({ ptr, ptr, ptr, i32 } %3158, ptr nonnull %126)
  call void %3171({ ptr, ptr, ptr, i32 } %3158, { ptr, ptr, ptr, i32 } %3158, ptr nonnull %125, i32 %3131, { ptr, i160 } %3149)
  %3172 = icmp ne ptr %.fca.0.extract87.i3808, @nil_typ
  %3173 = icmp ne ptr %.fca.0.extract87.i3808, null
  %.not138.i3830 = and i1 %3172, %3173
  br i1 %.not138.i3830, label %.cont.cont.i3835, label %3182

.cont.cont.i3835:                                 ; preds = %3094, %3032
  %.sink4408 = phi { ptr, i160 } [ %3068, %3032 ], [ %3148, %3094 ]
  %3174 = phi i32 [ 2, %3032 ], [ 1, %3094 ]
  %vptr.i248.sroa.speculated.i3836 = phi ptr [ %.fca.0.extract112.i3864, %3032 ], [ %.fca.0.extract87.i3808, %3094 ]
  %.fca.1.extract89.i3831 = extractvalue { ptr, i160 } %.sink4408, 1
  %.sroa.3407.sroa.4.0.extract.shift.i3832 = lshr i160 %.fca.1.extract89.i3831, 64
  %3175 = trunc i160 %.sroa.3407.sroa.4.0.extract.shift.i3832 to i64
  %3176 = insertelement <2 x i64> poison, i64 %3175, i64 0
  %3177 = trunc i160 %.fca.1.extract89.i3831 to i64
  %3178 = insertelement <2 x i64> %3176, i64 %3177, i64 1
  %hash_coef_ptr.i.i249.i3839 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i3836, i64 8
  %tbl_size_ptr.i.i250.i3840 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i3836, i64 16
  %offset_tbl_ptr.i.i251.i3841 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i3836, i64 40
  %hash_coef.i.i252.i3842 = load i64, ptr %hash_coef_ptr.i.i249.i3839, align 4
  %tbl_size.i.i253.i3843 = load i64, ptr %tbl_size_ptr.i.i250.i3840, align 4
  %offset_tbl.i.i254.i3844 = load ptr, ptr %offset_tbl_ptr.i.i251.i3841, align 8
  %product.i.i.i255.i3845 = mul i64 %hash_coef.i.i252.i3842, 4015701072841558310
  %shifted.i.i.i256.i3846 = lshr i64 %product.i.i.i255.i3845, 32
  %xored.i.i.i257.i3847 = xor i64 %shifted.i.i.i256.i3846, %product.i.i.i255.i3845
  %hash.i.i.i258.i3848 = and i64 %xored.i.i.i257.i3847, %tbl_size.i.i253.i3843
  %offset_ptr.i.i259.i3849 = getelementptr i32, ptr %offset_tbl.i.i254.i3844, i64 %hash.i.i.i258.i3848
  %offset.i.i260.i3850 = load i32, ptr %offset_ptr.i.i259.i3849, align 4
  %3179 = add nuw nsw i32 %.reg2mem193.0677.i3794, 1
  %3180 = load i32, ptr %362, align 4
  %3181 = icmp slt i32 %3179, %3180
  br i1 %3181, label %3019, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit

3182:                                             ; preds = %3094, %3032
  %3183 = phi ptr [ %127, %3094 ], [ %119, %3032 ]
  %3184 = phi ptr [ %128, %3094 ], [ %120, %3032 ]
  %3185 = phi ptr [ %129, %3094 ], [ %121, %3032 ]
  %3186 = phi ptr [ %.sroa.0.i3776, %3094 ], [ %.sroa.0680.i3775, %3032 ]
  %3187 = phi ptr [ %130, %3094 ], [ %122, %3032 ]
  %3188 = load i32, ptr %360, align 4
  store i32 %3188, ptr %3183, align 4
  store i32 1, ptr %3184, align 4
  %3189 = add i32 %3188, 1
  store i32 %3189, ptr %3185, align 4
  %3190 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  store i32 %3189, ptr %360, align 4
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %3187, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %3186, align 8
  br label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit

HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit: ; preds = %.cont.cont.i3835, %3007, %3182
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %115)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %116)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %117)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %118)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %119)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %120)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %121)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i3775)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %122)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %123)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %124)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %125)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %126)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %127)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %128)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %129)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i3776)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %130)
  br label %._crit_edge1.i

._crit_edge1.i:                                   ; preds = %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit, %2999
  %3191 = add nuw nsw i32 %.reg2mem13.079.i, 1
  %3192 = icmp slt i32 %3191, %2958
  br i1 %3192, label %2999, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit: ; preds = %._crit_edge1.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %153)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %154)
  %3193 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %151)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %152)
  %invariant.gep.i2947 = getelementptr i8, ptr %2944, i64 120
  %offset_tbl.i.i24.i2949 = load ptr, ptr %offset_tbl_ptr.i.i48.i, align 8
  %hash_coef.i.i22.i2951 = load i64, ptr %hash_coef_ptr.i.i46.i, align 4
  %product.i.i.i25.i2952 = mul i64 %hash_coef.i.i22.i2951, -5261542750394134544
  %shifted.i.i.i26.i2953 = lshr i64 %product.i.i.i25.i2952, 32
  %xored.i.i.i27.i2954 = xor i64 %shifted.i.i.i26.i2953, %product.i.i.i25.i2952
  %tbl_size.i.i23.i2956 = load i64, ptr %tbl_size_ptr.i.i47.i, align 4
  %hash.i.i.i28.i2957 = and i64 %xored.i.i.i27.i2954, %tbl_size.i.i23.i2956
  %offset_ptr.i.i29.i2958 = getelementptr i32, ptr %offset_tbl.i.i24.i2949, i64 %hash.i.i.i28.i2957
  %offset.i.i30.i2959 = load i32, ptr %offset_ptr.i.i29.i2958, align 4
  %3194 = insertvalue { ptr, ptr, ptr, i32 } %2949, i32 %offset.i.i30.i2959, 3
  %3195 = sext i32 %offset.i.i30.i2959 to i64
  %gep.i2973 = getelementptr ptr, ptr %invariant.gep.i2947, i64 %3195
  %3196 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %3197

3197:                                             ; preds = %._crit_edge1.i2977, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit
  %.reg2mem13.079.i2974 = phi i32 [ 0, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit ], [ %3389, %._crit_edge1.i2977 ]
  store ptr @_parameterization_Ptri32, ptr %151, align 8
  %3198 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %151)
  %3199 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %2944)
  %3200 = load ptr, ptr %gep.i2973, align 8
  store ptr @i32_typ, ptr %152, align 8
  %3201 = call ptr %3200({ ptr, ptr, ptr, i32 } %3194, ptr nonnull %152)
  %3202 = call { ptr, i160 } %3201({ ptr, ptr, ptr, i32 } %3194, { ptr, ptr, ptr, i32 } %3194, ptr nonnull %151, i32 %.reg2mem13.079.i2974)
  %.fca.0.extract11.i2975 = extractvalue { ptr, i160 } %3202, 0
  %3203 = icmp ne ptr %.fca.0.extract11.i2975, @nil_typ
  %3204 = icmp ne ptr %.fca.0.extract11.i2975, null
  %.not17.i2976 = and i1 %3203, %3204
  br i1 %.not17.i2976, label %3205, label %._crit_edge1.i2977

3205:                                             ; preds = %3197
  %hash_coef_ptr.i.i33.i2982 = getelementptr i8, ptr %.fca.0.extract11.i2975, i64 8
  %tbl_size_ptr.i.i34.i2983 = getelementptr i8, ptr %.fca.0.extract11.i2975, i64 16
  %offset_tbl_ptr.i.i35.i2984 = getelementptr i8, ptr %.fca.0.extract11.i2975, i64 40
  %3206 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %99)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %100)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %101)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %102)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %103)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %104)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %105)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0680.i3889)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %106)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %107)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %108)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %109)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %110)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %111)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %112)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %113)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i3891)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %114)
  %hash_coef.i.i147.i3911 = load i64, ptr %hash_coef_ptr.i.i33.i2982, align 4
  %tbl_size.i.i148.i3912 = load i64, ptr %tbl_size_ptr.i.i34.i2983, align 4
  %offset_tbl.i.i149.i3913 = load ptr, ptr %offset_tbl_ptr.i.i35.i2984, align 8
  %product.i.i.i150.i3914 = mul i64 %hash_coef.i.i147.i3911, 4015701072841558310
  %shifted.i.i.i151.i3915 = lshr i64 %product.i.i.i150.i3914, 32
  %xored.i.i.i152.i3916 = xor i64 %shifted.i.i.i151.i3915, %product.i.i.i150.i3914
  %hash.i.i.i153.i3917 = and i64 %xored.i.i.i152.i3916, %tbl_size.i.i148.i3912
  %offset_ptr.i.i154.i3918 = getelementptr i32, ptr %offset_tbl.i.i149.i3913, i64 %hash.i.i.i153.i3917
  %offset.i.i169.i3919 = load i32, ptr %offset_ptr.i.i154.i3918, align 4
  %3207 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3208 = load i32, ptr %362, align 4
  %3209 = icmp sgt i32 %3208, 0
  br i1 %3209, label %.lr.ph.i3925, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4045

.lr.ph.i3925:                                     ; preds = %3205
  %.fca.1.extract13.i2978 = extractvalue { ptr, i160 } %3202, 1
  %.sroa.576.8.extract.shift.i2980 = lshr i160 %.fca.1.extract13.i2978, 64
  %3210 = insertelement <2 x i160> poison, i160 %.sroa.576.8.extract.shift.i2980, i64 0
  %3211 = insertelement <2 x i160> %3210, i160 %.fca.1.extract13.i2978, i64 1
  %3212 = trunc <2 x i160> %3211 to <2 x i64>
  %3213 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i2975, 0
  %3214 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %3215 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract11.i2975)
  %invariant.gep4375 = getelementptr i8, ptr %.fca.0.extract11.i2975, i64 64
  %3216 = insertvalue { ptr, i160 } undef, ptr %.fca.0.extract11.i2975, 0
  br label %3217

3217:                                             ; preds = %.cont.cont.i3978, %.lr.ph.i3925
  %offset.i.i260.i39954382 = phi i32 [ %offset.i.i169.i3919, %.lr.ph.i3925 ], [ %offset.i.i260.i3995, %.cont.cont.i3978 ]
  %.reg2mem195.0678.i3926 = phi i32 [ 1, %.lr.ph.i3925 ], [ %3372, %.cont.cont.i3978 ]
  %.reg2mem193.0677.i3927 = phi i32 [ 0, %.lr.ph.i3925 ], [ %3377, %.cont.cont.i3978 ]
  %3218 = phi <2 x i64> [ %3212, %.lr.ph.i3925 ], [ %3376, %.cont.cont.i3978 ]
  %3219 = extractelement <2 x i64> %3218, i64 1
  %.sroa.speculated352.i39824378 = inttoptr i64 %3219 to ptr
  %3220 = extractelement <2 x i64> %3218, i64 0
  %.sroa.speculated346.i39834380 = inttoptr i64 %3220 to ptr
  %3221 = insertvalue { ptr, ptr, ptr, i32 } %3213, ptr %.sroa.speculated352.i39824378, 1
  %3222 = insertvalue { ptr, ptr, ptr, i32 } %3221, ptr %.sroa.speculated346.i39834380, 2
  %3223 = insertvalue { ptr, ptr, ptr, i32 } %3222, i32 %offset.i.i260.i39954382, 3
  %3224 = sext i32 %offset.i.i260.i39954382 to i64
  %gep4376 = getelementptr ptr, ptr %invariant.gep4375, i64 %3224
  %3225 = load ptr, ptr %gep4376, align 8
  %3226 = call ptr %3225({ ptr, ptr, ptr, i32 } %3223, ptr nonnull %2)
  %3227 = call i32 %3226({ ptr, ptr, ptr, i32 } %3223, { ptr, ptr, ptr, i32 } %3223, ptr nonnull %2)
  %3228 = icmp eq i32 %.reg2mem195.0678.i3926, 1
  %3229 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br i1 %3228, label %3230, label %3292

3230:                                             ; preds = %3217
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %3231 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3232 = load ptr, ptr %339, align 8
  %3233 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3232, 0
  %3234 = load ptr, ptr %340, align 8
  %3235 = insertvalue { ptr, ptr, ptr, i32 } %3233, ptr %3234, 1
  %3236 = load ptr, ptr %341, align 8
  %3237 = insertvalue { ptr, ptr, ptr, i32 } %3235, ptr %3236, 2
  %3238 = load i32, ptr %342, align 4
  %3239 = insertvalue { ptr, ptr, ptr, i32 } %3237, i32 %3238, 3
  %hash_coef_ptr.i.i10.i5128 = getelementptr i8, ptr %3232, i64 8
  %tbl_size_ptr.i.i11.i5129 = getelementptr i8, ptr %3232, i64 16
  %offset_tbl_ptr.i.i12.i5130 = getelementptr i8, ptr %3232, i64 40
  %hash_coef.i.i13.i5131 = load i64, ptr %hash_coef_ptr.i.i10.i5128, align 4
  %tbl_size.i.i14.i5132 = load i64, ptr %tbl_size_ptr.i.i11.i5129, align 4
  %offset_tbl.i.i15.i5133 = load ptr, ptr %offset_tbl_ptr.i.i12.i5130, align 8
  %product.i.i.i16.i5134 = mul i64 %hash_coef.i.i13.i5131, -5261542750394134544
  %shifted.i.i.i17.i5135 = lshr i64 %product.i.i.i16.i5134, 32
  %xored.i.i.i18.i5136 = xor i64 %shifted.i.i.i17.i5135, %product.i.i.i16.i5134
  %hash.i.i.i19.i5137 = and i64 %xored.i.i.i18.i5136, %tbl_size.i.i14.i5132
  %offset_ptr.i.i20.i5138 = getelementptr i32, ptr %offset_tbl.i.i15.i5133, i64 %hash.i.i.i19.i5137
  %offset.i.i21.i5139 = load i32, ptr %offset_ptr.i.i20.i5138, align 4
  %eq.i.i5140 = icmp eq i32 %3238, %offset.i.i21.i5139
  call void @llvm.assume(i1 %eq.i.i5140) #30
  %3240 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %3241 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3232)
  %3242 = sext i32 %3238 to i64
  %3243 = getelementptr ptr, ptr %3232, i64 %3242
  %3244 = getelementptr i8, ptr %3243, i64 64
  %3245 = load ptr, ptr %3244, align 8
  %3246 = call ptr %3245({ ptr, ptr, ptr, i32 } %3239, ptr nonnull %2)
  %3247 = call i32 %3246({ ptr, ptr, ptr, i32 } %3239, { ptr, ptr, ptr, i32 } %3239, ptr nonnull %2)
  %3248 = add i32 %3247, -1
  %3249 = and i32 %3248, %3227
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %3250 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3251 = load ptr, ptr %339, align 8
  %3252 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3251, 0
  %3253 = load ptr, ptr %340, align 8
  %3254 = insertvalue { ptr, ptr, ptr, i32 } %3252, ptr %3253, 1
  %3255 = load ptr, ptr %341, align 8
  %3256 = insertvalue { ptr, ptr, ptr, i32 } %3254, ptr %3255, 2
  %3257 = load i32, ptr %342, align 4
  %3258 = insertvalue { ptr, ptr, ptr, i32 } %3256, i32 %3257, 3
  %hash_coef_ptr.i.i172.i4000 = getelementptr i8, ptr %3251, i64 8
  %tbl_size_ptr.i.i173.i4001 = getelementptr i8, ptr %3251, i64 16
  %offset_tbl_ptr.i.i174.i4002 = getelementptr i8, ptr %3251, i64 40
  %hash_coef.i.i175.i4003 = load i64, ptr %hash_coef_ptr.i.i172.i4000, align 4
  %tbl_size.i.i176.i4004 = load i64, ptr %tbl_size_ptr.i.i173.i4001, align 4
  %offset_tbl.i.i177.i4005 = load ptr, ptr %offset_tbl_ptr.i.i174.i4002, align 8
  %product.i.i.i178.i4006 = mul i64 %hash_coef.i.i175.i4003, -5261542750394134544
  %shifted.i.i.i179.i4007 = lshr i64 %product.i.i.i178.i4006, 32
  %xored.i.i.i180.i4008 = xor i64 %shifted.i.i.i179.i4007, %product.i.i.i178.i4006
  %hash.i.i.i181.i4009 = and i64 %xored.i.i.i180.i4008, %tbl_size.i.i176.i4004
  %offset_ptr.i.i182.i4010 = getelementptr i32, ptr %offset_tbl.i.i177.i4005, i64 %hash.i.i.i181.i4009
  %offset.i.i183.i4011 = load i32, ptr %offset_ptr.i.i182.i4010, align 4
  %eq.i.i4012 = icmp eq i32 %3257, %offset.i.i183.i4011
  call void @llvm.assume(i1 %eq.i.i4012) #30
  store ptr @_parameterization_Ptri32, ptr %99, align 8
  %3259 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %99)
  %3260 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3251)
  %3261 = sext i32 %3257 to i64
  %3262 = getelementptr ptr, ptr %3251, i64 %3261
  %3263 = getelementptr i8, ptr %3262, i64 120
  %3264 = load ptr, ptr %3263, align 8
  store ptr @i32_typ, ptr %100, align 8
  %3265 = call ptr %3264({ ptr, ptr, ptr, i32 } %3258, ptr nonnull %100)
  %3266 = call { ptr, i160 } %3265({ ptr, ptr, ptr, i32 } %3258, { ptr, ptr, ptr, i32 } %3258, ptr nonnull %99, i32 %3249)
  %.fca.0.extract112.i4013 = extractvalue { ptr, i160 } %3266, 0
  %.sroa.3111.0.insert.ext.i4014 = zext i32 %offset.i.i260.i39954382 to i160
  %.sroa.3111.0.insert.shift.i4015 = shl nuw i160 %.sroa.3111.0.insert.ext.i4014, 128
  %.sroa.2110.0.insert.ext.i4016 = zext i64 %3220 to i160
  %.sroa.2110.0.insert.shift.i4017 = shl nuw nsw i160 %.sroa.2110.0.insert.ext.i4016, 64
  %.sroa.2110.0.insert.insert.i4018 = or disjoint i160 %.sroa.2110.0.insert.shift.i4017, %.sroa.3111.0.insert.shift.i4015
  %.sroa.0109.0.insert.ext.i4019 = zext i64 %3219 to i160
  %.sroa.0109.0.insert.insert.i4020 = or disjoint i160 %.sroa.2110.0.insert.insert.i4018, %.sroa.0109.0.insert.ext.i4019
  %3267 = insertvalue { ptr, i160 } %3216, i160 %.sroa.0109.0.insert.insert.i4020, 1
  %3268 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3269 = load ptr, ptr %339, align 8
  %3270 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3269, 0
  %3271 = load ptr, ptr %340, align 8
  %3272 = insertvalue { ptr, ptr, ptr, i32 } %3270, ptr %3271, 1
  %3273 = load ptr, ptr %341, align 8
  %3274 = insertvalue { ptr, ptr, ptr, i32 } %3272, ptr %3273, 2
  %3275 = load i32, ptr %342, align 4
  %3276 = insertvalue { ptr, ptr, ptr, i32 } %3274, i32 %3275, 3
  %hash_coef_ptr.i.i186.i4025 = getelementptr i8, ptr %3269, i64 8
  %tbl_size_ptr.i.i187.i4026 = getelementptr i8, ptr %3269, i64 16
  %offset_tbl_ptr.i.i188.i4027 = getelementptr i8, ptr %3269, i64 40
  %hash_coef.i.i189.i4028 = load i64, ptr %hash_coef_ptr.i.i186.i4025, align 4
  %tbl_size.i.i190.i4029 = load i64, ptr %tbl_size_ptr.i.i187.i4026, align 4
  %offset_tbl.i.i191.i4030 = load ptr, ptr %offset_tbl_ptr.i.i188.i4027, align 8
  %product.i.i.i192.i4031 = mul i64 %hash_coef.i.i189.i4028, -5261542750394134544
  %shifted.i.i.i193.i4032 = lshr i64 %product.i.i.i192.i4031, 32
  %xored.i.i.i194.i4033 = xor i64 %shifted.i.i.i193.i4032, %product.i.i.i192.i4031
  %hash.i.i.i195.i4034 = and i64 %xored.i.i.i194.i4033, %tbl_size.i.i190.i4029
  %offset_ptr.i.i196.i4035 = getelementptr i32, ptr %offset_tbl.i.i191.i4030, i64 %hash.i.i.i195.i4034
  %offset.i.i197.i4036 = load i32, ptr %offset_ptr.i.i196.i4035, align 4
  %eq.i200.i4037 = icmp eq i32 %3275, %offset.i.i197.i4036
  call void @llvm.assume(i1 %eq.i200.i4037) #30
  %3277 = load ptr, ptr %result.i151, align 8
  %3278 = load ptr, ptr %322, align 8
  %result.i.i4038 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3279 = getelementptr i8, ptr %result.i.i4038, i64 16
  store ptr %3278, ptr %3279, align 8
  %3280 = getelementptr i8, ptr %result.i.i4038, i64 8
  store ptr %3277, ptr %3280, align 8
  %3281 = getelementptr i8, ptr %result.i.i4038, i64 24
  store ptr null, ptr %3281, align 8
  %3282 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i4038)
  store ptr @Entry, ptr %result.i.i4038, align 8
  store ptr @_parameterization_Ptri32, ptr %101, align 8
  store ptr %result.i.i4038, ptr %468, align 8
  %3283 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %101)
  %3284 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3269)
  %3285 = sext i32 %3275 to i64
  %3286 = getelementptr ptr, ptr %3269, i64 %3285
  %3287 = getelementptr i8, ptr %3286, i64 128
  %3288 = load ptr, ptr %3287, align 8
  store ptr @i32_typ, ptr %102, align 8
  store ptr %.fca.0.extract11.i2975, ptr %469, align 8
  %3289 = call ptr %3288({ ptr, ptr, ptr, i32 } %3276, ptr nonnull %102)
  call void %3289({ ptr, ptr, ptr, i32 } %3276, { ptr, ptr, ptr, i32 } %3276, ptr nonnull %101, i32 %3249, { ptr, i160 } %3267)
  %3290 = icmp ne ptr %.fca.0.extract112.i4013, @nil_typ
  %3291 = icmp ne ptr %.fca.0.extract112.i4013, null
  %.not140.i4039 = and i1 %3290, %3291
  br i1 %.not140.i4039, label %.cont.cont.i3978, label %3380

3292:                                             ; preds = %3217
  %3293 = add i32 %3227, 2127912214
  %3294 = shl i32 %3227, 12
  %3295 = add i32 %3293, %3294
  %3296 = ashr i32 %3295, 19
  %3297 = xor i32 %3295, %3296
  %3298 = xor i32 %3297, -949894596
  %3299 = add i32 %3298, 374761393
  %3300 = shl i32 %3298, 5
  %3301 = add i32 %3299, %3300
  %3302 = add i32 %3301, -744332180
  %3303 = shl i32 %3301, 9
  %3304 = xor i32 %3302, %3303
  %3305 = add i32 %3304, -42973499
  %3306 = shl i32 %3304, 3
  %3307 = add i32 %3305, %3306
  %3308 = ashr i32 %3307, 16
  %3309 = xor i32 %3307, %3308
  %3310 = xor i32 %3309, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %3311 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3312 = load ptr, ptr %356, align 8
  %3313 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3312, 0
  %3314 = load ptr, ptr %357, align 8
  %3315 = insertvalue { ptr, ptr, ptr, i32 } %3313, ptr %3314, 1
  %3316 = load ptr, ptr %358, align 8
  %3317 = insertvalue { ptr, ptr, ptr, i32 } %3315, ptr %3316, 2
  %3318 = load i32, ptr %359, align 4
  %3319 = insertvalue { ptr, ptr, ptr, i32 } %3317, i32 %3318, 3
  %hash_coef_ptr.i.i10.i5158 = getelementptr i8, ptr %3312, i64 8
  %tbl_size_ptr.i.i11.i5159 = getelementptr i8, ptr %3312, i64 16
  %offset_tbl_ptr.i.i12.i5160 = getelementptr i8, ptr %3312, i64 40
  %hash_coef.i.i13.i5161 = load i64, ptr %hash_coef_ptr.i.i10.i5158, align 4
  %tbl_size.i.i14.i5162 = load i64, ptr %tbl_size_ptr.i.i11.i5159, align 4
  %offset_tbl.i.i15.i5163 = load ptr, ptr %offset_tbl_ptr.i.i12.i5160, align 8
  %product.i.i.i16.i5164 = mul i64 %hash_coef.i.i13.i5161, -5261542750394134544
  %shifted.i.i.i17.i5165 = lshr i64 %product.i.i.i16.i5164, 32
  %xored.i.i.i18.i5166 = xor i64 %shifted.i.i.i17.i5165, %product.i.i.i16.i5164
  %hash.i.i.i19.i5167 = and i64 %xored.i.i.i18.i5166, %tbl_size.i.i14.i5162
  %offset_ptr.i.i20.i5168 = getelementptr i32, ptr %offset_tbl.i.i15.i5163, i64 %hash.i.i.i19.i5167
  %offset.i.i21.i5169 = load i32, ptr %offset_ptr.i.i20.i5168, align 4
  %eq.i.i5170 = icmp eq i32 %3318, %offset.i.i21.i5169
  call void @llvm.assume(i1 %eq.i.i5170) #30
  %3320 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %3321 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3312)
  %3322 = sext i32 %3318 to i64
  %3323 = getelementptr ptr, ptr %3312, i64 %3322
  %3324 = getelementptr i8, ptr %3323, i64 64
  %3325 = load ptr, ptr %3324, align 8
  %3326 = call ptr %3325({ ptr, ptr, ptr, i32 } %3319, ptr nonnull %2)
  %3327 = call i32 %3326({ ptr, ptr, ptr, i32 } %3319, { ptr, ptr, ptr, i32 } %3319, ptr nonnull %2)
  %3328 = add i32 %3327, -1
  %3329 = and i32 %3328, %3310
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %3330 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3331 = load ptr, ptr %356, align 8
  %3332 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3331, 0
  %3333 = load ptr, ptr %357, align 8
  %3334 = insertvalue { ptr, ptr, ptr, i32 } %3332, ptr %3333, 1
  %3335 = load ptr, ptr %358, align 8
  %3336 = insertvalue { ptr, ptr, ptr, i32 } %3334, ptr %3335, 2
  %3337 = load i32, ptr %359, align 4
  %3338 = insertvalue { ptr, ptr, ptr, i32 } %3336, i32 %3337, 3
  %hash_coef_ptr.i.i202.i3932 = getelementptr i8, ptr %3331, i64 8
  %tbl_size_ptr.i.i203.i3933 = getelementptr i8, ptr %3331, i64 16
  %offset_tbl_ptr.i.i204.i3934 = getelementptr i8, ptr %3331, i64 40
  %hash_coef.i.i205.i3935 = load i64, ptr %hash_coef_ptr.i.i202.i3932, align 4
  %tbl_size.i.i206.i3936 = load i64, ptr %tbl_size_ptr.i.i203.i3933, align 4
  %offset_tbl.i.i207.i3937 = load ptr, ptr %offset_tbl_ptr.i.i204.i3934, align 8
  %product.i.i.i208.i3938 = mul i64 %hash_coef.i.i205.i3935, -5261542750394134544
  %shifted.i.i.i209.i3939 = lshr i64 %product.i.i.i208.i3938, 32
  %xored.i.i.i210.i3940 = xor i64 %shifted.i.i.i209.i3939, %product.i.i.i208.i3938
  %hash.i.i.i211.i3941 = and i64 %xored.i.i.i210.i3940, %tbl_size.i.i206.i3936
  %offset_ptr.i.i212.i3942 = getelementptr i32, ptr %offset_tbl.i.i207.i3937, i64 %hash.i.i.i211.i3941
  %offset.i.i213.i3943 = load i32, ptr %offset_ptr.i.i212.i3942, align 4
  %eq.i216.i3944 = icmp eq i32 %3337, %offset.i.i213.i3943
  call void @llvm.assume(i1 %eq.i216.i3944) #30
  store ptr @_parameterization_Ptri32, ptr %107, align 8
  %3339 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %107)
  %3340 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3331)
  %3341 = sext i32 %3337 to i64
  %3342 = getelementptr ptr, ptr %3331, i64 %3341
  %3343 = getelementptr i8, ptr %3342, i64 120
  %3344 = load ptr, ptr %3343, align 8
  store ptr @i32_typ, ptr %108, align 8
  %3345 = call ptr %3344({ ptr, ptr, ptr, i32 } %3338, ptr nonnull %108)
  %3346 = call { ptr, i160 } %3345({ ptr, ptr, ptr, i32 } %3338, { ptr, ptr, ptr, i32 } %3338, ptr nonnull %107, i32 %3329)
  %.fca.0.extract87.i3945 = extractvalue { ptr, i160 } %3346, 0
  %.sroa.3.0.insert.ext.i3946 = zext i32 %offset.i.i260.i39954382 to i160
  %.sroa.3.0.insert.shift.i3947 = shl nuw i160 %.sroa.3.0.insert.ext.i3946, 128
  %.sroa.2.0.insert.ext.i3948 = zext i64 %3220 to i160
  %.sroa.2.0.insert.shift.i3949 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i3948, 64
  %.sroa.2.0.insert.insert.i3950 = or disjoint i160 %.sroa.2.0.insert.shift.i3949, %.sroa.3.0.insert.shift.i3947
  %.sroa.0.0.insert.ext.i3951 = zext i64 %3219 to i160
  %.sroa.0.0.insert.insert.i3952 = or disjoint i160 %.sroa.2.0.insert.insert.i3950, %.sroa.0.0.insert.ext.i3951
  %3347 = insertvalue { ptr, i160 } %3216, i160 %.sroa.0.0.insert.insert.i3952, 1
  %3348 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3349 = load ptr, ptr %356, align 8
  %3350 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3349, 0
  %3351 = load ptr, ptr %357, align 8
  %3352 = insertvalue { ptr, ptr, ptr, i32 } %3350, ptr %3351, 1
  %3353 = load ptr, ptr %358, align 8
  %3354 = insertvalue { ptr, ptr, ptr, i32 } %3352, ptr %3353, 2
  %3355 = load i32, ptr %359, align 4
  %3356 = insertvalue { ptr, ptr, ptr, i32 } %3354, i32 %3355, 3
  %hash_coef_ptr.i.i218.i3957 = getelementptr i8, ptr %3349, i64 8
  %tbl_size_ptr.i.i219.i3958 = getelementptr i8, ptr %3349, i64 16
  %offset_tbl_ptr.i.i220.i3959 = getelementptr i8, ptr %3349, i64 40
  %hash_coef.i.i221.i3960 = load i64, ptr %hash_coef_ptr.i.i218.i3957, align 4
  %tbl_size.i.i222.i3961 = load i64, ptr %tbl_size_ptr.i.i219.i3958, align 4
  %offset_tbl.i.i223.i3962 = load ptr, ptr %offset_tbl_ptr.i.i220.i3959, align 8
  %product.i.i.i224.i3963 = mul i64 %hash_coef.i.i221.i3960, -5261542750394134544
  %shifted.i.i.i225.i3964 = lshr i64 %product.i.i.i224.i3963, 32
  %xored.i.i.i226.i3965 = xor i64 %shifted.i.i.i225.i3964, %product.i.i.i224.i3963
  %hash.i.i.i227.i3966 = and i64 %xored.i.i.i226.i3965, %tbl_size.i.i222.i3961
  %offset_ptr.i.i228.i3967 = getelementptr i32, ptr %offset_tbl.i.i223.i3962, i64 %hash.i.i.i227.i3966
  %offset.i.i229.i3968 = load i32, ptr %offset_ptr.i.i228.i3967, align 4
  %eq.i232.i3969 = icmp eq i32 %3355, %offset.i.i229.i3968
  call void @llvm.assume(i1 %eq.i232.i3969) #30
  %3357 = load ptr, ptr %result.i151, align 8
  %3358 = load ptr, ptr %322, align 8
  %result.i233.i3970 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3359 = getelementptr i8, ptr %result.i233.i3970, i64 16
  store ptr %3358, ptr %3359, align 8
  %3360 = getelementptr i8, ptr %result.i233.i3970, i64 8
  store ptr %3357, ptr %3360, align 8
  %3361 = getelementptr i8, ptr %result.i233.i3970, i64 24
  store ptr null, ptr %3361, align 8
  %3362 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i233.i3970)
  store ptr @Entry, ptr %result.i233.i3970, align 8
  store ptr @_parameterization_Ptri32, ptr %109, align 8
  store ptr %result.i233.i3970, ptr %466, align 8
  %3363 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %109)
  %3364 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3349)
  %3365 = sext i32 %3355 to i64
  %3366 = getelementptr ptr, ptr %3349, i64 %3365
  %3367 = getelementptr i8, ptr %3366, i64 128
  %3368 = load ptr, ptr %3367, align 8
  store ptr @i32_typ, ptr %110, align 8
  store ptr %.fca.0.extract11.i2975, ptr %467, align 8
  %3369 = call ptr %3368({ ptr, ptr, ptr, i32 } %3356, ptr nonnull %110)
  call void %3369({ ptr, ptr, ptr, i32 } %3356, { ptr, ptr, ptr, i32 } %3356, ptr nonnull %109, i32 %3329, { ptr, i160 } %3347)
  %3370 = icmp ne ptr %.fca.0.extract87.i3945, @nil_typ
  %3371 = icmp ne ptr %.fca.0.extract87.i3945, null
  %.not138.i3971 = and i1 %3370, %3371
  br i1 %.not138.i3971, label %.cont.cont.i3978, label %3380

.cont.cont.i3978:                                 ; preds = %3292, %3230
  %.sink4410 = phi { ptr, i160 } [ %3266, %3230 ], [ %3346, %3292 ]
  %3372 = phi i32 [ 2, %3230 ], [ 1, %3292 ]
  %vptr.i248.sroa.speculated.i3981 = phi ptr [ %.fca.0.extract112.i4013, %3230 ], [ %.fca.0.extract87.i3945, %3292 ]
  %.fca.1.extract89.i3974 = extractvalue { ptr, i160 } %.sink4410, 1
  %.sroa.3407.sroa.4.0.extract.shift.i3975 = lshr i160 %.fca.1.extract89.i3974, 64
  %3373 = trunc i160 %.sroa.3407.sroa.4.0.extract.shift.i3975 to i64
  %3374 = insertelement <2 x i64> poison, i64 %3373, i64 0
  %3375 = trunc i160 %.fca.1.extract89.i3974 to i64
  %3376 = insertelement <2 x i64> %3374, i64 %3375, i64 1
  %hash_coef_ptr.i.i249.i3984 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i3981, i64 8
  %tbl_size_ptr.i.i250.i3985 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i3981, i64 16
  %offset_tbl_ptr.i.i251.i3986 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i3981, i64 40
  %hash_coef.i.i252.i3987 = load i64, ptr %hash_coef_ptr.i.i249.i3984, align 4
  %tbl_size.i.i253.i3988 = load i64, ptr %tbl_size_ptr.i.i250.i3985, align 4
  %offset_tbl.i.i254.i3989 = load ptr, ptr %offset_tbl_ptr.i.i251.i3986, align 8
  %product.i.i.i255.i3990 = mul i64 %hash_coef.i.i252.i3987, 4015701072841558310
  %shifted.i.i.i256.i3991 = lshr i64 %product.i.i.i255.i3990, 32
  %xored.i.i.i257.i3992 = xor i64 %shifted.i.i.i256.i3991, %product.i.i.i255.i3990
  %hash.i.i.i258.i3993 = and i64 %xored.i.i.i257.i3992, %tbl_size.i.i253.i3988
  %offset_ptr.i.i259.i3994 = getelementptr i32, ptr %offset_tbl.i.i254.i3989, i64 %hash.i.i.i258.i3993
  %offset.i.i260.i3995 = load i32, ptr %offset_ptr.i.i259.i3994, align 4
  %3377 = add nuw nsw i32 %.reg2mem193.0677.i3927, 1
  %3378 = load i32, ptr %362, align 4
  %3379 = icmp slt i32 %3377, %3378
  br i1 %3379, label %3217, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4045

3380:                                             ; preds = %3292, %3230
  %3381 = phi ptr [ %111, %3292 ], [ %103, %3230 ]
  %3382 = phi ptr [ %112, %3292 ], [ %104, %3230 ]
  %3383 = phi ptr [ %113, %3292 ], [ %105, %3230 ]
  %3384 = phi ptr [ %.sroa.0.i3891, %3292 ], [ %.sroa.0680.i3889, %3230 ]
  %3385 = phi ptr [ %114, %3292 ], [ %106, %3230 ]
  %3386 = load i32, ptr %360, align 4
  store i32 %3386, ptr %3381, align 4
  store i32 1, ptr %3382, align 4
  %3387 = add i32 %3386, 1
  store i32 %3387, ptr %3383, align 4
  %3388 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  store i32 %3387, ptr %360, align 4
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %3385, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %3384, align 8
  br label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4045

HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4045: ; preds = %.cont.cont.i3978, %3205, %3380
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %99)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %100)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %101)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %102)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %103)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %104)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %105)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i3889)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %106)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %107)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %108)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %109)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %110)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %111)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %112)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %113)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i3891)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %114)
  br label %._crit_edge1.i2977

._crit_edge1.i2977:                               ; preds = %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4045, %3197
  %3389 = add nuw nsw i32 %.reg2mem13.079.i2974, 1
  %3390 = icmp slt i32 %3389, %2958
  br i1 %3390, label %3197, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2995

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2995.critedge: ; preds = %2934
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %153)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %154)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %151)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %152)
  br label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2995

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2995: ; preds = %._crit_edge1.i2977, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2995.critedge
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %151)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %152)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %231)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %232)
  br label %._crit_edge2.i

._crit_edge2.i:                                   ; preds = %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit2995, %.critedge158.i
  %3391 = load ptr, ptr %result.i151, align 8
  %3392 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3393 = load ptr, ptr %322, align 8
  %3394 = load ptr, ptr %3391, align 8
  %3395 = getelementptr i8, ptr %3394, i64 48
  %3396 = load ptr, ptr %3395, align 8
  %3397 = call { i64, i64 } %3396(ptr nonnull %3391)
  %3398 = extractvalue { i64, i64 } %3397, 0
  %3399 = extractvalue { i64, i64 } %3397, 1
  %3400 = urem i64 20, %3399
  %3401 = icmp eq i64 %3400, 0
  %3402 = sub i64 %3399, %3400
  %3403 = select i1 %3401, i64 0, i64 %3402
  %3404 = add i64 %3398, 20
  %3405 = add i64 %3404, %3403
  %3406 = load ptr, ptr %3393, align 8
  %3407 = getelementptr i8, ptr %3406, i64 48
  %3408 = load ptr, ptr %3407, align 8
  %3409 = call { i64, i64 } %3408(ptr nonnull %3393)
  %3410 = extractvalue { i64, i64 } %3409, 0
  %3411 = extractvalue { i64, i64 } %3409, 1
  %3412 = call i64 @llvm.umax.i64(i64 %3399, i64 %3411)
  %3413 = call i64 @llvm.umax.i64(i64 %3412, i64 8)
  %3414 = urem i64 %3405, %3411
  %3415 = icmp eq i64 %3414, 0
  %3416 = sub i64 %3411, %3414
  %3417 = select i1 %3415, i64 0, i64 %3416
  %3418 = add i64 %3410, %3405
  %3419 = add i64 %3418, %3417
  %3420 = urem i64 %3419, %3413
  %3421 = icmp eq i64 %3420, 0
  %3422 = sub i64 %3413, %3420
  %3423 = select i1 %3421, i64 0, i64 %3422
  %3424 = add i64 %3423, %3419
  %result.i296.i = call noalias ptr @bump_malloc_inner(i64 noundef %3424, ptr nonnull @current_ptr) #29
  store ptr %3391, ptr %result.i296.i, align 8
  %3425 = getelementptr i8, ptr %result.i296.i, i64 8
  store ptr %3393, ptr %3425, align 8
  %3426 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i296.i)
  store ptr @Entry, ptr %264, align 8
  store ptr %result.i296.i, ptr %369, align 8
  store i32 9, ptr %370, align 8
  %3427 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %264)
  %3428 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3429 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %3430 = load ptr, ptr %3391, align 8
  %3431 = getelementptr i8, ptr %3430, i64 48
  %3432 = load ptr, ptr %3431, align 8
  %3433 = call { i64, i64 } %3432(ptr nonnull %3391)
  %3434 = extractvalue { i64, i64 } %3433, 1
  %3435 = urem i64 20, %3434
  %3436 = icmp eq i64 %3435, 0
  %reass.sub5561 = sub i64 %3434, %3435
  %3437 = add i64 %reass.sub5561, 20
  %3438 = select i1 %3436, i64 20, i64 %3437
  %3439 = getelementptr i8, ptr %result.i296.i, i64 %3438
  %3440 = load ptr, ptr %result.i296.i, align 8
  %3441 = load ptr, ptr %3440, align 8
  %3442 = getelementptr i8, ptr %3441, i64 64
  %3443 = load ptr, ptr %3442, align 8
  call void %3443({ ptr, i160 } %500, ptr nonnull %3440, ptr %3439)
  %3444 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %3445 = load ptr, ptr %result.i296.i, align 8
  %3446 = load ptr, ptr %3445, align 8
  %3447 = getelementptr i8, ptr %3446, i64 48
  %3448 = load ptr, ptr %3447, align 8
  %3449 = call { i64, i64 } %3448(ptr nonnull %3445)
  %3450 = extractvalue { i64, i64 } %3449, 0
  %3451 = extractvalue { i64, i64 } %3449, 1
  %3452 = urem i64 20, %3451
  %3453 = icmp eq i64 %3452, 0
  %3454 = sub i64 %3451, %3452
  %3455 = select i1 %3453, i64 0, i64 %3454
  %3456 = add i64 %3450, 20
  %3457 = add i64 %3456, %3455
  %3458 = load ptr, ptr %3425, align 8
  %3459 = load ptr, ptr %3458, align 8
  %3460 = getelementptr i8, ptr %3459, i64 48
  %3461 = load ptr, ptr %3460, align 8
  %3462 = call { i64, i64 } %3461(ptr nonnull %3458)
  %3463 = extractvalue { i64, i64 } %3462, 1
  %3464 = urem i64 %3457, %3463
  %3465 = icmp eq i64 %3464, 0
  %3466 = sub i64 %3463, %3464
  %3467 = select i1 %3465, i64 0, i64 %3466
  %3468 = getelementptr i8, ptr %result.i296.i, i64 %3457
  %3469 = getelementptr i8, ptr %3468, i64 %3467
  %3470 = load ptr, ptr %3425, align 8
  %3471 = load ptr, ptr %3470, align 8
  %3472 = getelementptr i8, ptr %3471, i64 64
  %3473 = load ptr, ptr %3472, align 8
  call void %3473({ ptr, i160 } %2539, ptr nonnull %3470, ptr %3469)
  %3474 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  %3475 = getelementptr i8, ptr %result.i296.i, i64 16
  store i32 %2543, ptr %3475, align 4
  %3476 = load ptr, ptr %371, align 8
  %3477 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %214)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %215)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %216)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %217)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %218)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %219)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %220)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0680.i)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %221)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %222)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %223)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %224)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %225)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %226)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %227)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %228)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i1415)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %229)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %230)
  store ptr @Entry, ptr %230, align 8
  store ptr %result.i296.i, ptr %404, align 8
  store ptr %3476, ptr %405, align 8
  store i32 9, ptr %406, align 8
  %3478 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %230)
  %3479 = load i32, ptr %362, align 4
  %3480 = icmp sgt i32 %3479, 0
  br i1 %3480, label %.lr.ph.i, label %._crit_edge3.i

.lr.ph.i:                                         ; preds = %._crit_edge2.i
  %3481 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3482 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %3483 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  br label %3484

3484:                                             ; preds = %.cont.cont.i, %.lr.ph.i
  %offset.i.i260.i2025 = phi i32 [ 9, %.lr.ph.i ], [ %offset.i.i260.i, %.cont.cont.i ]
  %.sroa.speculated346.i2023 = phi ptr [ %3476, %.lr.ph.i ], [ %.sroa.speculated346.i, %.cont.cont.i ]
  %.sroa.speculated352.i2021 = phi ptr [ %result.i296.i, %.lr.ph.i ], [ %.sroa.speculated352.i, %.cont.cont.i ]
  %.reg2mem195.0678.i = phi i32 [ 1, %.lr.ph.i ], [ %3640, %.cont.cont.i ]
  %.reg2mem193.0677.i = phi i32 [ 0, %.lr.ph.i ], [ %3641, %.cont.cont.i ]
  %3485 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Entry, ptr undef, ptr undef, i32 undef }, ptr %.sroa.speculated352.i2021, 1
  %3486 = insertvalue { ptr, ptr, ptr, i32 } %3485, ptr %.sroa.speculated346.i2023, 2
  %3487 = insertvalue { ptr, ptr, ptr, i32 } %3486, i32 %offset.i.i260.i2025, 3
  %3488 = sext i32 %offset.i.i260.i2025 to i64
  %gep2020 = getelementptr ptr, ptr getelementptr inbounds (i8, ptr @Entry, i64 64), i64 %3488
  %3489 = load ptr, ptr %gep2020, align 8
  %3490 = call ptr %3489({ ptr, ptr, ptr, i32 } %3487, ptr nonnull %2)
  %3491 = call i32 %3490({ ptr, ptr, ptr, i32 } %3487, { ptr, ptr, ptr, i32 } %3487, ptr nonnull %2)
  %3492 = icmp eq i32 %.reg2mem195.0678.i, 1
  %3493 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br i1 %3492, label %3494, label %3558

3494:                                             ; preds = %3484
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %3495 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3496 = load ptr, ptr %339, align 8
  %3497 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3496, 0
  %3498 = load ptr, ptr %340, align 8
  %3499 = insertvalue { ptr, ptr, ptr, i32 } %3497, ptr %3498, 1
  %3500 = load ptr, ptr %341, align 8
  %3501 = insertvalue { ptr, ptr, ptr, i32 } %3499, ptr %3500, 2
  %3502 = load i32, ptr %342, align 4
  %3503 = insertvalue { ptr, ptr, ptr, i32 } %3501, i32 %3502, 3
  %hash_coef_ptr.i.i10.i3010 = getelementptr i8, ptr %3496, i64 8
  %tbl_size_ptr.i.i11.i3011 = getelementptr i8, ptr %3496, i64 16
  %offset_tbl_ptr.i.i12.i3012 = getelementptr i8, ptr %3496, i64 40
  %hash_coef.i.i13.i3013 = load i64, ptr %hash_coef_ptr.i.i10.i3010, align 4
  %tbl_size.i.i14.i3014 = load i64, ptr %tbl_size_ptr.i.i11.i3011, align 4
  %offset_tbl.i.i15.i3015 = load ptr, ptr %offset_tbl_ptr.i.i12.i3012, align 8
  %product.i.i.i16.i3016 = mul i64 %hash_coef.i.i13.i3013, -5261542750394134544
  %shifted.i.i.i17.i3017 = lshr i64 %product.i.i.i16.i3016, 32
  %xored.i.i.i18.i3018 = xor i64 %shifted.i.i.i17.i3017, %product.i.i.i16.i3016
  %hash.i.i.i19.i3019 = and i64 %xored.i.i.i18.i3018, %tbl_size.i.i14.i3014
  %offset_ptr.i.i20.i3020 = getelementptr i32, ptr %offset_tbl.i.i15.i3015, i64 %hash.i.i.i19.i3019
  %offset.i.i21.i3021 = load i32, ptr %offset_ptr.i.i20.i3020, align 4
  %eq.i.i3022 = icmp eq i32 %3502, %offset.i.i21.i3021
  call void @llvm.assume(i1 %eq.i.i3022) #30
  %3504 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %3505 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3496)
  %3506 = sext i32 %3502 to i64
  %3507 = getelementptr ptr, ptr %3496, i64 %3506
  %3508 = getelementptr i8, ptr %3507, i64 64
  %3509 = load ptr, ptr %3508, align 8
  %3510 = call ptr %3509({ ptr, ptr, ptr, i32 } %3503, ptr nonnull %2)
  %3511 = call i32 %3510({ ptr, ptr, ptr, i32 } %3503, { ptr, ptr, ptr, i32 } %3503, ptr nonnull %2)
  %3512 = add i32 %3511, -1
  %3513 = and i32 %3512, %3491
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %3514 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3515 = load ptr, ptr %339, align 8
  %3516 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3515, 0
  %3517 = load ptr, ptr %340, align 8
  %3518 = insertvalue { ptr, ptr, ptr, i32 } %3516, ptr %3517, 1
  %3519 = load ptr, ptr %341, align 8
  %3520 = insertvalue { ptr, ptr, ptr, i32 } %3518, ptr %3519, 2
  %3521 = load i32, ptr %342, align 4
  %3522 = insertvalue { ptr, ptr, ptr, i32 } %3520, i32 %3521, 3
  %hash_coef_ptr.i.i172.i = getelementptr i8, ptr %3515, i64 8
  %tbl_size_ptr.i.i173.i = getelementptr i8, ptr %3515, i64 16
  %offset_tbl_ptr.i.i174.i = getelementptr i8, ptr %3515, i64 40
  %hash_coef.i.i175.i = load i64, ptr %hash_coef_ptr.i.i172.i, align 4
  %tbl_size.i.i176.i = load i64, ptr %tbl_size_ptr.i.i173.i, align 4
  %offset_tbl.i.i177.i = load ptr, ptr %offset_tbl_ptr.i.i174.i, align 8
  %product.i.i.i178.i = mul i64 %hash_coef.i.i175.i, -5261542750394134544
  %shifted.i.i.i179.i = lshr i64 %product.i.i.i178.i, 32
  %xored.i.i.i180.i = xor i64 %shifted.i.i.i179.i, %product.i.i.i178.i
  %hash.i.i.i181.i = and i64 %xored.i.i.i180.i, %tbl_size.i.i176.i
  %offset_ptr.i.i182.i = getelementptr i32, ptr %offset_tbl.i.i177.i, i64 %hash.i.i.i181.i
  %offset.i.i183.i = load i32, ptr %offset_ptr.i.i182.i, align 4
  %eq.i.i1461 = icmp eq i32 %3521, %offset.i.i183.i
  call void @llvm.assume(i1 %eq.i.i1461) #30
  store ptr @_parameterization_Ptri32, ptr %214, align 8
  %3523 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %214)
  %3524 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3515)
  %3525 = sext i32 %3521 to i64
  %3526 = getelementptr ptr, ptr %3515, i64 %3525
  %3527 = getelementptr i8, ptr %3526, i64 120
  %3528 = load ptr, ptr %3527, align 8
  store ptr @i32_typ, ptr %215, align 8
  %3529 = call ptr %3528({ ptr, ptr, ptr, i32 } %3522, ptr nonnull %215)
  %3530 = call { ptr, i160 } %3529({ ptr, ptr, ptr, i32 } %3522, { ptr, ptr, ptr, i32 } %3522, ptr nonnull %214, i32 %3513)
  %.fca.0.extract112.i = extractvalue { ptr, i160 } %3530, 0
  %3531 = ptrtoint ptr %.sroa.speculated352.i2021 to i64
  %3532 = ptrtoint ptr %.sroa.speculated346.i2023 to i64
  %.sroa.3111.0.insert.ext.i = zext i32 %offset.i.i260.i2025 to i160
  %.sroa.3111.0.insert.shift.i = shl nuw i160 %.sroa.3111.0.insert.ext.i, 128
  %.sroa.2110.0.insert.ext.i = zext i64 %3532 to i160
  %.sroa.2110.0.insert.shift.i = shl nuw nsw i160 %.sroa.2110.0.insert.ext.i, 64
  %.sroa.2110.0.insert.insert.i = or disjoint i160 %.sroa.2110.0.insert.shift.i, %.sroa.3111.0.insert.shift.i
  %.sroa.0109.0.insert.ext.i = zext i64 %3531 to i160
  %.sroa.0109.0.insert.insert.i = or disjoint i160 %.sroa.2110.0.insert.insert.i, %.sroa.0109.0.insert.ext.i
  %3533 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0109.0.insert.insert.i, 1
  %3534 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3535 = load ptr, ptr %339, align 8
  %3536 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3535, 0
  %3537 = load ptr, ptr %340, align 8
  %3538 = insertvalue { ptr, ptr, ptr, i32 } %3536, ptr %3537, 1
  %3539 = load ptr, ptr %341, align 8
  %3540 = insertvalue { ptr, ptr, ptr, i32 } %3538, ptr %3539, 2
  %3541 = load i32, ptr %342, align 4
  %3542 = insertvalue { ptr, ptr, ptr, i32 } %3540, i32 %3541, 3
  %hash_coef_ptr.i.i186.i = getelementptr i8, ptr %3535, i64 8
  %tbl_size_ptr.i.i187.i = getelementptr i8, ptr %3535, i64 16
  %offset_tbl_ptr.i.i188.i = getelementptr i8, ptr %3535, i64 40
  %hash_coef.i.i189.i = load i64, ptr %hash_coef_ptr.i.i186.i, align 4
  %tbl_size.i.i190.i = load i64, ptr %tbl_size_ptr.i.i187.i, align 4
  %offset_tbl.i.i191.i = load ptr, ptr %offset_tbl_ptr.i.i188.i, align 8
  %product.i.i.i192.i = mul i64 %hash_coef.i.i189.i, -5261542750394134544
  %shifted.i.i.i193.i = lshr i64 %product.i.i.i192.i, 32
  %xored.i.i.i194.i = xor i64 %shifted.i.i.i193.i, %product.i.i.i192.i
  %hash.i.i.i195.i = and i64 %xored.i.i.i194.i, %tbl_size.i.i190.i
  %offset_ptr.i.i196.i = getelementptr i32, ptr %offset_tbl.i.i191.i, i64 %hash.i.i.i195.i
  %offset.i.i197.i = load i32, ptr %offset_ptr.i.i196.i, align 4
  %eq.i200.i = icmp eq i32 %3541, %offset.i.i197.i
  call void @llvm.assume(i1 %eq.i200.i) #30
  %3543 = load ptr, ptr %result.i151, align 8
  %3544 = load ptr, ptr %322, align 8
  %result.i.i1462 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3545 = getelementptr i8, ptr %result.i.i1462, i64 16
  store ptr %3544, ptr %3545, align 8
  %3546 = getelementptr i8, ptr %result.i.i1462, i64 8
  store ptr %3543, ptr %3546, align 8
  %3547 = getelementptr i8, ptr %result.i.i1462, i64 24
  store ptr null, ptr %3547, align 8
  %3548 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i1462)
  store ptr @Entry, ptr %result.i.i1462, align 8
  store ptr @_parameterization_Ptri32, ptr %216, align 8
  store ptr %result.i.i1462, ptr %409, align 8
  %3549 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %216)
  %3550 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3535)
  %3551 = sext i32 %3541 to i64
  %3552 = getelementptr ptr, ptr %3535, i64 %3551
  %3553 = getelementptr i8, ptr %3552, i64 128
  %3554 = load ptr, ptr %3553, align 8
  store ptr @i32_typ, ptr %217, align 8
  store ptr @Entry, ptr %410, align 8
  %3555 = call ptr %3554({ ptr, ptr, ptr, i32 } %3542, ptr nonnull %217)
  call void %3555({ ptr, ptr, ptr, i32 } %3542, { ptr, ptr, ptr, i32 } %3542, ptr nonnull %216, i32 %3513, { ptr, i160 } %3533)
  %3556 = icmp ne ptr %.fca.0.extract112.i, @nil_typ
  %3557 = icmp ne ptr %.fca.0.extract112.i, null
  %.not140.i = and i1 %3556, %3557
  br i1 %.not140.i, label %.cont.cont.i, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit.thread

3558:                                             ; preds = %3484
  %3559 = add i32 %3491, 2127912214
  %3560 = shl i32 %3491, 12
  %3561 = add i32 %3559, %3560
  %3562 = ashr i32 %3561, 19
  %3563 = xor i32 %3561, %3562
  %3564 = xor i32 %3563, -949894596
  %3565 = add i32 %3564, 374761393
  %3566 = shl i32 %3564, 5
  %3567 = add i32 %3565, %3566
  %3568 = add i32 %3567, -744332180
  %3569 = shl i32 %3567, 9
  %3570 = xor i32 %3568, %3569
  %3571 = add i32 %3570, -42973499
  %3572 = shl i32 %3570, 3
  %3573 = add i32 %3571, %3572
  %3574 = ashr i32 %3573, 16
  %3575 = xor i32 %3573, %3574
  %3576 = xor i32 %3575, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %3577 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3578 = load ptr, ptr %356, align 8
  %3579 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3578, 0
  %3580 = load ptr, ptr %357, align 8
  %3581 = insertvalue { ptr, ptr, ptr, i32 } %3579, ptr %3580, 1
  %3582 = load ptr, ptr %358, align 8
  %3583 = insertvalue { ptr, ptr, ptr, i32 } %3581, ptr %3582, 2
  %3584 = load i32, ptr %359, align 4
  %3585 = insertvalue { ptr, ptr, ptr, i32 } %3583, i32 %3584, 3
  %hash_coef_ptr.i.i10.i3040 = getelementptr i8, ptr %3578, i64 8
  %tbl_size_ptr.i.i11.i3041 = getelementptr i8, ptr %3578, i64 16
  %offset_tbl_ptr.i.i12.i3042 = getelementptr i8, ptr %3578, i64 40
  %hash_coef.i.i13.i3043 = load i64, ptr %hash_coef_ptr.i.i10.i3040, align 4
  %tbl_size.i.i14.i3044 = load i64, ptr %tbl_size_ptr.i.i11.i3041, align 4
  %offset_tbl.i.i15.i3045 = load ptr, ptr %offset_tbl_ptr.i.i12.i3042, align 8
  %product.i.i.i16.i3046 = mul i64 %hash_coef.i.i13.i3043, -5261542750394134544
  %shifted.i.i.i17.i3047 = lshr i64 %product.i.i.i16.i3046, 32
  %xored.i.i.i18.i3048 = xor i64 %shifted.i.i.i17.i3047, %product.i.i.i16.i3046
  %hash.i.i.i19.i3049 = and i64 %xored.i.i.i18.i3048, %tbl_size.i.i14.i3044
  %offset_ptr.i.i20.i3050 = getelementptr i32, ptr %offset_tbl.i.i15.i3045, i64 %hash.i.i.i19.i3049
  %offset.i.i21.i3051 = load i32, ptr %offset_ptr.i.i20.i3050, align 4
  %eq.i.i3052 = icmp eq i32 %3584, %offset.i.i21.i3051
  call void @llvm.assume(i1 %eq.i.i3052) #30
  %3586 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %3587 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3578)
  %3588 = sext i32 %3584 to i64
  %3589 = getelementptr ptr, ptr %3578, i64 %3588
  %3590 = getelementptr i8, ptr %3589, i64 64
  %3591 = load ptr, ptr %3590, align 8
  %3592 = call ptr %3591({ ptr, ptr, ptr, i32 } %3585, ptr nonnull %2)
  %3593 = call i32 %3592({ ptr, ptr, ptr, i32 } %3585, { ptr, ptr, ptr, i32 } %3585, ptr nonnull %2)
  %3594 = add i32 %3593, -1
  %3595 = and i32 %3594, %3576
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %3596 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3597 = load ptr, ptr %356, align 8
  %3598 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3597, 0
  %3599 = load ptr, ptr %357, align 8
  %3600 = insertvalue { ptr, ptr, ptr, i32 } %3598, ptr %3599, 1
  %3601 = load ptr, ptr %358, align 8
  %3602 = insertvalue { ptr, ptr, ptr, i32 } %3600, ptr %3601, 2
  %3603 = load i32, ptr %359, align 4
  %3604 = insertvalue { ptr, ptr, ptr, i32 } %3602, i32 %3603, 3
  %hash_coef_ptr.i.i202.i1448 = getelementptr i8, ptr %3597, i64 8
  %tbl_size_ptr.i.i203.i1449 = getelementptr i8, ptr %3597, i64 16
  %offset_tbl_ptr.i.i204.i1450 = getelementptr i8, ptr %3597, i64 40
  %hash_coef.i.i205.i1451 = load i64, ptr %hash_coef_ptr.i.i202.i1448, align 4
  %tbl_size.i.i206.i1452 = load i64, ptr %tbl_size_ptr.i.i203.i1449, align 4
  %offset_tbl.i.i207.i1453 = load ptr, ptr %offset_tbl_ptr.i.i204.i1450, align 8
  %product.i.i.i208.i1454 = mul i64 %hash_coef.i.i205.i1451, -5261542750394134544
  %shifted.i.i.i209.i1455 = lshr i64 %product.i.i.i208.i1454, 32
  %xored.i.i.i210.i1456 = xor i64 %shifted.i.i.i209.i1455, %product.i.i.i208.i1454
  %hash.i.i.i211.i1457 = and i64 %xored.i.i.i210.i1456, %tbl_size.i.i206.i1452
  %offset_ptr.i.i212.i1458 = getelementptr i32, ptr %offset_tbl.i.i207.i1453, i64 %hash.i.i.i211.i1457
  %offset.i.i213.i1459 = load i32, ptr %offset_ptr.i.i212.i1458, align 4
  %eq.i216.i1460 = icmp eq i32 %3603, %offset.i.i213.i1459
  call void @llvm.assume(i1 %eq.i216.i1460) #30
  store ptr @_parameterization_Ptri32, ptr %222, align 8
  %3605 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %222)
  %3606 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3597)
  %3607 = sext i32 %3603 to i64
  %3608 = getelementptr ptr, ptr %3597, i64 %3607
  %3609 = getelementptr i8, ptr %3608, i64 120
  %3610 = load ptr, ptr %3609, align 8
  store ptr @i32_typ, ptr %223, align 8
  %3611 = call ptr %3610({ ptr, ptr, ptr, i32 } %3604, ptr nonnull %223)
  %3612 = call { ptr, i160 } %3611({ ptr, ptr, ptr, i32 } %3604, { ptr, ptr, ptr, i32 } %3604, ptr nonnull %222, i32 %3595)
  %.fca.0.extract87.i = extractvalue { ptr, i160 } %3612, 0
  %3613 = ptrtoint ptr %.sroa.speculated352.i2021 to i64
  %3614 = ptrtoint ptr %.sroa.speculated346.i2023 to i64
  %.sroa.3.0.insert.ext.i = zext i32 %offset.i.i260.i2025 to i160
  %.sroa.3.0.insert.shift.i = shl nuw i160 %.sroa.3.0.insert.ext.i, 128
  %.sroa.2.0.insert.ext.i = zext i64 %3614 to i160
  %.sroa.2.0.insert.shift.i = shl nuw nsw i160 %.sroa.2.0.insert.ext.i, 64
  %.sroa.2.0.insert.insert.i = or disjoint i160 %.sroa.2.0.insert.shift.i, %.sroa.3.0.insert.shift.i
  %.sroa.0.0.insert.ext.i = zext i64 %3613 to i160
  %.sroa.0.0.insert.insert.i = or disjoint i160 %.sroa.2.0.insert.insert.i, %.sroa.0.0.insert.ext.i
  %3615 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0.0.insert.insert.i, 1
  %3616 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3617 = load ptr, ptr %356, align 8
  %3618 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3617, 0
  %3619 = load ptr, ptr %357, align 8
  %3620 = insertvalue { ptr, ptr, ptr, i32 } %3618, ptr %3619, 1
  %3621 = load ptr, ptr %358, align 8
  %3622 = insertvalue { ptr, ptr, ptr, i32 } %3620, ptr %3621, 2
  %3623 = load i32, ptr %359, align 4
  %3624 = insertvalue { ptr, ptr, ptr, i32 } %3622, i32 %3623, 3
  %hash_coef_ptr.i.i218.i = getelementptr i8, ptr %3617, i64 8
  %tbl_size_ptr.i.i219.i = getelementptr i8, ptr %3617, i64 16
  %offset_tbl_ptr.i.i220.i = getelementptr i8, ptr %3617, i64 40
  %hash_coef.i.i221.i = load i64, ptr %hash_coef_ptr.i.i218.i, align 4
  %tbl_size.i.i222.i = load i64, ptr %tbl_size_ptr.i.i219.i, align 4
  %offset_tbl.i.i223.i = load ptr, ptr %offset_tbl_ptr.i.i220.i, align 8
  %product.i.i.i224.i = mul i64 %hash_coef.i.i221.i, -5261542750394134544
  %shifted.i.i.i225.i = lshr i64 %product.i.i.i224.i, 32
  %xored.i.i.i226.i = xor i64 %shifted.i.i.i225.i, %product.i.i.i224.i
  %hash.i.i.i227.i = and i64 %xored.i.i.i226.i, %tbl_size.i.i222.i
  %offset_ptr.i.i228.i = getelementptr i32, ptr %offset_tbl.i.i223.i, i64 %hash.i.i.i227.i
  %offset.i.i229.i = load i32, ptr %offset_ptr.i.i228.i, align 4
  %eq.i232.i = icmp eq i32 %3623, %offset.i.i229.i
  call void @llvm.assume(i1 %eq.i232.i) #30
  %3625 = load ptr, ptr %result.i151, align 8
  %3626 = load ptr, ptr %322, align 8
  %result.i233.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3627 = getelementptr i8, ptr %result.i233.i, i64 16
  store ptr %3626, ptr %3627, align 8
  %3628 = getelementptr i8, ptr %result.i233.i, i64 8
  store ptr %3625, ptr %3628, align 8
  %3629 = getelementptr i8, ptr %result.i233.i, i64 24
  store ptr null, ptr %3629, align 8
  %3630 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i233.i)
  store ptr @Entry, ptr %result.i233.i, align 8
  store ptr @_parameterization_Ptri32, ptr %224, align 8
  store ptr %result.i233.i, ptr %407, align 8
  %3631 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %224)
  %3632 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3617)
  %3633 = sext i32 %3623 to i64
  %3634 = getelementptr ptr, ptr %3617, i64 %3633
  %3635 = getelementptr i8, ptr %3634, i64 128
  %3636 = load ptr, ptr %3635, align 8
  store ptr @i32_typ, ptr %225, align 8
  store ptr @Entry, ptr %408, align 8
  %3637 = call ptr %3636({ ptr, ptr, ptr, i32 } %3624, ptr nonnull %225)
  call void %3637({ ptr, ptr, ptr, i32 } %3624, { ptr, ptr, ptr, i32 } %3624, ptr nonnull %224, i32 %3595, { ptr, i160 } %3615)
  %3638 = icmp ne ptr %.fca.0.extract87.i, @nil_typ
  %3639 = icmp ne ptr %.fca.0.extract87.i, null
  %.not138.i = and i1 %3638, %3639
  br i1 %.not138.i, label %.cont.cont.i, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit.thread

.cont.cont.i:                                     ; preds = %3558, %3494
  %.sink = phi { ptr, i160 } [ %3530, %3494 ], [ %3612, %3558 ]
  %3640 = phi i32 [ 2, %3494 ], [ 1, %3558 ]
  %vptr.i248.sroa.speculated.i = phi ptr [ %.fca.0.extract112.i, %3494 ], [ %.fca.0.extract87.i, %3558 ]
  %.fca.1.extract89.i = extractvalue { ptr, i160 } %.sink, 1
  %.sroa.3407.sroa.4.0.extract.shift.i = lshr i160 %.fca.1.extract89.i, 64
  %.sroa.3407.sroa.4.0.extract.trunc.i = trunc i160 %.sroa.3407.sroa.4.0.extract.shift.i to i64
  %.sroa.3407.sroa.0.0.extract.trunc.i = trunc i160 %.fca.1.extract89.i to i64
  %.sroa.speculated352.i = inttoptr i64 %.sroa.3407.sroa.0.0.extract.trunc.i to ptr
  %.sroa.speculated346.i = inttoptr i64 %.sroa.3407.sroa.4.0.extract.trunc.i to ptr
  %hash_coef_ptr.i.i249.i = getelementptr i8, ptr %vptr.i248.sroa.speculated.i, i64 8
  %tbl_size_ptr.i.i250.i = getelementptr i8, ptr %vptr.i248.sroa.speculated.i, i64 16
  %offset_tbl_ptr.i.i251.i = getelementptr i8, ptr %vptr.i248.sroa.speculated.i, i64 40
  %hash_coef.i.i252.i = load i64, ptr %hash_coef_ptr.i.i249.i, align 4
  %tbl_size.i.i253.i = load i64, ptr %tbl_size_ptr.i.i250.i, align 4
  %offset_tbl.i.i254.i = load ptr, ptr %offset_tbl_ptr.i.i251.i, align 8
  %product.i.i.i255.i = mul i64 %hash_coef.i.i252.i, 4015701072841558310
  %shifted.i.i.i256.i = lshr i64 %product.i.i.i255.i, 32
  %xored.i.i.i257.i = xor i64 %shifted.i.i.i256.i, %product.i.i.i255.i
  %hash.i.i.i258.i = and i64 %xored.i.i.i257.i, %tbl_size.i.i253.i
  %offset_ptr.i.i259.i = getelementptr i32, ptr %offset_tbl.i.i254.i, i64 %hash.i.i.i258.i
  %offset.i.i260.i = load i32, ptr %offset_ptr.i.i259.i, align 4
  store ptr %vptr.i248.sroa.speculated.i, ptr %230, align 8
  store ptr %.sroa.speculated352.i, ptr %404, align 8
  store ptr %.sroa.speculated346.i, ptr %405, align 8
  store i32 %offset.i.i260.i, ptr %406, align 8
  %3641 = add nuw nsw i32 %.reg2mem193.0677.i, 1
  %3642 = load i32, ptr %362, align 4
  %3643 = icmp slt i32 %3641, %3642
  br i1 %3643, label %3484, label %._crit_edge3.i

HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit.thread: ; preds = %3494, %3558
  %3644 = phi ptr [ %226, %3558 ], [ %218, %3494 ]
  %3645 = phi ptr [ %227, %3558 ], [ %219, %3494 ]
  %3646 = phi ptr [ %228, %3558 ], [ %220, %3494 ]
  %3647 = phi ptr [ %.sroa.0.i1415, %3558 ], [ %.sroa.0680.i, %3494 ]
  %3648 = phi ptr [ %229, %3558 ], [ %221, %3494 ]
  %3649 = load i32, ptr %360, align 4
  store i32 %3649, ptr %3644, align 4
  store i32 1, ptr %3645, align 4
  %3650 = add i32 %3649, 1
  store i32 %3650, ptr %3646, align 4
  %3651 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  store i32 %3650, ptr %360, align 4
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %3648, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %3647, align 8
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %214)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %215)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %216)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %217)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %218)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %219)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %220)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %221)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %222)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %223)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %224)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %225)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %226)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %227)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %228)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i1415)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %229)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %230)
  br label %HashMap_insert_keyK_valueV.exit

._crit_edge3.i:                                   ; preds = %.cont.cont.i, %._crit_edge2.i
  %3652 = load i160, ptr %404, align 8
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %214)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %215)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %216)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %217)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %218)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %219)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %220)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %221)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %222)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %223)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %224)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %225)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %226)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %227)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %228)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i1415)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %229)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %230)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %212)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %213)
  %3653 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3654 = load ptr, ptr %339, align 8
  %3655 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3654, 0
  %3656 = load ptr, ptr %340, align 8
  %3657 = insertvalue { ptr, ptr, ptr, i32 } %3655, ptr %3656, 1
  %3658 = load ptr, ptr %341, align 8
  %3659 = insertvalue { ptr, ptr, ptr, i32 } %3657, ptr %3658, 2
  %3660 = load i32, ptr %342, align 4
  %3661 = insertvalue { ptr, ptr, ptr, i32 } %3659, i32 %3660, 3
  %hash_coef_ptr.i.i18.i1483 = getelementptr i8, ptr %3654, i64 8
  %tbl_size_ptr.i.i19.i1484 = getelementptr i8, ptr %3654, i64 16
  %offset_tbl_ptr.i.i20.i1485 = getelementptr i8, ptr %3654, i64 40
  %hash_coef.i.i21.i1486 = load i64, ptr %hash_coef_ptr.i.i18.i1483, align 4
  %tbl_size.i.i22.i1487 = load i64, ptr %tbl_size_ptr.i.i19.i1484, align 4
  %offset_tbl.i.i23.i1488 = load ptr, ptr %offset_tbl_ptr.i.i20.i1485, align 8
  %product.i.i.i24.i1489 = mul i64 %hash_coef.i.i21.i1486, -5261542750394134544
  %shifted.i.i.i25.i1490 = lshr i64 %product.i.i.i24.i1489, 32
  %xored.i.i.i26.i1491 = xor i64 %shifted.i.i.i25.i1490, %product.i.i.i24.i1489
  %hash.i.i.i27.i1492 = and i64 %xored.i.i.i26.i1491, %tbl_size.i.i22.i1487
  %offset_ptr.i.i28.i1493 = getelementptr i32, ptr %offset_tbl.i.i23.i1488, i64 %hash.i.i.i27.i1492
  %offset.i.i29.i1494 = load i32, ptr %offset_ptr.i.i28.i1493, align 4
  %eq.i.i1495 = icmp eq i32 %3660, %offset.i.i29.i1494
  call void @llvm.assume(i1 %eq.i.i1495) #30
  %3662 = load ptr, ptr %356, align 8
  %3663 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3662, 0
  %3664 = load ptr, ptr %357, align 8
  %3665 = insertvalue { ptr, ptr, ptr, i32 } %3663, ptr %3664, 1
  %3666 = load ptr, ptr %358, align 8
  %3667 = insertvalue { ptr, ptr, ptr, i32 } %3665, ptr %3666, 2
  %3668 = load i32, ptr %359, align 4
  %hash_coef_ptr.i.i46.i1500 = getelementptr i8, ptr %3662, i64 8
  %tbl_size_ptr.i.i47.i1501 = getelementptr i8, ptr %3662, i64 16
  %offset_tbl_ptr.i.i48.i1502 = getelementptr i8, ptr %3662, i64 40
  %hash_coef.i.i49.i1503 = load i64, ptr %hash_coef_ptr.i.i46.i1500, align 4
  %tbl_size.i.i50.i1504 = load i64, ptr %tbl_size_ptr.i.i47.i1501, align 4
  %offset_tbl.i.i51.i1505 = load ptr, ptr %offset_tbl_ptr.i.i48.i1502, align 8
  %product.i.i.i52.i1506 = mul i64 %hash_coef.i.i49.i1503, -5261542750394134544
  %shifted.i.i.i53.i1507 = lshr i64 %product.i.i.i52.i1506, 32
  %xored.i.i.i54.i1508 = xor i64 %shifted.i.i.i53.i1507, %product.i.i.i52.i1506
  %hash.i.i.i55.i1509 = and i64 %xored.i.i.i54.i1508, %tbl_size.i.i50.i1504
  %offset_ptr.i.i56.i1510 = getelementptr i32, ptr %offset_tbl.i.i51.i1505, i64 %hash.i.i.i55.i1509
  %offset.i.i57.i1511 = load i32, ptr %offset_ptr.i.i56.i1510, align 4
  %eq.i60.i1512 = icmp eq i32 %3668, %offset.i.i57.i1511
  call void @llvm.assume(i1 %eq.i60.i1512) #30
  %3669 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %3670 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3654)
  %3671 = sext i32 %3660 to i64
  %3672 = getelementptr ptr, ptr %3654, i64 %3671
  %3673 = getelementptr i8, ptr %3672, i64 64
  %3674 = load ptr, ptr %3673, align 8
  %3675 = call ptr %3674({ ptr, ptr, ptr, i32 } %3661, ptr nonnull %2)
  %3676 = call i32 %3675({ ptr, ptr, ptr, i32 } %3661, { ptr, ptr, ptr, i32 } %3661, ptr nonnull %2)
  %3677 = shl i32 %3676, 1
  %3678 = call i32 @llvm.smax.i32(i32 %3677, i32 16)
  %3679 = load ptr, ptr %result.i151, align 8
  %3680 = load ptr, ptr %322, align 8
  %result.i.i1513 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3681 = getelementptr i8, ptr %result.i.i1513, i64 16
  store ptr @_parameterization_Nil, ptr %3681, align 8
  %result.i75.i1514 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3682 = getelementptr i8, ptr %result.i75.i1514, i64 16
  store ptr %3680, ptr %3682, align 8
  %3683 = getelementptr i8, ptr %result.i75.i1514, i64 8
  store ptr %3679, ptr %3683, align 8
  %3684 = getelementptr i8, ptr %result.i75.i1514, i64 24
  store ptr null, ptr %3684, align 8
  %3685 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i75.i1514)
  store ptr @Entry, ptr %result.i75.i1514, align 8
  %3686 = getelementptr i8, ptr %result.i.i1513, i64 8
  store ptr %result.i75.i1514, ptr %3686, align 8
  %3687 = getelementptr i8, ptr %result.i.i1513, i64 24
  store ptr null, ptr %3687, align 8
  %3688 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i1513)
  store ptr @union_typ, ptr %result.i.i1513, align 8
  %result.i76.i1515 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i1513, ptr %result.i76.i1515, align 8
  %3689 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i76.i1515)
  store ptr @Array, ptr %212, align 8
  store ptr %result.i76.i1515, ptr %411, align 8
  store i32 9, ptr %412, align 8
  %3690 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %212)
  %3691 = getelementptr i8, ptr %result.i76.i1515, i64 16
  store i32 %3678, ptr %3691, align 4
  %3692 = getelementptr i8, ptr %result.i76.i1515, i64 20
  store i32 %3678, ptr %3692, align 4
  %3693 = zext nneg i32 %3678 to i64
  %3694 = shl nuw nsw i64 %3693, 5
  %result.i.i.i1516 = call noalias ptr @bump_malloc_inner(i64 noundef %3694, ptr nonnull @current_ptr) #29
  %3695 = getelementptr i8, ptr %result.i76.i1515, i64 8
  store ptr %result.i.i.i1516, ptr %3695, align 8
  %3696 = load ptr, ptr %413, align 8
  store ptr @Array, ptr %339, align 8
  store ptr %result.i76.i1515, ptr %340, align 8
  store ptr %3696, ptr %341, align 8
  store i32 9, ptr %342, align 4
  %result.i91.i1529 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3697 = getelementptr i8, ptr %result.i91.i1529, i64 16
  store ptr @_parameterization_Nil, ptr %3697, align 8
  %result.i92.i1530 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3698 = getelementptr i8, ptr %result.i92.i1530, i64 16
  store ptr %3680, ptr %3698, align 8
  %3699 = getelementptr i8, ptr %result.i92.i1530, i64 8
  store ptr %3679, ptr %3699, align 8
  %3700 = getelementptr i8, ptr %result.i92.i1530, i64 24
  store ptr null, ptr %3700, align 8
  %3701 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i92.i1530)
  store ptr @Entry, ptr %result.i92.i1530, align 8
  %3702 = getelementptr i8, ptr %result.i91.i1529, i64 8
  store ptr %result.i92.i1530, ptr %3702, align 8
  %3703 = getelementptr i8, ptr %result.i91.i1529, i64 24
  store ptr null, ptr %3703, align 8
  %3704 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i91.i1529)
  store ptr @union_typ, ptr %result.i91.i1529, align 8
  %result.i93.i1531 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i91.i1529, ptr %result.i93.i1531, align 8
  %3705 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i93.i1531)
  store ptr @Array, ptr %213, align 8
  store ptr %result.i93.i1531, ptr %414, align 8
  store i32 9, ptr %415, align 8
  %3706 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %213)
  %3707 = getelementptr i8, ptr %result.i93.i1531, i64 16
  store i32 %3678, ptr %3707, align 4
  %3708 = getelementptr i8, ptr %result.i93.i1531, i64 20
  store i32 %3678, ptr %3708, align 4
  %result.i.i234.i1532 = call noalias ptr @bump_malloc_inner(i64 noundef %3694, ptr nonnull @current_ptr) #29
  %3709 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %3710 = getelementptr i8, ptr %result.i93.i1531, i64 8
  store ptr %result.i.i234.i1532, ptr %3710, align 8
  %3711 = load ptr, ptr %416, align 8
  store ptr @Array, ptr %356, align 8
  store ptr %result.i93.i1531, ptr %357, align 8
  store ptr %3711, ptr %358, align 8
  store i32 9, ptr %359, align 4
  store i32 0, ptr %360, align 4
  %3712 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %149)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %150)
  %3713 = icmp sgt i32 %3676, 0
  br i1 %3713, label %.lr.ph.i3055, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3158.critedge

.lr.ph.i3055:                                     ; preds = %._crit_edge3.i
  %invariant.gep.i3056 = getelementptr i8, ptr %3654, i64 120
  %offset_tbl.i.i24.i3058 = load ptr, ptr %offset_tbl_ptr.i.i20.i1485, align 8
  %hash_coef.i.i22.i3060 = load i64, ptr %hash_coef_ptr.i.i18.i1483, align 4
  %product.i.i.i25.i3061 = mul i64 %hash_coef.i.i22.i3060, -5261542750394134544
  %shifted.i.i.i26.i3062 = lshr i64 %product.i.i.i25.i3061, 32
  %xored.i.i.i27.i3063 = xor i64 %shifted.i.i.i26.i3062, %product.i.i.i25.i3061
  %tbl_size.i.i23.i3065 = load i64, ptr %tbl_size_ptr.i.i19.i1484, align 4
  %hash.i.i.i28.i3066 = and i64 %xored.i.i.i27.i3063, %tbl_size.i.i23.i3065
  %offset_ptr.i.i29.i3067 = getelementptr i32, ptr %offset_tbl.i.i24.i3058, i64 %hash.i.i.i28.i3066
  %offset.i.i30.i3068 = load i32, ptr %offset_ptr.i.i29.i3067, align 4
  %3714 = insertvalue { ptr, ptr, ptr, i32 } %3659, i32 %offset.i.i30.i3068, 3
  %3715 = sext i32 %offset.i.i30.i3068 to i64
  %gep.i3083 = getelementptr ptr, ptr %invariant.gep.i3056, i64 %3715
  %3716 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %3717

3717:                                             ; preds = %._crit_edge1.i3087, %.lr.ph.i3055
  %.reg2mem13.079.i3084 = phi i32 [ 0, %.lr.ph.i3055 ], [ %3734, %._crit_edge1.i3087 ]
  store ptr @_parameterization_Ptri32, ptr %149, align 8
  %3718 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %149)
  %3719 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %3654)
  %3720 = load ptr, ptr %gep.i3083, align 8
  store ptr @i32_typ, ptr %150, align 8
  %3721 = call ptr %3720({ ptr, ptr, ptr, i32 } %3714, ptr nonnull %150)
  %3722 = call { ptr, i160 } %3721({ ptr, ptr, ptr, i32 } %3714, { ptr, ptr, ptr, i32 } %3714, ptr nonnull %149, i32 %.reg2mem13.079.i3084)
  %.fca.0.extract11.i3085 = extractvalue { ptr, i160 } %3722, 0
  %3723 = icmp ne ptr %.fca.0.extract11.i3085, @nil_typ
  %3724 = icmp ne ptr %.fca.0.extract11.i3085, null
  %.not17.i3086 = and i1 %3723, %3724
  br i1 %.not17.i3086, label %3725, label %._crit_edge1.i3087

3725:                                             ; preds = %3717
  %.fca.1.extract13.i3088 = extractvalue { ptr, i160 } %3722, 1
  %.sroa.375.8.extract.trunc.i3089 = trunc i160 %.fca.1.extract13.i3088 to i64
  %3726 = inttoptr i64 %.sroa.375.8.extract.trunc.i3089 to ptr
  %.sroa.576.8.extract.shift.i3090 = lshr i160 %.fca.1.extract13.i3088, 64
  %.sroa.576.8.extract.trunc.i3091 = trunc i160 %.sroa.576.8.extract.shift.i3090 to i64
  %3727 = inttoptr i64 %.sroa.576.8.extract.trunc.i3091 to ptr
  %hash_coef_ptr.i.i33.i3092 = getelementptr i8, ptr %.fca.0.extract11.i3085, i64 8
  %tbl_size_ptr.i.i34.i3093 = getelementptr i8, ptr %.fca.0.extract11.i3085, i64 16
  %offset_tbl_ptr.i.i35.i3094 = getelementptr i8, ptr %.fca.0.extract11.i3085, i64 40
  %hash_coef.i.i36.i3095 = load i64, ptr %hash_coef_ptr.i.i33.i3092, align 4
  %tbl_size.i.i37.i3096 = load i64, ptr %tbl_size_ptr.i.i34.i3093, align 4
  %offset_tbl.i.i38.i3097 = load ptr, ptr %offset_tbl_ptr.i.i35.i3094, align 8
  %product.i.i.i39.i3098 = mul i64 %hash_coef.i.i36.i3095, 4015701072841558310
  %shifted.i.i.i40.i3099 = lshr i64 %product.i.i.i39.i3098, 32
  %xored.i.i.i41.i3100 = xor i64 %shifted.i.i.i40.i3099, %product.i.i.i39.i3098
  %hash.i.i.i42.i3101 = and i64 %xored.i.i.i41.i3100, %tbl_size.i.i37.i3096
  %offset_ptr.i.i43.i3102 = getelementptr i32, ptr %offset_tbl.i.i38.i3097, i64 %hash.i.i.i42.i3101
  %offset.i.i58.i3103 = load i32, ptr %offset_ptr.i.i43.i3102, align 4
  %3728 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i3085, 0
  %3729 = insertvalue { ptr, ptr, ptr, i32 } %3728, ptr %3726, 1
  %3730 = insertvalue { ptr, ptr, ptr, i32 } %3729, ptr %3727, 2
  %3731 = insertvalue { ptr, ptr, ptr, i32 } %3730, i32 %offset.i.i58.i3103, 3
  %3732 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3733 = call { ptr, i160 } @HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %458, { ptr, ptr, ptr, i32 } poison, ptr nonnull poison, { ptr, ptr, ptr, i32 } %3731)
  br label %._crit_edge1.i3087

._crit_edge1.i3087:                               ; preds = %3725, %3717
  %3734 = add nuw nsw i32 %.reg2mem13.079.i3084, 1
  %3735 = icmp slt i32 %3734, %3676
  br i1 %3735, label %3717, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3105

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3105: ; preds = %._crit_edge1.i3087
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %149)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %150)
  %3736 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %147)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %148)
  %invariant.gep.i3109 = getelementptr i8, ptr %3662, i64 120
  %offset_tbl.i.i24.i3111 = load ptr, ptr %offset_tbl_ptr.i.i48.i1502, align 8
  %hash_coef.i.i22.i3113 = load i64, ptr %hash_coef_ptr.i.i46.i1500, align 4
  %product.i.i.i25.i3114 = mul i64 %hash_coef.i.i22.i3113, -5261542750394134544
  %shifted.i.i.i26.i3115 = lshr i64 %product.i.i.i25.i3114, 32
  %xored.i.i.i27.i3116 = xor i64 %shifted.i.i.i26.i3115, %product.i.i.i25.i3114
  %tbl_size.i.i23.i3118 = load i64, ptr %tbl_size_ptr.i.i47.i1501, align 4
  %hash.i.i.i28.i3119 = and i64 %xored.i.i.i27.i3116, %tbl_size.i.i23.i3118
  %offset_ptr.i.i29.i3120 = getelementptr i32, ptr %offset_tbl.i.i24.i3111, i64 %hash.i.i.i28.i3119
  %offset.i.i30.i3121 = load i32, ptr %offset_ptr.i.i29.i3120, align 4
  %3737 = insertvalue { ptr, ptr, ptr, i32 } %3667, i32 %offset.i.i30.i3121, 3
  %3738 = sext i32 %offset.i.i30.i3121 to i64
  %gep.i3136 = getelementptr ptr, ptr %invariant.gep.i3109, i64 %3738
  %3739 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %3740

3740:                                             ; preds = %._crit_edge1.i3140, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3105
  %.reg2mem13.079.i3137 = phi i32 [ 0, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3105 ], [ %3757, %._crit_edge1.i3140 ]
  store ptr @_parameterization_Ptri32, ptr %147, align 8
  %3741 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %147)
  %3742 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %3662)
  %3743 = load ptr, ptr %gep.i3136, align 8
  store ptr @i32_typ, ptr %148, align 8
  %3744 = call ptr %3743({ ptr, ptr, ptr, i32 } %3737, ptr nonnull %148)
  %3745 = call { ptr, i160 } %3744({ ptr, ptr, ptr, i32 } %3737, { ptr, ptr, ptr, i32 } %3737, ptr nonnull %147, i32 %.reg2mem13.079.i3137)
  %.fca.0.extract11.i3138 = extractvalue { ptr, i160 } %3745, 0
  %3746 = icmp ne ptr %.fca.0.extract11.i3138, @nil_typ
  %3747 = icmp ne ptr %.fca.0.extract11.i3138, null
  %.not17.i3139 = and i1 %3746, %3747
  br i1 %.not17.i3139, label %3748, label %._crit_edge1.i3140

3748:                                             ; preds = %3740
  %.fca.1.extract13.i3141 = extractvalue { ptr, i160 } %3745, 1
  %.sroa.375.8.extract.trunc.i3142 = trunc i160 %.fca.1.extract13.i3141 to i64
  %3749 = inttoptr i64 %.sroa.375.8.extract.trunc.i3142 to ptr
  %.sroa.576.8.extract.shift.i3143 = lshr i160 %.fca.1.extract13.i3141, 64
  %.sroa.576.8.extract.trunc.i3144 = trunc i160 %.sroa.576.8.extract.shift.i3143 to i64
  %3750 = inttoptr i64 %.sroa.576.8.extract.trunc.i3144 to ptr
  %hash_coef_ptr.i.i33.i3145 = getelementptr i8, ptr %.fca.0.extract11.i3138, i64 8
  %tbl_size_ptr.i.i34.i3146 = getelementptr i8, ptr %.fca.0.extract11.i3138, i64 16
  %offset_tbl_ptr.i.i35.i3147 = getelementptr i8, ptr %.fca.0.extract11.i3138, i64 40
  %hash_coef.i.i36.i3148 = load i64, ptr %hash_coef_ptr.i.i33.i3145, align 4
  %tbl_size.i.i37.i3149 = load i64, ptr %tbl_size_ptr.i.i34.i3146, align 4
  %offset_tbl.i.i38.i3150 = load ptr, ptr %offset_tbl_ptr.i.i35.i3147, align 8
  %product.i.i.i39.i3151 = mul i64 %hash_coef.i.i36.i3148, 4015701072841558310
  %shifted.i.i.i40.i3152 = lshr i64 %product.i.i.i39.i3151, 32
  %xored.i.i.i41.i3153 = xor i64 %shifted.i.i.i40.i3152, %product.i.i.i39.i3151
  %hash.i.i.i42.i3154 = and i64 %xored.i.i.i41.i3153, %tbl_size.i.i37.i3149
  %offset_ptr.i.i43.i3155 = getelementptr i32, ptr %offset_tbl.i.i38.i3150, i64 %hash.i.i.i42.i3154
  %offset.i.i58.i3156 = load i32, ptr %offset_ptr.i.i43.i3155, align 4
  %3751 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i3138, 0
  %3752 = insertvalue { ptr, ptr, ptr, i32 } %3751, ptr %3749, 1
  %3753 = insertvalue { ptr, ptr, ptr, i32 } %3752, ptr %3750, 2
  %3754 = insertvalue { ptr, ptr, ptr, i32 } %3753, i32 %offset.i.i58.i3156, 3
  %3755 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3756 = call { ptr, i160 } @HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %458, { ptr, ptr, ptr, i32 } poison, ptr nonnull poison, { ptr, ptr, ptr, i32 } %3754)
  br label %._crit_edge1.i3140

._crit_edge1.i3140:                               ; preds = %3748, %3740
  %3757 = add nuw nsw i32 %.reg2mem13.079.i3137, 1
  %3758 = icmp slt i32 %3757, %3676
  br i1 %3758, label %3740, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3158

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3158.critedge: ; preds = %._crit_edge3.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %149)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %150)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %147)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %148)
  br label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3158

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3158: ; preds = %._crit_edge1.i3140, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3158.critedge
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %147)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %148)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %212)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %213)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %196)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %197)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %198)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %199)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %200)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %201)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %202)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0680.i1575)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %203)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %204)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %205)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %206)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %207)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %208)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %209)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %210)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i1577)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %211)
  %3759 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3760 = load i32, ptr %362, align 4
  %3761 = icmp sgt i32 %3760, 0
  br i1 %3761, label %.lr.ph.i1612, label %._crit_edge3.1.i

.lr.ph.i1612:                                     ; preds = %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3158
  %3762 = lshr i160 %3652, 64
  %3763 = insertelement <2 x i160> poison, i160 %3762, i64 0
  %3764 = insertelement <2 x i160> %3763, i160 %3652, i64 1
  %3765 = trunc <2 x i160> %3764 to <2 x i64>
  %3766 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %3767 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Entry)
  br label %3768

3768:                                             ; preds = %.cont.cont.i1666, %.lr.ph.i1612
  %offset.i.i260.i16832033 = phi i32 [ 9, %.lr.ph.i1612 ], [ %offset.i.i260.i1683, %.cont.cont.i1666 ]
  %.reg2mem195.0678.i1614 = phi i32 [ 1, %.lr.ph.i1612 ], [ %3923, %.cont.cont.i1666 ]
  %.reg2mem193.0677.i1615 = phi i32 [ 0, %.lr.ph.i1612 ], [ %3928, %.cont.cont.i1666 ]
  %3769 = phi <2 x i64> [ %3765, %.lr.ph.i1612 ], [ %3927, %.cont.cont.i1666 ]
  %3770 = extractelement <2 x i64> %3769, i64 1
  %.sroa.speculated352.i16702029 = inttoptr i64 %3770 to ptr
  %3771 = extractelement <2 x i64> %3769, i64 0
  %.sroa.speculated346.i16712031 = inttoptr i64 %3771 to ptr
  %3772 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Entry, ptr undef, ptr undef, i32 undef }, ptr %.sroa.speculated352.i16702029, 1
  %3773 = insertvalue { ptr, ptr, ptr, i32 } %3772, ptr %.sroa.speculated346.i16712031, 2
  %3774 = insertvalue { ptr, ptr, ptr, i32 } %3773, i32 %offset.i.i260.i16832033, 3
  %3775 = sext i32 %offset.i.i260.i16832033 to i64
  %gep2027 = getelementptr ptr, ptr getelementptr inbounds (i8, ptr @Entry, i64 64), i64 %3775
  %3776 = load ptr, ptr %gep2027, align 8
  %3777 = call ptr %3776({ ptr, ptr, ptr, i32 } %3774, ptr nonnull %2)
  %3778 = call i32 %3777({ ptr, ptr, ptr, i32 } %3774, { ptr, ptr, ptr, i32 } %3774, ptr nonnull %2)
  %3779 = icmp eq i32 %.reg2mem195.0678.i1614, 1
  %3780 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br i1 %3779, label %3781, label %3843

3781:                                             ; preds = %3768
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %3782 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3783 = load ptr, ptr %339, align 8
  %3784 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3783, 0
  %3785 = load ptr, ptr %340, align 8
  %3786 = insertvalue { ptr, ptr, ptr, i32 } %3784, ptr %3785, 1
  %3787 = load ptr, ptr %341, align 8
  %3788 = insertvalue { ptr, ptr, ptr, i32 } %3786, ptr %3787, 2
  %3789 = load i32, ptr %342, align 4
  %3790 = insertvalue { ptr, ptr, ptr, i32 } %3788, i32 %3789, 3
  %hash_coef_ptr.i.i10.i3176 = getelementptr i8, ptr %3783, i64 8
  %tbl_size_ptr.i.i11.i3177 = getelementptr i8, ptr %3783, i64 16
  %offset_tbl_ptr.i.i12.i3178 = getelementptr i8, ptr %3783, i64 40
  %hash_coef.i.i13.i3179 = load i64, ptr %hash_coef_ptr.i.i10.i3176, align 4
  %tbl_size.i.i14.i3180 = load i64, ptr %tbl_size_ptr.i.i11.i3177, align 4
  %offset_tbl.i.i15.i3181 = load ptr, ptr %offset_tbl_ptr.i.i12.i3178, align 8
  %product.i.i.i16.i3182 = mul i64 %hash_coef.i.i13.i3179, -5261542750394134544
  %shifted.i.i.i17.i3183 = lshr i64 %product.i.i.i16.i3182, 32
  %xored.i.i.i18.i3184 = xor i64 %shifted.i.i.i17.i3183, %product.i.i.i16.i3182
  %hash.i.i.i19.i3185 = and i64 %xored.i.i.i18.i3184, %tbl_size.i.i14.i3180
  %offset_ptr.i.i20.i3186 = getelementptr i32, ptr %offset_tbl.i.i15.i3181, i64 %hash.i.i.i19.i3185
  %offset.i.i21.i3187 = load i32, ptr %offset_ptr.i.i20.i3186, align 4
  %eq.i.i3188 = icmp eq i32 %3789, %offset.i.i21.i3187
  call void @llvm.assume(i1 %eq.i.i3188) #30
  %3791 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %3792 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3783)
  %3793 = sext i32 %3789 to i64
  %3794 = getelementptr ptr, ptr %3783, i64 %3793
  %3795 = getelementptr i8, ptr %3794, i64 64
  %3796 = load ptr, ptr %3795, align 8
  %3797 = call ptr %3796({ ptr, ptr, ptr, i32 } %3790, ptr nonnull %2)
  %3798 = call i32 %3797({ ptr, ptr, ptr, i32 } %3790, { ptr, ptr, ptr, i32 } %3790, ptr nonnull %2)
  %3799 = add i32 %3798, -1
  %3800 = and i32 %3799, %3778
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %3801 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3802 = load ptr, ptr %339, align 8
  %3803 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3802, 0
  %3804 = load ptr, ptr %340, align 8
  %3805 = insertvalue { ptr, ptr, ptr, i32 } %3803, ptr %3804, 1
  %3806 = load ptr, ptr %341, align 8
  %3807 = insertvalue { ptr, ptr, ptr, i32 } %3805, ptr %3806, 2
  %3808 = load i32, ptr %342, align 4
  %3809 = insertvalue { ptr, ptr, ptr, i32 } %3807, i32 %3808, 3
  %hash_coef_ptr.i.i172.i1688 = getelementptr i8, ptr %3802, i64 8
  %tbl_size_ptr.i.i173.i1689 = getelementptr i8, ptr %3802, i64 16
  %offset_tbl_ptr.i.i174.i1690 = getelementptr i8, ptr %3802, i64 40
  %hash_coef.i.i175.i1691 = load i64, ptr %hash_coef_ptr.i.i172.i1688, align 4
  %tbl_size.i.i176.i1692 = load i64, ptr %tbl_size_ptr.i.i173.i1689, align 4
  %offset_tbl.i.i177.i1693 = load ptr, ptr %offset_tbl_ptr.i.i174.i1690, align 8
  %product.i.i.i178.i1694 = mul i64 %hash_coef.i.i175.i1691, -5261542750394134544
  %shifted.i.i.i179.i1695 = lshr i64 %product.i.i.i178.i1694, 32
  %xored.i.i.i180.i1696 = xor i64 %shifted.i.i.i179.i1695, %product.i.i.i178.i1694
  %hash.i.i.i181.i1697 = and i64 %xored.i.i.i180.i1696, %tbl_size.i.i176.i1692
  %offset_ptr.i.i182.i1698 = getelementptr i32, ptr %offset_tbl.i.i177.i1693, i64 %hash.i.i.i181.i1697
  %offset.i.i183.i1699 = load i32, ptr %offset_ptr.i.i182.i1698, align 4
  %eq.i.i1700 = icmp eq i32 %3808, %offset.i.i183.i1699
  call void @llvm.assume(i1 %eq.i.i1700) #30
  store ptr @_parameterization_Ptri32, ptr %196, align 8
  %3810 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %196)
  %3811 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3802)
  %3812 = sext i32 %3808 to i64
  %3813 = getelementptr ptr, ptr %3802, i64 %3812
  %3814 = getelementptr i8, ptr %3813, i64 120
  %3815 = load ptr, ptr %3814, align 8
  store ptr @i32_typ, ptr %197, align 8
  %3816 = call ptr %3815({ ptr, ptr, ptr, i32 } %3809, ptr nonnull %197)
  %3817 = call { ptr, i160 } %3816({ ptr, ptr, ptr, i32 } %3809, { ptr, ptr, ptr, i32 } %3809, ptr nonnull %196, i32 %3800)
  %.fca.0.extract112.i1701 = extractvalue { ptr, i160 } %3817, 0
  %.sroa.3111.0.insert.ext.i1702 = zext i32 %offset.i.i260.i16832033 to i160
  %.sroa.3111.0.insert.shift.i1703 = shl nuw i160 %.sroa.3111.0.insert.ext.i1702, 128
  %.sroa.2110.0.insert.ext.i1704 = zext i64 %3771 to i160
  %.sroa.2110.0.insert.shift.i1705 = shl nuw nsw i160 %.sroa.2110.0.insert.ext.i1704, 64
  %.sroa.2110.0.insert.insert.i1706 = or disjoint i160 %.sroa.2110.0.insert.shift.i1705, %.sroa.3111.0.insert.shift.i1703
  %.sroa.0109.0.insert.ext.i1707 = zext i64 %3770 to i160
  %.sroa.0109.0.insert.insert.i1708 = or disjoint i160 %.sroa.2110.0.insert.insert.i1706, %.sroa.0109.0.insert.ext.i1707
  %3818 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0109.0.insert.insert.i1708, 1
  %3819 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3820 = load ptr, ptr %339, align 8
  %3821 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3820, 0
  %3822 = load ptr, ptr %340, align 8
  %3823 = insertvalue { ptr, ptr, ptr, i32 } %3821, ptr %3822, 1
  %3824 = load ptr, ptr %341, align 8
  %3825 = insertvalue { ptr, ptr, ptr, i32 } %3823, ptr %3824, 2
  %3826 = load i32, ptr %342, align 4
  %3827 = insertvalue { ptr, ptr, ptr, i32 } %3825, i32 %3826, 3
  %hash_coef_ptr.i.i186.i1713 = getelementptr i8, ptr %3820, i64 8
  %tbl_size_ptr.i.i187.i1714 = getelementptr i8, ptr %3820, i64 16
  %offset_tbl_ptr.i.i188.i1715 = getelementptr i8, ptr %3820, i64 40
  %hash_coef.i.i189.i1716 = load i64, ptr %hash_coef_ptr.i.i186.i1713, align 4
  %tbl_size.i.i190.i1717 = load i64, ptr %tbl_size_ptr.i.i187.i1714, align 4
  %offset_tbl.i.i191.i1718 = load ptr, ptr %offset_tbl_ptr.i.i188.i1715, align 8
  %product.i.i.i192.i1719 = mul i64 %hash_coef.i.i189.i1716, -5261542750394134544
  %shifted.i.i.i193.i1720 = lshr i64 %product.i.i.i192.i1719, 32
  %xored.i.i.i194.i1721 = xor i64 %shifted.i.i.i193.i1720, %product.i.i.i192.i1719
  %hash.i.i.i195.i1722 = and i64 %xored.i.i.i194.i1721, %tbl_size.i.i190.i1717
  %offset_ptr.i.i196.i1723 = getelementptr i32, ptr %offset_tbl.i.i191.i1718, i64 %hash.i.i.i195.i1722
  %offset.i.i197.i1724 = load i32, ptr %offset_ptr.i.i196.i1723, align 4
  %eq.i200.i1725 = icmp eq i32 %3826, %offset.i.i197.i1724
  call void @llvm.assume(i1 %eq.i200.i1725) #30
  %3828 = load ptr, ptr %result.i151, align 8
  %3829 = load ptr, ptr %322, align 8
  %result.i.i1726 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3830 = getelementptr i8, ptr %result.i.i1726, i64 16
  store ptr %3829, ptr %3830, align 8
  %3831 = getelementptr i8, ptr %result.i.i1726, i64 8
  store ptr %3828, ptr %3831, align 8
  %3832 = getelementptr i8, ptr %result.i.i1726, i64 24
  store ptr null, ptr %3832, align 8
  %3833 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i1726)
  store ptr @Entry, ptr %result.i.i1726, align 8
  store ptr @_parameterization_Ptri32, ptr %198, align 8
  store ptr %result.i.i1726, ptr %419, align 8
  %3834 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %198)
  %3835 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3820)
  %3836 = sext i32 %3826 to i64
  %3837 = getelementptr ptr, ptr %3820, i64 %3836
  %3838 = getelementptr i8, ptr %3837, i64 128
  %3839 = load ptr, ptr %3838, align 8
  store ptr @i32_typ, ptr %199, align 8
  store ptr @Entry, ptr %420, align 8
  %3840 = call ptr %3839({ ptr, ptr, ptr, i32 } %3827, ptr nonnull %199)
  call void %3840({ ptr, ptr, ptr, i32 } %3827, { ptr, ptr, ptr, i32 } %3827, ptr nonnull %198, i32 %3800, { ptr, i160 } %3818)
  %3841 = icmp ne ptr %.fca.0.extract112.i1701, @nil_typ
  %3842 = icmp ne ptr %.fca.0.extract112.i1701, null
  %.not140.i1727 = and i1 %3841, %3842
  br i1 %.not140.i1727, label %.cont.cont.i1666, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit1733.thread

3843:                                             ; preds = %3768
  %3844 = add i32 %3778, 2127912214
  %3845 = shl i32 %3778, 12
  %3846 = add i32 %3844, %3845
  %3847 = ashr i32 %3846, 19
  %3848 = xor i32 %3846, %3847
  %3849 = xor i32 %3848, -949894596
  %3850 = add i32 %3849, 374761393
  %3851 = shl i32 %3849, 5
  %3852 = add i32 %3850, %3851
  %3853 = add i32 %3852, -744332180
  %3854 = shl i32 %3852, 9
  %3855 = xor i32 %3853, %3854
  %3856 = add i32 %3855, -42973499
  %3857 = shl i32 %3855, 3
  %3858 = add i32 %3856, %3857
  %3859 = ashr i32 %3858, 16
  %3860 = xor i32 %3858, %3859
  %3861 = xor i32 %3860, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %3862 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3863 = load ptr, ptr %356, align 8
  %3864 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3863, 0
  %3865 = load ptr, ptr %357, align 8
  %3866 = insertvalue { ptr, ptr, ptr, i32 } %3864, ptr %3865, 1
  %3867 = load ptr, ptr %358, align 8
  %3868 = insertvalue { ptr, ptr, ptr, i32 } %3866, ptr %3867, 2
  %3869 = load i32, ptr %359, align 4
  %3870 = insertvalue { ptr, ptr, ptr, i32 } %3868, i32 %3869, 3
  %hash_coef_ptr.i.i10.i3206 = getelementptr i8, ptr %3863, i64 8
  %tbl_size_ptr.i.i11.i3207 = getelementptr i8, ptr %3863, i64 16
  %offset_tbl_ptr.i.i12.i3208 = getelementptr i8, ptr %3863, i64 40
  %hash_coef.i.i13.i3209 = load i64, ptr %hash_coef_ptr.i.i10.i3206, align 4
  %tbl_size.i.i14.i3210 = load i64, ptr %tbl_size_ptr.i.i11.i3207, align 4
  %offset_tbl.i.i15.i3211 = load ptr, ptr %offset_tbl_ptr.i.i12.i3208, align 8
  %product.i.i.i16.i3212 = mul i64 %hash_coef.i.i13.i3209, -5261542750394134544
  %shifted.i.i.i17.i3213 = lshr i64 %product.i.i.i16.i3212, 32
  %xored.i.i.i18.i3214 = xor i64 %shifted.i.i.i17.i3213, %product.i.i.i16.i3212
  %hash.i.i.i19.i3215 = and i64 %xored.i.i.i18.i3214, %tbl_size.i.i14.i3210
  %offset_ptr.i.i20.i3216 = getelementptr i32, ptr %offset_tbl.i.i15.i3211, i64 %hash.i.i.i19.i3215
  %offset.i.i21.i3217 = load i32, ptr %offset_ptr.i.i20.i3216, align 4
  %eq.i.i3218 = icmp eq i32 %3869, %offset.i.i21.i3217
  call void @llvm.assume(i1 %eq.i.i3218) #30
  %3871 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %3872 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3863)
  %3873 = sext i32 %3869 to i64
  %3874 = getelementptr ptr, ptr %3863, i64 %3873
  %3875 = getelementptr i8, ptr %3874, i64 64
  %3876 = load ptr, ptr %3875, align 8
  %3877 = call ptr %3876({ ptr, ptr, ptr, i32 } %3870, ptr nonnull %2)
  %3878 = call i32 %3877({ ptr, ptr, ptr, i32 } %3870, { ptr, ptr, ptr, i32 } %3870, ptr nonnull %2)
  %3879 = add i32 %3878, -1
  %3880 = and i32 %3879, %3861
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %3881 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3882 = load ptr, ptr %356, align 8
  %3883 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3882, 0
  %3884 = load ptr, ptr %357, align 8
  %3885 = insertvalue { ptr, ptr, ptr, i32 } %3883, ptr %3884, 1
  %3886 = load ptr, ptr %358, align 8
  %3887 = insertvalue { ptr, ptr, ptr, i32 } %3885, ptr %3886, 2
  %3888 = load i32, ptr %359, align 4
  %3889 = insertvalue { ptr, ptr, ptr, i32 } %3887, i32 %3888, 3
  %hash_coef_ptr.i.i202.i1620 = getelementptr i8, ptr %3882, i64 8
  %tbl_size_ptr.i.i203.i1621 = getelementptr i8, ptr %3882, i64 16
  %offset_tbl_ptr.i.i204.i1622 = getelementptr i8, ptr %3882, i64 40
  %hash_coef.i.i205.i1623 = load i64, ptr %hash_coef_ptr.i.i202.i1620, align 4
  %tbl_size.i.i206.i1624 = load i64, ptr %tbl_size_ptr.i.i203.i1621, align 4
  %offset_tbl.i.i207.i1625 = load ptr, ptr %offset_tbl_ptr.i.i204.i1622, align 8
  %product.i.i.i208.i1626 = mul i64 %hash_coef.i.i205.i1623, -5261542750394134544
  %shifted.i.i.i209.i1627 = lshr i64 %product.i.i.i208.i1626, 32
  %xored.i.i.i210.i1628 = xor i64 %shifted.i.i.i209.i1627, %product.i.i.i208.i1626
  %hash.i.i.i211.i1629 = and i64 %xored.i.i.i210.i1628, %tbl_size.i.i206.i1624
  %offset_ptr.i.i212.i1630 = getelementptr i32, ptr %offset_tbl.i.i207.i1625, i64 %hash.i.i.i211.i1629
  %offset.i.i213.i1631 = load i32, ptr %offset_ptr.i.i212.i1630, align 4
  %eq.i216.i1632 = icmp eq i32 %3888, %offset.i.i213.i1631
  call void @llvm.assume(i1 %eq.i216.i1632) #30
  store ptr @_parameterization_Ptri32, ptr %204, align 8
  %3890 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %204)
  %3891 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3882)
  %3892 = sext i32 %3888 to i64
  %3893 = getelementptr ptr, ptr %3882, i64 %3892
  %3894 = getelementptr i8, ptr %3893, i64 120
  %3895 = load ptr, ptr %3894, align 8
  store ptr @i32_typ, ptr %205, align 8
  %3896 = call ptr %3895({ ptr, ptr, ptr, i32 } %3889, ptr nonnull %205)
  %3897 = call { ptr, i160 } %3896({ ptr, ptr, ptr, i32 } %3889, { ptr, ptr, ptr, i32 } %3889, ptr nonnull %204, i32 %3880)
  %.fca.0.extract87.i1633 = extractvalue { ptr, i160 } %3897, 0
  %.sroa.3.0.insert.ext.i1634 = zext i32 %offset.i.i260.i16832033 to i160
  %.sroa.3.0.insert.shift.i1635 = shl nuw i160 %.sroa.3.0.insert.ext.i1634, 128
  %.sroa.2.0.insert.ext.i1636 = zext i64 %3771 to i160
  %.sroa.2.0.insert.shift.i1637 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i1636, 64
  %.sroa.2.0.insert.insert.i1638 = or disjoint i160 %.sroa.2.0.insert.shift.i1637, %.sroa.3.0.insert.shift.i1635
  %.sroa.0.0.insert.ext.i1639 = zext i64 %3770 to i160
  %.sroa.0.0.insert.insert.i1640 = or disjoint i160 %.sroa.2.0.insert.insert.i1638, %.sroa.0.0.insert.ext.i1639
  %3898 = insertvalue { ptr, i160 } { ptr @Entry, i160 undef }, i160 %.sroa.0.0.insert.insert.i1640, 1
  %3899 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3900 = load ptr, ptr %356, align 8
  %3901 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3900, 0
  %3902 = load ptr, ptr %357, align 8
  %3903 = insertvalue { ptr, ptr, ptr, i32 } %3901, ptr %3902, 1
  %3904 = load ptr, ptr %358, align 8
  %3905 = insertvalue { ptr, ptr, ptr, i32 } %3903, ptr %3904, 2
  %3906 = load i32, ptr %359, align 4
  %3907 = insertvalue { ptr, ptr, ptr, i32 } %3905, i32 %3906, 3
  %hash_coef_ptr.i.i218.i1645 = getelementptr i8, ptr %3900, i64 8
  %tbl_size_ptr.i.i219.i1646 = getelementptr i8, ptr %3900, i64 16
  %offset_tbl_ptr.i.i220.i1647 = getelementptr i8, ptr %3900, i64 40
  %hash_coef.i.i221.i1648 = load i64, ptr %hash_coef_ptr.i.i218.i1645, align 4
  %tbl_size.i.i222.i1649 = load i64, ptr %tbl_size_ptr.i.i219.i1646, align 4
  %offset_tbl.i.i223.i1650 = load ptr, ptr %offset_tbl_ptr.i.i220.i1647, align 8
  %product.i.i.i224.i1651 = mul i64 %hash_coef.i.i221.i1648, -5261542750394134544
  %shifted.i.i.i225.i1652 = lshr i64 %product.i.i.i224.i1651, 32
  %xored.i.i.i226.i1653 = xor i64 %shifted.i.i.i225.i1652, %product.i.i.i224.i1651
  %hash.i.i.i227.i1654 = and i64 %xored.i.i.i226.i1653, %tbl_size.i.i222.i1649
  %offset_ptr.i.i228.i1655 = getelementptr i32, ptr %offset_tbl.i.i223.i1650, i64 %hash.i.i.i227.i1654
  %offset.i.i229.i1656 = load i32, ptr %offset_ptr.i.i228.i1655, align 4
  %eq.i232.i1657 = icmp eq i32 %3906, %offset.i.i229.i1656
  call void @llvm.assume(i1 %eq.i232.i1657) #30
  %3908 = load ptr, ptr %result.i151, align 8
  %3909 = load ptr, ptr %322, align 8
  %result.i233.i1658 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3910 = getelementptr i8, ptr %result.i233.i1658, i64 16
  store ptr %3909, ptr %3910, align 8
  %3911 = getelementptr i8, ptr %result.i233.i1658, i64 8
  store ptr %3908, ptr %3911, align 8
  %3912 = getelementptr i8, ptr %result.i233.i1658, i64 24
  store ptr null, ptr %3912, align 8
  %3913 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i233.i1658)
  store ptr @Entry, ptr %result.i233.i1658, align 8
  store ptr @_parameterization_Ptri32, ptr %206, align 8
  store ptr %result.i233.i1658, ptr %417, align 8
  %3914 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %206)
  %3915 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3900)
  %3916 = sext i32 %3906 to i64
  %3917 = getelementptr ptr, ptr %3900, i64 %3916
  %3918 = getelementptr i8, ptr %3917, i64 128
  %3919 = load ptr, ptr %3918, align 8
  store ptr @i32_typ, ptr %207, align 8
  store ptr @Entry, ptr %418, align 8
  %3920 = call ptr %3919({ ptr, ptr, ptr, i32 } %3907, ptr nonnull %207)
  call void %3920({ ptr, ptr, ptr, i32 } %3907, { ptr, ptr, ptr, i32 } %3907, ptr nonnull %206, i32 %3880, { ptr, i160 } %3898)
  %3921 = icmp ne ptr %.fca.0.extract87.i1633, @nil_typ
  %3922 = icmp ne ptr %.fca.0.extract87.i1633, null
  %.not138.i1659 = and i1 %3921, %3922
  br i1 %.not138.i1659, label %.cont.cont.i1666, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit1733.thread

.cont.cont.i1666:                                 ; preds = %3843, %3781
  %.sink2044 = phi { ptr, i160 } [ %3817, %3781 ], [ %3897, %3843 ]
  %3923 = phi i32 [ 2, %3781 ], [ 1, %3843 ]
  %vptr.i248.sroa.speculated.i1669 = phi ptr [ %.fca.0.extract112.i1701, %3781 ], [ %.fca.0.extract87.i1633, %3843 ]
  %.fca.1.extract89.i1662 = extractvalue { ptr, i160 } %.sink2044, 1
  %.sroa.3407.sroa.4.0.extract.shift.i1663 = lshr i160 %.fca.1.extract89.i1662, 64
  %3924 = trunc i160 %.sroa.3407.sroa.4.0.extract.shift.i1663 to i64
  %3925 = insertelement <2 x i64> poison, i64 %3924, i64 0
  %3926 = trunc i160 %.fca.1.extract89.i1662 to i64
  %3927 = insertelement <2 x i64> %3925, i64 %3926, i64 1
  %hash_coef_ptr.i.i249.i1672 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i1669, i64 8
  %tbl_size_ptr.i.i250.i1673 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i1669, i64 16
  %offset_tbl_ptr.i.i251.i1674 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i1669, i64 40
  %hash_coef.i.i252.i1675 = load i64, ptr %hash_coef_ptr.i.i249.i1672, align 4
  %tbl_size.i.i253.i1676 = load i64, ptr %tbl_size_ptr.i.i250.i1673, align 4
  %offset_tbl.i.i254.i1677 = load ptr, ptr %offset_tbl_ptr.i.i251.i1674, align 8
  %product.i.i.i255.i1678 = mul i64 %hash_coef.i.i252.i1675, 4015701072841558310
  %shifted.i.i.i256.i1679 = lshr i64 %product.i.i.i255.i1678, 32
  %xored.i.i.i257.i1680 = xor i64 %shifted.i.i.i256.i1679, %product.i.i.i255.i1678
  %hash.i.i.i258.i1681 = and i64 %xored.i.i.i257.i1680, %tbl_size.i.i253.i1676
  %offset_ptr.i.i259.i1682 = getelementptr i32, ptr %offset_tbl.i.i254.i1677, i64 %hash.i.i.i258.i1681
  %offset.i.i260.i1683 = load i32, ptr %offset_ptr.i.i259.i1682, align 4
  %3928 = add nuw nsw i32 %.reg2mem193.0677.i1615, 1
  %3929 = load i32, ptr %362, align 4
  %3930 = icmp slt i32 %3928, %3929
  br i1 %3930, label %3768, label %._crit_edge3.1.i

HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit1733.thread: ; preds = %3781, %3843
  %3931 = phi ptr [ %208, %3843 ], [ %200, %3781 ]
  %3932 = phi ptr [ %209, %3843 ], [ %201, %3781 ]
  %3933 = phi ptr [ %210, %3843 ], [ %202, %3781 ]
  %3934 = phi ptr [ %.sroa.0.i1577, %3843 ], [ %.sroa.0680.i1575, %3781 ]
  %3935 = phi ptr [ %211, %3843 ], [ %203, %3781 ]
  %3936 = load i32, ptr %360, align 4
  store i32 %3936, ptr %3931, align 4
  store i32 1, ptr %3932, align 4
  %3937 = add i32 %3936, 1
  store i32 %3937, ptr %3933, align 4
  %3938 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  store i32 %3937, ptr %360, align 4
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %3935, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %3934, align 8
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %196)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %197)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %198)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %199)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %200)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %201)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %202)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i1575)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %203)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %204)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %205)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %206)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %207)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %208)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %209)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %210)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i1577)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %211)
  br label %HashMap_insert_keyK_valueV.exit

._crit_edge3.1.i:                                 ; preds = %.cont.cont.i1666, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3158
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %196)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %197)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %198)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %199)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %200)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %201)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %202)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i1575)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %203)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %204)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %205)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %206)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %207)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %208)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %209)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %210)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i1577)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %211)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %194)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %195)
  %3939 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %3940 = load ptr, ptr %339, align 8
  %3941 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3940, 0
  %3942 = load ptr, ptr %340, align 8
  %3943 = insertvalue { ptr, ptr, ptr, i32 } %3941, ptr %3942, 1
  %3944 = load ptr, ptr %341, align 8
  %3945 = insertvalue { ptr, ptr, ptr, i32 } %3943, ptr %3944, 2
  %3946 = load i32, ptr %342, align 4
  %3947 = insertvalue { ptr, ptr, ptr, i32 } %3945, i32 %3946, 3
  %hash_coef_ptr.i.i18.i1752 = getelementptr i8, ptr %3940, i64 8
  %tbl_size_ptr.i.i19.i1753 = getelementptr i8, ptr %3940, i64 16
  %offset_tbl_ptr.i.i20.i1754 = getelementptr i8, ptr %3940, i64 40
  %hash_coef.i.i21.i1755 = load i64, ptr %hash_coef_ptr.i.i18.i1752, align 4
  %tbl_size.i.i22.i1756 = load i64, ptr %tbl_size_ptr.i.i19.i1753, align 4
  %offset_tbl.i.i23.i1757 = load ptr, ptr %offset_tbl_ptr.i.i20.i1754, align 8
  %product.i.i.i24.i1758 = mul i64 %hash_coef.i.i21.i1755, -5261542750394134544
  %shifted.i.i.i25.i1759 = lshr i64 %product.i.i.i24.i1758, 32
  %xored.i.i.i26.i1760 = xor i64 %shifted.i.i.i25.i1759, %product.i.i.i24.i1758
  %hash.i.i.i27.i1761 = and i64 %xored.i.i.i26.i1760, %tbl_size.i.i22.i1756
  %offset_ptr.i.i28.i1762 = getelementptr i32, ptr %offset_tbl.i.i23.i1757, i64 %hash.i.i.i27.i1761
  %offset.i.i29.i1763 = load i32, ptr %offset_ptr.i.i28.i1762, align 4
  %eq.i.i1764 = icmp eq i32 %3946, %offset.i.i29.i1763
  call void @llvm.assume(i1 %eq.i.i1764) #30
  %3948 = load ptr, ptr %356, align 8
  %3949 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3948, 0
  %3950 = load ptr, ptr %357, align 8
  %3951 = insertvalue { ptr, ptr, ptr, i32 } %3949, ptr %3950, 1
  %3952 = load ptr, ptr %358, align 8
  %3953 = insertvalue { ptr, ptr, ptr, i32 } %3951, ptr %3952, 2
  %3954 = load i32, ptr %359, align 4
  %hash_coef_ptr.i.i46.i1769 = getelementptr i8, ptr %3948, i64 8
  %tbl_size_ptr.i.i47.i1770 = getelementptr i8, ptr %3948, i64 16
  %offset_tbl_ptr.i.i48.i1771 = getelementptr i8, ptr %3948, i64 40
  %hash_coef.i.i49.i1772 = load i64, ptr %hash_coef_ptr.i.i46.i1769, align 4
  %tbl_size.i.i50.i1773 = load i64, ptr %tbl_size_ptr.i.i47.i1770, align 4
  %offset_tbl.i.i51.i1774 = load ptr, ptr %offset_tbl_ptr.i.i48.i1771, align 8
  %product.i.i.i52.i1775 = mul i64 %hash_coef.i.i49.i1772, -5261542750394134544
  %shifted.i.i.i53.i1776 = lshr i64 %product.i.i.i52.i1775, 32
  %xored.i.i.i54.i1777 = xor i64 %shifted.i.i.i53.i1776, %product.i.i.i52.i1775
  %hash.i.i.i55.i1778 = and i64 %xored.i.i.i54.i1777, %tbl_size.i.i50.i1773
  %offset_ptr.i.i56.i1779 = getelementptr i32, ptr %offset_tbl.i.i51.i1774, i64 %hash.i.i.i55.i1778
  %offset.i.i57.i1780 = load i32, ptr %offset_ptr.i.i56.i1779, align 4
  %eq.i60.i1781 = icmp eq i32 %3954, %offset.i.i57.i1780
  call void @llvm.assume(i1 %eq.i60.i1781) #30
  %3955 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %3956 = call ptr @llvm.invariant.start.p0(i64 600, ptr %3940)
  %3957 = sext i32 %3946 to i64
  %3958 = getelementptr ptr, ptr %3940, i64 %3957
  %3959 = getelementptr i8, ptr %3958, i64 64
  %3960 = load ptr, ptr %3959, align 8
  %3961 = call ptr %3960({ ptr, ptr, ptr, i32 } %3947, ptr nonnull %2)
  %3962 = call i32 %3961({ ptr, ptr, ptr, i32 } %3947, { ptr, ptr, ptr, i32 } %3947, ptr nonnull %2)
  %3963 = shl i32 %3962, 1
  %3964 = call i32 @llvm.smax.i32(i32 %3963, i32 16)
  %3965 = load ptr, ptr %result.i151, align 8
  %3966 = load ptr, ptr %322, align 8
  %result.i.i1782 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3967 = getelementptr i8, ptr %result.i.i1782, i64 16
  store ptr @_parameterization_Nil, ptr %3967, align 8
  %result.i75.i1783 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3968 = getelementptr i8, ptr %result.i75.i1783, i64 16
  store ptr %3966, ptr %3968, align 8
  %3969 = getelementptr i8, ptr %result.i75.i1783, i64 8
  store ptr %3965, ptr %3969, align 8
  %3970 = getelementptr i8, ptr %result.i75.i1783, i64 24
  store ptr null, ptr %3970, align 8
  %3971 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i75.i1783)
  store ptr @Entry, ptr %result.i75.i1783, align 8
  %3972 = getelementptr i8, ptr %result.i.i1782, i64 8
  store ptr %result.i75.i1783, ptr %3972, align 8
  %3973 = getelementptr i8, ptr %result.i.i1782, i64 24
  store ptr null, ptr %3973, align 8
  %3974 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i1782)
  store ptr @union_typ, ptr %result.i.i1782, align 8
  %result.i76.i1784 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i.i1782, ptr %result.i76.i1784, align 8
  %3975 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i76.i1784)
  store ptr @Array, ptr %194, align 8
  store ptr %result.i76.i1784, ptr %421, align 8
  store i32 9, ptr %422, align 8
  %3976 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %194)
  %3977 = getelementptr i8, ptr %result.i76.i1784, i64 16
  store i32 %3964, ptr %3977, align 4
  %3978 = getelementptr i8, ptr %result.i76.i1784, i64 20
  store i32 %3964, ptr %3978, align 4
  %3979 = zext nneg i32 %3964 to i64
  %3980 = shl nuw nsw i64 %3979, 5
  %result.i.i.i1785 = call noalias ptr @bump_malloc_inner(i64 noundef %3980, ptr nonnull @current_ptr) #29
  %3981 = getelementptr i8, ptr %result.i76.i1784, i64 8
  store ptr %result.i.i.i1785, ptr %3981, align 8
  %3982 = load ptr, ptr %423, align 8
  store ptr @Array, ptr %339, align 8
  store ptr %result.i76.i1784, ptr %340, align 8
  store ptr %3982, ptr %341, align 8
  store i32 9, ptr %342, align 4
  %result.i91.i1798 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3983 = getelementptr i8, ptr %result.i91.i1798, i64 16
  store ptr @_parameterization_Nil, ptr %3983, align 8
  %result.i92.i1799 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %3984 = getelementptr i8, ptr %result.i92.i1799, i64 16
  store ptr %3966, ptr %3984, align 8
  %3985 = getelementptr i8, ptr %result.i92.i1799, i64 8
  store ptr %3965, ptr %3985, align 8
  %3986 = getelementptr i8, ptr %result.i92.i1799, i64 24
  store ptr null, ptr %3986, align 8
  %3987 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i92.i1799)
  store ptr @Entry, ptr %result.i92.i1799, align 8
  %3988 = getelementptr i8, ptr %result.i91.i1798, i64 8
  store ptr %result.i92.i1799, ptr %3988, align 8
  %3989 = getelementptr i8, ptr %result.i91.i1798, i64 24
  store ptr null, ptr %3989, align 8
  %3990 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i91.i1798)
  store ptr @union_typ, ptr %result.i91.i1798, align 8
  %result.i93.i1800 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i91.i1798, ptr %result.i93.i1800, align 8
  %3991 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i93.i1800)
  store ptr @Array, ptr %195, align 8
  store ptr %result.i93.i1800, ptr %424, align 8
  store i32 9, ptr %425, align 8
  %3992 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %195)
  %3993 = getelementptr i8, ptr %result.i93.i1800, i64 16
  store i32 %3964, ptr %3993, align 4
  %3994 = getelementptr i8, ptr %result.i93.i1800, i64 20
  store i32 %3964, ptr %3994, align 4
  %result.i.i234.i1801 = call noalias ptr @bump_malloc_inner(i64 noundef %3980, ptr nonnull @current_ptr) #29
  %3995 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %3996 = getelementptr i8, ptr %result.i93.i1800, i64 8
  store ptr %result.i.i234.i1801, ptr %3996, align 8
  %3997 = load ptr, ptr %426, align 8
  store ptr @Array, ptr %356, align 8
  store ptr %result.i93.i1800, ptr %357, align 8
  store ptr %3997, ptr %358, align 8
  store i32 9, ptr %359, align 4
  store i32 0, ptr %360, align 4
  %3998 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %145)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %146)
  %3999 = icmp sgt i32 %3962, 0
  br i1 %3999, label %.lr.ph.i3221, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3324.critedge

.lr.ph.i3221:                                     ; preds = %._crit_edge3.1.i
  %invariant.gep.i3222 = getelementptr i8, ptr %3940, i64 120
  %offset_tbl.i.i24.i3224 = load ptr, ptr %offset_tbl_ptr.i.i20.i1754, align 8
  %hash_coef.i.i22.i3226 = load i64, ptr %hash_coef_ptr.i.i18.i1752, align 4
  %product.i.i.i25.i3227 = mul i64 %hash_coef.i.i22.i3226, -5261542750394134544
  %shifted.i.i.i26.i3228 = lshr i64 %product.i.i.i25.i3227, 32
  %xored.i.i.i27.i3229 = xor i64 %shifted.i.i.i26.i3228, %product.i.i.i25.i3227
  %tbl_size.i.i23.i3231 = load i64, ptr %tbl_size_ptr.i.i19.i1753, align 4
  %hash.i.i.i28.i3232 = and i64 %xored.i.i.i27.i3229, %tbl_size.i.i23.i3231
  %offset_ptr.i.i29.i3233 = getelementptr i32, ptr %offset_tbl.i.i24.i3224, i64 %hash.i.i.i28.i3232
  %offset.i.i30.i3234 = load i32, ptr %offset_ptr.i.i29.i3233, align 4
  %4000 = insertvalue { ptr, ptr, ptr, i32 } %3945, i32 %offset.i.i30.i3234, 3
  %4001 = sext i32 %offset.i.i30.i3234 to i64
  %gep.i3249 = getelementptr ptr, ptr %invariant.gep.i3222, i64 %4001
  %4002 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %4003

4003:                                             ; preds = %._crit_edge1.i3253, %.lr.ph.i3221
  %.reg2mem13.079.i3250 = phi i32 [ 0, %.lr.ph.i3221 ], [ %4195, %._crit_edge1.i3253 ]
  store ptr @_parameterization_Ptri32, ptr %145, align 8
  %4004 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %145)
  %4005 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %3940)
  %4006 = load ptr, ptr %gep.i3249, align 8
  store ptr @i32_typ, ptr %146, align 8
  %4007 = call ptr %4006({ ptr, ptr, ptr, i32 } %4000, ptr nonnull %146)
  %4008 = call { ptr, i160 } %4007({ ptr, ptr, ptr, i32 } %4000, { ptr, ptr, ptr, i32 } %4000, ptr nonnull %145, i32 %.reg2mem13.079.i3250)
  %.fca.0.extract11.i3251 = extractvalue { ptr, i160 } %4008, 0
  %4009 = icmp ne ptr %.fca.0.extract11.i3251, @nil_typ
  %4010 = icmp ne ptr %.fca.0.extract11.i3251, null
  %.not17.i3252 = and i1 %4009, %4010
  br i1 %.not17.i3252, label %4011, label %._crit_edge1.i3253

4011:                                             ; preds = %4003
  %hash_coef_ptr.i.i33.i3258 = getelementptr i8, ptr %.fca.0.extract11.i3251, i64 8
  %tbl_size_ptr.i.i34.i3259 = getelementptr i8, ptr %.fca.0.extract11.i3251, i64 16
  %offset_tbl_ptr.i.i35.i3260 = getelementptr i8, ptr %.fca.0.extract11.i3251, i64 40
  %4012 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %83)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %84)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %85)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %86)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %87)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %88)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %89)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0680.i4046)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %90)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %91)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %92)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %93)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %94)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %95)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %96)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %97)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i4048)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %98)
  %hash_coef.i.i147.i4068 = load i64, ptr %hash_coef_ptr.i.i33.i3258, align 4
  %tbl_size.i.i148.i4069 = load i64, ptr %tbl_size_ptr.i.i34.i3259, align 4
  %offset_tbl.i.i149.i4070 = load ptr, ptr %offset_tbl_ptr.i.i35.i3260, align 8
  %product.i.i.i150.i4071 = mul i64 %hash_coef.i.i147.i4068, 4015701072841558310
  %shifted.i.i.i151.i4072 = lshr i64 %product.i.i.i150.i4071, 32
  %xored.i.i.i152.i4073 = xor i64 %shifted.i.i.i151.i4072, %product.i.i.i150.i4071
  %hash.i.i.i153.i4074 = and i64 %xored.i.i.i152.i4073, %tbl_size.i.i148.i4069
  %offset_ptr.i.i154.i4075 = getelementptr i32, ptr %offset_tbl.i.i149.i4070, i64 %hash.i.i.i153.i4074
  %offset.i.i169.i4076 = load i32, ptr %offset_ptr.i.i154.i4075, align 4
  %4013 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4014 = load i32, ptr %362, align 4
  %4015 = icmp sgt i32 %4014, 0
  br i1 %4015, label %.lr.ph.i4082, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4202

.lr.ph.i4082:                                     ; preds = %4011
  %.fca.1.extract13.i3254 = extractvalue { ptr, i160 } %4008, 1
  %.sroa.576.8.extract.shift.i3256 = lshr i160 %.fca.1.extract13.i3254, 64
  %4016 = insertelement <2 x i160> poison, i160 %.sroa.576.8.extract.shift.i3256, i64 0
  %4017 = insertelement <2 x i160> %4016, i160 %.fca.1.extract13.i3254, i64 1
  %4018 = trunc <2 x i160> %4017 to <2 x i64>
  %4019 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i3251, 0
  %4020 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4021 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract11.i3251)
  %invariant.gep4383 = getelementptr i8, ptr %.fca.0.extract11.i3251, i64 64
  %4022 = insertvalue { ptr, i160 } undef, ptr %.fca.0.extract11.i3251, 0
  br label %4023

4023:                                             ; preds = %.cont.cont.i4135, %.lr.ph.i4082
  %offset.i.i260.i41524390 = phi i32 [ %offset.i.i169.i4076, %.lr.ph.i4082 ], [ %offset.i.i260.i4152, %.cont.cont.i4135 ]
  %.reg2mem195.0678.i4083 = phi i32 [ 1, %.lr.ph.i4082 ], [ %4178, %.cont.cont.i4135 ]
  %.reg2mem193.0677.i4084 = phi i32 [ 0, %.lr.ph.i4082 ], [ %4183, %.cont.cont.i4135 ]
  %4024 = phi <2 x i64> [ %4018, %.lr.ph.i4082 ], [ %4182, %.cont.cont.i4135 ]
  %4025 = extractelement <2 x i64> %4024, i64 1
  %.sroa.speculated352.i41394386 = inttoptr i64 %4025 to ptr
  %4026 = extractelement <2 x i64> %4024, i64 0
  %.sroa.speculated346.i41404388 = inttoptr i64 %4026 to ptr
  %4027 = insertvalue { ptr, ptr, ptr, i32 } %4019, ptr %.sroa.speculated352.i41394386, 1
  %4028 = insertvalue { ptr, ptr, ptr, i32 } %4027, ptr %.sroa.speculated346.i41404388, 2
  %4029 = insertvalue { ptr, ptr, ptr, i32 } %4028, i32 %offset.i.i260.i41524390, 3
  %4030 = sext i32 %offset.i.i260.i41524390 to i64
  %gep4384 = getelementptr ptr, ptr %invariant.gep4383, i64 %4030
  %4031 = load ptr, ptr %gep4384, align 8
  %4032 = call ptr %4031({ ptr, ptr, ptr, i32 } %4029, ptr nonnull %2)
  %4033 = call i32 %4032({ ptr, ptr, ptr, i32 } %4029, { ptr, ptr, ptr, i32 } %4029, ptr nonnull %2)
  %4034 = icmp eq i32 %.reg2mem195.0678.i4083, 1
  %4035 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br i1 %4034, label %4036, label %4098

4036:                                             ; preds = %4023
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %4037 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4038 = load ptr, ptr %339, align 8
  %4039 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4038, 0
  %4040 = load ptr, ptr %340, align 8
  %4041 = insertvalue { ptr, ptr, ptr, i32 } %4039, ptr %4040, 1
  %4042 = load ptr, ptr %341, align 8
  %4043 = insertvalue { ptr, ptr, ptr, i32 } %4041, ptr %4042, 2
  %4044 = load i32, ptr %342, align 4
  %4045 = insertvalue { ptr, ptr, ptr, i32 } %4043, i32 %4044, 3
  %hash_coef_ptr.i.i10.i5188 = getelementptr i8, ptr %4038, i64 8
  %tbl_size_ptr.i.i11.i5189 = getelementptr i8, ptr %4038, i64 16
  %offset_tbl_ptr.i.i12.i5190 = getelementptr i8, ptr %4038, i64 40
  %hash_coef.i.i13.i5191 = load i64, ptr %hash_coef_ptr.i.i10.i5188, align 4
  %tbl_size.i.i14.i5192 = load i64, ptr %tbl_size_ptr.i.i11.i5189, align 4
  %offset_tbl.i.i15.i5193 = load ptr, ptr %offset_tbl_ptr.i.i12.i5190, align 8
  %product.i.i.i16.i5194 = mul i64 %hash_coef.i.i13.i5191, -5261542750394134544
  %shifted.i.i.i17.i5195 = lshr i64 %product.i.i.i16.i5194, 32
  %xored.i.i.i18.i5196 = xor i64 %shifted.i.i.i17.i5195, %product.i.i.i16.i5194
  %hash.i.i.i19.i5197 = and i64 %xored.i.i.i18.i5196, %tbl_size.i.i14.i5192
  %offset_ptr.i.i20.i5198 = getelementptr i32, ptr %offset_tbl.i.i15.i5193, i64 %hash.i.i.i19.i5197
  %offset.i.i21.i5199 = load i32, ptr %offset_ptr.i.i20.i5198, align 4
  %eq.i.i5200 = icmp eq i32 %4044, %offset.i.i21.i5199
  call void @llvm.assume(i1 %eq.i.i5200) #30
  %4046 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4047 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4038)
  %4048 = sext i32 %4044 to i64
  %4049 = getelementptr ptr, ptr %4038, i64 %4048
  %4050 = getelementptr i8, ptr %4049, i64 64
  %4051 = load ptr, ptr %4050, align 8
  %4052 = call ptr %4051({ ptr, ptr, ptr, i32 } %4045, ptr nonnull %2)
  %4053 = call i32 %4052({ ptr, ptr, ptr, i32 } %4045, { ptr, ptr, ptr, i32 } %4045, ptr nonnull %2)
  %4054 = add i32 %4053, -1
  %4055 = and i32 %4054, %4033
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %4056 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4057 = load ptr, ptr %339, align 8
  %4058 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4057, 0
  %4059 = load ptr, ptr %340, align 8
  %4060 = insertvalue { ptr, ptr, ptr, i32 } %4058, ptr %4059, 1
  %4061 = load ptr, ptr %341, align 8
  %4062 = insertvalue { ptr, ptr, ptr, i32 } %4060, ptr %4061, 2
  %4063 = load i32, ptr %342, align 4
  %4064 = insertvalue { ptr, ptr, ptr, i32 } %4062, i32 %4063, 3
  %hash_coef_ptr.i.i172.i4157 = getelementptr i8, ptr %4057, i64 8
  %tbl_size_ptr.i.i173.i4158 = getelementptr i8, ptr %4057, i64 16
  %offset_tbl_ptr.i.i174.i4159 = getelementptr i8, ptr %4057, i64 40
  %hash_coef.i.i175.i4160 = load i64, ptr %hash_coef_ptr.i.i172.i4157, align 4
  %tbl_size.i.i176.i4161 = load i64, ptr %tbl_size_ptr.i.i173.i4158, align 4
  %offset_tbl.i.i177.i4162 = load ptr, ptr %offset_tbl_ptr.i.i174.i4159, align 8
  %product.i.i.i178.i4163 = mul i64 %hash_coef.i.i175.i4160, -5261542750394134544
  %shifted.i.i.i179.i4164 = lshr i64 %product.i.i.i178.i4163, 32
  %xored.i.i.i180.i4165 = xor i64 %shifted.i.i.i179.i4164, %product.i.i.i178.i4163
  %hash.i.i.i181.i4166 = and i64 %xored.i.i.i180.i4165, %tbl_size.i.i176.i4161
  %offset_ptr.i.i182.i4167 = getelementptr i32, ptr %offset_tbl.i.i177.i4162, i64 %hash.i.i.i181.i4166
  %offset.i.i183.i4168 = load i32, ptr %offset_ptr.i.i182.i4167, align 4
  %eq.i.i4169 = icmp eq i32 %4063, %offset.i.i183.i4168
  call void @llvm.assume(i1 %eq.i.i4169) #30
  store ptr @_parameterization_Ptri32, ptr %83, align 8
  %4065 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %83)
  %4066 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4057)
  %4067 = sext i32 %4063 to i64
  %4068 = getelementptr ptr, ptr %4057, i64 %4067
  %4069 = getelementptr i8, ptr %4068, i64 120
  %4070 = load ptr, ptr %4069, align 8
  store ptr @i32_typ, ptr %84, align 8
  %4071 = call ptr %4070({ ptr, ptr, ptr, i32 } %4064, ptr nonnull %84)
  %4072 = call { ptr, i160 } %4071({ ptr, ptr, ptr, i32 } %4064, { ptr, ptr, ptr, i32 } %4064, ptr nonnull %83, i32 %4055)
  %.fca.0.extract112.i4170 = extractvalue { ptr, i160 } %4072, 0
  %.sroa.3111.0.insert.ext.i4171 = zext i32 %offset.i.i260.i41524390 to i160
  %.sroa.3111.0.insert.shift.i4172 = shl nuw i160 %.sroa.3111.0.insert.ext.i4171, 128
  %.sroa.2110.0.insert.ext.i4173 = zext i64 %4026 to i160
  %.sroa.2110.0.insert.shift.i4174 = shl nuw nsw i160 %.sroa.2110.0.insert.ext.i4173, 64
  %.sroa.2110.0.insert.insert.i4175 = or disjoint i160 %.sroa.2110.0.insert.shift.i4174, %.sroa.3111.0.insert.shift.i4172
  %.sroa.0109.0.insert.ext.i4176 = zext i64 %4025 to i160
  %.sroa.0109.0.insert.insert.i4177 = or disjoint i160 %.sroa.2110.0.insert.insert.i4175, %.sroa.0109.0.insert.ext.i4176
  %4073 = insertvalue { ptr, i160 } %4022, i160 %.sroa.0109.0.insert.insert.i4177, 1
  %4074 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4075 = load ptr, ptr %339, align 8
  %4076 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4075, 0
  %4077 = load ptr, ptr %340, align 8
  %4078 = insertvalue { ptr, ptr, ptr, i32 } %4076, ptr %4077, 1
  %4079 = load ptr, ptr %341, align 8
  %4080 = insertvalue { ptr, ptr, ptr, i32 } %4078, ptr %4079, 2
  %4081 = load i32, ptr %342, align 4
  %4082 = insertvalue { ptr, ptr, ptr, i32 } %4080, i32 %4081, 3
  %hash_coef_ptr.i.i186.i4182 = getelementptr i8, ptr %4075, i64 8
  %tbl_size_ptr.i.i187.i4183 = getelementptr i8, ptr %4075, i64 16
  %offset_tbl_ptr.i.i188.i4184 = getelementptr i8, ptr %4075, i64 40
  %hash_coef.i.i189.i4185 = load i64, ptr %hash_coef_ptr.i.i186.i4182, align 4
  %tbl_size.i.i190.i4186 = load i64, ptr %tbl_size_ptr.i.i187.i4183, align 4
  %offset_tbl.i.i191.i4187 = load ptr, ptr %offset_tbl_ptr.i.i188.i4184, align 8
  %product.i.i.i192.i4188 = mul i64 %hash_coef.i.i189.i4185, -5261542750394134544
  %shifted.i.i.i193.i4189 = lshr i64 %product.i.i.i192.i4188, 32
  %xored.i.i.i194.i4190 = xor i64 %shifted.i.i.i193.i4189, %product.i.i.i192.i4188
  %hash.i.i.i195.i4191 = and i64 %xored.i.i.i194.i4190, %tbl_size.i.i190.i4186
  %offset_ptr.i.i196.i4192 = getelementptr i32, ptr %offset_tbl.i.i191.i4187, i64 %hash.i.i.i195.i4191
  %offset.i.i197.i4193 = load i32, ptr %offset_ptr.i.i196.i4192, align 4
  %eq.i200.i4194 = icmp eq i32 %4081, %offset.i.i197.i4193
  call void @llvm.assume(i1 %eq.i200.i4194) #30
  %4083 = load ptr, ptr %result.i151, align 8
  %4084 = load ptr, ptr %322, align 8
  %result.i.i4195 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %4085 = getelementptr i8, ptr %result.i.i4195, i64 16
  store ptr %4084, ptr %4085, align 8
  %4086 = getelementptr i8, ptr %result.i.i4195, i64 8
  store ptr %4083, ptr %4086, align 8
  %4087 = getelementptr i8, ptr %result.i.i4195, i64 24
  store ptr null, ptr %4087, align 8
  %4088 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i4195)
  store ptr @Entry, ptr %result.i.i4195, align 8
  store ptr @_parameterization_Ptri32, ptr %85, align 8
  store ptr %result.i.i4195, ptr %472, align 8
  %4089 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %85)
  %4090 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4075)
  %4091 = sext i32 %4081 to i64
  %4092 = getelementptr ptr, ptr %4075, i64 %4091
  %4093 = getelementptr i8, ptr %4092, i64 128
  %4094 = load ptr, ptr %4093, align 8
  store ptr @i32_typ, ptr %86, align 8
  store ptr %.fca.0.extract11.i3251, ptr %473, align 8
  %4095 = call ptr %4094({ ptr, ptr, ptr, i32 } %4082, ptr nonnull %86)
  call void %4095({ ptr, ptr, ptr, i32 } %4082, { ptr, ptr, ptr, i32 } %4082, ptr nonnull %85, i32 %4055, { ptr, i160 } %4073)
  %4096 = icmp ne ptr %.fca.0.extract112.i4170, @nil_typ
  %4097 = icmp ne ptr %.fca.0.extract112.i4170, null
  %.not140.i4196 = and i1 %4096, %4097
  br i1 %.not140.i4196, label %.cont.cont.i4135, label %4186

4098:                                             ; preds = %4023
  %4099 = add i32 %4033, 2127912214
  %4100 = shl i32 %4033, 12
  %4101 = add i32 %4099, %4100
  %4102 = ashr i32 %4101, 19
  %4103 = xor i32 %4101, %4102
  %4104 = xor i32 %4103, -949894596
  %4105 = add i32 %4104, 374761393
  %4106 = shl i32 %4104, 5
  %4107 = add i32 %4105, %4106
  %4108 = add i32 %4107, -744332180
  %4109 = shl i32 %4107, 9
  %4110 = xor i32 %4108, %4109
  %4111 = add i32 %4110, -42973499
  %4112 = shl i32 %4110, 3
  %4113 = add i32 %4111, %4112
  %4114 = ashr i32 %4113, 16
  %4115 = xor i32 %4113, %4114
  %4116 = xor i32 %4115, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %4117 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4118 = load ptr, ptr %356, align 8
  %4119 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4118, 0
  %4120 = load ptr, ptr %357, align 8
  %4121 = insertvalue { ptr, ptr, ptr, i32 } %4119, ptr %4120, 1
  %4122 = load ptr, ptr %358, align 8
  %4123 = insertvalue { ptr, ptr, ptr, i32 } %4121, ptr %4122, 2
  %4124 = load i32, ptr %359, align 4
  %4125 = insertvalue { ptr, ptr, ptr, i32 } %4123, i32 %4124, 3
  %hash_coef_ptr.i.i10.i5218 = getelementptr i8, ptr %4118, i64 8
  %tbl_size_ptr.i.i11.i5219 = getelementptr i8, ptr %4118, i64 16
  %offset_tbl_ptr.i.i12.i5220 = getelementptr i8, ptr %4118, i64 40
  %hash_coef.i.i13.i5221 = load i64, ptr %hash_coef_ptr.i.i10.i5218, align 4
  %tbl_size.i.i14.i5222 = load i64, ptr %tbl_size_ptr.i.i11.i5219, align 4
  %offset_tbl.i.i15.i5223 = load ptr, ptr %offset_tbl_ptr.i.i12.i5220, align 8
  %product.i.i.i16.i5224 = mul i64 %hash_coef.i.i13.i5221, -5261542750394134544
  %shifted.i.i.i17.i5225 = lshr i64 %product.i.i.i16.i5224, 32
  %xored.i.i.i18.i5226 = xor i64 %shifted.i.i.i17.i5225, %product.i.i.i16.i5224
  %hash.i.i.i19.i5227 = and i64 %xored.i.i.i18.i5226, %tbl_size.i.i14.i5222
  %offset_ptr.i.i20.i5228 = getelementptr i32, ptr %offset_tbl.i.i15.i5223, i64 %hash.i.i.i19.i5227
  %offset.i.i21.i5229 = load i32, ptr %offset_ptr.i.i20.i5228, align 4
  %eq.i.i5230 = icmp eq i32 %4124, %offset.i.i21.i5229
  call void @llvm.assume(i1 %eq.i.i5230) #30
  %4126 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4127 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4118)
  %4128 = sext i32 %4124 to i64
  %4129 = getelementptr ptr, ptr %4118, i64 %4128
  %4130 = getelementptr i8, ptr %4129, i64 64
  %4131 = load ptr, ptr %4130, align 8
  %4132 = call ptr %4131({ ptr, ptr, ptr, i32 } %4125, ptr nonnull %2)
  %4133 = call i32 %4132({ ptr, ptr, ptr, i32 } %4125, { ptr, ptr, ptr, i32 } %4125, ptr nonnull %2)
  %4134 = add i32 %4133, -1
  %4135 = and i32 %4134, %4116
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %4136 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4137 = load ptr, ptr %356, align 8
  %4138 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4137, 0
  %4139 = load ptr, ptr %357, align 8
  %4140 = insertvalue { ptr, ptr, ptr, i32 } %4138, ptr %4139, 1
  %4141 = load ptr, ptr %358, align 8
  %4142 = insertvalue { ptr, ptr, ptr, i32 } %4140, ptr %4141, 2
  %4143 = load i32, ptr %359, align 4
  %4144 = insertvalue { ptr, ptr, ptr, i32 } %4142, i32 %4143, 3
  %hash_coef_ptr.i.i202.i4089 = getelementptr i8, ptr %4137, i64 8
  %tbl_size_ptr.i.i203.i4090 = getelementptr i8, ptr %4137, i64 16
  %offset_tbl_ptr.i.i204.i4091 = getelementptr i8, ptr %4137, i64 40
  %hash_coef.i.i205.i4092 = load i64, ptr %hash_coef_ptr.i.i202.i4089, align 4
  %tbl_size.i.i206.i4093 = load i64, ptr %tbl_size_ptr.i.i203.i4090, align 4
  %offset_tbl.i.i207.i4094 = load ptr, ptr %offset_tbl_ptr.i.i204.i4091, align 8
  %product.i.i.i208.i4095 = mul i64 %hash_coef.i.i205.i4092, -5261542750394134544
  %shifted.i.i.i209.i4096 = lshr i64 %product.i.i.i208.i4095, 32
  %xored.i.i.i210.i4097 = xor i64 %shifted.i.i.i209.i4096, %product.i.i.i208.i4095
  %hash.i.i.i211.i4098 = and i64 %xored.i.i.i210.i4097, %tbl_size.i.i206.i4093
  %offset_ptr.i.i212.i4099 = getelementptr i32, ptr %offset_tbl.i.i207.i4094, i64 %hash.i.i.i211.i4098
  %offset.i.i213.i4100 = load i32, ptr %offset_ptr.i.i212.i4099, align 4
  %eq.i216.i4101 = icmp eq i32 %4143, %offset.i.i213.i4100
  call void @llvm.assume(i1 %eq.i216.i4101) #30
  store ptr @_parameterization_Ptri32, ptr %91, align 8
  %4145 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %91)
  %4146 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4137)
  %4147 = sext i32 %4143 to i64
  %4148 = getelementptr ptr, ptr %4137, i64 %4147
  %4149 = getelementptr i8, ptr %4148, i64 120
  %4150 = load ptr, ptr %4149, align 8
  store ptr @i32_typ, ptr %92, align 8
  %4151 = call ptr %4150({ ptr, ptr, ptr, i32 } %4144, ptr nonnull %92)
  %4152 = call { ptr, i160 } %4151({ ptr, ptr, ptr, i32 } %4144, { ptr, ptr, ptr, i32 } %4144, ptr nonnull %91, i32 %4135)
  %.fca.0.extract87.i4102 = extractvalue { ptr, i160 } %4152, 0
  %.sroa.3.0.insert.ext.i4103 = zext i32 %offset.i.i260.i41524390 to i160
  %.sroa.3.0.insert.shift.i4104 = shl nuw i160 %.sroa.3.0.insert.ext.i4103, 128
  %.sroa.2.0.insert.ext.i4105 = zext i64 %4026 to i160
  %.sroa.2.0.insert.shift.i4106 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i4105, 64
  %.sroa.2.0.insert.insert.i4107 = or disjoint i160 %.sroa.2.0.insert.shift.i4106, %.sroa.3.0.insert.shift.i4104
  %.sroa.0.0.insert.ext.i4108 = zext i64 %4025 to i160
  %.sroa.0.0.insert.insert.i4109 = or disjoint i160 %.sroa.2.0.insert.insert.i4107, %.sroa.0.0.insert.ext.i4108
  %4153 = insertvalue { ptr, i160 } %4022, i160 %.sroa.0.0.insert.insert.i4109, 1
  %4154 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4155 = load ptr, ptr %356, align 8
  %4156 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4155, 0
  %4157 = load ptr, ptr %357, align 8
  %4158 = insertvalue { ptr, ptr, ptr, i32 } %4156, ptr %4157, 1
  %4159 = load ptr, ptr %358, align 8
  %4160 = insertvalue { ptr, ptr, ptr, i32 } %4158, ptr %4159, 2
  %4161 = load i32, ptr %359, align 4
  %4162 = insertvalue { ptr, ptr, ptr, i32 } %4160, i32 %4161, 3
  %hash_coef_ptr.i.i218.i4114 = getelementptr i8, ptr %4155, i64 8
  %tbl_size_ptr.i.i219.i4115 = getelementptr i8, ptr %4155, i64 16
  %offset_tbl_ptr.i.i220.i4116 = getelementptr i8, ptr %4155, i64 40
  %hash_coef.i.i221.i4117 = load i64, ptr %hash_coef_ptr.i.i218.i4114, align 4
  %tbl_size.i.i222.i4118 = load i64, ptr %tbl_size_ptr.i.i219.i4115, align 4
  %offset_tbl.i.i223.i4119 = load ptr, ptr %offset_tbl_ptr.i.i220.i4116, align 8
  %product.i.i.i224.i4120 = mul i64 %hash_coef.i.i221.i4117, -5261542750394134544
  %shifted.i.i.i225.i4121 = lshr i64 %product.i.i.i224.i4120, 32
  %xored.i.i.i226.i4122 = xor i64 %shifted.i.i.i225.i4121, %product.i.i.i224.i4120
  %hash.i.i.i227.i4123 = and i64 %xored.i.i.i226.i4122, %tbl_size.i.i222.i4118
  %offset_ptr.i.i228.i4124 = getelementptr i32, ptr %offset_tbl.i.i223.i4119, i64 %hash.i.i.i227.i4123
  %offset.i.i229.i4125 = load i32, ptr %offset_ptr.i.i228.i4124, align 4
  %eq.i232.i4126 = icmp eq i32 %4161, %offset.i.i229.i4125
  call void @llvm.assume(i1 %eq.i232.i4126) #30
  %4163 = load ptr, ptr %result.i151, align 8
  %4164 = load ptr, ptr %322, align 8
  %result.i233.i4127 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %4165 = getelementptr i8, ptr %result.i233.i4127, i64 16
  store ptr %4164, ptr %4165, align 8
  %4166 = getelementptr i8, ptr %result.i233.i4127, i64 8
  store ptr %4163, ptr %4166, align 8
  %4167 = getelementptr i8, ptr %result.i233.i4127, i64 24
  store ptr null, ptr %4167, align 8
  %4168 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i233.i4127)
  store ptr @Entry, ptr %result.i233.i4127, align 8
  store ptr @_parameterization_Ptri32, ptr %93, align 8
  store ptr %result.i233.i4127, ptr %470, align 8
  %4169 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %93)
  %4170 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4155)
  %4171 = sext i32 %4161 to i64
  %4172 = getelementptr ptr, ptr %4155, i64 %4171
  %4173 = getelementptr i8, ptr %4172, i64 128
  %4174 = load ptr, ptr %4173, align 8
  store ptr @i32_typ, ptr %94, align 8
  store ptr %.fca.0.extract11.i3251, ptr %471, align 8
  %4175 = call ptr %4174({ ptr, ptr, ptr, i32 } %4162, ptr nonnull %94)
  call void %4175({ ptr, ptr, ptr, i32 } %4162, { ptr, ptr, ptr, i32 } %4162, ptr nonnull %93, i32 %4135, { ptr, i160 } %4153)
  %4176 = icmp ne ptr %.fca.0.extract87.i4102, @nil_typ
  %4177 = icmp ne ptr %.fca.0.extract87.i4102, null
  %.not138.i4128 = and i1 %4176, %4177
  br i1 %.not138.i4128, label %.cont.cont.i4135, label %4186

.cont.cont.i4135:                                 ; preds = %4098, %4036
  %.sink4412 = phi { ptr, i160 } [ %4072, %4036 ], [ %4152, %4098 ]
  %4178 = phi i32 [ 2, %4036 ], [ 1, %4098 ]
  %vptr.i248.sroa.speculated.i4138 = phi ptr [ %.fca.0.extract112.i4170, %4036 ], [ %.fca.0.extract87.i4102, %4098 ]
  %.fca.1.extract89.i4131 = extractvalue { ptr, i160 } %.sink4412, 1
  %.sroa.3407.sroa.4.0.extract.shift.i4132 = lshr i160 %.fca.1.extract89.i4131, 64
  %4179 = trunc i160 %.sroa.3407.sroa.4.0.extract.shift.i4132 to i64
  %4180 = insertelement <2 x i64> poison, i64 %4179, i64 0
  %4181 = trunc i160 %.fca.1.extract89.i4131 to i64
  %4182 = insertelement <2 x i64> %4180, i64 %4181, i64 1
  %hash_coef_ptr.i.i249.i4141 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i4138, i64 8
  %tbl_size_ptr.i.i250.i4142 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i4138, i64 16
  %offset_tbl_ptr.i.i251.i4143 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i4138, i64 40
  %hash_coef.i.i252.i4144 = load i64, ptr %hash_coef_ptr.i.i249.i4141, align 4
  %tbl_size.i.i253.i4145 = load i64, ptr %tbl_size_ptr.i.i250.i4142, align 4
  %offset_tbl.i.i254.i4146 = load ptr, ptr %offset_tbl_ptr.i.i251.i4143, align 8
  %product.i.i.i255.i4147 = mul i64 %hash_coef.i.i252.i4144, 4015701072841558310
  %shifted.i.i.i256.i4148 = lshr i64 %product.i.i.i255.i4147, 32
  %xored.i.i.i257.i4149 = xor i64 %shifted.i.i.i256.i4148, %product.i.i.i255.i4147
  %hash.i.i.i258.i4150 = and i64 %xored.i.i.i257.i4149, %tbl_size.i.i253.i4145
  %offset_ptr.i.i259.i4151 = getelementptr i32, ptr %offset_tbl.i.i254.i4146, i64 %hash.i.i.i258.i4150
  %offset.i.i260.i4152 = load i32, ptr %offset_ptr.i.i259.i4151, align 4
  %4183 = add nuw nsw i32 %.reg2mem193.0677.i4084, 1
  %4184 = load i32, ptr %362, align 4
  %4185 = icmp slt i32 %4183, %4184
  br i1 %4185, label %4023, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4202

4186:                                             ; preds = %4098, %4036
  %4187 = phi ptr [ %95, %4098 ], [ %87, %4036 ]
  %4188 = phi ptr [ %96, %4098 ], [ %88, %4036 ]
  %4189 = phi ptr [ %97, %4098 ], [ %89, %4036 ]
  %4190 = phi ptr [ %.sroa.0.i4048, %4098 ], [ %.sroa.0680.i4046, %4036 ]
  %4191 = phi ptr [ %98, %4098 ], [ %90, %4036 ]
  %4192 = load i32, ptr %360, align 4
  store i32 %4192, ptr %4187, align 4
  store i32 1, ptr %4188, align 4
  %4193 = add i32 %4192, 1
  store i32 %4193, ptr %4189, align 4
  %4194 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  store i32 %4193, ptr %360, align 4
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %4191, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %4190, align 8
  br label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4202

HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4202: ; preds = %.cont.cont.i4135, %4011, %4186
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %83)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %84)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %85)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %86)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %87)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %88)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %89)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i4046)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %90)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %91)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %92)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %93)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %94)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %95)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %96)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %97)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i4048)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %98)
  br label %._crit_edge1.i3253

._crit_edge1.i3253:                               ; preds = %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4202, %4003
  %4195 = add nuw nsw i32 %.reg2mem13.079.i3250, 1
  %4196 = icmp slt i32 %4195, %3962
  br i1 %4196, label %4003, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3271

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3271: ; preds = %._crit_edge1.i3253
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %145)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %146)
  %4197 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %143)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %144)
  %invariant.gep.i3275 = getelementptr i8, ptr %3948, i64 120
  %offset_tbl.i.i24.i3277 = load ptr, ptr %offset_tbl_ptr.i.i48.i1771, align 8
  %hash_coef.i.i22.i3279 = load i64, ptr %hash_coef_ptr.i.i46.i1769, align 4
  %product.i.i.i25.i3280 = mul i64 %hash_coef.i.i22.i3279, -5261542750394134544
  %shifted.i.i.i26.i3281 = lshr i64 %product.i.i.i25.i3280, 32
  %xored.i.i.i27.i3282 = xor i64 %shifted.i.i.i26.i3281, %product.i.i.i25.i3280
  %tbl_size.i.i23.i3284 = load i64, ptr %tbl_size_ptr.i.i47.i1770, align 4
  %hash.i.i.i28.i3285 = and i64 %xored.i.i.i27.i3282, %tbl_size.i.i23.i3284
  %offset_ptr.i.i29.i3286 = getelementptr i32, ptr %offset_tbl.i.i24.i3277, i64 %hash.i.i.i28.i3285
  %offset.i.i30.i3287 = load i32, ptr %offset_ptr.i.i29.i3286, align 4
  %4198 = insertvalue { ptr, ptr, ptr, i32 } %3953, i32 %offset.i.i30.i3287, 3
  %4199 = sext i32 %offset.i.i30.i3287 to i64
  %gep.i3302 = getelementptr ptr, ptr %invariant.gep.i3275, i64 %4199
  %4200 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br label %4201

4201:                                             ; preds = %._crit_edge1.i3306, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3271
  %.reg2mem13.079.i3303 = phi i32 [ 0, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3271 ], [ %4393, %._crit_edge1.i3306 ]
  store ptr @_parameterization_Ptri32, ptr %143, align 8
  %4202 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %143)
  %4203 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %3948)
  %4204 = load ptr, ptr %gep.i3302, align 8
  store ptr @i32_typ, ptr %144, align 8
  %4205 = call ptr %4204({ ptr, ptr, ptr, i32 } %4198, ptr nonnull %144)
  %4206 = call { ptr, i160 } %4205({ ptr, ptr, ptr, i32 } %4198, { ptr, ptr, ptr, i32 } %4198, ptr nonnull %143, i32 %.reg2mem13.079.i3303)
  %.fca.0.extract11.i3304 = extractvalue { ptr, i160 } %4206, 0
  %4207 = icmp ne ptr %.fca.0.extract11.i3304, @nil_typ
  %4208 = icmp ne ptr %.fca.0.extract11.i3304, null
  %.not17.i3305 = and i1 %4207, %4208
  br i1 %.not17.i3305, label %4209, label %._crit_edge1.i3306

4209:                                             ; preds = %4201
  %hash_coef_ptr.i.i33.i3311 = getelementptr i8, ptr %.fca.0.extract11.i3304, i64 8
  %tbl_size_ptr.i.i34.i3312 = getelementptr i8, ptr %.fca.0.extract11.i3304, i64 16
  %offset_tbl_ptr.i.i35.i3313 = getelementptr i8, ptr %.fca.0.extract11.i3304, i64 40
  %4210 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %67)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %68)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %69)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %70)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %71)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %72)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %73)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0680.i4203)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %74)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %75)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %76)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %77)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %78)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %79)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %80)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %81)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i4205)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %82)
  %hash_coef.i.i147.i4225 = load i64, ptr %hash_coef_ptr.i.i33.i3311, align 4
  %tbl_size.i.i148.i4226 = load i64, ptr %tbl_size_ptr.i.i34.i3312, align 4
  %offset_tbl.i.i149.i4227 = load ptr, ptr %offset_tbl_ptr.i.i35.i3313, align 8
  %product.i.i.i150.i4228 = mul i64 %hash_coef.i.i147.i4225, 4015701072841558310
  %shifted.i.i.i151.i4229 = lshr i64 %product.i.i.i150.i4228, 32
  %xored.i.i.i152.i4230 = xor i64 %shifted.i.i.i151.i4229, %product.i.i.i150.i4228
  %hash.i.i.i153.i4231 = and i64 %xored.i.i.i152.i4230, %tbl_size.i.i148.i4226
  %offset_ptr.i.i154.i4232 = getelementptr i32, ptr %offset_tbl.i.i149.i4227, i64 %hash.i.i.i153.i4231
  %offset.i.i169.i4233 = load i32, ptr %offset_ptr.i.i154.i4232, align 4
  %4211 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4212 = load i32, ptr %362, align 4
  %4213 = icmp sgt i32 %4212, 0
  br i1 %4213, label %.lr.ph.i4239, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4359

.lr.ph.i4239:                                     ; preds = %4209
  %.fca.1.extract13.i3307 = extractvalue { ptr, i160 } %4206, 1
  %.sroa.576.8.extract.shift.i3309 = lshr i160 %.fca.1.extract13.i3307, 64
  %4214 = insertelement <2 x i160> poison, i160 %.sroa.576.8.extract.shift.i3309, i64 0
  %4215 = insertelement <2 x i160> %4214, i160 %.fca.1.extract13.i3307, i64 1
  %4216 = trunc <2 x i160> %4215 to <2 x i64>
  %4217 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11.i3304, 0
  %4218 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4219 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract11.i3304)
  %invariant.gep4391 = getelementptr i8, ptr %.fca.0.extract11.i3304, i64 64
  %4220 = insertvalue { ptr, i160 } undef, ptr %.fca.0.extract11.i3304, 0
  br label %4221

4221:                                             ; preds = %.cont.cont.i4292, %.lr.ph.i4239
  %offset.i.i260.i43094398 = phi i32 [ %offset.i.i169.i4233, %.lr.ph.i4239 ], [ %offset.i.i260.i4309, %.cont.cont.i4292 ]
  %.reg2mem195.0678.i4240 = phi i32 [ 1, %.lr.ph.i4239 ], [ %4376, %.cont.cont.i4292 ]
  %.reg2mem193.0677.i4241 = phi i32 [ 0, %.lr.ph.i4239 ], [ %4381, %.cont.cont.i4292 ]
  %4222 = phi <2 x i64> [ %4216, %.lr.ph.i4239 ], [ %4380, %.cont.cont.i4292 ]
  %4223 = extractelement <2 x i64> %4222, i64 1
  %.sroa.speculated352.i42964394 = inttoptr i64 %4223 to ptr
  %4224 = extractelement <2 x i64> %4222, i64 0
  %.sroa.speculated346.i42974396 = inttoptr i64 %4224 to ptr
  %4225 = insertvalue { ptr, ptr, ptr, i32 } %4217, ptr %.sroa.speculated352.i42964394, 1
  %4226 = insertvalue { ptr, ptr, ptr, i32 } %4225, ptr %.sroa.speculated346.i42974396, 2
  %4227 = insertvalue { ptr, ptr, ptr, i32 } %4226, i32 %offset.i.i260.i43094398, 3
  %4228 = sext i32 %offset.i.i260.i43094398 to i64
  %gep4392 = getelementptr ptr, ptr %invariant.gep4391, i64 %4228
  %4229 = load ptr, ptr %gep4392, align 8
  %4230 = call ptr %4229({ ptr, ptr, ptr, i32 } %4227, ptr nonnull %2)
  %4231 = call i32 %4230({ ptr, ptr, ptr, i32 } %4227, { ptr, ptr, ptr, i32 } %4227, ptr nonnull %2)
  %4232 = icmp eq i32 %.reg2mem195.0678.i4240, 1
  %4233 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  br i1 %4232, label %4234, label %4296

4234:                                             ; preds = %4221
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %4235 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4236 = load ptr, ptr %339, align 8
  %4237 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4236, 0
  %4238 = load ptr, ptr %340, align 8
  %4239 = insertvalue { ptr, ptr, ptr, i32 } %4237, ptr %4238, 1
  %4240 = load ptr, ptr %341, align 8
  %4241 = insertvalue { ptr, ptr, ptr, i32 } %4239, ptr %4240, 2
  %4242 = load i32, ptr %342, align 4
  %4243 = insertvalue { ptr, ptr, ptr, i32 } %4241, i32 %4242, 3
  %hash_coef_ptr.i.i10.i5248 = getelementptr i8, ptr %4236, i64 8
  %tbl_size_ptr.i.i11.i5249 = getelementptr i8, ptr %4236, i64 16
  %offset_tbl_ptr.i.i12.i5250 = getelementptr i8, ptr %4236, i64 40
  %hash_coef.i.i13.i5251 = load i64, ptr %hash_coef_ptr.i.i10.i5248, align 4
  %tbl_size.i.i14.i5252 = load i64, ptr %tbl_size_ptr.i.i11.i5249, align 4
  %offset_tbl.i.i15.i5253 = load ptr, ptr %offset_tbl_ptr.i.i12.i5250, align 8
  %product.i.i.i16.i5254 = mul i64 %hash_coef.i.i13.i5251, -5261542750394134544
  %shifted.i.i.i17.i5255 = lshr i64 %product.i.i.i16.i5254, 32
  %xored.i.i.i18.i5256 = xor i64 %shifted.i.i.i17.i5255, %product.i.i.i16.i5254
  %hash.i.i.i19.i5257 = and i64 %xored.i.i.i18.i5256, %tbl_size.i.i14.i5252
  %offset_ptr.i.i20.i5258 = getelementptr i32, ptr %offset_tbl.i.i15.i5253, i64 %hash.i.i.i19.i5257
  %offset.i.i21.i5259 = load i32, ptr %offset_ptr.i.i20.i5258, align 4
  %eq.i.i5260 = icmp eq i32 %4242, %offset.i.i21.i5259
  call void @llvm.assume(i1 %eq.i.i5260) #30
  %4244 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4245 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4236)
  %4246 = sext i32 %4242 to i64
  %4247 = getelementptr ptr, ptr %4236, i64 %4246
  %4248 = getelementptr i8, ptr %4247, i64 64
  %4249 = load ptr, ptr %4248, align 8
  %4250 = call ptr %4249({ ptr, ptr, ptr, i32 } %4243, ptr nonnull %2)
  %4251 = call i32 %4250({ ptr, ptr, ptr, i32 } %4243, { ptr, ptr, ptr, i32 } %4243, ptr nonnull %2)
  %4252 = add i32 %4251, -1
  %4253 = and i32 %4252, %4231
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %4254 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4255 = load ptr, ptr %339, align 8
  %4256 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4255, 0
  %4257 = load ptr, ptr %340, align 8
  %4258 = insertvalue { ptr, ptr, ptr, i32 } %4256, ptr %4257, 1
  %4259 = load ptr, ptr %341, align 8
  %4260 = insertvalue { ptr, ptr, ptr, i32 } %4258, ptr %4259, 2
  %4261 = load i32, ptr %342, align 4
  %4262 = insertvalue { ptr, ptr, ptr, i32 } %4260, i32 %4261, 3
  %hash_coef_ptr.i.i172.i4314 = getelementptr i8, ptr %4255, i64 8
  %tbl_size_ptr.i.i173.i4315 = getelementptr i8, ptr %4255, i64 16
  %offset_tbl_ptr.i.i174.i4316 = getelementptr i8, ptr %4255, i64 40
  %hash_coef.i.i175.i4317 = load i64, ptr %hash_coef_ptr.i.i172.i4314, align 4
  %tbl_size.i.i176.i4318 = load i64, ptr %tbl_size_ptr.i.i173.i4315, align 4
  %offset_tbl.i.i177.i4319 = load ptr, ptr %offset_tbl_ptr.i.i174.i4316, align 8
  %product.i.i.i178.i4320 = mul i64 %hash_coef.i.i175.i4317, -5261542750394134544
  %shifted.i.i.i179.i4321 = lshr i64 %product.i.i.i178.i4320, 32
  %xored.i.i.i180.i4322 = xor i64 %shifted.i.i.i179.i4321, %product.i.i.i178.i4320
  %hash.i.i.i181.i4323 = and i64 %xored.i.i.i180.i4322, %tbl_size.i.i176.i4318
  %offset_ptr.i.i182.i4324 = getelementptr i32, ptr %offset_tbl.i.i177.i4319, i64 %hash.i.i.i181.i4323
  %offset.i.i183.i4325 = load i32, ptr %offset_ptr.i.i182.i4324, align 4
  %eq.i.i4326 = icmp eq i32 %4261, %offset.i.i183.i4325
  call void @llvm.assume(i1 %eq.i.i4326) #30
  store ptr @_parameterization_Ptri32, ptr %67, align 8
  %4263 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %67)
  %4264 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4255)
  %4265 = sext i32 %4261 to i64
  %4266 = getelementptr ptr, ptr %4255, i64 %4265
  %4267 = getelementptr i8, ptr %4266, i64 120
  %4268 = load ptr, ptr %4267, align 8
  store ptr @i32_typ, ptr %68, align 8
  %4269 = call ptr %4268({ ptr, ptr, ptr, i32 } %4262, ptr nonnull %68)
  %4270 = call { ptr, i160 } %4269({ ptr, ptr, ptr, i32 } %4262, { ptr, ptr, ptr, i32 } %4262, ptr nonnull %67, i32 %4253)
  %.fca.0.extract112.i4327 = extractvalue { ptr, i160 } %4270, 0
  %.sroa.3111.0.insert.ext.i4328 = zext i32 %offset.i.i260.i43094398 to i160
  %.sroa.3111.0.insert.shift.i4329 = shl nuw i160 %.sroa.3111.0.insert.ext.i4328, 128
  %.sroa.2110.0.insert.ext.i4330 = zext i64 %4224 to i160
  %.sroa.2110.0.insert.shift.i4331 = shl nuw nsw i160 %.sroa.2110.0.insert.ext.i4330, 64
  %.sroa.2110.0.insert.insert.i4332 = or disjoint i160 %.sroa.2110.0.insert.shift.i4331, %.sroa.3111.0.insert.shift.i4329
  %.sroa.0109.0.insert.ext.i4333 = zext i64 %4223 to i160
  %.sroa.0109.0.insert.insert.i4334 = or disjoint i160 %.sroa.2110.0.insert.insert.i4332, %.sroa.0109.0.insert.ext.i4333
  %4271 = insertvalue { ptr, i160 } %4220, i160 %.sroa.0109.0.insert.insert.i4334, 1
  %4272 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4273 = load ptr, ptr %339, align 8
  %4274 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4273, 0
  %4275 = load ptr, ptr %340, align 8
  %4276 = insertvalue { ptr, ptr, ptr, i32 } %4274, ptr %4275, 1
  %4277 = load ptr, ptr %341, align 8
  %4278 = insertvalue { ptr, ptr, ptr, i32 } %4276, ptr %4277, 2
  %4279 = load i32, ptr %342, align 4
  %4280 = insertvalue { ptr, ptr, ptr, i32 } %4278, i32 %4279, 3
  %hash_coef_ptr.i.i186.i4339 = getelementptr i8, ptr %4273, i64 8
  %tbl_size_ptr.i.i187.i4340 = getelementptr i8, ptr %4273, i64 16
  %offset_tbl_ptr.i.i188.i4341 = getelementptr i8, ptr %4273, i64 40
  %hash_coef.i.i189.i4342 = load i64, ptr %hash_coef_ptr.i.i186.i4339, align 4
  %tbl_size.i.i190.i4343 = load i64, ptr %tbl_size_ptr.i.i187.i4340, align 4
  %offset_tbl.i.i191.i4344 = load ptr, ptr %offset_tbl_ptr.i.i188.i4341, align 8
  %product.i.i.i192.i4345 = mul i64 %hash_coef.i.i189.i4342, -5261542750394134544
  %shifted.i.i.i193.i4346 = lshr i64 %product.i.i.i192.i4345, 32
  %xored.i.i.i194.i4347 = xor i64 %shifted.i.i.i193.i4346, %product.i.i.i192.i4345
  %hash.i.i.i195.i4348 = and i64 %xored.i.i.i194.i4347, %tbl_size.i.i190.i4343
  %offset_ptr.i.i196.i4349 = getelementptr i32, ptr %offset_tbl.i.i191.i4344, i64 %hash.i.i.i195.i4348
  %offset.i.i197.i4350 = load i32, ptr %offset_ptr.i.i196.i4349, align 4
  %eq.i200.i4351 = icmp eq i32 %4279, %offset.i.i197.i4350
  call void @llvm.assume(i1 %eq.i200.i4351) #30
  %4281 = load ptr, ptr %result.i151, align 8
  %4282 = load ptr, ptr %322, align 8
  %result.i.i4352 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %4283 = getelementptr i8, ptr %result.i.i4352, i64 16
  store ptr %4282, ptr %4283, align 8
  %4284 = getelementptr i8, ptr %result.i.i4352, i64 8
  store ptr %4281, ptr %4284, align 8
  %4285 = getelementptr i8, ptr %result.i.i4352, i64 24
  store ptr null, ptr %4285, align 8
  %4286 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i.i4352)
  store ptr @Entry, ptr %result.i.i4352, align 8
  store ptr @_parameterization_Ptri32, ptr %69, align 8
  store ptr %result.i.i4352, ptr %476, align 8
  %4287 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %69)
  %4288 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4273)
  %4289 = sext i32 %4279 to i64
  %4290 = getelementptr ptr, ptr %4273, i64 %4289
  %4291 = getelementptr i8, ptr %4290, i64 128
  %4292 = load ptr, ptr %4291, align 8
  store ptr @i32_typ, ptr %70, align 8
  store ptr %.fca.0.extract11.i3304, ptr %477, align 8
  %4293 = call ptr %4292({ ptr, ptr, ptr, i32 } %4280, ptr nonnull %70)
  call void %4293({ ptr, ptr, ptr, i32 } %4280, { ptr, ptr, ptr, i32 } %4280, ptr nonnull %69, i32 %4253, { ptr, i160 } %4271)
  %4294 = icmp ne ptr %.fca.0.extract112.i4327, @nil_typ
  %4295 = icmp ne ptr %.fca.0.extract112.i4327, null
  %.not140.i4353 = and i1 %4294, %4295
  br i1 %.not140.i4353, label %.cont.cont.i4292, label %4384

4296:                                             ; preds = %4221
  %4297 = add i32 %4231, 2127912214
  %4298 = shl i32 %4231, 12
  %4299 = add i32 %4297, %4298
  %4300 = ashr i32 %4299, 19
  %4301 = xor i32 %4299, %4300
  %4302 = xor i32 %4301, -949894596
  %4303 = add i32 %4302, 374761393
  %4304 = shl i32 %4302, 5
  %4305 = add i32 %4303, %4304
  %4306 = add i32 %4305, -744332180
  %4307 = shl i32 %4305, 9
  %4308 = xor i32 %4306, %4307
  %4309 = add i32 %4308, -42973499
  %4310 = shl i32 %4308, 3
  %4311 = add i32 %4309, %4310
  %4312 = ashr i32 %4311, 16
  %4313 = xor i32 %4311, %4312
  %4314 = xor i32 %4313, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %4315 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4316 = load ptr, ptr %356, align 8
  %4317 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4316, 0
  %4318 = load ptr, ptr %357, align 8
  %4319 = insertvalue { ptr, ptr, ptr, i32 } %4317, ptr %4318, 1
  %4320 = load ptr, ptr %358, align 8
  %4321 = insertvalue { ptr, ptr, ptr, i32 } %4319, ptr %4320, 2
  %4322 = load i32, ptr %359, align 4
  %4323 = insertvalue { ptr, ptr, ptr, i32 } %4321, i32 %4322, 3
  %hash_coef_ptr.i.i10.i5278 = getelementptr i8, ptr %4316, i64 8
  %tbl_size_ptr.i.i11.i5279 = getelementptr i8, ptr %4316, i64 16
  %offset_tbl_ptr.i.i12.i5280 = getelementptr i8, ptr %4316, i64 40
  %hash_coef.i.i13.i5281 = load i64, ptr %hash_coef_ptr.i.i10.i5278, align 4
  %tbl_size.i.i14.i5282 = load i64, ptr %tbl_size_ptr.i.i11.i5279, align 4
  %offset_tbl.i.i15.i5283 = load ptr, ptr %offset_tbl_ptr.i.i12.i5280, align 8
  %product.i.i.i16.i5284 = mul i64 %hash_coef.i.i13.i5281, -5261542750394134544
  %shifted.i.i.i17.i5285 = lshr i64 %product.i.i.i16.i5284, 32
  %xored.i.i.i18.i5286 = xor i64 %shifted.i.i.i17.i5285, %product.i.i.i16.i5284
  %hash.i.i.i19.i5287 = and i64 %xored.i.i.i18.i5286, %tbl_size.i.i14.i5282
  %offset_ptr.i.i20.i5288 = getelementptr i32, ptr %offset_tbl.i.i15.i5283, i64 %hash.i.i.i19.i5287
  %offset.i.i21.i5289 = load i32, ptr %offset_ptr.i.i20.i5288, align 4
  %eq.i.i5290 = icmp eq i32 %4322, %offset.i.i21.i5289
  call void @llvm.assume(i1 %eq.i.i5290) #30
  %4324 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4325 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4316)
  %4326 = sext i32 %4322 to i64
  %4327 = getelementptr ptr, ptr %4316, i64 %4326
  %4328 = getelementptr i8, ptr %4327, i64 64
  %4329 = load ptr, ptr %4328, align 8
  %4330 = call ptr %4329({ ptr, ptr, ptr, i32 } %4323, ptr nonnull %2)
  %4331 = call i32 %4330({ ptr, ptr, ptr, i32 } %4323, { ptr, ptr, ptr, i32 } %4323, ptr nonnull %2)
  %4332 = add i32 %4331, -1
  %4333 = and i32 %4332, %4314
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %4334 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4335 = load ptr, ptr %356, align 8
  %4336 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4335, 0
  %4337 = load ptr, ptr %357, align 8
  %4338 = insertvalue { ptr, ptr, ptr, i32 } %4336, ptr %4337, 1
  %4339 = load ptr, ptr %358, align 8
  %4340 = insertvalue { ptr, ptr, ptr, i32 } %4338, ptr %4339, 2
  %4341 = load i32, ptr %359, align 4
  %4342 = insertvalue { ptr, ptr, ptr, i32 } %4340, i32 %4341, 3
  %hash_coef_ptr.i.i202.i4246 = getelementptr i8, ptr %4335, i64 8
  %tbl_size_ptr.i.i203.i4247 = getelementptr i8, ptr %4335, i64 16
  %offset_tbl_ptr.i.i204.i4248 = getelementptr i8, ptr %4335, i64 40
  %hash_coef.i.i205.i4249 = load i64, ptr %hash_coef_ptr.i.i202.i4246, align 4
  %tbl_size.i.i206.i4250 = load i64, ptr %tbl_size_ptr.i.i203.i4247, align 4
  %offset_tbl.i.i207.i4251 = load ptr, ptr %offset_tbl_ptr.i.i204.i4248, align 8
  %product.i.i.i208.i4252 = mul i64 %hash_coef.i.i205.i4249, -5261542750394134544
  %shifted.i.i.i209.i4253 = lshr i64 %product.i.i.i208.i4252, 32
  %xored.i.i.i210.i4254 = xor i64 %shifted.i.i.i209.i4253, %product.i.i.i208.i4252
  %hash.i.i.i211.i4255 = and i64 %xored.i.i.i210.i4254, %tbl_size.i.i206.i4250
  %offset_ptr.i.i212.i4256 = getelementptr i32, ptr %offset_tbl.i.i207.i4251, i64 %hash.i.i.i211.i4255
  %offset.i.i213.i4257 = load i32, ptr %offset_ptr.i.i212.i4256, align 4
  %eq.i216.i4258 = icmp eq i32 %4341, %offset.i.i213.i4257
  call void @llvm.assume(i1 %eq.i216.i4258) #30
  store ptr @_parameterization_Ptri32, ptr %75, align 8
  %4343 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %75)
  %4344 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4335)
  %4345 = sext i32 %4341 to i64
  %4346 = getelementptr ptr, ptr %4335, i64 %4345
  %4347 = getelementptr i8, ptr %4346, i64 120
  %4348 = load ptr, ptr %4347, align 8
  store ptr @i32_typ, ptr %76, align 8
  %4349 = call ptr %4348({ ptr, ptr, ptr, i32 } %4342, ptr nonnull %76)
  %4350 = call { ptr, i160 } %4349({ ptr, ptr, ptr, i32 } %4342, { ptr, ptr, ptr, i32 } %4342, ptr nonnull %75, i32 %4333)
  %.fca.0.extract87.i4259 = extractvalue { ptr, i160 } %4350, 0
  %.sroa.3.0.insert.ext.i4260 = zext i32 %offset.i.i260.i43094398 to i160
  %.sroa.3.0.insert.shift.i4261 = shl nuw i160 %.sroa.3.0.insert.ext.i4260, 128
  %.sroa.2.0.insert.ext.i4262 = zext i64 %4224 to i160
  %.sroa.2.0.insert.shift.i4263 = shl nuw nsw i160 %.sroa.2.0.insert.ext.i4262, 64
  %.sroa.2.0.insert.insert.i4264 = or disjoint i160 %.sroa.2.0.insert.shift.i4263, %.sroa.3.0.insert.shift.i4261
  %.sroa.0.0.insert.ext.i4265 = zext i64 %4223 to i160
  %.sroa.0.0.insert.insert.i4266 = or disjoint i160 %.sroa.2.0.insert.insert.i4264, %.sroa.0.0.insert.ext.i4265
  %4351 = insertvalue { ptr, i160 } %4220, i160 %.sroa.0.0.insert.insert.i4266, 1
  %4352 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4353 = load ptr, ptr %356, align 8
  %4354 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4353, 0
  %4355 = load ptr, ptr %357, align 8
  %4356 = insertvalue { ptr, ptr, ptr, i32 } %4354, ptr %4355, 1
  %4357 = load ptr, ptr %358, align 8
  %4358 = insertvalue { ptr, ptr, ptr, i32 } %4356, ptr %4357, 2
  %4359 = load i32, ptr %359, align 4
  %4360 = insertvalue { ptr, ptr, ptr, i32 } %4358, i32 %4359, 3
  %hash_coef_ptr.i.i218.i4271 = getelementptr i8, ptr %4353, i64 8
  %tbl_size_ptr.i.i219.i4272 = getelementptr i8, ptr %4353, i64 16
  %offset_tbl_ptr.i.i220.i4273 = getelementptr i8, ptr %4353, i64 40
  %hash_coef.i.i221.i4274 = load i64, ptr %hash_coef_ptr.i.i218.i4271, align 4
  %tbl_size.i.i222.i4275 = load i64, ptr %tbl_size_ptr.i.i219.i4272, align 4
  %offset_tbl.i.i223.i4276 = load ptr, ptr %offset_tbl_ptr.i.i220.i4273, align 8
  %product.i.i.i224.i4277 = mul i64 %hash_coef.i.i221.i4274, -5261542750394134544
  %shifted.i.i.i225.i4278 = lshr i64 %product.i.i.i224.i4277, 32
  %xored.i.i.i226.i4279 = xor i64 %shifted.i.i.i225.i4278, %product.i.i.i224.i4277
  %hash.i.i.i227.i4280 = and i64 %xored.i.i.i226.i4279, %tbl_size.i.i222.i4275
  %offset_ptr.i.i228.i4281 = getelementptr i32, ptr %offset_tbl.i.i223.i4276, i64 %hash.i.i.i227.i4280
  %offset.i.i229.i4282 = load i32, ptr %offset_ptr.i.i228.i4281, align 4
  %eq.i232.i4283 = icmp eq i32 %4359, %offset.i.i229.i4282
  call void @llvm.assume(i1 %eq.i232.i4283) #30
  %4361 = load ptr, ptr %result.i151, align 8
  %4362 = load ptr, ptr %322, align 8
  %result.i233.i4284 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %4363 = getelementptr i8, ptr %result.i233.i4284, i64 16
  store ptr %4362, ptr %4363, align 8
  %4364 = getelementptr i8, ptr %result.i233.i4284, i64 8
  store ptr %4361, ptr %4364, align 8
  %4365 = getelementptr i8, ptr %result.i233.i4284, i64 24
  store ptr null, ptr %4365, align 8
  %4366 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i233.i4284)
  store ptr @Entry, ptr %result.i233.i4284, align 8
  store ptr @_parameterization_Ptri32, ptr %77, align 8
  store ptr %result.i233.i4284, ptr %474, align 8
  %4367 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %77)
  %4368 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4353)
  %4369 = sext i32 %4359 to i64
  %4370 = getelementptr ptr, ptr %4353, i64 %4369
  %4371 = getelementptr i8, ptr %4370, i64 128
  %4372 = load ptr, ptr %4371, align 8
  store ptr @i32_typ, ptr %78, align 8
  store ptr %.fca.0.extract11.i3304, ptr %475, align 8
  %4373 = call ptr %4372({ ptr, ptr, ptr, i32 } %4360, ptr nonnull %78)
  call void %4373({ ptr, ptr, ptr, i32 } %4360, { ptr, ptr, ptr, i32 } %4360, ptr nonnull %77, i32 %4333, { ptr, i160 } %4351)
  %4374 = icmp ne ptr %.fca.0.extract87.i4259, @nil_typ
  %4375 = icmp ne ptr %.fca.0.extract87.i4259, null
  %.not138.i4285 = and i1 %4374, %4375
  br i1 %.not138.i4285, label %.cont.cont.i4292, label %4384

.cont.cont.i4292:                                 ; preds = %4296, %4234
  %.sink4414 = phi { ptr, i160 } [ %4270, %4234 ], [ %4350, %4296 ]
  %4376 = phi i32 [ 2, %4234 ], [ 1, %4296 ]
  %vptr.i248.sroa.speculated.i4295 = phi ptr [ %.fca.0.extract112.i4327, %4234 ], [ %.fca.0.extract87.i4259, %4296 ]
  %.fca.1.extract89.i4288 = extractvalue { ptr, i160 } %.sink4414, 1
  %.sroa.3407.sroa.4.0.extract.shift.i4289 = lshr i160 %.fca.1.extract89.i4288, 64
  %4377 = trunc i160 %.sroa.3407.sroa.4.0.extract.shift.i4289 to i64
  %4378 = insertelement <2 x i64> poison, i64 %4377, i64 0
  %4379 = trunc i160 %.fca.1.extract89.i4288 to i64
  %4380 = insertelement <2 x i64> %4378, i64 %4379, i64 1
  %hash_coef_ptr.i.i249.i4298 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i4295, i64 8
  %tbl_size_ptr.i.i250.i4299 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i4295, i64 16
  %offset_tbl_ptr.i.i251.i4300 = getelementptr i8, ptr %vptr.i248.sroa.speculated.i4295, i64 40
  %hash_coef.i.i252.i4301 = load i64, ptr %hash_coef_ptr.i.i249.i4298, align 4
  %tbl_size.i.i253.i4302 = load i64, ptr %tbl_size_ptr.i.i250.i4299, align 4
  %offset_tbl.i.i254.i4303 = load ptr, ptr %offset_tbl_ptr.i.i251.i4300, align 8
  %product.i.i.i255.i4304 = mul i64 %hash_coef.i.i252.i4301, 4015701072841558310
  %shifted.i.i.i256.i4305 = lshr i64 %product.i.i.i255.i4304, 32
  %xored.i.i.i257.i4306 = xor i64 %shifted.i.i.i256.i4305, %product.i.i.i255.i4304
  %hash.i.i.i258.i4307 = and i64 %xored.i.i.i257.i4306, %tbl_size.i.i253.i4302
  %offset_ptr.i.i259.i4308 = getelementptr i32, ptr %offset_tbl.i.i254.i4303, i64 %hash.i.i.i258.i4307
  %offset.i.i260.i4309 = load i32, ptr %offset_ptr.i.i259.i4308, align 4
  %4381 = add nuw nsw i32 %.reg2mem193.0677.i4241, 1
  %4382 = load i32, ptr %362, align 4
  %4383 = icmp slt i32 %4381, %4382
  br i1 %4383, label %4221, label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4359

4384:                                             ; preds = %4296, %4234
  %4385 = phi ptr [ %79, %4296 ], [ %71, %4234 ]
  %4386 = phi ptr [ %80, %4296 ], [ %72, %4234 ]
  %4387 = phi ptr [ %81, %4296 ], [ %73, %4234 ]
  %4388 = phi ptr [ %.sroa.0.i4205, %4296 ], [ %.sroa.0680.i4203, %4234 ]
  %4389 = phi ptr [ %82, %4296 ], [ %74, %4234 ]
  %4390 = load i32, ptr %360, align 4
  store i32 %4390, ptr %4385, align 4
  store i32 1, ptr %4386, align 4
  %4391 = add i32 %4390, 1
  store i32 %4391, ptr %4387, align 4
  %4392 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  store i32 %4391, ptr %360, align 4
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %4389, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %4388, align 8
  br label %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4359

HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4359: ; preds = %.cont.cont.i4292, %4209, %4384
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %67)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %68)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %69)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %70)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %71)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %72)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %73)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0680.i4203)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %74)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %75)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %76)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %77)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %78)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %79)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %80)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %81)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i4205)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %82)
  br label %._crit_edge1.i3306

._crit_edge1.i3306:                               ; preds = %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit4359, %4201
  %4393 = add nuw nsw i32 %.reg2mem13.079.i3303, 1
  %4394 = icmp slt i32 %4393, %3962
  br i1 %4394, label %4201, label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3324

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3324.critedge: ; preds = %._crit_edge3.1.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %145)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %146)
  %4395 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %143)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %144)
  br label %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3324

HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3324: ; preds = %._crit_edge1.i3306, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3324.critedge
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %143)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %144)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %194)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %195)
  br label %HashMap_insert_keyK_valueV.exit

HashMap_insert_keyK_valueV.exit:                  ; preds = %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit1733.thread, %HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V.exit.thread, %.thread525.i, %.thread528.i, %HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32.exit3324
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %256)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %257)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %258)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %259)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %260)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %261)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %262)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %263)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %264)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %265)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %266)
  %4396 = add nsw i32 %.reg2mem137.0441, 1
  br label %4397

4397:                                             ; preds = %HashMap_insert_keyK_valueV.exit, %HashMap_get_keyK.exit
  %_parameterization_Ptri1627 = phi ptr [ @_parameterization_Ptri1, %HashMap_insert_keyK_valueV.exit ], [ %_parameterization_Ptri1, %HashMap_get_keyK.exit ]
  %_parameterization_Ptri32625 = phi ptr [ @_parameterization_Ptri32, %HashMap_insert_keyK_valueV.exit ], [ %_parameterization_Ptri32624, %HashMap_get_keyK.exit ]
  %.reg2mem133.0 = phi i32 [ %4396, %HashMap_insert_keyK_valueV.exit ], [ %.reg2mem137.0441, %HashMap_get_keyK.exit ]
  %4398 = add nuw nsw i32 %.reg2mem135.0440, 1
  %4399 = icmp slt i32 %.reg2mem133.0, %0
  %4400 = icmp slt i32 %4398, %363
  %4401 = and i1 %4400, %4399
  br i1 %4401, label %494, label %._crit_edge443.loopexit

._crit_edge443.loopexit:                          ; preds = %4397
  store ptr %_parameterization_Ptri32625, ptr %367, align 8
  store ptr %_parameterization_Ptri1627, ptr %368, align 8
  %4402 = call i32 @llvm.smin.i32(i32 %.reg2mem133.0, i32 %0)
  br i1 %4399, label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit213, label %._crit_edge

._crit_edge443:                                   ; preds = %1
  %4403 = call i32 @llvm.smin.i32(i32 %0, i32 0)
  br i1 %364, label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit213, label %._crit_edge.thread

._crit_edge.thread:                               ; preds = %._crit_edge443
  %4404 = call i64 @clock()
  br label %._crit_edge._crit_edge

IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit213: ; preds = %._crit_edge443.loopexit, %._crit_edge443
  %4405 = phi i32 [ %4402, %._crit_edge443.loopexit ], [ %4403, %._crit_edge443 ]
  %.reg2mem137.0.lcssa629 = phi i32 [ %.reg2mem133.0, %._crit_edge443.loopexit ], [ 0, %._crit_edge443 ]
  %result.i174 = call noalias dereferenceable_or_null(30) ptr @bump_malloc_inner(i64 noundef 30, ptr nonnull @current_ptr) #29
  store <29 x i8> <i8 87, i8 97, i8 114, i8 110, i8 105, i8 110, i8 103, i8 58, i8 32, i8 67, i8 111, i8 117, i8 108, i8 100, i8 32, i8 111, i8 110, i8 108, i8 121, i8 32, i8 103, i8 101, i8 110, i8 101, i8 114, i8 97, i8 116, i8 101, i8 32>, ptr %result.i174, align 32
  %result.i175 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %4406 = getelementptr inbounds i8, ptr %273, i64 8
  %4407 = getelementptr inbounds i8, ptr %273, i64 24
  store ptr @String, ptr %273, align 8
  store ptr %result.i175, ptr %4406, align 8
  store i32 9, ptr %4407, align 8
  %4408 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %273)
  store ptr %result.i174, ptr %result.i175, align 8
  %4409 = getelementptr i8, ptr %result.i175, i64 8
  store i32 29, ptr %4409, align 4
  %4410 = getelementptr i8, ptr %result.i175, i64 12
  store i32 30, ptr %4410, align 4
  %4411 = load i160, ptr %4406, align 8
  %4412 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %.sroa.3.8.extract.trunc.i = trunc i160 %4411 to i64
  %4413 = inttoptr i64 %.sroa.3.8.extract.trunc.i to ptr
  %4414 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4415 = getelementptr i8, ptr %4413, i64 8
  %4416 = load i32, ptr %4415, align 4
  %4417 = add i32 %4416, 1
  %4418 = sext i32 %4417 to i64
  %result.i.i1858 = call noalias ptr @bump_malloc_inner(i64 noundef %4418, ptr nonnull @current_ptr) #29
  %4419 = load i32, ptr %4415, align 4
  %4420 = icmp sgt i32 %4419, 0
  br i1 %4420, label %.lr.ph.i1859, label %String_c_string_.exit

.lr.ph.i1859:                                     ; preds = %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit213
  %4421 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %4422 = load ptr, ptr %4413, align 8
  %4423 = zext nneg i32 %4419 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i1858, ptr align 1 %4422, i64 %4423, i1 false)
  br label %String_c_string_.exit

String_c_string_.exit:                            ; preds = %.lr.ph.i1859, %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit213
  %4424 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %4425 = sext i32 %4419 to i64
  %4426 = getelementptr i8, ptr %result.i.i1858, i64 %4425
  store i8 0, ptr %4426, align 1
  %puts.i = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i1858)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %4427 = call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i32_string, i32 %.reg2mem137.0.lcssa629)
  %result.i194 = call noalias dereferenceable_or_null(30) ptr @bump_malloc_inner(i64 noundef 30, ptr nonnull @current_ptr) #29
  store <29 x i8> <i8 32, i8 117, i8 110, i8 105, i8 113, i8 117, i8 101, i8 32, i8 107, i8 101, i8 121, i8 115, i8 32, i8 102, i8 111, i8 114, i8 32, i8 114, i8 101, i8 109, i8 111, i8 118, i8 101, i8 32, i8 116, i8 101, i8 115, i8 116, i8 46>, ptr %result.i194, align 32
  %result.i195 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %4428 = getelementptr inbounds i8, ptr %274, i64 8
  %4429 = getelementptr inbounds i8, ptr %274, i64 24
  store ptr @String, ptr %274, align 8
  store ptr %result.i195, ptr %4428, align 8
  store i32 9, ptr %4429, align 8
  %4430 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %274)
  store ptr %result.i194, ptr %result.i195, align 8
  %4431 = getelementptr i8, ptr %result.i195, i64 8
  store i32 29, ptr %4431, align 4
  %4432 = getelementptr i8, ptr %result.i195, i64 12
  store i32 30, ptr %4432, align 4
  %4433 = load i160, ptr %4428, align 8
  %4434 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %.sroa.3.8.extract.trunc.i758 = trunc i160 %4433 to i64
  %4435 = inttoptr i64 %.sroa.3.8.extract.trunc.i758 to ptr
  %4436 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4437 = getelementptr i8, ptr %4435, i64 8
  %4438 = load i32, ptr %4437, align 4
  %4439 = add i32 %4438, 1
  %4440 = sext i32 %4439 to i64
  %result.i.i1875 = call noalias ptr @bump_malloc_inner(i64 noundef %4440, ptr nonnull @current_ptr) #29
  %4441 = load i32, ptr %4437, align 4
  %4442 = icmp sgt i32 %4441, 0
  br i1 %4442, label %.lr.ph.i1876, label %String_c_string_.exit1880

.lr.ph.i1876:                                     ; preds = %String_c_string_.exit
  %4443 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %4444 = load ptr, ptr %4435, align 8
  %4445 = zext nneg i32 %4441 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i1875, ptr align 1 %4444, i64 %4445, i1 false)
  br label %String_c_string_.exit1880

String_c_string_.exit1880:                        ; preds = %.lr.ph.i1876, %String_c_string_.exit
  %4446 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %4447 = sext i32 %4441 to i64
  %4448 = getelementptr i8, ptr %result.i.i1875, i64 %4447
  store i8 0, ptr %4448, align 1
  %puts.i774 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i1875)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge443.loopexit, %String_c_string_.exit1880
  %4449 = phi i32 [ %4402, %._crit_edge443.loopexit ], [ %4405, %String_c_string_.exit1880 ]
  %4450 = call i64 @clock()
  %4451 = icmp sgt i32 %4449, 0
  br i1 %4451, label %.lr.ph451, label %._crit_edge._crit_edge

.lr.ph451:                                        ; preds = %._crit_edge
  %4452 = getelementptr inbounds i8, ptr %276, i64 8
  %4453 = getelementptr inbounds i8, ptr %276, i64 24
  %4454 = getelementptr inbounds i8, ptr %275, i64 8
  %4455 = getelementptr inbounds i8, ptr %275, i64 24
  %4456 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %4457 = load ptr, ptr %321, align 8
  %invariant.gep = getelementptr i8, ptr %4457, i64 8
  %4458 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4459 = getelementptr inbounds i8, ptr %241, i64 8
  %4460 = getelementptr inbounds i8, ptr %242, i64 8
  %4461 = getelementptr inbounds i8, ptr %237, i64 8
  %4462 = getelementptr inbounds i8, ptr %238, i64 8
  %4463 = getelementptr i8, ptr %result.i, i64 40
  %4464 = getelementptr i8, ptr %result.i, i64 72
  %4465 = getelementptr i8, ptr %result.i, i64 88
  br label %4466

4466:                                             ; preds = %.lr.ph451, %4726
  %.reg2mem123.0450 = phi i32 [ 0, %.lr.ph451 ], [ %.reg2mem117.0, %4726 ]
  %.reg2mem121.0449 = phi i1 [ true, %.lr.ph451 ], [ %.reg2mem115.0, %4726 ]
  %.reg2mem119.0448 = phi i32 [ 0, %.lr.ph451 ], [ %4727, %4726 ]
  %4467 = zext nneg i32 %.reg2mem119.0448 to i64
  %4468 = shl nuw nsw i64 %4467, 5
  %gep = getelementptr i8, ptr %invariant.gep, i64 %4468
  %4469 = load i160, ptr %gep, align 4
  %.sroa.064.0.insert.ext = and i160 %4469, 4294967295
  %4470 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.064.0.insert.ext, 1
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %237)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %238)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %239)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %240)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %241)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %242)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %243)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %244)
  %4471 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4472 = load ptr, ptr %287, align 8
  %4473 = call i32 %4472({ ptr, i160 } %4470)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %4474 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4475 = load ptr, ptr %299, align 8
  %4476 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4475, 0
  %4477 = load ptr, ptr %300, align 8
  %4478 = insertvalue { ptr, ptr, ptr, i32 } %4476, ptr %4477, 1
  %4479 = load ptr, ptr %4463, align 8
  %4480 = insertvalue { ptr, ptr, ptr, i32 } %4478, ptr %4479, 2
  %4481 = load i32, ptr %301, align 4
  %4482 = insertvalue { ptr, ptr, ptr, i32 } %4480, i32 %4481, 3
  %hash_coef_ptr.i.i10.i2762 = getelementptr i8, ptr %4475, i64 8
  %tbl_size_ptr.i.i11.i2763 = getelementptr i8, ptr %4475, i64 16
  %offset_tbl_ptr.i.i12.i2764 = getelementptr i8, ptr %4475, i64 40
  %hash_coef.i.i13.i2765 = load i64, ptr %hash_coef_ptr.i.i10.i2762, align 4
  %tbl_size.i.i14.i2766 = load i64, ptr %tbl_size_ptr.i.i11.i2763, align 4
  %offset_tbl.i.i15.i2767 = load ptr, ptr %offset_tbl_ptr.i.i12.i2764, align 8
  %product.i.i.i16.i2768 = mul i64 %hash_coef.i.i13.i2765, -5261542750394134544
  %shifted.i.i.i17.i2769 = lshr i64 %product.i.i.i16.i2768, 32
  %xored.i.i.i18.i2770 = xor i64 %shifted.i.i.i17.i2769, %product.i.i.i16.i2768
  %hash.i.i.i19.i2771 = and i64 %xored.i.i.i18.i2770, %tbl_size.i.i14.i2766
  %offset_ptr.i.i20.i2772 = getelementptr i32, ptr %offset_tbl.i.i15.i2767, i64 %hash.i.i.i19.i2771
  %offset.i.i21.i2773 = load i32, ptr %offset_ptr.i.i20.i2772, align 4
  %eq.i.i2774 = icmp eq i32 %4481, %offset.i.i21.i2773
  call void @llvm.assume(i1 %eq.i.i2774) #30
  %4483 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4484 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4475)
  %4485 = sext i32 %4481 to i64
  %4486 = getelementptr ptr, ptr %4475, i64 %4485
  %4487 = getelementptr i8, ptr %4486, i64 64
  %4488 = load ptr, ptr %4487, align 8
  %4489 = call ptr %4488({ ptr, ptr, ptr, i32 } %4482, ptr nonnull %2)
  %4490 = call i32 %4489({ ptr, ptr, ptr, i32 } %4482, { ptr, ptr, ptr, i32 } %4482, ptr nonnull %2)
  %4491 = add i32 %4490, -1
  %4492 = and i32 %4491, %4473
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %4493 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4494 = load ptr, ptr %299, align 8
  %4495 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4494, 0
  %4496 = load ptr, ptr %300, align 8
  %4497 = insertvalue { ptr, ptr, ptr, i32 } %4495, ptr %4496, 1
  %4498 = load ptr, ptr %4463, align 8
  %4499 = insertvalue { ptr, ptr, ptr, i32 } %4497, ptr %4498, 2
  %4500 = load i32, ptr %301, align 4
  %4501 = insertvalue { ptr, ptr, ptr, i32 } %4499, i32 %4500, 3
  %hash_coef_ptr.i.i137.i = getelementptr i8, ptr %4494, i64 8
  %tbl_size_ptr.i.i138.i = getelementptr i8, ptr %4494, i64 16
  %offset_tbl_ptr.i.i139.i = getelementptr i8, ptr %4494, i64 40
  %hash_coef.i.i140.i = load i64, ptr %hash_coef_ptr.i.i137.i, align 4
  %tbl_size.i.i141.i = load i64, ptr %tbl_size_ptr.i.i138.i, align 4
  %offset_tbl.i.i142.i = load ptr, ptr %offset_tbl_ptr.i.i139.i, align 8
  %product.i.i.i143.i = mul i64 %hash_coef.i.i140.i, -5261542750394134544
  %shifted.i.i.i144.i = lshr i64 %product.i.i.i143.i, 32
  %xored.i.i.i145.i = xor i64 %shifted.i.i.i144.i, %product.i.i.i143.i
  %hash.i.i.i146.i = and i64 %xored.i.i.i145.i, %tbl_size.i.i141.i
  %offset_ptr.i.i147.i = getelementptr i32, ptr %offset_tbl.i.i142.i, i64 %hash.i.i.i146.i
  %offset.i.i148.i = load i32, ptr %offset_ptr.i.i147.i, align 4
  %eq.i.i1131 = icmp eq i32 %4500, %offset.i.i148.i
  call void @llvm.assume(i1 %eq.i.i1131) #30
  store ptr @_parameterization_Ptri32, ptr %243, align 8
  %4502 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %243)
  %4503 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4494)
  %4504 = sext i32 %4500 to i64
  %4505 = getelementptr ptr, ptr %4494, i64 %4504
  %4506 = getelementptr i8, ptr %4505, i64 120
  %4507 = load ptr, ptr %4506, align 8
  store ptr @i32_typ, ptr %244, align 8
  %4508 = call ptr %4507({ ptr, ptr, ptr, i32 } %4501, ptr nonnull %244)
  %4509 = call { ptr, i160 } %4508({ ptr, ptr, ptr, i32 } %4501, { ptr, ptr, ptr, i32 } %4501, ptr nonnull %243, i32 %4492)
  %.fca.0.extract.i1132 = extractvalue { ptr, i160 } %4509, 0
  %4510 = icmp ne ptr %.fca.0.extract.i1132, @nil_typ
  %4511 = icmp ne ptr %.fca.0.extract.i1132, null
  %.not133.i = and i1 %4510, %4511
  br i1 %.not133.i, label %4512, label %4564

4512:                                             ; preds = %4466
  %.fca.1.extract.i1136 = extractvalue { ptr, i160 } %4509, 1
  %.sroa.5352.8.extract.trunc.i = trunc i160 %.fca.1.extract.i1136 to i64
  %4513 = inttoptr i64 %.sroa.5352.8.extract.trunc.i to ptr
  %.sroa.9355.8.extract.shift.i = lshr i160 %.fca.1.extract.i1136, 64
  %.sroa.9355.8.extract.trunc.i = trunc i160 %.sroa.9355.8.extract.shift.i to i64
  %4514 = inttoptr i64 %.sroa.9355.8.extract.trunc.i to ptr
  %hash_coef_ptr.i.i151.i = getelementptr i8, ptr %.fca.0.extract.i1132, i64 8
  %tbl_size_ptr.i.i152.i = getelementptr i8, ptr %.fca.0.extract.i1132, i64 16
  %offset_tbl_ptr.i.i153.i = getelementptr i8, ptr %.fca.0.extract.i1132, i64 40
  %hash_coef.i.i154.i = load i64, ptr %hash_coef_ptr.i.i151.i, align 4
  %tbl_size.i.i155.i = load i64, ptr %tbl_size_ptr.i.i152.i, align 4
  %offset_tbl.i.i156.i = load ptr, ptr %offset_tbl_ptr.i.i153.i, align 8
  %product.i.i.i157.i = mul i64 %hash_coef.i.i154.i, 4015701072841558310
  %shifted.i.i.i158.i = lshr i64 %product.i.i.i157.i, 32
  %xored.i.i.i159.i = xor i64 %shifted.i.i.i158.i, %product.i.i.i157.i
  %hash.i.i.i160.i = and i64 %xored.i.i.i159.i, %tbl_size.i.i155.i
  %offset_ptr.i.i161.i = getelementptr i32, ptr %offset_tbl.i.i156.i, i64 %hash.i.i.i160.i
  %offset.i.i162.i = load i32, ptr %offset_ptr.i.i161.i, align 4
  %4515 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract.i1132, 0
  %4516 = insertvalue { ptr, ptr, ptr, i32 } %4515, ptr %4513, 1
  %4517 = insertvalue { ptr, ptr, ptr, i32 } %4516, ptr %4514, 2
  %4518 = insertvalue { ptr, ptr, ptr, i32 } %4517, i32 %offset.i.i162.i, 3
  %4519 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4520 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4521 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract.i1132)
  %4522 = sext i32 %offset.i.i162.i to i64
  %4523 = getelementptr ptr, ptr %.fca.0.extract.i1132, i64 %4522
  %4524 = getelementptr i8, ptr %4523, i64 64
  %4525 = load ptr, ptr %4524, align 8
  %4526 = call ptr %4525({ ptr, ptr, ptr, i32 } %4518, ptr nonnull %2)
  %4527 = call i32 %4526({ ptr, ptr, ptr, i32 } %4518, { ptr, ptr, ptr, i32 } %4518, ptr nonnull %2)
  %4528 = icmp eq i32 %4527, %4473
  %4529 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4530 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4531 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract.i1132)
  %4532 = getelementptr i8, ptr %4523, i64 48
  %4533 = load ptr, ptr %4532, align 8
  %4534 = call ptr %4533({ ptr, ptr, ptr, i32 } %4518, ptr nonnull %2)
  %4535 = call { ptr, i160 } %4534({ ptr, ptr, ptr, i32 } %4518, { ptr, ptr, ptr, i32 } %4518, ptr nonnull %2)
  %4536 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4537 = load ptr, ptr %288, align 8
  %4538 = call i1 %4537({ ptr, i160 } %4535, { ptr, i160 } %4470)
  %4539 = and i1 %4528, %4538
  br i1 %4539, label %4540, label %4564

4540:                                             ; preds = %4512
  %4541 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4542 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4543 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract.i1132)
  %4544 = getelementptr i8, ptr %4523, i64 56
  %4545 = load ptr, ptr %4544, align 8
  %4546 = call ptr %4545({ ptr, ptr, ptr, i32 } %4518, ptr nonnull %2)
  %4547 = call { ptr, i160 } %4546({ ptr, ptr, ptr, i32 } %4518, { ptr, ptr, ptr, i32 } %4518, ptr nonnull %2)
  %4548 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4549 = load ptr, ptr %299, align 8
  %4550 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4549, 0
  %4551 = load ptr, ptr %300, align 8
  %4552 = insertvalue { ptr, ptr, ptr, i32 } %4550, ptr %4551, 1
  %4553 = load ptr, ptr %4463, align 8
  %4554 = insertvalue { ptr, ptr, ptr, i32 } %4552, ptr %4553, 2
  %4555 = load i32, ptr %301, align 4
  %4556 = insertvalue { ptr, ptr, ptr, i32 } %4554, i32 %4555, 3
  %hash_coef_ptr.i.i165.i = getelementptr i8, ptr %4549, i64 8
  %tbl_size_ptr.i.i166.i = getelementptr i8, ptr %4549, i64 16
  %offset_tbl_ptr.i.i167.i = getelementptr i8, ptr %4549, i64 40
  %hash_coef.i.i168.i = load i64, ptr %hash_coef_ptr.i.i165.i, align 4
  %tbl_size.i.i169.i = load i64, ptr %tbl_size_ptr.i.i166.i, align 4
  %offset_tbl.i.i170.i = load ptr, ptr %offset_tbl_ptr.i.i167.i, align 8
  %product.i.i.i171.i = mul i64 %hash_coef.i.i168.i, -5261542750394134544
  %shifted.i.i.i172.i = lshr i64 %product.i.i.i171.i, 32
  %xored.i.i.i173.i = xor i64 %shifted.i.i.i172.i, %product.i.i.i171.i
  %hash.i.i.i174.i = and i64 %xored.i.i.i173.i, %tbl_size.i.i169.i
  %offset_ptr.i.i175.i = getelementptr i32, ptr %offset_tbl.i.i170.i, i64 %hash.i.i.i174.i
  %offset.i.i176.i = load i32, ptr %offset_ptr.i.i175.i, align 4
  %eq.i179.i = icmp eq i32 %4555, %offset.i.i176.i
  call void @llvm.assume(i1 %eq.i179.i) #30
  store ptr @_parameterization_Ptri32, ptr %237, align 8
  store ptr @_parameterization_Nil, ptr %4461, align 8
  %4557 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %237)
  %4558 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4549)
  %4559 = sext i32 %4555 to i64
  %4560 = getelementptr ptr, ptr %4549, i64 %4559
  %4561 = getelementptr i8, ptr %4560, i64 128
  %4562 = load ptr, ptr %4561, align 8
  store ptr @i32_typ, ptr %238, align 8
  store ptr @nil_typ, ptr %4462, align 8
  %4563 = call ptr %4562({ ptr, ptr, ptr, i32 } %4556, ptr nonnull %238)
  call void %4563({ ptr, ptr, ptr, i32 } %4556, { ptr, ptr, ptr, i32 } %4556, ptr nonnull %237, i32 %4492, { ptr, i160 } { ptr @nil_typ, i160 undef })
  br label %HashMap_remove_keyK.exit

4564:                                             ; preds = %4512, %4466
  %4565 = add i32 %4473, 2127912214
  %4566 = shl i32 %4473, 12
  %4567 = add i32 %4565, %4566
  %4568 = ashr i32 %4567, 19
  %4569 = xor i32 %4567, %4568
  %4570 = xor i32 %4569, -949894596
  %4571 = add i32 %4570, 374761393
  %4572 = shl i32 %4570, 5
  %4573 = add i32 %4571, %4572
  %4574 = add i32 %4573, -744332180
  %4575 = shl i32 %4573, 9
  %4576 = xor i32 %4574, %4575
  %4577 = add i32 %4576, -42973499
  %4578 = shl i32 %4576, 3
  %4579 = add i32 %4577, %4578
  %4580 = ashr i32 %4579, 16
  %4581 = xor i32 %4579, %4580
  %4582 = xor i32 %4581, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %4583 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4584 = load ptr, ptr %312, align 8
  %4585 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4584, 0
  %4586 = load ptr, ptr %313, align 8
  %4587 = insertvalue { ptr, ptr, ptr, i32 } %4585, ptr %4586, 1
  %4588 = load ptr, ptr %4464, align 8
  %4589 = insertvalue { ptr, ptr, ptr, i32 } %4587, ptr %4588, 2
  %4590 = load i32, ptr %314, align 4
  %4591 = insertvalue { ptr, ptr, ptr, i32 } %4589, i32 %4590, 3
  %hash_coef_ptr.i.i10.i2793 = getelementptr i8, ptr %4584, i64 8
  %tbl_size_ptr.i.i11.i2794 = getelementptr i8, ptr %4584, i64 16
  %offset_tbl_ptr.i.i12.i2795 = getelementptr i8, ptr %4584, i64 40
  %hash_coef.i.i13.i2796 = load i64, ptr %hash_coef_ptr.i.i10.i2793, align 4
  %tbl_size.i.i14.i2797 = load i64, ptr %tbl_size_ptr.i.i11.i2794, align 4
  %offset_tbl.i.i15.i2798 = load ptr, ptr %offset_tbl_ptr.i.i12.i2795, align 8
  %product.i.i.i16.i2799 = mul i64 %hash_coef.i.i13.i2796, -5261542750394134544
  %shifted.i.i.i17.i2800 = lshr i64 %product.i.i.i16.i2799, 32
  %xored.i.i.i18.i2801 = xor i64 %shifted.i.i.i17.i2800, %product.i.i.i16.i2799
  %hash.i.i.i19.i2802 = and i64 %xored.i.i.i18.i2801, %tbl_size.i.i14.i2797
  %offset_ptr.i.i20.i2803 = getelementptr i32, ptr %offset_tbl.i.i15.i2798, i64 %hash.i.i.i19.i2802
  %offset.i.i21.i2804 = load i32, ptr %offset_ptr.i.i20.i2803, align 4
  %eq.i.i2805 = icmp eq i32 %4590, %offset.i.i21.i2804
  call void @llvm.assume(i1 %eq.i.i2805) #30
  %4592 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4593 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4584)
  %4594 = sext i32 %4590 to i64
  %4595 = getelementptr ptr, ptr %4584, i64 %4594
  %4596 = getelementptr i8, ptr %4595, i64 64
  %4597 = load ptr, ptr %4596, align 8
  %4598 = call ptr %4597({ ptr, ptr, ptr, i32 } %4591, ptr nonnull %2)
  %4599 = call i32 %4598({ ptr, ptr, ptr, i32 } %4591, { ptr, ptr, ptr, i32 } %4591, ptr nonnull %2)
  %4600 = add i32 %4599, -1
  %4601 = and i32 %4600, %4582
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %4602 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4603 = load ptr, ptr %312, align 8
  %4604 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4603, 0
  %4605 = load ptr, ptr %313, align 8
  %4606 = insertvalue { ptr, ptr, ptr, i32 } %4604, ptr %4605, 1
  %4607 = load ptr, ptr %4464, align 8
  %4608 = insertvalue { ptr, ptr, ptr, i32 } %4606, ptr %4607, 2
  %4609 = load i32, ptr %314, align 4
  %4610 = insertvalue { ptr, ptr, ptr, i32 } %4608, i32 %4609, 3
  %hash_coef_ptr.i.i181.i = getelementptr i8, ptr %4603, i64 8
  %tbl_size_ptr.i.i182.i = getelementptr i8, ptr %4603, i64 16
  %offset_tbl_ptr.i.i183.i = getelementptr i8, ptr %4603, i64 40
  %hash_coef.i.i184.i = load i64, ptr %hash_coef_ptr.i.i181.i, align 4
  %tbl_size.i.i185.i = load i64, ptr %tbl_size_ptr.i.i182.i, align 4
  %offset_tbl.i.i186.i = load ptr, ptr %offset_tbl_ptr.i.i183.i, align 8
  %product.i.i.i187.i = mul i64 %hash_coef.i.i184.i, -5261542750394134544
  %shifted.i.i.i188.i = lshr i64 %product.i.i.i187.i, 32
  %xored.i.i.i189.i = xor i64 %shifted.i.i.i188.i, %product.i.i.i187.i
  %hash.i.i.i190.i = and i64 %xored.i.i.i189.i, %tbl_size.i.i185.i
  %offset_ptr.i.i191.i = getelementptr i32, ptr %offset_tbl.i.i186.i, i64 %hash.i.i.i190.i
  %offset.i.i192.i = load i32, ptr %offset_ptr.i.i191.i, align 4
  %eq.i195.i = icmp eq i32 %4609, %offset.i.i192.i
  call void @llvm.assume(i1 %eq.i195.i) #30
  store ptr @_parameterization_Ptri32, ptr %239, align 8
  %4611 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %239)
  %4612 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4603)
  %4613 = sext i32 %4609 to i64
  %4614 = getelementptr ptr, ptr %4603, i64 %4613
  %4615 = getelementptr i8, ptr %4614, i64 120
  %4616 = load ptr, ptr %4615, align 8
  store ptr @i32_typ, ptr %240, align 8
  %4617 = call ptr %4616({ ptr, ptr, ptr, i32 } %4610, ptr nonnull %240)
  %4618 = call { ptr, i160 } %4617({ ptr, ptr, ptr, i32 } %4610, { ptr, ptr, ptr, i32 } %4610, ptr nonnull %239, i32 %4601)
  %.fca.0.extract84.i = extractvalue { ptr, i160 } %4618, 0
  %4619 = icmp ne ptr %.fca.0.extract84.i, @nil_typ
  %4620 = icmp ne ptr %.fca.0.extract84.i, null
  %.not135.i = and i1 %4619, %4620
  br i1 %.not135.i, label %4621, label %HashMap_remove_keyK.exit.thread

4621:                                             ; preds = %4564
  %.fca.1.extract86.i = extractvalue { ptr, i160 } %4618, 1
  %.sroa.5.8.extract.trunc.i1133 = trunc i160 %.fca.1.extract86.i to i64
  %4622 = inttoptr i64 %.sroa.5.8.extract.trunc.i1133 to ptr
  %.sroa.9.8.extract.shift.i1134 = lshr i160 %.fca.1.extract86.i, 64
  %.sroa.9.8.extract.trunc.i1135 = trunc i160 %.sroa.9.8.extract.shift.i1134 to i64
  %4623 = inttoptr i64 %.sroa.9.8.extract.trunc.i1135 to ptr
  %hash_coef_ptr.i.i197.i = getelementptr i8, ptr %.fca.0.extract84.i, i64 8
  %tbl_size_ptr.i.i198.i = getelementptr i8, ptr %.fca.0.extract84.i, i64 16
  %offset_tbl_ptr.i.i199.i = getelementptr i8, ptr %.fca.0.extract84.i, i64 40
  %hash_coef.i.i200.i = load i64, ptr %hash_coef_ptr.i.i197.i, align 4
  %tbl_size.i.i201.i = load i64, ptr %tbl_size_ptr.i.i198.i, align 4
  %offset_tbl.i.i202.i = load ptr, ptr %offset_tbl_ptr.i.i199.i, align 8
  %product.i.i.i203.i = mul i64 %hash_coef.i.i200.i, 4015701072841558310
  %shifted.i.i.i204.i = lshr i64 %product.i.i.i203.i, 32
  %xored.i.i.i205.i = xor i64 %shifted.i.i.i204.i, %product.i.i.i203.i
  %hash.i.i.i206.i = and i64 %xored.i.i.i205.i, %tbl_size.i.i201.i
  %offset_ptr.i.i207.i = getelementptr i32, ptr %offset_tbl.i.i202.i, i64 %hash.i.i.i206.i
  %offset.i.i208.i = load i32, ptr %offset_ptr.i.i207.i, align 4
  %4624 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract84.i, 0
  %4625 = insertvalue { ptr, ptr, ptr, i32 } %4624, ptr %4622, 1
  %4626 = insertvalue { ptr, ptr, ptr, i32 } %4625, ptr %4623, 2
  %4627 = insertvalue { ptr, ptr, ptr, i32 } %4626, i32 %offset.i.i208.i, 3
  %4628 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4629 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4630 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract84.i)
  %4631 = sext i32 %offset.i.i208.i to i64
  %4632 = getelementptr ptr, ptr %.fca.0.extract84.i, i64 %4631
  %4633 = getelementptr i8, ptr %4632, i64 64
  %4634 = load ptr, ptr %4633, align 8
  %4635 = call ptr %4634({ ptr, ptr, ptr, i32 } %4627, ptr nonnull %2)
  %4636 = call i32 %4635({ ptr, ptr, ptr, i32 } %4627, { ptr, ptr, ptr, i32 } %4627, ptr nonnull %2)
  %4637 = icmp eq i32 %4636, %4473
  %4638 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4639 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4640 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract84.i)
  %4641 = getelementptr i8, ptr %4632, i64 48
  %4642 = load ptr, ptr %4641, align 8
  %4643 = call ptr %4642({ ptr, ptr, ptr, i32 } %4627, ptr nonnull %2)
  %4644 = call { ptr, i160 } %4643({ ptr, ptr, ptr, i32 } %4627, { ptr, ptr, ptr, i32 } %4627, ptr nonnull %2)
  %4645 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4646 = load ptr, ptr %288, align 8
  %4647 = call i1 %4646({ ptr, i160 } %4644, { ptr, i160 } %4470)
  %4648 = and i1 %4637, %4647
  br i1 %4648, label %4649, label %HashMap_remove_keyK.exit.thread

4649:                                             ; preds = %4621
  %4650 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4651 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4652 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract84.i)
  %4653 = getelementptr i8, ptr %4632, i64 56
  %4654 = load ptr, ptr %4653, align 8
  %4655 = call ptr %4654({ ptr, ptr, ptr, i32 } %4627, ptr nonnull %2)
  %4656 = call { ptr, i160 } %4655({ ptr, ptr, ptr, i32 } %4627, { ptr, ptr, ptr, i32 } %4627, ptr nonnull %2)
  %4657 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4658 = load ptr, ptr %312, align 8
  %4659 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4658, 0
  %4660 = load ptr, ptr %313, align 8
  %4661 = insertvalue { ptr, ptr, ptr, i32 } %4659, ptr %4660, 1
  %4662 = load ptr, ptr %4464, align 8
  %4663 = insertvalue { ptr, ptr, ptr, i32 } %4661, ptr %4662, 2
  %4664 = load i32, ptr %314, align 4
  %4665 = insertvalue { ptr, ptr, ptr, i32 } %4663, i32 %4664, 3
  %hash_coef_ptr.i.i211.i = getelementptr i8, ptr %4658, i64 8
  %tbl_size_ptr.i.i212.i = getelementptr i8, ptr %4658, i64 16
  %offset_tbl_ptr.i.i213.i = getelementptr i8, ptr %4658, i64 40
  %hash_coef.i.i214.i = load i64, ptr %hash_coef_ptr.i.i211.i, align 4
  %tbl_size.i.i215.i = load i64, ptr %tbl_size_ptr.i.i212.i, align 4
  %offset_tbl.i.i216.i = load ptr, ptr %offset_tbl_ptr.i.i213.i, align 8
  %product.i.i.i217.i = mul i64 %hash_coef.i.i214.i, -5261542750394134544
  %shifted.i.i.i218.i = lshr i64 %product.i.i.i217.i, 32
  %xored.i.i.i219.i = xor i64 %shifted.i.i.i218.i, %product.i.i.i217.i
  %hash.i.i.i220.i = and i64 %xored.i.i.i219.i, %tbl_size.i.i215.i
  %offset_ptr.i.i221.i = getelementptr i32, ptr %offset_tbl.i.i216.i, i64 %hash.i.i.i220.i
  %offset.i.i222.i = load i32, ptr %offset_ptr.i.i221.i, align 4
  %eq.i225.i = icmp eq i32 %4664, %offset.i.i222.i
  call void @llvm.assume(i1 %eq.i225.i) #30
  store ptr @_parameterization_Ptri32, ptr %241, align 8
  store ptr @_parameterization_Nil, ptr %4459, align 8
  %4666 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %241)
  %4667 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4658)
  %4668 = sext i32 %4664 to i64
  %4669 = getelementptr ptr, ptr %4658, i64 %4668
  %4670 = getelementptr i8, ptr %4669, i64 128
  %4671 = load ptr, ptr %4670, align 8
  store ptr @i32_typ, ptr %242, align 8
  store ptr @nil_typ, ptr %4460, align 8
  %4672 = call ptr %4671({ ptr, ptr, ptr, i32 } %4665, ptr nonnull %242)
  call void %4672({ ptr, ptr, ptr, i32 } %4665, { ptr, ptr, ptr, i32 } %4665, ptr nonnull %241, i32 %4601, { ptr, i160 } { ptr @nil_typ, i160 undef })
  br label %HashMap_remove_keyK.exit

HashMap_remove_keyK.exit.thread:                  ; preds = %4621, %4564
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %237)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %238)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %239)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %240)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %241)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %242)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %243)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %244)
  br label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit289

HashMap_remove_keyK.exit:                         ; preds = %4540, %4649
  %.pn.i = phi { ptr, i160 } [ %4656, %4649 ], [ %4547, %4540 ]
  %.reg2mem34.sroa.0.0.ph.i = extractvalue { ptr, i160 } %.pn.i, 0
  %4673 = load i32, ptr %4465, align 4
  %4674 = add i32 %4673, -1
  %4675 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  store i32 %4674, ptr %4465, align 4
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %237)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %238)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %239)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %240)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %241)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %242)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %243)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %244)
  %4676 = icmp ne ptr %.reg2mem34.sroa.0.0.ph.i, @nil_typ
  %4677 = icmp ne ptr %.reg2mem34.sroa.0.0.ph.i, null
  %.not107 = and i1 %4676, %4677
  br i1 %.not107, label %4678, label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit289

4678:                                             ; preds = %HashMap_remove_keyK.exit
  %.reg2mem34.sroa.3.0.ph.i = extractvalue { ptr, i160 } %.pn.i, 1
  %.sroa.259.8.extract.trunc = trunc i160 %.reg2mem34.sroa.3.0.ph.i to i32
  %.sroa.169.8.extract.trunc = trunc i160 %4469 to i32
  %4679 = add i32 %.sroa.169.8.extract.trunc, 1
  %.not = icmp eq i32 %4679, %.sroa.259.8.extract.trunc
  %4680 = select i1 %.not, i1 %.reg2mem121.0449, i1 false
  br i1 %.not, label %._crit_edge1, label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit251

IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit251: ; preds = %4678
  %result.i214 = call noalias dereferenceable_or_null(46) ptr @bump_malloc_inner(i64 noundef 46, ptr nonnull @current_ptr) #29
  %4681 = load <45 x i8>, ptr @uzymi_Warning_Remove_returned_wrong_value_for_key_, align 64
  store <45 x i8> %4681, ptr %result.i214, align 64
  %result.i215 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  store ptr @String, ptr %275, align 8
  store ptr %result.i215, ptr %4454, align 8
  store i32 9, ptr %4455, align 8
  %4682 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %275)
  store ptr %result.i214, ptr %result.i215, align 8
  %4683 = getelementptr i8, ptr %result.i215, i64 8
  store i32 45, ptr %4683, align 4
  %4684 = getelementptr i8, ptr %result.i215, i64 12
  store i32 46, ptr %4684, align 4
  %4685 = load i160, ptr %4454, align 8
  %4686 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %.sroa.3.8.extract.trunc.i792 = trunc i160 %4685 to i64
  %4687 = inttoptr i64 %.sroa.3.8.extract.trunc.i792 to ptr
  %4688 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4689 = getelementptr i8, ptr %4687, i64 8
  %4690 = load i32, ptr %4689, align 4
  %4691 = add i32 %4690, 1
  %4692 = sext i32 %4691 to i64
  %result.i.i1895 = call noalias ptr @bump_malloc_inner(i64 noundef %4692, ptr nonnull @current_ptr) #29
  %4693 = load i32, ptr %4689, align 4
  %4694 = icmp sgt i32 %4693, 0
  br i1 %4694, label %.lr.ph.i1896, label %String_c_string_.exit1900

.lr.ph.i1896:                                     ; preds = %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit251
  %4695 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %4696 = load ptr, ptr %4687, align 8
  %4697 = zext nneg i32 %4693 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i1895, ptr align 1 %4696, i64 %4697, i1 false)
  br label %String_c_string_.exit1900

String_c_string_.exit1900:                        ; preds = %.lr.ph.i1896, %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit251
  %4698 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %4699 = sext i32 %4693 to i64
  %4700 = getelementptr i8, ptr %result.i.i1895, i64 %4699
  store i8 0, ptr %4700, align 1
  %puts.i808 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i1895)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %4701 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %4702 = call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i32_string, i32 %.sroa.169.8.extract.trunc)
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %4678, %String_c_string_.exit1900
  %4703 = add i32 %.reg2mem123.0450, 1
  br label %4726

IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit289: ; preds = %HashMap_remove_keyK.exit.thread, %HashMap_remove_keyK.exit
  %result.i252 = call noalias dereferenceable_or_null(38) ptr @bump_malloc_inner(i64 noundef 38, ptr nonnull @current_ptr) #29
  %4704 = load <37 x i8>, ptr @cshax_Warning_Remove_returned_Nil_for_key_, align 64
  store <37 x i8> %4704, ptr %result.i252, align 64
  %result.i253 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  store ptr @String, ptr %276, align 8
  store ptr %result.i253, ptr %4452, align 8
  store i32 9, ptr %4453, align 8
  %4705 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %276)
  store ptr %result.i252, ptr %result.i253, align 8
  %4706 = getelementptr i8, ptr %result.i253, i64 8
  store i32 37, ptr %4706, align 4
  %4707 = getelementptr i8, ptr %result.i253, i64 12
  store i32 38, ptr %4707, align 4
  %4708 = load i160, ptr %4452, align 8
  %4709 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %.sroa.3.8.extract.trunc.i813 = trunc i160 %4708 to i64
  %4710 = inttoptr i64 %.sroa.3.8.extract.trunc.i813 to ptr
  %4711 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4712 = getelementptr i8, ptr %4710, i64 8
  %4713 = load i32, ptr %4712, align 4
  %4714 = add i32 %4713, 1
  %4715 = sext i32 %4714 to i64
  %result.i.i1915 = call noalias ptr @bump_malloc_inner(i64 noundef %4715, ptr nonnull @current_ptr) #29
  %4716 = load i32, ptr %4712, align 4
  %4717 = icmp sgt i32 %4716, 0
  br i1 %4717, label %.lr.ph.i1916, label %String_c_string_.exit1920

.lr.ph.i1916:                                     ; preds = %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit289
  %4718 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %4719 = load ptr, ptr %4710, align 8
  %4720 = zext nneg i32 %4716 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i1915, ptr align 1 %4719, i64 %4720, i1 false)
  br label %String_c_string_.exit1920

String_c_string_.exit1920:                        ; preds = %.lr.ph.i1916, %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit289
  %4721 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %4722 = sext i32 %4716 to i64
  %4723 = getelementptr i8, ptr %result.i.i1915, i64 %4722
  store i8 0, ptr %4723, align 1
  %puts.i829 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i1915)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %4724 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %.sroa.1.8.extract.trunc.i831 = trunc i160 %4469 to i32
  %4725 = call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i32_string, i32 %.sroa.1.8.extract.trunc.i831)
  br label %4726

4726:                                             ; preds = %._crit_edge1, %String_c_string_.exit1920
  %.reg2mem115.0 = phi i1 [ %4680, %._crit_edge1 ], [ false, %String_c_string_.exit1920 ]
  %.reg2mem117.0 = phi i32 [ %4703, %._crit_edge1 ], [ %.reg2mem123.0450, %String_c_string_.exit1920 ]
  %4727 = add nuw nsw i32 %.reg2mem119.0448, 1
  %4728 = icmp slt i32 %4727, %4449
  br i1 %4728, label %4466, label %._crit_edge._crit_edge

._crit_edge._crit_edge:                           ; preds = %4726, %._crit_edge.thread, %._crit_edge
  %4729 = phi i1 [ false, %._crit_edge ], [ false, %._crit_edge.thread ], [ true, %4726 ]
  %4730 = phi i64 [ %4450, %._crit_edge ], [ %4404, %._crit_edge.thread ], [ %4450, %4726 ]
  %4731 = phi i32 [ %4449, %._crit_edge ], [ %4403, %._crit_edge.thread ], [ %4449, %4726 ]
  %.reg2mem121.0.lcssa = phi i1 [ true, %._crit_edge ], [ true, %._crit_edge.thread ], [ %.reg2mem115.0, %4726 ]
  %.reg2mem123.0.lcssa = phi i32 [ 0, %._crit_edge ], [ 0, %._crit_edge.thread ], [ %.reg2mem117.0, %4726 ]
  %4732 = call i64 @clock()
  %.not108 = icmp eq i32 %.reg2mem123.0.lcssa, %4731
  %4733 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4734 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4735 = getelementptr i8, ptr %result.i, i64 88
  %4736 = load i32, ptr %4735, align 4
  %.not109 = icmp eq i32 %4736, 0
  %4737 = select i1 %.not109, i1 %.not108, i1 false
  %4738 = select i1 %4737, i1 %.reg2mem121.0.lcssa, i1 false
  br i1 %4729, label %._crit_edge2, label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit311

._crit_edge2:                                     ; preds = %._crit_edge._crit_edge
  %4739 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %4740 = load ptr, ptr %321, align 8
  %4741 = getelementptr i8, ptr %4740, i64 8
  %4742 = load i160, ptr %4741, align 4
  %.sroa.037.0.insert.ext = and i160 %4742, 4294967295
  %4743 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.037.0.insert.ext, 1
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0271.i1151)
  call void @llvm.lifetime.start.p0(i64 20, ptr nonnull %.sroa.1.i1152)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0.i1153)
  call void @llvm.lifetime.start.p0(i64 20, ptr nonnull %.sroa.2.i1154)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %233)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %234)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0123.i1155)
  call void @llvm.lifetime.start.p0(i64 20, ptr nonnull %.sroa.2124.i1156)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %.sroa.0115.i1157)
  call void @llvm.lifetime.start.p0(i64 20, ptr nonnull %.sroa.2116.i1158)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %235)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %236)
  %4744 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4745 = load ptr, ptr %287, align 8
  %4746 = call i32 %4745({ ptr, i160 } %4743)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %4747 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4748 = load ptr, ptr %299, align 8
  %4749 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4748, 0
  %4750 = load ptr, ptr %300, align 8
  %4751 = insertvalue { ptr, ptr, ptr, i32 } %4749, ptr %4750, 1
  %4752 = getelementptr i8, ptr %result.i, i64 40
  %4753 = load ptr, ptr %4752, align 8
  %4754 = insertvalue { ptr, ptr, ptr, i32 } %4751, ptr %4753, 2
  %4755 = load i32, ptr %301, align 4
  %4756 = insertvalue { ptr, ptr, ptr, i32 } %4754, i32 %4755, 3
  %hash_coef_ptr.i.i10.i2838 = getelementptr i8, ptr %4748, i64 8
  %tbl_size_ptr.i.i11.i2839 = getelementptr i8, ptr %4748, i64 16
  %offset_tbl_ptr.i.i12.i2840 = getelementptr i8, ptr %4748, i64 40
  %hash_coef.i.i13.i2841 = load i64, ptr %hash_coef_ptr.i.i10.i2838, align 4
  %tbl_size.i.i14.i2842 = load i64, ptr %tbl_size_ptr.i.i11.i2839, align 4
  %offset_tbl.i.i15.i2843 = load ptr, ptr %offset_tbl_ptr.i.i12.i2840, align 8
  %product.i.i.i16.i2844 = mul i64 %hash_coef.i.i13.i2841, -5261542750394134544
  %shifted.i.i.i17.i2845 = lshr i64 %product.i.i.i16.i2844, 32
  %xored.i.i.i18.i2846 = xor i64 %shifted.i.i.i17.i2845, %product.i.i.i16.i2844
  %hash.i.i.i19.i2847 = and i64 %xored.i.i.i18.i2846, %tbl_size.i.i14.i2842
  %offset_ptr.i.i20.i2848 = getelementptr i32, ptr %offset_tbl.i.i15.i2843, i64 %hash.i.i.i19.i2847
  %offset.i.i21.i2849 = load i32, ptr %offset_ptr.i.i20.i2848, align 4
  %eq.i.i2850 = icmp eq i32 %4755, %offset.i.i21.i2849
  call void @llvm.assume(i1 %eq.i.i2850) #30
  %4757 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4758 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4748)
  %4759 = sext i32 %4755 to i64
  %4760 = getelementptr ptr, ptr %4748, i64 %4759
  %4761 = getelementptr i8, ptr %4760, i64 64
  %4762 = load ptr, ptr %4761, align 8
  %4763 = call ptr %4762({ ptr, ptr, ptr, i32 } %4756, ptr nonnull %2)
  %4764 = call i32 %4763({ ptr, ptr, ptr, i32 } %4756, { ptr, ptr, ptr, i32 } %4756, ptr nonnull %2)
  %4765 = add i32 %4764, -1
  %4766 = and i32 %4765, %4746
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %4767 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4768 = load ptr, ptr %299, align 8
  %4769 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4768, 0
  %4770 = load ptr, ptr %300, align 8
  %4771 = insertvalue { ptr, ptr, ptr, i32 } %4769, ptr %4770, 1
  %4772 = load ptr, ptr %4752, align 8
  %4773 = insertvalue { ptr, ptr, ptr, i32 } %4771, ptr %4772, 2
  %4774 = load i32, ptr %301, align 4
  %4775 = insertvalue { ptr, ptr, ptr, i32 } %4773, i32 %4774, 3
  %hash_coef_ptr.i.i130.i1175 = getelementptr i8, ptr %4768, i64 8
  %tbl_size_ptr.i.i131.i1176 = getelementptr i8, ptr %4768, i64 16
  %offset_tbl_ptr.i.i132.i1177 = getelementptr i8, ptr %4768, i64 40
  %hash_coef.i.i133.i1178 = load i64, ptr %hash_coef_ptr.i.i130.i1175, align 4
  %tbl_size.i.i134.i1179 = load i64, ptr %tbl_size_ptr.i.i131.i1176, align 4
  %offset_tbl.i.i135.i1180 = load ptr, ptr %offset_tbl_ptr.i.i132.i1177, align 8
  %product.i.i.i136.i1181 = mul i64 %hash_coef.i.i133.i1178, -5261542750394134544
  %shifted.i.i.i137.i1182 = lshr i64 %product.i.i.i136.i1181, 32
  %xored.i.i.i138.i1183 = xor i64 %shifted.i.i.i137.i1182, %product.i.i.i136.i1181
  %hash.i.i.i139.i1184 = and i64 %xored.i.i.i138.i1183, %tbl_size.i.i134.i1179
  %offset_ptr.i.i140.i1185 = getelementptr i32, ptr %offset_tbl.i.i135.i1180, i64 %hash.i.i.i139.i1184
  %offset.i.i141.i1186 = load i32, ptr %offset_ptr.i.i140.i1185, align 4
  %eq.i.i1187 = icmp eq i32 %4774, %offset.i.i141.i1186
  call void @llvm.assume(i1 %eq.i.i1187) #30
  store ptr @_parameterization_Ptri32, ptr %235, align 8
  %4776 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %235)
  %4777 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4768)
  %4778 = sext i32 %4774 to i64
  %4779 = getelementptr ptr, ptr %4768, i64 %4778
  %4780 = getelementptr i8, ptr %4779, i64 120
  %4781 = load ptr, ptr %4780, align 8
  store ptr @i32_typ, ptr %236, align 8
  %4782 = call ptr %4781({ ptr, ptr, ptr, i32 } %4775, ptr nonnull %236)
  %4783 = call { ptr, i160 } %4782({ ptr, ptr, ptr, i32 } %4775, { ptr, ptr, ptr, i32 } %4775, ptr nonnull %235, i32 %4766)
  %.fca.0.extract.i1188 = extractvalue { ptr, i160 } %4783, 0
  %4784 = icmp ne ptr %.fca.0.extract.i1188, @nil_typ
  %4785 = icmp ne ptr %.fca.0.extract.i1188, null
  %.not126.i1189 = and i1 %4784, %4785
  br i1 %.not126.i1189, label %4786, label %.critedge.i1190

4786:                                             ; preds = %._crit_edge2
  %.fca.1.extract.i1236 = extractvalue { ptr, i160 } %4783, 1
  %.sroa.5.8.extract.trunc.i1237 = trunc i160 %.fca.1.extract.i1236 to i64
  %4787 = inttoptr i64 %.sroa.5.8.extract.trunc.i1237 to ptr
  %.sroa.9.8.extract.shift.i1238 = lshr i160 %.fca.1.extract.i1236, 64
  %.sroa.9.8.extract.trunc.i1239 = trunc i160 %.sroa.9.8.extract.shift.i1238 to i64
  %4788 = inttoptr i64 %.sroa.9.8.extract.trunc.i1239 to ptr
  %hash_coef_ptr.i.i144.i1240 = getelementptr i8, ptr %.fca.0.extract.i1188, i64 8
  %tbl_size_ptr.i.i145.i1241 = getelementptr i8, ptr %.fca.0.extract.i1188, i64 16
  %offset_tbl_ptr.i.i146.i1242 = getelementptr i8, ptr %.fca.0.extract.i1188, i64 40
  %hash_coef.i.i147.i1243 = load i64, ptr %hash_coef_ptr.i.i144.i1240, align 4
  %tbl_size.i.i148.i1244 = load i64, ptr %tbl_size_ptr.i.i145.i1241, align 4
  %offset_tbl.i.i149.i1245 = load ptr, ptr %offset_tbl_ptr.i.i146.i1242, align 8
  %product.i.i.i150.i1246 = mul i64 %hash_coef.i.i147.i1243, 4015701072841558310
  %shifted.i.i.i151.i1247 = lshr i64 %product.i.i.i150.i1246, 32
  %xored.i.i.i152.i1248 = xor i64 %shifted.i.i.i151.i1247, %product.i.i.i150.i1246
  %hash.i.i.i153.i1249 = and i64 %xored.i.i.i152.i1248, %tbl_size.i.i148.i1244
  %offset_ptr.i.i154.i1250 = getelementptr i32, ptr %offset_tbl.i.i149.i1245, i64 %hash.i.i.i153.i1249
  %offset.i.i155.i1251 = load i32, ptr %offset_ptr.i.i154.i1250, align 4
  %4789 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract.i1188, 0
  %4790 = insertvalue { ptr, ptr, ptr, i32 } %4789, ptr %4787, 1
  %4791 = insertvalue { ptr, ptr, ptr, i32 } %4790, ptr %4788, 2
  %4792 = insertvalue { ptr, ptr, ptr, i32 } %4791, i32 %offset.i.i155.i1251, 3
  %4793 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4794 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4795 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract.i1188)
  %4796 = sext i32 %offset.i.i155.i1251 to i64
  %4797 = getelementptr ptr, ptr %.fca.0.extract.i1188, i64 %4796
  %4798 = getelementptr i8, ptr %4797, i64 64
  %4799 = load ptr, ptr %4798, align 8
  %4800 = call ptr %4799({ ptr, ptr, ptr, i32 } %4792, ptr nonnull %2)
  %4801 = call i32 %4800({ ptr, ptr, ptr, i32 } %4792, { ptr, ptr, ptr, i32 } %4792, ptr nonnull %2)
  %4802 = icmp eq i32 %4801, %4746
  %4803 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4804 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4805 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract.i1188)
  %4806 = getelementptr i8, ptr %4797, i64 48
  %4807 = load ptr, ptr %4806, align 8
  %4808 = call ptr %4807({ ptr, ptr, ptr, i32 } %4792, ptr nonnull %2)
  %4809 = call { ptr, i160 } %4808({ ptr, ptr, ptr, i32 } %4792, { ptr, ptr, ptr, i32 } %4792, ptr nonnull %2)
  %4810 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4811 = load ptr, ptr %288, align 8
  %4812 = call i1 %4811({ ptr, i160 } %4809, { ptr, i160 } %4743)
  %4813 = and i1 %4802, %4812
  br i1 %4813, label %.thread.i, label %.critedge.i1190

.critedge.i1190:                                  ; preds = %4786, %._crit_edge2
  %4814 = add i32 %4746, 2127912214
  %4815 = shl i32 %4746, 12
  %4816 = add i32 %4814, %4815
  %4817 = ashr i32 %4816, 19
  %4818 = xor i32 %4816, %4817
  %4819 = xor i32 %4818, -949894596
  %4820 = add i32 %4819, 374761393
  %4821 = shl i32 %4819, 5
  %4822 = add i32 %4820, %4821
  %4823 = add i32 %4822, -744332180
  %4824 = shl i32 %4822, 9
  %4825 = xor i32 %4823, %4824
  %4826 = add i32 %4825, -42973499
  %4827 = shl i32 %4825, 3
  %4828 = add i32 %4826, %4827
  %4829 = ashr i32 %4828, 16
  %4830 = xor i32 %4828, %4829
  %4831 = xor i32 %4830, -1252372727
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %4832 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4833 = load ptr, ptr %312, align 8
  %4834 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4833, 0
  %4835 = load ptr, ptr %313, align 8
  %4836 = insertvalue { ptr, ptr, ptr, i32 } %4834, ptr %4835, 1
  %4837 = getelementptr i8, ptr %result.i, i64 72
  %4838 = load ptr, ptr %4837, align 8
  %4839 = insertvalue { ptr, ptr, ptr, i32 } %4836, ptr %4838, 2
  %4840 = load i32, ptr %314, align 4
  %4841 = insertvalue { ptr, ptr, ptr, i32 } %4839, i32 %4840, 3
  %hash_coef_ptr.i.i10.i2869 = getelementptr i8, ptr %4833, i64 8
  %tbl_size_ptr.i.i11.i2870 = getelementptr i8, ptr %4833, i64 16
  %offset_tbl_ptr.i.i12.i2871 = getelementptr i8, ptr %4833, i64 40
  %hash_coef.i.i13.i2872 = load i64, ptr %hash_coef_ptr.i.i10.i2869, align 4
  %tbl_size.i.i14.i2873 = load i64, ptr %tbl_size_ptr.i.i11.i2870, align 4
  %offset_tbl.i.i15.i2874 = load ptr, ptr %offset_tbl_ptr.i.i12.i2871, align 8
  %product.i.i.i16.i2875 = mul i64 %hash_coef.i.i13.i2872, -5261542750394134544
  %shifted.i.i.i17.i2876 = lshr i64 %product.i.i.i16.i2875, 32
  %xored.i.i.i18.i2877 = xor i64 %shifted.i.i.i17.i2876, %product.i.i.i16.i2875
  %hash.i.i.i19.i2878 = and i64 %xored.i.i.i18.i2877, %tbl_size.i.i14.i2873
  %offset_ptr.i.i20.i2879 = getelementptr i32, ptr %offset_tbl.i.i15.i2874, i64 %hash.i.i.i19.i2878
  %offset.i.i21.i2880 = load i32, ptr %offset_ptr.i.i20.i2879, align 4
  %eq.i.i2881 = icmp eq i32 %4840, %offset.i.i21.i2880
  call void @llvm.assume(i1 %eq.i.i2881) #30
  %4842 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4843 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4833)
  %4844 = sext i32 %4840 to i64
  %4845 = getelementptr ptr, ptr %4833, i64 %4844
  %4846 = getelementptr i8, ptr %4845, i64 64
  %4847 = load ptr, ptr %4846, align 8
  %4848 = call ptr %4847({ ptr, ptr, ptr, i32 } %4841, ptr nonnull %2)
  %4849 = call i32 %4848({ ptr, ptr, ptr, i32 } %4841, { ptr, ptr, ptr, i32 } %4841, ptr nonnull %2)
  %4850 = add i32 %4849, -1
  %4851 = and i32 %4850, %4831
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %4852 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4853 = load ptr, ptr %312, align 8
  %4854 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4853, 0
  %4855 = load ptr, ptr %313, align 8
  %4856 = insertvalue { ptr, ptr, ptr, i32 } %4854, ptr %4855, 1
  %4857 = load ptr, ptr %4837, align 8
  %4858 = insertvalue { ptr, ptr, ptr, i32 } %4856, ptr %4857, 2
  %4859 = load i32, ptr %314, align 4
  %4860 = insertvalue { ptr, ptr, ptr, i32 } %4858, i32 %4859, 3
  %hash_coef_ptr.i.i158.i1195 = getelementptr i8, ptr %4853, i64 8
  %tbl_size_ptr.i.i159.i1196 = getelementptr i8, ptr %4853, i64 16
  %offset_tbl_ptr.i.i160.i1197 = getelementptr i8, ptr %4853, i64 40
  %hash_coef.i.i161.i1198 = load i64, ptr %hash_coef_ptr.i.i158.i1195, align 4
  %tbl_size.i.i162.i1199 = load i64, ptr %tbl_size_ptr.i.i159.i1196, align 4
  %offset_tbl.i.i163.i1200 = load ptr, ptr %offset_tbl_ptr.i.i160.i1197, align 8
  %product.i.i.i164.i1201 = mul i64 %hash_coef.i.i161.i1198, -5261542750394134544
  %shifted.i.i.i165.i1202 = lshr i64 %product.i.i.i164.i1201, 32
  %xored.i.i.i166.i1203 = xor i64 %shifted.i.i.i165.i1202, %product.i.i.i164.i1201
  %hash.i.i.i167.i1204 = and i64 %xored.i.i.i166.i1203, %tbl_size.i.i162.i1199
  %offset_ptr.i.i168.i1205 = getelementptr i32, ptr %offset_tbl.i.i163.i1200, i64 %hash.i.i.i167.i1204
  %offset.i.i169.i1206 = load i32, ptr %offset_ptr.i.i168.i1205, align 4
  %eq.i172.i1207 = icmp eq i32 %4859, %offset.i.i169.i1206
  call void @llvm.assume(i1 %eq.i172.i1207) #30
  store ptr @_parameterization_Ptri32, ptr %233, align 8
  %4861 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %233)
  %4862 = call ptr @llvm.invariant.start.p0(i64 600, ptr %4853)
  %4863 = sext i32 %4859 to i64
  %4864 = getelementptr ptr, ptr %4853, i64 %4863
  %4865 = getelementptr i8, ptr %4864, i64 120
  %4866 = load ptr, ptr %4865, align 8
  store ptr @i32_typ, ptr %234, align 8
  %4867 = call ptr %4866({ ptr, ptr, ptr, i32 } %4860, ptr nonnull %234)
  %4868 = call { ptr, i160 } %4867({ ptr, ptr, ptr, i32 } %4860, { ptr, ptr, ptr, i32 } %4860, ptr nonnull %233, i32 %4851)
  %.fca.0.extract57.i1208 = extractvalue { ptr, i160 } %4868, 0
  %4869 = icmp ne ptr %.fca.0.extract57.i1208, @nil_typ
  %4870 = icmp ne ptr %.fca.0.extract57.i1208, null
  %.not128.i1209 = and i1 %4869, %4870
  br i1 %.not128.i1209, label %4871, label %HashMap_get_keyK.exit1253

4871:                                             ; preds = %.critedge.i1190
  %.fca.1.extract59.i1210 = extractvalue { ptr, i160 } %4868, 1
  %.sroa.6.8.extract.trunc.i1211 = trunc i160 %.fca.1.extract59.i1210 to i64
  %4872 = inttoptr i64 %.sroa.6.8.extract.trunc.i1211 to ptr
  %.sroa.11.8.extract.shift.i1212 = lshr i160 %.fca.1.extract59.i1210, 64
  %.sroa.11.8.extract.trunc.i1213 = trunc i160 %.sroa.11.8.extract.shift.i1212 to i64
  %4873 = inttoptr i64 %.sroa.11.8.extract.trunc.i1213 to ptr
  %hash_coef_ptr.i.i174.i1214 = getelementptr i8, ptr %.fca.0.extract57.i1208, i64 8
  %tbl_size_ptr.i.i175.i1215 = getelementptr i8, ptr %.fca.0.extract57.i1208, i64 16
  %offset_tbl_ptr.i.i176.i1216 = getelementptr i8, ptr %.fca.0.extract57.i1208, i64 40
  %hash_coef.i.i177.i1217 = load i64, ptr %hash_coef_ptr.i.i174.i1214, align 4
  %tbl_size.i.i178.i1218 = load i64, ptr %tbl_size_ptr.i.i175.i1215, align 4
  %offset_tbl.i.i179.i1219 = load ptr, ptr %offset_tbl_ptr.i.i176.i1216, align 8
  %product.i.i.i180.i1220 = mul i64 %hash_coef.i.i177.i1217, 4015701072841558310
  %shifted.i.i.i181.i1221 = lshr i64 %product.i.i.i180.i1220, 32
  %xored.i.i.i182.i1222 = xor i64 %shifted.i.i.i181.i1221, %product.i.i.i180.i1220
  %hash.i.i.i183.i1223 = and i64 %xored.i.i.i182.i1222, %tbl_size.i.i178.i1218
  %offset_ptr.i.i184.i1224 = getelementptr i32, ptr %offset_tbl.i.i179.i1219, i64 %hash.i.i.i183.i1223
  %offset.i.i185.i1225 = load i32, ptr %offset_ptr.i.i184.i1224, align 4
  %4874 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract57.i1208, 0
  %4875 = insertvalue { ptr, ptr, ptr, i32 } %4874, ptr %4872, 1
  %4876 = insertvalue { ptr, ptr, ptr, i32 } %4875, ptr %4873, 2
  %4877 = insertvalue { ptr, ptr, ptr, i32 } %4876, i32 %offset.i.i185.i1225, 3
  %4878 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4879 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4880 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract57.i1208)
  %4881 = sext i32 %offset.i.i185.i1225 to i64
  %4882 = getelementptr ptr, ptr %.fca.0.extract57.i1208, i64 %4881
  %4883 = getelementptr i8, ptr %4882, i64 64
  %4884 = load ptr, ptr %4883, align 8
  %4885 = call ptr %4884({ ptr, ptr, ptr, i32 } %4877, ptr nonnull %2)
  %4886 = call i32 %4885({ ptr, ptr, ptr, i32 } %4877, { ptr, ptr, ptr, i32 } %4877, ptr nonnull %2)
  %4887 = icmp eq i32 %4886, %4746
  %4888 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4889 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4890 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract57.i1208)
  %4891 = getelementptr i8, ptr %4882, i64 48
  %4892 = load ptr, ptr %4891, align 8
  %4893 = call ptr %4892({ ptr, ptr, ptr, i32 } %4877, ptr nonnull %2)
  %4894 = call { ptr, i160 } %4893({ ptr, ptr, ptr, i32 } %4877, { ptr, ptr, ptr, i32 } %4877, ptr nonnull %2)
  %4895 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4896 = load ptr, ptr %288, align 8
  %4897 = call i1 %4896({ ptr, i160 } %4894, { ptr, i160 } %4743)
  %4898 = and i1 %4887, %4897
  br i1 %4898, label %.thread.i, label %HashMap_get_keyK.exit1253

.thread.i:                                        ; preds = %4871, %4786
  %.pre-phi313.i1227 = phi i64 [ %4796, %4786 ], [ %4881, %4871 ]
  %.pre-phi312.i1228 = phi { ptr, ptr, ptr, i32 } [ %4792, %4786 ], [ %4877, %4871 ]
  %.reg2mem65.0.sroa.phi290.sroa.speculated.i1229 = phi ptr [ %.fca.0.extract.i1188, %4786 ], [ %.fca.0.extract57.i1208, %4871 ]
  %.reg2mem59.0.sroa.phi120289.i1230 = phi ptr [ %.sroa.1.i1152, %4786 ], [ %.sroa.2124.i1156, %4871 ]
  %.reg2mem59.0.sroa.phi117288.i1231 = phi ptr [ %.sroa.0271.i1151, %4786 ], [ %.sroa.0123.i1155, %4871 ]
  %.reg2mem57.0.sroa.phi94287.i1232 = phi ptr [ %.sroa.2.i1154, %4786 ], [ %.sroa.2116.i1158, %4871 ]
  %.reg2mem57.0.sroa.phi91286.i1233 = phi ptr [ %.sroa.0.i1153, %4786 ], [ %.sroa.0115.i1157, %4871 ]
  %4899 = call ptr @llvm.invariant.start.p0(i64 640, ptr nonnull @HashMap)
  %4900 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4901 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.reg2mem65.0.sroa.phi290.sroa.speculated.i1229)
  %4902 = getelementptr ptr, ptr %.reg2mem65.0.sroa.phi290.sroa.speculated.i1229, i64 %.pre-phi313.i1227
  %4903 = getelementptr i8, ptr %4902, i64 56
  %4904 = load ptr, ptr %4903, align 8
  %4905 = call ptr %4904({ ptr, ptr, ptr, i32 } %.pre-phi312.i1228, ptr nonnull %2)
  %4906 = call { ptr, i160 } %4905({ ptr, ptr, ptr, i32 } %.pre-phi312.i1228, { ptr, ptr, ptr, i32 } %.pre-phi312.i1228, ptr nonnull %2)
  %.fca.0.extract97.i1234 = extractvalue { ptr, i160 } %4906, 0
  store ptr %.fca.0.extract97.i1234, ptr %.reg2mem59.0.sroa.phi117288.i1231, align 8
  %.fca.1.extract99.i1235 = extractvalue { ptr, i160 } %4906, 1
  store i160 %.fca.1.extract99.i1235, ptr %.reg2mem59.0.sroa.phi120289.i1230, align 8
  store ptr %.fca.0.extract97.i1234, ptr %.reg2mem57.0.sroa.phi91286.i1233, align 8
  store i160 %.fca.1.extract99.i1235, ptr %.reg2mem57.0.sroa.phi94287.i1232, align 8
  br label %HashMap_get_keyK.exit1253

HashMap_get_keyK.exit1253:                        ; preds = %.critedge.i1190, %4871, %.thread.i
  %.reg2mem51.sroa.0.0.i = phi ptr [ %.fca.0.extract97.i1234, %.thread.i ], [ @nil_typ, %4871 ], [ @nil_typ, %.critedge.i1190 ]
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0271.i1151)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.1.i1152)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0.i1153)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2.i1154)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %233)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %234)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0123.i1155)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2124.i1156)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %.sroa.0115.i1157)
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %.sroa.2116.i1158)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %235)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %236)
  %4907 = icmp eq ptr %.reg2mem51.sroa.0.0.i, @nil_typ
  %4908 = icmp eq ptr %.reg2mem51.sroa.0.0.i, null
  %.not112.not = or i1 %4907, %4908
  %4909 = select i1 %.not112.not, i1 %4738, i1 false
  br label %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit311

IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit311: ; preds = %HashMap_get_keyK.exit1253, %._crit_edge._crit_edge
  %.reg2mem101.0 = phi i1 [ %4909, %HashMap_get_keyK.exit1253 ], [ %4738, %._crit_edge._crit_edge ]
  %result.i290 = call noalias dereferenceable_or_null(14) ptr @bump_malloc_inner(i64 noundef 14, ptr nonnull @current_ptr) #29
  store <13 x i8> <i8 82, i8 101, i8 109, i8 111, i8 118, i8 101, i8 32, i8 82, i8 97, i8 110, i8 100, i8 111, i8 109>, ptr %result.i290, align 16
  %result.i291 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %4910 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %result.i291, 1
  %4911 = insertvalue { ptr, ptr, ptr, i32 } %4910, ptr undef, 2
  %4912 = insertvalue { ptr, ptr, ptr, i32 } %4911, i32 9, 3
  store ptr %result.i290, ptr %result.i291, align 8
  %4913 = getelementptr i8, ptr %result.i291, i64 8
  store i32 13, ptr %4913, align 4
  %4914 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %4915 = getelementptr i8, ptr %result.i291, i64 12
  store i32 14, ptr %4915, align 4
  %4916 = sub i64 %4732, %4730
  call void @print_benchmark_result({ ptr, ptr, ptr, i32 } %4912, i32 %4731, i64 %4916)
  %result.i292 = call noalias dereferenceable_or_null(19) ptr @bump_malloc_inner(i64 noundef 19, ptr nonnull @current_ptr) #29
  store <18 x i8> <i8 32, i8 32, i8 32, i8 32, i8 86, i8 101, i8 114, i8 105, i8 102, i8 105, i8 99, i8 97, i8 116, i8 105, i8 111, i8 110, i8 58, i8 32>, ptr %result.i292, align 32
  %result.i293 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %4917 = getelementptr inbounds i8, ptr %277, i64 8
  %4918 = getelementptr inbounds i8, ptr %277, i64 24
  store ptr @String, ptr %277, align 8
  store ptr %result.i293, ptr %4917, align 8
  store i32 9, ptr %4918, align 8
  %4919 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %277)
  store ptr %result.i292, ptr %result.i293, align 8
  %4920 = getelementptr i8, ptr %result.i293, i64 8
  store i32 18, ptr %4920, align 4
  %4921 = getelementptr i8, ptr %result.i293, i64 12
  store i32 19, ptr %4921, align 4
  %4922 = load i160, ptr %4917, align 8
  %4923 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %.sroa.3.8.extract.trunc.i851 = trunc i160 %4922 to i64
  %4924 = inttoptr i64 %.sroa.3.8.extract.trunc.i851 to ptr
  %4925 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4926 = getelementptr i8, ptr %4924, i64 8
  %4927 = load i32, ptr %4926, align 4
  %4928 = add i32 %4927, 1
  %4929 = sext i32 %4928 to i64
  %result.i.i1935 = call noalias ptr @bump_malloc_inner(i64 noundef %4929, ptr nonnull @current_ptr) #29
  %4930 = load i32, ptr %4926, align 4
  %4931 = icmp sgt i32 %4930, 0
  br i1 %4931, label %.lr.ph.i1936, label %String_c_string_.exit1940

.lr.ph.i1936:                                     ; preds = %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit311
  %4932 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %4933 = load ptr, ptr %4924, align 8
  %4934 = zext nneg i32 %4930 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i1935, ptr align 1 %4933, i64 %4934, i1 false)
  br label %String_c_string_.exit1940

String_c_string_.exit1940:                        ; preds = %.lr.ph.i1936, %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit311
  %4935 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %4936 = sext i32 %4930 to i64
  %4937 = getelementptr i8, ptr %result.i.i1935, i64 %4936
  store i8 0, ptr %4937, align 1
  %puts.i867 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i1935)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %result.i312 = call noalias dereferenceable_or_null(5) ptr @bump_malloc_inner(i64 noundef 5, ptr nonnull @current_ptr) #29
  %. = select i1 %.reg2mem101.0, <4 x i8> <i8 80, i8 65, i8 83, i8 83>, <4 x i8> <i8 70, i8 65, i8 73, i8 76>
  %.643 = select i1 %.reg2mem101.0, ptr %278, ptr %279
  store <4 x i8> %., ptr %result.i312, align 4
  %result.i313 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %.643.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v = select i1 %.reg2mem101.0, ptr %278, ptr %279
  %.643.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel = getelementptr inbounds i8, ptr %.643.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v, i64 8
  %.643.sroa.sel933.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v = select i1 %.reg2mem101.0, ptr %278, ptr %279
  %.643.sroa.sel933.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel = getelementptr inbounds i8, ptr %.643.sroa.sel933.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v, i64 24
  store ptr @String, ptr %.643, align 8
  store ptr %result.i313, ptr %.643.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  store i32 9, ptr %.643.sroa.sel933.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  %4938 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %.643)
  store ptr %result.i312, ptr %result.i313, align 8
  %4939 = getelementptr i8, ptr %result.i313, i64 8
  store i32 4, ptr %4939, align 4
  %4940 = getelementptr i8, ptr %result.i313, i64 12
  store i32 5, ptr %4940, align 4
  %4941 = load i160, ptr %.643.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  %4942 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %.sroa.3.8.extract.trunc.i871 = trunc i160 %4941 to i64
  %4943 = inttoptr i64 %.sroa.3.8.extract.trunc.i871 to ptr
  %4944 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4945 = getelementptr i8, ptr %4943, i64 8
  %4946 = load i32, ptr %4945, align 4
  %4947 = add i32 %4946, 1
  %4948 = sext i32 %4947 to i64
  %result.i.i1955 = call noalias ptr @bump_malloc_inner(i64 noundef %4948, ptr nonnull @current_ptr) #29
  %4949 = load i32, ptr %4945, align 4
  %4950 = icmp sgt i32 %4949, 0
  br i1 %4950, label %.lr.ph.i1956, label %String_c_string_.exit1960

.lr.ph.i1956:                                     ; preds = %String_c_string_.exit1940
  %4951 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %4952 = load ptr, ptr %4943, align 8
  %4953 = zext nneg i32 %4949 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i1955, ptr align 1 %4952, i64 %4953, i1 false)
  br label %String_c_string_.exit1960

String_c_string_.exit1960:                        ; preds = %.lr.ph.i1956, %String_c_string_.exit1940
  %4954 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %4955 = sext i32 %4949 to i64
  %4956 = getelementptr i8, ptr %result.i.i1955, i64 %4955
  store i8 0, ptr %4956, align 1
  %puts.i887 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i1955)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %result.i352 = call noalias dereferenceable_or_null(21) ptr @bump_malloc_inner(i64 noundef 21, ptr nonnull @current_ptr) #29
  store <20 x i8> <i8 32, i8 32, i8 32, i8 32, i8 40, i8 73, i8 116, i8 101, i8 109, i8 115, i8 32, i8 114, i8 101, i8 109, i8 111, i8 118, i8 101, i8 100, i8 58, i8 32>, ptr %result.i352, align 32
  %result.i353 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %4957 = getelementptr inbounds i8, ptr %280, i64 8
  %4958 = getelementptr inbounds i8, ptr %280, i64 24
  store ptr @String, ptr %280, align 8
  store ptr %result.i353, ptr %4957, align 8
  store i32 9, ptr %4958, align 8
  %4959 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %280)
  store ptr %result.i352, ptr %result.i353, align 8
  %4960 = getelementptr i8, ptr %result.i353, i64 8
  store i32 20, ptr %4960, align 4
  %4961 = getelementptr i8, ptr %result.i353, i64 12
  store i32 21, ptr %4961, align 4
  %4962 = load i160, ptr %4957, align 8
  %4963 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %.sroa.3.8.extract.trunc.i891 = trunc i160 %4962 to i64
  %4964 = inttoptr i64 %.sroa.3.8.extract.trunc.i891 to ptr
  %4965 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4966 = getelementptr i8, ptr %4964, i64 8
  %4967 = load i32, ptr %4966, align 4
  %4968 = add i32 %4967, 1
  %4969 = sext i32 %4968 to i64
  %result.i.i1975 = call noalias ptr @bump_malloc_inner(i64 noundef %4969, ptr nonnull @current_ptr) #29
  %4970 = load i32, ptr %4966, align 4
  %4971 = icmp sgt i32 %4970, 0
  br i1 %4971, label %.lr.ph.i1976, label %String_c_string_.exit1980

.lr.ph.i1976:                                     ; preds = %String_c_string_.exit1960
  %4972 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %4973 = load ptr, ptr %4964, align 8
  %4974 = zext nneg i32 %4970 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i1975, ptr align 1 %4973, i64 %4974, i1 false)
  br label %String_c_string_.exit1980

String_c_string_.exit1980:                        ; preds = %.lr.ph.i1976, %String_c_string_.exit1960
  %4975 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %4976 = sext i32 %4970 to i64
  %4977 = getelementptr i8, ptr %result.i.i1975, i64 %4976
  store i8 0, ptr %4977, align 1
  %puts.i907 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i1975)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  %4978 = call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i32_string, i32 %.reg2mem123.0.lcssa)
  %result.i390 = call noalias dereferenceable_or_null(2) ptr @bump_malloc_inner(i64 noundef 2, ptr nonnull @current_ptr) #29
  store <1 x i8> <i8 41>, ptr %result.i390, align 1
  %result.i391 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %4979 = getelementptr inbounds i8, ptr %281, i64 8
  %4980 = getelementptr inbounds i8, ptr %281, i64 24
  store ptr @String, ptr %281, align 8
  store ptr %result.i391, ptr %4979, align 8
  store i32 9, ptr %4980, align 8
  %4981 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %281)
  store ptr %result.i390, ptr %result.i391, align 8
  %4982 = getelementptr i8, ptr %result.i391, i64 8
  store i32 1, ptr %4982, align 4
  %4983 = getelementptr i8, ptr %result.i391, i64 12
  store i32 2, ptr %4983, align 4
  %4984 = load i160, ptr %4979, align 8
  %4985 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %2)
  %.sroa.3.8.extract.trunc.i913 = trunc i160 %4984 to i64
  %4986 = inttoptr i64 %.sroa.3.8.extract.trunc.i913 to ptr
  %4987 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %4988 = getelementptr i8, ptr %4986, i64 8
  %4989 = load i32, ptr %4988, align 4
  %4990 = add i32 %4989, 1
  %4991 = sext i32 %4990 to i64
  %result.i.i1995 = call noalias ptr @bump_malloc_inner(i64 noundef %4991, ptr nonnull @current_ptr) #29
  %4992 = load i32, ptr %4988, align 4
  %4993 = icmp sgt i32 %4992, 0
  br i1 %4993, label %.lr.ph.i1996, label %String_c_string_.exit2000

.lr.ph.i1996:                                     ; preds = %String_c_string_.exit1980
  %4994 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %4995 = load ptr, ptr %4986, align 8
  %4996 = zext nneg i32 %4992 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i1995, ptr align 1 %4995, i64 %4996, i1 false)
  br label %String_c_string_.exit2000

String_c_string_.exit2000:                        ; preds = %.lr.ph.i1996, %String_c_string_.exit1980
  %4997 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %4998 = sext i32 %4992 to i64
  %4999 = getelementptr i8, ptr %result.i.i1995, i64 %4998
  store i8 0, ptr %4999, align 1
  %puts.i929 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i1995)
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %2)
  ret void
}

define noundef i32 @main() local_unnamed_addr {
IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit22:
  %0 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1 = alloca { ptr, ptr, ptr, i32 }, align 8
  tail call void @setup_landing_pad()
  %result.i = tail call noalias dereferenceable_or_null(60) ptr @bump_malloc_inner(i64 noundef 60, ptr nonnull @current_ptr) #29
  %2 = load <59 x i8>, ptr @wkcxk__HashMap_Benchmarks_Cuckoo_Hashing__Rev__Cleaned_, align 64
  store <59 x i8> %2, ptr %result.i, align 64
  %result.i2 = tail call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %3 = getelementptr inbounds i8, ptr %0, i64 8
  %4 = getelementptr inbounds i8, ptr %0, i64 24
  store ptr @String, ptr %0, align 8
  store ptr %result.i2, ptr %3, align 8
  store i32 9, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %0)
  store ptr %result.i, ptr %result.i2, align 8
  %6 = getelementptr i8, ptr %result.i2, i64 8
  store i32 59, ptr %6, align 4
  %7 = getelementptr i8, ptr %result.i2, i64 12
  store i32 60, ptr %7, align 4
  %8 = load i160, ptr %3, align 8
  %9 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %.sroa.3.8.extract.trunc.i = trunc i160 %8 to i64
  %10 = inttoptr i64 %.sroa.3.8.extract.trunc.i to ptr
  %11 = getelementptr i8, ptr %10, i64 8
  %12 = load i32, ptr %11, align 4
  %13 = add i32 %12, 1
  %14 = sext i32 %13 to i64
  %result.i.i = tail call noalias ptr @bump_malloc_inner(i64 noundef %14, ptr nonnull @current_ptr) #29
  %15 = load i32, ptr %11, align 4
  %16 = icmp sgt i32 %15, 0
  br i1 %16, label %.lr.ph.i, label %String_c_string_.exit

.lr.ph.i:                                         ; preds = %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit22
  %17 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %18 = load ptr, ptr %10, align 8
  %19 = zext nneg i32 %15 to i64
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i, ptr align 1 %18, i64 %19, i1 false)
  br label %String_c_string_.exit

String_c_string_.exit:                            ; preds = %.lr.ph.i, %IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil.exit22
  %20 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %21 = sext i32 %15 to i64
  %22 = getelementptr i8, ptr %result.i.i, i64 %21
  store i8 0, ptr %22, align 1
  %puts.i = tail call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i)
  tail call void @benchmark_insert_sequential(i32 1000000)
  tail call void @benchmark_insert_random(i32 1000000)
  tail call void @benchmark_get_sequential_hit(i32 1000000)
  tail call void @benchmark_get_random_hit(i32 1000000)
  tail call void @benchmark_get_random_miss(i32 1000000)
  tail call void @benchmark_remove_random(i32 1000000)
  %result.i3 = tail call noalias dereferenceable_or_null(28) ptr @bump_malloc_inner(i64 noundef 28, ptr nonnull @current_ptr) #29
  store <27 x i8> <i8 45, i8 45, i8 45, i8 32, i8 66, i8 101, i8 110, i8 99, i8 104, i8 109, i8 97, i8 114, i8 107, i8 115, i8 32, i8 67, i8 111, i8 109, i8 112, i8 108, i8 101, i8 116, i8 101, i8 32, i8 45, i8 45, i8 45>, ptr %result.i3, align 32
  %result.i4 = tail call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %23 = getelementptr inbounds i8, ptr %1, i64 8
  %24 = getelementptr inbounds i8, ptr %1, i64 24
  store ptr @String, ptr %1, align 8
  store ptr %result.i4, ptr %23, align 8
  store i32 9, ptr %24, align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %1)
  store ptr %result.i3, ptr %result.i4, align 8
  %26 = getelementptr i8, ptr %result.i4, i64 8
  store i32 27, ptr %26, align 4
  %27 = getelementptr i8, ptr %result.i4, i64 12
  store i32 28, ptr %27, align 4
  %28 = load i160, ptr %23, align 8
  %29 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %.sroa.3.8.extract.trunc.i39 = trunc i160 %28 to i64
  %30 = inttoptr i64 %.sroa.3.8.extract.trunc.i39 to ptr
  %31 = getelementptr i8, ptr %30, i64 8
  %32 = load i32, ptr %31, align 4
  %33 = add i32 %32, 1
  %34 = sext i32 %33 to i64
  %result.i.i70 = tail call noalias ptr @bump_malloc_inner(i64 noundef %34, ptr nonnull @current_ptr) #29
  %35 = load i32, ptr %31, align 4
  %36 = icmp sgt i32 %35, 0
  br i1 %36, label %.lr.ph.i71, label %String_c_string_.exit75

.lr.ph.i71:                                       ; preds = %String_c_string_.exit
  %37 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %38 = load ptr, ptr %30, align 8
  %39 = zext nneg i32 %35 to i64
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 1 %result.i.i70, ptr align 1 %38, i64 %39, i1 false)
  br label %String_c_string_.exit75

String_c_string_.exit75:                          ; preds = %.lr.ph.i71, %String_c_string_.exit
  %40 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %41 = sext i32 %35 to i64
  %42 = getelementptr i8, ptr %result.i.i70, i64 %41
  store i8 0, ptr %42, align 1
  %puts.i55 = tail call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i70)
  ret i32 0
}

define { i64, i64 } @_size_Pair(ptr nocapture readonly %0) {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr i8, ptr %4, i64 48
  %6 = load ptr, ptr %5, align 8
  %7 = tail call { i64, i64 } %6(ptr nonnull %3)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = extractvalue { i64, i64 } %7, 1
  %10 = urem i64 16, %9
  %11 = icmp eq i64 %10, 0
  %12 = sub i64 %9, %10
  %13 = select i1 %11, i64 0, i64 %12
  %14 = add i64 %8, 16
  %15 = add i64 %14, %13
  %16 = getelementptr i8, ptr %0, i64 16
  %17 = load ptr, ptr %16, align 8
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr i8, ptr %18, i64 48
  %20 = load ptr, ptr %19, align 8
  %21 = tail call { i64, i64 } %20(ptr nonnull %17)
  %22 = extractvalue { i64, i64 } %21, 0
  %23 = extractvalue { i64, i64 } %21, 1
  %24 = tail call i64 @llvm.umax.i64(i64 %9, i64 %23)
  %25 = tail call i64 @llvm.umax.i64(i64 %24, i64 8)
  %26 = urem i64 %15, %23
  %27 = icmp eq i64 %26, 0
  %28 = sub i64 %23, %26
  %29 = select i1 %27, i64 0, i64 %28
  %30 = add i64 %22, %15
  %31 = add i64 %30, %29
  %32 = urem i64 %31, %25
  %33 = icmp eq i64 %32, 0
  %34 = sub i64 %25, %32
  %35 = select i1 %33, i64 0, i64 %34
  %36 = add i64 %31, %35
  %37 = insertvalue { i64, i64 } undef, i64 %36, 0
  %38 = insertvalue { i64, i64 } %37, i64 %25, 1
  ret { i64, i64 } %38
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @Pair_field_Pair_0(ptr nocapture readonly %0) #0 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @Pair_field_Pair_1(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Pair_B_init_firstT_secondU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 128
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Pair_B_first_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 136
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Pair_B_second_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 144
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @Pair_init_firstT_secondU({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, i160 } %3, { ptr, i160 } %4) {
  %.fca.0.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract11, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract11, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract11, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 9197944775169318296
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %6 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr %.fca.0.extract11)
  %7 = sext i32 %offset.i.i to i64
  %8 = getelementptr ptr, ptr %.fca.0.extract11, i64 %7
  %9 = getelementptr i8, ptr %8, i64 16
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr i8, ptr %10, i64 8
  %12 = load ptr, ptr %11, align 8
  tail call void %12(ptr %.fca.1.extract12, { ptr, i160 } %3)
  %13 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr %.fca.0.extract11)
  %14 = getelementptr i8, ptr %8, i64 24
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = load ptr, ptr %16, align 8
  tail call void %17(ptr %.fca.1.extract12, { ptr, i160 } %4)
  ret void
}

define { ptr, i160 } @Pair_first_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 9197944775169318296
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %4 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr %.fca.0.extract3)
  %5 = sext i32 %offset.i.i to i64
  %6 = getelementptr ptr, ptr %.fca.0.extract3, i64 %5
  %7 = getelementptr i8, ptr %6, i64 16
  %8 = load ptr, ptr %7, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = tail call { ptr, i160 } %9(ptr %.fca.1.extract4)
  ret { ptr, i160 } %10
}

define { ptr, i160 } @Pair_second_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 9197944775169318296
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %4 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr %.fca.0.extract3)
  %5 = sext i32 %offset.i.i to i64
  %6 = getelementptr ptr, ptr %.fca.0.extract3, i64 %5
  %7 = getelementptr i8, ptr %6, i64 24
  %8 = load ptr, ptr %7, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = tail call { ptr, i160 } %9(ptr %.fca.1.extract4)
  ret { ptr, i160 } %10
}

define { ptr, i160 } @Pair_getter_second(ptr %0) {
  %2 = load ptr, ptr %0, align 8
  %3 = load ptr, ptr %2, align 8
  %4 = getelementptr i8, ptr %3, i64 48
  %5 = load ptr, ptr %4, align 8
  %6 = tail call { i64, i64 } %5(ptr nonnull %2)
  %7 = extractvalue { i64, i64 } %6, 0
  %8 = extractvalue { i64, i64 } %6, 1
  %9 = urem i64 16, %8
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 %8, %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %7, 16
  %14 = add i64 %13, %12
  %15 = getelementptr i8, ptr %0, i64 8
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = getelementptr i8, ptr %17, i64 48
  %19 = load ptr, ptr %18, align 8
  %20 = tail call { i64, i64 } %19(ptr nonnull %16)
  %21 = extractvalue { i64, i64 } %20, 1
  %22 = urem i64 %14, %21
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 %21, %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = getelementptr i8, ptr %0, i64 %14
  %27 = getelementptr i8, ptr %26, i64 %25
  %28 = load ptr, ptr %15, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 56
  %31 = load ptr, ptr %30, align 8
  %32 = tail call { ptr, i160 } %31(ptr %27, ptr nonnull %28)
  ret { ptr, i160 } %32
}

define void @Pair_setter_second(ptr %0, { ptr, i160 } %1) {
  %3 = load ptr, ptr %0, align 8
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr i8, ptr %4, i64 48
  %6 = load ptr, ptr %5, align 8
  %7 = tail call { i64, i64 } %6(ptr nonnull %3)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = extractvalue { i64, i64 } %7, 1
  %10 = urem i64 16, %9
  %11 = icmp eq i64 %10, 0
  %12 = sub i64 %9, %10
  %13 = select i1 %11, i64 0, i64 %12
  %14 = add i64 %8, 16
  %15 = add i64 %14, %13
  %16 = getelementptr i8, ptr %0, i64 8
  %17 = load ptr, ptr %16, align 8
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr i8, ptr %18, i64 48
  %20 = load ptr, ptr %19, align 8
  %21 = tail call { i64, i64 } %20(ptr nonnull %17)
  %22 = extractvalue { i64, i64 } %21, 1
  %23 = urem i64 %15, %22
  %24 = icmp eq i64 %23, 0
  %25 = sub i64 %22, %23
  %26 = select i1 %24, i64 0, i64 %25
  %27 = getelementptr i8, ptr %0, i64 %15
  %28 = getelementptr i8, ptr %27, i64 %26
  %29 = load ptr, ptr %16, align 8
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr i8, ptr %30, i64 64
  %32 = load ptr, ptr %31, align 8
  tail call void %32({ ptr, i160 } %1, ptr nonnull %29, ptr %28)
  ret void
}

define { ptr, i160 } @Pair_getter_first(ptr %0) {
  %2 = load ptr, ptr %0, align 8
  %3 = load ptr, ptr %2, align 8
  %4 = getelementptr i8, ptr %3, i64 48
  %5 = load ptr, ptr %4, align 8
  %6 = tail call { i64, i64 } %5(ptr nonnull %2)
  %7 = extractvalue { i64, i64 } %6, 1
  %8 = urem i64 16, %7
  %9 = icmp eq i64 %8, 0
  %reass.sub = sub i64 %7, %8
  %10 = add i64 %reass.sub, 16
  %11 = select i1 %9, i64 16, i64 %10
  %12 = getelementptr i8, ptr %0, i64 %11
  %13 = load ptr, ptr %0, align 8
  %14 = load ptr, ptr %13, align 8
  %15 = getelementptr i8, ptr %14, i64 56
  %16 = load ptr, ptr %15, align 8
  %17 = tail call { ptr, i160 } %16(ptr %12, ptr nonnull %13)
  ret { ptr, i160 } %17
}

define void @Pair_setter_first(ptr %0, { ptr, i160 } %1) {
  %3 = load ptr, ptr %0, align 8
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr i8, ptr %4, i64 48
  %6 = load ptr, ptr %5, align 8
  %7 = tail call { i64, i64 } %6(ptr nonnull %3)
  %8 = extractvalue { i64, i64 } %7, 1
  %9 = urem i64 16, %8
  %10 = icmp eq i64 %9, 0
  %reass.sub = sub i64 %8, %9
  %11 = add i64 %reass.sub, 16
  %12 = select i1 %10, i64 16, i64 %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = load ptr, ptr %0, align 8
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 64
  %17 = load ptr, ptr %16, align 8
  tail call void %17({ ptr, i160 } %1, ptr nonnull %14, ptr %13)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_Container(ptr nocapture readnone %0) #5 {
  ret { i64, i64 } { i64 0, i64 1 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_Iterator2(ptr nocapture readnone %0) #5 {
  ret { i64, i64 } { i64 8, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_Iterable2(ptr nocapture readnone %0) #5 {
  ret { i64, i64 } { i64 8, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_Array(ptr nocapture readnone %0) #5 {
  ret { i64, i64 } { i64 24, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @Array_field_Array_0(ptr nocapture readonly %0) #0 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: readwrite)
define noundef nonnull ptr @Array_B__Self_from_iterable_iterableIterable2T(ptr nocapture %0) #6 {
  %2 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  ret ptr @Array__Self_from_iterable_iterableIterable2T
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_init_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 304
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_init_capacityPtri32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 312
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_init_lengthPtri32_capacityPtri32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 320
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_length_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 328
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_capacity_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 336
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_append_xT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 344
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_reserve_new_capacityPtri32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 352
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B__index_xPtri32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 360
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B__set_index_xPtri32_valueT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 368
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_throw_oob_xPtri32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 376
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_unchecked_index_xPtri32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 384
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_unchecked_insert_xPtri32_valueT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 392
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 400
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 408
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 416
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 424
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 432
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 440
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 448
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 456
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 464
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 472
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 480
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define { ptr, ptr, ptr, i32 } @Array__Self_from_iterable_iterableIterable2T(ptr nocapture readnone %0, { ptr, ptr, ptr, i32 } %1) {
  %3 = alloca [0 x ptr], align 8
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 5693646204635713916
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %result.i = tail call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  store ptr @any_typ, ptr %result.i, align 8
  %result.i29 = tail call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  store ptr %result.i, ptr %result.i29, align 8
  %4 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i29)
  %result.i.i = tail call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %5 = getelementptr i8, ptr %result.i29, i64 8
  store ptr %result.i.i, ptr %5, align 8
  %6 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  %7 = getelementptr i8, ptr %result.i29, i64 20
  store i32 1, ptr %7, align 4
  %8 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %9 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %.fca.1.extract3, 1
  %10 = insertvalue { ptr, ptr, ptr, i32 } %9, ptr %.fca.2.extract5, 2
  %11 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %offset.i.i, 3
  %12 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
  %13 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract1)
  %14 = sext i32 %offset.i.i to i64
  %15 = getelementptr ptr, ptr %.fca.0.extract1, i64 %14
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = load ptr, ptr %16, align 8
  %18 = call ptr %17({ ptr, ptr, ptr, i32 } %11, ptr nonnull %3)
  %19 = call { ptr, ptr, ptr, i32 } %18({ ptr, ptr, ptr, i32 } %11, { ptr, ptr, ptr, i32 } %11, ptr nonnull %3)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %19, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %19, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %19, 2
  %hash_coef_ptr.i.i45 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i46 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i47 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i48 = load i64, ptr %hash_coef_ptr.i.i45, align 4
  %tbl_size.i.i49 = load i64, ptr %tbl_size_ptr.i.i46, align 4
  %offset_tbl.i.i50 = load ptr, ptr %offset_tbl_ptr.i.i47, align 8
  %product.i.i.i51 = mul i64 %hash_coef.i.i48, 4189192806087951739
  %shifted.i.i.i52 = lshr i64 %product.i.i.i51, 32
  %xored.i.i.i53 = xor i64 %shifted.i.i.i52, %product.i.i.i51
  %hash.i.i.i54 = and i64 %xored.i.i.i53, %tbl_size.i.i49
  %offset_ptr.i.i55 = getelementptr i32, ptr %offset_tbl.i.i50, i64 %hash.i.i.i54
  %offset.i.i70 = load i32, ptr %offset_ptr.i.i55, align 4
  %20 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %21 = insertvalue { ptr, ptr, ptr, i32 } %20, ptr %.fca.1.extract, 1
  %22 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %.fca.2.extract, 2
  %23 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 %offset.i.i70, 3
  %24 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
  %25 = call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %.fca.0.extract)
  %26 = sext i32 %offset.i.i70 to i64
  %27 = getelementptr ptr, ptr %.fca.0.extract, i64 %26
  %28 = getelementptr i8, ptr %27, i64 8
  %29 = load ptr, ptr %28, align 8
  %30 = call ptr %29({ ptr, ptr, ptr, i32 } %23, ptr nonnull %3)
  %31 = call { ptr, i160 } %30({ ptr, ptr, ptr, i32 } %23, { ptr, ptr, ptr, i32 } %23, ptr nonnull %3)
  %.fca.0.extract23120 = extractvalue { ptr, i160 } %31, 0
  %32 = icmp ne ptr %.fca.0.extract23120, @nil_typ
  %33 = icmp ne ptr %.fca.0.extract23120, null
  %.not28121 = and i1 %32, %33
  br i1 %.not28121, label %._crit_edge.preheader, label %.critedge

._crit_edge.preheader:                            ; preds = %2
  %34 = getelementptr i8, ptr %result.i29, i64 16
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.preheader, %Array_append_xT.exit
  %35 = phi ptr [ %55, %Array_append_xT.exit ], [ %result.i.i, %._crit_edge.preheader ]
  %.pre = phi i32 [ %61, %Array_append_xT.exit ], [ 0, %._crit_edge.preheader ]
  %36 = phi { ptr, i160 } [ %65, %Array_append_xT.exit ], [ %31, %._crit_edge.preheader ]
  %37 = load i32, ptr %7, align 4
  %.not.i = icmp slt i32 %.pre, %37
  br i1 %.not.i, label %Array_append_xT.exit, label %38

38:                                               ; preds = %._crit_edge
  %39 = shl i32 %37, 1
  %.not.i125 = icmp sgt i32 %39, %37
  %.pre127.pre = load ptr, ptr %5, align 8
  br i1 %.not.i125, label %40, label %Array_append_xT.exit

40:                                               ; preds = %38
  store i32 %39, ptr %7, align 4
  %41 = sext i32 %39 to i64
  %42 = shl nsw i64 %41, 5
  %result.i.i126 = call noalias ptr @bump_malloc_inner(i64 noundef %42, ptr nonnull @current_ptr) #29
  store ptr %result.i.i126, ptr %5, align 8
  %43 = icmp sgt i32 %.pre, 0
  br i1 %43, label %.lr.ph.i, label %Array_append_xT.exit

.lr.ph.i:                                         ; preds = %40
  %44 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  br label %._crit_edge.i

._crit_edge.i:                                    ; preds = %._crit_edge.i, %.lr.ph.i
  %.reg2mem17.030.i = phi i32 [ 0, %.lr.ph.i ], [ %53, %._crit_edge.i ]
  %45 = zext nneg i32 %.reg2mem17.030.i to i64
  %46 = shl nuw nsw i64 %45, 5
  %47 = getelementptr i8, ptr %.pre127.pre, i64 %46
  %48 = getelementptr i8, ptr %result.i.i126, i64 %46
  %49 = load ptr, ptr %47, align 8
  %50 = getelementptr i8, ptr %47, i64 8
  %51 = load i160, ptr %50, align 4
  store ptr %49, ptr %48, align 8
  %52 = getelementptr i8, ptr %48, i64 8
  store i160 %51, ptr %52, align 4
  %53 = add nuw nsw i32 %.reg2mem17.030.i, 1
  %54 = icmp slt i32 %53, %.pre
  br i1 %54, label %._crit_edge.i, label %Array_append_xT.exit

Array_append_xT.exit:                             ; preds = %._crit_edge.i, %40, %38, %._crit_edge
  %55 = phi ptr [ %35, %._crit_edge ], [ %.pre127.pre, %38 ], [ %result.i.i126, %40 ], [ %result.i.i126, %._crit_edge.i ]
  %.fca.1.extract.i = extractvalue { ptr, i160 } %36, 1
  %.fca.0.extract.i = extractvalue { ptr, i160 } %36, 0
  %56 = sext i32 %.pre to i64
  %57 = shl nsw i64 %56, 5
  %58 = getelementptr i8, ptr %55, i64 %57
  store ptr %.fca.0.extract.i, ptr %58, align 8
  %59 = getelementptr i8, ptr %58, i64 8
  store i160 %.fca.1.extract.i, ptr %59, align 4
  %60 = load i32, ptr %34, align 4
  %61 = add i32 %60, 1
  %62 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull @Array)
  store i32 %61, ptr %34, align 4
  %63 = load ptr, ptr %28, align 8
  %64 = call ptr %63({ ptr, ptr, ptr, i32 } %23, ptr nonnull %3)
  %65 = call { ptr, i160 } %64({ ptr, ptr, ptr, i32 } %23, { ptr, ptr, ptr, i32 } %23, ptr nonnull %3)
  %.fca.0.extract23 = extractvalue { ptr, i160 } %65, 0
  %66 = icmp ne ptr %.fca.0.extract23, @nil_typ
  %67 = icmp ne ptr %.fca.0.extract23, null
  %.not28 = and i1 %66, %67
  br i1 %.not28, label %._crit_edge, label %.critedge

.critedge:                                        ; preds = %Array_append_xT.exit, %2
  %68 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Array, ptr undef, ptr undef, i32 undef }, ptr %result.i29, 1
  %69 = insertvalue { ptr, ptr, ptr, i32 } %68, ptr undef, 2
  %70 = insertvalue { ptr, ptr, ptr, i32 } %69, i32 9, 3
  ret { ptr, ptr, ptr, i32 } %70
}

define void @Array_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -5261542750394134544
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %result.i = tail call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %4 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract)
  %5 = sext i32 %offset.i.i to i64
  %6 = getelementptr ptr, ptr %.fca.0.extract, i64 %5
  %7 = getelementptr i8, ptr %6, i64 8
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr i8, ptr %8, i64 8
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr } undef, ptr %result.i, 0
  tail call void %10(ptr %.fca.1.extract, { ptr } %11)
  %12 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract)
  %13 = getelementptr i8, ptr %6, i64 16
  %14 = load ptr, ptr %13, align 8
  %15 = getelementptr i8, ptr %14, i64 8
  %16 = load ptr, ptr %15, align 8
  tail call void %16(ptr %.fca.1.extract, i32 0)
  %17 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract)
  %18 = getelementptr i8, ptr %6, i64 24
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr i8, ptr %19, i64 8
  %21 = load ptr, ptr %20, align 8
  tail call void %21(ptr %.fca.1.extract, i32 1)
  ret void
}

define void @Array_init_capacityPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -5261542750394134544
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %5 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract, i64 %6
  %8 = getelementptr i8, ptr %7, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr i8, ptr %9, i64 8
  %11 = load ptr, ptr %10, align 8
  tail call void %11(ptr %.fca.1.extract, i32 %3)
  %12 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract)
  %13 = load ptr, ptr %8, align 8
  %14 = load ptr, ptr %13, align 8
  %15 = tail call i32 %14(ptr %.fca.1.extract)
  %16 = sext i32 %15 to i64
  %17 = shl nsw i64 %16, 5
  %result.i = tail call noalias ptr @bump_malloc_inner(i64 noundef %17, ptr nonnull @current_ptr) #29
  %18 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract)
  %19 = getelementptr i8, ptr %7, i64 8
  %20 = load ptr, ptr %19, align 8
  %21 = getelementptr i8, ptr %20, i64 8
  %22 = load ptr, ptr %21, align 8
  %23 = insertvalue { ptr } undef, ptr %result.i, 0
  tail call void %22(ptr %.fca.1.extract, { ptr } %23)
  %24 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract)
  %25 = getelementptr i8, ptr %7, i64 16
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr i8, ptr %26, i64 8
  %28 = load ptr, ptr %27, align 8
  tail call void %28(ptr %.fca.1.extract, i32 0)
  ret void
}

define void @Array_init_lengthPtri32_capacityPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3, i32 %4) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -5261542750394134544
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %6 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract)
  %7 = sext i32 %offset.i.i to i64
  %8 = getelementptr ptr, ptr %.fca.0.extract, i64 %7
  %9 = getelementptr i8, ptr %8, i64 16
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr i8, ptr %10, i64 8
  %12 = load ptr, ptr %11, align 8
  tail call void %12(ptr %.fca.1.extract, i32 %3)
  %13 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract)
  %14 = getelementptr i8, ptr %8, i64 24
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = load ptr, ptr %16, align 8
  tail call void %17(ptr %.fca.1.extract, i32 %4)
  %18 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract)
  %19 = load ptr, ptr %14, align 8
  %20 = load ptr, ptr %19, align 8
  %21 = tail call i32 %20(ptr %.fca.1.extract)
  %22 = sext i32 %21 to i64
  %23 = shl nsw i64 %22, 5
  %result.i = tail call noalias ptr @bump_malloc_inner(i64 noundef %23, ptr nonnull @current_ptr) #29
  %24 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract)
  %25 = getelementptr i8, ptr %8, i64 8
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr i8, ptr %26, i64 8
  %28 = load ptr, ptr %27, align 8
  %29 = insertvalue { ptr } undef, ptr %result.i, 0
  tail call void %28(ptr %.fca.1.extract, { ptr } %29)
  ret void
}

define i32 @Array_length_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -5261542750394134544
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %4 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract)
  %5 = sext i32 %offset.i.i to i64
  %6 = getelementptr ptr, ptr %.fca.0.extract, i64 %5
  %7 = getelementptr i8, ptr %6, i64 16
  %8 = load ptr, ptr %7, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = tail call i32 %9(ptr %.fca.1.extract)
  ret i32 %10
}

define i32 @Array_capacity_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -5261542750394134544
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %4 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract)
  %5 = sext i32 %offset.i.i to i64
  %6 = getelementptr ptr, ptr %.fca.0.extract, i64 %5
  %7 = getelementptr i8, ptr %6, i64 24
  %8 = load ptr, ptr %7, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = tail call i32 %9(ptr %.fca.1.extract)
  ret i32 %10
}

define { ptr, ptr, ptr, i32 } @Array_append_xT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, i160 } %3) {
  %5 = alloca [1 x ptr], align 8
  %6 = alloca { ptr }, align 8
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -5261542750394134544
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %7 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract1)
  %8 = sext i32 %offset.i.i to i64
  %9 = getelementptr ptr, ptr %.fca.0.extract1, i64 %8
  %10 = getelementptr i8, ptr %9, i64 16
  %11 = load ptr, ptr %10, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = tail call i32 %12(ptr %.fca.1.extract2)
  %14 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract1)
  %15 = getelementptr i8, ptr %9, i64 24
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = tail call i32 %17(ptr %.fca.1.extract2)
  %.not = icmp slt i32 %13, %18
  br i1 %.not, label %.._crit_edge_crit_edge, label %19

.._crit_edge_crit_edge:                           ; preds = %4
  %.pre = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %.pre48 = insertvalue { ptr, ptr, ptr, i32 } %.pre, ptr %.fca.1.extract2, 1
  %.pre50 = insertvalue { ptr, ptr, ptr, i32 } %.pre48, ptr %.fca.2.extract, 2
  br label %._crit_edge

19:                                               ; preds = %4
  %20 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %.fca.0.extract1)
  %21 = load ptr, ptr %15, align 8
  %22 = load ptr, ptr %21, align 8
  %23 = tail call i32 %22(ptr %.fca.1.extract2)
  %24 = shl i32 %23, 1
  %25 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %26 = insertvalue { ptr, ptr, ptr, i32 } %25, ptr %.fca.1.extract2, 1
  %27 = insertvalue { ptr, ptr, ptr, i32 } %26, ptr %.fca.2.extract, 2
  %28 = insertvalue { ptr, ptr, ptr, i32 } %27, i32 %offset.i.i, 3
  %29 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %.fca.0.extract1)
  %30 = load ptr, ptr %9, align 8
  %31 = tail call ptr %30(ptr %.fca.1.extract2)
  store ptr @_parameterization_Ptri32, ptr %5, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %5)
  %33 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %.fca.0.extract1)
  %34 = getelementptr i8, ptr %9, i64 88
  %35 = load ptr, ptr %34, align 8
  store ptr @i32_typ, ptr %6, align 8
  %36 = call ptr %35({ ptr, ptr, ptr, i32 } %28, ptr nonnull %6)
  call void %36({ ptr, ptr, ptr, i32 } %28, { ptr, ptr, ptr, i32 } %28, ptr nonnull %5, i32 %24)
  br label %._crit_edge

._crit_edge:                                      ; preds = %.._crit_edge_crit_edge, %19
  %.pre-phi51 = phi { ptr, ptr, ptr, i32 } [ %.pre50, %.._crit_edge_crit_edge ], [ %27, %19 ]
  %.fca.1.extract = extractvalue { ptr, i160 } %3, 1
  %.fca.0.extract = extractvalue { ptr, i160 } %3, 0
  %37 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %.fca.0.extract1)
  %38 = getelementptr i8, ptr %9, i64 8
  %39 = load ptr, ptr %38, align 8
  %40 = load ptr, ptr %39, align 8
  %41 = call { ptr } %40(ptr %.fca.1.extract2)
  %.fca.0.extract5 = extractvalue { ptr } %41, 0
  %42 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %.fca.0.extract1)
  %43 = load ptr, ptr %10, align 8
  %44 = load ptr, ptr %43, align 8
  %45 = call i32 %44(ptr %.fca.1.extract2)
  %46 = sext i32 %45 to i64
  %47 = shl nsw i64 %46, 5
  %48 = getelementptr i8, ptr %.fca.0.extract5, i64 %47
  store ptr %.fca.0.extract, ptr %48, align 8
  %49 = getelementptr i8, ptr %48, i64 8
  store i160 %.fca.1.extract, ptr %49, align 4
  %50 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %.fca.0.extract1)
  %51 = load ptr, ptr %10, align 8
  %52 = load ptr, ptr %51, align 8
  %53 = call i32 %52(ptr %.fca.1.extract2)
  %54 = add i32 %53, 1
  %55 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %.fca.0.extract1)
  %56 = load ptr, ptr %10, align 8
  %57 = getelementptr i8, ptr %56, i64 8
  %58 = load ptr, ptr %57, align 8
  call void %58(ptr %.fca.1.extract2, i32 %54)
  %hash_coef.i.i12 = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i13 = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i14 = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i15 = mul i64 %hash_coef.i.i12, -5261542750394134544
  %shifted.i.i.i16 = lshr i64 %product.i.i.i15, 32
  %xored.i.i.i17 = xor i64 %shifted.i.i.i16, %product.i.i.i15
  %hash.i.i.i18 = and i64 %xored.i.i.i17, %tbl_size.i.i13
  %offset_ptr.i.i19 = getelementptr i32, ptr %offset_tbl.i.i14, i64 %hash.i.i.i18
  %offset.i.i20 = load i32, ptr %offset_ptr.i.i19, align 4
  %59 = insertvalue { ptr, ptr, ptr, i32 } %.pre-phi51, i32 %offset.i.i20, 3
  ret { ptr, ptr, ptr, i32 } %59
}

define void @Array_reserve_new_capacityPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -5261542750394134544
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %5 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract, i64 %6
  %8 = getelementptr i8, ptr %7, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = load ptr, ptr %9, align 8
  %11 = tail call i32 %10(ptr %.fca.1.extract)
  %.not = icmp sgt i32 %3, %11
  br i1 %.not, label %12, label %.thread

12:                                               ; preds = %4
  %13 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %.fca.0.extract)
  %14 = load ptr, ptr %8, align 8
  %15 = getelementptr i8, ptr %14, i64 8
  %16 = load ptr, ptr %15, align 8
  tail call void %16(ptr %.fca.1.extract, i32 %3)
  %17 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %.fca.0.extract)
  %18 = getelementptr i8, ptr %7, i64 8
  %19 = load ptr, ptr %18, align 8
  %20 = load ptr, ptr %19, align 8
  %21 = tail call { ptr } %20(ptr %.fca.1.extract)
  %.fca.0.extract8 = extractvalue { ptr } %21, 0
  %22 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %.fca.0.extract)
  %23 = load ptr, ptr %8, align 8
  %24 = load ptr, ptr %23, align 8
  %25 = tail call i32 %24(ptr %.fca.1.extract)
  %26 = sext i32 %25 to i64
  %27 = shl nsw i64 %26, 5
  %result.i = tail call noalias ptr @bump_malloc_inner(i64 noundef %27, ptr nonnull @current_ptr) #29
  %28 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %.fca.0.extract)
  %29 = load ptr, ptr %18, align 8
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  %32 = insertvalue { ptr } undef, ptr %result.i, 0
  tail call void %31(ptr %.fca.1.extract, { ptr } %32)
  %33 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %.fca.0.extract)
  %34 = getelementptr i8, ptr %7, i64 16
  %35 = load ptr, ptr %34, align 8
  %36 = load ptr, ptr %35, align 8
  %37 = tail call i32 %36(ptr %.fca.1.extract)
  %38 = icmp sgt i32 %37, 0
  br i1 %38, label %.lr.ph, label %.thread

.lr.ph:                                           ; preds = %12
  %39 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %.fca.0.extract)
  br label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph, %._crit_edge
  %.reg2mem17.030 = phi i32 [ 0, %.lr.ph ], [ %51, %._crit_edge ]
  %40 = zext nneg i32 %.reg2mem17.030 to i64
  %41 = shl nuw nsw i64 %40, 5
  %42 = getelementptr i8, ptr %.fca.0.extract8, i64 %41
  %43 = load ptr, ptr %18, align 8
  %44 = load ptr, ptr %43, align 8
  %45 = tail call { ptr } %44(ptr %.fca.1.extract)
  %.fca.0.extract4 = extractvalue { ptr } %45, 0
  %46 = getelementptr i8, ptr %.fca.0.extract4, i64 %41
  %47 = load ptr, ptr %42, align 8
  %48 = getelementptr i8, ptr %42, i64 8
  %49 = load i160, ptr %48, align 4
  store ptr %47, ptr %46, align 8
  %50 = getelementptr i8, ptr %46, i64 8
  store i160 %49, ptr %50, align 4
  %51 = add nuw nsw i32 %.reg2mem17.030, 1
  %52 = load ptr, ptr %34, align 8
  %53 = load ptr, ptr %52, align 8
  %54 = tail call i32 %53(ptr %.fca.1.extract)
  %55 = icmp slt i32 %51, %54
  br i1 %55, label %._crit_edge, label %.thread

.thread:                                          ; preds = %._crit_edge, %12, %4
  ret void
}

define { ptr, i160 } @Array__index_xPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
  %5 = alloca [1 x ptr], align 8
  %6 = alloca { ptr }, align 8
  %7 = alloca [1 x ptr], align 8
  %8 = alloca { ptr }, align 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -5261542750394134544
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %9 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract)
  %10 = sext i32 %offset.i.i to i64
  %11 = getelementptr ptr, ptr %.fca.0.extract, i64 %10
  %12 = getelementptr i8, ptr %11, i64 16
  %13 = load ptr, ptr %12, align 8
  %14 = load ptr, ptr %13, align 8
  %15 = tail call i32 %14(ptr %.fca.1.extract)
  %16 = add i32 %15, -1
  %17 = icmp sgt i32 %3, %16
  %18 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract)
  %19 = load ptr, ptr %12, align 8
  %20 = load ptr, ptr %19, align 8
  %21 = tail call i32 %20(ptr %.fca.1.extract)
  %22 = add i32 %21, %3
  %23 = icmp slt i32 %22, 0
  %24 = or i1 %17, %23
  br i1 %24, label %25, label %._crit_edge

25:                                               ; preds = %4
  %26 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %27 = insertvalue { ptr, ptr, ptr, i32 } %26, ptr %.fca.1.extract, 1
  %28 = insertvalue { ptr, ptr, ptr, i32 } %27, ptr %.fca.2.extract, 2
  %29 = insertvalue { ptr, ptr, ptr, i32 } %28, i32 %offset.i.i, 3
  %30 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %.fca.0.extract)
  %31 = load ptr, ptr %11, align 8
  %32 = tail call ptr %31(ptr %.fca.1.extract)
  store ptr @_parameterization_Ptri32, ptr %5, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %5)
  %34 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %.fca.0.extract)
  %35 = getelementptr i8, ptr %11, i64 112
  %36 = load ptr, ptr %35, align 8
  store ptr @i32_typ, ptr %6, align 8
  %37 = call ptr %36({ ptr, ptr, ptr, i32 } %29, ptr nonnull %6)
  call void %37({ ptr, ptr, ptr, i32 } %29, { ptr, ptr, ptr, i32 } %29, ptr nonnull %5, i32 %3)
  br label %._crit_edge

._crit_edge:                                      ; preds = %4, %25
  %38 = icmp slt i32 %3, 0
  br i1 %38, label %39, label %45

39:                                               ; preds = %._crit_edge
  %40 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %.fca.0.extract)
  %41 = load ptr, ptr %12, align 8
  %42 = load ptr, ptr %41, align 8
  %43 = call i32 %42(ptr %.fca.1.extract)
  %44 = add i32 %43, %3
  br label %45

45:                                               ; preds = %._crit_edge, %39
  %.reg2mem3.0 = phi i32 [ %44, %39 ], [ %3, %._crit_edge ]
  %46 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %47 = insertvalue { ptr, ptr, ptr, i32 } %46, ptr %.fca.1.extract, 1
  %48 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %.fca.2.extract, 2
  %49 = insertvalue { ptr, ptr, ptr, i32 } %48, i32 %offset.i.i, 3
  %50 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %.fca.0.extract)
  %51 = load ptr, ptr %11, align 8
  %52 = call ptr %51(ptr %.fca.1.extract)
  store ptr @_parameterization_Ptri32, ptr %7, align 8
  %53 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %7)
  %54 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %.fca.0.extract)
  %55 = getelementptr i8, ptr %11, i64 120
  %56 = load ptr, ptr %55, align 8
  store ptr @i32_typ, ptr %8, align 8
  %57 = call ptr %56({ ptr, ptr, ptr, i32 } %49, ptr nonnull %8)
  %58 = call { ptr, i160 } %57({ ptr, ptr, ptr, i32 } %49, { ptr, ptr, ptr, i32 } %49, ptr nonnull %7, i32 %.reg2mem3.0)
  ret { ptr, i160 } %58
}

define void @Array__set_index_xPtri32_valueT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3, { ptr, i160 } %4) {
  %6 = alloca [1 x ptr], align 8
  %7 = alloca { ptr }, align 8
  %8 = alloca [2 x ptr], align 8
  %9 = alloca { ptr, ptr }, align 8
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -5261542750394134544
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %10 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract1)
  %11 = sext i32 %offset.i.i to i64
  %12 = getelementptr ptr, ptr %.fca.0.extract1, i64 %11
  %13 = getelementptr i8, ptr %12, i64 16
  %14 = load ptr, ptr %13, align 8
  %15 = load ptr, ptr %14, align 8
  %16 = tail call i32 %15(ptr %.fca.1.extract2)
  %17 = add i32 %16, -1
  %18 = icmp sgt i32 %3, %17
  %19 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract1)
  %20 = load ptr, ptr %13, align 8
  %21 = load ptr, ptr %20, align 8
  %22 = tail call i32 %21(ptr %.fca.1.extract2)
  %23 = add i32 %22, %3
  %24 = icmp slt i32 %23, 0
  %25 = or i1 %18, %24
  br i1 %25, label %26, label %._crit_edge

26:                                               ; preds = %5
  %27 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %28 = insertvalue { ptr, ptr, ptr, i32 } %27, ptr %.fca.1.extract2, 1
  %29 = insertvalue { ptr, ptr, ptr, i32 } %28, ptr %.fca.2.extract, 2
  %30 = insertvalue { ptr, ptr, ptr, i32 } %29, i32 %offset.i.i, 3
  %31 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %.fca.0.extract1)
  %32 = load ptr, ptr %12, align 8
  %33 = tail call ptr %32(ptr %.fca.1.extract2)
  store ptr @_parameterization_Ptri32, ptr %6, align 8
  %34 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %6)
  %35 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %.fca.0.extract1)
  %36 = getelementptr i8, ptr %12, i64 112
  %37 = load ptr, ptr %36, align 8
  store ptr @i32_typ, ptr %7, align 8
  %38 = call ptr %37({ ptr, ptr, ptr, i32 } %30, ptr nonnull %7)
  call void %38({ ptr, ptr, ptr, i32 } %30, { ptr, ptr, ptr, i32 } %30, ptr nonnull %6, i32 %3)
  br label %._crit_edge

._crit_edge:                                      ; preds = %5, %26
  %39 = icmp slt i32 %3, 0
  br i1 %39, label %40, label %46

40:                                               ; preds = %._crit_edge
  %41 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %.fca.0.extract1)
  %42 = load ptr, ptr %13, align 8
  %43 = load ptr, ptr %42, align 8
  %44 = call i32 %43(ptr %.fca.1.extract2)
  %45 = add i32 %44, %3
  br label %46

46:                                               ; preds = %._crit_edge, %40
  %.reg2mem3.0 = phi i32 [ %45, %40 ], [ %3, %._crit_edge ]
  %.fca.0.extract = extractvalue { ptr, i160 } %4, 0
  %47 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %48 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %.fca.1.extract2, 1
  %49 = insertvalue { ptr, ptr, ptr, i32 } %48, ptr %.fca.2.extract, 2
  %50 = insertvalue { ptr, ptr, ptr, i32 } %49, i32 %offset.i.i, 3
  %51 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %.fca.0.extract1)
  %52 = load ptr, ptr %12, align 8
  %53 = call ptr %52(ptr %.fca.1.extract2)
  store ptr @_parameterization_Ptri32, ptr %8, align 8
  %54 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr %53, ptr %54, align 8
  %55 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %8)
  %56 = call ptr @llvm.invariant.start.p0(i64 600, ptr nonnull %.fca.0.extract1)
  %57 = getelementptr i8, ptr %12, i64 128
  %58 = load ptr, ptr %57, align 8
  store ptr @i32_typ, ptr %9, align 8
  %59 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %.fca.0.extract, ptr %59, align 8
  %60 = call ptr %58({ ptr, ptr, ptr, i32 } %50, ptr nonnull %9)
  call void %60({ ptr, ptr, ptr, i32 } %50, { ptr, ptr, ptr, i32 } %50, ptr nonnull %8, i32 %.reg2mem3.0, { ptr, i160 } %4)
  ret void
}

define void @Array_throw_oob_xPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -5261542750394134544
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %result.i = tail call noalias dereferenceable_or_null(72) ptr @bump_malloc_inner(i64 noundef 72, ptr nonnull @current_ptr) #29
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  %7 = getelementptr inbounds i8, ptr %5, i64 24
  store ptr @Exception, ptr %5, align 8
  store ptr %result.i, ptr %6, align 8
  store i32 9, ptr %7, align 8
  %8 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %5)
  %9 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract)
  %10 = sext i32 %offset.i.i to i64
  %11 = getelementptr ptr, ptr %.fca.0.extract, i64 %10
  %12 = load ptr, ptr %11, align 8
  %13 = tail call ptr %12(ptr %.fca.1.extract)
  store i32 0, ptr %result.i, align 4
  %result.i.i = tail call noalias dereferenceable_or_null(7) ptr @bump_malloc_inner(i64 noundef 7, ptr nonnull @current_ptr) #29
  store <6 x i8> <i8 60, i8 78, i8 111, i8 110, i8 101, i8 62>, ptr %result.i.i, align 8
  %result.i2.i = tail call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  store ptr %result.i.i, ptr %result.i2.i, align 8
  %14 = getelementptr i8, ptr %result.i2.i, i64 8
  store i32 6, ptr %14, align 4
  %15 = getelementptr i8, ptr %result.i2.i, i64 12
  store i32 7, ptr %15, align 4
  %16 = getelementptr i8, ptr %result.i, i64 40
  store ptr @String, ptr %16, align 8
  %17 = getelementptr i8, ptr %result.i, i64 48
  store ptr %result.i2.i, ptr %17, align 8
  %18 = getelementptr i8, ptr %result.i, i64 64
  store i32 9, ptr %18, align 4
  %result.i17.i = tail call noalias dereferenceable_or_null(1) ptr @bump_malloc_inner(i64 noundef 1, ptr nonnull @current_ptr) #29
  %result.i18.i = tail call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  store ptr %result.i17.i, ptr %result.i18.i, align 8
  %19 = getelementptr i8, ptr %result.i18.i, i64 8
  store i32 0, ptr %19, align 4
  %20 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %21 = getelementptr i8, ptr %result.i18.i, i64 12
  store i32 1, ptr %21, align 4
  %22 = tail call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Exception)
  %23 = getelementptr i8, ptr %result.i, i64 8
  store ptr @String, ptr %23, align 8
  %24 = getelementptr i8, ptr %result.i, i64 16
  store ptr %result.i18.i, ptr %24, align 8
  %25 = getelementptr i8, ptr %result.i, i64 32
  store i32 9, ptr %25, align 4
  %result.i1 = tail call noalias dereferenceable_or_null(17) ptr @bump_malloc_inner(i64 noundef 17, ptr nonnull @current_ptr) #29
  store <16 x i8> <i8 99, i8 111, i8 108, i8 108, i8 101, i8 99, i8 116, i8 105, i8 111, i8 110, i8 115, i8 46, i8 109, i8 105, i8 110, i8 105>, ptr %result.i1, align 16
  %result.i2 = tail call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %26 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract)
  %27 = load ptr, ptr %11, align 8
  %28 = tail call ptr %27(ptr %.fca.1.extract)
  store ptr %result.i1, ptr %result.i2, align 8
  %29 = getelementptr i8, ptr %result.i2, i64 8
  store i32 16, ptr %29, align 4
  %30 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %31 = getelementptr i8, ptr %result.i2, i64 12
  store i32 17, ptr %31, align 4
  %32 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract)
  %33 = load ptr, ptr %11, align 8
  %34 = tail call ptr %33(ptr %.fca.1.extract)
  store i32 150, ptr %result.i, align 4
  %35 = tail call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Exception)
  store ptr @String, ptr %23, align 8
  store ptr %result.i2, ptr %24, align 8
  store i32 9, ptr %25, align 4
  %36 = load i160, ptr %6, align 8
  %37 = insertvalue { ptr, i160 } { ptr @Exception, i160 undef }, i160 %36, 1
  %current_coroutine.i = load ptr, ptr @current_coroutine, align 8
  %38 = getelementptr i8, ptr %current_coroutine.i, i64 48
  store { ptr, i160 } %37, ptr %38, align 8
  %into_callee_buf.i = getelementptr i8, ptr %current_coroutine.i, i64 8
  tail call preserve_nonecc void @context_switch(ptr nocapture writeonly %into_callee_buf.i, ptr nonnull @into_caller_buf) #32
  ret void
}

define { ptr, i160 } @Array_unchecked_index_xPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -5261542750394134544
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %5 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract2)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract2, i64 %6
  %8 = getelementptr i8, ptr %7, i64 8
  %9 = load ptr, ptr %8, align 8
  %10 = load ptr, ptr %9, align 8
  %11 = tail call { ptr } %10(ptr %.fca.1.extract)
  %.fca.0.extract = extractvalue { ptr } %11, 0
  %12 = sext i32 %3 to i64
  %13 = shl nsw i64 %12, 5
  %14 = getelementptr i8, ptr %.fca.0.extract, i64 %13
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %14, i64 8
  %17 = load i160, ptr %16, align 4
  %18 = insertvalue { ptr, i160 } undef, ptr %15, 0
  %19 = insertvalue { ptr, i160 } %18, i160 %17, 1
  ret { ptr, i160 } %19
}

define void @Array_unchecked_insert_xPtri32_valueT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3, { ptr, i160 } %4) {
  %.fca.0.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract5, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract5, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract5, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -5261542750394134544
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract4 = extractvalue { ptr, i160 } %4, 0
  %.fca.1.extract = extractvalue { ptr, i160 } %4, 1
  %6 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract5)
  %7 = sext i32 %offset.i.i to i64
  %8 = getelementptr ptr, ptr %.fca.0.extract5, i64 %7
  %9 = getelementptr i8, ptr %8, i64 8
  %10 = load ptr, ptr %9, align 8
  %11 = load ptr, ptr %10, align 8
  %12 = tail call { ptr } %11(ptr %.fca.1.extract6)
  %.fca.0.extract = extractvalue { ptr } %12, 0
  %13 = sext i32 %3 to i64
  %14 = shl nsw i64 %13, 5
  %15 = getelementptr i8, ptr %.fca.0.extract, i64 %14
  store ptr %.fca.0.extract4, ptr %15, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  store i160 %.fca.1.extract, ptr %16, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @Array_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -5261542750394134544
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %4 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract)
  %5 = sext i32 %offset.i.i to i64
  %6 = getelementptr ptr, ptr %.fca.0.extract, i64 %5
  %7 = load ptr, ptr %6, align 8
  %8 = tail call ptr %7(ptr %.fca.1.extract)
  %result.i = tail call noalias dereferenceable_or_null(48) ptr @bump_malloc_inner(i64 noundef 48, ptr nonnull @current_ptr) #29
  store ptr %8, ptr %result.i, align 8
  %9 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i)
  %10 = insertvalue { ptr, ptr, ptr, i32 } { ptr @ArrayIterator, ptr undef, ptr undef, i32 undef }, ptr %result.i, 1
  %11 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr undef, 2
  %12 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract)
  %13 = load ptr, ptr %6, align 8
  %14 = tail call ptr %13(ptr %.fca.1.extract)
  %15 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @ArrayIterator)
  %hash_coef.i.i59 = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i60 = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i61 = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i62 = mul i64 %hash_coef.i.i59, -5261542750394134544
  %shifted.i.i.i63 = lshr i64 %product.i.i.i62, 32
  %xored.i.i.i64 = xor i64 %shifted.i.i.i63, %product.i.i.i62
  %hash.i.i.i65 = and i64 %xored.i.i.i64, %tbl_size.i.i60
  %offset_ptr.i.i66 = getelementptr i32, ptr %offset_tbl.i.i61, i64 %hash.i.i.i65
  %offset.i.i54 = load i32, ptr %offset_ptr.i.i66, align 4
  %16 = getelementptr i8, ptr %result.i, i64 8
  store ptr %.fca.0.extract, ptr %16, align 8
  %17 = getelementptr i8, ptr %result.i, i64 16
  store ptr %.fca.1.extract, ptr %17, align 8
  %18 = getelementptr i8, ptr %result.i, i64 24
  store ptr %.fca.2.extract, ptr %18, align 8
  %19 = getelementptr i8, ptr %result.i, i64 32
  store i32 %offset.i.i54, ptr %19, align 4
  %20 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @ArrayIterator)
  %21 = getelementptr i8, ptr %result.i, i64 40
  store i32 0, ptr %21, align 4
  %22 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 16, 3
  ret { ptr, ptr, ptr, i32 } %22
}

define void @Iterable2_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr } %3) {
  %5 = alloca [0 x ptr], align 8
  %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract7 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 5693646204635713916
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract1 = extractvalue { ptr } %3, 0
  %6 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract3, 0
  %7 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr %.fca.1.extract5, 1
  %8 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %.fca.2.extract7, 2
  %9 = insertvalue { ptr, ptr, ptr, i32 } %8, i32 %offset.i.i, 3
  %10 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract3)
  %11 = sext i32 %offset.i.i to i64
  %12 = getelementptr ptr, ptr %.fca.0.extract3, i64 %11
  %13 = load ptr, ptr %12, align 8
  %14 = tail call ptr %13(ptr %.fca.1.extract5)
  %15 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %16 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract3)
  %17 = getelementptr i8, ptr %12, i64 8
  %18 = load ptr, ptr %17, align 8
  %19 = call ptr %18({ ptr, ptr, ptr, i32 } %9, ptr nonnull %5)
  %20 = call { ptr, ptr, ptr, i32 } %19({ ptr, ptr, ptr, i32 } %9, { ptr, ptr, ptr, i32 } %9, ptr nonnull %5)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %20, 2
  %hash_coef_ptr.i.i25 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i26 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i27 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i28 = load i64, ptr %hash_coef_ptr.i.i25, align 4
  %tbl_size.i.i29 = load i64, ptr %tbl_size_ptr.i.i26, align 4
  %offset_tbl.i.i30 = load ptr, ptr %offset_tbl_ptr.i.i27, align 8
  %product.i.i.i31 = mul i64 %hash_coef.i.i28, 4189192806087951739
  %shifted.i.i.i32 = lshr i64 %product.i.i.i31, 32
  %xored.i.i.i33 = xor i64 %shifted.i.i.i32, %product.i.i.i31
  %hash.i.i.i34 = and i64 %xored.i.i.i33, %tbl_size.i.i29
  %offset_ptr.i.i35 = getelementptr i32, ptr %offset_tbl.i.i30, i64 %hash.i.i.i34
  %offset.i.i50 = load i32, ptr %offset_ptr.i.i35, align 4
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %21, align 8
  %22 = getelementptr inbounds i8, ptr %21, i64 8
  store ptr %.fca.1.extract, ptr %22, align 8
  %23 = getelementptr inbounds i8, ptr %21, i64 16
  store ptr %.fca.2.extract, ptr %23, align 8
  %24 = getelementptr inbounds i8, ptr %21, i64 24
  store i32 %offset.i.i50, ptr %24, align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %21)
  %26 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %27 = call ptr @llvm.invariant.start.p0(i64 184, ptr nonnull %.fca.0.extract3)
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %._crit_edge, %4
  %28 = phi i32 [ %.pre62, %._crit_edge ], [ %offset.i.i50, %4 ]
  %29 = phi ptr [ %.pre61, %._crit_edge ], [ %.fca.2.extract, %4 ]
  %30 = phi ptr [ %.pre, %._crit_edge ], [ %.fca.1.extract, %4 ]
  %31 = insertvalue { ptr, ptr, ptr, i32 } %26, ptr %30, 1
  %32 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %29, 2
  %33 = insertvalue { ptr, ptr, ptr, i32 } %32, i32 %28, 3
  %34 = load ptr, ptr %12, align 8
  %35 = call ptr %34(ptr %.fca.1.extract5)
  %36 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %37 = call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %.fca.0.extract)
  %38 = sext i32 %28 to i64
  %gep = getelementptr ptr, ptr %hash_coef_ptr.i.i25, i64 %38
  %39 = load ptr, ptr %gep, align 8
  %40 = call ptr %39({ ptr, ptr, ptr, i32 } %33, ptr nonnull %5)
  %41 = call { ptr, i160 } %40({ ptr, ptr, ptr, i32 } %33, { ptr, ptr, ptr, i32 } %33, ptr nonnull %5)
  %.fca.0.extract18 = extractvalue { ptr, i160 } %41, 0
  %42 = icmp ne ptr %.fca.0.extract18, @nil_typ
  %43 = icmp ne ptr %.fca.0.extract18, null
  %.not23 = and i1 %42, %43
  br i1 %.not23, label %._crit_edge, label %.critedge

._crit_edge:                                      ; preds = %._crit_edge1
  call void %.fca.0.extract1({ ptr, i160 } %41)
  %.pre = load ptr, ptr %22, align 8
  %.pre61 = load ptr, ptr %23, align 8
  %.pre62 = load i32, ptr %24, align 8
  br label %._crit_edge1

.critedge:                                        ; preds = %._crit_edge1
  ret void
}

define { ptr, i160 } @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, i160 } %3, { ptr } %4) {
  %6 = alloca [0 x ptr], align 8
  %.fca.0.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract14 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract10, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract10, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract10, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 5693646204635713916
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract1 = extractvalue { ptr } %4, 0
  %7 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract10, 0
  %8 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %.fca.1.extract12, 1
  %9 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %.fca.2.extract14, 2
  %10 = insertvalue { ptr, ptr, ptr, i32 } %9, i32 %offset.i.i, 3
  %11 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract10)
  %12 = sext i32 %offset.i.i to i64
  %13 = getelementptr ptr, ptr %.fca.0.extract10, i64 %12
  %14 = load ptr, ptr %13, align 8
  %15 = tail call ptr %14(ptr %.fca.1.extract12)
  %16 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %6)
  %17 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract10)
  %18 = getelementptr i8, ptr %13, i64 8
  %19 = load ptr, ptr %18, align 8
  %20 = call ptr %19({ ptr, ptr, ptr, i32 } %10, ptr nonnull %6)
  %21 = call { ptr, ptr, ptr, i32 } %20({ ptr, ptr, ptr, i32 } %10, { ptr, ptr, ptr, i32 } %10, ptr nonnull %6)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %21, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %21, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %21, 2
  %hash_coef_ptr.i.i47 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i48 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i49 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i50 = load i64, ptr %hash_coef_ptr.i.i47, align 4
  %tbl_size.i.i51 = load i64, ptr %tbl_size_ptr.i.i48, align 4
  %offset_tbl.i.i52 = load ptr, ptr %offset_tbl_ptr.i.i49, align 8
  %product.i.i.i53 = mul i64 %hash_coef.i.i50, 4189192806087951739
  %shifted.i.i.i54 = lshr i64 %product.i.i.i53, 32
  %xored.i.i.i55 = xor i64 %shifted.i.i.i54, %product.i.i.i53
  %hash.i.i.i56 = and i64 %xored.i.i.i55, %tbl_size.i.i51
  %offset_ptr.i.i57 = getelementptr i32, ptr %offset_tbl.i.i52, i64 %hash.i.i.i56
  %offset.i.i72 = load i32, ptr %offset_ptr.i.i57, align 4
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %22, align 8
  %23 = getelementptr inbounds i8, ptr %22, i64 8
  store ptr %.fca.1.extract, ptr %23, align 8
  %24 = getelementptr inbounds i8, ptr %22, i64 16
  store ptr %.fca.2.extract, ptr %24, align 8
  %25 = getelementptr inbounds i8, ptr %22, i64 24
  store i32 %offset.i.i72, ptr %25, align 8
  %26 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %22)
  %27 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %28 = call ptr @llvm.invariant.start.p0(i64 184, ptr nonnull %.fca.0.extract10)
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %._crit_edge, %5
  %29 = phi i32 [ %offset.i.i72, %5 ], [ %.pre89, %._crit_edge ]
  %30 = phi ptr [ %.fca.2.extract, %5 ], [ %.pre88, %._crit_edge ]
  %31 = phi ptr [ %.fca.1.extract, %5 ], [ %.pre, %._crit_edge ]
  %.pn = phi { ptr, i160 } [ %3, %5 ], [ %45, %._crit_edge ]
  %32 = insertvalue { ptr, ptr, ptr, i32 } %27, ptr %31, 1
  %33 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %30, 2
  %34 = insertvalue { ptr, ptr, ptr, i32 } %33, i32 %29, 3
  %35 = load ptr, ptr %13, align 8
  %36 = call ptr %35(ptr %.fca.1.extract12)
  %37 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %6)
  %38 = call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %.fca.0.extract)
  %39 = sext i32 %29 to i64
  %gep = getelementptr ptr, ptr %hash_coef_ptr.i.i47, i64 %39
  %40 = load ptr, ptr %gep, align 8
  %41 = call ptr %40({ ptr, ptr, ptr, i32 } %34, ptr nonnull %6)
  %42 = call { ptr, i160 } %41({ ptr, ptr, ptr, i32 } %34, { ptr, ptr, ptr, i32 } %34, ptr nonnull %6)
  %.fca.0.extract38 = extractvalue { ptr, i160 } %42, 0
  %43 = icmp ne ptr %.fca.0.extract38, @nil_typ
  %44 = icmp ne ptr %.fca.0.extract38, null
  %.not45 = and i1 %43, %44
  br i1 %.not45, label %._crit_edge, label %46

._crit_edge:                                      ; preds = %._crit_edge1
  %45 = call { ptr, i160 } %.fca.0.extract1({ ptr, i160 } %.pn, { ptr, i160 } %42)
  %.pre = load ptr, ptr %23, align 8
  %.pre88 = load ptr, ptr %24, align 8
  %.pre89 = load i32, ptr %25, align 8
  br label %._crit_edge1

46:                                               ; preds = %._crit_edge1
  ret { ptr, i160 } %.pn
}

define noundef i1 @Iterable2_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr } %3) {
  %5 = alloca [0 x ptr], align 8
  %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract7 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 5693646204635713916
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract1 = extractvalue { ptr } %3, 0
  %6 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract3, 0
  %7 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr %.fca.1.extract5, 1
  %8 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %.fca.2.extract7, 2
  %9 = insertvalue { ptr, ptr, ptr, i32 } %8, i32 %offset.i.i, 3
  %10 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract3)
  %11 = sext i32 %offset.i.i to i64
  %12 = getelementptr ptr, ptr %.fca.0.extract3, i64 %11
  %13 = load ptr, ptr %12, align 8
  %14 = tail call ptr %13(ptr %.fca.1.extract5)
  %15 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %16 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract3)
  %17 = getelementptr i8, ptr %12, i64 8
  %18 = load ptr, ptr %17, align 8
  %19 = call ptr %18({ ptr, ptr, ptr, i32 } %9, ptr nonnull %5)
  %20 = call { ptr, ptr, ptr, i32 } %19({ ptr, ptr, ptr, i32 } %9, { ptr, ptr, ptr, i32 } %9, ptr nonnull %5)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %20, 2
  %hash_coef_ptr.i.i23 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i24 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i25 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i26 = load i64, ptr %hash_coef_ptr.i.i23, align 4
  %tbl_size.i.i27 = load i64, ptr %tbl_size_ptr.i.i24, align 4
  %offset_tbl.i.i28 = load ptr, ptr %offset_tbl_ptr.i.i25, align 8
  %product.i.i.i29 = mul i64 %hash_coef.i.i26, 4189192806087951739
  %shifted.i.i.i30 = lshr i64 %product.i.i.i29, 32
  %xored.i.i.i31 = xor i64 %shifted.i.i.i30, %product.i.i.i29
  %hash.i.i.i32 = and i64 %xored.i.i.i31, %tbl_size.i.i27
  %offset_ptr.i.i33 = getelementptr i32, ptr %offset_tbl.i.i28, i64 %hash.i.i.i32
  %offset.i.i48 = load i32, ptr %offset_ptr.i.i33, align 4
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %21, align 8
  %22 = getelementptr inbounds i8, ptr %21, i64 8
  store ptr %.fca.1.extract, ptr %22, align 8
  %23 = getelementptr inbounds i8, ptr %21, i64 16
  store ptr %.fca.2.extract, ptr %23, align 8
  %24 = getelementptr inbounds i8, ptr %21, i64 24
  store i32 %offset.i.i48, ptr %24, align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %21)
  %26 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %27 = call ptr @llvm.invariant.start.p0(i64 184, ptr nonnull %.fca.0.extract3)
  br label %28

28:                                               ; preds = %46, %4
  %29 = load ptr, ptr %22, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } %26, ptr %29, 1
  %31 = load ptr, ptr %23, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %31, 2
  %33 = load i32, ptr %24, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %32, i32 %33, 3
  %35 = load ptr, ptr %12, align 8
  %36 = call ptr %35(ptr %.fca.1.extract5)
  %37 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %38 = call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %.fca.0.extract)
  %39 = sext i32 %33 to i64
  %gep = getelementptr ptr, ptr %hash_coef_ptr.i.i23, i64 %39
  %40 = load ptr, ptr %gep, align 8
  %41 = call ptr %40({ ptr, ptr, ptr, i32 } %34, ptr nonnull %5)
  %42 = call { ptr, i160 } %41({ ptr, ptr, ptr, i32 } %34, { ptr, ptr, ptr, i32 } %34, ptr nonnull %5)
  %.fca.0.extract18 = extractvalue { ptr, i160 } %42, 0
  %43 = icmp eq ptr %.fca.0.extract18, @nil_typ
  %44 = icmp eq ptr %.fca.0.extract18, null
  %45 = or i1 %43, %44
  br i1 %45, label %.critedge.cont, label %46

46:                                               ; preds = %28
  %47 = call i1 %.fca.0.extract1({ ptr, i160 } %42)
  br i1 %47, label %28, label %.critedge.cont

.critedge.cont:                                   ; preds = %46, %28
  ret i1 %45
}

define noundef i1 @Iterable2_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr } %3) {
  %5 = alloca [0 x ptr], align 8
  %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract7 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 5693646204635713916
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract1 = extractvalue { ptr } %3, 0
  %6 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract3, 0
  %7 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr %.fca.1.extract5, 1
  %8 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %.fca.2.extract7, 2
  %9 = insertvalue { ptr, ptr, ptr, i32 } %8, i32 %offset.i.i, 3
  %10 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract3)
  %11 = sext i32 %offset.i.i to i64
  %12 = getelementptr ptr, ptr %.fca.0.extract3, i64 %11
  %13 = load ptr, ptr %12, align 8
  %14 = tail call ptr %13(ptr %.fca.1.extract5)
  %15 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %16 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract3)
  %17 = getelementptr i8, ptr %12, i64 8
  %18 = load ptr, ptr %17, align 8
  %19 = call ptr %18({ ptr, ptr, ptr, i32 } %9, ptr nonnull %5)
  %20 = call { ptr, ptr, ptr, i32 } %19({ ptr, ptr, ptr, i32 } %9, { ptr, ptr, ptr, i32 } %9, ptr nonnull %5)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %20, 2
  %hash_coef_ptr.i.i25 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i26 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i27 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i28 = load i64, ptr %hash_coef_ptr.i.i25, align 4
  %tbl_size.i.i29 = load i64, ptr %tbl_size_ptr.i.i26, align 4
  %offset_tbl.i.i30 = load ptr, ptr %offset_tbl_ptr.i.i27, align 8
  %product.i.i.i31 = mul i64 %hash_coef.i.i28, 4189192806087951739
  %shifted.i.i.i32 = lshr i64 %product.i.i.i31, 32
  %xored.i.i.i33 = xor i64 %shifted.i.i.i32, %product.i.i.i31
  %hash.i.i.i34 = and i64 %xored.i.i.i33, %tbl_size.i.i29
  %offset_ptr.i.i35 = getelementptr i32, ptr %offset_tbl.i.i30, i64 %hash.i.i.i34
  %offset.i.i50 = load i32, ptr %offset_ptr.i.i35, align 4
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %21, align 8
  %22 = getelementptr inbounds i8, ptr %21, i64 8
  store ptr %.fca.1.extract, ptr %22, align 8
  %23 = getelementptr inbounds i8, ptr %21, i64 16
  store ptr %.fca.2.extract, ptr %23, align 8
  %24 = getelementptr inbounds i8, ptr %21, i64 24
  store i32 %offset.i.i50, ptr %24, align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %21)
  %26 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %27 = call ptr @llvm.invariant.start.p0(i64 184, ptr nonnull %.fca.0.extract3)
  br label %28

28:                                               ; preds = %45, %4
  %29 = load ptr, ptr %22, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } %26, ptr %29, 1
  %31 = load ptr, ptr %23, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %31, 2
  %33 = load i32, ptr %24, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %32, i32 %33, 3
  %35 = load ptr, ptr %12, align 8
  %36 = call ptr %35(ptr %.fca.1.extract5)
  %37 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %38 = call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %.fca.0.extract)
  %39 = sext i32 %33 to i64
  %gep = getelementptr ptr, ptr %hash_coef_ptr.i.i25, i64 %39
  %40 = load ptr, ptr %gep, align 8
  %41 = call ptr %40({ ptr, ptr, ptr, i32 } %34, ptr nonnull %5)
  %42 = call { ptr, i160 } %41({ ptr, ptr, ptr, i32 } %34, { ptr, ptr, ptr, i32 } %34, ptr nonnull %5)
  %.fca.0.extract18 = extractvalue { ptr, i160 } %42, 0
  %43 = icmp ne ptr %.fca.0.extract18, @nil_typ
  %44 = icmp ne ptr %.fca.0.extract18, null
  %.not23 = and i1 %43, %44
  br i1 %.not23, label %45, label %.critedge.cont

45:                                               ; preds = %28
  %46 = call i1 %.fca.0.extract1({ ptr, i160 } %42)
  br i1 %46, label %.critedge.cont, label %28

.critedge.cont:                                   ; preds = %28, %45
  ret i1 %.not23
}

define { ptr, ptr, ptr, i32 } @Iterable2_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readonly %2, { ptr } %3) {
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 5693646204635713916
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %5 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract1)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract1, i64 %6
  %8 = load ptr, ptr %7, align 8
  %9 = tail call ptr %8(ptr %.fca.1.extract)
  %10 = load ptr, ptr %2, align 8
  %11 = getelementptr i8, ptr %10, i64 8
  %12 = load ptr, ptr %11, align 8
  %result.i = tail call noalias dereferenceable_or_null(56) ptr @bump_malloc_inner(i64 noundef 56, ptr nonnull @current_ptr) #29
  store ptr %9, ptr %result.i, align 8
  %13 = getelementptr i8, ptr %result.i, i64 8
  store ptr %12, ptr %13, align 8
  %14 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i)
  %15 = insertvalue { ptr, ptr, ptr, i32 } { ptr @MapIterable2, ptr undef, ptr undef, i32 undef }, ptr %result.i, 1
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, ptr undef, 2
  %17 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 9, 3
  %18 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract1)
  %19 = load ptr, ptr %7, align 8
  %20 = tail call ptr %19(ptr %.fca.1.extract)
  %21 = tail call ptr @llvm.invariant.start.p0(i64 408, ptr nonnull @MapIterable2)
  %hash_coef.i.i61 = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i62 = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i63 = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i64 = mul i64 %hash_coef.i.i61, 5693646204635713916
  %shifted.i.i.i65 = lshr i64 %product.i.i.i64, 32
  %xored.i.i.i66 = xor i64 %shifted.i.i.i65, %product.i.i.i64
  %hash.i.i.i67 = and i64 %xored.i.i.i66, %tbl_size.i.i62
  %offset_ptr.i.i68 = getelementptr i32, ptr %offset_tbl.i.i63, i64 %hash.i.i.i67
  %offset.i.i56 = load i32, ptr %offset_ptr.i.i68, align 4
  %22 = getelementptr i8, ptr %result.i, i64 16
  store ptr %.fca.0.extract1, ptr %22, align 8
  %23 = getelementptr i8, ptr %result.i, i64 24
  store ptr %.fca.1.extract, ptr %23, align 8
  %24 = getelementptr i8, ptr %result.i, i64 32
  store ptr %.fca.2.extract, ptr %24, align 8
  %25 = getelementptr i8, ptr %result.i, i64 40
  store i32 %offset.i.i56, ptr %25, align 4
  %26 = tail call ptr @llvm.invariant.start.p0(i64 408, ptr nonnull @MapIterable2)
  %27 = getelementptr i8, ptr %result.i, i64 48
  %.fca.0.extract.i = extractvalue { ptr } %3, 0
  store ptr %.fca.0.extract.i, ptr %27, align 8
  ret { ptr, ptr, ptr, i32 } %17
}

define { ptr, ptr, ptr, i32 } @Iterable2_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr } %3) {
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 5693646204635713916
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %5 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract1)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract1, i64 %6
  %8 = load ptr, ptr %7, align 8
  %9 = tail call ptr %8(ptr %.fca.1.extract)
  %result.i = tail call noalias dereferenceable_or_null(48) ptr @bump_malloc_inner(i64 noundef 48, ptr nonnull @current_ptr) #29
  store ptr %9, ptr %result.i, align 8
  %10 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i)
  %11 = insertvalue { ptr, ptr, ptr, i32 } { ptr @FilterIterable2, ptr undef, ptr undef, i32 undef }, ptr %result.i, 1
  %12 = insertvalue { ptr, ptr, ptr, i32 } %11, ptr undef, 2
  %13 = insertvalue { ptr, ptr, ptr, i32 } %12, i32 9, 3
  %14 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract1)
  %15 = load ptr, ptr %7, align 8
  %16 = tail call ptr %15(ptr %.fca.1.extract)
  %17 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr nonnull @FilterIterable2)
  %hash_coef.i.i61 = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i62 = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i63 = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i64 = mul i64 %hash_coef.i.i61, 5693646204635713916
  %shifted.i.i.i65 = lshr i64 %product.i.i.i64, 32
  %xored.i.i.i66 = xor i64 %shifted.i.i.i65, %product.i.i.i64
  %hash.i.i.i67 = and i64 %xored.i.i.i66, %tbl_size.i.i62
  %offset_ptr.i.i68 = getelementptr i32, ptr %offset_tbl.i.i63, i64 %hash.i.i.i67
  %offset.i.i56 = load i32, ptr %offset_ptr.i.i68, align 4
  %18 = getelementptr i8, ptr %result.i, i64 8
  store ptr %.fca.0.extract1, ptr %18, align 8
  %19 = getelementptr i8, ptr %result.i, i64 16
  store ptr %.fca.1.extract, ptr %19, align 8
  %20 = getelementptr i8, ptr %result.i, i64 24
  store ptr %.fca.2.extract, ptr %20, align 8
  %21 = getelementptr i8, ptr %result.i, i64 32
  store i32 %offset.i.i56, ptr %21, align 4
  %22 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr nonnull @FilterIterable2)
  %23 = getelementptr i8, ptr %result.i, i64 40
  %.fca.0.extract.i = extractvalue { ptr } %3, 0
  store ptr %.fca.0.extract.i, ptr %23, align 8
  ret { ptr, ptr, ptr, i32 } %13
}

define { ptr, ptr, ptr, i32 } @Iterable2_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 5693646204635713916
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %hash_coef_ptr.i.i10 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i11 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i12 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %5 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract1)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract1, i64 %6
  %8 = load ptr, ptr %7, align 8
  %9 = tail call ptr %8(ptr %.fca.1.extract3)
  %result.i = tail call noalias dereferenceable_or_null(72) ptr @bump_malloc_inner(i64 noundef 72, ptr nonnull @current_ptr) #29
  store ptr %9, ptr %result.i, align 8
  %10 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i)
  %11 = insertvalue { ptr, ptr, ptr, i32 } { ptr @ChainIterable2, ptr undef, ptr undef, i32 undef }, ptr %result.i, 1
  %12 = insertvalue { ptr, ptr, ptr, i32 } %11, ptr undef, 2
  %13 = insertvalue { ptr, ptr, ptr, i32 } %12, i32 9, 3
  %14 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract1)
  %15 = load ptr, ptr %7, align 8
  %16 = tail call ptr %15(ptr %.fca.1.extract3)
  %17 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr nonnull @ChainIterable2)
  %hash_coef.i.i132 = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i133 = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i134 = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i135 = mul i64 %hash_coef.i.i132, 5693646204635713916
  %shifted.i.i.i136 = lshr i64 %product.i.i.i135, 32
  %xored.i.i.i137 = xor i64 %shifted.i.i.i136, %product.i.i.i135
  %hash.i.i.i138 = and i64 %xored.i.i.i137, %tbl_size.i.i133
  %offset_ptr.i.i139 = getelementptr i32, ptr %offset_tbl.i.i134, i64 %hash.i.i.i138
  %offset.i.i126 = load i32, ptr %offset_ptr.i.i139, align 4
  %18 = getelementptr i8, ptr %result.i, i64 8
  store ptr %.fca.0.extract1, ptr %18, align 8
  %19 = getelementptr i8, ptr %result.i, i64 16
  store ptr %.fca.1.extract3, ptr %19, align 8
  %20 = getelementptr i8, ptr %result.i, i64 24
  store ptr %.fca.2.extract5, ptr %20, align 8
  %21 = getelementptr i8, ptr %result.i, i64 32
  store i32 %offset.i.i126, ptr %21, align 4
  %hash_coef.i.i104 = load i64, ptr %hash_coef_ptr.i.i10, align 4
  %tbl_size.i.i105 = load i64, ptr %tbl_size_ptr.i.i11, align 4
  %offset_tbl.i.i106 = load ptr, ptr %offset_tbl_ptr.i.i12, align 8
  %product.i.i.i107 = mul i64 %hash_coef.i.i104, 5693646204635713916
  %shifted.i.i.i108 = lshr i64 %product.i.i.i107, 32
  %xored.i.i.i109 = xor i64 %shifted.i.i.i108, %product.i.i.i107
  %hash.i.i.i110 = and i64 %xored.i.i.i109, %tbl_size.i.i105
  %offset_ptr.i.i111 = getelementptr i32, ptr %offset_tbl.i.i106, i64 %hash.i.i.i110
  %offset.i.i99 = load i32, ptr %offset_ptr.i.i111, align 4
  %22 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr nonnull @ChainIterable2)
  %23 = getelementptr i8, ptr %result.i, i64 40
  store ptr %.fca.0.extract, ptr %23, align 8
  %24 = getelementptr i8, ptr %result.i, i64 48
  store ptr %.fca.1.extract, ptr %24, align 8
  %25 = getelementptr i8, ptr %result.i, i64 56
  store ptr %.fca.2.extract, ptr %25, align 8
  %26 = getelementptr i8, ptr %result.i, i64 64
  store i32 %offset.i.i99, ptr %26, align 4
  ret { ptr, ptr, ptr, i32 } %13
}

define { ptr, ptr, ptr, i32 } @Iterable2_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 5693646204635713916
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %hash_coef_ptr.i.i10 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i11 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i12 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %5 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract1)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract1, i64 %6
  %8 = load ptr, ptr %7, align 8
  %9 = tail call ptr %8(ptr %.fca.1.extract3)
  %result.i = tail call noalias dereferenceable_or_null(72) ptr @bump_malloc_inner(i64 noundef 72, ptr nonnull @current_ptr) #29
  store ptr %9, ptr %result.i, align 8
  %10 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i)
  %11 = insertvalue { ptr, ptr, ptr, i32 } { ptr @InterleaveIterable2, ptr undef, ptr undef, i32 undef }, ptr %result.i, 1
  %12 = insertvalue { ptr, ptr, ptr, i32 } %11, ptr undef, 2
  %13 = insertvalue { ptr, ptr, ptr, i32 } %12, i32 9, 3
  %14 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract1)
  %15 = load ptr, ptr %7, align 8
  %16 = tail call ptr %15(ptr %.fca.1.extract3)
  %17 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr nonnull @InterleaveIterable2)
  %hash_coef.i.i132 = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i133 = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i134 = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i135 = mul i64 %hash_coef.i.i132, 5693646204635713916
  %shifted.i.i.i136 = lshr i64 %product.i.i.i135, 32
  %xored.i.i.i137 = xor i64 %shifted.i.i.i136, %product.i.i.i135
  %hash.i.i.i138 = and i64 %xored.i.i.i137, %tbl_size.i.i133
  %offset_ptr.i.i139 = getelementptr i32, ptr %offset_tbl.i.i134, i64 %hash.i.i.i138
  %offset.i.i126 = load i32, ptr %offset_ptr.i.i139, align 4
  %18 = getelementptr i8, ptr %result.i, i64 8
  store ptr %.fca.0.extract1, ptr %18, align 8
  %19 = getelementptr i8, ptr %result.i, i64 16
  store ptr %.fca.1.extract3, ptr %19, align 8
  %20 = getelementptr i8, ptr %result.i, i64 24
  store ptr %.fca.2.extract5, ptr %20, align 8
  %21 = getelementptr i8, ptr %result.i, i64 32
  store i32 %offset.i.i126, ptr %21, align 4
  %hash_coef.i.i104 = load i64, ptr %hash_coef_ptr.i.i10, align 4
  %tbl_size.i.i105 = load i64, ptr %tbl_size_ptr.i.i11, align 4
  %offset_tbl.i.i106 = load ptr, ptr %offset_tbl_ptr.i.i12, align 8
  %product.i.i.i107 = mul i64 %hash_coef.i.i104, 5693646204635713916
  %shifted.i.i.i108 = lshr i64 %product.i.i.i107, 32
  %xored.i.i.i109 = xor i64 %shifted.i.i.i108, %product.i.i.i107
  %hash.i.i.i110 = and i64 %xored.i.i.i109, %tbl_size.i.i105
  %offset_ptr.i.i111 = getelementptr i32, ptr %offset_tbl.i.i106, i64 %hash.i.i.i110
  %offset.i.i99 = load i32, ptr %offset_ptr.i.i111, align 4
  %22 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr nonnull @InterleaveIterable2)
  %23 = getelementptr i8, ptr %result.i, i64 40
  store ptr %.fca.0.extract, ptr %23, align 8
  %24 = getelementptr i8, ptr %result.i, i64 48
  store ptr %.fca.1.extract, ptr %24, align 8
  %25 = getelementptr i8, ptr %result.i, i64 56
  store ptr %.fca.2.extract, ptr %25, align 8
  %26 = getelementptr i8, ptr %result.i, i64 64
  store i32 %offset.i.i99, ptr %26, align 4
  ret { ptr, ptr, ptr, i32 } %13
}

define { ptr, ptr, ptr, i32 } @Iterable2_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %.fca.0.extract17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract19 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract21 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract17, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract17, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract17, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 5693646204635713916
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract13 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract15 = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %hash_coef_ptr.i.i26 = getelementptr i8, ptr %.fca.0.extract9, i64 8
  %tbl_size_ptr.i.i27 = getelementptr i8, ptr %.fca.0.extract9, i64 16
  %offset_tbl_ptr.i.i28 = getelementptr i8, ptr %.fca.0.extract9, i64 40
  %5 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract17)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract17, i64 %6
  %8 = load ptr, ptr %7, align 8
  %9 = tail call ptr %8(ptr %.fca.1.extract19)
  %10 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract9)
  %11 = sext i32 %.fca.3.extract15 to i64
  %12 = getelementptr ptr, ptr %.fca.0.extract9, i64 %11
  %13 = load ptr, ptr %12, align 8
  %14 = tail call ptr %13(ptr %.fca.1.extract11)
  %result.i = tail call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %15 = getelementptr i8, ptr %result.i, i64 16
  store ptr %14, ptr %15, align 8
  %16 = getelementptr i8, ptr %result.i, i64 8
  store ptr %9, ptr %16, align 8
  %17 = getelementptr i8, ptr %result.i, i64 24
  store ptr null, ptr %17, align 8
  %18 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i)
  store ptr @Pair, ptr %result.i, align 8
  %result.i39 = tail call noalias dereferenceable_or_null(88) ptr @bump_malloc_inner(i64 noundef 88, ptr nonnull @current_ptr) #29
  store ptr %9, ptr %result.i39, align 8
  %19 = getelementptr i8, ptr %result.i39, i64 8
  store ptr %14, ptr %19, align 8
  %20 = getelementptr i8, ptr %result.i39, i64 16
  store ptr %result.i, ptr %20, align 8
  %21 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %result.i39)
  %22 = insertvalue { ptr, ptr, ptr, i32 } { ptr @ZipIterable2, ptr undef, ptr undef, i32 undef }, ptr %result.i39, 1
  %23 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr undef, 2
  %24 = insertvalue { ptr, ptr, ptr, i32 } %23, i32 9, 3
  %25 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract17)
  %26 = load ptr, ptr %7, align 8
  %27 = tail call ptr %26(ptr %.fca.1.extract19)
  %28 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract9)
  %29 = load ptr, ptr %12, align 8
  %30 = tail call ptr %29(ptr %.fca.1.extract11)
  %31 = tail call ptr @llvm.invariant.start.p0(i64 416, ptr nonnull @ZipIterable2)
  %hash_coef.i.i148 = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i149 = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i150 = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i151 = mul i64 %hash_coef.i.i148, 5693646204635713916
  %shifted.i.i.i152 = lshr i64 %product.i.i.i151, 32
  %xored.i.i.i153 = xor i64 %shifted.i.i.i152, %product.i.i.i151
  %hash.i.i.i154 = and i64 %xored.i.i.i153, %tbl_size.i.i149
  %offset_ptr.i.i155 = getelementptr i32, ptr %offset_tbl.i.i150, i64 %hash.i.i.i154
  %offset.i.i142 = load i32, ptr %offset_ptr.i.i155, align 4
  %32 = getelementptr i8, ptr %result.i39, i64 24
  store ptr %.fca.0.extract17, ptr %32, align 8
  %33 = getelementptr i8, ptr %result.i39, i64 32
  store ptr %.fca.1.extract19, ptr %33, align 8
  %34 = getelementptr i8, ptr %result.i39, i64 40
  store ptr %.fca.2.extract21, ptr %34, align 8
  %35 = getelementptr i8, ptr %result.i39, i64 48
  store i32 %offset.i.i142, ptr %35, align 4
  %hash_coef.i.i120 = load i64, ptr %hash_coef_ptr.i.i26, align 4
  %tbl_size.i.i121 = load i64, ptr %tbl_size_ptr.i.i27, align 4
  %offset_tbl.i.i122 = load ptr, ptr %offset_tbl_ptr.i.i28, align 8
  %product.i.i.i123 = mul i64 %hash_coef.i.i120, 5693646204635713916
  %shifted.i.i.i124 = lshr i64 %product.i.i.i123, 32
  %xored.i.i.i125 = xor i64 %shifted.i.i.i124, %product.i.i.i123
  %hash.i.i.i126 = and i64 %xored.i.i.i125, %tbl_size.i.i121
  %offset_ptr.i.i127 = getelementptr i32, ptr %offset_tbl.i.i122, i64 %hash.i.i.i126
  %offset.i.i115 = load i32, ptr %offset_ptr.i.i127, align 4
  %36 = tail call ptr @llvm.invariant.start.p0(i64 416, ptr nonnull @ZipIterable2)
  %37 = getelementptr i8, ptr %result.i39, i64 56
  store ptr %.fca.0.extract9, ptr %37, align 8
  %38 = getelementptr i8, ptr %result.i39, i64 64
  store ptr %.fca.1.extract11, ptr %38, align 8
  %39 = getelementptr i8, ptr %result.i39, i64 72
  store ptr %.fca.2.extract13, ptr %39, align 8
  %40 = getelementptr i8, ptr %result.i39, i64 80
  store i32 %offset.i.i115, ptr %40, align 4
  ret { ptr, ptr, ptr, i32 } %24
}

define { ptr, ptr, ptr, i32 } @Iterable2_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %.fca.0.extract17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract19 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract21 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract17, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract17, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract17, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 5693646204635713916
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract13 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract15 = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %hash_coef_ptr.i.i26 = getelementptr i8, ptr %.fca.0.extract9, i64 8
  %tbl_size_ptr.i.i27 = getelementptr i8, ptr %.fca.0.extract9, i64 16
  %offset_tbl_ptr.i.i28 = getelementptr i8, ptr %.fca.0.extract9, i64 40
  %5 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract17)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract17, i64 %6
  %8 = load ptr, ptr %7, align 8
  %9 = tail call ptr %8(ptr %.fca.1.extract19)
  %10 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract9)
  %11 = sext i32 %.fca.3.extract15 to i64
  %12 = getelementptr ptr, ptr %.fca.0.extract9, i64 %11
  %13 = load ptr, ptr %12, align 8
  %14 = tail call ptr %13(ptr %.fca.1.extract11)
  %result.i = tail call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %15 = getelementptr i8, ptr %result.i, i64 16
  store ptr %14, ptr %15, align 8
  %16 = getelementptr i8, ptr %result.i, i64 8
  store ptr %9, ptr %16, align 8
  %17 = getelementptr i8, ptr %result.i, i64 24
  store ptr null, ptr %17, align 8
  %18 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i)
  store ptr @Pair, ptr %result.i, align 8
  %result.i39 = tail call noalias dereferenceable_or_null(88) ptr @bump_malloc_inner(i64 noundef 88, ptr nonnull @current_ptr) #29
  store ptr %9, ptr %result.i39, align 8
  %19 = getelementptr i8, ptr %result.i39, i64 8
  store ptr %14, ptr %19, align 8
  %20 = getelementptr i8, ptr %result.i39, i64 16
  store ptr %result.i, ptr %20, align 8
  %21 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %result.i39)
  %22 = insertvalue { ptr, ptr, ptr, i32 } { ptr @ProductIterable2, ptr undef, ptr undef, i32 undef }, ptr %result.i39, 1
  %23 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr undef, 2
  %24 = insertvalue { ptr, ptr, ptr, i32 } %23, i32 9, 3
  %25 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract17)
  %26 = load ptr, ptr %7, align 8
  %27 = tail call ptr %26(ptr %.fca.1.extract19)
  %28 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract9)
  %29 = load ptr, ptr %12, align 8
  %30 = tail call ptr %29(ptr %.fca.1.extract11)
  %31 = tail call ptr @llvm.invariant.start.p0(i64 416, ptr nonnull @ProductIterable2)
  %hash_coef.i.i148 = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i149 = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i150 = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i151 = mul i64 %hash_coef.i.i148, 5693646204635713916
  %shifted.i.i.i152 = lshr i64 %product.i.i.i151, 32
  %xored.i.i.i153 = xor i64 %shifted.i.i.i152, %product.i.i.i151
  %hash.i.i.i154 = and i64 %xored.i.i.i153, %tbl_size.i.i149
  %offset_ptr.i.i155 = getelementptr i32, ptr %offset_tbl.i.i150, i64 %hash.i.i.i154
  %offset.i.i142 = load i32, ptr %offset_ptr.i.i155, align 4
  %32 = getelementptr i8, ptr %result.i39, i64 24
  store ptr %.fca.0.extract17, ptr %32, align 8
  %33 = getelementptr i8, ptr %result.i39, i64 32
  store ptr %.fca.1.extract19, ptr %33, align 8
  %34 = getelementptr i8, ptr %result.i39, i64 40
  store ptr %.fca.2.extract21, ptr %34, align 8
  %35 = getelementptr i8, ptr %result.i39, i64 48
  store i32 %offset.i.i142, ptr %35, align 4
  %hash_coef.i.i120 = load i64, ptr %hash_coef_ptr.i.i26, align 4
  %tbl_size.i.i121 = load i64, ptr %tbl_size_ptr.i.i27, align 4
  %offset_tbl.i.i122 = load ptr, ptr %offset_tbl_ptr.i.i28, align 8
  %product.i.i.i123 = mul i64 %hash_coef.i.i120, 5693646204635713916
  %shifted.i.i.i124 = lshr i64 %product.i.i.i123, 32
  %xored.i.i.i125 = xor i64 %shifted.i.i.i124, %product.i.i.i123
  %hash.i.i.i126 = and i64 %xored.i.i.i125, %tbl_size.i.i121
  %offset_ptr.i.i127 = getelementptr i32, ptr %offset_tbl.i.i122, i64 %hash.i.i.i126
  %offset.i.i115 = load i32, ptr %offset_ptr.i.i127, align 4
  %36 = tail call ptr @llvm.invariant.start.p0(i64 416, ptr nonnull @ProductIterable2)
  %37 = getelementptr i8, ptr %result.i39, i64 56
  store ptr %.fca.0.extract9, ptr %37, align 8
  %38 = getelementptr i8, ptr %result.i39, i64 64
  store ptr %.fca.1.extract11, ptr %38, align 8
  %39 = getelementptr i8, ptr %result.i39, i64 72
  store ptr %.fca.2.extract13, ptr %39, align 8
  %40 = getelementptr i8, ptr %result.i39, i64 80
  store i32 %offset.i.i115, ptr %40, align 4
  ret { ptr, ptr, ptr, i32 } %24
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_ProductIterable2(ptr nocapture readnone %0) #5 {
  ret { i64, i64 } { i64 88, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ProductIterable2_field_ProductIterable2_0(ptr nocapture readonly %0) #0 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ProductIterable2_field_ProductIterable2_1(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ProductIterable2_field_ProductIterable2_2(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ProductIterable2_B_init_firstIterable2T_secondIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 208
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ProductIterable2_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 216
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ProductIterable2_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 224
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ProductIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 232
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ProductIterable2_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 240
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ProductIterable2_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 248
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ProductIterable2_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 256
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ProductIterable2_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 264
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ProductIterable2_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 272
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ProductIterable2_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 280
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ProductIterable2_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 288
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ProductIterable2_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 296
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @ProductIterable2_init_firstIterable2T_secondIterable2U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 7827074759551300494
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %hash_coef_ptr.i.i18 = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i19 = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i20 = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i21 = load i64, ptr %hash_coef_ptr.i.i18, align 4
  %tbl_size.i.i22 = load i64, ptr %tbl_size_ptr.i.i19, align 4
  %offset_tbl.i.i23 = load ptr, ptr %offset_tbl_ptr.i.i20, align 8
  %product.i.i.i24 = mul i64 %hash_coef.i.i21, 5693646204635713916
  %shifted.i.i.i25 = lshr i64 %product.i.i.i24, 32
  %xored.i.i.i26 = xor i64 %shifted.i.i.i25, %product.i.i.i24
  %hash.i.i.i27 = and i64 %xored.i.i.i26, %tbl_size.i.i22
  %offset_ptr.i.i28 = getelementptr i32, ptr %offset_tbl.i.i23, i64 %hash.i.i.i27
  %offset.i.i43 = load i32, ptr %offset_ptr.i.i28, align 4
  %6 = tail call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract9)
  %7 = sext i32 %offset.i.i to i64
  %8 = getelementptr ptr, ptr %.fca.0.extract9, i64 %7
  %9 = getelementptr i8, ptr %8, i64 24
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr i8, ptr %10, i64 8
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.1.extract3, 1
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, ptr %.fca.2.extract5, 2
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, i32 %offset.i.i43, 3
  tail call void %12(ptr %.fca.1.extract11, { ptr, ptr, ptr, i32 } %16)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %hash_coef_ptr.i.i46 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i47 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i48 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i49 = load i64, ptr %hash_coef_ptr.i.i46, align 4
  %tbl_size.i.i50 = load i64, ptr %tbl_size_ptr.i.i47, align 4
  %offset_tbl.i.i51 = load ptr, ptr %offset_tbl_ptr.i.i48, align 8
  %product.i.i.i52 = mul i64 %hash_coef.i.i49, 5693646204635713916
  %shifted.i.i.i53 = lshr i64 %product.i.i.i52, 32
  %xored.i.i.i54 = xor i64 %shifted.i.i.i53, %product.i.i.i52
  %hash.i.i.i55 = and i64 %xored.i.i.i54, %tbl_size.i.i50
  %offset_ptr.i.i56 = getelementptr i32, ptr %offset_tbl.i.i51, i64 %hash.i.i.i55
  %offset.i.i71 = load i32, ptr %offset_ptr.i.i56, align 4
  %17 = tail call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract9)
  %18 = getelementptr i8, ptr %8, i64 32
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr i8, ptr %19, i64 8
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %23 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %.fca.1.extract, 1
  %24 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %.fca.2.extract, 2
  %25 = insertvalue { ptr, ptr, ptr, i32 } %24, i32 %offset.i.i71, 3
  tail call void %21(ptr %.fca.1.extract11, { ptr, ptr, ptr, i32 } %25)
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterable2_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract41 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract43 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract41, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract41, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract41, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 7827074759551300494
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %5 = tail call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract41)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract41, i64 %6
  %8 = getelementptr i8, ptr %7, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = load ptr, ptr %9, align 8
  %11 = tail call { ptr, ptr, ptr, i32 } %10(ptr %.fca.1.extract43)
  %.fca.0.extract33 = extractvalue { ptr, ptr, ptr, i32 } %11, 0
  %.fca.1.extract35 = extractvalue { ptr, ptr, ptr, i32 } %11, 1
  %.fca.2.extract37 = extractvalue { ptr, ptr, ptr, i32 } %11, 2
  %.fca.3.extract39 = extractvalue { ptr, ptr, ptr, i32 } %11, 3
  %hash_coef_ptr.i.i50 = getelementptr i8, ptr %.fca.0.extract33, i64 8
  %tbl_size_ptr.i.i51 = getelementptr i8, ptr %.fca.0.extract33, i64 16
  %offset_tbl_ptr.i.i52 = getelementptr i8, ptr %.fca.0.extract33, i64 40
  %hash_coef.i.i53 = load i64, ptr %hash_coef_ptr.i.i50, align 4
  %tbl_size.i.i54 = load i64, ptr %tbl_size_ptr.i.i51, align 4
  %offset_tbl.i.i55 = load ptr, ptr %offset_tbl_ptr.i.i52, align 8
  %product.i.i.i56 = mul i64 %hash_coef.i.i53, 5693646204635713916
  %shifted.i.i.i57 = lshr i64 %product.i.i.i56, 32
  %xored.i.i.i58 = xor i64 %shifted.i.i.i57, %product.i.i.i56
  %hash.i.i.i59 = and i64 %xored.i.i.i58, %tbl_size.i.i54
  %offset_ptr.i.i60 = getelementptr i32, ptr %offset_tbl.i.i55, i64 %hash.i.i.i59
  %offset.i.i61 = load i32, ptr %offset_ptr.i.i60, align 4
  %eq.i = icmp eq i32 %.fca.3.extract39, %offset.i.i61
  tail call void @llvm.assume(i1 %eq.i) #30
  %12 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract33, 0
  %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.1.extract35, 1
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.2.extract37, 2
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, i32 %.fca.3.extract39, 3
  %16 = tail call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract41)
  %17 = load ptr, ptr %7, align 8
  %18 = tail call ptr %17(ptr %.fca.1.extract43)
  %19 = tail call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract41)
  %20 = getelementptr i8, ptr %7, i64 8
  %21 = load ptr, ptr %20, align 8
  %22 = tail call ptr %21(ptr %.fca.1.extract43)
  %23 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %24 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract33)
  %25 = sext i32 %.fca.3.extract39 to i64
  %26 = getelementptr ptr, ptr %.fca.0.extract33, i64 %25
  %27 = getelementptr i8, ptr %26, i64 8
  %28 = load ptr, ptr %27, align 8
  %29 = call ptr %28({ ptr, ptr, ptr, i32 } %15, ptr nonnull %4)
  %30 = call { ptr, ptr, ptr, i32 } %29({ ptr, ptr, ptr, i32 } %15, { ptr, ptr, ptr, i32 } %15, ptr nonnull %4)
  %31 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract41)
  %32 = getelementptr i8, ptr %7, i64 32
  %33 = load ptr, ptr %32, align 8
  %34 = load ptr, ptr %33, align 8
  %35 = call { ptr, ptr, ptr, i32 } %34(ptr %.fca.1.extract43)
  %.fca.0.extract17 = extractvalue { ptr, ptr, ptr, i32 } %35, 0
  %.fca.3.extract23 = extractvalue { ptr, ptr, ptr, i32 } %35, 3
  %hash_coef_ptr.i.i78 = getelementptr i8, ptr %.fca.0.extract17, i64 8
  %tbl_size_ptr.i.i79 = getelementptr i8, ptr %.fca.0.extract17, i64 16
  %offset_tbl_ptr.i.i80 = getelementptr i8, ptr %.fca.0.extract17, i64 40
  %hash_coef.i.i81 = load i64, ptr %hash_coef_ptr.i.i78, align 4
  %tbl_size.i.i82 = load i64, ptr %tbl_size_ptr.i.i79, align 4
  %offset_tbl.i.i83 = load ptr, ptr %offset_tbl_ptr.i.i80, align 8
  %product.i.i.i84 = mul i64 %hash_coef.i.i81, 5693646204635713916
  %shifted.i.i.i85 = lshr i64 %product.i.i.i84, 32
  %xored.i.i.i86 = xor i64 %shifted.i.i.i85, %product.i.i.i84
  %hash.i.i.i87 = and i64 %xored.i.i.i86, %tbl_size.i.i82
  %offset_ptr.i.i88 = getelementptr i32, ptr %offset_tbl.i.i83, i64 %hash.i.i.i87
  %offset.i.i89 = load i32, ptr %offset_ptr.i.i88, align 4
  %eq.i92 = icmp eq i32 %.fca.3.extract23, %offset.i.i89
  call void @llvm.assume(i1 %eq.i92) #30
  %36 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract41)
  %37 = load ptr, ptr %7, align 8
  %38 = call ptr %37(ptr %.fca.1.extract43)
  %39 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract41)
  %40 = load ptr, ptr %20, align 8
  %41 = call ptr %40(ptr %.fca.1.extract43)
  %result.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %42 = getelementptr i8, ptr %result.i, i64 16
  store ptr %41, ptr %42, align 8
  %43 = getelementptr i8, ptr %result.i, i64 8
  store ptr %38, ptr %43, align 8
  %44 = getelementptr i8, ptr %result.i, i64 24
  store ptr null, ptr %44, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i)
  store ptr @Pair, ptr %result.i, align 8
  %result.i93 = call noalias dereferenceable_or_null(152) ptr @bump_malloc_inner(i64 noundef 152, ptr nonnull @current_ptr) #29
  store ptr %38, ptr %result.i93, align 8
  %46 = getelementptr i8, ptr %result.i93, i64 8
  store ptr %41, ptr %46, align 8
  %47 = getelementptr i8, ptr %result.i93, i64 16
  store ptr %result.i, ptr %47, align 8
  %48 = call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %result.i93)
  %49 = alloca { ptr, ptr, ptr, i32 }, align 8
  %50 = getelementptr inbounds i8, ptr %49, i64 8
  %51 = getelementptr inbounds i8, ptr %49, i64 24
  store ptr @ProductIterator2, ptr %49, align 8
  store ptr %result.i93, ptr %50, align 8
  store i32 9, ptr %51, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %49)
  %53 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract41)
  %54 = load ptr, ptr %8, align 8
  %55 = load ptr, ptr %54, align 8
  %56 = call { ptr, ptr, ptr, i32 } %55(ptr %.fca.1.extract43)
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %56, 0
  %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %56, 1
  %.fca.2.extract13 = extractvalue { ptr, ptr, ptr, i32 } %56, 2
  %.fca.3.extract15 = extractvalue { ptr, ptr, ptr, i32 } %56, 3
  %hash_coef_ptr.i.i95 = getelementptr i8, ptr %.fca.0.extract9, i64 8
  %tbl_size_ptr.i.i96 = getelementptr i8, ptr %.fca.0.extract9, i64 16
  %offset_tbl_ptr.i.i97 = getelementptr i8, ptr %.fca.0.extract9, i64 40
  %hash_coef.i.i98 = load i64, ptr %hash_coef_ptr.i.i95, align 4
  %tbl_size.i.i99 = load i64, ptr %tbl_size_ptr.i.i96, align 4
  %offset_tbl.i.i100 = load ptr, ptr %offset_tbl_ptr.i.i97, align 8
  %product.i.i.i101 = mul i64 %hash_coef.i.i98, 5693646204635713916
  %shifted.i.i.i102 = lshr i64 %product.i.i.i101, 32
  %xored.i.i.i103 = xor i64 %shifted.i.i.i102, %product.i.i.i101
  %hash.i.i.i104 = and i64 %xored.i.i.i103, %tbl_size.i.i99
  %offset_ptr.i.i105 = getelementptr i32, ptr %offset_tbl.i.i100, i64 %hash.i.i.i104
  %offset.i.i106 = load i32, ptr %offset_ptr.i.i105, align 4
  %eq.i109 = icmp eq i32 %.fca.3.extract15, %offset.i.i106
  call void @llvm.assume(i1 %eq.i109) #30
  %57 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract9, 0
  %58 = insertvalue { ptr, ptr, ptr, i32 } %57, ptr %.fca.1.extract11, 1
  %59 = insertvalue { ptr, ptr, ptr, i32 } %58, ptr %.fca.2.extract13, 2
  %60 = insertvalue { ptr, ptr, ptr, i32 } %59, i32 %.fca.3.extract15, 3
  %61 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract41)
  %62 = load ptr, ptr %7, align 8
  %63 = call ptr %62(ptr %.fca.1.extract43)
  %64 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract41)
  %65 = load ptr, ptr %20, align 8
  %66 = call ptr %65(ptr %.fca.1.extract43)
  %67 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %68 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract9)
  %69 = sext i32 %.fca.3.extract15 to i64
  %70 = getelementptr ptr, ptr %.fca.0.extract9, i64 %69
  %71 = getelementptr i8, ptr %70, i64 8
  %72 = load ptr, ptr %71, align 8
  %73 = call ptr %72({ ptr, ptr, ptr, i32 } %60, ptr nonnull %4)
  %74 = call { ptr, ptr, ptr, i32 } %73({ ptr, ptr, ptr, i32 } %60, { ptr, ptr, ptr, i32 } %60, ptr nonnull %4)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %74, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %74, 1
  %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %74, 2
  %hash_coef_ptr.i.i111 = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i112 = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i113 = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %75 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract41)
  %76 = load ptr, ptr %32, align 8
  %77 = load ptr, ptr %76, align 8
  %78 = call { ptr, ptr, ptr, i32 } %77(ptr %.fca.1.extract43)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %78, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %78, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %78, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %78, 3
  %hash_coef_ptr.i.i125 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i126 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i127 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i128 = load i64, ptr %hash_coef_ptr.i.i125, align 4
  %tbl_size.i.i129 = load i64, ptr %tbl_size_ptr.i.i126, align 4
  %offset_tbl.i.i130 = load ptr, ptr %offset_tbl_ptr.i.i127, align 8
  %product.i.i.i131 = mul i64 %hash_coef.i.i128, 5693646204635713916
  %shifted.i.i.i132 = lshr i64 %product.i.i.i131, 32
  %xored.i.i.i133 = xor i64 %shifted.i.i.i132, %product.i.i.i131
  %hash.i.i.i134 = and i64 %xored.i.i.i133, %tbl_size.i.i129
  %offset_ptr.i.i135 = getelementptr i32, ptr %offset_tbl.i.i130, i64 %hash.i.i.i134
  %offset.i.i136 = load i32, ptr %offset_ptr.i.i135, align 4
  %eq.i139 = icmp eq i32 %.fca.3.extract, %offset.i.i136
  call void @llvm.assume(i1 %eq.i139) #30
  %hash_coef.i.i144 = load i64, ptr %hash_coef_ptr.i.i111, align 4
  %tbl_size.i.i145 = load i64, ptr %tbl_size_ptr.i.i112, align 4
  %offset_tbl.i.i146 = load ptr, ptr %offset_tbl_ptr.i.i113, align 8
  %product.i.i.i147 = mul i64 %hash_coef.i.i144, 4189192806087951739
  %shifted.i.i.i148 = lshr i64 %product.i.i.i147, 32
  %xored.i.i.i149 = xor i64 %shifted.i.i.i148, %product.i.i.i147
  %hash.i.i.i150 = and i64 %xored.i.i.i149, %tbl_size.i.i145
  %offset_ptr.i.i151 = getelementptr i32, ptr %offset_tbl.i.i146, i64 %hash.i.i.i150
  %offset.i.i152 = load i32, ptr %offset_ptr.i.i151, align 4
  %79 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %80 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %.fca.1.extract3, 1
  %81 = insertvalue { ptr, ptr, ptr, i32 } %80, ptr %.fca.2.extract5, 2
  %82 = insertvalue { ptr, ptr, ptr, i32 } %81, i32 %offset.i.i152, 3
  %83 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %84 = insertvalue { ptr, ptr, ptr, i32 } %83, ptr %.fca.1.extract, 1
  %85 = insertvalue { ptr, ptr, ptr, i32 } %84, ptr %.fca.2.extract, 2
  %86 = insertvalue { ptr, ptr, ptr, i32 } %85, i32 %.fca.3.extract, 3
  %87 = load ptr, ptr %49, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %87, 0
  %89 = load ptr, ptr %50, align 8
  %90 = insertvalue { ptr, ptr, ptr, i32 } %88, ptr %89, 1
  %91 = getelementptr inbounds i8, ptr %49, i64 16
  %92 = load ptr, ptr %91, align 8
  %93 = insertvalue { ptr, ptr, ptr, i32 } %90, ptr %92, 2
  %94 = load i32, ptr %51, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %93, i32 %94, 3
  %96 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract41)
  %97 = load ptr, ptr %7, align 8
  %98 = call ptr %97(ptr %.fca.1.extract43)
  %99 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract41)
  %100 = load ptr, ptr %20, align 8
  %101 = call ptr %100(ptr %.fca.1.extract43)
  %result.i168 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  %102 = getelementptr i8, ptr %result.i168, i64 8
  store ptr %98, ptr %102, align 8
  %103 = getelementptr i8, ptr %result.i168, i64 16
  store ptr null, ptr %103, align 8
  %104 = call ptr @llvm.invariant.start.p0(i64 16, ptr %result.i168)
  store ptr @Iterator2, ptr %result.i168, align 8
  %result.i169 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  %105 = getelementptr i8, ptr %result.i169, i64 8
  store ptr %101, ptr %105, align 8
  %106 = getelementptr i8, ptr %result.i169, i64 16
  store ptr null, ptr %106, align 8
  %107 = call ptr @llvm.invariant.start.p0(i64 16, ptr %result.i169)
  store ptr @Iterable2, ptr %result.i169, align 8
  %108 = alloca [2 x ptr], align 8
  store ptr %result.i168, ptr %108, align 8
  %109 = getelementptr inbounds i8, ptr %108, i64 8
  store ptr %result.i169, ptr %109, align 8
  %110 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %108)
  %111 = call ptr @llvm.invariant.start.p0(i64 112, ptr %87)
  %112 = sext i32 %94 to i64
  %113 = getelementptr ptr, ptr %87, i64 %112
  %114 = getelementptr i8, ptr %113, i64 56
  %115 = load ptr, ptr %114, align 8
  %116 = alloca { ptr, ptr }, align 8
  store ptr %.fca.0.extract1, ptr %116, align 8
  %117 = getelementptr inbounds i8, ptr %116, i64 8
  store ptr %.fca.0.extract, ptr %117, align 8
  %118 = call ptr %115({ ptr, ptr, ptr, i32 } %95, ptr nonnull %116)
  call void %118({ ptr, ptr, ptr, i32 } %95, { ptr, ptr, ptr, i32 } %95, ptr nonnull %108, { ptr, ptr, ptr, i32 } %82, { ptr, ptr, ptr, i32 } %86)
  %119 = load ptr, ptr %49, align 8
  %120 = load ptr, ptr %50, align 8
  %121 = load ptr, ptr %91, align 8
  %hash_coef_ptr.i.i171 = getelementptr i8, ptr %119, i64 8
  %tbl_size_ptr.i.i172 = getelementptr i8, ptr %119, i64 16
  %offset_tbl_ptr.i.i173 = getelementptr i8, ptr %119, i64 40
  %hash_coef.i.i174 = load i64, ptr %hash_coef_ptr.i.i171, align 4
  %tbl_size.i.i175 = load i64, ptr %tbl_size_ptr.i.i172, align 4
  %offset_tbl.i.i176 = load ptr, ptr %offset_tbl_ptr.i.i173, align 8
  %product.i.i.i177 = mul i64 %hash_coef.i.i174, 4189192806087951739
  %shifted.i.i.i178 = lshr i64 %product.i.i.i177, 32
  %xored.i.i.i179 = xor i64 %shifted.i.i.i178, %product.i.i.i177
  %hash.i.i.i180 = and i64 %xored.i.i.i179, %tbl_size.i.i175
  %offset_ptr.i.i181 = getelementptr i32, ptr %offset_tbl.i.i176, i64 %hash.i.i.i180
  %offset.i.i182 = load i32, ptr %offset_ptr.i.i181, align 4
  %122 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %119, 0
  %123 = insertvalue { ptr, ptr, ptr, i32 } %122, ptr %120, 1
  %124 = insertvalue { ptr, ptr, ptr, i32 } %123, ptr %121, 2
  %125 = insertvalue { ptr, ptr, ptr, i32 } %124, i32 %offset.i.i182, 3
  ret { ptr, ptr, ptr, i32 } %125
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_ProductIterator2(ptr nocapture readnone %0) #5 {
  ret { i64, i64 } { i64 152, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ProductIterator2_field_ProductIterator2_0(ptr nocapture readonly %0) #0 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ProductIterator2_field_ProductIterator2_1(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ProductIterator2_field_ProductIterator2_2(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ProductIterator2_B_init_first_iteratorIterator2T_second_iterableIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 144
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ProductIterator2_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 152
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @ProductIterator2_init_first_iteratorIterator2T_second_iterableIterable2U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca [0 x ptr], align 8
  %.fca.0.extract35 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract37 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract35, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract35, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract35, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 4440657219728359865
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract27 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract29 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract31 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %hash_coef_ptr.i.i44 = getelementptr i8, ptr %.fca.0.extract27, i64 8
  %tbl_size_ptr.i.i45 = getelementptr i8, ptr %.fca.0.extract27, i64 16
  %offset_tbl_ptr.i.i46 = getelementptr i8, ptr %.fca.0.extract27, i64 40
  %hash_coef.i.i47 = load i64, ptr %hash_coef_ptr.i.i44, align 4
  %tbl_size.i.i48 = load i64, ptr %tbl_size_ptr.i.i45, align 4
  %offset_tbl.i.i49 = load ptr, ptr %offset_tbl_ptr.i.i46, align 8
  %product.i.i.i50 = mul i64 %hash_coef.i.i47, 4189192806087951739
  %shifted.i.i.i51 = lshr i64 %product.i.i.i50, 32
  %xored.i.i.i52 = xor i64 %shifted.i.i.i51, %product.i.i.i50
  %hash.i.i.i53 = and i64 %xored.i.i.i52, %tbl_size.i.i48
  %offset_ptr.i.i54 = getelementptr i32, ptr %offset_tbl.i.i49, i64 %hash.i.i.i53
  %offset.i.i69 = load i32, ptr %offset_ptr.i.i54, align 4
  %7 = tail call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract35)
  %8 = sext i32 %offset.i.i to i64
  %9 = getelementptr ptr, ptr %.fca.0.extract35, i64 %8
  %10 = getelementptr i8, ptr %9, i64 24
  %11 = load ptr, ptr %10, align 8
  %12 = getelementptr i8, ptr %11, i64 8
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract27, 0
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, ptr %.fca.1.extract29, 1
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, ptr %.fca.2.extract31, 2
  %17 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %offset.i.i69, 3
  tail call void %13(ptr %.fca.1.extract37, { ptr, ptr, ptr, i32 } %17)
  %.fca.0.extract19 = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %.fca.1.extract21 = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %.fca.2.extract23 = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %hash_coef_ptr.i.i72 = getelementptr i8, ptr %.fca.0.extract19, i64 8
  %tbl_size_ptr.i.i73 = getelementptr i8, ptr %.fca.0.extract19, i64 16
  %offset_tbl_ptr.i.i74 = getelementptr i8, ptr %.fca.0.extract19, i64 40
  %hash_coef.i.i75 = load i64, ptr %hash_coef_ptr.i.i72, align 4
  %tbl_size.i.i76 = load i64, ptr %tbl_size_ptr.i.i73, align 4
  %offset_tbl.i.i77 = load ptr, ptr %offset_tbl_ptr.i.i74, align 8
  %product.i.i.i78 = mul i64 %hash_coef.i.i75, 5693646204635713916
  %shifted.i.i.i79 = lshr i64 %product.i.i.i78, 32
  %xored.i.i.i80 = xor i64 %shifted.i.i.i79, %product.i.i.i78
  %hash.i.i.i81 = and i64 %xored.i.i.i80, %tbl_size.i.i76
  %offset_ptr.i.i82 = getelementptr i32, ptr %offset_tbl.i.i77, i64 %hash.i.i.i81
  %offset.i.i97 = load i32, ptr %offset_ptr.i.i82, align 4
  %18 = tail call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract35)
  %19 = getelementptr i8, ptr %9, i64 40
  %20 = load ptr, ptr %19, align 8
  %21 = getelementptr i8, ptr %20, i64 8
  %22 = load ptr, ptr %21, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract19, 0
  %24 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %.fca.1.extract21, 1
  %25 = insertvalue { ptr, ptr, ptr, i32 } %24, ptr %.fca.2.extract23, 2
  %26 = insertvalue { ptr, ptr, ptr, i32 } %25, i32 %offset.i.i97, 3
  tail call void %22(ptr %.fca.1.extract37, { ptr, ptr, ptr, i32 } %26)
  %27 = tail call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract35)
  %28 = load ptr, ptr %19, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = tail call { ptr, ptr, ptr, i32 } %29(ptr %.fca.1.extract37)
  %.fca.0.extract11 = extractvalue { ptr, ptr, ptr, i32 } %30, 0
  %.fca.1.extract13 = extractvalue { ptr, ptr, ptr, i32 } %30, 1
  %.fca.2.extract15 = extractvalue { ptr, ptr, ptr, i32 } %30, 2
  %.fca.3.extract17 = extractvalue { ptr, ptr, ptr, i32 } %30, 3
  %hash_coef_ptr.i.i100 = getelementptr i8, ptr %.fca.0.extract11, i64 8
  %tbl_size_ptr.i.i101 = getelementptr i8, ptr %.fca.0.extract11, i64 16
  %offset_tbl_ptr.i.i102 = getelementptr i8, ptr %.fca.0.extract11, i64 40
  %hash_coef.i.i103 = load i64, ptr %hash_coef_ptr.i.i100, align 4
  %tbl_size.i.i104 = load i64, ptr %tbl_size_ptr.i.i101, align 4
  %offset_tbl.i.i105 = load ptr, ptr %offset_tbl_ptr.i.i102, align 8
  %product.i.i.i106 = mul i64 %hash_coef.i.i103, 5693646204635713916
  %shifted.i.i.i107 = lshr i64 %product.i.i.i106, 32
  %xored.i.i.i108 = xor i64 %shifted.i.i.i107, %product.i.i.i106
  %hash.i.i.i109 = and i64 %xored.i.i.i108, %tbl_size.i.i104
  %offset_ptr.i.i110 = getelementptr i32, ptr %offset_tbl.i.i105, i64 %hash.i.i.i109
  %offset.i.i111 = load i32, ptr %offset_ptr.i.i110, align 4
  %eq.i = icmp eq i32 %.fca.3.extract17, %offset.i.i111
  tail call void @llvm.assume(i1 %eq.i) #30
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11, 0
  %32 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %.fca.1.extract13, 1
  %33 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %.fca.2.extract15, 2
  %34 = insertvalue { ptr, ptr, ptr, i32 } %33, i32 %.fca.3.extract17, 3
  %35 = tail call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract35)
  %36 = load ptr, ptr %9, align 8
  %37 = tail call ptr %36(ptr %.fca.1.extract37)
  %38 = tail call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract35)
  %39 = getelementptr i8, ptr %9, i64 8
  %40 = load ptr, ptr %39, align 8
  %41 = tail call ptr %40(ptr %.fca.1.extract37)
  %42 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %6)
  %43 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract11)
  %44 = sext i32 %.fca.3.extract17 to i64
  %45 = getelementptr ptr, ptr %.fca.0.extract11, i64 %44
  %46 = getelementptr i8, ptr %45, i64 8
  %47 = load ptr, ptr %46, align 8
  %48 = call ptr %47({ ptr, ptr, ptr, i32 } %34, ptr nonnull %6)
  %49 = call { ptr, ptr, ptr, i32 } %48({ ptr, ptr, ptr, i32 } %34, { ptr, ptr, ptr, i32 } %34, ptr nonnull %6)
  %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %49, 0
  %.fca.1.extract5 = extractvalue { ptr, ptr, ptr, i32 } %49, 1
  %.fca.2.extract7 = extractvalue { ptr, ptr, ptr, i32 } %49, 2
  %hash_coef_ptr.i.i114 = getelementptr i8, ptr %.fca.0.extract3, i64 8
  %tbl_size_ptr.i.i115 = getelementptr i8, ptr %.fca.0.extract3, i64 16
  %offset_tbl_ptr.i.i116 = getelementptr i8, ptr %.fca.0.extract3, i64 40
  %hash_coef.i.i117 = load i64, ptr %hash_coef_ptr.i.i114, align 4
  %tbl_size.i.i118 = load i64, ptr %tbl_size_ptr.i.i115, align 4
  %offset_tbl.i.i119 = load ptr, ptr %offset_tbl_ptr.i.i116, align 8
  %product.i.i.i120 = mul i64 %hash_coef.i.i117, 4189192806087951739
  %shifted.i.i.i121 = lshr i64 %product.i.i.i120, 32
  %xored.i.i.i122 = xor i64 %shifted.i.i.i121, %product.i.i.i120
  %hash.i.i.i123 = and i64 %xored.i.i.i122, %tbl_size.i.i118
  %offset_ptr.i.i124 = getelementptr i32, ptr %offset_tbl.i.i119, i64 %hash.i.i.i123
  %offset.i.i139 = load i32, ptr %offset_ptr.i.i124, align 4
  %50 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract35)
  %51 = getelementptr i8, ptr %9, i64 32
  %52 = load ptr, ptr %51, align 8
  %53 = getelementptr i8, ptr %52, i64 8
  %54 = load ptr, ptr %53, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract3, 0
  %56 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %.fca.1.extract5, 1
  %57 = insertvalue { ptr, ptr, ptr, i32 } %56, ptr %.fca.2.extract7, 2
  %58 = insertvalue { ptr, ptr, ptr, i32 } %57, i32 %offset.i.i139, 3
  call void %54(ptr %.fca.1.extract37, { ptr, ptr, ptr, i32 } %58)
  %59 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract35)
  %60 = load ptr, ptr %10, align 8
  %61 = load ptr, ptr %60, align 8
  %62 = call { ptr, ptr, ptr, i32 } %61(ptr %.fca.1.extract37)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %62, 0
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %62, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %62, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %62, 3
  %hash_coef_ptr.i.i142 = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i143 = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i144 = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i145 = load i64, ptr %hash_coef_ptr.i.i142, align 4
  %tbl_size.i.i146 = load i64, ptr %tbl_size_ptr.i.i143, align 4
  %offset_tbl.i.i147 = load ptr, ptr %offset_tbl_ptr.i.i144, align 8
  %product.i.i.i148 = mul i64 %hash_coef.i.i145, 4189192806087951739
  %shifted.i.i.i149 = lshr i64 %product.i.i.i148, 32
  %xored.i.i.i150 = xor i64 %shifted.i.i.i149, %product.i.i.i148
  %hash.i.i.i151 = and i64 %xored.i.i.i150, %tbl_size.i.i146
  %offset_ptr.i.i152 = getelementptr i32, ptr %offset_tbl.i.i147, i64 %hash.i.i.i151
  %offset.i.i153 = load i32, ptr %offset_ptr.i.i152, align 4
  %eq.i156 = icmp eq i32 %.fca.3.extract, %offset.i.i153
  call void @llvm.assume(i1 %eq.i156) #30
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %64 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %.fca.1.extract2, 1
  %65 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %.fca.2.extract, 2
  %66 = insertvalue { ptr, ptr, ptr, i32 } %65, i32 %.fca.3.extract, 3
  %67 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract35)
  %68 = load ptr, ptr %9, align 8
  %69 = call ptr %68(ptr %.fca.1.extract37)
  %70 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract35)
  %71 = load ptr, ptr %39, align 8
  %72 = call ptr %71(ptr %.fca.1.extract37)
  %73 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %6)
  %74 = call ptr @llvm.invariant.start.p0(i64 24, ptr %.fca.0.extract1)
  %75 = sext i32 %.fca.3.extract to i64
  %76 = getelementptr ptr, ptr %.fca.0.extract1, i64 %75
  %77 = getelementptr i8, ptr %76, i64 8
  %78 = load ptr, ptr %77, align 8
  %79 = call ptr %78({ ptr, ptr, ptr, i32 } %66, ptr nonnull %6)
  %80 = call { ptr, i160 } %79({ ptr, ptr, ptr, i32 } %66, { ptr, ptr, ptr, i32 } %66, ptr nonnull %6)
  %81 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract35)
  %82 = getelementptr i8, ptr %9, i64 48
  %83 = load ptr, ptr %82, align 8
  %84 = getelementptr i8, ptr %83, i64 8
  %85 = load ptr, ptr %84, align 8
  call void %85(ptr %.fca.1.extract37, { ptr, i160 } %80)
  ret void
}

define { ptr, i160 } @ProductIterator2_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract10, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract10, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract10, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 4440657219728359865
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %6 = tail call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract10)
  %7 = sext i32 %offset.i.i to i64
  %8 = getelementptr ptr, ptr %.fca.0.extract10, i64 %7
  %9 = getelementptr i8, ptr %8, i64 48
  %10 = load ptr, ptr %9, align 8
  %11 = load ptr, ptr %10, align 8
  %12 = tail call { ptr, i160 } %11(ptr %.fca.1.extract12)
  %.sroa.0.0233 = extractvalue { ptr, i160 } %12, 0
  %13 = icmp ne ptr %.sroa.0.0233, @nil_typ
  %14 = icmp ne ptr %.sroa.0.0233, null
  %.not73234 = and i1 %13, %14
  br i1 %.not73234, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %3
  %15 = tail call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract10)
  %16 = getelementptr i8, ptr %8, i64 32
  %17 = getelementptr i8, ptr %8, i64 8
  %18 = getelementptr i8, ptr %8, i64 24
  %19 = getelementptr i8, ptr %8, i64 40
  br label %20

20:                                               ; preds = %.lr.ph, %46
  %.pn235 = phi { ptr, i160 } [ %12, %.lr.ph ], [ %105, %46 ]
  %21 = load ptr, ptr %16, align 8
  %22 = load ptr, ptr %21, align 8
  %23 = call { ptr, ptr, ptr, i32 } %22(ptr %.fca.1.extract12)
  %.fca.0.extract60 = extractvalue { ptr, ptr, ptr, i32 } %23, 0
  %.fca.1.extract62 = extractvalue { ptr, ptr, ptr, i32 } %23, 1
  %.fca.2.extract64 = extractvalue { ptr, ptr, ptr, i32 } %23, 2
  %.fca.3.extract66 = extractvalue { ptr, ptr, ptr, i32 } %23, 3
  %hash_coef_ptr.i.i75 = getelementptr i8, ptr %.fca.0.extract60, i64 8
  %tbl_size_ptr.i.i76 = getelementptr i8, ptr %.fca.0.extract60, i64 16
  %offset_tbl_ptr.i.i77 = getelementptr i8, ptr %.fca.0.extract60, i64 40
  %hash_coef.i.i78 = load i64, ptr %hash_coef_ptr.i.i75, align 4
  %tbl_size.i.i79 = load i64, ptr %tbl_size_ptr.i.i76, align 4
  %offset_tbl.i.i80 = load ptr, ptr %offset_tbl_ptr.i.i77, align 8
  %product.i.i.i81 = mul i64 %hash_coef.i.i78, 4189192806087951739
  %shifted.i.i.i82 = lshr i64 %product.i.i.i81, 32
  %xored.i.i.i83 = xor i64 %shifted.i.i.i82, %product.i.i.i81
  %hash.i.i.i84 = and i64 %xored.i.i.i83, %tbl_size.i.i79
  %offset_ptr.i.i85 = getelementptr i32, ptr %offset_tbl.i.i80, i64 %hash.i.i.i84
  %offset.i.i86 = load i32, ptr %offset_ptr.i.i85, align 4
  %eq.i = icmp eq i32 %.fca.3.extract66, %offset.i.i86
  call void @llvm.assume(i1 %eq.i) #30
  %24 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract60, 0
  %25 = insertvalue { ptr, ptr, ptr, i32 } %24, ptr %.fca.1.extract62, 1
  %26 = insertvalue { ptr, ptr, ptr, i32 } %25, ptr %.fca.2.extract64, 2
  %27 = insertvalue { ptr, ptr, ptr, i32 } %26, i32 %.fca.3.extract66, 3
  %28 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract10)
  %29 = load ptr, ptr %8, align 8
  %30 = call ptr %29(ptr %.fca.1.extract12)
  %31 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract10)
  %32 = load ptr, ptr %17, align 8
  %33 = call ptr %32(ptr %.fca.1.extract12)
  %34 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %35 = call ptr @llvm.invariant.start.p0(i64 24, ptr %.fca.0.extract60)
  %36 = sext i32 %.fca.3.extract66 to i64
  %37 = getelementptr ptr, ptr %.fca.0.extract60, i64 %36
  %38 = getelementptr i8, ptr %37, i64 8
  %39 = load ptr, ptr %38, align 8
  %40 = call ptr %39({ ptr, ptr, ptr, i32 } %27, ptr nonnull %4)
  %41 = call { ptr, i160 } %40({ ptr, ptr, ptr, i32 } %27, { ptr, ptr, ptr, i32 } %27, ptr nonnull %4)
  %.fca.0.extract54 = extractvalue { ptr, i160 } %41, 0
  %42 = icmp eq ptr %.fca.0.extract54, @nil_typ
  %43 = icmp eq ptr %.fca.0.extract54, null
  %44 = or i1 %42, %43
  %45 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract10)
  br i1 %44, label %46, label %108

46:                                               ; preds = %20
  %47 = load ptr, ptr %18, align 8
  %48 = load ptr, ptr %47, align 8
  %49 = call { ptr, ptr, ptr, i32 } %48(ptr %.fca.1.extract12)
  %.fca.0.extract40 = extractvalue { ptr, ptr, ptr, i32 } %49, 0
  %.fca.1.extract42 = extractvalue { ptr, ptr, ptr, i32 } %49, 1
  %.fca.2.extract44 = extractvalue { ptr, ptr, ptr, i32 } %49, 2
  %.fca.3.extract46 = extractvalue { ptr, ptr, ptr, i32 } %49, 3
  %hash_coef_ptr.i.i89 = getelementptr i8, ptr %.fca.0.extract40, i64 8
  %tbl_size_ptr.i.i90 = getelementptr i8, ptr %.fca.0.extract40, i64 16
  %offset_tbl_ptr.i.i91 = getelementptr i8, ptr %.fca.0.extract40, i64 40
  %hash_coef.i.i92 = load i64, ptr %hash_coef_ptr.i.i89, align 4
  %tbl_size.i.i93 = load i64, ptr %tbl_size_ptr.i.i90, align 4
  %offset_tbl.i.i94 = load ptr, ptr %offset_tbl_ptr.i.i91, align 8
  %product.i.i.i95 = mul i64 %hash_coef.i.i92, 4189192806087951739
  %shifted.i.i.i96 = lshr i64 %product.i.i.i95, 32
  %xored.i.i.i97 = xor i64 %shifted.i.i.i96, %product.i.i.i95
  %hash.i.i.i98 = and i64 %xored.i.i.i97, %tbl_size.i.i93
  %offset_ptr.i.i99 = getelementptr i32, ptr %offset_tbl.i.i94, i64 %hash.i.i.i98
  %offset.i.i100 = load i32, ptr %offset_ptr.i.i99, align 4
  %eq.i103 = icmp eq i32 %.fca.3.extract46, %offset.i.i100
  call void @llvm.assume(i1 %eq.i103) #30
  %50 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract40, 0
  %51 = insertvalue { ptr, ptr, ptr, i32 } %50, ptr %.fca.1.extract42, 1
  %52 = insertvalue { ptr, ptr, ptr, i32 } %51, ptr %.fca.2.extract44, 2
  %53 = insertvalue { ptr, ptr, ptr, i32 } %52, i32 %.fca.3.extract46, 3
  %54 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract10)
  %55 = load ptr, ptr %8, align 8
  %56 = call ptr %55(ptr %.fca.1.extract12)
  %57 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract10)
  %58 = load ptr, ptr %17, align 8
  %59 = call ptr %58(ptr %.fca.1.extract12)
  %60 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %61 = call ptr @llvm.invariant.start.p0(i64 24, ptr %.fca.0.extract40)
  %62 = sext i32 %.fca.3.extract46 to i64
  %63 = getelementptr ptr, ptr %.fca.0.extract40, i64 %62
  %64 = getelementptr i8, ptr %63, i64 8
  %65 = load ptr, ptr %64, align 8
  %66 = call ptr %65({ ptr, ptr, ptr, i32 } %53, ptr nonnull %4)
  %67 = call { ptr, i160 } %66({ ptr, ptr, ptr, i32 } %53, { ptr, ptr, ptr, i32 } %53, ptr nonnull %4)
  %68 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract10)
  %69 = load ptr, ptr %9, align 8
  %70 = getelementptr i8, ptr %69, i64 8
  %71 = load ptr, ptr %70, align 8
  call void %71(ptr %.fca.1.extract12, { ptr, i160 } %67)
  %72 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract10)
  %73 = load ptr, ptr %19, align 8
  %74 = load ptr, ptr %73, align 8
  %75 = call { ptr, ptr, ptr, i32 } %74(ptr %.fca.1.extract12)
  %.fca.0.extract26 = extractvalue { ptr, ptr, ptr, i32 } %75, 0
  %.fca.1.extract28 = extractvalue { ptr, ptr, ptr, i32 } %75, 1
  %.fca.2.extract30 = extractvalue { ptr, ptr, ptr, i32 } %75, 2
  %.fca.3.extract32 = extractvalue { ptr, ptr, ptr, i32 } %75, 3
  %hash_coef_ptr.i.i105 = getelementptr i8, ptr %.fca.0.extract26, i64 8
  %tbl_size_ptr.i.i106 = getelementptr i8, ptr %.fca.0.extract26, i64 16
  %offset_tbl_ptr.i.i107 = getelementptr i8, ptr %.fca.0.extract26, i64 40
  %hash_coef.i.i108 = load i64, ptr %hash_coef_ptr.i.i105, align 4
  %tbl_size.i.i109 = load i64, ptr %tbl_size_ptr.i.i106, align 4
  %offset_tbl.i.i110 = load ptr, ptr %offset_tbl_ptr.i.i107, align 8
  %product.i.i.i111 = mul i64 %hash_coef.i.i108, 5693646204635713916
  %shifted.i.i.i112 = lshr i64 %product.i.i.i111, 32
  %xored.i.i.i113 = xor i64 %shifted.i.i.i112, %product.i.i.i111
  %hash.i.i.i114 = and i64 %xored.i.i.i113, %tbl_size.i.i109
  %offset_ptr.i.i115 = getelementptr i32, ptr %offset_tbl.i.i110, i64 %hash.i.i.i114
  %offset.i.i116 = load i32, ptr %offset_ptr.i.i115, align 4
  %eq.i119 = icmp eq i32 %.fca.3.extract32, %offset.i.i116
  call void @llvm.assume(i1 %eq.i119) #30
  %76 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract26, 0
  %77 = insertvalue { ptr, ptr, ptr, i32 } %76, ptr %.fca.1.extract28, 1
  %78 = insertvalue { ptr, ptr, ptr, i32 } %77, ptr %.fca.2.extract30, 2
  %79 = insertvalue { ptr, ptr, ptr, i32 } %78, i32 %.fca.3.extract32, 3
  %80 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract10)
  %81 = load ptr, ptr %8, align 8
  %82 = call ptr %81(ptr %.fca.1.extract12)
  %83 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract10)
  %84 = load ptr, ptr %17, align 8
  %85 = call ptr %84(ptr %.fca.1.extract12)
  %86 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %87 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract26)
  %88 = sext i32 %.fca.3.extract32 to i64
  %89 = getelementptr ptr, ptr %.fca.0.extract26, i64 %88
  %90 = getelementptr i8, ptr %89, i64 8
  %91 = load ptr, ptr %90, align 8
  %92 = call ptr %91({ ptr, ptr, ptr, i32 } %79, ptr nonnull %4)
  %93 = call { ptr, ptr, ptr, i32 } %92({ ptr, ptr, ptr, i32 } %79, { ptr, ptr, ptr, i32 } %79, ptr nonnull %4)
  %.fca.0.extract18 = extractvalue { ptr, ptr, ptr, i32 } %93, 0
  %.fca.1.extract20 = extractvalue { ptr, ptr, ptr, i32 } %93, 1
  %.fca.2.extract22 = extractvalue { ptr, ptr, ptr, i32 } %93, 2
  %hash_coef_ptr.i.i121 = getelementptr i8, ptr %.fca.0.extract18, i64 8
  %tbl_size_ptr.i.i122 = getelementptr i8, ptr %.fca.0.extract18, i64 16
  %offset_tbl_ptr.i.i123 = getelementptr i8, ptr %.fca.0.extract18, i64 40
  %hash_coef.i.i124 = load i64, ptr %hash_coef_ptr.i.i121, align 4
  %tbl_size.i.i125 = load i64, ptr %tbl_size_ptr.i.i122, align 4
  %offset_tbl.i.i126 = load ptr, ptr %offset_tbl_ptr.i.i123, align 8
  %product.i.i.i127 = mul i64 %hash_coef.i.i124, 4189192806087951739
  %shifted.i.i.i128 = lshr i64 %product.i.i.i127, 32
  %xored.i.i.i129 = xor i64 %shifted.i.i.i128, %product.i.i.i127
  %hash.i.i.i130 = and i64 %xored.i.i.i129, %tbl_size.i.i125
  %offset_ptr.i.i131 = getelementptr i32, ptr %offset_tbl.i.i126, i64 %hash.i.i.i130
  %offset.i.i146 = load i32, ptr %offset_ptr.i.i131, align 4
  %94 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract10)
  %95 = load ptr, ptr %16, align 8
  %96 = getelementptr i8, ptr %95, i64 8
  %97 = load ptr, ptr %96, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract18, 0
  %99 = insertvalue { ptr, ptr, ptr, i32 } %98, ptr %.fca.1.extract20, 1
  %100 = insertvalue { ptr, ptr, ptr, i32 } %99, ptr %.fca.2.extract22, 2
  %101 = insertvalue { ptr, ptr, ptr, i32 } %100, i32 %offset.i.i146, 3
  call void %97(ptr %.fca.1.extract12, { ptr, ptr, ptr, i32 } %101)
  %102 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract10)
  %103 = load ptr, ptr %9, align 8
  %104 = load ptr, ptr %103, align 8
  %105 = call { ptr, i160 } %104(ptr %.fca.1.extract12)
  %.sroa.0.0 = extractvalue { ptr, i160 } %105, 0
  %106 = icmp ne ptr %.sroa.0.0, @nil_typ
  %107 = icmp ne ptr %.sroa.0.0, null
  %.not73 = and i1 %106, %107
  br i1 %.not73, label %20, label %.loopexit

108:                                              ; preds = %20
  %109 = load ptr, ptr %8, align 8
  %110 = call ptr %109(ptr %.fca.1.extract12)
  %111 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract10)
  %112 = load ptr, ptr %17, align 8
  %113 = call ptr %112(ptr %.fca.1.extract12)
  %114 = load ptr, ptr %110, align 8
  %115 = getelementptr i8, ptr %114, i64 48
  %116 = load ptr, ptr %115, align 8
  %117 = call { i64, i64 } %116(ptr nonnull %110)
  %118 = extractvalue { i64, i64 } %117, 0
  %119 = extractvalue { i64, i64 } %117, 1
  %120 = urem i64 16, %119
  %121 = icmp eq i64 %120, 0
  %122 = sub i64 %119, %120
  %123 = select i1 %121, i64 0, i64 %122
  %124 = add i64 %118, 16
  %125 = add i64 %124, %123
  %126 = load ptr, ptr %113, align 8
  %127 = getelementptr i8, ptr %126, i64 48
  %128 = load ptr, ptr %127, align 8
  %129 = call { i64, i64 } %128(ptr nonnull %113)
  %130 = extractvalue { i64, i64 } %129, 0
  %131 = extractvalue { i64, i64 } %129, 1
  %132 = call i64 @llvm.umax.i64(i64 %119, i64 %131)
  %133 = call i64 @llvm.umax.i64(i64 %132, i64 8)
  %134 = urem i64 %125, %131
  %135 = icmp eq i64 %134, 0
  %136 = sub i64 %131, %134
  %137 = select i1 %135, i64 0, i64 %136
  %138 = add i64 %130, %125
  %139 = add i64 %138, %137
  %140 = urem i64 %139, %133
  %141 = icmp eq i64 %140, 0
  %142 = sub i64 %133, %140
  %143 = select i1 %141, i64 0, i64 %142
  %144 = add i64 %143, %139
  %result.i = call noalias ptr @bump_malloc_inner(i64 noundef %144, ptr nonnull @current_ptr) #29
  store ptr %110, ptr %result.i, align 8
  %145 = getelementptr i8, ptr %result.i, i64 8
  store ptr %113, ptr %145, align 8
  %146 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i)
  %147 = getelementptr inbounds i8, ptr %5, i64 8
  %148 = getelementptr inbounds i8, ptr %5, i64 24
  store ptr @Pair, ptr %5, align 8
  store ptr %result.i, ptr %147, align 8
  store i32 9, ptr %148, align 8
  %149 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %5)
  %150 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract10)
  %151 = load ptr, ptr %8, align 8
  %152 = call ptr %151(ptr %.fca.1.extract12)
  %153 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract10)
  %154 = load ptr, ptr %17, align 8
  %155 = call ptr %154(ptr %.fca.1.extract12)
  %156 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @Pair)
  %157 = load ptr, ptr %result.i, align 8
  %158 = load ptr, ptr %157, align 8
  %159 = getelementptr i8, ptr %158, i64 48
  %160 = load ptr, ptr %159, align 8
  %161 = call { i64, i64 } %160(ptr nonnull %157)
  %162 = extractvalue { i64, i64 } %161, 1
  %163 = urem i64 16, %162
  %164 = icmp eq i64 %163, 0
  %reass.sub = sub i64 %162, %163
  %165 = add i64 %reass.sub, 16
  %166 = select i1 %164, i64 16, i64 %165
  %167 = getelementptr i8, ptr %result.i, i64 %166
  %168 = load ptr, ptr %result.i, align 8
  %169 = load ptr, ptr %168, align 8
  %170 = getelementptr i8, ptr %169, i64 64
  %171 = load ptr, ptr %170, align 8
  call void %171({ ptr, i160 } %.pn235, ptr nonnull %168, ptr %167)
  %172 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @Pair)
  %173 = load ptr, ptr %result.i, align 8
  %174 = load ptr, ptr %173, align 8
  %175 = getelementptr i8, ptr %174, i64 48
  %176 = load ptr, ptr %175, align 8
  %177 = call { i64, i64 } %176(ptr nonnull %173)
  %178 = extractvalue { i64, i64 } %177, 0
  %179 = extractvalue { i64, i64 } %177, 1
  %180 = urem i64 16, %179
  %181 = icmp eq i64 %180, 0
  %182 = sub i64 %179, %180
  %183 = select i1 %181, i64 0, i64 %182
  %184 = add i64 %178, 16
  %185 = add i64 %184, %183
  %186 = load ptr, ptr %145, align 8
  %187 = load ptr, ptr %186, align 8
  %188 = getelementptr i8, ptr %187, i64 48
  %189 = load ptr, ptr %188, align 8
  %190 = call { i64, i64 } %189(ptr nonnull %186)
  %191 = extractvalue { i64, i64 } %190, 1
  %192 = urem i64 %185, %191
  %193 = icmp eq i64 %192, 0
  %194 = sub i64 %191, %192
  %195 = select i1 %193, i64 0, i64 %194
  %196 = getelementptr i8, ptr %result.i, i64 %185
  %197 = getelementptr i8, ptr %196, i64 %195
  %198 = load ptr, ptr %145, align 8
  %199 = load ptr, ptr %198, align 8
  %200 = getelementptr i8, ptr %199, i64 64
  %201 = load ptr, ptr %200, align 8
  call void %201({ ptr, i160 } %41, ptr nonnull %198, ptr %197)
  %202 = load ptr, ptr %5, align 8
  %203 = load i160, ptr %147, align 8
  br label %.loopexit

.loopexit:                                        ; preds = %46, %3, %108
  %.reg2mem14.sroa.3.0 = phi i160 [ %203, %108 ], [ undef, %3 ], [ undef, %46 ]
  %.reg2mem14.sroa.0.0 = phi ptr [ %202, %108 ], [ @nil_typ, %3 ], [ @nil_typ, %46 ]
  %.reload15.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %.reg2mem14.sroa.0.0, 0
  %.reload15.fca.1.insert = insertvalue { ptr, i160 } %.reload15.fca.0.insert, i160 %.reg2mem14.sroa.3.0, 1
  ret { ptr, i160 } %.reload15.fca.1.insert
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, i160 } @ProductIterator2_getter_current_first(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 120
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, i160 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 128
  %6 = load i160, ptr %5, align 4
  %7 = insertvalue { ptr, i160 } %4, i160 %6, 1
  ret { ptr, i160 } %7
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ProductIterator2_setter_current_first(ptr nocapture writeonly %0, { ptr, i160 } %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 120
  %.fca.0.extract = extractvalue { ptr, i160 } %1, 0
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 128
  store i160 %.fca.1.extract, ptr %4, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ProductIterator2_getter_second_iterable(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 88
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 96
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 104
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 112
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ProductIterator2_setter_second_iterable(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 88
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 96
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 104
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 112
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ProductIterator2_getter_second_iterator(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 56
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 64
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 72
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 80
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ProductIterator2_setter_second_iterator(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 56
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 64
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 72
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 80
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ProductIterator2_getter_first_iterator(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 24
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 32
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 40
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 48
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ProductIterator2_setter_first_iterator(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 24
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 32
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 40
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 48
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ProductIterable2_getter_second(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 56
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 64
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 72
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 80
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ProductIterable2_setter_second(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 56
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 64
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 72
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 80
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ProductIterable2_getter_first(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 24
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 32
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 40
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 48
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ProductIterable2_setter_first(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 24
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 32
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 40
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 48
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_ZipIterable2(ptr nocapture readnone %0) #5 {
  ret { i64, i64 } { i64 88, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ZipIterable2_field_ZipIterable2_0(ptr nocapture readonly %0) #0 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ZipIterable2_field_ZipIterable2_1(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ZipIterable2_field_ZipIterable2_2(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ZipIterable2_B_init_firstIterable2T_secondIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 208
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ZipIterable2_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 216
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ZipIterable2_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 224
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ZipIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 232
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ZipIterable2_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 240
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ZipIterable2_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 248
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ZipIterable2_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 256
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ZipIterable2_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 264
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ZipIterable2_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 272
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ZipIterable2_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 280
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ZipIterable2_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 288
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ZipIterable2_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 296
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @ZipIterable2_init_firstIterable2T_secondIterable2U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -3218950579047519815
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %hash_coef_ptr.i.i18 = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i19 = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i20 = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i21 = load i64, ptr %hash_coef_ptr.i.i18, align 4
  %tbl_size.i.i22 = load i64, ptr %tbl_size_ptr.i.i19, align 4
  %offset_tbl.i.i23 = load ptr, ptr %offset_tbl_ptr.i.i20, align 8
  %product.i.i.i24 = mul i64 %hash_coef.i.i21, 5693646204635713916
  %shifted.i.i.i25 = lshr i64 %product.i.i.i24, 32
  %xored.i.i.i26 = xor i64 %shifted.i.i.i25, %product.i.i.i24
  %hash.i.i.i27 = and i64 %xored.i.i.i26, %tbl_size.i.i22
  %offset_ptr.i.i28 = getelementptr i32, ptr %offset_tbl.i.i23, i64 %hash.i.i.i27
  %offset.i.i43 = load i32, ptr %offset_ptr.i.i28, align 4
  %6 = tail call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract9)
  %7 = sext i32 %offset.i.i to i64
  %8 = getelementptr ptr, ptr %.fca.0.extract9, i64 %7
  %9 = getelementptr i8, ptr %8, i64 24
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr i8, ptr %10, i64 8
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.1.extract3, 1
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, ptr %.fca.2.extract5, 2
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, i32 %offset.i.i43, 3
  tail call void %12(ptr %.fca.1.extract11, { ptr, ptr, ptr, i32 } %16)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %hash_coef_ptr.i.i46 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i47 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i48 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i49 = load i64, ptr %hash_coef_ptr.i.i46, align 4
  %tbl_size.i.i50 = load i64, ptr %tbl_size_ptr.i.i47, align 4
  %offset_tbl.i.i51 = load ptr, ptr %offset_tbl_ptr.i.i48, align 8
  %product.i.i.i52 = mul i64 %hash_coef.i.i49, 5693646204635713916
  %shifted.i.i.i53 = lshr i64 %product.i.i.i52, 32
  %xored.i.i.i54 = xor i64 %shifted.i.i.i53, %product.i.i.i52
  %hash.i.i.i55 = and i64 %xored.i.i.i54, %tbl_size.i.i50
  %offset_ptr.i.i56 = getelementptr i32, ptr %offset_tbl.i.i51, i64 %hash.i.i.i55
  %offset.i.i71 = load i32, ptr %offset_ptr.i.i56, align 4
  %17 = tail call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract9)
  %18 = getelementptr i8, ptr %8, i64 32
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr i8, ptr %19, i64 8
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %23 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %.fca.1.extract, 1
  %24 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %.fca.2.extract, 2
  %25 = insertvalue { ptr, ptr, ptr, i32 } %24, i32 %offset.i.i71, 3
  tail call void %21(ptr %.fca.1.extract11, { ptr, ptr, ptr, i32 } %25)
  ret void
}

define { ptr, ptr, ptr, i32 } @ZipIterable2_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract57 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract59 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract57, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract57, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract57, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -3218950579047519815
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %5 = tail call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract57)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract57, i64 %6
  %8 = getelementptr i8, ptr %7, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = load ptr, ptr %9, align 8
  %11 = tail call { ptr, ptr, ptr, i32 } %10(ptr %.fca.1.extract59)
  %.fca.0.extract49 = extractvalue { ptr, ptr, ptr, i32 } %11, 0
  %.fca.1.extract51 = extractvalue { ptr, ptr, ptr, i32 } %11, 1
  %.fca.2.extract53 = extractvalue { ptr, ptr, ptr, i32 } %11, 2
  %.fca.3.extract55 = extractvalue { ptr, ptr, ptr, i32 } %11, 3
  %hash_coef_ptr.i.i66 = getelementptr i8, ptr %.fca.0.extract49, i64 8
  %tbl_size_ptr.i.i67 = getelementptr i8, ptr %.fca.0.extract49, i64 16
  %offset_tbl_ptr.i.i68 = getelementptr i8, ptr %.fca.0.extract49, i64 40
  %hash_coef.i.i69 = load i64, ptr %hash_coef_ptr.i.i66, align 4
  %tbl_size.i.i70 = load i64, ptr %tbl_size_ptr.i.i67, align 4
  %offset_tbl.i.i71 = load ptr, ptr %offset_tbl_ptr.i.i68, align 8
  %product.i.i.i72 = mul i64 %hash_coef.i.i69, 5693646204635713916
  %shifted.i.i.i73 = lshr i64 %product.i.i.i72, 32
  %xored.i.i.i74 = xor i64 %shifted.i.i.i73, %product.i.i.i72
  %hash.i.i.i75 = and i64 %xored.i.i.i74, %tbl_size.i.i70
  %offset_ptr.i.i76 = getelementptr i32, ptr %offset_tbl.i.i71, i64 %hash.i.i.i75
  %offset.i.i77 = load i32, ptr %offset_ptr.i.i76, align 4
  %eq.i = icmp eq i32 %.fca.3.extract55, %offset.i.i77
  tail call void @llvm.assume(i1 %eq.i) #30
  %12 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract49, 0
  %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.1.extract51, 1
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.2.extract53, 2
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, i32 %.fca.3.extract55, 3
  %16 = tail call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract57)
  %17 = load ptr, ptr %7, align 8
  %18 = tail call ptr %17(ptr %.fca.1.extract59)
  %19 = tail call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract57)
  %20 = getelementptr i8, ptr %7, i64 8
  %21 = load ptr, ptr %20, align 8
  %22 = tail call ptr %21(ptr %.fca.1.extract59)
  %23 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %24 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract49)
  %25 = sext i32 %.fca.3.extract55 to i64
  %26 = getelementptr ptr, ptr %.fca.0.extract49, i64 %25
  %27 = getelementptr i8, ptr %26, i64 8
  %28 = load ptr, ptr %27, align 8
  %29 = call ptr %28({ ptr, ptr, ptr, i32 } %15, ptr nonnull %4)
  %30 = call { ptr, ptr, ptr, i32 } %29({ ptr, ptr, ptr, i32 } %15, { ptr, ptr, ptr, i32 } %15, ptr nonnull %4)
  %31 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract57)
  %32 = getelementptr i8, ptr %7, i64 32
  %33 = load ptr, ptr %32, align 8
  %34 = load ptr, ptr %33, align 8
  %35 = call { ptr, ptr, ptr, i32 } %34(ptr %.fca.1.extract59)
  %.fca.0.extract33 = extractvalue { ptr, ptr, ptr, i32 } %35, 0
  %.fca.1.extract35 = extractvalue { ptr, ptr, ptr, i32 } %35, 1
  %.fca.2.extract37 = extractvalue { ptr, ptr, ptr, i32 } %35, 2
  %.fca.3.extract39 = extractvalue { ptr, ptr, ptr, i32 } %35, 3
  %hash_coef_ptr.i.i94 = getelementptr i8, ptr %.fca.0.extract33, i64 8
  %tbl_size_ptr.i.i95 = getelementptr i8, ptr %.fca.0.extract33, i64 16
  %offset_tbl_ptr.i.i96 = getelementptr i8, ptr %.fca.0.extract33, i64 40
  %hash_coef.i.i97 = load i64, ptr %hash_coef_ptr.i.i94, align 4
  %tbl_size.i.i98 = load i64, ptr %tbl_size_ptr.i.i95, align 4
  %offset_tbl.i.i99 = load ptr, ptr %offset_tbl_ptr.i.i96, align 8
  %product.i.i.i100 = mul i64 %hash_coef.i.i97, 5693646204635713916
  %shifted.i.i.i101 = lshr i64 %product.i.i.i100, 32
  %xored.i.i.i102 = xor i64 %shifted.i.i.i101, %product.i.i.i100
  %hash.i.i.i103 = and i64 %xored.i.i.i102, %tbl_size.i.i98
  %offset_ptr.i.i104 = getelementptr i32, ptr %offset_tbl.i.i99, i64 %hash.i.i.i103
  %offset.i.i105 = load i32, ptr %offset_ptr.i.i104, align 4
  %eq.i108 = icmp eq i32 %.fca.3.extract39, %offset.i.i105
  call void @llvm.assume(i1 %eq.i108) #30
  %36 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract33, 0
  %37 = insertvalue { ptr, ptr, ptr, i32 } %36, ptr %.fca.1.extract35, 1
  %38 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %.fca.2.extract37, 2
  %39 = insertvalue { ptr, ptr, ptr, i32 } %38, i32 %.fca.3.extract39, 3
  %40 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract57)
  %41 = load ptr, ptr %7, align 8
  %42 = call ptr %41(ptr %.fca.1.extract59)
  %43 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract57)
  %44 = load ptr, ptr %20, align 8
  %45 = call ptr %44(ptr %.fca.1.extract59)
  %46 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %47 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract33)
  %48 = sext i32 %.fca.3.extract39 to i64
  %49 = getelementptr ptr, ptr %.fca.0.extract33, i64 %48
  %50 = getelementptr i8, ptr %49, i64 8
  %51 = load ptr, ptr %50, align 8
  %52 = call ptr %51({ ptr, ptr, ptr, i32 } %39, ptr nonnull %4)
  %53 = call { ptr, ptr, ptr, i32 } %52({ ptr, ptr, ptr, i32 } %39, { ptr, ptr, ptr, i32 } %39, ptr nonnull %4)
  %54 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract57)
  %55 = load ptr, ptr %7, align 8
  %56 = call ptr %55(ptr %.fca.1.extract59)
  %57 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract57)
  %58 = load ptr, ptr %20, align 8
  %59 = call ptr %58(ptr %.fca.1.extract59)
  %result.i = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %60 = getelementptr i8, ptr %result.i, i64 16
  store ptr %59, ptr %60, align 8
  %61 = getelementptr i8, ptr %result.i, i64 8
  store ptr %56, ptr %61, align 8
  %62 = getelementptr i8, ptr %result.i, i64 24
  store ptr null, ptr %62, align 8
  %63 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i)
  store ptr @Pair, ptr %result.i, align 8
  %result.i123 = call noalias dereferenceable_or_null(88) ptr @bump_malloc_inner(i64 noundef 88, ptr nonnull @current_ptr) #29
  store ptr %56, ptr %result.i123, align 8
  %64 = getelementptr i8, ptr %result.i123, i64 8
  store ptr %59, ptr %64, align 8
  %65 = getelementptr i8, ptr %result.i123, i64 16
  store ptr %result.i, ptr %65, align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %result.i123)
  %67 = alloca { ptr, ptr, ptr, i32 }, align 8
  %68 = getelementptr inbounds i8, ptr %67, i64 8
  %69 = getelementptr inbounds i8, ptr %67, i64 24
  store ptr @ZipIterator2, ptr %67, align 8
  store ptr %result.i123, ptr %68, align 8
  store i32 9, ptr %69, align 8
  %70 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %67)
  %71 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract57)
  %72 = load ptr, ptr %8, align 8
  %73 = load ptr, ptr %72, align 8
  %74 = call { ptr, ptr, ptr, i32 } %73(ptr %.fca.1.extract59)
  %.fca.0.extract17 = extractvalue { ptr, ptr, ptr, i32 } %74, 0
  %.fca.1.extract19 = extractvalue { ptr, ptr, ptr, i32 } %74, 1
  %.fca.2.extract21 = extractvalue { ptr, ptr, ptr, i32 } %74, 2
  %.fca.3.extract23 = extractvalue { ptr, ptr, ptr, i32 } %74, 3
  %hash_coef_ptr.i.i125 = getelementptr i8, ptr %.fca.0.extract17, i64 8
  %tbl_size_ptr.i.i126 = getelementptr i8, ptr %.fca.0.extract17, i64 16
  %offset_tbl_ptr.i.i127 = getelementptr i8, ptr %.fca.0.extract17, i64 40
  %hash_coef.i.i128 = load i64, ptr %hash_coef_ptr.i.i125, align 4
  %tbl_size.i.i129 = load i64, ptr %tbl_size_ptr.i.i126, align 4
  %offset_tbl.i.i130 = load ptr, ptr %offset_tbl_ptr.i.i127, align 8
  %product.i.i.i131 = mul i64 %hash_coef.i.i128, 5693646204635713916
  %shifted.i.i.i132 = lshr i64 %product.i.i.i131, 32
  %xored.i.i.i133 = xor i64 %shifted.i.i.i132, %product.i.i.i131
  %hash.i.i.i134 = and i64 %xored.i.i.i133, %tbl_size.i.i129
  %offset_ptr.i.i135 = getelementptr i32, ptr %offset_tbl.i.i130, i64 %hash.i.i.i134
  %offset.i.i136 = load i32, ptr %offset_ptr.i.i135, align 4
  %eq.i139 = icmp eq i32 %.fca.3.extract23, %offset.i.i136
  call void @llvm.assume(i1 %eq.i139) #30
  %75 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract17, 0
  %76 = insertvalue { ptr, ptr, ptr, i32 } %75, ptr %.fca.1.extract19, 1
  %77 = insertvalue { ptr, ptr, ptr, i32 } %76, ptr %.fca.2.extract21, 2
  %78 = insertvalue { ptr, ptr, ptr, i32 } %77, i32 %.fca.3.extract23, 3
  %79 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract57)
  %80 = load ptr, ptr %7, align 8
  %81 = call ptr %80(ptr %.fca.1.extract59)
  %82 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract57)
  %83 = load ptr, ptr %20, align 8
  %84 = call ptr %83(ptr %.fca.1.extract59)
  %85 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %86 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract17)
  %87 = sext i32 %.fca.3.extract23 to i64
  %88 = getelementptr ptr, ptr %.fca.0.extract17, i64 %87
  %89 = getelementptr i8, ptr %88, i64 8
  %90 = load ptr, ptr %89, align 8
  %91 = call ptr %90({ ptr, ptr, ptr, i32 } %78, ptr nonnull %4)
  %92 = call { ptr, ptr, ptr, i32 } %91({ ptr, ptr, ptr, i32 } %78, { ptr, ptr, ptr, i32 } %78, ptr nonnull %4)
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %92, 0
  %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %92, 1
  %.fca.2.extract13 = extractvalue { ptr, ptr, ptr, i32 } %92, 2
  %hash_coef_ptr.i.i141 = getelementptr i8, ptr %.fca.0.extract9, i64 8
  %tbl_size_ptr.i.i142 = getelementptr i8, ptr %.fca.0.extract9, i64 16
  %offset_tbl_ptr.i.i143 = getelementptr i8, ptr %.fca.0.extract9, i64 40
  %93 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract57)
  %94 = load ptr, ptr %32, align 8
  %95 = load ptr, ptr %94, align 8
  %96 = call { ptr, ptr, ptr, i32 } %95(ptr %.fca.1.extract59)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %96, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %96, 1
  %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %96, 2
  %.fca.3.extract7 = extractvalue { ptr, ptr, ptr, i32 } %96, 3
  %hash_coef_ptr.i.i155 = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i156 = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i157 = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i158 = load i64, ptr %hash_coef_ptr.i.i155, align 4
  %tbl_size.i.i159 = load i64, ptr %tbl_size_ptr.i.i156, align 4
  %offset_tbl.i.i160 = load ptr, ptr %offset_tbl_ptr.i.i157, align 8
  %product.i.i.i161 = mul i64 %hash_coef.i.i158, 5693646204635713916
  %shifted.i.i.i162 = lshr i64 %product.i.i.i161, 32
  %xored.i.i.i163 = xor i64 %shifted.i.i.i162, %product.i.i.i161
  %hash.i.i.i164 = and i64 %xored.i.i.i163, %tbl_size.i.i159
  %offset_ptr.i.i165 = getelementptr i32, ptr %offset_tbl.i.i160, i64 %hash.i.i.i164
  %offset.i.i166 = load i32, ptr %offset_ptr.i.i165, align 4
  %eq.i169 = icmp eq i32 %.fca.3.extract7, %offset.i.i166
  call void @llvm.assume(i1 %eq.i169) #30
  %97 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %98 = insertvalue { ptr, ptr, ptr, i32 } %97, ptr %.fca.1.extract3, 1
  %99 = insertvalue { ptr, ptr, ptr, i32 } %98, ptr %.fca.2.extract5, 2
  %100 = insertvalue { ptr, ptr, ptr, i32 } %99, i32 %.fca.3.extract7, 3
  %101 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract57)
  %102 = load ptr, ptr %7, align 8
  %103 = call ptr %102(ptr %.fca.1.extract59)
  %104 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract57)
  %105 = load ptr, ptr %20, align 8
  %106 = call ptr %105(ptr %.fca.1.extract59)
  %107 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %108 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract1)
  %109 = sext i32 %.fca.3.extract7 to i64
  %110 = getelementptr ptr, ptr %.fca.0.extract1, i64 %109
  %111 = getelementptr i8, ptr %110, i64 8
  %112 = load ptr, ptr %111, align 8
  %113 = call ptr %112({ ptr, ptr, ptr, i32 } %100, ptr nonnull %4)
  %114 = call { ptr, ptr, ptr, i32 } %113({ ptr, ptr, ptr, i32 } %100, { ptr, ptr, ptr, i32 } %100, ptr nonnull %4)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %114, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %114, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %114, 2
  %hash_coef_ptr.i.i171 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i172 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i173 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i174 = load i64, ptr %hash_coef_ptr.i.i171, align 4
  %tbl_size.i.i175 = load i64, ptr %tbl_size_ptr.i.i172, align 4
  %offset_tbl.i.i176 = load ptr, ptr %offset_tbl_ptr.i.i173, align 8
  %product.i.i.i177 = mul i64 %hash_coef.i.i174, 4189192806087951739
  %shifted.i.i.i178 = lshr i64 %product.i.i.i177, 32
  %xored.i.i.i179 = xor i64 %shifted.i.i.i178, %product.i.i.i177
  %hash.i.i.i180 = and i64 %xored.i.i.i179, %tbl_size.i.i175
  %offset_ptr.i.i181 = getelementptr i32, ptr %offset_tbl.i.i176, i64 %hash.i.i.i180
  %hash_coef.i.i188 = load i64, ptr %hash_coef_ptr.i.i141, align 4
  %tbl_size.i.i189 = load i64, ptr %tbl_size_ptr.i.i142, align 4
  %offset_tbl.i.i190 = load ptr, ptr %offset_tbl_ptr.i.i143, align 8
  %product.i.i.i191 = mul i64 %hash_coef.i.i188, 4189192806087951739
  %shifted.i.i.i192 = lshr i64 %product.i.i.i191, 32
  %xored.i.i.i193 = xor i64 %shifted.i.i.i192, %product.i.i.i191
  %hash.i.i.i194 = and i64 %xored.i.i.i193, %tbl_size.i.i189
  %offset_ptr.i.i195 = getelementptr i32, ptr %offset_tbl.i.i190, i64 %hash.i.i.i194
  %offset.i.i196 = load i32, ptr %offset_ptr.i.i195, align 4
  %115 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract9, 0
  %116 = insertvalue { ptr, ptr, ptr, i32 } %115, ptr %.fca.1.extract11, 1
  %117 = insertvalue { ptr, ptr, ptr, i32 } %116, ptr %.fca.2.extract13, 2
  %118 = insertvalue { ptr, ptr, ptr, i32 } %117, i32 %offset.i.i196, 3
  %offset.i.i210 = load i32, ptr %offset_ptr.i.i181, align 4
  %119 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %120 = insertvalue { ptr, ptr, ptr, i32 } %119, ptr %.fca.1.extract, 1
  %121 = insertvalue { ptr, ptr, ptr, i32 } %120, ptr %.fca.2.extract, 2
  %122 = insertvalue { ptr, ptr, ptr, i32 } %121, i32 %offset.i.i210, 3
  %123 = load ptr, ptr %67, align 8
  %124 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %123, 0
  %125 = load ptr, ptr %68, align 8
  %126 = insertvalue { ptr, ptr, ptr, i32 } %124, ptr %125, 1
  %127 = getelementptr inbounds i8, ptr %67, i64 16
  %128 = load ptr, ptr %127, align 8
  %129 = insertvalue { ptr, ptr, ptr, i32 } %126, ptr %128, 2
  %130 = load i32, ptr %69, align 8
  %131 = insertvalue { ptr, ptr, ptr, i32 } %129, i32 %130, 3
  %132 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract57)
  %133 = load ptr, ptr %7, align 8
  %134 = call ptr %133(ptr %.fca.1.extract59)
  %135 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract57)
  %136 = load ptr, ptr %20, align 8
  %137 = call ptr %136(ptr %.fca.1.extract59)
  %result.i212 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  %138 = getelementptr i8, ptr %result.i212, i64 8
  store ptr %134, ptr %138, align 8
  %139 = getelementptr i8, ptr %result.i212, i64 16
  store ptr null, ptr %139, align 8
  %140 = call ptr @llvm.invariant.start.p0(i64 16, ptr %result.i212)
  store ptr @Iterator2, ptr %result.i212, align 8
  %result.i213 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  %141 = getelementptr i8, ptr %result.i213, i64 8
  store ptr %137, ptr %141, align 8
  %142 = getelementptr i8, ptr %result.i213, i64 16
  store ptr null, ptr %142, align 8
  %143 = call ptr @llvm.invariant.start.p0(i64 16, ptr %result.i213)
  store ptr @Iterator2, ptr %result.i213, align 8
  %144 = alloca [2 x ptr], align 8
  store ptr %result.i212, ptr %144, align 8
  %145 = getelementptr inbounds i8, ptr %144, i64 8
  store ptr %result.i213, ptr %145, align 8
  %146 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %144)
  %147 = call ptr @llvm.invariant.start.p0(i64 96, ptr %123)
  %148 = sext i32 %130 to i64
  %149 = getelementptr ptr, ptr %123, i64 %148
  %150 = getelementptr i8, ptr %149, i64 40
  %151 = load ptr, ptr %150, align 8
  %152 = alloca { ptr, ptr }, align 8
  store ptr %.fca.0.extract9, ptr %152, align 8
  %153 = getelementptr inbounds i8, ptr %152, i64 8
  store ptr %.fca.0.extract, ptr %153, align 8
  %154 = call ptr %151({ ptr, ptr, ptr, i32 } %131, ptr nonnull %152)
  call void %154({ ptr, ptr, ptr, i32 } %131, { ptr, ptr, ptr, i32 } %131, ptr nonnull %144, { ptr, ptr, ptr, i32 } %118, { ptr, ptr, ptr, i32 } %122)
  %155 = load ptr, ptr %67, align 8
  %156 = load ptr, ptr %68, align 8
  %157 = load ptr, ptr %127, align 8
  %hash_coef_ptr.i.i215 = getelementptr i8, ptr %155, i64 8
  %tbl_size_ptr.i.i216 = getelementptr i8, ptr %155, i64 16
  %offset_tbl_ptr.i.i217 = getelementptr i8, ptr %155, i64 40
  %hash_coef.i.i218 = load i64, ptr %hash_coef_ptr.i.i215, align 4
  %tbl_size.i.i219 = load i64, ptr %tbl_size_ptr.i.i216, align 4
  %offset_tbl.i.i220 = load ptr, ptr %offset_tbl_ptr.i.i217, align 8
  %product.i.i.i221 = mul i64 %hash_coef.i.i218, 4189192806087951739
  %shifted.i.i.i222 = lshr i64 %product.i.i.i221, 32
  %xored.i.i.i223 = xor i64 %shifted.i.i.i222, %product.i.i.i221
  %hash.i.i.i224 = and i64 %xored.i.i.i223, %tbl_size.i.i219
  %offset_ptr.i.i225 = getelementptr i32, ptr %offset_tbl.i.i220, i64 %hash.i.i.i224
  %offset.i.i226 = load i32, ptr %offset_ptr.i.i225, align 4
  %158 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %155, 0
  %159 = insertvalue { ptr, ptr, ptr, i32 } %158, ptr %156, 1
  %160 = insertvalue { ptr, ptr, ptr, i32 } %159, ptr %157, 2
  %161 = insertvalue { ptr, ptr, ptr, i32 } %160, i32 %offset.i.i226, 3
  ret { ptr, ptr, ptr, i32 } %161
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_ZipIterator2(ptr nocapture readnone %0) #5 {
  ret { i64, i64 } { i64 88, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ZipIterator2_field_ZipIterator2_0(ptr nocapture readonly %0) #0 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ZipIterator2_field_ZipIterator2_1(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ZipIterator2_field_ZipIterator2_2(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ZipIterator2_B_init_firstIterator2T_secondIterator2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 128
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ZipIterator2_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 136
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @ZipIterator2_init_firstIterator2T_secondIterator2U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 5502728639611621286
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %hash_coef_ptr.i.i18 = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i19 = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i20 = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i21 = load i64, ptr %hash_coef_ptr.i.i18, align 4
  %tbl_size.i.i22 = load i64, ptr %tbl_size_ptr.i.i19, align 4
  %offset_tbl.i.i23 = load ptr, ptr %offset_tbl_ptr.i.i20, align 8
  %product.i.i.i24 = mul i64 %hash_coef.i.i21, 4189192806087951739
  %shifted.i.i.i25 = lshr i64 %product.i.i.i24, 32
  %xored.i.i.i26 = xor i64 %shifted.i.i.i25, %product.i.i.i24
  %hash.i.i.i27 = and i64 %xored.i.i.i26, %tbl_size.i.i22
  %offset_ptr.i.i28 = getelementptr i32, ptr %offset_tbl.i.i23, i64 %hash.i.i.i27
  %offset.i.i43 = load i32, ptr %offset_ptr.i.i28, align 4
  %6 = tail call ptr @llvm.invariant.start.p0(i64 96, ptr %.fca.0.extract9)
  %7 = sext i32 %offset.i.i to i64
  %8 = getelementptr ptr, ptr %.fca.0.extract9, i64 %7
  %9 = getelementptr i8, ptr %8, i64 24
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr i8, ptr %10, i64 8
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.1.extract3, 1
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, ptr %.fca.2.extract5, 2
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, i32 %offset.i.i43, 3
  tail call void %12(ptr %.fca.1.extract11, { ptr, ptr, ptr, i32 } %16)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %hash_coef_ptr.i.i46 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i47 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i48 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i49 = load i64, ptr %hash_coef_ptr.i.i46, align 4
  %tbl_size.i.i50 = load i64, ptr %tbl_size_ptr.i.i47, align 4
  %offset_tbl.i.i51 = load ptr, ptr %offset_tbl_ptr.i.i48, align 8
  %product.i.i.i52 = mul i64 %hash_coef.i.i49, 4189192806087951739
  %shifted.i.i.i53 = lshr i64 %product.i.i.i52, 32
  %xored.i.i.i54 = xor i64 %shifted.i.i.i53, %product.i.i.i52
  %hash.i.i.i55 = and i64 %xored.i.i.i54, %tbl_size.i.i50
  %offset_ptr.i.i56 = getelementptr i32, ptr %offset_tbl.i.i51, i64 %hash.i.i.i55
  %offset.i.i71 = load i32, ptr %offset_ptr.i.i56, align 4
  %17 = tail call ptr @llvm.invariant.start.p0(i64 96, ptr %.fca.0.extract9)
  %18 = getelementptr i8, ptr %8, i64 32
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr i8, ptr %19, i64 8
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %23 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %.fca.1.extract, 1
  %24 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %.fca.2.extract, 2
  %25 = insertvalue { ptr, ptr, ptr, i32 } %24, i32 %offset.i.i71, 3
  tail call void %21(ptr %.fca.1.extract11, { ptr, ptr, ptr, i32 } %25)
  ret void
}

define { ptr, i160 } @ZipIterator2_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract30 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract32 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract30, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract30, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract30, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 5502728639611621286
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %6 = tail call ptr @llvm.invariant.start.p0(i64 96, ptr %.fca.0.extract30)
  %7 = sext i32 %offset.i.i to i64
  %8 = getelementptr ptr, ptr %.fca.0.extract30, i64 %7
  %9 = getelementptr i8, ptr %8, i64 24
  %10 = load ptr, ptr %9, align 8
  %11 = load ptr, ptr %10, align 8
  %12 = tail call { ptr, ptr, ptr, i32 } %11(ptr %.fca.1.extract32)
  %.fca.0.extract10 = extractvalue { ptr, ptr, ptr, i32 } %12, 0
  %.fca.1.extract12 = extractvalue { ptr, ptr, ptr, i32 } %12, 1
  %.fca.2.extract14 = extractvalue { ptr, ptr, ptr, i32 } %12, 2
  %.fca.3.extract16 = extractvalue { ptr, ptr, ptr, i32 } %12, 3
  %hash_coef_ptr.i.i53 = getelementptr i8, ptr %.fca.0.extract10, i64 8
  %tbl_size_ptr.i.i54 = getelementptr i8, ptr %.fca.0.extract10, i64 16
  %offset_tbl_ptr.i.i55 = getelementptr i8, ptr %.fca.0.extract10, i64 40
  %hash_coef.i.i56 = load i64, ptr %hash_coef_ptr.i.i53, align 4
  %tbl_size.i.i57 = load i64, ptr %tbl_size_ptr.i.i54, align 4
  %offset_tbl.i.i58 = load ptr, ptr %offset_tbl_ptr.i.i55, align 8
  %product.i.i.i59 = mul i64 %hash_coef.i.i56, 4189192806087951739
  %shifted.i.i.i60 = lshr i64 %product.i.i.i59, 32
  %xored.i.i.i61 = xor i64 %shifted.i.i.i60, %product.i.i.i59
  %hash.i.i.i62 = and i64 %xored.i.i.i61, %tbl_size.i.i57
  %offset_ptr.i.i63 = getelementptr i32, ptr %offset_tbl.i.i58, i64 %hash.i.i.i62
  %offset.i.i64 = load i32, ptr %offset_ptr.i.i63, align 4
  %eq.i = icmp eq i32 %.fca.3.extract16, %offset.i.i64
  tail call void @llvm.assume(i1 %eq.i) #30
  %13 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract10, 0
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.1.extract12, 1
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, ptr %.fca.2.extract14, 2
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, i32 %.fca.3.extract16, 3
  %17 = tail call ptr @llvm.invariant.start.p0(i64 96, ptr %.fca.0.extract30)
  %18 = load ptr, ptr %8, align 8
  %19 = tail call ptr %18(ptr %.fca.1.extract32)
  %20 = tail call ptr @llvm.invariant.start.p0(i64 96, ptr %.fca.0.extract30)
  %21 = getelementptr i8, ptr %8, i64 8
  %22 = load ptr, ptr %21, align 8
  %23 = tail call ptr %22(ptr %.fca.1.extract32)
  %24 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %25 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %.fca.0.extract10)
  %26 = sext i32 %.fca.3.extract16 to i64
  %27 = getelementptr ptr, ptr %.fca.0.extract10, i64 %26
  %28 = getelementptr i8, ptr %27, i64 8
  %29 = load ptr, ptr %28, align 8
  %30 = call ptr %29({ ptr, ptr, ptr, i32 } %16, ptr nonnull %4)
  %31 = call { ptr, i160 } %30({ ptr, ptr, ptr, i32 } %16, { ptr, ptr, ptr, i32 } %16, ptr nonnull %4)
  %.fca.0.extract4 = extractvalue { ptr, i160 } %31, 0
  %32 = call ptr @llvm.invariant.start.p0(i64 96, ptr %.fca.0.extract30)
  %33 = getelementptr i8, ptr %8, i64 32
  %34 = load ptr, ptr %33, align 8
  %35 = load ptr, ptr %34, align 8
  %36 = call { ptr, ptr, ptr, i32 } %35(ptr %.fca.1.extract32)
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %36, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %36, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %36, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %36, 3
  %hash_coef_ptr.i.i67 = getelementptr i8, ptr %.fca.0.extract2, i64 8
  %tbl_size_ptr.i.i68 = getelementptr i8, ptr %.fca.0.extract2, i64 16
  %offset_tbl_ptr.i.i69 = getelementptr i8, ptr %.fca.0.extract2, i64 40
  %hash_coef.i.i70 = load i64, ptr %hash_coef_ptr.i.i67, align 4
  %tbl_size.i.i71 = load i64, ptr %tbl_size_ptr.i.i68, align 4
  %offset_tbl.i.i72 = load ptr, ptr %offset_tbl_ptr.i.i69, align 8
  %product.i.i.i73 = mul i64 %hash_coef.i.i70, 4189192806087951739
  %shifted.i.i.i74 = lshr i64 %product.i.i.i73, 32
  %xored.i.i.i75 = xor i64 %shifted.i.i.i74, %product.i.i.i73
  %hash.i.i.i76 = and i64 %xored.i.i.i75, %tbl_size.i.i71
  %offset_ptr.i.i77 = getelementptr i32, ptr %offset_tbl.i.i72, i64 %hash.i.i.i76
  %offset.i.i78 = load i32, ptr %offset_ptr.i.i77, align 4
  %eq.i81 = icmp eq i32 %.fca.3.extract, %offset.i.i78
  call void @llvm.assume(i1 %eq.i81) #30
  %37 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract2, 0
  %38 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %.fca.1.extract3, 1
  %39 = insertvalue { ptr, ptr, ptr, i32 } %38, ptr %.fca.2.extract, 2
  %40 = insertvalue { ptr, ptr, ptr, i32 } %39, i32 %.fca.3.extract, 3
  %41 = call ptr @llvm.invariant.start.p0(i64 96, ptr %.fca.0.extract30)
  %42 = load ptr, ptr %8, align 8
  %43 = call ptr %42(ptr %.fca.1.extract32)
  %44 = call ptr @llvm.invariant.start.p0(i64 96, ptr %.fca.0.extract30)
  %45 = load ptr, ptr %21, align 8
  %46 = call ptr %45(ptr %.fca.1.extract32)
  %47 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %48 = call ptr @llvm.invariant.start.p0(i64 24, ptr %.fca.0.extract2)
  %49 = sext i32 %.fca.3.extract to i64
  %50 = getelementptr ptr, ptr %.fca.0.extract2, i64 %49
  %51 = getelementptr i8, ptr %50, i64 8
  %52 = load ptr, ptr %51, align 8
  %53 = call ptr %52({ ptr, ptr, ptr, i32 } %40, ptr nonnull %4)
  %54 = call { ptr, i160 } %53({ ptr, ptr, ptr, i32 } %40, { ptr, ptr, ptr, i32 } %40, ptr nonnull %4)
  %55 = icmp ne ptr %.fca.0.extract4, @nil_typ
  %56 = icmp ne ptr %.fca.0.extract4, null
  %.not49 = and i1 %55, %56
  br i1 %.not49, label %57, label %.thread

57:                                               ; preds = %3
  %.fca.0.extract = extractvalue { ptr, i160 } %54, 0
  %58 = icmp ne ptr %.fca.0.extract, @nil_typ
  %59 = icmp ne ptr %.fca.0.extract, null
  %.not51 = and i1 %58, %59
  br i1 %.not51, label %60, label %.thread

60:                                               ; preds = %57
  %61 = call ptr @llvm.invariant.start.p0(i64 96, ptr nonnull %.fca.0.extract30)
  %62 = load ptr, ptr %8, align 8
  %63 = call ptr %62(ptr %.fca.1.extract32)
  %64 = call ptr @llvm.invariant.start.p0(i64 96, ptr nonnull %.fca.0.extract30)
  %65 = load ptr, ptr %21, align 8
  %66 = call ptr %65(ptr %.fca.1.extract32)
  %67 = load ptr, ptr %63, align 8
  %68 = getelementptr i8, ptr %67, i64 48
  %69 = load ptr, ptr %68, align 8
  %70 = call { i64, i64 } %69(ptr nonnull %63)
  %71 = extractvalue { i64, i64 } %70, 0
  %72 = extractvalue { i64, i64 } %70, 1
  %73 = urem i64 16, %72
  %74 = icmp eq i64 %73, 0
  %75 = sub i64 %72, %73
  %76 = select i1 %74, i64 0, i64 %75
  %77 = add i64 %71, 16
  %78 = add i64 %77, %76
  %79 = load ptr, ptr %66, align 8
  %80 = getelementptr i8, ptr %79, i64 48
  %81 = load ptr, ptr %80, align 8
  %82 = call { i64, i64 } %81(ptr nonnull %66)
  %83 = extractvalue { i64, i64 } %82, 0
  %84 = extractvalue { i64, i64 } %82, 1
  %85 = call i64 @llvm.umax.i64(i64 %72, i64 %84)
  %86 = call i64 @llvm.umax.i64(i64 %85, i64 8)
  %87 = urem i64 %78, %84
  %88 = icmp eq i64 %87, 0
  %89 = sub i64 %84, %87
  %90 = select i1 %88, i64 0, i64 %89
  %91 = add i64 %83, %78
  %92 = add i64 %91, %90
  %93 = urem i64 %92, %86
  %94 = icmp eq i64 %93, 0
  %95 = sub i64 %86, %93
  %96 = select i1 %94, i64 0, i64 %95
  %97 = add i64 %96, %92
  %result.i = call noalias ptr @bump_malloc_inner(i64 noundef %97, ptr nonnull @current_ptr) #29
  store ptr %63, ptr %result.i, align 8
  %98 = getelementptr i8, ptr %result.i, i64 8
  store ptr %66, ptr %98, align 8
  %99 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i)
  %100 = getelementptr inbounds i8, ptr %5, i64 8
  %101 = getelementptr inbounds i8, ptr %5, i64 24
  store ptr @Pair, ptr %5, align 8
  store ptr %result.i, ptr %100, align 8
  store i32 9, ptr %101, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %5)
  %103 = call ptr @llvm.invariant.start.p0(i64 96, ptr nonnull %.fca.0.extract30)
  %104 = load ptr, ptr %8, align 8
  %105 = call ptr %104(ptr %.fca.1.extract32)
  %106 = call ptr @llvm.invariant.start.p0(i64 96, ptr nonnull %.fca.0.extract30)
  %107 = load ptr, ptr %21, align 8
  %108 = call ptr %107(ptr %.fca.1.extract32)
  %109 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @Pair)
  %110 = load ptr, ptr %result.i, align 8
  %111 = load ptr, ptr %110, align 8
  %112 = getelementptr i8, ptr %111, i64 48
  %113 = load ptr, ptr %112, align 8
  %114 = call { i64, i64 } %113(ptr nonnull %110)
  %115 = extractvalue { i64, i64 } %114, 1
  %116 = urem i64 16, %115
  %117 = icmp eq i64 %116, 0
  %reass.sub = sub i64 %115, %116
  %118 = add i64 %reass.sub, 16
  %119 = select i1 %117, i64 16, i64 %118
  %120 = getelementptr i8, ptr %result.i, i64 %119
  %121 = load ptr, ptr %result.i, align 8
  %122 = load ptr, ptr %121, align 8
  %123 = getelementptr i8, ptr %122, i64 64
  %124 = load ptr, ptr %123, align 8
  call void %124({ ptr, i160 } %31, ptr nonnull %121, ptr %120)
  %125 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @Pair)
  %126 = load ptr, ptr %result.i, align 8
  %127 = load ptr, ptr %126, align 8
  %128 = getelementptr i8, ptr %127, i64 48
  %129 = load ptr, ptr %128, align 8
  %130 = call { i64, i64 } %129(ptr nonnull %126)
  %131 = extractvalue { i64, i64 } %130, 0
  %132 = extractvalue { i64, i64 } %130, 1
  %133 = urem i64 16, %132
  %134 = icmp eq i64 %133, 0
  %135 = sub i64 %132, %133
  %136 = select i1 %134, i64 0, i64 %135
  %137 = add i64 %131, 16
  %138 = add i64 %137, %136
  %139 = load ptr, ptr %98, align 8
  %140 = load ptr, ptr %139, align 8
  %141 = getelementptr i8, ptr %140, i64 48
  %142 = load ptr, ptr %141, align 8
  %143 = call { i64, i64 } %142(ptr nonnull %139)
  %144 = extractvalue { i64, i64 } %143, 1
  %145 = urem i64 %138, %144
  %146 = icmp eq i64 %145, 0
  %147 = sub i64 %144, %145
  %148 = select i1 %146, i64 0, i64 %147
  %149 = getelementptr i8, ptr %result.i, i64 %138
  %150 = getelementptr i8, ptr %149, i64 %148
  %151 = load ptr, ptr %98, align 8
  %152 = load ptr, ptr %151, align 8
  %153 = getelementptr i8, ptr %152, i64 64
  %154 = load ptr, ptr %153, align 8
  call void %154({ ptr, i160 } %54, ptr nonnull %151, ptr %150)
  %155 = load ptr, ptr %5, align 8
  %156 = load i160, ptr %100, align 8
  br label %.thread

.thread:                                          ; preds = %3, %57, %60
  %.reg2mem15.sroa.3.0113 = phi i160 [ %156, %60 ], [ poison, %57 ], [ poison, %3 ]
  %157 = phi ptr [ %155, %60 ], [ @nil_typ, %57 ], [ @nil_typ, %3 ]
  %.reload12.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %157, 0
  %.reload12.fca.1.insert = insertvalue { ptr, i160 } %.reload12.fca.0.insert, i160 %.reg2mem15.sroa.3.0113, 1
  ret { ptr, i160 } %.reload12.fca.1.insert
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ZipIterator2_getter_second(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 56
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 64
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 72
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 80
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ZipIterator2_setter_second(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 56
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 64
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 72
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 80
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ZipIterator2_getter_first(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 24
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 32
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 40
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 48
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ZipIterator2_setter_first(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 24
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 32
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 40
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 48
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ZipIterable2_getter_second(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 56
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 64
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 72
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 80
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ZipIterable2_setter_second(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 56
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 64
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 72
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 80
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ZipIterable2_getter_first(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 24
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 32
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 40
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 48
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ZipIterable2_setter_first(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 24
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 32
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 40
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 48
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_InterleaveIterable2(ptr nocapture readnone %0) #5 {
  ret { i64, i64 } { i64 72, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @InterleaveIterable2_field_InterleaveIterable2_0(ptr nocapture readonly %0) #0 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @InterleaveIterable2_B_init_firstIterable2T_secondIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 192
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @InterleaveIterable2_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 200
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @InterleaveIterable2_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 208
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @InterleaveIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 216
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @InterleaveIterable2_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 224
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @InterleaveIterable2_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 232
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @InterleaveIterable2_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 240
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @InterleaveIterable2_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 248
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @InterleaveIterable2_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 256
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @InterleaveIterable2_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 264
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @InterleaveIterable2_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 272
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @InterleaveIterable2_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 280
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @InterleaveIterable2_init_firstIterable2T_secondIterable2T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -6258231685215461775
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %hash_coef_ptr.i.i18 = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i19 = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i20 = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i21 = load i64, ptr %hash_coef_ptr.i.i18, align 4
  %tbl_size.i.i22 = load i64, ptr %tbl_size_ptr.i.i19, align 4
  %offset_tbl.i.i23 = load ptr, ptr %offset_tbl_ptr.i.i20, align 8
  %product.i.i.i24 = mul i64 %hash_coef.i.i21, 5693646204635713916
  %shifted.i.i.i25 = lshr i64 %product.i.i.i24, 32
  %xored.i.i.i26 = xor i64 %shifted.i.i.i25, %product.i.i.i24
  %hash.i.i.i27 = and i64 %xored.i.i.i26, %tbl_size.i.i22
  %offset_ptr.i.i28 = getelementptr i32, ptr %offset_tbl.i.i23, i64 %hash.i.i.i27
  %offset.i.i43 = load i32, ptr %offset_ptr.i.i28, align 4
  %6 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract9)
  %7 = sext i32 %offset.i.i to i64
  %8 = getelementptr ptr, ptr %.fca.0.extract9, i64 %7
  %9 = getelementptr i8, ptr %8, i64 8
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr i8, ptr %10, i64 8
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.1.extract3, 1
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, ptr %.fca.2.extract5, 2
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, i32 %offset.i.i43, 3
  tail call void %12(ptr %.fca.1.extract11, { ptr, ptr, ptr, i32 } %16)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %hash_coef_ptr.i.i46 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i47 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i48 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i49 = load i64, ptr %hash_coef_ptr.i.i46, align 4
  %tbl_size.i.i50 = load i64, ptr %tbl_size_ptr.i.i47, align 4
  %offset_tbl.i.i51 = load ptr, ptr %offset_tbl_ptr.i.i48, align 8
  %product.i.i.i52 = mul i64 %hash_coef.i.i49, 5693646204635713916
  %shifted.i.i.i53 = lshr i64 %product.i.i.i52, 32
  %xored.i.i.i54 = xor i64 %shifted.i.i.i53, %product.i.i.i52
  %hash.i.i.i55 = and i64 %xored.i.i.i54, %tbl_size.i.i50
  %offset_ptr.i.i56 = getelementptr i32, ptr %offset_tbl.i.i51, i64 %hash.i.i.i55
  %offset.i.i71 = load i32, ptr %offset_ptr.i.i56, align 4
  %17 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract9)
  %18 = getelementptr i8, ptr %8, i64 16
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr i8, ptr %19, i64 8
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %23 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %.fca.1.extract, 1
  %24 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %.fca.2.extract, 2
  %25 = insertvalue { ptr, ptr, ptr, i32 } %24, i32 %offset.i.i71, 3
  tail call void %21(ptr %.fca.1.extract11, { ptr, ptr, ptr, i32 } %25)
  ret void
}

define { ptr, ptr, ptr, i32 } @InterleaveIterable2_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract57 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract59 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract57, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract57, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract57, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -6258231685215461775
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %5 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract57, i64 %6
  %8 = getelementptr i8, ptr %7, i64 8
  %9 = load ptr, ptr %8, align 8
  %10 = load ptr, ptr %9, align 8
  %11 = tail call { ptr, ptr, ptr, i32 } %10(ptr %.fca.1.extract59)
  %.fca.0.extract49 = extractvalue { ptr, ptr, ptr, i32 } %11, 0
  %.fca.1.extract51 = extractvalue { ptr, ptr, ptr, i32 } %11, 1
  %.fca.2.extract53 = extractvalue { ptr, ptr, ptr, i32 } %11, 2
  %.fca.3.extract55 = extractvalue { ptr, ptr, ptr, i32 } %11, 3
  %hash_coef_ptr.i.i66 = getelementptr i8, ptr %.fca.0.extract49, i64 8
  %tbl_size_ptr.i.i67 = getelementptr i8, ptr %.fca.0.extract49, i64 16
  %offset_tbl_ptr.i.i68 = getelementptr i8, ptr %.fca.0.extract49, i64 40
  %hash_coef.i.i69 = load i64, ptr %hash_coef_ptr.i.i66, align 4
  %tbl_size.i.i70 = load i64, ptr %tbl_size_ptr.i.i67, align 4
  %offset_tbl.i.i71 = load ptr, ptr %offset_tbl_ptr.i.i68, align 8
  %product.i.i.i72 = mul i64 %hash_coef.i.i69, 5693646204635713916
  %shifted.i.i.i73 = lshr i64 %product.i.i.i72, 32
  %xored.i.i.i74 = xor i64 %shifted.i.i.i73, %product.i.i.i72
  %hash.i.i.i75 = and i64 %xored.i.i.i74, %tbl_size.i.i70
  %offset_ptr.i.i76 = getelementptr i32, ptr %offset_tbl.i.i71, i64 %hash.i.i.i75
  %offset.i.i77 = load i32, ptr %offset_ptr.i.i76, align 4
  %eq.i = icmp eq i32 %.fca.3.extract55, %offset.i.i77
  tail call void @llvm.assume(i1 %eq.i) #30
  %12 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract49, 0
  %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.1.extract51, 1
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.2.extract53, 2
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, i32 %.fca.3.extract55, 3
  %16 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
  %17 = load ptr, ptr %7, align 8
  %18 = tail call ptr %17(ptr %.fca.1.extract59)
  %19 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %20 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract49)
  %21 = sext i32 %.fca.3.extract55 to i64
  %22 = getelementptr ptr, ptr %.fca.0.extract49, i64 %21
  %23 = getelementptr i8, ptr %22, i64 8
  %24 = load ptr, ptr %23, align 8
  %25 = call ptr %24({ ptr, ptr, ptr, i32 } %15, ptr nonnull %4)
  %26 = call { ptr, ptr, ptr, i32 } %25({ ptr, ptr, ptr, i32 } %15, { ptr, ptr, ptr, i32 } %15, ptr nonnull %4)
  %27 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
  %28 = getelementptr i8, ptr %7, i64 16
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %29, align 8
  %31 = call { ptr, ptr, ptr, i32 } %30(ptr %.fca.1.extract59)
  %.fca.0.extract33 = extractvalue { ptr, ptr, ptr, i32 } %31, 0
  %.fca.1.extract35 = extractvalue { ptr, ptr, ptr, i32 } %31, 1
  %.fca.2.extract37 = extractvalue { ptr, ptr, ptr, i32 } %31, 2
  %.fca.3.extract39 = extractvalue { ptr, ptr, ptr, i32 } %31, 3
  %hash_coef_ptr.i.i94 = getelementptr i8, ptr %.fca.0.extract33, i64 8
  %tbl_size_ptr.i.i95 = getelementptr i8, ptr %.fca.0.extract33, i64 16
  %offset_tbl_ptr.i.i96 = getelementptr i8, ptr %.fca.0.extract33, i64 40
  %hash_coef.i.i97 = load i64, ptr %hash_coef_ptr.i.i94, align 4
  %tbl_size.i.i98 = load i64, ptr %tbl_size_ptr.i.i95, align 4
  %offset_tbl.i.i99 = load ptr, ptr %offset_tbl_ptr.i.i96, align 8
  %product.i.i.i100 = mul i64 %hash_coef.i.i97, 5693646204635713916
  %shifted.i.i.i101 = lshr i64 %product.i.i.i100, 32
  %xored.i.i.i102 = xor i64 %shifted.i.i.i101, %product.i.i.i100
  %hash.i.i.i103 = and i64 %xored.i.i.i102, %tbl_size.i.i98
  %offset_ptr.i.i104 = getelementptr i32, ptr %offset_tbl.i.i99, i64 %hash.i.i.i103
  %offset.i.i105 = load i32, ptr %offset_ptr.i.i104, align 4
  %eq.i108 = icmp eq i32 %.fca.3.extract39, %offset.i.i105
  call void @llvm.assume(i1 %eq.i108) #30
  %32 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract33, 0
  %33 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %.fca.1.extract35, 1
  %34 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %.fca.2.extract37, 2
  %35 = insertvalue { ptr, ptr, ptr, i32 } %34, i32 %.fca.3.extract39, 3
  %36 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
  %37 = load ptr, ptr %7, align 8
  %38 = call ptr %37(ptr %.fca.1.extract59)
  %39 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %40 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract33)
  %41 = sext i32 %.fca.3.extract39 to i64
  %42 = getelementptr ptr, ptr %.fca.0.extract33, i64 %41
  %43 = getelementptr i8, ptr %42, i64 8
  %44 = load ptr, ptr %43, align 8
  %45 = call ptr %44({ ptr, ptr, ptr, i32 } %35, ptr nonnull %4)
  %46 = call { ptr, ptr, ptr, i32 } %45({ ptr, ptr, ptr, i32 } %35, { ptr, ptr, ptr, i32 } %35, ptr nonnull %4)
  %47 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
  %48 = load ptr, ptr %7, align 8
  %49 = call ptr %48(ptr %.fca.1.extract59)
  %result.i = call noalias dereferenceable_or_null(80) ptr @bump_malloc_inner(i64 noundef 80, ptr nonnull @current_ptr) #29
  store ptr %49, ptr %result.i, align 8
  %50 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i)
  %51 = alloca { ptr, ptr, ptr, i32 }, align 8
  %52 = getelementptr inbounds i8, ptr %51, i64 8
  %53 = getelementptr inbounds i8, ptr %51, i64 24
  store ptr @InterleaveIterator2, ptr %51, align 8
  store ptr %result.i, ptr %52, align 8
  store i32 9, ptr %53, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %51)
  %55 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
  %56 = load ptr, ptr %8, align 8
  %57 = load ptr, ptr %56, align 8
  %58 = call { ptr, ptr, ptr, i32 } %57(ptr %.fca.1.extract59)
  %.fca.0.extract17 = extractvalue { ptr, ptr, ptr, i32 } %58, 0
  %.fca.1.extract19 = extractvalue { ptr, ptr, ptr, i32 } %58, 1
  %.fca.2.extract21 = extractvalue { ptr, ptr, ptr, i32 } %58, 2
  %.fca.3.extract23 = extractvalue { ptr, ptr, ptr, i32 } %58, 3
  %hash_coef_ptr.i.i124 = getelementptr i8, ptr %.fca.0.extract17, i64 8
  %tbl_size_ptr.i.i125 = getelementptr i8, ptr %.fca.0.extract17, i64 16
  %offset_tbl_ptr.i.i126 = getelementptr i8, ptr %.fca.0.extract17, i64 40
  %hash_coef.i.i127 = load i64, ptr %hash_coef_ptr.i.i124, align 4
  %tbl_size.i.i128 = load i64, ptr %tbl_size_ptr.i.i125, align 4
  %offset_tbl.i.i129 = load ptr, ptr %offset_tbl_ptr.i.i126, align 8
  %product.i.i.i130 = mul i64 %hash_coef.i.i127, 5693646204635713916
  %shifted.i.i.i131 = lshr i64 %product.i.i.i130, 32
  %xored.i.i.i132 = xor i64 %shifted.i.i.i131, %product.i.i.i130
  %hash.i.i.i133 = and i64 %xored.i.i.i132, %tbl_size.i.i128
  %offset_ptr.i.i134 = getelementptr i32, ptr %offset_tbl.i.i129, i64 %hash.i.i.i133
  %offset.i.i135 = load i32, ptr %offset_ptr.i.i134, align 4
  %eq.i138 = icmp eq i32 %.fca.3.extract23, %offset.i.i135
  call void @llvm.assume(i1 %eq.i138) #30
  %59 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract17, 0
  %60 = insertvalue { ptr, ptr, ptr, i32 } %59, ptr %.fca.1.extract19, 1
  %61 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %.fca.2.extract21, 2
  %62 = insertvalue { ptr, ptr, ptr, i32 } %61, i32 %.fca.3.extract23, 3
  %63 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
  %64 = load ptr, ptr %7, align 8
  %65 = call ptr %64(ptr %.fca.1.extract59)
  %66 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %67 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract17)
  %68 = sext i32 %.fca.3.extract23 to i64
  %69 = getelementptr ptr, ptr %.fca.0.extract17, i64 %68
  %70 = getelementptr i8, ptr %69, i64 8
  %71 = load ptr, ptr %70, align 8
  %72 = call ptr %71({ ptr, ptr, ptr, i32 } %62, ptr nonnull %4)
  %73 = call { ptr, ptr, ptr, i32 } %72({ ptr, ptr, ptr, i32 } %62, { ptr, ptr, ptr, i32 } %62, ptr nonnull %4)
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %73, 0
  %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %73, 1
  %.fca.2.extract13 = extractvalue { ptr, ptr, ptr, i32 } %73, 2
  %hash_coef_ptr.i.i140 = getelementptr i8, ptr %.fca.0.extract9, i64 8
  %tbl_size_ptr.i.i141 = getelementptr i8, ptr %.fca.0.extract9, i64 16
  %offset_tbl_ptr.i.i142 = getelementptr i8, ptr %.fca.0.extract9, i64 40
  %74 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
  %75 = load ptr, ptr %28, align 8
  %76 = load ptr, ptr %75, align 8
  %77 = call { ptr, ptr, ptr, i32 } %76(ptr %.fca.1.extract59)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %77, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %77, 1
  %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %77, 2
  %.fca.3.extract7 = extractvalue { ptr, ptr, ptr, i32 } %77, 3
  %hash_coef_ptr.i.i154 = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i155 = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i156 = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i157 = load i64, ptr %hash_coef_ptr.i.i154, align 4
  %tbl_size.i.i158 = load i64, ptr %tbl_size_ptr.i.i155, align 4
  %offset_tbl.i.i159 = load ptr, ptr %offset_tbl_ptr.i.i156, align 8
  %product.i.i.i160 = mul i64 %hash_coef.i.i157, 5693646204635713916
  %shifted.i.i.i161 = lshr i64 %product.i.i.i160, 32
  %xored.i.i.i162 = xor i64 %shifted.i.i.i161, %product.i.i.i160
  %hash.i.i.i163 = and i64 %xored.i.i.i162, %tbl_size.i.i158
  %offset_ptr.i.i164 = getelementptr i32, ptr %offset_tbl.i.i159, i64 %hash.i.i.i163
  %offset.i.i165 = load i32, ptr %offset_ptr.i.i164, align 4
  %eq.i168 = icmp eq i32 %.fca.3.extract7, %offset.i.i165
  call void @llvm.assume(i1 %eq.i168) #30
  %78 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %79 = insertvalue { ptr, ptr, ptr, i32 } %78, ptr %.fca.1.extract3, 1
  %80 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %.fca.2.extract5, 2
  %81 = insertvalue { ptr, ptr, ptr, i32 } %80, i32 %.fca.3.extract7, 3
  %82 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
  %83 = load ptr, ptr %7, align 8
  %84 = call ptr %83(ptr %.fca.1.extract59)
  %85 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %86 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract1)
  %87 = sext i32 %.fca.3.extract7 to i64
  %88 = getelementptr ptr, ptr %.fca.0.extract1, i64 %87
  %89 = getelementptr i8, ptr %88, i64 8
  %90 = load ptr, ptr %89, align 8
  %91 = call ptr %90({ ptr, ptr, ptr, i32 } %81, ptr nonnull %4)
  %92 = call { ptr, ptr, ptr, i32 } %91({ ptr, ptr, ptr, i32 } %81, { ptr, ptr, ptr, i32 } %81, ptr nonnull %4)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %92, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %92, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %92, 2
  %hash_coef_ptr.i.i170 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i171 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i172 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i173 = load i64, ptr %hash_coef_ptr.i.i170, align 4
  %tbl_size.i.i174 = load i64, ptr %tbl_size_ptr.i.i171, align 4
  %offset_tbl.i.i175 = load ptr, ptr %offset_tbl_ptr.i.i172, align 8
  %product.i.i.i176 = mul i64 %hash_coef.i.i173, 4189192806087951739
  %shifted.i.i.i177 = lshr i64 %product.i.i.i176, 32
  %xored.i.i.i178 = xor i64 %shifted.i.i.i177, %product.i.i.i176
  %hash.i.i.i179 = and i64 %xored.i.i.i178, %tbl_size.i.i174
  %offset_ptr.i.i180 = getelementptr i32, ptr %offset_tbl.i.i175, i64 %hash.i.i.i179
  %hash_coef.i.i187 = load i64, ptr %hash_coef_ptr.i.i140, align 4
  %tbl_size.i.i188 = load i64, ptr %tbl_size_ptr.i.i141, align 4
  %offset_tbl.i.i189 = load ptr, ptr %offset_tbl_ptr.i.i142, align 8
  %product.i.i.i190 = mul i64 %hash_coef.i.i187, 4189192806087951739
  %shifted.i.i.i191 = lshr i64 %product.i.i.i190, 32
  %xored.i.i.i192 = xor i64 %shifted.i.i.i191, %product.i.i.i190
  %hash.i.i.i193 = and i64 %xored.i.i.i192, %tbl_size.i.i188
  %offset_ptr.i.i194 = getelementptr i32, ptr %offset_tbl.i.i189, i64 %hash.i.i.i193
  %offset.i.i195 = load i32, ptr %offset_ptr.i.i194, align 4
  %93 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract9, 0
  %94 = insertvalue { ptr, ptr, ptr, i32 } %93, ptr %.fca.1.extract11, 1
  %95 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %.fca.2.extract13, 2
  %96 = insertvalue { ptr, ptr, ptr, i32 } %95, i32 %offset.i.i195, 3
  %offset.i.i209 = load i32, ptr %offset_ptr.i.i180, align 4
  %97 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %98 = insertvalue { ptr, ptr, ptr, i32 } %97, ptr %.fca.1.extract, 1
  %99 = insertvalue { ptr, ptr, ptr, i32 } %98, ptr %.fca.2.extract, 2
  %100 = insertvalue { ptr, ptr, ptr, i32 } %99, i32 %offset.i.i209, 3
  %101 = load ptr, ptr %51, align 8
  %102 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %101, 0
  %103 = load ptr, ptr %52, align 8
  %104 = insertvalue { ptr, ptr, ptr, i32 } %102, ptr %103, 1
  %105 = getelementptr inbounds i8, ptr %51, i64 16
  %106 = load ptr, ptr %105, align 8
  %107 = insertvalue { ptr, ptr, ptr, i32 } %104, ptr %106, 2
  %108 = load i32, ptr %53, align 8
  %109 = insertvalue { ptr, ptr, ptr, i32 } %107, i32 %108, 3
  %110 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
  %111 = load ptr, ptr %7, align 8
  %112 = call ptr %111(ptr %.fca.1.extract59)
  %result.i211 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  %113 = getelementptr i8, ptr %result.i211, i64 8
  store ptr %112, ptr %113, align 8
  %114 = getelementptr i8, ptr %result.i211, i64 16
  store ptr null, ptr %114, align 8
  %115 = call ptr @llvm.invariant.start.p0(i64 16, ptr %result.i211)
  store ptr @Iterator2, ptr %result.i211, align 8
  %result.i212 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  %116 = getelementptr i8, ptr %result.i212, i64 8
  store ptr %112, ptr %116, align 8
  %117 = getelementptr i8, ptr %result.i212, i64 16
  store ptr null, ptr %117, align 8
  %118 = call ptr @llvm.invariant.start.p0(i64 16, ptr %result.i212)
  store ptr @Iterator2, ptr %result.i212, align 8
  %119 = alloca [2 x ptr], align 8
  store ptr %result.i211, ptr %119, align 8
  %120 = getelementptr inbounds i8, ptr %119, i64 8
  store ptr %result.i212, ptr %120, align 8
  %121 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %119)
  %122 = call ptr @llvm.invariant.start.p0(i64 88, ptr %101)
  %123 = sext i32 %108 to i64
  %124 = getelementptr ptr, ptr %101, i64 %123
  %125 = getelementptr i8, ptr %124, i64 32
  %126 = load ptr, ptr %125, align 8
  %127 = alloca { ptr, ptr }, align 8
  store ptr %.fca.0.extract9, ptr %127, align 8
  %128 = getelementptr inbounds i8, ptr %127, i64 8
  store ptr %.fca.0.extract, ptr %128, align 8
  %129 = call ptr %126({ ptr, ptr, ptr, i32 } %109, ptr nonnull %127)
  call void %129({ ptr, ptr, ptr, i32 } %109, { ptr, ptr, ptr, i32 } %109, ptr nonnull %119, { ptr, ptr, ptr, i32 } %96, { ptr, ptr, ptr, i32 } %100)
  %130 = load ptr, ptr %51, align 8
  %131 = load ptr, ptr %52, align 8
  %132 = load ptr, ptr %105, align 8
  %hash_coef_ptr.i.i214 = getelementptr i8, ptr %130, i64 8
  %tbl_size_ptr.i.i215 = getelementptr i8, ptr %130, i64 16
  %offset_tbl_ptr.i.i216 = getelementptr i8, ptr %130, i64 40
  %hash_coef.i.i217 = load i64, ptr %hash_coef_ptr.i.i214, align 4
  %tbl_size.i.i218 = load i64, ptr %tbl_size_ptr.i.i215, align 4
  %offset_tbl.i.i219 = load ptr, ptr %offset_tbl_ptr.i.i216, align 8
  %product.i.i.i220 = mul i64 %hash_coef.i.i217, 4189192806087951739
  %shifted.i.i.i221 = lshr i64 %product.i.i.i220, 32
  %xored.i.i.i222 = xor i64 %shifted.i.i.i221, %product.i.i.i220
  %hash.i.i.i223 = and i64 %xored.i.i.i222, %tbl_size.i.i218
  %offset_ptr.i.i224 = getelementptr i32, ptr %offset_tbl.i.i219, i64 %hash.i.i.i223
  %offset.i.i225 = load i32, ptr %offset_ptr.i.i224, align 4
  %133 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %130, 0
  %134 = insertvalue { ptr, ptr, ptr, i32 } %133, ptr %131, 1
  %135 = insertvalue { ptr, ptr, ptr, i32 } %134, ptr %132, 2
  %136 = insertvalue { ptr, ptr, ptr, i32 } %135, i32 %offset.i.i225, 3
  ret { ptr, ptr, ptr, i32 } %136
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_InterleaveIterator2(ptr nocapture readnone %0) #5 {
  ret { i64, i64 } { i64 80, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @InterleaveIterator2_field_InterleaveIterator2_0(ptr nocapture readonly %0) #0 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @InterleaveIterator2_B_init_firstIterator2T_secondIterator2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 120
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @InterleaveIterator2_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 128
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @InterleaveIterator2_init_firstIterator2T_secondIterator2T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 6709847746581360093
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %hash_coef_ptr.i.i18 = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i19 = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i20 = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i21 = load i64, ptr %hash_coef_ptr.i.i18, align 4
  %tbl_size.i.i22 = load i64, ptr %tbl_size_ptr.i.i19, align 4
  %offset_tbl.i.i23 = load ptr, ptr %offset_tbl_ptr.i.i20, align 8
  %product.i.i.i24 = mul i64 %hash_coef.i.i21, 4189192806087951739
  %shifted.i.i.i25 = lshr i64 %product.i.i.i24, 32
  %xored.i.i.i26 = xor i64 %shifted.i.i.i25, %product.i.i.i24
  %hash.i.i.i27 = and i64 %xored.i.i.i26, %tbl_size.i.i22
  %offset_ptr.i.i28 = getelementptr i32, ptr %offset_tbl.i.i23, i64 %hash.i.i.i27
  %offset.i.i43 = load i32, ptr %offset_ptr.i.i28, align 4
  %6 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr %.fca.0.extract9)
  %7 = sext i32 %offset.i.i to i64
  %8 = getelementptr ptr, ptr %.fca.0.extract9, i64 %7
  %9 = getelementptr i8, ptr %8, i64 8
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr i8, ptr %10, i64 8
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.1.extract3, 1
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, ptr %.fca.2.extract5, 2
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, i32 %offset.i.i43, 3
  tail call void %12(ptr %.fca.1.extract11, { ptr, ptr, ptr, i32 } %16)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %hash_coef_ptr.i.i46 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i47 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i48 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i49 = load i64, ptr %hash_coef_ptr.i.i46, align 4
  %tbl_size.i.i50 = load i64, ptr %tbl_size_ptr.i.i47, align 4
  %offset_tbl.i.i51 = load ptr, ptr %offset_tbl_ptr.i.i48, align 8
  %product.i.i.i52 = mul i64 %hash_coef.i.i49, 4189192806087951739
  %shifted.i.i.i53 = lshr i64 %product.i.i.i52, 32
  %xored.i.i.i54 = xor i64 %shifted.i.i.i53, %product.i.i.i52
  %hash.i.i.i55 = and i64 %xored.i.i.i54, %tbl_size.i.i50
  %offset_ptr.i.i56 = getelementptr i32, ptr %offset_tbl.i.i51, i64 %hash.i.i.i55
  %offset.i.i71 = load i32, ptr %offset_ptr.i.i56, align 4
  %17 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr %.fca.0.extract9)
  %18 = getelementptr i8, ptr %8, i64 16
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr i8, ptr %19, i64 8
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %23 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %.fca.1.extract, 1
  %24 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %.fca.2.extract, 2
  %25 = insertvalue { ptr, ptr, ptr, i32 } %24, i32 %offset.i.i71, 3
  tail call void %21(ptr %.fca.1.extract11, { ptr, ptr, ptr, i32 } %25)
  %26 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr %.fca.0.extract9)
  %27 = getelementptr i8, ptr %8, i64 24
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr i8, ptr %28, i64 8
  %30 = load ptr, ptr %29, align 8
  tail call void %30(ptr %.fca.1.extract11, i1 true)
  ret void
}

define { ptr, i160 } @InterleaveIterator2_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 6709847746581360093
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %5 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr %.fca.0.extract3)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract3, i64 %6
  %8 = getelementptr i8, ptr %7, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = load ptr, ptr %9, align 8
  %11 = tail call i1 %10(ptr %.fca.1.extract4)
  %12 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr nonnull %.fca.0.extract3)
  %13 = load ptr, ptr %8, align 8
  %14 = getelementptr i8, ptr %13, i64 8
  %15 = load ptr, ptr %14, align 8
  %not. = xor i1 %11, true
  %.104 = select i1 %11, i64 8, i64 16
  tail call void %15(ptr %.fca.1.extract4, i1 %not.)
  %16 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr nonnull %.fca.0.extract3)
  %17 = getelementptr i8, ptr %7, i64 %.104
  %18 = load ptr, ptr %17, align 8
  %19 = load ptr, ptr %18, align 8
  %20 = tail call { ptr, ptr, ptr, i32 } %19(ptr %.fca.1.extract4)
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %.fca.2.extract13 = extractvalue { ptr, ptr, ptr, i32 } %20, 2
  %.fca.3.extract15 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %hash_coef_ptr.i.i47 = getelementptr i8, ptr %.fca.0.extract9, i64 8
  %tbl_size_ptr.i.i48 = getelementptr i8, ptr %.fca.0.extract9, i64 16
  %offset_tbl_ptr.i.i49 = getelementptr i8, ptr %.fca.0.extract9, i64 40
  %hash_coef.i.i50 = load i64, ptr %hash_coef_ptr.i.i47, align 4
  %tbl_size.i.i51 = load i64, ptr %tbl_size_ptr.i.i48, align 4
  %offset_tbl.i.i52 = load ptr, ptr %offset_tbl_ptr.i.i49, align 8
  %product.i.i.i53 = mul i64 %hash_coef.i.i50, 4189192806087951739
  %shifted.i.i.i54 = lshr i64 %product.i.i.i53, 32
  %xored.i.i.i55 = xor i64 %shifted.i.i.i54, %product.i.i.i53
  %hash.i.i.i56 = and i64 %xored.i.i.i55, %tbl_size.i.i51
  %offset_ptr.i.i57 = getelementptr i32, ptr %offset_tbl.i.i52, i64 %hash.i.i.i56
  %offset.i.i58 = load i32, ptr %offset_ptr.i.i57, align 4
  %eq.i61 = icmp eq i32 %.fca.3.extract15, %offset.i.i58
  tail call void @llvm.assume(i1 %eq.i61) #30
  %21 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract9, 0
  %22 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %.fca.1.extract11, 1
  %23 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %.fca.2.extract13, 2
  %24 = insertvalue { ptr, ptr, ptr, i32 } %23, i32 %.fca.3.extract15, 3
  %25 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr nonnull %.fca.0.extract3)
  %26 = load ptr, ptr %7, align 8
  %27 = tail call ptr %26(ptr %.fca.1.extract4)
  %28 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %29 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %.fca.0.extract9)
  %30 = sext i32 %.fca.3.extract15 to i64
  %31 = getelementptr ptr, ptr %.fca.0.extract9, i64 %30
  %32 = getelementptr i8, ptr %31, i64 8
  %33 = load ptr, ptr %32, align 8
  %34 = call ptr %33({ ptr, ptr, ptr, i32 } %24, ptr nonnull %4)
  %35 = call { ptr, i160 } %34({ ptr, ptr, ptr, i32 } %24, { ptr, ptr, ptr, i32 } %24, ptr nonnull %4)
  ret { ptr, i160 } %35
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i1 @InterleaveIterator2_getter_on_first(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 72
  %3 = load i1, ptr %2, align 1
  ret i1 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @InterleaveIterator2_setter_on_first(ptr nocapture writeonly %0, i1 %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 72
  store i1 %1, ptr %3, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @InterleaveIterator2_getter_second(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 48
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 56
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 64
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @InterleaveIterator2_setter_second(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 40
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 48
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 56
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 64
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @InterleaveIterator2_getter_first(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @InterleaveIterator2_setter_first(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 32
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @InterleaveIterable2_getter_second(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 48
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 56
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 64
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @InterleaveIterable2_setter_second(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 40
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 48
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 56
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 64
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @InterleaveIterable2_getter_first(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @InterleaveIterable2_setter_first(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 32
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_ChainIterable2(ptr nocapture readnone %0) #5 {
  ret { i64, i64 } { i64 72, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ChainIterable2_field_ChainIterable2_0(ptr nocapture readonly %0) #0 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ChainIterable2_B_init_firstIterable2T_secondIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 192
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ChainIterable2_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 200
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ChainIterable2_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 208
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ChainIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 216
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ChainIterable2_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 224
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ChainIterable2_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 232
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ChainIterable2_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 240
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ChainIterable2_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 248
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ChainIterable2_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 256
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ChainIterable2_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 264
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ChainIterable2_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 272
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ChainIterable2_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 280
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @ChainIterable2_init_firstIterable2T_secondIterable2T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -5233298072945030060
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %hash_coef_ptr.i.i18 = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i19 = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i20 = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i21 = load i64, ptr %hash_coef_ptr.i.i18, align 4
  %tbl_size.i.i22 = load i64, ptr %tbl_size_ptr.i.i19, align 4
  %offset_tbl.i.i23 = load ptr, ptr %offset_tbl_ptr.i.i20, align 8
  %product.i.i.i24 = mul i64 %hash_coef.i.i21, 5693646204635713916
  %shifted.i.i.i25 = lshr i64 %product.i.i.i24, 32
  %xored.i.i.i26 = xor i64 %shifted.i.i.i25, %product.i.i.i24
  %hash.i.i.i27 = and i64 %xored.i.i.i26, %tbl_size.i.i22
  %offset_ptr.i.i28 = getelementptr i32, ptr %offset_tbl.i.i23, i64 %hash.i.i.i27
  %offset.i.i43 = load i32, ptr %offset_ptr.i.i28, align 4
  %6 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract9)
  %7 = sext i32 %offset.i.i to i64
  %8 = getelementptr ptr, ptr %.fca.0.extract9, i64 %7
  %9 = getelementptr i8, ptr %8, i64 8
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr i8, ptr %10, i64 8
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.1.extract3, 1
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, ptr %.fca.2.extract5, 2
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, i32 %offset.i.i43, 3
  tail call void %12(ptr %.fca.1.extract11, { ptr, ptr, ptr, i32 } %16)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %hash_coef_ptr.i.i46 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i47 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i48 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i49 = load i64, ptr %hash_coef_ptr.i.i46, align 4
  %tbl_size.i.i50 = load i64, ptr %tbl_size_ptr.i.i47, align 4
  %offset_tbl.i.i51 = load ptr, ptr %offset_tbl_ptr.i.i48, align 8
  %product.i.i.i52 = mul i64 %hash_coef.i.i49, 5693646204635713916
  %shifted.i.i.i53 = lshr i64 %product.i.i.i52, 32
  %xored.i.i.i54 = xor i64 %shifted.i.i.i53, %product.i.i.i52
  %hash.i.i.i55 = and i64 %xored.i.i.i54, %tbl_size.i.i50
  %offset_ptr.i.i56 = getelementptr i32, ptr %offset_tbl.i.i51, i64 %hash.i.i.i55
  %offset.i.i71 = load i32, ptr %offset_ptr.i.i56, align 4
  %17 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract9)
  %18 = getelementptr i8, ptr %8, i64 16
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr i8, ptr %19, i64 8
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %23 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %.fca.1.extract, 1
  %24 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %.fca.2.extract, 2
  %25 = insertvalue { ptr, ptr, ptr, i32 } %24, i32 %offset.i.i71, 3
  tail call void %21(ptr %.fca.1.extract11, { ptr, ptr, ptr, i32 } %25)
  ret void
}

define { ptr, ptr, ptr, i32 } @ChainIterable2_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract57 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract59 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract57, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract57, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract57, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -5233298072945030060
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %5 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract57, i64 %6
  %8 = getelementptr i8, ptr %7, i64 8
  %9 = load ptr, ptr %8, align 8
  %10 = load ptr, ptr %9, align 8
  %11 = tail call { ptr, ptr, ptr, i32 } %10(ptr %.fca.1.extract59)
  %.fca.0.extract49 = extractvalue { ptr, ptr, ptr, i32 } %11, 0
  %.fca.1.extract51 = extractvalue { ptr, ptr, ptr, i32 } %11, 1
  %.fca.2.extract53 = extractvalue { ptr, ptr, ptr, i32 } %11, 2
  %.fca.3.extract55 = extractvalue { ptr, ptr, ptr, i32 } %11, 3
  %hash_coef_ptr.i.i66 = getelementptr i8, ptr %.fca.0.extract49, i64 8
  %tbl_size_ptr.i.i67 = getelementptr i8, ptr %.fca.0.extract49, i64 16
  %offset_tbl_ptr.i.i68 = getelementptr i8, ptr %.fca.0.extract49, i64 40
  %hash_coef.i.i69 = load i64, ptr %hash_coef_ptr.i.i66, align 4
  %tbl_size.i.i70 = load i64, ptr %tbl_size_ptr.i.i67, align 4
  %offset_tbl.i.i71 = load ptr, ptr %offset_tbl_ptr.i.i68, align 8
  %product.i.i.i72 = mul i64 %hash_coef.i.i69, 5693646204635713916
  %shifted.i.i.i73 = lshr i64 %product.i.i.i72, 32
  %xored.i.i.i74 = xor i64 %shifted.i.i.i73, %product.i.i.i72
  %hash.i.i.i75 = and i64 %xored.i.i.i74, %tbl_size.i.i70
  %offset_ptr.i.i76 = getelementptr i32, ptr %offset_tbl.i.i71, i64 %hash.i.i.i75
  %offset.i.i77 = load i32, ptr %offset_ptr.i.i76, align 4
  %eq.i = icmp eq i32 %.fca.3.extract55, %offset.i.i77
  tail call void @llvm.assume(i1 %eq.i) #30
  %12 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract49, 0
  %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.1.extract51, 1
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.2.extract53, 2
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, i32 %.fca.3.extract55, 3
  %16 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
  %17 = load ptr, ptr %7, align 8
  %18 = tail call ptr %17(ptr %.fca.1.extract59)
  %19 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %20 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract49)
  %21 = sext i32 %.fca.3.extract55 to i64
  %22 = getelementptr ptr, ptr %.fca.0.extract49, i64 %21
  %23 = getelementptr i8, ptr %22, i64 8
  %24 = load ptr, ptr %23, align 8
  %25 = call ptr %24({ ptr, ptr, ptr, i32 } %15, ptr nonnull %4)
  %26 = call { ptr, ptr, ptr, i32 } %25({ ptr, ptr, ptr, i32 } %15, { ptr, ptr, ptr, i32 } %15, ptr nonnull %4)
  %27 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
  %28 = getelementptr i8, ptr %7, i64 16
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %29, align 8
  %31 = call { ptr, ptr, ptr, i32 } %30(ptr %.fca.1.extract59)
  %.fca.0.extract33 = extractvalue { ptr, ptr, ptr, i32 } %31, 0
  %.fca.1.extract35 = extractvalue { ptr, ptr, ptr, i32 } %31, 1
  %.fca.2.extract37 = extractvalue { ptr, ptr, ptr, i32 } %31, 2
  %.fca.3.extract39 = extractvalue { ptr, ptr, ptr, i32 } %31, 3
  %hash_coef_ptr.i.i94 = getelementptr i8, ptr %.fca.0.extract33, i64 8
  %tbl_size_ptr.i.i95 = getelementptr i8, ptr %.fca.0.extract33, i64 16
  %offset_tbl_ptr.i.i96 = getelementptr i8, ptr %.fca.0.extract33, i64 40
  %hash_coef.i.i97 = load i64, ptr %hash_coef_ptr.i.i94, align 4
  %tbl_size.i.i98 = load i64, ptr %tbl_size_ptr.i.i95, align 4
  %offset_tbl.i.i99 = load ptr, ptr %offset_tbl_ptr.i.i96, align 8
  %product.i.i.i100 = mul i64 %hash_coef.i.i97, 5693646204635713916
  %shifted.i.i.i101 = lshr i64 %product.i.i.i100, 32
  %xored.i.i.i102 = xor i64 %shifted.i.i.i101, %product.i.i.i100
  %hash.i.i.i103 = and i64 %xored.i.i.i102, %tbl_size.i.i98
  %offset_ptr.i.i104 = getelementptr i32, ptr %offset_tbl.i.i99, i64 %hash.i.i.i103
  %offset.i.i105 = load i32, ptr %offset_ptr.i.i104, align 4
  %eq.i108 = icmp eq i32 %.fca.3.extract39, %offset.i.i105
  call void @llvm.assume(i1 %eq.i108) #30
  %32 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract33, 0
  %33 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %.fca.1.extract35, 1
  %34 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %.fca.2.extract37, 2
  %35 = insertvalue { ptr, ptr, ptr, i32 } %34, i32 %.fca.3.extract39, 3
  %36 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
  %37 = load ptr, ptr %7, align 8
  %38 = call ptr %37(ptr %.fca.1.extract59)
  %39 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %40 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract33)
  %41 = sext i32 %.fca.3.extract39 to i64
  %42 = getelementptr ptr, ptr %.fca.0.extract33, i64 %41
  %43 = getelementptr i8, ptr %42, i64 8
  %44 = load ptr, ptr %43, align 8
  %45 = call ptr %44({ ptr, ptr, ptr, i32 } %35, ptr nonnull %4)
  %46 = call { ptr, ptr, ptr, i32 } %45({ ptr, ptr, ptr, i32 } %35, { ptr, ptr, ptr, i32 } %35, ptr nonnull %4)
  %47 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
  %48 = load ptr, ptr %7, align 8
  %49 = call ptr %48(ptr %.fca.1.extract59)
  %result.i = call noalias dereferenceable_or_null(80) ptr @bump_malloc_inner(i64 noundef 80, ptr nonnull @current_ptr) #29
  store ptr %49, ptr %result.i, align 8
  %50 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i)
  %51 = alloca { ptr, ptr, ptr, i32 }, align 8
  %52 = getelementptr inbounds i8, ptr %51, i64 8
  %53 = getelementptr inbounds i8, ptr %51, i64 24
  store ptr @ChainIterator2, ptr %51, align 8
  store ptr %result.i, ptr %52, align 8
  store i32 9, ptr %53, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %51)
  %55 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
  %56 = load ptr, ptr %8, align 8
  %57 = load ptr, ptr %56, align 8
  %58 = call { ptr, ptr, ptr, i32 } %57(ptr %.fca.1.extract59)
  %.fca.0.extract17 = extractvalue { ptr, ptr, ptr, i32 } %58, 0
  %.fca.1.extract19 = extractvalue { ptr, ptr, ptr, i32 } %58, 1
  %.fca.2.extract21 = extractvalue { ptr, ptr, ptr, i32 } %58, 2
  %.fca.3.extract23 = extractvalue { ptr, ptr, ptr, i32 } %58, 3
  %hash_coef_ptr.i.i124 = getelementptr i8, ptr %.fca.0.extract17, i64 8
  %tbl_size_ptr.i.i125 = getelementptr i8, ptr %.fca.0.extract17, i64 16
  %offset_tbl_ptr.i.i126 = getelementptr i8, ptr %.fca.0.extract17, i64 40
  %hash_coef.i.i127 = load i64, ptr %hash_coef_ptr.i.i124, align 4
  %tbl_size.i.i128 = load i64, ptr %tbl_size_ptr.i.i125, align 4
  %offset_tbl.i.i129 = load ptr, ptr %offset_tbl_ptr.i.i126, align 8
  %product.i.i.i130 = mul i64 %hash_coef.i.i127, 5693646204635713916
  %shifted.i.i.i131 = lshr i64 %product.i.i.i130, 32
  %xored.i.i.i132 = xor i64 %shifted.i.i.i131, %product.i.i.i130
  %hash.i.i.i133 = and i64 %xored.i.i.i132, %tbl_size.i.i128
  %offset_ptr.i.i134 = getelementptr i32, ptr %offset_tbl.i.i129, i64 %hash.i.i.i133
  %offset.i.i135 = load i32, ptr %offset_ptr.i.i134, align 4
  %eq.i138 = icmp eq i32 %.fca.3.extract23, %offset.i.i135
  call void @llvm.assume(i1 %eq.i138) #30
  %59 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract17, 0
  %60 = insertvalue { ptr, ptr, ptr, i32 } %59, ptr %.fca.1.extract19, 1
  %61 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %.fca.2.extract21, 2
  %62 = insertvalue { ptr, ptr, ptr, i32 } %61, i32 %.fca.3.extract23, 3
  %63 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
  %64 = load ptr, ptr %7, align 8
  %65 = call ptr %64(ptr %.fca.1.extract59)
  %66 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %67 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract17)
  %68 = sext i32 %.fca.3.extract23 to i64
  %69 = getelementptr ptr, ptr %.fca.0.extract17, i64 %68
  %70 = getelementptr i8, ptr %69, i64 8
  %71 = load ptr, ptr %70, align 8
  %72 = call ptr %71({ ptr, ptr, ptr, i32 } %62, ptr nonnull %4)
  %73 = call { ptr, ptr, ptr, i32 } %72({ ptr, ptr, ptr, i32 } %62, { ptr, ptr, ptr, i32 } %62, ptr nonnull %4)
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %73, 0
  %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %73, 1
  %.fca.2.extract13 = extractvalue { ptr, ptr, ptr, i32 } %73, 2
  %hash_coef_ptr.i.i140 = getelementptr i8, ptr %.fca.0.extract9, i64 8
  %tbl_size_ptr.i.i141 = getelementptr i8, ptr %.fca.0.extract9, i64 16
  %offset_tbl_ptr.i.i142 = getelementptr i8, ptr %.fca.0.extract9, i64 40
  %74 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
  %75 = load ptr, ptr %28, align 8
  %76 = load ptr, ptr %75, align 8
  %77 = call { ptr, ptr, ptr, i32 } %76(ptr %.fca.1.extract59)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %77, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %77, 1
  %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %77, 2
  %.fca.3.extract7 = extractvalue { ptr, ptr, ptr, i32 } %77, 3
  %hash_coef_ptr.i.i154 = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i155 = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i156 = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i157 = load i64, ptr %hash_coef_ptr.i.i154, align 4
  %tbl_size.i.i158 = load i64, ptr %tbl_size_ptr.i.i155, align 4
  %offset_tbl.i.i159 = load ptr, ptr %offset_tbl_ptr.i.i156, align 8
  %product.i.i.i160 = mul i64 %hash_coef.i.i157, 5693646204635713916
  %shifted.i.i.i161 = lshr i64 %product.i.i.i160, 32
  %xored.i.i.i162 = xor i64 %shifted.i.i.i161, %product.i.i.i160
  %hash.i.i.i163 = and i64 %xored.i.i.i162, %tbl_size.i.i158
  %offset_ptr.i.i164 = getelementptr i32, ptr %offset_tbl.i.i159, i64 %hash.i.i.i163
  %offset.i.i165 = load i32, ptr %offset_ptr.i.i164, align 4
  %eq.i168 = icmp eq i32 %.fca.3.extract7, %offset.i.i165
  call void @llvm.assume(i1 %eq.i168) #30
  %78 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %79 = insertvalue { ptr, ptr, ptr, i32 } %78, ptr %.fca.1.extract3, 1
  %80 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %.fca.2.extract5, 2
  %81 = insertvalue { ptr, ptr, ptr, i32 } %80, i32 %.fca.3.extract7, 3
  %82 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
  %83 = load ptr, ptr %7, align 8
  %84 = call ptr %83(ptr %.fca.1.extract59)
  %85 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %86 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract1)
  %87 = sext i32 %.fca.3.extract7 to i64
  %88 = getelementptr ptr, ptr %.fca.0.extract1, i64 %87
  %89 = getelementptr i8, ptr %88, i64 8
  %90 = load ptr, ptr %89, align 8
  %91 = call ptr %90({ ptr, ptr, ptr, i32 } %81, ptr nonnull %4)
  %92 = call { ptr, ptr, ptr, i32 } %91({ ptr, ptr, ptr, i32 } %81, { ptr, ptr, ptr, i32 } %81, ptr nonnull %4)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %92, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %92, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %92, 2
  %hash_coef_ptr.i.i170 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i171 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i172 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i173 = load i64, ptr %hash_coef_ptr.i.i170, align 4
  %tbl_size.i.i174 = load i64, ptr %tbl_size_ptr.i.i171, align 4
  %offset_tbl.i.i175 = load ptr, ptr %offset_tbl_ptr.i.i172, align 8
  %product.i.i.i176 = mul i64 %hash_coef.i.i173, 4189192806087951739
  %shifted.i.i.i177 = lshr i64 %product.i.i.i176, 32
  %xored.i.i.i178 = xor i64 %shifted.i.i.i177, %product.i.i.i176
  %hash.i.i.i179 = and i64 %xored.i.i.i178, %tbl_size.i.i174
  %offset_ptr.i.i180 = getelementptr i32, ptr %offset_tbl.i.i175, i64 %hash.i.i.i179
  %hash_coef.i.i187 = load i64, ptr %hash_coef_ptr.i.i140, align 4
  %tbl_size.i.i188 = load i64, ptr %tbl_size_ptr.i.i141, align 4
  %offset_tbl.i.i189 = load ptr, ptr %offset_tbl_ptr.i.i142, align 8
  %product.i.i.i190 = mul i64 %hash_coef.i.i187, 4189192806087951739
  %shifted.i.i.i191 = lshr i64 %product.i.i.i190, 32
  %xored.i.i.i192 = xor i64 %shifted.i.i.i191, %product.i.i.i190
  %hash.i.i.i193 = and i64 %xored.i.i.i192, %tbl_size.i.i188
  %offset_ptr.i.i194 = getelementptr i32, ptr %offset_tbl.i.i189, i64 %hash.i.i.i193
  %offset.i.i195 = load i32, ptr %offset_ptr.i.i194, align 4
  %93 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract9, 0
  %94 = insertvalue { ptr, ptr, ptr, i32 } %93, ptr %.fca.1.extract11, 1
  %95 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %.fca.2.extract13, 2
  %96 = insertvalue { ptr, ptr, ptr, i32 } %95, i32 %offset.i.i195, 3
  %offset.i.i209 = load i32, ptr %offset_ptr.i.i180, align 4
  %97 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %98 = insertvalue { ptr, ptr, ptr, i32 } %97, ptr %.fca.1.extract, 1
  %99 = insertvalue { ptr, ptr, ptr, i32 } %98, ptr %.fca.2.extract, 2
  %100 = insertvalue { ptr, ptr, ptr, i32 } %99, i32 %offset.i.i209, 3
  %101 = load ptr, ptr %51, align 8
  %102 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %101, 0
  %103 = load ptr, ptr %52, align 8
  %104 = insertvalue { ptr, ptr, ptr, i32 } %102, ptr %103, 1
  %105 = getelementptr inbounds i8, ptr %51, i64 16
  %106 = load ptr, ptr %105, align 8
  %107 = insertvalue { ptr, ptr, ptr, i32 } %104, ptr %106, 2
  %108 = load i32, ptr %53, align 8
  %109 = insertvalue { ptr, ptr, ptr, i32 } %107, i32 %108, 3
  %110 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
  %111 = load ptr, ptr %7, align 8
  %112 = call ptr %111(ptr %.fca.1.extract59)
  %result.i211 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  %113 = getelementptr i8, ptr %result.i211, i64 8
  store ptr %112, ptr %113, align 8
  %114 = getelementptr i8, ptr %result.i211, i64 16
  store ptr null, ptr %114, align 8
  %115 = call ptr @llvm.invariant.start.p0(i64 16, ptr %result.i211)
  store ptr @Iterator2, ptr %result.i211, align 8
  %result.i212 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  %116 = getelementptr i8, ptr %result.i212, i64 8
  store ptr %112, ptr %116, align 8
  %117 = getelementptr i8, ptr %result.i212, i64 16
  store ptr null, ptr %117, align 8
  %118 = call ptr @llvm.invariant.start.p0(i64 16, ptr %result.i212)
  store ptr @Iterator2, ptr %result.i212, align 8
  %119 = alloca [2 x ptr], align 8
  store ptr %result.i211, ptr %119, align 8
  %120 = getelementptr inbounds i8, ptr %119, i64 8
  store ptr %result.i212, ptr %120, align 8
  %121 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %119)
  %122 = call ptr @llvm.invariant.start.p0(i64 88, ptr %101)
  %123 = sext i32 %108 to i64
  %124 = getelementptr ptr, ptr %101, i64 %123
  %125 = getelementptr i8, ptr %124, i64 32
  %126 = load ptr, ptr %125, align 8
  %127 = alloca { ptr, ptr }, align 8
  store ptr %.fca.0.extract9, ptr %127, align 8
  %128 = getelementptr inbounds i8, ptr %127, i64 8
  store ptr %.fca.0.extract, ptr %128, align 8
  %129 = call ptr %126({ ptr, ptr, ptr, i32 } %109, ptr nonnull %127)
  call void %129({ ptr, ptr, ptr, i32 } %109, { ptr, ptr, ptr, i32 } %109, ptr nonnull %119, { ptr, ptr, ptr, i32 } %96, { ptr, ptr, ptr, i32 } %100)
  %130 = load ptr, ptr %51, align 8
  %131 = load ptr, ptr %52, align 8
  %132 = load ptr, ptr %105, align 8
  %hash_coef_ptr.i.i214 = getelementptr i8, ptr %130, i64 8
  %tbl_size_ptr.i.i215 = getelementptr i8, ptr %130, i64 16
  %offset_tbl_ptr.i.i216 = getelementptr i8, ptr %130, i64 40
  %hash_coef.i.i217 = load i64, ptr %hash_coef_ptr.i.i214, align 4
  %tbl_size.i.i218 = load i64, ptr %tbl_size_ptr.i.i215, align 4
  %offset_tbl.i.i219 = load ptr, ptr %offset_tbl_ptr.i.i216, align 8
  %product.i.i.i220 = mul i64 %hash_coef.i.i217, 4189192806087951739
  %shifted.i.i.i221 = lshr i64 %product.i.i.i220, 32
  %xored.i.i.i222 = xor i64 %shifted.i.i.i221, %product.i.i.i220
  %hash.i.i.i223 = and i64 %xored.i.i.i222, %tbl_size.i.i218
  %offset_ptr.i.i224 = getelementptr i32, ptr %offset_tbl.i.i219, i64 %hash.i.i.i223
  %offset.i.i225 = load i32, ptr %offset_ptr.i.i224, align 4
  %133 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %130, 0
  %134 = insertvalue { ptr, ptr, ptr, i32 } %133, ptr %131, 1
  %135 = insertvalue { ptr, ptr, ptr, i32 } %134, ptr %132, 2
  %136 = insertvalue { ptr, ptr, ptr, i32 } %135, i32 %offset.i.i225, 3
  ret { ptr, ptr, ptr, i32 } %136
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_ChainIterator2(ptr nocapture readnone %0) #5 {
  ret { i64, i64 } { i64 80, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ChainIterator2_field_ChainIterator2_0(ptr nocapture readonly %0) #0 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ChainIterator2_B_init_firstIterator2T_secondIterator2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 120
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ChainIterator2_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 128
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @ChainIterator2_init_firstIterator2T_secondIterator2T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -228267985060461774
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %hash_coef_ptr.i.i18 = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i19 = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i20 = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i21 = load i64, ptr %hash_coef_ptr.i.i18, align 4
  %tbl_size.i.i22 = load i64, ptr %tbl_size_ptr.i.i19, align 4
  %offset_tbl.i.i23 = load ptr, ptr %offset_tbl_ptr.i.i20, align 8
  %product.i.i.i24 = mul i64 %hash_coef.i.i21, 4189192806087951739
  %shifted.i.i.i25 = lshr i64 %product.i.i.i24, 32
  %xored.i.i.i26 = xor i64 %shifted.i.i.i25, %product.i.i.i24
  %hash.i.i.i27 = and i64 %xored.i.i.i26, %tbl_size.i.i22
  %offset_ptr.i.i28 = getelementptr i32, ptr %offset_tbl.i.i23, i64 %hash.i.i.i27
  %offset.i.i43 = load i32, ptr %offset_ptr.i.i28, align 4
  %6 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr %.fca.0.extract9)
  %7 = sext i32 %offset.i.i to i64
  %8 = getelementptr ptr, ptr %.fca.0.extract9, i64 %7
  %9 = getelementptr i8, ptr %8, i64 8
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr i8, ptr %10, i64 8
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.1.extract3, 1
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, ptr %.fca.2.extract5, 2
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, i32 %offset.i.i43, 3
  tail call void %12(ptr %.fca.1.extract11, { ptr, ptr, ptr, i32 } %16)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %hash_coef_ptr.i.i46 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i47 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i48 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i49 = load i64, ptr %hash_coef_ptr.i.i46, align 4
  %tbl_size.i.i50 = load i64, ptr %tbl_size_ptr.i.i47, align 4
  %offset_tbl.i.i51 = load ptr, ptr %offset_tbl_ptr.i.i48, align 8
  %product.i.i.i52 = mul i64 %hash_coef.i.i49, 4189192806087951739
  %shifted.i.i.i53 = lshr i64 %product.i.i.i52, 32
  %xored.i.i.i54 = xor i64 %shifted.i.i.i53, %product.i.i.i52
  %hash.i.i.i55 = and i64 %xored.i.i.i54, %tbl_size.i.i50
  %offset_ptr.i.i56 = getelementptr i32, ptr %offset_tbl.i.i51, i64 %hash.i.i.i55
  %offset.i.i71 = load i32, ptr %offset_ptr.i.i56, align 4
  %17 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr %.fca.0.extract9)
  %18 = getelementptr i8, ptr %8, i64 16
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr i8, ptr %19, i64 8
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %23 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %.fca.1.extract, 1
  %24 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %.fca.2.extract, 2
  %25 = insertvalue { ptr, ptr, ptr, i32 } %24, i32 %offset.i.i71, 3
  tail call void %21(ptr %.fca.1.extract11, { ptr, ptr, ptr, i32 } %25)
  %26 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr %.fca.0.extract9)
  %27 = getelementptr i8, ptr %8, i64 24
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr i8, ptr %28, i64 8
  %30 = load ptr, ptr %29, align 8
  tail call void %30(ptr %.fca.1.extract11, i1 true)
  ret void
}

define { ptr, i160 } @ChainIterator2_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -228267985060461774
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %5 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr %.fca.0.extract3)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract3, i64 %6
  %8 = getelementptr i8, ptr %7, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = load ptr, ptr %9, align 8
  %11 = tail call i1 %10(ptr %.fca.1.extract4)
  %12 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr nonnull %.fca.0.extract3)
  br i1 %11, label %33, label %13

13:                                               ; preds = %3
  %14 = getelementptr i8, ptr %7, i64 16
  %15 = load ptr, ptr %14, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = tail call { ptr, ptr, ptr, i32 } %16(ptr %.fca.1.extract4)
  %.fca.0.extract23 = extractvalue { ptr, ptr, ptr, i32 } %17, 0
  %.fca.1.extract25 = extractvalue { ptr, ptr, ptr, i32 } %17, 1
  %.fca.2.extract27 = extractvalue { ptr, ptr, ptr, i32 } %17, 2
  %.fca.3.extract29 = extractvalue { ptr, ptr, ptr, i32 } %17, 3
  %hash_coef_ptr.i.i32 = getelementptr i8, ptr %.fca.0.extract23, i64 8
  %tbl_size_ptr.i.i33 = getelementptr i8, ptr %.fca.0.extract23, i64 16
  %offset_tbl_ptr.i.i34 = getelementptr i8, ptr %.fca.0.extract23, i64 40
  %hash_coef.i.i35 = load i64, ptr %hash_coef_ptr.i.i32, align 4
  %tbl_size.i.i36 = load i64, ptr %tbl_size_ptr.i.i33, align 4
  %offset_tbl.i.i37 = load ptr, ptr %offset_tbl_ptr.i.i34, align 8
  %product.i.i.i38 = mul i64 %hash_coef.i.i35, 4189192806087951739
  %shifted.i.i.i39 = lshr i64 %product.i.i.i38, 32
  %xored.i.i.i40 = xor i64 %shifted.i.i.i39, %product.i.i.i38
  %hash.i.i.i41 = and i64 %xored.i.i.i40, %tbl_size.i.i36
  %offset_ptr.i.i42 = getelementptr i32, ptr %offset_tbl.i.i37, i64 %hash.i.i.i41
  %offset.i.i43 = load i32, ptr %offset_ptr.i.i42, align 4
  %eq.i = icmp eq i32 %.fca.3.extract29, %offset.i.i43
  tail call void @llvm.assume(i1 %eq.i) #30
  %18 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract23, 0
  %19 = insertvalue { ptr, ptr, ptr, i32 } %18, ptr %.fca.1.extract25, 1
  %20 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %.fca.2.extract27, 2
  %21 = insertvalue { ptr, ptr, ptr, i32 } %20, i32 %.fca.3.extract29, 3
  %22 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr nonnull %.fca.0.extract3)
  %23 = load ptr, ptr %7, align 8
  %24 = tail call ptr %23(ptr %.fca.1.extract4)
  %25 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %26 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %.fca.0.extract23)
  %27 = sext i32 %.fca.3.extract29 to i64
  %28 = getelementptr ptr, ptr %.fca.0.extract23, i64 %27
  %29 = getelementptr i8, ptr %28, i64 8
  %30 = load ptr, ptr %29, align 8
  %31 = call ptr %30({ ptr, ptr, ptr, i32 } %21, ptr nonnull %4)
  %32 = call { ptr, i160 } %31({ ptr, ptr, ptr, i32 } %21, { ptr, ptr, ptr, i32 } %21, ptr nonnull %4)
  %.fca.0.extract18 = extractvalue { ptr, i160 } %32, 0
  br label %60

33:                                               ; preds = %3
  %34 = getelementptr i8, ptr %7, i64 8
  %35 = load ptr, ptr %34, align 8
  %36 = load ptr, ptr %35, align 8
  %37 = tail call { ptr, ptr, ptr, i32 } %36(ptr %.fca.1.extract4)
  %.fca.0.extract10 = extractvalue { ptr, ptr, ptr, i32 } %37, 0
  %.fca.1.extract12 = extractvalue { ptr, ptr, ptr, i32 } %37, 1
  %.fca.2.extract14 = extractvalue { ptr, ptr, ptr, i32 } %37, 2
  %.fca.3.extract16 = extractvalue { ptr, ptr, ptr, i32 } %37, 3
  %hash_coef_ptr.i.i46 = getelementptr i8, ptr %.fca.0.extract10, i64 8
  %tbl_size_ptr.i.i47 = getelementptr i8, ptr %.fca.0.extract10, i64 16
  %offset_tbl_ptr.i.i48 = getelementptr i8, ptr %.fca.0.extract10, i64 40
  %hash_coef.i.i49 = load i64, ptr %hash_coef_ptr.i.i46, align 4
  %tbl_size.i.i50 = load i64, ptr %tbl_size_ptr.i.i47, align 4
  %offset_tbl.i.i51 = load ptr, ptr %offset_tbl_ptr.i.i48, align 8
  %product.i.i.i52 = mul i64 %hash_coef.i.i49, 4189192806087951739
  %shifted.i.i.i53 = lshr i64 %product.i.i.i52, 32
  %xored.i.i.i54 = xor i64 %shifted.i.i.i53, %product.i.i.i52
  %hash.i.i.i55 = and i64 %xored.i.i.i54, %tbl_size.i.i50
  %offset_ptr.i.i56 = getelementptr i32, ptr %offset_tbl.i.i51, i64 %hash.i.i.i55
  %offset.i.i57 = load i32, ptr %offset_ptr.i.i56, align 4
  %eq.i60 = icmp eq i32 %.fca.3.extract16, %offset.i.i57
  tail call void @llvm.assume(i1 %eq.i60) #30
  %38 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract10, 0
  %39 = insertvalue { ptr, ptr, ptr, i32 } %38, ptr %.fca.1.extract12, 1
  %40 = insertvalue { ptr, ptr, ptr, i32 } %39, ptr %.fca.2.extract14, 2
  %41 = insertvalue { ptr, ptr, ptr, i32 } %40, i32 %.fca.3.extract16, 3
  %42 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr nonnull %.fca.0.extract3)
  %43 = load ptr, ptr %7, align 8
  %44 = tail call ptr %43(ptr %.fca.1.extract4)
  %45 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %46 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %.fca.0.extract10)
  %47 = sext i32 %.fca.3.extract16 to i64
  %48 = getelementptr ptr, ptr %.fca.0.extract10, i64 %47
  %49 = getelementptr i8, ptr %48, i64 8
  %50 = load ptr, ptr %49, align 8
  %51 = call ptr %50({ ptr, ptr, ptr, i32 } %41, ptr nonnull %4)
  %52 = call { ptr, i160 } %51({ ptr, ptr, ptr, i32 } %41, { ptr, ptr, ptr, i32 } %41, ptr nonnull %4)
  %.fca.0.extract5 = extractvalue { ptr, i160 } %52, 0
  %53 = icmp eq ptr %.fca.0.extract5, @nil_typ
  %54 = icmp eq ptr %.fca.0.extract5, null
  %55 = or i1 %53, %54
  br i1 %55, label %._crit_edge.preheader, label %60

._crit_edge.preheader:                            ; preds = %33
  %56 = call ptr @llvm.invariant.start.p0(i64 88, ptr nonnull %.fca.0.extract3)
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.preheader, %._crit_edge
  %57 = load ptr, ptr %8, align 8
  %58 = getelementptr i8, ptr %57, i64 8
  %59 = load ptr, ptr %58, align 8
  call void %59(ptr %.fca.1.extract4, i1 false)
  br label %._crit_edge

60:                                               ; preds = %33, %13
  %.pn = phi { ptr, i160 } [ %32, %13 ], [ %52, %33 ]
  %.reg2mem19.sroa.0.0 = phi ptr [ %.fca.0.extract18, %13 ], [ %.fca.0.extract5, %33 ]
  %.reload20.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %.reg2mem19.sroa.0.0, 0
  %.reg2mem19.sroa.3.0 = extractvalue { ptr, i160 } %.pn, 1
  %.reload20.fca.1.insert = insertvalue { ptr, i160 } %.reload20.fca.0.insert, i160 %.reg2mem19.sroa.3.0, 1
  ret { ptr, i160 } %.reload20.fca.1.insert
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i1 @ChainIterator2_getter_on_first(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 72
  %3 = load i1, ptr %2, align 1
  ret i1 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ChainIterator2_setter_on_first(ptr nocapture writeonly %0, i1 %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 72
  store i1 %1, ptr %3, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ChainIterator2_getter_second(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 48
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 56
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 64
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ChainIterator2_setter_second(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 40
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 48
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 56
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 64
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ChainIterator2_getter_first(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ChainIterator2_setter_first(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 32
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ChainIterable2_getter_second(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 48
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 56
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 64
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ChainIterable2_setter_second(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 40
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 48
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 56
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 64
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ChainIterable2_getter_first(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ChainIterable2_setter_first(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 32
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_FilterIterable2(ptr nocapture readnone %0) #5 {
  ret { i64, i64 } { i64 48, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @FilterIterable2_field_FilterIterable2_0(ptr nocapture readonly %0) #0 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FilterIterable2_B_init_iterableIterable2T_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 192
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FilterIterable2_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 200
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FilterIterable2_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 208
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FilterIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 216
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FilterIterable2_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 224
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FilterIterable2_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 232
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FilterIterable2_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 240
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FilterIterable2_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 248
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FilterIterable2_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 256
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FilterIterable2_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 264
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FilterIterable2_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 272
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FilterIterable2_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 280
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @FilterIterable2_init_iterableIterable2T_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 1178467452958968374
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %hash_coef_ptr.i.i11 = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i12 = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i13 = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i14 = load i64, ptr %hash_coef_ptr.i.i11, align 4
  %tbl_size.i.i15 = load i64, ptr %tbl_size_ptr.i.i12, align 4
  %offset_tbl.i.i16 = load ptr, ptr %offset_tbl_ptr.i.i13, align 8
  %product.i.i.i17 = mul i64 %hash_coef.i.i14, 5693646204635713916
  %shifted.i.i.i18 = lshr i64 %product.i.i.i17, 32
  %xored.i.i.i19 = xor i64 %shifted.i.i.i18, %product.i.i.i17
  %hash.i.i.i20 = and i64 %xored.i.i.i19, %tbl_size.i.i15
  %offset_ptr.i.i21 = getelementptr i32, ptr %offset_tbl.i.i16, i64 %hash.i.i.i20
  %offset.i.i36 = load i32, ptr %offset_ptr.i.i21, align 4
  %6 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract2)
  %7 = sext i32 %offset.i.i to i64
  %8 = getelementptr ptr, ptr %.fca.0.extract2, i64 %7
  %9 = getelementptr i8, ptr %8, i64 8
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr i8, ptr %10, i64 8
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.1.extract, 1
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, ptr %.fca.2.extract, 2
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, i32 %offset.i.i36, 3
  tail call void %12(ptr %.fca.1.extract4, { ptr, ptr, ptr, i32 } %16)
  %17 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract2)
  %18 = getelementptr i8, ptr %8, i64 16
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr i8, ptr %19, i64 8
  %21 = load ptr, ptr %20, align 8
  tail call void %21(ptr %.fca.1.extract4, { ptr } %4)
  ret void
}

define { ptr, ptr, ptr, i32 } @FilterIterable2_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract28 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract26, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract26, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract26, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 1178467452958968374
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %5 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract26)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract26, i64 %6
  %8 = getelementptr i8, ptr %7, i64 8
  %9 = load ptr, ptr %8, align 8
  %10 = load ptr, ptr %9, align 8
  %11 = tail call { ptr, ptr, ptr, i32 } %10(ptr %.fca.1.extract28)
  %.fca.0.extract18 = extractvalue { ptr, ptr, ptr, i32 } %11, 0
  %.fca.1.extract20 = extractvalue { ptr, ptr, ptr, i32 } %11, 1
  %.fca.2.extract22 = extractvalue { ptr, ptr, ptr, i32 } %11, 2
  %.fca.3.extract24 = extractvalue { ptr, ptr, ptr, i32 } %11, 3
  %hash_coef_ptr.i.i35 = getelementptr i8, ptr %.fca.0.extract18, i64 8
  %tbl_size_ptr.i.i36 = getelementptr i8, ptr %.fca.0.extract18, i64 16
  %offset_tbl_ptr.i.i37 = getelementptr i8, ptr %.fca.0.extract18, i64 40
  %hash_coef.i.i38 = load i64, ptr %hash_coef_ptr.i.i35, align 4
  %tbl_size.i.i39 = load i64, ptr %tbl_size_ptr.i.i36, align 4
  %offset_tbl.i.i40 = load ptr, ptr %offset_tbl_ptr.i.i37, align 8
  %product.i.i.i41 = mul i64 %hash_coef.i.i38, 5693646204635713916
  %shifted.i.i.i42 = lshr i64 %product.i.i.i41, 32
  %xored.i.i.i43 = xor i64 %shifted.i.i.i42, %product.i.i.i41
  %hash.i.i.i44 = and i64 %xored.i.i.i43, %tbl_size.i.i39
  %offset_ptr.i.i45 = getelementptr i32, ptr %offset_tbl.i.i40, i64 %hash.i.i.i44
  %offset.i.i46 = load i32, ptr %offset_ptr.i.i45, align 4
  %eq.i = icmp eq i32 %.fca.3.extract24, %offset.i.i46
  tail call void @llvm.assume(i1 %eq.i) #30
  %12 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract18, 0
  %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.1.extract20, 1
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.2.extract22, 2
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, i32 %.fca.3.extract24, 3
  %16 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract26)
  %17 = load ptr, ptr %7, align 8
  %18 = tail call ptr %17(ptr %.fca.1.extract28)
  %19 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %20 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract18)
  %21 = sext i32 %.fca.3.extract24 to i64
  %22 = getelementptr ptr, ptr %.fca.0.extract18, i64 %21
  %23 = getelementptr i8, ptr %22, i64 8
  %24 = load ptr, ptr %23, align 8
  %25 = call ptr %24({ ptr, ptr, ptr, i32 } %15, ptr nonnull %4)
  %26 = call { ptr, ptr, ptr, i32 } %25({ ptr, ptr, ptr, i32 } %15, { ptr, ptr, ptr, i32 } %15, ptr nonnull %4)
  %27 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract26)
  %28 = getelementptr i8, ptr %7, i64 16
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %29, align 8
  %31 = call { ptr } %30(ptr %.fca.1.extract28)
  %32 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract26)
  %33 = load ptr, ptr %7, align 8
  %34 = call ptr %33(ptr %.fca.1.extract28)
  %result.i = call noalias dereferenceable_or_null(48) ptr @bump_malloc_inner(i64 noundef 48, ptr nonnull @current_ptr) #29
  store ptr %34, ptr %result.i, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %result.i)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr inbounds i8, ptr %36, i64 8
  %38 = getelementptr inbounds i8, ptr %36, i64 24
  store ptr @FilterIterator2, ptr %36, align 8
  store ptr %result.i, ptr %37, align 8
  store i32 9, ptr %38, align 8
  %39 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %36)
  %40 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract26)
  %41 = load ptr, ptr %8, align 8
  %42 = load ptr, ptr %41, align 8
  %43 = call { ptr, ptr, ptr, i32 } %42(ptr %.fca.1.extract28)
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %43, 0
  %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %43, 1
  %.fca.2.extract6 = extractvalue { ptr, ptr, ptr, i32 } %43, 2
  %.fca.3.extract8 = extractvalue { ptr, ptr, ptr, i32 } %43, 3
  %hash_coef_ptr.i.i63 = getelementptr i8, ptr %.fca.0.extract2, i64 8
  %tbl_size_ptr.i.i64 = getelementptr i8, ptr %.fca.0.extract2, i64 16
  %offset_tbl_ptr.i.i65 = getelementptr i8, ptr %.fca.0.extract2, i64 40
  %hash_coef.i.i66 = load i64, ptr %hash_coef_ptr.i.i63, align 4
  %tbl_size.i.i67 = load i64, ptr %tbl_size_ptr.i.i64, align 4
  %offset_tbl.i.i68 = load ptr, ptr %offset_tbl_ptr.i.i65, align 8
  %product.i.i.i69 = mul i64 %hash_coef.i.i66, 5693646204635713916
  %shifted.i.i.i70 = lshr i64 %product.i.i.i69, 32
  %xored.i.i.i71 = xor i64 %shifted.i.i.i70, %product.i.i.i69
  %hash.i.i.i72 = and i64 %xored.i.i.i71, %tbl_size.i.i67
  %offset_ptr.i.i73 = getelementptr i32, ptr %offset_tbl.i.i68, i64 %hash.i.i.i72
  %offset.i.i74 = load i32, ptr %offset_ptr.i.i73, align 4
  %eq.i77 = icmp eq i32 %.fca.3.extract8, %offset.i.i74
  call void @llvm.assume(i1 %eq.i77) #30
  %44 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract2, 0
  %45 = insertvalue { ptr, ptr, ptr, i32 } %44, ptr %.fca.1.extract4, 1
  %46 = insertvalue { ptr, ptr, ptr, i32 } %45, ptr %.fca.2.extract6, 2
  %47 = insertvalue { ptr, ptr, ptr, i32 } %46, i32 %.fca.3.extract8, 3
  %48 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract26)
  %49 = load ptr, ptr %7, align 8
  %50 = call ptr %49(ptr %.fca.1.extract28)
  %51 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %52 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract2)
  %53 = sext i32 %.fca.3.extract8 to i64
  %54 = getelementptr ptr, ptr %.fca.0.extract2, i64 %53
  %55 = getelementptr i8, ptr %54, i64 8
  %56 = load ptr, ptr %55, align 8
  %57 = call ptr %56({ ptr, ptr, ptr, i32 } %47, ptr nonnull %4)
  %58 = call { ptr, ptr, ptr, i32 } %57({ ptr, ptr, ptr, i32 } %47, { ptr, ptr, ptr, i32 } %47, ptr nonnull %4)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %58, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %58, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %58, 2
  %hash_coef_ptr.i.i79 = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i80 = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i81 = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %59 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract26)
  %60 = load ptr, ptr %28, align 8
  %61 = load ptr, ptr %60, align 8
  %62 = call { ptr } %61(ptr %.fca.1.extract28)
  %hash_coef.i.i96 = load i64, ptr %hash_coef_ptr.i.i79, align 4
  %tbl_size.i.i97 = load i64, ptr %tbl_size_ptr.i.i80, align 4
  %offset_tbl.i.i98 = load ptr, ptr %offset_tbl_ptr.i.i81, align 8
  %product.i.i.i99 = mul i64 %hash_coef.i.i96, 4189192806087951739
  %shifted.i.i.i100 = lshr i64 %product.i.i.i99, 32
  %xored.i.i.i101 = xor i64 %shifted.i.i.i100, %product.i.i.i99
  %hash.i.i.i102 = and i64 %xored.i.i.i101, %tbl_size.i.i97
  %offset_ptr.i.i103 = getelementptr i32, ptr %offset_tbl.i.i98, i64 %hash.i.i.i102
  %offset.i.i104 = load i32, ptr %offset_ptr.i.i103, align 4
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %64 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %.fca.1.extract, 1
  %65 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %.fca.2.extract, 2
  %66 = insertvalue { ptr, ptr, ptr, i32 } %65, i32 %offset.i.i104, 3
  %67 = load ptr, ptr %36, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %67, 0
  %69 = load ptr, ptr %37, align 8
  %70 = insertvalue { ptr, ptr, ptr, i32 } %68, ptr %69, 1
  %71 = getelementptr inbounds i8, ptr %36, i64 16
  %72 = load ptr, ptr %71, align 8
  %73 = insertvalue { ptr, ptr, ptr, i32 } %70, ptr %72, 2
  %74 = load i32, ptr %38, align 8
  %75 = insertvalue { ptr, ptr, ptr, i32 } %73, i32 %74, 3
  %76 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract26)
  %77 = load ptr, ptr %7, align 8
  %78 = call ptr %77(ptr %.fca.1.extract28)
  %result.i106 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  %79 = getelementptr i8, ptr %result.i106, i64 8
  store ptr %78, ptr %79, align 8
  %80 = getelementptr i8, ptr %result.i106, i64 16
  store ptr null, ptr %80, align 8
  %81 = call ptr @llvm.invariant.start.p0(i64 16, ptr %result.i106)
  store ptr @Iterator2, ptr %result.i106, align 8
  %result.i107 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %82 = getelementptr i8, ptr %result.i107, i64 16
  store ptr %78, ptr %82, align 8
  %83 = getelementptr i8, ptr %result.i107, i64 8
  store ptr @_parameterization_Ptri1, ptr %83, align 8
  %84 = getelementptr i8, ptr %result.i107, i64 24
  store ptr null, ptr %84, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i107)
  store ptr @function_typ, ptr %result.i107, align 8
  %86 = alloca [2 x ptr], align 8
  store ptr %result.i106, ptr %86, align 8
  %87 = getelementptr inbounds i8, ptr %86, i64 8
  store ptr %result.i107, ptr %87, align 8
  %88 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %86)
  %89 = call ptr @llvm.invariant.start.p0(i64 80, ptr %67)
  %90 = sext i32 %74 to i64
  %91 = getelementptr ptr, ptr %67, i64 %90
  %92 = getelementptr i8, ptr %91, i64 24
  %93 = load ptr, ptr %92, align 8
  %94 = alloca { ptr, ptr }, align 8
  store ptr %.fca.0.extract1, ptr %94, align 8
  %95 = getelementptr inbounds i8, ptr %94, i64 8
  store ptr @function_typ, ptr %95, align 8
  %96 = call ptr %93({ ptr, ptr, ptr, i32 } %75, ptr nonnull %94)
  call void %96({ ptr, ptr, ptr, i32 } %75, { ptr, ptr, ptr, i32 } %75, ptr nonnull %86, { ptr, ptr, ptr, i32 } %66, { ptr } %62)
  %97 = load ptr, ptr %36, align 8
  %98 = load ptr, ptr %37, align 8
  %99 = load ptr, ptr %71, align 8
  %hash_coef_ptr.i.i109 = getelementptr i8, ptr %97, i64 8
  %tbl_size_ptr.i.i110 = getelementptr i8, ptr %97, i64 16
  %offset_tbl_ptr.i.i111 = getelementptr i8, ptr %97, i64 40
  %hash_coef.i.i112 = load i64, ptr %hash_coef_ptr.i.i109, align 4
  %tbl_size.i.i113 = load i64, ptr %tbl_size_ptr.i.i110, align 4
  %offset_tbl.i.i114 = load ptr, ptr %offset_tbl_ptr.i.i111, align 8
  %product.i.i.i115 = mul i64 %hash_coef.i.i112, 4189192806087951739
  %shifted.i.i.i116 = lshr i64 %product.i.i.i115, 32
  %xored.i.i.i117 = xor i64 %shifted.i.i.i116, %product.i.i.i115
  %hash.i.i.i118 = and i64 %xored.i.i.i117, %tbl_size.i.i113
  %offset_ptr.i.i119 = getelementptr i32, ptr %offset_tbl.i.i114, i64 %hash.i.i.i118
  %offset.i.i120 = load i32, ptr %offset_ptr.i.i119, align 4
  %100 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %97, 0
  %101 = insertvalue { ptr, ptr, ptr, i32 } %100, ptr %98, 1
  %102 = insertvalue { ptr, ptr, ptr, i32 } %101, ptr %99, 2
  %103 = insertvalue { ptr, ptr, ptr, i32 } %102, i32 %offset.i.i120, 3
  ret { ptr, ptr, ptr, i32 } %103
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_FilterIterator2(ptr nocapture readnone %0) #5 {
  ret { i64, i64 } { i64 48, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @FilterIterator2_field_FilterIterator2_0(ptr nocapture readonly %0) #0 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FilterIterator2_B_init_iteratorIterator2T_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 112
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FilterIterator2_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 120
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @FilterIterator2_init_iteratorIterator2T_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 8213847504843366470
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %hash_coef_ptr.i.i11 = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i12 = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i13 = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i14 = load i64, ptr %hash_coef_ptr.i.i11, align 4
  %tbl_size.i.i15 = load i64, ptr %tbl_size_ptr.i.i12, align 4
  %offset_tbl.i.i16 = load ptr, ptr %offset_tbl_ptr.i.i13, align 8
  %product.i.i.i17 = mul i64 %hash_coef.i.i14, 4189192806087951739
  %shifted.i.i.i18 = lshr i64 %product.i.i.i17, 32
  %xored.i.i.i19 = xor i64 %shifted.i.i.i18, %product.i.i.i17
  %hash.i.i.i20 = and i64 %xored.i.i.i19, %tbl_size.i.i15
  %offset_ptr.i.i21 = getelementptr i32, ptr %offset_tbl.i.i16, i64 %hash.i.i.i20
  %offset.i.i36 = load i32, ptr %offset_ptr.i.i21, align 4
  %6 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr %.fca.0.extract2)
  %7 = sext i32 %offset.i.i to i64
  %8 = getelementptr ptr, ptr %.fca.0.extract2, i64 %7
  %9 = getelementptr i8, ptr %8, i64 8
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr i8, ptr %10, i64 8
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.1.extract, 1
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, ptr %.fca.2.extract, 2
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, i32 %offset.i.i36, 3
  tail call void %12(ptr %.fca.1.extract4, { ptr, ptr, ptr, i32 } %16)
  %17 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr %.fca.0.extract2)
  %18 = getelementptr i8, ptr %8, i64 16
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr i8, ptr %19, i64 8
  %21 = load ptr, ptr %20, align 8
  tail call void %21(ptr %.fca.1.extract4, { ptr } %4)
  ret void
}

define { ptr, i160 } @FilterIterator2_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract16 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract14, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract14, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract14, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 8213847504843366470
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %5 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr %.fca.0.extract14)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract14, i64 %6
  %8 = getelementptr i8, ptr %7, i64 8
  %9 = load ptr, ptr %8, align 8
  %10 = load ptr, ptr %9, align 8
  %11 = tail call { ptr, ptr, ptr, i32 } %10(ptr %.fca.1.extract16)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %11, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %11, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %11, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %11, 3
  %hash_coef_ptr.i.i48 = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i49 = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i50 = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i51 = load i64, ptr %hash_coef_ptr.i.i48, align 4
  %tbl_size.i.i52 = load i64, ptr %tbl_size_ptr.i.i49, align 4
  %offset_tbl.i.i53 = load ptr, ptr %offset_tbl_ptr.i.i50, align 8
  %product.i.i.i54 = mul i64 %hash_coef.i.i51, 4189192806087951739
  %shifted.i.i.i55 = lshr i64 %product.i.i.i54, 32
  %xored.i.i.i56 = xor i64 %shifted.i.i.i55, %product.i.i.i54
  %hash.i.i.i57 = and i64 %xored.i.i.i56, %tbl_size.i.i52
  %offset_ptr.i.i58 = getelementptr i32, ptr %offset_tbl.i.i53, i64 %hash.i.i.i57
  %offset.i.i59 = load i32, ptr %offset_ptr.i.i58, align 4
  %eq.i = icmp eq i32 %.fca.3.extract, %offset.i.i59
  tail call void @llvm.assume(i1 %eq.i) #30
  %12 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.1.extract3, 1
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.2.extract, 2
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, i32 %.fca.3.extract, 3
  %16 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr %.fca.0.extract14)
  %17 = load ptr, ptr %7, align 8
  %18 = tail call ptr %17(ptr %.fca.1.extract16)
  %19 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %20 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %.fca.0.extract1)
  %21 = sext i32 %.fca.3.extract to i64
  %22 = getelementptr ptr, ptr %.fca.0.extract1, i64 %21
  %23 = getelementptr i8, ptr %22, i64 8
  %24 = load ptr, ptr %23, align 8
  %25 = call ptr %24({ ptr, ptr, ptr, i32 } %15, ptr nonnull %4)
  %26 = call { ptr, i160 } %25({ ptr, ptr, ptr, i32 } %15, { ptr, ptr, ptr, i32 } %15, ptr nonnull %4)
  %.sroa.0.0107 = extractvalue { ptr, i160 } %26, 0
  %27 = icmp ne ptr %.sroa.0.0107, @nil_typ
  %28 = icmp ne ptr %.sroa.0.0107, null
  %.not46109 = and i1 %27, %28
  br i1 %.not46109, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %3
  %29 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull %.fca.0.extract14)
  %30 = getelementptr i8, ptr %7, i64 16
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %31, align 8
  %33 = call { ptr } %32(ptr %.fca.1.extract16)
  %.fca.0.extract34117 = extractvalue { ptr } %33, 0
  %34 = call i1 %.fca.0.extract34117({ ptr, i160 } %26)
  br i1 %34, label %._crit_edge.loopexit, label %.lr.ph119.preheader

.lr.ph119.preheader:                              ; preds = %.lr.ph
  %35 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull %.fca.0.extract14)
  br label %.lr.ph119

36:                                               ; preds = %.lr.ph119
  %37 = load ptr, ptr %30, align 8
  %38 = load ptr, ptr %37, align 8
  %39 = call { ptr } %38(ptr %.fca.1.extract16)
  %.fca.0.extract34 = extractvalue { ptr } %39, 0
  %40 = call i1 %.fca.0.extract34({ ptr, i160 } %58)
  br i1 %40, label %._crit_edge.loopexit, label %.lr.ph119

.lr.ph119:                                        ; preds = %.lr.ph119.preheader, %36
  %.pn110118 = phi { ptr, i160 } [ %58, %36 ], [ %26, %.lr.ph119.preheader ]
  %41 = load ptr, ptr %8, align 8
  %42 = load ptr, ptr %41, align 8
  %43 = call { ptr, ptr, ptr, i32 } %42(ptr %.fca.1.extract16)
  %.fca.0.extract26 = extractvalue { ptr, ptr, ptr, i32 } %43, 0
  %.fca.1.extract28 = extractvalue { ptr, ptr, ptr, i32 } %43, 1
  %.fca.2.extract30 = extractvalue { ptr, ptr, ptr, i32 } %43, 2
  %.fca.3.extract32 = extractvalue { ptr, ptr, ptr, i32 } %43, 3
  %hash_coef_ptr.i.i62 = getelementptr i8, ptr %.fca.0.extract26, i64 8
  %tbl_size_ptr.i.i63 = getelementptr i8, ptr %.fca.0.extract26, i64 16
  %offset_tbl_ptr.i.i64 = getelementptr i8, ptr %.fca.0.extract26, i64 40
  %hash_coef.i.i65 = load i64, ptr %hash_coef_ptr.i.i62, align 4
  %tbl_size.i.i66 = load i64, ptr %tbl_size_ptr.i.i63, align 4
  %offset_tbl.i.i67 = load ptr, ptr %offset_tbl_ptr.i.i64, align 8
  %product.i.i.i68 = mul i64 %hash_coef.i.i65, 4189192806087951739
  %shifted.i.i.i69 = lshr i64 %product.i.i.i68, 32
  %xored.i.i.i70 = xor i64 %shifted.i.i.i69, %product.i.i.i68
  %hash.i.i.i71 = and i64 %xored.i.i.i70, %tbl_size.i.i66
  %offset_ptr.i.i72 = getelementptr i32, ptr %offset_tbl.i.i67, i64 %hash.i.i.i71
  %offset.i.i73 = load i32, ptr %offset_ptr.i.i72, align 4
  %eq.i76 = icmp eq i32 %.fca.3.extract32, %offset.i.i73
  call void @llvm.assume(i1 %eq.i76) #30
  %44 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract26, 0
  %45 = insertvalue { ptr, ptr, ptr, i32 } %44, ptr %.fca.1.extract28, 1
  %46 = insertvalue { ptr, ptr, ptr, i32 } %45, ptr %.fca.2.extract30, 2
  %47 = insertvalue { ptr, ptr, ptr, i32 } %46, i32 %.fca.3.extract32, 3
  %48 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull %.fca.0.extract14)
  %49 = load ptr, ptr %7, align 8
  %50 = call ptr %49(ptr %.fca.1.extract16)
  %51 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %52 = call ptr @llvm.invariant.start.p0(i64 24, ptr %.fca.0.extract26)
  %53 = sext i32 %.fca.3.extract32 to i64
  %54 = getelementptr ptr, ptr %.fca.0.extract26, i64 %53
  %55 = getelementptr i8, ptr %54, i64 8
  %56 = load ptr, ptr %55, align 8
  %57 = call ptr %56({ ptr, ptr, ptr, i32 } %47, ptr nonnull %4)
  %58 = call { ptr, i160 } %57({ ptr, ptr, ptr, i32 } %47, { ptr, ptr, ptr, i32 } %47, ptr nonnull %4)
  %.sroa.0.0 = extractvalue { ptr, i160 } %58, 0
  %59 = icmp ne ptr %.sroa.0.0, @nil_typ
  %60 = icmp ne ptr %.sroa.0.0, null
  %.not46 = and i1 %59, %60
  br i1 %.not46, label %36, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph119, %36, %.lr.ph
  %.pn110.lcssa = phi { ptr, i160 } [ %26, %.lr.ph ], [ %.pn110118, %.lr.ph119 ], [ %58, %36 ]
  %.ph = phi ptr [ %.sroa.0.0107, %.lr.ph ], [ @nil_typ, %.lr.ph119 ], [ %.sroa.0.0, %36 ]
  %.sroa.3.0112.le = extractvalue { ptr, i160 } %.pn110.lcssa, 1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %3
  %.1.ph104 = phi i160 [ undef, %3 ], [ %.sroa.3.0112.le, %._crit_edge.loopexit ]
  %61 = phi ptr [ @nil_typ, %3 ], [ %.ph, %._crit_edge.loopexit ]
  %.reload15.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %61, 0
  %.reload15.fca.1.insert = insertvalue { ptr, i160 } %.reload15.fca.0.insert, i160 %.1.ph104, 1
  ret { ptr, i160 } %.reload15.fca.1.insert
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr } @FilterIterator2_getter_f(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr } undef, ptr %3, 0
  ret { ptr } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @FilterIterator2_setter_f(ptr nocapture writeonly %0, { ptr } %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 40
  %.fca.0.extract = extractvalue { ptr } %1, 0
  store ptr %.fca.0.extract, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @FilterIterator2_getter_iterator(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @FilterIterator2_setter_iterator(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 32
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr } @FilterIterable2_getter_f(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr } undef, ptr %3, 0
  ret { ptr } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @FilterIterable2_setter_f(ptr nocapture writeonly %0, { ptr } %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 40
  %.fca.0.extract = extractvalue { ptr } %1, 0
  store ptr %.fca.0.extract, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @FilterIterable2_getter_iterable(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @FilterIterable2_setter_iterable(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 32
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_MapIterable2(ptr nocapture readnone %0) #5 {
  ret { i64, i64 } { i64 56, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @MapIterable2_field_MapIterable2_0(ptr nocapture readonly %0) #0 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @MapIterable2_field_MapIterable2_1(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @MapIterable2_B_init_iterableIterable2T_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 200
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @MapIterable2_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 208
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @MapIterable2_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 216
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @MapIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 224
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @MapIterable2_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 232
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @MapIterable2_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 240
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @MapIterable2_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 248
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @MapIterable2_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 256
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @MapIterable2_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 264
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @MapIterable2_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 272
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @MapIterable2_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 280
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @MapIterable2_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 288
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @MapIterable2_init_iterableIterable2T_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -1724859134596891929
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %hash_coef_ptr.i.i11 = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i12 = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i13 = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i14 = load i64, ptr %hash_coef_ptr.i.i11, align 4
  %tbl_size.i.i15 = load i64, ptr %tbl_size_ptr.i.i12, align 4
  %offset_tbl.i.i16 = load ptr, ptr %offset_tbl_ptr.i.i13, align 8
  %product.i.i.i17 = mul i64 %hash_coef.i.i14, 5693646204635713916
  %shifted.i.i.i18 = lshr i64 %product.i.i.i17, 32
  %xored.i.i.i19 = xor i64 %shifted.i.i.i18, %product.i.i.i17
  %hash.i.i.i20 = and i64 %xored.i.i.i19, %tbl_size.i.i15
  %offset_ptr.i.i21 = getelementptr i32, ptr %offset_tbl.i.i16, i64 %hash.i.i.i20
  %offset.i.i36 = load i32, ptr %offset_ptr.i.i21, align 4
  %6 = tail call ptr @llvm.invariant.start.p0(i64 408, ptr %.fca.0.extract2)
  %7 = sext i32 %offset.i.i to i64
  %8 = getelementptr ptr, ptr %.fca.0.extract2, i64 %7
  %9 = getelementptr i8, ptr %8, i64 16
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr i8, ptr %10, i64 8
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.1.extract, 1
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, ptr %.fca.2.extract, 2
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, i32 %offset.i.i36, 3
  tail call void %12(ptr %.fca.1.extract4, { ptr, ptr, ptr, i32 } %16)
  %17 = tail call ptr @llvm.invariant.start.p0(i64 408, ptr %.fca.0.extract2)
  %18 = getelementptr i8, ptr %8, i64 24
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr i8, ptr %19, i64 8
  %21 = load ptr, ptr %20, align 8
  tail call void %21(ptr %.fca.1.extract4, { ptr } %4)
  ret void
}

define { ptr, ptr, ptr, i32 } @MapIterable2_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract28 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract26, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract26, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract26, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -1724859134596891929
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %5 = tail call ptr @llvm.invariant.start.p0(i64 408, ptr %.fca.0.extract26)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract26, i64 %6
  %8 = getelementptr i8, ptr %7, i64 16
  %9 = load ptr, ptr %8, align 8
  %10 = load ptr, ptr %9, align 8
  %11 = tail call { ptr, ptr, ptr, i32 } %10(ptr %.fca.1.extract28)
  %.fca.0.extract18 = extractvalue { ptr, ptr, ptr, i32 } %11, 0
  %.fca.1.extract20 = extractvalue { ptr, ptr, ptr, i32 } %11, 1
  %.fca.2.extract22 = extractvalue { ptr, ptr, ptr, i32 } %11, 2
  %.fca.3.extract24 = extractvalue { ptr, ptr, ptr, i32 } %11, 3
  %hash_coef_ptr.i.i35 = getelementptr i8, ptr %.fca.0.extract18, i64 8
  %tbl_size_ptr.i.i36 = getelementptr i8, ptr %.fca.0.extract18, i64 16
  %offset_tbl_ptr.i.i37 = getelementptr i8, ptr %.fca.0.extract18, i64 40
  %hash_coef.i.i38 = load i64, ptr %hash_coef_ptr.i.i35, align 4
  %tbl_size.i.i39 = load i64, ptr %tbl_size_ptr.i.i36, align 4
  %offset_tbl.i.i40 = load ptr, ptr %offset_tbl_ptr.i.i37, align 8
  %product.i.i.i41 = mul i64 %hash_coef.i.i38, 5693646204635713916
  %shifted.i.i.i42 = lshr i64 %product.i.i.i41, 32
  %xored.i.i.i43 = xor i64 %shifted.i.i.i42, %product.i.i.i41
  %hash.i.i.i44 = and i64 %xored.i.i.i43, %tbl_size.i.i39
  %offset_ptr.i.i45 = getelementptr i32, ptr %offset_tbl.i.i40, i64 %hash.i.i.i44
  %offset.i.i46 = load i32, ptr %offset_ptr.i.i45, align 4
  %eq.i = icmp eq i32 %.fca.3.extract24, %offset.i.i46
  tail call void @llvm.assume(i1 %eq.i) #30
  %12 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract18, 0
  %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.1.extract20, 1
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.2.extract22, 2
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, i32 %.fca.3.extract24, 3
  %16 = tail call ptr @llvm.invariant.start.p0(i64 408, ptr %.fca.0.extract26)
  %17 = load ptr, ptr %7, align 8
  %18 = tail call ptr %17(ptr %.fca.1.extract28)
  %19 = tail call ptr @llvm.invariant.start.p0(i64 408, ptr %.fca.0.extract26)
  %20 = getelementptr i8, ptr %7, i64 8
  %21 = load ptr, ptr %20, align 8
  %22 = tail call ptr %21(ptr %.fca.1.extract28)
  %23 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %24 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract18)
  %25 = sext i32 %.fca.3.extract24 to i64
  %26 = getelementptr ptr, ptr %.fca.0.extract18, i64 %25
  %27 = getelementptr i8, ptr %26, i64 8
  %28 = load ptr, ptr %27, align 8
  %29 = call ptr %28({ ptr, ptr, ptr, i32 } %15, ptr nonnull %4)
  %30 = call { ptr, ptr, ptr, i32 } %29({ ptr, ptr, ptr, i32 } %15, { ptr, ptr, ptr, i32 } %15, ptr nonnull %4)
  %31 = call ptr @llvm.invariant.start.p0(i64 408, ptr %.fca.0.extract26)
  %32 = getelementptr i8, ptr %7, i64 24
  %33 = load ptr, ptr %32, align 8
  %34 = load ptr, ptr %33, align 8
  %35 = call { ptr } %34(ptr %.fca.1.extract28)
  %36 = call ptr @llvm.invariant.start.p0(i64 408, ptr %.fca.0.extract26)
  %37 = load ptr, ptr %7, align 8
  %38 = call ptr %37(ptr %.fca.1.extract28)
  %39 = call ptr @llvm.invariant.start.p0(i64 408, ptr %.fca.0.extract26)
  %40 = load ptr, ptr %20, align 8
  %41 = call ptr %40(ptr %.fca.1.extract28)
  %result.i = call noalias dereferenceable_or_null(56) ptr @bump_malloc_inner(i64 noundef 56, ptr nonnull @current_ptr) #29
  store ptr %38, ptr %result.i, align 8
  %42 = getelementptr i8, ptr %result.i, i64 8
  store ptr %41, ptr %42, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %result.i)
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = getelementptr inbounds i8, ptr %44, i64 8
  %46 = getelementptr inbounds i8, ptr %44, i64 24
  store ptr @MapIterator2, ptr %44, align 8
  store ptr %result.i, ptr %45, align 8
  store i32 9, ptr %46, align 8
  %47 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %44)
  %48 = call ptr @llvm.invariant.start.p0(i64 408, ptr %.fca.0.extract26)
  %49 = load ptr, ptr %8, align 8
  %50 = load ptr, ptr %49, align 8
  %51 = call { ptr, ptr, ptr, i32 } %50(ptr %.fca.1.extract28)
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %51, 0
  %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %51, 1
  %.fca.2.extract6 = extractvalue { ptr, ptr, ptr, i32 } %51, 2
  %.fca.3.extract8 = extractvalue { ptr, ptr, ptr, i32 } %51, 3
  %hash_coef_ptr.i.i63 = getelementptr i8, ptr %.fca.0.extract2, i64 8
  %tbl_size_ptr.i.i64 = getelementptr i8, ptr %.fca.0.extract2, i64 16
  %offset_tbl_ptr.i.i65 = getelementptr i8, ptr %.fca.0.extract2, i64 40
  %hash_coef.i.i66 = load i64, ptr %hash_coef_ptr.i.i63, align 4
  %tbl_size.i.i67 = load i64, ptr %tbl_size_ptr.i.i64, align 4
  %offset_tbl.i.i68 = load ptr, ptr %offset_tbl_ptr.i.i65, align 8
  %product.i.i.i69 = mul i64 %hash_coef.i.i66, 5693646204635713916
  %shifted.i.i.i70 = lshr i64 %product.i.i.i69, 32
  %xored.i.i.i71 = xor i64 %shifted.i.i.i70, %product.i.i.i69
  %hash.i.i.i72 = and i64 %xored.i.i.i71, %tbl_size.i.i67
  %offset_ptr.i.i73 = getelementptr i32, ptr %offset_tbl.i.i68, i64 %hash.i.i.i72
  %offset.i.i74 = load i32, ptr %offset_ptr.i.i73, align 4
  %eq.i77 = icmp eq i32 %.fca.3.extract8, %offset.i.i74
  call void @llvm.assume(i1 %eq.i77) #30
  %52 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract2, 0
  %53 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %.fca.1.extract4, 1
  %54 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %.fca.2.extract6, 2
  %55 = insertvalue { ptr, ptr, ptr, i32 } %54, i32 %.fca.3.extract8, 3
  %56 = call ptr @llvm.invariant.start.p0(i64 408, ptr %.fca.0.extract26)
  %57 = load ptr, ptr %7, align 8
  %58 = call ptr %57(ptr %.fca.1.extract28)
  %59 = call ptr @llvm.invariant.start.p0(i64 408, ptr %.fca.0.extract26)
  %60 = load ptr, ptr %20, align 8
  %61 = call ptr %60(ptr %.fca.1.extract28)
  %62 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %63 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract2)
  %64 = sext i32 %.fca.3.extract8 to i64
  %65 = getelementptr ptr, ptr %.fca.0.extract2, i64 %64
  %66 = getelementptr i8, ptr %65, i64 8
  %67 = load ptr, ptr %66, align 8
  %68 = call ptr %67({ ptr, ptr, ptr, i32 } %55, ptr nonnull %4)
  %69 = call { ptr, ptr, ptr, i32 } %68({ ptr, ptr, ptr, i32 } %55, { ptr, ptr, ptr, i32 } %55, ptr nonnull %4)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %69, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %69, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %69, 2
  %hash_coef_ptr.i.i79 = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i80 = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i81 = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %70 = call ptr @llvm.invariant.start.p0(i64 408, ptr %.fca.0.extract26)
  %71 = load ptr, ptr %32, align 8
  %72 = load ptr, ptr %71, align 8
  %73 = call { ptr } %72(ptr %.fca.1.extract28)
  %hash_coef.i.i96 = load i64, ptr %hash_coef_ptr.i.i79, align 4
  %tbl_size.i.i97 = load i64, ptr %tbl_size_ptr.i.i80, align 4
  %offset_tbl.i.i98 = load ptr, ptr %offset_tbl_ptr.i.i81, align 8
  %product.i.i.i99 = mul i64 %hash_coef.i.i96, 4189192806087951739
  %shifted.i.i.i100 = lshr i64 %product.i.i.i99, 32
  %xored.i.i.i101 = xor i64 %shifted.i.i.i100, %product.i.i.i99
  %hash.i.i.i102 = and i64 %xored.i.i.i101, %tbl_size.i.i97
  %offset_ptr.i.i103 = getelementptr i32, ptr %offset_tbl.i.i98, i64 %hash.i.i.i102
  %offset.i.i104 = load i32, ptr %offset_ptr.i.i103, align 4
  %74 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %75 = insertvalue { ptr, ptr, ptr, i32 } %74, ptr %.fca.1.extract, 1
  %76 = insertvalue { ptr, ptr, ptr, i32 } %75, ptr %.fca.2.extract, 2
  %77 = insertvalue { ptr, ptr, ptr, i32 } %76, i32 %offset.i.i104, 3
  %78 = load ptr, ptr %44, align 8
  %79 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %78, 0
  %80 = load ptr, ptr %45, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %80, 1
  %82 = getelementptr inbounds i8, ptr %44, i64 16
  %83 = load ptr, ptr %82, align 8
  %84 = insertvalue { ptr, ptr, ptr, i32 } %81, ptr %83, 2
  %85 = load i32, ptr %46, align 8
  %86 = insertvalue { ptr, ptr, ptr, i32 } %84, i32 %85, 3
  %87 = call ptr @llvm.invariant.start.p0(i64 408, ptr %.fca.0.extract26)
  %88 = load ptr, ptr %7, align 8
  %89 = call ptr %88(ptr %.fca.1.extract28)
  %90 = call ptr @llvm.invariant.start.p0(i64 408, ptr %.fca.0.extract26)
  %91 = load ptr, ptr %20, align 8
  %92 = call ptr %91(ptr %.fca.1.extract28)
  %result.i106 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #29
  %93 = getelementptr i8, ptr %result.i106, i64 8
  store ptr %89, ptr %93, align 8
  %94 = getelementptr i8, ptr %result.i106, i64 16
  store ptr null, ptr %94, align 8
  %95 = call ptr @llvm.invariant.start.p0(i64 16, ptr %result.i106)
  store ptr @Iterator2, ptr %result.i106, align 8
  %result.i107 = call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #29
  %96 = getelementptr i8, ptr %result.i107, i64 16
  store ptr %89, ptr %96, align 8
  %97 = getelementptr i8, ptr %result.i107, i64 8
  store ptr %92, ptr %97, align 8
  %98 = getelementptr i8, ptr %result.i107, i64 24
  store ptr null, ptr %98, align 8
  %99 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i107)
  store ptr @function_typ, ptr %result.i107, align 8
  %100 = alloca [2 x ptr], align 8
  store ptr %result.i106, ptr %100, align 8
  %101 = getelementptr inbounds i8, ptr %100, i64 8
  store ptr %result.i107, ptr %101, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %100)
  %103 = call ptr @llvm.invariant.start.p0(i64 88, ptr %78)
  %104 = sext i32 %85 to i64
  %105 = getelementptr ptr, ptr %78, i64 %104
  %106 = getelementptr i8, ptr %105, i64 32
  %107 = load ptr, ptr %106, align 8
  %108 = alloca { ptr, ptr }, align 8
  store ptr %.fca.0.extract1, ptr %108, align 8
  %109 = getelementptr inbounds i8, ptr %108, i64 8
  store ptr @function_typ, ptr %109, align 8
  %110 = call ptr %107({ ptr, ptr, ptr, i32 } %86, ptr nonnull %108)
  call void %110({ ptr, ptr, ptr, i32 } %86, { ptr, ptr, ptr, i32 } %86, ptr nonnull %100, { ptr, ptr, ptr, i32 } %77, { ptr } %73)
  %111 = load ptr, ptr %44, align 8
  %112 = load ptr, ptr %45, align 8
  %113 = load ptr, ptr %82, align 8
  %hash_coef_ptr.i.i109 = getelementptr i8, ptr %111, i64 8
  %tbl_size_ptr.i.i110 = getelementptr i8, ptr %111, i64 16
  %offset_tbl_ptr.i.i111 = getelementptr i8, ptr %111, i64 40
  %hash_coef.i.i112 = load i64, ptr %hash_coef_ptr.i.i109, align 4
  %tbl_size.i.i113 = load i64, ptr %tbl_size_ptr.i.i110, align 4
  %offset_tbl.i.i114 = load ptr, ptr %offset_tbl_ptr.i.i111, align 8
  %product.i.i.i115 = mul i64 %hash_coef.i.i112, 4189192806087951739
  %shifted.i.i.i116 = lshr i64 %product.i.i.i115, 32
  %xored.i.i.i117 = xor i64 %shifted.i.i.i116, %product.i.i.i115
  %hash.i.i.i118 = and i64 %xored.i.i.i117, %tbl_size.i.i113
  %offset_ptr.i.i119 = getelementptr i32, ptr %offset_tbl.i.i114, i64 %hash.i.i.i118
  %offset.i.i120 = load i32, ptr %offset_ptr.i.i119, align 4
  %114 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %111, 0
  %115 = insertvalue { ptr, ptr, ptr, i32 } %114, ptr %112, 1
  %116 = insertvalue { ptr, ptr, ptr, i32 } %115, ptr %113, 2
  %117 = insertvalue { ptr, ptr, ptr, i32 } %116, i32 %offset.i.i120, 3
  ret { ptr, ptr, ptr, i32 } %117
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_MapIterator2(ptr nocapture readnone %0) #5 {
  ret { i64, i64 } { i64 56, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @MapIterator2_field_MapIterator2_0(ptr nocapture readonly %0) #0 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @MapIterator2_field_MapIterator2_1(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @MapIterator2_B_init_iteratorIterator2T_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 120
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @MapIterator2_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 128
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @MapIterator2_init_iteratorIterator2T_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -10255947709272500
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %hash_coef_ptr.i.i11 = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i12 = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i13 = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i14 = load i64, ptr %hash_coef_ptr.i.i11, align 4
  %tbl_size.i.i15 = load i64, ptr %tbl_size_ptr.i.i12, align 4
  %offset_tbl.i.i16 = load ptr, ptr %offset_tbl_ptr.i.i13, align 8
  %product.i.i.i17 = mul i64 %hash_coef.i.i14, 4189192806087951739
  %shifted.i.i.i18 = lshr i64 %product.i.i.i17, 32
  %xored.i.i.i19 = xor i64 %shifted.i.i.i18, %product.i.i.i17
  %hash.i.i.i20 = and i64 %xored.i.i.i19, %tbl_size.i.i15
  %offset_ptr.i.i21 = getelementptr i32, ptr %offset_tbl.i.i16, i64 %hash.i.i.i20
  %offset.i.i36 = load i32, ptr %offset_ptr.i.i21, align 4
  %6 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr %.fca.0.extract2)
  %7 = sext i32 %offset.i.i to i64
  %8 = getelementptr ptr, ptr %.fca.0.extract2, i64 %7
  %9 = getelementptr i8, ptr %8, i64 16
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr i8, ptr %10, i64 8
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.1.extract, 1
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, ptr %.fca.2.extract, 2
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, i32 %offset.i.i36, 3
  tail call void %12(ptr %.fca.1.extract4, { ptr, ptr, ptr, i32 } %16)
  %17 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr %.fca.0.extract2)
  %18 = getelementptr i8, ptr %8, i64 24
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr i8, ptr %19, i64 8
  %21 = load ptr, ptr %20, align 8
  tail call void %21(ptr %.fca.1.extract4, { ptr } %4)
  ret void
}

define { ptr, i160 } @MapIterator2_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract14 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract12, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract12, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract12, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -10255947709272500
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %5 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr %.fca.0.extract12)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract12, i64 %6
  %8 = getelementptr i8, ptr %7, i64 16
  %9 = load ptr, ptr %8, align 8
  %10 = load ptr, ptr %9, align 8
  %11 = tail call { ptr, ptr, ptr, i32 } %10(ptr %.fca.1.extract14)
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %11, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %11, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %11, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %11, 3
  %hash_coef_ptr.i.i35 = getelementptr i8, ptr %.fca.0.extract2, i64 8
  %tbl_size_ptr.i.i36 = getelementptr i8, ptr %.fca.0.extract2, i64 16
  %offset_tbl_ptr.i.i37 = getelementptr i8, ptr %.fca.0.extract2, i64 40
  %hash_coef.i.i38 = load i64, ptr %hash_coef_ptr.i.i35, align 4
  %tbl_size.i.i39 = load i64, ptr %tbl_size_ptr.i.i36, align 4
  %offset_tbl.i.i40 = load ptr, ptr %offset_tbl_ptr.i.i37, align 8
  %product.i.i.i41 = mul i64 %hash_coef.i.i38, 4189192806087951739
  %shifted.i.i.i42 = lshr i64 %product.i.i.i41, 32
  %xored.i.i.i43 = xor i64 %shifted.i.i.i42, %product.i.i.i41
  %hash.i.i.i44 = and i64 %xored.i.i.i43, %tbl_size.i.i39
  %offset_ptr.i.i45 = getelementptr i32, ptr %offset_tbl.i.i40, i64 %hash.i.i.i44
  %offset.i.i46 = load i32, ptr %offset_ptr.i.i45, align 4
  %eq.i = icmp eq i32 %.fca.3.extract, %offset.i.i46
  tail call void @llvm.assume(i1 %eq.i) #30
  %12 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract2, 0
  %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.1.extract3, 1
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.2.extract, 2
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, i32 %.fca.3.extract, 3
  %16 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr %.fca.0.extract12)
  %17 = load ptr, ptr %7, align 8
  %18 = tail call ptr %17(ptr %.fca.1.extract14)
  %19 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr %.fca.0.extract12)
  %20 = getelementptr i8, ptr %7, i64 8
  %21 = load ptr, ptr %20, align 8
  %22 = tail call ptr %21(ptr %.fca.1.extract14)
  %23 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %24 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %.fca.0.extract2)
  %25 = sext i32 %.fca.3.extract to i64
  %26 = getelementptr ptr, ptr %.fca.0.extract2, i64 %25
  %27 = getelementptr i8, ptr %26, i64 8
  %28 = load ptr, ptr %27, align 8
  %29 = call ptr %28({ ptr, ptr, ptr, i32 } %15, ptr nonnull %4)
  %30 = call { ptr, i160 } %29({ ptr, ptr, ptr, i32 } %15, { ptr, ptr, ptr, i32 } %15, ptr nonnull %4)
  %.fca.0.extract = extractvalue { ptr, i160 } %30, 0
  %31 = icmp ne ptr %.fca.0.extract, @nil_typ
  %32 = icmp ne ptr %.fca.0.extract, null
  %.not33 = and i1 %31, %32
  br i1 %.not33, label %33, label %40

33:                                               ; preds = %3
  %34 = call ptr @llvm.invariant.start.p0(i64 88, ptr nonnull %.fca.0.extract12)
  %35 = getelementptr i8, ptr %7, i64 24
  %36 = load ptr, ptr %35, align 8
  %37 = load ptr, ptr %36, align 8
  %38 = call { ptr } %37(ptr %.fca.1.extract14)
  %.fca.0.extract25 = extractvalue { ptr } %38, 0
  %39 = call { ptr, i160 } %.fca.0.extract25({ ptr, i160 } %30)
  %.fca.0.extract20 = extractvalue { ptr, i160 } %39, 0
  %.fca.1.extract22 = extractvalue { ptr, i160 } %39, 1
  br label %40

40:                                               ; preds = %3, %33
  %.reg2mem5.sroa.0.0 = phi ptr [ %.fca.0.extract20, %33 ], [ @nil_typ, %3 ]
  %.reg2mem5.sroa.3.0 = phi i160 [ %.fca.1.extract22, %33 ], [ undef, %3 ]
  %.reload6.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %.reg2mem5.sroa.0.0, 0
  %.reload6.fca.1.insert = insertvalue { ptr, i160 } %.reload6.fca.0.insert, i160 %.reg2mem5.sroa.3.0, 1
  ret { ptr, i160 } %.reload6.fca.1.insert
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr } @MapIterator2_getter_f(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 48
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr } undef, ptr %3, 0
  ret { ptr } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @MapIterator2_setter_f(ptr nocapture writeonly %0, { ptr } %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 48
  %.fca.0.extract = extractvalue { ptr } %1, 0
  store ptr %.fca.0.extract, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @MapIterator2_getter_iterator(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 24
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 32
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 40
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @MapIterator2_setter_iterator(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 16
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 32
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 40
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr } @MapIterable2_getter_f(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 48
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr } undef, ptr %3, 0
  ret { ptr } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @MapIterable2_setter_f(ptr nocapture writeonly %0, { ptr } %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 48
  %.fca.0.extract = extractvalue { ptr } %1, 0
  store ptr %.fca.0.extract, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @MapIterable2_getter_iterable(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 24
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 32
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 40
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @MapIterable2_setter_iterable(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 16
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 32
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 40
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_ArrayIterator(ptr nocapture readnone %0) #5 {
  ret { i64, i64 } { i64 48, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ArrayIterator_field_ArrayIterator_0(ptr nocapture readonly %0) #0 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ArrayIterator_B_init_arrayArrayT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 112
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ArrayIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 120
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @ArrayIterator_init_arrayArrayT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 3447345754186651411
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %hash_coef_ptr.i.i10 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i11 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i12 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i13 = load i64, ptr %hash_coef_ptr.i.i10, align 4
  %tbl_size.i.i14 = load i64, ptr %tbl_size_ptr.i.i11, align 4
  %offset_tbl.i.i15 = load ptr, ptr %offset_tbl_ptr.i.i12, align 8
  %product.i.i.i16 = mul i64 %hash_coef.i.i13, -5261542750394134544
  %shifted.i.i.i17 = lshr i64 %product.i.i.i16, 32
  %xored.i.i.i18 = xor i64 %shifted.i.i.i17, %product.i.i.i16
  %hash.i.i.i19 = and i64 %xored.i.i.i18, %tbl_size.i.i14
  %offset_ptr.i.i20 = getelementptr i32, ptr %offset_tbl.i.i15, i64 %hash.i.i.i19
  %offset.i.i35 = load i32, ptr %offset_ptr.i.i20, align 4
  %5 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr %.fca.0.extract1)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract1, i64 %6
  %8 = getelementptr i8, ptr %7, i64 8
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr i8, ptr %9, i64 8
  %11 = load ptr, ptr %10, align 8
  %12 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.1.extract, 1
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.2.extract, 2
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, i32 %offset.i.i35, 3
  tail call void %11(ptr %.fca.1.extract3, { ptr, ptr, ptr, i32 } %15)
  %16 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr %.fca.0.extract1)
  %17 = getelementptr i8, ptr %7, i64 16
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr i8, ptr %18, i64 8
  %20 = load ptr, ptr %19, align 8
  tail call void %20(ptr %.fca.1.extract3, i32 0)
  ret void
}

define { ptr, i160 } @ArrayIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %5 = alloca [1 x ptr], align 8
  %6 = alloca { ptr }, align 8
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 3447345754186651411
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %7 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr %.fca.0.extract9)
  %8 = sext i32 %offset.i.i to i64
  %9 = getelementptr ptr, ptr %.fca.0.extract9, i64 %8
  %10 = getelementptr i8, ptr %9, i64 16
  %11 = load ptr, ptr %10, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = tail call i32 %12(ptr %.fca.1.extract11)
  %14 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr %.fca.0.extract9)
  %15 = getelementptr i8, ptr %9, i64 8
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = tail call { ptr, ptr, ptr, i32 } %17(ptr %.fca.1.extract11)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %18, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %18, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %18, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %18, 3
  %hash_coef_ptr.i.i32 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i33 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i34 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i35 = load i64, ptr %hash_coef_ptr.i.i32, align 4
  %tbl_size.i.i36 = load i64, ptr %tbl_size_ptr.i.i33, align 4
  %offset_tbl.i.i37 = load ptr, ptr %offset_tbl_ptr.i.i34, align 8
  %product.i.i.i38 = mul i64 %hash_coef.i.i35, -5261542750394134544
  %shifted.i.i.i39 = lshr i64 %product.i.i.i38, 32
  %xored.i.i.i40 = xor i64 %shifted.i.i.i39, %product.i.i.i38
  %hash.i.i.i41 = and i64 %xored.i.i.i40, %tbl_size.i.i36
  %offset_ptr.i.i42 = getelementptr i32, ptr %offset_tbl.i.i37, i64 %hash.i.i.i41
  %offset.i.i43 = load i32, ptr %offset_ptr.i.i42, align 4
  %eq.i = icmp eq i32 %.fca.3.extract, %offset.i.i43
  tail call void @llvm.assume(i1 %eq.i) #30
  %19 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %20 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %.fca.1.extract, 1
  %21 = insertvalue { ptr, ptr, ptr, i32 } %20, ptr %.fca.2.extract, 2
  %22 = insertvalue { ptr, ptr, ptr, i32 } %21, i32 %.fca.3.extract, 3
  %23 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr %.fca.0.extract9)
  %24 = load ptr, ptr %9, align 8
  %25 = tail call ptr %24(ptr %.fca.1.extract11)
  %26 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %27 = tail call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract)
  %28 = sext i32 %.fca.3.extract to i64
  %29 = getelementptr ptr, ptr %.fca.0.extract, i64 %28
  %30 = getelementptr i8, ptr %29, i64 64
  %31 = load ptr, ptr %30, align 8
  %32 = call ptr %31({ ptr, ptr, ptr, i32 } %22, ptr nonnull %4)
  %33 = call i32 %32({ ptr, ptr, ptr, i32 } %22, { ptr, ptr, ptr, i32 } %22, ptr nonnull %4)
  %.not = icmp slt i32 %13, %33
  br i1 %.not, label %34, label %68

34:                                               ; preds = %3
  %35 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull %.fca.0.extract9)
  %36 = load ptr, ptr %10, align 8
  %37 = load ptr, ptr %36, align 8
  %38 = call i32 %37(ptr %.fca.1.extract11)
  %39 = add i32 %38, 1
  %40 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull %.fca.0.extract9)
  %41 = load ptr, ptr %10, align 8
  %42 = getelementptr i8, ptr %41, i64 8
  %43 = load ptr, ptr %42, align 8
  call void %43(ptr %.fca.1.extract11, i32 %39)
  %44 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull %.fca.0.extract9)
  %45 = load ptr, ptr %10, align 8
  %46 = load ptr, ptr %45, align 8
  %47 = call i32 %46(ptr %.fca.1.extract11)
  %48 = add i32 %47, -1
  %49 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull %.fca.0.extract9)
  %50 = load ptr, ptr %15, align 8
  %51 = load ptr, ptr %50, align 8
  %52 = call { ptr, ptr, ptr, i32 } %51(ptr %.fca.1.extract11)
  %.fca.0.extract21 = extractvalue { ptr, ptr, ptr, i32 } %52, 0
  %.fca.1.extract23 = extractvalue { ptr, ptr, ptr, i32 } %52, 1
  %.fca.2.extract25 = extractvalue { ptr, ptr, ptr, i32 } %52, 2
  %.fca.3.extract27 = extractvalue { ptr, ptr, ptr, i32 } %52, 3
  %hash_coef_ptr.i.i46 = getelementptr i8, ptr %.fca.0.extract21, i64 8
  %tbl_size_ptr.i.i47 = getelementptr i8, ptr %.fca.0.extract21, i64 16
  %offset_tbl_ptr.i.i48 = getelementptr i8, ptr %.fca.0.extract21, i64 40
  %hash_coef.i.i49 = load i64, ptr %hash_coef_ptr.i.i46, align 4
  %tbl_size.i.i50 = load i64, ptr %tbl_size_ptr.i.i47, align 4
  %offset_tbl.i.i51 = load ptr, ptr %offset_tbl_ptr.i.i48, align 8
  %product.i.i.i52 = mul i64 %hash_coef.i.i49, -5261542750394134544
  %shifted.i.i.i53 = lshr i64 %product.i.i.i52, 32
  %xored.i.i.i54 = xor i64 %shifted.i.i.i53, %product.i.i.i52
  %hash.i.i.i55 = and i64 %xored.i.i.i54, %tbl_size.i.i50
  %offset_ptr.i.i56 = getelementptr i32, ptr %offset_tbl.i.i51, i64 %hash.i.i.i55
  %offset.i.i57 = load i32, ptr %offset_ptr.i.i56, align 4
  %eq.i60 = icmp eq i32 %.fca.3.extract27, %offset.i.i57
  call void @llvm.assume(i1 %eq.i60) #30
  %53 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract21, 0
  %54 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %.fca.1.extract23, 1
  %55 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %.fca.2.extract25, 2
  %56 = insertvalue { ptr, ptr, ptr, i32 } %55, i32 %.fca.3.extract27, 3
  %57 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull %.fca.0.extract9)
  %58 = load ptr, ptr %9, align 8
  %59 = call ptr %58(ptr %.fca.1.extract11)
  store ptr @_parameterization_Ptri32, ptr %5, align 8
  %60 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %5)
  %61 = call ptr @llvm.invariant.start.p0(i64 600, ptr %.fca.0.extract21)
  %62 = sext i32 %.fca.3.extract27 to i64
  %63 = getelementptr ptr, ptr %.fca.0.extract21, i64 %62
  %64 = getelementptr i8, ptr %63, i64 120
  %65 = load ptr, ptr %64, align 8
  store ptr @i32_typ, ptr %6, align 8
  %66 = call ptr %65({ ptr, ptr, ptr, i32 } %56, ptr nonnull %6)
  %67 = call { ptr, i160 } %66({ ptr, ptr, ptr, i32 } %56, { ptr, ptr, ptr, i32 } %56, ptr nonnull %5, i32 %48)
  %.fca.0.extract17 = extractvalue { ptr, i160 } %67, 0
  %.fca.1.extract19 = extractvalue { ptr, i160 } %67, 1
  br label %68

68:                                               ; preds = %3, %34
  %.reg2mem5.sroa.3.0 = phi i160 [ %.fca.1.extract19, %34 ], [ undef, %3 ]
  %.reg2mem5.sroa.0.0 = phi ptr [ %.fca.0.extract17, %34 ], [ @nil_typ, %3 ]
  %.reload6.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %.reg2mem5.sroa.0.0, 0
  %.reload6.fca.1.insert = insertvalue { ptr, i160 } %.reload6.fca.0.insert, i160 %.reg2mem5.sroa.3.0, 1
  ret { ptr, i160 } %.reload6.fca.1.insert
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @ArrayIterator_getter_index(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ArrayIterator_setter_index(ptr nocapture writeonly %0, i32 %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 40
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ArrayIterator_getter_array(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ArrayIterator_setter_array(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 32
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @Array_getter_capacity(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 20
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Array_setter_capacity(ptr nocapture writeonly %0, i32 %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 20
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @Array_getter_length(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Array_setter_length(ptr nocapture writeonly %0, i32 %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 16
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr } @Array_getter_buffer(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr } undef, ptr %3, 0
  ret { ptr } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Array_setter_buffer(ptr nocapture writeonly %0, { ptr } %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr } %1, 0
  store ptr %.fca.0.extract, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @Iterator2_field_Iterator2_0(ptr nocapture readonly %0) local_unnamed_addr #0 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Iterator2_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 88
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @Iterable2_field_Iterable2_0(ptr nocapture readonly %0) local_unnamed_addr #0 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Iterable2_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 168
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Iterable2_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 176
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Iterable2_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 184
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Iterable2_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 192
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Iterable2_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 200
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Iterable2_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 208
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Iterable2_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 216
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Iterable2_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 224
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Iterable2_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 232
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Iterable2_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 240
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Iterable2_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 248
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_Object(ptr nocapture readnone %0) #5 {
  ret { i64, i64 } { i64 0, i64 1 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_Iterator(ptr nocapture readnone %0) #5 {
  ret { i64, i64 } { i64 0, i64 1 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_Iterable(ptr nocapture readnone %0) #5 {
  ret { i64, i64 } { i64 0, i64 1 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_Representable(ptr nocapture readnone %0) #5 {
  ret { i64, i64 } { i64 0, i64 1 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Representable_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 80
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(readwrite, argmem: none, inaccessiblemem: none)
define { ptr, ptr, ptr, i32 } @Representable_repr_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) #7 {
  %result.i = tail call noalias dereferenceable_or_null(7) ptr @bump_malloc_inner(i64 noundef 7, ptr nonnull @current_ptr) #29
  store <6 x i8> <i8 79, i8 98, i8 106, i8 101, i8 99, i8 116>, ptr %result.i, align 8
  %result.i1 = tail call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %4 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %result.i1, 1
  %5 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr undef, 2
  %6 = insertvalue { ptr, ptr, ptr, i32 } %5, i32 9, 3
  store ptr %result.i, ptr %result.i1, align 8
  %7 = getelementptr i8, ptr %result.i1, i64 8
  store i32 6, ptr %7, align 4
  %8 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %9 = getelementptr i8, ptr %result.i1, i64 12
  store i32 7, ptr %9, align 4
  ret { ptr, ptr, ptr, i32 } %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_String(ptr nocapture readnone %0) #5 {
  ret { i64, i64 } { i64 16, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_init_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 208
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_init_bytesBufferPtri8_lengthPtri32_capacityPtri32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 216
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_length_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 224
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_capacity_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 232
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_bytes_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 240
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_append_xPtri8({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 248
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_extend_strString({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 256
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B__index_xPtri32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 264
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B__EQ_otherString({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 272
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_pop_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 280
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_copy_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 288
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_c_string_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 296
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 304
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 312
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @String_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 6499063144389013426
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %result.i = tail call noalias dereferenceable_or_null(1) ptr @bump_malloc_inner(i64 noundef 1, ptr nonnull @current_ptr) #29
  %4 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract)
  %5 = sext i32 %offset.i.i to i64
  %6 = getelementptr ptr, ptr %.fca.0.extract, i64 %5
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr i8, ptr %7, i64 8
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr } undef, ptr %result.i, 0
  tail call void %9(ptr %.fca.1.extract, { ptr } %10)
  %11 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract)
  %12 = getelementptr i8, ptr %6, i64 16
  %13 = load ptr, ptr %12, align 8
  %14 = getelementptr i8, ptr %13, i64 8
  %15 = load ptr, ptr %14, align 8
  tail call void %15(ptr %.fca.1.extract, i32 1)
  %16 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract)
  %17 = getelementptr i8, ptr %6, i64 8
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr i8, ptr %18, i64 8
  %20 = load ptr, ptr %19, align 8
  tail call void %20(ptr %.fca.1.extract, i32 0)
  ret void
}

define void @String_init_bytesBufferPtri8_lengthPtri32_capacityPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr } %3, i32 %4, i32 %5) {
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 6499063144389013426
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %7 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract1)
  %8 = sext i32 %offset.i.i to i64
  %9 = getelementptr ptr, ptr %.fca.0.extract1, i64 %8
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr i8, ptr %10, i64 8
  %12 = load ptr, ptr %11, align 8
  tail call void %12(ptr %.fca.1.extract, { ptr } %3)
  %13 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract1)
  %14 = getelementptr i8, ptr %9, i64 8
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = load ptr, ptr %16, align 8
  tail call void %17(ptr %.fca.1.extract, i32 %4)
  %18 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract1)
  %19 = getelementptr i8, ptr %9, i64 16
  %20 = load ptr, ptr %19, align 8
  %21 = getelementptr i8, ptr %20, i64 8
  %22 = load ptr, ptr %21, align 8
  tail call void %22(ptr %.fca.1.extract, i32 %5)
  ret void
}

define i32 @String_length_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 6499063144389013426
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %4 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract)
  %5 = sext i32 %offset.i.i to i64
  %6 = getelementptr ptr, ptr %.fca.0.extract, i64 %5
  %7 = getelementptr i8, ptr %6, i64 8
  %8 = load ptr, ptr %7, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = tail call i32 %9(ptr %.fca.1.extract)
  ret i32 %10
}

define i32 @String_capacity_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 6499063144389013426
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %4 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract)
  %5 = sext i32 %offset.i.i to i64
  %6 = getelementptr ptr, ptr %.fca.0.extract, i64 %5
  %7 = getelementptr i8, ptr %6, i64 16
  %8 = load ptr, ptr %7, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = tail call i32 %9(ptr %.fca.1.extract)
  ret i32 %10
}

define { ptr } @String_bytes_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 6499063144389013426
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %4 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract1)
  %5 = sext i32 %offset.i.i to i64
  %6 = getelementptr ptr, ptr %.fca.0.extract1, i64 %5
  %7 = load ptr, ptr %6, align 8
  %8 = load ptr, ptr %7, align 8
  %9 = tail call { ptr } %8(ptr %.fca.1.extract)
  ret { ptr } %9
}

define { ptr, ptr, ptr, i32 } @String_append_xPtri8({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i8 %3) {
  %.sroa.079 = alloca ptr, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %.sroa.075 = alloca ptr, align 8
  %.sroa.176 = alloca ptr, align 8
  %.sroa.277 = alloca ptr, align 8
  %.sroa.378 = alloca i32, align 8
  %.sroa.074 = alloca ptr, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %.sroa.073 = alloca ptr, align 8
  %.sroa.1 = alloca ptr, align 8
  %.sroa.2 = alloca ptr, align 8
  %.sroa.3 = alloca i32, align 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 6499063144389013426
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %13 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract)
  %14 = sext i32 %offset.i.i to i64
  %15 = getelementptr ptr, ptr %.fca.0.extract, i64 %14
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = load ptr, ptr %16, align 8
  %18 = load ptr, ptr %17, align 8
  %19 = tail call i32 %18(ptr %.fca.1.extract)
  %20 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract)
  %21 = getelementptr i8, ptr %15, i64 16
  %22 = load ptr, ptr %21, align 8
  %23 = load ptr, ptr %22, align 8
  %24 = tail call i32 %23(ptr %.fca.1.extract)
  %25 = icmp slt i32 %19, %24
  br i1 %25, label %.thread, label %26

26:                                               ; preds = %4
  %27 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract)
  %28 = load ptr, ptr %21, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = tail call i32 %29(ptr %.fca.1.extract)
  %31 = shl i32 %30, 1
  %32 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract)
  %33 = load ptr, ptr %21, align 8
  %34 = getelementptr i8, ptr %33, i64 8
  %35 = load ptr, ptr %34, align 8
  tail call void %35(ptr %.fca.1.extract, i32 %31)
  %36 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract)
  %37 = load ptr, ptr %15, align 8
  %38 = load ptr, ptr %37, align 8
  %39 = tail call { ptr } %38(ptr %.fca.1.extract)
  %.fca.0.extract7 = extractvalue { ptr } %39, 0
  %40 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract)
  %41 = load ptr, ptr %21, align 8
  %42 = load ptr, ptr %41, align 8
  %43 = tail call i32 %42(ptr %.fca.1.extract)
  %44 = sext i32 %43 to i64
  %result.i = tail call noalias ptr @bump_malloc_inner(i64 noundef %44, ptr nonnull @current_ptr) #29
  %45 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract)
  %46 = load ptr, ptr %15, align 8
  %47 = getelementptr i8, ptr %46, i64 8
  %48 = load ptr, ptr %47, align 8
  %49 = insertvalue { ptr } undef, ptr %result.i, 0
  tail call void %48(ptr %.fca.1.extract, { ptr } %49)
  %50 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract)
  %51 = load ptr, ptr %16, align 8
  %52 = load ptr, ptr %51, align 8
  %53 = tail call i32 %52(ptr %.fca.1.extract)
  %54 = icmp sgt i32 %53, 0
  br i1 %54, label %.lr.ph, label %.thread

.lr.ph:                                           ; preds = %26
  %55 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract)
  br label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph, %._crit_edge
  %.reg2mem42.081 = phi i32 [ 0, %.lr.ph ], [ %63, %._crit_edge ]
  %56 = zext nneg i32 %.reg2mem42.081 to i64
  %57 = getelementptr i8, ptr %.fca.0.extract7, i64 %56
  %58 = load ptr, ptr %15, align 8
  %59 = load ptr, ptr %58, align 8
  %60 = tail call { ptr } %59(ptr %.fca.1.extract)
  %.fca.0.extract4 = extractvalue { ptr } %60, 0
  %61 = getelementptr i8, ptr %.fca.0.extract4, i64 %56
  %62 = load i8, ptr %57, align 1
  store i8 %62, ptr %61, align 1
  %63 = add nuw nsw i32 %.reg2mem42.081, 1
  %64 = load ptr, ptr %16, align 8
  %65 = load ptr, ptr %64, align 8
  %66 = tail call i32 %65(ptr %.fca.1.extract)
  %67 = icmp slt i32 %63, %66
  br i1 %67, label %._crit_edge, label %.thread

.thread:                                          ; preds = %._crit_edge, %26, %4
  %.sroa.phi = phi ptr [ %.sroa.176, %4 ], [ %.sroa.1, %26 ], [ %.sroa.1, %._crit_edge ]
  %.sroa.phi64 = phi ptr [ %.sroa.277, %4 ], [ %.sroa.2, %26 ], [ %.sroa.2, %._crit_edge ]
  %.sroa.phi67 = phi ptr [ %.sroa.378, %4 ], [ %.sroa.3, %26 ], [ %.sroa.3, %._crit_edge ]
  %68 = phi ptr [ %.sroa.075, %4 ], [ %.sroa.073, %26 ], [ %.sroa.073, %._crit_edge ]
  %69 = phi ptr [ %8, %4 ], [ %12, %26 ], [ %12, %._crit_edge ]
  %70 = phi ptr [ %7, %4 ], [ %11, %26 ], [ %11, %._crit_edge ]
  %71 = phi ptr [ %6, %4 ], [ %10, %26 ], [ %10, %._crit_edge ]
  %72 = phi ptr [ %5, %4 ], [ %9, %26 ], [ %9, %._crit_edge ]
  %73 = phi ptr [ %.sroa.079, %4 ], [ %.sroa.074, %26 ], [ %.sroa.074, %._crit_edge ]
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %74 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract)
  %75 = load ptr, ptr %15, align 8
  %76 = load ptr, ptr %75, align 8
  %77 = tail call { ptr } %76(ptr %.fca.1.extract)
  %78 = extractvalue { ptr } %77, 0
  store ptr %78, ptr %73, align 8
  %79 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract)
  %80 = load ptr, ptr %16, align 8
  %81 = load ptr, ptr %80, align 8
  %82 = tail call i32 %81(ptr %.fca.1.extract)
  store i32 %82, ptr %72, align 4
  %83 = load ptr, ptr %73, align 8
  %84 = sext i32 %82 to i64
  %85 = getelementptr i8, ptr %83, i64 %84
  store i8 %3, ptr %85, align 1
  %86 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract)
  %87 = load ptr, ptr %16, align 8
  %88 = load ptr, ptr %87, align 8
  %89 = tail call i32 %88(ptr %.fca.1.extract)
  store i32 %89, ptr %71, align 4
  store i32 1, ptr %70, align 4
  %90 = add i32 %89, 1
  store i32 %90, ptr %69, align 4
  %91 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract)
  %92 = load ptr, ptr %16, align 8
  %93 = getelementptr i8, ptr %92, i64 8
  %94 = load ptr, ptr %93, align 8
  tail call void %94(ptr %.fca.1.extract, i32 %90)
  store ptr %.fca.0.extract, ptr %68, align 8
  store ptr %.fca.1.extract, ptr %.sroa.phi, align 8
  store ptr %.fca.2.extract, ptr %.sroa.phi64, align 8
  store i32 %offset.i.i, ptr %.sroa.phi67, align 8
  %hash_coef.i.i14 = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i15 = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i16 = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i17 = mul i64 %hash_coef.i.i14, 6499063144389013426
  %shifted.i.i.i18 = lshr i64 %product.i.i.i17, 32
  %xored.i.i.i19 = xor i64 %shifted.i.i.i18, %product.i.i.i17
  %hash.i.i.i20 = and i64 %xored.i.i.i19, %tbl_size.i.i15
  %offset_ptr.i.i21 = getelementptr i32, ptr %offset_tbl.i.i16, i64 %hash.i.i.i20
  %offset.i.i22 = load i32, ptr %offset_ptr.i.i21, align 4
  store i32 %offset.i.i22, ptr %.sroa.phi67, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %96 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %.fca.1.extract, 1
  %97 = insertvalue { ptr, ptr, ptr, i32 } %96, ptr %.fca.2.extract, 2
  %98 = insertvalue { ptr, ptr, ptr, i32 } %97, i32 %offset.i.i22, 3
  ret { ptr, ptr, ptr, i32 } %98
}

define { ptr, ptr, ptr, i32 } @String_extend_strString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %.sroa.0130 = alloca ptr, align 8
  %.sroa.1131 = alloca ptr, align 8
  %.sroa.2132 = alloca ptr, align 8
  %.sroa.3133 = alloca i32, align 8
  %8 = alloca { ptr }, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %.sroa.0129 = alloca ptr, align 8
  %.sroa.1 = alloca ptr, align 8
  %.sroa.2 = alloca ptr, align 8
  %.sroa.3 = alloca i32, align 8
  %.fca.0.extract17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract19 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract17, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract17, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract17, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 6499063144389013426
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %hash_coef_ptr.i.i39 = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i40 = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i41 = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i42 = load i64, ptr %hash_coef_ptr.i.i39, align 4
  %tbl_size.i.i43 = load i64, ptr %tbl_size_ptr.i.i40, align 4
  %offset_tbl.i.i44 = load ptr, ptr %offset_tbl_ptr.i.i41, align 8
  %product.i.i.i45 = mul i64 %hash_coef.i.i42, 6499063144389013426
  %shifted.i.i.i46 = lshr i64 %product.i.i.i45, 32
  %xored.i.i.i47 = xor i64 %shifted.i.i.i46, %product.i.i.i45
  %hash.i.i.i48 = and i64 %xored.i.i.i47, %tbl_size.i.i43
  %offset_ptr.i.i49 = getelementptr i32, ptr %offset_tbl.i.i44, i64 %hash.i.i.i48
  %offset.i.i50 = load i32, ptr %offset_ptr.i.i49, align 4
  %11 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %12 = insertvalue { ptr, ptr, ptr, i32 } %11, ptr %.fca.1.extract, 1
  %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.2.extract, 2
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, i32 %offset.i.i50, 3
  %15 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %16 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract1)
  %17 = sext i32 %offset.i.i50 to i64
  %18 = getelementptr ptr, ptr %.fca.0.extract1, i64 %17
  %19 = getelementptr i8, ptr %18, i64 56
  %20 = load ptr, ptr %19, align 8
  %21 = call ptr %20({ ptr, ptr, ptr, i32 } %14, ptr nonnull %5)
  %22 = call { ptr } %21({ ptr, ptr, ptr, i32 } %14, { ptr, ptr, ptr, i32 } %14, ptr nonnull %5)
  %.fca.0.extract = extractvalue { ptr } %22, 0
  %23 = alloca { ptr }, align 8
  store ptr %.fca.0.extract, ptr %23, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %23)
  %25 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %26 = call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract1)
  %27 = getelementptr i8, ptr %18, i64 40
  %28 = load ptr, ptr %27, align 8
  %29 = call ptr %28({ ptr, ptr, ptr, i32 } %14, ptr nonnull %5)
  %30 = call i32 %29({ ptr, ptr, ptr, i32 } %14, { ptr, ptr, ptr, i32 } %14, ptr nonnull %5)
  %31 = call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract17)
  %32 = sext i32 %offset.i.i to i64
  %33 = getelementptr ptr, ptr %.fca.0.extract17, i64 %32
  %34 = getelementptr i8, ptr %33, i64 8
  %35 = load ptr, ptr %34, align 8
  %36 = load ptr, ptr %35, align 8
  %37 = call i32 %36(ptr %.fca.1.extract19)
  %38 = add i32 %37, %30
  %39 = call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract17)
  %40 = getelementptr i8, ptr %33, i64 16
  %41 = load ptr, ptr %40, align 8
  %42 = load ptr, ptr %41, align 8
  %43 = call i32 %42(ptr %.fca.1.extract19)
  %44 = icmp slt i32 %38, %43
  %45 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract17)
  %46 = load ptr, ptr %34, align 8
  %47 = load ptr, ptr %46, align 8
  %48 = call i32 %47(ptr %.fca.1.extract19)
  br i1 %44, label %49, label %73

49:                                               ; preds = %4
  %50 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract17)
  %51 = load ptr, ptr %34, align 8
  %52 = load ptr, ptr %51, align 8
  %53 = call i32 %52(ptr %.fca.1.extract19)
  %54 = add i32 %53, %30
  %55 = icmp slt i32 %48, %54
  br i1 %55, label %.lr.ph146, label %.thread

.lr.ph146:                                        ; preds = %49
  %56 = load ptr, ptr %23, align 8
  %57 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract17)
  br label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph146, %._crit_edge
  %.reg2mem97.0144 = phi i32 [ %48, %.lr.ph146 ], [ %66, %._crit_edge ]
  %.reg2mem95.0143 = phi i32 [ 0, %.lr.ph146 ], [ %67, %._crit_edge ]
  %58 = sext i32 %.reg2mem95.0143 to i64
  %59 = getelementptr i8, ptr %56, i64 %58
  %60 = load ptr, ptr %33, align 8
  %61 = load ptr, ptr %60, align 8
  %62 = call { ptr } %61(ptr %.fca.1.extract19)
  %.fca.0.extract35 = extractvalue { ptr } %62, 0
  %63 = sext i32 %.reg2mem97.0144 to i64
  %64 = getelementptr i8, ptr %.fca.0.extract35, i64 %63
  %65 = load i8, ptr %59, align 1
  store i8 %65, ptr %64, align 1
  %66 = add nsw i32 %.reg2mem97.0144, 1
  %67 = add i32 %.reg2mem95.0143, 1
  %68 = load ptr, ptr %34, align 8
  %69 = load ptr, ptr %68, align 8
  %70 = call i32 %69(ptr %.fca.1.extract19)
  %71 = add i32 %70, %30
  %72 = icmp slt i32 %66, %71
  br i1 %72, label %._crit_edge, label %.thread

73:                                               ; preds = %4
  %74 = add i32 %48, %30
  %75 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract17)
  %76 = load ptr, ptr %40, align 8
  %77 = getelementptr i8, ptr %76, i64 8
  %78 = load ptr, ptr %77, align 8
  call void %78(ptr %.fca.1.extract19, i32 %74)
  %79 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract17)
  %80 = load ptr, ptr %33, align 8
  %81 = load ptr, ptr %80, align 8
  %82 = call { ptr } %81(ptr %.fca.1.extract19)
  %.fca.0.extract32 = extractvalue { ptr } %82, 0
  store ptr %.fca.0.extract32, ptr %8, align 8
  %83 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %8)
  %84 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract17)
  %85 = load ptr, ptr %40, align 8
  %86 = load ptr, ptr %85, align 8
  %87 = call i32 %86(ptr %.fca.1.extract19)
  %88 = sext i32 %87 to i64
  %result.i = call noalias ptr @bump_malloc_inner(i64 noundef %88, ptr nonnull @current_ptr) #29
  %89 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract17)
  %90 = load ptr, ptr %33, align 8
  %91 = getelementptr i8, ptr %90, i64 8
  %92 = load ptr, ptr %91, align 8
  %93 = insertvalue { ptr } undef, ptr %result.i, 0
  call void %92(ptr %.fca.1.extract19, { ptr } %93)
  %94 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract17)
  %95 = load ptr, ptr %34, align 8
  %96 = load ptr, ptr %95, align 8
  %97 = call i32 %96(ptr %.fca.1.extract19)
  %98 = add i32 %97, %30
  %99 = icmp sgt i32 %98, 0
  br i1 %99, label %.lr.ph, label %.thread

.lr.ph:                                           ; preds = %73
  %100 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract17)
  %101 = load ptr, ptr %23, align 8
  %102 = load ptr, ptr %8, align 8
  br label %103

103:                                              ; preds = %.lr.ph, %._crit_edge1
  %.reg2mem89.0141 = phi i32 [ 0, %.lr.ph ], [ %.reg2mem85.0, %._crit_edge1 ]
  %.reg2mem87.0140 = phi i32 [ 0, %.lr.ph ], [ %.reg2mem83.0, %._crit_edge1 ]
  %104 = load ptr, ptr %34, align 8
  %105 = load ptr, ptr %104, align 8
  %106 = call i32 %105(ptr %.fca.1.extract19)
  %107 = icmp slt i32 %.reg2mem89.0141, %106
  %108 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract17)
  %109 = load ptr, ptr %33, align 8
  %110 = load ptr, ptr %109, align 8
  %111 = call { ptr } %110(ptr %.fca.1.extract19)
  %.fca.0.extract28 = extractvalue { ptr } %111, 0
  br i1 %107, label %112, label %117

112:                                              ; preds = %103
  %113 = zext nneg i32 %.reg2mem89.0141 to i64
  %114 = getelementptr i8, ptr %102, i64 %113
  %115 = getelementptr i8, ptr %.fca.0.extract28, i64 %113
  %116 = load i8, ptr %114, align 1
  store i8 %116, ptr %115, align 1
  br label %._crit_edge1

117:                                              ; preds = %103
  %118 = sext i32 %.reg2mem87.0140 to i64
  %119 = getelementptr i8, ptr %101, i64 %118
  %120 = zext nneg i32 %.reg2mem89.0141 to i64
  %121 = getelementptr i8, ptr %.fca.0.extract28, i64 %120
  %122 = load i8, ptr %119, align 1
  store i8 %122, ptr %121, align 1
  %123 = add i32 %.reg2mem87.0140, 1
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %112, %117
  %.reg2mem83.0 = phi i32 [ %.reg2mem87.0140, %112 ], [ %123, %117 ]
  %.reg2mem85.0 = add nuw nsw i32 %.reg2mem89.0141, 1
  %124 = load ptr, ptr %34, align 8
  %125 = load ptr, ptr %124, align 8
  %126 = call i32 %125(ptr %.fca.1.extract19)
  %127 = add i32 %126, %30
  %128 = icmp slt i32 %.reg2mem85.0, %127
  br i1 %128, label %103, label %.thread

.thread:                                          ; preds = %._crit_edge1, %._crit_edge, %73, %49
  %.sroa.phi = phi ptr [ %.sroa.1131, %49 ], [ %.sroa.1, %73 ], [ %.sroa.1131, %._crit_edge ], [ %.sroa.1, %._crit_edge1 ]
  %.sroa.phi120 = phi ptr [ %.sroa.2132, %49 ], [ %.sroa.2, %73 ], [ %.sroa.2132, %._crit_edge ], [ %.sroa.2, %._crit_edge1 ]
  %.sroa.phi123 = phi ptr [ %.sroa.3133, %49 ], [ %.sroa.3, %73 ], [ %.sroa.3133, %._crit_edge ], [ %.sroa.3, %._crit_edge1 ]
  %129 = phi ptr [ %.sroa.0130, %49 ], [ %.sroa.0129, %73 ], [ %.sroa.0130, %._crit_edge ], [ %.sroa.0129, %._crit_edge1 ]
  %130 = phi ptr [ %7, %49 ], [ %10, %73 ], [ %7, %._crit_edge ], [ %10, %._crit_edge1 ]
  %131 = phi ptr [ %6, %49 ], [ %9, %73 ], [ %6, %._crit_edge ], [ %9, %._crit_edge1 ]
  %.fca.2.extract21 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %132 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract17)
  %133 = load ptr, ptr %34, align 8
  %134 = load ptr, ptr %133, align 8
  %135 = call i32 %134(ptr %.fca.1.extract19)
  store i32 %135, ptr %131, align 4
  %136 = add i32 %135, %30
  store i32 %136, ptr %130, align 4
  %137 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract17)
  %138 = load ptr, ptr %34, align 8
  %139 = getelementptr i8, ptr %138, i64 8
  %140 = load ptr, ptr %139, align 8
  call void %140(ptr %.fca.1.extract19, i32 %136)
  store ptr %.fca.0.extract17, ptr %129, align 8
  store ptr %.fca.1.extract19, ptr %.sroa.phi, align 8
  store ptr %.fca.2.extract21, ptr %.sroa.phi120, align 8
  store i32 %offset.i.i, ptr %.sroa.phi123, align 8
  %hash_coef.i.i56 = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i57 = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i58 = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i59 = mul i64 %hash_coef.i.i56, 6499063144389013426
  %shifted.i.i.i60 = lshr i64 %product.i.i.i59, 32
  %xored.i.i.i61 = xor i64 %shifted.i.i.i60, %product.i.i.i59
  %hash.i.i.i62 = and i64 %xored.i.i.i61, %tbl_size.i.i57
  %offset_ptr.i.i63 = getelementptr i32, ptr %offset_tbl.i.i58, i64 %hash.i.i.i62
  %offset.i.i64 = load i32, ptr %offset_ptr.i.i63, align 4
  store i32 %offset.i.i64, ptr %.sroa.phi123, align 8
  %141 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract17, 0
  %142 = insertvalue { ptr, ptr, ptr, i32 } %141, ptr %.fca.1.extract19, 1
  %143 = insertvalue { ptr, ptr, ptr, i32 } %142, ptr %.fca.2.extract21, 2
  %144 = insertvalue { ptr, ptr, ptr, i32 } %143, i32 %offset.i.i64, 3
  ret { ptr, ptr, ptr, i32 } %144
}

define i8 @String__index_xPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 6499063144389013426
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %5 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract, i64 %6
  %8 = getelementptr i8, ptr %7, i64 8
  %9 = load ptr, ptr %8, align 8
  %10 = load ptr, ptr %9, align 8
  %11 = tail call i32 %10(ptr %.fca.1.extract)
  %12 = add i32 %11, -1
  %13 = icmp sgt i32 %3, %12
  br i1 %13, label %14, label %._crit_edge

14:                                               ; preds = %4
  %current_coroutine.i = load ptr, ptr @current_coroutine, align 8
  %into_callee_buf.i = getelementptr i8, ptr %current_coroutine.i, i64 8
  tail call preserve_nonecc void @context_switch(ptr nocapture writeonly %into_callee_buf.i, ptr nonnull @into_caller_buf) #32
  br label %._crit_edge

._crit_edge:                                      ; preds = %4, %14
  %15 = icmp sgt i32 %3, -1
  %16 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract)
  br i1 %15, label %17, label %23

17:                                               ; preds = %._crit_edge
  %18 = load ptr, ptr %7, align 8
  %19 = load ptr, ptr %18, align 8
  %20 = tail call { ptr } %19(ptr %.fca.1.extract)
  %.fca.0.extract3 = extractvalue { ptr } %20, 0
  %21 = zext nneg i32 %3 to i64
  %22 = getelementptr i8, ptr %.fca.0.extract3, i64 %21
  br label %41

23:                                               ; preds = %._crit_edge
  %24 = load ptr, ptr %8, align 8
  %25 = load ptr, ptr %24, align 8
  %26 = tail call i32 %25(ptr %.fca.1.extract)
  %27 = add i32 %26, %3
  %28 = icmp slt i32 %27, 0
  br i1 %28, label %29, label %._crit_edge1

29:                                               ; preds = %23
  %current_coroutine.i6 = load ptr, ptr @current_coroutine, align 8
  %into_callee_buf.i7 = getelementptr i8, ptr %current_coroutine.i6, i64 8
  tail call preserve_nonecc void @context_switch(ptr nocapture writeonly %into_callee_buf.i7, ptr nonnull @into_caller_buf) #32
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %23, %29
  %30 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract)
  %31 = load ptr, ptr %7, align 8
  %32 = load ptr, ptr %31, align 8
  %33 = tail call { ptr } %32(ptr %.fca.1.extract)
  %.fca.0.extract1 = extractvalue { ptr } %33, 0
  %34 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract)
  %35 = load ptr, ptr %8, align 8
  %36 = load ptr, ptr %35, align 8
  %37 = tail call i32 %36(ptr %.fca.1.extract)
  %38 = add i32 %37, %3
  %39 = sext i32 %38 to i64
  %40 = getelementptr i8, ptr %.fca.0.extract1, i64 %39
  br label %41

41:                                               ; preds = %._crit_edge1, %17
  %.reg2mem6.0.in = phi ptr [ %22, %17 ], [ %40, %._crit_edge1 ]
  %.reg2mem6.0 = load i8, ptr %.reg2mem6.0.in, align 1
  ret i8 %.reg2mem6.0
}

define noundef i1 @String__EQ_otherString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca i1, align 1
  %7 = alloca i1, align 1
  %8 = alloca i1, align 1
  %.fca.0.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract7 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract5, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract5, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract5, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 6499063144389013426
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %hash_coef_ptr.i.i20 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i21 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i22 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i23 = load i64, ptr %hash_coef_ptr.i.i20, align 4
  %tbl_size.i.i24 = load i64, ptr %tbl_size_ptr.i.i21, align 4
  %offset_tbl.i.i25 = load ptr, ptr %offset_tbl_ptr.i.i22, align 8
  %product.i.i.i26 = mul i64 %hash_coef.i.i23, 6499063144389013426
  %shifted.i.i.i27 = lshr i64 %product.i.i.i26, 32
  %xored.i.i.i28 = xor i64 %shifted.i.i.i27, %product.i.i.i26
  %hash.i.i.i29 = and i64 %xored.i.i.i28, %tbl_size.i.i24
  %offset_ptr.i.i30 = getelementptr i32, ptr %offset_tbl.i.i25, i64 %hash.i.i.i29
  %offset.i.i31 = load i32, ptr %offset_ptr.i.i30, align 4
  %9 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract5)
  %10 = sext i32 %offset.i.i to i64
  %11 = getelementptr ptr, ptr %.fca.0.extract5, i64 %10
  %12 = getelementptr i8, ptr %11, i64 8
  %13 = load ptr, ptr %12, align 8
  %14 = load ptr, ptr %13, align 8
  %15 = tail call i32 %14(ptr %.fca.1.extract7)
  %16 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %17 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %.fca.1.extract, 1
  %18 = insertvalue { ptr, ptr, ptr, i32 } %17, ptr %.fca.2.extract, 2
  %19 = insertvalue { ptr, ptr, ptr, i32 } %18, i32 %offset.i.i31, 3
  %20 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %21 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract)
  %22 = sext i32 %offset.i.i31 to i64
  %23 = getelementptr ptr, ptr %.fca.0.extract, i64 %22
  %24 = getelementptr i8, ptr %23, i64 40
  %25 = load ptr, ptr %24, align 8
  %26 = call ptr %25({ ptr, ptr, ptr, i32 } %19, ptr nonnull %5)
  %27 = call i32 %26({ ptr, ptr, ptr, i32 } %19, { ptr, ptr, ptr, i32 } %19, ptr nonnull %5)
  %.not = icmp eq i32 %15, %27
  br i1 %.not, label %.preheader, label %.thread

.preheader:                                       ; preds = %4
  %28 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract5)
  %29 = getelementptr i8, ptr %23, i64 56
  br label %30

30:                                               ; preds = %.preheader, %34
  %.reg2mem44.0 = phi i32 [ %49, %34 ], [ 0, %.preheader ]
  %31 = load ptr, ptr %12, align 8
  %32 = load ptr, ptr %31, align 8
  %33 = call i32 %32(ptr %.fca.1.extract7)
  %.not50 = icmp sge i32 %.reg2mem44.0, %33
  br i1 %.not50, label %.thread, label %34

34:                                               ; preds = %30
  %35 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract5)
  %36 = load ptr, ptr %11, align 8
  %37 = load ptr, ptr %36, align 8
  %38 = call { ptr } %37(ptr %.fca.1.extract7)
  %.fca.0.extract15 = extractvalue { ptr } %38, 0
  %39 = zext nneg i32 %.reg2mem44.0 to i64
  %40 = getelementptr i8, ptr %.fca.0.extract15, i64 %39
  %41 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %42 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract)
  %43 = load ptr, ptr %29, align 8
  %44 = call ptr %43({ ptr, ptr, ptr, i32 } %19, ptr nonnull %5)
  %45 = call { ptr } %44({ ptr, ptr, ptr, i32 } %19, { ptr, ptr, ptr, i32 } %19, ptr nonnull %5)
  %.fca.0.extract13 = extractvalue { ptr } %45, 0
  %46 = getelementptr i8, ptr %.fca.0.extract13, i64 %39
  %47 = load i8, ptr %40, align 1
  %48 = load i8, ptr %46, align 1
  %.not18 = icmp eq i8 %47, %48
  %49 = add nuw nsw i32 %.reg2mem44.0, 1
  br i1 %.not18, label %30, label %.thread

.thread:                                          ; preds = %34, %30, %4
  %.reg2mem34.0 = phi i1 [ false, %4 ], [ %.not50, %30 ], [ %.not50, %34 ]
  %.reg2mem32.0 = phi ptr [ %6, %4 ], [ %7, %34 ], [ %8, %30 ]
  store i1 %.reg2mem34.0, ptr %.reg2mem32.0, align 1
  ret i1 %.reg2mem34.0
}

define { ptr, i8 } @String_pop_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 6499063144389013426
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %4 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract3)
  %5 = sext i32 %offset.i.i to i64
  %6 = getelementptr ptr, ptr %.fca.0.extract3, i64 %5
  %7 = getelementptr i8, ptr %6, i64 8
  %8 = load ptr, ptr %7, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = tail call i32 %9(ptr %.fca.1.extract4)
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %33, label %12

12:                                               ; preds = %3
  %13 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract3)
  %14 = load ptr, ptr %7, align 8
  %15 = load ptr, ptr %14, align 8
  %16 = tail call i32 %15(ptr %.fca.1.extract4)
  %17 = add i32 %16, -1
  %18 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract3)
  %19 = load ptr, ptr %7, align 8
  %20 = getelementptr i8, ptr %19, i64 8
  %21 = load ptr, ptr %20, align 8
  tail call void %21(ptr %.fca.1.extract4, i32 %17)
  %22 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract3)
  %23 = load ptr, ptr %6, align 8
  %24 = load ptr, ptr %23, align 8
  %25 = tail call { ptr } %24(ptr %.fca.1.extract4)
  %.fca.0.extract5 = extractvalue { ptr } %25, 0
  %26 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract3)
  %27 = load ptr, ptr %7, align 8
  %28 = load ptr, ptr %27, align 8
  %29 = tail call i32 %28(ptr %.fca.1.extract4)
  %30 = sext i32 %29 to i64
  %31 = getelementptr i8, ptr %.fca.0.extract5, i64 %30
  %32 = load i8, ptr %31, align 1
  br label %33

33:                                               ; preds = %3, %12
  %.reg2mem5.sroa.3.0 = phi i8 [ %32, %12 ], [ undef, %3 ]
  %.reg2mem5.sroa.0.0 = phi ptr [ @i8_typ, %12 ], [ @nil_typ, %3 ]
  %.reload6.fca.0.insert = insertvalue { ptr, i8 } poison, ptr %.reg2mem5.sroa.0.0, 0
  %.reload6.fca.1.insert = insertvalue { ptr, i8 } %.reload6.fca.0.insert, i8 %.reg2mem5.sroa.3.0, 1
  ret { ptr, i8 } %.reload6.fca.1.insert
}

define { ptr, ptr, ptr, i32 } @String_copy_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 6499063144389013426
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %4 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract)
  %5 = sext i32 %offset.i.i to i64
  %6 = getelementptr ptr, ptr %.fca.0.extract, i64 %5
  %7 = getelementptr i8, ptr %6, i64 8
  %8 = load ptr, ptr %7, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = tail call i32 %9(ptr %.fca.1.extract)
  %11 = sext i32 %10 to i64
  %result.i = tail call noalias ptr @bump_malloc_inner(i64 noundef %11, ptr nonnull @current_ptr) #29
  %12 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract)
  %13 = load ptr, ptr %7, align 8
  %14 = load ptr, ptr %13, align 8
  %15 = tail call i32 %14(ptr %.fca.1.extract)
  %16 = icmp sgt i32 %15, 0
  br i1 %16, label %.lr.ph, label %._crit_edge._crit_edge

.lr.ph:                                           ; preds = %3
  %17 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract)
  br label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph, %._crit_edge
  %.reg2mem17.061 = phi i32 [ 0, %.lr.ph ], [ %25, %._crit_edge ]
  %18 = load ptr, ptr %6, align 8
  %19 = load ptr, ptr %18, align 8
  %20 = tail call { ptr } %19(ptr %.fca.1.extract)
  %.fca.0.extract4 = extractvalue { ptr } %20, 0
  %21 = zext nneg i32 %.reg2mem17.061 to i64
  %22 = getelementptr i8, ptr %.fca.0.extract4, i64 %21
  %23 = getelementptr i8, ptr %result.i, i64 %21
  %24 = load i8, ptr %22, align 1
  store i8 %24, ptr %23, align 1
  %25 = add nuw nsw i32 %.reg2mem17.061, 1
  %26 = load ptr, ptr %7, align 8
  %27 = load ptr, ptr %26, align 8
  %28 = tail call i32 %27(ptr %.fca.1.extract)
  %29 = icmp slt i32 %25, %28
  br i1 %29, label %._crit_edge, label %._crit_edge._crit_edge

._crit_edge._crit_edge:                           ; preds = %._crit_edge, %3
  %30 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract)
  %31 = load ptr, ptr %7, align 8
  %32 = load ptr, ptr %31, align 8
  %33 = tail call i32 %32(ptr %.fca.1.extract)
  %34 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract)
  %35 = load ptr, ptr %7, align 8
  %36 = load ptr, ptr %35, align 8
  %37 = tail call i32 %36(ptr %.fca.1.extract)
  %result.i7 = tail call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %38 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract)
  %39 = load ptr, ptr %7, align 8
  %40 = load ptr, ptr %39, align 8
  %41 = tail call i32 %40(ptr %.fca.1.extract)
  %42 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract)
  %43 = load ptr, ptr %7, align 8
  %44 = load ptr, ptr %43, align 8
  %45 = tail call i32 %44(ptr %.fca.1.extract)
  %46 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %result.i7, 1
  %47 = insertvalue { ptr, ptr, ptr, i32 } %46, ptr undef, 2
  %48 = insertvalue { ptr, ptr, ptr, i32 } %47, i32 9, 3
  store ptr %result.i, ptr %result.i7, align 8
  %49 = getelementptr i8, ptr %result.i7, i64 8
  store i32 %41, ptr %49, align 4
  %50 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %51 = getelementptr i8, ptr %result.i7, i64 12
  store i32 %45, ptr %51, align 4
  ret { ptr, ptr, ptr, i32 } %48
}

define { ptr } @String_c_string_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 6499063144389013426
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %4 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract)
  %5 = sext i32 %offset.i.i to i64
  %6 = getelementptr ptr, ptr %.fca.0.extract, i64 %5
  %7 = getelementptr i8, ptr %6, i64 8
  %8 = load ptr, ptr %7, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = tail call i32 %9(ptr %.fca.1.extract)
  %11 = add i32 %10, 1
  %12 = sext i32 %11 to i64
  %result.i = tail call noalias ptr @bump_malloc_inner(i64 noundef %12, ptr nonnull @current_ptr) #29
  %13 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract)
  %14 = load ptr, ptr %7, align 8
  %15 = load ptr, ptr %14, align 8
  %16 = tail call i32 %15(ptr %.fca.1.extract)
  %17 = icmp sgt i32 %16, 0
  br i1 %17, label %.lr.ph, label %._crit_edge._crit_edge

.lr.ph:                                           ; preds = %3
  %18 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract)
  br label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph, %._crit_edge
  %.reg2mem17.017 = phi i32 [ 0, %.lr.ph ], [ %26, %._crit_edge ]
  %19 = load ptr, ptr %6, align 8
  %20 = load ptr, ptr %19, align 8
  %21 = tail call { ptr } %20(ptr %.fca.1.extract)
  %.fca.0.extract4 = extractvalue { ptr } %21, 0
  %22 = zext nneg i32 %.reg2mem17.017 to i64
  %23 = getelementptr i8, ptr %.fca.0.extract4, i64 %22
  %24 = getelementptr i8, ptr %result.i, i64 %22
  %25 = load i8, ptr %23, align 1
  store i8 %25, ptr %24, align 1
  %26 = add nuw nsw i32 %.reg2mem17.017, 1
  %27 = load ptr, ptr %7, align 8
  %28 = load ptr, ptr %27, align 8
  %29 = tail call i32 %28(ptr %.fca.1.extract)
  %30 = icmp slt i32 %26, %29
  br i1 %30, label %._crit_edge, label %._crit_edge._crit_edge

._crit_edge._crit_edge:                           ; preds = %._crit_edge, %3
  %31 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract)
  %32 = load ptr, ptr %7, align 8
  %33 = load ptr, ptr %32, align 8
  %34 = tail call i32 %33(ptr %.fca.1.extract)
  %35 = sext i32 %34 to i64
  %36 = getelementptr i8, ptr %result.i, i64 %35
  store i8 0, ptr %36, align 1
  %37 = insertvalue { ptr } undef, ptr %result.i, 0
  ret { ptr } %37
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(readwrite, argmem: read, inaccessiblemem: none)
define { ptr, ptr, ptr, i32 } @String_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) #8 {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %result.i = tail call noalias dereferenceable_or_null(40) ptr @bump_malloc_inner(i64 noundef 40, ptr nonnull @current_ptr) #29
  %4 = insertvalue { ptr, ptr, ptr, i32 } { ptr @StringIterator, ptr undef, ptr undef, i32 undef }, ptr %result.i, 1
  %5 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr undef, 2
  %6 = tail call ptr @llvm.invariant.start.p0(i64 48, ptr nonnull @StringIterator)
  %hash_coef.i.i45 = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i46 = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i47 = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i48 = mul i64 %hash_coef.i.i45, 6499063144389013426
  %shifted.i.i.i49 = lshr i64 %product.i.i.i48, 32
  %xored.i.i.i50 = xor i64 %shifted.i.i.i49, %product.i.i.i48
  %hash.i.i.i51 = and i64 %xored.i.i.i50, %tbl_size.i.i46
  %offset_ptr.i.i52 = getelementptr i32, ptr %offset_tbl.i.i47, i64 %hash.i.i.i51
  %offset.i.i = load i32, ptr %offset_ptr.i.i52, align 4
  store ptr %.fca.0.extract, ptr %result.i, align 8
  %7 = getelementptr i8, ptr %result.i, i64 8
  store ptr %.fca.1.extract, ptr %7, align 8
  %8 = getelementptr i8, ptr %result.i, i64 16
  store ptr %.fca.2.extract, ptr %8, align 8
  %9 = getelementptr i8, ptr %result.i, i64 24
  store i32 %offset.i.i, ptr %9, align 4
  %10 = tail call ptr @llvm.invariant.start.p0(i64 48, ptr nonnull @StringIterator)
  %11 = insertvalue { ptr, ptr, ptr, i32 } %5, i32 15, 3
  ret { ptr, ptr, ptr, i32 } %11
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, inaccessiblemem: none)
define { ptr, ptr, ptr, i32 } @String_repr_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) #9 {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 6499063144389013426
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i13 = load i32, ptr %offset_ptr.i.i, align 4
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %5 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %.fca.1.extract, 1
  %6 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %.fca.2.extract, 2
  %7 = insertvalue { ptr, ptr, ptr, i32 } %6, i32 %offset.i.i13, 3
  ret { ptr, ptr, ptr, i32 } %7
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_StringIterator(ptr nocapture readnone %0) #5 {
  ret { i64, i64 } { i64 40, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @StringIterator_B_init_strString({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 104
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @StringIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 112
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @StringIterator_init_strString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -7260570988945952630
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %hash_coef_ptr.i.i10 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i11 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i12 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i13 = load i64, ptr %hash_coef_ptr.i.i10, align 4
  %tbl_size.i.i14 = load i64, ptr %tbl_size_ptr.i.i11, align 4
  %offset_tbl.i.i15 = load ptr, ptr %offset_tbl_ptr.i.i12, align 8
  %product.i.i.i16 = mul i64 %hash_coef.i.i13, 6499063144389013426
  %shifted.i.i.i17 = lshr i64 %product.i.i.i16, 32
  %xored.i.i.i18 = xor i64 %shifted.i.i.i17, %product.i.i.i16
  %hash.i.i.i19 = and i64 %xored.i.i.i18, %tbl_size.i.i14
  %offset_ptr.i.i20 = getelementptr i32, ptr %offset_tbl.i.i15, i64 %hash.i.i.i19
  %offset.i.i35 = load i32, ptr %offset_ptr.i.i20, align 4
  %5 = tail call ptr @llvm.invariant.start.p0(i64 48, ptr %.fca.0.extract1)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract1, i64 %6
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr i8, ptr %8, i64 8
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %12 = insertvalue { ptr, ptr, ptr, i32 } %11, ptr %.fca.1.extract, 1
  %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.2.extract, 2
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, i32 %offset.i.i35, 3
  tail call void %10(ptr %.fca.1.extract3, { ptr, ptr, ptr, i32 } %14)
  %15 = tail call ptr @llvm.invariant.start.p0(i64 48, ptr %.fca.0.extract1)
  %16 = getelementptr i8, ptr %7, i64 8
  %17 = load ptr, ptr %16, align 8
  %18 = getelementptr i8, ptr %17, i64 8
  %19 = load ptr, ptr %18, align 8
  tail call void %19(ptr %.fca.1.extract3, i32 0)
  ret void
}

define { ptr, i160 } @StringIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = alloca [1 x ptr], align 8
  %7 = alloca { ptr }, align 8
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -7260570988945952630
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %8 = tail call ptr @llvm.invariant.start.p0(i64 48, ptr %.fca.0.extract9)
  %9 = sext i32 %offset.i.i to i64
  %10 = getelementptr ptr, ptr %.fca.0.extract9, i64 %9
  %11 = getelementptr i8, ptr %10, i64 8
  %12 = load ptr, ptr %11, align 8
  %13 = load ptr, ptr %12, align 8
  %14 = tail call i32 %13(ptr %.fca.1.extract11)
  %15 = tail call ptr @llvm.invariant.start.p0(i64 48, ptr %.fca.0.extract9)
  %16 = load ptr, ptr %10, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = tail call { ptr, ptr, ptr, i32 } %17(ptr %.fca.1.extract11)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %18, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %18, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %18, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %18, 3
  %hash_coef_ptr.i.i37 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i38 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i39 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i40 = load i64, ptr %hash_coef_ptr.i.i37, align 4
  %tbl_size.i.i41 = load i64, ptr %tbl_size_ptr.i.i38, align 4
  %offset_tbl.i.i42 = load ptr, ptr %offset_tbl_ptr.i.i39, align 8
  %product.i.i.i43 = mul i64 %hash_coef.i.i40, 6499063144389013426
  %shifted.i.i.i44 = lshr i64 %product.i.i.i43, 32
  %xored.i.i.i45 = xor i64 %shifted.i.i.i44, %product.i.i.i43
  %hash.i.i.i46 = and i64 %xored.i.i.i45, %tbl_size.i.i41
  %offset_ptr.i.i47 = getelementptr i32, ptr %offset_tbl.i.i42, i64 %hash.i.i.i46
  %offset.i.i48 = load i32, ptr %offset_ptr.i.i47, align 4
  %eq.i = icmp eq i32 %.fca.3.extract, %offset.i.i48
  tail call void @llvm.assume(i1 %eq.i) #30
  %19 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %20 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %.fca.1.extract, 1
  %21 = insertvalue { ptr, ptr, ptr, i32 } %20, ptr %.fca.2.extract, 2
  %22 = insertvalue { ptr, ptr, ptr, i32 } %21, i32 %.fca.3.extract, 3
  %23 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %24 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract)
  %25 = sext i32 %.fca.3.extract to i64
  %26 = getelementptr ptr, ptr %.fca.0.extract, i64 %25
  %27 = getelementptr i8, ptr %26, i64 40
  %28 = load ptr, ptr %27, align 8
  %29 = call ptr %28({ ptr, ptr, ptr, i32 } %22, ptr nonnull %4)
  %30 = call i32 %29({ ptr, ptr, ptr, i32 } %22, { ptr, ptr, ptr, i32 } %22, ptr nonnull %4)
  %31 = icmp slt i32 %14, %30
  br i1 %31, label %32, label %106

32:                                               ; preds = %3
  %33 = call ptr @llvm.invariant.start.p0(i64 48, ptr nonnull %.fca.0.extract9)
  %34 = load ptr, ptr %11, align 8
  %35 = load ptr, ptr %34, align 8
  %36 = call i32 %35(ptr %.fca.1.extract11)
  %37 = add i32 %36, 1
  %38 = call ptr @llvm.invariant.start.p0(i64 48, ptr nonnull %.fca.0.extract9)
  %39 = load ptr, ptr %11, align 8
  %40 = getelementptr i8, ptr %39, i64 8
  %41 = load ptr, ptr %40, align 8
  call void %41(ptr %.fca.1.extract11, i32 %37)
  %42 = call ptr @llvm.invariant.start.p0(i64 48, ptr nonnull %.fca.0.extract9)
  %43 = load ptr, ptr %10, align 8
  %44 = load ptr, ptr %43, align 8
  %45 = call { ptr, ptr, ptr, i32 } %44(ptr %.fca.1.extract11)
  %.fca.0.extract28 = extractvalue { ptr, ptr, ptr, i32 } %45, 0
  %.fca.1.extract30 = extractvalue { ptr, ptr, ptr, i32 } %45, 1
  %.fca.2.extract32 = extractvalue { ptr, ptr, ptr, i32 } %45, 2
  %.fca.3.extract34 = extractvalue { ptr, ptr, ptr, i32 } %45, 3
  %hash_coef_ptr.i.i51 = getelementptr i8, ptr %.fca.0.extract28, i64 8
  %tbl_size_ptr.i.i52 = getelementptr i8, ptr %.fca.0.extract28, i64 16
  %offset_tbl_ptr.i.i53 = getelementptr i8, ptr %.fca.0.extract28, i64 40
  %hash_coef.i.i54 = load i64, ptr %hash_coef_ptr.i.i51, align 4
  %tbl_size.i.i55 = load i64, ptr %tbl_size_ptr.i.i52, align 4
  %offset_tbl.i.i56 = load ptr, ptr %offset_tbl_ptr.i.i53, align 8
  %product.i.i.i57 = mul i64 %hash_coef.i.i54, 6499063144389013426
  %shifted.i.i.i58 = lshr i64 %product.i.i.i57, 32
  %xored.i.i.i59 = xor i64 %shifted.i.i.i58, %product.i.i.i57
  %hash.i.i.i60 = and i64 %xored.i.i.i59, %tbl_size.i.i55
  %offset_ptr.i.i61 = getelementptr i32, ptr %offset_tbl.i.i56, i64 %hash.i.i.i60
  %offset.i.i62 = load i32, ptr %offset_ptr.i.i61, align 4
  %eq.i65 = icmp eq i32 %.fca.3.extract34, %offset.i.i62
  call void @llvm.assume(i1 %eq.i65) #30
  %46 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract28, 0
  %47 = insertvalue { ptr, ptr, ptr, i32 } %46, ptr %.fca.1.extract30, 1
  %48 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %.fca.2.extract32, 2
  %49 = insertvalue { ptr, ptr, ptr, i32 } %48, i32 %.fca.3.extract34, 3
  %50 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %51 = call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract28)
  %52 = sext i32 %.fca.3.extract34 to i64
  %53 = getelementptr ptr, ptr %.fca.0.extract28, i64 %52
  %54 = getelementptr i8, ptr %53, i64 56
  %55 = load ptr, ptr %54, align 8
  %56 = call ptr %55({ ptr, ptr, ptr, i32 } %49, ptr nonnull %4)
  %57 = call { ptr } %56({ ptr, ptr, ptr, i32 } %49, { ptr, ptr, ptr, i32 } %49, ptr nonnull %4)
  %58 = call ptr @llvm.invariant.start.p0(i64 48, ptr nonnull %.fca.0.extract9)
  %59 = load ptr, ptr %11, align 8
  %60 = load ptr, ptr %59, align 8
  %61 = call i32 %60(ptr %.fca.1.extract11)
  %result.i = call noalias dereferenceable_or_null(1) ptr @bump_malloc_inner(i64 noundef 1, ptr nonnull @current_ptr) #29
  %62 = getelementptr inbounds i8, ptr %5, i64 8
  %63 = getelementptr inbounds i8, ptr %5, i64 24
  store ptr @Character, ptr %5, align 8
  store ptr %result.i, ptr %62, align 8
  store i32 9, ptr %63, align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %5)
  %65 = call ptr @llvm.invariant.start.p0(i64 48, ptr nonnull %.fca.0.extract9)
  %66 = load ptr, ptr %10, align 8
  %67 = load ptr, ptr %66, align 8
  %68 = call { ptr, ptr, ptr, i32 } %67(ptr %.fca.1.extract11)
  %.fca.0.extract20 = extractvalue { ptr, ptr, ptr, i32 } %68, 0
  %.fca.1.extract22 = extractvalue { ptr, ptr, ptr, i32 } %68, 1
  %.fca.2.extract24 = extractvalue { ptr, ptr, ptr, i32 } %68, 2
  %.fca.3.extract26 = extractvalue { ptr, ptr, ptr, i32 } %68, 3
  %hash_coef_ptr.i.i67 = getelementptr i8, ptr %.fca.0.extract20, i64 8
  %tbl_size_ptr.i.i68 = getelementptr i8, ptr %.fca.0.extract20, i64 16
  %offset_tbl_ptr.i.i69 = getelementptr i8, ptr %.fca.0.extract20, i64 40
  %hash_coef.i.i70 = load i64, ptr %hash_coef_ptr.i.i67, align 4
  %tbl_size.i.i71 = load i64, ptr %tbl_size_ptr.i.i68, align 4
  %offset_tbl.i.i72 = load ptr, ptr %offset_tbl_ptr.i.i69, align 8
  %product.i.i.i73 = mul i64 %hash_coef.i.i70, 6499063144389013426
  %shifted.i.i.i74 = lshr i64 %product.i.i.i73, 32
  %xored.i.i.i75 = xor i64 %shifted.i.i.i74, %product.i.i.i73
  %hash.i.i.i76 = and i64 %xored.i.i.i75, %tbl_size.i.i71
  %offset_ptr.i.i77 = getelementptr i32, ptr %offset_tbl.i.i72, i64 %hash.i.i.i76
  %offset.i.i78 = load i32, ptr %offset_ptr.i.i77, align 4
  %eq.i81 = icmp eq i32 %.fca.3.extract26, %offset.i.i78
  call void @llvm.assume(i1 %eq.i81) #30
  %69 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract20, 0
  %70 = insertvalue { ptr, ptr, ptr, i32 } %69, ptr %.fca.1.extract22, 1
  %71 = insertvalue { ptr, ptr, ptr, i32 } %70, ptr %.fca.2.extract24, 2
  %72 = insertvalue { ptr, ptr, ptr, i32 } %71, i32 %.fca.3.extract26, 3
  %73 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %74 = call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract20)
  %75 = sext i32 %.fca.3.extract26 to i64
  %76 = getelementptr ptr, ptr %.fca.0.extract20, i64 %75
  %77 = getelementptr i8, ptr %76, i64 56
  %78 = load ptr, ptr %77, align 8
  %79 = call ptr %78({ ptr, ptr, ptr, i32 } %72, ptr nonnull %4)
  %80 = call { ptr } %79({ ptr, ptr, ptr, i32 } %72, { ptr, ptr, ptr, i32 } %72, ptr nonnull %4)
  %.fca.0.extract17 = extractvalue { ptr } %80, 0
  %81 = call ptr @llvm.invariant.start.p0(i64 48, ptr nonnull %.fca.0.extract9)
  %82 = load ptr, ptr %11, align 8
  %83 = load ptr, ptr %82, align 8
  %84 = call i32 %83(ptr %.fca.1.extract11)
  %85 = add i32 %84, -1
  %86 = sext i32 %85 to i64
  %87 = getelementptr i8, ptr %.fca.0.extract17, i64 %86
  %88 = load i8, ptr %87, align 1
  %89 = load ptr, ptr %5, align 8
  %90 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %89, 0
  %91 = load ptr, ptr %62, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } %90, ptr %91, 1
  %93 = getelementptr inbounds i8, ptr %5, i64 16
  %94 = load ptr, ptr %93, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %94, 2
  %96 = load i32, ptr %63, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %95, i32 %96, 3
  store ptr @_parameterization_Ptri8, ptr %6, align 8
  %98 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %6)
  %99 = call ptr @llvm.invariant.start.p0(i64 40, ptr %89)
  %100 = sext i32 %96 to i64
  %101 = getelementptr ptr, ptr %89, i64 %100
  %102 = getelementptr i8, ptr %101, i64 16
  %103 = load ptr, ptr %102, align 8
  store ptr @i8_typ, ptr %7, align 8
  %104 = call ptr %103({ ptr, ptr, ptr, i32 } %97, ptr nonnull %7)
  call void %104({ ptr, ptr, ptr, i32 } %97, { ptr, ptr, ptr, i32 } %97, ptr nonnull %6, i8 %88)
  %105 = load i160, ptr %62, align 8
  br label %106

106:                                              ; preds = %3, %32
  %.reg2mem5.sroa.3.0 = phi i160 [ %105, %32 ], [ undef, %3 ]
  %.reg2mem5.sroa.0.0 = phi ptr [ %89, %32 ], [ @nil_typ, %3 ]
  %.reload6.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %.reg2mem5.sroa.0.0, 0
  %.reload6.fca.1.insert = insertvalue { ptr, i160 } %.reload6.fca.0.insert, i160 %.reg2mem5.sroa.3.0, 1
  ret { ptr, i160 } %.reload6.fca.1.insert
}

define linkonce_odr { i64, i64 } @_size_i8_typ(ptr %0) {
  ret { i64, i64 } { i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 1 }
}

define linkonce_odr { ptr, i160 } @_box_i8_typ(ptr %0, ptr %1) {
  %3 = load i8, ptr %0, align 1
  %.sroa.2.sroa.0.0.insert.ext = zext i8 %3 to i160
  %4 = insertvalue { ptr, i160 } { ptr @i8_typ, i160 undef }, i160 %.sroa.2.sroa.0.0.insert.ext, 1
  ret { ptr, i160 } %4
}

define linkonce_odr void @_unbox_i8_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %.fca.1.extract = extractvalue { ptr, i160 } %0, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i8
  store i8 %.sroa.1.8.extract.trunc, ptr %2, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_Character(ptr nocapture readnone %0) #5 {
  ret { i64, i64 } { i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 1 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Character_B_byte_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 96
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Character_B_init_bytePtri8({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 104
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define i8 @Character_byte_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 6681222582356018452
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %4 = tail call ptr @llvm.invariant.start.p0(i64 40, ptr %.fca.0.extract)
  %5 = sext i32 %offset.i.i to i64
  %6 = getelementptr ptr, ptr %.fca.0.extract, i64 %5
  %7 = load ptr, ptr %6, align 8
  %8 = load ptr, ptr %7, align 8
  %9 = tail call i8 %8(ptr %.fca.1.extract)
  ret i8 %9
}

define void @Character_init_bytePtri8({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i8 %3) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 6681222582356018452
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %5 = tail call ptr @llvm.invariant.start.p0(i64 40, ptr %.fca.0.extract)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract, i64 %6
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr i8, ptr %8, i64 8
  %10 = load ptr, ptr %9, align 8
  tail call void %10(ptr %.fca.1.extract, i8 %3)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i8 @Character_getter_byte(ptr nocapture readonly %0) #0 {
  %2 = load i8, ptr %0, align 1
  ret i8 %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Character_setter_byte(ptr nocapture writeonly %0, i8 %1) #4 {
  store i8 %1, ptr %0, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @StringIterator_getter_index(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 32
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @StringIterator_setter_index(ptr nocapture writeonly %0, i32 %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 32
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @StringIterator_getter_str(ptr nocapture readonly %0) #0 {
  %2 = load ptr, ptr %0, align 8
  %3 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2, 0
  %4 = getelementptr i8, ptr %0, i64 8
  %5 = load ptr, ptr %4, align 8
  %6 = insertvalue { ptr, ptr, ptr, i32 } %3, ptr %5, 1
  %7 = getelementptr i8, ptr %0, i64 16
  %8 = load ptr, ptr %7, align 8
  %9 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr %8, 2
  %10 = getelementptr i8, ptr %0, i64 24
  %11 = load i32, ptr %10, align 4
  %12 = insertvalue { ptr, ptr, ptr, i32 } %9, i32 %11, 3
  ret { ptr, ptr, ptr, i32 } %12
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @StringIterator_setter_str(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #4 {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %0, align 8
  %3 = getelementptr i8, ptr %0, i64 8
  store ptr %.fca.1.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.2.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store i32 %.fca.3.extract, ptr %5, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @String_getter_capacity(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 12
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @String_setter_capacity(ptr nocapture writeonly %0, i32 %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 12
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @String_getter_length(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @String_setter_length(ptr nocapture writeonly %0, i32 %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 8
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr } @String_getter_bytes(ptr nocapture readonly %0) #0 {
  %2 = load ptr, ptr %0, align 8
  %3 = insertvalue { ptr } undef, ptr %2, 0
  ret { ptr } %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @String_setter_bytes(ptr nocapture writeonly %0, { ptr } %1) #4 {
  %.fca.0.extract = extractvalue { ptr } %1, 0
  store ptr %.fca.0.extract, ptr %0, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_Exception(ptr nocapture readnone %0) #5 {
  ret { i64, i64 } { i64 72, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Exception_B_init_messageString({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 136
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Exception_B_init_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 144
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Exception_B_set_info_line_numberPtri32_file_nameString({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 152
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Exception_B_report_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 160
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Exception_B_print_message_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 168
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @Exception_init_messageString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 9027164862567808692
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %hash_coef_ptr.i.i10 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i11 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i12 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i13 = load i64, ptr %hash_coef_ptr.i.i10, align 4
  %tbl_size.i.i14 = load i64, ptr %tbl_size_ptr.i.i11, align 4
  %offset_tbl.i.i15 = load ptr, ptr %offset_tbl_ptr.i.i12, align 8
  %product.i.i.i16 = mul i64 %hash_coef.i.i13, 6499063144389013426
  %shifted.i.i.i17 = lshr i64 %product.i.i.i16, 32
  %xored.i.i.i18 = xor i64 %shifted.i.i.i17, %product.i.i.i16
  %hash.i.i.i19 = and i64 %xored.i.i.i18, %tbl_size.i.i14
  %offset_ptr.i.i20 = getelementptr i32, ptr %offset_tbl.i.i15, i64 %hash.i.i.i19
  %offset.i.i35 = load i32, ptr %offset_ptr.i.i20, align 4
  %5 = tail call ptr @llvm.invariant.start.p0(i64 104, ptr %.fca.0.extract1)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract1, i64 %6
  %8 = getelementptr i8, ptr %7, i64 16
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr i8, ptr %9, i64 8
  %11 = load ptr, ptr %10, align 8
  %12 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.1.extract, 1
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.2.extract, 2
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, i32 %offset.i.i35, 3
  tail call void %11(ptr %.fca.1.extract3, { ptr, ptr, ptr, i32 } %15)
  %16 = tail call ptr @llvm.invariant.start.p0(i64 104, ptr %.fca.0.extract1)
  %17 = load ptr, ptr %7, align 8
  %18 = getelementptr i8, ptr %17, i64 8
  %19 = load ptr, ptr %18, align 8
  tail call void %19(ptr %.fca.1.extract3, i32 0)
  %result.i = tail call noalias dereferenceable_or_null(1) ptr @bump_malloc_inner(i64 noundef 1, ptr nonnull @current_ptr) #29
  %result.i37 = tail call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %20 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %result.i37, 1
  %21 = insertvalue { ptr, ptr, ptr, i32 } %20, ptr undef, 2
  %22 = insertvalue { ptr, ptr, ptr, i32 } %21, i32 9, 3
  store ptr %result.i, ptr %result.i37, align 8
  %23 = getelementptr i8, ptr %result.i37, i64 8
  store i32 0, ptr %23, align 4
  %24 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %25 = getelementptr i8, ptr %result.i37, i64 12
  store i32 1, ptr %25, align 4
  %26 = tail call ptr @llvm.invariant.start.p0(i64 104, ptr %.fca.0.extract1)
  %27 = getelementptr i8, ptr %7, i64 8
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr i8, ptr %28, i64 8
  %30 = load ptr, ptr %29, align 8
  tail call void %30(ptr %.fca.1.extract3, { ptr, ptr, ptr, i32 } %22)
  ret void
}

define void @Exception_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 9027164862567808692
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %4 = tail call ptr @llvm.invariant.start.p0(i64 104, ptr %.fca.0.extract)
  %5 = sext i32 %offset.i.i to i64
  %6 = getelementptr ptr, ptr %.fca.0.extract, i64 %5
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr i8, ptr %7, i64 8
  %9 = load ptr, ptr %8, align 8
  tail call void %9(ptr %.fca.1.extract, i32 0)
  %result.i = tail call noalias dereferenceable_or_null(7) ptr @bump_malloc_inner(i64 noundef 7, ptr nonnull @current_ptr) #29
  store <6 x i8> <i8 60, i8 78, i8 111, i8 110, i8 101, i8 62>, ptr %result.i, align 8
  %result.i2 = tail call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %10 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %result.i2, 1
  %11 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr undef, 2
  %12 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 9, 3
  store ptr %result.i, ptr %result.i2, align 8
  %13 = getelementptr i8, ptr %result.i2, i64 8
  store i32 6, ptr %13, align 4
  %14 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %15 = getelementptr i8, ptr %result.i2, i64 12
  store i32 7, ptr %15, align 4
  %16 = tail call ptr @llvm.invariant.start.p0(i64 104, ptr %.fca.0.extract)
  %17 = getelementptr i8, ptr %6, i64 16
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr i8, ptr %18, i64 8
  %20 = load ptr, ptr %19, align 8
  tail call void %20(ptr %.fca.1.extract, { ptr, ptr, ptr, i32 } %12)
  %result.i17 = tail call noalias dereferenceable_or_null(1) ptr @bump_malloc_inner(i64 noundef 1, ptr nonnull @current_ptr) #29
  %result.i18 = tail call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #29
  %21 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %result.i18, 1
  %22 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr undef, 2
  %23 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 9, 3
  store ptr %result.i17, ptr %result.i18, align 8
  %24 = getelementptr i8, ptr %result.i18, i64 8
  store i32 0, ptr %24, align 4
  %25 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %26 = getelementptr i8, ptr %result.i18, i64 12
  store i32 1, ptr %26, align 4
  %27 = tail call ptr @llvm.invariant.start.p0(i64 104, ptr %.fca.0.extract)
  %28 = getelementptr i8, ptr %6, i64 8
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  tail call void %31(ptr %.fca.1.extract, { ptr, ptr, ptr, i32 } %23)
  ret void
}

define void @Exception_set_info_line_numberPtri32_file_nameString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3, { ptr, ptr, ptr, i32 } %4) {
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 9027164862567808692
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %6 = tail call ptr @llvm.invariant.start.p0(i64 104, ptr %.fca.0.extract1)
  %7 = sext i32 %offset.i.i to i64
  %8 = getelementptr ptr, ptr %.fca.0.extract1, i64 %7
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr i8, ptr %9, i64 8
  %11 = load ptr, ptr %10, align 8
  tail call void %11(ptr %.fca.1.extract3, i32 %3)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %hash_coef_ptr.i.i10 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i11 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i12 = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i13 = load i64, ptr %hash_coef_ptr.i.i10, align 4
  %tbl_size.i.i14 = load i64, ptr %tbl_size_ptr.i.i11, align 4
  %offset_tbl.i.i15 = load ptr, ptr %offset_tbl_ptr.i.i12, align 8
  %product.i.i.i16 = mul i64 %hash_coef.i.i13, 6499063144389013426
  %shifted.i.i.i17 = lshr i64 %product.i.i.i16, 32
  %xored.i.i.i18 = xor i64 %shifted.i.i.i17, %product.i.i.i16
  %hash.i.i.i19 = and i64 %xored.i.i.i18, %tbl_size.i.i14
  %offset_ptr.i.i20 = getelementptr i32, ptr %offset_tbl.i.i15, i64 %hash.i.i.i19
  %offset.i.i35 = load i32, ptr %offset_ptr.i.i20, align 4
  %12 = tail call ptr @llvm.invariant.start.p0(i64 104, ptr %.fca.0.extract1)
  %13 = getelementptr i8, ptr %8, i64 8
  %14 = load ptr, ptr %13, align 8
  %15 = getelementptr i8, ptr %14, i64 8
  %16 = load ptr, ptr %15, align 8
  %17 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %18 = insertvalue { ptr, ptr, ptr, i32 } %17, ptr %.fca.1.extract, 1
  %19 = insertvalue { ptr, ptr, ptr, i32 } %18, ptr %.fca.2.extract, 2
  %20 = insertvalue { ptr, ptr, ptr, i32 } %19, i32 %offset.i.i35, 3
  tail call void %16(ptr %.fca.1.extract3, { ptr, ptr, ptr, i32 } %20)
  ret void
}

define void @Exception_report_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
.lr.ph.i:
  %3 = alloca [0 x ptr], align 8
  %.fca.0.extract19 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract21 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract19, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract19, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract19, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 9027164862567808692
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %result.i = tail call noalias dereferenceable_or_null(10) ptr @bump_malloc_inner(i64 noundef 10, ptr nonnull @current_ptr) #29
  store <9 x i8> <i8 45, i8 45, i8 45, i8 45, i8 45, i8 45, i8 45, i8 45, i8 45>, ptr %result.i, align 16
  %result.i.i = tail call noalias dereferenceable_or_null(10) ptr @bump_malloc_inner(i64 noundef 10, ptr nonnull @current_ptr) #29
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 1 dereferenceable(9) %result.i.i, ptr noundef nonnull align 1 dereferenceable(9) %result.i, i64 9, i1 false)
  %puts = tail call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i)
  %result.i33 = tail call noalias dereferenceable_or_null(27) ptr @bump_malloc_inner(i64 noundef 27, ptr nonnull @current_ptr) #29
  store <26 x i8> <i8 69, i8 120, i8 99, i8 101, i8 112, i8 116, i8 105, i8 111, i8 110, i8 32, i8 116, i8 104, i8 114, i8 111, i8 119, i8 110, i8 32, i8 102, i8 114, i8 111, i8 109, i8 32, i8 102, i8 105, i8 108, i8 101>, ptr %result.i33, align 32
  %result.i.i132 = tail call noalias dereferenceable_or_null(27) ptr @bump_malloc_inner(i64 noundef 27, ptr nonnull @current_ptr) #29
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 1 dereferenceable(26) %result.i.i132, ptr noundef nonnull align 1 dereferenceable(26) %result.i33, i64 26, i1 false)
  %4 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %puts27 = tail call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i132)
  %5 = tail call ptr @llvm.invariant.start.p0(i64 104, ptr %.fca.0.extract19)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract19, i64 %6
  %8 = getelementptr i8, ptr %7, i64 8
  %9 = load ptr, ptr %8, align 8
  %10 = load ptr, ptr %9, align 8
  %11 = tail call { ptr, ptr, ptr, i32 } %10(ptr %.fca.1.extract21)
  %.fca.0.extract10 = extractvalue { ptr, ptr, ptr, i32 } %11, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %11, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %11, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %11, 3
  %hash_coef_ptr.i.i36 = getelementptr i8, ptr %.fca.0.extract10, i64 8
  %tbl_size_ptr.i.i37 = getelementptr i8, ptr %.fca.0.extract10, i64 16
  %offset_tbl_ptr.i.i38 = getelementptr i8, ptr %.fca.0.extract10, i64 40
  %hash_coef.i.i39 = load i64, ptr %hash_coef_ptr.i.i36, align 4
  %tbl_size.i.i40 = load i64, ptr %tbl_size_ptr.i.i37, align 4
  %offset_tbl.i.i41 = load ptr, ptr %offset_tbl_ptr.i.i38, align 8
  %product.i.i.i42 = mul i64 %hash_coef.i.i39, 6499063144389013426
  %shifted.i.i.i43 = lshr i64 %product.i.i.i42, 32
  %xored.i.i.i44 = xor i64 %shifted.i.i.i43, %product.i.i.i42
  %hash.i.i.i45 = and i64 %xored.i.i.i44, %tbl_size.i.i40
  %offset_ptr.i.i46 = getelementptr i32, ptr %offset_tbl.i.i41, i64 %hash.i.i.i45
  %offset.i.i47 = load i32, ptr %offset_ptr.i.i46, align 4
  %eq.i = icmp eq i32 %.fca.3.extract, %offset.i.i47
  tail call void @llvm.assume(i1 %eq.i) #30
  %12 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract10, 0
  %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.1.extract, 1
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.2.extract, 2
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, i32 %.fca.3.extract, 3
  %16 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
  %17 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract10)
  %18 = sext i32 %.fca.3.extract to i64
  %19 = getelementptr ptr, ptr %.fca.0.extract10, i64 %18
  %20 = getelementptr i8, ptr %19, i64 112
  %21 = load ptr, ptr %20, align 8
  %22 = call ptr %21({ ptr, ptr, ptr, i32 } %15, ptr nonnull %3)
  %23 = call { ptr } %22({ ptr, ptr, ptr, i32 } %15, { ptr, ptr, ptr, i32 } %15, ptr nonnull %3)
  %.fca.0.extract8 = extractvalue { ptr } %23, 0
  %puts28 = call i32 @puts(ptr nonnull dereferenceable(1) %.fca.0.extract8)
  %result.i49 = call noalias dereferenceable_or_null(8) ptr @bump_malloc_inner(i64 noundef 8, ptr nonnull @current_ptr) #29
  store <7 x i8> <i8 65, i8 116, i8 32, i8 108, i8 105, i8 110, i8 101>, ptr %result.i49, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
  %result.i.i152 = call noalias dereferenceable_or_null(8) ptr @bump_malloc_inner(i64 noundef 8, ptr nonnull @current_ptr) #29
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 1 dereferenceable(7) %result.i.i152, ptr noundef nonnull align 1 dereferenceable(7) %result.i49, i64 7, i1 false)
  %25 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %26 = getelementptr i8, ptr %result.i.i152, i64 7
  store i8 0, ptr %26, align 1
  %puts29 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i152)
  %27 = call ptr @llvm.invariant.start.p0(i64 104, ptr %.fca.0.extract19)
  %28 = load ptr, ptr %7, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %.fca.1.extract21)
  %31 = call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i32_string, i32 %30)
  %result.i51 = call noalias dereferenceable_or_null(13) ptr @bump_malloc_inner(i64 noundef 13, ptr nonnull @current_ptr) #29
  store <12 x i8> <i8 87, i8 105, i8 116, i8 104, i8 32, i8 109, i8 101, i8 115, i8 115, i8 97, i8 103, i8 101>, ptr %result.i51, align 16
  %32 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
  %result.i.i172 = call noalias dereferenceable_or_null(13) ptr @bump_malloc_inner(i64 noundef 13, ptr nonnull @current_ptr) #29
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 1 dereferenceable(12) %result.i.i172, ptr noundef nonnull align 1 dereferenceable(12) %result.i51, i64 12, i1 false)
  %.fca.2.extract23 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %33 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %34 = getelementptr i8, ptr %result.i.i172, i64 12
  store i8 0, ptr %34, align 1
  %puts30 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i172)
  %35 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract19, 0
  %36 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %.fca.1.extract21, 1
  %37 = insertvalue { ptr, ptr, ptr, i32 } %36, ptr %.fca.2.extract23, 2
  %38 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %offset.i.i, 3
  %39 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
  %40 = call ptr @llvm.invariant.start.p0(i64 104, ptr %.fca.0.extract19)
  %41 = getelementptr i8, ptr %7, i64 56
  %42 = load ptr, ptr %41, align 8
  %43 = call ptr %42({ ptr, ptr, ptr, i32 } %38, ptr nonnull %3)
  call void %43({ ptr, ptr, ptr, i32 } %38, { ptr, ptr, ptr, i32 } %38, ptr nonnull %3)
  %result.i53 = call noalias dereferenceable_or_null(10) ptr @bump_malloc_inner(i64 noundef 10, ptr nonnull @current_ptr) #29
  store <9 x i8> <i8 45, i8 45, i8 45, i8 45, i8 45, i8 45, i8 45, i8 45, i8 45>, ptr %result.i53, align 16
  %44 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
  %result.i.i192 = call noalias dereferenceable_or_null(10) ptr @bump_malloc_inner(i64 noundef 10, ptr nonnull @current_ptr) #29
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 1 dereferenceable(9) %result.i.i192, ptr noundef nonnull align 1 dereferenceable(9) %result.i53, i64 9, i1 false)
  %45 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %46 = getelementptr i8, ptr %result.i.i192, i64 9
  store i8 0, ptr %46, align 1
  %puts31 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i192)
  ret void
}

define void @Exception_print_message_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 9027164862567808692
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %5 = tail call ptr @llvm.invariant.start.p0(i64 104, ptr %.fca.0.extract2)
  %6 = sext i32 %offset.i.i to i64
  %7 = getelementptr ptr, ptr %.fca.0.extract2, i64 %6
  %8 = getelementptr i8, ptr %7, i64 16
  %9 = load ptr, ptr %8, align 8
  %10 = load ptr, ptr %9, align 8
  %11 = tail call { ptr, ptr, ptr, i32 } %10(ptr %.fca.1.extract4)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %11, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %11, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %11, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %11, 3
  %hash_coef_ptr.i.i11 = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i12 = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i13 = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i14 = load i64, ptr %hash_coef_ptr.i.i11, align 4
  %tbl_size.i.i15 = load i64, ptr %tbl_size_ptr.i.i12, align 4
  %offset_tbl.i.i16 = load ptr, ptr %offset_tbl_ptr.i.i13, align 8
  %product.i.i.i17 = mul i64 %hash_coef.i.i14, 6499063144389013426
  %shifted.i.i.i18 = lshr i64 %product.i.i.i17, 32
  %xored.i.i.i19 = xor i64 %shifted.i.i.i18, %product.i.i.i17
  %hash.i.i.i20 = and i64 %xored.i.i.i19, %tbl_size.i.i15
  %offset_ptr.i.i21 = getelementptr i32, ptr %offset_tbl.i.i16, i64 %hash.i.i.i20
  %offset.i.i22 = load i32, ptr %offset_ptr.i.i21, align 4
  %eq.i = icmp eq i32 %.fca.3.extract, %offset.i.i22
  tail call void @llvm.assume(i1 %eq.i) #30
  %12 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.1.extract, 1
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.2.extract, 2
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, i32 %.fca.3.extract, 3
  %16 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %17 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract1)
  %18 = sext i32 %.fca.3.extract to i64
  %19 = getelementptr ptr, ptr %.fca.0.extract1, i64 %18
  %20 = getelementptr i8, ptr %19, i64 112
  %21 = load ptr, ptr %20, align 8
  %22 = call ptr %21({ ptr, ptr, ptr, i32 } %15, ptr nonnull %4)
  %23 = call { ptr } %22({ ptr, ptr, ptr, i32 } %15, { ptr, ptr, ptr, i32 } %15, ptr nonnull %4)
  %.fca.0.extract = extractvalue { ptr } %23, 0
  %puts = call i32 @puts(ptr nonnull dereferenceable(1) %.fca.0.extract)
  ret void
}

; Function Attrs: nofree nounwind
declare noundef i32 @printf(ptr nocapture noundef readonly, ...) local_unnamed_addr #10

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @Exception_getter_message(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 48
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 56
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 64
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Exception_setter_message(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 40
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 48
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 56
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 64
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @Exception_getter_file_name(ptr nocapture readonly %0) #0 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Exception_setter_file_name(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #4 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 32
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @Exception_getter_line_number(ptr nocapture readonly %0) #0 {
  %2 = load i32, ptr %0, align 4
  ret i32 %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Exception_setter_line_number(ptr nocapture writeonly %0, i32 %1) #4 {
  store i32 %1, ptr %0, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Iterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr #1 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 80
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @report_exception({ ptr } %0) local_unnamed_addr {
  %2 = alloca [0 x ptr], align 8
  %.fca.0.extract2 = extractvalue { ptr } %0, 0
  %3 = getelementptr i8, ptr %.fca.0.extract2, i64 48
  %4 = load { ptr, i160 }, ptr %3, align 8
  %.fca.0.extract = extractvalue { ptr, i160 } %4, 0
  %5 = icmp ne ptr %.fca.0.extract, @nil_typ
  %6 = icmp ne ptr %.fca.0.extract, null
  %.not4 = and i1 %5, %6
  br i1 %.not4, label %7, label %._crit_edge

7:                                                ; preds = %1
  %.fca.1.extract = extractvalue { ptr, i160 } %4, 1
  %.sroa.3.8.extract.trunc = trunc i160 %.fca.1.extract to i64
  %8 = inttoptr i64 %.sroa.3.8.extract.trunc to ptr
  %.sroa.5.8.extract.shift = lshr i160 %.fca.1.extract, 64
  %.sroa.5.8.extract.trunc = trunc i160 %.sroa.5.8.extract.shift to i64
  %9 = inttoptr i64 %.sroa.5.8.extract.trunc to ptr
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 9027164862567808692
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %11 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %8, 1
  %12 = insertvalue { ptr, ptr, ptr, i32 } %11, ptr %9, 2
  %13 = insertvalue { ptr, ptr, ptr, i32 } %12, i32 %offset.i.i, 3
  %14 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %15 = tail call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract)
  %16 = sext i32 %offset.i.i to i64
  %17 = getelementptr ptr, ptr %.fca.0.extract, i64 %16
  %18 = getelementptr i8, ptr %17, i64 48
  %19 = load ptr, ptr %18, align 8
  %20 = call ptr %19({ ptr, ptr, ptr, i32 } %13, ptr nonnull %2)
  call void %20({ ptr, ptr, ptr, i32 } %13, { ptr, ptr, ptr, i32 } %13, ptr nonnull %2)
  br label %._crit_edge

._crit_edge:                                      ; preds = %1, %7
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_size_IO(ptr nocapture readnone %0) #5 {
  ret { i64, i64 } { i64 0, i64 1 }
}

; Function Attrs: mustprogress willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @IO_B__Self_print_xPtri64__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xString__Self_print_xPtri1__Self_print_xRepresentable__Self_print_xPtri32__Self_print_xCharacter__Self_print_xNil(ptr nocapture %0) #11 {
  %2 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %3 = load ptr, ptr %0, align 8
  %4 = getelementptr i8, ptr %3, i64 8
  %5 = getelementptr i8, ptr %3, i64 16
  %6 = getelementptr i8, ptr %3, i64 24
  %7 = getelementptr i8, ptr %3, i64 32
  %8 = load i64, ptr %4, align 4
  %9 = load i64, ptr %5, align 4
  %10 = load ptr, ptr %6, align 8
  %11 = load ptr, ptr %7, align 8
  %result.i = tail call i1 %10(i64 %9, i64 %8, i64 -5126806859456325683, i64 ptrtoint (ptr @nil_typ to i64), ptr readonly %11) #0
  %12 = icmp eq ptr %3, null
  %13 = or i1 %12, %result.i
  br i1 %13, label %21, label %14

14:                                               ; preds = %1
  %result.i3 = tail call i1 %10(i64 %9, i64 %8, i64 2582149688529881115, i64 ptrtoint (ptr @i8_typ to i64), ptr readonly %11) #0
  br i1 %result.i3, label %21, label %15

15:                                               ; preds = %14
  %result.i4 = tail call i1 %10(i64 %9, i64 %8, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr readonly %11) #0
  %result.i5 = tail call i1 %10(i64 %9, i64 %8, i64 6681222582356018452, i64 ptrtoint (ptr @Character to i64), ptr readonly %11) #0
  %not.result.i4 = xor i1 %result.i4, true
  %.reg2mem49.0 = select i1 %not.result.i4, i1 true, i1 %result.i5
  br i1 %.reg2mem49.0, label %16, label %21

16:                                               ; preds = %15
  %result.i6 = tail call i1 %10(i64 %9, i64 %8, i64 -757315540097298781, i64 ptrtoint (ptr @f64_typ to i64), ptr readonly %11) #0
  br i1 %result.i6, label %21, label %17

17:                                               ; preds = %16
  %not.result.i5 = xor i1 %result.i5, true
  %.reg2mem47.0 = or i1 %result.i4, %not.result.i5
  br i1 %.reg2mem47.0, label %18, label %21

18:                                               ; preds = %17
  %result.i9 = tail call i1 %10(i64 %9, i64 %8, i64 -7260840641129990118, i64 ptrtoint (ptr @Representable to i64), ptr readonly %11) #0
  %result.i9.not = xor i1 %result.i9, true
  %.reg2mem45.0 = or i1 %result.i4, %result.i5
  %or.cond = select i1 %result.i9.not, i1 true, i1 %.reg2mem45.0
  br i1 %or.cond, label %.critedge, label %21

.critedge:                                        ; preds = %18
  %result.i12 = tail call i1 %10(i64 %9, i64 %8, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr readonly %11) #0
  br i1 %result.i12, label %21, label %19

19:                                               ; preds = %.critedge
  %result.i13 = tail call i1 %10(i64 %9, i64 %8, i64 5801531371504802705, i64 ptrtoint (ptr @bool_typ to i64), ptr readonly %11) #0
  %20 = select i1 %result.i13, i32 5, i32 1
  br label %21

21:                                               ; preds = %18, %14, %15, %16, %17, %.critedge, %19, %1
  %.reg2mem29.0 = phi i32 [ 9, %1 ], [ 2, %14 ], [ 3, %16 ], [ %20, %19 ], [ 7, %.critedge ], [ 8, %17 ], [ 4, %15 ], [ 6, %18 ]
  %22 = zext nneg i32 %.reg2mem29.0 to i64
  %23 = getelementptr [10 x ptr], ptr @IO, i64 0, i64 %22
  %24 = getelementptr i8, ptr %23, i64 72
  %25 = load ptr, ptr %24, align 8
  ret ptr %25
}

; Function Attrs: nofree nounwind
define void @IO__Self_print_xPtri64(ptr nocapture readnone %0, { ptr, i160 } %1) #10 {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i64
  %3 = tail call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i64_string, i64 %.sroa.1.8.extract.trunc)
  ret void
}

; Function Attrs: nofree nounwind
define void @IO__Self_print_xPtri8(ptr nocapture readnone %0, { ptr, i160 } %1) #10 {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i8
  %3 = sext i8 %.sroa.1.8.extract.trunc to i32
  %4 = tail call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i32_string, i32 %3)
  ret void
}

; Function Attrs: nofree nounwind
define void @IO__Self_print_xPtrf64(ptr nocapture readnone %0, { ptr, i160 } %1) #10 {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i64
  %3 = bitcast i64 %.sroa.1.8.extract.trunc to double
  %4 = tail call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @float_string, double %3)
  ret void
}

define void @IO__Self_print_xString(ptr nocapture readnone %0, { ptr, i160 } %1) {
  %3 = alloca [0 x ptr], align 8
  %.fca.0.extract1 = extractvalue { ptr, i160 } %1, 0
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.3.8.extract.trunc = trunc i160 %.fca.1.extract to i64
  %4 = inttoptr i64 %.sroa.3.8.extract.trunc to ptr
  %.sroa.5.8.extract.shift = lshr i160 %.fca.1.extract, 64
  %.sroa.5.8.extract.trunc = trunc i160 %.sroa.5.8.extract.shift to i64
  %5 = inttoptr i64 %.sroa.5.8.extract.trunc to ptr
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 6499063144389013426
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %6 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %7 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr %4, 1
  %8 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %5, 2
  %9 = insertvalue { ptr, ptr, ptr, i32 } %8, i32 %offset.i.i, 3
  %10 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
  %11 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract1)
  %12 = sext i32 %offset.i.i to i64
  %13 = getelementptr ptr, ptr %.fca.0.extract1, i64 %12
  %14 = getelementptr i8, ptr %13, i64 112
  %15 = load ptr, ptr %14, align 8
  %16 = call ptr %15({ ptr, ptr, ptr, i32 } %9, ptr nonnull %3)
  %17 = call { ptr } %16({ ptr, ptr, ptr, i32 } %9, { ptr, ptr, ptr, i32 } %9, ptr nonnull %3)
  %.fca.0.extract = extractvalue { ptr } %17, 0
  %puts = call i32 @puts(ptr nonnull dereferenceable(1) %.fca.0.extract)
  ret void
}

; Function Attrs: nofree nounwind
define void @IO__Self_print_xPtri1(ptr nocapture readnone %0, { ptr, i160 } %1) #10 {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %3 = trunc i160 %.fca.1.extract to i1
  br i1 %3, label %4, label %5

4:                                                ; preds = %2
  %result.i = tail call noalias dereferenceable_or_null(5) ptr @bump_malloc_inner(i64 noundef 5, ptr nonnull @current_ptr) #29
  store <4 x i8> <i8 116, i8 114, i8 117, i8 101>, ptr %result.i, align 4
  br label %.lr.ph.i

5:                                                ; preds = %2
  %result.i8 = tail call noalias dereferenceable_or_null(6) ptr @bump_malloc_inner(i64 noundef 6, ptr nonnull @current_ptr) #29
  store <5 x i8> <i8 102, i8 97, i8 108, i8 115, i8 101>, ptr %result.i8, align 8
  br label %.lr.ph.i

.lr.ph.i:                                         ; preds = %4, %5
  %result.i8.sink = phi ptr [ %result.i8, %5 ], [ %result.i, %4 ]
  %.sink27 = phi i32 [ 5, %5 ], [ 4, %4 ]
  %6 = add nuw nsw i32 %.sink27, 1
  %7 = zext nneg i32 %6 to i64
  %result.i.i = tail call noalias ptr @bump_malloc_inner(i64 noundef %7, ptr nonnull @current_ptr) #29
  %8 = zext nneg i32 %.sink27 to i64
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 1 dereferenceable(1) %result.i.i, ptr noundef nonnull align 1 dereferenceable(1) %result.i8.sink, i64 %8, i1 false)
  %9 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %10 = zext nneg i32 %.sink27 to i64
  %11 = getelementptr i8, ptr %result.i.i, i64 %10
  store i8 0, ptr %11, align 1
  %puts = tail call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i)
  ret void
}

define void @IO__Self_print_xRepresentable(ptr nocapture readnone %0, { ptr, i160 } %1) {
  %3 = alloca [0 x ptr], align 8
  %.fca.0.extract2 = extractvalue { ptr, i160 } %1, 0
  %.fca.1.extract4 = extractvalue { ptr, i160 } %1, 1
  %.sroa.321.8.extract.trunc = trunc i160 %.fca.1.extract4 to i64
  %4 = inttoptr i64 %.sroa.321.8.extract.trunc to ptr
  %.sroa.522.8.extract.shift = lshr i160 %.fca.1.extract4, 64
  %.sroa.522.8.extract.trunc = trunc i160 %.sroa.522.8.extract.shift to i64
  %5 = inttoptr i64 %.sroa.522.8.extract.trunc to ptr
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, -7260840641129990118
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %6 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract2, 0
  %7 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr %4, 1
  %8 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %5, 2
  %9 = insertvalue { ptr, ptr, ptr, i32 } %8, i32 %offset.i.i, 3
  %10 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
  %11 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %.fca.0.extract2)
  %12 = sext i32 %offset.i.i to i64
  %13 = getelementptr ptr, ptr %.fca.0.extract2, i64 %12
  %14 = load ptr, ptr %13, align 8
  %15 = call ptr %14({ ptr, ptr, ptr, i32 } %9, ptr nonnull %3)
  %16 = call { ptr, ptr, ptr, i32 } %15({ ptr, ptr, ptr, i32 } %9, { ptr, ptr, ptr, i32 } %9, ptr nonnull %3)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %16, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %16, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %16, 2
  %hash_coef_ptr.i.i7 = getelementptr i8, ptr %.fca.0.extract1, i64 8
  %tbl_size_ptr.i.i8 = getelementptr i8, ptr %.fca.0.extract1, i64 16
  %offset_tbl_ptr.i.i9 = getelementptr i8, ptr %.fca.0.extract1, i64 40
  %hash_coef.i.i10 = load i64, ptr %hash_coef_ptr.i.i7, align 4
  %tbl_size.i.i11 = load i64, ptr %tbl_size_ptr.i.i8, align 4
  %offset_tbl.i.i12 = load ptr, ptr %offset_tbl_ptr.i.i9, align 8
  %product.i.i.i13 = mul i64 %hash_coef.i.i10, 6499063144389013426
  %shifted.i.i.i14 = lshr i64 %product.i.i.i13, 32
  %xored.i.i.i15 = xor i64 %shifted.i.i.i14, %product.i.i.i13
  %hash.i.i.i16 = and i64 %xored.i.i.i15, %tbl_size.i.i11
  %offset_ptr.i.i17 = getelementptr i32, ptr %offset_tbl.i.i12, i64 %hash.i.i.i16
  %offset.i.i18 = load i32, ptr %offset_ptr.i.i17, align 4
  %17 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
  %18 = insertvalue { ptr, ptr, ptr, i32 } %17, ptr %.fca.1.extract, 1
  %19 = insertvalue { ptr, ptr, ptr, i32 } %18, ptr %.fca.2.extract, 2
  %20 = insertvalue { ptr, ptr, ptr, i32 } %19, i32 %offset.i.i18, 3
  %21 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
  %22 = call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract1)
  %23 = sext i32 %offset.i.i18 to i64
  %24 = getelementptr ptr, ptr %.fca.0.extract1, i64 %23
  %25 = getelementptr i8, ptr %24, i64 112
  %26 = load ptr, ptr %25, align 8
  %27 = call ptr %26({ ptr, ptr, ptr, i32 } %20, ptr nonnull %3)
  %28 = call { ptr } %27({ ptr, ptr, ptr, i32 } %20, { ptr, ptr, ptr, i32 } %20, ptr nonnull %3)
  %.fca.0.extract = extractvalue { ptr } %28, 0
  %puts = call i32 @puts(ptr nonnull dereferenceable(1) %.fca.0.extract)
  ret void
}

; Function Attrs: nofree nounwind
define void @IO__Self_print_xPtri32(ptr nocapture readnone %0, { ptr, i160 } %1) #10 {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %3 = tail call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i32_string, i32 %.sroa.1.8.extract.trunc)
  ret void
}

define void @IO__Self_print_xCharacter(ptr nocapture readnone %0, { ptr, i160 } %1) {
  %3 = alloca [0 x ptr], align 8
  %.fca.0.extract = extractvalue { ptr, i160 } %1, 0
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.3.8.extract.trunc = trunc i160 %.fca.1.extract to i64
  %4 = inttoptr i64 %.sroa.3.8.extract.trunc to ptr
  %.sroa.5.8.extract.shift = lshr i160 %.fca.1.extract, 64
  %.sroa.5.8.extract.trunc = trunc i160 %.sroa.5.8.extract.shift to i64
  %5 = inttoptr i64 %.sroa.5.8.extract.trunc to ptr
  %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
  %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
  %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
  %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
  %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
  %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
  %product.i.i.i = mul i64 %hash_coef.i.i, 6681222582356018452
  %shifted.i.i.i = lshr i64 %product.i.i.i, 32
  %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
  %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
  %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
  %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
  %result.i = tail call noalias dereferenceable_or_null(2) ptr @bump_malloc_inner(i64 noundef 2, ptr nonnull @current_ptr) #29
  %6 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %7 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr %4, 1
  %8 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %5, 2
  %9 = insertvalue { ptr, ptr, ptr, i32 } %8, i32 %offset.i.i, 3
  %10 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
  %11 = tail call ptr @llvm.invariant.start.p0(i64 40, ptr %.fca.0.extract)
  %12 = sext i32 %offset.i.i to i64
  %13 = getelementptr ptr, ptr %.fca.0.extract, i64 %12
  %14 = getelementptr i8, ptr %13, i64 8
  %15 = load ptr, ptr %14, align 8
  %16 = call ptr %15({ ptr, ptr, ptr, i32 } %9, ptr nonnull %3)
  %17 = call i8 %16({ ptr, ptr, ptr, i32 } %9, { ptr, ptr, ptr, i32 } %9, ptr nonnull %3)
  store i8 %17, ptr %result.i, align 1
  %puts = call i32 @puts(ptr nonnull dereferenceable(1) %result.i)
  ret void
}

; Function Attrs: nofree nounwind
define void @IO__Self_print_xNil(ptr nocapture readnone %0, { ptr, i160 } %1) #10 {
.lr.ph.i:
  %result.i = tail call noalias dereferenceable_or_null(4) ptr @bump_malloc_inner(i64 noundef 4, ptr nonnull @current_ptr) #29
  store <3 x i8> <i8 110, i8 105, i8 108>, ptr %result.i, align 4
  %result.i.i = tail call noalias dereferenceable_or_null(4) ptr @bump_malloc_inner(i64 noundef 4, ptr nonnull @current_ptr) #29
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 1 dereferenceable(3) %result.i.i, ptr noundef nonnull align 1 dereferenceable(3) %result.i, i64 3, i1 false)
  %2 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
  %puts = tail call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i)
  ret void
}

define linkonce_odr { i64, i64 } @_size_f64_typ(ptr %0) {
  ret { i64, i64 } { i64 8, i64 8 }
}

define linkonce_odr { ptr, i160 } @_box_f64_typ(ptr %0, ptr %1) {
  %3 = load i64, ptr %0, align 1
  %.sroa.2.sroa.0.0.insert.ext = zext i64 %3 to i160
  %4 = insertvalue { ptr, i160 } { ptr @f64_typ, i160 undef }, i160 %.sroa.2.sroa.0.0.insert.ext, 1
  ret { ptr, i160 } %4
}

define linkonce_odr void @_unbox_f64_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %.fca.1.extract = extractvalue { ptr, i160 } %0, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i64
  store i64 %.sroa.1.8.extract.trunc, ptr %2, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @adjust_trampoline(ptr readonly %tramp) local_unnamed_addr #0 {
  %ret = tail call ptr @llvm.adjust.trampoline(ptr %tramp) #31
  ret ptr %ret
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: read)
declare ptr @llvm.adjust.trampoline(ptr) #12

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn allockind("alloc,zeroed") allocsize(0) memory(readwrite, argmem: none, inaccessiblemem: none)
define noalias ptr @bump_malloc(i64 noundef %size) local_unnamed_addr #13 {
  %result = tail call noalias ptr @bump_malloc_inner(i64 noundef %size, ptr nonnull @current_ptr) #29
  ret ptr %result
}

; Function Attrs: mustprogress nofree noinline norecurse nosync nounwind willreturn allockind("alloc,zeroed") allocsize(0) memory(argmem: readwrite)
define noalias ptr @bump_malloc_inner(i64 noundef %size, ptr nocapture %current_ptr) local_unnamed_addr #14 {
  %size_plus_15 = add i64 %size, 15
  %aligned_size = and i64 %size_plus_15, -16
  %current = load ptr, ptr %current_ptr, align 8
  %new_ptr = getelementptr i8, ptr %current, i64 %aligned_size
  store ptr %new_ptr, ptr %current_ptr, align 8
  ret ptr %current
}

define { i64, i64 } @_size_tuple_typ(ptr nocapture readonly %0) local_unnamed_addr {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load i64, ptr %2, align 4
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %1, %.lr.ph
  %.reg2mem20.010.reg2mem.0 = phi i64 [ %12, %.lr.ph ], [ 1, %1 ]
  %.reg2mem22.011.reg2mem.0 = phi i64 [ %18, %.lr.ph ], [ 0, %1 ]
  %.reg2mem14.0 = phi i64 [ %19, %.lr.ph ], [ 1, %1 ]
  %.in.reg2mem.0 = phi i64 [ %21, %.lr.ph ], [ %3, %1 ]
  %5 = inttoptr i64 %.in.reg2mem.0 to ptr
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr i8, ptr %6, i64 48
  %8 = load ptr, ptr %7, align 8
  %9 = tail call { i64, i64 } %8(ptr nonnull %5)
  %10 = extractvalue { i64, i64 } %9, 0
  %11 = extractvalue { i64, i64 } %9, 1
  %12 = tail call i64 @llvm.umax.i64(i64 %11, i64 %.reg2mem20.010.reg2mem.0)
  %13 = urem i64 %.reg2mem22.011.reg2mem.0, %11
  %14 = icmp eq i64 %13, 0
  %15 = sub i64 %11, %13
  %16 = select i1 %14, i64 0, i64 %15
  %17 = add i64 %10, %.reg2mem22.011.reg2mem.0
  %18 = add i64 %17, %16
  %19 = add i64 %.reg2mem14.0, 1
  %20 = getelementptr ptr, ptr %0, i64 %19
  %21 = load i64, ptr %20, align 4
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %._crit_edge, label %.lr.ph

._crit_edge:                                      ; preds = %.lr.ph, %1
  %.reg2mem22.0.lcssa.reg2mem.0 = phi i64 [ 0, %1 ], [ %18, %.lr.ph ]
  %.reg2mem20.0.lcssa.reg2mem.0 = phi i64 [ 1, %1 ], [ %12, %.lr.ph ]
  %23 = urem i64 %.reg2mem22.0.lcssa.reg2mem.0, %.reg2mem20.0.lcssa.reg2mem.0
  %24 = icmp eq i64 %23, 0
  %25 = sub i64 %.reg2mem20.0.lcssa.reg2mem.0, %23
  %26 = select i1 %24, i64 0, i64 %25
  %27 = add i64 %26, %.reg2mem22.0.lcssa.reg2mem.0
  %28 = insertvalue { i64, i64 } undef, i64 %27, 0
  %29 = insertvalue { i64, i64 } %28, i64 %.reg2mem20.0.lcssa.reg2mem.0, 1
  ret { i64, i64 } %29
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.umax.i64(i64, i64) #15

define { i64, i64 } @_size_union_typ(ptr nocapture readonly %0) {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load i64, ptr %2, align 4
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %1, %.lr.ph
  %.reg2mem20.010.reg2mem.0 = phi i64 [ %12, %.lr.ph ], [ 1, %1 ]
  %.reg2mem22.011.reg2mem.0 = phi i64 [ %18, %.lr.ph ], [ 0, %1 ]
  %.reg2mem14.0 = phi i64 [ %19, %.lr.ph ], [ 1, %1 ]
  %.in.reg2mem.0 = phi i64 [ %21, %.lr.ph ], [ %3, %1 ]
  %5 = inttoptr i64 %.in.reg2mem.0 to ptr
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr i8, ptr %6, i64 48
  %8 = load ptr, ptr %7, align 8
  %9 = tail call { i64, i64 } %8(ptr nonnull %5)
  %10 = extractvalue { i64, i64 } %9, 0
  %11 = extractvalue { i64, i64 } %9, 1
  %12 = tail call i64 @llvm.umax.i64(i64 %11, i64 %.reg2mem20.010.reg2mem.0)
  %13 = urem i64 %.reg2mem22.011.reg2mem.0, %11
  %14 = icmp eq i64 %13, 0
  %15 = sub i64 %11, %13
  %16 = select i1 %14, i64 0, i64 %15
  %17 = add i64 %10, %.reg2mem22.011.reg2mem.0
  %18 = tail call i64 @llvm.umax.i64(i64 %17, i64 %16)
  %19 = add i64 %.reg2mem14.0, 1
  %20 = getelementptr ptr, ptr %0, i64 %19
  %21 = load i64, ptr %20, align 4
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %.lr.ph.._crit_edge_crit_edge, label %.lr.ph

.lr.ph.._crit_edge_crit_edge:                     ; preds = %.lr.ph
  %23 = add i64 %18, 8
  br label %._crit_edge

._crit_edge:                                      ; preds = %1, %.lr.ph.._crit_edge_crit_edge
  %.reg2mem22.0.lcssa.reg2mem.0 = phi i64 [ %23, %.lr.ph.._crit_edge_crit_edge ], [ 8, %1 ]
  %.reg2mem20.0.lcssa.reg2mem.0 = phi i64 [ %12, %.lr.ph.._crit_edge_crit_edge ], [ 1, %1 ]
  %24 = urem i64 %.reg2mem22.0.lcssa.reg2mem.0, %.reg2mem20.0.lcssa.reg2mem.0
  %25 = icmp eq i64 %24, 0
  %26 = sub i64 %.reg2mem20.0.lcssa.reg2mem.0, %24
  %27 = select i1 %25, i64 0, i64 %26
  %28 = add i64 %27, %.reg2mem22.0.lcssa.reg2mem.0
  %29 = insertvalue { i64, i64 } undef, i64 %28, 0
  %30 = insertvalue { i64, i64 } %29, i64 %.reg2mem20.0.lcssa.reg2mem.0, 1
  ret { i64, i64 } %30
}

define void @_unbox_union_typ({ ptr, i160 } %0, ptr nocapture readonly %1, ptr nocapture writeonly %2) {
  %4 = alloca { ptr, i160 }, align 8
  %.fca.0.extract = extractvalue { ptr, i160 } %0, 0
  store ptr %.fca.0.extract, ptr %4, align 8
  %.fca.1.extract = extractvalue { ptr, i160 } %0, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %4, i64 8
  store i160 %.fca.1.extract, ptr %.fca.1.gep, align 8
  %5 = getelementptr i8, ptr %1, i64 8
  %6 = load i64, ptr %5, align 4
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %_size_union_typ.exit, label %.lr.ph.i

.lr.ph.i:                                         ; preds = %3, %.lr.ph.i
  %.reg2mem20.010.reg2mem.0.i = phi i64 [ %15, %.lr.ph.i ], [ 1, %3 ]
  %.reg2mem22.011.reg2mem.0.i = phi i64 [ %21, %.lr.ph.i ], [ 0, %3 ]
  %.reg2mem14.0.i = phi i64 [ %22, %.lr.ph.i ], [ 1, %3 ]
  %.in.reg2mem.0.i = phi i64 [ %24, %.lr.ph.i ], [ %6, %3 ]
  %8 = inttoptr i64 %.in.reg2mem.0.i to ptr
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr i8, ptr %9, i64 48
  %11 = load ptr, ptr %10, align 8
  %12 = tail call { i64, i64 } %11(ptr nonnull %8)
  %13 = extractvalue { i64, i64 } %12, 0
  %14 = extractvalue { i64, i64 } %12, 1
  %15 = tail call i64 @llvm.umax.i64(i64 %14, i64 %.reg2mem20.010.reg2mem.0.i)
  %16 = urem i64 %.reg2mem22.011.reg2mem.0.i, %14
  %17 = icmp eq i64 %16, 0
  %18 = sub i64 %14, %16
  %19 = select i1 %17, i64 0, i64 %18
  %20 = add i64 %13, %.reg2mem22.011.reg2mem.0.i
  %21 = tail call i64 @llvm.umax.i64(i64 %20, i64 %19)
  %22 = add i64 %.reg2mem14.0.i, 1
  %23 = getelementptr ptr, ptr %1, i64 %22
  %24 = load i64, ptr %23, align 4
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %.lr.ph.._crit_edge_crit_edge.i, label %.lr.ph.i

.lr.ph.._crit_edge_crit_edge.i:                   ; preds = %.lr.ph.i
  %26 = add i64 %21, 8
  br label %_size_union_typ.exit

_size_union_typ.exit:                             ; preds = %3, %.lr.ph.._crit_edge_crit_edge.i
  %.reg2mem22.0.lcssa.reg2mem.0.i = phi i64 [ %26, %.lr.ph.._crit_edge_crit_edge.i ], [ 8, %3 ]
  %.reg2mem20.0.lcssa.reg2mem.0.i = phi i64 [ %15, %.lr.ph.._crit_edge_crit_edge.i ], [ 1, %3 ]
  %27 = trunc i160 %.fca.1.extract to i64
  %28 = inttoptr i64 %27 to ptr
  %29 = urem i64 %.reg2mem22.0.lcssa.reg2mem.0.i, %.reg2mem20.0.lcssa.reg2mem.0.i
  %30 = icmp eq i64 %29, 0
  %31 = sub i64 %.reg2mem20.0.lcssa.reg2mem.0.i, %29
  %32 = select i1 %30, i64 0, i64 %31
  %33 = add i64 %32, %.reg2mem22.0.lcssa.reg2mem.0.i
  %34 = icmp slt i64 %33, 17
  %35 = icmp eq i64 %33, 32
  %36 = select i1 %34, ptr %.fca.1.gep, ptr %28
  %37 = select i1 %35, ptr %4, ptr %36
  call void @llvm.memcpy.inline.p0.p0.i64(ptr align 1 %2, ptr align 1 %37, i64 %33, i1 false)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, i160 } @_box_Default(ptr nocapture readonly %fat_ptr, ptr nocapture readnone %parameterization) #0 {
  %vptr = load ptr, ptr %fat_ptr, align 8
  %1 = insertvalue { ptr, i160 } undef, ptr %vptr, 0
  %2 = getelementptr i8, ptr %fat_ptr, i64 8
  %3 = load i160, ptr %2, align 4
  %4 = insertvalue { ptr, i160 } %1, i160 %3, 1
  ret { ptr, i160 } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @_unbox_Default({ ptr, i160 } %fat_ptr, ptr nocapture readnone %parameterization, ptr nocapture writeonly %destination) #4 {
  %vptr = extractvalue { ptr, i160 } %fat_ptr, 0
  %data = extractvalue { ptr, i160 } %fat_ptr, 1
  %dest_data = getelementptr i8, ptr %destination, i64 8
  store ptr %vptr, ptr %destination, align 8
  store i160 %data, ptr %dest_data, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @anoint_trampoline(ptr %tramp) local_unnamed_addr #16 {
  %oldProtect = alloca i32, align 4
  %result = call i32 @VirtualProtect(ptr %tramp, i64 16, i32 64, ptr nonnull %oldProtect) #16
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
declare i32 @VirtualProtect(ptr, i64, i32, ptr) local_unnamed_addr #16

define noundef ptr @coroutine_create(ptr %func, ptr %arg_passer) local_unnamed_addr {
  %stack = tail call noalias dereferenceable_or_null(8388608) ptr @VirtualAlloc(ptr null, i64 8388608, i32 12288, i32 4) #33
  store ptr %func, ptr %stack, align 8
  %stack_top = getelementptr i8, ptr %stack, i64 8388608
  %stack_top_i64 = ptrtoint ptr %stack_top to i64
  %stack_top_aligned = and i64 %stack_top_i64, -16
  %into_callee_buf = getelementptr i8, ptr %stack, i64 8
  %arg_passer_slot = getelementptr i8, ptr %stack, i64 32
  %into_callee_second_word = getelementptr i8, ptr %stack, i64 16
  %into_callee_third_word = getelementptr i8, ptr %stack, i64 24
  store i64 %stack_top_aligned, ptr %into_callee_buf, align 4
  store i64 %stack_top_aligned, ptr %into_callee_third_word, align 4
  store ptr %arg_passer, ptr %arg_passer_slot, align 8
  %is_finished = getelementptr i8, ptr %stack, i64 40
  store i1 false, ptr %is_finished, align 1
  tail call void @coroutine_trampoline(ptr %into_callee_second_word)
  ret ptr %stack
}

; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,zeroed") allocsize(1)
declare noalias ptr @VirtualAlloc(ptr, i64, i32, i32) local_unnamed_addr #17

declare void @coroutine_trampoline(ptr) local_unnamed_addr

define void @setup_landing_pad() {
  %region = tail call noalias dereferenceable_or_null(21474836480) ptr @VirtualAlloc(ptr null, i64 21474836480, i32 12288, i32 4) #33
  store ptr %region, ptr @current_ptr, align 8
  %sp = tail call ptr @llvm.stacksave.p0() #34
  store ptr %sp, ptr @into_caller_buf, align 8
  store ptr blockaddress(@setup_landing_pad, %landing_pad), ptr getelementptr inbounds (i8, ptr @into_caller_buf, i64 8), align 8
  store ptr %sp, ptr getelementptr inbounds (i8, ptr @into_caller_buf, i64 16), align 8
  %stack.i = tail call noalias dereferenceable_or_null(8388608) ptr @VirtualAlloc(ptr null, i64 8388608, i32 12288, i32 4) #33
  store ptr @setup_landing_pad, ptr %stack.i, align 8
  %stack_top.i = getelementptr i8, ptr %stack.i, i64 8388608
  %stack_top_i64.i = ptrtoint ptr %stack_top.i to i64
  %stack_top_aligned.i = and i64 %stack_top_i64.i, -16
  %into_callee_buf.i = getelementptr i8, ptr %stack.i, i64 8
  %arg_passer_slot.i = getelementptr i8, ptr %stack.i, i64 32
  %into_callee_second_word.i = getelementptr i8, ptr %stack.i, i64 16
  %into_callee_third_word.i = getelementptr i8, ptr %stack.i, i64 24
  store i64 %stack_top_aligned.i, ptr %into_callee_buf.i, align 4
  store i64 %stack_top_aligned.i, ptr %into_callee_third_word.i, align 4
  store ptr @arg_passer, ptr %arg_passer_slot.i, align 8
  %is_finished.i = getelementptr i8, ptr %stack.i, i64 40
  store i1 false, ptr %is_finished.i, align 1
  tail call void @coroutine_trampoline(ptr %into_callee_second_word.i)
  store ptr %stack.i, ptr @current_coroutine, align 8
  %retval.i = load i1, ptr @always_one, align 1
  br i1 %retval.i, label %exit, label %landing_pad

landing_pad:                                      ; preds = %0
  %ok = tail call i32 @printf(ptr nonnull @string_string.59, ptr nonnull @exception_message)
  %cc.unpack = load ptr, ptr @current_coroutine, align 8
  %cc1 = insertvalue { ptr } poison, ptr %cc.unpack, 0
  tail call void @report_exception({ ptr } %cc1)
  tail call void @exit()
  unreachable

exit:                                             ; preds = %0
  ret void
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn
declare ptr @llvm.stacksave.p0() #18

define void @arg_passer(ptr nocapture readonly %current_coroutine) {
  %func = load ptr, ptr %current_coroutine, align 8
  tail call void %func()
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: none, inaccessiblemem: none)
define i1 @returns_one() local_unnamed_addr #19 {
  %retval = load i1, ptr @always_one, align 1
  ret i1 %retval
}

declare void @exit() local_unnamed_addr

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, inaccessiblemem: none)
define i32 @get_offset(ptr nocapture readonly %vptr, ptr nocapture readonly %id_ptr) local_unnamed_addr #9 {
  %id = load i64, ptr %id_ptr, align 4
  %hash_coef_ptr = getelementptr i8, ptr %vptr, i64 8
  %tbl_size_ptr = getelementptr i8, ptr %vptr, i64 16
  %offset_tbl_ptr = getelementptr i8, ptr %vptr, i64 40
  %hash_coef = load i64, ptr %hash_coef_ptr, align 4
  %tbl_size = load i64, ptr %tbl_size_ptr, align 4
  %offset_tbl = load ptr, ptr %offset_tbl_ptr, align 8
  %product.i = mul i64 %hash_coef, %id
  %shifted.i = lshr i64 %product.i, 32
  %xored.i = xor i64 %shifted.i, %product.i
  %hash.i = and i64 %xored.i, %tbl_size
  %offset_ptr = getelementptr i32, ptr %offset_tbl, i64 %hash.i
  %offset = load i32, ptr %offset_ptr, align 4
  ret i32 %offset
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define i64 @hash_to_index(i64 %tbl_size, i64 %hash_coef, i64 %cand_id) local_unnamed_addr #5 {
  %product = mul i64 %cand_id, %hash_coef
  %shifted = lshr i64 %product, 32
  %xored = xor i64 %shifted, %product
  %hash = and i64 %xored, %tbl_size
  ret i64 %hash
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, inaccessiblemem: write)
define void @assume_offset(ptr nocapture readonly %fat_ptr, ptr nocapture readonly %id_ptr) local_unnamed_addr #20 {
  %vptr = load ptr, ptr %fat_ptr, align 8
  %id.i = load i64, ptr %id_ptr, align 4
  %hash_coef_ptr.i = getelementptr i8, ptr %vptr, i64 8
  %tbl_size_ptr.i = getelementptr i8, ptr %vptr, i64 16
  %offset_tbl_ptr.i = getelementptr i8, ptr %vptr, i64 40
  %hash_coef.i = load i64, ptr %hash_coef_ptr.i, align 4
  %tbl_size.i = load i64, ptr %tbl_size_ptr.i, align 4
  %offset_tbl.i = load ptr, ptr %offset_tbl_ptr.i, align 8
  %product.i.i = mul i64 %hash_coef.i, %id.i
  %shifted.i.i = lshr i64 %product.i.i, 32
  %xored.i.i = xor i64 %shifted.i.i, %product.i.i
  %hash.i.i = and i64 %xored.i.i, %tbl_size.i
  %offset_ptr.i = getelementptr i32, ptr %offset_tbl.i, i64 %hash.i.i
  %offset.i = load i32, ptr %offset_ptr.i, align 4
  %destination = getelementptr i8, ptr %fat_ptr, i64 24
  %dest_value = load i32, ptr %destination, align 4
  %eq = icmp eq i32 %dest_value, %offset.i
  tail call void @llvm.assume(i1 %eq) #30
  ret void
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write)
declare void @llvm.assume(i1 noundef) #21

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define void @set_offset(ptr nocapture %fat_ptr, ptr nocapture readonly %id_ptr) local_unnamed_addr #1 {
  %vptr = load ptr, ptr %fat_ptr, align 8
  %id.i = load i64, ptr %id_ptr, align 4
  %hash_coef_ptr.i = getelementptr i8, ptr %vptr, i64 8
  %tbl_size_ptr.i = getelementptr i8, ptr %vptr, i64 16
  %offset_tbl_ptr.i = getelementptr i8, ptr %vptr, i64 40
  %hash_coef.i = load i64, ptr %hash_coef_ptr.i, align 4
  %tbl_size.i = load i64, ptr %tbl_size_ptr.i, align 4
  %offset_tbl.i = load ptr, ptr %offset_tbl_ptr.i, align 8
  %product.i.i = mul i64 %hash_coef.i, %id.i
  %shifted.i.i = lshr i64 %product.i.i, 32
  %xored.i.i = xor i64 %shifted.i.i, %product.i.i
  %hash.i.i = and i64 %xored.i.i, %tbl_size.i
  %offset_ptr.i = getelementptr i32, ptr %offset_tbl.i, i64 %hash.i.i
  %offset.i = load i32, ptr %offset_ptr.i, align 4
  %destination = getelementptr i8, ptr %fat_ptr, i64 24
  store i32 %offset.i, ptr %destination, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define i1 @subtype_test(i64 %tbl_size, i64 %hash_coef, i64 %cand_id, i64 %candidate, ptr nocapture readonly %supertype_tbl) #22 {
  %product.i = mul i64 %cand_id, %hash_coef
  %shifted.i = lshr i64 %product.i, 32
  %xored.i = xor i64 %shifted.i, %product.i
  %hash.i = and i64 %xored.i, %tbl_size
  %gep = getelementptr i64, ptr %supertype_tbl, i64 %hash.i
  %stored_val = load i64, ptr %gep, align 4
  %eq = icmp eq i64 %stored_val, %candidate
  ret i1 %eq
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define i1 @subtype_test_wrapper(ptr nocapture readonly %f, i64 %tbl_size, i64 %hash_coef, i64 %cand_id, i64 %candidate, ptr readonly %supertype_tbl) local_unnamed_addr #22 {
  %result = tail call i1 %f(i64 %tbl_size, i64 %hash_coef, i64 %cand_id, i64 %candidate, ptr %supertype_tbl) #0
  ret i1 %result
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define void @arg_buffer_filler(ptr nocapture readnone %coroutine) local_unnamed_addr #5 {
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: none, inaccessiblemem: none)
define ptr @get_current_coroutine() local_unnamed_addr #19 {
  %current_coroutine = load ptr, ptr @current_coroutine, align 8
  ret ptr %current_coroutine
}

; Function Attrs: noinline nounwind memory(readwrite)
define preserve_nonecc void @context_switch(ptr nocapture writeonly %from_buf, ptr %to_buf) #23 {
  %from_buf_second_word = getelementptr i8, ptr %from_buf, i64 8
  %from_buf_third_word = getelementptr i8, ptr %from_buf, i64 16
  store ptr blockaddress(@context_switch, %return_from_switch), ptr %from_buf_second_word, align 8
  %sp = tail call ptr @llvm.stacksave.p0() #34
  store ptr %sp, ptr %from_buf, align 8
  store ptr %sp, ptr %from_buf_third_word, align 8
  %retval.i = load i1, ptr @always_one, align 1
  br i1 %retval.i, label %do_switch, label %return_from_switch

do_switch:                                        ; preds = %0
  tail call void @llvm.eh.sjlj.longjmp(ptr %to_buf) #24
  unreachable

return_from_switch:                               ; preds = %0
  ret void
}

; Function Attrs: noreturn nounwind
declare void @llvm.eh.sjlj.longjmp(ptr) #24

; Function Attrs: nounwind
define void @coroutine_yield(ptr nocapture writeonly %current_coroutine) local_unnamed_addr #25 {
  %into_callee_buf = getelementptr i8, ptr %current_coroutine, i64 8
  tail call preserve_nonecc void @context_switch(ptr nocapture writeonly %into_callee_buf, ptr nonnull @into_caller_buf) #32
  ret void
}

; Function Attrs: nounwind
define void @coroutine_call(ptr %coroutine) local_unnamed_addr #25 {
  %old_into_caller.unpack = load ptr, ptr @into_caller_buf, align 8
  %old_into_caller.unpack1 = load ptr, ptr getelementptr inbounds (i8, ptr @into_caller_buf, i64 8), align 8
  %old_into_caller.unpack2 = load ptr, ptr getelementptr inbounds (i8, ptr @into_caller_buf, i64 16), align 8
  %old_coroutine = load ptr, ptr @current_coroutine, align 8
  store ptr %coroutine, ptr @current_coroutine, align 8
  %into_callee_buf = getelementptr i8, ptr %coroutine, i64 8
  tail call preserve_nonecc void @context_switch(ptr nocapture nonnull writeonly @into_caller_buf, ptr %into_callee_buf) #32
  store ptr %old_coroutine, ptr @current_coroutine, align 8
  store ptr %old_into_caller.unpack, ptr @into_caller_buf, align 8
  store ptr %old_into_caller.unpack1, ptr getelementptr inbounds (i8, ptr @into_caller_buf, i64 8), align 8
  store ptr %old_into_caller.unpack2, ptr getelementptr inbounds (i8, ptr @into_caller_buf, i64 16), align 8
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #26

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #26

; Function Attrs: nofree nounwind
declare noundef i32 @puts(ptr nocapture noundef readonly) local_unnamed_addr #10

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #27

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #27

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #28

attributes #0 = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read) }
attributes #1 = { mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none) }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #4 = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write) }
attributes #5 = { mustprogress nofree norecurse nosync nounwind willreturn memory(none) }
attributes #6 = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: readwrite) }
attributes #7 = { mustprogress nofree norecurse nosync nounwind willreturn memory(readwrite, argmem: none, inaccessiblemem: none) }
attributes #8 = { mustprogress nofree norecurse nosync nounwind willreturn memory(readwrite, argmem: read, inaccessiblemem: none) }
attributes #9 = { mustprogress nofree norecurse nosync nounwind willreturn memory(read, inaccessiblemem: none) }
attributes #10 = { nofree nounwind }
attributes #11 = { mustprogress willreturn memory(read, argmem: readwrite, inaccessiblemem: none) }
attributes #12 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: read) }
attributes #13 = { mustprogress nofree norecurse nosync nounwind willreturn allockind("alloc,zeroed") allocsize(0) memory(readwrite, argmem: none, inaccessiblemem: none) "alloc-family"="malloc" }
attributes #14 = { mustprogress nofree noinline norecurse nosync nounwind willreturn allockind("alloc,zeroed") allocsize(0) memory(argmem: readwrite) "alloc-family"="malloc" }
attributes #15 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #16 = { mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #17 = { mustprogress nofree nounwind willreturn allockind("alloc,zeroed") allocsize(1) "alloc-family"="malloc" }
attributes #18 = { mustprogress nocallback nofree nosync nounwind willreturn }
attributes #19 = { mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: none, inaccessiblemem: none) }
attributes #20 = { mustprogress nofree norecurse nosync nounwind willreturn memory(read, inaccessiblemem: write) }
attributes #21 = { mustprogress nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write) }
attributes #22 = { mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read) }
attributes #23 = { noinline nounwind memory(readwrite) }
attributes #24 = { noreturn nounwind }
attributes #25 = { nounwind }
attributes #26 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #27 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #28 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #29 = { mustprogress nofree nounwind willreturn allockind("alloc,zeroed") allocsize(0) "alloc-family"="malloc" }
attributes #30 = { mustprogress nofree nosync nounwind willreturn memory(inaccessiblemem: write) }
attributes #31 = { mustprogress nofree nosync nounwind willreturn memory(argmem: read) }
attributes #32 = { nounwind memory(readwrite) }
attributes #33 = { mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(1) "alloc-family"="malloc" }
attributes #34 = { mustprogress nofree nosync nounwind willreturn }

!llvm.module.flags = !{!0}

!0 = !{i32 2, !"Debug Info Version", i32 3}
