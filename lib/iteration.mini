import builtins;

class Pair[T, U] {

	@first : T
	@second : U

	def init(@first : T, @second : U) {
	}
    #[ret == @first]
	def first() -> T {
		return @first;
	}
    #[ret == @second]
	def second() -> U {
		return @second;
	}
}

class Container {
    @elems_reg : Region
}

class Iterator[T] extends Container {

    @referent_reg : Region

    regions { @elems_reg == @referent_reg.elems_reg }

    #[ret == @elems_reg]
	abstract def next() -> T | Nil {}
}

class Iterable[T] extends Container {

    #[ret.referent_reg == self]
	abstract def iterator() -> Iterator[T] {
    }
	def each(f : (T)) {
        for x in self { f.call(x); }
    }
    #[ret == accumulator]
    def reduce(accumulator : T, f : (T, T) -> T) -> T {
        for x in self { accumulator = f.call(accumulator, x); }
        return accumulator;
    }
    def all(f : (T) -> Bool) -> Bool {
        for x in self { if not f.call(x) { return false; } }
        return true;
    }
    def any(f : (T) -> Bool) -> Bool {
        for x in self { if f.call(x) { return true; } }
        return false;
    }
    #[ret.iterable == self, ret.f == f]
    def map[U](f : (T) -> U) -> MapIterable[T, U] {
        return MapIterable[T, U].new(self, f);
    }
    #[ret.iterable == self, ret.f == f]
    def filter(f : (T) -> Bool) -> FilterIterable[T] {
        return FilterIterable[T].new(self, f);
    }
    #[ret.first == self, ret.second == other]
    def chain(other : Iterable[T]) -> ChainIterable[T] {
        return ChainIterable[T].new(self, other);
    }
    #[ret.first == self, ret.second == other]
    def interleave(other : Iterable[T]) -> InterleaveIterable[T] {
        return InterleaveIterable[T].new(self, other);
    }
    #[ret.first == self, ret.second == other]
    def zip[U](other : Iterable[U]) -> ZipIterable[T, U] {
        return ZipIterable[T, U].new(self, other);
    }
    #[ret.first == self, ret.second == other]
    def product[U](other : Iterable[U]) -> ProductIterable[T, U] {
        return ProductIterable[T, U].new(self, other);
    }
}

class MapIterable[T, U] extends Iterable[U] {
    @iterable : Iterable[T]
    @f : (T) -> U

    regions { @elems_reg == @iterable.elems_reg }

    def init(@iterable : Iterable[T], @f : (T) -> U) {}

    def iterator() -> MapIterator[T, U] {
        return MapIterator[T, U].new(@iterable.iterator(), @f);
    }
}

class MapIterator[T, U] extends Iterator[U] {
    @iterator : Iterator[T]
    @f : (T) -> U

    regions { @referent_reg == @iterator }

    def init(@iterator : Iterator[T], @f : (T) -> U) {}

    def next() -> U | Nil {
        next = @iterator.next();
        if next is T { return @f.call(next); }
        return nil;
    }
}

class FilterIterable[T] extends Iterable[T] {
    @iterable : Iterable[T]
    @f : (T) -> Bool

    regions { @elems_reg == @iterable.elems_reg }

    def init(@iterable : Iterable[T], @f : (T) -> Bool) {}

    def iterator() -> FilterIterator[T] {
        return FilterIterator[T].new(@iterable.iterator(), @f);
    }
}

class FilterIterator[T] extends Iterator[T] {
    @iterator : Iterator[T]
    @f : (T) -> Bool

    regions { @referent_reg == @iterator }
    
    def init(@iterator : Iterator[T], @f : (T) -> Bool) {}

    def next() -> T | Nil {
        next = @iterator.next();
        while next is T {
            if @f.call(next) { return next; }
            next = @iterator.next();
        }
        return nil;
    }
}

class ChainIterable[T] extends Iterable[T] {
    @first : Iterable[T]
    @second : Iterable[T]

    regions {
        @first == @second,
        @elems_reg == @first.elems_reg
    }

    def init(@first : Iterable[T], @second : Iterable[T]) {}

    def iterator() -> ChainIterator[T] {
        return ChainIterator[T].new(@first.iterator(), @second.iterator());
    }
}

class ChainIterator[T] extends Iterator[T] {
    @first : Iterator[T]
    @second : Iterator[T]
    @on_first : Bool

    regions {
        @referent_reg == @first,
        @referent_reg == @second
    }

    def init(@first : Iterator[T], @second : Iterator[T]) {
        @on_first = true;
    }
    def next() -> T | Nil {
        if not @on_first { return @second.next(); }
        next = @first.next();
        if next is T { return next; }
        @on_first = false;
    }
}

class InterleaveIterable[T] extends Iterable[T] {
    @first : Iterable[T]
    @second : Iterable[T]

    regions {
        @first == @second,
        @elems_reg == @first.elems_reg
    }

    def init(@first : Iterable[T], @second : Iterable[T]) {}

    def iterator() -> InterleaveIterator[T] {
        return InterleaveIterator[T].new(@first.iterator(), @second.iterator());
    }
}

class InterleaveIterator[T] extends Iterator[T] {
    @first : Iterator[T]
    @second : Iterator[T]
    @on_first : Bool

    regions {
        @referent_reg == @first,
        @referent_reg == @second
    }

    def init(@first : Iterator[T], @second : Iterator[T]) {
        @on_first = true;
    }
    def next() -> T | Nil {
        if @on_first {
            @on_first = false;
            return @first.next();
        }
        @on_first = true;
        return @second.next();
    }
}

class ZipIterable[T, U] extends Iterable[Pair[T, U]] {
    @first : Iterable[T]
    @second : Iterable[U]

    regions {
        @elems_reg < @first.elems_reg,
        @elems_reg < @second.elems_reg
    }

    def init(@first : Iterable[T], @second : Iterable[U]) {}

    def iterator() -> ZipIterator[T, U] {
        return ZipIterator[T, U].new(@first.iterator(), @second.iterator());
    }
}

class ZipIterator[T, U] extends Iterator[Pair[T, U]] {
    @first : Iterator[T]
    @second : Iterator[U]

    regions {
        @elems_reg < @first.elems_reg,
        @elems_reg < @second.elems_reg
    }

    def init(@first : Iterator[T], @second : Iterator[U]) {
    }

    def next() -> Pair[T, U] | Nil {
        first_elem = @first.next();
        second_elem = @second.next();
        if first_elem is T {
            if second_elem is U { return Pair[T, U].new(first_elem, second_elem); }
        }
        return nil;
    }
}

class ProductIterable[T, U] extends Iterable[Pair[T, U]] {
    @first : Iterable[T]
    @second : Iterable[U]

    regions {
        @elems_reg < @first.elems_reg,
        @elems_reg < @second.elems_reg
    }

    def init(@first : Iterable[T], @second : Iterable[U]) {
    }
    def iterator() -> ProductIterator[T, U] {
        return ProductIterator[T, U].new(@first.iterator(), @second);
    }
}

class ProductIterator[T, U] extends Iterator[Pair[T, U]] {
    @first_iterator : Iterator[T]
    @second_iterator : Iterator[U]
    @second_iterable : Iterable[U]
    @current_first : T | Nil

    regions {
        @current_first == @first_iterator.elems_reg,
        @second_iterator.referent_reg == @second_iterable,
        @elems_reg < @first_iterator.elems_reg,
        @elems_reg < @second_iterator.elems_reg
    }

    def init(@first_iterator : Iterator[T], @second_iterable : Iterable[U]) {
        @second_iterator = @second_iterable.iterator();
        @current_first = @first_iterator.next();
    }

    def next() -> Pair[T, U] | Nil {
        current_first = @current_first;
        while current_first is T {
            second_elem = @second_iterator.next();
            if second_elem is U { return Pair[T, U].new(current_first, second_elem); }
            @current_first = @first_iterator.next();
            @second_iterator = @second_iterable.iterator();
            current_first = @current_first;
        }
        return nil;
    }
}
