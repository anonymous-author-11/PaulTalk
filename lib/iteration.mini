import builtins;

class Pair[T, U] {

	@first : T
	@second : U

	def init(@first : T, @second : U) {
	}
    #[ret == @first]
	def first() -> T {
		return @first;
	}
    #[ret == @second]
	def second() -> U {
		return @second;
	}
}

class Container {
    @elems_reg : Region
}

class Iterator[T] extends Container {

    #[ret == @elems_reg]
	abstract def next() -> T? {}
}

class Iterable[T] extends Container {

    #[ret.elems_reg == @elems_reg]
	abstract def iterator() -> Iterator[T] {
    }
	def each(f : (T)) {
        for x in self { f.call(x); }
    }
    #[ret == accumulator]
    def reduce(accumulator : T, f : (T, T) -> T) -> T {
        for x in self { accumulator = f.call(accumulator, x); }
        return accumulator;
    }
    def all(f : (T) -> Bool) -> Bool {
        for x in self { if not f.call(x) { return false; } }
        return true;
    }
    def any(f : (T) -> Bool) -> Bool {
        for x in self { if f.call(x) { return true; } }
        return false;
    }
    #[ret.iterable == self]
    def enumerate() -> Iterable[Pair[i32, T]] {
        return Enumeration{self};
    }
    #[ret.iterable == self, ret.f == f]
    def map[U](f : (T) -> U) -> Iterable[U] {
        return MapIterable{self, f};
    }
    #[ret.iterable == self, ret.f == f]
    def filter(f : (T) -> Bool) -> Iterable[T] {
        return FilterIterable{self, f};
    }
    #[ret.first == self, ret.second == other]
    def chain(other : Iterable[T]) -> Iterable[T] {
        return ChainIterable{self, other};
    }
    #[ret.first == self, ret.second == other]
    def interleave(other : Iterable[T]) -> Iterable[T] {
        return InterleaveIterable{self, other};
    }
    #[ret.first == self, ret.second == other]
    def zip[U](other : Iterable[U]) -> Iterable[Pair[T, U]] {
        return ZipIterable{self, other};
    }
    #[ret.first == self, ret.second == other]
    def product[U](other : Iterable[U]) -> Iterable[Pair[T, U]] {
        return ProductIterable{self, other};
    }
}

// Must be O(1) to get next element
class ConstantTimeIterator[T] extends Iterator[T] {}

// Adapts a Coroutine into an Iterator
// An alternative to writing boilerplate Iterator classes for your types
// Generally less efficient than writing the classes
class CoroIterator[T] extends Iterator[T] {
    @coro : Coroutine[() yields T?]

    def init(@coro : Coroutine[() yields T?]) {}

    def next() -> T? { return @coro.call(); }
}

class Enumeration[T] extends Iterable[Pair[i32, T]] {
    @iterable : Iterable[T]

    def init(@iterable : Iterable[T]) {}

    def iterator() -> Enumerator[T] {
        return Enumerator{@iterable.iterator()};
    }
}

class Enumerator[T] extends Iterator[Pair[i32, T]] {
    @iterator : Iterator[T]
    @index : i32

    def init(@iterator : Iterator[T]) {
        @index = 0;
    }

    def next() -> Pair[i32, T]? {
        next = @iterator.next();
        if next is T {
            old_index = @index;
            @index = @index + 1;
            return Pair{old_index, next};
        }
        return nil;
    }
}

class MapIterable[T, U] extends Iterable[U] {
    @iterable : Iterable[T]
    @f : (T) -> U

    regions { @elems_reg == @iterable.elems_reg }

    def init(@iterable : Iterable[T], @f : (T) -> U) {}

    def iterator() -> MapIterator[T, U] {
        return MapIterator{@iterable.iterator(), @f};
    }
}

class MapIterator[T, U] extends Iterator[U] {
    @iterator : Iterator[T]
    @f : (T) -> U

    regions { @elems_reg == @iterator.elems_reg }

    def init(@iterator : Iterator[T], @f : (T) -> U) {}

    def next() -> U? {
        next = @iterator.next();
        if next is T { return @f.call(next); }
        return nil;
    }
}

class FilterIterable[T] extends Iterable[T] {
    @iterable : Iterable[T]
    @f : (T) -> Bool

    regions { @elems_reg == @iterable.elems_reg }

    def init(@iterable : Iterable[T], @f : (T) -> Bool) {}

    def iterator() -> FilterIterator[T] {
        return FilterIterator{@iterable.iterator(), @f};
    }
}

class FilterIterator[T] extends Iterator[T] {
    @iterator : Iterator[T]
    @f : (T) -> Bool

    regions { @elems_reg == @iterator.elems_reg }
    
    def init(@iterator : Iterator[T], @f : (T) -> Bool) {}

    def next() -> T? {
        next = @iterator.next();
        while next is T {
            if @f.call(next) { return next; }
            next = @iterator.next();
        }
        return nil;
    }
}

class ChainIterable[T] extends Iterable[T] {
    @first : Iterable[T]
    @second : Iterable[T]

    regions {
        @first == @second,
        @elems_reg == @first.elems_reg
    }

    def init(@first : Iterable[T], @second : Iterable[T]) {}

    def iterator() -> ChainIterator[T] {
        return ChainIterator{@first.iterator(), @second.iterator()};
    }
}

class ChainIterator[T] extends Iterator[T] {
    @first : Iterator[T]
    @second : Iterator[T]
    @on_first : Bool

    regions {
        @first == @second,
        @elems_reg == @first.elems_reg
    }

    def init(@first : Iterator[T], @second : Iterator[T]) {
        @on_first = true;
    }
    def next() -> T? {
        if @on_first { 
            next = @first.next();
            if next is T { return next; }
            @on_first = false;
        }
        return @second.next();
    }
}

class InterleaveIterable[T] extends Iterable[T] {
    @first : Iterable[T]
    @second : Iterable[T]

    regions {
        @first == @second,
        @elems_reg == @first.elems_reg
    }

    def init(@first : Iterable[T], @second : Iterable[T]) {}

    def iterator() -> InterleaveIterator[T] {
        return InterleaveIterator{@first.iterator(), @second.iterator()};
    }
}

class InterleaveIterator[T] extends Iterator[T] {
    @first : Iterator[T]
    @second : Iterator[T]
    @on_first : Bool

    regions {
        @first == @second,
        @elems_reg == @first.elems_reg
    }

    def init(@first : Iterator[T], @second : Iterator[T]) {
        @on_first = true;
    }
    def next() -> T? {
        if @on_first {
            @on_first = false;
            nxt = @first.next();
            if nxt is T { return nxt; }
            return @second.next();
        }
        @on_first = true;
        nxt = @second.next();
        if nxt is T { return nxt; }
        return @first.next();
    }
}

class ZipIterable[T, U] extends Iterable[Pair[T, U]] {
    @first : Iterable[T]
    @second : Iterable[U]

    regions {
        @elems_reg < @first.elems_reg,
        @elems_reg < @second.elems_reg
    }

    def init(@first : Iterable[T], @second : Iterable[U]) {}

    def iterator() -> ZipIterator[T, U] {
        return ZipIterator{@first.iterator(), @second.iterator()};
    }
}

class ZipIterator[T, U] extends Iterator[Pair[T, U]] {
    @first : Iterator[T]
    @second : Iterator[U]

    regions {
        @elems_reg < @first.elems_reg,
        @elems_reg < @second.elems_reg
    }

    def init(@first : Iterator[T], @second : Iterator[U]) {
    }

    def next() -> Pair[T, U]? {
        first_elem = @first.next();
        second_elem = @second.next();
        // notice the sophistication of the flow-typing
        if first_elem is Nil or second_elem is Nil { return nil; }
        return Pair{first_elem, second_elem};
    }
}

class ProductIterable[T, U] extends Iterable[Pair[T, U]] {
    @first : Iterable[T]
    @second : Iterable[U]

    regions {
        @elems_reg < @first.elems_reg,
        @elems_reg < @second.elems_reg
    }

    def init(@first : Iterable[T], @second : Iterable[U]) {
    }
    def iterator() -> ProductIterator[T, U] {
        return ProductIterator{@first.iterator(), @second};
    }
}

class ProductIterator[T, U] extends Iterator[Pair[T, U]] {
    @first_iterator : Iterator[T]
    @second_iterator : Iterator[U]
    @second_iterable : Iterable[U]
    @current_first : T?

    regions {
        @current_first == @first_iterator.elems_reg,
        @second_iterator.elems_reg == @second_iterable.elems_reg,
        @elems_reg < @first_iterator.elems_reg,
        @elems_reg < @second_iterator.elems_reg
    }

    def init(@first_iterator : Iterator[T], @second_iterable : Iterable[U]) {
        @second_iterator = @second_iterable.iterator();
        @current_first = @first_iterator.next();
    }

    def next() -> Pair[T, U]? {
        current_first = @current_first;
        while current_first is T {
            second_elem = @second_iterator.next();
            if second_elem is U { return Pair{current_first, second_elem}; }
            @current_first = @first_iterator.next();
            @second_iterator = @second_iterable.iterator();
            current_first = @current_first;
        }
        return nil;
    }
}

