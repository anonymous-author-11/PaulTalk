import builtins;

class Pair[T, U] {
	@first : T
	@second : U

    getters @first, @second
    setters @first, @second

	def init(@first : T, @second : U) {}

}

class Container {
    @elems_reg : Region
}

class Iterator[T] extends Container {

	abstract def next() -> T? {
    } ~> { ret holds @elems_reg }

}

class Iterable[T] extends Container {

	abstract def iterator() -> Iterator[T] {
    } ~> { ret.elems_reg == @elems_reg }

	def each(f : (T)) {
        for x in self { f.call(x); }
    }
    
    def reduce(accumulator : T, f : (T, T) -> T) -> T {
        for x in self { accumulator = f.call(accumulator, x); }
        return accumulator;
    } ~> { ret == accumulator }

    def all(f : (T) -> Bool) -> Bool {
        for x in self { if not f.call(x) { return false; } }
        return true;
    }

    def any(f : (T) -> Bool) -> Bool {
        for x in self { if f.call(x) { return true; } }
        return false;
    }
    
    def enumerate() -> Enumeration[T] {
        return Enumerated{self};
    } ~> { ret.iterable_reg == self }

    def map[U](f : (T) -> U) -> Mapping[T, U] {
        return Mapped{self, f};
    } ~> { ret.iterable_reg == self, ret.f == f }
    
    def filter(f : (T) -> Bool) -> Filtration[T] {
        return Filtered{self, f};
    } ~> { ret.iterable_reg == self, ret.f == f }
    
    def chain(other : Iterable[T]) -> Chaining[T] {
        return Chained{self, other};
    } ~> { ret.first_iterable_reg == self, ret.second_iterable_reg == other }
    
    def interleave(other : Iterable[T]) -> Interleaving[T] {
        return Interleaved{self, other};
    } ~> { ret.first_iterable_reg == self, ret.second_iterable_reg == other }
    
    def zip[U](other : Iterable[U]) -> Zipping[T, U] {
        return Zipped{self, other};
    } ~> { ret.first_iterable_reg == self, ret.second_iterable_reg == other }
    
    def product[U](other : Iterable[U]) -> Productization[T, U] {
        return Productized{self, other};
    } ~> { ret.first_iterable_reg == self, ret.second_iterable_reg == other }
}

// Must be O(1) to get next element
// ( O(1) with respect to what? )
class ConstantTimeIterator[T] extends Iterator[T] {}

// Adapts a Coroutine into an Iterator
// An alternative to writing boilerplate Iterator classes for your types
// Generally less efficient than writing the classes
class CoroIterator[T] extends Iterator[T] {
    @coro : Coroutine[() yields T?]

    def init(@coro : Coroutine[() yields T?]) {}

    def next() -> T? { return @coro.call(); }
}

class Wrapping[T] extends Container {
    @iterable_reg : Region

    regions { @elems_reg == @iterable_reg.elems_reg }

    abstract def iterable() -> Iterable[T] {
    } ~> { ret == @iterable_reg }
}

class Wrapped[T] extends Wrapping[T] {
    @iterable : Iterable[T]

    regions { @iterable_reg == @iterable }

    getter @iterable
}

class DualWrapping[T, U] extends Container {

    @first_iterable_reg : Region
    @second_iterable_reg : Region

    regions {
        @elems_reg holds @first_iterable_reg.elems_reg,
        @elems_reg holds @second_iterable_reg.elems_reg
    }

    abstract def first_iterable() -> Iterable[T] {
    } ~> { ret == @first_iterable_reg }

    abstract def second_iterable() -> Iterable[U] {
    } ~> { ret == @second_iterable_reg }
}

class DualWrapped[T, U] extends DualWrapping[T, U]{
    @first_iterable : Iterable[T]
    @second_iterable : Iterable[U]

    regions {
        @first_iterable_reg == @first_iterable,
        @second_iterable_reg == @second_iterable
    }

    getters @first_iterable, @second_iterable
}

class Enumeration[T] extends Wrapping[T], Iterable[Pair[i32, T]] {

    def iterator() -> Enumerator[T] {
        return Enumerator{self.iterable().iterator()};
    }
}

class Enumerated[T] extends Wrapped[T], Enumeration[T] {

    def init(@iterable : Iterable[T]) {}
}

class Enumerator[T] extends Iterator[Pair[i32, T]] {
    @iterator : Iterator[T]
    @index : i32

    regions { @elems_reg == @iterator.elems_reg }

    def init(@iterator : Iterator[T]) {
        @index = 0;
    }

    def next() -> Pair[i32, T]? {
        next = @iterator.next();
        if next is T {
            old_index = @index;
            @index = @index + 1;
            return Pair{old_index, next};
        }
        return nil;
    } ~> { ret.second holds @elems_reg }
}

class Mapping[T, U] extends Wrapping[T], Iterable[U] {
    @f : (T) -> U

    def iterator() -> Mapper[T, U] {
        return Mapper{self.iterable().iterator(), @f};
    } ~> { ret.f == @f }
} 

class Mapped[T, U] extends Wrapped[T], Mapping[T, U] {

    def init(@iterable : Iterable[T], @f : (T) -> U) {}
}

class Mapper[T, U] extends Iterator[U] {
    @iterator : Iterator[T]
    @f : (T) -> U

    regions { @elems_reg == @iterator.elems_reg }

    def init(@iterator : Iterator[T], @f : (T) -> U) {}

    def next() -> U? {
        next = @iterator.next();
        if next is T { return @f.call(next); }
        return nil;
    }
}

class Filtration[T] extends Wrapping[T], Iterable[T] {
    @f : (T) -> Bool

    def iterator() -> Filterer[T] {
        return Filterer{self.iterable().iterator(), @f};
    } ~> { ret.f == @f }
}

class Filtered[T] extends Wrapped[T], Filtration[T] {

    def init(@iterable : Iterable[T], @f : (T) -> Bool) {}
}

class Filterer[T] extends Iterator[T] {
    @iterator : Iterator[T]
    @f : (T) -> Bool

    regions { @elems_reg == @iterator.elems_reg }
    
    def init(@iterator : Iterator[T], @f : (T) -> Bool) {}

    def next() -> T? {
        next = @iterator.next();
        while next is T {
            if @f.call(next) { return next; }
            next = @iterator.next();
        }
        return nil;
    }
}

class Chaining[T] extends DualWrapping[T, T], Iterable[T] {

    def iterator() -> Chainer[T] {
        first_iterator = self.first_iterable().iterator();
        second_iterator = self.second_iterable().iterator();
        return Chainer{first_iterator, second_iterator};
    } ~> { ret.second.elems_reg == @second_iterable_reg.elems_reg, ret.first.elems_reg == @first_iterable_reg.elems_reg}
}

class Chained[T] extends DualWrapped[T, T], Chaining[T] {

    def init(@first_iterable : Iterable[T], @second_iterable : Iterable[T]) {}
}

class Chainer[T] extends Iterator[T] {
    @first : Iterator[T]
    @second : Iterator[T]
    @on_first : Bool

    regions {
        @elems_reg holds @first.elems_reg,
        @elems_reg holds @second.elems_reg
    }

    def init(@first : Iterator[T], @second : Iterator[T]) {
        @on_first = true;
    }
    def next() -> T? {
        if @on_first { 
            next = @first.next();
            if next is T { return next; }
            @on_first = false;
        }
        return @second.next();
    }
}

class Interleaving[T] extends DualWrapping[T, T], Iterable[T] {

    def iterator() -> Interleaver[T] {
        first_iterator = self.first_iterable().iterator();
        second_iterator = self.second_iterable().iterator();
        return Interleaver{first_iterator, second_iterator};
    } ~> { ret.second.elems_reg == @second_iterable_reg.elems_reg, ret.first.elems_reg == @first_iterable_reg.elems_reg}
}

class Interleaved[T] extends DualWrapped[T, T], Interleaving[T] {

    def init(@first_iterable : Iterable[T], @second_iterable : Iterable[T]) {}

}

class Interleaver[T] extends Iterator[T] {
    @first : Iterator[T]
    @second : Iterator[T]
    @on_first : Bool

    regions {
        @elems_reg holds @first.elems_reg,
        @elems_reg holds @second.elems_reg
    }

    def init(@first : Iterator[T], @second : Iterator[T]) {
        @on_first = true;
    }
    def next() -> T? {
        if @on_first {
            @on_first = false;
            nxt = @first.next();
            if nxt is T { return nxt; }
            return @second.next();
        }
        @on_first = true;
        nxt = @second.next();
        if nxt is T { return nxt; }
        return @first.next();
    }
}

class Zipping[T, U] extends DualWrapping[T, U], Iterable[Pair[T, U]] {

    def iterator() -> Zipper[T, U] {
        first_iterator = self.first_iterable().iterator();
        second_iterator = self.second_iterable().iterator();
        return Zipper{first_iterator, second_iterator};
    } ~> { ret.second.elems_reg == @second_iterable_reg.elems_reg, ret.first.elems_reg == @first_iterable_reg.elems_reg}
}

class Zipped[T, U] extends DualWrapped[T, U], Zipping[T, U] {

    def init(@first_iterable : Iterable[T], @second_iterable : Iterable[U]) {}
}

class Zipper[T, U] extends Iterator[Pair[T, U]] {
    @first : Iterator[T]
    @second : Iterator[U]

    regions {
        @elems_reg holds @first.elems_reg,
        @elems_reg holds @second.elems_reg
    }

    def init(@first : Iterator[T], @second : Iterator[U]) {
    }

    def next() -> Pair[T, U]? {
        first_elem = @first.next();
        second_elem = @second.next();
        // notice the sophistication of the flow-typing
        if first_elem is Nil or second_elem is Nil { return nil; }
        return Pair{first_elem, second_elem};
    } ~> { ret.first holds @elems_reg, ret.second holds @elems_reg }
}

class Productization[T, U] extends DualWrapping[T, U], Iterable[Pair[T, U]] {

    def iterator() -> Productizer[T, U] {
        first_iterator = self.first_iterable().iterator();
        return Productizer{first_iterator, self.second_iterable()};
    } ~> { ret.second_iterable == @second_iterable_reg, ret.first_iterator.elems_reg == @first_iterable_reg.elems_reg}
}

class Productized[T, U] extends DualWrapped[T, U], Productization[T, U] {

    def init(@first_iterable : Iterable[T], @second_iterable : Iterable[U]) {}
}

class Productizer[T, U] extends Iterator[Pair[T, U]] {
    @first_iterator : Iterator[T]
    @second_iterator : Iterator[U]
    @second_iterable : Iterable[U]
    @current_first : T?

    regions {
        @elems_reg holds @current_first,
        @elems_reg holds @second_iterator.elems_reg,
        @current_first holds @first_iterator.elems_reg,
        @second_iterator.elems_reg == @second_iterable.elems_reg,
        @second_iterator holds @second_iterable
    }

    def init(@first_iterator : Iterator[T], @second_iterable : Iterable[U]) {
        @second_iterator = @second_iterable.iterator();
        @current_first = @first_iterator.next();
    }

    def next() -> Pair[T, U]? {
        current_first = @current_first;
        while current_first is T {
            second_elem = @second_iterator.next();
            if second_elem is U { return Pair{current_first, second_elem}; }
            @current_first = @first_iterator.next();
            @second_iterator = @second_iterable.iterator();
            current_first = @current_first;
        }
        return nil;
    } ~> { ret.first == @current_first, ret.second holds @second_iterable.elems_reg }
}

