
import open_addressing;

class LinearProbeMap[K, V] extends OpenAddressMap[K, V] {

    // Finds the slot index for a key using LINEAR PROBING.
    // Returns the index where the key is located, OR
    // Returns the index where the key should be inserted (first tombstone or nil).
    // Precondition: @entries_len is a power of 2.
    def find_slot(key: K, hash: i32) -> i32 {
        capacity = @entries_len;
        mask = capacity - 1; // For power-of-two capacity modulo
        current_index = hash bit_and mask;
        first_tombstone_idx = -1; // Index of first tombstone found

        while true {
            entry = @entries.[current_index];
            
            if entry is Nil {
                // Empty slot found. Key is not present beyond this point.
                if first_tombstone_idx == -1 { return current_index; }
                return first_tombstone_idx;
            }

            // entry must be Entry[K,V] here
        
            // Key found? Check hash first (cheap), then equality (potentially expensive).
            if entry.hash() == hash and @eq.call(entry.key(), key) {
                return current_index;
            } 

            // If it's an entry for a *different* key, check if it's a tombstone
            if entry.value() is Tombstone {
                if first_tombstone_idx == -1 {
                    first_tombstone_idx = current_index; // Record the first tombstone spot
                }
            }
            // Else (it's an active entry for a different key), continue probing.
            // --- Linear Probing Step ---
            current_index = (current_index + 1) bit_and mask; // Move to the next slot, wrapping around

            // Loop termination is guaranteed because load factor < 1 ensures at least one nil slot.
        }
    }
}