import std;

extern def clock() -> i64

def min(a : i32, b : i32) -> i32 {
    if a < b { return a; }
    return b;
}

def max(a : i32, b : i32) -> i32 {
    if a > b { return a; }
    return b;
}

class PrimeSieve {
    @sieve : Buffer[Bool]
    @size : i32

    def init(@size : i32) {
        @sieve = Buffer[Bool].new(@size + 1);
        i = 0;
        while i <= @size {
            @sieve.[i] = true;
            i = i + 1;
        }
        @sieve.[0] = false;
        @sieve.[1] = false;
    }

    def generate_primes() {
        sqrt_size = self.isqrt(@size);
        
        i = 3;
        while i <= sqrt_size {
            if @sieve.[i] {
                j = i * i;
                while j <= @size {
                    @sieve.[j] = false;
                    j = j + i + i;
                }
            }
            i = i + 2;
        }
    }

    def count_primes() -> i32 {
        count = 1;
        i = 3;
        while i <= @size {
            if @sieve.[i] { count = count + 1; }
            i = i + 2;
        }
        return count;
    }

    def isqrt(n : i32) -> i32 {
        if n < 2 { return n; }
        
        small = self.isqrt(n >> 2) << 1;
        large = small + 1;
        if large * large > n { return small; }
        return large;
    }
}

class CacheOptimizedSieve {
    @sieve : Buffer[Bool]
    @size : i32
    @cache_size : i32

    def init(@size : i32) {
        @sieve = Buffer[Bool].new(@size + 1);
        @cache_size = 4096 * 8;
        i = 0;
        while i <= @size {
            @sieve.[i] = true;
            i = i + 1;
        }
        @sieve.[0] = false;
        @sieve.[1] = false;
    }

    def generate_primes() {
        sqrt_size = self.isqrt(@size);
        
        segment_low = 0;
        while segment_low <= @size {
            segment_high = min(segment_low + @cache_size - 1, @size);
            
            factor = 3;
            while factor * factor <= segment_high {
                if @sieve.[factor] {
                    first_multiple = max(factor * factor, (segment_low + factor - 1) / factor * factor);
                    j = first_multiple;
                    while j <= segment_high {
                        @sieve.[j] = false;
                        j = j + factor + factor;
                    }
                }
                factor = factor + 2;
            }
            
            segment_low = segment_low + @cache_size;
        }
    }

    def count_primes() -> i32 {
        count = 1;
        i = 3;
        while i <= @size {
            if @sieve.[i] { count = count + 1; }
            i = i + 2;
        }
        return count;
    }

    def isqrt(n : i32) -> i32 {
        if n < 2 { return n; }
        
        small = self.isqrt(n >> 2) << 1;
        large = small + 1;
        if large * large > n {
            return small;
        }
        return large;
    }
}

def benchmark_primes() {
    limit = 10000000;
    
    start_time = clock();
    sieve = CacheOptimizedSieve.new(4096 * 10000);
    sieve.generate_primes();
    prime_count = sieve.count_primes();
    sieve = CacheOptimizedSieve.new(2048 * 10000);
    sieve.generate_primes();
    prime_count = sieve.count_primes();
    sieve = CacheOptimizedSieve.new(1024 * 10000);
    sieve.generate_primes();
    prime_count = sieve.count_primes();
    end_time = clock();
    
    time_taken = end_time - start_time;
    
    IO.print("Number of primes up to");
    IO.print(limit);
    IO.print(":");
    IO.print(prime_count);
    IO.print("Time taken:");
    IO.print(time_taken);
}

benchmark_primes();