
extern def capture_backtrace(max_frames : i64, backtrace : Buffer[i64]) -> i64
extern def print_backtrace(backtrace : Buffer[i64], n_frames : i64)

import collection;

class Representable {
    def repr() -> String { return "Object"; }
}

class String extends Iterable[Character], Representable {
    @bytes : Buffer[i8]
    @length : i32
    @capacity: i32

    def Self.from_c_string(c_string : Buffer[i8]) -> String {
        null = 0 as i8;
        size = 0;
        while true {
            byte = c_string.[size];
            if byte == null { break; }
            size = size + 1;
        }
        return String.new(c_string, size, size + 1);
    }

    def init() {
        @bytes = Buffer[i8].new(1);
        @capacity = 1;
        @length = 0;
    }
    def init(@length : i32, @capacity : i32) {
        @bytes = Buffer[i8].new(@capacity);
    }
    def init(@bytes : Buffer[i8], @length : i32, @capacity : i32) {
    }

    def length() -> i32 { return @length; }
    def capacity() -> i32 { return @capacity; }

    def c_string() -> Buffer[i8] {
        buf = Buffer[i8].new(@length + 1);
        i = 0;
        while i < @length {
            buf.[i] = @bytes.[i];
            i = i + 1;
        }
        null = 0 as i8;
        buf.[@length] = null;
        return buf;
    }
    def append(x : i8) -> String {
        if @length >= @capacity { self.reserve(@capacity * 2); }
        @bytes.[@length] = x;
        @length = @length + 1;
        return self;
    }
    def extend(other : String) -> String {
        other_len = other.length();
        old_len = @length;
        new_len = old_len + other_len;
        self.reserve(new_len);
        i = 0;
        while i < other_len {
            self.unchecked_insert(i + old_len, other.unchecked_index(i));
            i = i + 1;
        }
        @length = new_len;
        return self;
    }
    def reserve(new_capacity : i32) {
        if new_capacity <= @capacity { return; }
        @capacity = new_capacity;
        old_bytes = @bytes;
        @bytes = Buffer[i8].new(@capacity);
        i = 0;
        while i < @length {
            @bytes.[i] = old_bytes.[i];
            i = i + 1;
        }
    }
    def ==(other : String) -> Bool {
        if @length != other.length() { return false; }
        i = 0;
        while i < @length {
            byte_unequal = @bytes.[i] != other.unchecked_index(i);
            if byte_unequal { return false; }
            i = i + 1;
        }
        return true;
    }
    def unchecked_index(x : i32) -> i8 {
        return @bytes.[x];
    }
    def unchecked_insert(x : i32, value : i8) {
        @bytes.[x] = value;
    }
    def copy() -> String {
        new_buf = Buffer[i8].new(@length);
        i = 0;
        while i < @length {
            new_buf.[i] = @bytes.[i];
            i = i + 1;
        }
        new_str = String.new(new_buf, @length, @length);
        return new_str;
    }
    def iterator() -> StringIterator {
        return StringIterator.new(self);
    }
    def repr() -> String {
        return self;
    }
}

class Character {
    @byte : i8
    def init(@byte : i8) {}
    def byte() -> i8 { return @byte; }
}

class StringIterator extends Iterator[Character] {
    @str : String
    @index : i32
    def init(@str : String) { @index = 0; }
    def next() -> Character | Nil {
        if @index >= @str.length() { return nil; }
        @index = @index + 1;
        return Character.new(@str.unchecked_index(@index - 1));
    }
}

class Exception {
	@line_number : i32
	@file_name : String
	@message : String
    @stacktrace : Buffer[i64]
    @n_frames : i64

	def init(@message : String) {
        @line_number = 0;
        @file_name = "";
        @stacktrace = Buffer[i64].new(100);
        @n_frames = capture_backtrace(100 as i64, @stacktrace);
    }
	def init() {
        @line_number = 0;
		@message = "<None>";
        @file_name = "";
        @stacktrace = Buffer[i64].new(100);
        @n_frames = capture_backtrace(100 as i64, @stacktrace);
	}

    def set_info(@line_number : i32, @file_name : String) {}

    def print_stacktrace() {
        print_backtrace(@stacktrace, @n_frames);
    }

	def report() {
		print("---------".c_string());
		print("Exception thrown from file".c_string());
		print(@file_name.c_string());
		print("At line".c_string());
		print(@line_number);
		print("With message".c_string());
		self.print_message();
        print("Stack trace:".c_string());
        self.print_stacktrace();
		print("---------".c_string());
	}
    def print_message() {
        print(@message.c_string());
    }
}

class OutOfBounds extends Exception {
    @details : OutOfBoundsDetails | Nil

    def init(bounds : i32, index : i32) {
        @details = OutOfBoundsDetails.new(bounds, index);
        @line_number = 0;
        @file_name = "";
        @message = "An out-of-bounds error occurred while indexing into a collection.";
        @stacktrace = Buffer[i64].new(100);
        @n_frames = capture_backtrace(100 as i64, @stacktrace);
    }
    def print_message() {
        print(@message.c_string());
        details = @details;
        if details is OutOfBoundsDetails { details.report(); }
    }
}

class OutOfBoundsDetails {
    @bounds : i32
    @index : i32
    def init(@bounds : i32, @index : i32) {}
    def report() {
        print("The size of the collection being indexed was".c_string());
        print(@bounds);
        print("The indexing argument was".c_string());
        print(@index);
    }
}

def report_exception(current_coroutine : Coroutine[() -> Exception]) {
    exception = current_coroutine.result();
    if exception is Exception { exception.report(); }
}
