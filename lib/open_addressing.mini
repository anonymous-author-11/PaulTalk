import map; 

class Tombstone {
    def init() {}
}

class Entry[K,V] {
    @hash: i32 // Store hash to avoid recomputing during probes
    @key: K
    @value: V | Tombstone

    def init(@key: K, @value: V, @hash: i32) {}
    def init(@key: K, @value: Tombstone, @hash: i32) {}

    def key() -> K { return @key; }
    def value() -> V | Tombstone { return @value; }
    def hash() -> i32 { return @hash; }
}

// --- HashMap Implementation (Optimized) ---

class OpenAddressMap[K,V] extends HashMap[K,V] {
    @entries: Buffer[Entry[K,V] | Nil]
    @entries_len : i32
    @size: i32      // number of actual entries (key -> V)
    @load: i32      // number of occupied slots (key -> V or key -> Tombstone)
    @hasher: (K) -> i32
    @eq: (K, K) -> Bool

    def init(@hasher: (K) -> i32, @eq : (K, K) -> Bool) {
        // Ensure initial capacity is a power of 2
        @entries = Buffer[Entry[K,V] | Nil].new(16);
        @entries_len = 16;
        @size = 0;
        @load = 0;
        // @hasher and @eq are initialized by the parameter syntax
    }

    // Concrete implementations should override this method
    abstract def find_slot(key: K, hash: i32) -> i32 {}

    // Ensures capacity is a power of two, doubles if needed
    def ensure_capacity(required_load: i32) {
         current_length = @entries_len;
         // Check load factor: required_load / current_length >= 0.6
         // Multiply: required_load * DEN >= current_length * NUM
         needs_resize = current_length == 0 or required_load * 10 >= current_length * 6;

        if needs_resize {
             new_capacity = current_length * 2;
             // Ensure minimum capacity and power-of-two
             if new_capacity < 16 { new_capacity = 16; }
             // Optional: More robust power-of-two calculation if needed,
             // but doubling preserves power-of-two if starting with one.
             self.resize(new_capacity);
        }
    }

    // Resizes the internal array and rehashes all existing entries.
    // Crucially clears out tombstones.
    def resize(new_capacity: i32) {
        // Assume new_capacity is a power of 2
        old_entries = @entries;
        old_len = @entries_len;
        @entries = Buffer[Entry[K,V] | Nil].new(new_capacity); // Buffer of Nil
        @entries_len = new_capacity;
        @size = 0; // Reset size and load for the new table
        @load = 0;

        i = 0;
        while i < old_len { // Iterate only up to old length
            entry = old_entries.[i];
            // Re-insert only if it's a valid entry with a non-tombstone value
            if entry is Entry[K,V] {
                val = entry.value();
                // We know the entry's hash, reuse it.
                if val is V { self.insert_internal(entry.key(), val, entry.hash()); }
            }
            i = i + 1;
        }
    }

    // Internal insert function used by resize and public insert.
    // Assumes capacity check already done OR is called during resize.
    // Handles updating size and load correctly.
    def insert_internal(key: K, value: V, hash: i32) {
         i = self.find_slot(key, hash);
         current_entry_or_nil = @entries.[i]; // Use a more descriptive name

         // Create new entry regardless of what was there
         new_entry = Entry[K,V].new(key, value, hash);
         @entries.[i] = new_entry;

         // Update size and load based on the *previous* state of the slot
         if current_entry_or_nil is Nil {
            // Inserted into an empty slot
            @size = @size + 1;
            @load = @load + 1;
         }
         if current_entry_or_nil is Entry[K, V] {
             // Slot was occupied, check if it was a tombstone
             old_value = current_entry_or_nil.value();
             if old_value is Tombstone {
                 // Replaced a tombstone
                 @size = @size + 1; // Now holds a real value
                 // @load doesn't change (slot was already occupied)
             } else {
                 // Replaced an existing, active value.
                 // @size doesn't change (still one active value)
                 // @load doesn't change (slot was already occupied)
             }
         }
         // else case should not happen if find_slot works correctly
    }

    // Public insert method
    def insert(key: K, value: V) {
        // Check capacity *before* hashing and finding slot
        // We need space for potentially one more *load* item.
        self.ensure_capacity(@load + 1);
        hash = @hasher.call(key);
        self.insert_internal(key, value, hash);
    }

    // Get value associated with key
    def get(key: K) -> V | Nil {
        // No need to check capacity here
        hash = @hasher.call(key);
        i = self.find_slot(key, hash);
        entry_or_nil = @entries.[i];

        // find_slot guarantees that if an entry is returned, hash/key match.
        // We only need to check if it's Nil or a Tombstone.
        if entry_or_nil is Entry[K, V] {
            val = entry_or_nil.value();
            if val is V { return val; }
            // If val is Tombstone, the key was deleted
        }
        // If entry_or_nil is Nil, or it was a Tombstone entry for this key
        return nil;
    }

    // Remove key and return its value, or Nil if not found.
    def remove(key: K) -> V | Nil {
        // No need to check capacity here
        hash = @hasher.call(key);
        i = self.find_slot(key, hash);
        entry_or_nil = @entries.[i];

        if entry_or_nil is Entry[K, V] {
            val = entry_or_nil.value();
            // Only remove if it's an active entry (not already a tombstone)
            if val is V {
                // Create Tombstone entry, preserving key and hash for probing continuity
                tombstone_entry = Entry[K,V].new(entry_or_nil.key(), Tombstone.new(), entry_or_nil.hash());
                @entries.[i] = tombstone_entry;
                @size = @size - 1; // Active element count decreases
                // @load remains the same (slot still occupied by tombstone)

                // Return the removed value (which we know is not Tombstone)
                return val;
            }
            // If val is Tombstone, key was already removed effectively
        }
        // If entry_or_nil is Nil or holds a Tombstone for the key
        return nil;
    }

    // Clear the map
    def clear() {
        // Re-initialize with default capacity
        @entries = Buffer[Entry[K,V] | Nil].new(16);
        @size = 0;
        @load = 0;
    }

    // Return number of active key-value pairs
    def size() -> i32 { return @size; }

    // --- Iterator Implementation ---
    // Conforms to Iterable by providing iterator()
    def iterator() -> OpenAddressMapIterator[K,V] {
        return OpenAddressMapIterator[K,V].new(@entries, @entries_len);
    }
}

// --- Custom Iterator Class ---
// Conforms to Iterator interface
class OpenAddressMapIterator[K,V] extends Iterator[Pair[K,V]] {
    @map_entries: Buffer[Entry[K,V] | Nil]
    @index: i32
    @length: i32 // Cache length for minor optimization

    def init(@map_entries: Buffer[Entry[K,V] | Nil], @length : i32) {
        @index = 0;
    }

    def next() -> Pair[K, V] | Nil {
        while @index < @length { // Use cached length
            entry_or_nil = @map_entries.[@index];
            @index = @index + 1; // Increment index for next call

            if entry_or_nil is Entry[K, V] {
                val = entry_or_nil.value();
                if val is V { return Pair{entry_or_nil.key(), val}; }
            }
            // Continue loop if Nil or Tombstone
        }
        return nil; // End of iteration
    }
}

