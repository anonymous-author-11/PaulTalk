import core;

class Array[T] extends List[T], Indexable[i32, T, T], Representable {
	@buffer : Buffer[T]
	@length : i32
	@capacity : i32

    regions { @elems_reg == @buffer.elems_reg }

	def init() {
		@buffer = Buffer[T].new(1);
		@length = 0;
		@capacity = 1;
	}
    def init(@capacity : i32) {
        @buffer = Buffer[T].new(@capacity);
        @length = 0;
    }
    def init(@length : i32, @capacity : i32) {
        @buffer = Buffer[T].new(@capacity);
    }
    def init(@buffer : Buffer[T], @length : i32, @capacity : i32) {
    }
    #[ret == @length]
    def size() -> i32 {
        return @length;
    }
    #[ret == @capacity]
    def capacity() -> i32 {
    	return @capacity;
    }
    #[ret == self, x == @elems_reg]
    def append(x : T) -> Self {
        if @length >= @capacity { self.reserve(@capacity * 2); }
        @buffer.[@length] = x;
        @length = @length + 1;
        return self;
    }
    // Since List.collect(iterable : Iterable[T]) calls .extend(iterable) internally, this makes that more efficient too
    // Another great example of why multimethods are so useful: always dispatches on argument's runtime type
    #[ret == self, other.elems_reg == @elems_reg]
    def extend(other : Collection[T]) -> Self {
        other_size = other.size();
        old_len = @length;
        new_len = old_len + other_size;
        self.reserve(new_len);
        i = 0;
        for elem in other {
            self.unchecked_insert(i + old_len, elem);
            i = i + 1;
        }
        @length = new_len;
        return self;
    }
    def reserve(new_capacity : i32) {
        if new_capacity <= @capacity { return; }
        @capacity = new_capacity;
        old_buffer = @buffer;
        @buffer = Buffer[T].new(@capacity);
        i = 0;
        while i < @length {
            @buffer.[i] = old_buffer.[i];
            i = i + 1;
        }
    }
    #[ret == @elems_reg]
    def [](x : i32) -> T yields OutOfBounds {
    	past_end = x > (@length - 1);
    	before_start = (@length + x) < 0;
        if past_end or before_start { yield(OutOfBounds.new(@length, x)); }
        if x < 0 { x = @length + x; }
        return self.unchecked_index(x);
    }
    #[value == @elems_reg]
    def []=(x : i32, value : T) yields OutOfBounds {
        past_end = x > (@length - 1);
        before_start = (@length + x) < 0;
        if past_end or before_start { yield(OutOfBounds.new(@length, x)); }
        if x < 0 { x = @length + x; }
        self.unchecked_insert(x, value);
    }
    #[ret == @elems_reg]
    def unchecked_index(x : i32) -> T {
    	return @buffer.[x];
    }
    #[value == @elems_reg]
    def unchecked_insert(x : i32, value : T) {
        @buffer.[x] = value;
    }
    def iterator() -> ConstantTimeIterator[T] {
    	return ArrayIterator{self};
    }
    def repr() -> String {
        return "Array";
    }
}

// Must be O(1) to get next element
class ConstantTimeIterator[T] extends Iterator[T] {}

class ArrayIterator[T] extends ConstantTimeIterator[T] {
	@array : Array[T]
	@index : i32

    regions { @referent_reg == @array }

	def init(@array : Array[T]) { @index = 0; }
	def next() -> T | Nil {
        // We check the array's current .length() on every .next() call
        // This guarantees no out-of-bounds access if the array was modified
		if @index >= @array.length() { return nil; }
		@index = @index + 1;
		return @array.unchecked_index(@index - 1);
	}
}