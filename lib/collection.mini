import iteration;

class Collection[T] extends Iterable[T] {

    abstract def size() -> i32 {}

    def is_empty() -> Bool {
        return self.size() == 0;
    }

    // Iterable.filter is *not* overridden because the size of a filtered collection cannot be known prior to iterating

    def enumerate() -> EnumeratedCollection[T] {
        return EnumeratedCollection{self};
    } ~> { ret.iterable == self }
    
    def map[U](f : (T) -> U) -> MappedCollection[T, U] {
        return MappedCollection{self, f};
    } ~> { ret.iterable == self, ret.f == f }
    
    def chain(other : Collection[T]) -> ChainedCollection[T] {
        return ChainedCollection{self, other};
    } ~> { ret.first == self, ret.second == other }
    
    def interleave(other : Collection[T]) -> InterleavedCollection[T] {
        return InterleavedCollection{self, other};
    } ~> { ret.first == self, ret.second == other }
    
    def zip[U](other : Collection[U]) -> ZippedCollection[T, U] {
        return ZippedCollection{self, other};
    } ~> { ret.first == self, ret.second == other }
    
    def product[U](other : Collection[U]) -> ProductCollection[T, U] {
        return ProductCollection{self, other};
    } ~> { ret.first == self, ret.second == other }
}

class WrappedCollection[T] extends Wrapping[T] {
    @iterable : Collection[T]

    regions { @iterable_reg == @iterable }

    getter @iterable
}

class DualWrappedCollection[T, U] extends DualWrapping[T, U] {
    @first : Collection[T]
    @second : Collection[U]

    regions {
        @first_reg == @first,
        @second_reg == @second
    }

    getters @first, @second
}

class EnumeratedCollection[T] extends WrappedCollection[T], Enumeration[T], Collection[Pair[i32, T]] {

    def init(@iterable : Collection[T]) {
    }
    def size() -> i32 {
    	return @iterable.size();
    }
}

class MappedCollection[T, U] extends WrappedCollection[T], Mapping[T, U], Collection[U] {

    def init(@iterable : Collection[T], @f : (T) -> U) {
    }
    def size() -> i32 {
    	return @iterable.size();
    }
}

class ChainedCollection[T] extends DualWrappedCollection[T, T], Chaining[T], Collection[T] {

    def init(@first : Collection[T], @second : Collection[T]) {
    }
    def size() -> i32 {
    	return @first.size() + @second.size();
    }
}

class InterleavedCollection[T] extends DualWrappedCollection[T, T], Interleaving[T], Collection[T] {

    def init(@first : Collection[T], @second : Collection[T]) {
    }
    def size() -> i32 {
    	return @first.size() + @second.size();
    }
}

class ZippedCollection[T, U] extends DualWrappedCollection[T, U], Zipping[T, U], Collection[Pair[T, U]] {

    def init(@first : Collection[T], @second : Collection[U]) {
    }
    def size() -> i32 {
    	first_size = @first.size();
    	second_size = @second.size();
    	if first_size < second_size { return first_size; }
    	return second_size;
    }
}

class ProductCollection[T, U] extends DualWrappedCollection[T, U], Productization[T, U], Collection[Pair[T, U]] {

    def init(@first : Collection[T], @second : Collection[U]) {
    }
    def size() -> i32 {
    	return @first.size() * @second.size();
    }
}