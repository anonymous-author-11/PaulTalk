import open_addressing;

class QuadraticProbeMap[K, V] extends OpenAddressMap[K, V] {

    // Finds the slot index for a key using QUADRATIC PROBING
    // Returns the index where the key is located, OR
    // Returns the index where the key should be inserted (first tombstone or nil).
    // Precondition: @entries_len is a power of 2.
    def find_slot(key: K, hash: i32) -> i32 {
        capacity = @entries_len;
        mask = capacity - 1; // For power-of-two capacity modulo
        initial_index = hash bit_and mask;
        first_tombstone_idx = -1; // Index of first tombstone found

        probe_step = 0; // How many steps taken *beyond* the initial index
        probe_offset = 0; // The quadratic offset (0, 1, 3, 6, 10...)
        current_index = initial_index;

        while true {
            entry = @entries.[current_index];

            if entry is Nil {
                // Empty slot found. Key is not present beyond this point.
                if first_tombstone_idx == -1 { return current_index; }
                return first_tombstone_idx;
            }

            // entry must be Entry[K,V] here
            // Key found? Check hash first (cheap), then equality (potentially expensive).
            if entry.hash() == hash and @eq.call(entry.key(), key) {
                return current_index;
            } 

            // If it's an entry for a *different* key, check if it's a tombstone
            if entry.value() is Tombstone {
                if first_tombstone_idx == -1 {
                    first_tombstone_idx = current_index; // Record the first tombstone spot
                }
            }
            // Else (it's an active entry for a different key), continue probing.

            // --- Incremental Quadratic Probing Step ---
            probe_step = probe_step + 1;
            // Increment offset: 0+1=1, 1+2=3, 3+3=6, ... (equivalent to (step*step + step)/2)
            probe_offset = probe_offset + probe_step;
            current_index = (initial_index + probe_offset) bit_and mask; // Apply mask for wrap-around

            // Loop termination is guaranteed because load factor < 1 ensures at least one nil slot
            // and quadratic probing (with this sequence and power-of-two capacity) visits all slots.
        }
    }
}