import std;

extern def clock() -> i64

def min(a : i32, b : i32) -> i32 {
    if a < b { return a; }
    return b;
}

class Matrix {
    @rows : i32
    @cols : i32
    @data : Buffer[i64]

    def init(@rows : i32, @cols : i32) {
        @data = Buffer[i64].new(@rows * @cols);
    }

    def set(row : i32, col : i32, value : i64) {
        @data.[row * @cols + col] = value;
    }

    def get(row : i32, col : i32) -> i64 {
        return @data.[row * @cols + col];
    }

    def rows() -> i32 {
        return @rows;
    }

    def row_idx() -> Range {
        return 0:(@rows - 1);
    }

    def cols() -> i32 {
        return @rows;
    }

    def col_idx() -> Range {
        return 0:(@cols - 1);
    }

    def data() -> Buffer[i64] {
        return @data;
    }

    def *(other : Matrix) -> Matrix {
        if @cols != other.rows() { yield(); }
        result = Matrix.new(@rows, other.cols());
        self.mul_inner(@rows, @cols, other.cols(), @data, other.data(), result.data());
        return result;
    }

    def mul_inner(rows : i32, cols : i32, other_cols : i32, data : Buffer[i64], other_data : Buffer[i64], result_data : Buffer[i64]) {
        i = 0;
        while i < rows {
            i_offset = i * cols;
            result_i_offset = i * other_cols;
            j = 0;
            while j < other_cols {
                sum1 : i64 = 0;
                sum2 : i64 = 0;
                sum3 : i64 = 0;
                sum4 : i64 = 0;
                k = 0;
                while k < cols - 3 {
                    sum1 = sum1 + data.[i_offset + k] * other_data.[k * other_cols + j];
                    sum2 = sum2 + data.[i_offset + k + 1] * other_data.[(k + 1) * other_cols + j];
                    sum3 = sum3 + data.[i_offset + k + 2] * other_data.[(k + 2) * other_cols + j];
                    sum4 = sum4 + data.[i_offset + k + 3] * other_data.[(k + 3) * other_cols + j];
                    k = k + 4;
                }
                // Handle remaining elements
                while k < cols {
                    sum1 = sum1 + data.[i_offset + k] * other_data.[k * other_cols + j];
                    k = k + 1;
                }
                result_data.[result_i_offset + j] = sum1 + sum2 + sum3 + sum4;
                j = j + 1;
            }
            i = i + 1;
        }
    }
}

def benchmark_matrix_multiplication() {
    size = 1000;
    
    matrix1 = Matrix.new(size, size);
    matrix2 = Matrix.new(size, size);
    
    for i in 0:(size - 1) {
        for j in 0:(size - 1) {
            val1 : i64 = (i + j) % 10;
            val2 : i64 = (i - j + 10) % 10;
            matrix1.set(i, j, val1); 
            matrix2.set(i, j, val2);
        }
    }
    
    start_time = clock();
    result = matrix1 * matrix2;
    end_time = clock();
    
    time_taken = end_time - start_time;
    
    IO.print("Matrix multiplication");
    IO.print(size);
    IO.print("x");
    IO.print(size);
    IO.print("Time taken:");
    IO.print(time_taken);
    
    sum : i64 = 0;
    for i in 0:(size - 1) { sum = sum + result.get(0, i); }
    IO.print("Sum of first row (for verification):");
    IO.print(sum);
}

benchmark_matrix_multiplication();