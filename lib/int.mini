import core;

class IntIterator extends Iterator {
    abstract def next() -> i32 | Nil {}
}

class IntIterable extends Iterable {

    abstract def iterator() -> IntIterator {
    }
    def each(f : (i32)) {
        for x in self { f.call(x); }
    }
    def reduce(initial_val : i32, f : (i32, i32) -> i32) -> i32 {
        for x in self { initial_val = f.call(initial_val, x); }
        return initial_val;
    }
    def all(f : (i32) -> Bool) -> Bool {
        for x in self {
            if f.call(x) { continue; }
            return false;
        }
        return true;
    }
    def any(f : (i32) -> Bool) -> Bool {
        for x in self { if f.call(x) { return true; } }
        return false;
    }
    def map(f : (i32) -> i32) -> IntIterable {
        return MapIterable.new(self, f);
    }
    def filter(f : (i32) -> Bool) -> IntIterable {
        return FilterIterable.new(self, f);
    }
    def chain(other : IntIterable) -> IntIterable {
        return ChainIterable.new(self, other);
    }
    def interleave(other : IntIterable) -> IntIterable {
        return InterleaveIterable.new(self, other);
    }
    def zip(other : IntIterable) -> ZipIterable {
        return ZipIterable.new(self, other);
    }
    def product(other : IntIterable) -> ProductIterable {
        return ProductIterable.new(self, other);
    }
}

class MapIterable extends IntIterable {
    @iterable : IntIterable
    @f : (i32) -> i32

    def init(@iterable : IntIterable, @f : (i32) -> i32) {}

    def iterator() -> IntIterator {
        return MapIterator.new(@iterable.iterator(), @f);
    }
}

class MapIterator extends IntIterator {
    @iterator : IntIterator
    @f : (i32) -> i32

    def init(@iterator : IntIterator, @f : (i32) -> i32) {}

    def next() -> i32 | Nil {
        next = @iterator.next();
        if next is i32 { return @f.call(next); }
        return nil;
    }
}

class FilterIterable extends IntIterable {
    @iterable : IntIterable
    @f : (i32) -> Bool

    def init(@iterable : IntIterable, @f : (i32) -> Bool) {}

    def iterator() -> IntIterator {
        return FilterIterator.new(@iterable.iterator(), @f);
    }
}

class FilterIterator extends IntIterator {
    @iterator : IntIterator
    @f : (i32) -> Bool
    
    def init(@iterator : IntIterator, @f : (i32) -> Bool) {}

    def next() -> i32 | Nil {
        next = @iterator.next();
        while next is i32 {
            if @f.call(next) { return next; }
            next = @iterator.next();
        }
        return nil;
    }
}

class ChainIterable extends IntIterable {
    @first : IntIterable
    @second : IntIterable

    def init(@first : IntIterable, @second : IntIterable) {}

    def iterator() -> Iterator {
        return ChainIterator.new(@first.iterator(), @second.iterator());
    }
}

class ChainIterator extends IntIterator {
    @first : IntIterator
    @second : IntIterator
    @on_first : Bool

    def init(@first : IntIterator, @second : IntIterator) {
        @on_first = true;
    }
    def next() -> i32 | Nil {
        if @on_first {
            next = @first.next();
            if next is i32 { return next; }
            @on_first = false;
        }
        return @second.next();
    }
}

class InterleaveIterable extends IntIterable {
    @first : IntIterable
    @second : IntIterable

    def init(@first : IntIterable, @second : IntIterable) {}

    def iterator() -> IntIterator {
        return InterleaveIterator.new(@first.iterator(), @second.iterator());
    }
}

class InterleaveIterator extends IntIterator {
    @first : IntIterator
    @second : IntIterator
    @on_first : Bool

    def init(@first : IntIterator, @second : IntIterator) {
        @on_first = true;
    }
    def next() -> i32 | Nil {
        if @on_first {
            @on_first = false;
            return @first.next();
        }
        @on_first = true;
        return @second.next();
    }
}

class IntTupleIterable extends Iterable {
    abstract def iterator() -> IntTupleIterator {}
}

class IntTupleIterator extends Iterator {
    abstract def next() -> Tuple[i32, i32] | Nil {}
}

class ZipIterable extends IntTupleIterable {
    @first : IntIterable
    @second : IntIterable

    def init(@first : IntIterable, @second : IntIterable) {}

    def iterator() -> ZipIterator {
        return ZipIterator.new(@first.iterator(), @second.iterator());
    }
}

class ZipIterator extends IntTupleIterator {
    @first : IntIterator
    @second : IntIterator

    def init(@first : IntIterator, @second : IntIterator) {}

    def next() -> Tuple[i32, i32] | Nil {
        first_elem = @first.next();
        second_elem = @second.next();
        if first_elem is i32 {
            if second_elem is i32 { return (first_elem, second_elem); }
        }
        return nil;
    }
}

class ProductIterable extends IntTupleIterable {
    @first : IntIterable
    @second : IntIterable

    def init(@first : IntIterable, @second : IntIterable) {}

    def iterator() -> ProductIterator {
        return ProductIterator.new(@first, @second);
    }
}

class ProductIterator extends Iterator {
    @first_iterator : IntIterator
    @second_iterator : IntIterator
    @second_iterable : IntIterable
    @current_first : i32 | Nil

    def init(first_iterable : IntIterable, @second_iterable : IntIterable) {
        @first_iterator = first_iterable.iterator();
        @second_iterator = @second_iterable.iterator();
        @current_first = @first_iterator.next();
    }

    def next() -> Tuple[i32, i32] | Nil {
        current_first = @current_first;
        while current_first is i32 {
            second_elem = @second_iterator.next();
            if second_elem is i32 { return (current_first, second_elem); }
            @current_first = @first_iterator.next();
            @second_iterator = @second_iterable.iterator();
            current_first = @current_first;
        }
        return nil;
    }
}

class Range extends IntIterable {
    @start : i32
    @end : i32
    @step : i32

    def init(@end : i32){
        @start = 0;
        @step = 1;
    }

    def init(@start : i32, @end : i32) {
        @step = 1;
    }

    def step(@step : i32) -> Range {
        return self;
    }

    def iterator() -> RangeIterator {
        return RangeIterator.new(@start, @end, @step);
    }
}

class RangeIterator extends IntIterator {
    @counter : i32
    @end : i32
    @step : i32

    def init(@counter : i32, @end : i32, @step : i32) {}

    def next() -> i32 | Nil {
        if @counter > @end { return nil; }
        @counter = @counter + @step;
        return @counter - @step;
    }
}