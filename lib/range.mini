
import collection;

// An *inclusive* range
// a...b is sugar for Range{a, b}
// a..b is sugar for Range{a, b - 1}
class Range extends Collection[i32] {
    @start : i32
    @end : i32
    @step : i32

    def init(@end : i32){
        @start = 0;
        @step = 1;
    }

    def init(@start : i32, @end : i32) {
        @step = 1;
    }

    def size() -> i32 {
        return ((@end - @start) / @step) + 1;
    }

    def step(@step : i32) -> Range {
        return self;
    }

    def iterator() -> RangeIterator {
        return RangeIterator{@start, @end, @step};
    }
}

class RangeIterator extends Iterator[i32] {
    @counter : i32
    @end : i32
    @step : i32

    def init(@counter : i32, @end : i32, @step : i32) {}

    def next() -> i32 | Nil {
        if @counter > @end { return nil; }
        old_counter = @counter;
        @counter = @counter + @step;
        return old_counter;
    }
}