import open_addressing;

class RobinHoodMap[K, V] extends OpenAddressMap[K, V] {

    // Calculates the probe distance of an entry at a given index.
    def probe_distance(entry_hash: i32, current_index: i32) -> i32 {
        capacity = @entries_len;
        mask = capacity - 1;
        initial_index = entry_hash bit_and mask;
        distance = (current_index - initial_index + capacity) bit_and mask;
        return distance;
    }

    // Finds the slot for a key. The search can terminate early if we find an entry
    // whose probe distance is less than the current search distance.
    def find_slot(key: K, hash: i32) -> i32 {
        capacity = @entries_len;
        mask = capacity - 1;
        current_index = hash bit_and mask;
        distance_of_seeker = 0;

        while true {
            existing_entry = @entries.[current_index];

            if existing_entry is Nil { return current_index; }

            if existing_entry is Entry[K, V] {
                // If the current search is "poorer" than the entry in the slot,
                // the key we're looking for cannot be in the table.
                existing_distance = self.probe_distance(existing_entry.hash(), current_index);
                if distance_of_seeker > existing_distance {
                    return current_index; // Key not found.
                }

                // Found a potential match, check for equality.
                if existing_entry.hash() == hash and @eq.call(existing_entry.key(), key) {
                    // Ensure it's not a tombstone from a misbehaving parent method.
                    return current_index;
                }
            }

            distance_of_seeker = distance_of_seeker + 1;
            current_index = (current_index + 1) bit_and mask;
        }
    }

    // Core insertion logic without the capacity check, to be used by insert() and resize().
    def insert_core(key: K, value: V, hash: i32) {
        capacity = @entries_len;
        mask = capacity - 1;

        entry_to_insert = Entry[K,V].new(key, value, hash);
        distance_to_insert = 0;
        current_index = hash bit_and mask;

        while true {
            existing_entry = @entries.[current_index];

            if existing_entry is Nil {
                @entries.[current_index] = entry_to_insert;
                @size = @size + 1;
                @load = @load + 1;
                return;
            }

            if existing_entry.hash() == hash and @eq.call(existing_entry.key(), key) {
                @entries.[current_index] = entry_to_insert;
                return;
            }

            existing_distance = self.probe_distance(existing_entry.hash(), current_index);

            if distance_to_insert > existing_distance {
                temp = entry_to_insert;
                entry_to_insert = existing_entry;
                @entries.[current_index] = temp;
                distance_to_insert = existing_distance;
            }

            distance_to_insert = distance_to_insert + 1;
            current_index = (current_index + 1) bit_and mask;
        }
    }

    // Public insert method wraps the core logic with a capacity check.
    def insert(key: K, value: V) {
        self.ensure_capacity(@load + 1);
        hash = @hasher.call(key);
        self.insert_core(key, value, hash);
    }

    // Override resize to re-insert elements using Robin Hood logic.
    def resize(new_capacity: i32) {
        old_entries = @entries;
        old_len = @entries_len;

        @entries = Buffer[Entry[K,V]?].new(new_capacity);
        @entries_len = new_capacity;
        @size = 0;
        @load = 0;

        i = 0;
        while i < old_len {
            entry = old_entries.[i];
            if entry is Entry[K,V] {
                val = entry.value();
                if val is V {
                    // Re-insert using the core logic to maintain the invariant.
                    self.insert_core(entry.key(), val, entry.hash());
                }
            }
            i = i + 1;
        }
    }

    // Removes a key using backward-shift deletion.
    def remove(key: K) -> V? {
        hash = @hasher.call(key);
        mask = @entries_len - 1;

        index_to_remove = self.find_slot(key, hash);
        entry_at_slot = @entries.[index_to_remove];

        if entry_at_slot is Nil { return nil; }
        if entry_at_slot is Entry[K, V] {
            if entry_at_slot.hash() != hash or not @eq.call(entry_at_slot.key(), key) {
                return nil; // Key not found.
            }
        }

        current_empty_index = index_to_remove;
        while true {
            next_index = (current_empty_index + 1) bit_and mask;
            entry_to_shift = @entries.[next_index];

            if entry_to_shift is Nil { break; }
            if entry_to_shift is Entry[K, V] {
                if self.probe_distance(entry_to_shift.hash(), next_index) == 0 {
                    break;
                }
                @entries.[current_empty_index] = entry_to_shift;
                current_empty_index = next_index;
            }
        }

        @entries.[current_empty_index] = nil;
        @size = @size - 1;
        @load = @load - 1;

        if entry_at_slot is Entry[K, V] {
            value_to_return = entry_at_slot.value();
            if value_to_return is V { return value_to_return; }
        }
    }
}