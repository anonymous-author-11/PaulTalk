import std; // Assuming this provides Pair, Iterable, Iterator

// --- Helper Functions and Classes (Unchanged) ---

def i32_hasher(i : i32) -> i32 {
    // Same fast bit-mixing hash function
    i = (i + 0x7ed55d16) + (i << 12);
    i = (i bit_xor 0xc761c23c) bit_xor (i >> 19);
    i = (i + 0x165667b1) + (i << 5);
    i = (i + 0xd3a2646c) bit_xor (i << 9);
    i = (i + 0xfd7046c5) + (i << 3);
    i = (i bit_xor 0xb55a4f09) bit_xor (i >> 16);
    return i;
}

def i32_eq(a : i32, b : i32) -> Bool {
    return a == b;
}

class Tombstone {
    def init() {}
}

class Entry[K,V] {
    @hash: i32 // Store hash to avoid recomputing during probes
    @key: K
    @value: V | Tombstone

    def init(@key: K, @value: V, @hash: i32) {}
    def init(@key: K, @value: Tombstone, @hash: i32) {}

    def key() -> K { return @key; }
    def value() -> V | Tombstone { return @value; }
    def hash() -> i32 { return @hash; }
}

// --- HashMap Implementation (Robin Hood Probing) ---

class HashMap[K,V] extends Iterable[Pair[K,V]] {
    @entries: Array[Entry[K,V]?]
    @size: i32      // number of actual entries (key -> V)
    @load: i32      // number of occupied slots (key -> V or key -> Tombstone)
    @hasher: (K) -> i32
    @eq: (K, K) -> Bool

    def init(@hasher: (K) -> i32, @eq : (K, K) -> Bool) {
        @entries = Array[Entry[K,V]?].new(16, 16);
        @size = 0;
        @load = 0;
    }

    // Helper to calculate probe distance (using safer non-negative approach).
    // Assumes capacity is a power of 2.
    def calculate_probe_distance(current_index: i32, element_hash: i32, mask: i32, capacity: i32) -> i32 {
        initial_index = element_hash bit_and mask;
        // Safer calculation: (current - initial + capacity) % capacity
        distance = (current_index - initial_index + capacity) bit_and mask;
        return distance;
    }

    // Finds the slot index for a key using LINEAR PROBING (for get/remove).
    // Returns the index where the key is located (and is active), OR -1 if not found or tombstoned.
    def find_slot(key: K, hash: i32) -> i32 {
        capacity = @entries.length();
        if capacity == 0 { return -1; }

        mask = capacity - 1;
        initial_index = hash bit_and mask;
        current_index = initial_index;
        probe_step = 0; // Our theoretical probe distance

        while true {
            entry_or_nil = @entries.unchecked_index(current_index);

            // --- Check 1: Empty slot ---
            if entry_or_nil is Nil {
                return -1; // Key definitely not present
            }

            // --- Check 2: Entry exists ---
            if entry_or_nil is Entry[K, V] {
                 existing_entry = entry_or_nil;
                 existing_hash = existing_entry.hash();

                 // --- Robin Hood Early Exit (Check first) ---
                 // Use the safer distance calculation
                 existing_entry_probe_distance = self.calculate_probe_distance(current_index, existing_hash, mask, capacity);
                 current_search_probe_distance = probe_step;
                 if current_search_probe_distance > existing_entry_probe_distance {
                      return -1; // Key cannot be further down this probe chain
                 }

                 // --- Key Match Check ---
                 if existing_hash == hash {
                     if @eq.call(existing_entry.key(), key) {
                         // Found the correct key! Now check if it's a tombstone.
                         val = existing_entry.value();
                         if val is Tombstone {
                             return -1; // Found key, but it's deleted. Treat as not found.
                         }
                         return current_index; // Found the active key. Success!
                     }
                     // Hash matched, key didn't (collision). Continue probing.
                 }
                 // Hash didn't match OR key didn't match. Continue probing.
                 // Correctly falls through to the linear probing step below.
            }

            // --- Linear Probing Step ---
            probe_step = probe_step + 1;
            current_index = (initial_index + probe_step) bit_and mask; // Wrap around

            // --- Safety Check ---
            if probe_step >= capacity {
                 // Should not happen in a correctly functioning map with load factor < 1
                 // Log error? For benchmark, just return -1.
                 // IO.print("WARN: find_slot looped through entire table.");
                 return -1;
            }
        } // End while loop
    }

    // Ensures capacity is a power of two, doubles if needed.
    // Using 80% load factor for Robin Hood.
    def ensure_capacity(required_load: i32) {
         current_length = @entries.length();
         needs_resize = current_length == 0 or required_load * 10 >= current_length * 8;

        if needs_resize {
             new_capacity = current_length * 2;
             if new_capacity < 16 { new_capacity = 16; }
             self.resize(new_capacity);
        }
    }


    // Resizes the internal array and rehashes all existing ACTIVE entries.
    def resize(new_capacity: i32) {
        old_entries = @entries;
        @entries = Array[Entry[K,V]?].new(new_capacity, new_capacity);
        @size = 0;
        @load = 0;
        old_len = old_entries.length();
        i = 0;
        while i < old_len {
            entry = old_entries.unchecked_index(i);
            if entry is Entry[K,V] {
                val = entry.value();
                if not (val is Tombstone) {
                    if val is V { self.insert_internal(entry.key(), val, entry.hash()); }
                }
            }
            i = i + 1;
        }
    }

    // Internal insert function using Robin Hood probing with displacement.
    def insert_internal(key_to_insert: K, value_to_insert: V, hash_to_insert: i32) {
        capacity = @entries.length();
        mask = capacity - 1;

        current_key = key_to_insert;
        current_value = value_to_insert;
        current_hash = hash_to_insert;
        current_probe_distance = 0;
        probe_index = current_hash bit_and mask;

        while true {
            entry_or_nil = @entries.unchecked_index(probe_index);

            // --- Case 1: Empty Slot (Nil) ---
            if entry_or_nil is Nil {
                new_entry = Entry[K, V].new(current_key, current_value, current_hash);
                @entries.unchecked_insert(probe_index, new_entry);
                @size = @size + 1;
                @load = @load + 1;
                return;
            }

            // --- Case 2: Slot is occupied ---
            if entry_or_nil is Entry[K, V] {
                existing_entry = entry_or_nil;
                existing_hash = existing_entry.hash(); // Cache hash

                // --- Subcase 2a: Slot contains a Tombstone ---
                val = existing_entry.value();
                if val is Tombstone {
                    new_entry = Entry[K, V].new(current_key, current_value, current_hash);
                    @entries.unchecked_insert(probe_index, new_entry);
                    @size = @size + 1; // Replace tombstone -> size increases
                    // @load doesn't change
                    return;
                }

                // --- Subcase 2b: Slot contains an active Entry ---
                if existing_hash == current_hash {
                     if @eq.call(existing_entry.key(), current_key) {
                         // Key update
                         updated_entry = Entry[K, V].new(current_key, current_value, current_hash);
                         @entries.unchecked_insert(probe_index, updated_entry);
                         // size and load unchanged
                         return;
                     }
                }

                // --- Robin Hood Swap Logic ---
                // Use safer distance calculation
                existing_probe_distance = self.calculate_probe_distance(probe_index, existing_hash, mask, capacity);

                if current_probe_distance > existing_probe_distance {
                    // Swap
                    entry_to_place_in_slot = Entry[K, V].new(current_key, current_value, current_hash);
                    @entries.unchecked_insert(probe_index, entry_to_place_in_slot);

                    // Update carried item
                    current_key = existing_entry.key();
                    existing_value_temp = existing_entry.value(); // Known to be V here
                    if existing_value_temp is V { current_value = existing_value_temp; }
                    current_hash = existing_hash;
                    current_probe_distance = existing_probe_distance; // New carried distance
                }
                // Else (poorer or equal), keep carrying current item.
            }

            // --- Linear Probing Step ---
            current_probe_distance = current_probe_distance + 1;
            probe_index = (probe_index + 1) bit_and mask;

            // --- Safety Check ---
            if current_probe_distance >= capacity {
                 IO.print("ERROR: insert_internal loop exceeded capacity.");
                 // Force resize maybe? Or just return to avoid loop.
                 // For benchmark, maybe resize and retry is too complex.
                 // This indicates a fundamental issue if hit.
                 return;
            }
        } // End while true loop
    }

    // Public insert method
    def insert(key: K, value: V) {
        self.ensure_capacity(@load + 1);
        hash = @hasher.call(key);
        self.insert_internal(key, value, hash);
    }

    // Get value associated with key
    def get(key: K) -> V? {
        hash = @hasher.call(key);
        i = self.find_slot(key, hash);
        if i == -1 { return nil; }

        entry_or_nil = @entries.unchecked_index(i); // find_slot guarantees this exists and is active
        if entry_or_nil is Entry[K, V] {
            val = entry_or_nil.value();
            if val is V { return val; } // Should always be true if i != -1
        }
        return nil; // Fallback
    }

    // Remove key and return its value, or Nil if not found.
    def remove(key: K) -> V? {
        hash = @hasher.call(key);
        i = self.find_slot(key, hash);
        if i == -1 { return nil; } // Not found or already tombstoned

        entry_or_nil = @entries.unchecked_index(i); // find_slot guarantees this exists and is active
         if entry_or_nil is Entry[K, V] {
             val = entry_or_nil.value();
             if val is V { // Should always be true if i != -1
                  // Replace with Tombstone, preserving key and hash.
                  tombstone_entry = Entry[K,V].new(entry_or_nil.key(), Tombstone.new(), entry_or_nil.hash());
                  @entries.unchecked_insert(i, tombstone_entry);
                  @size = @size - 1;
                  // @load remains the same
                  return val;
             }
        }
        return nil; // Fallback
    }

    // Clear the map
    def clear() {
        @entries = Array[Entry[K,V]?].new(16, 16);
        @size = 0;
        @load = 0;
    }

    // Return number of active key-value pairs
    def size() -> i32 { return @size; }

    // --- Iterator Implementation (Unchanged) ---
    def iterator() -> HashMapIterator[K,V] {
        return HashMapIterator[K,V].new(@entries);
    }
}

// --- Custom Iterator Class (Unchanged from original) ---
class HashMapIterator[K,V] extends Iterator[Pair[K,V]] {
    @map_entries: Array[Entry[K,V]?]
    @index: i32
    @length: i32 // Cache length for minor optimization

    def init(@map_entries: Array[Entry[K,V]?]) {
        @index = 0;
        @length = @map_entries.length(); // Cache length
    }

    def next() -> Pair[K, V]? {
        while @index < @length { // Use cached length
            entry_or_nil = @map_entries.unchecked_index(@index);
            @index = @index + 1; // Increment index for next call

            if entry_or_nil is Entry[K, V] {
                val = entry_or_nil.value();
                if not (val is Tombstone) {
                    if val is V { return Pair[K, V].new(entry_or_nil.key(), val); }
                 }
            }
            // Continue loop if Nil or Tombstone
        }
        return nil; // End of iteration
    }
}

// --- Helper Functions for String (Unchanged) ---
def string_hasher(s : String) -> i32 {
    hash : i32 = 0;
    seed : i32 = 31;
    for c in s {
        cast_val : i32 = c.byte();
        hash = (hash * seed + cast_val) bit_and 0x7FFFFFFF;
    }
    return hash;
}

def string_eq(a : String, b : String) -> Bool {
    return a == b;
}
