import std;

class Pair[T, U]
	where T <: Object, U <: Object {

	@first : T
	@second : U

	def init(@first : T, @second : U) {
	}
	def first() -> T {
		return @first;
	}
	def second() -> U {
		return @second;
	}
}

pair1 = Pair[i32, f64].new(5, 7.0);
t = pair1.second();
IO.print(t);

pair2 = Pair[f64, i32].new(7.0, 9);
t = pair2.second();
IO.print(t);

pair3 = Pair[Tuple[f64,f64,f64,f64], f64].new((1.0, 2.0, 3.0, 4.0), 5.0);
t = pair3.first();
fourth = t.[3];
IO.print(fourth);

class IntPair extends Pair[Tuple[f64,f64,f64,f64], f64] {

	def init(@first : Tuple[f64,f64,f64,f64], @second : f64) {}

	def second() -> f64 {
		return @second;
	}
}

b = IntPair.new((1.0, 2.0, 3.0, 4.0), 5.0);
IO.print(b.second());

class Iterable2[T] {
	abstract def iterator() -> Iterator2[T] {}
	def each(f : (T)) {
        for x in self { f.call(x); }
    }
    def reduce(accumulator : T, f : (T, T) -> T) -> T {
        for x in self { accumulator = f.call(accumulator, x); }
        return accumulator;
    }
    def all(f : (T) -> Bool) -> Bool {
        for x in self {
            if f.call(x) { continue; }
            return false;
        }
        return true;
    }
    def any(f : (T) -> Bool) -> Bool {
        for x in self { if f.call(x) { return true; } }
        return false;
    }
    def map(f : (T) -> T) -> Iterable2[T] {
        return MapIterable2[T].new(self, f);
    }
    def filter(f : (T) -> Bool) -> Iterable2[T] {
        return FilterIterable2[T].new(self, f);
    }
    def chain(other : Iterable2[T]) -> Iterable2[T] {
        return ChainIterable2[T].new(self, other);
    }
    def interleave(other : Iterable2[T]) -> Iterable2[T] {
        return InterleaveIterable2[T].new(self, other);
    }
}

class Iterator2[T] {
	abstract def next() -> T | Nil {}
}

class Array[T] extends Iterable2[T] {
	@buffer : Buffer[T]
	@length : i32
	@capacity : i32

	def Self.from_iterable(iterable : Iterable2[T]) -> Array[T] {
    	new = Array[T].new();
    	for elem in iterable { new.append(elem); }
    	return new;
    }

	def init() {
		@buffer = Buffer[T].new(1);
		@length = 0;
		@capacity = 1;
	}

	def length() -> i32 { return @length; }
    def capacity() -> i32 { return @capacity; }
    def buffer() -> Buffer[T] { return @buffer; }

    def append(x : T) -> Array[T] {
        if @length < @capacity {
            @buffer.[@length] = x;
            @length = @length + 1;
            return self;
        }
        @capacity = @capacity * 2;
        old_buffer = @buffer;
        @buffer = Buffer[T].new(@capacity);
        i = 0;
        while i < @length {
            @buffer.[i] = old_buffer.[i];
            i = i + 1;
        }
        @buffer.[@length] = x;
        @length = @length + 1;
        return self;
    }
    def [](x : i32) -> T {
    	past_end = x > (@length - 1);
    	before_start = (@length + x) < 0;
        if past_end or before_start { yield(OutOfBounds.new(@length, x)); }
        if x < 0 { x = @length + x; }
        return @buffer.[x];
    }
    def iterator() -> Iterator2[T] {
    	return ArrayIterator[T].new(self);
    }
}

class ArrayIterator[T] extends Iterator2[T] {
	@array : Array[T]
	@index : i32

	def init(@array : Array[T]) { @index = 0; }
	def next() -> T | Nil {
		if @index < @array.length() {
			@index = @index + 1;
			return @array.buffer().[@index - 1];
		}
		return nil;
	}
}

class MapIterable2[T] extends Iterable2[T] {
    @iterable : Iterable2[T]
    @f : (T) -> T

    def init(@iterable : Iterable2[T], @f : (T) -> T) {}

    def iterator() -> Iterator2[T] {
        return MapIterator2[T].new(@iterable.iterator(), @f);
    }
}

class MapIterator2[T] extends Iterator2[T] {
    @iterator : Iterator2[T]
    @f : (T) -> T

    def init(@iterator : Iterator2[T], @f : (T) -> T) {}

    def next() -> T | Nil {
        next = @iterator.next();
        if next is T { return @f.call(next); }
        return nil;
    }
}

class FilterIterable2[T] extends Iterable2[T] {
    @iterable : Iterable2[T]
    @f : (T) -> Bool

    def init(@iterable : Iterable2[T], @f : (T) -> Bool) {}

    def iterator() -> Iterator2[T] {
        return FilterIterator2[T].new(@iterable.iterator(), @f);
    }
}

class FilterIterator2[T] extends Iterator2[T] {
    @iterator : Iterator2[T]
    @f : (T) -> Bool
    
    def init(@iterator : Iterator2[T], @f : (T) -> Bool) {}

    def next() -> T | Nil {
        next = @iterator.next();
        while next is T {
            if @f.call(next) { return next; }
            next = @iterator.next();
        }
        return nil;
    }
}

class ChainIterable2[T] extends Iterable2[T] {
    @first : Iterable2[T]
    @second : Iterable2[T]

    def init(@first : Iterable2[T], @second : Iterable2[T]) {}

    def iterator() -> Iterator2[T] {
        return ChainIterator2[T].new(@first.iterator(), @second.iterator());
    }
}

class ChainIterator2[T] extends Iterator2[T] {
    @first : Iterator2[T]
    @second : Iterator2[T]
    @on_first : Bool

    def init(@first : Iterator2[T], @second : Iterator2[T]) {
        @on_first = true;
    }
    def next() -> T | Nil {
        if @on_first {
            next = @first.next();
            if next is T { return next; }
            @on_first = false;
        }
        return @second.next();
    }
}

class InterleaveIterable2[T] extends Iterable2[T] {
    @first : Iterable2[T]
    @second : Iterable2[T]

    def init(@first : Iterable2[T], @second : Iterable2[T]) {}

    def iterator() -> Iterator2[T] {
        return InterleaveIterator2[T].new(@first.iterator(), @second.iterator());
    }
}

class InterleaveIterator2[T] extends Iterator2[T] {
    @first : Iterator2[T]
    @second : Iterator2[T]
    @on_first : Bool

    def init(@first : Iterator2[T], @second : Iterator2[T]) {
        @on_first = true;
    }
    def next() -> T | Nil {
        if @on_first {
            @on_first = false;
            return @first.next();
        }
        @on_first = true;
        return @second.next();
    }
}

ary = Array[i32].new();
ary.append(5).append(6).append(7).append(8);
add = (a : i32, b : i32) => { a + b; };

IO.print(ary.reduce(0, add));
IO.print([5,6,7].reduce(0, add));
times_two = (x : i32) => { x * 2; };
ary2 = ary.map(times_two);

IO.print("here");

if ary2 is MapIterable2[i32] { IO.print("2"); }
ary3 = Array[i32].new().append(5).append(6).append(7).append(8).map(times_two);
IO.print(ary3.reduce(0, add));