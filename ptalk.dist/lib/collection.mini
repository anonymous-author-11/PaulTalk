import iteration;

class Collection[T] extends Iterable[T] {

    abstract def size() -> i32 {}

    def is_empty() -> Bool {
        return self.size() == 0;
    }

    // Iterable.filter is *not* overridden because the size of a filtered collection cannot be known prior to iterating

    def enumerate() -> Collection[Pair[i32, T]] {
        return EnumeratedCollection[T]{self};
    } ~> { ret.iterable == self }
    
    def map[U](f : (T) -> U) -> Collection[U] {
        return MappedCollection[T, U]{self, f};
    } ~> { ret.iterable == self, ret.f == f }
    
    def chain(other : Collection[T]) -> Collection[T] {
        return ChainedCollection[T]{self, other};
    } ~> { ret.first == self, ret.second == other }
    
    def interleave(other : Collection[T]) -> Collection[T] {
        return InterleavedCollection[T]{self, other};
    } ~> { ret.first == self, ret.second == other }
    
    def zip[U](other : Collection[U]) -> Collection[Pair[T, U]] {
        return ZippedCollection[T, U]{self, other};
    } ~> { ret.first == self, ret.second == other }
    
    def product[U](other : Collection[U]) -> Collection[Pair[T, U]] {
        return ProductCollection[T, U]{self, other};
    } ~> { ret.first == self, ret.second == other }
}

class EnumeratedCollection[T] extends Collection[Pair[i32, T]] {
	@collection : Collection[T]

    def init(@collection : Collection[T]) {
    }
    def iterator() -> Enumerator[T] {
    	return Enumerator{@collection.iterator()};
    }
    def size() -> i32 {
    	return @collection.size();
    }
}

class MappedCollection[T, U] extends Collection[U] {
	@collection : Collection[T]
	@f : (T) -> U

    def init(@collection : Collection[T], @f : (T) -> U) {
    }
    def iterator() -> MapIterator[T, U] {
    	return MapIterator{@collection.iterator(), @f};
    }
    def size() -> i32 {
    	return @collection.size();
    }
}

class ChainedCollection[T] extends Collection[T] {
	@first : Collection[T]
	@second : Collection[T]

    def init(@first : Collection[T], @second : Collection[T]) {
    }
    def iterator() -> ChainIterator[T] {
    	return ChainIterator{@first.iterator(), @second.iterator()};
    }
    def size() -> i32 {
    	return @first.size() + @second.size();
    }
}

class InterleavedCollection[T] extends Collection[T] {
	@first : Collection[T]
	@second : Collection[T]

    def init(@first : Collection[T], @second : Collection[T]) {
    }
    def iterator() -> InterleaveIterator[T] {
    	return InterleaveIterator{@first.iterator(), @second.iterator()};
    }
    def size() -> i32 {
    	return @first.size() + @second.size();
    }
}

class ZippedCollection[T, U] extends Collection[Pair[T, U]] {
	@first : Collection[T]
	@second : Collection[U]

    def init(@first : Collection[T], @second : Collection[U]) {
    }
    def iterator() -> ZipIterator[T, U] {
    	return ZipIterator{@first.iterator(), @second.iterator()};
    }
    def size() -> i32 {
    	first_size = @first.size();
    	second_size = @second.size();
    	if first_size < second_size { return first_size; }
    	return second_size;
    }
}

class ProductCollection[T, U] extends Collection[Pair[T, U]] {
	@first : Collection[T]
	@second : Collection[U]

    def init(@first : Collection[T], @second : Collection[U]) {
    }
    def iterator() -> ProductIterator[T, U] {
    	return ProductIterator{@first.iterator(), @second};
    }
    def size() -> i32 {
    	return @first.size() * @second.size();
    }
}