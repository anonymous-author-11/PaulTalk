import core;

class KeyNotFound extends Exception {}

class Map[K, V] extends Iterable[Pair[K, V]] {
    abstract def size() -> i32 {}
    abstract def get(key : K) -> V | Nil {}
    abstract def []=(key : K, value : V) {}
    abstract def remove(key : K) -> V | Nil {}
    abstract def clear() {}

    def [](key : K) -> V {
        val = self.get(key);
        if val is Nil { yield(KeyNotFound.new()); }
        if val is V { return val; }
    }
}

class HashMap[K, V] extends Map[K, V] {}

def i32_hasher(i : i32) -> i32 {
    // Same fast bit-mixing hash function
    i = (i + 0x7ed55d16) + (i << 12);
    i = (i bit_xor 0xc761c23c) bit_xor (i >> 19);
    i = (i + 0x165667b1) + (i << 5);
    i = (i + 0xd3a2646c) bit_xor (i << 9);
    i = (i + 0xfd7046c5) + (i << 3);
    i = (i bit_xor 0xb55a4f09) bit_xor (i >> 16);
    return i;
}

def i32_eq(a : i32, b : i32) -> Bool {
    return a == b;
}

def string_hasher(s : String) -> i32 {
    hash : i32 = 0;
    seed : i32 = 31;
    for c in s {
        cast_val : i32 = c.byte();
        hash = (hash * seed + cast_val) bit_and 0x7FFFFFFF;
    }
    return hash;
}

def string_eq(a : String, b : String) -> Bool {
    return a == b;
}
