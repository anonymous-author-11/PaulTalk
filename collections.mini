import core;
import io;

class Pair[T, U] {

    @first : T
    @second : U

    def init(@first : T, @second : U) {
    }
    #[ret == @first]
    def first() -> T {
        return @first;
    }
    #[ret == @second]
    def second() -> U {
        return @second;
    }
}

class Container {
    @elems_reg : Region
}

class Iterator2[T] extends Container {

    @referent_reg : Region

    regions { @elems_reg == @referent_reg.elems_reg }

    #[ret == @elems_reg]
    abstract def next() -> T | Nil {}
}

class Iterable2[T] extends Container {

    #[ret.referent_reg == self]
    abstract def iterator() -> Iterator2[T] {
    }
    def each(f : (T)) {
        for x in self { f.call(x); }
    }
    #[ret == accumulator]
    def reduce(accumulator : T, f : (T, T) -> T) -> T {
        for x in self { accumulator = f.call(accumulator, x); }
        return accumulator;
    }
    def all(f : (T) -> Bool) -> Bool {
        for x in self { if not f.call(x) { return false; } }
        return true;
    }
    def any(f : (T) -> Bool) -> Bool {
        for x in self { if f.call(x) { return true; } }
        return false;
    }
    #[ret.iterable == self, ret.f == f]
    def map[U](f : (T) -> U) -> MapIterable2[T, U] {
        return MapIterable2[T, U].new(self, f);
    }
    #[ret.iterable == self, ret.f == f]
    def filter(f : (T) -> Bool) -> FilterIterable2[T] {
        return FilterIterable2[T].new(self, f);
    }
    #[ret.first == self, ret.second == other]
    def chain(other : Iterable2[T]) -> ChainIterable2[T] {
        return ChainIterable2[T].new(self, other);
    }
    #[ret.first == self, ret.second == other]
    def interleave(other : Iterable2[T]) -> InterleaveIterable2[T] {
        return InterleaveIterable2[T].new(self, other);
    }
    #[ret.first == self, ret.second == other]
    def zip[U](other : Iterable2[U]) -> ZipIterable2[T, U] {
        return ZipIterable2[T, U].new(self, other);
    }
    #[ret.first == self, ret.second == other]
    def product[U](other : Iterable2[U]) -> ProductIterable2[T, U] {
        return ProductIterable2[T, U].new(self, other);
    }
}

class Array[T] extends Iterable2[T] {
    @buffer : Buffer[T]
    @length : i32
    @capacity : i32

    regions { @elems_reg == @buffer.elems_reg }

    #[ret.elems_reg == iterable.elems_reg]
    def Self.from_iterable(iterable : Iterable2[T]) -> Array[T] {
        result = Array[T].new();
        for elem in iterable { result.append(elem); }
        return result;
    }
    def init() {
        @buffer = Buffer[T].new(1);
        @length = 0;
        @capacity = 1;
    }
    def init(@capacity : i32) {
        @buffer = Buffer[T].new(@capacity);
        @length = 0;
    }
    #[ret == @length]
    def length() -> i32 {
        return @length;
    }
    #[ret == @capacity]
    def capacity() -> i32 {
        return @capacity;
    }
    #[ret == self, x == @elems_reg]
    def append(x : T) -> Array[T] {
        if @length >= @capacity { self.grow(); }
        @buffer.[@length] = x;
        @length = @length + 1;
        return self;
    }
    def grow() {
        @capacity = @capacity * 2;
        old_buffer = @buffer;
        @buffer = Buffer[T].new(@capacity);
        i = 0;
        while i < @length {
            @buffer.[i] = old_buffer.[i];
            i = i + 1;
        }
    }
    #[ret == @elems_reg]
    def [](x : i32) -> T yields OutOfBounds | Nil {
        past_end = x > (@length - 1);
        before_start = (@length + x) < 0;
        if past_end or before_start { self.throw_oob(x); }
        if x < 0 { x = @length + x; }
        return self.unsafe_index(x);
    }
    def insert_at(elem : T, x : i32) {
        past_end = x > (@length - 1);
        before_start = (@length + x) < 0;
        if past_end or before_start { self.throw_oob(x); }
        if x < 0 { x = @length + x; }
        @buffer.[x] = elem;
    }
    def throw_oob(x : i32) yields OutOfBounds {
        yield(Exception.new());
    }
    #[ret == @elems_reg]
    def unsafe_index(x : i32) -> T {
        return @buffer.[x];
    }
    def iterator() -> ArrayIterator[T] {
        return ArrayIterator[T].new(self);
    }
}

class ArrayIterator[T] extends Iterator2[T] {
    @array : Array[T]
    @index : i32

    regions { @referent_reg == @array }

    def init(@array : Array[T]) { @index = 0; }
    def next() -> T | Nil {
        if @index >= @array.length() { return nil; }
        @index = @index + 1;
        return @array.unsafe_index(@index - 1);
    }
}

class MapIterable2[T, U] extends Iterable2[U] {
    @iterable : Iterable2[T]
    @f : (T) -> U

    regions { @elems_reg == @iterable.elems_reg }

    def init(@iterable : Iterable2[T], @f : (T) -> U) {}

    def iterator() -> MapIterator2[T, U] {
        return MapIterator2[T, U].new(@iterable.iterator(), @f);
    }
}

class MapIterator2[T, U] extends Iterator2[U] {
    @iterator : Iterator2[T]
    @f : (T) -> U

    regions { @referent_reg == @iterator }

    def init(@iterator : Iterator2[T], @f : (T) -> U) {}

    def next() -> U | Nil {
        next = @iterator.next();
        if next is T { return @f.call(next); }
        return nil;
    }
}

class FilterIterable2[T] extends Iterable2[T] {
    @iterable : Iterable2[T]
    @f : (T) -> Bool

    regions { @elems_reg == @iterable.elems_reg }

    def init(@iterable : Iterable2[T], @f : (T) -> Bool) {}

    def iterator() -> FilterIterator2[T] {
        return FilterIterator2[T].new(@iterable.iterator(), @f);
    }
}

class FilterIterator2[T] extends Iterator2[T] {
    @iterator : Iterator2[T]
    @f : (T) -> Bool

    regions { @referent_reg == @iterator }
    
    def init(@iterator : Iterator2[T], @f : (T) -> Bool) {}

    def next() -> T | Nil {
        next = @iterator.next();
        while next is T {
            if @f.call(next) { return next; }
            next = @iterator.next();
        }
        return nil;
    }
}

class ChainIterable2[T] extends Iterable2[T] {
    @first : Iterable2[T]
    @second : Iterable2[T]

    regions {
        @first == @second,
        @elems_reg == @first.elems_reg
    }

    def init(@first : Iterable2[T], @second : Iterable2[T]) {}

    def iterator() -> ChainIterator2[T] {
        return ChainIterator2[T].new(@first.iterator(), @second.iterator());
    }
}

class ChainIterator2[T] extends Iterator2[T] {
    @first : Iterator2[T]
    @second : Iterator2[T]
    @on_first : Bool

    regions {
        @referent_reg == @first,
        @referent_reg == @second
    }

    def init(@first : Iterator2[T], @second : Iterator2[T]) {
        @on_first = true;
    }
    def next() -> T | Nil {
        if not @on_first { return @second.next(); }
        next = @first.next();
        if next is T { return next; }
        @on_first = false;
    }
}

class InterleaveIterable2[T] extends Iterable2[T] {
    @first : Iterable2[T]
    @second : Iterable2[T]

    regions {
        @first == @second,
        @elems_reg == @first.elems_reg
    }

    def init(@first : Iterable2[T], @second : Iterable2[T]) {}

    def iterator() -> InterleaveIterator2[T] {
        return InterleaveIterator2[T].new(@first.iterator(), @second.iterator());
    }
}

class InterleaveIterator2[T] extends Iterator2[T] {
    @first : Iterator2[T]
    @second : Iterator2[T]
    @on_first : Bool

    regions {
        @referent_reg == @first,
        @referent_reg == @second
    }

    def init(@first : Iterator2[T], @second : Iterator2[T]) {
        @on_first = true;
    }
    def next() -> T | Nil {
        if @on_first {
            @on_first = false;
            return @first.next();
        }
        @on_first = true;
        return @second.next();
    }
}

class ZipIterable2[T, U] extends Iterable2[Pair[T, U]] {
    @first : Iterable2[T]
    @second : Iterable2[U]

    regions {
        @elems_reg < @first.elems_reg,
        @elems_reg < @second.elems_reg
    }

    def init(@first : Iterable2[T], @second : Iterable2[U]) {}

    def iterator() -> ZipIterator2[T, U] {
        return ZipIterator2[T, U].new(@first.iterator(), @second.iterator());
    }
}

class ZipIterator2[T, U] extends Iterator2[Pair[T, U]] {
    @first : Iterator2[T]
    @second : Iterator2[U]

    regions {
        @elems_reg < @first.elems_reg,
        @elems_reg < @second.elems_reg
    }

    def init(@first : Iterator2[T], @second : Iterator2[U]) {
    }

    def next() -> Pair[T, U] | Nil {
        first_elem = @first.next();
        second_elem = @second.next();
        if first_elem is T {
            if second_elem is U { return Pair[T, U].new(first_elem, second_elem); }
        }
        return nil;
    }
}

class ProductIterable2[T, U] extends Iterable2[Pair[T, U]] {
    @first : Iterable2[T]
    @second : Iterable2[U]

    regions {
        @elems_reg < @first.elems_reg,
        @elems_reg < @second.elems_reg
    }

    def init(@first : Iterable2[T], @second : Iterable2[U]) {
    }
    def iterator() -> ProductIterator2[T, U] {
        return ProductIterator2[T, U].new(@first.iterator(), @second);
    }
}

class ProductIterator2[T, U] extends Iterator2[Pair[T, U]] {
    @first_iterator : Iterator2[T]
    @second_iterator : Iterator2[U]
    @second_iterable : Iterable2[U]
    @current_first : T | Nil

    regions {
        @current_first == @first_iterator.elems_reg,
        @second_iterator.referent_reg == @second_iterable,
        @elems_reg < @first_iterator.elems_reg,
        @elems_reg < @second_iterator.elems_reg
    }

    def init(@first_iterator : Iterator2[T], @second_iterable : Iterable2[U]) {
        @second_iterator = @second_iterable.iterator();
        @current_first = @first_iterator.next();
    }

    def next() -> Pair[T, U] | Nil {
        current_first = @current_first;
        while current_first is T {
            second_elem = @second_iterator.next();
            if second_elem is U { return Pair[T, U].new(current_first, second_elem); }
            @current_first = @first_iterator.next();
            @second_iterator = @second_iterable.iterator();
            current_first = @current_first;
        }
        return nil;
    }
}
