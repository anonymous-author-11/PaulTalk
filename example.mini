// pc == protection counter
// reg == memory region

// allocation -- know exactly where data value is allocated
data = Object.new();
// data reg pc incremented

// allocation -- know exactly where buf value is allocated
buf = Buffer[Object].new(1);
// buf reg pc incremented

// data must outlive buf
buf.[0] = data;

// buf must outlive ary
ary = Array.new(buf, 1, 1);
// ary reg pc incremented

// don't know where iter is allocated. must increment iter reg pc internally.
// ary must outlive iter
iter = ary.iterator();

// don't know where x is allocated. must increment x reg pc internally.
// last use of iter imminent-- decrease protection count of ary reg, iter reg, buf reg, data reg [problematic! iter not allocated in this scope!]
// iter reg, ary reg, buf reg freed internally
// data reg atempted free internally; still protected (because aliased by x)
// x must outlive iter
x = iter.next();

// last use of x imminent; x (and data) reg pc decremented [problematic! x not allocated in this scope!]
// x (and data) reg attempted free internally (succeeded)
IO.print(x);

/// ----------

data = Object.new(); // data -> obj

buf = Buffer[Object].new(1);

// probably is necessary for things put in a buffer to have equivalent lifetimes; for simplicity, equal to the buffer
buf.[0] = data; // buf == data

ary = Array.new(buf, 1, 1); // ary -> ary.elems_reg; buf == ary.elems_reg == data

iter = ary.iterator(); // iter -> iter.elems_reg; iter.elems_reg == ary.elems_reg == buf == data

// iter deprotected; freed within next call
x = iter.next(); // x == iter.elems_reg == ary.elems_reg == buf == data

// ary deprotected and freed since iter is dead

// x/data/buf region deprotected and freed within next call
IO.print(x);