
class Iterator {
}

class Iterable {
    abstract def iterator() -> Iterator {}
}

class Representable {
    def repr() -> String { return "Object"; }
}

class String extends Iterable, Representable {
    @bytes : Buffer[i8]
    @length : i32
    @capacity: i32

    def init() {
        @bytes = Buffer[i8].new(1);
        @capacity = 1;
        @length = 0;
    }

    def init(@bytes : Buffer[i8], @length : i32, @capacity : i32) {}

    def length() -> i32 { return @length; }
    def capacity() -> i32 { return @capacity; }
    def bytes() -> Buffer[i8] { return @bytes; }

    def append(x : i8) -> String {
        if @length < @capacity {
            @bytes.[@length] = x;
            @length = @length + 1;
            return self;
        }
        @capacity = @capacity * 2;
        old_buffer = @bytes;
        @bytes = Buffer[i8].new(@capacity);
        i = 0;
        while i < @length {
            @bytes.[i] = old_buffer.[i];
            i = i + 1;
        }
        @bytes.[@length] = x;
        @length = @length + 1;
        return self;
    }
    def extend(str : String) -> String {
        str_buf = str.bytes();
        str_len = str.length();
        if @length + str_len < @capacity {
            a = @length;
            b = 0;
            while a < @length + str_len {
                @bytes.[a] = str_buf.[b];
                a = a + 1;
                b = b + 1;
            }
            @length = @length + str_len;
            return self;
        }
        @capacity = @length + str_len;
        old_buffer = @bytes;
        @bytes = Buffer[i8].new(@capacity);
        a = 0;
        b = 0;
        while a < @length + str_len {
            if a < @length {
                @bytes.[a] = old_buffer.[a];
                a = a + 1;
                continue;
            }
            @bytes.[a] = str_buf.[b];
            a = a + 1;
            b = b + 1;
        }
        @length = @length + str_len;
        return self;
    }
    def [](x : i32) -> i8 {
        if x > (@length - 1) { yield(); }
        if x >= 0 { return @bytes.[x]; }
        if (@length + x) < 0 { yield(); }
        return @bytes.[@length + x];
    }
    def ==(other : String) -> Bool {
        if @length != other.length() { return false; }
        i = 0;
        while i < @length {
            byte_unequal = @bytes.[i] != other.bytes().[i];
            if byte_unequal { return false; }
            i = i + 1;
        }
        return true;
    }
    def pop() -> i8 | Nil {
        if @length == 0 { return nil; }
        @length = @length - 1;
        return @bytes.[@length];
    }
    def copy() -> String {
        new_buf = Buffer[i8].new(@length);
        i = 0;
        while i < @length {
            new_buf.[i] = @bytes.[i];
            i = i + 1;
        }
        new_str = String.new(new_buf, @length, @length);
        return new_str;
    }
    def c_string() -> Buffer[i8] {
        buf = Buffer[i8].new(@length + 1);
        i = 0;
        while i < @length {
            buf.[i] = @bytes.[i];
            i = i + 1;
        }
        null : i8 = 0;
        buf.[@length] = null;
        return buf;
    }
    def iterator() -> StringIterator {
        return StringIterator.new(self);
    }
    def repr() -> String {
        return self;
    }
}

class Character {
    @byte : i8

    def byte() -> i8 { return @byte; }

    def init(@byte : i8) {}

}

class StringIterator extends Iterator {
    @str : String
    @index : i32
    def init(@str : String) { @index = 0; }
    def next() -> Character | Nil {
        if @index < @str.length() {
            @index = @index + 1;
            return Character.new(@str.bytes().[@index - 1]);
        }
        return nil;
    }
}

class Exception {
	@line_number : i32
	@file_name : String
	@message : String

	def init(@message : String) {
        @line_number = 0;
        @file_name = "";
    }
	def init() {
        @line_number = 0;
		@message = "<None>";
        @file_name = "";
	}

    def set_info(@line_number : i32, @file_name : String) {}

	def report() {
		print("---------".c_string());
		print("Exception thrown from file".c_string());
		print(@file_name.c_string());
		print("At line".c_string());
		print(@line_number);
		print("With message".c_string());
		self.print_message();
		print("---------".c_string());
	}
    def print_message() {
        print(@message.c_string());
    }
}

def report_exception(current_coroutine : Coroutine[() -> Exception]) {
	exception = current_coroutine.result();
	if exception is Exception { exception.report(); }
}