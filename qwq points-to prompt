I am writing a compiler for my own programming language. I want to do points-to and lifetime analysis to assign allocations into memory regions. I want these analyses to be intraprocedural, which necessitates certain annotations for functions and methods so that points-to information can be embedded in the caller without looking at the body of the called method/function. The way of doing this will be to throw a compiler error when analyzing a function if the annotations do not "reflect" the points-to information inferred from the body.

A points-to graph is constructed for each method in the following way. We keep a set of "points-to facts" which are triples like ("a","<","b"), meaning that a points-to b, therefore for memory safety, b outlives a (outlives == greater than). Every assignment adds a points-to fact like ("x","==","y"). "self" always points-to its fields ("self","<","@field"). we introduce a pseudoparameter called "ret" which is equal to the value returned. Calls create points-to facts based on their annotations, mapping arguments to the formal parameters named in these annotations. Then after we go through the method collecting all these points-to facts (flow insensitively), we coalesce them all into a points-to graph. Names which are equal become merged into the same node, and inequalities create arrows between nodes.

So my problem is this: I need to raise compiler errors when the annotations on the method do not adequately "reflect" or "cover" the points-to relations inferred from the body of the method. If the body of foo(a, b) shows that a points-to b, this must be part of the annotations, like #[a < b], or else callers will be unaware of necessary lifetime constraints. But I need to formulate precisely what it means for the annotations to "adequately cover" the points-to relations inferred from the body, represented by the points-to graph.

Some additional points: annotations only need to specify relations between parameters, including "ret" and "self" as parameters. This is because callers don't care about variables which are purely internal to a called method. The fact that "self" points to its fields doesn't need to be annotated, because this is always true.

So, to say the problem again, "I need to formulate precisely what it means for the annotations to 'adequately cover' the points-to relations inferred from the body, represented by the points-to graph."