import core;
import io;

class Pair[T, U] {
	@first : T
	@second : U

	def init(@first : T, @second : U){
	}
    #[ret == @first]
	def first() -> T {
		return @first;
	}
    #[ret == @second]
	def second() -> U {
		return @second;
	}
}

class Container {
    @elems_reg : Region
}

class DualContainer[T, U] extends Container
    where T <: Container, U <: Container {

    @first : T
    @second : U

    regions {
        @elems_reg < @first.elems_reg,
        @elems_reg < @second.elems_reg
    }
}

class Iterator[T] extends Container {
    #[ret == @elems_reg]
	abstract def next() -> T | Nil {}
}

class Iterable[T] extends Container {

    #[ret < self, ret.elems_reg == @elems_reg]
	abstract def iterator() -> Iterator[T] {
    }
	def each(f : (T)) {
        for x in self { f.call(x); }
    }
    #[ret == accumulator]
    def reduce(accumulator : T, f : (T, T) -> T) -> T {
        for x in self { accumulator = f.call(accumulator, x); }
        return accumulator;
    }
    def all(f : (T) -> Bool) -> Bool {
        for x in self {
            if f.call(x) { continue; }
            return false;
        }
        return true;
    }
    def any(f : (T) -> Bool) -> Bool {
        for x in self { if f.call(x) { return true; } }
        return false;
    }
    #[ret < self, ret < f]
    def map[U](f : (T) -> U) -> MapIterable[T, U] {
        return MapIterable[T, U].new(self, f);
    }
    #[ret < self, ret < f]
    def filter(f : (T) -> Bool) -> FilterIterable[T] {
        return FilterIterable[T].new(self, f);
    }
    #[ret < self, ret < other]
    def chain(other : Iterable[T]) -> ChainIterable[T] {
        return ChainIterable[T].new(self, other);
    }
    #[ret < self, ret < other]
    def interleave(other : Iterable[T]) -> InterleaveIterable[T] {
        return InterleaveIterable[T].new(self, other);
    }
    #[ret < self, ret < other]
    def zip[U](other : Iterable[U]) -> ZipIterable[T, U] {
        return ZipIterable[T, U].new(self, other);
    }
    #[ret < self, ret < other]
    def product[U](other : Iterable[U]) -> ProductIterable[T, U] {
        return ProductIterable[T, U].new(self, other);
    }
}

class DualIterable[T] extends DualContainer[Iterable[T], Iterable[T]], Iterable[T] {}

class DualIterator[T] extends DualContainer[Iterator[T], Iterator[T]], Iterator[T] {}

class PairIterable[T, U] extends DualContainer[Iterable[T], Iterable[U]], Iterable[Pair[T, U]] {}

class PairIterator[T, U] extends DualContainer[Iterator[T], Iterator[U]], Iterator[Pair[T, U]] {}

class Array[T] extends Iterable[T] {
	@buffer : Buffer[T]
	@length : i32
	@capacity : i32

    regions { @elems_reg == @buffer }

    #[ret.elems_reg == iterable.elems_reg]
	def Self.from_iterable(iterable : Iterable[T]) -> Array[T] {
    	result = Array[T].new(); 
        
    	for elem in iterable {
            result.append(elem);
        }
    	return result;
    }
	def init() {
		@buffer = Buffer[T].new(1);
		@length = 0;
		@capacity = 1;
	}
    def init(@capacity : i32) {
        @buffer = Buffer[T].new(@capacity);
        @length = 0;
    }
    #[ret == @length]
	def length() -> i32 {
		return @length;
	}
    #[ret == @capacity]
    def capacity() -> i32 {
    	return @capacity;
    }
    #[x == @elems_reg, ret == self]
    def append(x : T) -> Array[T] {
        if @length >= @capacity { self.grow(); }
        @buffer.[@length] = x;
        @length = @length + 1;
        return self;
    }
    def grow() {
    	@capacity = @capacity * 2;
        old_buffer = @buffer;
        @buffer = Buffer[T].new(@capacity);
        i = 0;
        while i < @length {
            @buffer.[i] = old_buffer.[i];
            i = i + 1;
        }
    }
    #[ret == @elems_reg]
    def [](x : i32) -> T yields OutOfBounds | Nil {
    	past_end = x > (@length - 1);
    	before_start = (@length + x) < 0;
        if past_end or before_start { self.throw_oob(x); }
        if x < 0 { x = @length + x; }
        return self.unsafe_index(x);
    }
    def throw_oob(x : i32) yields OutOfBounds {
    	yield(Exception.new());
    }
    #[ret == @elems_reg]
    def unsafe_index(x : i32) -> T {
    	return @buffer.[x];
    }
    def iterator() -> ArrayIterator[T] {
    	return ArrayIterator[T].new(self);
    }
}

class ArrayIterator[T] extends Iterator[T] {
	@array : Array[T]
	@index : i32

    regions { @elems_reg == @array.elems_reg }

	def init(@array : Array[T]) { @index = 0; }

	def next() -> T | Nil {
		if @index >= @array.length() { return nil; }
		@index = @index + 1;
		return @array.unsafe_index(@index - 1);
	}
}

class MapIterable[T, U] extends Iterable[U] {
    @iterable : Iterable[T]
    @f : (T) -> U

    regions {
        @elems_reg == @iterable.elems_reg,
        @f == self
    }

    def init(@iterable : Iterable[T], @f : (T) -> U) {}

    def iterator() -> MapIterator[T, U] {
        return MapIterator[T, U].new(@iterable.iterator(), @f);
    }
}

class MapIterator[T, U] extends Iterator[U] {
    @iterator : Iterator[T]
    @f : (T) -> U

    regions { @elems_reg == @iterator.elems_reg }

    def init(@iterator : Iterator[T], @f : (T) -> U) {}

    def next() -> U | Nil {
        next = @iterator.next();
        if next is T {
            return @f.call(next);
        }
        return nil;
    }
}

class FilterIterable[T] extends Iterable[T] {
    @iterable : Iterable[T]
    @f : (T) -> Bool

    regions {
        @elems_reg == @iterable.elems_reg,
        @f == self
    }

    def init(@iterable : Iterable[T], @f : (T) -> Bool) {}

    def iterator() -> FilterIterator[T] {
        return FilterIterator[T].new(@iterable.iterator(), @f);
    }
}

class FilterIterator[T] extends Iterator[T] {
    @iterator : Iterator[T]
    @f : (T) -> Bool

    regions { @elems_reg == @iterator.elems_reg }
    
    def init(@iterator : Iterator[T], @f : (T) -> Bool) {}

    def next() -> T | Nil {
        next = @iterator.next();
        while next is T {
            if @f.call(next) { return next; }
            next = @iterator.next();
        }
        return nil;
    }
}

class ChainIterable[T] extends DualIterable[T] {

    def init(@first : Iterable[T], @second : Iterable[T]) {}

    def iterator() -> ChainIterator[T] {
        return ChainIterator[T].new(@first.iterator(), @second.iterator());
    }
}

class ChainIterator[T] extends DualIterator[T] {
    @on_first : Bool

    def init(@first : Iterator[T], @second : Iterator[T]) {
        @on_first = true;
    }
    def next() -> T | Nil {
        if @on_first {
            next = @first.next();
            if next is T { return next; }
            @on_first = false;
        }
        return @second.next();
    }
}

class InterleaveIterable[T] extends DualIterable[T] {

    def init(@first : Iterable[T], @second : Iterable[T]) {}

    def iterator() -> InterleaveIterator[T] {
        return InterleaveIterator[T].new(@first.iterator(), @second.iterator());
    }
}

class InterleaveIterator[T] extends DualIterator[T] {
    @on_first : Bool

    def init(@first : Iterator[T], @second : Iterator[T]) {
        @on_first = true;
    }
    def next() -> T | Nil {
        if @on_first {
            @on_first = false;
            return @first.next();
        }
        @on_first = true;
        return @second.next();
    }
}

class ZipIterable[T, U] extends PairIterable[T, U] {

    def init(@first : Iterable[T], @second : Iterable[U]) {}

    def iterator() -> ZipIterator[T, U] {
        return ZipIterator[T, U].new(@first.iterator(), @second.iterator());
    }
}

class ZipIterator[T, U] extends PairIterator[T, U] {

    def init(@first : Iterator[T], @second : Iterator[U]) {}

    def next() -> Pair[T, U] | Nil {
        first_elem = @first.next();
        second_elem = @second.next();
        if first_elem is T {
            if second_elem is U { return Pair[T, U].new(first_elem, second_elem); }
        }
        return nil;
    }
}

class ProductIterable[T, U] extends PairIterable[T, U] {

    def init(@first : Iterable[T], @second : Iterable[U]) {}

    def iterator() -> ProductIterator[T, U] {
        return ProductIterator[T, U].new(@first, @second);
    }
}

class ProductIterator[T, U] extends PairIterator[T, U] {
    @second_iterable : Iterable[U]
    @current_first : T | Nil

    regions {
        @second.elems_reg == @second_iterable.elems_reg,
        @current_first == @first.elems_reg
    }

    def init(first_iterable : Iterable[T], @second_iterable : Iterable[U]) {
        @first = first_iterable.iterator();
        @second = @second_iterable.iterator();
        @current_first = @first.next();
    }

    def next() -> Pair[T, U] | Nil {
        current_first = @current_first;
        while current_first is T {
            second_elem = @second.next();
            if second_elem is U { return Pair[T, U].new(current_first, second_elem); }
            @current_first = @first.next();
            @second = @second_iterable.iterator();
            current_first = @current_first;
        }
        return nil;
    }
}

ary = Array[i32].new();
ary.append(5).append(6).append(7).append(8);
add = (a : i32, b : i32) => { a + b; };

IO.print(ary.reduce(0, add));
times_two = (x : i32) => { x * 2; };
identity = (x : i32) => { x; };
to_float = (x : i32) => { y : f64 = x; y; };
ary2 = ary.map(times_two);
ary4 = ary2.map(identity).map(to_float);

for x in ary4 {
	IO.print(x);`  
}

ary3 = ary.zip(ary4);
for pair in ary3 {
	IO.print(pair.first());
	IO.print(pair.second());
}
