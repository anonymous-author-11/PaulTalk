--- |
  ; ModuleID = 'out_optimized.ll'
  source_filename = "llvm-link"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
  
  @_parameterization_Int32_or_Float64 = linkonce_odr constant [3 x ptr] [ptr @union_typ, ptr @_parameterization_Int32, ptr @_parameterization_Float64]
  @_parameterization_Float64_or_Int32 = linkonce_odr constant [3 x ptr] [ptr @union_typ, ptr @_parameterization_Float64, ptr @_parameterization_Int32]
  @_parameterization_Ptri1 = linkonce_odr constant [1 x ptr] [ptr @bool_typ]
  @_parameterization_Int32 = linkonce_odr constant [1 x ptr] [ptr @Int32]
  @_parameterization_Tuple_Ptrf64._Ptrf64._Ptrf64._Ptrf64_ = linkonce_odr constant [5 x ptr] [ptr @tuple_typ, ptr @_parameterization_Ptrf64, ptr @_parameterization_Ptrf64, ptr @_parameterization_Ptrf64, ptr @_parameterization_Ptrf64]
  @_parameterization_Float64 = linkonce_odr constant [1 x ptr] [ptr @Float64]
  @_parameterization_Ptrf64 = linkonce_odr constant [1 x ptr] [ptr @f64_typ]
  @Pair_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @Pair, ptr null]
  @Pair_offset_tbl = linkonce_odr constant [4 x i32] [i32 17, i32 7, i32 7, i32 0]
  @Pair = constant { [3 x i64], [4 x ptr], [10 x ptr] } { [3 x i64] [i64 9197944775169318296, i64 4611686018427388081, i64 3], [4 x ptr] [ptr @subtype_test, ptr @Pair_hashtbl, ptr @Pair_offset_tbl, ptr getelementptr ({ { ptr, i160 }, { ptr, i160 }, ptr, ptr }, ptr null, i32 1)], [10 x ptr] [ptr @Pair_field_first, ptr @Pair_field_second, ptr @Pair_field_Pair_0, ptr @Pair_field_Pair_1, ptr @Pair_B_init_firstT_secondU, ptr @Pair_B_first_, ptr @Pair_B_second_, ptr @Pair_init_firstT_secondU, ptr @Pair_first_, ptr @Pair_second_] }
  @FancyPair_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @Pair, ptr @any_typ, ptr @FancyPair]
  @FancyPair_offset_tbl = linkonce_odr constant [4 x i32] [i32 27, i32 17, i32 7, i32 7]
  @FancyPair = constant { [3 x i64], [4 x ptr], [20 x ptr] } { [3 x i64] [i64 -3765382636606614851, i64 4611686018427388091, i64 3], [4 x ptr] [ptr @subtype_test, ptr @FancyPair_hashtbl, ptr @FancyPair_offset_tbl, ptr getelementptr ({ { double, double, double, double }, double }, ptr null, i32 1)], [20 x ptr] [ptr @FancyPair_field_first, ptr @FancyPair_field_second, ptr @FancyPair_field_FancyPair_0, ptr @FancyPair_field_FancyPair_1, ptr @FancyPair_B_init_firstTuple_Ptrf64._Ptrf64._Ptrf64._Ptrf64__secondPtrf64, ptr @FancyPair_B_first_, ptr @FancyPair_B_second_, ptr @FancyPair_init_firstTuple_Ptrf64._Ptrf64._Ptrf64._Ptrf64__secondPtrf64, ptr @Pair_first_, ptr @FancyPair_second_, ptr @FancyPair_field_first, ptr @FancyPair_field_second, ptr @FancyPair_field_FancyPair_0, ptr @FancyPair_field_FancyPair_1, ptr @FancyPair_B_init_firstTuple_Ptrf64._Ptrf64._Ptrf64._Ptrf64__secondPtrf64, ptr @FancyPair_B_first_, ptr @FancyPair_B_second_, ptr @FancyPair_init_firstTuple_Ptrf64._Ptrf64._Ptrf64._Ptrf64__secondPtrf64, ptr @Pair_first_, ptr @FancyPair_second_] }
  @Container_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container]
  @Container_offset_tbl = linkonce_odr constant [4 x i32] [i32 7, i32 7, i32 0, i32 7]
  @Container = constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 9056556090793359372, i64 4611686018427388081, i64 3], [4 x ptr] [ptr @subtype_test, ptr @Container_hashtbl, ptr @Container_offset_tbl, ptr getelementptr ({}, ptr null, i32 1)], [0 x ptr] undef }
  @Iterator2_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @Iterator2, ptr @Container]
  @Iterator2_offset_tbl = linkonce_odr constant [4 x i32] [i32 10, i32 7, i32 7, i32 10]
  @Iterator2 = constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 4189192806087951739, i64 4611686018427388081, i64 3], [4 x ptr] [ptr @subtype_test, ptr @Iterator2_hashtbl, ptr @Iterator2_offset_tbl, ptr getelementptr ({ ptr }, ptr null, i32 1)], [0 x ptr] undef }
  @Iterable2_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Iterable2, ptr @any_typ, ptr @Container, ptr @Object]
  @Iterable2_offset_tbl = linkonce_odr constant [4 x i32] [i32 7, i32 7, i32 30, i32 30]
  @Iterable2 = constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 5693646204635713916, i64 4611686018427388349, i64 3], [4 x ptr] [ptr @subtype_test, ptr @Iterable2_hashtbl, ptr @Iterable2_offset_tbl, ptr getelementptr ({ ptr }, ptr null, i32 1)], [0 x ptr] undef }
  @Array_hashtbl = linkonce_odr constant [8 x ptr] [ptr @Container, ptr null, ptr @Iterable2, ptr @Object, ptr @any_typ, ptr null, ptr null, ptr @Array]
  @Array_offset_tbl = linkonce_odr constant [8 x i32] [i32 76, i32 0, i32 53, i32 76, i32 7, i32 0, i32 0, i32 7]
  @Array = constant { [3 x i64], [4 x ptr], [69 x ptr] } { [3 x i64] [i64 -5261542750394134544, i64 4611686018427388289, i64 7], [4 x ptr] [ptr @subtype_test, ptr @Array_hashtbl, ptr @Array_offset_tbl, ptr getelementptr ({ { ptr }, i32, i32, ptr }, ptr null, i32 1)], [69 x ptr] [ptr @Array_field_buffer, ptr @Array_field_length, ptr @Array_field_capacity, ptr @Array_field_Array_0, ptr @Array_B__Self_from_iterable_iterableIterable2T, ptr @Array_B_init_, ptr @Array_B_init_capacityPtri32, ptr @Array_B_length_, ptr @Array_B_capacity_, ptr @Array_B_append_xT, ptr @Array_B_grow_, ptr @Array_B__index_xPtri32, ptr @Array_B_throw_oob_xPtri32, ptr @Array_B_unsafe_index_xPtri32, ptr @Array_B_iterator_, ptr @Array_B_each_fFunctionT_to_Nothing, ptr @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Array_B_all_fFunctionT_to_Ptri1, ptr @Array_B_any_fFunctionT_to_Ptri1, ptr @Array_B_map_fFunctionT_to_U, ptr @Array_B_filter_fFunctionT_to_Ptri1, ptr @Array_B_chain_otherIterable2T, ptr @Array_B_interleave_otherIterable2T, ptr @Array_B_zip_otherIterable2U, ptr @Array_B_product_otherIterable2U, ptr @Array__Self_from_iterable_iterableIterable2T, ptr @Array_init_, ptr @Array_init_capacityPtri32, ptr @Array_length_, ptr @Array_capacity_, ptr @Array_append_xT, ptr @Array_grow_, ptr @Array__index_xPtri32, ptr @Array_throw_oob_xPtri32, ptr @Array_unsafe_index_xPtri32, ptr @Array_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @Array_field_Array_0, ptr @Array_B_iterator_, ptr @Array_B_each_fFunctionT_to_Nothing, ptr @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Array_B_all_fFunctionT_to_Ptri1, ptr @Array_B_any_fFunctionT_to_Ptri1, ptr @Array_B_map_fFunctionT_to_U, ptr @Array_B_filter_fFunctionT_to_Ptri1, ptr @Array_B_chain_otherIterable2T, ptr @Array_B_interleave_otherIterable2T, ptr @Array_B_zip_otherIterable2U, ptr @Array_B_product_otherIterable2U, ptr @Array_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
  @ArrayIterator_hashtbl = linkonce_odr constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr @ArrayIterator, ptr null, ptr @Iterator2, ptr null]
  @ArrayIterator_offset_tbl = linkonce_odr constant [8 x i32] [i32 17, i32 7, i32 0, i32 17, i32 7, i32 0, i32 14, i32 0]
  @ArrayIterator = constant { [3 x i64], [4 x ptr], [10 x ptr] } { [3 x i64] [i64 3447345754186651411, i64 4611686018427388081, i64 7], [4 x ptr] [ptr @subtype_test, ptr @ArrayIterator_hashtbl, ptr @ArrayIterator_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, i32, ptr }, ptr null, i32 1)], [10 x ptr] [ptr @ArrayIterator_field_array, ptr @ArrayIterator_field_index, ptr @ArrayIterator_field_ArrayIterator_0, ptr @ArrayIterator_B_init_arrayArrayT, ptr @ArrayIterator_B_next_, ptr @ArrayIterator_init_arrayArrayT, ptr @ArrayIterator_next_, ptr @ArrayIterator_field_ArrayIterator_0, ptr @ArrayIterator_B_next_, ptr @ArrayIterator_next_] }
  @MapIterable2_hashtbl = linkonce_odr constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr @MapIterable2, ptr @Container, ptr null, ptr @Iterable2, ptr null, ptr null]
  @MapIterable2_offset_tbl = linkonce_odr constant [8 x i32] [i32 58, i32 7, i32 7, i32 58, i32 0, i32 35, i32 0, i32 0]
  @MapIterable2 = constant { [3 x i64], [4 x ptr], [51 x ptr] } { [3 x i64] [i64 -1724859134596891929, i64 4611686018427388081, i64 7], [4 x ptr] [ptr @subtype_test, ptr @MapIterable2_hashtbl, ptr @MapIterable2_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr }, ptr, ptr }, ptr null, i32 1)], [51 x ptr] [ptr @MapIterable2_field_iterable, ptr @MapIterable2_field_f, ptr @MapIterable2_field_MapIterable2_0, ptr @MapIterable2_field_MapIterable2_1, ptr @MapIterable2_B_init_iterableIterable2T_fFunctionT_to_U, ptr @MapIterable2_B_iterator_, ptr @MapIterable2_B_each_fFunctionT_to_Nothing, ptr @MapIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @MapIterable2_B_all_fFunctionT_to_Ptri1, ptr @MapIterable2_B_any_fFunctionT_to_Ptri1, ptr @MapIterable2_B_map_fFunctionT_to_U, ptr @MapIterable2_B_filter_fFunctionT_to_Ptri1, ptr @MapIterable2_B_chain_otherIterable2T, ptr @MapIterable2_B_interleave_otherIterable2T, ptr @MapIterable2_B_zip_otherIterable2U, ptr @MapIterable2_B_product_otherIterable2U, ptr @MapIterable2_init_iterableIterable2T_fFunctionT_to_U, ptr @MapIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @MapIterable2_field_MapIterable2_1, ptr @MapIterable2_B_iterator_, ptr @MapIterable2_B_each_fFunctionT_to_Nothing, ptr @MapIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @MapIterable2_B_all_fFunctionT_to_Ptri1, ptr @MapIterable2_B_any_fFunctionT_to_Ptri1, ptr @MapIterable2_B_map_fFunctionT_to_U, ptr @MapIterable2_B_filter_fFunctionT_to_Ptri1, ptr @MapIterable2_B_chain_otherIterable2T, ptr @MapIterable2_B_interleave_otherIterable2T, ptr @MapIterable2_B_zip_otherIterable2U, ptr @MapIterable2_B_product_otherIterable2U, ptr @MapIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
  @MapIterator2_hashtbl = linkonce_odr constant [8 x ptr] [ptr null, ptr @Container, ptr @MapIterator2, ptr null, ptr @Object, ptr @Iterator2, ptr null, ptr @any_typ]
  @MapIterator2_offset_tbl = linkonce_odr constant [8 x i32] [i32 0, i32 18, i32 7, i32 0, i32 18, i32 15, i32 0, i32 7]
  @MapIterator2 = constant { [3 x i64], [4 x ptr], [11 x ptr] } { [3 x i64] [i64 -10255947709272500, i64 4611686018427388279, i64 7], [4 x ptr] [ptr @subtype_test, ptr @MapIterator2_hashtbl, ptr @MapIterator2_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr }, ptr, ptr }, ptr null, i32 1)], [11 x ptr] [ptr @MapIterator2_field_iterator, ptr @MapIterator2_field_f, ptr @MapIterator2_field_MapIterator2_0, ptr @MapIterator2_field_MapIterator2_1, ptr @MapIterator2_B_init_iteratorIterator2T_fFunctionT_to_U, ptr @MapIterator2_B_next_, ptr @MapIterator2_init_iteratorIterator2T_fFunctionT_to_U, ptr @MapIterator2_next_, ptr @MapIterator2_field_MapIterator2_1, ptr @MapIterator2_B_next_, ptr @MapIterator2_next_] }
  @FilterIterable2_hashtbl = linkonce_odr constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr null, ptr @Iterable2, ptr @FilterIterable2, ptr null]
  @FilterIterable2_offset_tbl = linkonce_odr constant [8 x i32] [i32 57, i32 7, i32 0, i32 57, i32 0, i32 34, i32 7, i32 0]
  @FilterIterable2 = constant { [3 x i64], [4 x ptr], [50 x ptr] } { [3 x i64] [i64 1178467452958968374, i64 4611686018427388081, i64 7], [4 x ptr] [ptr @subtype_test, ptr @FilterIterable2_hashtbl, ptr @FilterIterable2_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr }, ptr }, ptr null, i32 1)], [50 x ptr] [ptr @FilterIterable2_field_iterable, ptr @FilterIterable2_field_f, ptr @FilterIterable2_field_FilterIterable2_0, ptr @FilterIterable2_B_init_iterableIterable2T_fFunctionT_to_Ptri1, ptr @FilterIterable2_B_iterator_, ptr @FilterIterable2_B_each_fFunctionT_to_Nothing, ptr @FilterIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @FilterIterable2_B_all_fFunctionT_to_Ptri1, ptr @FilterIterable2_B_any_fFunctionT_to_Ptri1, ptr @FilterIterable2_B_map_fFunctionT_to_U, ptr @FilterIterable2_B_filter_fFunctionT_to_Ptri1, ptr @FilterIterable2_B_chain_otherIterable2T, ptr @FilterIterable2_B_interleave_otherIterable2T, ptr @FilterIterable2_B_zip_otherIterable2U, ptr @FilterIterable2_B_product_otherIterable2U, ptr @FilterIterable2_init_iterableIterable2T_fFunctionT_to_Ptri1, ptr @FilterIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @FilterIterable2_field_FilterIterable2_0, ptr @FilterIterable2_B_iterator_, ptr @FilterIterable2_B_each_fFunctionT_to_Nothing, ptr @FilterIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @FilterIterable2_B_all_fFunctionT_to_Ptri1, ptr @FilterIterable2_B_any_fFunctionT_to_Ptri1, ptr @FilterIterable2_B_map_fFunctionT_to_U, ptr @FilterIterable2_B_filter_fFunctionT_to_Ptri1, ptr @FilterIterable2_B_chain_otherIterable2T, ptr @FilterIterable2_B_interleave_otherIterable2T, ptr @FilterIterable2_B_zip_otherIterable2U, ptr @FilterIterable2_B_product_otherIterable2U, ptr @FilterIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
  @FilterIterator2_hashtbl = linkonce_odr constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr @FilterIterator2, ptr @Container, ptr null, ptr null, ptr @Iterator2, ptr null]
  @FilterIterator2_offset_tbl = linkonce_odr constant [8 x i32] [i32 17, i32 7, i32 7, i32 17, i32 0, i32 0, i32 14, i32 0]
  @FilterIterator2 = constant { [3 x i64], [4 x ptr], [10 x ptr] } { [3 x i64] [i64 8213847504843366470, i64 4611686018427388081, i64 7], [4 x ptr] [ptr @subtype_test, ptr @FilterIterator2_hashtbl, ptr @FilterIterator2_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr }, ptr }, ptr null, i32 1)], [10 x ptr] [ptr @FilterIterator2_field_iterator, ptr @FilterIterator2_field_f, ptr @FilterIterator2_field_FilterIterator2_0, ptr @FilterIterator2_B_init_iteratorIterator2T_fFunctionT_to_Ptri1, ptr @FilterIterator2_B_next_, ptr @FilterIterator2_init_iteratorIterator2T_fFunctionT_to_Ptri1, ptr @FilterIterator2_next_, ptr @FilterIterator2_field_FilterIterator2_0, ptr @FilterIterator2_B_next_, ptr @FilterIterator2_next_] }
  @ChainIterable2_hashtbl = linkonce_odr constant [8 x ptr] [ptr @ChainIterable2, ptr @Object, ptr @any_typ, ptr null, ptr null, ptr @Container, ptr null, ptr @Iterable2]
  @ChainIterable2_offset_tbl = linkonce_odr constant [8 x i32] [i32 7, i32 57, i32 7, i32 0, i32 0, i32 57, i32 0, i32 34]
  @ChainIterable2 = constant { [3 x i64], [4 x ptr], [50 x ptr] } { [3 x i64] [i64 -5233298072945030060, i64 4611686018427388319, i64 7], [4 x ptr] [ptr @subtype_test, ptr @ChainIterable2_hashtbl, ptr @ChainIterable2_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr }, ptr null, i32 1)], [50 x ptr] [ptr @ChainIterable2_field_first, ptr @ChainIterable2_field_second, ptr @ChainIterable2_field_ChainIterable2_0, ptr @ChainIterable2_B_init_firstIterable2T_secondIterable2T, ptr @ChainIterable2_B_iterator_, ptr @ChainIterable2_B_each_fFunctionT_to_Nothing, ptr @ChainIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ChainIterable2_B_all_fFunctionT_to_Ptri1, ptr @ChainIterable2_B_any_fFunctionT_to_Ptri1, ptr @ChainIterable2_B_map_fFunctionT_to_U, ptr @ChainIterable2_B_filter_fFunctionT_to_Ptri1, ptr @ChainIterable2_B_chain_otherIterable2T, ptr @ChainIterable2_B_interleave_otherIterable2T, ptr @ChainIterable2_B_zip_otherIterable2U, ptr @ChainIterable2_B_product_otherIterable2U, ptr @ChainIterable2_init_firstIterable2T_secondIterable2T, ptr @ChainIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @ChainIterable2_field_ChainIterable2_0, ptr @ChainIterable2_B_iterator_, ptr @ChainIterable2_B_each_fFunctionT_to_Nothing, ptr @ChainIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ChainIterable2_B_all_fFunctionT_to_Ptri1, ptr @ChainIterable2_B_any_fFunctionT_to_Ptri1, ptr @ChainIterable2_B_map_fFunctionT_to_U, ptr @ChainIterable2_B_filter_fFunctionT_to_Ptri1, ptr @ChainIterable2_B_chain_otherIterable2T, ptr @ChainIterable2_B_interleave_otherIterable2T, ptr @ChainIterable2_B_zip_otherIterable2U, ptr @ChainIterable2_B_product_otherIterable2U, ptr @ChainIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
  @ChainIterator2_hashtbl = linkonce_odr constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr null, ptr null, ptr @Iterator2, ptr @ChainIterator2]
  @ChainIterator2_offset_tbl = linkonce_odr constant [8 x i32] [i32 18, i32 7, i32 0, i32 18, i32 0, i32 0, i32 15, i32 7]
  @ChainIterator2 = constant { [3 x i64], [4 x ptr], [11 x ptr] } { [3 x i64] [i64 -228267985060461774, i64 4611686018427388081, i64 7], [4 x ptr] [ptr @subtype_test, ptr @ChainIterator2_hashtbl, ptr @ChainIterator2_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, i1, ptr }, ptr null, i32 1)], [11 x ptr] [ptr @ChainIterator2_field_first, ptr @ChainIterator2_field_second, ptr @ChainIterator2_field_on_first, ptr @ChainIterator2_field_ChainIterator2_0, ptr @ChainIterator2_B_init_firstIterator2T_secondIterator2T, ptr @ChainIterator2_B_next_, ptr @ChainIterator2_init_firstIterator2T_secondIterator2T, ptr @ChainIterator2_next_, ptr @ChainIterator2_field_ChainIterator2_0, ptr @ChainIterator2_B_next_, ptr @ChainIterator2_next_] }
  @InterleaveIterable2_hashtbl = linkonce_odr constant [8 x ptr] [ptr @Iterable2, ptr null, ptr null, ptr @InterleaveIterable2, ptr @any_typ, ptr @Object, ptr null, ptr @Container]
  @InterleaveIterable2_offset_tbl = linkonce_odr constant [8 x i32] [i32 34, i32 0, i32 0, i32 7, i32 7, i32 57, i32 0, i32 57]
  @InterleaveIterable2 = constant { [3 x i64], [4 x ptr], [50 x ptr] } { [3 x i64] [i64 -6258231685215461775, i64 4611686018427388207, i64 7], [4 x ptr] [ptr @subtype_test, ptr @InterleaveIterable2_hashtbl, ptr @InterleaveIterable2_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr }, ptr null, i32 1)], [50 x ptr] [ptr @InterleaveIterable2_field_first, ptr @InterleaveIterable2_field_second, ptr @InterleaveIterable2_field_InterleaveIterable2_0, ptr @InterleaveIterable2_B_init_firstIterable2T_secondIterable2T, ptr @InterleaveIterable2_B_iterator_, ptr @InterleaveIterable2_B_each_fFunctionT_to_Nothing, ptr @InterleaveIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @InterleaveIterable2_B_all_fFunctionT_to_Ptri1, ptr @InterleaveIterable2_B_any_fFunctionT_to_Ptri1, ptr @InterleaveIterable2_B_map_fFunctionT_to_U, ptr @InterleaveIterable2_B_filter_fFunctionT_to_Ptri1, ptr @InterleaveIterable2_B_chain_otherIterable2T, ptr @InterleaveIterable2_B_interleave_otherIterable2T, ptr @InterleaveIterable2_B_zip_otherIterable2U, ptr @InterleaveIterable2_B_product_otherIterable2U, ptr @InterleaveIterable2_init_firstIterable2T_secondIterable2T, ptr @InterleaveIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @InterleaveIterable2_field_InterleaveIterable2_0, ptr @InterleaveIterable2_B_iterator_, ptr @InterleaveIterable2_B_each_fFunctionT_to_Nothing, ptr @InterleaveIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @InterleaveIterable2_B_all_fFunctionT_to_Ptri1, ptr @InterleaveIterable2_B_any_fFunctionT_to_Ptri1, ptr @InterleaveIterable2_B_map_fFunctionT_to_U, ptr @InterleaveIterable2_B_filter_fFunctionT_to_Ptri1, ptr @InterleaveIterable2_B_chain_otherIterable2T, ptr @InterleaveIterable2_B_interleave_otherIterable2T, ptr @InterleaveIterable2_B_zip_otherIterable2U, ptr @InterleaveIterable2_B_product_otherIterable2U, ptr @InterleaveIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
  @InterleaveIterator2_hashtbl = linkonce_odr constant [8 x ptr] [ptr @any_typ, ptr null, ptr null, ptr @InterleaveIterator2, ptr @Container, ptr null, ptr @Iterator2, ptr @Object]
  @InterleaveIterator2_offset_tbl = linkonce_odr constant [8 x i32] [i32 7, i32 0, i32 0, i32 7, i32 18, i32 0, i32 15, i32 18]
  @InterleaveIterator2 = constant { [3 x i64], [4 x ptr], [11 x ptr] } { [3 x i64] [i64 6709847746581360093, i64 4611686018427388247, i64 7], [4 x ptr] [ptr @subtype_test, ptr @InterleaveIterator2_hashtbl, ptr @InterleaveIterator2_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, i1, ptr }, ptr null, i32 1)], [11 x ptr] [ptr @InterleaveIterator2_field_first, ptr @InterleaveIterator2_field_second, ptr @InterleaveIterator2_field_on_first, ptr @InterleaveIterator2_field_InterleaveIterator2_0, ptr @InterleaveIterator2_B_init_firstIterator2T_secondIterator2T, ptr @InterleaveIterator2_B_next_, ptr @InterleaveIterator2_init_firstIterator2T_secondIterator2T, ptr @InterleaveIterator2_next_, ptr @InterleaveIterator2_field_InterleaveIterator2_0, ptr @InterleaveIterator2_B_next_, ptr @InterleaveIterator2_next_] }
  @ZipIterable2_hashtbl = linkonce_odr constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr @ZipIterable2, ptr @Container, ptr null, ptr @Iterable2, ptr null, ptr null]
  @ZipIterable2_offset_tbl = linkonce_odr constant [8 x i32] [i32 59, i32 7, i32 7, i32 59, i32 0, i32 36, i32 0, i32 0]
  @ZipIterable2 = constant { [3 x i64], [4 x ptr], [52 x ptr] } { [3 x i64] [i64 -3218950579047519815, i64 4611686018427388081, i64 7], [4 x ptr] [ptr @subtype_test, ptr @ZipIterable2_hashtbl, ptr @ZipIterable2_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr, ptr, ptr }, ptr null, i32 1)], [52 x ptr] [ptr @ZipIterable2_field_first, ptr @ZipIterable2_field_second, ptr @ZipIterable2_field_ZipIterable2_0, ptr @ZipIterable2_field_ZipIterable2_1, ptr @ZipIterable2_field_ZipIterable2_2, ptr @ZipIterable2_B_init_firstIterable2T_secondIterable2U, ptr @ZipIterable2_B_iterator_, ptr @ZipIterable2_B_each_fFunctionT_to_Nothing, ptr @ZipIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ZipIterable2_B_all_fFunctionT_to_Ptri1, ptr @ZipIterable2_B_any_fFunctionT_to_Ptri1, ptr @ZipIterable2_B_map_fFunctionT_to_U, ptr @ZipIterable2_B_filter_fFunctionT_to_Ptri1, ptr @ZipIterable2_B_chain_otherIterable2T, ptr @ZipIterable2_B_interleave_otherIterable2T, ptr @ZipIterable2_B_zip_otherIterable2U, ptr @ZipIterable2_B_product_otherIterable2U, ptr @ZipIterable2_init_firstIterable2T_secondIterable2U, ptr @ZipIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @ZipIterable2_field_ZipIterable2_2, ptr @ZipIterable2_B_iterator_, ptr @ZipIterable2_B_each_fFunctionT_to_Nothing, ptr @ZipIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ZipIterable2_B_all_fFunctionT_to_Ptri1, ptr @ZipIterable2_B_any_fFunctionT_to_Ptri1, ptr @ZipIterable2_B_map_fFunctionT_to_U, ptr @ZipIterable2_B_filter_fFunctionT_to_Ptri1, ptr @ZipIterable2_B_chain_otherIterable2T, ptr @ZipIterable2_B_interleave_otherIterable2T, ptr @ZipIterable2_B_zip_otherIterable2U, ptr @ZipIterable2_B_product_otherIterable2U, ptr @ZipIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
  @ZipIterator2_hashtbl = linkonce_odr constant [8 x ptr] [ptr @any_typ, ptr null, ptr null, ptr @ZipIterator2, ptr @Container, ptr null, ptr @Iterator2, ptr @Object]
  @ZipIterator2_offset_tbl = linkonce_odr constant [8 x i32] [i32 7, i32 0, i32 0, i32 7, i32 19, i32 0, i32 16, i32 19]
  @ZipIterator2 = constant { [3 x i64], [4 x ptr], [12 x ptr] } { [3 x i64] [i64 5502728639611621286, i64 4611686018427388247, i64 7], [4 x ptr] [ptr @subtype_test, ptr @ZipIterator2_hashtbl, ptr @ZipIterator2_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr, ptr, ptr }, ptr null, i32 1)], [12 x ptr] [ptr @ZipIterator2_field_first, ptr @ZipIterator2_field_second, ptr @ZipIterator2_field_ZipIterator2_0, ptr @ZipIterator2_field_ZipIterator2_1, ptr @ZipIterator2_field_ZipIterator2_2, ptr @ZipIterator2_B_init_firstIterator2T_secondIterator2U, ptr @ZipIterator2_B_next_, ptr @ZipIterator2_init_firstIterator2T_secondIterator2U, ptr @ZipIterator2_next_, ptr @ZipIterator2_field_ZipIterator2_2, ptr @ZipIterator2_B_next_, ptr @ZipIterator2_next_] }
  @ProductIterable2_hashtbl = linkonce_odr constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr null, ptr @Iterable2, ptr @ProductIterable2, ptr null]
  @ProductIterable2_offset_tbl = linkonce_odr constant [8 x i32] [i32 59, i32 7, i32 0, i32 59, i32 0, i32 36, i32 7, i32 0]
  @ProductIterable2 = constant { [3 x i64], [4 x ptr], [52 x ptr] } { [3 x i64] [i64 7827074759551300494, i64 4611686018427388081, i64 7], [4 x ptr] [ptr @subtype_test, ptr @ProductIterable2_hashtbl, ptr @ProductIterable2_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr, ptr, ptr }, ptr null, i32 1)], [52 x ptr] [ptr @ProductIterable2_field_first, ptr @ProductIterable2_field_second, ptr @ProductIterable2_field_ProductIterable2_0, ptr @ProductIterable2_field_ProductIterable2_1, ptr @ProductIterable2_field_ProductIterable2_2, ptr @ProductIterable2_B_init_firstIterable2T_secondIterable2U, ptr @ProductIterable2_B_iterator_, ptr @ProductIterable2_B_each_fFunctionT_to_Nothing, ptr @ProductIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ProductIterable2_B_all_fFunctionT_to_Ptri1, ptr @ProductIterable2_B_any_fFunctionT_to_Ptri1, ptr @ProductIterable2_B_map_fFunctionT_to_U, ptr @ProductIterable2_B_filter_fFunctionT_to_Ptri1, ptr @ProductIterable2_B_chain_otherIterable2T, ptr @ProductIterable2_B_interleave_otherIterable2T, ptr @ProductIterable2_B_zip_otherIterable2U, ptr @ProductIterable2_B_product_otherIterable2U, ptr @ProductIterable2_init_firstIterable2T_secondIterable2U, ptr @ProductIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @ProductIterable2_field_ProductIterable2_2, ptr @ProductIterable2_B_iterator_, ptr @ProductIterable2_B_each_fFunctionT_to_Nothing, ptr @ProductIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ProductIterable2_B_all_fFunctionT_to_Ptri1, ptr @ProductIterable2_B_any_fFunctionT_to_Ptri1, ptr @ProductIterable2_B_map_fFunctionT_to_U, ptr @ProductIterable2_B_filter_fFunctionT_to_Ptri1, ptr @ProductIterable2_B_chain_otherIterable2T, ptr @ProductIterable2_B_interleave_otherIterable2T, ptr @ProductIterable2_B_zip_otherIterable2U, ptr @ProductIterable2_B_product_otherIterable2U, ptr @ProductIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
  @ProductIterator2_hashtbl = linkonce_odr constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr null, ptr @ProductIterator2, ptr @Iterator2, ptr null]
  @ProductIterator2_offset_tbl = linkonce_odr constant [8 x i32] [i32 21, i32 7, i32 0, i32 21, i32 0, i32 7, i32 18, i32 0]
  @ProductIterator2 = constant { [3 x i64], [4 x ptr], [14 x ptr] } { [3 x i64] [i64 4440657219728359865, i64 4611686018427388081, i64 7], [4 x ptr] [ptr @subtype_test, ptr @ProductIterator2_hashtbl, ptr @ProductIterator2_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, i160 }, ptr, ptr, ptr }, ptr null, i32 1)], [14 x ptr] [ptr @ProductIterator2_field_first_iterator, ptr @ProductIterator2_field_second_iterator, ptr @ProductIterator2_field_second_iterable, ptr @ProductIterator2_field_current_first, ptr @ProductIterator2_field_ProductIterator2_0, ptr @ProductIterator2_field_ProductIterator2_1, ptr @ProductIterator2_field_ProductIterator2_2, ptr @ProductIterator2_B_init_first_iteratorIterator2T_second_iterableIterable2U, ptr @ProductIterator2_B_next_, ptr @ProductIterator2_init_first_iteratorIterator2T_second_iterableIterable2U, ptr @ProductIterator2_next_, ptr @ProductIterator2_field_ProductIterator2_2, ptr @ProductIterator2_B_next_, ptr @ProductIterator2_next_] }
  @Addable_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Addable]
  @Addable_offset_tbl = linkonce_odr constant [4 x i32] [i32 11, i32 7, i32 0, i32 7]
  @Addable = constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 -6395308389776465871, i64 4611686018427388081, i64 3], [4 x ptr] [ptr @subtype_test, ptr @Addable_hashtbl, ptr @Addable_offset_tbl, ptr getelementptr ({ ptr, ptr }, ptr null, i32 1)], [0 x ptr] undef }
  @Float64_hashtbl = linkonce_odr constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Addable, ptr null, ptr null, ptr null, ptr @Float64]
  @Float64_offset_tbl = linkonce_odr constant [8 x i32] [i32 21, i32 7, i32 0, i32 17, i32 0, i32 0, i32 0, i32 7]
  @Float64 = constant { [3 x i64], [4 x ptr], [18 x ptr] } { [3 x i64] [i64 8748823673944961442, i64 4611686018427388081, i64 7], [4 x ptr] [ptr @subtype_test, ptr @Float64_hashtbl, ptr @Float64_offset_tbl, ptr getelementptr ({ double }, ptr null, i32 1)], [18 x ptr] [ptr @Float64_field_value, ptr @Float64_field_Float64_0, ptr @Float64_field_Float64_1, ptr @Float64_B_init_valuePtrf64, ptr @Float64_B_value_, ptr @Float64_B__ADD_otherFloat64__ADD_otherInt32, ptr @Float64_init_valuePtrf64, ptr @Float64_value_, ptr @Float64__ADD_otherFloat64, ptr @Float64__ADD_otherInt32, ptr @Float64_field_Float64_0, ptr @Float64_field_Float64_1, ptr @Float64_B__ADD_otherFloat64__ADD_otherInt32, ptr @Float64_init_valuePtrf64, ptr @Float64_field_Float64_0, ptr @Float64_field_Float64_1, ptr @Float64_B__ADD_otherFloat64__ADD_otherInt32, ptr @Float64_init_valuePtrf64] }
  @Int32_hashtbl = linkonce_odr constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Addable, ptr null, ptr null, ptr @Int32, ptr null]
  @Int32_offset_tbl = linkonce_odr constant [8 x i32] [i32 20, i32 7, i32 0, i32 16, i32 0, i32 0, i32 7, i32 0]
  @Int32 = constant { [3 x i64], [4 x ptr], [17 x ptr] } { [3 x i64] [i64 -3157560240565274503, i64 4611686018427388081, i64 7], [4 x ptr] [ptr @subtype_test, ptr @Int32_hashtbl, ptr @Int32_offset_tbl, ptr getelementptr ({ i32 }, ptr null, i32 1)], [17 x ptr] [ptr @Int32_field_value, ptr @Int32_field_Int32_0, ptr @Int32_B_init_valuePtri32, ptr @Int32_B_value_, ptr @Int32_B__ADD_otherFloat64__ADD_otherInt32, ptr @Int32_init_valuePtri32, ptr @Int32_value_, ptr @Int32__ADD_otherFloat64, ptr @Int32__ADD_otherInt32, ptr @Int32_field_Int32_0, ptr @Int32_field_Int32_0, ptr @Int32_B__ADD_otherFloat64__ADD_otherInt32, ptr @Int32_init_valuePtri32, ptr @Int32_field_Int32_0, ptr @Int32_field_Int32_0, ptr @Int32_B__ADD_otherFloat64__ADD_otherInt32, ptr @Int32_init_valuePtri32] }
  @Holder_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @Holder, ptr null]
  @Holder_offset_tbl = linkonce_odr constant [4 x i32] [i32 13, i32 7, i32 7, i32 0]
  @Holder = constant { [3 x i64], [4 x ptr], [6 x ptr] } { [3 x i64] [i64 -261997465778736657, i64 4611686018427388081, i64 3], [4 x ptr] [ptr @subtype_test, ptr @Holder_hashtbl, ptr @Holder_offset_tbl, ptr getelementptr ({ { ptr, i160 }, ptr }, ptr null, i32 1)], [6 x ptr] [ptr @Holder_field_held, ptr @Holder_field_Holder_0, ptr @Holder_B_init_heldT, ptr @Holder_B_value_, ptr @Holder_init_heldT, ptr @Holder_value_] }
  @Pair_field_first = internal constant { ptr, ptr } { ptr @Pair_getter_first, ptr @Pair_setter_first }
  @Pair_field_second = internal constant { ptr, ptr } { ptr @Pair_getter_second, ptr @Pair_setter_second }
  @FancyPair_field_first = internal constant { ptr, ptr } { ptr @FancyPair_getter_first, ptr @FancyPair_setter_first }
  @FancyPair_field_second = internal constant { ptr, ptr } { ptr @FancyPair_getter_second, ptr @FancyPair_setter_second }
  @Array_field_buffer = internal constant { ptr, ptr } { ptr @Array_getter_buffer, ptr @Array_setter_buffer }
  @Array_field_length = internal constant { ptr, ptr } { ptr @Array_getter_length, ptr @Array_setter_length }
  @Array_field_capacity = internal constant { ptr, ptr } { ptr @Array_getter_capacity, ptr @Array_setter_capacity }
  @ArrayIterator_field_array = internal constant { ptr, ptr } { ptr @ArrayIterator_getter_array, ptr @ArrayIterator_setter_array }
  @ArrayIterator_field_index = internal constant { ptr, ptr } { ptr @ArrayIterator_getter_index, ptr @ArrayIterator_setter_index }
  @MapIterable2_field_iterable = internal constant { ptr, ptr } { ptr @MapIterable2_getter_iterable, ptr @MapIterable2_setter_iterable }
  @MapIterable2_field_f = internal constant { ptr, ptr } { ptr @MapIterable2_getter_f, ptr @MapIterable2_setter_f }
  @MapIterator2_field_iterator = internal constant { ptr, ptr } { ptr @MapIterator2_getter_iterator, ptr @MapIterator2_setter_iterator }
  @MapIterator2_field_f = internal constant { ptr, ptr } { ptr @MapIterator2_getter_f, ptr @MapIterator2_setter_f }
  @FilterIterable2_field_iterable = internal constant { ptr, ptr } { ptr @FilterIterable2_getter_iterable, ptr @FilterIterable2_setter_iterable }
  @FilterIterable2_field_f = internal constant { ptr, ptr } { ptr @FilterIterable2_getter_f, ptr @FilterIterable2_setter_f }
  @FilterIterator2_field_iterator = internal constant { ptr, ptr } { ptr @FilterIterator2_getter_iterator, ptr @FilterIterator2_setter_iterator }
  @FilterIterator2_field_f = internal constant { ptr, ptr } { ptr @FilterIterator2_getter_f, ptr @FilterIterator2_setter_f }
  @ChainIterable2_field_first = internal constant { ptr, ptr } { ptr @ChainIterable2_getter_first, ptr @ChainIterable2_setter_first }
  @ChainIterable2_field_second = internal constant { ptr, ptr } { ptr @ChainIterable2_getter_second, ptr @ChainIterable2_setter_second }
  @ChainIterator2_field_first = internal constant { ptr, ptr } { ptr @ChainIterator2_getter_first, ptr @ChainIterator2_setter_first }
  @ChainIterator2_field_second = internal constant { ptr, ptr } { ptr @ChainIterator2_getter_second, ptr @ChainIterator2_setter_second }
  @ChainIterator2_field_on_first = internal constant { ptr, ptr } { ptr @ChainIterator2_getter_on_first, ptr @ChainIterator2_setter_on_first }
  @InterleaveIterable2_field_first = internal constant { ptr, ptr } { ptr @InterleaveIterable2_getter_first, ptr @InterleaveIterable2_setter_first }
  @InterleaveIterable2_field_second = internal constant { ptr, ptr } { ptr @InterleaveIterable2_getter_second, ptr @InterleaveIterable2_setter_second }
  @InterleaveIterator2_field_first = internal constant { ptr, ptr } { ptr @InterleaveIterator2_getter_first, ptr @InterleaveIterator2_setter_first }
  @InterleaveIterator2_field_second = internal constant { ptr, ptr } { ptr @InterleaveIterator2_getter_second, ptr @InterleaveIterator2_setter_second }
  @InterleaveIterator2_field_on_first = internal constant { ptr, ptr } { ptr @InterleaveIterator2_getter_on_first, ptr @InterleaveIterator2_setter_on_first }
  @ZipIterable2_field_first = internal constant { ptr, ptr } { ptr @ZipIterable2_getter_first, ptr @ZipIterable2_setter_first }
  @ZipIterable2_field_second = internal constant { ptr, ptr } { ptr @ZipIterable2_getter_second, ptr @ZipIterable2_setter_second }
  @ZipIterator2_field_first = internal constant { ptr, ptr } { ptr @ZipIterator2_getter_first, ptr @ZipIterator2_setter_first }
  @ZipIterator2_field_second = internal constant { ptr, ptr } { ptr @ZipIterator2_getter_second, ptr @ZipIterator2_setter_second }
  @ProductIterable2_field_first = internal constant { ptr, ptr } { ptr @ProductIterable2_getter_first, ptr @ProductIterable2_setter_first }
  @ProductIterable2_field_second = internal constant { ptr, ptr } { ptr @ProductIterable2_getter_second, ptr @ProductIterable2_setter_second }
  @ProductIterator2_field_first_iterator = internal constant { ptr, ptr } { ptr @ProductIterator2_getter_first_iterator, ptr @ProductIterator2_setter_first_iterator }
  @ProductIterator2_field_second_iterator = internal constant { ptr, ptr } { ptr @ProductIterator2_getter_second_iterator, ptr @ProductIterator2_setter_second_iterator }
  @ProductIterator2_field_second_iterable = internal constant { ptr, ptr } { ptr @ProductIterator2_getter_second_iterable, ptr @ProductIterator2_setter_second_iterable }
  @ProductIterator2_field_current_first = internal constant { ptr, ptr } { ptr @ProductIterator2_getter_current_first, ptr @ProductIterator2_setter_current_first }
  @Float64_field_value = internal constant { ptr, ptr } { ptr @Float64_getter_value, ptr @Float64_setter_value }
  @Int32_field_value = internal constant { ptr, ptr } { ptr @Int32_getter_value, ptr @Int32_setter_value }
  @Holder_field_held = internal constant { ptr, ptr } { ptr @Holder_getter_held, ptr @Holder_setter_held }
  @_parameterization_Ptri8 = linkonce_odr constant [1 x ptr] [ptr @i8_typ]
  @Object_hashtbl = linkonce_odr constant [2 x ptr] [ptr @Object, ptr @any_typ]
  @Object_offset_tbl = linkonce_odr constant [2 x i32] [i32 7, i32 7]
  @Iterator_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @Iterator]
  @Iterator_offset_tbl = linkonce_odr constant [4 x i32] [i32 7, i32 0, i32 7, i32 7]
  @Iterable_hashtbl = linkonce_odr constant [4 x ptr] [ptr null, ptr @Iterable, ptr @any_typ, ptr @Object]
  @Iterable_offset_tbl = linkonce_odr constant [4 x i32] [i32 0, i32 7, i32 7, i32 9]
  @Representable_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Representable, ptr null, ptr @any_typ, ptr @Object]
  @Representable_offset_tbl = linkonce_odr constant [4 x i32] [i32 7, i32 0, i32 7, i32 9]
  @String_hashtbl = linkonce_odr constant [8 x ptr] [ptr @any_typ, ptr null, ptr @String, ptr @Representable, ptr @Object, ptr null, ptr null, ptr @Iterable]
  @String_offset_tbl = linkonce_odr constant [8 x i32] [i32 7, i32 0, i32 7, i32 40, i32 40, i32 0, i32 0, i32 38]
  @Character_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @Character]
  @Character_offset_tbl = linkonce_odr constant [4 x i32] [i32 12, i32 0, i32 7, i32 7]
  @StringIterator_hashtbl = linkonce_odr constant [4 x ptr] [ptr @StringIterator, ptr @Object, ptr @any_typ, ptr @Iterator]
  @StringIterator_offset_tbl = linkonce_odr constant [4 x i32] [i32 7, i32 13, i32 7, i32 13]
  @Exception_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @Exception]
  @Exception_offset_tbl = linkonce_odr constant [4 x i32] [i32 20, i32 0, i32 7, i32 7]
  @String_field_bytes = internal constant { ptr, ptr } { ptr @String_getter_bytes, ptr @String_setter_bytes }
  @String_field_length = internal constant { ptr, ptr } { ptr @String_getter_length, ptr @String_setter_length }
  @String_field_capacity = internal constant { ptr, ptr } { ptr @String_getter_capacity, ptr @String_setter_capacity }
  @Character_field_byte = internal constant { ptr, ptr } { ptr @Character_getter_byte, ptr @Character_setter_byte }
  @StringIterator_field_str = internal constant { ptr, ptr } { ptr @StringIterator_getter_str, ptr @StringIterator_setter_str }
  @StringIterator_field_index = internal constant { ptr, ptr } { ptr @StringIterator_getter_index, ptr @StringIterator_setter_index }
  @Exception_field_line_number = internal constant { ptr, ptr } { ptr @Exception_getter_line_number, ptr @Exception_setter_line_number }
  @Exception_field_file_name = internal constant { ptr, ptr } { ptr @Exception_getter_file_name, ptr @Exception_setter_file_name }
  @Exception_field_message = internal constant { ptr, ptr } { ptr @Exception_getter_message, ptr @Exception_setter_message }
  @_parameterization_Ptri32 = linkonce_odr constant [1 x ptr] [ptr @i32_typ]
  @i32_string = linkonce_odr constant [4 x i8] c"%d\0A\00"
  @i64_string = linkonce_odr constant [6 x i8] c"%lld\0A\00"
  @bool_typ_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @bool_typ]
  @bool_typ_offset_tbl = linkonce_odr constant [4 x i32] [i32 7, i32 7, i32 0, i32 7]
  @bool_typ = linkonce_odr constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 5801531371504802705, i64 4611686018427388081, i64 3], [4 x ptr] [ptr @subtype_test, ptr @bool_typ_hashtbl, ptr @bool_typ_offset_tbl, ptr getelementptr (i1, ptr null, i32 1)], [0 x ptr] undef }
  @i8_typ_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @i8_typ]
  @i8_typ_offset_tbl = linkonce_odr constant [4 x i32] [i32 7, i32 7, i32 0, i32 7]
  @i8_typ = linkonce_odr constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 2582149688529881115, i64 4611686018427388081, i64 3], [4 x ptr] [ptr @subtype_test, ptr @i8_typ_hashtbl, ptr @i8_typ_offset_tbl, ptr getelementptr (i8, ptr null, i32 1)], [0 x ptr] undef }
  @i32_typ_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @i32_typ, ptr null]
  @i32_typ_offset_tbl = linkonce_odr constant [4 x i32] [i32 7, i32 7, i32 7, i32 0]
  @i32_typ = linkonce_odr constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 -2253724949814257982, i64 4611686018427388081, i64 3], [4 x ptr] [ptr @subtype_test, ptr @i32_typ_hashtbl, ptr @i32_typ_offset_tbl, ptr getelementptr (i32, ptr null, i32 1)], [0 x ptr] undef }
  @i64_typ_hashtbl = linkonce_odr constant [4 x ptr] [ptr @any_typ, ptr @Object, ptr @i64_typ, ptr null]
  @i64_typ_offset_tbl = linkonce_odr constant [4 x i32] [i32 7, i32 7, i32 7, i32 0]
  @i64_typ = linkonce_odr constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 -7469797244461771922, i64 4611686018427388157, i64 3], [4 x ptr] [ptr @subtype_test, ptr @i64_typ_hashtbl, ptr @i64_typ_offset_tbl, ptr getelementptr (i64, ptr null, i32 1)], [0 x ptr] undef }
  @f64_typ_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @f64_typ]
  @f64_typ_offset_tbl = linkonce_odr constant [4 x i32] [i32 7, i32 7, i32 0, i32 7]
  @f64_typ = linkonce_odr constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 -757315540097298781, i64 4611686018427388081, i64 3], [4 x ptr] [ptr @subtype_test, ptr @f64_typ_hashtbl, ptr @f64_typ_offset_tbl, ptr getelementptr (double, ptr null, i32 1)], [0 x ptr] undef }
  @nil_typ_hashtbl = linkonce_odr constant [2 x ptr] [ptr @nil_typ, ptr @any_typ]
  @nil_typ_offset_tbl = linkonce_odr constant [2 x i32] [i32 7, i32 7]
  @nil_typ = linkonce_odr constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 -5126806859456325683, i64 4611686018427388081, i64 1], [4 x ptr] [ptr @subtype_test, ptr @nil_typ_hashtbl, ptr @nil_typ_offset_tbl, ptr getelementptr ([0 x i8], ptr null, i32 1)], [0 x ptr] undef }
  @any_typ_hashtbl = linkonce_odr constant [1 x ptr] [ptr @any_typ]
  @any_typ_offset_tbl = linkonce_odr constant [1 x i32] [i32 7]
  @any_typ = linkonce_odr constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 3084208142191802847, i64 4611686018427388073, i64 0], [4 x ptr] [ptr @subtype_test, ptr @any_typ_hashtbl, ptr @any_typ_offset_tbl, ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1)], [0 x ptr] undef }
  @function_typ_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @function_typ, ptr null]
  @function_typ_offset_tbl = linkonce_odr constant [4 x i32] [i32 7, i32 7, i32 7, i32 0]
  @function_typ = linkonce_odr constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 7927147055246173914, i64 4611686018427388081, i64 3], [4 x ptr] [ptr @subtype_test, ptr @function_typ_hashtbl, ptr @function_typ_offset_tbl, ptr getelementptr ({ ptr }, ptr null, i32 1)], [0 x ptr] undef }
  @tuple_typ_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @tuple_typ]
  @tuple_typ_offset_tbl = linkonce_odr constant [4 x i32] [i32 7, i32 7, i32 0, i32 7]
  @tuple_typ = linkonce_odr constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 3422634369532007740, i64 4611686018427388081, i64 3], [4 x ptr] [ptr @subtype_test, ptr @tuple_typ_hashtbl, ptr @tuple_typ_offset_tbl, ptr getelementptr ({}, ptr null, i32 1)], [0 x ptr] undef }
  @union_typ_hashtbl = linkonce_odr constant [4 x ptr] [ptr @union_typ, ptr null, ptr @any_typ, ptr @Object]
  @union_typ_offset_tbl = linkonce_odr constant [4 x i32] [i32 7, i32 0, i32 7, i32 7]
  @union_typ = linkonce_odr constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 -7543233778997666740, i64 4611686018427388093, i64 3], [4 x ptr] [ptr @subtype_test, ptr @union_typ_hashtbl, ptr @union_typ_offset_tbl, ptr getelementptr ({ ptr, i8 }, ptr null, i32 1)], [0 x ptr] undef }
  @Object = constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 3282773614056351330, i64 4611686018427388081, i64 1], [4 x ptr] [ptr @subtype_test, ptr @Object_hashtbl, ptr @Object_offset_tbl, ptr getelementptr ({}, ptr null, i32 1)], [0 x ptr] undef }
  @Iterator = constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 8673632051301757104, i64 4611686018427388091, i64 3], [4 x ptr] [ptr @subtype_test, ptr @Iterator_hashtbl, ptr @Iterator_offset_tbl, ptr getelementptr ({}, ptr null, i32 1)], [0 x ptr] undef }
  @Iterable = constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 3037712219555723519, i64 4611686018427388093, i64 3], [4 x ptr] [ptr @subtype_test, ptr @Iterable_hashtbl, ptr @Iterable_offset_tbl, ptr getelementptr ({}, ptr null, i32 1)], [0 x ptr] undef }
  @Representable = constant { [3 x i64], [4 x ptr], [2 x ptr] } { [3 x i64] [i64 -7260840641129990118, i64 4611686018427388093, i64 3], [4 x ptr] [ptr @subtype_test, ptr @Representable_hashtbl, ptr @Representable_offset_tbl, ptr getelementptr ({}, ptr null, i32 1)], [2 x ptr] [ptr @Representable_B_repr_, ptr @Representable_repr_] }
  @String = constant { [3 x i64], [4 x ptr], [35 x ptr] } { [3 x i64] [i64 6499063144389013426, i64 4611686018427388073, i64 7], [4 x ptr] [ptr @subtype_test, ptr @String_hashtbl, ptr @String_offset_tbl, ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1)], [35 x ptr] [ptr @String_field_bytes, ptr @String_field_length, ptr @String_field_capacity, ptr @String_B_init_, ptr @String_B_init_bytesBufferPtri8_lengthPtri32_capacityPtri32, ptr @String_B_length_, ptr @String_B_capacity_, ptr @String_B_bytes_, ptr @String_B_append_xPtri8, ptr @String_B_extend_strString, ptr @String_B__index_xPtri32, ptr @String_B__EQ_otherString, ptr @String_B_pop_, ptr @String_B_copy_, ptr @String_B_c_string_, ptr @String_B_iterator_, ptr @String_B_repr_, ptr @String_init_, ptr @String_init_bytesBufferPtri8_lengthPtri32_capacityPtri32, ptr @String_length_, ptr @String_capacity_, ptr @String_bytes_, ptr @String_append_xPtri8, ptr @String_extend_strString, ptr @String__index_xPtri32, ptr @String__EQ_otherString, ptr @String_pop_, ptr @String_copy_, ptr @String_c_string_, ptr @String_iterator_, ptr @String_repr_, ptr @String_B_iterator_, ptr @String_iterator_, ptr @String_B_repr_, ptr @String_repr_] }
  @Character = constant { [3 x i64], [4 x ptr], [5 x ptr] } { [3 x i64] [i64 6681222582356018452, i64 4611686018427388091, i64 3], [4 x ptr] [ptr @subtype_test, ptr @Character_hashtbl, ptr @Character_offset_tbl, ptr getelementptr ({ i8 }, ptr null, i32 1)], [5 x ptr] [ptr @Character_field_byte, ptr @Character_B_byte_, ptr @Character_B_init_bytePtri8, ptr @Character_byte_, ptr @Character_init_bytePtri8] }
  @StringIterator = constant { [3 x i64], [4 x ptr], [6 x ptr] } { [3 x i64] [i64 -7260570988945952630, i64 4611686018427388097, i64 3], [4 x ptr] [ptr @subtype_test, ptr @StringIterator_hashtbl, ptr @StringIterator_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, i32 }, ptr null, i32 1)], [6 x ptr] [ptr @StringIterator_field_str, ptr @StringIterator_field_index, ptr @StringIterator_B_init_strString, ptr @StringIterator_B_next_, ptr @StringIterator_init_strString, ptr @StringIterator_next_] }
  @Exception = constant { [3 x i64], [4 x ptr], [13 x ptr] } { [3 x i64] [i64 9027164862567808692, i64 4611686018427388091, i64 3], [4 x ptr] [ptr @subtype_test, ptr @Exception_hashtbl, ptr @Exception_offset_tbl, ptr getelementptr ({ i32, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr null, i32 1)], [13 x ptr] [ptr @Exception_field_line_number, ptr @Exception_field_file_name, ptr @Exception_field_message, ptr @Exception_B_init_messageString, ptr @Exception_B_init_, ptr @Exception_B_set_info_line_numberPtri32_file_nameString, ptr @Exception_B_report_, ptr @Exception_B_print_message_, ptr @Exception_init_messageString, ptr @Exception_init_, ptr @Exception_set_info_line_numberPtri32_file_nameString, ptr @Exception_report_, ptr @Exception_print_message_] }
  @IO_hashtbl = linkonce_odr constant [4 x ptr] [ptr @any_typ, ptr @IO, ptr null, ptr @Object]
  @IO_offset_tbl = linkonce_odr constant [4 x i32] [i32 7, i32 7, i32 0, i32 17]
  @IO = constant { [3 x i64], [4 x ptr], [10 x ptr] } { [3 x i64] [i64 5359822646784595218, i64 4611686018427388247, i64 3], [4 x ptr] [ptr @subtype_test, ptr @IO_hashtbl, ptr @IO_offset_tbl, ptr getelementptr ({}, ptr null, i32 1)], [10 x ptr] [ptr @IO_B__Self_print_xPtri8__Self_print_xPtri1__Self_print_xNil__Self_print_xCharacter__Self_print_xPtri64__Self_print_xPtri32__Self_print_xRepresentable__Self_print_xString__Self_print_xPtrf64, ptr @IO__Self_print_xPtri8, ptr @IO__Self_print_xPtri1, ptr @IO__Self_print_xNil, ptr @IO__Self_print_xCharacter, ptr @IO__Self_print_xPtri64, ptr @IO__Self_print_xPtri32, ptr @IO__Self_print_xRepresentable, ptr @IO__Self_print_xString, ptr @IO__Self_print_xPtrf64] }
  @string_string.17 = internal constant [4 x i8] c"%s\0A\00"
  @float_string = linkonce_odr constant [4 x i8] c"%f\0A\00"
  @exception_message = internal constant [45 x i8] c"Error: uncaught exception. Program aborted.\0A\00"
  @into_caller_buf = internal thread_local global [3 x ptr] zeroinitializer
  @current_coroutine = internal thread_local unnamed_addr global ptr null
  @always_one = linkonce thread_local local_unnamed_addr global i1 true
  @current_ptr = internal thread_local global ptr null
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define ptr @Pair_field_Pair_0(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 16
    %3 = load ptr, ptr %2, align 8
    ret ptr %3
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define ptr @Pair_field_Pair_1(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 24
    %3 = load ptr, ptr %2, align 8
    ret ptr %3
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Pair_B_init_firstT_secondU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 112
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Pair_B_first_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 120
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Pair_B_second_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 128
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  define void @Pair_init_firstT_secondU({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, i160 } %3, { ptr, i160 } %4) {
    %const = bitcast i64 3084208142191802847 to i64
    %.fca.0.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract5, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract5, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract5, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, 9197944775169318296
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %.fca.0.extract1 = extractvalue { ptr, i160 } %3, 0
    %.fca.1.extract2 = extractvalue { ptr, i160 } %3, 1
    %hash_coef_ptr.i.i8 = getelementptr i8, ptr %.fca.0.extract1, i64 8
    %tbl_size_ptr.i.i9 = getelementptr i8, ptr %.fca.0.extract1, i64 16
    %offset_tbl_ptr.i.i10 = getelementptr i8, ptr %.fca.0.extract1, i64 40
    %hash_coef.i.i11 = load i64, ptr %hash_coef_ptr.i.i8, align 4
    %tbl_size.i.i12 = load i64, ptr %tbl_size_ptr.i.i9, align 4
    %offset_tbl.i.i13 = load ptr, ptr %offset_tbl_ptr.i.i10, align 8
    %product.i.i.i14 = mul i64 %hash_coef.i.i11, %const
    %shifted.i.i.i15 = lshr i64 %product.i.i.i14, 32
    %xored.i.i.i16 = xor i64 %shifted.i.i.i15, %product.i.i.i14
    %hash.i.i.i17 = and i64 %xored.i.i.i16, %tbl_size.i.i12
    %offset_ptr.i.i18 = getelementptr i32, ptr %offset_tbl.i.i13, i64 %hash.i.i.i17
    %offset.i.i19 = load i32, ptr %offset_ptr.i.i18, align 4
    %.sroa.582.8.insert.ext = zext i32 %offset.i.i19 to i160
    %.sroa.582.8.insert.shift = shl nuw i160 %.sroa.582.8.insert.ext, 128
    %6 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr %.fca.0.extract5)
    %7 = sext i32 %offset.i.i to i64
    %8 = getelementptr ptr, ptr %.fca.0.extract5, i64 %7
    %9 = load ptr, ptr %8, align 8
    %10 = getelementptr i8, ptr %9, i64 8
    %11 = load ptr, ptr %10, align 8
    %12 = insertvalue { ptr, i160 } undef, ptr %.fca.0.extract1, 0
    %.sroa.3.8.insert.ext72 = and i160 %.fca.1.extract2, 340282366920938463463374607431768211455
    %.sroa.3.8.insert.insert74 = or disjoint i160 %.sroa.582.8.insert.shift, %.sroa.3.8.insert.ext72
    %13 = insertvalue { ptr, i160 } %12, i160 %.sroa.3.8.insert.insert74, 1
    tail call void %11(ptr %.fca.1.extract6, { ptr, i160 } %13)
    %.fca.0.extract = extractvalue { ptr, i160 } %4, 0
    %.fca.1.extract = extractvalue { ptr, i160 } %4, 1
    %hash_coef_ptr.i.i36 = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i37 = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i38 = getelementptr i8, ptr %.fca.0.extract, i64 40
    %hash_coef.i.i39 = load i64, ptr %hash_coef_ptr.i.i36, align 4
    %tbl_size.i.i40 = load i64, ptr %tbl_size_ptr.i.i37, align 4
    %offset_tbl.i.i41 = load ptr, ptr %offset_tbl_ptr.i.i38, align 8
    %product.i.i.i42 = mul i64 %hash_coef.i.i39, %const
    %shifted.i.i.i43 = lshr i64 %product.i.i.i42, 32
    %xored.i.i.i44 = xor i64 %shifted.i.i.i43, %product.i.i.i42
    %hash.i.i.i45 = and i64 %xored.i.i.i44, %tbl_size.i.i40
    %offset_ptr.i.i46 = getelementptr i32, ptr %offset_tbl.i.i41, i64 %hash.i.i.i45
    %offset.i.i47 = load i32, ptr %offset_ptr.i.i46, align 4
    %.sroa.568.8.insert.ext = zext i32 %offset.i.i47 to i160
    %.sroa.568.8.insert.shift = shl nuw i160 %.sroa.568.8.insert.ext, 128
    %14 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr %.fca.0.extract5)
    %15 = getelementptr i8, ptr %8, i64 8
    %16 = load ptr, ptr %15, align 8
    %17 = getelementptr i8, ptr %16, i64 8
    %18 = load ptr, ptr %17, align 8
    %19 = insertvalue { ptr, i160 } undef, ptr %.fca.0.extract, 0
    %.sroa.3.8.insert.ext = and i160 %.fca.1.extract, 340282366920938463463374607431768211455
    %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.568.8.insert.shift, %.sroa.3.8.insert.ext
    %20 = insertvalue { ptr, i160 } %19, i160 %.sroa.3.8.insert.insert, 1
    tail call void %18(ptr %.fca.1.extract6, { ptr, i160 } %20)
    ret void
  }
  
  define { ptr, i160 } @Pair_first_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
    %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, 9197944775169318296
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %4 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr %.fca.0.extract1)
    %5 = sext i32 %offset.i.i to i64
    %6 = getelementptr ptr, ptr %.fca.0.extract1, i64 %5
    %7 = load ptr, ptr %6, align 8
    %8 = load ptr, ptr %7, align 8
    %9 = tail call { ptr, i160 } %8(ptr %.fca.1.extract3)
    ret { ptr, i160 } %9
  }
  
  define { ptr, i160 } @Pair_second_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
    %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, 9197944775169318296
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %4 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr %.fca.0.extract1)
    %5 = sext i32 %offset.i.i to i64
    %6 = getelementptr ptr, ptr %.fca.0.extract1, i64 %5
    %7 = getelementptr i8, ptr %6, i64 8
    %8 = load ptr, ptr %7, align 8
    %9 = load ptr, ptr %8, align 8
    %10 = tail call { ptr, i160 } %9(ptr %.fca.1.extract3)
    ret { ptr, i160 } %10
  }
  
  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
  declare ptr @llvm.invariant.start.p0(i64 immarg, ptr nocapture) #2
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define { ptr, i160 } @Pair_getter_second(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 32
    %3 = load ptr, ptr %2, align 8
    %4 = insertvalue { ptr, i160 } undef, ptr %3, 0
    %5 = getelementptr i8, ptr %0, i64 40
    %6 = load i160, ptr %5, align 4
    %7 = insertvalue { ptr, i160 } %4, i160 %6, 1
    ret { ptr, i160 } %7
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
  define void @Pair_setter_second(ptr nocapture writeonly %0, { ptr, i160 } %1) #3 {
    %3 = getelementptr i8, ptr %0, i64 32
    %.fca.0.extract = extractvalue { ptr, i160 } %1, 0
    %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
    store ptr %.fca.0.extract, ptr %3, align 8
    %4 = getelementptr i8, ptr %0, i64 40
    store i160 %.fca.1.extract, ptr %4, align 4
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define { ptr, i160 } @Pair_getter_first(ptr nocapture readonly %0) #0 {
    %2 = load ptr, ptr %0, align 8
    %3 = insertvalue { ptr, i160 } undef, ptr %2, 0
    %4 = getelementptr i8, ptr %0, i64 8
    %5 = load i160, ptr %4, align 4
    %6 = insertvalue { ptr, i160 } %3, i160 %5, 1
    ret { ptr, i160 } %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
  define void @Pair_setter_first(ptr nocapture writeonly %0, { ptr, i160 } %1) #3 {
    %.fca.0.extract = extractvalue { ptr, i160 } %1, 0
    %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
    store ptr %.fca.0.extract, ptr %0, align 8
    %3 = getelementptr i8, ptr %0, i64 8
    store i160 %.fca.1.extract, ptr %3, align 4
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
  define noundef nonnull ptr @FancyPair_field_FancyPair_0(ptr nocapture readnone %0) #4 {
    ret ptr @_parameterization_Tuple_Ptrf64._Ptrf64._Ptrf64._Ptrf64_
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
  define noundef nonnull ptr @FancyPair_field_FancyPair_1(ptr nocapture readnone %0) #4 {
    ret ptr @_parameterization_Ptrf64
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @FancyPair_B_init_firstTuple_Ptrf64._Ptrf64._Ptrf64._Ptrf64__secondPtrf64({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 112
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @FancyPair_B_first_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 120
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @FancyPair_B_second_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 128
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  define void @FancyPair_init_firstTuple_Ptrf64._Ptrf64._Ptrf64._Ptrf64__secondPtrf64({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, i160 } %3, { ptr, i160 } %4) {
    %.fca.0.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract11, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract11, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract11, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, -3765382636606614851
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %.fca.1.extract5 = extractvalue { ptr, i160 } %3, 1
    %.sroa.17.8.extract.trunc = trunc i160 %.fca.1.extract5 to i64
    %6 = inttoptr i64 %.sroa.17.8.extract.trunc to ptr
    %7 = load double, ptr %6, align 8
    %8 = getelementptr i8, ptr %6, i64 8
    %9 = load double, ptr %8, align 8
    %10 = getelementptr i8, ptr %6, i64 16
    %11 = load double, ptr %10, align 8
    %12 = getelementptr i8, ptr %6, i64 24
    %13 = load double, ptr %12, align 8
    %result.i = tail call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #26
    store double %7, ptr %result.i, align 8
    %14 = getelementptr i8, ptr %result.i, i64 8
    store double %9, ptr %14, align 8
    %15 = getelementptr i8, ptr %result.i, i64 16
    store double %11, ptr %15, align 8
    %16 = getelementptr i8, ptr %result.i, i64 24
    store double %13, ptr %16, align 8
    %17 = tail call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %result.i)
    %18 = tail call ptr @llvm.invariant.start.p0(i64 160, ptr %.fca.0.extract11)
    %19 = sext i32 %offset.i.i to i64
    %20 = getelementptr ptr, ptr %.fca.0.extract11, i64 %19
    %21 = load ptr, ptr %20, align 8
    %22 = getelementptr i8, ptr %21, i64 8
    %23 = load ptr, ptr %22, align 8
    %24 = ptrtoint ptr %result.i to i64
    %.sroa.343.8.insert.ext = zext i64 %24 to i160
    %.sroa.343.8.insert.insert = or disjoint i160 %.sroa.343.8.insert.ext, 2381976568446569244243622252022377480192
    %25 = insertvalue { ptr, i160 } { ptr @tuple_typ, i160 undef }, i160 %.sroa.343.8.insert.insert, 1
    tail call void %23(ptr %.fca.1.extract12, { ptr, i160 } %25)
    %.fca.1.extract = extractvalue { ptr, i160 } %4, 1
    %26 = tail call ptr @llvm.invariant.start.p0(i64 160, ptr %.fca.0.extract11)
    %27 = getelementptr i8, ptr %20, i64 8
    %28 = load ptr, ptr %27, align 8
    %29 = getelementptr i8, ptr %28, i64 8
    %30 = load ptr, ptr %29, align 8
    %.sroa.3.8.insert.ext = and i160 %.fca.1.extract, 18446744073709551615
    %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.3.8.insert.ext, 2381976568446569244243622252022377480192
    %31 = insertvalue { ptr, i160 } { ptr @f64_typ, i160 undef }, i160 %.sroa.3.8.insert.insert, 1
    tail call void %30(ptr %.fca.1.extract12, { ptr, i160 } %31)
    ret void
  }
  
  define { ptr, i160 } @FancyPair_second_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
    %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, -3765382636606614851
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %4 = tail call ptr @llvm.invariant.start.p0(i64 160, ptr %.fca.0.extract1)
    %5 = sext i32 %offset.i.i to i64
    %6 = getelementptr ptr, ptr %.fca.0.extract1, i64 %5
    %7 = getelementptr i8, ptr %6, i64 8
    %8 = load ptr, ptr %7, align 8
    %9 = load ptr, ptr %8, align 8
    %10 = tail call { ptr, i160 } %9(ptr %.fca.1.extract3)
    %.fca.1.extract = extractvalue { ptr, i160 } %10, 1
    %.sroa.3.8.insert.ext = and i160 %.fca.1.extract, 18446744073709551615
    %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.3.8.insert.ext, 2381976568446569244243622252022377480192
    %11 = insertvalue { ptr, i160 } { ptr @f64_typ, i160 undef }, i160 %.sroa.3.8.insert.insert, 1
    ret { ptr, i160 } %11
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define { ptr, i160 } @FancyPair_getter_second(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 32
    %3 = load i64, ptr %2, align 8
    %.sroa.3.8.insert.ext = zext i64 %3 to i160
    %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.3.8.insert.ext, 2381976568446569244243622252022377480192
    %4 = insertvalue { ptr, i160 } { ptr @f64_typ, i160 undef }, i160 %.sroa.3.8.insert.insert, 1
    ret { ptr, i160 } %4
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
  define void @FancyPair_setter_second(ptr nocapture writeonly %0, { ptr, i160 } %1) #3 {
    %3 = getelementptr i8, ptr %0, i64 32
    %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
    %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i64
    store i64 %.sroa.1.8.extract.trunc, ptr %3, align 8
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(readwrite, argmem: read, inaccessiblemem: none)
  define { ptr, i160 } @FancyPair_getter_first(ptr nocapture readonly %0) #5 {
    %result.i = tail call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #26
    %2 = load double, ptr %0, align 8
    store double %2, ptr %result.i, align 8
    %3 = getelementptr i8, ptr %0, i64 8
    %4 = getelementptr i8, ptr %result.i, i64 8
    %5 = load double, ptr %3, align 8
    store double %5, ptr %4, align 8
    %6 = getelementptr i8, ptr %0, i64 16
    %7 = getelementptr i8, ptr %result.i, i64 16
    %8 = load double, ptr %6, align 8
    store double %8, ptr %7, align 8
    %9 = getelementptr i8, ptr %0, i64 24
    %10 = getelementptr i8, ptr %result.i, i64 24
    %11 = load double, ptr %9, align 8
    store double %11, ptr %10, align 8
    %12 = tail call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %result.i)
    %13 = ptrtoint ptr %result.i to i64
    %.sroa.3.8.insert.ext = zext i64 %13 to i160
    %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.3.8.insert.ext, 2381976568446569244243622252022377480192
    %14 = insertvalue { ptr, i160 } { ptr @tuple_typ, i160 undef }, i160 %.sroa.3.8.insert.insert, 1
    ret { ptr, i160 } %14
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define void @FancyPair_setter_first(ptr nocapture writeonly %0, { ptr, i160 } %1) #1 {
    %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
    %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i64
    %3 = inttoptr i64 %.sroa.1.8.extract.trunc to ptr
    %4 = load double, ptr %3, align 8
    %5 = getelementptr i8, ptr %3, i64 8
    %6 = load double, ptr %5, align 8
    %7 = getelementptr i8, ptr %3, i64 16
    %8 = load double, ptr %7, align 8
    %9 = getelementptr i8, ptr %3, i64 24
    %10 = load double, ptr %9, align 8
    store double %4, ptr %0, align 8
    %11 = getelementptr i8, ptr %0, i64 8
    store double %6, ptr %11, align 8
    %12 = getelementptr i8, ptr %0, i64 16
    store double %8, ptr %12, align 8
    %13 = getelementptr i8, ptr %0, i64 24
    store double %10, ptr %13, align 8
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define ptr @Array_field_Array_0(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 24
    %3 = load ptr, ptr %2, align 8
    ret ptr %3
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: readwrite)
  define noundef nonnull ptr @Array_B__Self_from_iterable_iterableIterable2T(ptr nocapture %0) #6 {
    %2 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
    ret ptr @Array__Self_from_iterable_iterableIterable2T
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Array_B_init_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 264
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Array_B_init_capacityPtri32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 272
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Array_B_length_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 280
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Array_B_capacity_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 288
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Array_B_append_xT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 296
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Array_B_grow_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 304
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Array_B__index_xPtri32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 312
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Array_B_throw_oob_xPtri32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 320
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Array_B_unsafe_index_xPtri32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 328
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Array_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 336
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Array_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 344
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Array_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 352
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Array_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 360
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Array_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 368
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Array_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 376
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Array_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 384
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Array_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 392
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Array_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 400
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Array_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 408
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Array_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 416
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  define { ptr, ptr, ptr, i32 } @Array__Self_from_iterable_iterableIterable2T(ptr nocapture readnone %0, { ptr, ptr, ptr, i32 } %1) {
    %3 = alloca [0 x ptr], align 8
    %.fca.0.extract10 = extractvalue { ptr, ptr, ptr, i32 } %1, 0
    %.fca.1.extract12 = extractvalue { ptr, ptr, ptr, i32 } %1, 1
    %.fca.2.extract14 = extractvalue { ptr, ptr, ptr, i32 } %1, 2
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract10, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract10, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract10, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, 5693646204635713916
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %result.i = tail call noalias dereferenceable_or_null(8) ptr @bump_malloc_inner(i64 noundef 8, ptr nonnull @current_ptr) #26
    store ptr @any_typ, ptr %result.i, align 8
    %result.i25 = tail call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #26
    %4 = getelementptr i8, ptr %result.i25, i64 16
    store ptr %result.i, ptr %4, align 8
    %5 = tail call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %4)
    %result.i183 = tail call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #26
    store ptr %result.i183, ptr %result.i25, align 8
    %6 = getelementptr i8, ptr %result.i25, i64 8
    store i32 0, ptr %6, align 4
    %7 = tail call ptr @llvm.invariant.start.p0(i64 552, ptr nonnull @Array)
    %8 = getelementptr i8, ptr %result.i25, i64 12
    store i32 1, ptr %8, align 4
    %9 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract10, 0
    %10 = insertvalue { ptr, ptr, ptr, i32 } %9, ptr %.fca.1.extract12, 1
    %11 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %.fca.2.extract14, 2
    %12 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %offset.i.i, 3
    %13 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
    %14 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract10)
    %15 = sext i32 %offset.i.i to i64
    %16 = getelementptr ptr, ptr %.fca.0.extract10, i64 %15
    %17 = getelementptr i8, ptr %16, i64 8
    %18 = load ptr, ptr %17, align 8
    %19 = call ptr %18({ ptr, ptr, ptr, i32 } %12, ptr nonnull %3)
    %20 = call { ptr, ptr, ptr, i32 } %19({ ptr, ptr, ptr, i32 } %12, { ptr, ptr, ptr, i32 } %12, ptr nonnull %3)
    %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
    %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
    %.fca.2.extract6 = extractvalue { ptr, ptr, ptr, i32 } %20, 2
    %hash_coef_ptr.i.i41 = getelementptr i8, ptr %.fca.0.extract2, i64 8
    %tbl_size_ptr.i.i42 = getelementptr i8, ptr %.fca.0.extract2, i64 16
    %offset_tbl_ptr.i.i43 = getelementptr i8, ptr %.fca.0.extract2, i64 40
    %hash_coef.i.i44 = load i64, ptr %hash_coef_ptr.i.i41, align 4
    %tbl_size.i.i45 = load i64, ptr %tbl_size_ptr.i.i42, align 4
    %offset_tbl.i.i46 = load ptr, ptr %offset_tbl_ptr.i.i43, align 8
    %product.i.i.i47 = mul i64 %hash_coef.i.i44, 4189192806087951739
    %shifted.i.i.i48 = lshr i64 %product.i.i.i47, 32
    %xored.i.i.i49 = xor i64 %shifted.i.i.i48, %product.i.i.i47
    %hash.i.i.i50 = and i64 %xored.i.i.i49, %tbl_size.i.i45
    %offset_ptr.i.i51 = getelementptr i32, ptr %offset_tbl.i.i46, i64 %hash.i.i.i50
    %offset.i.i66 = load i32, ptr %offset_ptr.i.i51, align 4
    %21 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract2, 0
    %22 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %.fca.1.extract4, 1
    %23 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %.fca.2.extract6, 2
    %24 = insertvalue { ptr, ptr, ptr, i32 } %23, i32 %offset.i.i66, 3
    %25 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
    %26 = call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %.fca.0.extract2)
    %27 = sext i32 %offset.i.i66 to i64
    %28 = getelementptr ptr, ptr %.fca.0.extract2, i64 %27
    %29 = getelementptr i8, ptr %28, i64 8
    %30 = load ptr, ptr %29, align 8
    %31 = call ptr %30({ ptr, ptr, ptr, i32 } %24, ptr nonnull %3)
    %32 = call { ptr, i160 } %31({ ptr, ptr, ptr, i32 } %24, { ptr, ptr, ptr, i32 } %24, ptr nonnull %3)
    %.fca.0.extract18176 = extractvalue { ptr, i160 } %32, 0
    %33 = icmp ne ptr %.fca.0.extract18176, @nil_typ
    %34 = icmp ne ptr %.fca.0.extract18176, null
    %.not24177 = and i1 %33, %34
    br i1 %.not24177, label %._crit_edge.preheader, label %.critedge
  
  ._crit_edge.preheader:                            ; preds = %2
    %const = bitcast i64 3084208142191802847 to i64
    br label %._crit_edge
  
  ._crit_edge:                                      ; preds = %._crit_edge.preheader, %Array_append_xT.exit
    %35 = phi ptr [ %48, %Array_append_xT.exit ], [ %result.i183, %._crit_edge.preheader ]
    %.pre = phi i32 [ %54, %Array_append_xT.exit ], [ 0, %._crit_edge.preheader ]
    %.fca.0.extract18178 = phi ptr [ %.fca.0.extract18, %Array_append_xT.exit ], [ %.fca.0.extract18176, %._crit_edge.preheader ]
    %36 = phi { ptr, i160 } [ %58, %Array_append_xT.exit ], [ %32, %._crit_edge.preheader ]
    %.fca.1.extract20 = extractvalue { ptr, i160 } %36, 1
    %.sroa.3144.8.insert.ext = and i160 %.fca.1.extract20, 340282366920938463463374607431768211455
    call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %3)
    %sunkaddr = getelementptr i8, ptr %result.i25, i64 12
    %37 = load i32, ptr %sunkaddr, align 4
    %.not.i = icmp slt i32 %.pre, %37
    br i1 %.not.i, label %Array_append_xT.exit, label %38
  
  38:                                               ; preds = %._crit_edge
    %39 = shl i32 %37, 1
    %sunkaddr6 = getelementptr i8, ptr %result.i25, i64 12
    store i32 %39, ptr %sunkaddr6, align 4
    %40 = load ptr, ptr %result.i25, align 8
    %41 = sext i32 %39 to i64
    %.idx.i290 = shl nsw i64 %41, 5
    %result.i303 = call noalias ptr @bump_malloc_inner(i64 noundef %.idx.i290, ptr nonnull @current_ptr) #26
    store ptr %result.i303, ptr %result.i25, align 8
    %42 = icmp sgt i32 %.pre, 0
    br i1 %42, label %.lr.ph, label %Array_append_xT.exit
  
  .lr.ph:                                           ; preds = %38
    %43 = call ptr @llvm.invariant.start.p0(i64 552, ptr nonnull @Array)
    br label %._crit_edge.i
  
  ._crit_edge.i:                                    ; preds = %._crit_edge.i, %.lr.ph
    %lsr.iv = phi i64 [ %lsr.iv.next, %._crit_edge.i ], [ 8, %.lr.ph ]
    %.reg2mem17.0.i338 = phi i32 [ 0, %.lr.ph ], [ %46, %._crit_edge.i ]
    %scevgep4 = getelementptr i8, ptr %40, i64 %lsr.iv
    %scevgep5 = getelementptr i8, ptr %scevgep4, i64 -8
    %scevgep1 = getelementptr i8, ptr %result.i303, i64 %lsr.iv
    %scevgep2 = getelementptr i8, ptr %scevgep1, i64 -8
    %44 = load ptr, ptr %scevgep5, align 8
    %scevgep3 = getelementptr i8, ptr %40, i64 %lsr.iv
    %45 = load i160, ptr %scevgep3, align 4
    %hash_coef_ptr.i.i291 = getelementptr i8, ptr %44, i64 8
    %tbl_size_ptr.i.i292 = getelementptr i8, ptr %44, i64 16
    %offset_tbl_ptr.i.i293 = getelementptr i8, ptr %44, i64 40
    %hash_coef.i.i294 = load i64, ptr %hash_coef_ptr.i.i291, align 4
    %tbl_size.i.i295 = load i64, ptr %tbl_size_ptr.i.i292, align 4
    %offset_tbl.i.i296 = load ptr, ptr %offset_tbl_ptr.i.i293, align 8
    %product.i.i.i297 = mul i64 %hash_coef.i.i294, %const
    %shifted.i.i.i298 = lshr i64 %product.i.i.i297, 32
    %xored.i.i.i299 = xor i64 %shifted.i.i.i298, %product.i.i.i297
    %hash.i.i.i300 = and i64 %xored.i.i.i299, %tbl_size.i.i295
    %offset_ptr.i.i301 = getelementptr i32, ptr %offset_tbl.i.i296, i64 %hash.i.i.i300
    %offset.i.i302 = load i32, ptr %offset_ptr.i.i301, align 4
    %.sroa.5.24.insert.ext = zext i32 %offset.i.i302 to i160
    %.sroa.5.24.insert.shift = shl nuw i160 %.sroa.5.24.insert.ext, 128
    %.sroa.5.24.insert.mask = and i160 %45, 340282366920938463463374607431768211455
    %.sroa.5.24.insert.insert = or disjoint i160 %.sroa.5.24.insert.shift, %.sroa.5.24.insert.mask
    store ptr %44, ptr %scevgep2, align 8
    %scevgep = getelementptr i8, ptr %result.i303, i64 %lsr.iv
    store i160 %.sroa.5.24.insert.insert, ptr %scevgep, align 4
    %46 = add nuw nsw i32 %.reg2mem17.0.i338, 1
    %lsr.iv.next = add nuw nsw i64 %lsr.iv, 32
    %47 = icmp slt i32 %46, %.pre
    br i1 %47, label %._crit_edge.i, label %Array_append_xT.exit
  
  Array_append_xT.exit:                             ; preds = %._crit_edge.i, %38, %._crit_edge
    %48 = phi ptr [ %35, %._crit_edge ], [ %result.i303, %38 ], [ %result.i303, %._crit_edge.i ]
    %49 = call ptr @llvm.invariant.start.p0(i64 552, ptr nonnull @Array)
    %50 = sext i32 %.pre to i64
    %.idx.i = shl nsw i64 %50, 5
    %51 = getelementptr i8, ptr %48, i64 %.idx.i
    %sunkaddr7 = getelementptr i8, ptr %.fca.0.extract18178, i64 8
    %hash_coef.i.i214 = load i64, ptr %sunkaddr7, align 4
    %sunkaddr8 = getelementptr i8, ptr %.fca.0.extract18178, i64 16
    %tbl_size.i.i215 = load i64, ptr %sunkaddr8, align 4
    %sunkaddr9 = getelementptr i8, ptr %.fca.0.extract18178, i64 40
    %offset_tbl.i.i216 = load ptr, ptr %sunkaddr9, align 8
    %product.i.i.i217 = mul i64 %hash_coef.i.i214, %const
    %shifted.i.i.i218 = lshr i64 %product.i.i.i217, 32
    %xored.i.i.i219 = xor i64 %shifted.i.i.i218, %product.i.i.i217
    %hash.i.i.i220 = and i64 %xored.i.i.i219, %tbl_size.i.i215
    %offset_ptr.i.i221 = getelementptr i32, ptr %offset_tbl.i.i216, i64 %hash.i.i.i220
    %offset.i.i222 = load i32, ptr %offset_ptr.i.i221, align 4
    %.sroa.5262.24.insert.ext = zext i32 %offset.i.i222 to i160
    %.sroa.5262.24.insert.shift = shl nuw i160 %.sroa.5262.24.insert.ext, 128
    %.sroa.5262.24.insert.insert = or disjoint i160 %.sroa.5262.24.insert.shift, %.sroa.3144.8.insert.ext
    store ptr %.fca.0.extract18178, ptr %51, align 8
    %52 = getelementptr i8, ptr %51, i64 8
    store i160 %.sroa.5262.24.insert.insert, ptr %52, align 4
    %sunkaddr10 = getelementptr i8, ptr %result.i25, i64 8
    %53 = load i32, ptr %sunkaddr10, align 4
    %54 = add i32 %53, 1
    %55 = call ptr @llvm.invariant.start.p0(i64 552, ptr nonnull @Array)
    store i32 %54, ptr %sunkaddr10, align 4
    call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %3)
    %sunkaddr11 = mul i64 %27, 8
    %sunkaddr12 = getelementptr i8, ptr %.fca.0.extract2, i64 %sunkaddr11
    %sunkaddr13 = getelementptr i8, ptr %sunkaddr12, i64 8
    %56 = load ptr, ptr %sunkaddr13, align 8
    %57 = call ptr %56({ ptr, ptr, ptr, i32 } %24, ptr nonnull %3)
    %58 = call { ptr, i160 } %57({ ptr, ptr, ptr, i32 } %24, { ptr, ptr, ptr, i32 } %24, ptr nonnull %3)
    %.fca.0.extract18 = extractvalue { ptr, i160 } %58, 0
    %59 = icmp ne ptr %.fca.0.extract18, @nil_typ
    %60 = icmp ne ptr %.fca.0.extract18, null
    %.not24 = and i1 %59, %60
    br i1 %.not24, label %._crit_edge, label %.critedge
  
  .critedge:                                        ; preds = %Array_append_xT.exit, %2
    %61 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Array, ptr undef, ptr undef, i32 undef }, ptr %result.i25, 1
    %62 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr undef, 2
    %63 = insertvalue { ptr, ptr, ptr, i32 } %62, i32 7, 3
    ret { ptr, ptr, ptr, i32 } %63
  }
  
  define void @Array_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, -5261542750394134544
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %result.i = tail call noalias dereferenceable_or_null(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nonnull @current_ptr) #26
    %4 = tail call ptr @llvm.invariant.start.p0(i64 552, ptr %.fca.0.extract)
    %5 = sext i32 %offset.i.i to i64
    %6 = getelementptr ptr, ptr %.fca.0.extract, i64 %5
    %7 = load ptr, ptr %6, align 8
    %8 = getelementptr i8, ptr %7, i64 8
    %9 = load ptr, ptr %8, align 8
    %10 = insertvalue { ptr } undef, ptr %result.i, 0
    tail call void %9(ptr %.fca.1.extract, { ptr } %10)
    %11 = tail call ptr @llvm.invariant.start.p0(i64 552, ptr %.fca.0.extract)
    %12 = getelementptr i8, ptr %6, i64 8
    %13 = load ptr, ptr %12, align 8
    %14 = getelementptr i8, ptr %13, i64 8
    %15 = load ptr, ptr %14, align 8
    tail call void %15(ptr %.fca.1.extract, i32 0)
    %16 = tail call ptr @llvm.invariant.start.p0(i64 552, ptr %.fca.0.extract)
    %17 = getelementptr i8, ptr %6, i64 16
    %18 = load ptr, ptr %17, align 8
    %19 = getelementptr i8, ptr %18, i64 8
    %20 = load ptr, ptr %19, align 8
    tail call void %20(ptr %.fca.1.extract, i32 1)
    ret void
  }
  
  define void @Array_init_capacityPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, -5261542750394134544
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %5 = tail call ptr @llvm.invariant.start.p0(i64 552, ptr %.fca.0.extract)
    %6 = sext i32 %offset.i.i to i64
    %7 = getelementptr ptr, ptr %.fca.0.extract, i64 %6
    %8 = getelementptr i8, ptr %7, i64 16
    %9 = load ptr, ptr %8, align 8
    %10 = getelementptr i8, ptr %9, i64 8
    %11 = load ptr, ptr %10, align 8
    tail call void %11(ptr %.fca.1.extract, i32 %3)
    %12 = tail call ptr @llvm.invariant.start.p0(i64 552, ptr %.fca.0.extract)
    %13 = load ptr, ptr %8, align 8
    %14 = load ptr, ptr %13, align 8
    %15 = tail call i32 %14(ptr %.fca.1.extract)
    %16 = sext i32 %15 to i64
    %.idx = shl nsw i64 %16, 5
    %result.i = tail call noalias ptr @bump_malloc_inner(i64 noundef %.idx, ptr nonnull @current_ptr) #26
    %17 = tail call ptr @llvm.invariant.start.p0(i64 552, ptr %.fca.0.extract)
    %18 = load ptr, ptr %7, align 8
    %19 = getelementptr i8, ptr %18, i64 8
    %20 = load ptr, ptr %19, align 8
    %21 = insertvalue { ptr } undef, ptr %result.i, 0
    tail call void %20(ptr %.fca.1.extract, { ptr } %21)
    %22 = tail call ptr @llvm.invariant.start.p0(i64 552, ptr %.fca.0.extract)
    %23 = getelementptr i8, ptr %7, i64 8
    %24 = load ptr, ptr %23, align 8
    %25 = getelementptr i8, ptr %24, i64 8
    %26 = load ptr, ptr %25, align 8
    tail call void %26(ptr %.fca.1.extract, i32 0)
    ret void
  }
  
  define i32 @Array_length_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, -5261542750394134544
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %4 = tail call ptr @llvm.invariant.start.p0(i64 552, ptr %.fca.0.extract)
    %5 = sext i32 %offset.i.i to i64
    %6 = getelementptr ptr, ptr %.fca.0.extract, i64 %5
    %7 = getelementptr i8, ptr %6, i64 8
    %8 = load ptr, ptr %7, align 8
    %9 = load ptr, ptr %8, align 8
    %10 = tail call i32 %9(ptr %.fca.1.extract)
    ret i32 %10
  }
  
  define i32 @Array_capacity_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, -5261542750394134544
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %4 = tail call ptr @llvm.invariant.start.p0(i64 552, ptr %.fca.0.extract)
    %5 = sext i32 %offset.i.i to i64
    %6 = getelementptr ptr, ptr %.fca.0.extract, i64 %5
    %7 = getelementptr i8, ptr %6, i64 16
    %8 = load ptr, ptr %7, align 8
    %9 = load ptr, ptr %8, align 8
    %10 = tail call i32 %9(ptr %.fca.1.extract)
    ret i32 %10
  }
  
  define { ptr, ptr, ptr, i32 } @Array_append_xT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, i160 } %3) {
    %const = bitcast i64 -5261542750394134544 to i64
    %5 = alloca [0 x ptr], align 8
    %.fca.0.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract5, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract5, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract5, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, %const
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %6 = tail call ptr @llvm.invariant.start.p0(i64 552, ptr %.fca.0.extract5)
    %7 = sext i32 %offset.i.i to i64
    %8 = getelementptr ptr, ptr %.fca.0.extract5, i64 %7
    %9 = getelementptr i8, ptr %8, i64 8
    %10 = load ptr, ptr %9, align 8
    %11 = load ptr, ptr %10, align 8
    %12 = tail call i32 %11(ptr %.fca.1.extract6)
    %13 = tail call ptr @llvm.invariant.start.p0(i64 552, ptr %.fca.0.extract5)
    %14 = getelementptr i8, ptr %8, i64 16
    %15 = load ptr, ptr %14, align 8
    %16 = load ptr, ptr %15, align 8
    %17 = tail call i32 %16(ptr %.fca.1.extract6)
    %.not = icmp slt i32 %12, %17
    %.pre = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract5, 0
    %.pre78 = insertvalue { ptr, ptr, ptr, i32 } %.pre, ptr %.fca.1.extract6, 1
    %.pre80 = insertvalue { ptr, ptr, ptr, i32 } %.pre78, ptr %.fca.2.extract, 2
    br i1 %.not, label %._crit_edge, label %18
  
  18:                                               ; preds = %4
    %19 = trunc i64 %7 to i32
    %20 = insertvalue { ptr, ptr, ptr, i32 } %.pre80, i32 %19, 3
    %21 = tail call ptr @llvm.invariant.start.p0(i64 552, ptr nonnull %.fca.0.extract5)
    %sunkaddr = mul i64 %7, 8
    %sunkaddr1 = getelementptr i8, ptr %.fca.0.extract5, i64 %sunkaddr
    %sunkaddr2 = getelementptr i8, ptr %sunkaddr1, i64 24
    %22 = load ptr, ptr %sunkaddr2, align 8
    %23 = tail call ptr %22(ptr %.fca.1.extract6)
    %24 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
    %25 = tail call ptr @llvm.invariant.start.p0(i64 552, ptr nonnull %.fca.0.extract5)
    %sunkaddr3 = mul i64 %7, 8
    %sunkaddr4 = getelementptr i8, ptr %.fca.0.extract5, i64 %sunkaddr3
    %sunkaddr5 = getelementptr i8, ptr %sunkaddr4, i64 80
    %26 = load ptr, ptr %sunkaddr5, align 8
    %27 = call ptr %26({ ptr, ptr, ptr, i32 } %20, ptr nonnull %5)
    call void %27({ ptr, ptr, ptr, i32 } %20, { ptr, ptr, ptr, i32 } %20, ptr nonnull %5)
    br label %._crit_edge
  
  ._crit_edge:                                      ; preds = %18, %4
    %.fca.0.extract4 = extractvalue { ptr, i160 } %3, 0
    %tbl_size_ptr.i.i9 = getelementptr i8, ptr %.fca.0.extract4, i64 16
    %hash_coef_ptr.i.i8 = getelementptr i8, ptr %.fca.0.extract4, i64 8
    %offset_tbl_ptr.i.i10 = getelementptr i8, ptr %.fca.0.extract4, i64 40
    %.fca.1.extract = extractvalue { ptr, i160 } %3, 1
    %28 = call ptr @llvm.invariant.start.p0(i64 552, ptr nonnull %.fca.0.extract5)
    %sunkaddr6 = mul i64 %7, 8
    %sunkaddr7 = getelementptr i8, ptr %.fca.0.extract5, i64 %sunkaddr6
    %29 = load ptr, ptr %sunkaddr7, align 8
    %30 = load ptr, ptr %29, align 8
    %31 = call { ptr } %30(ptr %.fca.1.extract6)
    %.fca.0.extract = extractvalue { ptr } %31, 0
    %32 = call ptr @llvm.invariant.start.p0(i64 552, ptr nonnull %.fca.0.extract5)
    %sunkaddr8 = mul i64 %7, 8
    %sunkaddr9 = getelementptr i8, ptr %.fca.0.extract5, i64 %sunkaddr8
    %sunkaddr10 = getelementptr i8, ptr %sunkaddr9, i64 8
    %33 = load ptr, ptr %sunkaddr10, align 8
    %34 = load ptr, ptr %33, align 8
    %35 = call i32 %34(ptr %.fca.1.extract6)
    %36 = sext i32 %35 to i64
    %.idx = shl nsw i64 %36, 5
    %37 = getelementptr i8, ptr %.fca.0.extract, i64 %.idx
    %hash_coef.i.i25 = load i64, ptr %hash_coef_ptr.i.i8, align 4
    %tbl_size.i.i26 = load i64, ptr %tbl_size_ptr.i.i9, align 4
    %offset_tbl.i.i27 = load ptr, ptr %offset_tbl_ptr.i.i10, align 8
    %product.i.i.i28 = mul i64 %hash_coef.i.i25, 3084208142191802847
    %shifted.i.i.i29 = lshr i64 %product.i.i.i28, 32
    %xored.i.i.i30 = xor i64 %shifted.i.i.i29, %product.i.i.i28
    %hash.i.i.i31 = and i64 %xored.i.i.i30, %tbl_size.i.i26
    %offset_ptr.i.i32 = getelementptr i32, ptr %offset_tbl.i.i27, i64 %hash.i.i.i31
    %offset.i.i33 = load i32, ptr %offset_ptr.i.i32, align 4
    store ptr %.fca.0.extract4, ptr %37, align 8
    %38 = getelementptr i8, ptr %37, i64 8
    %.sroa.551.8.insert.ext = zext i32 %offset.i.i33 to i160
    %.sroa.551.8.insert.shift = shl nuw i160 %.sroa.551.8.insert.ext, 128
    %.sroa.350.8.insert.ext = and i160 %.fca.1.extract, 340282366920938463463374607431768211455
    %.sroa.350.8.insert.insert = or disjoint i160 %.sroa.551.8.insert.shift, %.sroa.350.8.insert.ext
    store i160 %.sroa.350.8.insert.insert, ptr %38, align 4
    %39 = call ptr @llvm.invariant.start.p0(i64 552, ptr nonnull %.fca.0.extract5)
    %40 = load ptr, ptr %sunkaddr10, align 8
    %41 = load ptr, ptr %40, align 8
    %42 = call i32 %41(ptr %.fca.1.extract6)
    %43 = add i32 %42, 1
    %44 = call ptr @llvm.invariant.start.p0(i64 552, ptr nonnull %.fca.0.extract5)
    %45 = load ptr, ptr %sunkaddr10, align 8
    %46 = getelementptr i8, ptr %45, i64 8
    %47 = load ptr, ptr %46, align 8
    call void %47(ptr %.fca.1.extract6, i32 %43)
    %sunkaddr11 = getelementptr i8, ptr %.fca.0.extract5, i64 8
    %hash_coef.i.i39 = load i64, ptr %sunkaddr11, align 4
    %sunkaddr12 = getelementptr i8, ptr %.fca.0.extract5, i64 16
    %tbl_size.i.i40 = load i64, ptr %sunkaddr12, align 4
    %sunkaddr13 = getelementptr i8, ptr %.fca.0.extract5, i64 40
    %offset_tbl.i.i41 = load ptr, ptr %sunkaddr13, align 8
    %product.i.i.i42 = mul i64 %hash_coef.i.i39, %const
    %shifted.i.i.i43 = lshr i64 %product.i.i.i42, 32
    %xored.i.i.i44 = xor i64 %shifted.i.i.i43, %product.i.i.i42
    %hash.i.i.i45 = and i64 %xored.i.i.i44, %tbl_size.i.i40
    %offset_ptr.i.i46 = getelementptr i32, ptr %offset_tbl.i.i41, i64 %hash.i.i.i45
    %offset.i.i47 = load i32, ptr %offset_ptr.i.i46, align 4
    %48 = insertvalue { ptr, ptr, ptr, i32 } %.pre80, i32 %offset.i.i47, 3
    ret { ptr, ptr, ptr, i32 } %48
  }
  
  define void @Array_grow_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
    %.fca.0.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract10, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract10, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract10, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, -5261542750394134544
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %4 = tail call ptr @llvm.invariant.start.p0(i64 552, ptr %.fca.0.extract10)
    %5 = sext i32 %offset.i.i to i64
    %6 = getelementptr ptr, ptr %.fca.0.extract10, i64 %5
    %7 = getelementptr i8, ptr %6, i64 16
    %8 = load ptr, ptr %7, align 8
    %9 = load ptr, ptr %8, align 8
    %10 = tail call i32 %9(ptr %.fca.1.extract)
    %11 = shl i32 %10, 1
    %12 = tail call ptr @llvm.invariant.start.p0(i64 552, ptr %.fca.0.extract10)
    %13 = load ptr, ptr %7, align 8
    %14 = getelementptr i8, ptr %13, i64 8
    %15 = load ptr, ptr %14, align 8
    tail call void %15(ptr %.fca.1.extract, i32 %11)
    %16 = tail call ptr @llvm.invariant.start.p0(i64 552, ptr %.fca.0.extract10)
    %17 = load ptr, ptr %6, align 8
    %18 = load ptr, ptr %17, align 8
    %19 = tail call { ptr } %18(ptr %.fca.1.extract)
    %.fca.0.extract5 = extractvalue { ptr } %19, 0
    %20 = tail call ptr @llvm.invariant.start.p0(i64 552, ptr %.fca.0.extract10)
    %21 = load ptr, ptr %7, align 8
    %22 = load ptr, ptr %21, align 8
    %23 = tail call i32 %22(ptr %.fca.1.extract)
    %24 = sext i32 %23 to i64
    %.idx = shl nsw i64 %24, 5
    %result.i = tail call noalias ptr @bump_malloc_inner(i64 noundef %.idx, ptr nonnull @current_ptr) #26
    %25 = tail call ptr @llvm.invariant.start.p0(i64 552, ptr %.fca.0.extract10)
    %26 = load ptr, ptr %6, align 8
    %27 = getelementptr i8, ptr %26, i64 8
    %28 = load ptr, ptr %27, align 8
    %29 = insertvalue { ptr } undef, ptr %result.i, 0
    tail call void %28(ptr %.fca.1.extract, { ptr } %29)
    %30 = tail call ptr @llvm.invariant.start.p0(i64 552, ptr nonnull %.fca.0.extract10)
    %31 = getelementptr i8, ptr %6, i64 8
    %32 = load ptr, ptr %31, align 8
    %33 = load ptr, ptr %32, align 8
    %34 = tail call i32 %33(ptr %.fca.1.extract)
    %35 = icmp sgt i32 %34, 0
    br i1 %35, label %.lr.ph, label %._crit_edge._crit_edge
  
  .lr.ph:                                           ; preds = %3
    %36 = tail call ptr @llvm.invariant.start.p0(i64 552, ptr nonnull %.fca.0.extract10)
    br label %._crit_edge
  
  ._crit_edge:                                      ; preds = %._crit_edge, %.lr.ph
    %lsr.iv = phi i64 [ %lsr.iv.next, %._crit_edge ], [ 8, %.lr.ph ]
    %.reg2mem17.046 = phi i32 [ 0, %.lr.ph ], [ %42, %._crit_edge ]
    %scevgep4 = getelementptr i8, ptr %.fca.0.extract5, i64 %lsr.iv
    %scevgep5 = getelementptr i8, ptr %scevgep4, i64 -8
    %sunkaddr = mul i64 %5, 8
    %sunkaddr6 = getelementptr i8, ptr %.fca.0.extract10, i64 %sunkaddr
    %37 = load ptr, ptr %sunkaddr6, align 8
    %38 = load ptr, ptr %37, align 8
    %39 = tail call { ptr } %38(ptr %.fca.1.extract)
    %.fca.0.extract = extractvalue { ptr } %39, 0
    %scevgep1 = getelementptr i8, ptr %.fca.0.extract, i64 %lsr.iv
    %scevgep2 = getelementptr i8, ptr %scevgep1, i64 -8
    %40 = load ptr, ptr %scevgep5, align 8
    %scevgep3 = getelementptr i8, ptr %.fca.0.extract5, i64 %lsr.iv
    %41 = load i160, ptr %scevgep3, align 4
    %hash_coef_ptr.i.i13 = getelementptr i8, ptr %40, i64 8
    %tbl_size_ptr.i.i14 = getelementptr i8, ptr %40, i64 16
    %offset_tbl_ptr.i.i15 = getelementptr i8, ptr %40, i64 40
    %hash_coef.i.i16 = load i64, ptr %hash_coef_ptr.i.i13, align 4
    %tbl_size.i.i17 = load i64, ptr %tbl_size_ptr.i.i14, align 4
    %offset_tbl.i.i18 = load ptr, ptr %offset_tbl_ptr.i.i15, align 8
    %product.i.i.i19 = mul i64 %hash_coef.i.i16, 3084208142191802847
    %shifted.i.i.i20 = lshr i64 %product.i.i.i19, 32
    %xored.i.i.i21 = xor i64 %shifted.i.i.i20, %product.i.i.i19
    %hash.i.i.i22 = and i64 %xored.i.i.i21, %tbl_size.i.i17
    %offset_ptr.i.i23 = getelementptr i32, ptr %offset_tbl.i.i18, i64 %hash.i.i.i22
    %offset.i.i24 = load i32, ptr %offset_ptr.i.i23, align 4
    store ptr %40, ptr %scevgep2, align 8
    %scevgep = getelementptr i8, ptr %.fca.0.extract, i64 %lsr.iv
    %.sroa.5.8.insert.ext = zext i32 %offset.i.i24 to i160
    %.sroa.5.8.insert.shift = shl nuw i160 %.sroa.5.8.insert.ext, 128
    %.sroa.3.8.insert.ext = and i160 %41, 340282366920938463463374607431768211455
    %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.5.8.insert.shift, %.sroa.3.8.insert.ext
    store i160 %.sroa.3.8.insert.insert, ptr %scevgep, align 4
    %42 = add nuw nsw i32 %.reg2mem17.046, 1
    %sunkaddr7 = mul i64 %5, 8
    %sunkaddr8 = getelementptr i8, ptr %.fca.0.extract10, i64 %sunkaddr7
    %sunkaddr9 = getelementptr i8, ptr %sunkaddr8, i64 8
    %43 = load ptr, ptr %sunkaddr9, align 8
    %44 = load ptr, ptr %43, align 8
    %45 = tail call i32 %44(ptr %.fca.1.extract)
    %lsr.iv.next = add nuw nsw i64 %lsr.iv, 32
    %46 = icmp slt i32 %42, %45
    br i1 %46, label %._crit_edge, label %._crit_edge._crit_edge
  
  ._crit_edge._crit_edge:                           ; preds = %._crit_edge, %3
    ret void
  }
  
  define { ptr, i160 } @Array__index_xPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
    %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, -5261542750394134544
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %5 = tail call ptr @llvm.invariant.start.p0(i64 552, ptr %.fca.0.extract3)
    %6 = sext i32 %offset.i.i to i64
    %7 = getelementptr ptr, ptr %.fca.0.extract3, i64 %6
    %8 = getelementptr i8, ptr %7, i64 8
    %9 = load ptr, ptr %8, align 8
    %10 = load ptr, ptr %9, align 8
    %11 = tail call i32 %10(ptr %.fca.1.extract4)
    %12 = add i32 %11, -1
    %13 = icmp sgt i32 %3, %12
    %14 = tail call ptr @llvm.invariant.start.p0(i64 552, ptr %.fca.0.extract3)
    %15 = load ptr, ptr %8, align 8
    %16 = load ptr, ptr %15, align 8
    %17 = tail call i32 %16(ptr %.fca.1.extract4)
    %18 = add i32 %17, %3
    %19 = icmp slt i32 %18, 0
    %20 = or i1 %13, %19
    %21 = alloca [1 x ptr], align 8
    %22 = alloca { ptr }, align 8
    %23 = alloca [1 x ptr], align 8
    %24 = alloca { ptr }, align 8
    br i1 %20, label %25, label %._crit_edge
  
  25:                                               ; preds = %4
    %26 = trunc i64 %6 to i32
    %27 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract3, 0
    %28 = insertvalue { ptr, ptr, ptr, i32 } %27, ptr %.fca.1.extract4, 1
    %29 = insertvalue { ptr, ptr, ptr, i32 } %28, ptr %.fca.2.extract, 2
    %30 = insertvalue { ptr, ptr, ptr, i32 } %29, i32 %26, 3
    %31 = tail call ptr @llvm.invariant.start.p0(i64 552, ptr nonnull %.fca.0.extract3)
    %sunkaddr = mul i64 %6, 8
    %sunkaddr1 = getelementptr i8, ptr %.fca.0.extract3, i64 %sunkaddr
    %sunkaddr2 = getelementptr i8, ptr %sunkaddr1, i64 24
    %32 = load ptr, ptr %sunkaddr2, align 8
    %33 = tail call ptr %32(ptr %.fca.1.extract4)
    store ptr @_parameterization_Ptri32, ptr %21, align 8
    %34 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %21)
    %35 = tail call ptr @llvm.invariant.start.p0(i64 552, ptr nonnull %.fca.0.extract3)
    %sunkaddr3 = mul i64 %6, 8
    %sunkaddr4 = getelementptr i8, ptr %.fca.0.extract3, i64 %sunkaddr3
    %sunkaddr5 = getelementptr i8, ptr %sunkaddr4, i64 96
    %36 = load ptr, ptr %sunkaddr5, align 8
    store ptr @i32_typ, ptr %22, align 8
    %37 = call ptr %36({ ptr, ptr, ptr, i32 } %30, ptr nonnull %22)
    call void %37({ ptr, ptr, ptr, i32 } %30, { ptr, ptr, ptr, i32 } %30, ptr nonnull %21, i32 %3)
    br label %._crit_edge
  
  ._crit_edge:                                      ; preds = %25, %4
    %38 = icmp slt i32 %3, 0
    br i1 %38, label %39, label %45
  
  39:                                               ; preds = %._crit_edge
    %40 = call ptr @llvm.invariant.start.p0(i64 552, ptr nonnull %.fca.0.extract3)
    %sunkaddr6 = mul i64 %6, 8
    %sunkaddr7 = getelementptr i8, ptr %.fca.0.extract3, i64 %sunkaddr6
    %sunkaddr8 = getelementptr i8, ptr %sunkaddr7, i64 8
    %41 = load ptr, ptr %sunkaddr8, align 8
    %42 = load ptr, ptr %41, align 8
    %43 = call i32 %42(ptr %.fca.1.extract4)
    %44 = add i32 %43, %3
    br label %45
  
  45:                                               ; preds = %39, %._crit_edge
    %.reg2mem3.0 = phi i32 [ %44, %39 ], [ %3, %._crit_edge ]
    %46 = trunc i64 %6 to i32
    %47 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract3, 0
    %48 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %.fca.1.extract4, 1
    %49 = insertvalue { ptr, ptr, ptr, i32 } %48, ptr %.fca.2.extract, 2
    %50 = insertvalue { ptr, ptr, ptr, i32 } %49, i32 %46, 3
    %51 = call ptr @llvm.invariant.start.p0(i64 552, ptr nonnull %.fca.0.extract3)
    %sunkaddr9 = mul i64 %6, 8
    %sunkaddr10 = getelementptr i8, ptr %.fca.0.extract3, i64 %sunkaddr9
    %sunkaddr11 = getelementptr i8, ptr %sunkaddr10, i64 24
    %52 = load ptr, ptr %sunkaddr11, align 8
    %53 = call ptr %52(ptr %.fca.1.extract4)
    store ptr @_parameterization_Ptri32, ptr %23, align 8
    %54 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %23)
    %55 = call ptr @llvm.invariant.start.p0(i64 552, ptr nonnull %.fca.0.extract3)
    %sunkaddr12 = mul i64 %6, 8
    %sunkaddr13 = getelementptr i8, ptr %.fca.0.extract3, i64 %sunkaddr12
    %sunkaddr14 = getelementptr i8, ptr %sunkaddr13, i64 104
    %56 = load ptr, ptr %sunkaddr14, align 8
    store ptr @i32_typ, ptr %24, align 8
    %57 = call ptr %56({ ptr, ptr, ptr, i32 } %50, ptr nonnull %24)
    %58 = call { ptr, i160 } %57({ ptr, ptr, ptr, i32 } %50, { ptr, ptr, ptr, i32 } %50, ptr nonnull %23, i32 %.reg2mem3.0)
    %.fca.0.extract = extractvalue { ptr, i160 } %58, 0
    %.fca.1.extract = extractvalue { ptr, i160 } %58, 1
    %hash_coef_ptr.i.i6 = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i7 = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i8 = getelementptr i8, ptr %.fca.0.extract, i64 40
    %hash_coef.i.i9 = load i64, ptr %hash_coef_ptr.i.i6, align 4
    %tbl_size.i.i10 = load i64, ptr %tbl_size_ptr.i.i7, align 4
    %offset_tbl.i.i11 = load ptr, ptr %offset_tbl_ptr.i.i8, align 8
    %product.i.i.i12 = mul i64 %hash_coef.i.i9, 3084208142191802847
    %shifted.i.i.i13 = lshr i64 %product.i.i.i12, 32
    %xored.i.i.i14 = xor i64 %shifted.i.i.i13, %product.i.i.i12
    %hash.i.i.i15 = and i64 %xored.i.i.i14, %tbl_size.i.i10
    %offset_ptr.i.i16 = getelementptr i32, ptr %offset_tbl.i.i11, i64 %hash.i.i.i15
    %offset.i.i17 = load i32, ptr %offset_ptr.i.i16, align 4
    %.sroa.538.8.insert.ext = zext i32 %offset.i.i17 to i160
    %.sroa.538.8.insert.shift = shl nuw i160 %.sroa.538.8.insert.ext, 128
    %59 = insertvalue { ptr, i160 } undef, ptr %.fca.0.extract, 0
    %.sroa.3.8.insert.ext = and i160 %.fca.1.extract, 340282366920938463463374607431768211455
    %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.538.8.insert.shift, %.sroa.3.8.insert.ext
    %60 = insertvalue { ptr, i160 } %59, i160 %.sroa.3.8.insert.insert, 1
    ret { ptr, i160 } %60
  }
  
  define void @Array_throw_oob_xPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, -5261542750394134544
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %result.i = tail call noalias dereferenceable_or_null(72) ptr @bump_malloc_inner(i64 noundef 72, ptr nonnull @current_ptr) #26
    %5 = alloca { ptr, ptr, ptr, i32 }, align 8
    %6 = getelementptr inbounds i8, ptr %5, i64 8
    %7 = getelementptr inbounds i8, ptr %5, i64 24
    store ptr @Exception, ptr %5, align 8
    store ptr %result.i, ptr %6, align 8
    store i32 7, ptr %7, align 8
    %8 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %5)
    %9 = tail call ptr @llvm.invariant.start.p0(i64 552, ptr %.fca.0.extract)
    %10 = sext i32 %offset.i.i to i64
    %11 = getelementptr ptr, ptr %.fca.0.extract, i64 %10
    %12 = getelementptr i8, ptr %11, i64 24
    %13 = load ptr, ptr %12, align 8
    %14 = tail call ptr %13(ptr %.fca.1.extract)
    store i32 0, ptr %result.i, align 4
    %result.i.i = tail call noalias dereferenceable_or_null(7) ptr @bump_malloc_inner(i64 noundef 7, ptr nonnull @current_ptr) #26
    store i48 68605365407292, ptr %result.i.i, align 4
    %result.i2.i = tail call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #26
    store ptr %result.i.i, ptr %result.i2.i, align 8
    %15 = getelementptr i8, ptr %result.i2.i, i64 8
    store i32 6, ptr %15, align 4
    %16 = getelementptr i8, ptr %result.i2.i, i64 12
    store i32 7, ptr %16, align 4
    %17 = getelementptr i8, ptr %result.i, i64 40
    store ptr @String, ptr %17, align 8
    %18 = getelementptr i8, ptr %result.i, i64 48
    store ptr %result.i2.i, ptr %18, align 8
    %19 = getelementptr i8, ptr %result.i, i64 64
    store i32 7, ptr %19, align 4
    %result.i17.i = tail call noalias dereferenceable_or_null(1) ptr @bump_malloc_inner(i64 noundef 1, ptr nonnull @current_ptr) #26
    %result.i18.i = tail call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #26
    store ptr %result.i17.i, ptr %result.i18.i, align 8
    %20 = getelementptr i8, ptr %result.i18.i, i64 8
    store i32 0, ptr %20, align 4
    %21 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
    %22 = getelementptr i8, ptr %result.i18.i, i64 12
    store i32 1, ptr %22, align 4
    %23 = tail call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Exception)
    %24 = getelementptr i8, ptr %result.i, i64 8
    store ptr @String, ptr %24, align 8
    %25 = getelementptr i8, ptr %result.i, i64 16
    store ptr %result.i18.i, ptr %25, align 8
    %26 = getelementptr i8, ptr %result.i, i64 32
    store i32 7, ptr %26, align 4
    %result.i1 = tail call noalias dereferenceable_or_null(13) ptr @bump_malloc_inner(i64 noundef 13, ptr nonnull @current_ptr) #26
    store i96 32629405733917278060896216423, ptr %result.i1, align 4
    %result.i2 = tail call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #26
    %27 = tail call ptr @llvm.invariant.start.p0(i64 552, ptr %.fca.0.extract)
    %28 = load ptr, ptr %12, align 8
    %29 = tail call ptr %28(ptr %.fca.1.extract)
    store ptr %result.i1, ptr %result.i2, align 8
    %30 = getelementptr i8, ptr %result.i2, i64 8
    store i32 12, ptr %30, align 4
    %31 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
    %32 = getelementptr i8, ptr %result.i2, i64 12
    store i32 13, ptr %32, align 4
    %33 = tail call ptr @llvm.invariant.start.p0(i64 552, ptr %.fca.0.extract)
    %34 = load ptr, ptr %12, align 8
    %35 = tail call ptr %34(ptr %.fca.1.extract)
    store i32 163, ptr %result.i, align 4
    %36 = tail call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Exception)
    store ptr @String, ptr %24, align 8
    store ptr %result.i2, ptr %25, align 8
    store i32 7, ptr %26, align 4
    %37 = load i160, ptr %6, align 8
    %38 = insertvalue { ptr, i160 } { ptr @Exception, i160 undef }, i160 %37, 1
    %current_coroutine.i = load ptr, ptr @current_coroutine, align 8
    %39 = getelementptr i8, ptr %current_coroutine.i, i64 48
    store { ptr, i160 } %38, ptr %39, align 8
    %into_callee_buf.i = getelementptr i8, ptr %current_coroutine.i, i64 8
    tail call preserve_nonecc void @context_switch(ptr nocapture writeonly %into_callee_buf.i, ptr nonnull @into_caller_buf) #27
    ret void
  }
  
  define { ptr, i160 } @Array_unsafe_index_xPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
    %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, -5261542750394134544
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %5 = tail call ptr @llvm.invariant.start.p0(i64 552, ptr %.fca.0.extract1)
    %6 = sext i32 %offset.i.i to i64
    %7 = getelementptr ptr, ptr %.fca.0.extract1, i64 %6
    %8 = load ptr, ptr %7, align 8
    %9 = load ptr, ptr %8, align 8
    %10 = tail call { ptr } %9(ptr %.fca.1.extract)
    %.fca.0.extract = extractvalue { ptr } %10, 0
    %11 = sext i32 %3 to i64
    %.idx = shl nsw i64 %11, 5
    %12 = getelementptr i8, ptr %.fca.0.extract, i64 %.idx
    %13 = load ptr, ptr %12, align 8
    %14 = getelementptr i8, ptr %12, i64 8
    %15 = load i160, ptr %14, align 4
    %hash_coef_ptr.i.i3 = getelementptr i8, ptr %13, i64 8
    %tbl_size_ptr.i.i4 = getelementptr i8, ptr %13, i64 16
    %offset_tbl_ptr.i.i5 = getelementptr i8, ptr %13, i64 40
    %hash_coef.i.i6 = load i64, ptr %hash_coef_ptr.i.i3, align 4
    %tbl_size.i.i7 = load i64, ptr %tbl_size_ptr.i.i4, align 4
    %offset_tbl.i.i8 = load ptr, ptr %offset_tbl_ptr.i.i5, align 8
    %product.i.i.i9 = mul i64 %hash_coef.i.i6, 3084208142191802847
    %shifted.i.i.i10 = lshr i64 %product.i.i.i9, 32
    %xored.i.i.i11 = xor i64 %shifted.i.i.i10, %product.i.i.i9
    %hash.i.i.i12 = and i64 %xored.i.i.i11, %tbl_size.i.i7
    %offset_ptr.i.i13 = getelementptr i32, ptr %offset_tbl.i.i8, i64 %hash.i.i.i12
    %offset.i.i14 = load i32, ptr %offset_ptr.i.i13, align 4
    %16 = insertvalue { ptr, i160 } undef, ptr %13, 0
    %.sroa.5.8.insert.ext = zext i32 %offset.i.i14 to i160
    %.sroa.5.8.insert.shift = shl nuw i160 %.sroa.5.8.insert.ext, 128
    %.sroa.3.8.insert.ext = and i160 %15, 340282366920938463463374607431768211455
    %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.5.8.insert.shift, %.sroa.3.8.insert.ext
    %17 = insertvalue { ptr, i160 } %16, i160 %.sroa.3.8.insert.insert, 1
    ret { ptr, i160 } %17
  }
  
  define { ptr, ptr, ptr, i32 } @Array_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
    %const = bitcast i64 -5261542750394134544 to i64
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, %const
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %4 = tail call ptr @llvm.invariant.start.p0(i64 552, ptr %.fca.0.extract)
    %5 = sext i32 %offset.i.i to i64
    %6 = getelementptr ptr, ptr %.fca.0.extract, i64 %5
    %7 = getelementptr i8, ptr %6, i64 24
    %8 = load ptr, ptr %7, align 8
    %9 = tail call ptr %8(ptr %.fca.1.extract)
    %result.i = tail call noalias dereferenceable_or_null(48) ptr @bump_malloc_inner(i64 noundef 48, ptr nonnull @current_ptr) #26
    %10 = getelementptr i8, ptr %result.i, i64 40
    store ptr %9, ptr %10, align 8
    %11 = tail call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %10)
    %12 = insertvalue { ptr, ptr, ptr, i32 } { ptr @ArrayIterator, ptr undef, ptr undef, i32 undef }, ptr %result.i, 1
    %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr undef, 2
    %14 = tail call ptr @llvm.invariant.start.p0(i64 552, ptr %.fca.0.extract)
    %15 = load ptr, ptr %7, align 8
    %16 = tail call ptr %15(ptr %.fca.1.extract)
    %17 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @ArrayIterator)
    %hash_coef.i.i58 = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i59 = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i60 = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i61 = mul i64 %hash_coef.i.i58, %const
    %shifted.i.i.i62 = lshr i64 %product.i.i.i61, 32
    %xored.i.i.i63 = xor i64 %shifted.i.i.i62, %product.i.i.i61
    %hash.i.i.i64 = and i64 %xored.i.i.i63, %tbl_size.i.i59
    %offset_ptr.i.i65 = getelementptr i32, ptr %offset_tbl.i.i60, i64 %hash.i.i.i64
    %offset.i.i53 = load i32, ptr %offset_ptr.i.i65, align 4
    store ptr %.fca.0.extract, ptr %result.i, align 8
    %18 = getelementptr i8, ptr %result.i, i64 8
    store ptr %.fca.1.extract, ptr %18, align 8
    %19 = getelementptr i8, ptr %result.i, i64 16
    store ptr %.fca.2.extract, ptr %19, align 8
    %20 = getelementptr i8, ptr %result.i, i64 24
    store i32 %offset.i.i53, ptr %20, align 4
    %21 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @ArrayIterator)
    %22 = getelementptr i8, ptr %result.i, i64 32
    store i32 0, ptr %22, align 4
    %23 = insertvalue { ptr, ptr, ptr, i32 } %13, i32 14, 3
    ret { ptr, ptr, ptr, i32 } %23
  }
  
  define void @Iterable2_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr } %3) {
    %5 = alloca [0 x ptr], align 8
    %.fca.0.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract7 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %.fca.2.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract5, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract5, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract5, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, 5693646204635713916
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %.fca.0.extract2 = extractvalue { ptr } %3, 0
    %6 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract5, 0
    %7 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr %.fca.1.extract7, 1
    %8 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %.fca.2.extract9, 2
    %9 = insertvalue { ptr, ptr, ptr, i32 } %8, i32 %offset.i.i, 3
    %10 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract5)
    %11 = sext i32 %offset.i.i to i64
    %12 = getelementptr ptr, ptr %.fca.0.extract5, i64 %11
    %13 = load ptr, ptr %12, align 8
    %14 = tail call ptr %13(ptr %.fca.1.extract7)
    %15 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
    %16 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract5)
    %17 = getelementptr i8, ptr %12, i64 8
    %18 = load ptr, ptr %17, align 8
    %19 = call ptr %18({ ptr, ptr, ptr, i32 } %9, ptr nonnull %5)
    %20 = call { ptr, ptr, ptr, i32 } %19({ ptr, ptr, ptr, i32 } %9, { ptr, ptr, ptr, i32 } %9, ptr nonnull %5)
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %20, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %20, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %20, 2
    %hash_coef_ptr.i.i21 = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i22 = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i23 = getelementptr i8, ptr %.fca.0.extract, i64 40
    %hash_coef.i.i24 = load i64, ptr %hash_coef_ptr.i.i21, align 4
    %tbl_size.i.i25 = load i64, ptr %tbl_size_ptr.i.i22, align 4
    %offset_tbl.i.i26 = load ptr, ptr %offset_tbl_ptr.i.i23, align 8
    %product.i.i.i27 = mul i64 %hash_coef.i.i24, 4189192806087951739
    %shifted.i.i.i28 = lshr i64 %product.i.i.i27, 32
    %xored.i.i.i29 = xor i64 %shifted.i.i.i28, %product.i.i.i27
    %hash.i.i.i30 = and i64 %xored.i.i.i29, %tbl_size.i.i25
    %offset_ptr.i.i31 = getelementptr i32, ptr %offset_tbl.i.i26, i64 %hash.i.i.i30
    %offset.i.i46 = load i32, ptr %offset_ptr.i.i31, align 4
    %21 = alloca { ptr, ptr, ptr, i32 }, align 8
    store ptr %.fca.0.extract, ptr %21, align 8
    %22 = getelementptr inbounds i8, ptr %21, i64 8
    store ptr %.fca.1.extract, ptr %22, align 8
    %23 = getelementptr inbounds i8, ptr %21, i64 16
    store ptr %.fca.2.extract, ptr %23, align 8
    %24 = getelementptr inbounds i8, ptr %21, i64 24
    store i32 %offset.i.i46, ptr %24, align 8
    %25 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %21)
    %26 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
    %27 = call ptr @llvm.invariant.start.p0(i64 184, ptr nonnull %.fca.0.extract5)
    br label %._crit_edge1
  
  ._crit_edge1:                                     ; preds = %._crit_edge, %4
    %28 = phi i32 [ %.pre118, %._crit_edge ], [ %offset.i.i46, %4 ]
    %29 = phi ptr [ %.pre117, %._crit_edge ], [ %.fca.2.extract, %4 ]
    %30 = phi ptr [ %.pre, %._crit_edge ], [ %.fca.1.extract, %4 ]
    %31 = insertvalue { ptr, ptr, ptr, i32 } %26, ptr %30, 1
    %32 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %29, 2
    %33 = insertvalue { ptr, ptr, ptr, i32 } %32, i32 %28, 3
    %sunkaddr = mul i64 %11, 8
    %sunkaddr1 = getelementptr i8, ptr %.fca.0.extract5, i64 %sunkaddr
    %34 = load ptr, ptr %sunkaddr1, align 8
    %35 = call ptr %34(ptr %.fca.1.extract7)
    %36 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
    %37 = call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %.fca.0.extract)
    %38 = sext i32 %28 to i64
    %sunkaddr2 = mul i64 %38, 8
    %sunkaddr3 = getelementptr i8, ptr %.fca.0.extract, i64 %sunkaddr2
    %sunkaddr4 = getelementptr i8, ptr %sunkaddr3, i64 8
    %39 = load ptr, ptr %sunkaddr4, align 8
    %40 = call ptr %39({ ptr, ptr, ptr, i32 } %33, ptr nonnull %5)
    %41 = call { ptr, i160 } %40({ ptr, ptr, ptr, i32 } %33, { ptr, ptr, ptr, i32 } %33, ptr nonnull %5)
    %.fca.0.extract13 = extractvalue { ptr, i160 } %41, 0
    %42 = icmp ne ptr %.fca.0.extract13, @nil_typ
    %43 = icmp ne ptr %.fca.0.extract13, null
    %.not19 = and i1 %42, %43
    br i1 %.not19, label %._crit_edge, label %.critedge
  
  ._crit_edge:                                      ; preds = %._crit_edge1
    %.fca.1.extract15 = extractvalue { ptr, i160 } %41, 1
    %hash_coef_ptr.i.i49 = getelementptr i8, ptr %.fca.0.extract13, i64 8
    %tbl_size_ptr.i.i50 = getelementptr i8, ptr %.fca.0.extract13, i64 16
    %offset_tbl_ptr.i.i51 = getelementptr i8, ptr %.fca.0.extract13, i64 40
    %hash_coef.i.i52 = load i64, ptr %hash_coef_ptr.i.i49, align 4
    %tbl_size.i.i53 = load i64, ptr %tbl_size_ptr.i.i50, align 4
    %offset_tbl.i.i54 = load ptr, ptr %offset_tbl_ptr.i.i51, align 8
    %product.i.i.i55 = mul i64 %hash_coef.i.i52, 3084208142191802847
    %shifted.i.i.i56 = lshr i64 %product.i.i.i55, 32
    %xored.i.i.i57 = xor i64 %shifted.i.i.i56, %product.i.i.i55
    %hash.i.i.i58 = and i64 %xored.i.i.i57, %tbl_size.i.i53
    %offset_ptr.i.i59 = getelementptr i32, ptr %offset_tbl.i.i54, i64 %hash.i.i.i58
    %offset.i.i60 = load i32, ptr %offset_ptr.i.i59, align 4
    %.sroa.7.8.insert.ext = zext i32 %offset.i.i60 to i160
    %.sroa.7.8.insert.shift = shl nuw i160 %.sroa.7.8.insert.ext, 128
    %44 = insertvalue { ptr, i160 } undef, ptr %.fca.0.extract13, 0
    %.sroa.391.8.insert.ext = and i160 %.fca.1.extract15, 340282366920938463463374607431768211455
    %.sroa.391.8.insert.insert = or disjoint i160 %.sroa.7.8.insert.shift, %.sroa.391.8.insert.ext
    %45 = insertvalue { ptr, i160 } %44, i160 %.sroa.391.8.insert.insert, 1
    call void %.fca.0.extract2({ ptr, i160 } %45)
    %sunkaddr5 = getelementptr inbounds i8, ptr %21, i64 8
    %.pre = load ptr, ptr %sunkaddr5, align 8
    %sunkaddr6 = getelementptr inbounds i8, ptr %21, i64 16
    %.pre117 = load ptr, ptr %sunkaddr6, align 8
    %sunkaddr7 = getelementptr inbounds i8, ptr %21, i64 24
    %.pre118 = load i32, ptr %sunkaddr7, align 8
    br label %._crit_edge1
  
  .critedge:                                        ; preds = %._crit_edge1
    ret void
  }
  
  define { ptr, i160 } @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, i160 } %3, { ptr } %4) {
    %const = bitcast i64 3084208142191802847 to i64
    %6 = alloca [0 x ptr], align 8
    %.fca.0.extract13 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract15 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %.fca.2.extract17 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract13, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract13, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract13, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, 5693646204635713916
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %.fca.1.extract9 = extractvalue { ptr, i160 } %3, 1
    %.sroa.5187.8.extract.trunc = trunc i160 %.fca.1.extract9 to i128
    %.fca.0.extract4 = extractvalue { ptr } %4, 0
    %7 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract13, 0
    %8 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %.fca.1.extract15, 1
    %9 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %.fca.2.extract17, 2
    %10 = insertvalue { ptr, ptr, ptr, i32 } %9, i32 %offset.i.i, 3
    %11 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract13)
    %12 = sext i32 %offset.i.i to i64
    %13 = getelementptr ptr, ptr %.fca.0.extract13, i64 %12
    %14 = load ptr, ptr %13, align 8
    %15 = tail call ptr %14(ptr %.fca.1.extract15)
    %16 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %6)
    %17 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract13)
    %18 = getelementptr i8, ptr %13, i64 8
    %19 = load ptr, ptr %18, align 8
    %20 = call ptr %19({ ptr, ptr, ptr, i32 } %10, ptr nonnull %6)
    %21 = call { ptr, ptr, ptr, i32 } %20({ ptr, ptr, ptr, i32 } %10, { ptr, ptr, ptr, i32 } %10, ptr nonnull %6)
    %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %21, 0
    %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %21, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %21, 2
    %hash_coef_ptr.i.i43 = getelementptr i8, ptr %.fca.0.extract2, i64 8
    %tbl_size_ptr.i.i44 = getelementptr i8, ptr %.fca.0.extract2, i64 16
    %offset_tbl_ptr.i.i45 = getelementptr i8, ptr %.fca.0.extract2, i64 40
    %hash_coef.i.i46 = load i64, ptr %hash_coef_ptr.i.i43, align 4
    %tbl_size.i.i47 = load i64, ptr %tbl_size_ptr.i.i44, align 4
    %offset_tbl.i.i48 = load ptr, ptr %offset_tbl_ptr.i.i45, align 8
    %product.i.i.i49 = mul i64 %hash_coef.i.i46, 4189192806087951739
    %shifted.i.i.i50 = lshr i64 %product.i.i.i49, 32
    %xored.i.i.i51 = xor i64 %shifted.i.i.i50, %product.i.i.i49
    %hash.i.i.i52 = and i64 %xored.i.i.i51, %tbl_size.i.i47
    %offset_ptr.i.i53 = getelementptr i32, ptr %offset_tbl.i.i48, i64 %hash.i.i.i52
    %offset.i.i68 = load i32, ptr %offset_ptr.i.i53, align 4
    %22 = alloca { ptr, ptr, ptr, i32 }, align 8
    store ptr %.fca.0.extract2, ptr %22, align 8
    %23 = getelementptr inbounds i8, ptr %22, i64 8
    store ptr %.fca.1.extract3, ptr %23, align 8
    %24 = getelementptr inbounds i8, ptr %22, i64 16
    store ptr %.fca.2.extract, ptr %24, align 8
    %25 = getelementptr inbounds i8, ptr %22, i64 24
    store i32 %offset.i.i68, ptr %25, align 8
    %26 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %22)
    %27 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract2, 0
    %28 = call ptr @llvm.invariant.start.p0(i64 184, ptr nonnull %.fca.0.extract13)
    br label %._crit_edge1
  
  ._crit_edge1:                                     ; preds = %._crit_edge, %5
    %29 = phi i32 [ %offset.i.i68, %5 ], [ %.pre208, %._crit_edge ]
    %30 = phi ptr [ %.fca.2.extract, %5 ], [ %.pre207, %._crit_edge ]
    %31 = phi ptr [ %.fca.1.extract3, %5 ], [ %.pre, %._crit_edge ]
    %.pn = phi { ptr, i160 } [ %3, %5 ], [ %49, %._crit_edge ]
    %.sroa.5187.sroa.0.0 = phi i128 [ %.sroa.5187.8.extract.trunc, %5 ], [ %.sroa.5187.8.extract.trunc188, %._crit_edge ]
    %.sroa.0185.0 = extractvalue { ptr, i160 } %.pn, 0
    %32 = insertvalue { ptr, ptr, ptr, i32 } %27, ptr %31, 1
    %33 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %30, 2
    %34 = insertvalue { ptr, ptr, ptr, i32 } %33, i32 %29, 3
    %sunkaddr = mul i64 %12, 8
    %sunkaddr1 = getelementptr i8, ptr %.fca.0.extract13, i64 %sunkaddr
    %35 = load ptr, ptr %sunkaddr1, align 8
    %36 = call ptr %35(ptr %.fca.1.extract15)
    %37 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %6)
    %38 = call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %.fca.0.extract2)
    %39 = sext i32 %29 to i64
    %sunkaddr2 = mul i64 %39, 8
    %sunkaddr3 = getelementptr i8, ptr %.fca.0.extract2, i64 %sunkaddr2
    %sunkaddr4 = getelementptr i8, ptr %sunkaddr3, i64 8
    %40 = load ptr, ptr %sunkaddr4, align 8
    %41 = call ptr %40({ ptr, ptr, ptr, i32 } %34, ptr nonnull %6)
    %42 = call { ptr, i160 } %41({ ptr, ptr, ptr, i32 } %34, { ptr, ptr, ptr, i32 } %34, ptr nonnull %6)
    %.fca.0.extract21 = extractvalue { ptr, i160 } %42, 0
    %43 = icmp ne ptr %.fca.0.extract21, @nil_typ
    %44 = icmp ne ptr %.fca.0.extract21, null
    %.not27 = and i1 %43, %44
    br i1 %.not27, label %._crit_edge, label %.critedge
  
  ._crit_edge:                                      ; preds = %._crit_edge1
    %.fca.1.extract23 = extractvalue { ptr, i160 } %42, 1
    %hash_coef_ptr.i.i71 = getelementptr i8, ptr %.fca.0.extract21, i64 8
    %tbl_size_ptr.i.i72 = getelementptr i8, ptr %.fca.0.extract21, i64 16
    %offset_tbl_ptr.i.i73 = getelementptr i8, ptr %.fca.0.extract21, i64 40
    %hash_coef.i.i74 = load i64, ptr %hash_coef_ptr.i.i71, align 4
    %tbl_size.i.i75 = load i64, ptr %tbl_size_ptr.i.i72, align 4
    %offset_tbl.i.i76 = load ptr, ptr %offset_tbl_ptr.i.i73, align 8
    %product.i.i.i77 = mul i64 %hash_coef.i.i74, %const
    %shifted.i.i.i78 = lshr i64 %product.i.i.i77, 32
    %xored.i.i.i79 = xor i64 %shifted.i.i.i78, %product.i.i.i77
    %hash.i.i.i80 = and i64 %xored.i.i.i79, %tbl_size.i.i75
    %offset_ptr.i.i81 = getelementptr i32, ptr %offset_tbl.i.i76, i64 %hash.i.i.i80
    %offset.i.i82 = load i32, ptr %offset_ptr.i.i81, align 4
    %hash_coef_ptr.i.i85 = getelementptr i8, ptr %.sroa.0185.0, i64 8
    %tbl_size_ptr.i.i86 = getelementptr i8, ptr %.sroa.0185.0, i64 16
    %offset_tbl_ptr.i.i87 = getelementptr i8, ptr %.sroa.0185.0, i64 40
    %hash_coef.i.i88 = load i64, ptr %hash_coef_ptr.i.i85, align 4
    %tbl_size.i.i89 = load i64, ptr %tbl_size_ptr.i.i86, align 4
    %offset_tbl.i.i90 = load ptr, ptr %offset_tbl_ptr.i.i87, align 8
    %product.i.i.i91 = mul i64 %hash_coef.i.i88, %const
    %shifted.i.i.i92 = lshr i64 %product.i.i.i91, 32
    %xored.i.i.i93 = xor i64 %shifted.i.i.i92, %product.i.i.i91
    %hash.i.i.i94 = and i64 %xored.i.i.i93, %tbl_size.i.i89
    %offset_ptr.i.i95 = getelementptr i32, ptr %offset_tbl.i.i90, i64 %hash.i.i.i94
    %offset.i.i96 = load i32, ptr %offset_ptr.i.i95, align 4
    %45 = insertvalue { ptr, i160 } undef, ptr %.sroa.0185.0, 0
    %.sroa.5164.8.insert.ext = zext i32 %offset.i.i96 to i160
    %.sroa.5164.8.insert.shift = shl nuw i160 %.sroa.5164.8.insert.ext, 128
    %.sroa.3163.8.insert.ext = zext i128 %.sroa.5187.sroa.0.0 to i160
    %.sroa.3163.8.insert.insert = or disjoint i160 %.sroa.5164.8.insert.shift, %.sroa.3163.8.insert.ext
    %46 = insertvalue { ptr, i160 } %45, i160 %.sroa.3163.8.insert.insert, 1
    %.sroa.7.8.insert.ext = zext i32 %offset.i.i82 to i160
    %.sroa.7.8.insert.shift = shl nuw i160 %.sroa.7.8.insert.ext, 128
    %47 = insertvalue { ptr, i160 } undef, ptr %.fca.0.extract21, 0
    %.sroa.3160.8.insert.ext = and i160 %.fca.1.extract23, 340282366920938463463374607431768211455
    %.sroa.3160.8.insert.insert = or disjoint i160 %.sroa.7.8.insert.shift, %.sroa.3160.8.insert.ext
    %48 = insertvalue { ptr, i160 } %47, i160 %.sroa.3160.8.insert.insert, 1
    %49 = call { ptr, i160 } %.fca.0.extract4({ ptr, i160 } %46, { ptr, i160 } %48)
    %.fca.1.extract = extractvalue { ptr, i160 } %49, 1
    %.sroa.5187.8.extract.trunc188 = trunc i160 %.fca.1.extract to i128
    %sunkaddr5 = getelementptr inbounds i8, ptr %22, i64 8
    %.pre = load ptr, ptr %sunkaddr5, align 8
    %sunkaddr6 = getelementptr inbounds i8, ptr %22, i64 16
    %.pre207 = load ptr, ptr %sunkaddr6, align 8
    %sunkaddr7 = getelementptr inbounds i8, ptr %22, i64 24
    %.pre208 = load i32, ptr %sunkaddr7, align 8
    br label %._crit_edge1
  
  .critedge:                                        ; preds = %._crit_edge1
    %hash_coef_ptr.i.i141 = getelementptr i8, ptr %.sroa.0185.0, i64 8
    %tbl_size_ptr.i.i142 = getelementptr i8, ptr %.sroa.0185.0, i64 16
    %offset_tbl_ptr.i.i143 = getelementptr i8, ptr %.sroa.0185.0, i64 40
    %hash_coef.i.i144 = load i64, ptr %hash_coef_ptr.i.i141, align 4
    %tbl_size.i.i145 = load i64, ptr %tbl_size_ptr.i.i142, align 4
    %offset_tbl.i.i146 = load ptr, ptr %offset_tbl_ptr.i.i143, align 8
    %product.i.i.i147 = mul i64 %hash_coef.i.i144, %const
    %shifted.i.i.i148 = lshr i64 %product.i.i.i147, 32
    %xored.i.i.i149 = xor i64 %shifted.i.i.i148, %product.i.i.i147
    %hash.i.i.i150 = and i64 %xored.i.i.i149, %tbl_size.i.i145
    %offset_ptr.i.i151 = getelementptr i32, ptr %offset_tbl.i.i146, i64 %hash.i.i.i150
    %offset.i.i152 = load i32, ptr %offset_ptr.i.i151, align 4
    %50 = insertvalue { ptr, i160 } undef, ptr %.sroa.0185.0, 0
    %.sroa.5.8.insert.ext = zext i32 %offset.i.i152 to i160
    %.sroa.5.8.insert.shift = shl nuw i160 %.sroa.5.8.insert.ext, 128
    %.sroa.3.8.insert.ext = zext i128 %.sroa.5187.sroa.0.0 to i160
    %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.5.8.insert.shift, %.sroa.3.8.insert.ext
    %51 = insertvalue { ptr, i160 } %50, i160 %.sroa.3.8.insert.insert, 1
    ret { ptr, i160 } %51
  }
  
  define noundef i1 @Iterable2_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr } %3) {
    %5 = alloca [0 x ptr], align 8
    %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %.fca.2.extract13 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, 5693646204635713916
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %.fca.0.extract6 = extractvalue { ptr } %3, 0
    %6 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract9, 0
    %7 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr %.fca.1.extract11, 1
    %8 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %.fca.2.extract13, 2
    %9 = insertvalue { ptr, ptr, ptr, i32 } %8, i32 %offset.i.i, 3
    %10 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract9)
    %11 = sext i32 %offset.i.i to i64
    %12 = getelementptr ptr, ptr %.fca.0.extract9, i64 %11
    %13 = load ptr, ptr %12, align 8
    %14 = tail call ptr %13(ptr %.fca.1.extract11)
    %15 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
    %16 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract9)
    %17 = getelementptr i8, ptr %12, i64 8
    %18 = load ptr, ptr %17, align 8
    %19 = call ptr %18({ ptr, ptr, ptr, i32 } %9, ptr nonnull %5)
    %20 = call { ptr, ptr, ptr, i32 } %19({ ptr, ptr, ptr, i32 } %9, { ptr, ptr, ptr, i32 } %9, ptr nonnull %5)
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %20, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %20, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %20, 2
    %hash_coef_ptr.i.i28 = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i29 = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i30 = getelementptr i8, ptr %.fca.0.extract, i64 40
    %hash_coef.i.i31 = load i64, ptr %hash_coef_ptr.i.i28, align 4
    %tbl_size.i.i32 = load i64, ptr %tbl_size_ptr.i.i29, align 4
    %offset_tbl.i.i33 = load ptr, ptr %offset_tbl_ptr.i.i30, align 8
    %product.i.i.i34 = mul i64 %hash_coef.i.i31, 4189192806087951739
    %shifted.i.i.i35 = lshr i64 %product.i.i.i34, 32
    %xored.i.i.i36 = xor i64 %shifted.i.i.i35, %product.i.i.i34
    %hash.i.i.i37 = and i64 %xored.i.i.i36, %tbl_size.i.i32
    %offset_ptr.i.i38 = getelementptr i32, ptr %offset_tbl.i.i33, i64 %hash.i.i.i37
    %offset.i.i53 = load i32, ptr %offset_ptr.i.i38, align 4
    %21 = alloca { ptr, ptr, ptr, i32 }, align 8
    store ptr %.fca.0.extract, ptr %21, align 8
    %22 = getelementptr inbounds i8, ptr %21, i64 8
    store ptr %.fca.1.extract, ptr %22, align 8
    %23 = getelementptr inbounds i8, ptr %21, i64 16
    store ptr %.fca.2.extract, ptr %23, align 8
    %24 = getelementptr inbounds i8, ptr %21, i64 24
    store i32 %offset.i.i53, ptr %24, align 8
    %25 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %21)
    %26 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
    %27 = call ptr @llvm.invariant.start.p0(i64 184, ptr nonnull %.fca.0.extract9)
    br label %28
  
  28:                                               ; preds = %45, %4
    %sunkaddr = getelementptr inbounds i8, ptr %21, i64 8
    %29 = load ptr, ptr %sunkaddr, align 8
    %30 = insertvalue { ptr, ptr, ptr, i32 } %26, ptr %29, 1
    %sunkaddr1 = getelementptr inbounds i8, ptr %21, i64 16
    %31 = load ptr, ptr %sunkaddr1, align 8
    %32 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %31, 2
    %sunkaddr2 = getelementptr inbounds i8, ptr %21, i64 24
    %33 = load i32, ptr %sunkaddr2, align 8
    %34 = insertvalue { ptr, ptr, ptr, i32 } %32, i32 %33, 3
    %sunkaddr3 = mul i64 %11, 8
    %sunkaddr4 = getelementptr i8, ptr %.fca.0.extract9, i64 %sunkaddr3
    %35 = load ptr, ptr %sunkaddr4, align 8
    %36 = call ptr %35(ptr %.fca.1.extract11)
    %37 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
    %38 = call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %.fca.0.extract)
    %39 = sext i32 %33 to i64
    %sunkaddr5 = mul i64 %39, 8
    %sunkaddr6 = getelementptr i8, ptr %.fca.0.extract, i64 %sunkaddr5
    %sunkaddr7 = getelementptr i8, ptr %sunkaddr6, i64 8
    %40 = load ptr, ptr %sunkaddr7, align 8
    %41 = call ptr %40({ ptr, ptr, ptr, i32 } %34, ptr nonnull %5)
    %42 = call { ptr, i160 } %41({ ptr, ptr, ptr, i32 } %34, { ptr, ptr, ptr, i32 } %34, ptr nonnull %5)
    %.fca.0.extract17 = extractvalue { ptr, i160 } %42, 0
    %43 = icmp eq ptr %.fca.0.extract17, @nil_typ
    %44 = icmp eq ptr %.fca.0.extract17, null
    %.not23.not = or i1 %43, %44
    br i1 %.not23.not, label %.critedge, label %45
  
  45:                                               ; preds = %28
    %.fca.1.extract19 = extractvalue { ptr, i160 } %42, 1
    %hash_coef_ptr.i.i56 = getelementptr i8, ptr %.fca.0.extract17, i64 8
    %tbl_size_ptr.i.i57 = getelementptr i8, ptr %.fca.0.extract17, i64 16
    %offset_tbl_ptr.i.i58 = getelementptr i8, ptr %.fca.0.extract17, i64 40
    %hash_coef.i.i59 = load i64, ptr %hash_coef_ptr.i.i56, align 4
    %tbl_size.i.i60 = load i64, ptr %tbl_size_ptr.i.i57, align 4
    %offset_tbl.i.i61 = load ptr, ptr %offset_tbl_ptr.i.i58, align 8
    %product.i.i.i62 = mul i64 %hash_coef.i.i59, 3084208142191802847
    %shifted.i.i.i63 = lshr i64 %product.i.i.i62, 32
    %xored.i.i.i64 = xor i64 %shifted.i.i.i63, %product.i.i.i62
    %hash.i.i.i65 = and i64 %xored.i.i.i64, %tbl_size.i.i60
    %offset_ptr.i.i66 = getelementptr i32, ptr %offset_tbl.i.i61, i64 %hash.i.i.i65
    %offset.i.i67 = load i32, ptr %offset_ptr.i.i66, align 4
    %.sroa.7.8.insert.ext = zext i32 %offset.i.i67 to i160
    %.sroa.7.8.insert.shift = shl nuw i160 %.sroa.7.8.insert.ext, 128
    %46 = insertvalue { ptr, i160 } undef, ptr %.fca.0.extract17, 0
    %.sroa.398.8.insert.ext = and i160 %.fca.1.extract19, 340282366920938463463374607431768211455
    %.sroa.398.8.insert.insert = or disjoint i160 %.sroa.7.8.insert.shift, %.sroa.398.8.insert.ext
    %47 = insertvalue { ptr, i160 } %46, i160 %.sroa.398.8.insert.insert, 1
    %48 = call i1 %.fca.0.extract6({ ptr, i160 } %47)
    br i1 %48, label %28, label %.critedge
  
  .critedge:                                        ; preds = %45, %28
    ret i1 %.not23.not
  }
  
  define noundef i1 @Iterable2_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr } %3) {
    %5 = alloca [0 x ptr], align 8
    %.fca.0.extract7 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %.fca.2.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract7, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract7, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract7, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, 5693646204635713916
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %.fca.0.extract4 = extractvalue { ptr } %3, 0
    %6 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract7, 0
    %7 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr %.fca.1.extract9, 1
    %8 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %.fca.2.extract11, 2
    %9 = insertvalue { ptr, ptr, ptr, i32 } %8, i32 %offset.i.i, 3
    %10 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract7)
    %11 = sext i32 %offset.i.i to i64
    %12 = getelementptr ptr, ptr %.fca.0.extract7, i64 %11
    %13 = load ptr, ptr %12, align 8
    %14 = tail call ptr %13(ptr %.fca.1.extract9)
    %15 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
    %16 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract7)
    %17 = getelementptr i8, ptr %12, i64 8
    %18 = load ptr, ptr %17, align 8
    %19 = call ptr %18({ ptr, ptr, ptr, i32 } %9, ptr nonnull %5)
    %20 = call { ptr, ptr, ptr, i32 } %19({ ptr, ptr, ptr, i32 } %9, { ptr, ptr, ptr, i32 } %9, ptr nonnull %5)
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %20, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %20, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %20, 2
    %hash_coef_ptr.i.i23 = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i24 = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i25 = getelementptr i8, ptr %.fca.0.extract, i64 40
    %hash_coef.i.i26 = load i64, ptr %hash_coef_ptr.i.i23, align 4
    %tbl_size.i.i27 = load i64, ptr %tbl_size_ptr.i.i24, align 4
    %offset_tbl.i.i28 = load ptr, ptr %offset_tbl_ptr.i.i25, align 8
    %product.i.i.i29 = mul i64 %hash_coef.i.i26, 4189192806087951739
    %shifted.i.i.i30 = lshr i64 %product.i.i.i29, 32
    %xored.i.i.i31 = xor i64 %shifted.i.i.i30, %product.i.i.i29
    %hash.i.i.i32 = and i64 %xored.i.i.i31, %tbl_size.i.i27
    %offset_ptr.i.i33 = getelementptr i32, ptr %offset_tbl.i.i28, i64 %hash.i.i.i32
    %offset.i.i48 = load i32, ptr %offset_ptr.i.i33, align 4
    %21 = alloca { ptr, ptr, ptr, i32 }, align 8
    store ptr %.fca.0.extract, ptr %21, align 8
    %22 = getelementptr inbounds i8, ptr %21, i64 8
    store ptr %.fca.1.extract, ptr %22, align 8
    %23 = getelementptr inbounds i8, ptr %21, i64 16
    store ptr %.fca.2.extract, ptr %23, align 8
    %24 = getelementptr inbounds i8, ptr %21, i64 24
    store i32 %offset.i.i48, ptr %24, align 8
    %25 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %21)
    %26 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
    %27 = call ptr @llvm.invariant.start.p0(i64 184, ptr nonnull %.fca.0.extract7)
    br label %28
  
  28:                                               ; preds = %45, %4
    %sunkaddr = getelementptr inbounds i8, ptr %21, i64 8
    %29 = load ptr, ptr %sunkaddr, align 8
    %30 = insertvalue { ptr, ptr, ptr, i32 } %26, ptr %29, 1
    %sunkaddr1 = getelementptr inbounds i8, ptr %21, i64 16
    %31 = load ptr, ptr %sunkaddr1, align 8
    %32 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %31, 2
    %sunkaddr2 = getelementptr inbounds i8, ptr %21, i64 24
    %33 = load i32, ptr %sunkaddr2, align 8
    %34 = insertvalue { ptr, ptr, ptr, i32 } %32, i32 %33, 3
    %sunkaddr3 = mul i64 %11, 8
    %sunkaddr4 = getelementptr i8, ptr %.fca.0.extract7, i64 %sunkaddr3
    %35 = load ptr, ptr %sunkaddr4, align 8
    %36 = call ptr %35(ptr %.fca.1.extract9)
    %37 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
    %38 = call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %.fca.0.extract)
    %39 = sext i32 %33 to i64
    %sunkaddr5 = mul i64 %39, 8
    %sunkaddr6 = getelementptr i8, ptr %.fca.0.extract, i64 %sunkaddr5
    %sunkaddr7 = getelementptr i8, ptr %sunkaddr6, i64 8
    %40 = load ptr, ptr %sunkaddr7, align 8
    %41 = call ptr %40({ ptr, ptr, ptr, i32 } %34, ptr nonnull %5)
    %42 = call { ptr, i160 } %41({ ptr, ptr, ptr, i32 } %34, { ptr, ptr, ptr, i32 } %34, ptr nonnull %5)
    %.fca.0.extract15 = extractvalue { ptr, i160 } %42, 0
    %43 = icmp ne ptr %.fca.0.extract15, @nil_typ
    %44 = icmp ne ptr %.fca.0.extract15, null
    %.not21 = and i1 %43, %44
    br i1 %.not21, label %45, label %.critedge
  
  45:                                               ; preds = %28
    %.fca.1.extract17 = extractvalue { ptr, i160 } %42, 1
    %hash_coef_ptr.i.i51 = getelementptr i8, ptr %.fca.0.extract15, i64 8
    %tbl_size_ptr.i.i52 = getelementptr i8, ptr %.fca.0.extract15, i64 16
    %offset_tbl_ptr.i.i53 = getelementptr i8, ptr %.fca.0.extract15, i64 40
    %hash_coef.i.i54 = load i64, ptr %hash_coef_ptr.i.i51, align 4
    %tbl_size.i.i55 = load i64, ptr %tbl_size_ptr.i.i52, align 4
    %offset_tbl.i.i56 = load ptr, ptr %offset_tbl_ptr.i.i53, align 8
    %product.i.i.i57 = mul i64 %hash_coef.i.i54, 3084208142191802847
    %shifted.i.i.i58 = lshr i64 %product.i.i.i57, 32
    %xored.i.i.i59 = xor i64 %shifted.i.i.i58, %product.i.i.i57
    %hash.i.i.i60 = and i64 %xored.i.i.i59, %tbl_size.i.i55
    %offset_ptr.i.i61 = getelementptr i32, ptr %offset_tbl.i.i56, i64 %hash.i.i.i60
    %offset.i.i62 = load i32, ptr %offset_ptr.i.i61, align 4
    %.sroa.7.8.insert.ext = zext i32 %offset.i.i62 to i160
    %.sroa.7.8.insert.shift = shl nuw i160 %.sroa.7.8.insert.ext, 128
    %46 = insertvalue { ptr, i160 } undef, ptr %.fca.0.extract15, 0
    %.sroa.393.8.insert.ext = and i160 %.fca.1.extract17, 340282366920938463463374607431768211455
    %.sroa.393.8.insert.insert = or disjoint i160 %.sroa.7.8.insert.shift, %.sroa.393.8.insert.ext
    %47 = insertvalue { ptr, i160 } %46, i160 %.sroa.393.8.insert.insert, 1
    %48 = call i1 %.fca.0.extract4({ ptr, i160 } %47)
    br i1 %48, label %.critedge, label %28
  
  .critedge:                                        ; preds = %45, %28
    ret i1 %.not21
  }
  
  define { ptr, ptr, ptr, i32 } @Iterable2_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readonly %2, { ptr } %3) {
    %const = bitcast i64 5693646204635713916 to i64
    %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, %const
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %5 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract1)
    %6 = sext i32 %offset.i.i to i64
    %7 = getelementptr ptr, ptr %.fca.0.extract1, i64 %6
    %8 = load ptr, ptr %7, align 8
    %9 = tail call ptr %8(ptr %.fca.1.extract)
    %10 = load ptr, ptr %2, align 8
    %11 = getelementptr i8, ptr %10, i64 8
    %12 = load ptr, ptr %11, align 8
    %result.i = tail call noalias dereferenceable_or_null(56) ptr @bump_malloc_inner(i64 noundef 56, ptr nonnull @current_ptr) #26
    %13 = getelementptr i8, ptr %result.i, i64 40
    store ptr %9, ptr %13, align 8
    %14 = getelementptr i8, ptr %result.i, i64 48
    store ptr %12, ptr %14, align 8
    %15 = tail call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %13)
    %16 = insertvalue { ptr, ptr, ptr, i32 } { ptr @MapIterable2, ptr undef, ptr undef, i32 undef }, ptr %result.i, 1
    %17 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr undef, 2
    %18 = insertvalue { ptr, ptr, ptr, i32 } %17, i32 7, 3
    %19 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract1)
    %20 = load ptr, ptr %7, align 8
    %21 = tail call ptr %20(ptr %.fca.1.extract)
    %22 = tail call ptr @llvm.invariant.start.p0(i64 408, ptr nonnull @MapIterable2)
    %hash_coef.i.i60 = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i61 = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i62 = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i63 = mul i64 %hash_coef.i.i60, %const
    %shifted.i.i.i64 = lshr i64 %product.i.i.i63, 32
    %xored.i.i.i65 = xor i64 %shifted.i.i.i64, %product.i.i.i63
    %hash.i.i.i66 = and i64 %xored.i.i.i65, %tbl_size.i.i61
    %offset_ptr.i.i67 = getelementptr i32, ptr %offset_tbl.i.i62, i64 %hash.i.i.i66
    %offset.i.i55 = load i32, ptr %offset_ptr.i.i67, align 4
    store ptr %.fca.0.extract1, ptr %result.i, align 8
    %23 = getelementptr i8, ptr %result.i, i64 8
    store ptr %.fca.1.extract, ptr %23, align 8
    %24 = getelementptr i8, ptr %result.i, i64 16
    store ptr %.fca.2.extract, ptr %24, align 8
    %25 = getelementptr i8, ptr %result.i, i64 24
    store i32 %offset.i.i55, ptr %25, align 4
    %26 = tail call ptr @llvm.invariant.start.p0(i64 408, ptr nonnull @MapIterable2)
    %27 = getelementptr i8, ptr %result.i, i64 32
    %.fca.0.extract.i = extractvalue { ptr } %3, 0
    store ptr %.fca.0.extract.i, ptr %27, align 8
    ret { ptr, ptr, ptr, i32 } %18
  }
  
  define { ptr, ptr, ptr, i32 } @Iterable2_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr } %3) {
    %const = bitcast i64 5693646204635713916 to i64
    %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, %const
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %5 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract1)
    %6 = sext i32 %offset.i.i to i64
    %7 = getelementptr ptr, ptr %.fca.0.extract1, i64 %6
    %8 = load ptr, ptr %7, align 8
    %9 = tail call ptr %8(ptr %.fca.1.extract)
    %result.i = tail call noalias dereferenceable_or_null(48) ptr @bump_malloc_inner(i64 noundef 48, ptr nonnull @current_ptr) #26
    %10 = getelementptr i8, ptr %result.i, i64 40
    store ptr %9, ptr %10, align 8
    %11 = tail call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %10)
    %12 = insertvalue { ptr, ptr, ptr, i32 } { ptr @FilterIterable2, ptr undef, ptr undef, i32 undef }, ptr %result.i, 1
    %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr undef, 2
    %14 = insertvalue { ptr, ptr, ptr, i32 } %13, i32 7, 3
    %15 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract1)
    %16 = load ptr, ptr %7, align 8
    %17 = tail call ptr %16(ptr %.fca.1.extract)
    %18 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr nonnull @FilterIterable2)
    %hash_coef.i.i60 = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i61 = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i62 = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i63 = mul i64 %hash_coef.i.i60, %const
    %shifted.i.i.i64 = lshr i64 %product.i.i.i63, 32
    %xored.i.i.i65 = xor i64 %shifted.i.i.i64, %product.i.i.i63
    %hash.i.i.i66 = and i64 %xored.i.i.i65, %tbl_size.i.i61
    %offset_ptr.i.i67 = getelementptr i32, ptr %offset_tbl.i.i62, i64 %hash.i.i.i66
    %offset.i.i55 = load i32, ptr %offset_ptr.i.i67, align 4
    store ptr %.fca.0.extract1, ptr %result.i, align 8
    %19 = getelementptr i8, ptr %result.i, i64 8
    store ptr %.fca.1.extract, ptr %19, align 8
    %20 = getelementptr i8, ptr %result.i, i64 16
    store ptr %.fca.2.extract, ptr %20, align 8
    %21 = getelementptr i8, ptr %result.i, i64 24
    store i32 %offset.i.i55, ptr %21, align 4
    %22 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr nonnull @FilterIterable2)
    %23 = getelementptr i8, ptr %result.i, i64 32
    %.fca.0.extract.i = extractvalue { ptr } %3, 0
    store ptr %.fca.0.extract.i, ptr %23, align 8
    ret { ptr, ptr, ptr, i32 } %14
  }
  
  define { ptr, ptr, ptr, i32 } @Iterable2_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
    %const = bitcast i64 5693646204635713916 to i64
    %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, %const
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
    %hash_coef_ptr.i.i10 = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i11 = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i12 = getelementptr i8, ptr %.fca.0.extract, i64 40
    %5 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract1)
    %6 = sext i32 %offset.i.i to i64
    %7 = getelementptr ptr, ptr %.fca.0.extract1, i64 %6
    %8 = load ptr, ptr %7, align 8
    %9 = tail call ptr %8(ptr %.fca.1.extract3)
    %result.i = tail call noalias dereferenceable_or_null(72) ptr @bump_malloc_inner(i64 noundef 72, ptr nonnull @current_ptr) #26
    %10 = getelementptr i8, ptr %result.i, i64 64
    store ptr %9, ptr %10, align 8
    %11 = tail call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %10)
    %12 = insertvalue { ptr, ptr, ptr, i32 } { ptr @ChainIterable2, ptr undef, ptr undef, i32 undef }, ptr %result.i, 1
    %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr undef, 2
    %14 = insertvalue { ptr, ptr, ptr, i32 } %13, i32 7, 3
    %15 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract1)
    %16 = load ptr, ptr %7, align 8
    %17 = tail call ptr %16(ptr %.fca.1.extract3)
    %18 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr nonnull @ChainIterable2)
    %hash_coef.i.i131 = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i132 = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i133 = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i134 = mul i64 %hash_coef.i.i131, %const
    %shifted.i.i.i135 = lshr i64 %product.i.i.i134, 32
    %xored.i.i.i136 = xor i64 %shifted.i.i.i135, %product.i.i.i134
    %hash.i.i.i137 = and i64 %xored.i.i.i136, %tbl_size.i.i132
    %offset_ptr.i.i138 = getelementptr i32, ptr %offset_tbl.i.i133, i64 %hash.i.i.i137
    %offset.i.i125 = load i32, ptr %offset_ptr.i.i138, align 4
    store ptr %.fca.0.extract1, ptr %result.i, align 8
    %19 = getelementptr i8, ptr %result.i, i64 8
    store ptr %.fca.1.extract3, ptr %19, align 8
    %20 = getelementptr i8, ptr %result.i, i64 16
    store ptr %.fca.2.extract5, ptr %20, align 8
    %21 = getelementptr i8, ptr %result.i, i64 24
    store i32 %offset.i.i125, ptr %21, align 4
    %hash_coef.i.i103 = load i64, ptr %hash_coef_ptr.i.i10, align 4
    %tbl_size.i.i104 = load i64, ptr %tbl_size_ptr.i.i11, align 4
    %offset_tbl.i.i105 = load ptr, ptr %offset_tbl_ptr.i.i12, align 8
    %product.i.i.i106 = mul i64 %hash_coef.i.i103, %const
    %shifted.i.i.i107 = lshr i64 %product.i.i.i106, 32
    %xored.i.i.i108 = xor i64 %shifted.i.i.i107, %product.i.i.i106
    %hash.i.i.i109 = and i64 %xored.i.i.i108, %tbl_size.i.i104
    %offset_ptr.i.i110 = getelementptr i32, ptr %offset_tbl.i.i105, i64 %hash.i.i.i109
    %offset.i.i98 = load i32, ptr %offset_ptr.i.i110, align 4
    %22 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr nonnull @ChainIterable2)
    %23 = getelementptr i8, ptr %result.i, i64 32
    store ptr %.fca.0.extract, ptr %23, align 8
    %24 = getelementptr i8, ptr %result.i, i64 40
    store ptr %.fca.1.extract, ptr %24, align 8
    %25 = getelementptr i8, ptr %result.i, i64 48
    store ptr %.fca.2.extract, ptr %25, align 8
    %26 = getelementptr i8, ptr %result.i, i64 56
    store i32 %offset.i.i98, ptr %26, align 4
    ret { ptr, ptr, ptr, i32 } %14
  }
  
  define { ptr, ptr, ptr, i32 } @Iterable2_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
    %const = bitcast i64 5693646204635713916 to i64
    %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, %const
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
    %hash_coef_ptr.i.i10 = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i11 = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i12 = getelementptr i8, ptr %.fca.0.extract, i64 40
    %5 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract1)
    %6 = sext i32 %offset.i.i to i64
    %7 = getelementptr ptr, ptr %.fca.0.extract1, i64 %6
    %8 = load ptr, ptr %7, align 8
    %9 = tail call ptr %8(ptr %.fca.1.extract3)
    %result.i = tail call noalias dereferenceable_or_null(72) ptr @bump_malloc_inner(i64 noundef 72, ptr nonnull @current_ptr) #26
    %10 = getelementptr i8, ptr %result.i, i64 64
    store ptr %9, ptr %10, align 8
    %11 = tail call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %10)
    %12 = insertvalue { ptr, ptr, ptr, i32 } { ptr @InterleaveIterable2, ptr undef, ptr undef, i32 undef }, ptr %result.i, 1
    %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr undef, 2
    %14 = insertvalue { ptr, ptr, ptr, i32 } %13, i32 7, 3
    %15 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract1)
    %16 = load ptr, ptr %7, align 8
    %17 = tail call ptr %16(ptr %.fca.1.extract3)
    %18 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr nonnull @InterleaveIterable2)
    %hash_coef.i.i131 = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i132 = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i133 = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i134 = mul i64 %hash_coef.i.i131, %const
    %shifted.i.i.i135 = lshr i64 %product.i.i.i134, 32
    %xored.i.i.i136 = xor i64 %shifted.i.i.i135, %product.i.i.i134
    %hash.i.i.i137 = and i64 %xored.i.i.i136, %tbl_size.i.i132
    %offset_ptr.i.i138 = getelementptr i32, ptr %offset_tbl.i.i133, i64 %hash.i.i.i137
    %offset.i.i125 = load i32, ptr %offset_ptr.i.i138, align 4
    store ptr %.fca.0.extract1, ptr %result.i, align 8
    %19 = getelementptr i8, ptr %result.i, i64 8
    store ptr %.fca.1.extract3, ptr %19, align 8
    %20 = getelementptr i8, ptr %result.i, i64 16
    store ptr %.fca.2.extract5, ptr %20, align 8
    %21 = getelementptr i8, ptr %result.i, i64 24
    store i32 %offset.i.i125, ptr %21, align 4
    %hash_coef.i.i103 = load i64, ptr %hash_coef_ptr.i.i10, align 4
    %tbl_size.i.i104 = load i64, ptr %tbl_size_ptr.i.i11, align 4
    %offset_tbl.i.i105 = load ptr, ptr %offset_tbl_ptr.i.i12, align 8
    %product.i.i.i106 = mul i64 %hash_coef.i.i103, %const
    %shifted.i.i.i107 = lshr i64 %product.i.i.i106, 32
    %xored.i.i.i108 = xor i64 %shifted.i.i.i107, %product.i.i.i106
    %hash.i.i.i109 = and i64 %xored.i.i.i108, %tbl_size.i.i104
    %offset_ptr.i.i110 = getelementptr i32, ptr %offset_tbl.i.i105, i64 %hash.i.i.i109
    %offset.i.i98 = load i32, ptr %offset_ptr.i.i110, align 4
    %22 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr nonnull @InterleaveIterable2)
    %23 = getelementptr i8, ptr %result.i, i64 32
    store ptr %.fca.0.extract, ptr %23, align 8
    %24 = getelementptr i8, ptr %result.i, i64 40
    store ptr %.fca.1.extract, ptr %24, align 8
    %25 = getelementptr i8, ptr %result.i, i64 48
    store ptr %.fca.2.extract, ptr %25, align 8
    %26 = getelementptr i8, ptr %result.i, i64 56
    store i32 %offset.i.i98, ptr %26, align 4
    ret { ptr, ptr, ptr, i32 } %14
  }
  
  define { ptr, ptr, ptr, i32 } @Iterable2_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readonly %2, { ptr, ptr, ptr, i32 } %3) {
    %const = bitcast i64 5693646204635713916 to i64
    %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, %const
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
    %hash_coef_ptr.i.i10 = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i11 = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i12 = getelementptr i8, ptr %.fca.0.extract, i64 40
    %5 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract1)
    %6 = sext i32 %offset.i.i to i64
    %7 = getelementptr ptr, ptr %.fca.0.extract1, i64 %6
    %8 = load ptr, ptr %7, align 8
    %9 = tail call ptr %8(ptr %.fca.1.extract3)
    %10 = load ptr, ptr %2, align 8
    %11 = getelementptr i8, ptr %10, i64 8
    %12 = load ptr, ptr %11, align 8
    %result.i = tail call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #26
    %13 = getelementptr i8, ptr %result.i, i64 16
    store ptr %12, ptr %13, align 8
    %14 = getelementptr i8, ptr %result.i, i64 8
    store ptr %9, ptr %14, align 8
    store ptr @Pair, ptr %result.i, align 8
    %result.i23 = tail call noalias dereferenceable_or_null(88) ptr @bump_malloc_inner(i64 noundef 88, ptr nonnull @current_ptr) #26
    %15 = getelementptr i8, ptr %result.i23, i64 64
    store ptr %9, ptr %15, align 8
    %16 = getelementptr i8, ptr %result.i23, i64 72
    store ptr %12, ptr %16, align 8
    %17 = getelementptr i8, ptr %result.i23, i64 80
    store ptr %result.i, ptr %17, align 8
    %18 = tail call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %15)
    %19 = insertvalue { ptr, ptr, ptr, i32 } { ptr @ZipIterable2, ptr undef, ptr undef, i32 undef }, ptr %result.i23, 1
    %20 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr undef, 2
    %21 = insertvalue { ptr, ptr, ptr, i32 } %20, i32 7, 3
    %22 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract1)
    %23 = load ptr, ptr %7, align 8
    %24 = tail call ptr %23(ptr %.fca.1.extract3)
    %25 = tail call ptr @llvm.invariant.start.p0(i64 416, ptr nonnull @ZipIterable2)
    %hash_coef.i.i132 = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i133 = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i134 = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i135 = mul i64 %hash_coef.i.i132, %const
    %shifted.i.i.i136 = lshr i64 %product.i.i.i135, 32
    %xored.i.i.i137 = xor i64 %shifted.i.i.i136, %product.i.i.i135
    %hash.i.i.i138 = and i64 %xored.i.i.i137, %tbl_size.i.i133
    %offset_ptr.i.i139 = getelementptr i32, ptr %offset_tbl.i.i134, i64 %hash.i.i.i138
    %offset.i.i126 = load i32, ptr %offset_ptr.i.i139, align 4
    store ptr %.fca.0.extract1, ptr %result.i23, align 8
    %26 = getelementptr i8, ptr %result.i23, i64 8
    store ptr %.fca.1.extract3, ptr %26, align 8
    %27 = getelementptr i8, ptr %result.i23, i64 16
    store ptr %.fca.2.extract5, ptr %27, align 8
    %28 = getelementptr i8, ptr %result.i23, i64 24
    store i32 %offset.i.i126, ptr %28, align 4
    %hash_coef.i.i104 = load i64, ptr %hash_coef_ptr.i.i10, align 4
    %tbl_size.i.i105 = load i64, ptr %tbl_size_ptr.i.i11, align 4
    %offset_tbl.i.i106 = load ptr, ptr %offset_tbl_ptr.i.i12, align 8
    %product.i.i.i107 = mul i64 %hash_coef.i.i104, %const
    %shifted.i.i.i108 = lshr i64 %product.i.i.i107, 32
    %xored.i.i.i109 = xor i64 %shifted.i.i.i108, %product.i.i.i107
    %hash.i.i.i110 = and i64 %xored.i.i.i109, %tbl_size.i.i105
    %offset_ptr.i.i111 = getelementptr i32, ptr %offset_tbl.i.i106, i64 %hash.i.i.i110
    %offset.i.i99 = load i32, ptr %offset_ptr.i.i111, align 4
    %29 = tail call ptr @llvm.invariant.start.p0(i64 416, ptr nonnull @ZipIterable2)
    %30 = getelementptr i8, ptr %result.i23, i64 32
    store ptr %.fca.0.extract, ptr %30, align 8
    %31 = getelementptr i8, ptr %result.i23, i64 40
    store ptr %.fca.1.extract, ptr %31, align 8
    %32 = getelementptr i8, ptr %result.i23, i64 48
    store ptr %.fca.2.extract, ptr %32, align 8
    %33 = getelementptr i8, ptr %result.i23, i64 56
    store i32 %offset.i.i99, ptr %33, align 4
    ret { ptr, ptr, ptr, i32 } %21
  }
  
  define { ptr, ptr, ptr, i32 } @Iterable2_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readonly %2, { ptr, ptr, ptr, i32 } %3) {
    %const = bitcast i64 5693646204635713916 to i64
    %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, %const
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
    %hash_coef_ptr.i.i10 = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i11 = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i12 = getelementptr i8, ptr %.fca.0.extract, i64 40
    %5 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract1)
    %6 = sext i32 %offset.i.i to i64
    %7 = getelementptr ptr, ptr %.fca.0.extract1, i64 %6
    %8 = load ptr, ptr %7, align 8
    %9 = tail call ptr %8(ptr %.fca.1.extract3)
    %10 = load ptr, ptr %2, align 8
    %11 = getelementptr i8, ptr %10, i64 8
    %12 = load ptr, ptr %11, align 8
    %result.i = tail call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #26
    %13 = getelementptr i8, ptr %result.i, i64 16
    store ptr %12, ptr %13, align 8
    %14 = getelementptr i8, ptr %result.i, i64 8
    store ptr %9, ptr %14, align 8
    store ptr @Pair, ptr %result.i, align 8
    %result.i23 = tail call noalias dereferenceable_or_null(88) ptr @bump_malloc_inner(i64 noundef 88, ptr nonnull @current_ptr) #26
    %15 = getelementptr i8, ptr %result.i23, i64 64
    store ptr %9, ptr %15, align 8
    %16 = getelementptr i8, ptr %result.i23, i64 72
    store ptr %12, ptr %16, align 8
    %17 = getelementptr i8, ptr %result.i23, i64 80
    store ptr %result.i, ptr %17, align 8
    %18 = tail call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %15)
    %19 = insertvalue { ptr, ptr, ptr, i32 } { ptr @ProductIterable2, ptr undef, ptr undef, i32 undef }, ptr %result.i23, 1
    %20 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr undef, 2
    %21 = insertvalue { ptr, ptr, ptr, i32 } %20, i32 7, 3
    %22 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract1)
    %23 = load ptr, ptr %7, align 8
    %24 = tail call ptr %23(ptr %.fca.1.extract3)
    %25 = tail call ptr @llvm.invariant.start.p0(i64 416, ptr nonnull @ProductIterable2)
    %hash_coef.i.i132 = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i133 = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i134 = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i135 = mul i64 %hash_coef.i.i132, %const
    %shifted.i.i.i136 = lshr i64 %product.i.i.i135, 32
    %xored.i.i.i137 = xor i64 %shifted.i.i.i136, %product.i.i.i135
    %hash.i.i.i138 = and i64 %xored.i.i.i137, %tbl_size.i.i133
    %offset_ptr.i.i139 = getelementptr i32, ptr %offset_tbl.i.i134, i64 %hash.i.i.i138
    %offset.i.i126 = load i32, ptr %offset_ptr.i.i139, align 4
    store ptr %.fca.0.extract1, ptr %result.i23, align 8
    %26 = getelementptr i8, ptr %result.i23, i64 8
    store ptr %.fca.1.extract3, ptr %26, align 8
    %27 = getelementptr i8, ptr %result.i23, i64 16
    store ptr %.fca.2.extract5, ptr %27, align 8
    %28 = getelementptr i8, ptr %result.i23, i64 24
    store i32 %offset.i.i126, ptr %28, align 4
    %hash_coef.i.i104 = load i64, ptr %hash_coef_ptr.i.i10, align 4
    %tbl_size.i.i105 = load i64, ptr %tbl_size_ptr.i.i11, align 4
    %offset_tbl.i.i106 = load ptr, ptr %offset_tbl_ptr.i.i12, align 8
    %product.i.i.i107 = mul i64 %hash_coef.i.i104, %const
    %shifted.i.i.i108 = lshr i64 %product.i.i.i107, 32
    %xored.i.i.i109 = xor i64 %shifted.i.i.i108, %product.i.i.i107
    %hash.i.i.i110 = and i64 %xored.i.i.i109, %tbl_size.i.i105
    %offset_ptr.i.i111 = getelementptr i32, ptr %offset_tbl.i.i106, i64 %hash.i.i.i110
    %offset.i.i99 = load i32, ptr %offset_ptr.i.i111, align 4
    %29 = tail call ptr @llvm.invariant.start.p0(i64 416, ptr nonnull @ProductIterable2)
    %30 = getelementptr i8, ptr %result.i23, i64 32
    store ptr %.fca.0.extract, ptr %30, align 8
    %31 = getelementptr i8, ptr %result.i23, i64 40
    store ptr %.fca.1.extract, ptr %31, align 8
    %32 = getelementptr i8, ptr %result.i23, i64 48
    store ptr %.fca.2.extract, ptr %32, align 8
    %33 = getelementptr i8, ptr %result.i23, i64 56
    store i32 %offset.i.i99, ptr %33, align 4
    ret { ptr, ptr, ptr, i32 } %21
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define ptr @ProductIterable2_field_ProductIterable2_0(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 16
    %3 = load ptr, ptr %2, align 8
    ret ptr %3
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define ptr @ProductIterable2_field_ProductIterable2_1(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 24
    %3 = load ptr, ptr %2, align 8
    ret ptr %3
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define ptr @ProductIterable2_field_ProductIterable2_2(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 32
    %3 = load ptr, ptr %2, align 8
    ret ptr %3
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @ProductIterable2_B_init_firstIterable2T_secondIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 192
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @ProductIterable2_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 200
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @ProductIterable2_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 208
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @ProductIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 216
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @ProductIterable2_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 224
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @ProductIterable2_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 232
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @ProductIterable2_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 240
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @ProductIterable2_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 248
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @ProductIterable2_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 256
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @ProductIterable2_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 264
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @ProductIterable2_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 272
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @ProductIterable2_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 280
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  define void @ProductIterable2_init_firstIterable2T_secondIterable2U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
    %const = bitcast i64 5693646204635713916 to i64
    %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, 7827074759551300494
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
    %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
    %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
    %hash_coef_ptr.i.i18 = getelementptr i8, ptr %.fca.0.extract1, i64 8
    %tbl_size_ptr.i.i19 = getelementptr i8, ptr %.fca.0.extract1, i64 16
    %offset_tbl_ptr.i.i20 = getelementptr i8, ptr %.fca.0.extract1, i64 40
    %hash_coef.i.i21 = load i64, ptr %hash_coef_ptr.i.i18, align 4
    %tbl_size.i.i22 = load i64, ptr %tbl_size_ptr.i.i19, align 4
    %offset_tbl.i.i23 = load ptr, ptr %offset_tbl_ptr.i.i20, align 8
    %product.i.i.i24 = mul i64 %hash_coef.i.i21, %const
    %shifted.i.i.i25 = lshr i64 %product.i.i.i24, 32
    %xored.i.i.i26 = xor i64 %shifted.i.i.i25, %product.i.i.i24
    %hash.i.i.i27 = and i64 %xored.i.i.i26, %tbl_size.i.i22
    %offset_ptr.i.i28 = getelementptr i32, ptr %offset_tbl.i.i23, i64 %hash.i.i.i27
    %offset.i.i43 = load i32, ptr %offset_ptr.i.i28, align 4
    %6 = tail call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract9)
    %7 = sext i32 %offset.i.i to i64
    %8 = getelementptr ptr, ptr %.fca.0.extract9, i64 %7
    %9 = load ptr, ptr %8, align 8
    %10 = getelementptr i8, ptr %9, i64 8
    %11 = load ptr, ptr %10, align 8
    %12 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
    %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.1.extract3, 1
    %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.2.extract5, 2
    %15 = insertvalue { ptr, ptr, ptr, i32 } %14, i32 %offset.i.i43, 3
    tail call void %11(ptr %.fca.1.extract11, { ptr, ptr, ptr, i32 } %15)
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 2
    %hash_coef_ptr.i.i46 = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i47 = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i48 = getelementptr i8, ptr %.fca.0.extract, i64 40
    %hash_coef.i.i49 = load i64, ptr %hash_coef_ptr.i.i46, align 4
    %tbl_size.i.i50 = load i64, ptr %tbl_size_ptr.i.i47, align 4
    %offset_tbl.i.i51 = load ptr, ptr %offset_tbl_ptr.i.i48, align 8
    %product.i.i.i52 = mul i64 %hash_coef.i.i49, %const
    %shifted.i.i.i53 = lshr i64 %product.i.i.i52, 32
    %xored.i.i.i54 = xor i64 %shifted.i.i.i53, %product.i.i.i52
    %hash.i.i.i55 = and i64 %xored.i.i.i54, %tbl_size.i.i50
    %offset_ptr.i.i56 = getelementptr i32, ptr %offset_tbl.i.i51, i64 %hash.i.i.i55
    %offset.i.i71 = load i32, ptr %offset_ptr.i.i56, align 4
    %16 = tail call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract9)
    %17 = getelementptr i8, ptr %8, i64 8
    %18 = load ptr, ptr %17, align 8
    %19 = getelementptr i8, ptr %18, i64 8
    %20 = load ptr, ptr %19, align 8
    %21 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
    %22 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %.fca.1.extract, 1
    %23 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %.fca.2.extract, 2
    %24 = insertvalue { ptr, ptr, ptr, i32 } %23, i32 %offset.i.i71, 3
    tail call void %20(ptr %.fca.1.extract11, { ptr, ptr, ptr, i32 } %24)
    ret void
  }
  
  define { ptr, ptr, ptr, i32 } @ProductIterable2_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
    %const = bitcast i64 4189192806087951739 to i64
    %4 = alloca [0 x ptr], align 8
    %.fca.0.extract41 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract43 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract41, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract41, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract41, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, 7827074759551300494
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %5 = tail call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract41)
    %6 = sext i32 %offset.i.i to i64
    %7 = getelementptr ptr, ptr %.fca.0.extract41, i64 %6
    %8 = load ptr, ptr %7, align 8
    %9 = load ptr, ptr %8, align 8
    %10 = tail call { ptr, ptr, ptr, i32 } %9(ptr %.fca.1.extract43)
    %.fca.0.extract33 = extractvalue { ptr, ptr, ptr, i32 } %10, 0
    %.fca.1.extract35 = extractvalue { ptr, ptr, ptr, i32 } %10, 1
    %.fca.2.extract37 = extractvalue { ptr, ptr, ptr, i32 } %10, 2
    %.fca.3.extract39 = extractvalue { ptr, ptr, ptr, i32 } %10, 3
    %11 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract33, 0
    %12 = insertvalue { ptr, ptr, ptr, i32 } %11, ptr %.fca.1.extract35, 1
    %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.2.extract37, 2
    %14 = insertvalue { ptr, ptr, ptr, i32 } %13, i32 %.fca.3.extract39, 3
    %15 = tail call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract41)
    %16 = getelementptr i8, ptr %7, i64 16
    %17 = load ptr, ptr %16, align 8
    %18 = tail call ptr %17(ptr %.fca.1.extract43)
    %19 = tail call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract41)
    %20 = getelementptr i8, ptr %7, i64 24
    %21 = load ptr, ptr %20, align 8
    %22 = tail call ptr %21(ptr %.fca.1.extract43)
    %23 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
    %24 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract33)
    %25 = sext i32 %.fca.3.extract39 to i64
    %26 = getelementptr ptr, ptr %.fca.0.extract33, i64 %25
    %27 = getelementptr i8, ptr %26, i64 8
    %28 = load ptr, ptr %27, align 8
    %29 = call ptr %28({ ptr, ptr, ptr, i32 } %14, ptr nonnull %4)
    %30 = call { ptr, ptr, ptr, i32 } %29({ ptr, ptr, ptr, i32 } %14, { ptr, ptr, ptr, i32 } %14, ptr nonnull %4)
    %31 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract41)
    %32 = getelementptr i8, ptr %7, i64 8
    %33 = load ptr, ptr %32, align 8
    %34 = load ptr, ptr %33, align 8
    %35 = call { ptr, ptr, ptr, i32 } %34(ptr %.fca.1.extract43)
    %36 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract41)
    %37 = load ptr, ptr %16, align 8
    %38 = call ptr %37(ptr %.fca.1.extract43)
    %39 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract41)
    %40 = load ptr, ptr %20, align 8
    %41 = call ptr %40(ptr %.fca.1.extract43)
    %result.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #26
    %42 = getelementptr i8, ptr %result.i, i64 16
    store ptr %41, ptr %42, align 8
    %43 = getelementptr i8, ptr %result.i, i64 8
    store ptr %38, ptr %43, align 8
    store ptr @Pair, ptr %result.i, align 8
    %result.i93 = call noalias dereferenceable_or_null(152) ptr @bump_malloc_inner(i64 noundef 152, ptr nonnull @current_ptr) #26
    %44 = alloca { ptr, ptr, ptr, i32 }, align 8
    %45 = getelementptr inbounds i8, ptr %44, i64 8
    %46 = getelementptr inbounds i8, ptr %44, i64 24
    store ptr @ProductIterator2, ptr %44, align 8
    store ptr %result.i93, ptr %45, align 8
    store i32 7, ptr %46, align 8
    %47 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %44)
    %48 = getelementptr i8, ptr %result.i93, i64 128
    store ptr %38, ptr %48, align 8
    %49 = getelementptr i8, ptr %result.i93, i64 136
    store ptr %41, ptr %49, align 8
    %50 = getelementptr i8, ptr %result.i93, i64 144
    store ptr %result.i, ptr %50, align 8
    %51 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %48)
    %52 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract41)
    %53 = load ptr, ptr %7, align 8
    %54 = load ptr, ptr %53, align 8
    %55 = call { ptr, ptr, ptr, i32 } %54(ptr %.fca.1.extract43)
    %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %55, 0
    %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %55, 1
    %.fca.2.extract13 = extractvalue { ptr, ptr, ptr, i32 } %55, 2
    %.fca.3.extract15 = extractvalue { ptr, ptr, ptr, i32 } %55, 3
    %56 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract9, 0
    %57 = insertvalue { ptr, ptr, ptr, i32 } %56, ptr %.fca.1.extract11, 1
    %58 = insertvalue { ptr, ptr, ptr, i32 } %57, ptr %.fca.2.extract13, 2
    %59 = insertvalue { ptr, ptr, ptr, i32 } %58, i32 %.fca.3.extract15, 3
    %60 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract41)
    %61 = load ptr, ptr %16, align 8
    %62 = call ptr %61(ptr %.fca.1.extract43)
    %63 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract41)
    %64 = load ptr, ptr %20, align 8
    %65 = call ptr %64(ptr %.fca.1.extract43)
    %66 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
    %67 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract9)
    %68 = sext i32 %.fca.3.extract15 to i64
    %69 = getelementptr ptr, ptr %.fca.0.extract9, i64 %68
    %70 = getelementptr i8, ptr %69, i64 8
    %71 = load ptr, ptr %70, align 8
    %72 = call ptr %71({ ptr, ptr, ptr, i32 } %59, ptr nonnull %4)
    %73 = call { ptr, ptr, ptr, i32 } %72({ ptr, ptr, ptr, i32 } %59, { ptr, ptr, ptr, i32 } %59, ptr nonnull %4)
    %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %73, 0
    %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %73, 1
    %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %73, 2
    %hash_coef_ptr.i.i111 = getelementptr i8, ptr %.fca.0.extract1, i64 8
    %tbl_size_ptr.i.i112 = getelementptr i8, ptr %.fca.0.extract1, i64 16
    %offset_tbl_ptr.i.i113 = getelementptr i8, ptr %.fca.0.extract1, i64 40
    %74 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract41)
    %75 = load ptr, ptr %32, align 8
    %76 = load ptr, ptr %75, align 8
    %77 = call { ptr, ptr, ptr, i32 } %76(ptr %.fca.1.extract43)
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %77, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %77, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %77, 2
    %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %77, 3
    %hash_coef.i.i144 = load i64, ptr %hash_coef_ptr.i.i111, align 4
    %tbl_size.i.i145 = load i64, ptr %tbl_size_ptr.i.i112, align 4
    %offset_tbl.i.i146 = load ptr, ptr %offset_tbl_ptr.i.i113, align 8
    %product.i.i.i147 = mul i64 %hash_coef.i.i144, %const
    %shifted.i.i.i148 = lshr i64 %product.i.i.i147, 32
    %xored.i.i.i149 = xor i64 %shifted.i.i.i148, %product.i.i.i147
    %hash.i.i.i150 = and i64 %xored.i.i.i149, %tbl_size.i.i145
    %offset_ptr.i.i151 = getelementptr i32, ptr %offset_tbl.i.i146, i64 %hash.i.i.i150
    %offset.i.i152 = load i32, ptr %offset_ptr.i.i151, align 4
    %78 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
    %79 = insertvalue { ptr, ptr, ptr, i32 } %78, ptr %.fca.1.extract3, 1
    %80 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %.fca.2.extract5, 2
    %81 = insertvalue { ptr, ptr, ptr, i32 } %80, i32 %offset.i.i152, 3
    %82 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
    %83 = insertvalue { ptr, ptr, ptr, i32 } %82, ptr %.fca.1.extract, 1
    %84 = insertvalue { ptr, ptr, ptr, i32 } %83, ptr %.fca.2.extract, 2
    %85 = insertvalue { ptr, ptr, ptr, i32 } %84, i32 %.fca.3.extract, 3
    %86 = load ptr, ptr %44, align 8
    %87 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %86, 0
    %88 = load ptr, ptr %45, align 8
    %89 = insertvalue { ptr, ptr, ptr, i32 } %87, ptr %88, 1
    %90 = getelementptr inbounds i8, ptr %44, i64 16
    %91 = load ptr, ptr %90, align 8
    %92 = insertvalue { ptr, ptr, ptr, i32 } %89, ptr %91, 2
    %93 = load i32, ptr %46, align 8
    %94 = insertvalue { ptr, ptr, ptr, i32 } %92, i32 %93, 3
    %95 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract41)
    %96 = load ptr, ptr %16, align 8
    %97 = call ptr %96(ptr %.fca.1.extract43)
    %98 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract41)
    %99 = load ptr, ptr %20, align 8
    %100 = call ptr %99(ptr %.fca.1.extract43)
    %result.i168 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #26
    %101 = getelementptr i8, ptr %result.i168, i64 8
    store ptr %97, ptr %101, align 8
    store ptr @Iterator2, ptr %result.i168, align 8
    %result.i169 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #26
    %102 = getelementptr i8, ptr %result.i169, i64 8
    store ptr %100, ptr %102, align 8
    store ptr @Iterable2, ptr %result.i169, align 8
    %103 = alloca [2 x ptr], align 8
    store ptr %result.i168, ptr %103, align 8
    %104 = getelementptr inbounds i8, ptr %103, i64 8
    store ptr %result.i169, ptr %104, align 8
    %105 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %103)
    %106 = call ptr @llvm.invariant.start.p0(i64 112, ptr %86)
    %107 = sext i32 %93 to i64
    %108 = getelementptr ptr, ptr %86, i64 %107
    %109 = getelementptr i8, ptr %108, i64 56
    %110 = load ptr, ptr %109, align 8
    %111 = alloca { ptr, ptr }, align 8
    store ptr %.fca.0.extract1, ptr %111, align 8
    %112 = getelementptr inbounds i8, ptr %111, i64 8
    store ptr %.fca.0.extract, ptr %112, align 8
    %113 = call ptr %110({ ptr, ptr, ptr, i32 } %94, ptr nonnull %111)
    call void %113({ ptr, ptr, ptr, i32 } %94, { ptr, ptr, ptr, i32 } %94, ptr nonnull %103, { ptr, ptr, ptr, i32 } %81, { ptr, ptr, ptr, i32 } %85)
    %114 = load ptr, ptr %44, align 8
    %115 = load ptr, ptr %45, align 8
    %116 = load ptr, ptr %90, align 8
    %hash_coef_ptr.i.i171 = getelementptr i8, ptr %114, i64 8
    %tbl_size_ptr.i.i172 = getelementptr i8, ptr %114, i64 16
    %offset_tbl_ptr.i.i173 = getelementptr i8, ptr %114, i64 40
    %hash_coef.i.i174 = load i64, ptr %hash_coef_ptr.i.i171, align 4
    %tbl_size.i.i175 = load i64, ptr %tbl_size_ptr.i.i172, align 4
    %offset_tbl.i.i176 = load ptr, ptr %offset_tbl_ptr.i.i173, align 8
    %product.i.i.i177 = mul i64 %hash_coef.i.i174, %const
    %shifted.i.i.i178 = lshr i64 %product.i.i.i177, 32
    %xored.i.i.i179 = xor i64 %shifted.i.i.i178, %product.i.i.i177
    %hash.i.i.i180 = and i64 %xored.i.i.i179, %tbl_size.i.i175
    %offset_ptr.i.i181 = getelementptr i32, ptr %offset_tbl.i.i176, i64 %hash.i.i.i180
    %offset.i.i182 = load i32, ptr %offset_ptr.i.i181, align 4
    %117 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %114, 0
    %118 = insertvalue { ptr, ptr, ptr, i32 } %117, ptr %115, 1
    %119 = insertvalue { ptr, ptr, ptr, i32 } %118, ptr %116, 2
    %120 = insertvalue { ptr, ptr, ptr, i32 } %119, i32 %offset.i.i182, 3
    ret { ptr, ptr, ptr, i32 } %120
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define ptr @ProductIterator2_field_ProductIterator2_0(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 32
    %3 = load ptr, ptr %2, align 8
    ret ptr %3
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define ptr @ProductIterator2_field_ProductIterator2_1(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 40
    %3 = load ptr, ptr %2, align 8
    ret ptr %3
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define ptr @ProductIterator2_field_ProductIterator2_2(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 48
    %3 = load ptr, ptr %2, align 8
    ret ptr %3
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @ProductIterator2_B_init_first_iteratorIterator2T_second_iterableIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 128
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @ProductIterator2_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 136
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  define void @ProductIterator2_init_first_iteratorIterator2T_second_iterableIterable2U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
    %const1 = bitcast i64 5693646204635713916 to i64
    %const = bitcast i64 4189192806087951739 to i64
    %6 = alloca [0 x ptr], align 8
    %.fca.0.extract35 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract37 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract35, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract35, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract35, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, 4440657219728359865
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %.fca.0.extract27 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
    %.fca.1.extract29 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
    %.fca.2.extract31 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
    %hash_coef_ptr.i.i44 = getelementptr i8, ptr %.fca.0.extract27, i64 8
    %tbl_size_ptr.i.i45 = getelementptr i8, ptr %.fca.0.extract27, i64 16
    %offset_tbl_ptr.i.i46 = getelementptr i8, ptr %.fca.0.extract27, i64 40
    %hash_coef.i.i47 = load i64, ptr %hash_coef_ptr.i.i44, align 4
    %tbl_size.i.i48 = load i64, ptr %tbl_size_ptr.i.i45, align 4
    %offset_tbl.i.i49 = load ptr, ptr %offset_tbl_ptr.i.i46, align 8
    %product.i.i.i50 = mul i64 %hash_coef.i.i47, %const
    %shifted.i.i.i51 = lshr i64 %product.i.i.i50, 32
    %xored.i.i.i52 = xor i64 %shifted.i.i.i51, %product.i.i.i50
    %hash.i.i.i53 = and i64 %xored.i.i.i52, %tbl_size.i.i48
    %offset_ptr.i.i54 = getelementptr i32, ptr %offset_tbl.i.i49, i64 %hash.i.i.i53
    %offset.i.i69 = load i32, ptr %offset_ptr.i.i54, align 4
    %7 = tail call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract35)
    %8 = sext i32 %offset.i.i to i64
    %9 = getelementptr ptr, ptr %.fca.0.extract35, i64 %8
    %10 = load ptr, ptr %9, align 8
    %11 = getelementptr i8, ptr %10, i64 8
    %12 = load ptr, ptr %11, align 8
    %13 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract27, 0
    %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.1.extract29, 1
    %15 = insertvalue { ptr, ptr, ptr, i32 } %14, ptr %.fca.2.extract31, 2
    %16 = insertvalue { ptr, ptr, ptr, i32 } %15, i32 %offset.i.i69, 3
    tail call void %12(ptr %.fca.1.extract37, { ptr, ptr, ptr, i32 } %16)
    %.fca.0.extract19 = extractvalue { ptr, ptr, ptr, i32 } %4, 0
    %.fca.1.extract21 = extractvalue { ptr, ptr, ptr, i32 } %4, 1
    %.fca.2.extract23 = extractvalue { ptr, ptr, ptr, i32 } %4, 2
    %hash_coef_ptr.i.i72 = getelementptr i8, ptr %.fca.0.extract19, i64 8
    %tbl_size_ptr.i.i73 = getelementptr i8, ptr %.fca.0.extract19, i64 16
    %offset_tbl_ptr.i.i74 = getelementptr i8, ptr %.fca.0.extract19, i64 40
    %hash_coef.i.i75 = load i64, ptr %hash_coef_ptr.i.i72, align 4
    %tbl_size.i.i76 = load i64, ptr %tbl_size_ptr.i.i73, align 4
    %offset_tbl.i.i77 = load ptr, ptr %offset_tbl_ptr.i.i74, align 8
    %product.i.i.i78 = mul i64 %hash_coef.i.i75, %const1
    %shifted.i.i.i79 = lshr i64 %product.i.i.i78, 32
    %xored.i.i.i80 = xor i64 %shifted.i.i.i79, %product.i.i.i78
    %hash.i.i.i81 = and i64 %xored.i.i.i80, %tbl_size.i.i76
    %offset_ptr.i.i82 = getelementptr i32, ptr %offset_tbl.i.i77, i64 %hash.i.i.i81
    %offset.i.i97 = load i32, ptr %offset_ptr.i.i82, align 4
    %17 = tail call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract35)
    %18 = getelementptr i8, ptr %9, i64 16
    %19 = load ptr, ptr %18, align 8
    %20 = getelementptr i8, ptr %19, i64 8
    %21 = load ptr, ptr %20, align 8
    %22 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract19, 0
    %23 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %.fca.1.extract21, 1
    %24 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %.fca.2.extract23, 2
    %25 = insertvalue { ptr, ptr, ptr, i32 } %24, i32 %offset.i.i97, 3
    tail call void %21(ptr %.fca.1.extract37, { ptr, ptr, ptr, i32 } %25)
    %26 = tail call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract35)
    %27 = load ptr, ptr %18, align 8
    %28 = load ptr, ptr %27, align 8
    %29 = tail call { ptr, ptr, ptr, i32 } %28(ptr %.fca.1.extract37)
    %.fca.0.extract11 = extractvalue { ptr, ptr, ptr, i32 } %29, 0
    %.fca.1.extract13 = extractvalue { ptr, ptr, ptr, i32 } %29, 1
    %.fca.2.extract15 = extractvalue { ptr, ptr, ptr, i32 } %29, 2
    %.fca.3.extract17 = extractvalue { ptr, ptr, ptr, i32 } %29, 3
    %30 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11, 0
    %31 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %.fca.1.extract13, 1
    %32 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %.fca.2.extract15, 2
    %33 = insertvalue { ptr, ptr, ptr, i32 } %32, i32 %.fca.3.extract17, 3
    %34 = tail call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract35)
    %35 = getelementptr i8, ptr %9, i64 32
    %36 = load ptr, ptr %35, align 8
    %37 = tail call ptr %36(ptr %.fca.1.extract37)
    %38 = tail call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract35)
    %39 = getelementptr i8, ptr %9, i64 40
    %40 = load ptr, ptr %39, align 8
    %41 = tail call ptr %40(ptr %.fca.1.extract37)
    %42 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %6)
    %43 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract11)
    %44 = sext i32 %.fca.3.extract17 to i64
    %45 = getelementptr ptr, ptr %.fca.0.extract11, i64 %44
    %46 = getelementptr i8, ptr %45, i64 8
    %47 = load ptr, ptr %46, align 8
    %48 = call ptr %47({ ptr, ptr, ptr, i32 } %33, ptr nonnull %6)
    %49 = call { ptr, ptr, ptr, i32 } %48({ ptr, ptr, ptr, i32 } %33, { ptr, ptr, ptr, i32 } %33, ptr nonnull %6)
    %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %49, 0
    %.fca.1.extract5 = extractvalue { ptr, ptr, ptr, i32 } %49, 1
    %.fca.2.extract7 = extractvalue { ptr, ptr, ptr, i32 } %49, 2
    %hash_coef_ptr.i.i114 = getelementptr i8, ptr %.fca.0.extract3, i64 8
    %tbl_size_ptr.i.i115 = getelementptr i8, ptr %.fca.0.extract3, i64 16
    %offset_tbl_ptr.i.i116 = getelementptr i8, ptr %.fca.0.extract3, i64 40
    %hash_coef.i.i117 = load i64, ptr %hash_coef_ptr.i.i114, align 4
    %tbl_size.i.i118 = load i64, ptr %tbl_size_ptr.i.i115, align 4
    %offset_tbl.i.i119 = load ptr, ptr %offset_tbl_ptr.i.i116, align 8
    %product.i.i.i120 = mul i64 %hash_coef.i.i117, %const
    %shifted.i.i.i121 = lshr i64 %product.i.i.i120, 32
    %xored.i.i.i122 = xor i64 %shifted.i.i.i121, %product.i.i.i120
    %hash.i.i.i123 = and i64 %xored.i.i.i122, %tbl_size.i.i118
    %offset_ptr.i.i124 = getelementptr i32, ptr %offset_tbl.i.i119, i64 %hash.i.i.i123
    %offset.i.i139 = load i32, ptr %offset_ptr.i.i124, align 4
    %50 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract35)
    %51 = getelementptr i8, ptr %9, i64 8
    %52 = load ptr, ptr %51, align 8
    %53 = getelementptr i8, ptr %52, i64 8
    %54 = load ptr, ptr %53, align 8
    %55 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract3, 0
    %56 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %.fca.1.extract5, 1
    %57 = insertvalue { ptr, ptr, ptr, i32 } %56, ptr %.fca.2.extract7, 2
    %58 = insertvalue { ptr, ptr, ptr, i32 } %57, i32 %offset.i.i139, 3
    call void %54(ptr %.fca.1.extract37, { ptr, ptr, ptr, i32 } %58)
    %59 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract35)
    %60 = load ptr, ptr %9, align 8
    %61 = load ptr, ptr %60, align 8
    %62 = call { ptr, ptr, ptr, i32 } %61(ptr %.fca.1.extract37)
    %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %62, 0
    %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %62, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %62, 2
    %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %62, 3
    %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
    %64 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %.fca.1.extract2, 1
    %65 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %.fca.2.extract, 2
    %66 = insertvalue { ptr, ptr, ptr, i32 } %65, i32 %.fca.3.extract, 3
    %67 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract35)
    %68 = load ptr, ptr %35, align 8
    %69 = call ptr %68(ptr %.fca.1.extract37)
    %70 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract35)
    %71 = load ptr, ptr %39, align 8
    %72 = call ptr %71(ptr %.fca.1.extract37)
    %73 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %6)
    %74 = call ptr @llvm.invariant.start.p0(i64 24, ptr %.fca.0.extract1)
    %75 = sext i32 %.fca.3.extract to i64
    %76 = getelementptr ptr, ptr %.fca.0.extract1, i64 %75
    %77 = getelementptr i8, ptr %76, i64 8
    %78 = load ptr, ptr %77, align 8
    %79 = call ptr %78({ ptr, ptr, ptr, i32 } %66, ptr nonnull %6)
    %80 = call { ptr, i160 } %79({ ptr, ptr, ptr, i32 } %66, { ptr, ptr, ptr, i32 } %66, ptr nonnull %6)
    %81 = call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract35)
    %82 = getelementptr i8, ptr %9, i64 24
    %83 = load ptr, ptr %82, align 8
    %84 = getelementptr i8, ptr %83, i64 8
    %85 = load ptr, ptr %84, align 8
    call void %85(ptr %.fca.1.extract37, { ptr, i160 } %80)
    ret void
  }
  
  define { ptr, i160 } @ProductIterator2_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
    %4 = alloca [0 x ptr], align 8
    %.fca.0.extract51 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract53 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract51, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract51, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract51, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, 4440657219728359865
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %5 = tail call ptr @llvm.invariant.start.p0(i64 112, ptr %.fca.0.extract51)
    %6 = sext i32 %offset.i.i to i64
    %7 = getelementptr ptr, ptr %.fca.0.extract51, i64 %6
    %8 = getelementptr i8, ptr %7, i64 24
    %9 = load ptr, ptr %8, align 8
    %10 = load ptr, ptr %9, align 8
    %11 = tail call { ptr, i160 } %10(ptr %.fca.1.extract53)
    %12 = alloca { ptr, ptr, ptr, i32 }, align 8
    %.sroa.0221.0302 = extractvalue { ptr, i160 } %11, 0
    %13 = icmp ne ptr %.sroa.0221.0302, @nil_typ
    %14 = icmp ne ptr %.sroa.0221.0302, null
    %.not65303 = and i1 %13, %14
    br i1 %.not65303, label %.lr.ph, label %.loopexit
  
  .lr.ph:                                           ; preds = %3
    %const1 = bitcast i64 4189192806087951739 to i64
    %15 = tail call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract51)
    br label %16
  
  16:                                               ; preds = %40, %.lr.ph
    %.sroa.0221.0305 = phi ptr [ %.sroa.0221.0302, %.lr.ph ], [ %.sroa.0221.0, %40 ]
    %.pn304 = phi { ptr, i160 } [ %11, %.lr.ph ], [ %100, %40 ]
    %sunkaddr = mul i64 %6, 8
    %sunkaddr2 = getelementptr i8, ptr %.fca.0.extract51, i64 %sunkaddr
    %sunkaddr3 = getelementptr i8, ptr %sunkaddr2, i64 8
    %17 = load ptr, ptr %sunkaddr3, align 8
    %18 = load ptr, ptr %17, align 8
    %19 = call { ptr, ptr, ptr, i32 } %18(ptr %.fca.1.extract53)
    %.fca.0.extract28 = extractvalue { ptr, ptr, ptr, i32 } %19, 0
    %.fca.1.extract30 = extractvalue { ptr, ptr, ptr, i32 } %19, 1
    %.fca.2.extract32 = extractvalue { ptr, ptr, ptr, i32 } %19, 2
    %.fca.3.extract34 = extractvalue { ptr, ptr, ptr, i32 } %19, 3
    %20 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract28, 0
    %21 = insertvalue { ptr, ptr, ptr, i32 } %20, ptr %.fca.1.extract30, 1
    %22 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %.fca.2.extract32, 2
    %23 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 %.fca.3.extract34, 3
    %24 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract51)
    %sunkaddr4 = mul i64 %6, 8
    %sunkaddr5 = getelementptr i8, ptr %.fca.0.extract51, i64 %sunkaddr4
    %sunkaddr6 = getelementptr i8, ptr %sunkaddr5, i64 32
    %25 = load ptr, ptr %sunkaddr6, align 8
    %26 = call ptr %25(ptr %.fca.1.extract53)
    %27 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract51)
    %sunkaddr7 = mul i64 %6, 8
    %sunkaddr8 = getelementptr i8, ptr %.fca.0.extract51, i64 %sunkaddr7
    %sunkaddr9 = getelementptr i8, ptr %sunkaddr8, i64 40
    %28 = load ptr, ptr %sunkaddr9, align 8
    %29 = call ptr %28(ptr %.fca.1.extract53)
    %30 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
    %31 = call ptr @llvm.invariant.start.p0(i64 24, ptr %.fca.0.extract28)
    %32 = sext i32 %.fca.3.extract34 to i64
    %33 = getelementptr ptr, ptr %.fca.0.extract28, i64 %32
    %34 = getelementptr i8, ptr %33, i64 8
    %35 = load ptr, ptr %34, align 8
    %36 = call ptr %35({ ptr, ptr, ptr, i32 } %23, ptr nonnull %4)
    %37 = call { ptr, i160 } %36({ ptr, ptr, ptr, i32 } %23, { ptr, ptr, ptr, i32 } %23, ptr nonnull %4)
    %.fca.0.extract59 = extractvalue { ptr, i160 } %37, 0
    %38 = icmp ne ptr %.fca.0.extract59, @nil_typ
    %39 = icmp ne ptr %.fca.0.extract59, null
    %.not67 = and i1 %38, %39
    br i1 %.not67, label %103, label %40
  
  40:                                               ; preds = %16
    %41 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract51)
    %sunkaddr10 = mul i64 %6, 8
    %sunkaddr11 = getelementptr i8, ptr %.fca.0.extract51, i64 %sunkaddr10
    %42 = load ptr, ptr %sunkaddr11, align 8
    %43 = load ptr, ptr %42, align 8
    %44 = call { ptr, ptr, ptr, i32 } %43(ptr %.fca.1.extract53)
    %.fca.0.extract18 = extractvalue { ptr, ptr, ptr, i32 } %44, 0
    %.fca.1.extract20 = extractvalue { ptr, ptr, ptr, i32 } %44, 1
    %.fca.2.extract22 = extractvalue { ptr, ptr, ptr, i32 } %44, 2
    %.fca.3.extract24 = extractvalue { ptr, ptr, ptr, i32 } %44, 3
    %45 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract18, 0
    %46 = insertvalue { ptr, ptr, ptr, i32 } %45, ptr %.fca.1.extract20, 1
    %47 = insertvalue { ptr, ptr, ptr, i32 } %46, ptr %.fca.2.extract22, 2
    %48 = insertvalue { ptr, ptr, ptr, i32 } %47, i32 %.fca.3.extract24, 3
    %49 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract51)
    %sunkaddr12 = mul i64 %6, 8
    %sunkaddr13 = getelementptr i8, ptr %.fca.0.extract51, i64 %sunkaddr12
    %sunkaddr14 = getelementptr i8, ptr %sunkaddr13, i64 32
    %50 = load ptr, ptr %sunkaddr14, align 8
    %51 = call ptr %50(ptr %.fca.1.extract53)
    %52 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract51)
    %sunkaddr15 = mul i64 %6, 8
    %sunkaddr16 = getelementptr i8, ptr %.fca.0.extract51, i64 %sunkaddr15
    %sunkaddr17 = getelementptr i8, ptr %sunkaddr16, i64 40
    %53 = load ptr, ptr %sunkaddr17, align 8
    %54 = call ptr %53(ptr %.fca.1.extract53)
    %55 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
    %56 = call ptr @llvm.invariant.start.p0(i64 24, ptr %.fca.0.extract18)
    %57 = sext i32 %.fca.3.extract24 to i64
    %58 = getelementptr ptr, ptr %.fca.0.extract18, i64 %57
    %59 = getelementptr i8, ptr %58, i64 8
    %60 = load ptr, ptr %59, align 8
    %61 = call ptr %60({ ptr, ptr, ptr, i32 } %48, ptr nonnull %4)
    %62 = call { ptr, i160 } %61({ ptr, ptr, ptr, i32 } %48, { ptr, ptr, ptr, i32 } %48, ptr nonnull %4)
    %63 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract51)
    %sunkaddr18 = mul i64 %6, 8
    %sunkaddr19 = getelementptr i8, ptr %.fca.0.extract51, i64 %sunkaddr18
    %sunkaddr20 = getelementptr i8, ptr %sunkaddr19, i64 24
    %64 = load ptr, ptr %sunkaddr20, align 8
    %65 = getelementptr i8, ptr %64, i64 8
    %66 = load ptr, ptr %65, align 8
    call void %66(ptr %.fca.1.extract53, { ptr, i160 } %62)
    %67 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract51)
    %sunkaddr21 = mul i64 %6, 8
    %sunkaddr22 = getelementptr i8, ptr %.fca.0.extract51, i64 %sunkaddr21
    %sunkaddr23 = getelementptr i8, ptr %sunkaddr22, i64 16
    %68 = load ptr, ptr %sunkaddr23, align 8
    %69 = load ptr, ptr %68, align 8
    %70 = call { ptr, ptr, ptr, i32 } %69(ptr %.fca.1.extract53)
    %.fca.0.extract4 = extractvalue { ptr, ptr, ptr, i32 } %70, 0
    %.fca.1.extract6 = extractvalue { ptr, ptr, ptr, i32 } %70, 1
    %.fca.2.extract8 = extractvalue { ptr, ptr, ptr, i32 } %70, 2
    %.fca.3.extract10 = extractvalue { ptr, ptr, ptr, i32 } %70, 3
    %71 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract4, 0
    %72 = insertvalue { ptr, ptr, ptr, i32 } %71, ptr %.fca.1.extract6, 1
    %73 = insertvalue { ptr, ptr, ptr, i32 } %72, ptr %.fca.2.extract8, 2
    %74 = insertvalue { ptr, ptr, ptr, i32 } %73, i32 %.fca.3.extract10, 3
    %75 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract51)
    %76 = load ptr, ptr %sunkaddr14, align 8
    %77 = call ptr %76(ptr %.fca.1.extract53)
    %78 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract51)
    %79 = load ptr, ptr %sunkaddr17, align 8
    %80 = call ptr %79(ptr %.fca.1.extract53)
    %81 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
    %82 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract4)
    %83 = sext i32 %.fca.3.extract10 to i64
    %84 = getelementptr ptr, ptr %.fca.0.extract4, i64 %83
    %85 = getelementptr i8, ptr %84, i64 8
    %86 = load ptr, ptr %85, align 8
    %87 = call ptr %86({ ptr, ptr, ptr, i32 } %74, ptr nonnull %4)
    %88 = call { ptr, ptr, ptr, i32 } %87({ ptr, ptr, ptr, i32 } %74, { ptr, ptr, ptr, i32 } %74, ptr nonnull %4)
    %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %88, 0
    %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %88, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %88, 2
    %hash_coef_ptr.i.i129 = getelementptr i8, ptr %.fca.0.extract2, i64 8
    %tbl_size_ptr.i.i130 = getelementptr i8, ptr %.fca.0.extract2, i64 16
    %offset_tbl_ptr.i.i131 = getelementptr i8, ptr %.fca.0.extract2, i64 40
    %hash_coef.i.i132 = load i64, ptr %hash_coef_ptr.i.i129, align 4
    %tbl_size.i.i133 = load i64, ptr %tbl_size_ptr.i.i130, align 4
    %offset_tbl.i.i134 = load ptr, ptr %offset_tbl_ptr.i.i131, align 8
    %product.i.i.i135 = mul i64 %hash_coef.i.i132, %const1
    %shifted.i.i.i136 = lshr i64 %product.i.i.i135, 32
    %xored.i.i.i137 = xor i64 %shifted.i.i.i136, %product.i.i.i135
    %hash.i.i.i138 = and i64 %xored.i.i.i137, %tbl_size.i.i133
    %offset_ptr.i.i139 = getelementptr i32, ptr %offset_tbl.i.i134, i64 %hash.i.i.i138
    %offset.i.i154 = load i32, ptr %offset_ptr.i.i139, align 4
    %89 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract51)
    %sunkaddr24 = mul i64 %6, 8
    %sunkaddr25 = getelementptr i8, ptr %.fca.0.extract51, i64 %sunkaddr24
    %sunkaddr26 = getelementptr i8, ptr %sunkaddr25, i64 8
    %90 = load ptr, ptr %sunkaddr26, align 8
    %91 = getelementptr i8, ptr %90, i64 8
    %92 = load ptr, ptr %91, align 8
    %93 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract2, 0
    %94 = insertvalue { ptr, ptr, ptr, i32 } %93, ptr %.fca.1.extract3, 1
    %95 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %.fca.2.extract, 2
    %96 = insertvalue { ptr, ptr, ptr, i32 } %95, i32 %offset.i.i154, 3
    call void %92(ptr %.fca.1.extract53, { ptr, ptr, ptr, i32 } %96)
    %97 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract51)
    %98 = load ptr, ptr %sunkaddr20, align 8
    %99 = load ptr, ptr %98, align 8
    %100 = call { ptr, i160 } %99(ptr %.fca.1.extract53)
    %.sroa.0221.0 = extractvalue { ptr, i160 } %100, 0
    %101 = icmp ne ptr %.sroa.0221.0, @nil_typ
    %102 = icmp ne ptr %.sroa.0221.0, null
    %.not65 = and i1 %101, %102
    br i1 %.not65, label %16, label %.loopexit
  
  103:                                              ; preds = %16
    %const = bitcast i64 3084208142191802847 to i64
    %.fca.1.extract61 = extractvalue { ptr, i160 } %37, 1
    %.sroa.3222.0 = extractvalue { ptr, i160 } %.pn304, 1
    %hash_coef_ptr.i.i157 = getelementptr i8, ptr %.fca.0.extract59, i64 8
    %tbl_size_ptr.i.i158 = getelementptr i8, ptr %.fca.0.extract59, i64 16
    %offset_tbl_ptr.i.i159 = getelementptr i8, ptr %.fca.0.extract59, i64 40
    %104 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract51)
    %sunkaddr27 = mul i64 %6, 8
    %sunkaddr28 = getelementptr i8, ptr %.fca.0.extract51, i64 %sunkaddr27
    %sunkaddr29 = getelementptr i8, ptr %sunkaddr28, i64 32
    %105 = load ptr, ptr %sunkaddr29, align 8
    %106 = call ptr %105(ptr %.fca.1.extract53)
    %107 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract51)
    %sunkaddr30 = mul i64 %6, 8
    %sunkaddr31 = getelementptr i8, ptr %.fca.0.extract51, i64 %sunkaddr30
    %sunkaddr32 = getelementptr i8, ptr %sunkaddr31, i64 40
    %108 = load ptr, ptr %sunkaddr32, align 8
    %109 = call ptr %108(ptr %.fca.1.extract53)
    %result.i = call noalias dereferenceable_or_null(80) ptr @bump_malloc_inner(i64 noundef 80, ptr nonnull @current_ptr) #26
    %110 = getelementptr inbounds i8, ptr %12, i64 8
    %111 = getelementptr inbounds i8, ptr %12, i64 24
    store ptr @Pair, ptr %12, align 8
    store ptr %result.i, ptr %110, align 8
    store i32 7, ptr %111, align 8
    %112 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %12)
    %113 = getelementptr i8, ptr %result.i, i64 64
    store ptr %106, ptr %113, align 8
    %114 = getelementptr i8, ptr %result.i, i64 72
    store ptr %109, ptr %114, align 8
    %115 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %113)
    %hash_coef_ptr.i.i171 = getelementptr i8, ptr %.sroa.0221.0305, i64 8
    %tbl_size_ptr.i.i172 = getelementptr i8, ptr %.sroa.0221.0305, i64 16
    %offset_tbl_ptr.i.i173 = getelementptr i8, ptr %.sroa.0221.0305, i64 40
    %.sroa.3.8.insert.ext200 = and i160 %.sroa.3222.0, 340282366920938463463374607431768211455
    %.sroa.3.8.insert.ext = and i160 %.fca.1.extract61, 340282366920938463463374607431768211455
    %116 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract51)
    %117 = load ptr, ptr %sunkaddr29, align 8
    %118 = call ptr %117(ptr %.fca.1.extract53)
    %119 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull %.fca.0.extract51)
    %120 = load ptr, ptr %sunkaddr32, align 8
    %121 = call ptr %120(ptr %.fca.1.extract53)
    %122 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @Pair)
    %hash_coef.i.i11.i = load i64, ptr %hash_coef_ptr.i.i171, align 4
    %tbl_size.i.i12.i = load i64, ptr %tbl_size_ptr.i.i172, align 4
    %offset_tbl.i.i13.i = load ptr, ptr %offset_tbl_ptr.i.i173, align 8
    %product.i.i.i14.i = mul i64 %hash_coef.i.i11.i, %const
    %shifted.i.i.i15.i = lshr i64 %product.i.i.i14.i, 32
    %xored.i.i.i16.i = xor i64 %shifted.i.i.i15.i, %product.i.i.i14.i
    %hash.i.i.i17.i = and i64 %xored.i.i.i16.i, %tbl_size.i.i12.i
    %offset_ptr.i.i18.i = getelementptr i32, ptr %offset_tbl.i.i13.i, i64 %hash.i.i.i17.i
    %offset.i.i19.i = load i32, ptr %offset_ptr.i.i18.i, align 4
    %.sroa.582.8.insert.ext.i = zext i32 %offset.i.i19.i to i160
    %.sroa.582.8.insert.shift.i = shl nuw i160 %.sroa.582.8.insert.ext.i, 128
    %.sroa.3.8.insert.insert74.i = or disjoint i160 %.sroa.582.8.insert.shift.i, %.sroa.3.8.insert.ext200
    store ptr %.sroa.0221.0305, ptr %result.i, align 8
    %123 = getelementptr i8, ptr %result.i, i64 8
    store i160 %.sroa.3.8.insert.insert74.i, ptr %123, align 4
    %hash_coef.i.i39.i = load i64, ptr %hash_coef_ptr.i.i157, align 4
    %tbl_size.i.i40.i = load i64, ptr %tbl_size_ptr.i.i158, align 4
    %offset_tbl.i.i41.i = load ptr, ptr %offset_tbl_ptr.i.i159, align 8
    %product.i.i.i42.i = mul i64 %hash_coef.i.i39.i, %const
    %shifted.i.i.i43.i = lshr i64 %product.i.i.i42.i, 32
    %xored.i.i.i44.i = xor i64 %shifted.i.i.i43.i, %product.i.i.i42.i
    %hash.i.i.i45.i = and i64 %xored.i.i.i44.i, %tbl_size.i.i40.i
    %offset_ptr.i.i46.i = getelementptr i32, ptr %offset_tbl.i.i41.i, i64 %hash.i.i.i45.i
    %offset.i.i47.i = load i32, ptr %offset_ptr.i.i46.i, align 4
    %.sroa.568.8.insert.ext.i = zext i32 %offset.i.i47.i to i160
    %.sroa.568.8.insert.shift.i = shl nuw i160 %.sroa.568.8.insert.ext.i, 128
    %124 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @Pair)
    %.sroa.3.8.insert.insert.i = or disjoint i160 %.sroa.568.8.insert.shift.i, %.sroa.3.8.insert.ext
    %125 = getelementptr i8, ptr %result.i, i64 32
    store ptr %.fca.0.extract59, ptr %125, align 8
    %126 = getelementptr i8, ptr %result.i, i64 40
    store i160 %.sroa.3.8.insert.insert.i, ptr %126, align 4
    %127 = load ptr, ptr %12, align 8
    %128 = load i160, ptr %110, align 8
    br label %.loopexit
  
  .loopexit:                                        ; preds = %40, %103, %3
    %.reg2mem31.sroa.0.0 = phi ptr [ %127, %103 ], [ @nil_typ, %3 ], [ @nil_typ, %40 ]
    %.reg2mem31.sroa.3.0 = phi i160 [ %128, %103 ], [ undef, %3 ], [ undef, %40 ]
    %.reload32.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %.reg2mem31.sroa.0.0, 0
    %.reload32.fca.1.insert = insertvalue { ptr, i160 } %.reload32.fca.0.insert, i160 %.reg2mem31.sroa.3.0, 1
    ret { ptr, i160 } %.reload32.fca.1.insert
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define { ptr, i160 } @ProductIterator2_getter_current_first(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 96
    %3 = load ptr, ptr %2, align 8
    %4 = insertvalue { ptr, i160 } undef, ptr %3, 0
    %5 = getelementptr i8, ptr %0, i64 104
    %6 = load i160, ptr %5, align 4
    %7 = insertvalue { ptr, i160 } %4, i160 %6, 1
    ret { ptr, i160 } %7
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
  define void @ProductIterator2_setter_current_first(ptr nocapture writeonly %0, { ptr, i160 } %1) #3 {
    %3 = getelementptr i8, ptr %0, i64 96
    %.fca.0.extract = extractvalue { ptr, i160 } %1, 0
    %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
    store ptr %.fca.0.extract, ptr %3, align 8
    %4 = getelementptr i8, ptr %0, i64 104
    store i160 %.fca.1.extract, ptr %4, align 4
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define { ptr, ptr, ptr, i32 } @ProductIterator2_getter_second_iterable(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 64
    %3 = load ptr, ptr %2, align 8
    %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
    %5 = getelementptr i8, ptr %0, i64 72
    %6 = load ptr, ptr %5, align 8
    %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
    %8 = getelementptr i8, ptr %0, i64 80
    %9 = load ptr, ptr %8, align 8
    %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
    %11 = getelementptr i8, ptr %0, i64 88
    %12 = load i32, ptr %11, align 4
    %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
    ret { ptr, ptr, ptr, i32 } %13
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
  define void @ProductIterator2_setter_second_iterable(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #3 {
    %3 = getelementptr i8, ptr %0, i64 64
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
    %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
    store ptr %.fca.0.extract, ptr %3, align 8
    %4 = getelementptr i8, ptr %0, i64 72
    store ptr %.fca.1.extract, ptr %4, align 8
    %5 = getelementptr i8, ptr %0, i64 80
    store ptr %.fca.2.extract, ptr %5, align 8
    %6 = getelementptr i8, ptr %0, i64 88
    store i32 %.fca.3.extract, ptr %6, align 4
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define { ptr, ptr, ptr, i32 } @ProductIterator2_getter_second_iterator(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 32
    %3 = load ptr, ptr %2, align 8
    %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
    %5 = getelementptr i8, ptr %0, i64 40
    %6 = load ptr, ptr %5, align 8
    %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
    %8 = getelementptr i8, ptr %0, i64 48
    %9 = load ptr, ptr %8, align 8
    %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
    %11 = getelementptr i8, ptr %0, i64 56
    %12 = load i32, ptr %11, align 4
    %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
    ret { ptr, ptr, ptr, i32 } %13
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
  define void @ProductIterator2_setter_second_iterator(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #3 {
    %3 = getelementptr i8, ptr %0, i64 32
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
    %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
    store ptr %.fca.0.extract, ptr %3, align 8
    %4 = getelementptr i8, ptr %0, i64 40
    store ptr %.fca.1.extract, ptr %4, align 8
    %5 = getelementptr i8, ptr %0, i64 48
    store ptr %.fca.2.extract, ptr %5, align 8
    %6 = getelementptr i8, ptr %0, i64 56
    store i32 %.fca.3.extract, ptr %6, align 4
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define { ptr, ptr, ptr, i32 } @ProductIterator2_getter_first_iterator(ptr nocapture readonly %0) #0 {
    %2 = load ptr, ptr %0, align 8
    %3 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2, 0
    %4 = getelementptr i8, ptr %0, i64 8
    %5 = load ptr, ptr %4, align 8
    %6 = insertvalue { ptr, ptr, ptr, i32 } %3, ptr %5, 1
    %7 = getelementptr i8, ptr %0, i64 16
    %8 = load ptr, ptr %7, align 8
    %9 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr %8, 2
    %10 = getelementptr i8, ptr %0, i64 24
    %11 = load i32, ptr %10, align 4
    %12 = insertvalue { ptr, ptr, ptr, i32 } %9, i32 %11, 3
    ret { ptr, ptr, ptr, i32 } %12
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
  define void @ProductIterator2_setter_first_iterator(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #3 {
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
    %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
    store ptr %.fca.0.extract, ptr %0, align 8
    %3 = getelementptr i8, ptr %0, i64 8
    store ptr %.fca.1.extract, ptr %3, align 8
    %4 = getelementptr i8, ptr %0, i64 16
    store ptr %.fca.2.extract, ptr %4, align 8
    %5 = getelementptr i8, ptr %0, i64 24
    store i32 %.fca.3.extract, ptr %5, align 4
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define { ptr, ptr, ptr, i32 } @ProductIterable2_getter_second(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 32
    %3 = load ptr, ptr %2, align 8
    %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
    %5 = getelementptr i8, ptr %0, i64 40
    %6 = load ptr, ptr %5, align 8
    %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
    %8 = getelementptr i8, ptr %0, i64 48
    %9 = load ptr, ptr %8, align 8
    %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
    %11 = getelementptr i8, ptr %0, i64 56
    %12 = load i32, ptr %11, align 4
    %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
    ret { ptr, ptr, ptr, i32 } %13
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
  define void @ProductIterable2_setter_second(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #3 {
    %3 = getelementptr i8, ptr %0, i64 32
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
    %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
    store ptr %.fca.0.extract, ptr %3, align 8
    %4 = getelementptr i8, ptr %0, i64 40
    store ptr %.fca.1.extract, ptr %4, align 8
    %5 = getelementptr i8, ptr %0, i64 48
    store ptr %.fca.2.extract, ptr %5, align 8
    %6 = getelementptr i8, ptr %0, i64 56
    store i32 %.fca.3.extract, ptr %6, align 4
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define { ptr, ptr, ptr, i32 } @ProductIterable2_getter_first(ptr nocapture readonly %0) #0 {
    %2 = load ptr, ptr %0, align 8
    %3 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2, 0
    %4 = getelementptr i8, ptr %0, i64 8
    %5 = load ptr, ptr %4, align 8
    %6 = insertvalue { ptr, ptr, ptr, i32 } %3, ptr %5, 1
    %7 = getelementptr i8, ptr %0, i64 16
    %8 = load ptr, ptr %7, align 8
    %9 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr %8, 2
    %10 = getelementptr i8, ptr %0, i64 24
    %11 = load i32, ptr %10, align 4
    %12 = insertvalue { ptr, ptr, ptr, i32 } %9, i32 %11, 3
    ret { ptr, ptr, ptr, i32 } %12
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
  define void @ProductIterable2_setter_first(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #3 {
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
    %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
    store ptr %.fca.0.extract, ptr %0, align 8
    %3 = getelementptr i8, ptr %0, i64 8
    store ptr %.fca.1.extract, ptr %3, align 8
    %4 = getelementptr i8, ptr %0, i64 16
    store ptr %.fca.2.extract, ptr %4, align 8
    %5 = getelementptr i8, ptr %0, i64 24
    store i32 %.fca.3.extract, ptr %5, align 4
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define ptr @ZipIterable2_field_ZipIterable2_0(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 16
    %3 = load ptr, ptr %2, align 8
    ret ptr %3
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define ptr @ZipIterable2_field_ZipIterable2_1(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 24
    %3 = load ptr, ptr %2, align 8
    ret ptr %3
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define ptr @ZipIterable2_field_ZipIterable2_2(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 32
    %3 = load ptr, ptr %2, align 8
    ret ptr %3
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @ZipIterable2_B_init_firstIterable2T_secondIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 192
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @ZipIterable2_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 200
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @ZipIterable2_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 208
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @ZipIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 216
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @ZipIterable2_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 224
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @ZipIterable2_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 232
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @ZipIterable2_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 240
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @ZipIterable2_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 248
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @ZipIterable2_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 256
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @ZipIterable2_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 264
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @ZipIterable2_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 272
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @ZipIterable2_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 280
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  define void @ZipIterable2_init_firstIterable2T_secondIterable2U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
    %const = bitcast i64 5693646204635713916 to i64
    %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, -3218950579047519815
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
    %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
    %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
    %hash_coef_ptr.i.i18 = getelementptr i8, ptr %.fca.0.extract1, i64 8
    %tbl_size_ptr.i.i19 = getelementptr i8, ptr %.fca.0.extract1, i64 16
    %offset_tbl_ptr.i.i20 = getelementptr i8, ptr %.fca.0.extract1, i64 40
    %hash_coef.i.i21 = load i64, ptr %hash_coef_ptr.i.i18, align 4
    %tbl_size.i.i22 = load i64, ptr %tbl_size_ptr.i.i19, align 4
    %offset_tbl.i.i23 = load ptr, ptr %offset_tbl_ptr.i.i20, align 8
    %product.i.i.i24 = mul i64 %hash_coef.i.i21, %const
    %shifted.i.i.i25 = lshr i64 %product.i.i.i24, 32
    %xored.i.i.i26 = xor i64 %shifted.i.i.i25, %product.i.i.i24
    %hash.i.i.i27 = and i64 %xored.i.i.i26, %tbl_size.i.i22
    %offset_ptr.i.i28 = getelementptr i32, ptr %offset_tbl.i.i23, i64 %hash.i.i.i27
    %offset.i.i43 = load i32, ptr %offset_ptr.i.i28, align 4
    %6 = tail call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract9)
    %7 = sext i32 %offset.i.i to i64
    %8 = getelementptr ptr, ptr %.fca.0.extract9, i64 %7
    %9 = load ptr, ptr %8, align 8
    %10 = getelementptr i8, ptr %9, i64 8
    %11 = load ptr, ptr %10, align 8
    %12 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
    %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.1.extract3, 1
    %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.2.extract5, 2
    %15 = insertvalue { ptr, ptr, ptr, i32 } %14, i32 %offset.i.i43, 3
    tail call void %11(ptr %.fca.1.extract11, { ptr, ptr, ptr, i32 } %15)
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 2
    %hash_coef_ptr.i.i46 = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i47 = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i48 = getelementptr i8, ptr %.fca.0.extract, i64 40
    %hash_coef.i.i49 = load i64, ptr %hash_coef_ptr.i.i46, align 4
    %tbl_size.i.i50 = load i64, ptr %tbl_size_ptr.i.i47, align 4
    %offset_tbl.i.i51 = load ptr, ptr %offset_tbl_ptr.i.i48, align 8
    %product.i.i.i52 = mul i64 %hash_coef.i.i49, %const
    %shifted.i.i.i53 = lshr i64 %product.i.i.i52, 32
    %xored.i.i.i54 = xor i64 %shifted.i.i.i53, %product.i.i.i52
    %hash.i.i.i55 = and i64 %xored.i.i.i54, %tbl_size.i.i50
    %offset_ptr.i.i56 = getelementptr i32, ptr %offset_tbl.i.i51, i64 %hash.i.i.i55
    %offset.i.i71 = load i32, ptr %offset_ptr.i.i56, align 4
    %16 = tail call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract9)
    %17 = getelementptr i8, ptr %8, i64 8
    %18 = load ptr, ptr %17, align 8
    %19 = getelementptr i8, ptr %18, i64 8
    %20 = load ptr, ptr %19, align 8
    %21 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
    %22 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %.fca.1.extract, 1
    %23 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %.fca.2.extract, 2
    %24 = insertvalue { ptr, ptr, ptr, i32 } %23, i32 %offset.i.i71, 3
    tail call void %20(ptr %.fca.1.extract11, { ptr, ptr, ptr, i32 } %24)
    ret void
  }
  
  define { ptr, ptr, ptr, i32 } @ZipIterable2_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
    %const = bitcast i64 4189192806087951739 to i64
    %4 = alloca [0 x ptr], align 8
    %.fca.0.extract57 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract59 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract57, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract57, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract57, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, -3218950579047519815
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %5 = tail call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract57)
    %6 = sext i32 %offset.i.i to i64
    %7 = getelementptr ptr, ptr %.fca.0.extract57, i64 %6
    %8 = load ptr, ptr %7, align 8
    %9 = load ptr, ptr %8, align 8
    %10 = tail call { ptr, ptr, ptr, i32 } %9(ptr %.fca.1.extract59)
    %.fca.0.extract49 = extractvalue { ptr, ptr, ptr, i32 } %10, 0
    %.fca.1.extract51 = extractvalue { ptr, ptr, ptr, i32 } %10, 1
    %.fca.2.extract53 = extractvalue { ptr, ptr, ptr, i32 } %10, 2
    %.fca.3.extract55 = extractvalue { ptr, ptr, ptr, i32 } %10, 3
    %11 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract49, 0
    %12 = insertvalue { ptr, ptr, ptr, i32 } %11, ptr %.fca.1.extract51, 1
    %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.2.extract53, 2
    %14 = insertvalue { ptr, ptr, ptr, i32 } %13, i32 %.fca.3.extract55, 3
    %15 = tail call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract57)
    %16 = getelementptr i8, ptr %7, i64 16
    %17 = load ptr, ptr %16, align 8
    %18 = tail call ptr %17(ptr %.fca.1.extract59)
    %19 = tail call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract57)
    %20 = getelementptr i8, ptr %7, i64 24
    %21 = load ptr, ptr %20, align 8
    %22 = tail call ptr %21(ptr %.fca.1.extract59)
    %23 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
    %24 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract49)
    %25 = sext i32 %.fca.3.extract55 to i64
    %26 = getelementptr ptr, ptr %.fca.0.extract49, i64 %25
    %27 = getelementptr i8, ptr %26, i64 8
    %28 = load ptr, ptr %27, align 8
    %29 = call ptr %28({ ptr, ptr, ptr, i32 } %14, ptr nonnull %4)
    %30 = call { ptr, ptr, ptr, i32 } %29({ ptr, ptr, ptr, i32 } %14, { ptr, ptr, ptr, i32 } %14, ptr nonnull %4)
    %31 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract57)
    %32 = getelementptr i8, ptr %7, i64 8
    %33 = load ptr, ptr %32, align 8
    %34 = load ptr, ptr %33, align 8
    %35 = call { ptr, ptr, ptr, i32 } %34(ptr %.fca.1.extract59)
    %.fca.0.extract33 = extractvalue { ptr, ptr, ptr, i32 } %35, 0
    %.fca.1.extract35 = extractvalue { ptr, ptr, ptr, i32 } %35, 1
    %.fca.2.extract37 = extractvalue { ptr, ptr, ptr, i32 } %35, 2
    %.fca.3.extract39 = extractvalue { ptr, ptr, ptr, i32 } %35, 3
    %36 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract33, 0
    %37 = insertvalue { ptr, ptr, ptr, i32 } %36, ptr %.fca.1.extract35, 1
    %38 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %.fca.2.extract37, 2
    %39 = insertvalue { ptr, ptr, ptr, i32 } %38, i32 %.fca.3.extract39, 3
    %40 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract57)
    %41 = load ptr, ptr %16, align 8
    %42 = call ptr %41(ptr %.fca.1.extract59)
    %43 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract57)
    %44 = load ptr, ptr %20, align 8
    %45 = call ptr %44(ptr %.fca.1.extract59)
    %46 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
    %47 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract33)
    %48 = sext i32 %.fca.3.extract39 to i64
    %49 = getelementptr ptr, ptr %.fca.0.extract33, i64 %48
    %50 = getelementptr i8, ptr %49, i64 8
    %51 = load ptr, ptr %50, align 8
    %52 = call ptr %51({ ptr, ptr, ptr, i32 } %39, ptr nonnull %4)
    %53 = call { ptr, ptr, ptr, i32 } %52({ ptr, ptr, ptr, i32 } %39, { ptr, ptr, ptr, i32 } %39, ptr nonnull %4)
    %54 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract57)
    %55 = load ptr, ptr %16, align 8
    %56 = call ptr %55(ptr %.fca.1.extract59)
    %57 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract57)
    %58 = load ptr, ptr %20, align 8
    %59 = call ptr %58(ptr %.fca.1.extract59)
    %result.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #26
    %60 = getelementptr i8, ptr %result.i, i64 16
    store ptr %59, ptr %60, align 8
    %61 = getelementptr i8, ptr %result.i, i64 8
    store ptr %56, ptr %61, align 8
    store ptr @Pair, ptr %result.i, align 8
    %result.i123 = call noalias dereferenceable_or_null(88) ptr @bump_malloc_inner(i64 noundef 88, ptr nonnull @current_ptr) #26
    %62 = alloca { ptr, ptr, ptr, i32 }, align 8
    %63 = getelementptr inbounds i8, ptr %62, i64 8
    %64 = getelementptr inbounds i8, ptr %62, i64 24
    store ptr @ZipIterator2, ptr %62, align 8
    store ptr %result.i123, ptr %63, align 8
    store i32 7, ptr %64, align 8
    %65 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %62)
    %66 = getelementptr i8, ptr %result.i123, i64 64
    store ptr %56, ptr %66, align 8
    %67 = getelementptr i8, ptr %result.i123, i64 72
    store ptr %59, ptr %67, align 8
    %68 = getelementptr i8, ptr %result.i123, i64 80
    store ptr %result.i, ptr %68, align 8
    %69 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %66)
    %70 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract57)
    %71 = load ptr, ptr %7, align 8
    %72 = load ptr, ptr %71, align 8
    %73 = call { ptr, ptr, ptr, i32 } %72(ptr %.fca.1.extract59)
    %.fca.0.extract17 = extractvalue { ptr, ptr, ptr, i32 } %73, 0
    %.fca.1.extract19 = extractvalue { ptr, ptr, ptr, i32 } %73, 1
    %.fca.2.extract21 = extractvalue { ptr, ptr, ptr, i32 } %73, 2
    %.fca.3.extract23 = extractvalue { ptr, ptr, ptr, i32 } %73, 3
    %74 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract17, 0
    %75 = insertvalue { ptr, ptr, ptr, i32 } %74, ptr %.fca.1.extract19, 1
    %76 = insertvalue { ptr, ptr, ptr, i32 } %75, ptr %.fca.2.extract21, 2
    %77 = insertvalue { ptr, ptr, ptr, i32 } %76, i32 %.fca.3.extract23, 3
    %78 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract57)
    %79 = load ptr, ptr %16, align 8
    %80 = call ptr %79(ptr %.fca.1.extract59)
    %81 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract57)
    %82 = load ptr, ptr %20, align 8
    %83 = call ptr %82(ptr %.fca.1.extract59)
    %84 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
    %85 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract17)
    %86 = sext i32 %.fca.3.extract23 to i64
    %87 = getelementptr ptr, ptr %.fca.0.extract17, i64 %86
    %88 = getelementptr i8, ptr %87, i64 8
    %89 = load ptr, ptr %88, align 8
    %90 = call ptr %89({ ptr, ptr, ptr, i32 } %77, ptr nonnull %4)
    %91 = call { ptr, ptr, ptr, i32 } %90({ ptr, ptr, ptr, i32 } %77, { ptr, ptr, ptr, i32 } %77, ptr nonnull %4)
    %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %91, 0
    %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %91, 1
    %.fca.2.extract13 = extractvalue { ptr, ptr, ptr, i32 } %91, 2
    %hash_coef_ptr.i.i141 = getelementptr i8, ptr %.fca.0.extract9, i64 8
    %tbl_size_ptr.i.i142 = getelementptr i8, ptr %.fca.0.extract9, i64 16
    %offset_tbl_ptr.i.i143 = getelementptr i8, ptr %.fca.0.extract9, i64 40
    %92 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract57)
    %93 = load ptr, ptr %32, align 8
    %94 = load ptr, ptr %93, align 8
    %95 = call { ptr, ptr, ptr, i32 } %94(ptr %.fca.1.extract59)
    %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %95, 0
    %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %95, 1
    %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %95, 2
    %.fca.3.extract7 = extractvalue { ptr, ptr, ptr, i32 } %95, 3
    %96 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
    %97 = insertvalue { ptr, ptr, ptr, i32 } %96, ptr %.fca.1.extract3, 1
    %98 = insertvalue { ptr, ptr, ptr, i32 } %97, ptr %.fca.2.extract5, 2
    %99 = insertvalue { ptr, ptr, ptr, i32 } %98, i32 %.fca.3.extract7, 3
    %100 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract57)
    %101 = load ptr, ptr %16, align 8
    %102 = call ptr %101(ptr %.fca.1.extract59)
    %103 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract57)
    %104 = load ptr, ptr %20, align 8
    %105 = call ptr %104(ptr %.fca.1.extract59)
    %106 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
    %107 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract1)
    %108 = sext i32 %.fca.3.extract7 to i64
    %109 = getelementptr ptr, ptr %.fca.0.extract1, i64 %108
    %110 = getelementptr i8, ptr %109, i64 8
    %111 = load ptr, ptr %110, align 8
    %112 = call ptr %111({ ptr, ptr, ptr, i32 } %99, ptr nonnull %4)
    %113 = call { ptr, ptr, ptr, i32 } %112({ ptr, ptr, ptr, i32 } %99, { ptr, ptr, ptr, i32 } %99, ptr nonnull %4)
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %113, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %113, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %113, 2
    %hash_coef_ptr.i.i171 = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i172 = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i173 = getelementptr i8, ptr %.fca.0.extract, i64 40
    %hash_coef.i.i174 = load i64, ptr %hash_coef_ptr.i.i171, align 4
    %tbl_size.i.i175 = load i64, ptr %tbl_size_ptr.i.i172, align 4
    %offset_tbl.i.i176 = load ptr, ptr %offset_tbl_ptr.i.i173, align 8
    %product.i.i.i177 = mul i64 %hash_coef.i.i174, %const
    %shifted.i.i.i178 = lshr i64 %product.i.i.i177, 32
    %xored.i.i.i179 = xor i64 %shifted.i.i.i178, %product.i.i.i177
    %hash.i.i.i180 = and i64 %xored.i.i.i179, %tbl_size.i.i175
    %offset_ptr.i.i181 = getelementptr i32, ptr %offset_tbl.i.i176, i64 %hash.i.i.i180
    %hash_coef.i.i188 = load i64, ptr %hash_coef_ptr.i.i141, align 4
    %tbl_size.i.i189 = load i64, ptr %tbl_size_ptr.i.i142, align 4
    %offset_tbl.i.i190 = load ptr, ptr %offset_tbl_ptr.i.i143, align 8
    %product.i.i.i191 = mul i64 %hash_coef.i.i188, %const
    %shifted.i.i.i192 = lshr i64 %product.i.i.i191, 32
    %xored.i.i.i193 = xor i64 %shifted.i.i.i192, %product.i.i.i191
    %hash.i.i.i194 = and i64 %xored.i.i.i193, %tbl_size.i.i189
    %offset_ptr.i.i195 = getelementptr i32, ptr %offset_tbl.i.i190, i64 %hash.i.i.i194
    %offset.i.i196 = load i32, ptr %offset_ptr.i.i195, align 4
    %114 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract9, 0
    %115 = insertvalue { ptr, ptr, ptr, i32 } %114, ptr %.fca.1.extract11, 1
    %116 = insertvalue { ptr, ptr, ptr, i32 } %115, ptr %.fca.2.extract13, 2
    %117 = insertvalue { ptr, ptr, ptr, i32 } %116, i32 %offset.i.i196, 3
    %offset.i.i210 = load i32, ptr %offset_ptr.i.i181, align 4
    %118 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
    %119 = insertvalue { ptr, ptr, ptr, i32 } %118, ptr %.fca.1.extract, 1
    %120 = insertvalue { ptr, ptr, ptr, i32 } %119, ptr %.fca.2.extract, 2
    %121 = insertvalue { ptr, ptr, ptr, i32 } %120, i32 %offset.i.i210, 3
    %122 = load ptr, ptr %62, align 8
    %123 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %122, 0
    %124 = load ptr, ptr %63, align 8
    %125 = insertvalue { ptr, ptr, ptr, i32 } %123, ptr %124, 1
    %126 = getelementptr inbounds i8, ptr %62, i64 16
    %127 = load ptr, ptr %126, align 8
    %128 = insertvalue { ptr, ptr, ptr, i32 } %125, ptr %127, 2
    %129 = load i32, ptr %64, align 8
    %130 = insertvalue { ptr, ptr, ptr, i32 } %128, i32 %129, 3
    %131 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract57)
    %132 = load ptr, ptr %16, align 8
    %133 = call ptr %132(ptr %.fca.1.extract59)
    %134 = call ptr @llvm.invariant.start.p0(i64 416, ptr %.fca.0.extract57)
    %135 = load ptr, ptr %20, align 8
    %136 = call ptr %135(ptr %.fca.1.extract59)
    %result.i212 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #26
    %137 = getelementptr i8, ptr %result.i212, i64 8
    store ptr %133, ptr %137, align 8
    store ptr @Iterator2, ptr %result.i212, align 8
    %result.i213 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #26
    %138 = getelementptr i8, ptr %result.i213, i64 8
    store ptr %136, ptr %138, align 8
    store ptr @Iterator2, ptr %result.i213, align 8
    %139 = alloca [2 x ptr], align 8
    store ptr %result.i212, ptr %139, align 8
    %140 = getelementptr inbounds i8, ptr %139, i64 8
    store ptr %result.i213, ptr %140, align 8
    %141 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %139)
    %142 = call ptr @llvm.invariant.start.p0(i64 96, ptr %122)
    %143 = sext i32 %129 to i64
    %144 = getelementptr ptr, ptr %122, i64 %143
    %145 = getelementptr i8, ptr %144, i64 40
    %146 = load ptr, ptr %145, align 8
    %147 = alloca { ptr, ptr }, align 8
    store ptr %.fca.0.extract9, ptr %147, align 8
    %148 = getelementptr inbounds i8, ptr %147, i64 8
    store ptr %.fca.0.extract, ptr %148, align 8
    %149 = call ptr %146({ ptr, ptr, ptr, i32 } %130, ptr nonnull %147)
    call void %149({ ptr, ptr, ptr, i32 } %130, { ptr, ptr, ptr, i32 } %130, ptr nonnull %139, { ptr, ptr, ptr, i32 } %117, { ptr, ptr, ptr, i32 } %121)
    %150 = load ptr, ptr %62, align 8
    %151 = load ptr, ptr %63, align 8
    %152 = load ptr, ptr %126, align 8
    %hash_coef_ptr.i.i215 = getelementptr i8, ptr %150, i64 8
    %tbl_size_ptr.i.i216 = getelementptr i8, ptr %150, i64 16
    %offset_tbl_ptr.i.i217 = getelementptr i8, ptr %150, i64 40
    %hash_coef.i.i218 = load i64, ptr %hash_coef_ptr.i.i215, align 4
    %tbl_size.i.i219 = load i64, ptr %tbl_size_ptr.i.i216, align 4
    %offset_tbl.i.i220 = load ptr, ptr %offset_tbl_ptr.i.i217, align 8
    %product.i.i.i221 = mul i64 %hash_coef.i.i218, %const
    %shifted.i.i.i222 = lshr i64 %product.i.i.i221, 32
    %xored.i.i.i223 = xor i64 %shifted.i.i.i222, %product.i.i.i221
    %hash.i.i.i224 = and i64 %xored.i.i.i223, %tbl_size.i.i219
    %offset_ptr.i.i225 = getelementptr i32, ptr %offset_tbl.i.i220, i64 %hash.i.i.i224
    %offset.i.i226 = load i32, ptr %offset_ptr.i.i225, align 4
    %153 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %150, 0
    %154 = insertvalue { ptr, ptr, ptr, i32 } %153, ptr %151, 1
    %155 = insertvalue { ptr, ptr, ptr, i32 } %154, ptr %152, 2
    %156 = insertvalue { ptr, ptr, ptr, i32 } %155, i32 %offset.i.i226, 3
    ret { ptr, ptr, ptr, i32 } %156
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define ptr @ZipIterator2_field_ZipIterator2_0(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 16
    %3 = load ptr, ptr %2, align 8
    ret ptr %3
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define ptr @ZipIterator2_field_ZipIterator2_1(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 24
    %3 = load ptr, ptr %2, align 8
    ret ptr %3
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define ptr @ZipIterator2_field_ZipIterator2_2(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 32
    %3 = load ptr, ptr %2, align 8
    ret ptr %3
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @ZipIterator2_B_init_firstIterator2T_secondIterator2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 112
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @ZipIterator2_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 120
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  define void @ZipIterator2_init_firstIterator2T_secondIterator2U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
    %const = bitcast i64 4189192806087951739 to i64
    %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, 5502728639611621286
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
    %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
    %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
    %hash_coef_ptr.i.i18 = getelementptr i8, ptr %.fca.0.extract1, i64 8
    %tbl_size_ptr.i.i19 = getelementptr i8, ptr %.fca.0.extract1, i64 16
    %offset_tbl_ptr.i.i20 = getelementptr i8, ptr %.fca.0.extract1, i64 40
    %hash_coef.i.i21 = load i64, ptr %hash_coef_ptr.i.i18, align 4
    %tbl_size.i.i22 = load i64, ptr %tbl_size_ptr.i.i19, align 4
    %offset_tbl.i.i23 = load ptr, ptr %offset_tbl_ptr.i.i20, align 8
    %product.i.i.i24 = mul i64 %hash_coef.i.i21, %const
    %shifted.i.i.i25 = lshr i64 %product.i.i.i24, 32
    %xored.i.i.i26 = xor i64 %shifted.i.i.i25, %product.i.i.i24
    %hash.i.i.i27 = and i64 %xored.i.i.i26, %tbl_size.i.i22
    %offset_ptr.i.i28 = getelementptr i32, ptr %offset_tbl.i.i23, i64 %hash.i.i.i27
    %offset.i.i43 = load i32, ptr %offset_ptr.i.i28, align 4
    %6 = tail call ptr @llvm.invariant.start.p0(i64 96, ptr %.fca.0.extract9)
    %7 = sext i32 %offset.i.i to i64
    %8 = getelementptr ptr, ptr %.fca.0.extract9, i64 %7
    %9 = load ptr, ptr %8, align 8
    %10 = getelementptr i8, ptr %9, i64 8
    %11 = load ptr, ptr %10, align 8
    %12 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
    %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.1.extract3, 1
    %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.2.extract5, 2
    %15 = insertvalue { ptr, ptr, ptr, i32 } %14, i32 %offset.i.i43, 3
    tail call void %11(ptr %.fca.1.extract11, { ptr, ptr, ptr, i32 } %15)
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 2
    %hash_coef_ptr.i.i46 = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i47 = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i48 = getelementptr i8, ptr %.fca.0.extract, i64 40
    %hash_coef.i.i49 = load i64, ptr %hash_coef_ptr.i.i46, align 4
    %tbl_size.i.i50 = load i64, ptr %tbl_size_ptr.i.i47, align 4
    %offset_tbl.i.i51 = load ptr, ptr %offset_tbl_ptr.i.i48, align 8
    %product.i.i.i52 = mul i64 %hash_coef.i.i49, %const
    %shifted.i.i.i53 = lshr i64 %product.i.i.i52, 32
    %xored.i.i.i54 = xor i64 %shifted.i.i.i53, %product.i.i.i52
    %hash.i.i.i55 = and i64 %xored.i.i.i54, %tbl_size.i.i50
    %offset_ptr.i.i56 = getelementptr i32, ptr %offset_tbl.i.i51, i64 %hash.i.i.i55
    %offset.i.i71 = load i32, ptr %offset_ptr.i.i56, align 4
    %16 = tail call ptr @llvm.invariant.start.p0(i64 96, ptr %.fca.0.extract9)
    %17 = getelementptr i8, ptr %8, i64 8
    %18 = load ptr, ptr %17, align 8
    %19 = getelementptr i8, ptr %18, i64 8
    %20 = load ptr, ptr %19, align 8
    %21 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
    %22 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %.fca.1.extract, 1
    %23 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %.fca.2.extract, 2
    %24 = insertvalue { ptr, ptr, ptr, i32 } %23, i32 %offset.i.i71, 3
    tail call void %20(ptr %.fca.1.extract11, { ptr, ptr, ptr, i32 } %24)
    ret void
  }
  
  define { ptr, i160 } @ZipIterator2_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
    %4 = alloca [0 x ptr], align 8
    %.fca.0.extract33 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract35 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract33, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract33, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract33, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, 5502728639611621286
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %5 = tail call ptr @llvm.invariant.start.p0(i64 96, ptr %.fca.0.extract33)
    %6 = sext i32 %offset.i.i to i64
    %7 = getelementptr ptr, ptr %.fca.0.extract33, i64 %6
    %8 = load ptr, ptr %7, align 8
    %9 = load ptr, ptr %8, align 8
    %10 = tail call { ptr, ptr, ptr, i32 } %9(ptr %.fca.1.extract35)
    %.fca.0.extract13 = extractvalue { ptr, ptr, ptr, i32 } %10, 0
    %.fca.1.extract15 = extractvalue { ptr, ptr, ptr, i32 } %10, 1
    %.fca.2.extract17 = extractvalue { ptr, ptr, ptr, i32 } %10, 2
    %.fca.3.extract19 = extractvalue { ptr, ptr, ptr, i32 } %10, 3
    %11 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract13, 0
    %12 = insertvalue { ptr, ptr, ptr, i32 } %11, ptr %.fca.1.extract15, 1
    %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.2.extract17, 2
    %14 = insertvalue { ptr, ptr, ptr, i32 } %13, i32 %.fca.3.extract19, 3
    %15 = tail call ptr @llvm.invariant.start.p0(i64 96, ptr %.fca.0.extract33)
    %16 = getelementptr i8, ptr %7, i64 16
    %17 = load ptr, ptr %16, align 8
    %18 = tail call ptr %17(ptr %.fca.1.extract35)
    %19 = tail call ptr @llvm.invariant.start.p0(i64 96, ptr %.fca.0.extract33)
    %20 = getelementptr i8, ptr %7, i64 24
    %21 = load ptr, ptr %20, align 8
    %22 = tail call ptr %21(ptr %.fca.1.extract35)
    %23 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
    %24 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %.fca.0.extract13)
    %25 = sext i32 %.fca.3.extract19 to i64
    %26 = getelementptr ptr, ptr %.fca.0.extract13, i64 %25
    %27 = getelementptr i8, ptr %26, i64 8
    %28 = load ptr, ptr %27, align 8
    %29 = call ptr %28({ ptr, ptr, ptr, i32 } %14, ptr nonnull %4)
    %30 = call { ptr, i160 } %29({ ptr, ptr, ptr, i32 } %14, { ptr, ptr, ptr, i32 } %14, ptr nonnull %4)
    %.fca.0.extract7 = extractvalue { ptr, i160 } %30, 0
    %31 = call ptr @llvm.invariant.start.p0(i64 96, ptr %.fca.0.extract33)
    %32 = getelementptr i8, ptr %7, i64 8
    %33 = load ptr, ptr %32, align 8
    %34 = load ptr, ptr %33, align 8
    %35 = call { ptr, ptr, ptr, i32 } %34(ptr %.fca.1.extract35)
    %.fca.0.extract5 = extractvalue { ptr, ptr, ptr, i32 } %35, 0
    %.fca.1.extract6 = extractvalue { ptr, ptr, ptr, i32 } %35, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %35, 2
    %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %35, 3
    %36 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract5, 0
    %37 = insertvalue { ptr, ptr, ptr, i32 } %36, ptr %.fca.1.extract6, 1
    %38 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %.fca.2.extract, 2
    %39 = insertvalue { ptr, ptr, ptr, i32 } %38, i32 %.fca.3.extract, 3
    %40 = call ptr @llvm.invariant.start.p0(i64 96, ptr %.fca.0.extract33)
    %41 = load ptr, ptr %16, align 8
    %42 = call ptr %41(ptr %.fca.1.extract35)
    %43 = call ptr @llvm.invariant.start.p0(i64 96, ptr %.fca.0.extract33)
    %44 = load ptr, ptr %20, align 8
    %45 = call ptr %44(ptr %.fca.1.extract35)
    %46 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
    %47 = call ptr @llvm.invariant.start.p0(i64 24, ptr %.fca.0.extract5)
    %48 = sext i32 %.fca.3.extract to i64
    %49 = getelementptr ptr, ptr %.fca.0.extract5, i64 %48
    %50 = getelementptr i8, ptr %49, i64 8
    %51 = load ptr, ptr %50, align 8
    %52 = call ptr %51({ ptr, ptr, ptr, i32 } %39, ptr nonnull %4)
    %53 = call { ptr, i160 } %52({ ptr, ptr, ptr, i32 } %39, { ptr, ptr, ptr, i32 } %39, ptr nonnull %4)
    %.fca.0.extract = extractvalue { ptr, i160 } %53, 0
    %.fca.1.extract = extractvalue { ptr, i160 } %53, 1
    %54 = icmp ne ptr %.fca.0.extract7, @nil_typ
    %55 = icmp ne ptr %.fca.0.extract7, null
    %.not42 = and i1 %54, %55
    %56 = alloca { ptr, ptr, ptr, i32 }, align 8
    br i1 %.not42, label %57, label %.thread
  
  57:                                               ; preds = %3
    %58 = icmp ne ptr %.fca.0.extract, @nil_typ
    %59 = icmp ne ptr %.fca.0.extract, null
    %.not44.not.not = and i1 %58, %59
    br i1 %.not44.not.not, label %60, label %.thread
  
  60:                                               ; preds = %57
    %const = bitcast i64 3084208142191802847 to i64
    %offset_tbl_ptr.i.i80 = getelementptr i8, ptr %.fca.0.extract7, i64 40
    %hash_coef_ptr.i.i78 = getelementptr i8, ptr %.fca.0.extract7, i64 8
    %tbl_size_ptr.i.i79 = getelementptr i8, ptr %.fca.0.extract7, i64 16
    %.fca.1.extract9 = extractvalue { ptr, i160 } %30, 1
    %hash_coef_ptr.i.i92 = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i93 = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i94 = getelementptr i8, ptr %.fca.0.extract, i64 40
    %61 = call ptr @llvm.invariant.start.p0(i64 96, ptr nonnull %.fca.0.extract33)
    %sunkaddr = mul i64 %6, 8
    %sunkaddr2 = getelementptr i8, ptr %.fca.0.extract33, i64 %sunkaddr
    %sunkaddr3 = getelementptr i8, ptr %sunkaddr2, i64 16
    %62 = load ptr, ptr %sunkaddr3, align 8
    %63 = call ptr %62(ptr %.fca.1.extract35)
    %64 = call ptr @llvm.invariant.start.p0(i64 96, ptr nonnull %.fca.0.extract33)
    %sunkaddr4 = mul i64 %6, 8
    %sunkaddr5 = getelementptr i8, ptr %.fca.0.extract33, i64 %sunkaddr4
    %sunkaddr6 = getelementptr i8, ptr %sunkaddr5, i64 24
    %65 = load ptr, ptr %sunkaddr6, align 8
    %66 = call ptr %65(ptr %.fca.1.extract35)
    %result.i = call noalias dereferenceable_or_null(80) ptr @bump_malloc_inner(i64 noundef 80, ptr nonnull @current_ptr) #26
    %67 = getelementptr inbounds i8, ptr %56, i64 8
    %68 = getelementptr inbounds i8, ptr %56, i64 24
    store ptr @Pair, ptr %56, align 8
    store ptr %result.i, ptr %67, align 8
    store i32 7, ptr %68, align 8
    %69 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %56)
    %70 = getelementptr i8, ptr %result.i, i64 64
    store ptr %63, ptr %70, align 8
    %71 = getelementptr i8, ptr %result.i, i64 72
    store ptr %66, ptr %71, align 8
    %72 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %70)
    %.sroa.3.8.insert.ext135 = and i160 %.fca.1.extract9, 340282366920938463463374607431768211455
    %.sroa.3.8.insert.ext = and i160 %.fca.1.extract, 340282366920938463463374607431768211455
    %73 = call ptr @llvm.invariant.start.p0(i64 96, ptr nonnull %.fca.0.extract33)
    %74 = load ptr, ptr %sunkaddr3, align 8
    %75 = call ptr %74(ptr %.fca.1.extract35)
    %76 = call ptr @llvm.invariant.start.p0(i64 96, ptr nonnull %.fca.0.extract33)
    %77 = load ptr, ptr %sunkaddr6, align 8
    %78 = call ptr %77(ptr %.fca.1.extract35)
    %79 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @Pair)
    %hash_coef.i.i11.i = load i64, ptr %hash_coef_ptr.i.i78, align 4
    %tbl_size.i.i12.i = load i64, ptr %tbl_size_ptr.i.i79, align 4
    %offset_tbl.i.i13.i = load ptr, ptr %offset_tbl_ptr.i.i80, align 8
    %product.i.i.i14.i = mul i64 %hash_coef.i.i11.i, %const
    %shifted.i.i.i15.i = lshr i64 %product.i.i.i14.i, 32
    %xored.i.i.i16.i = xor i64 %shifted.i.i.i15.i, %product.i.i.i14.i
    %hash.i.i.i17.i = and i64 %xored.i.i.i16.i, %tbl_size.i.i12.i
    %offset_ptr.i.i18.i = getelementptr i32, ptr %offset_tbl.i.i13.i, i64 %hash.i.i.i17.i
    %offset.i.i19.i = load i32, ptr %offset_ptr.i.i18.i, align 4
    %.sroa.582.8.insert.ext.i = zext i32 %offset.i.i19.i to i160
    %.sroa.582.8.insert.shift.i = shl nuw i160 %.sroa.582.8.insert.ext.i, 128
    %.sroa.3.8.insert.insert74.i = or disjoint i160 %.sroa.582.8.insert.shift.i, %.sroa.3.8.insert.ext135
    store ptr %.fca.0.extract7, ptr %result.i, align 8
    %80 = getelementptr i8, ptr %result.i, i64 8
    store i160 %.sroa.3.8.insert.insert74.i, ptr %80, align 4
    %hash_coef.i.i39.i = load i64, ptr %hash_coef_ptr.i.i92, align 4
    %tbl_size.i.i40.i = load i64, ptr %tbl_size_ptr.i.i93, align 4
    %offset_tbl.i.i41.i = load ptr, ptr %offset_tbl_ptr.i.i94, align 8
    %product.i.i.i42.i = mul i64 %hash_coef.i.i39.i, %const
    %shifted.i.i.i43.i = lshr i64 %product.i.i.i42.i, 32
    %xored.i.i.i44.i = xor i64 %shifted.i.i.i43.i, %product.i.i.i42.i
    %hash.i.i.i45.i = and i64 %xored.i.i.i44.i, %tbl_size.i.i40.i
    %offset_ptr.i.i46.i = getelementptr i32, ptr %offset_tbl.i.i41.i, i64 %hash.i.i.i45.i
    %offset.i.i47.i = load i32, ptr %offset_ptr.i.i46.i, align 4
    %.sroa.568.8.insert.ext.i = zext i32 %offset.i.i47.i to i160
    %.sroa.568.8.insert.shift.i = shl nuw i160 %.sroa.568.8.insert.ext.i, 128
    %81 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @Pair)
    %.sroa.3.8.insert.insert.i = or disjoint i160 %.sroa.568.8.insert.shift.i, %.sroa.3.8.insert.ext
    %82 = getelementptr i8, ptr %result.i, i64 32
    store ptr %.fca.0.extract, ptr %82, align 8
    %83 = getelementptr i8, ptr %result.i, i64 40
    store i160 %.sroa.3.8.insert.insert.i, ptr %83, align 4
    %84 = load ptr, ptr %56, align 8
    %85 = load i160, ptr %67, align 8
    br label %.thread
  
  .thread:                                          ; preds = %60, %57, %3
    %.reg2mem23.sroa.3.0185 = phi i160 [ %85, %60 ], [ poison, %57 ], [ poison, %3 ]
    %86 = phi ptr [ %84, %60 ], [ @nil_typ, %57 ], [ @nil_typ, %3 ]
    %.reload20.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %86, 0
    %.reload20.fca.1.insert = insertvalue { ptr, i160 } %.reload20.fca.0.insert, i160 %.reg2mem23.sroa.3.0185, 1
    ret { ptr, i160 } %.reload20.fca.1.insert
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define { ptr, ptr, ptr, i32 } @ZipIterator2_getter_second(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 32
    %3 = load ptr, ptr %2, align 8
    %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
    %5 = getelementptr i8, ptr %0, i64 40
    %6 = load ptr, ptr %5, align 8
    %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
    %8 = getelementptr i8, ptr %0, i64 48
    %9 = load ptr, ptr %8, align 8
    %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
    %11 = getelementptr i8, ptr %0, i64 56
    %12 = load i32, ptr %11, align 4
    %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
    ret { ptr, ptr, ptr, i32 } %13
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
  define void @ZipIterator2_setter_second(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #3 {
    %3 = getelementptr i8, ptr %0, i64 32
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
    %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
    store ptr %.fca.0.extract, ptr %3, align 8
    %4 = getelementptr i8, ptr %0, i64 40
    store ptr %.fca.1.extract, ptr %4, align 8
    %5 = getelementptr i8, ptr %0, i64 48
    store ptr %.fca.2.extract, ptr %5, align 8
    %6 = getelementptr i8, ptr %0, i64 56
    store i32 %.fca.3.extract, ptr %6, align 4
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define { ptr, ptr, ptr, i32 } @ZipIterator2_getter_first(ptr nocapture readonly %0) #0 {
    %2 = load ptr, ptr %0, align 8
    %3 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2, 0
    %4 = getelementptr i8, ptr %0, i64 8
    %5 = load ptr, ptr %4, align 8
    %6 = insertvalue { ptr, ptr, ptr, i32 } %3, ptr %5, 1
    %7 = getelementptr i8, ptr %0, i64 16
    %8 = load ptr, ptr %7, align 8
    %9 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr %8, 2
    %10 = getelementptr i8, ptr %0, i64 24
    %11 = load i32, ptr %10, align 4
    %12 = insertvalue { ptr, ptr, ptr, i32 } %9, i32 %11, 3
    ret { ptr, ptr, ptr, i32 } %12
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
  define void @ZipIterator2_setter_first(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #3 {
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
    %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
    store ptr %.fca.0.extract, ptr %0, align 8
    %3 = getelementptr i8, ptr %0, i64 8
    store ptr %.fca.1.extract, ptr %3, align 8
    %4 = getelementptr i8, ptr %0, i64 16
    store ptr %.fca.2.extract, ptr %4, align 8
    %5 = getelementptr i8, ptr %0, i64 24
    store i32 %.fca.3.extract, ptr %5, align 4
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define { ptr, ptr, ptr, i32 } @ZipIterable2_getter_second(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 32
    %3 = load ptr, ptr %2, align 8
    %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
    %5 = getelementptr i8, ptr %0, i64 40
    %6 = load ptr, ptr %5, align 8
    %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
    %8 = getelementptr i8, ptr %0, i64 48
    %9 = load ptr, ptr %8, align 8
    %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
    %11 = getelementptr i8, ptr %0, i64 56
    %12 = load i32, ptr %11, align 4
    %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
    ret { ptr, ptr, ptr, i32 } %13
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
  define void @ZipIterable2_setter_second(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #3 {
    %3 = getelementptr i8, ptr %0, i64 32
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
    %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
    store ptr %.fca.0.extract, ptr %3, align 8
    %4 = getelementptr i8, ptr %0, i64 40
    store ptr %.fca.1.extract, ptr %4, align 8
    %5 = getelementptr i8, ptr %0, i64 48
    store ptr %.fca.2.extract, ptr %5, align 8
    %6 = getelementptr i8, ptr %0, i64 56
    store i32 %.fca.3.extract, ptr %6, align 4
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define { ptr, ptr, ptr, i32 } @ZipIterable2_getter_first(ptr nocapture readonly %0) #0 {
    %2 = load ptr, ptr %0, align 8
    %3 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2, 0
    %4 = getelementptr i8, ptr %0, i64 8
    %5 = load ptr, ptr %4, align 8
    %6 = insertvalue { ptr, ptr, ptr, i32 } %3, ptr %5, 1
    %7 = getelementptr i8, ptr %0, i64 16
    %8 = load ptr, ptr %7, align 8
    %9 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr %8, 2
    %10 = getelementptr i8, ptr %0, i64 24
    %11 = load i32, ptr %10, align 4
    %12 = insertvalue { ptr, ptr, ptr, i32 } %9, i32 %11, 3
    ret { ptr, ptr, ptr, i32 } %12
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
  define void @ZipIterable2_setter_first(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #3 {
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
    %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
    store ptr %.fca.0.extract, ptr %0, align 8
    %3 = getelementptr i8, ptr %0, i64 8
    store ptr %.fca.1.extract, ptr %3, align 8
    %4 = getelementptr i8, ptr %0, i64 16
    store ptr %.fca.2.extract, ptr %4, align 8
    %5 = getelementptr i8, ptr %0, i64 24
    store i32 %.fca.3.extract, ptr %5, align 4
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define ptr @InterleaveIterable2_field_InterleaveIterable2_0(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 16
    %3 = load ptr, ptr %2, align 8
    ret ptr %3
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @InterleaveIterable2_B_init_firstIterable2T_secondIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 176
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @InterleaveIterable2_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 184
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @InterleaveIterable2_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 192
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @InterleaveIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 200
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @InterleaveIterable2_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 208
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @InterleaveIterable2_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 216
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @InterleaveIterable2_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 224
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @InterleaveIterable2_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 232
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @InterleaveIterable2_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 240
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @InterleaveIterable2_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 248
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @InterleaveIterable2_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 256
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @InterleaveIterable2_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 264
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  define void @InterleaveIterable2_init_firstIterable2T_secondIterable2T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
    %const = bitcast i64 5693646204635713916 to i64
    %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, -6258231685215461775
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
    %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
    %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
    %hash_coef_ptr.i.i18 = getelementptr i8, ptr %.fca.0.extract1, i64 8
    %tbl_size_ptr.i.i19 = getelementptr i8, ptr %.fca.0.extract1, i64 16
    %offset_tbl_ptr.i.i20 = getelementptr i8, ptr %.fca.0.extract1, i64 40
    %hash_coef.i.i21 = load i64, ptr %hash_coef_ptr.i.i18, align 4
    %tbl_size.i.i22 = load i64, ptr %tbl_size_ptr.i.i19, align 4
    %offset_tbl.i.i23 = load ptr, ptr %offset_tbl_ptr.i.i20, align 8
    %product.i.i.i24 = mul i64 %hash_coef.i.i21, %const
    %shifted.i.i.i25 = lshr i64 %product.i.i.i24, 32
    %xored.i.i.i26 = xor i64 %shifted.i.i.i25, %product.i.i.i24
    %hash.i.i.i27 = and i64 %xored.i.i.i26, %tbl_size.i.i22
    %offset_ptr.i.i28 = getelementptr i32, ptr %offset_tbl.i.i23, i64 %hash.i.i.i27
    %offset.i.i43 = load i32, ptr %offset_ptr.i.i28, align 4
    %6 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract9)
    %7 = sext i32 %offset.i.i to i64
    %8 = getelementptr ptr, ptr %.fca.0.extract9, i64 %7
    %9 = load ptr, ptr %8, align 8
    %10 = getelementptr i8, ptr %9, i64 8
    %11 = load ptr, ptr %10, align 8
    %12 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
    %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.1.extract3, 1
    %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.2.extract5, 2
    %15 = insertvalue { ptr, ptr, ptr, i32 } %14, i32 %offset.i.i43, 3
    tail call void %11(ptr %.fca.1.extract11, { ptr, ptr, ptr, i32 } %15)
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 2
    %hash_coef_ptr.i.i46 = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i47 = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i48 = getelementptr i8, ptr %.fca.0.extract, i64 40
    %hash_coef.i.i49 = load i64, ptr %hash_coef_ptr.i.i46, align 4
    %tbl_size.i.i50 = load i64, ptr %tbl_size_ptr.i.i47, align 4
    %offset_tbl.i.i51 = load ptr, ptr %offset_tbl_ptr.i.i48, align 8
    %product.i.i.i52 = mul i64 %hash_coef.i.i49, %const
    %shifted.i.i.i53 = lshr i64 %product.i.i.i52, 32
    %xored.i.i.i54 = xor i64 %shifted.i.i.i53, %product.i.i.i52
    %hash.i.i.i55 = and i64 %xored.i.i.i54, %tbl_size.i.i50
    %offset_ptr.i.i56 = getelementptr i32, ptr %offset_tbl.i.i51, i64 %hash.i.i.i55
    %offset.i.i71 = load i32, ptr %offset_ptr.i.i56, align 4
    %16 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract9)
    %17 = getelementptr i8, ptr %8, i64 8
    %18 = load ptr, ptr %17, align 8
    %19 = getelementptr i8, ptr %18, i64 8
    %20 = load ptr, ptr %19, align 8
    %21 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
    %22 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %.fca.1.extract, 1
    %23 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %.fca.2.extract, 2
    %24 = insertvalue { ptr, ptr, ptr, i32 } %23, i32 %offset.i.i71, 3
    tail call void %20(ptr %.fca.1.extract11, { ptr, ptr, ptr, i32 } %24)
    ret void
  }
  
  define { ptr, ptr, ptr, i32 } @InterleaveIterable2_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
    %const = bitcast i64 4189192806087951739 to i64
    %4 = alloca [0 x ptr], align 8
    %.fca.0.extract57 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract59 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract57, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract57, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract57, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, -6258231685215461775
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %5 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
    %6 = sext i32 %offset.i.i to i64
    %7 = getelementptr ptr, ptr %.fca.0.extract57, i64 %6
    %8 = load ptr, ptr %7, align 8
    %9 = load ptr, ptr %8, align 8
    %10 = tail call { ptr, ptr, ptr, i32 } %9(ptr %.fca.1.extract59)
    %.fca.0.extract49 = extractvalue { ptr, ptr, ptr, i32 } %10, 0
    %.fca.1.extract51 = extractvalue { ptr, ptr, ptr, i32 } %10, 1
    %.fca.2.extract53 = extractvalue { ptr, ptr, ptr, i32 } %10, 2
    %.fca.3.extract55 = extractvalue { ptr, ptr, ptr, i32 } %10, 3
    %11 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract49, 0
    %12 = insertvalue { ptr, ptr, ptr, i32 } %11, ptr %.fca.1.extract51, 1
    %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.2.extract53, 2
    %14 = insertvalue { ptr, ptr, ptr, i32 } %13, i32 %.fca.3.extract55, 3
    %15 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
    %16 = getelementptr i8, ptr %7, i64 16
    %17 = load ptr, ptr %16, align 8
    %18 = tail call ptr %17(ptr %.fca.1.extract59)
    %19 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
    %20 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract49)
    %21 = sext i32 %.fca.3.extract55 to i64
    %22 = getelementptr ptr, ptr %.fca.0.extract49, i64 %21
    %23 = getelementptr i8, ptr %22, i64 8
    %24 = load ptr, ptr %23, align 8
    %25 = call ptr %24({ ptr, ptr, ptr, i32 } %14, ptr nonnull %4)
    %26 = call { ptr, ptr, ptr, i32 } %25({ ptr, ptr, ptr, i32 } %14, { ptr, ptr, ptr, i32 } %14, ptr nonnull %4)
    %27 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
    %28 = getelementptr i8, ptr %7, i64 8
    %29 = load ptr, ptr %28, align 8
    %30 = load ptr, ptr %29, align 8
    %31 = call { ptr, ptr, ptr, i32 } %30(ptr %.fca.1.extract59)
    %.fca.0.extract33 = extractvalue { ptr, ptr, ptr, i32 } %31, 0
    %.fca.1.extract35 = extractvalue { ptr, ptr, ptr, i32 } %31, 1
    %.fca.2.extract37 = extractvalue { ptr, ptr, ptr, i32 } %31, 2
    %.fca.3.extract39 = extractvalue { ptr, ptr, ptr, i32 } %31, 3
    %32 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract33, 0
    %33 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %.fca.1.extract35, 1
    %34 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %.fca.2.extract37, 2
    %35 = insertvalue { ptr, ptr, ptr, i32 } %34, i32 %.fca.3.extract39, 3
    %36 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
    %37 = load ptr, ptr %16, align 8
    %38 = call ptr %37(ptr %.fca.1.extract59)
    %39 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
    %40 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract33)
    %41 = sext i32 %.fca.3.extract39 to i64
    %42 = getelementptr ptr, ptr %.fca.0.extract33, i64 %41
    %43 = getelementptr i8, ptr %42, i64 8
    %44 = load ptr, ptr %43, align 8
    %45 = call ptr %44({ ptr, ptr, ptr, i32 } %35, ptr nonnull %4)
    %46 = call { ptr, ptr, ptr, i32 } %45({ ptr, ptr, ptr, i32 } %35, { ptr, ptr, ptr, i32 } %35, ptr nonnull %4)
    %47 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
    %48 = load ptr, ptr %16, align 8
    %49 = call ptr %48(ptr %.fca.1.extract59)
    %result.i = call noalias dereferenceable_or_null(80) ptr @bump_malloc_inner(i64 noundef 80, ptr nonnull @current_ptr) #26
    %50 = alloca { ptr, ptr, ptr, i32 }, align 8
    %51 = getelementptr inbounds i8, ptr %50, i64 8
    %52 = getelementptr inbounds i8, ptr %50, i64 24
    store ptr @InterleaveIterator2, ptr %50, align 8
    store ptr %result.i, ptr %51, align 8
    store i32 7, ptr %52, align 8
    %53 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %50)
    %54 = getelementptr i8, ptr %result.i, i64 72
    store ptr %49, ptr %54, align 8
    %55 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %54)
    %56 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
    %57 = load ptr, ptr %7, align 8
    %58 = load ptr, ptr %57, align 8
    %59 = call { ptr, ptr, ptr, i32 } %58(ptr %.fca.1.extract59)
    %.fca.0.extract17 = extractvalue { ptr, ptr, ptr, i32 } %59, 0
    %.fca.1.extract19 = extractvalue { ptr, ptr, ptr, i32 } %59, 1
    %.fca.2.extract21 = extractvalue { ptr, ptr, ptr, i32 } %59, 2
    %.fca.3.extract23 = extractvalue { ptr, ptr, ptr, i32 } %59, 3
    %60 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract17, 0
    %61 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %.fca.1.extract19, 1
    %62 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %.fca.2.extract21, 2
    %63 = insertvalue { ptr, ptr, ptr, i32 } %62, i32 %.fca.3.extract23, 3
    %64 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
    %65 = load ptr, ptr %16, align 8
    %66 = call ptr %65(ptr %.fca.1.extract59)
    %67 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
    %68 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract17)
    %69 = sext i32 %.fca.3.extract23 to i64
    %70 = getelementptr ptr, ptr %.fca.0.extract17, i64 %69
    %71 = getelementptr i8, ptr %70, i64 8
    %72 = load ptr, ptr %71, align 8
    %73 = call ptr %72({ ptr, ptr, ptr, i32 } %63, ptr nonnull %4)
    %74 = call { ptr, ptr, ptr, i32 } %73({ ptr, ptr, ptr, i32 } %63, { ptr, ptr, ptr, i32 } %63, ptr nonnull %4)
    %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %74, 0
    %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %74, 1
    %.fca.2.extract13 = extractvalue { ptr, ptr, ptr, i32 } %74, 2
    %hash_coef_ptr.i.i140 = getelementptr i8, ptr %.fca.0.extract9, i64 8
    %tbl_size_ptr.i.i141 = getelementptr i8, ptr %.fca.0.extract9, i64 16
    %offset_tbl_ptr.i.i142 = getelementptr i8, ptr %.fca.0.extract9, i64 40
    %75 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
    %76 = load ptr, ptr %28, align 8
    %77 = load ptr, ptr %76, align 8
    %78 = call { ptr, ptr, ptr, i32 } %77(ptr %.fca.1.extract59)
    %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %78, 0
    %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %78, 1
    %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %78, 2
    %.fca.3.extract7 = extractvalue { ptr, ptr, ptr, i32 } %78, 3
    %79 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
    %80 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %.fca.1.extract3, 1
    %81 = insertvalue { ptr, ptr, ptr, i32 } %80, ptr %.fca.2.extract5, 2
    %82 = insertvalue { ptr, ptr, ptr, i32 } %81, i32 %.fca.3.extract7, 3
    %83 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
    %84 = load ptr, ptr %16, align 8
    %85 = call ptr %84(ptr %.fca.1.extract59)
    %86 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
    %87 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract1)
    %88 = sext i32 %.fca.3.extract7 to i64
    %89 = getelementptr ptr, ptr %.fca.0.extract1, i64 %88
    %90 = getelementptr i8, ptr %89, i64 8
    %91 = load ptr, ptr %90, align 8
    %92 = call ptr %91({ ptr, ptr, ptr, i32 } %82, ptr nonnull %4)
    %93 = call { ptr, ptr, ptr, i32 } %92({ ptr, ptr, ptr, i32 } %82, { ptr, ptr, ptr, i32 } %82, ptr nonnull %4)
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %93, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %93, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %93, 2
    %hash_coef_ptr.i.i170 = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i171 = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i172 = getelementptr i8, ptr %.fca.0.extract, i64 40
    %hash_coef.i.i173 = load i64, ptr %hash_coef_ptr.i.i170, align 4
    %tbl_size.i.i174 = load i64, ptr %tbl_size_ptr.i.i171, align 4
    %offset_tbl.i.i175 = load ptr, ptr %offset_tbl_ptr.i.i172, align 8
    %product.i.i.i176 = mul i64 %hash_coef.i.i173, %const
    %shifted.i.i.i177 = lshr i64 %product.i.i.i176, 32
    %xored.i.i.i178 = xor i64 %shifted.i.i.i177, %product.i.i.i176
    %hash.i.i.i179 = and i64 %xored.i.i.i178, %tbl_size.i.i174
    %offset_ptr.i.i180 = getelementptr i32, ptr %offset_tbl.i.i175, i64 %hash.i.i.i179
    %hash_coef.i.i187 = load i64, ptr %hash_coef_ptr.i.i140, align 4
    %tbl_size.i.i188 = load i64, ptr %tbl_size_ptr.i.i141, align 4
    %offset_tbl.i.i189 = load ptr, ptr %offset_tbl_ptr.i.i142, align 8
    %product.i.i.i190 = mul i64 %hash_coef.i.i187, %const
    %shifted.i.i.i191 = lshr i64 %product.i.i.i190, 32
    %xored.i.i.i192 = xor i64 %shifted.i.i.i191, %product.i.i.i190
    %hash.i.i.i193 = and i64 %xored.i.i.i192, %tbl_size.i.i188
    %offset_ptr.i.i194 = getelementptr i32, ptr %offset_tbl.i.i189, i64 %hash.i.i.i193
    %offset.i.i195 = load i32, ptr %offset_ptr.i.i194, align 4
    %94 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract9, 0
    %95 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %.fca.1.extract11, 1
    %96 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %.fca.2.extract13, 2
    %97 = insertvalue { ptr, ptr, ptr, i32 } %96, i32 %offset.i.i195, 3
    %offset.i.i209 = load i32, ptr %offset_ptr.i.i180, align 4
    %98 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
    %99 = insertvalue { ptr, ptr, ptr, i32 } %98, ptr %.fca.1.extract, 1
    %100 = insertvalue { ptr, ptr, ptr, i32 } %99, ptr %.fca.2.extract, 2
    %101 = insertvalue { ptr, ptr, ptr, i32 } %100, i32 %offset.i.i209, 3
    %102 = load ptr, ptr %50, align 8
    %103 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %102, 0
    %104 = load ptr, ptr %51, align 8
    %105 = insertvalue { ptr, ptr, ptr, i32 } %103, ptr %104, 1
    %106 = getelementptr inbounds i8, ptr %50, i64 16
    %107 = load ptr, ptr %106, align 8
    %108 = insertvalue { ptr, ptr, ptr, i32 } %105, ptr %107, 2
    %109 = load i32, ptr %52, align 8
    %110 = insertvalue { ptr, ptr, ptr, i32 } %108, i32 %109, 3
    %111 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
    %112 = load ptr, ptr %16, align 8
    %113 = call ptr %112(ptr %.fca.1.extract59)
    %result.i211 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #26
    %114 = getelementptr i8, ptr %result.i211, i64 8
    store ptr %113, ptr %114, align 8
    store ptr @Iterator2, ptr %result.i211, align 8
    %result.i212 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #26
    %115 = getelementptr i8, ptr %result.i212, i64 8
    store ptr %113, ptr %115, align 8
    store ptr @Iterator2, ptr %result.i212, align 8
    %116 = alloca [2 x ptr], align 8
    store ptr %result.i211, ptr %116, align 8
    %117 = getelementptr inbounds i8, ptr %116, i64 8
    store ptr %result.i212, ptr %117, align 8
    %118 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %116)
    %119 = call ptr @llvm.invariant.start.p0(i64 88, ptr %102)
    %120 = sext i32 %109 to i64
    %121 = getelementptr ptr, ptr %102, i64 %120
    %122 = getelementptr i8, ptr %121, i64 32
    %123 = load ptr, ptr %122, align 8
    %124 = alloca { ptr, ptr }, align 8
    store ptr %.fca.0.extract9, ptr %124, align 8
    %125 = getelementptr inbounds i8, ptr %124, i64 8
    store ptr %.fca.0.extract, ptr %125, align 8
    %126 = call ptr %123({ ptr, ptr, ptr, i32 } %110, ptr nonnull %124)
    call void %126({ ptr, ptr, ptr, i32 } %110, { ptr, ptr, ptr, i32 } %110, ptr nonnull %116, { ptr, ptr, ptr, i32 } %97, { ptr, ptr, ptr, i32 } %101)
    %127 = load ptr, ptr %50, align 8
    %128 = load ptr, ptr %51, align 8
    %129 = load ptr, ptr %106, align 8
    %hash_coef_ptr.i.i214 = getelementptr i8, ptr %127, i64 8
    %tbl_size_ptr.i.i215 = getelementptr i8, ptr %127, i64 16
    %offset_tbl_ptr.i.i216 = getelementptr i8, ptr %127, i64 40
    %hash_coef.i.i217 = load i64, ptr %hash_coef_ptr.i.i214, align 4
    %tbl_size.i.i218 = load i64, ptr %tbl_size_ptr.i.i215, align 4
    %offset_tbl.i.i219 = load ptr, ptr %offset_tbl_ptr.i.i216, align 8
    %product.i.i.i220 = mul i64 %hash_coef.i.i217, %const
    %shifted.i.i.i221 = lshr i64 %product.i.i.i220, 32
    %xored.i.i.i222 = xor i64 %shifted.i.i.i221, %product.i.i.i220
    %hash.i.i.i223 = and i64 %xored.i.i.i222, %tbl_size.i.i218
    %offset_ptr.i.i224 = getelementptr i32, ptr %offset_tbl.i.i219, i64 %hash.i.i.i223
    %offset.i.i225 = load i32, ptr %offset_ptr.i.i224, align 4
    %130 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %127, 0
    %131 = insertvalue { ptr, ptr, ptr, i32 } %130, ptr %128, 1
    %132 = insertvalue { ptr, ptr, ptr, i32 } %131, ptr %129, 2
    %133 = insertvalue { ptr, ptr, ptr, i32 } %132, i32 %offset.i.i225, 3
    ret { ptr, ptr, ptr, i32 } %133
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define ptr @InterleaveIterator2_field_InterleaveIterator2_0(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 24
    %3 = load ptr, ptr %2, align 8
    ret ptr %3
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @InterleaveIterator2_B_init_firstIterator2T_secondIterator2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 104
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @InterleaveIterator2_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 112
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  define void @InterleaveIterator2_init_firstIterator2T_secondIterator2T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
    %const = bitcast i64 4189192806087951739 to i64
    %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, 6709847746581360093
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
    %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
    %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
    %hash_coef_ptr.i.i18 = getelementptr i8, ptr %.fca.0.extract1, i64 8
    %tbl_size_ptr.i.i19 = getelementptr i8, ptr %.fca.0.extract1, i64 16
    %offset_tbl_ptr.i.i20 = getelementptr i8, ptr %.fca.0.extract1, i64 40
    %hash_coef.i.i21 = load i64, ptr %hash_coef_ptr.i.i18, align 4
    %tbl_size.i.i22 = load i64, ptr %tbl_size_ptr.i.i19, align 4
    %offset_tbl.i.i23 = load ptr, ptr %offset_tbl_ptr.i.i20, align 8
    %product.i.i.i24 = mul i64 %hash_coef.i.i21, %const
    %shifted.i.i.i25 = lshr i64 %product.i.i.i24, 32
    %xored.i.i.i26 = xor i64 %shifted.i.i.i25, %product.i.i.i24
    %hash.i.i.i27 = and i64 %xored.i.i.i26, %tbl_size.i.i22
    %offset_ptr.i.i28 = getelementptr i32, ptr %offset_tbl.i.i23, i64 %hash.i.i.i27
    %offset.i.i43 = load i32, ptr %offset_ptr.i.i28, align 4
    %6 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr %.fca.0.extract9)
    %7 = sext i32 %offset.i.i to i64
    %8 = getelementptr ptr, ptr %.fca.0.extract9, i64 %7
    %9 = load ptr, ptr %8, align 8
    %10 = getelementptr i8, ptr %9, i64 8
    %11 = load ptr, ptr %10, align 8
    %12 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
    %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.1.extract3, 1
    %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.2.extract5, 2
    %15 = insertvalue { ptr, ptr, ptr, i32 } %14, i32 %offset.i.i43, 3
    tail call void %11(ptr %.fca.1.extract11, { ptr, ptr, ptr, i32 } %15)
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 2
    %hash_coef_ptr.i.i46 = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i47 = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i48 = getelementptr i8, ptr %.fca.0.extract, i64 40
    %hash_coef.i.i49 = load i64, ptr %hash_coef_ptr.i.i46, align 4
    %tbl_size.i.i50 = load i64, ptr %tbl_size_ptr.i.i47, align 4
    %offset_tbl.i.i51 = load ptr, ptr %offset_tbl_ptr.i.i48, align 8
    %product.i.i.i52 = mul i64 %hash_coef.i.i49, %const
    %shifted.i.i.i53 = lshr i64 %product.i.i.i52, 32
    %xored.i.i.i54 = xor i64 %shifted.i.i.i53, %product.i.i.i52
    %hash.i.i.i55 = and i64 %xored.i.i.i54, %tbl_size.i.i50
    %offset_ptr.i.i56 = getelementptr i32, ptr %offset_tbl.i.i51, i64 %hash.i.i.i55
    %offset.i.i71 = load i32, ptr %offset_ptr.i.i56, align 4
    %16 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr %.fca.0.extract9)
    %17 = getelementptr i8, ptr %8, i64 8
    %18 = load ptr, ptr %17, align 8
    %19 = getelementptr i8, ptr %18, i64 8
    %20 = load ptr, ptr %19, align 8
    %21 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
    %22 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %.fca.1.extract, 1
    %23 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %.fca.2.extract, 2
    %24 = insertvalue { ptr, ptr, ptr, i32 } %23, i32 %offset.i.i71, 3
    tail call void %20(ptr %.fca.1.extract11, { ptr, ptr, ptr, i32 } %24)
    %25 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr %.fca.0.extract9)
    %26 = getelementptr i8, ptr %8, i64 16
    %27 = load ptr, ptr %26, align 8
    %28 = getelementptr i8, ptr %27, i64 8
    %29 = load ptr, ptr %28, align 8
    tail call void %29(ptr %.fca.1.extract11, i1 true)
    ret void
  }
  
  define { ptr, i160 } @InterleaveIterator2_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
    %4 = alloca [0 x ptr], align 8
    %.fca.0.extract26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract28 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract26, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract26, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract26, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, 6709847746581360093
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %5 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr %.fca.0.extract26)
    %6 = sext i32 %offset.i.i to i64
    %7 = getelementptr ptr, ptr %.fca.0.extract26, i64 %6
    %8 = getelementptr i8, ptr %7, i64 16
    %9 = load ptr, ptr %8, align 8
    %10 = load ptr, ptr %9, align 8
    %11 = tail call i1 %10(ptr %.fca.1.extract28)
    %12 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr nonnull %.fca.0.extract26)
    %13 = load ptr, ptr %8, align 8
    %14 = getelementptr i8, ptr %13, i64 8
    %15 = load ptr, ptr %14, align 8
    br i1 %11, label %16, label %18
  
  16:                                               ; preds = %3
    tail call void %15(ptr %.fca.1.extract28, i1 false)
    %17 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr nonnull %.fca.0.extract26)
    br label %21
  
  18:                                               ; preds = %3
    tail call void %15(ptr %.fca.1.extract28, i1 true)
    %19 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr nonnull %.fca.0.extract26)
    %20 = getelementptr i8, ptr %7, i64 8
    br label %21
  
  21:                                               ; preds = %18, %16
    %.sink.in = phi ptr [ %20, %18 ], [ %7, %16 ]
    %.sink = load ptr, ptr %.sink.in, align 8
    %22 = load ptr, ptr %.sink, align 8
    %23 = tail call { ptr, ptr, ptr, i32 } %22(ptr %.fca.1.extract28)
    %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %23, 0
    %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %23, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %23, 2
    %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %23, 3
    %24 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
    %25 = insertvalue { ptr, ptr, ptr, i32 } %24, ptr %.fca.1.extract2, 1
    %26 = insertvalue { ptr, ptr, ptr, i32 } %25, ptr %.fca.2.extract, 2
    %27 = insertvalue { ptr, ptr, ptr, i32 } %26, i32 %.fca.3.extract, 3
    %28 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr nonnull %.fca.0.extract26)
    %29 = getelementptr i8, ptr %7, i64 24
    %30 = load ptr, ptr %29, align 8
    %31 = tail call ptr %30(ptr %.fca.1.extract28)
    %32 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
    %33 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %.fca.0.extract1)
    %34 = sext i32 %.fca.3.extract to i64
    %35 = getelementptr ptr, ptr %.fca.0.extract1, i64 %34
    %36 = getelementptr i8, ptr %35, i64 8
    %37 = load ptr, ptr %36, align 8
    %38 = call ptr %37({ ptr, ptr, ptr, i32 } %27, ptr nonnull %4)
    %39 = call { ptr, i160 } %38({ ptr, ptr, ptr, i32 } %27, { ptr, ptr, ptr, i32 } %27, ptr nonnull %4)
    ret { ptr, i160 } %39
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define i1 @InterleaveIterator2_getter_on_first(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 64
    %3 = load i1, ptr %2, align 1
    ret i1 %3
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
  define void @InterleaveIterator2_setter_on_first(ptr nocapture writeonly %0, i1 %1) #3 {
    %3 = getelementptr i8, ptr %0, i64 64
    store i1 %1, ptr %3, align 1
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define { ptr, ptr, ptr, i32 } @InterleaveIterator2_getter_second(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 32
    %3 = load ptr, ptr %2, align 8
    %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
    %5 = getelementptr i8, ptr %0, i64 40
    %6 = load ptr, ptr %5, align 8
    %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
    %8 = getelementptr i8, ptr %0, i64 48
    %9 = load ptr, ptr %8, align 8
    %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
    %11 = getelementptr i8, ptr %0, i64 56
    %12 = load i32, ptr %11, align 4
    %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
    ret { ptr, ptr, ptr, i32 } %13
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
  define void @InterleaveIterator2_setter_second(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #3 {
    %3 = getelementptr i8, ptr %0, i64 32
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
    %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
    store ptr %.fca.0.extract, ptr %3, align 8
    %4 = getelementptr i8, ptr %0, i64 40
    store ptr %.fca.1.extract, ptr %4, align 8
    %5 = getelementptr i8, ptr %0, i64 48
    store ptr %.fca.2.extract, ptr %5, align 8
    %6 = getelementptr i8, ptr %0, i64 56
    store i32 %.fca.3.extract, ptr %6, align 4
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define { ptr, ptr, ptr, i32 } @InterleaveIterator2_getter_first(ptr nocapture readonly %0) #0 {
    %2 = load ptr, ptr %0, align 8
    %3 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2, 0
    %4 = getelementptr i8, ptr %0, i64 8
    %5 = load ptr, ptr %4, align 8
    %6 = insertvalue { ptr, ptr, ptr, i32 } %3, ptr %5, 1
    %7 = getelementptr i8, ptr %0, i64 16
    %8 = load ptr, ptr %7, align 8
    %9 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr %8, 2
    %10 = getelementptr i8, ptr %0, i64 24
    %11 = load i32, ptr %10, align 4
    %12 = insertvalue { ptr, ptr, ptr, i32 } %9, i32 %11, 3
    ret { ptr, ptr, ptr, i32 } %12
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
  define void @InterleaveIterator2_setter_first(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #3 {
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
    %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
    store ptr %.fca.0.extract, ptr %0, align 8
    %3 = getelementptr i8, ptr %0, i64 8
    store ptr %.fca.1.extract, ptr %3, align 8
    %4 = getelementptr i8, ptr %0, i64 16
    store ptr %.fca.2.extract, ptr %4, align 8
    %5 = getelementptr i8, ptr %0, i64 24
    store i32 %.fca.3.extract, ptr %5, align 4
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define { ptr, ptr, ptr, i32 } @InterleaveIterable2_getter_second(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 32
    %3 = load ptr, ptr %2, align 8
    %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
    %5 = getelementptr i8, ptr %0, i64 40
    %6 = load ptr, ptr %5, align 8
    %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
    %8 = getelementptr i8, ptr %0, i64 48
    %9 = load ptr, ptr %8, align 8
    %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
    %11 = getelementptr i8, ptr %0, i64 56
    %12 = load i32, ptr %11, align 4
    %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
    ret { ptr, ptr, ptr, i32 } %13
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
  define void @InterleaveIterable2_setter_second(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #3 {
    %3 = getelementptr i8, ptr %0, i64 32
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
    %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
    store ptr %.fca.0.extract, ptr %3, align 8
    %4 = getelementptr i8, ptr %0, i64 40
    store ptr %.fca.1.extract, ptr %4, align 8
    %5 = getelementptr i8, ptr %0, i64 48
    store ptr %.fca.2.extract, ptr %5, align 8
    %6 = getelementptr i8, ptr %0, i64 56
    store i32 %.fca.3.extract, ptr %6, align 4
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define { ptr, ptr, ptr, i32 } @InterleaveIterable2_getter_first(ptr nocapture readonly %0) #0 {
    %2 = load ptr, ptr %0, align 8
    %3 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2, 0
    %4 = getelementptr i8, ptr %0, i64 8
    %5 = load ptr, ptr %4, align 8
    %6 = insertvalue { ptr, ptr, ptr, i32 } %3, ptr %5, 1
    %7 = getelementptr i8, ptr %0, i64 16
    %8 = load ptr, ptr %7, align 8
    %9 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr %8, 2
    %10 = getelementptr i8, ptr %0, i64 24
    %11 = load i32, ptr %10, align 4
    %12 = insertvalue { ptr, ptr, ptr, i32 } %9, i32 %11, 3
    ret { ptr, ptr, ptr, i32 } %12
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
  define void @InterleaveIterable2_setter_first(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #3 {
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
    %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
    store ptr %.fca.0.extract, ptr %0, align 8
    %3 = getelementptr i8, ptr %0, i64 8
    store ptr %.fca.1.extract, ptr %3, align 8
    %4 = getelementptr i8, ptr %0, i64 16
    store ptr %.fca.2.extract, ptr %4, align 8
    %5 = getelementptr i8, ptr %0, i64 24
    store i32 %.fca.3.extract, ptr %5, align 4
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define ptr @ChainIterable2_field_ChainIterable2_0(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 16
    %3 = load ptr, ptr %2, align 8
    ret ptr %3
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @ChainIterable2_B_init_firstIterable2T_secondIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 176
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @ChainIterable2_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 184
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @ChainIterable2_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 192
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @ChainIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 200
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @ChainIterable2_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 208
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @ChainIterable2_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 216
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @ChainIterable2_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 224
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @ChainIterable2_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 232
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @ChainIterable2_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 240
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @ChainIterable2_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 248
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @ChainIterable2_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 256
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @ChainIterable2_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 264
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  define void @ChainIterable2_init_firstIterable2T_secondIterable2T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
    %const = bitcast i64 5693646204635713916 to i64
    %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, -5233298072945030060
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
    %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
    %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
    %hash_coef_ptr.i.i18 = getelementptr i8, ptr %.fca.0.extract1, i64 8
    %tbl_size_ptr.i.i19 = getelementptr i8, ptr %.fca.0.extract1, i64 16
    %offset_tbl_ptr.i.i20 = getelementptr i8, ptr %.fca.0.extract1, i64 40
    %hash_coef.i.i21 = load i64, ptr %hash_coef_ptr.i.i18, align 4
    %tbl_size.i.i22 = load i64, ptr %tbl_size_ptr.i.i19, align 4
    %offset_tbl.i.i23 = load ptr, ptr %offset_tbl_ptr.i.i20, align 8
    %product.i.i.i24 = mul i64 %hash_coef.i.i21, %const
    %shifted.i.i.i25 = lshr i64 %product.i.i.i24, 32
    %xored.i.i.i26 = xor i64 %shifted.i.i.i25, %product.i.i.i24
    %hash.i.i.i27 = and i64 %xored.i.i.i26, %tbl_size.i.i22
    %offset_ptr.i.i28 = getelementptr i32, ptr %offset_tbl.i.i23, i64 %hash.i.i.i27
    %offset.i.i43 = load i32, ptr %offset_ptr.i.i28, align 4
    %6 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract9)
    %7 = sext i32 %offset.i.i to i64
    %8 = getelementptr ptr, ptr %.fca.0.extract9, i64 %7
    %9 = load ptr, ptr %8, align 8
    %10 = getelementptr i8, ptr %9, i64 8
    %11 = load ptr, ptr %10, align 8
    %12 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
    %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.1.extract3, 1
    %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.2.extract5, 2
    %15 = insertvalue { ptr, ptr, ptr, i32 } %14, i32 %offset.i.i43, 3
    tail call void %11(ptr %.fca.1.extract11, { ptr, ptr, ptr, i32 } %15)
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 2
    %hash_coef_ptr.i.i46 = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i47 = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i48 = getelementptr i8, ptr %.fca.0.extract, i64 40
    %hash_coef.i.i49 = load i64, ptr %hash_coef_ptr.i.i46, align 4
    %tbl_size.i.i50 = load i64, ptr %tbl_size_ptr.i.i47, align 4
    %offset_tbl.i.i51 = load ptr, ptr %offset_tbl_ptr.i.i48, align 8
    %product.i.i.i52 = mul i64 %hash_coef.i.i49, %const
    %shifted.i.i.i53 = lshr i64 %product.i.i.i52, 32
    %xored.i.i.i54 = xor i64 %shifted.i.i.i53, %product.i.i.i52
    %hash.i.i.i55 = and i64 %xored.i.i.i54, %tbl_size.i.i50
    %offset_ptr.i.i56 = getelementptr i32, ptr %offset_tbl.i.i51, i64 %hash.i.i.i55
    %offset.i.i71 = load i32, ptr %offset_ptr.i.i56, align 4
    %16 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract9)
    %17 = getelementptr i8, ptr %8, i64 8
    %18 = load ptr, ptr %17, align 8
    %19 = getelementptr i8, ptr %18, i64 8
    %20 = load ptr, ptr %19, align 8
    %21 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
    %22 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %.fca.1.extract, 1
    %23 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %.fca.2.extract, 2
    %24 = insertvalue { ptr, ptr, ptr, i32 } %23, i32 %offset.i.i71, 3
    tail call void %20(ptr %.fca.1.extract11, { ptr, ptr, ptr, i32 } %24)
    ret void
  }
  
  define { ptr, ptr, ptr, i32 } @ChainIterable2_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
    %const = bitcast i64 4189192806087951739 to i64
    %4 = alloca [0 x ptr], align 8
    %.fca.0.extract57 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract59 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract57, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract57, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract57, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, -5233298072945030060
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %5 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
    %6 = sext i32 %offset.i.i to i64
    %7 = getelementptr ptr, ptr %.fca.0.extract57, i64 %6
    %8 = load ptr, ptr %7, align 8
    %9 = load ptr, ptr %8, align 8
    %10 = tail call { ptr, ptr, ptr, i32 } %9(ptr %.fca.1.extract59)
    %.fca.0.extract49 = extractvalue { ptr, ptr, ptr, i32 } %10, 0
    %.fca.1.extract51 = extractvalue { ptr, ptr, ptr, i32 } %10, 1
    %.fca.2.extract53 = extractvalue { ptr, ptr, ptr, i32 } %10, 2
    %.fca.3.extract55 = extractvalue { ptr, ptr, ptr, i32 } %10, 3
    %11 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract49, 0
    %12 = insertvalue { ptr, ptr, ptr, i32 } %11, ptr %.fca.1.extract51, 1
    %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.2.extract53, 2
    %14 = insertvalue { ptr, ptr, ptr, i32 } %13, i32 %.fca.3.extract55, 3
    %15 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
    %16 = getelementptr i8, ptr %7, i64 16
    %17 = load ptr, ptr %16, align 8
    %18 = tail call ptr %17(ptr %.fca.1.extract59)
    %19 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
    %20 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract49)
    %21 = sext i32 %.fca.3.extract55 to i64
    %22 = getelementptr ptr, ptr %.fca.0.extract49, i64 %21
    %23 = getelementptr i8, ptr %22, i64 8
    %24 = load ptr, ptr %23, align 8
    %25 = call ptr %24({ ptr, ptr, ptr, i32 } %14, ptr nonnull %4)
    %26 = call { ptr, ptr, ptr, i32 } %25({ ptr, ptr, ptr, i32 } %14, { ptr, ptr, ptr, i32 } %14, ptr nonnull %4)
    %27 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
    %28 = getelementptr i8, ptr %7, i64 8
    %29 = load ptr, ptr %28, align 8
    %30 = load ptr, ptr %29, align 8
    %31 = call { ptr, ptr, ptr, i32 } %30(ptr %.fca.1.extract59)
    %.fca.0.extract33 = extractvalue { ptr, ptr, ptr, i32 } %31, 0
    %.fca.1.extract35 = extractvalue { ptr, ptr, ptr, i32 } %31, 1
    %.fca.2.extract37 = extractvalue { ptr, ptr, ptr, i32 } %31, 2
    %.fca.3.extract39 = extractvalue { ptr, ptr, ptr, i32 } %31, 3
    %32 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract33, 0
    %33 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %.fca.1.extract35, 1
    %34 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %.fca.2.extract37, 2
    %35 = insertvalue { ptr, ptr, ptr, i32 } %34, i32 %.fca.3.extract39, 3
    %36 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
    %37 = load ptr, ptr %16, align 8
    %38 = call ptr %37(ptr %.fca.1.extract59)
    %39 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
    %40 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract33)
    %41 = sext i32 %.fca.3.extract39 to i64
    %42 = getelementptr ptr, ptr %.fca.0.extract33, i64 %41
    %43 = getelementptr i8, ptr %42, i64 8
    %44 = load ptr, ptr %43, align 8
    %45 = call ptr %44({ ptr, ptr, ptr, i32 } %35, ptr nonnull %4)
    %46 = call { ptr, ptr, ptr, i32 } %45({ ptr, ptr, ptr, i32 } %35, { ptr, ptr, ptr, i32 } %35, ptr nonnull %4)
    %47 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
    %48 = load ptr, ptr %16, align 8
    %49 = call ptr %48(ptr %.fca.1.extract59)
    %result.i = call noalias dereferenceable_or_null(80) ptr @bump_malloc_inner(i64 noundef 80, ptr nonnull @current_ptr) #26
    %50 = alloca { ptr, ptr, ptr, i32 }, align 8
    %51 = getelementptr inbounds i8, ptr %50, i64 8
    %52 = getelementptr inbounds i8, ptr %50, i64 24
    store ptr @ChainIterator2, ptr %50, align 8
    store ptr %result.i, ptr %51, align 8
    store i32 7, ptr %52, align 8
    %53 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %50)
    %54 = getelementptr i8, ptr %result.i, i64 72
    store ptr %49, ptr %54, align 8
    %55 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %54)
    %56 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
    %57 = load ptr, ptr %7, align 8
    %58 = load ptr, ptr %57, align 8
    %59 = call { ptr, ptr, ptr, i32 } %58(ptr %.fca.1.extract59)
    %.fca.0.extract17 = extractvalue { ptr, ptr, ptr, i32 } %59, 0
    %.fca.1.extract19 = extractvalue { ptr, ptr, ptr, i32 } %59, 1
    %.fca.2.extract21 = extractvalue { ptr, ptr, ptr, i32 } %59, 2
    %.fca.3.extract23 = extractvalue { ptr, ptr, ptr, i32 } %59, 3
    %60 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract17, 0
    %61 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %.fca.1.extract19, 1
    %62 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %.fca.2.extract21, 2
    %63 = insertvalue { ptr, ptr, ptr, i32 } %62, i32 %.fca.3.extract23, 3
    %64 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
    %65 = load ptr, ptr %16, align 8
    %66 = call ptr %65(ptr %.fca.1.extract59)
    %67 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
    %68 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract17)
    %69 = sext i32 %.fca.3.extract23 to i64
    %70 = getelementptr ptr, ptr %.fca.0.extract17, i64 %69
    %71 = getelementptr i8, ptr %70, i64 8
    %72 = load ptr, ptr %71, align 8
    %73 = call ptr %72({ ptr, ptr, ptr, i32 } %63, ptr nonnull %4)
    %74 = call { ptr, ptr, ptr, i32 } %73({ ptr, ptr, ptr, i32 } %63, { ptr, ptr, ptr, i32 } %63, ptr nonnull %4)
    %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %74, 0
    %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %74, 1
    %.fca.2.extract13 = extractvalue { ptr, ptr, ptr, i32 } %74, 2
    %hash_coef_ptr.i.i140 = getelementptr i8, ptr %.fca.0.extract9, i64 8
    %tbl_size_ptr.i.i141 = getelementptr i8, ptr %.fca.0.extract9, i64 16
    %offset_tbl_ptr.i.i142 = getelementptr i8, ptr %.fca.0.extract9, i64 40
    %75 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
    %76 = load ptr, ptr %28, align 8
    %77 = load ptr, ptr %76, align 8
    %78 = call { ptr, ptr, ptr, i32 } %77(ptr %.fca.1.extract59)
    %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %78, 0
    %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %78, 1
    %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %78, 2
    %.fca.3.extract7 = extractvalue { ptr, ptr, ptr, i32 } %78, 3
    %79 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
    %80 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %.fca.1.extract3, 1
    %81 = insertvalue { ptr, ptr, ptr, i32 } %80, ptr %.fca.2.extract5, 2
    %82 = insertvalue { ptr, ptr, ptr, i32 } %81, i32 %.fca.3.extract7, 3
    %83 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
    %84 = load ptr, ptr %16, align 8
    %85 = call ptr %84(ptr %.fca.1.extract59)
    %86 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
    %87 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract1)
    %88 = sext i32 %.fca.3.extract7 to i64
    %89 = getelementptr ptr, ptr %.fca.0.extract1, i64 %88
    %90 = getelementptr i8, ptr %89, i64 8
    %91 = load ptr, ptr %90, align 8
    %92 = call ptr %91({ ptr, ptr, ptr, i32 } %82, ptr nonnull %4)
    %93 = call { ptr, ptr, ptr, i32 } %92({ ptr, ptr, ptr, i32 } %82, { ptr, ptr, ptr, i32 } %82, ptr nonnull %4)
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %93, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %93, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %93, 2
    %hash_coef_ptr.i.i170 = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i171 = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i172 = getelementptr i8, ptr %.fca.0.extract, i64 40
    %hash_coef.i.i173 = load i64, ptr %hash_coef_ptr.i.i170, align 4
    %tbl_size.i.i174 = load i64, ptr %tbl_size_ptr.i.i171, align 4
    %offset_tbl.i.i175 = load ptr, ptr %offset_tbl_ptr.i.i172, align 8
    %product.i.i.i176 = mul i64 %hash_coef.i.i173, %const
    %shifted.i.i.i177 = lshr i64 %product.i.i.i176, 32
    %xored.i.i.i178 = xor i64 %shifted.i.i.i177, %product.i.i.i176
    %hash.i.i.i179 = and i64 %xored.i.i.i178, %tbl_size.i.i174
    %offset_ptr.i.i180 = getelementptr i32, ptr %offset_tbl.i.i175, i64 %hash.i.i.i179
    %hash_coef.i.i187 = load i64, ptr %hash_coef_ptr.i.i140, align 4
    %tbl_size.i.i188 = load i64, ptr %tbl_size_ptr.i.i141, align 4
    %offset_tbl.i.i189 = load ptr, ptr %offset_tbl_ptr.i.i142, align 8
    %product.i.i.i190 = mul i64 %hash_coef.i.i187, %const
    %shifted.i.i.i191 = lshr i64 %product.i.i.i190, 32
    %xored.i.i.i192 = xor i64 %shifted.i.i.i191, %product.i.i.i190
    %hash.i.i.i193 = and i64 %xored.i.i.i192, %tbl_size.i.i188
    %offset_ptr.i.i194 = getelementptr i32, ptr %offset_tbl.i.i189, i64 %hash.i.i.i193
    %offset.i.i195 = load i32, ptr %offset_ptr.i.i194, align 4
    %94 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract9, 0
    %95 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %.fca.1.extract11, 1
    %96 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %.fca.2.extract13, 2
    %97 = insertvalue { ptr, ptr, ptr, i32 } %96, i32 %offset.i.i195, 3
    %offset.i.i209 = load i32, ptr %offset_ptr.i.i180, align 4
    %98 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
    %99 = insertvalue { ptr, ptr, ptr, i32 } %98, ptr %.fca.1.extract, 1
    %100 = insertvalue { ptr, ptr, ptr, i32 } %99, ptr %.fca.2.extract, 2
    %101 = insertvalue { ptr, ptr, ptr, i32 } %100, i32 %offset.i.i209, 3
    %102 = load ptr, ptr %50, align 8
    %103 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %102, 0
    %104 = load ptr, ptr %51, align 8
    %105 = insertvalue { ptr, ptr, ptr, i32 } %103, ptr %104, 1
    %106 = getelementptr inbounds i8, ptr %50, i64 16
    %107 = load ptr, ptr %106, align 8
    %108 = insertvalue { ptr, ptr, ptr, i32 } %105, ptr %107, 2
    %109 = load i32, ptr %52, align 8
    %110 = insertvalue { ptr, ptr, ptr, i32 } %108, i32 %109, 3
    %111 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract57)
    %112 = load ptr, ptr %16, align 8
    %113 = call ptr %112(ptr %.fca.1.extract59)
    %result.i211 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #26
    %114 = getelementptr i8, ptr %result.i211, i64 8
    store ptr %113, ptr %114, align 8
    store ptr @Iterator2, ptr %result.i211, align 8
    %result.i212 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #26
    %115 = getelementptr i8, ptr %result.i212, i64 8
    store ptr %113, ptr %115, align 8
    store ptr @Iterator2, ptr %result.i212, align 8
    %116 = alloca [2 x ptr], align 8
    store ptr %result.i211, ptr %116, align 8
    %117 = getelementptr inbounds i8, ptr %116, i64 8
    store ptr %result.i212, ptr %117, align 8
    %118 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %116)
    %119 = call ptr @llvm.invariant.start.p0(i64 88, ptr %102)
    %120 = sext i32 %109 to i64
    %121 = getelementptr ptr, ptr %102, i64 %120
    %122 = getelementptr i8, ptr %121, i64 32
    %123 = load ptr, ptr %122, align 8
    %124 = alloca { ptr, ptr }, align 8
    store ptr %.fca.0.extract9, ptr %124, align 8
    %125 = getelementptr inbounds i8, ptr %124, i64 8
    store ptr %.fca.0.extract, ptr %125, align 8
    %126 = call ptr %123({ ptr, ptr, ptr, i32 } %110, ptr nonnull %124)
    call void %126({ ptr, ptr, ptr, i32 } %110, { ptr, ptr, ptr, i32 } %110, ptr nonnull %116, { ptr, ptr, ptr, i32 } %97, { ptr, ptr, ptr, i32 } %101)
    %127 = load ptr, ptr %50, align 8
    %128 = load ptr, ptr %51, align 8
    %129 = load ptr, ptr %106, align 8
    %hash_coef_ptr.i.i214 = getelementptr i8, ptr %127, i64 8
    %tbl_size_ptr.i.i215 = getelementptr i8, ptr %127, i64 16
    %offset_tbl_ptr.i.i216 = getelementptr i8, ptr %127, i64 40
    %hash_coef.i.i217 = load i64, ptr %hash_coef_ptr.i.i214, align 4
    %tbl_size.i.i218 = load i64, ptr %tbl_size_ptr.i.i215, align 4
    %offset_tbl.i.i219 = load ptr, ptr %offset_tbl_ptr.i.i216, align 8
    %product.i.i.i220 = mul i64 %hash_coef.i.i217, %const
    %shifted.i.i.i221 = lshr i64 %product.i.i.i220, 32
    %xored.i.i.i222 = xor i64 %shifted.i.i.i221, %product.i.i.i220
    %hash.i.i.i223 = and i64 %xored.i.i.i222, %tbl_size.i.i218
    %offset_ptr.i.i224 = getelementptr i32, ptr %offset_tbl.i.i219, i64 %hash.i.i.i223
    %offset.i.i225 = load i32, ptr %offset_ptr.i.i224, align 4
    %130 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %127, 0
    %131 = insertvalue { ptr, ptr, ptr, i32 } %130, ptr %128, 1
    %132 = insertvalue { ptr, ptr, ptr, i32 } %131, ptr %129, 2
    %133 = insertvalue { ptr, ptr, ptr, i32 } %132, i32 %offset.i.i225, 3
    ret { ptr, ptr, ptr, i32 } %133
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define ptr @ChainIterator2_field_ChainIterator2_0(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 24
    %3 = load ptr, ptr %2, align 8
    ret ptr %3
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @ChainIterator2_B_init_firstIterator2T_secondIterator2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 104
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @ChainIterator2_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 112
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  define void @ChainIterator2_init_firstIterator2T_secondIterator2T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
    %const = bitcast i64 4189192806087951739 to i64
    %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, -228267985060461774
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
    %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
    %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
    %hash_coef_ptr.i.i18 = getelementptr i8, ptr %.fca.0.extract1, i64 8
    %tbl_size_ptr.i.i19 = getelementptr i8, ptr %.fca.0.extract1, i64 16
    %offset_tbl_ptr.i.i20 = getelementptr i8, ptr %.fca.0.extract1, i64 40
    %hash_coef.i.i21 = load i64, ptr %hash_coef_ptr.i.i18, align 4
    %tbl_size.i.i22 = load i64, ptr %tbl_size_ptr.i.i19, align 4
    %offset_tbl.i.i23 = load ptr, ptr %offset_tbl_ptr.i.i20, align 8
    %product.i.i.i24 = mul i64 %hash_coef.i.i21, %const
    %shifted.i.i.i25 = lshr i64 %product.i.i.i24, 32
    %xored.i.i.i26 = xor i64 %shifted.i.i.i25, %product.i.i.i24
    %hash.i.i.i27 = and i64 %xored.i.i.i26, %tbl_size.i.i22
    %offset_ptr.i.i28 = getelementptr i32, ptr %offset_tbl.i.i23, i64 %hash.i.i.i27
    %offset.i.i43 = load i32, ptr %offset_ptr.i.i28, align 4
    %6 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr %.fca.0.extract9)
    %7 = sext i32 %offset.i.i to i64
    %8 = getelementptr ptr, ptr %.fca.0.extract9, i64 %7
    %9 = load ptr, ptr %8, align 8
    %10 = getelementptr i8, ptr %9, i64 8
    %11 = load ptr, ptr %10, align 8
    %12 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
    %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.1.extract3, 1
    %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.2.extract5, 2
    %15 = insertvalue { ptr, ptr, ptr, i32 } %14, i32 %offset.i.i43, 3
    tail call void %11(ptr %.fca.1.extract11, { ptr, ptr, ptr, i32 } %15)
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 2
    %hash_coef_ptr.i.i46 = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i47 = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i48 = getelementptr i8, ptr %.fca.0.extract, i64 40
    %hash_coef.i.i49 = load i64, ptr %hash_coef_ptr.i.i46, align 4
    %tbl_size.i.i50 = load i64, ptr %tbl_size_ptr.i.i47, align 4
    %offset_tbl.i.i51 = load ptr, ptr %offset_tbl_ptr.i.i48, align 8
    %product.i.i.i52 = mul i64 %hash_coef.i.i49, %const
    %shifted.i.i.i53 = lshr i64 %product.i.i.i52, 32
    %xored.i.i.i54 = xor i64 %shifted.i.i.i53, %product.i.i.i52
    %hash.i.i.i55 = and i64 %xored.i.i.i54, %tbl_size.i.i50
    %offset_ptr.i.i56 = getelementptr i32, ptr %offset_tbl.i.i51, i64 %hash.i.i.i55
    %offset.i.i71 = load i32, ptr %offset_ptr.i.i56, align 4
    %16 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr %.fca.0.extract9)
    %17 = getelementptr i8, ptr %8, i64 8
    %18 = load ptr, ptr %17, align 8
    %19 = getelementptr i8, ptr %18, i64 8
    %20 = load ptr, ptr %19, align 8
    %21 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
    %22 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %.fca.1.extract, 1
    %23 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %.fca.2.extract, 2
    %24 = insertvalue { ptr, ptr, ptr, i32 } %23, i32 %offset.i.i71, 3
    tail call void %20(ptr %.fca.1.extract11, { ptr, ptr, ptr, i32 } %24)
    %25 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr %.fca.0.extract9)
    %26 = getelementptr i8, ptr %8, i64 16
    %27 = load ptr, ptr %26, align 8
    %28 = getelementptr i8, ptr %27, i64 8
    %29 = load ptr, ptr %28, align 8
    tail call void %29(ptr %.fca.1.extract11, i1 true)
    ret void
  }
  
  define { ptr, i160 } @ChainIterator2_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
    %4 = alloca [0 x ptr], align 8
    %.fca.0.extract25 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract27 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract25, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract25, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract25, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, -228267985060461774
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %5 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr %.fca.0.extract25)
    %6 = sext i32 %offset.i.i to i64
    %7 = getelementptr ptr, ptr %.fca.0.extract25, i64 %6
    %8 = getelementptr i8, ptr %7, i64 16
    %9 = load ptr, ptr %8, align 8
    %10 = load ptr, ptr %9, align 8
    %11 = tail call i1 %10(ptr %.fca.1.extract27)
    %12 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr nonnull %.fca.0.extract25)
    br i1 %11, label %32, label %13
  
  13:                                               ; preds = %3
    %sunkaddr = mul i64 %6, 8
    %sunkaddr2 = getelementptr i8, ptr %.fca.0.extract25, i64 %sunkaddr
    %sunkaddr3 = getelementptr i8, ptr %sunkaddr2, i64 8
    %14 = load ptr, ptr %sunkaddr3, align 8
    %15 = load ptr, ptr %14, align 8
    %16 = tail call { ptr, ptr, ptr, i32 } %15(ptr %.fca.1.extract27)
    %.fca.0.extract7 = extractvalue { ptr, ptr, ptr, i32 } %16, 0
    %.fca.1.extract9 = extractvalue { ptr, ptr, ptr, i32 } %16, 1
    %.fca.2.extract11 = extractvalue { ptr, ptr, ptr, i32 } %16, 2
    %.fca.3.extract13 = extractvalue { ptr, ptr, ptr, i32 } %16, 3
    %17 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract7, 0
    %18 = insertvalue { ptr, ptr, ptr, i32 } %17, ptr %.fca.1.extract9, 1
    %19 = insertvalue { ptr, ptr, ptr, i32 } %18, ptr %.fca.2.extract11, 2
    %20 = insertvalue { ptr, ptr, ptr, i32 } %19, i32 %.fca.3.extract13, 3
    %21 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr nonnull %.fca.0.extract25)
    %sunkaddr4 = mul i64 %6, 8
    %sunkaddr5 = getelementptr i8, ptr %.fca.0.extract25, i64 %sunkaddr4
    %sunkaddr6 = getelementptr i8, ptr %sunkaddr5, i64 24
    %22 = load ptr, ptr %sunkaddr6, align 8
    %23 = tail call ptr %22(ptr %.fca.1.extract27)
    %24 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
    %25 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %.fca.0.extract7)
    %26 = sext i32 %.fca.3.extract13 to i64
    %27 = getelementptr ptr, ptr %.fca.0.extract7, i64 %26
    %28 = getelementptr i8, ptr %27, i64 8
    %29 = load ptr, ptr %28, align 8
    %30 = call ptr %29({ ptr, ptr, ptr, i32 } %20, ptr nonnull %4)
    %31 = call { ptr, i160 } %30({ ptr, ptr, ptr, i32 } %20, { ptr, ptr, ptr, i32 } %20, ptr nonnull %4)
    %.fca.0.extract3 = extractvalue { ptr, i160 } %31, 0
    %.fca.1.extract5 = extractvalue { ptr, i160 } %31, 1
    br label %58
  
  32:                                               ; preds = %3
    %sunkaddr7 = mul i64 %6, 8
    %sunkaddr8 = getelementptr i8, ptr %.fca.0.extract25, i64 %sunkaddr7
    %33 = load ptr, ptr %sunkaddr8, align 8
    %34 = load ptr, ptr %33, align 8
    %35 = tail call { ptr, ptr, ptr, i32 } %34(ptr %.fca.1.extract27)
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %35, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %35, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %35, 2
    %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %35, 3
    %36 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
    %37 = insertvalue { ptr, ptr, ptr, i32 } %36, ptr %.fca.1.extract, 1
    %38 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %.fca.2.extract, 2
    %39 = insertvalue { ptr, ptr, ptr, i32 } %38, i32 %.fca.3.extract, 3
    %40 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr nonnull %.fca.0.extract25)
    %sunkaddr9 = mul i64 %6, 8
    %sunkaddr10 = getelementptr i8, ptr %.fca.0.extract25, i64 %sunkaddr9
    %sunkaddr11 = getelementptr i8, ptr %sunkaddr10, i64 24
    %41 = load ptr, ptr %sunkaddr11, align 8
    %42 = tail call ptr %41(ptr %.fca.1.extract27)
    %43 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
    %44 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %.fca.0.extract)
    %45 = sext i32 %.fca.3.extract to i64
    %46 = getelementptr ptr, ptr %.fca.0.extract, i64 %45
    %47 = getelementptr i8, ptr %46, i64 8
    %48 = load ptr, ptr %47, align 8
    %49 = call ptr %48({ ptr, ptr, ptr, i32 } %39, ptr nonnull %4)
    %50 = call { ptr, i160 } %49({ ptr, ptr, ptr, i32 } %39, { ptr, ptr, ptr, i32 } %39, ptr nonnull %4)
    %.fca.0.extract33 = extractvalue { ptr, i160 } %50, 0
    %51 = icmp eq ptr %.fca.0.extract33, @nil_typ
    %52 = icmp eq ptr %.fca.0.extract33, null
    %.not39.not = or i1 %51, %52
    br i1 %.not39.not, label %._crit_edge.preheader, label %54
  
  ._crit_edge.preheader:                            ; preds = %32
    %53 = call ptr @llvm.invariant.start.p0(i64 88, ptr nonnull %.fca.0.extract25)
    br label %._crit_edge
  
  54:                                               ; preds = %32
    %.fca.1.extract35 = extractvalue { ptr, i160 } %50, 1
    %hash_coef_ptr.i.i72 = getelementptr i8, ptr %.fca.0.extract33, i64 8
    %tbl_size_ptr.i.i73 = getelementptr i8, ptr %.fca.0.extract33, i64 16
    %offset_tbl_ptr.i.i74 = getelementptr i8, ptr %.fca.0.extract33, i64 40
    %hash_coef.i.i75 = load i64, ptr %hash_coef_ptr.i.i72, align 4
    %tbl_size.i.i76 = load i64, ptr %tbl_size_ptr.i.i73, align 4
    %offset_tbl.i.i77 = load ptr, ptr %offset_tbl_ptr.i.i74, align 8
    %product.i.i.i78 = mul i64 %hash_coef.i.i75, 3084208142191802847
    %shifted.i.i.i79 = lshr i64 %product.i.i.i78, 32
    %xored.i.i.i80 = xor i64 %shifted.i.i.i79, %product.i.i.i78
    %hash.i.i.i81 = and i64 %xored.i.i.i80, %tbl_size.i.i76
    %offset_ptr.i.i82 = getelementptr i32, ptr %offset_tbl.i.i77, i64 %hash.i.i.i81
    %offset.i.i83 = load i32, ptr %offset_ptr.i.i82, align 4
    %.sroa.5.8.insert.ext = zext i32 %offset.i.i83 to i160
    %.sroa.5.8.insert.shift = shl nuw i160 %.sroa.5.8.insert.ext, 128
    %.sroa.3.8.insert.ext = and i160 %.fca.1.extract35, 340282366920938463463374607431768211455
    %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.5.8.insert.shift, %.sroa.3.8.insert.ext
    br label %58
  
  ._crit_edge:                                      ; preds = %._crit_edge, %._crit_edge.preheader
    %sunkaddr12 = mul i64 %6, 8
    %sunkaddr13 = getelementptr i8, ptr %.fca.0.extract25, i64 %sunkaddr12
    %sunkaddr14 = getelementptr i8, ptr %sunkaddr13, i64 16
    %55 = load ptr, ptr %sunkaddr14, align 8
    %56 = getelementptr i8, ptr %55, i64 8
    %57 = load ptr, ptr %56, align 8
    call void %57(ptr %.fca.1.extract27, i1 false)
    br label %._crit_edge
  
  58:                                               ; preds = %54, %13
    %.reg2mem24.sroa.0.0 = phi ptr [ %.fca.0.extract3, %13 ], [ %.fca.0.extract33, %54 ]
    %.reg2mem24.sroa.3.0 = phi i160 [ %.fca.1.extract5, %13 ], [ %.sroa.3.8.insert.insert, %54 ]
    %.reload25.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %.reg2mem24.sroa.0.0, 0
    %.reload25.fca.1.insert = insertvalue { ptr, i160 } %.reload25.fca.0.insert, i160 %.reg2mem24.sroa.3.0, 1
    ret { ptr, i160 } %.reload25.fca.1.insert
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define i1 @ChainIterator2_getter_on_first(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 64
    %3 = load i1, ptr %2, align 1
    ret i1 %3
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
  define void @ChainIterator2_setter_on_first(ptr nocapture writeonly %0, i1 %1) #3 {
    %3 = getelementptr i8, ptr %0, i64 64
    store i1 %1, ptr %3, align 1
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define { ptr, ptr, ptr, i32 } @ChainIterator2_getter_second(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 32
    %3 = load ptr, ptr %2, align 8
    %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
    %5 = getelementptr i8, ptr %0, i64 40
    %6 = load ptr, ptr %5, align 8
    %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
    %8 = getelementptr i8, ptr %0, i64 48
    %9 = load ptr, ptr %8, align 8
    %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
    %11 = getelementptr i8, ptr %0, i64 56
    %12 = load i32, ptr %11, align 4
    %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
    ret { ptr, ptr, ptr, i32 } %13
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
  define void @ChainIterator2_setter_second(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #3 {
    %3 = getelementptr i8, ptr %0, i64 32
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
    %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
    store ptr %.fca.0.extract, ptr %3, align 8
    %4 = getelementptr i8, ptr %0, i64 40
    store ptr %.fca.1.extract, ptr %4, align 8
    %5 = getelementptr i8, ptr %0, i64 48
    store ptr %.fca.2.extract, ptr %5, align 8
    %6 = getelementptr i8, ptr %0, i64 56
    store i32 %.fca.3.extract, ptr %6, align 4
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define { ptr, ptr, ptr, i32 } @ChainIterator2_getter_first(ptr nocapture readonly %0) #0 {
    %2 = load ptr, ptr %0, align 8
    %3 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2, 0
    %4 = getelementptr i8, ptr %0, i64 8
    %5 = load ptr, ptr %4, align 8
    %6 = insertvalue { ptr, ptr, ptr, i32 } %3, ptr %5, 1
    %7 = getelementptr i8, ptr %0, i64 16
    %8 = load ptr, ptr %7, align 8
    %9 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr %8, 2
    %10 = getelementptr i8, ptr %0, i64 24
    %11 = load i32, ptr %10, align 4
    %12 = insertvalue { ptr, ptr, ptr, i32 } %9, i32 %11, 3
    ret { ptr, ptr, ptr, i32 } %12
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
  define void @ChainIterator2_setter_first(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #3 {
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
    %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
    store ptr %.fca.0.extract, ptr %0, align 8
    %3 = getelementptr i8, ptr %0, i64 8
    store ptr %.fca.1.extract, ptr %3, align 8
    %4 = getelementptr i8, ptr %0, i64 16
    store ptr %.fca.2.extract, ptr %4, align 8
    %5 = getelementptr i8, ptr %0, i64 24
    store i32 %.fca.3.extract, ptr %5, align 4
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define { ptr, ptr, ptr, i32 } @ChainIterable2_getter_second(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 32
    %3 = load ptr, ptr %2, align 8
    %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
    %5 = getelementptr i8, ptr %0, i64 40
    %6 = load ptr, ptr %5, align 8
    %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
    %8 = getelementptr i8, ptr %0, i64 48
    %9 = load ptr, ptr %8, align 8
    %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
    %11 = getelementptr i8, ptr %0, i64 56
    %12 = load i32, ptr %11, align 4
    %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
    ret { ptr, ptr, ptr, i32 } %13
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
  define void @ChainIterable2_setter_second(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #3 {
    %3 = getelementptr i8, ptr %0, i64 32
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
    %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
    store ptr %.fca.0.extract, ptr %3, align 8
    %4 = getelementptr i8, ptr %0, i64 40
    store ptr %.fca.1.extract, ptr %4, align 8
    %5 = getelementptr i8, ptr %0, i64 48
    store ptr %.fca.2.extract, ptr %5, align 8
    %6 = getelementptr i8, ptr %0, i64 56
    store i32 %.fca.3.extract, ptr %6, align 4
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define { ptr, ptr, ptr, i32 } @ChainIterable2_getter_first(ptr nocapture readonly %0) #0 {
    %2 = load ptr, ptr %0, align 8
    %3 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2, 0
    %4 = getelementptr i8, ptr %0, i64 8
    %5 = load ptr, ptr %4, align 8
    %6 = insertvalue { ptr, ptr, ptr, i32 } %3, ptr %5, 1
    %7 = getelementptr i8, ptr %0, i64 16
    %8 = load ptr, ptr %7, align 8
    %9 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr %8, 2
    %10 = getelementptr i8, ptr %0, i64 24
    %11 = load i32, ptr %10, align 4
    %12 = insertvalue { ptr, ptr, ptr, i32 } %9, i32 %11, 3
    ret { ptr, ptr, ptr, i32 } %12
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
  define void @ChainIterable2_setter_first(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #3 {
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
    %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
    store ptr %.fca.0.extract, ptr %0, align 8
    %3 = getelementptr i8, ptr %0, i64 8
    store ptr %.fca.1.extract, ptr %3, align 8
    %4 = getelementptr i8, ptr %0, i64 16
    store ptr %.fca.2.extract, ptr %4, align 8
    %5 = getelementptr i8, ptr %0, i64 24
    store i32 %.fca.3.extract, ptr %5, align 4
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define ptr @FilterIterable2_field_FilterIterable2_0(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 16
    %3 = load ptr, ptr %2, align 8
    ret ptr %3
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @FilterIterable2_B_init_iterableIterable2T_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 176
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @FilterIterable2_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 184
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @FilterIterable2_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 192
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @FilterIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 200
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @FilterIterable2_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 208
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @FilterIterable2_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 216
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @FilterIterable2_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 224
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @FilterIterable2_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 232
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @FilterIterable2_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 240
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @FilterIterable2_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 248
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @FilterIterable2_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 256
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @FilterIterable2_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 264
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  define void @FilterIterable2_init_iterableIterable2T_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
    %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, 1178467452958968374
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
    %hash_coef_ptr.i.i11 = getelementptr i8, ptr %.fca.0.extract1, i64 8
    %tbl_size_ptr.i.i12 = getelementptr i8, ptr %.fca.0.extract1, i64 16
    %offset_tbl_ptr.i.i13 = getelementptr i8, ptr %.fca.0.extract1, i64 40
    %hash_coef.i.i14 = load i64, ptr %hash_coef_ptr.i.i11, align 4
    %tbl_size.i.i15 = load i64, ptr %tbl_size_ptr.i.i12, align 4
    %offset_tbl.i.i16 = load ptr, ptr %offset_tbl_ptr.i.i13, align 8
    %product.i.i.i17 = mul i64 %hash_coef.i.i14, 5693646204635713916
    %shifted.i.i.i18 = lshr i64 %product.i.i.i17, 32
    %xored.i.i.i19 = xor i64 %shifted.i.i.i18, %product.i.i.i17
    %hash.i.i.i20 = and i64 %xored.i.i.i19, %tbl_size.i.i15
    %offset_ptr.i.i21 = getelementptr i32, ptr %offset_tbl.i.i16, i64 %hash.i.i.i20
    %offset.i.i36 = load i32, ptr %offset_ptr.i.i21, align 4
    %6 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract2)
    %7 = sext i32 %offset.i.i to i64
    %8 = getelementptr ptr, ptr %.fca.0.extract2, i64 %7
    %9 = load ptr, ptr %8, align 8
    %10 = getelementptr i8, ptr %9, i64 8
    %11 = load ptr, ptr %10, align 8
    %12 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
    %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.1.extract, 1
    %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.2.extract, 2
    %15 = insertvalue { ptr, ptr, ptr, i32 } %14, i32 %offset.i.i36, 3
    tail call void %11(ptr %.fca.1.extract4, { ptr, ptr, ptr, i32 } %15)
    %16 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract2)
    %17 = getelementptr i8, ptr %8, i64 8
    %18 = load ptr, ptr %17, align 8
    %19 = getelementptr i8, ptr %18, i64 8
    %20 = load ptr, ptr %19, align 8
    tail call void %20(ptr %.fca.1.extract4, { ptr } %4)
    ret void
  }
  
  define { ptr, ptr, ptr, i32 } @FilterIterable2_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
    %const = bitcast i64 4189192806087951739 to i64
    %4 = alloca [0 x ptr], align 8
    %.fca.0.extract26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract28 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract26, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract26, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract26, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, 1178467452958968374
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %5 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract26)
    %6 = sext i32 %offset.i.i to i64
    %7 = getelementptr ptr, ptr %.fca.0.extract26, i64 %6
    %8 = load ptr, ptr %7, align 8
    %9 = load ptr, ptr %8, align 8
    %10 = tail call { ptr, ptr, ptr, i32 } %9(ptr %.fca.1.extract28)
    %.fca.0.extract18 = extractvalue { ptr, ptr, ptr, i32 } %10, 0
    %.fca.1.extract20 = extractvalue { ptr, ptr, ptr, i32 } %10, 1
    %.fca.2.extract22 = extractvalue { ptr, ptr, ptr, i32 } %10, 2
    %.fca.3.extract24 = extractvalue { ptr, ptr, ptr, i32 } %10, 3
    %11 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract18, 0
    %12 = insertvalue { ptr, ptr, ptr, i32 } %11, ptr %.fca.1.extract20, 1
    %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.2.extract22, 2
    %14 = insertvalue { ptr, ptr, ptr, i32 } %13, i32 %.fca.3.extract24, 3
    %15 = tail call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract26)
    %16 = getelementptr i8, ptr %7, i64 16
    %17 = load ptr, ptr %16, align 8
    %18 = tail call ptr %17(ptr %.fca.1.extract28)
    %19 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
    %20 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract18)
    %21 = sext i32 %.fca.3.extract24 to i64
    %22 = getelementptr ptr, ptr %.fca.0.extract18, i64 %21
    %23 = getelementptr i8, ptr %22, i64 8
    %24 = load ptr, ptr %23, align 8
    %25 = call ptr %24({ ptr, ptr, ptr, i32 } %14, ptr nonnull %4)
    %26 = call { ptr, ptr, ptr, i32 } %25({ ptr, ptr, ptr, i32 } %14, { ptr, ptr, ptr, i32 } %14, ptr nonnull %4)
    %27 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract26)
    %28 = getelementptr i8, ptr %7, i64 8
    %29 = load ptr, ptr %28, align 8
    %30 = load ptr, ptr %29, align 8
    %31 = call { ptr } %30(ptr %.fca.1.extract28)
    %32 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract26)
    %33 = load ptr, ptr %16, align 8
    %34 = call ptr %33(ptr %.fca.1.extract28)
    %result.i = call noalias dereferenceable_or_null(48) ptr @bump_malloc_inner(i64 noundef 48, ptr nonnull @current_ptr) #26
    %35 = alloca { ptr, ptr, ptr, i32 }, align 8
    %36 = getelementptr inbounds i8, ptr %35, i64 8
    %37 = getelementptr inbounds i8, ptr %35, i64 24
    store ptr @FilterIterator2, ptr %35, align 8
    store ptr %result.i, ptr %36, align 8
    store i32 7, ptr %37, align 8
    %38 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %35)
    %39 = getelementptr i8, ptr %result.i, i64 40
    store ptr %34, ptr %39, align 8
    %40 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %39)
    %41 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract26)
    %42 = load ptr, ptr %7, align 8
    %43 = load ptr, ptr %42, align 8
    %44 = call { ptr, ptr, ptr, i32 } %43(ptr %.fca.1.extract28)
    %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %44, 0
    %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %44, 1
    %.fca.2.extract6 = extractvalue { ptr, ptr, ptr, i32 } %44, 2
    %.fca.3.extract8 = extractvalue { ptr, ptr, ptr, i32 } %44, 3
    %45 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract2, 0
    %46 = insertvalue { ptr, ptr, ptr, i32 } %45, ptr %.fca.1.extract4, 1
    %47 = insertvalue { ptr, ptr, ptr, i32 } %46, ptr %.fca.2.extract6, 2
    %48 = insertvalue { ptr, ptr, ptr, i32 } %47, i32 %.fca.3.extract8, 3
    %49 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract26)
    %50 = load ptr, ptr %16, align 8
    %51 = call ptr %50(ptr %.fca.1.extract28)
    %52 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
    %53 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract2)
    %54 = sext i32 %.fca.3.extract8 to i64
    %55 = getelementptr ptr, ptr %.fca.0.extract2, i64 %54
    %56 = getelementptr i8, ptr %55, i64 8
    %57 = load ptr, ptr %56, align 8
    %58 = call ptr %57({ ptr, ptr, ptr, i32 } %48, ptr nonnull %4)
    %59 = call { ptr, ptr, ptr, i32 } %58({ ptr, ptr, ptr, i32 } %48, { ptr, ptr, ptr, i32 } %48, ptr nonnull %4)
    %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %59, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %59, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %59, 2
    %hash_coef_ptr.i.i79 = getelementptr i8, ptr %.fca.0.extract1, i64 8
    %tbl_size_ptr.i.i80 = getelementptr i8, ptr %.fca.0.extract1, i64 16
    %offset_tbl_ptr.i.i81 = getelementptr i8, ptr %.fca.0.extract1, i64 40
    %60 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract26)
    %61 = load ptr, ptr %28, align 8
    %62 = load ptr, ptr %61, align 8
    %63 = call { ptr } %62(ptr %.fca.1.extract28)
    %hash_coef.i.i96 = load i64, ptr %hash_coef_ptr.i.i79, align 4
    %tbl_size.i.i97 = load i64, ptr %tbl_size_ptr.i.i80, align 4
    %offset_tbl.i.i98 = load ptr, ptr %offset_tbl_ptr.i.i81, align 8
    %product.i.i.i99 = mul i64 %hash_coef.i.i96, %const
    %shifted.i.i.i100 = lshr i64 %product.i.i.i99, 32
    %xored.i.i.i101 = xor i64 %shifted.i.i.i100, %product.i.i.i99
    %hash.i.i.i102 = and i64 %xored.i.i.i101, %tbl_size.i.i97
    %offset_ptr.i.i103 = getelementptr i32, ptr %offset_tbl.i.i98, i64 %hash.i.i.i102
    %offset.i.i104 = load i32, ptr %offset_ptr.i.i103, align 4
    %64 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
    %65 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %.fca.1.extract, 1
    %66 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %.fca.2.extract, 2
    %67 = insertvalue { ptr, ptr, ptr, i32 } %66, i32 %offset.i.i104, 3
    %68 = load ptr, ptr %35, align 8
    %69 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %68, 0
    %70 = load ptr, ptr %36, align 8
    %71 = insertvalue { ptr, ptr, ptr, i32 } %69, ptr %70, 1
    %72 = getelementptr inbounds i8, ptr %35, i64 16
    %73 = load ptr, ptr %72, align 8
    %74 = insertvalue { ptr, ptr, ptr, i32 } %71, ptr %73, 2
    %75 = load i32, ptr %37, align 8
    %76 = insertvalue { ptr, ptr, ptr, i32 } %74, i32 %75, 3
    %77 = call ptr @llvm.invariant.start.p0(i64 400, ptr %.fca.0.extract26)
    %78 = load ptr, ptr %16, align 8
    %79 = call ptr %78(ptr %.fca.1.extract28)
    %result.i106 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #26
    %80 = getelementptr i8, ptr %result.i106, i64 8
    store ptr %79, ptr %80, align 8
    store ptr @Iterator2, ptr %result.i106, align 8
    %result.i107 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #26
    %81 = getelementptr i8, ptr %result.i107, i64 16
    store ptr %79, ptr %81, align 8
    %82 = getelementptr i8, ptr %result.i107, i64 8
    store ptr @_parameterization_Ptri1, ptr %82, align 8
    store ptr @function_typ, ptr %result.i107, align 8
    %83 = alloca [2 x ptr], align 8
    store ptr %result.i106, ptr %83, align 8
    %84 = getelementptr inbounds i8, ptr %83, i64 8
    store ptr %result.i107, ptr %84, align 8
    %85 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %83)
    %86 = call ptr @llvm.invariant.start.p0(i64 80, ptr %68)
    %87 = sext i32 %75 to i64
    %88 = getelementptr ptr, ptr %68, i64 %87
    %89 = getelementptr i8, ptr %88, i64 24
    %90 = load ptr, ptr %89, align 8
    %91 = alloca { ptr, ptr }, align 8
    store ptr %.fca.0.extract1, ptr %91, align 8
    %92 = getelementptr inbounds i8, ptr %91, i64 8
    store ptr @function_typ, ptr %92, align 8
    %93 = call ptr %90({ ptr, ptr, ptr, i32 } %76, ptr nonnull %91)
    call void %93({ ptr, ptr, ptr, i32 } %76, { ptr, ptr, ptr, i32 } %76, ptr nonnull %83, { ptr, ptr, ptr, i32 } %67, { ptr } %63)
    %94 = load ptr, ptr %35, align 8
    %95 = load ptr, ptr %36, align 8
    %96 = load ptr, ptr %72, align 8
    %hash_coef_ptr.i.i109 = getelementptr i8, ptr %94, i64 8
    %tbl_size_ptr.i.i110 = getelementptr i8, ptr %94, i64 16
    %offset_tbl_ptr.i.i111 = getelementptr i8, ptr %94, i64 40
    %hash_coef.i.i112 = load i64, ptr %hash_coef_ptr.i.i109, align 4
    %tbl_size.i.i113 = load i64, ptr %tbl_size_ptr.i.i110, align 4
    %offset_tbl.i.i114 = load ptr, ptr %offset_tbl_ptr.i.i111, align 8
    %product.i.i.i115 = mul i64 %hash_coef.i.i112, %const
    %shifted.i.i.i116 = lshr i64 %product.i.i.i115, 32
    %xored.i.i.i117 = xor i64 %shifted.i.i.i116, %product.i.i.i115
    %hash.i.i.i118 = and i64 %xored.i.i.i117, %tbl_size.i.i113
    %offset_ptr.i.i119 = getelementptr i32, ptr %offset_tbl.i.i114, i64 %hash.i.i.i118
    %offset.i.i120 = load i32, ptr %offset_ptr.i.i119, align 4
    %97 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %94, 0
    %98 = insertvalue { ptr, ptr, ptr, i32 } %97, ptr %95, 1
    %99 = insertvalue { ptr, ptr, ptr, i32 } %98, ptr %96, 2
    %100 = insertvalue { ptr, ptr, ptr, i32 } %99, i32 %offset.i.i120, 3
    ret { ptr, ptr, ptr, i32 } %100
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define ptr @FilterIterator2_field_FilterIterator2_0(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 16
    %3 = load ptr, ptr %2, align 8
    ret ptr %3
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @FilterIterator2_B_init_iteratorIterator2T_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 96
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @FilterIterator2_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 104
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  define void @FilterIterator2_init_iteratorIterator2T_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
    %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, 8213847504843366470
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
    %hash_coef_ptr.i.i11 = getelementptr i8, ptr %.fca.0.extract1, i64 8
    %tbl_size_ptr.i.i12 = getelementptr i8, ptr %.fca.0.extract1, i64 16
    %offset_tbl_ptr.i.i13 = getelementptr i8, ptr %.fca.0.extract1, i64 40
    %hash_coef.i.i14 = load i64, ptr %hash_coef_ptr.i.i11, align 4
    %tbl_size.i.i15 = load i64, ptr %tbl_size_ptr.i.i12, align 4
    %offset_tbl.i.i16 = load ptr, ptr %offset_tbl_ptr.i.i13, align 8
    %product.i.i.i17 = mul i64 %hash_coef.i.i14, 4189192806087951739
    %shifted.i.i.i18 = lshr i64 %product.i.i.i17, 32
    %xored.i.i.i19 = xor i64 %shifted.i.i.i18, %product.i.i.i17
    %hash.i.i.i20 = and i64 %xored.i.i.i19, %tbl_size.i.i15
    %offset_ptr.i.i21 = getelementptr i32, ptr %offset_tbl.i.i16, i64 %hash.i.i.i20
    %offset.i.i36 = load i32, ptr %offset_ptr.i.i21, align 4
    %6 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr %.fca.0.extract2)
    %7 = sext i32 %offset.i.i to i64
    %8 = getelementptr ptr, ptr %.fca.0.extract2, i64 %7
    %9 = load ptr, ptr %8, align 8
    %10 = getelementptr i8, ptr %9, i64 8
    %11 = load ptr, ptr %10, align 8
    %12 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
    %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.1.extract, 1
    %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.2.extract, 2
    %15 = insertvalue { ptr, ptr, ptr, i32 } %14, i32 %offset.i.i36, 3
    tail call void %11(ptr %.fca.1.extract4, { ptr, ptr, ptr, i32 } %15)
    %16 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr %.fca.0.extract2)
    %17 = getelementptr i8, ptr %8, i64 8
    %18 = load ptr, ptr %17, align 8
    %19 = getelementptr i8, ptr %18, i64 8
    %20 = load ptr, ptr %19, align 8
    tail call void %20(ptr %.fca.1.extract4, { ptr } %4)
    ret void
  }
  
  define { ptr, i160 } @FilterIterator2_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
    %4 = alloca [0 x ptr], align 8
    %.fca.0.extract31 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract33 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract31, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract31, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract31, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, 8213847504843366470
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %5 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr %.fca.0.extract31)
    %6 = sext i32 %offset.i.i to i64
    %7 = getelementptr ptr, ptr %.fca.0.extract31, i64 %6
    %8 = load ptr, ptr %7, align 8
    %9 = load ptr, ptr %8, align 8
    %10 = tail call { ptr, ptr, ptr, i32 } %9(ptr %.fca.1.extract33)
    %.fca.0.extract14 = extractvalue { ptr, ptr, ptr, i32 } %10, 0
    %.fca.1.extract16 = extractvalue { ptr, ptr, ptr, i32 } %10, 1
    %.fca.2.extract18 = extractvalue { ptr, ptr, ptr, i32 } %10, 2
    %.fca.3.extract20 = extractvalue { ptr, ptr, ptr, i32 } %10, 3
    %11 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract14, 0
    %12 = insertvalue { ptr, ptr, ptr, i32 } %11, ptr %.fca.1.extract16, 1
    %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.2.extract18, 2
    %14 = insertvalue { ptr, ptr, ptr, i32 } %13, i32 %.fca.3.extract20, 3
    %15 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr %.fca.0.extract31)
    %16 = getelementptr i8, ptr %7, i64 16
    %17 = load ptr, ptr %16, align 8
    %18 = tail call ptr %17(ptr %.fca.1.extract33)
    %19 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
    %20 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %.fca.0.extract14)
    %21 = sext i32 %.fca.3.extract20 to i64
    %22 = getelementptr ptr, ptr %.fca.0.extract14, i64 %21
    %23 = getelementptr i8, ptr %22, i64 8
    %24 = load ptr, ptr %23, align 8
    %25 = call ptr %24({ ptr, ptr, ptr, i32 } %14, ptr nonnull %4)
    %26 = call { ptr, i160 } %25({ ptr, ptr, ptr, i32 } %14, { ptr, ptr, ptr, i32 } %14, ptr nonnull %4)
    %.sroa.0111.0157 = extractvalue { ptr, i160 } %26, 0
    %27 = icmp ne ptr %.sroa.0111.0157, @nil_typ
    %28 = icmp ne ptr %.sroa.0111.0157, null
    %.not40158 = and i1 %27, %28
    br i1 %.not40158, label %.lr.ph, label %.loopexit
  
  .lr.ph:                                           ; preds = %3
    %29 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull %.fca.0.extract31)
    br label %30
  
  30:                                               ; preds = %37, %.lr.ph
    %.sroa.0111.0160 = phi ptr [ %.sroa.0111.0157, %.lr.ph ], [ %.sroa.0111.0, %37 ]
    %.pn159 = phi { ptr, i160 } [ %26, %.lr.ph ], [ %56, %37 ]
    %.sroa.3.0 = extractvalue { ptr, i160 } %.pn159, 1
    %hash_coef_ptr.i.i56 = getelementptr i8, ptr %.sroa.0111.0160, i64 8
    %tbl_size_ptr.i.i57 = getelementptr i8, ptr %.sroa.0111.0160, i64 16
    %offset_tbl_ptr.i.i58 = getelementptr i8, ptr %.sroa.0111.0160, i64 40
    %hash_coef.i.i59 = load i64, ptr %hash_coef_ptr.i.i56, align 4
    %tbl_size.i.i60 = load i64, ptr %tbl_size_ptr.i.i57, align 4
    %offset_tbl.i.i61 = load ptr, ptr %offset_tbl_ptr.i.i58, align 8
    %product.i.i.i62 = mul i64 %hash_coef.i.i59, 3084208142191802847
    %shifted.i.i.i63 = lshr i64 %product.i.i.i62, 32
    %xored.i.i.i64 = xor i64 %shifted.i.i.i63, %product.i.i.i62
    %hash.i.i.i65 = and i64 %xored.i.i.i64, %tbl_size.i.i60
    %offset_ptr.i.i66 = getelementptr i32, ptr %offset_tbl.i.i61, i64 %hash.i.i.i65
    %offset.i.i67 = load i32, ptr %offset_ptr.i.i66, align 4
    %.sroa.7.8.insert.ext = zext i32 %offset.i.i67 to i160
    %.sroa.7.8.insert.shift = shl nuw i160 %.sroa.7.8.insert.ext, 128
    %31 = insertvalue { ptr, i160 } undef, ptr %.sroa.0111.0160, 0
    %.sroa.3.8.insert.ext = and i160 %.sroa.3.0, 340282366920938463463374607431768211455
    %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.7.8.insert.shift, %.sroa.3.8.insert.ext
    %32 = insertvalue { ptr, i160 } %31, i160 %.sroa.3.8.insert.insert, 1
    %sunkaddr = mul i64 %6, 8
    %sunkaddr1 = getelementptr i8, ptr %.fca.0.extract31, i64 %sunkaddr
    %sunkaddr2 = getelementptr i8, ptr %sunkaddr1, i64 8
    %33 = load ptr, ptr %sunkaddr2, align 8
    %34 = load ptr, ptr %33, align 8
    %35 = call { ptr } %34(ptr %.fca.1.extract33)
    %.fca.0.extract5 = extractvalue { ptr } %35, 0
    %36 = call i1 %.fca.0.extract5({ ptr, i160 } %32)
    br i1 %36, label %.loopexit, label %37
  
  37:                                               ; preds = %30
    %38 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull %.fca.0.extract31)
    %sunkaddr3 = mul i64 %6, 8
    %sunkaddr4 = getelementptr i8, ptr %.fca.0.extract31, i64 %sunkaddr3
    %39 = load ptr, ptr %sunkaddr4, align 8
    %40 = load ptr, ptr %39, align 8
    %41 = call { ptr, ptr, ptr, i32 } %40(ptr %.fca.1.extract33)
    %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %41, 0
    %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %41, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %41, 2
    %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %41, 3
    %42 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract2, 0
    %43 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %.fca.1.extract3, 1
    %44 = insertvalue { ptr, ptr, ptr, i32 } %43, ptr %.fca.2.extract, 2
    %45 = insertvalue { ptr, ptr, ptr, i32 } %44, i32 %.fca.3.extract, 3
    %46 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull %.fca.0.extract31)
    %sunkaddr5 = mul i64 %6, 8
    %sunkaddr6 = getelementptr i8, ptr %.fca.0.extract31, i64 %sunkaddr5
    %sunkaddr7 = getelementptr i8, ptr %sunkaddr6, i64 16
    %47 = load ptr, ptr %sunkaddr7, align 8
    %48 = call ptr %47(ptr %.fca.1.extract33)
    %49 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
    %50 = call ptr @llvm.invariant.start.p0(i64 24, ptr %.fca.0.extract2)
    %51 = sext i32 %.fca.3.extract to i64
    %52 = getelementptr ptr, ptr %.fca.0.extract2, i64 %51
    %53 = getelementptr i8, ptr %52, i64 8
    %54 = load ptr, ptr %53, align 8
    %55 = call ptr %54({ ptr, ptr, ptr, i32 } %45, ptr nonnull %4)
    %56 = call { ptr, i160 } %55({ ptr, ptr, ptr, i32 } %45, { ptr, ptr, ptr, i32 } %45, ptr nonnull %4)
    %.sroa.0111.0 = extractvalue { ptr, i160 } %56, 0
    %57 = icmp ne ptr %.sroa.0111.0, @nil_typ
    %58 = icmp ne ptr %.sroa.0111.0, null
    %.not40 = and i1 %57, %58
    br i1 %.not40, label %30, label %.loopexit
  
  .loopexit:                                        ; preds = %37, %30, %3
    %59 = phi ptr [ @nil_typ, %3 ], [ %.sroa.0111.0160, %30 ], [ @nil_typ, %37 ]
    %60 = phi i160 [ undef, %3 ], [ %.sroa.3.8.insert.insert, %30 ], [ %.sroa.3.8.insert.insert, %37 ]
    %.reload26.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %59, 0
    %.reload26.fca.1.insert = insertvalue { ptr, i160 } %.reload26.fca.0.insert, i160 %60, 1
    ret { ptr, i160 } %.reload26.fca.1.insert
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define { ptr } @FilterIterator2_getter_f(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 32
    %3 = load ptr, ptr %2, align 8
    %4 = insertvalue { ptr } undef, ptr %3, 0
    ret { ptr } %4
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
  define void @FilterIterator2_setter_f(ptr nocapture writeonly %0, { ptr } %1) #3 {
    %3 = getelementptr i8, ptr %0, i64 32
    %.fca.0.extract = extractvalue { ptr } %1, 0
    store ptr %.fca.0.extract, ptr %3, align 8
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define { ptr, ptr, ptr, i32 } @FilterIterator2_getter_iterator(ptr nocapture readonly %0) #0 {
    %2 = load ptr, ptr %0, align 8
    %3 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2, 0
    %4 = getelementptr i8, ptr %0, i64 8
    %5 = load ptr, ptr %4, align 8
    %6 = insertvalue { ptr, ptr, ptr, i32 } %3, ptr %5, 1
    %7 = getelementptr i8, ptr %0, i64 16
    %8 = load ptr, ptr %7, align 8
    %9 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr %8, 2
    %10 = getelementptr i8, ptr %0, i64 24
    %11 = load i32, ptr %10, align 4
    %12 = insertvalue { ptr, ptr, ptr, i32 } %9, i32 %11, 3
    ret { ptr, ptr, ptr, i32 } %12
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
  define void @FilterIterator2_setter_iterator(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #3 {
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
    %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
    store ptr %.fca.0.extract, ptr %0, align 8
    %3 = getelementptr i8, ptr %0, i64 8
    store ptr %.fca.1.extract, ptr %3, align 8
    %4 = getelementptr i8, ptr %0, i64 16
    store ptr %.fca.2.extract, ptr %4, align 8
    %5 = getelementptr i8, ptr %0, i64 24
    store i32 %.fca.3.extract, ptr %5, align 4
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define { ptr } @FilterIterable2_getter_f(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 32
    %3 = load ptr, ptr %2, align 8
    %4 = insertvalue { ptr } undef, ptr %3, 0
    ret { ptr } %4
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
  define void @FilterIterable2_setter_f(ptr nocapture writeonly %0, { ptr } %1) #3 {
    %3 = getelementptr i8, ptr %0, i64 32
    %.fca.0.extract = extractvalue { ptr } %1, 0
    store ptr %.fca.0.extract, ptr %3, align 8
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define { ptr, ptr, ptr, i32 } @FilterIterable2_getter_iterable(ptr nocapture readonly %0) #0 {
    %2 = load ptr, ptr %0, align 8
    %3 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2, 0
    %4 = getelementptr i8, ptr %0, i64 8
    %5 = load ptr, ptr %4, align 8
    %6 = insertvalue { ptr, ptr, ptr, i32 } %3, ptr %5, 1
    %7 = getelementptr i8, ptr %0, i64 16
    %8 = load ptr, ptr %7, align 8
    %9 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr %8, 2
    %10 = getelementptr i8, ptr %0, i64 24
    %11 = load i32, ptr %10, align 4
    %12 = insertvalue { ptr, ptr, ptr, i32 } %9, i32 %11, 3
    ret { ptr, ptr, ptr, i32 } %12
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
  define void @FilterIterable2_setter_iterable(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #3 {
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
    %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
    store ptr %.fca.0.extract, ptr %0, align 8
    %3 = getelementptr i8, ptr %0, i64 8
    store ptr %.fca.1.extract, ptr %3, align 8
    %4 = getelementptr i8, ptr %0, i64 16
    store ptr %.fca.2.extract, ptr %4, align 8
    %5 = getelementptr i8, ptr %0, i64 24
    store i32 %.fca.3.extract, ptr %5, align 4
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define ptr @MapIterable2_field_MapIterable2_0(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 16
    %3 = load ptr, ptr %2, align 8
    ret ptr %3
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define ptr @MapIterable2_field_MapIterable2_1(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 24
    %3 = load ptr, ptr %2, align 8
    ret ptr %3
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @MapIterable2_B_init_iterableIterable2T_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 184
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @MapIterable2_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 192
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @MapIterable2_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 200
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @MapIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 208
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @MapIterable2_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 216
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @MapIterable2_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 224
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @MapIterable2_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 232
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @MapIterable2_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 240
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @MapIterable2_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 248
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @MapIterable2_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 256
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @MapIterable2_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 264
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @MapIterable2_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 272
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  define void @MapIterable2_init_iterableIterable2T_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
    %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, -1724859134596891929
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
    %hash_coef_ptr.i.i11 = getelementptr i8, ptr %.fca.0.extract1, i64 8
    %tbl_size_ptr.i.i12 = getelementptr i8, ptr %.fca.0.extract1, i64 16
    %offset_tbl_ptr.i.i13 = getelementptr i8, ptr %.fca.0.extract1, i64 40
    %hash_coef.i.i14 = load i64, ptr %hash_coef_ptr.i.i11, align 4
    %tbl_size.i.i15 = load i64, ptr %tbl_size_ptr.i.i12, align 4
    %offset_tbl.i.i16 = load ptr, ptr %offset_tbl_ptr.i.i13, align 8
    %product.i.i.i17 = mul i64 %hash_coef.i.i14, 5693646204635713916
    %shifted.i.i.i18 = lshr i64 %product.i.i.i17, 32
    %xored.i.i.i19 = xor i64 %shifted.i.i.i18, %product.i.i.i17
    %hash.i.i.i20 = and i64 %xored.i.i.i19, %tbl_size.i.i15
    %offset_ptr.i.i21 = getelementptr i32, ptr %offset_tbl.i.i16, i64 %hash.i.i.i20
    %offset.i.i36 = load i32, ptr %offset_ptr.i.i21, align 4
    %6 = tail call ptr @llvm.invariant.start.p0(i64 408, ptr %.fca.0.extract2)
    %7 = sext i32 %offset.i.i to i64
    %8 = getelementptr ptr, ptr %.fca.0.extract2, i64 %7
    %9 = load ptr, ptr %8, align 8
    %10 = getelementptr i8, ptr %9, i64 8
    %11 = load ptr, ptr %10, align 8
    %12 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
    %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.1.extract, 1
    %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.2.extract, 2
    %15 = insertvalue { ptr, ptr, ptr, i32 } %14, i32 %offset.i.i36, 3
    tail call void %11(ptr %.fca.1.extract4, { ptr, ptr, ptr, i32 } %15)
    %16 = tail call ptr @llvm.invariant.start.p0(i64 408, ptr %.fca.0.extract2)
    %17 = getelementptr i8, ptr %8, i64 8
    %18 = load ptr, ptr %17, align 8
    %19 = getelementptr i8, ptr %18, i64 8
    %20 = load ptr, ptr %19, align 8
    tail call void %20(ptr %.fca.1.extract4, { ptr } %4)
    ret void
  }
  
  define { ptr, ptr, ptr, i32 } @MapIterable2_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
    %const = bitcast i64 4189192806087951739 to i64
    %4 = alloca [0 x ptr], align 8
    %.fca.0.extract26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract28 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract26, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract26, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract26, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, -1724859134596891929
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %5 = tail call ptr @llvm.invariant.start.p0(i64 408, ptr %.fca.0.extract26)
    %6 = sext i32 %offset.i.i to i64
    %7 = getelementptr ptr, ptr %.fca.0.extract26, i64 %6
    %8 = load ptr, ptr %7, align 8
    %9 = load ptr, ptr %8, align 8
    %10 = tail call { ptr, ptr, ptr, i32 } %9(ptr %.fca.1.extract28)
    %.fca.0.extract18 = extractvalue { ptr, ptr, ptr, i32 } %10, 0
    %.fca.1.extract20 = extractvalue { ptr, ptr, ptr, i32 } %10, 1
    %.fca.2.extract22 = extractvalue { ptr, ptr, ptr, i32 } %10, 2
    %.fca.3.extract24 = extractvalue { ptr, ptr, ptr, i32 } %10, 3
    %11 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract18, 0
    %12 = insertvalue { ptr, ptr, ptr, i32 } %11, ptr %.fca.1.extract20, 1
    %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.2.extract22, 2
    %14 = insertvalue { ptr, ptr, ptr, i32 } %13, i32 %.fca.3.extract24, 3
    %15 = tail call ptr @llvm.invariant.start.p0(i64 408, ptr %.fca.0.extract26)
    %16 = getelementptr i8, ptr %7, i64 16
    %17 = load ptr, ptr %16, align 8
    %18 = tail call ptr %17(ptr %.fca.1.extract28)
    %19 = tail call ptr @llvm.invariant.start.p0(i64 408, ptr %.fca.0.extract26)
    %20 = getelementptr i8, ptr %7, i64 24
    %21 = load ptr, ptr %20, align 8
    %22 = tail call ptr %21(ptr %.fca.1.extract28)
    %23 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
    %24 = tail call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract18)
    %25 = sext i32 %.fca.3.extract24 to i64
    %26 = getelementptr ptr, ptr %.fca.0.extract18, i64 %25
    %27 = getelementptr i8, ptr %26, i64 8
    %28 = load ptr, ptr %27, align 8
    %29 = call ptr %28({ ptr, ptr, ptr, i32 } %14, ptr nonnull %4)
    %30 = call { ptr, ptr, ptr, i32 } %29({ ptr, ptr, ptr, i32 } %14, { ptr, ptr, ptr, i32 } %14, ptr nonnull %4)
    %31 = call ptr @llvm.invariant.start.p0(i64 408, ptr %.fca.0.extract26)
    %32 = getelementptr i8, ptr %7, i64 8
    %33 = load ptr, ptr %32, align 8
    %34 = load ptr, ptr %33, align 8
    %35 = call { ptr } %34(ptr %.fca.1.extract28)
    %36 = call ptr @llvm.invariant.start.p0(i64 408, ptr %.fca.0.extract26)
    %37 = load ptr, ptr %16, align 8
    %38 = call ptr %37(ptr %.fca.1.extract28)
    %39 = call ptr @llvm.invariant.start.p0(i64 408, ptr %.fca.0.extract26)
    %40 = load ptr, ptr %20, align 8
    %41 = call ptr %40(ptr %.fca.1.extract28)
    %result.i = call noalias dereferenceable_or_null(56) ptr @bump_malloc_inner(i64 noundef 56, ptr nonnull @current_ptr) #26
    %42 = alloca { ptr, ptr, ptr, i32 }, align 8
    %43 = getelementptr inbounds i8, ptr %42, i64 8
    %44 = getelementptr inbounds i8, ptr %42, i64 24
    store ptr @MapIterator2, ptr %42, align 8
    store ptr %result.i, ptr %43, align 8
    store i32 7, ptr %44, align 8
    %45 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %42)
    %46 = getelementptr i8, ptr %result.i, i64 40
    store ptr %38, ptr %46, align 8
    %47 = getelementptr i8, ptr %result.i, i64 48
    store ptr %41, ptr %47, align 8
    %48 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %46)
    %49 = call ptr @llvm.invariant.start.p0(i64 408, ptr %.fca.0.extract26)
    %50 = load ptr, ptr %7, align 8
    %51 = load ptr, ptr %50, align 8
    %52 = call { ptr, ptr, ptr, i32 } %51(ptr %.fca.1.extract28)
    %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %52, 0
    %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %52, 1
    %.fca.2.extract6 = extractvalue { ptr, ptr, ptr, i32 } %52, 2
    %.fca.3.extract8 = extractvalue { ptr, ptr, ptr, i32 } %52, 3
    %53 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract2, 0
    %54 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %.fca.1.extract4, 1
    %55 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %.fca.2.extract6, 2
    %56 = insertvalue { ptr, ptr, ptr, i32 } %55, i32 %.fca.3.extract8, 3
    %57 = call ptr @llvm.invariant.start.p0(i64 408, ptr %.fca.0.extract26)
    %58 = load ptr, ptr %16, align 8
    %59 = call ptr %58(ptr %.fca.1.extract28)
    %60 = call ptr @llvm.invariant.start.p0(i64 408, ptr %.fca.0.extract26)
    %61 = load ptr, ptr %20, align 8
    %62 = call ptr %61(ptr %.fca.1.extract28)
    %63 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
    %64 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract2)
    %65 = sext i32 %.fca.3.extract8 to i64
    %66 = getelementptr ptr, ptr %.fca.0.extract2, i64 %65
    %67 = getelementptr i8, ptr %66, i64 8
    %68 = load ptr, ptr %67, align 8
    %69 = call ptr %68({ ptr, ptr, ptr, i32 } %56, ptr nonnull %4)
    %70 = call { ptr, ptr, ptr, i32 } %69({ ptr, ptr, ptr, i32 } %56, { ptr, ptr, ptr, i32 } %56, ptr nonnull %4)
    %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %70, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %70, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %70, 2
    %hash_coef_ptr.i.i79 = getelementptr i8, ptr %.fca.0.extract1, i64 8
    %tbl_size_ptr.i.i80 = getelementptr i8, ptr %.fca.0.extract1, i64 16
    %offset_tbl_ptr.i.i81 = getelementptr i8, ptr %.fca.0.extract1, i64 40
    %71 = call ptr @llvm.invariant.start.p0(i64 408, ptr %.fca.0.extract26)
    %72 = load ptr, ptr %32, align 8
    %73 = load ptr, ptr %72, align 8
    %74 = call { ptr } %73(ptr %.fca.1.extract28)
    %hash_coef.i.i96 = load i64, ptr %hash_coef_ptr.i.i79, align 4
    %tbl_size.i.i97 = load i64, ptr %tbl_size_ptr.i.i80, align 4
    %offset_tbl.i.i98 = load ptr, ptr %offset_tbl_ptr.i.i81, align 8
    %product.i.i.i99 = mul i64 %hash_coef.i.i96, %const
    %shifted.i.i.i100 = lshr i64 %product.i.i.i99, 32
    %xored.i.i.i101 = xor i64 %shifted.i.i.i100, %product.i.i.i99
    %hash.i.i.i102 = and i64 %xored.i.i.i101, %tbl_size.i.i97
    %offset_ptr.i.i103 = getelementptr i32, ptr %offset_tbl.i.i98, i64 %hash.i.i.i102
    %offset.i.i104 = load i32, ptr %offset_ptr.i.i103, align 4
    %75 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
    %76 = insertvalue { ptr, ptr, ptr, i32 } %75, ptr %.fca.1.extract, 1
    %77 = insertvalue { ptr, ptr, ptr, i32 } %76, ptr %.fca.2.extract, 2
    %78 = insertvalue { ptr, ptr, ptr, i32 } %77, i32 %offset.i.i104, 3
    %79 = load ptr, ptr %42, align 8
    %80 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %79, 0
    %81 = load ptr, ptr %43, align 8
    %82 = insertvalue { ptr, ptr, ptr, i32 } %80, ptr %81, 1
    %83 = getelementptr inbounds i8, ptr %42, i64 16
    %84 = load ptr, ptr %83, align 8
    %85 = insertvalue { ptr, ptr, ptr, i32 } %82, ptr %84, 2
    %86 = load i32, ptr %44, align 8
    %87 = insertvalue { ptr, ptr, ptr, i32 } %85, i32 %86, 3
    %88 = call ptr @llvm.invariant.start.p0(i64 408, ptr %.fca.0.extract26)
    %89 = load ptr, ptr %16, align 8
    %90 = call ptr %89(ptr %.fca.1.extract28)
    %91 = call ptr @llvm.invariant.start.p0(i64 408, ptr %.fca.0.extract26)
    %92 = load ptr, ptr %20, align 8
    %93 = call ptr %92(ptr %.fca.1.extract28)
    %result.i106 = call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #26
    %94 = getelementptr i8, ptr %result.i106, i64 8
    store ptr %90, ptr %94, align 8
    store ptr @Iterator2, ptr %result.i106, align 8
    %result.i107 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #26
    %95 = getelementptr i8, ptr %result.i107, i64 16
    store ptr %90, ptr %95, align 8
    %96 = getelementptr i8, ptr %result.i107, i64 8
    store ptr %93, ptr %96, align 8
    store ptr @function_typ, ptr %result.i107, align 8
    %97 = alloca [2 x ptr], align 8
    store ptr %result.i106, ptr %97, align 8
    %98 = getelementptr inbounds i8, ptr %97, i64 8
    store ptr %result.i107, ptr %98, align 8
    %99 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %97)
    %100 = call ptr @llvm.invariant.start.p0(i64 88, ptr %79)
    %101 = sext i32 %86 to i64
    %102 = getelementptr ptr, ptr %79, i64 %101
    %103 = getelementptr i8, ptr %102, i64 32
    %104 = load ptr, ptr %103, align 8
    %105 = alloca { ptr, ptr }, align 8
    store ptr %.fca.0.extract1, ptr %105, align 8
    %106 = getelementptr inbounds i8, ptr %105, i64 8
    store ptr @function_typ, ptr %106, align 8
    %107 = call ptr %104({ ptr, ptr, ptr, i32 } %87, ptr nonnull %105)
    call void %107({ ptr, ptr, ptr, i32 } %87, { ptr, ptr, ptr, i32 } %87, ptr nonnull %97, { ptr, ptr, ptr, i32 } %78, { ptr } %74)
    %108 = load ptr, ptr %42, align 8
    %109 = load ptr, ptr %43, align 8
    %110 = load ptr, ptr %83, align 8
    %hash_coef_ptr.i.i109 = getelementptr i8, ptr %108, i64 8
    %tbl_size_ptr.i.i110 = getelementptr i8, ptr %108, i64 16
    %offset_tbl_ptr.i.i111 = getelementptr i8, ptr %108, i64 40
    %hash_coef.i.i112 = load i64, ptr %hash_coef_ptr.i.i109, align 4
    %tbl_size.i.i113 = load i64, ptr %tbl_size_ptr.i.i110, align 4
    %offset_tbl.i.i114 = load ptr, ptr %offset_tbl_ptr.i.i111, align 8
    %product.i.i.i115 = mul i64 %hash_coef.i.i112, %const
    %shifted.i.i.i116 = lshr i64 %product.i.i.i115, 32
    %xored.i.i.i117 = xor i64 %shifted.i.i.i116, %product.i.i.i115
    %hash.i.i.i118 = and i64 %xored.i.i.i117, %tbl_size.i.i113
    %offset_ptr.i.i119 = getelementptr i32, ptr %offset_tbl.i.i114, i64 %hash.i.i.i118
    %offset.i.i120 = load i32, ptr %offset_ptr.i.i119, align 4
    %111 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %108, 0
    %112 = insertvalue { ptr, ptr, ptr, i32 } %111, ptr %109, 1
    %113 = insertvalue { ptr, ptr, ptr, i32 } %112, ptr %110, 2
    %114 = insertvalue { ptr, ptr, ptr, i32 } %113, i32 %offset.i.i120, 3
    ret { ptr, ptr, ptr, i32 } %114
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define ptr @MapIterator2_field_MapIterator2_0(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 16
    %3 = load ptr, ptr %2, align 8
    ret ptr %3
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define ptr @MapIterator2_field_MapIterator2_1(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 24
    %3 = load ptr, ptr %2, align 8
    ret ptr %3
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @MapIterator2_B_init_iteratorIterator2T_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 104
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @MapIterator2_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 112
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  define void @MapIterator2_init_iteratorIterator2T_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
    %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, -10255947709272500
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
    %hash_coef_ptr.i.i11 = getelementptr i8, ptr %.fca.0.extract1, i64 8
    %tbl_size_ptr.i.i12 = getelementptr i8, ptr %.fca.0.extract1, i64 16
    %offset_tbl_ptr.i.i13 = getelementptr i8, ptr %.fca.0.extract1, i64 40
    %hash_coef.i.i14 = load i64, ptr %hash_coef_ptr.i.i11, align 4
    %tbl_size.i.i15 = load i64, ptr %tbl_size_ptr.i.i12, align 4
    %offset_tbl.i.i16 = load ptr, ptr %offset_tbl_ptr.i.i13, align 8
    %product.i.i.i17 = mul i64 %hash_coef.i.i14, 4189192806087951739
    %shifted.i.i.i18 = lshr i64 %product.i.i.i17, 32
    %xored.i.i.i19 = xor i64 %shifted.i.i.i18, %product.i.i.i17
    %hash.i.i.i20 = and i64 %xored.i.i.i19, %tbl_size.i.i15
    %offset_ptr.i.i21 = getelementptr i32, ptr %offset_tbl.i.i16, i64 %hash.i.i.i20
    %offset.i.i36 = load i32, ptr %offset_ptr.i.i21, align 4
    %6 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr %.fca.0.extract2)
    %7 = sext i32 %offset.i.i to i64
    %8 = getelementptr ptr, ptr %.fca.0.extract2, i64 %7
    %9 = load ptr, ptr %8, align 8
    %10 = getelementptr i8, ptr %9, i64 8
    %11 = load ptr, ptr %10, align 8
    %12 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
    %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.1.extract, 1
    %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.2.extract, 2
    %15 = insertvalue { ptr, ptr, ptr, i32 } %14, i32 %offset.i.i36, 3
    tail call void %11(ptr %.fca.1.extract4, { ptr, ptr, ptr, i32 } %15)
    %16 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr %.fca.0.extract2)
    %17 = getelementptr i8, ptr %8, i64 8
    %18 = load ptr, ptr %17, align 8
    %19 = getelementptr i8, ptr %18, i64 8
    %20 = load ptr, ptr %19, align 8
    tail call void %20(ptr %.fca.1.extract4, { ptr } %4)
    ret void
  }
  
  define { ptr, i160 } @MapIterator2_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
    %4 = alloca [0 x ptr], align 8
    %.fca.0.extract18 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract20 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract18, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract18, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract18, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, -10255947709272500
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %5 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr %.fca.0.extract18)
    %6 = sext i32 %offset.i.i to i64
    %7 = getelementptr ptr, ptr %.fca.0.extract18, i64 %6
    %8 = load ptr, ptr %7, align 8
    %9 = load ptr, ptr %8, align 8
    %10 = tail call { ptr, ptr, ptr, i32 } %9(ptr %.fca.1.extract20)
    %.fca.0.extract8 = extractvalue { ptr, ptr, ptr, i32 } %10, 0
    %.fca.1.extract9 = extractvalue { ptr, ptr, ptr, i32 } %10, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %10, 2
    %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %10, 3
    %11 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract8, 0
    %12 = insertvalue { ptr, ptr, ptr, i32 } %11, ptr %.fca.1.extract9, 1
    %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.2.extract, 2
    %14 = insertvalue { ptr, ptr, ptr, i32 } %13, i32 %.fca.3.extract, 3
    %15 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr %.fca.0.extract18)
    %16 = getelementptr i8, ptr %7, i64 16
    %17 = load ptr, ptr %16, align 8
    %18 = tail call ptr %17(ptr %.fca.1.extract20)
    %19 = tail call ptr @llvm.invariant.start.p0(i64 88, ptr %.fca.0.extract18)
    %20 = getelementptr i8, ptr %7, i64 24
    %21 = load ptr, ptr %20, align 8
    %22 = tail call ptr %21(ptr %.fca.1.extract20)
    %23 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
    %24 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %.fca.0.extract8)
    %25 = sext i32 %.fca.3.extract to i64
    %26 = getelementptr ptr, ptr %.fca.0.extract8, i64 %25
    %27 = getelementptr i8, ptr %26, i64 8
    %28 = load ptr, ptr %27, align 8
    %29 = call ptr %28({ ptr, ptr, ptr, i32 } %14, ptr nonnull %4)
    %30 = call { ptr, i160 } %29({ ptr, ptr, ptr, i32 } %14, { ptr, ptr, ptr, i32 } %14, ptr nonnull %4)
    %.fca.0.extract4 = extractvalue { ptr, i160 } %30, 0
    %31 = icmp ne ptr %.fca.0.extract4, @nil_typ
    %32 = icmp ne ptr %.fca.0.extract4, null
    %.not27 = and i1 %31, %32
    br i1 %.not27, label %33, label %41
  
  33:                                               ; preds = %3
    %.fca.1.extract5 = extractvalue { ptr, i160 } %30, 1
    %hash_coef_ptr.i.i43 = getelementptr i8, ptr %.fca.0.extract4, i64 8
    %tbl_size_ptr.i.i44 = getelementptr i8, ptr %.fca.0.extract4, i64 16
    %offset_tbl_ptr.i.i45 = getelementptr i8, ptr %.fca.0.extract4, i64 40
    %hash_coef.i.i46 = load i64, ptr %hash_coef_ptr.i.i43, align 4
    %tbl_size.i.i47 = load i64, ptr %tbl_size_ptr.i.i44, align 4
    %offset_tbl.i.i48 = load ptr, ptr %offset_tbl_ptr.i.i45, align 8
    %product.i.i.i49 = mul i64 %hash_coef.i.i46, 3084208142191802847
    %shifted.i.i.i50 = lshr i64 %product.i.i.i49, 32
    %xored.i.i.i51 = xor i64 %shifted.i.i.i50, %product.i.i.i49
    %hash.i.i.i52 = and i64 %xored.i.i.i51, %tbl_size.i.i47
    %offset_ptr.i.i53 = getelementptr i32, ptr %offset_tbl.i.i48, i64 %hash.i.i.i52
    %offset.i.i54 = load i32, ptr %offset_ptr.i.i53, align 4
    %.sroa.575.8.insert.ext = zext i32 %offset.i.i54 to i160
    %.sroa.575.8.insert.shift = shl nuw i160 %.sroa.575.8.insert.ext, 128
    %34 = insertvalue { ptr, i160 } undef, ptr %.fca.0.extract4, 0
    %.sroa.3.8.insert.ext = and i160 %.fca.1.extract5, 340282366920938463463374607431768211455
    %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.575.8.insert.shift, %.sroa.3.8.insert.ext
    %35 = insertvalue { ptr, i160 } %34, i160 %.sroa.3.8.insert.insert, 1
    %36 = call ptr @llvm.invariant.start.p0(i64 88, ptr nonnull %.fca.0.extract18)
    %sunkaddr = mul i64 %6, 8
    %sunkaddr1 = getelementptr i8, ptr %.fca.0.extract18, i64 %sunkaddr
    %sunkaddr2 = getelementptr i8, ptr %sunkaddr1, i64 8
    %37 = load ptr, ptr %sunkaddr2, align 8
    %38 = load ptr, ptr %37, align 8
    %39 = call { ptr } %38(ptr %.fca.1.extract20)
    %.fca.0.extract2 = extractvalue { ptr } %39, 0
    %40 = call { ptr, i160 } %.fca.0.extract2({ ptr, i160 } %35)
    %.fca.0.extract = extractvalue { ptr, i160 } %40, 0
    %.fca.1.extract = extractvalue { ptr, i160 } %40, 1
    br label %41
  
  41:                                               ; preds = %33, %3
    %.reg2mem5.sroa.0.0 = phi ptr [ %.fca.0.extract, %33 ], [ @nil_typ, %3 ]
    %.reg2mem5.sroa.3.0 = phi i160 [ %.fca.1.extract, %33 ], [ undef, %3 ]
    %.reload6.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %.reg2mem5.sroa.0.0, 0
    %.reload6.fca.1.insert = insertvalue { ptr, i160 } %.reload6.fca.0.insert, i160 %.reg2mem5.sroa.3.0, 1
    ret { ptr, i160 } %.reload6.fca.1.insert
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define { ptr } @MapIterator2_getter_f(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 32
    %3 = load ptr, ptr %2, align 8
    %4 = insertvalue { ptr } undef, ptr %3, 0
    ret { ptr } %4
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
  define void @MapIterator2_setter_f(ptr nocapture writeonly %0, { ptr } %1) #3 {
    %3 = getelementptr i8, ptr %0, i64 32
    %.fca.0.extract = extractvalue { ptr } %1, 0
    store ptr %.fca.0.extract, ptr %3, align 8
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define { ptr, ptr, ptr, i32 } @MapIterator2_getter_iterator(ptr nocapture readonly %0) #0 {
    %2 = load ptr, ptr %0, align 8
    %3 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2, 0
    %4 = getelementptr i8, ptr %0, i64 8
    %5 = load ptr, ptr %4, align 8
    %6 = insertvalue { ptr, ptr, ptr, i32 } %3, ptr %5, 1
    %7 = getelementptr i8, ptr %0, i64 16
    %8 = load ptr, ptr %7, align 8
    %9 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr %8, 2
    %10 = getelementptr i8, ptr %0, i64 24
    %11 = load i32, ptr %10, align 4
    %12 = insertvalue { ptr, ptr, ptr, i32 } %9, i32 %11, 3
    ret { ptr, ptr, ptr, i32 } %12
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
  define void @MapIterator2_setter_iterator(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #3 {
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
    %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
    store ptr %.fca.0.extract, ptr %0, align 8
    %3 = getelementptr i8, ptr %0, i64 8
    store ptr %.fca.1.extract, ptr %3, align 8
    %4 = getelementptr i8, ptr %0, i64 16
    store ptr %.fca.2.extract, ptr %4, align 8
    %5 = getelementptr i8, ptr %0, i64 24
    store i32 %.fca.3.extract, ptr %5, align 4
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define { ptr } @MapIterable2_getter_f(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 32
    %3 = load ptr, ptr %2, align 8
    %4 = insertvalue { ptr } undef, ptr %3, 0
    ret { ptr } %4
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
  define void @MapIterable2_setter_f(ptr nocapture writeonly %0, { ptr } %1) #3 {
    %3 = getelementptr i8, ptr %0, i64 32
    %.fca.0.extract = extractvalue { ptr } %1, 0
    store ptr %.fca.0.extract, ptr %3, align 8
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define { ptr, ptr, ptr, i32 } @MapIterable2_getter_iterable(ptr nocapture readonly %0) #0 {
    %2 = load ptr, ptr %0, align 8
    %3 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2, 0
    %4 = getelementptr i8, ptr %0, i64 8
    %5 = load ptr, ptr %4, align 8
    %6 = insertvalue { ptr, ptr, ptr, i32 } %3, ptr %5, 1
    %7 = getelementptr i8, ptr %0, i64 16
    %8 = load ptr, ptr %7, align 8
    %9 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr %8, 2
    %10 = getelementptr i8, ptr %0, i64 24
    %11 = load i32, ptr %10, align 4
    %12 = insertvalue { ptr, ptr, ptr, i32 } %9, i32 %11, 3
    ret { ptr, ptr, ptr, i32 } %12
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
  define void @MapIterable2_setter_iterable(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #3 {
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
    %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
    store ptr %.fca.0.extract, ptr %0, align 8
    %3 = getelementptr i8, ptr %0, i64 8
    store ptr %.fca.1.extract, ptr %3, align 8
    %4 = getelementptr i8, ptr %0, i64 16
    store ptr %.fca.2.extract, ptr %4, align 8
    %5 = getelementptr i8, ptr %0, i64 24
    store i32 %.fca.3.extract, ptr %5, align 4
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define ptr @ArrayIterator_field_ArrayIterator_0(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 16
    %3 = load ptr, ptr %2, align 8
    ret ptr %3
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @ArrayIterator_B_init_arrayArrayT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 96
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @ArrayIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 104
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  define void @ArrayIterator_init_arrayArrayT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
    %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, 3447345754186651411
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
    %hash_coef_ptr.i.i10 = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i11 = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i12 = getelementptr i8, ptr %.fca.0.extract, i64 40
    %hash_coef.i.i13 = load i64, ptr %hash_coef_ptr.i.i10, align 4
    %tbl_size.i.i14 = load i64, ptr %tbl_size_ptr.i.i11, align 4
    %offset_tbl.i.i15 = load ptr, ptr %offset_tbl_ptr.i.i12, align 8
    %product.i.i.i16 = mul i64 %hash_coef.i.i13, -5261542750394134544
    %shifted.i.i.i17 = lshr i64 %product.i.i.i16, 32
    %xored.i.i.i18 = xor i64 %shifted.i.i.i17, %product.i.i.i16
    %hash.i.i.i19 = and i64 %xored.i.i.i18, %tbl_size.i.i14
    %offset_ptr.i.i20 = getelementptr i32, ptr %offset_tbl.i.i15, i64 %hash.i.i.i19
    %offset.i.i35 = load i32, ptr %offset_ptr.i.i20, align 4
    %5 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr %.fca.0.extract1)
    %6 = sext i32 %offset.i.i to i64
    %7 = getelementptr ptr, ptr %.fca.0.extract1, i64 %6
    %8 = load ptr, ptr %7, align 8
    %9 = getelementptr i8, ptr %8, i64 8
    %10 = load ptr, ptr %9, align 8
    %11 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
    %12 = insertvalue { ptr, ptr, ptr, i32 } %11, ptr %.fca.1.extract, 1
    %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.2.extract, 2
    %14 = insertvalue { ptr, ptr, ptr, i32 } %13, i32 %offset.i.i35, 3
    tail call void %10(ptr %.fca.1.extract3, { ptr, ptr, ptr, i32 } %14)
    %15 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr %.fca.0.extract1)
    %16 = getelementptr i8, ptr %7, i64 8
    %17 = load ptr, ptr %16, align 8
    %18 = getelementptr i8, ptr %17, i64 8
    %19 = load ptr, ptr %18, align 8
    tail call void %19(ptr %.fca.1.extract3, i32 0)
    ret void
  }
  
  define { ptr, i160 } @ArrayIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
    %4 = alloca [0 x ptr], align 8
    %.fca.0.extract26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract28 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract26, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract26, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract26, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, 3447345754186651411
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %5 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr %.fca.0.extract26)
    %6 = sext i32 %offset.i.i to i64
    %7 = getelementptr ptr, ptr %.fca.0.extract26, i64 %6
    %8 = getelementptr i8, ptr %7, i64 8
    %9 = load ptr, ptr %8, align 8
    %10 = load ptr, ptr %9, align 8
    %11 = tail call i32 %10(ptr %.fca.1.extract28)
    %12 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr %.fca.0.extract26)
    %13 = load ptr, ptr %7, align 8
    %14 = load ptr, ptr %13, align 8
    %15 = tail call { ptr, ptr, ptr, i32 } %14(ptr %.fca.1.extract28)
    %.fca.0.extract10 = extractvalue { ptr, ptr, ptr, i32 } %15, 0
    %.fca.1.extract12 = extractvalue { ptr, ptr, ptr, i32 } %15, 1
    %.fca.2.extract14 = extractvalue { ptr, ptr, ptr, i32 } %15, 2
    %.fca.3.extract16 = extractvalue { ptr, ptr, ptr, i32 } %15, 3
    %16 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract10, 0
    %17 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %.fca.1.extract12, 1
    %18 = insertvalue { ptr, ptr, ptr, i32 } %17, ptr %.fca.2.extract14, 2
    %19 = insertvalue { ptr, ptr, ptr, i32 } %18, i32 %.fca.3.extract16, 3
    %20 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr %.fca.0.extract26)
    %21 = getelementptr i8, ptr %7, i64 16
    %22 = load ptr, ptr %21, align 8
    %23 = tail call ptr %22(ptr %.fca.1.extract28)
    %24 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
    %25 = tail call ptr @llvm.invariant.start.p0(i64 552, ptr %.fca.0.extract10)
    %26 = sext i32 %.fca.3.extract16 to i64
    %27 = getelementptr ptr, ptr %.fca.0.extract10, i64 %26
    %28 = getelementptr i8, ptr %27, i64 56
    %29 = load ptr, ptr %28, align 8
    %30 = call ptr %29({ ptr, ptr, ptr, i32 } %19, ptr nonnull %4)
    %31 = call i32 %30({ ptr, ptr, ptr, i32 } %19, { ptr, ptr, ptr, i32 } %19, ptr nonnull %4)
    %.not = icmp slt i32 %11, %31
    %32 = alloca [1 x ptr], align 8
    %33 = alloca { ptr }, align 8
    br i1 %.not, label %34, label %68
  
  34:                                               ; preds = %3
    %35 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull %.fca.0.extract26)
    %sunkaddr = mul i64 %6, 8
    %sunkaddr1 = getelementptr i8, ptr %.fca.0.extract26, i64 %sunkaddr
    %sunkaddr2 = getelementptr i8, ptr %sunkaddr1, i64 8
    %36 = load ptr, ptr %sunkaddr2, align 8
    %37 = load ptr, ptr %36, align 8
    %38 = call i32 %37(ptr %.fca.1.extract28)
    %39 = add i32 %38, 1
    %40 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull %.fca.0.extract26)
    %41 = load ptr, ptr %sunkaddr2, align 8
    %42 = getelementptr i8, ptr %41, i64 8
    %43 = load ptr, ptr %42, align 8
    call void %43(ptr %.fca.1.extract28, i32 %39)
    %44 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull %.fca.0.extract26)
    %45 = load ptr, ptr %sunkaddr2, align 8
    %46 = load ptr, ptr %45, align 8
    %47 = call i32 %46(ptr %.fca.1.extract28)
    %48 = add i32 %47, -1
    %49 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull %.fca.0.extract26)
    %sunkaddr3 = mul i64 %6, 8
    %sunkaddr4 = getelementptr i8, ptr %.fca.0.extract26, i64 %sunkaddr3
    %50 = load ptr, ptr %sunkaddr4, align 8
    %51 = load ptr, ptr %50, align 8
    %52 = call { ptr, ptr, ptr, i32 } %51(ptr %.fca.1.extract28)
    %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %52, 0
    %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %52, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %52, 2
    %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %52, 3
    %53 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
    %54 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %.fca.1.extract2, 1
    %55 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %.fca.2.extract, 2
    %56 = insertvalue { ptr, ptr, ptr, i32 } %55, i32 %.fca.3.extract, 3
    %57 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull %.fca.0.extract26)
    %sunkaddr5 = mul i64 %6, 8
    %sunkaddr6 = getelementptr i8, ptr %.fca.0.extract26, i64 %sunkaddr5
    %sunkaddr7 = getelementptr i8, ptr %sunkaddr6, i64 16
    %58 = load ptr, ptr %sunkaddr7, align 8
    %59 = call ptr %58(ptr %.fca.1.extract28)
    store ptr @_parameterization_Ptri32, ptr %32, align 8
    %60 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %32)
    %61 = call ptr @llvm.invariant.start.p0(i64 552, ptr %.fca.0.extract1)
    %62 = sext i32 %.fca.3.extract to i64
    %63 = getelementptr ptr, ptr %.fca.0.extract1, i64 %62
    %64 = getelementptr i8, ptr %63, i64 104
    %65 = load ptr, ptr %64, align 8
    store ptr @i32_typ, ptr %33, align 8
    %66 = call ptr %65({ ptr, ptr, ptr, i32 } %56, ptr nonnull %33)
    %67 = call { ptr, i160 } %66({ ptr, ptr, ptr, i32 } %56, { ptr, ptr, ptr, i32 } %56, ptr nonnull %32, i32 %48)
    %.fca.0.extract = extractvalue { ptr, i160 } %67, 0
    %.fca.1.extract = extractvalue { ptr, i160 } %67, 1
    %hash_coef_ptr.i.i65 = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i66 = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i67 = getelementptr i8, ptr %.fca.0.extract, i64 40
    %hash_coef.i.i68 = load i64, ptr %hash_coef_ptr.i.i65, align 4
    %tbl_size.i.i69 = load i64, ptr %tbl_size_ptr.i.i66, align 4
    %offset_tbl.i.i70 = load ptr, ptr %offset_tbl_ptr.i.i67, align 8
    %product.i.i.i71 = mul i64 %hash_coef.i.i68, 3084208142191802847
    %shifted.i.i.i72 = lshr i64 %product.i.i.i71, 32
    %xored.i.i.i73 = xor i64 %shifted.i.i.i72, %product.i.i.i71
    %hash.i.i.i74 = and i64 %xored.i.i.i73, %tbl_size.i.i69
    %offset_ptr.i.i75 = getelementptr i32, ptr %offset_tbl.i.i70, i64 %hash.i.i.i74
    %offset.i.i76 = load i32, ptr %offset_ptr.i.i75, align 4
    %.sroa.5.8.insert.ext = zext i32 %offset.i.i76 to i160
    %.sroa.5.8.insert.shift = shl nuw i160 %.sroa.5.8.insert.ext, 128
    %.sroa.3.8.insert.ext = and i160 %.fca.1.extract, 340282366920938463463374607431768211455
    %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.5.8.insert.shift, %.sroa.3.8.insert.ext
    br label %68
  
  68:                                               ; preds = %34, %3
    %.reg2mem5.sroa.0.0 = phi ptr [ %.fca.0.extract, %34 ], [ @nil_typ, %3 ]
    %.reg2mem5.sroa.3.0 = phi i160 [ %.sroa.3.8.insert.insert, %34 ], [ undef, %3 ]
    %.reload6.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %.reg2mem5.sroa.0.0, 0
    %.reload6.fca.1.insert = insertvalue { ptr, i160 } %.reload6.fca.0.insert, i160 %.reg2mem5.sroa.3.0, 1
    ret { ptr, i160 } %.reload6.fca.1.insert
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define i32 @ArrayIterator_getter_index(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 32
    %3 = load i32, ptr %2, align 4
    ret i32 %3
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
  define void @ArrayIterator_setter_index(ptr nocapture writeonly %0, i32 %1) #3 {
    %3 = getelementptr i8, ptr %0, i64 32
    store i32 %1, ptr %3, align 4
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define { ptr, ptr, ptr, i32 } @ArrayIterator_getter_array(ptr nocapture readonly %0) #0 {
    %2 = load ptr, ptr %0, align 8
    %3 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2, 0
    %4 = getelementptr i8, ptr %0, i64 8
    %5 = load ptr, ptr %4, align 8
    %6 = insertvalue { ptr, ptr, ptr, i32 } %3, ptr %5, 1
    %7 = getelementptr i8, ptr %0, i64 16
    %8 = load ptr, ptr %7, align 8
    %9 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr %8, 2
    %10 = getelementptr i8, ptr %0, i64 24
    %11 = load i32, ptr %10, align 4
    %12 = insertvalue { ptr, ptr, ptr, i32 } %9, i32 %11, 3
    ret { ptr, ptr, ptr, i32 } %12
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
  define void @ArrayIterator_setter_array(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #3 {
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
    %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
    store ptr %.fca.0.extract, ptr %0, align 8
    %3 = getelementptr i8, ptr %0, i64 8
    store ptr %.fca.1.extract, ptr %3, align 8
    %4 = getelementptr i8, ptr %0, i64 16
    store ptr %.fca.2.extract, ptr %4, align 8
    %5 = getelementptr i8, ptr %0, i64 24
    store i32 %.fca.3.extract, ptr %5, align 4
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define i32 @Array_getter_capacity(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 12
    %3 = load i32, ptr %2, align 4
    ret i32 %3
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
  define void @Array_setter_capacity(ptr nocapture writeonly %0, i32 %1) #3 {
    %3 = getelementptr i8, ptr %0, i64 12
    store i32 %1, ptr %3, align 4
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define i32 @Array_getter_length(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 8
    %3 = load i32, ptr %2, align 4
    ret i32 %3
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
  define void @Array_setter_length(ptr nocapture writeonly %0, i32 %1) #3 {
    %3 = getelementptr i8, ptr %0, i64 8
    store i32 %1, ptr %3, align 4
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define { ptr } @Array_getter_buffer(ptr nocapture readonly %0) #0 {
    %2 = load ptr, ptr %0, align 8
    %3 = insertvalue { ptr } undef, ptr %2, 0
    ret { ptr } %3
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
  define void @Array_setter_buffer(ptr nocapture writeonly %0, { ptr } %1) #3 {
    %.fca.0.extract = extractvalue { ptr } %1, 0
    store ptr %.fca.0.extract, ptr %0, align 8
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
  define noundef nonnull ptr @Float64_field_Float64_0(ptr nocapture readnone %0) #4 {
    ret ptr @_parameterization_Float64_or_Int32
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
  define noundef nonnull ptr @Float64_field_Float64_1(ptr nocapture readnone %0) #4 {
    ret ptr @_parameterization_Float64
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Float64_B_init_valuePtrf64({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 104
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Float64_B_value_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 112
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Float64_B__ADD_otherFloat64__ADD_otherInt32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #7 {
  ._crit_edge:
    %2 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %3 = load ptr, ptr %1, align 8
    %4 = getelementptr i8, ptr %3, i64 8
    %5 = getelementptr i8, ptr %3, i64 16
    %6 = getelementptr i8, ptr %3, i64 24
    %7 = getelementptr i8, ptr %3, i64 32
    %8 = load i64, ptr %4, align 4
    %9 = load i64, ptr %5, align 4
    %10 = load ptr, ptr %6, align 8
    %11 = load ptr, ptr %7, align 8
    %result.i = tail call i1 %10(i64 %9, i64 %8, i64 -3157560240565274503, i64 ptrtoint (ptr @Int32 to i64), ptr readonly %11) #0
    %result.i1 = tail call i1 %10(i64 %9, i64 %8, i64 8748823673944961442, i64 ptrtoint (ptr @Float64 to i64), ptr readonly %11) #0
    %not.result.i = xor i1 %result.i, true
    %.reg2mem5.0 = select i1 %not.result.i, i1 true, i1 %result.i1
    %12 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %13 = select i1 %.reg2mem5.0, i64 8, i64 9
    %14 = getelementptr [18 x ptr], ptr %12, i64 0, i64 %13
    %15 = getelementptr i8, ptr %14, i64 56
    %16 = load ptr, ptr %15, align 8
    ret ptr %16
  }
  
  define void @Float64_init_valuePtrf64({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, double %3) {
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, 8748823673944961442
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %5 = tail call ptr @llvm.invariant.start.p0(i64 144, ptr %.fca.0.extract)
    %6 = sext i32 %offset.i.i to i64
    %7 = getelementptr ptr, ptr %.fca.0.extract, i64 %6
    %8 = load ptr, ptr %7, align 8
    %9 = getelementptr i8, ptr %8, i64 8
    %10 = load ptr, ptr %9, align 8
    tail call void %10(ptr %.fca.1.extract, double %3)
    ret void
  }
  
  define double @Float64_value_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, 8748823673944961442
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %4 = tail call ptr @llvm.invariant.start.p0(i64 144, ptr %.fca.0.extract)
    %5 = sext i32 %offset.i.i to i64
    %6 = getelementptr ptr, ptr %.fca.0.extract, i64 %5
    %7 = load ptr, ptr %6, align 8
    %8 = load ptr, ptr %7, align 8
    %9 = tail call double %8(ptr %.fca.1.extract)
    ret double %9
  }
  
  define { ptr, ptr, ptr, i32 } @Float64__ADD_otherFloat64({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, i160 } %3) {
    %const = bitcast i64 8748823673944961442 to i64
    %5 = alloca [0 x ptr], align 8
    %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, %const
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %.fca.0.extract = extractvalue { ptr, i160 } %3, 0
    %.fca.1.extract = extractvalue { ptr, i160 } %3, 1
    %.sroa.4.8.extract.trunc = trunc i160 %.fca.1.extract to i64
    %6 = inttoptr i64 %.sroa.4.8.extract.trunc to ptr
    %.sroa.734.8.extract.shift = lshr i160 %.fca.1.extract, 64
    %.sroa.734.8.extract.trunc = trunc i160 %.sroa.734.8.extract.shift to i64
    %7 = inttoptr i64 %.sroa.734.8.extract.trunc to ptr
    %hash_coef_ptr.i.i4 = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i5 = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i6 = getelementptr i8, ptr %.fca.0.extract, i64 40
    %hash_coef.i.i7 = load i64, ptr %hash_coef_ptr.i.i4, align 4
    %tbl_size.i.i8 = load i64, ptr %tbl_size_ptr.i.i5, align 4
    %offset_tbl.i.i9 = load ptr, ptr %offset_tbl_ptr.i.i6, align 8
    %product.i.i.i10 = mul i64 %hash_coef.i.i7, %const
    %shifted.i.i.i11 = lshr i64 %product.i.i.i10, 32
    %xored.i.i.i12 = xor i64 %shifted.i.i.i11, %product.i.i.i10
    %hash.i.i.i13 = and i64 %xored.i.i.i12, %tbl_size.i.i8
    %offset_ptr.i.i14 = getelementptr i32, ptr %offset_tbl.i.i9, i64 %hash.i.i.i13
    %offset.i.i15 = load i32, ptr %offset_ptr.i.i14, align 4
    %8 = tail call ptr @llvm.invariant.start.p0(i64 144, ptr %.fca.0.extract1)
    %9 = sext i32 %offset.i.i to i64
    %10 = getelementptr ptr, ptr %.fca.0.extract1, i64 %9
    %11 = load ptr, ptr %10, align 8
    %12 = load ptr, ptr %11, align 8
    %13 = tail call double %12(ptr %.fca.1.extract2)
    %14 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
    %15 = insertvalue { ptr, ptr, ptr, i32 } %14, ptr %6, 1
    %16 = insertvalue { ptr, ptr, ptr, i32 } %15, ptr %7, 2
    %17 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %offset.i.i15, 3
    %18 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
    %19 = tail call ptr @llvm.invariant.start.p0(i64 144, ptr %.fca.0.extract)
    %20 = sext i32 %offset.i.i15 to i64
    %21 = getelementptr ptr, ptr %.fca.0.extract, i64 %20
    %22 = getelementptr i8, ptr %21, i64 32
    %23 = load ptr, ptr %22, align 8
    %24 = call ptr %23({ ptr, ptr, ptr, i32 } %17, ptr nonnull %5)
    %25 = call double %24({ ptr, ptr, ptr, i32 } %17, { ptr, ptr, ptr, i32 } %17, ptr nonnull %5)
    %result.i = call noalias dereferenceable_or_null(8) ptr @bump_malloc_inner(i64 noundef 8, ptr nonnull @current_ptr) #26
    %26 = alloca { ptr, ptr, ptr, i32 }, align 8
    %27 = getelementptr inbounds i8, ptr %26, i64 8
    %28 = getelementptr inbounds i8, ptr %26, i64 24
    store ptr @Float64, ptr %26, align 8
    store ptr %result.i, ptr %27, align 8
    store i32 7, ptr %28, align 8
    %29 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %26)
    %30 = call ptr @llvm.invariant.start.p0(i64 144, ptr %.fca.0.extract1)
    %31 = load ptr, ptr %10, align 8
    %32 = load ptr, ptr %31, align 8
    %33 = call double %32(ptr %.fca.1.extract2)
    %34 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
    %35 = call ptr @llvm.invariant.start.p0(i64 144, ptr %.fca.0.extract)
    %36 = load ptr, ptr %22, align 8
    %37 = call ptr %36({ ptr, ptr, ptr, i32 } %17, ptr nonnull %5)
    %38 = call double %37({ ptr, ptr, ptr, i32 } %17, { ptr, ptr, ptr, i32 } %17, ptr nonnull %5)
    %39 = fadd double %33, %38
    %40 = load ptr, ptr %26, align 8
    %41 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %40, 0
    %42 = load ptr, ptr %27, align 8
    %43 = insertvalue { ptr, ptr, ptr, i32 } %41, ptr %42, 1
    %44 = getelementptr inbounds i8, ptr %26, i64 16
    %45 = load ptr, ptr %44, align 8
    %46 = insertvalue { ptr, ptr, ptr, i32 } %43, ptr %45, 2
    %47 = load i32, ptr %28, align 8
    %48 = insertvalue { ptr, ptr, ptr, i32 } %46, i32 %47, 3
    %49 = alloca [1 x ptr], align 8
    store ptr @_parameterization_Ptrf64, ptr %49, align 8
    %50 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %49)
    %51 = call ptr @llvm.invariant.start.p0(i64 144, ptr %40)
    %52 = sext i32 %47 to i64
    %53 = getelementptr ptr, ptr %40, i64 %52
    %54 = getelementptr i8, ptr %53, i64 24
    %55 = load ptr, ptr %54, align 8
    %56 = alloca { ptr }, align 8
    store ptr @f64_typ, ptr %56, align 8
    %57 = call ptr %55({ ptr, ptr, ptr, i32 } %48, ptr nonnull %56)
    call void %57({ ptr, ptr, ptr, i32 } %48, { ptr, ptr, ptr, i32 } %48, ptr nonnull %49, double %39)
    %hash_coef_ptr.i.i18 = getelementptr i8, ptr %40, i64 8
    %tbl_size_ptr.i.i19 = getelementptr i8, ptr %40, i64 16
    %offset_tbl_ptr.i.i20 = getelementptr i8, ptr %40, i64 40
    %hash_coef.i.i21 = load i64, ptr %hash_coef_ptr.i.i18, align 4
    %tbl_size.i.i22 = load i64, ptr %tbl_size_ptr.i.i19, align 4
    %offset_tbl.i.i23 = load ptr, ptr %offset_tbl_ptr.i.i20, align 8
    %product.i.i.i24 = mul i64 %hash_coef.i.i21, %const
    %shifted.i.i.i25 = lshr i64 %product.i.i.i24, 32
    %xored.i.i.i26 = xor i64 %shifted.i.i.i25, %product.i.i.i24
    %hash.i.i.i27 = and i64 %xored.i.i.i26, %tbl_size.i.i22
    %offset_ptr.i.i28 = getelementptr i32, ptr %offset_tbl.i.i23, i64 %hash.i.i.i27
    %offset.i.i29 = load i32, ptr %offset_ptr.i.i28, align 4
    %58 = insertvalue { ptr, ptr, ptr, i32 } %46, i32 %offset.i.i29, 3
    ret { ptr, ptr, ptr, i32 } %58
  }
  
  define { ptr, ptr, ptr, i32 } @Float64__ADD_otherInt32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, i160 } %3) {
    %const = bitcast i64 8748823673944961442 to i64
    %5 = alloca [0 x ptr], align 8
    %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, %const
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %.fca.0.extract = extractvalue { ptr, i160 } %3, 0
    %.fca.1.extract = extractvalue { ptr, i160 } %3, 1
    %.sroa.332.8.extract.trunc = trunc i160 %.fca.1.extract to i64
    %6 = inttoptr i64 %.sroa.332.8.extract.trunc to ptr
    %.sroa.533.8.extract.shift = lshr i160 %.fca.1.extract, 64
    %.sroa.533.8.extract.trunc = trunc i160 %.sroa.533.8.extract.shift to i64
    %7 = inttoptr i64 %.sroa.533.8.extract.trunc to ptr
    %hash_coef_ptr.i.i4 = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i5 = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i6 = getelementptr i8, ptr %.fca.0.extract, i64 40
    %hash_coef.i.i7 = load i64, ptr %hash_coef_ptr.i.i4, align 4
    %tbl_size.i.i8 = load i64, ptr %tbl_size_ptr.i.i5, align 4
    %offset_tbl.i.i9 = load ptr, ptr %offset_tbl_ptr.i.i6, align 8
    %product.i.i.i10 = mul i64 %hash_coef.i.i7, -3157560240565274503
    %shifted.i.i.i11 = lshr i64 %product.i.i.i10, 32
    %xored.i.i.i12 = xor i64 %shifted.i.i.i11, %product.i.i.i10
    %hash.i.i.i13 = and i64 %xored.i.i.i12, %tbl_size.i.i8
    %offset_ptr.i.i14 = getelementptr i32, ptr %offset_tbl.i.i9, i64 %hash.i.i.i13
    %offset.i.i15 = load i32, ptr %offset_ptr.i.i14, align 4
    %8 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
    %9 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %6, 1
    %10 = insertvalue { ptr, ptr, ptr, i32 } %9, ptr %7, 2
    %11 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %offset.i.i15, 3
    %12 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
    %13 = tail call ptr @llvm.invariant.start.p0(i64 136, ptr %.fca.0.extract)
    %14 = sext i32 %offset.i.i15 to i64
    %15 = getelementptr ptr, ptr %.fca.0.extract, i64 %14
    %16 = getelementptr i8, ptr %15, i64 24
    %17 = load ptr, ptr %16, align 8
    %18 = call ptr %17({ ptr, ptr, ptr, i32 } %11, ptr nonnull %5)
    %19 = call i32 %18({ ptr, ptr, ptr, i32 } %11, { ptr, ptr, ptr, i32 } %11, ptr nonnull %5)
    %20 = sitofp i32 %19 to double
    %21 = call ptr @llvm.invariant.start.p0(i64 144, ptr %.fca.0.extract1)
    %22 = sext i32 %offset.i.i to i64
    %23 = getelementptr ptr, ptr %.fca.0.extract1, i64 %22
    %24 = load ptr, ptr %23, align 8
    %25 = load ptr, ptr %24, align 8
    %26 = call double %25(ptr %.fca.1.extract2)
    %result.i = call noalias dereferenceable_or_null(8) ptr @bump_malloc_inner(i64 noundef 8, ptr nonnull @current_ptr) #26
    %27 = alloca { ptr, ptr, ptr, i32 }, align 8
    %28 = getelementptr inbounds i8, ptr %27, i64 8
    %29 = getelementptr inbounds i8, ptr %27, i64 24
    store ptr @Float64, ptr %27, align 8
    store ptr %result.i, ptr %28, align 8
    store i32 7, ptr %29, align 8
    %30 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %27)
    %31 = call ptr @llvm.invariant.start.p0(i64 144, ptr %.fca.0.extract1)
    %32 = load ptr, ptr %23, align 8
    %33 = load ptr, ptr %32, align 8
    %34 = call double %33(ptr %.fca.1.extract2)
    %35 = fadd double %34, %20
    %36 = load ptr, ptr %27, align 8
    %37 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %36, 0
    %38 = load ptr, ptr %28, align 8
    %39 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %38, 1
    %40 = getelementptr inbounds i8, ptr %27, i64 16
    %41 = load ptr, ptr %40, align 8
    %42 = insertvalue { ptr, ptr, ptr, i32 } %39, ptr %41, 2
    %43 = load i32, ptr %29, align 8
    %44 = insertvalue { ptr, ptr, ptr, i32 } %42, i32 %43, 3
    %45 = alloca [1 x ptr], align 8
    store ptr @_parameterization_Ptrf64, ptr %45, align 8
    %46 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %45)
    %47 = call ptr @llvm.invariant.start.p0(i64 144, ptr %36)
    %48 = sext i32 %43 to i64
    %49 = getelementptr ptr, ptr %36, i64 %48
    %50 = getelementptr i8, ptr %49, i64 24
    %51 = load ptr, ptr %50, align 8
    %52 = alloca { ptr }, align 8
    store ptr @f64_typ, ptr %52, align 8
    %53 = call ptr %51({ ptr, ptr, ptr, i32 } %44, ptr nonnull %52)
    call void %53({ ptr, ptr, ptr, i32 } %44, { ptr, ptr, ptr, i32 } %44, ptr nonnull %45, double %35)
    %hash_coef_ptr.i.i18 = getelementptr i8, ptr %36, i64 8
    %tbl_size_ptr.i.i19 = getelementptr i8, ptr %36, i64 16
    %offset_tbl_ptr.i.i20 = getelementptr i8, ptr %36, i64 40
    %hash_coef.i.i21 = load i64, ptr %hash_coef_ptr.i.i18, align 4
    %tbl_size.i.i22 = load i64, ptr %tbl_size_ptr.i.i19, align 4
    %offset_tbl.i.i23 = load ptr, ptr %offset_tbl_ptr.i.i20, align 8
    %product.i.i.i24 = mul i64 %hash_coef.i.i21, %const
    %shifted.i.i.i25 = lshr i64 %product.i.i.i24, 32
    %xored.i.i.i26 = xor i64 %shifted.i.i.i25, %product.i.i.i24
    %hash.i.i.i27 = and i64 %xored.i.i.i26, %tbl_size.i.i22
    %offset_ptr.i.i28 = getelementptr i32, ptr %offset_tbl.i.i23, i64 %hash.i.i.i27
    %offset.i.i29 = load i32, ptr %offset_ptr.i.i28, align 4
    %54 = insertvalue { ptr, ptr, ptr, i32 } %42, i32 %offset.i.i29, 3
    ret { ptr, ptr, ptr, i32 } %54
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
  define noundef nonnull ptr @Int32_field_Int32_0(ptr nocapture readnone %0) #4 {
    ret ptr @_parameterization_Int32_or_Float64
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Int32_B_init_valuePtri32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 96
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Int32_B_value_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 104
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Int32_B__ADD_otherFloat64__ADD_otherInt32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #7 {
  ._crit_edge:
    %2 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %3 = load ptr, ptr %1, align 8
    %4 = getelementptr i8, ptr %3, i64 8
    %5 = getelementptr i8, ptr %3, i64 16
    %6 = getelementptr i8, ptr %3, i64 24
    %7 = getelementptr i8, ptr %3, i64 32
    %8 = load i64, ptr %4, align 4
    %9 = load i64, ptr %5, align 4
    %10 = load ptr, ptr %6, align 8
    %11 = load ptr, ptr %7, align 8
    %result.i = tail call i1 %10(i64 %9, i64 %8, i64 -3157560240565274503, i64 ptrtoint (ptr @Int32 to i64), ptr readonly %11) #0
    %result.i1 = tail call i1 %10(i64 %9, i64 %8, i64 8748823673944961442, i64 ptrtoint (ptr @Float64 to i64), ptr readonly %11) #0
    %not.result.i = xor i1 %result.i, true
    %.reg2mem5.0 = select i1 %not.result.i, i1 true, i1 %result.i1
    %12 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %13 = select i1 %.reg2mem5.0, i64 7, i64 8
    %14 = getelementptr [17 x ptr], ptr %12, i64 0, i64 %13
    %15 = getelementptr i8, ptr %14, i64 56
    %16 = load ptr, ptr %15, align 8
    ret ptr %16
  }
  
  define void @Int32_init_valuePtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, -3157560240565274503
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %5 = tail call ptr @llvm.invariant.start.p0(i64 136, ptr %.fca.0.extract)
    %6 = sext i32 %offset.i.i to i64
    %7 = getelementptr ptr, ptr %.fca.0.extract, i64 %6
    %8 = load ptr, ptr %7, align 8
    %9 = getelementptr i8, ptr %8, i64 8
    %10 = load ptr, ptr %9, align 8
    tail call void %10(ptr %.fca.1.extract, i32 %3)
    ret void
  }
  
  define i32 @Int32_value_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, -3157560240565274503
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %4 = tail call ptr @llvm.invariant.start.p0(i64 136, ptr %.fca.0.extract)
    %5 = sext i32 %offset.i.i to i64
    %6 = getelementptr ptr, ptr %.fca.0.extract, i64 %5
    %7 = load ptr, ptr %6, align 8
    %8 = load ptr, ptr %7, align 8
    %9 = tail call i32 %8(ptr %.fca.1.extract)
    ret i32 %9
  }
  
  define { ptr, i160 } @Int32__ADD_otherFloat64({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, i160 } %3) {
    %5 = alloca [0 x ptr], align 8
    %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, -3157560240565274503
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %.fca.0.extract = extractvalue { ptr, i160 } %3, 0
    %.fca.1.extract = extractvalue { ptr, i160 } %3, 1
    %.sroa.4.8.extract.trunc = trunc i160 %.fca.1.extract to i64
    %6 = inttoptr i64 %.sroa.4.8.extract.trunc to ptr
    %.sroa.7.8.extract.shift = lshr i160 %.fca.1.extract, 64
    %.sroa.7.8.extract.trunc = trunc i160 %.sroa.7.8.extract.shift to i64
    %7 = inttoptr i64 %.sroa.7.8.extract.trunc to ptr
    %hash_coef_ptr.i.i4 = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i5 = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i6 = getelementptr i8, ptr %.fca.0.extract, i64 40
    %hash_coef.i.i7 = load i64, ptr %hash_coef_ptr.i.i4, align 4
    %tbl_size.i.i8 = load i64, ptr %tbl_size_ptr.i.i5, align 4
    %offset_tbl.i.i9 = load ptr, ptr %offset_tbl_ptr.i.i6, align 8
    %product.i.i.i10 = mul i64 %hash_coef.i.i7, 8748823673944961442
    %shifted.i.i.i11 = lshr i64 %product.i.i.i10, 32
    %xored.i.i.i12 = xor i64 %shifted.i.i.i11, %product.i.i.i10
    %hash.i.i.i13 = and i64 %xored.i.i.i12, %tbl_size.i.i8
    %offset_ptr.i.i14 = getelementptr i32, ptr %offset_tbl.i.i9, i64 %hash.i.i.i13
    %offset.i.i15 = load i32, ptr %offset_ptr.i.i14, align 4
    %8 = tail call ptr @llvm.invariant.start.p0(i64 136, ptr %.fca.0.extract1)
    %9 = sext i32 %offset.i.i to i64
    %10 = getelementptr ptr, ptr %.fca.0.extract1, i64 %9
    %11 = load ptr, ptr %10, align 8
    %12 = load ptr, ptr %11, align 8
    %13 = tail call i32 %12(ptr %.fca.1.extract2)
    %14 = sitofp i32 %13 to double
    %15 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
    %16 = insertvalue { ptr, ptr, ptr, i32 } %15, ptr %6, 1
    %17 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %7, 2
    %18 = insertvalue { ptr, ptr, ptr, i32 } %17, i32 %offset.i.i15, 3
    %19 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
    %20 = tail call ptr @llvm.invariant.start.p0(i64 144, ptr %.fca.0.extract)
    %21 = sext i32 %offset.i.i15 to i64
    %22 = getelementptr ptr, ptr %.fca.0.extract, i64 %21
    %23 = getelementptr i8, ptr %22, i64 32
    %24 = load ptr, ptr %23, align 8
    %25 = call ptr %24({ ptr, ptr, ptr, i32 } %18, ptr nonnull %5)
    %26 = call double %25({ ptr, ptr, ptr, i32 } %18, { ptr, ptr, ptr, i32 } %18, ptr nonnull %5)
    %result.i = call noalias dereferenceable_or_null(8) ptr @bump_malloc_inner(i64 noundef 8, ptr nonnull @current_ptr) #26
    %27 = alloca { ptr, ptr, ptr, i32 }, align 8
    %28 = getelementptr inbounds i8, ptr %27, i64 8
    %29 = getelementptr inbounds i8, ptr %27, i64 24
    store ptr @Float64, ptr %27, align 8
    store ptr %result.i, ptr %28, align 8
    store i32 7, ptr %29, align 8
    %30 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %27)
    %31 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
    %32 = call ptr @llvm.invariant.start.p0(i64 144, ptr %.fca.0.extract)
    %33 = load ptr, ptr %23, align 8
    %34 = call ptr %33({ ptr, ptr, ptr, i32 } %18, ptr nonnull %5)
    %35 = call double %34({ ptr, ptr, ptr, i32 } %18, { ptr, ptr, ptr, i32 } %18, ptr nonnull %5)
    %36 = fadd double %35, %14
    %37 = call ptr @llvm.invariant.start.p0(i64 144, ptr nonnull @Float64)
    store double %36, ptr %result.i, align 8
    %38 = load i160, ptr %28, align 8
    %39 = insertvalue { ptr, i160 } { ptr @Float64, i160 undef }, i160 %38, 1
    ret { ptr, i160 } %39
  }
  
  define { ptr, i160 } @Int32__ADD_otherInt32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, i160 } %3) {
    %const = bitcast i64 -3157560240565274503 to i64
    %5 = alloca [0 x ptr], align 8
    %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, %const
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %.fca.0.extract = extractvalue { ptr, i160 } %3, 0
    %.fca.1.extract = extractvalue { ptr, i160 } %3, 1
    %.sroa.4.8.extract.trunc = trunc i160 %.fca.1.extract to i64
    %6 = inttoptr i64 %.sroa.4.8.extract.trunc to ptr
    %.sroa.7.8.extract.shift = lshr i160 %.fca.1.extract, 64
    %.sroa.7.8.extract.trunc = trunc i160 %.sroa.7.8.extract.shift to i64
    %7 = inttoptr i64 %.sroa.7.8.extract.trunc to ptr
    %hash_coef_ptr.i.i4 = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i5 = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i6 = getelementptr i8, ptr %.fca.0.extract, i64 40
    %hash_coef.i.i7 = load i64, ptr %hash_coef_ptr.i.i4, align 4
    %tbl_size.i.i8 = load i64, ptr %tbl_size_ptr.i.i5, align 4
    %offset_tbl.i.i9 = load ptr, ptr %offset_tbl_ptr.i.i6, align 8
    %product.i.i.i10 = mul i64 %hash_coef.i.i7, %const
    %shifted.i.i.i11 = lshr i64 %product.i.i.i10, 32
    %xored.i.i.i12 = xor i64 %shifted.i.i.i11, %product.i.i.i10
    %hash.i.i.i13 = and i64 %xored.i.i.i12, %tbl_size.i.i8
    %offset_ptr.i.i14 = getelementptr i32, ptr %offset_tbl.i.i9, i64 %hash.i.i.i13
    %offset.i.i15 = load i32, ptr %offset_ptr.i.i14, align 4
    %8 = tail call ptr @llvm.invariant.start.p0(i64 136, ptr %.fca.0.extract1)
    %9 = sext i32 %offset.i.i to i64
    %10 = getelementptr ptr, ptr %.fca.0.extract1, i64 %9
    %11 = load ptr, ptr %10, align 8
    %12 = load ptr, ptr %11, align 8
    %13 = tail call i32 %12(ptr %.fca.1.extract2)
    %14 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
    %15 = insertvalue { ptr, ptr, ptr, i32 } %14, ptr %6, 1
    %16 = insertvalue { ptr, ptr, ptr, i32 } %15, ptr %7, 2
    %17 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %offset.i.i15, 3
    %18 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
    %19 = tail call ptr @llvm.invariant.start.p0(i64 136, ptr %.fca.0.extract)
    %20 = sext i32 %offset.i.i15 to i64
    %21 = getelementptr ptr, ptr %.fca.0.extract, i64 %20
    %22 = getelementptr i8, ptr %21, i64 24
    %23 = load ptr, ptr %22, align 8
    %24 = call ptr %23({ ptr, ptr, ptr, i32 } %17, ptr nonnull %5)
    %25 = call i32 %24({ ptr, ptr, ptr, i32 } %17, { ptr, ptr, ptr, i32 } %17, ptr nonnull %5)
    %result.i = call noalias dereferenceable_or_null(4) ptr @bump_malloc_inner(i64 noundef 4, ptr nonnull @current_ptr) #26
    %26 = alloca { ptr, ptr, ptr, i32 }, align 8
    %27 = getelementptr inbounds i8, ptr %26, i64 8
    %28 = getelementptr inbounds i8, ptr %26, i64 24
    store ptr @Int32, ptr %26, align 8
    store ptr %result.i, ptr %27, align 8
    store i32 7, ptr %28, align 8
    %29 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %26)
    %30 = call ptr @llvm.invariant.start.p0(i64 136, ptr %.fca.0.extract1)
    %31 = load ptr, ptr %10, align 8
    %32 = load ptr, ptr %31, align 8
    %33 = call i32 %32(ptr %.fca.1.extract2)
    %34 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
    %35 = call ptr @llvm.invariant.start.p0(i64 136, ptr %.fca.0.extract)
    %36 = load ptr, ptr %22, align 8
    %37 = call ptr %36({ ptr, ptr, ptr, i32 } %17, ptr nonnull %5)
    %38 = call i32 %37({ ptr, ptr, ptr, i32 } %17, { ptr, ptr, ptr, i32 } %17, ptr nonnull %5)
    %39 = add i32 %38, %33
    %40 = load ptr, ptr %26, align 8
    %41 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %40, 0
    %42 = load ptr, ptr %27, align 8
    %43 = insertvalue { ptr, ptr, ptr, i32 } %41, ptr %42, 1
    %44 = getelementptr inbounds i8, ptr %26, i64 16
    %45 = load ptr, ptr %44, align 8
    %46 = insertvalue { ptr, ptr, ptr, i32 } %43, ptr %45, 2
    %47 = load i32, ptr %28, align 8
    %48 = insertvalue { ptr, ptr, ptr, i32 } %46, i32 %47, 3
    %49 = alloca [1 x ptr], align 8
    store ptr @_parameterization_Ptri32, ptr %49, align 8
    %50 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %49)
    %51 = call ptr @llvm.invariant.start.p0(i64 136, ptr %40)
    %52 = sext i32 %47 to i64
    %53 = getelementptr ptr, ptr %40, i64 %52
    %54 = getelementptr i8, ptr %53, i64 16
    %55 = load ptr, ptr %54, align 8
    %56 = alloca { ptr }, align 8
    store ptr @i32_typ, ptr %56, align 8
    %57 = call ptr %55({ ptr, ptr, ptr, i32 } %48, ptr nonnull %56)
    call void %57({ ptr, ptr, ptr, i32 } %48, { ptr, ptr, ptr, i32 } %48, ptr nonnull %49, i32 %39)
    %58 = insertvalue { ptr, i160 } undef, ptr %40, 0
    %59 = load i160, ptr %27, align 8
    %60 = insertvalue { ptr, i160 } %58, i160 %59, 1
    ret { ptr, i160 } %60
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define i32 @Int32_getter_value(ptr nocapture readonly %0) #0 {
    %2 = load i32, ptr %0, align 4
    ret i32 %2
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
  define void @Int32_setter_value(ptr nocapture writeonly %0, i32 %1) #3 {
    store i32 %1, ptr %0, align 4
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define double @Float64_getter_value(ptr nocapture readonly %0) #0 {
    %2 = load double, ptr %0, align 8
    ret double %2
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
  define void @Float64_setter_value(ptr nocapture writeonly %0, double %1) #3 {
    store double %1, ptr %0, align 8
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define ptr @Holder_field_Holder_0(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 8
    %3 = load ptr, ptr %2, align 8
    ret ptr %3
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Holder_B_init_heldT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 88
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Holder_B_value_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 96
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  define void @Holder_init_heldT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, i160 } %3) {
    %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, -261997465778736657
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %.fca.0.extract = extractvalue { ptr, i160 } %3, 0
    %.fca.1.extract = extractvalue { ptr, i160 } %3, 1
    %hash_coef_ptr.i.i4 = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i5 = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i6 = getelementptr i8, ptr %.fca.0.extract, i64 40
    %hash_coef.i.i7 = load i64, ptr %hash_coef_ptr.i.i4, align 4
    %tbl_size.i.i8 = load i64, ptr %tbl_size_ptr.i.i5, align 4
    %offset_tbl.i.i9 = load ptr, ptr %offset_tbl_ptr.i.i6, align 8
    %product.i.i.i10 = mul i64 %hash_coef.i.i7, -6395308389776465871
    %shifted.i.i.i11 = lshr i64 %product.i.i.i10, 32
    %xored.i.i.i12 = xor i64 %shifted.i.i.i11, %product.i.i.i10
    %hash.i.i.i13 = and i64 %xored.i.i.i12, %tbl_size.i.i8
    %offset_ptr.i.i14 = getelementptr i32, ptr %offset_tbl.i.i9, i64 %hash.i.i.i13
    %offset.i.i15 = load i32, ptr %offset_ptr.i.i14, align 4
    %.sroa.536.8.insert.ext = zext i32 %offset.i.i15 to i160
    %.sroa.536.8.insert.shift = shl nuw i160 %.sroa.536.8.insert.ext, 128
    %5 = tail call ptr @llvm.invariant.start.p0(i64 48, ptr %.fca.0.extract1)
    %6 = sext i32 %offset.i.i to i64
    %7 = getelementptr ptr, ptr %.fca.0.extract1, i64 %6
    %8 = load ptr, ptr %7, align 8
    %9 = getelementptr i8, ptr %8, i64 8
    %10 = load ptr, ptr %9, align 8
    %11 = insertvalue { ptr, i160 } undef, ptr %.fca.0.extract, 0
    %.sroa.3.8.insert.ext = and i160 %.fca.1.extract, 340282366920938463463374607431768211455
    %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.536.8.insert.shift, %.sroa.3.8.insert.ext
    %12 = insertvalue { ptr, i160 } %11, i160 %.sroa.3.8.insert.insert, 1
    tail call void %10(ptr %.fca.1.extract2, { ptr, i160 } %12)
    ret void
  }
  
  define { ptr, ptr, ptr, i32 } @Holder_value_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
    %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract3, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, -261997465778736657
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %result.i = tail call noalias dereferenceable_or_null(8) ptr @bump_malloc_inner(i64 noundef 8, ptr nonnull @current_ptr) #26
    %4 = tail call ptr @llvm.invariant.start.p0(i64 48, ptr %.fca.0.extract3)
    %5 = sext i32 %offset.i.i to i64
    %6 = getelementptr ptr, ptr %.fca.0.extract3, i64 %5
    %7 = getelementptr i8, ptr %6, i64 8
    %8 = load ptr, ptr %7, align 8
    %9 = tail call ptr %8(ptr %.fca.1.extract5)
    %10 = tail call ptr @llvm.invariant.start.p0(i64 144, ptr nonnull @Float64)
    store double 4.500000e+01, ptr %result.i, align 8
    %11 = ptrtoint ptr %result.i to i64
    %.sroa.371.8.insert.ext = zext i64 %11 to i160
    %.sroa.371.8.insert.insert = or disjoint i160 %.sroa.371.8.insert.ext, 2381976568446569244243622252022377480192
    %12 = insertvalue { ptr, i160 } { ptr @Float64, i160 undef }, i160 %.sroa.371.8.insert.insert, 1
    %13 = tail call ptr @llvm.invariant.start.p0(i64 48, ptr %.fca.0.extract3)
    %14 = load ptr, ptr %6, align 8
    %15 = load ptr, ptr %14, align 8
    %16 = tail call { ptr, i160 } %15(ptr %.fca.1.extract5)
    %.fca.0.extract1 = extractvalue { ptr, i160 } %16, 0
    %.fca.1.extract2 = extractvalue { ptr, i160 } %16, 1
    %.sroa.367.8.extract.trunc = trunc i160 %.fca.1.extract2 to i64
    %17 = inttoptr i64 %.sroa.367.8.extract.trunc to ptr
    %.sroa.568.8.extract.shift = lshr i160 %.fca.1.extract2, 64
    %.sroa.568.8.extract.trunc = trunc i160 %.sroa.568.8.extract.shift to i64
    %18 = inttoptr i64 %.sroa.568.8.extract.trunc to ptr
    %.sroa.669.8.extract.shift = lshr i160 %.fca.1.extract2, 128
    %.sroa.669.8.extract.trunc = trunc nuw i160 %.sroa.669.8.extract.shift to i32
    %19 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
    %20 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %17, 1
    %21 = insertvalue { ptr, ptr, ptr, i32 } %20, ptr %18, 2
    %22 = insertvalue { ptr, ptr, ptr, i32 } %21, i32 %.sroa.669.8.extract.trunc, 3
    %23 = tail call ptr @llvm.invariant.start.p0(i64 48, ptr %.fca.0.extract3)
    %24 = load ptr, ptr %7, align 8
    %25 = tail call ptr %24(ptr %.fca.1.extract5)
    %26 = alloca [1 x ptr], align 8
    store ptr @_parameterization_Float64, ptr %26, align 8
    %27 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %26)
    %28 = tail call ptr @llvm.invariant.start.p0(i64 32, ptr %.fca.0.extract1)
    %29 = sext i32 %.sroa.669.8.extract.trunc to i64
    %30 = getelementptr ptr, ptr %.fca.0.extract1, i64 %29
    %31 = getelementptr i8, ptr %30, i64 16
    %32 = load ptr, ptr %31, align 8
    %33 = alloca { ptr }, align 8
    store ptr @Float64, ptr %33, align 8
    %34 = call ptr %32({ ptr, ptr, ptr, i32 } %22, ptr nonnull %33)
    %35 = call { ptr, i160 } %34({ ptr, ptr, ptr, i32 } %22, { ptr, ptr, ptr, i32 } %22, ptr nonnull %26, { ptr, i160 } %12)
    %.fca.0.extract = extractvalue { ptr, i160 } %35, 0
    %.fca.1.extract = extractvalue { ptr, i160 } %35, 1
    %.sroa.364.8.extract.trunc = trunc i160 %.fca.1.extract to i64
    %36 = inttoptr i64 %.sroa.364.8.extract.trunc to ptr
    %.sroa.565.8.extract.shift = lshr i160 %.fca.1.extract, 64
    %.sroa.565.8.extract.trunc = trunc i160 %.sroa.565.8.extract.shift to i64
    %37 = inttoptr i64 %.sroa.565.8.extract.trunc to ptr
    %hash_coef_ptr.i.i36 = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i37 = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i38 = getelementptr i8, ptr %.fca.0.extract, i64 40
    %hash_coef.i.i39 = load i64, ptr %hash_coef_ptr.i.i36, align 4
    %tbl_size.i.i40 = load i64, ptr %tbl_size_ptr.i.i37, align 4
    %offset_tbl.i.i41 = load ptr, ptr %offset_tbl_ptr.i.i38, align 8
    %product.i.i.i42 = mul i64 %hash_coef.i.i39, 8748823673944961442
    %shifted.i.i.i43 = lshr i64 %product.i.i.i42, 32
    %xored.i.i.i44 = xor i64 %shifted.i.i.i43, %product.i.i.i42
    %hash.i.i.i45 = and i64 %xored.i.i.i44, %tbl_size.i.i40
    %offset_ptr.i.i46 = getelementptr i32, ptr %offset_tbl.i.i41, i64 %hash.i.i.i45
    %offset.i.i61 = load i32, ptr %offset_ptr.i.i46, align 4
    %38 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
    %39 = insertvalue { ptr, ptr, ptr, i32 } %38, ptr %36, 1
    %40 = insertvalue { ptr, ptr, ptr, i32 } %39, ptr %37, 2
    %41 = insertvalue { ptr, ptr, ptr, i32 } %40, i32 %offset.i.i61, 3
    ret { ptr, ptr, ptr, i32 } %41
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define { ptr, i160 } @Holder_getter_held(ptr nocapture readonly %0) #0 {
    %2 = load ptr, ptr %0, align 8
    %3 = insertvalue { ptr, i160 } undef, ptr %2, 0
    %4 = getelementptr i8, ptr %0, i64 8
    %5 = load i160, ptr %4, align 4
    %6 = insertvalue { ptr, i160 } %3, i160 %5, 1
    ret { ptr, i160 } %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
  define void @Holder_setter_held(ptr nocapture writeonly %0, { ptr, i160 } %1) #3 {
    %.fca.0.extract = extractvalue { ptr, i160 } %1, 0
    %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
    store ptr %.fca.0.extract, ptr %0, align 8
    %3 = getelementptr i8, ptr %0, i64 8
    store i160 %.fca.1.extract, ptr %3, align 4
    ret void
  }
  
  define { ptr, i160 } @vyergufoax(ptr nest nocapture readonly %0, { ptr, i160 } %1) {
    %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
    %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
    %3 = tail call i32 %0(i32 %.sroa.1.8.extract.trunc)
    %.sroa.3.8.insert.ext = zext i32 %3 to i160
    %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.3.8.insert.ext, 2381976568446569244243622252022377480192
    %4 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.3.8.insert.insert, 1
    ret { ptr, i160 } %4
  }
  
  define { ptr, i160 } @vnpokpysya(ptr nest nocapture readonly %0, { ptr, i160 } %1) {
    %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
    %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
    %3 = tail call double %0(i32 %.sroa.1.8.extract.trunc)
    %4 = bitcast double %3 to i64
    %.sroa.3.8.insert.ext = zext i64 %4 to i160
    %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.3.8.insert.ext, 2381976568446569244243622252022377480192
    %5 = insertvalue { ptr, i160 } { ptr @f64_typ, i160 undef }, i160 %.sroa.3.8.insert.insert, 1
    ret { ptr, i160 } %5
  }
  
  define { ptr, i160 } @cvuwpzzbko(ptr nest nocapture readonly %0, { ptr, i160 } %1) {
    %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
    %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
    %3 = tail call i32 %0(i32 %.sroa.1.8.extract.trunc)
    %.sroa.3.8.insert.ext = zext i32 %3 to i160
    %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.3.8.insert.ext, 2381976568446569244243622252022377480192
    %4 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.3.8.insert.insert, 1
    ret { ptr, i160 } %4
  }
  
  define { ptr, i160 } @yzjcwqxqpv(ptr nest nocapture readonly %0, { ptr, i160 } %1, { ptr, i160 } %2) {
    %.fca.1.extract2 = extractvalue { ptr, i160 } %1, 1
    %.sroa.14.8.extract.trunc = trunc i160 %.fca.1.extract2 to i32
    %.fca.1.extract = extractvalue { ptr, i160 } %2, 1
    %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
    %4 = tail call i32 %0(i32 %.sroa.14.8.extract.trunc, i32 %.sroa.1.8.extract.trunc)
    %.sroa.3.8.insert.ext = zext i32 %4 to i160
    %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.3.8.insert.ext, 2381976568446569244243622252022377480192
    %5 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.3.8.insert.insert, 1
    ret { ptr, i160 } %5
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define ptr @Iterator2_field_Iterator2_0(ptr nocapture readonly %0) local_unnamed_addr #0 {
    %2 = load ptr, ptr %0, align 8
    ret ptr %2
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Iterator2_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 72
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define ptr @Iterable2_field_Iterable2_0(ptr nocapture readonly %0) local_unnamed_addr #0 {
    %2 = load ptr, ptr %0, align 8
    ret ptr %2
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Iterable2_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 152
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Iterable2_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 160
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Iterable2_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 168
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Iterable2_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 176
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Iterable2_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 184
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Iterable2_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 192
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Iterable2_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 200
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Iterable2_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 208
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Iterable2_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 216
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Iterable2_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 224
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Iterable2_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 232
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
  define i32 @_functionliteral_lqjlesxzkc(i32 %0, i32 %1) #4 {
    %3 = add i32 %1, %0
    ret i32 %3
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
  define range(i32 0, -1) i32 @_functionliteral_artvcwmgsq(i32 %0) #4 {
    %2 = shl i32 %0, 1
    ret i32 %2
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
  define double @_functionliteral_jihyhtbqww(double %0) local_unnamed_addr #4 {
    %2 = fmul double %0, 2.000000e+00
    ret double %2
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
  define i32 @_functionliteral_hhivbkuclz(i32 returned %0) #4 {
    ret i32 %0
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
  define double @_functionliteral_qevxpccvpm(i32 %0) #4 {
    %2 = sitofp i32 %0 to double
    ret double %2
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define ptr @Addable_field_Addable_0(ptr nocapture readonly %0) local_unnamed_addr #0 {
    %2 = load ptr, ptr %0, align 8
    ret ptr %2
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define ptr @Addable_field_Addable_1(ptr nocapture readonly %0) local_unnamed_addr #0 {
    %2 = getelementptr i8, ptr %0, i64 8
    %3 = load ptr, ptr %2, align 8
    ret ptr %3
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Addable_B__ADD_otherT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 80
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  define { ptr, ptr, ptr, i32 } @add_five({ ptr, ptr, ptr, i32 } %0) local_unnamed_addr {
    %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, -6395308389776465871
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %result.i = tail call noalias dereferenceable_or_null(8) ptr @bump_malloc_inner(i64 noundef 8, ptr nonnull @current_ptr) #26
    %2 = tail call ptr @llvm.invariant.start.p0(i64 144, ptr nonnull @Float64)
    store double 5.000000e+00, ptr %result.i, align 8
    %3 = ptrtoint ptr %result.i to i64
    %.sroa.349.8.insert.ext = zext i64 %3 to i160
    %.sroa.349.8.insert.insert = or disjoint i160 %.sroa.349.8.insert.ext, 2381976568446569244243622252022377480192
    %4 = insertvalue { ptr, i160 } { ptr @Float64, i160 undef }, i160 %.sroa.349.8.insert.insert, 1
    %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
    %6 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %.fca.1.extract2, 1
    %7 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr %.fca.2.extract, 2
    %8 = insertvalue { ptr, ptr, ptr, i32 } %7, i32 %offset.i.i, 3
    %9 = alloca [1 x ptr], align 8
    store ptr @_parameterization_Float64, ptr %9, align 8
    %10 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %9)
    %11 = tail call ptr @llvm.invariant.start.p0(i64 32, ptr %.fca.0.extract1)
    %12 = sext i32 %offset.i.i to i64
    %13 = getelementptr ptr, ptr %.fca.0.extract1, i64 %12
    %14 = getelementptr i8, ptr %13, i64 16
    %15 = load ptr, ptr %14, align 8
    %16 = alloca { ptr }, align 8
    store ptr @Float64, ptr %16, align 8
    %17 = call ptr %15({ ptr, ptr, ptr, i32 } %8, ptr nonnull %16)
    %18 = call { ptr, i160 } %17({ ptr, ptr, ptr, i32 } %8, { ptr, ptr, ptr, i32 } %8, ptr nonnull %9, { ptr, i160 } %4)
    %.fca.0.extract = extractvalue { ptr, i160 } %18, 0
    %.fca.1.extract = extractvalue { ptr, i160 } %18, 1
    %.sroa.346.8.extract.trunc = trunc i160 %.fca.1.extract to i64
    %19 = inttoptr i64 %.sroa.346.8.extract.trunc to ptr
    %.sroa.547.8.extract.shift = lshr i160 %.fca.1.extract, 64
    %.sroa.547.8.extract.trunc = trunc i160 %.sroa.547.8.extract.shift to i64
    %20 = inttoptr i64 %.sroa.547.8.extract.trunc to ptr
    %hash_coef_ptr.i.i18 = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i19 = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i20 = getelementptr i8, ptr %.fca.0.extract, i64 40
    %hash_coef.i.i21 = load i64, ptr %hash_coef_ptr.i.i18, align 4
    %tbl_size.i.i22 = load i64, ptr %tbl_size_ptr.i.i19, align 4
    %offset_tbl.i.i23 = load ptr, ptr %offset_tbl_ptr.i.i20, align 8
    %product.i.i.i24 = mul i64 %hash_coef.i.i21, 8748823673944961442
    %shifted.i.i.i25 = lshr i64 %product.i.i.i24, 32
    %xored.i.i.i26 = xor i64 %shifted.i.i.i25, %product.i.i.i24
    %hash.i.i.i27 = and i64 %xored.i.i.i26, %tbl_size.i.i22
    %offset_ptr.i.i28 = getelementptr i32, ptr %offset_tbl.i.i23, i64 %hash.i.i.i27
    %offset.i.i43 = load i32, ptr %offset_ptr.i.i28, align 4
    %21 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
    %22 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %19, 1
    %23 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %20, 2
    %24 = insertvalue { ptr, ptr, ptr, i32 } %23, i32 %offset.i.i43, 3
    ret { ptr, ptr, ptr, i32 } %24
  }
  
  define noundef i32 @main() local_unnamed_addr {
  ArrayIterator_next_.exit2913:
    %0 = alloca [0 x ptr], align 8
    %1 = alloca [1 x ptr], align 8
    %2 = alloca { ptr }, align 8
    %3 = alloca [1 x ptr], align 8
    %4 = alloca { ptr }, align 8
    %5 = alloca { ptr, ptr, ptr, i32 }, align 8
    %6 = alloca { ptr, ptr, ptr, i32 }, align 8
    %7 = alloca { ptr, ptr, ptr, i32 }, align 8
    %8 = alloca { ptr, ptr, ptr, i32 }, align 8
    %9 = alloca { ptr, ptr, ptr, i32 }, align 8
    %10 = alloca { ptr, ptr, ptr, i32 }, align 8
    %oldProtect.i652 = alloca i32, align 4
    %oldProtect.i648 = alloca i32, align 4
    %oldProtect.i616 = alloca i32, align 4
    %oldProtect.i = alloca i32, align 4
    tail call void @setup_landing_pad()
    %11 = tail call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @float_string, double 7.000000e+00)
    %12 = tail call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i32_string, i32 9)
    %13 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @Pair)
    %14 = tail call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @float_string, double 4.000000e+00)
    %15 = tail call ptr @llvm.invariant.start.p0(i64 160, ptr nonnull @FancyPair)
    %16 = tail call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @float_string, double 5.000000e+00)
    %result.i453 = tail call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #26
    %17 = getelementptr i8, ptr %result.i453, i64 16
    store ptr @_parameterization_Ptri32, ptr %17, align 8
    %18 = tail call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %17)
    %19 = getelementptr i8, ptr %result.i453, i64 8
    %20 = getelementptr i8, ptr %result.i453, i64 12
    call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
    store i32 4, ptr %20, align 4
    %result.i.i1743 = tail call noalias dereferenceable_or_null(128) ptr @bump_malloc_inner(i64 noundef 128, ptr nonnull @current_ptr) #26
    store ptr %result.i.i1743, ptr %result.i453, align 8
    store ptr @i32_typ, ptr %result.i.i1743, align 8
    %21 = getelementptr i8, ptr %result.i.i1743, i64 8
    store i160 2381976568446569244243622252022377480197, ptr %21, align 4
    %22 = getelementptr i8, ptr %result.i.i1743, i64 32
    store ptr @i32_typ, ptr %22, align 8
    %23 = getelementptr i8, ptr %result.i.i1743, i64 40
    store i160 2381976568446569244243622252022377480198, ptr %23, align 4
    %24 = getelementptr i8, ptr %result.i.i1743, i64 64
    store ptr @i32_typ, ptr %24, align 8
    %25 = getelementptr i8, ptr %result.i.i1743, i64 72
    store i160 2381976568446569244243622252022377480199, ptr %25, align 4
    call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
    call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
    %26 = getelementptr i8, ptr %result.i.i1743, i64 96
    store ptr @i32_typ, ptr %26, align 8
    %27 = getelementptr i8, ptr %result.i.i1743, i64 104
    store i160 2381976568446569244243622252022377480200, ptr %27, align 4
    store i32 4, ptr %19, align 4
    call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
    %result.i594 = tail call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #26
    call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5)
    %result.i595 = call i32 @VirtualProtect(ptr %result.i594, i64 16, i32 64, ptr nonnull %5) #14
    call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5)
    call void @llvm.init.trampoline(ptr %result.i594, ptr nonnull @yzjcwqxqpv, ptr nonnull @_functionliteral_lqjlesxzkc)
    %28 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i594)
    call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
    call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
    %29 = call ptr @llvm.invariant.start.p0(i64 552, ptr nonnull @Array)
    call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
    call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
    %30 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
    %31 = call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i32_string, i32 26)
    %result.i615 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #26
    call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5)
    %result.i617 = call i32 @VirtualProtect(ptr %result.i615, i64 16, i32 64, ptr nonnull %5) #14
    call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5)
    call void @llvm.init.trampoline(ptr %result.i615, ptr nonnull @cvuwpzzbko, ptr nonnull @_functionliteral_artvcwmgsq)
    %ret.i618 = call ptr @llvm.adjust.trampoline(ptr readonly %result.i615) #28
    %32 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i615)
    %result.i.i1461 = call noalias dereferenceable_or_null(56) ptr @bump_malloc_inner(i64 noundef 56, ptr nonnull @current_ptr) #26
    %33 = getelementptr i8, ptr %result.i.i1461, i64 40
    %34 = getelementptr i8, ptr %result.i.i1461, i64 48
    store ptr @_parameterization_Ptri32, ptr %34, align 8
    %35 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %33)
    store ptr @Array, ptr %result.i.i1461, align 8
    %36 = getelementptr i8, ptr %result.i.i1461, i64 8
    store ptr %result.i453, ptr %36, align 8
    %37 = getelementptr i8, ptr %result.i.i1461, i64 24
    store i32 53, ptr %37, align 4
    %38 = getelementptr i8, ptr %result.i.i1461, i64 32
    store ptr %ret.i618, ptr %38, align 8
    %result.i647 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #26
    call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5)
    %result.i649 = call i32 @VirtualProtect(ptr %result.i647, i64 16, i32 64, ptr nonnull %5) #14
    call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5)
    call void @llvm.init.trampoline(ptr %result.i647, ptr nonnull @vnpokpysya, ptr nonnull @_functionliteral_qevxpccvpm)
    %ret.i650 = call ptr @llvm.adjust.trampoline(ptr readonly %result.i647) #28
    %39 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i647)
    %result.i651 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #26
    call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5)
    %result.i653 = call i32 @VirtualProtect(ptr %result.i651, i64 16, i32 64, ptr nonnull %5) #14
    call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5)
    call void @llvm.init.trampoline(ptr %result.i651, ptr nonnull @vyergufoax, ptr nonnull @_functionliteral_hhivbkuclz)
    %ret.i654 = call ptr @llvm.adjust.trampoline(ptr readonly %result.i651) #28
    %40 = call ptr @llvm.invariant.start.p0(i64 24, ptr %result.i651)
    %41 = load ptr, ptr %37, align 8
    %result.i.i1510 = call noalias dereferenceable_or_null(56) ptr @bump_malloc_inner(i64 noundef 56, ptr nonnull @current_ptr) #26
    %42 = getelementptr i8, ptr %result.i.i1510, i64 40
    store ptr %41, ptr %42, align 8
    %43 = getelementptr i8, ptr %result.i.i1510, i64 48
    store ptr @_parameterization_Ptri32, ptr %43, align 8
    %44 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %42)
    store ptr @MapIterable2, ptr %result.i.i1510, align 8
    %45 = getelementptr i8, ptr %result.i.i1510, i64 8
    store ptr %result.i.i1461, ptr %45, align 8
    %46 = getelementptr i8, ptr %result.i.i1510, i64 24
    store i32 35, ptr %46, align 4
    %47 = getelementptr i8, ptr %result.i.i1510, i64 32
    store ptr %ret.i654, ptr %47, align 8
    %48 = load ptr, ptr %46, align 8
    %result.i.i1732 = call noalias dereferenceable_or_null(56) ptr @bump_malloc_inner(i64 noundef 56, ptr nonnull @current_ptr) #26
    %49 = getelementptr i8, ptr %result.i.i1732, i64 40
    store ptr %48, ptr %49, align 8
    %50 = getelementptr i8, ptr %result.i.i1732, i64 48
    store ptr @_parameterization_Ptrf64, ptr %50, align 8
    %51 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %49)
    store ptr @MapIterable2, ptr %result.i.i1732, align 8
    %52 = getelementptr i8, ptr %result.i.i1732, i64 8
    store ptr %result.i.i1510, ptr %52, align 8
    %53 = getelementptr i8, ptr %result.i.i1732, i64 24
    store i32 35, ptr %53, align 4
    %54 = getelementptr i8, ptr %result.i.i1732, i64 32
    store ptr %ret.i650, ptr %54, align 8
    call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
    call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
    call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
    call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
    call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
    %55 = call ptr @llvm.invariant.start.p0(i64 408, ptr nonnull @MapIterable2)
    call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
    %56 = alloca { ptr, ptr, ptr, i32 }, align 8
    call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
    call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
    call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
    %57 = call ptr @llvm.invariant.start.p0(i64 88, ptr nonnull @MapIterator2)
    call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
    %58 = load ptr, ptr %result.i.i1743, align 8
    %59 = load i160, ptr %21, align 4
    call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
    %60 = icmp ne ptr %58, @nil_typ
    %61 = icmp ne ptr %58, null
    %.not27.i2718 = and i1 %60, %61
    br i1 %.not27.i2718, label %MapIterator2_next_.exit2738, label %.critedge.sink.split.sink.split.sink.split
  
  MapIterator2_next_.exit2738:                      ; preds = %ArrayIterator_next_.exit2913
    call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
    call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
    %.sroa.1.8.extract.trunc.i = trunc i160 %59 to i32
    call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
    %.in2896 = shl i32 %.sroa.1.8.extract.trunc.i, 1
    %62 = sitofp i32 %.in2896 to double
    %63 = call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i32_string, i32 55)
    %64 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
    %65 = call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @float_string, double %62)
    call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
    call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
    call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
    %66 = call ptr @llvm.invariant.start.p0(i64 88, ptr nonnull @MapIterator2)
    call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
    %67 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @ArrayIterator)
    %sunkaddr = getelementptr i8, ptr %result.i453, i64 8
    %68 = load i32, ptr %sunkaddr, align 4
    %.not.i2944 = icmp sgt i32 %68, 1
    br i1 %.not.i2944, label %ArrayIterator_next_.exit2984, label %.critedge.sink.split.sink.split.sink.split.sink.split
  
  ArrayIterator_next_.exit2984:                     ; preds = %MapIterator2_next_.exit2738
    %69 = call ptr @llvm.invariant.start.p0(i64 552, ptr nonnull @Array)
    %70 = load ptr, ptr %result.i453, align 8
    %71 = getelementptr i8, ptr %70, i64 32
    %72 = load ptr, ptr %71, align 8
    %73 = getelementptr i8, ptr %70, i64 40
    %74 = load i160, ptr %73, align 4
    call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
    %75 = icmp ne ptr %72, @nil_typ
    %76 = icmp ne ptr %72, null
    %.not27.i27702898 = and i1 %75, %76
    br i1 %.not27.i27702898, label %MapIterator2_next_.exit2795.preheader, label %.critedge.sink.split.sink.split.sink.split
  
  MapIterator2_next_.exit2795.preheader:            ; preds = %ArrayIterator_next_.exit2984
    %extract.t3072 = trunc i160 %74 to i32
    br label %MapIterator2_next_.exit2795
  
  MapIterator2_next_.exit2795:                      ; preds = %ArrayIterator_next_.exit3055, %MapIterator2_next_.exit2795.preheader
    %lsr.iv3 = phi i32 [ %lsr.iv.next4, %ArrayIterator_next_.exit3055 ], [ 1, %MapIterator2_next_.exit2795.preheader ]
    %lsr.iv = phi i64 [ %lsr.iv.next, %ArrayIterator_next_.exit3055 ], [ 72, %MapIterator2_next_.exit2795.preheader ]
    %.sroa.3.8.insert.insert.i3054.pn.off0 = phi i32 [ %extract.t3071, %ArrayIterator_next_.exit3055 ], [ %extract.t3072, %MapIterator2_next_.exit2795.preheader ]
    call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
    call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
    call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
    %.in = shl i32 %.sroa.3.8.insert.insert.i3054.pn.off0, 1
    %77 = sitofp i32 %.in to double
    %78 = call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i32_string, i32 55)
    %79 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
    %80 = call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @float_string, double %77)
    call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
    call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
    call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
    %81 = call ptr @llvm.invariant.start.p0(i64 88, ptr nonnull @MapIterator2)
    call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
    %82 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @ArrayIterator)
    %sunkaddr9 = getelementptr i8, ptr %result.i453, i64 8
    %83 = load i32, ptr %sunkaddr9, align 4
    %lsr.iv.next = add nuw nsw i64 %lsr.iv, 32
    %lsr.iv.next4 = add nuw nsw i32 %lsr.iv3, 1
    %.not.i3015 = icmp slt i32 %lsr.iv.next4, %83
    br i1 %.not.i3015, label %ArrayIterator_next_.exit3055, label %.critedge.sink.split.sink.split.sink.split.sink.split
  
  ArrayIterator_next_.exit3055:                     ; preds = %MapIterator2_next_.exit2795
    %84 = call ptr @llvm.invariant.start.p0(i64 552, ptr nonnull @Array)
    %85 = load ptr, ptr %result.i453, align 8
    %scevgep1 = getelementptr i8, ptr %85, i64 %lsr.iv
    %scevgep2 = getelementptr i8, ptr %scevgep1, i64 -8
    %86 = load ptr, ptr %scevgep2, align 8
    %scevgep = getelementptr i8, ptr %85, i64 %lsr.iv
    %87 = load i160, ptr %scevgep, align 4
    call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
    %88 = icmp ne ptr %86, @nil_typ
    %89 = icmp ne ptr %86, null
    %.not27.i2770 = and i1 %88, %89
    %extract.t3071 = trunc i160 %87 to i32
    br i1 %.not27.i2770, label %MapIterator2_next_.exit2795, label %.critedge.sink.split.sink.split.sink.split
  
  .critedge.sink.split.sink.split.sink.split.sink.split: ; preds = %MapIterator2_next_.exit2795, %MapIterator2_next_.exit2738
    call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
    br label %.critedge.sink.split.sink.split.sink.split
  
  .critedge.sink.split.sink.split.sink.split:       ; preds = %ArrayIterator_next_.exit3055, %.critedge.sink.split.sink.split.sink.split.sink.split, %ArrayIterator_next_.exit2984, %ArrayIterator_next_.exit2913
    %const6 = bitcast i64 4189192806087951739 to i64
    call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
    call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
    call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
    %90 = getelementptr i8, ptr %result.i453, i64 24
    %91 = load ptr, ptr %90, align 8
    %result.i.i = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #26
    %92 = getelementptr i8, ptr %result.i.i, i64 16
    store ptr @_parameterization_Ptri32, ptr %92, align 8
    %93 = getelementptr i8, ptr %result.i.i, i64 8
    store ptr %91, ptr %93, align 8
    store ptr @Pair, ptr %result.i.i, align 8
    %result.i23.i = call noalias dereferenceable_or_null(88) ptr @bump_malloc_inner(i64 noundef 88, ptr nonnull @current_ptr) #26
    %94 = getelementptr i8, ptr %result.i23.i, i64 64
    store ptr %91, ptr %94, align 8
    %95 = getelementptr i8, ptr %result.i23.i, i64 72
    store ptr @_parameterization_Ptri32, ptr %95, align 8
    %96 = getelementptr i8, ptr %result.i23.i, i64 80
    store ptr %result.i.i, ptr %96, align 8
    %97 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %94)
    store ptr @Array, ptr %result.i23.i, align 8
    %98 = getelementptr i8, ptr %result.i23.i, i64 8
    store ptr %result.i453, ptr %98, align 8
    %99 = getelementptr i8, ptr %result.i23.i, i64 24
    store i32 53, ptr %99, align 4
    %100 = getelementptr i8, ptr %result.i23.i, i64 32
    store ptr @MapIterable2, ptr %100, align 8
    %101 = getelementptr i8, ptr %result.i23.i, i64 40
    store ptr %result.i.i1732, ptr %101, align 8
    %102 = getelementptr i8, ptr %result.i23.i, i64 56
    store i32 35, ptr %102, align 4
    call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
    %103 = call ptr @llvm.invariant.start.p0(i64 552, ptr nonnull @Array)
    %104 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @ArrayIterator)
    %105 = call ptr @llvm.invariant.start.p0(i64 416, ptr nonnull @ZipIterable2)
    call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
    %106 = getelementptr i8, ptr %result.i.i1732, i64 16
    call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
    %107 = call ptr @llvm.invariant.start.p0(i64 408, ptr nonnull @MapIterable2)
    %108 = load ptr, ptr %result.i.i1510, align 8
    %109 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %108, 0
    %sunkaddr10 = getelementptr i8, ptr %result.i.i1510, i64 8
    %110 = load ptr, ptr %sunkaddr10, align 8
    %111 = insertvalue { ptr, ptr, ptr, i32 } %109, ptr %110, 1
    %112 = getelementptr i8, ptr %result.i.i1510, i64 16
    %113 = load ptr, ptr %112, align 8
    %114 = insertvalue { ptr, ptr, ptr, i32 } %111, ptr %113, 2
    %sunkaddr11 = getelementptr i8, ptr %result.i.i1510, i64 24
    %115 = load i32, ptr %sunkaddr11, align 4
    %116 = insertvalue { ptr, ptr, ptr, i32 } %114, i32 %115, 3
    %117 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
    %118 = call ptr @llvm.invariant.start.p0(i64 184, ptr %108)
    %119 = sext i32 %115 to i64
    %120 = getelementptr ptr, ptr %108, i64 %119
    %121 = getelementptr i8, ptr %120, i64 8
    %122 = load ptr, ptr %121, align 8
    %123 = call ptr %122({ ptr, ptr, ptr, i32 } %116, ptr nonnull %0)
    %124 = call { ptr, ptr, ptr, i32 } %123({ ptr, ptr, ptr, i32 } %116, { ptr, ptr, ptr, i32 } %116, ptr nonnull %0)
    %125 = load ptr, ptr %112, align 8
    %126 = load ptr, ptr %sunkaddr11, align 8
    %127 = call ptr @llvm.invariant.start.p0(i64 408, ptr nonnull @MapIterable2)
    %128 = load ptr, ptr %result.i.i1510, align 8
    %129 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %128, 0
    %130 = load ptr, ptr %sunkaddr10, align 8
    %131 = insertvalue { ptr, ptr, ptr, i32 } %129, ptr %130, 1
    %132 = insertvalue { ptr, ptr, ptr, i32 } %131, ptr %125, 2
    %133 = ptrtoint ptr %126 to i64
    %134 = trunc i64 %133 to i32
    %135 = insertvalue { ptr, ptr, ptr, i32 } %132, i32 %134, 3
    %136 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
    %137 = call ptr @llvm.invariant.start.p0(i64 184, ptr %128)
    %138 = sext i32 %134 to i64
    %139 = getelementptr ptr, ptr %128, i64 %138
    %140 = getelementptr i8, ptr %139, i64 8
    %141 = load ptr, ptr %140, align 8
    %142 = call ptr %141({ ptr, ptr, ptr, i32 } %135, ptr nonnull %0)
    %143 = call { ptr, ptr, ptr, i32 } %142({ ptr, ptr, ptr, i32 } %135, { ptr, ptr, ptr, i32 } %135, ptr nonnull %0)
    %144 = call ptr @llvm.invariant.start.p0(i64 88, ptr nonnull @MapIterator2)
    call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
    %145 = load ptr, ptr %106, align 8
    %sunkaddr12 = getelementptr i8, ptr %result.i.i1732, i64 24
    %146 = load ptr, ptr %sunkaddr12, align 8
    %147 = call ptr @llvm.invariant.start.p0(i64 408, ptr nonnull @MapIterable2)
    %148 = load ptr, ptr %result.i.i1732, align 8
    %149 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %148, 0
    %sunkaddr13 = getelementptr i8, ptr %result.i.i1732, i64 8
    %150 = load ptr, ptr %sunkaddr13, align 8
    %151 = insertvalue { ptr, ptr, ptr, i32 } %149, ptr %150, 1
    %152 = insertvalue { ptr, ptr, ptr, i32 } %151, ptr %145, 2
    %153 = ptrtoint ptr %146 to i64
    %154 = trunc i64 %153 to i32
    %155 = insertvalue { ptr, ptr, ptr, i32 } %152, i32 %154, 3
    %156 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
    %157 = call ptr @llvm.invariant.start.p0(i64 184, ptr %148)
    %158 = sext i32 %154 to i64
    %159 = getelementptr ptr, ptr %148, i64 %158
    %160 = getelementptr i8, ptr %159, i64 8
    %161 = load ptr, ptr %160, align 8
    %162 = call ptr %161({ ptr, ptr, ptr, i32 } %155, ptr nonnull %0)
    %163 = call { ptr, ptr, ptr, i32 } %162({ ptr, ptr, ptr, i32 } %155, { ptr, ptr, ptr, i32 } %155, ptr nonnull %0)
    %164 = call ptr @llvm.invariant.start.p0(i64 88, ptr nonnull @MapIterator2)
    call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
    %165 = load ptr, ptr %99, align 8
    %result.i.i3247 = call noalias dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nonnull @current_ptr) #26
    %166 = getelementptr i8, ptr %result.i.i3247, i64 16
    store ptr %165, ptr %166, align 8
    store ptr @Pair, ptr %result.i.i3247, align 8
    %result.i123.i = call noalias dereferenceable_or_null(88) ptr @bump_malloc_inner(i64 noundef 88, ptr nonnull @current_ptr) #26
    %167 = getelementptr i8, ptr %result.i123.i, i64 64
    %168 = getelementptr i8, ptr %result.i123.i, i64 72
    store ptr %165, ptr %168, align 8
    %169 = getelementptr i8, ptr %result.i123.i, i64 80
    store ptr %result.i.i3247, ptr %169, align 8
    %170 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %167)
    %171 = load ptr, ptr %90, align 8
    %result.i.i3406 = call noalias dereferenceable_or_null(48) ptr @bump_malloc_inner(i64 noundef 48, ptr nonnull @current_ptr) #26
    %172 = getelementptr i8, ptr %result.i.i3406, i64 40
    store ptr %171, ptr %172, align 8
    %173 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %172)
    %174 = call ptr @llvm.invariant.start.p0(i64 552, ptr nonnull @Array)
    store ptr @Array, ptr %result.i.i3406, align 8
    %175 = getelementptr i8, ptr %result.i.i3406, i64 8
    store ptr %result.i453, ptr %175, align 8
    %176 = getelementptr i8, ptr %result.i.i3406, i64 24
    store i32 7, ptr %176, align 4
    %177 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @ArrayIterator)
    %178 = getelementptr i8, ptr %result.i.i3406, i64 32
    store i32 0, ptr %178, align 4
    %179 = call ptr @llvm.invariant.start.p0(i64 416, ptr nonnull @ZipIterable2)
    call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
    call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %5)
    %180 = call ptr @llvm.invariant.start.p0(i64 408, ptr nonnull @MapIterable2)
    %181 = load ptr, ptr %result.i.i1732, align 8
    %182 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %181, 0
    %183 = load ptr, ptr %sunkaddr13, align 8
    %184 = insertvalue { ptr, ptr, ptr, i32 } %182, ptr %183, 1
    %185 = load ptr, ptr %106, align 8
    %186 = insertvalue { ptr, ptr, ptr, i32 } %184, ptr %185, 2
    %187 = load i32, ptr %sunkaddr12, align 4
    %188 = insertvalue { ptr, ptr, ptr, i32 } %186, i32 %187, 3
    %189 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
    %190 = call ptr @llvm.invariant.start.p0(i64 184, ptr %181)
    %191 = sext i32 %187 to i64
    %192 = getelementptr ptr, ptr %181, i64 %191
    %193 = getelementptr i8, ptr %192, i64 8
    %194 = load ptr, ptr %193, align 8
    %195 = call ptr %194({ ptr, ptr, ptr, i32 } %188, ptr nonnull %0)
    %196 = call { ptr, ptr, ptr, i32 } %195({ ptr, ptr, ptr, i32 } %188, { ptr, ptr, ptr, i32 } %188, ptr nonnull %0)
    %197 = load ptr, ptr %106, align 8
    %198 = load ptr, ptr %sunkaddr12, align 8
    %result.i.i3446 = call noalias dereferenceable_or_null(56) ptr @bump_malloc_inner(i64 noundef 56, ptr nonnull @current_ptr) #26
    %199 = getelementptr inbounds i8, ptr %5, i64 8
    %200 = getelementptr inbounds i8, ptr %5, i64 24
    store ptr @MapIterator2, ptr %5, align 8
    store ptr %result.i.i3446, ptr %199, align 8
    store i32 7, ptr %200, align 8
    %201 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %5)
    %202 = getelementptr i8, ptr %result.i.i3446, i64 40
    store ptr %197, ptr %202, align 8
    %203 = getelementptr i8, ptr %result.i.i3446, i64 48
    store ptr %198, ptr %203, align 8
    %204 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %202)
    %205 = call ptr @llvm.invariant.start.p0(i64 408, ptr nonnull @MapIterable2)
    %206 = load ptr, ptr %result.i.i1732, align 8
    %207 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %206, 0
    %208 = load ptr, ptr %sunkaddr13, align 8
    %209 = insertvalue { ptr, ptr, ptr, i32 } %207, ptr %208, 1
    %210 = insertvalue { ptr, ptr, ptr, i32 } %209, ptr %197, 2
    %211 = ptrtoint ptr %198 to i64
    %212 = trunc i64 %211 to i32
    %213 = insertvalue { ptr, ptr, ptr, i32 } %210, i32 %212, 3
    %214 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
    %215 = call ptr @llvm.invariant.start.p0(i64 184, ptr %206)
    %216 = sext i32 %212 to i64
    %217 = getelementptr ptr, ptr %206, i64 %216
    %218 = getelementptr i8, ptr %217, i64 8
    %219 = load ptr, ptr %218, align 8
    %220 = call ptr %219({ ptr, ptr, ptr, i32 } %213, ptr nonnull %0)
    %221 = call { ptr, ptr, ptr, i32 } %220({ ptr, ptr, ptr, i32 } %213, { ptr, ptr, ptr, i32 } %213, ptr nonnull %0)
    %.fca.0.extract1.i3464 = extractvalue { ptr, ptr, ptr, i32 } %221, 0
    %.fca.1.extract.i3465 = extractvalue { ptr, ptr, ptr, i32 } %221, 1
    %.fca.2.extract.i3466 = extractvalue { ptr, ptr, ptr, i32 } %221, 2
    %hash_coef_ptr.i.i79.i3467 = getelementptr i8, ptr %.fca.0.extract1.i3464, i64 8
    %tbl_size_ptr.i.i80.i3468 = getelementptr i8, ptr %.fca.0.extract1.i3464, i64 16
    %offset_tbl_ptr.i.i81.i3469 = getelementptr i8, ptr %.fca.0.extract1.i3464, i64 40
    %222 = call ptr @llvm.invariant.start.p0(i64 408, ptr nonnull @MapIterable2)
    %sunkaddr14 = getelementptr i8, ptr %result.i.i1732, i64 32
    %223 = load ptr, ptr %sunkaddr14, align 8
    %hash_coef.i.i96.i3470 = load i64, ptr %hash_coef_ptr.i.i79.i3467, align 4
    %tbl_size.i.i97.i3471 = load i64, ptr %tbl_size_ptr.i.i80.i3468, align 4
    %offset_tbl.i.i98.i3472 = load ptr, ptr %offset_tbl_ptr.i.i81.i3469, align 8
    %product.i.i.i99.i3473 = mul i64 %hash_coef.i.i96.i3470, %const6
    %shifted.i.i.i100.i3474 = lshr i64 %product.i.i.i99.i3473, 32
    %xored.i.i.i101.i3475 = xor i64 %shifted.i.i.i100.i3474, %product.i.i.i99.i3473
    %hash.i.i.i102.i3476 = and i64 %xored.i.i.i101.i3475, %tbl_size.i.i97.i3471
    %offset_ptr.i.i103.i3477 = getelementptr i32, ptr %offset_tbl.i.i98.i3472, i64 %hash.i.i.i102.i3476
    %offset.i.i104.i3478 = load i32, ptr %offset_ptr.i.i103.i3477, align 4
    %224 = getelementptr inbounds i8, ptr %5, i64 16
    %225 = load ptr, ptr %224, align 8
    store ptr %.fca.0.extract1.i3464, ptr %result.i.i3446, align 8
    %226 = getelementptr i8, ptr %result.i.i3446, i64 8
    store ptr %.fca.1.extract.i3465, ptr %226, align 8
    %227 = getelementptr i8, ptr %result.i.i3446, i64 16
    store ptr %.fca.2.extract.i3466, ptr %227, align 8
    %228 = getelementptr i8, ptr %result.i.i3446, i64 24
    store i32 %offset.i.i104.i3478, ptr %228, align 4
    %229 = call ptr @llvm.invariant.start.p0(i64 88, ptr nonnull @MapIterator2)
    %230 = getelementptr i8, ptr %result.i.i3446, i64 32
    store ptr %223, ptr %230, align 8
    call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
    call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %5)
    %231 = call ptr @llvm.invariant.start.p0(i64 416, ptr nonnull @ZipIterable2)
    store ptr @ArrayIterator, ptr %result.i123.i, align 8
    %232 = getelementptr i8, ptr %result.i123.i, i64 8
    store ptr %result.i.i3406, ptr %232, align 8
    %233 = getelementptr i8, ptr %result.i123.i, i64 24
    store i32 14, ptr %233, align 4
    %234 = getelementptr i8, ptr %result.i123.i, i64 32
    store ptr @MapIterator2, ptr %234, align 8
    %235 = getelementptr i8, ptr %result.i123.i, i64 40
    store ptr %result.i.i3446, ptr %235, align 8
    %236 = getelementptr i8, ptr %result.i123.i, i64 48
    store ptr %225, ptr %236, align 8
    %237 = getelementptr i8, ptr %result.i123.i, i64 56
    store i32 15, ptr %237, align 4
    call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
    call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
    call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %5)
    %238 = call ptr @llvm.invariant.start.p0(i64 96, ptr nonnull @ZipIterator2)
    call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
    call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %1)
    call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2)
    %239 = load i32, ptr %178, align 4
    %240 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @ArrayIterator)
    %241 = load ptr, ptr %result.i.i3406, align 8
    %242 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %241, 0
    %243 = load ptr, ptr %175, align 8
    %244 = insertvalue { ptr, ptr, ptr, i32 } %242, ptr %243, 1
    %245 = getelementptr i8, ptr %result.i.i3406, i64 16
    %246 = load ptr, ptr %245, align 8
    %247 = insertvalue { ptr, ptr, ptr, i32 } %244, ptr %246, 2
    %248 = load i32, ptr %176, align 4
    %249 = insertvalue { ptr, ptr, ptr, i32 } %247, i32 %248, 3
    %250 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
    %251 = call ptr @llvm.invariant.start.p0(i64 552, ptr %241)
    %252 = sext i32 %248 to i64
    %253 = getelementptr ptr, ptr %241, i64 %252
    %254 = getelementptr i8, ptr %253, i64 56
    %255 = load ptr, ptr %254, align 8
    %256 = call ptr %255({ ptr, ptr, ptr, i32 } %249, ptr nonnull %0)
    %257 = call i32 %256({ ptr, ptr, ptr, i32 } %249, { ptr, ptr, ptr, i32 } %249, ptr nonnull %0)
    %.not.i = icmp slt i32 %239, %257
    br i1 %.not.i, label %258, label %ArrayIterator_next_.exit
  
  258:                                              ; preds = %.critedge.sink.split.sink.split.sink.split
    %sunkaddr15 = getelementptr i8, ptr %result.i.i3406, i64 32
    %259 = load i32, ptr %sunkaddr15, align 4
    %260 = add i32 %259, 1
    store i32 %260, ptr %sunkaddr15, align 4
    %261 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @ArrayIterator)
    %262 = load ptr, ptr %result.i.i3406, align 8
    %263 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %262, 0
    %sunkaddr16 = getelementptr i8, ptr %result.i.i3406, i64 8
    %264 = load ptr, ptr %sunkaddr16, align 8
    %265 = insertvalue { ptr, ptr, ptr, i32 } %263, ptr %264, 1
    %sunkaddr17 = getelementptr i8, ptr %result.i.i3406, i64 16
    %266 = load ptr, ptr %sunkaddr17, align 8
    %267 = insertvalue { ptr, ptr, ptr, i32 } %265, ptr %266, 2
    %sunkaddr18 = getelementptr i8, ptr %result.i.i3406, i64 24
    %268 = load i32, ptr %sunkaddr18, align 4
    %269 = insertvalue { ptr, ptr, ptr, i32 } %267, i32 %268, 3
    store ptr @_parameterization_Ptri32, ptr %1, align 8
    %270 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %1)
    %271 = call ptr @llvm.invariant.start.p0(i64 552, ptr %262)
    %272 = sext i32 %268 to i64
    %273 = getelementptr ptr, ptr %262, i64 %272
    %274 = getelementptr i8, ptr %273, i64 104
    %275 = load ptr, ptr %274, align 8
    store ptr @i32_typ, ptr %2, align 8
    %276 = call ptr %275({ ptr, ptr, ptr, i32 } %269, ptr nonnull %2)
    %277 = call { ptr, i160 } %276({ ptr, ptr, ptr, i32 } %269, { ptr, ptr, ptr, i32 } %269, ptr nonnull %1, i32 %259)
    %.fca.0.extract.i3576 = extractvalue { ptr, i160 } %277, 0
    %.fca.1.extract.i3577 = extractvalue { ptr, i160 } %277, 1
    %.sroa.3.8.insert.ext.i3578 = and i160 %.fca.1.extract.i3577, 340282366920938463463374607431768211455
    br label %ArrayIterator_next_.exit
  
  ArrayIterator_next_.exit:                         ; preds = %258, %.critedge.sink.split.sink.split.sink.split
    %.reg2mem5.sroa.0.0.i = phi ptr [ %.fca.0.extract.i3576, %258 ], [ @nil_typ, %.critedge.sink.split.sink.split.sink.split ]
    %.reg2mem5.sroa.3.0.i = phi i160 [ %.sroa.3.8.insert.ext.i3578, %258 ], [ 0, %.critedge.sink.split.sink.split.sink.split ]
    call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
    call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %1)
    call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2)
    %278 = call ptr @llvm.invariant.start.p0(i64 96, ptr nonnull @ZipIterator2)
    call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
    %279 = call ptr @llvm.invariant.start.p0(i64 88, ptr nonnull @MapIterator2)
    %280 = load ptr, ptr %result.i.i3446, align 8
    %281 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %280, 0
    %sunkaddr19 = getelementptr i8, ptr %result.i.i3446, i64 8
    %282 = load ptr, ptr %sunkaddr19, align 8
    %283 = insertvalue { ptr, ptr, ptr, i32 } %281, ptr %282, 1
    %sunkaddr20 = getelementptr i8, ptr %result.i.i3446, i64 16
    %284 = load ptr, ptr %sunkaddr20, align 8
    %285 = insertvalue { ptr, ptr, ptr, i32 } %283, ptr %284, 2
    %sunkaddr21 = getelementptr i8, ptr %result.i.i3446, i64 24
    %286 = load i32, ptr %sunkaddr21, align 4
    %287 = insertvalue { ptr, ptr, ptr, i32 } %285, i32 %286, 3
    %288 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
    %289 = call ptr @llvm.invariant.start.p0(i64 24, ptr %280)
    %290 = sext i32 %286 to i64
    %291 = getelementptr ptr, ptr %280, i64 %290
    %292 = getelementptr i8, ptr %291, i64 8
    %293 = load ptr, ptr %292, align 8
    %294 = call ptr %293({ ptr, ptr, ptr, i32 } %287, ptr nonnull %0)
    %295 = call { ptr, i160 } %294({ ptr, ptr, ptr, i32 } %287, { ptr, ptr, ptr, i32 } %287, ptr nonnull %0)
    %.fca.0.extract4.i = extractvalue { ptr, i160 } %295, 0
    %296 = icmp ne ptr %.fca.0.extract4.i, @nil_typ
    %297 = icmp ne ptr %.fca.0.extract4.i, null
    %.not27.i = and i1 %296, %297
    br i1 %.not27.i, label %298, label %MapIterator2_next_.exit
  
  298:                                              ; preds = %ArrayIterator_next_.exit
    %const5 = bitcast i64 3084208142191802847 to i64
    %.fca.1.extract5.i = extractvalue { ptr, i160 } %295, 1
    %hash_coef_ptr.i.i43.i = getelementptr i8, ptr %.fca.0.extract4.i, i64 8
    %tbl_size_ptr.i.i44.i = getelementptr i8, ptr %.fca.0.extract4.i, i64 16
    %offset_tbl_ptr.i.i45.i = getelementptr i8, ptr %.fca.0.extract4.i, i64 40
    %hash_coef.i.i46.i = load i64, ptr %hash_coef_ptr.i.i43.i, align 4
    %tbl_size.i.i47.i = load i64, ptr %tbl_size_ptr.i.i44.i, align 4
    %offset_tbl.i.i48.i = load ptr, ptr %offset_tbl_ptr.i.i45.i, align 8
    %product.i.i.i49.i = mul i64 %hash_coef.i.i46.i, %const5
    %shifted.i.i.i50.i = lshr i64 %product.i.i.i49.i, 32
    %xored.i.i.i51.i = xor i64 %shifted.i.i.i50.i, %product.i.i.i49.i
    %hash.i.i.i52.i = and i64 %xored.i.i.i51.i, %tbl_size.i.i47.i
    %offset_ptr.i.i53.i = getelementptr i32, ptr %offset_tbl.i.i48.i, i64 %hash.i.i.i52.i
    %offset.i.i54.i = load i32, ptr %offset_ptr.i.i53.i, align 4
    %.sroa.575.8.insert.ext.i = zext i32 %offset.i.i54.i to i160
    %.sroa.575.8.insert.shift.i = shl nuw i160 %.sroa.575.8.insert.ext.i, 128
    %299 = insertvalue { ptr, i160 } undef, ptr %.fca.0.extract4.i, 0
    %.sroa.3.8.insert.ext.i3599 = and i160 %.fca.1.extract5.i, 340282366920938463463374607431768211455
    %.sroa.3.8.insert.insert.i3600 = or disjoint i160 %.sroa.575.8.insert.shift.i, %.sroa.3.8.insert.ext.i3599
    %300 = insertvalue { ptr, i160 } %299, i160 %.sroa.3.8.insert.insert.i3600, 1
    %301 = call ptr @llvm.invariant.start.p0(i64 88, ptr nonnull @MapIterator2)
    %sunkaddr22 = getelementptr i8, ptr %result.i.i3446, i64 32
    %302 = load ptr, ptr %sunkaddr22, align 8
    %303 = call { ptr, i160 } %302({ ptr, i160 } %300)
    %.fca.0.extract.i3602 = extractvalue { ptr, i160 } %303, 0
    %.fca.1.extract.i3603 = extractvalue { ptr, i160 } %303, 1
    %304 = and i160 %.fca.1.extract.i3603, 340282366920938463463374607431768211455
    br label %MapIterator2_next_.exit
  
  MapIterator2_next_.exit:                          ; preds = %298, %ArrayIterator_next_.exit
    %.reg2mem5.sroa.0.0.i3595 = phi ptr [ %.fca.0.extract.i3602, %298 ], [ @nil_typ, %ArrayIterator_next_.exit ]
    %.reg2mem5.sroa.3.0.i3596 = phi i160 [ %304, %298 ], [ 0, %ArrayIterator_next_.exit ]
    call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
    %305 = icmp ne ptr %.reg2mem5.sroa.0.0.i, @nil_typ
    %306 = icmp ne ptr %.reg2mem5.sroa.0.0.i, null
    %.not42.i = and i1 %305, %306
    br i1 %.not42.i, label %307, label %ZipIterator2_next_.exit.thread
  
  307:                                              ; preds = %MapIterator2_next_.exit
    %308 = icmp ne ptr %.reg2mem5.sroa.0.0.i3595, @nil_typ
    %309 = icmp ne ptr %.reg2mem5.sroa.0.0.i3595, null
    %.not44.not.not.i = and i1 %308, %309
    br i1 %.not44.not.not.i, label %._crit_edge2.lr.ph, label %ZipIterator2_next_.exit.thread
  
  ZipIterator2_next_.exit.thread:                   ; preds = %307, %MapIterator2_next_.exit
    call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
    call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %5)
    br label %IO_B__Self_print_xPtri8__Self_print_xPtri1__Self_print_xNil__Self_print_xCharacter__Self_print_xPtri64__Self_print_xPtri32__Self_print_xRepresentable__Self_print_xString__Self_print_xPtrf64.exit1040
  
  ._crit_edge2.lr.ph:                               ; preds = %307
    %const = bitcast i64 3084208142191802847 to i64
    %offset_tbl_ptr.i.i80.i = getelementptr i8, ptr %.reg2mem5.sroa.0.0.i, i64 40
    %hash_coef_ptr.i.i78.i = getelementptr i8, ptr %.reg2mem5.sroa.0.0.i, i64 8
    %tbl_size_ptr.i.i79.i = getelementptr i8, ptr %.reg2mem5.sroa.0.0.i, i64 16
    %hash_coef_ptr.i.i92.i = getelementptr i8, ptr %.reg2mem5.sroa.0.0.i3595, i64 8
    %tbl_size_ptr.i.i93.i = getelementptr i8, ptr %.reg2mem5.sroa.0.0.i3595, i64 16
    %offset_tbl_ptr.i.i94.i = getelementptr i8, ptr %.reg2mem5.sroa.0.0.i3595, i64 40
    %sunkaddr23 = getelementptr i8, ptr %result.i123.i, i64 24
    %310 = load ptr, ptr %sunkaddr23, align 8
    %result.i.i3269 = call noalias dereferenceable_or_null(80) ptr @bump_malloc_inner(i64 noundef 80, ptr nonnull @current_ptr) #26
    %311 = getelementptr inbounds i8, ptr %5, i64 8
    %312 = getelementptr inbounds i8, ptr %5, i64 24
    store ptr @Pair, ptr %5, align 8
    store ptr %result.i.i3269, ptr %311, align 8
    store i32 7, ptr %312, align 8
    %313 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %5)
    %314 = getelementptr i8, ptr %result.i.i3269, i64 64
    %315 = getelementptr i8, ptr %result.i.i3269, i64 72
    store ptr %310, ptr %315, align 8
    %316 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %314)
    %317 = call ptr @llvm.invariant.start.p0(i64 96, ptr nonnull @ZipIterator2)
    %318 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @Pair)
    %hash_coef.i.i11.i.i = load i64, ptr %hash_coef_ptr.i.i78.i, align 4
    %tbl_size.i.i12.i.i = load i64, ptr %tbl_size_ptr.i.i79.i, align 4
    %offset_tbl.i.i13.i.i = load ptr, ptr %offset_tbl_ptr.i.i80.i, align 8
    %product.i.i.i14.i.i = mul i64 %hash_coef.i.i11.i.i, %const
    %shifted.i.i.i15.i.i = lshr i64 %product.i.i.i14.i.i, 32
    %xored.i.i.i16.i.i = xor i64 %shifted.i.i.i15.i.i, %product.i.i.i14.i.i
    %hash.i.i.i17.i.i = and i64 %xored.i.i.i16.i.i, %tbl_size.i.i12.i.i
    %offset_ptr.i.i18.i.i = getelementptr i32, ptr %offset_tbl.i.i13.i.i, i64 %hash.i.i.i17.i.i
    %offset.i.i19.i.i = load i32, ptr %offset_ptr.i.i18.i.i, align 4
    %.sroa.582.8.insert.ext.i.i = zext i32 %offset.i.i19.i.i to i160
    %.sroa.582.8.insert.shift.i.i = shl nuw i160 %.sroa.582.8.insert.ext.i.i, 128
    %.sroa.3.8.insert.insert74.i.i = or disjoint i160 %.sroa.582.8.insert.shift.i.i, %.reg2mem5.sroa.3.0.i
    store ptr %.reg2mem5.sroa.0.0.i, ptr %result.i.i3269, align 8
    %319 = getelementptr i8, ptr %result.i.i3269, i64 8
    store i160 %.sroa.3.8.insert.insert74.i.i, ptr %319, align 4
    %hash_coef.i.i39.i.i = load i64, ptr %hash_coef_ptr.i.i92.i, align 4
    %tbl_size.i.i40.i.i = load i64, ptr %tbl_size_ptr.i.i93.i, align 4
    %offset_tbl.i.i41.i.i = load ptr, ptr %offset_tbl_ptr.i.i94.i, align 8
    %product.i.i.i42.i.i = mul i64 %hash_coef.i.i39.i.i, %const
    %shifted.i.i.i43.i.i = lshr i64 %product.i.i.i42.i.i, 32
    %xored.i.i.i44.i.i = xor i64 %shifted.i.i.i43.i.i, %product.i.i.i42.i.i
    %hash.i.i.i45.i.i = and i64 %xored.i.i.i44.i.i, %tbl_size.i.i40.i.i
    %offset_ptr.i.i46.i.i = getelementptr i32, ptr %offset_tbl.i.i41.i.i, i64 %hash.i.i.i45.i.i
    %offset.i.i47.i.i = load i32, ptr %offset_ptr.i.i46.i.i, align 4
    %.sroa.568.8.insert.ext.i.i = zext i32 %offset.i.i47.i.i to i160
    %.sroa.568.8.insert.shift.i.i = shl nuw i160 %.sroa.568.8.insert.ext.i.i, 128
    %.sroa.3.8.insert.insert.i.i = or disjoint i160 %.sroa.568.8.insert.shift.i.i, %.reg2mem5.sroa.3.0.i3596
    %320 = getelementptr i8, ptr %result.i.i3269, i64 32
    store ptr %.reg2mem5.sroa.0.0.i3595, ptr %320, align 8
    %321 = getelementptr i8, ptr %result.i.i3269, i64 40
    store i160 %.sroa.3.8.insert.insert.i.i, ptr %321, align 4
    %322 = load i160, ptr %311, align 8
    call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
    call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %5)
    %extract.t = trunc i160 %322 to i64
    %323 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
    %324 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @Pair)
    br label %._crit_edge2
  
  ._crit_edge2:                                     ; preds = %ZipIterator2_next_.exit3359, %._crit_edge2.lr.ph
    %.pn3366.off0 = phi i64 [ %extract.t, %._crit_edge2.lr.ph ], [ %extract.t3367, %ZipIterator2_next_.exit3359 ]
    %325 = inttoptr i64 %.pn3366.off0 to ptr
    %326 = getelementptr i8, ptr %325, i64 8
    %327 = load i160, ptr %326, align 4
    %328 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
    %.sroa.1.8.extract.trunc.i1387 = trunc i160 %327 to i32
    %329 = call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i32_string, i32 %.sroa.1.8.extract.trunc.i1387)
    %330 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
    %331 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @Pair)
    %332 = getelementptr i8, ptr %325, i64 40
    %333 = load i160, ptr %332, align 4
    %334 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
    %.sroa.1.8.extract.trunc.i1389 = trunc i160 %333 to i64
    %335 = bitcast i64 %.sroa.1.8.extract.trunc.i1389 to double
    %336 = call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @float_string, double %335)
    call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
    call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %5)
    %337 = call ptr @llvm.invariant.start.p0(i64 96, ptr nonnull @ZipIterator2)
    %sunkaddr24 = getelementptr i8, ptr %result.i123.i, i64 16
    %338 = load ptr, ptr %sunkaddr24, align 8
    call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
    call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %1)
    call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2)
    %sunkaddr25 = getelementptr i8, ptr %result.i.i3406, i64 32
    %339 = load i32, ptr %sunkaddr25, align 4
    %340 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @ArrayIterator)
    %341 = load ptr, ptr %result.i.i3406, align 8
    %342 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %341, 0
    %sunkaddr26 = getelementptr i8, ptr %result.i.i3406, i64 8
    %343 = load ptr, ptr %sunkaddr26, align 8
    %344 = insertvalue { ptr, ptr, ptr, i32 } %342, ptr %343, 1
    %sunkaddr27 = getelementptr i8, ptr %result.i.i3406, i64 16
    %345 = load ptr, ptr %sunkaddr27, align 8
    %346 = insertvalue { ptr, ptr, ptr, i32 } %344, ptr %345, 2
    %sunkaddr28 = getelementptr i8, ptr %result.i.i3406, i64 24
    %347 = load i32, ptr %sunkaddr28, align 4
    %348 = insertvalue { ptr, ptr, ptr, i32 } %346, i32 %347, 3
    %349 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
    %350 = call ptr @llvm.invariant.start.p0(i64 552, ptr %341)
    %351 = sext i32 %347 to i64
    %352 = getelementptr ptr, ptr %341, i64 %351
    %353 = getelementptr i8, ptr %352, i64 56
    %354 = load ptr, ptr %353, align 8
    %355 = call ptr %354({ ptr, ptr, ptr, i32 } %348, ptr nonnull %0)
    %356 = call i32 %355({ ptr, ptr, ptr, i32 } %348, { ptr, ptr, ptr, i32 } %348, ptr nonnull %0)
    %.not.i3634 = icmp slt i32 %339, %356
    br i1 %.not.i3634, label %357, label %ArrayIterator_next_.exit3674
  
  357:                                              ; preds = %._crit_edge2
    %sunkaddr29 = getelementptr i8, ptr %result.i.i3406, i64 32
    %358 = load i32, ptr %sunkaddr29, align 4
    %359 = add i32 %358, 1
    store i32 %359, ptr %sunkaddr29, align 4
    %360 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @ArrayIterator)
    %361 = load ptr, ptr %result.i.i3406, align 8
    %362 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %361, 0
    %sunkaddr30 = getelementptr i8, ptr %result.i.i3406, i64 8
    %363 = load ptr, ptr %sunkaddr30, align 8
    %364 = insertvalue { ptr, ptr, ptr, i32 } %362, ptr %363, 1
    %sunkaddr31 = getelementptr i8, ptr %result.i.i3406, i64 16
    %365 = load ptr, ptr %sunkaddr31, align 8
    %366 = insertvalue { ptr, ptr, ptr, i32 } %364, ptr %365, 2
    %sunkaddr32 = getelementptr i8, ptr %result.i.i3406, i64 24
    %367 = load i32, ptr %sunkaddr32, align 4
    %368 = insertvalue { ptr, ptr, ptr, i32 } %366, i32 %367, 3
    store ptr @_parameterization_Ptri32, ptr %1, align 8
    %369 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %1)
    %370 = call ptr @llvm.invariant.start.p0(i64 552, ptr %361)
    %371 = sext i32 %367 to i64
    %372 = getelementptr ptr, ptr %361, i64 %371
    %373 = getelementptr i8, ptr %372, i64 104
    %374 = load ptr, ptr %373, align 8
    store ptr @i32_typ, ptr %2, align 8
    %375 = call ptr %374({ ptr, ptr, ptr, i32 } %368, ptr nonnull %2)
    %376 = call { ptr, i160 } %375({ ptr, ptr, ptr, i32 } %368, { ptr, ptr, ptr, i32 } %368, ptr nonnull %1, i32 %358)
    %.fca.0.extract.i3656 = extractvalue { ptr, i160 } %376, 0
    %.fca.1.extract.i3657 = extractvalue { ptr, i160 } %376, 1
    %.sroa.3.8.insert.ext.i3672 = and i160 %.fca.1.extract.i3657, 340282366920938463463374607431768211455
    br label %ArrayIterator_next_.exit3674
  
  ArrayIterator_next_.exit3674:                     ; preds = %357, %._crit_edge2
    %.reg2mem5.sroa.0.0.i3635 = phi ptr [ %.fca.0.extract.i3656, %357 ], [ @nil_typ, %._crit_edge2 ]
    %.reg2mem5.sroa.3.0.i3636 = phi i160 [ %.sroa.3.8.insert.ext.i3672, %357 ], [ 0, %._crit_edge2 ]
    call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
    call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %1)
    call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2)
    %377 = call ptr @llvm.invariant.start.p0(i64 96, ptr nonnull @ZipIterator2)
    call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
    %378 = call ptr @llvm.invariant.start.p0(i64 88, ptr nonnull @MapIterator2)
    %379 = load ptr, ptr %result.i.i3446, align 8
    %380 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %379, 0
    %sunkaddr33 = getelementptr i8, ptr %result.i.i3446, i64 8
    %381 = load ptr, ptr %sunkaddr33, align 8
    %382 = insertvalue { ptr, ptr, ptr, i32 } %380, ptr %381, 1
    %sunkaddr34 = getelementptr i8, ptr %result.i.i3446, i64 16
    %383 = load ptr, ptr %sunkaddr34, align 8
    %384 = insertvalue { ptr, ptr, ptr, i32 } %382, ptr %383, 2
    %sunkaddr35 = getelementptr i8, ptr %result.i.i3446, i64 24
    %385 = load i32, ptr %sunkaddr35, align 4
    %386 = insertvalue { ptr, ptr, ptr, i32 } %384, i32 %385, 3
    %387 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
    %388 = call ptr @llvm.invariant.start.p0(i64 24, ptr %379)
    %389 = sext i32 %385 to i64
    %390 = getelementptr ptr, ptr %379, i64 %389
    %391 = getelementptr i8, ptr %390, i64 8
    %392 = load ptr, ptr %391, align 8
    %393 = call ptr %392({ ptr, ptr, ptr, i32 } %386, ptr nonnull %0)
    %394 = call { ptr, i160 } %393({ ptr, ptr, ptr, i32 } %386, { ptr, ptr, ptr, i32 } %386, ptr nonnull %0)
    %.fca.0.extract4.i3705 = extractvalue { ptr, i160 } %394, 0
    %395 = icmp ne ptr %.fca.0.extract4.i3705, @nil_typ
    %396 = icmp ne ptr %.fca.0.extract4.i3705, null
    %.not27.i3706 = and i1 %395, %396
    br i1 %.not27.i3706, label %397, label %MapIterator2_next_.exit3731
  
  397:                                              ; preds = %ArrayIterator_next_.exit3674
    %.fca.1.extract5.i3711 = extractvalue { ptr, i160 } %394, 1
    %hash_coef_ptr.i.i43.i3712 = getelementptr i8, ptr %.fca.0.extract4.i3705, i64 8
    %tbl_size_ptr.i.i44.i3713 = getelementptr i8, ptr %.fca.0.extract4.i3705, i64 16
    %offset_tbl_ptr.i.i45.i3714 = getelementptr i8, ptr %.fca.0.extract4.i3705, i64 40
    %hash_coef.i.i46.i3715 = load i64, ptr %hash_coef_ptr.i.i43.i3712, align 4
    %tbl_size.i.i47.i3716 = load i64, ptr %tbl_size_ptr.i.i44.i3713, align 4
    %offset_tbl.i.i48.i3717 = load ptr, ptr %offset_tbl_ptr.i.i45.i3714, align 8
    %product.i.i.i49.i3718 = mul i64 %hash_coef.i.i46.i3715, %const
    %shifted.i.i.i50.i3719 = lshr i64 %product.i.i.i49.i3718, 32
    %xored.i.i.i51.i3720 = xor i64 %shifted.i.i.i50.i3719, %product.i.i.i49.i3718
    %hash.i.i.i52.i3721 = and i64 %xored.i.i.i51.i3720, %tbl_size.i.i47.i3716
    %offset_ptr.i.i53.i3722 = getelementptr i32, ptr %offset_tbl.i.i48.i3717, i64 %hash.i.i.i52.i3721
    %offset.i.i54.i3723 = load i32, ptr %offset_ptr.i.i53.i3722, align 4
    %.sroa.575.8.insert.ext.i3724 = zext i32 %offset.i.i54.i3723 to i160
    %.sroa.575.8.insert.shift.i3725 = shl nuw i160 %.sroa.575.8.insert.ext.i3724, 128
    %398 = insertvalue { ptr, i160 } undef, ptr %.fca.0.extract4.i3705, 0
    %.sroa.3.8.insert.ext.i3726 = and i160 %.fca.1.extract5.i3711, 340282366920938463463374607431768211455
    %.sroa.3.8.insert.insert.i3727 = or disjoint i160 %.sroa.575.8.insert.shift.i3725, %.sroa.3.8.insert.ext.i3726
    %399 = insertvalue { ptr, i160 } %398, i160 %.sroa.3.8.insert.insert.i3727, 1
    %400 = call ptr @llvm.invariant.start.p0(i64 88, ptr nonnull @MapIterator2)
    %sunkaddr36 = getelementptr i8, ptr %result.i.i3446, i64 32
    %401 = load ptr, ptr %sunkaddr36, align 8
    %402 = call { ptr, i160 } %401({ ptr, i160 } %399)
    %.fca.0.extract.i3729 = extractvalue { ptr, i160 } %402, 0
    %.fca.1.extract.i3730 = extractvalue { ptr, i160 } %402, 1
    %403 = and i160 %.fca.1.extract.i3730, 340282366920938463463374607431768211455
    br label %MapIterator2_next_.exit3731
  
  MapIterator2_next_.exit3731:                      ; preds = %397, %ArrayIterator_next_.exit3674
    %.reg2mem5.sroa.0.0.i3707 = phi ptr [ %.fca.0.extract.i3729, %397 ], [ @nil_typ, %ArrayIterator_next_.exit3674 ]
    %.reg2mem5.sroa.3.0.i3708 = phi i160 [ %403, %397 ], [ 0, %ArrayIterator_next_.exit3674 ]
    call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
    %404 = icmp ne ptr %.reg2mem5.sroa.0.0.i3635, @nil_typ
    %405 = icmp ne ptr %.reg2mem5.sroa.0.0.i3635, null
    %.not42.i3320 = and i1 %404, %405
    br i1 %.not42.i3320, label %406, label %ZipIterator2_next_.exit3359.thread
  
  406:                                              ; preds = %MapIterator2_next_.exit3731
    %407 = icmp ne ptr %.reg2mem5.sroa.0.0.i3707, @nil_typ
    %408 = icmp ne ptr %.reg2mem5.sroa.0.0.i3707, null
    %.not44.not.not.i3324 = and i1 %407, %408
    br i1 %.not44.not.not.i3324, label %ZipIterator2_next_.exit3359, label %ZipIterator2_next_.exit3359.thread
  
  ZipIterator2_next_.exit3359.thread:               ; preds = %406, %MapIterator2_next_.exit3731
    call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
    call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %5)
    br label %IO_B__Self_print_xPtri8__Self_print_xPtri1__Self_print_xNil__Self_print_xCharacter__Self_print_xPtri64__Self_print_xPtri32__Self_print_xRepresentable__Self_print_xString__Self_print_xPtrf64.exit1040
  
  ZipIterator2_next_.exit3359:                      ; preds = %406
    %offset_tbl_ptr.i.i80.i3325 = getelementptr i8, ptr %.reg2mem5.sroa.0.0.i3635, i64 40
    %hash_coef_ptr.i.i78.i3326 = getelementptr i8, ptr %.reg2mem5.sroa.0.0.i3635, i64 8
    %tbl_size_ptr.i.i79.i3327 = getelementptr i8, ptr %.reg2mem5.sroa.0.0.i3635, i64 16
    %hash_coef_ptr.i.i92.i3329 = getelementptr i8, ptr %.reg2mem5.sroa.0.0.i3707, i64 8
    %tbl_size_ptr.i.i93.i3330 = getelementptr i8, ptr %.reg2mem5.sroa.0.0.i3707, i64 16
    %offset_tbl_ptr.i.i94.i3331 = getelementptr i8, ptr %.reg2mem5.sroa.0.0.i3707, i64 40
    %result.i.i3332 = call noalias dereferenceable_or_null(80) ptr @bump_malloc_inner(i64 noundef 80, ptr nonnull @current_ptr) #26
    store ptr @Pair, ptr %5, align 8
    %sunkaddr37 = getelementptr inbounds i8, ptr %5, i64 8
    store ptr %result.i.i3332, ptr %sunkaddr37, align 8
    %sunkaddr38 = getelementptr inbounds i8, ptr %5, i64 24
    store i32 7, ptr %sunkaddr38, align 8
    %409 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %5)
    %410 = getelementptr i8, ptr %result.i.i3332, i64 64
    store ptr %338, ptr %410, align 8
    %411 = getelementptr i8, ptr %result.i.i3332, i64 72
    store ptr %310, ptr %411, align 8
    %412 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %410)
    %413 = call ptr @llvm.invariant.start.p0(i64 96, ptr nonnull @ZipIterator2)
    %414 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @Pair)
    %hash_coef.i.i11.i.i3335 = load i64, ptr %hash_coef_ptr.i.i78.i3326, align 4
    %tbl_size.i.i12.i.i3336 = load i64, ptr %tbl_size_ptr.i.i79.i3327, align 4
    %offset_tbl.i.i13.i.i3337 = load ptr, ptr %offset_tbl_ptr.i.i80.i3325, align 8
    %product.i.i.i14.i.i3338 = mul i64 %hash_coef.i.i11.i.i3335, %const
    %shifted.i.i.i15.i.i3339 = lshr i64 %product.i.i.i14.i.i3338, 32
    %xored.i.i.i16.i.i3340 = xor i64 %shifted.i.i.i15.i.i3339, %product.i.i.i14.i.i3338
    %hash.i.i.i17.i.i3341 = and i64 %xored.i.i.i16.i.i3340, %tbl_size.i.i12.i.i3336
    %offset_ptr.i.i18.i.i3342 = getelementptr i32, ptr %offset_tbl.i.i13.i.i3337, i64 %hash.i.i.i17.i.i3341
    %offset.i.i19.i.i3343 = load i32, ptr %offset_ptr.i.i18.i.i3342, align 4
    %.sroa.582.8.insert.ext.i.i3344 = zext i32 %offset.i.i19.i.i3343 to i160
    %.sroa.582.8.insert.shift.i.i3345 = shl nuw i160 %.sroa.582.8.insert.ext.i.i3344, 128
    %.sroa.3.8.insert.insert74.i.i3346 = or disjoint i160 %.sroa.582.8.insert.shift.i.i3345, %.reg2mem5.sroa.3.0.i3636
    store ptr %.reg2mem5.sroa.0.0.i3635, ptr %result.i.i3332, align 8
    %415 = getelementptr i8, ptr %result.i.i3332, i64 8
    store i160 %.sroa.3.8.insert.insert74.i.i3346, ptr %415, align 4
    %hash_coef.i.i39.i.i3347 = load i64, ptr %hash_coef_ptr.i.i92.i3329, align 4
    %tbl_size.i.i40.i.i3348 = load i64, ptr %tbl_size_ptr.i.i93.i3330, align 4
    %offset_tbl.i.i41.i.i3349 = load ptr, ptr %offset_tbl_ptr.i.i94.i3331, align 8
    %product.i.i.i42.i.i3350 = mul i64 %hash_coef.i.i39.i.i3347, %const
    %shifted.i.i.i43.i.i3351 = lshr i64 %product.i.i.i42.i.i3350, 32
    %xored.i.i.i44.i.i3352 = xor i64 %shifted.i.i.i43.i.i3351, %product.i.i.i42.i.i3350
    %hash.i.i.i45.i.i3353 = and i64 %xored.i.i.i44.i.i3352, %tbl_size.i.i40.i.i3348
    %offset_ptr.i.i46.i.i3354 = getelementptr i32, ptr %offset_tbl.i.i41.i.i3349, i64 %hash.i.i.i45.i.i3353
    %offset.i.i47.i.i3355 = load i32, ptr %offset_ptr.i.i46.i.i3354, align 4
    %.sroa.568.8.insert.ext.i.i3356 = zext i32 %offset.i.i47.i.i3355 to i160
    %.sroa.568.8.insert.shift.i.i3357 = shl nuw i160 %.sroa.568.8.insert.ext.i.i3356, 128
    %416 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @Pair)
    %.sroa.3.8.insert.insert.i.i3358 = or disjoint i160 %.sroa.568.8.insert.shift.i.i3357, %.reg2mem5.sroa.3.0.i3708
    %417 = getelementptr i8, ptr %result.i.i3332, i64 32
    store ptr %.reg2mem5.sroa.0.0.i3707, ptr %417, align 8
    %418 = getelementptr i8, ptr %result.i.i3332, i64 40
    store i160 %.sroa.3.8.insert.insert.i.i3358, ptr %418, align 4
    %419 = load i160, ptr %sunkaddr37, align 8
    call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
    call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %5)
    %extract.t3367 = trunc i160 %419 to i64
    br label %._crit_edge2
  
  IO_B__Self_print_xPtri8__Self_print_xPtri1__Self_print_xNil__Self_print_xCharacter__Self_print_xPtri64__Self_print_xPtri32__Self_print_xRepresentable__Self_print_xString__Self_print_xPtrf64.exit1040: ; preds = %ZipIterator2_next_.exit3359.thread, %ZipIterator2_next_.exit.thread
    %result.i914 = call noalias dereferenceable_or_null(4) ptr @bump_malloc_inner(i64 noundef 4, ptr nonnull @current_ptr) #26
    store i32 7, ptr %result.i914, align 4
    store ptr @Int32, ptr %56, align 8
    %420 = getelementptr inbounds i8, ptr %56, i64 8
    store ptr %result.i914, ptr %420, align 8
    %421 = getelementptr inbounds i8, ptr %56, i64 24
    store i32 7, ptr %421, align 8
    %422 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %56)
    %423 = load i160, ptr %420, align 8
    call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
    call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %5)
    %.sroa.4.8.extract.trunc.i = trunc i160 %423 to i64
    %424 = inttoptr i64 %.sroa.4.8.extract.trunc.i to ptr
    %result.i.i1478 = call noalias dereferenceable_or_null(4) ptr @bump_malloc_inner(i64 noundef 4, ptr nonnull @current_ptr) #26
    %425 = getelementptr inbounds i8, ptr %5, i64 8
    %426 = getelementptr inbounds i8, ptr %5, i64 24
    store ptr @Int32, ptr %5, align 8
    store ptr %result.i.i1478, ptr %425, align 8
    store i32 7, ptr %426, align 8
    %427 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %5)
    %428 = load i32, ptr %424, align 4
    %429 = add i32 %428, 5
    store i32 %429, ptr %result.i.i1478, align 4
    %430 = load i160, ptr %425, align 8
    call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
    call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %5)
    %431 = trunc i160 %430 to i64
    %432 = inttoptr i64 %431 to ptr
    call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
    call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %5)
    %433 = call ptr @llvm.invariant.start.p0(i64 136, ptr nonnull @Int32)
    %434 = load i32, ptr %432, align 4
    %435 = sitofp i32 %434 to double
    %result.i.i1683 = call noalias dereferenceable_or_null(8) ptr @bump_malloc_inner(i64 noundef 8, ptr nonnull @current_ptr) #26
    %436 = getelementptr inbounds i8, ptr %5, i64 8
    %437 = getelementptr inbounds i8, ptr %5, i64 24
    store ptr @Float64, ptr %5, align 8
    store ptr %result.i.i1683, ptr %436, align 8
    store i32 7, ptr %437, align 8
    %438 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %5)
    %439 = fadd double %435, 5.000000e+00
    store double %439, ptr %result.i.i1683, align 8
    %440 = load i160, ptr %436, align 8
    call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
    call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %5)
    %.sroa.346.8.extract.trunc.i = trunc i160 %440 to i64
    %441 = inttoptr i64 %.sroa.346.8.extract.trunc.i to ptr
    %442 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
    %443 = load double, ptr %441, align 8
    %444 = call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @float_string, double %443)
    %445 = call ptr @llvm.invariant.start.p0(i64 48, ptr nonnull @Holder)
    call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
    call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %5)
    %446 = call ptr @llvm.invariant.start.p0(i64 136, ptr nonnull @Int32)
    %result.i.i1715 = call noalias dereferenceable_or_null(8) ptr @bump_malloc_inner(i64 noundef 8, ptr nonnull @current_ptr) #26
    %447 = getelementptr inbounds i8, ptr %5, i64 8
    %448 = getelementptr inbounds i8, ptr %5, i64 24
    store ptr @Float64, ptr %5, align 8
    store ptr %result.i.i1715, ptr %447, align 8
    store i32 7, ptr %448, align 8
    %449 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %5)
    store double 5.100000e+01, ptr %result.i.i1715, align 8
    %450 = load i160, ptr %447, align 8
    call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
    call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %5)
    %.sroa.364.8.extract.trunc.i = trunc i160 %450 to i64
    %451 = inttoptr i64 %.sroa.364.8.extract.trunc.i to ptr
    %452 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
    %453 = call ptr @llvm.invariant.start.p0(i64 144, ptr nonnull @Float64)
    %454 = load double, ptr %451, align 8
    %455 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
    %456 = call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @float_string, double %454)
    ret i32 0
  }
  
  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
  declare void @llvm.init.trampoline(ptr nocapture writeonly, ptr readnone, ptr readnone) #2
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Representable_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 64
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(readwrite, argmem: none, inaccessiblemem: none)
  define { ptr, ptr, ptr, i32 } @Representable_repr_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) #8 {
    %result.i = tail call noalias dereferenceable_or_null(7) ptr @bump_malloc_inner(i64 noundef 7, ptr nonnull @current_ptr) #26
    store i48 127970252055119, ptr %result.i, align 4
    %result.i1 = tail call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #26
    %4 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %result.i1, 1
    %5 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr undef, 2
    %6 = insertvalue { ptr, ptr, ptr, i32 } %5, i32 7, 3
    store ptr %result.i, ptr %result.i1, align 8
    %7 = getelementptr i8, ptr %result.i1, i64 8
    store i32 6, ptr %7, align 4
    %8 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
    %9 = getelementptr i8, ptr %result.i1, i64 12
    store i32 7, ptr %9, align 4
    ret { ptr, ptr, ptr, i32 } %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @String_B_init_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 192
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @String_B_init_bytesBufferPtri8_lengthPtri32_capacityPtri32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 200
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @String_B_length_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 208
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @String_B_capacity_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 216
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @String_B_bytes_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 224
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @String_B_append_xPtri8({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 232
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @String_B_extend_strString({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 240
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @String_B__index_xPtri32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 248
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @String_B__EQ_otherString({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 256
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @String_B_pop_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 264
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @String_B_copy_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 272
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @String_B_c_string_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 280
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @String_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 288
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @String_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 296
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  define void @String_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, 6499063144389013426
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %result.i = tail call noalias dereferenceable_or_null(1) ptr @bump_malloc_inner(i64 noundef 1, ptr nonnull @current_ptr) #26
    %4 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract)
    %5 = sext i32 %offset.i.i to i64
    %6 = getelementptr ptr, ptr %.fca.0.extract, i64 %5
    %7 = load ptr, ptr %6, align 8
    %8 = getelementptr i8, ptr %7, i64 8
    %9 = load ptr, ptr %8, align 8
    %10 = insertvalue { ptr } undef, ptr %result.i, 0
    tail call void %9(ptr %.fca.1.extract, { ptr } %10)
    %11 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract)
    %12 = getelementptr i8, ptr %6, i64 16
    %13 = load ptr, ptr %12, align 8
    %14 = getelementptr i8, ptr %13, i64 8
    %15 = load ptr, ptr %14, align 8
    tail call void %15(ptr %.fca.1.extract, i32 1)
    %16 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract)
    %17 = getelementptr i8, ptr %6, i64 8
    %18 = load ptr, ptr %17, align 8
    %19 = getelementptr i8, ptr %18, i64 8
    %20 = load ptr, ptr %19, align 8
    tail call void %20(ptr %.fca.1.extract, i32 0)
    ret void
  }
  
  define void @String_init_bytesBufferPtri8_lengthPtri32_capacityPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr } %3, i32 %4, i32 %5) {
    %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, 6499063144389013426
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %7 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract1)
    %8 = sext i32 %offset.i.i to i64
    %9 = getelementptr ptr, ptr %.fca.0.extract1, i64 %8
    %10 = load ptr, ptr %9, align 8
    %11 = getelementptr i8, ptr %10, i64 8
    %12 = load ptr, ptr %11, align 8
    tail call void %12(ptr %.fca.1.extract, { ptr } %3)
    %13 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract1)
    %14 = getelementptr i8, ptr %9, i64 8
    %15 = load ptr, ptr %14, align 8
    %16 = getelementptr i8, ptr %15, i64 8
    %17 = load ptr, ptr %16, align 8
    tail call void %17(ptr %.fca.1.extract, i32 %4)
    %18 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract1)
    %19 = getelementptr i8, ptr %9, i64 16
    %20 = load ptr, ptr %19, align 8
    %21 = getelementptr i8, ptr %20, i64 8
    %22 = load ptr, ptr %21, align 8
    tail call void %22(ptr %.fca.1.extract, i32 %5)
    ret void
  }
  
  define i32 @String_length_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, 6499063144389013426
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %4 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract)
    %5 = sext i32 %offset.i.i to i64
    %6 = getelementptr ptr, ptr %.fca.0.extract, i64 %5
    %7 = getelementptr i8, ptr %6, i64 8
    %8 = load ptr, ptr %7, align 8
    %9 = load ptr, ptr %8, align 8
    %10 = tail call i32 %9(ptr %.fca.1.extract)
    ret i32 %10
  }
  
  define i32 @String_capacity_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, 6499063144389013426
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %4 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract)
    %5 = sext i32 %offset.i.i to i64
    %6 = getelementptr ptr, ptr %.fca.0.extract, i64 %5
    %7 = getelementptr i8, ptr %6, i64 16
    %8 = load ptr, ptr %7, align 8
    %9 = load ptr, ptr %8, align 8
    %10 = tail call i32 %9(ptr %.fca.1.extract)
    ret i32 %10
  }
  
  define { ptr } @String_bytes_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
    %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, 6499063144389013426
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %4 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract1)
    %5 = sext i32 %offset.i.i to i64
    %6 = getelementptr ptr, ptr %.fca.0.extract1, i64 %5
    %7 = load ptr, ptr %6, align 8
    %8 = load ptr, ptr %7, align 8
    %9 = tail call { ptr } %8(ptr %.fca.1.extract)
    ret { ptr } %9
  }
  
  define { ptr, ptr, ptr, i32 } @String_append_xPtri8({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i8 %3) {
    %const = bitcast i64 6499063144389013426 to i64
    %.fca.0.extract17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract17, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract17, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract17, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, %const
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %5 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract17)
    %6 = sext i32 %offset.i.i to i64
    %7 = getelementptr ptr, ptr %.fca.0.extract17, i64 %6
    %8 = getelementptr i8, ptr %7, i64 8
    %9 = load ptr, ptr %8, align 8
    %10 = load ptr, ptr %9, align 8
    %11 = tail call i32 %10(ptr %.fca.1.extract)
    %12 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract17)
    %13 = getelementptr i8, ptr %7, i64 16
    %14 = load ptr, ptr %13, align 8
    %15 = load ptr, ptr %14, align 8
    %16 = tail call i32 %15(ptr %.fca.1.extract)
    %17 = icmp slt i32 %11, %16
    br i1 %17, label %._crit_edge.thread, label %18
  
  18:                                               ; preds = %4
    %19 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract17)
    %sunkaddr = mul i64 %6, 8
    %sunkaddr2 = getelementptr i8, ptr %.fca.0.extract17, i64 %sunkaddr
    %sunkaddr3 = getelementptr i8, ptr %sunkaddr2, i64 16
    %20 = load ptr, ptr %sunkaddr3, align 8
    %21 = load ptr, ptr %20, align 8
    %22 = tail call i32 %21(ptr %.fca.1.extract)
    %23 = shl i32 %22, 1
    %24 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract17)
    %25 = load ptr, ptr %sunkaddr3, align 8
    %26 = getelementptr i8, ptr %25, i64 8
    %27 = load ptr, ptr %26, align 8
    tail call void %27(ptr %.fca.1.extract, i32 %23)
    %28 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract17)
    %sunkaddr4 = mul i64 %6, 8
    %sunkaddr5 = getelementptr i8, ptr %.fca.0.extract17, i64 %sunkaddr4
    %29 = load ptr, ptr %sunkaddr5, align 8
    %30 = load ptr, ptr %29, align 8
    %31 = tail call { ptr } %30(ptr %.fca.1.extract)
    %.fca.0.extract12 = extractvalue { ptr } %31, 0
    %32 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract17)
    %33 = load ptr, ptr %sunkaddr3, align 8
    %34 = load ptr, ptr %33, align 8
    %35 = tail call i32 %34(ptr %.fca.1.extract)
    %36 = sext i32 %35 to i64
    %result.i = tail call noalias ptr @bump_malloc_inner(i64 noundef %36, ptr nonnull @current_ptr) #26
    %37 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract17)
    %38 = load ptr, ptr %sunkaddr5, align 8
    %39 = getelementptr i8, ptr %38, i64 8
    %40 = load ptr, ptr %39, align 8
    %41 = insertvalue { ptr } undef, ptr %result.i, 0
    tail call void %40(ptr %.fca.1.extract, { ptr } %41)
    %42 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract17)
    %sunkaddr6 = mul i64 %6, 8
    %sunkaddr7 = getelementptr i8, ptr %.fca.0.extract17, i64 %sunkaddr6
    %sunkaddr8 = getelementptr i8, ptr %sunkaddr7, i64 8
    %43 = load ptr, ptr %sunkaddr8, align 8
    %44 = load ptr, ptr %43, align 8
    %45 = tail call i32 %44(ptr %.fca.1.extract)
    %46 = icmp sgt i32 %45, 0
    br i1 %46, label %._crit_edge.lr.ph, label %._crit_edge.thread
  
  ._crit_edge.lr.ph:                                ; preds = %18
    %47 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract17)
    br label %._crit_edge
  
  ._crit_edge:                                      ; preds = %._crit_edge, %._crit_edge.lr.ph
    %lsr.iv = phi i64 [ %lsr.iv.next, %._crit_edge ], [ 0, %._crit_edge.lr.ph ]
    %scevgep1 = getelementptr i8, ptr %.fca.0.extract12, i64 %lsr.iv
    %sunkaddr9 = mul i64 %6, 8
    %sunkaddr10 = getelementptr i8, ptr %.fca.0.extract17, i64 %sunkaddr9
    %48 = load ptr, ptr %sunkaddr10, align 8
    %49 = load ptr, ptr %48, align 8
    %50 = tail call { ptr } %49(ptr %.fca.1.extract)
    %.fca.0.extract6 = extractvalue { ptr } %50, 0
    %scevgep = getelementptr i8, ptr %.fca.0.extract6, i64 %lsr.iv
    %51 = load i8, ptr %scevgep1, align 1
    store i8 %51, ptr %scevgep, align 1
    %sunkaddr11 = mul i64 %6, 8
    %sunkaddr12 = getelementptr i8, ptr %.fca.0.extract17, i64 %sunkaddr11
    %sunkaddr13 = getelementptr i8, ptr %sunkaddr12, i64 8
    %52 = load ptr, ptr %sunkaddr13, align 8
    %53 = load ptr, ptr %52, align 8
    %54 = tail call i32 %53(ptr %.fca.1.extract)
    %lsr.iv.next = add nuw nsw i64 %lsr.iv, 1
    %tmp = trunc i64 %lsr.iv.next to i32
    %55 = icmp slt i32 %tmp, %54
    br i1 %55, label %._crit_edge, label %._crit_edge.thread
  
  ._crit_edge.thread:                               ; preds = %._crit_edge, %18, %4
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
    %56 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract17)
    %sunkaddr14 = mul i64 %6, 8
    %sunkaddr15 = getelementptr i8, ptr %.fca.0.extract17, i64 %sunkaddr14
    %57 = load ptr, ptr %sunkaddr15, align 8
    %58 = load ptr, ptr %57, align 8
    %59 = tail call { ptr } %58(ptr %.fca.1.extract)
    %.fca.0.extract = extractvalue { ptr } %59, 0
    %60 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract17)
    %sunkaddr16 = mul i64 %6, 8
    %sunkaddr17 = getelementptr i8, ptr %.fca.0.extract17, i64 %sunkaddr16
    %sunkaddr18 = getelementptr i8, ptr %sunkaddr17, i64 8
    %61 = load ptr, ptr %sunkaddr18, align 8
    %62 = load ptr, ptr %61, align 8
    %63 = tail call i32 %62(ptr %.fca.1.extract)
    %64 = sext i32 %63 to i64
    %65 = getelementptr i8, ptr %.fca.0.extract, i64 %64
    store i8 %3, ptr %65, align 1
    %66 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract17)
    %67 = load ptr, ptr %sunkaddr18, align 8
    %68 = load ptr, ptr %67, align 8
    %69 = tail call i32 %68(ptr %.fca.1.extract)
    %70 = add i32 %69, 1
    %71 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract17)
    %72 = load ptr, ptr %sunkaddr18, align 8
    %73 = getelementptr i8, ptr %72, i64 8
    %74 = load ptr, ptr %73, align 8
    tail call void %74(ptr %.fca.1.extract, i32 %70)
    %sunkaddr19 = getelementptr i8, ptr %.fca.0.extract17, i64 8
    %hash_coef.i.i25 = load i64, ptr %sunkaddr19, align 4
    %sunkaddr20 = getelementptr i8, ptr %.fca.0.extract17, i64 16
    %tbl_size.i.i26 = load i64, ptr %sunkaddr20, align 4
    %sunkaddr21 = getelementptr i8, ptr %.fca.0.extract17, i64 40
    %offset_tbl.i.i27 = load ptr, ptr %sunkaddr21, align 8
    %product.i.i.i28 = mul i64 %hash_coef.i.i25, %const
    %shifted.i.i.i29 = lshr i64 %product.i.i.i28, 32
    %xored.i.i.i30 = xor i64 %shifted.i.i.i29, %product.i.i.i28
    %hash.i.i.i31 = and i64 %xored.i.i.i30, %tbl_size.i.i26
    %offset_ptr.i.i32 = getelementptr i32, ptr %offset_tbl.i.i27, i64 %hash.i.i.i31
    %offset.i.i33 = load i32, ptr %offset_ptr.i.i32, align 4
    %75 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract17, 0
    %76 = insertvalue { ptr, ptr, ptr, i32 } %75, ptr %.fca.1.extract, 1
    %77 = insertvalue { ptr, ptr, ptr, i32 } %76, ptr %.fca.2.extract, 2
    %78 = insertvalue { ptr, ptr, ptr, i32 } %77, i32 %offset.i.i33, 3
    ret { ptr, ptr, ptr, i32 } %78
  }
  
  define { ptr, ptr, ptr, i32 } @String_extend_strString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
    %const = bitcast i64 6499063144389013426 to i64
    %5 = alloca [0 x ptr], align 8
    %.fca.0.extract37 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract39 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract37, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract37, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract37, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, %const
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %.fca.0.extract32 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
    %hash_coef_ptr.i.i65 = getelementptr i8, ptr %.fca.0.extract32, i64 8
    %tbl_size_ptr.i.i66 = getelementptr i8, ptr %.fca.0.extract32, i64 16
    %offset_tbl_ptr.i.i67 = getelementptr i8, ptr %.fca.0.extract32, i64 40
    %hash_coef.i.i68 = load i64, ptr %hash_coef_ptr.i.i65, align 4
    %tbl_size.i.i69 = load i64, ptr %tbl_size_ptr.i.i66, align 4
    %offset_tbl.i.i70 = load ptr, ptr %offset_tbl_ptr.i.i67, align 8
    %product.i.i.i71 = mul i64 %hash_coef.i.i68, %const
    %shifted.i.i.i72 = lshr i64 %product.i.i.i71, 32
    %xored.i.i.i73 = xor i64 %shifted.i.i.i72, %product.i.i.i71
    %hash.i.i.i74 = and i64 %xored.i.i.i73, %tbl_size.i.i69
    %offset_ptr.i.i75 = getelementptr i32, ptr %offset_tbl.i.i70, i64 %hash.i.i.i74
    %offset.i.i76 = load i32, ptr %offset_ptr.i.i75, align 4
    %6 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract32, 0
    %7 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr %.fca.1.extract, 1
    %8 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %.fca.2.extract, 2
    %9 = insertvalue { ptr, ptr, ptr, i32 } %8, i32 %offset.i.i76, 3
    %10 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
    %11 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract32)
    %12 = sext i32 %offset.i.i76 to i64
    %13 = getelementptr ptr, ptr %.fca.0.extract32, i64 %12
    %14 = getelementptr i8, ptr %13, i64 56
    %15 = load ptr, ptr %14, align 8
    %16 = call ptr %15({ ptr, ptr, ptr, i32 } %9, ptr nonnull %5)
    %17 = call { ptr } %16({ ptr, ptr, ptr, i32 } %9, { ptr, ptr, ptr, i32 } %9, ptr nonnull %5)
    %.fca.0.extract30 = extractvalue { ptr } %17, 0
    %18 = alloca { ptr }, align 8
    store ptr %.fca.0.extract30, ptr %18, align 8
    %19 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %18)
    %20 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
    %21 = call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract32)
    %22 = getelementptr i8, ptr %13, i64 40
    %23 = load ptr, ptr %22, align 8
    %24 = call ptr %23({ ptr, ptr, ptr, i32 } %9, ptr nonnull %5)
    %25 = call i32 %24({ ptr, ptr, ptr, i32 } %9, { ptr, ptr, ptr, i32 } %9, ptr nonnull %5)
    %26 = call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract37)
    %27 = sext i32 %offset.i.i to i64
    %28 = getelementptr ptr, ptr %.fca.0.extract37, i64 %27
    %29 = getelementptr i8, ptr %28, i64 8
    %30 = load ptr, ptr %29, align 8
    %31 = load ptr, ptr %30, align 8
    %32 = call i32 %31(ptr %.fca.1.extract39)
    %33 = add i32 %32, %25
    %34 = call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract37)
    %35 = getelementptr i8, ptr %28, i64 16
    %36 = load ptr, ptr %35, align 8
    %37 = load ptr, ptr %36, align 8
    %38 = call i32 %37(ptr %.fca.1.extract39)
    %39 = icmp slt i32 %33, %38
    %40 = alloca { ptr }, align 8
    %41 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract37)
    %42 = load ptr, ptr %29, align 8
    %43 = load ptr, ptr %42, align 8
    %44 = call i32 %43(ptr %.fca.1.extract39)
    br i1 %39, label %45, label %68
  
  45:                                               ; preds = %4
    %46 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract37)
    %sunkaddr = mul i64 %27, 8
    %sunkaddr11 = getelementptr i8, ptr %.fca.0.extract37, i64 %sunkaddr
    %sunkaddr12 = getelementptr i8, ptr %sunkaddr11, i64 8
    %47 = load ptr, ptr %sunkaddr12, align 8
    %48 = load ptr, ptr %47, align 8
    %49 = call i32 %48(ptr %.fca.1.extract39)
    %50 = add i32 %49, %25
    %51 = icmp slt i32 %44, %50
    br i1 %51, label %._crit_edge.lr.ph, label %._crit_edge.thread
  
  ._crit_edge.lr.ph:                                ; preds = %45
    %52 = load ptr, ptr %18, align 8
    %53 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract37)
    %54 = zext i32 %44 to i64
    %55 = sext i32 %44 to i64
    br label %._crit_edge
  
  ._crit_edge:                                      ; preds = %._crit_edge, %._crit_edge.lr.ph
    %lsr.iv = phi i64 [ %lsr.iv.next, %._crit_edge ], [ 0, %._crit_edge.lr.ph ]
    %tmp = trunc i64 %lsr.iv to i32
    %56 = sext i32 %tmp to i64
    %57 = getelementptr i8, ptr %52, i64 %56
    %sunkaddr13 = mul i64 %27, 8
    %sunkaddr14 = getelementptr i8, ptr %.fca.0.extract37, i64 %sunkaddr13
    %58 = load ptr, ptr %sunkaddr14, align 8
    %59 = load ptr, ptr %58, align 8
    %60 = call { ptr } %59(ptr %.fca.1.extract39)
    %.fca.0.extract25 = extractvalue { ptr } %60, 0
    %scevgep = getelementptr i8, ptr %.fca.0.extract25, i64 %55
    %scevgep3 = getelementptr i8, ptr %scevgep, i64 %lsr.iv
    %61 = load i8, ptr %57, align 1
    store i8 %61, ptr %scevgep3, align 1
    %sunkaddr15 = mul i64 %27, 8
    %sunkaddr16 = getelementptr i8, ptr %.fca.0.extract37, i64 %sunkaddr15
    %sunkaddr17 = getelementptr i8, ptr %sunkaddr16, i64 8
    %62 = load ptr, ptr %sunkaddr17, align 8
    %63 = load ptr, ptr %62, align 8
    %64 = call i32 %63(ptr %.fca.1.extract39)
    %65 = add i32 %64, %25
    %lsr.iv.next = add nuw nsw i64 %lsr.iv, 1
    %66 = add i64 %54, %lsr.iv.next
    %tmp2 = trunc i64 %66 to i32
    %67 = icmp slt i32 %tmp2, %65
    br i1 %67, label %._crit_edge, label %._crit_edge.thread
  
  68:                                               ; preds = %4
    %69 = add i32 %44, %25
    %70 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract37)
    %sunkaddr18 = mul i64 %27, 8
    %sunkaddr19 = getelementptr i8, ptr %.fca.0.extract37, i64 %sunkaddr18
    %sunkaddr20 = getelementptr i8, ptr %sunkaddr19, i64 16
    %71 = load ptr, ptr %sunkaddr20, align 8
    %72 = getelementptr i8, ptr %71, i64 8
    %73 = load ptr, ptr %72, align 8
    call void %73(ptr %.fca.1.extract39, i32 %69)
    %74 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract37)
    %sunkaddr21 = mul i64 %27, 8
    %sunkaddr22 = getelementptr i8, ptr %.fca.0.extract37, i64 %sunkaddr21
    %75 = load ptr, ptr %sunkaddr22, align 8
    %76 = load ptr, ptr %75, align 8
    %77 = call { ptr } %76(ptr %.fca.1.extract39)
    %.fca.0.extract17 = extractvalue { ptr } %77, 0
    store ptr %.fca.0.extract17, ptr %40, align 8
    %78 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %40)
    %79 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract37)
    %80 = load ptr, ptr %sunkaddr20, align 8
    %81 = load ptr, ptr %80, align 8
    %82 = call i32 %81(ptr %.fca.1.extract39)
    %83 = sext i32 %82 to i64
    %result.i = call noalias ptr @bump_malloc_inner(i64 noundef %83, ptr nonnull @current_ptr) #26
    %84 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract37)
    %85 = load ptr, ptr %sunkaddr22, align 8
    %86 = getelementptr i8, ptr %85, i64 8
    %87 = load ptr, ptr %86, align 8
    %88 = insertvalue { ptr } undef, ptr %result.i, 0
    call void %87(ptr %.fca.1.extract39, { ptr } %88)
    %89 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract37)
    %sunkaddr23 = mul i64 %27, 8
    %sunkaddr24 = getelementptr i8, ptr %.fca.0.extract37, i64 %sunkaddr23
    %sunkaddr25 = getelementptr i8, ptr %sunkaddr24, i64 8
    %90 = load ptr, ptr %sunkaddr25, align 8
    %91 = load ptr, ptr %90, align 8
    %92 = call i32 %91(ptr %.fca.1.extract39)
    %93 = add i32 %92, %25
    %94 = icmp sgt i32 %93, 0
    br i1 %94, label %.lr.ph, label %._crit_edge.thread
  
  .lr.ph:                                           ; preds = %68
    %95 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract37)
    %96 = load ptr, ptr %18, align 8
    %97 = load ptr, ptr %40, align 8
    br label %98
  
  98:                                               ; preds = %._crit_edge2, %.lr.ph
    %lsr.iv4 = phi i64 [ %lsr.iv.next5, %._crit_edge2 ], [ 0, %.lr.ph ]
    %.0153 = phi i32 [ 0, %.lr.ph ], [ %.1, %._crit_edge2 ]
    %sunkaddr26 = mul i64 %27, 8
    %sunkaddr27 = getelementptr i8, ptr %.fca.0.extract37, i64 %sunkaddr26
    %sunkaddr28 = getelementptr i8, ptr %sunkaddr27, i64 8
    %99 = load ptr, ptr %sunkaddr28, align 8
    %100 = load ptr, ptr %99, align 8
    %101 = call i32 %100(ptr %.fca.1.extract39)
    %tmp7 = trunc i64 %lsr.iv4 to i32
    %102 = icmp slt i32 %tmp7, %101
    %103 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract37)
    %sunkaddr29 = mul i64 %27, 8
    %sunkaddr30 = getelementptr i8, ptr %.fca.0.extract37, i64 %sunkaddr29
    %104 = load ptr, ptr %sunkaddr30, align 8
    %105 = load ptr, ptr %104, align 8
    %106 = call { ptr } %105(ptr %.fca.1.extract39)
    %.fca.0.extract8 = extractvalue { ptr } %106, 0
    br i1 %102, label %107, label %109
  
  107:                                              ; preds = %98
    %scevgep10 = getelementptr i8, ptr %97, i64 %lsr.iv4
    %scevgep9 = getelementptr i8, ptr %.fca.0.extract8, i64 %lsr.iv4
    %108 = load i8, ptr %scevgep10, align 1
    store i8 %108, ptr %scevgep9, align 1
    br label %._crit_edge2
  
  109:                                              ; preds = %98
    %110 = sext i32 %.0153 to i64
    %111 = getelementptr i8, ptr %96, i64 %110
    %scevgep8 = getelementptr i8, ptr %.fca.0.extract8, i64 %lsr.iv4
    %112 = load i8, ptr %111, align 1
    store i8 %112, ptr %scevgep8, align 1
    %113 = add i32 %.0153, 1
    br label %._crit_edge2
  
  ._crit_edge2:                                     ; preds = %109, %107
    %.1 = phi i32 [ %.0153, %107 ], [ %113, %109 ]
    %sunkaddr31 = mul i64 %27, 8
    %sunkaddr32 = getelementptr i8, ptr %.fca.0.extract37, i64 %sunkaddr31
    %sunkaddr33 = getelementptr i8, ptr %sunkaddr32, i64 8
    %114 = load ptr, ptr %sunkaddr33, align 8
    %115 = load ptr, ptr %114, align 8
    %116 = call i32 %115(ptr %.fca.1.extract39)
    %117 = add i32 %116, %25
    %lsr.iv.next5 = add nuw nsw i64 %lsr.iv4, 1
    %tmp6 = trunc i64 %lsr.iv.next5 to i32
    %118 = icmp slt i32 %tmp6, %117
    br i1 %118, label %98, label %._crit_edge.thread
  
  ._crit_edge.thread:                               ; preds = %._crit_edge2, %._crit_edge, %68, %45
    %.fca.2.extract41 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
    %119 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract37)
    %sunkaddr34 = mul i64 %27, 8
    %sunkaddr35 = getelementptr i8, ptr %.fca.0.extract37, i64 %sunkaddr34
    %sunkaddr36 = getelementptr i8, ptr %sunkaddr35, i64 8
    %120 = load ptr, ptr %sunkaddr36, align 8
    %121 = load ptr, ptr %120, align 8
    %122 = call i32 %121(ptr %.fca.1.extract39)
    %123 = add i32 %122, %25
    %124 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract37)
    %125 = load ptr, ptr %sunkaddr36, align 8
    %126 = getelementptr i8, ptr %125, i64 8
    %127 = load ptr, ptr %126, align 8
    call void %127(ptr %.fca.1.extract39, i32 %123)
    %sunkaddr37 = getelementptr i8, ptr %.fca.0.extract37, i64 8
    %hash_coef.i.i82 = load i64, ptr %sunkaddr37, align 4
    %sunkaddr38 = getelementptr i8, ptr %.fca.0.extract37, i64 16
    %tbl_size.i.i83 = load i64, ptr %sunkaddr38, align 4
    %sunkaddr39 = getelementptr i8, ptr %.fca.0.extract37, i64 40
    %offset_tbl.i.i84 = load ptr, ptr %sunkaddr39, align 8
    %product.i.i.i85 = mul i64 %hash_coef.i.i82, %const
    %shifted.i.i.i86 = lshr i64 %product.i.i.i85, 32
    %xored.i.i.i87 = xor i64 %shifted.i.i.i86, %product.i.i.i85
    %hash.i.i.i88 = and i64 %xored.i.i.i87, %tbl_size.i.i83
    %offset_ptr.i.i89 = getelementptr i32, ptr %offset_tbl.i.i84, i64 %hash.i.i.i88
    %offset.i.i90 = load i32, ptr %offset_ptr.i.i89, align 4
    %128 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract37, 0
    %129 = insertvalue { ptr, ptr, ptr, i32 } %128, ptr %.fca.1.extract39, 1
    %130 = insertvalue { ptr, ptr, ptr, i32 } %129, ptr %.fca.2.extract41, 2
    %131 = insertvalue { ptr, ptr, ptr, i32 } %130, i32 %offset.i.i90, 3
    ret { ptr, ptr, ptr, i32 } %131
  }
  
  define i8 @String__index_xPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
    %.fca.0.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract10, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract10, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract10, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, 6499063144389013426
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %5 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract10)
    %6 = sext i32 %offset.i.i to i64
    %7 = getelementptr ptr, ptr %.fca.0.extract10, i64 %6
    %8 = getelementptr i8, ptr %7, i64 8
    %9 = load ptr, ptr %8, align 8
    %10 = load ptr, ptr %9, align 8
    %11 = tail call i32 %10(ptr %.fca.1.extract)
    %12 = add i32 %11, -1
    %13 = icmp sgt i32 %3, %12
    br i1 %13, label %14, label %._crit_edge
  
  14:                                               ; preds = %4
    %current_coroutine.i = load ptr, ptr @current_coroutine, align 8
    %into_callee_buf.i = getelementptr i8, ptr %current_coroutine.i, i64 8
    tail call preserve_nonecc void @context_switch(ptr nocapture writeonly %into_callee_buf.i, ptr nonnull @into_caller_buf) #27
    br label %._crit_edge
  
  ._crit_edge:                                      ; preds = %14, %4
    %15 = icmp sgt i32 %3, -1
    %16 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract10)
    br i1 %15, label %17, label %23
  
  17:                                               ; preds = %._crit_edge
    %sunkaddr = mul i64 %6, 8
    %sunkaddr1 = getelementptr i8, ptr %.fca.0.extract10, i64 %sunkaddr
    %18 = load ptr, ptr %sunkaddr1, align 8
    %19 = load ptr, ptr %18, align 8
    %20 = tail call { ptr } %19(ptr %.fca.1.extract)
    %.fca.0.extract6 = extractvalue { ptr } %20, 0
    %21 = zext nneg i32 %3 to i64
    %22 = getelementptr i8, ptr %.fca.0.extract6, i64 %21
    br label %41
  
  23:                                               ; preds = %._crit_edge
    %sunkaddr2 = mul i64 %6, 8
    %sunkaddr3 = getelementptr i8, ptr %.fca.0.extract10, i64 %sunkaddr2
    %sunkaddr4 = getelementptr i8, ptr %sunkaddr3, i64 8
    %24 = load ptr, ptr %sunkaddr4, align 8
    %25 = load ptr, ptr %24, align 8
    %26 = tail call i32 %25(ptr %.fca.1.extract)
    %27 = add i32 %26, %3
    %28 = icmp slt i32 %27, 0
    br i1 %28, label %29, label %._crit_edge1
  
  29:                                               ; preds = %23
    %current_coroutine.i11 = load ptr, ptr @current_coroutine, align 8
    %into_callee_buf.i12 = getelementptr i8, ptr %current_coroutine.i11, i64 8
    tail call preserve_nonecc void @context_switch(ptr nocapture writeonly %into_callee_buf.i12, ptr nonnull @into_caller_buf) #27
    br label %._crit_edge1
  
  ._crit_edge1:                                     ; preds = %29, %23
    %30 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract10)
    %sunkaddr5 = mul i64 %6, 8
    %sunkaddr6 = getelementptr i8, ptr %.fca.0.extract10, i64 %sunkaddr5
    %31 = load ptr, ptr %sunkaddr6, align 8
    %32 = load ptr, ptr %31, align 8
    %33 = tail call { ptr } %32(ptr %.fca.1.extract)
    %.fca.0.extract = extractvalue { ptr } %33, 0
    %34 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract10)
    %sunkaddr7 = mul i64 %6, 8
    %sunkaddr8 = getelementptr i8, ptr %.fca.0.extract10, i64 %sunkaddr7
    %sunkaddr9 = getelementptr i8, ptr %sunkaddr8, i64 8
    %35 = load ptr, ptr %sunkaddr9, align 8
    %36 = load ptr, ptr %35, align 8
    %37 = tail call i32 %36(ptr %.fca.1.extract)
    %38 = add i32 %37, %3
    %39 = sext i32 %38 to i64
    %40 = getelementptr i8, ptr %.fca.0.extract, i64 %39
    br label %41
  
  41:                                               ; preds = %._crit_edge1, %17
    %.reg2mem6.0.in = phi ptr [ %22, %17 ], [ %40, %._crit_edge1 ]
    %.reg2mem6.0 = load i8, ptr %.reg2mem6.0.in, align 1
    ret i8 %.reg2mem6.0
  }
  
  define noundef i1 @String__EQ_otherString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
    %const = bitcast i64 6499063144389013426 to i64
    %5 = alloca [0 x ptr], align 8
    %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract9, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, %const
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %.fca.0.extract8 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
    %hash_coef_ptr.i.i22 = getelementptr i8, ptr %.fca.0.extract8, i64 8
    %tbl_size_ptr.i.i23 = getelementptr i8, ptr %.fca.0.extract8, i64 16
    %offset_tbl_ptr.i.i24 = getelementptr i8, ptr %.fca.0.extract8, i64 40
    %hash_coef.i.i25 = load i64, ptr %hash_coef_ptr.i.i22, align 4
    %tbl_size.i.i26 = load i64, ptr %tbl_size_ptr.i.i23, align 4
    %offset_tbl.i.i27 = load ptr, ptr %offset_tbl_ptr.i.i24, align 8
    %product.i.i.i28 = mul i64 %hash_coef.i.i25, %const
    %shifted.i.i.i29 = lshr i64 %product.i.i.i28, 32
    %xored.i.i.i30 = xor i64 %shifted.i.i.i29, %product.i.i.i28
    %hash.i.i.i31 = and i64 %xored.i.i.i30, %tbl_size.i.i26
    %offset_ptr.i.i32 = getelementptr i32, ptr %offset_tbl.i.i27, i64 %hash.i.i.i31
    %offset.i.i33 = load i32, ptr %offset_ptr.i.i32, align 4
    %6 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract9)
    %7 = sext i32 %offset.i.i to i64
    %8 = getelementptr ptr, ptr %.fca.0.extract9, i64 %7
    %9 = getelementptr i8, ptr %8, i64 8
    %10 = load ptr, ptr %9, align 8
    %11 = load ptr, ptr %10, align 8
    %12 = tail call i32 %11(ptr %.fca.1.extract11)
    %13 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract8, 0
    %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.1.extract, 1
    %15 = insertvalue { ptr, ptr, ptr, i32 } %14, ptr %.fca.2.extract, 2
    %16 = insertvalue { ptr, ptr, ptr, i32 } %15, i32 %offset.i.i33, 3
    %17 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
    %18 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract8)
    %19 = sext i32 %offset.i.i33 to i64
    %20 = getelementptr ptr, ptr %.fca.0.extract8, i64 %19
    %21 = getelementptr i8, ptr %20, i64 40
    %22 = load ptr, ptr %21, align 8
    %23 = call ptr %22({ ptr, ptr, ptr, i32 } %16, ptr nonnull %5)
    %24 = call i32 %23({ ptr, ptr, ptr, i32 } %16, { ptr, ptr, ptr, i32 } %16, ptr nonnull %5)
    %.not = icmp eq i32 %12, %24
    br i1 %.not, label %.preheader, label %.thread
  
  .preheader:                                       ; preds = %4
    %25 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract9)
    br label %26
  
  26:                                               ; preds = %30, %.preheader
    %lsr.iv = phi i64 [ %lsr.iv.next, %30 ], [ 0, %.preheader ]
    %sunkaddr = mul i64 %7, 8
    %sunkaddr2 = getelementptr i8, ptr %.fca.0.extract9, i64 %sunkaddr
    %sunkaddr3 = getelementptr i8, ptr %sunkaddr2, i64 8
    %27 = load ptr, ptr %sunkaddr3, align 8
    %28 = load ptr, ptr %27, align 8
    %29 = call i32 %28(ptr %.fca.1.extract11)
    %tmp = trunc i64 %lsr.iv to i32
    %.not49.not.not = icmp sge i32 %tmp, %29
    br i1 %.not49.not.not, label %.thread, label %30
  
  30:                                               ; preds = %26
    %31 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract9)
    %sunkaddr4 = mul i64 %7, 8
    %sunkaddr5 = getelementptr i8, ptr %.fca.0.extract9, i64 %sunkaddr4
    %32 = load ptr, ptr %sunkaddr5, align 8
    %33 = load ptr, ptr %32, align 8
    %34 = call { ptr } %33(ptr %.fca.1.extract11)
    %.fca.0.extract4 = extractvalue { ptr } %34, 0
    %scevgep1 = getelementptr i8, ptr %.fca.0.extract4, i64 %lsr.iv
    %35 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
    %36 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract8)
    %sunkaddr6 = mul i64 %19, 8
    %sunkaddr7 = getelementptr i8, ptr %.fca.0.extract8, i64 %sunkaddr6
    %sunkaddr8 = getelementptr i8, ptr %sunkaddr7, i64 56
    %37 = load ptr, ptr %sunkaddr8, align 8
    %38 = call ptr %37({ ptr, ptr, ptr, i32 } %16, ptr nonnull %5)
    %39 = call { ptr } %38({ ptr, ptr, ptr, i32 } %16, { ptr, ptr, ptr, i32 } %16, ptr nonnull %5)
    %.fca.0.extract = extractvalue { ptr } %39, 0
    %scevgep = getelementptr i8, ptr %.fca.0.extract, i64 %lsr.iv
    %40 = load i8, ptr %scevgep1, align 1
    %41 = load i8, ptr %scevgep, align 1
    %.not20 = icmp eq i8 %40, %41
    %lsr.iv.next = add nuw nsw i64 %lsr.iv, 1
    br i1 %.not20, label %26, label %.thread
  
  .thread:                                          ; preds = %30, %26, %4
    %.reg2mem19.0 = phi i1 [ false, %4 ], [ %.not49.not.not, %26 ], [ %.not49.not.not, %30 ]
    ret i1 %.reg2mem19.0
  }
  
  define { ptr, i8 } @String_pop_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
    %.fca.0.extract13 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract14 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract13, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract13, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract13, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, 6499063144389013426
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %4 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract13)
    %5 = sext i32 %offset.i.i to i64
    %6 = getelementptr ptr, ptr %.fca.0.extract13, i64 %5
    %7 = getelementptr i8, ptr %6, i64 8
    %8 = load ptr, ptr %7, align 8
    %9 = load ptr, ptr %8, align 8
    %10 = tail call i32 %9(ptr %.fca.1.extract14)
    %11 = icmp eq i32 %10, 0
    br i1 %11, label %33, label %12
  
  12:                                               ; preds = %3
    %13 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract13)
    %sunkaddr = mul i64 %5, 8
    %sunkaddr1 = getelementptr i8, ptr %.fca.0.extract13, i64 %sunkaddr
    %sunkaddr2 = getelementptr i8, ptr %sunkaddr1, i64 8
    %14 = load ptr, ptr %sunkaddr2, align 8
    %15 = load ptr, ptr %14, align 8
    %16 = tail call i32 %15(ptr %.fca.1.extract14)
    %17 = add i32 %16, -1
    %18 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract13)
    %19 = load ptr, ptr %sunkaddr2, align 8
    %20 = getelementptr i8, ptr %19, i64 8
    %21 = load ptr, ptr %20, align 8
    tail call void %21(ptr %.fca.1.extract14, i32 %17)
    %22 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract13)
    %sunkaddr3 = mul i64 %5, 8
    %sunkaddr4 = getelementptr i8, ptr %.fca.0.extract13, i64 %sunkaddr3
    %23 = load ptr, ptr %sunkaddr4, align 8
    %24 = load ptr, ptr %23, align 8
    %25 = tail call { ptr } %24(ptr %.fca.1.extract14)
    %.fca.0.extract = extractvalue { ptr } %25, 0
    %26 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract13)
    %27 = load ptr, ptr %sunkaddr2, align 8
    %28 = load ptr, ptr %27, align 8
    %29 = tail call i32 %28(ptr %.fca.1.extract14)
    %30 = sext i32 %29 to i64
    %31 = getelementptr i8, ptr %.fca.0.extract, i64 %30
    %32 = load i8, ptr %31, align 1
    br label %33
  
  33:                                               ; preds = %12, %3
    %.reg2mem5.sroa.0.0 = phi ptr [ @i8_typ, %12 ], [ @nil_typ, %3 ]
    %.reg2mem5.sroa.3.0 = phi i8 [ %32, %12 ], [ undef, %3 ]
    %.reload6.fca.0.insert = insertvalue { ptr, i8 } poison, ptr %.reg2mem5.sroa.0.0, 0
    %.reload6.fca.1.insert = insertvalue { ptr, i8 } %.reload6.fca.0.insert, i8 %.reg2mem5.sroa.3.0, 1
    ret { ptr, i8 } %.reload6.fca.1.insert
  }
  
  define { ptr, ptr, ptr, i32 } @String_copy_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
    %.fca.0.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract10, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract10, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract10, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, 6499063144389013426
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %4 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract10)
    %5 = sext i32 %offset.i.i to i64
    %6 = getelementptr ptr, ptr %.fca.0.extract10, i64 %5
    %7 = getelementptr i8, ptr %6, i64 8
    %8 = load ptr, ptr %7, align 8
    %9 = load ptr, ptr %8, align 8
    %10 = tail call i32 %9(ptr %.fca.1.extract)
    %11 = sext i32 %10 to i64
    %result.i = tail call noalias ptr @bump_malloc_inner(i64 noundef %11, ptr nonnull @current_ptr) #26
    %12 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract10)
    %13 = load ptr, ptr %7, align 8
    %14 = load ptr, ptr %13, align 8
    %15 = tail call i32 %14(ptr %.fca.1.extract)
    %16 = icmp sgt i32 %15, 0
    br i1 %16, label %.lr.ph, label %._crit_edge._crit_edge
  
  .lr.ph:                                           ; preds = %3
    %17 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract10)
    br label %._crit_edge
  
  ._crit_edge:                                      ; preds = %._crit_edge, %.lr.ph
    %lsr.iv = phi i64 [ %lsr.iv.next, %._crit_edge ], [ 0, %.lr.ph ]
    %sunkaddr = mul i64 %5, 8
    %sunkaddr2 = getelementptr i8, ptr %.fca.0.extract10, i64 %sunkaddr
    %18 = load ptr, ptr %sunkaddr2, align 8
    %19 = load ptr, ptr %18, align 8
    %20 = tail call { ptr } %19(ptr %.fca.1.extract)
    %.fca.0.extract = extractvalue { ptr } %20, 0
    %scevgep1 = getelementptr i8, ptr %.fca.0.extract, i64 %lsr.iv
    %scevgep = getelementptr i8, ptr %result.i, i64 %lsr.iv
    %21 = load i8, ptr %scevgep1, align 1
    store i8 %21, ptr %scevgep, align 1
    %sunkaddr3 = mul i64 %5, 8
    %sunkaddr4 = getelementptr i8, ptr %.fca.0.extract10, i64 %sunkaddr3
    %sunkaddr5 = getelementptr i8, ptr %sunkaddr4, i64 8
    %22 = load ptr, ptr %sunkaddr5, align 8
    %23 = load ptr, ptr %22, align 8
    %24 = tail call i32 %23(ptr %.fca.1.extract)
    %lsr.iv.next = add nuw nsw i64 %lsr.iv, 1
    %tmp = trunc i64 %lsr.iv.next to i32
    %25 = icmp slt i32 %tmp, %24
    br i1 %25, label %._crit_edge, label %._crit_edge._crit_edge
  
  ._crit_edge._crit_edge:                           ; preds = %._crit_edge, %3
    %26 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract10)
    %sunkaddr6 = mul i64 %5, 8
    %sunkaddr7 = getelementptr i8, ptr %.fca.0.extract10, i64 %sunkaddr6
    %sunkaddr8 = getelementptr i8, ptr %sunkaddr7, i64 8
    %27 = load ptr, ptr %sunkaddr8, align 8
    %28 = load ptr, ptr %27, align 8
    %29 = tail call i32 %28(ptr %.fca.1.extract)
    %30 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract10)
    %31 = load ptr, ptr %sunkaddr8, align 8
    %32 = load ptr, ptr %31, align 8
    %33 = tail call i32 %32(ptr %.fca.1.extract)
    %result.i11 = tail call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #26
    %34 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract10)
    %35 = load ptr, ptr %sunkaddr8, align 8
    %36 = load ptr, ptr %35, align 8
    %37 = tail call i32 %36(ptr %.fca.1.extract)
    %38 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract10)
    %39 = load ptr, ptr %sunkaddr8, align 8
    %40 = load ptr, ptr %39, align 8
    %41 = tail call i32 %40(ptr %.fca.1.extract)
    %42 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %result.i11, 1
    %43 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr undef, 2
    %44 = insertvalue { ptr, ptr, ptr, i32 } %43, i32 7, 3
    store ptr %result.i, ptr %result.i11, align 8
    %45 = getelementptr i8, ptr %result.i11, i64 8
    store i32 %37, ptr %45, align 4
    %46 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
    %47 = getelementptr i8, ptr %result.i11, i64 12
    store i32 %41, ptr %47, align 4
    ret { ptr, ptr, ptr, i32 } %44
  }
  
  define { ptr } @String_c_string_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
    %.fca.0.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract10, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract10, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract10, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, 6499063144389013426
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %4 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract10)
    %5 = sext i32 %offset.i.i to i64
    %6 = getelementptr ptr, ptr %.fca.0.extract10, i64 %5
    %7 = getelementptr i8, ptr %6, i64 8
    %8 = load ptr, ptr %7, align 8
    %9 = load ptr, ptr %8, align 8
    %10 = tail call i32 %9(ptr %.fca.1.extract)
    %11 = add i32 %10, 1
    %12 = sext i32 %11 to i64
    %result.i = tail call noalias ptr @bump_malloc_inner(i64 noundef %12, ptr nonnull @current_ptr) #26
    %13 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract10)
    %14 = load ptr, ptr %7, align 8
    %15 = load ptr, ptr %14, align 8
    %16 = tail call i32 %15(ptr %.fca.1.extract)
    %17 = icmp sgt i32 %16, 0
    br i1 %17, label %.lr.ph, label %._crit_edge._crit_edge
  
  .lr.ph:                                           ; preds = %3
    %18 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract10)
    br label %._crit_edge
  
  ._crit_edge:                                      ; preds = %._crit_edge, %.lr.ph
    %lsr.iv = phi i64 [ %lsr.iv.next, %._crit_edge ], [ 0, %.lr.ph ]
    %sunkaddr = mul i64 %5, 8
    %sunkaddr2 = getelementptr i8, ptr %.fca.0.extract10, i64 %sunkaddr
    %19 = load ptr, ptr %sunkaddr2, align 8
    %20 = load ptr, ptr %19, align 8
    %21 = tail call { ptr } %20(ptr %.fca.1.extract)
    %.fca.0.extract = extractvalue { ptr } %21, 0
    %scevgep1 = getelementptr i8, ptr %.fca.0.extract, i64 %lsr.iv
    %scevgep = getelementptr i8, ptr %result.i, i64 %lsr.iv
    %22 = load i8, ptr %scevgep1, align 1
    store i8 %22, ptr %scevgep, align 1
    %sunkaddr3 = mul i64 %5, 8
    %sunkaddr4 = getelementptr i8, ptr %.fca.0.extract10, i64 %sunkaddr3
    %sunkaddr5 = getelementptr i8, ptr %sunkaddr4, i64 8
    %23 = load ptr, ptr %sunkaddr5, align 8
    %24 = load ptr, ptr %23, align 8
    %25 = tail call i32 %24(ptr %.fca.1.extract)
    %lsr.iv.next = add nuw nsw i64 %lsr.iv, 1
    %tmp = trunc i64 %lsr.iv.next to i32
    %26 = icmp slt i32 %tmp, %25
    br i1 %26, label %._crit_edge, label %._crit_edge._crit_edge
  
  ._crit_edge._crit_edge:                           ; preds = %._crit_edge, %3
    %27 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull %.fca.0.extract10)
    %sunkaddr6 = mul i64 %5, 8
    %sunkaddr7 = getelementptr i8, ptr %.fca.0.extract10, i64 %sunkaddr6
    %sunkaddr8 = getelementptr i8, ptr %sunkaddr7, i64 8
    %28 = load ptr, ptr %sunkaddr8, align 8
    %29 = load ptr, ptr %28, align 8
    %30 = tail call i32 %29(ptr %.fca.1.extract)
    %31 = sext i32 %30 to i64
    %32 = getelementptr i8, ptr %result.i, i64 %31
    store i8 0, ptr %32, align 1
    %33 = insertvalue { ptr } undef, ptr %result.i, 0
    ret { ptr } %33
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(readwrite, argmem: read, inaccessiblemem: none)
  define { ptr, ptr, ptr, i32 } @String_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) #5 {
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
    %result.i = tail call noalias dereferenceable_or_null(40) ptr @bump_malloc_inner(i64 noundef 40, ptr nonnull @current_ptr) #26
    %4 = insertvalue { ptr, ptr, ptr, i32 } { ptr @StringIterator, ptr undef, ptr undef, i32 undef }, ptr %result.i, 1
    %5 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr undef, 2
    %6 = tail call ptr @llvm.invariant.start.p0(i64 48, ptr nonnull @StringIterator)
    %hash_coef.i.i44 = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i45 = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i46 = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i47 = mul i64 %hash_coef.i.i44, 6499063144389013426
    %shifted.i.i.i48 = lshr i64 %product.i.i.i47, 32
    %xored.i.i.i49 = xor i64 %shifted.i.i.i48, %product.i.i.i47
    %hash.i.i.i50 = and i64 %xored.i.i.i49, %tbl_size.i.i45
    %offset_ptr.i.i51 = getelementptr i32, ptr %offset_tbl.i.i46, i64 %hash.i.i.i50
    %offset.i.i = load i32, ptr %offset_ptr.i.i51, align 4
    store ptr %.fca.0.extract, ptr %result.i, align 8
    %7 = getelementptr i8, ptr %result.i, i64 8
    store ptr %.fca.1.extract, ptr %7, align 8
    %8 = getelementptr i8, ptr %result.i, i64 16
    store ptr %.fca.2.extract, ptr %8, align 8
    %9 = getelementptr i8, ptr %result.i, i64 24
    store i32 %offset.i.i, ptr %9, align 4
    %10 = tail call ptr @llvm.invariant.start.p0(i64 48, ptr nonnull @StringIterator)
    %11 = getelementptr i8, ptr %result.i, i64 32
    store i32 0, ptr %11, align 4
    %12 = insertvalue { ptr, ptr, ptr, i32 } %5, i32 13, 3
    ret { ptr, ptr, ptr, i32 } %12
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, inaccessiblemem: none)
  define { ptr, ptr, ptr, i32 } @String_repr_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) #9 {
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, 6499063144389013426
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i13 = load i32, ptr %offset_ptr.i.i, align 4
    %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
    %5 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %.fca.1.extract, 1
    %6 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %.fca.2.extract, 2
    %7 = insertvalue { ptr, ptr, ptr, i32 } %6, i32 %offset.i.i13, 3
    ret { ptr, ptr, ptr, i32 } %7
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @StringIterator_B_init_strString({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 88
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @StringIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 96
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  define void @StringIterator_init_strString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
    %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, -7260570988945952630
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
    %hash_coef_ptr.i.i10 = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i11 = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i12 = getelementptr i8, ptr %.fca.0.extract, i64 40
    %hash_coef.i.i13 = load i64, ptr %hash_coef_ptr.i.i10, align 4
    %tbl_size.i.i14 = load i64, ptr %tbl_size_ptr.i.i11, align 4
    %offset_tbl.i.i15 = load ptr, ptr %offset_tbl_ptr.i.i12, align 8
    %product.i.i.i16 = mul i64 %hash_coef.i.i13, 6499063144389013426
    %shifted.i.i.i17 = lshr i64 %product.i.i.i16, 32
    %xored.i.i.i18 = xor i64 %shifted.i.i.i17, %product.i.i.i16
    %hash.i.i.i19 = and i64 %xored.i.i.i18, %tbl_size.i.i14
    %offset_ptr.i.i20 = getelementptr i32, ptr %offset_tbl.i.i15, i64 %hash.i.i.i19
    %offset.i.i35 = load i32, ptr %offset_ptr.i.i20, align 4
    %5 = tail call ptr @llvm.invariant.start.p0(i64 48, ptr %.fca.0.extract1)
    %6 = sext i32 %offset.i.i to i64
    %7 = getelementptr ptr, ptr %.fca.0.extract1, i64 %6
    %8 = load ptr, ptr %7, align 8
    %9 = getelementptr i8, ptr %8, i64 8
    %10 = load ptr, ptr %9, align 8
    %11 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
    %12 = insertvalue { ptr, ptr, ptr, i32 } %11, ptr %.fca.1.extract, 1
    %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.2.extract, 2
    %14 = insertvalue { ptr, ptr, ptr, i32 } %13, i32 %offset.i.i35, 3
    tail call void %10(ptr %.fca.1.extract3, { ptr, ptr, ptr, i32 } %14)
    %15 = tail call ptr @llvm.invariant.start.p0(i64 48, ptr %.fca.0.extract1)
    %16 = getelementptr i8, ptr %7, i64 8
    %17 = load ptr, ptr %16, align 8
    %18 = getelementptr i8, ptr %17, i64 8
    %19 = load ptr, ptr %18, align 8
    tail call void %19(ptr %.fca.1.extract3, i32 0)
    ret void
  }
  
  define { ptr, i160 } @StringIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
    %4 = alloca [0 x ptr], align 8
    %.fca.0.extract38 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract40 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract38, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract38, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract38, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, -7260570988945952630
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %5 = tail call ptr @llvm.invariant.start.p0(i64 48, ptr %.fca.0.extract38)
    %6 = sext i32 %offset.i.i to i64
    %7 = getelementptr ptr, ptr %.fca.0.extract38, i64 %6
    %8 = getelementptr i8, ptr %7, i64 8
    %9 = load ptr, ptr %8, align 8
    %10 = load ptr, ptr %9, align 8
    %11 = tail call i32 %10(ptr %.fca.1.extract40)
    %12 = tail call ptr @llvm.invariant.start.p0(i64 48, ptr %.fca.0.extract38)
    %13 = load ptr, ptr %7, align 8
    %14 = load ptr, ptr %13, align 8
    %15 = tail call { ptr, ptr, ptr, i32 } %14(ptr %.fca.1.extract40)
    %.fca.0.extract22 = extractvalue { ptr, ptr, ptr, i32 } %15, 0
    %.fca.1.extract24 = extractvalue { ptr, ptr, ptr, i32 } %15, 1
    %.fca.2.extract26 = extractvalue { ptr, ptr, ptr, i32 } %15, 2
    %.fca.3.extract28 = extractvalue { ptr, ptr, ptr, i32 } %15, 3
    %16 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract22, 0
    %17 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %.fca.1.extract24, 1
    %18 = insertvalue { ptr, ptr, ptr, i32 } %17, ptr %.fca.2.extract26, 2
    %19 = insertvalue { ptr, ptr, ptr, i32 } %18, i32 %.fca.3.extract28, 3
    %20 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
    %21 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract22)
    %22 = sext i32 %.fca.3.extract28 to i64
    %23 = getelementptr ptr, ptr %.fca.0.extract22, i64 %22
    %24 = getelementptr i8, ptr %23, i64 40
    %25 = load ptr, ptr %24, align 8
    %26 = call ptr %25({ ptr, ptr, ptr, i32 } %19, ptr nonnull %4)
    %27 = call i32 %26({ ptr, ptr, ptr, i32 } %19, { ptr, ptr, ptr, i32 } %19, ptr nonnull %4)
    %28 = icmp slt i32 %11, %27
    %29 = alloca { ptr, ptr, ptr, i32 }, align 8
    %30 = alloca [1 x ptr], align 8
    %31 = alloca { ptr }, align 8
    br i1 %28, label %32, label %106
  
  32:                                               ; preds = %3
    %33 = call ptr @llvm.invariant.start.p0(i64 48, ptr nonnull %.fca.0.extract38)
    %sunkaddr = mul i64 %6, 8
    %sunkaddr1 = getelementptr i8, ptr %.fca.0.extract38, i64 %sunkaddr
    %sunkaddr2 = getelementptr i8, ptr %sunkaddr1, i64 8
    %34 = load ptr, ptr %sunkaddr2, align 8
    %35 = load ptr, ptr %34, align 8
    %36 = call i32 %35(ptr %.fca.1.extract40)
    %37 = add i32 %36, 1
    %38 = call ptr @llvm.invariant.start.p0(i64 48, ptr nonnull %.fca.0.extract38)
    %39 = load ptr, ptr %sunkaddr2, align 8
    %40 = getelementptr i8, ptr %39, i64 8
    %41 = load ptr, ptr %40, align 8
    call void %41(ptr %.fca.1.extract40, i32 %37)
    %42 = call ptr @llvm.invariant.start.p0(i64 48, ptr nonnull %.fca.0.extract38)
    %sunkaddr3 = mul i64 %6, 8
    %sunkaddr4 = getelementptr i8, ptr %.fca.0.extract38, i64 %sunkaddr3
    %43 = load ptr, ptr %sunkaddr4, align 8
    %44 = load ptr, ptr %43, align 8
    %45 = call { ptr, ptr, ptr, i32 } %44(ptr %.fca.1.extract40)
    %.fca.0.extract11 = extractvalue { ptr, ptr, ptr, i32 } %45, 0
    %.fca.1.extract13 = extractvalue { ptr, ptr, ptr, i32 } %45, 1
    %.fca.2.extract15 = extractvalue { ptr, ptr, ptr, i32 } %45, 2
    %.fca.3.extract17 = extractvalue { ptr, ptr, ptr, i32 } %45, 3
    %46 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract11, 0
    %47 = insertvalue { ptr, ptr, ptr, i32 } %46, ptr %.fca.1.extract13, 1
    %48 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %.fca.2.extract15, 2
    %49 = insertvalue { ptr, ptr, ptr, i32 } %48, i32 %.fca.3.extract17, 3
    %50 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
    %51 = call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract11)
    %52 = sext i32 %.fca.3.extract17 to i64
    %53 = getelementptr ptr, ptr %.fca.0.extract11, i64 %52
    %54 = getelementptr i8, ptr %53, i64 56
    %55 = load ptr, ptr %54, align 8
    %56 = call ptr %55({ ptr, ptr, ptr, i32 } %49, ptr nonnull %4)
    %57 = call { ptr } %56({ ptr, ptr, ptr, i32 } %49, { ptr, ptr, ptr, i32 } %49, ptr nonnull %4)
    %58 = call ptr @llvm.invariant.start.p0(i64 48, ptr nonnull %.fca.0.extract38)
    %59 = load ptr, ptr %sunkaddr2, align 8
    %60 = load ptr, ptr %59, align 8
    %61 = call i32 %60(ptr %.fca.1.extract40)
    %result.i = call noalias dereferenceable_or_null(1) ptr @bump_malloc_inner(i64 noundef 1, ptr nonnull @current_ptr) #26
    %62 = getelementptr inbounds i8, ptr %29, i64 8
    %63 = getelementptr inbounds i8, ptr %29, i64 24
    store ptr @Character, ptr %29, align 8
    store ptr %result.i, ptr %62, align 8
    store i32 7, ptr %63, align 8
    %64 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %29)
    %65 = call ptr @llvm.invariant.start.p0(i64 48, ptr nonnull %.fca.0.extract38)
    %66 = load ptr, ptr %sunkaddr4, align 8
    %67 = load ptr, ptr %66, align 8
    %68 = call { ptr, ptr, ptr, i32 } %67(ptr %.fca.1.extract40)
    %.fca.0.extract6 = extractvalue { ptr, ptr, ptr, i32 } %68, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %68, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %68, 2
    %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %68, 3
    %69 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract6, 0
    %70 = insertvalue { ptr, ptr, ptr, i32 } %69, ptr %.fca.1.extract, 1
    %71 = insertvalue { ptr, ptr, ptr, i32 } %70, ptr %.fca.2.extract, 2
    %72 = insertvalue { ptr, ptr, ptr, i32 } %71, i32 %.fca.3.extract, 3
    %73 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
    %74 = call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract6)
    %75 = sext i32 %.fca.3.extract to i64
    %76 = getelementptr ptr, ptr %.fca.0.extract6, i64 %75
    %77 = getelementptr i8, ptr %76, i64 56
    %78 = load ptr, ptr %77, align 8
    %79 = call ptr %78({ ptr, ptr, ptr, i32 } %72, ptr nonnull %4)
    %80 = call { ptr } %79({ ptr, ptr, ptr, i32 } %72, { ptr, ptr, ptr, i32 } %72, ptr nonnull %4)
    %.fca.0.extract = extractvalue { ptr } %80, 0
    %81 = call ptr @llvm.invariant.start.p0(i64 48, ptr nonnull %.fca.0.extract38)
    %82 = load ptr, ptr %sunkaddr2, align 8
    %83 = load ptr, ptr %82, align 8
    %84 = call i32 %83(ptr %.fca.1.extract40)
    %85 = add i32 %84, -1
    %86 = sext i32 %85 to i64
    %87 = getelementptr i8, ptr %.fca.0.extract, i64 %86
    %88 = load i8, ptr %87, align 1
    %89 = load ptr, ptr %29, align 8
    %90 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %89, 0
    %91 = load ptr, ptr %62, align 8
    %92 = insertvalue { ptr, ptr, ptr, i32 } %90, ptr %91, 1
    %93 = getelementptr inbounds i8, ptr %29, i64 16
    %94 = load ptr, ptr %93, align 8
    %95 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %94, 2
    %96 = load i32, ptr %63, align 8
    %97 = insertvalue { ptr, ptr, ptr, i32 } %95, i32 %96, 3
    store ptr @_parameterization_Ptri8, ptr %30, align 8
    %98 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %30)
    %99 = call ptr @llvm.invariant.start.p0(i64 40, ptr %89)
    %100 = sext i32 %96 to i64
    %101 = getelementptr ptr, ptr %89, i64 %100
    %102 = getelementptr i8, ptr %101, i64 16
    %103 = load ptr, ptr %102, align 8
    store ptr @i8_typ, ptr %31, align 8
    %104 = call ptr %103({ ptr, ptr, ptr, i32 } %97, ptr nonnull %31)
    call void %104({ ptr, ptr, ptr, i32 } %97, { ptr, ptr, ptr, i32 } %97, ptr nonnull %30, i8 %88)
    %105 = load i160, ptr %62, align 8
    br label %106
  
  106:                                              ; preds = %32, %3
    %.reg2mem5.sroa.0.0 = phi ptr [ %89, %32 ], [ @nil_typ, %3 ]
    %.reg2mem5.sroa.3.0 = phi i160 [ %105, %32 ], [ undef, %3 ]
    %.reload6.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %.reg2mem5.sroa.0.0, 0
    %.reload6.fca.1.insert = insertvalue { ptr, i160 } %.reload6.fca.0.insert, i160 %.reg2mem5.sroa.3.0, 1
    ret { ptr, i160 } %.reload6.fca.1.insert
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Character_B_byte_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 80
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Character_B_init_bytePtri8({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 88
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  define i8 @Character_byte_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, 6681222582356018452
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %4 = tail call ptr @llvm.invariant.start.p0(i64 40, ptr %.fca.0.extract)
    %5 = sext i32 %offset.i.i to i64
    %6 = getelementptr ptr, ptr %.fca.0.extract, i64 %5
    %7 = load ptr, ptr %6, align 8
    %8 = load ptr, ptr %7, align 8
    %9 = tail call i8 %8(ptr %.fca.1.extract)
    ret i8 %9
  }
  
  define void @Character_init_bytePtri8({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i8 %3) {
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, 6681222582356018452
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %5 = tail call ptr @llvm.invariant.start.p0(i64 40, ptr %.fca.0.extract)
    %6 = sext i32 %offset.i.i to i64
    %7 = getelementptr ptr, ptr %.fca.0.extract, i64 %6
    %8 = load ptr, ptr %7, align 8
    %9 = getelementptr i8, ptr %8, i64 8
    %10 = load ptr, ptr %9, align 8
    tail call void %10(ptr %.fca.1.extract, i8 %3)
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define i8 @Character_getter_byte(ptr nocapture readonly %0) #0 {
    %2 = load i8, ptr %0, align 1
    ret i8 %2
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
  define void @Character_setter_byte(ptr nocapture writeonly %0, i8 %1) #3 {
    store i8 %1, ptr %0, align 1
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define i32 @StringIterator_getter_index(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 32
    %3 = load i32, ptr %2, align 4
    ret i32 %3
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
  define void @StringIterator_setter_index(ptr nocapture writeonly %0, i32 %1) #3 {
    %3 = getelementptr i8, ptr %0, i64 32
    store i32 %1, ptr %3, align 4
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define { ptr, ptr, ptr, i32 } @StringIterator_getter_str(ptr nocapture readonly %0) #0 {
    %2 = load ptr, ptr %0, align 8
    %3 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2, 0
    %4 = getelementptr i8, ptr %0, i64 8
    %5 = load ptr, ptr %4, align 8
    %6 = insertvalue { ptr, ptr, ptr, i32 } %3, ptr %5, 1
    %7 = getelementptr i8, ptr %0, i64 16
    %8 = load ptr, ptr %7, align 8
    %9 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr %8, 2
    %10 = getelementptr i8, ptr %0, i64 24
    %11 = load i32, ptr %10, align 4
    %12 = insertvalue { ptr, ptr, ptr, i32 } %9, i32 %11, 3
    ret { ptr, ptr, ptr, i32 } %12
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
  define void @StringIterator_setter_str(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #3 {
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
    %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
    store ptr %.fca.0.extract, ptr %0, align 8
    %3 = getelementptr i8, ptr %0, i64 8
    store ptr %.fca.1.extract, ptr %3, align 8
    %4 = getelementptr i8, ptr %0, i64 16
    store ptr %.fca.2.extract, ptr %4, align 8
    %5 = getelementptr i8, ptr %0, i64 24
    store i32 %.fca.3.extract, ptr %5, align 4
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define i32 @String_getter_capacity(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 12
    %3 = load i32, ptr %2, align 4
    ret i32 %3
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
  define void @String_setter_capacity(ptr nocapture writeonly %0, i32 %1) #3 {
    %3 = getelementptr i8, ptr %0, i64 12
    store i32 %1, ptr %3, align 4
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define i32 @String_getter_length(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 8
    %3 = load i32, ptr %2, align 4
    ret i32 %3
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
  define void @String_setter_length(ptr nocapture writeonly %0, i32 %1) #3 {
    %3 = getelementptr i8, ptr %0, i64 8
    store i32 %1, ptr %3, align 4
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define { ptr } @String_getter_bytes(ptr nocapture readonly %0) #0 {
    %2 = load ptr, ptr %0, align 8
    %3 = insertvalue { ptr } undef, ptr %2, 0
    ret { ptr } %3
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
  define void @String_setter_bytes(ptr nocapture writeonly %0, { ptr } %1) #3 {
    %.fca.0.extract = extractvalue { ptr } %1, 0
    store ptr %.fca.0.extract, ptr %0, align 8
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Exception_B_init_messageString({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 120
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Exception_B_init_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 128
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Exception_B_set_info_line_numberPtri32_file_nameString({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 136
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Exception_B_report_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 144
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Exception_B_print_message_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 152
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  define void @Exception_init_messageString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
    %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, 9027164862567808692
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
    %hash_coef_ptr.i.i10 = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i11 = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i12 = getelementptr i8, ptr %.fca.0.extract, i64 40
    %hash_coef.i.i13 = load i64, ptr %hash_coef_ptr.i.i10, align 4
    %tbl_size.i.i14 = load i64, ptr %tbl_size_ptr.i.i11, align 4
    %offset_tbl.i.i15 = load ptr, ptr %offset_tbl_ptr.i.i12, align 8
    %product.i.i.i16 = mul i64 %hash_coef.i.i13, 6499063144389013426
    %shifted.i.i.i17 = lshr i64 %product.i.i.i16, 32
    %xored.i.i.i18 = xor i64 %shifted.i.i.i17, %product.i.i.i16
    %hash.i.i.i19 = and i64 %xored.i.i.i18, %tbl_size.i.i14
    %offset_ptr.i.i20 = getelementptr i32, ptr %offset_tbl.i.i15, i64 %hash.i.i.i19
    %offset.i.i35 = load i32, ptr %offset_ptr.i.i20, align 4
    %5 = tail call ptr @llvm.invariant.start.p0(i64 104, ptr %.fca.0.extract1)
    %6 = sext i32 %offset.i.i to i64
    %7 = getelementptr ptr, ptr %.fca.0.extract1, i64 %6
    %8 = getelementptr i8, ptr %7, i64 16
    %9 = load ptr, ptr %8, align 8
    %10 = getelementptr i8, ptr %9, i64 8
    %11 = load ptr, ptr %10, align 8
    %12 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
    %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.1.extract, 1
    %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.2.extract, 2
    %15 = insertvalue { ptr, ptr, ptr, i32 } %14, i32 %offset.i.i35, 3
    tail call void %11(ptr %.fca.1.extract3, { ptr, ptr, ptr, i32 } %15)
    %16 = tail call ptr @llvm.invariant.start.p0(i64 104, ptr %.fca.0.extract1)
    %17 = load ptr, ptr %7, align 8
    %18 = getelementptr i8, ptr %17, i64 8
    %19 = load ptr, ptr %18, align 8
    tail call void %19(ptr %.fca.1.extract3, i32 0)
    %result.i = tail call noalias dereferenceable_or_null(1) ptr @bump_malloc_inner(i64 noundef 1, ptr nonnull @current_ptr) #26
    %result.i37 = tail call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #26
    %20 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %result.i37, 1
    %21 = insertvalue { ptr, ptr, ptr, i32 } %20, ptr undef, 2
    %22 = insertvalue { ptr, ptr, ptr, i32 } %21, i32 7, 3
    store ptr %result.i, ptr %result.i37, align 8
    %23 = getelementptr i8, ptr %result.i37, i64 8
    store i32 0, ptr %23, align 4
    %24 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
    %25 = getelementptr i8, ptr %result.i37, i64 12
    store i32 1, ptr %25, align 4
    %26 = tail call ptr @llvm.invariant.start.p0(i64 104, ptr %.fca.0.extract1)
    %27 = getelementptr i8, ptr %7, i64 8
    %28 = load ptr, ptr %27, align 8
    %29 = getelementptr i8, ptr %28, i64 8
    %30 = load ptr, ptr %29, align 8
    tail call void %30(ptr %.fca.1.extract3, { ptr, ptr, ptr, i32 } %22)
    ret void
  }
  
  define void @Exception_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, 9027164862567808692
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %4 = tail call ptr @llvm.invariant.start.p0(i64 104, ptr %.fca.0.extract)
    %5 = sext i32 %offset.i.i to i64
    %6 = getelementptr ptr, ptr %.fca.0.extract, i64 %5
    %7 = load ptr, ptr %6, align 8
    %8 = getelementptr i8, ptr %7, i64 8
    %9 = load ptr, ptr %8, align 8
    tail call void %9(ptr %.fca.1.extract, i32 0)
    %result.i = tail call noalias dereferenceable_or_null(7) ptr @bump_malloc_inner(i64 noundef 7, ptr nonnull @current_ptr) #26
    store i48 68605365407292, ptr %result.i, align 4
    %result.i2 = tail call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #26
    %10 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %result.i2, 1
    %11 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr undef, 2
    %12 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 7, 3
    store ptr %result.i, ptr %result.i2, align 8
    %13 = getelementptr i8, ptr %result.i2, i64 8
    store i32 6, ptr %13, align 4
    %14 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
    %15 = getelementptr i8, ptr %result.i2, i64 12
    store i32 7, ptr %15, align 4
    %16 = tail call ptr @llvm.invariant.start.p0(i64 104, ptr %.fca.0.extract)
    %17 = getelementptr i8, ptr %6, i64 16
    %18 = load ptr, ptr %17, align 8
    %19 = getelementptr i8, ptr %18, i64 8
    %20 = load ptr, ptr %19, align 8
    tail call void %20(ptr %.fca.1.extract, { ptr, ptr, ptr, i32 } %12)
    %result.i17 = tail call noalias dereferenceable_or_null(1) ptr @bump_malloc_inner(i64 noundef 1, ptr nonnull @current_ptr) #26
    %result.i18 = tail call noalias dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nonnull @current_ptr) #26
    %21 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %result.i18, 1
    %22 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr undef, 2
    %23 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 7, 3
    store ptr %result.i17, ptr %result.i18, align 8
    %24 = getelementptr i8, ptr %result.i18, i64 8
    store i32 0, ptr %24, align 4
    %25 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
    %26 = getelementptr i8, ptr %result.i18, i64 12
    store i32 1, ptr %26, align 4
    %27 = tail call ptr @llvm.invariant.start.p0(i64 104, ptr %.fca.0.extract)
    %28 = getelementptr i8, ptr %6, i64 8
    %29 = load ptr, ptr %28, align 8
    %30 = getelementptr i8, ptr %29, i64 8
    %31 = load ptr, ptr %30, align 8
    tail call void %31(ptr %.fca.1.extract, { ptr, ptr, ptr, i32 } %23)
    ret void
  }
  
  define void @Exception_set_info_line_numberPtri32_file_nameString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3, { ptr, ptr, ptr, i32 } %4) {
    %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, 9027164862567808692
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %6 = tail call ptr @llvm.invariant.start.p0(i64 104, ptr %.fca.0.extract1)
    %7 = sext i32 %offset.i.i to i64
    %8 = getelementptr ptr, ptr %.fca.0.extract1, i64 %7
    %9 = load ptr, ptr %8, align 8
    %10 = getelementptr i8, ptr %9, i64 8
    %11 = load ptr, ptr %10, align 8
    tail call void %11(ptr %.fca.1.extract3, i32 %3)
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 2
    %hash_coef_ptr.i.i10 = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i11 = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i12 = getelementptr i8, ptr %.fca.0.extract, i64 40
    %hash_coef.i.i13 = load i64, ptr %hash_coef_ptr.i.i10, align 4
    %tbl_size.i.i14 = load i64, ptr %tbl_size_ptr.i.i11, align 4
    %offset_tbl.i.i15 = load ptr, ptr %offset_tbl_ptr.i.i12, align 8
    %product.i.i.i16 = mul i64 %hash_coef.i.i13, 6499063144389013426
    %shifted.i.i.i17 = lshr i64 %product.i.i.i16, 32
    %xored.i.i.i18 = xor i64 %shifted.i.i.i17, %product.i.i.i16
    %hash.i.i.i19 = and i64 %xored.i.i.i18, %tbl_size.i.i14
    %offset_ptr.i.i20 = getelementptr i32, ptr %offset_tbl.i.i15, i64 %hash.i.i.i19
    %offset.i.i35 = load i32, ptr %offset_ptr.i.i20, align 4
    %12 = tail call ptr @llvm.invariant.start.p0(i64 104, ptr %.fca.0.extract1)
    %13 = getelementptr i8, ptr %8, i64 8
    %14 = load ptr, ptr %13, align 8
    %15 = getelementptr i8, ptr %14, i64 8
    %16 = load ptr, ptr %15, align 8
    %17 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
    %18 = insertvalue { ptr, ptr, ptr, i32 } %17, ptr %.fca.1.extract, 1
    %19 = insertvalue { ptr, ptr, ptr, i32 } %18, ptr %.fca.2.extract, 2
    %20 = insertvalue { ptr, ptr, ptr, i32 } %19, i32 %offset.i.i35, 3
    tail call void %16(ptr %.fca.1.extract3, { ptr, ptr, ptr, i32 } %20)
    ret void
  }
  
  define void @Exception_report_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  .lr.ph.i:
    %const = bitcast i72 833358791094643273005 to i72
    %3 = alloca [0 x ptr], align 8
    %.fca.0.extract19 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract21 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract19, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract19, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract19, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, 9027164862567808692
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %result.i = tail call noalias dereferenceable_or_null(10) ptr @bump_malloc_inner(i64 noundef 10, ptr nonnull @current_ptr) #26
    store i72 %const, ptr %result.i, align 4
    %result.i.i = tail call noalias dereferenceable_or_null(10) ptr @bump_malloc_inner(i64 noundef 10, ptr nonnull @current_ptr) #26
    tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 1 dereferenceable(9) %result.i.i, ptr noundef nonnull align 1 dereferenceable(9) %result.i, i64 9, i1 false)
    %4 = getelementptr i8, ptr %result.i.i, i64 9
    store i8 0, ptr %4, align 1
    %puts = tail call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i)
    %result.i33 = tail call noalias dereferenceable_or_null(27) ptr @bump_malloc_inner(i64 noundef 27, ptr nonnull @current_ptr) #26
    store i208 162981253831880068406196778880323066739289769709874582355408965, ptr %result.i33, align 4
    %result.i.i127 = tail call noalias dereferenceable_or_null(27) ptr @bump_malloc_inner(i64 noundef 27, ptr nonnull @current_ptr) #26
    tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 1 dereferenceable(26) %result.i.i127, ptr noundef nonnull align 1 dereferenceable(26) %result.i33, i64 26, i1 false)
    %5 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
    %6 = getelementptr i8, ptr %result.i.i127, i64 26
    store i8 0, ptr %6, align 1
    %puts27 = tail call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i127)
    %7 = tail call ptr @llvm.invariant.start.p0(i64 104, ptr %.fca.0.extract19)
    %8 = sext i32 %offset.i.i to i64
    %9 = getelementptr ptr, ptr %.fca.0.extract19, i64 %8
    %10 = getelementptr i8, ptr %9, i64 8
    %11 = load ptr, ptr %10, align 8
    %12 = load ptr, ptr %11, align 8
    %13 = tail call { ptr, ptr, ptr, i32 } %12(ptr %.fca.1.extract21)
    %.fca.0.extract10 = extractvalue { ptr, ptr, ptr, i32 } %13, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %13, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %13, 2
    %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %13, 3
    %14 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract10, 0
    %15 = insertvalue { ptr, ptr, ptr, i32 } %14, ptr %.fca.1.extract, 1
    %16 = insertvalue { ptr, ptr, ptr, i32 } %15, ptr %.fca.2.extract, 2
    %17 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %.fca.3.extract, 3
    %18 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
    %19 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract10)
    %20 = sext i32 %.fca.3.extract to i64
    %21 = getelementptr ptr, ptr %.fca.0.extract10, i64 %20
    %22 = getelementptr i8, ptr %21, i64 112
    %23 = load ptr, ptr %22, align 8
    %24 = call ptr %23({ ptr, ptr, ptr, i32 } %17, ptr nonnull %3)
    %25 = call { ptr } %24({ ptr, ptr, ptr, i32 } %17, { ptr, ptr, ptr, i32 } %17, ptr nonnull %3)
    %.fca.0.extract8 = extractvalue { ptr } %25, 0
    %puts28 = call i32 @puts(ptr nonnull dereferenceable(1) %.fca.0.extract8)
    %result.i49 = call noalias dereferenceable_or_null(8) ptr @bump_malloc_inner(i64 noundef 8, ptr nonnull @current_ptr) #26
    store i56 28550371712463937, ptr %result.i49, align 4
    %26 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
    %result.i.i147 = call noalias dereferenceable_or_null(8) ptr @bump_malloc_inner(i64 noundef 8, ptr nonnull @current_ptr) #26
    call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 1 dereferenceable(7) %result.i.i147, ptr noundef nonnull align 1 dereferenceable(7) %result.i49, i64 7, i1 false)
    %27 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
    %28 = getelementptr i8, ptr %result.i.i147, i64 7
    store i8 0, ptr %28, align 1
    %puts29 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i147)
    %29 = call ptr @llvm.invariant.start.p0(i64 104, ptr %.fca.0.extract19)
    %30 = load ptr, ptr %9, align 8
    %31 = load ptr, ptr %30, align 8
    %32 = call i32 %31(ptr %.fca.1.extract21)
    %33 = call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i32_string, i32 %32)
    %result.i51 = call noalias dereferenceable_or_null(13) ptr @bump_malloc_inner(i64 noundef 13, ptr nonnull @current_ptr) #26
    store i96 31382965550615737851350116695, ptr %result.i51, align 4
    %34 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
    %result.i.i167 = call noalias dereferenceable_or_null(13) ptr @bump_malloc_inner(i64 noundef 13, ptr nonnull @current_ptr) #26
    call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 1 dereferenceable(12) %result.i.i167, ptr noundef nonnull align 1 dereferenceable(12) %result.i51, i64 12, i1 false)
    %.fca.2.extract23 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
    %35 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
    %36 = getelementptr i8, ptr %result.i.i167, i64 12
    store i8 0, ptr %36, align 1
    %puts30 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i167)
    %37 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract19, 0
    %38 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %.fca.1.extract21, 1
    %39 = insertvalue { ptr, ptr, ptr, i32 } %38, ptr %.fca.2.extract23, 2
    %40 = insertvalue { ptr, ptr, ptr, i32 } %39, i32 %offset.i.i, 3
    %41 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
    %42 = call ptr @llvm.invariant.start.p0(i64 104, ptr %.fca.0.extract19)
    %43 = getelementptr i8, ptr %9, i64 56
    %44 = load ptr, ptr %43, align 8
    %45 = call ptr %44({ ptr, ptr, ptr, i32 } %40, ptr nonnull %3)
    call void %45({ ptr, ptr, ptr, i32 } %40, { ptr, ptr, ptr, i32 } %40, ptr nonnull %3)
    %result.i53 = call noalias dereferenceable_or_null(10) ptr @bump_malloc_inner(i64 noundef 10, ptr nonnull @current_ptr) #26
    store i72 %const, ptr %result.i53, align 4
    %46 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
    %result.i.i187 = call noalias dereferenceable_or_null(10) ptr @bump_malloc_inner(i64 noundef 10, ptr nonnull @current_ptr) #26
    call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 1 dereferenceable(9) %result.i.i187, ptr noundef nonnull align 1 dereferenceable(9) %result.i53, i64 9, i1 false)
    %47 = call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
    %48 = getelementptr i8, ptr %result.i.i187, i64 9
    store i8 0, ptr %48, align 1
    %puts31 = call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i187)
    ret void
  }
  
  define void @Exception_print_message_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
    %4 = alloca [0 x ptr], align 8
    %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, 9027164862567808692
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %5 = tail call ptr @llvm.invariant.start.p0(i64 104, ptr %.fca.0.extract2)
    %6 = sext i32 %offset.i.i to i64
    %7 = getelementptr ptr, ptr %.fca.0.extract2, i64 %6
    %8 = getelementptr i8, ptr %7, i64 16
    %9 = load ptr, ptr %8, align 8
    %10 = load ptr, ptr %9, align 8
    %11 = tail call { ptr, ptr, ptr, i32 } %10(ptr %.fca.1.extract4)
    %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %11, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %11, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %11, 2
    %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %11, 3
    %12 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
    %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %.fca.1.extract, 1
    %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %.fca.2.extract, 2
    %15 = insertvalue { ptr, ptr, ptr, i32 } %14, i32 %.fca.3.extract, 3
    %16 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
    %17 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract1)
    %18 = sext i32 %.fca.3.extract to i64
    %19 = getelementptr ptr, ptr %.fca.0.extract1, i64 %18
    %20 = getelementptr i8, ptr %19, i64 112
    %21 = load ptr, ptr %20, align 8
    %22 = call ptr %21({ ptr, ptr, ptr, i32 } %15, ptr nonnull %4)
    %23 = call { ptr } %22({ ptr, ptr, ptr, i32 } %15, { ptr, ptr, ptr, i32 } %15, ptr nonnull %4)
    %.fca.0.extract = extractvalue { ptr } %23, 0
    %puts = call i32 @puts(ptr nonnull dereferenceable(1) %.fca.0.extract)
    ret void
  }
  
  ; Function Attrs: nofree nounwind
  declare noundef i32 @printf(ptr nocapture noundef readonly, ...) local_unnamed_addr #10
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define { ptr, ptr, ptr, i32 } @Exception_getter_message(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 40
    %3 = load ptr, ptr %2, align 8
    %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
    %5 = getelementptr i8, ptr %0, i64 48
    %6 = load ptr, ptr %5, align 8
    %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
    %8 = getelementptr i8, ptr %0, i64 56
    %9 = load ptr, ptr %8, align 8
    %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
    %11 = getelementptr i8, ptr %0, i64 64
    %12 = load i32, ptr %11, align 4
    %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
    ret { ptr, ptr, ptr, i32 } %13
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
  define void @Exception_setter_message(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #3 {
    %3 = getelementptr i8, ptr %0, i64 40
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
    %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
    store ptr %.fca.0.extract, ptr %3, align 8
    %4 = getelementptr i8, ptr %0, i64 48
    store ptr %.fca.1.extract, ptr %4, align 8
    %5 = getelementptr i8, ptr %0, i64 56
    store ptr %.fca.2.extract, ptr %5, align 8
    %6 = getelementptr i8, ptr %0, i64 64
    store i32 %.fca.3.extract, ptr %6, align 4
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define { ptr, ptr, ptr, i32 } @Exception_getter_file_name(ptr nocapture readonly %0) #0 {
    %2 = getelementptr i8, ptr %0, i64 8
    %3 = load ptr, ptr %2, align 8
    %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
    %5 = getelementptr i8, ptr %0, i64 16
    %6 = load ptr, ptr %5, align 8
    %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
    %8 = getelementptr i8, ptr %0, i64 24
    %9 = load ptr, ptr %8, align 8
    %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
    %11 = getelementptr i8, ptr %0, i64 32
    %12 = load i32, ptr %11, align 4
    %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
    ret { ptr, ptr, ptr, i32 } %13
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
  define void @Exception_setter_file_name(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #3 {
    %3 = getelementptr i8, ptr %0, i64 8
    %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
    %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
    store ptr %.fca.0.extract, ptr %3, align 8
    %4 = getelementptr i8, ptr %0, i64 16
    store ptr %.fca.1.extract, ptr %4, align 8
    %5 = getelementptr i8, ptr %0, i64 24
    store ptr %.fca.2.extract, ptr %5, align 8
    %6 = getelementptr i8, ptr %0, i64 32
    store i32 %.fca.3.extract, ptr %6, align 4
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define i32 @Exception_getter_line_number(ptr nocapture readonly %0) #0 {
    %2 = load i32, ptr %0, align 4
    ret i32 %2
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
  define void @Exception_setter_line_number(ptr nocapture writeonly %0, i32 %1) #3 {
    store i32 %1, ptr %0, align 4
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @Iterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr #1 {
    %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
    %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
    %5 = getelementptr i8, ptr %4, i64 64
    %6 = load ptr, ptr %5, align 8
    ret ptr %6
  }
  
  define void @report_exception({ ptr } %0) local_unnamed_addr {
    %2 = alloca [0 x ptr], align 8
    %.fca.0.extract2 = extractvalue { ptr } %0, 0
    %3 = getelementptr i8, ptr %.fca.0.extract2, i64 48
    %4 = load { ptr, i160 }, ptr %3, align 8
    %.fca.0.extract = extractvalue { ptr, i160 } %4, 0
    %5 = icmp ne ptr %.fca.0.extract, @nil_typ
    %6 = icmp ne ptr %.fca.0.extract, null
    %.not4 = and i1 %5, %6
    br i1 %.not4, label %7, label %._crit_edge
  
  7:                                                ; preds = %1
    %.fca.1.extract = extractvalue { ptr, i160 } %4, 1
    %.sroa.3.8.extract.trunc = trunc i160 %.fca.1.extract to i64
    %8 = inttoptr i64 %.sroa.3.8.extract.trunc to ptr
    %.sroa.5.8.extract.shift = lshr i160 %.fca.1.extract, 64
    %.sroa.5.8.extract.trunc = trunc i160 %.sroa.5.8.extract.shift to i64
    %9 = inttoptr i64 %.sroa.5.8.extract.trunc to ptr
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, 9027164862567808692
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
    %11 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %8, 1
    %12 = insertvalue { ptr, ptr, ptr, i32 } %11, ptr %9, 2
    %13 = insertvalue { ptr, ptr, ptr, i32 } %12, i32 %offset.i.i, 3
    %14 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
    %15 = tail call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull %.fca.0.extract)
    %16 = sext i32 %offset.i.i to i64
    %17 = getelementptr ptr, ptr %.fca.0.extract, i64 %16
    %18 = getelementptr i8, ptr %17, i64 48
    %19 = load ptr, ptr %18, align 8
    %20 = call ptr %19({ ptr, ptr, ptr, i32 } %13, ptr nonnull %2)
    call void %20({ ptr, ptr, ptr, i32 } %13, { ptr, ptr, ptr, i32 } %13, ptr nonnull %2)
    br label %._crit_edge
  
  ._crit_edge:                                      ; preds = %7, %1
    ret void
  }
  
  ; Function Attrs: mustprogress willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define ptr @IO_B__Self_print_xPtri8__Self_print_xPtri1__Self_print_xNil__Self_print_xCharacter__Self_print_xPtri64__Self_print_xPtri32__Self_print_xRepresentable__Self_print_xString__Self_print_xPtrf64(ptr nocapture %0) #7 {
    %2 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
    %3 = load ptr, ptr %0, align 8
    %4 = getelementptr i8, ptr %3, i64 8
    %5 = getelementptr i8, ptr %3, i64 16
    %6 = getelementptr i8, ptr %3, i64 24
    %7 = getelementptr i8, ptr %3, i64 32
    %8 = load i64, ptr %4, align 4
    %9 = load i64, ptr %5, align 4
    %10 = load ptr, ptr %6, align 8
    %11 = load ptr, ptr %7, align 8
    %result.i = tail call i1 %10(i64 %9, i64 %8, i64 -7469797244461771922, i64 ptrtoint (ptr @i64_typ to i64), ptr readonly %11) #0
    br i1 %result.i, label %18, label %12
  
  12:                                               ; preds = %1
    %result.i3 = tail call i1 %10(i64 %9, i64 %8, i64 -5126806859456325683, i64 ptrtoint (ptr @nil_typ to i64), ptr readonly %11) #0
    br i1 %result.i3, label %18, label %13
  
  13:                                               ; preds = %12
    %result.i4 = tail call i1 %10(i64 %9, i64 %8, i64 -757315540097298781, i64 ptrtoint (ptr @f64_typ to i64), ptr readonly %11) #0
    br i1 %result.i4, label %18, label %14
  
  14:                                               ; preds = %13
    %result.i5 = tail call i1 %10(i64 %9, i64 %8, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr readonly %11) #0
    %result.i6 = tail call i1 %10(i64 %9, i64 %8, i64 6681222582356018452, i64 ptrtoint (ptr @Character to i64), ptr readonly %11) #0
    %not.result.i5 = xor i1 %result.i5, true
    %.reg2mem51.0 = select i1 %not.result.i5, i1 true, i1 %result.i6
    br i1 %.reg2mem51.0, label %15, label %18
  
  15:                                               ; preds = %14
    %result.i7 = tail call i1 %10(i64 %9, i64 %8, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr readonly %11) #0
    br i1 %result.i7, label %18, label %16
  
  16:                                               ; preds = %15
    %result.i8 = tail call i1 %10(i64 %9, i64 %8, i64 2582149688529881115, i64 ptrtoint (ptr @i8_typ to i64), ptr readonly %11) #0
    br i1 %result.i8, label %18, label %17
  
  17:                                               ; preds = %16
    %result.i9 = tail call i1 %10(i64 %9, i64 %8, i64 -7260840641129990118, i64 ptrtoint (ptr @Representable to i64), ptr readonly %11) #0
    %result.i9.not = xor i1 %result.i9, true
    %.reg2mem49.0 = or i1 %result.i5, %result.i6
    %or.cond = select i1 %result.i9.not, i1 true, i1 %.reg2mem49.0
    br i1 %or.cond, label %.critedge, label %18
  
  .critedge:                                        ; preds = %17
    %not.result.i6 = xor i1 %result.i6, true
    %.reg2mem45.0 = or i1 %result.i5, %not.result.i6
    %.reg2mem43.0 = select i1 %.reg2mem45.0, i32 2, i32 4
    br label %18
  
  18:                                               ; preds = %.critedge, %17, %16, %15, %14, %13, %12, %1
    %.reg2mem29.0 = phi i32 [ 5, %1 ], [ 3, %12 ], [ 9, %13 ], [ 6, %15 ], [ 1, %16 ], [ %.reg2mem43.0, %.critedge ], [ 8, %14 ], [ 7, %17 ]
    %19 = zext nneg i32 %.reg2mem29.0 to i64
    %20 = getelementptr [10 x ptr], ptr @IO, i64 0, i64 %19
    %21 = getelementptr i8, ptr %20, i64 56
    %22 = load ptr, ptr %21, align 8
    ret ptr %22
  }
  
  ; Function Attrs: nofree nounwind
  define void @IO__Self_print_xPtri8(ptr nocapture readnone %0, { ptr, i160 } %1) #10 {
    %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
    %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i8
    %3 = sext i8 %.sroa.1.8.extract.trunc to i32
    %4 = tail call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i32_string, i32 %3)
    ret void
  }
  
  ; Function Attrs: nofree nounwind
  define void @IO__Self_print_xPtri1(ptr nocapture readnone %0, { ptr, i160 } %1) #10 {
    %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
    %3 = trunc i160 %.fca.1.extract to i1
    br i1 %3, label %4, label %5
  
  4:                                                ; preds = %2
    %result.i = tail call noalias dereferenceable_or_null(5) ptr @bump_malloc_inner(i64 noundef 5, ptr nonnull @current_ptr) #26
    store i32 1702195828, ptr %result.i, align 4
    br label %.lr.ph.i
  
  5:                                                ; preds = %2
    %result.i15 = tail call noalias dereferenceable_or_null(6) ptr @bump_malloc_inner(i64 noundef 6, ptr nonnull @current_ptr) #26
    store i40 435728179558, ptr %result.i15, align 4
    br label %.lr.ph.i
  
  .lr.ph.i:                                         ; preds = %5, %4
    %result.i15.sink = phi ptr [ %result.i15, %5 ], [ %result.i, %4 ]
    %.sink33 = phi i32 [ 5, %5 ], [ 4, %4 ]
    %6 = add nuw nsw i32 %.sink33, 1
    %7 = zext nneg i32 %6 to i64
    %result.i.i = tail call noalias ptr @bump_malloc_inner(i64 noundef %7, ptr nonnull @current_ptr) #26
    %8 = zext nneg i32 %.sink33 to i64
    tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 1 dereferenceable(1) %result.i.i, ptr noundef nonnull align 1 dereferenceable(1) %result.i15.sink, i64 %8, i1 false)
    %9 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
    %10 = zext nneg i32 %.sink33 to i64
    %11 = getelementptr i8, ptr %result.i.i, i64 %10
    store i8 0, ptr %11, align 1
    %puts = tail call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i)
    ret void
  }
  
  ; Function Attrs: nofree nounwind
  define void @IO__Self_print_xNil(ptr nocapture readnone %0, { ptr, i160 } %1) #10 {
  .lr.ph.i:
    %result.i = tail call noalias dereferenceable_or_null(4) ptr @bump_malloc_inner(i64 noundef 4, ptr nonnull @current_ptr) #26
    store i24 7104878, ptr %result.i, align 4
    %result.i.i = tail call noalias dereferenceable_or_null(4) ptr @bump_malloc_inner(i64 noundef 4, ptr nonnull @current_ptr) #26
    tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 1 dereferenceable(3) %result.i.i, ptr noundef nonnull align 1 dereferenceable(3) %result.i, i64 3, i1 false)
    %2 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr nonnull @String)
    %3 = getelementptr i8, ptr %result.i.i, i64 3
    store i8 0, ptr %3, align 1
    %puts = tail call i32 @puts(ptr nonnull dereferenceable(1) %result.i.i)
    ret void
  }
  
  define void @IO__Self_print_xCharacter(ptr nocapture readnone %0, { ptr, i160 } %1) {
    %3 = alloca [0 x ptr], align 8
    %.fca.0.extract = extractvalue { ptr, i160 } %1, 0
    %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
    %.sroa.3.8.extract.trunc = trunc i160 %.fca.1.extract to i64
    %4 = inttoptr i64 %.sroa.3.8.extract.trunc to ptr
    %.sroa.5.8.extract.shift = lshr i160 %.fca.1.extract, 64
    %.sroa.5.8.extract.trunc = trunc i160 %.sroa.5.8.extract.shift to i64
    %5 = inttoptr i64 %.sroa.5.8.extract.trunc to ptr
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, 6681222582356018452
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %result.i = tail call noalias dereferenceable_or_null(2) ptr @bump_malloc_inner(i64 noundef 2, ptr nonnull @current_ptr) #26
    %6 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
    %7 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr %4, 1
    %8 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %5, 2
    %9 = insertvalue { ptr, ptr, ptr, i32 } %8, i32 %offset.i.i, 3
    %10 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
    %11 = tail call ptr @llvm.invariant.start.p0(i64 40, ptr %.fca.0.extract)
    %12 = sext i32 %offset.i.i to i64
    %13 = getelementptr ptr, ptr %.fca.0.extract, i64 %12
    %14 = getelementptr i8, ptr %13, i64 8
    %15 = load ptr, ptr %14, align 8
    %16 = call ptr %15({ ptr, ptr, ptr, i32 } %9, ptr nonnull %3)
    %17 = call i8 %16({ ptr, ptr, ptr, i32 } %9, { ptr, ptr, ptr, i32 } %9, ptr nonnull %3)
    store i8 %17, ptr %result.i, align 1
    %18 = getelementptr i8, ptr %result.i, i64 1
    store i8 0, ptr %18, align 1
    %puts = call i32 @puts(ptr nonnull dereferenceable(1) %result.i)
    ret void
  }
  
  ; Function Attrs: nofree nounwind
  define void @IO__Self_print_xPtri64(ptr nocapture readnone %0, { ptr, i160 } %1) #10 {
    %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
    %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i64
    %3 = tail call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i64_string, i64 %.sroa.1.8.extract.trunc)
    ret void
  }
  
  ; Function Attrs: nofree nounwind
  define void @IO__Self_print_xPtri32(ptr nocapture readnone %0, { ptr, i160 } %1) #10 {
    %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
    %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
    %3 = tail call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i32_string, i32 %.sroa.1.8.extract.trunc)
    ret void
  }
  
  define void @IO__Self_print_xRepresentable(ptr nocapture readnone %0, { ptr, i160 } %1) {
    %3 = alloca [0 x ptr], align 8
    %.fca.0.extract2 = extractvalue { ptr, i160 } %1, 0
    %.fca.1.extract4 = extractvalue { ptr, i160 } %1, 1
    %.sroa.321.8.extract.trunc = trunc i160 %.fca.1.extract4 to i64
    %4 = inttoptr i64 %.sroa.321.8.extract.trunc to ptr
    %.sroa.522.8.extract.shift = lshr i160 %.fca.1.extract4, 64
    %.sroa.522.8.extract.trunc = trunc i160 %.sroa.522.8.extract.shift to i64
    %5 = inttoptr i64 %.sroa.522.8.extract.trunc to ptr
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract2, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, -7260840641129990118
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %6 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract2, 0
    %7 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr %4, 1
    %8 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %5, 2
    %9 = insertvalue { ptr, ptr, ptr, i32 } %8, i32 %offset.i.i, 3
    %10 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
    %11 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %.fca.0.extract2)
    %12 = sext i32 %offset.i.i to i64
    %13 = getelementptr ptr, ptr %.fca.0.extract2, i64 %12
    %14 = load ptr, ptr %13, align 8
    %15 = call ptr %14({ ptr, ptr, ptr, i32 } %9, ptr nonnull %3)
    %16 = call { ptr, ptr, ptr, i32 } %15({ ptr, ptr, ptr, i32 } %9, { ptr, ptr, ptr, i32 } %9, ptr nonnull %3)
    %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %16, 0
    %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %16, 1
    %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %16, 2
    %hash_coef_ptr.i.i7 = getelementptr i8, ptr %.fca.0.extract1, i64 8
    %tbl_size_ptr.i.i8 = getelementptr i8, ptr %.fca.0.extract1, i64 16
    %offset_tbl_ptr.i.i9 = getelementptr i8, ptr %.fca.0.extract1, i64 40
    %hash_coef.i.i10 = load i64, ptr %hash_coef_ptr.i.i7, align 4
    %tbl_size.i.i11 = load i64, ptr %tbl_size_ptr.i.i8, align 4
    %offset_tbl.i.i12 = load ptr, ptr %offset_tbl_ptr.i.i9, align 8
    %product.i.i.i13 = mul i64 %hash_coef.i.i10, 6499063144389013426
    %shifted.i.i.i14 = lshr i64 %product.i.i.i13, 32
    %xored.i.i.i15 = xor i64 %shifted.i.i.i14, %product.i.i.i13
    %hash.i.i.i16 = and i64 %xored.i.i.i15, %tbl_size.i.i11
    %offset_ptr.i.i17 = getelementptr i32, ptr %offset_tbl.i.i12, i64 %hash.i.i.i16
    %offset.i.i18 = load i32, ptr %offset_ptr.i.i17, align 4
    %17 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
    %18 = insertvalue { ptr, ptr, ptr, i32 } %17, ptr %.fca.1.extract, 1
    %19 = insertvalue { ptr, ptr, ptr, i32 } %18, ptr %.fca.2.extract, 2
    %20 = insertvalue { ptr, ptr, ptr, i32 } %19, i32 %offset.i.i18, 3
    %21 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
    %22 = call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract1)
    %23 = sext i32 %offset.i.i18 to i64
    %24 = getelementptr ptr, ptr %.fca.0.extract1, i64 %23
    %25 = getelementptr i8, ptr %24, i64 112
    %26 = load ptr, ptr %25, align 8
    %27 = call ptr %26({ ptr, ptr, ptr, i32 } %20, ptr nonnull %3)
    %28 = call { ptr } %27({ ptr, ptr, ptr, i32 } %20, { ptr, ptr, ptr, i32 } %20, ptr nonnull %3)
    %.fca.0.extract = extractvalue { ptr } %28, 0
    %puts = call i32 @puts(ptr nonnull dereferenceable(1) %.fca.0.extract)
    ret void
  }
  
  define void @IO__Self_print_xString(ptr nocapture readnone %0, { ptr, i160 } %1) {
    %3 = alloca [0 x ptr], align 8
    %.fca.0.extract1 = extractvalue { ptr, i160 } %1, 0
    %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
    %.sroa.3.8.extract.trunc = trunc i160 %.fca.1.extract to i64
    %4 = inttoptr i64 %.sroa.3.8.extract.trunc to ptr
    %.sroa.5.8.extract.shift = lshr i160 %.fca.1.extract, 64
    %.sroa.5.8.extract.trunc = trunc i160 %.sroa.5.8.extract.shift to i64
    %5 = inttoptr i64 %.sroa.5.8.extract.trunc to ptr
    %hash_coef_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 8
    %tbl_size_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 16
    %offset_tbl_ptr.i.i = getelementptr i8, ptr %.fca.0.extract1, i64 40
    %hash_coef.i.i = load i64, ptr %hash_coef_ptr.i.i, align 4
    %tbl_size.i.i = load i64, ptr %tbl_size_ptr.i.i, align 4
    %offset_tbl.i.i = load ptr, ptr %offset_tbl_ptr.i.i, align 8
    %product.i.i.i = mul i64 %hash_coef.i.i, 6499063144389013426
    %shifted.i.i.i = lshr i64 %product.i.i.i, 32
    %xored.i.i.i = xor i64 %shifted.i.i.i, %product.i.i.i
    %hash.i.i.i = and i64 %xored.i.i.i, %tbl_size.i.i
    %offset_ptr.i.i = getelementptr i32, ptr %offset_tbl.i.i, i64 %hash.i.i.i
    %offset.i.i = load i32, ptr %offset_ptr.i.i, align 4
    %6 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract1, 0
    %7 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr %4, 1
    %8 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %5, 2
    %9 = insertvalue { ptr, ptr, ptr, i32 } %8, i32 %offset.i.i, 3
    %10 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
    %11 = tail call ptr @llvm.invariant.start.p0(i64 280, ptr %.fca.0.extract1)
    %12 = sext i32 %offset.i.i to i64
    %13 = getelementptr ptr, ptr %.fca.0.extract1, i64 %12
    %14 = getelementptr i8, ptr %13, i64 112
    %15 = load ptr, ptr %14, align 8
    %16 = call ptr %15({ ptr, ptr, ptr, i32 } %9, ptr nonnull %3)
    %17 = call { ptr } %16({ ptr, ptr, ptr, i32 } %9, { ptr, ptr, ptr, i32 } %9, ptr nonnull %3)
    %.fca.0.extract = extractvalue { ptr } %17, 0
    %puts = call i32 @puts(ptr nonnull dereferenceable(1) %.fca.0.extract)
    ret void
  }
  
  ; Function Attrs: nofree nounwind
  define void @IO__Self_print_xPtrf64(ptr nocapture readnone %0, { ptr, i160 } %1) #10 {
    %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
    %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i64
    %3 = bitcast i64 %.sroa.1.8.extract.trunc to double
    %4 = tail call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @float_string, double %3)
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
  define ptr @adjust_trampoline(ptr readonly %tramp) local_unnamed_addr #0 {
    %ret = tail call ptr @llvm.adjust.trampoline(ptr %tramp) #28
    ret ptr %ret
  }
  
  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: read)
  declare ptr @llvm.adjust.trampoline(ptr) #11
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(readwrite, argmem: none, inaccessiblemem: none)
  define noalias ptr @bump_malloc(i64 noundef %size) local_unnamed_addr #12 {
    %result = tail call noalias ptr @bump_malloc_inner(i64 noundef %size, ptr nonnull @current_ptr) #26
    ret ptr %result
  }
  
  ; Function Attrs: mustprogress nofree noinline norecurse nosync nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(argmem: readwrite)
  define noalias ptr @bump_malloc_inner(i64 noundef %size, ptr nocapture %current_ptr) local_unnamed_addr #13 {
    %size_plus_15 = add i64 %size, 15
    %aligned_size = and i64 %size_plus_15, -16
    %current = load ptr, ptr %current_ptr, align 8
    %new_ptr = getelementptr i8, ptr %current, i64 %aligned_size
    store ptr %new_ptr, ptr %current_ptr, align 8
    ret ptr %current
  }
  
  ; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
  define void @anoint_trampoline(ptr %tramp) local_unnamed_addr #14 {
    %oldProtect = alloca i32, align 4
    %result = call i32 @VirtualProtect(ptr %tramp, i64 16, i32 64, ptr nonnull %oldProtect) #14
    ret void
  }
  
  ; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
  declare i32 @VirtualProtect(ptr, i64, i32, ptr) local_unnamed_addr #14
  
  define noundef ptr @coroutine_create(ptr %func, ptr %arg_passer) local_unnamed_addr {
    %stack = tail call noalias dereferenceable_or_null(8388608) ptr @VirtualAlloc(ptr null, i64 8388608, i32 12288, i32 4) #15
    store ptr %func, ptr %stack, align 8
    %stack_top = getelementptr i8, ptr %stack, i64 8388608
    %stack_top_i64 = ptrtoint ptr %stack_top to i64
    %stack_top_aligned = and i64 %stack_top_i64, -16
    %into_callee_buf = getelementptr i8, ptr %stack, i64 8
    %arg_passer_slot = getelementptr i8, ptr %stack, i64 32
    %into_callee_second_word = getelementptr i8, ptr %stack, i64 16
    %into_callee_third_word = getelementptr i8, ptr %stack, i64 24
    store i64 %stack_top_aligned, ptr %into_callee_buf, align 4
    store i64 %stack_top_aligned, ptr %into_callee_third_word, align 4
    store ptr %arg_passer, ptr %arg_passer_slot, align 8
    %is_finished = getelementptr i8, ptr %stack, i64 40
    store i1 false, ptr %is_finished, align 1
    tail call void @coroutine_trampoline(ptr %into_callee_second_word)
    ret ptr %stack
  }
  
  ; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(1)
  declare noalias ptr @VirtualAlloc(ptr, i64, i32, i32) local_unnamed_addr #15
  
  ; Function Attrs: noinline
  define void @coroutine_trampoline(ptr nocapture writeonly %into_callee_second_word) #16 {
    store ptr blockaddress(@coroutine_trampoline, %trampoline), ptr %into_callee_second_word, align 8
    %retval.i = load i1, ptr @always_one, align 1
    br i1 %retval.i, label %exit, label %trampoline
  
  trampoline:                                       ; preds = %0
    %current_coroutine = load ptr, ptr @current_coroutine, align 8
    %arg_passer_ptr = getelementptr i8, ptr %current_coroutine, i64 32
    %arg_passer = load ptr, ptr %arg_passer_ptr, align 8
    tail call void %arg_passer(ptr %current_coroutine)
    %current_coroutine2 = load ptr, ptr @current_coroutine, align 8
    %is_finished_ptr = getelementptr i8, ptr %current_coroutine2, i64 40
    store i1 true, ptr %is_finished_ptr, align 1
    tail call void @llvm.eh.sjlj.longjmp(ptr nonnull @into_caller_buf) #19
    unreachable
  
  exit:                                             ; preds = %0
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: none, inaccessiblemem: none)
  define i1 @returns_one() local_unnamed_addr #17 {
    %retval = load i1, ptr @always_one, align 1
    ret i1 %retval
  }
  
  ; Function Attrs: nocallback nofree nosync nounwind willreturn
  declare ptr @llvm.stacksave.p0() #18
  
  ; Function Attrs: noreturn nounwind
  declare void @llvm.eh.sjlj.longjmp(ptr) #19
  
  define void @setup_landing_pad() {
    %region = tail call noalias dereferenceable_or_null(8388608) ptr @VirtualAlloc(ptr null, i64 8388608, i32 12288, i32 4) #15
    store ptr %region, ptr @current_ptr, align 8
    %sp = tail call ptr @llvm.stacksave.p0() #29
    store ptr %sp, ptr @into_caller_buf, align 16
    store ptr blockaddress(@setup_landing_pad, %landing_pad), ptr getelementptr inbounds (i8, ptr @into_caller_buf, i64 8), align 8
    store ptr %sp, ptr getelementptr inbounds (i8, ptr @into_caller_buf, i64 16), align 16
    %stack.i = tail call noalias dereferenceable_or_null(8388608) ptr @VirtualAlloc(ptr null, i64 8388608, i32 12288, i32 4) #15
    store ptr @setup_landing_pad, ptr %stack.i, align 8
    %stack_top.i = getelementptr i8, ptr %stack.i, i64 8388608
    %stack_top_i64.i = ptrtoint ptr %stack_top.i to i64
    %stack_top_aligned.i = and i64 %stack_top_i64.i, -16
    %into_callee_buf.i = getelementptr i8, ptr %stack.i, i64 8
    %arg_passer_slot.i = getelementptr i8, ptr %stack.i, i64 32
    %into_callee_second_word.i = getelementptr i8, ptr %stack.i, i64 16
    %into_callee_third_word.i = getelementptr i8, ptr %stack.i, i64 24
    store i64 %stack_top_aligned.i, ptr %into_callee_buf.i, align 4
    store i64 %stack_top_aligned.i, ptr %into_callee_third_word.i, align 4
    store ptr @arg_passer, ptr %arg_passer_slot.i, align 8
    %is_finished.i = getelementptr i8, ptr %stack.i, i64 40
    store i1 false, ptr %is_finished.i, align 1
    tail call void @coroutine_trampoline(ptr %into_callee_second_word.i)
    store ptr %stack.i, ptr @current_coroutine, align 8
    %retval.i = load i1, ptr @always_one, align 1
    br i1 %retval.i, label %exit, label %landing_pad
  
  landing_pad:                                      ; preds = %0
    %ok = tail call i32 @printf(ptr nonnull @string_string.17, ptr nonnull @exception_message)
    %cc.unpack = load ptr, ptr @current_coroutine, align 8
    %cc1 = insertvalue { ptr } poison, ptr %cc.unpack, 0
    tail call void @report_exception({ ptr } %cc1)
    tail call void @exit()
    unreachable
  
  exit:                                             ; preds = %0
    ret void
  }
  
  define void @arg_passer(ptr nocapture readonly %current_coroutine) {
    %func = load ptr, ptr %current_coroutine, align 8
    tail call void %func()
    ret void
  }
  
  declare void @exit() local_unnamed_addr
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, inaccessiblemem: none)
  define i32 @get_offset(ptr nocapture readonly %vptr, ptr nocapture readonly %id_ptr) local_unnamed_addr #9 {
    %id = load i64, ptr %id_ptr, align 4
    %hash_coef_ptr = getelementptr i8, ptr %vptr, i64 8
    %tbl_size_ptr = getelementptr i8, ptr %vptr, i64 16
    %offset_tbl_ptr = getelementptr i8, ptr %vptr, i64 40
    %hash_coef = load i64, ptr %hash_coef_ptr, align 4
    %tbl_size = load i64, ptr %tbl_size_ptr, align 4
    %offset_tbl = load ptr, ptr %offset_tbl_ptr, align 8
    %product.i = mul i64 %hash_coef, %id
    %shifted.i = lshr i64 %product.i, 32
    %xored.i = xor i64 %shifted.i, %product.i
    %hash.i = and i64 %xored.i, %tbl_size
    %offset_ptr = getelementptr i32, ptr %offset_tbl, i64 %hash.i
    %offset = load i32, ptr %offset_ptr, align 4
    ret i32 %offset
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
  define i64 @hash_to_index(i64 %tbl_size, i64 %hash_coef, i64 %cand_id) local_unnamed_addr #4 {
    %product = mul i64 %cand_id, %hash_coef
    %shifted = lshr i64 %product, 32
    %xored = xor i64 %shifted, %product
    %hash = and i64 %xored, %tbl_size
    ret i64 %hash
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, inaccessiblemem: write)
  define void @assume_offset(ptr nocapture readonly %fat_ptr, ptr nocapture readonly %id_ptr) local_unnamed_addr #20 {
    ret void
  }
  
  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write)
  declare void @llvm.assume(i1 noundef) #21
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
  define void @set_offset(ptr nocapture %fat_ptr, ptr nocapture readonly %id_ptr) local_unnamed_addr #1 {
    %vptr = load ptr, ptr %fat_ptr, align 8
    %id.i = load i64, ptr %id_ptr, align 4
    %hash_coef_ptr.i = getelementptr i8, ptr %vptr, i64 8
    %tbl_size_ptr.i = getelementptr i8, ptr %vptr, i64 16
    %offset_tbl_ptr.i = getelementptr i8, ptr %vptr, i64 40
    %hash_coef.i = load i64, ptr %hash_coef_ptr.i, align 4
    %tbl_size.i = load i64, ptr %tbl_size_ptr.i, align 4
    %offset_tbl.i = load ptr, ptr %offset_tbl_ptr.i, align 8
    %product.i.i = mul i64 %hash_coef.i, %id.i
    %shifted.i.i = lshr i64 %product.i.i, 32
    %xored.i.i = xor i64 %shifted.i.i, %product.i.i
    %hash.i.i = and i64 %xored.i.i, %tbl_size.i
    %offset_ptr.i = getelementptr i32, ptr %offset_tbl.i, i64 %hash.i.i
    %offset.i = load i32, ptr %offset_ptr.i, align 4
    %destination = getelementptr i8, ptr %fat_ptr, i64 24
    store i32 %offset.i, ptr %destination, align 4
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
  define i1 @subtype_test(i64 %tbl_size, i64 %hash_coef, i64 %cand_id, i64 %candidate, ptr nocapture readonly %supertype_tbl) #22 {
    %product.i = mul i64 %cand_id, %hash_coef
    %shifted.i = lshr i64 %product.i, 32
    %xored.i = xor i64 %shifted.i, %product.i
    %hash.i = and i64 %xored.i, %tbl_size
    %gep = getelementptr i64, ptr %supertype_tbl, i64 %hash.i
    %stored_val = load i64, ptr %gep, align 4
    %eq = icmp eq i64 %stored_val, %candidate
    ret i1 %eq
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
  define i1 @subtype_test_wrapper(ptr nocapture readonly %f, i64 %tbl_size, i64 %hash_coef, i64 %cand_id, i64 %candidate, ptr readonly %supertype_tbl) local_unnamed_addr #22 {
    %result = tail call i1 %f(i64 %tbl_size, i64 %hash_coef, i64 %cand_id, i64 %candidate, ptr %supertype_tbl) #0
    ret i1 %result
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
  define void @arg_buffer_filler(ptr nocapture readnone %coroutine) local_unnamed_addr #4 {
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: none, inaccessiblemem: none)
  define ptr @get_current_coroutine() local_unnamed_addr #17 {
    %current_coroutine = load ptr, ptr @current_coroutine, align 8
    ret ptr %current_coroutine
  }
  
  ; Function Attrs: noinline nounwind memory(readwrite)
  define preserve_nonecc void @context_switch(ptr nocapture writeonly %from_buf, ptr %to_buf) #23 {
    %from_buf_second_word = getelementptr i8, ptr %from_buf, i64 8
    %from_buf_third_word = getelementptr i8, ptr %from_buf, i64 16
    store ptr blockaddress(@context_switch, %return_from_switch), ptr %from_buf_second_word, align 8
    %sp = tail call ptr @llvm.stacksave.p0() #29
    store ptr %sp, ptr %from_buf, align 8
    store ptr %sp, ptr %from_buf_third_word, align 8
    %retval.i = load i1, ptr @always_one, align 1
    br i1 %retval.i, label %do_switch, label %return_from_switch
  
  do_switch:                                        ; preds = %0
    tail call void @llvm.eh.sjlj.longjmp(ptr %to_buf) #19
    unreachable
  
  return_from_switch:                               ; preds = %0
    ret void
  }
  
  ; Function Attrs: nounwind
  define void @coroutine_yield(ptr nocapture writeonly %current_coroutine) local_unnamed_addr #24 {
    %into_callee_buf = getelementptr i8, ptr %current_coroutine, i64 8
    tail call preserve_nonecc void @context_switch(ptr nocapture writeonly %into_callee_buf, ptr nonnull @into_caller_buf) #27
    ret void
  }
  
  ; Function Attrs: nounwind
  define void @coroutine_call(ptr %coroutine) local_unnamed_addr #24 {
    %old_into_caller.unpack = load ptr, ptr @into_caller_buf, align 16
    %old_into_caller.unpack1 = load ptr, ptr getelementptr inbounds (i8, ptr @into_caller_buf, i64 8), align 8
    %old_into_caller.unpack2 = load ptr, ptr getelementptr inbounds (i8, ptr @into_caller_buf, i64 16), align 16
    %old_coroutine = load ptr, ptr @current_coroutine, align 8
    store ptr %coroutine, ptr @current_coroutine, align 8
    %into_callee_buf = getelementptr i8, ptr %coroutine, i64 8
    tail call preserve_nonecc void @context_switch(ptr nocapture nonnull writeonly @into_caller_buf, ptr %into_callee_buf) #27
    store ptr %old_coroutine, ptr @current_coroutine, align 8
    store ptr %old_into_caller.unpack, ptr @into_caller_buf, align 16
    store ptr %old_into_caller.unpack1, ptr getelementptr inbounds (i8, ptr @into_caller_buf, i64 8), align 8
    store ptr %old_into_caller.unpack2, ptr getelementptr inbounds (i8, ptr @into_caller_buf, i64 16), align 16
    ret void
  }
  
  ; Function Attrs: nofree nounwind
  declare noundef i32 @puts(ptr nocapture noundef readonly) local_unnamed_addr #10
  
  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
  declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #2
  
  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
  declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #2
  
  ; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
  declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #25
  
  attributes #0 = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read) }
  attributes #1 = { mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none) }
  attributes #2 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
  attributes #3 = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write) }
  attributes #4 = { mustprogress nofree norecurse nosync nounwind willreturn memory(none) }
  attributes #5 = { mustprogress nofree norecurse nosync nounwind willreturn memory(readwrite, argmem: read, inaccessiblemem: none) }
  attributes #6 = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: readwrite) }
  attributes #7 = { mustprogress willreturn memory(read, argmem: readwrite, inaccessiblemem: none) }
  attributes #8 = { mustprogress nofree norecurse nosync nounwind willreturn memory(readwrite, argmem: none, inaccessiblemem: none) }
  attributes #9 = { mustprogress nofree norecurse nosync nounwind willreturn memory(read, inaccessiblemem: none) }
  attributes #10 = { nofree nounwind }
  attributes #11 = { nocallback nofree nosync nounwind willreturn memory(argmem: read) }
  attributes #12 = { mustprogress nofree norecurse nosync nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(readwrite, argmem: none, inaccessiblemem: none) "alloc-family"="malloc" }
  attributes #13 = { mustprogress nofree noinline norecurse nosync nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(argmem: readwrite) "alloc-family"="malloc" }
  attributes #14 = { mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite) }
  attributes #15 = { mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(1) "alloc-family"="malloc" }
  attributes #16 = { noinline }
  attributes #17 = { mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: none, inaccessiblemem: none) }
  attributes #18 = { nocallback nofree nosync nounwind willreturn }
  attributes #19 = { noreturn nounwind }
  attributes #20 = { mustprogress nofree norecurse nosync nounwind willreturn memory(read, inaccessiblemem: write) }
  attributes #21 = { nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write) }
  attributes #22 = { mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read) }
  attributes #23 = { noinline nounwind memory(readwrite) }
  attributes #24 = { nounwind }
  attributes #25 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
  attributes #26 = { mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) "alloc-family"="malloc" }
  attributes #27 = { nounwind memory(readwrite) }
  attributes #28 = { mustprogress nofree nosync nounwind willreturn memory(argmem: read) }
  attributes #29 = { mustprogress nofree nosync nounwind willreturn }
  
  !llvm.module.flags = !{!0}
  
  !0 = !{i32 2, !"Debug Info Version", i32 3}

...
---
name:            Pair_field_Pair_0
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg :: (load (s64) from %ir.2)
    RET 0, $rax

...
---
name:            Pair_field_Pair_1
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 24, $noreg :: (load (s64) from %ir.2)
    RET 0, $rax

...
---
name:            Pair_B_init_firstT_secondU
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 112, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            Pair_B_first_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 120, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            Pair_B_second_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 128, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            Pair_init_firstT_secondU
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    16
  adjustsStack:    true
  hasCalls:        true
  hasTailCall:     true
fixedStack:
  - { id: 0, offset: 80, size: 8, alignment: 16 }
  - { id: 1, offset: 72, size: 8, alignment: 8 }
  - { id: 2, offset: 64, size: 8, alignment: 16 }
  - { id: 3, offset: 56, size: 8, alignment: 8 }
  - { id: 4, offset: 48, size: 8, alignment: 16 }
  - { id: 5, offset: 40, size: 8, alignment: 8 }
  - { id: 6, offset: 32, size: 8, alignment: 16 }
  - { id: 7, offset: 24, size: 8, alignment: 8 }
  - { id: 8, offset: 16, size: 8, alignment: 16 }
  - { id: 9, offset: 8, size: 4, alignment: 8 }
  - { id: 10, size: 8, alignment: 16 }
stack:
  - { id: 0, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.5):
    liveins: $rdi, $rsi
  
    renamable $rbx = COPY $rsi
    renamable $r12 = COPY $rdi
    renamable $rax = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.2, align 16)
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.0)
    renamable $r15 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.1)
    renamable $r13 = MOV64rm %fixed-stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.3)
    renamable $rdx = MOV64rm %fixed-stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.6, align 16)
    renamable $rcx = MOV64rm %fixed-stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.5)
    renamable $rsi = MOV64rm %fixed-stack.7, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.7)
    renamable $rax = MOV64rm $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rdi = MOV64ri 9197944775169318296
    renamable $rdi = IMUL64rm killed renamable $rdi, renamable $r12, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $r8 = COPY renamable $rdi
    renamable $r8 = SHR64ri killed renamable $r8, 32, implicit-def dead $eflags
    renamable $r8 = XOR64rr killed renamable $r8, killed renamable $rdi, implicit-def dead $eflags
    renamable $r8 = AND64rm killed renamable $r8, renamable $r12, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $rbp = MOVSX64rm32 killed renamable $rax, 4, killed renamable $r8, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm renamable $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i10)
    renamable $r14 = MOV64ri 3084208142191802847
    renamable $rdi = MOV64rm renamable $rsi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i8, align 4)
    renamable $rdi = IMUL64rr killed renamable $rdi, renamable $r14, implicit-def dead $eflags
    renamable $r8 = COPY renamable $rdi
    renamable $r8 = SHR64ri killed renamable $r8, 32, implicit-def dead $eflags
    renamable $r8 = XOR64rr killed renamable $r8, killed renamable $rdi, implicit-def dead $eflags
    renamable $r8 = AND64rm killed renamable $r8, renamable $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i9, align 4)
    renamable $r8d = MOV32rm killed renamable $rax, 4, killed renamable $r8, 0, $noreg, implicit-def $r8 :: (load (s32) from %ir.offset_ptr.i.i18)
    renamable $rax = MOV64rm renamable $r12, 8, renamable $rbp, 0, $noreg :: (load (s64) from %ir.8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    CALL64m killed renamable $rax, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.10)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm renamable $r13, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i38)
    renamable $r14 = IMUL64rm killed renamable $r14, renamable $r13, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i36, align 4)
    renamable $rcx = COPY renamable $r14
    renamable $rcx = SHR64ri killed renamable $rcx, 32, implicit-def dead $eflags
    renamable $rcx = XOR64rr killed renamable $rcx, killed renamable $r14, implicit-def dead $eflags
    renamable $rcx = AND64rm killed renamable $rcx, renamable $r13, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i37, align 4)
    renamable $r8d = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg, implicit-def $r8 :: (load (s32) from %ir.offset_ptr.i.i46)
    renamable $rax = MOV64rm killed renamable $r12, 8, killed renamable $rbp, 8, $noreg :: (load (s64) from %ir.15)
    renamable $rax = MOV64rm killed renamable $rax, 1, $noreg, 8, $noreg :: (load (s64) from %ir.17)
    $rdi = COPY killed renamable $rbx
    $rsi = COPY killed renamable $r13
    $rdx = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %stack.0)
    $rcx = COPY killed renamable $r15
    TCRETURNri64 killed renamable $rax, 0, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8

...
---
name:            Pair_first_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
frameInfo:
  maxAlignment:    16
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 24, size: 8, alignment: 8, isImmutable: true }
  - { id: 1, offset: 16, size: 4, alignment: 16, isImmutable: true }
  - { id: 2, offset: 8, size: 8, alignment: 8, isImmutable: true }
  - { id: 3, size: 8, alignment: 16, isImmutable: true }
stack:
  - { id: 0, size: 48, alignment: 16 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.3):
    liveins: $rdi, $rdx, $rsi
  
    renamable $rbx = COPY $rdi
    renamable $rax = MOV64rm renamable $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri 9197944775169318296
    renamable $rcx = IMUL64rm killed renamable $rcx, renamable $rsi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdi = COPY renamable $rcx
    renamable $rdi = SHR64ri killed renamable $rdi, 32, implicit-def dead $eflags
    renamable $rdi = XOR64rr killed renamable $rdi, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdi = AND64rm killed renamable $rdi, renamable $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $rax = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdi, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm killed renamable $rsi, 8, killed renamable $rax, 0, $noreg :: (load (s64) from %ir.6)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $rsi = COPY killed renamable $rdx
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.7)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm %stack.0, 1, $noreg, 24, $noreg :: (load (s64) from %stack.0 + 24, basealign 16)
    renamable $ecx = MOV32rm %stack.0, 1, $noreg, 32, $noreg :: (load (s32) from %stack.0 + 32, align 16)
    renamable $rdx = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %stack.0, align 16)
    renamable $rsi = MOV64rm %stack.0, 1, $noreg, 16, $noreg :: (load (s64) from %stack.0 + 16, align 16)
    MOV64mr renamable $rbx, 1, $noreg, 0, $noreg, killed renamable $rdx :: (store (s64), align 16)
    MOV32mr renamable $rbx, 1, $noreg, 32, $noreg, killed renamable $ecx :: (store (s32) into unknown-address + 16, align 16)
    MOV64mr renamable $rbx, 1, $noreg, 16, $noreg, killed renamable $rsi :: (store (s64), align 16)
    MOV64mr renamable $rbx, 1, $noreg, 24, $noreg, killed renamable $rax :: (store (s64) into unknown-address + 8, basealign 16)
    $rax = COPY killed renamable $rbx
    RET 0, $rax

...
---
name:            Pair_second_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
frameInfo:
  maxAlignment:    16
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 24, size: 8, alignment: 8, isImmutable: true }
  - { id: 1, offset: 16, size: 4, alignment: 16, isImmutable: true }
  - { id: 2, offset: 8, size: 8, alignment: 8, isImmutable: true }
  - { id: 3, size: 8, alignment: 16, isImmutable: true }
stack:
  - { id: 0, size: 48, alignment: 16 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.3):
    liveins: $rdi, $rdx, $rsi
  
    renamable $rbx = COPY $rdi
    renamable $rax = MOV64rm renamable $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri 9197944775169318296
    renamable $rcx = IMUL64rm killed renamable $rcx, renamable $rsi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdi = COPY renamable $rcx
    renamable $rdi = SHR64ri killed renamable $rdi, 32, implicit-def dead $eflags
    renamable $rdi = XOR64rr killed renamable $rdi, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdi = AND64rm killed renamable $rdi, renamable $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $rax = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdi, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm killed renamable $rsi, 8, killed renamable $rax, 8, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $rsi = COPY killed renamable $rdx
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.8)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm %stack.0, 1, $noreg, 24, $noreg :: (load (s64) from %stack.0 + 24, basealign 16)
    renamable $ecx = MOV32rm %stack.0, 1, $noreg, 32, $noreg :: (load (s32) from %stack.0 + 32, align 16)
    renamable $rdx = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %stack.0, align 16)
    renamable $rsi = MOV64rm %stack.0, 1, $noreg, 16, $noreg :: (load (s64) from %stack.0 + 16, align 16)
    MOV64mr renamable $rbx, 1, $noreg, 0, $noreg, killed renamable $rdx :: (store (s64), align 16)
    MOV32mr renamable $rbx, 1, $noreg, 32, $noreg, killed renamable $ecx :: (store (s32) into unknown-address + 16, align 16)
    MOV64mr renamable $rbx, 1, $noreg, 16, $noreg, killed renamable $rsi :: (store (s64), align 16)
    MOV64mr renamable $rbx, 1, $noreg, 24, $noreg, killed renamable $rax :: (store (s64) into unknown-address + 8, basealign 16)
    $rax = COPY killed renamable $rbx
    RET 0, $rax

...
---
name:            Pair_getter_second
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi, $rsi
  
    renamable $rax = COPY $rdi
    renamable $ecx = MOV32rm renamable $rsi, 1, $noreg, 56, $noreg :: (load (s32) from %ir.5 + 16)
    renamable $rdx = MOV64rm renamable $rsi, 1, $noreg, 32, $noreg :: (load (s64) from %ir.2)
    renamable $rdi = MOV64rm renamable $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.5, align 4)
    renamable $rsi = MOV64rm killed renamable $rsi, 1, $noreg, 48, $noreg :: (load (s64) from %ir.5 + 8, align 4)
    MOV64mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $rsi :: (store (s64) into unknown-address + 8, basealign 16)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rdi :: (store (s64), align 16)
    MOV32mr renamable $rax, 1, $noreg, 32, $noreg, killed renamable $ecx :: (store (s32) into unknown-address + 16, align 16)
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rdx :: (store (s64), align 16)
    RET 0, $rax

...
---
name:            Pair_setter_second
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
  - { reg: '$rcx' }
  - { reg: '$r8' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rcx, $rdi, $rdx, $rsi, $r8
  
    MOV64mr renamable $rdi, 1, $noreg, 32, $noreg, killed renamable $rsi :: (store (s64) into %ir.3)
    MOV64mr renamable $rdi, 1, $noreg, 48, $noreg, killed renamable $rcx :: (store (s64) into %ir.4 + 8, align 4)
    MOV64mr renamable $rdi, 1, $noreg, 40, $noreg, killed renamable $rdx :: (store (s64) into %ir.4, align 4)
    MOV32mr killed renamable $rdi, 1, $noreg, 56, $noreg, renamable $r8d, implicit killed $r8 :: (store (s32) into %ir.4 + 16)
    RET 0

...
---
name:            Pair_getter_first
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi, $rsi
  
    renamable $rax = COPY $rdi
    renamable $ecx = MOV32rm renamable $rsi, 1, $noreg, 24, $noreg :: (load (s32) from %ir.4 + 16)
    renamable $rdx = MOV64rm renamable $rsi, 1, $noreg, 0, $noreg :: (load (s64) from %ir.0)
    renamable $rdi = MOV64rm renamable $rsi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.4, align 4)
    renamable $rsi = MOV64rm killed renamable $rsi, 1, $noreg, 16, $noreg :: (load (s64) from %ir.4 + 8, align 4)
    MOV64mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $rsi :: (store (s64) into unknown-address + 8, basealign 16)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rdi :: (store (s64), align 16)
    MOV32mr renamable $rax, 1, $noreg, 32, $noreg, killed renamable $ecx :: (store (s32) into unknown-address + 16, align 16)
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rdx :: (store (s64), align 16)
    RET 0, $rax

...
---
name:            Pair_setter_first
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
  - { reg: '$rcx' }
  - { reg: '$r8' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rcx, $rdi, $rdx, $rsi, $r8
  
    MOV64mr renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $rsi :: (store (s64) into %ir.0)
    MOV64mr renamable $rdi, 1, $noreg, 16, $noreg, killed renamable $rcx :: (store (s64) into %ir.3 + 8, align 4)
    MOV64mr renamable $rdi, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64) into %ir.3, align 4)
    MOV32mr killed renamable $rdi, 1, $noreg, 24, $noreg, renamable $r8d, implicit killed $r8 :: (store (s32) into %ir.3 + 16)
    RET 0

...
---
name:            FancyPair_field_FancyPair_0
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_parameterization_Tuple_Ptrf64._Ptrf64._Ptrf64._Ptrf64_, $noreg :: (load (s64) from got)
    RET 0, $rax

...
---
name:            FancyPair_field_FancyPair_1
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_parameterization_Ptrf64, $noreg :: (load (s64) from got)
    RET 0, $rax

...
---
name:            FancyPair_B_init_firstTuple_Ptrf64._Ptrf64._Ptrf64._Ptrf64__secondPtrf64
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 112, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            FancyPair_B_first_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 120, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            FancyPair_B_second_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 128, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            FancyPair_init_firstTuple_Ptrf64._Ptrf64._Ptrf64._Ptrf64__secondPtrf64
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    16
  adjustsStack:    true
  hasCalls:        true
  hasTailCall:     true
fixedStack:
  - { id: 0, offset: 80, size: 8, alignment: 16 }
  - { id: 1, offset: 72, size: 8, alignment: 8 }
  - { id: 2, offset: 64, size: 8, alignment: 16 }
  - { id: 3, offset: 56, size: 8, alignment: 8 }
  - { id: 4, offset: 48, size: 8, alignment: 16 }
  - { id: 5, offset: 40, size: 8, alignment: 8 }
  - { id: 6, offset: 32, size: 8, alignment: 16 }
  - { id: 7, offset: 24, size: 8, alignment: 8 }
  - { id: 8, offset: 16, size: 8, alignment: 16 }
  - { id: 9, offset: 8, size: 4, alignment: 8 }
  - { id: 10, size: 8, alignment: 16 }
stack:
  - { id: 0, type: spill-slot, size: 8, alignment: 8 }
  - { id: 1, type: spill-slot, size: 8, alignment: 8 }
  - { id: 2, type: spill-slot, size: 8, alignment: 8 }
  - { id: 3, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.5):
    liveins: $rdi, $rsi
  
    renamable $rbx = COPY $rsi
    renamable $r15 = COPY $rdi
    renamable $r14 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.2, align 16)
    renamable $rax = MOV64rm %fixed-stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.6, align 16)
    renamable $rcx = MOV64rm $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rdx = MOV64ri -3765382636606614851
    renamable $rdx = IMUL64rm killed renamable $rdx, $rdi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rsi = COPY renamable $rdx
    renamable $rsi = SHR64ri killed renamable $rsi, 32, implicit-def dead $eflags
    renamable $rsi = XOR64rr killed renamable $rsi, killed renamable $rdx, implicit-def dead $eflags
    renamable $rsi = AND64rm killed renamable $rsi, $rdi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $r12 = MOVSX64rm32 killed renamable $rcx, 4, killed renamable $rsi, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $xmm0 = MOVSDrm_alt renamable $rax, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    MOVSDmr %stack.0, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %stack.0)
    renamable $xmm0 = MOVSDrm_alt renamable $rax, 1, $noreg, 8, $noreg :: (load (s64) from %ir.8)
    MOVSDmr %stack.1, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %stack.1)
    renamable $xmm0 = MOVSDrm_alt renamable $rax, 1, $noreg, 16, $noreg :: (load (s64) from %ir.10)
    MOVSDmr %stack.2, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %stack.2)
    renamable $xmm0 = MOVSDrm_alt killed renamable $rax, 1, $noreg, 24, $noreg :: (load (s64) from %ir.12)
    MOVSDmr %stack.3, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %stack.3)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $rsi = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    $rdi = MOV32ri64 32
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $xmm0 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %stack.0)
    MOVSDmr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.result.i)
    renamable $xmm0 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %stack.1)
    MOVSDmr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.14)
    renamable $xmm0 = MOVSDrm_alt %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %stack.2)
    MOVSDmr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.15)
    renamable $xmm0 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %stack.3)
    MOVSDmr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.16)
    renamable $r9 = MOV64rm renamable $r15, 8, renamable $r12, 0, $noreg :: (load (s64) from %ir.20)
    renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @tuple_typ, $noreg :: (load (s64) from got)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $r8 = MOV32ri64 7
    $rdi = COPY renamable $rbx
    $rdx = COPY killed renamable $rax
    dead $ecx = MOV32r0 implicit-def dead $eflags, implicit-def $rcx
    CALL64m killed renamable $r9, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.22)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm killed renamable $r15, 8, killed renamable $r12, 8, $noreg :: (load (s64) from %ir.27)
    renamable $rax = MOV64rm killed renamable $rax, 1, $noreg, 8, $noreg :: (load (s64) from %ir.29)
    renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @f64_typ, $noreg :: (load (s64) from got)
    $r8 = MOV32ri64 7
    $rdi = COPY killed renamable $rbx
    $rdx = COPY killed renamable $r14
    dead $ecx = MOV32r0 implicit-def dead $eflags, implicit-def $rcx
    TCRETURNri64 killed renamable $rax, 0, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8

...
---
name:            FancyPair_second_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
frameInfo:
  maxAlignment:    16
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 24, size: 8, alignment: 8, isImmutable: true }
  - { id: 1, offset: 16, size: 4, alignment: 16, isImmutable: true }
  - { id: 2, offset: 8, size: 8, alignment: 8, isImmutable: true }
  - { id: 3, size: 8, alignment: 16, isImmutable: true }
stack:
  - { id: 0, size: 48, alignment: 16 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.3):
    liveins: $rdi, $rdx, $rsi
  
    renamable $rbx = COPY $rdi
    renamable $rax = MOV64rm renamable $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri -3765382636606614851
    renamable $rcx = IMUL64rm killed renamable $rcx, renamable $rsi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdi = COPY renamable $rcx
    renamable $rdi = SHR64ri killed renamable $rdi, 32, implicit-def dead $eflags
    renamable $rdi = XOR64rr killed renamable $rdi, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdi = AND64rm killed renamable $rdi, renamable $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $rax = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdi, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm killed renamable $rsi, 8, killed renamable $rax, 8, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $rsi = COPY killed renamable $rdx
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.8)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm %stack.0, 1, $noreg, 16, $noreg :: (load (s64) from %stack.0 + 16, align 16)
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @f64_typ, $noreg :: (load (s64) from got)
    MOV64mr renamable $rbx, 1, $noreg, 16, $noreg, killed renamable $rax :: (store (s64), align 16)
    MOV64mr renamable $rbx, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64), align 16)
    MOV64mi32 renamable $rbx, 1, $noreg, 24, $noreg, 0 :: (store (s64) into unknown-address + 8, basealign 16)
    MOV32mi renamable $rbx, 1, $noreg, 32, $noreg, 7 :: (store (s32) into unknown-address + 16, align 16)
    $rax = COPY killed renamable $rbx
    RET 0, $rax

...
---
name:            FancyPair_getter_second
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi, $rsi
  
    renamable $rax = COPY $rdi
    renamable $rcx = MOV64rm killed renamable $rsi, 1, $noreg, 32, $noreg :: (load (s64) from %ir.2)
    renamable $rdx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @f64_typ, $noreg :: (load (s64) from got)
    MOV64mr $rdi, 1, $noreg, 16, $noreg, killed renamable $rcx :: (store (s64), align 16)
    MOV64mr $rdi, 1, $noreg, 0, $noreg, killed renamable $rdx :: (store (s64), align 16)
    MOV64mi32 $rdi, 1, $noreg, 24, $noreg, 0 :: (store (s64) into unknown-address + 8, basealign 16)
    MOV32mi $rdi, 1, $noreg, 32, $noreg, 7 :: (store (s32) into unknown-address + 16, align 16)
    RET 0, $rax

...
---
name:            FancyPair_setter_second
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rdx' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi, $rdx
  
    MOV64mr killed renamable $rdi, 1, $noreg, 32, $noreg, killed renamable $rdx :: (store (s64) into %ir.3)
    RET 0

...
---
name:            FancyPair_getter_first
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    1
  adjustsStack:    true
  hasCalls:        true
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi, $rsi
  
    renamable $rbx = COPY $rsi
    renamable $r14 = COPY $rdi
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $rsi = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    $rdi = MOV32ri64 32
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $xmm0 = MOVSDrm_alt renamable $rbx, 1, $noreg, 0, $noreg :: (load (s64) from %ir.0)
    MOVSDmr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.result.i)
    renamable $xmm0 = MOVSDrm_alt renamable $rbx, 1, $noreg, 8, $noreg :: (load (s64) from %ir.3)
    MOVSDmr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
    renamable $xmm0 = MOVSDrm_alt renamable $rbx, 1, $noreg, 16, $noreg :: (load (s64) from %ir.6)
    MOVSDmr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
    renamable $xmm0 = MOVSDrm_alt killed renamable $rbx, 1, $noreg, 24, $noreg :: (load (s64) from %ir.9)
    MOVSDmr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.10)
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @tuple_typ, $noreg :: (load (s64) from got)
    MOV64mr renamable $r14, 1, $noreg, 16, $noreg, killed renamable $rax :: (store (s64), align 16)
    MOV64mr renamable $r14, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64), align 16)
    MOV64mi32 renamable $r14, 1, $noreg, 24, $noreg, 0 :: (store (s64) into unknown-address + 8, basealign 16)
    MOV32mi renamable $r14, 1, $noreg, 32, $noreg, 7 :: (store (s32) into unknown-address + 16, align 16)
    $rax = COPY killed renamable $r14
    RET 0, $rax

...
---
name:            FancyPair_setter_first
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rdx' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi, $rdx
  
    renamable $xmm0 = MOVSDrm_alt renamable $rdx, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    renamable $xmm1 = MOVSDrm_alt renamable $rdx, 1, $noreg, 8, $noreg :: (load (s64) from %ir.5)
    renamable $xmm2 = MOVSDrm_alt renamable $rdx, 1, $noreg, 16, $noreg :: (load (s64) from %ir.7)
    renamable $xmm3 = MOVSDrm_alt killed renamable $rdx, 1, $noreg, 24, $noreg :: (load (s64) from %ir.9)
    MOVSDmr renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.0)
    MOVSDmr renamable $rdi, 1, $noreg, 8, $noreg, killed renamable $xmm1 :: (store (s64) into %ir.11)
    MOVSDmr renamable $rdi, 1, $noreg, 16, $noreg, killed renamable $xmm2 :: (store (s64) into %ir.12)
    MOVSDmr killed renamable $rdi, 1, $noreg, 24, $noreg, killed renamable $xmm3 :: (store (s64) into %ir.13)
    RET 0

...
---
name:            Array_field_Array_0
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 24, $noreg :: (load (s64) from %ir.2)
    RET 0, $rax

...
---
name:            Array_B__Self_from_iterable_iterableIterable2T
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @Array__Self_from_iterable_iterableIterable2T, $noreg :: (load (s64) from got)
    RET 0, $rax

...
---
name:            Array_B_init_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 264, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            Array_B_init_capacityPtri32
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 272, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            Array_B_length_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 280, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            Array_B_capacity_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 288, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            Array_B_append_xT
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 296, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            Array_B_grow_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 304, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            Array_B__index_xPtri32
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 312, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            Array_B_throw_oob_xPtri32
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 320, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            Array_B_unsafe_index_xPtri32
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 328, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            Array_B_iterator_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 336, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            Array_B_each_fFunctionT_to_Nothing
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 344, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            Array_B_reduce_accumulatorT_fFunctionT._T_to_T
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 352, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            Array_B_all_fFunctionT_to_Ptri1
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 360, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            Array_B_any_fFunctionT_to_Ptri1
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 368, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            Array_B_map_fFunctionT_to_U
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 376, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            Array_B_filter_fFunctionT_to_Ptri1
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 384, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            Array_B_chain_otherIterable2T
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 392, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            Array_B_interleave_otherIterable2T
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 400, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            Array_B_zip_otherIterable2U
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 408, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            Array_B_product_otherIterable2U
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 416, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            Array__Self_from_iterable_iterableIterable2T
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rdx' }
  - { reg: '$rcx' }
  - { reg: '$r8' }
frameInfo:
  maxAlignment:    16
  adjustsStack:    true
  hasCalls:        true
stack:
  - { id: 0, size: 1, alignment: 8 }
  - { id: 1, size: 32, alignment: 8 }
  - { id: 2, size: 48, alignment: 16 }
  - { id: 3, size: 48, alignment: 16 }
  - { id: 4, type: spill-slot, size: 8, alignment: 8 }
  - { id: 5, type: spill-slot, size: 8, alignment: 8 }
  - { id: 6, type: spill-slot, size: 8, alignment: 8 }
  - { id: 7, type: spill-slot, size: 8, alignment: 8 }
  - { id: 8, type: spill-slot, size: 8, alignment: 8 }
  - { id: 9, type: spill-slot, size: 8, alignment: 8 }
  - { id: 10, type: spill-slot, size: 8, alignment: 8 }
  - { id: 11, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    successors: %bb.1, %bb.8
    liveins: $rcx, $rdi, $rdx, $r8
  
    renamable $r15 = COPY $r8
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, $rcx :: (store (s64) into %stack.4)
    renamable $r13 = COPY $rdx
    MOV64mr %stack.11, 1, $noreg, 0, $noreg, $rdi :: (store (s64) into %stack.11)
    renamable $rax = MOV64rm $rdx, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri 5693646204635713916
    renamable $rcx = IMUL64rm killed renamable $rcx, $rdx, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, renamable $r13, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $rbp = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $r12 = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    $rdi = MOV32ri64 8
    $rsi = COPY renamable $r12
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = COPY $rax
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @any_typ, $noreg :: (load (s64) from got)
    MOV64mr renamable $rbx, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.result.i)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 24
    $rsi = COPY renamable $r12
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r14 = COPY $rax
    MOV64mr $rax, 1, $noreg, 16, $noreg, killed renamable $rbx :: (store (s64) into %ir.4)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 32
    $rsi = COPY killed renamable $r12
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r12 = COPY $rax
    MOV64mr renamable $r14, 1, $noreg, 0, $noreg, $rax :: (store (s64) into %ir.result.i25)
    renamable $rax = MOV64ri 4294967296
    MOV64mr renamable $r14, 1, $noreg, 8, $noreg, killed renamable $rax :: (store (s64) into %ir.6, align 4)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r8 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $r13
    renamable $rbx = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %stack.4)
    $rsi = COPY renamable $rbx
    $rdx = COPY renamable $r15
    $ecx = COPY renamable $ebp
    CALL64m renamable $r13, 8, renamable $rbp, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.17)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.1, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r13
    $rdx = COPY renamable $rbx
    $rcx = COPY renamable $r15
    $r8d = COPY renamable $ebp
    $r9 = COPY killed renamable $r13
    renamable $r10 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    PUSH64r killed renamable $r10, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    renamable $rbp = COPY killed renamable $r14
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r15, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = MOV64rm %stack.1, 1, $noreg, 16, $noreg :: (load (s64) from %stack.1 + 16)
    renamable $r14 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %stack.1)
    renamable $r15 = MOV64rm %stack.1, 1, $noreg, 8, $noreg :: (load (s64) from %stack.1 + 8)
    renamable $rax = MOV64rm renamable $r14, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i43)
    renamable $rcx = MOV64ri 4189192806087951739
    renamable $rcx = IMUL64rm killed renamable $rcx, renamable $r14, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i41, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, renamable $r14, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i42, align 4)
    renamable $r13 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i51)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r14
    $rsi = COPY renamable $r15
    $rdx = COPY renamable $rbx
    $ecx = COPY renamable $r13d
    renamable $r8 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    CALL64m renamable $r14, 8, renamable $r13, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.29)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.2, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r14
    $rdx = COPY renamable $r15
    $rcx = COPY renamable $rbx
    $r8d = COPY renamable $r13d
    MOV64mr %stack.6, 1, $noreg, 0, $noreg, renamable $r14 :: (store (s64) into %stack.6)
    $r9 = COPY killed renamable $r14
    renamable $r10 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    PUSH64r killed renamable $r10, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    MOV64mr %stack.7, 1, $noreg, 0, $noreg, renamable $r13 :: (store (s64) into %stack.7)
    PUSH64r killed renamable $r13, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    MOV64mr %stack.5, 1, $noreg, 0, $noreg, renamable $rbx :: (store (s64) into %stack.5)
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, renamable $r15 :: (store (s64) into %stack.4)
    PUSH64r killed renamable $r15, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r14 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %stack.2, align 16)
    CMP64rm renamable $r14, $rip, 1, $noreg, target-flags(x86-gotpcrel) @nil_typ, $noreg, implicit-def $eflags :: (load (s64) from got)
    renamable $al = SETCCr 4, implicit killed $eflags
    TEST64rr renamable $r14, renamable $r14, implicit-def $eflags
    renamable $cl = SETCCr 4, implicit killed $eflags
    dead renamable $cl = OR8rr killed renamable $cl, killed renamable $al, implicit-def $eflags
    JCC_1 %bb.8, 5, implicit killed $eflags
    JMP_1 %bb.1
  
  bb.1.._crit_edge.preheader:
    liveins: $rbp, $r12, $r14
  
    renamable $rdi = MOV64rm %stack.2, 1, $noreg, 24, $noreg :: (load (s64) from %stack.2 + 24, basealign 16)
    renamable $r8 = MOV64rm %stack.2, 1, $noreg, 16, $noreg :: (load (s64) from %stack.2 + 16, align 16)
    renamable $ebx = MOV32r0 implicit-def dead $eflags
    renamable $r13 = MOV64ri 3084208142191802847
    MOV64mr %stack.8, 1, $noreg, 0, $noreg, renamable $rbp :: (store (s64) into %stack.8)
  
  bb.2.._crit_edge:
    liveins: $ebx, $rbp, $rdi, $r8, $r12, $r13, $r14
  
    renamable $eax = MOV32rm renamable $rbp, 1, $noreg, 12, $noreg :: (load (s32) from %ir.sunkaddr)
    CMP32rr renamable $ebx, renamable $eax, implicit-def $eflags
    JCC_1 %bb.6, 12, implicit killed $eflags
    JMP_1 %bb.3
  
  bb.3 (%ir-block.38):
    successors: %bb.4(0x50000000), %bb.9(0x30000000)
    liveins: $eax, $ebx, $rbp, $rdi, $r8, $r13, $r14
  
    MOV64mr %stack.10, 1, $noreg, 0, $noreg, killed renamable $r8 :: (store (s64) into %stack.10)
    MOV64mr %stack.9, 1, $noreg, 0, $noreg, killed renamable $rdi :: (store (s64) into %stack.9)
    renamable $eax = ADD32rr killed renamable $eax, renamable $eax, implicit-def dead $eflags
    MOV32mr renamable $rbp, 1, $noreg, 12, $noreg, renamable $eax :: (store (s32) into %ir.sunkaddr6)
    renamable $r15 = COPY renamable $rbp
    renamable $rbp = MOV64rm $rbp, 1, $noreg, 0, $noreg :: (load (s64) from %ir.result.i25)
    renamable $rdi = MOVSX64rr32 killed renamable $eax
    renamable $rdi = nsw SHL64ri killed renamable $rdi, 5, implicit-def dead $eflags
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $rsi = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r12 = COPY $rax
    renamable $r11 = COPY renamable $r15
    MOV64mr killed renamable $r15, 1, $noreg, 0, $noreg, $rax :: (store (s64) into %ir.result.i25)
    TEST32rr renamable $ebx, renamable $ebx, implicit-def $eflags
    JCC_1 %bb.4, 15, implicit killed $eflags
  
  bb.9:
    liveins: $ebx, $r11, $r12, $r13, $r14
  
    renamable $rbp = COPY killed renamable $r11
    renamable $rdi = MOV64rm %stack.9, 1, $noreg, 0, $noreg :: (load (s64) from %stack.9)
    renamable $r8 = MOV64rm %stack.10, 1, $noreg, 0, $noreg :: (load (s64) from %stack.10)
    JMP_1 %bb.6
  
  bb.4..lr.ph:
    liveins: $ebx, $rbp, $r11, $r12, $r13, $r14
  
    renamable $eax = MOV32r0 implicit-def dead $eflags
    renamable $rcx = MOV32ri64 8
  
  bb.5.._crit_edge.i:
    successors: %bb.5(0x7c000000), %bb.10(0x04000000)
    liveins: $eax, $ebx, $rbp, $rcx, $r11, $r12, $r13, $r14
  
    renamable $rdx = MOV64rm renamable $rbp, 1, renamable $rcx, 8, $noreg :: (load (s64) from %ir.scevgep3 + 8, align 4)
    renamable $rsi = MOV64rm renamable $rbp, 1, renamable $rcx, -8, $noreg :: (load (s64) from %ir.scevgep5)
    renamable $rdi = MOV64rm renamable $rbp, 1, renamable $rcx, 0, $noreg :: (load (s64) from %ir.scevgep3, align 4)
    renamable $r8 = MOV64rm renamable $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i293)
    renamable $r9 = MOV64rm renamable $rsi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i291, align 4)
    renamable $r9 = IMUL64rr killed renamable $r9, renamable $r13, implicit-def dead $eflags
    renamable $r10 = COPY renamable $r9
    renamable $r10 = SHR64ri killed renamable $r10, 32, implicit-def dead $eflags
    renamable $r10 = XOR64rr killed renamable $r10, killed renamable $r9, implicit-def dead $eflags
    renamable $r10 = AND64rm killed renamable $r10, renamable $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i292, align 4)
    renamable $r8d = MOV32rm killed renamable $r8, 4, killed renamable $r10, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i301)
    MOV64mr renamable $r12, 1, renamable $rcx, -8, $noreg, killed renamable $rsi :: (store (s64) into %ir.scevgep2)
    MOV32mr renamable $r12, 1, renamable $rcx, 16, $noreg, killed renamable $r8d :: (store (s32) into %ir.scevgep + 16)
    MOV64mr renamable $r12, 1, renamable $rcx, 0, $noreg, killed renamable $rdi :: (store (s64) into %ir.scevgep, align 4)
    MOV64mr renamable $r12, 1, renamable $rcx, 8, $noreg, killed renamable $rdx :: (store (s64) into %ir.scevgep + 8, align 4)
    renamable $eax = nuw nsw INC32r killed renamable $eax, implicit-def dead $eflags
    renamable $rcx = nuw nsw ADD64ri32 killed renamable $rcx, 32, implicit-def dead $eflags
    CMP32rr renamable $eax, renamable $ebx, implicit-def $eflags
    JCC_1 %bb.5, 12, implicit killed $eflags
  
  bb.10:
    liveins: $ebx, $r11, $r12, $r13, $r14
  
    renamable $rbp = COPY killed renamable $r11
    renamable $rdi = MOV64rm %stack.9, 1, $noreg, 0, $noreg :: (load (s64) from %stack.9)
    renamable $r8 = MOV64rm %stack.10, 1, $noreg, 0, $noreg :: (load (s64) from %stack.10)
  
  bb.6.Array_append_xT.exit:
    successors: %bb.7(0x7e000000), %bb.8(0x02000000)
    liveins: $ebx, $rbp, $rdi, $r8, $r12, $r13, $r14
  
    renamable $rax = MOVSX64rr32 killed renamable $ebx
    renamable $rax = nsw SHL64ri killed renamable $rax, 5, implicit-def dead $eflags
    renamable $rcx = MOV64rm renamable $r14, 1, $noreg, 40, $noreg :: (load (s64) from %ir.sunkaddr9)
    renamable $rdx = MOV64rm renamable $r14, 1, $noreg, 8, $noreg :: (load (s64) from %ir.sunkaddr7, align 4)
    renamable $rdx = IMUL64rr killed renamable $rdx, killed renamable $r13, implicit-def dead $eflags
    renamable $rsi = COPY renamable $rdx
    renamable $rsi = SHR64ri killed renamable $rsi, 32, implicit-def dead $eflags
    renamable $rsi = XOR64rr killed renamable $rsi, killed renamable $rdx, implicit-def dead $eflags
    renamable $rsi = AND64rm killed renamable $rsi, renamable $r14, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.sunkaddr8, align 4)
    renamable $ecx = MOV32rm killed renamable $rcx, 4, killed renamable $rsi, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i221)
    MOV64mr renamable $r12, 1, renamable $rax, 0, $noreg, killed renamable $r14 :: (store (s64) into %ir.51)
    MOV64mr renamable $r12, 1, renamable $rax, 16, $noreg, killed renamable $rdi :: (store (s64) into %ir.52 + 8, align 4)
    MOV64mr renamable $r12, 1, renamable $rax, 8, $noreg, killed renamable $r8 :: (store (s64) into %ir.52, align 4)
    MOV32mr renamable $r12, 1, killed renamable $rax, 24, $noreg, killed renamable $ecx :: (store (s32) into %ir.52 + 16)
    renamable $ebx = MOV32rm renamable $rbp, 1, $noreg, 8, $noreg :: (load (s32) from %ir.sunkaddr10)
    renamable $ebx = INC32r killed renamable $ebx, implicit-def dead $eflags
    MOV32mr killed renamable $rbp, 1, $noreg, 8, $noreg, renamable $ebx :: (store (s32) into %ir.sunkaddr10)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r15 = MOV64rm %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %stack.6)
    $rdi = COPY renamable $r15
    $rsi = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %stack.4)
    renamable $rbp = MOV64rm %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %stack.5)
    $rdx = COPY renamable $rbp
    renamable $r13 = MOV64rm %stack.7, 1, $noreg, 0, $noreg :: (load (s64) from %stack.7)
    $ecx = COPY renamable $r13d
    renamable $r14 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $r8 = COPY renamable $r14
    CALL64m renamable $r15, 8, renamable $r13, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.sunkaddr13)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.3, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r15
    renamable $rdx = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %stack.4)
    $rcx = COPY renamable $rbp
    $r8d = COPY renamable $r13d
    $r9 = COPY killed renamable $r15
    PUSH64r killed renamable $r14, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r13, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    renamable $r13 = MOV64ri 3084208142191802847
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r renamable $rdx, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    renamable $rbp = MOV64rm %stack.8, 1, $noreg, 0, $noreg :: (load (s64) from %stack.8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r14 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %stack.3, align 16)
    CMP64rm renamable $r14, $rip, 1, $noreg, target-flags(x86-gotpcrel) @nil_typ, $noreg, implicit-def $eflags :: (load (s64) from got)
    JCC_1 %bb.8, 4, implicit killed $eflags
    JMP_1 %bb.7
  
  bb.7.Array_append_xT.exit:
    successors: %bb.2(0x7df7df7e), %bb.8(0x02082082)
    liveins: $ebx, $rbp, $r12, $r13, $r14
  
    renamable $rdi = MOV64rm %stack.3, 1, $noreg, 24, $noreg :: (load (s64) from %stack.3 + 24, basealign 16)
    renamable $r8 = MOV64rm %stack.3, 1, $noreg, 16, $noreg :: (load (s64) from %stack.3 + 16, align 16)
    TEST64rr renamable $r14, renamable $r14, implicit-def $eflags
    JCC_1 %bb.2, 5, implicit killed $eflags
    JMP_1 %bb.8
  
  bb.8..critedge:
    liveins: $rbp
  
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @Array, $noreg :: (load (s64) from got, align 16)
    renamable $rax = MOV64rm %stack.11, 1, $noreg, 0, $noreg :: (load (s64) from %stack.11)
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $rbp :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64))
    MOV32mi renamable $rax, 1, $noreg, 24, $noreg, 7 :: (store (s32), align 8)
    RET 0, $rax

...
---
name:            Array_init_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
  hasTailCall:     true
fixedStack:
  - { id: 0, offset: 16, size: 8, alignment: 16 }
  - { id: 1, offset: 8, size: 4, alignment: 8 }
  - { id: 2, size: 8, alignment: 16 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.3):
    liveins: $rdi, $rsi
  
    renamable $rbx = COPY $rsi
    renamable $r14 = COPY $rdi
    renamable $rax = MOV64rm $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri -5261542750394134544
    renamable $rcx = IMUL64rm killed renamable $rcx, $rdi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, $rdi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $r15 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $rsi = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    $rdi = MOV32ri64 32
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = MOV64rm renamable $r14, 8, renamable $r15, 0, $noreg :: (load (s64) from %ir.6)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    $rsi = COPY killed renamable $rax
    CALL64m killed renamable $rcx, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.8)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r15, 8, $noreg :: (load (s64) from %ir.12)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    $esi = MOV32r0 implicit-def dead $eflags
    CALL64m killed renamable $rax, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.14)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm killed renamable $r14, 8, killed renamable $r15, 16, $noreg :: (load (s64) from %ir.17)
    renamable $rax = MOV64rm killed renamable $rax, 1, $noreg, 8, $noreg :: (load (s64) from %ir.19)
    $rdi = COPY killed renamable $rbx
    $esi = MOV32ri 1
    TCRETURNri64 killed renamable $rax, 0, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi

...
---
name:            Array_init_capacityPtri32
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
  hasTailCall:     true
fixedStack:
  - { id: 0, offset: 24, size: 4, alignment: 8 }
  - { id: 1, offset: 16, size: 8, alignment: 16 }
  - { id: 2, offset: 8, size: 4, alignment: 8 }
  - { id: 3, size: 8, alignment: 16 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.4):
    liveins: $rdi, $rsi
  
    renamable $rbx = COPY $rsi
    renamable $r14 = COPY $rdi
    renamable $esi = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %fixed-stack.0, align 8)
    renamable $rax = MOV64rm $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri -5261542750394134544
    renamable $rcx = IMUL64rm killed renamable $rcx, $rdi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, $rdi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $r15 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm $rdi, 8, renamable $r15, 16, $noreg :: (load (s64) from %ir.8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    CALL64m killed renamable $rax, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.10)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r15, 16, $noreg :: (load (s64) from %ir.8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.13)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = MOVSX64rr32 killed renamable $eax
    renamable $rdi = nsw SHL64ri killed renamable $rdi, 5, implicit-def dead $eflags
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $rsi = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = MOV64rm renamable $r14, 8, renamable $r15, 0, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    $rsi = COPY killed renamable $rax
    CALL64m killed renamable $rcx, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.19)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm killed renamable $r14, 8, killed renamable $r15, 8, $noreg :: (load (s64) from %ir.23)
    renamable $rax = MOV64rm killed renamable $rax, 1, $noreg, 8, $noreg :: (load (s64) from %ir.25)
    $rdi = COPY killed renamable $rbx
    $esi = MOV32r0 implicit-def dead $eflags
    TCRETURNri64 killed renamable $rax, 0, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi

...
---
name:            Array_length_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    8
  hasTailCall:     true
fixedStack:
  - { id: 0, offset: 16, size: 8, alignment: 16 }
  - { id: 1, offset: 8, size: 4, alignment: 8 }
  - { id: 2, size: 8, alignment: 16 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.3):
    liveins: $rdi, $rsi
  
    renamable $rax = MOV64rm renamable $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri -5261542750394134544
    renamable $rcx = IMUL64rm killed renamable $rcx, renamable $rdi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, renamable $rdi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $rax = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm killed renamable $rdi, 8, killed renamable $rax, 8, $noreg :: (load (s64) from %ir.7)
    $rdi = COPY killed renamable $rsi
    TCRETURNmi64 killed renamable $rax, 1, $noreg, 0, $noreg, 0, csr_64, implicit $rsp, implicit $ssp, implicit $rdi :: (load (s64) from %ir.8)

...
---
name:            Array_capacity_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    8
  hasTailCall:     true
fixedStack:
  - { id: 0, offset: 16, size: 8, alignment: 16 }
  - { id: 1, offset: 8, size: 4, alignment: 8 }
  - { id: 2, size: 8, alignment: 16 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.3):
    liveins: $rdi, $rsi
  
    renamable $rax = MOV64rm renamable $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri -5261542750394134544
    renamable $rcx = IMUL64rm killed renamable $rcx, renamable $rdi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, renamable $rdi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $rax = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm killed renamable $rdi, 8, killed renamable $rax, 16, $noreg :: (load (s64) from %ir.7)
    $rdi = COPY killed renamable $rsi
    TCRETURNmi64 killed renamable $rax, 1, $noreg, 0, $noreg, 0, csr_64, implicit $rsp, implicit $ssp, implicit $rdi :: (load (s64) from %ir.8)

...
---
name:            Array_append_xT
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
  - { reg: '$rcx' }
frameInfo:
  maxAlignment:    16
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 64, size: 8, alignment: 16, isImmutable: true }
  - { id: 1, offset: 56, size: 8, alignment: 8, isImmutable: true }
  - { id: 2, offset: 48, size: 8, alignment: 16, isImmutable: true }
  - { id: 3, offset: 32, size: 8, alignment: 16, isImmutable: true }
  - { id: 4, offset: 24, size: 8, alignment: 8, isImmutable: true }
  - { id: 5, offset: 16, size: 4, alignment: 16, isImmutable: true }
  - { id: 6, offset: 8, size: 8, alignment: 8, isImmutable: true }
  - { id: 7, size: 8, alignment: 16, isImmutable: true }
stack:
  - { id: 0, size: 1, alignment: 8 }
  - { id: 1, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.4):
    liveins: $rcx, $rdi, $rdx, $rsi
  
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, $rcx :: (store (s64) into %stack.1)
    renamable $r15 = COPY $rdx
    renamable $r14 = COPY $rsi
    renamable $rbx = COPY $rdi
    renamable $r12 = MOV64ri -5261542750394134544
    renamable $rax = MOV64rm $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64rm $rsi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rcx = IMUL64rr killed renamable $rcx, renamable $r12, implicit-def dead $eflags
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $r13 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm $rsi, 8, renamable $r13, 8, $noreg :: (load (s64) from %ir.9)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.10)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $ebp = COPY $eax
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r13, 16, $noreg :: (load (s64) from %ir.14)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.15)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    CMP32rr killed renamable $ebp, killed renamable $eax, implicit-def $eflags
    JCC_1 %bb.2, 12, implicit killed $eflags
    JMP_1 %bb.1
  
  bb.1 (%ir-block.18):
    liveins: $rbx, $r12, $r13, $r14, $r15
  
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    CALL64m renamable $r14, 8, renamable $r13, 24, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.sunkaddr2)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r8 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $r14
    $rsi = COPY renamable $r15
    renamable $rbp = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %stack.1)
    $rdx = COPY renamable $rbp
    $ecx = COPY renamable $r13d
    CALL64m renamable $r14, 8, renamable $r13, 80, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.sunkaddr5)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r14
    $rsi = COPY renamable $r15
    $rdx = COPY renamable $rbp
    $ecx = COPY renamable $r13d
    $r8 = COPY renamable $r14
    $r9 = COPY renamable $r15
    renamable $r10 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    PUSH64r killed renamable $r10, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r renamable $r13, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  
  bb.2.._crit_edge:
    liveins: $rbx, $r12, $r13, $r14, $r15
  
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r13, 0, $noreg :: (load (s64) from %ir.sunkaddr7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.29)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbp = COPY $rax
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r13, 8, $noreg :: (load (s64) from %ir.sunkaddr10)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.33)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOVSX64rr32 killed renamable $eax
    renamable $rax = nsw SHL64ri killed renamable $rax, 5, implicit-def dead $eflags
    renamable $rdi = MOV64rm %fixed-stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.3, align 16)
    renamable $rcx = MOV64rm renamable $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i10)
    renamable $rdx = MOV64ri 3084208142191802847
    renamable $rdx = IMUL64rm killed renamable $rdx, renamable $rdi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i8, align 4)
    renamable $rsi = COPY renamable $rdx
    renamable $rsi = SHR64ri killed renamable $rsi, 32, implicit-def dead $eflags
    renamable $rsi = XOR64rr killed renamable $rsi, killed renamable $rdx, implicit-def dead $eflags
    renamable $rsi = AND64rm killed renamable $rsi, renamable $rdi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i9, align 4)
    renamable $ecx = MOV32rm killed renamable $rcx, 4, killed renamable $rsi, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i32)
    MOV64mr renamable $rbp, 1, renamable $rax, 0, $noreg, killed renamable $rdi :: (store (s64) into %ir.37)
    renamable $rdx = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.1)
    MOV64mr renamable $rbp, 1, renamable $rax, 16, $noreg, killed renamable $rdx :: (store (s64) into %ir.38 + 8, align 4)
    renamable $rdx = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.2, align 16)
    MOV64mr renamable $rbp, 1, renamable $rax, 8, $noreg, killed renamable $rdx :: (store (s64) into %ir.38, align 4)
    MOV32mr killed renamable $rbp, 1, killed renamable $rax, 24, $noreg, killed renamable $ecx :: (store (s32) into %ir.38 + 16)
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r13, 8, $noreg :: (load (s64) from %ir.sunkaddr10)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.40)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $eax = KILL $eax, implicit-def $rax
    renamable $esi = LEA64_32r killed renamable $rax, 1, $noreg, 1, $noreg
    renamable $rax = MOV64rm renamable $r14, 8, killed renamable $r13, 8, $noreg :: (load (s64) from %ir.sunkaddr10)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.46)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm renamable $r14, 1, $noreg, 40, $noreg :: (load (s64) from %ir.sunkaddr13)
    renamable $r12 = IMUL64rm killed renamable $r12, renamable $r14, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.sunkaddr11, align 4)
    renamable $rcx = COPY renamable $r12
    renamable $rcx = SHR64ri killed renamable $rcx, 32, implicit-def dead $eflags
    renamable $rcx = XOR64rr killed renamable $rcx, killed renamable $r12, implicit-def dead $eflags
    renamable $rcx = AND64rm killed renamable $rcx, renamable $r14, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.sunkaddr12, align 4)
    renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i46)
    renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %stack.1)
    MOV64mr renamable $rbx, 1, $noreg, 16, $noreg, killed renamable $rcx :: (store (s64))
    MOV64mr renamable $rbx, 1, $noreg, 8, $noreg, killed renamable $r15 :: (store (s64))
    MOV64mr renamable $rbx, 1, $noreg, 0, $noreg, killed renamable $r14 :: (store (s64))
    MOV32mr renamable $rbx, 1, $noreg, 24, $noreg, killed renamable $eax :: (store (s32), align 8)
    $rax = COPY killed renamable $rbx
    RET 0, $rax

...
---
name:            Array_grow_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 16, size: 8, alignment: 16, isImmutable: true }
  - { id: 1, offset: 8, size: 4, alignment: 8, isImmutable: true }
  - { id: 2, size: 8, alignment: 16, isImmutable: true }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.3):
    successors: %bb.1(0x50000000), %bb.3(0x30000000)
    liveins: $rdi, $rsi
  
    renamable $rbx = COPY $rsi
    renamable $r14 = COPY $rdi
    renamable $rax = MOV64rm $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri -5261542750394134544
    renamable $rcx = IMUL64rm killed renamable $rcx, $rdi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, $rdi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $r12 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm $rdi, 8, renamable $r12, 16, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY $rsi
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.8)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $eax = KILL $eax, implicit-def $rax
    renamable $esi = LEA64_32r killed renamable $rax, 1, renamable $rax, 0, $noreg
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r12, 16, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    CALL64m killed renamable $rax, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.14)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r12, 0, $noreg :: (load (s64) from %ir.6)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.17)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r15 = COPY $rax
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r12, 16, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.21)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = MOVSX64rr32 killed renamable $eax
    renamable $rdi = nsw SHL64ri killed renamable $rdi, 5, implicit-def dead $eflags
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $rsi = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = MOV64rm renamable $r14, 8, renamable $r12, 0, $noreg :: (load (s64) from %ir.6)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    $rsi = COPY killed renamable $rax
    CALL64m killed renamable $rcx, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.27)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r12, 8, $noreg :: (load (s64) from %ir.31)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.32)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    TEST32rr killed renamable $eax, renamable $eax, implicit-def $eflags
    JCC_1 %bb.3, 14, implicit killed $eflags
    JMP_1 %bb.1
  
  bb.1..lr.ph:
    liveins: $rbx, $r12, $r14, $r15
  
    renamable $ebp = MOV32r0 implicit-def dead $eflags
    renamable $r13 = MOV32ri64 8
  
  bb.2.._crit_edge:
    successors: %bb.2(0x7c000000), %bb.3(0x04000000)
    liveins: $ebp, $rbx, $r12, $r13, $r14, $r15
  
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r12, 0, $noreg :: (load (s64) from %ir.sunkaddr6)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.37)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = MOV64rm renamable $r15, 1, renamable $r13, 8, $noreg :: (load (s64) from %ir.scevgep3 + 8, align 4)
    renamable $rdx = MOV64rm renamable $r15, 1, renamable $r13, -8, $noreg :: (load (s64) from %ir.scevgep5)
    renamable $rsi = MOV64rm renamable $r15, 1, renamable $r13, 0, $noreg :: (load (s64) from %ir.scevgep3, align 4)
    renamable $rdi = MOV64rm renamable $rdx, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i15)
    renamable $r8 = MOV64rm renamable $rdx, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i13, align 4)
    renamable $r9 = MOV64ri 3084208142191802847
    renamable $r8 = IMUL64rr killed renamable $r8, killed renamable $r9, implicit-def dead $eflags
    renamable $r9 = COPY renamable $r8
    renamable $r9 = SHR64ri killed renamable $r9, 32, implicit-def dead $eflags
    renamable $r9 = XOR64rr killed renamable $r9, killed renamable $r8, implicit-def dead $eflags
    renamable $r9 = AND64rm killed renamable $r9, renamable $rdx, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i14, align 4)
    renamable $edi = MOV32rm killed renamable $rdi, 4, killed renamable $r9, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i23)
    MOV64mr renamable $rax, 1, renamable $r13, -8, $noreg, killed renamable $rdx :: (store (s64) into %ir.scevgep2)
    MOV32mr renamable $rax, 1, renamable $r13, 16, $noreg, killed renamable $edi :: (store (s32) into %ir.scevgep + 16)
    MOV64mr renamable $rax, 1, renamable $r13, 0, $noreg, killed renamable $rsi :: (store (s64) into %ir.scevgep, align 4)
    MOV64mr killed renamable $rax, 1, renamable $r13, 8, $noreg, killed renamable $rcx :: (store (s64) into %ir.scevgep + 8, align 4)
    renamable $ebp = nuw nsw INC32r killed renamable $ebp, implicit-def dead $eflags
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r12, 8, $noreg :: (load (s64) from %ir.sunkaddr9)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.43)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r13 = nuw nsw ADD64ri32 killed renamable $r13, 32, implicit-def dead $eflags
    CMP32rr renamable $ebp, killed renamable $eax, implicit-def $eflags
    JCC_1 %bb.2, 12, implicit killed $eflags
    JMP_1 %bb.3
  
  bb.3.._crit_edge._crit_edge:
    RET 0

...
---
name:            Array__index_xPtri32
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
  - { reg: '$rcx' }
frameInfo:
  maxAlignment:    16
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 32, size: 4, alignment: 16, isImmutable: true }
  - { id: 1, offset: 24, size: 8, alignment: 8, isImmutable: true }
  - { id: 2, offset: 16, size: 4, alignment: 16, isImmutable: true }
  - { id: 3, offset: 8, size: 8, alignment: 8, isImmutable: true }
  - { id: 4, size: 8, alignment: 16, isImmutable: true }
stack:
  - { id: 0, size: 8, alignment: 8 }
  - { id: 1, size: 8, alignment: 8 }
  - { id: 2, size: 8, alignment: 8 }
  - { id: 3, size: 8, alignment: 8 }
  - { id: 4, size: 48, alignment: 16 }
  - { id: 5, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.4):
    successors: %bb.2(0x20000000), %bb.1(0x60000000)
    liveins: $rcx, $rdi, $rdx, $rsi
  
    renamable $r15 = COPY $rcx
    renamable $r14 = COPY $rdx
    renamable $r12 = COPY $rsi
    MOV64mr %stack.5, 1, $noreg, 0, $noreg, $rdi :: (store (s64) into %stack.5)
    renamable $ebx = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg, implicit-def $rbx :: (load (s32) from %fixed-stack.0, align 16)
    renamable $rax = MOV64rm $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri -5261542750394134544
    renamable $rcx = IMUL64rm killed renamable $rcx, $rsi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $r13 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm $rsi, 8, renamable $r13, 8, $noreg :: (load (s64) from %ir.8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r14
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.9)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $ebp = COPY $eax
    renamable $ebp = DEC32r killed renamable $ebp, implicit-def dead $eflags
    renamable $rax = MOV64rm renamable $r12, 8, renamable $r13, 8, $noreg :: (load (s64) from %ir.8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r14
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.15)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    CMP32rr renamable $ebx, killed renamable $ebp, implicit-def $eflags
    JCC_1 %bb.2, 15, implicit killed $eflags
    JMP_1 %bb.1
  
  bb.1 (%ir-block.4):
    successors: %bb.2(0x2aaaaaab), %bb.3(0x55555555)
    liveins: $eax, $rbx, $r12, $r13, $r14, $r15
  
    dead renamable $eax = ADD32rr killed renamable $eax, renamable $ebx, implicit-def $eflags
    JCC_1 %bb.3, 9, implicit killed $eflags
    JMP_1 %bb.2
  
  bb.2 (%ir-block.25):
    liveins: $rbx, $r12, $r13, $r14, $r15
  
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r14
    CALL64m renamable $r12, 8, renamable $r13, 24, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.sunkaddr2)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_parameterization_Ptri32, $noreg :: (load (s64) from got)
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.21)
    renamable $rax = MOV64rm renamable $r12, 8, renamable $r13, 96, $noreg :: (load (s64) from %ir.sunkaddr5)
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @i32_typ, $noreg :: (load (s64) from got)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.22)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r8 = LEA64r %stack.1, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $r12
    $rsi = COPY renamable $r14
    $rdx = COPY renamable $r15
    $ecx = COPY renamable $r13d
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r10 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $r12
    $rsi = COPY renamable $r14
    $rdx = COPY renamable $r15
    $ecx = COPY renamable $r13d
    $r8 = COPY renamable $r12
    $r9 = COPY renamable $r14
    PUSH64r renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r10, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r renamable $r13, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r renamable $r15, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  
  bb.3.._crit_edge:
    successors: %bb.4(0x30000000), %bb.6(0x50000000)
    liveins: $rbx, $r12, $r13, $r14, $r15
  
    TEST32rr renamable $ebx, renamable $ebx, implicit-def $eflags
    JCC_1 %bb.4, 8, implicit killed $eflags
  
  bb.6:
    liveins: $rbx, $r12, $r13, $r14, $r15
  
    JMP_1 %bb.5
  
  bb.4 (%ir-block.39):
    liveins: $rbx, $r12, $r13, $r14, $r15
  
    renamable $rax = MOV64rm renamable $r12, 8, renamable $r13, 8, $noreg :: (load (s64) from %ir.sunkaddr8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r14
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.41)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $eax = ADD32rr killed renamable $eax, renamable $ebx, implicit-def dead $eflags, implicit killed $rbx
    renamable $ebx = COPY killed renamable $eax, implicit-def $rbx
  
  bb.5 (%ir-block.45):
    liveins: $rbx, $r12, $r13, $r14, $r15
  
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r14
    CALL64m renamable $r12, 8, renamable $r13, 24, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.sunkaddr11)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_parameterization_Ptri32, $noreg :: (load (s64) from got)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.23)
    renamable $rax = MOV64rm renamable $r12, 8, renamable $r13, 104, $noreg :: (load (s64) from %ir.sunkaddr14)
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @i32_typ, $noreg :: (load (s64) from got)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.24)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r8 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $r12
    $rsi = COPY renamable $r14
    $rdx = COPY renamable $r15
    $ecx = COPY renamable $r13d
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 40, 0, 40, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r10 = LEA64r %stack.2, 1, $noreg, 0, $noreg
    renamable $rdi = LEA64r %stack.4, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r12
    $rdx = COPY renamable $r14
    $rcx = COPY renamable $r15
    $r8d = COPY renamable $r13d
    $r9 = COPY killed renamable $r12
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 32)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r10, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r13, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r15, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r14, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 40, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r9 = MOV64rm %stack.4, 1, $noreg, 24, $noreg :: (load (s64) from %stack.4 + 24, basealign 16)
    renamable $rcx = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %stack.4, align 16)
    renamable $rdx = MOV64rm %stack.4, 1, $noreg, 16, $noreg :: (load (s64) from %stack.4 + 16, align 16)
    renamable $rsi = MOV64rm renamable $rcx, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i8)
    renamable $rdi = MOV64ri 3084208142191802847
    renamable $rdi = IMUL64rm killed renamable $rdi, renamable $rcx, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i6, align 4)
    renamable $r8 = COPY renamable $rdi
    renamable $r8 = SHR64ri killed renamable $r8, 32, implicit-def dead $eflags
    renamable $r8 = XOR64rr killed renamable $r8, killed renamable $rdi, implicit-def dead $eflags
    renamable $r8 = AND64rm killed renamable $r8, renamable $rcx, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i7, align 4)
    renamable $esi = MOV32rm killed renamable $rsi, 4, killed renamable $r8, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i16)
    renamable $rax = MOV64rm %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %stack.5)
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64), align 16)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rdx :: (store (s64), align 16)
    MOV64mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $r9 :: (store (s64) into unknown-address + 8, basealign 16)
    MOV32mr renamable $rax, 1, $noreg, 32, $noreg, killed renamable $esi :: (store (s32) into unknown-address + 16, align 16)
    RET 0, $rax

...
---
name:            Array_throw_oob_xPtri32
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 24, size: 4, alignment: 8, isImmutable: true }
  - { id: 1, offset: 16, size: 8, alignment: 16, isImmutable: true }
  - { id: 2, offset: 8, size: 4, alignment: 8, isImmutable: true }
  - { id: 3, size: 8, alignment: 16, isImmutable: true }
stack:
  - { id: 0, size: 32, alignment: 8 }
  - { id: 1, type: spill-slot, size: 8, alignment: 8 }
  - { id: 2, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.4):
    liveins: $rdi, $rsi
  
    renamable $rbp = COPY $rsi
    renamable $r14 = COPY $rdi
    renamable $rax = MOV64rm $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri -5261542750394134544
    renamable $rcx = IMUL64rm killed renamable $rcx, $rdi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, $rdi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $r13 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, renamable $r13 :: (store (s64) into %stack.2)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, renamable $rax :: (store (s64) into %stack.1)
    renamable $r12 = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    $rdi = MOV32ri64 72
    $rsi = COPY renamable $r12
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r15 = COPY $rax
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @Exception, $noreg :: (load (s64) from got, align 16)
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.5)
    MOV64mr %stack.0, 1, $noreg, 8, $noreg, renamable $r15 :: (store (s64) into %ir.6)
    MOV32mi %stack.0, 1, $noreg, 24, $noreg, 7 :: (store (s32) into %ir.7, align 8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbp
    CALL64m renamable $r14, 8, killed renamable $r13, 24, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.12)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    MOV32mi renamable $r15, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.result.i)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 7
    $rsi = COPY renamable $r12
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r13 = COPY $rax
    MOV16mi $rax, 1, $noreg, 4, $noreg, 15973 :: (store (s16) into %ir.result.i.i + 4, align 4)
    MOV32mi $rax, 1, $noreg, 0, $noreg, 1852788284 :: (store (s32) into %ir.result.i.i)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 16
    $rsi = COPY renamable $r12
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $r13 :: (store (s64) into %ir.result.i2.i)
    renamable $rcx = MOV64ri 30064771078
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $rcx :: (store (s64) into %ir.15, align 4)
    renamable $rbx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @String, $noreg :: (load (s64) from got, align 16)
    MOV64mr renamable $r15, 1, $noreg, 40, $noreg, renamable $rbx :: (store (s64) into %ir.17)
    MOV64mr renamable $r15, 1, $noreg, 48, $noreg, killed renamable $rax :: (store (s64) into %ir.18)
    MOV32mi renamable $r15, 1, $noreg, 64, $noreg, 7 :: (store (s32) into %ir.19)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 1
    $rsi = COPY renamable $r12
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r13 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 16
    $rsi = COPY renamable $r12
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $r13 :: (store (s64) into %ir.result.i18.i)
    renamable $rcx = MOV64ri 4294967296
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $rcx :: (store (s64) into %ir.20, align 4)
    MOV64mr renamable $r15, 1, $noreg, 8, $noreg, killed renamable $rbx :: (store (s64) into %ir.24)
    MOV64mr renamable $r15, 1, $noreg, 16, $noreg, killed renamable $rax :: (store (s64) into %ir.25)
    MOV32mi renamable $r15, 1, $noreg, 32, $noreg, 7 :: (store (s32) into %ir.26)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 13
    $rsi = COPY renamable $r12
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r13 = COPY $rax
    renamable $rax = MOV64ri 3342631288487961959
    MOV64mr renamable $r13, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.result.i1, align 4)
    MOV32mi renamable $r13, 1, $noreg, 8, $noreg, 1768843629 :: (store (s32) into %ir.result.i1 + 8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 16
    $rsi = COPY killed renamable $r12
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r12 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbp
    renamable $rbx = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %stack.2)
    CALL64m renamable $r14, 8, renamable $rbx, 24, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.12)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    MOV64mr renamable $r12, 1, $noreg, 0, $noreg, killed renamable $r13 :: (store (s64) into %ir.result.i2)
    renamable $rax = MOV64ri 55834574860
    MOV64mr renamable $r12, 1, $noreg, 8, $noreg, killed renamable $rax :: (store (s64) into %ir.30, align 4)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $rbp
    CALL64m killed renamable $r14, 8, killed renamable $rbx, 24, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.12)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    MOV32mi renamable $r15, 1, $noreg, 0, $noreg, 163 :: (store (s32) into %ir.result.i)
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @String, $noreg :: (load (s64) from got, align 16)
    MOV64mr renamable $r15, 1, $noreg, 8, $noreg, killed renamable $rax :: (store (s64) into %ir.24)
    MOV64mr renamable $r15, 1, $noreg, 16, $noreg, killed renamable $r12 :: (store (s64) into %ir.25)
    MOV32mi killed renamable $r15, 1, $noreg, 32, $noreg, 7 :: (store (s32) into %ir.26)
    renamable $rax = MOV64rm %stack.0, 1, $noreg, 8, $noreg :: (dereferenceable load (s64) from %ir.6)
    renamable $rcx = MOV64rm %stack.0, 1, $noreg, 16, $noreg :: (dereferenceable load (s64) from %ir.6 + 8)
    renamable $edx = MOV32rm %stack.0, 1, $noreg, 24, $noreg :: (dereferenceable load (s32) from %ir.6 + 16, align 8)
    renamable $rsi = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %stack.1)
    renamable $r12 = MOV64rm renamable $rsi, 1, $noreg, target-flags(x86-tpoff) @current_coroutine, $noreg :: (dereferenceable load (s64) from @current_coroutine)
    MOV32mr renamable $r12, 1, $noreg, 80, $noreg, killed renamable $edx :: (store (s32) into %ir.39 + 32, align 8)
    MOV64mr renamable $r12, 1, $noreg, 64, $noreg, killed renamable $rax :: (store (s64) into %ir.39 + 16)
    MOV64mr renamable $r12, 1, $noreg, 72, $noreg, killed renamable $rcx :: (store (s64) into %ir.39 + 24)
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @Exception, $noreg :: (load (s64) from got, align 16)
    MOV64mr renamable $r12, 1, $noreg, 48, $noreg, killed renamable $rax :: (store (s64) into %ir.39)
    renamable $r12 = ADD64ri32 killed renamable $r12, 8, implicit-def dead $eflags
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r13 = LEA64r killed renamable $rsi, 1, $noreg, target-flags(x86-tpoff) @into_caller_buf, $noreg
    CALL64pcrel32 target-flags(x86-plt) @context_switch, csr_64_noneregs, implicit $rsp, implicit $ssp, implicit $r12, implicit $r13, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    RET 0

...
---
name:            Array_unsafe_index_xPtri32
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 32, size: 4, alignment: 16, isImmutable: true }
  - { id: 1, offset: 24, size: 8, alignment: 8, isImmutable: true }
  - { id: 2, offset: 16, size: 4, alignment: 16, isImmutable: true }
  - { id: 3, offset: 8, size: 8, alignment: 8, isImmutable: true }
  - { id: 4, size: 8, alignment: 16, isImmutable: true }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.4):
    liveins: $rdi, $rdx, $rsi
  
    renamable $rbx = COPY $rdi
    renamable $r14 = MOVSX64rm32 %fixed-stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %fixed-stack.0, align 16)
    renamable $rax = MOV64rm renamable $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri -5261542750394134544
    renamable $rcx = IMUL64rm killed renamable $rcx, renamable $rsi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdi = COPY renamable $rcx
    renamable $rdi = SHR64ri killed renamable $rdi, 32, implicit-def dead $eflags
    renamable $rdi = XOR64rr killed renamable $rdi, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdi = AND64rm killed renamable $rdi, renamable $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $rax = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdi, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm killed renamable $rsi, 8, killed renamable $rax, 0, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $rdx
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.8)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r14 = nsw SHL64ri killed renamable $r14, 5, implicit-def dead $eflags
    renamable $rcx = MOV64rm renamable $rax, 1, renamable $r14, 16, $noreg :: (load (s64) from %ir.14 + 8, align 4)
    renamable $rdx = MOV64rm renamable $rax, 1, renamable $r14, 0, $noreg :: (load (s64) from %ir.12)
    renamable $rax = MOV64rm killed renamable $rax, 1, killed renamable $r14, 8, $noreg :: (load (s64) from %ir.14, align 4)
    renamable $rsi = MOV64rm renamable $rdx, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i5)
    renamable $rdi = MOV64ri 3084208142191802847
    renamable $rdi = IMUL64rm killed renamable $rdi, renamable $rdx, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i3, align 4)
    renamable $r8 = COPY renamable $rdi
    renamable $r8 = SHR64ri killed renamable $r8, 32, implicit-def dead $eflags
    renamable $r8 = XOR64rr killed renamable $r8, killed renamable $rdi, implicit-def dead $eflags
    renamable $r8 = AND64rm killed renamable $r8, renamable $rdx, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i4, align 4)
    renamable $esi = MOV32rm killed renamable $rsi, 4, killed renamable $r8, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i13)
    MOV64mr renamable $rbx, 1, $noreg, 24, $noreg, killed renamable $rcx :: (store (s64) into unknown-address + 8, basealign 16)
    MOV64mr renamable $rbx, 1, $noreg, 16, $noreg, killed renamable $rax :: (store (s64), align 16)
    MOV64mr renamable $rbx, 1, $noreg, 0, $noreg, killed renamable $rdx :: (store (s64), align 16)
    MOV32mr renamable $rbx, 1, $noreg, 32, $noreg, killed renamable $esi :: (store (s32) into unknown-address + 16, align 16)
    $rax = COPY killed renamable $rbx
    RET 0, $rax

...
---
name:            Array_iterator_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
  - { reg: '$rcx' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 24, size: 8, alignment: 8, isImmutable: true }
  - { id: 1, offset: 16, size: 4, alignment: 16, isImmutable: true }
  - { id: 2, offset: 8, size: 8, alignment: 8, isImmutable: true }
  - { id: 3, size: 8, alignment: 16, isImmutable: true }
stack:
  - { id: 0, type: spill-slot, size: 8, alignment: 8 }
  - { id: 1, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.3):
    liveins: $rcx, $rdi, $rdx, $rsi
  
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, $rcx :: (store (s64) into %stack.0)
    renamable $r13 = COPY $rdx
    renamable $r12 = COPY $rsi
    renamable $rbx = COPY $rdi
    renamable $rax = MOV64rm $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $r14 = MOV64ri -5261542750394134544
    renamable $rcx = MOV64rm $rsi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rcx = IMUL64rr killed renamable $rcx, renamable $r14, implicit-def dead $eflags
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $r15 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r13
    CALL64m $rsi, 8, renamable $r15, 24, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.7)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, $rax :: (store (s64) into %stack.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $rsi = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    $rdi = MOV32ri64 48
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbp = COPY $rax
    renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %stack.1)
    MOV64mr renamable $rbp, 1, $noreg, 40, $noreg, killed renamable $rax :: (store (s64) into %ir.10)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r13
    CALL64m renamable $r12, 8, killed renamable $r15, 24, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.7)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm renamable $r12, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $r14 = IMUL64rm killed renamable $r14, renamable $r12, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rcx = COPY renamable $r14
    renamable $rcx = SHR64ri killed renamable $rcx, 32, implicit-def dead $eflags
    renamable $rcx = XOR64rr killed renamable $rcx, killed renamable $r14, implicit-def dead $eflags
    renamable $rcx = AND64rm killed renamable $rcx, renamable $r12, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i65)
    MOV64mr renamable $rbp, 1, $noreg, 0, $noreg, killed renamable $r12 :: (store (s64) into %ir.result.i)
    MOV64mr renamable $rbp, 1, $noreg, 8, $noreg, killed renamable $r13 :: (store (s64) into %ir.18)
    renamable $rcx = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %stack.0)
    MOV64mr renamable $rbp, 1, $noreg, 16, $noreg, killed renamable $rcx :: (store (s64) into %ir.19)
    MOV32mr renamable $rbp, 1, $noreg, 24, $noreg, killed renamable $eax :: (store (s32) into %ir.20)
    MOV32mi renamable $rbp, 1, $noreg, 32, $noreg, 0 :: (store (s32) into %ir.22)
    MOV64mr renamable $rbx, 1, $noreg, 8, $noreg, killed renamable $rbp :: (store (s64))
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @ArrayIterator, $noreg :: (load (s64) from got, align 16)
    MOV64mr renamable $rbx, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64))
    MOV32mi renamable $rbx, 1, $noreg, 24, $noreg, 14 :: (store (s32), align 8)
    $rax = COPY killed renamable $rbx
    RET 0, $rax

...
---
name:            Iterable2_each_fFunctionT_to_Nothing
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
frameInfo:
  maxAlignment:    16
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 24, size: 8, alignment: 8, isImmutable: true }
  - { id: 1, offset: 16, size: 8, alignment: 16, isImmutable: true }
  - { id: 2, offset: 8, size: 4, alignment: 8, isImmutable: true }
  - { id: 3, size: 8, alignment: 16, isImmutable: true }
stack:
  - { id: 0, size: 1, alignment: 8 }
  - { id: 1, size: 32, alignment: 8 }
  - { id: 2, size: 32, alignment: 8 }
  - { id: 3, size: 48, alignment: 16 }
  - { id: 4, type: spill-slot, size: 8, alignment: 8 }
  - { id: 5, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.4):
    liveins: $rdi, $rdx, $rsi
  
    renamable $rbx = COPY $rdx
    renamable $r12 = COPY $rsi
    renamable $r14 = COPY $rdi
    renamable $rax = MOV64rm $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri 5693646204635713916
    renamable $rcx = IMUL64rm killed renamable $rcx, $rdi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, $rdi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $r13 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY $rsi
    CALL64m renamable $r14, 8, renamable $r13, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.12)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r15 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $r14
    $rsi = COPY renamable $r12
    $rdx = COPY renamable $rbx
    $ecx = COPY renamable $r13d
    $r8 = COPY renamable $r15
    CALL64m renamable $r14, 8, renamable $r13, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.17)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.2, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r14
    $rdx = COPY renamable $r12
    $rcx = COPY renamable $rbx
    $r8d = COPY renamable $r13d
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, renamable $r14 :: (store (s64) into %stack.4)
    $r9 = COPY killed renamable $r14
    PUSH64r killed renamable $r15, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    MOV64mr %stack.5, 1, $noreg, 0, $noreg, renamable $r13 :: (store (s64) into %stack.5)
    PUSH64r killed renamable $r13, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    renamable $r14 = COPY renamable $r12
    PUSH64r killed renamable $r12, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = MOV64rm %stack.2, 1, $noreg, 16, $noreg :: (load (s64) from %stack.2 + 16)
    renamable $r13 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %stack.2)
    renamable $rbp = MOV64rm %stack.2, 1, $noreg, 8, $noreg :: (load (s64) from %stack.2 + 8)
    renamable $rax = MOV64rm renamable $r13, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i23)
    renamable $rcx = MOV64ri 4189192806087951739
    renamable $rcx = IMUL64rm killed renamable $rcx, renamable $r13, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i21, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, renamable $r13, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i22, align 4)
    renamable $r12d = MOV32rm killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i31)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, renamable $r13 :: (store (s64) into %ir.21)
    MOV64mr %stack.1, 1, $noreg, 8, $noreg, renamable $rbp :: (store (s64) into %ir.22)
    MOV64mr %stack.1, 1, $noreg, 16, $noreg, renamable $rbx :: (store (s64) into %ir.23)
    MOV32mr %stack.1, 1, $noreg, 24, $noreg, renamable $r12d :: (store (s32) into %ir.24, align 8)
  
  bb.1.._crit_edge1:
    successors: %bb.2(0x7e000000), %bb.4(0x02000000)
    liveins: $rbp, $rbx, $r13, $r14, $r12d
  
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r14
    renamable $rax = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %stack.4)
    renamable $rcx = MOV64rm %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %stack.5)
    CALL64m killed renamable $rax, 8, killed renamable $rcx, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.sunkaddr1)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r12 = MOVSX64rr32 killed renamable $r12d
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r13
    $rsi = COPY renamable $rbp
    $rdx = COPY renamable $rbx
    $ecx = COPY renamable $r12d
    renamable $r15 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $r8 = COPY renamable $r15
    CALL64m renamable $r13, 8, renamable $r12, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.sunkaddr4)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.3, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r13
    $rdx = COPY renamable $rbp
    $rcx = COPY renamable $rbx
    $r8d = COPY renamable $r12d
    $r9 = COPY renamable $r13
    PUSH64r killed renamable $r15, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r12, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %stack.3, align 16)
    CMP64rm renamable $rdi, $rip, 1, $noreg, target-flags(x86-gotpcrel) @nil_typ, $noreg, implicit-def $eflags :: (load (s64) from got)
    JCC_1 %bb.4, 4, implicit killed $eflags
    JMP_1 %bb.2
  
  bb.2.._crit_edge1:
    successors: %bb.3(0x7df7df7e), %bb.4(0x02082082)
    liveins: $rdi, $r13, $r14
  
    TEST64rr renamable $rdi, renamable $rdi, implicit-def $eflags
    JCC_1 %bb.4, 4, implicit killed $eflags
    JMP_1 %bb.3
  
  bb.3.._crit_edge:
    liveins: $rdi, $r13, $r14
  
    renamable $rdx = MOV64rm %stack.3, 1, $noreg, 24, $noreg :: (load (s64) from %stack.3 + 24, basealign 16)
    renamable $rsi = MOV64rm %stack.3, 1, $noreg, 16, $noreg :: (load (s64) from %stack.3 + 16, align 16)
    renamable $rax = MOV64rm renamable $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i51)
    renamable $rcx = MOV64rm renamable $rdi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i49, align 4)
    renamable $r8 = MOV64ri 3084208142191802847
    renamable $rcx = IMUL64rr killed renamable $rcx, killed renamable $r8, implicit-def dead $eflags
    renamable $r8 = COPY renamable $rcx
    renamable $r8 = SHR64ri killed renamable $r8, 32, implicit-def dead $eflags
    renamable $r8 = XOR64rr killed renamable $r8, killed renamable $rcx, implicit-def dead $eflags
    renamable $r8 = AND64rm killed renamable $r8, renamable $rdi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i50, align 4)
    renamable $ecx = MOV32rm killed renamable $rax, 4, killed renamable $r8, 0, $noreg, implicit-def $rcx :: (load (s32) from %ir.offset_ptr.i.i59)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    CALL64m %fixed-stack.0, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %fixed-stack.0)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbp = MOV64rm %stack.1, 1, $noreg, 8, $noreg :: (dereferenceable load (s64) from %ir.sunkaddr5)
    renamable $rbx = MOV64rm %stack.1, 1, $noreg, 16, $noreg :: (dereferenceable load (s64) from %ir.sunkaddr6)
    renamable $r12d = MOV32rm %stack.1, 1, $noreg, 24, $noreg :: (dereferenceable load (s32) from %ir.sunkaddr7, align 8)
    JMP_1 %bb.1
  
  bb.4..critedge:
    RET 0

...
---
name:            Iterable2_reduce_accumulatorT_fFunctionT._T_to_T
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
  - { reg: '$rcx' }
frameInfo:
  maxAlignment:    16
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 72, size: 8, alignment: 8, isImmutable: true }
  - { id: 1, offset: 64, size: 8, alignment: 16, isImmutable: true }
  - { id: 2, offset: 56, size: 8, alignment: 8, isImmutable: true }
  - { id: 3, offset: 48, size: 8, alignment: 16, isImmutable: true }
  - { id: 4, offset: 32, size: 8, alignment: 16, isImmutable: true }
  - { id: 5, offset: 24, size: 8, alignment: 8, isImmutable: true }
  - { id: 6, offset: 16, size: 4, alignment: 16, isImmutable: true }
  - { id: 7, offset: 8, size: 8, alignment: 8, isImmutable: true }
  - { id: 8, size: 8, alignment: 16, isImmutable: true }
stack:
  - { id: 0, size: 1, alignment: 8 }
  - { id: 1, size: 32, alignment: 8 }
  - { id: 2, size: 32, alignment: 8 }
  - { id: 3, size: 48, alignment: 16 }
  - { id: 4, size: 48, alignment: 16 }
  - { id: 5, type: spill-slot, size: 8, alignment: 8 }
  - { id: 6, type: spill-slot, size: 8, alignment: 8 }
  - { id: 7, type: spill-slot, size: 8, alignment: 8 }
  - { id: 8, type: spill-slot, size: 8, alignment: 8 }
  - { id: 9, type: spill-slot, size: 8, alignment: 8 }
  - { id: 10, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.5):
    liveins: $rcx, $rdi, $rdx, $rsi
  
    renamable $rbx = COPY $rcx
    renamable $r14 = COPY $rdx
    renamable $r15 = COPY $rsi
    MOV64mr %stack.10, 1, $noreg, 0, $noreg, $rdi :: (store (s64) into %stack.10)
    renamable $rax = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.2)
    MOV64mr %stack.5, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.5)
    renamable $rax = MOV64rm %fixed-stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.3, align 16)
    MOV64mr %stack.6, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.6)
    renamable $r13 = MOV64rm %fixed-stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.4, align 16)
    renamable $rax = MOV64rm $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri 5693646204635713916
    renamable $rcx = IMUL64rm killed renamable $rcx, $rsi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $r12 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r14
    CALL64m $rsi, 8, renamable $r12, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.13)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbp = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $r15
    $rsi = COPY renamable $r14
    $rdx = COPY renamable $rbx
    $ecx = COPY renamable $r12d
    $r8 = COPY renamable $rbp
    CALL64m renamable $r15, 8, renamable $r12, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.18)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.2, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r15
    $rdx = COPY renamable $r14
    $rcx = COPY renamable $rbx
    $r8d = COPY renamable $r12d
    MOV64mr %stack.8, 1, $noreg, 0, $noreg, renamable $r15 :: (store (s64) into %stack.8)
    $r9 = COPY killed renamable $r15
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    MOV64mr %stack.9, 1, $noreg, 0, $noreg, renamable $r12 :: (store (s64) into %stack.9)
    PUSH64r killed renamable $r12, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    MOV64mr %stack.7, 1, $noreg, 0, $noreg, renamable $r14 :: (store (s64) into %stack.7)
    PUSH64r killed renamable $r14, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = MOV64rm %stack.2, 1, $noreg, 16, $noreg :: (load (s64) from %stack.2 + 16)
    renamable $r14 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %stack.2)
    renamable $r15 = MOV64rm %stack.2, 1, $noreg, 8, $noreg :: (load (s64) from %stack.2 + 8)
    renamable $rax = MOV64rm renamable $r14, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i45)
    renamable $rcx = MOV64ri 4189192806087951739
    renamable $rcx = IMUL64rm killed renamable $rcx, renamable $r14, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i43, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, renamable $r14, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i44, align 4)
    renamable $r12d = MOV32rm killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i53)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, renamable $r14 :: (store (s64) into %ir.22)
    MOV64mr %stack.1, 1, $noreg, 8, $noreg, renamable $r15 :: (store (s64) into %ir.23)
    MOV64mr %stack.1, 1, $noreg, 16, $noreg, renamable $rbx :: (store (s64) into %ir.24)
    MOV32mr %stack.1, 1, $noreg, 24, $noreg, renamable $r12d :: (store (s32) into %ir.25, align 8)
  
  bb.1.._crit_edge1:
    successors: %bb.2(0x7e000000), %bb.4(0x02000000)
    liveins: $rbx, $r13, $r14, $r15, $r12d
  
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV64rm %stack.7, 1, $noreg, 0, $noreg :: (load (s64) from %stack.7)
    renamable $rax = MOV64rm %stack.8, 1, $noreg, 0, $noreg :: (load (s64) from %stack.8)
    renamable $rcx = MOV64rm %stack.9, 1, $noreg, 0, $noreg :: (load (s64) from %stack.9)
    CALL64m killed renamable $rax, 8, killed renamable $rcx, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.sunkaddr1)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r12 = MOVSX64rr32 killed renamable $r12d
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r14
    $rsi = COPY renamable $r15
    $rdx = COPY renamable $rbx
    $ecx = COPY renamable $r12d
    renamable $rbp = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $r8 = COPY renamable $rbp
    CALL64m renamable $r14, 8, renamable $r12, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.sunkaddr4)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.3, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r14
    $rdx = COPY renamable $r15
    $rcx = COPY renamable $rbx
    $r8d = COPY renamable $r12d
    $r9 = COPY renamable $r14
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r12, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r15, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r9 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %stack.3, align 16)
    CMP64rm renamable $r9, $rip, 1, $noreg, target-flags(x86-gotpcrel) @nil_typ, $noreg, implicit-def $eflags :: (load (s64) from got)
    JCC_1 %bb.4, 4, implicit killed $eflags
    JMP_1 %bb.2
  
  bb.2.._crit_edge1:
    successors: %bb.3(0x7df7df7e), %bb.4(0x02082082)
    liveins: $r9, $r13, $r14
  
    TEST64rr renamable $r9, renamable $r9, implicit-def $eflags
    JCC_1 %bb.4, 4, implicit killed $eflags
    JMP_1 %bb.3
  
  bb.3.._crit_edge:
    liveins: $r9, $r13, $r14
  
    renamable $rax = MOV64rm renamable $r9, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i73)
    renamable $rcx = MOV64rm renamable $r9, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i71, align 4)
    renamable $rsi = MOV64ri 3084208142191802847
    renamable $rcx = IMUL64rr killed renamable $rcx, renamable $rsi, implicit-def dead $eflags
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, renamable $r9, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i72, align 4)
    renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rdx, 0, $noreg, implicit-def $rax :: (load (s32) from %ir.offset_ptr.i.i81)
    renamable $rcx = MOV64rm renamable $r13, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i87)
    renamable $rdx = MOV64rm renamable $r13, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i85, align 4)
    renamable $rdx = IMUL64rr killed renamable $rdx, killed renamable $rsi, implicit-def dead $eflags
    renamable $rsi = COPY renamable $rdx
    renamable $rsi = SHR64ri killed renamable $rsi, 32, implicit-def dead $eflags
    renamable $rsi = XOR64rr killed renamable $rsi, killed renamable $rdx, implicit-def dead $eflags
    renamable $rsi = AND64rm killed renamable $rsi, renamable $r13, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i86, align 4)
    renamable $r8d = MOV32rm killed renamable $rcx, 4, killed renamable $rsi, 0, $noreg, implicit-def $r8 :: (load (s32) from %ir.offset_ptr.i.i95)
    ADJCALLSTACKDOWN64 32, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.4, 1, $noreg, 0, $noreg
    $rsi = COPY killed renamable $r13
    $rdx = MOV64rm %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %stack.6)
    $rcx = MOV64rm %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %stack.5)
    PUSH64r killed renamable $rax, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64rmm %stack.3, 1, $noreg, 24, $noreg, implicit-def $rsp, implicit $rsp :: (load (s64) from %stack.3 + 24, basealign 16), (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64rmm %stack.3, 1, $noreg, 16, $noreg, implicit-def $rsp, implicit $rsp :: (load (s64) from %stack.3 + 16, align 16), (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64m %fixed-stack.0, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8, implicit $r9, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %fixed-stack.0)
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm %stack.4, 1, $noreg, 24, $noreg :: (load (s64) from %stack.4 + 24, basealign 16)
    MOV64mr %stack.5, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.5)
    renamable $r13 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %stack.4, align 16)
    renamable $rax = MOV64rm %stack.4, 1, $noreg, 16, $noreg :: (load (s64) from %stack.4 + 16, align 16)
    MOV64mr %stack.6, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.6)
    renamable $r15 = MOV64rm %stack.1, 1, $noreg, 8, $noreg :: (dereferenceable load (s64) from %ir.sunkaddr5)
    renamable $rbx = MOV64rm %stack.1, 1, $noreg, 16, $noreg :: (dereferenceable load (s64) from %ir.sunkaddr6)
    renamable $r12d = MOV32rm %stack.1, 1, $noreg, 24, $noreg :: (dereferenceable load (s32) from %ir.sunkaddr7, align 8)
    JMP_1 %bb.1
  
  bb.4..critedge:
    liveins: $r13
  
    renamable $rax = MOV64rm renamable $r13, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i143)
    renamable $rdx = MOV64ri 3084208142191802847
    renamable $rdx = IMUL64rm killed renamable $rdx, renamable $r13, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i141, align 4)
    renamable $rcx = COPY renamable $rdx
    renamable $rcx = SHR64ri killed renamable $rcx, 32, implicit-def dead $eflags
    renamable $rcx = XOR64rr killed renamable $rcx, killed renamable $rdx, implicit-def dead $eflags
    renamable $rcx = AND64rm killed renamable $rcx, renamable $r13, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i142, align 4)
    renamable $ecx = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i151)
    renamable $rax = MOV64rm %stack.10, 1, $noreg, 0, $noreg :: (load (s64) from %stack.10)
    renamable $rdx = MOV64rm %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %stack.6)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rdx :: (store (s64), align 16)
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $r13 :: (store (s64), align 16)
    renamable $rdx = MOV64rm %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %stack.5)
    MOV64mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $rdx :: (store (s64) into unknown-address + 8, basealign 16)
    MOV32mr renamable $rax, 1, $noreg, 32, $noreg, killed renamable $ecx :: (store (s32) into unknown-address + 16, align 16)
    RET 0, $rax

...
---
name:            Iterable2_all_fFunctionT_to_Ptri1
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
frameInfo:
  maxAlignment:    16
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 24, size: 8, alignment: 8, isImmutable: true }
  - { id: 1, offset: 16, size: 8, alignment: 16, isImmutable: true }
  - { id: 2, offset: 8, size: 4, alignment: 8, isImmutable: true }
  - { id: 3, size: 8, alignment: 16, isImmutable: true }
stack:
  - { id: 0, size: 1, alignment: 8 }
  - { id: 1, size: 32, alignment: 8 }
  - { id: 2, size: 32, alignment: 8 }
  - { id: 3, size: 48, alignment: 16 }
  - { id: 4, type: spill-slot, size: 8, alignment: 8 }
  - { id: 5, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.4):
    liveins: $rdi, $rdx, $rsi
  
    renamable $r13 = COPY $rdx
    renamable $rbx = COPY $rsi
    renamable $r14 = COPY $rdi
    renamable $rax = MOV64rm $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri 5693646204635713916
    renamable $rcx = IMUL64rm killed renamable $rcx, $rdi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, $rdi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $r12 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY $rsi
    CALL64m renamable $r14, 8, renamable $r12, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.12)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r15 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $r14
    $rsi = COPY renamable $rbx
    $rdx = COPY renamable $r13
    $ecx = COPY renamable $r12d
    $r8 = COPY renamable $r15
    CALL64m renamable $r14, 8, renamable $r12, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.17)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.2, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r14
    $rdx = COPY renamable $rbx
    $rcx = COPY renamable $r13
    $r8d = COPY renamable $r12d
    $r9 = COPY renamable $r14
    PUSH64r killed renamable $r15, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    MOV64mr %stack.5, 1, $noreg, 0, $noreg, renamable $r12 :: (store (s64) into %stack.5)
    PUSH64r killed renamable $r12, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r13, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, renamable $rbx :: (store (s64) into %stack.4)
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm %stack.2, 1, $noreg, 16, $noreg :: (load (s64) from %stack.2 + 16)
    renamable $r13 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %stack.2)
    renamable $rcx = MOV64rm %stack.2, 1, $noreg, 8, $noreg :: (load (s64) from %stack.2 + 8)
    renamable $rdx = MOV64rm renamable $r13, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i30)
    renamable $rsi = MOV64ri 4189192806087951739
    renamable $rsi = IMUL64rm killed renamable $rsi, renamable $r13, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i28, align 4)
    renamable $rdi = COPY renamable $rsi
    renamable $rdi = SHR64ri killed renamable $rdi, 32, implicit-def dead $eflags
    renamable $rdi = XOR64rr killed renamable $rdi, killed renamable $rsi, implicit-def dead $eflags
    renamable $rdi = AND64rm killed renamable $rdi, renamable $r13, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i29, align 4)
    renamable $edx = MOV32rm killed renamable $rdx, 4, killed renamable $rdi, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i38)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, renamable $r13 :: (store (s64) into %ir.21)
    MOV64mr %stack.1, 1, $noreg, 8, $noreg, killed renamable $rcx :: (store (s64) into %ir.22)
    MOV64mr %stack.1, 1, $noreg, 16, $noreg, killed renamable $rax :: (store (s64) into %ir.23)
    MOV32mr %stack.1, 1, $noreg, 24, $noreg, killed renamable $edx :: (store (s32) into %ir.24, align 8)
  
  bb.1 (%ir-block.28):
    successors: %bb.3(0x04000000), %bb.2(0x7c000000)
    liveins: $r13, $r14
  
    renamable $rbp = MOV64rm %stack.1, 1, $noreg, 8, $noreg :: (dereferenceable load (s64) from %ir.sunkaddr)
    renamable $r12 = MOV64rm %stack.1, 1, $noreg, 16, $noreg :: (dereferenceable load (s64) from %ir.sunkaddr1)
    renamable $rbx = MOVSX64rm32 %stack.1, 1, $noreg, 24, $noreg :: (dereferenceable load (s32) from %ir.sunkaddr2, align 8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %stack.4)
    renamable $rax = MOV64rm %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %stack.5)
    CALL64m renamable $r14, 8, killed renamable $rax, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.sunkaddr4)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r13
    $rsi = COPY renamable $rbp
    $rdx = COPY renamable $r12
    $ecx = COPY renamable $ebx
    renamable $r15 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $r8 = COPY renamable $r15
    CALL64m renamable $r13, 8, renamable $rbx, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.sunkaddr7)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.3, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r13
    $rdx = COPY renamable $rbp
    $rcx = COPY renamable $r12
    $r8d = COPY renamable $ebx
    $r9 = COPY renamable $r13
    PUSH64r killed renamable $r15, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r12, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %stack.3, align 16)
    CMP64rm renamable $rdi, $rip, 1, $noreg, target-flags(x86-gotpcrel) @nil_typ, $noreg, implicit-def $eflags :: (load (s64) from got)
    renamable $al = SETCCr 4, implicit killed $eflags
    TEST64rr renamable $rdi, renamable $rdi, implicit-def $eflags
    renamable $bpl = SETCCr 4, implicit killed $eflags
    renamable $bpl = OR8rr killed renamable $bpl, killed renamable $al, implicit-def $eflags
    JCC_1 %bb.3, 5, implicit killed $eflags
    JMP_1 %bb.2
  
  bb.2 (%ir-block.45):
    successors: %bb.1(0x7c000000), %bb.3(0x04000000)
    liveins: $bpl, $rdi, $r13, $r14
  
    renamable $rdx = MOV64rm %stack.3, 1, $noreg, 24, $noreg :: (load (s64) from %stack.3 + 24, basealign 16)
    renamable $rsi = MOV64rm %stack.3, 1, $noreg, 16, $noreg :: (load (s64) from %stack.3 + 16, align 16)
    renamable $rax = MOV64rm renamable $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i58)
    renamable $rcx = MOV64rm renamable $rdi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i56, align 4)
    renamable $r8 = MOV64ri 3084208142191802847
    renamable $rcx = IMUL64rr killed renamable $rcx, killed renamable $r8, implicit-def dead $eflags
    renamable $r8 = COPY renamable $rcx
    renamable $r8 = SHR64ri killed renamable $r8, 32, implicit-def dead $eflags
    renamable $r8 = XOR64rr killed renamable $r8, killed renamable $rcx, implicit-def dead $eflags
    renamable $r8 = AND64rm killed renamable $r8, renamable $rdi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i57, align 4)
    renamable $ecx = MOV32rm killed renamable $rax, 4, killed renamable $r8, 0, $noreg, implicit-def $rcx :: (load (s32) from %ir.offset_ptr.i.i66)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    CALL64m %fixed-stack.0, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit-def $rsp, implicit-def $ssp, implicit-def $al :: (load (s64) from %fixed-stack.0)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    TEST8ri killed renamable $al, 1, implicit-def $eflags
    JCC_1 %bb.1, 5, implicit killed $eflags
    JMP_1 %bb.3
  
  bb.3..critedge:
    liveins: $bpl
  
    $al = COPY killed renamable $bpl
    RET 0, $al

...
---
name:            Iterable2_any_fFunctionT_to_Ptri1
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
frameInfo:
  maxAlignment:    16
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 24, size: 8, alignment: 8, isImmutable: true }
  - { id: 1, offset: 16, size: 8, alignment: 16, isImmutable: true }
  - { id: 2, offset: 8, size: 4, alignment: 8, isImmutable: true }
  - { id: 3, size: 8, alignment: 16, isImmutable: true }
stack:
  - { id: 0, size: 1, alignment: 8 }
  - { id: 1, size: 32, alignment: 8 }
  - { id: 2, size: 32, alignment: 8 }
  - { id: 3, size: 48, alignment: 16 }
  - { id: 4, type: spill-slot, size: 8, alignment: 8 }
  - { id: 5, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.4):
    liveins: $rdi, $rdx, $rsi
  
    renamable $r13 = COPY $rdx
    renamable $rbx = COPY $rsi
    renamable $r14 = COPY $rdi
    renamable $rax = MOV64rm $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri 5693646204635713916
    renamable $rcx = IMUL64rm killed renamable $rcx, $rdi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, $rdi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $r12 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY $rsi
    CALL64m renamable $r14, 8, renamable $r12, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.12)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r15 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $r14
    $rsi = COPY renamable $rbx
    $rdx = COPY renamable $r13
    $ecx = COPY renamable $r12d
    $r8 = COPY renamable $r15
    CALL64m renamable $r14, 8, renamable $r12, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.17)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.2, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r14
    $rdx = COPY renamable $rbx
    $rcx = COPY renamable $r13
    $r8d = COPY renamable $r12d
    $r9 = COPY renamable $r14
    PUSH64r killed renamable $r15, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    MOV64mr %stack.5, 1, $noreg, 0, $noreg, renamable $r12 :: (store (s64) into %stack.5)
    PUSH64r killed renamable $r12, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r13, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, renamable $rbx :: (store (s64) into %stack.4)
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm %stack.2, 1, $noreg, 16, $noreg :: (load (s64) from %stack.2 + 16)
    renamable $r13 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %stack.2)
    renamable $rcx = MOV64rm %stack.2, 1, $noreg, 8, $noreg :: (load (s64) from %stack.2 + 8)
    renamable $rdx = MOV64rm renamable $r13, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i25)
    renamable $rsi = MOV64ri 4189192806087951739
    renamable $rsi = IMUL64rm killed renamable $rsi, renamable $r13, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i23, align 4)
    renamable $rdi = COPY renamable $rsi
    renamable $rdi = SHR64ri killed renamable $rdi, 32, implicit-def dead $eflags
    renamable $rdi = XOR64rr killed renamable $rdi, killed renamable $rsi, implicit-def dead $eflags
    renamable $rdi = AND64rm killed renamable $rdi, renamable $r13, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i24, align 4)
    renamable $edx = MOV32rm killed renamable $rdx, 4, killed renamable $rdi, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i33)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, renamable $r13 :: (store (s64) into %ir.21)
    MOV64mr %stack.1, 1, $noreg, 8, $noreg, killed renamable $rcx :: (store (s64) into %ir.22)
    MOV64mr %stack.1, 1, $noreg, 16, $noreg, killed renamable $rax :: (store (s64) into %ir.23)
    MOV32mr %stack.1, 1, $noreg, 24, $noreg, killed renamable $edx :: (store (s32) into %ir.24, align 8)
  
  bb.1 (%ir-block.28):
    successors: %bb.2(0x7c000000), %bb.3(0x04000000)
    liveins: $r13, $r14
  
    renamable $rbp = MOV64rm %stack.1, 1, $noreg, 8, $noreg :: (dereferenceable load (s64) from %ir.sunkaddr)
    renamable $r12 = MOV64rm %stack.1, 1, $noreg, 16, $noreg :: (dereferenceable load (s64) from %ir.sunkaddr1)
    renamable $rbx = MOVSX64rm32 %stack.1, 1, $noreg, 24, $noreg :: (dereferenceable load (s32) from %ir.sunkaddr2, align 8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %stack.4)
    renamable $rax = MOV64rm %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %stack.5)
    CALL64m renamable $r14, 8, killed renamable $rax, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.sunkaddr4)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r13
    $rsi = COPY renamable $rbp
    $rdx = COPY renamable $r12
    $ecx = COPY renamable $ebx
    renamable $r15 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $r8 = COPY renamable $r15
    CALL64m renamable $r13, 8, renamable $rbx, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.sunkaddr7)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.3, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r13
    $rdx = COPY renamable $rbp
    $rcx = COPY renamable $r12
    $r8d = COPY renamable $ebx
    $r9 = COPY renamable $r13
    PUSH64r killed renamable $r15, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r12, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %stack.3, align 16)
    CMP64rm renamable $rdi, $rip, 1, $noreg, target-flags(x86-gotpcrel) @nil_typ, $noreg, implicit-def $eflags :: (load (s64) from got)
    renamable $al = SETCCr 5, implicit killed $eflags
    TEST64rr renamable $rdi, renamable $rdi, implicit-def $eflags
    renamable $bpl = SETCCr 5, implicit killed $eflags
    renamable $bpl = AND8rr killed renamable $bpl, killed renamable $al, implicit-def dead $eflags
    CMP8ri renamable $bpl, 1, implicit-def $eflags
    JCC_1 %bb.3, 5, implicit killed $eflags
    JMP_1 %bb.2
  
  bb.2 (%ir-block.45):
    successors: %bb.3(0x04000000), %bb.1(0x7c000000)
    liveins: $bpl, $rdi, $r13, $r14
  
    renamable $rdx = MOV64rm %stack.3, 1, $noreg, 24, $noreg :: (load (s64) from %stack.3 + 24, basealign 16)
    renamable $rsi = MOV64rm %stack.3, 1, $noreg, 16, $noreg :: (load (s64) from %stack.3 + 16, align 16)
    renamable $rax = MOV64rm renamable $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i53)
    renamable $rcx = MOV64rm renamable $rdi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i51, align 4)
    renamable $r8 = MOV64ri 3084208142191802847
    renamable $rcx = IMUL64rr killed renamable $rcx, killed renamable $r8, implicit-def dead $eflags
    renamable $r8 = COPY renamable $rcx
    renamable $r8 = SHR64ri killed renamable $r8, 32, implicit-def dead $eflags
    renamable $r8 = XOR64rr killed renamable $r8, killed renamable $rcx, implicit-def dead $eflags
    renamable $r8 = AND64rm killed renamable $r8, renamable $rdi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i52, align 4)
    renamable $ecx = MOV32rm killed renamable $rax, 4, killed renamable $r8, 0, $noreg, implicit-def $rcx :: (load (s32) from %ir.offset_ptr.i.i61)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    CALL64m %fixed-stack.0, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit-def $rsp, implicit-def $ssp, implicit-def $al :: (load (s64) from %fixed-stack.0)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    TEST8ri killed renamable $al, 1, implicit-def $eflags
    JCC_1 %bb.1, 4, implicit killed $eflags
    JMP_1 %bb.3
  
  bb.3..critedge:
    liveins: $bpl
  
    $al = COPY killed renamable $bpl
    RET 0, $al

...
---
name:            Iterable2_map_fFunctionT_to_U
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
  - { reg: '$rcx' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 32, size: 8, alignment: 16, isImmutable: true }
  - { id: 1, offset: 24, size: 8, alignment: 8, isImmutable: true }
  - { id: 2, offset: 16, size: 4, alignment: 16, isImmutable: true }
  - { id: 3, offset: 8, size: 8, alignment: 8, isImmutable: true }
  - { id: 4, size: 8, alignment: 16, isImmutable: true }
stack:
  - { id: 0, type: spill-slot, size: 8, alignment: 8 }
  - { id: 1, type: spill-slot, size: 8, alignment: 8 }
  - { id: 2, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.4):
    liveins: $rcx, $rdi, $rdx, $rsi
  
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, $rcx :: (store (s64) into %stack.0)
    renamable $r13 = COPY $rdx
    renamable $r12 = COPY $rsi
    renamable $rbx = COPY $rdi
    renamable $rbp = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.1)
    renamable $rax = MOV64rm $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $r14 = MOV64ri 5693646204635713916
    renamable $rcx = MOV64rm $rsi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rcx = IMUL64rr killed renamable $rcx, renamable $r14, implicit-def dead $eflags
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $r15 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r13
    CALL64m $rsi, 8, renamable $r15, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.7)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, $rax :: (store (s64) into %stack.1)
    renamable $rax = MOV64rm killed renamable $rbp, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    renamable $rax = MOV64rm killed renamable $rax, 1, $noreg, 8, $noreg :: (load (s64) from %ir.11)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.2)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $rsi = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    $rdi = MOV32ri64 56
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbp = COPY $rax
    renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %stack.1)
    MOV64mr renamable $rbp, 1, $noreg, 40, $noreg, killed renamable $rax :: (store (s64) into %ir.13)
    renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %stack.2)
    MOV64mr renamable $rbp, 1, $noreg, 48, $noreg, killed renamable $rax :: (store (s64) into %ir.14)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r13
    CALL64m renamable $r12, 8, killed renamable $r15, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.7)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm renamable $r12, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $r14 = IMUL64rm killed renamable $r14, renamable $r12, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rcx = COPY renamable $r14
    renamable $rcx = SHR64ri killed renamable $rcx, 32, implicit-def dead $eflags
    renamable $rcx = XOR64rr killed renamable $rcx, killed renamable $r14, implicit-def dead $eflags
    renamable $rcx = AND64rm killed renamable $rcx, renamable $r12, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i67)
    MOV64mr renamable $rbp, 1, $noreg, 0, $noreg, killed renamable $r12 :: (store (s64) into %ir.result.i)
    MOV64mr renamable $rbp, 1, $noreg, 8, $noreg, killed renamable $r13 :: (store (s64) into %ir.23)
    renamable $rcx = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %stack.0)
    MOV64mr renamable $rbp, 1, $noreg, 16, $noreg, killed renamable $rcx :: (store (s64) into %ir.24)
    MOV32mr renamable $rbp, 1, $noreg, 24, $noreg, killed renamable $eax :: (store (s32) into %ir.25)
    renamable $rax = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.0, align 16)
    MOV64mr renamable $rbp, 1, $noreg, 32, $noreg, killed renamable $rax :: (store (s64) into %ir.27)
    MOV64mr renamable $rbx, 1, $noreg, 8, $noreg, killed renamable $rbp :: (store (s64))
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @MapIterable2, $noreg :: (load (s64) from got, align 16)
    MOV64mr renamable $rbx, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64))
    MOV32mi renamable $rbx, 1, $noreg, 24, $noreg, 7 :: (store (s32), align 8)
    $rax = COPY killed renamable $rbx
    RET 0, $rax

...
---
name:            Iterable2_filter_fFunctionT_to_Ptri1
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
  - { reg: '$rcx' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 32, size: 8, alignment: 16, isImmutable: true }
  - { id: 1, offset: 24, size: 8, alignment: 8, isImmutable: true }
  - { id: 2, offset: 16, size: 4, alignment: 16, isImmutable: true }
  - { id: 3, offset: 8, size: 8, alignment: 8, isImmutable: true }
  - { id: 4, size: 8, alignment: 16, isImmutable: true }
stack:
  - { id: 0, type: spill-slot, size: 8, alignment: 8 }
  - { id: 1, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.4):
    liveins: $rcx, $rdi, $rdx, $rsi
  
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, $rcx :: (store (s64) into %stack.0)
    renamable $r13 = COPY $rdx
    renamable $r12 = COPY $rsi
    renamable $rbx = COPY $rdi
    renamable $rax = MOV64rm $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $r14 = MOV64ri 5693646204635713916
    renamable $rcx = MOV64rm $rsi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rcx = IMUL64rr killed renamable $rcx, renamable $r14, implicit-def dead $eflags
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $r15 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r13
    CALL64m $rsi, 8, renamable $r15, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.7)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, $rax :: (store (s64) into %stack.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $rsi = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    $rdi = MOV32ri64 48
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbp = COPY $rax
    renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %stack.1)
    MOV64mr renamable $rbp, 1, $noreg, 40, $noreg, killed renamable $rax :: (store (s64) into %ir.10)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r13
    CALL64m renamable $r12, 8, killed renamable $r15, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.7)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm renamable $r12, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $r14 = IMUL64rm killed renamable $r14, renamable $r12, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rcx = COPY renamable $r14
    renamable $rcx = SHR64ri killed renamable $rcx, 32, implicit-def dead $eflags
    renamable $rcx = XOR64rr killed renamable $rcx, killed renamable $r14, implicit-def dead $eflags
    renamable $rcx = AND64rm killed renamable $rcx, renamable $r12, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i67)
    MOV64mr renamable $rbp, 1, $noreg, 0, $noreg, killed renamable $r12 :: (store (s64) into %ir.result.i)
    MOV64mr renamable $rbp, 1, $noreg, 8, $noreg, killed renamable $r13 :: (store (s64) into %ir.19)
    renamable $rcx = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %stack.0)
    MOV64mr renamable $rbp, 1, $noreg, 16, $noreg, killed renamable $rcx :: (store (s64) into %ir.20)
    MOV32mr renamable $rbp, 1, $noreg, 24, $noreg, killed renamable $eax :: (store (s32) into %ir.21)
    renamable $rax = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.0, align 16)
    MOV64mr renamable $rbp, 1, $noreg, 32, $noreg, killed renamable $rax :: (store (s64) into %ir.23)
    MOV64mr renamable $rbx, 1, $noreg, 8, $noreg, killed renamable $rbp :: (store (s64))
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @FilterIterable2, $noreg :: (load (s64) from got, align 16)
    MOV64mr renamable $rbx, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64))
    MOV32mi renamable $rbx, 1, $noreg, 24, $noreg, 7 :: (store (s32), align 8)
    $rax = COPY killed renamable $rbx
    RET 0, $rax

...
---
name:            Iterable2_chain_otherIterable2T
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
  - { reg: '$rcx' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 56, size: 4, alignment: 8, isImmutable: true }
  - { id: 1, offset: 48, size: 8, alignment: 16, isImmutable: true }
  - { id: 2, offset: 40, size: 8, alignment: 8, isImmutable: true }
  - { id: 3, offset: 32, size: 8, alignment: 16, isImmutable: true }
  - { id: 4, offset: 24, size: 8, alignment: 8, isImmutable: true }
  - { id: 5, offset: 16, size: 4, alignment: 16, isImmutable: true }
  - { id: 6, offset: 8, size: 8, alignment: 8, isImmutable: true }
  - { id: 7, size: 8, alignment: 16, isImmutable: true }
stack:
  - { id: 0, type: spill-slot, size: 8, alignment: 8 }
  - { id: 1, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.4):
    liveins: $rcx, $rdi, $rdx, $rsi
  
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, $rcx :: (store (s64) into %stack.0)
    renamable $rbx = COPY $rdx
    renamable $r12 = COPY $rsi
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, $rdi :: (store (s64) into %stack.1)
    renamable $rax = MOV64rm $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $r14 = MOV64ri 5693646204635713916
    renamable $rcx = MOV64rm $rsi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rcx = IMUL64rr killed renamable $rcx, renamable $r14, implicit-def dead $eflags
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $r15 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    CALL64m $rsi, 8, renamable $r15, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.7)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbp = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $rsi = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    $rdi = MOV32ri64 72
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r13 = COPY $rax
    MOV64mr $rax, 1, $noreg, 64, $noreg, killed renamable $rbp :: (store (s64) into %ir.10)
    renamable $rbp = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @ChainIterable2, $noreg :: (load (s64) from got, align 16)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    CALL64m renamable $r12, 8, killed renamable $r15, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.7)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm renamable $r12, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64rm renamable $r12, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rcx = IMUL64rr killed renamable $rcx, renamable $r14, implicit-def dead $eflags
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, renamable $r12, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i138)
    MOV64mr renamable $r13, 1, $noreg, 0, $noreg, killed renamable $r12 :: (store (s64) into %ir.result.i)
    MOV64mr renamable $r13, 1, $noreg, 8, $noreg, killed renamable $rbx :: (store (s64) into %ir.19)
    renamable $rcx = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %stack.0)
    MOV64mr renamable $r13, 1, $noreg, 16, $noreg, killed renamable $rcx :: (store (s64) into %ir.20)
    MOV32mr renamable $r13, 1, $noreg, 24, $noreg, killed renamable $eax :: (store (s32) into %ir.21)
    renamable $rdx = MOV64rm %fixed-stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.3, align 16)
    renamable $rax = MOV64rm renamable $rdx, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i12)
    renamable $r14 = IMUL64rm killed renamable $r14, renamable $rdx, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i10, align 4)
    renamable $rcx = COPY renamable $r14
    renamable $rcx = SHR64ri killed renamable $rcx, 32, implicit-def dead $eflags
    renamable $rcx = XOR64rr killed renamable $rcx, killed renamable $r14, implicit-def dead $eflags
    renamable $rcx = AND64rm killed renamable $rcx, renamable $rdx, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i11, align 4)
    renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i110)
    MOV64mr renamable $r13, 1, $noreg, 32, $noreg, killed renamable $rdx :: (store (s64) into %ir.23)
    renamable $rcx = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.2)
    MOV64mr renamable $r13, 1, $noreg, 40, $noreg, killed renamable $rcx :: (store (s64) into %ir.24)
    renamable $rcx = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.1, align 16)
    MOV64mr renamable $r13, 1, $noreg, 48, $noreg, killed renamable $rcx :: (store (s64) into %ir.25)
    MOV32mr renamable $r13, 1, $noreg, 56, $noreg, killed renamable $eax :: (store (s32) into %ir.26)
    renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %stack.1)
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rbp :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $r13 :: (store (s64))
    MOV32mi renamable $rax, 1, $noreg, 24, $noreg, 7 :: (store (s32), align 8)
    RET 0, $rax

...
---
name:            Iterable2_interleave_otherIterable2T
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
  - { reg: '$rcx' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 56, size: 4, alignment: 8, isImmutable: true }
  - { id: 1, offset: 48, size: 8, alignment: 16, isImmutable: true }
  - { id: 2, offset: 40, size: 8, alignment: 8, isImmutable: true }
  - { id: 3, offset: 32, size: 8, alignment: 16, isImmutable: true }
  - { id: 4, offset: 24, size: 8, alignment: 8, isImmutable: true }
  - { id: 5, offset: 16, size: 4, alignment: 16, isImmutable: true }
  - { id: 6, offset: 8, size: 8, alignment: 8, isImmutable: true }
  - { id: 7, size: 8, alignment: 16, isImmutable: true }
stack:
  - { id: 0, type: spill-slot, size: 8, alignment: 8 }
  - { id: 1, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.4):
    liveins: $rcx, $rdi, $rdx, $rsi
  
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, $rcx :: (store (s64) into %stack.0)
    renamable $rbx = COPY $rdx
    renamable $r12 = COPY $rsi
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, $rdi :: (store (s64) into %stack.1)
    renamable $rax = MOV64rm $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $r14 = MOV64ri 5693646204635713916
    renamable $rcx = MOV64rm $rsi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rcx = IMUL64rr killed renamable $rcx, renamable $r14, implicit-def dead $eflags
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $r15 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    CALL64m $rsi, 8, renamable $r15, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.7)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbp = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $rsi = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    $rdi = MOV32ri64 72
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r13 = COPY $rax
    MOV64mr $rax, 1, $noreg, 64, $noreg, killed renamable $rbp :: (store (s64) into %ir.10)
    renamable $rbp = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @InterleaveIterable2, $noreg :: (load (s64) from got, align 16)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    CALL64m renamable $r12, 8, killed renamable $r15, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.7)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm renamable $r12, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64rm renamable $r12, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rcx = IMUL64rr killed renamable $rcx, renamable $r14, implicit-def dead $eflags
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, renamable $r12, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i138)
    MOV64mr renamable $r13, 1, $noreg, 0, $noreg, killed renamable $r12 :: (store (s64) into %ir.result.i)
    MOV64mr renamable $r13, 1, $noreg, 8, $noreg, killed renamable $rbx :: (store (s64) into %ir.19)
    renamable $rcx = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %stack.0)
    MOV64mr renamable $r13, 1, $noreg, 16, $noreg, killed renamable $rcx :: (store (s64) into %ir.20)
    MOV32mr renamable $r13, 1, $noreg, 24, $noreg, killed renamable $eax :: (store (s32) into %ir.21)
    renamable $rdx = MOV64rm %fixed-stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.3, align 16)
    renamable $rax = MOV64rm renamable $rdx, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i12)
    renamable $r14 = IMUL64rm killed renamable $r14, renamable $rdx, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i10, align 4)
    renamable $rcx = COPY renamable $r14
    renamable $rcx = SHR64ri killed renamable $rcx, 32, implicit-def dead $eflags
    renamable $rcx = XOR64rr killed renamable $rcx, killed renamable $r14, implicit-def dead $eflags
    renamable $rcx = AND64rm killed renamable $rcx, renamable $rdx, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i11, align 4)
    renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i110)
    MOV64mr renamable $r13, 1, $noreg, 32, $noreg, killed renamable $rdx :: (store (s64) into %ir.23)
    renamable $rcx = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.2)
    MOV64mr renamable $r13, 1, $noreg, 40, $noreg, killed renamable $rcx :: (store (s64) into %ir.24)
    renamable $rcx = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.1, align 16)
    MOV64mr renamable $r13, 1, $noreg, 48, $noreg, killed renamable $rcx :: (store (s64) into %ir.25)
    MOV32mr renamable $r13, 1, $noreg, 56, $noreg, killed renamable $eax :: (store (s32) into %ir.26)
    renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %stack.1)
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rbp :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $r13 :: (store (s64))
    MOV32mi renamable $rax, 1, $noreg, 24, $noreg, 7 :: (store (s32), align 8)
    RET 0, $rax

...
---
name:            Iterable2_zip_otherIterable2U
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
  - { reg: '$rcx' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 56, size: 4, alignment: 8, isImmutable: true }
  - { id: 1, offset: 48, size: 8, alignment: 16, isImmutable: true }
  - { id: 2, offset: 40, size: 8, alignment: 8, isImmutable: true }
  - { id: 3, offset: 32, size: 8, alignment: 16, isImmutable: true }
  - { id: 4, offset: 24, size: 8, alignment: 8, isImmutable: true }
  - { id: 5, offset: 16, size: 4, alignment: 16, isImmutable: true }
  - { id: 6, offset: 8, size: 8, alignment: 8, isImmutable: true }
  - { id: 7, size: 8, alignment: 16, isImmutable: true }
stack:
  - { id: 0, type: spill-slot, size: 8, alignment: 8 }
  - { id: 1, type: spill-slot, size: 8, alignment: 8 }
  - { id: 2, type: spill-slot, size: 8, alignment: 8 }
  - { id: 3, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.4):
    liveins: $rcx, $rdi, $rdx, $rsi
  
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, $rcx :: (store (s64) into %stack.1)
    renamable $r8 = COPY $rdx
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, $rdx :: (store (s64) into %stack.3)
    renamable $r12 = COPY $rsi
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, $rdi :: (store (s64) into %stack.0)
    renamable $r14 = MOV64rm %fixed-stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.4)
    renamable $rax = MOV64rm $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $r15 = MOV64ri 5693646204635713916
    renamable $rcx = MOV64rm $rsi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rcx = IMUL64rr killed renamable $rcx, renamable $r15, implicit-def dead $eflags
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $rax = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, renamable $rax :: (store (s64) into %stack.2)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $r8
    CALL64m $rsi, 8, killed renamable $rax, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.7)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbp = COPY $rax
    renamable $rax = MOV64rm killed renamable $r14, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    renamable $rbx = MOV64rm killed renamable $rax, 1, $noreg, 8, $noreg :: (load (s64) from %ir.11)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $r13 = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    $rdi = MOV32ri64 24
    $rsi = COPY renamable $r13
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r14 = COPY $rax
    MOV64mr $rax, 1, $noreg, 16, $noreg, renamable $rbx :: (store (s64) into %ir.13)
    MOV64mr $rax, 1, $noreg, 8, $noreg, renamable $rbp :: (store (s64) into %ir.14)
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @Pair, $noreg :: (load (s64) from got, align 16)
    MOV64mr renamable $r14, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.result.i)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 88
    $rsi = COPY killed renamable $r13
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r13 = COPY $rax
    MOV64mr $rax, 1, $noreg, 64, $noreg, killed renamable $rbp :: (store (s64) into %ir.15)
    MOV64mr $rax, 1, $noreg, 72, $noreg, killed renamable $rbx :: (store (s64) into %ir.16)
    MOV64mr $rax, 1, $noreg, 80, $noreg, killed renamable $r14 :: (store (s64) into %ir.17)
    renamable $r14 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @ZipIterable2, $noreg :: (load (s64) from got, align 16)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %stack.3)
    $rdi = COPY renamable $rbx
    renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %stack.2)
    CALL64m renamable $r12, 8, killed renamable $rax, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.7)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm renamable $r12, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64rm renamable $r12, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rcx = IMUL64rr killed renamable $rcx, renamable $r15, implicit-def dead $eflags
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, renamable $r12, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i139)
    MOV64mr renamable $r13, 1, $noreg, 0, $noreg, killed renamable $r12 :: (store (s64) into %ir.result.i23)
    MOV64mr renamable $r13, 1, $noreg, 8, $noreg, killed renamable $rbx :: (store (s64) into %ir.26)
    renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %stack.1)
    MOV64mr renamable $r13, 1, $noreg, 16, $noreg, killed renamable $rcx :: (store (s64) into %ir.27)
    MOV32mr renamable $r13, 1, $noreg, 24, $noreg, killed renamable $eax :: (store (s32) into %ir.28)
    renamable $rdx = MOV64rm %fixed-stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.3, align 16)
    renamable $rax = MOV64rm renamable $rdx, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i12)
    renamable $r15 = IMUL64rm killed renamable $r15, renamable $rdx, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i10, align 4)
    renamable $rcx = COPY renamable $r15
    renamable $rcx = SHR64ri killed renamable $rcx, 32, implicit-def dead $eflags
    renamable $rcx = XOR64rr killed renamable $rcx, killed renamable $r15, implicit-def dead $eflags
    renamable $rcx = AND64rm killed renamable $rcx, renamable $rdx, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i11, align 4)
    renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i111)
    MOV64mr renamable $r13, 1, $noreg, 32, $noreg, killed renamable $rdx :: (store (s64) into %ir.30)
    renamable $rcx = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.2)
    MOV64mr renamable $r13, 1, $noreg, 40, $noreg, killed renamable $rcx :: (store (s64) into %ir.31)
    renamable $rcx = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.1, align 16)
    MOV64mr renamable $r13, 1, $noreg, 48, $noreg, killed renamable $rcx :: (store (s64) into %ir.32)
    MOV32mr renamable $r13, 1, $noreg, 56, $noreg, killed renamable $eax :: (store (s32) into %ir.33)
    renamable $rax = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %stack.0)
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $r14 :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $r13 :: (store (s64))
    MOV32mi renamable $rax, 1, $noreg, 24, $noreg, 7 :: (store (s32), align 8)
    RET 0, $rax

...
---
name:            Iterable2_product_otherIterable2U
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
  - { reg: '$rcx' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 56, size: 4, alignment: 8, isImmutable: true }
  - { id: 1, offset: 48, size: 8, alignment: 16, isImmutable: true }
  - { id: 2, offset: 40, size: 8, alignment: 8, isImmutable: true }
  - { id: 3, offset: 32, size: 8, alignment: 16, isImmutable: true }
  - { id: 4, offset: 24, size: 8, alignment: 8, isImmutable: true }
  - { id: 5, offset: 16, size: 4, alignment: 16, isImmutable: true }
  - { id: 6, offset: 8, size: 8, alignment: 8, isImmutable: true }
  - { id: 7, size: 8, alignment: 16, isImmutable: true }
stack:
  - { id: 0, type: spill-slot, size: 8, alignment: 8 }
  - { id: 1, type: spill-slot, size: 8, alignment: 8 }
  - { id: 2, type: spill-slot, size: 8, alignment: 8 }
  - { id: 3, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.4):
    liveins: $rcx, $rdi, $rdx, $rsi
  
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, $rcx :: (store (s64) into %stack.1)
    renamable $r8 = COPY $rdx
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, $rdx :: (store (s64) into %stack.3)
    renamable $r12 = COPY $rsi
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, $rdi :: (store (s64) into %stack.0)
    renamable $r14 = MOV64rm %fixed-stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.4)
    renamable $rax = MOV64rm $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $r15 = MOV64ri 5693646204635713916
    renamable $rcx = MOV64rm $rsi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rcx = IMUL64rr killed renamable $rcx, renamable $r15, implicit-def dead $eflags
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $rax = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, renamable $rax :: (store (s64) into %stack.2)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $r8
    CALL64m $rsi, 8, killed renamable $rax, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.7)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbp = COPY $rax
    renamable $rax = MOV64rm killed renamable $r14, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    renamable $rbx = MOV64rm killed renamable $rax, 1, $noreg, 8, $noreg :: (load (s64) from %ir.11)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $r13 = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    $rdi = MOV32ri64 24
    $rsi = COPY renamable $r13
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r14 = COPY $rax
    MOV64mr $rax, 1, $noreg, 16, $noreg, renamable $rbx :: (store (s64) into %ir.13)
    MOV64mr $rax, 1, $noreg, 8, $noreg, renamable $rbp :: (store (s64) into %ir.14)
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @Pair, $noreg :: (load (s64) from got, align 16)
    MOV64mr renamable $r14, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.result.i)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 88
    $rsi = COPY killed renamable $r13
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r13 = COPY $rax
    MOV64mr $rax, 1, $noreg, 64, $noreg, killed renamable $rbp :: (store (s64) into %ir.15)
    MOV64mr $rax, 1, $noreg, 72, $noreg, killed renamable $rbx :: (store (s64) into %ir.16)
    MOV64mr $rax, 1, $noreg, 80, $noreg, killed renamable $r14 :: (store (s64) into %ir.17)
    renamable $r14 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @ProductIterable2, $noreg :: (load (s64) from got, align 16)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %stack.3)
    $rdi = COPY renamable $rbx
    renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %stack.2)
    CALL64m renamable $r12, 8, killed renamable $rax, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.7)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm renamable $r12, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64rm renamable $r12, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rcx = IMUL64rr killed renamable $rcx, renamable $r15, implicit-def dead $eflags
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, renamable $r12, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i139)
    MOV64mr renamable $r13, 1, $noreg, 0, $noreg, killed renamable $r12 :: (store (s64) into %ir.result.i23)
    MOV64mr renamable $r13, 1, $noreg, 8, $noreg, killed renamable $rbx :: (store (s64) into %ir.26)
    renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %stack.1)
    MOV64mr renamable $r13, 1, $noreg, 16, $noreg, killed renamable $rcx :: (store (s64) into %ir.27)
    MOV32mr renamable $r13, 1, $noreg, 24, $noreg, killed renamable $eax :: (store (s32) into %ir.28)
    renamable $rdx = MOV64rm %fixed-stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.3, align 16)
    renamable $rax = MOV64rm renamable $rdx, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i12)
    renamable $r15 = IMUL64rm killed renamable $r15, renamable $rdx, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i10, align 4)
    renamable $rcx = COPY renamable $r15
    renamable $rcx = SHR64ri killed renamable $rcx, 32, implicit-def dead $eflags
    renamable $rcx = XOR64rr killed renamable $rcx, killed renamable $r15, implicit-def dead $eflags
    renamable $rcx = AND64rm killed renamable $rcx, renamable $rdx, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i11, align 4)
    renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i111)
    MOV64mr renamable $r13, 1, $noreg, 32, $noreg, killed renamable $rdx :: (store (s64) into %ir.30)
    renamable $rcx = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.2)
    MOV64mr renamable $r13, 1, $noreg, 40, $noreg, killed renamable $rcx :: (store (s64) into %ir.31)
    renamable $rcx = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.1, align 16)
    MOV64mr renamable $r13, 1, $noreg, 48, $noreg, killed renamable $rcx :: (store (s64) into %ir.32)
    MOV32mr renamable $r13, 1, $noreg, 56, $noreg, killed renamable $eax :: (store (s32) into %ir.33)
    renamable $rax = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %stack.0)
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $r14 :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $r13 :: (store (s64))
    MOV32mi renamable $rax, 1, $noreg, 24, $noreg, 7 :: (store (s32), align 8)
    RET 0, $rax

...
---
name:            ProductIterable2_field_ProductIterable2_0
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg :: (load (s64) from %ir.2)
    RET 0, $rax

...
---
name:            ProductIterable2_field_ProductIterable2_1
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 24, $noreg :: (load (s64) from %ir.2)
    RET 0, $rax

...
---
name:            ProductIterable2_field_ProductIterable2_2
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 32, $noreg :: (load (s64) from %ir.2)
    RET 0, $rax

...
---
name:            ProductIterable2_B_init_firstIterable2T_secondIterable2U
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 192, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            ProductIterable2_B_iterator_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 200, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            ProductIterable2_B_each_fFunctionT_to_Nothing
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 208, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            ProductIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 216, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            ProductIterable2_B_all_fFunctionT_to_Ptri1
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 224, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            ProductIterable2_B_any_fFunctionT_to_Ptri1
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 232, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            ProductIterable2_B_map_fFunctionT_to_U
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 240, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            ProductIterable2_B_filter_fFunctionT_to_Ptri1
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 248, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            ProductIterable2_B_chain_otherIterable2T
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 256, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            ProductIterable2_B_interleave_otherIterable2T
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 264, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            ProductIterable2_B_zip_otherIterable2U
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 272, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            ProductIterable2_B_product_otherIterable2U
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 280, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            ProductIterable2_init_firstIterable2T_secondIterable2U
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
  hasTailCall:     true
fixedStack:
  - { id: 0, offset: 80, size: 4, alignment: 16 }
  - { id: 1, offset: 72, size: 8, alignment: 8 }
  - { id: 2, offset: 64, size: 8, alignment: 16 }
  - { id: 3, offset: 56, size: 8, alignment: 8 }
  - { id: 4, offset: 48, size: 4, alignment: 16 }
  - { id: 5, offset: 40, size: 8, alignment: 8 }
  - { id: 6, offset: 32, size: 8, alignment: 16 }
  - { id: 7, offset: 24, size: 8, alignment: 8 }
  - { id: 8, offset: 16, size: 8, alignment: 16 }
  - { id: 9, offset: 8, size: 4, alignment: 8 }
  - { id: 10, size: 8, alignment: 16 }
stack:
  - { id: 0, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.5):
    liveins: $rdi, $rsi
  
    renamable $rbx = COPY $rsi
    renamable $r12 = COPY $rdi
    renamable $rax = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.2, align 16)
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.0)
    renamable $r15 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.1)
    renamable $r13 = MOV64rm %fixed-stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.3)
    renamable $rdx = MOV64rm %fixed-stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.6, align 16)
    renamable $rcx = MOV64rm %fixed-stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.5)
    renamable $rsi = MOV64rm %fixed-stack.7, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.7)
    renamable $rax = MOV64rm $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rdi = MOV64ri 7827074759551300494
    renamable $rdi = IMUL64rm killed renamable $rdi, renamable $r12, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $r8 = COPY renamable $rdi
    renamable $r8 = SHR64ri killed renamable $r8, 32, implicit-def dead $eflags
    renamable $r8 = XOR64rr killed renamable $r8, killed renamable $rdi, implicit-def dead $eflags
    renamable $r8 = AND64rm killed renamable $r8, renamable $r12, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $rbp = MOVSX64rm32 killed renamable $rax, 4, killed renamable $r8, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm renamable $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i20)
    renamable $r14 = MOV64ri 5693646204635713916
    renamable $rdi = MOV64rm renamable $rsi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i18, align 4)
    renamable $rdi = IMUL64rr killed renamable $rdi, renamable $r14, implicit-def dead $eflags
    renamable $r8 = COPY renamable $rdi
    renamable $r8 = SHR64ri killed renamable $r8, 32, implicit-def dead $eflags
    renamable $r8 = XOR64rr killed renamable $r8, killed renamable $rdi, implicit-def dead $eflags
    renamable $r8 = AND64rm killed renamable $r8, renamable $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i19, align 4)
    renamable $r8d = MOV32rm killed renamable $rax, 4, killed renamable $r8, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i28)
    renamable $rax = MOV64rm renamable $r12, 8, renamable $rbp, 0, $noreg :: (load (s64) from %ir.8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    CALL64m killed renamable $rax, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.10)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm renamable $r13, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i48)
    renamable $r14 = IMUL64rm killed renamable $r14, renamable $r13, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i46, align 4)
    renamable $rcx = COPY renamable $r14
    renamable $rcx = SHR64ri killed renamable $rcx, 32, implicit-def dead $eflags
    renamable $rcx = XOR64rr killed renamable $rcx, killed renamable $r14, implicit-def dead $eflags
    renamable $rcx = AND64rm killed renamable $rcx, renamable $r13, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i47, align 4)
    renamable $r8d = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i56)
    renamable $rax = MOV64rm killed renamable $r12, 8, killed renamable $rbp, 8, $noreg :: (load (s64) from %ir.17)
    renamable $rax = MOV64rm killed renamable $rax, 1, $noreg, 8, $noreg :: (load (s64) from %ir.19)
    $rdi = COPY killed renamable $rbx
    $rsi = COPY killed renamable $r13
    $rdx = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %stack.0)
    $rcx = COPY killed renamable $r15
    TCRETURNri64 killed renamable $rax, 0, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d

...
---
name:            ProductIterable2_iterator_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 24, size: 8, alignment: 8, isImmutable: true }
  - { id: 1, offset: 16, size: 4, alignment: 16, isImmutable: true }
  - { id: 2, offset: 8, size: 8, alignment: 8, isImmutable: true }
  - { id: 3, size: 8, alignment: 16, isImmutable: true }
stack:
  - { id: 0, size: 1, alignment: 8 }
  - { id: 1, size: 32, alignment: 8 }
  - { id: 2, size: 16, alignment: 8 }
  - { id: 3, size: 16, alignment: 8 }
  - { id: 4, size: 32, alignment: 8 }
  - { id: 5, size: 32, alignment: 8 }
  - { id: 6, size: 32, alignment: 8 }
  - { id: 7, size: 32, alignment: 8 }
  - { id: 8, size: 32, alignment: 8 }
  - { id: 9, size: 32, alignment: 8 }
  - { id: 10, type: spill-slot, size: 8, alignment: 8 }
  - { id: 11, type: spill-slot, size: 8, alignment: 8 }
  - { id: 12, type: spill-slot, size: 8, alignment: 8 }
  - { id: 13, type: spill-slot, size: 8, alignment: 8 }
  - { id: 14, type: spill-slot, size: 8, alignment: 8 }
  - { id: 15, type: spill-slot, size: 8, alignment: 8 }
  - { id: 16, type: spill-slot, size: 8, alignment: 8 }
  - { id: 17, type: spill-slot, size: 8, alignment: 8 }
  - { id: 18, type: spill-slot, size: 8, alignment: 8 }
  - { id: 19, type: spill-slot, size: 8, alignment: 8 }
  - { id: 20, type: spill-slot, size: 8, alignment: 8 }
  - { id: 21, type: spill-slot, size: 8, alignment: 8 }
  - { id: 22, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.3):
    liveins: $rdi, $rdx, $rsi
  
    renamable $rbx = COPY $rdx
    renamable $r14 = COPY $rsi
    MOV64mr %stack.11, 1, $noreg, 0, $noreg, $rdi :: (store (s64) into %stack.11)
    renamable $rax = MOV64rm $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri 7827074759551300494
    renamable $rcx = IMUL64rm killed renamable $rcx, $rsi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rsi = COPY renamable $rcx
    renamable $rsi = SHR64ri killed renamable $rsi, 32, implicit-def dead $eflags
    renamable $rsi = XOR64rr killed renamable $rsi, killed renamable $rcx, implicit-def dead $eflags
    renamable $rsi = AND64rm killed renamable $rsi, renamable $r14, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $r15 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rsi, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r15, 0, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.4, 1, $noreg, 0, $noreg
    $rsi = COPY $rdx
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.8)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbp = MOVSX64rm32 %stack.4, 1, $noreg, 24, $noreg :: (load (s32) from %stack.4 + 24, align 8)
    renamable $rax = MOV64rm %stack.4, 1, $noreg, 16, $noreg :: (load (s64) from %stack.4 + 16)
    MOV64mr %stack.12, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.12)
    renamable $r13 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %stack.4)
    renamable $r12 = MOV64rm %stack.4, 1, $noreg, 8, $noreg :: (load (s64) from %stack.4 + 8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    MOV64mr %stack.10, 1, $noreg, 0, $noreg, renamable $rbx :: (store (s64) into %stack.10)
    $rdi = COPY renamable $rbx
    CALL64m renamable $r14, 8, renamable $r15, 16, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.16)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $rbx
    CALL64m renamable $r14, 8, renamable $r15, 24, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.20)
    renamable $rbx = COPY killed renamable $r15
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r8 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $r13
    $rsi = COPY renamable $r12
    renamable $r15 = MOV64rm %stack.12, 1, $noreg, 0, $noreg :: (load (s64) from %stack.12)
    $rdx = COPY renamable $r15
    $ecx = COPY renamable $ebp
    CALL64m renamable $r13, 8, renamable $rbp, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.27)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.5, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r13
    $rdx = COPY renamable $r12
    $rcx = COPY renamable $r15
    $r8d = COPY renamable $ebp
    $r9 = COPY killed renamable $r13
    renamable $r10 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    PUSH64r killed renamable $r10, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r15, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r12, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r15 = COPY renamable $rbx
    renamable $rax = MOV64rm renamable $r14, 8, $rbx, 8, $noreg :: (load (s64) from %ir.32)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.6, 1, $noreg, 0, $noreg
    renamable $r12 = MOV64rm %stack.10, 1, $noreg, 0, $noreg :: (load (s64) from %stack.10)
    $rsi = COPY renamable $r12
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.33)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r12
    CALL64m renamable $r14, 8, $rbx, 16, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.16)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $r12
    CALL64m renamable $r14, 8, renamable $r15, 24, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.20)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r12 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $rbp = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    MOV64mr %stack.12, 1, $noreg, 0, $noreg, renamable $rbp :: (store (s64) into %stack.12)
    $rdi = MOV32ri64 24
    $rsi = COPY renamable $rbp
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r13 = COPY $rax
    MOV64mr $rax, 1, $noreg, 16, $noreg, renamable $r12 :: (store (s64) into %ir.42)
    MOV64mr $rax, 1, $noreg, 8, $noreg, renamable $rbx :: (store (s64) into %ir.43)
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @Pair, $noreg :: (load (s64) from got, align 16)
    MOV64mr renamable $r13, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.result.i)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 152
    $rsi = COPY killed renamable $rbp
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @ProductIterator2, $noreg :: (load (s64) from got, align 16)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.44)
    MOV64mr %stack.1, 1, $noreg, 8, $noreg, renamable $rax :: (store (s64) into %ir.45)
    MOV32mi %stack.1, 1, $noreg, 24, $noreg, 7 :: (store (s32) into %ir.46, align 8)
    MOV64mr renamable $rax, 1, $noreg, 128, $noreg, killed renamable $rbx :: (store (s64) into %ir.48)
    MOV64mr renamable $rax, 1, $noreg, 136, $noreg, killed renamable $r12 :: (store (s64) into %ir.49)
    MOV64mr killed renamable $rax, 1, $noreg, 144, $noreg, killed renamable $r13 :: (store (s64) into %ir.50)
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r15, 0, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.7, 1, $noreg, 0, $noreg
    renamable $rbx = MOV64rm %stack.10, 1, $noreg, 0, $noreg :: (load (s64) from %stack.10)
    $rsi = COPY renamable $rbx
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.53)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbp = MOVSX64rm32 %stack.7, 1, $noreg, 24, $noreg :: (load (s32) from %stack.7 + 24, align 8)
    renamable $rax = MOV64rm %stack.7, 1, $noreg, 16, $noreg :: (load (s64) from %stack.7 + 16)
    MOV64mr %stack.13, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.13)
    renamable $r13 = MOV64rm %stack.7, 1, $noreg, 0, $noreg :: (load (s64) from %stack.7)
    renamable $r12 = MOV64rm %stack.7, 1, $noreg, 8, $noreg :: (load (s64) from %stack.7 + 8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    CALL64m renamable $r14, 8, renamable $r15, 16, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.16)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $rbx
    CALL64m renamable $r14, 8, renamable $r15, 24, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.20)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r13
    $rsi = COPY renamable $r12
    renamable $rbx = MOV64rm %stack.13, 1, $noreg, 0, $noreg :: (load (s64) from %stack.13)
    $rdx = COPY renamable $rbx
    $ecx = COPY renamable $ebp
    renamable $r8 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    CALL64m renamable $r13, 8, renamable $rbp, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.70)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.8, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r13
    $rdx = COPY renamable $r12
    $rcx = COPY renamable $rbx
    $r8d = COPY renamable $ebp
    $r9 = COPY killed renamable $r13
    renamable $r10 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    PUSH64r killed renamable $r10, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r12, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm %stack.8, 1, $noreg, 16, $noreg :: (load (s64) from %stack.8 + 16)
    MOV64mr %stack.13, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.13)
    renamable $rbx = MOV64rm %stack.8, 1, $noreg, 0, $noreg :: (load (s64) from %stack.8)
    renamable $rax = MOV64rm %stack.8, 1, $noreg, 8, $noreg :: (load (s64) from %stack.8 + 8)
    MOV64mr %stack.14, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.14)
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r15, 8, $noreg :: (load (s64) from %ir.32)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.9, 1, $noreg, 0, $noreg
    renamable $r13 = MOV64rm %stack.10, 1, $noreg, 0, $noreg :: (load (s64) from %stack.10)
    $rsi = COPY renamable $r13
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.75)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm %stack.9, 1, $noreg, 16, $noreg :: (load (s64) from %stack.9 + 16)
    MOV64mr %stack.15, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.15)
    renamable $eax = MOV32rm %stack.9, 1, $noreg, 24, $noreg, implicit-def $rax :: (load (s32) from %stack.9 + 24, align 8)
    MOV64mr %stack.17, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.17)
    renamable $rax = MOV64rm %stack.9, 1, $noreg, 0, $noreg :: (load (s64) from %stack.9)
    MOV64mr %stack.19, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.19)
    renamable $rax = MOV64rm %stack.9, 1, $noreg, 8, $noreg :: (load (s64) from %stack.9 + 8)
    MOV64mr %stack.16, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.16)
    renamable $rax = MOV64rm renamable $rbx, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i113)
    renamable $rdx = MOV64ri 4189192806087951739
    renamable $rcx = MOV64rm renamable $rbx, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i111, align 4)
    MOV64mr %stack.21, 1, $noreg, 0, $noreg, renamable $rbx :: (store (s64) into %stack.21)
    renamable $rcx = IMUL64rr killed renamable $rcx, killed renamable $rdx, implicit-def dead $eflags
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, killed renamable $rbx, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i112, align 4)
    renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rdx, 0, $noreg, implicit-def $rax :: (load (s32) from %ir.offset_ptr.i.i151)
    MOV64mr %stack.18, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.18)
    renamable $rbx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.44)
    renamable $r12 = MOV64rm %stack.1, 1, $noreg, 8, $noreg :: (dereferenceable load (s64) from %ir.45)
    renamable $rax = MOV64rm %stack.1, 1, $noreg, 16, $noreg :: (dereferenceable load (s64) from %ir.90)
    MOV64mr %stack.20, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.20)
    renamable $rax = MOVSX64rm32 %stack.1, 1, $noreg, 24, $noreg :: (dereferenceable load (s32) from %ir.46, align 8)
    MOV64mr %stack.22, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.22)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r13
    CALL64m renamable $r14, 8, renamable $r15, 16, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.16)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbp = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $r13
    CALL64m killed renamable $r14, 8, killed renamable $r15, 24, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.20)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r14 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 16
    renamable $r13 = MOV64rm %stack.12, 1, $noreg, 0, $noreg :: (load (s64) from %stack.12)
    $rsi = COPY renamable $r13
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r15 = COPY $rax
    MOV64mr $rax, 1, $noreg, 8, $noreg, killed renamable $rbp :: (store (s64) into %ir.101)
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @Iterator2, $noreg :: (load (s64) from got, align 16)
    MOV64mr renamable $r15, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.result.i168)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 16
    $rsi = COPY killed renamable $r13
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $r14 :: (store (s64) into %ir.102)
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @Iterable2, $noreg :: (load (s64) from got, align 16)
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.result.i169)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $r15 :: (store (s64) into %ir.103)
    MOV64mr %stack.2, 1, $noreg, 8, $noreg, killed renamable $rax :: (store (s64) into %ir.104)
    renamable $r13 = MOV64rm %stack.22, 1, $noreg, 0, $noreg :: (load (s64) from %stack.22)
    renamable $rax = MOV64rm renamable $rbx, 8, renamable $r13, 56, $noreg :: (load (s64) from %ir.109)
    renamable $rbp = MOV64rm %stack.21, 1, $noreg, 0, $noreg :: (load (s64) from %stack.21)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, renamable $rbp :: (store (s64) into %ir.111)
    renamable $r14 = MOV64rm %stack.19, 1, $noreg, 0, $noreg :: (load (s64) from %stack.19)
    MOV64mr %stack.3, 1, $noreg, 8, $noreg, renamable $r14 :: (store (s64) into %ir.112)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r8 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $rbx
    $rsi = COPY renamable $r12
    renamable $r15 = MOV64rm %stack.20, 1, $noreg, 0, $noreg :: (load (s64) from %stack.20)
    $rdx = COPY renamable $r15
    $ecx = COPY renamable $r13d
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 88, 0, 88, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r10 = LEA64r %stack.2, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $rbx
    $rsi = COPY renamable $r12
    $rdx = COPY renamable $r15
    $ecx = COPY renamable $r13d
    $r8 = COPY killed renamable $rbx
    $r9 = COPY killed renamable $r12
    PUSH64rmm %stack.17, 1, $noreg, 0, $noreg, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 80), (load (s64) from %stack.17)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64rmm %stack.15, 1, $noreg, 0, $noreg, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 72), (load (s64) from %stack.15)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64rmm %stack.16, 1, $noreg, 0, $noreg, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 64), (load (s64) from %stack.16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r14, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 56)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64rmm %stack.18, 1, $noreg, 0, $noreg, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 48), (load (s64) from %stack.18)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64rmm %stack.13, 1, $noreg, 0, $noreg, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 40), (load (s64) from %stack.13)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64rmm %stack.14, 1, $noreg, 0, $noreg, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 32), (load (s64) from %stack.14)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r10, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r13, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r15, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 88, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r8 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.44)
    renamable $rcx = MOV64rm %stack.1, 1, $noreg, 8, $noreg :: (dereferenceable load (s64) from %ir.45)
    renamable $rdx = MOV64rm %stack.1, 1, $noreg, 16, $noreg :: (dereferenceable load (s64) from %ir.90)
    renamable $rsi = MOV64rm renamable $r8, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i173)
    renamable $rax = MOV64ri 4189192806087951739
    renamable $rax = IMUL64rm killed renamable $rax, renamable $r8, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i171, align 4)
    renamable $rdi = COPY renamable $rax
    renamable $rdi = SHR64ri killed renamable $rdi, 32, implicit-def dead $eflags
    renamable $rdi = XOR64rr killed renamable $rdi, killed renamable $rax, implicit-def dead $eflags
    renamable $rdi = AND64rm killed renamable $rdi, renamable $r8, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i172, align 4)
    renamable $esi = MOV32rm killed renamable $rsi, 4, killed renamable $rdi, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i181)
    renamable $rax = MOV64rm %stack.11, 1, $noreg, 0, $noreg :: (load (s64) from %stack.11)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rdx :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $rcx :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $r8 :: (store (s64))
    MOV32mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $esi :: (store (s32), align 8)
    RET 0, $rax

...
---
name:            ProductIterator2_field_ProductIterator2_0
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 32, $noreg :: (load (s64) from %ir.2)
    RET 0, $rax

...
---
name:            ProductIterator2_field_ProductIterator2_1
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.2)
    RET 0, $rax

...
---
name:            ProductIterator2_field_ProductIterator2_2
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 48, $noreg :: (load (s64) from %ir.2)
    RET 0, $rax

...
---
name:            ProductIterator2_B_init_first_iteratorIterator2T_second_iterableIterable2U
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 128, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            ProductIterator2_B_next_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 136, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            ProductIterator2_init_first_iteratorIterator2T_second_iterableIterable2U
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    16
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 80, size: 4, alignment: 16, isImmutable: true }
  - { id: 1, offset: 72, size: 8, alignment: 8, isImmutable: true }
  - { id: 2, offset: 64, size: 8, alignment: 16, isImmutable: true }
  - { id: 3, offset: 56, size: 8, alignment: 8, isImmutable: true }
  - { id: 4, offset: 48, size: 4, alignment: 16, isImmutable: true }
  - { id: 5, offset: 40, size: 8, alignment: 8, isImmutable: true }
  - { id: 6, offset: 32, size: 8, alignment: 16, isImmutable: true }
  - { id: 7, offset: 24, size: 8, alignment: 8, isImmutable: true }
  - { id: 8, offset: 16, size: 8, alignment: 16, isImmutable: true }
  - { id: 9, offset: 8, size: 4, alignment: 8, isImmutable: true }
  - { id: 10, size: 8, alignment: 16, isImmutable: true }
stack:
  - { id: 0, size: 1, alignment: 8 }
  - { id: 1, size: 32, alignment: 8 }
  - { id: 2, size: 32, alignment: 8 }
  - { id: 3, size: 32, alignment: 8 }
  - { id: 4, size: 48, alignment: 16 }
  - { id: 5, type: spill-slot, size: 8, alignment: 8 }
  - { id: 6, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.5):
    liveins: $rdi, $rsi
  
    renamable $rbp = COPY $rsi
    renamable $r14 = COPY $rdi
    renamable $r15 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.2, align 16)
    renamable $r12 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.1)
    renamable $r13 = MOV64rm %fixed-stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.3)
    renamable $rdx = MOV64rm %fixed-stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.6, align 16)
    renamable $rcx = MOV64rm %fixed-stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.5)
    renamable $rsi = MOV64rm %fixed-stack.7, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.7)
    renamable $rax = MOV64rm $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $r9 = MOV64ri 4440657219728359865
    renamable $r9 = IMUL64rm killed renamable $r9, $rdi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $r8 = COPY renamable $r9
    renamable $r8 = SHR64ri killed renamable $r8, 32, implicit-def dead $eflags
    renamable $r8 = XOR64rr killed renamable $r8, killed renamable $r9, implicit-def dead $eflags
    renamable $r8 = AND64rm killed renamable $r8, $rdi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $r9 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $r8, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm renamable $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i46)
    renamable $r8 = MOV64ri 4189192806087951739
    renamable $rdi = MOV64rm renamable $rsi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i44, align 4)
    renamable $rdi = IMUL64rr killed renamable $rdi, killed renamable $r8, implicit-def dead $eflags
    renamable $r8 = COPY renamable $rdi
    renamable $r8 = SHR64ri killed renamable $r8, 32, implicit-def dead $eflags
    renamable $r8 = XOR64rr killed renamable $r8, killed renamable $rdi, implicit-def dead $eflags
    renamable $r8 = AND64rm killed renamable $r8, renamable $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i45, align 4)
    renamable $r8d = MOV32rm killed renamable $rax, 4, killed renamable $r8, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i54)
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r9, 0, $noreg :: (load (s64) from %ir.9)
    renamable $rbx = COPY killed renamable $r9
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbp
    CALL64m killed renamable $rax, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.11)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm renamable $r13, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i74)
    renamable $rcx = MOV64ri 5693646204635713916
    renamable $rcx = IMUL64rm killed renamable $rcx, renamable $r13, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i72, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, renamable $r13, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i73, align 4)
    renamable $r8d = MOV32rm killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i82)
    renamable $rax = MOV64rm renamable $r14, 8, renamable $rbx, 16, $noreg :: (load (s64) from %ir.18)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbp
    $rsi = COPY killed renamable $r13
    $rdx = COPY killed renamable $r15
    $rcx = COPY killed renamable $r12
    CALL64m killed renamable $rax, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.20)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm renamable $r14, 8, renamable $rbx, 16, $noreg :: (load (s64) from %ir.18)
    renamable $r12 = COPY killed renamable $rbx
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.1, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $rbp
    MOV64mr %stack.5, 1, $noreg, 0, $noreg, renamable $rbp :: (store (s64) into %stack.5)
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.27)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = MOVSX64rm32 %stack.1, 1, $noreg, 24, $noreg :: (load (s32) from %stack.1 + 24, align 8)
    renamable $rax = MOV64rm %stack.1, 1, $noreg, 16, $noreg :: (load (s64) from %stack.1 + 16)
    MOV64mr %stack.6, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.6)
    renamable $r15 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %stack.1)
    renamable $r13 = MOV64rm %stack.1, 1, $noreg, 8, $noreg :: (load (s64) from %stack.1 + 8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbp
    CALL64m renamable $r14, 8, renamable $r12, 32, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.35)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $rbp
    renamable $rbp = COPY renamable $r12
    CALL64m renamable $r14, 8, $r12, 40, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.39)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r8 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $r15
    $rsi = COPY renamable $r13
    renamable $r12 = MOV64rm %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %stack.6)
    $rdx = COPY renamable $r12
    $ecx = COPY renamable $ebx
    CALL64m renamable $r15, 8, renamable $rbx, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.46)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.2, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r15
    $rdx = COPY renamable $r13
    $rcx = COPY renamable $r12
    $r8d = COPY renamable $ebx
    $r9 = COPY killed renamable $r15
    renamable $r10 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    PUSH64r killed renamable $r10, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r12, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r13, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = MOV64rm %stack.2, 1, $noreg, 16, $noreg :: (load (s64) from %stack.2 + 16)
    renamable $rsi = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %stack.2)
    renamable $rdx = MOV64rm %stack.2, 1, $noreg, 8, $noreg :: (load (s64) from %stack.2 + 8)
    renamable $rax = MOV64rm renamable $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i116)
    renamable $r8 = MOV64ri 4189192806087951739
    renamable $r8 = IMUL64rm killed renamable $r8, renamable $rsi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i114, align 4)
    renamable $rdi = COPY renamable $r8
    renamable $rdi = SHR64ri killed renamable $rdi, 32, implicit-def dead $eflags
    renamable $rdi = XOR64rr killed renamable $rdi, killed renamable $r8, implicit-def dead $eflags
    renamable $rdi = AND64rm killed renamable $rdi, renamable $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i115, align 4)
    renamable $r8d = MOV32rm killed renamable $rax, 4, killed renamable $rdi, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i124)
    renamable $rbx = COPY renamable $rbp
    renamable $rax = MOV64rm renamable $r14, 8, $rbp, 8, $noreg :: (load (s64) from %ir.51)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r15 = MOV64rm %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %stack.5)
    $rdi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.53)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm renamable $r14, 8, $rbp, 0, $noreg :: (load (s64) from %ir.9)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.3, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.60)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbp = MOVSX64rm32 %stack.3, 1, $noreg, 24, $noreg :: (load (s32) from %stack.3 + 24, align 8)
    renamable $rax = MOV64rm %stack.3, 1, $noreg, 16, $noreg :: (load (s64) from %stack.3 + 16)
    MOV64mr %stack.6, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.6)
    renamable $r12 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %stack.3)
    renamable $r13 = MOV64rm %stack.3, 1, $noreg, 8, $noreg :: (load (s64) from %stack.3 + 8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    CALL64m renamable $r14, 8, renamable $rbx, 32, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.35)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $r15
    CALL64m renamable $r14, 8, renamable $rbx, 40, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.39)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r12
    $rsi = COPY renamable $r13
    renamable $r15 = MOV64rm %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %stack.6)
    $rdx = COPY renamable $r15
    $ecx = COPY renamable $ebp
    renamable $r8 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    CALL64m renamable $r12, 8, renamable $rbp, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.77)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.4, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r12
    $rdx = COPY renamable $r13
    $rcx = COPY renamable $r15
    $r8d = COPY renamable $ebp
    $r9 = COPY killed renamable $r12
    renamable $r10 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    PUSH64r killed renamable $r10, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r15, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r13, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r8d = MOV32rm %stack.4, 1, $noreg, 32, $noreg, implicit-def $r8 :: (load (s32) from %stack.4 + 32, align 16)
    renamable $rcx = MOV64rm %stack.4, 1, $noreg, 24, $noreg :: (load (s64) from %stack.4 + 24, basealign 16)
    renamable $rsi = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %stack.4, align 16)
    renamable $rdx = MOV64rm %stack.4, 1, $noreg, 16, $noreg :: (load (s64) from %stack.4 + 16, align 16)
    renamable $rax = MOV64rm killed renamable $r14, 8, killed renamable $rbx, 24, $noreg :: (load (s64) from %ir.82)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV64rm %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %stack.5)
    CALL64m killed renamable $rax, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.84)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    RET 0

...
---
name:            ProductIterator2_next_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
frameInfo:
  maxAlignment:    16
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 24, size: 8, alignment: 8, isImmutable: true }
  - { id: 1, offset: 16, size: 4, alignment: 16, isImmutable: true }
  - { id: 2, offset: 8, size: 8, alignment: 8, isImmutable: true }
  - { id: 3, size: 8, alignment: 16, isImmutable: true }
stack:
  - { id: 0, size: 1, alignment: 8 }
  - { id: 1, size: 32, alignment: 8 }
  - { id: 2, size: 48, alignment: 16 }
  - { id: 3, size: 32, alignment: 8 }
  - { id: 4, size: 48, alignment: 16 }
  - { id: 5, size: 32, alignment: 8 }
  - { id: 6, size: 48, alignment: 16 }
  - { id: 7, size: 32, alignment: 8 }
  - { id: 8, size: 32, alignment: 8 }
  - { id: 9, size: 48, alignment: 16 }
  - { id: 10, type: spill-slot, size: 8, alignment: 8 }
  - { id: 11, type: spill-slot, size: 8, alignment: 8 }
  - { id: 12, type: spill-slot, size: 8, alignment: 8 }
  - { id: 13, type: spill-slot, size: 8, alignment: 8 }
  - { id: 14, type: spill-slot, size: 8, alignment: 8 }
  - { id: 15, type: spill-slot, size: 8, alignment: 8 }
  - { id: 16, type: spill-slot, size: 8, alignment: 8 }
  - { id: 17, type: spill-slot, size: 8, alignment: 8 }
  - { id: 18, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.3):
    liveins: $rdi, $rdx, $rsi
  
    renamable $r13 = COPY $rdx
    renamable $r14 = COPY $rsi
    renamable $rbx = COPY $rdi
    renamable $rax = MOV64rm $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri 4440657219728359865
    renamable $rcx = IMUL64rm killed renamable $rcx, $rsi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $r15 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm $rsi, 8, renamable $r15, 24, $noreg :: (load (s64) from %ir.8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.2, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r13
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.9)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rsi = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %stack.2, align 16)
    renamable $rdx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @nil_typ, $noreg :: (load (s64) from got)
    CMP64rr renamable $rsi, renamable $rdx, implicit-def $eflags
    renamable $al = SETCCr 4, implicit killed $eflags
    TEST64rr renamable $rsi, renamable $rsi, implicit-def $eflags
    renamable $cl = SETCCr 4, implicit killed $eflags
    dead renamable $cl = OR8rr killed renamable $cl, killed renamable $al, implicit-def $eflags
    JCC_1 %bb.2, 4, implicit killed $eflags
  
  bb.1:
    liveins: $rbx, $rdx
  
    renamable $esi = MOV32r0 implicit-def dead $eflags, implicit-def $rsi
    renamable $rax = IMPLICIT_DEF
    renamable $rcx = IMPLICIT_DEF
    JMP_1 %bb.7
  
  bb.2..lr.ph:
    liveins: $rbx, $rsi, $r13, $r14, $r15
  
    MOV64mr %stack.16, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %stack.16)
    renamable $rax = MOV64rm %stack.2, 1, $noreg, 24, $noreg :: (load (s64) from %stack.2 + 24, basealign 16)
    renamable $rcx = MOV64rm %stack.2, 1, $noreg, 16, $noreg :: (load (s64) from %stack.2 + 16, align 16)
    MOV64mr %stack.11, 1, $noreg, 0, $noreg, renamable $r14 :: (store (s64) into %stack.11)
    MOV64mr %stack.10, 1, $noreg, 0, $noreg, renamable $r13 :: (store (s64) into %stack.10)
  
  bb.3 (%ir-block.16):
    successors: %bb.6(0x04000000), %bb.4(0x7c000000)
    liveins: $rax, $rcx, $rsi, $r13, $r14, $r15
  
    MOV64mr %stack.15, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %stack.15)
    MOV64mr %stack.14, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.14)
    MOV64mr %stack.13, 1, $noreg, 0, $noreg, killed renamable $rsi :: (store (s64) into %stack.13)
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r15, 8, $noreg :: (load (s64) from %ir.sunkaddr3)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.3, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r13
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.17)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbp = MOVSX64rm32 %stack.3, 1, $noreg, 24, $noreg :: (load (s32) from %stack.3 + 24, align 8)
    renamable $r12 = MOV64rm %stack.3, 1, $noreg, 16, $noreg :: (load (s64) from %stack.3 + 16)
    renamable $rbx = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %stack.3)
    renamable $rax = MOV64rm %stack.3, 1, $noreg, 8, $noreg :: (load (s64) from %stack.3 + 8)
    MOV64mr %stack.12, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.12)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r13
    CALL64m renamable $r14, 8, renamable $r15, 32, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.sunkaddr6)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $r13
    renamable $r13 = COPY renamable $r15
    CALL64m killed renamable $r14, 8, killed renamable $r15, 40, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.sunkaddr9)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    renamable $r15 = MOV64rm %stack.12, 1, $noreg, 0, $noreg :: (load (s64) from %stack.12)
    $rsi = COPY renamable $r15
    $rdx = COPY renamable $r12
    $ecx = COPY renamable $ebp
    renamable $r14 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $r8 = COPY renamable $r14
    CALL64m renamable $rbx, 8, renamable $rbp, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.34)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.4, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $rbx
    $rdx = COPY renamable $r15
    $rcx = COPY renamable $r12
    $r8d = COPY renamable $ebp
    $r9 = COPY killed renamable $rbx
    PUSH64r killed renamable $r14, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r12, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r15, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbp = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %stack.4, align 16)
    CMP64rm renamable $rbp, $rip, 1, $noreg, target-flags(x86-gotpcrel) @nil_typ, $noreg, implicit-def $eflags :: (load (s64) from got)
    renamable $al = SETCCr 5, implicit killed $eflags
    TEST64rr renamable $rbp, renamable $rbp, implicit-def $eflags
    renamable $cl = SETCCr 5, implicit killed $eflags
    TEST8rr killed renamable $al, killed renamable $cl, implicit-def $eflags
    JCC_1 %bb.6, 5, implicit killed $eflags
    JMP_1 %bb.4
  
  bb.4 (%ir-block.40):
    successors: %bb.5(0x7e000000), %bb.8(0x02000000)
    liveins: $r13
  
    renamable $r14 = MOV64rm %stack.11, 1, $noreg, 0, $noreg :: (load (s64) from %stack.11)
    renamable $r15 = COPY renamable $r13
    renamable $rax = MOV64rm renamable $r14, 8, $r13, 0, $noreg :: (load (s64) from %ir.sunkaddr11)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.5, 1, $noreg, 0, $noreg
    renamable $rbx = MOV64rm %stack.10, 1, $noreg, 0, $noreg :: (load (s64) from %stack.10)
    $rsi = COPY renamable $rbx
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.42)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbp = MOVSX64rm32 %stack.5, 1, $noreg, 24, $noreg :: (load (s32) from %stack.5 + 24, align 8)
    renamable $rax = MOV64rm %stack.5, 1, $noreg, 16, $noreg :: (load (s64) from %stack.5 + 16)
    MOV64mr %stack.12, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.12)
    renamable $r13 = MOV64rm %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %stack.5)
    renamable $r12 = MOV64rm %stack.5, 1, $noreg, 8, $noreg :: (load (s64) from %stack.5 + 8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    CALL64m renamable $r14, 8, renamable $r15, 32, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.sunkaddr14)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $rbx
    CALL64m renamable $r14, 8, renamable $r15, 40, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.sunkaddr17)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r13
    $rsi = COPY renamable $r12
    renamable $rbx = MOV64rm %stack.12, 1, $noreg, 0, $noreg :: (load (s64) from %stack.12)
    $rdx = COPY renamable $rbx
    $ecx = COPY renamable $ebp
    renamable $r8 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    CALL64m renamable $r13, 8, renamable $rbp, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.59)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.6, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r13
    $rdx = COPY renamable $r12
    $rcx = COPY renamable $rbx
    $r8d = COPY renamable $ebp
    $r9 = COPY killed renamable $r13
    renamable $r10 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    PUSH64r killed renamable $r10, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r12, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r8d = MOV32rm %stack.6, 1, $noreg, 32, $noreg, implicit-def $r8 :: (load (s32) from %stack.6 + 32, align 16)
    renamable $rcx = MOV64rm %stack.6, 1, $noreg, 24, $noreg :: (load (s64) from %stack.6 + 24, basealign 16)
    renamable $rsi = MOV64rm %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %stack.6, align 16)
    renamable $rdx = MOV64rm %stack.6, 1, $noreg, 16, $noreg :: (load (s64) from %stack.6 + 16, align 16)
    renamable $rbx = COPY renamable $r14
    renamable $rax = MOV64rm $r14, 8, renamable $r15, 24, $noreg :: (load (s64) from %ir.sunkaddr20)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r14 = MOV64rm %stack.10, 1, $noreg, 0, $noreg :: (load (s64) from %stack.10)
    $rdi = COPY renamable $r14
    CALL64m killed renamable $rax, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.65)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm killed renamable $rbx, 8, renamable $r15, 16, $noreg :: (load (s64) from %ir.sunkaddr23)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.7, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r14
    renamable $rbx = COPY renamable $r14
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.68)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbp = MOVSX64rm32 %stack.7, 1, $noreg, 24, $noreg :: (load (s32) from %stack.7 + 24, align 8)
    renamable $rax = MOV64rm %stack.7, 1, $noreg, 16, $noreg :: (load (s64) from %stack.7 + 16)
    MOV64mr %stack.12, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.12)
    renamable $r13 = MOV64rm %stack.7, 1, $noreg, 0, $noreg :: (load (s64) from %stack.7)
    renamable $r12 = MOV64rm %stack.7, 1, $noreg, 8, $noreg :: (load (s64) from %stack.7 + 8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY $r14
    renamable $r14 = MOV64rm %stack.11, 1, $noreg, 0, $noreg :: (load (s64) from %stack.11)
    CALL64m renamable $r14, 8, renamable $r15, 32, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.sunkaddr14)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $rbx
    CALL64m renamable $r14, 8, renamable $r15, 40, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.sunkaddr17)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r13
    $rsi = COPY renamable $r12
    renamable $rbx = MOV64rm %stack.12, 1, $noreg, 0, $noreg :: (load (s64) from %stack.12)
    $rdx = COPY renamable $rbx
    $ecx = COPY renamable $ebp
    renamable $r8 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    CALL64m renamable $r13, 8, renamable $rbp, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.85)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.8, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r13
    $rdx = COPY renamable $r12
    $rcx = COPY renamable $rbx
    $r8d = COPY renamable $ebp
    $r9 = COPY killed renamable $r13
    renamable $r10 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    PUSH64r killed renamable $r10, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r12, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = MOV64rm %stack.8, 1, $noreg, 16, $noreg :: (load (s64) from %stack.8 + 16)
    renamable $rsi = MOV64rm %stack.8, 1, $noreg, 0, $noreg :: (load (s64) from %stack.8)
    renamable $rdx = MOV64rm %stack.8, 1, $noreg, 8, $noreg :: (load (s64) from %stack.8 + 8)
    renamable $rax = MOV64rm renamable $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i131)
    renamable $rdi = MOV64rm renamable $rsi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i129, align 4)
    renamable $r8 = MOV64ri 4189192806087951739
    renamable $rdi = IMUL64rr killed renamable $rdi, killed renamable $r8, implicit-def dead $eflags
    renamable $r8 = COPY renamable $rdi
    renamable $r8 = SHR64ri killed renamable $r8, 32, implicit-def dead $eflags
    renamable $r8 = XOR64rr killed renamable $r8, killed renamable $rdi, implicit-def dead $eflags
    renamable $r8 = AND64rm killed renamable $r8, renamable $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i130, align 4)
    renamable $r8d = MOV32rm killed renamable $rax, 4, killed renamable $r8, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i139)
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r15, 8, $noreg :: (load (s64) from %ir.sunkaddr26)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r13 = MOV64rm %stack.10, 1, $noreg, 0, $noreg :: (load (s64) from %stack.10)
    $rdi = COPY renamable $r13
    CALL64m killed renamable $rax, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.91)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = COPY renamable $r15
    renamable $rax = MOV64rm renamable $r14, 8, killed renamable $r15, 24, $noreg :: (load (s64) from %ir.sunkaddr20)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.9, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r13
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.98)
    renamable $rdx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @nil_typ, $noreg :: (load (s64) from got)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rsi = MOV64rm %stack.9, 1, $noreg, 0, $noreg :: (load (s64) from %stack.9, align 16)
    CMP64rr renamable $rsi, renamable $rdx, implicit-def $eflags
    JCC_1 %bb.5, 5, implicit killed $eflags
  
  bb.8:
    liveins: $rdx
  
    renamable $rax = IMPLICIT_DEF
    renamable $rcx = IMPLICIT_DEF
    renamable $rbx = MOV64rm %stack.16, 1, $noreg, 0, $noreg :: (load (s64) from %stack.16)
    renamable $esi = MOV32r0 implicit-def dead $eflags, implicit-def $rsi
    JMP_1 %bb.7
  
  bb.5 (%ir-block.40):
    successors: %bb.3(0x7df7df7e), %bb.9(0x02082082)
    liveins: $rbx, $rdx, $rsi, $r13, $r14
  
    renamable $rax = MOV64rm %stack.9, 1, $noreg, 24, $noreg :: (load (s64) from %stack.9 + 24, basealign 16)
    renamable $rcx = MOV64rm %stack.9, 1, $noreg, 16, $noreg :: (load (s64) from %stack.9 + 16, align 16)
    TEST64rr renamable $rsi, renamable $rsi, implicit-def $eflags
    renamable $r15 = COPY killed renamable $rbx
    JCC_1 %bb.3, 5, implicit killed $eflags
  
  bb.9:
    liveins: $rdx
  
    renamable $rax = IMPLICIT_DEF
    renamable $rcx = IMPLICIT_DEF
    renamable $rbx = MOV64rm %stack.16, 1, $noreg, 0, $noreg :: (load (s64) from %stack.16)
    renamable $esi = MOV32r0 implicit-def dead $eflags, implicit-def $rsi
    JMP_1 %bb.7
  
  bb.6 (%ir-block.103):
    liveins: $rbp, $r13
  
    renamable $rax = MOV64rm %stack.4, 1, $noreg, 24, $noreg :: (load (s64) from %stack.4 + 24, basealign 16)
    MOV64mr %stack.17, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.17)
    renamable $rax = MOV64rm %stack.4, 1, $noreg, 16, $noreg :: (load (s64) from %stack.4 + 16, align 16)
    MOV64mr %stack.12, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.12)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r15 = MOV64rm %stack.10, 1, $noreg, 0, $noreg :: (load (s64) from %stack.10)
    $rdi = COPY renamable $r15
    renamable $r14 = MOV64rm %stack.11, 1, $noreg, 0, $noreg :: (load (s64) from %stack.11)
    CALL64m renamable $r14, 8, renamable $r13, 32, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.sunkaddr29)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    MOV64mr %stack.18, 1, $noreg, 0, $noreg, $rax :: (store (s64) into %stack.18)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    CALL64m renamable $r14, 8, renamable $r13, 40, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.sunkaddr32)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r12 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $rsi = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    $rdi = MOV32ri64 80
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = COPY $rax
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @Pair, $noreg :: (load (s64) from got, align 16)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.12)
    MOV64mr %stack.1, 1, $noreg, 8, $noreg, renamable $rbx :: (store (s64) into %ir.110)
    MOV32mi %stack.1, 1, $noreg, 24, $noreg, 7 :: (store (s32) into %ir.111, align 8)
    renamable $rax = MOV64rm %stack.18, 1, $noreg, 0, $noreg :: (load (s64) from %stack.18)
    MOV64mr renamable $rbx, 1, $noreg, 64, $noreg, killed renamable $rax :: (store (s64) into %ir.113)
    MOV64mr renamable $rbx, 1, $noreg, 72, $noreg, killed renamable $r12 :: (store (s64) into %ir.114)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    CALL64m renamable $r14, 8, renamable $r13, 32, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.sunkaddr29)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $r15
    CALL64m killed renamable $r14, 8, killed renamable $r13, 40, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.sunkaddr32)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = MOV64rm %stack.13, 1, $noreg, 0, $noreg :: (load (s64) from %stack.13)
    renamable $rax = MOV64rm renamable $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i173)
    renamable $rcx = MOV64ri 3084208142191802847
    renamable $rdx = MOV64rm renamable $rdi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i171, align 4)
    renamable $rdx = IMUL64rr killed renamable $rdx, renamable $rcx, implicit-def dead $eflags
    renamable $rsi = COPY renamable $rdx
    renamable $rsi = SHR64ri killed renamable $rsi, 32, implicit-def dead $eflags
    renamable $rsi = XOR64rr killed renamable $rsi, killed renamable $rdx, implicit-def dead $eflags
    renamable $rsi = AND64rm killed renamable $rsi, renamable $rdi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i172, align 4)
    renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rsi, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i18.i)
    MOV64mr renamable $rbx, 1, $noreg, 0, $noreg, killed renamable $rdi :: (store (s64) into %ir.result.i)
    renamable $rdx = MOV64rm %stack.14, 1, $noreg, 0, $noreg :: (load (s64) from %stack.14)
    MOV64mr renamable $rbx, 1, $noreg, 16, $noreg, killed renamable $rdx :: (store (s64) into %ir.123 + 8, align 4)
    renamable $rdx = MOV64rm %stack.15, 1, $noreg, 0, $noreg :: (load (s64) from %stack.15)
    MOV64mr renamable $rbx, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64) into %ir.123, align 4)
    MOV32mr renamable $rbx, 1, $noreg, 24, $noreg, killed renamable $eax :: (store (s32) into %ir.123 + 16)
    renamable $rax = MOV64rm renamable $rbp, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i159)
    renamable $rcx = IMUL64rm killed renamable $rcx, renamable $rbp, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i157, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, renamable $rbp, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i158, align 4)
    renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i46.i)
    MOV64mr renamable $rbx, 1, $noreg, 32, $noreg, killed renamable $rbp :: (store (s64) into %ir.125)
    renamable $rcx = MOV64rm %stack.17, 1, $noreg, 0, $noreg :: (load (s64) from %stack.17)
    MOV64mr renamable $rbx, 1, $noreg, 48, $noreg, killed renamable $rcx :: (store (s64) into %ir.126 + 8, align 4)
    renamable $rcx = MOV64rm %stack.12, 1, $noreg, 0, $noreg :: (load (s64) from %stack.12)
    MOV64mr renamable $rbx, 1, $noreg, 40, $noreg, killed renamable $rcx :: (store (s64) into %ir.126, align 4)
    MOV32mr killed renamable $rbx, 1, $noreg, 56, $noreg, killed renamable $eax :: (store (s32) into %ir.126 + 16)
    renamable $rdx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.12)
    renamable $esi = MOV32rm %stack.1, 1, $noreg, 24, $noreg, implicit-def $rsi :: (dereferenceable load (s32) from %ir.110 + 16, align 8)
    renamable $rax = MOV64rm %stack.1, 1, $noreg, 8, $noreg :: (dereferenceable load (s64) from %ir.110)
    renamable $rcx = MOV64rm %stack.1, 1, $noreg, 16, $noreg :: (dereferenceable load (s64) from %ir.110 + 8)
    renamable $rbx = MOV64rm %stack.16, 1, $noreg, 0, $noreg :: (load (s64) from %stack.16)
  
  bb.7..loopexit:
    liveins: $rax, $rbx, $rcx, $rdx, $rsi
  
    MOV64mr renamable $rbx, 1, $noreg, 16, $noreg, killed renamable $rax :: (store (s64), align 16)
    MOV64mr renamable $rbx, 1, $noreg, 0, $noreg, killed renamable $rdx :: (store (s64), align 16)
    MOV64mr renamable $rbx, 1, $noreg, 24, $noreg, killed renamable $rcx :: (store (s64) into unknown-address + 8, basealign 16)
    MOV32mr renamable $rbx, 1, $noreg, 32, $noreg, renamable $esi, implicit killed $rsi :: (store (s32) into unknown-address + 16, align 16)
    $rax = COPY killed renamable $rbx
    RET 0, $rax

...
---
name:            ProductIterator2_getter_current_first
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi, $rsi
  
    renamable $rax = COPY $rdi
    renamable $ecx = MOV32rm renamable $rsi, 1, $noreg, 120, $noreg :: (load (s32) from %ir.5 + 16)
    renamable $rdx = MOV64rm renamable $rsi, 1, $noreg, 96, $noreg :: (load (s64) from %ir.2)
    renamable $rdi = MOV64rm renamable $rsi, 1, $noreg, 104, $noreg :: (load (s64) from %ir.5, align 4)
    renamable $rsi = MOV64rm killed renamable $rsi, 1, $noreg, 112, $noreg :: (load (s64) from %ir.5 + 8, align 4)
    MOV64mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $rsi :: (store (s64) into unknown-address + 8, basealign 16)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rdi :: (store (s64), align 16)
    MOV32mr renamable $rax, 1, $noreg, 32, $noreg, killed renamable $ecx :: (store (s32) into unknown-address + 16, align 16)
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rdx :: (store (s64), align 16)
    RET 0, $rax

...
---
name:            ProductIterator2_setter_current_first
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
  - { reg: '$rcx' }
  - { reg: '$r8' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rcx, $rdi, $rdx, $rsi, $r8
  
    MOV64mr renamable $rdi, 1, $noreg, 96, $noreg, killed renamable $rsi :: (store (s64) into %ir.3)
    MOV64mr renamable $rdi, 1, $noreg, 112, $noreg, killed renamable $rcx :: (store (s64) into %ir.4 + 8, align 4)
    MOV64mr renamable $rdi, 1, $noreg, 104, $noreg, killed renamable $rdx :: (store (s64) into %ir.4, align 4)
    MOV32mr killed renamable $rdi, 1, $noreg, 120, $noreg, renamable $r8d, implicit killed $r8 :: (store (s32) into %ir.4 + 16)
    RET 0

...
---
name:            ProductIterator2_getter_second_iterable
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi, $rsi
  
    renamable $rax = COPY $rdi
    renamable $rcx = MOV64rm renamable $rsi, 1, $noreg, 64, $noreg :: (load (s64) from %ir.2)
    renamable $rdx = MOV64rm renamable $rsi, 1, $noreg, 72, $noreg :: (load (s64) from %ir.5)
    renamable $rdi = MOV64rm renamable $rsi, 1, $noreg, 80, $noreg :: (load (s64) from %ir.8)
    renamable $esi = MOV32rm killed renamable $rsi, 1, $noreg, 88, $noreg :: (load (s32) from %ir.11)
    MOV32mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $esi :: (store (s32), align 8)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rdi :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64))
    RET 0, $rax

...
---
name:            ProductIterator2_setter_second_iterable
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
  - { reg: '$rcx' }
  - { reg: '$r8d' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rcx, $rdi, $rdx, $rsi, $r8d
  
    MOV64mr renamable $rdi, 1, $noreg, 64, $noreg, killed renamable $rsi :: (store (s64) into %ir.3)
    MOV64mr renamable $rdi, 1, $noreg, 72, $noreg, killed renamable $rdx :: (store (s64) into %ir.4)
    MOV64mr renamable $rdi, 1, $noreg, 80, $noreg, killed renamable $rcx :: (store (s64) into %ir.5)
    MOV32mr killed renamable $rdi, 1, $noreg, 88, $noreg, killed renamable $r8d :: (store (s32) into %ir.6)
    RET 0

...
---
name:            ProductIterator2_getter_second_iterator
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi, $rsi
  
    renamable $rax = COPY $rdi
    renamable $rcx = MOV64rm renamable $rsi, 1, $noreg, 32, $noreg :: (load (s64) from %ir.2)
    renamable $rdx = MOV64rm renamable $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.5)
    renamable $rdi = MOV64rm renamable $rsi, 1, $noreg, 48, $noreg :: (load (s64) from %ir.8)
    renamable $esi = MOV32rm killed renamable $rsi, 1, $noreg, 56, $noreg :: (load (s32) from %ir.11)
    MOV32mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $esi :: (store (s32), align 8)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rdi :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64))
    RET 0, $rax

...
---
name:            ProductIterator2_setter_second_iterator
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
  - { reg: '$rcx' }
  - { reg: '$r8d' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rcx, $rdi, $rdx, $rsi, $r8d
  
    MOV64mr renamable $rdi, 1, $noreg, 32, $noreg, killed renamable $rsi :: (store (s64) into %ir.3)
    MOV64mr renamable $rdi, 1, $noreg, 40, $noreg, killed renamable $rdx :: (store (s64) into %ir.4)
    MOV64mr renamable $rdi, 1, $noreg, 48, $noreg, killed renamable $rcx :: (store (s64) into %ir.5)
    MOV32mr killed renamable $rdi, 1, $noreg, 56, $noreg, killed renamable $r8d :: (store (s32) into %ir.6)
    RET 0

...
---
name:            ProductIterator2_getter_first_iterator
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi, $rsi
  
    renamable $rax = COPY $rdi
    renamable $rcx = MOV64rm renamable $rsi, 1, $noreg, 0, $noreg :: (load (s64) from %ir.0)
    renamable $rdx = MOV64rm renamable $rsi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.4)
    renamable $rdi = MOV64rm renamable $rsi, 1, $noreg, 16, $noreg :: (load (s64) from %ir.7)
    renamable $esi = MOV32rm killed renamable $rsi, 1, $noreg, 24, $noreg :: (load (s32) from %ir.10)
    MOV32mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $esi :: (store (s32), align 8)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rdi :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64))
    RET 0, $rax

...
---
name:            ProductIterator2_setter_first_iterator
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
  - { reg: '$rcx' }
  - { reg: '$r8d' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rcx, $rdi, $rdx, $rsi, $r8d
  
    MOV64mr renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $rsi :: (store (s64) into %ir.0)
    MOV64mr renamable $rdi, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64) into %ir.3)
    MOV64mr renamable $rdi, 1, $noreg, 16, $noreg, killed renamable $rcx :: (store (s64) into %ir.4)
    MOV32mr killed renamable $rdi, 1, $noreg, 24, $noreg, killed renamable $r8d :: (store (s32) into %ir.5)
    RET 0

...
---
name:            ProductIterable2_getter_second
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi, $rsi
  
    renamable $rax = COPY $rdi
    renamable $rcx = MOV64rm renamable $rsi, 1, $noreg, 32, $noreg :: (load (s64) from %ir.2)
    renamable $rdx = MOV64rm renamable $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.5)
    renamable $rdi = MOV64rm renamable $rsi, 1, $noreg, 48, $noreg :: (load (s64) from %ir.8)
    renamable $esi = MOV32rm killed renamable $rsi, 1, $noreg, 56, $noreg :: (load (s32) from %ir.11)
    MOV32mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $esi :: (store (s32), align 8)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rdi :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64))
    RET 0, $rax

...
---
name:            ProductIterable2_setter_second
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
  - { reg: '$rcx' }
  - { reg: '$r8d' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rcx, $rdi, $rdx, $rsi, $r8d
  
    MOV64mr renamable $rdi, 1, $noreg, 32, $noreg, killed renamable $rsi :: (store (s64) into %ir.3)
    MOV64mr renamable $rdi, 1, $noreg, 40, $noreg, killed renamable $rdx :: (store (s64) into %ir.4)
    MOV64mr renamable $rdi, 1, $noreg, 48, $noreg, killed renamable $rcx :: (store (s64) into %ir.5)
    MOV32mr killed renamable $rdi, 1, $noreg, 56, $noreg, killed renamable $r8d :: (store (s32) into %ir.6)
    RET 0

...
---
name:            ProductIterable2_getter_first
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi, $rsi
  
    renamable $rax = COPY $rdi
    renamable $rcx = MOV64rm renamable $rsi, 1, $noreg, 0, $noreg :: (load (s64) from %ir.0)
    renamable $rdx = MOV64rm renamable $rsi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.4)
    renamable $rdi = MOV64rm renamable $rsi, 1, $noreg, 16, $noreg :: (load (s64) from %ir.7)
    renamable $esi = MOV32rm killed renamable $rsi, 1, $noreg, 24, $noreg :: (load (s32) from %ir.10)
    MOV32mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $esi :: (store (s32), align 8)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rdi :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64))
    RET 0, $rax

...
---
name:            ProductIterable2_setter_first
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
  - { reg: '$rcx' }
  - { reg: '$r8d' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rcx, $rdi, $rdx, $rsi, $r8d
  
    MOV64mr renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $rsi :: (store (s64) into %ir.0)
    MOV64mr renamable $rdi, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64) into %ir.3)
    MOV64mr renamable $rdi, 1, $noreg, 16, $noreg, killed renamable $rcx :: (store (s64) into %ir.4)
    MOV32mr killed renamable $rdi, 1, $noreg, 24, $noreg, killed renamable $r8d :: (store (s32) into %ir.5)
    RET 0

...
---
name:            ZipIterable2_field_ZipIterable2_0
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg :: (load (s64) from %ir.2)
    RET 0, $rax

...
---
name:            ZipIterable2_field_ZipIterable2_1
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 24, $noreg :: (load (s64) from %ir.2)
    RET 0, $rax

...
---
name:            ZipIterable2_field_ZipIterable2_2
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 32, $noreg :: (load (s64) from %ir.2)
    RET 0, $rax

...
---
name:            ZipIterable2_B_init_firstIterable2T_secondIterable2U
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 192, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            ZipIterable2_B_iterator_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 200, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            ZipIterable2_B_each_fFunctionT_to_Nothing
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 208, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            ZipIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 216, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            ZipIterable2_B_all_fFunctionT_to_Ptri1
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 224, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            ZipIterable2_B_any_fFunctionT_to_Ptri1
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 232, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            ZipIterable2_B_map_fFunctionT_to_U
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 240, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            ZipIterable2_B_filter_fFunctionT_to_Ptri1
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 248, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            ZipIterable2_B_chain_otherIterable2T
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 256, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            ZipIterable2_B_interleave_otherIterable2T
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 264, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            ZipIterable2_B_zip_otherIterable2U
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 272, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            ZipIterable2_B_product_otherIterable2U
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 280, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            ZipIterable2_init_firstIterable2T_secondIterable2U
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
  hasTailCall:     true
fixedStack:
  - { id: 0, offset: 80, size: 4, alignment: 16 }
  - { id: 1, offset: 72, size: 8, alignment: 8 }
  - { id: 2, offset: 64, size: 8, alignment: 16 }
  - { id: 3, offset: 56, size: 8, alignment: 8 }
  - { id: 4, offset: 48, size: 4, alignment: 16 }
  - { id: 5, offset: 40, size: 8, alignment: 8 }
  - { id: 6, offset: 32, size: 8, alignment: 16 }
  - { id: 7, offset: 24, size: 8, alignment: 8 }
  - { id: 8, offset: 16, size: 8, alignment: 16 }
  - { id: 9, offset: 8, size: 4, alignment: 8 }
  - { id: 10, size: 8, alignment: 16 }
stack:
  - { id: 0, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.5):
    liveins: $rdi, $rsi
  
    renamable $rbx = COPY $rsi
    renamable $r12 = COPY $rdi
    renamable $rax = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.2, align 16)
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.0)
    renamable $r15 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.1)
    renamable $r13 = MOV64rm %fixed-stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.3)
    renamable $rdx = MOV64rm %fixed-stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.6, align 16)
    renamable $rcx = MOV64rm %fixed-stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.5)
    renamable $rsi = MOV64rm %fixed-stack.7, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.7)
    renamable $rax = MOV64rm $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rdi = MOV64ri -3218950579047519815
    renamable $rdi = IMUL64rm killed renamable $rdi, renamable $r12, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $r8 = COPY renamable $rdi
    renamable $r8 = SHR64ri killed renamable $r8, 32, implicit-def dead $eflags
    renamable $r8 = XOR64rr killed renamable $r8, killed renamable $rdi, implicit-def dead $eflags
    renamable $r8 = AND64rm killed renamable $r8, renamable $r12, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $rbp = MOVSX64rm32 killed renamable $rax, 4, killed renamable $r8, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm renamable $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i20)
    renamable $r14 = MOV64ri 5693646204635713916
    renamable $rdi = MOV64rm renamable $rsi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i18, align 4)
    renamable $rdi = IMUL64rr killed renamable $rdi, renamable $r14, implicit-def dead $eflags
    renamable $r8 = COPY renamable $rdi
    renamable $r8 = SHR64ri killed renamable $r8, 32, implicit-def dead $eflags
    renamable $r8 = XOR64rr killed renamable $r8, killed renamable $rdi, implicit-def dead $eflags
    renamable $r8 = AND64rm killed renamable $r8, renamable $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i19, align 4)
    renamable $r8d = MOV32rm killed renamable $rax, 4, killed renamable $r8, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i28)
    renamable $rax = MOV64rm renamable $r12, 8, renamable $rbp, 0, $noreg :: (load (s64) from %ir.8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    CALL64m killed renamable $rax, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.10)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm renamable $r13, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i48)
    renamable $r14 = IMUL64rm killed renamable $r14, renamable $r13, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i46, align 4)
    renamable $rcx = COPY renamable $r14
    renamable $rcx = SHR64ri killed renamable $rcx, 32, implicit-def dead $eflags
    renamable $rcx = XOR64rr killed renamable $rcx, killed renamable $r14, implicit-def dead $eflags
    renamable $rcx = AND64rm killed renamable $rcx, renamable $r13, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i47, align 4)
    renamable $r8d = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i56)
    renamable $rax = MOV64rm killed renamable $r12, 8, killed renamable $rbp, 8, $noreg :: (load (s64) from %ir.17)
    renamable $rax = MOV64rm killed renamable $rax, 1, $noreg, 8, $noreg :: (load (s64) from %ir.19)
    $rdi = COPY killed renamable $rbx
    $rsi = COPY killed renamable $r13
    $rdx = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %stack.0)
    $rcx = COPY killed renamable $r15
    TCRETURNri64 killed renamable $rax, 0, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d

...
---
name:            ZipIterable2_iterator_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 24, size: 8, alignment: 8, isImmutable: true }
  - { id: 1, offset: 16, size: 4, alignment: 16, isImmutable: true }
  - { id: 2, offset: 8, size: 8, alignment: 8, isImmutable: true }
  - { id: 3, size: 8, alignment: 16, isImmutable: true }
stack:
  - { id: 0, size: 1, alignment: 8 }
  - { id: 1, size: 32, alignment: 8 }
  - { id: 2, size: 16, alignment: 8 }
  - { id: 3, size: 16, alignment: 8 }
  - { id: 4, size: 32, alignment: 8 }
  - { id: 5, size: 32, alignment: 8 }
  - { id: 6, size: 32, alignment: 8 }
  - { id: 7, size: 32, alignment: 8 }
  - { id: 8, size: 32, alignment: 8 }
  - { id: 9, size: 32, alignment: 8 }
  - { id: 10, size: 32, alignment: 8 }
  - { id: 11, size: 32, alignment: 8 }
  - { id: 12, type: spill-slot, size: 8, alignment: 8 }
  - { id: 13, type: spill-slot, size: 8, alignment: 8 }
  - { id: 14, type: spill-slot, size: 8, alignment: 8 }
  - { id: 15, type: spill-slot, size: 8, alignment: 8 }
  - { id: 16, type: spill-slot, size: 8, alignment: 8 }
  - { id: 17, type: spill-slot, size: 8, alignment: 8 }
  - { id: 18, type: spill-slot, size: 8, alignment: 8 }
  - { id: 19, type: spill-slot, size: 8, alignment: 8 }
  - { id: 20, type: spill-slot, size: 8, alignment: 8 }
  - { id: 21, type: spill-slot, size: 8, alignment: 8 }
  - { id: 22, type: spill-slot, size: 8, alignment: 8 }
  - { id: 23, type: spill-slot, size: 8, alignment: 8 }
  - { id: 24, type: spill-slot, size: 8, alignment: 8 }
  - { id: 25, type: spill-slot, size: 8, alignment: 8 }
  - { id: 26, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.3):
    liveins: $rdi, $rdx, $rsi
  
    renamable $rbx = COPY $rdx
    renamable $r14 = COPY $rsi
    MOV64mr %stack.15, 1, $noreg, 0, $noreg, $rdi :: (store (s64) into %stack.15)
    renamable $rax = MOV64rm $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri -3218950579047519815
    renamable $rcx = IMUL64rm killed renamable $rcx, $rsi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $rax = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    MOV64mr %stack.13, 1, $noreg, 0, $noreg, renamable $rax :: (store (s64) into %stack.13)
    renamable $rax = MOV64rm $rsi, 8, killed renamable $rax, 0, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.4, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $rbx
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.8)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbp = MOVSX64rm32 %stack.4, 1, $noreg, 24, $noreg :: (load (s32) from %stack.4 + 24, align 8)
    renamable $rax = MOV64rm %stack.4, 1, $noreg, 16, $noreg :: (load (s64) from %stack.4 + 16)
    MOV64mr %stack.14, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.14)
    renamable $r12 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %stack.4)
    renamable $r13 = MOV64rm %stack.4, 1, $noreg, 8, $noreg :: (load (s64) from %stack.4 + 8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    MOV64mr %stack.12, 1, $noreg, 0, $noreg, renamable $rbx :: (store (s64) into %stack.12)
    renamable $r15 = MOV64rm %stack.13, 1, $noreg, 0, $noreg :: (load (s64) from %stack.13)
    CALL64m renamable $r14, 8, renamable $r15, 16, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.16)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $rbx
    CALL64m renamable $r14, 8, renamable $r15, 24, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.20)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r8 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $r12
    $rsi = COPY renamable $r13
    renamable $rbx = MOV64rm %stack.14, 1, $noreg, 0, $noreg :: (load (s64) from %stack.14)
    $rdx = COPY renamable $rbx
    $ecx = COPY renamable $ebp
    CALL64m renamable $r12, 8, renamable $rbp, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.27)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.5, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r12
    $rdx = COPY renamable $r13
    $rcx = COPY renamable $rbx
    $r8d = COPY renamable $ebp
    $r9 = COPY killed renamable $r12
    renamable $r10 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    PUSH64r killed renamable $r10, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r13, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r15, 8, $noreg :: (load (s64) from %ir.32)
    renamable $rbx = COPY killed renamable $r15
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.6, 1, $noreg, 0, $noreg
    renamable $r15 = MOV64rm %stack.12, 1, $noreg, 0, $noreg :: (load (s64) from %stack.12)
    $rsi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.33)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbp = MOVSX64rm32 %stack.6, 1, $noreg, 24, $noreg :: (load (s32) from %stack.6 + 24, align 8)
    renamable $rax = MOV64rm %stack.6, 1, $noreg, 16, $noreg :: (load (s64) from %stack.6 + 16)
    MOV64mr %stack.14, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.14)
    renamable $r12 = MOV64rm %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %stack.6)
    renamable $r13 = MOV64rm %stack.6, 1, $noreg, 8, $noreg :: (load (s64) from %stack.6 + 8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    CALL64m renamable $r14, 8, renamable $rbx, 16, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.16)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    CALL64m renamable $r14, 8, killed renamable $rbx, 24, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.20)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r12
    $rsi = COPY renamable $r13
    renamable $rbx = MOV64rm %stack.14, 1, $noreg, 0, $noreg :: (load (s64) from %stack.14)
    $rdx = COPY renamable $rbx
    $ecx = COPY renamable $ebp
    renamable $r8 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    CALL64m renamable $r12, 8, renamable $rbp, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.50)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.7, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r12
    $rdx = COPY renamable $r13
    $rcx = COPY renamable $rbx
    $r8d = COPY renamable $ebp
    $r9 = COPY killed renamable $r12
    renamable $r10 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    PUSH64r killed renamable $r10, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r13, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    renamable $rbp = MOV64rm %stack.13, 1, $noreg, 0, $noreg :: (load (s64) from %stack.13)
    CALL64m renamable $r14, 8, renamable $rbp, 16, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.16)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $r15
    CALL64m renamable $r14, 8, renamable $rbp, 24, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.20)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r12 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $r15 = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    MOV64mr %stack.16, 1, $noreg, 0, $noreg, renamable $r15 :: (store (s64) into %stack.16)
    $rdi = MOV32ri64 24
    $rsi = COPY renamable $r15
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r13 = COPY $rax
    MOV64mr $rax, 1, $noreg, 16, $noreg, renamable $r12 :: (store (s64) into %ir.60)
    MOV64mr $rax, 1, $noreg, 8, $noreg, renamable $rbx :: (store (s64) into %ir.61)
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @Pair, $noreg :: (load (s64) from got, align 16)
    MOV64mr renamable $r13, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.result.i)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 88
    $rsi = COPY killed renamable $r15
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @ZipIterator2, $noreg :: (load (s64) from got, align 16)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.62)
    MOV64mr %stack.1, 1, $noreg, 8, $noreg, renamable $rax :: (store (s64) into %ir.63)
    MOV32mi %stack.1, 1, $noreg, 24, $noreg, 7 :: (store (s32) into %ir.64, align 8)
    MOV64mr renamable $rax, 1, $noreg, 64, $noreg, killed renamable $rbx :: (store (s64) into %ir.66)
    MOV64mr renamable $rax, 1, $noreg, 72, $noreg, killed renamable $r12 :: (store (s64) into %ir.67)
    MOV64mr killed renamable $rax, 1, $noreg, 80, $noreg, killed renamable $r13 :: (store (s64) into %ir.68)
    renamable $rax = MOV64rm renamable $r14, 8, renamable $rbp, 0, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.8, 1, $noreg, 0, $noreg
    renamable $r15 = MOV64rm %stack.12, 1, $noreg, 0, $noreg :: (load (s64) from %stack.12)
    $rsi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.71)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = MOVSX64rm32 %stack.8, 1, $noreg, 24, $noreg :: (load (s32) from %stack.8 + 24, align 8)
    renamable $rax = MOV64rm %stack.8, 1, $noreg, 16, $noreg :: (load (s64) from %stack.8 + 16)
    MOV64mr %stack.14, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.14)
    renamable $r12 = MOV64rm %stack.8, 1, $noreg, 0, $noreg :: (load (s64) from %stack.8)
    renamable $r13 = MOV64rm %stack.8, 1, $noreg, 8, $noreg :: (load (s64) from %stack.8 + 8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    CALL64m renamable $r14, 8, renamable $rbp, 16, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.16)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $r15
    CALL64m renamable $r14, 8, killed renamable $rbp, 24, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.20)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r12
    $rsi = COPY renamable $r13
    renamable $rbp = MOV64rm %stack.14, 1, $noreg, 0, $noreg :: (load (s64) from %stack.14)
    $rdx = COPY renamable $rbp
    $ecx = COPY renamable $ebx
    renamable $r15 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $r8 = COPY renamable $r15
    CALL64m renamable $r12, 8, renamable $rbx, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.88)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.9, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r12
    $rdx = COPY renamable $r13
    $rcx = COPY renamable $rbp
    $r8d = COPY renamable $ebx
    $r9 = COPY killed renamable $r12
    PUSH64r killed renamable $r15, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r13, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm %stack.9, 1, $noreg, 16, $noreg :: (load (s64) from %stack.9 + 16)
    MOV64mr %stack.17, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.17)
    renamable $rax = MOV64rm %stack.9, 1, $noreg, 0, $noreg :: (load (s64) from %stack.9)
    MOV64mr %stack.14, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.14)
    renamable $rax = MOV64rm %stack.9, 1, $noreg, 8, $noreg :: (load (s64) from %stack.9 + 8)
    MOV64mr %stack.18, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.18)
    renamable $r15 = MOV64rm %stack.13, 1, $noreg, 0, $noreg :: (load (s64) from %stack.13)
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r15, 8, $noreg :: (load (s64) from %ir.32)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.10, 1, $noreg, 0, $noreg
    renamable $rbx = MOV64rm %stack.12, 1, $noreg, 0, $noreg :: (load (s64) from %stack.12)
    $rsi = COPY renamable $rbx
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.93)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r13 = MOVSX64rm32 %stack.10, 1, $noreg, 24, $noreg :: (load (s32) from %stack.10 + 24, align 8)
    renamable $rax = MOV64rm %stack.10, 1, $noreg, 16, $noreg :: (load (s64) from %stack.10 + 16)
    MOV64mr %stack.19, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.19)
    renamable $r12 = MOV64rm %stack.10, 1, $noreg, 0, $noreg :: (load (s64) from %stack.10)
    renamable $rbp = MOV64rm %stack.10, 1, $noreg, 8, $noreg :: (load (s64) from %stack.10 + 8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    MOV64mr %stack.26, 1, $noreg, 0, $noreg, renamable $r14 :: (store (s64) into %stack.26)
    CALL64m renamable $r14, 8, renamable $r15, 16, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.16)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $rbx
    CALL64m killed renamable $r14, 8, renamable $r15, 24, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.20)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r12
    $rsi = COPY renamable $rbp
    renamable $r14 = MOV64rm %stack.19, 1, $noreg, 0, $noreg :: (load (s64) from %stack.19)
    $rdx = COPY renamable $r14
    $ecx = COPY renamable $r13d
    renamable $rbx = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $r8 = COPY renamable $rbx
    CALL64m renamable $r12, 8, renamable $r13, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.110)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.11, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r12
    $rdx = COPY renamable $rbp
    $rcx = COPY renamable $r14
    $r8d = COPY renamable $r13d
    $r9 = COPY killed renamable $r12
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r13, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r14, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm %stack.11, 1, $noreg, 16, $noreg :: (load (s64) from %stack.11 + 16)
    MOV64mr %stack.19, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.19)
    renamable $rbp = MOV64rm %stack.11, 1, $noreg, 0, $noreg :: (load (s64) from %stack.11)
    renamable $rax = MOV64rm %stack.11, 1, $noreg, 8, $noreg :: (load (s64) from %stack.11 + 8)
    MOV64mr %stack.20, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.20)
    renamable $rax = MOV64rm renamable $rbp, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i173)
    renamable $r8 = MOV64ri 4189192806087951739
    renamable $rcx = MOV64rm renamable $rbp, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i171, align 4)
    renamable $rcx = IMUL64rr killed renamable $rcx, renamable $r8, implicit-def dead $eflags
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, renamable $rbp, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i172, align 4)
    renamable $rdi = MOV64rm %stack.14, 1, $noreg, 0, $noreg :: (load (s64) from %stack.14)
    renamable $rcx = MOV64rm renamable $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i143)
    renamable $rsi = MOV64rm renamable $rdi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i141, align 4)
    renamable $r9 = COPY killed renamable $rdi
    renamable $rsi = IMUL64rr killed renamable $rsi, killed renamable $r8, implicit-def dead $eflags
    renamable $rdi = COPY renamable $rsi
    renamable $rdi = SHR64ri killed renamable $rdi, 32, implicit-def dead $eflags
    renamable $rdi = XOR64rr killed renamable $rdi, killed renamable $rsi, implicit-def dead $eflags
    renamable $rdi = AND64rm killed renamable $rdi, killed renamable $r9, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i142, align 4)
    renamable $ecx = MOV32rm killed renamable $rcx, 4, killed renamable $rdi, 0, $noreg, implicit-def $rcx :: (load (s32) from %ir.offset_ptr.i.i195)
    MOV64mr %stack.21, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %stack.21)
    renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rdx, 0, $noreg, implicit-def $rax :: (load (s32) from %ir.offset_ptr.i.i181)
    MOV64mr %stack.22, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.22)
    renamable $rbx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.62)
    renamable $rax = MOV64rm %stack.1, 1, $noreg, 8, $noreg :: (dereferenceable load (s64) from %ir.63)
    MOV64mr %stack.24, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.24)
    renamable $rax = MOV64rm %stack.1, 1, $noreg, 16, $noreg :: (dereferenceable load (s64) from %ir.126)
    MOV64mr %stack.23, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.23)
    renamable $rax = MOVSX64rm32 %stack.1, 1, $noreg, 24, $noreg :: (dereferenceable load (s32) from %ir.64, align 8)
    MOV64mr %stack.25, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.25)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r13 = MOV64rm %stack.12, 1, $noreg, 0, $noreg :: (load (s64) from %stack.12)
    $rdi = COPY renamable $r13
    renamable $r14 = MOV64rm %stack.26, 1, $noreg, 0, $noreg :: (load (s64) from %stack.26)
    CALL64m renamable $r14, 8, renamable $r15, 16, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.16)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r12 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $r13
    CALL64m killed renamable $r14, 8, killed renamable $r15, 24, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.20)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r13 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 16
    renamable $r14 = MOV64rm %stack.16, 1, $noreg, 0, $noreg :: (load (s64) from %stack.16)
    $rsi = COPY renamable $r14
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r15 = COPY $rax
    MOV64mr $rax, 1, $noreg, 8, $noreg, killed renamable $r12 :: (store (s64) into %ir.137)
    renamable $r12 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @Iterator2, $noreg :: (load (s64) from got, align 16)
    MOV64mr $rax, 1, $noreg, 0, $noreg, renamable $r12 :: (store (s64) into %ir.result.i212)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 16
    $rsi = COPY killed renamable $r14
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $r13 :: (store (s64) into %ir.138)
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $r12 :: (store (s64) into %ir.result.i213)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $r15 :: (store (s64) into %ir.139)
    MOV64mr %stack.2, 1, $noreg, 8, $noreg, killed renamable $rax :: (store (s64) into %ir.140)
    renamable $r12 = MOV64rm %stack.25, 1, $noreg, 0, $noreg :: (load (s64) from %stack.25)
    renamable $rax = MOV64rm renamable $rbx, 8, renamable $r12, 40, $noreg :: (load (s64) from %ir.145)
    renamable $r15 = MOV64rm %stack.14, 1, $noreg, 0, $noreg :: (load (s64) from %stack.14)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, renamable $r15 :: (store (s64) into %ir.147)
    MOV64mr %stack.3, 1, $noreg, 8, $noreg, renamable $rbp :: (store (s64) into %ir.148)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r8 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $rbx
    renamable $r13 = MOV64rm %stack.24, 1, $noreg, 0, $noreg :: (load (s64) from %stack.24)
    $rsi = COPY renamable $r13
    renamable $r14 = MOV64rm %stack.23, 1, $noreg, 0, $noreg :: (load (s64) from %stack.23)
    $rdx = COPY renamable $r14
    $ecx = COPY renamable $r12d
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 88, 0, 88, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r10 = LEA64r %stack.2, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $rbx
    $rsi = COPY renamable $r13
    $rdx = COPY renamable $r14
    $ecx = COPY renamable $r12d
    $r8 = COPY killed renamable $rbx
    $r9 = COPY killed renamable $r13
    PUSH64rmm %stack.22, 1, $noreg, 0, $noreg, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 80), (load (s64) from %stack.22)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64rmm %stack.19, 1, $noreg, 0, $noreg, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 72), (load (s64) from %stack.19)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64rmm %stack.20, 1, $noreg, 0, $noreg, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 64), (load (s64) from %stack.20)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 56)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64rmm %stack.21, 1, $noreg, 0, $noreg, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 48), (load (s64) from %stack.21)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64rmm %stack.17, 1, $noreg, 0, $noreg, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 40), (load (s64) from %stack.17)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64rmm %stack.18, 1, $noreg, 0, $noreg, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 32), (load (s64) from %stack.18)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r15, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r10, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r12, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r14, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 88, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r8 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.62)
    renamable $rcx = MOV64rm %stack.1, 1, $noreg, 8, $noreg :: (dereferenceable load (s64) from %ir.63)
    renamable $rdx = MOV64rm %stack.1, 1, $noreg, 16, $noreg :: (dereferenceable load (s64) from %ir.126)
    renamable $rsi = MOV64rm renamable $r8, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i217)
    renamable $rax = MOV64ri 4189192806087951739
    renamable $rax = IMUL64rm killed renamable $rax, renamable $r8, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i215, align 4)
    renamable $rdi = COPY renamable $rax
    renamable $rdi = SHR64ri killed renamable $rdi, 32, implicit-def dead $eflags
    renamable $rdi = XOR64rr killed renamable $rdi, killed renamable $rax, implicit-def dead $eflags
    renamable $rdi = AND64rm killed renamable $rdi, renamable $r8, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i216, align 4)
    renamable $esi = MOV32rm killed renamable $rsi, 4, killed renamable $rdi, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i225)
    renamable $rax = MOV64rm %stack.15, 1, $noreg, 0, $noreg :: (load (s64) from %stack.15)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rdx :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $rcx :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $r8 :: (store (s64))
    MOV32mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $esi :: (store (s32), align 8)
    RET 0, $rax

...
---
name:            ZipIterator2_field_ZipIterator2_0
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg :: (load (s64) from %ir.2)
    RET 0, $rax

...
---
name:            ZipIterator2_field_ZipIterator2_1
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 24, $noreg :: (load (s64) from %ir.2)
    RET 0, $rax

...
---
name:            ZipIterator2_field_ZipIterator2_2
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 32, $noreg :: (load (s64) from %ir.2)
    RET 0, $rax

...
---
name:            ZipIterator2_B_init_firstIterator2T_secondIterator2U
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 112, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            ZipIterator2_B_next_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 120, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            ZipIterator2_init_firstIterator2T_secondIterator2U
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
  hasTailCall:     true
fixedStack:
  - { id: 0, offset: 80, size: 4, alignment: 16 }
  - { id: 1, offset: 72, size: 8, alignment: 8 }
  - { id: 2, offset: 64, size: 8, alignment: 16 }
  - { id: 3, offset: 56, size: 8, alignment: 8 }
  - { id: 4, offset: 48, size: 4, alignment: 16 }
  - { id: 5, offset: 40, size: 8, alignment: 8 }
  - { id: 6, offset: 32, size: 8, alignment: 16 }
  - { id: 7, offset: 24, size: 8, alignment: 8 }
  - { id: 8, offset: 16, size: 8, alignment: 16 }
  - { id: 9, offset: 8, size: 4, alignment: 8 }
  - { id: 10, size: 8, alignment: 16 }
stack:
  - { id: 0, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.5):
    liveins: $rdi, $rsi
  
    renamable $rbx = COPY $rsi
    renamable $r12 = COPY $rdi
    renamable $rax = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.2, align 16)
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.0)
    renamable $r15 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.1)
    renamable $r13 = MOV64rm %fixed-stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.3)
    renamable $rdx = MOV64rm %fixed-stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.6, align 16)
    renamable $rcx = MOV64rm %fixed-stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.5)
    renamable $rsi = MOV64rm %fixed-stack.7, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.7)
    renamable $rax = MOV64rm $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rdi = MOV64ri 5502728639611621286
    renamable $rdi = IMUL64rm killed renamable $rdi, renamable $r12, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $r8 = COPY renamable $rdi
    renamable $r8 = SHR64ri killed renamable $r8, 32, implicit-def dead $eflags
    renamable $r8 = XOR64rr killed renamable $r8, killed renamable $rdi, implicit-def dead $eflags
    renamable $r8 = AND64rm killed renamable $r8, renamable $r12, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $rbp = MOVSX64rm32 killed renamable $rax, 4, killed renamable $r8, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm renamable $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i20)
    renamable $r14 = MOV64ri 4189192806087951739
    renamable $rdi = MOV64rm renamable $rsi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i18, align 4)
    renamable $rdi = IMUL64rr killed renamable $rdi, renamable $r14, implicit-def dead $eflags
    renamable $r8 = COPY renamable $rdi
    renamable $r8 = SHR64ri killed renamable $r8, 32, implicit-def dead $eflags
    renamable $r8 = XOR64rr killed renamable $r8, killed renamable $rdi, implicit-def dead $eflags
    renamable $r8 = AND64rm killed renamable $r8, renamable $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i19, align 4)
    renamable $r8d = MOV32rm killed renamable $rax, 4, killed renamable $r8, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i28)
    renamable $rax = MOV64rm renamable $r12, 8, renamable $rbp, 0, $noreg :: (load (s64) from %ir.8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    CALL64m killed renamable $rax, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.10)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm renamable $r13, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i48)
    renamable $r14 = IMUL64rm killed renamable $r14, renamable $r13, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i46, align 4)
    renamable $rcx = COPY renamable $r14
    renamable $rcx = SHR64ri killed renamable $rcx, 32, implicit-def dead $eflags
    renamable $rcx = XOR64rr killed renamable $rcx, killed renamable $r14, implicit-def dead $eflags
    renamable $rcx = AND64rm killed renamable $rcx, renamable $r13, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i47, align 4)
    renamable $r8d = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i56)
    renamable $rax = MOV64rm killed renamable $r12, 8, killed renamable $rbp, 8, $noreg :: (load (s64) from %ir.17)
    renamable $rax = MOV64rm killed renamable $rax, 1, $noreg, 8, $noreg :: (load (s64) from %ir.19)
    $rdi = COPY killed renamable $rbx
    $rsi = COPY killed renamable $r13
    $rdx = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %stack.0)
    $rcx = COPY killed renamable $r15
    TCRETURNri64 killed renamable $rax, 0, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d

...
---
name:            ZipIterator2_next_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
frameInfo:
  maxAlignment:    16
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 24, size: 8, alignment: 8, isImmutable: true }
  - { id: 1, offset: 16, size: 4, alignment: 16, isImmutable: true }
  - { id: 2, offset: 8, size: 8, alignment: 8, isImmutable: true }
  - { id: 3, size: 8, alignment: 16, isImmutable: true }
stack:
  - { id: 0, size: 1, alignment: 8 }
  - { id: 1, size: 32, alignment: 8 }
  - { id: 2, size: 32, alignment: 8 }
  - { id: 3, size: 48, alignment: 16 }
  - { id: 4, size: 32, alignment: 8 }
  - { id: 5, size: 48, alignment: 16 }
  - { id: 6, type: spill-slot, size: 8, alignment: 8 }
  - { id: 7, type: spill-slot, size: 8, alignment: 8 }
  - { id: 8, type: spill-slot, size: 8, alignment: 8 }
  - { id: 9, type: spill-slot, size: 8, alignment: 8 }
  - { id: 10, type: spill-slot, size: 8, alignment: 8 }
  - { id: 11, type: spill-slot, size: 8, alignment: 8 }
  - { id: 12, type: spill-slot, size: 8, alignment: 8 }
  - { id: 13, type: spill-slot, size: 8, alignment: 8 }
  - { id: 14, type: spill-slot, size: 8, alignment: 8 }
  - { id: 15, type: spill-slot, size: 8, alignment: 8 }
  - { id: 16, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.3):
    liveins: $rdi, $rdx, $rsi
  
    renamable $r15 = COPY $rdx
    renamable $r13 = COPY $rsi
    MOV64mr %stack.7, 1, $noreg, 0, $noreg, $rdi :: (store (s64) into %stack.7)
    renamable $rax = MOV64rm $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri 5502728639611621286
    renamable $rcx = IMUL64rm killed renamable $rcx, $rsi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rsi = COPY renamable $rcx
    renamable $rsi = SHR64ri killed renamable $rsi, 32, implicit-def dead $eflags
    renamable $rsi = XOR64rr killed renamable $rsi, killed renamable $rcx, implicit-def dead $eflags
    renamable $rsi = AND64rm killed renamable $rsi, renamable $r13, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $r14 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rsi, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm renamable $r13, 8, renamable $r14, 0, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.2, 1, $noreg, 0, $noreg
    $rsi = COPY $rdx
    MOV64mr %stack.6, 1, $noreg, 0, $noreg, $rdx :: (store (s64) into %stack.6)
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.8)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = MOVSX64rm32 %stack.2, 1, $noreg, 24, $noreg :: (load (s32) from %stack.2 + 24, align 8)
    renamable $rax = MOV64rm %stack.2, 1, $noreg, 16, $noreg :: (load (s64) from %stack.2 + 16)
    MOV64mr %stack.8, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.8)
    renamable $r12 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %stack.2)
    renamable $rbp = MOV64rm %stack.2, 1, $noreg, 8, $noreg :: (load (s64) from %stack.2 + 8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    CALL64m renamable $r13, 8, renamable $r14, 16, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.16)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $r15
    CALL64m renamable $r13, 8, renamable $r14, 24, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.20)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r8 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $r12
    $rsi = COPY renamable $rbp
    renamable $r15 = COPY killed renamable $rbp
    renamable $rbp = MOV64rm %stack.8, 1, $noreg, 0, $noreg :: (load (s64) from %stack.8)
    $rdx = COPY renamable $rbp
    $ecx = COPY renamable $ebx
    CALL64m renamable $r12, 8, renamable $rbx, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.27)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.3, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r12
    renamable $rdx = COPY renamable $r15
    $rcx = COPY renamable $rbp
    $r8d = COPY renamable $ebx
    $r9 = COPY killed renamable $r12
    renamable $r10 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    PUSH64r killed renamable $r10, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r $r15, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm %stack.3, 1, $noreg, 24, $noreg :: (load (s64) from %stack.3 + 24, basealign 16)
    MOV64mr %stack.12, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.12)
    renamable $rax = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %stack.3, align 16)
    MOV64mr %stack.8, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.8)
    renamable $rax = MOV64rm %stack.3, 1, $noreg, 16, $noreg :: (load (s64) from %stack.3 + 16, align 16)
    MOV64mr %stack.13, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.13)
    renamable $rax = MOV64rm renamable $r13, 8, renamable $r14, 8, $noreg :: (load (s64) from %ir.32)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.4, 1, $noreg, 0, $noreg
    renamable $r15 = MOV64rm %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %stack.6)
    $rsi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.33)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbp = MOVSX64rm32 %stack.4, 1, $noreg, 24, $noreg :: (load (s32) from %stack.4 + 24, align 8)
    renamable $rbx = MOV64rm %stack.4, 1, $noreg, 16, $noreg :: (load (s64) from %stack.4 + 16)
    renamable $r12 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %stack.4)
    renamable $rax = MOV64rm %stack.4, 1, $noreg, 8, $noreg :: (load (s64) from %stack.4 + 8)
    MOV64mr %stack.9, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.9)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    CALL64m renamable $r13, 8, renamable $r14, 16, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.16)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $r15
    MOV64mr %stack.10, 1, $noreg, 0, $noreg, renamable $r14 :: (store (s64) into %stack.10)
    MOV64mr %stack.11, 1, $noreg, 0, $noreg, renamable $r13 :: (store (s64) into %stack.11)
    CALL64m killed renamable $r13, 8, killed renamable $r14, 24, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.20)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r12
    renamable $r15 = MOV64rm %stack.9, 1, $noreg, 0, $noreg :: (load (s64) from %stack.9)
    $rsi = COPY renamable $r15
    $rdx = COPY renamable $rbx
    $ecx = COPY renamable $ebp
    renamable $r14 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $r8 = COPY renamable $r14
    CALL64m renamable $r12, 8, renamable $rbp, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.50)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.5, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r12
    $rdx = COPY renamable $r15
    $rcx = COPY renamable $rbx
    $r8d = COPY renamable $ebp
    $r9 = COPY killed renamable $r12
    PUSH64r killed renamable $r14, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r15, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @nil_typ, $noreg :: (load (s64) from got)
    renamable $rax = MOV64rm %stack.8, 1, $noreg, 0, $noreg :: (load (s64) from %stack.8)
    CMP64rr renamable $rax, renamable $rdi, implicit-def $eflags
    renamable $cl = SETCCr 4, implicit killed $eflags
    renamable $r13 = COPY renamable $rax
    TEST64rr killed renamable $rax, renamable $rax, implicit-def $eflags
    renamable $dl = SETCCr 4, implicit killed $eflags
    dead renamable $dl = OR8rr killed renamable $dl, killed renamable $cl, implicit-def $eflags
    JCC_1 %bb.2, 4, implicit killed $eflags
  
  bb.1:
    liveins: $rdi
  
    renamable $ecx = MOV32r0 implicit-def dead $eflags, implicit-def $rcx
    renamable $rdx = IMPLICIT_DEF
    renamable $rsi = IMPLICIT_DEF
    JMP_1 %bb.5
  
  bb.2 (%ir-block.57):
    liveins: $r13
  
    renamable $rbp = MOV64rm %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %stack.5, align 16)
    renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @nil_typ, $noreg :: (load (s64) from got)
    CMP64rr renamable $rbp, renamable $rdi, implicit-def $eflags
    renamable $cl = SETCCr 4, implicit killed $eflags
    TEST64rr renamable $rbp, renamable $rbp, implicit-def $eflags
    renamable $dl = SETCCr 4, implicit killed $eflags
    dead renamable $dl = OR8rr killed renamable $dl, killed renamable $cl, implicit-def $eflags
    JCC_1 %bb.4, 4, implicit killed $eflags
  
  bb.3:
    liveins: $rdi
  
    renamable $ecx = MOV32r0 implicit-def dead $eflags, implicit-def $rcx
    renamable $rdx = IMPLICIT_DEF
    renamable $rsi = IMPLICIT_DEF
    JMP_1 %bb.5
  
  bb.4 (%ir-block.60):
    liveins: $rbp, $r13
  
    renamable $rax = MOV64rm %stack.5, 1, $noreg, 16, $noreg :: (load (s64) from %stack.5 + 16, align 16)
    MOV64mr %stack.9, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.9)
    renamable $rax = MOV64rm %stack.5, 1, $noreg, 24, $noreg :: (load (s64) from %stack.5 + 24, basealign 16)
    MOV64mr %stack.14, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.14)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r15 = MOV64rm %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %stack.6)
    $rdi = COPY renamable $r15
    renamable $r14 = MOV64rm %stack.10, 1, $noreg, 0, $noreg :: (load (s64) from %stack.10)
    renamable $rbx = MOV64rm %stack.11, 1, $noreg, 0, $noreg :: (load (s64) from %stack.11)
    CALL64m renamable $rbx, 8, renamable $r14, 16, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.sunkaddr3)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    MOV64mr %stack.15, 1, $noreg, 0, $noreg, $rax :: (store (s64) into %stack.15)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    CALL64m renamable $rbx, 8, renamable $r14, 24, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.sunkaddr6)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    MOV64mr %stack.16, 1, $noreg, 0, $noreg, $rax :: (store (s64) into %stack.16)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $rsi = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    $rdi = MOV32ri64 80
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r12 = COPY $rax
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @Pair, $noreg :: (load (s64) from got, align 16)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.56)
    MOV64mr %stack.1, 1, $noreg, 8, $noreg, renamable $r12 :: (store (s64) into %ir.67)
    MOV32mi %stack.1, 1, $noreg, 24, $noreg, 7 :: (store (s32) into %ir.68, align 8)
    renamable $rax = MOV64rm %stack.15, 1, $noreg, 0, $noreg :: (load (s64) from %stack.15)
    MOV64mr renamable $r12, 1, $noreg, 64, $noreg, killed renamable $rax :: (store (s64) into %ir.70)
    renamable $rax = MOV64rm %stack.16, 1, $noreg, 0, $noreg :: (load (s64) from %stack.16)
    MOV64mr renamable $r12, 1, $noreg, 72, $noreg, killed renamable $rax :: (store (s64) into %ir.71)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    CALL64m renamable $rbx, 8, renamable $r14, 16, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.sunkaddr3)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $r15
    CALL64m killed renamable $rbx, 8, killed renamable $r14, 24, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.sunkaddr6)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm renamable $r13, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i80)
    renamable $rcx = MOV64ri 3084208142191802847
    renamable $rdx = MOV64rm renamable $r13, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i78, align 4)
    renamable $rdx = IMUL64rr killed renamable $rdx, renamable $rcx, implicit-def dead $eflags
    renamable $rsi = COPY renamable $rdx
    renamable $rsi = SHR64ri killed renamable $rsi, 32, implicit-def dead $eflags
    renamable $rsi = XOR64rr killed renamable $rsi, killed renamable $rdx, implicit-def dead $eflags
    renamable $rsi = AND64rm killed renamable $rsi, renamable $r13, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i79, align 4)
    renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rsi, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i18.i)
    MOV64mr renamable $r12, 1, $noreg, 0, $noreg, killed renamable $r13 :: (store (s64) into %ir.result.i)
    renamable $rdx = MOV64rm %stack.12, 1, $noreg, 0, $noreg :: (load (s64) from %stack.12)
    MOV64mr renamable $r12, 1, $noreg, 16, $noreg, killed renamable $rdx :: (store (s64) into %ir.80 + 8, align 4)
    renamable $rdx = MOV64rm %stack.13, 1, $noreg, 0, $noreg :: (load (s64) from %stack.13)
    MOV64mr renamable $r12, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64) into %ir.80, align 4)
    MOV32mr renamable $r12, 1, $noreg, 24, $noreg, killed renamable $eax :: (store (s32) into %ir.80 + 16)
    renamable $rax = MOV64rm renamable $rbp, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i94)
    renamable $rcx = IMUL64rm killed renamable $rcx, renamable $rbp, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i92, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, renamable $rbp, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i93, align 4)
    renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i46.i)
    MOV64mr renamable $r12, 1, $noreg, 32, $noreg, killed renamable $rbp :: (store (s64) into %ir.82)
    renamable $rcx = MOV64rm %stack.14, 1, $noreg, 0, $noreg :: (load (s64) from %stack.14)
    MOV64mr renamable $r12, 1, $noreg, 48, $noreg, killed renamable $rcx :: (store (s64) into %ir.83 + 8, align 4)
    renamable $rcx = MOV64rm %stack.9, 1, $noreg, 0, $noreg :: (load (s64) from %stack.9)
    MOV64mr renamable $r12, 1, $noreg, 40, $noreg, killed renamable $rcx :: (store (s64) into %ir.83, align 4)
    MOV32mr killed renamable $r12, 1, $noreg, 56, $noreg, killed renamable $eax :: (store (s32) into %ir.83 + 16)
    renamable $rdi = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.56)
    renamable $ecx = MOV32rm %stack.1, 1, $noreg, 24, $noreg, implicit-def $rcx :: (dereferenceable load (s32) from %ir.67 + 16, align 8)
    renamable $rdx = MOV64rm %stack.1, 1, $noreg, 8, $noreg :: (dereferenceable load (s64) from %ir.67)
    renamable $rsi = MOV64rm %stack.1, 1, $noreg, 16, $noreg :: (dereferenceable load (s64) from %ir.67 + 8)
  
  bb.5..thread:
    liveins: $rcx, $rdi, $rdx, $rsi
  
    renamable $rax = MOV64rm %stack.7, 1, $noreg, 0, $noreg :: (load (s64) from %stack.7)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rdx :: (store (s64), align 16)
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rdi :: (store (s64), align 16)
    MOV64mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $rsi :: (store (s64) into unknown-address + 8, basealign 16)
    MOV32mr renamable $rax, 1, $noreg, 32, $noreg, renamable $ecx, implicit killed $rcx :: (store (s32) into unknown-address + 16, align 16)
    RET 0, $rax

...
---
name:            ZipIterator2_getter_second
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi, $rsi
  
    renamable $rax = COPY $rdi
    renamable $rcx = MOV64rm renamable $rsi, 1, $noreg, 32, $noreg :: (load (s64) from %ir.2)
    renamable $rdx = MOV64rm renamable $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.5)
    renamable $rdi = MOV64rm renamable $rsi, 1, $noreg, 48, $noreg :: (load (s64) from %ir.8)
    renamable $esi = MOV32rm killed renamable $rsi, 1, $noreg, 56, $noreg :: (load (s32) from %ir.11)
    MOV32mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $esi :: (store (s32), align 8)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rdi :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64))
    RET 0, $rax

...
---
name:            ZipIterator2_setter_second
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
  - { reg: '$rcx' }
  - { reg: '$r8d' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rcx, $rdi, $rdx, $rsi, $r8d
  
    MOV64mr renamable $rdi, 1, $noreg, 32, $noreg, killed renamable $rsi :: (store (s64) into %ir.3)
    MOV64mr renamable $rdi, 1, $noreg, 40, $noreg, killed renamable $rdx :: (store (s64) into %ir.4)
    MOV64mr renamable $rdi, 1, $noreg, 48, $noreg, killed renamable $rcx :: (store (s64) into %ir.5)
    MOV32mr killed renamable $rdi, 1, $noreg, 56, $noreg, killed renamable $r8d :: (store (s32) into %ir.6)
    RET 0

...
---
name:            ZipIterator2_getter_first
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi, $rsi
  
    renamable $rax = COPY $rdi
    renamable $rcx = MOV64rm renamable $rsi, 1, $noreg, 0, $noreg :: (load (s64) from %ir.0)
    renamable $rdx = MOV64rm renamable $rsi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.4)
    renamable $rdi = MOV64rm renamable $rsi, 1, $noreg, 16, $noreg :: (load (s64) from %ir.7)
    renamable $esi = MOV32rm killed renamable $rsi, 1, $noreg, 24, $noreg :: (load (s32) from %ir.10)
    MOV32mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $esi :: (store (s32), align 8)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rdi :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64))
    RET 0, $rax

...
---
name:            ZipIterator2_setter_first
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
  - { reg: '$rcx' }
  - { reg: '$r8d' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rcx, $rdi, $rdx, $rsi, $r8d
  
    MOV64mr renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $rsi :: (store (s64) into %ir.0)
    MOV64mr renamable $rdi, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64) into %ir.3)
    MOV64mr renamable $rdi, 1, $noreg, 16, $noreg, killed renamable $rcx :: (store (s64) into %ir.4)
    MOV32mr killed renamable $rdi, 1, $noreg, 24, $noreg, killed renamable $r8d :: (store (s32) into %ir.5)
    RET 0

...
---
name:            ZipIterable2_getter_second
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi, $rsi
  
    renamable $rax = COPY $rdi
    renamable $rcx = MOV64rm renamable $rsi, 1, $noreg, 32, $noreg :: (load (s64) from %ir.2)
    renamable $rdx = MOV64rm renamable $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.5)
    renamable $rdi = MOV64rm renamable $rsi, 1, $noreg, 48, $noreg :: (load (s64) from %ir.8)
    renamable $esi = MOV32rm killed renamable $rsi, 1, $noreg, 56, $noreg :: (load (s32) from %ir.11)
    MOV32mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $esi :: (store (s32), align 8)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rdi :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64))
    RET 0, $rax

...
---
name:            ZipIterable2_setter_second
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
  - { reg: '$rcx' }
  - { reg: '$r8d' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rcx, $rdi, $rdx, $rsi, $r8d
  
    MOV64mr renamable $rdi, 1, $noreg, 32, $noreg, killed renamable $rsi :: (store (s64) into %ir.3)
    MOV64mr renamable $rdi, 1, $noreg, 40, $noreg, killed renamable $rdx :: (store (s64) into %ir.4)
    MOV64mr renamable $rdi, 1, $noreg, 48, $noreg, killed renamable $rcx :: (store (s64) into %ir.5)
    MOV32mr killed renamable $rdi, 1, $noreg, 56, $noreg, killed renamable $r8d :: (store (s32) into %ir.6)
    RET 0

...
---
name:            ZipIterable2_getter_first
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi, $rsi
  
    renamable $rax = COPY $rdi
    renamable $rcx = MOV64rm renamable $rsi, 1, $noreg, 0, $noreg :: (load (s64) from %ir.0)
    renamable $rdx = MOV64rm renamable $rsi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.4)
    renamable $rdi = MOV64rm renamable $rsi, 1, $noreg, 16, $noreg :: (load (s64) from %ir.7)
    renamable $esi = MOV32rm killed renamable $rsi, 1, $noreg, 24, $noreg :: (load (s32) from %ir.10)
    MOV32mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $esi :: (store (s32), align 8)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rdi :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64))
    RET 0, $rax

...
---
name:            ZipIterable2_setter_first
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
  - { reg: '$rcx' }
  - { reg: '$r8d' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rcx, $rdi, $rdx, $rsi, $r8d
  
    MOV64mr renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $rsi :: (store (s64) into %ir.0)
    MOV64mr renamable $rdi, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64) into %ir.3)
    MOV64mr renamable $rdi, 1, $noreg, 16, $noreg, killed renamable $rcx :: (store (s64) into %ir.4)
    MOV32mr killed renamable $rdi, 1, $noreg, 24, $noreg, killed renamable $r8d :: (store (s32) into %ir.5)
    RET 0

...
---
name:            InterleaveIterable2_field_InterleaveIterable2_0
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg :: (load (s64) from %ir.2)
    RET 0, $rax

...
---
name:            InterleaveIterable2_B_init_firstIterable2T_secondIterable2T
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 176, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            InterleaveIterable2_B_iterator_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 184, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            InterleaveIterable2_B_each_fFunctionT_to_Nothing
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 192, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            InterleaveIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 200, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            InterleaveIterable2_B_all_fFunctionT_to_Ptri1
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 208, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            InterleaveIterable2_B_any_fFunctionT_to_Ptri1
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 216, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            InterleaveIterable2_B_map_fFunctionT_to_U
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 224, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            InterleaveIterable2_B_filter_fFunctionT_to_Ptri1
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 232, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            InterleaveIterable2_B_chain_otherIterable2T
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 240, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            InterleaveIterable2_B_interleave_otherIterable2T
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 248, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            InterleaveIterable2_B_zip_otherIterable2U
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 256, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            InterleaveIterable2_B_product_otherIterable2U
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 264, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            InterleaveIterable2_init_firstIterable2T_secondIterable2T
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
  hasTailCall:     true
fixedStack:
  - { id: 0, offset: 80, size: 4, alignment: 16 }
  - { id: 1, offset: 72, size: 8, alignment: 8 }
  - { id: 2, offset: 64, size: 8, alignment: 16 }
  - { id: 3, offset: 56, size: 8, alignment: 8 }
  - { id: 4, offset: 48, size: 4, alignment: 16 }
  - { id: 5, offset: 40, size: 8, alignment: 8 }
  - { id: 6, offset: 32, size: 8, alignment: 16 }
  - { id: 7, offset: 24, size: 8, alignment: 8 }
  - { id: 8, offset: 16, size: 8, alignment: 16 }
  - { id: 9, offset: 8, size: 4, alignment: 8 }
  - { id: 10, size: 8, alignment: 16 }
stack:
  - { id: 0, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.5):
    liveins: $rdi, $rsi
  
    renamable $rbx = COPY $rsi
    renamable $r12 = COPY $rdi
    renamable $rax = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.2, align 16)
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.0)
    renamable $r15 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.1)
    renamable $r13 = MOV64rm %fixed-stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.3)
    renamable $rdx = MOV64rm %fixed-stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.6, align 16)
    renamable $rcx = MOV64rm %fixed-stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.5)
    renamable $rsi = MOV64rm %fixed-stack.7, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.7)
    renamable $rax = MOV64rm $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rdi = MOV64ri -6258231685215461775
    renamable $rdi = IMUL64rm killed renamable $rdi, renamable $r12, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $r8 = COPY renamable $rdi
    renamable $r8 = SHR64ri killed renamable $r8, 32, implicit-def dead $eflags
    renamable $r8 = XOR64rr killed renamable $r8, killed renamable $rdi, implicit-def dead $eflags
    renamable $r8 = AND64rm killed renamable $r8, renamable $r12, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $rbp = MOVSX64rm32 killed renamable $rax, 4, killed renamable $r8, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm renamable $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i20)
    renamable $r14 = MOV64ri 5693646204635713916
    renamable $rdi = MOV64rm renamable $rsi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i18, align 4)
    renamable $rdi = IMUL64rr killed renamable $rdi, renamable $r14, implicit-def dead $eflags
    renamable $r8 = COPY renamable $rdi
    renamable $r8 = SHR64ri killed renamable $r8, 32, implicit-def dead $eflags
    renamable $r8 = XOR64rr killed renamable $r8, killed renamable $rdi, implicit-def dead $eflags
    renamable $r8 = AND64rm killed renamable $r8, renamable $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i19, align 4)
    renamable $r8d = MOV32rm killed renamable $rax, 4, killed renamable $r8, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i28)
    renamable $rax = MOV64rm renamable $r12, 8, renamable $rbp, 0, $noreg :: (load (s64) from %ir.8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    CALL64m killed renamable $rax, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.10)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm renamable $r13, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i48)
    renamable $r14 = IMUL64rm killed renamable $r14, renamable $r13, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i46, align 4)
    renamable $rcx = COPY renamable $r14
    renamable $rcx = SHR64ri killed renamable $rcx, 32, implicit-def dead $eflags
    renamable $rcx = XOR64rr killed renamable $rcx, killed renamable $r14, implicit-def dead $eflags
    renamable $rcx = AND64rm killed renamable $rcx, renamable $r13, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i47, align 4)
    renamable $r8d = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i56)
    renamable $rax = MOV64rm killed renamable $r12, 8, killed renamable $rbp, 8, $noreg :: (load (s64) from %ir.17)
    renamable $rax = MOV64rm killed renamable $rax, 1, $noreg, 8, $noreg :: (load (s64) from %ir.19)
    $rdi = COPY killed renamable $rbx
    $rsi = COPY killed renamable $r13
    $rdx = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %stack.0)
    $rcx = COPY killed renamable $r15
    TCRETURNri64 killed renamable $rax, 0, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d

...
---
name:            InterleaveIterable2_iterator_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 24, size: 8, alignment: 8, isImmutable: true }
  - { id: 1, offset: 16, size: 4, alignment: 16, isImmutable: true }
  - { id: 2, offset: 8, size: 8, alignment: 8, isImmutable: true }
  - { id: 3, size: 8, alignment: 16, isImmutable: true }
stack:
  - { id: 0, size: 1, alignment: 8 }
  - { id: 1, size: 32, alignment: 8 }
  - { id: 2, size: 16, alignment: 8 }
  - { id: 3, size: 16, alignment: 8 }
  - { id: 4, size: 32, alignment: 8 }
  - { id: 5, size: 32, alignment: 8 }
  - { id: 6, size: 32, alignment: 8 }
  - { id: 7, size: 32, alignment: 8 }
  - { id: 8, size: 32, alignment: 8 }
  - { id: 9, size: 32, alignment: 8 }
  - { id: 10, size: 32, alignment: 8 }
  - { id: 11, size: 32, alignment: 8 }
  - { id: 12, type: spill-slot, size: 8, alignment: 8 }
  - { id: 13, type: spill-slot, size: 8, alignment: 8 }
  - { id: 14, type: spill-slot, size: 8, alignment: 8 }
  - { id: 15, type: spill-slot, size: 8, alignment: 8 }
  - { id: 16, type: spill-slot, size: 8, alignment: 8 }
  - { id: 17, type: spill-slot, size: 8, alignment: 8 }
  - { id: 18, type: spill-slot, size: 8, alignment: 8 }
  - { id: 19, type: spill-slot, size: 8, alignment: 8 }
  - { id: 20, type: spill-slot, size: 8, alignment: 8 }
  - { id: 21, type: spill-slot, size: 8, alignment: 8 }
  - { id: 22, type: spill-slot, size: 8, alignment: 8 }
  - { id: 23, type: spill-slot, size: 8, alignment: 8 }
  - { id: 24, type: spill-slot, size: 8, alignment: 8 }
  - { id: 25, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.3):
    liveins: $rdi, $rdx, $rsi
  
    renamable $r15 = COPY $rdx
    MOV64mr %stack.12, 1, $noreg, 0, $noreg, $rdx :: (store (s64) into %stack.12)
    MOV64mr %stack.16, 1, $noreg, 0, $noreg, $rdi :: (store (s64) into %stack.16)
    renamable $rax = MOV64rm renamable $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri -6258231685215461775
    renamable $rcx = IMUL64rm killed renamable $rcx, renamable $rsi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, renamable $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $rax = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    MOV64mr %stack.14, 1, $noreg, 0, $noreg, renamable $rax :: (store (s64) into %stack.14)
    renamable $rax = MOV64rm renamable $rsi, 8, killed renamable $rax, 0, $noreg :: (load (s64) from %ir.7)
    renamable $r14 = COPY renamable $rsi
    MOV64mr %stack.13, 1, $noreg, 0, $noreg, $rsi :: (store (s64) into %stack.13)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.4, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.8)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = MOVSX64rm32 %stack.4, 1, $noreg, 24, $noreg :: (load (s32) from %stack.4 + 24, align 8)
    renamable $r13 = MOV64rm %stack.4, 1, $noreg, 16, $noreg :: (load (s64) from %stack.4 + 16)
    renamable $rbp = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %stack.4)
    renamable $r12 = MOV64rm %stack.4, 1, $noreg, 8, $noreg :: (load (s64) from %stack.4 + 8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $r15
    renamable $r15 = MOV64rm %stack.14, 1, $noreg, 0, $noreg :: (load (s64) from %stack.14)
    CALL64m killed renamable $r14, 8, renamable $r15, 16, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.16)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r8 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $rbp
    $rsi = COPY renamable $r12
    $rdx = COPY renamable $r13
    $ecx = COPY renamable $ebx
    renamable $r14 = COPY renamable $r8
    CALL64m renamable $rbp, 8, renamable $rbx, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.23)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.5, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $rbp
    $rdx = COPY renamable $r12
    $rcx = COPY renamable $r13
    $r8d = COPY renamable $ebx
    $r9 = COPY killed renamable $rbp
    PUSH64r killed renamable $r14, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r13, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r12, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r14 = COPY killed renamable $r15
    renamable $r15 = MOV64rm %stack.13, 1, $noreg, 0, $noreg :: (load (s64) from %stack.13)
    renamable $rax = MOV64rm renamable $r15, 8, renamable $r14, 8, $noreg :: (load (s64) from %ir.28)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.6, 1, $noreg, 0, $noreg
    renamable $r12 = MOV64rm %stack.12, 1, $noreg, 0, $noreg :: (load (s64) from %stack.12)
    $rsi = COPY renamable $r12
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.29)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = MOVSX64rm32 %stack.6, 1, $noreg, 24, $noreg :: (load (s32) from %stack.6 + 24, align 8)
    renamable $rax = MOV64rm %stack.6, 1, $noreg, 16, $noreg :: (load (s64) from %stack.6 + 16)
    MOV64mr %stack.15, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.15)
    renamable $r13 = MOV64rm %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %stack.6)
    renamable $rbp = MOV64rm %stack.6, 1, $noreg, 8, $noreg :: (load (s64) from %stack.6 + 8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $r12
    CALL64m killed renamable $r15, 8, renamable $r14, 16, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.16)
    renamable $r12 = COPY killed renamable $r14
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r13
    $rsi = COPY renamable $rbp
    renamable $r15 = MOV64rm %stack.15, 1, $noreg, 0, $noreg :: (load (s64) from %stack.15)
    $rdx = COPY renamable $r15
    $ecx = COPY renamable $ebx
    renamable $r14 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $r8 = COPY renamable $r14
    CALL64m renamable $r13, 8, renamable $rbx, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.43)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.7, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r13
    $rdx = COPY renamable $rbp
    $rcx = COPY renamable $r15
    $r8d = COPY renamable $ebx
    $r9 = COPY killed renamable $r13
    PUSH64r killed renamable $r14, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r15, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r15 = MOV64rm %stack.12, 1, $noreg, 0, $noreg :: (load (s64) from %stack.12)
    $rdi = COPY renamable $r15
    renamable $r14 = MOV64rm %stack.13, 1, $noreg, 0, $noreg :: (load (s64) from %stack.13)
    CALL64m renamable $r14, 8, renamable $r12, 16, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.16)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $rsi = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    MOV64mr %stack.17, 1, $noreg, 0, $noreg, renamable $rsi :: (store (s64) into %stack.17)
    $rdi = MOV32ri64 80
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @InterleaveIterator2, $noreg :: (load (s64) from got, align 16)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.50)
    MOV64mr %stack.1, 1, $noreg, 8, $noreg, renamable $rax :: (store (s64) into %ir.51)
    MOV32mi %stack.1, 1, $noreg, 24, $noreg, 7 :: (store (s32) into %ir.52, align 8)
    MOV64mr killed renamable $rax, 1, $noreg, 72, $noreg, killed renamable $rbx :: (store (s64) into %ir.54)
    renamable $rax = MOV64rm killed renamable $r14, 8, renamable $r12, 0, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.8, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.57)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = MOVSX64rm32 %stack.8, 1, $noreg, 24, $noreg :: (load (s32) from %stack.8 + 24, align 8)
    renamable $r14 = MOV64rm %stack.8, 1, $noreg, 16, $noreg :: (load (s64) from %stack.8 + 16)
    renamable $r13 = MOV64rm %stack.8, 1, $noreg, 0, $noreg :: (load (s64) from %stack.8)
    renamable $rbp = MOV64rm %stack.8, 1, $noreg, 8, $noreg :: (load (s64) from %stack.8 + 8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $r15
    renamable $rax = MOV64rm %stack.13, 1, $noreg, 0, $noreg :: (load (s64) from %stack.13)
    CALL64m killed renamable $rax, 8, renamable $r12, 16, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.16)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r13
    $rsi = COPY renamable $rbp
    $rdx = COPY renamable $r14
    $ecx = COPY renamable $ebx
    renamable $r15 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $r8 = COPY renamable $r15
    CALL64m renamable $r13, 8, renamable $rbx, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.71)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.9, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r13
    $rdx = COPY renamable $rbp
    $rcx = COPY renamable $r14
    $r8d = COPY renamable $ebx
    $r9 = COPY killed renamable $r13
    PUSH64r killed renamable $r15, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r14, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm %stack.9, 1, $noreg, 16, $noreg :: (load (s64) from %stack.9 + 16)
    MOV64mr %stack.18, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.18)
    renamable $rax = MOV64rm %stack.9, 1, $noreg, 0, $noreg :: (load (s64) from %stack.9)
    MOV64mr %stack.15, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.15)
    renamable $rax = MOV64rm %stack.9, 1, $noreg, 8, $noreg :: (load (s64) from %stack.9 + 8)
    MOV64mr %stack.19, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.19)
    renamable $r14 = MOV64rm %stack.13, 1, $noreg, 0, $noreg :: (load (s64) from %stack.13)
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r12, 8, $noreg :: (load (s64) from %ir.28)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.10, 1, $noreg, 0, $noreg
    renamable $r15 = MOV64rm %stack.12, 1, $noreg, 0, $noreg :: (load (s64) from %stack.12)
    $rsi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.76)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = MOVSX64rm32 %stack.10, 1, $noreg, 24, $noreg :: (load (s32) from %stack.10 + 24, align 8)
    renamable $rax = MOV64rm %stack.10, 1, $noreg, 16, $noreg :: (load (s64) from %stack.10 + 16)
    MOV64mr %stack.20, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.20)
    renamable $r13 = MOV64rm %stack.10, 1, $noreg, 0, $noreg :: (load (s64) from %stack.10)
    renamable $rbp = MOV64rm %stack.10, 1, $noreg, 8, $noreg :: (load (s64) from %stack.10 + 8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $r15
    CALL64m renamable $r14, 8, killed renamable $r12, 16, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.16)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r13
    $rsi = COPY renamable $rbp
    renamable $r12 = MOV64rm %stack.20, 1, $noreg, 0, $noreg :: (load (s64) from %stack.20)
    $rdx = COPY renamable $r12
    $ecx = COPY renamable $ebx
    renamable $r15 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $r8 = COPY renamable $r15
    CALL64m renamable $r13, 8, renamable $rbx, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.90)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.11, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r13
    $rdx = COPY renamable $rbp
    $rcx = COPY renamable $r12
    $r8d = COPY renamable $ebx
    $r9 = COPY killed renamable $r13
    PUSH64r killed renamable $r15, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r12, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm %stack.11, 1, $noreg, 16, $noreg :: (load (s64) from %stack.11 + 16)
    MOV64mr %stack.20, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.20)
    renamable $r12 = MOV64rm %stack.11, 1, $noreg, 0, $noreg :: (load (s64) from %stack.11)
    renamable $rax = MOV64rm %stack.11, 1, $noreg, 8, $noreg :: (load (s64) from %stack.11 + 8)
    MOV64mr %stack.21, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.21)
    renamable $rax = MOV64rm renamable $r12, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i172)
    renamable $rdi = MOV64ri 4189192806087951739
    renamable $rcx = MOV64rm renamable $r12, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i170, align 4)
    renamable $rcx = IMUL64rr killed renamable $rcx, renamable $rdi, implicit-def dead $eflags
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, renamable $r12, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i171, align 4)
    renamable $r15 = MOV64rm %stack.15, 1, $noreg, 0, $noreg :: (load (s64) from %stack.15)
    renamable $rcx = MOV64rm renamable $r15, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i142)
    renamable $rsi = MOV64rm renamable $r15, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i140, align 4)
    renamable $rsi = IMUL64rr killed renamable $rsi, killed renamable $rdi, implicit-def dead $eflags
    renamable $rdi = COPY renamable $rsi
    renamable $rdi = SHR64ri killed renamable $rdi, 32, implicit-def dead $eflags
    renamable $rdi = XOR64rr killed renamable $rdi, killed renamable $rsi, implicit-def dead $eflags
    renamable $rdi = AND64rm killed renamable $rdi, killed renamable $r15, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i141, align 4)
    renamable $ecx = MOV32rm killed renamable $rcx, 4, killed renamable $rdi, 0, $noreg, implicit-def $rcx :: (load (s32) from %ir.offset_ptr.i.i194)
    MOV64mr %stack.22, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %stack.22)
    renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rdx, 0, $noreg, implicit-def $rax :: (load (s32) from %ir.offset_ptr.i.i180)
    MOV64mr %stack.23, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.23)
    renamable $rbx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.50)
    renamable $r13 = MOV64rm %stack.1, 1, $noreg, 8, $noreg :: (dereferenceable load (s64) from %ir.51)
    renamable $rax = MOV64rm %stack.1, 1, $noreg, 16, $noreg :: (dereferenceable load (s64) from %ir.106)
    MOV64mr %stack.24, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.24)
    renamable $rax = MOVSX64rm32 %stack.1, 1, $noreg, 24, $noreg :: (dereferenceable load (s32) from %ir.52, align 8)
    MOV64mr %stack.25, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.25)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV64rm %stack.12, 1, $noreg, 0, $noreg :: (load (s64) from %stack.12)
    renamable $rax = MOV64rm %stack.14, 1, $noreg, 0, $noreg :: (load (s64) from %stack.14)
    CALL64m killed renamable $r14, 8, killed renamable $rax, 16, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.16)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r14 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 16
    renamable $rbp = MOV64rm %stack.17, 1, $noreg, 0, $noreg :: (load (s64) from %stack.17)
    $rsi = COPY renamable $rbp
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r15 = COPY $rax
    MOV64mr $rax, 1, $noreg, 8, $noreg, renamable $r14 :: (store (s64) into %ir.114)
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @Iterator2, $noreg :: (load (s64) from got, align 16)
    MOV64mr renamable $r15, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.result.i211)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 16
    $rsi = COPY killed renamable $rbp
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $r14 :: (store (s64) into %ir.115)
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @Iterator2, $noreg :: (load (s64) from got, align 16)
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.result.i212)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $r15 :: (store (s64) into %ir.116)
    MOV64mr %stack.2, 1, $noreg, 8, $noreg, killed renamable $rax :: (store (s64) into %ir.117)
    renamable $rbp = MOV64rm %stack.25, 1, $noreg, 0, $noreg :: (load (s64) from %stack.25)
    renamable $rax = MOV64rm renamable $rbx, 8, renamable $rbp, 32, $noreg :: (load (s64) from %ir.122)
    renamable $r15 = MOV64rm %stack.15, 1, $noreg, 0, $noreg :: (load (s64) from %stack.15)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, renamable $r15 :: (store (s64) into %ir.124)
    MOV64mr %stack.3, 1, $noreg, 8, $noreg, renamable $r12 :: (store (s64) into %ir.125)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r8 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $rbx
    $rsi = COPY renamable $r13
    renamable $r14 = MOV64rm %stack.24, 1, $noreg, 0, $noreg :: (load (s64) from %stack.24)
    $rdx = COPY renamable $r14
    $ecx = COPY renamable $ebp
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 88, 0, 88, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r10 = LEA64r %stack.2, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $rbx
    $rsi = COPY renamable $r13
    $rdx = COPY renamable $r14
    $ecx = COPY renamable $ebp
    $r8 = COPY killed renamable $rbx
    $r9 = COPY killed renamable $r13
    PUSH64rmm %stack.23, 1, $noreg, 0, $noreg, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 80), (load (s64) from %stack.23)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64rmm %stack.20, 1, $noreg, 0, $noreg, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 72), (load (s64) from %stack.20)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64rmm %stack.21, 1, $noreg, 0, $noreg, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 64), (load (s64) from %stack.21)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r12, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 56)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64rmm %stack.22, 1, $noreg, 0, $noreg, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 48), (load (s64) from %stack.22)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64rmm %stack.18, 1, $noreg, 0, $noreg, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 40), (load (s64) from %stack.18)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64rmm %stack.19, 1, $noreg, 0, $noreg, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 32), (load (s64) from %stack.19)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r15, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r10, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r14, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 88, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r8 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.50)
    renamable $rcx = MOV64rm %stack.1, 1, $noreg, 8, $noreg :: (dereferenceable load (s64) from %ir.51)
    renamable $rdx = MOV64rm %stack.1, 1, $noreg, 16, $noreg :: (dereferenceable load (s64) from %ir.106)
    renamable $rsi = MOV64rm renamable $r8, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i216)
    renamable $rax = MOV64ri 4189192806087951739
    renamable $rax = IMUL64rm killed renamable $rax, renamable $r8, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i214, align 4)
    renamable $rdi = COPY renamable $rax
    renamable $rdi = SHR64ri killed renamable $rdi, 32, implicit-def dead $eflags
    renamable $rdi = XOR64rr killed renamable $rdi, killed renamable $rax, implicit-def dead $eflags
    renamable $rdi = AND64rm killed renamable $rdi, renamable $r8, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i215, align 4)
    renamable $esi = MOV32rm killed renamable $rsi, 4, killed renamable $rdi, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i224)
    renamable $rax = MOV64rm %stack.16, 1, $noreg, 0, $noreg :: (load (s64) from %stack.16)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rdx :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $rcx :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $r8 :: (store (s64))
    MOV32mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $esi :: (store (s32), align 8)
    RET 0, $rax

...
---
name:            InterleaveIterator2_field_InterleaveIterator2_0
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 24, $noreg :: (load (s64) from %ir.2)
    RET 0, $rax

...
---
name:            InterleaveIterator2_B_init_firstIterator2T_secondIterator2T
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 104, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            InterleaveIterator2_B_next_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 112, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            InterleaveIterator2_init_firstIterator2T_secondIterator2T
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
  hasTailCall:     true
fixedStack:
  - { id: 0, offset: 80, size: 4, alignment: 16 }
  - { id: 1, offset: 72, size: 8, alignment: 8 }
  - { id: 2, offset: 64, size: 8, alignment: 16 }
  - { id: 3, offset: 56, size: 8, alignment: 8 }
  - { id: 4, offset: 48, size: 4, alignment: 16 }
  - { id: 5, offset: 40, size: 8, alignment: 8 }
  - { id: 6, offset: 32, size: 8, alignment: 16 }
  - { id: 7, offset: 24, size: 8, alignment: 8 }
  - { id: 8, offset: 16, size: 8, alignment: 16 }
  - { id: 9, offset: 8, size: 4, alignment: 8 }
  - { id: 10, size: 8, alignment: 16 }
stack:
  - { id: 0, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.5):
    liveins: $rdi, $rsi
  
    renamable $rbx = COPY $rsi
    renamable $r14 = COPY $rdi
    renamable $rax = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.2, align 16)
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.0)
    renamable $r12 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.1)
    renamable $r13 = MOV64rm %fixed-stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.3)
    renamable $rdx = MOV64rm %fixed-stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.6, align 16)
    renamable $rcx = MOV64rm %fixed-stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.5)
    renamable $rsi = MOV64rm %fixed-stack.7, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.7)
    renamable $rax = MOV64rm $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rdi = MOV64ri 6709847746581360093
    renamable $rdi = IMUL64rm killed renamable $rdi, renamable $r14, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $r8 = COPY renamable $rdi
    renamable $r8 = SHR64ri killed renamable $r8, 32, implicit-def dead $eflags
    renamable $r8 = XOR64rr killed renamable $r8, killed renamable $rdi, implicit-def dead $eflags
    renamable $r8 = AND64rm killed renamable $r8, renamable $r14, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $rbp = MOVSX64rm32 killed renamable $rax, 4, killed renamable $r8, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm renamable $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i20)
    renamable $r15 = MOV64ri 4189192806087951739
    renamable $rdi = MOV64rm renamable $rsi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i18, align 4)
    renamable $rdi = IMUL64rr killed renamable $rdi, renamable $r15, implicit-def dead $eflags
    renamable $r8 = COPY renamable $rdi
    renamable $r8 = SHR64ri killed renamable $r8, 32, implicit-def dead $eflags
    renamable $r8 = XOR64rr killed renamable $r8, killed renamable $rdi, implicit-def dead $eflags
    renamable $r8 = AND64rm killed renamable $r8, renamable $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i19, align 4)
    renamable $r8d = MOV32rm killed renamable $rax, 4, killed renamable $r8, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i28)
    renamable $rax = MOV64rm renamable $r14, 8, renamable $rbp, 0, $noreg :: (load (s64) from %ir.8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    CALL64m killed renamable $rax, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.10)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm renamable $r13, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i48)
    renamable $r15 = IMUL64rm killed renamable $r15, renamable $r13, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i46, align 4)
    renamable $rcx = COPY renamable $r15
    renamable $rcx = SHR64ri killed renamable $rcx, 32, implicit-def dead $eflags
    renamable $rcx = XOR64rr killed renamable $rcx, killed renamable $r15, implicit-def dead $eflags
    renamable $rcx = AND64rm killed renamable $rcx, renamable $r13, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i47, align 4)
    renamable $r8d = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i56)
    renamable $rax = MOV64rm renamable $r14, 8, renamable $rbp, 8, $noreg :: (load (s64) from %ir.17)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    $rsi = COPY killed renamable $r13
    $rdx = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %stack.0)
    $rcx = COPY killed renamable $r12
    CALL64m killed renamable $rax, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.19)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm killed renamable $r14, 8, killed renamable $rbp, 16, $noreg :: (load (s64) from %ir.26)
    renamable $rax = MOV64rm killed renamable $rax, 1, $noreg, 8, $noreg :: (load (s64) from %ir.28)
    $rdi = COPY killed renamable $rbx
    $esi = MOV32ri 1
    TCRETURNri64 killed renamable $rax, 0, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi

...
---
name:            InterleaveIterator2_next_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
frameInfo:
  maxAlignment:    16
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 24, size: 8, alignment: 8, isImmutable: true }
  - { id: 1, offset: 16, size: 4, alignment: 16, isImmutable: true }
  - { id: 2, offset: 8, size: 8, alignment: 8, isImmutable: true }
  - { id: 3, size: 8, alignment: 16, isImmutable: true }
stack:
  - { id: 0, size: 1, alignment: 8 }
  - { id: 1, size: 32, alignment: 8 }
  - { id: 2, size: 48, alignment: 16 }
  - { id: 3, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.3):
    successors: %bb.1, %bb.2
    liveins: $rdi, $rdx, $rsi
  
    renamable $r14 = COPY $rdx
    renamable $r15 = COPY $rsi
    renamable $rbx = COPY $rdi
    renamable $rax = MOV64rm $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri 6709847746581360093
    renamable $rcx = IMUL64rm killed renamable $rcx, $rsi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $r12 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $r13 = LEA64r $rsi, 8, renamable $r12, 0, $noreg
    renamable $rax = MOV64rm $rsi, 8, renamable $r12, 16, $noreg :: (load (s64) from %ir.8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r14
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $al :: (load (s64) from %ir.9)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = MOV64rm killed renamable $r15, 8, killed renamable $r12, 16, $noreg :: (load (s64) from %ir.8)
    renamable $rcx = MOV64rm killed renamable $rcx, 1, $noreg, 8, $noreg :: (load (s64) from %ir.14)
    TEST8ri killed renamable $al, 1, implicit-def $eflags
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, renamable $r13 :: (store (s64) into %stack.3)
    JCC_1 %bb.2, 4, implicit killed $eflags
    JMP_1 %bb.1
  
  bb.1 (%ir-block.16):
    liveins: $rbx, $rcx, $r13, $r14
  
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r14
    $esi = MOV32r0 implicit-def dead $eflags
    CALL64r killed renamable $rcx, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = COPY killed renamable $r13
    JMP_1 %bb.3
  
  bb.2 (%ir-block.18):
    liveins: $rbx, $rcx, $r13, $r14
  
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r14
    $esi = MOV32ri 1
    CALL64r killed renamable $rcx, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = LEA64r killed renamable $r13, 1, $noreg, 8, $noreg
  
  bb.3 (%ir-block.21):
    liveins: $rax, $rbx, $r14
  
    renamable $rax = MOV64rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s64) from %ir..sink.in)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.1, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r14
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir..sink)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r15 = MOVSX64rm32 %stack.1, 1, $noreg, 24, $noreg :: (load (s32) from %stack.1 + 24, align 8)
    renamable $r12 = MOV64rm %stack.1, 1, $noreg, 16, $noreg :: (load (s64) from %stack.1 + 16)
    renamable $r13 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %stack.1)
    renamable $rbp = MOV64rm %stack.1, 1, $noreg, 8, $noreg :: (load (s64) from %stack.1 + 8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $r14
    renamable $rax = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %stack.3)
    CALL64m killed renamable $rax, 1, $noreg, 24, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.29)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r14 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $r13
    $rsi = COPY renamable $rbp
    $rdx = COPY renamable $r12
    $ecx = COPY renamable $r15d
    $r8 = COPY renamable $r14
    CALL64m renamable $r13, 8, renamable $r15, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.36)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.2, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r13
    $rdx = COPY renamable $rbp
    $rcx = COPY renamable $r12
    $r8d = COPY renamable $r15d
    $r9 = COPY killed renamable $r13
    PUSH64r killed renamable $r14, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r15, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r12, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm %stack.2, 1, $noreg, 24, $noreg :: (load (s64) from %stack.2 + 24, basealign 16)
    renamable $ecx = MOV32rm %stack.2, 1, $noreg, 32, $noreg :: (load (s32) from %stack.2 + 32, align 16)
    renamable $rdx = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %stack.2, align 16)
    renamable $rsi = MOV64rm %stack.2, 1, $noreg, 16, $noreg :: (load (s64) from %stack.2 + 16, align 16)
    MOV64mr renamable $rbx, 1, $noreg, 0, $noreg, killed renamable $rdx :: (store (s64), align 16)
    MOV32mr renamable $rbx, 1, $noreg, 32, $noreg, killed renamable $ecx :: (store (s32) into unknown-address + 16, align 16)
    MOV64mr renamable $rbx, 1, $noreg, 16, $noreg, killed renamable $rsi :: (store (s64), align 16)
    MOV64mr renamable $rbx, 1, $noreg, 24, $noreg, killed renamable $rax :: (store (s64) into unknown-address + 8, basealign 16)
    $rax = COPY killed renamable $rbx
    RET 0, $rax

...
---
name:            InterleaveIterator2_getter_on_first
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    renamable $al = MOV8rm killed renamable $rdi, 1, $noreg, 64, $noreg :: (load (s8) from %ir.2)
    RET 0, $al

...
---
name:            InterleaveIterator2_setter_on_first
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$esi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $esi, $rdi
  
    renamable $esi = AND32ri killed renamable $esi, 1, implicit-def dead $eflags
    MOV8mr killed renamable $rdi, 1, $noreg, 64, $noreg, renamable $sil, implicit killed $esi :: (store (s8) into %ir.3)
    RET 0

...
---
name:            InterleaveIterator2_getter_second
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi, $rsi
  
    renamable $rax = COPY $rdi
    renamable $rcx = MOV64rm renamable $rsi, 1, $noreg, 32, $noreg :: (load (s64) from %ir.2)
    renamable $rdx = MOV64rm renamable $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.5)
    renamable $rdi = MOV64rm renamable $rsi, 1, $noreg, 48, $noreg :: (load (s64) from %ir.8)
    renamable $esi = MOV32rm killed renamable $rsi, 1, $noreg, 56, $noreg :: (load (s32) from %ir.11)
    MOV32mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $esi :: (store (s32), align 8)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rdi :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64))
    RET 0, $rax

...
---
name:            InterleaveIterator2_setter_second
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
  - { reg: '$rcx' }
  - { reg: '$r8d' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rcx, $rdi, $rdx, $rsi, $r8d
  
    MOV64mr renamable $rdi, 1, $noreg, 32, $noreg, killed renamable $rsi :: (store (s64) into %ir.3)
    MOV64mr renamable $rdi, 1, $noreg, 40, $noreg, killed renamable $rdx :: (store (s64) into %ir.4)
    MOV64mr renamable $rdi, 1, $noreg, 48, $noreg, killed renamable $rcx :: (store (s64) into %ir.5)
    MOV32mr killed renamable $rdi, 1, $noreg, 56, $noreg, killed renamable $r8d :: (store (s32) into %ir.6)
    RET 0

...
---
name:            InterleaveIterator2_getter_first
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi, $rsi
  
    renamable $rax = COPY $rdi
    renamable $rcx = MOV64rm renamable $rsi, 1, $noreg, 0, $noreg :: (load (s64) from %ir.0)
    renamable $rdx = MOV64rm renamable $rsi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.4)
    renamable $rdi = MOV64rm renamable $rsi, 1, $noreg, 16, $noreg :: (load (s64) from %ir.7)
    renamable $esi = MOV32rm killed renamable $rsi, 1, $noreg, 24, $noreg :: (load (s32) from %ir.10)
    MOV32mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $esi :: (store (s32), align 8)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rdi :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64))
    RET 0, $rax

...
---
name:            InterleaveIterator2_setter_first
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
  - { reg: '$rcx' }
  - { reg: '$r8d' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rcx, $rdi, $rdx, $rsi, $r8d
  
    MOV64mr renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $rsi :: (store (s64) into %ir.0)
    MOV64mr renamable $rdi, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64) into %ir.3)
    MOV64mr renamable $rdi, 1, $noreg, 16, $noreg, killed renamable $rcx :: (store (s64) into %ir.4)
    MOV32mr killed renamable $rdi, 1, $noreg, 24, $noreg, killed renamable $r8d :: (store (s32) into %ir.5)
    RET 0

...
---
name:            InterleaveIterable2_getter_second
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi, $rsi
  
    renamable $rax = COPY $rdi
    renamable $rcx = MOV64rm renamable $rsi, 1, $noreg, 32, $noreg :: (load (s64) from %ir.2)
    renamable $rdx = MOV64rm renamable $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.5)
    renamable $rdi = MOV64rm renamable $rsi, 1, $noreg, 48, $noreg :: (load (s64) from %ir.8)
    renamable $esi = MOV32rm killed renamable $rsi, 1, $noreg, 56, $noreg :: (load (s32) from %ir.11)
    MOV32mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $esi :: (store (s32), align 8)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rdi :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64))
    RET 0, $rax

...
---
name:            InterleaveIterable2_setter_second
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
  - { reg: '$rcx' }
  - { reg: '$r8d' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rcx, $rdi, $rdx, $rsi, $r8d
  
    MOV64mr renamable $rdi, 1, $noreg, 32, $noreg, killed renamable $rsi :: (store (s64) into %ir.3)
    MOV64mr renamable $rdi, 1, $noreg, 40, $noreg, killed renamable $rdx :: (store (s64) into %ir.4)
    MOV64mr renamable $rdi, 1, $noreg, 48, $noreg, killed renamable $rcx :: (store (s64) into %ir.5)
    MOV32mr killed renamable $rdi, 1, $noreg, 56, $noreg, killed renamable $r8d :: (store (s32) into %ir.6)
    RET 0

...
---
name:            InterleaveIterable2_getter_first
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi, $rsi
  
    renamable $rax = COPY $rdi
    renamable $rcx = MOV64rm renamable $rsi, 1, $noreg, 0, $noreg :: (load (s64) from %ir.0)
    renamable $rdx = MOV64rm renamable $rsi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.4)
    renamable $rdi = MOV64rm renamable $rsi, 1, $noreg, 16, $noreg :: (load (s64) from %ir.7)
    renamable $esi = MOV32rm killed renamable $rsi, 1, $noreg, 24, $noreg :: (load (s32) from %ir.10)
    MOV32mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $esi :: (store (s32), align 8)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rdi :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64))
    RET 0, $rax

...
---
name:            InterleaveIterable2_setter_first
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
  - { reg: '$rcx' }
  - { reg: '$r8d' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rcx, $rdi, $rdx, $rsi, $r8d
  
    MOV64mr renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $rsi :: (store (s64) into %ir.0)
    MOV64mr renamable $rdi, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64) into %ir.3)
    MOV64mr renamable $rdi, 1, $noreg, 16, $noreg, killed renamable $rcx :: (store (s64) into %ir.4)
    MOV32mr killed renamable $rdi, 1, $noreg, 24, $noreg, killed renamable $r8d :: (store (s32) into %ir.5)
    RET 0

...
---
name:            ChainIterable2_field_ChainIterable2_0
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg :: (load (s64) from %ir.2)
    RET 0, $rax

...
---
name:            ChainIterable2_B_init_firstIterable2T_secondIterable2T
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 176, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            ChainIterable2_B_iterator_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 184, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            ChainIterable2_B_each_fFunctionT_to_Nothing
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 192, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            ChainIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 200, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            ChainIterable2_B_all_fFunctionT_to_Ptri1
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 208, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            ChainIterable2_B_any_fFunctionT_to_Ptri1
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 216, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            ChainIterable2_B_map_fFunctionT_to_U
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 224, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            ChainIterable2_B_filter_fFunctionT_to_Ptri1
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 232, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            ChainIterable2_B_chain_otherIterable2T
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 240, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            ChainIterable2_B_interleave_otherIterable2T
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 248, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            ChainIterable2_B_zip_otherIterable2U
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 256, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            ChainIterable2_B_product_otherIterable2U
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 264, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            ChainIterable2_init_firstIterable2T_secondIterable2T
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
  hasTailCall:     true
fixedStack:
  - { id: 0, offset: 80, size: 4, alignment: 16 }
  - { id: 1, offset: 72, size: 8, alignment: 8 }
  - { id: 2, offset: 64, size: 8, alignment: 16 }
  - { id: 3, offset: 56, size: 8, alignment: 8 }
  - { id: 4, offset: 48, size: 4, alignment: 16 }
  - { id: 5, offset: 40, size: 8, alignment: 8 }
  - { id: 6, offset: 32, size: 8, alignment: 16 }
  - { id: 7, offset: 24, size: 8, alignment: 8 }
  - { id: 8, offset: 16, size: 8, alignment: 16 }
  - { id: 9, offset: 8, size: 4, alignment: 8 }
  - { id: 10, size: 8, alignment: 16 }
stack:
  - { id: 0, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.5):
    liveins: $rdi, $rsi
  
    renamable $rbx = COPY $rsi
    renamable $r12 = COPY $rdi
    renamable $rax = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.2, align 16)
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.0)
    renamable $r15 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.1)
    renamable $r13 = MOV64rm %fixed-stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.3)
    renamable $rdx = MOV64rm %fixed-stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.6, align 16)
    renamable $rcx = MOV64rm %fixed-stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.5)
    renamable $rsi = MOV64rm %fixed-stack.7, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.7)
    renamable $rax = MOV64rm $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rdi = MOV64ri -5233298072945030060
    renamable $rdi = IMUL64rm killed renamable $rdi, renamable $r12, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $r8 = COPY renamable $rdi
    renamable $r8 = SHR64ri killed renamable $r8, 32, implicit-def dead $eflags
    renamable $r8 = XOR64rr killed renamable $r8, killed renamable $rdi, implicit-def dead $eflags
    renamable $r8 = AND64rm killed renamable $r8, renamable $r12, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $rbp = MOVSX64rm32 killed renamable $rax, 4, killed renamable $r8, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm renamable $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i20)
    renamable $r14 = MOV64ri 5693646204635713916
    renamable $rdi = MOV64rm renamable $rsi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i18, align 4)
    renamable $rdi = IMUL64rr killed renamable $rdi, renamable $r14, implicit-def dead $eflags
    renamable $r8 = COPY renamable $rdi
    renamable $r8 = SHR64ri killed renamable $r8, 32, implicit-def dead $eflags
    renamable $r8 = XOR64rr killed renamable $r8, killed renamable $rdi, implicit-def dead $eflags
    renamable $r8 = AND64rm killed renamable $r8, renamable $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i19, align 4)
    renamable $r8d = MOV32rm killed renamable $rax, 4, killed renamable $r8, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i28)
    renamable $rax = MOV64rm renamable $r12, 8, renamable $rbp, 0, $noreg :: (load (s64) from %ir.8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    CALL64m killed renamable $rax, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.10)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm renamable $r13, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i48)
    renamable $r14 = IMUL64rm killed renamable $r14, renamable $r13, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i46, align 4)
    renamable $rcx = COPY renamable $r14
    renamable $rcx = SHR64ri killed renamable $rcx, 32, implicit-def dead $eflags
    renamable $rcx = XOR64rr killed renamable $rcx, killed renamable $r14, implicit-def dead $eflags
    renamable $rcx = AND64rm killed renamable $rcx, renamable $r13, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i47, align 4)
    renamable $r8d = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i56)
    renamable $rax = MOV64rm killed renamable $r12, 8, killed renamable $rbp, 8, $noreg :: (load (s64) from %ir.17)
    renamable $rax = MOV64rm killed renamable $rax, 1, $noreg, 8, $noreg :: (load (s64) from %ir.19)
    $rdi = COPY killed renamable $rbx
    $rsi = COPY killed renamable $r13
    $rdx = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %stack.0)
    $rcx = COPY killed renamable $r15
    TCRETURNri64 killed renamable $rax, 0, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d

...
---
name:            ChainIterable2_iterator_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 24, size: 8, alignment: 8, isImmutable: true }
  - { id: 1, offset: 16, size: 4, alignment: 16, isImmutable: true }
  - { id: 2, offset: 8, size: 8, alignment: 8, isImmutable: true }
  - { id: 3, size: 8, alignment: 16, isImmutable: true }
stack:
  - { id: 0, size: 1, alignment: 8 }
  - { id: 1, size: 32, alignment: 8 }
  - { id: 2, size: 16, alignment: 8 }
  - { id: 3, size: 16, alignment: 8 }
  - { id: 4, size: 32, alignment: 8 }
  - { id: 5, size: 32, alignment: 8 }
  - { id: 6, size: 32, alignment: 8 }
  - { id: 7, size: 32, alignment: 8 }
  - { id: 8, size: 32, alignment: 8 }
  - { id: 9, size: 32, alignment: 8 }
  - { id: 10, size: 32, alignment: 8 }
  - { id: 11, size: 32, alignment: 8 }
  - { id: 12, type: spill-slot, size: 8, alignment: 8 }
  - { id: 13, type: spill-slot, size: 8, alignment: 8 }
  - { id: 14, type: spill-slot, size: 8, alignment: 8 }
  - { id: 15, type: spill-slot, size: 8, alignment: 8 }
  - { id: 16, type: spill-slot, size: 8, alignment: 8 }
  - { id: 17, type: spill-slot, size: 8, alignment: 8 }
  - { id: 18, type: spill-slot, size: 8, alignment: 8 }
  - { id: 19, type: spill-slot, size: 8, alignment: 8 }
  - { id: 20, type: spill-slot, size: 8, alignment: 8 }
  - { id: 21, type: spill-slot, size: 8, alignment: 8 }
  - { id: 22, type: spill-slot, size: 8, alignment: 8 }
  - { id: 23, type: spill-slot, size: 8, alignment: 8 }
  - { id: 24, type: spill-slot, size: 8, alignment: 8 }
  - { id: 25, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.3):
    liveins: $rdi, $rdx, $rsi
  
    renamable $r15 = COPY $rdx
    MOV64mr %stack.12, 1, $noreg, 0, $noreg, $rdx :: (store (s64) into %stack.12)
    MOV64mr %stack.16, 1, $noreg, 0, $noreg, $rdi :: (store (s64) into %stack.16)
    renamable $rax = MOV64rm renamable $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri -5233298072945030060
    renamable $rcx = IMUL64rm killed renamable $rcx, renamable $rsi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, renamable $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $rax = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    MOV64mr %stack.14, 1, $noreg, 0, $noreg, renamable $rax :: (store (s64) into %stack.14)
    renamable $rax = MOV64rm renamable $rsi, 8, killed renamable $rax, 0, $noreg :: (load (s64) from %ir.7)
    renamable $r14 = COPY renamable $rsi
    MOV64mr %stack.13, 1, $noreg, 0, $noreg, $rsi :: (store (s64) into %stack.13)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.4, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.8)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = MOVSX64rm32 %stack.4, 1, $noreg, 24, $noreg :: (load (s32) from %stack.4 + 24, align 8)
    renamable $r13 = MOV64rm %stack.4, 1, $noreg, 16, $noreg :: (load (s64) from %stack.4 + 16)
    renamable $rbp = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %stack.4)
    renamable $r12 = MOV64rm %stack.4, 1, $noreg, 8, $noreg :: (load (s64) from %stack.4 + 8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $r15
    renamable $r15 = MOV64rm %stack.14, 1, $noreg, 0, $noreg :: (load (s64) from %stack.14)
    CALL64m killed renamable $r14, 8, renamable $r15, 16, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.16)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r8 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $rbp
    $rsi = COPY renamable $r12
    $rdx = COPY renamable $r13
    $ecx = COPY renamable $ebx
    renamable $r14 = COPY renamable $r8
    CALL64m renamable $rbp, 8, renamable $rbx, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.23)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.5, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $rbp
    $rdx = COPY renamable $r12
    $rcx = COPY renamable $r13
    $r8d = COPY renamable $ebx
    $r9 = COPY killed renamable $rbp
    PUSH64r killed renamable $r14, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r13, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r12, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r14 = COPY killed renamable $r15
    renamable $r15 = MOV64rm %stack.13, 1, $noreg, 0, $noreg :: (load (s64) from %stack.13)
    renamable $rax = MOV64rm renamable $r15, 8, renamable $r14, 8, $noreg :: (load (s64) from %ir.28)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.6, 1, $noreg, 0, $noreg
    renamable $r12 = MOV64rm %stack.12, 1, $noreg, 0, $noreg :: (load (s64) from %stack.12)
    $rsi = COPY renamable $r12
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.29)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = MOVSX64rm32 %stack.6, 1, $noreg, 24, $noreg :: (load (s32) from %stack.6 + 24, align 8)
    renamable $rax = MOV64rm %stack.6, 1, $noreg, 16, $noreg :: (load (s64) from %stack.6 + 16)
    MOV64mr %stack.15, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.15)
    renamable $r13 = MOV64rm %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %stack.6)
    renamable $rbp = MOV64rm %stack.6, 1, $noreg, 8, $noreg :: (load (s64) from %stack.6 + 8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $r12
    CALL64m killed renamable $r15, 8, renamable $r14, 16, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.16)
    renamable $r12 = COPY killed renamable $r14
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r13
    $rsi = COPY renamable $rbp
    renamable $r15 = MOV64rm %stack.15, 1, $noreg, 0, $noreg :: (load (s64) from %stack.15)
    $rdx = COPY renamable $r15
    $ecx = COPY renamable $ebx
    renamable $r14 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $r8 = COPY renamable $r14
    CALL64m renamable $r13, 8, renamable $rbx, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.43)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.7, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r13
    $rdx = COPY renamable $rbp
    $rcx = COPY renamable $r15
    $r8d = COPY renamable $ebx
    $r9 = COPY killed renamable $r13
    PUSH64r killed renamable $r14, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r15, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r15 = MOV64rm %stack.12, 1, $noreg, 0, $noreg :: (load (s64) from %stack.12)
    $rdi = COPY renamable $r15
    renamable $r14 = MOV64rm %stack.13, 1, $noreg, 0, $noreg :: (load (s64) from %stack.13)
    CALL64m renamable $r14, 8, renamable $r12, 16, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.16)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $rsi = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    MOV64mr %stack.17, 1, $noreg, 0, $noreg, renamable $rsi :: (store (s64) into %stack.17)
    $rdi = MOV32ri64 80
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @ChainIterator2, $noreg :: (load (s64) from got, align 16)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.50)
    MOV64mr %stack.1, 1, $noreg, 8, $noreg, renamable $rax :: (store (s64) into %ir.51)
    MOV32mi %stack.1, 1, $noreg, 24, $noreg, 7 :: (store (s32) into %ir.52, align 8)
    MOV64mr killed renamable $rax, 1, $noreg, 72, $noreg, killed renamable $rbx :: (store (s64) into %ir.54)
    renamable $rax = MOV64rm killed renamable $r14, 8, renamable $r12, 0, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.8, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.57)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = MOVSX64rm32 %stack.8, 1, $noreg, 24, $noreg :: (load (s32) from %stack.8 + 24, align 8)
    renamable $r14 = MOV64rm %stack.8, 1, $noreg, 16, $noreg :: (load (s64) from %stack.8 + 16)
    renamable $r13 = MOV64rm %stack.8, 1, $noreg, 0, $noreg :: (load (s64) from %stack.8)
    renamable $rbp = MOV64rm %stack.8, 1, $noreg, 8, $noreg :: (load (s64) from %stack.8 + 8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $r15
    renamable $rax = MOV64rm %stack.13, 1, $noreg, 0, $noreg :: (load (s64) from %stack.13)
    CALL64m killed renamable $rax, 8, renamable $r12, 16, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.16)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r13
    $rsi = COPY renamable $rbp
    $rdx = COPY renamable $r14
    $ecx = COPY renamable $ebx
    renamable $r15 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $r8 = COPY renamable $r15
    CALL64m renamable $r13, 8, renamable $rbx, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.71)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.9, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r13
    $rdx = COPY renamable $rbp
    $rcx = COPY renamable $r14
    $r8d = COPY renamable $ebx
    $r9 = COPY killed renamable $r13
    PUSH64r killed renamable $r15, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r14, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm %stack.9, 1, $noreg, 16, $noreg :: (load (s64) from %stack.9 + 16)
    MOV64mr %stack.18, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.18)
    renamable $rax = MOV64rm %stack.9, 1, $noreg, 0, $noreg :: (load (s64) from %stack.9)
    MOV64mr %stack.15, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.15)
    renamable $rax = MOV64rm %stack.9, 1, $noreg, 8, $noreg :: (load (s64) from %stack.9 + 8)
    MOV64mr %stack.19, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.19)
    renamable $r14 = MOV64rm %stack.13, 1, $noreg, 0, $noreg :: (load (s64) from %stack.13)
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r12, 8, $noreg :: (load (s64) from %ir.28)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.10, 1, $noreg, 0, $noreg
    renamable $r15 = MOV64rm %stack.12, 1, $noreg, 0, $noreg :: (load (s64) from %stack.12)
    $rsi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.76)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = MOVSX64rm32 %stack.10, 1, $noreg, 24, $noreg :: (load (s32) from %stack.10 + 24, align 8)
    renamable $rax = MOV64rm %stack.10, 1, $noreg, 16, $noreg :: (load (s64) from %stack.10 + 16)
    MOV64mr %stack.20, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.20)
    renamable $r13 = MOV64rm %stack.10, 1, $noreg, 0, $noreg :: (load (s64) from %stack.10)
    renamable $rbp = MOV64rm %stack.10, 1, $noreg, 8, $noreg :: (load (s64) from %stack.10 + 8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $r15
    CALL64m renamable $r14, 8, killed renamable $r12, 16, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.16)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r13
    $rsi = COPY renamable $rbp
    renamable $r12 = MOV64rm %stack.20, 1, $noreg, 0, $noreg :: (load (s64) from %stack.20)
    $rdx = COPY renamable $r12
    $ecx = COPY renamable $ebx
    renamable $r15 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $r8 = COPY renamable $r15
    CALL64m renamable $r13, 8, renamable $rbx, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.90)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.11, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r13
    $rdx = COPY renamable $rbp
    $rcx = COPY renamable $r12
    $r8d = COPY renamable $ebx
    $r9 = COPY killed renamable $r13
    PUSH64r killed renamable $r15, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r12, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm %stack.11, 1, $noreg, 16, $noreg :: (load (s64) from %stack.11 + 16)
    MOV64mr %stack.20, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.20)
    renamable $r12 = MOV64rm %stack.11, 1, $noreg, 0, $noreg :: (load (s64) from %stack.11)
    renamable $rax = MOV64rm %stack.11, 1, $noreg, 8, $noreg :: (load (s64) from %stack.11 + 8)
    MOV64mr %stack.21, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.21)
    renamable $rax = MOV64rm renamable $r12, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i172)
    renamable $rdi = MOV64ri 4189192806087951739
    renamable $rcx = MOV64rm renamable $r12, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i170, align 4)
    renamable $rcx = IMUL64rr killed renamable $rcx, renamable $rdi, implicit-def dead $eflags
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, renamable $r12, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i171, align 4)
    renamable $r15 = MOV64rm %stack.15, 1, $noreg, 0, $noreg :: (load (s64) from %stack.15)
    renamable $rcx = MOV64rm renamable $r15, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i142)
    renamable $rsi = MOV64rm renamable $r15, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i140, align 4)
    renamable $rsi = IMUL64rr killed renamable $rsi, killed renamable $rdi, implicit-def dead $eflags
    renamable $rdi = COPY renamable $rsi
    renamable $rdi = SHR64ri killed renamable $rdi, 32, implicit-def dead $eflags
    renamable $rdi = XOR64rr killed renamable $rdi, killed renamable $rsi, implicit-def dead $eflags
    renamable $rdi = AND64rm killed renamable $rdi, killed renamable $r15, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i141, align 4)
    renamable $ecx = MOV32rm killed renamable $rcx, 4, killed renamable $rdi, 0, $noreg, implicit-def $rcx :: (load (s32) from %ir.offset_ptr.i.i194)
    MOV64mr %stack.22, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %stack.22)
    renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rdx, 0, $noreg, implicit-def $rax :: (load (s32) from %ir.offset_ptr.i.i180)
    MOV64mr %stack.23, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.23)
    renamable $rbx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.50)
    renamable $r13 = MOV64rm %stack.1, 1, $noreg, 8, $noreg :: (dereferenceable load (s64) from %ir.51)
    renamable $rax = MOV64rm %stack.1, 1, $noreg, 16, $noreg :: (dereferenceable load (s64) from %ir.106)
    MOV64mr %stack.24, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.24)
    renamable $rax = MOVSX64rm32 %stack.1, 1, $noreg, 24, $noreg :: (dereferenceable load (s32) from %ir.52, align 8)
    MOV64mr %stack.25, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.25)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV64rm %stack.12, 1, $noreg, 0, $noreg :: (load (s64) from %stack.12)
    renamable $rax = MOV64rm %stack.14, 1, $noreg, 0, $noreg :: (load (s64) from %stack.14)
    CALL64m killed renamable $r14, 8, killed renamable $rax, 16, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.16)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r14 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 16
    renamable $rbp = MOV64rm %stack.17, 1, $noreg, 0, $noreg :: (load (s64) from %stack.17)
    $rsi = COPY renamable $rbp
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r15 = COPY $rax
    MOV64mr $rax, 1, $noreg, 8, $noreg, renamable $r14 :: (store (s64) into %ir.114)
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @Iterator2, $noreg :: (load (s64) from got, align 16)
    MOV64mr renamable $r15, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.result.i211)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 16
    $rsi = COPY killed renamable $rbp
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $r14 :: (store (s64) into %ir.115)
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @Iterator2, $noreg :: (load (s64) from got, align 16)
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.result.i212)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $r15 :: (store (s64) into %ir.116)
    MOV64mr %stack.2, 1, $noreg, 8, $noreg, killed renamable $rax :: (store (s64) into %ir.117)
    renamable $rbp = MOV64rm %stack.25, 1, $noreg, 0, $noreg :: (load (s64) from %stack.25)
    renamable $rax = MOV64rm renamable $rbx, 8, renamable $rbp, 32, $noreg :: (load (s64) from %ir.122)
    renamable $r15 = MOV64rm %stack.15, 1, $noreg, 0, $noreg :: (load (s64) from %stack.15)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, renamable $r15 :: (store (s64) into %ir.124)
    MOV64mr %stack.3, 1, $noreg, 8, $noreg, renamable $r12 :: (store (s64) into %ir.125)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r8 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $rbx
    $rsi = COPY renamable $r13
    renamable $r14 = MOV64rm %stack.24, 1, $noreg, 0, $noreg :: (load (s64) from %stack.24)
    $rdx = COPY renamable $r14
    $ecx = COPY renamable $ebp
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 88, 0, 88, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r10 = LEA64r %stack.2, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $rbx
    $rsi = COPY renamable $r13
    $rdx = COPY renamable $r14
    $ecx = COPY renamable $ebp
    $r8 = COPY killed renamable $rbx
    $r9 = COPY killed renamable $r13
    PUSH64rmm %stack.23, 1, $noreg, 0, $noreg, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 80), (load (s64) from %stack.23)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64rmm %stack.20, 1, $noreg, 0, $noreg, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 72), (load (s64) from %stack.20)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64rmm %stack.21, 1, $noreg, 0, $noreg, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 64), (load (s64) from %stack.21)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r12, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 56)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64rmm %stack.22, 1, $noreg, 0, $noreg, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 48), (load (s64) from %stack.22)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64rmm %stack.18, 1, $noreg, 0, $noreg, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 40), (load (s64) from %stack.18)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64rmm %stack.19, 1, $noreg, 0, $noreg, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 32), (load (s64) from %stack.19)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r15, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r10, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r14, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 88, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r8 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.50)
    renamable $rcx = MOV64rm %stack.1, 1, $noreg, 8, $noreg :: (dereferenceable load (s64) from %ir.51)
    renamable $rdx = MOV64rm %stack.1, 1, $noreg, 16, $noreg :: (dereferenceable load (s64) from %ir.106)
    renamable $rsi = MOV64rm renamable $r8, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i216)
    renamable $rax = MOV64ri 4189192806087951739
    renamable $rax = IMUL64rm killed renamable $rax, renamable $r8, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i214, align 4)
    renamable $rdi = COPY renamable $rax
    renamable $rdi = SHR64ri killed renamable $rdi, 32, implicit-def dead $eflags
    renamable $rdi = XOR64rr killed renamable $rdi, killed renamable $rax, implicit-def dead $eflags
    renamable $rdi = AND64rm killed renamable $rdi, renamable $r8, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i215, align 4)
    renamable $esi = MOV32rm killed renamable $rsi, 4, killed renamable $rdi, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i224)
    renamable $rax = MOV64rm %stack.16, 1, $noreg, 0, $noreg :: (load (s64) from %stack.16)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rdx :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $rcx :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $r8 :: (store (s64))
    MOV32mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $esi :: (store (s32), align 8)
    RET 0, $rax

...
---
name:            ChainIterator2_field_ChainIterator2_0
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 24, $noreg :: (load (s64) from %ir.2)
    RET 0, $rax

...
---
name:            ChainIterator2_B_init_firstIterator2T_secondIterator2T
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 104, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            ChainIterator2_B_next_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 112, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            ChainIterator2_init_firstIterator2T_secondIterator2T
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
  hasTailCall:     true
fixedStack:
  - { id: 0, offset: 80, size: 4, alignment: 16 }
  - { id: 1, offset: 72, size: 8, alignment: 8 }
  - { id: 2, offset: 64, size: 8, alignment: 16 }
  - { id: 3, offset: 56, size: 8, alignment: 8 }
  - { id: 4, offset: 48, size: 4, alignment: 16 }
  - { id: 5, offset: 40, size: 8, alignment: 8 }
  - { id: 6, offset: 32, size: 8, alignment: 16 }
  - { id: 7, offset: 24, size: 8, alignment: 8 }
  - { id: 8, offset: 16, size: 8, alignment: 16 }
  - { id: 9, offset: 8, size: 4, alignment: 8 }
  - { id: 10, size: 8, alignment: 16 }
stack:
  - { id: 0, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.5):
    liveins: $rdi, $rsi
  
    renamable $rbx = COPY $rsi
    renamable $r14 = COPY $rdi
    renamable $rax = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.2, align 16)
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.0)
    renamable $r12 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.1)
    renamable $r13 = MOV64rm %fixed-stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.3)
    renamable $rdx = MOV64rm %fixed-stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.6, align 16)
    renamable $rcx = MOV64rm %fixed-stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.5)
    renamable $rsi = MOV64rm %fixed-stack.7, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.7)
    renamable $rax = MOV64rm $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rdi = MOV64ri -228267985060461774
    renamable $rdi = IMUL64rm killed renamable $rdi, renamable $r14, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $r8 = COPY renamable $rdi
    renamable $r8 = SHR64ri killed renamable $r8, 32, implicit-def dead $eflags
    renamable $r8 = XOR64rr killed renamable $r8, killed renamable $rdi, implicit-def dead $eflags
    renamable $r8 = AND64rm killed renamable $r8, renamable $r14, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $rbp = MOVSX64rm32 killed renamable $rax, 4, killed renamable $r8, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm renamable $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i20)
    renamable $r15 = MOV64ri 4189192806087951739
    renamable $rdi = MOV64rm renamable $rsi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i18, align 4)
    renamable $rdi = IMUL64rr killed renamable $rdi, renamable $r15, implicit-def dead $eflags
    renamable $r8 = COPY renamable $rdi
    renamable $r8 = SHR64ri killed renamable $r8, 32, implicit-def dead $eflags
    renamable $r8 = XOR64rr killed renamable $r8, killed renamable $rdi, implicit-def dead $eflags
    renamable $r8 = AND64rm killed renamable $r8, renamable $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i19, align 4)
    renamable $r8d = MOV32rm killed renamable $rax, 4, killed renamable $r8, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i28)
    renamable $rax = MOV64rm renamable $r14, 8, renamable $rbp, 0, $noreg :: (load (s64) from %ir.8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    CALL64m killed renamable $rax, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.10)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm renamable $r13, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i48)
    renamable $r15 = IMUL64rm killed renamable $r15, renamable $r13, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i46, align 4)
    renamable $rcx = COPY renamable $r15
    renamable $rcx = SHR64ri killed renamable $rcx, 32, implicit-def dead $eflags
    renamable $rcx = XOR64rr killed renamable $rcx, killed renamable $r15, implicit-def dead $eflags
    renamable $rcx = AND64rm killed renamable $rcx, renamable $r13, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i47, align 4)
    renamable $r8d = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i56)
    renamable $rax = MOV64rm renamable $r14, 8, renamable $rbp, 8, $noreg :: (load (s64) from %ir.17)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    $rsi = COPY killed renamable $r13
    $rdx = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %stack.0)
    $rcx = COPY killed renamable $r12
    CALL64m killed renamable $rax, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.19)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm killed renamable $r14, 8, killed renamable $rbp, 16, $noreg :: (load (s64) from %ir.26)
    renamable $rax = MOV64rm killed renamable $rax, 1, $noreg, 8, $noreg :: (load (s64) from %ir.28)
    $rdi = COPY killed renamable $rbx
    $esi = MOV32ri 1
    TCRETURNri64 killed renamable $rax, 0, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi

...
---
name:            ChainIterator2_next_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
frameInfo:
  maxAlignment:    16
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 24, size: 8, alignment: 8, isImmutable: true }
  - { id: 1, offset: 16, size: 4, alignment: 16, isImmutable: true }
  - { id: 2, offset: 8, size: 8, alignment: 8, isImmutable: true }
  - { id: 3, size: 8, alignment: 16, isImmutable: true }
stack:
  - { id: 0, size: 1, alignment: 8 }
  - { id: 1, size: 32, alignment: 8 }
  - { id: 2, size: 48, alignment: 16 }
  - { id: 3, size: 32, alignment: 8 }
  - { id: 4, size: 48, alignment: 16 }
  - { id: 5, type: spill-slot, size: 8, alignment: 8 }
  - { id: 6, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.3):
    liveins: $rdi, $rdx, $rsi
  
    renamable $r15 = COPY $rdx
    renamable $r14 = COPY $rsi
    MOV64mr %stack.5, 1, $noreg, 0, $noreg, $rdi :: (store (s64) into %stack.5)
    renamable $rax = MOV64rm $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri -228267985060461774
    renamable $rcx = IMUL64rm killed renamable $rcx, $rsi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $rbx = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm $rsi, 8, renamable $rbx, 16, $noreg :: (load (s64) from %ir.8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $al :: (load (s64) from %ir.9)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    TEST8ri killed renamable $al, 1, implicit-def $eflags
    JCC_1 %bb.2, 5, implicit killed $eflags
    JMP_1 %bb.1
  
  bb.1 (%ir-block.13):
    liveins: $rbx, $r14, $r15
  
    renamable $rax = MOV64rm renamable $r14, 8, renamable $rbx, 8, $noreg :: (load (s64) from %ir.sunkaddr3)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.1, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.14)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r12 = MOVSX64rm32 %stack.1, 1, $noreg, 24, $noreg :: (load (s32) from %stack.1 + 24, align 8)
    renamable $r13 = MOV64rm %stack.1, 1, $noreg, 16, $noreg :: (load (s64) from %stack.1 + 16)
    renamable $rbp = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %stack.1)
    renamable $rax = MOV64rm %stack.1, 1, $noreg, 8, $noreg :: (load (s64) from %stack.1 + 8)
    MOV64mr %stack.6, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.6)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $r15
    CALL64m killed renamable $r14, 8, killed renamable $rbx, 24, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.sunkaddr6)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r14 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $rbp
    renamable $rbx = MOV64rm %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %stack.6)
    $rsi = COPY renamable $rbx
    $rdx = COPY renamable $r13
    $ecx = COPY renamable $r12d
    $r8 = COPY renamable $r14
    CALL64m renamable $rbp, 8, renamable $r12, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.28)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.2, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $rbp
    $rdx = COPY renamable $rbx
    $rcx = COPY renamable $r13
    $r8d = COPY renamable $r12d
    $r9 = COPY killed renamable $rbp
    PUSH64r killed renamable $r14, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r12, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r13, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $esi = MOV32rm %stack.2, 1, $noreg, 32, $noreg, implicit-def $rsi :: (load (s32) from %stack.2 + 32, align 16)
    renamable $r9 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %stack.2, align 16)
    renamable $rdx = MOV64rm %stack.2, 1, $noreg, 16, $noreg :: (load (s64) from %stack.2 + 16, align 16)
    renamable $rcx = MOV64rm %stack.2, 1, $noreg, 24, $noreg :: (load (s64) from %stack.2 + 24, basealign 16)
    JMP_1 %bb.6
  
  bb.2 (%ir-block.32):
    successors: %bb.3, %bb.4
    liveins: $rbx, $r14, $r15
  
    renamable $rax = MOV64rm renamable $r14, 8, renamable $rbx, 0, $noreg :: (load (s64) from %ir.sunkaddr8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.3, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.33)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r12 = MOVSX64rm32 %stack.3, 1, $noreg, 24, $noreg :: (load (s32) from %stack.3 + 24, align 8)
    renamable $rax = MOV64rm %stack.3, 1, $noreg, 16, $noreg :: (load (s64) from %stack.3 + 16)
    MOV64mr %stack.6, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.6)
    renamable $r13 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %stack.3)
    renamable $rbp = MOV64rm %stack.3, 1, $noreg, 8, $noreg :: (load (s64) from %stack.3 + 8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    CALL64m renamable $r14, 8, renamable $rbx, 24, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.sunkaddr11)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r8 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $r13
    $rsi = COPY renamable $rbp
    $rdx = MOV64rm %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %stack.6)
    $ecx = COPY renamable $r12d
    CALL64m renamable $r13, 8, renamable $r12, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.47)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.4, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r13
    $rdx = COPY renamable $rbp
    renamable $rcx = MOV64rm %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %stack.6)
    $r8d = COPY renamable $r12d
    $r9 = COPY killed renamable $r13
    renamable $r10 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    PUSH64r killed renamable $r10, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r12, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r renamable $rcx, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r9 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %stack.4, align 16)
    CMP64rm renamable $r9, $rip, 1, $noreg, target-flags(x86-gotpcrel) @nil_typ, $noreg, implicit-def $eflags :: (load (s64) from got)
    renamable $cl = SETCCr 5, implicit killed $eflags
    TEST64rr renamable $r9, renamable $r9, implicit-def $eflags
    renamable $dl = SETCCr 5, implicit killed $eflags
    TEST8rr killed renamable $cl, killed renamable $dl, implicit-def $eflags
    JCC_1 %bb.4, 5, implicit killed $eflags
  
  bb.3:
    liveins: $rbx, $r14, $r15
  
    JMP_1 %bb.5
  
  bb.4 (%ir-block.54):
    liveins: $r9
  
    renamable $rcx = MOV64rm %stack.4, 1, $noreg, 24, $noreg :: (load (s64) from %stack.4 + 24, basealign 16)
    renamable $rdx = MOV64rm %stack.4, 1, $noreg, 16, $noreg :: (load (s64) from %stack.4 + 16, align 16)
    renamable $rsi = MOV64rm renamable $r9, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i74)
    renamable $rdi = MOV64ri 3084208142191802847
    renamable $rdi = IMUL64rm killed renamable $rdi, renamable $r9, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i72, align 4)
    renamable $r8 = COPY renamable $rdi
    renamable $r8 = SHR64ri killed renamable $r8, 32, implicit-def dead $eflags
    renamable $r8 = XOR64rr killed renamable $r8, killed renamable $rdi, implicit-def dead $eflags
    renamable $r8 = AND64rm killed renamable $r8, renamable $r9, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i73, align 4)
    renamable $esi = MOV32rm killed renamable $rsi, 4, killed renamable $r8, 0, $noreg, implicit-def $rsi :: (load (s32) from %ir.offset_ptr.i.i82)
    JMP_1 %bb.6
  
  bb.5.._crit_edge:
    liveins: $rbx, $r14, $r15
  
    renamable $rax = MOV64rm renamable $r14, 8, renamable $rbx, 16, $noreg :: (load (s64) from %ir.sunkaddr14)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    $esi = MOV32r0 implicit-def dead $eflags
    CALL64m killed renamable $rax, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.56)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    JMP_1 %bb.5
  
  bb.6 (%ir-block.58):
    liveins: $rcx, $rdx, $rsi, $r9
  
    renamable $rax = MOV64rm %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %stack.5)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rdx :: (store (s64), align 16)
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $r9 :: (store (s64), align 16)
    MOV64mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $rcx :: (store (s64) into unknown-address + 8, basealign 16)
    MOV32mr renamable $rax, 1, $noreg, 32, $noreg, renamable $esi, implicit killed $rsi :: (store (s32) into unknown-address + 16, align 16)
    RET 0, $rax

...
---
name:            ChainIterator2_getter_on_first
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    renamable $al = MOV8rm killed renamable $rdi, 1, $noreg, 64, $noreg :: (load (s8) from %ir.2)
    RET 0, $al

...
---
name:            ChainIterator2_setter_on_first
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$esi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $esi, $rdi
  
    renamable $esi = AND32ri killed renamable $esi, 1, implicit-def dead $eflags
    MOV8mr killed renamable $rdi, 1, $noreg, 64, $noreg, renamable $sil, implicit killed $esi :: (store (s8) into %ir.3)
    RET 0

...
---
name:            ChainIterator2_getter_second
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi, $rsi
  
    renamable $rax = COPY $rdi
    renamable $rcx = MOV64rm renamable $rsi, 1, $noreg, 32, $noreg :: (load (s64) from %ir.2)
    renamable $rdx = MOV64rm renamable $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.5)
    renamable $rdi = MOV64rm renamable $rsi, 1, $noreg, 48, $noreg :: (load (s64) from %ir.8)
    renamable $esi = MOV32rm killed renamable $rsi, 1, $noreg, 56, $noreg :: (load (s32) from %ir.11)
    MOV32mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $esi :: (store (s32), align 8)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rdi :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64))
    RET 0, $rax

...
---
name:            ChainIterator2_setter_second
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
  - { reg: '$rcx' }
  - { reg: '$r8d' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rcx, $rdi, $rdx, $rsi, $r8d
  
    MOV64mr renamable $rdi, 1, $noreg, 32, $noreg, killed renamable $rsi :: (store (s64) into %ir.3)
    MOV64mr renamable $rdi, 1, $noreg, 40, $noreg, killed renamable $rdx :: (store (s64) into %ir.4)
    MOV64mr renamable $rdi, 1, $noreg, 48, $noreg, killed renamable $rcx :: (store (s64) into %ir.5)
    MOV32mr killed renamable $rdi, 1, $noreg, 56, $noreg, killed renamable $r8d :: (store (s32) into %ir.6)
    RET 0

...
---
name:            ChainIterator2_getter_first
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi, $rsi
  
    renamable $rax = COPY $rdi
    renamable $rcx = MOV64rm renamable $rsi, 1, $noreg, 0, $noreg :: (load (s64) from %ir.0)
    renamable $rdx = MOV64rm renamable $rsi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.4)
    renamable $rdi = MOV64rm renamable $rsi, 1, $noreg, 16, $noreg :: (load (s64) from %ir.7)
    renamable $esi = MOV32rm killed renamable $rsi, 1, $noreg, 24, $noreg :: (load (s32) from %ir.10)
    MOV32mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $esi :: (store (s32), align 8)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rdi :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64))
    RET 0, $rax

...
---
name:            ChainIterator2_setter_first
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
  - { reg: '$rcx' }
  - { reg: '$r8d' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rcx, $rdi, $rdx, $rsi, $r8d
  
    MOV64mr renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $rsi :: (store (s64) into %ir.0)
    MOV64mr renamable $rdi, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64) into %ir.3)
    MOV64mr renamable $rdi, 1, $noreg, 16, $noreg, killed renamable $rcx :: (store (s64) into %ir.4)
    MOV32mr killed renamable $rdi, 1, $noreg, 24, $noreg, killed renamable $r8d :: (store (s32) into %ir.5)
    RET 0

...
---
name:            ChainIterable2_getter_second
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi, $rsi
  
    renamable $rax = COPY $rdi
    renamable $rcx = MOV64rm renamable $rsi, 1, $noreg, 32, $noreg :: (load (s64) from %ir.2)
    renamable $rdx = MOV64rm renamable $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.5)
    renamable $rdi = MOV64rm renamable $rsi, 1, $noreg, 48, $noreg :: (load (s64) from %ir.8)
    renamable $esi = MOV32rm killed renamable $rsi, 1, $noreg, 56, $noreg :: (load (s32) from %ir.11)
    MOV32mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $esi :: (store (s32), align 8)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rdi :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64))
    RET 0, $rax

...
---
name:            ChainIterable2_setter_second
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
  - { reg: '$rcx' }
  - { reg: '$r8d' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rcx, $rdi, $rdx, $rsi, $r8d
  
    MOV64mr renamable $rdi, 1, $noreg, 32, $noreg, killed renamable $rsi :: (store (s64) into %ir.3)
    MOV64mr renamable $rdi, 1, $noreg, 40, $noreg, killed renamable $rdx :: (store (s64) into %ir.4)
    MOV64mr renamable $rdi, 1, $noreg, 48, $noreg, killed renamable $rcx :: (store (s64) into %ir.5)
    MOV32mr killed renamable $rdi, 1, $noreg, 56, $noreg, killed renamable $r8d :: (store (s32) into %ir.6)
    RET 0

...
---
name:            ChainIterable2_getter_first
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi, $rsi
  
    renamable $rax = COPY $rdi
    renamable $rcx = MOV64rm renamable $rsi, 1, $noreg, 0, $noreg :: (load (s64) from %ir.0)
    renamable $rdx = MOV64rm renamable $rsi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.4)
    renamable $rdi = MOV64rm renamable $rsi, 1, $noreg, 16, $noreg :: (load (s64) from %ir.7)
    renamable $esi = MOV32rm killed renamable $rsi, 1, $noreg, 24, $noreg :: (load (s32) from %ir.10)
    MOV32mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $esi :: (store (s32), align 8)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rdi :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64))
    RET 0, $rax

...
---
name:            ChainIterable2_setter_first
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
  - { reg: '$rcx' }
  - { reg: '$r8d' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rcx, $rdi, $rdx, $rsi, $r8d
  
    MOV64mr renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $rsi :: (store (s64) into %ir.0)
    MOV64mr renamable $rdi, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64) into %ir.3)
    MOV64mr renamable $rdi, 1, $noreg, 16, $noreg, killed renamable $rcx :: (store (s64) into %ir.4)
    MOV32mr killed renamable $rdi, 1, $noreg, 24, $noreg, killed renamable $r8d :: (store (s32) into %ir.5)
    RET 0

...
---
name:            FilterIterable2_field_FilterIterable2_0
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg :: (load (s64) from %ir.2)
    RET 0, $rax

...
---
name:            FilterIterable2_B_init_iterableIterable2T_fFunctionT_to_Ptri1
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 176, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            FilterIterable2_B_iterator_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 184, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            FilterIterable2_B_each_fFunctionT_to_Nothing
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 192, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            FilterIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 200, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            FilterIterable2_B_all_fFunctionT_to_Ptri1
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 208, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            FilterIterable2_B_any_fFunctionT_to_Ptri1
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 216, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            FilterIterable2_B_map_fFunctionT_to_U
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 224, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            FilterIterable2_B_filter_fFunctionT_to_Ptri1
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 232, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            FilterIterable2_B_chain_otherIterable2T
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 240, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            FilterIterable2_B_interleave_otherIterable2T
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 248, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            FilterIterable2_B_zip_otherIterable2U
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 256, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            FilterIterable2_B_product_otherIterable2U
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 264, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            FilterIterable2_init_iterableIterable2T_fFunctionT_to_Ptri1
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
  hasTailCall:     true
fixedStack:
  - { id: 0, offset: 56, size: 8, alignment: 8 }
  - { id: 1, offset: 48, size: 4, alignment: 16 }
  - { id: 2, offset: 40, size: 8, alignment: 8 }
  - { id: 3, offset: 32, size: 8, alignment: 16 }
  - { id: 4, offset: 24, size: 8, alignment: 8 }
  - { id: 5, offset: 16, size: 8, alignment: 16 }
  - { id: 6, offset: 8, size: 4, alignment: 8 }
  - { id: 7, size: 8, alignment: 16 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.5):
    liveins: $rdi, $rsi
  
    renamable $rbx = COPY $rsi
    renamable $r15 = COPY $rdi
    renamable $r14 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.0)
    renamable $rdx = MOV64rm %fixed-stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.3, align 16)
    renamable $rcx = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.2)
    renamable $rsi = MOV64rm %fixed-stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.4)
    renamable $rax = MOV64rm $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rdi = MOV64ri 1178467452958968374
    renamable $rdi = IMUL64rm killed renamable $rdi, renamable $r15, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $r8 = COPY renamable $rdi
    renamable $r8 = SHR64ri killed renamable $r8, 32, implicit-def dead $eflags
    renamable $r8 = XOR64rr killed renamable $r8, killed renamable $rdi, implicit-def dead $eflags
    renamable $r8 = AND64rm killed renamable $r8, renamable $r15, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $r12 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $r8, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm renamable $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i13)
    renamable $rdi = MOV64ri 5693646204635713916
    renamable $rdi = IMUL64rm killed renamable $rdi, renamable $rsi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i11, align 4)
    renamable $r8 = COPY renamable $rdi
    renamable $r8 = SHR64ri killed renamable $r8, 32, implicit-def dead $eflags
    renamable $r8 = XOR64rr killed renamable $r8, killed renamable $rdi, implicit-def dead $eflags
    renamable $r8 = AND64rm killed renamable $r8, renamable $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i12, align 4)
    renamable $r8d = MOV32rm killed renamable $rax, 4, killed renamable $r8, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i21)
    renamable $rax = MOV64rm renamable $r15, 8, renamable $r12, 0, $noreg :: (load (s64) from %ir.8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    CALL64m killed renamable $rax, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.10)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm killed renamable $r15, 8, killed renamable $r12, 8, $noreg :: (load (s64) from %ir.17)
    renamable $rax = MOV64rm killed renamable $rax, 1, $noreg, 8, $noreg :: (load (s64) from %ir.19)
    $rdi = COPY killed renamable $rbx
    $rsi = COPY killed renamable $r14
    TCRETURNri64 killed renamable $rax, 0, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi

...
---
name:            FilterIterable2_iterator_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 24, size: 8, alignment: 8, isImmutable: true }
  - { id: 1, offset: 16, size: 4, alignment: 16, isImmutable: true }
  - { id: 2, offset: 8, size: 8, alignment: 8, isImmutable: true }
  - { id: 3, size: 8, alignment: 16, isImmutable: true }
stack:
  - { id: 0, size: 1, alignment: 8 }
  - { id: 1, size: 32, alignment: 8 }
  - { id: 2, size: 16, alignment: 8 }
  - { id: 3, size: 16, alignment: 8 }
  - { id: 4, size: 32, alignment: 8 }
  - { id: 5, size: 32, alignment: 8 }
  - { id: 6, size: 32, alignment: 8 }
  - { id: 7, size: 32, alignment: 8 }
  - { id: 8, type: spill-slot, size: 8, alignment: 8 }
  - { id: 9, type: spill-slot, size: 8, alignment: 8 }
  - { id: 10, type: spill-slot, size: 8, alignment: 8 }
  - { id: 11, type: spill-slot, size: 8, alignment: 8 }
  - { id: 12, type: spill-slot, size: 8, alignment: 8 }
  - { id: 13, type: spill-slot, size: 8, alignment: 8 }
  - { id: 14, type: spill-slot, size: 8, alignment: 8 }
  - { id: 15, type: spill-slot, size: 8, alignment: 8 }
  - { id: 16, type: spill-slot, size: 8, alignment: 8 }
  - { id: 17, type: spill-slot, size: 8, alignment: 8 }
  - { id: 18, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.3):
    liveins: $rdi, $rdx, $rsi
  
    renamable $r14 = COPY $rdx
    MOV64mr %stack.9, 1, $noreg, 0, $noreg, $rdi :: (store (s64) into %stack.9)
    renamable $rdi = COPY renamable $rsi
    MOV64mr %stack.18, 1, $noreg, 0, $noreg, $rsi :: (store (s64) into %stack.18)
    renamable $rax = MOV64rm $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri 1178467452958968374
    renamable $rcx = IMUL64rm killed renamable $rcx, $rsi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rsi = COPY renamable $rcx
    renamable $rsi = SHR64ri killed renamable $rsi, 32, implicit-def dead $eflags
    renamable $rsi = XOR64rr killed renamable $rsi, killed renamable $rcx, implicit-def dead $eflags
    renamable $rsi = AND64rm killed renamable $rsi, renamable $rdi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $r15 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rsi, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm killed renamable $rdi, 8, renamable $r15, 0, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.4, 1, $noreg, 0, $noreg
    $rsi = COPY $rdx
    MOV64mr %stack.8, 1, $noreg, 0, $noreg, $rdx :: (store (s64) into %stack.8)
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.8)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = MOVSX64rm32 %stack.4, 1, $noreg, 24, $noreg :: (load (s32) from %stack.4 + 24, align 8)
    renamable $r12 = MOV64rm %stack.4, 1, $noreg, 16, $noreg :: (load (s64) from %stack.4 + 16)
    renamable $rbp = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %stack.4)
    renamable $r13 = MOV64rm %stack.4, 1, $noreg, 8, $noreg :: (load (s64) from %stack.4 + 8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $r14
    renamable $r14 = MOV64rm %stack.18, 1, $noreg, 0, $noreg :: (load (s64) from %stack.18)
    CALL64m renamable $r14, 8, renamable $r15, 16, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.16)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r8 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $rbp
    $rsi = COPY renamable $r13
    $rdx = COPY renamable $r12
    $ecx = COPY renamable $ebx
    CALL64m renamable $rbp, 8, renamable $rbx, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.23)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.5, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $rbp
    $rdx = COPY renamable $r13
    $rcx = COPY renamable $r12
    $r8d = COPY renamable $ebx
    $r9 = COPY killed renamable $rbp
    renamable $r10 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    PUSH64r killed renamable $r10, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r12, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r13, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r15, 8, $noreg :: (load (s64) from %ir.28)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r12 = MOV64rm %stack.8, 1, $noreg, 0, $noreg :: (load (s64) from %stack.8)
    $rdi = COPY renamable $r12
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.29)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r12
    CALL64m renamable $r14, 8, renamable $r15, 16, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.16)
    MOV64mr %stack.17, 1, $noreg, 0, $noreg, renamable $r15 :: (store (s64) into %stack.17)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $rsi = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    MOV64mr %stack.10, 1, $noreg, 0, $noreg, renamable $rsi :: (store (s64) into %stack.10)
    $rdi = MOV32ri64 48
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @FilterIterator2, $noreg :: (load (s64) from got, align 16)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.35)
    MOV64mr %stack.1, 1, $noreg, 8, $noreg, renamable $rax :: (store (s64) into %ir.36)
    MOV32mi %stack.1, 1, $noreg, 24, $noreg, 7 :: (store (s32) into %ir.37, align 8)
    MOV64mr killed renamable $rax, 1, $noreg, 40, $noreg, killed renamable $rbx :: (store (s64) into %ir.39)
    renamable $rax = MOV64rm renamable $r14, 8, killed renamable $r15, 0, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.6, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r12
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.42)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = MOVSX64rm32 %stack.6, 1, $noreg, 24, $noreg :: (load (s32) from %stack.6 + 24, align 8)
    renamable $r15 = MOV64rm %stack.6, 1, $noreg, 16, $noreg :: (load (s64) from %stack.6 + 16)
    renamable $r13 = MOV64rm %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %stack.6)
    renamable $rbp = MOV64rm %stack.6, 1, $noreg, 8, $noreg :: (load (s64) from %stack.6 + 8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $r12
    renamable $r12 = MOV64rm %stack.17, 1, $noreg, 0, $noreg :: (load (s64) from %stack.17)
    CALL64m renamable $r14, 8, renamable $r12, 16, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.16)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r13
    $rsi = COPY renamable $rbp
    $rdx = COPY renamable $r15
    $ecx = COPY renamable $ebx
    renamable $r8 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    CALL64m renamable $r13, 8, renamable $rbx, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.56)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.7, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r13
    $rdx = COPY renamable $rbp
    $rcx = COPY renamable $r15
    $r8d = COPY renamable $ebx
    $r9 = COPY killed renamable $r13
    renamable $r10 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    PUSH64r killed renamable $r10, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r15, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm %stack.7, 1, $noreg, 16, $noreg :: (load (s64) from %stack.7 + 16)
    MOV64mr %stack.11, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.11)
    renamable $r13 = MOV64rm %stack.7, 1, $noreg, 0, $noreg :: (load (s64) from %stack.7)
    renamable $rax = MOV64rm %stack.7, 1, $noreg, 8, $noreg :: (load (s64) from %stack.7 + 8)
    MOV64mr %stack.12, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.12)
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r12, 8, $noreg :: (load (s64) from %ir.28)
    renamable $r15 = COPY killed renamable $r12
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r12 = MOV64rm %stack.8, 1, $noreg, 0, $noreg :: (load (s64) from %stack.8)
    $rdi = COPY renamable $r12
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.61)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    MOV64mr %stack.13, 1, $noreg, 0, $noreg, $rax :: (store (s64) into %stack.13)
    renamable $rax = MOV64rm renamable $r13, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i81)
    renamable $rdx = MOV64ri 4189192806087951739
    renamable $rcx = MOV64rm renamable $r13, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i79, align 4)
    renamable $rcx = IMUL64rr killed renamable $rcx, killed renamable $rdx, implicit-def dead $eflags
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, renamable $r13, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i80, align 4)
    renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rdx, 0, $noreg, implicit-def $rax :: (load (s32) from %ir.offset_ptr.i.i103)
    MOV64mr %stack.14, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.14)
    renamable $rbx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.35)
    renamable $rax = MOV64rm %stack.1, 1, $noreg, 8, $noreg :: (dereferenceable load (s64) from %ir.36)
    MOV64mr %stack.16, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.16)
    renamable $rax = MOV64rm %stack.1, 1, $noreg, 16, $noreg :: (dereferenceable load (s64) from %ir.72)
    MOV64mr %stack.15, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.15)
    renamable $rbp = MOVSX64rm32 %stack.1, 1, $noreg, 24, $noreg :: (dereferenceable load (s32) from %ir.37, align 8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $r12
    CALL64m killed renamable $r14, 8, killed renamable $r15, 16, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.16)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r14 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 16
    renamable $r12 = MOV64rm %stack.10, 1, $noreg, 0, $noreg :: (load (s64) from %stack.10)
    $rsi = COPY renamable $r12
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r15 = COPY $rax
    MOV64mr $rax, 1, $noreg, 8, $noreg, renamable $r14 :: (store (s64) into %ir.80)
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @Iterator2, $noreg :: (load (s64) from got, align 16)
    MOV64mr renamable $r15, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.result.i106)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 24
    $rsi = COPY killed renamable $r12
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $r14 :: (store (s64) into %ir.81)
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_parameterization_Ptri1, $noreg :: (load (s64) from got)
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $rcx :: (store (s64) into %ir.82)
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @function_typ, $noreg :: (load (s64) from got)
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, renamable $rcx :: (store (s64) into %ir.result.i107)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $r15 :: (store (s64) into %ir.83)
    MOV64mr %stack.2, 1, $noreg, 8, $noreg, killed renamable $rax :: (store (s64) into %ir.84)
    renamable $rax = MOV64rm renamable $rbx, 8, renamable $rbp, 24, $noreg :: (load (s64) from %ir.89)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, renamable $r13 :: (store (s64) into %ir.91)
    MOV64mr %stack.3, 1, $noreg, 8, $noreg, killed renamable $rcx :: (store (s64) into %ir.92)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r8 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $rbx
    renamable $r15 = MOV64rm %stack.16, 1, $noreg, 0, $noreg :: (load (s64) from %stack.16)
    $rsi = COPY renamable $r15
    renamable $r14 = MOV64rm %stack.15, 1, $noreg, 0, $noreg :: (load (s64) from %stack.15)
    $rdx = COPY renamable $r14
    $ecx = COPY renamable $ebp
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 64, 0, 64, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r10 = LEA64r %stack.2, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $rbx
    $rsi = COPY renamable $r15
    $rdx = COPY renamable $r14
    $ecx = COPY renamable $ebp
    $r8 = COPY killed renamable $rbx
    $r9 = COPY killed renamable $r15
    PUSH64rmm %stack.13, 1, $noreg, 0, $noreg, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 56), (load (s64) from %stack.13)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64rmm %stack.14, 1, $noreg, 0, $noreg, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 48), (load (s64) from %stack.14)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64rmm %stack.11, 1, $noreg, 0, $noreg, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 40), (load (s64) from %stack.11)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64rmm %stack.12, 1, $noreg, 0, $noreg, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 32), (load (s64) from %stack.12)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r13, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r10, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r14, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 64, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r8 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.35)
    renamable $rcx = MOV64rm %stack.1, 1, $noreg, 8, $noreg :: (dereferenceable load (s64) from %ir.36)
    renamable $rdx = MOV64rm %stack.1, 1, $noreg, 16, $noreg :: (dereferenceable load (s64) from %ir.72)
    renamable $rsi = MOV64rm renamable $r8, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i111)
    renamable $rax = MOV64ri 4189192806087951739
    renamable $rax = IMUL64rm killed renamable $rax, renamable $r8, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i109, align 4)
    renamable $rdi = COPY renamable $rax
    renamable $rdi = SHR64ri killed renamable $rdi, 32, implicit-def dead $eflags
    renamable $rdi = XOR64rr killed renamable $rdi, killed renamable $rax, implicit-def dead $eflags
    renamable $rdi = AND64rm killed renamable $rdi, renamable $r8, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i110, align 4)
    renamable $esi = MOV32rm killed renamable $rsi, 4, killed renamable $rdi, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i119)
    renamable $rax = MOV64rm %stack.9, 1, $noreg, 0, $noreg :: (load (s64) from %stack.9)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rdx :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $rcx :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $r8 :: (store (s64))
    MOV32mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $esi :: (store (s32), align 8)
    RET 0, $rax

...
---
name:            FilterIterator2_field_FilterIterator2_0
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg :: (load (s64) from %ir.2)
    RET 0, $rax

...
---
name:            FilterIterator2_B_init_iteratorIterator2T_fFunctionT_to_Ptri1
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 96, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            FilterIterator2_B_next_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 104, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            FilterIterator2_init_iteratorIterator2T_fFunctionT_to_Ptri1
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
  hasTailCall:     true
fixedStack:
  - { id: 0, offset: 56, size: 8, alignment: 8 }
  - { id: 1, offset: 48, size: 4, alignment: 16 }
  - { id: 2, offset: 40, size: 8, alignment: 8 }
  - { id: 3, offset: 32, size: 8, alignment: 16 }
  - { id: 4, offset: 24, size: 8, alignment: 8 }
  - { id: 5, offset: 16, size: 8, alignment: 16 }
  - { id: 6, offset: 8, size: 4, alignment: 8 }
  - { id: 7, size: 8, alignment: 16 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.5):
    liveins: $rdi, $rsi
  
    renamable $rbx = COPY $rsi
    renamable $r15 = COPY $rdi
    renamable $r14 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.0)
    renamable $rdx = MOV64rm %fixed-stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.3, align 16)
    renamable $rcx = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.2)
    renamable $rsi = MOV64rm %fixed-stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.4)
    renamable $rax = MOV64rm $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rdi = MOV64ri 8213847504843366470
    renamable $rdi = IMUL64rm killed renamable $rdi, renamable $r15, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $r8 = COPY renamable $rdi
    renamable $r8 = SHR64ri killed renamable $r8, 32, implicit-def dead $eflags
    renamable $r8 = XOR64rr killed renamable $r8, killed renamable $rdi, implicit-def dead $eflags
    renamable $r8 = AND64rm killed renamable $r8, renamable $r15, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $r12 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $r8, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm renamable $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i13)
    renamable $rdi = MOV64ri 4189192806087951739
    renamable $rdi = IMUL64rm killed renamable $rdi, renamable $rsi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i11, align 4)
    renamable $r8 = COPY renamable $rdi
    renamable $r8 = SHR64ri killed renamable $r8, 32, implicit-def dead $eflags
    renamable $r8 = XOR64rr killed renamable $r8, killed renamable $rdi, implicit-def dead $eflags
    renamable $r8 = AND64rm killed renamable $r8, renamable $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i12, align 4)
    renamable $r8d = MOV32rm killed renamable $rax, 4, killed renamable $r8, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i21)
    renamable $rax = MOV64rm renamable $r15, 8, renamable $r12, 0, $noreg :: (load (s64) from %ir.8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    CALL64m killed renamable $rax, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.10)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm killed renamable $r15, 8, killed renamable $r12, 8, $noreg :: (load (s64) from %ir.17)
    renamable $rax = MOV64rm killed renamable $rax, 1, $noreg, 8, $noreg :: (load (s64) from %ir.19)
    $rdi = COPY killed renamable $rbx
    $rsi = COPY killed renamable $r14
    TCRETURNri64 killed renamable $rax, 0, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi

...
---
name:            FilterIterator2_next_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
frameInfo:
  maxAlignment:    16
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 24, size: 8, alignment: 8, isImmutable: true }
  - { id: 1, offset: 16, size: 4, alignment: 16, isImmutable: true }
  - { id: 2, offset: 8, size: 8, alignment: 8, isImmutable: true }
  - { id: 3, size: 8, alignment: 16, isImmutable: true }
stack:
  - { id: 0, size: 1, alignment: 8 }
  - { id: 1, size: 32, alignment: 8 }
  - { id: 2, size: 48, alignment: 16 }
  - { id: 3, size: 32, alignment: 8 }
  - { id: 4, size: 48, alignment: 16 }
  - { id: 5, type: spill-slot, size: 8, alignment: 8 }
  - { id: 6, type: spill-slot, size: 8, alignment: 8 }
  - { id: 7, type: spill-slot, size: 8, alignment: 8 }
  - { id: 8, type: spill-slot, size: 8, alignment: 8 }
  - { id: 9, type: spill-slot, size: 8, alignment: 8 }
  - { id: 10, type: spill-slot, size: 8, alignment: 8 }
  - { id: 11, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.3):
    liveins: $rdi, $rdx, $rsi
  
    renamable $r14 = COPY $rdx
    renamable $r15 = COPY $rsi
    MOV64mr %stack.11, 1, $noreg, 0, $noreg, $rdi :: (store (s64) into %stack.11)
    renamable $rax = MOV64rm $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri 8213847504843366470
    renamable $rcx = IMUL64rm killed renamable $rcx, $rsi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $r12 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm $rsi, 8, renamable $r12, 0, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.1, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r14
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.8)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = MOVSX64rm32 %stack.1, 1, $noreg, 24, $noreg :: (load (s32) from %stack.1 + 24, align 8)
    renamable $rax = MOV64rm %stack.1, 1, $noreg, 16, $noreg :: (load (s64) from %stack.1 + 16)
    MOV64mr %stack.7, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.7)
    renamable $r13 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %stack.1)
    renamable $rbp = MOV64rm %stack.1, 1, $noreg, 8, $noreg :: (load (s64) from %stack.1 + 8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    MOV64mr %stack.5, 1, $noreg, 0, $noreg, renamable $r14 :: (store (s64) into %stack.5)
    $rdi = COPY killed renamable $r14
    MOV64mr %stack.6, 1, $noreg, 0, $noreg, renamable $r12 :: (store (s64) into %stack.6)
    CALL64m renamable $r15, 8, killed renamable $r12, 16, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.16)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r12 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $r13
    $rsi = COPY renamable $rbp
    renamable $r14 = MOV64rm %stack.7, 1, $noreg, 0, $noreg :: (load (s64) from %stack.7)
    $rdx = COPY renamable $r14
    $ecx = COPY renamable $ebx
    $r8 = COPY renamable $r12
    CALL64m renamable $r13, 8, renamable $rbx, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.23)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.2, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r13
    $rdx = COPY renamable $rbp
    $rcx = COPY renamable $r14
    $r8d = COPY renamable $ebx
    $r9 = COPY killed renamable $r13
    PUSH64r killed renamable $r12, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r14, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbp = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %stack.2, align 16)
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @nil_typ, $noreg :: (load (s64) from got)
    MOV64mr %stack.10, 1, $noreg, 0, $noreg, renamable $rax :: (store (s64) into %stack.10)
    CMP64rr renamable $rbp, killed renamable $rax, implicit-def $eflags
    renamable $al = SETCCr 4, implicit killed $eflags
    TEST64rr renamable $rbp, renamable $rbp, implicit-def $eflags
    renamable $cl = SETCCr 4, implicit killed $eflags
    dead renamable $cl = OR8rr killed renamable $cl, killed renamable $al, implicit-def $eflags
    JCC_1 %bb.2, 4, implicit killed $eflags
  
  bb.1:
    renamable $edx = MOV32r0 implicit-def dead $eflags, implicit-def $rdx
    renamable $rcx = IMPLICIT_DEF
    renamable $rsi = IMPLICIT_DEF
    JMP_1 %bb.6
  
  bb.2..lr.ph:
    liveins: $rbp, $r15
  
    renamable $rbx = MOV64rm %stack.2, 1, $noreg, 24, $noreg :: (load (s64) from %stack.2 + 24, basealign 16)
    renamable $r12 = MOV64rm %stack.2, 1, $noreg, 16, $noreg :: (load (s64) from %stack.2 + 16, align 16)
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @nil_typ, $noreg :: (load (s64) from got)
    MOV64mr %stack.10, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.10)
  
  bb.3 (%ir-block.30):
    successors: %bb.9(0x04000000), %bb.4(0x7c000000)
    liveins: $rbp, $rbx, $r12, $r15
  
    renamable $rax = MOV64rm renamable $rbp, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i58)
    renamable $rcx = MOV64rm renamable $rbp, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i56, align 4)
    renamable $rdx = MOV64ri 3084208142191802847
    renamable $rcx = IMUL64rr killed renamable $rcx, killed renamable $rdx, implicit-def dead $eflags
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, renamable $rbp, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i57, align 4)
    renamable $r14d = MOV32rm killed renamable $rax, 4, killed renamable $rdx, 0, $noreg, implicit-def $r14 :: (load (s32) from %ir.offset_ptr.i.i66)
    MOV64mr %stack.8, 1, $noreg, 0, $noreg, renamable $r12 :: (store (s64) into %stack.8)
    MOV64mr %stack.9, 1, $noreg, 0, $noreg, renamable $rbx :: (store (s64) into %stack.9)
    renamable $r13 = MOV64rm %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %stack.6)
    renamable $rax = MOV64rm renamable $r15, 8, renamable $r13, 8, $noreg :: (load (s64) from %ir.sunkaddr2)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV64rm %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %stack.5)
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.33)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbp
    $rsi = COPY killed renamable $r12
    $rdx = COPY killed renamable $rbx
    MOV64mr %stack.7, 1, $noreg, 0, $noreg, renamable $r14 :: (store (s64) into %stack.7)
    $rcx = COPY killed renamable $r14
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit-def $rsp, implicit-def $ssp, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    TEST8ri killed renamable $al, 1, implicit-def $eflags
    JCC_1 %bb.4, 4, implicit killed $eflags
  
  bb.9:
    liveins: $rbp
  
    MOV64mr %stack.10, 1, $noreg, 0, $noreg, killed renamable $rbp :: (store (s64) into %stack.10)
    renamable $rdx = MOV64rm %stack.7, 1, $noreg, 0, $noreg :: (load (s64) from %stack.7)
    renamable $rcx = MOV64rm %stack.8, 1, $noreg, 0, $noreg :: (load (s64) from %stack.8)
    renamable $rsi = MOV64rm %stack.9, 1, $noreg, 0, $noreg :: (load (s64) from %stack.9)
    JMP_1 %bb.6
  
  bb.4 (%ir-block.37):
    successors: %bb.5(0x7e000000), %bb.7(0x02000000)
    liveins: $r13, $r15
  
    renamable $rax = MOV64rm renamable $r15, 8, renamable $r13, 0, $noreg :: (load (s64) from %ir.sunkaddr4)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.3, 1, $noreg, 0, $noreg
    renamable $r14 = MOV64rm %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %stack.5)
    $rsi = COPY renamable $r14
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.39)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = MOVSX64rm32 %stack.3, 1, $noreg, 24, $noreg :: (load (s32) from %stack.3 + 24, align 8)
    renamable $r12 = MOV64rm %stack.3, 1, $noreg, 16, $noreg :: (load (s64) from %stack.3 + 16)
    renamable $rbp = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %stack.3)
    renamable $rdi = COPY killed renamable $r14
    renamable $r14 = MOV64rm %stack.3, 1, $noreg, 8, $noreg :: (load (s64) from %stack.3 + 8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    CALL64m $r15, 8, $r13, 16, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.sunkaddr7)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbp
    $rsi = COPY renamable $r14
    $rdx = COPY renamable $r12
    $ecx = COPY renamable $ebx
    renamable $r13 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $r8 = COPY renamable $r13
    CALL64m renamable $rbp, 8, renamable $rbx, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.53)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.4, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $rbp
    $rdx = COPY renamable $r14
    $rcx = COPY renamable $r12
    $r8d = COPY renamable $ebx
    $r9 = COPY killed renamable $rbp
    PUSH64r killed renamable $r13, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r12, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r14, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbp = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %stack.4, align 16)
    CMP64rm renamable $rbp, $rip, 1, $noreg, target-flags(x86-gotpcrel) @nil_typ, $noreg, implicit-def $eflags :: (load (s64) from got)
    JCC_1 %bb.5, 5, implicit killed $eflags
  
  bb.7:
    renamable $rdx = MOV64rm %stack.7, 1, $noreg, 0, $noreg :: (load (s64) from %stack.7)
    renamable $rcx = MOV64rm %stack.8, 1, $noreg, 0, $noreg :: (load (s64) from %stack.8)
    renamable $rsi = MOV64rm %stack.9, 1, $noreg, 0, $noreg :: (load (s64) from %stack.9)
    JMP_1 %bb.6
  
  bb.5 (%ir-block.37):
    successors: %bb.3(0x7df7df7e), %bb.8(0x02082082)
    liveins: $rbp, $r15
  
    renamable $rbx = MOV64rm %stack.4, 1, $noreg, 24, $noreg :: (load (s64) from %stack.4 + 24, basealign 16)
    renamable $r12 = MOV64rm %stack.4, 1, $noreg, 16, $noreg :: (load (s64) from %stack.4 + 16, align 16)
    TEST64rr renamable $rbp, renamable $rbp, implicit-def $eflags
    JCC_1 %bb.3, 5, implicit killed $eflags
  
  bb.8:
    renamable $rdx = MOV64rm %stack.7, 1, $noreg, 0, $noreg :: (load (s64) from %stack.7)
    renamable $rcx = MOV64rm %stack.8, 1, $noreg, 0, $noreg :: (load (s64) from %stack.8)
    renamable $rsi = MOV64rm %stack.9, 1, $noreg, 0, $noreg :: (load (s64) from %stack.9)
  
  bb.6..loopexit:
    liveins: $rcx, $rdx, $rsi
  
    renamable $rax = MOV64rm %stack.11, 1, $noreg, 0, $noreg :: (load (s64) from %stack.11)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rcx :: (store (s64), align 16)
    renamable $rcx = MOV64rm %stack.10, 1, $noreg, 0, $noreg :: (load (s64) from %stack.10)
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64), align 16)
    MOV64mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $rsi :: (store (s64) into unknown-address + 8, basealign 16)
    MOV32mr renamable $rax, 1, $noreg, 32, $noreg, renamable $edx, implicit killed $rdx :: (store (s32) into unknown-address + 16, align 16)
    RET 0, $rax

...
---
name:            FilterIterator2_getter_f
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 32, $noreg :: (load (s64) from %ir.2)
    RET 0, $rax

...
---
name:            FilterIterator2_setter_f
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi, $rsi
  
    MOV64mr killed renamable $rdi, 1, $noreg, 32, $noreg, killed renamable $rsi :: (store (s64) into %ir.3)
    RET 0

...
---
name:            FilterIterator2_getter_iterator
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi, $rsi
  
    renamable $rax = COPY $rdi
    renamable $rcx = MOV64rm renamable $rsi, 1, $noreg, 0, $noreg :: (load (s64) from %ir.0)
    renamable $rdx = MOV64rm renamable $rsi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.4)
    renamable $rdi = MOV64rm renamable $rsi, 1, $noreg, 16, $noreg :: (load (s64) from %ir.7)
    renamable $esi = MOV32rm killed renamable $rsi, 1, $noreg, 24, $noreg :: (load (s32) from %ir.10)
    MOV32mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $esi :: (store (s32), align 8)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rdi :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64))
    RET 0, $rax

...
---
name:            FilterIterator2_setter_iterator
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
  - { reg: '$rcx' }
  - { reg: '$r8d' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rcx, $rdi, $rdx, $rsi, $r8d
  
    MOV64mr renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $rsi :: (store (s64) into %ir.0)
    MOV64mr renamable $rdi, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64) into %ir.3)
    MOV64mr renamable $rdi, 1, $noreg, 16, $noreg, killed renamable $rcx :: (store (s64) into %ir.4)
    MOV32mr killed renamable $rdi, 1, $noreg, 24, $noreg, killed renamable $r8d :: (store (s32) into %ir.5)
    RET 0

...
---
name:            FilterIterable2_getter_f
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 32, $noreg :: (load (s64) from %ir.2)
    RET 0, $rax

...
---
name:            FilterIterable2_setter_f
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi, $rsi
  
    MOV64mr killed renamable $rdi, 1, $noreg, 32, $noreg, killed renamable $rsi :: (store (s64) into %ir.3)
    RET 0

...
---
name:            FilterIterable2_getter_iterable
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi, $rsi
  
    renamable $rax = COPY $rdi
    renamable $rcx = MOV64rm renamable $rsi, 1, $noreg, 0, $noreg :: (load (s64) from %ir.0)
    renamable $rdx = MOV64rm renamable $rsi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.4)
    renamable $rdi = MOV64rm renamable $rsi, 1, $noreg, 16, $noreg :: (load (s64) from %ir.7)
    renamable $esi = MOV32rm killed renamable $rsi, 1, $noreg, 24, $noreg :: (load (s32) from %ir.10)
    MOV32mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $esi :: (store (s32), align 8)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rdi :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64))
    RET 0, $rax

...
---
name:            FilterIterable2_setter_iterable
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
  - { reg: '$rcx' }
  - { reg: '$r8d' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rcx, $rdi, $rdx, $rsi, $r8d
  
    MOV64mr renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $rsi :: (store (s64) into %ir.0)
    MOV64mr renamable $rdi, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64) into %ir.3)
    MOV64mr renamable $rdi, 1, $noreg, 16, $noreg, killed renamable $rcx :: (store (s64) into %ir.4)
    MOV32mr killed renamable $rdi, 1, $noreg, 24, $noreg, killed renamable $r8d :: (store (s32) into %ir.5)
    RET 0

...
---
name:            MapIterable2_field_MapIterable2_0
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg :: (load (s64) from %ir.2)
    RET 0, $rax

...
---
name:            MapIterable2_field_MapIterable2_1
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 24, $noreg :: (load (s64) from %ir.2)
    RET 0, $rax

...
---
name:            MapIterable2_B_init_iterableIterable2T_fFunctionT_to_U
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 184, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            MapIterable2_B_iterator_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 192, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            MapIterable2_B_each_fFunctionT_to_Nothing
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 200, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            MapIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 208, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            MapIterable2_B_all_fFunctionT_to_Ptri1
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 216, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            MapIterable2_B_any_fFunctionT_to_Ptri1
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 224, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            MapIterable2_B_map_fFunctionT_to_U
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 232, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            MapIterable2_B_filter_fFunctionT_to_Ptri1
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 240, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            MapIterable2_B_chain_otherIterable2T
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 248, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            MapIterable2_B_interleave_otherIterable2T
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 256, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            MapIterable2_B_zip_otherIterable2U
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 264, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            MapIterable2_B_product_otherIterable2U
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 272, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            MapIterable2_init_iterableIterable2T_fFunctionT_to_U
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
  hasTailCall:     true
fixedStack:
  - { id: 0, offset: 56, size: 8, alignment: 8 }
  - { id: 1, offset: 48, size: 4, alignment: 16 }
  - { id: 2, offset: 40, size: 8, alignment: 8 }
  - { id: 3, offset: 32, size: 8, alignment: 16 }
  - { id: 4, offset: 24, size: 8, alignment: 8 }
  - { id: 5, offset: 16, size: 8, alignment: 16 }
  - { id: 6, offset: 8, size: 4, alignment: 8 }
  - { id: 7, size: 8, alignment: 16 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.5):
    liveins: $rdi, $rsi
  
    renamable $rbx = COPY $rsi
    renamable $r15 = COPY $rdi
    renamable $r14 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.0)
    renamable $rdx = MOV64rm %fixed-stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.3, align 16)
    renamable $rcx = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.2)
    renamable $rsi = MOV64rm %fixed-stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.4)
    renamable $rax = MOV64rm $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rdi = MOV64ri -1724859134596891929
    renamable $rdi = IMUL64rm killed renamable $rdi, renamable $r15, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $r8 = COPY renamable $rdi
    renamable $r8 = SHR64ri killed renamable $r8, 32, implicit-def dead $eflags
    renamable $r8 = XOR64rr killed renamable $r8, killed renamable $rdi, implicit-def dead $eflags
    renamable $r8 = AND64rm killed renamable $r8, renamable $r15, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $r12 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $r8, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm renamable $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i13)
    renamable $rdi = MOV64ri 5693646204635713916
    renamable $rdi = IMUL64rm killed renamable $rdi, renamable $rsi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i11, align 4)
    renamable $r8 = COPY renamable $rdi
    renamable $r8 = SHR64ri killed renamable $r8, 32, implicit-def dead $eflags
    renamable $r8 = XOR64rr killed renamable $r8, killed renamable $rdi, implicit-def dead $eflags
    renamable $r8 = AND64rm killed renamable $r8, renamable $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i12, align 4)
    renamable $r8d = MOV32rm killed renamable $rax, 4, killed renamable $r8, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i21)
    renamable $rax = MOV64rm renamable $r15, 8, renamable $r12, 0, $noreg :: (load (s64) from %ir.8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    CALL64m killed renamable $rax, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.10)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm killed renamable $r15, 8, killed renamable $r12, 8, $noreg :: (load (s64) from %ir.17)
    renamable $rax = MOV64rm killed renamable $rax, 1, $noreg, 8, $noreg :: (load (s64) from %ir.19)
    $rdi = COPY killed renamable $rbx
    $rsi = COPY killed renamable $r14
    TCRETURNri64 killed renamable $rax, 0, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi

...
---
name:            MapIterable2_iterator_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 24, size: 8, alignment: 8, isImmutable: true }
  - { id: 1, offset: 16, size: 4, alignment: 16, isImmutable: true }
  - { id: 2, offset: 8, size: 8, alignment: 8, isImmutable: true }
  - { id: 3, size: 8, alignment: 16, isImmutable: true }
stack:
  - { id: 0, size: 1, alignment: 8 }
  - { id: 1, size: 32, alignment: 8 }
  - { id: 2, size: 16, alignment: 8 }
  - { id: 3, size: 16, alignment: 8 }
  - { id: 4, size: 32, alignment: 8 }
  - { id: 5, size: 32, alignment: 8 }
  - { id: 6, size: 32, alignment: 8 }
  - { id: 7, size: 32, alignment: 8 }
  - { id: 8, type: spill-slot, size: 8, alignment: 8 }
  - { id: 9, type: spill-slot, size: 8, alignment: 8 }
  - { id: 10, type: spill-slot, size: 8, alignment: 8 }
  - { id: 11, type: spill-slot, size: 8, alignment: 8 }
  - { id: 12, type: spill-slot, size: 8, alignment: 8 }
  - { id: 13, type: spill-slot, size: 8, alignment: 8 }
  - { id: 14, type: spill-slot, size: 8, alignment: 8 }
  - { id: 15, type: spill-slot, size: 8, alignment: 8 }
  - { id: 16, type: spill-slot, size: 8, alignment: 8 }
  - { id: 17, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.3):
    liveins: $rdi, $rdx, $rsi
  
    renamable $rbx = COPY $rdx
    renamable $r14 = COPY $rsi
    MOV64mr %stack.9, 1, $noreg, 0, $noreg, $rdi :: (store (s64) into %stack.9)
    renamable $rax = MOV64rm $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri -1724859134596891929
    renamable $rcx = IMUL64rm killed renamable $rcx, $rsi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rsi = COPY renamable $rcx
    renamable $rsi = SHR64ri killed renamable $rsi, 32, implicit-def dead $eflags
    renamable $rsi = XOR64rr killed renamable $rsi, killed renamable $rcx, implicit-def dead $eflags
    renamable $rsi = AND64rm killed renamable $rsi, renamable $r14, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $r15 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rsi, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r15, 0, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.4, 1, $noreg, 0, $noreg
    $rsi = COPY $rdx
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.8)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbp = MOVSX64rm32 %stack.4, 1, $noreg, 24, $noreg :: (load (s32) from %stack.4 + 24, align 8)
    renamable $rax = MOV64rm %stack.4, 1, $noreg, 16, $noreg :: (load (s64) from %stack.4 + 16)
    MOV64mr %stack.10, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.10)
    renamable $r13 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %stack.4)
    renamable $r12 = MOV64rm %stack.4, 1, $noreg, 8, $noreg :: (load (s64) from %stack.4 + 8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    MOV64mr %stack.8, 1, $noreg, 0, $noreg, renamable $rbx :: (store (s64) into %stack.8)
    $rdi = COPY renamable $rbx
    CALL64m renamable $r14, 8, renamable $r15, 16, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.16)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $rbx
    CALL64m renamable $r14, 8, renamable $r15, 24, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.20)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r8 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $r13
    $rsi = COPY renamable $r12
    renamable $rbx = MOV64rm %stack.10, 1, $noreg, 0, $noreg :: (load (s64) from %stack.10)
    $rdx = COPY renamable $rbx
    $ecx = COPY renamable $ebp
    CALL64m renamable $r13, 8, renamable $rbp, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.27)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.5, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r13
    $rdx = COPY renamable $r12
    $rcx = COPY renamable $rbx
    $r8d = COPY renamable $ebp
    $r9 = COPY killed renamable $r13
    renamable $r10 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    PUSH64r killed renamable $r10, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r12, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r15, 8, $noreg :: (load (s64) from %ir.32)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r13 = MOV64rm %stack.8, 1, $noreg, 0, $noreg :: (load (s64) from %stack.8)
    $rdi = COPY renamable $r13
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.33)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r13
    CALL64m renamable $r14, 8, renamable $r15, 16, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.16)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r13
    CALL64m renamable $r14, 8, renamable $r15, 24, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.20)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r12 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $rsi = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    MOV64mr %stack.10, 1, $noreg, 0, $noreg, renamable $rsi :: (store (s64) into %stack.10)
    $rdi = MOV32ri64 56
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @MapIterator2, $noreg :: (load (s64) from got, align 16)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.42)
    MOV64mr %stack.1, 1, $noreg, 8, $noreg, renamable $rax :: (store (s64) into %ir.43)
    MOV32mi %stack.1, 1, $noreg, 24, $noreg, 7 :: (store (s32) into %ir.44, align 8)
    MOV64mr renamable $rax, 1, $noreg, 40, $noreg, killed renamable $rbx :: (store (s64) into %ir.46)
    MOV64mr killed renamable $rax, 1, $noreg, 48, $noreg, killed renamable $r12 :: (store (s64) into %ir.47)
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r15, 0, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.6, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r13
    renamable $rbx = COPY killed renamable $r13
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.50)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbp = MOVSX64rm32 %stack.6, 1, $noreg, 24, $noreg :: (load (s32) from %stack.6 + 24, align 8)
    renamable $rax = MOV64rm %stack.6, 1, $noreg, 16, $noreg :: (load (s64) from %stack.6 + 16)
    MOV64mr %stack.11, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.11)
    renamable $r13 = MOV64rm %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %stack.6)
    renamable $r12 = MOV64rm %stack.6, 1, $noreg, 8, $noreg :: (load (s64) from %stack.6 + 8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    CALL64m renamable $r14, 8, renamable $r15, 16, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.16)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $rbx
    CALL64m renamable $r14, 8, renamable $r15, 24, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.20)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r13
    $rsi = COPY renamable $r12
    renamable $rbx = MOV64rm %stack.11, 1, $noreg, 0, $noreg :: (load (s64) from %stack.11)
    $rdx = COPY renamable $rbx
    $ecx = COPY renamable $ebp
    renamable $r8 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    CALL64m renamable $r13, 8, renamable $rbp, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.67)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.7, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r13
    $rdx = COPY renamable $r12
    $rcx = COPY renamable $rbx
    $r8d = COPY renamable $ebp
    $r9 = COPY killed renamable $r13
    renamable $r10 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    PUSH64r killed renamable $r10, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r12, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm %stack.7, 1, $noreg, 16, $noreg :: (load (s64) from %stack.7 + 16)
    MOV64mr %stack.11, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.11)
    renamable $rbx = MOV64rm %stack.7, 1, $noreg, 0, $noreg :: (load (s64) from %stack.7)
    renamable $rax = MOV64rm %stack.7, 1, $noreg, 8, $noreg :: (load (s64) from %stack.7 + 8)
    MOV64mr %stack.12, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.12)
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r15, 8, $noreg :: (load (s64) from %ir.32)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r13 = MOV64rm %stack.8, 1, $noreg, 0, $noreg :: (load (s64) from %stack.8)
    $rdi = COPY renamable $r13
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.72)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    MOV64mr %stack.13, 1, $noreg, 0, $noreg, $rax :: (store (s64) into %stack.13)
    renamable $rax = MOV64rm renamable $rbx, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i81)
    renamable $rdx = MOV64ri 4189192806087951739
    renamable $rcx = MOV64rm renamable $rbx, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i79, align 4)
    MOV64mr %stack.17, 1, $noreg, 0, $noreg, renamable $rbx :: (store (s64) into %stack.17)
    renamable $rcx = IMUL64rr killed renamable $rcx, killed renamable $rdx, implicit-def dead $eflags
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, killed renamable $rbx, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i80, align 4)
    renamable $eax = MOV32rm killed renamable $rax, 4, killed renamable $rdx, 0, $noreg, implicit-def $rax :: (load (s32) from %ir.offset_ptr.i.i103)
    MOV64mr %stack.14, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.14)
    renamable $rbx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.42)
    renamable $rax = MOV64rm %stack.1, 1, $noreg, 8, $noreg :: (dereferenceable load (s64) from %ir.43)
    MOV64mr %stack.16, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.16)
    renamable $rax = MOV64rm %stack.1, 1, $noreg, 16, $noreg :: (dereferenceable load (s64) from %ir.83)
    MOV64mr %stack.15, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.15)
    renamable $rbp = MOVSX64rm32 %stack.1, 1, $noreg, 24, $noreg :: (dereferenceable load (s32) from %ir.44, align 8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r13
    CALL64m renamable $r14, 8, renamable $r15, 16, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.16)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r12 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $r13
    CALL64m killed renamable $r14, 8, killed renamable $r15, 24, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.20)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r13 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 16
    renamable $r14 = MOV64rm %stack.10, 1, $noreg, 0, $noreg :: (load (s64) from %stack.10)
    $rsi = COPY renamable $r14
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r15 = COPY $rax
    MOV64mr $rax, 1, $noreg, 8, $noreg, renamable $r12 :: (store (s64) into %ir.94)
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @Iterator2, $noreg :: (load (s64) from got, align 16)
    MOV64mr renamable $r15, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.result.i106)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 24
    $rsi = COPY killed renamable $r14
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $r12 :: (store (s64) into %ir.95)
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $r13 :: (store (s64) into %ir.96)
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @function_typ, $noreg :: (load (s64) from got)
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, renamable $rcx :: (store (s64) into %ir.result.i107)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $r15 :: (store (s64) into %ir.97)
    MOV64mr %stack.2, 1, $noreg, 8, $noreg, killed renamable $rax :: (store (s64) into %ir.98)
    renamable $rax = MOV64rm renamable $rbx, 8, renamable $rbp, 32, $noreg :: (load (s64) from %ir.103)
    renamable $r15 = MOV64rm %stack.17, 1, $noreg, 0, $noreg :: (load (s64) from %stack.17)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, renamable $r15 :: (store (s64) into %ir.105)
    MOV64mr %stack.3, 1, $noreg, 8, $noreg, killed renamable $rcx :: (store (s64) into %ir.106)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r8 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $rbx
    renamable $r12 = MOV64rm %stack.16, 1, $noreg, 0, $noreg :: (load (s64) from %stack.16)
    $rsi = COPY renamable $r12
    renamable $r14 = MOV64rm %stack.15, 1, $noreg, 0, $noreg :: (load (s64) from %stack.15)
    $rdx = COPY renamable $r14
    $ecx = COPY renamable $ebp
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 64, 0, 64, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r10 = LEA64r %stack.2, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $rbx
    $rsi = COPY renamable $r12
    $rdx = COPY renamable $r14
    $ecx = COPY renamable $ebp
    $r8 = COPY killed renamable $rbx
    $r9 = COPY killed renamable $r12
    PUSH64rmm %stack.13, 1, $noreg, 0, $noreg, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 56), (load (s64) from %stack.13)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64rmm %stack.14, 1, $noreg, 0, $noreg, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 48), (load (s64) from %stack.14)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64rmm %stack.11, 1, $noreg, 0, $noreg, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 40), (load (s64) from %stack.11)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64rmm %stack.12, 1, $noreg, 0, $noreg, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 32), (load (s64) from %stack.12)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r15, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r10, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r14, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 64, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r8 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.42)
    renamable $rcx = MOV64rm %stack.1, 1, $noreg, 8, $noreg :: (dereferenceable load (s64) from %ir.43)
    renamable $rdx = MOV64rm %stack.1, 1, $noreg, 16, $noreg :: (dereferenceable load (s64) from %ir.83)
    renamable $rsi = MOV64rm renamable $r8, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i111)
    renamable $rax = MOV64ri 4189192806087951739
    renamable $rax = IMUL64rm killed renamable $rax, renamable $r8, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i109, align 4)
    renamable $rdi = COPY renamable $rax
    renamable $rdi = SHR64ri killed renamable $rdi, 32, implicit-def dead $eflags
    renamable $rdi = XOR64rr killed renamable $rdi, killed renamable $rax, implicit-def dead $eflags
    renamable $rdi = AND64rm killed renamable $rdi, renamable $r8, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i110, align 4)
    renamable $esi = MOV32rm killed renamable $rsi, 4, killed renamable $rdi, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i119)
    renamable $rax = MOV64rm %stack.9, 1, $noreg, 0, $noreg :: (load (s64) from %stack.9)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rdx :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $rcx :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $r8 :: (store (s64))
    MOV32mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $esi :: (store (s32), align 8)
    RET 0, $rax

...
---
name:            MapIterator2_field_MapIterator2_0
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg :: (load (s64) from %ir.2)
    RET 0, $rax

...
---
name:            MapIterator2_field_MapIterator2_1
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 24, $noreg :: (load (s64) from %ir.2)
    RET 0, $rax

...
---
name:            MapIterator2_B_init_iteratorIterator2T_fFunctionT_to_U
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 104, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            MapIterator2_B_next_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 112, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            MapIterator2_init_iteratorIterator2T_fFunctionT_to_U
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
  hasTailCall:     true
fixedStack:
  - { id: 0, offset: 56, size: 8, alignment: 8 }
  - { id: 1, offset: 48, size: 4, alignment: 16 }
  - { id: 2, offset: 40, size: 8, alignment: 8 }
  - { id: 3, offset: 32, size: 8, alignment: 16 }
  - { id: 4, offset: 24, size: 8, alignment: 8 }
  - { id: 5, offset: 16, size: 8, alignment: 16 }
  - { id: 6, offset: 8, size: 4, alignment: 8 }
  - { id: 7, size: 8, alignment: 16 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.5):
    liveins: $rdi, $rsi
  
    renamable $rbx = COPY $rsi
    renamable $r15 = COPY $rdi
    renamable $r14 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.0)
    renamable $rdx = MOV64rm %fixed-stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.3, align 16)
    renamable $rcx = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.2)
    renamable $rsi = MOV64rm %fixed-stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.4)
    renamable $rax = MOV64rm $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rdi = MOV64ri -10255947709272500
    renamable $rdi = IMUL64rm killed renamable $rdi, renamable $r15, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $r8 = COPY renamable $rdi
    renamable $r8 = SHR64ri killed renamable $r8, 32, implicit-def dead $eflags
    renamable $r8 = XOR64rr killed renamable $r8, killed renamable $rdi, implicit-def dead $eflags
    renamable $r8 = AND64rm killed renamable $r8, renamable $r15, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $r12 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $r8, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm renamable $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i13)
    renamable $rdi = MOV64ri 4189192806087951739
    renamable $rdi = IMUL64rm killed renamable $rdi, renamable $rsi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i11, align 4)
    renamable $r8 = COPY renamable $rdi
    renamable $r8 = SHR64ri killed renamable $r8, 32, implicit-def dead $eflags
    renamable $r8 = XOR64rr killed renamable $r8, killed renamable $rdi, implicit-def dead $eflags
    renamable $r8 = AND64rm killed renamable $r8, renamable $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i12, align 4)
    renamable $r8d = MOV32rm killed renamable $rax, 4, killed renamable $r8, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i21)
    renamable $rax = MOV64rm renamable $r15, 8, renamable $r12, 0, $noreg :: (load (s64) from %ir.8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    CALL64m killed renamable $rax, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.10)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm killed renamable $r15, 8, killed renamable $r12, 8, $noreg :: (load (s64) from %ir.17)
    renamable $rax = MOV64rm killed renamable $rax, 1, $noreg, 8, $noreg :: (load (s64) from %ir.19)
    $rdi = COPY killed renamable $rbx
    $rsi = COPY killed renamable $r14
    TCRETURNri64 killed renamable $rax, 0, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi

...
---
name:            MapIterator2_next_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
frameInfo:
  maxAlignment:    16
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 24, size: 8, alignment: 8, isImmutable: true }
  - { id: 1, offset: 16, size: 4, alignment: 16, isImmutable: true }
  - { id: 2, offset: 8, size: 8, alignment: 8, isImmutable: true }
  - { id: 3, size: 8, alignment: 16, isImmutable: true }
stack:
  - { id: 0, size: 1, alignment: 8 }
  - { id: 1, size: 32, alignment: 8 }
  - { id: 2, size: 48, alignment: 16 }
  - { id: 3, size: 48, alignment: 16 }
  - { id: 4, type: spill-slot, size: 8, alignment: 8 }
  - { id: 5, type: spill-slot, size: 8, alignment: 8 }
  - { id: 6, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.3):
    liveins: $rdi, $rdx, $rsi
  
    renamable $r15 = COPY $rdx
    renamable $r12 = COPY $rsi
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, $rdi :: (store (s64) into %stack.4)
    renamable $rax = MOV64rm $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri -10255947709272500
    renamable $rcx = IMUL64rm killed renamable $rcx, $rsi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $rbx = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm $rsi, 8, renamable $rbx, 0, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.1, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.8)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbp = MOVSX64rm32 %stack.1, 1, $noreg, 24, $noreg :: (load (s32) from %stack.1 + 24, align 8)
    renamable $rax = MOV64rm %stack.1, 1, $noreg, 16, $noreg :: (load (s64) from %stack.1 + 16)
    MOV64mr %stack.5, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.5)
    renamable $r14 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %stack.1)
    renamable $r13 = MOV64rm %stack.1, 1, $noreg, 8, $noreg :: (load (s64) from %stack.1 + 8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    CALL64m renamable $r12, 8, renamable $rbx, 16, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.16)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    MOV64mr %stack.6, 1, $noreg, 0, $noreg, renamable $r15 :: (store (s64) into %stack.6)
    $rdi = COPY killed renamable $r15
    renamable $r15 = COPY renamable $r12
    CALL64m $r12, 8, renamable $rbx, 24, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.20)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r8 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $r14
    $rsi = COPY renamable $r13
    renamable $r12 = MOV64rm %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %stack.5)
    $rdx = COPY renamable $r12
    $ecx = COPY renamable $ebp
    CALL64m renamable $r14, 8, renamable $rbp, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.27)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.2, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r14
    $rdx = COPY renamable $r13
    $rcx = COPY renamable $r12
    $r8d = COPY renamable $ebp
    $r9 = COPY killed renamable $r14
    renamable $r10 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    PUSH64r killed renamable $r10, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r12, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r13, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r12 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %stack.2, align 16)
    renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @nil_typ, $noreg :: (load (s64) from got)
    CMP64rr renamable $r12, renamable $rdi, implicit-def $eflags
    renamable $cl = SETCCr 4, implicit killed $eflags
    TEST64rr renamable $r12, renamable $r12, implicit-def $eflags
    renamable $dl = SETCCr 4, implicit killed $eflags
    dead renamable $dl = OR8rr killed renamable $dl, killed renamable $cl, implicit-def $eflags
    JCC_1 %bb.2, 4, implicit killed $eflags
  
  bb.1:
    liveins: $rdi
  
    renamable $ecx = MOV32r0 implicit-def dead $eflags, implicit-def $rcx
    renamable $rdx = IMPLICIT_DEF
    renamable $rsi = IMPLICIT_DEF
    JMP_1 %bb.3
  
  bb.2 (%ir-block.33):
    liveins: $rbx, $r12, $r15
  
    renamable $r14 = MOV64rm %stack.2, 1, $noreg, 24, $noreg :: (load (s64) from %stack.2 + 24, basealign 16)
    renamable $r13 = MOV64rm %stack.2, 1, $noreg, 16, $noreg :: (load (s64) from %stack.2 + 16, align 16)
    renamable $rax = MOV64rm renamable $r12, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i45)
    renamable $rcx = MOV64ri 3084208142191802847
    renamable $rcx = IMUL64rm killed renamable $rcx, renamable $r12, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i43, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, renamable $r12, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i44, align 4)
    renamable $ebp = MOV32rm killed renamable $rax, 4, killed renamable $rdx, 0, $noreg, implicit-def $rbp :: (load (s32) from %ir.offset_ptr.i.i53)
    renamable $rax = MOV64rm killed renamable $r15, 8, killed renamable $rbx, 8, $noreg :: (load (s64) from %ir.sunkaddr2)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV64rm %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %stack.6)
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.37)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.3, 1, $noreg, 0, $noreg
    $rsi = COPY killed renamable $r12
    $rdx = COPY killed renamable $r13
    $rcx = COPY killed renamable $r14
    $r8 = COPY killed renamable $rbp
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $ecx = MOV32rm %stack.3, 1, $noreg, 32, $noreg, implicit-def $rcx :: (load (s32) from %stack.3 + 32, align 16)
    renamable $rdi = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %stack.3, align 16)
    renamable $rdx = MOV64rm %stack.3, 1, $noreg, 16, $noreg :: (load (s64) from %stack.3 + 16, align 16)
    renamable $rsi = MOV64rm %stack.3, 1, $noreg, 24, $noreg :: (load (s64) from %stack.3 + 24, basealign 16)
  
  bb.3 (%ir-block.41):
    liveins: $rcx, $rdi, $rdx, $rsi
  
    renamable $rax = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %stack.4)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rdx :: (store (s64), align 16)
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rdi :: (store (s64), align 16)
    MOV64mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $rsi :: (store (s64) into unknown-address + 8, basealign 16)
    MOV32mr renamable $rax, 1, $noreg, 32, $noreg, renamable $ecx, implicit killed $rcx :: (store (s32) into unknown-address + 16, align 16)
    RET 0, $rax

...
---
name:            MapIterator2_getter_f
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 32, $noreg :: (load (s64) from %ir.2)
    RET 0, $rax

...
---
name:            MapIterator2_setter_f
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi, $rsi
  
    MOV64mr killed renamable $rdi, 1, $noreg, 32, $noreg, killed renamable $rsi :: (store (s64) into %ir.3)
    RET 0

...
---
name:            MapIterator2_getter_iterator
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi, $rsi
  
    renamable $rax = COPY $rdi
    renamable $rcx = MOV64rm renamable $rsi, 1, $noreg, 0, $noreg :: (load (s64) from %ir.0)
    renamable $rdx = MOV64rm renamable $rsi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.4)
    renamable $rdi = MOV64rm renamable $rsi, 1, $noreg, 16, $noreg :: (load (s64) from %ir.7)
    renamable $esi = MOV32rm killed renamable $rsi, 1, $noreg, 24, $noreg :: (load (s32) from %ir.10)
    MOV32mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $esi :: (store (s32), align 8)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rdi :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64))
    RET 0, $rax

...
---
name:            MapIterator2_setter_iterator
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
  - { reg: '$rcx' }
  - { reg: '$r8d' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rcx, $rdi, $rdx, $rsi, $r8d
  
    MOV64mr renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $rsi :: (store (s64) into %ir.0)
    MOV64mr renamable $rdi, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64) into %ir.3)
    MOV64mr renamable $rdi, 1, $noreg, 16, $noreg, killed renamable $rcx :: (store (s64) into %ir.4)
    MOV32mr killed renamable $rdi, 1, $noreg, 24, $noreg, killed renamable $r8d :: (store (s32) into %ir.5)
    RET 0

...
---
name:            MapIterable2_getter_f
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 32, $noreg :: (load (s64) from %ir.2)
    RET 0, $rax

...
---
name:            MapIterable2_setter_f
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi, $rsi
  
    MOV64mr killed renamable $rdi, 1, $noreg, 32, $noreg, killed renamable $rsi :: (store (s64) into %ir.3)
    RET 0

...
---
name:            MapIterable2_getter_iterable
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi, $rsi
  
    renamable $rax = COPY $rdi
    renamable $rcx = MOV64rm renamable $rsi, 1, $noreg, 0, $noreg :: (load (s64) from %ir.0)
    renamable $rdx = MOV64rm renamable $rsi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.4)
    renamable $rdi = MOV64rm renamable $rsi, 1, $noreg, 16, $noreg :: (load (s64) from %ir.7)
    renamable $esi = MOV32rm killed renamable $rsi, 1, $noreg, 24, $noreg :: (load (s32) from %ir.10)
    MOV32mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $esi :: (store (s32), align 8)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rdi :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64))
    RET 0, $rax

...
---
name:            MapIterable2_setter_iterable
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
  - { reg: '$rcx' }
  - { reg: '$r8d' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rcx, $rdi, $rdx, $rsi, $r8d
  
    MOV64mr renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $rsi :: (store (s64) into %ir.0)
    MOV64mr renamable $rdi, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64) into %ir.3)
    MOV64mr renamable $rdi, 1, $noreg, 16, $noreg, killed renamable $rcx :: (store (s64) into %ir.4)
    MOV32mr killed renamable $rdi, 1, $noreg, 24, $noreg, killed renamable $r8d :: (store (s32) into %ir.5)
    RET 0

...
---
name:            ArrayIterator_field_ArrayIterator_0
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg :: (load (s64) from %ir.2)
    RET 0, $rax

...
---
name:            ArrayIterator_B_init_arrayArrayT
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 96, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            ArrayIterator_B_next_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 104, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            ArrayIterator_init_arrayArrayT
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
  hasTailCall:     true
fixedStack:
  - { id: 0, offset: 48, size: 4, alignment: 16 }
  - { id: 1, offset: 40, size: 8, alignment: 8 }
  - { id: 2, offset: 32, size: 8, alignment: 16 }
  - { id: 3, offset: 24, size: 8, alignment: 8 }
  - { id: 4, offset: 16, size: 8, alignment: 16 }
  - { id: 5, offset: 8, size: 4, alignment: 8 }
  - { id: 6, size: 8, alignment: 16 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.4):
    liveins: $rdi, $rsi
  
    renamable $rbx = COPY $rsi
    renamable $r14 = COPY $rdi
    renamable $rdx = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.2, align 16)
    renamable $rcx = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.1)
    renamable $rsi = MOV64rm %fixed-stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.3)
    renamable $rax = MOV64rm $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rdi = MOV64ri 3447345754186651411
    renamable $rdi = IMUL64rm killed renamable $rdi, renamable $r14, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $r8 = COPY renamable $rdi
    renamable $r8 = SHR64ri killed renamable $r8, 32, implicit-def dead $eflags
    renamable $r8 = XOR64rr killed renamable $r8, killed renamable $rdi, implicit-def dead $eflags
    renamable $r8 = AND64rm killed renamable $r8, renamable $r14, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $r15 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $r8, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm renamable $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i12)
    renamable $rdi = MOV64ri -5261542750394134544
    renamable $rdi = IMUL64rm killed renamable $rdi, renamable $rsi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i10, align 4)
    renamable $r8 = COPY renamable $rdi
    renamable $r8 = SHR64ri killed renamable $r8, 32, implicit-def dead $eflags
    renamable $r8 = XOR64rr killed renamable $r8, killed renamable $rdi, implicit-def dead $eflags
    renamable $r8 = AND64rm killed renamable $r8, renamable $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i11, align 4)
    renamable $r8d = MOV32rm killed renamable $rax, 4, killed renamable $r8, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i20)
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r15, 0, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    CALL64m killed renamable $rax, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.9)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm killed renamable $r14, 8, killed renamable $r15, 8, $noreg :: (load (s64) from %ir.16)
    renamable $rax = MOV64rm killed renamable $rax, 1, $noreg, 8, $noreg :: (load (s64) from %ir.18)
    $rdi = COPY killed renamable $rbx
    $esi = MOV32r0 implicit-def dead $eflags
    TCRETURNri64 killed renamable $rax, 0, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi

...
---
name:            ArrayIterator_next_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
frameInfo:
  maxAlignment:    16
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 24, size: 8, alignment: 8, isImmutable: true }
  - { id: 1, offset: 16, size: 4, alignment: 16, isImmutable: true }
  - { id: 2, offset: 8, size: 8, alignment: 8, isImmutable: true }
  - { id: 3, size: 8, alignment: 16, isImmutable: true }
stack:
  - { id: 0, size: 1, alignment: 8 }
  - { id: 1, size: 8, alignment: 8 }
  - { id: 2, size: 8, alignment: 8 }
  - { id: 3, size: 32, alignment: 8 }
  - { id: 4, size: 32, alignment: 8 }
  - { id: 5, size: 48, alignment: 16 }
  - { id: 6, type: spill-slot, size: 8, alignment: 8 }
  - { id: 7, type: spill-slot, size: 8, alignment: 8 }
  - { id: 8, type: spill-slot, size: 8, alignment: 8 }
  - { id: 9, type: spill-slot, size: 8, alignment: 8 }
  - { id: 10, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.3):
    liveins: $rdi, $rdx, $rsi
  
    renamable $r14 = COPY $rdx
    renamable $r13 = COPY $rsi
    MOV64mr %stack.6, 1, $noreg, 0, $noreg, $rdi :: (store (s64) into %stack.6)
    renamable $rax = MOV64rm $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri 3447345754186651411
    renamable $rcx = IMUL64rm killed renamable $rcx, $rsi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $r15 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm $rsi, 8, renamable $r15, 8, $noreg :: (load (s64) from %ir.8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r14
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.9)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    MOV32mr %stack.7, 1, $noreg, 0, $noreg, $eax :: (store (s32) into %stack.7)
    renamable $rax = MOV64rm renamable $r13, 8, renamable $r15, 0, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.3, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r14
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.13)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r12 = MOVSX64rm32 %stack.3, 1, $noreg, 24, $noreg :: (load (s32) from %stack.3 + 24, align 8)
    renamable $rax = MOV64rm %stack.3, 1, $noreg, 16, $noreg :: (load (s64) from %stack.3 + 16)
    MOV64mr %stack.8, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.8)
    renamable $rbp = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %stack.3)
    renamable $rbx = MOV64rm %stack.3, 1, $noreg, 8, $noreg :: (load (s64) from %stack.3 + 8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    MOV64mr %stack.9, 1, $noreg, 0, $noreg, renamable $r14 :: (store (s64) into %stack.9)
    $rdi = COPY killed renamable $r14
    renamable $r14 = COPY renamable $r15
    MOV64mr %stack.10, 1, $noreg, 0, $noreg, renamable $r13 :: (store (s64) into %stack.10)
    CALL64m killed renamable $r13, 8, killed renamable $r15, 16, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.21)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r13 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $rbp
    $rsi = COPY renamable $rbx
    renamable $r15 = MOV64rm %stack.8, 1, $noreg, 0, $noreg :: (load (s64) from %stack.8)
    $rdx = COPY renamable $r15
    $ecx = COPY renamable $r12d
    $r8 = COPY renamable $r13
    CALL64m renamable $rbp, 8, renamable $r12, 56, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.28)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbp
    $rsi = COPY renamable $rbx
    $rdx = COPY renamable $r15
    $ecx = COPY renamable $r12d
    $r8 = COPY killed renamable $rbp
    $r9 = COPY killed renamable $rbx
    PUSH64r killed renamable $r13, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r12, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r15, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit $r9, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
    ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    CMP32mr %stack.7, 1, $noreg, 0, $noreg, killed renamable $eax, implicit-def $eflags :: (load (s32) from %stack.7)
    JCC_1 %bb.2, 12, implicit killed $eflags
  
  bb.1:
    renamable $esi = MOV32r0 implicit-def dead $eflags, implicit-def $rsi
    renamable $r9 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @nil_typ, $noreg :: (load (s64) from got)
    renamable $rdx = IMPLICIT_DEF
    renamable $rcx = IMPLICIT_DEF
    JMP_1 %bb.3
  
  bb.2 (%ir-block.34):
    liveins: $r14
  
    renamable $r13 = COPY killed renamable $r14
    renamable $r14 = MOV64rm %stack.10, 1, $noreg, 0, $noreg :: (load (s64) from %stack.10)
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r13, 8, $noreg :: (load (s64) from %ir.sunkaddr2)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r15 = MOV64rm %stack.9, 1, $noreg, 0, $noreg :: (load (s64) from %stack.9)
    $rdi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.36)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $eax = KILL $eax, implicit-def $rax
    renamable $esi = LEA64_32r killed renamable $rax, 1, $noreg, 1, $noreg
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r13, 8, $noreg :: (load (s64) from %ir.sunkaddr2)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.42)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r13, 8, $noreg :: (load (s64) from %ir.sunkaddr2)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.45)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $eax = KILL $eax, implicit-def $rax
    renamable $eax = DEC32r renamable $eax, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax
    MOV64mr %stack.7, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.7)
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r13, 0, $noreg :: (load (s64) from %ir.sunkaddr4)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.4, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.50)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r12 = MOVSX64rm32 %stack.4, 1, $noreg, 24, $noreg :: (load (s32) from %stack.4 + 24, align 8)
    renamable $rax = MOV64rm %stack.4, 1, $noreg, 16, $noreg :: (load (s64) from %stack.4 + 16)
    MOV64mr %stack.8, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.8)
    renamable $rbx = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %stack.4)
    renamable $rbp = MOV64rm %stack.4, 1, $noreg, 8, $noreg :: (load (s64) from %stack.4 + 8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $r15
    CALL64m killed renamable $r14, 8, killed renamable $r13, 16, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.sunkaddr7)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_parameterization_Ptri32, $noreg :: (load (s64) from got)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.32)
    renamable $rax = MOV64rm renamable $rbx, 8, renamable $r12, 104, $noreg :: (load (s64) from %ir.64)
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @i32_typ, $noreg :: (load (s64) from got)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.33)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r8 = LEA64r %stack.2, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $rbx
    $rsi = COPY renamable $rbp
    renamable $r14 = MOV64rm %stack.8, 1, $noreg, 0, $noreg :: (load (s64) from %stack.8)
    $rdx = COPY renamable $r14
    $ecx = COPY renamable $r12d
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 40, 0, 40, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r10 = LEA64r %stack.1, 1, $noreg, 0, $noreg
    renamable $rdi = LEA64r %stack.5, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $rbx
    $rdx = COPY renamable $rbp
    $rcx = COPY renamable $r14
    $r8d = COPY renamable $r12d
    $r9 = COPY killed renamable $rbx
    PUSH64rmm %stack.7, 1, $noreg, 0, $noreg, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 32), (load (s64) from %stack.7)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r10, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r12, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r14, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 40, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = MOV64rm %stack.5, 1, $noreg, 24, $noreg :: (load (s64) from %stack.5 + 24, basealign 16)
    renamable $r9 = MOV64rm %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %stack.5, align 16)
    renamable $rdx = MOV64rm %stack.5, 1, $noreg, 16, $noreg :: (load (s64) from %stack.5 + 16, align 16)
    renamable $rsi = MOV64rm renamable $r9, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i67)
    renamable $rdi = MOV64ri 3084208142191802847
    renamable $rdi = IMUL64rm killed renamable $rdi, renamable $r9, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i65, align 4)
    renamable $r8 = COPY renamable $rdi
    renamable $r8 = SHR64ri killed renamable $r8, 32, implicit-def dead $eflags
    renamable $r8 = XOR64rr killed renamable $r8, killed renamable $rdi, implicit-def dead $eflags
    renamable $r8 = AND64rm killed renamable $r8, renamable $r9, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i66, align 4)
    renamable $esi = MOV32rm killed renamable $rsi, 4, killed renamable $r8, 0, $noreg, implicit-def $rsi :: (load (s32) from %ir.offset_ptr.i.i75)
  
  bb.3 (%ir-block.68):
    liveins: $rcx, $rdx, $rsi, $r9
  
    renamable $rax = MOV64rm %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %stack.6)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rdx :: (store (s64), align 16)
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $r9 :: (store (s64), align 16)
    MOV64mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $rcx :: (store (s64) into unknown-address + 8, basealign 16)
    MOV32mr renamable $rax, 1, $noreg, 32, $noreg, renamable $esi, implicit killed $rsi :: (store (s32) into unknown-address + 16, align 16)
    RET 0, $rax

...
---
name:            ArrayIterator_getter_index
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    renamable $eax = MOV32rm killed renamable $rdi, 1, $noreg, 32, $noreg :: (load (s32) from %ir.2)
    RET 0, $eax

...
---
name:            ArrayIterator_setter_index
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$esi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $esi, $rdi
  
    MOV32mr killed renamable $rdi, 1, $noreg, 32, $noreg, killed renamable $esi :: (store (s32) into %ir.3)
    RET 0

...
---
name:            ArrayIterator_getter_array
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi, $rsi
  
    renamable $rax = COPY $rdi
    renamable $rcx = MOV64rm renamable $rsi, 1, $noreg, 0, $noreg :: (load (s64) from %ir.0)
    renamable $rdx = MOV64rm renamable $rsi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.4)
    renamable $rdi = MOV64rm renamable $rsi, 1, $noreg, 16, $noreg :: (load (s64) from %ir.7)
    renamable $esi = MOV32rm killed renamable $rsi, 1, $noreg, 24, $noreg :: (load (s32) from %ir.10)
    MOV32mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $esi :: (store (s32), align 8)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rdi :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64))
    RET 0, $rax

...
---
name:            ArrayIterator_setter_array
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
  - { reg: '$rcx' }
  - { reg: '$r8d' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rcx, $rdi, $rdx, $rsi, $r8d
  
    MOV64mr renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $rsi :: (store (s64) into %ir.0)
    MOV64mr renamable $rdi, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64) into %ir.3)
    MOV64mr renamable $rdi, 1, $noreg, 16, $noreg, killed renamable $rcx :: (store (s64) into %ir.4)
    MOV32mr killed renamable $rdi, 1, $noreg, 24, $noreg, killed renamable $r8d :: (store (s32) into %ir.5)
    RET 0

...
---
name:            Array_getter_capacity
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    renamable $eax = MOV32rm killed renamable $rdi, 1, $noreg, 12, $noreg :: (load (s32) from %ir.2)
    RET 0, $eax

...
---
name:            Array_setter_capacity
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$esi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $esi, $rdi
  
    MOV32mr killed renamable $rdi, 1, $noreg, 12, $noreg, killed renamable $esi :: (store (s32) into %ir.3)
    RET 0

...
---
name:            Array_getter_length
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    renamable $eax = MOV32rm killed renamable $rdi, 1, $noreg, 8, $noreg :: (load (s32) from %ir.2)
    RET 0, $eax

...
---
name:            Array_setter_length
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$esi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $esi, $rdi
  
    MOV32mr killed renamable $rdi, 1, $noreg, 8, $noreg, killed renamable $esi :: (store (s32) into %ir.3)
    RET 0

...
---
name:            Array_getter_buffer
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 0, $noreg :: (load (s64) from %ir.0)
    RET 0, $rax

...
---
name:            Array_setter_buffer
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi, $rsi
  
    MOV64mr killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $rsi :: (store (s64) into %ir.0)
    RET 0

...
---
name:            Float64_field_Float64_0
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_parameterization_Float64_or_Int32, $noreg :: (load (s64) from got)
    RET 0, $rax

...
---
name:            Float64_field_Float64_1
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_parameterization_Float64, $noreg :: (load (s64) from got)
    RET 0, $rax

...
---
name:            Float64_B_init_valuePtrf64
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 104, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            Float64_B_value_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 112, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            Float64_B__ADD_otherFloat64__ADD_otherInt32
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$r8' }
frameInfo:
  maxAlignment:    1
  adjustsStack:    true
  hasCalls:        true
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0.._crit_edge:
    liveins: $rdi, $r8
  
    renamable $rbx = COPY $rdi
    renamable $rax = MOV64rm killed renamable $r8, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    renamable $r14 = MOV64rm renamable $rax, 1, $noreg, 8, $noreg :: (load (s64) from %ir.4, align 4)
    renamable $r15 = MOV64rm renamable $rax, 1, $noreg, 16, $noreg :: (load (s64) from %ir.5, align 4)
    renamable $r13 = MOV64rm renamable $rax, 1, $noreg, 24, $noreg :: (load (s64) from %ir.6)
    renamable $r12 = MOV64rm killed renamable $rax, 1, $noreg, 32, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @Int32, $noreg :: (load (s64) from got, align 16)
    renamable $rdx = MOV64ri -3157560240565274503
    $rdi = COPY renamable $r15
    $rsi = COPY renamable $r14
    $r8 = COPY renamable $r12
    CALL64r renamable $r13, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $bpl = COPY $al
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @Float64, $noreg :: (load (s64) from got, align 16)
    renamable $rdx = MOV64ri 8748823673944961442
    $rdi = COPY killed renamable $r15
    $rsi = COPY killed renamable $r14
    $r8 = COPY killed renamable $r12
    CALL64r killed renamable $r13, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $bpl = NOT8r killed renamable $bpl
    renamable $bpl = OR8rr killed renamable $bpl, killed renamable $al, implicit-def dead $eflags
    renamable $eax = MOVZX32rr8 killed renamable $bpl, implicit-def $rax
    renamable $eax = AND32ri renamable $eax, 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax
    renamable $eax = XOR32ri renamable $eax, 9, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax
    renamable $rax = MOV64rm killed renamable $rbx, 8, killed renamable $rax, 56, $noreg :: (load (s64) from %ir.15)
    RET 0, $rax

...
---
name:            Float64_init_valuePtrf64
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$xmm0' }
frameInfo:
  maxAlignment:    8
  hasTailCall:     true
fixedStack:
  - { id: 0, offset: 16, size: 8, alignment: 16 }
  - { id: 1, offset: 8, size: 4, alignment: 8 }
  - { id: 2, size: 8, alignment: 16 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.4):
    liveins: $rdi, $rsi, $xmm0
  
    renamable $rax = MOV64rm renamable $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri 8748823673944961442
    renamable $rcx = IMUL64rm killed renamable $rcx, renamable $rdi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, renamable $rdi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $rax = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm killed renamable $rdi, 8, killed renamable $rax, 0, $noreg :: (load (s64) from %ir.7)
    renamable $rax = MOV64rm killed renamable $rax, 1, $noreg, 8, $noreg :: (load (s64) from %ir.9)
    $rdi = COPY killed renamable $rsi
    TCRETURNri64 killed renamable $rax, 0, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0

...
---
name:            Float64_value_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    8
  hasTailCall:     true
fixedStack:
  - { id: 0, offset: 16, size: 8, alignment: 16 }
  - { id: 1, offset: 8, size: 4, alignment: 8 }
  - { id: 2, size: 8, alignment: 16 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.3):
    liveins: $rdi, $rsi
  
    renamable $rax = MOV64rm renamable $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri 8748823673944961442
    renamable $rcx = IMUL64rm killed renamable $rcx, renamable $rdi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, renamable $rdi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $rax = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm killed renamable $rdi, 8, killed renamable $rax, 0, $noreg :: (load (s64) from %ir.6)
    $rdi = COPY killed renamable $rsi
    TCRETURNmi64 killed renamable $rax, 1, $noreg, 0, $noreg, 0, csr_64, implicit $rsp, implicit $ssp, implicit $rdi :: (load (s64) from %ir.7)

...
---
name:            Float64__ADD_otherFloat64
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
frameInfo:
  maxAlignment:    16
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 64, size: 8, alignment: 16, isImmutable: true }
  - { id: 1, offset: 56, size: 8, alignment: 8, isImmutable: true }
  - { id: 2, offset: 48, size: 8, alignment: 16, isImmutable: true }
  - { id: 3, offset: 32, size: 8, alignment: 16, isImmutable: true }
  - { id: 4, offset: 24, size: 8, alignment: 8, isImmutable: true }
  - { id: 5, offset: 16, size: 4, alignment: 16, isImmutable: true }
  - { id: 6, offset: 8, size: 8, alignment: 8, isImmutable: true }
  - { id: 7, size: 8, alignment: 16, isImmutable: true }
stack:
  - { id: 0, size: 1, alignment: 8 }
  - { id: 1, size: 32, alignment: 8 }
  - { id: 2, size: 8, alignment: 8 }
  - { id: 3, size: 8, alignment: 8 }
  - { id: 4, type: spill-slot, size: 8, alignment: 8 }
  - { id: 5, type: spill-slot, size: 8, alignment: 8 }
  - { id: 6, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.4):
    liveins: $rdi, $rdx, $rsi
  
    renamable $r8 = COPY $rdx
    MOV64mr %stack.5, 1, $noreg, 0, $noreg, $rdx :: (store (s64) into %stack.5)
    renamable $rbp = COPY $rsi
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, $rdi :: (store (s64) into %stack.4)
    renamable $r13 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.2, align 16)
    renamable $r15 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.1)
    renamable $r12 = MOV64rm %fixed-stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.3, align 16)
    renamable $rax = MOV64rm $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rdx = MOV64ri 8748823673944961442
    renamable $rcx = MOV64rm $rsi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rcx = IMUL64rr killed renamable $rcx, renamable $rdx, implicit-def dead $eflags
    renamable $rdi = COPY killed renamable $rdx
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $rsi = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    MOV64mr %stack.6, 1, $noreg, 0, $noreg, renamable $rsi :: (store (s64) into %stack.6)
    renamable $rax = MOV64rm renamable $r12, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i6)
    renamable $rcx = MOV64rm renamable $r12, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i4, align 4)
    renamable $rcx = IMUL64rr killed renamable $rcx, killed renamable $rdi, implicit-def dead $eflags
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, renamable $r12, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i5, align 4)
    renamable $r14 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i14)
    renamable $rax = MOV64rm renamable $rbp, 8, killed renamable $rsi, 0, $noreg :: (load (s64) from %ir.10)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $r8
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $xmm0 :: (load (s64) from %ir.11)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $r12
    $rsi = COPY renamable $r13
    $rdx = COPY renamable $r15
    $ecx = COPY renamable $r14d
    $r8 = COPY renamable $rbx
    CALL64m renamable $r12, 8, renamable $r14, 32, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.22)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r12
    $rsi = COPY renamable $r13
    renamable $rdx = COPY killed renamable $r15
    $ecx = COPY renamable $r14d
    $r8 = COPY renamable $r12
    $r9 = COPY renamable $r13
    renamable $r15 = COPY killed renamable $r13
    PUSH64r renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r renamable $r14, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r renamable $rdx, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    renamable $r13 = COPY renamable $rdx
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit $r9, implicit-def $rsp, implicit-def $ssp, implicit-def dead $xmm0
    ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $rsi = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    $rdi = MOV32ri64 8
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @Float64, $noreg :: (load (s64) from got, align 16)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.26)
    MOV64mr %stack.1, 1, $noreg, 8, $noreg, killed renamable $rax :: (store (s64) into %ir.27)
    MOV32mi %stack.1, 1, $noreg, 24, $noreg, 7 :: (store (s32) into %ir.28, align 8)
    renamable $rax = MOV64rm %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %stack.6)
    renamable $rax = MOV64rm killed renamable $rbp, 8, killed renamable $rax, 0, $noreg :: (load (s64) from %ir.10)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV64rm %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %stack.5)
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0 :: (load (s64) from %ir.31)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    MOVSDmr %stack.5, 1, $noreg, 0, $noreg, $xmm0 :: (store (s64) into %stack.5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r12
    $rsi = COPY renamable $r15
    $rdx = COPY $r13
    $ecx = COPY renamable $r14d
    $r8 = COPY renamable $rbx
    CALL64m renamable $r12, 8, renamable $r14, 32, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.22)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r12
    $rsi = COPY renamable $r15
    $rdx = COPY $r13
    $ecx = COPY renamable $r14d
    $r8 = COPY killed renamable $r12
    $r9 = COPY killed renamable $r15
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r14, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r $r13, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit $r9, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
    ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $xmm0 = nofpexcept ADDSDrm killed renamable $xmm0, %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %stack.5)
    MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %stack.5)
    renamable $r14 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.26)
    renamable $r15 = MOV64rm %stack.1, 1, $noreg, 8, $noreg :: (dereferenceable load (s64) from %ir.27)
    renamable $r12 = MOV64rm %stack.1, 1, $noreg, 16, $noreg :: (dereferenceable load (s64) from %ir.44)
    renamable $r13 = MOVSX64rm32 %stack.1, 1, $noreg, 24, $noreg :: (dereferenceable load (s32) from %ir.28, align 8)
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_parameterization_Ptrf64, $noreg :: (load (s64) from got)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.49)
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r13, 24, $noreg :: (load (s64) from %ir.54)
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @f64_typ, $noreg :: (load (s64) from got)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.56)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r8 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $r14
    $rsi = COPY renamable $r15
    $rdx = COPY renamable $r12
    $ecx = COPY renamable $r13d
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r10 = LEA64r %stack.2, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $r14
    $rsi = COPY renamable $r15
    $rdx = COPY renamable $r12
    $ecx = COPY renamable $r13d
    $r8 = COPY renamable $r14
    $r9 = COPY renamable $r15
    $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %stack.5)
    PUSH64r killed renamable $r10, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r13, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r renamable $r12, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit $r9, implicit $xmm0, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm renamable $r14, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i20)
    renamable $rdx = MOV64ri 8748823673944961442
    renamable $rdx = IMUL64rm killed renamable $rdx, renamable $r14, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i18, align 4)
    renamable $rcx = COPY renamable $rdx
    renamable $rcx = SHR64ri killed renamable $rcx, 32, implicit-def dead $eflags
    renamable $rcx = XOR64rr killed renamable $rcx, killed renamable $rdx, implicit-def dead $eflags
    renamable $rcx = AND64rm killed renamable $rcx, renamable $r14, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i19, align 4)
    renamable $ecx = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i28)
    renamable $rax = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %stack.4)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $r12 :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $r15 :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $r14 :: (store (s64))
    MOV32mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $ecx :: (store (s32), align 8)
    RET 0, $rax

...
---
name:            Float64__ADD_otherInt32
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
frameInfo:
  maxAlignment:    16
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 64, size: 8, alignment: 16, isImmutable: true }
  - { id: 1, offset: 56, size: 8, alignment: 8, isImmutable: true }
  - { id: 2, offset: 48, size: 8, alignment: 16, isImmutable: true }
  - { id: 3, offset: 32, size: 8, alignment: 16, isImmutable: true }
  - { id: 4, offset: 24, size: 8, alignment: 8, isImmutable: true }
  - { id: 5, offset: 16, size: 4, alignment: 16, isImmutable: true }
  - { id: 6, offset: 8, size: 8, alignment: 8, isImmutable: true }
  - { id: 7, size: 8, alignment: 16, isImmutable: true }
stack:
  - { id: 0, size: 1, alignment: 8 }
  - { id: 1, size: 32, alignment: 8 }
  - { id: 2, size: 8, alignment: 8 }
  - { id: 3, size: 8, alignment: 8 }
  - { id: 4, type: spill-slot, size: 8, alignment: 8 }
  - { id: 5, type: spill-slot, size: 8, alignment: 8 }
  - { id: 6, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.4):
    liveins: $rdi, $rdx, $rsi
  
    MOV64mr %stack.5, 1, $noreg, 0, $noreg, $rdx :: (store (s64) into %stack.5)
    renamable $r15 = COPY $rsi
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, $rdi :: (store (s64) into %stack.4)
    renamable $rsi = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.2, align 16)
    renamable $rdx = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.1)
    renamable $rbp = MOV64rm %fixed-stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.3, align 16)
    renamable $rax = MOV64rm renamable $r15, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rbx = MOV64ri 8748823673944961442
    renamable $rcx = MOV64rm renamable $r15, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rcx = IMUL64rr killed renamable $rcx, renamable $rbx, implicit-def dead $eflags
    renamable $rdi = COPY renamable $rcx
    renamable $rdi = SHR64ri killed renamable $rdi, 32, implicit-def dead $eflags
    renamable $rdi = XOR64rr killed renamable $rdi, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdi = AND64rm killed renamable $rdi, renamable $r15, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $r13 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdi, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm renamable $rbp, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i6)
    renamable $rcx = MOV64ri -3157560240565274503
    renamable $rcx = IMUL64rm killed renamable $rcx, renamable $rbp, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i4, align 4)
    renamable $rdi = COPY renamable $rcx
    renamable $rdi = SHR64ri killed renamable $rdi, 32, implicit-def dead $eflags
    renamable $rdi = XOR64rr killed renamable $rdi, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdi = AND64rm killed renamable $rdi, renamable $rbp, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i5, align 4)
    renamable $r12 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdi, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i14)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r14 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $rbp
    $ecx = COPY renamable $r12d
    $r8 = COPY renamable $r14
    CALL64m renamable $rbp, 8, renamable $r12, 24, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.16)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbp
    renamable $rsi = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.2, align 16)
    renamable $rdx = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.1)
    $ecx = COPY renamable $r12d
    $r8 = COPY killed renamable $rbp
    $r9 = COPY renamable $rsi
    PUSH64r killed renamable $r14, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r12, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r renamable $rdx, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit $r9, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
    ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $xmm0 = CVTSI2SDrr killed renamable $eax
    MOVSDmr %stack.6, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %stack.6)
    renamable $rax = MOV64rm renamable $r15, 8, renamable $r13, 0, $noreg :: (load (s64) from %ir.23)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r14 = MOV64rm %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %stack.5)
    $rdi = COPY renamable $r14
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $xmm0 :: (load (s64) from %ir.24)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $rsi = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    $rdi = MOV32ri64 8
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @Float64, $noreg :: (load (s64) from got, align 16)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.27)
    MOV64mr %stack.1, 1, $noreg, 8, $noreg, killed renamable $rax :: (store (s64) into %ir.28)
    MOV32mi %stack.1, 1, $noreg, 24, $noreg, 7 :: (store (s32) into %ir.29, align 8)
    renamable $rax = MOV64rm killed renamable $r15, 8, killed renamable $r13, 0, $noreg :: (load (s64) from %ir.23)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $r14
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0 :: (load (s64) from %ir.32)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $xmm0 = nofpexcept ADDSDrm killed renamable $xmm0, %stack.6, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %stack.6)
    MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %stack.5)
    renamable $r14 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.27)
    renamable $r15 = MOV64rm %stack.1, 1, $noreg, 8, $noreg :: (dereferenceable load (s64) from %ir.28)
    renamable $r12 = MOV64rm %stack.1, 1, $noreg, 16, $noreg :: (dereferenceable load (s64) from %ir.40)
    renamable $r13 = MOVSX64rm32 %stack.1, 1, $noreg, 24, $noreg :: (dereferenceable load (s32) from %ir.29, align 8)
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_parameterization_Ptrf64, $noreg :: (load (s64) from got)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.45)
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r13, 24, $noreg :: (load (s64) from %ir.50)
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @f64_typ, $noreg :: (load (s64) from got)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.52)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r8 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $r14
    $rsi = COPY renamable $r15
    $rdx = COPY renamable $r12
    $ecx = COPY renamable $r13d
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r10 = LEA64r %stack.2, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $r14
    $rsi = COPY renamable $r15
    $rdx = COPY renamable $r12
    $ecx = COPY renamable $r13d
    $r8 = COPY renamable $r14
    $r9 = COPY renamable $r15
    $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %stack.5)
    PUSH64r killed renamable $r10, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r13, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r renamable $r12, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit $r9, implicit $xmm0, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm renamable $r14, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i20)
    renamable $rbx = IMUL64rm killed renamable $rbx, renamable $r14, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i18, align 4)
    renamable $rcx = COPY renamable $rbx
    renamable $rcx = SHR64ri killed renamable $rcx, 32, implicit-def dead $eflags
    renamable $rcx = XOR64rr killed renamable $rcx, killed renamable $rbx, implicit-def dead $eflags
    renamable $rcx = AND64rm killed renamable $rcx, renamable $r14, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i19, align 4)
    renamable $ecx = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i28)
    renamable $rax = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %stack.4)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $r12 :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $r15 :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $r14 :: (store (s64))
    MOV32mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $ecx :: (store (s32), align 8)
    RET 0, $rax

...
---
name:            Int32_field_Int32_0
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_parameterization_Int32_or_Float64, $noreg :: (load (s64) from got)
    RET 0, $rax

...
---
name:            Int32_B_init_valuePtri32
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 96, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            Int32_B_value_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 104, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            Int32_B__ADD_otherFloat64__ADD_otherInt32
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$r8' }
frameInfo:
  maxAlignment:    1
  adjustsStack:    true
  hasCalls:        true
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0.._crit_edge:
    liveins: $rdi, $r8
  
    renamable $rbx = COPY $rdi
    renamable $rax = MOV64rm killed renamable $r8, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    renamable $r14 = MOV64rm renamable $rax, 1, $noreg, 8, $noreg :: (load (s64) from %ir.4, align 4)
    renamable $r15 = MOV64rm renamable $rax, 1, $noreg, 16, $noreg :: (load (s64) from %ir.5, align 4)
    renamable $r13 = MOV64rm renamable $rax, 1, $noreg, 24, $noreg :: (load (s64) from %ir.6)
    renamable $r12 = MOV64rm killed renamable $rax, 1, $noreg, 32, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @Int32, $noreg :: (load (s64) from got, align 16)
    renamable $rdx = MOV64ri -3157560240565274503
    $rdi = COPY renamable $r15
    $rsi = COPY renamable $r14
    $r8 = COPY renamable $r12
    CALL64r renamable $r13, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $bpl = COPY $al
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @Float64, $noreg :: (load (s64) from got, align 16)
    renamable $rdx = MOV64ri 8748823673944961442
    $rdi = COPY killed renamable $r15
    $rsi = COPY killed renamable $r14
    $r8 = COPY killed renamable $r12
    CALL64r killed renamable $r13, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $bpl = NOT8r killed renamable $bpl
    renamable $bpl = OR8rr killed renamable $bpl, killed renamable $al, implicit-def dead $eflags
    renamable $eax = MOVZX32rr8 killed renamable $bpl
    renamable $eax = AND32ri killed renamable $eax, 1, implicit-def dead $eflags
    renamable $ecx = MOV32ri 8, implicit-def $rcx
    renamable $ecx = SUB32rr renamable $ecx, killed renamable $eax, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
    renamable $rax = MOV64rm killed renamable $rbx, 8, killed renamable $rcx, 56, $noreg :: (load (s64) from %ir.15)
    RET 0, $rax

...
---
name:            Int32_init_valuePtri32
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    8
  hasTailCall:     true
fixedStack:
  - { id: 0, offset: 24, size: 4, alignment: 8 }
  - { id: 1, offset: 16, size: 8, alignment: 16 }
  - { id: 2, offset: 8, size: 4, alignment: 8 }
  - { id: 3, size: 8, alignment: 16 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.4):
    liveins: $rdi, $rsi
  
    renamable $rax = COPY $rsi
    renamable $esi = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %fixed-stack.0, align 8)
    renamable $rcx = MOV64rm renamable $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rdx = MOV64ri -3157560240565274503
    renamable $rdx = IMUL64rm killed renamable $rdx, renamable $rdi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $r8 = COPY renamable $rdx
    renamable $r8 = SHR64ri killed renamable $r8, 32, implicit-def dead $eflags
    renamable $r8 = XOR64rr killed renamable $r8, killed renamable $rdx, implicit-def dead $eflags
    renamable $r8 = AND64rm killed renamable $r8, renamable $rdi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $rcx = MOVSX64rm32 killed renamable $rcx, 4, killed renamable $r8, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rcx = MOV64rm killed renamable $rdi, 8, killed renamable $rcx, 0, $noreg :: (load (s64) from %ir.7)
    renamable $rcx = MOV64rm killed renamable $rcx, 1, $noreg, 8, $noreg :: (load (s64) from %ir.9)
    $rdi = COPY killed renamable $rax
    TCRETURNri64 killed renamable $rcx, 0, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi

...
---
name:            Int32_value_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    8
  hasTailCall:     true
fixedStack:
  - { id: 0, offset: 16, size: 8, alignment: 16 }
  - { id: 1, offset: 8, size: 4, alignment: 8 }
  - { id: 2, size: 8, alignment: 16 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.3):
    liveins: $rdi, $rsi
  
    renamable $rax = MOV64rm renamable $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri -3157560240565274503
    renamable $rcx = IMUL64rm killed renamable $rcx, renamable $rdi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, renamable $rdi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $rax = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm killed renamable $rdi, 8, killed renamable $rax, 0, $noreg :: (load (s64) from %ir.6)
    $rdi = COPY killed renamable $rsi
    TCRETURNmi64 killed renamable $rax, 1, $noreg, 0, $noreg, 0, csr_64, implicit $rsp, implicit $ssp, implicit $rdi :: (load (s64) from %ir.7)

...
---
name:            Int32__ADD_otherFloat64
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
frameInfo:
  maxAlignment:    16
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 64, size: 8, alignment: 16, isImmutable: true }
  - { id: 1, offset: 56, size: 8, alignment: 8, isImmutable: true }
  - { id: 2, offset: 48, size: 8, alignment: 16, isImmutable: true }
  - { id: 3, offset: 32, size: 8, alignment: 16, isImmutable: true }
  - { id: 4, offset: 24, size: 8, alignment: 8, isImmutable: true }
  - { id: 5, offset: 16, size: 4, alignment: 16, isImmutable: true }
  - { id: 6, offset: 8, size: 8, alignment: 8, isImmutable: true }
  - { id: 7, size: 8, alignment: 16, isImmutable: true }
stack:
  - { id: 0, size: 1, alignment: 8 }
  - { id: 1, size: 32, alignment: 8 }
  - { id: 2, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.4):
    liveins: $rdi, $rdx, $rsi
  
    renamable $rbx = COPY $rdi
    renamable $r15 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.2, align 16)
    renamable $rbp = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.1)
    renamable $r12 = MOV64rm %fixed-stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.3, align 16)
    renamable $rax = MOV64rm renamable $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri -3157560240565274503
    renamable $rcx = IMUL64rm killed renamable $rcx, renamable $rsi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdi = COPY renamable $rcx
    renamable $rdi = SHR64ri killed renamable $rdi, 32, implicit-def dead $eflags
    renamable $rdi = XOR64rr killed renamable $rdi, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdi = AND64rm killed renamable $rdi, renamable $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $rax = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdi, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rcx = MOV64rm renamable $r12, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i6)
    renamable $rdi = MOV64ri 8748823673944961442
    renamable $rdi = IMUL64rm killed renamable $rdi, renamable $r12, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i4, align 4)
    renamable $r8 = COPY renamable $rdi
    renamable $r8 = SHR64ri killed renamable $r8, 32, implicit-def dead $eflags
    renamable $r8 = XOR64rr killed renamable $r8, killed renamable $rdi, implicit-def dead $eflags
    renamable $r8 = AND64rm killed renamable $r8, renamable $r12, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i5, align 4)
    renamable $r13 = MOVSX64rm32 killed renamable $rcx, 4, killed renamable $r8, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i14)
    renamable $rax = MOV64rm killed renamable $rsi, 8, killed renamable $rax, 0, $noreg :: (load (s64) from %ir.10)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $rdx
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.11)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $xmm0 = CVTSI2SDrr killed renamable $eax
    MOVSDmr %stack.2, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %stack.2)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r14 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $r12
    $rsi = COPY renamable $r15
    $rdx = COPY renamable $rbp
    $ecx = COPY renamable $r13d
    $r8 = COPY renamable $r14
    CALL64m renamable $r12, 8, renamable $r13, 32, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.23)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r12
    renamable $rsi = COPY killed renamable $r15
    renamable $r15 = COPY renamable $rbp
    $rdx = COPY $rbp
    $ecx = COPY renamable $r13d
    $r8 = COPY renamable $r12
    $r9 = COPY renamable $rsi
    renamable $rbp = COPY renamable $rsi
    PUSH64r killed renamable $r14, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r renamable $r13, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r renamable $r15, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit $r9, implicit-def $rsp, implicit-def $ssp, implicit-def dead $xmm0
    ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $rsi = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    $rdi = MOV32ri64 8
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r14 = COPY $rax
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @Float64, $noreg :: (load (s64) from got, align 16)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.27)
    MOV64mr %stack.1, 1, $noreg, 8, $noreg, renamable $r14 :: (store (s64) into %ir.28)
    MOV32mi %stack.1, 1, $noreg, 24, $noreg, 7 :: (store (s32) into %ir.29, align 8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r12
    $rsi = COPY renamable $rbp
    $rdx = COPY renamable $r15
    $ecx = COPY renamable $r13d
    renamable $r8 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    CALL64m renamable $r12, 8, renamable $r13, 32, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.23)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r12
    $rsi = COPY renamable $rbp
    $rdx = COPY renamable $r15
    $ecx = COPY renamable $r13d
    $r8 = COPY killed renamable $r12
    $r9 = COPY killed renamable $rbp
    renamable $r10 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    PUSH64r killed renamable $r10, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r13, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r15, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit $r9, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
    ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $xmm0 = nofpexcept ADDSDrm killed renamable $xmm0, %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %stack.2)
    MOVSDmr killed renamable $r14, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.result.i)
    renamable $rax = MOV64rm %stack.1, 1, $noreg, 8, $noreg :: (dereferenceable load (s64) from %ir.28)
    renamable $rcx = MOV64rm %stack.1, 1, $noreg, 16, $noreg :: (dereferenceable load (s64) from %ir.28 + 8)
    renamable $edx = MOV32rm %stack.1, 1, $noreg, 24, $noreg :: (dereferenceable load (s32) from %ir.28 + 16, align 8)
    renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @Float64, $noreg :: (load (s64) from got, align 16)
    MOV64mr renamable $rbx, 1, $noreg, 0, $noreg, killed renamable $rsi :: (store (s64), align 16)
    MOV32mr renamable $rbx, 1, $noreg, 32, $noreg, killed renamable $edx :: (store (s32) into unknown-address + 16, align 16)
    MOV64mr renamable $rbx, 1, $noreg, 16, $noreg, killed renamable $rax :: (store (s64), align 16)
    MOV64mr renamable $rbx, 1, $noreg, 24, $noreg, killed renamable $rcx :: (store (s64) into unknown-address + 8, basealign 16)
    $rax = COPY killed renamable $rbx
    RET 0, $rax

...
---
name:            Int32__ADD_otherInt32
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
frameInfo:
  maxAlignment:    16
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 64, size: 8, alignment: 16, isImmutable: true }
  - { id: 1, offset: 56, size: 8, alignment: 8, isImmutable: true }
  - { id: 2, offset: 48, size: 8, alignment: 16, isImmutable: true }
  - { id: 3, offset: 32, size: 8, alignment: 16, isImmutable: true }
  - { id: 4, offset: 24, size: 8, alignment: 8, isImmutable: true }
  - { id: 5, offset: 16, size: 4, alignment: 16, isImmutable: true }
  - { id: 6, offset: 8, size: 8, alignment: 8, isImmutable: true }
  - { id: 7, size: 8, alignment: 16, isImmutable: true }
stack:
  - { id: 0, size: 1, alignment: 8 }
  - { id: 1, size: 32, alignment: 8 }
  - { id: 2, size: 8, alignment: 8 }
  - { id: 3, size: 8, alignment: 8 }
  - { id: 4, type: spill-slot, size: 8, alignment: 8 }
  - { id: 5, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.4):
    liveins: $rdi, $rdx, $rsi
  
    renamable $r8 = COPY $rdx
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, $rdx :: (store (s64) into %stack.4)
    renamable $rbp = COPY $rsi
    MOV64mr %stack.5, 1, $noreg, 0, $noreg, $rdi :: (store (s64) into %stack.5)
    renamable $rbx = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.2, align 16)
    renamable $r15 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.1)
    renamable $r12 = MOV64rm %fixed-stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.3, align 16)
    renamable $rax = MOV64rm $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri -3157560240565274503
    renamable $rdx = MOV64rm $rsi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdx = IMUL64rr killed renamable $rdx, renamable $rcx, implicit-def dead $eflags
    renamable $rsi = COPY renamable $rdx
    renamable $rsi = SHR64ri killed renamable $rsi, 32, implicit-def dead $eflags
    renamable $rsi = XOR64rr killed renamable $rsi, killed renamable $rdx, implicit-def dead $eflags
    renamable $rsi = AND64rm killed renamable $rsi, renamable $rbp, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $r13 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rsi, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm renamable $r12, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i6)
    renamable $rcx = IMUL64rm killed renamable $rcx, renamable $r12, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i4, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, renamable $r12, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i5, align 4)
    renamable $r14 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i14)
    renamable $rax = MOV64rm renamable $rbp, 8, renamable $r13, 0, $noreg :: (load (s64) from %ir.10)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $r8
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax :: (load (s64) from %ir.11)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r8 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $r12
    $rsi = COPY renamable $rbx
    $rdx = COPY killed renamable $r15
    $ecx = COPY renamable $r14d
    renamable $r15 = COPY renamable $r8
    CALL64m renamable $r12, 8, renamable $r14, 24, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.22)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r12
    $rsi = COPY renamable $rbx
    renamable $rdx = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.1)
    $ecx = COPY renamable $r14d
    $r8 = COPY renamable $r12
    $r9 = COPY renamable $rbx
    PUSH64r killed renamable $r15, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r renamable $r14, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r renamable $rdx, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    renamable $r15 = COPY renamable $rdx
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit $r9, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
    ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $rsi = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    $rdi = MOV32ri64 4
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @Int32, $noreg :: (load (s64) from got, align 16)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.26)
    MOV64mr %stack.1, 1, $noreg, 8, $noreg, killed renamable $rax :: (store (s64) into %ir.27)
    MOV32mi %stack.1, 1, $noreg, 24, $noreg, 7 :: (store (s32) into %ir.28, align 8)
    renamable $rax = MOV64rm killed renamable $rbp, 8, killed renamable $r13, 0, $noreg :: (load (s64) from %ir.10)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %stack.4)
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.31)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $ebp = COPY $eax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r12
    $rsi = COPY renamable $rbx
    $rdx = COPY renamable $r15
    $ecx = COPY renamable $r14d
    renamable $r13 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $r8 = COPY renamable $r13
    CALL64m renamable $r12, 8, renamable $r14, 24, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.22)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r12
    $rsi = COPY renamable $rbx
    $rdx = COPY renamable $r15
    $ecx = COPY renamable $r14d
    $r8 = COPY killed renamable $r12
    $r9 = COPY killed renamable $rbx
    PUSH64r killed renamable $r13, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r14, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r15, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit $r9, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
    ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r12d = COPY $eax, implicit-def $r12
    renamable $r12d = ADD32rr renamable $r12d, killed renamable $ebp, implicit-def dead $eflags, implicit killed $r12, implicit-def $r12
    renamable $r14 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.26)
    renamable $rbp = MOV64rm %stack.1, 1, $noreg, 8, $noreg :: (dereferenceable load (s64) from %ir.27)
    renamable $r15 = MOV64rm %stack.1, 1, $noreg, 16, $noreg :: (dereferenceable load (s64) from %ir.44)
    renamable $r13 = MOVSX64rm32 %stack.1, 1, $noreg, 24, $noreg :: (dereferenceable load (s32) from %ir.28, align 8)
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_parameterization_Ptri32, $noreg :: (load (s64) from got)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.49)
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r13, 16, $noreg :: (load (s64) from %ir.54)
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @i32_typ, $noreg :: (load (s64) from got)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.56)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r8 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $r14
    $rsi = COPY renamable $rbp
    $rdx = COPY renamable $r15
    $ecx = COPY renamable $r13d
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r10 = LEA64r %stack.2, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $r14
    $rsi = COPY renamable $rbp
    $rdx = COPY renamable $r15
    $ecx = COPY renamable $r13d
    $r8 = COPY renamable $r14
    $r9 = COPY killed renamable $rbp
    PUSH64r killed renamable $r12, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r10, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r13, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r15, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $esi = MOV32rm %stack.1, 1, $noreg, 24, $noreg :: (dereferenceable load (s32) from %ir.27 + 16, align 8)
    renamable $rcx = MOV64rm %stack.1, 1, $noreg, 8, $noreg :: (dereferenceable load (s64) from %ir.27)
    renamable $rdx = MOV64rm %stack.1, 1, $noreg, 16, $noreg :: (dereferenceable load (s64) from %ir.27 + 8)
    renamable $rax = MOV64rm %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %stack.5)
    MOV64mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $rdx :: (store (s64) into unknown-address + 8, basealign 16)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rcx :: (store (s64), align 16)
    MOV32mr renamable $rax, 1, $noreg, 32, $noreg, killed renamable $esi :: (store (s32) into unknown-address + 16, align 16)
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $r14 :: (store (s64), align 16)
    RET 0, $rax

...
---
name:            Int32_getter_value
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    renamable $eax = MOV32rm killed renamable $rdi, 1, $noreg, 0, $noreg :: (load (s32) from %ir.0)
    RET 0, $eax

...
---
name:            Int32_setter_value
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$esi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $esi, $rdi
  
    MOV32mr killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.0)
    RET 0

...
---
name:            Float64_getter_value
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    renamable $xmm0 = MOVSDrm_alt killed renamable $rdi, 1, $noreg, 0, $noreg :: (load (s64) from %ir.0)
    RET 0, $xmm0

...
---
name:            Float64_setter_value
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$xmm0' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi, $xmm0
  
    MOVSDmr killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.0)
    RET 0

...
---
name:            Holder_field_Holder_0
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.2)
    RET 0, $rax

...
---
name:            Holder_B_init_heldT
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 88, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            Holder_B_value_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 96, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            Holder_init_heldT
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    16
  hasTailCall:     true
fixedStack:
  - { id: 0, offset: 48, size: 8, alignment: 16 }
  - { id: 1, offset: 40, size: 8, alignment: 8 }
  - { id: 2, offset: 32, size: 8, alignment: 16 }
  - { id: 3, offset: 24, size: 8, alignment: 8 }
  - { id: 4, offset: 16, size: 8, alignment: 16 }
  - { id: 5, offset: 8, size: 4, alignment: 8 }
  - { id: 6, size: 8, alignment: 16 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.4):
    liveins: $rdi, $rsi
  
    renamable $rax = COPY $rsi
    renamable $rdx = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.2, align 16)
    renamable $rcx = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.1)
    renamable $rsi = MOV64rm %fixed-stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.3)
    renamable $r8 = MOV64rm renamable $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $r9 = MOV64ri -261997465778736657
    renamable $r9 = IMUL64rm killed renamable $r9, renamable $rdi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $r10 = COPY renamable $r9
    renamable $r10 = SHR64ri killed renamable $r10, 32, implicit-def dead $eflags
    renamable $r10 = XOR64rr killed renamable $r10, killed renamable $r9, implicit-def dead $eflags
    renamable $r10 = AND64rm killed renamable $r10, renamable $rdi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $r9 = MOVSX64rm32 killed renamable $r8, 4, killed renamable $r10, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $r8 = MOV64rm renamable $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i6)
    renamable $r10 = MOV64ri -6395308389776465871
    renamable $r10 = IMUL64rm killed renamable $r10, renamable $rsi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i4, align 4)
    renamable $r11 = COPY renamable $r10
    renamable $r11 = SHR64ri killed renamable $r11, 32, implicit-def dead $eflags
    renamable $r11 = XOR64rr killed renamable $r11, killed renamable $r10, implicit-def dead $eflags
    renamable $r11 = AND64rm killed renamable $r11, renamable $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i5, align 4)
    renamable $r8d = MOV32rm killed renamable $r8, 4, killed renamable $r11, 0, $noreg, implicit-def $r8 :: (load (s32) from %ir.offset_ptr.i.i14)
    renamable $rdi = MOV64rm killed renamable $rdi, 8, killed renamable $r9, 0, $noreg :: (load (s64) from %ir.7)
    renamable $r9 = MOV64rm killed renamable $rdi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.9)
    $rdi = COPY killed renamable $rax
    TCRETURNri64 killed renamable $r9, 0, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8

...
---
name:            Holder_value_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
frameInfo:
  maxAlignment:    16
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 24, size: 8, alignment: 8, isImmutable: true }
  - { id: 1, offset: 16, size: 4, alignment: 16, isImmutable: true }
  - { id: 2, offset: 8, size: 8, alignment: 8, isImmutable: true }
  - { id: 3, size: 8, alignment: 16, isImmutable: true }
stack:
  - { id: 0, size: 8, alignment: 8 }
  - { id: 1, size: 8, alignment: 8 }
  - { id: 2, size: 48, alignment: 16 }
  - { id: 3, size: 48, alignment: 16 }
  - { id: 4, type: spill-slot, size: 8, alignment: 8 }
  - { id: 5, type: spill-slot, size: 8, alignment: 8 }
  - { id: 6, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.3):
    liveins: $rdi, $rdx, $rsi
  
    renamable $r15 = COPY $rdx
    renamable $r14 = COPY $rsi
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, $rdi :: (store (s64) into %stack.4)
    renamable $rax = MOV64rm $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri -261997465778736657
    renamable $rcx = IMUL64rm killed renamable $rcx, $rsi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $rbx = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $rsi = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    $rdi = MOV32ri64 8
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r12 = COPY $rax
    MOV64mr %stack.5, 1, $noreg, 0, $noreg, $rax :: (store (s64) into %stack.5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    CALL64m renamable $r14, 8, renamable $rbx, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.7)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64ri 4631530004285489152
    MOV64mr killed renamable $r12, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.result.i)
    renamable $rax = MOV64rm renamable $r14, 8, renamable $rbx, 0, $noreg :: (load (s64) from %ir.6)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.2, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.14)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $eax = MOV32rm %stack.2, 1, $noreg, 32, $noreg, implicit-def $rax :: (load (s32) from %stack.2 + 32, align 16)
    MOV64mr %stack.6, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.6)
    renamable $rbp = MOV64rm %stack.2, 1, $noreg, 24, $noreg :: (load (s64) from %stack.2 + 24, basealign 16)
    renamable $r13 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %stack.2, align 16)
    renamable $r12 = MOV64rm %stack.2, 1, $noreg, 16, $noreg :: (load (s64) from %stack.2 + 16, align 16)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $r15
    CALL64m killed renamable $r14, 8, killed renamable $rbx, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax :: (load (s64) from %ir.7)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_parameterization_Float64, $noreg :: (load (s64) from got)
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.26)
    renamable $r14 = MOVSX64rm32 %stack.6, 1, $noreg, 0, $noreg :: (load (s32) from %stack.6, align 8)
    renamable $rax = MOV64rm renamable $r13, 8, renamable $r14, 16, $noreg :: (load (s64) from %ir.31)
    renamable $rbx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @Float64, $noreg :: (load (s64) from got, align 16)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, renamable $rbx :: (store (s64) into %ir.33)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r8 = LEA64r %stack.1, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $r13
    $rsi = COPY renamable $r12
    $rdx = COPY renamable $rbp
    $ecx = COPY renamable $r14d
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 80, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = MOV64rm %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %stack.5)
    MOV64mr $rsp, 1, $noreg, 48, $noreg, killed renamable $rcx :: (store (s64) into stack + 48)
    MOV64mr $rsp, 1, $noreg, 32, $noreg, killed renamable $rbx :: (store (s64) into stack + 32)
    renamable $rcx = LEA64r %stack.0, 1, $noreg, 0, $noreg
    MOV64mr $rsp, 1, $noreg, 24, $noreg, killed renamable $rcx :: (store (s64) into stack + 24)
    MOV32mr $rsp, 1, $noreg, 16, $noreg, renamable $r14d :: (store (s32) into stack + 16)
    MOV64mr $rsp, 1, $noreg, 8, $noreg, renamable $rbp :: (store (s64) into stack + 8)
    MOV64mr $rsp, 1, $noreg, 0, $noreg, renamable $r12 :: (store (s64) into stack)
    MOV64mi32 $rsp, 1, $noreg, 64, $noreg, 7 :: (store (s64) into stack + 64)
    MOV64mi32 $rsp, 1, $noreg, 56, $noreg, 0 :: (store (s64) into stack + 56)
    renamable $rdi = LEA64r %stack.3, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r13
    $rdx = COPY killed renamable $r12
    $rcx = COPY killed renamable $rbp
    $r8d = COPY renamable $r14d, implicit killed $r14
    $r9 = COPY killed renamable $r13
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 80, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r9 = MOV64rm %stack.3, 1, $noreg, 24, $noreg :: (load (s64) from %stack.3 + 24, basealign 16)
    renamable $rcx = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %stack.3, align 16)
    renamable $rdx = MOV64rm %stack.3, 1, $noreg, 16, $noreg :: (load (s64) from %stack.3 + 16, align 16)
    renamable $rsi = MOV64rm renamable $rcx, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i38)
    renamable $rdi = MOV64ri 8748823673944961442
    renamable $rdi = IMUL64rm killed renamable $rdi, renamable $rcx, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i36, align 4)
    renamable $r8 = COPY renamable $rdi
    renamable $r8 = SHR64ri killed renamable $r8, 32, implicit-def dead $eflags
    renamable $r8 = XOR64rr killed renamable $r8, killed renamable $rdi, implicit-def dead $eflags
    renamable $r8 = AND64rm killed renamable $r8, renamable $rcx, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i37, align 4)
    renamable $esi = MOV32rm killed renamable $rsi, 4, killed renamable $r8, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i46)
    renamable $rax = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %stack.4)
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $r9 :: (store (s64))
    MOV32mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $esi :: (store (s32), align 8)
    RET 0, $rax

...
---
name:            Holder_getter_held
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi, $rsi
  
    renamable $rax = COPY $rdi
    renamable $ecx = MOV32rm renamable $rsi, 1, $noreg, 24, $noreg :: (load (s32) from %ir.4 + 16)
    renamable $rdx = MOV64rm renamable $rsi, 1, $noreg, 0, $noreg :: (load (s64) from %ir.0)
    renamable $rdi = MOV64rm renamable $rsi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.4, align 4)
    renamable $rsi = MOV64rm killed renamable $rsi, 1, $noreg, 16, $noreg :: (load (s64) from %ir.4 + 8, align 4)
    MOV64mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $rsi :: (store (s64) into unknown-address + 8, basealign 16)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rdi :: (store (s64), align 16)
    MOV32mr renamable $rax, 1, $noreg, 32, $noreg, killed renamable $ecx :: (store (s32) into unknown-address + 16, align 16)
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rdx :: (store (s64), align 16)
    RET 0, $rax

...
---
name:            Holder_setter_held
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
  - { reg: '$rcx' }
  - { reg: '$r8' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rcx, $rdi, $rdx, $rsi, $r8
  
    MOV64mr renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $rsi :: (store (s64) into %ir.0)
    MOV64mr renamable $rdi, 1, $noreg, 16, $noreg, killed renamable $rcx :: (store (s64) into %ir.3 + 8, align 4)
    MOV64mr renamable $rdi, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64) into %ir.3, align 4)
    MOV32mr killed renamable $rdi, 1, $noreg, 24, $noreg, renamable $r8d, implicit killed $r8 :: (store (s32) into %ir.3 + 16)
    RET 0

...
---
name:            vyergufoax
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$r10' }
  - { reg: '$rdx' }
frameInfo:
  maxAlignment:    1
  adjustsStack:    true
  hasCalls:        true
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi, $rdx, $r10
  
    renamable $rbx = COPY $rdi
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $edi = COPY renamable $edx, implicit killed $rdx
    CALL64r killed renamable $r10, csr_64, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $eax = MOV32rr killed renamable $eax, implicit-def $rax
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @i32_typ, $noreg :: (load (s64) from got)
    MOV64mr renamable $rbx, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64), align 16)
    MOV64mr renamable $rbx, 1, $noreg, 16, $noreg, killed renamable $rax :: (store (s64), align 16)
    MOV64mi32 renamable $rbx, 1, $noreg, 24, $noreg, 0 :: (store (s64) into unknown-address + 8, basealign 16)
    MOV32mi renamable $rbx, 1, $noreg, 32, $noreg, 7 :: (store (s32) into unknown-address + 16, align 16)
    $rax = COPY killed renamable $rbx
    RET 0, $rax

...
---
name:            vnpokpysya
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$r10' }
  - { reg: '$rdx' }
frameInfo:
  maxAlignment:    1
  adjustsStack:    true
  hasCalls:        true
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi, $rdx, $r10
  
    renamable $rbx = COPY $rdi
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $edi = COPY renamable $edx, implicit killed $rdx
    CALL64r killed renamable $r10, csr_64, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @f64_typ, $noreg :: (load (s64) from got)
    MOVSDmr renamable $rbx, 1, $noreg, 16, $noreg, killed renamable $xmm0 :: (store (s64), align 16)
    MOV64mr renamable $rbx, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64), align 16)
    MOV64mi32 renamable $rbx, 1, $noreg, 24, $noreg, 0 :: (store (s64) into unknown-address + 8, basealign 16)
    MOV32mi renamable $rbx, 1, $noreg, 32, $noreg, 7 :: (store (s32) into unknown-address + 16, align 16)
    $rax = COPY killed renamable $rbx
    RET 0, $rax

...
---
name:            cvuwpzzbko
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$r10' }
  - { reg: '$rdx' }
frameInfo:
  maxAlignment:    1
  adjustsStack:    true
  hasCalls:        true
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi, $rdx, $r10
  
    renamable $rbx = COPY $rdi
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $edi = COPY renamable $edx, implicit killed $rdx
    CALL64r killed renamable $r10, csr_64, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $eax = MOV32rr killed renamable $eax, implicit-def $rax
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @i32_typ, $noreg :: (load (s64) from got)
    MOV64mr renamable $rbx, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64), align 16)
    MOV64mr renamable $rbx, 1, $noreg, 16, $noreg, killed renamable $rax :: (store (s64), align 16)
    MOV64mi32 renamable $rbx, 1, $noreg, 24, $noreg, 0 :: (store (s64) into unknown-address + 8, basealign 16)
    MOV32mi renamable $rbx, 1, $noreg, 32, $noreg, 7 :: (store (s32) into unknown-address + 16, align 16)
    $rax = COPY killed renamable $rbx
    RET 0, $rax

...
---
name:            yzjcwqxqpv
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$r10' }
  - { reg: '$rdx' }
frameInfo:
  maxAlignment:    16
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 16, size: 8, alignment: 16, isImmutable: true }
  - { id: 1, offset: 8, size: 8, alignment: 8, isImmutable: true }
  - { id: 2, size: 8, alignment: 16, isImmutable: true }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.3):
    liveins: $rdi, $rdx, $r10
  
    renamable $rbx = COPY $rdi
    renamable $esi = MOV32rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %fixed-stack.2, align 16)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $edi = COPY renamable $edx, implicit killed $rdx
    CALL64r killed renamable $r10, csr_64, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $eax = MOV32rr killed renamable $eax, implicit-def $rax
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @i32_typ, $noreg :: (load (s64) from got)
    MOV64mr renamable $rbx, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64), align 16)
    MOV64mr renamable $rbx, 1, $noreg, 16, $noreg, killed renamable $rax :: (store (s64), align 16)
    MOV64mi32 renamable $rbx, 1, $noreg, 24, $noreg, 0 :: (store (s64) into unknown-address + 8, basealign 16)
    MOV32mi renamable $rbx, 1, $noreg, 32, $noreg, 7 :: (store (s32) into unknown-address + 16, align 16)
    $rax = COPY killed renamable $rbx
    RET 0, $rax

...
---
name:            Iterator2_field_Iterator2_0
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 0, $noreg :: (load (s64) from %ir.0)
    RET 0, $rax

...
---
name:            Iterator2_B_next_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 72, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            Iterable2_field_Iterable2_0
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 0, $noreg :: (load (s64) from %ir.0)
    RET 0, $rax

...
---
name:            Iterable2_B_iterator_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 152, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            Iterable2_B_each_fFunctionT_to_Nothing
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 160, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            Iterable2_B_reduce_accumulatorT_fFunctionT._T_to_T
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 168, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            Iterable2_B_all_fFunctionT_to_Ptri1
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 176, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            Iterable2_B_any_fFunctionT_to_Ptri1
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 184, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            Iterable2_B_map_fFunctionT_to_U
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 192, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            Iterable2_B_filter_fFunctionT_to_Ptri1
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 200, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            Iterable2_B_chain_otherIterable2T
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 208, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            Iterable2_B_interleave_otherIterable2T
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 216, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            Iterable2_B_zip_otherIterable2U
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 224, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            Iterable2_B_product_otherIterable2U
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 232, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            _functionliteral_lqjlesxzkc
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$edi' }
  - { reg: '$esi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $edi, $esi
  
    renamable $esi = KILL $esi, implicit-def $rsi
    renamable $edi = KILL $edi, implicit-def $rdi
    renamable $eax = LEA64_32r killed renamable $rdi, 1, killed renamable $rsi, 0, $noreg
    RET 0, $eax

...
---
name:            _functionliteral_artvcwmgsq
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$edi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $edi
  
    renamable $edi = KILL $edi, implicit-def $rdi
    renamable $eax = LEA64_32r killed renamable $rdi, 1, renamable $rdi, 0, $noreg
    RET 0, $eax

...
---
name:            _functionliteral_jihyhtbqww
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$xmm0' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $xmm0
  
    renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0, renamable $xmm0, implicit $mxcsr
    RET 0, $xmm0

...
---
name:            _functionliteral_hhivbkuclz
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$edi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $edi
  
    renamable $eax = COPY $edi
    RET 0, $eax

...
---
name:            _functionliteral_qevxpccvpm
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$edi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $edi
  
    renamable $xmm0 = CVTSI2SDrr killed renamable $edi
    RET 0, $xmm0

...
---
name:            Addable_field_Addable_0
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 0, $noreg :: (load (s64) from %ir.0)
    RET 0, $rax

...
---
name:            Addable_field_Addable_1
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.2)
    RET 0, $rax

...
---
name:            Addable_B__ADD_otherT
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 80, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            add_five
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
  - { reg: '$rcx' }
frameInfo:
  maxAlignment:    16
  adjustsStack:    true
  hasCalls:        true
stack:
  - { id: 0, size: 8, alignment: 8 }
  - { id: 1, size: 8, alignment: 8 }
  - { id: 2, size: 48, alignment: 16 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rcx, $rdi, $rdx, $rsi
  
    renamable $r15 = COPY $rcx
    renamable $r12 = COPY $rdx
    renamable $r14 = COPY $rsi
    renamable $rbx = COPY $rdi
    renamable $rax = MOV64rm $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri -6395308389776465871
    renamable $rcx = IMUL64rm killed renamable $rcx, $rsi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $r13 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $rsi = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    $rdi = MOV32ri64 8
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbp = COPY $rax
    renamable $rax = MOV64ri 4617315517961601024
    MOV64mr renamable $rbp, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.result.i)
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @Float64, $noreg :: (load (s64) from got, align 16)
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_parameterization_Float64, $noreg :: (load (s64) from got)
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.9)
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r13, 16, $noreg :: (load (s64) from %ir.14)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.16)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r8 = LEA64r %stack.1, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $r14
    $rsi = COPY renamable $r12
    $rdx = COPY renamable $r15
    $ecx = COPY renamable $r13d
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 80, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    MOV64mr $rsp, 1, $noreg, 48, $noreg, killed renamable $rbp :: (store (s64) into stack + 48)
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @Float64, $noreg :: (load (s64) from got, align 16)
    MOV64mr $rsp, 1, $noreg, 32, $noreg, killed renamable $rcx :: (store (s64) into stack + 32)
    renamable $rcx = LEA64r %stack.0, 1, $noreg, 0, $noreg
    MOV64mr $rsp, 1, $noreg, 24, $noreg, killed renamable $rcx :: (store (s64) into stack + 24)
    MOV32mr $rsp, 1, $noreg, 16, $noreg, renamable $r13d :: (store (s32) into stack + 16)
    MOV64mr $rsp, 1, $noreg, 8, $noreg, renamable $r15 :: (store (s64) into stack + 8)
    MOV64mr $rsp, 1, $noreg, 0, $noreg, renamable $r12 :: (store (s64) into stack)
    MOV64mi32 $rsp, 1, $noreg, 64, $noreg, 7 :: (store (s64) into stack + 64)
    MOV64mi32 $rsp, 1, $noreg, 56, $noreg, 0 :: (store (s64) into stack + 56)
    renamable $rdi = LEA64r %stack.2, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r14
    $rdx = COPY killed renamable $r12
    $rcx = COPY killed renamable $r15
    $r8d = COPY renamable $r13d, implicit killed $r13
    $r9 = COPY killed renamable $r14
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 80, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm %stack.2, 1, $noreg, 24, $noreg :: (load (s64) from %stack.2 + 24, basealign 16)
    renamable $rcx = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %stack.2, align 16)
    renamable $rdx = MOV64rm %stack.2, 1, $noreg, 16, $noreg :: (load (s64) from %stack.2 + 16, align 16)
    renamable $rsi = MOV64rm renamable $rcx, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i20)
    renamable $rdi = MOV64ri 8748823673944961442
    renamable $rdi = IMUL64rm killed renamable $rdi, renamable $rcx, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i18, align 4)
    renamable $r8 = COPY renamable $rdi
    renamable $r8 = SHR64ri killed renamable $r8, 32, implicit-def dead $eflags
    renamable $r8 = XOR64rr killed renamable $r8, killed renamable $rdi, implicit-def dead $eflags
    renamable $r8 = AND64rm killed renamable $r8, renamable $rcx, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i19, align 4)
    renamable $esi = MOV32rm killed renamable $rsi, 4, killed renamable $r8, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i28)
    MOV64mr renamable $rbx, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64))
    MOV64mr renamable $rbx, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64))
    MOV64mr renamable $rbx, 1, $noreg, 16, $noreg, killed renamable $rax :: (store (s64))
    MOV32mr renamable $rbx, 1, $noreg, 24, $noreg, killed renamable $esi :: (store (s32), align 8)
    $rax = COPY killed renamable $rbx
    RET 0, $rax

...
---
name:            main
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
frameInfo:
  maxAlignment:    16
  adjustsStack:    true
  hasCalls:        true
stack:
  - { id: 0, size: 1, alignment: 8 }
  - { id: 1, size: 8, alignment: 8 }
  - { id: 2, size: 8, alignment: 8 }
  - { id: 5, size: 32, alignment: 8 }
  - { id: 15, size: 32, alignment: 8 }
  - { id: 16, size: 32, alignment: 8 }
  - { id: 17, size: 32, alignment: 8 }
  - { id: 18, size: 32, alignment: 8 }
  - { id: 19, size: 32, alignment: 8 }
  - { id: 20, size: 32, alignment: 8 }
  - { id: 21, size: 48, alignment: 16 }
  - { id: 22, size: 48, alignment: 16 }
  - { id: 23, size: 48, alignment: 16 }
  - { id: 24, size: 48, alignment: 16 }
  - { id: 25, size: 48, alignment: 16 }
  - { id: 26, size: 48, alignment: 16 }
  - { id: 27, type: spill-slot, size: 8, alignment: 8 }
  - { id: 28, type: spill-slot, size: 8, alignment: 8 }
  - { id: 29, type: spill-slot, size: 8, alignment: 8 }
  - { id: 30, type: spill-slot, size: 8, alignment: 8 }
  - { id: 31, type: spill-slot, size: 8, alignment: 8 }
  - { id: 32, type: spill-slot, size: 8, alignment: 8 }
  - { id: 33, type: spill-slot, size: 8, alignment: 8 }
  - { id: 34, type: spill-slot, size: 8, alignment: 8 }
  - { id: 35, type: spill-slot, size: 8, alignment: 8 }
constants:
  - id:              0
    value:           'double 7.000000e+00'
    alignment:       8
  - id:              1
    value:           'double 4.000000e+00'
    alignment:       8
  - id:              2
    value:           'double 5.000000e+00'
    alignment:       8
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0.ArrayIterator_next_.exit2913:
    successors: %bb.1, %bb.8
  
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    CALL64pcrel32 target-flags(x86-plt) @setup_landing_pad, csr_64, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @float_string, $noreg :: (load (s64) from got)
    renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load (s64) from constant-pool)
    $rdi = COPY renamable $rbx
    $al = MOV8ri 1
    CALL64pcrel32 target-flags(x86-plt) @printf, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r14 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @i32_string, $noreg :: (load (s64) from got)
    $rdi = COPY renamable $r14
    $esi = MOV32ri 9
    dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
    CALL64pcrel32 target-flags(x86-plt) @printf, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
    $rdi = COPY renamable $rbx
    $al = MOV8ri 1
    CALL64pcrel32 target-flags(x86-plt) @printf, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load (s64) from constant-pool)
    $rdi = COPY killed renamable $rbx
    $al = MOV8ri 1
    CALL64pcrel32 target-flags(x86-plt) @printf, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $r13 = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    $rdi = MOV32ri64 24
    $rsi = COPY renamable $r13
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r15 = COPY $rax
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_parameterization_Ptri32, $noreg :: (load (s64) from got)
    MOV64mr renamable $r15, 1, $noreg, 16, $noreg, renamable $rax :: (store (s64) into %ir.17)
    renamable $rbp = COPY killed renamable $rax
    MOV32mi renamable $r15, 1, $noreg, 12, $noreg, 4 :: (store (s32) into %ir.20)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 128
    $rsi = COPY renamable $r13
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = COPY $rax
    MOV64mr renamable $r15, 1, $noreg, 0, $noreg, $rax :: (store (s64) into %ir.result.i453)
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @i32_typ, $noreg :: (load (s64) from got)
    MOV64mr renamable $rbx, 1, $noreg, 0, $noreg, renamable $rax :: (store (s64) into %ir.result.i.i1743)
    MOV32mi renamable $rbx, 1, $noreg, 24, $noreg, 7 :: (store (s32) into %ir.21 + 16)
    MOV64mi32 renamable $rbx, 1, $noreg, 8, $noreg, 5 :: (store (s64) into %ir.21, align 4)
    MOV64mi32 renamable $rbx, 1, $noreg, 16, $noreg, 0 :: (store (s64) into %ir.21 + 8, align 4)
    MOV64mr renamable $rbx, 1, $noreg, 32, $noreg, renamable $rax :: (store (s64) into %ir.22)
    MOV32mi renamable $rbx, 1, $noreg, 56, $noreg, 7 :: (store (s32) into %ir.23 + 16)
    MOV64mi32 renamable $rbx, 1, $noreg, 40, $noreg, 6 :: (store (s64) into %ir.23, align 4)
    MOV64mi32 renamable $rbx, 1, $noreg, 48, $noreg, 0 :: (store (s64) into %ir.23 + 8, align 4)
    MOV64mr renamable $rbx, 1, $noreg, 64, $noreg, renamable $rax :: (store (s64) into %ir.24)
    MOV32mi renamable $rbx, 1, $noreg, 88, $noreg, 7 :: (store (s32) into %ir.25 + 16)
    MOV64mi32 renamable $rbx, 1, $noreg, 72, $noreg, 7 :: (store (s64) into %ir.25, align 4)
    MOV64mi32 renamable $rbx, 1, $noreg, 80, $noreg, 0 :: (store (s64) into %ir.25 + 8, align 4)
    MOV64mr renamable $rbx, 1, $noreg, 96, $noreg, killed renamable $rax :: (store (s64) into %ir.26)
    MOV64mi32 renamable $rbx, 1, $noreg, 112, $noreg, 0 :: (store (s64) into %ir.27 + 8, align 4)
    MOV64mi32 renamable $rbx, 1, $noreg, 104, $noreg, 8 :: (store (s64) into %ir.27, align 4)
    MOV32mi renamable $rbx, 1, $noreg, 120, $noreg, 7 :: (store (s32) into %ir.27 + 16)
    MOV32mi renamable $r15, 1, $noreg, 8, $noreg, 4 :: (store (s32) into %ir.19)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 24
    $rsi = COPY renamable $r13
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r12 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = LEA64r %stack.5, 1, $noreg, 0, $noreg
    $rsi = MOV32ri64 16
    $rdi = COPY $rax
    $edx = MOV32ri 64
    CALL64pcrel32 target-flags(x86-plt) @VirtualProtect, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit $rcx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_functionliteral_lqjlesxzkc, $noreg :: (load (s64) from got)
    MOV64mr renamable $r12, 1, $noreg, 12, $noreg, killed renamable $rax :: (store (s64) into %ir.result.i594 + 12, align 2)
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @yzjcwqxqpv, $noreg :: (load (s64) from got)
    MOV64mr renamable $r12, 1, $noreg, 2, $noreg, killed renamable $rax :: (store (s64) into %ir.result.i594 + 2, align 2)
    MOV8mi renamable $r12, 1, $noreg, 22, $noreg, -29 :: (store (s8) into %ir.result.i594 + 22)
    MOV16mi renamable $r12, 1, $noreg, 20, $noreg, -183 :: (store (s16) into %ir.result.i594 + 20)
    MOV16mi renamable $r12, 1, $noreg, 10, $noreg, -17847 :: (store (s16) into %ir.result.i594 + 10)
    MOV16mi killed renamable $r12, 1, $noreg, 0, $noreg, -17591 :: (store (s16) into %ir.result.i594)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $r14
    $esi = MOV32ri 26
    dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
    CALL64pcrel32 target-flags(x86-plt) @printf, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 24
    renamable $r12 = COPY renamable $r13
    $rsi = COPY $r13
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r14 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = LEA64r %stack.5, 1, $noreg, 0, $noreg
    $rsi = MOV32ri64 16
    $rdi = COPY $rax
    $edx = MOV32ri 64
    CALL64pcrel32 target-flags(x86-plt) @VirtualProtect, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit $rcx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_functionliteral_artvcwmgsq, $noreg :: (load (s64) from got)
    MOV64mr renamable $r14, 1, $noreg, 12, $noreg, killed renamable $rax :: (store (s64) into %ir.result.i615 + 12, align 2)
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @cvuwpzzbko, $noreg :: (load (s64) from got)
    MOV64mr renamable $r14, 1, $noreg, 2, $noreg, killed renamable $rax :: (store (s64) into %ir.result.i615 + 2, align 2)
    MOV8mi renamable $r14, 1, $noreg, 22, $noreg, -29 :: (store (s8) into %ir.result.i615 + 22)
    MOV16mi renamable $r14, 1, $noreg, 20, $noreg, -183 :: (store (s16) into %ir.result.i615 + 20)
    MOV16mi renamable $r14, 1, $noreg, 10, $noreg, -17847 :: (store (s16) into %ir.result.i615 + 10)
    MOV16mi renamable $r14, 1, $noreg, 0, $noreg, -17591 :: (store (s16) into %ir.result.i615)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 56
    $rsi = COPY $r13
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r13 = COPY $rax
    MOV64mr $rax, 1, $noreg, 48, $noreg, killed renamable $rbp :: (store (s64) into %ir.34)
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @Array, $noreg :: (load (s64) from got, align 16)
    MOV64mr renamable $r13, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.result.i.i1461)
    MOV64mr %stack.28, 1, $noreg, 0, $noreg, renamable $r15 :: (store (s64) into %stack.28)
    MOV64mr renamable $r13, 1, $noreg, 8, $noreg, killed renamable $r15 :: (store (s64) into %ir.36)
    MOV32mi renamable $r13, 1, $noreg, 24, $noreg, 53 :: (store (s32) into %ir.37)
    MOV64mr renamable $r13, 1, $noreg, 32, $noreg, killed renamable $r14 :: (store (s64) into %ir.38)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 24
    $rsi = COPY renamable $r12
    renamable $r14 = COPY renamable $r12
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbp = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = LEA64r %stack.5, 1, $noreg, 0, $noreg
    $rsi = MOV32ri64 16
    $rdi = COPY $rax
    $edx = MOV32ri 64
    CALL64pcrel32 target-flags(x86-plt) @VirtualProtect, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit $rcx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_functionliteral_qevxpccvpm, $noreg :: (load (s64) from got)
    MOV64mr renamable $rbp, 1, $noreg, 12, $noreg, killed renamable $rax :: (store (s64) into %ir.result.i647 + 12, align 2)
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @vnpokpysya, $noreg :: (load (s64) from got)
    MOV64mr renamable $rbp, 1, $noreg, 2, $noreg, killed renamable $rax :: (store (s64) into %ir.result.i647 + 2, align 2)
    MOV8mi renamable $rbp, 1, $noreg, 22, $noreg, -29 :: (store (s8) into %ir.result.i647 + 22)
    MOV16mi renamable $rbp, 1, $noreg, 20, $noreg, -183 :: (store (s16) into %ir.result.i647 + 20)
    MOV16mi renamable $rbp, 1, $noreg, 10, $noreg, -17847 :: (store (s16) into %ir.result.i647 + 10)
    MOV16mi renamable $rbp, 1, $noreg, 0, $noreg, -17591 :: (store (s16) into %ir.result.i647)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 24
    $rsi = COPY $r12
    MOV64mr %stack.27, 1, $noreg, 0, $noreg, $r12 :: (store (s64) into %stack.27)
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r12 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = LEA64r %stack.5, 1, $noreg, 0, $noreg
    $rsi = MOV32ri64 16
    $rdi = COPY $rax
    $edx = MOV32ri 64
    CALL64pcrel32 target-flags(x86-plt) @VirtualProtect, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit $rcx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_functionliteral_hhivbkuclz, $noreg :: (load (s64) from got)
    MOV64mr renamable $r12, 1, $noreg, 12, $noreg, killed renamable $rax :: (store (s64) into %ir.result.i651 + 12, align 2)
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @vyergufoax, $noreg :: (load (s64) from got)
    MOV64mr renamable $r12, 1, $noreg, 2, $noreg, killed renamable $rax :: (store (s64) into %ir.result.i651 + 2, align 2)
    MOV8mi renamable $r12, 1, $noreg, 22, $noreg, -29 :: (store (s8) into %ir.result.i651 + 22)
    MOV16mi renamable $r12, 1, $noreg, 20, $noreg, -183 :: (store (s16) into %ir.result.i651 + 20)
    MOV16mi renamable $r12, 1, $noreg, 10, $noreg, -17847 :: (store (s16) into %ir.result.i651 + 10)
    MOV16mi renamable $r12, 1, $noreg, 0, $noreg, -17591 :: (store (s16) into %ir.result.i651)
    renamable $r15 = MOV64rm renamable $r13, 1, $noreg, 24, $noreg :: (load (s64) from %ir.37)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 56
    $rsi = COPY killed renamable $r14
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r14 = COPY $rax
    MOV64mr $rax, 1, $noreg, 40, $noreg, killed renamable $r15 :: (store (s64) into %ir.42)
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_parameterization_Ptri32, $noreg :: (load (s64) from got)
    MOV64mr renamable $r14, 1, $noreg, 48, $noreg, killed renamable $rax :: (store (s64) into %ir.43)
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @MapIterable2, $noreg :: (load (s64) from got, align 16)
    MOV64mr renamable $r14, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.result.i.i1510)
    MOV64mr renamable $r14, 1, $noreg, 8, $noreg, killed renamable $r13 :: (store (s64) into %ir.45)
    MOV32mi renamable $r14, 1, $noreg, 24, $noreg, 35 :: (store (s32) into %ir.46)
    MOV64mr renamable $r14, 1, $noreg, 32, $noreg, killed renamable $r12 :: (store (s64) into %ir.47)
    renamable $r15 = MOV64rm renamable $r14, 1, $noreg, 24, $noreg :: (load (s64) from %ir.46)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 56
    $rsi = MOV64rm %stack.27, 1, $noreg, 0, $noreg :: (load (s64) from %stack.27)
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    MOV64mr renamable $rax, 1, $noreg, 40, $noreg, killed renamable $r15 :: (store (s64) into %ir.49)
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_parameterization_Ptrf64, $noreg :: (load (s64) from got)
    MOV64mr renamable $rax, 1, $noreg, 48, $noreg, killed renamable $rcx :: (store (s64) into %ir.50)
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @MapIterable2, $noreg :: (load (s64) from got, align 16)
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.result.i.i1732)
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, renamable $r14 :: (store (s64) into %ir.52)
    MOV32mi renamable $rax, 1, $noreg, 24, $noreg, 35 :: (store (s32) into %ir.53)
    MOV64mr %stack.27, 1, $noreg, 0, $noreg, renamable $rax :: (store (s64) into %stack.27)
    MOV64mr killed renamable $rax, 1, $noreg, 32, $noreg, killed renamable $rbp :: (store (s64) into %ir.54)
    renamable $rax = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg :: (load (s64) from %ir.result.i.i1743)
    CMP64rm renamable $rax, $rip, 1, $noreg, target-flags(x86-gotpcrel) @nil_typ, $noreg, implicit-def $eflags :: (load (s64) from got)
    renamable $cl = SETCCr 4, implicit killed $eflags
    TEST64rr killed renamable $rax, renamable $rax, implicit-def $eflags
    renamable $al = SETCCr 4, implicit killed $eflags
    dead renamable $al = OR8rr killed renamable $al, killed renamable $cl, implicit-def $eflags
    JCC_1 %bb.8, 5, implicit killed $eflags
    JMP_1 %bb.1
  
  bb.1.MapIterator2_next_.exit2738:
    successors: %bb.2, %bb.7
    liveins: $rbx, $r14
  
    renamable $rax = MOV64rm killed renamable $rbx, 1, $noreg, 8, $noreg :: (load (s64) from %ir.21, align 4)
    renamable $eax = ADD32rr renamable $eax, renamable $eax, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax
    renamable $xmm0 = CVTSI2SDrr renamable $eax, implicit killed $rax
    MOVSDmr %stack.29, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %stack.29)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @i32_string, $noreg :: (load (s64) from got)
    $esi = MOV32ri 55
    dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
    CALL64pcrel32 target-flags(x86-plt) @printf, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @float_string, $noreg :: (load (s64) from got)
    $xmm0 = MOVSDrm_alt %stack.29, 1, $noreg, 0, $noreg :: (load (s64) from %stack.29)
    $al = MOV8ri 1
    CALL64pcrel32 target-flags(x86-plt) @printf, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm %stack.28, 1, $noreg, 0, $noreg :: (load (s64) from %stack.28)
    CMP32mi renamable $rax, 1, $noreg, 8, $noreg, 2, implicit-def $eflags :: (load (s32) from %ir.sunkaddr)
    JCC_1 %bb.7, 12, implicit killed $eflags
    JMP_1 %bb.2
  
  bb.2.ArrayIterator_next_.exit2984:
    successors: %bb.3, %bb.8
    liveins: $rax, $r14
  
    renamable $rax = MOV64rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s64) from %ir.result.i453)
    renamable $rcx = MOV64rm renamable $rax, 1, $noreg, 32, $noreg :: (load (s64) from %ir.71)
    CMP64rm renamable $rcx, $rip, 1, $noreg, target-flags(x86-gotpcrel) @nil_typ, $noreg, implicit-def $eflags :: (load (s64) from got)
    renamable $dl = SETCCr 4, implicit killed $eflags
    TEST64rr killed renamable $rcx, renamable $rcx, implicit-def $eflags
    renamable $cl = SETCCr 4, implicit killed $eflags
    dead renamable $cl = OR8rr killed renamable $cl, killed renamable $dl, implicit-def $eflags
    JCC_1 %bb.8, 5, implicit killed $eflags
    JMP_1 %bb.3
  
  bb.3.MapIterator2_next_.exit2795.preheader:
    liveins: $rax, $r14
  
    renamable $rax = MOV64rm killed renamable $rax, 1, $noreg, 40, $noreg :: (load (s64) from %ir.73, align 4)
    renamable $r12 = MOV32ri64 72
    renamable $ebp = MOV32ri 1
    renamable $rbx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @i32_string, $noreg :: (load (s64) from got)
    renamable $r15 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @float_string, $noreg :: (load (s64) from got)
    renamable $r13 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @nil_typ, $noreg :: (load (s64) from got)
  
  bb.4.MapIterator2_next_.exit2795:
    successors: %bb.5(0x7c000000), %bb.7(0x04000000)
    liveins: $ebp, $rax, $rbx, $r12, $r13, $r14, $r15
  
    renamable $eax = ADD32rr renamable $eax, renamable $eax, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax
    renamable $xmm0 = CVTSI2SDrr renamable $eax, implicit killed $rax
    MOVSDmr %stack.29, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %stack.29)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    $esi = MOV32ri 55
    dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
    CALL64pcrel32 target-flags(x86-plt) @printf, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    $xmm0 = MOVSDrm_alt %stack.29, 1, $noreg, 0, $noreg :: (load (s64) from %stack.29)
    $al = MOV8ri 1
    CALL64pcrel32 target-flags(x86-plt) @printf, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $ebp = nuw nsw INC32r killed renamable $ebp, implicit-def dead $eflags
    renamable $rax = MOV64rm %stack.28, 1, $noreg, 0, $noreg :: (load (s64) from %stack.28)
    CMP32rm renamable $ebp, renamable $rax, 1, $noreg, 8, $noreg, implicit-def $eflags :: (load (s32) from %ir.sunkaddr9)
    JCC_1 %bb.7, 13, implicit killed $eflags
    JMP_1 %bb.5
  
  bb.5.ArrayIterator_next_.exit3055:
    successors: %bb.6(0x7e000000), %bb.8(0x02000000)
    liveins: $ebp, $rax, $rbx, $r12, $r13, $r14, $r15
  
    renamable $rax = MOV64rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s64) from %ir.result.i453)
    renamable $rcx = MOV64rm renamable $rax, 1, renamable $r12, -8, $noreg :: (load (s64) from %ir.scevgep2)
    CMP64rr renamable $rcx, renamable $r13, implicit-def $eflags
    JCC_1 %bb.8, 4, implicit killed $eflags
    JMP_1 %bb.6
  
  bb.6.ArrayIterator_next_.exit3055:
    successors: %bb.4(0x7df7df7e), %bb.8(0x02082082)
    liveins: $ebp, $rax, $rbx, $rcx, $r12, $r13, $r14, $r15
  
    renamable $eax = MOV32rm killed renamable $rax, 1, renamable $r12, 0, $noreg, implicit-def $rax :: (load (s32) from %ir.scevgep)
    renamable $r12 = nuw nsw ADD64ri32 killed renamable $r12, 32, implicit-def dead $eflags
    TEST64rr killed renamable $rcx, renamable $rcx, implicit-def $eflags
    JCC_1 %bb.4, 5, implicit killed $eflags
    JMP_1 %bb.8
  
  bb.7..critedge.sink.split.sink.split.sink.split.sink.split:
    liveins: $r14
  
  bb.8..critedge.sink.split.sink.split.sink.split:
    liveins: $r14
  
    renamable $rax = MOV64rm %stack.28, 1, $noreg, 0, $noreg :: (load (s64) from %stack.28)
    renamable $r12 = MOV64rm renamable $rax, 1, $noreg, 24, $noreg :: (load (s64) from %ir.90)
    renamable $rbp = COPY killed renamable $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $r15 = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    $rdi = MOV32ri64 24
    $rsi = COPY renamable $r15
    MOV64mr %stack.29, 1, $noreg, 0, $noreg, renamable $r15 :: (store (s64) into %stack.29)
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = COPY $rax
    renamable $r13 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_parameterization_Ptri32, $noreg :: (load (s64) from got)
    MOV64mr $rax, 1, $noreg, 16, $noreg, renamable $r13 :: (store (s64) into %ir.92)
    MOV64mr $rax, 1, $noreg, 8, $noreg, renamable $r12 :: (store (s64) into %ir.93)
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @Pair, $noreg :: (load (s64) from got, align 16)
    MOV64mr renamable $rbx, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.result.i.i)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 88
    $rsi = COPY killed renamable $r15
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r15 = COPY $rax
    MOV64mr $rax, 1, $noreg, 64, $noreg, killed renamable $r12 :: (store (s64) into %ir.94)
    MOV64mr $rax, 1, $noreg, 72, $noreg, killed renamable $r13 :: (store (s64) into %ir.95)
    MOV64mr $rax, 1, $noreg, 80, $noreg, killed renamable $rbx :: (store (s64) into %ir.96)
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @Array, $noreg :: (load (s64) from got, align 16)
    MOV64mr renamable $r15, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.result.i23.i)
    MOV64mr renamable $r15, 1, $noreg, 8, $noreg, killed renamable $rbp :: (store (s64) into %ir.98)
    MOV32mi renamable $r15, 1, $noreg, 24, $noreg, 53 :: (store (s32) into %ir.99)
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @MapIterable2, $noreg :: (load (s64) from got, align 16)
    MOV64mr renamable $r15, 1, $noreg, 32, $noreg, killed renamable $rax :: (store (s64) into %ir.100)
    renamable $rax = MOV64rm %stack.27, 1, $noreg, 0, $noreg :: (load (s64) from %stack.27)
    MOV64mr renamable $r15, 1, $noreg, 40, $noreg, killed renamable $rax :: (store (s64) into %ir.101)
    MOV32mi renamable $r15, 1, $noreg, 56, $noreg, 35 :: (store (s32) into %ir.102)
    renamable $rbx = MOV64rm renamable $r14, 1, $noreg, 0, $noreg :: (load (s64) from %ir.result.i.i1510)
    renamable $r12 = MOV64rm renamable $r14, 1, $noreg, 8, $noreg :: (load (s64) from %ir.sunkaddr10)
    renamable $rbp = MOV64rm renamable $r14, 1, $noreg, 16, $noreg :: (load (s64) from %ir.112)
    renamable $r13 = MOVSX64rm32 renamable $r14, 1, $noreg, 24, $noreg :: (load (s32) from %ir.sunkaddr11)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r8 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $rbx
    $rsi = COPY renamable $r12
    $rdx = COPY renamable $rbp
    $ecx = COPY renamable $r13d
    CALL64m renamable $rbx, 8, renamable $r13, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.121)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.16, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $rbx
    $rdx = COPY renamable $r12
    $rcx = COPY renamable $rbp
    $r8d = COPY renamable $r13d
    $r9 = COPY killed renamable $rbx
    renamable $r10 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    PUSH64r killed renamable $r10, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r13, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r12, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = MOV64rm renamable $r14, 1, $noreg, 16, $noreg :: (load (s64) from %ir.112)
    renamable $r12 = MOVSX64rm32 renamable $r14, 1, $noreg, 24, $noreg :: (load (s32) from %ir.sunkaddr11, align 8)
    renamable $r13 = MOV64rm renamable $r14, 1, $noreg, 0, $noreg :: (load (s64) from %ir.result.i.i1510)
    renamable $r14 = MOV64rm killed renamable $r14, 1, $noreg, 8, $noreg :: (load (s64) from %ir.sunkaddr10)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r13
    $rsi = COPY renamable $r14
    $rdx = COPY renamable $rbx
    $ecx = COPY renamable $r12d
    renamable $rbp = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $r8 = COPY renamable $rbp
    CALL64m renamable $r13, 8, renamable $r12, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.140)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.17, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r13
    $rdx = COPY renamable $r14
    $rcx = COPY renamable $rbx
    $r8d = COPY renamable $r12d
    $r9 = COPY killed renamable $r13
    PUSH64r renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r12, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r14, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm %stack.27, 1, $noreg, 0, $noreg :: (load (s64) from %stack.27)
    renamable $rbx = MOV64rm renamable $rax, 1, $noreg, 16, $noreg :: (load (s64) from %ir.106)
    renamable $r14 = MOVSX64rm32 renamable $rax, 1, $noreg, 24, $noreg :: (load (s32) from %ir.sunkaddr12, align 8)
    renamable $r12 = MOV64rm renamable $rax, 1, $noreg, 0, $noreg :: (load (s64) from %ir.result.i.i1732)
    renamable $r13 = MOV64rm killed renamable $rax, 1, $noreg, 8, $noreg :: (load (s64) from %ir.sunkaddr13)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r12
    $rsi = COPY renamable $r13
    $rdx = COPY renamable $rbx
    $ecx = COPY renamable $r14d
    $r8 = COPY renamable $rbp
    CALL64m renamable $r12, 8, renamable $r14, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.160)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.18, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r12
    $rdx = COPY renamable $r13
    $rcx = COPY renamable $rbx
    $r8d = COPY renamable $r14d
    $r9 = COPY killed renamable $r12
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r14, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r13, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r14 = MOV64rm killed renamable $r15, 1, $noreg, 24, $noreg :: (load (s64) from %ir.99)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 24
    renamable $r12 = MOV64rm %stack.29, 1, $noreg, 0, $noreg :: (load (s64) from %stack.29)
    $rsi = COPY renamable $r12
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = COPY $rax
    MOV64mr $rax, 1, $noreg, 16, $noreg, renamable $r14 :: (store (s64) into %ir.166)
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @Pair, $noreg :: (load (s64) from got, align 16)
    MOV64mr renamable $rbx, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.result.i.i3247)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 88
    $rsi = COPY renamable $r12
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r15 = COPY $rax
    MOV64mr $rax, 1, $noreg, 72, $noreg, killed renamable $r14 :: (store (s64) into %ir.168)
    MOV64mr $rax, 1, $noreg, 80, $noreg, killed renamable $rbx :: (store (s64) into %ir.169)
    renamable $r14 = MOV64rm %stack.28, 1, $noreg, 0, $noreg :: (load (s64) from %stack.28)
    renamable $rbx = MOV64rm renamable $r14, 1, $noreg, 24, $noreg :: (load (s64) from %ir.90)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 48
    $rsi = COPY killed renamable $r12
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = COPY $rax
    MOV64mr %stack.33, 1, $noreg, 0, $noreg, $rax :: (store (s64) into %stack.33)
    MOV64mr $rax, 1, $noreg, 40, $noreg, killed renamable $rbx :: (store (s64) into %ir.172)
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @Array, $noreg :: (load (s64) from got, align 16)
    MOV64mr renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.result.i.i3406)
    MOV64mr renamable $rcx, 1, $noreg, 8, $noreg, killed renamable $r14 :: (store (s64) into %ir.175)
    MOV32mi renamable $rcx, 1, $noreg, 24, $noreg, 7 :: (store (s32) into %ir.176)
    MOV32mi killed renamable $rcx, 1, $noreg, 32, $noreg, 0 :: (store (s32) into %ir.178)
    renamable $rax = MOV64rm %stack.27, 1, $noreg, 0, $noreg :: (load (s64) from %stack.27)
    renamable $rbx = MOV64rm renamable $rax, 1, $noreg, 0, $noreg :: (load (s64) from %ir.result.i.i1732)
    renamable $r12 = MOV64rm renamable $rax, 1, $noreg, 8, $noreg :: (load (s64) from %ir.sunkaddr13)
    renamable $r13 = MOV64rm renamable $rax, 1, $noreg, 16, $noreg :: (load (s64) from %ir.106)
    renamable $rbp = MOVSX64rm32 killed renamable $rax, 1, $noreg, 24, $noreg :: (load (s32) from %ir.sunkaddr12)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    $rsi = COPY renamable $r12
    $rdx = COPY renamable $r13
    $ecx = COPY renamable $ebp
    renamable $r14 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $r8 = COPY renamable $r14
    CALL64m renamable $rbx, 8, renamable $rbp, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.193)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.19, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $rbx
    $rdx = COPY renamable $r12
    $rcx = COPY renamable $r13
    $r8d = COPY renamable $ebp
    $r9 = COPY killed renamable $rbx
    PUSH64r killed renamable $r14, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r13, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r12, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm %stack.27, 1, $noreg, 0, $noreg :: (load (s64) from %stack.27)
    renamable $rbx = MOV64rm renamable $rax, 1, $noreg, 16, $noreg :: (load (s64) from %ir.106)
    renamable $r14 = MOV64rm renamable $rax, 1, $noreg, 24, $noreg :: (load (s64) from %ir.sunkaddr12)
    renamable $r13 = COPY killed renamable $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 56
    $rsi = MOV64rm %stack.29, 1, $noreg, 0, $noreg :: (load (s64) from %stack.29)
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r12 = COPY $rax
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @MapIterator2, $noreg :: (load (s64) from got, align 16)
    MOV64mr %stack.5, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.5)
    MOV64mr %stack.5, 1, $noreg, 8, $noreg, renamable $r12 :: (store (s64) into %ir.199)
    MOV32mi %stack.5, 1, $noreg, 24, $noreg, 7 :: (store (s32) into %ir.200, align 8)
    MOV64mr renamable $r12, 1, $noreg, 40, $noreg, renamable $rbx :: (store (s64) into %ir.202)
    MOV64mr renamable $r12, 1, $noreg, 48, $noreg, renamable $r14 :: (store (s64) into %ir.203)
    renamable $rax = COPY renamable $r13
    renamable $r13 = MOV64rm $r13, 1, $noreg, 0, $noreg :: (load (s64) from %ir.result.i.i1732)
    renamable $rbp = MOV64rm killed renamable $rax, 1, $noreg, 8, $noreg :: (load (s64) from %ir.sunkaddr13)
    renamable $r14 = MOVSX64rr32 renamable $r14d, implicit killed $r14
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r13
    $rsi = COPY renamable $rbp
    $rdx = COPY renamable $rbx
    $ecx = COPY renamable $r14d
    renamable $r8 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    CALL64m renamable $r13, 8, renamable $r14, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.218)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.20, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r13
    $rdx = COPY renamable $rbp
    $rcx = COPY renamable $rbx
    $r8d = COPY renamable $r14d
    $r9 = COPY killed renamable $r13
    renamable $r10 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    PUSH64r killed renamable $r10, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r14, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm %stack.20, 1, $noreg, 16, $noreg :: (load (s64) from %stack.20 + 16)
    renamable $rcx = MOV64rm %stack.20, 1, $noreg, 0, $noreg :: (load (s64) from %stack.20)
    renamable $rdx = MOV64rm %stack.20, 1, $noreg, 8, $noreg :: (load (s64) from %stack.20 + 8)
    renamable $rsi = MOV64rm %stack.27, 1, $noreg, 0, $noreg :: (load (s64) from %stack.27)
    renamable $rsi = MOV64rm killed renamable $rsi, 1, $noreg, 32, $noreg :: (load (s64) from %ir.sunkaddr14)
    renamable $rdi = MOV64rm renamable $rcx, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i81.i3469)
    renamable $r8 = MOV64ri 4189192806087951739
    renamable $r8 = IMUL64rm killed renamable $r8, renamable $rcx, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i79.i3467, align 4)
    renamable $r9 = COPY renamable $r8
    renamable $r9 = SHR64ri killed renamable $r9, 32, implicit-def dead $eflags
    renamable $r9 = XOR64rr killed renamable $r9, killed renamable $r8, implicit-def dead $eflags
    renamable $r9 = AND64rm killed renamable $r9, renamable $rcx, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i80.i3468, align 4)
    renamable $edi = MOV32rm killed renamable $rdi, 4, killed renamable $r9, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i103.i3477)
    renamable $r8 = MOV64rm %stack.5, 1, $noreg, 16, $noreg :: (dereferenceable load (s64) from %ir.224)
    MOV64mr renamable $r12, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.result.i.i3446)
    MOV64mr renamable $r12, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64) into %ir.226)
    MOV64mr renamable $r12, 1, $noreg, 16, $noreg, killed renamable $rax :: (store (s64) into %ir.227)
    MOV32mr renamable $r12, 1, $noreg, 24, $noreg, killed renamable $edi :: (store (s32) into %ir.228)
    MOV64mr renamable $r12, 1, $noreg, 32, $noreg, killed renamable $rsi :: (store (s64) into %ir.230)
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @ArrayIterator, $noreg :: (load (s64) from got, align 16)
    MOV64mr renamable $r15, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.result.i123.i)
    renamable $rax = MOV64rm %stack.33, 1, $noreg, 0, $noreg :: (load (s64) from %stack.33)
    MOV64mr renamable $r15, 1, $noreg, 8, $noreg, renamable $rax :: (store (s64) into %ir.232)
    MOV32mi renamable $r15, 1, $noreg, 24, $noreg, 14 :: (store (s32) into %ir.233)
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @MapIterator2, $noreg :: (load (s64) from got, align 16)
    MOV64mr renamable $r15, 1, $noreg, 32, $noreg, killed renamable $rcx :: (store (s64) into %ir.234)
    MOV64mr %stack.29, 1, $noreg, 0, $noreg, renamable $r12 :: (store (s64) into %stack.29)
    MOV64mr renamable $r15, 1, $noreg, 40, $noreg, killed renamable $r12 :: (store (s64) into %ir.235)
    MOV64mr renamable $r15, 1, $noreg, 48, $noreg, killed renamable $r8 :: (store (s64) into %ir.236)
    MOV64mr %stack.34, 1, $noreg, 0, $noreg, renamable $r15 :: (store (s64) into %stack.34)
    MOV32mi killed renamable $r15, 1, $noreg, 56, $noreg, 15 :: (store (s32) into %ir.237)
    renamable $r15 = COPY renamable $rax
    renamable $eax = MOV32rm $rax, 1, $noreg, 32, $noreg :: (load (s32) from %ir.178)
    MOV32mr %stack.27, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %stack.27)
    renamable $rbx = MOV64rm renamable $r15, 1, $noreg, 0, $noreg :: (load (s64) from %ir.result.i.i3406)
    renamable $r14 = MOV64rm renamable $r15, 1, $noreg, 8, $noreg :: (load (s64) from %ir.175)
    renamable $r13 = MOV64rm renamable $r15, 1, $noreg, 16, $noreg :: (load (s64) from %ir.245)
    renamable $rbp = MOVSX64rm32 renamable $r15, 1, $noreg, 24, $noreg :: (load (s32) from %ir.176)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    $rsi = COPY renamable $r14
    $rdx = COPY renamable $r13
    $ecx = COPY renamable $ebp
    renamable $r12 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $r8 = COPY renamable $r12
    CALL64m renamable $rbx, 8, renamable $rbp, 56, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.254)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    $rsi = COPY renamable $r14
    $rdx = COPY renamable $r13
    $ecx = COPY renamable $ebp
    $r8 = COPY killed renamable $rbx
    $r9 = COPY killed renamable $r14
    PUSH64r killed renamable $r12, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r13, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit $r9, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
    ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @nil_typ, $noreg :: (load (s64) from got)
    CMP32mr %stack.27, 1, $noreg, 0, $noreg, killed renamable $eax, implicit-def $eflags :: (load (s32) from %stack.27)
    JCC_1 %bb.10, 12, implicit killed $eflags
  
  bb.9:
    liveins: $rcx
  
    MOV64mi32 %stack.28, 1, $noreg, 0, $noreg, 0 :: (store (s64) into %stack.28)
    MOV64mr %stack.27, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %stack.27)
    MOV64mi32 %stack.30, 1, $noreg, 0, $noreg, 0 :: (store (s64) into %stack.30)
    MOV64mi32 %stack.31, 1, $noreg, 0, $noreg, 0 :: (store (s64) into %stack.31)
    JMP_1 %bb.11
  
  bb.10 (%ir-block.258):
    liveins: $r15
  
    renamable $r12d = MOV32rm renamable $r15, 1, $noreg, 32, $noreg, implicit-def $r12 :: (load (s32) from %ir.sunkaddr15)
    renamable $eax = LEA64_32r renamable $r12, 1, $noreg, 1, $noreg
    MOV32mr renamable $r15, 1, $noreg, 32, $noreg, killed renamable $eax :: (store (s32) into %ir.sunkaddr15)
    renamable $r14 = MOV64rm renamable $r15, 1, $noreg, 0, $noreg :: (load (s64) from %ir.result.i.i3406)
    renamable $rbx = MOV64rm renamable $r15, 1, $noreg, 8, $noreg :: (load (s64) from %ir.sunkaddr16)
    renamable $r13 = MOV64rm renamable $r15, 1, $noreg, 16, $noreg :: (load (s64) from %ir.sunkaddr17)
    renamable $rbp = MOVSX64rm32 killed renamable $r15, 1, $noreg, 24, $noreg :: (load (s32) from %ir.sunkaddr18)
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_parameterization_Ptri32, $noreg :: (load (s64) from got)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.1)
    renamable $rax = MOV64rm renamable $r14, 8, renamable $rbp, 104, $noreg :: (load (s64) from %ir.274)
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @i32_typ, $noreg :: (load (s64) from got)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.2)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r8 = LEA64r %stack.2, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $r14
    $rsi = COPY renamable $rbx
    $rdx = COPY renamable $r13
    $ecx = COPY renamable $ebp
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 40, 0, 40, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r10 = LEA64r %stack.1, 1, $noreg, 0, $noreg
    renamable $rdi = LEA64r %stack.21, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r14
    $rdx = COPY renamable $rbx
    $rcx = COPY renamable $r13
    $r8d = COPY renamable $ebp
    $r9 = COPY killed renamable $r14
    PUSH64r killed renamable $r12, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 32)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r10, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r13, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 40, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm %stack.21, 1, $noreg, 0, $noreg :: (load (s64) from %stack.21, align 16)
    MOV64mr %stack.27, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.27)
    renamable $rax = MOV64rm %stack.21, 1, $noreg, 16, $noreg :: (load (s64) from %stack.21 + 16, align 16)
    MOV64mr %stack.28, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.28)
    renamable $rax = MOV64rm %stack.21, 1, $noreg, 24, $noreg :: (load (s64) from %stack.21 + 24, basealign 16)
    MOV64mr %stack.30, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.30)
    MOV64mi32 %stack.31, 1, $noreg, 0, $noreg, 0 :: (store (s64) into %stack.31)
  
  bb.11.ArrayIterator_next_.exit:
    renamable $r15 = MOV64rm %stack.29, 1, $noreg, 0, $noreg :: (load (s64) from %stack.29)
    renamable $rbx = MOV64rm renamable $r15, 1, $noreg, 0, $noreg :: (load (s64) from %ir.result.i.i3446)
    renamable $r14 = MOV64rm renamable $r15, 1, $noreg, 8, $noreg :: (load (s64) from %ir.sunkaddr19)
    renamable $r13 = MOV64rm renamable $r15, 1, $noreg, 16, $noreg :: (load (s64) from %ir.sunkaddr20)
    renamable $rbp = MOVSX64rm32 renamable $r15, 1, $noreg, 24, $noreg :: (load (s32) from %ir.sunkaddr21)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    $rsi = COPY renamable $r14
    $rdx = COPY renamable $r13
    $ecx = COPY renamable $ebp
    renamable $r12 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $r8 = COPY renamable $r12
    CALL64m renamable $rbx, 8, renamable $rbp, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.292)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.22, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $rbx
    $rdx = COPY renamable $r14
    $rcx = COPY renamable $r13
    $r8d = COPY renamable $ebp
    $r9 = COPY killed renamable $rbx
    PUSH64r killed renamable $r12, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r13, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r14, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rsi = MOV64rm %stack.22, 1, $noreg, 0, $noreg :: (load (s64) from %stack.22, align 16)
    renamable $rbp = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @nil_typ, $noreg :: (load (s64) from got)
    CMP64rr renamable $rsi, renamable $rbp, implicit-def $eflags
    renamable $al = SETCCr 4, implicit killed $eflags
    TEST64rr renamable $rsi, renamable $rsi, implicit-def $eflags
    renamable $cl = SETCCr 4, implicit killed $eflags
    dead renamable $cl = OR8rr killed renamable $cl, killed renamable $al, implicit-def $eflags
    JCC_1 %bb.13, 4, implicit killed $eflags
  
  bb.12:
    liveins: $rbp
  
    renamable $ebx = MOV32r0 implicit-def dead $eflags, implicit-def $rbx
    renamable $r14d = MOV32r0 implicit-def dead $eflags, implicit-def $r14
    renamable $r13d = MOV32r0 implicit-def dead $eflags, implicit-def $r13
    JMP_1 %bb.14
  
  bb.13 (%ir-block.298):
    liveins: $rsi, $r15
  
    renamable $rcx = MOV64rm %stack.22, 1, $noreg, 24, $noreg :: (load (s64) from %stack.22 + 24, basealign 16)
    renamable $rdx = MOV64rm %stack.22, 1, $noreg, 16, $noreg :: (load (s64) from %stack.22 + 16, align 16)
    renamable $rax = MOV64rm renamable $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i45.i)
    renamable $rdi = MOV64ri 3084208142191802847
    renamable $rdi = IMUL64rm killed renamable $rdi, renamable $rsi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i43.i, align 4)
    renamable $r8 = COPY renamable $rdi
    renamable $r8 = SHR64ri killed renamable $r8, 32, implicit-def dead $eflags
    renamable $r8 = XOR64rr killed renamable $r8, killed renamable $rdi, implicit-def dead $eflags
    renamable $r8 = AND64rm killed renamable $r8, renamable $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i44.i, align 4)
    renamable $r8d = MOV32rm killed renamable $rax, 4, killed renamable $r8, 0, $noreg, implicit-def $r8 :: (load (s32) from %ir.offset_ptr.i.i53.i)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.23, 1, $noreg, 0, $noreg
    CALL64m killed renamable $r15, 1, $noreg, 32, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.sunkaddr22)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbp = MOV64rm %stack.23, 1, $noreg, 0, $noreg :: (load (s64) from %stack.23, align 16)
    renamable $rbx = MOV64rm %stack.23, 1, $noreg, 16, $noreg :: (load (s64) from %stack.23 + 16, align 16)
    renamable $r14 = MOV64rm %stack.23, 1, $noreg, 24, $noreg :: (load (s64) from %stack.23 + 24, basealign 16)
    renamable $r13d = MOV32r0 implicit-def dead $eflags, implicit-def $r13
  
  bb.14.MapIterator2_next_.exit:
    successors: %bb.15, %bb.16
    liveins: $rbp, $rbx, $r13, $r14
  
    renamable $rcx = MOV64rm %stack.27, 1, $noreg, 0, $noreg :: (load (s64) from %stack.27)
    CMP64rm renamable $rcx, $rip, 1, $noreg, target-flags(x86-gotpcrel) @nil_typ, $noreg, implicit-def $eflags :: (load (s64) from got)
    renamable $al = SETCCr 4, implicit killed $eflags
    TEST64rr killed renamable $rcx, renamable $rcx, implicit-def $eflags
    renamable $cl = SETCCr 4, implicit killed $eflags
    dead renamable $cl = OR8rr killed renamable $cl, killed renamable $al, implicit-def $eflags
    JCC_1 %bb.16, 5, implicit killed $eflags
    JMP_1 %bb.15
  
  bb.15 (%ir-block.307):
    liveins: $rbp, $rbx, $r13, $r14
  
    CMP64rm renamable $rbp, $rip, 1, $noreg, target-flags(x86-gotpcrel) @nil_typ, $noreg, implicit-def $eflags :: (load (s64) from got)
    renamable $al = SETCCr 5, implicit killed $eflags
    TEST64rr renamable $rbp, renamable $rbp, implicit-def $eflags
    renamable $cl = SETCCr 5, implicit killed $eflags
    TEST8rr killed renamable $al, killed renamable $cl, implicit-def $eflags
    JCC_1 %bb.17, 5, implicit killed $eflags
    JMP_1 %bb.16
  
  bb.16.ZipIterator2_next_.exit.thread:
    JMP_1 %bb.30
  
  bb.17.._crit_edge2.lr.ph:
    liveins: $rbp, $rbx, $r13, $r14
  
    renamable $r15 = MOV64ri 3084208142191802847
    renamable $rax = MOV64rm %stack.34, 1, $noreg, 0, $noreg :: (load (s64) from %stack.34)
    renamable $r12 = MOV64rm killed renamable $rax, 1, $noreg, 24, $noreg :: (load (s64) from %ir.sunkaddr23)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $rsi = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    $rdi = MOV32ri64 80
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @Pair, $noreg :: (load (s64) from got, align 16)
    MOV64mr %stack.5, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.5)
    MOV64mr %stack.5, 1, $noreg, 8, $noreg, renamable $rax :: (store (s64) into %ir.311)
    MOV32mi %stack.5, 1, $noreg, 24, $noreg, 7 :: (store (s32) into %ir.312, align 8)
    MOV64mr %stack.35, 1, $noreg, 0, $noreg, renamable $r12 :: (store (s64) into %stack.35)
    MOV64mr renamable $rax, 1, $noreg, 72, $noreg, killed renamable $r12 :: (store (s64) into %ir.315)
    renamable $rdi = MOV64rm %stack.27, 1, $noreg, 0, $noreg :: (load (s64) from %stack.27)
    renamable $rcx = MOV64rm renamable $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i80.i)
    renamable $rdx = MOV64rm renamable $rdi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i78.i, align 4)
    renamable $rdx = IMUL64rr killed renamable $rdx, renamable $r15, implicit-def dead $eflags
    renamable $rsi = COPY renamable $rdx
    renamable $rsi = SHR64ri killed renamable $rsi, 32, implicit-def dead $eflags
    renamable $rsi = XOR64rr killed renamable $rsi, killed renamable $rdx, implicit-def dead $eflags
    renamable $rsi = AND64rm killed renamable $rsi, renamable $rdi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i79.i, align 4)
    renamable $rdx = MOV64rm %stack.31, 1, $noreg, 0, $noreg :: (load (s64) from %stack.31)
    renamable $edx = OR32rm renamable $edx, killed renamable $rcx, 4, killed renamable $rsi, 0, $noreg, implicit-def dead $eflags, implicit killed $rdx, implicit-def $rdx :: (load (s32) from %ir.offset_ptr.i.i18.i.i)
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rdi :: (store (s64) into %ir.result.i.i3269)
    renamable $rcx = MOV64rm %stack.30, 1, $noreg, 0, $noreg :: (load (s64) from %stack.30)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rcx :: (store (s64) into %ir.319 + 8, align 4)
    renamable $rcx = MOV64rm %stack.28, 1, $noreg, 0, $noreg :: (load (s64) from %stack.28)
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $rcx :: (store (s64) into %ir.319, align 4)
    MOV32mr renamable $rax, 1, $noreg, 24, $noreg, renamable $edx, implicit killed $rdx :: (store (s32) into %ir.319 + 16)
    renamable $rcx = MOV64rm renamable $rbp, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i94.i)
    renamable $rdx = MOV64rm renamable $rbp, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i92.i, align 4)
    renamable $rdx = IMUL64rr killed renamable $rdx, killed renamable $r15, implicit-def dead $eflags
    renamable $rsi = COPY renamable $rdx
    renamable $rsi = SHR64ri killed renamable $rsi, 32, implicit-def dead $eflags
    renamable $rsi = XOR64rr killed renamable $rsi, killed renamable $rdx, implicit-def dead $eflags
    renamable $rsi = AND64rm killed renamable $rsi, renamable $rbp, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i93.i, align 4)
    renamable $r13d = OR32rm renamable $r13d, killed renamable $rcx, 4, killed renamable $rsi, 0, $noreg, implicit-def dead $eflags, implicit killed $r13, implicit-def $r13 :: (load (s32) from %ir.offset_ptr.i.i46.i.i)
    MOV64mr renamable $rax, 1, $noreg, 32, $noreg, killed renamable $rbp :: (store (s64) into %ir.320)
    MOV64mr renamable $rax, 1, $noreg, 48, $noreg, killed renamable $r14 :: (store (s64) into %ir.321 + 8, align 4)
    MOV64mr renamable $rax, 1, $noreg, 40, $noreg, killed renamable $rbx :: (store (s64) into %ir.321, align 4)
    MOV32mr killed renamable $rax, 1, $noreg, 56, $noreg, renamable $r13d, implicit killed $r13 :: (store (s32) into %ir.321 + 16)
    renamable $rbx = MOV64rm %stack.5, 1, $noreg, 8, $noreg :: (dereferenceable load (s64) from %ir.311)
    renamable $r13d = MOV32r0 implicit-def dead $eflags, implicit-def $r13
    renamable $r15 = MOV64rm %stack.33, 1, $noreg, 0, $noreg :: (load (s64) from %stack.33)
  
  bb.18.._crit_edge2:
    liveins: $rbx, $r13, $r15
  
    renamable $esi = MOV32rm renamable $rbx, 1, $noreg, 8, $noreg :: (load (s32) from %ir.326)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @i32_string, $noreg :: (load (s64) from got)
    MOV64mr %stack.27, 1, $noreg, 0, $noreg, renamable $r13 :: (store (s64) into %stack.27)
    $al = COPY renamable $r13b, implicit killed $r13
    CALL64pcrel32 target-flags(x86-plt) @printf, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $xmm0 = MOVSDrm_alt killed renamable $rbx, 1, $noreg, 40, $noreg :: (load (s64) from %ir.332, align 4)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @float_string, $noreg :: (load (s64) from got)
    $al = MOV8ri 1
    CALL64pcrel32 target-flags(x86-plt) @printf, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm %stack.34, 1, $noreg, 0, $noreg :: (load (s64) from %stack.34)
    renamable $rax = MOV64rm killed renamable $rax, 1, $noreg, 16, $noreg :: (load (s64) from %ir.sunkaddr24)
    MOV64mr %stack.30, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.30)
    renamable $eax = MOV32rm renamable $r15, 1, $noreg, 32, $noreg :: (load (s32) from %ir.sunkaddr25)
    MOV32mr %stack.28, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %stack.28)
    renamable $rbx = MOV64rm renamable $r15, 1, $noreg, 0, $noreg :: (load (s64) from %ir.result.i.i3406)
    renamable $r14 = MOV64rm renamable $r15, 1, $noreg, 8, $noreg :: (load (s64) from %ir.sunkaddr26)
    renamable $r13 = MOV64rm renamable $r15, 1, $noreg, 16, $noreg :: (load (s64) from %ir.sunkaddr27)
    renamable $r12 = MOVSX64rm32 renamable $r15, 1, $noreg, 24, $noreg :: (load (s32) from %ir.sunkaddr28)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    $rsi = COPY renamable $r14
    $rdx = COPY renamable $r13
    $ecx = COPY renamable $r12d
    renamable $rbp = COPY killed renamable $r15
    renamable $r15 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $r8 = COPY renamable $r15
    CALL64m renamable $rbx, 8, renamable $r12, 56, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.353)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    $rsi = COPY renamable $r14
    $rdx = COPY renamable $r13
    $ecx = COPY renamable $r12d
    $r8 = COPY killed renamable $rbx
    $r9 = COPY killed renamable $r14
    PUSH64r killed renamable $r15, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r12, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r13, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit $r9, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
    ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    CMP32mr %stack.28, 1, $noreg, 0, $noreg, killed renamable $eax, implicit-def $eflags :: (load (s32) from %stack.28)
    JCC_1 %bb.20, 12, implicit killed $eflags
  
  bb.19:
    renamable $rbp = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @nil_typ, $noreg :: (load (s64) from got)
    MOV64mr %stack.28, 1, $noreg, 0, $noreg, renamable $rbp :: (store (s64) into %stack.28)
    MOV64mi32 %stack.31, 1, $noreg, 0, $noreg, 0 :: (store (s64) into %stack.31)
    MOV64mi32 %stack.32, 1, $noreg, 0, $noreg, 0 :: (store (s64) into %stack.32)
    renamable $rax = MOV64rm %stack.29, 1, $noreg, 0, $noreg :: (load (s64) from %stack.29)
    JMP_1 %bb.21
  
  bb.20 (%ir-block.357):
    liveins: $rbp
  
    renamable $r15d = MOV32rm renamable $rbp, 1, $noreg, 32, $noreg, implicit-def $r15 :: (load (s32) from %ir.sunkaddr29)
    renamable $eax = LEA64_32r renamable $r15, 1, $noreg, 1, $noreg
    MOV32mr renamable $rbp, 1, $noreg, 32, $noreg, killed renamable $eax :: (store (s32) into %ir.sunkaddr29)
    renamable $r14 = MOV64rm renamable $rbp, 1, $noreg, 0, $noreg :: (load (s64) from %ir.result.i.i3406)
    renamable $rbx = MOV64rm renamable $rbp, 1, $noreg, 8, $noreg :: (load (s64) from %ir.sunkaddr30)
    renamable $r12 = MOV64rm renamable $rbp, 1, $noreg, 16, $noreg :: (load (s64) from %ir.sunkaddr31)
    renamable $r13 = MOVSX64rm32 killed renamable $rbp, 1, $noreg, 24, $noreg :: (load (s32) from %ir.sunkaddr32)
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_parameterization_Ptri32, $noreg :: (load (s64) from got)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.1)
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r13, 104, $noreg :: (load (s64) from %ir.373)
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @i32_typ, $noreg :: (load (s64) from got)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.2)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r14
    $rsi = COPY renamable $rbx
    $rdx = COPY renamable $r12
    $ecx = COPY renamable $r13d
    renamable $r8 = LEA64r %stack.2, 1, $noreg, 0, $noreg
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 40, 0, 40, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.24, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r14
    $rdx = COPY renamable $rbx
    $rcx = COPY renamable $r12
    $r8d = COPY renamable $r13d
    $r9 = COPY killed renamable $r14
    PUSH64r killed renamable $r15, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 32)
    CFI_INSTRUCTION adjust_cfa_offset 8
    renamable $r10 = LEA64r %stack.1, 1, $noreg, 0, $noreg
    PUSH64r killed renamable $r10, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r13, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r12, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 40, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm %stack.24, 1, $noreg, 0, $noreg :: (load (s64) from %stack.24, align 16)
    MOV64mr %stack.28, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.28)
    renamable $rax = MOV64rm %stack.24, 1, $noreg, 16, $noreg :: (load (s64) from %stack.24 + 16, align 16)
    MOV64mr %stack.31, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.31)
    renamable $rax = MOV64rm %stack.24, 1, $noreg, 24, $noreg :: (load (s64) from %stack.24 + 24, basealign 16)
    MOV64mr %stack.32, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.32)
    renamable $rax = MOV64rm %stack.29, 1, $noreg, 0, $noreg :: (load (s64) from %stack.29)
    renamable $rbp = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @nil_typ, $noreg :: (load (s64) from got)
  
  bb.21.ArrayIterator_next_.exit3674:
    liveins: $rax, $rbp
  
    renamable $rbx = MOV64rm renamable $rax, 1, $noreg, 0, $noreg :: (load (s64) from %ir.result.i.i3446)
    renamable $r14 = MOV64rm renamable $rax, 1, $noreg, 8, $noreg :: (load (s64) from %ir.sunkaddr33)
    renamable $r12 = MOV64rm renamable $rax, 1, $noreg, 16, $noreg :: (load (s64) from %ir.sunkaddr34)
    renamable $r13 = MOVSX64rm32 killed renamable $rax, 1, $noreg, 24, $noreg :: (load (s32) from %ir.sunkaddr35)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    $rsi = COPY renamable $r14
    $rdx = COPY renamable $r12
    $ecx = COPY renamable $r13d
    renamable $r15 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $r8 = COPY renamable $r15
    CALL64m renamable $rbx, 8, renamable $r13, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.391)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.25, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $rbx
    $rdx = COPY renamable $r14
    $rcx = COPY renamable $r12
    $r8d = COPY renamable $r13d
    $r9 = COPY killed renamable $rbx
    PUSH64r killed renamable $r15, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r13, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r12, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r14, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rsi = MOV64rm %stack.25, 1, $noreg, 0, $noreg :: (load (s64) from %stack.25, align 16)
    CMP64rr renamable $rsi, renamable $rbp, implicit-def $eflags
    renamable $al = SETCCr 4, implicit killed $eflags
    TEST64rr renamable $rsi, renamable $rsi, implicit-def $eflags
    renamable $cl = SETCCr 4, implicit killed $eflags
    dead renamable $cl = OR8rr killed renamable $cl, killed renamable $al, implicit-def $eflags
    JCC_1 %bb.23, 4, implicit killed $eflags
  
  bb.22:
    liveins: $rbp
  
    renamable $rbx = COPY renamable $rbp
    renamable $r13 = MOV64rm %stack.27, 1, $noreg, 0, $noreg :: (load (s64) from %stack.27)
    renamable $r14 = COPY renamable $r13
    renamable $r12 = COPY renamable $r13
    renamable $rax = MOV64rm %stack.28, 1, $noreg, 0, $noreg :: (load (s64) from %stack.28)
    JMP_1 %bb.24
  
  bb.23 (%ir-block.397):
    liveins: $rsi
  
    renamable $rcx = MOV64rm %stack.25, 1, $noreg, 24, $noreg :: (load (s64) from %stack.25 + 24, basealign 16)
    renamable $rdx = MOV64rm %stack.25, 1, $noreg, 16, $noreg :: (load (s64) from %stack.25 + 16, align 16)
    renamable $rax = MOV64rm renamable $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i45.i3714)
    renamable $rdi = MOV64rm renamable $rsi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i43.i3712, align 4)
    renamable $r8 = MOV64ri 3084208142191802847
    renamable $rdi = IMUL64rr killed renamable $rdi, killed renamable $r8, implicit-def dead $eflags
    renamable $r8 = COPY renamable $rdi
    renamable $r8 = SHR64ri killed renamable $r8, 32, implicit-def dead $eflags
    renamable $r8 = XOR64rr killed renamable $r8, killed renamable $rdi, implicit-def dead $eflags
    renamable $r8 = AND64rm killed renamable $r8, renamable $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i44.i3713, align 4)
    renamable $r8d = MOV32rm killed renamable $rax, 4, killed renamable $r8, 0, $noreg, implicit-def $r8 :: (load (s32) from %ir.offset_ptr.i.i53.i3722)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.26, 1, $noreg, 0, $noreg
    renamable $rax = MOV64rm %stack.29, 1, $noreg, 0, $noreg :: (load (s64) from %stack.29)
    CALL64m killed renamable $rax, 1, $noreg, 32, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.sunkaddr36)
    renamable $rbp = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @nil_typ, $noreg :: (load (s64) from got)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = MOV64rm %stack.26, 1, $noreg, 0, $noreg :: (load (s64) from %stack.26, align 16)
    renamable $r14 = MOV64rm %stack.26, 1, $noreg, 16, $noreg :: (load (s64) from %stack.26 + 16, align 16)
    renamable $r12 = MOV64rm %stack.26, 1, $noreg, 24, $noreg :: (load (s64) from %stack.26 + 24, basealign 16)
    renamable $r13 = MOV64rm %stack.27, 1, $noreg, 0, $noreg :: (load (s64) from %stack.27)
    renamable $rax = MOV64rm %stack.28, 1, $noreg, 0, $noreg :: (load (s64) from %stack.28)
  
  bb.24.MapIterator2_next_.exit3731:
    successors: %bb.25(0x7e000000), %bb.28(0x02000000)
    liveins: $rax, $rbp, $rbx, $r12, $r13, $r14
  
    CMP64rr renamable $rax, renamable $rbp, implicit-def $eflags
    renamable $r15 = MOV64rm %stack.33, 1, $noreg, 0, $noreg :: (load (s64) from %stack.33)
    JCC_1 %bb.28, 4, implicit killed $eflags
    JMP_1 %bb.25
  
  bb.25.MapIterator2_next_.exit3731:
    successors: %bb.26(0x7df7df7e), %bb.28(0x02082082)
    liveins: $rax, $rbp, $rbx, $r12, $r13, $r14, $r15
  
    TEST64rr renamable $rax, renamable $rax, implicit-def $eflags
    JCC_1 %bb.28, 4, implicit killed $eflags
    JMP_1 %bb.26
  
  bb.26 (%ir-block.406):
    successors: %bb.27(0x7e000000), %bb.28(0x02000000)
    liveins: $rax, $rbp, $rbx, $r12, $r13, $r14, $r15
  
    CMP64rr renamable $rbx, killed renamable $rbp, implicit-def $eflags
    JCC_1 %bb.28, 4, implicit killed $eflags
    JMP_1 %bb.27
  
  bb.27 (%ir-block.406):
    successors: %bb.29(0x7df7df7e), %bb.28(0x02082082)
    liveins: $rax, $rbx, $r12, $r13, $r14, $r15
  
    TEST64rr renamable $rbx, renamable $rbx, implicit-def $eflags
    JCC_1 %bb.29, 5, implicit killed $eflags
    JMP_1 %bb.28
  
  bb.28.ZipIterator2_next_.exit3359.thread:
    JMP_1 %bb.30
  
  bb.29.ZipIterator2_next_.exit3359:
    liveins: $rax, $rbx, $r12, $r13, $r14, $r15
  
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbp = COPY killed renamable $rax
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $rsi = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    $rdi = MOV32ri64 80
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @Pair, $noreg :: (load (s64) from got, align 16)
    MOV64mr %stack.5, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.5)
    MOV64mr %stack.5, 1, $noreg, 8, $noreg, renamable $rax :: (store (s64) into %ir.sunkaddr37)
    MOV32mi %stack.5, 1, $noreg, 24, $noreg, 7 :: (store (s32) into %ir.sunkaddr38, align 8)
    renamable $rcx = MOV64rm %stack.30, 1, $noreg, 0, $noreg :: (load (s64) from %stack.30)
    MOV64mr renamable $rax, 1, $noreg, 64, $noreg, killed renamable $rcx :: (store (s64) into %ir.410)
    renamable $rcx = MOV64rm %stack.35, 1, $noreg, 0, $noreg :: (load (s64) from %stack.35)
    MOV64mr renamable $rax, 1, $noreg, 72, $noreg, killed renamable $rcx :: (store (s64) into %ir.411)
    renamable $rcx = MOV64rm renamable $rbp, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i80.i3325)
    renamable $rdx = MOV64rm renamable $rbp, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i78.i3326, align 4)
    renamable $rdi = MOV64ri 3084208142191802847
    renamable $rdx = IMUL64rr killed renamable $rdx, renamable $rdi, implicit-def dead $eflags
    renamable $rsi = COPY renamable $rdx
    renamable $rsi = SHR64ri killed renamable $rsi, 32, implicit-def dead $eflags
    renamable $rsi = XOR64rr killed renamable $rsi, killed renamable $rdx, implicit-def dead $eflags
    renamable $rsi = AND64rm killed renamable $rsi, renamable $rbp, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i79.i3327, align 4)
    renamable $edx = COPY renamable $r13d
    renamable $edx = OR32rm killed renamable $edx, killed renamable $rcx, 4, killed renamable $rsi, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.offset_ptr.i.i18.i.i3342)
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rbp :: (store (s64) into %ir.result.i.i3332)
    renamable $rcx = MOV64rm %stack.32, 1, $noreg, 0, $noreg :: (load (s64) from %stack.32)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rcx :: (store (s64) into %ir.415 + 8, align 4)
    renamable $rcx = MOV64rm %stack.31, 1, $noreg, 0, $noreg :: (load (s64) from %stack.31)
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $rcx :: (store (s64) into %ir.415, align 4)
    MOV32mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $edx :: (store (s32) into %ir.415 + 16)
    renamable $rcx = MOV64rm renamable $rbx, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i94.i3331)
    renamable $rdx = MOV64rm renamable $rbx, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i92.i3329, align 4)
    renamable $rdx = IMUL64rr killed renamable $rdx, killed renamable $rdi, implicit-def dead $eflags
    renamable $rsi = COPY renamable $rdx
    renamable $rsi = SHR64ri killed renamable $rsi, 32, implicit-def dead $eflags
    renamable $rsi = XOR64rr killed renamable $rsi, killed renamable $rdx, implicit-def dead $eflags
    renamable $rsi = AND64rm killed renamable $rsi, renamable $rbx, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i93.i3330, align 4)
    renamable $edx = COPY renamable $r13d
    renamable $edx = OR32rm killed renamable $edx, killed renamable $rcx, 4, killed renamable $rsi, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.offset_ptr.i.i46.i.i3354)
    MOV64mr renamable $rax, 1, $noreg, 32, $noreg, killed renamable $rbx :: (store (s64) into %ir.417)
    MOV64mr renamable $rax, 1, $noreg, 48, $noreg, killed renamable $r12 :: (store (s64) into %ir.418 + 8, align 4)
    MOV64mr renamable $rax, 1, $noreg, 40, $noreg, killed renamable $r14 :: (store (s64) into %ir.418, align 4)
    MOV32mr killed renamable $rax, 1, $noreg, 56, $noreg, killed renamable $edx :: (store (s32) into %ir.418 + 16)
    renamable $rbx = MOV64rm %stack.5, 1, $noreg, 8, $noreg :: (dereferenceable load (s64) from %ir.sunkaddr37)
    JMP_1 %bb.18
  
  bb.30.IO_B__Self_print_xPtri8__Self_print_xPtri1__Self_print_xNil__Self_print_xCharacter__Self_print_xPtri64__Self_print_xPtri32__Self_print_xRepresentable__Self_print_xString__Self_print_xPtrf64.exit1040:
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $rbx = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    $rdi = MOV32ri64 4
    $rsi = COPY renamable $rbx
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r14 = COPY $rax
    MOV32mi $rax, 1, $noreg, 0, $noreg, 7 :: (store (s32) into %ir.result.i914)
    renamable $r15 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @Int32, $noreg :: (load (s64) from got, align 16)
    MOV64mr %stack.15, 1, $noreg, 0, $noreg, renamable $r15 :: (store (s64) into %ir.56)
    MOV64mr %stack.15, 1, $noreg, 8, $noreg, $rax :: (store (s64) into %ir.420)
    MOV32mi %stack.15, 1, $noreg, 24, $noreg, 7 :: (store (s32) into %ir.421, align 8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 4
    $rsi = COPY renamable $rbx
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    MOV64mr %stack.5, 1, $noreg, 0, $noreg, killed renamable $r15 :: (store (s64) into %ir.5)
    MOV64mr %stack.5, 1, $noreg, 8, $noreg, renamable $rax :: (store (s64) into %ir.425)
    MOV32mi %stack.5, 1, $noreg, 24, $noreg, 7 :: (store (s32) into %ir.426, align 8)
    renamable $ecx = MOV32rm killed renamable $r14, 1, $noreg, 0, $noreg :: (load (s32) from %ir.424)
    renamable $ecx = ADD32ri killed renamable $ecx, 5, implicit-def dead $eflags
    MOV32mr killed renamable $rax, 1, $noreg, 0, $noreg, killed renamable $ecx :: (store (s32) into %ir.result.i.i1478)
    renamable $rax = MOV64rm %stack.5, 1, $noreg, 8, $noreg :: (dereferenceable load (s64) from %ir.425)
    renamable $xmm0 = CVTSI2SDrm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.432)
    MOVSDmr %stack.27, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %stack.27)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 8
    $rsi = COPY renamable $rbx
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r15 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @Float64, $noreg :: (load (s64) from got, align 16)
    MOV64mr %stack.5, 1, $noreg, 0, $noreg, renamable $r15 :: (store (s64) into %ir.5)
    MOV64mr %stack.5, 1, $noreg, 8, $noreg, renamable $rax :: (store (s64) into %ir.436)
    MOV32mi %stack.5, 1, $noreg, 24, $noreg, 7 :: (store (s32) into %ir.437, align 8)
    renamable $xmm0 = MOVSDrm_alt %stack.27, 1, $noreg, 0, $noreg :: (load (s64) from %stack.27)
    renamable $xmm0 = nofpexcept ADDSDrm killed renamable $xmm0, $rip, 1, $noreg, %const.2, $noreg, implicit $mxcsr :: (load (s64) from constant-pool)
    MOVSDmr killed renamable $rax, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.result.i.i1683)
    renamable $rax = MOV64rm %stack.5, 1, $noreg, 8, $noreg :: (dereferenceable load (s64) from %ir.436)
    renamable $xmm0 = MOVSDrm_alt killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s64) from %ir.441)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r14 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @float_string, $noreg :: (load (s64) from got)
    $rdi = COPY renamable $r14
    $al = MOV8ri 1
    CALL64pcrel32 target-flags(x86-plt) @printf, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 8
    $rsi = COPY killed renamable $rbx
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    MOV64mr %stack.5, 1, $noreg, 0, $noreg, killed renamable $r15 :: (store (s64) into %ir.5)
    MOV64mr %stack.5, 1, $noreg, 8, $noreg, renamable $rax :: (store (s64) into %ir.447)
    MOV32mi %stack.5, 1, $noreg, 24, $noreg, 7 :: (store (s32) into %ir.448, align 8)
    renamable $rcx = MOV64ri 4632374429215621120
    MOV64mr killed renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.result.i.i1715)
    renamable $rax = MOV64rm %stack.5, 1, $noreg, 8, $noreg :: (dereferenceable load (s64) from %ir.447)
    renamable $xmm0 = MOVSDrm_alt killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s64) from %ir.451)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $r14
    $al = MOV8ri 1
    CALL64pcrel32 target-flags(x86-plt) @printf, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $eax = MOV32r0 implicit-def dead $eflags
    RET 0, $eax

...
---
name:            Representable_B_repr_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 64, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            Representable_repr_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 24, size: 8, alignment: 8, isImmutable: true }
  - { id: 1, offset: 16, size: 4, alignment: 16, isImmutable: true }
  - { id: 2, offset: 8, size: 8, alignment: 8, isImmutable: true }
  - { id: 3, size: 8, alignment: 16, isImmutable: true }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.3):
    liveins: $rdi
  
    renamable $rbx = COPY $rdi
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $r14 = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    $rdi = MOV32ri64 7
    $rsi = COPY renamable $r14
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r15 = COPY $rax
    MOV16mi $rax, 1, $noreg, 4, $noreg, 29795 :: (store (s16) into %ir.result.i + 4, align 4)
    MOV32mi $rax, 1, $noreg, 0, $noreg, 1701470799 :: (store (s32) into %ir.result.i)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 16
    $rsi = COPY killed renamable $r14
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @String, $noreg :: (load (s64) from got, align 16)
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $r15 :: (store (s64) into %ir.result.i1)
    renamable $rdx = MOV64ri 30064771078
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64) into %ir.7, align 4)
    MOV64mr renamable $rbx, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64))
    MOV64mr renamable $rbx, 1, $noreg, 8, $noreg, killed renamable $rax :: (store (s64))
    MOV32mi renamable $rbx, 1, $noreg, 24, $noreg, 7 :: (store (s32), align 8)
    $rax = COPY killed renamable $rbx
    RET 0, $rax

...
---
name:            String_B_init_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 192, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            String_B_init_bytesBufferPtri8_lengthPtri32_capacityPtri32
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 200, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            String_B_length_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 208, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            String_B_capacity_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 216, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            String_B_bytes_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 224, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            String_B_append_xPtri8
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 232, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            String_B_extend_strString
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 240, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            String_B__index_xPtri32
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 248, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            String_B__EQ_otherString
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 256, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            String_B_pop_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 264, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            String_B_copy_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 272, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            String_B_c_string_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 280, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            String_B_iterator_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 288, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            String_B_repr_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 296, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            String_init_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
  hasTailCall:     true
fixedStack:
  - { id: 0, offset: 16, size: 8, alignment: 16 }
  - { id: 1, offset: 8, size: 4, alignment: 8 }
  - { id: 2, size: 8, alignment: 16 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.3):
    liveins: $rdi, $rsi
  
    renamable $rbx = COPY $rsi
    renamable $r14 = COPY $rdi
    renamable $rax = MOV64rm $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri 6499063144389013426
    renamable $rcx = IMUL64rm killed renamable $rcx, $rdi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, $rdi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $r15 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $rsi = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    $rdi = MOV32ri64 1
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = MOV64rm renamable $r14, 8, renamable $r15, 0, $noreg :: (load (s64) from %ir.6)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    $rsi = COPY killed renamable $rax
    CALL64m killed renamable $rcx, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.8)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r15, 16, $noreg :: (load (s64) from %ir.12)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    $esi = MOV32ri 1
    CALL64m killed renamable $rax, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.14)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm killed renamable $r14, 8, killed renamable $r15, 8, $noreg :: (load (s64) from %ir.17)
    renamable $rax = MOV64rm killed renamable $rax, 1, $noreg, 8, $noreg :: (load (s64) from %ir.19)
    $rdi = COPY killed renamable $rbx
    $esi = MOV32r0 implicit-def dead $eflags
    TCRETURNri64 killed renamable $rax, 0, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi

...
---
name:            String_init_bytesBufferPtri8_lengthPtri32_capacityPtri32
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
  hasTailCall:     true
fixedStack:
  - { id: 0, offset: 40, size: 4, alignment: 8 }
  - { id: 1, offset: 32, size: 4, alignment: 16 }
  - { id: 2, offset: 24, size: 8, alignment: 8 }
  - { id: 3, offset: 16, size: 8, alignment: 16 }
  - { id: 4, offset: 8, size: 4, alignment: 8 }
  - { id: 5, size: 8, alignment: 16 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.6):
    liveins: $rdi, $rsi
  
    renamable $rbx = COPY $rsi
    renamable $r14 = COPY $rdi
    renamable $ebp = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %fixed-stack.0, align 8)
    renamable $r15d = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %fixed-stack.1, align 16)
    renamable $rsi = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.2)
    renamable $rax = MOV64rm $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri 6499063144389013426
    renamable $rcx = IMUL64rm killed renamable $rcx, $rdi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, $rdi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $r12 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm $rdi, 8, renamable $r12, 0, $noreg :: (load (s64) from %ir.9)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    CALL64m killed renamable $rax, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.11)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r12, 8, $noreg :: (load (s64) from %ir.14)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    $esi = COPY killed renamable $r15d
    CALL64m killed renamable $rax, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.16)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm killed renamable $r14, 8, killed renamable $r12, 16, $noreg :: (load (s64) from %ir.19)
    renamable $rax = MOV64rm killed renamable $rax, 1, $noreg, 8, $noreg :: (load (s64) from %ir.21)
    $rdi = COPY killed renamable $rbx
    $esi = COPY killed renamable $ebp
    TCRETURNri64 killed renamable $rax, 0, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi

...
---
name:            String_length_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    8
  hasTailCall:     true
fixedStack:
  - { id: 0, offset: 16, size: 8, alignment: 16 }
  - { id: 1, offset: 8, size: 4, alignment: 8 }
  - { id: 2, size: 8, alignment: 16 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.3):
    liveins: $rdi, $rsi
  
    renamable $rax = MOV64rm renamable $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri 6499063144389013426
    renamable $rcx = IMUL64rm killed renamable $rcx, renamable $rdi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, renamable $rdi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $rax = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm killed renamable $rdi, 8, killed renamable $rax, 8, $noreg :: (load (s64) from %ir.7)
    $rdi = COPY killed renamable $rsi
    TCRETURNmi64 killed renamable $rax, 1, $noreg, 0, $noreg, 0, csr_64, implicit $rsp, implicit $ssp, implicit $rdi :: (load (s64) from %ir.8)

...
---
name:            String_capacity_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    8
  hasTailCall:     true
fixedStack:
  - { id: 0, offset: 16, size: 8, alignment: 16 }
  - { id: 1, offset: 8, size: 4, alignment: 8 }
  - { id: 2, size: 8, alignment: 16 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.3):
    liveins: $rdi, $rsi
  
    renamable $rax = MOV64rm renamable $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri 6499063144389013426
    renamable $rcx = IMUL64rm killed renamable $rcx, renamable $rdi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, renamable $rdi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $rax = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm killed renamable $rdi, 8, killed renamable $rax, 16, $noreg :: (load (s64) from %ir.7)
    $rdi = COPY killed renamable $rsi
    TCRETURNmi64 killed renamable $rax, 1, $noreg, 0, $noreg, 0, csr_64, implicit $rsp, implicit $ssp, implicit $rdi :: (load (s64) from %ir.8)

...
---
name:            String_bytes_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    8
  hasTailCall:     true
fixedStack:
  - { id: 0, offset: 16, size: 8, alignment: 16 }
  - { id: 1, offset: 8, size: 4, alignment: 8 }
  - { id: 2, size: 8, alignment: 16 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.3):
    liveins: $rdi, $rsi
  
    renamable $rax = MOV64rm renamable $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri 6499063144389013426
    renamable $rcx = IMUL64rm killed renamable $rcx, renamable $rdi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, renamable $rdi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $rax = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm killed renamable $rdi, 8, killed renamable $rax, 0, $noreg :: (load (s64) from %ir.6)
    $rdi = COPY killed renamable $rsi
    TCRETURNmi64 killed renamable $rax, 1, $noreg, 0, $noreg, 0, csr_64, implicit $rsp, implicit $ssp, implicit $rdi :: (load (s64) from %ir.7)

...
---
name:            String_append_xPtri8
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
  - { reg: '$rcx' }
  - { reg: '$r8d' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 32, size: 1, alignment: 16, isImmutable: true }
  - { id: 1, offset: 24, size: 8, alignment: 8, isImmutable: true }
  - { id: 2, offset: 16, size: 4, alignment: 16, isImmutable: true }
  - { id: 3, offset: 8, size: 8, alignment: 8, isImmutable: true }
  - { id: 4, size: 8, alignment: 16, isImmutable: true }
stack:
  - { id: 0, type: spill-slot, size: 8, alignment: 8 }
  - { id: 1, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.4):
    liveins: $rcx, $rdi, $rdx, $rsi, $r8d
  
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, $rcx :: (store (s64) into %stack.1)
    renamable $r15 = COPY $rdx
    renamable $r14 = COPY $rsi
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, $rdi :: (store (s64) into %stack.0)
    renamable $r12 = MOV64ri 6499063144389013426
    renamable $rax = MOV64rm $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64rm $rsi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rcx = IMUL64rr killed renamable $rcx, renamable $r12, implicit-def dead $eflags
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $rbx = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm $rsi, 8, renamable $rbx, 8, $noreg :: (load (s64) from %ir.8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.9)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $ebp = COPY $eax
    renamable $rax = MOV64rm renamable $r14, 8, renamable $rbx, 16, $noreg :: (load (s64) from %ir.13)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.14)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    CMP32rr killed renamable $ebp, killed renamable $eax, implicit-def $eflags
    JCC_1 %bb.4, 12, implicit killed $eflags
    JMP_1 %bb.1
  
  bb.1 (%ir-block.18):
    successors: %bb.2(0x50000000), %bb.4(0x30000000)
    liveins: $rbx, $r12, $r14, $r15
  
    renamable $rax = MOV64rm renamable $r14, 8, renamable $rbx, 16, $noreg :: (load (s64) from %ir.sunkaddr3)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.20)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $eax = KILL $eax, implicit-def $rax
    renamable $esi = LEA64_32r killed renamable $rax, 1, renamable $rax, 0, $noreg
    renamable $rax = MOV64rm renamable $r14, 8, renamable $rbx, 16, $noreg :: (load (s64) from %ir.sunkaddr3)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.26)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm renamable $r14, 8, renamable $rbx, 0, $noreg :: (load (s64) from %ir.sunkaddr5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.29)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r13 = COPY $rax
    renamable $rax = MOV64rm renamable $r14, 8, renamable $rbx, 16, $noreg :: (load (s64) from %ir.sunkaddr3)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.33)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = MOVSX64rr32 killed renamable $eax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $rsi = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = MOV64rm renamable $r14, 8, renamable $rbx, 0, $noreg :: (load (s64) from %ir.sunkaddr5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    $rsi = COPY killed renamable $rax
    CALL64m killed renamable $rcx, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.39)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm renamable $r14, 8, renamable $rbx, 8, $noreg :: (load (s64) from %ir.sunkaddr8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.43)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    TEST32rr killed renamable $eax, renamable $eax, implicit-def $eflags
    JCC_1 %bb.4, 14, implicit killed $eflags
    JMP_1 %bb.2
  
  bb.2.._crit_edge.lr.ph:
    liveins: $rbx, $r12, $r13, $r14, $r15
  
    renamable $ebp = MOV32r0 implicit-def dead $eflags, implicit-def $rbp
  
  bb.3.._crit_edge:
    successors: %bb.3(0x7c000000), %bb.4(0x04000000)
    liveins: $rbp, $rbx, $r12, $r13, $r14, $r15
  
    renamable $rax = MOV64rm renamable $r14, 8, renamable $rbx, 0, $noreg :: (load (s64) from %ir.sunkaddr10)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.48)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $cl = MOV8rm renamable $r13, 1, renamable $rbp, 0, $noreg :: (load (s8) from %ir.scevgep1)
    MOV8mr killed renamable $rax, 1, renamable $rbp, 0, $noreg, killed renamable $cl :: (store (s8) into %ir.scevgep)
    renamable $rax = MOV64rm renamable $r14, 8, renamable $rbx, 8, $noreg :: (load (s64) from %ir.sunkaddr13)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.52)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbp = nuw nsw INC64r killed renamable $rbp, implicit-def dead $eflags
    CMP32rr renamable $ebp, killed renamable $eax, implicit-def $eflags
    JCC_1 %bb.3, 12, implicit killed $eflags
    JMP_1 %bb.4
  
  bb.4.._crit_edge.thread:
    liveins: $rbx, $r12, $r14, $r15
  
    renamable $rax = MOV64rm renamable $r14, 8, renamable $rbx, 0, $noreg :: (load (s64) from %ir.sunkaddr15)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.57)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r13 = COPY $rax
    renamable $rax = MOV64rm renamable $r14, 8, renamable $rbx, 8, $noreg :: (load (s64) from %ir.sunkaddr18)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.61)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOVSX64rr32 killed renamable $eax
    renamable $cl = MOV8rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (load (s8) from %fixed-stack.0, align 16)
    MOV8mr killed renamable $r13, 1, killed renamable $rax, 0, $noreg, killed renamable $cl :: (store (s8) into %ir.65)
    renamable $rax = MOV64rm renamable $r14, 8, renamable $rbx, 8, $noreg :: (load (s64) from %ir.sunkaddr18)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.67)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $eax = KILL $eax, implicit-def $rax
    renamable $esi = LEA64_32r killed renamable $rax, 1, $noreg, 1, $noreg
    renamable $rax = MOV64rm renamable $r14, 8, killed renamable $rbx, 8, $noreg :: (load (s64) from %ir.sunkaddr18)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.73)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm renamable $r14, 1, $noreg, 40, $noreg :: (load (s64) from %ir.sunkaddr21)
    renamable $r12 = IMUL64rm killed renamable $r12, renamable $r14, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.sunkaddr19, align 4)
    renamable $rcx = COPY renamable $r12
    renamable $rcx = SHR64ri killed renamable $rcx, 32, implicit-def dead $eflags
    renamable $rcx = XOR64rr killed renamable $rcx, killed renamable $r12, implicit-def dead $eflags
    renamable $rcx = AND64rm killed renamable $rcx, renamable $r14, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.sunkaddr20, align 4)
    renamable $ecx = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i32)
    renamable $rax = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %stack.0)
    renamable $rdx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %stack.1)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rdx :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $r15 :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $r14 :: (store (s64))
    MOV32mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $ecx :: (store (s32), align 8)
    RET 0, $rax

...
---
name:            String_extend_strString
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
  - { reg: '$rcx' }
  - { reg: '$r8d' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 56, size: 4, alignment: 8, isImmutable: true }
  - { id: 1, offset: 48, size: 8, alignment: 16, isImmutable: true }
  - { id: 2, offset: 40, size: 8, alignment: 8, isImmutable: true }
  - { id: 3, offset: 32, size: 8, alignment: 16, isImmutable: true }
  - { id: 4, offset: 24, size: 8, alignment: 8, isImmutable: true }
  - { id: 5, offset: 16, size: 4, alignment: 16, isImmutable: true }
  - { id: 6, offset: 8, size: 8, alignment: 8, isImmutable: true }
  - { id: 7, size: 8, alignment: 16, isImmutable: true }
stack:
  - { id: 0, size: 1, alignment: 8 }
  - { id: 1, size: 8, alignment: 8 }
  - { id: 2, size: 8, alignment: 8 }
  - { id: 3, type: spill-slot, size: 8, alignment: 8 }
  - { id: 4, type: spill-slot, size: 4, alignment: 4 }
  - { id: 5, type: spill-slot, size: 8, alignment: 8 }
  - { id: 6, type: spill-slot, size: 8, alignment: 8 }
  - { id: 7, type: spill-slot, size: 8, alignment: 8 }
  - { id: 8, type: spill-slot, size: 8, alignment: 8 }
  - { id: 9, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.4):
    successors: %bb.1, %bb.4
    liveins: $rcx, $rdi, $rdx, $rsi, $r8d
  
    MOV64mr %stack.9, 1, $noreg, 0, $noreg, $rcx :: (store (s64) into %stack.9)
    renamable $r15 = COPY $rdx
    renamable $r14 = COPY $rsi
    MOV64mr %stack.8, 1, $noreg, 0, $noreg, $rdi :: (store (s64) into %stack.8)
    renamable $rsi = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.2)
    renamable $rdx = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.1, align 16)
    renamable $r12 = MOV64rm %fixed-stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.3, align 16)
    renamable $r8 = MOV64ri 6499063144389013426
    renamable $rax = MOV64rm renamable $r14, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64rm renamable $r14, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rcx = IMUL64rr killed renamable $rcx, renamable $r8, implicit-def dead $eflags
    renamable $rdi = COPY renamable $rcx
    renamable $rdi = SHR64ri killed renamable $rdi, 32, implicit-def dead $eflags
    renamable $rdi = XOR64rr killed renamable $rdi, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdi = AND64rm killed renamable $rdi, renamable $r14, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $r13 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdi, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm renamable $r12, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i67)
    renamable $rcx = MOV64rm renamable $r12, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i65, align 4)
    renamable $rcx = IMUL64rr killed renamable $rcx, killed renamable $r8, implicit-def dead $eflags
    renamable $rdi = COPY renamable $rcx
    renamable $rdi = SHR64ri killed renamable $rdi, 32, implicit-def dead $eflags
    renamable $rdi = XOR64rr killed renamable $rdi, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdi = AND64rm killed renamable $rdi, renamable $r12, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i66, align 4)
    renamable $rbx = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdi, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i75)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbp = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $r12
    $ecx = COPY renamable $ebx
    $r8 = COPY renamable $rbp
    CALL64m renamable $r12, 8, renamable $rbx, 56, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.14)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r12
    renamable $rsi = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.2)
    renamable $rdx = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.1, align 16)
    $ecx = COPY renamable $ebx
    $r8 = COPY renamable $r12
    $r9 = COPY renamable $rsi
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r renamable $rdx, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    renamable $rbp = COPY renamable $rdx
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit $r9, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.18)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r12
    renamable $rsi = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.2)
    $rdx = COPY renamable $rbp
    $ecx = COPY renamable $ebx
    renamable $r8 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    CALL64m renamable $r12, 8, renamable $rbx, 40, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.22)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r12
    renamable $rsi = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.2)
    $rdx = COPY renamable $rbp
    $ecx = COPY renamable $ebx
    $r8 = COPY killed renamable $r12
    $r9 = COPY renamable $rsi
    renamable $r10 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    PUSH64r killed renamable $r10, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit $r9, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
    ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $ebp = COPY $eax
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r13, 8, $noreg :: (load (s64) from %ir.29)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.30)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r12d = COPY $eax
    renamable $r12d = ADD32rr killed renamable $r12d, renamable $ebp, implicit-def dead $eflags
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r13, 16, $noreg :: (load (s64) from %ir.35)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.36)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    MOV32mr %stack.3, 1, $noreg, 0, $noreg, $eax :: (store (s32) into %stack.3)
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r13, 8, $noreg :: (load (s64) from %ir.29)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.42)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $ebx = COPY $eax
    CMP32rm killed renamable $r12d, %stack.3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %stack.3)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, renamable $r13 :: (store (s64) into %stack.3)
    JCC_1 %bb.4, 13, implicit killed $eflags
    JMP_1 %bb.1
  
  bb.1 (%ir-block.45):
    successors: %bb.2, %bb.10
    liveins: $ebp, $ebx, $r13, $r14, $r15
  
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r13, 8, $noreg :: (load (s64) from %ir.sunkaddr12)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.47)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $eax = ADD32rr killed renamable $eax, renamable $ebp, implicit-def dead $eflags
    CMP32rr renamable $ebx, killed renamable $eax, implicit-def $eflags
    JCC_1 %bb.10, 13, implicit killed $eflags
    JMP_1 %bb.2
  
  bb.2.._crit_edge.lr.ph:
    liveins: $ebp, $ebx, $r14, $r15
  
    renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.18)
    MOV64mr %stack.5, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.5)
    renamable $eax = MOV32rr renamable $ebx, implicit-def $rax
    MOV64mr %stack.6, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.6)
    renamable $rbx = MOVSX64rr32 killed renamable $ebx
    renamable $r12d = MOV32r0 implicit-def dead $eflags, implicit-def $r12
  
  bb.3.._crit_edge:
    successors: %bb.3(0x7c000000), %bb.10(0x04000000)
    liveins: $ebp, $rbx, $r12, $r14, $r15
  
    renamable $r13 = MOVSX64rr32 renamable $r12d
    renamable $rax = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %stack.3)
    renamable $rax = MOV64rm renamable $r14, 8, killed renamable $rax, 0, $noreg :: (load (s64) from %ir.sunkaddr14)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.58)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = ADD64rr killed renamable $rax, renamable $rbx, implicit-def dead $eflags
    renamable $rcx = MOV64rm %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %stack.5)
    renamable $cl = MOV8rm killed renamable $rcx, 1, killed renamable $r13, 0, $noreg :: (load (s8) from %ir.57)
    renamable $r13 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %stack.3)
    MOV8mr renamable $r12, 1, killed renamable $rax, 0, $noreg, killed renamable $cl :: (store (s8) into %ir.scevgep3)
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r13, 8, $noreg :: (load (s64) from %ir.sunkaddr17)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.62)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $eax = ADD32rr killed renamable $eax, renamable $ebp, implicit-def dead $eflags
    renamable $r12 = nuw nsw INC64r killed renamable $r12, implicit-def dead $eflags
    renamable $rcx = MOV64rm %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %stack.6)
    renamable $ecx = LEA64_32r killed renamable $rcx, 1, renamable $r12, 0, $noreg
    CMP32rr killed renamable $ecx, killed renamable $eax, implicit-def $eflags
    JCC_1 %bb.3, 12, implicit killed $eflags
    JMP_1 %bb.10
  
  bb.4 (%ir-block.68):
    successors: %bb.5(0x50000000), %bb.10(0x30000000)
    liveins: $ebp, $ebx, $r13, $r14, $r15
  
    renamable $ebx = ADD32rr killed renamable $ebx, renamable $ebp, implicit-def dead $eflags
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r13, 16, $noreg :: (load (s64) from %ir.sunkaddr20)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    $esi = COPY killed renamable $ebx
    CALL64m killed renamable $rax, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.72)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r13, 0, $noreg :: (load (s64) from %ir.sunkaddr22)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.75)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.40)
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r13, 16, $noreg :: (load (s64) from %ir.sunkaddr20)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.80)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = MOVSX64rr32 killed renamable $eax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $rsi = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = MOV64rm renamable $r14, 8, renamable $r13, 0, $noreg :: (load (s64) from %ir.sunkaddr22)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    $rsi = COPY killed renamable $rax
    CALL64m killed renamable $rcx, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.86)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r13, 8, $noreg :: (load (s64) from %ir.sunkaddr25)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.90)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $eax = ADD32rr killed renamable $eax, renamable $ebp, implicit-def dead $eflags
    TEST32rr killed renamable $eax, renamable $eax, implicit-def $eflags
    JCC_1 %bb.10, 14, implicit killed $eflags
    JMP_1 %bb.5
  
  bb.5..lr.ph:
    liveins: $ebp, $r13, $r14, $r15
  
    renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.18)
    MOV64mr %stack.6, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.6)
    renamable $r12d = MOV32r0 implicit-def dead $eflags, implicit-def $r12
    renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.40)
    MOV64mr %stack.7, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.7)
    MOV64mi32 %stack.5, 1, $noreg, 0, $noreg, 0 :: (store (s64) into %stack.5)
    MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $ebp :: (store (s32) into %stack.4)
  
  bb.6 (%ir-block.98):
    successors: %bb.7, %bb.8
    liveins: $r12, $r13, $r14, $r15
  
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r13, 8, $noreg :: (load (s64) from %ir.sunkaddr28)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.99)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $ebx = COPY $eax
    renamable $rbp = COPY renamable $r14
    renamable $rax = MOV64rm killed renamable $r14, 8, killed renamable $r13, 0, $noreg :: (load (s64) from %ir.sunkaddr30)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r13 = COPY renamable $r15
    $rdi = COPY killed renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.104)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    CMP32rr renamable $r12d, killed renamable $ebx, implicit-def $eflags
    JCC_1 %bb.8, 13, implicit killed $eflags
    JMP_1 %bb.7
  
  bb.7 (%ir-block.107):
    liveins: $rax, $rbp, $r12, $r13
  
    renamable $rcx = MOV64rm %stack.7, 1, $noreg, 0, $noreg :: (load (s64) from %stack.7)
    renamable $cl = MOV8rm killed renamable $rcx, 1, renamable $r12, 0, $noreg :: (load (s8) from %ir.scevgep10)
    MOV8mr killed renamable $rax, 1, renamable $r12, 0, $noreg, killed renamable $cl :: (store (s8) into %ir.scevgep9)
    JMP_1 %bb.9
  
  bb.8 (%ir-block.109):
    liveins: $rax, $rbp, $r12, $r13
  
    renamable $rdx = MOV64rm %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %stack.5)
    renamable $rdx = MOVSX64rr32 renamable $edx, implicit killed $rdx
    renamable $rcx = MOV64rm %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %stack.6)
    renamable $cl = MOV8rm killed renamable $rcx, 1, renamable $rdx, 0, $noreg :: (load (s8) from %ir.111)
    MOV8mr killed renamable $rax, 1, renamable $r12, 0, $noreg, killed renamable $cl :: (store (s8) into %ir.scevgep8)
    renamable $edx = INC32r renamable $edx, implicit-def dead $eflags, implicit killed $rdx, implicit-def $rdx
    MOV64mr %stack.5, 1, $noreg, 0, $noreg, killed renamable $rdx :: (store (s64) into %stack.5)
  
  bb.9.._crit_edge2:
    successors: %bb.6(0x7c000000), %bb.10(0x04000000)
    liveins: $rbp, $r12, $r13
  
    renamable $r14 = COPY renamable $rbp
    renamable $rcx = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %stack.3)
    renamable $rax = MOV64rm $rbp, 8, renamable $rcx, 8, $noreg :: (load (s64) from %ir.sunkaddr33)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r15 = COPY killed renamable $r13
    renamable $r13 = COPY killed renamable $rcx
    $rdi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.114)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $ebp = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %stack.4)
    renamable $eax = ADD32rr killed renamable $eax, renamable $ebp, implicit-def dead $eflags
    renamable $r12 = nuw nsw INC64r killed renamable $r12, implicit-def dead $eflags
    CMP32rr renamable $r12d, killed renamable $eax, implicit-def $eflags
    JCC_1 %bb.6, 12, implicit killed $eflags
    JMP_1 %bb.10
  
  bb.10.._crit_edge.thread:
    liveins: $ebp, $r13, $r14, $r15
  
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r13, 8, $noreg :: (load (s64) from %ir.sunkaddr36)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.120)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $ebp = ADD32rr killed renamable $ebp, killed renamable $eax, implicit-def dead $eflags
    renamable $rax = MOV64rm renamable $r14, 8, killed renamable $r13, 8, $noreg :: (load (s64) from %ir.sunkaddr36)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    $esi = COPY killed renamable $ebp
    CALL64m killed renamable $rax, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.126)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm renamable $r14, 1, $noreg, 40, $noreg :: (load (s64) from %ir.sunkaddr39)
    renamable $rdx = MOV64ri 6499063144389013426
    renamable $rdx = IMUL64rm killed renamable $rdx, renamable $r14, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.sunkaddr37, align 4)
    renamable $rcx = COPY renamable $rdx
    renamable $rcx = SHR64ri killed renamable $rcx, 32, implicit-def dead $eflags
    renamable $rcx = XOR64rr killed renamable $rcx, killed renamable $rdx, implicit-def dead $eflags
    renamable $rcx = AND64rm killed renamable $rcx, renamable $r14, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.sunkaddr38, align 4)
    renamable $ecx = MOV32rm killed renamable $rax, 4, killed renamable $rcx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i89)
    renamable $rax = MOV64rm %stack.8, 1, $noreg, 0, $noreg :: (load (s64) from %stack.8)
    renamable $rdx = MOV64rm %stack.9, 1, $noreg, 0, $noreg :: (load (s64) from %stack.9)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rdx :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $r15 :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $r14 :: (store (s64))
    MOV32mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $ecx :: (store (s32), align 8)
    RET 0, $rax

...
---
name:            String__index_xPtri32
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 24, size: 4, alignment: 8, isImmutable: true }
  - { id: 1, offset: 16, size: 8, alignment: 16, isImmutable: true }
  - { id: 2, offset: 8, size: 4, alignment: 8, isImmutable: true }
  - { id: 3, size: 8, alignment: 16, isImmutable: true }
stack:
  - { id: 0, type: spill-slot, size: 8, alignment: 8 }
  - { id: 1, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.4):
    successors: %bb.1, %bb.2
    liveins: $rdi, $rsi
  
    renamable $r15 = COPY $rsi
    renamable $rbp = COPY $rdi
    renamable $r14d = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %fixed-stack.0, align 8)
    renamable $rax = MOV64rm $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri 6499063144389013426
    renamable $rcx = IMUL64rm killed renamable $rcx, $rdi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, $rdi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $r12 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm $rdi, 8, renamable $r12, 8, $noreg :: (load (s64) from %ir.8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY $rsi
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.9)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $eax = DEC32r killed renamable $eax, implicit-def dead $eflags
    CMP32rr renamable $r14d, killed renamable $eax, implicit-def $eflags
    JCC_1 %bb.2, 14, implicit killed $eflags
    JMP_1 %bb.1
  
  bb.1 (%ir-block.14):
    liveins: $rbp, $r12, $r15
  
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $r12 :: (store (s64) into %stack.1)
    renamable $r12 = MOV64rm renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_coroutine, $noreg :: (dereferenceable load (s64) from @current_coroutine)
    renamable $r12 = ADD64ri32 killed renamable $r12, 8, implicit-def dead $eflags
    renamable $r13 = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @into_caller_buf, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $r15 :: (store (s64) into %stack.0)
    CALL64pcrel32 target-flags(x86-plt) @context_switch, csr_64_noneregs, implicit $rsp, implicit $ssp, implicit $r12, implicit $r13, implicit-def $rsp, implicit-def $ssp
    renamable $r12 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %stack.1)
    renamable $r15 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %stack.0)
    renamable $r14d = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %fixed-stack.0, align 8)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  
  bb.2.._crit_edge:
    successors: %bb.3(0x50000000), %bb.4(0x30000000)
    liveins: $rbp, $r12, $r15, $r14d
  
    TEST32rr renamable $r14d, renamable $r14d, implicit-def $eflags
    JCC_1 %bb.4, 8, implicit killed $eflags
    JMP_1 %bb.3
  
  bb.3 (%ir-block.17):
    liveins: $rbp, $r12, $r15, $r14d
  
    renamable $rax = MOV64rm killed renamable $rbp, 8, killed renamable $r12, 0, $noreg :: (load (s64) from %ir.sunkaddr1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.18)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $ecx = MOV32rr killed renamable $r14d, implicit-def $rcx
    renamable $rcx = ADD64rr killed renamable $rcx, killed renamable $rax, implicit-def dead $eflags
    JMP_1 %bb.7
  
  bb.4 (%ir-block.23):
    successors: %bb.5(0x30000000), %bb.6(0x50000000)
    liveins: $rbp, $r12, $r15, $r14d
  
    renamable $rax = MOV64rm renamable $rbp, 8, renamable $r12, 8, $noreg :: (load (s64) from %ir.sunkaddr4)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.24)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    dead renamable $eax = ADD32rr killed renamable $eax, renamable $r14d, implicit-def $eflags
    JCC_1 %bb.6, 9, implicit killed $eflags
    JMP_1 %bb.5
  
  bb.5 (%ir-block.29):
    liveins: $rbp, $r12, $r15
  
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $r12 :: (store (s64) into %stack.1)
    renamable $r12 = MOV64rm renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_coroutine, $noreg :: (dereferenceable load (s64) from @current_coroutine)
    renamable $r12 = ADD64ri32 killed renamable $r12, 8, implicit-def dead $eflags
    renamable $r13 = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @into_caller_buf, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $r15 :: (store (s64) into %stack.0)
    CALL64pcrel32 target-flags(x86-plt) @context_switch, csr_64_noneregs, implicit $rsp, implicit $ssp, implicit $r12, implicit $r13, implicit-def $rsp, implicit-def $ssp
    renamable $r12 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %stack.1)
    renamable $r15 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %stack.0)
    renamable $r14d = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %fixed-stack.0, align 8)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  
  bb.6.._crit_edge1:
    liveins: $rbp, $r12, $r15, $r14d
  
    renamable $rax = MOV64rm renamable $rbp, 8, renamable $r12, 0, $noreg :: (load (s64) from %ir.sunkaddr6)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.31)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = COPY $rax
    renamable $rax = MOV64rm killed renamable $rbp, 8, killed renamable $r12, 8, $noreg :: (load (s64) from %ir.sunkaddr9)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.35)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $eax = ADD32rr killed renamable $eax, killed renamable $r14d, implicit-def dead $eflags
    renamable $rcx = MOVSX64rr32 killed renamable $eax
    renamable $rcx = ADD64rr killed renamable $rcx, killed renamable $rbx, implicit-def dead $eflags
  
  bb.7 (%ir-block.41):
    liveins: $rcx
  
    renamable $al = MOV8rm killed renamable $rcx, 1, $noreg, 0, $noreg :: (load (s8) from %ir..reg2mem6.0.in)
    RET 0, $al

...
---
name:            String__EQ_otherString
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 48, size: 4, alignment: 16, isImmutable: true }
  - { id: 1, offset: 40, size: 8, alignment: 8, isImmutable: true }
  - { id: 2, offset: 32, size: 8, alignment: 16, isImmutable: true }
  - { id: 3, offset: 24, size: 8, alignment: 8, isImmutable: true }
  - { id: 4, offset: 16, size: 8, alignment: 16, isImmutable: true }
  - { id: 5, offset: 8, size: 4, alignment: 8, isImmutable: true }
  - { id: 6, size: 8, alignment: 16, isImmutable: true }
stack:
  - { id: 0, size: 1, alignment: 8 }
  - { id: 1, type: spill-slot, size: 8, alignment: 8 }
  - { id: 2, type: spill-slot, size: 8, alignment: 8 }
  - { id: 3, type: spill-slot, size: 8, alignment: 8 }
  - { id: 4, type: spill-slot, size: 8, alignment: 8 }
  - { id: 5, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.4):
    liveins: $rdi, $rsi
  
    renamable $r12 = COPY $rsi
    renamable $r14 = COPY $rdi
    renamable $r15 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.1)
    renamable $rbp = MOV64rm %fixed-stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.3)
    renamable $rax = MOV64rm $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri 6499063144389013426
    renamable $rdx = MOV64rm $rdi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdx = IMUL64rr killed renamable $rdx, renamable $rcx, implicit-def dead $eflags
    renamable $rsi = COPY renamable $rdx
    renamable $rsi = SHR64ri killed renamable $rsi, 32, implicit-def dead $eflags
    renamable $rsi = XOR64rr killed renamable $rsi, killed renamable $rdx, implicit-def dead $eflags
    renamable $rsi = AND64rm killed renamable $rsi, $rdi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $rsi = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rsi, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm renamable $rbp, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i24)
    renamable $rcx = IMUL64rm killed renamable $rcx, renamable $rbp, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i22, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, renamable $rbp, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i23, align 4)
    renamable $rbx = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i32)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, renamable $rsi :: (store (s64) into %stack.2)
    renamable $rax = MOV64rm $rdi, 8, killed renamable $rsi, 8, $noreg :: (load (s64) from %ir.9)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r12
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.10)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    MOV32mr %stack.1, 1, $noreg, 0, $noreg, $eax :: (store (s32) into %stack.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r13 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $rbp
    renamable $rsi = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.2, align 16)
    $rdx = COPY renamable $r15
    $ecx = COPY renamable $ebx
    $r8 = COPY renamable $r13
    CALL64m renamable $rbp, 8, renamable $rbx, 40, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.21)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbp
    renamable $rsi = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.2, align 16)
    $rdx = COPY renamable $r15
    $ecx = COPY renamable $ebx
    $r8 = COPY killed renamable $rbp
    $r9 = COPY renamable $rsi
    PUSH64r killed renamable $r13, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, renamable $rbx :: (store (s64) into %stack.3)
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r15, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit $r9, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
    ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    CMP32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax, implicit-def $eflags :: (load (s32) from %stack.1)
    JCC_1 %bb.2, 4, implicit killed $eflags
  
  bb.1:
    MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %stack.2)
    JMP_1 %bb.5
  
  bb.2..preheader:
    liveins: $r12, $r14
  
    renamable $ebx = MOV32r0 implicit-def dead $eflags, implicit-def $rbx
    renamable $r15 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %stack.2)
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, renamable $r12 :: (store (s64) into %stack.4)
    MOV64mr %stack.5, 1, $noreg, 0, $noreg, renamable $r14 :: (store (s64) into %stack.5)
  
  bb.3 (%ir-block.26):
    successors: %bb.6(0x04000000), %bb.4(0x7c000000)
    liveins: $rbx, $r12, $r14, $r15
  
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r15, 8, $noreg :: (load (s64) from %ir.sunkaddr3)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r12
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.27)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    CMP32rr renamable $ebx, killed renamable $eax, implicit-def $eflags
    renamable $al = SETCCr 13, implicit $eflags, implicit-def $eax
    MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %stack.2)
    JCC_1 %bb.4, 12, implicit killed $eflags
  
  bb.6:
    JMP_1 %bb.5
  
  bb.4 (%ir-block.30):
    successors: %bb.3(0x7c000000), %bb.5(0x04000000)
    liveins: $rbx, $r12, $r14, $r15
  
    renamable $rax = MOV64rm killed renamable $r14, 8, renamable $r15, 0, $noreg :: (load (s64) from %ir.sunkaddr5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $r12
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.32)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, $rax :: (store (s64) into %stack.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r12 = MOV64rm %fixed-stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.3)
    $rdi = COPY renamable $r12
    renamable $rbp = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.2, align 16)
    $rsi = COPY renamable $rbp
    renamable $r14 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.1)
    $rdx = COPY renamable $r14
    renamable $r13 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %stack.3)
    $ecx = COPY renamable $r13d
    renamable $r8 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    CALL64m renamable $r12, 8, renamable $r13, 56, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.sunkaddr8)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r12
    $rsi = COPY renamable $rbp
    $rdx = COPY renamable $r14
    $ecx = COPY renamable $r13d
    $r8 = COPY killed renamable $r12
    $r9 = COPY killed renamable $rbp
    renamable $r10 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    PUSH64r killed renamable $r10, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r13, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r14, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    renamable $r14 = MOV64rm %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %stack.5)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit $r9, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %stack.1)
    renamable $cl = MOV8rm killed renamable $rcx, 1, renamable $rbx, 0, $noreg :: (load (s8) from %ir.scevgep1)
    renamable $r12 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %stack.4)
    CMP8rm killed renamable $cl, killed renamable $rax, 1, renamable $rbx, 0, $noreg, implicit-def $eflags :: (load (s8) from %ir.scevgep)
    renamable $rbx = LEA64r killed renamable $rbx, 1, $noreg, 1, $noreg
    JCC_1 %bb.3, 4, implicit killed $eflags
    JMP_1 %bb.5
  
  bb.5..thread:
    renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %stack.2)
    $al = KILL renamable $al, implicit killed $eax
    RET 0, $al

...
---
name:            String_pop_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 16, size: 8, alignment: 16, isImmutable: true }
  - { id: 1, offset: 8, size: 4, alignment: 8, isImmutable: true }
  - { id: 2, size: 8, alignment: 16, isImmutable: true }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.3):
    successors: %bb.1(0x30000000), %bb.2(0x50000000)
    liveins: $rdi, $rsi
  
    renamable $rbx = COPY $rsi
    renamable $r14 = COPY $rdi
    renamable $rax = MOV64rm $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri 6499063144389013426
    renamable $rcx = IMUL64rm killed renamable $rcx, $rdi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, $rdi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $r12 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm $rdi, 8, renamable $r12, 8, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY $rsi
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.8)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    TEST32rr killed renamable $eax, renamable $eax, implicit-def $eflags
    JCC_1 %bb.2, 5, implicit killed $eflags
  
  bb.1:
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @nil_typ, $noreg :: (load (s64) from got)
    renamable $dl = IMPLICIT_DEF
    JMP_1 %bb.3
  
  bb.2 (%ir-block.12):
    liveins: $rbx, $r12, $r14
  
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r12, 8, $noreg :: (load (s64) from %ir.sunkaddr2)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.14)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $eax = KILL $eax, implicit-def $rax
    renamable $esi = LEA64_32r killed renamable $rax, 1, $noreg, -1, $noreg
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r12, 8, $noreg :: (load (s64) from %ir.sunkaddr2)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    CALL64m killed renamable $rax, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.20)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r12, 0, $noreg :: (load (s64) from %ir.sunkaddr4)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.23)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r15 = COPY $rax
    renamable $rax = MOV64rm killed renamable $r14, 8, killed renamable $r12, 8, $noreg :: (load (s64) from %ir.sunkaddr2)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $rbx
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.27)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOVSX64rr32 killed renamable $eax
    renamable $dl = MOV8rm killed renamable $r15, 1, killed renamable $rax, 0, $noreg :: (load (s8) from %ir.31)
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @i8_typ, $noreg :: (load (s64) from got)
  
  bb.3 (%ir-block.33):
    liveins: $dl, $rax
  
    RET 0, $rax, $dl

...
---
name:            String_copy_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 24, size: 8, alignment: 8, isImmutable: true }
  - { id: 1, offset: 16, size: 4, alignment: 16, isImmutable: true }
  - { id: 2, offset: 8, size: 8, alignment: 8, isImmutable: true }
  - { id: 3, size: 8, alignment: 16, isImmutable: true }
stack:
  - { id: 0, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.3):
    successors: %bb.1(0x50000000), %bb.3(0x30000000)
    liveins: $rdi, $rdx, $rsi
  
    renamable $r14 = COPY $rdx
    renamable $r15 = COPY $rsi
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, $rdi :: (store (s64) into %stack.0)
    renamable $rax = MOV64rm $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri 6499063144389013426
    renamable $rcx = IMUL64rm killed renamable $rcx, $rsi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $rbx = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm $rsi, 8, renamable $rbx, 8, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r14
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.8)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = MOVSX64rr32 killed renamable $eax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $rsi = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r12 = COPY $rax
    renamable $rax = MOV64rm renamable $r15, 8, renamable $rbx, 8, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r14
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.13)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    TEST32rr killed renamable $eax, renamable $eax, implicit-def $eflags
    JCC_1 %bb.3, 14, implicit killed $eflags
    JMP_1 %bb.1
  
  bb.1..lr.ph:
    liveins: $rbx, $r12, $r14, $r15
  
    renamable $r13d = MOV32r0 implicit-def dead $eflags, implicit-def $r13
  
  bb.2.._crit_edge:
    successors: %bb.2(0x7c000000), %bb.3(0x04000000)
    liveins: $rbx, $r12, $r13, $r14, $r15
  
    renamable $rax = MOV64rm renamable $r15, 8, renamable $rbx, 0, $noreg :: (load (s64) from %ir.sunkaddr2)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r14
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.18)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $al = MOV8rm killed renamable $rax, 1, renamable $r13, 0, $noreg :: (load (s8) from %ir.scevgep1)
    MOV8mr renamable $r12, 1, renamable $r13, 0, $noreg, killed renamable $al :: (store (s8) into %ir.scevgep)
    renamable $rax = MOV64rm renamable $r15, 8, renamable $rbx, 8, $noreg :: (load (s64) from %ir.sunkaddr5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r14
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.22)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r13 = nuw nsw INC64r killed renamable $r13, implicit-def dead $eflags
    CMP32rr renamable $r13d, killed renamable $eax, implicit-def $eflags
    JCC_1 %bb.2, 12, implicit killed $eflags
    JMP_1 %bb.3
  
  bb.3.._crit_edge._crit_edge:
    liveins: $rbx, $r12, $r14, $r15
  
    renamable $rax = MOV64rm renamable $r15, 8, renamable $rbx, 8, $noreg :: (load (s64) from %ir.sunkaddr8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r14
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax :: (load (s64) from %ir.27)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm renamable $r15, 8, renamable $rbx, 8, $noreg :: (load (s64) from %ir.sunkaddr8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r14
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax :: (load (s64) from %ir.31)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $rsi = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    $rdi = MOV32ri64 16
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r13 = COPY $rax
    renamable $rax = MOV64rm renamable $r15, 8, renamable $rbx, 8, $noreg :: (load (s64) from %ir.sunkaddr8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r14
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.35)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $ebp = COPY $eax
    renamable $rax = MOV64rm killed renamable $r15, 8, killed renamable $rbx, 8, $noreg :: (load (s64) from %ir.sunkaddr8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $r14
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.39)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @String, $noreg :: (load (s64) from got, align 16)
    MOV64mr renamable $r13, 1, $noreg, 0, $noreg, killed renamable $r12 :: (store (s64) into %ir.result.i11)
    MOV32mr renamable $r13, 1, $noreg, 8, $noreg, killed renamable $ebp :: (store (s32) into %ir.45)
    MOV32mr renamable $r13, 1, $noreg, 12, $noreg, killed renamable $eax :: (store (s32) into %ir.47)
    renamable $rax = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %stack.0)
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $r13 :: (store (s64))
    MOV32mi renamable $rax, 1, $noreg, 24, $noreg, 7 :: (store (s32), align 8)
    RET 0, $rax

...
---
name:            String_c_string_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 16, size: 8, alignment: 16, isImmutable: true }
  - { id: 1, offset: 8, size: 4, alignment: 8, isImmutable: true }
  - { id: 2, size: 8, alignment: 16, isImmutable: true }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.3):
    successors: %bb.1(0x50000000), %bb.3(0x30000000)
    liveins: $rdi, $rsi
  
    renamable $rbx = COPY $rsi
    renamable $r14 = COPY $rdi
    renamable $rax = MOV64rm $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri 6499063144389013426
    renamable $rcx = IMUL64rm killed renamable $rcx, $rdi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, $rdi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $r12 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm $rdi, 8, renamable $r12, 8, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY $rsi
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.8)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $eax = INC32r killed renamable $eax, implicit-def dead $eflags
    renamable $rdi = MOVSX64rr32 killed renamable $eax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $rsi = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r15 = COPY $rax
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r12, 8, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.14)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    TEST32rr killed renamable $eax, renamable $eax, implicit-def $eflags
    JCC_1 %bb.3, 14, implicit killed $eflags
    JMP_1 %bb.1
  
  bb.1..lr.ph:
    liveins: $rbx, $r12, $r14, $r15
  
    renamable $r13d = MOV32r0 implicit-def dead $eflags, implicit-def $r13
  
  bb.2.._crit_edge:
    successors: %bb.2(0x7c000000), %bb.3(0x04000000)
    liveins: $rbx, $r12, $r13, $r14, $r15
  
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r12, 0, $noreg :: (load (s64) from %ir.sunkaddr2)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.19)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $al = MOV8rm killed renamable $rax, 1, renamable $r13, 0, $noreg :: (load (s8) from %ir.scevgep1)
    MOV8mr renamable $r15, 1, renamable $r13, 0, $noreg, killed renamable $al :: (store (s8) into %ir.scevgep)
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r12, 8, $noreg :: (load (s64) from %ir.sunkaddr5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.23)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r13 = nuw nsw INC64r killed renamable $r13, implicit-def dead $eflags
    CMP32rr renamable $r13d, killed renamable $eax, implicit-def $eflags
    JCC_1 %bb.2, 12, implicit killed $eflags
    JMP_1 %bb.3
  
  bb.3.._crit_edge._crit_edge:
    liveins: $rbx, $r12, $r14, $r15
  
    renamable $rax = MOV64rm killed renamable $r14, 8, killed renamable $r12, 8, $noreg :: (load (s64) from %ir.sunkaddr8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $rbx
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.28)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOVSX64rr32 killed renamable $eax
    MOV8mi renamable $r15, 1, killed renamable $rax, 0, $noreg, 0 :: (store (s8) into %ir.32)
    $rax = COPY killed renamable $r15
    RET 0, $rax

...
---
name:            String_iterator_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
  - { reg: '$rcx' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 24, size: 8, alignment: 8, isImmutable: true }
  - { id: 1, offset: 16, size: 4, alignment: 16, isImmutable: true }
  - { id: 2, offset: 8, size: 8, alignment: 8, isImmutable: true }
  - { id: 3, size: 8, alignment: 16, isImmutable: true }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.3):
    liveins: $rcx, $rdi, $rdx, $rsi
  
    renamable $rbx = COPY $rcx
    renamable $r14 = COPY $rdx
    renamable $r15 = COPY $rsi
    renamable $r12 = COPY $rdi
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $rsi = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    $rdi = MOV32ri64 40
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @StringIterator, $noreg :: (load (s64) from got, align 16)
    renamable $rdx = MOV64rm renamable $r15, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rsi = MOV64ri 6499063144389013426
    renamable $rsi = IMUL64rm killed renamable $rsi, renamable $r15, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdi = COPY renamable $rsi
    renamable $rdi = SHR64ri killed renamable $rdi, 32, implicit-def dead $eflags
    renamable $rdi = XOR64rr killed renamable $rdi, killed renamable $rsi, implicit-def dead $eflags
    renamable $rdi = AND64rm killed renamable $rdi, renamable $r15, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $edx = MOV32rm killed renamable $rdx, 4, killed renamable $rdi, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i51)
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $r15 :: (store (s64) into %ir.result.i)
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $r14 :: (store (s64) into %ir.7)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rbx :: (store (s64) into %ir.8)
    MOV32mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $edx :: (store (s32) into %ir.9)
    MOV32mi renamable $rax, 1, $noreg, 32, $noreg, 0 :: (store (s32) into %ir.11)
    MOV64mr renamable $r12, 1, $noreg, 8, $noreg, killed renamable $rax :: (store (s64))
    MOV64mr renamable $r12, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64))
    MOV32mi renamable $r12, 1, $noreg, 24, $noreg, 13 :: (store (s32), align 8)
    $rax = COPY killed renamable $r12
    RET 0, $rax

...
---
name:            String_repr_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
  - { reg: '$rcx' }
frameInfo:
  maxAlignment:    8
fixedStack:
  - { id: 0, offset: 24, size: 8, alignment: 8, isImmutable: true }
  - { id: 1, offset: 16, size: 4, alignment: 16, isImmutable: true }
  - { id: 2, offset: 8, size: 8, alignment: 8, isImmutable: true }
  - { id: 3, size: 8, alignment: 16, isImmutable: true }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.3):
    liveins: $rcx, $rdi, $rdx, $rsi
  
    renamable $rax = COPY $rdi
    renamable $rdi = MOV64rm renamable $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $r8 = MOV64ri 6499063144389013426
    renamable $r8 = IMUL64rm killed renamable $r8, renamable $rsi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $r9 = COPY renamable $r8
    renamable $r9 = SHR64ri killed renamable $r9, 32, implicit-def dead $eflags
    renamable $r9 = XOR64rr killed renamable $r9, killed renamable $r8, implicit-def dead $eflags
    renamable $r9 = AND64rm killed renamable $r9, renamable $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $edi = MOV32rm killed renamable $rdi, 4, killed renamable $r9, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rcx :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rsi :: (store (s64))
    MOV32mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $edi :: (store (s32), align 8)
    RET 0, $rax

...
---
name:            StringIterator_B_init_strString
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 88, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            StringIterator_B_next_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 96, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            StringIterator_init_strString
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
  hasTailCall:     true
fixedStack:
  - { id: 0, offset: 48, size: 4, alignment: 16 }
  - { id: 1, offset: 40, size: 8, alignment: 8 }
  - { id: 2, offset: 32, size: 8, alignment: 16 }
  - { id: 3, offset: 24, size: 8, alignment: 8 }
  - { id: 4, offset: 16, size: 8, alignment: 16 }
  - { id: 5, offset: 8, size: 4, alignment: 8 }
  - { id: 6, size: 8, alignment: 16 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.4):
    liveins: $rdi, $rsi
  
    renamable $rbx = COPY $rsi
    renamable $r14 = COPY $rdi
    renamable $rdx = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.2, align 16)
    renamable $rcx = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.1)
    renamable $rsi = MOV64rm %fixed-stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.3)
    renamable $rax = MOV64rm $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rdi = MOV64ri -7260570988945952630
    renamable $rdi = IMUL64rm killed renamable $rdi, renamable $r14, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $r8 = COPY renamable $rdi
    renamable $r8 = SHR64ri killed renamable $r8, 32, implicit-def dead $eflags
    renamable $r8 = XOR64rr killed renamable $r8, killed renamable $rdi, implicit-def dead $eflags
    renamable $r8 = AND64rm killed renamable $r8, renamable $r14, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $r15 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $r8, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm renamable $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i12)
    renamable $rdi = MOV64ri 6499063144389013426
    renamable $rdi = IMUL64rm killed renamable $rdi, renamable $rsi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i10, align 4)
    renamable $r8 = COPY renamable $rdi
    renamable $r8 = SHR64ri killed renamable $r8, 32, implicit-def dead $eflags
    renamable $r8 = XOR64rr killed renamable $r8, killed renamable $rdi, implicit-def dead $eflags
    renamable $r8 = AND64rm killed renamable $r8, renamable $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i11, align 4)
    renamable $r8d = MOV32rm killed renamable $rax, 4, killed renamable $r8, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i20)
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r15, 0, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    CALL64m killed renamable $rax, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.9)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm killed renamable $r14, 8, killed renamable $r15, 8, $noreg :: (load (s64) from %ir.16)
    renamable $rax = MOV64rm killed renamable $rax, 1, $noreg, 8, $noreg :: (load (s64) from %ir.18)
    $rdi = COPY killed renamable $rbx
    $esi = MOV32r0 implicit-def dead $eflags
    TCRETURNri64 killed renamable $rax, 0, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi

...
---
name:            StringIterator_next_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 24, size: 8, alignment: 8, isImmutable: true }
  - { id: 1, offset: 16, size: 4, alignment: 16, isImmutable: true }
  - { id: 2, offset: 8, size: 8, alignment: 8, isImmutable: true }
  - { id: 3, size: 8, alignment: 16, isImmutable: true }
stack:
  - { id: 0, size: 1, alignment: 8 }
  - { id: 1, size: 32, alignment: 8 }
  - { id: 2, size: 8, alignment: 8 }
  - { id: 3, size: 8, alignment: 8 }
  - { id: 4, size: 32, alignment: 8 }
  - { id: 5, size: 32, alignment: 8 }
  - { id: 6, size: 32, alignment: 8 }
  - { id: 7, type: spill-slot, size: 8, alignment: 8 }
  - { id: 8, type: spill-slot, size: 8, alignment: 8 }
  - { id: 9, type: spill-slot, size: 4, alignment: 4 }
  - { id: 10, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.3):
    liveins: $rdi, $rdx, $rsi
  
    renamable $rbx = COPY $rdx
    renamable $r15 = COPY $rsi
    MOV64mr %stack.8, 1, $noreg, 0, $noreg, $rdi :: (store (s64) into %stack.8)
    renamable $rax = MOV64rm $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri -7260570988945952630
    renamable $rcx = IMUL64rm killed renamable $rcx, $rsi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $r14 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm $rsi, 8, renamable $r14, 8, $noreg :: (load (s64) from %ir.8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.9)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    MOV32mr %stack.9, 1, $noreg, 0, $noreg, $eax :: (store (s32) into %stack.9)
    MOV64mr %stack.10, 1, $noreg, 0, $noreg, renamable $r14 :: (store (s64) into %stack.10)
    renamable $rax = MOV64rm renamable $r15, 8, killed renamable $r14, 0, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.4, 1, $noreg, 0, $noreg
    MOV64mr %stack.7, 1, $noreg, 0, $noreg, renamable $rbx :: (store (s64) into %stack.7)
    $rsi = COPY killed renamable $rbx
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.13)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r13 = MOVSX64rm32 %stack.4, 1, $noreg, 24, $noreg :: (load (s32) from %stack.4 + 24, align 8)
    renamable $r12 = MOV64rm %stack.4, 1, $noreg, 16, $noreg :: (load (s64) from %stack.4 + 16)
    renamable $rbx = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %stack.4)
    renamable $r14 = MOV64rm %stack.4, 1, $noreg, 8, $noreg :: (load (s64) from %stack.4 + 8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbp = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $rbx
    $rsi = COPY renamable $r14
    $rdx = COPY renamable $r12
    $ecx = COPY renamable $r13d
    $r8 = COPY renamable $rbp
    CALL64m renamable $rbx, 8, renamable $r13, 40, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.24)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    $rsi = COPY renamable $r14
    $rdx = COPY renamable $r12
    $ecx = COPY renamable $r13d
    $r8 = COPY killed renamable $rbx
    $r9 = COPY killed renamable $r14
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r13, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r12, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit $r9, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
    ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    CMP32mr %stack.9, 1, $noreg, 0, $noreg, killed renamable $eax, implicit-def $eflags :: (load (s32) from %stack.9)
    JCC_1 %bb.2, 12, implicit killed $eflags
  
  bb.1:
    renamable $esi = MOV32r0 implicit-def dead $eflags, implicit-def $rsi
    renamable $r14 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @nil_typ, $noreg :: (load (s64) from got)
    renamable $rcx = IMPLICIT_DEF
    renamable $rdx = IMPLICIT_DEF
    JMP_1 %bb.3
  
  bb.2 (%ir-block.32):
    liveins: $r15
  
    renamable $rbp = MOV64rm %stack.10, 1, $noreg, 0, $noreg :: (load (s64) from %stack.10)
    renamable $rax = MOV64rm renamable $r15, 8, renamable $rbp, 8, $noreg :: (load (s64) from %ir.sunkaddr2)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = MOV64rm %stack.7, 1, $noreg, 0, $noreg :: (load (s64) from %stack.7)
    $rdi = COPY renamable $rbx
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.34)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $eax = KILL $eax, implicit-def $rax
    renamable $esi = LEA64_32r killed renamable $rax, 1, $noreg, 1, $noreg
    renamable $rax = MOV64rm renamable $r15, 8, renamable $rbp, 8, $noreg :: (load (s64) from %ir.sunkaddr2)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    CALL64m killed renamable $rax, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.40)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm renamable $r15, 8, renamable $rbp, 0, $noreg :: (load (s64) from %ir.sunkaddr4)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.5, 1, $noreg, 0, $noreg
    $rsi = COPY killed renamable $rbx
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.43)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = MOVSX64rm32 %stack.5, 1, $noreg, 24, $noreg :: (load (s32) from %stack.5 + 24, align 8)
    renamable $r14 = MOV64rm %stack.5, 1, $noreg, 16, $noreg :: (load (s64) from %stack.5 + 16)
    renamable $r12 = MOV64rm %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %stack.5)
    renamable $r13 = MOV64rm %stack.5, 1, $noreg, 8, $noreg :: (load (s64) from %stack.5 + 8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r12
    $rsi = COPY renamable $r13
    $rdx = COPY renamable $r14
    $ecx = COPY renamable $ebx
    renamable $r8 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    CALL64m renamable $r12, 8, renamable $rbx, 56, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.54)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r12
    $rsi = COPY renamable $r13
    $rdx = COPY renamable $r14
    $ecx = COPY renamable $ebx
    $r8 = COPY killed renamable $r12
    $r9 = COPY killed renamable $r13
    renamable $r10 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    PUSH64r killed renamable $r10, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r14, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit $r9, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax
    ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm renamable $r15, 8, renamable $rbp, 8, $noreg :: (load (s64) from %ir.sunkaddr2)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = MOV64rm %stack.7, 1, $noreg, 0, $noreg :: (load (s64) from %stack.7)
    $rdi = COPY renamable $rbx
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax :: (load (s64) from %ir.59)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $rsi = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    $rdi = MOV32ri64 1
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @Character, $noreg :: (load (s64) from got, align 16)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.29)
    MOV64mr %stack.1, 1, $noreg, 8, $noreg, killed renamable $rax :: (store (s64) into %ir.62)
    MOV32mi %stack.1, 1, $noreg, 24, $noreg, 7 :: (store (s32) into %ir.63, align 8)
    renamable $rax = MOV64rm renamable $r15, 8, renamable $rbp, 0, $noreg :: (load (s64) from %ir.sunkaddr4)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.6, 1, $noreg, 0, $noreg
    $rsi = COPY killed renamable $rbx
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.66)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = MOVSX64rm32 %stack.6, 1, $noreg, 24, $noreg :: (load (s32) from %stack.6 + 24, align 8)
    renamable $r14 = MOV64rm %stack.6, 1, $noreg, 16, $noreg :: (load (s64) from %stack.6 + 16)
    renamable $r12 = MOV64rm %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %stack.6)
    renamable $r13 = MOV64rm %stack.6, 1, $noreg, 8, $noreg :: (load (s64) from %stack.6 + 8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r12
    $rsi = COPY renamable $r13
    $rdx = COPY renamable $r14
    $ecx = COPY renamable $ebx
    renamable $r8 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    CALL64m renamable $r12, 8, renamable $rbx, 56, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.77)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r12
    $rsi = COPY renamable $r13
    $rdx = COPY renamable $r14
    $ecx = COPY renamable $ebx
    $r8 = COPY killed renamable $r12
    $r9 = COPY killed renamable $r13
    renamable $r10 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    PUSH64r killed renamable $r10, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r14, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit $r9, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = COPY $rax
    renamable $rax = MOV64rm killed renamable $r15, 8, killed renamable $rbp, 8, $noreg :: (load (s64) from %ir.sunkaddr2)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV64rm %stack.7, 1, $noreg, 0, $noreg :: (load (s64) from %stack.7)
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.82)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $eax = DEC32r killed renamable $eax, implicit-def dead $eflags
    renamable $rax = MOVSX64rr32 killed renamable $eax
    renamable $r14 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.29)
    renamable $r13 = MOV64rm %stack.1, 1, $noreg, 8, $noreg :: (dereferenceable load (s64) from %ir.62)
    renamable $r15 = MOV64rm %stack.1, 1, $noreg, 16, $noreg :: (dereferenceable load (s64) from %ir.93)
    renamable $r12 = MOVSX64rm32 %stack.1, 1, $noreg, 24, $noreg :: (dereferenceable load (s32) from %ir.63, align 8)
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_parameterization_Ptri8, $noreg :: (load (s64) from got)
    renamable $ebx = MOVZX32rm8 killed renamable $rbx, 1, killed renamable $rax, 0, $noreg, implicit-def $rbx :: (load (s8) from %ir.87)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.30)
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r12, 16, $noreg :: (load (s64) from %ir.102)
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @i8_typ, $noreg :: (load (s64) from got)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.31)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r8 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $r14
    $rsi = COPY renamable $r13
    $rdx = COPY renamable $r15
    $ecx = COPY renamable $r12d
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r10 = LEA64r %stack.2, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $r14
    $rsi = COPY renamable $r13
    $rdx = COPY renamable $r15
    $ecx = COPY renamable $r12d
    $r8 = COPY renamable $r14
    $r9 = COPY killed renamable $r13
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r10, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r12, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r15, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $esi = MOV32rm %stack.1, 1, $noreg, 24, $noreg, implicit-def $rsi :: (dereferenceable load (s32) from %ir.62 + 16, align 8)
    renamable $rcx = MOV64rm %stack.1, 1, $noreg, 8, $noreg :: (dereferenceable load (s64) from %ir.62)
    renamable $rdx = MOV64rm %stack.1, 1, $noreg, 16, $noreg :: (dereferenceable load (s64) from %ir.62 + 8)
  
  bb.3 (%ir-block.106):
    liveins: $rcx, $rdx, $rsi, $r14
  
    renamable $rax = MOV64rm %stack.8, 1, $noreg, 0, $noreg :: (load (s64) from %stack.8)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rcx :: (store (s64), align 16)
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $r14 :: (store (s64), align 16)
    MOV64mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $rdx :: (store (s64) into unknown-address + 8, basealign 16)
    MOV32mr renamable $rax, 1, $noreg, 32, $noreg, renamable $esi, implicit killed $rsi :: (store (s32) into unknown-address + 16, align 16)
    RET 0, $rax

...
---
name:            Character_B_byte_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 80, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            Character_B_init_bytePtri8
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 88, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            Character_byte_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    8
  hasTailCall:     true
fixedStack:
  - { id: 0, offset: 16, size: 8, alignment: 16 }
  - { id: 1, offset: 8, size: 4, alignment: 8 }
  - { id: 2, size: 8, alignment: 16 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.3):
    liveins: $rdi, $rsi
  
    renamable $rax = MOV64rm renamable $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri 6681222582356018452
    renamable $rcx = IMUL64rm killed renamable $rcx, renamable $rdi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, renamable $rdi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $rax = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm killed renamable $rdi, 8, killed renamable $rax, 0, $noreg :: (load (s64) from %ir.6)
    $rdi = COPY killed renamable $rsi
    TCRETURNmi64 killed renamable $rax, 1, $noreg, 0, $noreg, 0, csr_64, implicit $rsp, implicit $ssp, implicit $rdi :: (load (s64) from %ir.7)

...
---
name:            Character_init_bytePtri8
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    8
  hasTailCall:     true
fixedStack:
  - { id: 0, offset: 24, size: 1, alignment: 8 }
  - { id: 1, offset: 16, size: 8, alignment: 16 }
  - { id: 2, offset: 8, size: 4, alignment: 8 }
  - { id: 3, size: 8, alignment: 16 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.4):
    liveins: $rdi, $rsi
  
    renamable $rax = COPY $rsi
    renamable $rcx = MOV64rm renamable $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rdx = MOV64ri 6681222582356018452
    renamable $rdx = IMUL64rm killed renamable $rdx, renamable $rdi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rsi = COPY renamable $rdx
    renamable $rsi = SHR64ri killed renamable $rsi, 32, implicit-def dead $eflags
    renamable $rsi = XOR64rr killed renamable $rsi, killed renamable $rdx, implicit-def dead $eflags
    renamable $rsi = AND64rm killed renamable $rsi, renamable $rdi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $rcx = MOVSX64rm32 killed renamable $rcx, 4, killed renamable $rsi, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rcx = MOV64rm killed renamable $rdi, 8, killed renamable $rcx, 0, $noreg :: (load (s64) from %ir.7)
    renamable $rcx = MOV64rm killed renamable $rcx, 1, $noreg, 8, $noreg :: (load (s64) from %ir.9)
    renamable $esi = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (load (s8) from %fixed-stack.0, align 8)
    $rdi = COPY killed renamable $rax
    TCRETURNri64 killed renamable $rcx, 0, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi

...
---
name:            Character_getter_byte
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    renamable $al = MOV8rm killed renamable $rdi, 1, $noreg, 0, $noreg :: (load (s8) from %ir.0)
    RET 0, $al

...
---
name:            Character_setter_byte
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$esi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $esi, $rdi
  
    MOV8mr killed renamable $rdi, 1, $noreg, 0, $noreg, renamable $sil, implicit killed $esi :: (store (s8) into %ir.0)
    RET 0

...
---
name:            StringIterator_getter_index
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    renamable $eax = MOV32rm killed renamable $rdi, 1, $noreg, 32, $noreg :: (load (s32) from %ir.2)
    RET 0, $eax

...
---
name:            StringIterator_setter_index
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$esi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $esi, $rdi
  
    MOV32mr killed renamable $rdi, 1, $noreg, 32, $noreg, killed renamable $esi :: (store (s32) into %ir.3)
    RET 0

...
---
name:            StringIterator_getter_str
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi, $rsi
  
    renamable $rax = COPY $rdi
    renamable $rcx = MOV64rm renamable $rsi, 1, $noreg, 0, $noreg :: (load (s64) from %ir.0)
    renamable $rdx = MOV64rm renamable $rsi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.4)
    renamable $rdi = MOV64rm renamable $rsi, 1, $noreg, 16, $noreg :: (load (s64) from %ir.7)
    renamable $esi = MOV32rm killed renamable $rsi, 1, $noreg, 24, $noreg :: (load (s32) from %ir.10)
    MOV32mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $esi :: (store (s32), align 8)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rdi :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64))
    RET 0, $rax

...
---
name:            StringIterator_setter_str
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
  - { reg: '$rcx' }
  - { reg: '$r8d' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rcx, $rdi, $rdx, $rsi, $r8d
  
    MOV64mr renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $rsi :: (store (s64) into %ir.0)
    MOV64mr renamable $rdi, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64) into %ir.3)
    MOV64mr renamable $rdi, 1, $noreg, 16, $noreg, killed renamable $rcx :: (store (s64) into %ir.4)
    MOV32mr killed renamable $rdi, 1, $noreg, 24, $noreg, killed renamable $r8d :: (store (s32) into %ir.5)
    RET 0

...
---
name:            String_getter_capacity
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    renamable $eax = MOV32rm killed renamable $rdi, 1, $noreg, 12, $noreg :: (load (s32) from %ir.2)
    RET 0, $eax

...
---
name:            String_setter_capacity
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$esi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $esi, $rdi
  
    MOV32mr killed renamable $rdi, 1, $noreg, 12, $noreg, killed renamable $esi :: (store (s32) into %ir.3)
    RET 0

...
---
name:            String_getter_length
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    renamable $eax = MOV32rm killed renamable $rdi, 1, $noreg, 8, $noreg :: (load (s32) from %ir.2)
    RET 0, $eax

...
---
name:            String_setter_length
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$esi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $esi, $rdi
  
    MOV32mr killed renamable $rdi, 1, $noreg, 8, $noreg, killed renamable $esi :: (store (s32) into %ir.3)
    RET 0

...
---
name:            String_getter_bytes
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 0, $noreg :: (load (s64) from %ir.0)
    RET 0, $rax

...
---
name:            String_setter_bytes
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi, $rsi
  
    MOV64mr killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $rsi :: (store (s64) into %ir.0)
    RET 0

...
---
name:            Exception_B_init_messageString
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 120, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            Exception_B_init_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 128, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            Exception_B_set_info_line_numberPtri32_file_nameString
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 136, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            Exception_B_report_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 144, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            Exception_B_print_message_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 152, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            Exception_init_messageString
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
  hasTailCall:     true
fixedStack:
  - { id: 0, offset: 48, size: 4, alignment: 16 }
  - { id: 1, offset: 40, size: 8, alignment: 8 }
  - { id: 2, offset: 32, size: 8, alignment: 16 }
  - { id: 3, offset: 24, size: 8, alignment: 8 }
  - { id: 4, offset: 16, size: 8, alignment: 16 }
  - { id: 5, offset: 8, size: 4, alignment: 8 }
  - { id: 6, size: 8, alignment: 16 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.4):
    liveins: $rdi, $rsi
  
    renamable $rbx = COPY $rsi
    renamable $r14 = COPY $rdi
    renamable $rdx = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.2, align 16)
    renamable $rcx = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.1)
    renamable $rsi = MOV64rm %fixed-stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.3)
    renamable $rax = MOV64rm $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rdi = MOV64ri 9027164862567808692
    renamable $rdi = IMUL64rm killed renamable $rdi, renamable $r14, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $r8 = COPY renamable $rdi
    renamable $r8 = SHR64ri killed renamable $r8, 32, implicit-def dead $eflags
    renamable $r8 = XOR64rr killed renamable $r8, killed renamable $rdi, implicit-def dead $eflags
    renamable $r8 = AND64rm killed renamable $r8, renamable $r14, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $r13 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $r8, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm renamable $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i12)
    renamable $rdi = MOV64ri 6499063144389013426
    renamable $rdi = IMUL64rm killed renamable $rdi, renamable $rsi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i10, align 4)
    renamable $r8 = COPY renamable $rdi
    renamable $r8 = SHR64ri killed renamable $r8, 32, implicit-def dead $eflags
    renamable $r8 = XOR64rr killed renamable $r8, killed renamable $rdi, implicit-def dead $eflags
    renamable $r8 = AND64rm killed renamable $r8, renamable $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i11, align 4)
    renamable $r8d = MOV32rm killed renamable $rax, 4, killed renamable $r8, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i20)
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r13, 16, $noreg :: (load (s64) from %ir.8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    CALL64m killed renamable $rax, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.10)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm renamable $r14, 8, renamable $r13, 0, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    $esi = MOV32r0 implicit-def dead $eflags
    CALL64m killed renamable $rax, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.18)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $r15 = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    $rdi = MOV32ri64 1
    $rsi = COPY renamable $r15
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r12 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 16
    $rsi = COPY killed renamable $r15
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @String, $noreg :: (load (s64) from got, align 16)
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $r12 :: (store (s64) into %ir.result.i37)
    renamable $rcx = MOV64ri 4294967296
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $rcx :: (store (s64) into %ir.23, align 4)
    renamable $rcx = MOV64rm killed renamable $r14, 8, killed renamable $r13, 8, $noreg :: (load (s64) from %ir.27)
    renamable $rcx = MOV64rm killed renamable $rcx, 1, $noreg, 8, $noreg :: (load (s64) from %ir.29)
    $rdi = COPY killed renamable $rbx
    $rdx = COPY killed renamable $rax
    $r8d = MOV32ri 7
    TCRETURNri64 killed renamable $rcx, 0, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit undef $rcx, implicit $r8d

...
---
name:            Exception_init_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
  hasTailCall:     true
fixedStack:
  - { id: 0, offset: 16, size: 8, alignment: 16 }
  - { id: 1, offset: 8, size: 4, alignment: 8 }
  - { id: 2, size: 8, alignment: 16 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.3):
    liveins: $rdi, $rsi
  
    renamable $rbx = COPY $rsi
    renamable $r14 = COPY $rdi
    renamable $rax = MOV64rm $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri 9027164862567808692
    renamable $rcx = IMUL64rm killed renamable $rcx, $rdi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, $rdi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $rbp = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm $rdi, 8, renamable $rbp, 0, $noreg :: (load (s64) from %ir.6)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY $rsi
    $esi = MOV32r0 implicit-def dead $eflags
    CALL64m killed renamable $rax, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.8)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $r15 = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    $rdi = MOV32ri64 7
    $rsi = COPY renamable $r15
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r12 = COPY $rax
    MOV16mi $rax, 1, $noreg, 4, $noreg, 15973 :: (store (s16) into %ir.result.i + 4, align 4)
    MOV32mi $rax, 1, $noreg, 0, $noreg, 1852788284 :: (store (s32) into %ir.result.i)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 16
    $rsi = COPY renamable $r15
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r13 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @String, $noreg :: (load (s64) from got, align 16)
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $r12 :: (store (s64) into %ir.result.i2)
    renamable $rcx = MOV64ri 30064771078
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $rcx :: (store (s64) into %ir.13, align 4)
    renamable $rcx = MOV64rm renamable $r14, 8, renamable $rbp, 16, $noreg :: (load (s64) from %ir.17)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    $rsi = COPY renamable $r13
    $rdx = COPY killed renamable $rax
    $r8d = MOV32ri 7
    CALL64m killed renamable $rcx, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit undef $rcx, implicit killed $r8d, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.19)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 1
    $rsi = COPY renamable $r15
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r12 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 16
    $rsi = COPY killed renamable $r15
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $r12 :: (store (s64) into %ir.result.i18)
    renamable $rcx = MOV64ri 4294967296
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $rcx :: (store (s64) into %ir.24, align 4)
    renamable $rcx = MOV64rm killed renamable $r14, 8, killed renamable $rbp, 8, $noreg :: (load (s64) from %ir.28)
    renamable $rcx = MOV64rm killed renamable $rcx, 1, $noreg, 8, $noreg :: (load (s64) from %ir.30)
    $rdi = COPY killed renamable $rbx
    $rsi = COPY killed renamable $r13
    $rdx = COPY killed renamable $rax
    $r8d = MOV32ri 7
    TCRETURNri64 killed renamable $rcx, 0, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit undef $rcx, implicit killed $r8d

...
---
name:            Exception_set_info_line_numberPtri32_file_nameString
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
  hasTailCall:     true
fixedStack:
  - { id: 0, offset: 56, size: 4, alignment: 8 }
  - { id: 1, offset: 48, size: 8, alignment: 16 }
  - { id: 2, offset: 40, size: 8, alignment: 8 }
  - { id: 3, offset: 32, size: 8, alignment: 16 }
  - { id: 4, offset: 24, size: 4, alignment: 8 }
  - { id: 5, offset: 16, size: 8, alignment: 16 }
  - { id: 6, offset: 8, size: 4, alignment: 8 }
  - { id: 7, size: 8, alignment: 16 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.5):
    liveins: $rdi, $rsi
  
    renamable $rbx = COPY $rsi
    renamable $r12 = COPY $rdi
    renamable $r14 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.2)
    renamable $r15 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.1, align 16)
    renamable $r13 = MOV64rm %fixed-stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.3, align 16)
    renamable $esi = MOV32rm %fixed-stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %fixed-stack.4, align 8)
    renamable $rax = MOV64rm $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri 9027164862567808692
    renamable $rcx = IMUL64rm killed renamable $rcx, $rdi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, $rdi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $rbp = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm $rdi, 8, renamable $rbp, 0, $noreg :: (load (s64) from %ir.8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    CALL64m killed renamable $rax, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.10)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm renamable $r13, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i12)
    renamable $rcx = MOV64ri 6499063144389013426
    renamable $rcx = IMUL64rm killed renamable $rcx, renamable $r13, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i10, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, renamable $r13, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i11, align 4)
    renamable $r8d = MOV32rm killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i20)
    renamable $rax = MOV64rm killed renamable $r12, 8, killed renamable $rbp, 8, $noreg :: (load (s64) from %ir.13)
    renamable $rax = MOV64rm killed renamable $rax, 1, $noreg, 8, $noreg :: (load (s64) from %ir.15)
    $rdi = COPY killed renamable $rbx
    $rsi = COPY killed renamable $r13
    $rdx = COPY killed renamable $r14
    $rcx = COPY killed renamable $r15
    TCRETURNri64 killed renamable $rax, 0, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d

...
---
name:            Exception_report_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 16, size: 8, alignment: 16, isImmutable: true }
  - { id: 1, offset: 8, size: 4, alignment: 8, isImmutable: true }
  - { id: 2, size: 8, alignment: 16, isImmutable: true }
stack:
  - { id: 0, size: 1, alignment: 8 }
  - { id: 1, size: 32, alignment: 8 }
  - { id: 2, type: spill-slot, size: 8, alignment: 8 }
  - { id: 3, type: spill-slot, size: 8, alignment: 8 }
  - { id: 4, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0..lr.ph.i:
    liveins: $rdi, $rdx, $rsi
  
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, $rdx :: (store (s64) into %stack.2)
    renamable $rbx = COPY $rsi
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, $rsi :: (store (s64) into %stack.4)
    renamable $r12 = COPY $rdi
    renamable $rax = MOV64rm $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri 9027164862567808692
    renamable $rcx = IMUL64rm killed renamable $rcx, $rdi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, $rdi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $r15 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, renamable $r15 :: (store (s64) into %stack.3)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $r14 = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    $rdi = MOV32ri64 10
    $rsi = COPY renamable $r14
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbp = COPY $rax
    renamable $rax = MOV32ri64 45
    MOV8mr renamable $rbp, 1, $noreg, 8, $noreg, renamable $al, implicit killed $rax :: (store (s8) into %ir.result.i + 8, align 4)
    renamable $rax = MOV64ri 3255307777713450285
    MOV64mr renamable $rbp, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.result.i, align 4)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 10
    $rsi = COPY renamable $r14
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = MOV64rm renamable $rbp, 1, $noreg, 0, $noreg :: (load (s64) from %ir.result.i, align 1)
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.result.i.i, align 1)
    renamable $cl = MOV8rm killed renamable $rbp, 1, $noreg, 8, $noreg :: (load (s8) from %ir.result.i + 8)
    MOV8mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $cl :: (store (s8) into %ir.result.i.i + 8)
    MOV8mi renamable $rax, 1, $noreg, 9, $noreg, 0 :: (store (s8) into %ir.4)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $rax
    CALL64pcrel32 target-flags(x86-plt) @puts, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 27
    $rsi = COPY renamable $r14
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbp = COPY $rax
    renamable $rax = MOV64ri 7594793476000212512
    MOV64mr renamable $rbp, 1, $noreg, 16, $noreg, killed renamable $rax :: (store (s64) into %ir.result.i33 + 16, align 4)
    renamable $rax = MOV64ri 7959953403570036846
    MOV64mr renamable $rbp, 1, $noreg, 8, $noreg, killed renamable $rax :: (store (s64) into %ir.result.i33 + 8, align 4)
    renamable $rax = MOV64ri 8028075836850796613
    MOV64mr renamable $rbp, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.result.i33, align 4)
    MOV16mi renamable $rbp, 1, $noreg, 24, $noreg, 25964 :: (store (s16) into %ir.result.i33 + 24, align 4)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 27
    $rsi = COPY renamable $r14
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = MOV64rm renamable $rbp, 1, $noreg, 0, $noreg :: (load (s64) from %ir.result.i33, align 1)
    renamable $rdx = MOV64rm renamable $rbp, 1, $noreg, 8, $noreg :: (load (s64) from %ir.result.i33 + 8, align 1)
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.result.i.i127, align 1)
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64) into %ir.result.i.i127 + 8, align 1)
    renamable $rcx = MOV64rm renamable $rbp, 1, $noreg, 16, $noreg :: (load (s64) from %ir.result.i33 + 16, align 1)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rcx :: (store (s64) into %ir.result.i.i127 + 16, align 1)
    renamable $cx = MOV16rm killed renamable $rbp, 1, $noreg, 24, $noreg :: (load (s16) from %ir.result.i33 + 24, align 1)
    MOV16mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $cx :: (store (s16) into %ir.result.i.i127 + 24, align 1)
    MOV8mi renamable $rax, 1, $noreg, 26, $noreg, 0 :: (store (s8) into %ir.6)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $rax
    CALL64pcrel32 target-flags(x86-plt) @puts, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm renamable $r12, 8, killed renamable $r15, 8, $noreg :: (load (s64) from %ir.10)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.1, 1, $noreg, 0, $noreg
    $rsi = COPY killed renamable $rbx
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.11)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = MOVSX64rm32 %stack.1, 1, $noreg, 24, $noreg :: (load (s32) from %stack.1 + 24, align 8)
    renamable $rbp = MOV64rm %stack.1, 1, $noreg, 16, $noreg :: (load (s64) from %stack.1 + 16)
    renamable $r15 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %stack.1)
    renamable $r13 = MOV64rm %stack.1, 1, $noreg, 8, $noreg :: (load (s64) from %stack.1 + 8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r8 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $r15
    $rsi = COPY renamable $r13
    $rdx = COPY renamable $rbp
    $ecx = COPY renamable $ebx
    CALL64m renamable $r15, 8, renamable $rbx, 112, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.22)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    $rsi = COPY renamable $r13
    $rdx = COPY renamable $rbp
    $ecx = COPY renamable $ebx
    $r8 = COPY killed renamable $r15
    $r9 = COPY killed renamable $r13
    renamable $r10 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    PUSH64r killed renamable $r10, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit $r9, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $rax
    CALL64pcrel32 target-flags(x86-plt) @puts, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 8
    $rsi = COPY renamable $r14
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = COPY $rax
    MOV8mi $rax, 1, $noreg, 6, $noreg, 101 :: (store (s8) into %ir.result.i49 + 6, align 2, basealign 4)
    MOV16mi $rax, 1, $noreg, 4, $noreg, 28265 :: (store (s16) into %ir.result.i49 + 4, align 4)
    MOV32mi $rax, 1, $noreg, 0, $noreg, 1814066241 :: (store (s32) into %ir.result.i49)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 8
    $rsi = COPY renamable $r14
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $ecx = MOV32rm renamable $rbx, 1, $noreg, 0, $noreg :: (load (s32) from %ir.result.i49, align 1)
    renamable $edx = MOV32rm killed renamable $rbx, 1, $noreg, 3, $noreg :: (load (s32) from %ir.result.i49 + 3, align 1)
    MOV32mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $ecx :: (store (s32) into %ir.result.i.i147, align 1)
    MOV32mr renamable $rax, 1, $noreg, 3, $noreg, killed renamable $edx :: (store (s32) into %ir.result.i.i147 + 3, align 1)
    MOV8mi renamable $rax, 1, $noreg, 7, $noreg, 0 :: (store (s8) into %ir.28)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $rax
    CALL64pcrel32 target-flags(x86-plt) @puts, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r13 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %stack.3)
    renamable $rax = MOV64rm renamable $r12, 8, renamable $r13, 0, $noreg :: (load (s64) from %ir.9)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r15 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %stack.4)
    $rdi = COPY renamable $r15
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load (s64) from %ir.30)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @i32_string, $noreg :: (load (s64) from got)
    $esi = COPY killed renamable $eax
    dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
    CALL64pcrel32 target-flags(x86-plt) @printf, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 13
    $rsi = COPY renamable $r14
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = COPY $rax
    renamable $rax = MOV64ri 8315172272968329559
    MOV64mr renamable $rbx, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.result.i51, align 4)
    MOV32mi renamable $rbx, 1, $noreg, 8, $noreg, 1701273971 :: (store (s32) into %ir.result.i51 + 8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 13
    $rsi = COPY renamable $r14
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg :: (load (s64) from %ir.result.i51, align 1)
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.result.i.i167, align 1)
    renamable $ecx = MOV32rm killed renamable $rbx, 1, $noreg, 8, $noreg :: (load (s32) from %ir.result.i51 + 8, align 1)
    MOV32mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $ecx :: (store (s32) into %ir.result.i.i167 + 8, align 1)
    MOV8mi renamable $rax, 1, $noreg, 12, $noreg, 0 :: (store (s8) into %ir.36)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $rax
    CALL64pcrel32 target-flags(x86-plt) @puts, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r12
    $rsi = COPY renamable $r15
    renamable $rbx = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %stack.2)
    $rdx = COPY renamable $rbx
    $ecx = COPY renamable $r13d
    renamable $rbp = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $r8 = COPY renamable $rbp
    CALL64m renamable $r12, 8, renamable $r13, 56, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.43)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r12
    $rsi = COPY renamable $r15
    $rdx = COPY renamable $rbx
    $ecx = COPY renamable $r13d
    $r8 = COPY killed renamable $r12
    $r9 = COPY killed renamable $r15
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r13, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 10
    $rsi = COPY renamable $r14
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = COPY $rax
    renamable $rax = MOV32ri64 45
    MOV8mr renamable $rbx, 1, $noreg, 8, $noreg, renamable $al, implicit killed $rax :: (store (s8) into %ir.result.i53 + 8, align 4)
    renamable $rax = MOV64ri 3255307777713450285
    MOV64mr renamable $rbx, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.result.i53, align 4)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 10
    $rsi = COPY killed renamable $r14
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg :: (load (s64) from %ir.result.i53, align 1)
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.result.i.i187, align 1)
    renamable $cl = MOV8rm killed renamable $rbx, 1, $noreg, 8, $noreg :: (load (s8) from %ir.result.i53 + 8)
    MOV8mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $cl :: (store (s8) into %ir.result.i.i187 + 8)
    MOV8mi renamable $rax, 1, $noreg, 9, $noreg, 0 :: (store (s8) into %ir.48)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $rax
    CALL64pcrel32 target-flags(x86-plt) @puts, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    RET 0

...
---
name:            Exception_print_message_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
fixedStack:
  - { id: 0, offset: 16, size: 8, alignment: 16, isImmutable: true }
  - { id: 1, offset: 8, size: 4, alignment: 8, isImmutable: true }
  - { id: 2, size: 8, alignment: 16, isImmutable: true }
stack:
  - { id: 0, size: 1, alignment: 8 }
  - { id: 1, size: 32, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.3):
    liveins: $rdi, $rsi
  
    renamable $rax = MOV64rm renamable $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri 9027164862567808692
    renamable $rcx = IMUL64rm killed renamable $rcx, renamable $rdi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, renamable $rdi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $rax = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    renamable $rax = MOV64rm killed renamable $rdi, 8, killed renamable $rax, 16, $noreg :: (load (s64) from %ir.8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.1, 1, $noreg, 0, $noreg
    CALL64m killed renamable $rax, 1, $noreg, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.9)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = MOVSX64rm32 %stack.1, 1, $noreg, 24, $noreg :: (load (s32) from %stack.1 + 24, align 8)
    renamable $r14 = MOV64rm %stack.1, 1, $noreg, 16, $noreg :: (load (s64) from %stack.1 + 16)
    renamable $r15 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %stack.1)
    renamable $r12 = MOV64rm %stack.1, 1, $noreg, 8, $noreg :: (load (s64) from %stack.1 + 8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r13 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $r15
    $rsi = COPY renamable $r12
    $rdx = COPY renamable $r14
    $ecx = COPY renamable $ebx
    $r8 = COPY renamable $r13
    CALL64m renamable $r15, 8, renamable $rbx, 112, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit killed $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.20)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    $rsi = COPY renamable $r12
    $rdx = COPY renamable $r14
    $ecx = COPY renamable $ebx
    $r8 = COPY killed renamable $r15
    $r9 = COPY killed renamable $r12
    PUSH64r killed renamable $r13, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r14, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit killed $r8, implicit killed $r9, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $rax
    CALL64pcrel32 target-flags(x86-plt) @puts, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    RET 0

...
---
name:            Exception_getter_message
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi, $rsi
  
    renamable $rax = COPY $rdi
    renamable $rcx = MOV64rm renamable $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.2)
    renamable $rdx = MOV64rm renamable $rsi, 1, $noreg, 48, $noreg :: (load (s64) from %ir.5)
    renamable $rdi = MOV64rm renamable $rsi, 1, $noreg, 56, $noreg :: (load (s64) from %ir.8)
    renamable $esi = MOV32rm killed renamable $rsi, 1, $noreg, 64, $noreg :: (load (s32) from %ir.11)
    MOV32mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $esi :: (store (s32), align 8)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rdi :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64))
    RET 0, $rax

...
---
name:            Exception_setter_message
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
  - { reg: '$rcx' }
  - { reg: '$r8d' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rcx, $rdi, $rdx, $rsi, $r8d
  
    MOV64mr renamable $rdi, 1, $noreg, 40, $noreg, killed renamable $rsi :: (store (s64) into %ir.3)
    MOV64mr renamable $rdi, 1, $noreg, 48, $noreg, killed renamable $rdx :: (store (s64) into %ir.4)
    MOV64mr renamable $rdi, 1, $noreg, 56, $noreg, killed renamable $rcx :: (store (s64) into %ir.5)
    MOV32mr killed renamable $rdi, 1, $noreg, 64, $noreg, killed renamable $r8d :: (store (s32) into %ir.6)
    RET 0

...
---
name:            Exception_getter_file_name
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi, $rsi
  
    renamable $rax = COPY $rdi
    renamable $rcx = MOV64rm renamable $rsi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.2)
    renamable $rdx = MOV64rm renamable $rsi, 1, $noreg, 16, $noreg :: (load (s64) from %ir.5)
    renamable $rdi = MOV64rm renamable $rsi, 1, $noreg, 24, $noreg :: (load (s64) from %ir.8)
    renamable $esi = MOV32rm killed renamable $rsi, 1, $noreg, 32, $noreg :: (load (s32) from %ir.11)
    MOV32mr renamable $rax, 1, $noreg, 24, $noreg, killed renamable $esi :: (store (s32), align 8)
    MOV64mr renamable $rax, 1, $noreg, 16, $noreg, killed renamable $rdi :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64))
    MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64))
    RET 0, $rax

...
---
name:            Exception_setter_file_name
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
  - { reg: '$rcx' }
  - { reg: '$r8d' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rcx, $rdi, $rdx, $rsi, $r8d
  
    MOV64mr renamable $rdi, 1, $noreg, 8, $noreg, killed renamable $rsi :: (store (s64) into %ir.3)
    MOV64mr renamable $rdi, 1, $noreg, 16, $noreg, killed renamable $rdx :: (store (s64) into %ir.4)
    MOV64mr renamable $rdi, 1, $noreg, 24, $noreg, killed renamable $rcx :: (store (s64) into %ir.5)
    MOV32mr killed renamable $rdi, 1, $noreg, 32, $noreg, killed renamable $r8d :: (store (s32) into %ir.6)
    RET 0

...
---
name:            Exception_getter_line_number
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    renamable $eax = MOV32rm killed renamable $rdi, 1, $noreg, 0, $noreg :: (load (s32) from %ir.0)
    RET 0, $eax

...
---
name:            Exception_setter_line_number
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$esi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $esi, $rdi
  
    MOV32mr killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.0)
    RET 0

...
---
name:            Iterable_B_iterator_
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 64, $noreg :: (load (s64) from %ir.5)
    RET 0, $rax

...
---
name:            report_exception
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
stack:
  - { id: 0, size: 1, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    successors: %bb.1, %bb.2
    liveins: $rdi
  
    renamable $rbx = MOV64rm renamable $rdi, 1, $noreg, 48, $noreg :: (load (s64) from %ir.3)
    CMP64rm renamable $rbx, $rip, 1, $noreg, target-flags(x86-gotpcrel) @nil_typ, $noreg, implicit-def $eflags :: (load (s64) from got)
    renamable $al = SETCCr 4, implicit killed $eflags
    TEST64rr renamable $rbx, renamable $rbx, implicit-def $eflags
    renamable $cl = SETCCr 4, implicit killed $eflags
    dead renamable $cl = OR8rr killed renamable $cl, killed renamable $al, implicit-def $eflags
    JCC_1 %bb.2, 5, implicit killed $eflags
    JMP_1 %bb.1
  
  bb.1 (%ir-block.7):
    liveins: $rbx, $rdi
  
    renamable $r14 = MOV64rm renamable $rdi, 1, $noreg, 72, $noreg :: (load (s64) from %ir.3 + 24)
    renamable $r15 = MOV64rm killed renamable $rdi, 1, $noreg, 64, $noreg :: (load (s64) from %ir.3 + 16)
    renamable $rax = MOV64rm renamable $rbx, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri 9027164862567808692
    renamable $rcx = IMUL64rm killed renamable $rcx, renamable $rbx, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, renamable $rbx, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $r12 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r13 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $rbx
    $rsi = COPY renamable $r15
    $rdx = COPY renamable $r14
    $ecx = COPY renamable $r12d
    $r8 = COPY renamable $r13
    CALL64m renamable $rbx, 8, renamable $r12, 48, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit $rdx, implicit $ecx, implicit killed $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.18)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $rbx
    $rsi = COPY renamable $r15
    $rdx = COPY renamable $r14
    $ecx = COPY renamable $r12d
    $r8 = COPY killed renamable $rbx
    $r9 = COPY killed renamable $r15
    PUSH64r killed renamable $r13, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r12, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r14, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit $rdx, implicit $ecx, implicit killed $r8, implicit killed $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  
  bb.2.._crit_edge:
    RET 0

...
---
name:            IO_B__Self_print_xPtri8__Self_print_xPtri1__Self_print_xNil__Self_print_xCharacter__Self_print_xPtri64__Self_print_xPtri32__Self_print_xRepresentable__Self_print_xString__Self_print_xPtrf64
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
  adjustsStack:    true
  hasCalls:        true
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 0, $noreg :: (load (s64) from %ir.0)
    renamable $rbx = MOV64rm renamable $rax, 1, $noreg, 8, $noreg :: (load (s64) from %ir.4, align 4)
    renamable $r15 = MOV64rm renamable $rax, 1, $noreg, 16, $noreg :: (load (s64) from %ir.5, align 4)
    renamable $r13 = MOV64rm renamable $rax, 1, $noreg, 24, $noreg :: (load (s64) from %ir.6)
    renamable $r14 = MOV64rm killed renamable $rax, 1, $noreg, 32, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @i64_typ, $noreg :: (load (s64) from got)
    renamable $rdx = MOV64ri -7469797244461771922
    $rdi = COPY renamable $r15
    $rsi = COPY renamable $rbx
    $r8 = COPY renamable $r14
    CALL64r renamable $r13, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $ecx = MOV32ri 5
    TEST8ri killed renamable $al, 1, implicit-def $eflags
    JCC_1 %bb.8, 5, implicit killed $eflags
    JMP_1 %bb.1
  
  bb.1 (%ir-block.12):
    liveins: $rbx, $r13, $r14, $r15
  
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @nil_typ, $noreg :: (load (s64) from got)
    renamable $rdx = MOV64ri -5126806859456325683
    $rdi = COPY renamable $r15
    $rsi = COPY renamable $rbx
    $r8 = COPY renamable $r14
    CALL64r renamable $r13, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $ecx = MOV32ri 3
    TEST8ri killed renamable $al, 1, implicit-def $eflags
    JCC_1 %bb.8, 5, implicit killed $eflags
    JMP_1 %bb.2
  
  bb.2 (%ir-block.13):
    liveins: $rbx, $r13, $r14, $r15
  
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @f64_typ, $noreg :: (load (s64) from got)
    renamable $rdx = MOV64ri -757315540097298781
    $rdi = COPY renamable $r15
    $rsi = COPY renamable $rbx
    $r8 = COPY renamable $r14
    CALL64r renamable $r13, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $ecx = MOV32ri 9
    TEST8ri killed renamable $al, 1, implicit-def $eflags
    JCC_1 %bb.8, 5, implicit killed $eflags
    JMP_1 %bb.3
  
  bb.3 (%ir-block.14):
    successors: %bb.4, %bb.8
    liveins: $rbx, $r13, $r14, $r15
  
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @String, $noreg :: (load (s64) from got, align 16)
    renamable $rdx = MOV64ri 6499063144389013426
    $rdi = COPY renamable $r15
    $rsi = COPY renamable $rbx
    $r8 = COPY renamable $r14
    CALL64r renamable $r13, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $bpl = COPY $al
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @Character, $noreg :: (load (s64) from got, align 16)
    renamable $rdx = MOV64ri 6681222582356018452
    $rdi = COPY renamable $r15
    $rsi = COPY renamable $rbx
    $r8 = COPY renamable $r14
    CALL64r renamable $r13, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r12b = COPY $al
    renamable $al = COPY renamable $bpl
    renamable $al = NOT8r killed renamable $al
    renamable $al = OR8rr killed renamable $al, renamable $r12b, implicit-def dead $eflags
    renamable $ecx = MOV32ri 8
    TEST8ri killed renamable $al, 1, implicit-def $eflags
    JCC_1 %bb.8, 4, implicit killed $eflags
    JMP_1 %bb.4
  
  bb.4 (%ir-block.15):
    liveins: $bpl, $rbx, $r13, $r14, $r15, $r12b
  
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @i32_typ, $noreg :: (load (s64) from got)
    renamable $rdx = MOV64ri -2253724949814257982
    $rdi = COPY renamable $r15
    $rsi = COPY renamable $rbx
    $r8 = COPY renamable $r14
    CALL64r renamable $r13, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $ecx = MOV32ri 6
    TEST8ri killed renamable $al, 1, implicit-def $eflags
    JCC_1 %bb.8, 5, implicit killed $eflags
    JMP_1 %bb.5
  
  bb.5 (%ir-block.16):
    liveins: $bpl, $rbx, $r13, $r14, $r15, $r12b
  
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @i8_typ, $noreg :: (load (s64) from got)
    renamable $rdx = MOV64ri 2582149688529881115
    $rdi = COPY renamable $r15
    $rsi = COPY renamable $rbx
    $r8 = COPY renamable $r14
    CALL64r renamable $r13, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $ecx = MOV32ri 1
    TEST8ri killed renamable $al, 1, implicit-def $eflags
    JCC_1 %bb.8, 5, implicit killed $eflags
    JMP_1 %bb.6
  
  bb.6 (%ir-block.17):
    successors: %bb.7, %bb.8
    liveins: $bpl, $rbx, $r13, $r14, $r15, $r12b
  
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @Representable, $noreg :: (load (s64) from got, align 16)
    renamable $rdx = MOV64ri -7260840641129990118
    $rdi = COPY killed renamable $r15
    $rsi = COPY killed renamable $rbx
    $r8 = COPY killed renamable $r14
    CALL64r killed renamable $r13, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $al = NOT8r killed renamable $al
    renamable $dl = COPY renamable $bpl
    renamable $dl = OR8rr killed renamable $dl, renamable $r12b, implicit-def dead $eflags
    renamable $dl = OR8rr killed renamable $dl, killed renamable $al, implicit-def dead $eflags
    renamable $ecx = MOV32ri 7
    TEST8ri killed renamable $dl, 1, implicit-def $eflags
    JCC_1 %bb.8, 4, implicit killed $eflags
    JMP_1 %bb.7
  
  bb.7..critedge:
    liveins: $bpl, $r12b
  
    renamable $eax = MOVZX32rr8 killed renamable $r12b, implicit-def $rax
    renamable $eax = AND32ri renamable $eax, 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax
    renamable $eax = LEA64_32r killed renamable $rax, 1, renamable $rax, 2, $noreg
    TEST8ri killed renamable $bpl, 1, implicit-def $eflags
    renamable $ecx = MOV32ri 2
    renamable $ecx = CMOV32rr killed renamable $ecx, killed renamable $eax, 4, implicit killed $eflags
  
  bb.8 (%ir-block.18):
    liveins: $ecx
  
    renamable $eax = MOV32rr killed renamable $ecx, implicit-def $rax
    renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @IO, $noreg :: (load (s64) from got, align 16)
    renamable $rax = MOV64rm killed renamable $rcx, 8, killed renamable $rax, 56, $noreg :: (invariant load (s64) from %ir.21)
    RET 0, $rax

...
---
name:            IO__Self_print_xPtri8
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdx' }
frameInfo:
  maxAlignment:    1
  hasTailCall:     true
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdx
  
    renamable $esi = MOVSX32rr8 renamable $dl, implicit killed $rdx
    renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @i32_string, $noreg :: (load (s64) from got)
    dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
    TCRETURNdi64 target-flags(x86-plt) @printf, 0, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al

...
---
name:            IO__Self_print_xPtri1
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdx' }
frameInfo:
  maxAlignment:    1
  adjustsStack:    true
  hasCalls:        true
  hasTailCall:     true
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    successors: %bb.1, %bb.2
    liveins: $rdx
  
    TEST8ri renamable $dl, 1, implicit-def $eflags, implicit killed $rdx
    JCC_1 %bb.2, 4, implicit killed $eflags
    JMP_1 %bb.1
  
  bb.1 (%ir-block.4):
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $rsi = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    $rdi = MOV32ri64 5
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = COPY $rax
    MOV32mi $rax, 1, $noreg, 0, $noreg, 1702195828 :: (store (s32) into %ir.result.i)
    renamable $r15d = MOV32ri 4, implicit-def $r15
    JMP_1 %bb.3
  
  bb.2 (%ir-block.5):
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $rsi = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    $rdi = MOV32ri64 6
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = COPY $rax
    MOV8mi $rax, 1, $noreg, 4, $noreg, 101 :: (store (s8) into %ir.result.i15 + 4, align 4)
    MOV32mi $rax, 1, $noreg, 0, $noreg, 1936482662 :: (store (s32) into %ir.result.i15)
    renamable $r15d = MOV32ri 5, implicit-def $r15
  
  bb.3..lr.ph.i:
    liveins: $rbx, $r15
  
    renamable $edi = LEA64_32r renamable $r15, 1, $noreg, 1, $noreg, implicit-def $rdi
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $rsi = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r14 = COPY $rax
    renamable $r15d = MOV32rr renamable $r15d, implicit killed $r15, implicit-def $r15
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY $rax
    $rsi = COPY killed renamable $rbx
    $rdx = COPY renamable $r15
    CALL64pcrel32 target-flags(x86-plt) &memcpy, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    MOV8mi renamable $r14, 1, killed renamable $r15, 0, $noreg, 0 :: (store (s8) into %ir.11)
    $rdi = COPY killed renamable $r14
    TCRETURNdi64 target-flags(x86-plt) @puts, 0, csr_64, implicit $rsp, implicit $ssp, implicit $rdi

...
---
name:            IO__Self_print_xNil
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
frameInfo:
  maxAlignment:    1
  adjustsStack:    true
  hasCalls:        true
  hasTailCall:     true
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0..lr.ph.i:
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $rbx = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    $rdi = MOV32ri64 4
    $rsi = COPY renamable $rbx
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r14 = COPY $rax
    MOV8mi $rax, 1, $noreg, 2, $noreg, 108 :: (store (s8) into %ir.result.i + 2, align 2, basealign 4)
    MOV16mi $rax, 1, $noreg, 0, $noreg, 26990 :: (store (s16) into %ir.result.i, align 4)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 4
    $rsi = COPY killed renamable $rbx
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $cx = MOV16rm renamable $r14, 1, $noreg, 0, $noreg :: (load (s16) from %ir.result.i, align 1)
    MOV16mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $cx :: (store (s16) into %ir.result.i.i, align 1)
    renamable $cl = MOV8rm killed renamable $r14, 1, $noreg, 2, $noreg :: (load (s8) from %ir.result.i + 2)
    MOV8mr renamable $rax, 1, $noreg, 2, $noreg, killed renamable $cl :: (store (s8) into %ir.result.i.i + 2)
    MOV8mi renamable $rax, 1, $noreg, 3, $noreg, 0 :: (store (s8) into %ir.3)
    $rdi = COPY killed renamable $rax
    TCRETURNdi64 target-flags(x86-plt) @puts, 0, csr_64, implicit $rsp, implicit $ssp, implicit killed $rdi

...
---
name:            IO__Self_print_xCharacter
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rsi' }
  - { reg: '$rdx' }
  - { reg: '$rcx' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
stack:
  - { id: 0, size: 1, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rcx, $rdx, $rsi
  
    renamable $rbx = COPY $rcx
    renamable $r14 = COPY $rdx
    renamable $r15 = COPY $rsi
    renamable $rax = MOV64rm $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri 6681222582356018452
    renamable $rcx = IMUL64rm killed renamable $rcx, $rsi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $r13 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $rsi = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    $rdi = MOV32ri64 2
    CALL64pcrel32 target-flags(x86-plt) @bump_malloc_inner, csr_64, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r12 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbp = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $rdi = COPY renamable $r15
    $rsi = COPY renamable $r14
    $rdx = COPY renamable $rbx
    $ecx = COPY renamable $r13d
    $r8 = COPY renamable $rbp
    CALL64m renamable $r15, 8, renamable $r13, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit killed $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.14)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    $rsi = COPY renamable $r14
    $rdx = COPY renamable $rbx
    $ecx = COPY renamable $r13d
    $r8 = COPY killed renamable $r15
    $r9 = COPY killed renamable $r14
    PUSH64r killed renamable $rbp, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r13, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit killed $r8, implicit killed $r9, implicit-def $rsp, implicit-def $ssp, implicit-def $al
    ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    MOV8mr renamable $r12, 1, $noreg, 0, $noreg, killed renamable $al :: (store (s8) into %ir.result.i)
    MOV8mi renamable $r12, 1, $noreg, 1, $noreg, 0 :: (store (s8) into %ir.18)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $r12
    CALL64pcrel32 target-flags(x86-plt) @puts, csr_64, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    RET 0

...
---
name:            IO__Self_print_xPtri64
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdx' }
frameInfo:
  maxAlignment:    1
  hasTailCall:     true
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdx
  
    renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @i64_string, $noreg :: (load (s64) from got)
    $rsi = COPY killed renamable $rdx
    dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
    TCRETURNdi64 target-flags(x86-plt) @printf, 0, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $al

...
---
name:            IO__Self_print_xPtri32
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdx' }
frameInfo:
  maxAlignment:    1
  hasTailCall:     true
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdx
  
    renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @i32_string, $noreg :: (load (s64) from got)
    $esi = COPY renamable $edx, implicit killed $rdx
    dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
    TCRETURNdi64 target-flags(x86-plt) @printf, 0, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $esi, implicit killed $al

...
---
name:            IO__Self_print_xRepresentable
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rsi' }
  - { reg: '$rdx' }
  - { reg: '$rcx' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
stack:
  - { id: 0, size: 1, alignment: 8 }
  - { id: 1, size: 32, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rcx, $rdx, $rsi
  
    renamable $r15 = COPY $rcx
    renamable $r14 = COPY $rdx
    renamable $r12 = COPY $rsi
    renamable $rax = MOV64rm $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri -7260840641129990118
    renamable $rcx = IMUL64rm killed renamable $rcx, $rsi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $r13 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $rdi = COPY $rsi
    $rsi = COPY renamable $r14
    $rdx = COPY renamable $r15
    $ecx = COPY renamable $r13d
    $r8 = COPY renamable $rbx
    CALL64m renamable $r12, 8, renamable $r13, 0, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit killed $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.13)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 32, 0, 32, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rdi = LEA64r %stack.1, 1, $noreg, 0, $noreg
    $rsi = COPY renamable $r12
    $rdx = COPY renamable $r14
    $rcx = COPY renamable $r15
    $r8d = COPY renamable $r13d
    $r9 = COPY killed renamable $r12
    PUSH64r renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 24)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r13, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r15, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r14, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit killed $r8d, implicit killed $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r14 = MOV64rm %stack.1, 1, $noreg, 16, $noreg :: (load (s64) from %stack.1 + 16)
    renamable $r15 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %stack.1)
    renamable $r12 = MOV64rm %stack.1, 1, $noreg, 8, $noreg :: (load (s64) from %stack.1 + 8)
    renamable $rax = MOV64rm renamable $r15, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i9)
    renamable $rcx = MOV64ri 6499063144389013426
    renamable $rcx = IMUL64rm killed renamable $rcx, renamable $r15, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i7, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, renamable $r15, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i8, align 4)
    renamable $r13 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i17)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    $rsi = COPY renamable $r12
    $rdx = COPY renamable $r14
    $ecx = COPY renamable $r13d
    $r8 = COPY renamable $rbx
    CALL64m renamable $r15, 8, renamable $r13, 112, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit killed $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.25)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    $rsi = COPY renamable $r12
    $rdx = COPY renamable $r14
    $ecx = COPY renamable $r13d
    $r8 = COPY killed renamable $r15
    $r9 = COPY killed renamable $r12
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r13, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r14, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit killed $r8, implicit killed $r9, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $rax
    CALL64pcrel32 target-flags(x86-plt) @puts, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    RET 0

...
---
name:            IO__Self_print_xString
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rsi' }
  - { reg: '$rdx' }
  - { reg: '$rcx' }
frameInfo:
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
stack:
  - { id: 0, size: 1, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rcx, $rdx, $rsi
  
    renamable $rbx = COPY $rcx
    renamable $r14 = COPY $rdx
    renamable $r15 = COPY $rsi
    renamable $rax = MOV64rm $rsi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i.i)
    renamable $rcx = MOV64ri 6499063144389013426
    renamable $rcx = IMUL64rm killed renamable $rcx, $rsi, 1, $noreg, 8, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.hash_coef_ptr.i.i, align 4)
    renamable $rdx = COPY renamable $rcx
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rcx, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, $rsi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i.i, align 4)
    renamable $r12 = MOVSX64rm32 killed renamable $rax, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr.i.i)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r13 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $rdi = COPY $rsi
    $rsi = COPY renamable $r14
    $rdx = COPY renamable $rbx
    $ecx = COPY renamable $r12d
    $r8 = COPY renamable $r13
    CALL64m renamable $r15, 8, renamable $r12, 112, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit killed $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax :: (load (s64) from %ir.14)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY renamable $r15
    $rsi = COPY renamable $r14
    $rdx = COPY renamable $rbx
    $ecx = COPY renamable $r12d
    $r8 = COPY killed renamable $r15
    $r9 = COPY killed renamable $r14
    PUSH64r killed renamable $r13, implicit-def $rsp, implicit $rsp :: (store (s64) into stack + 16)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $r12, implicit-def $rsp, implicit $rsp :: (store (s32) into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8
    PUSH64r killed renamable $rbx, implicit-def $rsp, implicit $rsp :: (store (s64) into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8
    CALL64r killed renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit killed $r8, implicit killed $r9, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY killed renamable $rax
    CALL64pcrel32 target-flags(x86-plt) @puts, csr_64, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    RET 0

...
---
name:            IO__Self_print_xPtrf64
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdx' }
frameInfo:
  maxAlignment:    1
  hasTailCall:     true
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.2):
    liveins: $rdx
  
    renamable $xmm0 = MOV64toSDrr killed renamable $rdx
    renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @float_string, $noreg :: (load (s64) from got)
    $al = MOV8ri 1
    TCRETURNdi64 target-flags(x86-plt) @printf, 0, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit killed $al

...
---
name:            adjust_trampoline
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.0):
    liveins: $rdi
  
    renamable $rax = COPY $rdi
    RET 0, $rax

...
---
name:            bump_malloc
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
  hasTailCall:     true
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.0):
    liveins: $rdi
  
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $rsi = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg
    TCRETURNdi64 target-flags(x86-plt) @bump_malloc_inner, 0, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi

...
---
name:            bump_malloc_inner
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.0):
    liveins: $rdi, $rsi
  
    renamable $rdi = ADD64ri32 killed renamable $rdi, 15, implicit-def dead $eflags
    renamable $rdi = AND64ri32 killed renamable $rdi, -16, implicit-def dead $eflags
    renamable $rax = MOV64rm renamable $rsi, 1, $noreg, 0, $noreg :: (load (s64) from %ir.current_ptr)
    renamable $rdi = ADD64rr killed renamable $rdi, renamable $rax, implicit-def dead $eflags
    MOV64mr killed renamable $rsi, 1, $noreg, 0, $noreg, killed renamable $rdi :: (store (s64) into %ir.current_ptr)
    RET 0, $rax

...
---
name:            anoint_trampoline
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    4
  adjustsStack:    true
  hasCalls:        true
stack:
  - { id: 0, name: oldProtect, size: 4, alignment: 4 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.0):
    liveins: $rdi
  
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rcx = LEA64r %stack.0.oldProtect, 1, $noreg, 0, $noreg
    $rsi = MOV32ri64 16
    $edx = MOV32ri 64
    CALL64pcrel32 target-flags(x86-plt) @VirtualProtect, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $edx, implicit $rcx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    RET 0

...
---
name:            coroutine_create
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    1
  adjustsStack:    true
  hasCalls:        true
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.0):
    liveins: $rdi, $rsi
  
    renamable $rbx = COPY $rsi
    renamable $r14 = COPY $rdi
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rsi = MOV32ri64 8388608
    dead $edi = MOV32r0 implicit-def dead $eflags, implicit-def $rdi
    $edx = MOV32ri 12288
    $ecx = MOV32ri 4
    CALL64pcrel32 target-flags(x86-plt) @VirtualAlloc, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $edx, implicit killed $ecx, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r15 = COPY $rax
    MOV64mr $rax, 1, $noreg, 0, $noreg, killed renamable $r14 :: (store (s64) into %ir.stack)
    renamable $rax = LEA64r $rax, 1, $noreg, 8388608, $noreg
    renamable $rax = AND64ri32 killed renamable $rax, -16, implicit-def dead $eflags
    renamable $rdi = LEA64r renamable $r15, 1, $noreg, 16, $noreg
    MOV64mr renamable $r15, 1, $noreg, 8, $noreg, renamable $rax :: (store (s64) into %ir.into_callee_buf, align 4)
    MOV64mr renamable $r15, 1, $noreg, 24, $noreg, killed renamable $rax :: (store (s64) into %ir.into_callee_third_word, align 4)
    MOV64mr renamable $r15, 1, $noreg, 32, $noreg, killed renamable $rbx :: (store (s64) into %ir.arg_passer_slot)
    MOV8mi renamable $r15, 1, $noreg, 40, $noreg, 0 :: (store (s8) into %ir.is_finished)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    CALL64pcrel32 target-flags(x86-plt) @coroutine_trampoline, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rax = COPY killed renamable $r15
    RET 0, $rax

...
---
name:            coroutine_trampoline
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
  adjustsStack:    true
  hasCalls:        true
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.0):
    successors: %bb.2(0x7ffff800), %bb.1(0x00000800)
    liveins: $rdi
  
    MOV64mi32 killed renamable $rdi, 1, $noreg, 0, $noreg, blockaddress(@coroutine_trampoline, %ir-block.trampoline) :: (store (s64) into %ir.into_callee_second_word)
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @always_one, $noreg :: (load (s64) from got)
    renamable $rcx = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    CMP8mi killed renamable $rcx, 1, killed renamable $rax, 0, $noreg, 0, implicit-def $eflags :: (dereferenceable load (s8) from @always_one)
    JCC_1 %bb.2, 5, implicit killed $eflags
    JMP_1 %bb.1
  
  bb.1.trampoline (ir-block-address-taken %ir-block.trampoline):
    renamable $rbx = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $rdi = MOV64rm renamable $rbx, 1, $noreg, target-flags(x86-tpoff) @current_coroutine, $noreg :: (dereferenceable load (s64) from @current_coroutine)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    CALL64m killed renamable $rdi, 1, $noreg, 32, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp :: (load (s64) from %ir.arg_passer_ptr)
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm renamable $rbx, 1, $noreg, target-flags(x86-tpoff) @current_coroutine, $noreg :: (dereferenceable load (s64) from @current_coroutine)
    MOV8mi killed renamable $rax, 1, $noreg, 40, $noreg, 1 :: (store (s8) into %ir.is_finished_ptr)
    dead $rbp = frame-destroy MOV64rm renamable $rbx, 1, $noreg, target-flags(x86-tpoff) @into_caller_buf, $noreg
    renamable $rax = MOV64rm renamable $rbx, 1, $noreg, target-flags(x86-tpoff) @into_caller_buf + 8, $noreg
    $rsp = frame-destroy MOV64rm killed renamable $rbx, 1, $noreg, target-flags(x86-tpoff) @into_caller_buf + 16, $noreg
    JMP64r killed renamable $rax
  
  bb.2.exit:
    RET 0

...
---
name:            returns_one
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.0):
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @always_one, $noreg :: (load (s64) from got)
    renamable $rcx = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $al = MOV8rm killed renamable $rcx, 1, killed renamable $rax, 0, $noreg :: (dereferenceable load (s8) from @always_one)
    RET 0, $al

...
---
name:            setup_landing_pad
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
frameInfo:
  maxAlignment:    1
  adjustsStack:    true
  hasCalls:        true
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.0):
    successors: %bb.2(0x80000000), %bb.1(0x00000000)
  
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rsi = MOV32ri64 8388608
    dead $edi = MOV32r0 implicit-def dead $eflags, implicit-def $rdi
    $edx = MOV32ri 12288
    $ecx = MOV32ri 4
    CALL64pcrel32 target-flags(x86-plt) @VirtualAlloc, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $edx, implicit killed $ecx, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $r14 = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    MOV64mr renamable $r14, 1, $noreg, target-flags(x86-tpoff) @current_ptr, $noreg, killed renamable $rax :: (store (s64) into @current_ptr)
    MOV64mr renamable $r14, 1, $noreg, target-flags(x86-tpoff) @into_caller_buf, $noreg, $rsp :: (store (s64) into @into_caller_buf, align 16)
    MOV64mi32 renamable $r14, 1, $noreg, target-flags(x86-tpoff) @into_caller_buf + 8, $noreg, blockaddress(@setup_landing_pad, %ir-block.landing_pad) :: (store (s64) into `ptr getelementptr inbounds (i8, ptr @into_caller_buf, i64 8)`)
    MOV64mr renamable $r14, 1, $noreg, target-flags(x86-tpoff) @into_caller_buf + 16, $noreg, $rsp :: (store (s64) into `ptr getelementptr inbounds (i8, ptr @into_caller_buf, i64 16)`, align 16)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rsi = MOV32ri64 8388608
    dead $edi = MOV32r0 implicit-def dead $eflags, implicit-def $rdi
    $edx = MOV32ri 12288
    $ecx = MOV32ri 4
    CALL64pcrel32 target-flags(x86-plt) @VirtualAlloc, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $edx, implicit killed $ecx, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rbx = COPY $rax
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @setup_landing_pad, $noreg :: (load (s64) from got)
    MOV64mr renamable $rbx, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.stack.i)
    renamable $rax = LEA64r renamable $rbx, 1, $noreg, 8388608, $noreg
    renamable $rax = AND64ri32 killed renamable $rax, -16, implicit-def dead $eflags
    renamable $rdi = LEA64r renamable $rbx, 1, $noreg, 16, $noreg
    MOV64mr renamable $rbx, 1, $noreg, 8, $noreg, renamable $rax :: (store (s64) into %ir.into_callee_buf.i, align 4)
    MOV64mr renamable $rbx, 1, $noreg, 24, $noreg, killed renamable $rax :: (store (s64) into %ir.into_callee_third_word.i, align 4)
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @arg_passer, $noreg :: (load (s64) from got)
    MOV64mr renamable $rbx, 1, $noreg, 32, $noreg, killed renamable $rax :: (store (s64) into %ir.arg_passer_slot.i)
    MOV8mi renamable $rbx, 1, $noreg, 40, $noreg, 0 :: (store (s8) into %ir.is_finished.i)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    CALL64pcrel32 target-flags(x86-plt) @coroutine_trampoline, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    MOV64mr renamable $r14, 1, $noreg, target-flags(x86-tpoff) @current_coroutine, $noreg, killed renamable $rbx :: (store (s64) into @current_coroutine)
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @always_one, $noreg :: (load (s64) from got)
    CMP8mi killed renamable $r14, 1, killed renamable $rax, 0, $noreg, 0, implicit-def $eflags :: (dereferenceable load (s8) from @always_one)
    JCC_1 %bb.2, 5, implicit $eflags
    JMP_1 %bb.1
  
  bb.1.landing_pad (ir-block-address-taken %ir-block.landing_pad):
    successors:
  
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = MOV32ri64 @string_string.17
    $rsi = MOV32ri64 @exception_message
    CALL64pcrel32 target-flags(x86-plt) @printf, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $rdi = MOV64rm killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_coroutine, $noreg :: (dereferenceable load (s64) from @current_coroutine)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    CALL64pcrel32 target-flags(x86-plt) @report_exception, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    CALL64pcrel32 target-flags(x86-plt) @exit, csr_64, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  
  bb.2.exit:
    RET 0

...
---
name:            arg_passer
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
  hasTailCall:     true
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.0):
    liveins: $rdi
  
    TCRETURNmi64 killed renamable $rdi, 1, $noreg, 0, $noreg, 0, csr_64, implicit $rsp, implicit $ssp :: (load (s64) from %ir.current_coroutine)

...
---
name:            get_offset
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.0):
    liveins: $rdi, $rsi
  
    renamable $rax = MOV64rm renamable $rdi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr, align 4)
    renamable $rcx = MOV64rm renamable $rdi, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr)
    renamable $rax = IMUL64rm killed renamable $rax, killed renamable $rsi, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.id_ptr, align 4)
    renamable $rdx = COPY renamable $rax
    renamable $rdx = SHR64ri killed renamable $rdx, 32, implicit-def dead $eflags
    renamable $rdx = XOR64rr killed renamable $rdx, killed renamable $rax, implicit-def dead $eflags
    renamable $rdx = AND64rm killed renamable $rdx, killed renamable $rdi, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr, align 4)
    renamable $eax = MOV32rm killed renamable $rcx, 4, killed renamable $rdx, 0, $noreg :: (load (s32) from %ir.offset_ptr)
    RET 0, $eax

...
---
name:            hash_to_index
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.0):
    liveins: $rdi, $rdx, $rsi
  
    renamable $rsi = IMUL64rr killed renamable $rsi, killed renamable $rdx, implicit-def dead $eflags
    renamable $rax = COPY renamable $rsi
    renamable $rax = SHR64ri killed renamable $rax, 32, implicit-def dead $eflags
    renamable $rax = XOR64rr killed renamable $rax, killed renamable $rsi, implicit-def dead $eflags
    renamable $rax = AND64rr killed renamable $rax, killed renamable $rdi, implicit-def dead $eflags
    RET 0, $rax

...
---
name:            assume_offset
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.0):
    RET 0

...
---
name:            set_offset
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.0):
    liveins: $rdi, $rsi
  
    renamable $rax = MOV64rm renamable $rdi, 1, $noreg, 0, $noreg :: (load (s64) from %ir.fat_ptr)
    renamable $rcx = MOV64rm renamable $rax, 1, $noreg, 8, $noreg :: (load (s64) from %ir.hash_coef_ptr.i, align 4)
    renamable $rdx = MOV64rm renamable $rax, 1, $noreg, 40, $noreg :: (load (s64) from %ir.offset_tbl_ptr.i)
    renamable $rcx = IMUL64rm killed renamable $rcx, killed renamable $rsi, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.id_ptr, align 4)
    renamable $rsi = COPY renamable $rcx
    renamable $rsi = SHR64ri killed renamable $rsi, 32, implicit-def dead $eflags
    renamable $rsi = XOR64rr killed renamable $rsi, killed renamable $rcx, implicit-def dead $eflags
    renamable $rsi = AND64rm killed renamable $rsi, killed renamable $rax, 1, $noreg, 16, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.tbl_size_ptr.i, align 4)
    renamable $eax = MOV32rm killed renamable $rdx, 4, killed renamable $rsi, 0, $noreg :: (load (s32) from %ir.offset_ptr.i)
    MOV32mr killed renamable $rdi, 1, $noreg, 24, $noreg, killed renamable $eax :: (store (s32) into %ir.destination)
    RET 0

...
---
name:            subtype_test
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
  - { reg: '$rcx' }
  - { reg: '$r8' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.0):
    liveins: $rcx, $rdi, $rdx, $rsi, $r8
  
    renamable $rsi = IMUL64rr killed renamable $rsi, killed renamable $rdx, implicit-def dead $eflags
    renamable $rax = COPY renamable $rsi
    renamable $rax = SHR64ri killed renamable $rax, 32, implicit-def dead $eflags
    renamable $rax = XOR64rr killed renamable $rax, killed renamable $rsi, implicit-def dead $eflags
    renamable $rax = AND64rr killed renamable $rax, killed renamable $rdi, implicit-def dead $eflags
    CMP64mr killed renamable $r8, 8, killed renamable $rax, 0, $noreg, killed renamable $rcx, implicit-def $eflags :: (load (s64) from %ir.gep, align 4)
    renamable $al = SETCCr 4, implicit killed $eflags
    RET 0, $al

...
---
name:            subtype_test_wrapper
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
  - { reg: '$rcx' }
  - { reg: '$r8' }
  - { reg: '$r9' }
frameInfo:
  maxAlignment:    1
  hasTailCall:     true
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.0):
    liveins: $rcx, $rdi, $rdx, $rsi, $r8, $r9
  
    renamable $rax = COPY $rdi
    $rdi = COPY killed renamable $rsi
    $rsi = COPY killed renamable $rdx
    $rdx = COPY killed renamable $rcx
    $rcx = COPY killed renamable $r8
    $r8 = COPY killed renamable $r9
    TCRETURNri64 killed renamable $rax, 0, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8

...
---
name:            arg_buffer_filler
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.0):
    RET 0

...
---
name:            get_current_coroutine
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.0):
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $rax = MOV64rm killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @current_coroutine, $noreg :: (dereferenceable load (s64) from @current_coroutine)
    RET 0, $rax

...
---
name:            context_switch
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$r12' }
  - { reg: '$r13' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.0):
    successors: %bb.1(0x00000800), %bb.2(0x7ffff800)
    liveins: $r12, $r13
  
    MOV64mi32 renamable $r12, 1, $noreg, 8, $noreg, blockaddress(@context_switch, %ir-block.return_from_switch) :: (store (s64) into %ir.from_buf_second_word)
    MOV64mr renamable $r12, 1, $noreg, 0, $noreg, $rsp :: (store (s64) into %ir.from_buf)
    MOV64mr killed renamable $r12, 1, $noreg, 16, $noreg, $rsp :: (store (s64) into %ir.from_buf_third_word)
    renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @always_one, $noreg :: (load (s64) from got)
    renamable $rcx = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    CMP8mi killed renamable $rcx, 1, killed renamable $rax, 0, $noreg, 1, implicit-def $eflags :: (dereferenceable load (s8) from @always_one)
    JCC_1 %bb.2, 5, implicit killed $eflags
    JMP_1 %bb.1
  
  bb.1.do_switch:
    liveins: $r13
  
    dead $rbp = frame-destroy MOV64rm renamable $r13, 1, $noreg, 0, $noreg
    renamable $rax = MOV64rm renamable $r13, 1, $noreg, 8, $noreg
    $rsp = frame-destroy MOV64rm killed renamable $r13, 1, $noreg, 16, $noreg
    JMP64r killed renamable $rax
  
  bb.2.return_from_switch (ir-block-address-taken %ir-block.return_from_switch):
    RET 0

...
---
name:            coroutine_yield
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    1
  adjustsStack:    true
  hasCalls:        true
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.0):
    liveins: $rdi
  
    renamable $r12 = LEA64r killed renamable $rdi, 1, $noreg, 8, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $r13 = LEA64r killed renamable $rax, 1, $noreg, target-flags(x86-tpoff) @into_caller_buf, $noreg
    CALL64pcrel32 target-flags(x86-plt) @context_switch, csr_64_noneregs, implicit $rsp, implicit $ssp, implicit $r12, implicit $r13, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    RET 0

...
---
name:            coroutine_call
alignment:       16
tracksRegLiveness: true
noPhis:          true
isSSA:           false
noVRegs:         true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  maxAlignment:    16
  adjustsStack:    true
  hasCalls:        true
stack:
  - { id: 0, type: spill-slot, size: 16, alignment: 16 }
  - { id: 1, type: spill-slot, size: 8, alignment: 8 }
  - { id: 2, type: spill-slot, size: 8, alignment: 8 }
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.0):
    liveins: $rdi
  
    renamable $rbp = MOV64rm $noreg, 1, $noreg, 0, $fs :: (load (s64) from `ptr addrspace(257) null`, addrspace 257)
    renamable $xmm0 = MOVAPSrm renamable $rbp, 1, $noreg, target-flags(x86-tpoff) @into_caller_buf, $noreg :: (dereferenceable load (s128) from @into_caller_buf)
    MOVAPSmr %stack.0, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s128) into %stack.0)
    renamable $r12 = LEA64r renamable $rbp, 1, $noreg, target-flags(x86-tpoff) @into_caller_buf, $noreg
    renamable $rax = MOV64rm renamable $rbp, 1, $noreg, target-flags(x86-tpoff) @into_caller_buf + 16, $noreg :: (dereferenceable load (s64) from `ptr getelementptr inbounds (i8, ptr @into_caller_buf, i64 16)`, align 16)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.1)
    renamable $rax = MOV64rm renamable $rbp, 1, $noreg, target-flags(x86-tpoff) @current_coroutine, $noreg :: (dereferenceable load (s64) from @current_coroutine)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %stack.2)
    MOV64mr renamable $rbp, 1, $noreg, target-flags(x86-tpoff) @current_coroutine, $noreg, renamable $rdi :: (store (s64) into @current_coroutine)
    renamable $r13 = LEA64r killed renamable $rdi, 1, $noreg, 8, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    CALL64pcrel32 target-flags(x86-plt) @context_switch, csr_64_noneregs, implicit $rsp, implicit $ssp, implicit $r12, implicit $r13, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %stack.2)
    MOV64mr renamable $rbp, 1, $noreg, target-flags(x86-tpoff) @current_coroutine, $noreg, killed renamable $rax :: (store (s64) into @current_coroutine)
    renamable $xmm0 = MOVAPSrm %stack.0, 1, $noreg, 0, $noreg :: (load (s128) from %stack.0)
    MOVAPSmr renamable $rbp, 1, $noreg, target-flags(x86-tpoff) @into_caller_buf, $noreg, killed renamable $xmm0 :: (store (s128) into @into_caller_buf)
    renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %stack.1)
    MOV64mr killed renamable $rbp, 1, $noreg, target-flags(x86-tpoff) @into_caller_buf + 16, $noreg, killed renamable $rax :: (store (s64) into `ptr getelementptr inbounds (i8, ptr @into_caller_buf, i64 16)`, align 16)
    RET 0

...
