	.text
	.file	"llvm-link"
	.globl	_size_Object                    # -- Begin function _size_Object
	.p2align	4, 0x90
	.type	_size_Object,@function
_size_Object:                           # @_size_Object
# %bb.0:
	movl	$1, %edx
	xorl	%eax, %eax
	retq
.Lfunc_end0:
	.size	_size_Object, .Lfunc_end0-_size_Object
                                        # -- End function
	.weak	_size_any_typ                   # -- Begin function _size_any_typ
	.p2align	4, 0x90
	.type	_size_any_typ,@function
_size_any_typ:                          # @_size_any_typ
	.cfi_startproc
# %bb.0:
	movl	$32, %eax
	movl	$8, %edx
	retq
.Lfunc_end1:
	.size	_size_any_typ, .Lfunc_end1-_size_any_typ
	.cfi_endproc
                                        # -- End function
	.globl	_size_Iterator                  # -- Begin function _size_Iterator
	.p2align	4, 0x90
	.type	_size_Iterator,@function
_size_Iterator:                         # @_size_Iterator
# %bb.0:
	movl	$1, %edx
	xorl	%eax, %eax
	retq
.Lfunc_end2:
	.size	_size_Iterator, .Lfunc_end2-_size_Iterator
                                        # -- End function
	.globl	_size_Iterable                  # -- Begin function _size_Iterable
	.p2align	4, 0x90
	.type	_size_Iterable,@function
_size_Iterable:                         # @_size_Iterable
# %bb.0:
	movl	$1, %edx
	xorl	%eax, %eax
	retq
.Lfunc_end3:
	.size	_size_Iterable, .Lfunc_end3-_size_Iterable
                                        # -- End function
	.globl	_size_Representable             # -- Begin function _size_Representable
	.p2align	4, 0x90
	.type	_size_Representable,@function
_size_Representable:                    # @_size_Representable
# %bb.0:
	movl	$1, %edx
	xorl	%eax, %eax
	retq
.Lfunc_end4:
	.size	_size_Representable, .Lfunc_end4-_size_Representable
                                        # -- End function
	.globl	Representable_B_repr_           # -- Begin function Representable_B_repr_
	.p2align	4, 0x90
	.type	Representable_B_repr_,@function
Representable_B_repr_:                  # @Representable_B_repr_
# %bb.0:
	movq	80(%rdi), %rax
	retq
.Lfunc_end5:
	.size	Representable_B_repr_, .Lfunc_end5-Representable_B_repr_
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function Representable_repr_
.LCPI6_0:
	.byte	79                              # 0x4f
	.byte	98                              # 0x62
	.byte	106                             # 0x6a
	.byte	101                             # 0x65
	.byte	99                              # 0x63
	.byte	116                             # 0x74
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.text
	.globl	Representable_repr_
	.p2align	4, 0x90
	.type	Representable_repr_,@function
Representable_repr_:                    # @Representable_repr_
# %bb.0:
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	movq	%rdi, %rbx
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %r14
	movl	$7, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r15
	movl	.LCPI6_0(%rip), %eax
	movl	%eax, (%r15)
	movw	$29795, 4(%r15)                 # imm = 0x7463
	movl	$16, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	String@GOTPCREL(%rip), %rcx
	movq	%r15, (%rax)
	movabsq	$30064771078, %rdx              # imm = 0x700000006
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rbx)
	movq	%rax, 8(%rbx)
	movl	$9, 24(%rbx)
	movq	%rbx, %rax
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.Lfunc_end6:
	.size	Representable_repr_, .Lfunc_end6-Representable_repr_
                                        # -- End function
	.weak	_size_i32_typ                   # -- Begin function _size_i32_typ
	.p2align	4, 0x90
	.type	_size_i32_typ,@function
_size_i32_typ:                          # @_size_i32_typ
	.cfi_startproc
# %bb.0:
	movl	$4, %eax
	movl	$4, %edx
	retq
.Lfunc_end7:
	.size	_size_i32_typ, .Lfunc_end7-_size_i32_typ
	.cfi_endproc
                                        # -- End function
	.weak	_box_i32_typ                    # -- Begin function _box_i32_typ
	.p2align	4, 0x90
	.type	_box_i32_typ,@function
_box_i32_typ:                           # @_box_i32_typ
	.cfi_startproc
# %bb.0:
	movq	%rdi, %rax
	movl	(%rsi), %ecx
	movq	i32_typ@GOTPCREL(%rip), %rdx
	movq	%rdx, (%rdi)
	movq	%rcx, 16(%rdi)
	movq	$0, 24(%rdi)
	movl	$0, 32(%rdi)
	retq
.Lfunc_end8:
	.size	_box_i32_typ, .Lfunc_end8-_box_i32_typ
	.cfi_endproc
                                        # -- End function
	.weak	_unbox_i32_typ                  # -- Begin function _unbox_i32_typ
	.p2align	4, 0x90
	.type	_unbox_i32_typ,@function
_unbox_i32_typ:                         # @_unbox_i32_typ
	.cfi_startproc
# %bb.0:
	movl	%esi, (%r9)
	retq
.Lfunc_end9:
	.size	_unbox_i32_typ, .Lfunc_end9-_unbox_i32_typ
	.cfi_endproc
                                        # -- End function
	.globl	_size_String                    # -- Begin function _size_String
	.p2align	4, 0x90
	.type	_size_String,@function
_size_String:                           # @_size_String
# %bb.0:
	movl	$16, %eax
	movl	$8, %edx
	retq
.Lfunc_end10:
	.size	_size_String, .Lfunc_end10-_size_String
                                        # -- End function
	.globl	String_B_init_                  # -- Begin function String_B_init_
	.p2align	4, 0x90
	.type	String_B_init_,@function
String_B_init_:                         # @String_B_init_
# %bb.0:
	movq	208(%rdi), %rax
	retq
.Lfunc_end11:
	.size	String_B_init_, .Lfunc_end11-String_B_init_
                                        # -- End function
	.globl	String_B_init_bytesBufferPtri8_lengthPtri32_capacityPtri32 # -- Begin function String_B_init_bytesBufferPtri8_lengthPtri32_capacityPtri32
	.p2align	4, 0x90
	.type	String_B_init_bytesBufferPtri8_lengthPtri32_capacityPtri32,@function
String_B_init_bytesBufferPtri8_lengthPtri32_capacityPtri32: # @String_B_init_bytesBufferPtri8_lengthPtri32_capacityPtri32
# %bb.0:
	movq	216(%rdi), %rax
	retq
.Lfunc_end12:
	.size	String_B_init_bytesBufferPtri8_lengthPtri32_capacityPtri32, .Lfunc_end12-String_B_init_bytesBufferPtri8_lengthPtri32_capacityPtri32
                                        # -- End function
	.globl	String_B_length_                # -- Begin function String_B_length_
	.p2align	4, 0x90
	.type	String_B_length_,@function
String_B_length_:                       # @String_B_length_
# %bb.0:
	movq	224(%rdi), %rax
	retq
.Lfunc_end13:
	.size	String_B_length_, .Lfunc_end13-String_B_length_
                                        # -- End function
	.globl	String_B_capacity_              # -- Begin function String_B_capacity_
	.p2align	4, 0x90
	.type	String_B_capacity_,@function
String_B_capacity_:                     # @String_B_capacity_
# %bb.0:
	movq	232(%rdi), %rax
	retq
.Lfunc_end14:
	.size	String_B_capacity_, .Lfunc_end14-String_B_capacity_
                                        # -- End function
	.globl	String_B_bytes_                 # -- Begin function String_B_bytes_
	.p2align	4, 0x90
	.type	String_B_bytes_,@function
String_B_bytes_:                        # @String_B_bytes_
# %bb.0:
	movq	240(%rdi), %rax
	retq
.Lfunc_end15:
	.size	String_B_bytes_, .Lfunc_end15-String_B_bytes_
                                        # -- End function
	.globl	String_B_append_xPtri8          # -- Begin function String_B_append_xPtri8
	.p2align	4, 0x90
	.type	String_B_append_xPtri8,@function
String_B_append_xPtri8:                 # @String_B_append_xPtri8
# %bb.0:
	movq	248(%rdi), %rax
	retq
.Lfunc_end16:
	.size	String_B_append_xPtri8, .Lfunc_end16-String_B_append_xPtri8
                                        # -- End function
	.globl	String_B_extend_strString       # -- Begin function String_B_extend_strString
	.p2align	4, 0x90
	.type	String_B_extend_strString,@function
String_B_extend_strString:              # @String_B_extend_strString
# %bb.0:
	movq	256(%rdi), %rax
	retq
.Lfunc_end17:
	.size	String_B_extend_strString, .Lfunc_end17-String_B_extend_strString
                                        # -- End function
	.globl	String_B__index_xPtri32         # -- Begin function String_B__index_xPtri32
	.p2align	4, 0x90
	.type	String_B__index_xPtri32,@function
String_B__index_xPtri32:                # @String_B__index_xPtri32
# %bb.0:
	movq	264(%rdi), %rax
	retq
.Lfunc_end18:
	.size	String_B__index_xPtri32, .Lfunc_end18-String_B__index_xPtri32
                                        # -- End function
	.globl	String_B__EQ_otherString        # -- Begin function String_B__EQ_otherString
	.p2align	4, 0x90
	.type	String_B__EQ_otherString,@function
String_B__EQ_otherString:               # @String_B__EQ_otherString
# %bb.0:
	movq	272(%rdi), %rax
	retq
.Lfunc_end19:
	.size	String_B__EQ_otherString, .Lfunc_end19-String_B__EQ_otherString
                                        # -- End function
	.globl	String_B_pop_                   # -- Begin function String_B_pop_
	.p2align	4, 0x90
	.type	String_B_pop_,@function
String_B_pop_:                          # @String_B_pop_
# %bb.0:
	movq	280(%rdi), %rax
	retq
.Lfunc_end20:
	.size	String_B_pop_, .Lfunc_end20-String_B_pop_
                                        # -- End function
	.globl	String_B_copy_                  # -- Begin function String_B_copy_
	.p2align	4, 0x90
	.type	String_B_copy_,@function
String_B_copy_:                         # @String_B_copy_
# %bb.0:
	movq	288(%rdi), %rax
	retq
.Lfunc_end21:
	.size	String_B_copy_, .Lfunc_end21-String_B_copy_
                                        # -- End function
	.globl	String_B_c_string_              # -- Begin function String_B_c_string_
	.p2align	4, 0x90
	.type	String_B_c_string_,@function
String_B_c_string_:                     # @String_B_c_string_
# %bb.0:
	movq	296(%rdi), %rax
	retq
.Lfunc_end22:
	.size	String_B_c_string_, .Lfunc_end22-String_B_c_string_
                                        # -- End function
	.globl	String_B_iterator_              # -- Begin function String_B_iterator_
	.p2align	4, 0x90
	.type	String_B_iterator_,@function
String_B_iterator_:                     # @String_B_iterator_
# %bb.0:
	movq	304(%rdi), %rax
	retq
.Lfunc_end23:
	.size	String_B_iterator_, .Lfunc_end23-String_B_iterator_
                                        # -- End function
	.globl	String_B_repr_                  # -- Begin function String_B_repr_
	.p2align	4, 0x90
	.type	String_B_repr_,@function
String_B_repr_:                         # @String_B_repr_
# %bb.0:
	movq	312(%rdi), %rax
	retq
.Lfunc_end24:
	.size	String_B_repr_, .Lfunc_end24-String_B_repr_
                                        # -- End function
	.globl	String_init_                    # -- Begin function String_init_
	.p2align	4, 0x90
	.type	String_init_,@function
String_init_:                           # @String_init_
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movq	40(%rdi), %rax
	movabsq	$6499063144389013426, %rcx      # imm = 0x5A314F7F0E23EFB2
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %r15
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	movl	$1, %edi
	callq	bump_malloc_inner@PLT
	movq	(%r14,%r15,8), %rcx
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	*8(%rcx)
	movq	16(%r14,%r15,8), %rax
	movq	%rbx, %rdi
	movl	$1, %esi
	callq	*8(%rax)
	movq	8(%r14,%r15,8), %rax
	movq	8(%rax), %rax
	movq	%rbx, %rdi
	xorl	%esi, %esi
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	jmpq	*%rax                           # TAILCALL
.Lfunc_end25:
	.size	String_init_, .Lfunc_end25-String_init_
	.cfi_endproc
                                        # -- End function
	.globl	String_init_bytesBufferPtri8_lengthPtri32_capacityPtri32 # -- Begin function String_init_bytesBufferPtri8_lengthPtri32_capacityPtri32
	.p2align	4, 0x90
	.type	String_init_bytesBufferPtri8_lengthPtri32_capacityPtri32,@function
String_init_bytesBufferPtri8_lengthPtri32_capacityPtri32: # @String_init_bytesBufferPtri8_lengthPtri32_capacityPtri32
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r12
	.cfi_def_cfa_offset 40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movl	88(%rsp), %ebp
	movl	80(%rsp), %r15d
	movq	72(%rsp), %rsi
	movq	40(%rdi), %rax
	movabsq	$6499063144389013426, %rcx      # imm = 0x5A314F7F0E23EFB2
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %r12
	movq	(%rdi,%r12,8), %rax
	movq	%rbx, %rdi
	callq	*8(%rax)
	movq	8(%r14,%r12,8), %rax
	movq	%rbx, %rdi
	movl	%r15d, %esi
	callq	*8(%rax)
	movq	16(%r14,%r12,8), %rax
	movq	8(%rax), %rax
	movq	%rbx, %rdi
	movl	%ebp, %esi
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	jmpq	*%rax                           # TAILCALL
.Lfunc_end26:
	.size	String_init_bytesBufferPtri8_lengthPtri32_capacityPtri32, .Lfunc_end26-String_init_bytesBufferPtri8_lengthPtri32_capacityPtri32
	.cfi_endproc
                                        # -- End function
	.globl	String_length_                  # -- Begin function String_length_
	.p2align	4, 0x90
	.type	String_length_,@function
String_length_:                         # @String_length_
	.cfi_startproc
# %bb.0:
	movq	40(%rdi), %rax
	movabsq	$6499063144389013426, %rcx      # imm = 0x5A314F7F0E23EFB2
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %rax
	movq	8(%rdi,%rax,8), %rax
	movq	%rsi, %rdi
	jmpq	*(%rax)                         # TAILCALL
.Lfunc_end27:
	.size	String_length_, .Lfunc_end27-String_length_
	.cfi_endproc
                                        # -- End function
	.globl	String_capacity_                # -- Begin function String_capacity_
	.p2align	4, 0x90
	.type	String_capacity_,@function
String_capacity_:                       # @String_capacity_
	.cfi_startproc
# %bb.0:
	movq	40(%rdi), %rax
	movabsq	$6499063144389013426, %rcx      # imm = 0x5A314F7F0E23EFB2
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %rax
	movq	16(%rdi,%rax,8), %rax
	movq	%rsi, %rdi
	jmpq	*(%rax)                         # TAILCALL
.Lfunc_end28:
	.size	String_capacity_, .Lfunc_end28-String_capacity_
	.cfi_endproc
                                        # -- End function
	.globl	String_bytes_                   # -- Begin function String_bytes_
	.p2align	4, 0x90
	.type	String_bytes_,@function
String_bytes_:                          # @String_bytes_
	.cfi_startproc
# %bb.0:
	movq	40(%rdi), %rax
	movabsq	$6499063144389013426, %rcx      # imm = 0x5A314F7F0E23EFB2
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %rax
	movq	(%rdi,%rax,8), %rax
	movq	%rsi, %rdi
	jmpq	*(%rax)                         # TAILCALL
.Lfunc_end29:
	.size	String_bytes_, .Lfunc_end29-String_bytes_
	.cfi_endproc
                                        # -- End function
	.globl	String_append_xPtri8            # -- Begin function String_append_xPtri8
	.p2align	4, 0x90
	.type	String_append_xPtri8,@function
String_append_xPtri8:                   # @String_append_xPtri8
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$184, %rsp
	.cfi_def_cfa_offset 240
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rcx, 72(%rsp)                  # 8-byte Spill
	movq	%rdx, %r14
	movq	%rsi, %rbx
	movq	%rdi, %r13
	movabsq	$6499063144389013426, %rdx      # imm = 0x5A314F7F0E23EFB2
	movq	40(%rsi), %rax
	movq	8(%rsi), %rcx
	imulq	%rdx, %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rsi), %rdx
	movl	(%rax,%rdx,4), %eax
	movslq	%eax, %r15
	movq	8(%rsi,%r15,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movl	%eax, %ebp
	movq	16(%rbx,%r15,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	cmpl	%eax, %ebp
	jge	.LBB30_2
# %bb.1:
	leaq	176(%rsp), %rbp
	leaq	148(%rsp), %rax
	movq	%rax, 40(%rsp)                  # 8-byte Spill
	leaq	144(%rsp), %rax
	movq	%rax, 56(%rsp)                  # 8-byte Spill
	leaq	140(%rsp), %rax
	movq	%rax, 48(%rsp)                  # 8-byte Spill
	leaq	136(%rsp), %r12
	leaq	168(%rsp), %rax
	movq	%rax, 16(%rsp)                  # 8-byte Spill
	leaq	120(%rsp), %rax
	movq	%rax, 64(%rsp)                  # 8-byte Spill
	leaq	152(%rsp), %rax
	movq	%rax, 8(%rsp)                   # 8-byte Spill
	leaq	160(%rsp), %rax
	movq	%rax, (%rsp)                    # 8-byte Spill
	jmp	.LBB30_7
.LBB30_2:
	movq	%r13, 32(%rsp)                  # 8-byte Spill
	movq	16(%rbx,%r15,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
                                        # kill: def $eax killed $eax def $rax
	leal	(%rax,%rax), %esi
	movq	16(%rbx,%r15,8), %rax
	movq	%r14, %rdi
	callq	*8(%rax)
	movq	(%rbx,%r15,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movq	%rax, %r13
	movq	16(%rbx,%r15,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movslq	%eax, %rdi
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	callq	bump_malloc_inner@PLT
	movq	(%rbx,%r15,8), %rcx
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	*8(%rcx)
	movq	8(%rbx,%r15,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	leaq	112(%rsp), %rbp
	leaq	132(%rsp), %rsi
	leaq	128(%rsp), %rcx
	leaq	124(%rsp), %rdx
	leaq	80(%rsp), %rdi
	testl	%eax, %eax
	movq	%rdi, 64(%rsp)                  # 8-byte Spill
	movq	%rcx, 56(%rsp)                  # 8-byte Spill
	movq	%rdx, 48(%rsp)                  # 8-byte Spill
	movq	%rsi, 40(%rsp)                  # 8-byte Spill
	jle	.LBB30_3
# %bb.4:                                # %.lr.ph
	xorl	%ebp, %ebp
	.p2align	4, 0x90
.LBB30_5:                               # %._crit_edge
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rbx,%r15,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movzbl	(%r13,%rbp), %ecx
	movb	%cl, (%rax,%rbp)
	movq	8(%rbx,%r15,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	incq	%rbp
	cmpl	%eax, %ebp
	jl	.LBB30_5
# %bb.6:
	movq	32(%rsp), %r13                  # 8-byte Reload
	leaq	104(%rsp), %rax
	movq	%rax, 16(%rsp)                  # 8-byte Spill
	leaq	88(%rsp), %rax
	movq	%rax, 8(%rsp)                   # 8-byte Spill
	leaq	96(%rsp), %rax
	movq	%rax, (%rsp)                    # 8-byte Spill
	leaq	28(%rsp), %r12
	leaq	112(%rsp), %rbp
	jmp	.LBB30_7
.LBB30_3:
	movq	32(%rsp), %r13                  # 8-byte Reload
	leaq	104(%rsp), %rax
	movq	%rax, 16(%rsp)                  # 8-byte Spill
	leaq	88(%rsp), %rax
	movq	%rax, 8(%rsp)                   # 8-byte Spill
	leaq	96(%rsp), %rax
	movq	%rax, (%rsp)                    # 8-byte Spill
	leaq	28(%rsp), %r12
.LBB30_7:                               # %.thread
	movq	(%rbx,%r15,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movq	%rax, (%rbp)
	movq	8(%rbx,%r15,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movq	40(%rsp), %rcx                  # 8-byte Reload
	movl	%eax, (%rcx)
	movq	(%rbp), %rcx
	cltq
	movzbl	272(%rsp), %edx
	movb	%dl, (%rcx,%rax)
	movq	8(%rbx,%r15,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
                                        # kill: def $eax killed $eax def $rax
	movq	56(%rsp), %rcx                  # 8-byte Reload
	movl	%eax, (%rcx)
	movq	48(%rsp), %rcx                  # 8-byte Reload
	movl	$1, (%rcx)
	leal	1(%rax), %esi
	movl	%esi, (%r12)
	movq	8(%rbx,%r15,8), %rax
	movq	%r14, %rdi
	callq	*8(%rax)
	movq	16(%rsp), %rax                  # 8-byte Reload
	movq	%rbx, (%rax)
	movq	(%rsp), %rax                    # 8-byte Reload
	movq	%r14, (%rax)
	movq	72(%rsp), %rdx                  # 8-byte Reload
	movq	8(%rsp), %rax                   # 8-byte Reload
	movq	%rdx, (%rax)
	movq	64(%rsp), %rdi                  # 8-byte Reload
	movl	%r15d, (%rdi)
	movq	40(%rbx), %rax
	movabsq	$6499063144389013426, %rsi      # imm = 0x5A314F7F0E23EFB2
	imulq	8(%rbx), %rsi
	movq	%rsi, %rcx
	shrq	$32, %rcx
	xorq	%rsi, %rcx
	andq	16(%rbx), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, (%rdi)
	movl	%eax, 24(%r13)
	movq	%rdx, 16(%r13)
	movq	%r14, 8(%r13)
	movq	%rbx, (%r13)
	movq	%r13, %rax
	addq	$184, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end30:
	.size	String_append_xPtri8, .Lfunc_end30-String_append_xPtri8
	.cfi_endproc
                                        # -- End function
	.globl	String_extend_strString         # -- Begin function String_extend_strString
	.p2align	4, 0x90
	.type	String_extend_strString,@function
String_extend_strString:                # @String_extend_strString
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$168, %rsp
	.cfi_def_cfa_offset 224
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rcx, 64(%rsp)                  # 8-byte Spill
	movq	%rdx, %r14
	movq	%rsi, %rbx
	movq	%rdi, 72(%rsp)                  # 8-byte Spill
	movq	264(%rsp), %r13
	movq	272(%rsp), %rdx
	movq	256(%rsp), %r12
	movabsq	$6499063144389013426, %rdi      # imm = 0x5A314F7F0E23EFB2
	movq	40(%rsi), %rax
	movq	8(%rsi), %rcx
	imulq	%rdi, %rcx
	movq	%rcx, %r8
	shrq	$32, %r8
	xorq	%rcx, %r8
	andq	16(%rsi), %r8
	movl	(%rax,%r8,4), %eax
	movl	%eax, 4(%rsp)                   # 4-byte Spill
	movq	40(%r12), %rax
	movq	8(%r12), %rcx
	imulq	%rdi, %rcx
	movq	%rcx, %rdi
	shrq	$32, %rdi
	xorq	%rcx, %rdi
	andq	16(%r12), %rdi
	movslq	(%rax,%rdi,4), %r15
	movq	%rsp, %rbp
	movq	%r12, %rdi
	movq	%r13, %rsi
	movl	%r15d, %ecx
	movq	%rbp, %r8
	callq	*56(%r12,%r15,8)
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	movq	%r12, %rdi
	movq	%r13, %rsi
	movq	280(%rsp), %rdx
	movl	%r15d, %ecx
	movq	%r12, %r8
	movq	%r13, %r9
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	pushq	%rdx
	movq	%rdx, %rbp
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	%rax, 56(%rsp)
	movq	%r12, %rdi
	movq	%r13, %rsi
	movq	%rbp, %rdx
	movl	%r15d, %ecx
	movq	%rsp, %r8
	callq	*40(%r12,%r15,8)
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	movq	%r12, %rdi
	movq	%r13, %rsi
	movq	%rbp, %rdx
	movl	%r15d, %ecx
	movq	%r12, %r8
	movq	%r13, %r9
	leaq	8(%rsp), %r10
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movl	%eax, %ebp
	movslq	4(%rsp), %r13                   # 4-byte Folded Reload
	movq	8(%rbx,%r13,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movl	%eax, %r12d
	addl	%ebp, %r12d
	movq	16(%rbx,%r13,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movl	%eax, %r15d
	movq	8(%rbx,%r13,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movl	%eax, %esi
	cmpl	%r15d, %r12d
	jge	.LBB31_5
# %bb.1:
	movq	8(%rbx,%r13,8), %rax
	movq	%r14, %rdi
	movl	%esi, %r15d
	callq	*(%rax)
	movl	%r15d, %edx
	addl	%ebp, %eax
	leaq	132(%rsp), %rcx
	movq	%rcx, 24(%rsp)                  # 8-byte Spill
	leaq	128(%rsp), %rcx
	movq	%rcx, 32(%rsp)                  # 8-byte Spill
	leaq	112(%rsp), %r12
	leaq	16(%rsp), %r15
	leaq	152(%rsp), %rcx
	movq	%rcx, 48(%rsp)                  # 8-byte Spill
	leaq	160(%rsp), %rcx
	movq	%rcx, 40(%rsp)                  # 8-byte Spill
	cmpl	%eax, %edx
	jge	.LBB31_12
# %bb.2:                                # %.lr.ph146
	movq	56(%rsp), %r15
	movslq	%edx, %r12
	movl	%ebp, 4(%rsp)                   # 4-byte Spill
	xorl	%ebp, %ebp
	.p2align	4, 0x90
.LBB31_3:                               # %._crit_edge
                                        # =>This Inner Loop Header: Depth=1
	movslq	%ebp, %rbp
	movq	(%rbx,%r13,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movzbl	(%r15,%rbp), %ecx
	movb	%cl, (%rax,%r12)
	incl	%ebp
	movq	8(%rbx,%r13,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	addl	4(%rsp), %eax                   # 4-byte Folded Reload
	incq	%r12
	cmpl	%eax, %r12d
	jl	.LBB31_3
# %bb.4:
	movl	4(%rsp), %ebp                   # 4-byte Reload
	leaq	16(%rsp), %r15
	leaq	112(%rsp), %r12
	jmp	.LBB31_12
.LBB31_5:
	addl	%ebp, %esi
	movq	16(%rbx,%r13,8), %rax
	movq	%r14, %rdi
	callq	*8(%rax)
	movq	(%rbx,%r13,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movq	%rax, 104(%rsp)
	movq	16(%rbx,%r13,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movslq	%eax, %rdi
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	callq	bump_malloc_inner@PLT
	movq	(%rbx,%r13,8), %rcx
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	*8(%rcx)
	movq	8(%rbx,%r13,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	addl	%ebp, %eax
	leaq	124(%rsp), %rcx
	movq	%rcx, 24(%rsp)                  # 8-byte Spill
	leaq	120(%rsp), %rcx
	movq	%rcx, 32(%rsp)                  # 8-byte Spill
	leaq	96(%rsp), %r12
	leaq	8(%rsp), %r15
	leaq	136(%rsp), %rcx
	movq	%rcx, 48(%rsp)                  # 8-byte Spill
	leaq	144(%rsp), %rcx
	movq	%rcx, 40(%rsp)                  # 8-byte Spill
	testl	%eax, %eax
	jle	.LBB31_12
# %bb.6:                                # %.lr.ph
	movl	%ebp, 4(%rsp)                   # 4-byte Spill
	movq	56(%rsp), %rax
	movq	%rax, 88(%rsp)                  # 8-byte Spill
	xorl	%r12d, %r12d
	movq	104(%rsp), %rax
	movq	%rax, 80(%rsp)                  # 8-byte Spill
	xorl	%ebp, %ebp
	jmp	.LBB31_7
	.p2align	4, 0x90
.LBB31_8:                               #   in Loop: Header=BB31_7 Depth=1
	movq	80(%rsp), %rcx                  # 8-byte Reload
	movzbl	(%rcx,%r12), %ecx
	movb	%cl, (%rax,%r12)
.LBB31_10:                              # %._crit_edge1
                                        #   in Loop: Header=BB31_7 Depth=1
	movq	8(%rbx,%r13,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	addl	4(%rsp), %eax                   # 4-byte Folded Reload
	incq	%r12
	cmpl	%eax, %r12d
	jge	.LBB31_11
.LBB31_7:                               # =>This Inner Loop Header: Depth=1
	movq	8(%rbx,%r13,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movl	%eax, %r15d
	movq	(%rbx,%r13,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	cmpl	%r15d, %r12d
	jl	.LBB31_8
# %bb.9:                                #   in Loop: Header=BB31_7 Depth=1
	movslq	%ebp, %rbp
	movq	88(%rsp), %rcx                  # 8-byte Reload
	movzbl	(%rcx,%rbp), %ecx
	movb	%cl, (%rax,%r12)
	incl	%ebp
	jmp	.LBB31_10
.LBB31_11:
	movl	4(%rsp), %ebp                   # 4-byte Reload
	leaq	8(%rsp), %r15
	leaq	96(%rsp), %r12
.LBB31_12:                              # %.thread
	movq	8(%rbx,%r13,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movq	24(%rsp), %rcx                  # 8-byte Reload
	movl	%eax, (%rcx)
	addl	%eax, %ebp
	movq	32(%rsp), %rax                  # 8-byte Reload
	movl	%ebp, (%rax)
	movq	8(%rbx,%r13,8), %rax
	movq	%r14, %rdi
	movl	%ebp, %esi
	callq	*8(%rax)
	movq	%rbx, (%r12)
	movq	40(%rsp), %rax                  # 8-byte Reload
	movq	%r14, (%rax)
	movq	64(%rsp), %rdx                  # 8-byte Reload
	movq	48(%rsp), %rax                  # 8-byte Reload
	movq	%rdx, (%rax)
	movl	%r13d, (%r15)
	movq	40(%rbx), %rax
	movabsq	$6499063144389013426, %rsi      # imm = 0x5A314F7F0E23EFB2
	imulq	8(%rbx), %rsi
	movq	%rsi, %rcx
	shrq	$32, %rcx
	xorq	%rsi, %rcx
	andq	16(%rbx), %rcx
	movl	(%rax,%rcx,4), %ecx
	movl	%ecx, (%r15)
	movq	72(%rsp), %rax                  # 8-byte Reload
	movl	%ecx, 24(%rax)
	movq	%rdx, 16(%rax)
	movq	%r14, 8(%rax)
	movq	%rbx, (%rax)
	addq	$168, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end31:
	.size	String_extend_strString, .Lfunc_end31-String_extend_strString
	.cfi_endproc
                                        # -- End function
	.globl	String__index_xPtri32           # -- Begin function String__index_xPtri32
	.p2align	4, 0x90
	.type	String__index_xPtri32,@function
String__index_xPtri32:                  # @String__index_xPtri32
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$24, %rsp
	.cfi_def_cfa_offset 80
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rsi, %r15
	movq	%rdi, %rbp
	movl	104(%rsp), %r14d
	movq	40(%rdi), %rax
	movabsq	$6499063144389013426, %rcx      # imm = 0x5A314F7F0E23EFB2
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %r12
	movq	8(%rdi,%r12,8), %rax
	movq	%rsi, %rdi
	callq	*(%rax)
	decl	%eax
	cmpl	%eax, %r14d
	jle	.LBB32_2
# %bb.1:
	movq	current_coroutine@GOTTPOFF(%rip), %rax
	movq	%fs:0, %r13
	movq	%r12, 8(%rsp)                   # 8-byte Spill
	movq	(%r13,%rax), %r12
	addq	$8, %r12
	addq	into_caller_buf@GOTTPOFF(%rip), %r13
	movq	%r15, 16(%rsp)                  # 8-byte Spill
	callq	context_switch@PLT
	movq	8(%rsp), %r12                   # 8-byte Reload
	movq	16(%rsp), %r15                  # 8-byte Reload
	movl	104(%rsp), %r14d
.LBB32_2:                               # %._crit_edge
	testl	%r14d, %r14d
	js	.LBB32_4
# %bb.3:
	movq	(%rbp,%r12,8), %rax
	movq	%r15, %rdi
	callq	*(%rax)
	movl	%r14d, %ecx
	addq	%rax, %rcx
	jmp	.LBB32_7
.LBB32_4:
	movq	8(%rbp,%r12,8), %rax
	movq	%r15, %rdi
	callq	*(%rax)
	addl	%r14d, %eax
	jns	.LBB32_6
# %bb.5:
	movq	current_coroutine@GOTTPOFF(%rip), %rax
	movq	%fs:0, %r13
	movq	%r12, 8(%rsp)                   # 8-byte Spill
	movq	(%r13,%rax), %r12
	addq	$8, %r12
	addq	into_caller_buf@GOTTPOFF(%rip), %r13
	movq	%r15, 16(%rsp)                  # 8-byte Spill
	callq	context_switch@PLT
	movq	8(%rsp), %r12                   # 8-byte Reload
	movq	16(%rsp), %r15                  # 8-byte Reload
	movl	104(%rsp), %r14d
.LBB32_6:                               # %._crit_edge1
	movq	(%rbp,%r12,8), %rax
	movq	%r15, %rdi
	callq	*(%rax)
	movq	%rax, %rbx
	movq	8(%rbp,%r12,8), %rax
	movq	%r15, %rdi
	callq	*(%rax)
	addl	%r14d, %eax
	movslq	%eax, %rcx
	addq	%rbx, %rcx
.LBB32_7:
	movzbl	(%rcx), %eax
	addq	$24, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end32:
	.size	String__index_xPtri32, .Lfunc_end32-String__index_xPtri32
	.cfi_endproc
                                        # -- End function
	.globl	String__EQ_otherString          # -- Begin function String__EQ_otherString
	.p2align	4, 0x90
	.type	String__EQ_otherString,@function
String__EQ_otherString:                 # @String__EQ_otherString
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$56, %rsp
	.cfi_def_cfa_offset 112
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rsi, %r12
	movq	%rdi, %r14
	movq	152(%rsp), %r15
	movq	136(%rsp), %rbp
	movq	40(%rdi), %rax
	movabsq	$6499063144389013426, %rcx      # imm = 0x5A314F7F0E23EFB2
	movq	8(%rdi), %rdx
	imulq	%rcx, %rdx
	movq	%rdx, %rsi
	shrq	$32, %rsi
	xorq	%rdx, %rsi
	andq	16(%rdi), %rsi
	movslq	(%rax,%rsi,4), %rsi
	movq	40(%rbp), %rax
	imulq	8(%rbp), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rbp), %rdx
	movslq	(%rax,%rdx,4), %rbx
	movq	%rsi, 16(%rsp)                  # 8-byte Spill
	movq	8(%rdi,%rsi,8), %rax
	movq	%r12, %rdi
	callq	*(%rax)
	movl	%eax, 24(%rsp)                  # 4-byte Spill
	leaq	8(%rsp), %r13
	movq	%rbp, %rdi
	movq	144(%rsp), %rsi
	movq	%r15, %rdx
	movl	%ebx, %ecx
	movq	%r13, %r8
	callq	*40(%rbp,%rbx,8)
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	movq	%rbp, %rdi
	movq	152(%rsp), %rsi
	movq	%r15, %rdx
	movl	%ebx, %ecx
	movq	%rbp, %r8
	movq	%rsi, %r9
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	movq	%rbx, 64(%rsp)                  # 8-byte Spill
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	cmpl	%eax, 24(%rsp)                  # 4-byte Folded Reload
	jne	.LBB33_1
# %bb.2:                                # %.preheader
	xorl	%ebx, %ebx
	movq	16(%rsp), %r15                  # 8-byte Reload
	movq	%r12, 40(%rsp)                  # 8-byte Spill
	movq	%r14, 32(%rsp)                  # 8-byte Spill
	movq	48(%rsp), %r13                  # 8-byte Reload
	.p2align	4, 0x90
.LBB33_3:                               # =>This Inner Loop Header: Depth=1
	movq	8(%r14,%r15,8), %rax
	movq	%r12, %rdi
	callq	*(%rax)
	cmpl	%eax, %ebx
	setge	%cl
	jge	.LBB33_4
# %bb.5:                                #   in Loop: Header=BB33_3 Depth=1
	movl	%ecx, 16(%rsp)                  # 4-byte Spill
	movq	(%r14,%r15,8), %rax
	movq	%r12, %rdi
	callq	*(%rax)
	movq	%rax, 24(%rsp)                  # 8-byte Spill
	movq	136(%rsp), %r12
	movq	%r12, %rdi
	movq	144(%rsp), %rbp
	movq	%rbp, %rsi
	movq	152(%rsp), %r14
	movq	%r14, %rdx
	movl	%r13d, %ecx
	leaq	8(%rsp), %r8
	callq	*56(%r12,%r13,8)
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	movq	%r12, %rdi
	movq	%rbp, %rsi
	movq	%r14, %rdx
	movl	%r13d, %ecx
	movq	%r12, %r8
	movq	%rbp, %r9
	leaq	16(%rsp), %r10
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%r14
	movq	64(%rsp), %r14                  # 8-byte Reload
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	24(%rsp), %rcx                  # 8-byte Reload
	movzbl	(%rcx,%rbx), %ecx
	movq	40(%rsp), %r12                  # 8-byte Reload
	cmpb	(%rax,%rbx), %cl
	leaq	1(%rbx), %rbx
	je	.LBB33_3
# %bb.6:
	leaq	14(%rsp), %rax
	movl	16(%rsp), %ecx                  # 4-byte Reload
	jmp	.LBB33_7
.LBB33_1:
	leaq	15(%rsp), %rax
	xorl	%ecx, %ecx
	jmp	.LBB33_7
.LBB33_4:
	leaq	13(%rsp), %rax
.LBB33_7:                               # %.thread
	movb	%cl, (%rax)
	movl	%ecx, %eax
	addq	$56, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end33:
	.size	String__EQ_otherString, .Lfunc_end33-String__EQ_otherString
	.cfi_endproc
                                        # -- End function
	.globl	String_pop_                     # -- Begin function String_pop_
	.p2align	4, 0x90
	.type	String_pop_,@function
String_pop_:                            # @String_pop_
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r12
	.cfi_def_cfa_offset 32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	pushq	%rax
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -40
	.cfi_offset %r12, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movq	40(%rdi), %rax
	movabsq	$6499063144389013426, %rcx      # imm = 0x5A314F7F0E23EFB2
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %r12
	movq	8(%rdi,%r12,8), %rax
	movq	%rsi, %rdi
	callq	*(%rax)
	testl	%eax, %eax
	je	.LBB34_1
# %bb.2:
	movq	8(%r14,%r12,8), %rax
	movq	%rbx, %rdi
	callq	*(%rax)
                                        # kill: def $eax killed $eax def $rax
	leal	-1(%rax), %esi
	movq	8(%r14,%r12,8), %rax
	movq	%rbx, %rdi
	callq	*8(%rax)
	movq	(%r14,%r12,8), %rax
	movq	%rbx, %rdi
	callq	*(%rax)
	movq	%rax, %r15
	movq	8(%r14,%r12,8), %rax
	movq	%rbx, %rdi
	callq	*(%rax)
	cltq
	movzbl	(%r15,%rax), %edx
	movq	i8_typ@GOTPCREL(%rip), %rax
	jmp	.LBB34_3
.LBB34_1:
	movq	nil_typ@GOTPCREL(%rip), %rax
                                        # implicit-def: $dl
.LBB34_3:
	addq	$8, %rsp
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end34:
	.size	String_pop_, .Lfunc_end34-String_pop_
	.cfi_endproc
                                        # -- End function
	.globl	String_copy_                    # -- Begin function String_copy_
	.p2align	4, 0x90
	.type	String_copy_,@function
String_copy_:                           # @String_copy_
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	pushq	%rax
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, (%rsp)                    # 8-byte Spill
	movq	40(%rsi), %rax
	movabsq	$6499063144389013426, %rcx      # imm = 0x5A314F7F0E23EFB2
	imulq	8(%rsi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rsi), %rdx
	movslq	(%rax,%rdx,4), %rbx
	movq	8(%rsi,%rbx,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movslq	%eax, %rdi
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r12
	movq	8(%r15,%rbx,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	testl	%eax, %eax
	jle	.LBB35_3
# %bb.1:                                # %.lr.ph
	xorl	%r13d, %r13d
	.p2align	4, 0x90
.LBB35_2:                               # %._crit_edge
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r15,%rbx,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movzbl	(%rax,%r13), %eax
	movb	%al, (%r12,%r13)
	movq	8(%r15,%rbx,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	incq	%r13
	cmpl	%eax, %r13d
	jl	.LBB35_2
.LBB35_3:                               # %._crit_edge._crit_edge
	movq	8(%r15,%rbx,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movq	8(%r15,%rbx,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	movl	$16, %edi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r13
	movq	8(%r15,%rbx,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movl	%eax, %ebp
	movq	8(%r15,%rbx,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movq	String@GOTPCREL(%rip), %rcx
	movq	%r12, (%r13)
	movl	%ebp, 8(%r13)
	movl	%eax, 12(%r13)
	movq	(%rsp), %rax                    # 8-byte Reload
	movq	%rcx, (%rax)
	movq	%r13, 8(%rax)
	movl	$9, 24(%rax)
	addq	$8, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end35:
	.size	String_copy_, .Lfunc_end35-String_copy_
	.cfi_endproc
                                        # -- End function
	.globl	String_c_string_                # -- Begin function String_c_string_
	.p2align	4, 0x90
	.type	String_c_string_,@function
String_c_string_:                       # @String_c_string_
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r13
	.cfi_def_cfa_offset 32
	pushq	%r12
	.cfi_def_cfa_offset 40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r13, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movq	40(%rdi), %rax
	movabsq	$6499063144389013426, %rcx      # imm = 0x5A314F7F0E23EFB2
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %r12
	movq	8(%rdi,%r12,8), %rax
	movq	%rsi, %rdi
	callq	*(%rax)
	incl	%eax
	movslq	%eax, %rdi
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r15
	movq	8(%r14,%r12,8), %rax
	movq	%rbx, %rdi
	callq	*(%rax)
	testl	%eax, %eax
	jle	.LBB36_3
# %bb.1:                                # %.lr.ph
	xorl	%r13d, %r13d
	.p2align	4, 0x90
.LBB36_2:                               # %._crit_edge
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r14,%r12,8), %rax
	movq	%rbx, %rdi
	callq	*(%rax)
	movzbl	(%rax,%r13), %eax
	movb	%al, (%r15,%r13)
	movq	8(%r14,%r12,8), %rax
	movq	%rbx, %rdi
	callq	*(%rax)
	incq	%r13
	cmpl	%eax, %r13d
	jl	.LBB36_2
.LBB36_3:                               # %._crit_edge._crit_edge
	movq	8(%r14,%r12,8), %rax
	movq	%rbx, %rdi
	callq	*(%rax)
	cltq
	movb	$0, (%r15,%rax)
	movq	%r15, %rax
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end36:
	.size	String_c_string_, .Lfunc_end36-String_c_string_
	.cfi_endproc
                                        # -- End function
	.globl	String_iterator_                # -- Begin function String_iterator_
	.p2align	4, 0x90
	.type	String_iterator_,@function
String_iterator_:                       # @String_iterator_
# %bb.0:
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	movq	%rcx, %rbx
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %r12
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	movl	$40, %edi
	callq	bump_malloc_inner@PLT
	movq	StringIterator@GOTPCREL(%rip), %rcx
	movq	40(%r15), %rdx
	movabsq	$6499063144389013426, %rsi      # imm = 0x5A314F7F0E23EFB2
	imulq	8(%r15), %rsi
	movq	%rsi, %rdi
	shrq	$32, %rdi
	xorq	%rsi, %rdi
	andq	16(%r15), %rdi
	movl	(%rdx,%rdi,4), %edx
	movq	%r15, (%rax)
	movq	%r14, 8(%rax)
	movq	%rbx, 16(%rax)
	movl	%edx, 24(%rax)
	movl	$0, 32(%rax)
	movq	%rax, 8(%r12)
	movq	%rcx, (%r12)
	movl	$15, 24(%r12)
	movq	%r12, %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	retq
.Lfunc_end37:
	.size	String_iterator_, .Lfunc_end37-String_iterator_
                                        # -- End function
	.globl	String_repr_                    # -- Begin function String_repr_
	.p2align	4, 0x90
	.type	String_repr_,@function
String_repr_:                           # @String_repr_
# %bb.0:
	movq	%rdi, %rax
	movq	40(%rsi), %rdi
	movabsq	$6499063144389013426, %r8       # imm = 0x5A314F7F0E23EFB2
	imulq	8(%rsi), %r8
	movq	%r8, %r9
	shrq	$32, %r9
	xorq	%r8, %r9
	andq	16(%rsi), %r9
	movl	(%rdi,%r9,4), %edi
	movq	%rcx, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rsi, (%rax)
	movl	%edi, 24(%rax)
	retq
.Lfunc_end38:
	.size	String_repr_, .Lfunc_end38-String_repr_
                                        # -- End function
	.globl	_size_StringIterator            # -- Begin function _size_StringIterator
	.p2align	4, 0x90
	.type	_size_StringIterator,@function
_size_StringIterator:                   # @_size_StringIterator
# %bb.0:
	movl	$40, %eax
	movl	$8, %edx
	retq
.Lfunc_end39:
	.size	_size_StringIterator, .Lfunc_end39-_size_StringIterator
                                        # -- End function
	.globl	StringIterator_B_init_strString # -- Begin function StringIterator_B_init_strString
	.p2align	4, 0x90
	.type	StringIterator_B_init_strString,@function
StringIterator_B_init_strString:        # @StringIterator_B_init_strString
# %bb.0:
	movq	104(%rdi), %rax
	retq
.Lfunc_end40:
	.size	StringIterator_B_init_strString, .Lfunc_end40-StringIterator_B_init_strString
                                        # -- End function
	.globl	StringIterator_B_next_          # -- Begin function StringIterator_B_next_
	.p2align	4, 0x90
	.type	StringIterator_B_next_,@function
StringIterator_B_next_:                 # @StringIterator_B_next_
# %bb.0:
	movq	112(%rdi), %rax
	retq
.Lfunc_end41:
	.size	StringIterator_B_next_, .Lfunc_end41-StringIterator_B_next_
                                        # -- End function
	.globl	StringIterator_init_strString   # -- Begin function StringIterator_init_strString
	.p2align	4, 0x90
	.type	StringIterator_init_strString,@function
StringIterator_init_strString:          # @StringIterator_init_strString
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movq	64(%rsp), %rdx
	movq	72(%rsp), %rcx
	movq	56(%rsp), %rsi
	movq	40(%rdi), %rax
	movabsq	$-7260570988945952630, %rdi     # imm = 0x9B3D4527595EB08A
	imulq	8(%r14), %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%r14), %r8
	movslq	(%rax,%r8,4), %r15
	movq	40(%rsi), %rax
	movabsq	$6499063144389013426, %rdi      # imm = 0x5A314F7F0E23EFB2
	imulq	8(%rsi), %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%rsi), %r8
	movl	(%rax,%r8,4), %r8d
	movq	(%r14,%r15,8), %rax
	movq	%rbx, %rdi
	callq	*8(%rax)
	movq	8(%r14,%r15,8), %rax
	movq	8(%rax), %rax
	movq	%rbx, %rdi
	xorl	%esi, %esi
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	jmpq	*%rax                           # TAILCALL
.Lfunc_end42:
	.size	StringIterator_init_strString, .Lfunc_end42-StringIterator_init_strString
	.cfi_endproc
                                        # -- End function
	.globl	StringIterator_next_            # -- Begin function StringIterator_next_
	.p2align	4, 0x90
	.type	StringIterator_next_,@function
StringIterator_next_:                   # @StringIterator_next_
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$184, %rsp
	.cfi_def_cfa_offset 240
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rdx, %rbx
	movq	%rsi, %r15
	movq	%rdi, 64(%rsp)                  # 8-byte Spill
	movq	40(%rsi), %rax
	movabsq	$-7260570988945952630, %rcx     # imm = 0x9B3D4527595EB08A
	imulq	8(%rsi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rsi), %rdx
	movslq	(%rax,%rdx,4), %r14
	movq	8(%rsi,%r14,8), %rax
	movq	%rbx, %rdi
	callq	*(%rax)
	movl	%eax, 20(%rsp)                  # 4-byte Spill
	movq	%r14, 56(%rsp)                  # 8-byte Spill
	movq	(%r15,%r14,8), %rax
	leaq	152(%rsp), %rdi
	movq	%rbx, 8(%rsp)                   # 8-byte Spill
	movq	%rbx, %rsi
	callq	*(%rax)
	movslq	176(%rsp), %r13
	movq	168(%rsp), %r12
	movq	152(%rsp), %rbx
	movq	160(%rsp), %r14
	movq	%rsp, %rbp
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movq	%r12, %rdx
	movl	%r13d, %ecx
	movq	%rbp, %r8
	callq	*40(%rbx,%r13,8)
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movq	%r12, %rdx
	movl	%r13d, %ecx
	movq	%rbx, %r8
	movq	%r14, %r9
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	cmpl	%eax, 20(%rsp)                  # 4-byte Folded Reload
	jge	.LBB43_1
# %bb.2:
	movq	56(%rsp), %rbp                  # 8-byte Reload
	movq	8(%r15,%rbp,8), %rax
	movq	8(%rsp), %rbx                   # 8-byte Reload
	movq	%rbx, %rdi
	callq	*(%rax)
                                        # kill: def $eax killed $eax def $rax
	leal	1(%rax), %esi
	movq	8(%r15,%rbp,8), %rax
	movq	%rbx, %rdi
	callq	*8(%rax)
	movq	(%r15,%rbp,8), %rax
	leaq	120(%rsp), %rdi
	movq	%rbx, %rsi
	callq	*(%rax)
	movslq	144(%rsp), %rbx
	movq	136(%rsp), %r14
	movq	120(%rsp), %r12
	movq	128(%rsp), %r13
	movq	%r12, %rdi
	movq	%r13, %rsi
	movq	%r14, %rdx
	movl	%ebx, %ecx
	movq	%rsp, %r8
	callq	*56(%r12,%rbx,8)
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	movq	%r12, %rdi
	movq	%r13, %rsi
	movq	%r14, %rdx
	movl	%ebx, %ecx
	movq	%r12, %r8
	movq	%r13, %r9
	leaq	8(%rsp), %r10
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	8(%r15,%rbp,8), %rax
	movq	8(%rsp), %rbx                   # 8-byte Reload
	movq	%rbx, %rdi
	callq	*(%rax)
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	movl	$1, %edi
	callq	bump_malloc_inner@PLT
	movq	Character@GOTPCREL(%rip), %rcx
	movq	%rcx, 24(%rsp)
	movq	%rax, 32(%rsp)
	movl	$9, 48(%rsp)
	movq	(%r15,%rbp,8), %rax
	leaq	88(%rsp), %rdi
	movq	%rbx, %rsi
	callq	*(%rax)
	movslq	112(%rsp), %rbx
	movq	104(%rsp), %r14
	movq	88(%rsp), %r12
	movq	96(%rsp), %r13
	movq	%r12, %rdi
	movq	%r13, %rsi
	movq	%r14, %rdx
	movl	%ebx, %ecx
	movq	%rsp, %r8
	callq	*56(%r12,%rbx,8)
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	movq	%r12, %rdi
	movq	%r13, %rsi
	movq	%r14, %rdx
	movl	%ebx, %ecx
	movq	%r12, %r8
	movq	%r13, %r9
	leaq	8(%rsp), %r10
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	%rax, %rbx
	movq	8(%r15,%rbp,8), %rax
	movq	8(%rsp), %rdi                   # 8-byte Reload
	callq	*(%rax)
	decl	%eax
	cltq
	movq	24(%rsp), %r14
	movq	32(%rsp), %r13
	movq	40(%rsp), %r15
	movslq	48(%rsp), %r12
	movq	_parameterization_Ptri8@GOTPCREL(%rip), %rcx
	movzbl	(%rbx,%rax), %ebx
	movq	%rcx, 80(%rsp)
	movq	16(%r14,%r12,8), %rax
	movq	i8_typ@GOTPCREL(%rip), %rcx
	movq	%rcx, 72(%rsp)
	leaq	72(%rsp), %r8
	movq	%r14, %rdi
	movq	%r13, %rsi
	movq	%r15, %rdx
	movl	%r12d, %ecx
	callq	*%rax
	leaq	80(%rsp), %r10
	movq	%r14, %rdi
	movq	%r13, %rsi
	movq	%r15, %rdx
	movl	%r12d, %ecx
	movq	%r14, %r8
	movq	%r13, %r9
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movl	48(%rsp), %esi
	movq	32(%rsp), %rcx
	movq	40(%rsp), %rdx
	jmp	.LBB43_3
.LBB43_1:
	movq	nil_typ@GOTPCREL(%rip), %r14
	xorl	%esi, %esi
                                        # implicit-def: $rcx
                                        # implicit-def: $rdx
.LBB43_3:
	movq	64(%rsp), %rax                  # 8-byte Reload
	movq	%rcx, 16(%rax)
	movq	%r14, (%rax)
	movq	%rdx, 24(%rax)
	movl	%esi, 32(%rax)
	addq	$184, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end43:
	.size	StringIterator_next_, .Lfunc_end43-StringIterator_next_
	.cfi_endproc
                                        # -- End function
	.weak	_size_nil_typ                   # -- Begin function _size_nil_typ
	.p2align	4, 0x90
	.type	_size_nil_typ,@function
_size_nil_typ:                          # @_size_nil_typ
	.cfi_startproc
# %bb.0:
	movl	$1, %edx
	xorl	%eax, %eax
	retq
.Lfunc_end44:
	.size	_size_nil_typ, .Lfunc_end44-_size_nil_typ
	.cfi_endproc
                                        # -- End function
	.weak	_box_nil_typ                    # -- Begin function _box_nil_typ
	.p2align	4, 0x90
	.type	_box_nil_typ,@function
_box_nil_typ:                           # @_box_nil_typ
	.cfi_startproc
# %bb.0:
	movq	%rdi, %rax
	movq	nil_typ@GOTPCREL(%rip), %rcx
	movq	%rcx, (%rdi)
	retq
.Lfunc_end45:
	.size	_box_nil_typ, .Lfunc_end45-_box_nil_typ
	.cfi_endproc
                                        # -- End function
	.weak	_unbox_nil_typ                  # -- Begin function _unbox_nil_typ
	.p2align	4, 0x90
	.type	_unbox_nil_typ,@function
_unbox_nil_typ:                         # @_unbox_nil_typ
	.cfi_startproc
# %bb.0:
	retq
.Lfunc_end46:
	.size	_unbox_nil_typ, .Lfunc_end46-_unbox_nil_typ
	.cfi_endproc
                                        # -- End function
	.weak	_size_i8_typ                    # -- Begin function _size_i8_typ
	.p2align	4, 0x90
	.type	_size_i8_typ,@function
_size_i8_typ:                           # @_size_i8_typ
	.cfi_startproc
# %bb.0:
	movl	$1, %eax
	movl	$1, %edx
	retq
.Lfunc_end47:
	.size	_size_i8_typ, .Lfunc_end47-_size_i8_typ
	.cfi_endproc
                                        # -- End function
	.weak	_box_i8_typ                     # -- Begin function _box_i8_typ
	.p2align	4, 0x90
	.type	_box_i8_typ,@function
_box_i8_typ:                            # @_box_i8_typ
	.cfi_startproc
# %bb.0:
	movq	%rdi, %rax
	movzbl	(%rsi), %ecx
	movq	i8_typ@GOTPCREL(%rip), %rdx
	movq	%rdx, (%rdi)
	movq	%rcx, 16(%rdi)
	movq	$0, 24(%rdi)
	movl	$0, 32(%rdi)
	retq
.Lfunc_end48:
	.size	_box_i8_typ, .Lfunc_end48-_box_i8_typ
	.cfi_endproc
                                        # -- End function
	.weak	_unbox_i8_typ                   # -- Begin function _unbox_i8_typ
	.p2align	4, 0x90
	.type	_unbox_i8_typ,@function
_unbox_i8_typ:                          # @_unbox_i8_typ
	.cfi_startproc
# %bb.0:
	movb	%sil, (%r9)
	retq
.Lfunc_end49:
	.size	_unbox_i8_typ, .Lfunc_end49-_unbox_i8_typ
	.cfi_endproc
                                        # -- End function
	.globl	_size_Character                 # -- Begin function _size_Character
	.p2align	4, 0x90
	.type	_size_Character,@function
_size_Character:                        # @_size_Character
# %bb.0:
	movl	$1, %eax
	movl	$1, %edx
	retq
.Lfunc_end50:
	.size	_size_Character, .Lfunc_end50-_size_Character
                                        # -- End function
	.globl	Character_B_byte_               # -- Begin function Character_B_byte_
	.p2align	4, 0x90
	.type	Character_B_byte_,@function
Character_B_byte_:                      # @Character_B_byte_
# %bb.0:
	movq	96(%rdi), %rax
	retq
.Lfunc_end51:
	.size	Character_B_byte_, .Lfunc_end51-Character_B_byte_
                                        # -- End function
	.globl	Character_B_init_bytePtri8      # -- Begin function Character_B_init_bytePtri8
	.p2align	4, 0x90
	.type	Character_B_init_bytePtri8,@function
Character_B_init_bytePtri8:             # @Character_B_init_bytePtri8
# %bb.0:
	movq	104(%rdi), %rax
	retq
.Lfunc_end52:
	.size	Character_B_init_bytePtri8, .Lfunc_end52-Character_B_init_bytePtri8
                                        # -- End function
	.globl	Character_byte_                 # -- Begin function Character_byte_
	.p2align	4, 0x90
	.type	Character_byte_,@function
Character_byte_:                        # @Character_byte_
	.cfi_startproc
# %bb.0:
	movq	40(%rdi), %rax
	movabsq	$6681222582356018452, %rcx      # imm = 0x5CB8788A3EA60514
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %rax
	movq	(%rdi,%rax,8), %rax
	movq	%rsi, %rdi
	jmpq	*(%rax)                         # TAILCALL
.Lfunc_end53:
	.size	Character_byte_, .Lfunc_end53-Character_byte_
	.cfi_endproc
                                        # -- End function
	.globl	Character_init_bytePtri8        # -- Begin function Character_init_bytePtri8
	.p2align	4, 0x90
	.type	Character_init_bytePtri8,@function
Character_init_bytePtri8:               # @Character_init_bytePtri8
	.cfi_startproc
# %bb.0:
	movq	%rsi, %rax
	movq	40(%rdi), %rcx
	movabsq	$6681222582356018452, %rdx      # imm = 0x5CB8788A3EA60514
	imulq	8(%rdi), %rdx
	movq	%rdx, %rsi
	shrq	$32, %rsi
	xorq	%rdx, %rsi
	andq	16(%rdi), %rsi
	movslq	(%rcx,%rsi,4), %rcx
	movq	(%rdi,%rcx,8), %rcx
	movq	8(%rcx), %rcx
	movl	32(%rsp), %esi
	movq	%rax, %rdi
	jmpq	*%rcx                           # TAILCALL
.Lfunc_end54:
	.size	Character_init_bytePtri8, .Lfunc_end54-Character_init_bytePtri8
	.cfi_endproc
                                        # -- End function
	.globl	Character_getter_byte           # -- Begin function Character_getter_byte
	.p2align	4, 0x90
	.type	Character_getter_byte,@function
Character_getter_byte:                  # @Character_getter_byte
# %bb.0:
	movzbl	(%rdi), %eax
	retq
.Lfunc_end55:
	.size	Character_getter_byte, .Lfunc_end55-Character_getter_byte
                                        # -- End function
	.globl	Character_setter_byte           # -- Begin function Character_setter_byte
	.p2align	4, 0x90
	.type	Character_setter_byte,@function
Character_setter_byte:                  # @Character_setter_byte
# %bb.0:
	movb	%sil, (%rdi)
	retq
.Lfunc_end56:
	.size	Character_setter_byte, .Lfunc_end56-Character_setter_byte
                                        # -- End function
	.globl	StringIterator_getter_index     # -- Begin function StringIterator_getter_index
	.p2align	4, 0x90
	.type	StringIterator_getter_index,@function
StringIterator_getter_index:            # @StringIterator_getter_index
# %bb.0:
	movl	32(%rdi), %eax
	retq
.Lfunc_end57:
	.size	StringIterator_getter_index, .Lfunc_end57-StringIterator_getter_index
                                        # -- End function
	.globl	StringIterator_setter_index     # -- Begin function StringIterator_setter_index
	.p2align	4, 0x90
	.type	StringIterator_setter_index,@function
StringIterator_setter_index:            # @StringIterator_setter_index
# %bb.0:
	movl	%esi, 32(%rdi)
	retq
.Lfunc_end58:
	.size	StringIterator_setter_index, .Lfunc_end58-StringIterator_setter_index
                                        # -- End function
	.globl	StringIterator_getter_str       # -- Begin function StringIterator_getter_str
	.p2align	4, 0x90
	.type	StringIterator_getter_str,@function
StringIterator_getter_str:              # @StringIterator_getter_str
# %bb.0:
	movq	%rdi, %rax
	movq	(%rsi), %rcx
	movq	8(%rsi), %rdx
	movq	16(%rsi), %rdi
	movl	24(%rsi), %esi
	movl	%esi, 24(%rax)
	movq	%rdi, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	retq
.Lfunc_end59:
	.size	StringIterator_getter_str, .Lfunc_end59-StringIterator_getter_str
                                        # -- End function
	.globl	StringIterator_setter_str       # -- Begin function StringIterator_setter_str
	.p2align	4, 0x90
	.type	StringIterator_setter_str,@function
StringIterator_setter_str:              # @StringIterator_setter_str
# %bb.0:
	movq	%rsi, (%rdi)
	movq	%rdx, 8(%rdi)
	movq	%rcx, 16(%rdi)
	movl	%r8d, 24(%rdi)
	retq
.Lfunc_end60:
	.size	StringIterator_setter_str, .Lfunc_end60-StringIterator_setter_str
                                        # -- End function
	.globl	String_getter_capacity          # -- Begin function String_getter_capacity
	.p2align	4, 0x90
	.type	String_getter_capacity,@function
String_getter_capacity:                 # @String_getter_capacity
# %bb.0:
	movl	12(%rdi), %eax
	retq
.Lfunc_end61:
	.size	String_getter_capacity, .Lfunc_end61-String_getter_capacity
                                        # -- End function
	.globl	String_setter_capacity          # -- Begin function String_setter_capacity
	.p2align	4, 0x90
	.type	String_setter_capacity,@function
String_setter_capacity:                 # @String_setter_capacity
# %bb.0:
	movl	%esi, 12(%rdi)
	retq
.Lfunc_end62:
	.size	String_setter_capacity, .Lfunc_end62-String_setter_capacity
                                        # -- End function
	.globl	String_getter_length            # -- Begin function String_getter_length
	.p2align	4, 0x90
	.type	String_getter_length,@function
String_getter_length:                   # @String_getter_length
# %bb.0:
	movl	8(%rdi), %eax
	retq
.Lfunc_end63:
	.size	String_getter_length, .Lfunc_end63-String_getter_length
                                        # -- End function
	.globl	String_setter_length            # -- Begin function String_setter_length
	.p2align	4, 0x90
	.type	String_setter_length,@function
String_setter_length:                   # @String_setter_length
# %bb.0:
	movl	%esi, 8(%rdi)
	retq
.Lfunc_end64:
	.size	String_setter_length, .Lfunc_end64-String_setter_length
                                        # -- End function
	.globl	String_getter_bytes             # -- Begin function String_getter_bytes
	.p2align	4, 0x90
	.type	String_getter_bytes,@function
String_getter_bytes:                    # @String_getter_bytes
# %bb.0:
	movq	(%rdi), %rax
	retq
.Lfunc_end65:
	.size	String_getter_bytes, .Lfunc_end65-String_getter_bytes
                                        # -- End function
	.globl	String_setter_bytes             # -- Begin function String_setter_bytes
	.p2align	4, 0x90
	.type	String_setter_bytes,@function
String_setter_bytes:                    # @String_setter_bytes
# %bb.0:
	movq	%rsi, (%rdi)
	retq
.Lfunc_end66:
	.size	String_setter_bytes, .Lfunc_end66-String_setter_bytes
                                        # -- End function
	.globl	_size_Exception                 # -- Begin function _size_Exception
	.p2align	4, 0x90
	.type	_size_Exception,@function
_size_Exception:                        # @_size_Exception
# %bb.0:
	movl	$72, %eax
	movl	$8, %edx
	retq
.Lfunc_end67:
	.size	_size_Exception, .Lfunc_end67-_size_Exception
                                        # -- End function
	.globl	Exception_B_init_messageString  # -- Begin function Exception_B_init_messageString
	.p2align	4, 0x90
	.type	Exception_B_init_messageString,@function
Exception_B_init_messageString:         # @Exception_B_init_messageString
# %bb.0:
	movq	136(%rdi), %rax
	retq
.Lfunc_end68:
	.size	Exception_B_init_messageString, .Lfunc_end68-Exception_B_init_messageString
                                        # -- End function
	.globl	Exception_B_init_               # -- Begin function Exception_B_init_
	.p2align	4, 0x90
	.type	Exception_B_init_,@function
Exception_B_init_:                      # @Exception_B_init_
# %bb.0:
	movq	144(%rdi), %rax
	retq
.Lfunc_end69:
	.size	Exception_B_init_, .Lfunc_end69-Exception_B_init_
                                        # -- End function
	.globl	Exception_B_set_info_line_numberPtri32_file_nameString # -- Begin function Exception_B_set_info_line_numberPtri32_file_nameString
	.p2align	4, 0x90
	.type	Exception_B_set_info_line_numberPtri32_file_nameString,@function
Exception_B_set_info_line_numberPtri32_file_nameString: # @Exception_B_set_info_line_numberPtri32_file_nameString
# %bb.0:
	movq	152(%rdi), %rax
	retq
.Lfunc_end70:
	.size	Exception_B_set_info_line_numberPtri32_file_nameString, .Lfunc_end70-Exception_B_set_info_line_numberPtri32_file_nameString
                                        # -- End function
	.globl	Exception_B_report_             # -- Begin function Exception_B_report_
	.p2align	4, 0x90
	.type	Exception_B_report_,@function
Exception_B_report_:                    # @Exception_B_report_
# %bb.0:
	movq	160(%rdi), %rax
	retq
.Lfunc_end71:
	.size	Exception_B_report_, .Lfunc_end71-Exception_B_report_
                                        # -- End function
	.globl	Exception_B_print_message_      # -- Begin function Exception_B_print_message_
	.p2align	4, 0x90
	.type	Exception_B_print_message_,@function
Exception_B_print_message_:             # @Exception_B_print_message_
# %bb.0:
	movq	168(%rdi), %rax
	retq
.Lfunc_end72:
	.size	Exception_B_print_message_, .Lfunc_end72-Exception_B_print_message_
                                        # -- End function
	.globl	Exception_init_messageString    # -- Begin function Exception_init_messageString
	.p2align	4, 0x90
	.type	Exception_init_messageString,@function
Exception_init_messageString:           # @Exception_init_messageString
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r13
	.cfi_def_cfa_offset 32
	pushq	%r12
	.cfi_def_cfa_offset 40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r13, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movq	80(%rsp), %rdx
	movq	88(%rsp), %rcx
	movq	72(%rsp), %rsi
	movq	40(%rdi), %rax
	movabsq	$9027164862567808692, %rdi      # imm = 0x7D46EE9D523DFEB4
	imulq	8(%r14), %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%r14), %r8
	movslq	(%rax,%r8,4), %r13
	movq	40(%rsi), %rax
	movabsq	$6499063144389013426, %rdi      # imm = 0x5A314F7F0E23EFB2
	imulq	8(%rsi), %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%rsi), %r8
	movl	(%rax,%r8,4), %r8d
	movq	16(%r14,%r13,8), %rax
	movq	%rbx, %rdi
	callq	*8(%rax)
	movq	(%r14,%r13,8), %rax
	movq	%rbx, %rdi
	xorl	%esi, %esi
	callq	*8(%rax)
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %r15
	movl	$1, %edi
	movq	%r15, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r12
	movl	$16, %edi
	movq	%r15, %rsi
	callq	bump_malloc_inner@PLT
	movq	String@GOTPCREL(%rip), %rsi
	movq	%r12, (%rax)
	movabsq	$4294967296, %rcx               # imm = 0x100000000
	movq	%rcx, 8(%rax)
	movq	8(%r14,%r13,8), %rcx
	movq	8(%rcx), %rcx
	movq	%rbx, %rdi
	movq	%rax, %rdx
	movl	$9, %r8d
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	jmpq	*%rcx                           # TAILCALL
.Lfunc_end73:
	.size	Exception_init_messageString, .Lfunc_end73-Exception_init_messageString
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function Exception_init_
.LCPI74_0:
	.byte	60                              # 0x3c
	.byte	78                              # 0x4e
	.byte	111                             # 0x6f
	.byte	110                             # 0x6e
	.byte	101                             # 0x65
	.byte	62                              # 0x3e
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.text
	.globl	Exception_init_
	.p2align	4, 0x90
	.type	Exception_init_,@function
Exception_init_:                        # @Exception_init_
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	pushq	%rax
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movq	40(%rdi), %rax
	movabsq	$9027164862567808692, %rcx      # imm = 0x7D46EE9D523DFEB4
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %rbp
	movq	(%rdi,%rbp,8), %rax
	movq	%rsi, %rdi
	xorl	%esi, %esi
	callq	*8(%rax)
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %r15
	movl	$7, %edi
	movq	%r15, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r12
	movl	.LCPI74_0(%rip), %eax
	movl	%eax, (%r12)
	movw	$15973, 4(%r12)                 # imm = 0x3E65
	movl	$16, %edi
	movq	%r15, %rsi
	callq	bump_malloc_inner@PLT
	movq	String@GOTPCREL(%rip), %r13
	movq	%r12, (%rax)
	movabsq	$30064771078, %rcx              # imm = 0x700000006
	movq	%rcx, 8(%rax)
	movq	16(%r14,%rbp,8), %rcx
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movq	%rax, %rdx
	movl	$9, %r8d
	callq	*8(%rcx)
	movl	$1, %edi
	movq	%r15, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r12
	movl	$16, %edi
	movq	%r15, %rsi
	callq	bump_malloc_inner@PLT
	movq	%r12, (%rax)
	movabsq	$4294967296, %rcx               # imm = 0x100000000
	movq	%rcx, 8(%rax)
	movq	8(%r14,%rbp,8), %rcx
	movq	8(%rcx), %rcx
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movq	%rax, %rdx
	movl	$9, %r8d
	addq	$8, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	jmpq	*%rcx                           # TAILCALL
.Lfunc_end74:
	.size	Exception_init_, .Lfunc_end74-Exception_init_
	.cfi_endproc
                                        # -- End function
	.globl	Exception_set_info_line_numberPtri32_file_nameString # -- Begin function Exception_set_info_line_numberPtri32_file_nameString
	.p2align	4, 0x90
	.type	Exception_set_info_line_numberPtri32_file_nameString,@function
Exception_set_info_line_numberPtri32_file_nameString: # @Exception_set_info_line_numberPtri32_file_nameString
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	pushq	%rax
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rsi, %rbx
	movq	%rdi, %r12
	movq	104(%rsp), %r14
	movq	112(%rsp), %r15
	movq	96(%rsp), %r13
	movl	88(%rsp), %esi
	movq	40(%rdi), %rax
	movabsq	$9027164862567808692, %rcx      # imm = 0x7D46EE9D523DFEB4
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %rbp
	movq	(%rdi,%rbp,8), %rax
	movq	%rbx, %rdi
	callq	*8(%rax)
	movq	40(%r13), %rax
	movabsq	$6499063144389013426, %rcx      # imm = 0x5A314F7F0E23EFB2
	imulq	8(%r13), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%r13), %rdx
	movl	(%rax,%rdx,4), %r8d
	movq	8(%r12,%rbp,8), %rax
	movq	8(%rax), %rax
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movq	%r14, %rdx
	movq	%r15, %rcx
	addq	$8, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	jmpq	*%rax                           # TAILCALL
.Lfunc_end75:
	.size	Exception_set_info_line_numberPtri32_file_nameString, .Lfunc_end75-Exception_set_info_line_numberPtri32_file_nameString
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function Exception_report_
.LCPI76_0:
	.byte	69                              # 0x45
	.byte	120                             # 0x78
	.byte	99                              # 0x63
	.byte	101                             # 0x65
	.byte	112                             # 0x70
	.byte	116                             # 0x74
	.byte	105                             # 0x69
	.byte	111                             # 0x6f
	.byte	110                             # 0x6e
	.byte	32                              # 0x20
	.byte	116                             # 0x74
	.byte	104                             # 0x68
	.byte	114                             # 0x72
	.byte	111                             # 0x6f
	.byte	119                             # 0x77
	.byte	110                             # 0x6e
.LCPI76_1:
	.byte	65                              # 0x41
	.byte	116                             # 0x74
	.byte	32                              # 0x20
	.byte	108                             # 0x6c
	.byte	105                             # 0x69
	.byte	110                             # 0x6e
	.byte	101                             # 0x65
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.text
	.globl	Exception_report_
	.p2align	4, 0x90
	.type	Exception_report_,@function
Exception_report_:                      # @Exception_report_
	.cfi_startproc
# %bb.0:                                # %.lr.ph.i
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$72, %rsp
	.cfi_def_cfa_offset 128
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rdx, 32(%rsp)                  # 8-byte Spill
	movq	%rsi, %rbx
	movq	%rsi, 16(%rsp)                  # 8-byte Spill
	movq	%rdi, %r12
	movq	40(%rdi), %rax
	movabsq	$9027164862567808692, %rcx      # imm = 0x7D46EE9D523DFEB4
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %r15
	movq	%r15, 24(%rsp)                  # 8-byte Spill
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %r14
	movl	$10, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %rbp
	movabsq	$3255307777713450285, %rax      # imm = 0x2D2D2D2D2D2D2D2D
	movq	%rax, (%rbp)
	movb	$45, 8(%rbp)
	movl	$10, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	(%rbp), %rcx
	movq	%rcx, (%rax)
	movzbl	8(%rbp), %ecx
	movb	%cl, 8(%rax)
	movb	$0, 9(%rax)
	movq	%rax, %rdi
	callq	puts@PLT
	movl	$27, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %rbp
	movabsq	$7594793476000212512, %rax      # imm = 0x6966206D6F726620
	movq	%rax, 16(%rbp)
	movaps	.LCPI76_0(%rip), %xmm0          # xmm0 = [69,120,99,101,112,116,105,111,110,32,116,104,114,111,119,110]
	movaps	%xmm0, (%rbp)
	movw	$25964, 24(%rbp)                # imm = 0x656C
	movl	$27, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	(%rbp), %rcx
	movq	8(%rbp), %rdx
	movq	%rcx, (%rax)
	movq	%rdx, 8(%rax)
	movq	16(%rbp), %rcx
	movq	%rcx, 16(%rax)
	movzwl	24(%rbp), %ecx
	movw	%cx, 24(%rax)
	movb	$0, 26(%rax)
	movq	%rax, %rdi
	callq	puts@PLT
	movq	8(%r12,%r15,8), %rax
	leaq	40(%rsp), %rdi
	movq	%rbx, %rsi
	callq	*(%rax)
	movslq	64(%rsp), %rbx
	movq	56(%rsp), %rbp
	movq	40(%rsp), %r15
	movq	48(%rsp), %r13
	leaq	8(%rsp), %r8
	movq	%r15, %rdi
	movq	%r13, %rsi
	movq	%rbp, %rdx
	movl	%ebx, %ecx
	callq	*112(%r15,%rbx,8)
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	movq	%r15, %rdi
	movq	%r13, %rsi
	movq	%rbp, %rdx
	movl	%ebx, %ecx
	movq	%r15, %r8
	movq	%r13, %r9
	leaq	16(%rsp), %r10
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	%rax, %rdi
	callq	puts@PLT
	movl	$8, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %rbx
	movl	.LCPI76_1(%rip), %eax
	movl	%eax, (%rbx)
	movb	$101, 6(%rbx)
	movw	$28265, 4(%rbx)                 # imm = 0x6E69
	movl	$8, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movl	(%rbx), %ecx
	movl	3(%rbx), %edx
	movl	%ecx, (%rax)
	movl	%edx, 3(%rax)
	movb	$0, 7(%rax)
	movq	%rax, %rdi
	callq	puts@PLT
	movq	24(%rsp), %r13                  # 8-byte Reload
	movq	(%r12,%r13,8), %rax
	movq	16(%rsp), %r15                  # 8-byte Reload
	movq	%r15, %rdi
	callq	*(%rax)
	movq	i32_string@GOTPCREL(%rip), %rdi
	movl	%eax, %esi
	xorl	%eax, %eax
	callq	printf@PLT
	movl	$13, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %rbx
	movabsq	$8315172272968329559, %rax      # imm = 0x73656D2068746957
	movq	%rax, (%rbx)
	movl	$1701273971, 8(%rbx)            # imm = 0x65676173
	movl	$13, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	(%rbx), %rcx
	movq	%rcx, (%rax)
	movl	8(%rbx), %ecx
	movl	%ecx, 8(%rax)
	movb	$0, 12(%rax)
	movq	%rax, %rdi
	callq	puts@PLT
	movq	%r12, %rdi
	movq	%r15, %rsi
	movq	32(%rsp), %rbx                  # 8-byte Reload
	movq	%rbx, %rdx
	movl	%r13d, %ecx
	leaq	8(%rsp), %rbp
	movq	%rbp, %r8
	callq	*56(%r12,%r13,8)
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	movq	%r12, %rdi
	movq	%r15, %rsi
	movq	%rbx, %rdx
	movl	%r13d, %ecx
	movq	%r12, %r8
	movq	%r15, %r9
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movl	$10, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %rbx
	movabsq	$3255307777713450285, %rax      # imm = 0x2D2D2D2D2D2D2D2D
	movq	%rax, (%rbx)
	movb	$45, 8(%rbx)
	movl	$10, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	(%rbx), %rcx
	movq	%rcx, (%rax)
	movzbl	8(%rbx), %ecx
	movb	%cl, 8(%rax)
	movb	$0, 9(%rax)
	movq	%rax, %rdi
	callq	puts@PLT
	addq	$72, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end76:
	.size	Exception_report_, .Lfunc_end76-Exception_report_
	.cfi_endproc
                                        # -- End function
	.globl	Exception_print_message_        # -- Begin function Exception_print_message_
	.p2align	4, 0x90
	.type	Exception_print_message_,@function
Exception_print_message_:               # @Exception_print_message_
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r13
	.cfi_def_cfa_offset 32
	pushq	%r12
	.cfi_def_cfa_offset 40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	subq	$48, %rsp
	.cfi_def_cfa_offset 96
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r13, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	40(%rdi), %rax
	movabsq	$9027164862567808692, %rcx      # imm = 0x7D46EE9D523DFEB4
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %rax
	movq	16(%rdi,%rax,8), %rax
	leaq	16(%rsp), %rdi
	callq	*(%rax)
	movslq	40(%rsp), %rbx
	movq	32(%rsp), %r14
	movq	16(%rsp), %r15
	movq	24(%rsp), %r12
	leaq	8(%rsp), %r13
	movq	%r15, %rdi
	movq	%r12, %rsi
	movq	%r14, %rdx
	movl	%ebx, %ecx
	movq	%r13, %r8
	callq	*112(%r15,%rbx,8)
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	movq	%r15, %rdi
	movq	%r12, %rsi
	movq	%r14, %rdx
	movl	%ebx, %ecx
	movq	%r15, %r8
	movq	%r12, %r9
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	%rax, %rdi
	callq	puts@PLT
	addq	$48, %rsp
	.cfi_def_cfa_offset 48
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end77:
	.size	Exception_print_message_, .Lfunc_end77-Exception_print_message_
	.cfi_endproc
                                        # -- End function
	.globl	Exception_getter_message        # -- Begin function Exception_getter_message
	.p2align	4, 0x90
	.type	Exception_getter_message,@function
Exception_getter_message:               # @Exception_getter_message
# %bb.0:
	movq	%rdi, %rax
	movq	40(%rsi), %rcx
	movq	48(%rsi), %rdx
	movq	56(%rsi), %rdi
	movl	64(%rsi), %esi
	movl	%esi, 24(%rax)
	movq	%rdi, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	retq
.Lfunc_end78:
	.size	Exception_getter_message, .Lfunc_end78-Exception_getter_message
                                        # -- End function
	.globl	Exception_setter_message        # -- Begin function Exception_setter_message
	.p2align	4, 0x90
	.type	Exception_setter_message,@function
Exception_setter_message:               # @Exception_setter_message
# %bb.0:
	movq	%rsi, 40(%rdi)
	movq	%rdx, 48(%rdi)
	movq	%rcx, 56(%rdi)
	movl	%r8d, 64(%rdi)
	retq
.Lfunc_end79:
	.size	Exception_setter_message, .Lfunc_end79-Exception_setter_message
                                        # -- End function
	.globl	Exception_getter_file_name      # -- Begin function Exception_getter_file_name
	.p2align	4, 0x90
	.type	Exception_getter_file_name,@function
Exception_getter_file_name:             # @Exception_getter_file_name
# %bb.0:
	movq	%rdi, %rax
	movq	8(%rsi), %rcx
	movq	16(%rsi), %rdx
	movq	24(%rsi), %rdi
	movl	32(%rsi), %esi
	movl	%esi, 24(%rax)
	movq	%rdi, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	retq
.Lfunc_end80:
	.size	Exception_getter_file_name, .Lfunc_end80-Exception_getter_file_name
                                        # -- End function
	.globl	Exception_setter_file_name      # -- Begin function Exception_setter_file_name
	.p2align	4, 0x90
	.type	Exception_setter_file_name,@function
Exception_setter_file_name:             # @Exception_setter_file_name
# %bb.0:
	movq	%rsi, 8(%rdi)
	movq	%rdx, 16(%rdi)
	movq	%rcx, 24(%rdi)
	movl	%r8d, 32(%rdi)
	retq
.Lfunc_end81:
	.size	Exception_setter_file_name, .Lfunc_end81-Exception_setter_file_name
                                        # -- End function
	.globl	Exception_getter_line_number    # -- Begin function Exception_getter_line_number
	.p2align	4, 0x90
	.type	Exception_getter_line_number,@function
Exception_getter_line_number:           # @Exception_getter_line_number
# %bb.0:
	movl	(%rdi), %eax
	retq
.Lfunc_end82:
	.size	Exception_getter_line_number, .Lfunc_end82-Exception_getter_line_number
                                        # -- End function
	.globl	Exception_setter_line_number    # -- Begin function Exception_setter_line_number
	.p2align	4, 0x90
	.type	Exception_setter_line_number,@function
Exception_setter_line_number:           # @Exception_setter_line_number
# %bb.0:
	movl	%esi, (%rdi)
	retq
.Lfunc_end83:
	.size	Exception_setter_line_number, .Lfunc_end83-Exception_setter_line_number
                                        # -- End function
	.globl	_size_IO                        # -- Begin function _size_IO
	.p2align	4, 0x90
	.type	_size_IO,@function
_size_IO:                               # @_size_IO
# %bb.0:
	movl	$1, %edx
	xorl	%eax, %eax
	retq
.Lfunc_end84:
	.size	_size_IO, .Lfunc_end84-_size_IO
                                        # -- End function
	.globl	IO_B__Self_print_xPtrf64__Self_print_xRepresentable__Self_print_xPtri8__Self_print_xString__Self_print_xPtri64__Self_print_xNil__Self_print_xCharacter__Self_print_xPtri1__Self_print_xPtri32 # -- Begin function IO_B__Self_print_xPtrf64__Self_print_xRepresentable__Self_print_xPtri8__Self_print_xString__Self_print_xPtri64__Self_print_xNil__Self_print_xCharacter__Self_print_xPtri1__Self_print_xPtri32
	.p2align	4, 0x90
	.type	IO_B__Self_print_xPtrf64__Self_print_xRepresentable__Self_print_xPtri8__Self_print_xString__Self_print_xPtri64__Self_print_xNil__Self_print_xCharacter__Self_print_xPtri1__Self_print_xPtri32,@function
IO_B__Self_print_xPtrf64__Self_print_xRepresentable__Self_print_xPtri8__Self_print_xString__Self_print_xPtri64__Self_print_xNil__Self_print_xCharacter__Self_print_xPtri1__Self_print_xPtri32: # @IO_B__Self_print_xPtrf64__Self_print_xRepresentable__Self_print_xPtri8__Self_print_xString__Self_print_xPtri64__Self_print_xNil__Self_print_xCharacter__Self_print_xPtri1__Self_print_xPtri32
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	pushq	%rax
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	(%rdi), %rax
	movq	8(%rax), %rbx
	movq	16(%rax), %r15
	movq	24(%rax), %r13
	movq	32(%rax), %r14
	movq	f64_typ@GOTPCREL(%rip), %rcx
	movabsq	$-757315540097298781, %rdx      # imm = 0xF57D7987599E0EA3
	movq	%r15, %rdi
	movq	%rbx, %rsi
	movq	%r14, %r8
	callq	*%r13
	movl	$1, %ecx
	testb	$1, %al
	jne	.LBB85_8
# %bb.1:
	movq	nil_typ@GOTPCREL(%rip), %rcx
	movabsq	$-5126806859456325683, %rdx     # imm = 0xB8D9EC530611D7CD
	movq	%r15, %rdi
	movq	%rbx, %rsi
	movq	%r14, %r8
	callq	*%r13
	movl	$6, %ecx
	testb	$1, %al
	jne	.LBB85_8
# %bb.2:
	movq	i32_typ@GOTPCREL(%rip), %rcx
	movabsq	$-2253724949814257982, %rdx     # imm = 0xE0B9291950E2D6C2
	movq	%r15, %rdi
	movq	%rbx, %rsi
	movq	%r14, %r8
	callq	*%r13
	movl	$9, %ecx
	testb	$1, %al
	jne	.LBB85_8
# %bb.3:
	movq	i8_typ@GOTPCREL(%rip), %rcx
	movabsq	$2582149688529881115, %rdx      # imm = 0x23D5A375FDB5881B
	movq	%r15, %rdi
	movq	%rbx, %rsi
	movq	%r14, %r8
	callq	*%r13
	movl	$3, %ecx
	testb	$1, %al
	jne	.LBB85_8
# %bb.4:
	movq	String@GOTPCREL(%rip), %rcx
	movabsq	$6499063144389013426, %rdx      # imm = 0x5A314F7F0E23EFB2
	movq	%r15, %rdi
	movq	%rbx, %rsi
	movq	%r14, %r8
	callq	*%r13
	movl	%eax, %ebp
	movq	Character@GOTPCREL(%rip), %rcx
	movabsq	$6681222582356018452, %rdx      # imm = 0x5CB8788A3EA60514
	movq	%r15, %rdi
	movq	%rbx, %rsi
	movq	%r14, %r8
	callq	*%r13
	movl	%eax, %r12d
	movl	%ebp, %eax
	notb	%al
	orb	%r12b, %al
	movl	$4, %ecx
	testb	$1, %al
	je	.LBB85_8
# %bb.5:
	movq	Representable@GOTPCREL(%rip), %rcx
	movabsq	$-7260840641129990118, %rdx     # imm = 0x9B3C4FE80EBA381A
	movq	%r15, %rdi
	movq	%rbx, %rsi
	movq	%r14, %r8
	callq	*%r13
	notb	%al
	orb	%r12b, %bpl
	orb	%al, %bpl
	movl	$2, %ecx
	testb	$1, %bpl
	je	.LBB85_8
# %bb.6:                                # %.critedge
	movq	i64_typ@GOTPCREL(%rip), %rcx
	movabsq	$-7469797244461771922, %rdx     # imm = 0x9855F2FB9BAA136E
	movq	%r15, %rdi
	movq	%rbx, %rsi
	movq	%r14, %r8
	callq	*%r13
	movl	$5, %ecx
	testb	$1, %al
	jne	.LBB85_8
# %bb.7:
	movq	bool_typ@GOTPCREL(%rip), %rcx
	movabsq	$5801531371504802705, %rdx      # imm = 0x50832E0B67D41B91
	movq	%r15, %rdi
	movq	%rbx, %rsi
	movq	%r14, %r8
	callq	*%r13
	movzbl	%al, %ecx
	andl	$1, %ecx
	addl	$7, %ecx
.LBB85_8:                               # %._crit_edge
	movl	%ecx, %eax
	movq	IO@GOTPCREL(%rip), %rcx
	movq	72(%rcx,%rax,8), %rax
	addq	$8, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end85:
	.size	IO_B__Self_print_xPtrf64__Self_print_xRepresentable__Self_print_xPtri8__Self_print_xString__Self_print_xPtri64__Self_print_xNil__Self_print_xCharacter__Self_print_xPtri1__Self_print_xPtri32, .Lfunc_end85-IO_B__Self_print_xPtrf64__Self_print_xRepresentable__Self_print_xPtri8__Self_print_xString__Self_print_xPtri64__Self_print_xNil__Self_print_xCharacter__Self_print_xPtri1__Self_print_xPtri32
	.cfi_endproc
                                        # -- End function
	.globl	IO__Self_print_xPtrf64          # -- Begin function IO__Self_print_xPtrf64
	.p2align	4, 0x90
	.type	IO__Self_print_xPtrf64,@function
IO__Self_print_xPtrf64:                 # @IO__Self_print_xPtrf64
# %bb.0:
	movq	%rdx, %xmm0
	movq	float_string@GOTPCREL(%rip), %rdi
	movb	$1, %al
	jmp	printf@PLT                      # TAILCALL
.Lfunc_end86:
	.size	IO__Self_print_xPtrf64, .Lfunc_end86-IO__Self_print_xPtrf64
                                        # -- End function
	.globl	IO__Self_print_xRepresentable   # -- Begin function IO__Self_print_xRepresentable
	.p2align	4, 0x90
	.type	IO__Self_print_xRepresentable,@function
IO__Self_print_xRepresentable:          # @IO__Self_print_xRepresentable
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r13
	.cfi_def_cfa_offset 32
	pushq	%r12
	.cfi_def_cfa_offset 40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	subq	$48, %rsp
	.cfi_def_cfa_offset 96
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r13, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rcx, %r15
	movq	%rdx, %r14
	movq	%rsi, %r12
	movq	40(%rsi), %rax
	movabsq	$-7260840641129990118, %rcx     # imm = 0x9B3C4FE80EBA381A
	imulq	8(%rsi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rsi), %rdx
	movslq	(%rax,%rdx,4), %r13
	leaq	8(%rsp), %rbx
	movq	%rsi, %rdi
	movq	%r14, %rsi
	movq	%r15, %rdx
	movl	%r13d, %ecx
	movq	%rbx, %r8
	callq	*(%r12,%r13,8)
	leaq	16(%rsp), %rdi
	movq	%r12, %rsi
	movq	%r14, %rdx
	movq	%r15, %rcx
	movl	%r13d, %r8d
	movq	%r12, %r9
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	32(%rsp), %r14
	movq	16(%rsp), %r15
	movq	24(%rsp), %r12
	movq	40(%r15), %rax
	movabsq	$6499063144389013426, %rcx      # imm = 0x5A314F7F0E23EFB2
	imulq	8(%r15), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%r15), %rdx
	movslq	(%rax,%rdx,4), %r13
	movq	%r15, %rdi
	movq	%r12, %rsi
	movq	%r14, %rdx
	movl	%r13d, %ecx
	movq	%rbx, %r8
	callq	*112(%r15,%r13,8)
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	movq	%r15, %rdi
	movq	%r12, %rsi
	movq	%r14, %rdx
	movl	%r13d, %ecx
	movq	%r15, %r8
	movq	%r12, %r9
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	%rax, %rdi
	callq	puts@PLT
	addq	$48, %rsp
	.cfi_def_cfa_offset 48
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end87:
	.size	IO__Self_print_xRepresentable, .Lfunc_end87-IO__Self_print_xRepresentable
	.cfi_endproc
                                        # -- End function
	.globl	IO__Self_print_xPtri8           # -- Begin function IO__Self_print_xPtri8
	.p2align	4, 0x90
	.type	IO__Self_print_xPtri8,@function
IO__Self_print_xPtri8:                  # @IO__Self_print_xPtri8
# %bb.0:
	movsbl	%dl, %esi
	movq	i32_string@GOTPCREL(%rip), %rdi
	xorl	%eax, %eax
	jmp	printf@PLT                      # TAILCALL
.Lfunc_end88:
	.size	IO__Self_print_xPtri8, .Lfunc_end88-IO__Self_print_xPtri8
                                        # -- End function
	.globl	IO__Self_print_xString          # -- Begin function IO__Self_print_xString
	.p2align	4, 0x90
	.type	IO__Self_print_xString,@function
IO__Self_print_xString:                 # @IO__Self_print_xString
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r13
	.cfi_def_cfa_offset 32
	pushq	%r12
	.cfi_def_cfa_offset 40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	subq	$16, %rsp
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r13, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rcx, %rbx
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	40(%rsi), %rax
	movabsq	$6499063144389013426, %rcx      # imm = 0x5A314F7F0E23EFB2
	imulq	8(%rsi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rsi), %rdx
	movslq	(%rax,%rdx,4), %r12
	leaq	8(%rsp), %r13
	movq	%rsi, %rdi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movl	%r12d, %ecx
	movq	%r13, %r8
	callq	*112(%r15,%r12,8)
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	movq	%r15, %rdi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movl	%r12d, %ecx
	movq	%r15, %r8
	movq	%r14, %r9
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	%rax, %rdi
	callq	puts@PLT
	addq	$16, %rsp
	.cfi_def_cfa_offset 48
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end89:
	.size	IO__Self_print_xString, .Lfunc_end89-IO__Self_print_xString
	.cfi_endproc
                                        # -- End function
	.globl	IO__Self_print_xPtri64          # -- Begin function IO__Self_print_xPtri64
	.p2align	4, 0x90
	.type	IO__Self_print_xPtri64,@function
IO__Self_print_xPtri64:                 # @IO__Self_print_xPtri64
# %bb.0:
	movq	i64_string@GOTPCREL(%rip), %rdi
	movq	%rdx, %rsi
	xorl	%eax, %eax
	jmp	printf@PLT                      # TAILCALL
.Lfunc_end90:
	.size	IO__Self_print_xPtri64, .Lfunc_end90-IO__Self_print_xPtri64
                                        # -- End function
	.globl	IO__Self_print_xNil             # -- Begin function IO__Self_print_xNil
	.p2align	4, 0x90
	.type	IO__Self_print_xNil,@function
IO__Self_print_xNil:                    # @IO__Self_print_xNil
# %bb.0:                                # %.lr.ph.i
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rbx
	movl	$4, %edi
	movq	%rbx, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r14
	movb	$108, 2(%rax)
	movw	$26990, (%rax)                  # imm = 0x696E
	movl	$4, %edi
	movq	%rbx, %rsi
	callq	bump_malloc_inner@PLT
	movzwl	(%r14), %ecx
	movw	%cx, (%rax)
	movzbl	2(%r14), %ecx
	movb	%cl, 2(%rax)
	movb	$0, 3(%rax)
	movq	%rax, %rdi
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	jmp	puts@PLT                        # TAILCALL
.Lfunc_end91:
	.size	IO__Self_print_xNil, .Lfunc_end91-IO__Self_print_xNil
                                        # -- End function
	.globl	IO__Self_print_xCharacter       # -- Begin function IO__Self_print_xCharacter
	.p2align	4, 0x90
	.type	IO__Self_print_xCharacter,@function
IO__Self_print_xCharacter:              # @IO__Self_print_xCharacter
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	pushq	%rax
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rcx, %rbx
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	40(%rsi), %rax
	movabsq	$6681222582356018452, %rcx      # imm = 0x5CB8788A3EA60514
	imulq	8(%rsi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rsi), %rdx
	movslq	(%rax,%rdx,4), %r13
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	movl	$2, %edi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r12
	movq	%rsp, %rbp
	movq	%r15, %rdi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movl	%r13d, %ecx
	movq	%rbp, %r8
	callq	*8(%r15,%r13,8)
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	movq	%r15, %rdi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movl	%r13d, %ecx
	movq	%r15, %r8
	movq	%r14, %r9
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movb	%al, (%r12)
	movb	$0, 1(%r12)
	movq	%r12, %rdi
	callq	puts@PLT
	addq	$8, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end92:
	.size	IO__Self_print_xCharacter, .Lfunc_end92-IO__Self_print_xCharacter
	.cfi_endproc
                                        # -- End function
	.globl	IO__Self_print_xPtri1           # -- Begin function IO__Self_print_xPtri1
	.p2align	4, 0x90
	.type	IO__Self_print_xPtri1,@function
IO__Self_print_xPtri1:                  # @IO__Self_print_xPtri1
# %bb.0:
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	testb	$1, %dl
	je	.LBB93_2
# %bb.1:
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	movl	$5, %edi
	callq	bump_malloc_inner@PLT
	movq	%rax, %rbx
	movl	$1702195828, (%rax)             # imm = 0x65757274
	movl	$4, %r15d
	jmp	.LBB93_3
.LBB93_2:
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	movl	$6, %edi
	callq	bump_malloc_inner@PLT
	movq	%rax, %rbx
	movb	$101, 4(%rax)
	movl	$1936482662, (%rax)             # imm = 0x736C6166
	movl	$5, %r15d
.LBB93_3:                               # %.lr.ph.i
	leal	1(%r15), %edi
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r14
	movl	%r15d, %r15d
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	%r15, %rdx
	callq	memcpy@PLT
	movb	$0, (%r14,%r15)
	movq	%r14, %rdi
	popq	%rbx
	popq	%r14
	popq	%r15
	jmp	puts@PLT                        # TAILCALL
.Lfunc_end93:
	.size	IO__Self_print_xPtri1, .Lfunc_end93-IO__Self_print_xPtri1
                                        # -- End function
	.globl	IO__Self_print_xPtri32          # -- Begin function IO__Self_print_xPtri32
	.p2align	4, 0x90
	.type	IO__Self_print_xPtri32,@function
IO__Self_print_xPtri32:                 # @IO__Self_print_xPtri32
# %bb.0:
	movq	i32_string@GOTPCREL(%rip), %rdi
	movl	%edx, %esi
	xorl	%eax, %eax
	jmp	printf@PLT                      # TAILCALL
.Lfunc_end94:
	.size	IO__Self_print_xPtri32, .Lfunc_end94-IO__Self_print_xPtri32
                                        # -- End function
	.weak	_size_bool_typ                  # -- Begin function _size_bool_typ
	.p2align	4, 0x90
	.type	_size_bool_typ,@function
_size_bool_typ:                         # @_size_bool_typ
	.cfi_startproc
# %bb.0:
	movl	$1, %eax
	movl	$1, %edx
	retq
.Lfunc_end95:
	.size	_size_bool_typ, .Lfunc_end95-_size_bool_typ
	.cfi_endproc
                                        # -- End function
	.weak	_box_bool_typ                   # -- Begin function _box_bool_typ
	.p2align	4, 0x90
	.type	_box_bool_typ,@function
_box_bool_typ:                          # @_box_bool_typ
	.cfi_startproc
# %bb.0:
	movq	%rdi, %rax
	movzbl	(%rsi), %ecx
	movq	bool_typ@GOTPCREL(%rip), %rdx
	movq	%rdx, (%rdi)
	movq	%rcx, 16(%rdi)
	movq	$0, 24(%rdi)
	movl	$0, 32(%rdi)
	retq
.Lfunc_end96:
	.size	_box_bool_typ, .Lfunc_end96-_box_bool_typ
	.cfi_endproc
                                        # -- End function
	.weak	_unbox_bool_typ                 # -- Begin function _unbox_bool_typ
	.p2align	4, 0x90
	.type	_unbox_bool_typ,@function
_unbox_bool_typ:                        # @_unbox_bool_typ
	.cfi_startproc
# %bb.0:
	movb	%sil, (%r9)
	retq
.Lfunc_end97:
	.size	_unbox_bool_typ, .Lfunc_end97-_unbox_bool_typ
	.cfi_endproc
                                        # -- End function
	.weak	_size_i64_typ                   # -- Begin function _size_i64_typ
	.p2align	4, 0x90
	.type	_size_i64_typ,@function
_size_i64_typ:                          # @_size_i64_typ
	.cfi_startproc
# %bb.0:
	movl	$8, %eax
	movl	$4, %edx
	retq
.Lfunc_end98:
	.size	_size_i64_typ, .Lfunc_end98-_size_i64_typ
	.cfi_endproc
                                        # -- End function
	.weak	_box_i64_typ                    # -- Begin function _box_i64_typ
	.p2align	4, 0x90
	.type	_box_i64_typ,@function
_box_i64_typ:                           # @_box_i64_typ
	.cfi_startproc
# %bb.0:
	movq	%rdi, %rax
	movq	(%rsi), %rcx
	movq	i64_typ@GOTPCREL(%rip), %rdx
	movq	%rcx, 16(%rdi)
	movq	%rdx, (%rdi)
	movq	$0, 24(%rdi)
	movl	$0, 32(%rdi)
	retq
.Lfunc_end99:
	.size	_box_i64_typ, .Lfunc_end99-_box_i64_typ
	.cfi_endproc
                                        # -- End function
	.weak	_unbox_i64_typ                  # -- Begin function _unbox_i64_typ
	.p2align	4, 0x90
	.type	_unbox_i64_typ,@function
_unbox_i64_typ:                         # @_unbox_i64_typ
	.cfi_startproc
# %bb.0:
	movq	%rsi, (%r9)
	retq
.Lfunc_end100:
	.size	_unbox_i64_typ, .Lfunc_end100-_unbox_i64_typ
	.cfi_endproc
                                        # -- End function
	.weak	_size_f64_typ                   # -- Begin function _size_f64_typ
	.p2align	4, 0x90
	.type	_size_f64_typ,@function
_size_f64_typ:                          # @_size_f64_typ
	.cfi_startproc
# %bb.0:
	movl	$8, %eax
	movl	$8, %edx
	retq
.Lfunc_end101:
	.size	_size_f64_typ, .Lfunc_end101-_size_f64_typ
	.cfi_endproc
                                        # -- End function
	.weak	_box_f64_typ                    # -- Begin function _box_f64_typ
	.p2align	4, 0x90
	.type	_box_f64_typ,@function
_box_f64_typ:                           # @_box_f64_typ
	.cfi_startproc
# %bb.0:
	movq	%rdi, %rax
	movq	(%rsi), %rcx
	movq	f64_typ@GOTPCREL(%rip), %rdx
	movq	%rcx, 16(%rdi)
	movq	%rdx, (%rdi)
	movq	$0, 24(%rdi)
	movl	$0, 32(%rdi)
	retq
.Lfunc_end102:
	.size	_box_f64_typ, .Lfunc_end102-_box_f64_typ
	.cfi_endproc
                                        # -- End function
	.weak	_unbox_f64_typ                  # -- Begin function _unbox_f64_typ
	.p2align	4, 0x90
	.type	_unbox_f64_typ,@function
_unbox_f64_typ:                         # @_unbox_f64_typ
	.cfi_startproc
# %bb.0:
	movq	%rsi, (%r9)
	retq
.Lfunc_end103:
	.size	_unbox_f64_typ, .Lfunc_end103-_unbox_f64_typ
	.cfi_endproc
                                        # -- End function
	.globl	_size_Blocking                  # -- Begin function _size_Blocking
	.p2align	4, 0x90
	.type	_size_Blocking,@function
_size_Blocking:                         # @_size_Blocking
# %bb.0:
	movl	$1, %edx
	xorl	%eax, %eax
	retq
.Lfunc_end104:
	.size	_size_Blocking, .Lfunc_end104-_size_Blocking
                                        # -- End function
	.globl	Blocking_B_init_                # -- Begin function Blocking_B_init_
	.p2align	4, 0x90
	.type	Blocking_B_init_,@function
Blocking_B_init_:                       # @Blocking_B_init_
# %bb.0:
	movq	80(%rdi), %rax
	retq
.Lfunc_end105:
	.size	Blocking_B_init_, .Lfunc_end105-Blocking_B_init_
                                        # -- End function
	.globl	Blocking_init_                  # -- Begin function Blocking_init_
	.p2align	4, 0x90
	.type	Blocking_init_,@function
Blocking_init_:                         # @Blocking_init_
# %bb.0:
	retq
.Lfunc_end106:
	.size	Blocking_init_, .Lfunc_end106-Blocking_init_
                                        # -- End function
	.globl	_size_Channel                   # -- Begin function _size_Channel
	.p2align	4, 0x90
	.type	_size_Channel,@function
_size_Channel:                          # @_size_Channel
# %bb.0:
	movl	$16, %eax
	movl	$8, %edx
	retq
.Lfunc_end107:
	.size	_size_Channel, .Lfunc_end107-_size_Channel
                                        # -- End function
	.globl	Channel_B_init_                 # -- Begin function Channel_B_init_
	.p2align	4, 0x90
	.type	Channel_B_init_,@function
Channel_B_init_:                        # @Channel_B_init_
# %bb.0:
	movq	104(%rdi), %rax
	retq
.Lfunc_end108:
	.size	Channel_B_init_, .Lfunc_end108-Channel_B_init_
                                        # -- End function
	.globl	Channel_B_get_                  # -- Begin function Channel_B_get_
	.p2align	4, 0x90
	.type	Channel_B_get_,@function
Channel_B_get_:                         # @Channel_B_get_
# %bb.0:
	movq	112(%rdi), %rax
	retq
.Lfunc_end109:
	.size	Channel_B_get_, .Lfunc_end109-Channel_B_get_
                                        # -- End function
	.globl	Channel_B_put_new_valuePtri32   # -- Begin function Channel_B_put_new_valuePtri32
	.p2align	4, 0x90
	.type	Channel_B_put_new_valuePtri32,@function
Channel_B_put_new_valuePtri32:          # @Channel_B_put_new_valuePtri32
# %bb.0:
	movq	120(%rdi), %rax
	retq
.Lfunc_end110:
	.size	Channel_B_put_new_valuePtri32, .Lfunc_end110-Channel_B_put_new_valuePtri32
                                        # -- End function
	.globl	Channel_init_                   # -- Begin function Channel_init_
	.p2align	4, 0x90
	.type	Channel_init_,@function
Channel_init_:                          # @Channel_init_
	.cfi_startproc
# %bb.0:
	movq	%rsi, %rax
	movq	40(%rdi), %rcx
	movabsq	$-3668118116639750450, %rdx     # imm = 0xCD183A01E78346CE
	imulq	8(%rdi), %rdx
	movq	%rdx, %rsi
	shrq	$32, %rsi
	xorq	%rdx, %rsi
	andq	16(%rdi), %rsi
	movslq	(%rcx,%rsi,4), %rcx
	movq	(%rdi,%rcx,8), %rcx
	movq	8(%rcx), %rcx
	movq	nil_typ@GOTPCREL(%rip), %rsi
	movq	%rax, %rdi
	jmpq	*%rcx                           # TAILCALL
.Lfunc_end111:
	.size	Channel_init_, .Lfunc_end111-Channel_init_
	.cfi_endproc
                                        # -- End function
	.globl	Channel_get_                    # -- Begin function Channel_get_
	.p2align	4, 0x90
	.type	Channel_get_,@function
Channel_get_:                           # @Channel_get_
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$56, %rsp
	.cfi_def_cfa_offset 112
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rsi, %r14
	movq	%rdi, %rbp
	movq	40(%rdi), %rax
	movabsq	$-3668118116639750450, %rcx     # imm = 0xCD183A01E78346CE
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %r12
	movq	(%rdi,%r12,8), %rax
	movq	%rsi, %rdi
	callq	*(%rax)
	cmpq	nil_typ@GOTPCREL(%rip), %rax
	setne	%cl
	testq	%rax, %rax
	setne	%al
	testb	%al, %cl
	jne	.LBB112_3
# %bb.1:                                # %.lr.ph
	movq	%r14, 16(%rsp)                  # 8-byte Spill
	movq	%r12, 8(%rsp)                   # 8-byte Spill
	.p2align	4, 0x90
.LBB112_2:                              # =>This Inner Loop Header: Depth=1
	movq	%fs:0, %r13
	leaq	current_ptr@TPOFF(%r13), %rsi
	xorl	%edi, %edi
	callq	bump_malloc_inner@PLT
	movq	Blocking@GOTPCREL(%rip), %rdx
	movq	%rdx, 24(%rsp)
	movq	%rax, 32(%rsp)
	movl	$9, 48(%rsp)
	movq	40(%rsp), %rcx
	movq	current_coroutine@GOTTPOFF(%rip), %rsi
	movq	(%r13,%rsi), %r12
	movq	%rax, 64(%r12)
	movq	%rcx, 72(%r12)
	movq	%rdx, 48(%r12)
	movl	$9, 80(%r12)
	addq	$8, %r12
	addq	into_caller_buf@GOTTPOFF(%rip), %r13
	callq	context_switch@PLT
	movq	8(%rsp), %r12                   # 8-byte Reload
	movq	16(%rsp), %r14                  # 8-byte Reload
	movq	(%rbp,%r12,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	cmpq	nil_typ@GOTPCREL(%rip), %rax
	sete	%cl
	testq	%rax, %rax
	sete	%al
	orb	%cl, %al
	jne	.LBB112_2
.LBB112_3:
	movl	%edx, %ebx
	movq	(%rbp,%r12,8), %rax
	movq	nil_typ@GOTPCREL(%rip), %rsi
	movq	%r14, %rdi
	callq	*8(%rax)
	movl	%ebx, %eax
	addq	$56, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end112:
	.size	Channel_get_, .Lfunc_end112-Channel_get_
	.cfi_endproc
                                        # -- End function
	.globl	Channel_put_new_valuePtri32     # -- Begin function Channel_put_new_valuePtri32
	.p2align	4, 0x90
	.type	Channel_put_new_valuePtri32,@function
Channel_put_new_valuePtri32:            # @Channel_put_new_valuePtri32
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$72, %rsp
	.cfi_def_cfa_offset 128
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movl	152(%rsp), %eax
	movl	%eax, 12(%rsp)                  # 4-byte Spill
	movq	40(%rdi), %rax
	movabsq	$-3668118116639750450, %rcx     # imm = 0xCD183A01E78346CE
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %rax
	movq	%rdi, 24(%rsp)                  # 8-byte Spill
	movq	%rax, 16(%rsp)                  # 8-byte Spill
	movq	(%rdi,%rax,8), %rax
	movq	%rsi, 32(%rsp)                  # 8-byte Spill
	movq	%rsi, %rdi
	callq	*(%rax)
	cmpq	nil_typ@GOTPCREL(%rip), %rax
	sete	%cl
	testq	%rax, %rax
	sete	%al
	orb	%cl, %al
	jne	.LBB113_4
# %bb.1:                                # %._crit_edge.lr.ph
	movq	Blocking@GOTPCREL(%rip), %rbp
	.p2align	4, 0x90
.LBB113_2:                              # %._crit_edge
                                        # =>This Inner Loop Header: Depth=1
	movq	%fs:0, %r13
	leaq	current_ptr@TPOFF(%r13), %rsi
	xorl	%edi, %edi
	callq	bump_malloc_inner@PLT
	movq	%rbp, 40(%rsp)
	movq	%rax, 48(%rsp)
	movl	$9, 64(%rsp)
	movq	56(%rsp), %rcx
	movq	current_coroutine@GOTTPOFF(%rip), %rdx
	movq	(%r13,%rdx), %r12
	movq	%rax, 64(%r12)
	movq	%rcx, 72(%r12)
	movq	%rbp, 48(%r12)
	movl	$9, 80(%r12)
	addq	$8, %r12
	addq	into_caller_buf@GOTTPOFF(%rip), %r13
	callq	context_switch@PLT
	movq	24(%rsp), %rax                  # 8-byte Reload
	movq	16(%rsp), %rcx                  # 8-byte Reload
	movq	(%rax,%rcx,8), %rax
	movq	32(%rsp), %rdi                  # 8-byte Reload
	callq	*(%rax)
	cmpq	nil_typ@GOTPCREL(%rip), %rax
	je	.LBB113_4
# %bb.3:                                # %._crit_edge
                                        #   in Loop: Header=BB113_2 Depth=1
	testq	%rax, %rax
	jne	.LBB113_2
.LBB113_4:                              # %.critedge
	movq	24(%rsp), %rax                  # 8-byte Reload
	movq	16(%rsp), %rcx                  # 8-byte Reload
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	i32_typ@GOTPCREL(%rip), %rsi
	movq	32(%rsp), %rdi                  # 8-byte Reload
	movl	12(%rsp), %edx                  # 4-byte Reload
	addq	$72, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	jmpq	*%rax                           # TAILCALL
.Lfunc_end113:
	.size	Channel_put_new_valuePtri32, .Lfunc_end113-Channel_put_new_valuePtri32
	.cfi_endproc
                                        # -- End function
	.globl	Channel_getter_value            # -- Begin function Channel_getter_value
	.p2align	4, 0x90
	.type	Channel_getter_value,@function
Channel_getter_value:                   # @Channel_getter_value
# %bb.0:
	movq	(%rdi), %rax
	movl	8(%rdi), %edx
	retq
.Lfunc_end114:
	.size	Channel_getter_value, .Lfunc_end114-Channel_getter_value
                                        # -- End function
	.globl	Channel_setter_value            # -- Begin function Channel_setter_value
	.p2align	4, 0x90
	.type	Channel_setter_value,@function
Channel_setter_value:                   # @Channel_setter_value
# %bb.0:
	movq	%rsi, (%rdi)
	movl	%edx, 8(%rdi)
	retq
.Lfunc_end115:
	.size	Channel_setter_value, .Lfunc_end115-Channel_setter_value
                                        # -- End function
	.globl	_size_IntIterator               # -- Begin function _size_IntIterator
	.p2align	4, 0x90
	.type	_size_IntIterator,@function
_size_IntIterator:                      # @_size_IntIterator
# %bb.0:
	movl	$1, %edx
	xorl	%eax, %eax
	retq
.Lfunc_end116:
	.size	_size_IntIterator, .Lfunc_end116-_size_IntIterator
                                        # -- End function
	.globl	_size_IntIterable               # -- Begin function _size_IntIterable
	.p2align	4, 0x90
	.type	_size_IntIterable,@function
_size_IntIterable:                      # @_size_IntIterable
# %bb.0:
	movl	$1, %edx
	xorl	%eax, %eax
	retq
.Lfunc_end117:
	.size	_size_IntIterable, .Lfunc_end117-_size_IntIterable
                                        # -- End function
	.globl	_size_MapIterable               # -- Begin function _size_MapIterable
	.p2align	4, 0x90
	.type	_size_MapIterable,@function
_size_MapIterable:                      # @_size_MapIterable
# %bb.0:
	movl	$40, %eax
	movl	$8, %edx
	retq
.Lfunc_end118:
	.size	_size_MapIterable, .Lfunc_end118-_size_MapIterable
                                        # -- End function
	.globl	MapIterable_B_init_iterableIntIterable_fFunctionPtri32_to_Ptri32 # -- Begin function MapIterable_B_init_iterableIntIterable_fFunctionPtri32_to_Ptri32
	.p2align	4, 0x90
	.type	MapIterable_B_init_iterableIntIterable_fFunctionPtri32_to_Ptri32,@function
MapIterable_B_init_iterableIntIterable_fFunctionPtri32_to_Ptri32: # @MapIterable_B_init_iterableIntIterable_fFunctionPtri32_to_Ptri32
# %bb.0:
	movq	184(%rdi), %rax
	retq
.Lfunc_end119:
	.size	MapIterable_B_init_iterableIntIterable_fFunctionPtri32_to_Ptri32, .Lfunc_end119-MapIterable_B_init_iterableIntIterable_fFunctionPtri32_to_Ptri32
                                        # -- End function
	.globl	MapIterable_B_each_fFunctionPtri32_to_Nothing # -- Begin function MapIterable_B_each_fFunctionPtri32_to_Nothing
	.p2align	4, 0x90
	.type	MapIterable_B_each_fFunctionPtri32_to_Nothing,@function
MapIterable_B_each_fFunctionPtri32_to_Nothing: # @MapIterable_B_each_fFunctionPtri32_to_Nothing
# %bb.0:
	movq	192(%rdi), %rax
	retq
.Lfunc_end120:
	.size	MapIterable_B_each_fFunctionPtri32_to_Nothing, .Lfunc_end120-MapIterable_B_each_fFunctionPtri32_to_Nothing
                                        # -- End function
	.globl	MapIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32 # -- Begin function MapIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32
	.p2align	4, 0x90
	.type	MapIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32,@function
MapIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32: # @MapIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32
# %bb.0:
	movq	200(%rdi), %rax
	retq
.Lfunc_end121:
	.size	MapIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, .Lfunc_end121-MapIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32
                                        # -- End function
	.globl	MapIterable_B_all_fFunctionPtri32_to_Ptri1 # -- Begin function MapIterable_B_all_fFunctionPtri32_to_Ptri1
	.p2align	4, 0x90
	.type	MapIterable_B_all_fFunctionPtri32_to_Ptri1,@function
MapIterable_B_all_fFunctionPtri32_to_Ptri1: # @MapIterable_B_all_fFunctionPtri32_to_Ptri1
# %bb.0:
	movq	208(%rdi), %rax
	retq
.Lfunc_end122:
	.size	MapIterable_B_all_fFunctionPtri32_to_Ptri1, .Lfunc_end122-MapIterable_B_all_fFunctionPtri32_to_Ptri1
                                        # -- End function
	.globl	MapIterable_B_any_fFunctionPtri32_to_Ptri1 # -- Begin function MapIterable_B_any_fFunctionPtri32_to_Ptri1
	.p2align	4, 0x90
	.type	MapIterable_B_any_fFunctionPtri32_to_Ptri1,@function
MapIterable_B_any_fFunctionPtri32_to_Ptri1: # @MapIterable_B_any_fFunctionPtri32_to_Ptri1
# %bb.0:
	movq	216(%rdi), %rax
	retq
.Lfunc_end123:
	.size	MapIterable_B_any_fFunctionPtri32_to_Ptri1, .Lfunc_end123-MapIterable_B_any_fFunctionPtri32_to_Ptri1
                                        # -- End function
	.globl	MapIterable_B_map_fFunctionPtri32_to_Ptri32 # -- Begin function MapIterable_B_map_fFunctionPtri32_to_Ptri32
	.p2align	4, 0x90
	.type	MapIterable_B_map_fFunctionPtri32_to_Ptri32,@function
MapIterable_B_map_fFunctionPtri32_to_Ptri32: # @MapIterable_B_map_fFunctionPtri32_to_Ptri32
# %bb.0:
	movq	224(%rdi), %rax
	retq
.Lfunc_end124:
	.size	MapIterable_B_map_fFunctionPtri32_to_Ptri32, .Lfunc_end124-MapIterable_B_map_fFunctionPtri32_to_Ptri32
                                        # -- End function
	.globl	MapIterable_B_filter_fFunctionPtri32_to_Ptri1 # -- Begin function MapIterable_B_filter_fFunctionPtri32_to_Ptri1
	.p2align	4, 0x90
	.type	MapIterable_B_filter_fFunctionPtri32_to_Ptri1,@function
MapIterable_B_filter_fFunctionPtri32_to_Ptri1: # @MapIterable_B_filter_fFunctionPtri32_to_Ptri1
# %bb.0:
	movq	232(%rdi), %rax
	retq
.Lfunc_end125:
	.size	MapIterable_B_filter_fFunctionPtri32_to_Ptri1, .Lfunc_end125-MapIterable_B_filter_fFunctionPtri32_to_Ptri1
                                        # -- End function
	.globl	MapIterable_B_chain_otherIntIterable # -- Begin function MapIterable_B_chain_otherIntIterable
	.p2align	4, 0x90
	.type	MapIterable_B_chain_otherIntIterable,@function
MapIterable_B_chain_otherIntIterable:   # @MapIterable_B_chain_otherIntIterable
# %bb.0:
	movq	240(%rdi), %rax
	retq
.Lfunc_end126:
	.size	MapIterable_B_chain_otherIntIterable, .Lfunc_end126-MapIterable_B_chain_otherIntIterable
                                        # -- End function
	.globl	MapIterable_B_interleave_otherIntIterable # -- Begin function MapIterable_B_interleave_otherIntIterable
	.p2align	4, 0x90
	.type	MapIterable_B_interleave_otherIntIterable,@function
MapIterable_B_interleave_otherIntIterable: # @MapIterable_B_interleave_otherIntIterable
# %bb.0:
	movq	248(%rdi), %rax
	retq
.Lfunc_end127:
	.size	MapIterable_B_interleave_otherIntIterable, .Lfunc_end127-MapIterable_B_interleave_otherIntIterable
                                        # -- End function
	.globl	MapIterable_B_zip_otherIntIterable # -- Begin function MapIterable_B_zip_otherIntIterable
	.p2align	4, 0x90
	.type	MapIterable_B_zip_otherIntIterable,@function
MapIterable_B_zip_otherIntIterable:     # @MapIterable_B_zip_otherIntIterable
# %bb.0:
	movq	256(%rdi), %rax
	retq
.Lfunc_end128:
	.size	MapIterable_B_zip_otherIntIterable, .Lfunc_end128-MapIterable_B_zip_otherIntIterable
                                        # -- End function
	.globl	MapIterable_B_product_otherIntIterable # -- Begin function MapIterable_B_product_otherIntIterable
	.p2align	4, 0x90
	.type	MapIterable_B_product_otherIntIterable,@function
MapIterable_B_product_otherIntIterable: # @MapIterable_B_product_otherIntIterable
# %bb.0:
	movq	264(%rdi), %rax
	retq
.Lfunc_end129:
	.size	MapIterable_B_product_otherIntIterable, .Lfunc_end129-MapIterable_B_product_otherIntIterable
                                        # -- End function
	.globl	MapIterable_B_iterator_         # -- Begin function MapIterable_B_iterator_
	.p2align	4, 0x90
	.type	MapIterable_B_iterator_,@function
MapIterable_B_iterator_:                # @MapIterable_B_iterator_
# %bb.0:
	movq	272(%rdi), %rax
	retq
.Lfunc_end130:
	.size	MapIterable_B_iterator_, .Lfunc_end130-MapIterable_B_iterator_
                                        # -- End function
	.globl	MapIterable_init_iterableIntIterable_fFunctionPtri32_to_Ptri32 # -- Begin function MapIterable_init_iterableIntIterable_fFunctionPtri32_to_Ptri32
	.p2align	4, 0x90
	.type	MapIterable_init_iterableIntIterable_fFunctionPtri32_to_Ptri32,@function
MapIterable_init_iterableIntIterable_fFunctionPtri32_to_Ptri32: # @MapIterable_init_iterableIntIterable_fFunctionPtri32_to_Ptri32
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r12
	.cfi_def_cfa_offset 32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	pushq	%rax
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -40
	.cfi_offset %r12, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rsi, %rbx
	movq	%rdi, %r15
	movq	104(%rsp), %r14
	movq	80(%rsp), %rdx
	movq	88(%rsp), %rcx
	movq	72(%rsp), %rsi
	movq	40(%rdi), %rax
	movabsq	$-7488770571603291722, %rdi     # imm = 0x98128AD7A32FD1B6
	imulq	8(%r15), %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%r15), %r8
	movslq	(%rax,%r8,4), %r12
	movq	40(%rsi), %rax
	movabsq	$-7984962120415158575, %rdi     # imm = 0x912FB741F3B45ED1
	imulq	8(%rsi), %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%rsi), %r8
	movl	(%rax,%r8,4), %r8d
	movq	(%r15,%r12,8), %rax
	movq	%rbx, %rdi
	callq	*8(%rax)
	movq	8(%r15,%r12,8), %rax
	movq	8(%rax), %rax
	movq	%rbx, %rdi
	movq	%r14, %rsi
	addq	$8, %rsp
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	jmpq	*%rax                           # TAILCALL
.Lfunc_end131:
	.size	MapIterable_init_iterableIntIterable_fFunctionPtri32_to_Ptri32, .Lfunc_end131-MapIterable_init_iterableIntIterable_fFunctionPtri32_to_Ptri32
	.cfi_endproc
                                        # -- End function
	.globl	IntIterable_each_fFunctionPtri32_to_Nothing # -- Begin function IntIterable_each_fFunctionPtri32_to_Nothing
	.p2align	4, 0x90
	.type	IntIterable_each_fFunctionPtri32_to_Nothing,@function
IntIterable_each_fFunctionPtri32_to_Nothing: # @IntIterable_each_fFunctionPtri32_to_Nothing
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$40, %rsp
	.cfi_def_cfa_offset 96
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rdx, %r15
	movq	%rsi, %r14
	movq	%rdi, %r12
	movq	40(%rdi), %rax
	movabsq	$-7984962120415158575, %rcx     # imm = 0x912FB741F3B45ED1
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %r13
	movq	%rsp, %rbx
	movq	%r15, %rdx
	movl	%r13d, %ecx
	movq	%rbx, %r8
	callq	*80(%rdi,%r13,8)
	leaq	8(%rsp), %rdi
	movq	%r12, %rsi
	movq	%r14, %rdx
	movq	%r15, %rcx
	movl	%r13d, %r8d
	movq	%r12, %r9
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	24(%rsp), %r14
	movq	8(%rsp), %r15
	movq	16(%rsp), %r12
	movq	40(%r15), %rax
	movabsq	$-933084275656658555, %rcx      # imm = 0xF30D04CB83FB7185
	imulq	8(%r15), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%r15), %rdx
	movslq	(%rax,%rdx,4), %r13
	movq	%r15, %rdi
	movq	%r12, %rsi
	movq	%r14, %rdx
	movl	%r13d, %ecx
	movq	%rbx, %r8
	callq	*(%r15,%r13,8)
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	movq	%r15, %rdi
	movq	%r12, %rsi
	movq	%r14, %rdx
	movl	%r13d, %ecx
	movq	%r15, %r8
	movq	%r12, %r9
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	cmpq	nil_typ@GOTPCREL(%rip), %rax
	sete	%cl
	testq	%rax, %rax
	sete	%al
	orb	%cl, %al
	jne	.LBB132_4
# %bb.1:                                # %._crit_edge.preheader
	movq	nil_typ@GOTPCREL(%rip), %rbp
	.p2align	4, 0x90
.LBB132_2:                              # %._crit_edge
                                        # =>This Inner Loop Header: Depth=1
	movl	%edx, %edi
	callq	*120(%rsp)
	movq	%r15, %rdi
	movq	%r12, %rsi
	movq	%r14, %rdx
	movl	%r13d, %ecx
	movq	%rbx, %r8
	callq	*(%r15,%r13,8)
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	movq	%r15, %rdi
	movq	%r12, %rsi
	movq	%r14, %rdx
	movl	%r13d, %ecx
	movq	%r15, %r8
	movq	%r12, %r9
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	cmpq	%rbp, %rax
	je	.LBB132_4
# %bb.3:                                # %._crit_edge
                                        #   in Loop: Header=BB132_2 Depth=1
	testq	%rax, %rax
	jne	.LBB132_2
.LBB132_4:                              # %.critedge
	addq	$40, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end132:
	.size	IntIterable_each_fFunctionPtri32_to_Nothing, .Lfunc_end132-IntIterable_each_fFunctionPtri32_to_Nothing
	.cfi_endproc
                                        # -- End function
	.globl	IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32 # -- Begin function IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32
	.p2align	4, 0x90
	.type	IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32,@function
IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32: # @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$40, %rsp
	.cfi_def_cfa_offset 96
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rdx, %r12
	movq	%rsi, %r15
	movq	%rdi, %r13
	movl	120(%rsp), %ebx
	movq	40(%rdi), %rax
	movabsq	$-7984962120415158575, %rcx     # imm = 0x912FB741F3B45ED1
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %rbp
	movq	%rsp, %r14
	movq	%r12, %rdx
	movl	%ebp, %ecx
	movq	%r14, %r8
	callq	*80(%rdi,%rbp,8)
	leaq	8(%rsp), %rdi
	movq	%r13, %rsi
	movq	%r15, %rdx
	movq	%r12, %rcx
	movl	%ebp, %r8d
	movq	%r13, %r9
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	24(%rsp), %r15
	movq	8(%rsp), %r12
	movq	16(%rsp), %r13
	movq	40(%r12), %rax
	movabsq	$-933084275656658555, %rcx      # imm = 0xF30D04CB83FB7185
	imulq	8(%r12), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%r12), %rdx
	movslq	(%rax,%rdx,4), %rbp
	movq	%r12, %rdi
	movq	%r13, %rsi
	movq	%r15, %rdx
	movl	%ebp, %ecx
	movq	%r14, %r8
	callq	*(%r12,%rbp,8)
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	movq	%r12, %rdi
	movq	%r13, %rsi
	movq	%r15, %rdx
	movl	%ebp, %ecx
	movq	%r12, %r8
	movq	%r13, %r9
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	cmpq	nil_typ@GOTPCREL(%rip), %rax
	sete	%cl
	testq	%rax, %rax
	sete	%al
	orb	%cl, %al
	jne	.LBB133_3
	.p2align	4, 0x90
.LBB133_1:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	movl	%ebx, %edi
	movl	%edx, %esi
	callq	*128(%rsp)
	movl	%eax, %ebx
	movq	%r12, %rdi
	movq	%r13, %rsi
	movq	%r15, %rdx
	movl	%ebp, %ecx
	movq	%r14, %r8
	callq	*(%r12,%rbp,8)
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	movq	%r12, %rdi
	movq	%r13, %rsi
	movq	%r15, %rdx
	movl	%ebp, %ecx
	movq	%r12, %r8
	movq	%r13, %r9
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	cmpq	nil_typ@GOTPCREL(%rip), %rax
	je	.LBB133_3
# %bb.2:                                # %.lr.ph
                                        #   in Loop: Header=BB133_1 Depth=1
	testq	%rax, %rax
	jne	.LBB133_1
.LBB133_3:                              # %._crit_edge
	movl	%ebx, %eax
	addq	$40, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end133:
	.size	IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, .Lfunc_end133-IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32
	.cfi_endproc
                                        # -- End function
	.globl	IntIterable_all_fFunctionPtri32_to_Ptri1 # -- Begin function IntIterable_all_fFunctionPtri32_to_Ptri1
	.p2align	4, 0x90
	.type	IntIterable_all_fFunctionPtri32_to_Ptri1,@function
IntIterable_all_fFunctionPtri32_to_Ptri1: # @IntIterable_all_fFunctionPtri32_to_Ptri1
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$40, %rsp
	.cfi_def_cfa_offset 96
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rdx, %r15
	movq	%rsi, %r14
	movq	%rdi, %r12
	movq	40(%rdi), %rax
	movabsq	$-7984962120415158575, %rcx     # imm = 0x912FB741F3B45ED1
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %r13
	movq	%rsp, %rbx
	movq	%r15, %rdx
	movl	%r13d, %ecx
	movq	%rbx, %r8
	callq	*80(%rdi,%r13,8)
	leaq	8(%rsp), %rdi
	movq	%r12, %rsi
	movq	%r14, %rdx
	movq	%r15, %rcx
	movl	%r13d, %r8d
	movq	%r12, %r9
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	24(%rsp), %r14
	movq	8(%rsp), %r15
	movq	16(%rsp), %r12
	movq	40(%r15), %rax
	movabsq	$-933084275656658555, %rcx      # imm = 0xF30D04CB83FB7185
	imulq	8(%r15), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%r15), %rdx
	movslq	(%rax,%rdx,4), %r13
	.p2align	4, 0x90
.LBB134_1:                              # =>This Inner Loop Header: Depth=1
	movq	%r15, %rdi
	movq	%r12, %rsi
	movq	%r14, %rdx
	movl	%r13d, %ecx
	movq	%rbx, %r8
	callq	*(%r15,%r13,8)
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	movq	%r15, %rdi
	movq	%r12, %rsi
	movq	%r14, %rdx
	movl	%r13d, %ecx
	movq	%r15, %r8
	movq	%r12, %r9
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	cmpq	nil_typ@GOTPCREL(%rip), %rax
	sete	%cl
	testq	%rax, %rax
	sete	%bpl
	orb	%cl, %bpl
	jne	.LBB134_3
# %bb.2:                                #   in Loop: Header=BB134_1 Depth=1
	movl	%edx, %edi
	callq	*120(%rsp)
	testb	$1, %al
	jne	.LBB134_1
.LBB134_3:                              # %.critedge.cont
	movl	%ebp, %eax
	addq	$40, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end134:
	.size	IntIterable_all_fFunctionPtri32_to_Ptri1, .Lfunc_end134-IntIterable_all_fFunctionPtri32_to_Ptri1
	.cfi_endproc
                                        # -- End function
	.globl	IntIterable_any_fFunctionPtri32_to_Ptri1 # -- Begin function IntIterable_any_fFunctionPtri32_to_Ptri1
	.p2align	4, 0x90
	.type	IntIterable_any_fFunctionPtri32_to_Ptri1,@function
IntIterable_any_fFunctionPtri32_to_Ptri1: # @IntIterable_any_fFunctionPtri32_to_Ptri1
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$40, %rsp
	.cfi_def_cfa_offset 96
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rdx, %r15
	movq	%rsi, %r14
	movq	%rdi, %r12
	movq	40(%rdi), %rax
	movabsq	$-7984962120415158575, %rcx     # imm = 0x912FB741F3B45ED1
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %r13
	movq	%rsp, %rbx
	movq	%r15, %rdx
	movl	%r13d, %ecx
	movq	%rbx, %r8
	callq	*80(%rdi,%r13,8)
	leaq	8(%rsp), %rdi
	movq	%r12, %rsi
	movq	%r14, %rdx
	movq	%r15, %rcx
	movl	%r13d, %r8d
	movq	%r12, %r9
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	24(%rsp), %r14
	movq	8(%rsp), %r15
	movq	16(%rsp), %r12
	movq	40(%r15), %rax
	movabsq	$-933084275656658555, %rcx      # imm = 0xF30D04CB83FB7185
	imulq	8(%r15), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%r15), %rdx
	movslq	(%rax,%rdx,4), %r13
	.p2align	4, 0x90
.LBB135_1:                              # =>This Inner Loop Header: Depth=1
	movq	%r15, %rdi
	movq	%r12, %rsi
	movq	%r14, %rdx
	movl	%r13d, %ecx
	movq	%rbx, %r8
	callq	*(%r15,%r13,8)
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	movq	%r15, %rdi
	movq	%r12, %rsi
	movq	%r14, %rdx
	movl	%r13d, %ecx
	movq	%r15, %r8
	movq	%r12, %r9
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	cmpq	nil_typ@GOTPCREL(%rip), %rax
	setne	%cl
	testq	%rax, %rax
	setne	%bpl
	andb	%cl, %bpl
	cmpb	$1, %bpl
	jne	.LBB135_3
# %bb.2:                                #   in Loop: Header=BB135_1 Depth=1
	movl	%edx, %edi
	callq	*120(%rsp)
	testb	$1, %al
	je	.LBB135_1
.LBB135_3:                              # %.critedge.cont
	movl	%ebp, %eax
	addq	$40, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end135:
	.size	IntIterable_any_fFunctionPtri32_to_Ptri1, .Lfunc_end135-IntIterable_any_fFunctionPtri32_to_Ptri1
	.cfi_endproc
                                        # -- End function
	.globl	IntIterable_map_fFunctionPtri32_to_Ptri32 # -- Begin function IntIterable_map_fFunctionPtri32_to_Ptri32
	.p2align	4, 0x90
	.type	IntIterable_map_fFunctionPtri32_to_Ptri32,@function
IntIterable_map_fFunctionPtri32_to_Ptri32: # @IntIterable_map_fFunctionPtri32_to_Ptri32
# %bb.0:
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	movq	%rcx, %r14
	movq	%rdx, %r15
	movq	%rsi, %r12
	movq	%rdi, %rbx
	movq	80(%rsp), %r13
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	movl	$40, %edi
	callq	bump_malloc_inner@PLT
	movq	40(%r12), %rcx
	movabsq	$-7984962120415158575, %rdx     # imm = 0x912FB741F3B45ED1
	imulq	8(%r12), %rdx
	movq	%rdx, %rsi
	shrq	$32, %rsi
	xorq	%rdx, %rsi
	andq	16(%r12), %rsi
	movl	(%rcx,%rsi,4), %ecx
	movq	MapIterable@GOTPCREL(%rip), %rdx
	movq	%r12, (%rax)
	movq	%r15, 8(%rax)
	movq	%r14, 16(%rax)
	movl	%ecx, 24(%rax)
	movq	%r13, 32(%rax)
	movq	%rax, 8(%rbx)
	movq	%rdx, (%rbx)
	movl	$35, 24(%rbx)
	movq	%rbx, %rax
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Lfunc_end136:
	.size	IntIterable_map_fFunctionPtri32_to_Ptri32, .Lfunc_end136-IntIterable_map_fFunctionPtri32_to_Ptri32
                                        # -- End function
	.globl	IntIterable_filter_fFunctionPtri32_to_Ptri1 # -- Begin function IntIterable_filter_fFunctionPtri32_to_Ptri1
	.p2align	4, 0x90
	.type	IntIterable_filter_fFunctionPtri32_to_Ptri1,@function
IntIterable_filter_fFunctionPtri32_to_Ptri1: # @IntIterable_filter_fFunctionPtri32_to_Ptri1
# %bb.0:
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	movq	%rcx, %r14
	movq	%rdx, %r15
	movq	%rsi, %r12
	movq	%rdi, %rbx
	movq	80(%rsp), %r13
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	movl	$40, %edi
	callq	bump_malloc_inner@PLT
	movq	FilterIterable@GOTPCREL(%rip), %rcx
	movq	40(%r12), %rdx
	movabsq	$-7984962120415158575, %rsi     # imm = 0x912FB741F3B45ED1
	imulq	8(%r12), %rsi
	movq	%rsi, %rdi
	shrq	$32, %rdi
	xorq	%rsi, %rdi
	andq	16(%r12), %rdi
	movl	(%rdx,%rdi,4), %edx
	movq	%r12, (%rax)
	movq	%r15, 8(%rax)
	movq	%r14, 16(%rax)
	movl	%edx, 24(%rax)
	movq	%r13, 32(%rax)
	movq	%rax, 8(%rbx)
	movq	%rcx, (%rbx)
	movl	$35, 24(%rbx)
	movq	%rbx, %rax
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Lfunc_end137:
	.size	IntIterable_filter_fFunctionPtri32_to_Ptri1, .Lfunc_end137-IntIterable_filter_fFunctionPtri32_to_Ptri1
                                        # -- End function
	.globl	IntIterable_chain_otherIntIterable # -- Begin function IntIterable_chain_otherIntIterable
	.p2align	4, 0x90
	.type	IntIterable_chain_otherIntIterable,@function
IntIterable_chain_otherIntIterable:     # @IntIterable_chain_otherIntIterable
# %bb.0:
	pushq	%rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	movq	%rcx, %r14
	movq	%rdx, %r15
	movq	%rsi, %r12
	movq	%rdi, %rbx
	movq	104(%rsp), %rbp
	movq	96(%rsp), %r13
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	movl	$64, %edi
	callq	bump_malloc_inner@PLT
	movq	ChainIterable@GOTPCREL(%rip), %rcx
	movq	40(%r12), %rdx
	movabsq	$-7984962120415158575, %rsi     # imm = 0x912FB741F3B45ED1
	movq	8(%r12), %rdi
	imulq	%rsi, %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%r12), %r8
	movl	(%rdx,%r8,4), %edx
	movq	%r12, (%rax)
	movq	%r15, 8(%rax)
	movq	%r14, 16(%rax)
	movl	%edx, 24(%rax)
	movq	40(%r13), %rdx
	imulq	8(%r13), %rsi
	movq	%rsi, %rdi
	shrq	$32, %rdi
	xorq	%rsi, %rdi
	andq	16(%r13), %rdi
	movl	(%rdx,%rdi,4), %edx
	movq	%r13, 32(%rax)
	movq	%rbp, 40(%rax)
	movq	112(%rsp), %rsi
	movq	%rsi, 48(%rax)
	movl	%edx, 56(%rax)
	movq	%rcx, (%rbx)
	movq	%rax, 8(%rbx)
	movl	$35, 24(%rbx)
	movq	%rbx, %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end138:
	.size	IntIterable_chain_otherIntIterable, .Lfunc_end138-IntIterable_chain_otherIntIterable
                                        # -- End function
	.globl	IntIterable_interleave_otherIntIterable # -- Begin function IntIterable_interleave_otherIntIterable
	.p2align	4, 0x90
	.type	IntIterable_interleave_otherIntIterable,@function
IntIterable_interleave_otherIntIterable: # @IntIterable_interleave_otherIntIterable
# %bb.0:
	pushq	%rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	movq	%rcx, %r14
	movq	%rdx, %r15
	movq	%rsi, %r12
	movq	%rdi, %rbx
	movq	104(%rsp), %rbp
	movq	96(%rsp), %r13
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	movl	$64, %edi
	callq	bump_malloc_inner@PLT
	movq	InterleaveIterable@GOTPCREL(%rip), %rcx
	movq	40(%r12), %rdx
	movabsq	$-7984962120415158575, %rsi     # imm = 0x912FB741F3B45ED1
	movq	8(%r12), %rdi
	imulq	%rsi, %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%r12), %r8
	movl	(%rdx,%r8,4), %edx
	movq	%r12, (%rax)
	movq	%r15, 8(%rax)
	movq	%r14, 16(%rax)
	movl	%edx, 24(%rax)
	movq	40(%r13), %rdx
	imulq	8(%r13), %rsi
	movq	%rsi, %rdi
	shrq	$32, %rdi
	xorq	%rsi, %rdi
	andq	16(%r13), %rdi
	movl	(%rdx,%rdi,4), %edx
	movq	%r13, 32(%rax)
	movq	%rbp, 40(%rax)
	movq	112(%rsp), %rsi
	movq	%rsi, 48(%rax)
	movl	%edx, 56(%rax)
	movq	%rcx, (%rbx)
	movq	%rax, 8(%rbx)
	movl	$35, 24(%rbx)
	movq	%rbx, %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end139:
	.size	IntIterable_interleave_otherIntIterable, .Lfunc_end139-IntIterable_interleave_otherIntIterable
                                        # -- End function
	.globl	IntIterable_zip_otherIntIterable # -- Begin function IntIterable_zip_otherIntIterable
	.p2align	4, 0x90
	.type	IntIterable_zip_otherIntIterable,@function
IntIterable_zip_otherIntIterable:       # @IntIterable_zip_otherIntIterable
# %bb.0:
	pushq	%rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	movq	%rcx, %r14
	movq	%rdx, %r15
	movq	%rsi, %r12
	movq	%rdi, %rbx
	movq	104(%rsp), %rbp
	movq	96(%rsp), %r13
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	movl	$64, %edi
	callq	bump_malloc_inner@PLT
	movq	40(%r12), %rcx
	movabsq	$-7984962120415158575, %rdx     # imm = 0x912FB741F3B45ED1
	movq	8(%r12), %rsi
	imulq	%rdx, %rsi
	movq	%rsi, %rdi
	shrq	$32, %rdi
	xorq	%rsi, %rdi
	andq	16(%r12), %rdi
	movl	(%rcx,%rdi,4), %ecx
	movq	ZipIterable@GOTPCREL(%rip), %rsi
	movq	%r12, (%rax)
	movq	%r15, 8(%rax)
	movq	%r14, 16(%rax)
	movl	%ecx, 24(%rax)
	movq	40(%r13), %rcx
	imulq	8(%r13), %rdx
	movq	%rdx, %rdi
	shrq	$32, %rdi
	xorq	%rdx, %rdi
	andq	16(%r13), %rdi
	movl	(%rcx,%rdi,4), %ecx
	movq	%r13, 32(%rax)
	movq	%rbp, 40(%rax)
	movq	112(%rsp), %rdx
	movq	%rdx, 48(%rax)
	movl	%ecx, 56(%rax)
	movq	%rsi, (%rbx)
	movq	%rax, 8(%rbx)
	movl	$9, 24(%rbx)
	movq	%rbx, %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end140:
	.size	IntIterable_zip_otherIntIterable, .Lfunc_end140-IntIterable_zip_otherIntIterable
                                        # -- End function
	.globl	IntIterable_product_otherIntIterable # -- Begin function IntIterable_product_otherIntIterable
	.p2align	4, 0x90
	.type	IntIterable_product_otherIntIterable,@function
IntIterable_product_otherIntIterable:   # @IntIterable_product_otherIntIterable
# %bb.0:
	pushq	%rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	movq	%rcx, %r14
	movq	%rdx, %r15
	movq	%rsi, %r12
	movq	%rdi, %rbx
	movq	104(%rsp), %rbp
	movq	96(%rsp), %r13
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	movl	$64, %edi
	callq	bump_malloc_inner@PLT
	movq	40(%r12), %rcx
	movabsq	$-7984962120415158575, %rdx     # imm = 0x912FB741F3B45ED1
	movq	8(%r12), %rsi
	imulq	%rdx, %rsi
	movq	%rsi, %rdi
	shrq	$32, %rdi
	xorq	%rsi, %rdi
	andq	16(%r12), %rdi
	movl	(%rcx,%rdi,4), %ecx
	movq	ProductIterable@GOTPCREL(%rip), %rsi
	movq	%r12, (%rax)
	movq	%r15, 8(%rax)
	movq	%r14, 16(%rax)
	movl	%ecx, 24(%rax)
	movq	40(%r13), %rcx
	imulq	8(%r13), %rdx
	movq	%rdx, %rdi
	shrq	$32, %rdi
	xorq	%rdx, %rdi
	andq	16(%r13), %rdi
	movl	(%rcx,%rdi,4), %ecx
	movq	%r13, 32(%rax)
	movq	%rbp, 40(%rax)
	movq	112(%rsp), %rdx
	movq	%rdx, 48(%rax)
	movl	%ecx, 56(%rax)
	movq	%rsi, (%rbx)
	movq	%rax, 8(%rbx)
	movl	$9, 24(%rbx)
	movq	%rbx, %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end141:
	.size	IntIterable_product_otherIntIterable, .Lfunc_end141-IntIterable_product_otherIntIterable
                                        # -- End function
	.globl	MapIterable_iterator_           # -- Begin function MapIterable_iterator_
	.p2align	4, 0x90
	.type	MapIterable_iterator_,@function
MapIterable_iterator_:                  # @MapIterable_iterator_
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$248, %rsp
	.cfi_def_cfa_offset 304
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rdx, 24(%rsp)                  # 8-byte Spill
	movq	%rsi, %r15
	movq	%rdi, 48(%rsp)                  # 8-byte Spill
	movq	40(%rsi), %rax
	movabsq	$-7488770571603291722, %rcx     # imm = 0x98128AD7A32FD1B6
	imulq	8(%rsi), %rcx
	movq	%rcx, %rsi
	shrq	$32, %rsi
	xorq	%rcx, %rsi
	andq	16(%r15), %rsi
	movslq	(%rax,%rsi,4), %rax
	movq	%rax, 16(%rsp)                  # 8-byte Spill
	movq	(%r15,%rax,8), %rax
	leaq	152(%rsp), %rdi
	movq	%rdx, %rsi
	callq	*(%rax)
	movslq	176(%rsp), %r13
	movq	168(%rsp), %rbp
	movq	152(%rsp), %r12
	movq	160(%rsp), %rbx
	leaq	8(%rsp), %r14
	movq	%r12, %rdi
	movq	%rbx, %rsi
	movq	%rbp, %rdx
	movl	%r13d, %ecx
	movq	%r14, %r8
	callq	*80(%r12,%r13,8)
	leaq	216(%rsp), %rdi
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	%rbp, %rcx
	movl	%r13d, %r8d
	movq	%r12, %r9
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	16(%rsp), %r14                  # 8-byte Reload
	movq	8(%r15,%r14,8), %rax
	movq	24(%rsp), %rbx                  # 8-byte Reload
	movq	%rbx, %rdi
	callq	*(%rax)
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	movl	$40, %edi
	callq	bump_malloc_inner@PLT
	movq	MapIterator@GOTPCREL(%rip), %rcx
	movq	%rcx, 56(%rsp)
	movq	%rax, 64(%rsp)
	movl	$9, 80(%rsp)
	movq	(%r15,%r14,8), %rax
	leaq	120(%rsp), %rdi
	movq	%rbx, %rsi
	callq	*(%rax)
	movslq	144(%rsp), %rbx
	movq	136(%rsp), %r12
	movq	120(%rsp), %r13
	movq	128(%rsp), %rbp
	movq	%r13, %rdi
	movq	%rbp, %rsi
	movq	%r12, %rdx
	movl	%ebx, %ecx
	leaq	8(%rsp), %r14
	movq	%r14, %r8
	callq	*80(%r13,%rbx,8)
	leaq	184(%rsp), %rdi
	movq	%r13, %rsi
	movq	%rbp, %rdx
	movq	%r12, %rcx
	movl	%ebx, %r8d
	movq	%r13, %r9
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	200(%rsp), %rax
	movq	%rax, 40(%rsp)                  # 8-byte Spill
	movq	184(%rsp), %rbx
	movq	192(%rsp), %rax
	movq	%rax, 32(%rsp)                  # 8-byte Spill
	movq	16(%rsp), %rax                  # 8-byte Reload
	movq	8(%r15,%rax,8), %rax
	movq	24(%rsp), %rdi                  # 8-byte Reload
	callq	*(%rax)
	movq	%rax, 16(%rsp)                  # 8-byte Spill
	movq	40(%rbx), %rax
	movabsq	$-933084275656658555, %rcx      # imm = 0xF30D04CB83FB7185
	imulq	8(%rbx), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rbx), %rdx
	movl	(%rax,%rdx,4), %r13d
	movq	56(%rsp), %r14
	movq	64(%rsp), %r15
	movq	72(%rsp), %r12
	movslq	80(%rsp), %rbp
	movq	_parameterization_IntIterator@GOTPCREL(%rip), %rax
	movq	%rax, 104(%rsp)
	movq	_parameterization_FunctionPtri32_to_Ptri32@GOTPCREL(%rip), %rax
	movq	%rax, 112(%rsp)
	movq	16(%r14,%rbp,8), %rax
	movq	%rbx, 88(%rsp)
	movq	function_typ@GOTPCREL(%rip), %rcx
	movq	%rcx, 96(%rsp)
	leaq	88(%rsp), %r8
	movq	%r14, %rdi
	movq	%r15, %rsi
	movq	%r12, %rdx
	movl	%ebp, %ecx
	callq	*%rax
	leaq	104(%rsp), %r10
	movq	%r14, %rdi
	movq	%r15, %rsi
	movq	%r12, %rdx
	movl	%ebp, %ecx
	movq	%r14, %r8
	movq	%r15, %r9
	pushq	16(%rsp)                        # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	56(%rsp)                        # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	56(%rsp)                        # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$64, %rsp
	.cfi_adjust_cfa_offset -64
	movq	40(%r14), %rax
	movabsq	$8673632051301757104, %rcx      # imm = 0x785EEE655248B0B0
	imulq	8(%r14), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%r14), %rdx
	movl	(%rax,%rdx,4), %ecx
	movq	48(%rsp), %rax                  # 8-byte Reload
	movq	%r12, 16(%rax)
	movq	%r15, 8(%rax)
	movq	%r14, (%rax)
	movl	%ecx, 24(%rax)
	addq	$248, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end142:
	.size	MapIterable_iterator_, .Lfunc_end142-MapIterable_iterator_
	.cfi_endproc
                                        # -- End function
	.weak	_size_function_typ              # -- Begin function _size_function_typ
	.p2align	4, 0x90
	.type	_size_function_typ,@function
_size_function_typ:                     # @_size_function_typ
	.cfi_startproc
# %bb.0:
	movl	$8, %eax
	movl	$8, %edx
	retq
.Lfunc_end143:
	.size	_size_function_typ, .Lfunc_end143-_size_function_typ
	.cfi_endproc
                                        # -- End function
	.weak	_box_function_typ               # -- Begin function _box_function_typ
	.p2align	4, 0x90
	.type	_box_function_typ,@function
_box_function_typ:                      # @_box_function_typ
	.cfi_startproc
# %bb.0:
	movq	%rdi, %rax
	movq	(%rsi), %rcx
	movq	function_typ@GOTPCREL(%rip), %rdx
	movq	%rcx, 16(%rdi)
	movq	%rdx, (%rdi)
	movq	$0, 24(%rdi)
	movl	$0, 32(%rdi)
	retq
.Lfunc_end144:
	.size	_box_function_typ, .Lfunc_end144-_box_function_typ
	.cfi_endproc
                                        # -- End function
	.weak	_unbox_function_typ             # -- Begin function _unbox_function_typ
	.p2align	4, 0x90
	.type	_unbox_function_typ,@function
_unbox_function_typ:                    # @_unbox_function_typ
	.cfi_startproc
# %bb.0:
	movq	%rsi, (%r9)
	retq
.Lfunc_end145:
	.size	_unbox_function_typ, .Lfunc_end145-_unbox_function_typ
	.cfi_endproc
                                        # -- End function
	.globl	_size_MapIterator               # -- Begin function _size_MapIterator
	.p2align	4, 0x90
	.type	_size_MapIterator,@function
_size_MapIterator:                      # @_size_MapIterator
# %bb.0:
	movl	$40, %eax
	movl	$8, %edx
	retq
.Lfunc_end146:
	.size	_size_MapIterator, .Lfunc_end146-_size_MapIterator
                                        # -- End function
	.globl	MapIterator_B_init_iteratorIntIterator_fFunctionPtri32_to_Ptri32 # -- Begin function MapIterator_B_init_iteratorIntIterator_fFunctionPtri32_to_Ptri32
	.p2align	4, 0x90
	.type	MapIterator_B_init_iteratorIntIterator_fFunctionPtri32_to_Ptri32,@function
MapIterator_B_init_iteratorIntIterator_fFunctionPtri32_to_Ptri32: # @MapIterator_B_init_iteratorIntIterator_fFunctionPtri32_to_Ptri32
# %bb.0:
	movq	104(%rdi), %rax
	retq
.Lfunc_end147:
	.size	MapIterator_B_init_iteratorIntIterator_fFunctionPtri32_to_Ptri32, .Lfunc_end147-MapIterator_B_init_iteratorIntIterator_fFunctionPtri32_to_Ptri32
                                        # -- End function
	.globl	MapIterator_B_next_             # -- Begin function MapIterator_B_next_
	.p2align	4, 0x90
	.type	MapIterator_B_next_,@function
MapIterator_B_next_:                    # @MapIterator_B_next_
# %bb.0:
	movq	112(%rdi), %rax
	retq
.Lfunc_end148:
	.size	MapIterator_B_next_, .Lfunc_end148-MapIterator_B_next_
                                        # -- End function
	.globl	MapIterator_init_iteratorIntIterator_fFunctionPtri32_to_Ptri32 # -- Begin function MapIterator_init_iteratorIntIterator_fFunctionPtri32_to_Ptri32
	.p2align	4, 0x90
	.type	MapIterator_init_iteratorIntIterator_fFunctionPtri32_to_Ptri32,@function
MapIterator_init_iteratorIntIterator_fFunctionPtri32_to_Ptri32: # @MapIterator_init_iteratorIntIterator_fFunctionPtri32_to_Ptri32
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r12
	.cfi_def_cfa_offset 32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	pushq	%rax
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -40
	.cfi_offset %r12, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rsi, %rbx
	movq	%rdi, %r15
	movq	104(%rsp), %r14
	movq	80(%rsp), %rdx
	movq	88(%rsp), %rcx
	movq	72(%rsp), %rsi
	movq	40(%rdi), %rax
	movabsq	$-146553482626734782, %rdi      # imm = 0xFDF756624F6FE542
	imulq	8(%r15), %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%r15), %r8
	movslq	(%rax,%r8,4), %r12
	movq	40(%rsi), %rax
	movabsq	$-933084275656658555, %rdi      # imm = 0xF30D04CB83FB7185
	imulq	8(%rsi), %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%rsi), %r8
	movl	(%rax,%r8,4), %r8d
	movq	(%r15,%r12,8), %rax
	movq	%rbx, %rdi
	callq	*8(%rax)
	movq	8(%r15,%r12,8), %rax
	movq	8(%rax), %rax
	movq	%rbx, %rdi
	movq	%r14, %rsi
	addq	$8, %rsp
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	jmpq	*%rax                           # TAILCALL
.Lfunc_end149:
	.size	MapIterator_init_iteratorIntIterator_fFunctionPtri32_to_Ptri32, .Lfunc_end149-MapIterator_init_iteratorIntIterator_fFunctionPtri32_to_Ptri32
	.cfi_endproc
                                        # -- End function
	.globl	MapIterator_next_               # -- Begin function MapIterator_next_
	.p2align	4, 0x90
	.type	MapIterator_next_,@function
MapIterator_next_:                      # @MapIterator_next_
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$56, %rsp
	.cfi_def_cfa_offset 112
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rdi, %r14
	movq	40(%rdi), %rax
	movabsq	$-146553482626734782, %rcx      # imm = 0xFDF756624F6FE542
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %rax
	movq	%rax, 8(%rsp)                   # 8-byte Spill
	movq	(%rdi,%rax,8), %rax
	leaq	24(%rsp), %rdi
	movq	%rsi, 16(%rsp)                  # 8-byte Spill
	callq	*(%rax)
	movslq	48(%rsp), %r15
	movq	40(%rsp), %r12
	movq	24(%rsp), %r13
	movq	32(%rsp), %rbp
	movq	%rsp, %rbx
	movq	%r13, %rdi
	movq	%rbp, %rsi
	movq	%r12, %rdx
	movl	%r15d, %ecx
	movq	%rbx, %r8
	callq	*(%r13,%r15,8)
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	movq	%r13, %rdi
	movq	%rbp, %rsi
	movq	%r12, %rdx
	movl	%r15d, %ecx
	movq	%r13, %r8
	movq	%rbp, %r9
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	%rax, %rcx
	movl	%edx, %ebp
	movq	nil_typ@GOTPCREL(%rip), %rax
	cmpq	%rax, %rcx
	sete	%dl
	testq	%rcx, %rcx
	sete	%cl
	orb	%dl, %cl
                                        # implicit-def: $edx
	jne	.LBB150_2
# %bb.1:
	movq	8(%rsp), %rax                   # 8-byte Reload
	movq	8(%r14,%rax,8), %rax
	movq	16(%rsp), %rdi                  # 8-byte Reload
	callq	*(%rax)
	movl	%ebp, %edi
	callq	*%rax
	movl	%eax, %edx
	movq	i32_typ@GOTPCREL(%rip), %rax
.LBB150_2:
	addq	$56, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end150:
	.size	MapIterator_next_, .Lfunc_end150-MapIterator_next_
	.cfi_endproc
                                        # -- End function
	.globl	MapIterator_getter_f            # -- Begin function MapIterator_getter_f
	.p2align	4, 0x90
	.type	MapIterator_getter_f,@function
MapIterator_getter_f:                   # @MapIterator_getter_f
# %bb.0:
	movq	32(%rdi), %rax
	retq
.Lfunc_end151:
	.size	MapIterator_getter_f, .Lfunc_end151-MapIterator_getter_f
                                        # -- End function
	.globl	MapIterator_setter_f            # -- Begin function MapIterator_setter_f
	.p2align	4, 0x90
	.type	MapIterator_setter_f,@function
MapIterator_setter_f:                   # @MapIterator_setter_f
# %bb.0:
	movq	%rsi, 32(%rdi)
	retq
.Lfunc_end152:
	.size	MapIterator_setter_f, .Lfunc_end152-MapIterator_setter_f
                                        # -- End function
	.globl	MapIterator_getter_iterator     # -- Begin function MapIterator_getter_iterator
	.p2align	4, 0x90
	.type	MapIterator_getter_iterator,@function
MapIterator_getter_iterator:            # @MapIterator_getter_iterator
# %bb.0:
	movq	%rdi, %rax
	movq	(%rsi), %rcx
	movq	8(%rsi), %rdx
	movq	16(%rsi), %rdi
	movl	24(%rsi), %esi
	movl	%esi, 24(%rax)
	movq	%rdi, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	retq
.Lfunc_end153:
	.size	MapIterator_getter_iterator, .Lfunc_end153-MapIterator_getter_iterator
                                        # -- End function
	.globl	MapIterator_setter_iterator     # -- Begin function MapIterator_setter_iterator
	.p2align	4, 0x90
	.type	MapIterator_setter_iterator,@function
MapIterator_setter_iterator:            # @MapIterator_setter_iterator
# %bb.0:
	movq	%rsi, (%rdi)
	movq	%rdx, 8(%rdi)
	movq	%rcx, 16(%rdi)
	movl	%r8d, 24(%rdi)
	retq
.Lfunc_end154:
	.size	MapIterator_setter_iterator, .Lfunc_end154-MapIterator_setter_iterator
                                        # -- End function
	.globl	_size_ProductIterable           # -- Begin function _size_ProductIterable
	.p2align	4, 0x90
	.type	_size_ProductIterable,@function
_size_ProductIterable:                  # @_size_ProductIterable
# %bb.0:
	movl	$64, %eax
	movl	$8, %edx
	retq
.Lfunc_end155:
	.size	_size_ProductIterable, .Lfunc_end155-_size_ProductIterable
                                        # -- End function
	.globl	ProductIterable_B_init_firstIntIterable_secondIntIterable # -- Begin function ProductIterable_B_init_firstIntIterable_secondIntIterable
	.p2align	4, 0x90
	.type	ProductIterable_B_init_firstIntIterable_secondIntIterable,@function
ProductIterable_B_init_firstIntIterable_secondIntIterable: # @ProductIterable_B_init_firstIntIterable_secondIntIterable
# %bb.0:
	movq	104(%rdi), %rax
	retq
.Lfunc_end156:
	.size	ProductIterable_B_init_firstIntIterable_secondIntIterable, .Lfunc_end156-ProductIterable_B_init_firstIntIterable_secondIntIterable
                                        # -- End function
	.globl	ProductIterable_B_iterator_     # -- Begin function ProductIterable_B_iterator_
	.p2align	4, 0x90
	.type	ProductIterable_B_iterator_,@function
ProductIterable_B_iterator_:            # @ProductIterable_B_iterator_
# %bb.0:
	movq	112(%rdi), %rax
	retq
.Lfunc_end157:
	.size	ProductIterable_B_iterator_, .Lfunc_end157-ProductIterable_B_iterator_
                                        # -- End function
	.globl	ProductIterable_init_firstIntIterable_secondIntIterable # -- Begin function ProductIterable_init_firstIntIterable_secondIntIterable
	.p2align	4, 0x90
	.type	ProductIterable_init_firstIntIterable_secondIntIterable,@function
ProductIterable_init_firstIntIterable_secondIntIterable: # @ProductIterable_init_firstIntIterable_secondIntIterable
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	pushq	%rax
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rsi, %rbx
	movq	%rdi, %r12
	movq	128(%rsp), %rax
	movq	%rax, (%rsp)                    # 8-byte Spill
	movq	136(%rsp), %r15
	movq	120(%rsp), %r13
	movq	96(%rsp), %rdx
	movq	104(%rsp), %rcx
	movq	88(%rsp), %rsi
	movq	40(%rdi), %rax
	movabsq	$4128338911757318636, %rdi      # imm = 0x394ACE5E0BB7B9EC
	imulq	8(%r12), %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%r12), %r8
	movslq	(%rax,%r8,4), %rbp
	movq	40(%rsi), %rax
	movabsq	$-7984962120415158575, %r14     # imm = 0x912FB741F3B45ED1
	movq	8(%rsi), %rdi
	imulq	%r14, %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%rsi), %r8
	movl	(%rax,%r8,4), %r8d
	movq	(%r12,%rbp,8), %rax
	movq	%rbx, %rdi
	callq	*8(%rax)
	movq	40(%r13), %rax
	imulq	8(%r13), %r14
	movq	%r14, %rcx
	shrq	$32, %rcx
	xorq	%r14, %rcx
	andq	16(%r13), %rcx
	movl	(%rax,%rcx,4), %r8d
	movq	8(%r12,%rbp,8), %rax
	movq	8(%rax), %rax
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movq	(%rsp), %rdx                    # 8-byte Reload
	movq	%r15, %rcx
	addq	$8, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	jmpq	*%rax                           # TAILCALL
.Lfunc_end158:
	.size	ProductIterable_init_firstIntIterable_secondIntIterable, .Lfunc_end158-ProductIterable_init_firstIntIterable_secondIntIterable
	.cfi_endproc
                                        # -- End function
	.globl	ProductIterable_iterator_       # -- Begin function ProductIterable_iterator_
	.p2align	4, 0x90
	.type	ProductIterable_iterator_,@function
ProductIterable_iterator_:              # @ProductIterable_iterator_
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$216, %rsp
	.cfi_def_cfa_offset 272
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rdx, %r15
	movq	%rsi, %rbx
	movq	%rdi, 16(%rsp)                  # 8-byte Spill
	movq	40(%rsi), %rax
	movabsq	$4128338911757318636, %rcx      # imm = 0x394ACE5E0BB7B9EC
	imulq	8(%rsi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rsi), %rdx
	movslq	(%rax,%rdx,4), %r12
	movq	(%rsi,%r12,8), %rax
	leaq	184(%rsp), %rdi
	movq	%r15, %rsi
	callq	*(%rax)
	movq	8(%rbx,%r12,8), %rax
	leaq	152(%rsp), %rdi
	movq	%r15, %rsi
	callq	*(%rax)
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	movl	$112, %edi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r14
	movq	(%rbx,%r12,8), %rax
	leaq	120(%rsp), %rdi
	movq	%r15, %rsi
	callq	*(%rax)
	movq	136(%rsp), %rax
	movq	%rax, 8(%rsp)                   # 8-byte Spill
	movq	120(%rsp), %rbp
	movq	128(%rsp), %r13
	movq	8(%rbx,%r12,8), %rax
	leaq	24(%rsp), %rdi
	movq	%r15, %rsi
	callq	*(%rax)
	movl	48(%rsp), %eax
	movq	40(%rsp), %rcx
	movq	24(%rsp), %rdx
	movq	32(%rsp), %rsi
	movq	40(%rbp), %rdi
	movabsq	$-7984962120415158575, %r8      # imm = 0x912FB741F3B45ED1
	imulq	8(%rbp), %r8
	movq	%r8, %r9
	shrq	$32, %r9
	xorq	%r8, %r9
	andq	16(%rbp), %r9
	movslq	(%rdi,%r9,4), %rbx
	movq	%rdx, 64(%r14)
	movq	%rsi, 72(%r14)
	movq	%rcx, 80(%r14)
	movl	%eax, 88(%r14)
	movq	%rsp, %r8
	movq	%rbp, %rdi
	movq	%r13, %rsi
	movq	8(%rsp), %r12                   # 8-byte Reload
	movq	%r12, %rdx
	movl	%ebx, %ecx
	movq	%r8, %r15
	callq	*80(%rbp,%rbx,8)
	leaq	88(%rsp), %rdi
	movq	%rbp, %rsi
	movq	%r13, %rdx
	movq	%r12, %rcx
	movl	%ebx, %r8d
	movq	%rbp, %r9
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	104(%rsp), %rax
	movq	88(%rsp), %rcx
	movq	96(%rsp), %rdx
	movq	40(%rcx), %rsi
	movabsq	$-933084275656658555, %r15      # imm = 0xF30D04CB83FB7185
	movq	8(%rcx), %rdi
	imulq	%r15, %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%rcx), %r8
	movl	(%rsi,%r8,4), %esi
	movq	%rcx, (%r14)
	movq	%rdx, 8(%r14)
	movq	%rax, 16(%r14)
	movl	%esi, 24(%r14)
	movq	64(%r14), %rbx
	movq	72(%r14), %r12
	movq	80(%r14), %r13
	movslq	88(%r14), %rbp
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r13, %rdx
	movl	%ebp, %ecx
	movq	%rsp, %r8
	callq	*80(%rbx,%rbp,8)
	leaq	56(%rsp), %rdi
	movq	%rbx, %rsi
	movq	%r12, %rdx
	movq	%r13, %rcx
	movl	%ebp, %r8d
	movq	%rbx, %r9
	movq	%rsp, %r10
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	72(%rsp), %rax
	movq	56(%rsp), %rcx
	movq	64(%rsp), %rdx
	movq	40(%rcx), %rsi
	imulq	8(%rcx), %r15
	movq	%r15, %rdi
	shrq	$32, %rdi
	xorq	%r15, %rdi
	andq	16(%rcx), %rdi
	movl	(%rsi,%rdi,4), %esi
	movq	%rcx, 32(%r14)
	movq	%rdx, 40(%r14)
	movq	%rax, 48(%r14)
	movl	%esi, 56(%r14)
	movq	(%r14), %rbx
	movq	8(%r14), %r12
	movq	16(%r14), %r13
	movslq	24(%r14), %rbp
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r13, %rdx
	movl	%ebp, %ecx
	movq	%rsp, %r15
	movq	%r15, %r8
	callq	*(%rbx,%rbp,8)
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r13, %rdx
	movl	%ebp, %ecx
	movq	%rbx, %r8
	movq	%r12, %r9
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	%rax, 96(%r14)
	movl	%edx, 104(%r14)
	movq	16(%rsp), %rax                  # 8-byte Reload
	movq	%r14, 8(%rax)
	movq	ProductIterator@GOTPCREL(%rip), %rcx
	movq	%rcx, (%rax)
	movl	$17, 24(%rax)
	addq	$216, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end159:
	.size	ProductIterable_iterator_, .Lfunc_end159-ProductIterable_iterator_
	.cfi_endproc
                                        # -- End function
	.globl	_size_ProductIterator           # -- Begin function _size_ProductIterator
	.p2align	4, 0x90
	.type	_size_ProductIterator,@function
_size_ProductIterator:                  # @_size_ProductIterator
# %bb.0:
	movl	$112, %eax
	movl	$8, %edx
	retq
.Lfunc_end160:
	.size	_size_ProductIterator, .Lfunc_end160-_size_ProductIterator
                                        # -- End function
	.globl	ProductIterator_B_init_first_iterableIntIterable_second_iterableIntIterable # -- Begin function ProductIterator_B_init_first_iterableIntIterable_second_iterableIntIterable
	.p2align	4, 0x90
	.type	ProductIterator_B_init_first_iterableIntIterable_second_iterableIntIterable,@function
ProductIterator_B_init_first_iterableIntIterable_second_iterableIntIterable: # @ProductIterator_B_init_first_iterableIntIterable_second_iterableIntIterable
# %bb.0:
	movq	120(%rdi), %rax
	retq
.Lfunc_end161:
	.size	ProductIterator_B_init_first_iterableIntIterable_second_iterableIntIterable, .Lfunc_end161-ProductIterator_B_init_first_iterableIntIterable_second_iterableIntIterable
                                        # -- End function
	.globl	ProductIterator_B_next_         # -- Begin function ProductIterator_B_next_
	.p2align	4, 0x90
	.type	ProductIterator_B_next_,@function
ProductIterator_B_next_:                # @ProductIterator_B_next_
# %bb.0:
	movq	128(%rdi), %rax
	retq
.Lfunc_end162:
	.size	ProductIterator_B_next_, .Lfunc_end162-ProductIterator_B_next_
                                        # -- End function
	.globl	ProductIterator_init_first_iterableIntIterable_second_iterableIntIterable # -- Begin function ProductIterator_init_first_iterableIntIterable_second_iterableIntIterable
	.p2align	4, 0x90
	.type	ProductIterator_init_first_iterableIntIterable_second_iterableIntIterable,@function
ProductIterator_init_first_iterableIntIterable_second_iterableIntIterable: # @ProductIterator_init_first_iterableIntIterable_second_iterableIntIterable
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$168, %rsp
	.cfi_def_cfa_offset 224
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rsi, %r10
	movq	%rsi, 16(%rsp)                  # 8-byte Spill
	movq	256(%rsp), %rbx
	movq	264(%rsp), %r15
	movq	288(%rsp), %rdx
	movq	296(%rsp), %rcx
	movq	280(%rsp), %rsi
	movq	248(%rsp), %rbp
	movq	40(%rdi), %rax
	movabsq	$1697250377212095568, %r9       # imm = 0x178DD839C49FEC50
	imulq	8(%rdi), %r9
	movq	%r9, %r8
	shrq	$32, %r8
	xorq	%r9, %r8
	andq	16(%rdi), %r8
	movq	%rdi, %r14
	movslq	(%rax,%r8,4), %r13
	movq	40(%rbp), %rax
	movabsq	$-7984962120415158575, %rdi     # imm = 0x912FB741F3B45ED1
	movq	8(%rbp), %r8
	imulq	%rdi, %r8
	movq	%r8, %r9
	shrq	$32, %r9
	xorq	%r8, %r9
	andq	16(%rbp), %r9
	movslq	(%rax,%r9,4), %r12
	movq	40(%rsi), %rax
	imulq	8(%rsi), %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%rsi), %r8
	movl	(%rax,%r8,4), %r8d
	movq	16(%r14,%r13,8), %rax
	movq	%r10, %rdi
	callq	*8(%rax)
	leaq	8(%rsp), %r8
	movq	%rbp, %rdi
	movq	%rbx, %rsi
	movq	%r15, %rdx
	movl	%r12d, %ecx
	movq	%r8, %rbx
	callq	*80(%rbp,%r12,8)
	leaq	136(%rsp), %rdi
	movq	%rbp, %rsi
	movq	256(%rsp), %rdx
	movq	%r15, %rcx
	movl	%r12d, %r8d
	movq	%rbp, %r9
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	pushq	%rdx
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	152(%rsp), %rcx
	movq	136(%rsp), %rsi
	movq	144(%rsp), %rdx
	movq	40(%rsi), %rax
	movabsq	$-933084275656658555, %rbx      # imm = 0xF30D04CB83FB7185
	movq	8(%rsi), %rdi
	imulq	%rbx, %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%rsi), %r8
	movl	(%rax,%r8,4), %r8d
	movq	%r13, 24(%rsp)                  # 8-byte Spill
	movq	%r14, 32(%rsp)                  # 8-byte Spill
	movq	(%r14,%r13,8), %rax
	movq	16(%rsp), %r15                  # 8-byte Reload
	movq	%r15, %rdi
	callq	*8(%rax)
	movq	16(%r14,%r13,8), %rax
	leaq	72(%rsp), %rdi
	movq	%r15, %rsi
	callq	*(%rax)
	movslq	96(%rsp), %r12
	movq	88(%rsp), %r13
	movq	72(%rsp), %rbp
	movq	80(%rsp), %r15
	movq	%rbp, %rdi
	movq	%r15, %rsi
	movq	%r13, %rdx
	movl	%r12d, %ecx
	leaq	8(%rsp), %r14
	movq	%r14, %r8
	callq	*80(%rbp,%r12,8)
	leaq	104(%rsp), %rdi
	movq	%rbp, %rsi
	movq	%r15, %rdx
	movq	%r13, %rcx
	movl	%r12d, %r8d
	movq	%rbp, %r9
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	120(%rsp), %rcx
	movq	104(%rsp), %rsi
	movq	112(%rsp), %rdx
	movq	40(%rsi), %rax
	imulq	8(%rsi), %rbx
	movq	%rbx, %rdi
	shrq	$32, %rdi
	xorq	%rbx, %rdi
	andq	16(%rsi), %rdi
	movl	(%rax,%rdi,4), %r8d
	movq	24(%rsp), %r15                  # 8-byte Reload
	movq	32(%rsp), %r14                  # 8-byte Reload
	movq	8(%r14,%r15,8), %rax
	movq	16(%rsp), %rbx                  # 8-byte Reload
	movq	%rbx, %rdi
	callq	*8(%rax)
	movq	(%r14,%r15,8), %rax
	leaq	40(%rsp), %rdi
	movq	%rbx, %rsi
	movq	%rbx, %r14
	callq	*(%rax)
	movslq	64(%rsp), %r15
	movq	56(%rsp), %r12
	movq	40(%rsp), %r13
	movq	48(%rsp), %rbp
	movq	%r13, %rdi
	movq	%rbp, %rsi
	movq	%r12, %rdx
	movl	%r15d, %ecx
	leaq	8(%rsp), %rbx
	movq	%rbx, %r8
	callq	*(%r13,%r15,8)
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	movq	%r13, %rdi
	movq	%rbp, %rsi
	movq	%r12, %rdx
	movl	%r15d, %ecx
	movq	%r13, %r8
	movq	%rbp, %r9
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	32(%rsp), %rcx                  # 8-byte Reload
	movq	24(%rsp), %rsi                  # 8-byte Reload
	movq	24(%rcx,%rsi,8), %rcx
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	*8(%rcx)
	addq	$168, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end163:
	.size	ProductIterator_init_first_iterableIntIterable_second_iterableIntIterable, .Lfunc_end163-ProductIterator_init_first_iterableIntIterable_second_iterableIntIterable
	.cfi_endproc
                                        # -- End function
	.globl	ProductIterator_next_           # -- Begin function ProductIterator_next_
	.p2align	4, 0x90
	.type	ProductIterator_next_,@function
ProductIterator_next_:                  # @ProductIterator_next_
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$168, %rsp
	.cfi_def_cfa_offset 224
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	40(%rdi), %rax
	movabsq	$1697250377212095568, %rcx      # imm = 0x178DD839C49FEC50
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %r15
	movq	%rdi, %r14
	movq	24(%rdi,%r15,8), %rax
	movq	%rsi, %r13
	movq	%rsi, %rdi
	callq	*(%rax)
	movl	%edx, %edi
	movq	nil_typ@GOTPCREL(%rip), %rsi
	cmpq	%rsi, %rax
	sete	%cl
	testq	%rax, %rax
	sete	%al
	orb	%cl, %al
                                        # implicit-def: $rdx
	jne	.LBB164_8
# %bb.1:                                # %.lr.ph
	movq	%rsp, %rbp
	movl	%edi, %edx
	movq	%r13, 16(%rsp)                  # 8-byte Spill
	movq	%r14, 8(%rsp)                   # 8-byte Spill
	movq	%r15, 32(%rsp)                  # 8-byte Spill
	.p2align	4, 0x90
.LBB164_2:                              # =>This Inner Loop Header: Depth=1
	movl	%edx, 28(%rsp)                  # 4-byte Spill
	movq	8(%r14,%r15,8), %rax
	leaq	104(%rsp), %rdi
	movq	%r13, %rsi
	callq	*(%rax)
	movslq	128(%rsp), %r12
	movq	120(%rsp), %r15
	movq	104(%rsp), %r13
	movq	112(%rsp), %rbx
	movq	%r13, %rdi
	movq	%rbx, %rsi
	movq	%r15, %rdx
	movl	%r12d, %ecx
	movq	%rbp, %r8
	callq	*(%r13,%r12,8)
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	movq	%r13, %rdi
	movq	%rbx, %rsi
	movq	%r15, %rdx
	movl	%r12d, %ecx
	movq	%r13, %r8
	movq	%rbx, %r9
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movl	%edx, %ecx
	cmpq	nil_typ@GOTPCREL(%rip), %rax
	setne	%dl
	testq	%rax, %rax
	setne	%al
	testb	%al, %dl
	jne	.LBB164_6
# %bb.3:                                #   in Loop: Header=BB164_2 Depth=1
	movq	32(%rsp), %r14                  # 8-byte Reload
	movq	8(%rsp), %rax                   # 8-byte Reload
	movq	(%rax,%r14,8), %rax
	leaq	72(%rsp), %rdi
	movq	16(%rsp), %rsi                  # 8-byte Reload
	callq	*(%rax)
	movslq	96(%rsp), %rbx
	movq	88(%rsp), %r15
	movq	72(%rsp), %r12
	movq	80(%rsp), %r13
	movq	%r12, %rdi
	movq	%r13, %rsi
	movq	%r15, %rdx
	movl	%ebx, %ecx
	movq	%rbp, %r8
	callq	*(%r12,%rbx,8)
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	movq	%r12, %rdi
	movq	%r13, %rsi
	movq	%r15, %rdx
	movl	%ebx, %ecx
	movq	%r12, %r8
	movq	%r13, %r9
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	8(%rsp), %r15                   # 8-byte Reload
	movq	24(%r15,%r14,8), %rcx
	movq	16(%rsp), %rbx                  # 8-byte Reload
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	*8(%rcx)
	movq	16(%r15,%r14,8), %rax
	leaq	40(%rsp), %rdi
	movq	%rbx, %rsi
	callq	*(%rax)
	movslq	64(%rsp), %rbx
	movq	56(%rsp), %r15
	movq	40(%rsp), %r12
	movq	48(%rsp), %r13
	movq	%r12, %rdi
	movq	%r13, %rsi
	movq	%r15, %rdx
	movl	%ebx, %ecx
	movq	%rbp, %r8
	callq	*80(%r12,%rbx,8)
	leaq	136(%rsp), %rdi
	movq	%r12, %rsi
	movq	%r13, %rdx
	movq	%r15, %rcx
	movl	%ebx, %r8d
	movq	%r12, %r9
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	152(%rsp), %rcx
	movq	136(%rsp), %rsi
	movq	144(%rsp), %rdx
	movq	40(%rsi), %rax
	movq	8(%rsi), %rdi
	movabsq	$-933084275656658555, %r8       # imm = 0xF30D04CB83FB7185
	imulq	%r8, %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%rsi), %r8
	movl	(%rax,%r8,4), %r8d
	movq	8(%rsp), %rbx                   # 8-byte Reload
	movq	8(%rbx,%r14,8), %rax
	movq	16(%rsp), %r13                  # 8-byte Reload
	movq	%r13, %rdi
	callq	*8(%rax)
	movq	%r14, %r15
	movq	24(%rbx,%r14,8), %rax
	movq	%rbx, %r14
	movq	%r13, %rdi
	callq	*(%rax)
	movq	nil_typ@GOTPCREL(%rip), %rsi
	cmpq	%rsi, %rax
	je	.LBB164_7
# %bb.4:                                #   in Loop: Header=BB164_2 Depth=1
	testq	%rax, %rax
	jne	.LBB164_2
.LBB164_7:
                                        # implicit-def: $rdx
	jmp	.LBB164_8
.LBB164_6:
	shlq	$32, %rcx
	movl	28(%rsp), %edx                  # 4-byte Reload
	orq	%rcx, %rdx
	movq	tuple_typ@GOTPCREL(%rip), %rsi
.LBB164_8:                              # %.loopexit
	movq	%rsi, %rax
	addq	$168, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end164:
	.size	ProductIterator_next_, .Lfunc_end164-ProductIterator_next_
	.cfi_endproc
                                        # -- End function
	.weak	_box_tuple_typ                  # -- Begin function _box_tuple_typ
	.p2align	4, 0x90
	.type	_box_tuple_typ,@function
_box_tuple_typ:                         # @_box_tuple_typ
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r13
	.cfi_def_cfa_offset 32
	pushq	%r12
	.cfi_def_cfa_offset 40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	subq	$32, %rsp
	.cfi_def_cfa_offset 80
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r13, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rsi, %r14
	movq	%rdi, %rbx
	movq	8(%rdx), %rdi
	testq	%rdi, %rdi
	je	.LBB165_1
# %bb.2:                                # %.lr.ph.i.preheader
	movq	%rdx, %r12
	addq	$16, %r12
	movl	$1, %r15d
	xorl	%r13d, %r13d
	.p2align	4, 0x90
.LBB165_3:                              # %.lr.ph.i
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rax
	callq	*48(%rax)
	movq	%rax, %rcx
	movq	%rdx, %rsi
	cmpq	%r15, %rdx
	cmovaq	%rdx, %r15
	movq	%r13, %rax
	xorl	%edx, %edx
	divq	%rsi
	subq	%rdx, %rsi
	testq	%rdx, %rdx
	cmoveq	%rdx, %rsi
	addq	%r13, %rcx
	addq	%rsi, %rcx
	movq	(%r12), %rdi
	addq	$8, %r12
	testq	%rdi, %rdi
	movq	%rcx, %r13
	jne	.LBB165_3
	jmp	.LBB165_4
.LBB165_1:
	movl	$1, %r15d
	xorl	%ecx, %ecx
.LBB165_4:                              # %_size_tuple_typ.exit
	movq	%rcx, %rax
	xorl	%edx, %edx
	divq	%r15
	subq	%rdx, %r15
	testq	%rdx, %rdx
	cmoveq	%rdx, %r15
	addq	%rcx, %r15
	cmpq	$17, %r15
	jge	.LBB165_5
# %bb.9:
	testq	%r15, %r15
	je	.LBB165_12
# %bb.10:                               # %loop-memcpy-expansion.preheader
	xorl	%eax, %eax
	.p2align	4, 0x90
.LBB165_11:                             # %loop-memcpy-expansion
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%r14,%rax), %ecx
	movb	%cl, 8(%rsp,%rax)
	incq	%rax
	cmpq	%r15, %rax
	jb	.LBB165_11
	jmp	.LBB165_12
.LBB165_5:
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	movq	%r15, %rdi
	callq	bump_malloc_inner@PLT
	testq	%r15, %r15
	je	.LBB165_8
# %bb.6:                                # %loop-memcpy-expansion2.preheader
	xorl	%ecx, %ecx
	.p2align	4, 0x90
.LBB165_7:                              # %loop-memcpy-expansion2
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%r14,%rcx), %edx
	movb	%dl, (%rax,%rcx)
	incq	%rcx
	cmpq	%r15, %rcx
	jb	.LBB165_7
.LBB165_8:                              # %post-loop-memcpy-expansion1
	movq	%rax, 8(%rsp)
.LBB165_12:
	movl	24(%rsp), %eax
	movq	8(%rsp), %rcx
	movq	16(%rsp), %rdx
	movq	tuple_typ@GOTPCREL(%rip), %rsi
	movq	%rdx, 24(%rbx)
	movq	%rcx, 16(%rbx)
	movl	%eax, 32(%rbx)
	movq	%rsi, (%rbx)
	movq	%rbx, %rax
	addq	$32, %rsp
	.cfi_def_cfa_offset 48
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end165:
	.size	_box_tuple_typ, .Lfunc_end165-_box_tuple_typ
	.cfi_endproc
                                        # -- End function
	.weak	_unbox_tuple_typ                # -- Begin function _unbox_tuple_typ
	.p2align	4, 0x90
	.type	_unbox_tuple_typ,@function
_unbox_tuple_typ:                       # @_unbox_tuple_typ
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$56, %rsp
	.cfi_def_cfa_offset 112
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%r9, %rbx
	movq	%rsi, %r14
	leaq	16(%rsp), %rbp
	movq	%rdx, 24(%rsp)
	movq	%rsi, 16(%rsp)
	movl	%ecx, 32(%rsp)
	movq	8(%r8), %rdi
	testq	%rdi, %rdi
	je	.LBB166_1
# %bb.2:                                # %.lr.ph.i.preheader
	movq	%r8, %r15
	addq	$16, %r15
	movl	$1, %r13d
	xorl	%r12d, %r12d
	.p2align	4, 0x90
.LBB166_3:                              # %.lr.ph.i
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rax
	callq	*48(%rax)
	movq	%rax, %rcx
	movq	%rdx, %rsi
	cmpq	%r13, %rdx
	cmovaq	%rdx, %r13
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	subq	%rdx, %rsi
	testq	%rdx, %rdx
	cmoveq	%rdx, %rsi
	addq	%r12, %rcx
	addq	%rsi, %rcx
	movq	(%r15), %rdi
	addq	$8, %r15
	testq	%rdi, %rdi
	movq	%rcx, %r12
	jne	.LBB166_3
	jmp	.LBB166_4
.LBB166_1:
	movl	$1, %r13d
	xorl	%ecx, %ecx
.LBB166_4:                              # %_size_tuple_typ.exit
	movq	%rcx, %rax
	xorl	%edx, %edx
	divq	%r13
	subq	%rdx, %r13
	testq	%rdx, %rdx
	cmoveq	%rdx, %r13
	leaq	(%r13,%rcx), %rax
	cmpq	$17, %rax
	cmovlq	%rbp, %r14
	addq	%rcx, %r13
	je	.LBB166_7
# %bb.5:                                # %loop-memcpy-expansion.preheader
	xorl	%eax, %eax
	.p2align	4, 0x90
.LBB166_6:                              # %loop-memcpy-expansion
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%r14,%rax), %ecx
	movb	%cl, (%rbx,%rax)
	incq	%rax
	cmpq	%r13, %rax
	jb	.LBB166_6
.LBB166_7:                              # %post-loop-memcpy-expansion
	addq	$56, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end166:
	.size	_unbox_tuple_typ, .Lfunc_end166-_unbox_tuple_typ
	.cfi_endproc
                                        # -- End function
	.globl	ProductIterator_getter_current_first # -- Begin function ProductIterator_getter_current_first
	.p2align	4, 0x90
	.type	ProductIterator_getter_current_first,@function
ProductIterator_getter_current_first:   # @ProductIterator_getter_current_first
# %bb.0:
	movq	96(%rdi), %rax
	movl	104(%rdi), %edx
	retq
.Lfunc_end167:
	.size	ProductIterator_getter_current_first, .Lfunc_end167-ProductIterator_getter_current_first
                                        # -- End function
	.globl	ProductIterator_setter_current_first # -- Begin function ProductIterator_setter_current_first
	.p2align	4, 0x90
	.type	ProductIterator_setter_current_first,@function
ProductIterator_setter_current_first:   # @ProductIterator_setter_current_first
# %bb.0:
	movq	%rsi, 96(%rdi)
	movl	%edx, 104(%rdi)
	retq
.Lfunc_end168:
	.size	ProductIterator_setter_current_first, .Lfunc_end168-ProductIterator_setter_current_first
                                        # -- End function
	.globl	ProductIterator_getter_second_iterable # -- Begin function ProductIterator_getter_second_iterable
	.p2align	4, 0x90
	.type	ProductIterator_getter_second_iterable,@function
ProductIterator_getter_second_iterable: # @ProductIterator_getter_second_iterable
# %bb.0:
	movq	%rdi, %rax
	movq	64(%rsi), %rcx
	movq	72(%rsi), %rdx
	movq	80(%rsi), %rdi
	movl	88(%rsi), %esi
	movl	%esi, 24(%rax)
	movq	%rdi, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	retq
.Lfunc_end169:
	.size	ProductIterator_getter_second_iterable, .Lfunc_end169-ProductIterator_getter_second_iterable
                                        # -- End function
	.globl	ProductIterator_setter_second_iterable # -- Begin function ProductIterator_setter_second_iterable
	.p2align	4, 0x90
	.type	ProductIterator_setter_second_iterable,@function
ProductIterator_setter_second_iterable: # @ProductIterator_setter_second_iterable
# %bb.0:
	movq	%rsi, 64(%rdi)
	movq	%rdx, 72(%rdi)
	movq	%rcx, 80(%rdi)
	movl	%r8d, 88(%rdi)
	retq
.Lfunc_end170:
	.size	ProductIterator_setter_second_iterable, .Lfunc_end170-ProductIterator_setter_second_iterable
                                        # -- End function
	.globl	ProductIterator_getter_second_iterator # -- Begin function ProductIterator_getter_second_iterator
	.p2align	4, 0x90
	.type	ProductIterator_getter_second_iterator,@function
ProductIterator_getter_second_iterator: # @ProductIterator_getter_second_iterator
# %bb.0:
	movq	%rdi, %rax
	movq	32(%rsi), %rcx
	movq	40(%rsi), %rdx
	movq	48(%rsi), %rdi
	movl	56(%rsi), %esi
	movl	%esi, 24(%rax)
	movq	%rdi, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	retq
.Lfunc_end171:
	.size	ProductIterator_getter_second_iterator, .Lfunc_end171-ProductIterator_getter_second_iterator
                                        # -- End function
	.globl	ProductIterator_setter_second_iterator # -- Begin function ProductIterator_setter_second_iterator
	.p2align	4, 0x90
	.type	ProductIterator_setter_second_iterator,@function
ProductIterator_setter_second_iterator: # @ProductIterator_setter_second_iterator
# %bb.0:
	movq	%rsi, 32(%rdi)
	movq	%rdx, 40(%rdi)
	movq	%rcx, 48(%rdi)
	movl	%r8d, 56(%rdi)
	retq
.Lfunc_end172:
	.size	ProductIterator_setter_second_iterator, .Lfunc_end172-ProductIterator_setter_second_iterator
                                        # -- End function
	.globl	ProductIterator_getter_first_iterator # -- Begin function ProductIterator_getter_first_iterator
	.p2align	4, 0x90
	.type	ProductIterator_getter_first_iterator,@function
ProductIterator_getter_first_iterator:  # @ProductIterator_getter_first_iterator
# %bb.0:
	movq	%rdi, %rax
	movq	(%rsi), %rcx
	movq	8(%rsi), %rdx
	movq	16(%rsi), %rdi
	movl	24(%rsi), %esi
	movl	%esi, 24(%rax)
	movq	%rdi, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	retq
.Lfunc_end173:
	.size	ProductIterator_getter_first_iterator, .Lfunc_end173-ProductIterator_getter_first_iterator
                                        # -- End function
	.globl	ProductIterator_setter_first_iterator # -- Begin function ProductIterator_setter_first_iterator
	.p2align	4, 0x90
	.type	ProductIterator_setter_first_iterator,@function
ProductIterator_setter_first_iterator:  # @ProductIterator_setter_first_iterator
# %bb.0:
	movq	%rsi, (%rdi)
	movq	%rdx, 8(%rdi)
	movq	%rcx, 16(%rdi)
	movl	%r8d, 24(%rdi)
	retq
.Lfunc_end174:
	.size	ProductIterator_setter_first_iterator, .Lfunc_end174-ProductIterator_setter_first_iterator
                                        # -- End function
	.globl	ProductIterable_getter_second   # -- Begin function ProductIterable_getter_second
	.p2align	4, 0x90
	.type	ProductIterable_getter_second,@function
ProductIterable_getter_second:          # @ProductIterable_getter_second
# %bb.0:
	movq	%rdi, %rax
	movq	32(%rsi), %rcx
	movq	40(%rsi), %rdx
	movq	48(%rsi), %rdi
	movl	56(%rsi), %esi
	movl	%esi, 24(%rax)
	movq	%rdi, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	retq
.Lfunc_end175:
	.size	ProductIterable_getter_second, .Lfunc_end175-ProductIterable_getter_second
                                        # -- End function
	.globl	ProductIterable_setter_second   # -- Begin function ProductIterable_setter_second
	.p2align	4, 0x90
	.type	ProductIterable_setter_second,@function
ProductIterable_setter_second:          # @ProductIterable_setter_second
# %bb.0:
	movq	%rsi, 32(%rdi)
	movq	%rdx, 40(%rdi)
	movq	%rcx, 48(%rdi)
	movl	%r8d, 56(%rdi)
	retq
.Lfunc_end176:
	.size	ProductIterable_setter_second, .Lfunc_end176-ProductIterable_setter_second
                                        # -- End function
	.globl	ProductIterable_getter_first    # -- Begin function ProductIterable_getter_first
	.p2align	4, 0x90
	.type	ProductIterable_getter_first,@function
ProductIterable_getter_first:           # @ProductIterable_getter_first
# %bb.0:
	movq	%rdi, %rax
	movq	(%rsi), %rcx
	movq	8(%rsi), %rdx
	movq	16(%rsi), %rdi
	movl	24(%rsi), %esi
	movl	%esi, 24(%rax)
	movq	%rdi, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	retq
.Lfunc_end177:
	.size	ProductIterable_getter_first, .Lfunc_end177-ProductIterable_getter_first
                                        # -- End function
	.globl	ProductIterable_setter_first    # -- Begin function ProductIterable_setter_first
	.p2align	4, 0x90
	.type	ProductIterable_setter_first,@function
ProductIterable_setter_first:           # @ProductIterable_setter_first
# %bb.0:
	movq	%rsi, (%rdi)
	movq	%rdx, 8(%rdi)
	movq	%rcx, 16(%rdi)
	movl	%r8d, 24(%rdi)
	retq
.Lfunc_end178:
	.size	ProductIterable_setter_first, .Lfunc_end178-ProductIterable_setter_first
                                        # -- End function
	.globl	_size_IntTupleIterable          # -- Begin function _size_IntTupleIterable
	.p2align	4, 0x90
	.type	_size_IntTupleIterable,@function
_size_IntTupleIterable:                 # @_size_IntTupleIterable
# %bb.0:
	movl	$1, %edx
	xorl	%eax, %eax
	retq
.Lfunc_end179:
	.size	_size_IntTupleIterable, .Lfunc_end179-_size_IntTupleIterable
                                        # -- End function
	.globl	_size_ZipIterable               # -- Begin function _size_ZipIterable
	.p2align	4, 0x90
	.type	_size_ZipIterable,@function
_size_ZipIterable:                      # @_size_ZipIterable
# %bb.0:
	movl	$64, %eax
	movl	$8, %edx
	retq
.Lfunc_end180:
	.size	_size_ZipIterable, .Lfunc_end180-_size_ZipIterable
                                        # -- End function
	.globl	ZipIterable_B_init_firstIntIterable_secondIntIterable # -- Begin function ZipIterable_B_init_firstIntIterable_secondIntIterable
	.p2align	4, 0x90
	.type	ZipIterable_B_init_firstIntIterable_secondIntIterable,@function
ZipIterable_B_init_firstIntIterable_secondIntIterable: # @ZipIterable_B_init_firstIntIterable_secondIntIterable
# %bb.0:
	movq	104(%rdi), %rax
	retq
.Lfunc_end181:
	.size	ZipIterable_B_init_firstIntIterable_secondIntIterable, .Lfunc_end181-ZipIterable_B_init_firstIntIterable_secondIntIterable
                                        # -- End function
	.globl	ZipIterable_B_iterator_         # -- Begin function ZipIterable_B_iterator_
	.p2align	4, 0x90
	.type	ZipIterable_B_iterator_,@function
ZipIterable_B_iterator_:                # @ZipIterable_B_iterator_
# %bb.0:
	movq	112(%rdi), %rax
	retq
.Lfunc_end182:
	.size	ZipIterable_B_iterator_, .Lfunc_end182-ZipIterable_B_iterator_
                                        # -- End function
	.globl	ZipIterable_init_firstIntIterable_secondIntIterable # -- Begin function ZipIterable_init_firstIntIterable_secondIntIterable
	.p2align	4, 0x90
	.type	ZipIterable_init_firstIntIterable_secondIntIterable,@function
ZipIterable_init_firstIntIterable_secondIntIterable: # @ZipIterable_init_firstIntIterable_secondIntIterable
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	pushq	%rax
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rsi, %rbx
	movq	%rdi, %r12
	movq	128(%rsp), %rax
	movq	%rax, (%rsp)                    # 8-byte Spill
	movq	136(%rsp), %r15
	movq	120(%rsp), %r13
	movq	96(%rsp), %rdx
	movq	104(%rsp), %rcx
	movq	88(%rsp), %rsi
	movq	40(%rdi), %rax
	movabsq	$35232740166152944, %rdi        # imm = 0x7D2BFD921132F0
	imulq	8(%r12), %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%r12), %r8
	movslq	(%rax,%r8,4), %rbp
	movq	40(%rsi), %rax
	movabsq	$-7984962120415158575, %r14     # imm = 0x912FB741F3B45ED1
	movq	8(%rsi), %rdi
	imulq	%r14, %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%rsi), %r8
	movl	(%rax,%r8,4), %r8d
	movq	(%r12,%rbp,8), %rax
	movq	%rbx, %rdi
	callq	*8(%rax)
	movq	40(%r13), %rax
	imulq	8(%r13), %r14
	movq	%r14, %rcx
	shrq	$32, %rcx
	xorq	%r14, %rcx
	andq	16(%r13), %rcx
	movl	(%rax,%rcx,4), %r8d
	movq	8(%r12,%rbp,8), %rax
	movq	8(%rax), %rax
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movq	(%rsp), %rdx                    # 8-byte Reload
	movq	%r15, %rcx
	addq	$8, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	jmpq	*%rax                           # TAILCALL
.Lfunc_end183:
	.size	ZipIterable_init_firstIntIterable_secondIntIterable, .Lfunc_end183-ZipIterable_init_firstIntIterable_secondIntIterable
	.cfi_endproc
                                        # -- End function
	.globl	ZipIterable_iterator_           # -- Begin function ZipIterable_iterator_
	.p2align	4, 0x90
	.type	ZipIterable_iterator_,@function
ZipIterable_iterator_:                  # @ZipIterable_iterator_
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$392, %rsp                      # imm = 0x188
	.cfi_def_cfa_offset 448
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rdx, %r14
	movq	%rsi, %r12
	movq	%rdi, 64(%rsp)                  # 8-byte Spill
	movq	40(%rsi), %rax
	movabsq	$35232740166152944, %rcx        # imm = 0x7D2BFD921132F0
	imulq	8(%rsi), %rcx
	movq	%rcx, %rsi
	shrq	$32, %rsi
	xorq	%rcx, %rsi
	andq	16(%r12), %rsi
	movslq	(%rax,%rsi,4), %rax
	movq	%rax, 16(%rsp)                  # 8-byte Spill
	movq	(%r12,%rax,8), %rax
	leaq	232(%rsp), %rdi
	movq	%rdx, %rsi
	movq	%rdx, 24(%rsp)                  # 8-byte Spill
	callq	*(%rax)
	movslq	256(%rsp), %r13
	movq	248(%rsp), %rbp
	movq	232(%rsp), %rbx
	movq	240(%rsp), %r15
	leaq	8(%rsp), %r8
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%rbp, %rdx
	movl	%r13d, %ecx
	callq	*80(%rbx,%r13,8)
	leaq	360(%rsp), %rdi
	movq	%rbx, %rsi
	movq	%r15, %rdx
	movq	%rbp, %rcx
	movl	%r13d, %r8d
	movq	%rbx, %r9
	leaq	8(%rsp), %r10
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	16(%rsp), %rax                  # 8-byte Reload
	movq	8(%r12,%rax,8), %rax
	leaq	200(%rsp), %rdi
	movq	%r14, %rsi
	callq	*(%rax)
	movslq	224(%rsp), %rbx
	movq	216(%rsp), %r15
	movq	200(%rsp), %r13
	movq	208(%rsp), %rbp
	movq	%r13, %rdi
	movq	%rbp, %rsi
	movq	%r15, %rdx
	movl	%ebx, %ecx
	leaq	8(%rsp), %r14
	movq	%r14, %r8
	callq	*80(%r13,%rbx,8)
	leaq	328(%rsp), %rdi
	movq	%r13, %rsi
	movq	%rbp, %rdx
	movq	%r15, %rcx
	movl	%ebx, %r8d
	movq	%r13, %r9
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	movl	$64, %edi
	callq	bump_malloc_inner@PLT
	movq	ZipIterator@GOTPCREL(%rip), %rcx
	movq	%rcx, 72(%rsp)
	movq	%rax, 80(%rsp)
	movl	$9, 96(%rsp)
	movq	16(%rsp), %r14                  # 8-byte Reload
	movq	(%r12,%r14,8), %rax
	leaq	168(%rsp), %rdi
	movq	24(%rsp), %rsi                  # 8-byte Reload
	callq	*(%rax)
	movslq	192(%rsp), %rbx
	movq	184(%rsp), %r15
	movq	168(%rsp), %r13
	movq	176(%rsp), %rbp
	movq	%r13, %rdi
	movq	%rbp, %rsi
	movq	%r15, %rdx
	movl	%ebx, %ecx
	leaq	8(%rsp), %r8
	callq	*80(%r13,%rbx,8)
	leaq	296(%rsp), %rdi
	movq	%r13, %rsi
	movq	%rbp, %rdx
	movq	%r15, %rcx
	movl	%ebx, %r8d
	movq	%r13, %r9
	leaq	8(%rsp), %r13
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	312(%rsp), %rax
	movq	%rax, 56(%rsp)                  # 8-byte Spill
	movq	296(%rsp), %rbp
	movq	304(%rsp), %rax
	movq	%rax, 48(%rsp)                  # 8-byte Spill
	movq	8(%r12,%r14,8), %rax
	leaq	136(%rsp), %rdi
	movq	24(%rsp), %rsi                  # 8-byte Reload
	callq	*(%rax)
	movslq	160(%rsp), %rbx
	movq	152(%rsp), %r14
	movq	136(%rsp), %r15
	movq	144(%rsp), %r12
	movq	%r15, %rdi
	movq	%r12, %rsi
	movq	%r14, %rdx
	movl	%ebx, %ecx
	movq	%r13, %r8
	callq	*80(%r15,%rbx,8)
	leaq	264(%rsp), %rdi
	movq	%r15, %rsi
	movq	%r12, %rdx
	movq	%r14, %rcx
	movl	%ebx, %r8d
	movq	%r15, %r9
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	280(%rsp), %rax
	movq	%rax, 24(%rsp)                  # 8-byte Spill
	movq	264(%rsp), %rbx
	movq	272(%rsp), %rax
	movq	%rax, 16(%rsp)                  # 8-byte Spill
	movq	40(%rbx), %rax
	movabsq	$-933084275656658555, %rcx      # imm = 0xF30D04CB83FB7185
	movq	8(%rbx), %rdx
	imulq	%rcx, %rdx
	movq	%rdx, %rsi
	shrq	$32, %rsi
	xorq	%rdx, %rsi
	andq	16(%rbx), %rsi
	movq	40(%rbp), %rdx
	imulq	8(%rbp), %rcx
	movq	%rcx, %rdi
	shrq	$32, %rdi
	xorq	%rcx, %rdi
	andq	16(%rbp), %rdi
	movl	(%rdx,%rdi,4), %ecx
	movq	%rcx, 40(%rsp)                  # 8-byte Spill
	movl	(%rax,%rsi,4), %eax
	movq	%rax, 32(%rsp)                  # 8-byte Spill
	movq	72(%rsp), %r14
	movq	80(%rsp), %r15
	movq	88(%rsp), %r12
	movslq	96(%rsp), %r13
	movq	_parameterization_IntIterator@GOTPCREL(%rip), %rax
	movq	%rax, 120(%rsp)
	movq	%rax, 128(%rsp)
	movq	16(%r14,%r13,8), %rax
	movq	%rbp, 104(%rsp)
	movq	%rbx, 112(%rsp)
	leaq	104(%rsp), %r8
	movq	%r14, %rdi
	movq	%r15, %rsi
	movq	%r12, %rdx
	movl	%r13d, %ecx
	callq	*%rax
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	leaq	128(%rsp), %r10
	movq	%r14, %rdi
	movq	%r15, %rsi
	movq	%r12, %rdx
	movl	%r13d, %ecx
	movq	%r14, %r8
	movq	%r15, %r9
	pushq	40(%rsp)                        # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	40(%rsp)                        # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	40(%rsp)                        # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	80(%rsp)                        # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	104(%rsp)                       # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	104(%rsp)                       # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$96, %rsp
	.cfi_adjust_cfa_offset -96
	movq	40(%r14), %rax
	movabsq	$8673632051301757104, %rcx      # imm = 0x785EEE655248B0B0
	imulq	8(%r14), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%r14), %rdx
	movl	(%rax,%rdx,4), %ecx
	movq	64(%rsp), %rax                  # 8-byte Reload
	movq	%r12, 16(%rax)
	movq	%r15, 8(%rax)
	movq	%r14, (%rax)
	movl	%ecx, 24(%rax)
	addq	$392, %rsp                      # imm = 0x188
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end184:
	.size	ZipIterable_iterator_, .Lfunc_end184-ZipIterable_iterator_
	.cfi_endproc
                                        # -- End function
	.globl	_size_ZipIterator               # -- Begin function _size_ZipIterator
	.p2align	4, 0x90
	.type	_size_ZipIterator,@function
_size_ZipIterator:                      # @_size_ZipIterator
# %bb.0:
	movl	$64, %eax
	movl	$8, %edx
	retq
.Lfunc_end185:
	.size	_size_ZipIterator, .Lfunc_end185-_size_ZipIterator
                                        # -- End function
	.globl	ZipIterator_B_init_firstIntIterator_secondIntIterator # -- Begin function ZipIterator_B_init_firstIntIterator_secondIntIterator
	.p2align	4, 0x90
	.type	ZipIterator_B_init_firstIntIterator_secondIntIterator,@function
ZipIterator_B_init_firstIntIterator_secondIntIterator: # @ZipIterator_B_init_firstIntIterator_secondIntIterator
# %bb.0:
	movq	104(%rdi), %rax
	retq
.Lfunc_end186:
	.size	ZipIterator_B_init_firstIntIterator_secondIntIterator, .Lfunc_end186-ZipIterator_B_init_firstIntIterator_secondIntIterator
                                        # -- End function
	.globl	ZipIterator_B_next_             # -- Begin function ZipIterator_B_next_
	.p2align	4, 0x90
	.type	ZipIterator_B_next_,@function
ZipIterator_B_next_:                    # @ZipIterator_B_next_
# %bb.0:
	movq	112(%rdi), %rax
	retq
.Lfunc_end187:
	.size	ZipIterator_B_next_, .Lfunc_end187-ZipIterator_B_next_
                                        # -- End function
	.globl	ZipIterator_init_firstIntIterator_secondIntIterator # -- Begin function ZipIterator_init_firstIntIterator_secondIntIterator
	.p2align	4, 0x90
	.type	ZipIterator_init_firstIntIterator_secondIntIterator,@function
ZipIterator_init_firstIntIterator_secondIntIterator: # @ZipIterator_init_firstIntIterator_secondIntIterator
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	pushq	%rax
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rsi, %rbx
	movq	%rdi, %r12
	movq	128(%rsp), %rax
	movq	%rax, (%rsp)                    # 8-byte Spill
	movq	136(%rsp), %r15
	movq	120(%rsp), %r13
	movq	96(%rsp), %rdx
	movq	104(%rsp), %rcx
	movq	88(%rsp), %rsi
	movq	40(%rdi), %rax
	movabsq	$-2141114445739585318, %rdi     # imm = 0xE2493BC1763C10DA
	imulq	8(%r12), %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%r12), %r8
	movslq	(%rax,%r8,4), %rbp
	movq	40(%rsi), %rax
	movabsq	$-933084275656658555, %r14      # imm = 0xF30D04CB83FB7185
	movq	8(%rsi), %rdi
	imulq	%r14, %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%rsi), %r8
	movl	(%rax,%r8,4), %r8d
	movq	(%r12,%rbp,8), %rax
	movq	%rbx, %rdi
	callq	*8(%rax)
	movq	40(%r13), %rax
	imulq	8(%r13), %r14
	movq	%r14, %rcx
	shrq	$32, %rcx
	xorq	%r14, %rcx
	andq	16(%r13), %rcx
	movl	(%rax,%rcx,4), %r8d
	movq	8(%r12,%rbp,8), %rax
	movq	8(%rax), %rax
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movq	(%rsp), %rdx                    # 8-byte Reload
	movq	%r15, %rcx
	addq	$8, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	jmpq	*%rax                           # TAILCALL
.Lfunc_end188:
	.size	ZipIterator_init_firstIntIterator_secondIntIterator, .Lfunc_end188-ZipIterator_init_firstIntIterator_secondIntIterator
	.cfi_endproc
                                        # -- End function
	.globl	ZipIterator_next_               # -- Begin function ZipIterator_next_
	.p2align	4, 0x90
	.type	ZipIterator_next_,@function
ZipIterator_next_:                      # @ZipIterator_next_
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$88, %rsp
	.cfi_def_cfa_offset 144
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rsi, 16(%rsp)                  # 8-byte Spill
	movq	%rdi, %r12
	movq	40(%rdi), %rax
	movabsq	$-2141114445739585318, %rcx     # imm = 0xE2493BC1763C10DA
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %r14
	movq	(%rdi,%r14,8), %rax
	leaq	56(%rsp), %rdi
	callq	*(%rax)
	movslq	80(%rsp), %rbx
	movq	72(%rsp), %r13
	movq	56(%rsp), %rbp
	movq	64(%rsp), %r15
	leaq	8(%rsp), %r8
	movq	%rbp, %rdi
	movq	%r15, %rsi
	movq	%r13, %rdx
	movl	%ebx, %ecx
	callq	*(%rbp,%rbx,8)
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	movq	%rbp, %rdi
	movq	%r15, %rsi
	movq	%r13, %rdx
	movl	%ebx, %ecx
	movq	%rbp, %r8
	movq	%r15, %r9
	leaq	16(%rsp), %r10
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	%rax, %r13
	movl	%edx, 12(%rsp)                  # 4-byte Spill
	movq	8(%r12,%r14,8), %rax
	leaq	24(%rsp), %rdi
	movq	16(%rsp), %rsi                  # 8-byte Reload
	callq	*(%rax)
	movslq	48(%rsp), %r14
	movq	40(%rsp), %r15
	movq	24(%rsp), %r12
	movq	32(%rsp), %rbp
	movq	%r12, %rdi
	movq	%rbp, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	leaq	8(%rsp), %rbx
	movq	%rbx, %r8
	callq	*(%r12,%r14,8)
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	movq	%r12, %rdi
	movq	%rbp, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	movq	%r12, %r8
	movq	%rbp, %r9
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	%rax, %rcx
                                        # kill: def $edx killed $edx def $rdx
	movq	nil_typ@GOTPCREL(%rip), %rax
	cmpq	%rax, %r13
	sete	%sil
	testq	%r13, %r13
	sete	%dil
	orb	%sil, %dil
	jne	.LBB189_4
# %bb.1:
	movq	nil_typ@GOTPCREL(%rip), %rax
	cmpq	%rax, %rcx
	setne	%sil
	testq	%rcx, %rcx
	setne	%dil
	shlq	$32, %rdx
	movl	12(%rsp), %ecx                  # 4-byte Reload
	testb	%dil, %sil
	je	.LBB189_3
# %bb.2:
	movq	tuple_typ@GOTPCREL(%rip), %rax
.LBB189_3:
	orq	%rcx, %rdx
.LBB189_4:                              # %.thread
	addq	$88, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end189:
	.size	ZipIterator_next_, .Lfunc_end189-ZipIterator_next_
	.cfi_endproc
                                        # -- End function
	.globl	ZipIterator_getter_second       # -- Begin function ZipIterator_getter_second
	.p2align	4, 0x90
	.type	ZipIterator_getter_second,@function
ZipIterator_getter_second:              # @ZipIterator_getter_second
# %bb.0:
	movq	%rdi, %rax
	movq	32(%rsi), %rcx
	movq	40(%rsi), %rdx
	movq	48(%rsi), %rdi
	movl	56(%rsi), %esi
	movl	%esi, 24(%rax)
	movq	%rdi, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	retq
.Lfunc_end190:
	.size	ZipIterator_getter_second, .Lfunc_end190-ZipIterator_getter_second
                                        # -- End function
	.globl	ZipIterator_setter_second       # -- Begin function ZipIterator_setter_second
	.p2align	4, 0x90
	.type	ZipIterator_setter_second,@function
ZipIterator_setter_second:              # @ZipIterator_setter_second
# %bb.0:
	movq	%rsi, 32(%rdi)
	movq	%rdx, 40(%rdi)
	movq	%rcx, 48(%rdi)
	movl	%r8d, 56(%rdi)
	retq
.Lfunc_end191:
	.size	ZipIterator_setter_second, .Lfunc_end191-ZipIterator_setter_second
                                        # -- End function
	.globl	ZipIterator_getter_first        # -- Begin function ZipIterator_getter_first
	.p2align	4, 0x90
	.type	ZipIterator_getter_first,@function
ZipIterator_getter_first:               # @ZipIterator_getter_first
# %bb.0:
	movq	%rdi, %rax
	movq	(%rsi), %rcx
	movq	8(%rsi), %rdx
	movq	16(%rsi), %rdi
	movl	24(%rsi), %esi
	movl	%esi, 24(%rax)
	movq	%rdi, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	retq
.Lfunc_end192:
	.size	ZipIterator_getter_first, .Lfunc_end192-ZipIterator_getter_first
                                        # -- End function
	.globl	ZipIterator_setter_first        # -- Begin function ZipIterator_setter_first
	.p2align	4, 0x90
	.type	ZipIterator_setter_first,@function
ZipIterator_setter_first:               # @ZipIterator_setter_first
# %bb.0:
	movq	%rsi, (%rdi)
	movq	%rdx, 8(%rdi)
	movq	%rcx, 16(%rdi)
	movl	%r8d, 24(%rdi)
	retq
.Lfunc_end193:
	.size	ZipIterator_setter_first, .Lfunc_end193-ZipIterator_setter_first
                                        # -- End function
	.globl	_size_IntTupleIterator          # -- Begin function _size_IntTupleIterator
	.p2align	4, 0x90
	.type	_size_IntTupleIterator,@function
_size_IntTupleIterator:                 # @_size_IntTupleIterator
# %bb.0:
	movl	$1, %edx
	xorl	%eax, %eax
	retq
.Lfunc_end194:
	.size	_size_IntTupleIterator, .Lfunc_end194-_size_IntTupleIterator
                                        # -- End function
	.globl	ZipIterable_getter_second       # -- Begin function ZipIterable_getter_second
	.p2align	4, 0x90
	.type	ZipIterable_getter_second,@function
ZipIterable_getter_second:              # @ZipIterable_getter_second
# %bb.0:
	movq	%rdi, %rax
	movq	32(%rsi), %rcx
	movq	40(%rsi), %rdx
	movq	48(%rsi), %rdi
	movl	56(%rsi), %esi
	movl	%esi, 24(%rax)
	movq	%rdi, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	retq
.Lfunc_end195:
	.size	ZipIterable_getter_second, .Lfunc_end195-ZipIterable_getter_second
                                        # -- End function
	.globl	ZipIterable_setter_second       # -- Begin function ZipIterable_setter_second
	.p2align	4, 0x90
	.type	ZipIterable_setter_second,@function
ZipIterable_setter_second:              # @ZipIterable_setter_second
# %bb.0:
	movq	%rsi, 32(%rdi)
	movq	%rdx, 40(%rdi)
	movq	%rcx, 48(%rdi)
	movl	%r8d, 56(%rdi)
	retq
.Lfunc_end196:
	.size	ZipIterable_setter_second, .Lfunc_end196-ZipIterable_setter_second
                                        # -- End function
	.globl	ZipIterable_getter_first        # -- Begin function ZipIterable_getter_first
	.p2align	4, 0x90
	.type	ZipIterable_getter_first,@function
ZipIterable_getter_first:               # @ZipIterable_getter_first
# %bb.0:
	movq	%rdi, %rax
	movq	(%rsi), %rcx
	movq	8(%rsi), %rdx
	movq	16(%rsi), %rdi
	movl	24(%rsi), %esi
	movl	%esi, 24(%rax)
	movq	%rdi, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	retq
.Lfunc_end197:
	.size	ZipIterable_getter_first, .Lfunc_end197-ZipIterable_getter_first
                                        # -- End function
	.globl	ZipIterable_setter_first        # -- Begin function ZipIterable_setter_first
	.p2align	4, 0x90
	.type	ZipIterable_setter_first,@function
ZipIterable_setter_first:               # @ZipIterable_setter_first
# %bb.0:
	movq	%rsi, (%rdi)
	movq	%rdx, 8(%rdi)
	movq	%rcx, 16(%rdi)
	movl	%r8d, 24(%rdi)
	retq
.Lfunc_end198:
	.size	ZipIterable_setter_first, .Lfunc_end198-ZipIterable_setter_first
                                        # -- End function
	.globl	_size_InterleaveIterable        # -- Begin function _size_InterleaveIterable
	.p2align	4, 0x90
	.type	_size_InterleaveIterable,@function
_size_InterleaveIterable:               # @_size_InterleaveIterable
# %bb.0:
	movl	$64, %eax
	movl	$8, %edx
	retq
.Lfunc_end199:
	.size	_size_InterleaveIterable, .Lfunc_end199-_size_InterleaveIterable
                                        # -- End function
	.globl	InterleaveIterable_B_init_firstIntIterable_secondIntIterable # -- Begin function InterleaveIterable_B_init_firstIntIterable_secondIntIterable
	.p2align	4, 0x90
	.type	InterleaveIterable_B_init_firstIntIterable_secondIntIterable,@function
InterleaveIterable_B_init_firstIntIterable_secondIntIterable: # @InterleaveIterable_B_init_firstIntIterable_secondIntIterable
# %bb.0:
	movq	184(%rdi), %rax
	retq
.Lfunc_end200:
	.size	InterleaveIterable_B_init_firstIntIterable_secondIntIterable, .Lfunc_end200-InterleaveIterable_B_init_firstIntIterable_secondIntIterable
                                        # -- End function
	.globl	InterleaveIterable_B_each_fFunctionPtri32_to_Nothing # -- Begin function InterleaveIterable_B_each_fFunctionPtri32_to_Nothing
	.p2align	4, 0x90
	.type	InterleaveIterable_B_each_fFunctionPtri32_to_Nothing,@function
InterleaveIterable_B_each_fFunctionPtri32_to_Nothing: # @InterleaveIterable_B_each_fFunctionPtri32_to_Nothing
# %bb.0:
	movq	192(%rdi), %rax
	retq
.Lfunc_end201:
	.size	InterleaveIterable_B_each_fFunctionPtri32_to_Nothing, .Lfunc_end201-InterleaveIterable_B_each_fFunctionPtri32_to_Nothing
                                        # -- End function
	.globl	InterleaveIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32 # -- Begin function InterleaveIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32
	.p2align	4, 0x90
	.type	InterleaveIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32,@function
InterleaveIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32: # @InterleaveIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32
# %bb.0:
	movq	200(%rdi), %rax
	retq
.Lfunc_end202:
	.size	InterleaveIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, .Lfunc_end202-InterleaveIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32
                                        # -- End function
	.globl	InterleaveIterable_B_all_fFunctionPtri32_to_Ptri1 # -- Begin function InterleaveIterable_B_all_fFunctionPtri32_to_Ptri1
	.p2align	4, 0x90
	.type	InterleaveIterable_B_all_fFunctionPtri32_to_Ptri1,@function
InterleaveIterable_B_all_fFunctionPtri32_to_Ptri1: # @InterleaveIterable_B_all_fFunctionPtri32_to_Ptri1
# %bb.0:
	movq	208(%rdi), %rax
	retq
.Lfunc_end203:
	.size	InterleaveIterable_B_all_fFunctionPtri32_to_Ptri1, .Lfunc_end203-InterleaveIterable_B_all_fFunctionPtri32_to_Ptri1
                                        # -- End function
	.globl	InterleaveIterable_B_any_fFunctionPtri32_to_Ptri1 # -- Begin function InterleaveIterable_B_any_fFunctionPtri32_to_Ptri1
	.p2align	4, 0x90
	.type	InterleaveIterable_B_any_fFunctionPtri32_to_Ptri1,@function
InterleaveIterable_B_any_fFunctionPtri32_to_Ptri1: # @InterleaveIterable_B_any_fFunctionPtri32_to_Ptri1
# %bb.0:
	movq	216(%rdi), %rax
	retq
.Lfunc_end204:
	.size	InterleaveIterable_B_any_fFunctionPtri32_to_Ptri1, .Lfunc_end204-InterleaveIterable_B_any_fFunctionPtri32_to_Ptri1
                                        # -- End function
	.globl	InterleaveIterable_B_map_fFunctionPtri32_to_Ptri32 # -- Begin function InterleaveIterable_B_map_fFunctionPtri32_to_Ptri32
	.p2align	4, 0x90
	.type	InterleaveIterable_B_map_fFunctionPtri32_to_Ptri32,@function
InterleaveIterable_B_map_fFunctionPtri32_to_Ptri32: # @InterleaveIterable_B_map_fFunctionPtri32_to_Ptri32
# %bb.0:
	movq	224(%rdi), %rax
	retq
.Lfunc_end205:
	.size	InterleaveIterable_B_map_fFunctionPtri32_to_Ptri32, .Lfunc_end205-InterleaveIterable_B_map_fFunctionPtri32_to_Ptri32
                                        # -- End function
	.globl	InterleaveIterable_B_filter_fFunctionPtri32_to_Ptri1 # -- Begin function InterleaveIterable_B_filter_fFunctionPtri32_to_Ptri1
	.p2align	4, 0x90
	.type	InterleaveIterable_B_filter_fFunctionPtri32_to_Ptri1,@function
InterleaveIterable_B_filter_fFunctionPtri32_to_Ptri1: # @InterleaveIterable_B_filter_fFunctionPtri32_to_Ptri1
# %bb.0:
	movq	232(%rdi), %rax
	retq
.Lfunc_end206:
	.size	InterleaveIterable_B_filter_fFunctionPtri32_to_Ptri1, .Lfunc_end206-InterleaveIterable_B_filter_fFunctionPtri32_to_Ptri1
                                        # -- End function
	.globl	InterleaveIterable_B_chain_otherIntIterable # -- Begin function InterleaveIterable_B_chain_otherIntIterable
	.p2align	4, 0x90
	.type	InterleaveIterable_B_chain_otherIntIterable,@function
InterleaveIterable_B_chain_otherIntIterable: # @InterleaveIterable_B_chain_otherIntIterable
# %bb.0:
	movq	240(%rdi), %rax
	retq
.Lfunc_end207:
	.size	InterleaveIterable_B_chain_otherIntIterable, .Lfunc_end207-InterleaveIterable_B_chain_otherIntIterable
                                        # -- End function
	.globl	InterleaveIterable_B_interleave_otherIntIterable # -- Begin function InterleaveIterable_B_interleave_otherIntIterable
	.p2align	4, 0x90
	.type	InterleaveIterable_B_interleave_otherIntIterable,@function
InterleaveIterable_B_interleave_otherIntIterable: # @InterleaveIterable_B_interleave_otherIntIterable
# %bb.0:
	movq	248(%rdi), %rax
	retq
.Lfunc_end208:
	.size	InterleaveIterable_B_interleave_otherIntIterable, .Lfunc_end208-InterleaveIterable_B_interleave_otherIntIterable
                                        # -- End function
	.globl	InterleaveIterable_B_zip_otherIntIterable # -- Begin function InterleaveIterable_B_zip_otherIntIterable
	.p2align	4, 0x90
	.type	InterleaveIterable_B_zip_otherIntIterable,@function
InterleaveIterable_B_zip_otherIntIterable: # @InterleaveIterable_B_zip_otherIntIterable
# %bb.0:
	movq	256(%rdi), %rax
	retq
.Lfunc_end209:
	.size	InterleaveIterable_B_zip_otherIntIterable, .Lfunc_end209-InterleaveIterable_B_zip_otherIntIterable
                                        # -- End function
	.globl	InterleaveIterable_B_product_otherIntIterable # -- Begin function InterleaveIterable_B_product_otherIntIterable
	.p2align	4, 0x90
	.type	InterleaveIterable_B_product_otherIntIterable,@function
InterleaveIterable_B_product_otherIntIterable: # @InterleaveIterable_B_product_otherIntIterable
# %bb.0:
	movq	264(%rdi), %rax
	retq
.Lfunc_end210:
	.size	InterleaveIterable_B_product_otherIntIterable, .Lfunc_end210-InterleaveIterable_B_product_otherIntIterable
                                        # -- End function
	.globl	InterleaveIterable_B_iterator_  # -- Begin function InterleaveIterable_B_iterator_
	.p2align	4, 0x90
	.type	InterleaveIterable_B_iterator_,@function
InterleaveIterable_B_iterator_:         # @InterleaveIterable_B_iterator_
# %bb.0:
	movq	272(%rdi), %rax
	retq
.Lfunc_end211:
	.size	InterleaveIterable_B_iterator_, .Lfunc_end211-InterleaveIterable_B_iterator_
                                        # -- End function
	.globl	InterleaveIterable_init_firstIntIterable_secondIntIterable # -- Begin function InterleaveIterable_init_firstIntIterable_secondIntIterable
	.p2align	4, 0x90
	.type	InterleaveIterable_init_firstIntIterable_secondIntIterable,@function
InterleaveIterable_init_firstIntIterable_secondIntIterable: # @InterleaveIterable_init_firstIntIterable_secondIntIterable
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	pushq	%rax
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rsi, %rbx
	movq	%rdi, %r12
	movq	128(%rsp), %rax
	movq	%rax, (%rsp)                    # 8-byte Spill
	movq	136(%rsp), %r15
	movq	120(%rsp), %r13
	movq	96(%rsp), %rdx
	movq	104(%rsp), %rcx
	movq	88(%rsp), %rsi
	movq	40(%rdi), %rax
	movabsq	$4936782714255954462, %rdi      # imm = 0x4482F9B8F083D21E
	imulq	8(%r12), %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%r12), %r8
	movslq	(%rax,%r8,4), %rbp
	movq	40(%rsi), %rax
	movabsq	$-7984962120415158575, %r14     # imm = 0x912FB741F3B45ED1
	movq	8(%rsi), %rdi
	imulq	%r14, %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%rsi), %r8
	movl	(%rax,%r8,4), %r8d
	movq	(%r12,%rbp,8), %rax
	movq	%rbx, %rdi
	callq	*8(%rax)
	movq	40(%r13), %rax
	imulq	8(%r13), %r14
	movq	%r14, %rcx
	shrq	$32, %rcx
	xorq	%r14, %rcx
	andq	16(%r13), %rcx
	movl	(%rax,%rcx,4), %r8d
	movq	8(%r12,%rbp,8), %rax
	movq	8(%rax), %rax
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movq	(%rsp), %rdx                    # 8-byte Reload
	movq	%r15, %rcx
	addq	$8, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	jmpq	*%rax                           # TAILCALL
.Lfunc_end212:
	.size	InterleaveIterable_init_firstIntIterable_secondIntIterable, .Lfunc_end212-InterleaveIterable_init_firstIntIterable_secondIntIterable
	.cfi_endproc
                                        # -- End function
	.globl	InterleaveIterable_iterator_    # -- Begin function InterleaveIterable_iterator_
	.p2align	4, 0x90
	.type	InterleaveIterable_iterator_,@function
InterleaveIterable_iterator_:           # @InterleaveIterable_iterator_
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$392, %rsp                      # imm = 0x188
	.cfi_def_cfa_offset 448
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rdx, %r14
	movq	%rsi, %r12
	movq	%rdi, 64(%rsp)                  # 8-byte Spill
	movq	40(%rsi), %rax
	movabsq	$4936782714255954462, %rcx      # imm = 0x4482F9B8F083D21E
	imulq	8(%rsi), %rcx
	movq	%rcx, %rsi
	shrq	$32, %rsi
	xorq	%rcx, %rsi
	andq	16(%r12), %rsi
	movslq	(%rax,%rsi,4), %rax
	movq	%rax, 16(%rsp)                  # 8-byte Spill
	movq	(%r12,%rax,8), %rax
	leaq	232(%rsp), %rdi
	movq	%rdx, %rsi
	movq	%rdx, 24(%rsp)                  # 8-byte Spill
	callq	*(%rax)
	movslq	256(%rsp), %r13
	movq	248(%rsp), %rbp
	movq	232(%rsp), %rbx
	movq	240(%rsp), %r15
	leaq	8(%rsp), %r8
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%rbp, %rdx
	movl	%r13d, %ecx
	callq	*80(%rbx,%r13,8)
	leaq	360(%rsp), %rdi
	movq	%rbx, %rsi
	movq	%r15, %rdx
	movq	%rbp, %rcx
	movl	%r13d, %r8d
	movq	%rbx, %r9
	leaq	8(%rsp), %r10
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	16(%rsp), %rax                  # 8-byte Reload
	movq	8(%r12,%rax,8), %rax
	leaq	200(%rsp), %rdi
	movq	%r14, %rsi
	callq	*(%rax)
	movslq	224(%rsp), %rbx
	movq	216(%rsp), %r15
	movq	200(%rsp), %r13
	movq	208(%rsp), %rbp
	movq	%r13, %rdi
	movq	%rbp, %rsi
	movq	%r15, %rdx
	movl	%ebx, %ecx
	leaq	8(%rsp), %r14
	movq	%r14, %r8
	callq	*80(%r13,%rbx,8)
	leaq	328(%rsp), %rdi
	movq	%r13, %rsi
	movq	%rbp, %rdx
	movq	%r15, %rcx
	movl	%ebx, %r8d
	movq	%r13, %r9
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	movl	$72, %edi
	callq	bump_malloc_inner@PLT
	movq	InterleaveIterator@GOTPCREL(%rip), %rcx
	movq	%rcx, 72(%rsp)
	movq	%rax, 80(%rsp)
	movl	$9, 96(%rsp)
	movq	16(%rsp), %r14                  # 8-byte Reload
	movq	(%r12,%r14,8), %rax
	leaq	168(%rsp), %rdi
	movq	24(%rsp), %rsi                  # 8-byte Reload
	callq	*(%rax)
	movslq	192(%rsp), %rbx
	movq	184(%rsp), %r15
	movq	168(%rsp), %r13
	movq	176(%rsp), %rbp
	movq	%r13, %rdi
	movq	%rbp, %rsi
	movq	%r15, %rdx
	movl	%ebx, %ecx
	leaq	8(%rsp), %r8
	callq	*80(%r13,%rbx,8)
	leaq	296(%rsp), %rdi
	movq	%r13, %rsi
	movq	%rbp, %rdx
	movq	%r15, %rcx
	movl	%ebx, %r8d
	movq	%r13, %r9
	leaq	8(%rsp), %r13
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	312(%rsp), %rax
	movq	%rax, 56(%rsp)                  # 8-byte Spill
	movq	296(%rsp), %rbp
	movq	304(%rsp), %rax
	movq	%rax, 48(%rsp)                  # 8-byte Spill
	movq	8(%r12,%r14,8), %rax
	leaq	136(%rsp), %rdi
	movq	24(%rsp), %rsi                  # 8-byte Reload
	callq	*(%rax)
	movslq	160(%rsp), %rbx
	movq	152(%rsp), %r14
	movq	136(%rsp), %r15
	movq	144(%rsp), %r12
	movq	%r15, %rdi
	movq	%r12, %rsi
	movq	%r14, %rdx
	movl	%ebx, %ecx
	movq	%r13, %r8
	callq	*80(%r15,%rbx,8)
	leaq	264(%rsp), %rdi
	movq	%r15, %rsi
	movq	%r12, %rdx
	movq	%r14, %rcx
	movl	%ebx, %r8d
	movq	%r15, %r9
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	280(%rsp), %rax
	movq	%rax, 24(%rsp)                  # 8-byte Spill
	movq	264(%rsp), %rbx
	movq	272(%rsp), %rax
	movq	%rax, 16(%rsp)                  # 8-byte Spill
	movq	40(%rbx), %rax
	movabsq	$-933084275656658555, %rcx      # imm = 0xF30D04CB83FB7185
	movq	8(%rbx), %rdx
	imulq	%rcx, %rdx
	movq	%rdx, %rsi
	shrq	$32, %rsi
	xorq	%rdx, %rsi
	andq	16(%rbx), %rsi
	movq	40(%rbp), %rdx
	imulq	8(%rbp), %rcx
	movq	%rcx, %rdi
	shrq	$32, %rdi
	xorq	%rcx, %rdi
	andq	16(%rbp), %rdi
	movl	(%rdx,%rdi,4), %ecx
	movq	%rcx, 40(%rsp)                  # 8-byte Spill
	movl	(%rax,%rsi,4), %eax
	movq	%rax, 32(%rsp)                  # 8-byte Spill
	movq	72(%rsp), %r14
	movq	80(%rsp), %r15
	movq	88(%rsp), %r12
	movslq	96(%rsp), %r13
	movq	_parameterization_IntIterator@GOTPCREL(%rip), %rax
	movq	%rax, 120(%rsp)
	movq	%rax, 128(%rsp)
	movq	24(%r14,%r13,8), %rax
	movq	%rbp, 104(%rsp)
	movq	%rbx, 112(%rsp)
	leaq	104(%rsp), %r8
	movq	%r14, %rdi
	movq	%r15, %rsi
	movq	%r12, %rdx
	movl	%r13d, %ecx
	callq	*%rax
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	leaq	128(%rsp), %r10
	movq	%r14, %rdi
	movq	%r15, %rsi
	movq	%r12, %rdx
	movl	%r13d, %ecx
	movq	%r14, %r8
	movq	%r15, %r9
	pushq	40(%rsp)                        # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	40(%rsp)                        # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	40(%rsp)                        # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	80(%rsp)                        # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	104(%rsp)                       # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	104(%rsp)                       # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$96, %rsp
	.cfi_adjust_cfa_offset -96
	movq	40(%r14), %rax
	movabsq	$8673632051301757104, %rcx      # imm = 0x785EEE655248B0B0
	imulq	8(%r14), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%r14), %rdx
	movl	(%rax,%rdx,4), %ecx
	movq	64(%rsp), %rax                  # 8-byte Reload
	movq	%r12, 16(%rax)
	movq	%r15, 8(%rax)
	movq	%r14, (%rax)
	movl	%ecx, 24(%rax)
	addq	$392, %rsp                      # imm = 0x188
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end213:
	.size	InterleaveIterable_iterator_, .Lfunc_end213-InterleaveIterable_iterator_
	.cfi_endproc
                                        # -- End function
	.globl	_size_InterleaveIterator        # -- Begin function _size_InterleaveIterator
	.p2align	4, 0x90
	.type	_size_InterleaveIterator,@function
_size_InterleaveIterator:               # @_size_InterleaveIterator
# %bb.0:
	movl	$72, %eax
	movl	$8, %edx
	retq
.Lfunc_end214:
	.size	_size_InterleaveIterator, .Lfunc_end214-_size_InterleaveIterator
                                        # -- End function
	.globl	InterleaveIterator_B_init_firstIntIterator_secondIntIterator # -- Begin function InterleaveIterator_B_init_firstIntIterator_secondIntIterator
	.p2align	4, 0x90
	.type	InterleaveIterator_B_init_firstIntIterator_secondIntIterator,@function
InterleaveIterator_B_init_firstIntIterator_secondIntIterator: # @InterleaveIterator_B_init_firstIntIterator_secondIntIterator
# %bb.0:
	movq	112(%rdi), %rax
	retq
.Lfunc_end215:
	.size	InterleaveIterator_B_init_firstIntIterator_secondIntIterator, .Lfunc_end215-InterleaveIterator_B_init_firstIntIterator_secondIntIterator
                                        # -- End function
	.globl	InterleaveIterator_B_next_      # -- Begin function InterleaveIterator_B_next_
	.p2align	4, 0x90
	.type	InterleaveIterator_B_next_,@function
InterleaveIterator_B_next_:             # @InterleaveIterator_B_next_
# %bb.0:
	movq	120(%rdi), %rax
	retq
.Lfunc_end216:
	.size	InterleaveIterator_B_next_, .Lfunc_end216-InterleaveIterator_B_next_
                                        # -- End function
	.globl	InterleaveIterator_init_firstIntIterator_secondIntIterator # -- Begin function InterleaveIterator_init_firstIntIterator_secondIntIterator
	.p2align	4, 0x90
	.type	InterleaveIterator_init_firstIntIterator_secondIntIterator,@function
InterleaveIterator_init_firstIntIterator_secondIntIterator: # @InterleaveIterator_init_firstIntIterator_secondIntIterator
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	pushq	%rax
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movq	128(%rsp), %rax
	movq	%rax, (%rsp)                    # 8-byte Spill
	movq	136(%rsp), %r12
	movq	120(%rsp), %r13
	movq	96(%rsp), %rdx
	movq	104(%rsp), %rcx
	movq	88(%rsp), %rsi
	movq	40(%rdi), %rax
	movabsq	$-3924664358248524505, %rdi     # imm = 0xC988CA8F57F5D527
	imulq	8(%r14), %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%r14), %r8
	movslq	(%rax,%r8,4), %rbp
	movq	40(%rsi), %rax
	movabsq	$-933084275656658555, %r15      # imm = 0xF30D04CB83FB7185
	movq	8(%rsi), %rdi
	imulq	%r15, %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%rsi), %r8
	movl	(%rax,%r8,4), %r8d
	movq	(%r14,%rbp,8), %rax
	movq	%rbx, %rdi
	callq	*8(%rax)
	movq	40(%r13), %rax
	imulq	8(%r13), %r15
	movq	%r15, %rcx
	shrq	$32, %rcx
	xorq	%r15, %rcx
	andq	16(%r13), %rcx
	movl	(%rax,%rcx,4), %r8d
	movq	8(%r14,%rbp,8), %rax
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movq	(%rsp), %rdx                    # 8-byte Reload
	movq	%r12, %rcx
	callq	*8(%rax)
	movq	16(%r14,%rbp,8), %rax
	movq	8(%rax), %rax
	movq	%rbx, %rdi
	movl	$1, %esi
	addq	$8, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	jmpq	*%rax                           # TAILCALL
.Lfunc_end217:
	.size	InterleaveIterator_init_firstIntIterator_secondIntIterator, .Lfunc_end217-InterleaveIterator_init_firstIntIterator_secondIntIterator
	.cfi_endproc
                                        # -- End function
	.globl	InterleaveIterator_next_        # -- Begin function InterleaveIterator_next_
	.p2align	4, 0x90
	.type	InterleaveIterator_next_,@function
InterleaveIterator_next_:               # @InterleaveIterator_next_
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r13
	.cfi_def_cfa_offset 32
	pushq	%r12
	.cfi_def_cfa_offset 40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	subq	$48, %rsp
	.cfi_def_cfa_offset 96
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r13, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movq	40(%rdi), %rax
	movabsq	$-3924664358248524505, %rcx     # imm = 0xC988CA8F57F5D527
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %r12
	leaq	(%rdi,%r12,8), %r15
	movq	16(%rdi,%r12,8), %rax
	movq	%rsi, %rdi
	callq	*(%rax)
	movq	16(%r14,%r12,8), %rcx
	movq	8(%rcx), %rcx
	movq	%rbx, %rdi
	testb	$1, %al
	je	.LBB218_2
# %bb.1:
	xorl	%esi, %esi
	callq	*%rcx
	jmp	.LBB218_3
.LBB218_2:
	movl	$1, %esi
	callq	*%rcx
	addq	$8, %r15
.LBB218_3:
	movq	(%r15), %rax
	leaq	16(%rsp), %rdi
	movq	%rbx, %rsi
	callq	*(%rax)
	movslq	40(%rsp), %rbx
	movq	32(%rsp), %r14
	movq	16(%rsp), %r15
	movq	24(%rsp), %r12
	leaq	8(%rsp), %r13
	movq	%r15, %rdi
	movq	%r12, %rsi
	movq	%r14, %rdx
	movl	%ebx, %ecx
	movq	%r13, %r8
	callq	*(%r15,%rbx,8)
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	movq	%r15, %rdi
	movq	%r12, %rsi
	movq	%r14, %rdx
	movl	%ebx, %ecx
	movq	%r15, %r8
	movq	%r12, %r9
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$80, %rsp
	.cfi_adjust_cfa_offset -80
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end218:
	.size	InterleaveIterator_next_, .Lfunc_end218-InterleaveIterator_next_
	.cfi_endproc
                                        # -- End function
	.globl	InterleaveIterator_getter_on_first # -- Begin function InterleaveIterator_getter_on_first
	.p2align	4, 0x90
	.type	InterleaveIterator_getter_on_first,@function
InterleaveIterator_getter_on_first:     # @InterleaveIterator_getter_on_first
# %bb.0:
	movzbl	64(%rdi), %eax
	retq
.Lfunc_end219:
	.size	InterleaveIterator_getter_on_first, .Lfunc_end219-InterleaveIterator_getter_on_first
                                        # -- End function
	.globl	InterleaveIterator_setter_on_first # -- Begin function InterleaveIterator_setter_on_first
	.p2align	4, 0x90
	.type	InterleaveIterator_setter_on_first,@function
InterleaveIterator_setter_on_first:     # @InterleaveIterator_setter_on_first
# %bb.0:
	andl	$1, %esi
	movb	%sil, 64(%rdi)
	retq
.Lfunc_end220:
	.size	InterleaveIterator_setter_on_first, .Lfunc_end220-InterleaveIterator_setter_on_first
                                        # -- End function
	.globl	InterleaveIterator_getter_second # -- Begin function InterleaveIterator_getter_second
	.p2align	4, 0x90
	.type	InterleaveIterator_getter_second,@function
InterleaveIterator_getter_second:       # @InterleaveIterator_getter_second
# %bb.0:
	movq	%rdi, %rax
	movq	32(%rsi), %rcx
	movq	40(%rsi), %rdx
	movq	48(%rsi), %rdi
	movl	56(%rsi), %esi
	movl	%esi, 24(%rax)
	movq	%rdi, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	retq
.Lfunc_end221:
	.size	InterleaveIterator_getter_second, .Lfunc_end221-InterleaveIterator_getter_second
                                        # -- End function
	.globl	InterleaveIterator_setter_second # -- Begin function InterleaveIterator_setter_second
	.p2align	4, 0x90
	.type	InterleaveIterator_setter_second,@function
InterleaveIterator_setter_second:       # @InterleaveIterator_setter_second
# %bb.0:
	movq	%rsi, 32(%rdi)
	movq	%rdx, 40(%rdi)
	movq	%rcx, 48(%rdi)
	movl	%r8d, 56(%rdi)
	retq
.Lfunc_end222:
	.size	InterleaveIterator_setter_second, .Lfunc_end222-InterleaveIterator_setter_second
                                        # -- End function
	.globl	InterleaveIterator_getter_first # -- Begin function InterleaveIterator_getter_first
	.p2align	4, 0x90
	.type	InterleaveIterator_getter_first,@function
InterleaveIterator_getter_first:        # @InterleaveIterator_getter_first
# %bb.0:
	movq	%rdi, %rax
	movq	(%rsi), %rcx
	movq	8(%rsi), %rdx
	movq	16(%rsi), %rdi
	movl	24(%rsi), %esi
	movl	%esi, 24(%rax)
	movq	%rdi, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	retq
.Lfunc_end223:
	.size	InterleaveIterator_getter_first, .Lfunc_end223-InterleaveIterator_getter_first
                                        # -- End function
	.globl	InterleaveIterator_setter_first # -- Begin function InterleaveIterator_setter_first
	.p2align	4, 0x90
	.type	InterleaveIterator_setter_first,@function
InterleaveIterator_setter_first:        # @InterleaveIterator_setter_first
# %bb.0:
	movq	%rsi, (%rdi)
	movq	%rdx, 8(%rdi)
	movq	%rcx, 16(%rdi)
	movl	%r8d, 24(%rdi)
	retq
.Lfunc_end224:
	.size	InterleaveIterator_setter_first, .Lfunc_end224-InterleaveIterator_setter_first
                                        # -- End function
	.globl	InterleaveIterable_getter_second # -- Begin function InterleaveIterable_getter_second
	.p2align	4, 0x90
	.type	InterleaveIterable_getter_second,@function
InterleaveIterable_getter_second:       # @InterleaveIterable_getter_second
# %bb.0:
	movq	%rdi, %rax
	movq	32(%rsi), %rcx
	movq	40(%rsi), %rdx
	movq	48(%rsi), %rdi
	movl	56(%rsi), %esi
	movl	%esi, 24(%rax)
	movq	%rdi, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	retq
.Lfunc_end225:
	.size	InterleaveIterable_getter_second, .Lfunc_end225-InterleaveIterable_getter_second
                                        # -- End function
	.globl	InterleaveIterable_setter_second # -- Begin function InterleaveIterable_setter_second
	.p2align	4, 0x90
	.type	InterleaveIterable_setter_second,@function
InterleaveIterable_setter_second:       # @InterleaveIterable_setter_second
# %bb.0:
	movq	%rsi, 32(%rdi)
	movq	%rdx, 40(%rdi)
	movq	%rcx, 48(%rdi)
	movl	%r8d, 56(%rdi)
	retq
.Lfunc_end226:
	.size	InterleaveIterable_setter_second, .Lfunc_end226-InterleaveIterable_setter_second
                                        # -- End function
	.globl	InterleaveIterable_getter_first # -- Begin function InterleaveIterable_getter_first
	.p2align	4, 0x90
	.type	InterleaveIterable_getter_first,@function
InterleaveIterable_getter_first:        # @InterleaveIterable_getter_first
# %bb.0:
	movq	%rdi, %rax
	movq	(%rsi), %rcx
	movq	8(%rsi), %rdx
	movq	16(%rsi), %rdi
	movl	24(%rsi), %esi
	movl	%esi, 24(%rax)
	movq	%rdi, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	retq
.Lfunc_end227:
	.size	InterleaveIterable_getter_first, .Lfunc_end227-InterleaveIterable_getter_first
                                        # -- End function
	.globl	InterleaveIterable_setter_first # -- Begin function InterleaveIterable_setter_first
	.p2align	4, 0x90
	.type	InterleaveIterable_setter_first,@function
InterleaveIterable_setter_first:        # @InterleaveIterable_setter_first
# %bb.0:
	movq	%rsi, (%rdi)
	movq	%rdx, 8(%rdi)
	movq	%rcx, 16(%rdi)
	movl	%r8d, 24(%rdi)
	retq
.Lfunc_end228:
	.size	InterleaveIterable_setter_first, .Lfunc_end228-InterleaveIterable_setter_first
                                        # -- End function
	.globl	_size_ChainIterable             # -- Begin function _size_ChainIterable
	.p2align	4, 0x90
	.type	_size_ChainIterable,@function
_size_ChainIterable:                    # @_size_ChainIterable
# %bb.0:
	movl	$64, %eax
	movl	$8, %edx
	retq
.Lfunc_end229:
	.size	_size_ChainIterable, .Lfunc_end229-_size_ChainIterable
                                        # -- End function
	.globl	ChainIterable_B_init_firstIntIterable_secondIntIterable # -- Begin function ChainIterable_B_init_firstIntIterable_secondIntIterable
	.p2align	4, 0x90
	.type	ChainIterable_B_init_firstIntIterable_secondIntIterable,@function
ChainIterable_B_init_firstIntIterable_secondIntIterable: # @ChainIterable_B_init_firstIntIterable_secondIntIterable
# %bb.0:
	movq	184(%rdi), %rax
	retq
.Lfunc_end230:
	.size	ChainIterable_B_init_firstIntIterable_secondIntIterable, .Lfunc_end230-ChainIterable_B_init_firstIntIterable_secondIntIterable
                                        # -- End function
	.globl	ChainIterable_B_each_fFunctionPtri32_to_Nothing # -- Begin function ChainIterable_B_each_fFunctionPtri32_to_Nothing
	.p2align	4, 0x90
	.type	ChainIterable_B_each_fFunctionPtri32_to_Nothing,@function
ChainIterable_B_each_fFunctionPtri32_to_Nothing: # @ChainIterable_B_each_fFunctionPtri32_to_Nothing
# %bb.0:
	movq	192(%rdi), %rax
	retq
.Lfunc_end231:
	.size	ChainIterable_B_each_fFunctionPtri32_to_Nothing, .Lfunc_end231-ChainIterable_B_each_fFunctionPtri32_to_Nothing
                                        # -- End function
	.globl	ChainIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32 # -- Begin function ChainIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32
	.p2align	4, 0x90
	.type	ChainIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32,@function
ChainIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32: # @ChainIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32
# %bb.0:
	movq	200(%rdi), %rax
	retq
.Lfunc_end232:
	.size	ChainIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, .Lfunc_end232-ChainIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32
                                        # -- End function
	.globl	ChainIterable_B_all_fFunctionPtri32_to_Ptri1 # -- Begin function ChainIterable_B_all_fFunctionPtri32_to_Ptri1
	.p2align	4, 0x90
	.type	ChainIterable_B_all_fFunctionPtri32_to_Ptri1,@function
ChainIterable_B_all_fFunctionPtri32_to_Ptri1: # @ChainIterable_B_all_fFunctionPtri32_to_Ptri1
# %bb.0:
	movq	208(%rdi), %rax
	retq
.Lfunc_end233:
	.size	ChainIterable_B_all_fFunctionPtri32_to_Ptri1, .Lfunc_end233-ChainIterable_B_all_fFunctionPtri32_to_Ptri1
                                        # -- End function
	.globl	ChainIterable_B_any_fFunctionPtri32_to_Ptri1 # -- Begin function ChainIterable_B_any_fFunctionPtri32_to_Ptri1
	.p2align	4, 0x90
	.type	ChainIterable_B_any_fFunctionPtri32_to_Ptri1,@function
ChainIterable_B_any_fFunctionPtri32_to_Ptri1: # @ChainIterable_B_any_fFunctionPtri32_to_Ptri1
# %bb.0:
	movq	216(%rdi), %rax
	retq
.Lfunc_end234:
	.size	ChainIterable_B_any_fFunctionPtri32_to_Ptri1, .Lfunc_end234-ChainIterable_B_any_fFunctionPtri32_to_Ptri1
                                        # -- End function
	.globl	ChainIterable_B_map_fFunctionPtri32_to_Ptri32 # -- Begin function ChainIterable_B_map_fFunctionPtri32_to_Ptri32
	.p2align	4, 0x90
	.type	ChainIterable_B_map_fFunctionPtri32_to_Ptri32,@function
ChainIterable_B_map_fFunctionPtri32_to_Ptri32: # @ChainIterable_B_map_fFunctionPtri32_to_Ptri32
# %bb.0:
	movq	224(%rdi), %rax
	retq
.Lfunc_end235:
	.size	ChainIterable_B_map_fFunctionPtri32_to_Ptri32, .Lfunc_end235-ChainIterable_B_map_fFunctionPtri32_to_Ptri32
                                        # -- End function
	.globl	ChainIterable_B_filter_fFunctionPtri32_to_Ptri1 # -- Begin function ChainIterable_B_filter_fFunctionPtri32_to_Ptri1
	.p2align	4, 0x90
	.type	ChainIterable_B_filter_fFunctionPtri32_to_Ptri1,@function
ChainIterable_B_filter_fFunctionPtri32_to_Ptri1: # @ChainIterable_B_filter_fFunctionPtri32_to_Ptri1
# %bb.0:
	movq	232(%rdi), %rax
	retq
.Lfunc_end236:
	.size	ChainIterable_B_filter_fFunctionPtri32_to_Ptri1, .Lfunc_end236-ChainIterable_B_filter_fFunctionPtri32_to_Ptri1
                                        # -- End function
	.globl	ChainIterable_B_chain_otherIntIterable # -- Begin function ChainIterable_B_chain_otherIntIterable
	.p2align	4, 0x90
	.type	ChainIterable_B_chain_otherIntIterable,@function
ChainIterable_B_chain_otherIntIterable: # @ChainIterable_B_chain_otherIntIterable
# %bb.0:
	movq	240(%rdi), %rax
	retq
.Lfunc_end237:
	.size	ChainIterable_B_chain_otherIntIterable, .Lfunc_end237-ChainIterable_B_chain_otherIntIterable
                                        # -- End function
	.globl	ChainIterable_B_interleave_otherIntIterable # -- Begin function ChainIterable_B_interleave_otherIntIterable
	.p2align	4, 0x90
	.type	ChainIterable_B_interleave_otherIntIterable,@function
ChainIterable_B_interleave_otherIntIterable: # @ChainIterable_B_interleave_otherIntIterable
# %bb.0:
	movq	248(%rdi), %rax
	retq
.Lfunc_end238:
	.size	ChainIterable_B_interleave_otherIntIterable, .Lfunc_end238-ChainIterable_B_interleave_otherIntIterable
                                        # -- End function
	.globl	ChainIterable_B_zip_otherIntIterable # -- Begin function ChainIterable_B_zip_otherIntIterable
	.p2align	4, 0x90
	.type	ChainIterable_B_zip_otherIntIterable,@function
ChainIterable_B_zip_otherIntIterable:   # @ChainIterable_B_zip_otherIntIterable
# %bb.0:
	movq	256(%rdi), %rax
	retq
.Lfunc_end239:
	.size	ChainIterable_B_zip_otherIntIterable, .Lfunc_end239-ChainIterable_B_zip_otherIntIterable
                                        # -- End function
	.globl	ChainIterable_B_product_otherIntIterable # -- Begin function ChainIterable_B_product_otherIntIterable
	.p2align	4, 0x90
	.type	ChainIterable_B_product_otherIntIterable,@function
ChainIterable_B_product_otherIntIterable: # @ChainIterable_B_product_otherIntIterable
# %bb.0:
	movq	264(%rdi), %rax
	retq
.Lfunc_end240:
	.size	ChainIterable_B_product_otherIntIterable, .Lfunc_end240-ChainIterable_B_product_otherIntIterable
                                        # -- End function
	.globl	ChainIterable_B_iterator_       # -- Begin function ChainIterable_B_iterator_
	.p2align	4, 0x90
	.type	ChainIterable_B_iterator_,@function
ChainIterable_B_iterator_:              # @ChainIterable_B_iterator_
# %bb.0:
	movq	272(%rdi), %rax
	retq
.Lfunc_end241:
	.size	ChainIterable_B_iterator_, .Lfunc_end241-ChainIterable_B_iterator_
                                        # -- End function
	.globl	ChainIterable_init_firstIntIterable_secondIntIterable # -- Begin function ChainIterable_init_firstIntIterable_secondIntIterable
	.p2align	4, 0x90
	.type	ChainIterable_init_firstIntIterable_secondIntIterable,@function
ChainIterable_init_firstIntIterable_secondIntIterable: # @ChainIterable_init_firstIntIterable_secondIntIterable
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	pushq	%rax
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rsi, %rbx
	movq	%rdi, %r12
	movq	128(%rsp), %rax
	movq	%rax, (%rsp)                    # 8-byte Spill
	movq	136(%rsp), %r15
	movq	120(%rsp), %r13
	movq	96(%rsp), %rdx
	movq	104(%rsp), %rcx
	movq	88(%rsp), %rsi
	movq	40(%rdi), %rax
	movabsq	$-2370247058431047815, %rdi     # imm = 0xDF1B30DBC44D8779
	imulq	8(%r12), %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%r12), %r8
	movslq	(%rax,%r8,4), %rbp
	movq	40(%rsi), %rax
	movabsq	$-7984962120415158575, %r14     # imm = 0x912FB741F3B45ED1
	movq	8(%rsi), %rdi
	imulq	%r14, %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%rsi), %r8
	movl	(%rax,%r8,4), %r8d
	movq	(%r12,%rbp,8), %rax
	movq	%rbx, %rdi
	callq	*8(%rax)
	movq	40(%r13), %rax
	imulq	8(%r13), %r14
	movq	%r14, %rcx
	shrq	$32, %rcx
	xorq	%r14, %rcx
	andq	16(%r13), %rcx
	movl	(%rax,%rcx,4), %r8d
	movq	8(%r12,%rbp,8), %rax
	movq	8(%rax), %rax
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movq	(%rsp), %rdx                    # 8-byte Reload
	movq	%r15, %rcx
	addq	$8, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	jmpq	*%rax                           # TAILCALL
.Lfunc_end242:
	.size	ChainIterable_init_firstIntIterable_secondIntIterable, .Lfunc_end242-ChainIterable_init_firstIntIterable_secondIntIterable
	.cfi_endproc
                                        # -- End function
	.globl	ChainIterable_iterator_         # -- Begin function ChainIterable_iterator_
	.p2align	4, 0x90
	.type	ChainIterable_iterator_,@function
ChainIterable_iterator_:                # @ChainIterable_iterator_
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$392, %rsp                      # imm = 0x188
	.cfi_def_cfa_offset 448
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rdx, %r14
	movq	%rsi, %r12
	movq	%rdi, 64(%rsp)                  # 8-byte Spill
	movq	40(%rsi), %rax
	movabsq	$-2370247058431047815, %rcx     # imm = 0xDF1B30DBC44D8779
	imulq	8(%rsi), %rcx
	movq	%rcx, %rsi
	shrq	$32, %rsi
	xorq	%rcx, %rsi
	andq	16(%r12), %rsi
	movslq	(%rax,%rsi,4), %rax
	movq	%rax, 16(%rsp)                  # 8-byte Spill
	movq	(%r12,%rax,8), %rax
	leaq	232(%rsp), %rdi
	movq	%rdx, %rsi
	movq	%rdx, 24(%rsp)                  # 8-byte Spill
	callq	*(%rax)
	movslq	256(%rsp), %r13
	movq	248(%rsp), %rbp
	movq	232(%rsp), %rbx
	movq	240(%rsp), %r15
	leaq	8(%rsp), %r8
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%rbp, %rdx
	movl	%r13d, %ecx
	callq	*80(%rbx,%r13,8)
	leaq	360(%rsp), %rdi
	movq	%rbx, %rsi
	movq	%r15, %rdx
	movq	%rbp, %rcx
	movl	%r13d, %r8d
	movq	%rbx, %r9
	leaq	8(%rsp), %r10
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	16(%rsp), %rax                  # 8-byte Reload
	movq	8(%r12,%rax,8), %rax
	leaq	200(%rsp), %rdi
	movq	%r14, %rsi
	callq	*(%rax)
	movslq	224(%rsp), %rbx
	movq	216(%rsp), %r15
	movq	200(%rsp), %r13
	movq	208(%rsp), %rbp
	movq	%r13, %rdi
	movq	%rbp, %rsi
	movq	%r15, %rdx
	movl	%ebx, %ecx
	leaq	8(%rsp), %r14
	movq	%r14, %r8
	callq	*80(%r13,%rbx,8)
	leaq	328(%rsp), %rdi
	movq	%r13, %rsi
	movq	%rbp, %rdx
	movq	%r15, %rcx
	movl	%ebx, %r8d
	movq	%r13, %r9
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	movl	$72, %edi
	callq	bump_malloc_inner@PLT
	movq	ChainIterator@GOTPCREL(%rip), %rcx
	movq	%rcx, 72(%rsp)
	movq	%rax, 80(%rsp)
	movl	$9, 96(%rsp)
	movq	16(%rsp), %r14                  # 8-byte Reload
	movq	(%r12,%r14,8), %rax
	leaq	168(%rsp), %rdi
	movq	24(%rsp), %rsi                  # 8-byte Reload
	callq	*(%rax)
	movslq	192(%rsp), %rbx
	movq	184(%rsp), %r15
	movq	168(%rsp), %r13
	movq	176(%rsp), %rbp
	movq	%r13, %rdi
	movq	%rbp, %rsi
	movq	%r15, %rdx
	movl	%ebx, %ecx
	leaq	8(%rsp), %r8
	callq	*80(%r13,%rbx,8)
	leaq	296(%rsp), %rdi
	movq	%r13, %rsi
	movq	%rbp, %rdx
	movq	%r15, %rcx
	movl	%ebx, %r8d
	movq	%r13, %r9
	leaq	8(%rsp), %r13
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	312(%rsp), %rax
	movq	%rax, 56(%rsp)                  # 8-byte Spill
	movq	296(%rsp), %rbp
	movq	304(%rsp), %rax
	movq	%rax, 48(%rsp)                  # 8-byte Spill
	movq	8(%r12,%r14,8), %rax
	leaq	136(%rsp), %rdi
	movq	24(%rsp), %rsi                  # 8-byte Reload
	callq	*(%rax)
	movslq	160(%rsp), %rbx
	movq	152(%rsp), %r14
	movq	136(%rsp), %r15
	movq	144(%rsp), %r12
	movq	%r15, %rdi
	movq	%r12, %rsi
	movq	%r14, %rdx
	movl	%ebx, %ecx
	movq	%r13, %r8
	callq	*80(%r15,%rbx,8)
	leaq	264(%rsp), %rdi
	movq	%r15, %rsi
	movq	%r12, %rdx
	movq	%r14, %rcx
	movl	%ebx, %r8d
	movq	%r15, %r9
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	280(%rsp), %rax
	movq	%rax, 24(%rsp)                  # 8-byte Spill
	movq	264(%rsp), %rbx
	movq	272(%rsp), %rax
	movq	%rax, 16(%rsp)                  # 8-byte Spill
	movq	40(%rbx), %rax
	movabsq	$-933084275656658555, %rcx      # imm = 0xF30D04CB83FB7185
	movq	8(%rbx), %rdx
	imulq	%rcx, %rdx
	movq	%rdx, %rsi
	shrq	$32, %rsi
	xorq	%rdx, %rsi
	andq	16(%rbx), %rsi
	movq	40(%rbp), %rdx
	imulq	8(%rbp), %rcx
	movq	%rcx, %rdi
	shrq	$32, %rdi
	xorq	%rcx, %rdi
	andq	16(%rbp), %rdi
	movl	(%rdx,%rdi,4), %ecx
	movq	%rcx, 40(%rsp)                  # 8-byte Spill
	movl	(%rax,%rsi,4), %eax
	movq	%rax, 32(%rsp)                  # 8-byte Spill
	movq	72(%rsp), %r14
	movq	80(%rsp), %r15
	movq	88(%rsp), %r12
	movslq	96(%rsp), %r13
	movq	_parameterization_IntIterator@GOTPCREL(%rip), %rax
	movq	%rax, 120(%rsp)
	movq	%rax, 128(%rsp)
	movq	24(%r14,%r13,8), %rax
	movq	%rbp, 104(%rsp)
	movq	%rbx, 112(%rsp)
	leaq	104(%rsp), %r8
	movq	%r14, %rdi
	movq	%r15, %rsi
	movq	%r12, %rdx
	movl	%r13d, %ecx
	callq	*%rax
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	leaq	128(%rsp), %r10
	movq	%r14, %rdi
	movq	%r15, %rsi
	movq	%r12, %rdx
	movl	%r13d, %ecx
	movq	%r14, %r8
	movq	%r15, %r9
	pushq	40(%rsp)                        # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	40(%rsp)                        # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	40(%rsp)                        # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	80(%rsp)                        # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	104(%rsp)                       # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	104(%rsp)                       # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$96, %rsp
	.cfi_adjust_cfa_offset -96
	movq	40(%r14), %rax
	movabsq	$8673632051301757104, %rcx      # imm = 0x785EEE655248B0B0
	imulq	8(%r14), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%r14), %rdx
	movl	(%rax,%rdx,4), %ecx
	movq	64(%rsp), %rax                  # 8-byte Reload
	movq	%r12, 16(%rax)
	movq	%r15, 8(%rax)
	movq	%r14, (%rax)
	movl	%ecx, 24(%rax)
	addq	$392, %rsp                      # imm = 0x188
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end243:
	.size	ChainIterable_iterator_, .Lfunc_end243-ChainIterable_iterator_
	.cfi_endproc
                                        # -- End function
	.globl	_size_ChainIterator             # -- Begin function _size_ChainIterator
	.p2align	4, 0x90
	.type	_size_ChainIterator,@function
_size_ChainIterator:                    # @_size_ChainIterator
# %bb.0:
	movl	$72, %eax
	movl	$8, %edx
	retq
.Lfunc_end244:
	.size	_size_ChainIterator, .Lfunc_end244-_size_ChainIterator
                                        # -- End function
	.globl	ChainIterator_B_init_firstIntIterator_secondIntIterator # -- Begin function ChainIterator_B_init_firstIntIterator_secondIntIterator
	.p2align	4, 0x90
	.type	ChainIterator_B_init_firstIntIterator_secondIntIterator,@function
ChainIterator_B_init_firstIntIterator_secondIntIterator: # @ChainIterator_B_init_firstIntIterator_secondIntIterator
# %bb.0:
	movq	112(%rdi), %rax
	retq
.Lfunc_end245:
	.size	ChainIterator_B_init_firstIntIterator_secondIntIterator, .Lfunc_end245-ChainIterator_B_init_firstIntIterator_secondIntIterator
                                        # -- End function
	.globl	ChainIterator_B_next_           # -- Begin function ChainIterator_B_next_
	.p2align	4, 0x90
	.type	ChainIterator_B_next_,@function
ChainIterator_B_next_:                  # @ChainIterator_B_next_
# %bb.0:
	movq	120(%rdi), %rax
	retq
.Lfunc_end246:
	.size	ChainIterator_B_next_, .Lfunc_end246-ChainIterator_B_next_
                                        # -- End function
	.globl	ChainIterator_init_firstIntIterator_secondIntIterator # -- Begin function ChainIterator_init_firstIntIterator_secondIntIterator
	.p2align	4, 0x90
	.type	ChainIterator_init_firstIntIterator_secondIntIterator,@function
ChainIterator_init_firstIntIterator_secondIntIterator: # @ChainIterator_init_firstIntIterator_secondIntIterator
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	pushq	%rax
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movq	128(%rsp), %rax
	movq	%rax, (%rsp)                    # 8-byte Spill
	movq	136(%rsp), %r12
	movq	120(%rsp), %r13
	movq	96(%rsp), %rdx
	movq	104(%rsp), %rcx
	movq	88(%rsp), %rsi
	movq	40(%rdi), %rax
	movabsq	$6043157723929225452, %rdi      # imm = 0x53DD9BEE9075A8EC
	imulq	8(%r14), %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%r14), %r8
	movslq	(%rax,%r8,4), %rbp
	movq	40(%rsi), %rax
	movabsq	$-933084275656658555, %r15      # imm = 0xF30D04CB83FB7185
	movq	8(%rsi), %rdi
	imulq	%r15, %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%rsi), %r8
	movl	(%rax,%r8,4), %r8d
	movq	(%r14,%rbp,8), %rax
	movq	%rbx, %rdi
	callq	*8(%rax)
	movq	40(%r13), %rax
	imulq	8(%r13), %r15
	movq	%r15, %rcx
	shrq	$32, %rcx
	xorq	%r15, %rcx
	andq	16(%r13), %rcx
	movl	(%rax,%rcx,4), %r8d
	movq	8(%r14,%rbp,8), %rax
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movq	(%rsp), %rdx                    # 8-byte Reload
	movq	%r12, %rcx
	callq	*8(%rax)
	movq	16(%r14,%rbp,8), %rax
	movq	8(%rax), %rax
	movq	%rbx, %rdi
	movl	$1, %esi
	addq	$8, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	jmpq	*%rax                           # TAILCALL
.Lfunc_end247:
	.size	ChainIterator_init_firstIntIterator_secondIntIterator, .Lfunc_end247-ChainIterator_init_firstIntIterator_secondIntIterator
	.cfi_endproc
                                        # -- End function
	.globl	ChainIterator_next_             # -- Begin function ChainIterator_next_
	.p2align	4, 0x90
	.type	ChainIterator_next_,@function
ChainIterator_next_:                    # @ChainIterator_next_
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$88, %rsp
	.cfi_def_cfa_offset 144
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rsi, %r15
	movq	%rdi, %r14
	movq	40(%rdi), %rax
	movabsq	$6043157723929225452, %rcx      # imm = 0x53DD9BEE9075A8EC
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %rbx
	movq	16(%rdi,%rbx,8), %rax
	movq	%rsi, %rdi
	callq	*(%rax)
	testb	$1, %al
	je	.LBB248_4
# %bb.1:
	movq	(%r14,%rbx,8), %rax
	leaq	56(%rsp), %rdi
	movq	%r15, 16(%rsp)                  # 8-byte Spill
	movq	%r15, %rsi
	callq	*(%rax)
	movslq	80(%rsp), %r15
	movq	72(%rsp), %r12
	movq	56(%rsp), %r13
	movq	64(%rsp), %rbp
	leaq	8(%rsp), %r8
	movq	%r13, %rdi
	movq	%rbp, %rsi
	movq	%r12, %rdx
	movl	%r15d, %ecx
	callq	*(%r13,%r15,8)
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	movq	%r13, %rdi
	movq	%rbp, %rsi
	movq	%r12, %rdx
	movl	%r15d, %ecx
	movq	%r13, %r8
	movq	%rbp, %r9
	leaq	16(%rsp), %r10
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	cmpq	nil_typ@GOTPCREL(%rip), %rax
	setne	%cl
	testq	%rax, %rax
	setne	%al
	testb	%al, %cl
	je	.LBB248_3
# %bb.2:
	movq	i32_typ@GOTPCREL(%rip), %rax
	jmp	.LBB248_5
.LBB248_3:
	movq	16(%r14,%rbx,8), %rax
	movq	16(%rsp), %r15                  # 8-byte Reload
	movq	%r15, %rdi
	xorl	%esi, %esi
	callq	*8(%rax)
.LBB248_4:
	movq	8(%r14,%rbx,8), %rax
	leaq	24(%rsp), %rdi
	movq	%r15, %rsi
	callq	*(%rax)
	movslq	48(%rsp), %rbx
	movq	40(%rsp), %r14
	movq	24(%rsp), %r15
	movq	32(%rsp), %r12
	leaq	8(%rsp), %r13
	movq	%r15, %rdi
	movq	%r12, %rsi
	movq	%r14, %rdx
	movl	%ebx, %ecx
	movq	%r13, %r8
	callq	*(%r15,%rbx,8)
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	movq	%r15, %rdi
	movq	%r12, %rsi
	movq	%r14, %rdx
	movl	%ebx, %ecx
	movq	%r15, %r8
	movq	%r12, %r9
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
.LBB248_5:
	addq	$88, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end248:
	.size	ChainIterator_next_, .Lfunc_end248-ChainIterator_next_
	.cfi_endproc
                                        # -- End function
	.globl	ChainIterator_getter_on_first   # -- Begin function ChainIterator_getter_on_first
	.p2align	4, 0x90
	.type	ChainIterator_getter_on_first,@function
ChainIterator_getter_on_first:          # @ChainIterator_getter_on_first
# %bb.0:
	movzbl	64(%rdi), %eax
	retq
.Lfunc_end249:
	.size	ChainIterator_getter_on_first, .Lfunc_end249-ChainIterator_getter_on_first
                                        # -- End function
	.globl	ChainIterator_setter_on_first   # -- Begin function ChainIterator_setter_on_first
	.p2align	4, 0x90
	.type	ChainIterator_setter_on_first,@function
ChainIterator_setter_on_first:          # @ChainIterator_setter_on_first
# %bb.0:
	andl	$1, %esi
	movb	%sil, 64(%rdi)
	retq
.Lfunc_end250:
	.size	ChainIterator_setter_on_first, .Lfunc_end250-ChainIterator_setter_on_first
                                        # -- End function
	.globl	ChainIterator_getter_second     # -- Begin function ChainIterator_getter_second
	.p2align	4, 0x90
	.type	ChainIterator_getter_second,@function
ChainIterator_getter_second:            # @ChainIterator_getter_second
# %bb.0:
	movq	%rdi, %rax
	movq	32(%rsi), %rcx
	movq	40(%rsi), %rdx
	movq	48(%rsi), %rdi
	movl	56(%rsi), %esi
	movl	%esi, 24(%rax)
	movq	%rdi, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	retq
.Lfunc_end251:
	.size	ChainIterator_getter_second, .Lfunc_end251-ChainIterator_getter_second
                                        # -- End function
	.globl	ChainIterator_setter_second     # -- Begin function ChainIterator_setter_second
	.p2align	4, 0x90
	.type	ChainIterator_setter_second,@function
ChainIterator_setter_second:            # @ChainIterator_setter_second
# %bb.0:
	movq	%rsi, 32(%rdi)
	movq	%rdx, 40(%rdi)
	movq	%rcx, 48(%rdi)
	movl	%r8d, 56(%rdi)
	retq
.Lfunc_end252:
	.size	ChainIterator_setter_second, .Lfunc_end252-ChainIterator_setter_second
                                        # -- End function
	.globl	ChainIterator_getter_first      # -- Begin function ChainIterator_getter_first
	.p2align	4, 0x90
	.type	ChainIterator_getter_first,@function
ChainIterator_getter_first:             # @ChainIterator_getter_first
# %bb.0:
	movq	%rdi, %rax
	movq	(%rsi), %rcx
	movq	8(%rsi), %rdx
	movq	16(%rsi), %rdi
	movl	24(%rsi), %esi
	movl	%esi, 24(%rax)
	movq	%rdi, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	retq
.Lfunc_end253:
	.size	ChainIterator_getter_first, .Lfunc_end253-ChainIterator_getter_first
                                        # -- End function
	.globl	ChainIterator_setter_first      # -- Begin function ChainIterator_setter_first
	.p2align	4, 0x90
	.type	ChainIterator_setter_first,@function
ChainIterator_setter_first:             # @ChainIterator_setter_first
# %bb.0:
	movq	%rsi, (%rdi)
	movq	%rdx, 8(%rdi)
	movq	%rcx, 16(%rdi)
	movl	%r8d, 24(%rdi)
	retq
.Lfunc_end254:
	.size	ChainIterator_setter_first, .Lfunc_end254-ChainIterator_setter_first
                                        # -- End function
	.globl	ChainIterable_getter_second     # -- Begin function ChainIterable_getter_second
	.p2align	4, 0x90
	.type	ChainIterable_getter_second,@function
ChainIterable_getter_second:            # @ChainIterable_getter_second
# %bb.0:
	movq	%rdi, %rax
	movq	32(%rsi), %rcx
	movq	40(%rsi), %rdx
	movq	48(%rsi), %rdi
	movl	56(%rsi), %esi
	movl	%esi, 24(%rax)
	movq	%rdi, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	retq
.Lfunc_end255:
	.size	ChainIterable_getter_second, .Lfunc_end255-ChainIterable_getter_second
                                        # -- End function
	.globl	ChainIterable_setter_second     # -- Begin function ChainIterable_setter_second
	.p2align	4, 0x90
	.type	ChainIterable_setter_second,@function
ChainIterable_setter_second:            # @ChainIterable_setter_second
# %bb.0:
	movq	%rsi, 32(%rdi)
	movq	%rdx, 40(%rdi)
	movq	%rcx, 48(%rdi)
	movl	%r8d, 56(%rdi)
	retq
.Lfunc_end256:
	.size	ChainIterable_setter_second, .Lfunc_end256-ChainIterable_setter_second
                                        # -- End function
	.globl	ChainIterable_getter_first      # -- Begin function ChainIterable_getter_first
	.p2align	4, 0x90
	.type	ChainIterable_getter_first,@function
ChainIterable_getter_first:             # @ChainIterable_getter_first
# %bb.0:
	movq	%rdi, %rax
	movq	(%rsi), %rcx
	movq	8(%rsi), %rdx
	movq	16(%rsi), %rdi
	movl	24(%rsi), %esi
	movl	%esi, 24(%rax)
	movq	%rdi, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	retq
.Lfunc_end257:
	.size	ChainIterable_getter_first, .Lfunc_end257-ChainIterable_getter_first
                                        # -- End function
	.globl	ChainIterable_setter_first      # -- Begin function ChainIterable_setter_first
	.p2align	4, 0x90
	.type	ChainIterable_setter_first,@function
ChainIterable_setter_first:             # @ChainIterable_setter_first
# %bb.0:
	movq	%rsi, (%rdi)
	movq	%rdx, 8(%rdi)
	movq	%rcx, 16(%rdi)
	movl	%r8d, 24(%rdi)
	retq
.Lfunc_end258:
	.size	ChainIterable_setter_first, .Lfunc_end258-ChainIterable_setter_first
                                        # -- End function
	.globl	_size_FilterIterable            # -- Begin function _size_FilterIterable
	.p2align	4, 0x90
	.type	_size_FilterIterable,@function
_size_FilterIterable:                   # @_size_FilterIterable
# %bb.0:
	movl	$40, %eax
	movl	$8, %edx
	retq
.Lfunc_end259:
	.size	_size_FilterIterable, .Lfunc_end259-_size_FilterIterable
                                        # -- End function
	.globl	FilterIterable_B_init_iterableIntIterable_fFunctionPtri32_to_Ptri1 # -- Begin function FilterIterable_B_init_iterableIntIterable_fFunctionPtri32_to_Ptri1
	.p2align	4, 0x90
	.type	FilterIterable_B_init_iterableIntIterable_fFunctionPtri32_to_Ptri1,@function
FilterIterable_B_init_iterableIntIterable_fFunctionPtri32_to_Ptri1: # @FilterIterable_B_init_iterableIntIterable_fFunctionPtri32_to_Ptri1
# %bb.0:
	movq	184(%rdi), %rax
	retq
.Lfunc_end260:
	.size	FilterIterable_B_init_iterableIntIterable_fFunctionPtri32_to_Ptri1, .Lfunc_end260-FilterIterable_B_init_iterableIntIterable_fFunctionPtri32_to_Ptri1
                                        # -- End function
	.globl	FilterIterable_B_each_fFunctionPtri32_to_Nothing # -- Begin function FilterIterable_B_each_fFunctionPtri32_to_Nothing
	.p2align	4, 0x90
	.type	FilterIterable_B_each_fFunctionPtri32_to_Nothing,@function
FilterIterable_B_each_fFunctionPtri32_to_Nothing: # @FilterIterable_B_each_fFunctionPtri32_to_Nothing
# %bb.0:
	movq	192(%rdi), %rax
	retq
.Lfunc_end261:
	.size	FilterIterable_B_each_fFunctionPtri32_to_Nothing, .Lfunc_end261-FilterIterable_B_each_fFunctionPtri32_to_Nothing
                                        # -- End function
	.globl	FilterIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32 # -- Begin function FilterIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32
	.p2align	4, 0x90
	.type	FilterIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32,@function
FilterIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32: # @FilterIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32
# %bb.0:
	movq	200(%rdi), %rax
	retq
.Lfunc_end262:
	.size	FilterIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, .Lfunc_end262-FilterIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32
                                        # -- End function
	.globl	FilterIterable_B_all_fFunctionPtri32_to_Ptri1 # -- Begin function FilterIterable_B_all_fFunctionPtri32_to_Ptri1
	.p2align	4, 0x90
	.type	FilterIterable_B_all_fFunctionPtri32_to_Ptri1,@function
FilterIterable_B_all_fFunctionPtri32_to_Ptri1: # @FilterIterable_B_all_fFunctionPtri32_to_Ptri1
# %bb.0:
	movq	208(%rdi), %rax
	retq
.Lfunc_end263:
	.size	FilterIterable_B_all_fFunctionPtri32_to_Ptri1, .Lfunc_end263-FilterIterable_B_all_fFunctionPtri32_to_Ptri1
                                        # -- End function
	.globl	FilterIterable_B_any_fFunctionPtri32_to_Ptri1 # -- Begin function FilterIterable_B_any_fFunctionPtri32_to_Ptri1
	.p2align	4, 0x90
	.type	FilterIterable_B_any_fFunctionPtri32_to_Ptri1,@function
FilterIterable_B_any_fFunctionPtri32_to_Ptri1: # @FilterIterable_B_any_fFunctionPtri32_to_Ptri1
# %bb.0:
	movq	216(%rdi), %rax
	retq
.Lfunc_end264:
	.size	FilterIterable_B_any_fFunctionPtri32_to_Ptri1, .Lfunc_end264-FilterIterable_B_any_fFunctionPtri32_to_Ptri1
                                        # -- End function
	.globl	FilterIterable_B_map_fFunctionPtri32_to_Ptri32 # -- Begin function FilterIterable_B_map_fFunctionPtri32_to_Ptri32
	.p2align	4, 0x90
	.type	FilterIterable_B_map_fFunctionPtri32_to_Ptri32,@function
FilterIterable_B_map_fFunctionPtri32_to_Ptri32: # @FilterIterable_B_map_fFunctionPtri32_to_Ptri32
# %bb.0:
	movq	224(%rdi), %rax
	retq
.Lfunc_end265:
	.size	FilterIterable_B_map_fFunctionPtri32_to_Ptri32, .Lfunc_end265-FilterIterable_B_map_fFunctionPtri32_to_Ptri32
                                        # -- End function
	.globl	FilterIterable_B_filter_fFunctionPtri32_to_Ptri1 # -- Begin function FilterIterable_B_filter_fFunctionPtri32_to_Ptri1
	.p2align	4, 0x90
	.type	FilterIterable_B_filter_fFunctionPtri32_to_Ptri1,@function
FilterIterable_B_filter_fFunctionPtri32_to_Ptri1: # @FilterIterable_B_filter_fFunctionPtri32_to_Ptri1
# %bb.0:
	movq	232(%rdi), %rax
	retq
.Lfunc_end266:
	.size	FilterIterable_B_filter_fFunctionPtri32_to_Ptri1, .Lfunc_end266-FilterIterable_B_filter_fFunctionPtri32_to_Ptri1
                                        # -- End function
	.globl	FilterIterable_B_chain_otherIntIterable # -- Begin function FilterIterable_B_chain_otherIntIterable
	.p2align	4, 0x90
	.type	FilterIterable_B_chain_otherIntIterable,@function
FilterIterable_B_chain_otherIntIterable: # @FilterIterable_B_chain_otherIntIterable
# %bb.0:
	movq	240(%rdi), %rax
	retq
.Lfunc_end267:
	.size	FilterIterable_B_chain_otherIntIterable, .Lfunc_end267-FilterIterable_B_chain_otherIntIterable
                                        # -- End function
	.globl	FilterIterable_B_interleave_otherIntIterable # -- Begin function FilterIterable_B_interleave_otherIntIterable
	.p2align	4, 0x90
	.type	FilterIterable_B_interleave_otherIntIterable,@function
FilterIterable_B_interleave_otherIntIterable: # @FilterIterable_B_interleave_otherIntIterable
# %bb.0:
	movq	248(%rdi), %rax
	retq
.Lfunc_end268:
	.size	FilterIterable_B_interleave_otherIntIterable, .Lfunc_end268-FilterIterable_B_interleave_otherIntIterable
                                        # -- End function
	.globl	FilterIterable_B_zip_otherIntIterable # -- Begin function FilterIterable_B_zip_otherIntIterable
	.p2align	4, 0x90
	.type	FilterIterable_B_zip_otherIntIterable,@function
FilterIterable_B_zip_otherIntIterable:  # @FilterIterable_B_zip_otherIntIterable
# %bb.0:
	movq	256(%rdi), %rax
	retq
.Lfunc_end269:
	.size	FilterIterable_B_zip_otherIntIterable, .Lfunc_end269-FilterIterable_B_zip_otherIntIterable
                                        # -- End function
	.globl	FilterIterable_B_product_otherIntIterable # -- Begin function FilterIterable_B_product_otherIntIterable
	.p2align	4, 0x90
	.type	FilterIterable_B_product_otherIntIterable,@function
FilterIterable_B_product_otherIntIterable: # @FilterIterable_B_product_otherIntIterable
# %bb.0:
	movq	264(%rdi), %rax
	retq
.Lfunc_end270:
	.size	FilterIterable_B_product_otherIntIterable, .Lfunc_end270-FilterIterable_B_product_otherIntIterable
                                        # -- End function
	.globl	FilterIterable_B_iterator_      # -- Begin function FilterIterable_B_iterator_
	.p2align	4, 0x90
	.type	FilterIterable_B_iterator_,@function
FilterIterable_B_iterator_:             # @FilterIterable_B_iterator_
# %bb.0:
	movq	272(%rdi), %rax
	retq
.Lfunc_end271:
	.size	FilterIterable_B_iterator_, .Lfunc_end271-FilterIterable_B_iterator_
                                        # -- End function
	.globl	FilterIterable_init_iterableIntIterable_fFunctionPtri32_to_Ptri1 # -- Begin function FilterIterable_init_iterableIntIterable_fFunctionPtri32_to_Ptri1
	.p2align	4, 0x90
	.type	FilterIterable_init_iterableIntIterable_fFunctionPtri32_to_Ptri1,@function
FilterIterable_init_iterableIntIterable_fFunctionPtri32_to_Ptri1: # @FilterIterable_init_iterableIntIterable_fFunctionPtri32_to_Ptri1
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r12
	.cfi_def_cfa_offset 32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	pushq	%rax
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -40
	.cfi_offset %r12, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rsi, %rbx
	movq	%rdi, %r15
	movq	104(%rsp), %r14
	movq	80(%rsp), %rdx
	movq	88(%rsp), %rcx
	movq	72(%rsp), %rsi
	movq	40(%rdi), %rax
	movabsq	$8498466713076104350, %rdi      # imm = 0x75F09E72E061FC9E
	imulq	8(%r15), %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%r15), %r8
	movslq	(%rax,%r8,4), %r12
	movq	40(%rsi), %rax
	movabsq	$-7984962120415158575, %rdi     # imm = 0x912FB741F3B45ED1
	imulq	8(%rsi), %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%rsi), %r8
	movl	(%rax,%r8,4), %r8d
	movq	(%r15,%r12,8), %rax
	movq	%rbx, %rdi
	callq	*8(%rax)
	movq	8(%r15,%r12,8), %rax
	movq	8(%rax), %rax
	movq	%rbx, %rdi
	movq	%r14, %rsi
	addq	$8, %rsp
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	jmpq	*%rax                           # TAILCALL
.Lfunc_end272:
	.size	FilterIterable_init_iterableIntIterable_fFunctionPtri32_to_Ptri1, .Lfunc_end272-FilterIterable_init_iterableIntIterable_fFunctionPtri32_to_Ptri1
	.cfi_endproc
                                        # -- End function
	.globl	FilterIterable_iterator_        # -- Begin function FilterIterable_iterator_
	.p2align	4, 0x90
	.type	FilterIterable_iterator_,@function
FilterIterable_iterator_:               # @FilterIterable_iterator_
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$248, %rsp
	.cfi_def_cfa_offset 304
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rdx, 24(%rsp)                  # 8-byte Spill
	movq	%rsi, %r15
	movq	%rdi, 48(%rsp)                  # 8-byte Spill
	movq	40(%rsi), %rax
	movabsq	$8498466713076104350, %rcx      # imm = 0x75F09E72E061FC9E
	imulq	8(%rsi), %rcx
	movq	%rcx, %rsi
	shrq	$32, %rsi
	xorq	%rcx, %rsi
	andq	16(%r15), %rsi
	movslq	(%rax,%rsi,4), %rax
	movq	%rax, 16(%rsp)                  # 8-byte Spill
	movq	(%r15,%rax,8), %rax
	leaq	152(%rsp), %rdi
	movq	%rdx, %rsi
	callq	*(%rax)
	movslq	176(%rsp), %r13
	movq	168(%rsp), %rbp
	movq	152(%rsp), %r12
	movq	160(%rsp), %rbx
	leaq	8(%rsp), %r14
	movq	%r12, %rdi
	movq	%rbx, %rsi
	movq	%rbp, %rdx
	movl	%r13d, %ecx
	movq	%r14, %r8
	callq	*80(%r12,%r13,8)
	leaq	216(%rsp), %rdi
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	%rbp, %rcx
	movl	%r13d, %r8d
	movq	%r12, %r9
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	16(%rsp), %r14                  # 8-byte Reload
	movq	8(%r15,%r14,8), %rax
	movq	24(%rsp), %rbx                  # 8-byte Reload
	movq	%rbx, %rdi
	callq	*(%rax)
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	movl	$40, %edi
	callq	bump_malloc_inner@PLT
	movq	FilterIterator@GOTPCREL(%rip), %rcx
	movq	%rcx, 56(%rsp)
	movq	%rax, 64(%rsp)
	movl	$9, 80(%rsp)
	movq	(%r15,%r14,8), %rax
	leaq	120(%rsp), %rdi
	movq	%rbx, %rsi
	callq	*(%rax)
	movslq	144(%rsp), %rbx
	movq	136(%rsp), %r12
	movq	120(%rsp), %r13
	movq	128(%rsp), %rbp
	movq	%r13, %rdi
	movq	%rbp, %rsi
	movq	%r12, %rdx
	movl	%ebx, %ecx
	leaq	8(%rsp), %r14
	movq	%r14, %r8
	callq	*80(%r13,%rbx,8)
	leaq	184(%rsp), %rdi
	movq	%r13, %rsi
	movq	%rbp, %rdx
	movq	%r12, %rcx
	movl	%ebx, %r8d
	movq	%r13, %r9
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	200(%rsp), %rax
	movq	%rax, 40(%rsp)                  # 8-byte Spill
	movq	184(%rsp), %rbx
	movq	192(%rsp), %rax
	movq	%rax, 32(%rsp)                  # 8-byte Spill
	movq	16(%rsp), %rax                  # 8-byte Reload
	movq	8(%r15,%rax,8), %rax
	movq	24(%rsp), %rdi                  # 8-byte Reload
	callq	*(%rax)
	movq	%rax, 16(%rsp)                  # 8-byte Spill
	movq	40(%rbx), %rax
	movabsq	$-933084275656658555, %rcx      # imm = 0xF30D04CB83FB7185
	imulq	8(%rbx), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rbx), %rdx
	movl	(%rax,%rdx,4), %r13d
	movq	56(%rsp), %r14
	movq	64(%rsp), %r15
	movq	72(%rsp), %r12
	movslq	80(%rsp), %rbp
	movq	_parameterization_IntIterator@GOTPCREL(%rip), %rax
	movq	%rax, 104(%rsp)
	movq	_parameterization_FunctionPtri32_to_Ptri1@GOTPCREL(%rip), %rax
	movq	%rax, 112(%rsp)
	movq	16(%r14,%rbp,8), %rax
	movq	%rbx, 88(%rsp)
	movq	function_typ@GOTPCREL(%rip), %rcx
	movq	%rcx, 96(%rsp)
	leaq	88(%rsp), %r8
	movq	%r14, %rdi
	movq	%r15, %rsi
	movq	%r12, %rdx
	movl	%ebp, %ecx
	callq	*%rax
	leaq	104(%rsp), %r10
	movq	%r14, %rdi
	movq	%r15, %rsi
	movq	%r12, %rdx
	movl	%ebp, %ecx
	movq	%r14, %r8
	movq	%r15, %r9
	pushq	16(%rsp)                        # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	56(%rsp)                        # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	56(%rsp)                        # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$64, %rsp
	.cfi_adjust_cfa_offset -64
	movq	40(%r14), %rax
	movabsq	$8673632051301757104, %rcx      # imm = 0x785EEE655248B0B0
	imulq	8(%r14), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%r14), %rdx
	movl	(%rax,%rdx,4), %ecx
	movq	48(%rsp), %rax                  # 8-byte Reload
	movq	%r12, 16(%rax)
	movq	%r15, 8(%rax)
	movq	%r14, (%rax)
	movl	%ecx, 24(%rax)
	addq	$248, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end273:
	.size	FilterIterable_iterator_, .Lfunc_end273-FilterIterable_iterator_
	.cfi_endproc
                                        # -- End function
	.globl	_size_FilterIterator            # -- Begin function _size_FilterIterator
	.p2align	4, 0x90
	.type	_size_FilterIterator,@function
_size_FilterIterator:                   # @_size_FilterIterator
# %bb.0:
	movl	$40, %eax
	movl	$8, %edx
	retq
.Lfunc_end274:
	.size	_size_FilterIterator, .Lfunc_end274-_size_FilterIterator
                                        # -- End function
	.globl	FilterIterator_B_init_iteratorIntIterator_fFunctionPtri32_to_Ptri1 # -- Begin function FilterIterator_B_init_iteratorIntIterator_fFunctionPtri32_to_Ptri1
	.p2align	4, 0x90
	.type	FilterIterator_B_init_iteratorIntIterator_fFunctionPtri32_to_Ptri1,@function
FilterIterator_B_init_iteratorIntIterator_fFunctionPtri32_to_Ptri1: # @FilterIterator_B_init_iteratorIntIterator_fFunctionPtri32_to_Ptri1
# %bb.0:
	movq	104(%rdi), %rax
	retq
.Lfunc_end275:
	.size	FilterIterator_B_init_iteratorIntIterator_fFunctionPtri32_to_Ptri1, .Lfunc_end275-FilterIterator_B_init_iteratorIntIterator_fFunctionPtri32_to_Ptri1
                                        # -- End function
	.globl	FilterIterator_B_next_          # -- Begin function FilterIterator_B_next_
	.p2align	4, 0x90
	.type	FilterIterator_B_next_,@function
FilterIterator_B_next_:                 # @FilterIterator_B_next_
# %bb.0:
	movq	112(%rdi), %rax
	retq
.Lfunc_end276:
	.size	FilterIterator_B_next_, .Lfunc_end276-FilterIterator_B_next_
                                        # -- End function
	.globl	FilterIterator_init_iteratorIntIterator_fFunctionPtri32_to_Ptri1 # -- Begin function FilterIterator_init_iteratorIntIterator_fFunctionPtri32_to_Ptri1
	.p2align	4, 0x90
	.type	FilterIterator_init_iteratorIntIterator_fFunctionPtri32_to_Ptri1,@function
FilterIterator_init_iteratorIntIterator_fFunctionPtri32_to_Ptri1: # @FilterIterator_init_iteratorIntIterator_fFunctionPtri32_to_Ptri1
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r12
	.cfi_def_cfa_offset 32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	pushq	%rax
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -40
	.cfi_offset %r12, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rsi, %rbx
	movq	%rdi, %r15
	movq	104(%rsp), %r14
	movq	80(%rsp), %rdx
	movq	88(%rsp), %rcx
	movq	72(%rsp), %rsi
	movq	40(%rdi), %rax
	movabsq	$-1221365496900303883, %rdi     # imm = 0xEF0CD68D3856C3F5
	imulq	8(%r15), %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%r15), %r8
	movslq	(%rax,%r8,4), %r12
	movq	40(%rsi), %rax
	movabsq	$-933084275656658555, %rdi      # imm = 0xF30D04CB83FB7185
	imulq	8(%rsi), %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%rsi), %r8
	movl	(%rax,%r8,4), %r8d
	movq	(%r15,%r12,8), %rax
	movq	%rbx, %rdi
	callq	*8(%rax)
	movq	8(%r15,%r12,8), %rax
	movq	8(%rax), %rax
	movq	%rbx, %rdi
	movq	%r14, %rsi
	addq	$8, %rsp
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	jmpq	*%rax                           # TAILCALL
.Lfunc_end277:
	.size	FilterIterator_init_iteratorIntIterator_fFunctionPtri32_to_Ptri1, .Lfunc_end277-FilterIterator_init_iteratorIntIterator_fFunctionPtri32_to_Ptri1
	.cfi_endproc
                                        # -- End function
	.globl	FilterIterator_next_            # -- Begin function FilterIterator_next_
	.p2align	4, 0x90
	.type	FilterIterator_next_,@function
FilterIterator_next_:                   # @FilterIterator_next_
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$104, %rsp
	.cfi_def_cfa_offset 160
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	40(%rdi), %rax
	movabsq	$-1221365496900303883, %rcx     # imm = 0xEF0CD68D3856C3F5
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %rbx
	movq	%rdi, 24(%rsp)                  # 8-byte Spill
	movq	(%rdi,%rbx,8), %rax
	leaq	72(%rsp), %rdi
	movq	%rsi, 32(%rsp)                  # 8-byte Spill
	callq	*(%rax)
	movslq	96(%rsp), %r12
	movq	88(%rsp), %r13
	movq	72(%rsp), %rbp
	movq	80(%rsp), %r15
	leaq	8(%rsp), %r14
	movq	%rbp, %rdi
	movq	%r15, %rsi
	movq	%r13, %rdx
	movl	%r12d, %ecx
	movq	%r14, %r8
	callq	*(%rbp,%r12,8)
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	movq	%rbp, %rdi
	movq	%r15, %rsi
	movq	%r13, %rdx
	movl	%r12d, %ecx
	movq	%rbp, %r8
	movq	%r15, %r9
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movl	%edx, %ebp
	movq	nil_typ@GOTPCREL(%rip), %rcx
	movq	%rcx, 16(%rsp)                  # 8-byte Spill
	cmpq	%rcx, %rax
	sete	%cl
	testq	%rax, %rax
	sete	%al
	orb	%cl, %al
	jne	.LBB278_6
# %bb.1:                                # %.lr.ph
	movq	nil_typ@GOTPCREL(%rip), %rax
	movq	%rax, 16(%rsp)                  # 8-byte Spill
	.p2align	4, 0x90
.LBB278_2:                              # =>This Inner Loop Header: Depth=1
	movq	24(%rsp), %r12                  # 8-byte Reload
	movq	8(%r12,%rbx,8), %rax
	movq	32(%rsp), %r15                  # 8-byte Reload
	movq	%r15, %rdi
	callq	*(%rax)
	movl	%ebp, %edi
	callq	*%rax
	testb	$1, %al
	jne	.LBB278_3
# %bb.4:                                #   in Loop: Header=BB278_2 Depth=1
	movq	%rbx, %r14
	movq	(%r12,%rbx,8), %rax
	leaq	40(%rsp), %rdi
	movq	%r15, %rsi
	callq	*(%rax)
	movslq	64(%rsp), %r15
	movq	56(%rsp), %rbp
	movq	40(%rsp), %r13
	movq	48(%rsp), %r12
	movq	%r13, %rdi
	movq	%r12, %rsi
	movq	%rbp, %rdx
	movl	%r15d, %ecx
	leaq	8(%rsp), %rbx
	movq	%rbx, %r8
	callq	*(%r13,%r15,8)
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	movq	%r13, %rdi
	movq	%r12, %rsi
	movq	%rbp, %rdx
	movl	%r15d, %ecx
	movq	%r13, %r8
	movq	%r12, %r9
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movl	%edx, %ebp
	cmpq	nil_typ@GOTPCREL(%rip), %rax
	je	.LBB278_6
# %bb.5:                                #   in Loop: Header=BB278_2 Depth=1
	testq	%rax, %rax
	movq	%r14, %rbx
	jne	.LBB278_2
	jmp	.LBB278_6
.LBB278_3:
	movq	i32_typ@GOTPCREL(%rip), %rax
	movq	%rax, 16(%rsp)                  # 8-byte Spill
.LBB278_6:                              # %._crit_edge
	movq	16(%rsp), %rax                  # 8-byte Reload
	movl	%ebp, %edx
	addq	$104, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end278:
	.size	FilterIterator_next_, .Lfunc_end278-FilterIterator_next_
	.cfi_endproc
                                        # -- End function
	.globl	FilterIterator_getter_f         # -- Begin function FilterIterator_getter_f
	.p2align	4, 0x90
	.type	FilterIterator_getter_f,@function
FilterIterator_getter_f:                # @FilterIterator_getter_f
# %bb.0:
	movq	32(%rdi), %rax
	retq
.Lfunc_end279:
	.size	FilterIterator_getter_f, .Lfunc_end279-FilterIterator_getter_f
                                        # -- End function
	.globl	FilterIterator_setter_f         # -- Begin function FilterIterator_setter_f
	.p2align	4, 0x90
	.type	FilterIterator_setter_f,@function
FilterIterator_setter_f:                # @FilterIterator_setter_f
# %bb.0:
	movq	%rsi, 32(%rdi)
	retq
.Lfunc_end280:
	.size	FilterIterator_setter_f, .Lfunc_end280-FilterIterator_setter_f
                                        # -- End function
	.globl	FilterIterator_getter_iterator  # -- Begin function FilterIterator_getter_iterator
	.p2align	4, 0x90
	.type	FilterIterator_getter_iterator,@function
FilterIterator_getter_iterator:         # @FilterIterator_getter_iterator
# %bb.0:
	movq	%rdi, %rax
	movq	(%rsi), %rcx
	movq	8(%rsi), %rdx
	movq	16(%rsi), %rdi
	movl	24(%rsi), %esi
	movl	%esi, 24(%rax)
	movq	%rdi, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	retq
.Lfunc_end281:
	.size	FilterIterator_getter_iterator, .Lfunc_end281-FilterIterator_getter_iterator
                                        # -- End function
	.globl	FilterIterator_setter_iterator  # -- Begin function FilterIterator_setter_iterator
	.p2align	4, 0x90
	.type	FilterIterator_setter_iterator,@function
FilterIterator_setter_iterator:         # @FilterIterator_setter_iterator
# %bb.0:
	movq	%rsi, (%rdi)
	movq	%rdx, 8(%rdi)
	movq	%rcx, 16(%rdi)
	movl	%r8d, 24(%rdi)
	retq
.Lfunc_end282:
	.size	FilterIterator_setter_iterator, .Lfunc_end282-FilterIterator_setter_iterator
                                        # -- End function
	.globl	FilterIterable_getter_f         # -- Begin function FilterIterable_getter_f
	.p2align	4, 0x90
	.type	FilterIterable_getter_f,@function
FilterIterable_getter_f:                # @FilterIterable_getter_f
# %bb.0:
	movq	32(%rdi), %rax
	retq
.Lfunc_end283:
	.size	FilterIterable_getter_f, .Lfunc_end283-FilterIterable_getter_f
                                        # -- End function
	.globl	FilterIterable_setter_f         # -- Begin function FilterIterable_setter_f
	.p2align	4, 0x90
	.type	FilterIterable_setter_f,@function
FilterIterable_setter_f:                # @FilterIterable_setter_f
# %bb.0:
	movq	%rsi, 32(%rdi)
	retq
.Lfunc_end284:
	.size	FilterIterable_setter_f, .Lfunc_end284-FilterIterable_setter_f
                                        # -- End function
	.globl	FilterIterable_getter_iterable  # -- Begin function FilterIterable_getter_iterable
	.p2align	4, 0x90
	.type	FilterIterable_getter_iterable,@function
FilterIterable_getter_iterable:         # @FilterIterable_getter_iterable
# %bb.0:
	movq	%rdi, %rax
	movq	(%rsi), %rcx
	movq	8(%rsi), %rdx
	movq	16(%rsi), %rdi
	movl	24(%rsi), %esi
	movl	%esi, 24(%rax)
	movq	%rdi, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	retq
.Lfunc_end285:
	.size	FilterIterable_getter_iterable, .Lfunc_end285-FilterIterable_getter_iterable
                                        # -- End function
	.globl	FilterIterable_setter_iterable  # -- Begin function FilterIterable_setter_iterable
	.p2align	4, 0x90
	.type	FilterIterable_setter_iterable,@function
FilterIterable_setter_iterable:         # @FilterIterable_setter_iterable
# %bb.0:
	movq	%rsi, (%rdi)
	movq	%rdx, 8(%rdi)
	movq	%rcx, 16(%rdi)
	movl	%r8d, 24(%rdi)
	retq
.Lfunc_end286:
	.size	FilterIterable_setter_iterable, .Lfunc_end286-FilterIterable_setter_iterable
                                        # -- End function
	.globl	MapIterable_getter_f            # -- Begin function MapIterable_getter_f
	.p2align	4, 0x90
	.type	MapIterable_getter_f,@function
MapIterable_getter_f:                   # @MapIterable_getter_f
# %bb.0:
	movq	32(%rdi), %rax
	retq
.Lfunc_end287:
	.size	MapIterable_getter_f, .Lfunc_end287-MapIterable_getter_f
                                        # -- End function
	.globl	MapIterable_setter_f            # -- Begin function MapIterable_setter_f
	.p2align	4, 0x90
	.type	MapIterable_setter_f,@function
MapIterable_setter_f:                   # @MapIterable_setter_f
# %bb.0:
	movq	%rsi, 32(%rdi)
	retq
.Lfunc_end288:
	.size	MapIterable_setter_f, .Lfunc_end288-MapIterable_setter_f
                                        # -- End function
	.globl	MapIterable_getter_iterable     # -- Begin function MapIterable_getter_iterable
	.p2align	4, 0x90
	.type	MapIterable_getter_iterable,@function
MapIterable_getter_iterable:            # @MapIterable_getter_iterable
# %bb.0:
	movq	%rdi, %rax
	movq	(%rsi), %rcx
	movq	8(%rsi), %rdx
	movq	16(%rsi), %rdi
	movl	24(%rsi), %esi
	movl	%esi, 24(%rax)
	movq	%rdi, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	retq
.Lfunc_end289:
	.size	MapIterable_getter_iterable, .Lfunc_end289-MapIterable_getter_iterable
                                        # -- End function
	.globl	MapIterable_setter_iterable     # -- Begin function MapIterable_setter_iterable
	.p2align	4, 0x90
	.type	MapIterable_setter_iterable,@function
MapIterable_setter_iterable:            # @MapIterable_setter_iterable
# %bb.0:
	movq	%rsi, (%rdi)
	movq	%rdx, 8(%rdi)
	movq	%rcx, 16(%rdi)
	movl	%r8d, 24(%rdi)
	retq
.Lfunc_end290:
	.size	MapIterable_setter_iterable, .Lfunc_end290-MapIterable_setter_iterable
                                        # -- End function
	.globl	_size_Range                     # -- Begin function _size_Range
	.p2align	4, 0x90
	.type	_size_Range,@function
_size_Range:                            # @_size_Range
# %bb.0:
	movl	$12, %eax
	movl	$4, %edx
	retq
.Lfunc_end291:
	.size	_size_Range, .Lfunc_end291-_size_Range
                                        # -- End function
	.globl	Range_B_init_endPtri32          # -- Begin function Range_B_init_endPtri32
	.p2align	4, 0x90
	.type	Range_B_init_endPtri32,@function
Range_B_init_endPtri32:                 # @Range_B_init_endPtri32
# %bb.0:
	movq	208(%rdi), %rax
	retq
.Lfunc_end292:
	.size	Range_B_init_endPtri32, .Lfunc_end292-Range_B_init_endPtri32
                                        # -- End function
	.globl	Range_B_init_startPtri32_endPtri32 # -- Begin function Range_B_init_startPtri32_endPtri32
	.p2align	4, 0x90
	.type	Range_B_init_startPtri32_endPtri32,@function
Range_B_init_startPtri32_endPtri32:     # @Range_B_init_startPtri32_endPtri32
# %bb.0:
	movq	216(%rdi), %rax
	retq
.Lfunc_end293:
	.size	Range_B_init_startPtri32_endPtri32, .Lfunc_end293-Range_B_init_startPtri32_endPtri32
                                        # -- End function
	.globl	Range_B_step_stepPtri32         # -- Begin function Range_B_step_stepPtri32
	.p2align	4, 0x90
	.type	Range_B_step_stepPtri32,@function
Range_B_step_stepPtri32:                # @Range_B_step_stepPtri32
# %bb.0:
	movq	224(%rdi), %rax
	retq
.Lfunc_end294:
	.size	Range_B_step_stepPtri32, .Lfunc_end294-Range_B_step_stepPtri32
                                        # -- End function
	.globl	Range_B_each_fFunctionPtri32_to_Nothing # -- Begin function Range_B_each_fFunctionPtri32_to_Nothing
	.p2align	4, 0x90
	.type	Range_B_each_fFunctionPtri32_to_Nothing,@function
Range_B_each_fFunctionPtri32_to_Nothing: # @Range_B_each_fFunctionPtri32_to_Nothing
# %bb.0:
	movq	232(%rdi), %rax
	retq
.Lfunc_end295:
	.size	Range_B_each_fFunctionPtri32_to_Nothing, .Lfunc_end295-Range_B_each_fFunctionPtri32_to_Nothing
                                        # -- End function
	.globl	Range_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32 # -- Begin function Range_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32
	.p2align	4, 0x90
	.type	Range_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32,@function
Range_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32: # @Range_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32
# %bb.0:
	movq	240(%rdi), %rax
	retq
.Lfunc_end296:
	.size	Range_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, .Lfunc_end296-Range_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32
                                        # -- End function
	.globl	Range_B_all_fFunctionPtri32_to_Ptri1 # -- Begin function Range_B_all_fFunctionPtri32_to_Ptri1
	.p2align	4, 0x90
	.type	Range_B_all_fFunctionPtri32_to_Ptri1,@function
Range_B_all_fFunctionPtri32_to_Ptri1:   # @Range_B_all_fFunctionPtri32_to_Ptri1
# %bb.0:
	movq	248(%rdi), %rax
	retq
.Lfunc_end297:
	.size	Range_B_all_fFunctionPtri32_to_Ptri1, .Lfunc_end297-Range_B_all_fFunctionPtri32_to_Ptri1
                                        # -- End function
	.globl	Range_B_any_fFunctionPtri32_to_Ptri1 # -- Begin function Range_B_any_fFunctionPtri32_to_Ptri1
	.p2align	4, 0x90
	.type	Range_B_any_fFunctionPtri32_to_Ptri1,@function
Range_B_any_fFunctionPtri32_to_Ptri1:   # @Range_B_any_fFunctionPtri32_to_Ptri1
# %bb.0:
	movq	256(%rdi), %rax
	retq
.Lfunc_end298:
	.size	Range_B_any_fFunctionPtri32_to_Ptri1, .Lfunc_end298-Range_B_any_fFunctionPtri32_to_Ptri1
                                        # -- End function
	.globl	Range_B_map_fFunctionPtri32_to_Ptri32 # -- Begin function Range_B_map_fFunctionPtri32_to_Ptri32
	.p2align	4, 0x90
	.type	Range_B_map_fFunctionPtri32_to_Ptri32,@function
Range_B_map_fFunctionPtri32_to_Ptri32:  # @Range_B_map_fFunctionPtri32_to_Ptri32
# %bb.0:
	movq	264(%rdi), %rax
	retq
.Lfunc_end299:
	.size	Range_B_map_fFunctionPtri32_to_Ptri32, .Lfunc_end299-Range_B_map_fFunctionPtri32_to_Ptri32
                                        # -- End function
	.globl	Range_B_filter_fFunctionPtri32_to_Ptri1 # -- Begin function Range_B_filter_fFunctionPtri32_to_Ptri1
	.p2align	4, 0x90
	.type	Range_B_filter_fFunctionPtri32_to_Ptri1,@function
Range_B_filter_fFunctionPtri32_to_Ptri1: # @Range_B_filter_fFunctionPtri32_to_Ptri1
# %bb.0:
	movq	272(%rdi), %rax
	retq
.Lfunc_end300:
	.size	Range_B_filter_fFunctionPtri32_to_Ptri1, .Lfunc_end300-Range_B_filter_fFunctionPtri32_to_Ptri1
                                        # -- End function
	.globl	Range_B_chain_otherIntIterable  # -- Begin function Range_B_chain_otherIntIterable
	.p2align	4, 0x90
	.type	Range_B_chain_otherIntIterable,@function
Range_B_chain_otherIntIterable:         # @Range_B_chain_otherIntIterable
# %bb.0:
	movq	280(%rdi), %rax
	retq
.Lfunc_end301:
	.size	Range_B_chain_otherIntIterable, .Lfunc_end301-Range_B_chain_otherIntIterable
                                        # -- End function
	.globl	Range_B_interleave_otherIntIterable # -- Begin function Range_B_interleave_otherIntIterable
	.p2align	4, 0x90
	.type	Range_B_interleave_otherIntIterable,@function
Range_B_interleave_otherIntIterable:    # @Range_B_interleave_otherIntIterable
# %bb.0:
	movq	288(%rdi), %rax
	retq
.Lfunc_end302:
	.size	Range_B_interleave_otherIntIterable, .Lfunc_end302-Range_B_interleave_otherIntIterable
                                        # -- End function
	.globl	Range_B_zip_otherIntIterable    # -- Begin function Range_B_zip_otherIntIterable
	.p2align	4, 0x90
	.type	Range_B_zip_otherIntIterable,@function
Range_B_zip_otherIntIterable:           # @Range_B_zip_otherIntIterable
# %bb.0:
	movq	296(%rdi), %rax
	retq
.Lfunc_end303:
	.size	Range_B_zip_otherIntIterable, .Lfunc_end303-Range_B_zip_otherIntIterable
                                        # -- End function
	.globl	Range_B_product_otherIntIterable # -- Begin function Range_B_product_otherIntIterable
	.p2align	4, 0x90
	.type	Range_B_product_otherIntIterable,@function
Range_B_product_otherIntIterable:       # @Range_B_product_otherIntIterable
# %bb.0:
	movq	304(%rdi), %rax
	retq
.Lfunc_end304:
	.size	Range_B_product_otherIntIterable, .Lfunc_end304-Range_B_product_otherIntIterable
                                        # -- End function
	.globl	Range_B_iterator_               # -- Begin function Range_B_iterator_
	.p2align	4, 0x90
	.type	Range_B_iterator_,@function
Range_B_iterator_:                      # @Range_B_iterator_
# %bb.0:
	movq	312(%rdi), %rax
	retq
.Lfunc_end305:
	.size	Range_B_iterator_, .Lfunc_end305-Range_B_iterator_
                                        # -- End function
	.globl	Range_init_endPtri32            # -- Begin function Range_init_endPtri32
	.p2align	4, 0x90
	.type	Range_init_endPtri32,@function
Range_init_endPtri32:                   # @Range_init_endPtri32
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movl	56(%rsp), %esi
	movq	40(%rdi), %rax
	movabsq	$5490049236840671069, %rcx      # imm = 0x4C3092B1814AE75D
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %r15
	movq	8(%rdi,%r15,8), %rax
	movq	%rbx, %rdi
	callq	*8(%rax)
	movq	(%r14,%r15,8), %rax
	movq	%rbx, %rdi
	xorl	%esi, %esi
	callq	*8(%rax)
	movq	16(%r14,%r15,8), %rax
	movq	8(%rax), %rax
	movq	%rbx, %rdi
	movl	$1, %esi
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	jmpq	*%rax                           # TAILCALL
.Lfunc_end306:
	.size	Range_init_endPtri32, .Lfunc_end306-Range_init_endPtri32
	.cfi_endproc
                                        # -- End function
	.globl	Range_init_startPtri32_endPtri32 # -- Begin function Range_init_startPtri32_endPtri32
	.p2align	4, 0x90
	.type	Range_init_startPtri32_endPtri32,@function
Range_init_startPtri32_endPtri32:       # @Range_init_startPtri32_endPtri32
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	pushq	%rax
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movl	80(%rsp), %ebp
	movl	72(%rsp), %esi
	movq	40(%rdi), %rax
	movabsq	$5490049236840671069, %rcx      # imm = 0x4C3092B1814AE75D
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %r15
	movq	(%rdi,%r15,8), %rax
	movq	%rbx, %rdi
	callq	*8(%rax)
	movq	8(%r14,%r15,8), %rax
	movq	%rbx, %rdi
	movl	%ebp, %esi
	callq	*8(%rax)
	movq	16(%r14,%r15,8), %rax
	movq	8(%rax), %rax
	movq	%rbx, %rdi
	movl	$1, %esi
	addq	$8, %rsp
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	jmpq	*%rax                           # TAILCALL
.Lfunc_end307:
	.size	Range_init_startPtri32_endPtri32, .Lfunc_end307-Range_init_startPtri32_endPtri32
	.cfi_endproc
                                        # -- End function
	.globl	Range_step_stepPtri32           # -- Begin function Range_step_stepPtri32
	.p2align	4, 0x90
	.type	Range_step_stepPtri32,@function
Range_step_stepPtri32:                  # @Range_step_stepPtri32
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r13
	.cfi_def_cfa_offset 32
	pushq	%r12
	.cfi_def_cfa_offset 40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r13, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rcx, %r12
	movq	%rdx, %r15
	movq	%rsi, %r14
	movq	%rdi, %rbx
	movl	80(%rsp), %esi
	movq	40(%r14), %rax
	movabsq	$5490049236840671069, %r13      # imm = 0x4C3092B1814AE75D
	movq	8(%r14), %rcx
	imulq	%r13, %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%r14), %rdx
	movslq	(%rax,%rdx,4), %rax
	movq	16(%r14,%rax,8), %rax
	movq	%r15, %rdi
	callq	*8(%rax)
	movq	40(%r14), %rax
	imulq	8(%r14), %r13
	movq	%r13, %rcx
	shrq	$32, %rcx
	xorq	%r13, %rcx
	andq	16(%r14), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	%r12, 16(%rbx)
	movq	%r15, 8(%rbx)
	movq	%r14, (%rbx)
	movl	%eax, 24(%rbx)
	movq	%rbx, %rax
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end308:
	.size	Range_step_stepPtri32, .Lfunc_end308-Range_step_stepPtri32
	.cfi_endproc
                                        # -- End function
	.globl	Range_iterator_                 # -- Begin function Range_iterator_
	.p2align	4, 0x90
	.type	Range_iterator_,@function
Range_iterator_:                        # @Range_iterator_
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	pushq	%rax
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %rbx
	movq	40(%rsi), %rax
	movabsq	$5490049236840671069, %rcx      # imm = 0x4C3092B1814AE75D
	imulq	8(%rsi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rsi), %rdx
	movslq	(%rax,%rdx,4), %rbp
	movq	(%rsi,%rbp,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movq	8(%r15,%rbp,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movq	16(%r15,%rbp,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	movl	$12, %edi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r12
	movq	(%r15,%rbp,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movl	%eax, 4(%rsp)                   # 4-byte Spill
	movq	8(%r15,%rbp,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movl	%eax, %r13d
	movq	16(%r15,%rbp,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movq	RangeIterator@GOTPCREL(%rip), %rcx
	movl	4(%rsp), %edx                   # 4-byte Reload
	movl	%edx, (%r12)
	movl	%r13d, 4(%r12)
	movl	%eax, 8(%r12)
	movq	%rcx, (%rbx)
	movq	%r12, 8(%rbx)
	movl	$18, 24(%rbx)
	movq	%rbx, %rax
	addq	$8, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end309:
	.size	Range_iterator_, .Lfunc_end309-Range_iterator_
	.cfi_endproc
                                        # -- End function
	.globl	_size_RangeIterator             # -- Begin function _size_RangeIterator
	.p2align	4, 0x90
	.type	_size_RangeIterator,@function
_size_RangeIterator:                    # @_size_RangeIterator
# %bb.0:
	movl	$12, %eax
	movl	$4, %edx
	retq
.Lfunc_end310:
	.size	_size_RangeIterator, .Lfunc_end310-_size_RangeIterator
                                        # -- End function
	.globl	RangeIterator_B_init_counterPtri32_endPtri32_stepPtri32 # -- Begin function RangeIterator_B_init_counterPtri32_endPtri32_stepPtri32
	.p2align	4, 0x90
	.type	RangeIterator_B_init_counterPtri32_endPtri32_stepPtri32,@function
RangeIterator_B_init_counterPtri32_endPtri32_stepPtri32: # @RangeIterator_B_init_counterPtri32_endPtri32_stepPtri32
# %bb.0:
	movq	112(%rdi), %rax
	retq
.Lfunc_end311:
	.size	RangeIterator_B_init_counterPtri32_endPtri32_stepPtri32, .Lfunc_end311-RangeIterator_B_init_counterPtri32_endPtri32_stepPtri32
                                        # -- End function
	.globl	RangeIterator_B_next_           # -- Begin function RangeIterator_B_next_
	.p2align	4, 0x90
	.type	RangeIterator_B_next_,@function
RangeIterator_B_next_:                  # @RangeIterator_B_next_
# %bb.0:
	movq	120(%rdi), %rax
	retq
.Lfunc_end312:
	.size	RangeIterator_B_next_, .Lfunc_end312-RangeIterator_B_next_
                                        # -- End function
	.globl	RangeIterator_init_counterPtri32_endPtri32_stepPtri32 # -- Begin function RangeIterator_init_counterPtri32_endPtri32_stepPtri32
	.p2align	4, 0x90
	.type	RangeIterator_init_counterPtri32_endPtri32_stepPtri32,@function
RangeIterator_init_counterPtri32_endPtri32_stepPtri32: # @RangeIterator_init_counterPtri32_endPtri32_stepPtri32
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r12
	.cfi_def_cfa_offset 40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movl	88(%rsp), %ebp
	movl	80(%rsp), %r15d
	movl	72(%rsp), %esi
	movq	40(%rdi), %rax
	movabsq	$-913562485944406675, %rcx      # imm = 0xF3525FC261292D6D
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %r12
	movq	(%rdi,%r12,8), %rax
	movq	%rbx, %rdi
	callq	*8(%rax)
	movq	8(%r14,%r12,8), %rax
	movq	%rbx, %rdi
	movl	%r15d, %esi
	callq	*8(%rax)
	movq	16(%r14,%r12,8), %rax
	movq	8(%rax), %rax
	movq	%rbx, %rdi
	movl	%ebp, %esi
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	jmpq	*%rax                           # TAILCALL
.Lfunc_end313:
	.size	RangeIterator_init_counterPtri32_endPtri32_stepPtri32, .Lfunc_end313-RangeIterator_init_counterPtri32_endPtri32_stepPtri32
	.cfi_endproc
                                        # -- End function
	.globl	RangeIterator_next_             # -- Begin function RangeIterator_next_
	.p2align	4, 0x90
	.type	RangeIterator_next_,@function
RangeIterator_next_:                    # @RangeIterator_next_
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	pushq	%rax
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movq	40(%rdi), %rax
	movabsq	$-913562485944406675, %rcx      # imm = 0xF3525FC261292D6D
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %r15
	movq	(%rdi,%r15,8), %rax
	movq	%rsi, %rdi
	callq	*(%rax)
	movl	%eax, %ebp
	movq	8(%r14,%r15,8), %rax
	movq	%rbx, %rdi
	callq	*(%rax)
	cmpl	%eax, %ebp
	jle	.LBB314_2
# %bb.1:
	movq	nil_typ@GOTPCREL(%rip), %rax
                                        # implicit-def: $ebp
	jmp	.LBB314_3
.LBB314_2:
	movq	(%r14,%r15,8), %rax
	movq	%rbx, %rdi
	callq	*(%rax)
	movl	%eax, %ebp
	movq	16(%r14,%r15,8), %rax
	movq	%rbx, %rdi
	callq	*(%rax)
	addl	%eax, %ebp
	movq	(%r14,%r15,8), %rax
	movq	%rbx, %rdi
	movl	%ebp, %esi
	callq	*8(%rax)
	movq	(%r14,%r15,8), %rax
	movq	%rbx, %rdi
	callq	*(%rax)
	movl	%eax, %ebp
	movq	16(%r14,%r15,8), %rax
	movq	%rbx, %rdi
	callq	*(%rax)
	subl	%eax, %ebp
	movq	i32_typ@GOTPCREL(%rip), %rax
.LBB314_3:
	movl	%ebp, %edx
	addq	$8, %rsp
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end314:
	.size	RangeIterator_next_, .Lfunc_end314-RangeIterator_next_
	.cfi_endproc
                                        # -- End function
	.globl	RangeIterator_getter_step       # -- Begin function RangeIterator_getter_step
	.p2align	4, 0x90
	.type	RangeIterator_getter_step,@function
RangeIterator_getter_step:              # @RangeIterator_getter_step
# %bb.0:
	movl	8(%rdi), %eax
	retq
.Lfunc_end315:
	.size	RangeIterator_getter_step, .Lfunc_end315-RangeIterator_getter_step
                                        # -- End function
	.globl	RangeIterator_setter_step       # -- Begin function RangeIterator_setter_step
	.p2align	4, 0x90
	.type	RangeIterator_setter_step,@function
RangeIterator_setter_step:              # @RangeIterator_setter_step
# %bb.0:
	movl	%esi, 8(%rdi)
	retq
.Lfunc_end316:
	.size	RangeIterator_setter_step, .Lfunc_end316-RangeIterator_setter_step
                                        # -- End function
	.globl	RangeIterator_getter_end        # -- Begin function RangeIterator_getter_end
	.p2align	4, 0x90
	.type	RangeIterator_getter_end,@function
RangeIterator_getter_end:               # @RangeIterator_getter_end
# %bb.0:
	movl	4(%rdi), %eax
	retq
.Lfunc_end317:
	.size	RangeIterator_getter_end, .Lfunc_end317-RangeIterator_getter_end
                                        # -- End function
	.globl	RangeIterator_setter_end        # -- Begin function RangeIterator_setter_end
	.p2align	4, 0x90
	.type	RangeIterator_setter_end,@function
RangeIterator_setter_end:               # @RangeIterator_setter_end
# %bb.0:
	movl	%esi, 4(%rdi)
	retq
.Lfunc_end318:
	.size	RangeIterator_setter_end, .Lfunc_end318-RangeIterator_setter_end
                                        # -- End function
	.globl	RangeIterator_getter_counter    # -- Begin function RangeIterator_getter_counter
	.p2align	4, 0x90
	.type	RangeIterator_getter_counter,@function
RangeIterator_getter_counter:           # @RangeIterator_getter_counter
# %bb.0:
	movl	(%rdi), %eax
	retq
.Lfunc_end319:
	.size	RangeIterator_getter_counter, .Lfunc_end319-RangeIterator_getter_counter
                                        # -- End function
	.globl	RangeIterator_setter_counter    # -- Begin function RangeIterator_setter_counter
	.p2align	4, 0x90
	.type	RangeIterator_setter_counter,@function
RangeIterator_setter_counter:           # @RangeIterator_setter_counter
# %bb.0:
	movl	%esi, (%rdi)
	retq
.Lfunc_end320:
	.size	RangeIterator_setter_counter, .Lfunc_end320-RangeIterator_setter_counter
                                        # -- End function
	.globl	Range_getter_step               # -- Begin function Range_getter_step
	.p2align	4, 0x90
	.type	Range_getter_step,@function
Range_getter_step:                      # @Range_getter_step
# %bb.0:
	movl	8(%rdi), %eax
	retq
.Lfunc_end321:
	.size	Range_getter_step, .Lfunc_end321-Range_getter_step
                                        # -- End function
	.globl	Range_setter_step               # -- Begin function Range_setter_step
	.p2align	4, 0x90
	.type	Range_setter_step,@function
Range_setter_step:                      # @Range_setter_step
# %bb.0:
	movl	%esi, 8(%rdi)
	retq
.Lfunc_end322:
	.size	Range_setter_step, .Lfunc_end322-Range_setter_step
                                        # -- End function
	.globl	Range_getter_end                # -- Begin function Range_getter_end
	.p2align	4, 0x90
	.type	Range_getter_end,@function
Range_getter_end:                       # @Range_getter_end
# %bb.0:
	movl	4(%rdi), %eax
	retq
.Lfunc_end323:
	.size	Range_getter_end, .Lfunc_end323-Range_getter_end
                                        # -- End function
	.globl	Range_setter_end                # -- Begin function Range_setter_end
	.p2align	4, 0x90
	.type	Range_setter_end,@function
Range_setter_end:                       # @Range_setter_end
# %bb.0:
	movl	%esi, 4(%rdi)
	retq
.Lfunc_end324:
	.size	Range_setter_end, .Lfunc_end324-Range_setter_end
                                        # -- End function
	.globl	Range_getter_start              # -- Begin function Range_getter_start
	.p2align	4, 0x90
	.type	Range_getter_start,@function
Range_getter_start:                     # @Range_getter_start
# %bb.0:
	movl	(%rdi), %eax
	retq
.Lfunc_end325:
	.size	Range_getter_start, .Lfunc_end325-Range_getter_start
                                        # -- End function
	.globl	Range_setter_start              # -- Begin function Range_setter_start
	.p2align	4, 0x90
	.type	Range_setter_start,@function
Range_setter_start:                     # @Range_setter_start
# %bb.0:
	movl	%esi, (%rdi)
	retq
.Lfunc_end326:
	.size	Range_setter_start, .Lfunc_end326-Range_setter_start
                                        # -- End function
	.globl	_size_OutOfBoundsDetails        # -- Begin function _size_OutOfBoundsDetails
	.p2align	4, 0x90
	.type	_size_OutOfBoundsDetails,@function
_size_OutOfBoundsDetails:               # @_size_OutOfBoundsDetails
# %bb.0:
	movl	$8, %eax
	movl	$4, %edx
	retq
.Lfunc_end327:
	.size	_size_OutOfBoundsDetails, .Lfunc_end327-_size_OutOfBoundsDetails
                                        # -- End function
	.globl	OutOfBoundsDetails_B_init_boundsPtri32_indexPtri32 # -- Begin function OutOfBoundsDetails_B_init_boundsPtri32_indexPtri32
	.p2align	4, 0x90
	.type	OutOfBoundsDetails_B_init_boundsPtri32_indexPtri32,@function
OutOfBoundsDetails_B_init_boundsPtri32_indexPtri32: # @OutOfBoundsDetails_B_init_boundsPtri32_indexPtri32
# %bb.0:
	movq	104(%rdi), %rax
	retq
.Lfunc_end328:
	.size	OutOfBoundsDetails_B_init_boundsPtri32_indexPtri32, .Lfunc_end328-OutOfBoundsDetails_B_init_boundsPtri32_indexPtri32
                                        # -- End function
	.globl	OutOfBoundsDetails_B_report_    # -- Begin function OutOfBoundsDetails_B_report_
	.p2align	4, 0x90
	.type	OutOfBoundsDetails_B_report_,@function
OutOfBoundsDetails_B_report_:           # @OutOfBoundsDetails_B_report_
# %bb.0:
	movq	112(%rdi), %rax
	retq
.Lfunc_end329:
	.size	OutOfBoundsDetails_B_report_, .Lfunc_end329-OutOfBoundsDetails_B_report_
                                        # -- End function
	.globl	OutOfBoundsDetails_init_boundsPtri32_indexPtri32 # -- Begin function OutOfBoundsDetails_init_boundsPtri32_indexPtri32
	.p2align	4, 0x90
	.type	OutOfBoundsDetails_init_boundsPtri32_indexPtri32,@function
OutOfBoundsDetails_init_boundsPtri32_indexPtri32: # @OutOfBoundsDetails_init_boundsPtri32_indexPtri32
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	pushq	%rax
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movl	80(%rsp), %ebp
	movl	72(%rsp), %esi
	movq	40(%rdi), %rax
	movabsq	$4650630525701360429, %rcx      # imm = 0x408A5BD2B2048B2D
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %r15
	movq	(%rdi,%r15,8), %rax
	movq	%rbx, %rdi
	callq	*8(%rax)
	movq	8(%r14,%r15,8), %rax
	movq	8(%rax), %rax
	movq	%rbx, %rdi
	movl	%ebp, %esi
	addq	$8, %rsp
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	jmpq	*%rax                           # TAILCALL
.Lfunc_end330:
	.size	OutOfBoundsDetails_init_boundsPtri32_indexPtri32, .Lfunc_end330-OutOfBoundsDetails_init_boundsPtri32_indexPtri32
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function OutOfBoundsDetails_report_
.LCPI331_0:
	.byte	84                              # 0x54
	.byte	104                             # 0x68
	.byte	101                             # 0x65
	.byte	32                              # 0x20
	.byte	105                             # 0x69
	.byte	110                             # 0x6e
	.byte	100                             # 0x64
	.byte	101                             # 0x65
	.byte	120                             # 0x78
	.byte	105                             # 0x69
	.byte	110                             # 0x6e
	.byte	103                             # 0x67
	.byte	32                              # 0x20
	.byte	97                              # 0x61
	.byte	114                             # 0x72
	.byte	103                             # 0x67
	.text
	.globl	OutOfBoundsDetails_report_
	.p2align	4, 0x90
	.type	OutOfBoundsDetails_report_,@function
OutOfBoundsDetails_report_:             # @OutOfBoundsDetails_report_
	.cfi_startproc
# %bb.0:                                # %IO_B__Self_print_xPtrf64__Self_print_xRepresentable__Self_print_xPtri8__Self_print_xString__Self_print_xPtri64__Self_print_xNil__Self_print_xCharacter__Self_print_xPtri1__Self_print_xPtri32.exit60
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rsi, -48(%rbp)                 # 8-byte Spill
	movq	%rdi, %r14
	movq	40(%rdi), %rax
	movabsq	$4650630525701360429, %rcx      # imm = 0x408A5BD2B2048B2D
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %r13
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %r15
	movl	$45, %edi
	movq	%r15, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r12
	movaps	bsium_The_size_of_the_collection_being_indexed_was(%rip), %xmm0
	movaps	bsium_The_size_of_the_collection_being_indexed_was+16(%rip), %xmm1
	movdqa	bsium_The_size_of_the_collection_being_indexed_was+32(%rip), %xmm2
	pshufd	$238, %xmm2, %xmm3              # xmm3 = xmm2[2,3,2,3]
	movd	%xmm3, 40(%rax)
	movq	%xmm2, 32(%rax)
	movaps	%xmm1, 16(%rax)
	movaps	%xmm0, (%rax)
	movl	$16, %edi
	movq	%r15, %rsi
	callq	bump_malloc_inner@PLT
	movq	String@GOTPCREL(%rip), %rcx
	movq	%rcx, -80(%rbp)
	movq	%rax, -72(%rbp)
	movl	$9, -56(%rbp)
	movq	%r12, (%rax)
	movabsq	$193273528364, %rcx             # imm = 0x2D0000002C
	movq	%rcx, 8(%rax)
	movq	-72(%rbp), %rbx
	movl	8(%rbx), %eax
	incl	%eax
	movslq	%eax, %rdi
	movq	%r15, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r15
	movslq	8(%rbx), %r12
	testq	%r12, %r12
	jle	.LBB331_2
# %bb.1:                                # %.lr.ph.i
	movq	(%rbx), %rsi
	movq	%r15, %rdi
	movq	%r12, %rdx
	callq	memcpy@PLT
.LBB331_2:                              # %String_c_string_.exit
	movb	$0, (%r15,%r12)
	movq	%r15, %rdi
	callq	puts@PLT
	movq	(%r14,%r13,8), %rax
	movq	-48(%rbp), %rdi                 # 8-byte Reload
	callq	*(%rax)
	movq	i32_string@GOTPCREL(%rip), %rdi
	movl	%eax, %esi
	xorl	%eax, %eax
	callq	printf@PLT
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %r15
	movl	$26, %edi
	movq	%r15, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r12
	movabsq	$7023117828348013941, %rax      # imm = 0x617720746E656D75
	movq	%rax, 16(%r12)
	movaps	.LCPI331_0(%rip), %xmm0         # xmm0 = [84,104,101,32,105,110,100,101,120,105,110,103,32,97,114,103]
	movaps	%xmm0, (%r12)
	movb	$115, 24(%r12)
	movl	$16, %edi
	movq	%r15, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rsp, %rcx
	leaq	-32(%rcx), %rsp
	movq	String@GOTPCREL(%rip), %rdx
	movq	%rdx, -32(%rcx)
	movq	%rax, -24(%rcx)
	movl	$9, -8(%rcx)
	movq	%r12, (%rax)
	movabsq	$111669149721, %rdx             # imm = 0x1A00000019
	movq	%rdx, 8(%rax)
	movq	-24(%rcx), %rbx
	movl	8(%rbx), %eax
	incl	%eax
	movslq	%eax, %rdi
	movq	%r15, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r15
	movslq	8(%rbx), %r12
	testq	%r12, %r12
	jle	.LBB331_4
# %bb.3:                                # %.lr.ph.i112
	movq	(%rbx), %rsi
	movq	%r15, %rdi
	movq	%r12, %rdx
	callq	memcpy@PLT
.LBB331_4:                              # %String_c_string_.exit116
	movb	$0, (%r15,%r12)
	movq	%r15, %rdi
	callq	puts@PLT
	movq	8(%r14,%r13,8), %rax
	movq	-48(%rbp), %rdi                 # 8-byte Reload
	callq	*(%rax)
	movq	i32_string@GOTPCREL(%rip), %rdi
	movl	%eax, %esi
	xorl	%eax, %eax
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	jmp	printf@PLT                      # TAILCALL
.Lfunc_end331:
	.size	OutOfBoundsDetails_report_, .Lfunc_end331-OutOfBoundsDetails_report_
	.cfi_endproc
                                        # -- End function
	.globl	OutOfBoundsDetails_getter_index # -- Begin function OutOfBoundsDetails_getter_index
	.p2align	4, 0x90
	.type	OutOfBoundsDetails_getter_index,@function
OutOfBoundsDetails_getter_index:        # @OutOfBoundsDetails_getter_index
# %bb.0:
	movl	4(%rdi), %eax
	retq
.Lfunc_end332:
	.size	OutOfBoundsDetails_getter_index, .Lfunc_end332-OutOfBoundsDetails_getter_index
                                        # -- End function
	.globl	OutOfBoundsDetails_setter_index # -- Begin function OutOfBoundsDetails_setter_index
	.p2align	4, 0x90
	.type	OutOfBoundsDetails_setter_index,@function
OutOfBoundsDetails_setter_index:        # @OutOfBoundsDetails_setter_index
# %bb.0:
	movl	%esi, 4(%rdi)
	retq
.Lfunc_end333:
	.size	OutOfBoundsDetails_setter_index, .Lfunc_end333-OutOfBoundsDetails_setter_index
                                        # -- End function
	.globl	OutOfBoundsDetails_getter_bounds # -- Begin function OutOfBoundsDetails_getter_bounds
	.p2align	4, 0x90
	.type	OutOfBoundsDetails_getter_bounds,@function
OutOfBoundsDetails_getter_bounds:       # @OutOfBoundsDetails_getter_bounds
# %bb.0:
	movl	(%rdi), %eax
	retq
.Lfunc_end334:
	.size	OutOfBoundsDetails_getter_bounds, .Lfunc_end334-OutOfBoundsDetails_getter_bounds
                                        # -- End function
	.globl	OutOfBoundsDetails_setter_bounds # -- Begin function OutOfBoundsDetails_setter_bounds
	.p2align	4, 0x90
	.type	OutOfBoundsDetails_setter_bounds,@function
OutOfBoundsDetails_setter_bounds:       # @OutOfBoundsDetails_setter_bounds
# %bb.0:
	movl	%esi, (%rdi)
	retq
.Lfunc_end335:
	.size	OutOfBoundsDetails_setter_bounds, .Lfunc_end335-OutOfBoundsDetails_setter_bounds
                                        # -- End function
	.globl	_size_OutOfBounds               # -- Begin function _size_OutOfBounds
	.p2align	4, 0x90
	.type	_size_OutOfBounds,@function
_size_OutOfBounds:                      # @_size_OutOfBounds
# %bb.0:
	movl	$104, %eax
	movl	$8, %edx
	retq
.Lfunc_end336:
	.size	_size_OutOfBounds, .Lfunc_end336-_size_OutOfBounds
                                        # -- End function
	.globl	OutOfBounds_B_init_boundsPtri32_indexPtri32 # -- Begin function OutOfBounds_B_init_boundsPtri32_indexPtri32
	.p2align	4, 0x90
	.type	OutOfBounds_B_init_boundsPtri32_indexPtri32,@function
OutOfBounds_B_init_boundsPtri32_indexPtri32: # @OutOfBounds_B_init_boundsPtri32_indexPtri32
# %bb.0:
	movq	152(%rdi), %rax
	retq
.Lfunc_end337:
	.size	OutOfBounds_B_init_boundsPtri32_indexPtri32, .Lfunc_end337-OutOfBounds_B_init_boundsPtri32_indexPtri32
                                        # -- End function
	.globl	OutOfBounds_B_init_messageString # -- Begin function OutOfBounds_B_init_messageString
	.p2align	4, 0x90
	.type	OutOfBounds_B_init_messageString,@function
OutOfBounds_B_init_messageString:       # @OutOfBounds_B_init_messageString
# %bb.0:
	movq	160(%rdi), %rax
	retq
.Lfunc_end338:
	.size	OutOfBounds_B_init_messageString, .Lfunc_end338-OutOfBounds_B_init_messageString
                                        # -- End function
	.globl	OutOfBounds_B_init_             # -- Begin function OutOfBounds_B_init_
	.p2align	4, 0x90
	.type	OutOfBounds_B_init_,@function
OutOfBounds_B_init_:                    # @OutOfBounds_B_init_
# %bb.0:
	movq	168(%rdi), %rax
	retq
.Lfunc_end339:
	.size	OutOfBounds_B_init_, .Lfunc_end339-OutOfBounds_B_init_
                                        # -- End function
	.globl	OutOfBounds_B_set_info_line_numberPtri32_file_nameString # -- Begin function OutOfBounds_B_set_info_line_numberPtri32_file_nameString
	.p2align	4, 0x90
	.type	OutOfBounds_B_set_info_line_numberPtri32_file_nameString,@function
OutOfBounds_B_set_info_line_numberPtri32_file_nameString: # @OutOfBounds_B_set_info_line_numberPtri32_file_nameString
# %bb.0:
	movq	176(%rdi), %rax
	retq
.Lfunc_end340:
	.size	OutOfBounds_B_set_info_line_numberPtri32_file_nameString, .Lfunc_end340-OutOfBounds_B_set_info_line_numberPtri32_file_nameString
                                        # -- End function
	.globl	OutOfBounds_B_report_           # -- Begin function OutOfBounds_B_report_
	.p2align	4, 0x90
	.type	OutOfBounds_B_report_,@function
OutOfBounds_B_report_:                  # @OutOfBounds_B_report_
# %bb.0:
	movq	184(%rdi), %rax
	retq
.Lfunc_end341:
	.size	OutOfBounds_B_report_, .Lfunc_end341-OutOfBounds_B_report_
                                        # -- End function
	.globl	OutOfBounds_B_print_message_    # -- Begin function OutOfBounds_B_print_message_
	.p2align	4, 0x90
	.type	OutOfBounds_B_print_message_,@function
OutOfBounds_B_print_message_:           # @OutOfBounds_B_print_message_
# %bb.0:
	movq	192(%rdi), %rax
	retq
.Lfunc_end342:
	.size	OutOfBounds_B_print_message_, .Lfunc_end342-OutOfBounds_B_print_message_
                                        # -- End function
	.globl	OutOfBounds_init_boundsPtri32_indexPtri32 # -- Begin function OutOfBounds_init_boundsPtri32_indexPtri32
	.p2align	4, 0x90
	.type	OutOfBounds_init_boundsPtri32_indexPtri32,@function
OutOfBounds_init_boundsPtri32_indexPtri32: # @OutOfBounds_init_boundsPtri32_indexPtri32
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$40, %rsp
	.cfi_def_cfa_offset 96
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movl	128(%rsp), %r12d
	movl	120(%rsp), %r13d
	movq	40(%rdi), %rax
	movabsq	$5348403617834207535, %rcx      # imm = 0x4A3958C0DC6C092F
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %rbp
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %r15
	movl	$8, %edi
	movq	%r15, %rsi
	callq	bump_malloc_inner@PLT
	movq	OutOfBoundsDetails@GOTPCREL(%rip), %rsi
	movq	%rsi, 8(%rsp)
	movq	%rax, 16(%rsp)
	movl	$9, 32(%rsp)
	movl	%r13d, (%rax)
	movl	%r12d, 4(%rax)
	movq	(%r14,%rbp,8), %rax
	movl	32(%rsp), %r8d
	movq	16(%rsp), %rdx
	movq	24(%rsp), %rcx
	movq	%rbx, %rdi
	callq	*8(%rax)
	movq	8(%r14,%rbp,8), %rax
	movq	%rbx, %rdi
	xorl	%esi, %esi
	callq	*8(%rax)
	movl	$1, %edi
	movq	%r15, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r13
	movl	$16, %edi
	movq	%r15, %rsi
	callq	bump_malloc_inner@PLT
	movq	String@GOTPCREL(%rip), %r12
	movq	%r13, (%rax)
	movabsq	$4294967296, %rcx               # imm = 0x100000000
	movq	%rcx, 8(%rax)
	movq	16(%r14,%rbp,8), %rcx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%rax, %rdx
	movl	$9, %r8d
	callq	*8(%rcx)
	movl	$66, %edi
	movq	%r15, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r13
	movaps	fijgh_An_outofbounds_error_occurred_while_indexing_into_a_collection(%rip), %xmm0
	movaps	fijgh_An_outofbounds_error_occurred_while_indexing_into_a_collection+16(%rip), %xmm1
	movaps	fijgh_An_outofbounds_error_occurred_while_indexing_into_a_collection+32(%rip), %xmm2
	movaps	fijgh_An_outofbounds_error_occurred_while_indexing_into_a_collection+48(%rip), %xmm3
	movzbl	fijgh_An_outofbounds_error_occurred_while_indexing_into_a_collection+64(%rip), %eax
	movb	%al, 64(%r13)
	movaps	%xmm3, 48(%r13)
	movaps	%xmm2, 32(%r13)
	movaps	%xmm1, 16(%r13)
	movaps	%xmm0, (%r13)
	movl	$16, %edi
	movq	%r15, %rsi
	callq	bump_malloc_inner@PLT
	movq	%r13, (%rax)
	movabsq	$283467841601, %rcx             # imm = 0x4200000041
	movq	%rcx, 8(%rax)
	movq	24(%r14,%rbp,8), %rcx
	movq	8(%rcx), %rcx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%rax, %rdx
	movl	$9, %r8d
	addq	$40, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	jmpq	*%rcx                           # TAILCALL
.Lfunc_end343:
	.size	OutOfBounds_init_boundsPtri32_indexPtri32, .Lfunc_end343-OutOfBounds_init_boundsPtri32_indexPtri32
	.cfi_endproc
                                        # -- End function
	.globl	OutOfBounds_print_message_      # -- Begin function OutOfBounds_print_message_
	.p2align	4, 0x90
	.type	OutOfBounds_print_message_,@function
OutOfBounds_print_message_:             # @OutOfBounds_print_message_
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$184, %rsp
	.cfi_def_cfa_offset 240
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rdi, %r14
	movq	40(%rdi), %rax
	movabsq	$5348403617834207535, %rcx      # imm = 0x4A3958C0DC6C092F
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %rax
	movq	%rax, 40(%rsp)                  # 8-byte Spill
	movq	24(%rdi,%rax,8), %rax
	leaq	64(%rsp), %rdi
	movq	%rsi, 48(%rsp)                  # 8-byte Spill
	callq	*(%rax)
	movl	88(%rsp), %eax
	movq	80(%rsp), %rcx
	movq	64(%rsp), %r13
	movq	72(%rsp), %rdx
	movq	%r13, 96(%rsp)
	movq	%rdx, 16(%rsp)                  # 8-byte Spill
	movq	%rdx, 104(%rsp)
	movq	%rcx, 24(%rsp)                  # 8-byte Spill
	movq	%rcx, 112(%rsp)
	movq	%rax, 32(%rsp)                  # 8-byte Spill
	movl	%eax, 120(%rsp)
	movq	_parameterization_String@GOTPCREL(%rip), %rax
	movq	%rax, 56(%rsp)
	movq	8(%r13), %rbx
	movq	16(%r13), %r12
	movq	24(%r13), %rbp
	movq	32(%r13), %r15
	movq	f64_typ@GOTPCREL(%rip), %rcx
	movabsq	$-757315540097298781, %rdx      # imm = 0xF57D7987599E0EA3
	movq	%r12, %rdi
	movq	%rbx, %rsi
	movq	%r15, %r8
	callq	*%rbp
	movl	$1, %ecx
	testb	$1, %al
	jne	.LBB344_8
# %bb.1:
	movq	nil_typ@GOTPCREL(%rip), %rcx
	movabsq	$-5126806859456325683, %rdx     # imm = 0xB8D9EC530611D7CD
	movq	%r12, %rdi
	movq	%rbx, %rsi
	movq	%r15, %r8
	callq	*%rbp
	movl	$6, %ecx
	testb	$1, %al
	jne	.LBB344_8
# %bb.2:
	movq	i32_typ@GOTPCREL(%rip), %rcx
	movabsq	$-2253724949814257982, %rdx     # imm = 0xE0B9291950E2D6C2
	movq	%r12, %rdi
	movq	%rbx, %rsi
	movq	%r15, %r8
	callq	*%rbp
	movl	$9, %ecx
	testb	$1, %al
	jne	.LBB344_8
# %bb.3:
	movq	i8_typ@GOTPCREL(%rip), %rcx
	movabsq	$2582149688529881115, %rdx      # imm = 0x23D5A375FDB5881B
	movq	%r12, %rdi
	movq	%rbx, %rsi
	movq	%r15, %r8
	callq	*%rbp
	movl	$3, %ecx
	testb	$1, %al
	jne	.LBB344_8
# %bb.4:
	movabsq	$6499063144389013426, %rdx      # imm = 0x5A314F7F0E23EFB2
	movq	String@GOTPCREL(%rip), %rcx
	movq	%r12, %rdi
	movq	%rbx, %rsi
	movq	%r15, %r8
	callq	*%rbp
	movb	%al, 6(%rsp)                    # 1-byte Spill
	movq	Character@GOTPCREL(%rip), %rcx
	movabsq	$6681222582356018452, %rdx      # imm = 0x5CB8788A3EA60514
	movq	%r12, %rdi
	movq	%rbx, %rsi
	movq	%r15, %r8
	callq	*%rbp
	movzbl	6(%rsp), %edx                   # 1-byte Folded Reload
	notb	%dl
	orb	%al, %dl
	movl	$4, %ecx
	testb	$1, %dl
	je	.LBB344_8
# %bb.5:
	movq	Representable@GOTPCREL(%rip), %rcx
	movb	%al, 7(%rsp)                    # 1-byte Spill
	movabsq	$-7260840641129990118, %rdx     # imm = 0x9B3C4FE80EBA381A
	movq	%r12, %rdi
	movq	%rbx, %rsi
	movq	%r15, %r8
	callq	*%rbp
	notb	%al
	movzbl	6(%rsp), %edx                   # 1-byte Folded Reload
	orb	7(%rsp), %dl                    # 1-byte Folded Reload
	orb	%al, %dl
	movl	$2, %ecx
	testb	$1, %dl
	je	.LBB344_8
# %bb.6:                                # %.critedge.i
	movq	i64_typ@GOTPCREL(%rip), %rcx
	movabsq	$-7469797244461771922, %rdx     # imm = 0x9855F2FB9BAA136E
	movq	%r12, %rdi
	movq	%rbx, %rsi
	movq	%r15, %r8
	callq	*%rbp
	movl	$5, %ecx
	testb	$1, %al
	jne	.LBB344_8
# %bb.7:
	movq	bool_typ@GOTPCREL(%rip), %rcx
	movabsq	$5801531371504802705, %rdx      # imm = 0x50832E0B67D41B91
	movq	%r12, %rdi
	movq	%rbx, %rsi
	movq	%r15, %r8
	callq	*%rbp
	movzbl	%al, %ecx
	andl	$1, %ecx
	addl	$7, %ecx
.LBB344_8:                              # %IO_B__Self_print_xPtrf64__Self_print_xRepresentable__Self_print_xPtri8__Self_print_xString__Self_print_xPtri64__Self_print_xNil__Self_print_xCharacter__Self_print_xPtri1__Self_print_xPtri32.exit
	movl	%ecx, %eax
	movq	IO@GOTPCREL(%rip), %r9
	leaq	56(%rsp), %rdi
	movq	%r13, %rsi
	movq	16(%rsp), %rdx                  # 8-byte Reload
	movq	24(%rsp), %rcx                  # 8-byte Reload
	movq	32(%rsp), %r8                   # 8-byte Reload
	callq	*72(%r9,%rax,8)
	movq	40(%rsp), %rax                  # 8-byte Reload
	movq	(%r14,%rax,8), %rax
	leaq	128(%rsp), %rdi
	movq	48(%rsp), %rsi                  # 8-byte Reload
	callq	*(%rax)
	movq	128(%rsp), %rbx
	cmpq	nil_typ@GOTPCREL(%rip), %rbx
	sete	%al
	testq	%rbx, %rbx
	sete	%cl
	orb	%al, %cl
	jne	.LBB344_10
# %bb.9:
	movq	152(%rsp), %r14
	movq	144(%rsp), %r15
	movq	40(%rbx), %rax
	movabsq	$4650630525701360429, %rcx      # imm = 0x408A5BD2B2048B2D
	imulq	8(%rbx), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rbx), %rdx
	movslq	(%rax,%rdx,4), %r12
	leaq	8(%rsp), %r13
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	movl	%r12d, %ecx
	movq	%r13, %r8
	callq	*24(%rbx,%r12,8)
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	movl	%r12d, %ecx
	movq	%rbx, %r8
	movq	%r15, %r9
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
.LBB344_10:                             # %._crit_edge
	addq	$184, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end344:
	.size	OutOfBounds_print_message_, .Lfunc_end344-OutOfBounds_print_message_
	.cfi_endproc
                                        # -- End function
	.globl	OutOfBounds_getter_message      # -- Begin function OutOfBounds_getter_message
	.p2align	4, 0x90
	.type	OutOfBounds_getter_message,@function
OutOfBounds_getter_message:             # @OutOfBounds_getter_message
# %bb.0:
	movq	%rdi, %rax
	movq	72(%rsi), %rcx
	movq	80(%rsi), %rdx
	movq	88(%rsi), %rdi
	movl	96(%rsi), %esi
	movl	%esi, 24(%rax)
	movq	%rdi, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	retq
.Lfunc_end345:
	.size	OutOfBounds_getter_message, .Lfunc_end345-OutOfBounds_getter_message
                                        # -- End function
	.globl	OutOfBounds_setter_message      # -- Begin function OutOfBounds_setter_message
	.p2align	4, 0x90
	.type	OutOfBounds_setter_message,@function
OutOfBounds_setter_message:             # @OutOfBounds_setter_message
# %bb.0:
	movq	%rsi, 72(%rdi)
	movq	%rdx, 80(%rdi)
	movq	%rcx, 88(%rdi)
	movl	%r8d, 96(%rdi)
	retq
.Lfunc_end346:
	.size	OutOfBounds_setter_message, .Lfunc_end346-OutOfBounds_setter_message
                                        # -- End function
	.globl	OutOfBounds_getter_file_name    # -- Begin function OutOfBounds_getter_file_name
	.p2align	4, 0x90
	.type	OutOfBounds_getter_file_name,@function
OutOfBounds_getter_file_name:           # @OutOfBounds_getter_file_name
# %bb.0:
	movq	%rdi, %rax
	movq	40(%rsi), %rcx
	movq	48(%rsi), %rdx
	movq	56(%rsi), %rdi
	movl	64(%rsi), %esi
	movl	%esi, 24(%rax)
	movq	%rdi, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	retq
.Lfunc_end347:
	.size	OutOfBounds_getter_file_name, .Lfunc_end347-OutOfBounds_getter_file_name
                                        # -- End function
	.globl	OutOfBounds_setter_file_name    # -- Begin function OutOfBounds_setter_file_name
	.p2align	4, 0x90
	.type	OutOfBounds_setter_file_name,@function
OutOfBounds_setter_file_name:           # @OutOfBounds_setter_file_name
# %bb.0:
	movq	%rsi, 40(%rdi)
	movq	%rdx, 48(%rdi)
	movq	%rcx, 56(%rdi)
	movl	%r8d, 64(%rdi)
	retq
.Lfunc_end348:
	.size	OutOfBounds_setter_file_name, .Lfunc_end348-OutOfBounds_setter_file_name
                                        # -- End function
	.globl	OutOfBounds_getter_line_number  # -- Begin function OutOfBounds_getter_line_number
	.p2align	4, 0x90
	.type	OutOfBounds_getter_line_number,@function
OutOfBounds_getter_line_number:         # @OutOfBounds_getter_line_number
# %bb.0:
	movl	32(%rdi), %eax
	retq
.Lfunc_end349:
	.size	OutOfBounds_getter_line_number, .Lfunc_end349-OutOfBounds_getter_line_number
                                        # -- End function
	.globl	OutOfBounds_setter_line_number  # -- Begin function OutOfBounds_setter_line_number
	.p2align	4, 0x90
	.type	OutOfBounds_setter_line_number,@function
OutOfBounds_setter_line_number:         # @OutOfBounds_setter_line_number
# %bb.0:
	movl	%esi, 32(%rdi)
	retq
.Lfunc_end350:
	.size	OutOfBounds_setter_line_number, .Lfunc_end350-OutOfBounds_setter_line_number
                                        # -- End function
	.globl	OutOfBounds_getter_details      # -- Begin function OutOfBounds_getter_details
	.p2align	4, 0x90
	.type	OutOfBounds_getter_details,@function
OutOfBounds_getter_details:             # @OutOfBounds_getter_details
# %bb.0:
	movq	%rdi, %rax
	movl	24(%rsi), %ecx
	movq	(%rsi), %rdx
	movq	8(%rsi), %rdi
	movq	16(%rsi), %rsi
	movq	%rsi, 24(%rax)
	movq	%rdi, 16(%rax)
	movl	%ecx, 32(%rax)
	movq	%rdx, (%rax)
	retq
.Lfunc_end351:
	.size	OutOfBounds_getter_details, .Lfunc_end351-OutOfBounds_getter_details
                                        # -- End function
	.globl	OutOfBounds_setter_details      # -- Begin function OutOfBounds_setter_details
	.p2align	4, 0x90
	.type	OutOfBounds_setter_details,@function
OutOfBounds_setter_details:             # @OutOfBounds_setter_details
# %bb.0:
	movq	%rsi, (%rdi)
	movq	%rcx, 16(%rdi)
	movq	%rdx, 8(%rdi)
	movl	%r8d, 24(%rdi)
	retq
.Lfunc_end352:
	.size	OutOfBounds_setter_details, .Lfunc_end352-OutOfBounds_setter_details
                                        # -- End function
	.globl	_size_IntArray                  # -- Begin function _size_IntArray
	.p2align	4, 0x90
	.type	_size_IntArray,@function
_size_IntArray:                         # @_size_IntArray
# %bb.0:
	movl	$16, %eax
	movl	$8, %edx
	retq
.Lfunc_end353:
	.size	_size_IntArray, .Lfunc_end353-_size_IntArray
                                        # -- End function
	.globl	IntArray_B__Self_from_iterable_iterableIntIterable # -- Begin function IntArray_B__Self_from_iterable_iterableIntIterable
	.p2align	4, 0x90
	.type	IntArray_B__Self_from_iterable_iterableIntIterable,@function
IntArray_B__Self_from_iterable_iterableIntIterable: # @IntArray_B__Self_from_iterable_iterableIntIterable
# %bb.0:
	movq	IntArray__Self_from_iterable_iterableIntIterable@GOTPCREL(%rip), %rax
	retq
.Lfunc_end354:
	.size	IntArray_B__Self_from_iterable_iterableIntIterable, .Lfunc_end354-IntArray_B__Self_from_iterable_iterableIntIterable
                                        # -- End function
	.globl	IntArray_B_init_                # -- Begin function IntArray_B_init_
	.p2align	4, 0x90
	.type	IntArray_B_init_,@function
IntArray_B_init_:                       # @IntArray_B_init_
# %bb.0:
	movq	288(%rdi), %rax
	retq
.Lfunc_end355:
	.size	IntArray_B_init_, .Lfunc_end355-IntArray_B_init_
                                        # -- End function
	.globl	IntArray_B_init_bufferBufferPtri32_lengthPtri32_capacityPtri32 # -- Begin function IntArray_B_init_bufferBufferPtri32_lengthPtri32_capacityPtri32
	.p2align	4, 0x90
	.type	IntArray_B_init_bufferBufferPtri32_lengthPtri32_capacityPtri32,@function
IntArray_B_init_bufferBufferPtri32_lengthPtri32_capacityPtri32: # @IntArray_B_init_bufferBufferPtri32_lengthPtri32_capacityPtri32
# %bb.0:
	movq	296(%rdi), %rax
	retq
.Lfunc_end356:
	.size	IntArray_B_init_bufferBufferPtri32_lengthPtri32_capacityPtri32, .Lfunc_end356-IntArray_B_init_bufferBufferPtri32_lengthPtri32_capacityPtri32
                                        # -- End function
	.globl	IntArray_B_length_              # -- Begin function IntArray_B_length_
	.p2align	4, 0x90
	.type	IntArray_B_length_,@function
IntArray_B_length_:                     # @IntArray_B_length_
# %bb.0:
	movq	304(%rdi), %rax
	retq
.Lfunc_end357:
	.size	IntArray_B_length_, .Lfunc_end357-IntArray_B_length_
                                        # -- End function
	.globl	IntArray_B_capacity_            # -- Begin function IntArray_B_capacity_
	.p2align	4, 0x90
	.type	IntArray_B_capacity_,@function
IntArray_B_capacity_:                   # @IntArray_B_capacity_
# %bb.0:
	movq	312(%rdi), %rax
	retq
.Lfunc_end358:
	.size	IntArray_B_capacity_, .Lfunc_end358-IntArray_B_capacity_
                                        # -- End function
	.globl	IntArray_B_buffer_              # -- Begin function IntArray_B_buffer_
	.p2align	4, 0x90
	.type	IntArray_B_buffer_,@function
IntArray_B_buffer_:                     # @IntArray_B_buffer_
# %bb.0:
	movq	320(%rdi), %rax
	retq
.Lfunc_end359:
	.size	IntArray_B_buffer_, .Lfunc_end359-IntArray_B_buffer_
                                        # -- End function
	.globl	IntArray_B_append_xPtri32       # -- Begin function IntArray_B_append_xPtri32
	.p2align	4, 0x90
	.type	IntArray_B_append_xPtri32,@function
IntArray_B_append_xPtri32:              # @IntArray_B_append_xPtri32
# %bb.0:
	movq	328(%rdi), %rax
	retq
.Lfunc_end360:
	.size	IntArray_B_append_xPtri32, .Lfunc_end360-IntArray_B_append_xPtri32
                                        # -- End function
	.globl	IntArray_B_extend_aryIntArray   # -- Begin function IntArray_B_extend_aryIntArray
	.p2align	4, 0x90
	.type	IntArray_B_extend_aryIntArray,@function
IntArray_B_extend_aryIntArray:          # @IntArray_B_extend_aryIntArray
# %bb.0:
	movq	336(%rdi), %rax
	retq
.Lfunc_end361:
	.size	IntArray_B_extend_aryIntArray, .Lfunc_end361-IntArray_B_extend_aryIntArray
                                        # -- End function
	.globl	IntArray_B__index_xPtri32       # -- Begin function IntArray_B__index_xPtri32
	.p2align	4, 0x90
	.type	IntArray_B__index_xPtri32,@function
IntArray_B__index_xPtri32:              # @IntArray_B__index_xPtri32
# %bb.0:
	movq	344(%rdi), %rax
	retq
.Lfunc_end362:
	.size	IntArray_B__index_xPtri32, .Lfunc_end362-IntArray_B__index_xPtri32
                                        # -- End function
	.globl	IntArray_B_pop_                 # -- Begin function IntArray_B_pop_
	.p2align	4, 0x90
	.type	IntArray_B_pop_,@function
IntArray_B_pop_:                        # @IntArray_B_pop_
# %bb.0:
	movq	352(%rdi), %rax
	retq
.Lfunc_end363:
	.size	IntArray_B_pop_, .Lfunc_end363-IntArray_B_pop_
                                        # -- End function
	.globl	IntArray_B_copy_                # -- Begin function IntArray_B_copy_
	.p2align	4, 0x90
	.type	IntArray_B_copy_,@function
IntArray_B_copy_:                       # @IntArray_B_copy_
# %bb.0:
	movq	360(%rdi), %rax
	retq
.Lfunc_end364:
	.size	IntArray_B_copy_, .Lfunc_end364-IntArray_B_copy_
                                        # -- End function
	.globl	IntArray_B_each_fFunctionPtri32_to_Nothing # -- Begin function IntArray_B_each_fFunctionPtri32_to_Nothing
	.p2align	4, 0x90
	.type	IntArray_B_each_fFunctionPtri32_to_Nothing,@function
IntArray_B_each_fFunctionPtri32_to_Nothing: # @IntArray_B_each_fFunctionPtri32_to_Nothing
# %bb.0:
	movq	368(%rdi), %rax
	retq
.Lfunc_end365:
	.size	IntArray_B_each_fFunctionPtri32_to_Nothing, .Lfunc_end365-IntArray_B_each_fFunctionPtri32_to_Nothing
                                        # -- End function
	.globl	IntArray_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32 # -- Begin function IntArray_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32
	.p2align	4, 0x90
	.type	IntArray_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32,@function
IntArray_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32: # @IntArray_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32
# %bb.0:
	movq	376(%rdi), %rax
	retq
.Lfunc_end366:
	.size	IntArray_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, .Lfunc_end366-IntArray_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32
                                        # -- End function
	.globl	IntArray_B_all_fFunctionPtri32_to_Ptri1 # -- Begin function IntArray_B_all_fFunctionPtri32_to_Ptri1
	.p2align	4, 0x90
	.type	IntArray_B_all_fFunctionPtri32_to_Ptri1,@function
IntArray_B_all_fFunctionPtri32_to_Ptri1: # @IntArray_B_all_fFunctionPtri32_to_Ptri1
# %bb.0:
	movq	384(%rdi), %rax
	retq
.Lfunc_end367:
	.size	IntArray_B_all_fFunctionPtri32_to_Ptri1, .Lfunc_end367-IntArray_B_all_fFunctionPtri32_to_Ptri1
                                        # -- End function
	.globl	IntArray_B_any_fFunctionPtri32_to_Ptri1 # -- Begin function IntArray_B_any_fFunctionPtri32_to_Ptri1
	.p2align	4, 0x90
	.type	IntArray_B_any_fFunctionPtri32_to_Ptri1,@function
IntArray_B_any_fFunctionPtri32_to_Ptri1: # @IntArray_B_any_fFunctionPtri32_to_Ptri1
# %bb.0:
	movq	392(%rdi), %rax
	retq
.Lfunc_end368:
	.size	IntArray_B_any_fFunctionPtri32_to_Ptri1, .Lfunc_end368-IntArray_B_any_fFunctionPtri32_to_Ptri1
                                        # -- End function
	.globl	IntArray_B_map_fFunctionPtri32_to_Ptri32 # -- Begin function IntArray_B_map_fFunctionPtri32_to_Ptri32
	.p2align	4, 0x90
	.type	IntArray_B_map_fFunctionPtri32_to_Ptri32,@function
IntArray_B_map_fFunctionPtri32_to_Ptri32: # @IntArray_B_map_fFunctionPtri32_to_Ptri32
# %bb.0:
	movq	400(%rdi), %rax
	retq
.Lfunc_end369:
	.size	IntArray_B_map_fFunctionPtri32_to_Ptri32, .Lfunc_end369-IntArray_B_map_fFunctionPtri32_to_Ptri32
                                        # -- End function
	.globl	IntArray_B_filter_fFunctionPtri32_to_Ptri1 # -- Begin function IntArray_B_filter_fFunctionPtri32_to_Ptri1
	.p2align	4, 0x90
	.type	IntArray_B_filter_fFunctionPtri32_to_Ptri1,@function
IntArray_B_filter_fFunctionPtri32_to_Ptri1: # @IntArray_B_filter_fFunctionPtri32_to_Ptri1
# %bb.0:
	movq	408(%rdi), %rax
	retq
.Lfunc_end370:
	.size	IntArray_B_filter_fFunctionPtri32_to_Ptri1, .Lfunc_end370-IntArray_B_filter_fFunctionPtri32_to_Ptri1
                                        # -- End function
	.globl	IntArray_B_chain_otherIntIterable # -- Begin function IntArray_B_chain_otherIntIterable
	.p2align	4, 0x90
	.type	IntArray_B_chain_otherIntIterable,@function
IntArray_B_chain_otherIntIterable:      # @IntArray_B_chain_otherIntIterable
# %bb.0:
	movq	416(%rdi), %rax
	retq
.Lfunc_end371:
	.size	IntArray_B_chain_otherIntIterable, .Lfunc_end371-IntArray_B_chain_otherIntIterable
                                        # -- End function
	.globl	IntArray_B_interleave_otherIntIterable # -- Begin function IntArray_B_interleave_otherIntIterable
	.p2align	4, 0x90
	.type	IntArray_B_interleave_otherIntIterable,@function
IntArray_B_interleave_otherIntIterable: # @IntArray_B_interleave_otherIntIterable
# %bb.0:
	movq	424(%rdi), %rax
	retq
.Lfunc_end372:
	.size	IntArray_B_interleave_otherIntIterable, .Lfunc_end372-IntArray_B_interleave_otherIntIterable
                                        # -- End function
	.globl	IntArray_B_zip_otherIntIterable # -- Begin function IntArray_B_zip_otherIntIterable
	.p2align	4, 0x90
	.type	IntArray_B_zip_otherIntIterable,@function
IntArray_B_zip_otherIntIterable:        # @IntArray_B_zip_otherIntIterable
# %bb.0:
	movq	432(%rdi), %rax
	retq
.Lfunc_end373:
	.size	IntArray_B_zip_otherIntIterable, .Lfunc_end373-IntArray_B_zip_otherIntIterable
                                        # -- End function
	.globl	IntArray_B_product_otherIntIterable # -- Begin function IntArray_B_product_otherIntIterable
	.p2align	4, 0x90
	.type	IntArray_B_product_otherIntIterable,@function
IntArray_B_product_otherIntIterable:    # @IntArray_B_product_otherIntIterable
# %bb.0:
	movq	440(%rdi), %rax
	retq
.Lfunc_end374:
	.size	IntArray_B_product_otherIntIterable, .Lfunc_end374-IntArray_B_product_otherIntIterable
                                        # -- End function
	.globl	IntArray_B_iterator_            # -- Begin function IntArray_B_iterator_
	.p2align	4, 0x90
	.type	IntArray_B_iterator_,@function
IntArray_B_iterator_:                   # @IntArray_B_iterator_
# %bb.0:
	movq	448(%rdi), %rax
	retq
.Lfunc_end375:
	.size	IntArray_B_iterator_, .Lfunc_end375-IntArray_B_iterator_
                                        # -- End function
	.globl	IntArray_B_repr_                # -- Begin function IntArray_B_repr_
	.p2align	4, 0x90
	.type	IntArray_B_repr_,@function
IntArray_B_repr_:                       # @IntArray_B_repr_
# %bb.0:
	movq	456(%rdi), %rax
	retq
.Lfunc_end376:
	.size	IntArray_B_repr_, .Lfunc_end376-IntArray_B_repr_
                                        # -- End function
	.globl	IntArray__Self_from_iterable_iterableIntIterable # -- Begin function IntArray__Self_from_iterable_iterableIntIterable
	.p2align	4, 0x90
	.type	IntArray__Self_from_iterable_iterableIntIterable,@function
IntArray__Self_from_iterable_iterableIntIterable: # @IntArray__Self_from_iterable_iterableIntIterable
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$168, %rsp
	.cfi_def_cfa_offset 224
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%r8, %r15
	movq	%rcx, %rbx
	movq	%rdx, %r12
	movq	%rdi, 40(%rsp)                  # 8-byte Spill
	movq	40(%rdx), %rax
	movabsq	$-7984962120415158575, %rcx     # imm = 0x912FB741F3B45ED1
	imulq	8(%rdx), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%r12), %rdx
	movslq	(%rax,%rdx,4), %r13
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %r14
	movl	$4, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %rbp
	movl	$16, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r14
	movq	%rbp, (%rax)
	movabsq	$4294967296, %rax               # imm = 0x100000000
	movq	%rax, 8(%r14)
	leaq	8(%rsp), %rbp
	movq	%r12, %rdi
	movq	%rbx, %rsi
	movq	%r15, %rdx
	movl	%r13d, %ecx
	movq	%rbp, %r8
	callq	*80(%r12,%r13,8)
	leaq	112(%rsp), %rdi
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	%r15, %rcx
	movl	%r13d, %r8d
	movq	%r12, %r9
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	128(%rsp), %r15
	movq	112(%rsp), %r13
	movq	120(%rsp), %r12
	movq	40(%r13), %rax
	movabsq	$-933084275656658555, %rcx      # imm = 0xF30D04CB83FB7185
	imulq	8(%r13), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%r13), %rdx
	movslq	(%rax,%rdx,4), %rbx
	movq	%r13, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%ebx, %ecx
	movq	%rbp, %r8
	callq	*(%r13,%rbx,8)
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	movq	%r13, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%ebx, %ecx
	movq	%r13, %r8
	movq	%r12, 56(%rsp)                  # 8-byte Spill
	movq	%r12, %r9
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	movq	%r15, 80(%rsp)                  # 8-byte Spill
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	cmpq	nil_typ@GOTPCREL(%rip), %rax
	sete	%cl
	testq	%rax, %rax
	sete	%al
	orb	%cl, %al
	jne	.LBB377_12
# %bb.1:                                # %._crit_edge.preheader
	movl	%edx, %r15d
	.p2align	4, 0x90
.LBB377_2:                              # %._crit_edge
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB377_7 Depth 2
	movl	8(%r14), %ebp
	movl	12(%r14), %eax
	cmpl	%eax, %ebp
	movq	(%r14), %r12
	jge	.LBB377_4
# %bb.3:                                #   in Loop: Header=BB377_2 Depth=1
	leaq	144(%rsp), %rax
	leaq	88(%rsp), %rcx
	leaq	152(%rsp), %rdx
	leaq	96(%rsp), %rsi
	leaq	100(%rsp), %rdi
	leaq	104(%rsp), %r8
	leaq	108(%rsp), %r9
	leaq	160(%rsp), %r10
	jmp	.LBB377_10
	.p2align	4, 0x90
.LBB377_4:                              #   in Loop: Header=BB377_2 Depth=1
	addl	%eax, %eax
	movl	%eax, 12(%r14)
	movslq	%eax, %rdi
	shlq	$2, %rdi
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, (%r14)
	testl	%ebp, %ebp
	jle	.LBB377_5
# %bb.6:                                # %.lr.ph
                                        #   in Loop: Header=BB377_2 Depth=1
	xorl	%eax, %eax
	.p2align	4, 0x90
.LBB377_7:                              # %._crit_edge.i
                                        #   Parent Loop BB377_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%r14), %rcx
	movl	(%r12,%rax,4), %edx
	movl	%edx, (%rcx,%rax,4)
	movl	8(%r14), %ebp
	incq	%rax
	cmpl	%ebp, %eax
	jl	.LBB377_7
# %bb.8:                                # %IntArray_append_xPtri32.exit.loopexit
                                        #   in Loop: Header=BB377_2 Depth=1
	movq	(%r14), %r12
	jmp	.LBB377_9
.LBB377_5:                              #   in Loop: Header=BB377_2 Depth=1
	movq	%rax, %r12
.LBB377_9:                              # %IntArray_append_xPtri32.exit
                                        #   in Loop: Header=BB377_2 Depth=1
	leaq	64(%rsp), %rax
	leaq	16(%rsp), %rcx
	leaq	72(%rsp), %rdx
	leaq	24(%rsp), %rsi
	leaq	28(%rsp), %rdi
	leaq	32(%rsp), %r8
	leaq	36(%rsp), %r9
	leaq	80(%rsp), %r10
.LBB377_10:                             # %IntArray_append_xPtri32.exit
                                        #   in Loop: Header=BB377_2 Depth=1
	movq	%r12, (%r10)
	movl	%ebp, (%r9)
	movslq	%ebp, %r9
	movl	%r15d, (%r12,%r9,4)
	movl	8(%r14), %r9d
	movl	%r9d, (%r8)
	movl	$1, (%rdi)
	incl	%r9d
	movl	%r9d, (%rsi)
	movl	%r9d, 8(%r14)
	movq	IntArray@GOTPCREL(%rip), %rsi
	movq	%rsi, (%rdx)
	movq	%r14, (%rax)
	movl	$9, (%rcx)
	movq	%r13, %rdi
	movq	48(%rsp), %rbp                  # 8-byte Reload
	movq	%rbp, %rsi
	movq	56(%rsp), %r12                  # 8-byte Reload
	movq	%r12, %rdx
	movl	%ebx, %ecx
	leaq	8(%rsp), %r15
	movq	%r15, %r8
	callq	*(%r13,%rbx,8)
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	movq	%r13, %rdi
	movq	%rbp, %rsi
	movq	%r12, %rdx
	movl	%ebx, %ecx
	movq	%r13, %r8
	movq	%rbp, %r9
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	cmpq	nil_typ@GOTPCREL(%rip), %rax
	je	.LBB377_12
# %bb.11:                               # %IntArray_append_xPtri32.exit
                                        #   in Loop: Header=BB377_2 Depth=1
	movl	%edx, %r15d
	testq	%rax, %rax
	jne	.LBB377_2
.LBB377_12:                             # %.critedge
	movq	IntArray@GOTPCREL(%rip), %rcx
	movq	40(%rsp), %rax                  # 8-byte Reload
	movq	%r14, 8(%rax)
	movq	%rcx, (%rax)
	movl	$9, 24(%rax)
	addq	$168, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end377:
	.size	IntArray__Self_from_iterable_iterableIntIterable, .Lfunc_end377-IntArray__Self_from_iterable_iterableIntIterable
	.cfi_endproc
                                        # -- End function
	.globl	IntArray_init_                  # -- Begin function IntArray_init_
	.p2align	4, 0x90
	.type	IntArray_init_,@function
IntArray_init_:                         # @IntArray_init_
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movq	40(%rdi), %rax
	movabsq	$7629948565578263212, %rcx      # imm = 0x69E305CB91CB2AAC
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %r15
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	movl	$4, %edi
	callq	bump_malloc_inner@PLT
	movq	(%r14,%r15,8), %rcx
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	*8(%rcx)
	movq	16(%r14,%r15,8), %rax
	movq	%rbx, %rdi
	movl	$1, %esi
	callq	*8(%rax)
	movq	8(%r14,%r15,8), %rax
	movq	8(%rax), %rax
	movq	%rbx, %rdi
	xorl	%esi, %esi
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	jmpq	*%rax                           # TAILCALL
.Lfunc_end378:
	.size	IntArray_init_, .Lfunc_end378-IntArray_init_
	.cfi_endproc
                                        # -- End function
	.globl	IntArray_init_bufferBufferPtri32_lengthPtri32_capacityPtri32 # -- Begin function IntArray_init_bufferBufferPtri32_lengthPtri32_capacityPtri32
	.p2align	4, 0x90
	.type	IntArray_init_bufferBufferPtri32_lengthPtri32_capacityPtri32,@function
IntArray_init_bufferBufferPtri32_lengthPtri32_capacityPtri32: # @IntArray_init_bufferBufferPtri32_lengthPtri32_capacityPtri32
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r12
	.cfi_def_cfa_offset 40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movl	88(%rsp), %ebp
	movl	80(%rsp), %r15d
	movq	72(%rsp), %rsi
	movq	40(%rdi), %rax
	movabsq	$7629948565578263212, %rcx      # imm = 0x69E305CB91CB2AAC
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %r12
	movq	(%rdi,%r12,8), %rax
	movq	%rbx, %rdi
	callq	*8(%rax)
	movq	8(%r14,%r12,8), %rax
	movq	%rbx, %rdi
	movl	%r15d, %esi
	callq	*8(%rax)
	movq	16(%r14,%r12,8), %rax
	movq	8(%rax), %rax
	movq	%rbx, %rdi
	movl	%ebp, %esi
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	jmpq	*%rax                           # TAILCALL
.Lfunc_end379:
	.size	IntArray_init_bufferBufferPtri32_lengthPtri32_capacityPtri32, .Lfunc_end379-IntArray_init_bufferBufferPtri32_lengthPtri32_capacityPtri32
	.cfi_endproc
                                        # -- End function
	.globl	IntArray_length_                # -- Begin function IntArray_length_
	.p2align	4, 0x90
	.type	IntArray_length_,@function
IntArray_length_:                       # @IntArray_length_
	.cfi_startproc
# %bb.0:
	movq	40(%rdi), %rax
	movabsq	$7629948565578263212, %rcx      # imm = 0x69E305CB91CB2AAC
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %rax
	movq	8(%rdi,%rax,8), %rax
	movq	%rsi, %rdi
	jmpq	*(%rax)                         # TAILCALL
.Lfunc_end380:
	.size	IntArray_length_, .Lfunc_end380-IntArray_length_
	.cfi_endproc
                                        # -- End function
	.globl	IntArray_capacity_              # -- Begin function IntArray_capacity_
	.p2align	4, 0x90
	.type	IntArray_capacity_,@function
IntArray_capacity_:                     # @IntArray_capacity_
	.cfi_startproc
# %bb.0:
	movq	40(%rdi), %rax
	movabsq	$7629948565578263212, %rcx      # imm = 0x69E305CB91CB2AAC
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %rax
	movq	16(%rdi,%rax,8), %rax
	movq	%rsi, %rdi
	jmpq	*(%rax)                         # TAILCALL
.Lfunc_end381:
	.size	IntArray_capacity_, .Lfunc_end381-IntArray_capacity_
	.cfi_endproc
                                        # -- End function
	.globl	IntArray_buffer_                # -- Begin function IntArray_buffer_
	.p2align	4, 0x90
	.type	IntArray_buffer_,@function
IntArray_buffer_:                       # @IntArray_buffer_
	.cfi_startproc
# %bb.0:
	movq	40(%rdi), %rax
	movabsq	$7629948565578263212, %rcx      # imm = 0x69E305CB91CB2AAC
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %rax
	movq	(%rdi,%rax,8), %rax
	movq	%rsi, %rdi
	jmpq	*(%rax)                         # TAILCALL
.Lfunc_end382:
	.size	IntArray_buffer_, .Lfunc_end382-IntArray_buffer_
	.cfi_endproc
                                        # -- End function
	.globl	IntArray_append_xPtri32         # -- Begin function IntArray_append_xPtri32
	.p2align	4, 0x90
	.type	IntArray_append_xPtri32,@function
IntArray_append_xPtri32:                # @IntArray_append_xPtri32
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$184, %rsp
	.cfi_def_cfa_offset 240
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rcx, 80(%rsp)                  # 8-byte Spill
	movq	%rdx, %r14
	movq	%rsi, %rbx
	movq	%rdi, %r13
	movabsq	$7629948565578263212, %rdx      # imm = 0x69E305CB91CB2AAC
	movq	40(%rsi), %rax
	movq	8(%rsi), %rcx
	imulq	%rdx, %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rsi), %rdx
	movl	(%rax,%rdx,4), %eax
	movslq	%eax, %r15
	movq	8(%rsi,%r15,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movl	%eax, %ebp
	movq	16(%rbx,%r15,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	cmpl	%eax, %ebp
	jge	.LBB383_2
# %bb.1:
	leaq	176(%rsp), %r12
	leaq	140(%rsp), %rbp
	leaq	136(%rsp), %rax
	movq	%rax, 8(%rsp)                   # 8-byte Spill
	leaq	132(%rsp), %rax
	movq	%rax, (%rsp)                    # 8-byte Spill
	leaq	128(%rsp), %rax
	movq	%rax, 16(%rsp)                  # 8-byte Spill
	leaq	168(%rsp), %rax
	movq	%rax, 32(%rsp)                  # 8-byte Spill
	leaq	120(%rsp), %rax
	movq	%rax, 72(%rsp)                  # 8-byte Spill
	leaq	152(%rsp), %rax
	movq	%rax, 24(%rsp)                  # 8-byte Spill
	leaq	160(%rsp), %rax
	movq	%rax, 64(%rsp)                  # 8-byte Spill
	jmp	.LBB383_6
.LBB383_2:
	movq	%r13, 56(%rsp)                  # 8-byte Spill
	movq	16(%rbx,%r15,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
                                        # kill: def $eax killed $eax def $rax
	leal	(%rax,%rax), %esi
	movq	16(%rbx,%r15,8), %rax
	movq	%r14, %rdi
	callq	*8(%rax)
	movq	(%rbx,%r15,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movq	%rax, %r13
	movq	16(%rbx,%r15,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movslq	%eax, %rdi
	shlq	$2, %rdi
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	callq	bump_malloc_inner@PLT
	movq	(%rbx,%r15,8), %rcx
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	*8(%rcx)
	movq	8(%rbx,%r15,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	leaq	88(%rsp), %rcx
	leaq	144(%rsp), %r12
	testl	%eax, %eax
	movq	%rcx, 72(%rsp)                  # 8-byte Spill
	movq	%r12, 64(%rsp)                  # 8-byte Spill
	jle	.LBB383_5
# %bb.3:                                # %.lr.ph
	xorl	%ebp, %ebp
	.p2align	4, 0x90
.LBB383_4:                              # %._crit_edge
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rbx,%r15,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movl	(%r13,%rbp,4), %ecx
	movl	%ecx, (%rax,%rbp,4)
	movq	8(%rbx,%r15,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	incq	%rbp
	cmpl	%eax, %ebp
	jl	.LBB383_4
.LBB383_5:
	movq	56(%rsp), %r13                  # 8-byte Reload
	leaq	104(%rsp), %rax
	movq	%rax, 32(%rsp)                  # 8-byte Spill
	leaq	96(%rsp), %rax
	movq	%rax, 24(%rsp)                  # 8-byte Spill
	leaq	40(%rsp), %rax
	movq	%rax, 16(%rsp)                  # 8-byte Spill
	leaq	48(%rsp), %rax
	movq	%rax, 8(%rsp)                   # 8-byte Spill
	leaq	44(%rsp), %rax
	movq	%rax, (%rsp)                    # 8-byte Spill
	leaq	112(%rsp), %r12
	leaq	52(%rsp), %rbp
.LBB383_6:                              # %.thread
	movq	(%rbx,%r15,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movq	%rax, (%r12)
	movq	8(%rbx,%r15,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movl	%eax, (%rbp)
	movq	(%r12), %rcx
	cltq
	movl	272(%rsp), %edx
	movl	%edx, (%rcx,%rax,4)
	movq	8(%rbx,%r15,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
                                        # kill: def $eax killed $eax def $rax
	movq	8(%rsp), %rcx                   # 8-byte Reload
	movl	%eax, (%rcx)
	movq	(%rsp), %rcx                    # 8-byte Reload
	movl	$1, (%rcx)
	leal	1(%rax), %esi
	movq	16(%rsp), %rax                  # 8-byte Reload
	movl	%esi, (%rax)
	movq	8(%rbx,%r15,8), %rax
	movq	%r14, %rdi
	callq	*8(%rax)
	movq	32(%rsp), %rax                  # 8-byte Reload
	movq	%rbx, (%rax)
	movq	64(%rsp), %rax                  # 8-byte Reload
	movq	%r14, (%rax)
	movq	80(%rsp), %rdx                  # 8-byte Reload
	movq	24(%rsp), %rax                  # 8-byte Reload
	movq	%rdx, (%rax)
	movq	72(%rsp), %rdi                  # 8-byte Reload
	movl	%r15d, (%rdi)
	movq	40(%rbx), %rax
	movabsq	$7629948565578263212, %rsi      # imm = 0x69E305CB91CB2AAC
	imulq	8(%rbx), %rsi
	movq	%rsi, %rcx
	shrq	$32, %rcx
	xorq	%rsi, %rcx
	andq	16(%rbx), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, (%rdi)
	movl	%eax, 24(%r13)
	movq	%rdx, 16(%r13)
	movq	%r14, 8(%r13)
	movq	%rbx, (%r13)
	movq	%r13, %rax
	addq	$184, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end383:
	.size	IntArray_append_xPtri32, .Lfunc_end383-IntArray_append_xPtri32
	.cfi_endproc
                                        # -- End function
	.globl	IntArray_extend_aryIntArray     # -- Begin function IntArray_extend_aryIntArray
	.p2align	4, 0x90
	.type	IntArray_extend_aryIntArray,@function
IntArray_extend_aryIntArray:            # @IntArray_extend_aryIntArray
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$168, %rsp
	.cfi_def_cfa_offset 224
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rcx, 64(%rsp)                  # 8-byte Spill
	movq	%rdx, %r14
	movq	%rsi, %rbx
	movq	%rdi, 72(%rsp)                  # 8-byte Spill
	movq	264(%rsp), %r13
	movq	272(%rsp), %rdx
	movq	256(%rsp), %r12
	movabsq	$7629948565578263212, %rdi      # imm = 0x69E305CB91CB2AAC
	movq	40(%rsi), %rax
	movq	8(%rsi), %rcx
	imulq	%rdi, %rcx
	movq	%rcx, %r8
	shrq	$32, %r8
	xorq	%rcx, %r8
	andq	16(%rsi), %r8
	movl	(%rax,%r8,4), %eax
	movl	%eax, 4(%rsp)                   # 4-byte Spill
	movq	40(%r12), %rax
	movq	8(%r12), %rcx
	imulq	%rdi, %rcx
	movq	%rcx, %rdi
	shrq	$32, %rdi
	xorq	%rcx, %rdi
	andq	16(%r12), %rdi
	movslq	(%rax,%rdi,4), %r15
	movq	%rsp, %rbp
	movq	%r12, %rdi
	movq	%r13, %rsi
	movl	%r15d, %ecx
	movq	%rbp, %r8
	callq	*64(%r12,%r15,8)
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	movq	%r12, %rdi
	movq	%r13, %rsi
	movq	280(%rsp), %rdx
	movl	%r15d, %ecx
	movq	%r12, %r8
	movq	%r13, %r9
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	pushq	%rdx
	movq	%rdx, %rbp
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	%rax, 56(%rsp)
	movq	%r12, %rdi
	movq	%r13, %rsi
	movq	%rbp, %rdx
	movl	%r15d, %ecx
	movq	%rsp, %r8
	callq	*48(%r12,%r15,8)
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	movq	%r12, %rdi
	movq	%r13, %rsi
	movq	%rbp, %rdx
	movl	%r15d, %ecx
	movq	%r12, %r8
	movq	%r13, %r9
	leaq	8(%rsp), %r10
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movl	%eax, %ebp
	movslq	4(%rsp), %r13                   # 4-byte Folded Reload
	movq	8(%rbx,%r13,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movl	%eax, %r12d
	addl	%ebp, %r12d
	movq	16(%rbx,%r13,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movl	%eax, %r15d
	movq	8(%rbx,%r13,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movl	%eax, %esi
	cmpl	%r15d, %r12d
	jge	.LBB384_5
# %bb.1:
	movq	8(%rbx,%r13,8), %rax
	movq	%r14, %rdi
	movl	%esi, %r15d
	callq	*(%rax)
	movl	%r15d, %edx
	addl	%ebp, %eax
	leaq	132(%rsp), %rcx
	movq	%rcx, 24(%rsp)                  # 8-byte Spill
	leaq	128(%rsp), %rcx
	movq	%rcx, 32(%rsp)                  # 8-byte Spill
	leaq	112(%rsp), %r12
	leaq	16(%rsp), %r15
	leaq	152(%rsp), %rcx
	movq	%rcx, 48(%rsp)                  # 8-byte Spill
	leaq	160(%rsp), %rcx
	movq	%rcx, 40(%rsp)                  # 8-byte Spill
	cmpl	%eax, %edx
	jge	.LBB384_12
# %bb.2:                                # %.lr.ph146
	movq	56(%rsp), %r15
	movslq	%edx, %r12
	movl	%ebp, 4(%rsp)                   # 4-byte Spill
	xorl	%ebp, %ebp
	.p2align	4, 0x90
.LBB384_3:                              # %._crit_edge
                                        # =>This Inner Loop Header: Depth=1
	movslq	%ebp, %rbp
	movq	(%rbx,%r13,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movl	(%r15,%rbp,4), %ecx
	movl	%ecx, (%rax,%r12,4)
	incl	%ebp
	movq	8(%rbx,%r13,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	addl	4(%rsp), %eax                   # 4-byte Folded Reload
	incq	%r12
	cmpl	%eax, %r12d
	jl	.LBB384_3
# %bb.4:
	movl	4(%rsp), %ebp                   # 4-byte Reload
	leaq	16(%rsp), %r15
	leaq	112(%rsp), %r12
	jmp	.LBB384_12
.LBB384_5:
	addl	%ebp, %esi
	movq	16(%rbx,%r13,8), %rax
	movq	%r14, %rdi
	callq	*8(%rax)
	movq	(%rbx,%r13,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movq	%rax, 104(%rsp)
	movq	16(%rbx,%r13,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movslq	%eax, %rdi
	shlq	$2, %rdi
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	callq	bump_malloc_inner@PLT
	movq	(%rbx,%r13,8), %rcx
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	*8(%rcx)
	movq	8(%rbx,%r13,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	addl	%ebp, %eax
	leaq	124(%rsp), %rcx
	movq	%rcx, 24(%rsp)                  # 8-byte Spill
	leaq	120(%rsp), %rcx
	movq	%rcx, 32(%rsp)                  # 8-byte Spill
	leaq	96(%rsp), %r12
	leaq	8(%rsp), %r15
	leaq	136(%rsp), %rcx
	movq	%rcx, 48(%rsp)                  # 8-byte Spill
	leaq	144(%rsp), %rcx
	movq	%rcx, 40(%rsp)                  # 8-byte Spill
	testl	%eax, %eax
	jle	.LBB384_12
# %bb.6:                                # %.lr.ph
	movl	%ebp, 4(%rsp)                   # 4-byte Spill
	movq	56(%rsp), %rax
	movq	%rax, 88(%rsp)                  # 8-byte Spill
	xorl	%r12d, %r12d
	movq	104(%rsp), %rax
	movq	%rax, 80(%rsp)                  # 8-byte Spill
	xorl	%ebp, %ebp
	jmp	.LBB384_7
	.p2align	4, 0x90
.LBB384_8:                              #   in Loop: Header=BB384_7 Depth=1
	movq	80(%rsp), %rcx                  # 8-byte Reload
	movl	(%rcx,%r12,4), %ecx
	movl	%ecx, (%rax,%r12,4)
.LBB384_10:                             # %._crit_edge1
                                        #   in Loop: Header=BB384_7 Depth=1
	movq	8(%rbx,%r13,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	addl	4(%rsp), %eax                   # 4-byte Folded Reload
	incq	%r12
	cmpl	%eax, %r12d
	jge	.LBB384_11
.LBB384_7:                              # =>This Inner Loop Header: Depth=1
	movq	8(%rbx,%r13,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movl	%eax, %r15d
	movq	(%rbx,%r13,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	cmpl	%r15d, %r12d
	jl	.LBB384_8
# %bb.9:                                #   in Loop: Header=BB384_7 Depth=1
	movslq	%ebp, %rbp
	movq	88(%rsp), %rcx                  # 8-byte Reload
	movl	(%rcx,%rbp,4), %ecx
	movl	%ecx, (%rax,%r12,4)
	incl	%ebp
	jmp	.LBB384_10
.LBB384_11:
	movl	4(%rsp), %ebp                   # 4-byte Reload
	leaq	8(%rsp), %r15
	leaq	96(%rsp), %r12
.LBB384_12:                             # %.thread
	movq	8(%rbx,%r13,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movq	24(%rsp), %rcx                  # 8-byte Reload
	movl	%eax, (%rcx)
	addl	%eax, %ebp
	movq	32(%rsp), %rax                  # 8-byte Reload
	movl	%ebp, (%rax)
	movq	8(%rbx,%r13,8), %rax
	movq	%r14, %rdi
	movl	%ebp, %esi
	callq	*8(%rax)
	movq	%rbx, (%r12)
	movq	40(%rsp), %rax                  # 8-byte Reload
	movq	%r14, (%rax)
	movq	64(%rsp), %rdx                  # 8-byte Reload
	movq	48(%rsp), %rax                  # 8-byte Reload
	movq	%rdx, (%rax)
	movl	%r13d, (%r15)
	movq	40(%rbx), %rax
	movabsq	$7629948565578263212, %rsi      # imm = 0x69E305CB91CB2AAC
	imulq	8(%rbx), %rsi
	movq	%rsi, %rcx
	shrq	$32, %rcx
	xorq	%rsi, %rcx
	andq	16(%rbx), %rcx
	movl	(%rax,%rcx,4), %ecx
	movl	%ecx, (%r15)
	movq	72(%rsp), %rax                  # 8-byte Reload
	movl	%ecx, 24(%rax)
	movq	%rdx, 16(%rax)
	movq	%r14, 8(%rax)
	movq	%rbx, (%rax)
	addq	$168, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end384:
	.size	IntArray_extend_aryIntArray, .Lfunc_end384-IntArray_extend_aryIntArray
	.cfi_endproc
                                        # -- End function
	.globl	IntArray__index_xPtri32         # -- Begin function IntArray__index_xPtri32
	.p2align	4, 0x90
	.type	IntArray__index_xPtri32,@function
IntArray__index_xPtri32:                # @IntArray__index_xPtri32
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$120, %rsp
	.cfi_def_cfa_offset 176
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rsi, %r15
	movq	%rdi, %rbp
	movl	200(%rsp), %r12d
	movq	40(%rdi), %rax
	movabsq	$7629948565578263212, %rcx      # imm = 0x69E305CB91CB2AAC
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %r14
	movq	8(%rdi,%r14,8), %rax
	movq	%rsi, %rdi
	callq	*(%rax)
	decl	%eax
	cmpl	%eax, %r12d
	jle	.LBB385_2
# %bb.1:
	movq	8(%rbp,%r14,8), %rax
	movq	%r15, %rdi
	callq	*(%rax)
	movq	%fs:0, %r13
	movq	%r14, 8(%rsp)                   # 8-byte Spill
	leaq	current_ptr@TPOFF(%r13), %r14
	movl	$104, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %rbx
	movq	OutOfBounds@GOTPCREL(%rip), %rax
	movq	%rax, 88(%rsp)
	movq	%rbx, 96(%rsp)
	movl	$9, 112(%rsp)
	movq	8(%rsp), %rax                   # 8-byte Reload
	movq	8(%rbp,%rax,8), %rax
	movq	%r15, %rdi
	callq	*(%rax)
	movq	%r15, 16(%rsp)                  # 8-byte Spill
	movl	%eax, %r15d
	movl	$8, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	OutOfBoundsDetails@GOTPCREL(%rip), %rcx
	movq	%rcx, 24(%rsp)
	movq	%rax, 32(%rsp)
	movl	$9, 48(%rsp)
	movl	%r15d, (%rax)
	movl	%r12d, 4(%rax)
	movq	32(%rsp), %rax
	movq	40(%rsp), %rdx
	movl	48(%rsp), %esi
	movq	%rcx, (%rbx)
	movl	%esi, 24(%rbx)
	movq	%rax, 8(%rbx)
	movq	%rdx, 16(%rbx)
	movl	$66, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r15
	movaps	fijgh_An_outofbounds_error_occurred_while_indexing_into_a_collection(%rip), %xmm0
	movaps	fijgh_An_outofbounds_error_occurred_while_indexing_into_a_collection+16(%rip), %xmm1
	movaps	fijgh_An_outofbounds_error_occurred_while_indexing_into_a_collection+32(%rip), %xmm2
	movaps	fijgh_An_outofbounds_error_occurred_while_indexing_into_a_collection+48(%rip), %xmm3
	movzbl	fijgh_An_outofbounds_error_occurred_while_indexing_into_a_collection+64(%rip), %eax
	movb	%al, 64(%r15)
	movaps	%xmm3, 48(%r15)
	movaps	%xmm2, 32(%r15)
	movaps	%xmm1, 16(%r15)
	movaps	%xmm0, (%r15)
	movl	$16, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	%r15, (%rax)
	movabsq	$283467841601, %rcx             # imm = 0x4200000041
	movq	%rcx, 8(%rax)
	movq	String@GOTPCREL(%rip), %r12
	movq	%r12, 72(%rbx)
	movq	%rax, 80(%rbx)
	movl	$9, 96(%rbx)
	movl	$11, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r15
	movabsq	$7596779219853731188, %rax      # imm = 0x696D2E7374736574
	movq	%rax, (%r15)
	movw	$26990, 8(%r15)                 # imm = 0x696E
	movl	$16, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	%r15, (%rax)
	movabsq	$47244640266, %rcx              # imm = 0xB0000000A
	movq	%rcx, 8(%rax)
	movl	$617, 32(%rbx)                  # imm = 0x269
	movq	%r12, 40(%rbx)
	movq	%rax, 48(%rbx)
	movl	$9, 64(%rbx)
	movq	96(%rsp), %rax
	movq	104(%rsp), %rcx
	movl	112(%rsp), %edx
	movq	current_coroutine@GOTTPOFF(%rip), %rsi
	movq	(%r13,%rsi), %r12
	movl	%edx, 80(%r12)
	movq	%rax, 64(%r12)
	movq	%rcx, 72(%r12)
	movq	OutOfBounds@GOTPCREL(%rip), %rax
	movq	%rax, 48(%r12)
	addq	$8, %r12
	addq	into_caller_buf@GOTTPOFF(%rip), %r13
	callq	context_switch@PLT
	movq	8(%rsp), %r14                   # 8-byte Reload
	movq	16(%rsp), %r15                  # 8-byte Reload
	movl	200(%rsp), %r12d
.LBB385_2:                              # %._crit_edge
	testl	%r12d, %r12d
	js	.LBB385_4
# %bb.3:
	movq	(%rbp,%r14,8), %rax
	movq	%r15, %rdi
	callq	*(%rax)
	movq	%rax, %rbx
	movl	%r12d, %eax
	jmp	.LBB385_7
.LBB385_4:
	movq	8(%rbp,%r14,8), %rax
	movq	%r15, %rdi
	callq	*(%rax)
	addl	%r12d, %eax
	jns	.LBB385_6
# %bb.5:
	movq	8(%rbp,%r14,8), %rax
	movq	%r15, %rdi
	callq	*(%rax)
	movq	%fs:0, %r13
	movq	%r14, 8(%rsp)                   # 8-byte Spill
	leaq	current_ptr@TPOFF(%r13), %r14
	movl	$104, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %rbx
	movq	OutOfBounds@GOTPCREL(%rip), %rax
	movq	%rax, 56(%rsp)
	movq	%rbx, 64(%rsp)
	movl	$9, 80(%rsp)
	movq	8(%rsp), %rax                   # 8-byte Reload
	movq	8(%rbp,%rax,8), %rax
	movq	%r15, %rdi
	callq	*(%rax)
	movq	%r15, 16(%rsp)                  # 8-byte Spill
	movl	%eax, %r15d
	movl	$8, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	OutOfBoundsDetails@GOTPCREL(%rip), %rcx
	movq	%rcx, 24(%rsp)
	movq	%rax, 32(%rsp)
	movl	$9, 48(%rsp)
	movl	%r15d, (%rax)
	movl	%r12d, 4(%rax)
	movq	32(%rsp), %rax
	movq	40(%rsp), %rdx
	movl	48(%rsp), %esi
	movq	%rcx, (%rbx)
	movl	%esi, 24(%rbx)
	movq	%rax, 8(%rbx)
	movq	%rdx, 16(%rbx)
	movl	$66, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r15
	movaps	fijgh_An_outofbounds_error_occurred_while_indexing_into_a_collection(%rip), %xmm0
	movaps	fijgh_An_outofbounds_error_occurred_while_indexing_into_a_collection+16(%rip), %xmm1
	movaps	fijgh_An_outofbounds_error_occurred_while_indexing_into_a_collection+32(%rip), %xmm2
	movaps	fijgh_An_outofbounds_error_occurred_while_indexing_into_a_collection+48(%rip), %xmm3
	movzbl	fijgh_An_outofbounds_error_occurred_while_indexing_into_a_collection+64(%rip), %eax
	movb	%al, 64(%r15)
	movaps	%xmm3, 48(%r15)
	movaps	%xmm2, 32(%r15)
	movaps	%xmm1, 16(%r15)
	movaps	%xmm0, (%r15)
	movl	$16, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	%r15, (%rax)
	movabsq	$283467841601, %rcx             # imm = 0x4200000041
	movq	%rcx, 8(%rax)
	movq	String@GOTPCREL(%rip), %r12
	movq	%r12, 72(%rbx)
	movq	%rax, 80(%rbx)
	movl	$9, 96(%rbx)
	movl	$11, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r15
	movabsq	$7596779219853731188, %rax      # imm = 0x696D2E7374736574
	movq	%rax, (%r15)
	movw	$26990, 8(%r15)                 # imm = 0x696E
	movl	$16, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	%r15, (%rax)
	movabsq	$47244640266, %rcx              # imm = 0xB0000000A
	movq	%rcx, 8(%rax)
	movl	$619, 32(%rbx)                  # imm = 0x26B
	movq	%r12, 40(%rbx)
	movq	%rax, 48(%rbx)
	movl	$9, 64(%rbx)
	movq	64(%rsp), %rax
	movq	72(%rsp), %rcx
	movl	80(%rsp), %edx
	movq	current_coroutine@GOTTPOFF(%rip), %rsi
	movq	(%r13,%rsi), %r12
	movl	%edx, 80(%r12)
	movq	%rax, 64(%r12)
	movq	%rcx, 72(%r12)
	movq	OutOfBounds@GOTPCREL(%rip), %rax
	movq	%rax, 48(%r12)
	addq	$8, %r12
	addq	into_caller_buf@GOTTPOFF(%rip), %r13
	callq	context_switch@PLT
	movq	8(%rsp), %r14                   # 8-byte Reload
	movq	16(%rsp), %r15                  # 8-byte Reload
	movl	200(%rsp), %r12d
.LBB385_6:                              # %._crit_edge1
	movq	(%rbp,%r14,8), %rax
	movq	%r15, %rdi
	callq	*(%rax)
	movq	%rax, %rbx
	movq	8(%rbp,%r14,8), %rax
	movq	%r15, %rdi
	callq	*(%rax)
	addl	%r12d, %eax
	cltq
.LBB385_7:
	movl	(%rbx,%rax,4), %eax
	addq	$120, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end385:
	.size	IntArray__index_xPtri32, .Lfunc_end385-IntArray__index_xPtri32
	.cfi_endproc
                                        # -- End function
	.globl	IntArray_pop_                   # -- Begin function IntArray_pop_
	.p2align	4, 0x90
	.type	IntArray_pop_,@function
IntArray_pop_:                          # @IntArray_pop_
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r12
	.cfi_def_cfa_offset 32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	pushq	%rax
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -40
	.cfi_offset %r12, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movq	40(%rdi), %rax
	movabsq	$7629948565578263212, %rcx      # imm = 0x69E305CB91CB2AAC
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %r12
	movq	8(%rdi,%r12,8), %rax
	movq	%rsi, %rdi
	callq	*(%rax)
	testl	%eax, %eax
	je	.LBB386_1
# %bb.2:
	movq	8(%r14,%r12,8), %rax
	movq	%rbx, %rdi
	callq	*(%rax)
                                        # kill: def $eax killed $eax def $rax
	leal	-1(%rax), %esi
	movq	8(%r14,%r12,8), %rax
	movq	%rbx, %rdi
	callq	*8(%rax)
	movq	(%r14,%r12,8), %rax
	movq	%rbx, %rdi
	callq	*(%rax)
	movq	%rax, %r15
	movq	8(%r14,%r12,8), %rax
	movq	%rbx, %rdi
	callq	*(%rax)
	cltq
	movl	(%r15,%rax,4), %edx
	movq	i32_typ@GOTPCREL(%rip), %rax
	jmp	.LBB386_3
.LBB386_1:
	movq	nil_typ@GOTPCREL(%rip), %rax
                                        # implicit-def: $edx
.LBB386_3:
	addq	$8, %rsp
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end386:
	.size	IntArray_pop_, .Lfunc_end386-IntArray_pop_
	.cfi_endproc
                                        # -- End function
	.globl	IntArray_copy_                  # -- Begin function IntArray_copy_
	.p2align	4, 0x90
	.type	IntArray_copy_,@function
IntArray_copy_:                         # @IntArray_copy_
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	pushq	%rax
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, (%rsp)                    # 8-byte Spill
	movq	40(%rsi), %rax
	movabsq	$7629948565578263212, %rcx      # imm = 0x69E305CB91CB2AAC
	imulq	8(%rsi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rsi), %rdx
	movslq	(%rax,%rdx,4), %rbx
	movq	8(%rsi,%rbx,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movslq	%eax, %rdi
	shlq	$2, %rdi
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r12
	movq	8(%r15,%rbx,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	testl	%eax, %eax
	jle	.LBB387_3
# %bb.1:                                # %.lr.ph
	xorl	%r13d, %r13d
	.p2align	4, 0x90
.LBB387_2:                              # %._crit_edge
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r15,%rbx,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movl	(%rax,%r13,4), %eax
	movl	%eax, (%r12,%r13,4)
	movq	8(%r15,%rbx,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	incq	%r13
	cmpl	%eax, %r13d
	jl	.LBB387_2
.LBB387_3:                              # %._crit_edge._crit_edge
	movq	8(%r15,%rbx,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movq	8(%r15,%rbx,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	movl	$16, %edi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r13
	movq	8(%r15,%rbx,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movl	%eax, %ebp
	movq	8(%r15,%rbx,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movq	IntArray@GOTPCREL(%rip), %rcx
	movq	%r12, (%r13)
	movl	%ebp, 8(%r13)
	movl	%eax, 12(%r13)
	movq	(%rsp), %rax                    # 8-byte Reload
	movq	%rcx, (%rax)
	movq	%r13, 8(%rax)
	movl	$9, 24(%rax)
	addq	$8, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end387:
	.size	IntArray_copy_, .Lfunc_end387-IntArray_copy_
	.cfi_endproc
                                        # -- End function
	.globl	IntArray_map_fFunctionPtri32_to_Ptri32 # -- Begin function IntArray_map_fFunctionPtri32_to_Ptri32
	.p2align	4, 0x90
	.type	IntArray_map_fFunctionPtri32_to_Ptri32,@function
IntArray_map_fFunctionPtri32_to_Ptri32: # @IntArray_map_fFunctionPtri32_to_Ptri32
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	pushq	%rax
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, (%rsp)                    # 8-byte Spill
	movq	40(%rsi), %rax
	movabsq	$7629948565578263212, %rcx      # imm = 0x69E305CB91CB2AAC
	imulq	8(%rsi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rsi), %rdx
	movslq	(%rax,%rdx,4), %rbx
	movq	8(%rsi,%rbx,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movslq	%eax, %rdi
	shlq	$2, %rdi
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r12
	movq	8(%r15,%rbx,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	testl	%eax, %eax
	jle	.LBB388_3
# %bb.1:                                # %.lr.ph
	movq	96(%rsp), %r13
	xorl	%ebp, %ebp
	.p2align	4, 0x90
.LBB388_2:                              # %._crit_edge
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r15,%rbx,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movl	(%rax,%rbp,4), %edi
	callq	*%r13
	movl	%eax, (%r12,%rbp,4)
	movq	8(%r15,%rbx,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	incq	%rbp
	cmpl	%eax, %ebp
	jl	.LBB388_2
.LBB388_3:                              # %._crit_edge._crit_edge
	movq	8(%r15,%rbx,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movq	8(%r15,%rbx,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	movl	$16, %edi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r13
	movq	8(%r15,%rbx,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movl	%eax, %ebp
	movq	8(%r15,%rbx,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movq	IntArray@GOTPCREL(%rip), %rcx
	movq	%r12, (%r13)
	movl	%ebp, 8(%r13)
	movl	%eax, 12(%r13)
	movq	(%rsp), %rax                    # 8-byte Reload
	movq	%rcx, (%rax)
	movq	%r13, 8(%rax)
	movl	$58, 24(%rax)
	addq	$8, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end388:
	.size	IntArray_map_fFunctionPtri32_to_Ptri32, .Lfunc_end388-IntArray_map_fFunctionPtri32_to_Ptri32
	.cfi_endproc
                                        # -- End function
	.globl	IntArray_iterator_              # -- Begin function IntArray_iterator_
	.p2align	4, 0x90
	.type	IntArray_iterator_,@function
IntArray_iterator_:                     # @IntArray_iterator_
# %bb.0:
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	movq	%rcx, %rbx
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %r12
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	movl	$40, %edi
	callq	bump_malloc_inner@PLT
	movq	IntArrayIterator@GOTPCREL(%rip), %rcx
	movq	40(%r15), %rdx
	movabsq	$7629948565578263212, %rsi      # imm = 0x69E305CB91CB2AAC
	imulq	8(%r15), %rsi
	movq	%rsi, %rdi
	shrq	$32, %rdi
	xorq	%rsi, %rdi
	andq	16(%r15), %rdi
	movl	(%rdx,%rdi,4), %edx
	movq	%r15, (%rax)
	movq	%r14, 8(%rax)
	movq	%rbx, 16(%rax)
	movl	%edx, 24(%rax)
	movl	$0, 32(%rax)
	movq	%rax, 8(%r12)
	movq	%rcx, (%r12)
	movl	$17, 24(%r12)
	movq	%r12, %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	retq
.Lfunc_end389:
	.size	IntArray_iterator_, .Lfunc_end389-IntArray_iterator_
                                        # -- End function
	.globl	_size_IntArrayIterator          # -- Begin function _size_IntArrayIterator
	.p2align	4, 0x90
	.type	_size_IntArrayIterator,@function
_size_IntArrayIterator:                 # @_size_IntArrayIterator
# %bb.0:
	movl	$40, %eax
	movl	$8, %edx
	retq
.Lfunc_end390:
	.size	_size_IntArrayIterator, .Lfunc_end390-_size_IntArrayIterator
                                        # -- End function
	.globl	IntArrayIterator_B_init_arrayIntArray # -- Begin function IntArrayIterator_B_init_arrayIntArray
	.p2align	4, 0x90
	.type	IntArrayIterator_B_init_arrayIntArray,@function
IntArrayIterator_B_init_arrayIntArray:  # @IntArrayIterator_B_init_arrayIntArray
# %bb.0:
	movq	104(%rdi), %rax
	retq
.Lfunc_end391:
	.size	IntArrayIterator_B_init_arrayIntArray, .Lfunc_end391-IntArrayIterator_B_init_arrayIntArray
                                        # -- End function
	.globl	IntArrayIterator_B_next_        # -- Begin function IntArrayIterator_B_next_
	.p2align	4, 0x90
	.type	IntArrayIterator_B_next_,@function
IntArrayIterator_B_next_:               # @IntArrayIterator_B_next_
# %bb.0:
	movq	112(%rdi), %rax
	retq
.Lfunc_end392:
	.size	IntArrayIterator_B_next_, .Lfunc_end392-IntArrayIterator_B_next_
                                        # -- End function
	.globl	IntArrayIterator_init_arrayIntArray # -- Begin function IntArrayIterator_init_arrayIntArray
	.p2align	4, 0x90
	.type	IntArrayIterator_init_arrayIntArray,@function
IntArrayIterator_init_arrayIntArray:    # @IntArrayIterator_init_arrayIntArray
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movq	64(%rsp), %rdx
	movq	72(%rsp), %rcx
	movq	56(%rsp), %rsi
	movq	40(%rdi), %rax
	movabsq	$5577199879563532693, %rdi      # imm = 0x4D6631BDBEBC5995
	imulq	8(%r14), %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%r14), %r8
	movslq	(%rax,%r8,4), %r15
	movq	40(%rsi), %rax
	movabsq	$7629948565578263212, %rdi      # imm = 0x69E305CB91CB2AAC
	imulq	8(%rsi), %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%rsi), %r8
	movl	(%rax,%r8,4), %r8d
	movq	(%r14,%r15,8), %rax
	movq	%rbx, %rdi
	callq	*8(%rax)
	movq	8(%r14,%r15,8), %rax
	movq	8(%rax), %rax
	movq	%rbx, %rdi
	xorl	%esi, %esi
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	jmpq	*%rax                           # TAILCALL
.Lfunc_end393:
	.size	IntArrayIterator_init_arrayIntArray, .Lfunc_end393-IntArrayIterator_init_arrayIntArray
	.cfi_endproc
                                        # -- End function
	.globl	IntArrayIterator_next_          # -- Begin function IntArrayIterator_next_
	.p2align	4, 0x90
	.type	IntArrayIterator_next_,@function
IntArrayIterator_next_:                 # @IntArrayIterator_next_
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$88, %rsp
	.cfi_def_cfa_offset 144
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rsi, %r15
	movq	%rdi, %r14
	movq	40(%rdi), %rax
	movabsq	$5577199879563532693, %rcx      # imm = 0x4D6631BDBEBC5995
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %rbx
	movq	8(%rdi,%rbx,8), %rax
	movq	%rsi, %rdi
	callq	*(%rax)
	movl	%eax, 4(%rsp)                   # 4-byte Spill
	movq	%rbx, 8(%rsp)                   # 8-byte Spill
	movq	(%r14,%rbx,8), %rax
	leaq	56(%rsp), %rdi
	movq	%r15, 16(%rsp)                  # 8-byte Spill
	movq	%r15, %rsi
	callq	*(%rax)
	movslq	80(%rsp), %r12
	movq	72(%rsp), %r13
	movq	56(%rsp), %r15
	movq	64(%rsp), %rbp
	movq	%rsp, %rbx
	movq	%r15, %rdi
	movq	%rbp, %rsi
	movq	%r13, %rdx
	movl	%r12d, %ecx
	movq	%rbx, %r8
	callq	*48(%r15,%r12,8)
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	movq	%r15, %rdi
	movq	%rbp, %rsi
	movq	%r13, %rdx
	movl	%r12d, %ecx
	movq	%r15, %r8
	movq	%rbp, %r9
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	cmpl	%eax, 4(%rsp)                   # 4-byte Folded Reload
	jge	.LBB394_1
# %bb.2:
	movq	8(%rsp), %r15                   # 8-byte Reload
	movq	8(%r14,%r15,8), %rax
	movq	16(%rsp), %rbx                  # 8-byte Reload
	movq	%rbx, %rdi
	callq	*(%rax)
                                        # kill: def $eax killed $eax def $rax
	leal	1(%rax), %esi
	movq	8(%r14,%r15,8), %rax
	movq	%rbx, %rdi
	callq	*8(%rax)
	movq	(%r14,%r15,8), %rax
	leaq	24(%rsp), %rdi
	movq	%rbx, %rsi
	callq	*(%rax)
	movslq	48(%rsp), %r15
	movq	40(%rsp), %r12
	movq	24(%rsp), %r13
	movq	32(%rsp), %rbp
	movq	%r13, %rdi
	movq	%rbp, %rsi
	movq	%r12, %rdx
	movl	%r15d, %ecx
	movq	%rsp, %rbx
	movq	%rbx, %r8
	callq	*64(%r13,%r15,8)
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	movq	%r13, %rdi
	movq	%rbp, %rsi
	movq	%r12, %rdx
	movl	%r15d, %ecx
	movq	%r13, %r8
	movq	%rbp, %r9
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	%rax, %r15
	movq	8(%rsp), %rax                   # 8-byte Reload
	movq	8(%r14,%rax,8), %rax
	movq	16(%rsp), %rdi                  # 8-byte Reload
	callq	*(%rax)
	decl	%eax
	cltq
	movl	(%r15,%rax,4), %edx
	movq	i32_typ@GOTPCREL(%rip), %rax
	jmp	.LBB394_3
.LBB394_1:
	movq	nil_typ@GOTPCREL(%rip), %rax
                                        # implicit-def: $edx
.LBB394_3:
	addq	$88, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end394:
	.size	IntArrayIterator_next_, .Lfunc_end394-IntArrayIterator_next_
	.cfi_endproc
                                        # -- End function
	.globl	IntArrayIterator_getter_index   # -- Begin function IntArrayIterator_getter_index
	.p2align	4, 0x90
	.type	IntArrayIterator_getter_index,@function
IntArrayIterator_getter_index:          # @IntArrayIterator_getter_index
# %bb.0:
	movl	32(%rdi), %eax
	retq
.Lfunc_end395:
	.size	IntArrayIterator_getter_index, .Lfunc_end395-IntArrayIterator_getter_index
                                        # -- End function
	.globl	IntArrayIterator_setter_index   # -- Begin function IntArrayIterator_setter_index
	.p2align	4, 0x90
	.type	IntArrayIterator_setter_index,@function
IntArrayIterator_setter_index:          # @IntArrayIterator_setter_index
# %bb.0:
	movl	%esi, 32(%rdi)
	retq
.Lfunc_end396:
	.size	IntArrayIterator_setter_index, .Lfunc_end396-IntArrayIterator_setter_index
                                        # -- End function
	.globl	IntArrayIterator_getter_array   # -- Begin function IntArrayIterator_getter_array
	.p2align	4, 0x90
	.type	IntArrayIterator_getter_array,@function
IntArrayIterator_getter_array:          # @IntArrayIterator_getter_array
# %bb.0:
	movq	%rdi, %rax
	movq	(%rsi), %rcx
	movq	8(%rsi), %rdx
	movq	16(%rsi), %rdi
	movl	24(%rsi), %esi
	movl	%esi, 24(%rax)
	movq	%rdi, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	retq
.Lfunc_end397:
	.size	IntArrayIterator_getter_array, .Lfunc_end397-IntArrayIterator_getter_array
                                        # -- End function
	.globl	IntArrayIterator_setter_array   # -- Begin function IntArrayIterator_setter_array
	.p2align	4, 0x90
	.type	IntArrayIterator_setter_array,@function
IntArrayIterator_setter_array:          # @IntArrayIterator_setter_array
# %bb.0:
	movq	%rsi, (%rdi)
	movq	%rdx, 8(%rdi)
	movq	%rcx, 16(%rdi)
	movl	%r8d, 24(%rdi)
	retq
.Lfunc_end398:
	.size	IntArrayIterator_setter_array, .Lfunc_end398-IntArrayIterator_setter_array
                                        # -- End function
	.globl	IntArray_getter_capacity        # -- Begin function IntArray_getter_capacity
	.p2align	4, 0x90
	.type	IntArray_getter_capacity,@function
IntArray_getter_capacity:               # @IntArray_getter_capacity
# %bb.0:
	movl	12(%rdi), %eax
	retq
.Lfunc_end399:
	.size	IntArray_getter_capacity, .Lfunc_end399-IntArray_getter_capacity
                                        # -- End function
	.globl	IntArray_setter_capacity        # -- Begin function IntArray_setter_capacity
	.p2align	4, 0x90
	.type	IntArray_setter_capacity,@function
IntArray_setter_capacity:               # @IntArray_setter_capacity
# %bb.0:
	movl	%esi, 12(%rdi)
	retq
.Lfunc_end400:
	.size	IntArray_setter_capacity, .Lfunc_end400-IntArray_setter_capacity
                                        # -- End function
	.globl	IntArray_getter_length          # -- Begin function IntArray_getter_length
	.p2align	4, 0x90
	.type	IntArray_getter_length,@function
IntArray_getter_length:                 # @IntArray_getter_length
# %bb.0:
	movl	8(%rdi), %eax
	retq
.Lfunc_end401:
	.size	IntArray_getter_length, .Lfunc_end401-IntArray_getter_length
                                        # -- End function
	.globl	IntArray_setter_length          # -- Begin function IntArray_setter_length
	.p2align	4, 0x90
	.type	IntArray_setter_length,@function
IntArray_setter_length:                 # @IntArray_setter_length
# %bb.0:
	movl	%esi, 8(%rdi)
	retq
.Lfunc_end402:
	.size	IntArray_setter_length, .Lfunc_end402-IntArray_setter_length
                                        # -- End function
	.globl	IntArray_getter_buffer          # -- Begin function IntArray_getter_buffer
	.p2align	4, 0x90
	.type	IntArray_getter_buffer,@function
IntArray_getter_buffer:                 # @IntArray_getter_buffer
# %bb.0:
	movq	(%rdi), %rax
	retq
.Lfunc_end403:
	.size	IntArray_getter_buffer, .Lfunc_end403-IntArray_getter_buffer
                                        # -- End function
	.globl	IntArray_setter_buffer          # -- Begin function IntArray_setter_buffer
	.p2align	4, 0x90
	.type	IntArray_setter_buffer,@function
IntArray_setter_buffer:                 # @IntArray_setter_buffer
# %bb.0:
	movq	%rsi, (%rdi)
	retq
.Lfunc_end404:
	.size	IntArray_setter_buffer, .Lfunc_end404-IntArray_setter_buffer
                                        # -- End function
	.globl	_size_Pair                      # -- Begin function _size_Pair
	.p2align	4, 0x90
	.type	_size_Pair,@function
_size_Pair:                             # @_size_Pair
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r12
	.cfi_def_cfa_offset 32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	pushq	%rax
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -40
	.cfi_offset %r12, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rdi, %rbx
	movq	8(%rdi), %rdi
	movq	(%rdi), %rax
	callq	*48(%rax)
	movq	%rax, %rcx
	movq	%rdx, %r14
	movl	$16, %eax
	xorl	%edx, %edx
	divq	%r14
	movq	%r14, %rax
	subq	%rdx, %rax
	testq	%rdx, %rdx
	cmoveq	%rdx, %rax
	leaq	(%rcx,%rax), %r12
	leaq	16(%rcx,%rax), %r15
	movq	16(%rbx), %rdi
	movq	(%rdi), %rax
	callq	*48(%rax)
	movq	%rax, %rcx
	movq	%rdx, %rsi
	cmpq	%rdx, %r14
	cmovbeq	%rdx, %r14
	cmpq	$9, %r14
	movl	$8, %edi
	cmovaeq	%r14, %rdi
	movq	%r15, %rax
	xorl	%edx, %edx
	divq	%rsi
	subq	%rdx, %rsi
	testq	%rdx, %rdx
	cmoveq	%rdx, %rsi
	leaq	16(%rcx,%r12), %rcx
	addq	%rsi, %rcx
	movq	%rcx, %rax
	xorl	%edx, %edx
	divq	%rdi
	movq	%rdi, %rax
	subq	%rdx, %rax
	testq	%rdx, %rdx
	cmoveq	%rdx, %rax
	addq	%rcx, %rax
	movq	%rdi, %rdx
	addq	$8, %rsp
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end405:
	.size	_size_Pair, .Lfunc_end405-_size_Pair
	.cfi_endproc
                                        # -- End function
	.globl	Pair_field_Pair_0               # -- Begin function Pair_field_Pair_0
	.p2align	4, 0x90
	.type	Pair_field_Pair_0,@function
Pair_field_Pair_0:                      # @Pair_field_Pair_0
# %bb.0:
	movq	(%rdi), %rax
	retq
.Lfunc_end406:
	.size	Pair_field_Pair_0, .Lfunc_end406-Pair_field_Pair_0
                                        # -- End function
	.globl	Pair_field_Pair_1               # -- Begin function Pair_field_Pair_1
	.p2align	4, 0x90
	.type	Pair_field_Pair_1,@function
Pair_field_Pair_1:                      # @Pair_field_Pair_1
# %bb.0:
	movq	8(%rdi), %rax
	retq
.Lfunc_end407:
	.size	Pair_field_Pair_1, .Lfunc_end407-Pair_field_Pair_1
                                        # -- End function
	.globl	Pair_B_init_firstT_secondU      # -- Begin function Pair_B_init_firstT_secondU
	.p2align	4, 0x90
	.type	Pair_B_init_firstT_secondU,@function
Pair_B_init_firstT_secondU:             # @Pair_B_init_firstT_secondU
# %bb.0:
	movq	128(%rdi), %rax
	retq
.Lfunc_end408:
	.size	Pair_B_init_firstT_secondU, .Lfunc_end408-Pair_B_init_firstT_secondU
                                        # -- End function
	.globl	Pair_B_first_                   # -- Begin function Pair_B_first_
	.p2align	4, 0x90
	.type	Pair_B_first_,@function
Pair_B_first_:                          # @Pair_B_first_
# %bb.0:
	movq	136(%rdi), %rax
	retq
.Lfunc_end409:
	.size	Pair_B_first_, .Lfunc_end409-Pair_B_first_
                                        # -- End function
	.globl	Pair_B_second_                  # -- Begin function Pair_B_second_
	.p2align	4, 0x90
	.type	Pair_B_second_,@function
Pair_B_second_:                         # @Pair_B_second_
# %bb.0:
	movq	144(%rdi), %rax
	retq
.Lfunc_end410:
	.size	Pair_B_second_, .Lfunc_end410-Pair_B_second_
                                        # -- End function
	.globl	Pair_init_firstT_secondU        # -- Begin function Pair_init_firstT_secondU
	.p2align	4, 0x90
	.type	Pair_init_firstT_secondU,@function
Pair_init_firstT_secondU:               # @Pair_init_firstT_secondU
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	pushq	%rax
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rsi, %rbx
	movq	%rdi, %r12
	movq	128(%rsp), %rax
	movq	%rax, (%rsp)                    # 8-byte Spill
	movq	136(%rsp), %r15
	movq	120(%rsp), %r13
	movq	96(%rsp), %rdx
	movq	104(%rsp), %rcx
	movq	88(%rsp), %rsi
	movq	40(%rdi), %rax
	movabsq	$9197944775169318296, %rdi      # imm = 0x7FA5AA0A4BA09D98
	imulq	8(%r12), %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%r12), %r8
	movslq	(%rax,%r8,4), %rbp
	movq	40(%rsi), %rax
	movabsq	$3084208142191802847, %r14      # imm = 0x2ACD4EF6E8B5B9DF
	movq	8(%rsi), %rdi
	imulq	%r14, %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%rsi), %r8
	movl	(%rax,%r8,4), %r8d
	movq	16(%r12,%rbp,8), %rax
	movq	%rbx, %rdi
	callq	*8(%rax)
	movq	40(%r13), %rax
	imulq	8(%r13), %r14
	movq	%r14, %rcx
	shrq	$32, %rcx
	xorq	%r14, %rcx
	andq	16(%r13), %rcx
	movl	(%rax,%rcx,4), %r8d
	movq	24(%r12,%rbp,8), %rax
	movq	8(%rax), %rax
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movq	(%rsp), %rdx                    # 8-byte Reload
	movq	%r15, %rcx
	addq	$8, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	jmpq	*%rax                           # TAILCALL
.Lfunc_end411:
	.size	Pair_init_firstT_secondU, .Lfunc_end411-Pair_init_firstT_secondU
	.cfi_endproc
                                        # -- End function
	.globl	Pair_first_                     # -- Begin function Pair_first_
	.p2align	4, 0x90
	.type	Pair_first_,@function
Pair_first_:                            # @Pair_first_
	.cfi_startproc
# %bb.0:
	pushq	%rbx
	.cfi_def_cfa_offset 16
	subq	$48, %rsp
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movq	40(%rsi), %rax
	movabsq	$9197944775169318296, %rcx      # imm = 0x7FA5AA0A4BA09D98
	imulq	8(%rsi), %rcx
	movq	%rcx, %rdi
	shrq	$32, %rdi
	xorq	%rcx, %rdi
	andq	16(%rsi), %rdi
	movslq	(%rax,%rdi,4), %rax
	movq	16(%rsi,%rax,8), %rax
	movq	%rsp, %rdi
	movq	%rdx, %rsi
	callq	*(%rax)
	movq	24(%rsp), %rax
	movq	(%rsp), %rcx
	movq	16(%rsp), %rdx
	movq	40(%rcx), %rsi
	movabsq	$3084208142191802847, %rdi      # imm = 0x2ACD4EF6E8B5B9DF
	imulq	8(%rcx), %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%rcx), %r8
	movl	(%rsi,%r8,4), %esi
	movq	%rcx, (%rbx)
	movq	%rdx, 16(%rbx)
	movq	%rax, 24(%rbx)
	movl	%esi, 32(%rbx)
	movq	%rbx, %rax
	addq	$48, %rsp
	.cfi_def_cfa_offset 16
	popq	%rbx
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end412:
	.size	Pair_first_, .Lfunc_end412-Pair_first_
	.cfi_endproc
                                        # -- End function
	.globl	Pair_second_                    # -- Begin function Pair_second_
	.p2align	4, 0x90
	.type	Pair_second_,@function
Pair_second_:                           # @Pair_second_
	.cfi_startproc
# %bb.0:
	pushq	%rbx
	.cfi_def_cfa_offset 16
	subq	$48, %rsp
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movq	40(%rsi), %rax
	movabsq	$9197944775169318296, %rcx      # imm = 0x7FA5AA0A4BA09D98
	imulq	8(%rsi), %rcx
	movq	%rcx, %rdi
	shrq	$32, %rdi
	xorq	%rcx, %rdi
	andq	16(%rsi), %rdi
	movslq	(%rax,%rdi,4), %rax
	movq	24(%rsi,%rax,8), %rax
	movq	%rsp, %rdi
	movq	%rdx, %rsi
	callq	*(%rax)
	movq	24(%rsp), %rax
	movq	(%rsp), %rcx
	movq	16(%rsp), %rdx
	movq	40(%rcx), %rsi
	movabsq	$3084208142191802847, %rdi      # imm = 0x2ACD4EF6E8B5B9DF
	imulq	8(%rcx), %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%rcx), %r8
	movl	(%rsi,%r8,4), %esi
	movq	%rcx, (%rbx)
	movq	%rdx, 16(%rbx)
	movq	%rax, 24(%rbx)
	movl	%esi, 32(%rbx)
	movq	%rbx, %rax
	addq	$48, %rsp
	.cfi_def_cfa_offset 16
	popq	%rbx
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end413:
	.size	Pair_second_, .Lfunc_end413-Pair_second_
	.cfi_endproc
                                        # -- End function
	.globl	Pair_getter_second              # -- Begin function Pair_getter_second
	.p2align	4, 0x90
	.type	Pair_getter_second,@function
Pair_getter_second:                     # @Pair_getter_second
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r12
	.cfi_def_cfa_offset 32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	subq	$56, %rsp
	.cfi_def_cfa_offset 96
	.cfi_offset %rbx, -40
	.cfi_offset %r12, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rsi, %r14
	movq	%rdi, %rbx
	movq	(%rsi), %rdi
	movq	(%rdi), %rax
	callq	*48(%rax)
	movq	%rax, %rcx
	movq	%rdx, %rsi
	movl	$16, %eax
	xorl	%edx, %edx
	divq	%rsi
	subq	%rdx, %rsi
	testq	%rdx, %rdx
	cmoveq	%rdx, %rsi
	leaq	(%rcx,%rsi), %r12
	leaq	16(%rcx,%rsi), %r15
	movq	8(%r14), %rdi
	movq	(%rdi), %rax
	callq	*48(%rax)
	movq	%rdx, %rcx
	movq	%r15, %rax
	xorl	%edx, %edx
	divq	%rcx
	subq	%rdx, %rcx
	testq	%rdx, %rdx
	cmoveq	%rdx, %rcx
	leaq	16(%r14,%r12), %rsi
	addq	%rcx, %rsi
	movq	8(%r14), %rdx
	movq	(%rdx), %rax
	movq	%rsp, %rdi
	callq	*56(%rax)
	movq	24(%rsp), %rax
	movl	32(%rsp), %ecx
	movq	(%rsp), %rdx
	movq	16(%rsp), %rsi
	movq	%rdx, (%rbx)
	movl	%ecx, 32(%rbx)
	movq	%rsi, 16(%rbx)
	movq	%rax, 24(%rbx)
	movq	%rbx, %rax
	addq	$56, %rsp
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end414:
	.size	Pair_getter_second, .Lfunc_end414-Pair_getter_second
	.cfi_endproc
                                        # -- End function
	.globl	Pair_setter_second              # -- Begin function Pair_setter_second
	.p2align	4, 0x90
	.type	Pair_setter_second,@function
Pair_setter_second:                     # @Pair_setter_second
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	pushq	%rax
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rcx, (%rsp)                    # 8-byte Spill
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %r13
	movl	%r8d, %r12d
	movq	(%rdi), %rdi
	movq	(%rdi), %rax
	callq	*48(%rax)
	movq	%rax, %rcx
	movq	%rdx, %rsi
	movl	$16, %eax
	xorl	%edx, %edx
	divq	%rsi
	subq	%rdx, %rsi
	testq	%rdx, %rdx
	cmoveq	%rdx, %rsi
	leaq	(%rcx,%rsi), %rbx
	leaq	16(%rcx,%rsi), %rbp
	movq	8(%r13), %rdi
	movq	(%rdi), %rax
	callq	*48(%rax)
	movq	%rdx, %rcx
	movq	%rbp, %rax
	xorl	%edx, %edx
	divq	%rcx
	subq	%rdx, %rcx
	testq	%rdx, %rdx
	cmoveq	%rdx, %rcx
	leaq	16(%r13,%rbx), %r9
	addq	%rcx, %r9
	movq	8(%r13), %r8
	movq	(%r8), %rax
	movq	64(%rax), %rax
	movq	%r15, %rdi
	movq	%r14, %rsi
	movq	(%rsp), %rdx                    # 8-byte Reload
	movq	%r12, %rcx
	addq	$8, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	jmpq	*%rax                           # TAILCALL
.Lfunc_end415:
	.size	Pair_setter_second, .Lfunc_end415-Pair_setter_second
	.cfi_endproc
                                        # -- End function
	.globl	Pair_getter_first               # -- Begin function Pair_getter_first
	.p2align	4, 0x90
	.type	Pair_getter_first,@function
Pair_getter_first:                      # @Pair_getter_first
	.cfi_startproc
# %bb.0:
	pushq	%r14
	.cfi_def_cfa_offset 16
	pushq	%rbx
	.cfi_def_cfa_offset 24
	subq	$56, %rsp
	.cfi_def_cfa_offset 80
	.cfi_offset %rbx, -24
	.cfi_offset %r14, -16
	movq	%rsi, %r14
	movq	%rdi, %rbx
	movq	(%rsi), %rdi
	movq	(%rdi), %rax
	callq	*48(%rax)
	movq	%rdx, %rsi
	movl	$16, %ecx
	movl	$16, %eax
	xorl	%edx, %edx
	divq	%rsi
	subq	%rdx, %rsi
	addq	$16, %rsi
	testq	%rdx, %rdx
	cmoveq	%rcx, %rsi
	addq	%r14, %rsi
	movq	(%r14), %rdx
	movq	(%rdx), %rax
	movq	%rsp, %rdi
	callq	*56(%rax)
	movq	24(%rsp), %rax
	movl	32(%rsp), %ecx
	movq	(%rsp), %rdx
	movq	16(%rsp), %rsi
	movq	%rdx, (%rbx)
	movl	%ecx, 32(%rbx)
	movq	%rsi, 16(%rbx)
	movq	%rax, 24(%rbx)
	movq	%rbx, %rax
	addq	$56, %rsp
	.cfi_def_cfa_offset 24
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end416:
	.size	Pair_getter_first, .Lfunc_end416-Pair_getter_first
	.cfi_endproc
                                        # -- End function
	.globl	Pair_setter_first               # -- Begin function Pair_setter_first
	.p2align	4, 0x90
	.type	Pair_setter_first,@function
Pair_setter_first:                      # @Pair_setter_first
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r13
	.cfi_def_cfa_offset 32
	pushq	%r12
	.cfi_def_cfa_offset 40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r13, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rcx, %rbx
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %r13
	movl	%r8d, %r12d
	movq	(%rdi), %rdi
	movq	(%rdi), %rax
	callq	*48(%rax)
	movq	%rdx, %r9
	movl	$16, %ecx
	movl	$16, %eax
	xorl	%edx, %edx
	divq	%r9
	subq	%rdx, %r9
	addq	$16, %r9
	testq	%rdx, %rdx
	cmoveq	%rcx, %r9
	addq	%r13, %r9
	movq	(%r13), %r8
	movq	(%r8), %rax
	movq	64(%rax), %rax
	movq	%r15, %rdi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movq	%r12, %rcx
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	jmpq	*%rax                           # TAILCALL
.Lfunc_end417:
	.size	Pair_setter_first, .Lfunc_end417-Pair_setter_first
	.cfi_endproc
                                        # -- End function
	.globl	_size_Iterator2                 # -- Begin function _size_Iterator2
	.p2align	4, 0x90
	.type	_size_Iterator2,@function
_size_Iterator2:                        # @_size_Iterator2
# %bb.0:
	movl	$8, %eax
	movl	$8, %edx
	retq
.Lfunc_end418:
	.size	_size_Iterator2, .Lfunc_end418-_size_Iterator2
                                        # -- End function
	.globl	_size_Iterable2                 # -- Begin function _size_Iterable2
	.p2align	4, 0x90
	.type	_size_Iterable2,@function
_size_Iterable2:                        # @_size_Iterable2
# %bb.0:
	movl	$8, %eax
	movl	$8, %edx
	retq
.Lfunc_end419:
	.size	_size_Iterable2, .Lfunc_end419-_size_Iterable2
                                        # -- End function
	.globl	_size_Array                     # -- Begin function _size_Array
	.p2align	4, 0x90
	.type	_size_Array,@function
_size_Array:                            # @_size_Array
# %bb.0:
	movl	$24, %eax
	movl	$8, %edx
	retq
.Lfunc_end420:
	.size	_size_Array, .Lfunc_end420-_size_Array
                                        # -- End function
	.globl	Array_field_Array_0             # -- Begin function Array_field_Array_0
	.p2align	4, 0x90
	.type	Array_field_Array_0,@function
Array_field_Array_0:                    # @Array_field_Array_0
# %bb.0:
	movq	(%rdi), %rax
	retq
.Lfunc_end421:
	.size	Array_field_Array_0, .Lfunc_end421-Array_field_Array_0
                                        # -- End function
	.globl	Array_B__Self_from_iterable_iterableIterable2T # -- Begin function Array_B__Self_from_iterable_iterableIterable2T
	.p2align	4, 0x90
	.type	Array_B__Self_from_iterable_iterableIterable2T,@function
Array_B__Self_from_iterable_iterableIterable2T: # @Array_B__Self_from_iterable_iterableIterable2T
# %bb.0:
	movq	Array__Self_from_iterable_iterableIterable2T@GOTPCREL(%rip), %rax
	retq
.Lfunc_end422:
	.size	Array_B__Self_from_iterable_iterableIterable2T, .Lfunc_end422-Array_B__Self_from_iterable_iterableIterable2T
                                        # -- End function
	.globl	Array_B_init_                   # -- Begin function Array_B_init_
	.p2align	4, 0x90
	.type	Array_B_init_,@function
Array_B_init_:                          # @Array_B_init_
# %bb.0:
	movq	280(%rdi), %rax
	retq
.Lfunc_end423:
	.size	Array_B_init_, .Lfunc_end423-Array_B_init_
                                        # -- End function
	.globl	Array_B_init_capacityPtri32     # -- Begin function Array_B_init_capacityPtri32
	.p2align	4, 0x90
	.type	Array_B_init_capacityPtri32,@function
Array_B_init_capacityPtri32:            # @Array_B_init_capacityPtri32
# %bb.0:
	movq	288(%rdi), %rax
	retq
.Lfunc_end424:
	.size	Array_B_init_capacityPtri32, .Lfunc_end424-Array_B_init_capacityPtri32
                                        # -- End function
	.globl	Array_B_length_                 # -- Begin function Array_B_length_
	.p2align	4, 0x90
	.type	Array_B_length_,@function
Array_B_length_:                        # @Array_B_length_
# %bb.0:
	movq	296(%rdi), %rax
	retq
.Lfunc_end425:
	.size	Array_B_length_, .Lfunc_end425-Array_B_length_
                                        # -- End function
	.globl	Array_B_capacity_               # -- Begin function Array_B_capacity_
	.p2align	4, 0x90
	.type	Array_B_capacity_,@function
Array_B_capacity_:                      # @Array_B_capacity_
# %bb.0:
	movq	304(%rdi), %rax
	retq
.Lfunc_end426:
	.size	Array_B_capacity_, .Lfunc_end426-Array_B_capacity_
                                        # -- End function
	.globl	Array_B_append_xT               # -- Begin function Array_B_append_xT
	.p2align	4, 0x90
	.type	Array_B_append_xT,@function
Array_B_append_xT:                      # @Array_B_append_xT
# %bb.0:
	movq	312(%rdi), %rax
	retq
.Lfunc_end427:
	.size	Array_B_append_xT, .Lfunc_end427-Array_B_append_xT
                                        # -- End function
	.globl	Array_B_grow_                   # -- Begin function Array_B_grow_
	.p2align	4, 0x90
	.type	Array_B_grow_,@function
Array_B_grow_:                          # @Array_B_grow_
# %bb.0:
	movq	320(%rdi), %rax
	retq
.Lfunc_end428:
	.size	Array_B_grow_, .Lfunc_end428-Array_B_grow_
                                        # -- End function
	.globl	Array_B__index_xPtri32          # -- Begin function Array_B__index_xPtri32
	.p2align	4, 0x90
	.type	Array_B__index_xPtri32,@function
Array_B__index_xPtri32:                 # @Array_B__index_xPtri32
# %bb.0:
	movq	328(%rdi), %rax
	retq
.Lfunc_end429:
	.size	Array_B__index_xPtri32, .Lfunc_end429-Array_B__index_xPtri32
                                        # -- End function
	.globl	Array_B_throw_oob_xPtri32       # -- Begin function Array_B_throw_oob_xPtri32
	.p2align	4, 0x90
	.type	Array_B_throw_oob_xPtri32,@function
Array_B_throw_oob_xPtri32:              # @Array_B_throw_oob_xPtri32
# %bb.0:
	movq	336(%rdi), %rax
	retq
.Lfunc_end430:
	.size	Array_B_throw_oob_xPtri32, .Lfunc_end430-Array_B_throw_oob_xPtri32
                                        # -- End function
	.globl	Array_B_unsafe_index_xPtri32    # -- Begin function Array_B_unsafe_index_xPtri32
	.p2align	4, 0x90
	.type	Array_B_unsafe_index_xPtri32,@function
Array_B_unsafe_index_xPtri32:           # @Array_B_unsafe_index_xPtri32
# %bb.0:
	movq	344(%rdi), %rax
	retq
.Lfunc_end431:
	.size	Array_B_unsafe_index_xPtri32, .Lfunc_end431-Array_B_unsafe_index_xPtri32
                                        # -- End function
	.globl	Array_B_iterator_               # -- Begin function Array_B_iterator_
	.p2align	4, 0x90
	.type	Array_B_iterator_,@function
Array_B_iterator_:                      # @Array_B_iterator_
# %bb.0:
	movq	352(%rdi), %rax
	retq
.Lfunc_end432:
	.size	Array_B_iterator_, .Lfunc_end432-Array_B_iterator_
                                        # -- End function
	.globl	Array_B_each_fFunctionT_to_Nothing # -- Begin function Array_B_each_fFunctionT_to_Nothing
	.p2align	4, 0x90
	.type	Array_B_each_fFunctionT_to_Nothing,@function
Array_B_each_fFunctionT_to_Nothing:     # @Array_B_each_fFunctionT_to_Nothing
# %bb.0:
	movq	360(%rdi), %rax
	retq
.Lfunc_end433:
	.size	Array_B_each_fFunctionT_to_Nothing, .Lfunc_end433-Array_B_each_fFunctionT_to_Nothing
                                        # -- End function
	.globl	Array_B_reduce_accumulatorT_fFunctionT._T_to_T # -- Begin function Array_B_reduce_accumulatorT_fFunctionT._T_to_T
	.p2align	4, 0x90
	.type	Array_B_reduce_accumulatorT_fFunctionT._T_to_T,@function
Array_B_reduce_accumulatorT_fFunctionT._T_to_T: # @Array_B_reduce_accumulatorT_fFunctionT._T_to_T
# %bb.0:
	movq	368(%rdi), %rax
	retq
.Lfunc_end434:
	.size	Array_B_reduce_accumulatorT_fFunctionT._T_to_T, .Lfunc_end434-Array_B_reduce_accumulatorT_fFunctionT._T_to_T
                                        # -- End function
	.globl	Array_B_all_fFunctionT_to_Ptri1 # -- Begin function Array_B_all_fFunctionT_to_Ptri1
	.p2align	4, 0x90
	.type	Array_B_all_fFunctionT_to_Ptri1,@function
Array_B_all_fFunctionT_to_Ptri1:        # @Array_B_all_fFunctionT_to_Ptri1
# %bb.0:
	movq	376(%rdi), %rax
	retq
.Lfunc_end435:
	.size	Array_B_all_fFunctionT_to_Ptri1, .Lfunc_end435-Array_B_all_fFunctionT_to_Ptri1
                                        # -- End function
	.globl	Array_B_any_fFunctionT_to_Ptri1 # -- Begin function Array_B_any_fFunctionT_to_Ptri1
	.p2align	4, 0x90
	.type	Array_B_any_fFunctionT_to_Ptri1,@function
Array_B_any_fFunctionT_to_Ptri1:        # @Array_B_any_fFunctionT_to_Ptri1
# %bb.0:
	movq	384(%rdi), %rax
	retq
.Lfunc_end436:
	.size	Array_B_any_fFunctionT_to_Ptri1, .Lfunc_end436-Array_B_any_fFunctionT_to_Ptri1
                                        # -- End function
	.globl	Array_B_map_fFunctionT_to_U     # -- Begin function Array_B_map_fFunctionT_to_U
	.p2align	4, 0x90
	.type	Array_B_map_fFunctionT_to_U,@function
Array_B_map_fFunctionT_to_U:            # @Array_B_map_fFunctionT_to_U
# %bb.0:
	movq	392(%rdi), %rax
	retq
.Lfunc_end437:
	.size	Array_B_map_fFunctionT_to_U, .Lfunc_end437-Array_B_map_fFunctionT_to_U
                                        # -- End function
	.globl	Array_B_filter_fFunctionT_to_Ptri1 # -- Begin function Array_B_filter_fFunctionT_to_Ptri1
	.p2align	4, 0x90
	.type	Array_B_filter_fFunctionT_to_Ptri1,@function
Array_B_filter_fFunctionT_to_Ptri1:     # @Array_B_filter_fFunctionT_to_Ptri1
# %bb.0:
	movq	400(%rdi), %rax
	retq
.Lfunc_end438:
	.size	Array_B_filter_fFunctionT_to_Ptri1, .Lfunc_end438-Array_B_filter_fFunctionT_to_Ptri1
                                        # -- End function
	.globl	Array_B_chain_otherIterable2T   # -- Begin function Array_B_chain_otherIterable2T
	.p2align	4, 0x90
	.type	Array_B_chain_otherIterable2T,@function
Array_B_chain_otherIterable2T:          # @Array_B_chain_otherIterable2T
# %bb.0:
	movq	408(%rdi), %rax
	retq
.Lfunc_end439:
	.size	Array_B_chain_otherIterable2T, .Lfunc_end439-Array_B_chain_otherIterable2T
                                        # -- End function
	.globl	Array_B_interleave_otherIterable2T # -- Begin function Array_B_interleave_otherIterable2T
	.p2align	4, 0x90
	.type	Array_B_interleave_otherIterable2T,@function
Array_B_interleave_otherIterable2T:     # @Array_B_interleave_otherIterable2T
# %bb.0:
	movq	416(%rdi), %rax
	retq
.Lfunc_end440:
	.size	Array_B_interleave_otherIterable2T, .Lfunc_end440-Array_B_interleave_otherIterable2T
                                        # -- End function
	.globl	Array_B_zip_otherIterable2U     # -- Begin function Array_B_zip_otherIterable2U
	.p2align	4, 0x90
	.type	Array_B_zip_otherIterable2U,@function
Array_B_zip_otherIterable2U:            # @Array_B_zip_otherIterable2U
# %bb.0:
	movq	424(%rdi), %rax
	retq
.Lfunc_end441:
	.size	Array_B_zip_otherIterable2U, .Lfunc_end441-Array_B_zip_otherIterable2U
                                        # -- End function
	.globl	Array_B_product_otherIterable2U # -- Begin function Array_B_product_otherIterable2U
	.p2align	4, 0x90
	.type	Array_B_product_otherIterable2U,@function
Array_B_product_otherIterable2U:        # @Array_B_product_otherIterable2U
# %bb.0:
	movq	432(%rdi), %rax
	retq
.Lfunc_end442:
	.size	Array_B_product_otherIterable2U, .Lfunc_end442-Array_B_product_otherIterable2U
                                        # -- End function
	.globl	Array__Self_from_iterable_iterableIterable2T # -- Begin function Array__Self_from_iterable_iterableIterable2T
	.p2align	4, 0x90
	.type	Array__Self_from_iterable_iterableIterable2T,@function
Array__Self_from_iterable_iterableIterable2T: # @Array__Self_from_iterable_iterableIterable2T
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$216, %rsp
	.cfi_def_cfa_offset 272
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%r8, %r15
	movq	%rcx, 16(%rsp)                  # 8-byte Spill
	movq	%rdx, %r13
	movq	%rdi, 40(%rsp)                  # 8-byte Spill
	movq	40(%rdx), %rax
	movabsq	$5693646204635713916, %rcx      # imm = 0x4F03E50E9010117C
	imulq	8(%rdx), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%r13), %rdx
	movslq	(%rax,%rdx,4), %rbp
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %r12
	movl	$16, %edi
	movq	%r12, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %rbx
	movq	$0, 8(%rax)
	movq	any_typ@GOTPCREL(%rip), %rax
	movq	%rax, (%rbx)
	movl	$24, %edi
	movq	%r12, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r14
	movq	%rbx, (%rax)
	movl	$32, %edi
	movq	%r12, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r12
	movq	%rax, 8(%r14)
	movabsq	$4294967296, %rax               # imm = 0x100000000
	movq	%rax, 16(%r14)
	leaq	8(%rsp), %r8
	movq	%r13, %rdi
	movq	16(%rsp), %rbx                  # 8-byte Reload
	movq	%rbx, %rsi
	movq	%r15, %rdx
	movl	%ebp, %ecx
	callq	*8(%r13,%rbp,8)
	leaq	80(%rsp), %rdi
	movq	%r13, %rsi
	movq	%rbx, %rdx
	movq	%r15, %rcx
	movl	%ebp, %r8d
	movq	%r13, %r9
	leaq	8(%rsp), %r10
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	movq	%r14, %rbp
	.cfi_adjust_cfa_offset 8
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	96(%rsp), %rbx
	movq	80(%rsp), %r14
	movq	88(%rsp), %r15
	movq	40(%r14), %rax
	movabsq	$4189192806087951739, %rcx      # imm = 0x3A2300A96E7E857B
	imulq	8(%r14), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%r14), %rdx
	movslq	(%rax,%rdx,4), %r13
	movq	%r14, %rdi
	movq	%r15, %rsi
	movq	%rbx, %rdx
	movl	%r13d, %ecx
	leaq	8(%rsp), %r8
	callq	*8(%r14,%r13,8)
	leaq	160(%rsp), %rdi
	movq	%r14, %rsi
	movq	%r15, %rdx
	movq	%rbx, %rcx
	movl	%r13d, %r8d
	movq	%r14, 64(%rsp)                  # 8-byte Spill
	movq	%r14, %r9
	leaq	8(%rsp), %r10
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	movq	%r13, 64(%rsp)                  # 8-byte Spill
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	movq	%rbx, 88(%rsp)                  # 8-byte Spill
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	movq	%r15, 40(%rsp)                  # 8-byte Spill
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	160(%rsp), %r14
	cmpq	nil_typ@GOTPCREL(%rip), %r14
	sete	%al
	testq	%r14, %r14
	sete	%cl
	orb	%al, %cl
	jne	.LBB443_9
# %bb.1:                                # %._crit_edge.preheader
	movq	184(%rsp), %rdi
	movq	176(%rsp), %r8
	xorl	%ebx, %ebx
	movabsq	$3084208142191802847, %r13      # imm = 0x2ACD4EF6E8B5B9DF
	movq	%rbp, 48(%rsp)                  # 8-byte Spill
	.p2align	4, 0x90
.LBB443_2:                              # %._crit_edge
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB443_5 Depth 2
	movl	20(%rbp), %eax
	cmpl	%eax, %ebx
	jl	.LBB443_7
# %bb.3:                                #   in Loop: Header=BB443_2 Depth=1
	movq	%r8, 24(%rsp)                   # 8-byte Spill
	movq	%rdi, 32(%rsp)                  # 8-byte Spill
	addl	%eax, %eax
	movl	%eax, 20(%rbp)
	movq	%rbp, %r15
	movq	8(%rbp), %rbp
	movslq	%eax, %rdi
	shlq	$5, %rdi
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r12
	movq	%r15, %r11
	movq	%rax, 8(%r15)
	testl	%ebx, %ebx
	jle	.LBB443_6
# %bb.4:                                # %.lr.ph
                                        #   in Loop: Header=BB443_2 Depth=1
	xorl	%eax, %eax
	movl	$8, %ecx
	.p2align	4, 0x90
.LBB443_5:                              # %._crit_edge.i
                                        #   Parent Loop BB443_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8(%rbp,%rcx), %rdx
	movq	-8(%rbp,%rcx), %rsi
	movq	(%rbp,%rcx), %rdi
	movq	40(%rsi), %r8
	movq	8(%rsi), %r9
	imulq	%r13, %r9
	movq	%r9, %r10
	shrq	$32, %r10
	xorq	%r9, %r10
	andq	16(%rsi), %r10
	movl	(%r8,%r10,4), %r8d
	movq	%rsi, -8(%r12,%rcx)
	movl	%r8d, 16(%r12,%rcx)
	movq	%rdi, (%r12,%rcx)
	movq	%rdx, 8(%r12,%rcx)
	incl	%eax
	addq	$32, %rcx
	cmpl	%ebx, %eax
	jl	.LBB443_5
.LBB443_6:                              #   in Loop: Header=BB443_2 Depth=1
	movq	%r11, %rbp
	movq	32(%rsp), %rdi                  # 8-byte Reload
	movq	24(%rsp), %r8                   # 8-byte Reload
.LBB443_7:                              # %Array_append_xT.exit
                                        #   in Loop: Header=BB443_2 Depth=1
	movslq	%ebx, %rax
	shlq	$5, %rax
	movq	40(%r14), %rcx
	movq	8(%r14), %rdx
	imulq	%r13, %rdx
	movq	%rdx, %rsi
	shrq	$32, %rsi
	xorq	%rdx, %rsi
	andq	16(%r14), %rsi
	movl	(%rcx,%rsi,4), %ecx
	movq	%r14, (%r12,%rax)
	movq	%rdi, 16(%r12,%rax)
	movq	%r8, 8(%r12,%rax)
	movl	%ecx, 24(%r12,%rax)
	movl	16(%rbp), %ebx
	incl	%ebx
	movl	%ebx, 16(%rbp)
	movq	64(%rsp), %r15                  # 8-byte Reload
	movq	%r15, %rdi
	movq	16(%rsp), %rsi                  # 8-byte Reload
	movq	72(%rsp), %rbp                  # 8-byte Reload
	movq	%rbp, %rdx
	movq	56(%rsp), %r13                  # 8-byte Reload
	movl	%r13d, %ecx
	leaq	8(%rsp), %r14
	movq	%r14, %r8
	callq	*8(%r15,%r13,8)
	leaq	112(%rsp), %rdi
	movq	%r15, %rsi
	movq	16(%rsp), %rdx                  # 8-byte Reload
	movq	%rbp, %rcx
	movl	%r13d, %r8d
	movq	%r15, %r9
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	movabsq	$3084208142191802847, %r13      # imm = 0x2ACD4EF6E8B5B9DF
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	pushq	%rdx
	movq	80(%rsp), %rbp                  # 8-byte Reload
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	112(%rsp), %r14
	cmpq	nil_typ@GOTPCREL(%rip), %r14
	je	.LBB443_9
# %bb.8:                                # %Array_append_xT.exit
                                        #   in Loop: Header=BB443_2 Depth=1
	movq	136(%rsp), %rdi
	movq	128(%rsp), %r8
	testq	%r14, %r14
	jne	.LBB443_2
.LBB443_9:                              # %.critedge
	movq	Array@GOTPCREL(%rip), %rcx
	movq	40(%rsp), %rax                  # 8-byte Reload
	movq	%rbp, 8(%rax)
	movq	%rcx, (%rax)
	movl	$9, 24(%rax)
	addq	$216, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end443:
	.size	Array__Self_from_iterable_iterableIterable2T, .Lfunc_end443-Array__Self_from_iterable_iterableIterable2T
	.cfi_endproc
                                        # -- End function
	.globl	Array_init_                     # -- Begin function Array_init_
	.p2align	4, 0x90
	.type	Array_init_,@function
Array_init_:                            # @Array_init_
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movq	40(%rdi), %rax
	movabsq	$-5261542750394134544, %rcx     # imm = 0xB6FB3EBED039CFF0
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %r15
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	movl	$32, %edi
	callq	bump_malloc_inner@PLT
	movq	8(%r14,%r15,8), %rcx
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	*8(%rcx)
	movq	16(%r14,%r15,8), %rax
	movq	%rbx, %rdi
	xorl	%esi, %esi
	callq	*8(%rax)
	movq	24(%r14,%r15,8), %rax
	movq	8(%rax), %rax
	movq	%rbx, %rdi
	movl	$1, %esi
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	jmpq	*%rax                           # TAILCALL
.Lfunc_end444:
	.size	Array_init_, .Lfunc_end444-Array_init_
	.cfi_endproc
                                        # -- End function
	.globl	Array_init_capacityPtri32       # -- Begin function Array_init_capacityPtri32
	.p2align	4, 0x90
	.type	Array_init_capacityPtri32,@function
Array_init_capacityPtri32:              # @Array_init_capacityPtri32
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movl	56(%rsp), %esi
	movq	40(%rdi), %rax
	movabsq	$-5261542750394134544, %rcx     # imm = 0xB6FB3EBED039CFF0
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %r15
	movq	24(%rdi,%r15,8), %rax
	movq	%rbx, %rdi
	callq	*8(%rax)
	movq	24(%r14,%r15,8), %rax
	movq	%rbx, %rdi
	callq	*(%rax)
	movslq	%eax, %rdi
	shlq	$5, %rdi
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	callq	bump_malloc_inner@PLT
	movq	8(%r14,%r15,8), %rcx
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	*8(%rcx)
	movq	16(%r14,%r15,8), %rax
	movq	8(%rax), %rax
	movq	%rbx, %rdi
	xorl	%esi, %esi
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	jmpq	*%rax                           # TAILCALL
.Lfunc_end445:
	.size	Array_init_capacityPtri32, .Lfunc_end445-Array_init_capacityPtri32
	.cfi_endproc
                                        # -- End function
	.globl	Array_length_                   # -- Begin function Array_length_
	.p2align	4, 0x90
	.type	Array_length_,@function
Array_length_:                          # @Array_length_
	.cfi_startproc
# %bb.0:
	movq	40(%rdi), %rax
	movabsq	$-5261542750394134544, %rcx     # imm = 0xB6FB3EBED039CFF0
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %rax
	movq	16(%rdi,%rax,8), %rax
	movq	%rsi, %rdi
	jmpq	*(%rax)                         # TAILCALL
.Lfunc_end446:
	.size	Array_length_, .Lfunc_end446-Array_length_
	.cfi_endproc
                                        # -- End function
	.globl	Array_capacity_                 # -- Begin function Array_capacity_
	.p2align	4, 0x90
	.type	Array_capacity_,@function
Array_capacity_:                        # @Array_capacity_
	.cfi_startproc
# %bb.0:
	movq	40(%rdi), %rax
	movabsq	$-5261542750394134544, %rcx     # imm = 0xB6FB3EBED039CFF0
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %rax
	movq	24(%rdi,%rax,8), %rax
	movq	%rsi, %rdi
	jmpq	*(%rax)                         # TAILCALL
.Lfunc_end447:
	.size	Array_capacity_, .Lfunc_end447-Array_capacity_
	.cfi_endproc
                                        # -- End function
	.globl	Array_append_xT                 # -- Begin function Array_append_xT
	.p2align	4, 0x90
	.type	Array_append_xT,@function
Array_append_xT:                        # @Array_append_xT
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$24, %rsp
	.cfi_def_cfa_offset 80
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rcx, 16(%rsp)                  # 8-byte Spill
	movq	%rdx, %r15
	movq	%rsi, %r14
	movq	%rdi, %rbx
	movabsq	$-5261542750394134544, %r12     # imm = 0xB6FB3EBED039CFF0
	movq	40(%rsi), %rax
	movq	8(%rsi), %rcx
	imulq	%r12, %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rsi), %rdx
	movslq	(%rax,%rdx,4), %r13
	movq	16(%rsi,%r13,8), %rax
	movq	%r15, %rdi
	callq	*(%rax)
	movl	%eax, %ebp
	movq	24(%r14,%r13,8), %rax
	movq	%r15, %rdi
	callq	*(%rax)
	cmpl	%eax, %ebp
	jl	.LBB448_2
# %bb.1:
	movq	%r15, %rdi
	callq	*(%r14,%r13,8)
	leaq	8(%rsp), %r8
	movq	%r14, %rdi
	movq	%r15, %rsi
	movq	16(%rsp), %rbp                  # 8-byte Reload
	movq	%rbp, %rdx
	movl	%r13d, %ecx
	callq	*80(%r14,%r13,8)
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	movq	%r14, %rdi
	movq	%r15, %rsi
	movq	%rbp, %rdx
	movl	%r13d, %ecx
	movq	%r14, %r8
	movq	%r15, %r9
	leaq	16(%rsp), %r10
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
.LBB448_2:                              # %._crit_edge
	movq	8(%r14,%r13,8), %rax
	movq	%r15, %rdi
	callq	*(%rax)
	movq	%rax, %rbp
	movq	16(%r14,%r13,8), %rax
	movq	%r15, %rdi
	callq	*(%rax)
	cltq
	shlq	$5, %rax
	movq	112(%rsp), %rdi
	movq	40(%rdi), %rcx
	movabsq	$3084208142191802847, %rdx      # imm = 0x2ACD4EF6E8B5B9DF
	imulq	8(%rdi), %rdx
	movq	%rdx, %rsi
	shrq	$32, %rsi
	xorq	%rdx, %rsi
	andq	16(%rdi), %rsi
	movl	(%rcx,%rsi,4), %ecx
	movq	%rdi, (%rbp,%rax)
	movq	136(%rsp), %rdx
	movq	%rdx, 16(%rbp,%rax)
	movq	128(%rsp), %rdx
	movq	%rdx, 8(%rbp,%rax)
	movl	%ecx, 24(%rbp,%rax)
	movq	16(%r14,%r13,8), %rax
	movq	%r15, %rdi
	callq	*(%rax)
                                        # kill: def $eax killed $eax def $rax
	leal	1(%rax), %esi
	movq	16(%r14,%r13,8), %rax
	movq	%r15, %rdi
	callq	*8(%rax)
	movq	40(%r14), %rax
	imulq	8(%r14), %r12
	movq	%r12, %rcx
	shrq	$32, %rcx
	xorq	%r12, %rcx
	andq	16(%r14), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	16(%rsp), %rcx                  # 8-byte Reload
	movq	%rcx, 16(%rbx)
	movq	%r15, 8(%rbx)
	movq	%r14, (%rbx)
	movl	%eax, 24(%rbx)
	movq	%rbx, %rax
	addq	$24, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end448:
	.size	Array_append_xT, .Lfunc_end448-Array_append_xT
	.cfi_endproc
                                        # -- End function
	.globl	Array_grow_                     # -- Begin function Array_grow_
	.p2align	4, 0x90
	.type	Array_grow_,@function
Array_grow_:                            # @Array_grow_
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	pushq	%rax
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movq	40(%rdi), %rax
	movabsq	$-5261542750394134544, %rcx     # imm = 0xB6FB3EBED039CFF0
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %r12
	movq	24(%rdi,%r12,8), %rax
	movq	%rsi, %rdi
	callq	*(%rax)
                                        # kill: def $eax killed $eax def $rax
	leal	(%rax,%rax), %esi
	movq	24(%r14,%r12,8), %rax
	movq	%rbx, %rdi
	callq	*8(%rax)
	movq	8(%r14,%r12,8), %rax
	movq	%rbx, %rdi
	callq	*(%rax)
	movq	%rax, %r15
	movq	24(%r14,%r12,8), %rax
	movq	%rbx, %rdi
	callq	*(%rax)
	movslq	%eax, %rdi
	shlq	$5, %rdi
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	callq	bump_malloc_inner@PLT
	movq	8(%r14,%r12,8), %rcx
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	*8(%rcx)
	movq	16(%r14,%r12,8), %rax
	movq	%rbx, %rdi
	callq	*(%rax)
	testl	%eax, %eax
	jle	.LBB449_3
# %bb.1:                                # %.lr.ph
	xorl	%ebp, %ebp
	movl	$8, %r13d
	.p2align	4, 0x90
.LBB449_2:                              # %._crit_edge
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%r14,%r12,8), %rax
	movq	%rbx, %rdi
	callq	*(%rax)
	movq	8(%r15,%r13), %rcx
	movq	-8(%r15,%r13), %rdx
	movq	(%r15,%r13), %rsi
	movq	40(%rdx), %rdi
	movq	8(%rdx), %r8
	movabsq	$3084208142191802847, %r9       # imm = 0x2ACD4EF6E8B5B9DF
	imulq	%r9, %r8
	movq	%r8, %r9
	shrq	$32, %r9
	xorq	%r8, %r9
	andq	16(%rdx), %r9
	movl	(%rdi,%r9,4), %edi
	movq	%rdx, -8(%rax,%r13)
	movl	%edi, 16(%rax,%r13)
	movq	%rsi, (%rax,%r13)
	movq	%rcx, 8(%rax,%r13)
	incl	%ebp
	movq	16(%r14,%r12,8), %rax
	movq	%rbx, %rdi
	callq	*(%rax)
	addq	$32, %r13
	cmpl	%eax, %ebp
	jl	.LBB449_2
.LBB449_3:                              # %._crit_edge._crit_edge
	addq	$8, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end449:
	.size	Array_grow_, .Lfunc_end449-Array_grow_
	.cfi_endproc
                                        # -- End function
	.globl	Array__index_xPtri32            # -- Begin function Array__index_xPtri32
	.p2align	4, 0x90
	.type	Array__index_xPtri32,@function
Array__index_xPtri32:                   # @Array__index_xPtri32
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$24, %rsp
	.cfi_def_cfa_offset 80
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rcx, (%rsp)                    # 8-byte Spill
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %rbx
	movl	112(%rsp), %r13d
	movq	40(%rsi), %rax
	movabsq	$-5261542750394134544, %rcx     # imm = 0xB6FB3EBED039CFF0
	imulq	8(%rsi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rsi), %rdx
	movslq	(%rax,%rdx,4), %r12
	movq	16(%rsi,%r12,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movl	%eax, %ebp
	decl	%ebp
	movq	16(%r15,%r12,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	cmpl	%ebp, %r13d
	jg	.LBB450_2
# %bb.1:
	addl	%r13d, %eax
	js	.LBB450_2
# %bb.3:                                # %._crit_edge
	testl	%r13d, %r13d
	js	.LBB450_4
.LBB450_5:
	movq	8(%r15,%r12,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movslq	%r13d, %rcx
	shlq	$5, %rcx
	movq	16(%rax,%rcx), %rdx
	movq	(%rax,%rcx), %rsi
	movq	8(%rax,%rcx), %rax
	movq	40(%rsi), %rcx
	movabsq	$3084208142191802847, %rdi      # imm = 0x2ACD4EF6E8B5B9DF
	imulq	8(%rsi), %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%rsi), %r8
	movl	(%rcx,%r8,4), %ecx
	movq	%rdx, 24(%rbx)
	movq	%rax, 16(%rbx)
	movq	%rsi, (%rbx)
	movl	%ecx, 32(%rbx)
	movq	%rbx, %rax
	addq	$24, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.LBB450_2:
	.cfi_def_cfa_offset 80
	movq	%r14, %rdi
	callq	*(%r15,%r12,8)
	movq	_parameterization_Ptri32@GOTPCREL(%rip), %rax
	movq	%rax, 16(%rsp)
	movq	96(%r15,%r12,8), %rax
	movq	i32_typ@GOTPCREL(%rip), %rcx
	movq	%rcx, 8(%rsp)
	leaq	8(%rsp), %r8
	movq	%r15, %rdi
	movq	%r14, %rsi
	movq	(%rsp), %rbp                    # 8-byte Reload
	movq	%rbp, %rdx
	movl	%r12d, %ecx
	callq	*%rax
	leaq	16(%rsp), %r10
	movq	%r15, %rdi
	movq	%r14, %rsi
	movq	%rbp, %rdx
	movl	%r12d, %ecx
	movq	%r15, %r8
	movq	%r14, %r9
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	testl	%r13d, %r13d
	jns	.LBB450_5
.LBB450_4:
	movq	16(%r15,%r12,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	addl	%r13d, %eax
	movl	%eax, %r13d
	jmp	.LBB450_5
.Lfunc_end450:
	.size	Array__index_xPtri32, .Lfunc_end450-Array__index_xPtri32
	.cfi_endproc
                                        # -- End function
	.globl	Array_throw_oob_xPtri32         # -- Begin function Array_throw_oob_xPtri32
	.p2align	4, 0x90
	.type	Array_throw_oob_xPtri32,@function
Array_throw_oob_xPtri32:                # @Array_throw_oob_xPtri32
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$72, %rsp
	.cfi_def_cfa_offset 128
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rsi, %r13
	movq	%rdi, %rbx
	movq	40(%rdi), %rax
	movabsq	$-5261542750394134544, %rcx     # imm = 0xB6FB3EBED039CFF0
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %r14
	movq	16(%rdi,%r14,8), %rax
	movq	%rsi, %rdi
	callq	*(%rax)
	movq	%fs:0, %rax
	movq	%rax, (%rsp)                    # 8-byte Spill
	leaq	current_ptr@TPOFF(%rax), %r12
	movl	$104, %edi
	movq	%r12, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r15
	movq	OutOfBounds@GOTPCREL(%rip), %rax
	movq	%rax, 8(%rsp)
	movq	%r15, 16(%rsp)
	movl	$9, 32(%rsp)
	movq	16(%rbx,%r14,8), %rax
	movq	%r13, %rdi
	callq	*(%rax)
	movl	%eax, %ebp
	movq	%r13, %rdi
	callq	*(%rbx,%r14,8)
	movl	$8, %edi
	movq	%r12, %rsi
	callq	bump_malloc_inner@PLT
	movq	OutOfBoundsDetails@GOTPCREL(%rip), %rcx
	movq	%rcx, 40(%rsp)
	movq	%rax, 48(%rsp)
	movl	$9, 64(%rsp)
	movl	%ebp, (%rax)
	movl	152(%rsp), %edx
	movl	%edx, 4(%rax)
	movq	48(%rsp), %rax
	movq	56(%rsp), %rdx
	movl	64(%rsp), %esi
	movq	%rcx, (%r15)
	movl	%esi, 24(%r15)
	movq	%rax, 8(%r15)
	movq	%rdx, 16(%r15)
	movl	$0, 32(%r15)
	movl	$1, %edi
	movq	%r12, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %rbp
	movl	$16, %edi
	movq	%r12, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rbp, (%rax)
	movabsq	$4294967296, %rcx               # imm = 0x100000000
	movq	%rcx, 8(%rax)
	movq	String@GOTPCREL(%rip), %rcx
	movq	%rcx, 40(%r15)
	movq	%rax, 48(%r15)
	movl	$9, 64(%r15)
	movl	$66, %edi
	movq	%r12, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %rbp
	movaps	fijgh_An_outofbounds_error_occurred_while_indexing_into_a_collection(%rip), %xmm0
	movaps	fijgh_An_outofbounds_error_occurred_while_indexing_into_a_collection+16(%rip), %xmm1
	movaps	fijgh_An_outofbounds_error_occurred_while_indexing_into_a_collection+32(%rip), %xmm2
	movaps	fijgh_An_outofbounds_error_occurred_while_indexing_into_a_collection+48(%rip), %xmm3
	movzbl	fijgh_An_outofbounds_error_occurred_while_indexing_into_a_collection+64(%rip), %eax
	movb	%al, 64(%rbp)
	movaps	%xmm3, 48(%rbp)
	movaps	%xmm2, 32(%rbp)
	movaps	%xmm1, 16(%rbp)
	movaps	%xmm0, (%rbp)
	movl	$16, %edi
	movq	%r12, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rbp, (%rax)
	movabsq	$283467841601, %rcx             # imm = 0x4200000041
	movq	%rcx, 8(%rax)
	movq	String@GOTPCREL(%rip), %rcx
	movq	%rcx, 72(%r15)
	movq	%rax, 80(%r15)
	movl	$9, 96(%r15)
	movl	$11, %edi
	movq	%r12, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %rbp
	movabsq	$7596779219853731188, %rax      # imm = 0x696D2E7374736574
	movq	%rax, (%rbp)
	movw	$26990, 8(%rbp)                 # imm = 0x696E
	movl	$16, %edi
	movq	%r12, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r12
	movq	%r13, %rdi
	callq	*(%rbx,%r14,8)
	movq	%rbp, (%r12)
	movabsq	$47244640266, %rax              # imm = 0xB0000000A
	movq	%rax, 8(%r12)
	movq	%r13, %rdi
	callq	*(%rbx,%r14,8)
	movl	$773, 32(%r15)                  # imm = 0x305
	movq	String@GOTPCREL(%rip), %rax
	movq	%rax, 40(%r15)
	movq	%r12, 48(%r15)
	movl	$9, 64(%r15)
	movq	16(%rsp), %rax
	movq	24(%rsp), %rcx
	movl	32(%rsp), %edx
	movq	current_coroutine@GOTTPOFF(%rip), %rsi
	movq	(%rsp), %r13                    # 8-byte Reload
	movq	(%r13,%rsi), %r12
	movl	%edx, 80(%r12)
	movq	%rax, 64(%r12)
	movq	%rcx, 72(%r12)
	movq	OutOfBounds@GOTPCREL(%rip), %rax
	movq	%rax, 48(%r12)
	addq	$8, %r12
	addq	into_caller_buf@GOTTPOFF(%rip), %r13
	callq	context_switch@PLT
	addq	$72, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end451:
	.size	Array_throw_oob_xPtri32, .Lfunc_end451-Array_throw_oob_xPtri32
	.cfi_endproc
                                        # -- End function
	.globl	Array_unsafe_index_xPtri32      # -- Begin function Array_unsafe_index_xPtri32
	.p2align	4, 0x90
	.type	Array_unsafe_index_xPtri32,@function
Array_unsafe_index_xPtri32:             # @Array_unsafe_index_xPtri32
	.cfi_startproc
# %bb.0:
	pushq	%r14
	.cfi_def_cfa_offset 16
	pushq	%rbx
	.cfi_def_cfa_offset 24
	pushq	%rax
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -24
	.cfi_offset %r14, -16
	movq	%rdi, %rbx
	movslq	64(%rsp), %r14
	movq	40(%rsi), %rax
	movabsq	$-5261542750394134544, %rcx     # imm = 0xB6FB3EBED039CFF0
	imulq	8(%rsi), %rcx
	movq	%rcx, %rdi
	shrq	$32, %rdi
	xorq	%rcx, %rdi
	andq	16(%rsi), %rdi
	movslq	(%rax,%rdi,4), %rax
	movq	8(%rsi,%rax,8), %rax
	movq	%rdx, %rdi
	callq	*(%rax)
	shlq	$5, %r14
	movq	16(%rax,%r14), %rcx
	movq	(%rax,%r14), %rdx
	movq	8(%rax,%r14), %rax
	movq	40(%rdx), %rsi
	movabsq	$3084208142191802847, %rdi      # imm = 0x2ACD4EF6E8B5B9DF
	imulq	8(%rdx), %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%rdx), %r8
	movl	(%rsi,%r8,4), %esi
	movq	%rcx, 24(%rbx)
	movq	%rax, 16(%rbx)
	movq	%rdx, (%rbx)
	movl	%esi, 32(%rbx)
	movq	%rbx, %rax
	addq	$8, %rsp
	.cfi_def_cfa_offset 24
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end452:
	.size	Array_unsafe_index_xPtri32, .Lfunc_end452-Array_unsafe_index_xPtri32
	.cfi_endproc
                                        # -- End function
	.globl	Array_iterator_                 # -- Begin function Array_iterator_
	.p2align	4, 0x90
	.type	Array_iterator_,@function
Array_iterator_:                        # @Array_iterator_
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$24, %rsp
	.cfi_def_cfa_offset 80
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rcx, 16(%rsp)                  # 8-byte Spill
	movq	%rdx, %r13
	movq	%rsi, %r12
	movq	%rdi, %rbx
	movq	40(%rsi), %rax
	movabsq	$-5261542750394134544, %r14     # imm = 0xB6FB3EBED039CFF0
	movq	8(%rsi), %rcx
	imulq	%r14, %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rsi), %rdx
	movslq	(%rax,%rdx,4), %r15
	movq	%r13, %rdi
	callq	*(%rsi,%r15,8)
	movq	%rax, 8(%rsp)                   # 8-byte Spill
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	movl	$48, %edi
	callq	bump_malloc_inner@PLT
	movq	%rax, %rbp
	movq	8(%rsp), %rax                   # 8-byte Reload
	movq	%rax, (%rbp)
	movq	%r13, %rdi
	callq	*(%r12,%r15,8)
	movq	40(%r12), %rax
	imulq	8(%r12), %r14
	movq	%r14, %rcx
	shrq	$32, %rcx
	xorq	%r14, %rcx
	andq	16(%r12), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	%r12, 8(%rbp)
	movq	%r13, 16(%rbp)
	movq	16(%rsp), %rcx                  # 8-byte Reload
	movq	%rcx, 24(%rbp)
	movl	%eax, 32(%rbp)
	movl	$0, 40(%rbp)
	movq	%rbp, 8(%rbx)
	movq	ArrayIterator@GOTPCREL(%rip), %rax
	movq	%rax, (%rbx)
	movl	$16, 24(%rbx)
	movq	%rbx, %rax
	addq	$24, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end453:
	.size	Array_iterator_, .Lfunc_end453-Array_iterator_
	.cfi_endproc
                                        # -- End function
	.globl	Iterable2_each_fFunctionT_to_Nothing # -- Begin function Iterable2_each_fFunctionT_to_Nothing
	.p2align	4, 0x90
	.type	Iterable2_each_fFunctionT_to_Nothing,@function
Iterable2_each_fFunctionT_to_Nothing:   # @Iterable2_each_fFunctionT_to_Nothing
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$152, %rsp
	.cfi_def_cfa_offset 208
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rdx, %rbx
	movq	%rsi, %r12
	movq	%rdi, %r14
	movq	40(%rdi), %rax
	movabsq	$5693646204635713916, %rcx      # imm = 0x4F03E50E9010117C
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %r13
	movq	%rsi, %rdi
	callq	*(%r14,%r13,8)
	leaq	8(%rsp), %r15
	movq	%r14, %rdi
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movl	%r13d, %ecx
	movq	%r15, %r8
	callq	*8(%r14,%r13,8)
	leaq	64(%rsp), %rdi
	movq	%r14, %rsi
	movq	%r12, %rdx
	movq	%rbx, %rcx
	movl	%r13d, %r8d
	movq	%r14, 24(%rsp)                  # 8-byte Spill
	movq	%r14, %r9
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	movq	%r13, 24(%rsp)                  # 8-byte Spill
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	movq	%r12, %r14
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	80(%rsp), %rbx
	movq	64(%rsp), %r13
	movq	72(%rsp), %rbp
	movq	40(%r13), %rax
	movabsq	$4189192806087951739, %rcx      # imm = 0x3A2300A96E7E857B
	imulq	8(%r13), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%r13), %rdx
	movl	(%rax,%rdx,4), %r12d
	movq	%r13, 32(%rsp)
	movq	%rbp, 40(%rsp)
	movq	%rbx, 48(%rsp)
	movl	%r12d, 56(%rsp)
	.p2align	4, 0x90
.LBB454_1:                              # %._crit_edge1
                                        # =>This Inner Loop Header: Depth=1
	movq	%r14, %rdi
	movq	24(%rsp), %rax                  # 8-byte Reload
	movq	16(%rsp), %rcx                  # 8-byte Reload
	callq	*(%rax,%rcx,8)
	movslq	%r12d, %r12
	movq	%r13, %rdi
	movq	%rbp, %rsi
	movq	%rbx, %rdx
	movl	%r12d, %ecx
	leaq	8(%rsp), %r15
	movq	%r15, %r8
	callq	*8(%r13,%r12,8)
	leaq	96(%rsp), %rdi
	movq	%r13, %rsi
	movq	%rbp, %rdx
	movq	%rbx, %rcx
	movl	%r12d, %r8d
	movq	%r13, %r9
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	96(%rsp), %rdi
	cmpq	nil_typ@GOTPCREL(%rip), %rdi
	je	.LBB454_4
# %bb.2:                                # %._crit_edge1
                                        #   in Loop: Header=BB454_1 Depth=1
	testq	%rdi, %rdi
	je	.LBB454_4
# %bb.3:                                # %._crit_edge
                                        #   in Loop: Header=BB454_1 Depth=1
	movq	120(%rsp), %rdx
	movq	112(%rsp), %rsi
	movq	40(%rdi), %rax
	movq	8(%rdi), %rcx
	movabsq	$3084208142191802847, %r8       # imm = 0x2ACD4EF6E8B5B9DF
	imulq	%r8, %rcx
	movq	%rcx, %r8
	shrq	$32, %r8
	xorq	%rcx, %r8
	andq	16(%rdi), %r8
	movl	(%rax,%r8,4), %ecx
	callq	*232(%rsp)
	movq	40(%rsp), %rbp
	movq	48(%rsp), %rbx
	movl	56(%rsp), %r12d
	jmp	.LBB454_1
.LBB454_4:                              # %.critedge
	addq	$152, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end454:
	.size	Iterable2_each_fFunctionT_to_Nothing, .Lfunc_end454-Iterable2_each_fFunctionT_to_Nothing
	.cfi_endproc
                                        # -- End function
	.globl	Iterable2_reduce_accumulatorT_fFunctionT._T_to_T # -- Begin function Iterable2_reduce_accumulatorT_fFunctionT._T_to_T
	.p2align	4, 0x90
	.type	Iterable2_reduce_accumulatorT_fFunctionT._T_to_T,@function
Iterable2_reduce_accumulatorT_fFunctionT._T_to_T: # @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$232, %rsp
	.cfi_def_cfa_offset 288
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rcx, %rbx
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, 32(%rsp)                  # 8-byte Spill
	movq	344(%rsp), %rax
	movq	%rax, 24(%rsp)                  # 8-byte Spill
	movq	336(%rsp), %rax
	movq	%rax, 16(%rsp)                  # 8-byte Spill
	movq	320(%rsp), %r13
	movq	40(%rsi), %rax
	movabsq	$5693646204635713916, %rcx      # imm = 0x4F03E50E9010117C
	imulq	8(%rsi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rsi), %rdx
	movslq	(%rax,%rdx,4), %r12
	movq	%r14, %rdi
	callq	*(%rsi,%r12,8)
	leaq	8(%rsp), %rbp
	movq	%r15, %rdi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movl	%r12d, %ecx
	movq	%rbp, %r8
	callq	*8(%r15,%r12,8)
	leaq	96(%rsp), %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	movq	%rbx, %rcx
	movl	%r12d, %r8d
	movq	%r15, 48(%rsp)                  # 8-byte Spill
	movq	%r15, %r9
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	movq	%r12, 48(%rsp)                  # 8-byte Spill
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	movq	%r14, 80(%rsp)                  # 8-byte Spill
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	112(%rsp), %rbx
	movq	96(%rsp), %r14
	movq	104(%rsp), %r15
	movq	40(%r14), %rax
	movabsq	$4189192806087951739, %rcx      # imm = 0x3A2300A96E7E857B
	imulq	8(%r14), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%r14), %rdx
	movl	(%rax,%rdx,4), %r12d
	movq	%r14, 64(%rsp)
	movq	%r15, 72(%rsp)
	movq	%rbx, 80(%rsp)
	movl	%r12d, 88(%rsp)
	.p2align	4, 0x90
.LBB455_1:                              # %._crit_edge1
                                        # =>This Inner Loop Header: Depth=1
	movq	56(%rsp), %rdi                  # 8-byte Reload
	movq	48(%rsp), %rax                  # 8-byte Reload
	movq	40(%rsp), %rcx                  # 8-byte Reload
	callq	*(%rax,%rcx,8)
	movslq	%r12d, %r12
	movq	%r14, %rdi
	movq	%r15, %rsi
	movq	%rbx, %rdx
	movl	%r12d, %ecx
	leaq	8(%rsp), %rbp
	movq	%rbp, %r8
	callq	*8(%r14,%r12,8)
	leaq	176(%rsp), %rdi
	movq	%r14, %rsi
	movq	%r15, %rdx
	movq	%rbx, %rcx
	movl	%r12d, %r8d
	movq	%r14, %r9
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	176(%rsp), %r9
	cmpq	nil_typ@GOTPCREL(%rip), %r9
	je	.LBB455_4
# %bb.2:                                # %._crit_edge1
                                        #   in Loop: Header=BB455_1 Depth=1
	testq	%r9, %r9
	je	.LBB455_4
# %bb.3:                                # %._crit_edge
                                        #   in Loop: Header=BB455_1 Depth=1
	movq	40(%r9), %rax
	movq	8(%r9), %rcx
	movabsq	$3084208142191802847, %rsi      # imm = 0x2ACD4EF6E8B5B9DF
	imulq	%rsi, %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%r9), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	40(%r13), %rcx
	movq	8(%r13), %rdx
	imulq	%rsi, %rdx
	movq	%rdx, %rsi
	shrq	$32, %rsi
	xorq	%rdx, %rsi
	andq	16(%r13), %rsi
	movl	(%rcx,%rsi,4), %r8d
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	leaq	136(%rsp), %rdi
	movq	%r13, %rsi
	movq	24(%rsp), %rdx                  # 8-byte Reload
	movq	32(%rsp), %rcx                  # 8-byte Reload
	pushq	%rax
	.cfi_adjust_cfa_offset 8
	pushq	216(%rsp)
	.cfi_adjust_cfa_offset 8
	pushq	216(%rsp)
	.cfi_adjust_cfa_offset 8
	callq	*392(%rsp)
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	152(%rsp), %rax
	movq	%rax, 24(%rsp)                  # 8-byte Spill
	movq	128(%rsp), %r13
	movq	144(%rsp), %rax
	movq	%rax, 16(%rsp)                  # 8-byte Spill
	movq	72(%rsp), %r15
	movq	80(%rsp), %rbx
	movl	88(%rsp), %r12d
	jmp	.LBB455_1
.LBB455_4:                              # %.critedge
	movq	40(%r13), %rax
	movabsq	$3084208142191802847, %rdx      # imm = 0x2ACD4EF6E8B5B9DF
	imulq	8(%r13), %rdx
	movq	%rdx, %rcx
	shrq	$32, %rcx
	xorq	%rdx, %rcx
	andq	16(%r13), %rcx
	movl	(%rax,%rcx,4), %ecx
	movq	32(%rsp), %rax                  # 8-byte Reload
	movq	16(%rsp), %rdx                  # 8-byte Reload
	movq	%rdx, 16(%rax)
	movq	%r13, (%rax)
	movq	24(%rsp), %rdx                  # 8-byte Reload
	movq	%rdx, 24(%rax)
	movl	%ecx, 32(%rax)
	addq	$232, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end455:
	.size	Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, .Lfunc_end455-Iterable2_reduce_accumulatorT_fFunctionT._T_to_T
	.cfi_endproc
                                        # -- End function
	.globl	Iterable2_all_fFunctionT_to_Ptri1 # -- Begin function Iterable2_all_fFunctionT_to_Ptri1
	.p2align	4, 0x90
	.type	Iterable2_all_fFunctionT_to_Ptri1,@function
Iterable2_all_fFunctionT_to_Ptri1:      # @Iterable2_all_fFunctionT_to_Ptri1
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$152, %rsp
	.cfi_def_cfa_offset 208
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rdx, %r13
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movq	40(%rdi), %rax
	movabsq	$5693646204635713916, %rcx      # imm = 0x4F03E50E9010117C
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %r12
	movq	%rsi, %rdi
	callq	*(%r14,%r12,8)
	leaq	8(%rsp), %r15
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%r13, %rdx
	movl	%r12d, %ecx
	movq	%r15, %r8
	callq	*8(%r14,%r12,8)
	leaq	64(%rsp), %rdi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movq	%r13, %rcx
	movl	%r12d, %r8d
	movq	%r14, %r9
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	movq	%r12, 24(%rsp)                  # 8-byte Spill
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	movq	%rbx, 48(%rsp)                  # 8-byte Spill
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	80(%rsp), %rax
	movq	64(%rsp), %r13
	movq	72(%rsp), %rcx
	movq	40(%r13), %rdx
	movabsq	$4189192806087951739, %rsi      # imm = 0x3A2300A96E7E857B
	imulq	8(%r13), %rsi
	movq	%rsi, %rdi
	shrq	$32, %rdi
	xorq	%rsi, %rdi
	andq	16(%r13), %rdi
	movl	(%rdx,%rdi,4), %edx
	movq	%r13, 32(%rsp)
	movq	%rcx, 40(%rsp)
	movq	%rax, 48(%rsp)
	movl	%edx, 56(%rsp)
	.p2align	4, 0x90
.LBB456_1:                              # =>This Inner Loop Header: Depth=1
	movq	40(%rsp), %rbp
	movq	48(%rsp), %r12
	movslq	56(%rsp), %rbx
	movq	24(%rsp), %rdi                  # 8-byte Reload
	movq	16(%rsp), %rax                  # 8-byte Reload
	callq	*(%r14,%rax,8)
	movq	%r13, %rdi
	movq	%rbp, %rsi
	movq	%r12, %rdx
	movl	%ebx, %ecx
	leaq	8(%rsp), %r15
	movq	%r15, %r8
	callq	*8(%r13,%rbx,8)
	leaq	96(%rsp), %rdi
	movq	%r13, %rsi
	movq	%rbp, %rdx
	movq	%r12, %rcx
	movl	%ebx, %r8d
	movq	%r13, %r9
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	96(%rsp), %rdi
	cmpq	nil_typ@GOTPCREL(%rip), %rdi
	sete	%al
	testq	%rdi, %rdi
	sete	%bpl
	orb	%al, %bpl
	jne	.LBB456_3
# %bb.2:                                #   in Loop: Header=BB456_1 Depth=1
	movq	120(%rsp), %rdx
	movq	112(%rsp), %rsi
	movq	40(%rdi), %rax
	movq	8(%rdi), %rcx
	movabsq	$3084208142191802847, %r8       # imm = 0x2ACD4EF6E8B5B9DF
	imulq	%r8, %rcx
	movq	%rcx, %r8
	shrq	$32, %r8
	xorq	%rcx, %r8
	andq	16(%rdi), %r8
	movl	(%rax,%r8,4), %ecx
	callq	*232(%rsp)
	testb	$1, %al
	jne	.LBB456_1
.LBB456_3:                              # %.critedge.cont
	movl	%ebp, %eax
	addq	$152, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end456:
	.size	Iterable2_all_fFunctionT_to_Ptri1, .Lfunc_end456-Iterable2_all_fFunctionT_to_Ptri1
	.cfi_endproc
                                        # -- End function
	.globl	Iterable2_any_fFunctionT_to_Ptri1 # -- Begin function Iterable2_any_fFunctionT_to_Ptri1
	.p2align	4, 0x90
	.type	Iterable2_any_fFunctionT_to_Ptri1,@function
Iterable2_any_fFunctionT_to_Ptri1:      # @Iterable2_any_fFunctionT_to_Ptri1
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$152, %rsp
	.cfi_def_cfa_offset 208
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rdx, %r13
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movq	40(%rdi), %rax
	movabsq	$5693646204635713916, %rcx      # imm = 0x4F03E50E9010117C
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %r12
	movq	%rsi, %rdi
	callq	*(%r14,%r12,8)
	leaq	8(%rsp), %r15
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%r13, %rdx
	movl	%r12d, %ecx
	movq	%r15, %r8
	callq	*8(%r14,%r12,8)
	leaq	64(%rsp), %rdi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movq	%r13, %rcx
	movl	%r12d, %r8d
	movq	%r14, %r9
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	movq	%r12, 24(%rsp)                  # 8-byte Spill
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	movq	%rbx, 48(%rsp)                  # 8-byte Spill
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	80(%rsp), %rax
	movq	64(%rsp), %r13
	movq	72(%rsp), %rcx
	movq	40(%r13), %rdx
	movabsq	$4189192806087951739, %rsi      # imm = 0x3A2300A96E7E857B
	imulq	8(%r13), %rsi
	movq	%rsi, %rdi
	shrq	$32, %rdi
	xorq	%rsi, %rdi
	andq	16(%r13), %rdi
	movl	(%rdx,%rdi,4), %edx
	movq	%r13, 32(%rsp)
	movq	%rcx, 40(%rsp)
	movq	%rax, 48(%rsp)
	movl	%edx, 56(%rsp)
	.p2align	4, 0x90
.LBB457_1:                              # =>This Inner Loop Header: Depth=1
	movq	40(%rsp), %rbp
	movq	48(%rsp), %r12
	movslq	56(%rsp), %rbx
	movq	24(%rsp), %rdi                  # 8-byte Reload
	movq	16(%rsp), %rax                  # 8-byte Reload
	callq	*(%r14,%rax,8)
	movq	%r13, %rdi
	movq	%rbp, %rsi
	movq	%r12, %rdx
	movl	%ebx, %ecx
	leaq	8(%rsp), %r15
	movq	%r15, %r8
	callq	*8(%r13,%rbx,8)
	leaq	96(%rsp), %rdi
	movq	%r13, %rsi
	movq	%rbp, %rdx
	movq	%r12, %rcx
	movl	%ebx, %r8d
	movq	%r13, %r9
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	96(%rsp), %rdi
	cmpq	nil_typ@GOTPCREL(%rip), %rdi
	setne	%al
	testq	%rdi, %rdi
	setne	%bpl
	andb	%al, %bpl
	cmpb	$1, %bpl
	jne	.LBB457_3
# %bb.2:                                #   in Loop: Header=BB457_1 Depth=1
	movq	120(%rsp), %rdx
	movq	112(%rsp), %rsi
	movq	40(%rdi), %rax
	movq	8(%rdi), %rcx
	movabsq	$3084208142191802847, %r8       # imm = 0x2ACD4EF6E8B5B9DF
	imulq	%r8, %rcx
	movq	%rcx, %r8
	shrq	$32, %r8
	xorq	%rcx, %r8
	andq	16(%rdi), %r8
	movl	(%rax,%r8,4), %ecx
	callq	*232(%rsp)
	testb	$1, %al
	je	.LBB457_1
.LBB457_3:                              # %.critedge.cont
	movl	%ebp, %eax
	addq	$152, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end457:
	.size	Iterable2_any_fFunctionT_to_Ptri1, .Lfunc_end457-Iterable2_any_fFunctionT_to_Ptri1
	.cfi_endproc
                                        # -- End function
	.globl	Iterable2_map_fFunctionT_to_U   # -- Begin function Iterable2_map_fFunctionT_to_U
	.p2align	4, 0x90
	.type	Iterable2_map_fFunctionT_to_U,@function
Iterable2_map_fFunctionT_to_U:          # @Iterable2_map_fFunctionT_to_U
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$24, %rsp
	.cfi_def_cfa_offset 80
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rcx, 16(%rsp)                  # 8-byte Spill
	movq	%rdx, %r13
	movq	%rsi, %r12
	movq	%rdi, %rbx
	movq	104(%rsp), %rbp
	movq	40(%rsi), %rax
	movabsq	$5693646204635713916, %r14      # imm = 0x4F03E50E9010117C
	movq	8(%rsi), %rcx
	imulq	%r14, %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rsi), %rdx
	movslq	(%rax,%rdx,4), %r15
	movq	%r13, %rdi
	callq	*(%rsi,%r15,8)
	movq	%rax, 8(%rsp)                   # 8-byte Spill
	movq	(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, (%rsp)                    # 8-byte Spill
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	movl	$56, %edi
	callq	bump_malloc_inner@PLT
	movq	%rax, %rbp
	movq	8(%rsp), %rax                   # 8-byte Reload
	movq	%rax, (%rbp)
	movq	(%rsp), %rax                    # 8-byte Reload
	movq	%rax, 8(%rbp)
	movq	%r13, %rdi
	callq	*(%r12,%r15,8)
	movq	40(%r12), %rax
	imulq	8(%r12), %r14
	movq	%r14, %rcx
	shrq	$32, %rcx
	xorq	%r14, %rcx
	andq	16(%r12), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	%r12, 16(%rbp)
	movq	%r13, 24(%rbp)
	movq	16(%rsp), %rcx                  # 8-byte Reload
	movq	%rcx, 32(%rbp)
	movl	%eax, 40(%rbp)
	movq	112(%rsp), %rax
	movq	%rax, 48(%rbp)
	movq	%rbp, 8(%rbx)
	movq	MapIterable2@GOTPCREL(%rip), %rax
	movq	%rax, (%rbx)
	movl	$37, 24(%rbx)
	movq	%rbx, %rax
	addq	$24, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end458:
	.size	Iterable2_map_fFunctionT_to_U, .Lfunc_end458-Iterable2_map_fFunctionT_to_U
	.cfi_endproc
                                        # -- End function
	.globl	Iterable2_filter_fFunctionT_to_Ptri1 # -- Begin function Iterable2_filter_fFunctionT_to_Ptri1
	.p2align	4, 0x90
	.type	Iterable2_filter_fFunctionT_to_Ptri1,@function
Iterable2_filter_fFunctionT_to_Ptri1:   # @Iterable2_filter_fFunctionT_to_Ptri1
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$24, %rsp
	.cfi_def_cfa_offset 80
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rcx, 16(%rsp)                  # 8-byte Spill
	movq	%rdx, %r13
	movq	%rsi, %r12
	movq	%rdi, %rbx
	movq	40(%rsi), %rax
	movabsq	$5693646204635713916, %r14      # imm = 0x4F03E50E9010117C
	movq	8(%rsi), %rcx
	imulq	%r14, %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rsi), %rdx
	movslq	(%rax,%rdx,4), %r15
	movq	%r13, %rdi
	callq	*(%rsi,%r15,8)
	movq	%rax, 8(%rsp)                   # 8-byte Spill
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	movl	$48, %edi
	callq	bump_malloc_inner@PLT
	movq	%rax, %rbp
	movq	8(%rsp), %rax                   # 8-byte Reload
	movq	%rax, (%rbp)
	movq	%r13, %rdi
	callq	*(%r12,%r15,8)
	movq	40(%r12), %rax
	imulq	8(%r12), %r14
	movq	%r14, %rcx
	shrq	$32, %rcx
	xorq	%r14, %rcx
	andq	16(%r12), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	%r12, 8(%rbp)
	movq	%r13, 16(%rbp)
	movq	16(%rsp), %rcx                  # 8-byte Reload
	movq	%rcx, 24(%rbp)
	movl	%eax, 32(%rbp)
	movq	112(%rsp), %rax
	movq	%rax, 40(%rbp)
	movq	%rbp, 8(%rbx)
	movq	FilterIterable2@GOTPCREL(%rip), %rax
	movq	%rax, (%rbx)
	movl	$36, 24(%rbx)
	movq	%rbx, %rax
	addq	$24, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end459:
	.size	Iterable2_filter_fFunctionT_to_Ptri1, .Lfunc_end459-Iterable2_filter_fFunctionT_to_Ptri1
	.cfi_endproc
                                        # -- End function
	.globl	Iterable2_chain_otherIterable2T # -- Begin function Iterable2_chain_otherIterable2T
	.p2align	4, 0x90
	.type	Iterable2_chain_otherIterable2T,@function
Iterable2_chain_otherIterable2T:        # @Iterable2_chain_otherIterable2T
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$24, %rsp
	.cfi_def_cfa_offset 80
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rcx, 16(%rsp)                  # 8-byte Spill
	movq	%rdx, %rbx
	movq	%rsi, %r12
	movq	%rdi, 8(%rsp)                   # 8-byte Spill
	movq	40(%rsi), %rax
	movabsq	$5693646204635713916, %r14      # imm = 0x4F03E50E9010117C
	movq	8(%rsi), %rcx
	imulq	%r14, %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rsi), %rdx
	movslq	(%rax,%rdx,4), %r15
	movq	%rbx, %rdi
	callq	*(%rsi,%r15,8)
	movq	%rax, %rbp
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	movl	$72, %edi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r13
	movq	%rbp, (%rax)
	movq	ChainIterable2@GOTPCREL(%rip), %rbp
	movq	%rbx, %rdi
	callq	*(%r12,%r15,8)
	movq	40(%r12), %rax
	movq	8(%r12), %rcx
	imulq	%r14, %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%r12), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	%r12, 8(%r13)
	movq	%rbx, 16(%r13)
	movq	16(%rsp), %rcx                  # 8-byte Reload
	movq	%rcx, 24(%r13)
	movl	%eax, 32(%r13)
	movq	112(%rsp), %rdx
	movq	40(%rdx), %rax
	imulq	8(%rdx), %r14
	movq	%r14, %rcx
	shrq	$32, %rcx
	xorq	%r14, %rcx
	andq	16(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	%rdx, 40(%r13)
	movq	120(%rsp), %rcx
	movq	%rcx, 48(%r13)
	movq	128(%rsp), %rcx
	movq	%rcx, 56(%r13)
	movl	%eax, 64(%r13)
	movq	8(%rsp), %rax                   # 8-byte Reload
	movq	%rbp, (%rax)
	movq	%r13, 8(%rax)
	movl	$36, 24(%rax)
	addq	$24, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end460:
	.size	Iterable2_chain_otherIterable2T, .Lfunc_end460-Iterable2_chain_otherIterable2T
	.cfi_endproc
                                        # -- End function
	.globl	Iterable2_interleave_otherIterable2T # -- Begin function Iterable2_interleave_otherIterable2T
	.p2align	4, 0x90
	.type	Iterable2_interleave_otherIterable2T,@function
Iterable2_interleave_otherIterable2T:   # @Iterable2_interleave_otherIterable2T
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$24, %rsp
	.cfi_def_cfa_offset 80
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rcx, 16(%rsp)                  # 8-byte Spill
	movq	%rdx, %rbx
	movq	%rsi, %r12
	movq	%rdi, 8(%rsp)                   # 8-byte Spill
	movq	40(%rsi), %rax
	movabsq	$5693646204635713916, %r14      # imm = 0x4F03E50E9010117C
	movq	8(%rsi), %rcx
	imulq	%r14, %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rsi), %rdx
	movslq	(%rax,%rdx,4), %r15
	movq	%rbx, %rdi
	callq	*(%rsi,%r15,8)
	movq	%rax, %rbp
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	movl	$72, %edi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r13
	movq	%rbp, (%rax)
	movq	InterleaveIterable2@GOTPCREL(%rip), %rbp
	movq	%rbx, %rdi
	callq	*(%r12,%r15,8)
	movq	40(%r12), %rax
	movq	8(%r12), %rcx
	imulq	%r14, %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%r12), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	%r12, 8(%r13)
	movq	%rbx, 16(%r13)
	movq	16(%rsp), %rcx                  # 8-byte Reload
	movq	%rcx, 24(%r13)
	movl	%eax, 32(%r13)
	movq	112(%rsp), %rdx
	movq	40(%rdx), %rax
	imulq	8(%rdx), %r14
	movq	%r14, %rcx
	shrq	$32, %rcx
	xorq	%r14, %rcx
	andq	16(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	%rdx, 40(%r13)
	movq	120(%rsp), %rcx
	movq	%rcx, 48(%r13)
	movq	128(%rsp), %rcx
	movq	%rcx, 56(%r13)
	movl	%eax, 64(%r13)
	movq	8(%rsp), %rax                   # 8-byte Reload
	movq	%rbp, (%rax)
	movq	%r13, 8(%rax)
	movl	$36, 24(%rax)
	addq	$24, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end461:
	.size	Iterable2_interleave_otherIterable2T, .Lfunc_end461-Iterable2_interleave_otherIterable2T
	.cfi_endproc
                                        # -- End function
	.globl	Iterable2_zip_otherIterable2U   # -- Begin function Iterable2_zip_otherIterable2U
	.p2align	4, 0x90
	.type	Iterable2_zip_otherIterable2U,@function
Iterable2_zip_otherIterable2U:          # @Iterable2_zip_otherIterable2U
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$40, %rsp
	.cfi_def_cfa_offset 96
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rcx, 24(%rsp)                  # 8-byte Spill
	movq	%rdx, %r8
	movq	%rdx, 8(%rsp)                   # 8-byte Spill
	movq	%rsi, %r13
	movq	%rdi, 32(%rsp)                  # 8-byte Spill
	movq	136(%rsp), %r15
	movslq	152(%rsp), %r12
	movq	%r12, (%rsp)                    # 8-byte Spill
	movq	128(%rsp), %rbp
	movq	40(%rsi), %rax
	movabsq	$5693646204635713916, %rbx      # imm = 0x4F03E50E9010117C
	movq	8(%rsi), %rcx
	imulq	%rbx, %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rsi), %rdx
	movslq	(%rax,%rdx,4), %rax
	movq	%rax, 16(%rsp)                  # 8-byte Spill
	movq	%r8, %rdi
	callq	*(%rsi,%rax,8)
	movq	%rax, %r14
	movq	%r15, %rdi
	callq	*(%rbp,%r12,8)
	movq	%rax, %r15
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rbp
	movl	$32, %edi
	movq	%rbp, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r12
	movq	%r15, 16(%rax)
	movq	%r14, 8(%rax)
	movq	$0, 24(%rax)
	movq	Pair@GOTPCREL(%rip), %rax
	movq	%rax, (%r12)
	movl	$88, %edi
	movq	%rbp, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %rbp
	movq	%r14, (%rax)
	movq	%r15, 8(%rax)
	movq	%r12, 16(%rax)
	movq	8(%rsp), %r15                   # 8-byte Reload
	movq	%r15, %rdi
	movq	16(%rsp), %rax                  # 8-byte Reload
	callq	*(%r13,%rax,8)
	movq	136(%rsp), %r14
	movq	%r14, %rdi
	movq	128(%rsp), %r12
	movq	(%rsp), %rax                    # 8-byte Reload
	callq	*(%r12,%rax,8)
	movq	40(%r13), %rax
	movq	8(%r13), %rcx
	imulq	%rbx, %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%r13), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	%r13, 24(%rbp)
	movq	%r15, 32(%rbp)
	movq	24(%rsp), %rcx                  # 8-byte Reload
	movq	%rcx, 40(%rbp)
	movl	%eax, 48(%rbp)
	movq	40(%r12), %rax
	imulq	8(%r12), %rbx
	movq	%rbx, %rcx
	shrq	$32, %rcx
	xorq	%rbx, %rcx
	andq	16(%r12), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	%r12, 56(%rbp)
	movq	%r14, 64(%rbp)
	movq	144(%rsp), %rcx
	movq	%rcx, 72(%rbp)
	movl	%eax, 80(%rbp)
	movq	32(%rsp), %rax                  # 8-byte Reload
	movq	ZipIterable2@GOTPCREL(%rip), %rcx
	movq	%rcx, (%rax)
	movq	%rbp, 8(%rax)
	movl	$9, 24(%rax)
	addq	$40, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end462:
	.size	Iterable2_zip_otherIterable2U, .Lfunc_end462-Iterable2_zip_otherIterable2U
	.cfi_endproc
                                        # -- End function
	.globl	Iterable2_product_otherIterable2U # -- Begin function Iterable2_product_otherIterable2U
	.p2align	4, 0x90
	.type	Iterable2_product_otherIterable2U,@function
Iterable2_product_otherIterable2U:      # @Iterable2_product_otherIterable2U
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$40, %rsp
	.cfi_def_cfa_offset 96
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rcx, 24(%rsp)                  # 8-byte Spill
	movq	%rdx, %r8
	movq	%rdx, 8(%rsp)                   # 8-byte Spill
	movq	%rsi, %r13
	movq	%rdi, 32(%rsp)                  # 8-byte Spill
	movq	136(%rsp), %r15
	movslq	152(%rsp), %r12
	movq	%r12, (%rsp)                    # 8-byte Spill
	movq	128(%rsp), %rbp
	movq	40(%rsi), %rax
	movabsq	$5693646204635713916, %rbx      # imm = 0x4F03E50E9010117C
	movq	8(%rsi), %rcx
	imulq	%rbx, %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rsi), %rdx
	movslq	(%rax,%rdx,4), %rax
	movq	%rax, 16(%rsp)                  # 8-byte Spill
	movq	%r8, %rdi
	callq	*(%rsi,%rax,8)
	movq	%rax, %r14
	movq	%r15, %rdi
	callq	*(%rbp,%r12,8)
	movq	%rax, %r15
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rbp
	movl	$32, %edi
	movq	%rbp, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r12
	movq	%r15, 16(%rax)
	movq	%r14, 8(%rax)
	movq	$0, 24(%rax)
	movq	Pair@GOTPCREL(%rip), %rax
	movq	%rax, (%r12)
	movl	$88, %edi
	movq	%rbp, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %rbp
	movq	%r14, (%rax)
	movq	%r15, 8(%rax)
	movq	%r12, 16(%rax)
	movq	8(%rsp), %r15                   # 8-byte Reload
	movq	%r15, %rdi
	movq	16(%rsp), %rax                  # 8-byte Reload
	callq	*(%r13,%rax,8)
	movq	136(%rsp), %r14
	movq	%r14, %rdi
	movq	128(%rsp), %r12
	movq	(%rsp), %rax                    # 8-byte Reload
	callq	*(%r12,%rax,8)
	movq	40(%r13), %rax
	movq	8(%r13), %rcx
	imulq	%rbx, %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%r13), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	%r13, 24(%rbp)
	movq	%r15, 32(%rbp)
	movq	24(%rsp), %rcx                  # 8-byte Reload
	movq	%rcx, 40(%rbp)
	movl	%eax, 48(%rbp)
	movq	40(%r12), %rax
	imulq	8(%r12), %rbx
	movq	%rbx, %rcx
	shrq	$32, %rcx
	xorq	%rbx, %rcx
	andq	16(%r12), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	%r12, 56(%rbp)
	movq	%r14, 64(%rbp)
	movq	144(%rsp), %rcx
	movq	%rcx, 72(%rbp)
	movl	%eax, 80(%rbp)
	movq	32(%rsp), %rax                  # 8-byte Reload
	movq	ProductIterable2@GOTPCREL(%rip), %rcx
	movq	%rcx, (%rax)
	movq	%rbp, 8(%rax)
	movl	$9, 24(%rax)
	addq	$40, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end463:
	.size	Iterable2_product_otherIterable2U, .Lfunc_end463-Iterable2_product_otherIterable2U
	.cfi_endproc
                                        # -- End function
	.globl	_size_ProductIterable2          # -- Begin function _size_ProductIterable2
	.p2align	4, 0x90
	.type	_size_ProductIterable2,@function
_size_ProductIterable2:                 # @_size_ProductIterable2
# %bb.0:
	movl	$88, %eax
	movl	$8, %edx
	retq
.Lfunc_end464:
	.size	_size_ProductIterable2, .Lfunc_end464-_size_ProductIterable2
                                        # -- End function
	.globl	ProductIterable2_field_ProductIterable2_0 # -- Begin function ProductIterable2_field_ProductIterable2_0
	.p2align	4, 0x90
	.type	ProductIterable2_field_ProductIterable2_0,@function
ProductIterable2_field_ProductIterable2_0: # @ProductIterable2_field_ProductIterable2_0
# %bb.0:
	movq	(%rdi), %rax
	retq
.Lfunc_end465:
	.size	ProductIterable2_field_ProductIterable2_0, .Lfunc_end465-ProductIterable2_field_ProductIterable2_0
                                        # -- End function
	.globl	ProductIterable2_field_ProductIterable2_1 # -- Begin function ProductIterable2_field_ProductIterable2_1
	.p2align	4, 0x90
	.type	ProductIterable2_field_ProductIterable2_1,@function
ProductIterable2_field_ProductIterable2_1: # @ProductIterable2_field_ProductIterable2_1
# %bb.0:
	movq	8(%rdi), %rax
	retq
.Lfunc_end466:
	.size	ProductIterable2_field_ProductIterable2_1, .Lfunc_end466-ProductIterable2_field_ProductIterable2_1
                                        # -- End function
	.globl	ProductIterable2_field_ProductIterable2_2 # -- Begin function ProductIterable2_field_ProductIterable2_2
	.p2align	4, 0x90
	.type	ProductIterable2_field_ProductIterable2_2,@function
ProductIterable2_field_ProductIterable2_2: # @ProductIterable2_field_ProductIterable2_2
# %bb.0:
	movq	16(%rdi), %rax
	retq
.Lfunc_end467:
	.size	ProductIterable2_field_ProductIterable2_2, .Lfunc_end467-ProductIterable2_field_ProductIterable2_2
                                        # -- End function
	.globl	ProductIterable2_B_init_firstIterable2T_secondIterable2U # -- Begin function ProductIterable2_B_init_firstIterable2T_secondIterable2U
	.p2align	4, 0x90
	.type	ProductIterable2_B_init_firstIterable2T_secondIterable2U,@function
ProductIterable2_B_init_firstIterable2T_secondIterable2U: # @ProductIterable2_B_init_firstIterable2T_secondIterable2U
# %bb.0:
	movq	208(%rdi), %rax
	retq
.Lfunc_end468:
	.size	ProductIterable2_B_init_firstIterable2T_secondIterable2U, .Lfunc_end468-ProductIterable2_B_init_firstIterable2T_secondIterable2U
                                        # -- End function
	.globl	ProductIterable2_B_iterator_    # -- Begin function ProductIterable2_B_iterator_
	.p2align	4, 0x90
	.type	ProductIterable2_B_iterator_,@function
ProductIterable2_B_iterator_:           # @ProductIterable2_B_iterator_
# %bb.0:
	movq	216(%rdi), %rax
	retq
.Lfunc_end469:
	.size	ProductIterable2_B_iterator_, .Lfunc_end469-ProductIterable2_B_iterator_
                                        # -- End function
	.globl	ProductIterable2_B_each_fFunctionT_to_Nothing # -- Begin function ProductIterable2_B_each_fFunctionT_to_Nothing
	.p2align	4, 0x90
	.type	ProductIterable2_B_each_fFunctionT_to_Nothing,@function
ProductIterable2_B_each_fFunctionT_to_Nothing: # @ProductIterable2_B_each_fFunctionT_to_Nothing
# %bb.0:
	movq	224(%rdi), %rax
	retq
.Lfunc_end470:
	.size	ProductIterable2_B_each_fFunctionT_to_Nothing, .Lfunc_end470-ProductIterable2_B_each_fFunctionT_to_Nothing
                                        # -- End function
	.globl	ProductIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T # -- Begin function ProductIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T
	.p2align	4, 0x90
	.type	ProductIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T,@function
ProductIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T: # @ProductIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T
# %bb.0:
	movq	232(%rdi), %rax
	retq
.Lfunc_end471:
	.size	ProductIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, .Lfunc_end471-ProductIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T
                                        # -- End function
	.globl	ProductIterable2_B_all_fFunctionT_to_Ptri1 # -- Begin function ProductIterable2_B_all_fFunctionT_to_Ptri1
	.p2align	4, 0x90
	.type	ProductIterable2_B_all_fFunctionT_to_Ptri1,@function
ProductIterable2_B_all_fFunctionT_to_Ptri1: # @ProductIterable2_B_all_fFunctionT_to_Ptri1
# %bb.0:
	movq	240(%rdi), %rax
	retq
.Lfunc_end472:
	.size	ProductIterable2_B_all_fFunctionT_to_Ptri1, .Lfunc_end472-ProductIterable2_B_all_fFunctionT_to_Ptri1
                                        # -- End function
	.globl	ProductIterable2_B_any_fFunctionT_to_Ptri1 # -- Begin function ProductIterable2_B_any_fFunctionT_to_Ptri1
	.p2align	4, 0x90
	.type	ProductIterable2_B_any_fFunctionT_to_Ptri1,@function
ProductIterable2_B_any_fFunctionT_to_Ptri1: # @ProductIterable2_B_any_fFunctionT_to_Ptri1
# %bb.0:
	movq	248(%rdi), %rax
	retq
.Lfunc_end473:
	.size	ProductIterable2_B_any_fFunctionT_to_Ptri1, .Lfunc_end473-ProductIterable2_B_any_fFunctionT_to_Ptri1
                                        # -- End function
	.globl	ProductIterable2_B_map_fFunctionT_to_U # -- Begin function ProductIterable2_B_map_fFunctionT_to_U
	.p2align	4, 0x90
	.type	ProductIterable2_B_map_fFunctionT_to_U,@function
ProductIterable2_B_map_fFunctionT_to_U: # @ProductIterable2_B_map_fFunctionT_to_U
# %bb.0:
	movq	256(%rdi), %rax
	retq
.Lfunc_end474:
	.size	ProductIterable2_B_map_fFunctionT_to_U, .Lfunc_end474-ProductIterable2_B_map_fFunctionT_to_U
                                        # -- End function
	.globl	ProductIterable2_B_filter_fFunctionT_to_Ptri1 # -- Begin function ProductIterable2_B_filter_fFunctionT_to_Ptri1
	.p2align	4, 0x90
	.type	ProductIterable2_B_filter_fFunctionT_to_Ptri1,@function
ProductIterable2_B_filter_fFunctionT_to_Ptri1: # @ProductIterable2_B_filter_fFunctionT_to_Ptri1
# %bb.0:
	movq	264(%rdi), %rax
	retq
.Lfunc_end475:
	.size	ProductIterable2_B_filter_fFunctionT_to_Ptri1, .Lfunc_end475-ProductIterable2_B_filter_fFunctionT_to_Ptri1
                                        # -- End function
	.globl	ProductIterable2_B_chain_otherIterable2T # -- Begin function ProductIterable2_B_chain_otherIterable2T
	.p2align	4, 0x90
	.type	ProductIterable2_B_chain_otherIterable2T,@function
ProductIterable2_B_chain_otherIterable2T: # @ProductIterable2_B_chain_otherIterable2T
# %bb.0:
	movq	272(%rdi), %rax
	retq
.Lfunc_end476:
	.size	ProductIterable2_B_chain_otherIterable2T, .Lfunc_end476-ProductIterable2_B_chain_otherIterable2T
                                        # -- End function
	.globl	ProductIterable2_B_interleave_otherIterable2T # -- Begin function ProductIterable2_B_interleave_otherIterable2T
	.p2align	4, 0x90
	.type	ProductIterable2_B_interleave_otherIterable2T,@function
ProductIterable2_B_interleave_otherIterable2T: # @ProductIterable2_B_interleave_otherIterable2T
# %bb.0:
	movq	280(%rdi), %rax
	retq
.Lfunc_end477:
	.size	ProductIterable2_B_interleave_otherIterable2T, .Lfunc_end477-ProductIterable2_B_interleave_otherIterable2T
                                        # -- End function
	.globl	ProductIterable2_B_zip_otherIterable2U # -- Begin function ProductIterable2_B_zip_otherIterable2U
	.p2align	4, 0x90
	.type	ProductIterable2_B_zip_otherIterable2U,@function
ProductIterable2_B_zip_otherIterable2U: # @ProductIterable2_B_zip_otherIterable2U
# %bb.0:
	movq	288(%rdi), %rax
	retq
.Lfunc_end478:
	.size	ProductIterable2_B_zip_otherIterable2U, .Lfunc_end478-ProductIterable2_B_zip_otherIterable2U
                                        # -- End function
	.globl	ProductIterable2_B_product_otherIterable2U # -- Begin function ProductIterable2_B_product_otherIterable2U
	.p2align	4, 0x90
	.type	ProductIterable2_B_product_otherIterable2U,@function
ProductIterable2_B_product_otherIterable2U: # @ProductIterable2_B_product_otherIterable2U
# %bb.0:
	movq	296(%rdi), %rax
	retq
.Lfunc_end479:
	.size	ProductIterable2_B_product_otherIterable2U, .Lfunc_end479-ProductIterable2_B_product_otherIterable2U
                                        # -- End function
	.globl	ProductIterable2_init_firstIterable2T_secondIterable2U # -- Begin function ProductIterable2_init_firstIterable2T_secondIterable2U
	.p2align	4, 0x90
	.type	ProductIterable2_init_firstIterable2T_secondIterable2U,@function
ProductIterable2_init_firstIterable2T_secondIterable2U: # @ProductIterable2_init_firstIterable2T_secondIterable2U
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	pushq	%rax
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rsi, %rbx
	movq	%rdi, %r12
	movq	128(%rsp), %rax
	movq	%rax, (%rsp)                    # 8-byte Spill
	movq	136(%rsp), %r15
	movq	120(%rsp), %r13
	movq	96(%rsp), %rdx
	movq	104(%rsp), %rcx
	movq	88(%rsp), %rsi
	movq	40(%rdi), %rax
	movabsq	$7827074759551300494, %rdi      # imm = 0x6C9F5B06317B338E
	imulq	8(%r12), %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%r12), %r8
	movslq	(%rax,%r8,4), %rbp
	movq	40(%rsi), %rax
	movabsq	$5693646204635713916, %r14      # imm = 0x4F03E50E9010117C
	movq	8(%rsi), %rdi
	imulq	%r14, %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%rsi), %r8
	movl	(%rax,%r8,4), %r8d
	movq	24(%r12,%rbp,8), %rax
	movq	%rbx, %rdi
	callq	*8(%rax)
	movq	40(%r13), %rax
	imulq	8(%r13), %r14
	movq	%r14, %rcx
	shrq	$32, %rcx
	xorq	%r14, %rcx
	andq	16(%r13), %rcx
	movl	(%rax,%rcx,4), %r8d
	movq	32(%r12,%rbp,8), %rax
	movq	8(%rax), %rax
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movq	(%rsp), %rdx                    # 8-byte Reload
	movq	%r15, %rcx
	addq	$8, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	jmpq	*%rax                           # TAILCALL
.Lfunc_end480:
	.size	ProductIterable2_init_firstIterable2T_secondIterable2U, .Lfunc_end480-ProductIterable2_init_firstIterable2T_secondIterable2U
	.cfi_endproc
                                        # -- End function
	.globl	ProductIterable2_iterator_      # -- Begin function ProductIterable2_iterator_
	.p2align	4, 0x90
	.type	ProductIterable2_iterator_,@function
ProductIterable2_iterator_:             # @ProductIterable2_iterator_
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$296, %rsp                      # imm = 0x128
	.cfi_def_cfa_offset 352
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rdx, %r12
	movq	%rsi, %r15
	movq	%rdi, 40(%rsp)                  # 8-byte Spill
	movq	40(%rsi), %rax
	movabsq	$7827074759551300494, %rcx      # imm = 0x6C9F5B06317B338E
	imulq	8(%rsi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rsi), %rdx
	movslq	(%rax,%rdx,4), %r13
	movq	24(%rsi,%r13,8), %rax
	leaq	264(%rsp), %rdi
	movq	%r12, %rsi
	callq	*(%rax)
	movq	32(%r15,%r13,8), %rax
	leaq	232(%rsp), %rdi
	movq	%r12, %rsi
	callq	*(%rax)
	movq	%r12, %rdi
	callq	*(%r15,%r13,8)
	movq	%rax, 8(%rsp)                   # 8-byte Spill
	movq	%r12, %rdi
	callq	*8(%r15,%r13,8)
	movq	%rax, %rbx
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %r14
	movl	$32, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %rbp
	movq	%rbx, 16(%rax)
	movq	8(%rsp), %rax                   # 8-byte Reload
	movq	%rax, 8(%rbp)
	movq	$0, 24(%rbp)
	movq	Pair@GOTPCREL(%rip), %rax
	movq	%rax, (%rbp)
	movl	$152, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r14
	movq	8(%rsp), %rax                   # 8-byte Reload
	movq	%rax, (%r14)
	movq	%rbx, 8(%r14)
	movq	%rbp, 16(%r14)
	movq	24(%r15,%r13,8), %rax
	leaq	144(%rsp), %rdi
	movq	%r12, %rsi
	callq	*(%rax)
	movq	160(%rsp), %rax
	movq	%rax, 8(%rsp)                   # 8-byte Spill
	movq	144(%rsp), %rbx
	movq	152(%rsp), %rax
	movq	%rax, 32(%rsp)                  # 8-byte Spill
	movq	32(%r15,%r13,8), %rax
	leaq	112(%rsp), %rdi
	movq	%r12, %rsi
	callq	*(%rax)
	movq	128(%rsp), %rax
	movq	%rax, 24(%rsp)                  # 8-byte Spill
	movq	112(%rsp), %rbp
	movq	120(%rsp), %rax
	movq	%rax, 16(%rsp)                  # 8-byte Spill
	movq	%r12, %rdi
	callq	*(%r15,%r13,8)
	movq	%r12, %rdi
	callq	*8(%r15,%r13,8)
	movq	40(%rbx), %rax
	movabsq	$5693646204635713916, %rcx      # imm = 0x4F03E50E9010117C
	movq	8(%rbx), %rdx
	imulq	%rcx, %rdx
	movq	%rdx, %rsi
	shrq	$32, %rsi
	xorq	%rdx, %rsi
	andq	16(%rbx), %rsi
	movslq	(%rax,%rsi,4), %r12
	movq	40(%rbp), %rax
	imulq	8(%rbp), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	%rbp, 88(%r14)
	movq	16(%rsp), %rcx                  # 8-byte Reload
	movq	%rcx, 96(%r14)
	movq	24(%rsp), %rcx                  # 8-byte Reload
	movq	%rcx, 104(%r14)
	movl	%eax, 112(%r14)
	movq	%rsp, %r8
	movq	%rbx, %rdi
	movq	32(%rsp), %rbp                  # 8-byte Reload
	movq	%rbp, %rsi
	movq	8(%rsp), %r13                   # 8-byte Reload
	movq	%r13, %rdx
	movl	%r12d, %ecx
	movq	%r8, %r15
	callq	*8(%rbx,%r12,8)
	leaq	80(%rsp), %rdi
	movq	%rbx, %rsi
	movq	%rbp, %rdx
	movq	%r13, %rcx
	movl	%r12d, %r8d
	movq	%rbx, %r9
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	96(%rsp), %rax
	movq	80(%rsp), %rcx
	movq	88(%rsp), %rdx
	movq	40(%rcx), %rsi
	movabsq	$4189192806087951739, %r15      # imm = 0x3A2300A96E7E857B
	movq	8(%rcx), %rdi
	imulq	%r15, %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%rcx), %r8
	movl	(%rsi,%r8,4), %esi
	movq	%rcx, 24(%r14)
	movq	%rdx, 32(%r14)
	movq	%rax, 40(%r14)
	movl	%esi, 48(%r14)
	movq	88(%r14), %rbx
	movq	96(%r14), %r12
	movq	104(%r14), %r13
	movslq	112(%r14), %rbp
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r13, %rdx
	movl	%ebp, %ecx
	movq	%rsp, %r8
	callq	*8(%rbx,%rbp,8)
	leaq	48(%rsp), %rdi
	movq	%rbx, %rsi
	movq	%r12, %rdx
	movq	%r13, %rcx
	movl	%ebp, %r8d
	movq	%rbx, %r9
	movq	%rsp, %r10
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	64(%rsp), %rax
	movq	48(%rsp), %rcx
	movq	56(%rsp), %rdx
	movq	40(%rcx), %rsi
	imulq	8(%rcx), %r15
	movq	%r15, %rdi
	shrq	$32, %rdi
	xorq	%r15, %rdi
	andq	16(%rcx), %rdi
	movl	(%rsi,%rdi,4), %esi
	movq	%rcx, 56(%r14)
	movq	%rdx, 64(%r14)
	movq	%rax, 72(%r14)
	movl	%esi, 80(%r14)
	movq	24(%r14), %rbx
	movq	32(%r14), %r12
	movq	40(%r14), %r13
	movslq	48(%r14), %rbp
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r13, %rdx
	movl	%ebp, %ecx
	movq	%rsp, %r15
	movq	%r15, %r8
	callq	*8(%rbx,%rbp,8)
	leaq	176(%rsp), %rdi
	movq	%rbx, %rsi
	movq	%r12, %rdx
	movq	%r13, %rcx
	movl	%ebp, %r8d
	movq	%rbx, %r9
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	200(%rsp), %rax
	movl	208(%rsp), %ecx
	movq	176(%rsp), %rdx
	movq	192(%rsp), %rsi
	movq	%rdx, 120(%r14)
	movl	%ecx, 144(%r14)
	movq	%rsi, 128(%r14)
	movq	%rax, 136(%r14)
	movq	40(%rsp), %rax                  # 8-byte Reload
	movq	%r14, 8(%rax)
	movq	ProductIterator2@GOTPCREL(%rip), %rcx
	movq	%rcx, (%rax)
	movl	$20, 24(%rax)
	addq	$296, %rsp                      # imm = 0x128
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end481:
	.size	ProductIterable2_iterator_, .Lfunc_end481-ProductIterable2_iterator_
	.cfi_endproc
                                        # -- End function
	.globl	_size_ProductIterator2          # -- Begin function _size_ProductIterator2
	.p2align	4, 0x90
	.type	_size_ProductIterator2,@function
_size_ProductIterator2:                 # @_size_ProductIterator2
# %bb.0:
	movl	$152, %eax
	movl	$8, %edx
	retq
.Lfunc_end482:
	.size	_size_ProductIterator2, .Lfunc_end482-_size_ProductIterator2
                                        # -- End function
	.globl	ProductIterator2_field_ProductIterator2_0 # -- Begin function ProductIterator2_field_ProductIterator2_0
	.p2align	4, 0x90
	.type	ProductIterator2_field_ProductIterator2_0,@function
ProductIterator2_field_ProductIterator2_0: # @ProductIterator2_field_ProductIterator2_0
# %bb.0:
	movq	(%rdi), %rax
	retq
.Lfunc_end483:
	.size	ProductIterator2_field_ProductIterator2_0, .Lfunc_end483-ProductIterator2_field_ProductIterator2_0
                                        # -- End function
	.globl	ProductIterator2_field_ProductIterator2_1 # -- Begin function ProductIterator2_field_ProductIterator2_1
	.p2align	4, 0x90
	.type	ProductIterator2_field_ProductIterator2_1,@function
ProductIterator2_field_ProductIterator2_1: # @ProductIterator2_field_ProductIterator2_1
# %bb.0:
	movq	8(%rdi), %rax
	retq
.Lfunc_end484:
	.size	ProductIterator2_field_ProductIterator2_1, .Lfunc_end484-ProductIterator2_field_ProductIterator2_1
                                        # -- End function
	.globl	ProductIterator2_field_ProductIterator2_2 # -- Begin function ProductIterator2_field_ProductIterator2_2
	.p2align	4, 0x90
	.type	ProductIterator2_field_ProductIterator2_2,@function
ProductIterator2_field_ProductIterator2_2: # @ProductIterator2_field_ProductIterator2_2
# %bb.0:
	movq	16(%rdi), %rax
	retq
.Lfunc_end485:
	.size	ProductIterator2_field_ProductIterator2_2, .Lfunc_end485-ProductIterator2_field_ProductIterator2_2
                                        # -- End function
	.globl	ProductIterator2_B_init_first_iterableIterable2T_second_iterableIterable2U # -- Begin function ProductIterator2_B_init_first_iterableIterable2T_second_iterableIterable2U
	.p2align	4, 0x90
	.type	ProductIterator2_B_init_first_iterableIterable2T_second_iterableIterable2U,@function
ProductIterator2_B_init_first_iterableIterable2T_second_iterableIterable2U: # @ProductIterator2_B_init_first_iterableIterable2T_second_iterableIterable2U
# %bb.0:
	movq	144(%rdi), %rax
	retq
.Lfunc_end486:
	.size	ProductIterator2_B_init_first_iterableIterable2T_second_iterableIterable2U, .Lfunc_end486-ProductIterator2_B_init_first_iterableIterable2T_second_iterableIterable2U
                                        # -- End function
	.globl	ProductIterator2_B_next_        # -- Begin function ProductIterator2_B_next_
	.p2align	4, 0x90
	.type	ProductIterator2_B_next_,@function
ProductIterator2_B_next_:               # @ProductIterator2_B_next_
# %bb.0:
	movq	152(%rdi), %rax
	retq
.Lfunc_end487:
	.size	ProductIterator2_B_next_, .Lfunc_end487-ProductIterator2_B_next_
                                        # -- End function
	.globl	ProductIterator2_init_first_iterableIterable2T_second_iterableIterable2U # -- Begin function ProductIterator2_init_first_iterableIterable2T_second_iterableIterable2U
	.p2align	4, 0x90
	.type	ProductIterator2_init_first_iterableIterable2T_second_iterableIterable2U,@function
ProductIterator2_init_first_iterableIterable2T_second_iterableIterable2U: # @ProductIterator2_init_first_iterableIterable2T_second_iterableIterable2U
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$216, %rsp
	.cfi_def_cfa_offset 272
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movq	304(%rsp), %r15
	movq	336(%rsp), %rdx
	movq	344(%rsp), %rcx
	movq	328(%rsp), %rsi
	movq	296(%rsp), %rbp
	movq	40(%rdi), %rax
	movabsq	$4440657219728359865, %r9       # imm = 0x3DA06236B72EC1B9
	imulq	8(%rdi), %r9
	movq	%r9, %r8
	shrq	$32, %r8
	xorq	%r9, %r8
	andq	16(%rdi), %r8
	movslq	(%rax,%r8,4), %r13
	movq	40(%rbp), %rax
	movabsq	$5693646204635713916, %rdi      # imm = 0x4F03E50E9010117C
	movq	8(%rbp), %r8
	imulq	%rdi, %r8
	movq	%r8, %r9
	shrq	$32, %r9
	xorq	%r8, %r9
	andq	16(%rbp), %r9
	movslq	(%rax,%r9,4), %r12
	movq	40(%rsi), %rax
	imulq	8(%rsi), %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%rsi), %r8
	movl	(%rax,%r8,4), %r8d
	movq	40(%r14,%r13,8), %rax
	movq	%rbx, 16(%rsp)                  # 8-byte Spill
	movq	%rbx, %rdi
	callq	*8(%rax)
	movq	%rbx, %rdi
	callq	*(%r14,%r13,8)
	movq	%rbx, %rdi
	callq	*8(%r14,%r13,8)
	movq	%rsp, %r8
	movq	%rbp, %rdi
	movq	%r15, %rsi
	movq	312(%rsp), %rbx
	movq	%rbx, %rdx
	movl	%r12d, %ecx
	callq	*8(%rbp,%r12,8)
	leaq	128(%rsp), %rdi
	movq	%rbp, %rsi
	movq	%r15, %rdx
	movq	%rbx, %rcx
	movl	%r12d, %r8d
	movq	%rbp, %r9
	movq	%rsp, %r10
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	144(%rsp), %rcx
	movq	128(%rsp), %rsi
	movq	136(%rsp), %rdx
	movq	40(%rsi), %rax
	movabsq	$4189192806087951739, %r8       # imm = 0x3A2300A96E7E857B
	movq	8(%rsi), %rdi
	imulq	%r8, %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%rsi), %r8
	movl	(%rax,%r8,4), %r8d
	movq	%r13, 24(%rsp)                  # 8-byte Spill
	movq	24(%r14,%r13,8), %rax
	movq	16(%rsp), %r12                  # 8-byte Reload
	movq	%r12, %rdi
	callq	*8(%rax)
	movq	40(%r14,%r13,8), %rax
	leaq	64(%rsp), %rdi
	movq	%r12, %rsi
	callq	*(%rax)
	movslq	88(%rsp), %rbp
	movq	80(%rsp), %rax
	movq	%rax, 8(%rsp)                   # 8-byte Spill
	movq	64(%rsp), %r15
	movq	72(%rsp), %r13
	movq	%r12, %rdi
	movq	24(%rsp), %rbx                  # 8-byte Reload
	callq	*(%r14,%rbx,8)
	movq	%r12, %rdi
	callq	*8(%r14,%rbx,8)
	movq	%r15, %rdi
	movq	%r13, %rsi
	movq	8(%rsp), %r12                   # 8-byte Reload
	movq	%r12, %rdx
	movl	%ebp, %ecx
	movq	%rsp, %r8
	callq	*8(%r15,%rbp,8)
	leaq	96(%rsp), %rdi
	movq	%r15, %rsi
	movq	%r13, %rdx
	movq	%r12, %rcx
	movl	%ebp, %r8d
	movq	%r15, %r9
	movq	%rsp, %r10
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	112(%rsp), %rcx
	movq	96(%rsp), %rsi
	movq	104(%rsp), %rdx
	movq	40(%rsi), %rax
	movabsq	$4189192806087951739, %r8       # imm = 0x3A2300A96E7E857B
	imulq	8(%rsi), %r8
	movq	%r8, %rdi
	shrq	$32, %rdi
	xorq	%r8, %rdi
	andq	16(%rsi), %rdi
	movl	(%rax,%rdi,4), %r8d
	movq	32(%r14,%rbx,8), %rax
	movq	16(%rsp), %r12                  # 8-byte Reload
	movq	%r12, %rdi
	callq	*8(%rax)
	movq	24(%r14,%rbx,8), %rax
	leaq	32(%rsp), %rdi
	movq	%r12, %rsi
	callq	*(%rax)
	movslq	56(%rsp), %rbp
	movq	48(%rsp), %rax
	movq	%rax, 8(%rsp)                   # 8-byte Spill
	movq	32(%rsp), %r15
	movq	40(%rsp), %r13
	movq	%r12, %rdi
	movq	24(%rsp), %rbx                  # 8-byte Reload
	callq	*(%r14,%rbx,8)
	movq	%r12, %rdi
	callq	*8(%r14,%rbx,8)
	movq	%r15, %rdi
	movq	%r13, %rsi
	movq	8(%rsp), %r12                   # 8-byte Reload
	movq	%r12, %rdx
	movl	%ebp, %ecx
	movq	%rsp, %r8
	callq	*8(%r15,%rbp,8)
	leaq	160(%rsp), %rdi
	movq	%r15, %rsi
	movq	%r13, %rdx
	movq	%r12, %rcx
	movl	%ebp, %r8d
	movq	%r15, %r9
	movq	%rsp, %r10
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movl	192(%rsp), %r8d
	movq	184(%rsp), %rcx
	movq	160(%rsp), %rsi
	movq	176(%rsp), %rdx
	movq	48(%r14,%rbx,8), %rax
	movq	16(%rsp), %rdi                  # 8-byte Reload
	callq	*8(%rax)
	addq	$216, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end488:
	.size	ProductIterator2_init_first_iterableIterable2T_second_iterableIterable2U, .Lfunc_end488-ProductIterator2_init_first_iterableIterable2T_second_iterableIterable2U
	.cfi_endproc
                                        # -- End function
	.globl	ProductIterator2_next_          # -- Begin function ProductIterator2_next_
	.p2align	4, 0x90
	.type	ProductIterator2_next_,@function
ProductIterator2_next_:                 # @ProductIterator2_next_
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$472, %rsp                      # imm = 0x1D8
	.cfi_def_cfa_offset 528
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rdx, %rbp
	movq	%rsi, %r15
	movq	%rdi, %rbx
	movq	40(%rsi), %rax
	movabsq	$4440657219728359865, %rcx      # imm = 0x3DA06236B72EC1B9
	imulq	8(%rsi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rsi), %rdx
	movslq	(%rax,%rdx,4), %r14
	movq	48(%rsi,%r14,8), %rax
	leaq	416(%rsp), %rdi
	movq	%rbp, %rsi
	callq	*(%rax)
	movq	416(%rsp), %rsi
	movq	nil_typ@GOTPCREL(%rip), %rdx
	cmpq	%rdx, %rsi
	sete	%al
	testq	%rsi, %rsi
	sete	%cl
	orb	%al, %cl
	jne	.LBB489_1
# %bb.2:                                # %.lr.ph
	movq	%rbx, 32(%rsp)                  # 8-byte Spill
	movq	440(%rsp), %rax
	movq	432(%rsp), %rcx
	movq	%r15, 48(%rsp)                  # 8-byte Spill
	movq	%r14, 40(%rsp)                  # 8-byte Spill
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
	.p2align	4, 0x90
.LBB489_3:                              # =>This Inner Loop Header: Depth=1
	movq	%rcx, 88(%rsp)                  # 8-byte Spill
	movq	%rax, 96(%rsp)                  # 8-byte Spill
	movq	%rsi, 104(%rsp)                 # 8-byte Spill
	movq	32(%r15,%r14,8), %rax
	leaq	208(%rsp), %rdi
	movq	%rbp, %rsi
	callq	*(%rax)
	movslq	232(%rsp), %r13
	movq	224(%rsp), %rax
	movq	%rax, 16(%rsp)                  # 8-byte Spill
	movq	208(%rsp), %r12
	movq	216(%rsp), %rbx
	movq	%rbp, %rdi
	callq	*(%r15,%r14,8)
	movq	%rbp, %rdi
	callq	*8(%r15,%r14,8)
	movq	%r12, %rdi
	movq	%rbx, %rsi
	movq	16(%rsp), %r15                  # 8-byte Reload
	movq	%r15, %rdx
	movl	%r13d, %ecx
	leaq	8(%rsp), %r14
	movq	%r14, %r8
	callq	*8(%r12,%r13,8)
	leaq	368(%rsp), %rdi
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	%r15, %rcx
	movl	%r13d, %r8d
	movq	%r12, %r9
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	368(%rsp), %rbp
	cmpq	nil_typ@GOTPCREL(%rip), %rbp
	setne	%al
	testq	%rbp, %rbp
	setne	%cl
	testb	%cl, %al
	jne	.LBB489_7
# %bb.4:                                #   in Loop: Header=BB489_3 Depth=1
	movq	48(%rsp), %rbx                  # 8-byte Reload
	movq	40(%rsp), %r15                  # 8-byte Reload
	movq	24(%rbx,%r15,8), %rax
	leaq	176(%rsp), %rdi
	movq	24(%rsp), %r14                  # 8-byte Reload
	movq	%r14, %rsi
	callq	*(%rax)
	movslq	200(%rsp), %r13
	movq	192(%rsp), %rax
	movq	%rax, 16(%rsp)                  # 8-byte Spill
	movq	176(%rsp), %rbp
	movq	184(%rsp), %r12
	movq	%r14, %rdi
	callq	*(%rbx,%r15,8)
	movq	%r14, %rdi
	callq	*8(%rbx,%r15,8)
	movq	%rbp, %rdi
	movq	%r12, %rsi
	movq	16(%rsp), %r14                  # 8-byte Reload
	movq	%r14, %rdx
	movl	%r13d, %ecx
	leaq	8(%rsp), %r8
	callq	*8(%rbp,%r13,8)
	leaq	272(%rsp), %rdi
	movq	%rbp, %rsi
	movq	%r12, %rdx
	movq	%r14, %rcx
	movl	%r13d, %r8d
	movq	%rbp, %r9
	leaq	8(%rsp), %r10
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movl	304(%rsp), %r8d
	movq	296(%rsp), %rcx
	movq	272(%rsp), %rsi
	movq	288(%rsp), %rdx
	movq	48(%rbx,%r15,8), %rax
	movq	24(%rsp), %r14                  # 8-byte Reload
	movq	%r14, %rdi
	callq	*8(%rax)
	movq	40(%rbx,%r15,8), %rax
	movq	%rbx, %r15
	leaq	144(%rsp), %rdi
	movq	%r14, %rbx
	movq	%r14, %rsi
	callq	*(%rax)
	movslq	168(%rsp), %r13
	movq	160(%rsp), %rax
	movq	%rax, 16(%rsp)                  # 8-byte Spill
	movq	144(%rsp), %rbp
	movq	152(%rsp), %r12
	movq	%r14, %rdi
	movq	40(%rsp), %r14                  # 8-byte Reload
	callq	*(%r15,%r14,8)
	movq	%rbx, %rdi
	callq	*8(%r15,%r14,8)
	movq	%r14, %rbx
	movq	%rbp, %rdi
	movq	%r12, %rsi
	movq	16(%rsp), %r14                  # 8-byte Reload
	movq	%r14, %rdx
	movl	%r13d, %ecx
	leaq	8(%rsp), %r8
	callq	*8(%rbp,%r13,8)
	leaq	240(%rsp), %rdi
	movq	%rbp, %rsi
	movq	%r12, %rdx
	movq	%r14, %rcx
	movl	%r13d, %r8d
	movq	%rbp, %r9
	leaq	8(%rsp), %r10
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	256(%rsp), %rcx
	movq	240(%rsp), %rsi
	movq	248(%rsp), %rdx
	movq	40(%rsi), %rax
	movq	8(%rsi), %rdi
	movabsq	$4189192806087951739, %r8       # imm = 0x3A2300A96E7E857B
	imulq	%r8, %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%rsi), %r8
	movl	(%rax,%r8,4), %r8d
	movq	%rbx, %r14
	movq	32(%r15,%rbx,8), %rax
	movq	24(%rsp), %rbp                  # 8-byte Reload
	movq	%rbp, %rdi
	callq	*8(%rax)
	movq	48(%r15,%rbx,8), %rax
	leaq	320(%rsp), %rdi
	movq	%rbp, %rsi
	callq	*(%rax)
	movq	nil_typ@GOTPCREL(%rip), %rdx
	movq	320(%rsp), %rsi
	cmpq	%rdx, %rsi
	je	.LBB489_5
# %bb.6:                                #   in Loop: Header=BB489_3 Depth=1
	movq	344(%rsp), %rax
	movq	336(%rsp), %rcx
	testq	%rsi, %rsi
	jne	.LBB489_3
.LBB489_5:
                                        # implicit-def: $rax
                                        # implicit-def: $rcx
	movq	32(%rsp), %rbx                  # 8-byte Reload
	xorl	%esi, %esi
	jmp	.LBB489_8
.LBB489_1:
	xorl	%esi, %esi
                                        # implicit-def: $rax
                                        # implicit-def: $rcx
	jmp	.LBB489_8
.LBB489_7:
	movq	392(%rsp), %rax
	movq	%rax, 80(%rsp)                  # 8-byte Spill
	movq	384(%rsp), %rax
	movq	%rax, 72(%rsp)                  # 8-byte Spill
	movq	24(%rsp), %r13                  # 8-byte Reload
	movq	%r13, %rdi
	movq	48(%rsp), %r15                  # 8-byte Reload
	movq	40(%rsp), %r14                  # 8-byte Reload
	callq	*(%r15,%r14,8)
	movq	%rax, %rbx
	movq	%r13, %rdi
	callq	*8(%r15,%r14,8)
	movq	%rax, 16(%rsp)                  # 8-byte Spill
	movq	%rbx, 64(%rsp)                  # 8-byte Spill
	movq	(%rbx), %rax
	movq	%rbx, %rdi
	callq	*48(%rax)
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movl	$16, %eax
	xorl	%edx, %edx
	divq	%rbx
	movq	%rbx, %rax
	subq	%rdx, %rax
	testq	%rdx, %rdx
	cmoveq	%rdx, %rax
	leaq	(%rcx,%rax), %rdx
	movq	%rdx, 56(%rsp)                  # 8-byte Spill
	leaq	16(%rcx,%rax), %r12
	movq	16(%rsp), %rdi                  # 8-byte Reload
	movq	(%rdi), %rax
	callq	*48(%rax)
	movq	%rax, %rcx
	movq	%rdx, %rsi
	cmpq	%rdx, %rbx
	cmovbeq	%rdx, %rbx
	cmpq	$9, %rbx
	movl	$8, %edi
	cmovaeq	%rbx, %rdi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	subq	%rdx, %rsi
	testq	%rdx, %rdx
	cmoveq	%rdx, %rsi
	movq	56(%rsp), %rax                  # 8-byte Reload
	leaq	16(%rcx,%rax), %rcx
	addq	%rsi, %rcx
	movq	%rcx, %rax
	xorl	%edx, %edx
	divq	%rdi
	subq	%rdx, %rdi
	testq	%rdx, %rdx
	cmoveq	%rdx, %rdi
	addq	%rcx, %rdi
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %rbx
	movq	64(%rsp), %rax                  # 8-byte Reload
	movq	%rax, (%rbx)
	movq	16(%rsp), %rax                  # 8-byte Reload
	movq	%rax, 8(%rbx)
	movq	Pair@GOTPCREL(%rip), %rax
	movq	%rax, 112(%rsp)
	movq	%rbx, 120(%rsp)
	movl	$9, 136(%rsp)
	movq	%r13, %rdi
	callq	*(%r15,%r14,8)
	movq	%r13, %rdi
	callq	*8(%r15,%r14,8)
	movq	104(%rsp), %r12                 # 8-byte Reload
	movq	40(%r12), %rax
	movabsq	$3084208142191802847, %r15      # imm = 0x2ACD4EF6E8B5B9DF
	movq	8(%r12), %rcx
	imulq	%r15, %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%r12), %rdx
	movl	(%rax,%rdx,4), %r14d
	movq	(%rbx), %rdi
	movq	(%rdi), %rax
	callq	*48(%rax)
	movq	%rdx, %r9
	movl	$16, %eax
	xorl	%edx, %edx
	divq	%r9
	subq	%rdx, %r9
	addq	$16, %r9
	testq	%rdx, %rdx
	movl	$16, %eax
	cmoveq	%rax, %r9
	addq	%rbx, %r9
	movq	(%rbx), %r8
	movq	(%r8), %rax
	movq	%r12, %rdi
	movq	88(%rsp), %rsi                  # 8-byte Reload
	movq	96(%rsp), %rdx                  # 8-byte Reload
	movq	%r14, %rcx
	callq	*64(%rax)
	movq	40(%rbp), %rax
	imulq	8(%rbp), %r15
	movq	%r15, %rcx
	shrq	$32, %rcx
	xorq	%r15, %rcx
	andq	16(%rbp), %rcx
	movl	(%rax,%rcx,4), %r14d
	movq	(%rbx), %rdi
	movq	(%rdi), %rax
	callq	*48(%rax)
	movq	%rax, %rcx
	movq	%rdx, %rsi
	movl	$16, %eax
	xorl	%edx, %edx
	divq	%rsi
	subq	%rdx, %rsi
	testq	%rdx, %rdx
	cmoveq	%rdx, %rsi
	leaq	(%rcx,%rsi), %r12
	leaq	16(%rcx,%rsi), %r15
	movq	8(%rbx), %rdi
	movq	(%rdi), %rax
	callq	*48(%rax)
	movq	%rdx, %rcx
	movq	%r15, %rax
	xorl	%edx, %edx
	divq	%rcx
	subq	%rdx, %rcx
	testq	%rdx, %rdx
	cmoveq	%rdx, %rcx
	leaq	16(%rbx,%r12), %r9
	addq	%rcx, %r9
	movq	8(%rbx), %r8
	movq	(%r8), %rax
	movq	%rbp, %rdi
	movq	72(%rsp), %rsi                  # 8-byte Reload
	movq	80(%rsp), %rdx                  # 8-byte Reload
	movq	%r14, %rcx
	callq	*64(%rax)
	movq	112(%rsp), %rdx
	movq	120(%rsp), %rax
	movl	136(%rsp), %esi
	movq	128(%rsp), %rcx
	movq	32(%rsp), %rbx                  # 8-byte Reload
.LBB489_8:                              # %.loopexit
	movq	%rax, 16(%rbx)
	movq	%rdx, (%rbx)
	movq	%rcx, 24(%rbx)
	movl	%esi, 32(%rbx)
	movq	%rbx, %rax
	addq	$472, %rsp                      # imm = 0x1D8
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end489:
	.size	ProductIterator2_next_, .Lfunc_end489-ProductIterator2_next_
	.cfi_endproc
                                        # -- End function
	.globl	ProductIterator2_getter_current_first # -- Begin function ProductIterator2_getter_current_first
	.p2align	4, 0x90
	.type	ProductIterator2_getter_current_first,@function
ProductIterator2_getter_current_first:  # @ProductIterator2_getter_current_first
# %bb.0:
	movq	%rdi, %rax
	movl	144(%rsi), %ecx
	movq	120(%rsi), %rdx
	movq	128(%rsi), %rdi
	movq	136(%rsi), %rsi
	movq	%rsi, 24(%rax)
	movq	%rdi, 16(%rax)
	movl	%ecx, 32(%rax)
	movq	%rdx, (%rax)
	retq
.Lfunc_end490:
	.size	ProductIterator2_getter_current_first, .Lfunc_end490-ProductIterator2_getter_current_first
                                        # -- End function
	.globl	ProductIterator2_setter_current_first # -- Begin function ProductIterator2_setter_current_first
	.p2align	4, 0x90
	.type	ProductIterator2_setter_current_first,@function
ProductIterator2_setter_current_first:  # @ProductIterator2_setter_current_first
# %bb.0:
	movq	%rsi, 120(%rdi)
	movq	%rcx, 136(%rdi)
	movq	%rdx, 128(%rdi)
	movl	%r8d, 144(%rdi)
	retq
.Lfunc_end491:
	.size	ProductIterator2_setter_current_first, .Lfunc_end491-ProductIterator2_setter_current_first
                                        # -- End function
	.globl	ProductIterator2_getter_second_iterable # -- Begin function ProductIterator2_getter_second_iterable
	.p2align	4, 0x90
	.type	ProductIterator2_getter_second_iterable,@function
ProductIterator2_getter_second_iterable: # @ProductIterator2_getter_second_iterable
# %bb.0:
	movq	%rdi, %rax
	movq	88(%rsi), %rcx
	movq	96(%rsi), %rdx
	movq	104(%rsi), %rdi
	movl	112(%rsi), %esi
	movl	%esi, 24(%rax)
	movq	%rdi, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	retq
.Lfunc_end492:
	.size	ProductIterator2_getter_second_iterable, .Lfunc_end492-ProductIterator2_getter_second_iterable
                                        # -- End function
	.globl	ProductIterator2_setter_second_iterable # -- Begin function ProductIterator2_setter_second_iterable
	.p2align	4, 0x90
	.type	ProductIterator2_setter_second_iterable,@function
ProductIterator2_setter_second_iterable: # @ProductIterator2_setter_second_iterable
# %bb.0:
	movq	%rsi, 88(%rdi)
	movq	%rdx, 96(%rdi)
	movq	%rcx, 104(%rdi)
	movl	%r8d, 112(%rdi)
	retq
.Lfunc_end493:
	.size	ProductIterator2_setter_second_iterable, .Lfunc_end493-ProductIterator2_setter_second_iterable
                                        # -- End function
	.globl	ProductIterator2_getter_second_iterator # -- Begin function ProductIterator2_getter_second_iterator
	.p2align	4, 0x90
	.type	ProductIterator2_getter_second_iterator,@function
ProductIterator2_getter_second_iterator: # @ProductIterator2_getter_second_iterator
# %bb.0:
	movq	%rdi, %rax
	movq	56(%rsi), %rcx
	movq	64(%rsi), %rdx
	movq	72(%rsi), %rdi
	movl	80(%rsi), %esi
	movl	%esi, 24(%rax)
	movq	%rdi, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	retq
.Lfunc_end494:
	.size	ProductIterator2_getter_second_iterator, .Lfunc_end494-ProductIterator2_getter_second_iterator
                                        # -- End function
	.globl	ProductIterator2_setter_second_iterator # -- Begin function ProductIterator2_setter_second_iterator
	.p2align	4, 0x90
	.type	ProductIterator2_setter_second_iterator,@function
ProductIterator2_setter_second_iterator: # @ProductIterator2_setter_second_iterator
# %bb.0:
	movq	%rsi, 56(%rdi)
	movq	%rdx, 64(%rdi)
	movq	%rcx, 72(%rdi)
	movl	%r8d, 80(%rdi)
	retq
.Lfunc_end495:
	.size	ProductIterator2_setter_second_iterator, .Lfunc_end495-ProductIterator2_setter_second_iterator
                                        # -- End function
	.globl	ProductIterator2_getter_first_iterator # -- Begin function ProductIterator2_getter_first_iterator
	.p2align	4, 0x90
	.type	ProductIterator2_getter_first_iterator,@function
ProductIterator2_getter_first_iterator: # @ProductIterator2_getter_first_iterator
# %bb.0:
	movq	%rdi, %rax
	movq	24(%rsi), %rcx
	movq	32(%rsi), %rdx
	movq	40(%rsi), %rdi
	movl	48(%rsi), %esi
	movl	%esi, 24(%rax)
	movq	%rdi, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	retq
.Lfunc_end496:
	.size	ProductIterator2_getter_first_iterator, .Lfunc_end496-ProductIterator2_getter_first_iterator
                                        # -- End function
	.globl	ProductIterator2_setter_first_iterator # -- Begin function ProductIterator2_setter_first_iterator
	.p2align	4, 0x90
	.type	ProductIterator2_setter_first_iterator,@function
ProductIterator2_setter_first_iterator: # @ProductIterator2_setter_first_iterator
# %bb.0:
	movq	%rsi, 24(%rdi)
	movq	%rdx, 32(%rdi)
	movq	%rcx, 40(%rdi)
	movl	%r8d, 48(%rdi)
	retq
.Lfunc_end497:
	.size	ProductIterator2_setter_first_iterator, .Lfunc_end497-ProductIterator2_setter_first_iterator
                                        # -- End function
	.globl	ProductIterable2_getter_second  # -- Begin function ProductIterable2_getter_second
	.p2align	4, 0x90
	.type	ProductIterable2_getter_second,@function
ProductIterable2_getter_second:         # @ProductIterable2_getter_second
# %bb.0:
	movq	%rdi, %rax
	movq	56(%rsi), %rcx
	movq	64(%rsi), %rdx
	movq	72(%rsi), %rdi
	movl	80(%rsi), %esi
	movl	%esi, 24(%rax)
	movq	%rdi, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	retq
.Lfunc_end498:
	.size	ProductIterable2_getter_second, .Lfunc_end498-ProductIterable2_getter_second
                                        # -- End function
	.globl	ProductIterable2_setter_second  # -- Begin function ProductIterable2_setter_second
	.p2align	4, 0x90
	.type	ProductIterable2_setter_second,@function
ProductIterable2_setter_second:         # @ProductIterable2_setter_second
# %bb.0:
	movq	%rsi, 56(%rdi)
	movq	%rdx, 64(%rdi)
	movq	%rcx, 72(%rdi)
	movl	%r8d, 80(%rdi)
	retq
.Lfunc_end499:
	.size	ProductIterable2_setter_second, .Lfunc_end499-ProductIterable2_setter_second
                                        # -- End function
	.globl	ProductIterable2_getter_first   # -- Begin function ProductIterable2_getter_first
	.p2align	4, 0x90
	.type	ProductIterable2_getter_first,@function
ProductIterable2_getter_first:          # @ProductIterable2_getter_first
# %bb.0:
	movq	%rdi, %rax
	movq	24(%rsi), %rcx
	movq	32(%rsi), %rdx
	movq	40(%rsi), %rdi
	movl	48(%rsi), %esi
	movl	%esi, 24(%rax)
	movq	%rdi, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	retq
.Lfunc_end500:
	.size	ProductIterable2_getter_first, .Lfunc_end500-ProductIterable2_getter_first
                                        # -- End function
	.globl	ProductIterable2_setter_first   # -- Begin function ProductIterable2_setter_first
	.p2align	4, 0x90
	.type	ProductIterable2_setter_first,@function
ProductIterable2_setter_first:          # @ProductIterable2_setter_first
# %bb.0:
	movq	%rsi, 24(%rdi)
	movq	%rdx, 32(%rdi)
	movq	%rcx, 40(%rdi)
	movl	%r8d, 48(%rdi)
	retq
.Lfunc_end501:
	.size	ProductIterable2_setter_first, .Lfunc_end501-ProductIterable2_setter_first
                                        # -- End function
	.globl	_size_ZipIterable2              # -- Begin function _size_ZipIterable2
	.p2align	4, 0x90
	.type	_size_ZipIterable2,@function
_size_ZipIterable2:                     # @_size_ZipIterable2
# %bb.0:
	movl	$88, %eax
	movl	$8, %edx
	retq
.Lfunc_end502:
	.size	_size_ZipIterable2, .Lfunc_end502-_size_ZipIterable2
                                        # -- End function
	.globl	ZipIterable2_field_ZipIterable2_0 # -- Begin function ZipIterable2_field_ZipIterable2_0
	.p2align	4, 0x90
	.type	ZipIterable2_field_ZipIterable2_0,@function
ZipIterable2_field_ZipIterable2_0:      # @ZipIterable2_field_ZipIterable2_0
# %bb.0:
	movq	(%rdi), %rax
	retq
.Lfunc_end503:
	.size	ZipIterable2_field_ZipIterable2_0, .Lfunc_end503-ZipIterable2_field_ZipIterable2_0
                                        # -- End function
	.globl	ZipIterable2_field_ZipIterable2_1 # -- Begin function ZipIterable2_field_ZipIterable2_1
	.p2align	4, 0x90
	.type	ZipIterable2_field_ZipIterable2_1,@function
ZipIterable2_field_ZipIterable2_1:      # @ZipIterable2_field_ZipIterable2_1
# %bb.0:
	movq	8(%rdi), %rax
	retq
.Lfunc_end504:
	.size	ZipIterable2_field_ZipIterable2_1, .Lfunc_end504-ZipIterable2_field_ZipIterable2_1
                                        # -- End function
	.globl	ZipIterable2_field_ZipIterable2_2 # -- Begin function ZipIterable2_field_ZipIterable2_2
	.p2align	4, 0x90
	.type	ZipIterable2_field_ZipIterable2_2,@function
ZipIterable2_field_ZipIterable2_2:      # @ZipIterable2_field_ZipIterable2_2
# %bb.0:
	movq	16(%rdi), %rax
	retq
.Lfunc_end505:
	.size	ZipIterable2_field_ZipIterable2_2, .Lfunc_end505-ZipIterable2_field_ZipIterable2_2
                                        # -- End function
	.globl	ZipIterable2_B_init_firstIterable2T_secondIterable2U # -- Begin function ZipIterable2_B_init_firstIterable2T_secondIterable2U
	.p2align	4, 0x90
	.type	ZipIterable2_B_init_firstIterable2T_secondIterable2U,@function
ZipIterable2_B_init_firstIterable2T_secondIterable2U: # @ZipIterable2_B_init_firstIterable2T_secondIterable2U
# %bb.0:
	movq	208(%rdi), %rax
	retq
.Lfunc_end506:
	.size	ZipIterable2_B_init_firstIterable2T_secondIterable2U, .Lfunc_end506-ZipIterable2_B_init_firstIterable2T_secondIterable2U
                                        # -- End function
	.globl	ZipIterable2_B_iterator_        # -- Begin function ZipIterable2_B_iterator_
	.p2align	4, 0x90
	.type	ZipIterable2_B_iterator_,@function
ZipIterable2_B_iterator_:               # @ZipIterable2_B_iterator_
# %bb.0:
	movq	216(%rdi), %rax
	retq
.Lfunc_end507:
	.size	ZipIterable2_B_iterator_, .Lfunc_end507-ZipIterable2_B_iterator_
                                        # -- End function
	.globl	ZipIterable2_B_each_fFunctionT_to_Nothing # -- Begin function ZipIterable2_B_each_fFunctionT_to_Nothing
	.p2align	4, 0x90
	.type	ZipIterable2_B_each_fFunctionT_to_Nothing,@function
ZipIterable2_B_each_fFunctionT_to_Nothing: # @ZipIterable2_B_each_fFunctionT_to_Nothing
# %bb.0:
	movq	224(%rdi), %rax
	retq
.Lfunc_end508:
	.size	ZipIterable2_B_each_fFunctionT_to_Nothing, .Lfunc_end508-ZipIterable2_B_each_fFunctionT_to_Nothing
                                        # -- End function
	.globl	ZipIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T # -- Begin function ZipIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T
	.p2align	4, 0x90
	.type	ZipIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T,@function
ZipIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T: # @ZipIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T
# %bb.0:
	movq	232(%rdi), %rax
	retq
.Lfunc_end509:
	.size	ZipIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, .Lfunc_end509-ZipIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T
                                        # -- End function
	.globl	ZipIterable2_B_all_fFunctionT_to_Ptri1 # -- Begin function ZipIterable2_B_all_fFunctionT_to_Ptri1
	.p2align	4, 0x90
	.type	ZipIterable2_B_all_fFunctionT_to_Ptri1,@function
ZipIterable2_B_all_fFunctionT_to_Ptri1: # @ZipIterable2_B_all_fFunctionT_to_Ptri1
# %bb.0:
	movq	240(%rdi), %rax
	retq
.Lfunc_end510:
	.size	ZipIterable2_B_all_fFunctionT_to_Ptri1, .Lfunc_end510-ZipIterable2_B_all_fFunctionT_to_Ptri1
                                        # -- End function
	.globl	ZipIterable2_B_any_fFunctionT_to_Ptri1 # -- Begin function ZipIterable2_B_any_fFunctionT_to_Ptri1
	.p2align	4, 0x90
	.type	ZipIterable2_B_any_fFunctionT_to_Ptri1,@function
ZipIterable2_B_any_fFunctionT_to_Ptri1: # @ZipIterable2_B_any_fFunctionT_to_Ptri1
# %bb.0:
	movq	248(%rdi), %rax
	retq
.Lfunc_end511:
	.size	ZipIterable2_B_any_fFunctionT_to_Ptri1, .Lfunc_end511-ZipIterable2_B_any_fFunctionT_to_Ptri1
                                        # -- End function
	.globl	ZipIterable2_B_map_fFunctionT_to_U # -- Begin function ZipIterable2_B_map_fFunctionT_to_U
	.p2align	4, 0x90
	.type	ZipIterable2_B_map_fFunctionT_to_U,@function
ZipIterable2_B_map_fFunctionT_to_U:     # @ZipIterable2_B_map_fFunctionT_to_U
# %bb.0:
	movq	256(%rdi), %rax
	retq
.Lfunc_end512:
	.size	ZipIterable2_B_map_fFunctionT_to_U, .Lfunc_end512-ZipIterable2_B_map_fFunctionT_to_U
                                        # -- End function
	.globl	ZipIterable2_B_filter_fFunctionT_to_Ptri1 # -- Begin function ZipIterable2_B_filter_fFunctionT_to_Ptri1
	.p2align	4, 0x90
	.type	ZipIterable2_B_filter_fFunctionT_to_Ptri1,@function
ZipIterable2_B_filter_fFunctionT_to_Ptri1: # @ZipIterable2_B_filter_fFunctionT_to_Ptri1
# %bb.0:
	movq	264(%rdi), %rax
	retq
.Lfunc_end513:
	.size	ZipIterable2_B_filter_fFunctionT_to_Ptri1, .Lfunc_end513-ZipIterable2_B_filter_fFunctionT_to_Ptri1
                                        # -- End function
	.globl	ZipIterable2_B_chain_otherIterable2T # -- Begin function ZipIterable2_B_chain_otherIterable2T
	.p2align	4, 0x90
	.type	ZipIterable2_B_chain_otherIterable2T,@function
ZipIterable2_B_chain_otherIterable2T:   # @ZipIterable2_B_chain_otherIterable2T
# %bb.0:
	movq	272(%rdi), %rax
	retq
.Lfunc_end514:
	.size	ZipIterable2_B_chain_otherIterable2T, .Lfunc_end514-ZipIterable2_B_chain_otherIterable2T
                                        # -- End function
	.globl	ZipIterable2_B_interleave_otherIterable2T # -- Begin function ZipIterable2_B_interleave_otherIterable2T
	.p2align	4, 0x90
	.type	ZipIterable2_B_interleave_otherIterable2T,@function
ZipIterable2_B_interleave_otherIterable2T: # @ZipIterable2_B_interleave_otherIterable2T
# %bb.0:
	movq	280(%rdi), %rax
	retq
.Lfunc_end515:
	.size	ZipIterable2_B_interleave_otherIterable2T, .Lfunc_end515-ZipIterable2_B_interleave_otherIterable2T
                                        # -- End function
	.globl	ZipIterable2_B_zip_otherIterable2U # -- Begin function ZipIterable2_B_zip_otherIterable2U
	.p2align	4, 0x90
	.type	ZipIterable2_B_zip_otherIterable2U,@function
ZipIterable2_B_zip_otherIterable2U:     # @ZipIterable2_B_zip_otherIterable2U
# %bb.0:
	movq	288(%rdi), %rax
	retq
.Lfunc_end516:
	.size	ZipIterable2_B_zip_otherIterable2U, .Lfunc_end516-ZipIterable2_B_zip_otherIterable2U
                                        # -- End function
	.globl	ZipIterable2_B_product_otherIterable2U # -- Begin function ZipIterable2_B_product_otherIterable2U
	.p2align	4, 0x90
	.type	ZipIterable2_B_product_otherIterable2U,@function
ZipIterable2_B_product_otherIterable2U: # @ZipIterable2_B_product_otherIterable2U
# %bb.0:
	movq	296(%rdi), %rax
	retq
.Lfunc_end517:
	.size	ZipIterable2_B_product_otherIterable2U, .Lfunc_end517-ZipIterable2_B_product_otherIterable2U
                                        # -- End function
	.globl	ZipIterable2_init_firstIterable2T_secondIterable2U # -- Begin function ZipIterable2_init_firstIterable2T_secondIterable2U
	.p2align	4, 0x90
	.type	ZipIterable2_init_firstIterable2T_secondIterable2U,@function
ZipIterable2_init_firstIterable2T_secondIterable2U: # @ZipIterable2_init_firstIterable2T_secondIterable2U
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	pushq	%rax
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rsi, %rbx
	movq	%rdi, %r12
	movq	128(%rsp), %rax
	movq	%rax, (%rsp)                    # 8-byte Spill
	movq	136(%rsp), %r15
	movq	120(%rsp), %r13
	movq	96(%rsp), %rdx
	movq	104(%rsp), %rcx
	movq	88(%rsp), %rsi
	movq	40(%rdi), %rax
	movabsq	$-3218950579047519815, %rdi     # imm = 0xD353FD80CA55A9B9
	imulq	8(%r12), %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%r12), %r8
	movslq	(%rax,%r8,4), %rbp
	movq	40(%rsi), %rax
	movabsq	$5693646204635713916, %r14      # imm = 0x4F03E50E9010117C
	movq	8(%rsi), %rdi
	imulq	%r14, %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%rsi), %r8
	movl	(%rax,%r8,4), %r8d
	movq	24(%r12,%rbp,8), %rax
	movq	%rbx, %rdi
	callq	*8(%rax)
	movq	40(%r13), %rax
	imulq	8(%r13), %r14
	movq	%r14, %rcx
	shrq	$32, %rcx
	xorq	%r14, %rcx
	andq	16(%r13), %rcx
	movl	(%rax,%rcx,4), %r8d
	movq	32(%r12,%rbp,8), %rax
	movq	8(%rax), %rax
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movq	(%rsp), %rdx                    # 8-byte Reload
	movq	%r15, %rcx
	addq	$8, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	jmpq	*%rax                           # TAILCALL
.Lfunc_end518:
	.size	ZipIterable2_init_firstIterable2T_secondIterable2U, .Lfunc_end518-ZipIterable2_init_firstIterable2T_secondIterable2U
	.cfi_endproc
                                        # -- End function
	.globl	ZipIterable2_iterator_          # -- Begin function ZipIterable2_iterator_
	.p2align	4, 0x90
	.type	ZipIterable2_iterator_,@function
ZipIterable2_iterator_:                 # @ZipIterable2_iterator_
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$456, %rsp                      # imm = 0x1C8
	.cfi_def_cfa_offset 512
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rdx, %rbx
	movq	%rdi, 160(%rsp)                 # 8-byte Spill
	movq	40(%rsi), %rax
	movabsq	$-3218950579047519815, %rcx     # imm = 0xD353FD80CA55A9B9
	imulq	8(%rsi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rsi), %rdx
	movslq	(%rax,%rdx,4), %rax
	movq	%rax, 48(%rsp)                  # 8-byte Spill
	movq	24(%rsi,%rax,8), %rax
	movq	%rsi, %r14
	leaq	296(%rsp), %rdi
	movq	%rbx, %rsi
	callq	*(%rax)
	movslq	320(%rsp), %rbp
	movq	312(%rsp), %rax
	movq	%rax, 16(%rsp)                  # 8-byte Spill
	movq	296(%rsp), %r12
	movq	304(%rsp), %r13
	movq	%rbx, %rdi
	movq	%rbx, 24(%rsp)                  # 8-byte Spill
	movq	48(%rsp), %r15                  # 8-byte Reload
	callq	*(%r14,%r15,8)
	movq	%rbx, %rdi
	callq	*8(%r14,%r15,8)
	leaq	8(%rsp), %r8
	movq	%r12, %rdi
	movq	%r13, %rsi
	movq	16(%rsp), %rbx                  # 8-byte Reload
	movq	%rbx, %rdx
	movl	%ebp, %ecx
	callq	*8(%r12,%rbp,8)
	leaq	424(%rsp), %rdi
	movq	%r12, %rsi
	movq	%r13, %rdx
	movq	%rbx, %rcx
	movl	%ebp, %r8d
	movq	%r12, %r9
	leaq	8(%rsp), %r10
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	32(%r14,%r15,8), %rax
	movq	%r14, %rbx
	movq	%r15, %r14
	leaq	264(%rsp), %rdi
	movq	24(%rsp), %r15                  # 8-byte Reload
	movq	%r15, %rsi
	callq	*(%rax)
	movslq	288(%rsp), %rbp
	movq	280(%rsp), %rax
	movq	%rax, 16(%rsp)                  # 8-byte Spill
	movq	264(%rsp), %r12
	movq	272(%rsp), %r13
	movq	%r15, %rdi
	movq	%rbx, 40(%rsp)                  # 8-byte Spill
	callq	*(%rbx,%r14,8)
	movq	%r15, %rdi
	callq	*8(%rbx,%r14,8)
	movq	%r12, %rdi
	movq	%r13, %rsi
	movq	16(%rsp), %rbx                  # 8-byte Reload
	movq	%rbx, %rdx
	movl	%ebp, %ecx
	leaq	8(%rsp), %r8
	callq	*8(%r12,%rbp,8)
	leaq	392(%rsp), %rdi
	movq	%r12, %rsi
	movq	%r13, %rdx
	movq	%rbx, %rcx
	movl	%ebp, %r8d
	movq	%r12, %r9
	leaq	8(%rsp), %r10
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	%r15, %rdi
	movq	%r14, %rbp
	movq	40(%rsp), %r14                  # 8-byte Reload
	callq	*(%r14,%rbp,8)
	movq	%rax, %rbx
	movq	%r15, %rdi
	callq	*8(%r14,%rbp,8)
	movq	%rax, %r12
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %r15
	movl	$32, %edi
	movq	%r15, %rsi
	movq	%r15, 152(%rsp)                 # 8-byte Spill
	callq	bump_malloc_inner@PLT
	movq	%rax, %r13
	movq	%r12, 16(%rax)
	movq	%rbx, 8(%rax)
	movq	$0, 24(%rax)
	movq	Pair@GOTPCREL(%rip), %rax
	movq	%rax, (%r13)
	movl	$88, %edi
	movq	%r15, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rbx, (%rax)
	movq	%r12, 8(%rax)
	movq	%r13, 16(%rax)
	movq	ZipIterator2@GOTPCREL(%rip), %rcx
	movq	%rcx, 56(%rsp)
	movq	%rax, 64(%rsp)
	movl	$9, 80(%rsp)
	movq	24(%r14,%rbp,8), %rax
	leaq	232(%rsp), %rdi
	movq	24(%rsp), %r15                  # 8-byte Reload
	movq	%r15, %rsi
	callq	*(%rax)
	movslq	256(%rsp), %rbx
	movq	248(%rsp), %rax
	movq	%rax, 16(%rsp)                  # 8-byte Spill
	movq	232(%rsp), %r12
	movq	240(%rsp), %r13
	movq	%r15, %rdi
	callq	*(%r14,%rbp,8)
	movq	%r15, %rdi
	callq	*8(%r14,%rbp,8)
	movq	%r12, %rdi
	movq	%r13, %rsi
	movq	16(%rsp), %rbp                  # 8-byte Reload
	movq	%rbp, %rdx
	movl	%ebx, %ecx
	leaq	8(%rsp), %r15
	movq	%r15, %r8
	callq	*8(%r12,%rbx,8)
	leaq	360(%rsp), %rdi
	movq	%r12, %rsi
	movq	%r13, %rdx
	movq	%rbp, %rcx
	movl	%ebx, %r8d
	movq	%r12, %r9
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	376(%rsp), %rax
	movq	%rax, 144(%rsp)                 # 8-byte Spill
	movq	360(%rsp), %rax
	movq	%rax, 16(%rsp)                  # 8-byte Spill
	movq	368(%rsp), %rax
	movq	%rax, 136(%rsp)                 # 8-byte Spill
	movq	48(%rsp), %r15                  # 8-byte Reload
	movq	32(%r14,%r15,8), %rax
	leaq	200(%rsp), %rdi
	movq	24(%rsp), %rbx                  # 8-byte Reload
	movq	%rbx, %rsi
	callq	*(%rax)
	movslq	224(%rsp), %r13
	movq	216(%rsp), %rax
	movq	%rax, 32(%rsp)                  # 8-byte Spill
	movq	200(%rsp), %r12
	movq	208(%rsp), %rbp
	movq	%rbx, %rdi
	callq	*(%r14,%r15,8)
	movq	%rbx, %rdi
	callq	*8(%r14,%r15,8)
	movq	%r12, %rdi
	movq	%rbp, %rsi
	movq	32(%rsp), %r14                  # 8-byte Reload
	movq	%r14, %rdx
	movl	%r13d, %ecx
	leaq	8(%rsp), %rbx
	movq	%rbx, %r8
	callq	*8(%r12,%r13,8)
	leaq	328(%rsp), %rdi
	movq	%r12, %rsi
	movq	%rbp, %rdx
	movq	%r14, %rcx
	movl	%r13d, %r8d
	movq	%r12, %r9
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	344(%rsp), %rax
	movq	%rax, 32(%rsp)                  # 8-byte Spill
	movq	328(%rsp), %r13
	movq	336(%rsp), %rax
	movq	%rax, 128(%rsp)                 # 8-byte Spill
	movq	40(%r13), %rax
	movabsq	$4189192806087951739, %r8       # imm = 0x3A2300A96E7E857B
	movq	8(%r13), %rcx
	imulq	%r8, %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%r13), %rdx
	movq	16(%rsp), %rdi                  # 8-byte Reload
	movq	40(%rdi), %rcx
	movq	8(%rdi), %rsi
	movq	%rdi, %r9
	imulq	%r8, %rsi
	movq	%rsi, %rdi
	shrq	$32, %rdi
	xorq	%rsi, %rdi
	andq	16(%r9), %rdi
	movl	(%rcx,%rdi,4), %ecx
	movq	%rcx, 120(%rsp)                 # 8-byte Spill
	movl	(%rax,%rdx,4), %eax
	movq	%rax, 112(%rsp)                 # 8-byte Spill
	movq	56(%rsp), %rbx
	movq	64(%rsp), %rax
	movq	%rax, 96(%rsp)                  # 8-byte Spill
	movq	72(%rsp), %rax
	movq	%rax, 104(%rsp)                 # 8-byte Spill
	movslq	80(%rsp), %rax
	movq	%rax, 88(%rsp)                  # 8-byte Spill
	movq	24(%rsp), %rbp                  # 8-byte Reload
	movq	%rbp, %rdi
	movq	40(%rsp), %r14                  # 8-byte Reload
	callq	*(%r14,%r15,8)
	movq	%rax, %r12
	movq	%rbp, %rdi
	callq	*8(%r14,%r15,8)
	movq	%rax, %rbp
	movl	$24, %edi
	movq	152(%rsp), %r14                 # 8-byte Reload
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r15
	movq	%r12, 8(%rax)
	movq	$0, 16(%rax)
	movq	Iterator2@GOTPCREL(%rip), %r12
	movq	%r12, (%rax)
	movl	$24, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rbp, 8(%rax)
	movq	$0, 16(%rax)
	movq	%r12, (%rax)
	movq	%r15, 184(%rsp)
	movq	%rax, 192(%rsp)
	movq	88(%rsp), %r12                  # 8-byte Reload
	movq	40(%rbx,%r12,8), %rax
	movq	16(%rsp), %r15                  # 8-byte Reload
	movq	%r15, 168(%rsp)
	movq	%r13, 176(%rsp)
	leaq	168(%rsp), %r8
	movq	%rbx, %rdi
	movq	96(%rsp), %rbp                  # 8-byte Reload
	movq	%rbp, %rsi
	movq	104(%rsp), %r14                 # 8-byte Reload
	movq	%r14, %rdx
	movl	%r12d, %ecx
	callq	*%rax
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	leaq	192(%rsp), %r10
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	movq	%r14, %rdx
	movl	%r12d, %ecx
	movq	%rbx, %r8
	movq	%rbp, %r9
	pushq	120(%rsp)                       # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	48(%rsp)                        # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	152(%rsp)                       # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	160(%rsp)                       # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	192(%rsp)                       # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	192(%rsp)                       # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$96, %rsp
	.cfi_adjust_cfa_offset -96
	movq	56(%rsp), %r8
	movq	64(%rsp), %rcx
	movq	72(%rsp), %rdx
	movq	40(%r8), %rsi
	movabsq	$4189192806087951739, %rax      # imm = 0x3A2300A96E7E857B
	imulq	8(%r8), %rax
	movq	%rax, %rdi
	shrq	$32, %rdi
	xorq	%rax, %rdi
	andq	16(%r8), %rdi
	movl	(%rsi,%rdi,4), %esi
	movq	160(%rsp), %rax                 # 8-byte Reload
	movq	%rdx, 16(%rax)
	movq	%rcx, 8(%rax)
	movq	%r8, (%rax)
	movl	%esi, 24(%rax)
	addq	$456, %rsp                      # imm = 0x1C8
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end519:
	.size	ZipIterable2_iterator_, .Lfunc_end519-ZipIterable2_iterator_
	.cfi_endproc
                                        # -- End function
	.globl	_size_ZipIterator2              # -- Begin function _size_ZipIterator2
	.p2align	4, 0x90
	.type	_size_ZipIterator2,@function
_size_ZipIterator2:                     # @_size_ZipIterator2
# %bb.0:
	movl	$88, %eax
	movl	$8, %edx
	retq
.Lfunc_end520:
	.size	_size_ZipIterator2, .Lfunc_end520-_size_ZipIterator2
                                        # -- End function
	.globl	ZipIterator2_field_ZipIterator2_0 # -- Begin function ZipIterator2_field_ZipIterator2_0
	.p2align	4, 0x90
	.type	ZipIterator2_field_ZipIterator2_0,@function
ZipIterator2_field_ZipIterator2_0:      # @ZipIterator2_field_ZipIterator2_0
# %bb.0:
	movq	(%rdi), %rax
	retq
.Lfunc_end521:
	.size	ZipIterator2_field_ZipIterator2_0, .Lfunc_end521-ZipIterator2_field_ZipIterator2_0
                                        # -- End function
	.globl	ZipIterator2_field_ZipIterator2_1 # -- Begin function ZipIterator2_field_ZipIterator2_1
	.p2align	4, 0x90
	.type	ZipIterator2_field_ZipIterator2_1,@function
ZipIterator2_field_ZipIterator2_1:      # @ZipIterator2_field_ZipIterator2_1
# %bb.0:
	movq	8(%rdi), %rax
	retq
.Lfunc_end522:
	.size	ZipIterator2_field_ZipIterator2_1, .Lfunc_end522-ZipIterator2_field_ZipIterator2_1
                                        # -- End function
	.globl	ZipIterator2_field_ZipIterator2_2 # -- Begin function ZipIterator2_field_ZipIterator2_2
	.p2align	4, 0x90
	.type	ZipIterator2_field_ZipIterator2_2,@function
ZipIterator2_field_ZipIterator2_2:      # @ZipIterator2_field_ZipIterator2_2
# %bb.0:
	movq	16(%rdi), %rax
	retq
.Lfunc_end523:
	.size	ZipIterator2_field_ZipIterator2_2, .Lfunc_end523-ZipIterator2_field_ZipIterator2_2
                                        # -- End function
	.globl	ZipIterator2_B_init_firstIterator2T_secondIterator2U # -- Begin function ZipIterator2_B_init_firstIterator2T_secondIterator2U
	.p2align	4, 0x90
	.type	ZipIterator2_B_init_firstIterator2T_secondIterator2U,@function
ZipIterator2_B_init_firstIterator2T_secondIterator2U: # @ZipIterator2_B_init_firstIterator2T_secondIterator2U
# %bb.0:
	movq	128(%rdi), %rax
	retq
.Lfunc_end524:
	.size	ZipIterator2_B_init_firstIterator2T_secondIterator2U, .Lfunc_end524-ZipIterator2_B_init_firstIterator2T_secondIterator2U
                                        # -- End function
	.globl	ZipIterator2_B_next_            # -- Begin function ZipIterator2_B_next_
	.p2align	4, 0x90
	.type	ZipIterator2_B_next_,@function
ZipIterator2_B_next_:                   # @ZipIterator2_B_next_
# %bb.0:
	movq	136(%rdi), %rax
	retq
.Lfunc_end525:
	.size	ZipIterator2_B_next_, .Lfunc_end525-ZipIterator2_B_next_
                                        # -- End function
	.globl	ZipIterator2_init_firstIterator2T_secondIterator2U # -- Begin function ZipIterator2_init_firstIterator2T_secondIterator2U
	.p2align	4, 0x90
	.type	ZipIterator2_init_firstIterator2T_secondIterator2U,@function
ZipIterator2_init_firstIterator2T_secondIterator2U: # @ZipIterator2_init_firstIterator2T_secondIterator2U
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	pushq	%rax
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rsi, %rbx
	movq	%rdi, %r12
	movq	128(%rsp), %rax
	movq	%rax, (%rsp)                    # 8-byte Spill
	movq	136(%rsp), %r15
	movq	120(%rsp), %r13
	movq	96(%rsp), %rdx
	movq	104(%rsp), %rcx
	movq	88(%rsp), %rsi
	movq	40(%rdi), %rax
	movabsq	$5502728639611621286, %rdi      # imm = 0x4C5D9E8B036B4FA6
	imulq	8(%r12), %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%r12), %r8
	movslq	(%rax,%r8,4), %rbp
	movq	40(%rsi), %rax
	movabsq	$4189192806087951739, %r14      # imm = 0x3A2300A96E7E857B
	movq	8(%rsi), %rdi
	imulq	%r14, %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%rsi), %r8
	movl	(%rax,%r8,4), %r8d
	movq	24(%r12,%rbp,8), %rax
	movq	%rbx, %rdi
	callq	*8(%rax)
	movq	40(%r13), %rax
	imulq	8(%r13), %r14
	movq	%r14, %rcx
	shrq	$32, %rcx
	xorq	%r14, %rcx
	andq	16(%r13), %rcx
	movl	(%rax,%rcx,4), %r8d
	movq	32(%r12,%rbp,8), %rax
	movq	8(%rax), %rax
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movq	(%rsp), %rdx                    # 8-byte Reload
	movq	%r15, %rcx
	addq	$8, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	jmpq	*%rax                           # TAILCALL
.Lfunc_end526:
	.size	ZipIterator2_init_firstIterator2T_secondIterator2U, .Lfunc_end526-ZipIterator2_init_firstIterator2T_secondIterator2U
	.cfi_endproc
                                        # -- End function
	.globl	ZipIterator2_next_              # -- Begin function ZipIterator2_next_
	.p2align	4, 0x90
	.type	ZipIterator2_next_,@function
ZipIterator2_next_:                     # @ZipIterator2_next_
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$296, %rsp                      # imm = 0x128
	.cfi_def_cfa_offset 352
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rdx, %r15
	movq	%rsi, %r13
	movq	%rdi, 88(%rsp)                  # 8-byte Spill
	movq	40(%rsi), %rax
	movabsq	$5502728639611621286, %rcx      # imm = 0x4C5D9E8B036B4FA6
	imulq	8(%rsi), %rcx
	movq	%rcx, %rsi
	shrq	$32, %rsi
	xorq	%rcx, %rsi
	andq	16(%r13), %rsi
	movslq	(%rax,%rsi,4), %r14
	movq	24(%r13,%r14,8), %rax
	leaq	160(%rsp), %rdi
	movq	%rdx, %rsi
	movq	%rdx, 24(%rsp)                  # 8-byte Spill
	callq	*(%rax)
	movslq	184(%rsp), %rbx
	movq	176(%rsp), %rax
	movq	%rax, 16(%rsp)                  # 8-byte Spill
	movq	160(%rsp), %r12
	movq	168(%rsp), %rbp
	movq	%r15, %rdi
	callq	*(%r13,%r14,8)
	movq	%r15, %rdi
	callq	*8(%r13,%r14,8)
	movq	%rsp, %r8
	movq	%r12, %rdi
	movq	%rbp, %rsi
	movq	%rbp, %r15
	movq	16(%rsp), %rbp                  # 8-byte Reload
	movq	%rbp, %rdx
	movl	%ebx, %ecx
	callq	*8(%r12,%rbx,8)
	leaq	240(%rsp), %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movq	%rbp, %rcx
	movl	%ebx, %r8d
	movq	%r12, %r9
	movq	%rsp, %r10
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	264(%rsp), %rax
	movq	%rax, 72(%rsp)                  # 8-byte Spill
	movq	240(%rsp), %rax
	movq	%rax, 16(%rsp)                  # 8-byte Spill
	movq	256(%rsp), %rax
	movq	%rax, 64(%rsp)                  # 8-byte Spill
	movq	32(%r13,%r14,8), %rax
	leaq	128(%rsp), %rdi
	movq	24(%rsp), %r15                  # 8-byte Reload
	movq	%r15, %rsi
	callq	*(%rax)
	movslq	152(%rsp), %rbp
	movq	144(%rsp), %rbx
	movq	128(%rsp), %r12
	movq	136(%rsp), %rax
	movq	%rax, 8(%rsp)                   # 8-byte Spill
	movq	%r15, %rdi
	callq	*(%r13,%r14,8)
	movq	%r15, %rdi
	movq	%r14, %r15
	movq	%r13, 80(%rsp)                  # 8-byte Spill
	callq	*8(%r13,%r14,8)
	movq	%r12, %rdi
	movq	8(%rsp), %r13                   # 8-byte Reload
	movq	%r13, %rsi
	movq	%rbx, %rdx
	movl	%ebp, %ecx
	movq	%rsp, %r14
	movq	%r14, %r8
	callq	*8(%r12,%rbp,8)
	leaq	192(%rsp), %rdi
	movq	%r12, %rsi
	movq	%r13, %rdx
	movq	%rbx, %rcx
	movl	%ebp, %r8d
	movq	%r12, %r9
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	nil_typ@GOTPCREL(%rip), %rdi
	movq	16(%rsp), %rax                  # 8-byte Reload
	cmpq	%rdi, %rax
	sete	%cl
	testq	%rax, %rax
	sete	%dl
	orb	%cl, %dl
	jne	.LBB527_1
# %bb.2:
	movq	192(%rsp), %r13
	movq	nil_typ@GOTPCREL(%rip), %rdi
	cmpq	%rdi, %r13
	sete	%cl
	testq	%r13, %r13
	sete	%dl
	orb	%cl, %dl
	jne	.LBB527_1
# %bb.3:
	movq	208(%rsp), %rax
	movq	%rax, 56(%rsp)                  # 8-byte Spill
	movq	216(%rsp), %rax
	movq	%rax, 48(%rsp)                  # 8-byte Spill
	movq	24(%rsp), %rbp                  # 8-byte Reload
	movq	%rbp, %rdi
	movq	80(%rsp), %r14                  # 8-byte Reload
	callq	*(%r14,%r15,8)
	movq	%rax, %rbx
	movq	%rbp, %rdi
	callq	*8(%r14,%r15,8)
	movq	%rax, 8(%rsp)                   # 8-byte Spill
	movq	%rbx, 40(%rsp)                  # 8-byte Spill
	movq	(%rbx), %rax
	movq	%rbx, %rdi
	callq	*48(%rax)
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movl	$16, %eax
	xorl	%edx, %edx
	divq	%rbx
	movq	%rbx, %rax
	subq	%rdx, %rax
	testq	%rdx, %rdx
	cmoveq	%rdx, %rax
	leaq	(%rcx,%rax), %rdx
	movq	%rdx, 32(%rsp)                  # 8-byte Spill
	leaq	16(%rcx,%rax), %r12
	movq	8(%rsp), %rdi                   # 8-byte Reload
	movq	(%rdi), %rax
	callq	*48(%rax)
	movq	%rax, %rcx
	movq	%rdx, %rsi
	cmpq	%rdx, %rbx
	cmovbeq	%rdx, %rbx
	cmpq	$9, %rbx
	movl	$8, %edi
	cmovaeq	%rbx, %rdi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	subq	%rdx, %rsi
	testq	%rdx, %rdx
	cmoveq	%rdx, %rsi
	movq	32(%rsp), %rax                  # 8-byte Reload
	leaq	16(%rcx,%rax), %rcx
	addq	%rsi, %rcx
	movq	%rcx, %rax
	xorl	%edx, %edx
	divq	%rdi
	subq	%rdx, %rdi
	testq	%rdx, %rdx
	cmoveq	%rdx, %rdi
	addq	%rcx, %rdi
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r12
	movq	40(%rsp), %rax                  # 8-byte Reload
	movq	%rax, (%r12)
	movq	8(%rsp), %rax                   # 8-byte Reload
	movq	%rax, 8(%r12)
	movq	Pair@GOTPCREL(%rip), %rax
	movq	%rax, 96(%rsp)
	movq	%r12, 104(%rsp)
	movl	$9, 120(%rsp)
	movq	%rbp, %rdi
	callq	*(%r14,%r15,8)
	movq	%rbp, %rdi
	callq	*8(%r14,%r15,8)
	movq	16(%rsp), %r15                  # 8-byte Reload
	movq	40(%r15), %rax
	movabsq	$3084208142191802847, %r14      # imm = 0x2ACD4EF6E8B5B9DF
	movq	8(%r15), %rcx
	imulq	%r14, %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%r15), %rdx
	movl	(%rax,%rdx,4), %ebx
	movq	(%r12), %rdi
	movq	(%rdi), %rax
	callq	*48(%rax)
	movq	%rdx, %r9
	movl	$16, %eax
	xorl	%edx, %edx
	divq	%r9
	subq	%rdx, %r9
	addq	$16, %r9
	testq	%rdx, %rdx
	movl	$16, %eax
	cmoveq	%rax, %r9
	addq	%r12, %r9
	movq	(%r12), %r8
	movq	(%r8), %rax
	movq	%r15, %rdi
	movq	64(%rsp), %rsi                  # 8-byte Reload
	movq	72(%rsp), %rdx                  # 8-byte Reload
	movq	%rbx, %rcx
	callq	*64(%rax)
	movq	40(%r13), %rax
	imulq	8(%r13), %r14
	movq	%r14, %rcx
	shrq	$32, %rcx
	xorq	%r14, %rcx
	andq	16(%r13), %rcx
	movl	(%rax,%rcx,4), %r14d
	movq	(%r12), %rdi
	movq	(%rdi), %rax
	callq	*48(%rax)
	movq	%rax, %rcx
	movq	%rdx, %rsi
	movl	$16, %eax
	xorl	%edx, %edx
	divq	%rsi
	subq	%rdx, %rsi
	testq	%rdx, %rdx
	cmoveq	%rdx, %rsi
	leaq	(%rcx,%rsi), %r15
	leaq	16(%rcx,%rsi), %rbx
	movq	8(%r12), %rdi
	movq	(%rdi), %rax
	callq	*48(%rax)
	movq	%rdx, %rcx
	movq	%rbx, %rax
	xorl	%edx, %edx
	divq	%rcx
	subq	%rdx, %rcx
	testq	%rdx, %rdx
	cmoveq	%rdx, %rcx
	leaq	16(%r12,%r15), %r9
	addq	%rcx, %r9
	movq	8(%r12), %r8
	movq	(%r8), %rax
	movq	%r13, %rdi
	movq	56(%rsp), %rsi                  # 8-byte Reload
	movq	48(%rsp), %rdx                  # 8-byte Reload
	movq	%r14, %rcx
	callq	*64(%rax)
	movq	96(%rsp), %rdi
	movq	104(%rsp), %rdx
	movl	120(%rsp), %ecx
	movq	112(%rsp), %rsi
	jmp	.LBB527_4
.LBB527_1:
	xorl	%ecx, %ecx
                                        # implicit-def: $rdx
                                        # implicit-def: $rsi
.LBB527_4:                              # %.thread
	movq	88(%rsp), %rax                  # 8-byte Reload
	movq	%rdx, 16(%rax)
	movq	%rdi, (%rax)
	movq	%rsi, 24(%rax)
	movl	%ecx, 32(%rax)
	addq	$296, %rsp                      # imm = 0x128
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end527:
	.size	ZipIterator2_next_, .Lfunc_end527-ZipIterator2_next_
	.cfi_endproc
                                        # -- End function
	.globl	ZipIterator2_getter_second      # -- Begin function ZipIterator2_getter_second
	.p2align	4, 0x90
	.type	ZipIterator2_getter_second,@function
ZipIterator2_getter_second:             # @ZipIterator2_getter_second
# %bb.0:
	movq	%rdi, %rax
	movq	56(%rsi), %rcx
	movq	64(%rsi), %rdx
	movq	72(%rsi), %rdi
	movl	80(%rsi), %esi
	movl	%esi, 24(%rax)
	movq	%rdi, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	retq
.Lfunc_end528:
	.size	ZipIterator2_getter_second, .Lfunc_end528-ZipIterator2_getter_second
                                        # -- End function
	.globl	ZipIterator2_setter_second      # -- Begin function ZipIterator2_setter_second
	.p2align	4, 0x90
	.type	ZipIterator2_setter_second,@function
ZipIterator2_setter_second:             # @ZipIterator2_setter_second
# %bb.0:
	movq	%rsi, 56(%rdi)
	movq	%rdx, 64(%rdi)
	movq	%rcx, 72(%rdi)
	movl	%r8d, 80(%rdi)
	retq
.Lfunc_end529:
	.size	ZipIterator2_setter_second, .Lfunc_end529-ZipIterator2_setter_second
                                        # -- End function
	.globl	ZipIterator2_getter_first       # -- Begin function ZipIterator2_getter_first
	.p2align	4, 0x90
	.type	ZipIterator2_getter_first,@function
ZipIterator2_getter_first:              # @ZipIterator2_getter_first
# %bb.0:
	movq	%rdi, %rax
	movq	24(%rsi), %rcx
	movq	32(%rsi), %rdx
	movq	40(%rsi), %rdi
	movl	48(%rsi), %esi
	movl	%esi, 24(%rax)
	movq	%rdi, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	retq
.Lfunc_end530:
	.size	ZipIterator2_getter_first, .Lfunc_end530-ZipIterator2_getter_first
                                        # -- End function
	.globl	ZipIterator2_setter_first       # -- Begin function ZipIterator2_setter_first
	.p2align	4, 0x90
	.type	ZipIterator2_setter_first,@function
ZipIterator2_setter_first:              # @ZipIterator2_setter_first
# %bb.0:
	movq	%rsi, 24(%rdi)
	movq	%rdx, 32(%rdi)
	movq	%rcx, 40(%rdi)
	movl	%r8d, 48(%rdi)
	retq
.Lfunc_end531:
	.size	ZipIterator2_setter_first, .Lfunc_end531-ZipIterator2_setter_first
                                        # -- End function
	.globl	ZipIterable2_getter_second      # -- Begin function ZipIterable2_getter_second
	.p2align	4, 0x90
	.type	ZipIterable2_getter_second,@function
ZipIterable2_getter_second:             # @ZipIterable2_getter_second
# %bb.0:
	movq	%rdi, %rax
	movq	56(%rsi), %rcx
	movq	64(%rsi), %rdx
	movq	72(%rsi), %rdi
	movl	80(%rsi), %esi
	movl	%esi, 24(%rax)
	movq	%rdi, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	retq
.Lfunc_end532:
	.size	ZipIterable2_getter_second, .Lfunc_end532-ZipIterable2_getter_second
                                        # -- End function
	.globl	ZipIterable2_setter_second      # -- Begin function ZipIterable2_setter_second
	.p2align	4, 0x90
	.type	ZipIterable2_setter_second,@function
ZipIterable2_setter_second:             # @ZipIterable2_setter_second
# %bb.0:
	movq	%rsi, 56(%rdi)
	movq	%rdx, 64(%rdi)
	movq	%rcx, 72(%rdi)
	movl	%r8d, 80(%rdi)
	retq
.Lfunc_end533:
	.size	ZipIterable2_setter_second, .Lfunc_end533-ZipIterable2_setter_second
                                        # -- End function
	.globl	ZipIterable2_getter_first       # -- Begin function ZipIterable2_getter_first
	.p2align	4, 0x90
	.type	ZipIterable2_getter_first,@function
ZipIterable2_getter_first:              # @ZipIterable2_getter_first
# %bb.0:
	movq	%rdi, %rax
	movq	24(%rsi), %rcx
	movq	32(%rsi), %rdx
	movq	40(%rsi), %rdi
	movl	48(%rsi), %esi
	movl	%esi, 24(%rax)
	movq	%rdi, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	retq
.Lfunc_end534:
	.size	ZipIterable2_getter_first, .Lfunc_end534-ZipIterable2_getter_first
                                        # -- End function
	.globl	ZipIterable2_setter_first       # -- Begin function ZipIterable2_setter_first
	.p2align	4, 0x90
	.type	ZipIterable2_setter_first,@function
ZipIterable2_setter_first:              # @ZipIterable2_setter_first
# %bb.0:
	movq	%rsi, 24(%rdi)
	movq	%rdx, 32(%rdi)
	movq	%rcx, 40(%rdi)
	movl	%r8d, 48(%rdi)
	retq
.Lfunc_end535:
	.size	ZipIterable2_setter_first, .Lfunc_end535-ZipIterable2_setter_first
                                        # -- End function
	.globl	_size_InterleaveIterable2       # -- Begin function _size_InterleaveIterable2
	.p2align	4, 0x90
	.type	_size_InterleaveIterable2,@function
_size_InterleaveIterable2:              # @_size_InterleaveIterable2
# %bb.0:
	movl	$72, %eax
	movl	$8, %edx
	retq
.Lfunc_end536:
	.size	_size_InterleaveIterable2, .Lfunc_end536-_size_InterleaveIterable2
                                        # -- End function
	.globl	InterleaveIterable2_field_InterleaveIterable2_0 # -- Begin function InterleaveIterable2_field_InterleaveIterable2_0
	.p2align	4, 0x90
	.type	InterleaveIterable2_field_InterleaveIterable2_0,@function
InterleaveIterable2_field_InterleaveIterable2_0: # @InterleaveIterable2_field_InterleaveIterable2_0
# %bb.0:
	movq	(%rdi), %rax
	retq
.Lfunc_end537:
	.size	InterleaveIterable2_field_InterleaveIterable2_0, .Lfunc_end537-InterleaveIterable2_field_InterleaveIterable2_0
                                        # -- End function
	.globl	InterleaveIterable2_B_init_firstIterable2T_secondIterable2T # -- Begin function InterleaveIterable2_B_init_firstIterable2T_secondIterable2T
	.p2align	4, 0x90
	.type	InterleaveIterable2_B_init_firstIterable2T_secondIterable2T,@function
InterleaveIterable2_B_init_firstIterable2T_secondIterable2T: # @InterleaveIterable2_B_init_firstIterable2T_secondIterable2T
# %bb.0:
	movq	192(%rdi), %rax
	retq
.Lfunc_end538:
	.size	InterleaveIterable2_B_init_firstIterable2T_secondIterable2T, .Lfunc_end538-InterleaveIterable2_B_init_firstIterable2T_secondIterable2T
                                        # -- End function
	.globl	InterleaveIterable2_B_iterator_ # -- Begin function InterleaveIterable2_B_iterator_
	.p2align	4, 0x90
	.type	InterleaveIterable2_B_iterator_,@function
InterleaveIterable2_B_iterator_:        # @InterleaveIterable2_B_iterator_
# %bb.0:
	movq	200(%rdi), %rax
	retq
.Lfunc_end539:
	.size	InterleaveIterable2_B_iterator_, .Lfunc_end539-InterleaveIterable2_B_iterator_
                                        # -- End function
	.globl	InterleaveIterable2_B_each_fFunctionT_to_Nothing # -- Begin function InterleaveIterable2_B_each_fFunctionT_to_Nothing
	.p2align	4, 0x90
	.type	InterleaveIterable2_B_each_fFunctionT_to_Nothing,@function
InterleaveIterable2_B_each_fFunctionT_to_Nothing: # @InterleaveIterable2_B_each_fFunctionT_to_Nothing
# %bb.0:
	movq	208(%rdi), %rax
	retq
.Lfunc_end540:
	.size	InterleaveIterable2_B_each_fFunctionT_to_Nothing, .Lfunc_end540-InterleaveIterable2_B_each_fFunctionT_to_Nothing
                                        # -- End function
	.globl	InterleaveIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T # -- Begin function InterleaveIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T
	.p2align	4, 0x90
	.type	InterleaveIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T,@function
InterleaveIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T: # @InterleaveIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T
# %bb.0:
	movq	216(%rdi), %rax
	retq
.Lfunc_end541:
	.size	InterleaveIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, .Lfunc_end541-InterleaveIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T
                                        # -- End function
	.globl	InterleaveIterable2_B_all_fFunctionT_to_Ptri1 # -- Begin function InterleaveIterable2_B_all_fFunctionT_to_Ptri1
	.p2align	4, 0x90
	.type	InterleaveIterable2_B_all_fFunctionT_to_Ptri1,@function
InterleaveIterable2_B_all_fFunctionT_to_Ptri1: # @InterleaveIterable2_B_all_fFunctionT_to_Ptri1
# %bb.0:
	movq	224(%rdi), %rax
	retq
.Lfunc_end542:
	.size	InterleaveIterable2_B_all_fFunctionT_to_Ptri1, .Lfunc_end542-InterleaveIterable2_B_all_fFunctionT_to_Ptri1
                                        # -- End function
	.globl	InterleaveIterable2_B_any_fFunctionT_to_Ptri1 # -- Begin function InterleaveIterable2_B_any_fFunctionT_to_Ptri1
	.p2align	4, 0x90
	.type	InterleaveIterable2_B_any_fFunctionT_to_Ptri1,@function
InterleaveIterable2_B_any_fFunctionT_to_Ptri1: # @InterleaveIterable2_B_any_fFunctionT_to_Ptri1
# %bb.0:
	movq	232(%rdi), %rax
	retq
.Lfunc_end543:
	.size	InterleaveIterable2_B_any_fFunctionT_to_Ptri1, .Lfunc_end543-InterleaveIterable2_B_any_fFunctionT_to_Ptri1
                                        # -- End function
	.globl	InterleaveIterable2_B_map_fFunctionT_to_U # -- Begin function InterleaveIterable2_B_map_fFunctionT_to_U
	.p2align	4, 0x90
	.type	InterleaveIterable2_B_map_fFunctionT_to_U,@function
InterleaveIterable2_B_map_fFunctionT_to_U: # @InterleaveIterable2_B_map_fFunctionT_to_U
# %bb.0:
	movq	240(%rdi), %rax
	retq
.Lfunc_end544:
	.size	InterleaveIterable2_B_map_fFunctionT_to_U, .Lfunc_end544-InterleaveIterable2_B_map_fFunctionT_to_U
                                        # -- End function
	.globl	InterleaveIterable2_B_filter_fFunctionT_to_Ptri1 # -- Begin function InterleaveIterable2_B_filter_fFunctionT_to_Ptri1
	.p2align	4, 0x90
	.type	InterleaveIterable2_B_filter_fFunctionT_to_Ptri1,@function
InterleaveIterable2_B_filter_fFunctionT_to_Ptri1: # @InterleaveIterable2_B_filter_fFunctionT_to_Ptri1
# %bb.0:
	movq	248(%rdi), %rax
	retq
.Lfunc_end545:
	.size	InterleaveIterable2_B_filter_fFunctionT_to_Ptri1, .Lfunc_end545-InterleaveIterable2_B_filter_fFunctionT_to_Ptri1
                                        # -- End function
	.globl	InterleaveIterable2_B_chain_otherIterable2T # -- Begin function InterleaveIterable2_B_chain_otherIterable2T
	.p2align	4, 0x90
	.type	InterleaveIterable2_B_chain_otherIterable2T,@function
InterleaveIterable2_B_chain_otherIterable2T: # @InterleaveIterable2_B_chain_otherIterable2T
# %bb.0:
	movq	256(%rdi), %rax
	retq
.Lfunc_end546:
	.size	InterleaveIterable2_B_chain_otherIterable2T, .Lfunc_end546-InterleaveIterable2_B_chain_otherIterable2T
                                        # -- End function
	.globl	InterleaveIterable2_B_interleave_otherIterable2T # -- Begin function InterleaveIterable2_B_interleave_otherIterable2T
	.p2align	4, 0x90
	.type	InterleaveIterable2_B_interleave_otherIterable2T,@function
InterleaveIterable2_B_interleave_otherIterable2T: # @InterleaveIterable2_B_interleave_otherIterable2T
# %bb.0:
	movq	264(%rdi), %rax
	retq
.Lfunc_end547:
	.size	InterleaveIterable2_B_interleave_otherIterable2T, .Lfunc_end547-InterleaveIterable2_B_interleave_otherIterable2T
                                        # -- End function
	.globl	InterleaveIterable2_B_zip_otherIterable2U # -- Begin function InterleaveIterable2_B_zip_otherIterable2U
	.p2align	4, 0x90
	.type	InterleaveIterable2_B_zip_otherIterable2U,@function
InterleaveIterable2_B_zip_otherIterable2U: # @InterleaveIterable2_B_zip_otherIterable2U
# %bb.0:
	movq	272(%rdi), %rax
	retq
.Lfunc_end548:
	.size	InterleaveIterable2_B_zip_otherIterable2U, .Lfunc_end548-InterleaveIterable2_B_zip_otherIterable2U
                                        # -- End function
	.globl	InterleaveIterable2_B_product_otherIterable2U # -- Begin function InterleaveIterable2_B_product_otherIterable2U
	.p2align	4, 0x90
	.type	InterleaveIterable2_B_product_otherIterable2U,@function
InterleaveIterable2_B_product_otherIterable2U: # @InterleaveIterable2_B_product_otherIterable2U
# %bb.0:
	movq	280(%rdi), %rax
	retq
.Lfunc_end549:
	.size	InterleaveIterable2_B_product_otherIterable2U, .Lfunc_end549-InterleaveIterable2_B_product_otherIterable2U
                                        # -- End function
	.globl	InterleaveIterable2_init_firstIterable2T_secondIterable2T # -- Begin function InterleaveIterable2_init_firstIterable2T_secondIterable2T
	.p2align	4, 0x90
	.type	InterleaveIterable2_init_firstIterable2T_secondIterable2T,@function
InterleaveIterable2_init_firstIterable2T_secondIterable2T: # @InterleaveIterable2_init_firstIterable2T_secondIterable2T
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	pushq	%rax
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rsi, %rbx
	movq	%rdi, %r12
	movq	128(%rsp), %rax
	movq	%rax, (%rsp)                    # 8-byte Spill
	movq	136(%rsp), %r15
	movq	120(%rsp), %r13
	movq	96(%rsp), %rdx
	movq	104(%rsp), %rcx
	movq	88(%rsp), %rsi
	movq	40(%rdi), %rax
	movabsq	$-6258231685215461775, %rdi     # imm = 0xA9264B7098A35E71
	imulq	8(%r12), %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%r12), %r8
	movslq	(%rax,%r8,4), %rbp
	movq	40(%rsi), %rax
	movabsq	$5693646204635713916, %r14      # imm = 0x4F03E50E9010117C
	movq	8(%rsi), %rdi
	imulq	%r14, %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%rsi), %r8
	movl	(%rax,%r8,4), %r8d
	movq	8(%r12,%rbp,8), %rax
	movq	%rbx, %rdi
	callq	*8(%rax)
	movq	40(%r13), %rax
	imulq	8(%r13), %r14
	movq	%r14, %rcx
	shrq	$32, %rcx
	xorq	%r14, %rcx
	andq	16(%r13), %rcx
	movl	(%rax,%rcx,4), %r8d
	movq	16(%r12,%rbp,8), %rax
	movq	8(%rax), %rax
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movq	(%rsp), %rdx                    # 8-byte Reload
	movq	%r15, %rcx
	addq	$8, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	jmpq	*%rax                           # TAILCALL
.Lfunc_end550:
	.size	InterleaveIterable2_init_firstIterable2T_secondIterable2T, .Lfunc_end550-InterleaveIterable2_init_firstIterable2T_secondIterable2T
	.cfi_endproc
                                        # -- End function
	.globl	InterleaveIterable2_iterator_   # -- Begin function InterleaveIterable2_iterator_
	.p2align	4, 0x90
	.type	InterleaveIterable2_iterator_,@function
InterleaveIterable2_iterator_:          # @InterleaveIterable2_iterator_
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$440, %rsp                      # imm = 0x1B8
	.cfi_def_cfa_offset 496
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rdx, %r15
	movq	%rdx, 24(%rsp)                  # 8-byte Spill
	movq	%rdi, 144(%rsp)                 # 8-byte Spill
	movq	40(%rsi), %rax
	movabsq	$-6258231685215461775, %rcx     # imm = 0xA9264B7098A35E71
	imulq	8(%rsi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rsi), %rdx
	movslq	(%rax,%rdx,4), %rax
	movq	%rax, 40(%rsp)                  # 8-byte Spill
	movq	8(%rsi,%rax,8), %rax
	movq	%rsi, %r14
	movq	%rsi, 16(%rsp)                  # 8-byte Spill
	leaq	280(%rsp), %rdi
	movq	%r15, %rsi
	callq	*(%rax)
	movslq	304(%rsp), %rbx
	movq	296(%rsp), %r13
	movq	280(%rsp), %rbp
	movq	288(%rsp), %r12
	movq	%r15, %rdi
	movq	40(%rsp), %r15                  # 8-byte Reload
	callq	*(%r14,%r15,8)
	movq	%rsp, %r8
	movq	%rbp, %rdi
	movq	%r12, %rsi
	movq	%r13, %rdx
	movl	%ebx, %ecx
	movq	%r8, %r14
	callq	*8(%rbp,%rbx,8)
	leaq	408(%rsp), %rdi
	movq	%rbp, %rsi
	movq	%r12, %rdx
	movq	%r13, %rcx
	movl	%ebx, %r8d
	movq	%rbp, %r9
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	%r15, %r14
	movq	16(%rsp), %r15                  # 8-byte Reload
	movq	16(%r15,%r14,8), %rax
	leaq	248(%rsp), %rdi
	movq	24(%rsp), %r12                  # 8-byte Reload
	movq	%r12, %rsi
	callq	*(%rax)
	movslq	272(%rsp), %rbx
	movq	264(%rsp), %rax
	movq	%rax, 8(%rsp)                   # 8-byte Spill
	movq	248(%rsp), %r13
	movq	256(%rsp), %rbp
	movq	%r12, %rdi
	callq	*(%r15,%r14,8)
	movq	%r14, %r12
	movq	%r13, %rdi
	movq	%rbp, %rsi
	movq	8(%rsp), %r15                   # 8-byte Reload
	movq	%r15, %rdx
	movl	%ebx, %ecx
	movq	%rsp, %r14
	movq	%r14, %r8
	callq	*8(%r13,%rbx,8)
	leaq	376(%rsp), %rdi
	movq	%r13, %rsi
	movq	%rbp, %rdx
	movq	%r15, %rcx
	movl	%ebx, %r8d
	movq	%r13, %r9
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	24(%rsp), %r15                  # 8-byte Reload
	movq	%r15, %rdi
	movq	16(%rsp), %r14                  # 8-byte Reload
	callq	*(%r14,%r12,8)
	movq	%rax, %rbx
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	movq	%rsi, 120(%rsp)                 # 8-byte Spill
	movl	$80, %edi
	callq	bump_malloc_inner@PLT
	movq	%rbx, (%rax)
	movq	InterleaveIterator2@GOTPCREL(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 56(%rsp)
	movl	$9, 72(%rsp)
	movq	8(%r14,%r12,8), %rax
	leaq	216(%rsp), %rdi
	movq	%r15, %rsi
	callq	*(%rax)
	movslq	240(%rsp), %rbx
	movq	232(%rsp), %r14
	movq	216(%rsp), %r13
	movq	224(%rsp), %rbp
	movq	%r15, %rdi
	movq	16(%rsp), %rax                  # 8-byte Reload
	callq	*(%rax,%r12,8)
	movq	%r13, %rdi
	movq	%rbp, %rsi
	movq	%r14, %rdx
	movl	%ebx, %ecx
	movq	%rsp, %r15
	movq	%r15, %r8
	callq	*8(%r13,%rbx,8)
	leaq	344(%rsp), %rdi
	movq	%r13, %rsi
	movq	%rbp, %rdx
	movq	%r14, %rcx
	movl	%ebx, %r8d
	movq	%r13, %r9
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	360(%rsp), %rax
	movq	%rax, 136(%rsp)                 # 8-byte Spill
	movq	344(%rsp), %rax
	movq	%rax, 8(%rsp)                   # 8-byte Spill
	movq	352(%rsp), %rax
	movq	%rax, 128(%rsp)                 # 8-byte Spill
	movq	16(%rsp), %r14                  # 8-byte Reload
	movq	16(%r14,%r12,8), %rax
	leaq	184(%rsp), %rdi
	movq	24(%rsp), %r15                  # 8-byte Reload
	movq	%r15, %rsi
	callq	*(%rax)
	movslq	208(%rsp), %rbx
	movq	200(%rsp), %rax
	movq	%rax, 32(%rsp)                  # 8-byte Spill
	movq	184(%rsp), %r13
	movq	192(%rsp), %rbp
	movq	%r15, %rdi
	callq	*(%r14,%r12,8)
	movq	%r13, %rdi
	movq	%rbp, %rsi
	movq	32(%rsp), %r12                  # 8-byte Reload
	movq	%r12, %rdx
	movl	%ebx, %ecx
	movq	%rsp, %r15
	movq	%r15, %r8
	callq	*8(%r13,%rbx,8)
	leaq	312(%rsp), %rdi
	movq	%r13, %rsi
	movq	%rbp, %rdx
	movq	%r12, %rcx
	movl	%ebx, %r8d
	movq	%r13, %r9
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	328(%rsp), %rax
	movq	%rax, 32(%rsp)                  # 8-byte Spill
	movq	312(%rsp), %r12
	movq	320(%rsp), %rax
	movq	%rax, 112(%rsp)                 # 8-byte Spill
	movq	40(%r12), %rax
	movabsq	$4189192806087951739, %rdi      # imm = 0x3A2300A96E7E857B
	movq	8(%r12), %rcx
	imulq	%rdi, %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%r12), %rdx
	movq	8(%rsp), %r15                   # 8-byte Reload
	movq	40(%r15), %rcx
	movq	8(%r15), %rsi
	imulq	%rdi, %rsi
	movq	%rsi, %rdi
	shrq	$32, %rdi
	xorq	%rsi, %rdi
	andq	16(%r15), %rdi
	movl	(%rcx,%rdi,4), %ecx
	movq	%rcx, 104(%rsp)                 # 8-byte Spill
	movl	(%rax,%rdx,4), %eax
	movq	%rax, 96(%rsp)                  # 8-byte Spill
	movq	48(%rsp), %rbx
	movq	56(%rsp), %r13
	movq	64(%rsp), %rax
	movq	%rax, 88(%rsp)                  # 8-byte Spill
	movslq	72(%rsp), %rax
	movq	%rax, 80(%rsp)                  # 8-byte Spill
	movq	24(%rsp), %rdi                  # 8-byte Reload
	movq	40(%rsp), %rax                  # 8-byte Reload
	callq	*(%r14,%rax,8)
	movq	%rax, %r14
	movl	$24, %edi
	movq	120(%rsp), %rbp                 # 8-byte Reload
	movq	%rbp, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r15
	movq	%r14, 8(%rax)
	movq	$0, 16(%rax)
	movq	Iterator2@GOTPCREL(%rip), %rax
	movq	%rax, (%r15)
	movl	$24, %edi
	movq	%rbp, %rsi
	callq	bump_malloc_inner@PLT
	movq	%r14, 8(%rax)
	movq	$0, 16(%rax)
	movq	Iterator2@GOTPCREL(%rip), %rcx
	movq	%rcx, (%rax)
	movq	%r15, 168(%rsp)
	movq	%rax, 176(%rsp)
	movq	80(%rsp), %rbp                  # 8-byte Reload
	movq	32(%rbx,%rbp,8), %rax
	movq	8(%rsp), %r15                   # 8-byte Reload
	movq	%r15, 152(%rsp)
	movq	%r12, 160(%rsp)
	leaq	152(%rsp), %r8
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movq	88(%rsp), %r14                  # 8-byte Reload
	movq	%r14, %rdx
	movl	%ebp, %ecx
	callq	*%rax
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	leaq	176(%rsp), %r10
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movq	%r14, %rdx
	movl	%ebp, %ecx
	movq	%rbx, %r8
	movq	%r13, %r9
	pushq	104(%rsp)                       # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	48(%rsp)                        # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	136(%rsp)                       # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	pushq	144(%rsp)                       # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	184(%rsp)                       # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	184(%rsp)                       # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$96, %rsp
	.cfi_adjust_cfa_offset -96
	movq	48(%rsp), %r8
	movq	56(%rsp), %rcx
	movq	64(%rsp), %rdx
	movq	40(%r8), %rsi
	movabsq	$4189192806087951739, %rax      # imm = 0x3A2300A96E7E857B
	imulq	8(%r8), %rax
	movq	%rax, %rdi
	shrq	$32, %rdi
	xorq	%rax, %rdi
	andq	16(%r8), %rdi
	movl	(%rsi,%rdi,4), %esi
	movq	144(%rsp), %rax                 # 8-byte Reload
	movq	%rdx, 16(%rax)
	movq	%rcx, 8(%rax)
	movq	%r8, (%rax)
	movl	%esi, 24(%rax)
	addq	$440, %rsp                      # imm = 0x1B8
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end551:
	.size	InterleaveIterable2_iterator_, .Lfunc_end551-InterleaveIterable2_iterator_
	.cfi_endproc
                                        # -- End function
	.globl	_size_InterleaveIterator2       # -- Begin function _size_InterleaveIterator2
	.p2align	4, 0x90
	.type	_size_InterleaveIterator2,@function
_size_InterleaveIterator2:              # @_size_InterleaveIterator2
# %bb.0:
	movl	$80, %eax
	movl	$8, %edx
	retq
.Lfunc_end552:
	.size	_size_InterleaveIterator2, .Lfunc_end552-_size_InterleaveIterator2
                                        # -- End function
	.globl	InterleaveIterator2_field_InterleaveIterator2_0 # -- Begin function InterleaveIterator2_field_InterleaveIterator2_0
	.p2align	4, 0x90
	.type	InterleaveIterator2_field_InterleaveIterator2_0,@function
InterleaveIterator2_field_InterleaveIterator2_0: # @InterleaveIterator2_field_InterleaveIterator2_0
# %bb.0:
	movq	(%rdi), %rax
	retq
.Lfunc_end553:
	.size	InterleaveIterator2_field_InterleaveIterator2_0, .Lfunc_end553-InterleaveIterator2_field_InterleaveIterator2_0
                                        # -- End function
	.globl	InterleaveIterator2_B_init_firstIterator2T_secondIterator2T # -- Begin function InterleaveIterator2_B_init_firstIterator2T_secondIterator2T
	.p2align	4, 0x90
	.type	InterleaveIterator2_B_init_firstIterator2T_secondIterator2T,@function
InterleaveIterator2_B_init_firstIterator2T_secondIterator2T: # @InterleaveIterator2_B_init_firstIterator2T_secondIterator2T
# %bb.0:
	movq	120(%rdi), %rax
	retq
.Lfunc_end554:
	.size	InterleaveIterator2_B_init_firstIterator2T_secondIterator2T, .Lfunc_end554-InterleaveIterator2_B_init_firstIterator2T_secondIterator2T
                                        # -- End function
	.globl	InterleaveIterator2_B_next_     # -- Begin function InterleaveIterator2_B_next_
	.p2align	4, 0x90
	.type	InterleaveIterator2_B_next_,@function
InterleaveIterator2_B_next_:            # @InterleaveIterator2_B_next_
# %bb.0:
	movq	128(%rdi), %rax
	retq
.Lfunc_end555:
	.size	InterleaveIterator2_B_next_, .Lfunc_end555-InterleaveIterator2_B_next_
                                        # -- End function
	.globl	InterleaveIterator2_init_firstIterator2T_secondIterator2T # -- Begin function InterleaveIterator2_init_firstIterator2T_secondIterator2T
	.p2align	4, 0x90
	.type	InterleaveIterator2_init_firstIterator2T_secondIterator2T,@function
InterleaveIterator2_init_firstIterator2T_secondIterator2T: # @InterleaveIterator2_init_firstIterator2T_secondIterator2T
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	pushq	%rax
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movq	128(%rsp), %rax
	movq	%rax, (%rsp)                    # 8-byte Spill
	movq	136(%rsp), %r12
	movq	120(%rsp), %r13
	movq	96(%rsp), %rdx
	movq	104(%rsp), %rcx
	movq	88(%rsp), %rsi
	movq	40(%rdi), %rax
	movabsq	$6709847746581360093, %rdi      # imm = 0x5D1E2AF9A7EFEDDD
	imulq	8(%r14), %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%r14), %r8
	movslq	(%rax,%r8,4), %rbp
	movq	40(%rsi), %rax
	movabsq	$4189192806087951739, %r15      # imm = 0x3A2300A96E7E857B
	movq	8(%rsi), %rdi
	imulq	%r15, %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%rsi), %r8
	movl	(%rax,%r8,4), %r8d
	movq	8(%r14,%rbp,8), %rax
	movq	%rbx, %rdi
	callq	*8(%rax)
	movq	40(%r13), %rax
	imulq	8(%r13), %r15
	movq	%r15, %rcx
	shrq	$32, %rcx
	xorq	%r15, %rcx
	andq	16(%r13), %rcx
	movl	(%rax,%rcx,4), %r8d
	movq	16(%r14,%rbp,8), %rax
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movq	(%rsp), %rdx                    # 8-byte Reload
	movq	%r12, %rcx
	callq	*8(%rax)
	movq	24(%r14,%rbp,8), %rax
	movq	8(%rax), %rax
	movq	%rbx, %rdi
	movl	$1, %esi
	addq	$8, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	jmpq	*%rax                           # TAILCALL
.Lfunc_end556:
	.size	InterleaveIterator2_init_firstIterator2T_secondIterator2T, .Lfunc_end556-InterleaveIterator2_init_firstIterator2T_secondIterator2T
	.cfi_endproc
                                        # -- End function
	.globl	InterleaveIterator2_next_       # -- Begin function InterleaveIterator2_next_
	.p2align	4, 0x90
	.type	InterleaveIterator2_next_,@function
InterleaveIterator2_next_:              # @InterleaveIterator2_next_
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$120, %rsp
	.cfi_def_cfa_offset 176
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rdx, %r13
	movq	%rdx, 16(%rsp)                  # 8-byte Spill
	movq	%rsi, %r14
	movq	%rdi, 24(%rsp)                  # 8-byte Spill
	movq	40(%rsi), %rax
	movabsq	$6709847746581360093, %rcx      # imm = 0x5D1E2AF9A7EFEDDD
	imulq	8(%rsi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rsi), %rdx
	movslq	(%rax,%rdx,4), %r15
	leaq	(%rsi,%r15,8), %rbx
	movq	24(%rsi,%r15,8), %rax
	movq	%r13, %rdi
	callq	*(%rax)
	movq	24(%r14,%r15,8), %rcx
	xorb	$1, %al
	movzbl	%al, %esi
	movl	%esi, %r12d
	andl	$1, %r12d
	movq	%r13, %rdi
	callq	*8(%rcx)
	movq	8(%rbx,%r12,8), %rax
	leaq	32(%rsp), %rdi
	movq	%r13, %rsi
	callq	*(%rax)
	movslq	56(%rsp), %r12
	movq	48(%rsp), %r13
	movq	32(%rsp), %rbp
	movq	40(%rsp), %rbx
	movq	16(%rsp), %rdi                  # 8-byte Reload
	callq	*(%r14,%r15,8)
	leaq	8(%rsp), %r14
	movq	%rbp, %rdi
	movq	%rbx, %rsi
	movq	%r13, %rdx
	movl	%r12d, %ecx
	movq	%r14, %r8
	callq	*8(%rbp,%r12,8)
	leaq	64(%rsp), %rdi
	movq	%rbp, %rsi
	movq	%rbx, %rdx
	movq	%r13, %rcx
	movl	%r12d, %r8d
	movq	%rbp, %r9
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	88(%rsp), %rdi
	movl	96(%rsp), %ecx
	movq	64(%rsp), %rdx
	movq	80(%rsp), %rsi
	movq	24(%rsp), %rax                  # 8-byte Reload
	movq	%rdx, (%rax)
	movl	%ecx, 32(%rax)
	movq	%rsi, 16(%rax)
	movq	%rdi, 24(%rax)
	addq	$120, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end557:
	.size	InterleaveIterator2_next_, .Lfunc_end557-InterleaveIterator2_next_
	.cfi_endproc
                                        # -- End function
	.globl	InterleaveIterator2_getter_on_first # -- Begin function InterleaveIterator2_getter_on_first
	.p2align	4, 0x90
	.type	InterleaveIterator2_getter_on_first,@function
InterleaveIterator2_getter_on_first:    # @InterleaveIterator2_getter_on_first
# %bb.0:
	movzbl	72(%rdi), %eax
	retq
.Lfunc_end558:
	.size	InterleaveIterator2_getter_on_first, .Lfunc_end558-InterleaveIterator2_getter_on_first
                                        # -- End function
	.globl	InterleaveIterator2_setter_on_first # -- Begin function InterleaveIterator2_setter_on_first
	.p2align	4, 0x90
	.type	InterleaveIterator2_setter_on_first,@function
InterleaveIterator2_setter_on_first:    # @InterleaveIterator2_setter_on_first
# %bb.0:
	andl	$1, %esi
	movb	%sil, 72(%rdi)
	retq
.Lfunc_end559:
	.size	InterleaveIterator2_setter_on_first, .Lfunc_end559-InterleaveIterator2_setter_on_first
                                        # -- End function
	.globl	InterleaveIterator2_getter_second # -- Begin function InterleaveIterator2_getter_second
	.p2align	4, 0x90
	.type	InterleaveIterator2_getter_second,@function
InterleaveIterator2_getter_second:      # @InterleaveIterator2_getter_second
# %bb.0:
	movq	%rdi, %rax
	movq	40(%rsi), %rcx
	movq	48(%rsi), %rdx
	movq	56(%rsi), %rdi
	movl	64(%rsi), %esi
	movl	%esi, 24(%rax)
	movq	%rdi, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	retq
.Lfunc_end560:
	.size	InterleaveIterator2_getter_second, .Lfunc_end560-InterleaveIterator2_getter_second
                                        # -- End function
	.globl	InterleaveIterator2_setter_second # -- Begin function InterleaveIterator2_setter_second
	.p2align	4, 0x90
	.type	InterleaveIterator2_setter_second,@function
InterleaveIterator2_setter_second:      # @InterleaveIterator2_setter_second
# %bb.0:
	movq	%rsi, 40(%rdi)
	movq	%rdx, 48(%rdi)
	movq	%rcx, 56(%rdi)
	movl	%r8d, 64(%rdi)
	retq
.Lfunc_end561:
	.size	InterleaveIterator2_setter_second, .Lfunc_end561-InterleaveIterator2_setter_second
                                        # -- End function
	.globl	InterleaveIterator2_getter_first # -- Begin function InterleaveIterator2_getter_first
	.p2align	4, 0x90
	.type	InterleaveIterator2_getter_first,@function
InterleaveIterator2_getter_first:       # @InterleaveIterator2_getter_first
# %bb.0:
	movq	%rdi, %rax
	movq	8(%rsi), %rcx
	movq	16(%rsi), %rdx
	movq	24(%rsi), %rdi
	movl	32(%rsi), %esi
	movl	%esi, 24(%rax)
	movq	%rdi, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	retq
.Lfunc_end562:
	.size	InterleaveIterator2_getter_first, .Lfunc_end562-InterleaveIterator2_getter_first
                                        # -- End function
	.globl	InterleaveIterator2_setter_first # -- Begin function InterleaveIterator2_setter_first
	.p2align	4, 0x90
	.type	InterleaveIterator2_setter_first,@function
InterleaveIterator2_setter_first:       # @InterleaveIterator2_setter_first
# %bb.0:
	movq	%rsi, 8(%rdi)
	movq	%rdx, 16(%rdi)
	movq	%rcx, 24(%rdi)
	movl	%r8d, 32(%rdi)
	retq
.Lfunc_end563:
	.size	InterleaveIterator2_setter_first, .Lfunc_end563-InterleaveIterator2_setter_first
                                        # -- End function
	.globl	InterleaveIterable2_getter_second # -- Begin function InterleaveIterable2_getter_second
	.p2align	4, 0x90
	.type	InterleaveIterable2_getter_second,@function
InterleaveIterable2_getter_second:      # @InterleaveIterable2_getter_second
# %bb.0:
	movq	%rdi, %rax
	movq	40(%rsi), %rcx
	movq	48(%rsi), %rdx
	movq	56(%rsi), %rdi
	movl	64(%rsi), %esi
	movl	%esi, 24(%rax)
	movq	%rdi, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	retq
.Lfunc_end564:
	.size	InterleaveIterable2_getter_second, .Lfunc_end564-InterleaveIterable2_getter_second
                                        # -- End function
	.globl	InterleaveIterable2_setter_second # -- Begin function InterleaveIterable2_setter_second
	.p2align	4, 0x90
	.type	InterleaveIterable2_setter_second,@function
InterleaveIterable2_setter_second:      # @InterleaveIterable2_setter_second
# %bb.0:
	movq	%rsi, 40(%rdi)
	movq	%rdx, 48(%rdi)
	movq	%rcx, 56(%rdi)
	movl	%r8d, 64(%rdi)
	retq
.Lfunc_end565:
	.size	InterleaveIterable2_setter_second, .Lfunc_end565-InterleaveIterable2_setter_second
                                        # -- End function
	.globl	InterleaveIterable2_getter_first # -- Begin function InterleaveIterable2_getter_first
	.p2align	4, 0x90
	.type	InterleaveIterable2_getter_first,@function
InterleaveIterable2_getter_first:       # @InterleaveIterable2_getter_first
# %bb.0:
	movq	%rdi, %rax
	movq	8(%rsi), %rcx
	movq	16(%rsi), %rdx
	movq	24(%rsi), %rdi
	movl	32(%rsi), %esi
	movl	%esi, 24(%rax)
	movq	%rdi, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	retq
.Lfunc_end566:
	.size	InterleaveIterable2_getter_first, .Lfunc_end566-InterleaveIterable2_getter_first
                                        # -- End function
	.globl	InterleaveIterable2_setter_first # -- Begin function InterleaveIterable2_setter_first
	.p2align	4, 0x90
	.type	InterleaveIterable2_setter_first,@function
InterleaveIterable2_setter_first:       # @InterleaveIterable2_setter_first
# %bb.0:
	movq	%rsi, 8(%rdi)
	movq	%rdx, 16(%rdi)
	movq	%rcx, 24(%rdi)
	movl	%r8d, 32(%rdi)
	retq
.Lfunc_end567:
	.size	InterleaveIterable2_setter_first, .Lfunc_end567-InterleaveIterable2_setter_first
                                        # -- End function
	.globl	_size_ChainIterable2            # -- Begin function _size_ChainIterable2
	.p2align	4, 0x90
	.type	_size_ChainIterable2,@function
_size_ChainIterable2:                   # @_size_ChainIterable2
# %bb.0:
	movl	$72, %eax
	movl	$8, %edx
	retq
.Lfunc_end568:
	.size	_size_ChainIterable2, .Lfunc_end568-_size_ChainIterable2
                                        # -- End function
	.globl	ChainIterable2_field_ChainIterable2_0 # -- Begin function ChainIterable2_field_ChainIterable2_0
	.p2align	4, 0x90
	.type	ChainIterable2_field_ChainIterable2_0,@function
ChainIterable2_field_ChainIterable2_0:  # @ChainIterable2_field_ChainIterable2_0
# %bb.0:
	movq	(%rdi), %rax
	retq
.Lfunc_end569:
	.size	ChainIterable2_field_ChainIterable2_0, .Lfunc_end569-ChainIterable2_field_ChainIterable2_0
                                        # -- End function
	.globl	ChainIterable2_B_init_firstIterable2T_secondIterable2T # -- Begin function ChainIterable2_B_init_firstIterable2T_secondIterable2T
	.p2align	4, 0x90
	.type	ChainIterable2_B_init_firstIterable2T_secondIterable2T,@function
ChainIterable2_B_init_firstIterable2T_secondIterable2T: # @ChainIterable2_B_init_firstIterable2T_secondIterable2T
# %bb.0:
	movq	192(%rdi), %rax
	retq
.Lfunc_end570:
	.size	ChainIterable2_B_init_firstIterable2T_secondIterable2T, .Lfunc_end570-ChainIterable2_B_init_firstIterable2T_secondIterable2T
                                        # -- End function
	.globl	ChainIterable2_B_iterator_      # -- Begin function ChainIterable2_B_iterator_
	.p2align	4, 0x90
	.type	ChainIterable2_B_iterator_,@function
ChainIterable2_B_iterator_:             # @ChainIterable2_B_iterator_
# %bb.0:
	movq	200(%rdi), %rax
	retq
.Lfunc_end571:
	.size	ChainIterable2_B_iterator_, .Lfunc_end571-ChainIterable2_B_iterator_
                                        # -- End function
	.globl	ChainIterable2_B_each_fFunctionT_to_Nothing # -- Begin function ChainIterable2_B_each_fFunctionT_to_Nothing
	.p2align	4, 0x90
	.type	ChainIterable2_B_each_fFunctionT_to_Nothing,@function
ChainIterable2_B_each_fFunctionT_to_Nothing: # @ChainIterable2_B_each_fFunctionT_to_Nothing
# %bb.0:
	movq	208(%rdi), %rax
	retq
.Lfunc_end572:
	.size	ChainIterable2_B_each_fFunctionT_to_Nothing, .Lfunc_end572-ChainIterable2_B_each_fFunctionT_to_Nothing
                                        # -- End function
	.globl	ChainIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T # -- Begin function ChainIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T
	.p2align	4, 0x90
	.type	ChainIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T,@function
ChainIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T: # @ChainIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T
# %bb.0:
	movq	216(%rdi), %rax
	retq
.Lfunc_end573:
	.size	ChainIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, .Lfunc_end573-ChainIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T
                                        # -- End function
	.globl	ChainIterable2_B_all_fFunctionT_to_Ptri1 # -- Begin function ChainIterable2_B_all_fFunctionT_to_Ptri1
	.p2align	4, 0x90
	.type	ChainIterable2_B_all_fFunctionT_to_Ptri1,@function
ChainIterable2_B_all_fFunctionT_to_Ptri1: # @ChainIterable2_B_all_fFunctionT_to_Ptri1
# %bb.0:
	movq	224(%rdi), %rax
	retq
.Lfunc_end574:
	.size	ChainIterable2_B_all_fFunctionT_to_Ptri1, .Lfunc_end574-ChainIterable2_B_all_fFunctionT_to_Ptri1
                                        # -- End function
	.globl	ChainIterable2_B_any_fFunctionT_to_Ptri1 # -- Begin function ChainIterable2_B_any_fFunctionT_to_Ptri1
	.p2align	4, 0x90
	.type	ChainIterable2_B_any_fFunctionT_to_Ptri1,@function
ChainIterable2_B_any_fFunctionT_to_Ptri1: # @ChainIterable2_B_any_fFunctionT_to_Ptri1
# %bb.0:
	movq	232(%rdi), %rax
	retq
.Lfunc_end575:
	.size	ChainIterable2_B_any_fFunctionT_to_Ptri1, .Lfunc_end575-ChainIterable2_B_any_fFunctionT_to_Ptri1
                                        # -- End function
	.globl	ChainIterable2_B_map_fFunctionT_to_U # -- Begin function ChainIterable2_B_map_fFunctionT_to_U
	.p2align	4, 0x90
	.type	ChainIterable2_B_map_fFunctionT_to_U,@function
ChainIterable2_B_map_fFunctionT_to_U:   # @ChainIterable2_B_map_fFunctionT_to_U
# %bb.0:
	movq	240(%rdi), %rax
	retq
.Lfunc_end576:
	.size	ChainIterable2_B_map_fFunctionT_to_U, .Lfunc_end576-ChainIterable2_B_map_fFunctionT_to_U
                                        # -- End function
	.globl	ChainIterable2_B_filter_fFunctionT_to_Ptri1 # -- Begin function ChainIterable2_B_filter_fFunctionT_to_Ptri1
	.p2align	4, 0x90
	.type	ChainIterable2_B_filter_fFunctionT_to_Ptri1,@function
ChainIterable2_B_filter_fFunctionT_to_Ptri1: # @ChainIterable2_B_filter_fFunctionT_to_Ptri1
# %bb.0:
	movq	248(%rdi), %rax
	retq
.Lfunc_end577:
	.size	ChainIterable2_B_filter_fFunctionT_to_Ptri1, .Lfunc_end577-ChainIterable2_B_filter_fFunctionT_to_Ptri1
                                        # -- End function
	.globl	ChainIterable2_B_chain_otherIterable2T # -- Begin function ChainIterable2_B_chain_otherIterable2T
	.p2align	4, 0x90
	.type	ChainIterable2_B_chain_otherIterable2T,@function
ChainIterable2_B_chain_otherIterable2T: # @ChainIterable2_B_chain_otherIterable2T
# %bb.0:
	movq	256(%rdi), %rax
	retq
.Lfunc_end578:
	.size	ChainIterable2_B_chain_otherIterable2T, .Lfunc_end578-ChainIterable2_B_chain_otherIterable2T
                                        # -- End function
	.globl	ChainIterable2_B_interleave_otherIterable2T # -- Begin function ChainIterable2_B_interleave_otherIterable2T
	.p2align	4, 0x90
	.type	ChainIterable2_B_interleave_otherIterable2T,@function
ChainIterable2_B_interleave_otherIterable2T: # @ChainIterable2_B_interleave_otherIterable2T
# %bb.0:
	movq	264(%rdi), %rax
	retq
.Lfunc_end579:
	.size	ChainIterable2_B_interleave_otherIterable2T, .Lfunc_end579-ChainIterable2_B_interleave_otherIterable2T
                                        # -- End function
	.globl	ChainIterable2_B_zip_otherIterable2U # -- Begin function ChainIterable2_B_zip_otherIterable2U
	.p2align	4, 0x90
	.type	ChainIterable2_B_zip_otherIterable2U,@function
ChainIterable2_B_zip_otherIterable2U:   # @ChainIterable2_B_zip_otherIterable2U
# %bb.0:
	movq	272(%rdi), %rax
	retq
.Lfunc_end580:
	.size	ChainIterable2_B_zip_otherIterable2U, .Lfunc_end580-ChainIterable2_B_zip_otherIterable2U
                                        # -- End function
	.globl	ChainIterable2_B_product_otherIterable2U # -- Begin function ChainIterable2_B_product_otherIterable2U
	.p2align	4, 0x90
	.type	ChainIterable2_B_product_otherIterable2U,@function
ChainIterable2_B_product_otherIterable2U: # @ChainIterable2_B_product_otherIterable2U
# %bb.0:
	movq	280(%rdi), %rax
	retq
.Lfunc_end581:
	.size	ChainIterable2_B_product_otherIterable2U, .Lfunc_end581-ChainIterable2_B_product_otherIterable2U
                                        # -- End function
	.globl	ChainIterable2_init_firstIterable2T_secondIterable2T # -- Begin function ChainIterable2_init_firstIterable2T_secondIterable2T
	.p2align	4, 0x90
	.type	ChainIterable2_init_firstIterable2T_secondIterable2T,@function
ChainIterable2_init_firstIterable2T_secondIterable2T: # @ChainIterable2_init_firstIterable2T_secondIterable2T
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	pushq	%rax
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rsi, %rbx
	movq	%rdi, %r12
	movq	128(%rsp), %rax
	movq	%rax, (%rsp)                    # 8-byte Spill
	movq	136(%rsp), %r15
	movq	120(%rsp), %r13
	movq	96(%rsp), %rdx
	movq	104(%rsp), %rcx
	movq	88(%rsp), %rsi
	movq	40(%rdi), %rax
	movabsq	$-5233298072945030060, %rdi     # imm = 0xB75F97213E600C54
	imulq	8(%r12), %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%r12), %r8
	movslq	(%rax,%r8,4), %rbp
	movq	40(%rsi), %rax
	movabsq	$5693646204635713916, %r14      # imm = 0x4F03E50E9010117C
	movq	8(%rsi), %rdi
	imulq	%r14, %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%rsi), %r8
	movl	(%rax,%r8,4), %r8d
	movq	8(%r12,%rbp,8), %rax
	movq	%rbx, %rdi
	callq	*8(%rax)
	movq	40(%r13), %rax
	imulq	8(%r13), %r14
	movq	%r14, %rcx
	shrq	$32, %rcx
	xorq	%r14, %rcx
	andq	16(%r13), %rcx
	movl	(%rax,%rcx,4), %r8d
	movq	16(%r12,%rbp,8), %rax
	movq	8(%rax), %rax
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movq	(%rsp), %rdx                    # 8-byte Reload
	movq	%r15, %rcx
	addq	$8, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	jmpq	*%rax                           # TAILCALL
.Lfunc_end582:
	.size	ChainIterable2_init_firstIterable2T_secondIterable2T, .Lfunc_end582-ChainIterable2_init_firstIterable2T_secondIterable2T
	.cfi_endproc
                                        # -- End function
	.globl	ChainIterable2_iterator_        # -- Begin function ChainIterable2_iterator_
	.p2align	4, 0x90
	.type	ChainIterable2_iterator_,@function
ChainIterable2_iterator_:               # @ChainIterable2_iterator_
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$440, %rsp                      # imm = 0x1B8
	.cfi_def_cfa_offset 496
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rdx, %r15
	movq	%rdx, 24(%rsp)                  # 8-byte Spill
	movq	%rdi, 144(%rsp)                 # 8-byte Spill
	movq	40(%rsi), %rax
	movabsq	$-5233298072945030060, %rcx     # imm = 0xB75F97213E600C54
	imulq	8(%rsi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rsi), %rdx
	movslq	(%rax,%rdx,4), %rax
	movq	%rax, 40(%rsp)                  # 8-byte Spill
	movq	8(%rsi,%rax,8), %rax
	movq	%rsi, %r14
	movq	%rsi, 16(%rsp)                  # 8-byte Spill
	leaq	280(%rsp), %rdi
	movq	%r15, %rsi
	callq	*(%rax)
	movslq	304(%rsp), %rbx
	movq	296(%rsp), %r13
	movq	280(%rsp), %rbp
	movq	288(%rsp), %r12
	movq	%r15, %rdi
	movq	40(%rsp), %r15                  # 8-byte Reload
	callq	*(%r14,%r15,8)
	movq	%rsp, %r8
	movq	%rbp, %rdi
	movq	%r12, %rsi
	movq	%r13, %rdx
	movl	%ebx, %ecx
	movq	%r8, %r14
	callq	*8(%rbp,%rbx,8)
	leaq	408(%rsp), %rdi
	movq	%rbp, %rsi
	movq	%r12, %rdx
	movq	%r13, %rcx
	movl	%ebx, %r8d
	movq	%rbp, %r9
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	%r15, %r14
	movq	16(%rsp), %r15                  # 8-byte Reload
	movq	16(%r15,%r14,8), %rax
	leaq	248(%rsp), %rdi
	movq	24(%rsp), %r12                  # 8-byte Reload
	movq	%r12, %rsi
	callq	*(%rax)
	movslq	272(%rsp), %rbx
	movq	264(%rsp), %rax
	movq	%rax, 8(%rsp)                   # 8-byte Spill
	movq	248(%rsp), %r13
	movq	256(%rsp), %rbp
	movq	%r12, %rdi
	callq	*(%r15,%r14,8)
	movq	%r14, %r12
	movq	%r13, %rdi
	movq	%rbp, %rsi
	movq	8(%rsp), %r15                   # 8-byte Reload
	movq	%r15, %rdx
	movl	%ebx, %ecx
	movq	%rsp, %r14
	movq	%r14, %r8
	callq	*8(%r13,%rbx,8)
	leaq	376(%rsp), %rdi
	movq	%r13, %rsi
	movq	%rbp, %rdx
	movq	%r15, %rcx
	movl	%ebx, %r8d
	movq	%r13, %r9
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	24(%rsp), %r15                  # 8-byte Reload
	movq	%r15, %rdi
	movq	16(%rsp), %r14                  # 8-byte Reload
	callq	*(%r14,%r12,8)
	movq	%rax, %rbx
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	movq	%rsi, 120(%rsp)                 # 8-byte Spill
	movl	$80, %edi
	callq	bump_malloc_inner@PLT
	movq	%rbx, (%rax)
	movq	ChainIterator2@GOTPCREL(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 56(%rsp)
	movl	$9, 72(%rsp)
	movq	8(%r14,%r12,8), %rax
	leaq	216(%rsp), %rdi
	movq	%r15, %rsi
	callq	*(%rax)
	movslq	240(%rsp), %rbx
	movq	232(%rsp), %r14
	movq	216(%rsp), %r13
	movq	224(%rsp), %rbp
	movq	%r15, %rdi
	movq	16(%rsp), %rax                  # 8-byte Reload
	callq	*(%rax,%r12,8)
	movq	%r13, %rdi
	movq	%rbp, %rsi
	movq	%r14, %rdx
	movl	%ebx, %ecx
	movq	%rsp, %r15
	movq	%r15, %r8
	callq	*8(%r13,%rbx,8)
	leaq	344(%rsp), %rdi
	movq	%r13, %rsi
	movq	%rbp, %rdx
	movq	%r14, %rcx
	movl	%ebx, %r8d
	movq	%r13, %r9
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	360(%rsp), %rax
	movq	%rax, 136(%rsp)                 # 8-byte Spill
	movq	344(%rsp), %rax
	movq	%rax, 8(%rsp)                   # 8-byte Spill
	movq	352(%rsp), %rax
	movq	%rax, 128(%rsp)                 # 8-byte Spill
	movq	16(%rsp), %r14                  # 8-byte Reload
	movq	16(%r14,%r12,8), %rax
	leaq	184(%rsp), %rdi
	movq	24(%rsp), %r15                  # 8-byte Reload
	movq	%r15, %rsi
	callq	*(%rax)
	movslq	208(%rsp), %rbx
	movq	200(%rsp), %rax
	movq	%rax, 32(%rsp)                  # 8-byte Spill
	movq	184(%rsp), %r13
	movq	192(%rsp), %rbp
	movq	%r15, %rdi
	callq	*(%r14,%r12,8)
	movq	%r13, %rdi
	movq	%rbp, %rsi
	movq	32(%rsp), %r12                  # 8-byte Reload
	movq	%r12, %rdx
	movl	%ebx, %ecx
	movq	%rsp, %r15
	movq	%r15, %r8
	callq	*8(%r13,%rbx,8)
	leaq	312(%rsp), %rdi
	movq	%r13, %rsi
	movq	%rbp, %rdx
	movq	%r12, %rcx
	movl	%ebx, %r8d
	movq	%r13, %r9
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	328(%rsp), %rax
	movq	%rax, 32(%rsp)                  # 8-byte Spill
	movq	312(%rsp), %r12
	movq	320(%rsp), %rax
	movq	%rax, 112(%rsp)                 # 8-byte Spill
	movq	40(%r12), %rax
	movabsq	$4189192806087951739, %rdi      # imm = 0x3A2300A96E7E857B
	movq	8(%r12), %rcx
	imulq	%rdi, %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%r12), %rdx
	movq	8(%rsp), %r15                   # 8-byte Reload
	movq	40(%r15), %rcx
	movq	8(%r15), %rsi
	imulq	%rdi, %rsi
	movq	%rsi, %rdi
	shrq	$32, %rdi
	xorq	%rsi, %rdi
	andq	16(%r15), %rdi
	movl	(%rcx,%rdi,4), %ecx
	movq	%rcx, 104(%rsp)                 # 8-byte Spill
	movl	(%rax,%rdx,4), %eax
	movq	%rax, 96(%rsp)                  # 8-byte Spill
	movq	48(%rsp), %rbx
	movq	56(%rsp), %r13
	movq	64(%rsp), %rax
	movq	%rax, 88(%rsp)                  # 8-byte Spill
	movslq	72(%rsp), %rax
	movq	%rax, 80(%rsp)                  # 8-byte Spill
	movq	24(%rsp), %rdi                  # 8-byte Reload
	movq	40(%rsp), %rax                  # 8-byte Reload
	callq	*(%r14,%rax,8)
	movq	%rax, %r14
	movl	$24, %edi
	movq	120(%rsp), %rbp                 # 8-byte Reload
	movq	%rbp, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r15
	movq	%r14, 8(%rax)
	movq	$0, 16(%rax)
	movq	Iterator2@GOTPCREL(%rip), %rax
	movq	%rax, (%r15)
	movl	$24, %edi
	movq	%rbp, %rsi
	callq	bump_malloc_inner@PLT
	movq	%r14, 8(%rax)
	movq	$0, 16(%rax)
	movq	Iterator2@GOTPCREL(%rip), %rcx
	movq	%rcx, (%rax)
	movq	%r15, 168(%rsp)
	movq	%rax, 176(%rsp)
	movq	80(%rsp), %rbp                  # 8-byte Reload
	movq	32(%rbx,%rbp,8), %rax
	movq	8(%rsp), %r15                   # 8-byte Reload
	movq	%r15, 152(%rsp)
	movq	%r12, 160(%rsp)
	leaq	152(%rsp), %r8
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movq	88(%rsp), %r14                  # 8-byte Reload
	movq	%r14, %rdx
	movl	%ebp, %ecx
	callq	*%rax
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	leaq	176(%rsp), %r10
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movq	%r14, %rdx
	movl	%ebp, %ecx
	movq	%rbx, %r8
	movq	%r13, %r9
	pushq	104(%rsp)                       # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	48(%rsp)                        # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	136(%rsp)                       # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	pushq	144(%rsp)                       # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	184(%rsp)                       # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	184(%rsp)                       # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$96, %rsp
	.cfi_adjust_cfa_offset -96
	movq	48(%rsp), %r8
	movq	56(%rsp), %rcx
	movq	64(%rsp), %rdx
	movq	40(%r8), %rsi
	movabsq	$4189192806087951739, %rax      # imm = 0x3A2300A96E7E857B
	imulq	8(%r8), %rax
	movq	%rax, %rdi
	shrq	$32, %rdi
	xorq	%rax, %rdi
	andq	16(%r8), %rdi
	movl	(%rsi,%rdi,4), %esi
	movq	144(%rsp), %rax                 # 8-byte Reload
	movq	%rdx, 16(%rax)
	movq	%rcx, 8(%rax)
	movq	%r8, (%rax)
	movl	%esi, 24(%rax)
	addq	$440, %rsp                      # imm = 0x1B8
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end583:
	.size	ChainIterable2_iterator_, .Lfunc_end583-ChainIterable2_iterator_
	.cfi_endproc
                                        # -- End function
	.globl	_size_ChainIterator2            # -- Begin function _size_ChainIterator2
	.p2align	4, 0x90
	.type	_size_ChainIterator2,@function
_size_ChainIterator2:                   # @_size_ChainIterator2
# %bb.0:
	movl	$80, %eax
	movl	$8, %edx
	retq
.Lfunc_end584:
	.size	_size_ChainIterator2, .Lfunc_end584-_size_ChainIterator2
                                        # -- End function
	.globl	ChainIterator2_field_ChainIterator2_0 # -- Begin function ChainIterator2_field_ChainIterator2_0
	.p2align	4, 0x90
	.type	ChainIterator2_field_ChainIterator2_0,@function
ChainIterator2_field_ChainIterator2_0:  # @ChainIterator2_field_ChainIterator2_0
# %bb.0:
	movq	(%rdi), %rax
	retq
.Lfunc_end585:
	.size	ChainIterator2_field_ChainIterator2_0, .Lfunc_end585-ChainIterator2_field_ChainIterator2_0
                                        # -- End function
	.globl	ChainIterator2_B_init_firstIterator2T_secondIterator2T # -- Begin function ChainIterator2_B_init_firstIterator2T_secondIterator2T
	.p2align	4, 0x90
	.type	ChainIterator2_B_init_firstIterator2T_secondIterator2T,@function
ChainIterator2_B_init_firstIterator2T_secondIterator2T: # @ChainIterator2_B_init_firstIterator2T_secondIterator2T
# %bb.0:
	movq	120(%rdi), %rax
	retq
.Lfunc_end586:
	.size	ChainIterator2_B_init_firstIterator2T_secondIterator2T, .Lfunc_end586-ChainIterator2_B_init_firstIterator2T_secondIterator2T
                                        # -- End function
	.globl	ChainIterator2_B_next_          # -- Begin function ChainIterator2_B_next_
	.p2align	4, 0x90
	.type	ChainIterator2_B_next_,@function
ChainIterator2_B_next_:                 # @ChainIterator2_B_next_
# %bb.0:
	movq	128(%rdi), %rax
	retq
.Lfunc_end587:
	.size	ChainIterator2_B_next_, .Lfunc_end587-ChainIterator2_B_next_
                                        # -- End function
	.globl	ChainIterator2_init_firstIterator2T_secondIterator2T # -- Begin function ChainIterator2_init_firstIterator2T_secondIterator2T
	.p2align	4, 0x90
	.type	ChainIterator2_init_firstIterator2T_secondIterator2T,@function
ChainIterator2_init_firstIterator2T_secondIterator2T: # @ChainIterator2_init_firstIterator2T_secondIterator2T
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	pushq	%rax
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movq	128(%rsp), %rax
	movq	%rax, (%rsp)                    # 8-byte Spill
	movq	136(%rsp), %r12
	movq	120(%rsp), %r13
	movq	96(%rsp), %rdx
	movq	104(%rsp), %rcx
	movq	88(%rsp), %rsi
	movq	40(%rdi), %rax
	movabsq	$-228267985060461774, %rdi      # imm = 0xFCD5077A1CE08332
	imulq	8(%r14), %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%r14), %r8
	movslq	(%rax,%r8,4), %rbp
	movq	40(%rsi), %rax
	movabsq	$4189192806087951739, %r15      # imm = 0x3A2300A96E7E857B
	movq	8(%rsi), %rdi
	imulq	%r15, %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%rsi), %r8
	movl	(%rax,%r8,4), %r8d
	movq	8(%r14,%rbp,8), %rax
	movq	%rbx, %rdi
	callq	*8(%rax)
	movq	40(%r13), %rax
	imulq	8(%r13), %r15
	movq	%r15, %rcx
	shrq	$32, %rcx
	xorq	%r15, %rcx
	andq	16(%r13), %rcx
	movl	(%rax,%rcx,4), %r8d
	movq	16(%r14,%rbp,8), %rax
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movq	(%rsp), %rdx                    # 8-byte Reload
	movq	%r12, %rcx
	callq	*8(%rax)
	movq	24(%r14,%rbp,8), %rax
	movq	8(%rax), %rax
	movq	%rbx, %rdi
	movl	$1, %esi
	addq	$8, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	jmpq	*%rax                           # TAILCALL
.Lfunc_end588:
	.size	ChainIterator2_init_firstIterator2T_secondIterator2T, .Lfunc_end588-ChainIterator2_init_firstIterator2T_secondIterator2T
	.cfi_endproc
                                        # -- End function
	.globl	ChainIterator2_next_            # -- Begin function ChainIterator2_next_
	.p2align	4, 0x90
	.type	ChainIterator2_next_,@function
ChainIterator2_next_:                   # @ChainIterator2_next_
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$200, %rsp
	.cfi_def_cfa_offset 256
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rdx, %rbx
	movq	%rsi, %r14
	movq	%rdi, 24(%rsp)                  # 8-byte Spill
	movq	40(%rsi), %rax
	movabsq	$-228267985060461774, %rcx      # imm = 0xFCD5077A1CE08332
	imulq	8(%rsi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rsi), %rdx
	movslq	(%rax,%rdx,4), %r15
	movq	24(%rsi,%r15,8), %rax
	movq	%rbx, %rdi
	callq	*(%rax)
	testb	$1, %al
	je	.LBB589_3
# %bb.1:
	movq	8(%r14,%r15,8), %rax
	leaq	64(%rsp), %rdi
	movq	%rbx, %rsi
	callq	*(%rax)
	movslq	88(%rsp), %r12
	movq	80(%rsp), %r13
	movq	64(%rsp), %rbp
	movq	%rbx, %rdi
	movq	72(%rsp), %rbx
	movq	%rdi, 16(%rsp)                  # 8-byte Spill
	callq	*(%r14,%r15,8)
	leaq	8(%rsp), %r8
	movq	%rbp, %rdi
	movq	%rbx, %rsi
	movq	%r13, %rdx
	movl	%r12d, %ecx
	callq	*8(%rbp,%r12,8)
	leaq	144(%rsp), %rdi
	movq	%rbp, %rsi
	movq	%rbx, %rdx
	movq	%r13, %rcx
	movl	%r12d, %r8d
	movq	%rbp, %r9
	leaq	8(%rsp), %r10
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	144(%rsp), %r9
	cmpq	nil_typ@GOTPCREL(%rip), %r9
	setne	%cl
	testq	%r9, %r9
	setne	%dl
	testb	%dl, %cl
	je	.LBB589_2
# %bb.5:
	movq	168(%rsp), %rcx
	movq	160(%rsp), %rdx
	movq	40(%r9), %rsi
	movabsq	$3084208142191802847, %rdi      # imm = 0x2ACD4EF6E8B5B9DF
	imulq	8(%r9), %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%r9), %r8
	movl	(%rsi,%r8,4), %esi
	jmp	.LBB589_4
.LBB589_2:
	movq	24(%r14,%r15,8), %rax
	movq	16(%rsp), %rbx                  # 8-byte Reload
	movq	%rbx, %rdi
	xorl	%esi, %esi
	callq	*8(%rax)
.LBB589_3:
	movq	16(%r14,%r15,8), %rax
	leaq	32(%rsp), %rdi
	movq	%rbx, %rsi
	callq	*(%rax)
	movq	%rbx, %rdi
	movslq	56(%rsp), %rbx
	movq	48(%rsp), %r12
	movq	32(%rsp), %r13
	movq	40(%rsp), %rbp
	callq	*(%r14,%r15,8)
	leaq	8(%rsp), %r14
	movq	%r13, %rdi
	movq	%rbp, %rsi
	movq	%r12, %rdx
	movl	%ebx, %ecx
	movq	%r14, %r8
	callq	*8(%r13,%rbx,8)
	leaq	96(%rsp), %rdi
	movq	%r13, %rsi
	movq	%rbp, %rdx
	movq	%r12, %rcx
	movl	%ebx, %r8d
	movq	%r13, %r9
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movl	128(%rsp), %esi
	movq	96(%rsp), %r9
	movq	112(%rsp), %rdx
	movq	120(%rsp), %rcx
.LBB589_4:
	movq	24(%rsp), %rax                  # 8-byte Reload
	movq	%rdx, 16(%rax)
	movq	%r9, (%rax)
	movq	%rcx, 24(%rax)
	movl	%esi, 32(%rax)
	addq	$200, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end589:
	.size	ChainIterator2_next_, .Lfunc_end589-ChainIterator2_next_
	.cfi_endproc
                                        # -- End function
	.globl	ChainIterator2_getter_on_first  # -- Begin function ChainIterator2_getter_on_first
	.p2align	4, 0x90
	.type	ChainIterator2_getter_on_first,@function
ChainIterator2_getter_on_first:         # @ChainIterator2_getter_on_first
# %bb.0:
	movzbl	72(%rdi), %eax
	retq
.Lfunc_end590:
	.size	ChainIterator2_getter_on_first, .Lfunc_end590-ChainIterator2_getter_on_first
                                        # -- End function
	.globl	ChainIterator2_setter_on_first  # -- Begin function ChainIterator2_setter_on_first
	.p2align	4, 0x90
	.type	ChainIterator2_setter_on_first,@function
ChainIterator2_setter_on_first:         # @ChainIterator2_setter_on_first
# %bb.0:
	andl	$1, %esi
	movb	%sil, 72(%rdi)
	retq
.Lfunc_end591:
	.size	ChainIterator2_setter_on_first, .Lfunc_end591-ChainIterator2_setter_on_first
                                        # -- End function
	.globl	ChainIterator2_getter_second    # -- Begin function ChainIterator2_getter_second
	.p2align	4, 0x90
	.type	ChainIterator2_getter_second,@function
ChainIterator2_getter_second:           # @ChainIterator2_getter_second
# %bb.0:
	movq	%rdi, %rax
	movq	40(%rsi), %rcx
	movq	48(%rsi), %rdx
	movq	56(%rsi), %rdi
	movl	64(%rsi), %esi
	movl	%esi, 24(%rax)
	movq	%rdi, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	retq
.Lfunc_end592:
	.size	ChainIterator2_getter_second, .Lfunc_end592-ChainIterator2_getter_second
                                        # -- End function
	.globl	ChainIterator2_setter_second    # -- Begin function ChainIterator2_setter_second
	.p2align	4, 0x90
	.type	ChainIterator2_setter_second,@function
ChainIterator2_setter_second:           # @ChainIterator2_setter_second
# %bb.0:
	movq	%rsi, 40(%rdi)
	movq	%rdx, 48(%rdi)
	movq	%rcx, 56(%rdi)
	movl	%r8d, 64(%rdi)
	retq
.Lfunc_end593:
	.size	ChainIterator2_setter_second, .Lfunc_end593-ChainIterator2_setter_second
                                        # -- End function
	.globl	ChainIterator2_getter_first     # -- Begin function ChainIterator2_getter_first
	.p2align	4, 0x90
	.type	ChainIterator2_getter_first,@function
ChainIterator2_getter_first:            # @ChainIterator2_getter_first
# %bb.0:
	movq	%rdi, %rax
	movq	8(%rsi), %rcx
	movq	16(%rsi), %rdx
	movq	24(%rsi), %rdi
	movl	32(%rsi), %esi
	movl	%esi, 24(%rax)
	movq	%rdi, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	retq
.Lfunc_end594:
	.size	ChainIterator2_getter_first, .Lfunc_end594-ChainIterator2_getter_first
                                        # -- End function
	.globl	ChainIterator2_setter_first     # -- Begin function ChainIterator2_setter_first
	.p2align	4, 0x90
	.type	ChainIterator2_setter_first,@function
ChainIterator2_setter_first:            # @ChainIterator2_setter_first
# %bb.0:
	movq	%rsi, 8(%rdi)
	movq	%rdx, 16(%rdi)
	movq	%rcx, 24(%rdi)
	movl	%r8d, 32(%rdi)
	retq
.Lfunc_end595:
	.size	ChainIterator2_setter_first, .Lfunc_end595-ChainIterator2_setter_first
                                        # -- End function
	.globl	ChainIterable2_getter_second    # -- Begin function ChainIterable2_getter_second
	.p2align	4, 0x90
	.type	ChainIterable2_getter_second,@function
ChainIterable2_getter_second:           # @ChainIterable2_getter_second
# %bb.0:
	movq	%rdi, %rax
	movq	40(%rsi), %rcx
	movq	48(%rsi), %rdx
	movq	56(%rsi), %rdi
	movl	64(%rsi), %esi
	movl	%esi, 24(%rax)
	movq	%rdi, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	retq
.Lfunc_end596:
	.size	ChainIterable2_getter_second, .Lfunc_end596-ChainIterable2_getter_second
                                        # -- End function
	.globl	ChainIterable2_setter_second    # -- Begin function ChainIterable2_setter_second
	.p2align	4, 0x90
	.type	ChainIterable2_setter_second,@function
ChainIterable2_setter_second:           # @ChainIterable2_setter_second
# %bb.0:
	movq	%rsi, 40(%rdi)
	movq	%rdx, 48(%rdi)
	movq	%rcx, 56(%rdi)
	movl	%r8d, 64(%rdi)
	retq
.Lfunc_end597:
	.size	ChainIterable2_setter_second, .Lfunc_end597-ChainIterable2_setter_second
                                        # -- End function
	.globl	ChainIterable2_getter_first     # -- Begin function ChainIterable2_getter_first
	.p2align	4, 0x90
	.type	ChainIterable2_getter_first,@function
ChainIterable2_getter_first:            # @ChainIterable2_getter_first
# %bb.0:
	movq	%rdi, %rax
	movq	8(%rsi), %rcx
	movq	16(%rsi), %rdx
	movq	24(%rsi), %rdi
	movl	32(%rsi), %esi
	movl	%esi, 24(%rax)
	movq	%rdi, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	retq
.Lfunc_end598:
	.size	ChainIterable2_getter_first, .Lfunc_end598-ChainIterable2_getter_first
                                        # -- End function
	.globl	ChainIterable2_setter_first     # -- Begin function ChainIterable2_setter_first
	.p2align	4, 0x90
	.type	ChainIterable2_setter_first,@function
ChainIterable2_setter_first:            # @ChainIterable2_setter_first
# %bb.0:
	movq	%rsi, 8(%rdi)
	movq	%rdx, 16(%rdi)
	movq	%rcx, 24(%rdi)
	movl	%r8d, 32(%rdi)
	retq
.Lfunc_end599:
	.size	ChainIterable2_setter_first, .Lfunc_end599-ChainIterable2_setter_first
                                        # -- End function
	.globl	_size_FilterIterable2           # -- Begin function _size_FilterIterable2
	.p2align	4, 0x90
	.type	_size_FilterIterable2,@function
_size_FilterIterable2:                  # @_size_FilterIterable2
# %bb.0:
	movl	$48, %eax
	movl	$8, %edx
	retq
.Lfunc_end600:
	.size	_size_FilterIterable2, .Lfunc_end600-_size_FilterIterable2
                                        # -- End function
	.globl	FilterIterable2_field_FilterIterable2_0 # -- Begin function FilterIterable2_field_FilterIterable2_0
	.p2align	4, 0x90
	.type	FilterIterable2_field_FilterIterable2_0,@function
FilterIterable2_field_FilterIterable2_0: # @FilterIterable2_field_FilterIterable2_0
# %bb.0:
	movq	(%rdi), %rax
	retq
.Lfunc_end601:
	.size	FilterIterable2_field_FilterIterable2_0, .Lfunc_end601-FilterIterable2_field_FilterIterable2_0
                                        # -- End function
	.globl	FilterIterable2_B_init_iterableIterable2T_fFunctionT_to_Ptri1 # -- Begin function FilterIterable2_B_init_iterableIterable2T_fFunctionT_to_Ptri1
	.p2align	4, 0x90
	.type	FilterIterable2_B_init_iterableIterable2T_fFunctionT_to_Ptri1,@function
FilterIterable2_B_init_iterableIterable2T_fFunctionT_to_Ptri1: # @FilterIterable2_B_init_iterableIterable2T_fFunctionT_to_Ptri1
# %bb.0:
	movq	192(%rdi), %rax
	retq
.Lfunc_end602:
	.size	FilterIterable2_B_init_iterableIterable2T_fFunctionT_to_Ptri1, .Lfunc_end602-FilterIterable2_B_init_iterableIterable2T_fFunctionT_to_Ptri1
                                        # -- End function
	.globl	FilterIterable2_B_iterator_     # -- Begin function FilterIterable2_B_iterator_
	.p2align	4, 0x90
	.type	FilterIterable2_B_iterator_,@function
FilterIterable2_B_iterator_:            # @FilterIterable2_B_iterator_
# %bb.0:
	movq	200(%rdi), %rax
	retq
.Lfunc_end603:
	.size	FilterIterable2_B_iterator_, .Lfunc_end603-FilterIterable2_B_iterator_
                                        # -- End function
	.globl	FilterIterable2_B_each_fFunctionT_to_Nothing # -- Begin function FilterIterable2_B_each_fFunctionT_to_Nothing
	.p2align	4, 0x90
	.type	FilterIterable2_B_each_fFunctionT_to_Nothing,@function
FilterIterable2_B_each_fFunctionT_to_Nothing: # @FilterIterable2_B_each_fFunctionT_to_Nothing
# %bb.0:
	movq	208(%rdi), %rax
	retq
.Lfunc_end604:
	.size	FilterIterable2_B_each_fFunctionT_to_Nothing, .Lfunc_end604-FilterIterable2_B_each_fFunctionT_to_Nothing
                                        # -- End function
	.globl	FilterIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T # -- Begin function FilterIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T
	.p2align	4, 0x90
	.type	FilterIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T,@function
FilterIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T: # @FilterIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T
# %bb.0:
	movq	216(%rdi), %rax
	retq
.Lfunc_end605:
	.size	FilterIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, .Lfunc_end605-FilterIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T
                                        # -- End function
	.globl	FilterIterable2_B_all_fFunctionT_to_Ptri1 # -- Begin function FilterIterable2_B_all_fFunctionT_to_Ptri1
	.p2align	4, 0x90
	.type	FilterIterable2_B_all_fFunctionT_to_Ptri1,@function
FilterIterable2_B_all_fFunctionT_to_Ptri1: # @FilterIterable2_B_all_fFunctionT_to_Ptri1
# %bb.0:
	movq	224(%rdi), %rax
	retq
.Lfunc_end606:
	.size	FilterIterable2_B_all_fFunctionT_to_Ptri1, .Lfunc_end606-FilterIterable2_B_all_fFunctionT_to_Ptri1
                                        # -- End function
	.globl	FilterIterable2_B_any_fFunctionT_to_Ptri1 # -- Begin function FilterIterable2_B_any_fFunctionT_to_Ptri1
	.p2align	4, 0x90
	.type	FilterIterable2_B_any_fFunctionT_to_Ptri1,@function
FilterIterable2_B_any_fFunctionT_to_Ptri1: # @FilterIterable2_B_any_fFunctionT_to_Ptri1
# %bb.0:
	movq	232(%rdi), %rax
	retq
.Lfunc_end607:
	.size	FilterIterable2_B_any_fFunctionT_to_Ptri1, .Lfunc_end607-FilterIterable2_B_any_fFunctionT_to_Ptri1
                                        # -- End function
	.globl	FilterIterable2_B_map_fFunctionT_to_U # -- Begin function FilterIterable2_B_map_fFunctionT_to_U
	.p2align	4, 0x90
	.type	FilterIterable2_B_map_fFunctionT_to_U,@function
FilterIterable2_B_map_fFunctionT_to_U:  # @FilterIterable2_B_map_fFunctionT_to_U
# %bb.0:
	movq	240(%rdi), %rax
	retq
.Lfunc_end608:
	.size	FilterIterable2_B_map_fFunctionT_to_U, .Lfunc_end608-FilterIterable2_B_map_fFunctionT_to_U
                                        # -- End function
	.globl	FilterIterable2_B_filter_fFunctionT_to_Ptri1 # -- Begin function FilterIterable2_B_filter_fFunctionT_to_Ptri1
	.p2align	4, 0x90
	.type	FilterIterable2_B_filter_fFunctionT_to_Ptri1,@function
FilterIterable2_B_filter_fFunctionT_to_Ptri1: # @FilterIterable2_B_filter_fFunctionT_to_Ptri1
# %bb.0:
	movq	248(%rdi), %rax
	retq
.Lfunc_end609:
	.size	FilterIterable2_B_filter_fFunctionT_to_Ptri1, .Lfunc_end609-FilterIterable2_B_filter_fFunctionT_to_Ptri1
                                        # -- End function
	.globl	FilterIterable2_B_chain_otherIterable2T # -- Begin function FilterIterable2_B_chain_otherIterable2T
	.p2align	4, 0x90
	.type	FilterIterable2_B_chain_otherIterable2T,@function
FilterIterable2_B_chain_otherIterable2T: # @FilterIterable2_B_chain_otherIterable2T
# %bb.0:
	movq	256(%rdi), %rax
	retq
.Lfunc_end610:
	.size	FilterIterable2_B_chain_otherIterable2T, .Lfunc_end610-FilterIterable2_B_chain_otherIterable2T
                                        # -- End function
	.globl	FilterIterable2_B_interleave_otherIterable2T # -- Begin function FilterIterable2_B_interleave_otherIterable2T
	.p2align	4, 0x90
	.type	FilterIterable2_B_interleave_otherIterable2T,@function
FilterIterable2_B_interleave_otherIterable2T: # @FilterIterable2_B_interleave_otherIterable2T
# %bb.0:
	movq	264(%rdi), %rax
	retq
.Lfunc_end611:
	.size	FilterIterable2_B_interleave_otherIterable2T, .Lfunc_end611-FilterIterable2_B_interleave_otherIterable2T
                                        # -- End function
	.globl	FilterIterable2_B_zip_otherIterable2U # -- Begin function FilterIterable2_B_zip_otherIterable2U
	.p2align	4, 0x90
	.type	FilterIterable2_B_zip_otherIterable2U,@function
FilterIterable2_B_zip_otherIterable2U:  # @FilterIterable2_B_zip_otherIterable2U
# %bb.0:
	movq	272(%rdi), %rax
	retq
.Lfunc_end612:
	.size	FilterIterable2_B_zip_otherIterable2U, .Lfunc_end612-FilterIterable2_B_zip_otherIterable2U
                                        # -- End function
	.globl	FilterIterable2_B_product_otherIterable2U # -- Begin function FilterIterable2_B_product_otherIterable2U
	.p2align	4, 0x90
	.type	FilterIterable2_B_product_otherIterable2U,@function
FilterIterable2_B_product_otherIterable2U: # @FilterIterable2_B_product_otherIterable2U
# %bb.0:
	movq	280(%rdi), %rax
	retq
.Lfunc_end613:
	.size	FilterIterable2_B_product_otherIterable2U, .Lfunc_end613-FilterIterable2_B_product_otherIterable2U
                                        # -- End function
	.globl	FilterIterable2_init_iterableIterable2T_fFunctionT_to_Ptri1 # -- Begin function FilterIterable2_init_iterableIterable2T_fFunctionT_to_Ptri1
	.p2align	4, 0x90
	.type	FilterIterable2_init_iterableIterable2T_fFunctionT_to_Ptri1,@function
FilterIterable2_init_iterableIterable2T_fFunctionT_to_Ptri1: # @FilterIterable2_init_iterableIterable2T_fFunctionT_to_Ptri1
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r12
	.cfi_def_cfa_offset 32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	pushq	%rax
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -40
	.cfi_offset %r12, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rsi, %rbx
	movq	%rdi, %r15
	movq	104(%rsp), %r14
	movq	80(%rsp), %rdx
	movq	88(%rsp), %rcx
	movq	72(%rsp), %rsi
	movq	40(%rdi), %rax
	movabsq	$1178467452958968374, %rdi      # imm = 0x105AC1E798FA8A36
	imulq	8(%r15), %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%r15), %r8
	movslq	(%rax,%r8,4), %r12
	movq	40(%rsi), %rax
	movabsq	$5693646204635713916, %rdi      # imm = 0x4F03E50E9010117C
	imulq	8(%rsi), %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%rsi), %r8
	movl	(%rax,%r8,4), %r8d
	movq	8(%r15,%r12,8), %rax
	movq	%rbx, %rdi
	callq	*8(%rax)
	movq	16(%r15,%r12,8), %rax
	movq	8(%rax), %rax
	movq	%rbx, %rdi
	movq	%r14, %rsi
	addq	$8, %rsp
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	jmpq	*%rax                           # TAILCALL
.Lfunc_end614:
	.size	FilterIterable2_init_iterableIterable2T_fFunctionT_to_Ptri1, .Lfunc_end614-FilterIterable2_init_iterableIterable2T_fFunctionT_to_Ptri1
	.cfi_endproc
                                        # -- End function
	.globl	FilterIterable2_iterator_       # -- Begin function FilterIterable2_iterator_
	.p2align	4, 0x90
	.type	FilterIterable2_iterator_,@function
FilterIterable2_iterator_:              # @FilterIterable2_iterator_
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$296, %rsp                      # imm = 0x128
	.cfi_def_cfa_offset 352
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rdx, %r14
	movq	%rdi, 128(%rsp)                 # 8-byte Spill
	movq	%rsi, %rdi
	movq	%rsi, 56(%rsp)                  # 8-byte Spill
	movq	40(%rsi), %rax
	movabsq	$1178467452958968374, %rcx      # imm = 0x105AC1E798FA8A36
	imulq	8(%rsi), %rcx
	movq	%rcx, %rsi
	shrq	$32, %rsi
	xorq	%rcx, %rsi
	andq	16(%rdi), %rsi
	movslq	(%rax,%rsi,4), %r15
	movq	8(%rdi,%r15,8), %rax
	leaq	200(%rsp), %rdi
	movq	%rdx, %rsi
	movq	%rdx, 16(%rsp)                  # 8-byte Spill
	callq	*(%rax)
	movslq	224(%rsp), %rbx
	movq	216(%rsp), %r12
	movq	200(%rsp), %rbp
	movq	208(%rsp), %r13
	movq	%r14, %rdi
	movq	56(%rsp), %r14                  # 8-byte Reload
	callq	*(%r14,%r15,8)
	leaq	8(%rsp), %r8
	movq	%rbp, %rdi
	movq	%r13, %rsi
	movq	%r12, %rdx
	movl	%ebx, %ecx
	callq	*8(%rbp,%rbx,8)
	leaq	264(%rsp), %rdi
	movq	%rbp, %rsi
	movq	%r13, %rdx
	movq	%r12, %rcx
	movl	%ebx, %r8d
	movq	%rbp, %r9
	leaq	8(%rsp), %r10
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	16(%r14,%r15,8), %rax
	movq	16(%rsp), %r12                  # 8-byte Reload
	movq	%r12, %rdi
	callq	*(%rax)
	movq	%r12, %rdi
	callq	*(%r14,%r15,8)
	movq	%r15, 64(%rsp)                  # 8-byte Spill
	movq	%rax, %rbx
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	movq	%rsi, 120(%rsp)                 # 8-byte Spill
	movl	$48, %edi
	callq	bump_malloc_inner@PLT
	movq	%rbx, (%rax)
	movq	FilterIterator2@GOTPCREL(%rip), %rcx
	movq	%rcx, 24(%rsp)
	movq	%rax, 32(%rsp)
	movl	$9, 48(%rsp)
	movq	8(%r14,%r15,8), %rax
	leaq	168(%rsp), %rdi
	movq	%r12, %rsi
	callq	*(%rax)
	movslq	192(%rsp), %rbx
	movq	184(%rsp), %r15
	movq	168(%rsp), %r13
	movq	176(%rsp), %rbp
	movq	%r12, %rdi
	movq	64(%rsp), %r12                  # 8-byte Reload
	callq	*(%r14,%r12,8)
	movq	%r13, %rdi
	movq	%rbp, %rsi
	movq	%r15, %rdx
	movl	%ebx, %ecx
	leaq	8(%rsp), %r8
	callq	*8(%r13,%rbx,8)
	leaq	232(%rsp), %rdi
	movq	%r13, %rsi
	movq	%rbp, %rdx
	movq	%r15, %rcx
	movl	%ebx, %r8d
	movq	%r13, %r9
	leaq	8(%rsp), %r10
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	248(%rsp), %rax
	movq	%rax, 112(%rsp)                 # 8-byte Spill
	movq	232(%rsp), %r13
	movq	240(%rsp), %rax
	movq	%rax, 104(%rsp)                 # 8-byte Spill
	movq	16(%r14,%r12,8), %rax
	movq	%r12, %r15
	movq	16(%rsp), %r12                  # 8-byte Reload
	movq	%r12, %rdi
	callq	*(%rax)
	movq	%rax, 96(%rsp)                  # 8-byte Spill
	movq	40(%r13), %rax
	movabsq	$4189192806087951739, %rdx      # imm = 0x3A2300A96E7E857B
	movq	8(%r13), %rcx
	imulq	%rdx, %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%r13), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	%rax, 88(%rsp)                  # 8-byte Spill
	movq	24(%rsp), %rbx
	movq	32(%rsp), %rax
	movq	%rax, 72(%rsp)                  # 8-byte Spill
	movq	40(%rsp), %rax
	movq	%rax, 80(%rsp)                  # 8-byte Spill
	movslq	48(%rsp), %rbp
	movq	%r12, %rdi
	callq	*(%r14,%r15,8)
	movq	%rax, %r14
	movl	$24, %edi
	movq	120(%rsp), %r12                 # 8-byte Reload
	movq	%r12, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r15
	movq	%r14, 8(%rax)
	movq	$0, 16(%rax)
	movq	Iterator2@GOTPCREL(%rip), %rax
	movq	%rax, (%r15)
	movl	$32, %edi
	movq	%r12, %rsi
	callq	bump_malloc_inner@PLT
	movq	%r14, 16(%rax)
	movq	_parameterization_Ptri1@GOTPCREL(%rip), %rcx
	movq	%rcx, 8(%rax)
	movq	$0, 24(%rax)
	movq	function_typ@GOTPCREL(%rip), %rcx
	movq	%rcx, (%rax)
	movq	%r15, 152(%rsp)
	movq	%rax, 160(%rsp)
	movq	24(%rbx,%rbp,8), %rax
	movq	%r13, 136(%rsp)
	movq	%rcx, 144(%rsp)
	leaq	136(%rsp), %r8
	movq	%rbx, %rdi
	movq	72(%rsp), %r15                  # 8-byte Reload
	movq	%r15, %rsi
	movq	80(%rsp), %r14                  # 8-byte Reload
	movq	%r14, %rdx
	movl	%ebp, %ecx
	callq	*%rax
	leaq	152(%rsp), %r10
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	movl	%ebp, %ecx
	movq	%rbx, %r8
	movq	%r15, %r9
	pushq	96(%rsp)                        # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	96(%rsp)                        # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	128(%rsp)                       # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	128(%rsp)                       # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$64, %rsp
	.cfi_adjust_cfa_offset -64
	movq	24(%rsp), %r8
	movq	32(%rsp), %rcx
	movq	40(%rsp), %rdx
	movq	40(%r8), %rsi
	movabsq	$4189192806087951739, %rax      # imm = 0x3A2300A96E7E857B
	imulq	8(%r8), %rax
	movq	%rax, %rdi
	shrq	$32, %rdi
	xorq	%rax, %rdi
	andq	16(%r8), %rdi
	movl	(%rsi,%rdi,4), %esi
	movq	128(%rsp), %rax                 # 8-byte Reload
	movq	%rdx, 16(%rax)
	movq	%rcx, 8(%rax)
	movq	%r8, (%rax)
	movl	%esi, 24(%rax)
	addq	$296, %rsp                      # imm = 0x128
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end615:
	.size	FilterIterable2_iterator_, .Lfunc_end615-FilterIterable2_iterator_
	.cfi_endproc
                                        # -- End function
	.globl	_size_FilterIterator2           # -- Begin function _size_FilterIterator2
	.p2align	4, 0x90
	.type	_size_FilterIterator2,@function
_size_FilterIterator2:                  # @_size_FilterIterator2
# %bb.0:
	movl	$48, %eax
	movl	$8, %edx
	retq
.Lfunc_end616:
	.size	_size_FilterIterator2, .Lfunc_end616-_size_FilterIterator2
                                        # -- End function
	.globl	FilterIterator2_field_FilterIterator2_0 # -- Begin function FilterIterator2_field_FilterIterator2_0
	.p2align	4, 0x90
	.type	FilterIterator2_field_FilterIterator2_0,@function
FilterIterator2_field_FilterIterator2_0: # @FilterIterator2_field_FilterIterator2_0
# %bb.0:
	movq	(%rdi), %rax
	retq
.Lfunc_end617:
	.size	FilterIterator2_field_FilterIterator2_0, .Lfunc_end617-FilterIterator2_field_FilterIterator2_0
                                        # -- End function
	.globl	FilterIterator2_B_init_iteratorIterator2T_fFunctionT_to_Ptri1 # -- Begin function FilterIterator2_B_init_iteratorIterator2T_fFunctionT_to_Ptri1
	.p2align	4, 0x90
	.type	FilterIterator2_B_init_iteratorIterator2T_fFunctionT_to_Ptri1,@function
FilterIterator2_B_init_iteratorIterator2T_fFunctionT_to_Ptri1: # @FilterIterator2_B_init_iteratorIterator2T_fFunctionT_to_Ptri1
# %bb.0:
	movq	112(%rdi), %rax
	retq
.Lfunc_end618:
	.size	FilterIterator2_B_init_iteratorIterator2T_fFunctionT_to_Ptri1, .Lfunc_end618-FilterIterator2_B_init_iteratorIterator2T_fFunctionT_to_Ptri1
                                        # -- End function
	.globl	FilterIterator2_B_next_         # -- Begin function FilterIterator2_B_next_
	.p2align	4, 0x90
	.type	FilterIterator2_B_next_,@function
FilterIterator2_B_next_:                # @FilterIterator2_B_next_
# %bb.0:
	movq	120(%rdi), %rax
	retq
.Lfunc_end619:
	.size	FilterIterator2_B_next_, .Lfunc_end619-FilterIterator2_B_next_
                                        # -- End function
	.globl	FilterIterator2_init_iteratorIterator2T_fFunctionT_to_Ptri1 # -- Begin function FilterIterator2_init_iteratorIterator2T_fFunctionT_to_Ptri1
	.p2align	4, 0x90
	.type	FilterIterator2_init_iteratorIterator2T_fFunctionT_to_Ptri1,@function
FilterIterator2_init_iteratorIterator2T_fFunctionT_to_Ptri1: # @FilterIterator2_init_iteratorIterator2T_fFunctionT_to_Ptri1
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r12
	.cfi_def_cfa_offset 32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	pushq	%rax
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -40
	.cfi_offset %r12, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rsi, %rbx
	movq	%rdi, %r15
	movq	104(%rsp), %r14
	movq	80(%rsp), %rdx
	movq	88(%rsp), %rcx
	movq	72(%rsp), %rsi
	movq	40(%rdi), %rax
	movabsq	$8213847504843366470, %rdi      # imm = 0x71FD72C96D6AE046
	imulq	8(%r15), %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%r15), %r8
	movslq	(%rax,%r8,4), %r12
	movq	40(%rsi), %rax
	movabsq	$4189192806087951739, %rdi      # imm = 0x3A2300A96E7E857B
	imulq	8(%rsi), %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%rsi), %r8
	movl	(%rax,%r8,4), %r8d
	movq	8(%r15,%r12,8), %rax
	movq	%rbx, %rdi
	callq	*8(%rax)
	movq	16(%r15,%r12,8), %rax
	movq	8(%rax), %rax
	movq	%rbx, %rdi
	movq	%r14, %rsi
	addq	$8, %rsp
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	jmpq	*%rax                           # TAILCALL
.Lfunc_end620:
	.size	FilterIterator2_init_iteratorIterator2T_fFunctionT_to_Ptri1, .Lfunc_end620-FilterIterator2_init_iteratorIterator2T_fFunctionT_to_Ptri1
	.cfi_endproc
                                        # -- End function
	.globl	FilterIterator2_next_           # -- Begin function FilterIterator2_next_
	.p2align	4, 0x90
	.type	FilterIterator2_next_,@function
FilterIterator2_next_:                  # @FilterIterator2_next_
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$232, %rsp
	.cfi_def_cfa_offset 288
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, 48(%rsp)                  # 8-byte Spill
	movq	40(%rsi), %rax
	movabsq	$8213847504843366470, %rcx      # imm = 0x71FD72C96D6AE046
	imulq	8(%rsi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rsi), %rdx
	movslq	(%rax,%rdx,4), %r12
	movq	8(%rsi,%r12,8), %rax
	leaq	96(%rsp), %rdi
	movq	%r14, %rsi
	callq	*(%rax)
	movslq	120(%rsp), %rbx
	movq	112(%rsp), %rax
	movq	%rax, 16(%rsp)                  # 8-byte Spill
	movq	96(%rsp), %r13
	movq	104(%rsp), %rbp
	movq	%r14, 40(%rsp)                  # 8-byte Spill
	movq	%r14, %rdi
	movq	%r12, 56(%rsp)                  # 8-byte Spill
	callq	*(%r15,%r12,8)
	leaq	8(%rsp), %r12
	movq	%r13, %rdi
	movq	%rbp, %rsi
	movq	16(%rsp), %r14                  # 8-byte Reload
	movq	%r14, %rdx
	movl	%ebx, %ecx
	movq	%r12, %r8
	callq	*8(%r13,%rbx,8)
	leaq	176(%rsp), %rdi
	movq	%r13, %rsi
	movq	%rbp, %rdx
	movq	%r14, %rcx
	movl	%ebx, %r8d
	movq	%r13, %r9
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	176(%rsp), %rax
	movq	nil_typ@GOTPCREL(%rip), %rbp
	cmpq	%rbp, %rax
	sete	%cl
	testq	%rax, %rax
	sete	%dl
	orb	%cl, %dl
	jne	.LBB621_1
# %bb.2:                                # %.lr.ph
	movq	200(%rsp), %rbx
	movq	192(%rsp), %r12
	movq	%rax, %rbp
	.p2align	4, 0x90
.LBB621_3:                              # =>This Inner Loop Header: Depth=1
	movq	40(%rbp), %rax
	movq	8(%rbp), %rcx
	movabsq	$3084208142191802847, %rdx      # imm = 0x2ACD4EF6E8B5B9DF
	imulq	%rdx, %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rbp), %rdx
	movl	(%rax,%rdx,4), %r14d
	movq	%r12, 32(%rsp)                  # 8-byte Spill
	movq	%rbx, 24(%rsp)                  # 8-byte Spill
	movq	56(%rsp), %r13                  # 8-byte Reload
	movq	16(%r15,%r13,8), %rax
	movq	40(%rsp), %rdi                  # 8-byte Reload
	callq	*(%rax)
	movq	%rbp, %rdi
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	%r14, 16(%rsp)                  # 8-byte Spill
	movq	%r14, %rcx
	callq	*%rax
	testb	$1, %al
	jne	.LBB621_7
# %bb.4:                                #   in Loop: Header=BB621_3 Depth=1
	movq	8(%r15,%r13,8), %rax
	leaq	64(%rsp), %rdi
	movq	40(%rsp), %r14                  # 8-byte Reload
	movq	%r14, %rsi
	callq	*(%rax)
	movslq	88(%rsp), %rbx
	movq	80(%rsp), %r12
	movq	64(%rsp), %rbp
	movq	%r14, %rdi
	movq	72(%rsp), %r14
	callq	*(%r15,%r13,8)
	movq	%rbp, %rdi
	movq	%r14, %rsi
	movq	%r12, %rdx
	movl	%ebx, %ecx
	leaq	8(%rsp), %r13
	movq	%r13, %r8
	callq	*8(%rbp,%rbx,8)
	leaq	128(%rsp), %rdi
	movq	%rbp, %rsi
	movq	%r14, %rdx
	movq	%r12, %rcx
	movl	%ebx, %r8d
	movq	%rbp, %r9
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	128(%rsp), %rbp
	cmpq	nil_typ@GOTPCREL(%rip), %rbp
	je	.LBB621_6
# %bb.5:                                #   in Loop: Header=BB621_3 Depth=1
	movq	152(%rsp), %rbx
	movq	144(%rsp), %r12
	testq	%rbp, %rbp
	jne	.LBB621_3
.LBB621_6:
	movq	nil_typ@GOTPCREL(%rip), %rbp
.LBB621_7:                              # %.loopexit
	movq	16(%rsp), %rcx                  # 8-byte Reload
	movq	32(%rsp), %rdx                  # 8-byte Reload
	movq	24(%rsp), %rsi                  # 8-byte Reload
	jmp	.LBB621_8
.LBB621_1:
	xorl	%ecx, %ecx
                                        # implicit-def: $rdx
                                        # implicit-def: $rsi
.LBB621_8:                              # %.loopexit
	movq	48(%rsp), %rax                  # 8-byte Reload
	movq	%rdx, 16(%rax)
	movq	%rbp, (%rax)
	movq	%rsi, 24(%rax)
	movl	%ecx, 32(%rax)
	addq	$232, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end621:
	.size	FilterIterator2_next_, .Lfunc_end621-FilterIterator2_next_
	.cfi_endproc
                                        # -- End function
	.globl	FilterIterator2_getter_f        # -- Begin function FilterIterator2_getter_f
	.p2align	4, 0x90
	.type	FilterIterator2_getter_f,@function
FilterIterator2_getter_f:               # @FilterIterator2_getter_f
# %bb.0:
	movq	40(%rdi), %rax
	retq
.Lfunc_end622:
	.size	FilterIterator2_getter_f, .Lfunc_end622-FilterIterator2_getter_f
                                        # -- End function
	.globl	FilterIterator2_setter_f        # -- Begin function FilterIterator2_setter_f
	.p2align	4, 0x90
	.type	FilterIterator2_setter_f,@function
FilterIterator2_setter_f:               # @FilterIterator2_setter_f
# %bb.0:
	movq	%rsi, 40(%rdi)
	retq
.Lfunc_end623:
	.size	FilterIterator2_setter_f, .Lfunc_end623-FilterIterator2_setter_f
                                        # -- End function
	.globl	FilterIterator2_getter_iterator # -- Begin function FilterIterator2_getter_iterator
	.p2align	4, 0x90
	.type	FilterIterator2_getter_iterator,@function
FilterIterator2_getter_iterator:        # @FilterIterator2_getter_iterator
# %bb.0:
	movq	%rdi, %rax
	movq	8(%rsi), %rcx
	movq	16(%rsi), %rdx
	movq	24(%rsi), %rdi
	movl	32(%rsi), %esi
	movl	%esi, 24(%rax)
	movq	%rdi, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	retq
.Lfunc_end624:
	.size	FilterIterator2_getter_iterator, .Lfunc_end624-FilterIterator2_getter_iterator
                                        # -- End function
	.globl	FilterIterator2_setter_iterator # -- Begin function FilterIterator2_setter_iterator
	.p2align	4, 0x90
	.type	FilterIterator2_setter_iterator,@function
FilterIterator2_setter_iterator:        # @FilterIterator2_setter_iterator
# %bb.0:
	movq	%rsi, 8(%rdi)
	movq	%rdx, 16(%rdi)
	movq	%rcx, 24(%rdi)
	movl	%r8d, 32(%rdi)
	retq
.Lfunc_end625:
	.size	FilterIterator2_setter_iterator, .Lfunc_end625-FilterIterator2_setter_iterator
                                        # -- End function
	.globl	FilterIterable2_getter_f        # -- Begin function FilterIterable2_getter_f
	.p2align	4, 0x90
	.type	FilterIterable2_getter_f,@function
FilterIterable2_getter_f:               # @FilterIterable2_getter_f
# %bb.0:
	movq	40(%rdi), %rax
	retq
.Lfunc_end626:
	.size	FilterIterable2_getter_f, .Lfunc_end626-FilterIterable2_getter_f
                                        # -- End function
	.globl	FilterIterable2_setter_f        # -- Begin function FilterIterable2_setter_f
	.p2align	4, 0x90
	.type	FilterIterable2_setter_f,@function
FilterIterable2_setter_f:               # @FilterIterable2_setter_f
# %bb.0:
	movq	%rsi, 40(%rdi)
	retq
.Lfunc_end627:
	.size	FilterIterable2_setter_f, .Lfunc_end627-FilterIterable2_setter_f
                                        # -- End function
	.globl	FilterIterable2_getter_iterable # -- Begin function FilterIterable2_getter_iterable
	.p2align	4, 0x90
	.type	FilterIterable2_getter_iterable,@function
FilterIterable2_getter_iterable:        # @FilterIterable2_getter_iterable
# %bb.0:
	movq	%rdi, %rax
	movq	8(%rsi), %rcx
	movq	16(%rsi), %rdx
	movq	24(%rsi), %rdi
	movl	32(%rsi), %esi
	movl	%esi, 24(%rax)
	movq	%rdi, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	retq
.Lfunc_end628:
	.size	FilterIterable2_getter_iterable, .Lfunc_end628-FilterIterable2_getter_iterable
                                        # -- End function
	.globl	FilterIterable2_setter_iterable # -- Begin function FilterIterable2_setter_iterable
	.p2align	4, 0x90
	.type	FilterIterable2_setter_iterable,@function
FilterIterable2_setter_iterable:        # @FilterIterable2_setter_iterable
# %bb.0:
	movq	%rsi, 8(%rdi)
	movq	%rdx, 16(%rdi)
	movq	%rcx, 24(%rdi)
	movl	%r8d, 32(%rdi)
	retq
.Lfunc_end629:
	.size	FilterIterable2_setter_iterable, .Lfunc_end629-FilterIterable2_setter_iterable
                                        # -- End function
	.globl	_size_MapIterable2              # -- Begin function _size_MapIterable2
	.p2align	4, 0x90
	.type	_size_MapIterable2,@function
_size_MapIterable2:                     # @_size_MapIterable2
# %bb.0:
	movl	$56, %eax
	movl	$8, %edx
	retq
.Lfunc_end630:
	.size	_size_MapIterable2, .Lfunc_end630-_size_MapIterable2
                                        # -- End function
	.globl	MapIterable2_field_MapIterable2_0 # -- Begin function MapIterable2_field_MapIterable2_0
	.p2align	4, 0x90
	.type	MapIterable2_field_MapIterable2_0,@function
MapIterable2_field_MapIterable2_0:      # @MapIterable2_field_MapIterable2_0
# %bb.0:
	movq	(%rdi), %rax
	retq
.Lfunc_end631:
	.size	MapIterable2_field_MapIterable2_0, .Lfunc_end631-MapIterable2_field_MapIterable2_0
                                        # -- End function
	.globl	MapIterable2_field_MapIterable2_1 # -- Begin function MapIterable2_field_MapIterable2_1
	.p2align	4, 0x90
	.type	MapIterable2_field_MapIterable2_1,@function
MapIterable2_field_MapIterable2_1:      # @MapIterable2_field_MapIterable2_1
# %bb.0:
	movq	8(%rdi), %rax
	retq
.Lfunc_end632:
	.size	MapIterable2_field_MapIterable2_1, .Lfunc_end632-MapIterable2_field_MapIterable2_1
                                        # -- End function
	.globl	MapIterable2_B_init_iterableIterable2T_fFunctionT_to_U # -- Begin function MapIterable2_B_init_iterableIterable2T_fFunctionT_to_U
	.p2align	4, 0x90
	.type	MapIterable2_B_init_iterableIterable2T_fFunctionT_to_U,@function
MapIterable2_B_init_iterableIterable2T_fFunctionT_to_U: # @MapIterable2_B_init_iterableIterable2T_fFunctionT_to_U
# %bb.0:
	movq	200(%rdi), %rax
	retq
.Lfunc_end633:
	.size	MapIterable2_B_init_iterableIterable2T_fFunctionT_to_U, .Lfunc_end633-MapIterable2_B_init_iterableIterable2T_fFunctionT_to_U
                                        # -- End function
	.globl	MapIterable2_B_iterator_        # -- Begin function MapIterable2_B_iterator_
	.p2align	4, 0x90
	.type	MapIterable2_B_iterator_,@function
MapIterable2_B_iterator_:               # @MapIterable2_B_iterator_
# %bb.0:
	movq	208(%rdi), %rax
	retq
.Lfunc_end634:
	.size	MapIterable2_B_iterator_, .Lfunc_end634-MapIterable2_B_iterator_
                                        # -- End function
	.globl	MapIterable2_B_each_fFunctionT_to_Nothing # -- Begin function MapIterable2_B_each_fFunctionT_to_Nothing
	.p2align	4, 0x90
	.type	MapIterable2_B_each_fFunctionT_to_Nothing,@function
MapIterable2_B_each_fFunctionT_to_Nothing: # @MapIterable2_B_each_fFunctionT_to_Nothing
# %bb.0:
	movq	216(%rdi), %rax
	retq
.Lfunc_end635:
	.size	MapIterable2_B_each_fFunctionT_to_Nothing, .Lfunc_end635-MapIterable2_B_each_fFunctionT_to_Nothing
                                        # -- End function
	.globl	MapIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T # -- Begin function MapIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T
	.p2align	4, 0x90
	.type	MapIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T,@function
MapIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T: # @MapIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T
# %bb.0:
	movq	224(%rdi), %rax
	retq
.Lfunc_end636:
	.size	MapIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, .Lfunc_end636-MapIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T
                                        # -- End function
	.globl	MapIterable2_B_all_fFunctionT_to_Ptri1 # -- Begin function MapIterable2_B_all_fFunctionT_to_Ptri1
	.p2align	4, 0x90
	.type	MapIterable2_B_all_fFunctionT_to_Ptri1,@function
MapIterable2_B_all_fFunctionT_to_Ptri1: # @MapIterable2_B_all_fFunctionT_to_Ptri1
# %bb.0:
	movq	232(%rdi), %rax
	retq
.Lfunc_end637:
	.size	MapIterable2_B_all_fFunctionT_to_Ptri1, .Lfunc_end637-MapIterable2_B_all_fFunctionT_to_Ptri1
                                        # -- End function
	.globl	MapIterable2_B_any_fFunctionT_to_Ptri1 # -- Begin function MapIterable2_B_any_fFunctionT_to_Ptri1
	.p2align	4, 0x90
	.type	MapIterable2_B_any_fFunctionT_to_Ptri1,@function
MapIterable2_B_any_fFunctionT_to_Ptri1: # @MapIterable2_B_any_fFunctionT_to_Ptri1
# %bb.0:
	movq	240(%rdi), %rax
	retq
.Lfunc_end638:
	.size	MapIterable2_B_any_fFunctionT_to_Ptri1, .Lfunc_end638-MapIterable2_B_any_fFunctionT_to_Ptri1
                                        # -- End function
	.globl	MapIterable2_B_map_fFunctionT_to_U # -- Begin function MapIterable2_B_map_fFunctionT_to_U
	.p2align	4, 0x90
	.type	MapIterable2_B_map_fFunctionT_to_U,@function
MapIterable2_B_map_fFunctionT_to_U:     # @MapIterable2_B_map_fFunctionT_to_U
# %bb.0:
	movq	248(%rdi), %rax
	retq
.Lfunc_end639:
	.size	MapIterable2_B_map_fFunctionT_to_U, .Lfunc_end639-MapIterable2_B_map_fFunctionT_to_U
                                        # -- End function
	.globl	MapIterable2_B_filter_fFunctionT_to_Ptri1 # -- Begin function MapIterable2_B_filter_fFunctionT_to_Ptri1
	.p2align	4, 0x90
	.type	MapIterable2_B_filter_fFunctionT_to_Ptri1,@function
MapIterable2_B_filter_fFunctionT_to_Ptri1: # @MapIterable2_B_filter_fFunctionT_to_Ptri1
# %bb.0:
	movq	256(%rdi), %rax
	retq
.Lfunc_end640:
	.size	MapIterable2_B_filter_fFunctionT_to_Ptri1, .Lfunc_end640-MapIterable2_B_filter_fFunctionT_to_Ptri1
                                        # -- End function
	.globl	MapIterable2_B_chain_otherIterable2T # -- Begin function MapIterable2_B_chain_otherIterable2T
	.p2align	4, 0x90
	.type	MapIterable2_B_chain_otherIterable2T,@function
MapIterable2_B_chain_otherIterable2T:   # @MapIterable2_B_chain_otherIterable2T
# %bb.0:
	movq	264(%rdi), %rax
	retq
.Lfunc_end641:
	.size	MapIterable2_B_chain_otherIterable2T, .Lfunc_end641-MapIterable2_B_chain_otherIterable2T
                                        # -- End function
	.globl	MapIterable2_B_interleave_otherIterable2T # -- Begin function MapIterable2_B_interleave_otherIterable2T
	.p2align	4, 0x90
	.type	MapIterable2_B_interleave_otherIterable2T,@function
MapIterable2_B_interleave_otherIterable2T: # @MapIterable2_B_interleave_otherIterable2T
# %bb.0:
	movq	272(%rdi), %rax
	retq
.Lfunc_end642:
	.size	MapIterable2_B_interleave_otherIterable2T, .Lfunc_end642-MapIterable2_B_interleave_otherIterable2T
                                        # -- End function
	.globl	MapIterable2_B_zip_otherIterable2U # -- Begin function MapIterable2_B_zip_otherIterable2U
	.p2align	4, 0x90
	.type	MapIterable2_B_zip_otherIterable2U,@function
MapIterable2_B_zip_otherIterable2U:     # @MapIterable2_B_zip_otherIterable2U
# %bb.0:
	movq	280(%rdi), %rax
	retq
.Lfunc_end643:
	.size	MapIterable2_B_zip_otherIterable2U, .Lfunc_end643-MapIterable2_B_zip_otherIterable2U
                                        # -- End function
	.globl	MapIterable2_B_product_otherIterable2U # -- Begin function MapIterable2_B_product_otherIterable2U
	.p2align	4, 0x90
	.type	MapIterable2_B_product_otherIterable2U,@function
MapIterable2_B_product_otherIterable2U: # @MapIterable2_B_product_otherIterable2U
# %bb.0:
	movq	288(%rdi), %rax
	retq
.Lfunc_end644:
	.size	MapIterable2_B_product_otherIterable2U, .Lfunc_end644-MapIterable2_B_product_otherIterable2U
                                        # -- End function
	.globl	MapIterable2_init_iterableIterable2T_fFunctionT_to_U # -- Begin function MapIterable2_init_iterableIterable2T_fFunctionT_to_U
	.p2align	4, 0x90
	.type	MapIterable2_init_iterableIterable2T_fFunctionT_to_U,@function
MapIterable2_init_iterableIterable2T_fFunctionT_to_U: # @MapIterable2_init_iterableIterable2T_fFunctionT_to_U
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r12
	.cfi_def_cfa_offset 32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	pushq	%rax
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -40
	.cfi_offset %r12, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rsi, %rbx
	movq	%rdi, %r15
	movq	104(%rsp), %r14
	movq	80(%rsp), %rdx
	movq	88(%rsp), %rcx
	movq	72(%rsp), %rsi
	movq	40(%rdi), %rax
	movabsq	$-1724859134596891929, %rdi     # imm = 0xE81011C17AC3BAE7
	imulq	8(%r15), %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%r15), %r8
	movslq	(%rax,%r8,4), %r12
	movq	40(%rsi), %rax
	movabsq	$5693646204635713916, %rdi      # imm = 0x4F03E50E9010117C
	imulq	8(%rsi), %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%rsi), %r8
	movl	(%rax,%r8,4), %r8d
	movq	16(%r15,%r12,8), %rax
	movq	%rbx, %rdi
	callq	*8(%rax)
	movq	24(%r15,%r12,8), %rax
	movq	8(%rax), %rax
	movq	%rbx, %rdi
	movq	%r14, %rsi
	addq	$8, %rsp
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	jmpq	*%rax                           # TAILCALL
.Lfunc_end645:
	.size	MapIterable2_init_iterableIterable2T_fFunctionT_to_U, .Lfunc_end645-MapIterable2_init_iterableIterable2T_fFunctionT_to_U
	.cfi_endproc
                                        # -- End function
	.globl	MapIterable2_iterator_          # -- Begin function MapIterable2_iterator_
	.p2align	4, 0x90
	.type	MapIterable2_iterator_,@function
MapIterable2_iterator_:                 # @MapIterable2_iterator_
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$280, %rsp                      # imm = 0x118
	.cfi_def_cfa_offset 336
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rdx, %rbx
	movq	%rsi, %r14
	movq	%rdi, 112(%rsp)                 # 8-byte Spill
	movq	40(%rsi), %rax
	movabsq	$-1724859134596891929, %rcx     # imm = 0xE81011C17AC3BAE7
	imulq	8(%rsi), %rcx
	movq	%rcx, %rsi
	shrq	$32, %rsi
	xorq	%rcx, %rsi
	andq	16(%r14), %rsi
	movslq	(%rax,%rsi,4), %r15
	movq	16(%r14,%r15,8), %rax
	leaq	184(%rsp), %rdi
	movq	%rdx, %rsi
	callq	*(%rax)
	movslq	208(%rsp), %rbp
	movq	200(%rsp), %rax
	movq	%rax, 16(%rsp)                  # 8-byte Spill
	movq	184(%rsp), %r13
	movq	192(%rsp), %r12
	movq	%rbx, 24(%rsp)                  # 8-byte Spill
	movq	%rbx, %rdi
	callq	*(%r14,%r15,8)
	movq	%rbx, %rdi
	callq	*8(%r14,%r15,8)
	movq	%rsp, %r8
	movq	%r13, %rdi
	movq	%r12, %rsi
	movq	16(%rsp), %rbx                  # 8-byte Reload
	movq	%rbx, %rdx
	movl	%ebp, %ecx
	callq	*8(%r13,%rbp,8)
	leaq	248(%rsp), %rdi
	movq	%r13, %rsi
	movq	%r12, %rdx
	movq	%rbx, %rcx
	movl	%ebp, %r8d
	movq	%r13, %r9
	movq	%rsp, %r10
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	24(%r14,%r15,8), %rax
	movq	24(%rsp), %r13                  # 8-byte Reload
	movq	%r13, %rdi
	callq	*(%rax)
	movq	%r13, %rdi
	callq	*(%r14,%r15,8)
	movq	%rax, %rbx
	movq	%r13, %rdi
	callq	*8(%r14,%r15,8)
	movq	%rax, %r12
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	movq	%rsi, 16(%rsp)                  # 8-byte Spill
	movl	$56, %edi
	callq	bump_malloc_inner@PLT
	movq	%rbx, (%rax)
	movq	%r12, 8(%rax)
	movq	MapIterator2@GOTPCREL(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movq	%rax, 40(%rsp)
	movl	$9, 56(%rsp)
	movq	16(%r14,%r15,8), %rax
	leaq	152(%rsp), %rdi
	movq	%r13, %rsi
	movq	%r13, %rbx
	callq	*(%rax)
	movslq	176(%rsp), %rbp
	movq	168(%rsp), %rax
	movq	%rax, 8(%rsp)                   # 8-byte Spill
	movq	152(%rsp), %r13
	movq	160(%rsp), %r12
	movq	%rbx, %rdi
	callq	*(%r14,%r15,8)
	movq	%rbx, %rdi
	callq	*8(%r14,%r15,8)
	movq	%r13, %rdi
	movq	%r12, %rsi
	movq	8(%rsp), %rbx                   # 8-byte Reload
	movq	%rbx, %rdx
	movl	%ebp, %ecx
	movq	%rsp, %r8
	callq	*8(%r13,%rbp,8)
	leaq	216(%rsp), %rdi
	movq	%r13, %rsi
	movq	%r12, %rdx
	movq	%rbx, %rcx
	movl	%ebp, %r8d
	movq	%r13, %r9
	movq	%rsp, %r10
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	232(%rsp), %rax
	movq	%rax, 8(%rsp)                   # 8-byte Spill
	movq	216(%rsp), %rbx
	movq	224(%rsp), %rax
	movq	%rax, 104(%rsp)                 # 8-byte Spill
	movq	24(%r14,%r15,8), %rax
	movq	24(%rsp), %r13                  # 8-byte Reload
	movq	%r13, %rdi
	callq	*(%rax)
	movq	%rax, 96(%rsp)                  # 8-byte Spill
	movq	40(%rbx), %rax
	movabsq	$4189192806087951739, %rdx      # imm = 0x3A2300A96E7E857B
	movq	8(%rbx), %rcx
	movq	%rbx, 64(%rsp)                  # 8-byte Spill
	imulq	%rdx, %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rbx), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	%rax, 88(%rsp)                  # 8-byte Spill
	movq	32(%rsp), %rbx
	movq	40(%rsp), %rax
	movq	%rax, 72(%rsp)                  # 8-byte Spill
	movq	48(%rsp), %rax
	movq	%rax, 80(%rsp)                  # 8-byte Spill
	movslq	56(%rsp), %rbp
	movq	%r13, %rdi
	callq	*(%r14,%r15,8)
	movq	%rax, %r12
	movq	%r13, %rdi
	callq	*8(%r14,%r15,8)
	movq	%rax, %r13
	movl	$24, %edi
	movq	16(%rsp), %r14                  # 8-byte Reload
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r15
	movq	%r12, 8(%rax)
	movq	$0, 16(%rax)
	movq	Iterator2@GOTPCREL(%rip), %rax
	movq	%rax, (%r15)
	movl	$32, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	%r12, 16(%rax)
	movq	%r13, 8(%rax)
	movq	$0, 24(%rax)
	movq	function_typ@GOTPCREL(%rip), %rcx
	movq	%rcx, (%rax)
	movq	%r15, 136(%rsp)
	movq	%rax, 144(%rsp)
	movq	32(%rbx,%rbp,8), %rax
	movq	64(%rsp), %r15                  # 8-byte Reload
	movq	%r15, 120(%rsp)
	movq	%rcx, 128(%rsp)
	leaq	120(%rsp), %r8
	movq	%rbx, %rdi
	movq	72(%rsp), %r12                  # 8-byte Reload
	movq	%r12, %rsi
	movq	80(%rsp), %r14                  # 8-byte Reload
	movq	%r14, %rdx
	movl	%ebp, %ecx
	callq	*%rax
	leaq	136(%rsp), %r10
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r14, %rdx
	movl	%ebp, %ecx
	movq	%rbx, %r8
	movq	%r12, %r9
	pushq	96(%rsp)                        # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	96(%rsp)                        # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	24(%rsp)                        # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	128(%rsp)                       # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$64, %rsp
	.cfi_adjust_cfa_offset -64
	movq	32(%rsp), %r8
	movq	40(%rsp), %rcx
	movq	48(%rsp), %rdx
	movq	40(%r8), %rsi
	movabsq	$4189192806087951739, %rax      # imm = 0x3A2300A96E7E857B
	imulq	8(%r8), %rax
	movq	%rax, %rdi
	shrq	$32, %rdi
	xorq	%rax, %rdi
	andq	16(%r8), %rdi
	movl	(%rsi,%rdi,4), %esi
	movq	112(%rsp), %rax                 # 8-byte Reload
	movq	%rdx, 16(%rax)
	movq	%rcx, 8(%rax)
	movq	%r8, (%rax)
	movl	%esi, 24(%rax)
	addq	$280, %rsp                      # imm = 0x118
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end646:
	.size	MapIterable2_iterator_, .Lfunc_end646-MapIterable2_iterator_
	.cfi_endproc
                                        # -- End function
	.globl	_size_MapIterator2              # -- Begin function _size_MapIterator2
	.p2align	4, 0x90
	.type	_size_MapIterator2,@function
_size_MapIterator2:                     # @_size_MapIterator2
# %bb.0:
	movl	$56, %eax
	movl	$8, %edx
	retq
.Lfunc_end647:
	.size	_size_MapIterator2, .Lfunc_end647-_size_MapIterator2
                                        # -- End function
	.globl	MapIterator2_field_MapIterator2_0 # -- Begin function MapIterator2_field_MapIterator2_0
	.p2align	4, 0x90
	.type	MapIterator2_field_MapIterator2_0,@function
MapIterator2_field_MapIterator2_0:      # @MapIterator2_field_MapIterator2_0
# %bb.0:
	movq	(%rdi), %rax
	retq
.Lfunc_end648:
	.size	MapIterator2_field_MapIterator2_0, .Lfunc_end648-MapIterator2_field_MapIterator2_0
                                        # -- End function
	.globl	MapIterator2_field_MapIterator2_1 # -- Begin function MapIterator2_field_MapIterator2_1
	.p2align	4, 0x90
	.type	MapIterator2_field_MapIterator2_1,@function
MapIterator2_field_MapIterator2_1:      # @MapIterator2_field_MapIterator2_1
# %bb.0:
	movq	8(%rdi), %rax
	retq
.Lfunc_end649:
	.size	MapIterator2_field_MapIterator2_1, .Lfunc_end649-MapIterator2_field_MapIterator2_1
                                        # -- End function
	.globl	MapIterator2_B_init_iteratorIterator2T_fFunctionT_to_U # -- Begin function MapIterator2_B_init_iteratorIterator2T_fFunctionT_to_U
	.p2align	4, 0x90
	.type	MapIterator2_B_init_iteratorIterator2T_fFunctionT_to_U,@function
MapIterator2_B_init_iteratorIterator2T_fFunctionT_to_U: # @MapIterator2_B_init_iteratorIterator2T_fFunctionT_to_U
# %bb.0:
	movq	120(%rdi), %rax
	retq
.Lfunc_end650:
	.size	MapIterator2_B_init_iteratorIterator2T_fFunctionT_to_U, .Lfunc_end650-MapIterator2_B_init_iteratorIterator2T_fFunctionT_to_U
                                        # -- End function
	.globl	MapIterator2_B_next_            # -- Begin function MapIterator2_B_next_
	.p2align	4, 0x90
	.type	MapIterator2_B_next_,@function
MapIterator2_B_next_:                   # @MapIterator2_B_next_
# %bb.0:
	movq	128(%rdi), %rax
	retq
.Lfunc_end651:
	.size	MapIterator2_B_next_, .Lfunc_end651-MapIterator2_B_next_
                                        # -- End function
	.globl	MapIterator2_init_iteratorIterator2T_fFunctionT_to_U # -- Begin function MapIterator2_init_iteratorIterator2T_fFunctionT_to_U
	.p2align	4, 0x90
	.type	MapIterator2_init_iteratorIterator2T_fFunctionT_to_U,@function
MapIterator2_init_iteratorIterator2T_fFunctionT_to_U: # @MapIterator2_init_iteratorIterator2T_fFunctionT_to_U
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r12
	.cfi_def_cfa_offset 32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	pushq	%rax
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -40
	.cfi_offset %r12, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rsi, %rbx
	movq	%rdi, %r15
	movq	104(%rsp), %r14
	movq	80(%rsp), %rdx
	movq	88(%rsp), %rcx
	movq	72(%rsp), %rsi
	movq	40(%rdi), %rax
	movabsq	$-10255947709272500, %rdi       # imm = 0xFFDB904517F42E4C
	imulq	8(%r15), %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%r15), %r8
	movslq	(%rax,%r8,4), %r12
	movq	40(%rsi), %rax
	movabsq	$4189192806087951739, %rdi      # imm = 0x3A2300A96E7E857B
	imulq	8(%rsi), %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%rsi), %r8
	movl	(%rax,%r8,4), %r8d
	movq	16(%r15,%r12,8), %rax
	movq	%rbx, %rdi
	callq	*8(%rax)
	movq	24(%r15,%r12,8), %rax
	movq	8(%rax), %rax
	movq	%rbx, %rdi
	movq	%r14, %rsi
	addq	$8, %rsp
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	jmpq	*%rax                           # TAILCALL
.Lfunc_end652:
	.size	MapIterator2_init_iteratorIterator2T_fFunctionT_to_U, .Lfunc_end652-MapIterator2_init_iteratorIterator2T_fFunctionT_to_U
	.cfi_endproc
                                        # -- End function
	.globl	MapIterator2_next_              # -- Begin function MapIterator2_next_
	.p2align	4, 0x90
	.type	MapIterator2_next_,@function
MapIterator2_next_:                     # @MapIterator2_next_
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$168, %rsp
	.cfi_def_cfa_offset 224
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rdx, %r15
	movq	%rsi, %r12
	movq	%rdi, 24(%rsp)                  # 8-byte Spill
	movq	40(%rsi), %rax
	movabsq	$-10255947709272500, %rcx       # imm = 0xFFDB904517F42E4C
	imulq	8(%rsi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rsi), %rdx
	movslq	(%rax,%rdx,4), %rbx
	movq	16(%rsi,%rbx,8), %rax
	leaq	32(%rsp), %rdi
	movq	%r15, %rsi
	callq	*(%rax)
	movslq	56(%rsp), %rbp
	movq	48(%rsp), %rax
	movq	%rax, 16(%rsp)                  # 8-byte Spill
	movq	32(%rsp), %r14
	movq	40(%rsp), %r13
	movq	%r15, %rdi
	callq	*(%r12,%rbx,8)
	movq	%r15, 8(%rsp)                   # 8-byte Spill
	movq	%r15, %rdi
	movq	%r12, %r15
	callq	*8(%r12,%rbx,8)
	movq	%rsp, %r8
	movq	%r14, %rdi
	movq	%r13, %rsi
	movq	16(%rsp), %r12                  # 8-byte Reload
	movq	%r12, %rdx
	movl	%ebp, %ecx
	callq	*8(%r14,%rbp,8)
	leaq	112(%rsp), %rdi
	movq	%r14, %rsi
	movq	%r13, %rdx
	movq	%r12, %rcx
	movl	%ebp, %r8d
	movq	%r14, %r9
	movq	%rsp, %r10
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	112(%rsp), %r12
	movq	nil_typ@GOTPCREL(%rip), %rdi
	cmpq	%rdi, %r12
	sete	%cl
	testq	%r12, %r12
	sete	%dl
	orb	%cl, %dl
	jne	.LBB653_1
# %bb.2:
	movq	136(%rsp), %r14
	movq	128(%rsp), %r13
	movq	40(%r12), %rax
	movabsq	$3084208142191802847, %rcx      # imm = 0x2ACD4EF6E8B5B9DF
	imulq	8(%r12), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%r12), %rdx
	movl	(%rax,%rdx,4), %ebp
	movq	24(%r15,%rbx,8), %rax
	movq	8(%rsp), %rdi                   # 8-byte Reload
	callq	*(%rax)
	leaq	64(%rsp), %rdi
	movq	%r12, %rsi
	movq	%r13, %rdx
	movq	%r14, %rcx
	movq	%rbp, %r8
	callq	*%rax
	movl	96(%rsp), %ecx
	movq	64(%rsp), %rdi
	movq	80(%rsp), %rdx
	movq	88(%rsp), %rsi
	jmp	.LBB653_3
.LBB653_1:
	xorl	%ecx, %ecx
                                        # implicit-def: $rdx
                                        # implicit-def: $rsi
.LBB653_3:
	movq	24(%rsp), %rax                  # 8-byte Reload
	movq	%rdx, 16(%rax)
	movq	%rdi, (%rax)
	movq	%rsi, 24(%rax)
	movl	%ecx, 32(%rax)
	addq	$168, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end653:
	.size	MapIterator2_next_, .Lfunc_end653-MapIterator2_next_
	.cfi_endproc
                                        # -- End function
	.globl	MapIterator2_getter_f           # -- Begin function MapIterator2_getter_f
	.p2align	4, 0x90
	.type	MapIterator2_getter_f,@function
MapIterator2_getter_f:                  # @MapIterator2_getter_f
# %bb.0:
	movq	48(%rdi), %rax
	retq
.Lfunc_end654:
	.size	MapIterator2_getter_f, .Lfunc_end654-MapIterator2_getter_f
                                        # -- End function
	.globl	MapIterator2_setter_f           # -- Begin function MapIterator2_setter_f
	.p2align	4, 0x90
	.type	MapIterator2_setter_f,@function
MapIterator2_setter_f:                  # @MapIterator2_setter_f
# %bb.0:
	movq	%rsi, 48(%rdi)
	retq
.Lfunc_end655:
	.size	MapIterator2_setter_f, .Lfunc_end655-MapIterator2_setter_f
                                        # -- End function
	.globl	MapIterator2_getter_iterator    # -- Begin function MapIterator2_getter_iterator
	.p2align	4, 0x90
	.type	MapIterator2_getter_iterator,@function
MapIterator2_getter_iterator:           # @MapIterator2_getter_iterator
# %bb.0:
	movq	%rdi, %rax
	movq	16(%rsi), %rcx
	movq	24(%rsi), %rdx
	movq	32(%rsi), %rdi
	movl	40(%rsi), %esi
	movl	%esi, 24(%rax)
	movq	%rdi, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	retq
.Lfunc_end656:
	.size	MapIterator2_getter_iterator, .Lfunc_end656-MapIterator2_getter_iterator
                                        # -- End function
	.globl	MapIterator2_setter_iterator    # -- Begin function MapIterator2_setter_iterator
	.p2align	4, 0x90
	.type	MapIterator2_setter_iterator,@function
MapIterator2_setter_iterator:           # @MapIterator2_setter_iterator
# %bb.0:
	movq	%rsi, 16(%rdi)
	movq	%rdx, 24(%rdi)
	movq	%rcx, 32(%rdi)
	movl	%r8d, 40(%rdi)
	retq
.Lfunc_end657:
	.size	MapIterator2_setter_iterator, .Lfunc_end657-MapIterator2_setter_iterator
                                        # -- End function
	.globl	MapIterable2_getter_f           # -- Begin function MapIterable2_getter_f
	.p2align	4, 0x90
	.type	MapIterable2_getter_f,@function
MapIterable2_getter_f:                  # @MapIterable2_getter_f
# %bb.0:
	movq	48(%rdi), %rax
	retq
.Lfunc_end658:
	.size	MapIterable2_getter_f, .Lfunc_end658-MapIterable2_getter_f
                                        # -- End function
	.globl	MapIterable2_setter_f           # -- Begin function MapIterable2_setter_f
	.p2align	4, 0x90
	.type	MapIterable2_setter_f,@function
MapIterable2_setter_f:                  # @MapIterable2_setter_f
# %bb.0:
	movq	%rsi, 48(%rdi)
	retq
.Lfunc_end659:
	.size	MapIterable2_setter_f, .Lfunc_end659-MapIterable2_setter_f
                                        # -- End function
	.globl	MapIterable2_getter_iterable    # -- Begin function MapIterable2_getter_iterable
	.p2align	4, 0x90
	.type	MapIterable2_getter_iterable,@function
MapIterable2_getter_iterable:           # @MapIterable2_getter_iterable
# %bb.0:
	movq	%rdi, %rax
	movq	16(%rsi), %rcx
	movq	24(%rsi), %rdx
	movq	32(%rsi), %rdi
	movl	40(%rsi), %esi
	movl	%esi, 24(%rax)
	movq	%rdi, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	retq
.Lfunc_end660:
	.size	MapIterable2_getter_iterable, .Lfunc_end660-MapIterable2_getter_iterable
                                        # -- End function
	.globl	MapIterable2_setter_iterable    # -- Begin function MapIterable2_setter_iterable
	.p2align	4, 0x90
	.type	MapIterable2_setter_iterable,@function
MapIterable2_setter_iterable:           # @MapIterable2_setter_iterable
# %bb.0:
	movq	%rsi, 16(%rdi)
	movq	%rdx, 24(%rdi)
	movq	%rcx, 32(%rdi)
	movl	%r8d, 40(%rdi)
	retq
.Lfunc_end661:
	.size	MapIterable2_setter_iterable, .Lfunc_end661-MapIterable2_setter_iterable
                                        # -- End function
	.globl	_size_ArrayIterator             # -- Begin function _size_ArrayIterator
	.p2align	4, 0x90
	.type	_size_ArrayIterator,@function
_size_ArrayIterator:                    # @_size_ArrayIterator
# %bb.0:
	movl	$48, %eax
	movl	$8, %edx
	retq
.Lfunc_end662:
	.size	_size_ArrayIterator, .Lfunc_end662-_size_ArrayIterator
                                        # -- End function
	.globl	ArrayIterator_field_ArrayIterator_0 # -- Begin function ArrayIterator_field_ArrayIterator_0
	.p2align	4, 0x90
	.type	ArrayIterator_field_ArrayIterator_0,@function
ArrayIterator_field_ArrayIterator_0:    # @ArrayIterator_field_ArrayIterator_0
# %bb.0:
	movq	(%rdi), %rax
	retq
.Lfunc_end663:
	.size	ArrayIterator_field_ArrayIterator_0, .Lfunc_end663-ArrayIterator_field_ArrayIterator_0
                                        # -- End function
	.globl	ArrayIterator_B_init_arrayArrayT # -- Begin function ArrayIterator_B_init_arrayArrayT
	.p2align	4, 0x90
	.type	ArrayIterator_B_init_arrayArrayT,@function
ArrayIterator_B_init_arrayArrayT:       # @ArrayIterator_B_init_arrayArrayT
# %bb.0:
	movq	112(%rdi), %rax
	retq
.Lfunc_end664:
	.size	ArrayIterator_B_init_arrayArrayT, .Lfunc_end664-ArrayIterator_B_init_arrayArrayT
                                        # -- End function
	.globl	ArrayIterator_B_next_           # -- Begin function ArrayIterator_B_next_
	.p2align	4, 0x90
	.type	ArrayIterator_B_next_,@function
ArrayIterator_B_next_:                  # @ArrayIterator_B_next_
# %bb.0:
	movq	120(%rdi), %rax
	retq
.Lfunc_end665:
	.size	ArrayIterator_B_next_, .Lfunc_end665-ArrayIterator_B_next_
                                        # -- End function
	.globl	ArrayIterator_init_arrayArrayT  # -- Begin function ArrayIterator_init_arrayArrayT
	.p2align	4, 0x90
	.type	ArrayIterator_init_arrayArrayT,@function
ArrayIterator_init_arrayArrayT:         # @ArrayIterator_init_arrayArrayT
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movq	64(%rsp), %rdx
	movq	72(%rsp), %rcx
	movq	56(%rsp), %rsi
	movq	40(%rdi), %rax
	movabsq	$3447345754186651411, %rdi      # imm = 0x2FD76EB2D83F1713
	imulq	8(%r14), %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%r14), %r8
	movslq	(%rax,%r8,4), %r15
	movq	40(%rsi), %rax
	movabsq	$-5261542750394134544, %rdi     # imm = 0xB6FB3EBED039CFF0
	imulq	8(%rsi), %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%rsi), %r8
	movl	(%rax,%r8,4), %r8d
	movq	8(%r14,%r15,8), %rax
	movq	%rbx, %rdi
	callq	*8(%rax)
	movq	16(%r14,%r15,8), %rax
	movq	8(%rax), %rax
	movq	%rbx, %rdi
	xorl	%esi, %esi
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	jmpq	*%rax                           # TAILCALL
.Lfunc_end666:
	.size	ArrayIterator_init_arrayArrayT, .Lfunc_end666-ArrayIterator_init_arrayArrayT
	.cfi_endproc
                                        # -- End function
	.globl	ArrayIterator_next_             # -- Begin function ArrayIterator_next_
	.p2align	4, 0x90
	.type	ArrayIterator_next_,@function
ArrayIterator_next_:                    # @ArrayIterator_next_
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$184, %rsp
	.cfi_def_cfa_offset 240
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rdx, %r14
	movq	%rsi, %r13
	movq	%rdi, 40(%rsp)                  # 8-byte Spill
	movq	40(%rsi), %rax
	movabsq	$3447345754186651411, %rcx      # imm = 0x2FD76EB2D83F1713
	imulq	8(%rsi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rsi), %rdx
	movslq	(%rax,%rdx,4), %r15
	movq	16(%rsi,%r15,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movl	%eax, 16(%rsp)                  # 4-byte Spill
	movq	8(%r13,%r15,8), %rax
	leaq	96(%rsp), %rdi
	movq	%r14, %rsi
	callq	*(%rax)
	movslq	120(%rsp), %r12
	movq	112(%rsp), %rax
	movq	%rax, 8(%rsp)                   # 8-byte Spill
	movq	96(%rsp), %rbp
	movq	104(%rsp), %rbx
	movq	%r14, 32(%rsp)                  # 8-byte Spill
	movq	%r14, %rdi
	movq	%r15, %r14
	movq	%r13, 24(%rsp)                  # 8-byte Spill
	callq	*(%r13,%r15,8)
	movq	%rsp, %r13
	movq	%rbp, %rdi
	movq	%rbx, %rsi
	movq	8(%rsp), %r15                   # 8-byte Reload
	movq	%r15, %rdx
	movl	%r12d, %ecx
	movq	%r13, %r8
	callq	*56(%rbp,%r12,8)
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	movq	%rbp, %rdi
	movq	%rbx, %rsi
	movq	%r15, %rdx
	movl	%r12d, %ecx
	movq	%rbp, %r8
	movq	%rbx, %r9
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	cmpl	%eax, 16(%rsp)                  # 4-byte Folded Reload
	jge	.LBB667_1
# %bb.2:
	movq	%r14, %r13
	movq	24(%rsp), %r14                  # 8-byte Reload
	movq	16(%r14,%r13,8), %rax
	movq	32(%rsp), %r15                  # 8-byte Reload
	movq	%r15, %rdi
	callq	*(%rax)
                                        # kill: def $eax killed $eax def $rax
	leal	1(%rax), %esi
	movq	16(%r14,%r13,8), %rax
	movq	%r15, %rdi
	callq	*8(%rax)
	movq	16(%r14,%r13,8), %rax
	movq	%r15, %rdi
	callq	*(%rax)
                                        # kill: def $eax killed $eax def $rax
	decl	%eax
	movq	%rax, 16(%rsp)                  # 8-byte Spill
	movq	8(%r14,%r13,8), %rax
	leaq	64(%rsp), %rdi
	movq	%r15, %rsi
	callq	*(%rax)
	movslq	88(%rsp), %r12
	movq	80(%rsp), %rax
	movq	%rax, 8(%rsp)                   # 8-byte Spill
	movq	64(%rsp), %rbx
	movq	72(%rsp), %rbp
	movq	%r15, %rdi
	callq	*(%r14,%r13,8)
	movq	_parameterization_Ptri32@GOTPCREL(%rip), %rax
	movq	%rax, 56(%rsp)
	movq	104(%rbx,%r12,8), %rax
	movq	i32_typ@GOTPCREL(%rip), %rcx
	movq	%rcx, 48(%rsp)
	leaq	48(%rsp), %r8
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	movq	8(%rsp), %r14                   # 8-byte Reload
	movq	%r14, %rdx
	movl	%r12d, %ecx
	callq	*%rax
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	leaq	64(%rsp), %r10
	leaq	136(%rsp), %rdi
	movq	%rbx, %rsi
	movq	%rbp, %rdx
	movq	%r14, %rcx
	movl	%r12d, %r8d
	movq	%rbx, %r9
	pushq	24(%rsp)                        # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$48, %rsp
	.cfi_adjust_cfa_offset -48
	movq	152(%rsp), %rcx
	movq	128(%rsp), %r9
	movq	144(%rsp), %rdx
	movq	40(%r9), %rsi
	movabsq	$3084208142191802847, %rdi      # imm = 0x2ACD4EF6E8B5B9DF
	imulq	8(%r9), %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%r9), %r8
	movl	(%rsi,%r8,4), %esi
	jmp	.LBB667_3
.LBB667_1:
	movq	nil_typ@GOTPCREL(%rip), %r9
	xorl	%esi, %esi
                                        # implicit-def: $rdx
                                        # implicit-def: $rcx
.LBB667_3:
	movq	40(%rsp), %rax                  # 8-byte Reload
	movq	%rdx, 16(%rax)
	movq	%r9, (%rax)
	movq	%rcx, 24(%rax)
	movl	%esi, 32(%rax)
	addq	$184, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end667:
	.size	ArrayIterator_next_, .Lfunc_end667-ArrayIterator_next_
	.cfi_endproc
                                        # -- End function
	.globl	ArrayIterator_getter_index      # -- Begin function ArrayIterator_getter_index
	.p2align	4, 0x90
	.type	ArrayIterator_getter_index,@function
ArrayIterator_getter_index:             # @ArrayIterator_getter_index
# %bb.0:
	movl	40(%rdi), %eax
	retq
.Lfunc_end668:
	.size	ArrayIterator_getter_index, .Lfunc_end668-ArrayIterator_getter_index
                                        # -- End function
	.globl	ArrayIterator_setter_index      # -- Begin function ArrayIterator_setter_index
	.p2align	4, 0x90
	.type	ArrayIterator_setter_index,@function
ArrayIterator_setter_index:             # @ArrayIterator_setter_index
# %bb.0:
	movl	%esi, 40(%rdi)
	retq
.Lfunc_end669:
	.size	ArrayIterator_setter_index, .Lfunc_end669-ArrayIterator_setter_index
                                        # -- End function
	.globl	ArrayIterator_getter_array      # -- Begin function ArrayIterator_getter_array
	.p2align	4, 0x90
	.type	ArrayIterator_getter_array,@function
ArrayIterator_getter_array:             # @ArrayIterator_getter_array
# %bb.0:
	movq	%rdi, %rax
	movq	8(%rsi), %rcx
	movq	16(%rsi), %rdx
	movq	24(%rsi), %rdi
	movl	32(%rsi), %esi
	movl	%esi, 24(%rax)
	movq	%rdi, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	retq
.Lfunc_end670:
	.size	ArrayIterator_getter_array, .Lfunc_end670-ArrayIterator_getter_array
                                        # -- End function
	.globl	ArrayIterator_setter_array      # -- Begin function ArrayIterator_setter_array
	.p2align	4, 0x90
	.type	ArrayIterator_setter_array,@function
ArrayIterator_setter_array:             # @ArrayIterator_setter_array
# %bb.0:
	movq	%rsi, 8(%rdi)
	movq	%rdx, 16(%rdi)
	movq	%rcx, 24(%rdi)
	movl	%r8d, 32(%rdi)
	retq
.Lfunc_end671:
	.size	ArrayIterator_setter_array, .Lfunc_end671-ArrayIterator_setter_array
                                        # -- End function
	.globl	Array_getter_capacity           # -- Begin function Array_getter_capacity
	.p2align	4, 0x90
	.type	Array_getter_capacity,@function
Array_getter_capacity:                  # @Array_getter_capacity
# %bb.0:
	movl	20(%rdi), %eax
	retq
.Lfunc_end672:
	.size	Array_getter_capacity, .Lfunc_end672-Array_getter_capacity
                                        # -- End function
	.globl	Array_setter_capacity           # -- Begin function Array_setter_capacity
	.p2align	4, 0x90
	.type	Array_setter_capacity,@function
Array_setter_capacity:                  # @Array_setter_capacity
# %bb.0:
	movl	%esi, 20(%rdi)
	retq
.Lfunc_end673:
	.size	Array_setter_capacity, .Lfunc_end673-Array_setter_capacity
                                        # -- End function
	.globl	Array_getter_length             # -- Begin function Array_getter_length
	.p2align	4, 0x90
	.type	Array_getter_length,@function
Array_getter_length:                    # @Array_getter_length
# %bb.0:
	movl	16(%rdi), %eax
	retq
.Lfunc_end674:
	.size	Array_getter_length, .Lfunc_end674-Array_getter_length
                                        # -- End function
	.globl	Array_setter_length             # -- Begin function Array_setter_length
	.p2align	4, 0x90
	.type	Array_setter_length,@function
Array_setter_length:                    # @Array_setter_length
# %bb.0:
	movl	%esi, 16(%rdi)
	retq
.Lfunc_end675:
	.size	Array_setter_length, .Lfunc_end675-Array_setter_length
                                        # -- End function
	.globl	Array_getter_buffer             # -- Begin function Array_getter_buffer
	.p2align	4, 0x90
	.type	Array_getter_buffer,@function
Array_getter_buffer:                    # @Array_getter_buffer
# %bb.0:
	movq	8(%rdi), %rax
	retq
.Lfunc_end676:
	.size	Array_getter_buffer, .Lfunc_end676-Array_getter_buffer
                                        # -- End function
	.globl	Array_setter_buffer             # -- Begin function Array_setter_buffer
	.p2align	4, 0x90
	.type	Array_setter_buffer,@function
Array_setter_buffer:                    # @Array_setter_buffer
# %bb.0:
	movq	%rsi, 8(%rdi)
	retq
.Lfunc_end677:
	.size	Array_setter_buffer, .Lfunc_end677-Array_setter_buffer
                                        # -- End function
	.globl	_size_Math                      # -- Begin function _size_Math
	.p2align	4, 0x90
	.type	_size_Math,@function
_size_Math:                             # @_size_Math
# %bb.0:
	movl	$1, %edx
	xorl	%eax, %eax
	retq
.Lfunc_end678:
	.size	_size_Math, .Lfunc_end678-_size_Math
                                        # -- End function
	.globl	Math_B__Self_sqrt_xPtrf64       # -- Begin function Math_B__Self_sqrt_xPtrf64
	.p2align	4, 0x90
	.type	Math_B__Self_sqrt_xPtrf64,@function
Math_B__Self_sqrt_xPtrf64:              # @Math_B__Self_sqrt_xPtrf64
# %bb.0:
	movq	Math__Self_sqrt_xPtrf64@GOTPCREL(%rip), %rax
	retq
.Lfunc_end679:
	.size	Math_B__Self_sqrt_xPtrf64, .Lfunc_end679-Math_B__Self_sqrt_xPtrf64
                                        # -- End function
	.globl	Math_B__Self_abs_xPtri32__Self_abs_xPtrf64 # -- Begin function Math_B__Self_abs_xPtri32__Self_abs_xPtrf64
	.p2align	4, 0x90
	.type	Math_B__Self_abs_xPtri32__Self_abs_xPtrf64,@function
Math_B__Self_abs_xPtri32__Self_abs_xPtrf64: # @Math_B__Self_abs_xPtri32__Self_abs_xPtrf64
	.cfi_startproc
# %bb.0:
	pushq	%rax
	.cfi_def_cfa_offset 16
	movq	(%rdi), %rax
	movq	8(%rax), %rsi
	movq	16(%rax), %rdi
	movq	32(%rax), %r8
	movq	i32_typ@GOTPCREL(%rip), %rcx
	movabsq	$-2253724949814257982, %rdx     # imm = 0xE0B9291950E2D6C2
	callq	*24(%rax)
	movzbl	%al, %eax
	andl	$1, %eax
	xorl	$9, %eax
	movq	Math@GOTPCREL(%rip), %rcx
	movq	72(%rcx,%rax,8), %rax
	popq	%rcx
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end680:
	.size	Math_B__Self_abs_xPtri32__Self_abs_xPtrf64, .Lfunc_end680-Math_B__Self_abs_xPtri32__Self_abs_xPtrf64
	.cfi_endproc
                                        # -- End function
	.globl	Math_B__Self_max_aPtrf64_bPtrf64__Self_max_aPtri32_bPtri32 # -- Begin function Math_B__Self_max_aPtrf64_bPtrf64__Self_max_aPtri32_bPtri32
	.p2align	4, 0x90
	.type	Math_B__Self_max_aPtrf64_bPtrf64__Self_max_aPtri32_bPtri32,@function
Math_B__Self_max_aPtrf64_bPtrf64__Self_max_aPtri32_bPtri32: # @Math_B__Self_max_aPtrf64_bPtrf64__Self_max_aPtri32_bPtri32
	.cfi_startproc
# %bb.0:
	pushq	%rax
	.cfi_def_cfa_offset 16
	movq	(%rdi), %rax
	movq	8(%rax), %rsi
	movq	16(%rax), %rdi
	movq	32(%rax), %r8
	movq	i32_typ@GOTPCREL(%rip), %rcx
	movabsq	$-2253724949814257982, %rdx     # imm = 0xE0B9291950E2D6C2
	callq	*24(%rax)
	movzbl	%al, %eax
	andl	$1, %eax
	movq	Math@GOTPCREL(%rip), %rcx
	movq	152(%rcx,%rax,8), %rax
	popq	%rcx
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end681:
	.size	Math_B__Self_max_aPtrf64_bPtrf64__Self_max_aPtri32_bPtri32, .Lfunc_end681-Math_B__Self_max_aPtrf64_bPtrf64__Self_max_aPtri32_bPtri32
	.cfi_endproc
                                        # -- End function
	.globl	Math_B__Self_min_aPtri32_bPtri32__Self_min_aPtrf64_bPtrf64 # -- Begin function Math_B__Self_min_aPtri32_bPtri32__Self_min_aPtrf64_bPtrf64
	.p2align	4, 0x90
	.type	Math_B__Self_min_aPtri32_bPtri32__Self_min_aPtrf64_bPtrf64,@function
Math_B__Self_min_aPtri32_bPtri32__Self_min_aPtrf64_bPtrf64: # @Math_B__Self_min_aPtri32_bPtri32__Self_min_aPtrf64_bPtrf64
	.cfi_startproc
# %bb.0:
	pushq	%rax
	.cfi_def_cfa_offset 16
	movq	(%rdi), %rax
	movq	8(%rax), %rsi
	movq	16(%rax), %rdi
	movq	32(%rax), %r8
	movq	f64_typ@GOTPCREL(%rip), %rcx
	movabsq	$-757315540097298781, %rdx      # imm = 0xF57D7987599E0EA3
	callq	*24(%rax)
	movzbl	%al, %eax
	andl	$1, %eax
	movq	Math@GOTPCREL(%rip), %rcx
	movq	168(%rcx,%rax,8), %rax
	popq	%rcx
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end682:
	.size	Math_B__Self_min_aPtri32_bPtri32__Self_min_aPtrf64_bPtrf64, .Lfunc_end682-Math_B__Self_min_aPtri32_bPtri32__Self_min_aPtrf64_bPtrf64
	.cfi_endproc
                                        # -- End function
	.globl	Math_B__Self_round_xPtrf64      # -- Begin function Math_B__Self_round_xPtrf64
	.p2align	4, 0x90
	.type	Math_B__Self_round_xPtrf64,@function
Math_B__Self_round_xPtrf64:             # @Math_B__Self_round_xPtrf64
# %bb.0:
	movq	Math__Self_round_xPtrf64@GOTPCREL(%rip), %rax
	retq
.Lfunc_end683:
	.size	Math_B__Self_round_xPtrf64, .Lfunc_end683-Math_B__Self_round_xPtrf64
                                        # -- End function
	.globl	Math_B__Self_floor_xPtrf64      # -- Begin function Math_B__Self_floor_xPtrf64
	.p2align	4, 0x90
	.type	Math_B__Self_floor_xPtrf64,@function
Math_B__Self_floor_xPtrf64:             # @Math_B__Self_floor_xPtrf64
# %bb.0:
	movq	Math__Self_floor_xPtrf64@GOTPCREL(%rip), %rax
	retq
.Lfunc_end684:
	.size	Math_B__Self_floor_xPtrf64, .Lfunc_end684-Math_B__Self_floor_xPtrf64
                                        # -- End function
	.globl	Math_B__Self_ceiling_xPtrf64    # -- Begin function Math_B__Self_ceiling_xPtrf64
	.p2align	4, 0x90
	.type	Math_B__Self_ceiling_xPtrf64,@function
Math_B__Self_ceiling_xPtrf64:           # @Math_B__Self_ceiling_xPtrf64
# %bb.0:
	movq	Math__Self_ceiling_xPtrf64@GOTPCREL(%rip), %rax
	retq
.Lfunc_end685:
	.size	Math_B__Self_ceiling_xPtrf64, .Lfunc_end685-Math_B__Self_ceiling_xPtrf64
                                        # -- End function
	.globl	Math__Self_sqrt_xPtrf64         # -- Begin function Math__Self_sqrt_xPtrf64
	.p2align	4, 0x90
	.type	Math__Self_sqrt_xPtrf64,@function
Math__Self_sqrt_xPtrf64:                # @Math__Self_sqrt_xPtrf64
# %bb.0:
	sqrtsd	%xmm0, %xmm0
	retq
.Lfunc_end686:
	.size	Math__Self_sqrt_xPtrf64, .Lfunc_end686-Math__Self_sqrt_xPtrf64
                                        # -- End function
	.globl	Math__Self_abs_xPtri32          # -- Begin function Math__Self_abs_xPtri32
	.p2align	4, 0x90
	.type	Math__Self_abs_xPtri32,@function
Math__Self_abs_xPtri32:                 # @Math__Self_abs_xPtri32
# %bb.0:
	movl	%edx, %eax
	andl	$2147483647, %eax               # imm = 0x7FFFFFFF
	movl	%edx, %ecx
	negl	%ecx
	testl	%edx, %edx
	cmovnsq	%rax, %rcx
	movq	i32_typ@GOTPCREL(%rip), %rax
	movq	%rcx, %rdx
	retq
.Lfunc_end687:
	.size	Math__Self_abs_xPtri32, .Lfunc_end687-Math__Self_abs_xPtri32
                                        # -- End function
	.globl	Math__Self_abs_xPtrf64          # -- Begin function Math__Self_abs_xPtrf64
	.p2align	4, 0x90
	.type	Math__Self_abs_xPtrf64,@function
Math__Self_abs_xPtrf64:                 # @Math__Self_abs_xPtrf64
# %bb.0:
	movq	%rdx, %xmm0
	movabsq	$-9223372036854775808, %rax     # imm = 0x8000000000000000
	xorq	%rdx, %rax
	xorpd	%xmm1, %xmm1
	ucomisd	%xmm1, %xmm0
	cmovbq	%rax, %rdx
	movq	f64_typ@GOTPCREL(%rip), %rax
	retq
.Lfunc_end688:
	.size	Math__Self_abs_xPtrf64, .Lfunc_end688-Math__Self_abs_xPtrf64
                                        # -- End function
	.globl	Math__Self_max_aPtrf64_bPtrf64  # -- Begin function Math__Self_max_aPtrf64_bPtrf64
	.p2align	4, 0x90
	.type	Math__Self_max_aPtrf64_bPtrf64,@function
Math__Self_max_aPtrf64_bPtrf64:         # @Math__Self_max_aPtrf64_bPtrf64
# %bb.0:                                # %.cont19
	movq	%rdx, %xmm0
	movq	%r8, %xmm1
	maxsd	%xmm1, %xmm0
	movq	%xmm0, %rdx
	movq	f64_typ@GOTPCREL(%rip), %rax
	retq
.Lfunc_end689:
	.size	Math__Self_max_aPtrf64_bPtrf64, .Lfunc_end689-Math__Self_max_aPtrf64_bPtrf64
                                        # -- End function
	.globl	Math__Self_max_aPtri32_bPtri32  # -- Begin function Math__Self_max_aPtri32_bPtri32
	.p2align	4, 0x90
	.type	Math__Self_max_aPtri32_bPtri32,@function
Math__Self_max_aPtri32_bPtri32:         # @Math__Self_max_aPtri32_bPtri32
# %bb.0:                                # %.cont24
	cmpl	%r8d, %edx
	cmovlel	%r8d, %edx
	movq	i32_typ@GOTPCREL(%rip), %rax
	retq
.Lfunc_end690:
	.size	Math__Self_max_aPtri32_bPtri32, .Lfunc_end690-Math__Self_max_aPtri32_bPtri32
                                        # -- End function
	.globl	Math__Self_min_aPtri32_bPtri32  # -- Begin function Math__Self_min_aPtri32_bPtri32
	.p2align	4, 0x90
	.type	Math__Self_min_aPtri32_bPtri32,@function
Math__Self_min_aPtri32_bPtri32:         # @Math__Self_min_aPtri32_bPtri32
# %bb.0:                                # %.cont24
	cmpl	%r8d, %edx
	cmovgel	%r8d, %edx
	movq	i32_typ@GOTPCREL(%rip), %rax
	retq
.Lfunc_end691:
	.size	Math__Self_min_aPtri32_bPtri32, .Lfunc_end691-Math__Self_min_aPtri32_bPtri32
                                        # -- End function
	.globl	Math__Self_min_aPtrf64_bPtrf64  # -- Begin function Math__Self_min_aPtrf64_bPtrf64
	.p2align	4, 0x90
	.type	Math__Self_min_aPtrf64_bPtrf64,@function
Math__Self_min_aPtrf64_bPtrf64:         # @Math__Self_min_aPtrf64_bPtrf64
# %bb.0:                                # %.cont19
	movq	%rdx, %xmm0
	movq	%r8, %xmm1
	minsd	%xmm1, %xmm0
	movq	%xmm0, %rdx
	movq	f64_typ@GOTPCREL(%rip), %rax
	retq
.Lfunc_end692:
	.size	Math__Self_min_aPtrf64_bPtrf64, .Lfunc_end692-Math__Self_min_aPtrf64_bPtrf64
                                        # -- End function
	.globl	Math__Self_round_xPtrf64        # -- Begin function Math__Self_round_xPtrf64
	.p2align	4, 0x90
	.type	Math__Self_round_xPtrf64,@function
Math__Self_round_xPtrf64:               # @Math__Self_round_xPtrf64
# %bb.0:
	jmp	round@PLT                       # TAILCALL
.Lfunc_end693:
	.size	Math__Self_round_xPtrf64, .Lfunc_end693-Math__Self_round_xPtrf64
                                        # -- End function
	.globl	Math__Self_floor_xPtrf64        # -- Begin function Math__Self_floor_xPtrf64
	.p2align	4, 0x90
	.type	Math__Self_floor_xPtrf64,@function
Math__Self_floor_xPtrf64:               # @Math__Self_floor_xPtrf64
# %bb.0:
	jmp	floor@PLT                       # TAILCALL
.Lfunc_end694:
	.size	Math__Self_floor_xPtrf64, .Lfunc_end694-Math__Self_floor_xPtrf64
                                        # -- End function
	.globl	Math__Self_ceiling_xPtrf64      # -- Begin function Math__Self_ceiling_xPtrf64
	.p2align	4, 0x90
	.type	Math__Self_ceiling_xPtrf64,@function
Math__Self_ceiling_xPtrf64:             # @Math__Self_ceiling_xPtrf64
# %bb.0:
	jmp	ceil@PLT                        # TAILCALL
.Lfunc_end695:
	.size	Math__Self_ceiling_xPtrf64, .Lfunc_end695-Math__Self_ceiling_xPtrf64
                                        # -- End function
	.globl	_size_Integer                   # -- Begin function _size_Integer
	.p2align	4, 0x90
	.type	_size_Integer,@function
_size_Integer:                          # @_size_Integer
# %bb.0:
	movl	$4, %eax
	movl	$4, %edx
	retq
.Lfunc_end696:
	.size	_size_Integer, .Lfunc_end696-_size_Integer
                                        # -- End function
	.globl	Integer_B_init_valuePtri32      # -- Begin function Integer_B_init_valuePtri32
	.p2align	4, 0x90
	.type	Integer_B_init_valuePtri32,@function
Integer_B_init_valuePtri32:             # @Integer_B_init_valuePtri32
# %bb.0:
	movq	128(%rdi), %rax
	retq
.Lfunc_end697:
	.size	Integer_B_init_valuePtri32, .Lfunc_end697-Integer_B_init_valuePtri32
                                        # -- End function
	.globl	Integer_B__ADD_otherPtri32      # -- Begin function Integer_B__ADD_otherPtri32
	.p2align	4, 0x90
	.type	Integer_B__ADD_otherPtri32,@function
Integer_B__ADD_otherPtri32:             # @Integer_B__ADD_otherPtri32
# %bb.0:
	movq	136(%rdi), %rax
	retq
.Lfunc_end698:
	.size	Integer_B__ADD_otherPtri32, .Lfunc_end698-Integer_B__ADD_otherPtri32
                                        # -- End function
	.globl	Integer_B__SUB_otherPtri32      # -- Begin function Integer_B__SUB_otherPtri32
	.p2align	4, 0x90
	.type	Integer_B__SUB_otherPtri32,@function
Integer_B__SUB_otherPtri32:             # @Integer_B__SUB_otherPtri32
# %bb.0:
	movq	144(%rdi), %rax
	retq
.Lfunc_end699:
	.size	Integer_B__SUB_otherPtri32, .Lfunc_end699-Integer_B__SUB_otherPtri32
                                        # -- End function
	.globl	Integer_B__MUL_otherPtri32      # -- Begin function Integer_B__MUL_otherPtri32
	.p2align	4, 0x90
	.type	Integer_B__MUL_otherPtri32,@function
Integer_B__MUL_otherPtri32:             # @Integer_B__MUL_otherPtri32
# %bb.0:
	movq	152(%rdi), %rax
	retq
.Lfunc_end700:
	.size	Integer_B__MUL_otherPtri32, .Lfunc_end700-Integer_B__MUL_otherPtri32
                                        # -- End function
	.globl	Integer_B__DIV_otherPtri32      # -- Begin function Integer_B__DIV_otherPtri32
	.p2align	4, 0x90
	.type	Integer_B__DIV_otherPtri32,@function
Integer_B__DIV_otherPtri32:             # @Integer_B__DIV_otherPtri32
# %bb.0:
	movq	160(%rdi), %rax
	retq
.Lfunc_end701:
	.size	Integer_B__DIV_otherPtri32, .Lfunc_end701-Integer_B__DIV_otherPtri32
                                        # -- End function
	.globl	Integer_B_print_                # -- Begin function Integer_B_print_
	.p2align	4, 0x90
	.type	Integer_B_print_,@function
Integer_B_print_:                       # @Integer_B_print_
# %bb.0:
	movq	168(%rdi), %rax
	retq
.Lfunc_end702:
	.size	Integer_B_print_, .Lfunc_end702-Integer_B_print_
                                        # -- End function
	.globl	Integer_init_valuePtri32        # -- Begin function Integer_init_valuePtri32
	.p2align	4, 0x90
	.type	Integer_init_valuePtri32,@function
Integer_init_valuePtri32:               # @Integer_init_valuePtri32
	.cfi_startproc
# %bb.0:
	movq	%rsi, %rax
	movl	32(%rsp), %esi
	movq	40(%rdi), %rcx
	movabsq	$-735147942809078232, %rdx      # imm = 0xF5CC3AD74B817628
	imulq	8(%rdi), %rdx
	movq	%rdx, %r8
	shrq	$32, %r8
	xorq	%rdx, %r8
	andq	16(%rdi), %r8
	movslq	(%rcx,%r8,4), %rcx
	movq	(%rdi,%rcx,8), %rcx
	movq	8(%rcx), %rcx
	movq	%rax, %rdi
	jmpq	*%rcx                           # TAILCALL
.Lfunc_end703:
	.size	Integer_init_valuePtri32, .Lfunc_end703-Integer_init_valuePtri32
	.cfi_endproc
                                        # -- End function
	.globl	Integer__ADD_otherPtri32        # -- Begin function Integer__ADD_otherPtri32
	.p2align	4, 0x90
	.type	Integer__ADD_otherPtri32,@function
Integer__ADD_otherPtri32:               # @Integer__ADD_otherPtri32
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r13
	.cfi_def_cfa_offset 32
	pushq	%r12
	.cfi_def_cfa_offset 40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r13, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %rbx
	movq	40(%rsi), %rax
	movabsq	$-735147942809078232, %rcx      # imm = 0xF5CC3AD74B817628
	imulq	8(%rsi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rsi), %rdx
	movslq	(%rax,%rdx,4), %r13
	movq	(%rsi,%r13,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	movl	$4, %edi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r12
	movq	(%r15,%r13,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	addl	80(%rsp), %eax
	movq	Integer@GOTPCREL(%rip), %rcx
	movl	%eax, (%r12)
	movq	%r12, 8(%rbx)
	movq	%rcx, (%rbx)
	movl	$9, 24(%rbx)
	movq	%rbx, %rax
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end704:
	.size	Integer__ADD_otherPtri32, .Lfunc_end704-Integer__ADD_otherPtri32
	.cfi_endproc
                                        # -- End function
	.globl	Integer__SUB_otherPtri32        # -- Begin function Integer__SUB_otherPtri32
	.p2align	4, 0x90
	.type	Integer__SUB_otherPtri32,@function
Integer__SUB_otherPtri32:               # @Integer__SUB_otherPtri32
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r13
	.cfi_def_cfa_offset 32
	pushq	%r12
	.cfi_def_cfa_offset 40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r13, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %rbx
	movq	40(%rsi), %rax
	movabsq	$-735147942809078232, %rcx      # imm = 0xF5CC3AD74B817628
	imulq	8(%rsi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rsi), %rdx
	movslq	(%rax,%rdx,4), %r13
	movq	(%rsi,%r13,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	movl	$4, %edi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r12
	movq	(%r15,%r13,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	subl	80(%rsp), %eax
	movq	Integer@GOTPCREL(%rip), %rcx
	movl	%eax, (%r12)
	movq	%r12, 8(%rbx)
	movq	%rcx, (%rbx)
	movl	$9, 24(%rbx)
	movq	%rbx, %rax
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end705:
	.size	Integer__SUB_otherPtri32, .Lfunc_end705-Integer__SUB_otherPtri32
	.cfi_endproc
                                        # -- End function
	.globl	Integer__MUL_otherPtri32        # -- Begin function Integer__MUL_otherPtri32
	.p2align	4, 0x90
	.type	Integer__MUL_otherPtri32,@function
Integer__MUL_otherPtri32:               # @Integer__MUL_otherPtri32
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r13
	.cfi_def_cfa_offset 32
	pushq	%r12
	.cfi_def_cfa_offset 40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r13, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %rbx
	movq	40(%rsi), %rax
	movabsq	$-735147942809078232, %rcx      # imm = 0xF5CC3AD74B817628
	imulq	8(%rsi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rsi), %rdx
	movslq	(%rax,%rdx,4), %r13
	movq	(%rsi,%r13,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	movl	$4, %edi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r12
	movq	(%r15,%r13,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	imull	80(%rsp), %eax
	movq	Integer@GOTPCREL(%rip), %rcx
	movl	%eax, (%r12)
	movq	%r12, 8(%rbx)
	movq	%rcx, (%rbx)
	movl	$9, 24(%rbx)
	movq	%rbx, %rax
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end706:
	.size	Integer__MUL_otherPtri32, .Lfunc_end706-Integer__MUL_otherPtri32
	.cfi_endproc
                                        # -- End function
	.globl	Integer__DIV_otherPtri32        # -- Begin function Integer__DIV_otherPtri32
	.p2align	4, 0x90
	.type	Integer__DIV_otherPtri32,@function
Integer__DIV_otherPtri32:               # @Integer__DIV_otherPtri32
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r13
	.cfi_def_cfa_offset 32
	pushq	%r12
	.cfi_def_cfa_offset 40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r13, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %rbx
	movq	40(%rsi), %rax
	movabsq	$-735147942809078232, %rcx      # imm = 0xF5CC3AD74B817628
	imulq	8(%rsi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rsi), %rdx
	movslq	(%rax,%rdx,4), %r13
	movq	(%rsi,%r13,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	movl	$4, %edi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r12
	movq	(%r15,%r13,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	cltd
	idivl	80(%rsp)
	movq	Integer@GOTPCREL(%rip), %rcx
	movl	%eax, (%r12)
	movq	%r12, 8(%rbx)
	movq	%rcx, (%rbx)
	movl	$9, 24(%rbx)
	movq	%rbx, %rax
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end707:
	.size	Integer__DIV_otherPtri32, .Lfunc_end707-Integer__DIV_otherPtri32
	.cfi_endproc
                                        # -- End function
	.globl	Integer_print_                  # -- Begin function Integer_print_
	.p2align	4, 0x90
	.type	Integer_print_,@function
Integer_print_:                         # @Integer_print_
	.cfi_startproc
# %bb.0:                                # %IO_B__Self_print_xPtrf64__Self_print_xRepresentable__Self_print_xPtri8__Self_print_xString__Self_print_xPtri64__Self_print_xNil__Self_print_xCharacter__Self_print_xPtri1__Self_print_xPtri32.exit
	pushq	%rax
	.cfi_def_cfa_offset 16
	movq	40(%rdi), %rax
	movabsq	$-735147942809078232, %rcx      # imm = 0xF5CC3AD74B817628
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %rax
	movq	(%rdi,%rax,8), %rax
	movq	%rsi, %rdi
	callq	*(%rax)
	movq	i32_string@GOTPCREL(%rip), %rdi
	movl	%eax, %esi
	xorl	%eax, %eax
	popq	%rcx
	.cfi_def_cfa_offset 8
	jmp	printf@PLT                      # TAILCALL
.Lfunc_end708:
	.size	Integer_print_, .Lfunc_end708-Integer_print_
	.cfi_endproc
                                        # -- End function
	.globl	Integer_getter_value            # -- Begin function Integer_getter_value
	.p2align	4, 0x90
	.type	Integer_getter_value,@function
Integer_getter_value:                   # @Integer_getter_value
# %bb.0:
	movl	(%rdi), %eax
	retq
.Lfunc_end709:
	.size	Integer_getter_value, .Lfunc_end709-Integer_getter_value
                                        # -- End function
	.globl	Integer_setter_value            # -- Begin function Integer_setter_value
	.p2align	4, 0x90
	.type	Integer_setter_value,@function
Integer_setter_value:                   # @Integer_setter_value
# %bb.0:
	movl	%esi, (%rdi)
	retq
.Lfunc_end710:
	.size	Integer_setter_value, .Lfunc_end710-Integer_setter_value
                                        # -- End function
	.globl	_size_BigBoy                    # -- Begin function _size_BigBoy
	.p2align	4, 0x90
	.type	_size_BigBoy,@function
_size_BigBoy:                           # @_size_BigBoy
# %bb.0:
	movl	$1, %edx
	xorl	%eax, %eax
	retq
.Lfunc_end711:
	.size	_size_BigBoy, .Lfunc_end711-_size_BigBoy
                                        # -- End function
	.globl	BigBoy_B_introduce_             # -- Begin function BigBoy_B_introduce_
	.p2align	4, 0x90
	.type	BigBoy_B_introduce_,@function
BigBoy_B_introduce_:                    # @BigBoy_B_introduce_
# %bb.0:
	movq	88(%rdi), %rax
	retq
.Lfunc_end712:
	.size	BigBoy_B_introduce_, .Lfunc_end712-BigBoy_B_introduce_
                                        # -- End function
	.globl	BigBoy_B_repr_                  # -- Begin function BigBoy_B_repr_
	.p2align	4, 0x90
	.type	BigBoy_B_repr_,@function
BigBoy_B_repr_:                         # @BigBoy_B_repr_
# %bb.0:
	movq	96(%rdi), %rax
	retq
.Lfunc_end713:
	.size	BigBoy_B_repr_, .Lfunc_end713-BigBoy_B_repr_
                                        # -- End function
	.globl	BigBoy_introduce_               # -- Begin function BigBoy_introduce_
	.p2align	4, 0x90
	.type	BigBoy_introduce_,@function
BigBoy_introduce_:                      # @BigBoy_introduce_
# %bb.0:                                # %IO_B__Self_print_xPtrf64__Self_print_xRepresentable__Self_print_xPtri8__Self_print_xString__Self_print_xPtri64__Self_print_xNil__Self_print_xCharacter__Self_print_xPtri1__Self_print_xPtri32.exit
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	subq	$32, %rsp
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rbx
	movl	$11, %edi
	movq	%rbx, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r14
	movabsq	$6998674224423527752, %rax      # imm = 0x6120492065726548
	movq	%rax, (%r14)
	movw	$8557, 8(%r14)                  # imm = 0x216D
	movl	$16, %edi
	movq	%rbx, %rsi
	callq	bump_malloc_inner@PLT
	movq	String@GOTPCREL(%rip), %rcx
	movq	%rcx, (%rsp)
	movq	%rax, 8(%rsp)
	movl	$9, 24(%rsp)
	movq	%r14, (%rax)
	movabsq	$47244640266, %rcx              # imm = 0xB0000000A
	movq	%rcx, 8(%rax)
	movq	8(%rsp), %r15
	movl	8(%r15), %eax
	incl	%eax
	movslq	%eax, %rdi
	movq	%rbx, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %rbx
	movslq	8(%r15), %r14
	testq	%r14, %r14
	jle	.LBB714_2
# %bb.1:                                # %.lr.ph.i
	movq	(%r15), %rsi
	movq	%rbx, %rdi
	movq	%r14, %rdx
	callq	memcpy@PLT
.LBB714_2:                              # %String_c_string_.exit
	movb	$0, (%rbx,%r14)
	movq	%rbx, %rdi
	addq	$32, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	jmp	puts@PLT                        # TAILCALL
.Lfunc_end714:
	.size	BigBoy_introduce_, .Lfunc_end714-BigBoy_introduce_
                                        # -- End function
	.globl	_size_Integer2                  # -- Begin function _size_Integer2
	.p2align	4, 0x90
	.type	_size_Integer2,@function
_size_Integer2:                         # @_size_Integer2
# %bb.0:
	movl	$4, %eax
	movl	$4, %edx
	retq
.Lfunc_end715:
	.size	_size_Integer2, .Lfunc_end715-_size_Integer2
                                        # -- End function
	.globl	Integer2_B_value_               # -- Begin function Integer2_B_value_
	.p2align	4, 0x90
	.type	Integer2_B_value_,@function
Integer2_B_value_:                      # @Integer2_B_value_
# %bb.0:
	movq	152(%rdi), %rax
	retq
.Lfunc_end716:
	.size	Integer2_B_value_, .Lfunc_end716-Integer2_B_value_
                                        # -- End function
	.globl	Integer2_B_init_valuePtri32     # -- Begin function Integer2_B_init_valuePtri32
	.p2align	4, 0x90
	.type	Integer2_B_init_valuePtri32,@function
Integer2_B_init_valuePtri32:            # @Integer2_B_init_valuePtri32
# %bb.0:
	movq	160(%rdi), %rax
	retq
.Lfunc_end717:
	.size	Integer2_B_init_valuePtri32, .Lfunc_end717-Integer2_B_init_valuePtri32
                                        # -- End function
	.globl	Integer2_B__ADD_otherPtri32     # -- Begin function Integer2_B__ADD_otherPtri32
	.p2align	4, 0x90
	.type	Integer2_B__ADD_otherPtri32,@function
Integer2_B__ADD_otherPtri32:            # @Integer2_B__ADD_otherPtri32
# %bb.0:
	movq	168(%rdi), %rax
	retq
.Lfunc_end718:
	.size	Integer2_B__ADD_otherPtri32, .Lfunc_end718-Integer2_B__ADD_otherPtri32
                                        # -- End function
	.globl	Integer2_B__SUB_otherPtri32     # -- Begin function Integer2_B__SUB_otherPtri32
	.p2align	4, 0x90
	.type	Integer2_B__SUB_otherPtri32,@function
Integer2_B__SUB_otherPtri32:            # @Integer2_B__SUB_otherPtri32
# %bb.0:
	movq	176(%rdi), %rax
	retq
.Lfunc_end719:
	.size	Integer2_B__SUB_otherPtri32, .Lfunc_end719-Integer2_B__SUB_otherPtri32
                                        # -- End function
	.globl	Integer2_B__MUL_otherPtri32     # -- Begin function Integer2_B__MUL_otherPtri32
	.p2align	4, 0x90
	.type	Integer2_B__MUL_otherPtri32,@function
Integer2_B__MUL_otherPtri32:            # @Integer2_B__MUL_otherPtri32
# %bb.0:
	movq	184(%rdi), %rax
	retq
.Lfunc_end720:
	.size	Integer2_B__MUL_otherPtri32, .Lfunc_end720-Integer2_B__MUL_otherPtri32
                                        # -- End function
	.globl	Integer2_B__DIV_otherPtri32     # -- Begin function Integer2_B__DIV_otherPtri32
	.p2align	4, 0x90
	.type	Integer2_B__DIV_otherPtri32,@function
Integer2_B__DIV_otherPtri32:            # @Integer2_B__DIV_otherPtri32
# %bb.0:
	movq	192(%rdi), %rax
	retq
.Lfunc_end721:
	.size	Integer2_B__DIV_otherPtri32, .Lfunc_end721-Integer2_B__DIV_otherPtri32
                                        # -- End function
	.globl	Integer2_B_print_               # -- Begin function Integer2_B_print_
	.p2align	4, 0x90
	.type	Integer2_B_print_,@function
Integer2_B_print_:                      # @Integer2_B_print_
# %bb.0:
	movq	200(%rdi), %rax
	retq
.Lfunc_end722:
	.size	Integer2_B_print_, .Lfunc_end722-Integer2_B_print_
                                        # -- End function
	.globl	Integer2_B_introduce_           # -- Begin function Integer2_B_introduce_
	.p2align	4, 0x90
	.type	Integer2_B_introduce_,@function
Integer2_B_introduce_:                  # @Integer2_B_introduce_
# %bb.0:
	movq	208(%rdi), %rax
	retq
.Lfunc_end723:
	.size	Integer2_B_introduce_, .Lfunc_end723-Integer2_B_introduce_
                                        # -- End function
	.globl	Integer2_B_repr_                # -- Begin function Integer2_B_repr_
	.p2align	4, 0x90
	.type	Integer2_B_repr_,@function
Integer2_B_repr_:                       # @Integer2_B_repr_
# %bb.0:
	movq	216(%rdi), %rax
	retq
.Lfunc_end724:
	.size	Integer2_B_repr_, .Lfunc_end724-Integer2_B_repr_
                                        # -- End function
	.globl	Integer2_value_                 # -- Begin function Integer2_value_
	.p2align	4, 0x90
	.type	Integer2_value_,@function
Integer2_value_:                        # @Integer2_value_
	.cfi_startproc
# %bb.0:
	movq	40(%rdi), %rax
	movabsq	$1844024195090879880, %rcx      # imm = 0x19974A3C419E1588
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %rax
	movq	(%rdi,%rax,8), %rax
	movq	%rsi, %rdi
	jmpq	*(%rax)                         # TAILCALL
.Lfunc_end725:
	.size	Integer2_value_, .Lfunc_end725-Integer2_value_
	.cfi_endproc
                                        # -- End function
	.globl	Integer2_repr_                  # -- Begin function Integer2_repr_
	.p2align	4, 0x90
	.type	Integer2_repr_,@function
Integer2_repr_:                         # @Integer2_repr_
# %bb.0:
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	movq	%rdi, %rbx
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %r14
	movl	$9, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r15
	movabsq	$3635079343999577673, %rax      # imm = 0x3272656765746E49
	movq	%rax, (%r15)
	movl	$16, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	String@GOTPCREL(%rip), %rcx
	movq	%r15, (%rax)
	movabsq	$38654705672, %rdx              # imm = 0x900000008
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rbx)
	movq	%rax, 8(%rbx)
	movl	$9, 24(%rbx)
	movq	%rbx, %rax
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.Lfunc_end726:
	.size	Integer2_repr_, .Lfunc_end726-Integer2_repr_
                                        # -- End function
	.globl	Integer2_getter_value           # -- Begin function Integer2_getter_value
	.p2align	4, 0x90
	.type	Integer2_getter_value,@function
Integer2_getter_value:                  # @Integer2_getter_value
# %bb.0:
	movl	(%rdi), %eax
	retq
.Lfunc_end727:
	.size	Integer2_getter_value, .Lfunc_end727-Integer2_getter_value
                                        # -- End function
	.globl	Integer2_setter_value           # -- Begin function Integer2_setter_value
	.p2align	4, 0x90
	.type	Integer2_setter_value,@function
Integer2_setter_value:                  # @Integer2_setter_value
# %bb.0:
	movl	%esi, (%rdi)
	retq
.Lfunc_end728:
	.size	Integer2_setter_value, .Lfunc_end728-Integer2_setter_value
                                        # -- End function
	.globl	_size_Animal                    # -- Begin function _size_Animal
	.p2align	4, 0x90
	.type	_size_Animal,@function
_size_Animal:                           # @_size_Animal
# %bb.0:
	movl	$24, %eax
	movl	$8, %edx
	retq
.Lfunc_end729:
	.size	_size_Animal, .Lfunc_end729-_size_Animal
                                        # -- End function
	.globl	Animal_B_init_agePtri32_hpPtrf64_skillPtri32 # -- Begin function Animal_B_init_agePtri32_hpPtrf64_skillPtri32
	.p2align	4, 0x90
	.type	Animal_B_init_agePtri32_hpPtrf64_skillPtri32,@function
Animal_B_init_agePtri32_hpPtrf64_skillPtri32: # @Animal_B_init_agePtri32_hpPtrf64_skillPtri32
# %bb.0:
	movq	136(%rdi), %rax
	retq
.Lfunc_end730:
	.size	Animal_B_init_agePtri32_hpPtrf64_skillPtri32, .Lfunc_end730-Animal_B_init_agePtri32_hpPtrf64_skillPtri32
                                        # -- End function
	.globl	Animal_B_say_age_               # -- Begin function Animal_B_say_age_
	.p2align	4, 0x90
	.type	Animal_B_say_age_,@function
Animal_B_say_age_:                      # @Animal_B_say_age_
# %bb.0:
	movq	144(%rdi), %rax
	retq
.Lfunc_end731:
	.size	Animal_B_say_age_, .Lfunc_end731-Animal_B_say_age_
                                        # -- End function
	.globl	Animal_B_say_skill_             # -- Begin function Animal_B_say_skill_
	.p2align	4, 0x90
	.type	Animal_B_say_skill_,@function
Animal_B_say_skill_:                    # @Animal_B_say_skill_
# %bb.0:
	movq	152(%rdi), %rax
	retq
.Lfunc_end732:
	.size	Animal_B_say_skill_, .Lfunc_end732-Animal_B_say_skill_
                                        # -- End function
	.globl	Animal_B_say_messagePtri32      # -- Begin function Animal_B_say_messagePtri32
	.p2align	4, 0x90
	.type	Animal_B_say_messagePtri32,@function
Animal_B_say_messagePtri32:             # @Animal_B_say_messagePtri32
# %bb.0:
	movq	160(%rdi), %rax
	retq
.Lfunc_end733:
	.size	Animal_B_say_messagePtri32, .Lfunc_end733-Animal_B_say_messagePtri32
                                        # -- End function
	.globl	Animal_B_do_nothing_            # -- Begin function Animal_B_do_nothing_
	.p2align	4, 0x90
	.type	Animal_B_do_nothing_,@function
Animal_B_do_nothing_:                   # @Animal_B_do_nothing_
# %bb.0:
	movq	168(%rdi), %rax
	retq
.Lfunc_end734:
	.size	Animal_B_do_nothing_, .Lfunc_end734-Animal_B_do_nothing_
                                        # -- End function
	.globl	Animal_init_agePtri32_hpPtrf64_skillPtri32 # -- Begin function Animal_init_agePtri32_hpPtrf64_skillPtri32
	.p2align	4, 0x90
	.type	Animal_init_agePtri32_hpPtrf64_skillPtri32,@function
Animal_init_agePtri32_hpPtrf64_skillPtri32: # @Animal_init_agePtri32_hpPtrf64_skillPtri32
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	pushq	%rax
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movsd	%xmm0, (%rsp)                   # 8-byte Spill
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movl	80(%rsp), %ebp
	movl	72(%rsp), %esi
	movq	40(%rdi), %rax
	movabsq	$1075018126824711487, %rcx      # imm = 0xEEB3B4A687E253F
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %r15
	movq	(%rdi,%r15,8), %rax
	movq	%rbx, %rdi
	callq	*8(%rax)
	movq	8(%r14,%r15,8), %rax
	movq	%rbx, %rdi
	movsd	(%rsp), %xmm0                   # 8-byte Reload
                                        # xmm0 = mem[0],zero
	callq	*8(%rax)
	movq	16(%r14,%r15,8), %rax
	movq	8(%rax), %rax
	movq	%rbx, %rdi
	movl	%ebp, %esi
	addq	$8, %rsp
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	jmpq	*%rax                           # TAILCALL
.Lfunc_end735:
	.size	Animal_init_agePtri32_hpPtrf64_skillPtri32, .Lfunc_end735-Animal_init_agePtri32_hpPtrf64_skillPtri32
	.cfi_endproc
                                        # -- End function
	.globl	Animal_say_age_                 # -- Begin function Animal_say_age_
	.p2align	4, 0x90
	.type	Animal_say_age_,@function
Animal_say_age_:                        # @Animal_say_age_
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$40, %rsp
	.cfi_def_cfa_offset 96
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rdx, %rbx
	movq	%rsi, %r14
	movq	%rdi, %r15
	movq	40(%rdi), %rax
	movabsq	$1075018126824711487, %rcx      # imm = 0xEEB3B4A687E253F
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %r12
	movq	(%rdi,%r12,8), %rax
	movq	%rsi, %rdi
	callq	*(%rax)
	movl	%eax, %r13d
	movq	_parameterization_Ptri32@GOTPCREL(%rip), %rax
	movq	%rax, 32(%rsp)
	movq	48(%r15,%r12,8), %rax
	movq	i32_typ@GOTPCREL(%rip), %rbp
	movq	%rbp, 24(%rsp)
	leaq	24(%rsp), %r8
	movq	%r15, %rdi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movl	%r12d, %ecx
	callq	*%rax
	leaq	32(%rsp), %r10
	movq	%r15, %rdi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movl	%r12d, %ecx
	movq	%r15, %r8
	movq	%r14, %r9
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	(%r15,%r12,8), %rax
	movq	%r14, %rdi
	callq	*(%rax)
	movl	%eax, %r13d
	movq	_parameterization_Ptri32@GOTPCREL(%rip), %rax
	movq	%rax, 16(%rsp)
	movq	48(%r15,%r12,8), %rax
	movq	%rbp, 8(%rsp)
	leaq	8(%rsp), %r8
	movq	%r15, %rdi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movl	%r12d, %ecx
	callq	*%rax
	leaq	16(%rsp), %r10
	movq	%r15, %rdi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movl	%r12d, %ecx
	movq	%r15, %r8
	movq	%r14, %r9
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$72, %rsp
	.cfi_adjust_cfa_offset -72
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end736:
	.size	Animal_say_age_, .Lfunc_end736-Animal_say_age_
	.cfi_endproc
                                        # -- End function
	.globl	Animal_say_skill_               # -- Begin function Animal_say_skill_
	.p2align	4, 0x90
	.type	Animal_say_skill_,@function
Animal_say_skill_:                      # @Animal_say_skill_
	.cfi_startproc
# %bb.0:                                # %IO_B__Self_print_xPtrf64__Self_print_xRepresentable__Self_print_xPtri8__Self_print_xString__Self_print_xPtri64__Self_print_xNil__Self_print_xCharacter__Self_print_xPtri1__Self_print_xPtri32.exit
	pushq	%rax
	.cfi_def_cfa_offset 16
	movq	40(%rdi), %rax
	movabsq	$1075018126824711487, %rcx      # imm = 0xEEB3B4A687E253F
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %rax
	movq	16(%rdi,%rax,8), %rax
	movq	%rsi, %rdi
	callq	*(%rax)
	movq	i32_string@GOTPCREL(%rip), %rdi
	movl	%eax, %esi
	xorl	%eax, %eax
	popq	%rcx
	.cfi_def_cfa_offset 8
	jmp	printf@PLT                      # TAILCALL
.Lfunc_end737:
	.size	Animal_say_skill_, .Lfunc_end737-Animal_say_skill_
	.cfi_endproc
                                        # -- End function
	.globl	Animal_say_messagePtri32        # -- Begin function Animal_say_messagePtri32
	.p2align	4, 0x90
	.type	Animal_say_messagePtri32,@function
Animal_say_messagePtri32:               # @Animal_say_messagePtri32
# %bb.0:                                # %IO_B__Self_print_xPtrf64__Self_print_xRepresentable__Self_print_xPtri8__Self_print_xString__Self_print_xPtri64__Self_print_xNil__Self_print_xCharacter__Self_print_xPtri1__Self_print_xPtri32.exit
	movl	32(%rsp), %esi
	movq	i32_string@GOTPCREL(%rip), %rdi
	xorl	%eax, %eax
	jmp	printf@PLT                      # TAILCALL
.Lfunc_end738:
	.size	Animal_say_messagePtri32, .Lfunc_end738-Animal_say_messagePtri32
                                        # -- End function
	.globl	Animal_do_nothing_              # -- Begin function Animal_do_nothing_
	.p2align	4, 0x90
	.type	Animal_do_nothing_,@function
Animal_do_nothing_:                     # @Animal_do_nothing_
# %bb.0:
	pushq	%rbx
	movq	%rdi, %rbx
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	movl	$24, %edi
	callq	bump_malloc_inner@PLT
	movl	$5, (%rax)
	movabsq	$4617315517961601024, %rcx      # imm = 0x4014000000000000
	movq	%rcx, 8(%rax)
	movl	$5, 16(%rax)
	movq	Animal@GOTPCREL(%rip), %rcx
	movq	%rax, 16(%rbx)
	movq	%rcx, (%rbx)
	movq	$0, 24(%rbx)
	movl	$9, 32(%rbx)
	movq	%rbx, %rax
	popq	%rbx
	retq
.Lfunc_end739:
	.size	Animal_do_nothing_, .Lfunc_end739-Animal_do_nothing_
                                        # -- End function
	.globl	Animal_getter_skill             # -- Begin function Animal_getter_skill
	.p2align	4, 0x90
	.type	Animal_getter_skill,@function
Animal_getter_skill:                    # @Animal_getter_skill
# %bb.0:
	movl	16(%rdi), %eax
	retq
.Lfunc_end740:
	.size	Animal_getter_skill, .Lfunc_end740-Animal_getter_skill
                                        # -- End function
	.globl	Animal_setter_skill             # -- Begin function Animal_setter_skill
	.p2align	4, 0x90
	.type	Animal_setter_skill,@function
Animal_setter_skill:                    # @Animal_setter_skill
# %bb.0:
	movl	%esi, 16(%rdi)
	retq
.Lfunc_end741:
	.size	Animal_setter_skill, .Lfunc_end741-Animal_setter_skill
                                        # -- End function
	.globl	Animal_getter_hp                # -- Begin function Animal_getter_hp
	.p2align	4, 0x90
	.type	Animal_getter_hp,@function
Animal_getter_hp:                       # @Animal_getter_hp
# %bb.0:
	movsd	8(%rdi), %xmm0                  # xmm0 = mem[0],zero
	retq
.Lfunc_end742:
	.size	Animal_getter_hp, .Lfunc_end742-Animal_getter_hp
                                        # -- End function
	.globl	Animal_setter_hp                # -- Begin function Animal_setter_hp
	.p2align	4, 0x90
	.type	Animal_setter_hp,@function
Animal_setter_hp:                       # @Animal_setter_hp
# %bb.0:
	movsd	%xmm0, 8(%rdi)
	retq
.Lfunc_end743:
	.size	Animal_setter_hp, .Lfunc_end743-Animal_setter_hp
                                        # -- End function
	.globl	Animal_getter_age               # -- Begin function Animal_getter_age
	.p2align	4, 0x90
	.type	Animal_getter_age,@function
Animal_getter_age:                      # @Animal_getter_age
# %bb.0:
	movl	(%rdi), %eax
	retq
.Lfunc_end744:
	.size	Animal_getter_age, .Lfunc_end744-Animal_getter_age
                                        # -- End function
	.globl	Animal_setter_age               # -- Begin function Animal_setter_age
	.p2align	4, 0x90
	.type	Animal_setter_age,@function
Animal_setter_age:                      # @Animal_setter_age
# %bb.0:
	movl	%esi, (%rdi)
	retq
.Lfunc_end745:
	.size	Animal_setter_age, .Lfunc_end745-Animal_setter_age
                                        # -- End function
	.globl	_size_Beaver                    # -- Begin function _size_Beaver
	.p2align	4, 0x90
	.type	_size_Beaver,@function
_size_Beaver:                           # @_size_Beaver
# %bb.0:
	movl	$16, %eax
	movl	$8, %edx
	retq
.Lfunc_end746:
	.size	_size_Beaver, .Lfunc_end746-_size_Beaver
                                        # -- End function
	.globl	Beaver_B_init_colorPtri32_namePtrf64 # -- Begin function Beaver_B_init_colorPtri32_namePtrf64
	.p2align	4, 0x90
	.type	Beaver_B_init_colorPtri32_namePtrf64,@function
Beaver_B_init_colorPtri32_namePtrf64:   # @Beaver_B_init_colorPtri32_namePtrf64
# %bb.0:
	movq	112(%rdi), %rax
	retq
.Lfunc_end747:
	.size	Beaver_B_init_colorPtri32_namePtrf64, .Lfunc_end747-Beaver_B_init_colorPtri32_namePtrf64
                                        # -- End function
	.globl	Beaver_B__ADD_xPtri32           # -- Begin function Beaver_B__ADD_xPtri32
	.p2align	4, 0x90
	.type	Beaver_B__ADD_xPtri32,@function
Beaver_B__ADD_xPtri32:                  # @Beaver_B__ADD_xPtri32
# %bb.0:
	movq	120(%rdi), %rax
	retq
.Lfunc_end748:
	.size	Beaver_B__ADD_xPtri32, .Lfunc_end748-Beaver_B__ADD_xPtri32
                                        # -- End function
	.globl	Beaver_B_say_color_             # -- Begin function Beaver_B_say_color_
	.p2align	4, 0x90
	.type	Beaver_B_say_color_,@function
Beaver_B_say_color_:                    # @Beaver_B_say_color_
# %bb.0:
	movq	128(%rdi), %rax
	retq
.Lfunc_end749:
	.size	Beaver_B_say_color_, .Lfunc_end749-Beaver_B_say_color_
                                        # -- End function
	.globl	Beaver_init_colorPtri32_namePtrf64 # -- Begin function Beaver_init_colorPtri32_namePtrf64
	.p2align	4, 0x90
	.type	Beaver_init_colorPtri32_namePtrf64,@function
Beaver_init_colorPtri32_namePtrf64:     # @Beaver_init_colorPtri32_namePtrf64
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	subq	$16, %rsp
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movsd	%xmm0, 8(%rsp)                  # 8-byte Spill
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movl	72(%rsp), %esi
	movq	40(%rdi), %rax
	movabsq	$-6124772949900838462, %rcx     # imm = 0xAB006F73D73D39C2
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %r15
	movq	(%rdi,%r15,8), %rax
	movq	%rbx, %rdi
	callq	*8(%rax)
	movq	8(%r14,%r15,8), %rax
	movq	8(%rax), %rax
	movq	%rbx, %rdi
	movsd	8(%rsp), %xmm0                  # 8-byte Reload
                                        # xmm0 = mem[0],zero
	addq	$16, %rsp
	.cfi_def_cfa_offset 32
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	jmpq	*%rax                           # TAILCALL
.Lfunc_end750:
	.size	Beaver_init_colorPtri32_namePtrf64, .Lfunc_end750-Beaver_init_colorPtri32_namePtrf64
	.cfi_endproc
                                        # -- End function
	.globl	Beaver__ADD_xPtri32             # -- Begin function Beaver__ADD_xPtri32
	.p2align	4, 0x90
	.type	Beaver__ADD_xPtri32,@function
Beaver__ADD_xPtri32:                    # @Beaver__ADD_xPtri32
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movq	40(%rdi), %rax
	movabsq	$-6124772949900838462, %rcx     # imm = 0xAB006F73D73D39C2
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %r15
	movq	(%rdi,%r15,8), %rax
	movq	%rsi, %rdi
	callq	*(%rax)
	addl	56(%rsp), %eax
	movq	(%r14,%r15,8), %rcx
	movq	8(%rcx), %rcx
	movq	%rbx, %rdi
	movl	%eax, %esi
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	jmpq	*%rcx                           # TAILCALL
.Lfunc_end751:
	.size	Beaver__ADD_xPtri32, .Lfunc_end751-Beaver__ADD_xPtri32
	.cfi_endproc
                                        # -- End function
	.globl	Beaver_say_color_               # -- Begin function Beaver_say_color_
	.p2align	4, 0x90
	.type	Beaver_say_color_,@function
Beaver_say_color_:                      # @Beaver_say_color_
	.cfi_startproc
# %bb.0:                                # %IO_B__Self_print_xPtrf64__Self_print_xRepresentable__Self_print_xPtri8__Self_print_xString__Self_print_xPtri64__Self_print_xNil__Self_print_xCharacter__Self_print_xPtri1__Self_print_xPtri32.exit
	pushq	%rax
	.cfi_def_cfa_offset 16
	movq	40(%rdi), %rax
	movabsq	$-6124772949900838462, %rcx     # imm = 0xAB006F73D73D39C2
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %rax
	movq	(%rdi,%rax,8), %rax
	movq	%rsi, %rdi
	callq	*(%rax)
	movq	i32_string@GOTPCREL(%rip), %rdi
	movl	%eax, %esi
	xorl	%eax, %eax
	popq	%rcx
	.cfi_def_cfa_offset 8
	jmp	printf@PLT                      # TAILCALL
.Lfunc_end752:
	.size	Beaver_say_color_, .Lfunc_end752-Beaver_say_color_
	.cfi_endproc
                                        # -- End function
	.globl	Beaver_getter_name              # -- Begin function Beaver_getter_name
	.p2align	4, 0x90
	.type	Beaver_getter_name,@function
Beaver_getter_name:                     # @Beaver_getter_name
# %bb.0:
	movsd	8(%rdi), %xmm0                  # xmm0 = mem[0],zero
	retq
.Lfunc_end753:
	.size	Beaver_getter_name, .Lfunc_end753-Beaver_getter_name
                                        # -- End function
	.globl	Beaver_setter_name              # -- Begin function Beaver_setter_name
	.p2align	4, 0x90
	.type	Beaver_setter_name,@function
Beaver_setter_name:                     # @Beaver_setter_name
# %bb.0:
	movsd	%xmm0, 8(%rdi)
	retq
.Lfunc_end754:
	.size	Beaver_setter_name, .Lfunc_end754-Beaver_setter_name
                                        # -- End function
	.globl	Beaver_getter_color             # -- Begin function Beaver_getter_color
	.p2align	4, 0x90
	.type	Beaver_getter_color,@function
Beaver_getter_color:                    # @Beaver_getter_color
# %bb.0:
	movl	(%rdi), %eax
	retq
.Lfunc_end755:
	.size	Beaver_getter_color, .Lfunc_end755-Beaver_getter_color
                                        # -- End function
	.globl	Beaver_setter_color             # -- Begin function Beaver_setter_color
	.p2align	4, 0x90
	.type	Beaver_setter_color,@function
Beaver_setter_color:                    # @Beaver_setter_color
# %bb.0:
	movl	%esi, (%rdi)
	retq
.Lfunc_end756:
	.size	Beaver_setter_color, .Lfunc_end756-Beaver_setter_color
                                        # -- End function
	.globl	_size_ListNode                  # -- Begin function _size_ListNode
	.p2align	4, 0x90
	.type	_size_ListNode,@function
_size_ListNode:                         # @_size_ListNode
# %bb.0:
	movl	$40, %eax
	movl	$8, %edx
	retq
.Lfunc_end757:
	.size	_size_ListNode, .Lfunc_end757-_size_ListNode
                                        # -- End function
	.globl	ListNode_B_init_dataPtri32      # -- Begin function ListNode_B_init_dataPtri32
	.p2align	4, 0x90
	.type	ListNode_B_init_dataPtri32,@function
ListNode_B_init_dataPtri32:             # @ListNode_B_init_dataPtri32
# %bb.0:
	movq	128(%rdi), %rax
	retq
.Lfunc_end758:
	.size	ListNode_B_init_dataPtri32, .Lfunc_end758-ListNode_B_init_dataPtri32
                                        # -- End function
	.globl	ListNode_B_push_nextListNode    # -- Begin function ListNode_B_push_nextListNode
	.p2align	4, 0x90
	.type	ListNode_B_push_nextListNode,@function
ListNode_B_push_nextListNode:           # @ListNode_B_push_nextListNode
# %bb.0:
	movq	136(%rdi), %rax
	retq
.Lfunc_end759:
	.size	ListNode_B_push_nextListNode, .Lfunc_end759-ListNode_B_push_nextListNode
                                        # -- End function
	.globl	ListNode_B_next_                # -- Begin function ListNode_B_next_
	.p2align	4, 0x90
	.type	ListNode_B_next_,@function
ListNode_B_next_:                       # @ListNode_B_next_
# %bb.0:
	movq	144(%rdi), %rax
	retq
.Lfunc_end760:
	.size	ListNode_B_next_, .Lfunc_end760-ListNode_B_next_
                                        # -- End function
	.globl	ListNode_B_data_                # -- Begin function ListNode_B_data_
	.p2align	4, 0x90
	.type	ListNode_B_data_,@function
ListNode_B_data_:                       # @ListNode_B_data_
# %bb.0:
	movq	152(%rdi), %rax
	retq
.Lfunc_end761:
	.size	ListNode_B_data_, .Lfunc_end761-ListNode_B_data_
                                        # -- End function
	.globl	ListNode_B_iterator_            # -- Begin function ListNode_B_iterator_
	.p2align	4, 0x90
	.type	ListNode_B_iterator_,@function
ListNode_B_iterator_:                   # @ListNode_B_iterator_
# %bb.0:
	movq	160(%rdi), %rax
	retq
.Lfunc_end762:
	.size	ListNode_B_iterator_, .Lfunc_end762-ListNode_B_iterator_
                                        # -- End function
	.globl	ListNode_init_dataPtri32        # -- Begin function ListNode_init_dataPtri32
	.p2align	4, 0x90
	.type	ListNode_init_dataPtri32,@function
ListNode_init_dataPtri32:               # @ListNode_init_dataPtri32
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movl	56(%rsp), %esi
	movq	40(%rdi), %rax
	movabsq	$-1756024950533091476, %rcx     # imm = 0xE7A1589C7EC08F6C
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %r15
	movq	(%rdi,%r15,8), %rax
	movq	%rbx, %rdi
	callq	*8(%rax)
	movq	8(%r14,%r15,8), %rax
	movq	8(%rax), %rax
	movq	nil_typ@GOTPCREL(%rip), %rsi
	movq	%rbx, %rdi
	xorl	%r8d, %r8d
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	jmpq	*%rax                           # TAILCALL
.Lfunc_end763:
	.size	ListNode_init_dataPtri32, .Lfunc_end763-ListNode_init_dataPtri32
	.cfi_endproc
                                        # -- End function
	.globl	ListNode_push_nextListNode      # -- Begin function ListNode_push_nextListNode
	.p2align	4, 0x90
	.type	ListNode_push_nextListNode,@function
ListNode_push_nextListNode:             # @ListNode_push_nextListNode
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r13
	.cfi_def_cfa_offset 32
	pushq	%r12
	.cfi_def_cfa_offset 40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r13, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rdi, %rbx
	movq	88(%rsp), %r14
	movq	96(%rsp), %r12
	movq	80(%rsp), %r15
	movq	40(%rsi), %rax
	movabsq	$-1756024950533091476, %r13     # imm = 0xE7A1589C7EC08F6C
	movq	8(%rsi), %rcx
	imulq	%r13, %rcx
	movq	%rcx, %rdi
	shrq	$32, %rdi
	xorq	%rcx, %rdi
	andq	16(%rsi), %rdi
	movslq	(%rax,%rdi,4), %rax
	movq	40(%r15), %rcx
	movq	8(%r15), %rdi
	imulq	%r13, %rdi
	movq	%rdi, %r8
	shrq	$32, %r8
	xorq	%rdi, %r8
	andq	16(%r15), %r8
	movl	(%rcx,%r8,4), %r8d
	movq	8(%rsi,%rax,8), %rax
	movq	%rdx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	movq	%r12, %rcx
	callq	*8(%rax)
	movq	40(%r15), %rax
	imulq	8(%r15), %r13
	movq	%r13, %rcx
	shrq	$32, %rcx
	xorq	%r13, %rcx
	andq	16(%r15), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	%r12, 16(%rbx)
	movq	%r14, 8(%rbx)
	movq	%r15, (%rbx)
	movl	%eax, 24(%rbx)
	movq	%rbx, %rax
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end764:
	.size	ListNode_push_nextListNode, .Lfunc_end764-ListNode_push_nextListNode
	.cfi_endproc
                                        # -- End function
	.globl	ListNode_next_                  # -- Begin function ListNode_next_
	.p2align	4, 0x90
	.type	ListNode_next_,@function
ListNode_next_:                         # @ListNode_next_
	.cfi_startproc
# %bb.0:
	pushq	%rbx
	.cfi_def_cfa_offset 16
	subq	$48, %rsp
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movq	40(%rsi), %rax
	movabsq	$-1756024950533091476, %rcx     # imm = 0xE7A1589C7EC08F6C
	imulq	8(%rsi), %rcx
	movq	%rcx, %rdi
	shrq	$32, %rdi
	xorq	%rcx, %rdi
	andq	16(%rsi), %rdi
	movslq	(%rax,%rdi,4), %rax
	movq	8(%rsi,%rax,8), %rax
	movq	%rsp, %rdi
	movq	%rdx, %rsi
	callq	*(%rax)
	movq	24(%rsp), %rax
	movl	32(%rsp), %ecx
	movq	(%rsp), %rdx
	movq	16(%rsp), %rsi
	movq	%rdx, (%rbx)
	movl	%ecx, 32(%rbx)
	movq	%rsi, 16(%rbx)
	movq	%rax, 24(%rbx)
	movq	%rbx, %rax
	addq	$48, %rsp
	.cfi_def_cfa_offset 16
	popq	%rbx
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end765:
	.size	ListNode_next_, .Lfunc_end765-ListNode_next_
	.cfi_endproc
                                        # -- End function
	.globl	ListNode_data_                  # -- Begin function ListNode_data_
	.p2align	4, 0x90
	.type	ListNode_data_,@function
ListNode_data_:                         # @ListNode_data_
	.cfi_startproc
# %bb.0:
	movq	40(%rdi), %rax
	movabsq	$-1756024950533091476, %rcx     # imm = 0xE7A1589C7EC08F6C
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %rax
	movq	(%rdi,%rax,8), %rax
	movq	%rsi, %rdi
	jmpq	*(%rax)                         # TAILCALL
.Lfunc_end766:
	.size	ListNode_data_, .Lfunc_end766-ListNode_data_
	.cfi_endproc
                                        # -- End function
	.globl	ListNode_iterator_              # -- Begin function ListNode_iterator_
	.p2align	4, 0x90
	.type	ListNode_iterator_,@function
ListNode_iterator_:                     # @ListNode_iterator_
# %bb.0:
	pushq	%rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	movq	%rcx, %r14
	movq	%rdx, %r15
	movq	%rsi, %r12
	movq	%rdi, %rbx
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %r13
	movl	$40, %edi
	movq	%r13, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %rbp
	movl	$0, (%rax)
	movq	nil_typ@GOTPCREL(%rip), %rax
	movq	%rax, 8(%rbp)
	movq	40(%r12), %rax
	movabsq	$-1756024950533091476, %rcx     # imm = 0xE7A1589C7EC08F6C
	imulq	8(%r12), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%r12), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	%r12, 8(%rbp)
	movq	%r14, 24(%rbp)
	movq	%r15, 16(%rbp)
	movl	%eax, 32(%rbp)
	movl	$32, %edi
	movq	%r13, %rsi
	callq	bump_malloc_inner@PLT
	movq	ListIterator@GOTPCREL(%rip), %rcx
	movq	ListNode@GOTPCREL(%rip), %rdx
	movq	%rdx, (%rax)
	movq	%rbp, 8(%rax)
	movl	$9, 24(%rax)
	movq	%rcx, (%rbx)
	movq	%rax, 8(%rbx)
	movl	$9, 24(%rbx)
	movq	%rbx, %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end767:
	.size	ListNode_iterator_, .Lfunc_end767-ListNode_iterator_
                                        # -- End function
	.globl	_size_ListIterator              # -- Begin function _size_ListIterator
	.p2align	4, 0x90
	.type	_size_ListIterator,@function
_size_ListIterator:                     # @_size_ListIterator
# %bb.0:
	movl	$32, %eax
	movl	$8, %edx
	retq
.Lfunc_end768:
	.size	_size_ListIterator, .Lfunc_end768-_size_ListIterator
                                        # -- End function
	.globl	ListIterator_B_init_nodeListNode # -- Begin function ListIterator_B_init_nodeListNode
	.p2align	4, 0x90
	.type	ListIterator_B_init_nodeListNode,@function
ListIterator_B_init_nodeListNode:       # @ListIterator_B_init_nodeListNode
# %bb.0:
	movq	96(%rdi), %rax
	retq
.Lfunc_end769:
	.size	ListIterator_B_init_nodeListNode, .Lfunc_end769-ListIterator_B_init_nodeListNode
                                        # -- End function
	.globl	ListIterator_B_next_            # -- Begin function ListIterator_B_next_
	.p2align	4, 0x90
	.type	ListIterator_B_next_,@function
ListIterator_B_next_:                   # @ListIterator_B_next_
# %bb.0:
	movq	104(%rdi), %rax
	retq
.Lfunc_end770:
	.size	ListIterator_B_next_, .Lfunc_end770-ListIterator_B_next_
                                        # -- End function
	.globl	ListIterator_init_nodeListNode  # -- Begin function ListIterator_init_nodeListNode
	.p2align	4, 0x90
	.type	ListIterator_init_nodeListNode,@function
ListIterator_init_nodeListNode:         # @ListIterator_init_nodeListNode
	.cfi_startproc
# %bb.0:
	movq	%rsi, %rax
	movq	40(%rsp), %rdx
	movq	48(%rsp), %rcx
	movq	32(%rsp), %rsi
	movq	40(%rdi), %r8
	movabsq	$-5838699946612561379, %r9      # imm = 0xAEF8C5555410EA1D
	imulq	8(%rdi), %r9
	movq	%r9, %r10
	shrq	$32, %r10
	xorq	%r9, %r10
	andq	16(%rdi), %r10
	movslq	(%r8,%r10,4), %r9
	movq	40(%rsi), %r8
	movabsq	$-1756024950533091476, %r10     # imm = 0xE7A1589C7EC08F6C
	imulq	8(%rsi), %r10
	movq	%r10, %r11
	shrq	$32, %r11
	xorq	%r10, %r11
	andq	16(%rsi), %r11
	movl	(%r8,%r11,4), %r8d
	movq	(%rdi,%r9,8), %rdi
	movq	8(%rdi), %r9
	movq	%rax, %rdi
	jmpq	*%r9                            # TAILCALL
.Lfunc_end771:
	.size	ListIterator_init_nodeListNode, .Lfunc_end771-ListIterator_init_nodeListNode
	.cfi_endproc
                                        # -- End function
	.globl	ListIterator_next_              # -- Begin function ListIterator_next_
	.p2align	4, 0x90
	.type	ListIterator_next_,@function
ListIterator_next_:                     # @ListIterator_next_
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$184, %rsp
	.cfi_def_cfa_offset 240
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rsi, %r15
	movq	%rdi, %rbx
	movq	40(%rsi), %rax
	movabsq	$-5838699946612561379, %rcx     # imm = 0xAEF8C5555410EA1D
	imulq	8(%rsi), %rcx
	movq	%rcx, %rsi
	shrq	$32, %rsi
	xorq	%rcx, %rsi
	andq	16(%r15), %rsi
	movslq	(%rax,%rsi,4), %rax
	movq	%rax, 16(%rsp)                  # 8-byte Spill
	movq	(%r15,%rax,8), %rax
	leaq	64(%rsp), %rdi
	movq	%rdx, 24(%rsp)                  # 8-byte Spill
	movq	%rdx, %rsi
	callq	*(%rax)
	movslq	88(%rsp), %r12
	movq	80(%rsp), %r13
	movq	64(%rsp), %rbp
	movq	72(%rsp), %r14
	leaq	8(%rsp), %r8
	movq	%rbp, %rdi
	movq	%r14, %rsi
	movq	%r13, %rdx
	movl	%r12d, %ecx
	callq	*32(%rbp,%r12,8)
	leaq	128(%rsp), %rdi
	movq	%rbp, %rsi
	movq	%r14, %rdx
	movq	%r13, %rcx
	movl	%r12d, %r8d
	movq	%rbp, %r9
	leaq	8(%rsp), %r10
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	128(%rsp), %rsi
	movq	nil_typ@GOTPCREL(%rip), %rax
	cmpq	%rax, %rsi
	sete	%cl
	testq	%rsi, %rsi
	sete	%dl
	orb	%cl, %dl
	jne	.LBB772_1
# %bb.2:
	movabsq	$-1756024950533091476, %rax     # imm = 0xE7A1589C7EC08F6C
	movq	152(%rsp), %rcx
	movq	144(%rsp), %rdx
	movq	40(%rsi), %rdi
	imulq	8(%rsi), %rax
	movq	%rax, %r8
	shrq	$32, %r8
	xorq	%rax, %r8
	andq	16(%rsi), %r8
	movl	(%rdi,%r8,4), %r8d
	movq	16(%rsp), %r12                  # 8-byte Reload
	movq	(%r15,%r12,8), %rax
	movq	24(%rsp), %r14                  # 8-byte Reload
	movq	%r14, %rdi
	callq	*8(%rax)
	movq	(%r15,%r12,8), %rax
	leaq	32(%rsp), %rdi
	movq	%r14, %rsi
	callq	*(%rax)
	movl	56(%rsp), %ecx
	movq	48(%rsp), %rdx
	movq	32(%rsp), %rax
	movq	40(%rsp), %rsi
	movq	%rax, 96(%rsp)
	movq	%rsi, 104(%rsp)
	movq	%rdx, 112(%rsp)
	movl	%ecx, 120(%rsp)
	jmp	.LBB772_3
.LBB772_1:
	xorl	%ecx, %ecx
                                        # implicit-def: $rsi
                                        # implicit-def: $rdx
.LBB772_3:
	movq	%rsi, 16(%rbx)
	movq	%rax, (%rbx)
	movq	%rdx, 24(%rbx)
	movl	%ecx, 32(%rbx)
	movq	%rbx, %rax
	addq	$184, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end772:
	.size	ListIterator_next_, .Lfunc_end772-ListIterator_next_
	.cfi_endproc
                                        # -- End function
	.globl	ListIterator_getter_node        # -- Begin function ListIterator_getter_node
	.p2align	4, 0x90
	.type	ListIterator_getter_node,@function
ListIterator_getter_node:               # @ListIterator_getter_node
# %bb.0:
	movq	%rdi, %rax
	movq	(%rsi), %rcx
	movq	8(%rsi), %rdx
	movq	16(%rsi), %rdi
	movl	24(%rsi), %esi
	movl	%esi, 24(%rax)
	movq	%rdi, 16(%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	retq
.Lfunc_end773:
	.size	ListIterator_getter_node, .Lfunc_end773-ListIterator_getter_node
                                        # -- End function
	.globl	ListIterator_setter_node        # -- Begin function ListIterator_setter_node
	.p2align	4, 0x90
	.type	ListIterator_setter_node,@function
ListIterator_setter_node:               # @ListIterator_setter_node
# %bb.0:
	movq	%rsi, (%rdi)
	movq	%rdx, 8(%rdi)
	movq	%rcx, 16(%rdi)
	movl	%r8d, 24(%rdi)
	retq
.Lfunc_end774:
	.size	ListIterator_setter_node, .Lfunc_end774-ListIterator_setter_node
                                        # -- End function
	.globl	ListNode_getter_next            # -- Begin function ListNode_getter_next
	.p2align	4, 0x90
	.type	ListNode_getter_next,@function
ListNode_getter_next:                   # @ListNode_getter_next
# %bb.0:
	movq	%rdi, %rax
	movl	32(%rsi), %ecx
	movq	8(%rsi), %rdx
	movq	16(%rsi), %rdi
	movq	24(%rsi), %rsi
	movq	%rsi, 24(%rax)
	movq	%rdi, 16(%rax)
	movl	%ecx, 32(%rax)
	movq	%rdx, (%rax)
	retq
.Lfunc_end775:
	.size	ListNode_getter_next, .Lfunc_end775-ListNode_getter_next
                                        # -- End function
	.globl	ListNode_setter_next            # -- Begin function ListNode_setter_next
	.p2align	4, 0x90
	.type	ListNode_setter_next,@function
ListNode_setter_next:                   # @ListNode_setter_next
# %bb.0:
	movq	%rsi, 8(%rdi)
	movq	%rcx, 24(%rdi)
	movq	%rdx, 16(%rdi)
	movl	%r8d, 32(%rdi)
	retq
.Lfunc_end776:
	.size	ListNode_setter_next, .Lfunc_end776-ListNode_setter_next
                                        # -- End function
	.globl	ListNode_getter_data            # -- Begin function ListNode_getter_data
	.p2align	4, 0x90
	.type	ListNode_getter_data,@function
ListNode_getter_data:                   # @ListNode_getter_data
# %bb.0:
	movl	(%rdi), %eax
	retq
.Lfunc_end777:
	.size	ListNode_getter_data, .Lfunc_end777-ListNode_getter_data
                                        # -- End function
	.globl	ListNode_setter_data            # -- Begin function ListNode_setter_data
	.p2align	4, 0x90
	.type	ListNode_setter_data,@function
ListNode_setter_data:                   # @ListNode_setter_data
# %bb.0:
	movl	%esi, (%rdi)
	retq
.Lfunc_end778:
	.size	ListNode_setter_data, .Lfunc_end778-ListNode_setter_data
                                        # -- End function
	.globl	_size_Bard                      # -- Begin function _size_Bard
	.p2align	4, 0x90
	.type	_size_Bard,@function
_size_Bard:                             # @_size_Bard
# %bb.0:
	movl	$1, %edx
	xorl	%eax, %eax
	retq
.Lfunc_end779:
	.size	_size_Bard, .Lfunc_end779-_size_Bard
                                        # -- End function
	.globl	Bard_B_init_                    # -- Begin function Bard_B_init_
	.p2align	4, 0x90
	.type	Bard_B_init_,@function
Bard_B_init_:                           # @Bard_B_init_
# %bb.0:
	movq	88(%rdi), %rax
	retq
.Lfunc_end780:
	.size	Bard_B_init_, .Lfunc_end780-Bard_B_init_
                                        # -- End function
	.globl	Bard_B_take_aAnimal_bBeaver_take_aPtri32_bPtri32_take_aPtrf64_bPtrf64_take_aPtri32_bPtrf64 # -- Begin function Bard_B_take_aAnimal_bBeaver_take_aPtri32_bPtri32_take_aPtrf64_bPtrf64_take_aPtri32_bPtrf64
	.p2align	4, 0x90
	.type	Bard_B_take_aAnimal_bBeaver_take_aPtri32_bPtri32_take_aPtrf64_bPtrf64_take_aPtri32_bPtrf64,@function
Bard_B_take_aAnimal_bBeaver_take_aPtri32_bPtri32_take_aPtrf64_bPtrf64_take_aPtri32_bPtrf64: # @Bard_B_take_aAnimal_bBeaver_take_aPtri32_bPtri32_take_aPtrf64_bPtrf64_take_aPtri32_bPtrf64
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	pushq	%rax
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%r8, %r14
	movq	%rdi, %rbx
	movq	(%r8), %rax
	movq	8(%rax), %r15
	movq	16(%rax), %rbp
	movq	24(%rax), %r13
	movq	32(%rax), %r12
	movq	Animal@GOTPCREL(%rip), %rcx
	movabsq	$1075018126824711487, %rdx      # imm = 0xEEB3B4A687E253F
	movq	%rbp, %rdi
	movq	%r15, %rsi
	movq	%r12, %r8
	callq	*%r13
	movl	$3, %ecx
	testb	$1, %al
	jne	.LBB781_3
# %bb.1:
	movabsq	$-757315540097298781, %rax      # imm = 0xF57D7987599E0EA3
	movq	f64_typ@GOTPCREL(%rip), %rcx
	movq	%rbp, %rdi
	movq	%r15, %rsi
	movq	%rax, %r15
	movq	%rax, %rdx
	movq	%r12, %r8
	callq	*%r13
	movl	$5, %ecx
	testb	$1, %al
	jne	.LBB781_3
# %bb.2:
	movq	8(%r14), %rax
	movq	8(%rax), %rsi
	movq	16(%rax), %rdi
	movq	32(%rax), %r8
	movq	f64_typ@GOTPCREL(%rip), %rcx
	movq	%r15, %rdx
	callq	*24(%rax)
	movzbl	%al, %eax
	andl	$1, %eax
	leal	4(%rax,%rax), %ecx
.LBB781_3:
	movl	%ecx, %eax
	movq	72(%rbx,%rax,8), %rax
	addq	$8, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end781:
	.size	Bard_B_take_aAnimal_bBeaver_take_aPtri32_bPtri32_take_aPtrf64_bPtrf64_take_aPtri32_bPtrf64, .Lfunc_end781-Bard_B_take_aAnimal_bBeaver_take_aPtri32_bPtri32_take_aPtrf64_bPtrf64_take_aPtri32_bPtrf64
	.cfi_endproc
                                        # -- End function
	.globl	Bard_init_                      # -- Begin function Bard_init_
	.p2align	4, 0x90
	.type	Bard_init_,@function
Bard_init_:                             # @Bard_init_
# %bb.0:
	retq
.Lfunc_end782:
	.size	Bard_init_, .Lfunc_end782-Bard_init_
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function Bard_take_aAnimal_bBeaver
.LCPI783_0:
	.byte	97                              # 0x61
	.byte	110                             # 0x6e
	.byte	105                             # 0x69
	.byte	109                             # 0x6d
	.byte	97                              # 0x61
	.byte	108                             # 0x6c
	.byte	33                              # 0x21
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
.LCPI783_1:
	.byte	98                              # 0x62
	.byte	101                             # 0x65
	.byte	97                              # 0x61
	.byte	118                             # 0x76
	.byte	101                             # 0x65
	.byte	114                             # 0x72
	.byte	33                              # 0x21
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.text
	.globl	Bard_take_aAnimal_bBeaver
	.p2align	4, 0x90
	.type	Bard_take_aAnimal_bBeaver,@function
Bard_take_aAnimal_bBeaver:              # @Bard_take_aAnimal_bBeaver
# %bb.0:                                # %IO_B__Self_print_xPtrf64__Self_print_xRepresentable__Self_print_xPtri8__Self_print_xString__Self_print_xPtri64__Self_print_xNil__Self_print_xCharacter__Self_print_xPtri1__Self_print_xPtri32.exit54
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$40, %rsp
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rbx
	movl	$8, %edi
	movq	%rbx, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r14
	movl	.LCPI783_0(%rip), %eax
	movl	%eax, (%r14)
	movb	$33, 6(%r14)
	movw	$27745, 4(%r14)                 # imm = 0x6C61
	movl	$16, %edi
	movq	%rbx, %rsi
	callq	bump_malloc_inner@PLT
	movq	String@GOTPCREL(%rip), %r15
	movq	%r15, -72(%rbp)
	movq	%rax, -64(%rbp)
	movl	$9, -48(%rbp)
	movq	%r14, (%rax)
	movabsq	$34359738375, %r12              # imm = 0x800000007
	movq	%r12, 8(%rax)
	movq	-64(%rbp), %r13
	movl	8(%r13), %eax
	incl	%eax
	movslq	%eax, %rdi
	movq	%rbx, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %rbx
	movslq	8(%r13), %r14
	testq	%r14, %r14
	jle	.LBB783_2
# %bb.1:                                # %.lr.ph.i
	movq	(%r13), %rsi
	movq	%rbx, %rdi
	movq	%r14, %rdx
	callq	memcpy@PLT
.LBB783_2:                              # %String_c_string_.exit
	movb	$0, (%rbx,%r14)
	movq	%rbx, %rdi
	callq	puts@PLT
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rbx
	movl	$8, %edi
	movq	%rbx, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r14
	movl	.LCPI783_1(%rip), %eax
	movl	%eax, (%r14)
	movb	$33, 6(%r14)
	movw	$29285, 4(%r14)                 # imm = 0x7265
	movl	$16, %edi
	movq	%rbx, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rsp, %rcx
	leaq	-32(%rcx), %rsp
	movq	%r15, -32(%rcx)
	movq	%rax, -24(%rcx)
	movl	$9, -8(%rcx)
	movq	%r14, (%rax)
	movq	%r12, 8(%rax)
	movq	-24(%rcx), %r15
	movl	8(%r15), %eax
	incl	%eax
	movslq	%eax, %rdi
	movq	%rbx, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %rbx
	movslq	8(%r15), %r14
	testq	%r14, %r14
	jle	.LBB783_4
# %bb.3:                                # %.lr.ph.i109
	movq	(%r15), %rsi
	movq	%rbx, %rdi
	movq	%r14, %rdx
	callq	memcpy@PLT
.LBB783_4:                              # %String_c_string_.exit113
	movb	$0, (%rbx,%r14)
	movq	%rbx, %rdi
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	puts@PLT                        # TAILCALL
.Lfunc_end783:
	.size	Bard_take_aAnimal_bBeaver, .Lfunc_end783-Bard_take_aAnimal_bBeaver
                                        # -- End function
	.globl	Bard_take_aPtri32_bPtri32       # -- Begin function Bard_take_aPtri32_bPtri32
	.p2align	4, 0x90
	.type	Bard_take_aPtri32_bPtri32,@function
Bard_take_aPtri32_bPtri32:              # @Bard_take_aPtri32_bPtri32
# %bb.0:                                # %IO_B__Self_print_xPtrf64__Self_print_xRepresentable__Self_print_xPtri8__Self_print_xString__Self_print_xPtri64__Self_print_xNil__Self_print_xCharacter__Self_print_xPtri1__Self_print_xPtri32.exit33
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	movl	96(%rsp), %ebx
	movl	64(%rsp), %esi
	movq	i32_string@GOTPCREL(%rip), %r14
	movq	%r14, %rdi
	xorl	%eax, %eax
	callq	printf@PLT
	movq	%r14, %rdi
	movl	%ebx, %esi
	xorl	%eax, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	jmp	printf@PLT                      # TAILCALL
.Lfunc_end784:
	.size	Bard_take_aPtri32_bPtri32, .Lfunc_end784-Bard_take_aPtri32_bPtri32
                                        # -- End function
	.globl	Bard_take_aPtrf64_bPtrf64       # -- Begin function Bard_take_aPtrf64_bPtrf64
	.p2align	4, 0x90
	.type	Bard_take_aPtrf64_bPtrf64,@function
Bard_take_aPtrf64_bPtrf64:              # @Bard_take_aPtrf64_bPtrf64
# %bb.0:                                # %IO_B__Self_print_xPtrf64__Self_print_xRepresentable__Self_print_xPtri8__Self_print_xString__Self_print_xPtri64__Self_print_xNil__Self_print_xCharacter__Self_print_xPtri1__Self_print_xPtri32.exit33
	pushq	%rbx
	movsd	48(%rsp), %xmm0                 # xmm0 = mem[0],zero
	movq	float_string@GOTPCREL(%rip), %rbx
	movq	%rbx, %rdi
	movb	$1, %al
	callq	printf@PLT
	movsd	80(%rsp), %xmm0                 # xmm0 = mem[0],zero
	movq	%rbx, %rdi
	movb	$1, %al
	popq	%rbx
	jmp	printf@PLT                      # TAILCALL
.Lfunc_end785:
	.size	Bard_take_aPtrf64_bPtrf64, .Lfunc_end785-Bard_take_aPtrf64_bPtrf64
                                        # -- End function
	.globl	Bard_take_aPtri32_bPtrf64       # -- Begin function Bard_take_aPtri32_bPtrf64
	.p2align	4, 0x90
	.type	Bard_take_aPtri32_bPtrf64,@function
Bard_take_aPtri32_bPtrf64:              # @Bard_take_aPtri32_bPtrf64
# %bb.0:                                # %IO_B__Self_print_xPtrf64__Self_print_xRepresentable__Self_print_xPtri8__Self_print_xString__Self_print_xPtri64__Self_print_xNil__Self_print_xCharacter__Self_print_xPtri1__Self_print_xPtri32.exit33
	pushq	%rax
	movl	48(%rsp), %esi
	movq	i32_string@GOTPCREL(%rip), %rdi
	xorl	%eax, %eax
	callq	printf@PLT
	movsd	80(%rsp), %xmm0                 # xmm0 = mem[0],zero
	movq	float_string@GOTPCREL(%rip), %rdi
	movb	$1, %al
	popq	%rcx
	jmp	printf@PLT                      # TAILCALL
.Lfunc_end786:
	.size	Bard_take_aPtri32_bPtrf64, .Lfunc_end786-Bard_take_aPtri32_bPtrf64
                                        # -- End function
	.globl	Iterable_B_iterator_            # -- Begin function Iterable_B_iterator_
	.p2align	4, 0x90
	.type	Iterable_B_iterator_,@function
Iterable_B_iterator_:                   # @Iterable_B_iterator_
# %bb.0:
	movq	80(%rdi), %rax
	retq
.Lfunc_end787:
	.size	Iterable_B_iterator_, .Lfunc_end787-Iterable_B_iterator_
                                        # -- End function
	.globl	report_exception                # -- Begin function report_exception
	.p2align	4, 0x90
	.type	report_exception,@function
report_exception:                       # @report_exception
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r13
	.cfi_def_cfa_offset 32
	pushq	%r12
	.cfi_def_cfa_offset 40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	subq	$16, %rsp
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r13, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	48(%rdi), %rbx
	cmpq	nil_typ@GOTPCREL(%rip), %rbx
	sete	%al
	testq	%rbx, %rbx
	sete	%cl
	orb	%al, %cl
	jne	.LBB788_2
# %bb.1:
	movq	72(%rdi), %r14
	movq	64(%rdi), %r15
	movq	40(%rbx), %rax
	movabsq	$9027164862567808692, %rcx      # imm = 0x7D46EE9D523DFEB4
	imulq	8(%rbx), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rbx), %rdx
	movslq	(%rax,%rdx,4), %r12
	leaq	8(%rsp), %r13
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	movl	%r12d, %ecx
	movq	%r13, %r8
	callq	*48(%rbx,%r12,8)
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	movl	%r12d, %ecx
	movq	%rbx, %r8
	movq	%r15, %r9
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
.LBB788_2:                              # %._crit_edge
	addq	$16, %rsp
	.cfi_def_cfa_offset 48
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end788:
	.size	report_exception, .Lfunc_end788-report_exception
	.cfi_endproc
                                        # -- End function
	.globl	IntIterator_B_next_             # -- Begin function IntIterator_B_next_
	.p2align	4, 0x90
	.type	IntIterator_B_next_,@function
IntIterator_B_next_:                    # @IntIterator_B_next_
# %bb.0:
	movq	80(%rdi), %rax
	retq
.Lfunc_end789:
	.size	IntIterator_B_next_, .Lfunc_end789-IntIterator_B_next_
                                        # -- End function
	.globl	IntIterable_B_each_fFunctionPtri32_to_Nothing # -- Begin function IntIterable_B_each_fFunctionPtri32_to_Nothing
	.p2align	4, 0x90
	.type	IntIterable_B_each_fFunctionPtri32_to_Nothing,@function
IntIterable_B_each_fFunctionPtri32_to_Nothing: # @IntIterable_B_each_fFunctionPtri32_to_Nothing
# %bb.0:
	movq	160(%rdi), %rax
	retq
.Lfunc_end790:
	.size	IntIterable_B_each_fFunctionPtri32_to_Nothing, .Lfunc_end790-IntIterable_B_each_fFunctionPtri32_to_Nothing
                                        # -- End function
	.globl	IntIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32 # -- Begin function IntIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32
	.p2align	4, 0x90
	.type	IntIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32,@function
IntIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32: # @IntIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32
# %bb.0:
	movq	168(%rdi), %rax
	retq
.Lfunc_end791:
	.size	IntIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, .Lfunc_end791-IntIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32
                                        # -- End function
	.globl	IntIterable_B_all_fFunctionPtri32_to_Ptri1 # -- Begin function IntIterable_B_all_fFunctionPtri32_to_Ptri1
	.p2align	4, 0x90
	.type	IntIterable_B_all_fFunctionPtri32_to_Ptri1,@function
IntIterable_B_all_fFunctionPtri32_to_Ptri1: # @IntIterable_B_all_fFunctionPtri32_to_Ptri1
# %bb.0:
	movq	176(%rdi), %rax
	retq
.Lfunc_end792:
	.size	IntIterable_B_all_fFunctionPtri32_to_Ptri1, .Lfunc_end792-IntIterable_B_all_fFunctionPtri32_to_Ptri1
                                        # -- End function
	.globl	IntIterable_B_any_fFunctionPtri32_to_Ptri1 # -- Begin function IntIterable_B_any_fFunctionPtri32_to_Ptri1
	.p2align	4, 0x90
	.type	IntIterable_B_any_fFunctionPtri32_to_Ptri1,@function
IntIterable_B_any_fFunctionPtri32_to_Ptri1: # @IntIterable_B_any_fFunctionPtri32_to_Ptri1
# %bb.0:
	movq	184(%rdi), %rax
	retq
.Lfunc_end793:
	.size	IntIterable_B_any_fFunctionPtri32_to_Ptri1, .Lfunc_end793-IntIterable_B_any_fFunctionPtri32_to_Ptri1
                                        # -- End function
	.globl	IntIterable_B_map_fFunctionPtri32_to_Ptri32 # -- Begin function IntIterable_B_map_fFunctionPtri32_to_Ptri32
	.p2align	4, 0x90
	.type	IntIterable_B_map_fFunctionPtri32_to_Ptri32,@function
IntIterable_B_map_fFunctionPtri32_to_Ptri32: # @IntIterable_B_map_fFunctionPtri32_to_Ptri32
# %bb.0:
	movq	192(%rdi), %rax
	retq
.Lfunc_end794:
	.size	IntIterable_B_map_fFunctionPtri32_to_Ptri32, .Lfunc_end794-IntIterable_B_map_fFunctionPtri32_to_Ptri32
                                        # -- End function
	.globl	IntIterable_B_filter_fFunctionPtri32_to_Ptri1 # -- Begin function IntIterable_B_filter_fFunctionPtri32_to_Ptri1
	.p2align	4, 0x90
	.type	IntIterable_B_filter_fFunctionPtri32_to_Ptri1,@function
IntIterable_B_filter_fFunctionPtri32_to_Ptri1: # @IntIterable_B_filter_fFunctionPtri32_to_Ptri1
# %bb.0:
	movq	200(%rdi), %rax
	retq
.Lfunc_end795:
	.size	IntIterable_B_filter_fFunctionPtri32_to_Ptri1, .Lfunc_end795-IntIterable_B_filter_fFunctionPtri32_to_Ptri1
                                        # -- End function
	.globl	IntIterable_B_chain_otherIntIterable # -- Begin function IntIterable_B_chain_otherIntIterable
	.p2align	4, 0x90
	.type	IntIterable_B_chain_otherIntIterable,@function
IntIterable_B_chain_otherIntIterable:   # @IntIterable_B_chain_otherIntIterable
# %bb.0:
	movq	208(%rdi), %rax
	retq
.Lfunc_end796:
	.size	IntIterable_B_chain_otherIntIterable, .Lfunc_end796-IntIterable_B_chain_otherIntIterable
                                        # -- End function
	.globl	IntIterable_B_interleave_otherIntIterable # -- Begin function IntIterable_B_interleave_otherIntIterable
	.p2align	4, 0x90
	.type	IntIterable_B_interleave_otherIntIterable,@function
IntIterable_B_interleave_otherIntIterable: # @IntIterable_B_interleave_otherIntIterable
# %bb.0:
	movq	216(%rdi), %rax
	retq
.Lfunc_end797:
	.size	IntIterable_B_interleave_otherIntIterable, .Lfunc_end797-IntIterable_B_interleave_otherIntIterable
                                        # -- End function
	.globl	IntIterable_B_zip_otherIntIterable # -- Begin function IntIterable_B_zip_otherIntIterable
	.p2align	4, 0x90
	.type	IntIterable_B_zip_otherIntIterable,@function
IntIterable_B_zip_otherIntIterable:     # @IntIterable_B_zip_otherIntIterable
# %bb.0:
	movq	224(%rdi), %rax
	retq
.Lfunc_end798:
	.size	IntIterable_B_zip_otherIntIterable, .Lfunc_end798-IntIterable_B_zip_otherIntIterable
                                        # -- End function
	.globl	IntIterable_B_product_otherIntIterable # -- Begin function IntIterable_B_product_otherIntIterable
	.p2align	4, 0x90
	.type	IntIterable_B_product_otherIntIterable,@function
IntIterable_B_product_otherIntIterable: # @IntIterable_B_product_otherIntIterable
# %bb.0:
	movq	232(%rdi), %rax
	retq
.Lfunc_end799:
	.size	IntIterable_B_product_otherIntIterable, .Lfunc_end799-IntIterable_B_product_otherIntIterable
                                        # -- End function
	.globl	IntIterable_B_iterator_         # -- Begin function IntIterable_B_iterator_
	.p2align	4, 0x90
	.type	IntIterable_B_iterator_,@function
IntIterable_B_iterator_:                # @IntIterable_B_iterator_
# %bb.0:
	movq	240(%rdi), %rax
	retq
.Lfunc_end800:
	.size	IntIterable_B_iterator_, .Lfunc_end800-IntIterable_B_iterator_
                                        # -- End function
	.globl	IntTupleIterable_B_iterator_    # -- Begin function IntTupleIterable_B_iterator_
	.p2align	4, 0x90
	.type	IntTupleIterable_B_iterator_,@function
IntTupleIterable_B_iterator_:           # @IntTupleIterable_B_iterator_
# %bb.0:
	movq	80(%rdi), %rax
	retq
.Lfunc_end801:
	.size	IntTupleIterable_B_iterator_, .Lfunc_end801-IntTupleIterable_B_iterator_
                                        # -- End function
	.globl	IntTupleIterator_B_next_        # -- Begin function IntTupleIterator_B_next_
	.p2align	4, 0x90
	.type	IntTupleIterator_B_next_,@function
IntTupleIterator_B_next_:               # @IntTupleIterator_B_next_
# %bb.0:
	movq	80(%rdi), %rax
	retq
.Lfunc_end802:
	.size	IntTupleIterator_B_next_, .Lfunc_end802-IntTupleIterator_B_next_
                                        # -- End function
	.globl	Iterator2_field_Iterator2_0     # -- Begin function Iterator2_field_Iterator2_0
	.p2align	4, 0x90
	.type	Iterator2_field_Iterator2_0,@function
Iterator2_field_Iterator2_0:            # @Iterator2_field_Iterator2_0
# %bb.0:
	movq	(%rdi), %rax
	retq
.Lfunc_end803:
	.size	Iterator2_field_Iterator2_0, .Lfunc_end803-Iterator2_field_Iterator2_0
                                        # -- End function
	.globl	Iterator2_B_next_               # -- Begin function Iterator2_B_next_
	.p2align	4, 0x90
	.type	Iterator2_B_next_,@function
Iterator2_B_next_:                      # @Iterator2_B_next_
# %bb.0:
	movq	88(%rdi), %rax
	retq
.Lfunc_end804:
	.size	Iterator2_B_next_, .Lfunc_end804-Iterator2_B_next_
                                        # -- End function
	.globl	Iterable2_field_Iterable2_0     # -- Begin function Iterable2_field_Iterable2_0
	.p2align	4, 0x90
	.type	Iterable2_field_Iterable2_0,@function
Iterable2_field_Iterable2_0:            # @Iterable2_field_Iterable2_0
# %bb.0:
	movq	(%rdi), %rax
	retq
.Lfunc_end805:
	.size	Iterable2_field_Iterable2_0, .Lfunc_end805-Iterable2_field_Iterable2_0
                                        # -- End function
	.globl	Iterable2_B_iterator_           # -- Begin function Iterable2_B_iterator_
	.p2align	4, 0x90
	.type	Iterable2_B_iterator_,@function
Iterable2_B_iterator_:                  # @Iterable2_B_iterator_
# %bb.0:
	movq	168(%rdi), %rax
	retq
.Lfunc_end806:
	.size	Iterable2_B_iterator_, .Lfunc_end806-Iterable2_B_iterator_
                                        # -- End function
	.globl	Iterable2_B_each_fFunctionT_to_Nothing # -- Begin function Iterable2_B_each_fFunctionT_to_Nothing
	.p2align	4, 0x90
	.type	Iterable2_B_each_fFunctionT_to_Nothing,@function
Iterable2_B_each_fFunctionT_to_Nothing: # @Iterable2_B_each_fFunctionT_to_Nothing
# %bb.0:
	movq	176(%rdi), %rax
	retq
.Lfunc_end807:
	.size	Iterable2_B_each_fFunctionT_to_Nothing, .Lfunc_end807-Iterable2_B_each_fFunctionT_to_Nothing
                                        # -- End function
	.globl	Iterable2_B_reduce_accumulatorT_fFunctionT._T_to_T # -- Begin function Iterable2_B_reduce_accumulatorT_fFunctionT._T_to_T
	.p2align	4, 0x90
	.type	Iterable2_B_reduce_accumulatorT_fFunctionT._T_to_T,@function
Iterable2_B_reduce_accumulatorT_fFunctionT._T_to_T: # @Iterable2_B_reduce_accumulatorT_fFunctionT._T_to_T
# %bb.0:
	movq	184(%rdi), %rax
	retq
.Lfunc_end808:
	.size	Iterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, .Lfunc_end808-Iterable2_B_reduce_accumulatorT_fFunctionT._T_to_T
                                        # -- End function
	.globl	Iterable2_B_all_fFunctionT_to_Ptri1 # -- Begin function Iterable2_B_all_fFunctionT_to_Ptri1
	.p2align	4, 0x90
	.type	Iterable2_B_all_fFunctionT_to_Ptri1,@function
Iterable2_B_all_fFunctionT_to_Ptri1:    # @Iterable2_B_all_fFunctionT_to_Ptri1
# %bb.0:
	movq	192(%rdi), %rax
	retq
.Lfunc_end809:
	.size	Iterable2_B_all_fFunctionT_to_Ptri1, .Lfunc_end809-Iterable2_B_all_fFunctionT_to_Ptri1
                                        # -- End function
	.globl	Iterable2_B_any_fFunctionT_to_Ptri1 # -- Begin function Iterable2_B_any_fFunctionT_to_Ptri1
	.p2align	4, 0x90
	.type	Iterable2_B_any_fFunctionT_to_Ptri1,@function
Iterable2_B_any_fFunctionT_to_Ptri1:    # @Iterable2_B_any_fFunctionT_to_Ptri1
# %bb.0:
	movq	200(%rdi), %rax
	retq
.Lfunc_end810:
	.size	Iterable2_B_any_fFunctionT_to_Ptri1, .Lfunc_end810-Iterable2_B_any_fFunctionT_to_Ptri1
                                        # -- End function
	.globl	Iterable2_B_map_fFunctionT_to_U # -- Begin function Iterable2_B_map_fFunctionT_to_U
	.p2align	4, 0x90
	.type	Iterable2_B_map_fFunctionT_to_U,@function
Iterable2_B_map_fFunctionT_to_U:        # @Iterable2_B_map_fFunctionT_to_U
# %bb.0:
	movq	208(%rdi), %rax
	retq
.Lfunc_end811:
	.size	Iterable2_B_map_fFunctionT_to_U, .Lfunc_end811-Iterable2_B_map_fFunctionT_to_U
                                        # -- End function
	.globl	Iterable2_B_filter_fFunctionT_to_Ptri1 # -- Begin function Iterable2_B_filter_fFunctionT_to_Ptri1
	.p2align	4, 0x90
	.type	Iterable2_B_filter_fFunctionT_to_Ptri1,@function
Iterable2_B_filter_fFunctionT_to_Ptri1: # @Iterable2_B_filter_fFunctionT_to_Ptri1
# %bb.0:
	movq	216(%rdi), %rax
	retq
.Lfunc_end812:
	.size	Iterable2_B_filter_fFunctionT_to_Ptri1, .Lfunc_end812-Iterable2_B_filter_fFunctionT_to_Ptri1
                                        # -- End function
	.globl	Iterable2_B_chain_otherIterable2T # -- Begin function Iterable2_B_chain_otherIterable2T
	.p2align	4, 0x90
	.type	Iterable2_B_chain_otherIterable2T,@function
Iterable2_B_chain_otherIterable2T:      # @Iterable2_B_chain_otherIterable2T
# %bb.0:
	movq	224(%rdi), %rax
	retq
.Lfunc_end813:
	.size	Iterable2_B_chain_otherIterable2T, .Lfunc_end813-Iterable2_B_chain_otherIterable2T
                                        # -- End function
	.globl	Iterable2_B_interleave_otherIterable2T # -- Begin function Iterable2_B_interleave_otherIterable2T
	.p2align	4, 0x90
	.type	Iterable2_B_interleave_otherIterable2T,@function
Iterable2_B_interleave_otherIterable2T: # @Iterable2_B_interleave_otherIterable2T
# %bb.0:
	movq	232(%rdi), %rax
	retq
.Lfunc_end814:
	.size	Iterable2_B_interleave_otherIterable2T, .Lfunc_end814-Iterable2_B_interleave_otherIterable2T
                                        # -- End function
	.globl	Iterable2_B_zip_otherIterable2U # -- Begin function Iterable2_B_zip_otherIterable2U
	.p2align	4, 0x90
	.type	Iterable2_B_zip_otherIterable2U,@function
Iterable2_B_zip_otherIterable2U:        # @Iterable2_B_zip_otherIterable2U
# %bb.0:
	movq	240(%rdi), %rax
	retq
.Lfunc_end815:
	.size	Iterable2_B_zip_otherIterable2U, .Lfunc_end815-Iterable2_B_zip_otherIterable2U
                                        # -- End function
	.globl	Iterable2_B_product_otherIterable2U # -- Begin function Iterable2_B_product_otherIterable2U
	.p2align	4, 0x90
	.type	Iterable2_B_product_otherIterable2U,@function
Iterable2_B_product_otherIterable2U:    # @Iterable2_B_product_otherIterable2U
# %bb.0:
	movq	248(%rdi), %rax
	retq
.Lfunc_end816:
	.size	Iterable2_B_product_otherIterable2U, .Lfunc_end816-Iterable2_B_product_otherIterable2U
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function number_taker
.LCPI817_0:
	.byte	110                             # 0x6e
	.byte	117                             # 0x75
	.byte	109                             # 0x6d
	.byte	98                              # 0x62
	.byte	101                             # 0x65
	.byte	114                             # 0x72
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.text
	.globl	number_taker
	.p2align	4, 0x90
	.type	number_taker,@function
number_taker:                           # @number_taker
# %bb.0:
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rbx
	movl	$7, %edi
	movq	%rbx, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r14
	movl	.LCPI817_0(%rip), %eax
	movl	%eax, (%r14)
	movw	$29285, 4(%r14)                 # imm = 0x7265
	movl	$16, %edi
	movq	%rbx, %rsi
	callq	bump_malloc_inner@PLT
	movq	%r14, (%rax)
	movabsq	$30064771078, %rcx              # imm = 0x700000006
	movq	%rcx, 8(%rax)
	movq	String@GOTPCREL(%rip), %rsi
	movq	i32_string@GOTPCREL(%rip), %rdi
	movq	%rax, %rdx
	movl	$9, %r8d
	xorl	%eax, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	jmp	printf@PLT                      # TAILCALL
.Lfunc_end817:
	.size	number_taker, .Lfunc_end817-number_taker
                                        # -- End function
	.globl	early_return_in_else            # -- Begin function early_return_in_else
	.p2align	4, 0x90
	.type	early_return_in_else,@function
early_return_in_else:                   # @early_return_in_else
# %bb.0:
	movl	$1, %eax
	retq
.Lfunc_end818:
	.size	early_return_in_else, .Lfunc_end818-early_return_in_else
                                        # -- End function
	.globl	make_em_speak                   # -- Begin function make_em_speak
	.p2align	4, 0x90
	.type	make_em_speak,@function
make_em_speak:                          # @make_em_speak
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r13
	.cfi_def_cfa_offset 32
	pushq	%r12
	.cfi_def_cfa_offset 40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	subq	$16, %rsp
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r13, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rdx, %rbx
	movq	%rsi, %r14
	movq	%rdi, %r15
	movq	40(%rdi), %rax
	movabsq	$1075018126824711487, %rcx      # imm = 0xEEB3B4A687E253F
	imulq	8(%rdi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rdi), %rdx
	movslq	(%rax,%rdx,4), %r12
	leaq	8(%rsp), %r13
	movq	%rbx, %rdx
	movl	%r12d, %ecx
	movq	%r13, %r8
	callq	*32(%rdi,%r12,8)
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	movq	%r15, %rdi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movl	%r12d, %ecx
	movq	%r15, %r8
	movq	%r14, %r9
	pushq	%r13
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$48, %rsp
	.cfi_adjust_cfa_offset -48
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end819:
	.size	make_em_speak, .Lfunc_end819-make_em_speak
	.cfi_endproc
                                        # -- End function
	.globl	fibonacci                       # -- Begin function fibonacci
	.p2align	4, 0x90
	.type	fibonacci,@function
fibonacci:                              # @fibonacci
# %bb.0:
	pushq	%rbp
	pushq	%rbx
	pushq	%rax
	movl	%edi, %ebx
	xorl	%ebp, %ebp
	cmpl	$2, %edi
	jl	.LBB820_4
# %bb.1:                                # %tailrecurse.preheader
	incl	%ebx
	xorl	%ebp, %ebp
	.p2align	4, 0x90
.LBB820_2:                              # %tailrecurse
                                        # =>This Inner Loop Header: Depth=1
	leal	-3(%rbx), %edi
	callq	fibonacci@PLT
	addl	%eax, %ebp
	decl	%ebx
	cmpl	$2, %ebx
	ja	.LBB820_2
# %bb.3:
	movl	$1, %ebx
.LBB820_4:                              # %tailrecurse._crit_edge
	addl	%ebx, %ebp
	movl	%ebp, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end820:
	.size	fibonacci, .Lfunc_end820-fibonacci
                                        # -- End function
	.globl	factorial                       # -- Begin function factorial
	.p2align	4, 0x90
	.type	factorial,@function
factorial:                              # @factorial
# %bb.0:
                                        # kill: def $edi killed $edi def $rdi
	movl	$1, %eax
	cmpl	$2, %edi
	jl	.LBB821_2
	.p2align	4, 0x90
.LBB821_1:                              # %tailrecurse
                                        # =>This Inner Loop Header: Depth=1
	imull	%edi, %eax
	cmpl	$2, %edi
	leal	-1(%rdi), %edi
	ja	.LBB821_1
.LBB821_2:                              # %tailrecurse._crit_edge
	retq
.Lfunc_end821:
	.size	factorial, .Lfunc_end821-factorial
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function throw
.LCPI822_0:
	.byte	60                              # 0x3c
	.byte	78                              # 0x4e
	.byte	111                             # 0x6f
	.byte	110                             # 0x6e
	.byte	101                             # 0x65
	.byte	62                              # 0x3e
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.text
	.globl	throw
	.p2align	4, 0x90
	.type	throw,@function
throw:                                  # @throw
# %bb.0:
	pushq	%rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$40, %rsp
	movq	%fs:0, %r13
	leaq	current_ptr@TPOFF(%r13), %r14
	movl	$72, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %rbx
	movq	Exception@GOTPCREL(%rip), %rbp
	movq	%rbp, 8(%rsp)
	movq	%rax, 16(%rsp)
	movl	$9, 32(%rsp)
	movl	$7, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r15
	movl	.LCPI822_0(%rip), %eax
	movl	%eax, (%r15)
	movw	$15973, 4(%r15)                 # imm = 0x3E65
	movl	$16, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	%r15, (%rax)
	movabsq	$30064771078, %rcx              # imm = 0x700000006
	movq	%rcx, 8(%rax)
	movq	String@GOTPCREL(%rip), %r12
	movq	%r12, 40(%rbx)
	movq	%rax, 48(%rbx)
	movl	$9, 64(%rbx)
	movl	$11, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r15
	movabsq	$7596779219853731188, %rax      # imm = 0x696D2E7374736574
	movq	%rax, (%r15)
	movw	$26990, 8(%r15)                 # imm = 0x696E
	movl	$16, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	%r15, (%rax)
	movabsq	$47244640266, %rcx              # imm = 0xB0000000A
	movq	%rcx, 8(%rax)
	movl	$1204, (%rbx)                   # imm = 0x4B4
	movq	%r12, 8(%rbx)
	movq	%rax, 16(%rbx)
	movl	$9, 32(%rbx)
	movq	16(%rsp), %rax
	movq	24(%rsp), %rcx
	movl	32(%rsp), %edx
	movq	current_coroutine@GOTTPOFF(%rip), %rsi
	movq	(%r13,%rsi), %r12
	movl	%edx, 80(%r12)
	movq	%rax, 64(%r12)
	movq	%rcx, 72(%r12)
	movq	%rbp, 48(%r12)
	addq	$8, %r12
	addq	into_caller_buf@GOTTPOFF(%rip), %r13
	callq	context_switch@PLT
	addq	$40, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end822:
	.size	throw, .Lfunc_end822-throw
                                        # -- End function
	.globl	print88                         # -- Begin function print88
	.p2align	4, 0x90
	.type	print88,@function
print88:                                # @print88
# %bb.0:                                # %IO_B__Self_print_xPtrf64__Self_print_xRepresentable__Self_print_xPtri8__Self_print_xString__Self_print_xPtri64__Self_print_xNil__Self_print_xCharacter__Self_print_xPtri1__Self_print_xPtri32.exit23
	pushq	%rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	movq	i32_string@GOTPCREL(%rip), %rbp
	movq	%rbp, %rdi
	movl	$88, %esi
	xorl	%eax, %eax
	callq	printf@PLT
	movq	current_coroutine@GOTTPOFF(%rip), %rax
	movq	%fs:0, %r13
	movq	(%r13,%rax), %r12
	addq	$8, %r12
	addq	into_caller_buf@GOTTPOFF(%rip), %r13
	callq	context_switch@PLT
	movq	%rbp, %rdi
	movl	$90, %esi
	xorl	%eax, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	printf@PLT                      # TAILCALL
.Lfunc_end823:
	.size	print88, .Lfunc_end823-print88
                                        # -- End function
	.globl	coroutine_kvhdhlprgv_passer     # -- Begin function coroutine_kvhdhlprgv_passer
	.p2align	4, 0x90
	.type	coroutine_kvhdhlprgv_passer,@function
coroutine_kvhdhlprgv_passer:            # @coroutine_kvhdhlprgv_passer
	.cfi_startproc
# %bb.0:
	jmpq	*(%rdi)                         # TAILCALL
.Lfunc_end824:
	.size	coroutine_kvhdhlprgv_passer, .Lfunc_end824-coroutine_kvhdhlprgv_passer
	.cfi_endproc
                                        # -- End function
	.globl	coroutine_kvhdhlprgv_buffer_filler # -- Begin function coroutine_kvhdhlprgv_buffer_filler
	.p2align	4, 0x90
	.type	coroutine_kvhdhlprgv_buffer_filler,@function
coroutine_kvhdhlprgv_buffer_filler:     # @coroutine_kvhdhlprgv_buffer_filler
# %bb.0:
	retq
.Lfunc_end825:
	.size	coroutine_kvhdhlprgv_buffer_filler, .Lfunc_end825-coroutine_kvhdhlprgv_buffer_filler
                                        # -- End function
	.globl	grabo                           # -- Begin function grabo
	.p2align	4, 0x90
	.type	grabo,@function
grabo:                                  # @grabo
# %bb.0:                                # %IO_B__Self_print_xPtrf64__Self_print_xRepresentable__Self_print_xPtri8__Self_print_xString__Self_print_xPtri64__Self_print_xNil__Self_print_xCharacter__Self_print_xPtri1__Self_print_xPtri32.exit
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	subq	$32, %rsp
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rbx
	movl	$4, %edi
	movq	%rbx, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r14
	movb	$101, 2(%rax)
	movw	$28271, (%rax)                  # imm = 0x6E6F
	movl	$16, %edi
	movq	%rbx, %rsi
	callq	bump_malloc_inner@PLT
	movq	String@GOTPCREL(%rip), %rcx
	movq	%rcx, (%rsp)
	movq	%rax, 8(%rsp)
	movl	$9, 24(%rsp)
	movq	%r14, (%rax)
	movabsq	$17179869187, %rcx              # imm = 0x400000003
	movq	%rcx, 8(%rax)
	movq	8(%rsp), %r15
	movl	8(%r15), %eax
	incl	%eax
	movslq	%eax, %rdi
	movq	%rbx, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %rbx
	movslq	8(%r15), %r14
	testq	%r14, %r14
	jle	.LBB826_2
# %bb.1:                                # %.lr.ph.i
	movq	(%r15), %rsi
	movq	%rbx, %rdi
	movq	%r14, %rdx
	callq	memcpy@PLT
.LBB826_2:                              # %String_c_string_.exit
	movb	$0, (%rbx,%r14)
	movq	%rbx, %rdi
	addq	$32, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	jmp	puts@PLT                        # TAILCALL
.Lfunc_end826:
	.size	grabo, .Lfunc_end826-grabo
                                        # -- End function
	.globl	_functionliteral_fjwyblfyvu     # -- Begin function _functionliteral_fjwyblfyvu
	.p2align	4, 0x90
	.type	_functionliteral_fjwyblfyvu,@function
_functionliteral_fjwyblfyvu:            # @_functionliteral_fjwyblfyvu
# %bb.0:
                                        # kill: def $esi killed $esi def $rsi
                                        # kill: def $edi killed $edi def $rdi
	leal	(%rdi,%rsi), %eax
	retq
.Lfunc_end827:
	.size	_functionliteral_fjwyblfyvu, .Lfunc_end827-_functionliteral_fjwyblfyvu
                                        # -- End function
	.globl	_functionliteral_pvknrrlgki     # -- Begin function _functionliteral_pvknrrlgki
	.p2align	4, 0x90
	.type	_functionliteral_pvknrrlgki,@function
_functionliteral_pvknrrlgki:            # @_functionliteral_pvknrrlgki
# %bb.0:
                                        # kill: def $edi killed $edi def $rdi
	leal	(%rdi,%rdi), %eax
	retq
.Lfunc_end828:
	.size	_functionliteral_pvknrrlgki, .Lfunc_end828-_functionliteral_pvknrrlgki
                                        # -- End function
	.globl	_functionliteral_zaqykqzujn     # -- Begin function _functionliteral_zaqykqzujn
	.p2align	4, 0x90
	.type	_functionliteral_zaqykqzujn,@function
_functionliteral_zaqykqzujn:            # @_functionliteral_zaqykqzujn
# %bb.0:
	movl	$5, %eax
	retq
.Lfunc_end829:
	.size	_functionliteral_zaqykqzujn, .Lfunc_end829-_functionliteral_zaqykqzujn
                                        # -- End function
	.globl	_functionliteral_kpqobqphmc     # -- Begin function _functionliteral_kpqobqphmc
	.p2align	4, 0x90
	.type	_functionliteral_kpqobqphmc,@function
_functionliteral_kpqobqphmc:            # @_functionliteral_kpqobqphmc
# %bb.0:                                # %IO_B__Self_print_xPtrf64__Self_print_xRepresentable__Self_print_xPtri8__Self_print_xString__Self_print_xPtri64__Self_print_xNil__Self_print_xCharacter__Self_print_xPtri1__Self_print_xPtri32.exit
	movl	%edi, %esi
	movq	i32_string@GOTPCREL(%rip), %rdi
	xorl	%eax, %eax
	jmp	printf@PLT                      # TAILCALL
.Lfunc_end830:
	.size	_functionliteral_kpqobqphmc, .Lfunc_end830-_functionliteral_kpqobqphmc
                                        # -- End function
	.globl	i32toi8                         # -- Begin function i32toi8
	.p2align	4, 0x90
	.type	i32toi8,@function
i32toi8:                                # @i32toi8
# %bb.0:
	xorl	%eax, %eax
	testl	%edi, %edi
	cmovgl	%edi, %eax
                                        # kill: def $al killed $al killed $eax
	retq
.Lfunc_end831:
	.size	i32toi8, .Lfunc_end831-i32toi8
                                        # -- End function
	.globl	read_file                       # -- Begin function read_file
	.p2align	4, 0x90
	.type	read_file,@function
read_file:                              # @read_file
	.cfi_startproc
# %bb.0:                                # %String_c_string_.exit
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$120, %rsp
	.cfi_def_cfa_offset 176
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rcx, 32(%rsp)                  # 8-byte Spill
	movq	%rdx, %r12
	movq	%rsi, %r13
	movq	%rdi, 40(%rsp)                  # 8-byte Spill
	movq	40(%rsi), %rax
	movabsq	$6499063144389013426, %rcx      # imm = 0x5A314F7F0E23EFB2
	imulq	8(%rsi), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%rsi), %rdx
	movslq	(%rax,%rdx,4), %rbx
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rbp
	movl	$1, %edi
	movq	%rbp, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r15
	movl	$16, %edi
	movq	%rbp, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r14
	movq	%r15, (%rax)
	movabsq	$4294967296, %rax               # imm = 0x100000000
	movq	%rax, 8(%r14)
	movq	%rsp, %r8
	movq	%r13, %rdi
	movq	%r12, %rsi
	movq	32(%rsp), %r15                  # 8-byte Reload
	movq	%r15, %rdx
	movl	%ebx, %ecx
	callq	*112(%r13,%rbx,8)
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	movq	%r13, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%ebx, %ecx
	movq	%r13, %r8
	movq	%r12, %r9
	leaq	8(%rsp), %r10
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	%rax, %rbx
	movl	$2, %edi
	movq	%rbp, %rsi
	callq	bump_malloc_inner@PLT
	movw	$114, (%rax)
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	fopen@PLT
	movq	%rax, %r15
	movq	%rax, %rdi
	callq	fgetc@PLT
	cmpl	$-1, %eax
	je	.LBB832_11
# %bb.1:                                # %._crit_edge.preheader
	movl	%eax, %ebp
	movq	String@GOTPCREL(%rip), %r12
	jmp	.LBB832_2
	.p2align	4, 0x90
.LBB832_3:                              #   in Loop: Header=BB832_2 Depth=1
	leaq	96(%rsp), %rax
	leaq	72(%rsp), %rcx
	leaq	104(%rsp), %rdx
	leaq	80(%rsp), %rsi
	leaq	84(%rsp), %rdi
	leaq	88(%rsp), %r8
	leaq	92(%rsp), %r9
	leaq	112(%rsp), %r10
.LBB832_10:                             # %String_append_xPtri8.exit
                                        #   in Loop: Header=BB832_2 Depth=1
	movq	%r13, (%r10)
	movl	%ebx, (%r9)
	movslq	%ebx, %r9
	movb	%bpl, (%r13,%r9)
	movl	8(%r14), %r9d
	movl	%r9d, (%r8)
	movl	$1, (%rdi)
	incl	%r9d
	movl	%r9d, (%rsi)
	movl	%r9d, 8(%r14)
	movq	%r12, (%rdx)
	movq	%r14, (%rax)
	movl	$9, (%rcx)
	movq	%r15, %rdi
	callq	fgetc@PLT
	movl	%eax, %ebp
	cmpl	$-1, %eax
	je	.LBB832_11
.LBB832_2:                              # %._crit_edge
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB832_7 Depth 2
	testl	%ebp, %ebp
	movl	$0, %eax
	cmovlel	%eax, %ebp
	movl	8(%r14), %ebx
	movl	12(%r14), %eax
	cmpl	%eax, %ebx
	movq	(%r14), %r13
	jl	.LBB832_3
# %bb.4:                                #   in Loop: Header=BB832_2 Depth=1
	addl	%eax, %eax
	movl	%eax, 12(%r14)
	movslq	%eax, %rdi
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, (%r14)
	testl	%ebx, %ebx
	jle	.LBB832_5
# %bb.6:                                # %.lr.ph.i104
                                        #   in Loop: Header=BB832_2 Depth=1
	xorl	%eax, %eax
	.p2align	4, 0x90
.LBB832_7:                              # %._crit_edge.i105
                                        #   Parent Loop BB832_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%r14), %rcx
	movzbl	(%r13,%rax), %edx
	movb	%dl, (%rcx,%rax)
	movl	8(%r14), %ebx
	incq	%rax
	cmpl	%ebx, %eax
	jl	.LBB832_7
# %bb.8:                                # %String_append_xPtri8.exit.loopexit
                                        #   in Loop: Header=BB832_2 Depth=1
	movq	(%r14), %r13
	jmp	.LBB832_9
.LBB832_5:                              #   in Loop: Header=BB832_2 Depth=1
	movq	%rax, %r13
.LBB832_9:                              # %String_append_xPtri8.exit
                                        #   in Loop: Header=BB832_2 Depth=1
	leaq	48(%rsp), %rax
	leaq	8(%rsp), %rcx
	leaq	56(%rsp), %rdx
	leaq	16(%rsp), %rsi
	leaq	20(%rsp), %rdi
	leaq	24(%rsp), %r8
	leaq	28(%rsp), %r9
	leaq	64(%rsp), %r10
	jmp	.LBB832_10
.LBB832_11:                             # %._crit_edge._crit_edge
	movq	String@GOTPCREL(%rip), %rbx
	movq	%r15, %rdi
	callq	fclose@PLT
	movq	40(%rsp), %rax                  # 8-byte Reload
	movq	%rbx, (%rax)
	movq	%r14, 8(%rax)
	movl	$9, 24(%rax)
	addq	$120, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end832:
	.size	read_file, .Lfunc_end832-read_file
	.cfi_endproc
                                        # -- End function
	.globl	write_file                      # -- Begin function write_file
	.p2align	4, 0x90
	.type	write_file,@function
write_file:                             # @write_file
	.cfi_startproc
# %bb.0:                                # %String_c_string_.exit
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$24, %rsp
	.cfi_def_cfa_offset 80
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%r9, 16(%rsp)                   # 8-byte Spill
	movq	%r8, %r15
	movq	%rdx, %rbp
	movq	%rsi, %rbx
	movq	%rdi, %r13
	movq	40(%rdi), %rax
	movabsq	$6499063144389013426, %rcx      # imm = 0x5A314F7F0E23EFB2
	movq	8(%rdi), %rdx
	imulq	%rcx, %rdx
	movq	%rdx, %rsi
	shrq	$32, %rsi
	xorq	%rdx, %rsi
	andq	16(%rdi), %rsi
	movslq	(%rax,%rsi,4), %r14
	movq	40(%r8), %rax
	imulq	8(%r8), %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%r8), %rdx
	movslq	(%rax,%rdx,4), %r12
	leaq	8(%rsp), %r8
	movq	%rbx, %rsi
	movq	%rbp, %rdx
	movl	%r14d, %ecx
	callq	*112(%rdi,%r14,8)
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	movq	%r13, %rdi
	movq	%rbx, %rsi
	movq	%rbp, %rdx
	movl	%r14d, %ecx
	movq	%r13, %r8
	movq	%rbx, %r9
	leaq	16(%rsp), %r10
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	%rax, %rbx
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	movl	$2, %edi
	callq	bump_malloc_inner@PLT
	movw	$119, (%rax)
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	fopen@PLT
	movq	%rax, %rbx
	movq	%r15, %rdi
	movq	16(%rsp), %r13                  # 8-byte Reload
	movq	%r13, %rsi
	movq	80(%rsp), %r14
	movq	%r14, %rdx
	movl	%r12d, %ecx
	leaq	8(%rsp), %rbp
	movq	%rbp, %r8
	callq	*112(%r15,%r12,8)
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	movq	%r15, %rdi
	movq	%r13, %rsi
	movq	%r14, %rdx
	movl	%r12d, %ecx
	movq	%r15, %r8
	movq	%r13, %r9
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	fprintf@PLT
	movq	%rbx, %rdi
	callq	fclose@PLT
	addq	$24, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end833:
	.size	write_file, .Lfunc_end833-write_file
	.cfi_endproc
                                        # -- End function
	.globl	_functionliteral_daiwlvftit     # -- Begin function _functionliteral_daiwlvftit
	.p2align	4, 0x90
	.type	_functionliteral_daiwlvftit,@function
_functionliteral_daiwlvftit:            # @_functionliteral_daiwlvftit
# %bb.0:                                # %IO_B__Self_print_xPtrf64__Self_print_xRepresentable__Self_print_xPtri8__Self_print_xString__Self_print_xPtri64__Self_print_xNil__Self_print_xCharacter__Self_print_xPtri1__Self_print_xPtri32.exit
	movl	%edi, %esi
	imull	%edi, %esi
	movq	i32_string@GOTPCREL(%rip), %rdi
	xorl	%eax, %eax
	jmp	printf@PLT                      # TAILCALL
.Lfunc_end834:
	.size	_functionliteral_daiwlvftit, .Lfunc_end834-_functionliteral_daiwlvftit
                                        # -- End function
	.globl	_functionliteral_bkcposwysa     # -- Begin function _functionliteral_bkcposwysa
	.p2align	4, 0x90
	.type	_functionliteral_bkcposwysa,@function
_functionliteral_bkcposwysa:            # @_functionliteral_bkcposwysa
# %bb.0:
                                        # kill: def $esi killed $esi def $rsi
                                        # kill: def $edi killed $edi def $rdi
	leal	(%rdi,%rsi), %eax
	retq
.Lfunc_end835:
	.size	_functionliteral_bkcposwysa, .Lfunc_end835-_functionliteral_bkcposwysa
                                        # -- End function
	.globl	_functionliteral_yhoemtutmd     # -- Begin function _functionliteral_yhoemtutmd
	.p2align	4, 0x90
	.type	_functionliteral_yhoemtutmd,@function
_functionliteral_yhoemtutmd:            # @_functionliteral_yhoemtutmd
# %bb.0:
	pushq	%rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
                                        # kill: def $edi killed $edi def $rdi
	addl	%esi, %edi
	movq	%rdi, 8(%rsp)                   # 8-byte Spill
	movl	$7, %ecx
	jmp	.LBB836_1
	.p2align	4, 0x90
.LBB836_5:                              # %._crit_edge
                                        #   in Loop: Header=BB836_1 Depth=1
	addl	16(%rsp), %eax                  # 4-byte Folded Reload
	movl	%eax, %ecx
.LBB836_1:                              # %._crit_edge
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rsp), %rax                   # 8-byte Reload
	movq	%rcx, 16(%rsp)                  # 8-byte Spill
	addl	%ecx, %eax
	movq	%fs:0, %r13
	movq	current_coroutine@GOTTPOFF(%rip), %rcx
	movq	(%r13,%rcx), %rbp
	movl	%eax, 56(%rbp)
	movq	i32_typ@GOTPCREL(%rip), %rax
	movq	%rax, 48(%rbp)
	leaq	8(%rbp), %r12
	addq	into_caller_buf@GOTTPOFF(%rip), %r13
	callq	context_switch@PLT
	movq	48(%rbp), %rcx
	testq	%rcx, %rcx
	movl	$0, %eax
	je	.LBB836_3
# %bb.2:                                # %._crit_edge
                                        #   in Loop: Header=BB836_1 Depth=1
	movl	56(%rbp), %eax
.LBB836_3:                              # %._crit_edge
                                        #   in Loop: Header=BB836_1 Depth=1
	cmpq	nil_typ@GOTPCREL(%rip), %rcx
	jne	.LBB836_5
# %bb.4:                                # %._crit_edge
                                        #   in Loop: Header=BB836_1 Depth=1
	xorl	%eax, %eax
	jmp	.LBB836_5
.Lfunc_end836:
	.size	_functionliteral_yhoemtutmd, .Lfunc_end836-_functionliteral_yhoemtutmd
                                        # -- End function
	.globl	coroutine_gmhbntoxov_passer     # -- Begin function coroutine_gmhbntoxov_passer
	.p2align	4, 0x90
	.type	coroutine_gmhbntoxov_passer,@function
coroutine_gmhbntoxov_passer:            # @coroutine_gmhbntoxov_passer
	.cfi_startproc
# %bb.0:
	movl	64(%rdi), %eax
	movl	68(%rdi), %esi
	movq	(%rdi), %rcx
	movl	%eax, %edi
	jmpq	*%rcx                           # TAILCALL
.Lfunc_end837:
	.size	coroutine_gmhbntoxov_passer, .Lfunc_end837-coroutine_gmhbntoxov_passer
	.cfi_endproc
                                        # -- End function
	.globl	coroutine_gmhbntoxov_buffer_filler # -- Begin function coroutine_gmhbntoxov_buffer_filler
	.p2align	4, 0x90
	.type	coroutine_gmhbntoxov_buffer_filler,@function
coroutine_gmhbntoxov_buffer_filler:     # @coroutine_gmhbntoxov_buffer_filler
# %bb.0:
	movl	%esi, 64(%rdi)
	movl	%edx, 68(%rdi)
	retq
.Lfunc_end838:
	.size	coroutine_gmhbntoxov_buffer_filler, .Lfunc_end838-coroutine_gmhbntoxov_buffer_filler
                                        # -- End function
	.globl	coroutine_heppzcytyw_passer     # -- Begin function coroutine_heppzcytyw_passer
	.p2align	4, 0x90
	.type	coroutine_heppzcytyw_passer,@function
coroutine_heppzcytyw_passer:            # @coroutine_heppzcytyw_passer
	.cfi_startproc
# %bb.0:
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	callq	*(%rdi)
	movl	%eax, 56(%rbx)
	movq	i32_typ@GOTPCREL(%rip), %rax
	movq	%rax, 48(%rbx)
	popq	%rbx
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end839:
	.size	coroutine_heppzcytyw_passer, .Lfunc_end839-coroutine_heppzcytyw_passer
	.cfi_endproc
                                        # -- End function
	.globl	coroutine_heppzcytyw_buffer_filler # -- Begin function coroutine_heppzcytyw_buffer_filler
	.p2align	4, 0x90
	.type	coroutine_heppzcytyw_buffer_filler,@function
coroutine_heppzcytyw_buffer_filler:     # @coroutine_heppzcytyw_buffer_filler
# %bb.0:
	retq
.Lfunc_end840:
	.size	coroutine_heppzcytyw_buffer_filler, .Lfunc_end840-coroutine_heppzcytyw_buffer_filler
                                        # -- End function
	.globl	coroutine_yodvxgpykp_passer     # -- Begin function coroutine_yodvxgpykp_passer
	.p2align	4, 0x90
	.type	coroutine_yodvxgpykp_passer,@function
coroutine_yodvxgpykp_passer:            # @coroutine_yodvxgpykp_passer
	.cfi_startproc
# %bb.0:
	movl	104(%rdi), %ecx
	movq	96(%rdi), %rdx
	movq	88(%rdi), %rsi
	movq	(%rdi), %rax
	movq	80(%rdi), %rdi
	jmpq	*%rax                           # TAILCALL
.Lfunc_end841:
	.size	coroutine_yodvxgpykp_passer, .Lfunc_end841-coroutine_yodvxgpykp_passer
	.cfi_endproc
                                        # -- End function
	.globl	coroutine_yodvxgpykp_buffer_filler # -- Begin function coroutine_yodvxgpykp_buffer_filler
	.p2align	4, 0x90
	.type	coroutine_yodvxgpykp_buffer_filler,@function
coroutine_yodvxgpykp_buffer_filler:     # @coroutine_yodvxgpykp_buffer_filler
# %bb.0:
	movl	%r8d, 104(%rdi)
	movq	%rcx, 96(%rdi)
	movq	%rdx, 88(%rdi)
	movq	%rsi, 80(%rdi)
	retq
.Lfunc_end842:
	.size	coroutine_yodvxgpykp_buffer_filler, .Lfunc_end842-coroutine_yodvxgpykp_buffer_filler
                                        # -- End function
	.globl	_functionliteral_euiyusxheo     # -- Begin function _functionliteral_euiyusxheo
	.p2align	4, 0x90
	.type	_functionliteral_euiyusxheo,@function
_functionliteral_euiyusxheo:            # @_functionliteral_euiyusxheo
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r12
	.cfi_def_cfa_offset 32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	subq	$24, %rsp
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -40
	.cfi_offset %r12, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rdx, %rbx
	movq	%rsi, %r14
	movq	%rdi, %r15
	movq	_parameterization_Ptri32@GOTPCREL(%rip), %rax
	movq	%rax, 16(%rsp)
	movslq	%ecx, %r12
	movq	24(%rdi,%r12,8), %rax
	movq	i32_typ@GOTPCREL(%rip), %rcx
	movq	%rcx, 8(%rsp)
	leaq	8(%rsp), %r8
	movl	%r12d, %ecx
	callq	*%rax
	leaq	16(%rsp), %r10
	movq	%r15, %rdi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movl	%r12d, %ecx
	movq	%r15, %r8
	movq	%r14, %r9
	pushq	$88
	.cfi_adjust_cfa_offset 8
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$56, %rsp
	.cfi_adjust_cfa_offset -56
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end843:
	.size	_functionliteral_euiyusxheo, .Lfunc_end843-_functionliteral_euiyusxheo
	.cfi_endproc
                                        # -- End function
	.globl	_functionliteral_idtokgivtk     # -- Begin function _functionliteral_idtokgivtk
	.p2align	4, 0x90
	.type	_functionliteral_idtokgivtk,@function
_functionliteral_idtokgivtk:            # @_functionliteral_idtokgivtk
# %bb.0:
	testb	$1, %dil
	sete	%al
	retq
.Lfunc_end844:
	.size	_functionliteral_idtokgivtk, .Lfunc_end844-_functionliteral_idtokgivtk
                                        # -- End function
	.globl	_functionliteral_egpsmmqymk     # -- Begin function _functionliteral_egpsmmqymk
	.p2align	4, 0x90
	.type	_functionliteral_egpsmmqymk,@function
_functionliteral_egpsmmqymk:            # @_functionliteral_egpsmmqymk
# %bb.0:
	movl	%edi, %eax
	imull	%edi, %eax
	retq
.Lfunc_end845:
	.size	_functionliteral_egpsmmqymk, .Lfunc_end845-_functionliteral_egpsmmqymk
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function main
.LCPI846_0:
	.long	1684828783                      # 0x646c726f
	.long	33                              # 0x21
	.long	1684828783                      # 0x646c726f
	.long	33                              # 0x21
.LCPI846_1:
	.byte	72                              # 0x48
	.byte	101                             # 0x65
	.byte	108                             # 0x6c
	.byte	108                             # 0x6c
	.byte	111                             # 0x6f
	.byte	44                              # 0x2c
	.byte	32                              # 0x20
	.byte	87                              # 0x57
	.byte	111                             # 0x6f
	.byte	114                             # 0x72
	.byte	108                             # 0x6c
	.byte	100                             # 0x64
	.byte	33                              # 0x21
	.zero	1
	.zero	1
	.zero	1
.LCPI846_4:
	.long	1701995880                      # 0x65726568
	.long	33                              # 0x21
	.long	1701995880                      # 0x65726568
	.long	33                              # 0x21
.LCPI846_5:
	.byte	100                             # 0x64
	.byte	105                             # 0x69
	.byte	100                             # 0x64
	.byte	32                              # 0x20
	.byte	103                             # 0x67
	.byte	101                             # 0x65
	.byte	116                             # 0x74
	.byte	32                              # 0x20
	.byte	104                             # 0x68
	.byte	101                             # 0x65
	.byte	114                             # 0x72
	.byte	101                             # 0x65
	.byte	33                              # 0x21
	.zero	1
	.zero	1
	.zero	1
.LCPI846_6:
	.byte	98                              # 0x62
	.byte	97                              # 0x61
	.byte	114                             # 0x72
	.byte	114                             # 0x72
	.byte	121                             # 0x79
	.byte	39                              # 0x27
	.byte	115                             # 0x73
	.byte	32                              # 0x20
	.byte	99                              # 0x63
	.byte	111                             # 0x6f
	.byte	108                             # 0x6c
	.byte	111                             # 0x6f
	.byte	114                             # 0x72
	.byte	32                              # 0x20
	.byte	105                             # 0x69
	.byte	115                             # 0x73
.LCPI846_9:
	.byte	79                              # 0x4f
	.byte	98                              # 0x62
	.byte	106                             # 0x6a
	.byte	101                             # 0x65
	.byte	99                              # 0x63
	.byte	116                             # 0x74
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
.LCPI846_10:
	.byte	116                             # 0x74
	.byte	104                             # 0x68
	.byte	105                             # 0x69
	.byte	115                             # 0x73
	.byte	10                              # 0xa
	.byte	105                             # 0x69
	.byte	115                             # 0x73
	.byte	32                              # 0x20
	.byte	104                             # 0x68
	.byte	111                             # 0x6f
	.byte	119                             # 0x77
	.byte	10                              # 0xa
	.byte	119                             # 0x77
	.byte	101                             # 0x65
	.byte	32                              # 0x20
	.byte	100                             # 0x64
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI846_2:
	.quad	0x401c000000000000              # double 7
.LCPI846_3:
	.quad	0x402c000000000000              # double 14
.LCPI846_7:
	.quad	0x4008000000000000              # double 3
.LCPI846_8:
	.quad	0x4014000000000000              # double 5
	.text
	.globl	main
	.p2align	4, 0x90
	.type	main,@function
main:                                   # @main
	.cfi_startproc
# %bb.0:                                # %IO_B__Self_print_xPtrf64__Self_print_xRepresentable__Self_print_xPtri8__Self_print_xString__Self_print_xPtri64__Self_print_xNil__Self_print_xCharacter__Self_print_xPtri1__Self_print_xPtri32.exit408
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$632, %rsp                      # imm = 0x278
	.cfi_def_cfa_offset 688
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	callq	setup_landing_pad@PLT
	movq	i32_string@GOTPCREL(%rip), %rdi
	movl	$3, %esi
	xorl	%eax, %eax
	callq	printf@PLT
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rbx
	movl	$14, %edi
	movq	%rbx, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r14
	movl	.LCPI846_0(%rip), %eax
	movl	%eax, 8(%r14)
	movq	.LCPI846_1(%rip), %rax
	movq	%rax, (%r14)
	movb	$33, 12(%r14)
	movl	$16, %edi
	movq	%rbx, %rsi
	callq	bump_malloc_inner@PLT
	movq	String@GOTPCREL(%rip), %rcx
	movq	%rcx, 376(%rsp)
	movq	%rax, 384(%rsp)
	movl	$9, 400(%rsp)
	movq	%r14, (%rax)
	movabsq	$60129542157, %r13              # imm = 0xE0000000D
	movq	%r13, 8(%rax)
	movq	384(%rsp), %r15
	movl	8(%r15), %eax
	incl	%eax
	movslq	%eax, %rdi
	movq	%rbx, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %rbx
	movslq	8(%r15), %r14
	testq	%r14, %r14
	jle	.LBB846_2
# %bb.1:                                # %.lr.ph.i3069
	movq	(%r15), %rsi
	movq	%rbx, %rdi
	movq	%r14, %rdx
	callq	memcpy@PLT
.LBB846_2:                              # %String_c_string_.exit
	movb	$0, (%rbx,%r14)
	movq	%rbx, %rdi
	callq	puts@PLT
	movb	$0, 96(%rsp)
	xorl	%eax, %eax
	testb	%al, %al
	je	.LBB846_4
# %bb.3:
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	movl	$5, %edi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r14
	movl	$1702195828, (%rax)             # imm = 0x65757274
	movl	$4, %r12d
	jmp	.LBB846_5
.LBB846_4:
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	movl	$6, %edi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r14
	movb	$101, 4(%rax)
	movl	$1936482662, (%rax)             # imm = 0x736C6166
	movl	$5, %r12d
.LBB846_5:                              # %IO_B__Self_print_xPtrf64__Self_print_xRepresentable__Self_print_xPtri8__Self_print_xString__Self_print_xPtri64__Self_print_xNil__Self_print_xCharacter__Self_print_xPtri1__Self_print_xPtri32.exit555
	leal	1(%r12), %edi
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rbx
	movq	%rbx, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r15
	movl	%r12d, %r12d
	movq	%rax, %rdi
	movq	%r14, %rsi
	movq	%r12, %rdx
	callq	memcpy@PLT
	movb	$0, (%r15,%r12)
	movq	%r15, %rdi
	callq	puts@PLT
	movq	i32_string@GOTPCREL(%rip), %r14
	movq	%r14, %rdi
	movl	$5, %esi
	xorl	%eax, %eax
	callq	printf@PLT
	movq	%r14, %rdi
	movl	$10, %esi
	xorl	%eax, %eax
	callq	printf@PLT
	movq	float_string@GOTPCREL(%rip), %r14
	movsd	.LCPI846_2(%rip), %xmm0         # xmm0 = [7.0E+0,0.0E+0]
	movq	%r14, %rdi
	movb	$1, %al
	callq	printf@PLT
	movsd	.LCPI846_3(%rip), %xmm0         # xmm0 = [1.4E+1,0.0E+0]
	movq	%r14, %rdi
	movb	$1, %al
	callq	printf@PLT
	movl	$6, %edi
	movq	%rbx, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r14
	movb	$116, 4(%rax)
	movl	$1918989427, (%rax)             # imm = 0x72617473
	movl	$16, %edi
	movq	%rbx, %rsi
	callq	bump_malloc_inner@PLT
	movq	String@GOTPCREL(%rip), %rcx
	movq	%rcx, 344(%rsp)
	movq	%rax, 352(%rsp)
	movl	$9, 368(%rsp)
	movq	%r14, (%rax)
	movabsq	$25769803781, %rcx              # imm = 0x600000005
	movq	%rcx, 8(%rax)
	movq	352(%rsp), %r15
	movl	8(%r15), %eax
	incl	%eax
	movslq	%eax, %rdi
	movq	%rbx, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %rbx
	movslq	8(%r15), %r14
	testq	%r14, %r14
	jle	.LBB846_7
# %bb.6:                                # %.lr.ph.i3086
	movq	(%r15), %rsi
	movq	%rbx, %rdi
	movq	%r14, %rdx
	callq	memcpy@PLT
.LBB846_7:                              # %String_c_string_.exit3090
	movb	$0, (%rbx,%r14)
	movq	%rbx, %rdi
	callq	puts@PLT
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rbx
	movl	$24, %edi
	movq	%rbx, %rsi
	callq	bump_malloc_inner@PLT
	movl	$55, (%rax)
	movabsq	$4620693217682128896, %rcx      # imm = 0x4020000000000000
	movq	%rcx, 8(%rax)
	movl	$13, 16(%rax)
	movq	Animal@GOTPCREL(%rip), %rcx
	movq	%rcx, 216(%rsp)
	movq	%rax, 224(%rsp)
	movl	$9, 240(%rsp)
	movl	$14, %edi
	movq	%rbx, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r14
	movl	.LCPI846_4(%rip), %eax
	movl	%eax, 8(%r14)
	movq	.LCPI846_5(%rip), %rax
	movq	%rax, (%r14)
	movb	$33, 12(%r14)
	movl	$16, %edi
	movq	%rbx, %rsi
	callq	bump_malloc_inner@PLT
	movq	String@GOTPCREL(%rip), %rcx
	movq	%rcx, 312(%rsp)
	movq	%rax, 320(%rsp)
	movl	$9, 336(%rsp)
	movq	%r14, (%rax)
	movq	%r13, 8(%rax)
	movq	320(%rsp), %r15
	movl	8(%r15), %eax
	incl	%eax
	movslq	%eax, %rdi
	movq	%rbx, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %rbx
	movslq	8(%r15), %r14
	testq	%r14, %r14
	jle	.LBB846_9
# %bb.8:                                # %.lr.ph.i3106
	movq	(%r15), %rsi
	movq	%rbx, %rdi
	movq	%r14, %rdx
	callq	memcpy@PLT
.LBB846_9:                              # %String_c_string_.exit3110
	movb	$0, (%rbx,%r14)
	movq	%rbx, %rdi
	callq	puts@PLT
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %r13
	movl	$16, %edi
	movq	%r13, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %rbx
	movl	$10, (%rax)
	movabsq	$4621819117588971520, %rax      # imm = 0x4024000000000000
	movq	%rax, 8(%rbx)
	movq	Beaver@GOTPCREL(%rip), %rax
	movq	%rax, 496(%rsp)
	movq	%rbx, 504(%rsp)
	movl	$9, 520(%rsp)
	movq	224(%rsp), %rbp
	movq	232(%rsp), %rax
	movq	%rax, (%rsp)                    # 8-byte Spill
	movl	240(%rsp), %r12d
	subq	$96, %rsp
	.cfi_adjust_cfa_offset 96
	movq	$0, 80(%rsp)
	movq	$0, 48(%rsp)
	callq	Bard_take_aAnimal_bBeaver@PLT
	addq	$96, %rsp
	.cfi_adjust_cfa_offset -96
	movq	i32_string@GOTPCREL(%rip), %rdi
	movl	$7, %esi
	xorl	%eax, %eax
	callq	printf@PLT
	movq	float_string@GOTPCREL(%rip), %rdi
	movsd	.LCPI846_2(%rip), %xmm0         # xmm0 = [7.0E+0,0.0E+0]
	movb	$1, %al
	callq	printf@PLT
	movl	$17, %edi
	movq	%r13, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r14
	movaps	.LCPI846_6(%rip), %xmm0         # xmm0 = [98,97,114,114,121,39,115,32,99,111,108,111,114,32,105,115]
	movaps	%xmm0, (%rax)
	movl	$16, %edi
	movq	%r13, %rsi
	callq	bump_malloc_inner@PLT
	movq	String@GOTPCREL(%rip), %rcx
	movq	%rcx, 280(%rsp)
	movq	%rax, 288(%rsp)
	movl	$9, 304(%rsp)
	movq	%r14, (%rax)
	movabsq	$73014444048, %rcx              # imm = 0x1100000010
	movq	%rcx, 8(%rax)
	movq	288(%rsp), %r15
	movl	8(%r15), %eax
	incl	%eax
	movslq	%eax, %rdi
	movq	%r13, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r14
	movslq	8(%r15), %r13
	testq	%r13, %r13
	jle	.LBB846_11
# %bb.10:                               # %.lr.ph.i3126
	movq	(%r15), %rsi
	movq	%r14, %rdi
	movq	%r13, %rdx
	callq	memcpy@PLT
.LBB846_11:                             # %._crit_edge5.lr.ph
	movb	$0, (%r14,%r13)
	movq	%r14, %rdi
	callq	puts@PLT
	movl	(%rbx), %esi
	movq	i32_string@GOTPCREL(%rip), %r13
	movq	%r13, %rdi
	xorl	%eax, %eax
	callq	printf@PLT
	movl	(%rbx), %esi
	addl	$5, %esi
	movl	%esi, (%rbx)
	movq	%r13, %rdi
	xorl	%eax, %eax
	callq	printf@PLT
	movq	%r13, %rdi
	movl	$82, %esi
	xorl	%eax, %eax
	callq	printf@PLT
	movl	$9, 16(%rsp)                    # 4-byte Folded Spill
	movq	%r13, %rdi
	movl	$9, %esi
	xorl	%eax, %eax
	callq	printf@PLT
	movq	float_string@GOTPCREL(%rip), %rdi
	movsd	.LCPI846_7(%rip), %xmm0         # xmm0 = [3.0E+0,0.0E+0]
	movb	$1, %al
	callq	printf@PLT
	movq	%rbp, %r14
	movl	(%rbp), %esi
	movq	%r13, %rdi
	xorl	%eax, %eax
	callq	printf@PLT
	movl	(%rbp), %esi
	movq	%r13, %rdi
	xorl	%eax, %eax
	callq	printf@PLT
	movslq	%r12d, %rbp
	leaq	8(%rsp), %r8
	movq	Animal@GOTPCREL(%rip), %rbx
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movq	(%rsp), %r12                    # 8-byte Reload
	movq	%r12, %rdx
	movl	%ebp, %ecx
	movq	%r8, %r15
	callq	*56(%rbx,%rbp,8)
	leaq	576(%rsp), %rdi
	movq	%rbx, %rsi
	movq	%r14, %rdx
	movq	%r12, %rcx
	movl	%ebp, %r8d
	movq	%rbx, %r9
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	%r13, %rdi
	movl	$5, %esi
	xorl	%eax, %eax
	callq	printf@PLT
	movq	%r13, %rdi
	movl	$6, %esi
	xorl	%eax, %eax
	callq	printf@PLT
	movq	%r13, %rdi
	movl	$7, %esi
	xorl	%eax, %eax
	callq	printf@PLT
	movq	%r13, %rdi
	movl	$8, %esi
	xorl	%eax, %eax
	callq	printf@PLT
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	movq	%rsi, 80(%rsp)                  # 8-byte Spill
	movl	$24, %edi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r15
	movl	$65, (%rax)
	movabsq	$4625759767262920704, %rax      # imm = 0x4032000000000000
	movq	%rax, 8(%r15)
	movl	$23, 16(%r15)
	movq	%rbx, 464(%rsp)
	movq	%r15, 472(%rsp)
	movl	$9, 488(%rsp)
	movl	(%r15), %esi
	movq	%r13, %rdi
	xorl	%eax, %eax
	callq	printf@PLT
	movl	(%r15), %esi
	movq	%r13, %rdi
	xorl	%eax, %eax
	callq	printf@PLT
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movq	%r12, %rdx
	movl	%ebp, %ecx
	leaq	8(%rsp), %r15
	movq	%r15, %r8
	callq	*40(%rbx,%rbp,8)
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movq	%r12, %rdx
	movl	%ebp, %ecx
	movq	%rbx, %r8
	movq	%r14, %r9
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movl	$40, %edi
	movq	80(%rsp), %rsi                  # 8-byte Reload
	callq	bump_malloc_inner@PLT
	movq	%rax, %r14
	movl	$0, (%rax)
	movq	nil_typ@GOTPCREL(%rip), %rax
	movq	%rax, 8(%r14)
	movl	$2, %r12d
	movq	ListNode@GOTPCREL(%rip), %r15
                                        # implicit-def: $rbp
	movq	%r14, (%rsp)                    # 8-byte Spill
	.p2align	4, 0x90
.LBB846_12:                             # %._crit_edge5
                                        # =>This Inner Loop Header: Depth=1
	leal	-1(%r12), %ebx
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	movl	$40, %edi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r13
	movl	%ebx, (%rax)
	movq	nil_typ@GOTPCREL(%rip), %rax
	movq	%rax, 8(%r13)
	movq	_parameterization_ListNode@GOTPCREL(%rip), %rax
	movq	%rax, 168(%rsp)
	movslq	16(%rsp), %rbx                  # 4-byte Folded Reload
	movq	%r15, 160(%rsp)
	movq	%r15, %rdi
	movq	%r14, %rsi
	movq	%rbp, %rdx
	movl	%ebx, %ecx
	leaq	160(%rsp), %r8
	callq	*24(%r15,%rbx,8)
	subq	$64, %rsp
	.cfi_adjust_cfa_offset 64
	movq	%r13, 40(%rsp)
	movq	%r15, 32(%rsp)
	leaq	232(%rsp), %rcx
	movq	%rcx, 24(%rsp)
	movl	%ebx, 16(%rsp)
	movq	%rbp, 8(%rsp)
	movq	%r14, (%rsp)
	movl	$9, 56(%rsp)
	leaq	312(%rsp), %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	movq	%rbp, %rcx
	movl	%ebx, %r8d
	movq	%r15, %r9
	callq	*%rax
	addq	$64, %rsp
	.cfi_adjust_cfa_offset -64
	cmpl	$10, %r12d
	ja	.LBB846_14
# %bb.13:                               # %RangeIterator_next_.exit3174
                                        #   in Loop: Header=BB846_12 Depth=1
	movq	264(%rsp), %rbp
	movq	248(%rsp), %rax
	movq	256(%rsp), %r14
	movq	40(%rax), %rcx
	movq	8(%rax), %rdx
	movabsq	$-1756024950533091476, %rsi     # imm = 0xE7A1589C7EC08F6C
	imulq	%rsi, %rdx
	movq	%rdx, %rsi
	shrq	$32, %rsi
	xorq	%rdx, %rsi
	andq	16(%rax), %rsi
	movl	(%rcx,%rsi,4), %eax
	movl	%eax, 16(%rsp)                  # 4-byte Spill
	incl	%r12d
	jmp	.LBB846_12
.LBB846_14:                             # %IO_B__Self_print_xPtrf64__Self_print_xRepresentable__Self_print_xPtri8__Self_print_xString__Self_print_xPtri64__Self_print_xNil__Self_print_xCharacter__Self_print_xPtri1__Self_print_xPtri32.exit746
	movq	(%rsp), %rbx                    # 8-byte Reload
	movl	(%rbx), %esi
	movq	i32_string@GOTPCREL(%rip), %rdi
	xorl	%eax, %eax
	callq	printf@PLT
	movq	$0, 64(%rsp)
	movl	$9, 72(%rsp)
	movq	%rbx, %xmm0
	movl	$9, 16(%rsp)                    # 4-byte Folded Spill
	xorl	%ebp, %ebp
	movabsq	$-1756024950533091476, %rsi     # imm = 0xE7A1589C7EC08F6C
	.p2align	4, 0x90
.LBB846_15:                             # %._crit_edge7
                                        # =>This Inner Loop Header: Depth=1
	movq	%xmm0, %r14
	pshufd	$238, %xmm0, %xmm0              # xmm0 = xmm0[2,3,2,3]
	movdqa	%xmm0, 80(%rsp)                 # 16-byte Spill
	movq	%xmm0, %rbx
	movq	40(%r15), %rax
	movq	8(%r15), %rcx
	imulq	%rsi, %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%r15), %rdx
	movslq	(%rax,%rdx,4), %r13
	movq	%r15, %rdi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movl	%r13d, %ecx
	leaq	8(%rsp), %r12
	movq	%r12, %r8
	callq	*40(%r15,%r13,8)
	subq	$32, %rsp
	.cfi_adjust_cfa_offset 32
	movq	%r12, 16(%rsp)
	movl	%r13d, 8(%rsp)
	movaps	112(%rsp), %xmm0                # 16-byte Reload
	movlps	%xmm0, (%rsp)
	movq	%r15, %rdi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movl	%r13d, %ecx
	movq	%r15, %r8
	movq	%r14, %r9
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	i32_string@GOTPCREL(%rip), %rdi
	movl	%eax, %esi
	xorl	%eax, %eax
	callq	printf@PLT
	movslq	16(%rsp), %rbx                  # 4-byte Folded Reload
	movq	%r15, %rdi
	movq	(%rsp), %r14                    # 8-byte Reload
	movq	%r14, %rsi
	movq	%rbp, %rdx
	movl	%ebx, %ecx
	movq	%r12, %r8
	callq	*32(%r15,%rbx,8)
	leaq	528(%rsp), %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	movq	%rbp, %rcx
	movl	%ebx, %r8d
	movq	%r15, %r9
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	callq	*%rax
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movq	528(%rsp), %r15
	cmpq	nil_typ@GOTPCREL(%rip), %r15
	je	.LBB846_17
# %bb.16:                               # %._crit_edge7
                                        #   in Loop: Header=BB846_15 Depth=1
	testq	%r15, %r15
	je	.LBB846_17
# %bb.71:                               # %ListIterator_next_.exit3266
                                        #   in Loop: Header=BB846_15 Depth=1
	movq	552(%rsp), %rbp
	movq	544(%rsp), %rdi
	movq	40(%r15), %rax
	movq	8(%r15), %rcx
	movabsq	$-1756024950533091476, %rsi     # imm = 0xE7A1589C7EC08F6C
	imulq	%rsi, %rcx
	movq	%rcx, %rdx
	shrq	$32, %rdx
	xorq	%rcx, %rdx
	andq	16(%r15), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	%rbp, 64(%rsp)
	movl	%eax, 16(%rsp)                  # 4-byte Spill
	movl	%eax, 72(%rsp)
	movq	%rdi, (%rsp)                    # 8-byte Spill
	movq	%rdi, %xmm0
	movq	%rbp, %xmm1
	punpcklqdq	%xmm1, %xmm0            # xmm0 = xmm0[0],xmm1[0]
	jmp	.LBB846_15
.LBB846_17:                             # %ListIterator_next_.exit3266.thread
	movl	$8388608, %esi                  # imm = 0x800000
	xorl	%edi, %edi
	movl	$12288, %edx                    # imm = 0x3000
	movl	$4, %ecx
	callq	VirtualAlloc@PLT
	movq	%rax, 16(%rsp)                  # 8-byte Spill
	movq	print88@GOTPCREL(%rip), %rcx
	movq	%rcx, (%rax)
	leaq	8388608(%rax), %rcx
	andq	$-16, %rcx
	leaq	8(%rax), %rdx
	movq	%rdx, (%rsp)                    # 8-byte Spill
	leaq	16(%rax), %rdi
	movq	%rcx, 8(%rax)
	movq	%rcx, 24(%rax)
	movq	coroutine_kvhdhlprgv_passer@GOTPCREL(%rip), %rcx
	movq	%rcx, 32(%rax)
	movb	$0, 40(%rax)
	callq	coroutine_trampoline@PLT
	movq	into_caller_buf@GOTTPOFF(%rip), %rax
	movq	%fs:0, %rbp
	leaq	(%rbp,%rax), %r12
	movq	%r12, 80(%rsp)                  # 8-byte Spill
	movq	(%rbp,%rax), %rcx
	movq	%rcx, 24(%rsp)                  # 8-byte Spill
	movq	8(%rbp,%rax), %rcx
	movq	%rcx, 32(%rsp)                  # 8-byte Spill
	movq	16(%rbp,%rax), %rcx
	movq	%rcx, 40(%rsp)                  # 8-byte Spill
	movq	current_coroutine@GOTTPOFF(%rip), %rcx
	movq	(%rbp,%rcx), %rax
	movq	%rax, 104(%rsp)                 # 8-byte Spill
	movq	16(%rsp), %rax                  # 8-byte Reload
	movq	%rax, (%rbp,%rcx)
	movq	(%rsp), %r13                    # 8-byte Reload
	callq	context_switch@PLT
	movq	current_coroutine@GOTTPOFF(%rip), %rax
	movq	104(%rsp), %rcx                 # 8-byte Reload
	movq	%rcx, (%rbp,%rax)
	movq	into_caller_buf@GOTTPOFF(%rip), %rbx
	movq	24(%rsp), %rax                  # 8-byte Reload
	movq	%rax, (%rbp,%rbx)
	movq	32(%rsp), %rax                  # 8-byte Reload
	movq	%rax, 8(%rbp,%rbx)
	movq	40(%rsp), %rax                  # 8-byte Reload
	movq	%rax, 16(%rbp,%rbx)
	movq	i32_string@GOTPCREL(%rip), %rdi
	movl	$89, %esi
	xorl	%eax, %eax
	callq	printf@PLT
	movq	(%rbp,%rbx), %rcx
	movq	%rcx, 24(%rsp)                  # 8-byte Spill
	movq	8(%rbp,%rbx), %rcx
	movq	%rcx, 32(%rsp)                  # 8-byte Spill
	movq	16(%rbp,%rbx), %rcx
	movq	%rcx, 40(%rsp)                  # 8-byte Spill
	movq	current_coroutine@GOTTPOFF(%rip), %rcx
	movq	(%rbp,%rcx), %rax
	movq	%rax, 104(%rsp)                 # 8-byte Spill
	movq	16(%rsp), %rax                  # 8-byte Reload
	movq	%rax, (%rbp,%rcx)
	movq	80(%rsp), %r12                  # 8-byte Reload
	movq	(%rsp), %r13                    # 8-byte Reload
	callq	context_switch@PLT
	movq	104(%rsp), %rax                 # 8-byte Reload
	movq	current_coroutine@GOTTPOFF(%rip), %rcx
	movq	%rax, (%rbp,%rcx)
	movq	24(%rsp), %rax                  # 8-byte Reload
	movq	into_caller_buf@GOTTPOFF(%rip), %rcx
	movq	%rax, (%rbp,%rcx)
	movq	32(%rsp), %rax                  # 8-byte Reload
	movq	%rax, 8(%rbp,%rcx)
	movq	40(%rsp), %rax                  # 8-byte Reload
	movq	%rax, 16(%rbp,%rcx)
	movq	i32_string@GOTPCREL(%rip), %rdi
	movl	$1, %esi
	xorl	%eax, %eax
	callq	printf@PLT
	movq	i32_string@GOTPCREL(%rip), %rdi
	movl	$2, %esi
	xorl	%eax, %eax
	callq	printf@PLT
	movq	i32_string@GOTPCREL(%rip), %rdi
	movl	$3, %esi
	xorl	%eax, %eax
	callq	printf@PLT
	movq	i32_string@GOTPCREL(%rip), %rdi
	movl	$4, %esi
	xorl	%eax, %eax
	callq	printf@PLT
	movq	i32_string@GOTPCREL(%rip), %rdi
	movl	$8, %esi
	xorl	%eax, %eax
	callq	printf@PLT
	leaq	current_ptr@TPOFF(%rbp), %rbx
	movl	$20, %edi
	movq	%rbx, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r14
	movabsq	$30064771080, %rax              # imm = 0x700000008
	movq	%rax, (%r14)
	movabsq	$21474836486, %rax              # imm = 0x500000006
	movq	%rax, 8(%r14)
	movl	$16, %edi
	movq	%rbx, %rsi
	callq	bump_malloc_inner@PLT
	movl	$8, (%rax)
	movq	4(%r14), %rcx
	movq	%rcx, 4(%rax)
	movl	12(%r14), %ecx
	movl	%ecx, 12(%rax)
	movl	12(%rax), %esi
	movq	i32_string@GOTPCREL(%rip), %rdi
	xorl	%eax, %eax
	callq	printf@PLT
	movl	$4, %edi
	movq	%rbx, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r14
	movb	$101, 2(%rax)
	movw	$28271, (%rax)                  # imm = 0x6E6F
	movl	$16, %edi
	movq	%rbx, %rsi
	callq	bump_malloc_inner@PLT
	movq	String@GOTPCREL(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 56(%rsp)
	movl	$9, 72(%rsp)
	movq	%r14, (%rax)
	movabsq	$17179869187, %rcx              # imm = 0x400000003
	movq	%rcx, 8(%rax)
	movq	56(%rsp), %r15
	movl	8(%r15), %eax
	incl	%eax
	movslq	%eax, %rdi
	movq	%rbx, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %rbx
	movslq	8(%r15), %r14
	testq	%r14, %r14
	jle	.LBB846_19
# %bb.18:                               # %.lr.ph.i.i
	movq	(%r15), %rsi
	movq	%rbx, %rdi
	movq	%r14, %rdx
	callq	memcpy@PLT
.LBB846_19:                             # %IntArrayIterator_next_.exit3510.lr.ph
	movb	$0, (%rbx,%r14)
	movq	%rbx, %rdi
	callq	puts@PLT
	movq	i64_string@GOTPCREL(%rip), %rdi
	movl	$5, %esi
	xorl	%eax, %eax
	callq	printf@PLT
	movq	float_string@GOTPCREL(%rip), %rdi
	movsd	.LCPI846_8(%rip), %xmm0         # xmm0 = [5.0E+0,0.0E+0]
	movb	$1, %al
	callq	printf@PLT
	movq	i32_string@GOTPCREL(%rip), %rbx
	movq	%rbx, %rdi
	movl	$11, %esi
	xorl	%eax, %eax
	callq	printf@PLT
	movq	%rbx, %rdi
	movl	$12, %esi
	xorl	%eax, %eax
	callq	printf@PLT
	movq	%rbx, %rdi
	movl	$13, %esi
	xorl	%eax, %eax
	callq	printf@PLT
	movq	%rbx, %rdi
	movl	$14, %esi
	xorl	%eax, %eax
	callq	printf@PLT
	movq	%rbx, %rdi
	movl	$44, %esi
	xorl	%eax, %eax
	callq	printf@PLT
	movq	%rbx, %rdi
	movl	$55, %esi
	xorl	%eax, %eax
	callq	printf@PLT
	movq	%rbx, %rdi
	movl	$66, %esi
	xorl	%eax, %eax
	callq	printf@PLT
	movq	%rbx, %rdi
	movl	$3, %esi
	xorl	%eax, %eax
	callq	printf@PLT
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %r14
	movl	$6, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r15
	movb	$33, 4(%rax)
	movl	$1836019554, (%rax)             # imm = 0x6D6F6F62
	movl	$1, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	Character@GOTPCREL(%rip), %r12
	movq	%r12, 48(%rsp)
	movq	%rax, 56(%rsp)
	movl	$9, 72(%rsp)
	movb	$98, (%rax)
	movq	56(%rsp), %r13
	movl	$2, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movzbl	(%r13), %ecx
	movb	%cl, (%rax)
	movb	$0, 1(%rax)
	movq	%rax, %rdi
	callq	puts@PLT
	movl	$1, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	%r12, 48(%rsp)
	movq	%rax, 56(%rsp)
	movl	$9, 72(%rsp)
	movb	$111, (%rax)
	movq	56(%rsp), %r13
	movl	$2, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movzbl	(%r13), %ecx
	movb	%cl, (%rax)
	movb	$0, 1(%rax)
	movq	%rax, %rdi
	callq	puts@PLT
	movl	$1, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	%r12, 48(%rsp)
	movq	%rax, 56(%rsp)
	movl	$9, 72(%rsp)
	movb	$111, (%rax)
	movq	56(%rsp), %r13
	movl	$2, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movzbl	(%r13), %ecx
	movb	%cl, (%rax)
	movb	$0, 1(%rax)
	movq	%rax, %rdi
	callq	puts@PLT
	movl	$1, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	%r12, 48(%rsp)
	movq	%rax, 56(%rsp)
	movl	$9, 72(%rsp)
	movb	$109, (%rax)
	movq	56(%rsp), %r13
	movl	$2, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movzbl	(%r13), %ecx
	movb	%cl, (%rax)
	movb	$0, 1(%rax)
	movq	%rax, %rdi
	callq	puts@PLT
	movl	$1, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	%r12, 48(%rsp)
	movq	%rax, 56(%rsp)
	movl	$9, 72(%rsp)
	movzbl	4(%r15), %ecx
	movb	%cl, (%rax)
	movq	56(%rsp), %r15
	movl	$2, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movzbl	(%r15), %ecx
	movb	%cl, (%rax)
	movb	$0, 1(%rax)
	movq	%rax, %rdi
	callq	puts@PLT
	movl	$7, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r15
	movl	.LCPI846_9(%rip), %eax
	movl	%eax, (%r15)
	movw	$29795, 4(%r15)                 # imm = 0x7463
	movl	$7, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movl	(%r15), %ecx
	movl	%ecx, (%rax)
	movzwl	4(%r15), %ecx
	movw	%cx, 4(%rax)
	movb	$0, 6(%rax)
	movq	%rax, %rdi
	callq	puts@PLT
	movq	%rbx, %rdi
	movl	$77, %esi
	xorl	%eax, %eax
	callq	printf@PLT
	movl	$9, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movabsq	$3635079343999577673, %rcx      # imm = 0x3272656765746E49
	movq	%rcx, (%rax)
	movb	$0, 8(%rax)
	movq	%rax, %rdi
	callq	puts@PLT
	movl	$11, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %rbx
	movabsq	$6998674224423527752, %rax      # imm = 0x6120492065726548
	movq	%rax, (%rbx)
	movw	$8557, 8(%rbx)                  # imm = 0x216D
	movl	$16, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	String@GOTPCREL(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 56(%rsp)
	movl	$9, 72(%rsp)
	movq	%rbx, (%rax)
	movabsq	$47244640266, %rcx              # imm = 0xB0000000A
	movq	%rcx, 8(%rax)
	movq	56(%rsp), %r15
	movl	8(%r15), %eax
	incl	%eax
	movslq	%eax, %rdi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %rbx
	movslq	8(%r15), %r14
	testq	%r14, %r14
	jle	.LBB846_21
# %bb.20:                               # %.lr.ph.i.i2838
	movq	(%r15), %rsi
	movq	%rbx, %rdi
	movq	%r14, %rdx
	callq	memcpy@PLT
.LBB846_21:                             # %.lr.ph.i3661.preheader
	movb	$0, (%rbx,%r14)
	movq	%rbx, %rdi
	callq	puts@PLT
	movq	i32_string@GOTPCREL(%rip), %rbx
	movq	%rbx, %rdi
	xorl	%esi, %esi
	xorl	%eax, %eax
	callq	printf@PLT
	movq	%rbx, %rdi
	movl	$5, %esi
	xorl	%eax, %eax
	callq	printf@PLT
	movq	%rbx, %rdi
	movl	$10, %esi
	xorl	%eax, %eax
	callq	printf@PLT
	movq	%rbx, %rdi
	movl	$15, %esi
	xorl	%eax, %eax
	callq	printf@PLT
	movq	%rbx, %rdi
	movl	$20, %esi
	xorl	%eax, %eax
	callq	printf@PLT
	movq	%rbx, %rdi
	movl	$25, %esi
	xorl	%eax, %eax
	callq	printf@PLT
	movq	%rbx, %rdi
	movl	$20, %esi
	xorl	%eax, %eax
	callq	printf@PLT
	movq	%rbx, %rdi
	movl	$5, %esi
	xorl	%eax, %eax
	callq	printf@PLT
	movq	%rbx, %rdi
	movl	$6, %esi
	xorl	%eax, %eax
	callq	printf@PLT
	movq	%rbx, %rdi
	movl	$7, %esi
	xorl	%eax, %eax
	callq	printf@PLT
	movq	%rbx, %rdi
	movl	$8, %esi
	xorl	%eax, %eax
	callq	printf@PLT
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %r14
	movl	$13, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r15
	movabsq	$8315736636166465890, %r13      # imm = 0x73676E6974676962
	movq	%r13, (%rax)
	movl	$1954051118, 8(%rax)            # imm = 0x7478742E
	movl	$21, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %rbx
	movdqa	.LCPI846_10(%rip), %xmm0        # xmm0 = [116,104,105,115,10,105,115,32,104,111,119,10,119,101,32,100]
	movdqa	%xmm0, (%rax)
	movl	$1953041007, 16(%rax)           # imm = 0x74690A6F
	movl	$13, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r12
	movq	(%r15), %rax
	movq	%rax, (%r12)
	movl	8(%r15), %eax
	movl	%eax, 8(%r12)
	movb	$0, 12(%r12)
	movl	$2, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movw	$119, (%rax)
	movq	%r12, %rdi
	movq	%rax, %rsi
	callq	fopen@PLT
	movq	%rax, %r15
	movl	$21, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	(%rbx), %rcx
	movq	8(%rbx), %rdx
	movq	%rcx, (%rax)
	movq	%rdx, 8(%rax)
	movl	16(%rbx), %ecx
	movl	%ecx, 16(%rax)
	movb	$0, 20(%rax)
	movq	%r15, %rdi
	movq	%rax, %rsi
	callq	fprintf@PLT
	movq	%r15, %rdi
	callq	fclose@PLT
	movl	$13, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r15
	movq	%r13, (%rax)
	movl	$1954051118, 8(%rax)            # imm = 0x7478742E
	movl	$1, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r12
	movl	$16, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %rbx
	movq	%r12, (%rax)
	movabsq	$4294967296, %rax               # imm = 0x100000000
	movq	%rax, 8(%rbx)
	movl	$13, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r12
	movq	(%r15), %rax
	movq	%rax, (%r12)
	movl	8(%r15), %eax
	movl	%eax, 8(%r12)
	movb	$0, 12(%r12)
	movl	$2, %edi
	movq	%r14, %rsi
	callq	bump_malloc_inner@PLT
	movw	$114, (%rax)
	movq	%r12, %rdi
	movq	%rax, %rsi
	callq	fopen@PLT
	movq	%rax, %r14
	movq	%rax, %rdi
	callq	fgetc@PLT
	cmpl	$-1, %eax
	je	.LBB846_32
# %bb.22:                               # %._crit_edge.preheader.i
	movl	%eax, %ebp
	leaq	408(%rsp), %r15
	jmp	.LBB846_23
	.p2align	4, 0x90
.LBB846_24:                             #   in Loop: Header=BB846_23 Depth=1
	leaq	416(%rsp), %rax
	leaq	192(%rsp), %rcx
	leaq	424(%rsp), %rdx
	leaq	200(%rsp), %rsi
	leaq	204(%rsp), %rdi
	leaq	208(%rsp), %r8
	leaq	212(%rsp), %r9
	leaq	48(%rsp), %r10
.LBB846_31:                             # %String_append_xPtri8.exit.i
                                        #   in Loop: Header=BB846_23 Depth=1
	movq	%r12, (%r10)
	movl	%r13d, (%r9)
	movslq	%r13d, %r9
	movb	%bpl, (%r12,%r9)
	movl	8(%rbx), %r9d
	movl	%r9d, (%r8)
	movl	$1, (%rdi)
	incl	%r9d
	movl	%r9d, (%rsi)
	movl	%r9d, 8(%rbx)
	movq	String@GOTPCREL(%rip), %rsi
	movq	%rsi, (%rdx)
	movq	%rbx, (%rax)
	movl	$9, (%rcx)
	movq	%r14, %rdi
	callq	fgetc@PLT
	movl	%eax, %ebp
	cmpl	$-1, %eax
	je	.LBB846_32
.LBB846_23:                             # %._crit_edge.i
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB846_28 Depth 2
	testl	%ebp, %ebp
	movl	$0, %eax
	cmovlel	%eax, %ebp
	movl	8(%rbx), %r13d
	movl	12(%rbx), %eax
	cmpl	%eax, %r13d
	movq	(%rbx), %r12
	jl	.LBB846_24
# %bb.25:                               #   in Loop: Header=BB846_23 Depth=1
	addl	%eax, %eax
	movl	%eax, 12(%rbx)
	movslq	%eax, %rdi
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, (%rbx)
	testl	%r13d, %r13d
	jle	.LBB846_26
# %bb.27:                               # %.lr.ph.i104.i
                                        #   in Loop: Header=BB846_23 Depth=1
	xorl	%eax, %eax
	.p2align	4, 0x90
.LBB846_28:                             # %._crit_edge.i105.i
                                        #   Parent Loop BB846_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%rbx), %rcx
	movzbl	(%r12,%rax), %edx
	movb	%dl, (%rcx,%rax)
	movl	8(%rbx), %r13d
	incq	%rax
	cmpl	%r13d, %eax
	jl	.LBB846_28
# %bb.29:                               # %String_append_xPtri8.exit.loopexit.i
                                        #   in Loop: Header=BB846_23 Depth=1
	movq	(%rbx), %r12
	jmp	.LBB846_30
.LBB846_26:                             #   in Loop: Header=BB846_23 Depth=1
	movq	%rax, %r12
.LBB846_30:                             # %String_append_xPtri8.exit.i
                                        #   in Loop: Header=BB846_23 Depth=1
	movq	%r15, %rax
	leaq	112(%rsp), %rcx
	leaq	176(%rsp), %rdx
	leaq	120(%rsp), %rsi
	leaq	124(%rsp), %rdi
	leaq	128(%rsp), %r8
	leaq	132(%rsp), %r9
	leaq	184(%rsp), %r10
	jmp	.LBB846_31
.LBB846_32:                             # %IO_B__Self_print_xPtrf64__Self_print_xRepresentable__Self_print_xPtri8__Self_print_xString__Self_print_xPtri64__Self_print_xNil__Self_print_xCharacter__Self_print_xPtri1__Self_print_xPtri32.exit1466
	movq	%r14, %rdi
	callq	fclose@PLT
	movq	String@GOTPCREL(%rip), %rax
	movq	%rax, 432(%rsp)
	movq	%rbx, 440(%rsp)
	movl	$9, 456(%rsp)
	movl	8(%rbx), %eax
	incl	%eax
	movslq	%eax, %rdi
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	callq	bump_malloc_inner@PLT
	movq	%rax, %r14
	movslq	8(%rbx), %r15
	testq	%r15, %r15
	jle	.LBB846_34
# %bb.33:                               # %.lr.ph.i3685
	movq	(%rbx), %rsi
	movq	%r14, %rdi
	movq	%r15, %rdx
	callq	memcpy@PLT
.LBB846_34:                             # %._crit_edge.i3002.preheader
	movb	$0, (%r14,%r15)
	movq	%r14, %rdi
	callq	puts@PLT
	movq	i32_string@GOTPCREL(%rip), %rbx
	movq	%rbx, %rdi
	movl	$4, %esi
	xorl	%eax, %eax
	callq	printf@PLT
	movq	%rbx, %rdi
	movl	$9, %esi
	xorl	%eax, %eax
	callq	printf@PLT
	movq	%rbx, %rdi
	movl	$16, %esi
	xorl	%eax, %eax
	callq	printf@PLT
	movq	%rbx, %rdi
	movl	$25, %esi
	xorl	%eax, %eax
	callq	printf@PLT
	movq	%rbx, %rdi
	movl	$5, %esi
	xorl	%eax, %eax
	callq	printf@PLT
	movl	$8388608, %esi                  # imm = 0x800000
	xorl	%edi, %edi
	movl	$12288, %edx                    # imm = 0x3000
	movl	$4, %ecx
	callq	VirtualAlloc@PLT
	movq	%rax, %rbx
	movq	_functionliteral_yhoemtutmd@GOTPCREL(%rip), %rax
	movq	%rax, (%rbx)
	leaq	8388608(%rbx), %rax
	andq	$-16, %rax
	leaq	8(%rbx), %r13
	leaq	16(%rbx), %rdi
	movq	%rax, 8(%rbx)
	movq	%rax, 24(%rbx)
	movq	coroutine_gmhbntoxov_passer@GOTPCREL(%rip), %rax
	movq	%rax, 32(%rbx)
	movb	$0, 40(%rbx)
	callq	coroutine_trampoline@PLT
	movabsq	$17179869190, %rax              # imm = 0x400000006
	movq	%rax, 64(%rbx)
	movq	i32_typ@GOTPCREL(%rip), %rax
	movq	%rax, 48(%rbx)
	movl	$2, 56(%rbx)
	movq	%rbx, (%rsp)                    # 8-byte Spill
	movq	%fs:0, %rbp
	movq	into_caller_buf@GOTTPOFF(%rip), %rax
	leaq	(%rbp,%rax), %r12
	movq	(%rbp,%rax), %rcx
	movq	%rcx, 80(%rsp)                  # 8-byte Spill
	movq	8(%rbp,%rax), %rcx
	movq	%rcx, 24(%rsp)                  # 8-byte Spill
	movq	16(%rbp,%rax), %rcx
	movq	%rcx, 32(%rsp)                  # 8-byte Spill
	movq	current_coroutine@GOTTPOFF(%rip), %rax
	movq	(%rbp,%rax), %rcx
	movq	%rcx, 40(%rsp)                  # 8-byte Spill
	movq	%rbx, (%rbp,%rax)
	movq	%r13, 16(%rsp)                  # 8-byte Spill
	callq	context_switch@PLT
	movq	40(%rsp), %rax                  # 8-byte Reload
	movq	current_coroutine@GOTTPOFF(%rip), %rcx
	movq	%rax, (%rbp,%rcx)
	movq	80(%rsp), %rax                  # 8-byte Reload
	movq	into_caller_buf@GOTTPOFF(%rip), %rcx
	movq	%rax, (%rbp,%rcx)
	movq	24(%rsp), %rax                  # 8-byte Reload
	movq	%rax, 8(%rbp,%rcx)
	movq	32(%rsp), %rax                  # 8-byte Reload
	movq	%rax, 16(%rbp,%rcx)
	movq	(%rsp), %rcx                    # 8-byte Reload
	movl	56(%rcx), %eax
	movq	%rax, 80(%rsp)                  # 8-byte Spill
	movq	%rcx, %rbp
	movq	48(%rcx), %r14
	movq	_parameterization_Ptri32_or_Nil@GOTPCREL(%rip), %rax
	movq	%rax, 152(%rsp)
	movq	8(%r14), %r15
	movq	16(%r14), %r13
	movq	24(%r14), %rbx
	movq	32(%r14), %r12
	movq	f64_typ@GOTPCREL(%rip), %rcx
	movq	%r13, %rdi
	movq	%r15, %rsi
	movabsq	$-757315540097298781, %rdx      # imm = 0xF57D7987599E0EA3
	movq	%r12, %r8
	callq	*%rbx
	testb	$1, %al
	movl	$1, %ecx
	jne	.LBB846_43
# %bb.35:
	movq	nil_typ@GOTPCREL(%rip), %rcx
	movq	%r13, %rdi
	movq	%r15, %rsi
	movabsq	$-5126806859456325683, %rdx     # imm = 0xB8D9EC530611D7CD
	movq	%r12, %r8
	callq	*%rbx
	movl	$6, %ecx
	testb	$1, %al
	jne	.LBB846_43
# %bb.36:
	movq	i32_typ@GOTPCREL(%rip), %rcx
	movabsq	$-2253724949814257982, %rdx     # imm = 0xE0B9291950E2D6C2
	movq	%r13, %rdi
	movq	%r15, %rsi
	movq	%r12, %r8
	callq	*%rbx
	movl	$9, %ecx
	testb	$1, %al
	jne	.LBB846_43
# %bb.37:
	movq	i8_typ@GOTPCREL(%rip), %rcx
	movabsq	$2582149688529881115, %rdx      # imm = 0x23D5A375FDB5881B
	movq	%r13, %rdi
	movq	%r15, %rsi
	movq	%r12, %r8
	callq	*%rbx
	movl	$3, %ecx
	testb	$1, %al
	jne	.LBB846_43
# %bb.38:
	movq	String@GOTPCREL(%rip), %rcx
	movabsq	$6499063144389013426, %rdx      # imm = 0x5A314F7F0E23EFB2
	movq	%r13, %rdi
	movq	%r15, %rsi
	movq	%r12, %r8
	callq	*%rbx
	movb	%al, 24(%rsp)                   # 1-byte Spill
	movq	Character@GOTPCREL(%rip), %rcx
	movabsq	$6681222582356018452, %rdx      # imm = 0x5CB8788A3EA60514
	movq	%r13, %rdi
	movq	%r15, %rsi
	movq	%r12, %r8
	callq	*%rbx
	testb	$1, 24(%rsp)                    # 1-byte Folded Reload
	je	.LBB846_40
# %bb.39:
	movl	$4, %ecx
	testb	$1, %al
	je	.LBB846_43
.LBB846_40:
	movq	Representable@GOTPCREL(%rip), %rcx
	movabsq	$-7260840641129990118, %rdx     # imm = 0x9B3C4FE80EBA381A
	movq	%r13, %rdi
	movq	%r15, %rsi
	movq	%r12, %r8
	movb	%al, 32(%rsp)                   # 1-byte Spill
	callq	*%rbx
	notb	%al
	movzbl	24(%rsp), %edx                  # 1-byte Folded Reload
	orb	32(%rsp), %dl                   # 1-byte Folded Reload
	orb	%al, %dl
	movl	$2, %ecx
	testb	$1, %dl
	je	.LBB846_43
# %bb.41:                               # %.critedge.i1494
	movq	i64_typ@GOTPCREL(%rip), %rcx
	movabsq	$-7469797244461771922, %rdx     # imm = 0x9855F2FB9BAA136E
	movq	%r13, %rdi
	movq	%r15, %rsi
	movq	%r12, %r8
	callq	*%rbx
	movl	$5, %ecx
	testb	$1, %al
	jne	.LBB846_43
# %bb.42:
	movq	bool_typ@GOTPCREL(%rip), %rcx
	movabsq	$5801531371504802705, %rdx      # imm = 0x50832E0B67D41B91
	movq	%r13, %rdi
	movq	%r15, %rsi
	movq	%r12, %r8
	callq	*%rbx
	movzbl	%al, %ecx
	andl	$1, %ecx
	addl	$7, %ecx
.LBB846_43:                             # %IO_B__Self_print_xPtrf64__Self_print_xRepresentable__Self_print_xPtri8__Self_print_xString__Self_print_xPtri64__Self_print_xNil__Self_print_xCharacter__Self_print_xPtri1__Self_print_xPtri32.exit1497
	movl	%ecx, %eax
	movq	IO@GOTPCREL(%rip), %r9
	leaq	152(%rsp), %rdi
	movq	%r14, %rsi
	movq	80(%rsp), %rdx                  # 8-byte Reload
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	callq	*72(%r9,%rax,8)
	movq	%rbp, %rcx
	movq	i32_typ@GOTPCREL(%rip), %rax
	movq	%rax, 48(%rbp)
	movl	$3, 56(%rbp)
	movq	%fs:0, %rbp
	movq	into_caller_buf@GOTTPOFF(%rip), %rax
	leaq	(%rbp,%rax), %r12
	movq	(%rbp,%rax), %rdx
	movq	%rdx, 80(%rsp)                  # 8-byte Spill
	movq	8(%rbp,%rax), %rdx
	movq	%rdx, 24(%rsp)                  # 8-byte Spill
	movq	16(%rbp,%rax), %rdx
	movq	%rdx, 32(%rsp)                  # 8-byte Spill
	movq	current_coroutine@GOTTPOFF(%rip), %rax
	movq	(%rbp,%rax), %rdx
	movq	%rdx, 40(%rsp)                  # 8-byte Spill
	movq	%rcx, (%rbp,%rax)
	movq	16(%rsp), %r13                  # 8-byte Reload
	callq	context_switch@PLT
	movq	40(%rsp), %rax                  # 8-byte Reload
	movq	current_coroutine@GOTTPOFF(%rip), %rcx
	movq	%rax, (%rbp,%rcx)
	movq	80(%rsp), %rax                  # 8-byte Reload
	movq	into_caller_buf@GOTTPOFF(%rip), %rcx
	movq	%rax, (%rbp,%rcx)
	movq	24(%rsp), %rax                  # 8-byte Reload
	movq	%rax, 8(%rbp,%rcx)
	movq	32(%rsp), %rax                  # 8-byte Reload
	movq	%rax, 16(%rbp,%rcx)
	movq	(%rsp), %rax                    # 8-byte Reload
	movl	56(%rax), %ebx
	movq	48(%rax), %r14
	movq	_parameterization_Ptri32_or_Nil@GOTPCREL(%rip), %rax
	movq	%rax, 144(%rsp)
	movq	8(%r14), %r15
	movq	16(%r14), %r13
	movq	24(%r14), %rbp
	movq	32(%r14), %r12
	movq	f64_typ@GOTPCREL(%rip), %rcx
	movq	%r13, %rdi
	movq	%r15, %rsi
	movabsq	$-757315540097298781, %rdx      # imm = 0xF57D7987599E0EA3
	movq	%r12, %r8
	callq	*%rbp
	testb	$1, %al
	movl	$1, %ecx
	jne	.LBB846_52
# %bb.44:
	movq	nil_typ@GOTPCREL(%rip), %rcx
	movq	%r13, %rdi
	movq	%r15, %rsi
	movabsq	$-5126806859456325683, %rdx     # imm = 0xB8D9EC530611D7CD
	movq	%r12, %r8
	callq	*%rbp
	movl	$6, %ecx
	testb	$1, %al
	jne	.LBB846_52
# %bb.45:
	movq	i32_typ@GOTPCREL(%rip), %rcx
	movabsq	$-2253724949814257982, %rdx     # imm = 0xE0B9291950E2D6C2
	movq	%r13, %rdi
	movq	%r15, %rsi
	movq	%r12, %r8
	callq	*%rbp
	movl	$9, %ecx
	testb	$1, %al
	jne	.LBB846_52
# %bb.46:
	movq	i8_typ@GOTPCREL(%rip), %rcx
	movabsq	$2582149688529881115, %rdx      # imm = 0x23D5A375FDB5881B
	movq	%r13, %rdi
	movq	%r15, %rsi
	movq	%r12, %r8
	callq	*%rbp
	movl	$3, %ecx
	testb	$1, %al
	jne	.LBB846_52
# %bb.47:
	movq	String@GOTPCREL(%rip), %rcx
	movabsq	$6499063144389013426, %rdx      # imm = 0x5A314F7F0E23EFB2
	movq	%r13, %rdi
	movq	%r15, %rsi
	movq	%r12, %r8
	callq	*%rbp
	movb	%al, (%rsp)                     # 1-byte Spill
	movq	Character@GOTPCREL(%rip), %rcx
	movabsq	$6681222582356018452, %rdx      # imm = 0x5CB8788A3EA60514
	movq	%r13, %rdi
	movq	%r15, %rsi
	movq	%r12, %r8
	callq	*%rbp
	testb	$1, (%rsp)                      # 1-byte Folded Reload
	je	.LBB846_49
# %bb.48:
	movl	$4, %ecx
	testb	$1, %al
	je	.LBB846_52
.LBB846_49:
	movq	Representable@GOTPCREL(%rip), %rcx
	movabsq	$-7260840641129990118, %rdx     # imm = 0x9B3C4FE80EBA381A
	movq	%r13, %rdi
	movq	%r15, %rsi
	movq	%r12, %r8
	movb	%al, 16(%rsp)                   # 1-byte Spill
	callq	*%rbp
	notb	%al
	movzbl	(%rsp), %edx                    # 1-byte Folded Reload
	orb	16(%rsp), %dl                   # 1-byte Folded Reload
	orb	%al, %dl
	movl	$2, %ecx
	testb	$1, %dl
	je	.LBB846_52
# %bb.50:                               # %.critedge.i1516
	movq	i64_typ@GOTPCREL(%rip), %rcx
	movabsq	$-7469797244461771922, %rdx     # imm = 0x9855F2FB9BAA136E
	movq	%r13, %rdi
	movq	%r15, %rsi
	movq	%r12, %r8
	callq	*%rbp
	movl	$5, %ecx
	testb	$1, %al
	jne	.LBB846_52
# %bb.51:
	movq	bool_typ@GOTPCREL(%rip), %rcx
	movabsq	$5801531371504802705, %rdx      # imm = 0x50832E0B67D41B91
	movq	%r13, %rdi
	movq	%r15, %rsi
	movq	%r12, %r8
	callq	*%rbp
	movzbl	%al, %ecx
	andl	$1, %ecx
	addl	$7, %ecx
.LBB846_52:                             # %IO_B__Self_print_xPtrf64__Self_print_xRepresentable__Self_print_xPtri8__Self_print_xString__Self_print_xPtri64__Self_print_xNil__Self_print_xCharacter__Self_print_xPtri1__Self_print_xPtri32.exit1519
	movl	%ecx, %eax
	leaq	144(%rsp), %rdi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	movq	IO@GOTPCREL(%rip), %r9
	callq	*72(%r9,%rax,8)
	movl	$8388608, %esi                  # imm = 0x800000
	xorl	%edi, %edi
	movl	$12288, %edx                    # imm = 0x3000
	movl	$4, %ecx
	callq	VirtualAlloc@PLT
	movq	%rax, (%rsp)                    # 8-byte Spill
	movq	_functionliteral_zaqykqzujn@GOTPCREL(%rip), %rcx
	movq	%rcx, (%rax)
	leaq	8388608(%rax), %rcx
	andq	$-16, %rcx
	leaq	8(%rax), %r13
	leaq	16(%rax), %rdi
	movq	%rcx, 8(%rax)
	movq	%rcx, 24(%rax)
	movq	coroutine_heppzcytyw_passer@GOTPCREL(%rip), %rcx
	movq	%rcx, 32(%rax)
	movb	$0, 40(%rax)
	callq	coroutine_trampoline@PLT
	movq	%fs:0, %rbp
	movq	into_caller_buf@GOTTPOFF(%rip), %rax
	leaq	(%rbp,%rax), %r12
	movq	(%rbp,%rax), %rcx
	movq	%rcx, 16(%rsp)                  # 8-byte Spill
	movq	8(%rbp,%rax), %rcx
	movq	%rcx, 80(%rsp)                  # 8-byte Spill
	movq	16(%rbp,%rax), %rcx
	movq	%rcx, 24(%rsp)                  # 8-byte Spill
	movq	current_coroutine@GOTTPOFF(%rip), %rcx
	movq	(%rbp,%rcx), %rax
	movq	%rax, 32(%rsp)                  # 8-byte Spill
	movq	(%rsp), %rax                    # 8-byte Reload
	movq	%rax, (%rbp,%rcx)
	callq	context_switch@PLT
	movq	32(%rsp), %rax                  # 8-byte Reload
	movq	current_coroutine@GOTTPOFF(%rip), %rcx
	movq	%rax, (%rbp,%rcx)
	movq	16(%rsp), %rax                  # 8-byte Reload
	movq	into_caller_buf@GOTTPOFF(%rip), %rcx
	movq	%rax, (%rbp,%rcx)
	movq	80(%rsp), %rax                  # 8-byte Reload
	movq	%rax, 8(%rbp,%rcx)
	movq	24(%rsp), %rax                  # 8-byte Reload
	movq	%rax, 16(%rbp,%rcx)
	movq	(%rsp), %rax                    # 8-byte Reload
	movl	56(%rax), %r13d
	movq	48(%rax), %rbx
	movq	_parameterization_Ptri32_or_Nil@GOTPCREL(%rip), %rax
	movq	%rax, 136(%rsp)
	movq	8(%rbx), %r14
	movq	16(%rbx), %r12
	movq	24(%rbx), %rbp
	movq	32(%rbx), %r15
	movq	f64_typ@GOTPCREL(%rip), %rcx
	movq	%r12, %rdi
	movq	%r14, %rsi
	movabsq	$-757315540097298781, %rdx      # imm = 0xF57D7987599E0EA3
	movq	%r15, %r8
	callq	*%rbp
	movl	$1, %ecx
	testb	$1, %al
	jne	.LBB846_61
# %bb.53:
	movq	nil_typ@GOTPCREL(%rip), %rcx
	movq	%r12, %rdi
	movq	%r14, %rsi
	movabsq	$-5126806859456325683, %rdx     # imm = 0xB8D9EC530611D7CD
	movq	%r15, %r8
	callq	*%rbp
	movl	$6, %ecx
	testb	$1, %al
	jne	.LBB846_61
# %bb.54:
	movq	i32_typ@GOTPCREL(%rip), %rcx
	movabsq	$-2253724949814257982, %rdx     # imm = 0xE0B9291950E2D6C2
	movq	%r12, %rdi
	movq	%r14, %rsi
	movq	%r15, %r8
	callq	*%rbp
	movl	$9, %ecx
	testb	$1, %al
	jne	.LBB846_61
# %bb.55:
	movq	i8_typ@GOTPCREL(%rip), %rcx
	movabsq	$2582149688529881115, %rdx      # imm = 0x23D5A375FDB5881B
	movq	%r12, %rdi
	movq	%r14, %rsi
	movq	%r15, %r8
	callq	*%rbp
	movl	$3, %ecx
	testb	$1, %al
	jne	.LBB846_61
# %bb.56:
	movq	String@GOTPCREL(%rip), %rcx
	movabsq	$6499063144389013426, %rdx      # imm = 0x5A314F7F0E23EFB2
	movq	%r12, %rdi
	movq	%r14, %rsi
	movq	%r15, %r8
	callq	*%rbp
	movb	%al, (%rsp)                     # 1-byte Spill
	movq	Character@GOTPCREL(%rip), %rcx
	movabsq	$6681222582356018452, %rdx      # imm = 0x5CB8788A3EA60514
	movq	%r12, %rdi
	movq	%r14, %rsi
	movq	%r15, %r8
	callq	*%rbp
	testb	$1, (%rsp)                      # 1-byte Folded Reload
	je	.LBB846_58
# %bb.57:
	movl	$4, %ecx
	testb	$1, %al
	je	.LBB846_61
.LBB846_58:
	movq	Representable@GOTPCREL(%rip), %rcx
	movabsq	$-7260840641129990118, %rdx     # imm = 0x9B3C4FE80EBA381A
	movq	%r12, %rdi
	movq	%r14, %rsi
	movq	%r15, %r8
	movb	%al, 16(%rsp)                   # 1-byte Spill
	callq	*%rbp
	notb	%al
	movzbl	(%rsp), %edx                    # 1-byte Folded Reload
	orb	16(%rsp), %dl                   # 1-byte Folded Reload
	orb	%al, %dl
	movl	$2, %ecx
	testb	$1, %dl
	je	.LBB846_61
# %bb.59:                               # %.critedge.i1547
	movq	i64_typ@GOTPCREL(%rip), %rcx
	movabsq	$-7469797244461771922, %rdx     # imm = 0x9855F2FB9BAA136E
	movq	%r12, %rdi
	movq	%r14, %rsi
	movq	%r15, %r8
	callq	*%rbp
	movl	$5, %ecx
	testb	$1, %al
	jne	.LBB846_61
# %bb.60:
	movq	bool_typ@GOTPCREL(%rip), %rcx
	movabsq	$5801531371504802705, %rdx      # imm = 0x50832E0B67D41B91
	movq	%r12, %rdi
	movq	%r14, %rsi
	movq	%r15, %r8
	callq	*%rbp
	movzbl	%al, %ecx
	andl	$1, %ecx
	addl	$7, %ecx
.LBB846_61:                             # %IO_B__Self_print_xPtrf64__Self_print_xRepresentable__Self_print_xPtri8__Self_print_xString__Self_print_xPtri64__Self_print_xNil__Self_print_xCharacter__Self_print_xPtri1__Self_print_xPtri32.exit1676
	movl	%ecx, %eax
	movl	%r13d, %edx
	leaq	136(%rsp), %rdi
	movq	%rbx, %rsi
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	movq	IO@GOTPCREL(%rip), %r9
	callq	*72(%r9,%rax,8)
	movq	%fs:0, %r15
	leaq	current_ptr@TPOFF(%r15), %rsi
	movl	$16, %edi
	callq	bump_malloc_inner@PLT
	movq	%rax, %rcx
	movq	%rax, (%rsp)                    # 8-byte Spill
	movq	Channel@GOTPCREL(%rip), %r14
	movq	nil_typ@GOTPCREL(%rip), %rax
	movq	%rax, (%rcx)
	movl	$4, %ebp
	movl	$8388608, %esi                  # imm = 0x800000
	xorl	%edi, %edi
	movl	$12288, %edx                    # imm = 0x3000
	movl	$4, %ecx
	callq	VirtualAlloc@PLT
	movq	%rax, %rbx
	movq	_functionliteral_euiyusxheo@GOTPCREL(%rip), %rax
	movq	%rax, (%rbx)
	leaq	8388608(%rbx), %rax
	andq	$-16, %rax
	leaq	8(%rbx), %r13
	leaq	16(%rbx), %rdi
	movq	%rax, 8(%rbx)
	movq	%rax, 24(%rbx)
	movq	coroutine_yodvxgpykp_passer@GOTPCREL(%rip), %rax
	movq	%rax, 32(%rbx)
	movb	$0, 40(%rbx)
	callq	coroutine_trampoline@PLT
	movq	(%rsp), %rax                    # 8-byte Reload
	movq	%rax, 88(%rbx)
	movq	%r14, 80(%rbx)
	movl	$9, 104(%rbx)
	movq	into_caller_buf@GOTTPOFF(%rip), %rcx
	movq	%r15, 40(%rsp)                  # 8-byte Spill
	leaq	(%r15,%rcx), %r12
	movq	(%r15,%rcx), %rax
	movq	%rax, 16(%rsp)                  # 8-byte Spill
	movq	8(%r15,%rcx), %rax
	movq	%rax, 80(%rsp)                  # 8-byte Spill
	movq	16(%r15,%rcx), %rax
	movq	%rax, 24(%rsp)                  # 8-byte Spill
	movq	current_coroutine@GOTTPOFF(%rip), %rcx
	movq	(%r15,%rcx), %rax
	movq	%rax, 32(%rsp)                  # 8-byte Spill
	movq	%rbx, (%r15,%rcx)
	callq	context_switch@PLT
	movq	(%rsp), %rdi                    # 8-byte Reload
	movq	current_coroutine@GOTTPOFF(%rip), %r14
	movq	into_caller_buf@GOTTPOFF(%rip), %rbx
	movq	nil_typ@GOTPCREL(%rip), %rdx
	movq	40(%rsp), %rcx                  # 8-byte Reload
	movq	32(%rsp), %rax                  # 8-byte Reload
	movq	%rax, (%rcx,%r14)
	movq	16(%rsp), %rax                  # 8-byte Reload
	movq	%rax, (%rcx,%rbx)
	movq	80(%rsp), %rax                  # 8-byte Reload
	movq	%rax, 8(%rcx,%rbx)
	movq	24(%rsp), %rax                  # 8-byte Reload
	movq	%rax, 16(%rcx,%rbx)
	movq	(%rdi), %rax
	cmpq	%rdx, %rax
	setne	%cl
	testq	%rax, %rax
	setne	%al
	testb	%al, %cl
	jne	.LBB846_63
	.p2align	4, 0x90
.LBB846_62:                             # =>This Inner Loop Header: Depth=1
	movq	%fs:0, %r13
	leaq	current_ptr@TPOFF(%r13), %rsi
	xorl	%edi, %edi
	callq	bump_malloc_inner@PLT
	movq	Blocking@GOTPCREL(%rip), %rdx
	movq	%rdx, 48(%rsp)
	movq	%rax, 56(%rsp)
	movl	$9, 72(%rsp)
	movq	64(%rsp), %rcx
	movq	(%r13,%r14), %r12
	movq	%rax, 64(%r12)
	movq	%rcx, 72(%r12)
	movq	%rdx, 48(%r12)
	movl	$9, 80(%r12)
	addq	$8, %r12
	addq	%rbx, %r13
	callq	context_switch@PLT
	movq	(%rsp), %rdi                    # 8-byte Reload
	movq	current_coroutine@GOTTPOFF(%rip), %r14
	movq	into_caller_buf@GOTTPOFF(%rip), %rbx
	movq	nil_typ@GOTPCREL(%rip), %rdx
	movq	(%rdi), %rax
	cmpq	%rdx, %rax
	sete	%cl
	testq	%rax, %rax
	sete	%al
	orb	%cl, %al
	jne	.LBB846_62
.LBB846_63:                             # %.lr.ph.i4566.lr.ph
	movl	8(%rdi), %esi
	movq	%rdx, (%rdi)
	movq	i32_string@GOTPCREL(%rip), %rdi
	xorl	%eax, %eax
	callq	printf@PLT
	movl	$9, %eax
	movl	$4, %esi
	testb	$1, %al
	jne	.LBB846_66
.LBB846_65:
	movl	%ebp, %ecx
	jmp	.LBB846_68
	.p2align	4, 0x90
.LBB846_66:                             # =>This Inner Loop Header: Depth=1
	cmpl	$15, %ebp
	jg	.LBB846_70
# %bb.67:                               # %MapIterator_next_.exit4966
                                        #   in Loop: Header=BB846_66 Depth=1
	leal	1(%rbp), %ecx
	movl	%ebp, %eax
	imull	%ebp, %eax
	testb	$1, %al
	movl	%ecx, %ebp
	jne	.LBB846_66
.LBB846_68:                             # %FilterIterator_next_.exit4589
	addl	%eax, %esi
	cmpl	$15, %ecx
	jg	.LBB846_70
# %bb.69:                               # %MapIterator_next_.exit5005
	leal	1(%rcx), %ebp
	imull	%ecx, %ecx
	movl	%ecx, %eax
	testb	$1, %al
	jne	.LBB846_66
	jmp	.LBB846_65
.LBB846_70:                             # %IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32.exit4086
	movq	i32_string@GOTPCREL(%rip), %rbx
	movq	%rbx, %rdi
	xorl	%eax, %eax
	callq	printf@PLT
	movq	%rbx, %rdi
	movl	$256, %esi                      # imm = 0x100
	xorl	%eax, %eax
	callq	printf@PLT
	movq	%rbx, %rdi
	movl	$5, %esi
	xorl	%eax, %eax
	callq	printf@PLT
	xorl	%eax, %eax
	addq	$632, %rsp                      # imm = 0x278
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end846:
	.size	main, .Lfunc_end846-main
	.cfi_endproc
                                        # -- End function
	.weak	_box_union_typ                  # -- Begin function _box_union_typ
	.p2align	4, 0x90
	.type	_box_union_typ,@function
_box_union_typ:                         # @_box_union_typ
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$56, %rsp
	.cfi_def_cfa_offset 112
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rsi, %r14
	movq	%rdi, %rbx
	movq	union_typ@GOTPCREL(%rip), %rbp
	movq	%rbp, 8(%rsp)
	movq	8(%rdx), %rdi
	testq	%rdi, %rdi
	je	.LBB847_1
# %bb.2:                                # %.lr.ph.i.preheader
	movq	%rdx, %r13
	addq	$16, %r13
	movl	$1, %r15d
	xorl	%r12d, %r12d
	.p2align	4, 0x90
.LBB847_3:                              # %.lr.ph.i
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rax
	callq	*48(%rax)
	movq	%rax, %rcx
	movq	%rdx, %rsi
	cmpq	%r15, %rdx
	cmovaq	%rdx, %r15
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	subq	%rdx, %rsi
	testq	%rdx, %rdx
	cmoveq	%rdx, %rsi
	addq	%rcx, %r12
	cmpq	%rsi, %r12
	cmovbeq	%rsi, %r12
	movq	(%r13), %rdi
	addq	$8, %r13
	testq	%rdi, %rdi
	jne	.LBB847_3
# %bb.4:                                # %.lr.ph.._crit_edge_crit_edge.i
	addq	$8, %r12
	jmp	.LBB847_5
.LBB847_1:
	movl	$1, %r15d
	movl	$8, %r12d
.LBB847_5:                              # %_size_union_typ.exit
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%r15
	subq	%rdx, %r15
	testq	%rdx, %rdx
	cmoveq	%rdx, %r15
	addq	%r12, %r15
	cmpq	$32, %r15
	jne	.LBB847_11
# %bb.6:
	leaq	8(%rsp), %rax
	testq	%r15, %r15
	jne	.LBB847_8
	jmp	.LBB847_10
.LBB847_11:
	cmpq	$17, %r15
	jge	.LBB847_13
# %bb.12:
	leaq	16(%rsp), %rax
	testq	%r15, %r15
	je	.LBB847_10
.LBB847_8:                              # %loop-memcpy-expansion2.preheader
	xorl	%ecx, %ecx
	.p2align	4, 0x90
.LBB847_9:                              # %loop-memcpy-expansion2
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%r14,%rcx), %edx
	movb	%dl, (%rax,%rcx)
	incq	%rcx
	cmpq	%r15, %rcx
	jb	.LBB847_9
.LBB847_10:                             # %post-loop-memcpy-expansion1
	movq	8(%rsp), %rbp
	jmp	.LBB847_17
.LBB847_13:
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	movq	%r15, %rdi
	callq	bump_malloc_inner@PLT
	testq	%r15, %r15
	je	.LBB847_16
# %bb.14:                               # %loop-memcpy-expansion.preheader
	xorl	%ecx, %ecx
	.p2align	4, 0x90
.LBB847_15:                             # %loop-memcpy-expansion
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%r14,%rcx), %edx
	movb	%dl, (%rax,%rcx)
	incq	%rcx
	cmpq	%r15, %rcx
	jb	.LBB847_15
.LBB847_16:                             # %post-loop-memcpy-expansion
	movq	%rax, 16(%rsp)
.LBB847_17:
	movl	32(%rsp), %eax
	movq	16(%rsp), %rcx
	movq	24(%rsp), %rdx
	movq	%rdx, 24(%rbx)
	movq	%rcx, 16(%rbx)
	movl	%eax, 32(%rbx)
	movq	%rbp, (%rbx)
	movq	%rbx, %rax
	addq	$56, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end847:
	.size	_box_union_typ, .Lfunc_end847-_box_union_typ
	.cfi_endproc
                                        # -- End function
	.globl	adjust_trampoline               # -- Begin function adjust_trampoline
	.p2align	4, 0x90
	.type	adjust_trampoline,@function
adjust_trampoline:                      # @adjust_trampoline
# %bb.0:
	movq	%rdi, %rax
	retq
.Lfunc_end848:
	.size	adjust_trampoline, .Lfunc_end848-adjust_trampoline
                                        # -- End function
	.globl	bump_malloc                     # -- Begin function bump_malloc
	.p2align	4, 0x90
	.type	bump_malloc,@function
bump_malloc:                            # @bump_malloc
# %bb.0:
	movq	%fs:0, %rax
	leaq	current_ptr@TPOFF(%rax), %rsi
	jmp	bump_malloc_inner@PLT           # TAILCALL
.Lfunc_end849:
	.size	bump_malloc, .Lfunc_end849-bump_malloc
                                        # -- End function
	.globl	bump_malloc_inner               # -- Begin function bump_malloc_inner
	.p2align	4, 0x90
	.type	bump_malloc_inner,@function
bump_malloc_inner:                      # @bump_malloc_inner
# %bb.0:
	addq	$15, %rdi
	andq	$-16, %rdi
	movq	(%rsi), %rax
	addq	%rax, %rdi
	movq	%rdi, (%rsi)
	retq
.Lfunc_end850:
	.size	bump_malloc_inner, .Lfunc_end850-bump_malloc_inner
                                        # -- End function
	.globl	_size_tuple_typ                 # -- Begin function _size_tuple_typ
	.p2align	4, 0x90
	.type	_size_tuple_typ,@function
_size_tuple_typ:                        # @_size_tuple_typ
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	movq	8(%rdi), %rdi
	testq	%rdi, %rdi
	je	.LBB851_1
# %bb.2:                                # %.lr.ph.preheader
	addq	$16, %r14
	movl	$1, %ebx
	xorl	%r15d, %r15d
	.p2align	4, 0x90
.LBB851_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rax
	callq	*48(%rax)
	movq	%rax, %rcx
	movq	%rdx, %rsi
	cmpq	%rbx, %rdx
	cmovaq	%rdx, %rbx
	movq	%r15, %rax
	xorl	%edx, %edx
	divq	%rsi
	subq	%rdx, %rsi
	testq	%rdx, %rdx
	cmoveq	%rdx, %rsi
	addq	%r15, %rcx
	addq	%rsi, %rcx
	movq	(%r14), %rdi
	addq	$8, %r14
	testq	%rdi, %rdi
	movq	%rcx, %r15
	jne	.LBB851_3
	jmp	.LBB851_4
.LBB851_1:
	movl	$1, %ebx
	xorl	%ecx, %ecx
.LBB851_4:                              # %._crit_edge
	movq	%rcx, %rax
	xorl	%edx, %edx
	divq	%rbx
	movq	%rbx, %rax
	subq	%rdx, %rax
	testq	%rdx, %rdx
	cmoveq	%rdx, %rax
	addq	%rcx, %rax
	movq	%rbx, %rdx
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end851:
	.size	_size_tuple_typ, .Lfunc_end851-_size_tuple_typ
	.cfi_endproc
                                        # -- End function
	.globl	_size_union_typ                 # -- Begin function _size_union_typ
	.p2align	4, 0x90
	.type	_size_union_typ,@function
_size_union_typ:                        # @_size_union_typ
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rdi, %r15
	movq	8(%rdi), %rdi
	testq	%rdi, %rdi
	je	.LBB852_1
# %bb.2:                                # %.lr.ph.preheader
	addq	$16, %r15
	movl	$1, %ebx
	xorl	%r14d, %r14d
	.p2align	4, 0x90
.LBB852_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rax
	callq	*48(%rax)
	movq	%rax, %rcx
	movq	%rdx, %rsi
	cmpq	%rbx, %rdx
	cmovaq	%rdx, %rbx
	movq	%r14, %rax
	xorl	%edx, %edx
	divq	%rsi
	subq	%rdx, %rsi
	testq	%rdx, %rdx
	cmoveq	%rdx, %rsi
	addq	%rcx, %r14
	cmpq	%rsi, %r14
	cmovbeq	%rsi, %r14
	movq	(%r15), %rdi
	addq	$8, %r15
	testq	%rdi, %rdi
	jne	.LBB852_3
# %bb.4:                                # %.lr.ph.._crit_edge_crit_edge
	addq	$8, %r14
	jmp	.LBB852_5
.LBB852_1:
	movl	$1, %ebx
	movl	$8, %r14d
.LBB852_5:                              # %._crit_edge
	movq	%r14, %rax
	xorl	%edx, %edx
	divq	%rbx
	movq	%rbx, %rax
	subq	%rdx, %rax
	testq	%rdx, %rdx
	cmoveq	%rdx, %rax
	addq	%r14, %rax
	movq	%rbx, %rdx
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end852:
	.size	_size_union_typ, .Lfunc_end852-_size_union_typ
	.cfi_endproc
                                        # -- End function
	.globl	_unbox_union_typ                # -- Begin function _unbox_union_typ
	.p2align	4, 0x90
	.type	_unbox_union_typ,@function
_unbox_union_typ:                       # @_unbox_union_typ
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$56, %rsp
	.cfi_def_cfa_offset 112
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%r9, %rbx
	movq	%rsi, %r14
	movq	%rdi, 8(%rsp)
	leaq	16(%rsp), %rbp
	movq	%rdx, 24(%rsp)
	movq	%rsi, 16(%rsp)
	movl	%ecx, 32(%rsp)
	movq	8(%r8), %rdi
	testq	%rdi, %rdi
	je	.LBB853_1
# %bb.2:                                # %.lr.ph.i.preheader
	movq	%r8, %r12
	addq	$16, %r12
	movl	$1, %r13d
	xorl	%r15d, %r15d
	.p2align	4, 0x90
.LBB853_3:                              # %.lr.ph.i
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rax
	callq	*48(%rax)
	movq	%rax, %rcx
	movq	%rdx, %rsi
	cmpq	%r13, %rdx
	cmovaq	%rdx, %r13
	movq	%r15, %rax
	xorl	%edx, %edx
	divq	%rsi
	subq	%rdx, %rsi
	testq	%rdx, %rdx
	cmoveq	%rdx, %rsi
	addq	%rcx, %r15
	cmpq	%rsi, %r15
	cmovbeq	%rsi, %r15
	movq	(%r12), %rdi
	addq	$8, %r12
	testq	%rdi, %rdi
	jne	.LBB853_3
# %bb.4:                                # %.lr.ph.._crit_edge_crit_edge.i
	addq	$8, %r15
	jmp	.LBB853_5
.LBB853_1:
	movl	$1, %r13d
	movl	$8, %r15d
.LBB853_5:                              # %_size_union_typ.exit
	movq	%r15, %rax
	xorl	%edx, %edx
	divq	%r13
	subq	%rdx, %r13
	testq	%rdx, %rdx
	cmoveq	%rdx, %r13
	leaq	(%r13,%r15), %rax
	cmpq	$17, %rax
	cmovlq	%rbp, %r14
	cmpq	$32, %rax
	leaq	8(%rsp), %rax
	cmovneq	%r14, %rax
	addq	%r15, %r13
	je	.LBB853_8
# %bb.6:                                # %loop-memcpy-expansion.preheader
	xorl	%ecx, %ecx
	.p2align	4, 0x90
.LBB853_7:                              # %loop-memcpy-expansion
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%rax,%rcx), %edx
	movb	%dl, (%rbx,%rcx)
	incq	%rcx
	cmpq	%r13, %rcx
	jb	.LBB853_7
.LBB853_8:                              # %post-loop-memcpy-expansion
	addq	$56, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end853:
	.size	_unbox_union_typ, .Lfunc_end853-_unbox_union_typ
	.cfi_endproc
                                        # -- End function
	.globl	_box_Default                    # -- Begin function _box_Default
	.p2align	4, 0x90
	.type	_box_Default,@function
_box_Default:                           # @_box_Default
# %bb.0:
	movq	%rdi, %rax
	movl	24(%rsi), %ecx
	movq	(%rsi), %rdx
	movq	8(%rsi), %rdi
	movq	16(%rsi), %rsi
	movq	%rsi, 24(%rax)
	movq	%rdi, 16(%rax)
	movl	%ecx, 32(%rax)
	movq	%rdx, (%rax)
	retq
.Lfunc_end854:
	.size	_box_Default, .Lfunc_end854-_box_Default
                                        # -- End function
	.globl	_unbox_Default                  # -- Begin function _unbox_Default
	.p2align	4, 0x90
	.type	_unbox_Default,@function
_unbox_Default:                         # @_unbox_Default
# %bb.0:
	movq	%rdi, (%r9)
	movq	%rdx, 16(%r9)
	movq	%rsi, 8(%r9)
	movl	%ecx, 24(%r9)
	retq
.Lfunc_end855:
	.size	_unbox_Default, .Lfunc_end855-_unbox_Default
                                        # -- End function
	.globl	anoint_trampoline               # -- Begin function anoint_trampoline
	.p2align	4, 0x90
	.type	anoint_trampoline,@function
anoint_trampoline:                      # @anoint_trampoline
# %bb.0:
	pushq	%rax
	leaq	4(%rsp), %rcx
	movl	$16, %esi
	movl	$64, %edx
	callq	VirtualProtect@PLT
	popq	%rax
	retq
.Lfunc_end856:
	.size	anoint_trampoline, .Lfunc_end856-anoint_trampoline
                                        # -- End function
	.globl	coroutine_create                # -- Begin function coroutine_create
	.p2align	4, 0x90
	.type	coroutine_create,@function
coroutine_create:                       # @coroutine_create
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movl	$8388608, %esi                  # imm = 0x800000
	xorl	%edi, %edi
	movl	$12288, %edx                    # imm = 0x3000
	movl	$4, %ecx
	callq	VirtualAlloc@PLT
	movq	%rax, %r15
	movq	%r14, (%rax)
	addq	$8388608, %rax                  # imm = 0x800000
	andq	$-16, %rax
	leaq	16(%r15), %rdi
	movq	%rax, 8(%r15)
	movq	%rax, 24(%r15)
	movq	%rbx, 32(%r15)
	movb	$0, 40(%r15)
	callq	coroutine_trampoline@PLT
	movq	%r15, %rax
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end857:
	.size	coroutine_create, .Lfunc_end857-coroutine_create
	.cfi_endproc
                                        # -- End function
	.globl	setup_landing_pad               # -- Begin function setup_landing_pad
	.p2align	4, 0x90
	.type	setup_landing_pad,@function
setup_landing_pad:                      # @setup_landing_pad
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movl	$8388608, %esi                  # imm = 0x800000
	xorl	%edi, %edi
	movl	$12288, %edx                    # imm = 0x3000
	movl	$4, %ecx
	callq	VirtualAlloc@PLT
	movq	%fs:0, %r14
	movq	%rax, current_ptr@TPOFF(%r14)
	movq	into_caller_buf@GOTTPOFF(%rip), %rax
	movq	%rsp, (%r14,%rax)
	movq	$.Ltmp0, 8(%r14,%rax)
	movq	%rsp, 16(%r14,%rax)
	movl	$8388608, %esi                  # imm = 0x800000
	xorl	%edi, %edi
	movl	$12288, %edx                    # imm = 0x3000
	movl	$4, %ecx
	callq	VirtualAlloc@PLT
	movq	%rax, %rbx
	movq	setup_landing_pad@GOTPCREL(%rip), %rax
	movq	%rax, (%rbx)
	leaq	8388608(%rbx), %rax
	andq	$-16, %rax
	leaq	16(%rbx), %rdi
	movq	%rax, 8(%rbx)
	movq	%rax, 24(%rbx)
	movq	arg_passer@GOTPCREL(%rip), %rax
	movq	%rax, 32(%rbx)
	movb	$0, 40(%rbx)
	callq	coroutine_trampoline@PLT
	movq	current_coroutine@GOTTPOFF(%rip), %r15
	movq	%rbx, (%r14,%r15)
	movq	always_one@GOTTPOFF(%rip), %rax
	cmpb	$0, (%r14,%rax)
	je	.LBB858_2
# %bb.1:                                # %exit
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.Ltmp0:                                 # Block address taken
.LBB858_2:                              # %landing_pad
	.cfi_def_cfa_offset 32
	movl	$string_string.17, %edi
	movl	$exception_message, %esi
	callq	printf@PLT
	movq	%fs:0, %rax
	movq	(%rax,%r15), %rdi
	callq	report_exception@PLT
	callq	exit@PLT
.Lfunc_end858:
	.size	setup_landing_pad, .Lfunc_end858-setup_landing_pad
	.cfi_endproc
                                        # -- End function
	.globl	arg_passer                      # -- Begin function arg_passer
	.p2align	4, 0x90
	.type	arg_passer,@function
arg_passer:                             # @arg_passer
	.cfi_startproc
# %bb.0:
	jmpq	*(%rdi)                         # TAILCALL
.Lfunc_end859:
	.size	arg_passer, .Lfunc_end859-arg_passer
	.cfi_endproc
                                        # -- End function
	.globl	returns_one                     # -- Begin function returns_one
	.p2align	4, 0x90
	.type	returns_one,@function
returns_one:                            # @returns_one
# %bb.0:
	movq	always_one@GOTTPOFF(%rip), %rax
	movq	%fs:0, %rcx
	movzbl	(%rcx,%rax), %eax
	retq
.Lfunc_end860:
	.size	returns_one, .Lfunc_end860-returns_one
                                        # -- End function
	.globl	get_offset                      # -- Begin function get_offset
	.p2align	4, 0x90
	.type	get_offset,@function
get_offset:                             # @get_offset
# %bb.0:
	movq	8(%rdi), %rax
	movq	40(%rdi), %rcx
	imulq	(%rsi), %rax
	movq	%rax, %rdx
	shrq	$32, %rdx
	xorq	%rax, %rdx
	andq	16(%rdi), %rdx
	movl	(%rcx,%rdx,4), %eax
	retq
.Lfunc_end861:
	.size	get_offset, .Lfunc_end861-get_offset
                                        # -- End function
	.globl	hash_to_index                   # -- Begin function hash_to_index
	.p2align	4, 0x90
	.type	hash_to_index,@function
hash_to_index:                          # @hash_to_index
# %bb.0:
	imulq	%rdx, %rsi
	movq	%rsi, %rax
	shrq	$32, %rax
	xorq	%rsi, %rax
	andq	%rdi, %rax
	retq
.Lfunc_end862:
	.size	hash_to_index, .Lfunc_end862-hash_to_index
                                        # -- End function
	.globl	assume_offset                   # -- Begin function assume_offset
	.p2align	4, 0x90
	.type	assume_offset,@function
assume_offset:                          # @assume_offset
# %bb.0:
	retq
.Lfunc_end863:
	.size	assume_offset, .Lfunc_end863-assume_offset
                                        # -- End function
	.globl	set_offset                      # -- Begin function set_offset
	.p2align	4, 0x90
	.type	set_offset,@function
set_offset:                             # @set_offset
# %bb.0:
	movq	(%rdi), %rax
	movq	8(%rax), %rcx
	movq	40(%rax), %rdx
	imulq	(%rsi), %rcx
	movq	%rcx, %rsi
	shrq	$32, %rsi
	xorq	%rcx, %rsi
	andq	16(%rax), %rsi
	movl	(%rdx,%rsi,4), %eax
	movl	%eax, 24(%rdi)
	retq
.Lfunc_end864:
	.size	set_offset, .Lfunc_end864-set_offset
                                        # -- End function
	.globl	subtype_test                    # -- Begin function subtype_test
	.p2align	4, 0x90
	.type	subtype_test,@function
subtype_test:                           # @subtype_test
# %bb.0:
	imulq	%rdx, %rsi
	movq	%rsi, %rax
	shrq	$32, %rax
	xorq	%rsi, %rax
	andq	%rdi, %rax
	cmpq	%rcx, (%r8,%rax,8)
	sete	%al
	retq
.Lfunc_end865:
	.size	subtype_test, .Lfunc_end865-subtype_test
                                        # -- End function
	.globl	subtype_test_wrapper            # -- Begin function subtype_test_wrapper
	.p2align	4, 0x90
	.type	subtype_test_wrapper,@function
subtype_test_wrapper:                   # @subtype_test_wrapper
# %bb.0:
	movq	%rdi, %rax
	movq	%rsi, %rdi
	movq	%rdx, %rsi
	movq	%rcx, %rdx
	movq	%r8, %rcx
	movq	%r9, %r8
	jmpq	*%rax                           # TAILCALL
.Lfunc_end866:
	.size	subtype_test_wrapper, .Lfunc_end866-subtype_test_wrapper
                                        # -- End function
	.globl	arg_buffer_filler               # -- Begin function arg_buffer_filler
	.p2align	4, 0x90
	.type	arg_buffer_filler,@function
arg_buffer_filler:                      # @arg_buffer_filler
# %bb.0:
	retq
.Lfunc_end867:
	.size	arg_buffer_filler, .Lfunc_end867-arg_buffer_filler
                                        # -- End function
	.globl	get_current_coroutine           # -- Begin function get_current_coroutine
	.p2align	4, 0x90
	.type	get_current_coroutine,@function
get_current_coroutine:                  # @get_current_coroutine
# %bb.0:
	movq	current_coroutine@GOTTPOFF(%rip), %rax
	movq	%fs:0, %rcx
	movq	(%rcx,%rax), %rax
	retq
.Lfunc_end868:
	.size	get_current_coroutine, .Lfunc_end868-get_current_coroutine
                                        # -- End function
	.globl	context_switch                  # -- Begin function context_switch
	.p2align	4, 0x90
	.type	context_switch,@function
context_switch:                         # @context_switch
# %bb.0:
	pushq	%rbp
	movq	$.Ltmp1, 8(%r12)
	movq	%rsp, (%r12)
	movq	%rsp, 16(%r12)
	movq	always_one@GOTTPOFF(%rip), %rax
	movq	%fs:0, %rcx
	cmpb	$1, (%rcx,%rax)
	je	.LBB869_1
.Ltmp1:                                 # Block address taken
# %bb.2:                                # %return_from_switch
	popq	%rbp
	retq
.LBB869_1:                              # %do_switch
	movq	(%r13), %rbp
	movq	8(%r13), %rax
	movq	16(%r13), %rsp
	jmpq	*%rax
.Lfunc_end869:
	.size	context_switch, .Lfunc_end869-context_switch
                                        # -- End function
	.globl	coroutine_yield                 # -- Begin function coroutine_yield
	.p2align	4, 0x90
	.type	coroutine_yield,@function
coroutine_yield:                        # @coroutine_yield
# %bb.0:
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	leaq	8(%rdi), %r12
	movq	%fs:0, %r13
	addq	into_caller_buf@GOTTPOFF(%rip), %r13
	callq	context_switch@PLT
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Lfunc_end870:
	.size	coroutine_yield, .Lfunc_end870-coroutine_yield
                                        # -- End function
	.globl	coroutine_call                  # -- Begin function coroutine_call
	.p2align	4, 0x90
	.type	coroutine_call,@function
coroutine_call:                         # @coroutine_call
# %bb.0:
	pushq	%rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$40, %rsp
	movq	into_caller_buf@GOTTPOFF(%rip), %rax
	movq	%fs:0, %rbp
	leaq	(%rbp,%rax), %r12
	movq	(%rbp,%rax), %rcx
	movq	%rcx, 32(%rsp)                  # 8-byte Spill
	movq	8(%rbp,%rax), %rcx
	movq	%rcx, 24(%rsp)                  # 8-byte Spill
	movq	16(%rbp,%rax), %rcx
	movq	%rcx, 16(%rsp)                  # 8-byte Spill
	movq	current_coroutine@GOTTPOFF(%rip), %rax
	movq	(%rbp,%rax), %rcx
	movq	%rcx, 8(%rsp)                   # 8-byte Spill
	movq	%rdi, (%rbp,%rax)
	leaq	8(%rdi), %r13
	callq	context_switch@PLT
	movq	8(%rsp), %rax                   # 8-byte Reload
	movq	current_coroutine@GOTTPOFF(%rip), %rcx
	movq	%rax, (%rbp,%rcx)
	movq	32(%rsp), %rax                  # 8-byte Reload
	movq	into_caller_buf@GOTTPOFF(%rip), %rcx
	movq	%rax, (%rbp,%rcx)
	movq	24(%rsp), %rax                  # 8-byte Reload
	movq	%rax, 8(%rbp,%rcx)
	movq	16(%rsp), %rax                  # 8-byte Reload
	movq	%rax, 16(%rbp,%rcx)
	addq	$40, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end871:
	.size	coroutine_call, .Lfunc_end871-coroutine_call
                                        # -- End function
	.type	_parameterization_Nil,@object   # @_parameterization_Nil
	.section	.rodata,"a",@progbits
	.weak	_parameterization_Nil
	.p2align	3, 0x0
_parameterization_Nil:
	.quad	nil_typ
	.quad	0
	.size	_parameterization_Nil, 16

	.type	_parameterization_Ptri32_or_Nil,@object # @_parameterization_Ptri32_or_Nil
	.weak	_parameterization_Ptri32_or_Nil
	.p2align	4, 0x0
_parameterization_Ptri32_or_Nil:
	.quad	union_typ
	.quad	_parameterization_Ptri32
	.quad	_parameterization_Nil
	.quad	0
	.size	_parameterization_Ptri32_or_Nil, 32

	.type	_parameterization_Ptri1,@object # @_parameterization_Ptri1
	.weak	_parameterization_Ptri1
	.p2align	3, 0x0
_parameterization_Ptri1:
	.quad	bool_typ
	.quad	0
	.size	_parameterization_Ptri1, 16

	.type	_parameterization_ListNode,@object # @_parameterization_ListNode
	.weak	_parameterization_ListNode
	.p2align	3, 0x0
_parameterization_ListNode:
	.quad	ListNode
	.quad	0
	.size	_parameterization_ListNode, 16

	.type	fijgh_An_outofbounds_error_occurred_while_indexing_into_a_collection,@object # @fijgh_An_outofbounds_error_occurred_while_indexing_into_a_collection
	.p2align	4, 0x0
fijgh_An_outofbounds_error_occurred_while_indexing_into_a_collection:
	.ascii	"An out-of-bounds error occurred while indexing into a collection."
	.size	fijgh_An_outofbounds_error_occurred_while_indexing_into_a_collection, 65

	.type	bsium_The_size_of_the_collection_being_indexed_was,@object # @bsium_The_size_of_the_collection_being_indexed_was
	.p2align	4, 0x0
bsium_The_size_of_the_collection_being_indexed_was:
	.ascii	"The size of the collection being indexed was"
	.size	bsium_The_size_of_the_collection_being_indexed_was, 44

	.type	_parameterization_IntIterator,@object # @_parameterization_IntIterator
	.weak	_parameterization_IntIterator
	.p2align	3, 0x0
_parameterization_IntIterator:
	.quad	IntIterator
	.quad	0
	.size	_parameterization_IntIterator, 16

	.type	_parameterization_FunctionPtri32_to_Ptri1,@object # @_parameterization_FunctionPtri32_to_Ptri1
	.weak	_parameterization_FunctionPtri32_to_Ptri1
	.p2align	4, 0x0
_parameterization_FunctionPtri32_to_Ptri1:
	.quad	function_typ
	.quad	_parameterization_Ptri1
	.quad	_parameterization_Ptri32
	.quad	0
	.size	_parameterization_FunctionPtri32_to_Ptri1, 32

	.type	_parameterization_FunctionPtri32_to_Ptri32,@object # @_parameterization_FunctionPtri32_to_Ptri32
	.weak	_parameterization_FunctionPtri32_to_Ptri32
	.p2align	4, 0x0
_parameterization_FunctionPtri32_to_Ptri32:
	.quad	function_typ
	.quad	_parameterization_Ptri32
	.quad	_parameterization_Ptri32
	.quad	0
	.size	_parameterization_FunctionPtri32_to_Ptri32, 32

	.type	_parameterization_Ptri8,@object # @_parameterization_Ptri8
	.weak	_parameterization_Ptri8
	.p2align	3, 0x0
_parameterization_Ptri8:
	.quad	i8_typ
	.quad	0
	.size	_parameterization_Ptri8, 16

	.type	_parameterization_String,@object # @_parameterization_String
	.weak	_parameterization_String
	.p2align	3, 0x0
_parameterization_String:
	.quad	String
	.quad	0
	.size	_parameterization_String, 16

	.type	_parameterization_Ptri32,@object # @_parameterization_Ptri32
	.weak	_parameterization_Ptri32
	.p2align	3, 0x0
_parameterization_Ptri32:
	.quad	i32_typ
	.quad	0
	.size	_parameterization_Ptri32, 16

	.type	i32_string,@object              # @i32_string
	.weak	i32_string
i32_string:
	.asciz	"%d\n"
	.size	i32_string, 4

	.type	i64_string,@object              # @i64_string
	.weak	i64_string
i64_string:
	.asciz	"%lld\n"
	.size	i64_string, 6

	.type	bool_typ_hashtbl,@object        # @bool_typ_hashtbl
	.weak	bool_typ_hashtbl
	.p2align	4, 0x0
bool_typ_hashtbl:
	.quad	Object
	.quad	any_typ
	.quad	0
	.quad	bool_typ
	.size	bool_typ_hashtbl, 32

	.type	bool_typ_offset_tbl,@object     # @bool_typ_offset_tbl
	.weak	bool_typ_offset_tbl
	.p2align	2, 0x0
bool_typ_offset_tbl:
	.long	9                               # 0x9
	.long	9                               # 0x9
	.long	0                               # 0x0
	.long	9                               # 0x9
	.size	bool_typ_offset_tbl, 16

	.type	bool_typ,@object                # @bool_typ
	.weak	bool_typ
	.p2align	4, 0x0
bool_typ:
	.quad	5801531371504802705             # 0x50832e0b67d41b91
	.quad	4611686018427388081             # 0x40000000000000b1
	.quad	3                               # 0x3
	.quad	subtype_test
	.quad	bool_typ_hashtbl
	.quad	bool_typ_offset_tbl
	.quad	_size_bool_typ
	.quad	_box_bool_typ
	.quad	_unbox_bool_typ
	.size	bool_typ, 72

	.type	i8_typ_hashtbl,@object          # @i8_typ_hashtbl
	.weak	i8_typ_hashtbl
	.p2align	4, 0x0
i8_typ_hashtbl:
	.quad	Object
	.quad	any_typ
	.quad	0
	.quad	i8_typ
	.size	i8_typ_hashtbl, 32

	.type	i8_typ_offset_tbl,@object       # @i8_typ_offset_tbl
	.weak	i8_typ_offset_tbl
	.p2align	2, 0x0
i8_typ_offset_tbl:
	.long	9                               # 0x9
	.long	9                               # 0x9
	.long	0                               # 0x0
	.long	9                               # 0x9
	.size	i8_typ_offset_tbl, 16

	.type	i8_typ,@object                  # @i8_typ
	.weak	i8_typ
	.p2align	4, 0x0
i8_typ:
	.quad	2582149688529881115             # 0x23d5a375fdb5881b
	.quad	4611686018427388081             # 0x40000000000000b1
	.quad	3                               # 0x3
	.quad	subtype_test
	.quad	i8_typ_hashtbl
	.quad	i8_typ_offset_tbl
	.quad	_size_i8_typ
	.quad	_box_i8_typ
	.quad	_unbox_i8_typ
	.size	i8_typ, 72

	.type	i32_typ_hashtbl,@object         # @i32_typ_hashtbl
	.weak	i32_typ_hashtbl
	.p2align	4, 0x0
i32_typ_hashtbl:
	.quad	Object
	.quad	any_typ
	.quad	i32_typ
	.quad	0
	.size	i32_typ_hashtbl, 32

	.type	i32_typ_offset_tbl,@object      # @i32_typ_offset_tbl
	.weak	i32_typ_offset_tbl
	.p2align	2, 0x0
i32_typ_offset_tbl:
	.long	9                               # 0x9
	.long	9                               # 0x9
	.long	9                               # 0x9
	.long	0                               # 0x0
	.size	i32_typ_offset_tbl, 16

	.type	i32_typ,@object                 # @i32_typ
	.weak	i32_typ
	.p2align	4, 0x0
i32_typ:
	.quad	-2253724949814257982            # 0xe0b9291950e2d6c2
	.quad	4611686018427388081             # 0x40000000000000b1
	.quad	3                               # 0x3
	.quad	subtype_test
	.quad	i32_typ_hashtbl
	.quad	i32_typ_offset_tbl
	.quad	_size_i32_typ
	.quad	_box_i32_typ
	.quad	_unbox_i32_typ
	.size	i32_typ, 72

	.type	i64_typ_hashtbl,@object         # @i64_typ_hashtbl
	.weak	i64_typ_hashtbl
	.p2align	4, 0x0
i64_typ_hashtbl:
	.quad	any_typ
	.quad	Object
	.quad	i64_typ
	.quad	0
	.size	i64_typ_hashtbl, 32

	.type	i64_typ_offset_tbl,@object      # @i64_typ_offset_tbl
	.weak	i64_typ_offset_tbl
	.p2align	2, 0x0
i64_typ_offset_tbl:
	.long	9                               # 0x9
	.long	9                               # 0x9
	.long	9                               # 0x9
	.long	0                               # 0x0
	.size	i64_typ_offset_tbl, 16

	.type	i64_typ,@object                 # @i64_typ
	.weak	i64_typ
	.p2align	4, 0x0
i64_typ:
	.quad	-7469797244461771922            # 0x9855f2fb9baa136e
	.quad	4611686018427388157             # 0x40000000000000fd
	.quad	3                               # 0x3
	.quad	subtype_test
	.quad	i64_typ_hashtbl
	.quad	i64_typ_offset_tbl
	.quad	_size_i64_typ
	.quad	_box_i64_typ
	.quad	_unbox_i64_typ
	.size	i64_typ, 72

	.type	f64_typ_hashtbl,@object         # @f64_typ_hashtbl
	.weak	f64_typ_hashtbl
	.p2align	4, 0x0
f64_typ_hashtbl:
	.quad	Object
	.quad	any_typ
	.quad	0
	.quad	f64_typ
	.size	f64_typ_hashtbl, 32

	.type	f64_typ_offset_tbl,@object      # @f64_typ_offset_tbl
	.weak	f64_typ_offset_tbl
	.p2align	2, 0x0
f64_typ_offset_tbl:
	.long	9                               # 0x9
	.long	9                               # 0x9
	.long	0                               # 0x0
	.long	9                               # 0x9
	.size	f64_typ_offset_tbl, 16

	.type	f64_typ,@object                 # @f64_typ
	.weak	f64_typ
	.p2align	4, 0x0
f64_typ:
	.quad	-757315540097298781             # 0xf57d7987599e0ea3
	.quad	4611686018427388081             # 0x40000000000000b1
	.quad	3                               # 0x3
	.quad	subtype_test
	.quad	f64_typ_hashtbl
	.quad	f64_typ_offset_tbl
	.quad	_size_f64_typ
	.quad	_box_f64_typ
	.quad	_unbox_f64_typ
	.size	f64_typ, 72

	.type	nil_typ_hashtbl,@object         # @nil_typ_hashtbl
	.weak	nil_typ_hashtbl
	.p2align	3, 0x0
nil_typ_hashtbl:
	.quad	nil_typ
	.quad	any_typ
	.size	nil_typ_hashtbl, 16

	.type	nil_typ_offset_tbl,@object      # @nil_typ_offset_tbl
	.weak	nil_typ_offset_tbl
	.p2align	2, 0x0
nil_typ_offset_tbl:
	.long	9                               # 0x9
	.long	9                               # 0x9
	.size	nil_typ_offset_tbl, 8

	.type	nil_typ,@object                 # @nil_typ
	.weak	nil_typ
	.p2align	4, 0x0
nil_typ:
	.quad	-5126806859456325683            # 0xb8d9ec530611d7cd
	.quad	4611686018427388081             # 0x40000000000000b1
	.quad	1                               # 0x1
	.quad	subtype_test
	.quad	nil_typ_hashtbl
	.quad	nil_typ_offset_tbl
	.quad	_size_nil_typ
	.quad	_box_nil_typ
	.quad	_unbox_nil_typ
	.size	nil_typ, 72

	.type	any_typ_hashtbl,@object         # @any_typ_hashtbl
	.weak	any_typ_hashtbl
	.p2align	3, 0x0
any_typ_hashtbl:
	.quad	any_typ
	.size	any_typ_hashtbl, 8

	.type	any_typ_offset_tbl,@object      # @any_typ_offset_tbl
	.weak	any_typ_offset_tbl
	.p2align	2, 0x0
any_typ_offset_tbl:
	.long	9                               # 0x9
	.size	any_typ_offset_tbl, 4

	.type	any_typ,@object                 # @any_typ
	.weak	any_typ
	.p2align	4, 0x0
any_typ:
	.quad	3084208142191802847             # 0x2acd4ef6e8b5b9df
	.quad	4611686018427388073             # 0x40000000000000a9
	.quad	0                               # 0x0
	.quad	subtype_test
	.quad	any_typ_hashtbl
	.quad	any_typ_offset_tbl
	.quad	_size_any_typ
	.quad	_box_Default
	.quad	_unbox_Default
	.size	any_typ, 72

	.type	function_typ_hashtbl,@object    # @function_typ_hashtbl
	.weak	function_typ_hashtbl
	.p2align	4, 0x0
function_typ_hashtbl:
	.quad	Object
	.quad	any_typ
	.quad	function_typ
	.quad	0
	.size	function_typ_hashtbl, 32

	.type	function_typ_offset_tbl,@object # @function_typ_offset_tbl
	.weak	function_typ_offset_tbl
	.p2align	2, 0x0
function_typ_offset_tbl:
	.long	9                               # 0x9
	.long	9                               # 0x9
	.long	9                               # 0x9
	.long	0                               # 0x0
	.size	function_typ_offset_tbl, 16

	.type	function_typ,@object            # @function_typ
	.weak	function_typ
	.p2align	4, 0x0
function_typ:
	.quad	7927147055246173914             # 0x6e02e23f363b66da
	.quad	4611686018427388081             # 0x40000000000000b1
	.quad	3                               # 0x3
	.quad	subtype_test
	.quad	function_typ_hashtbl
	.quad	function_typ_offset_tbl
	.quad	_size_function_typ
	.quad	_box_function_typ
	.quad	_unbox_function_typ
	.size	function_typ, 72

	.type	tuple_typ_hashtbl,@object       # @tuple_typ_hashtbl
	.weak	tuple_typ_hashtbl
	.p2align	4, 0x0
tuple_typ_hashtbl:
	.quad	Object
	.quad	any_typ
	.quad	0
	.quad	tuple_typ
	.size	tuple_typ_hashtbl, 32

	.type	tuple_typ_offset_tbl,@object    # @tuple_typ_offset_tbl
	.weak	tuple_typ_offset_tbl
	.p2align	2, 0x0
tuple_typ_offset_tbl:
	.long	9                               # 0x9
	.long	9                               # 0x9
	.long	0                               # 0x0
	.long	9                               # 0x9
	.size	tuple_typ_offset_tbl, 16

	.type	tuple_typ,@object               # @tuple_typ
	.weak	tuple_typ
	.p2align	4, 0x0
tuple_typ:
	.quad	3422634369532007740             # 0x2f7fa3d33fff953c
	.quad	4611686018427388081             # 0x40000000000000b1
	.quad	3                               # 0x3
	.quad	subtype_test
	.quad	tuple_typ_hashtbl
	.quad	tuple_typ_offset_tbl
	.quad	_size_tuple_typ
	.quad	_box_tuple_typ
	.quad	_unbox_tuple_typ
	.size	tuple_typ, 72

	.type	union_typ_hashtbl,@object       # @union_typ_hashtbl
	.weak	union_typ_hashtbl
	.p2align	4, 0x0
union_typ_hashtbl:
	.quad	union_typ
	.quad	0
	.quad	any_typ
	.quad	Object
	.size	union_typ_hashtbl, 32

	.type	union_typ_offset_tbl,@object    # @union_typ_offset_tbl
	.weak	union_typ_offset_tbl
	.p2align	2, 0x0
union_typ_offset_tbl:
	.long	9                               # 0x9
	.long	0                               # 0x0
	.long	9                               # 0x9
	.long	9                               # 0x9
	.size	union_typ_offset_tbl, 16

	.type	union_typ,@object               # @union_typ
	.weak	union_typ
	.p2align	4, 0x0
union_typ:
	.quad	-7543233778997666740            # 0x97510cd8011ddc4c
	.quad	4611686018427388093             # 0x40000000000000bd
	.quad	3                               # 0x3
	.quad	subtype_test
	.quad	union_typ_hashtbl
	.quad	union_typ_offset_tbl
	.quad	_size_union_typ
	.quad	_box_union_typ
	.quad	_unbox_union_typ
	.size	union_typ, 72

	.type	Object_hashtbl,@object          # @Object_hashtbl
	.weak	Object_hashtbl
	.p2align	3, 0x0
Object_hashtbl:
	.quad	Object
	.quad	any_typ
	.size	Object_hashtbl, 16

	.type	Object_offset_tbl,@object       # @Object_offset_tbl
	.weak	Object_offset_tbl
	.p2align	2, 0x0
Object_offset_tbl:
	.long	9                               # 0x9
	.long	9                               # 0x9
	.size	Object_offset_tbl, 8

	.type	Object,@object                  # @Object
	.globl	Object
	.p2align	4, 0x0
Object:
	.quad	3282773614056351330             # 0x2d8ec13587daa662
	.quad	4611686018427388081             # 0x40000000000000b1
	.quad	1                               # 0x1
	.quad	subtype_test
	.quad	Object_hashtbl
	.quad	Object_offset_tbl
	.quad	_size_Object
	.quad	_box_Default
	.quad	_unbox_Default
	.size	Object, 72

	.type	Iterator_hashtbl,@object        # @Iterator_hashtbl
	.weak	Iterator_hashtbl
	.p2align	4, 0x0
Iterator_hashtbl:
	.quad	Object
	.quad	0
	.quad	any_typ
	.quad	Iterator
	.size	Iterator_hashtbl, 32

	.type	Iterator_offset_tbl,@object     # @Iterator_offset_tbl
	.weak	Iterator_offset_tbl
	.p2align	2, 0x0
Iterator_offset_tbl:
	.long	9                               # 0x9
	.long	0                               # 0x0
	.long	9                               # 0x9
	.long	9                               # 0x9
	.size	Iterator_offset_tbl, 16

	.type	Iterator,@object                # @Iterator
	.globl	Iterator
	.p2align	4, 0x0
Iterator:
	.quad	8673632051301757104             # 0x785eee655248b0b0
	.quad	4611686018427388091             # 0x40000000000000bb
	.quad	3                               # 0x3
	.quad	subtype_test
	.quad	Iterator_hashtbl
	.quad	Iterator_offset_tbl
	.quad	_size_Iterator
	.quad	_box_Default
	.quad	_unbox_Default
	.size	Iterator, 72

	.type	Iterable_hashtbl,@object        # @Iterable_hashtbl
	.weak	Iterable_hashtbl
	.p2align	4, 0x0
Iterable_hashtbl:
	.quad	0
	.quad	Iterable
	.quad	any_typ
	.quad	Object
	.size	Iterable_hashtbl, 32

	.type	Iterable_offset_tbl,@object     # @Iterable_offset_tbl
	.weak	Iterable_offset_tbl
	.p2align	2, 0x0
Iterable_offset_tbl:
	.long	0                               # 0x0
	.long	9                               # 0x9
	.long	9                               # 0x9
	.long	11                              # 0xb
	.size	Iterable_offset_tbl, 16

	.type	Iterable,@object                # @Iterable
	.globl	Iterable
	.p2align	4, 0x0
Iterable:
	.quad	3037712219555723519             # 0x2a281f2b507b78ff
	.quad	4611686018427388093             # 0x40000000000000bd
	.quad	3                               # 0x3
	.quad	subtype_test
	.quad	Iterable_hashtbl
	.quad	Iterable_offset_tbl
	.quad	_size_Iterable
	.quad	_box_Default
	.quad	_unbox_Default
	.size	Iterable, 72

	.type	Representable_hashtbl,@object   # @Representable_hashtbl
	.weak	Representable_hashtbl
	.p2align	4, 0x0
Representable_hashtbl:
	.quad	Representable
	.quad	0
	.quad	any_typ
	.quad	Object
	.size	Representable_hashtbl, 32

	.type	Representable_offset_tbl,@object # @Representable_offset_tbl
	.weak	Representable_offset_tbl
	.p2align	2, 0x0
Representable_offset_tbl:
	.long	9                               # 0x9
	.long	0                               # 0x0
	.long	9                               # 0x9
	.long	11                              # 0xb
	.size	Representable_offset_tbl, 16

	.type	Representable,@object           # @Representable
	.globl	Representable
	.p2align	4, 0x0
Representable:
	.quad	-7260840641129990118            # 0x9b3c4fe80eba381a
	.quad	4611686018427388093             # 0x40000000000000bd
	.quad	3                               # 0x3
	.quad	subtype_test
	.quad	Representable_hashtbl
	.quad	Representable_offset_tbl
	.quad	_size_Representable
	.quad	_box_Default
	.quad	_unbox_Default
	.quad	Representable_B_repr_
	.quad	Representable_repr_
	.size	Representable, 88

	.type	String_hashtbl,@object          # @String_hashtbl
	.weak	String_hashtbl
	.p2align	4, 0x0
String_hashtbl:
	.quad	any_typ
	.quad	0
	.quad	String
	.quad	Representable
	.quad	Object
	.quad	0
	.quad	0
	.quad	Iterable
	.size	String_hashtbl, 64

	.type	String_offset_tbl,@object       # @String_offset_tbl
	.weak	String_offset_tbl
	.p2align	4, 0x0
String_offset_tbl:
	.long	9                               # 0x9
	.long	0                               # 0x0
	.long	9                               # 0x9
	.long	42                              # 0x2a
	.long	42                              # 0x2a
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	40                              # 0x28
	.size	String_offset_tbl, 32

	.type	String,@object                  # @String
	.globl	String
	.p2align	4, 0x0
String:
	.quad	6499063144389013426             # 0x5a314f7f0e23efb2
	.quad	4611686018427388073             # 0x40000000000000a9
	.quad	7                               # 0x7
	.quad	subtype_test
	.quad	String_hashtbl
	.quad	String_offset_tbl
	.quad	_size_String
	.quad	_box_Default
	.quad	_unbox_Default
	.quad	String_field_bytes
	.quad	String_field_length
	.quad	String_field_capacity
	.quad	String_B_init_
	.quad	String_B_init_bytesBufferPtri8_lengthPtri32_capacityPtri32
	.quad	String_B_length_
	.quad	String_B_capacity_
	.quad	String_B_bytes_
	.quad	String_B_append_xPtri8
	.quad	String_B_extend_strString
	.quad	String_B__index_xPtri32
	.quad	String_B__EQ_otherString
	.quad	String_B_pop_
	.quad	String_B_copy_
	.quad	String_B_c_string_
	.quad	String_B_iterator_
	.quad	String_B_repr_
	.quad	String_init_
	.quad	String_init_bytesBufferPtri8_lengthPtri32_capacityPtri32
	.quad	String_length_
	.quad	String_capacity_
	.quad	String_bytes_
	.quad	String_append_xPtri8
	.quad	String_extend_strString
	.quad	String__index_xPtri32
	.quad	String__EQ_otherString
	.quad	String_pop_
	.quad	String_copy_
	.quad	String_c_string_
	.quad	String_iterator_
	.quad	String_repr_
	.quad	String_B_iterator_
	.quad	String_iterator_
	.quad	String_B_repr_
	.quad	String_repr_
	.size	String, 352

	.type	Character_hashtbl,@object       # @Character_hashtbl
	.weak	Character_hashtbl
	.p2align	4, 0x0
Character_hashtbl:
	.quad	Object
	.quad	0
	.quad	any_typ
	.quad	Character
	.size	Character_hashtbl, 32

	.type	Character_offset_tbl,@object    # @Character_offset_tbl
	.weak	Character_offset_tbl
	.p2align	2, 0x0
Character_offset_tbl:
	.long	14                              # 0xe
	.long	0                               # 0x0
	.long	9                               # 0x9
	.long	9                               # 0x9
	.size	Character_offset_tbl, 16

	.type	Character,@object               # @Character
	.globl	Character
	.p2align	4, 0x0
Character:
	.quad	6681222582356018452             # 0x5cb8788a3ea60514
	.quad	4611686018427388091             # 0x40000000000000bb
	.quad	3                               # 0x3
	.quad	subtype_test
	.quad	Character_hashtbl
	.quad	Character_offset_tbl
	.quad	_size_Character
	.quad	_box_Default
	.quad	_unbox_Default
	.quad	Character_field_byte
	.quad	Character_B_byte_
	.quad	Character_B_init_bytePtri8
	.quad	Character_byte_
	.quad	Character_init_bytePtri8
	.size	Character, 112

	.type	StringIterator_hashtbl,@object  # @StringIterator_hashtbl
	.weak	StringIterator_hashtbl
	.p2align	4, 0x0
StringIterator_hashtbl:
	.quad	StringIterator
	.quad	Object
	.quad	any_typ
	.quad	Iterator
	.size	StringIterator_hashtbl, 32

	.type	StringIterator_offset_tbl,@object # @StringIterator_offset_tbl
	.weak	StringIterator_offset_tbl
	.p2align	2, 0x0
StringIterator_offset_tbl:
	.long	9                               # 0x9
	.long	15                              # 0xf
	.long	9                               # 0x9
	.long	15                              # 0xf
	.size	StringIterator_offset_tbl, 16

	.type	StringIterator,@object          # @StringIterator
	.globl	StringIterator
	.p2align	4, 0x0
StringIterator:
	.quad	-7260570988945952630            # 0x9b3d4527595eb08a
	.quad	4611686018427388097             # 0x40000000000000c1
	.quad	3                               # 0x3
	.quad	subtype_test
	.quad	StringIterator_hashtbl
	.quad	StringIterator_offset_tbl
	.quad	_size_StringIterator
	.quad	_box_Default
	.quad	_unbox_Default
	.quad	StringIterator_field_str
	.quad	StringIterator_field_index
	.quad	StringIterator_B_init_strString
	.quad	StringIterator_B_next_
	.quad	StringIterator_init_strString
	.quad	StringIterator_next_
	.size	StringIterator, 120

	.type	Exception_hashtbl,@object       # @Exception_hashtbl
	.weak	Exception_hashtbl
	.p2align	4, 0x0
Exception_hashtbl:
	.quad	Object
	.quad	0
	.quad	any_typ
	.quad	Exception
	.size	Exception_hashtbl, 32

	.type	Exception_offset_tbl,@object    # @Exception_offset_tbl
	.weak	Exception_offset_tbl
	.p2align	2, 0x0
Exception_offset_tbl:
	.long	22                              # 0x16
	.long	0                               # 0x0
	.long	9                               # 0x9
	.long	9                               # 0x9
	.size	Exception_offset_tbl, 16

	.type	Exception,@object               # @Exception
	.globl	Exception
	.p2align	4, 0x0
Exception:
	.quad	9027164862567808692             # 0x7d46ee9d523dfeb4
	.quad	4611686018427388091             # 0x40000000000000bb
	.quad	3                               # 0x3
	.quad	subtype_test
	.quad	Exception_hashtbl
	.quad	Exception_offset_tbl
	.quad	_size_Exception
	.quad	_box_Default
	.quad	_unbox_Default
	.quad	Exception_field_line_number
	.quad	Exception_field_file_name
	.quad	Exception_field_message
	.quad	Exception_B_init_messageString
	.quad	Exception_B_init_
	.quad	Exception_B_set_info_line_numberPtri32_file_nameString
	.quad	Exception_B_report_
	.quad	Exception_B_print_message_
	.quad	Exception_init_messageString
	.quad	Exception_init_
	.quad	Exception_set_info_line_numberPtri32_file_nameString
	.quad	Exception_report_
	.quad	Exception_print_message_
	.size	Exception, 176

	.type	IO_hashtbl,@object              # @IO_hashtbl
	.weak	IO_hashtbl
	.p2align	4, 0x0
IO_hashtbl:
	.quad	any_typ
	.quad	IO
	.quad	0
	.quad	Object
	.size	IO_hashtbl, 32

	.type	IO_offset_tbl,@object           # @IO_offset_tbl
	.weak	IO_offset_tbl
	.p2align	2, 0x0
IO_offset_tbl:
	.long	9                               # 0x9
	.long	9                               # 0x9
	.long	0                               # 0x0
	.long	19                              # 0x13
	.size	IO_offset_tbl, 16

	.type	IO,@object                      # @IO
	.globl	IO
	.p2align	4, 0x0
IO:
	.quad	5359822646784595218             # 0x4a61ea4cb8b09512
	.quad	4611686018427388247             # 0x4000000000000157
	.quad	3                               # 0x3
	.quad	subtype_test
	.quad	IO_hashtbl
	.quad	IO_offset_tbl
	.quad	_size_IO
	.quad	_box_Default
	.quad	_unbox_Default
	.quad	IO_B__Self_print_xPtrf64__Self_print_xRepresentable__Self_print_xPtri8__Self_print_xString__Self_print_xPtri64__Self_print_xNil__Self_print_xCharacter__Self_print_xPtri1__Self_print_xPtri32
	.quad	IO__Self_print_xPtrf64
	.quad	IO__Self_print_xRepresentable
	.quad	IO__Self_print_xPtri8
	.quad	IO__Self_print_xString
	.quad	IO__Self_print_xPtri64
	.quad	IO__Self_print_xNil
	.quad	IO__Self_print_xCharacter
	.quad	IO__Self_print_xPtri1
	.quad	IO__Self_print_xPtri32
	.size	IO, 152

	.type	Blocking_hashtbl,@object        # @Blocking_hashtbl
	.weak	Blocking_hashtbl
	.p2align	4, 0x0
Blocking_hashtbl:
	.quad	Object
	.quad	any_typ
	.quad	Blocking
	.quad	0
	.size	Blocking_hashtbl, 32

	.type	Blocking_offset_tbl,@object     # @Blocking_offset_tbl
	.weak	Blocking_offset_tbl
	.p2align	2, 0x0
Blocking_offset_tbl:
	.long	11                              # 0xb
	.long	9                               # 0x9
	.long	9                               # 0x9
	.long	0                               # 0x0
	.size	Blocking_offset_tbl, 16

	.type	Blocking,@object                # @Blocking
	.globl	Blocking
	.p2align	4, 0x0
Blocking:
	.quad	847773162914674935              # 0xbc3e53331a378f7
	.quad	4611686018427388081             # 0x40000000000000b1
	.quad	3                               # 0x3
	.quad	subtype_test
	.quad	Blocking_hashtbl
	.quad	Blocking_offset_tbl
	.quad	_size_Blocking
	.quad	_box_Default
	.quad	_unbox_Default
	.quad	Blocking_B_init_
	.quad	Blocking_init_
	.size	Blocking, 88

	.type	Channel_hashtbl,@object         # @Channel_hashtbl
	.weak	Channel_hashtbl
	.p2align	4, 0x0
Channel_hashtbl:
	.quad	Object
	.quad	any_typ
	.quad	0
	.quad	Channel
	.size	Channel_hashtbl, 32

	.type	Channel_offset_tbl,@object      # @Channel_offset_tbl
	.weak	Channel_offset_tbl
	.p2align	2, 0x0
Channel_offset_tbl:
	.long	16                              # 0x10
	.long	9                               # 0x9
	.long	0                               # 0x0
	.long	9                               # 0x9
	.size	Channel_offset_tbl, 16

	.type	Channel,@object                 # @Channel
	.globl	Channel
	.p2align	4, 0x0
Channel:
	.quad	-3668118116639750450            # 0xcd183a01e78346ce
	.quad	4611686018427388081             # 0x40000000000000b1
	.quad	3                               # 0x3
	.quad	subtype_test
	.quad	Channel_hashtbl
	.quad	Channel_offset_tbl
	.quad	_size_Channel
	.quad	_box_Default
	.quad	_unbox_Default
	.quad	Channel_field_value
	.quad	Channel_B_init_
	.quad	Channel_B_get_
	.quad	Channel_B_put_new_valuePtri32
	.quad	Channel_init_
	.quad	Channel_get_
	.quad	Channel_put_new_valuePtri32
	.size	Channel, 128

	.type	IntIterator_hashtbl,@object     # @IntIterator_hashtbl
	.weak	IntIterator_hashtbl
	.p2align	4, 0x0
IntIterator_hashtbl:
	.quad	any_typ
	.quad	Iterator
	.quad	IntIterator
	.quad	Object
	.size	IntIterator_hashtbl, 32

	.type	IntIterator_offset_tbl,@object  # @IntIterator_offset_tbl
	.weak	IntIterator_offset_tbl
	.p2align	2, 0x0
IntIterator_offset_tbl:
	.long	9                               # 0x9
	.long	11                              # 0xb
	.long	9                               # 0x9
	.long	11                              # 0xb
	.size	IntIterator_offset_tbl, 16

	.type	IntIterator,@object             # @IntIterator
	.globl	IntIterator
	.p2align	4, 0x0
IntIterator:
	.quad	-933084275656658555             # 0xf30d04cb83fb7185
	.quad	4611686018427388247             # 0x4000000000000157
	.quad	3                               # 0x3
	.quad	subtype_test
	.quad	IntIterator_hashtbl
	.quad	IntIterator_offset_tbl
	.quad	_size_IntIterator
	.quad	_box_Default
	.quad	_unbox_Default
	.size	IntIterator, 72

	.type	IntIterable_hashtbl,@object     # @IntIterable_hashtbl
	.weak	IntIterable_hashtbl
	.p2align	4, 0x0
IntIterable_hashtbl:
	.quad	any_typ
	.quad	Iterable
	.quad	IntIterable
	.quad	Object
	.size	IntIterable_hashtbl, 32

	.type	IntIterable_offset_tbl,@object  # @IntIterable_offset_tbl
	.weak	IntIterable_offset_tbl
	.p2align	2, 0x0
IntIterable_offset_tbl:
	.long	9                               # 0x9
	.long	31                              # 0x1f
	.long	9                               # 0x9
	.long	33                              # 0x21
	.size	IntIterable_offset_tbl, 16

	.type	IntIterable,@object             # @IntIterable
	.globl	IntIterable
	.p2align	4, 0x0
IntIterable:
	.quad	-7984962120415158575            # 0x912fb741f3b45ed1
	.quad	4611686018427388247             # 0x4000000000000157
	.quad	3                               # 0x3
	.quad	subtype_test
	.quad	IntIterable_hashtbl
	.quad	IntIterable_offset_tbl
	.quad	_size_IntIterable
	.quad	_box_Default
	.quad	_unbox_Default
	.size	IntIterable, 72

	.type	MapIterable_hashtbl,@object     # @MapIterable_hashtbl
	.weak	MapIterable_hashtbl
	.p2align	4, 0x0
MapIterable_hashtbl:
	.quad	IntIterable
	.quad	MapIterable
	.quad	Object
	.quad	0
	.quad	any_typ
	.quad	0
	.quad	0
	.quad	Iterable
	.size	MapIterable_hashtbl, 64

	.type	MapIterable_offset_tbl,@object  # @MapIterable_offset_tbl
	.weak	MapIterable_offset_tbl
	.p2align	4, 0x0
MapIterable_offset_tbl:
	.long	35                              # 0x23
	.long	9                               # 0x9
	.long	61                              # 0x3d
	.long	0                               # 0x0
	.long	9                               # 0x9
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	59                              # 0x3b
	.size	MapIterable_offset_tbl, 32

	.type	MapIterable,@object             # @MapIterable
	.globl	MapIterable
	.p2align	4, 0x0
MapIterable:
	.quad	-7488770571603291722            # 0x98128ad7a32fd1b6
	.quad	4611686018427388291             # 0x4000000000000183
	.quad	7                               # 0x7
	.quad	subtype_test
	.quad	MapIterable_hashtbl
	.quad	MapIterable_offset_tbl
	.quad	_size_MapIterable
	.quad	_box_Default
	.quad	_unbox_Default
	.quad	MapIterable_field_iterable
	.quad	MapIterable_field_f
	.quad	MapIterable_B_init_iterableIntIterable_fFunctionPtri32_to_Ptri32
	.quad	MapIterable_B_each_fFunctionPtri32_to_Nothing
	.quad	MapIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32
	.quad	MapIterable_B_all_fFunctionPtri32_to_Ptri1
	.quad	MapIterable_B_any_fFunctionPtri32_to_Ptri1
	.quad	MapIterable_B_map_fFunctionPtri32_to_Ptri32
	.quad	MapIterable_B_filter_fFunctionPtri32_to_Ptri1
	.quad	MapIterable_B_chain_otherIntIterable
	.quad	MapIterable_B_interleave_otherIntIterable
	.quad	MapIterable_B_zip_otherIntIterable
	.quad	MapIterable_B_product_otherIntIterable
	.quad	MapIterable_B_iterator_
	.quad	MapIterable_init_iterableIntIterable_fFunctionPtri32_to_Ptri32
	.quad	IntIterable_each_fFunctionPtri32_to_Nothing
	.quad	IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32
	.quad	IntIterable_all_fFunctionPtri32_to_Ptri1
	.quad	IntIterable_any_fFunctionPtri32_to_Ptri1
	.quad	IntIterable_map_fFunctionPtri32_to_Ptri32
	.quad	IntIterable_filter_fFunctionPtri32_to_Ptri1
	.quad	IntIterable_chain_otherIntIterable
	.quad	IntIterable_interleave_otherIntIterable
	.quad	IntIterable_zip_otherIntIterable
	.quad	IntIterable_product_otherIntIterable
	.quad	MapIterable_iterator_
	.quad	MapIterable_B_each_fFunctionPtri32_to_Nothing
	.quad	MapIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32
	.quad	MapIterable_B_all_fFunctionPtri32_to_Ptri1
	.quad	MapIterable_B_any_fFunctionPtri32_to_Ptri1
	.quad	MapIterable_B_map_fFunctionPtri32_to_Ptri32
	.quad	MapIterable_B_filter_fFunctionPtri32_to_Ptri1
	.quad	MapIterable_B_chain_otherIntIterable
	.quad	MapIterable_B_interleave_otherIntIterable
	.quad	MapIterable_B_zip_otherIntIterable
	.quad	MapIterable_B_product_otherIntIterable
	.quad	MapIterable_B_iterator_
	.quad	IntIterable_each_fFunctionPtri32_to_Nothing
	.quad	IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32
	.quad	IntIterable_all_fFunctionPtri32_to_Ptri1
	.quad	IntIterable_any_fFunctionPtri32_to_Ptri1
	.quad	IntIterable_map_fFunctionPtri32_to_Ptri32
	.quad	IntIterable_filter_fFunctionPtri32_to_Ptri1
	.quad	IntIterable_chain_otherIntIterable
	.quad	IntIterable_interleave_otherIntIterable
	.quad	IntIterable_zip_otherIntIterable
	.quad	IntIterable_product_otherIntIterable
	.quad	MapIterable_iterator_
	.quad	MapIterable_B_iterator_
	.quad	MapIterable_iterator_
	.quad	MapIterable_B_iterator_
	.quad	MapIterable_iterator_
	.size	MapIterable, 488

	.type	MapIterator_hashtbl,@object     # @MapIterator_hashtbl
	.weak	MapIterator_hashtbl
	.p2align	4, 0x0
MapIterator_hashtbl:
	.quad	Object
	.quad	any_typ
	.quad	MapIterator
	.quad	IntIterator
	.quad	0
	.quad	Iterator
	.quad	0
	.quad	0
	.size	MapIterator_hashtbl, 64

	.type	MapIterator_offset_tbl,@object  # @MapIterator_offset_tbl
	.weak	MapIterator_offset_tbl
	.p2align	4, 0x0
MapIterator_offset_tbl:
	.long	17                              # 0x11
	.long	9                               # 0x9
	.long	9                               # 0x9
	.long	15                              # 0xf
	.long	0                               # 0x0
	.long	17                              # 0x11
	.long	0                               # 0x0
	.long	0                               # 0x0
	.size	MapIterator_offset_tbl, 32

	.type	MapIterator,@object             # @MapIterator
	.globl	MapIterator
	.p2align	4, 0x0
MapIterator:
	.quad	-146553482626734782             # 0xfdf756624f6fe542
	.quad	4611686018427388081             # 0x40000000000000b1
	.quad	7                               # 0x7
	.quad	subtype_test
	.quad	MapIterator_hashtbl
	.quad	MapIterator_offset_tbl
	.quad	_size_MapIterator
	.quad	_box_Default
	.quad	_unbox_Default
	.quad	MapIterator_field_iterator
	.quad	MapIterator_field_f
	.quad	MapIterator_B_init_iteratorIntIterator_fFunctionPtri32_to_Ptri32
	.quad	MapIterator_B_next_
	.quad	MapIterator_init_iteratorIntIterator_fFunctionPtri32_to_Ptri32
	.quad	MapIterator_next_
	.quad	MapIterator_B_next_
	.quad	MapIterator_next_
	.size	MapIterator, 136

	.type	FilterIterable_hashtbl,@object  # @FilterIterable_hashtbl
	.weak	FilterIterable_hashtbl
	.p2align	4, 0x0
FilterIterable_hashtbl:
	.quad	IntIterable
	.quad	0
	.quad	Object
	.quad	FilterIterable
	.quad	any_typ
	.quad	0
	.quad	0
	.quad	Iterable
	.size	FilterIterable_hashtbl, 64

	.type	FilterIterable_offset_tbl,@object # @FilterIterable_offset_tbl
	.weak	FilterIterable_offset_tbl
	.p2align	4, 0x0
FilterIterable_offset_tbl:
	.long	35                              # 0x23
	.long	0                               # 0x0
	.long	61                              # 0x3d
	.long	9                               # 0x9
	.long	9                               # 0x9
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	59                              # 0x3b
	.size	FilterIterable_offset_tbl, 32

	.type	FilterIterable,@object          # @FilterIterable
	.globl	FilterIterable
	.p2align	4, 0x0
FilterIterable:
	.quad	8498466713076104350             # 0x75f09e72e061fc9e
	.quad	4611686018427388291             # 0x4000000000000183
	.quad	7                               # 0x7
	.quad	subtype_test
	.quad	FilterIterable_hashtbl
	.quad	FilterIterable_offset_tbl
	.quad	_size_FilterIterable
	.quad	_box_Default
	.quad	_unbox_Default
	.quad	FilterIterable_field_iterable
	.quad	FilterIterable_field_f
	.quad	FilterIterable_B_init_iterableIntIterable_fFunctionPtri32_to_Ptri1
	.quad	FilterIterable_B_each_fFunctionPtri32_to_Nothing
	.quad	FilterIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32
	.quad	FilterIterable_B_all_fFunctionPtri32_to_Ptri1
	.quad	FilterIterable_B_any_fFunctionPtri32_to_Ptri1
	.quad	FilterIterable_B_map_fFunctionPtri32_to_Ptri32
	.quad	FilterIterable_B_filter_fFunctionPtri32_to_Ptri1
	.quad	FilterIterable_B_chain_otherIntIterable
	.quad	FilterIterable_B_interleave_otherIntIterable
	.quad	FilterIterable_B_zip_otherIntIterable
	.quad	FilterIterable_B_product_otherIntIterable
	.quad	FilterIterable_B_iterator_
	.quad	FilterIterable_init_iterableIntIterable_fFunctionPtri32_to_Ptri1
	.quad	IntIterable_each_fFunctionPtri32_to_Nothing
	.quad	IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32
	.quad	IntIterable_all_fFunctionPtri32_to_Ptri1
	.quad	IntIterable_any_fFunctionPtri32_to_Ptri1
	.quad	IntIterable_map_fFunctionPtri32_to_Ptri32
	.quad	IntIterable_filter_fFunctionPtri32_to_Ptri1
	.quad	IntIterable_chain_otherIntIterable
	.quad	IntIterable_interleave_otherIntIterable
	.quad	IntIterable_zip_otherIntIterable
	.quad	IntIterable_product_otherIntIterable
	.quad	FilterIterable_iterator_
	.quad	FilterIterable_B_each_fFunctionPtri32_to_Nothing
	.quad	FilterIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32
	.quad	FilterIterable_B_all_fFunctionPtri32_to_Ptri1
	.quad	FilterIterable_B_any_fFunctionPtri32_to_Ptri1
	.quad	FilterIterable_B_map_fFunctionPtri32_to_Ptri32
	.quad	FilterIterable_B_filter_fFunctionPtri32_to_Ptri1
	.quad	FilterIterable_B_chain_otherIntIterable
	.quad	FilterIterable_B_interleave_otherIntIterable
	.quad	FilterIterable_B_zip_otherIntIterable
	.quad	FilterIterable_B_product_otherIntIterable
	.quad	FilterIterable_B_iterator_
	.quad	IntIterable_each_fFunctionPtri32_to_Nothing
	.quad	IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32
	.quad	IntIterable_all_fFunctionPtri32_to_Ptri1
	.quad	IntIterable_any_fFunctionPtri32_to_Ptri1
	.quad	IntIterable_map_fFunctionPtri32_to_Ptri32
	.quad	IntIterable_filter_fFunctionPtri32_to_Ptri1
	.quad	IntIterable_chain_otherIntIterable
	.quad	IntIterable_interleave_otherIntIterable
	.quad	IntIterable_zip_otherIntIterable
	.quad	IntIterable_product_otherIntIterable
	.quad	FilterIterable_iterator_
	.quad	FilterIterable_B_iterator_
	.quad	FilterIterable_iterator_
	.quad	FilterIterable_B_iterator_
	.quad	FilterIterable_iterator_
	.size	FilterIterable, 488

	.type	FilterIterator_hashtbl,@object  # @FilterIterator_hashtbl
	.weak	FilterIterator_hashtbl
	.p2align	4, 0x0
FilterIterator_hashtbl:
	.quad	Object
	.quad	any_typ
	.quad	0
	.quad	IntIterator
	.quad	0
	.quad	Iterator
	.quad	FilterIterator
	.quad	0
	.size	FilterIterator_hashtbl, 64

	.type	FilterIterator_offset_tbl,@object # @FilterIterator_offset_tbl
	.weak	FilterIterator_offset_tbl
	.p2align	4, 0x0
FilterIterator_offset_tbl:
	.long	17                              # 0x11
	.long	9                               # 0x9
	.long	0                               # 0x0
	.long	15                              # 0xf
	.long	0                               # 0x0
	.long	17                              # 0x11
	.long	9                               # 0x9
	.long	0                               # 0x0
	.size	FilterIterator_offset_tbl, 32

	.type	FilterIterator,@object          # @FilterIterator
	.globl	FilterIterator
	.p2align	4, 0x0
FilterIterator:
	.quad	-1221365496900303883            # 0xef0cd68d3856c3f5
	.quad	4611686018427388081             # 0x40000000000000b1
	.quad	7                               # 0x7
	.quad	subtype_test
	.quad	FilterIterator_hashtbl
	.quad	FilterIterator_offset_tbl
	.quad	_size_FilterIterator
	.quad	_box_Default
	.quad	_unbox_Default
	.quad	FilterIterator_field_iterator
	.quad	FilterIterator_field_f
	.quad	FilterIterator_B_init_iteratorIntIterator_fFunctionPtri32_to_Ptri1
	.quad	FilterIterator_B_next_
	.quad	FilterIterator_init_iteratorIntIterator_fFunctionPtri32_to_Ptri1
	.quad	FilterIterator_next_
	.quad	FilterIterator_B_next_
	.quad	FilterIterator_next_
	.size	FilterIterator, 136

	.type	ChainIterable_hashtbl,@object   # @ChainIterable_hashtbl
	.weak	ChainIterable_hashtbl
	.p2align	4, 0x0
ChainIterable_hashtbl:
	.quad	any_typ
	.quad	Iterable
	.quad	IntIterable
	.quad	ChainIterable
	.quad	0
	.quad	0
	.quad	0
	.quad	Object
	.size	ChainIterable_hashtbl, 64

	.type	ChainIterable_offset_tbl,@object # @ChainIterable_offset_tbl
	.weak	ChainIterable_offset_tbl
	.p2align	4, 0x0
ChainIterable_offset_tbl:
	.long	9                               # 0x9
	.long	59                              # 0x3b
	.long	35                              # 0x23
	.long	9                               # 0x9
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	61                              # 0x3d
	.size	ChainIterable_offset_tbl, 32

	.type	ChainIterable,@object           # @ChainIterable
	.globl	ChainIterable
	.p2align	4, 0x0
ChainIterable:
	.quad	-2370247058431047815            # 0xdf1b30dbc44d8779
	.quad	4611686018427388247             # 0x4000000000000157
	.quad	7                               # 0x7
	.quad	subtype_test
	.quad	ChainIterable_hashtbl
	.quad	ChainIterable_offset_tbl
	.quad	_size_ChainIterable
	.quad	_box_Default
	.quad	_unbox_Default
	.quad	ChainIterable_field_first
	.quad	ChainIterable_field_second
	.quad	ChainIterable_B_init_firstIntIterable_secondIntIterable
	.quad	ChainIterable_B_each_fFunctionPtri32_to_Nothing
	.quad	ChainIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32
	.quad	ChainIterable_B_all_fFunctionPtri32_to_Ptri1
	.quad	ChainIterable_B_any_fFunctionPtri32_to_Ptri1
	.quad	ChainIterable_B_map_fFunctionPtri32_to_Ptri32
	.quad	ChainIterable_B_filter_fFunctionPtri32_to_Ptri1
	.quad	ChainIterable_B_chain_otherIntIterable
	.quad	ChainIterable_B_interleave_otherIntIterable
	.quad	ChainIterable_B_zip_otherIntIterable
	.quad	ChainIterable_B_product_otherIntIterable
	.quad	ChainIterable_B_iterator_
	.quad	ChainIterable_init_firstIntIterable_secondIntIterable
	.quad	IntIterable_each_fFunctionPtri32_to_Nothing
	.quad	IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32
	.quad	IntIterable_all_fFunctionPtri32_to_Ptri1
	.quad	IntIterable_any_fFunctionPtri32_to_Ptri1
	.quad	IntIterable_map_fFunctionPtri32_to_Ptri32
	.quad	IntIterable_filter_fFunctionPtri32_to_Ptri1
	.quad	IntIterable_chain_otherIntIterable
	.quad	IntIterable_interleave_otherIntIterable
	.quad	IntIterable_zip_otherIntIterable
	.quad	IntIterable_product_otherIntIterable
	.quad	ChainIterable_iterator_
	.quad	ChainIterable_B_each_fFunctionPtri32_to_Nothing
	.quad	ChainIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32
	.quad	ChainIterable_B_all_fFunctionPtri32_to_Ptri1
	.quad	ChainIterable_B_any_fFunctionPtri32_to_Ptri1
	.quad	ChainIterable_B_map_fFunctionPtri32_to_Ptri32
	.quad	ChainIterable_B_filter_fFunctionPtri32_to_Ptri1
	.quad	ChainIterable_B_chain_otherIntIterable
	.quad	ChainIterable_B_interleave_otherIntIterable
	.quad	ChainIterable_B_zip_otherIntIterable
	.quad	ChainIterable_B_product_otherIntIterable
	.quad	ChainIterable_B_iterator_
	.quad	IntIterable_each_fFunctionPtri32_to_Nothing
	.quad	IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32
	.quad	IntIterable_all_fFunctionPtri32_to_Ptri1
	.quad	IntIterable_any_fFunctionPtri32_to_Ptri1
	.quad	IntIterable_map_fFunctionPtri32_to_Ptri32
	.quad	IntIterable_filter_fFunctionPtri32_to_Ptri1
	.quad	IntIterable_chain_otherIntIterable
	.quad	IntIterable_interleave_otherIntIterable
	.quad	IntIterable_zip_otherIntIterable
	.quad	IntIterable_product_otherIntIterable
	.quad	ChainIterable_iterator_
	.quad	ChainIterable_B_iterator_
	.quad	ChainIterable_iterator_
	.quad	ChainIterable_B_iterator_
	.quad	ChainIterable_iterator_
	.size	ChainIterable, 488

	.type	ChainIterator_hashtbl,@object   # @ChainIterator_hashtbl
	.weak	ChainIterator_hashtbl
	.p2align	4, 0x0
ChainIterator_hashtbl:
	.quad	any_typ
	.quad	ChainIterator
	.quad	0
	.quad	Iterator
	.quad	Object
	.quad	0
	.quad	0
	.quad	IntIterator
	.size	ChainIterator_hashtbl, 64

	.type	ChainIterator_offset_tbl,@object # @ChainIterator_offset_tbl
	.weak	ChainIterator_offset_tbl
	.p2align	4, 0x0
ChainIterator_offset_tbl:
	.long	9                               # 0x9
	.long	9                               # 0x9
	.long	0                               # 0x0
	.long	18                              # 0x12
	.long	18                              # 0x12
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	16                              # 0x10
	.size	ChainIterator_offset_tbl, 32

	.type	ChainIterator,@object           # @ChainIterator
	.globl	ChainIterator
	.p2align	4, 0x0
ChainIterator:
	.quad	6043157723929225452             # 0x53dd9bee9075a8ec
	.quad	4611686018427388073             # 0x40000000000000a9
	.quad	7                               # 0x7
	.quad	subtype_test
	.quad	ChainIterator_hashtbl
	.quad	ChainIterator_offset_tbl
	.quad	_size_ChainIterator
	.quad	_box_Default
	.quad	_unbox_Default
	.quad	ChainIterator_field_first
	.quad	ChainIterator_field_second
	.quad	ChainIterator_field_on_first
	.quad	ChainIterator_B_init_firstIntIterator_secondIntIterator
	.quad	ChainIterator_B_next_
	.quad	ChainIterator_init_firstIntIterator_secondIntIterator
	.quad	ChainIterator_next_
	.quad	ChainIterator_B_next_
	.quad	ChainIterator_next_
	.size	ChainIterator, 144

	.type	InterleaveIterable_hashtbl,@object # @InterleaveIterable_hashtbl
	.weak	InterleaveIterable_hashtbl
	.p2align	4, 0x0
InterleaveIterable_hashtbl:
	.quad	IntIterable
	.quad	InterleaveIterable
	.quad	Object
	.quad	0
	.quad	any_typ
	.quad	0
	.quad	0
	.quad	Iterable
	.size	InterleaveIterable_hashtbl, 64

	.type	InterleaveIterable_offset_tbl,@object # @InterleaveIterable_offset_tbl
	.weak	InterleaveIterable_offset_tbl
	.p2align	4, 0x0
InterleaveIterable_offset_tbl:
	.long	35                              # 0x23
	.long	9                               # 0x9
	.long	61                              # 0x3d
	.long	0                               # 0x0
	.long	9                               # 0x9
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	59                              # 0x3b
	.size	InterleaveIterable_offset_tbl, 32

	.type	InterleaveIterable,@object      # @InterleaveIterable
	.globl	InterleaveIterable
	.p2align	4, 0x0
InterleaveIterable:
	.quad	4936782714255954462             # 0x4482f9b8f083d21e
	.quad	4611686018427388291             # 0x4000000000000183
	.quad	7                               # 0x7
	.quad	subtype_test
	.quad	InterleaveIterable_hashtbl
	.quad	InterleaveIterable_offset_tbl
	.quad	_size_InterleaveIterable
	.quad	_box_Default
	.quad	_unbox_Default
	.quad	InterleaveIterable_field_first
	.quad	InterleaveIterable_field_second
	.quad	InterleaveIterable_B_init_firstIntIterable_secondIntIterable
	.quad	InterleaveIterable_B_each_fFunctionPtri32_to_Nothing
	.quad	InterleaveIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32
	.quad	InterleaveIterable_B_all_fFunctionPtri32_to_Ptri1
	.quad	InterleaveIterable_B_any_fFunctionPtri32_to_Ptri1
	.quad	InterleaveIterable_B_map_fFunctionPtri32_to_Ptri32
	.quad	InterleaveIterable_B_filter_fFunctionPtri32_to_Ptri1
	.quad	InterleaveIterable_B_chain_otherIntIterable
	.quad	InterleaveIterable_B_interleave_otherIntIterable
	.quad	InterleaveIterable_B_zip_otherIntIterable
	.quad	InterleaveIterable_B_product_otherIntIterable
	.quad	InterleaveIterable_B_iterator_
	.quad	InterleaveIterable_init_firstIntIterable_secondIntIterable
	.quad	IntIterable_each_fFunctionPtri32_to_Nothing
	.quad	IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32
	.quad	IntIterable_all_fFunctionPtri32_to_Ptri1
	.quad	IntIterable_any_fFunctionPtri32_to_Ptri1
	.quad	IntIterable_map_fFunctionPtri32_to_Ptri32
	.quad	IntIterable_filter_fFunctionPtri32_to_Ptri1
	.quad	IntIterable_chain_otherIntIterable
	.quad	IntIterable_interleave_otherIntIterable
	.quad	IntIterable_zip_otherIntIterable
	.quad	IntIterable_product_otherIntIterable
	.quad	InterleaveIterable_iterator_
	.quad	InterleaveIterable_B_each_fFunctionPtri32_to_Nothing
	.quad	InterleaveIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32
	.quad	InterleaveIterable_B_all_fFunctionPtri32_to_Ptri1
	.quad	InterleaveIterable_B_any_fFunctionPtri32_to_Ptri1
	.quad	InterleaveIterable_B_map_fFunctionPtri32_to_Ptri32
	.quad	InterleaveIterable_B_filter_fFunctionPtri32_to_Ptri1
	.quad	InterleaveIterable_B_chain_otherIntIterable
	.quad	InterleaveIterable_B_interleave_otherIntIterable
	.quad	InterleaveIterable_B_zip_otherIntIterable
	.quad	InterleaveIterable_B_product_otherIntIterable
	.quad	InterleaveIterable_B_iterator_
	.quad	IntIterable_each_fFunctionPtri32_to_Nothing
	.quad	IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32
	.quad	IntIterable_all_fFunctionPtri32_to_Ptri1
	.quad	IntIterable_any_fFunctionPtri32_to_Ptri1
	.quad	IntIterable_map_fFunctionPtri32_to_Ptri32
	.quad	IntIterable_filter_fFunctionPtri32_to_Ptri1
	.quad	IntIterable_chain_otherIntIterable
	.quad	IntIterable_interleave_otherIntIterable
	.quad	IntIterable_zip_otherIntIterable
	.quad	IntIterable_product_otherIntIterable
	.quad	InterleaveIterable_iterator_
	.quad	InterleaveIterable_B_iterator_
	.quad	InterleaveIterable_iterator_
	.quad	InterleaveIterable_B_iterator_
	.quad	InterleaveIterable_iterator_
	.size	InterleaveIterable, 488

	.type	InterleaveIterator_hashtbl,@object # @InterleaveIterator_hashtbl
	.weak	InterleaveIterator_hashtbl
	.p2align	4, 0x0
InterleaveIterator_hashtbl:
	.quad	any_typ
	.quad	0
	.quad	0
	.quad	Iterator
	.quad	Object
	.quad	0
	.quad	InterleaveIterator
	.quad	IntIterator
	.size	InterleaveIterator_hashtbl, 64

	.type	InterleaveIterator_offset_tbl,@object # @InterleaveIterator_offset_tbl
	.weak	InterleaveIterator_offset_tbl
	.p2align	4, 0x0
InterleaveIterator_offset_tbl:
	.long	9                               # 0x9
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	18                              # 0x12
	.long	18                              # 0x12
	.long	0                               # 0x0
	.long	9                               # 0x9
	.long	16                              # 0x10
	.size	InterleaveIterator_offset_tbl, 32

	.type	InterleaveIterator,@object      # @InterleaveIterator
	.globl	InterleaveIterator
	.p2align	4, 0x0
InterleaveIterator:
	.quad	-3924664358248524505            # 0xc988ca8f57f5d527
	.quad	4611686018427388073             # 0x40000000000000a9
	.quad	7                               # 0x7
	.quad	subtype_test
	.quad	InterleaveIterator_hashtbl
	.quad	InterleaveIterator_offset_tbl
	.quad	_size_InterleaveIterator
	.quad	_box_Default
	.quad	_unbox_Default
	.quad	InterleaveIterator_field_first
	.quad	InterleaveIterator_field_second
	.quad	InterleaveIterator_field_on_first
	.quad	InterleaveIterator_B_init_firstIntIterator_secondIntIterator
	.quad	InterleaveIterator_B_next_
	.quad	InterleaveIterator_init_firstIntIterator_secondIntIterator
	.quad	InterleaveIterator_next_
	.quad	InterleaveIterator_B_next_
	.quad	InterleaveIterator_next_
	.size	InterleaveIterator, 144

	.type	IntTupleIterable_hashtbl,@object # @IntTupleIterable_hashtbl
	.weak	IntTupleIterable_hashtbl
	.p2align	4, 0x0
IntTupleIterable_hashtbl:
	.quad	any_typ
	.quad	Iterable
	.quad	IntTupleIterable
	.quad	Object
	.size	IntTupleIterable_hashtbl, 32

	.type	IntTupleIterable_offset_tbl,@object # @IntTupleIterable_offset_tbl
	.weak	IntTupleIterable_offset_tbl
	.p2align	2, 0x0
IntTupleIterable_offset_tbl:
	.long	9                               # 0x9
	.long	11                              # 0xb
	.long	9                               # 0x9
	.long	13                              # 0xd
	.size	IntTupleIterable_offset_tbl, 16

	.type	IntTupleIterable,@object        # @IntTupleIterable
	.globl	IntTupleIterable
	.p2align	4, 0x0
IntTupleIterable:
	.quad	1135628454346210518             # 0xfc2900ffa21bcd6
	.quad	4611686018427388247             # 0x4000000000000157
	.quad	3                               # 0x3
	.quad	subtype_test
	.quad	IntTupleIterable_hashtbl
	.quad	IntTupleIterable_offset_tbl
	.quad	_size_IntTupleIterable
	.quad	_box_Default
	.quad	_unbox_Default
	.size	IntTupleIterable, 72

	.type	IntTupleIterator_hashtbl,@object # @IntTupleIterator_hashtbl
	.weak	IntTupleIterator_hashtbl
	.p2align	4, 0x0
IntTupleIterator_hashtbl:
	.quad	any_typ
	.quad	Object
	.quad	Iterator
	.quad	IntTupleIterator
	.size	IntTupleIterator_hashtbl, 32

	.type	IntTupleIterator_offset_tbl,@object # @IntTupleIterator_offset_tbl
	.weak	IntTupleIterator_offset_tbl
	.p2align	2, 0x0
IntTupleIterator_offset_tbl:
	.long	9                               # 0x9
	.long	11                              # 0xb
	.long	11                              # 0xb
	.long	9                               # 0x9
	.size	IntTupleIterator_offset_tbl, 16

	.type	IntTupleIterator,@object        # @IntTupleIterator
	.globl	IntTupleIterator
	.p2align	4, 0x0
IntTupleIterator:
	.quad	8926924731480624460             # 0x7be2cebf148d4d4c
	.quad	4611686018427388157             # 0x40000000000000fd
	.quad	3                               # 0x3
	.quad	subtype_test
	.quad	IntTupleIterator_hashtbl
	.quad	IntTupleIterator_offset_tbl
	.quad	_size_IntTupleIterator
	.quad	_box_Default
	.quad	_unbox_Default
	.size	IntTupleIterator, 72

	.type	ZipIterable_hashtbl,@object     # @ZipIterable_hashtbl
	.weak	ZipIterable_hashtbl
	.p2align	4, 0x0
ZipIterable_hashtbl:
	.quad	any_typ
	.quad	0
	.quad	IntTupleIterable
	.quad	0
	.quad	Object
	.quad	ZipIterable
	.quad	0
	.quad	Iterable
	.size	ZipIterable_hashtbl, 64

	.type	ZipIterable_offset_tbl,@object  # @ZipIterable_offset_tbl
	.weak	ZipIterable_offset_tbl
	.p2align	4, 0x0
ZipIterable_offset_tbl:
	.long	9                               # 0x9
	.long	0                               # 0x0
	.long	15                              # 0xf
	.long	0                               # 0x0
	.long	21                              # 0x15
	.long	9                               # 0x9
	.long	0                               # 0x0
	.long	19                              # 0x13
	.size	ZipIterable_offset_tbl, 32

	.type	ZipIterable,@object             # @ZipIterable
	.globl	ZipIterable
	.p2align	4, 0x0
ZipIterable:
	.quad	35232740166152944               # 0x7d2bfd921132f0
	.quad	4611686018427388073             # 0x40000000000000a9
	.quad	7                               # 0x7
	.quad	subtype_test
	.quad	ZipIterable_hashtbl
	.quad	ZipIterable_offset_tbl
	.quad	_size_ZipIterable
	.quad	_box_Default
	.quad	_unbox_Default
	.quad	ZipIterable_field_first
	.quad	ZipIterable_field_second
	.quad	ZipIterable_B_init_firstIntIterable_secondIntIterable
	.quad	ZipIterable_B_iterator_
	.quad	ZipIterable_init_firstIntIterable_secondIntIterable
	.quad	ZipIterable_iterator_
	.quad	ZipIterable_B_iterator_
	.quad	ZipIterable_iterator_
	.quad	ZipIterable_B_iterator_
	.quad	ZipIterable_iterator_
	.quad	ZipIterable_B_iterator_
	.quad	ZipIterable_iterator_
	.size	ZipIterable, 168

	.type	ZipIterator_hashtbl,@object     # @ZipIterator_hashtbl
	.weak	ZipIterator_hashtbl
	.p2align	4, 0x0
ZipIterator_hashtbl:
	.quad	IntTupleIterator
	.quad	0
	.quad	0
	.quad	Iterator
	.quad	Object
	.quad	0
	.quad	any_typ
	.quad	ZipIterator
	.size	ZipIterator_hashtbl, 64

	.type	ZipIterator_offset_tbl,@object  # @ZipIterator_offset_tbl
	.weak	ZipIterator_offset_tbl
	.p2align	4, 0x0
ZipIterator_offset_tbl:
	.long	15                              # 0xf
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	17                              # 0x11
	.long	17                              # 0x11
	.long	0                               # 0x0
	.long	9                               # 0x9
	.long	9                               # 0x9
	.size	ZipIterator_offset_tbl, 32

	.type	ZipIterator,@object             # @ZipIterator
	.globl	ZipIterator
	.p2align	4, 0x0
ZipIterator:
	.quad	-2141114445739585318            # 0xe2493bc1763c10da
	.quad	4611686018427388091             # 0x40000000000000bb
	.quad	7                               # 0x7
	.quad	subtype_test
	.quad	ZipIterator_hashtbl
	.quad	ZipIterator_offset_tbl
	.quad	_size_ZipIterator
	.quad	_box_Default
	.quad	_unbox_Default
	.quad	ZipIterator_field_first
	.quad	ZipIterator_field_second
	.quad	ZipIterator_B_init_firstIntIterator_secondIntIterator
	.quad	ZipIterator_B_next_
	.quad	ZipIterator_init_firstIntIterator_secondIntIterator
	.quad	ZipIterator_next_
	.quad	ZipIterator_B_next_
	.quad	ZipIterator_next_
	.size	ZipIterator, 136

	.type	ProductIterable_hashtbl,@object # @ProductIterable_hashtbl
	.weak	ProductIterable_hashtbl
	.p2align	4, 0x0
ProductIterable_hashtbl:
	.quad	any_typ
	.quad	ProductIterable
	.quad	IntTupleIterable
	.quad	0
	.quad	Object
	.quad	0
	.quad	0
	.quad	Iterable
	.size	ProductIterable_hashtbl, 64

	.type	ProductIterable_offset_tbl,@object # @ProductIterable_offset_tbl
	.weak	ProductIterable_offset_tbl
	.p2align	4, 0x0
ProductIterable_offset_tbl:
	.long	9                               # 0x9
	.long	9                               # 0x9
	.long	15                              # 0xf
	.long	0                               # 0x0
	.long	21                              # 0x15
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	19                              # 0x13
	.size	ProductIterable_offset_tbl, 32

	.type	ProductIterable,@object         # @ProductIterable
	.globl	ProductIterable
	.p2align	4, 0x0
ProductIterable:
	.quad	4128338911757318636             # 0x394ace5e0bb7b9ec
	.quad	4611686018427388073             # 0x40000000000000a9
	.quad	7                               # 0x7
	.quad	subtype_test
	.quad	ProductIterable_hashtbl
	.quad	ProductIterable_offset_tbl
	.quad	_size_ProductIterable
	.quad	_box_Default
	.quad	_unbox_Default
	.quad	ProductIterable_field_first
	.quad	ProductIterable_field_second
	.quad	ProductIterable_B_init_firstIntIterable_secondIntIterable
	.quad	ProductIterable_B_iterator_
	.quad	ProductIterable_init_firstIntIterable_secondIntIterable
	.quad	ProductIterable_iterator_
	.quad	ProductIterable_B_iterator_
	.quad	ProductIterable_iterator_
	.quad	ProductIterable_B_iterator_
	.quad	ProductIterable_iterator_
	.quad	ProductIterable_B_iterator_
	.quad	ProductIterable_iterator_
	.size	ProductIterable, 168

	.type	ProductIterator_hashtbl,@object # @ProductIterator_hashtbl
	.weak	ProductIterator_hashtbl
	.p2align	4, 0x0
ProductIterator_hashtbl:
	.quad	any_typ
	.quad	Object
	.quad	Iterator
	.quad	ProductIterator
	.size	ProductIterator_hashtbl, 32

	.type	ProductIterator_offset_tbl,@object # @ProductIterator_offset_tbl
	.weak	ProductIterator_offset_tbl
	.p2align	2, 0x0
ProductIterator_offset_tbl:
	.long	9                               # 0x9
	.long	17                              # 0x11
	.long	17                              # 0x11
	.long	9                               # 0x9
	.size	ProductIterator_offset_tbl, 16

	.type	ProductIterator,@object         # @ProductIterator
	.globl	ProductIterator
	.p2align	4, 0x0
ProductIterator:
	.quad	1697250377212095568             # 0x178dd839c49fec50
	.quad	4611686018427388157             # 0x40000000000000fd
	.quad	3                               # 0x3
	.quad	subtype_test
	.quad	ProductIterator_hashtbl
	.quad	ProductIterator_offset_tbl
	.quad	_size_ProductIterator
	.quad	_box_Default
	.quad	_unbox_Default
	.quad	ProductIterator_field_first_iterator
	.quad	ProductIterator_field_second_iterator
	.quad	ProductIterator_field_second_iterable
	.quad	ProductIterator_field_current_first
	.quad	ProductIterator_B_init_first_iterableIntIterable_second_iterableIntIterable
	.quad	ProductIterator_B_next_
	.quad	ProductIterator_init_first_iterableIntIterable_second_iterableIntIterable
	.quad	ProductIterator_next_
	.size	ProductIterator, 136

	.type	Range_hashtbl,@object           # @Range_hashtbl
	.weak	Range_hashtbl
	.p2align	4, 0x0
Range_hashtbl:
	.quad	IntIterable
	.quad	Range
	.quad	Object
	.quad	0
	.quad	any_typ
	.quad	0
	.quad	0
	.quad	Iterable
	.size	Range_hashtbl, 64

	.type	Range_offset_tbl,@object        # @Range_offset_tbl
	.weak	Range_offset_tbl
	.p2align	4, 0x0
Range_offset_tbl:
	.long	40                              # 0x28
	.long	9                               # 0x9
	.long	66                              # 0x42
	.long	0                               # 0x0
	.long	9                               # 0x9
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	64                              # 0x40
	.size	Range_offset_tbl, 32

	.type	Range,@object                   # @Range
	.globl	Range
	.p2align	4, 0x0
Range:
	.quad	5490049236840671069             # 0x4c3092b1814ae75d
	.quad	4611686018427388291             # 0x4000000000000183
	.quad	7                               # 0x7
	.quad	subtype_test
	.quad	Range_hashtbl
	.quad	Range_offset_tbl
	.quad	_size_Range
	.quad	_box_Default
	.quad	_unbox_Default
	.quad	Range_field_start
	.quad	Range_field_end
	.quad	Range_field_step
	.quad	Range_B_init_endPtri32
	.quad	Range_B_init_startPtri32_endPtri32
	.quad	Range_B_step_stepPtri32
	.quad	Range_B_each_fFunctionPtri32_to_Nothing
	.quad	Range_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32
	.quad	Range_B_all_fFunctionPtri32_to_Ptri1
	.quad	Range_B_any_fFunctionPtri32_to_Ptri1
	.quad	Range_B_map_fFunctionPtri32_to_Ptri32
	.quad	Range_B_filter_fFunctionPtri32_to_Ptri1
	.quad	Range_B_chain_otherIntIterable
	.quad	Range_B_interleave_otherIntIterable
	.quad	Range_B_zip_otherIntIterable
	.quad	Range_B_product_otherIntIterable
	.quad	Range_B_iterator_
	.quad	Range_init_endPtri32
	.quad	Range_init_startPtri32_endPtri32
	.quad	Range_step_stepPtri32
	.quad	IntIterable_each_fFunctionPtri32_to_Nothing
	.quad	IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32
	.quad	IntIterable_all_fFunctionPtri32_to_Ptri1
	.quad	IntIterable_any_fFunctionPtri32_to_Ptri1
	.quad	IntIterable_map_fFunctionPtri32_to_Ptri32
	.quad	IntIterable_filter_fFunctionPtri32_to_Ptri1
	.quad	IntIterable_chain_otherIntIterable
	.quad	IntIterable_interleave_otherIntIterable
	.quad	IntIterable_zip_otherIntIterable
	.quad	IntIterable_product_otherIntIterable
	.quad	Range_iterator_
	.quad	Range_B_each_fFunctionPtri32_to_Nothing
	.quad	Range_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32
	.quad	Range_B_all_fFunctionPtri32_to_Ptri1
	.quad	Range_B_any_fFunctionPtri32_to_Ptri1
	.quad	Range_B_map_fFunctionPtri32_to_Ptri32
	.quad	Range_B_filter_fFunctionPtri32_to_Ptri1
	.quad	Range_B_chain_otherIntIterable
	.quad	Range_B_interleave_otherIntIterable
	.quad	Range_B_zip_otherIntIterable
	.quad	Range_B_product_otherIntIterable
	.quad	Range_B_iterator_
	.quad	IntIterable_each_fFunctionPtri32_to_Nothing
	.quad	IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32
	.quad	IntIterable_all_fFunctionPtri32_to_Ptri1
	.quad	IntIterable_any_fFunctionPtri32_to_Ptri1
	.quad	IntIterable_map_fFunctionPtri32_to_Ptri32
	.quad	IntIterable_filter_fFunctionPtri32_to_Ptri1
	.quad	IntIterable_chain_otherIntIterable
	.quad	IntIterable_interleave_otherIntIterable
	.quad	IntIterable_zip_otherIntIterable
	.quad	IntIterable_product_otherIntIterable
	.quad	Range_iterator_
	.quad	Range_B_iterator_
	.quad	Range_iterator_
	.quad	Range_B_iterator_
	.quad	Range_iterator_
	.size	Range, 528

	.type	RangeIterator_hashtbl,@object   # @RangeIterator_hashtbl
	.weak	RangeIterator_hashtbl
	.p2align	4, 0x0
RangeIterator_hashtbl:
	.quad	RangeIterator
	.quad	IntIterator
	.quad	any_typ
	.quad	0
	.quad	0
	.quad	Iterator
	.quad	0
	.quad	Object
	.size	RangeIterator_hashtbl, 64

	.type	RangeIterator_offset_tbl,@object # @RangeIterator_offset_tbl
	.weak	RangeIterator_offset_tbl
	.p2align	4, 0x0
RangeIterator_offset_tbl:
	.long	9                               # 0x9
	.long	16                              # 0x10
	.long	9                               # 0x9
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	18                              # 0x12
	.long	0                               # 0x0
	.long	18                              # 0x12
	.size	RangeIterator_offset_tbl, 32

	.type	RangeIterator,@object           # @RangeIterator
	.globl	RangeIterator
	.p2align	4, 0x0
RangeIterator:
	.quad	-913562485944406675             # 0xf3525fc261292d6d
	.quad	4611686018427388093             # 0x40000000000000bd
	.quad	7                               # 0x7
	.quad	subtype_test
	.quad	RangeIterator_hashtbl
	.quad	RangeIterator_offset_tbl
	.quad	_size_RangeIterator
	.quad	_box_Default
	.quad	_unbox_Default
	.quad	RangeIterator_field_counter
	.quad	RangeIterator_field_end
	.quad	RangeIterator_field_step
	.quad	RangeIterator_B_init_counterPtri32_endPtri32_stepPtri32
	.quad	RangeIterator_B_next_
	.quad	RangeIterator_init_counterPtri32_endPtri32_stepPtri32
	.quad	RangeIterator_next_
	.quad	RangeIterator_B_next_
	.quad	RangeIterator_next_
	.size	RangeIterator, 144

	.type	OutOfBoundsDetails_hashtbl,@object # @OutOfBoundsDetails_hashtbl
	.weak	OutOfBoundsDetails_hashtbl
	.p2align	4, 0x0
OutOfBoundsDetails_hashtbl:
	.quad	Object
	.quad	0
	.quad	any_typ
	.quad	OutOfBoundsDetails
	.size	OutOfBoundsDetails_hashtbl, 32

	.type	OutOfBoundsDetails_offset_tbl,@object # @OutOfBoundsDetails_offset_tbl
	.weak	OutOfBoundsDetails_offset_tbl
	.p2align	2, 0x0
OutOfBoundsDetails_offset_tbl:
	.long	15                              # 0xf
	.long	0                               # 0x0
	.long	9                               # 0x9
	.long	9                               # 0x9
	.size	OutOfBoundsDetails_offset_tbl, 16

	.type	OutOfBoundsDetails,@object      # @OutOfBoundsDetails
	.globl	OutOfBoundsDetails
	.p2align	4, 0x0
OutOfBoundsDetails:
	.quad	4650630525701360429             # 0x408a5bd2b2048b2d
	.quad	4611686018427388091             # 0x40000000000000bb
	.quad	3                               # 0x3
	.quad	subtype_test
	.quad	OutOfBoundsDetails_hashtbl
	.quad	OutOfBoundsDetails_offset_tbl
	.quad	_size_OutOfBoundsDetails
	.quad	_box_Default
	.quad	_unbox_Default
	.quad	OutOfBoundsDetails_field_bounds
	.quad	OutOfBoundsDetails_field_index
	.quad	OutOfBoundsDetails_B_init_boundsPtri32_indexPtri32
	.quad	OutOfBoundsDetails_B_report_
	.quad	OutOfBoundsDetails_init_boundsPtri32_indexPtri32
	.quad	OutOfBoundsDetails_report_
	.size	OutOfBoundsDetails, 120

	.type	OutOfBounds_hashtbl,@object     # @OutOfBounds_hashtbl
	.weak	OutOfBounds_hashtbl
	.p2align	4, 0x0
OutOfBounds_hashtbl:
	.quad	any_typ
	.quad	Exception
	.quad	OutOfBounds
	.quad	Object
	.size	OutOfBounds_hashtbl, 32

	.type	OutOfBounds_offset_tbl,@object  # @OutOfBounds_offset_tbl
	.weak	OutOfBounds_offset_tbl
	.p2align	2, 0x0
OutOfBounds_offset_tbl:
	.long	9                               # 0x9
	.long	25                              # 0x19
	.long	9                               # 0x9
	.long	38                              # 0x26
	.size	OutOfBounds_offset_tbl, 16

	.type	OutOfBounds,@object             # @OutOfBounds
	.globl	OutOfBounds
	.p2align	4, 0x0
OutOfBounds:
	.quad	5348403617834207535             # 0x4a3958c0dc6c092f
	.quad	4611686018427388247             # 0x4000000000000157
	.quad	3                               # 0x3
	.quad	subtype_test
	.quad	OutOfBounds_hashtbl
	.quad	OutOfBounds_offset_tbl
	.quad	_size_OutOfBounds
	.quad	_box_Default
	.quad	_unbox_Default
	.quad	OutOfBounds_field_details
	.quad	OutOfBounds_field_line_number
	.quad	OutOfBounds_field_file_name
	.quad	OutOfBounds_field_message
	.quad	OutOfBounds_B_init_boundsPtri32_indexPtri32
	.quad	OutOfBounds_B_init_messageString
	.quad	OutOfBounds_B_init_
	.quad	OutOfBounds_B_set_info_line_numberPtri32_file_nameString
	.quad	OutOfBounds_B_report_
	.quad	OutOfBounds_B_print_message_
	.quad	OutOfBounds_init_boundsPtri32_indexPtri32
	.quad	Exception_init_messageString
	.quad	Exception_init_
	.quad	Exception_set_info_line_numberPtri32_file_nameString
	.quad	Exception_report_
	.quad	OutOfBounds_print_message_
	.quad	OutOfBounds_field_line_number
	.quad	OutOfBounds_field_file_name
	.quad	OutOfBounds_field_message
	.quad	OutOfBounds_B_init_messageString
	.quad	OutOfBounds_B_init_
	.quad	OutOfBounds_B_set_info_line_numberPtri32_file_nameString
	.quad	OutOfBounds_B_report_
	.quad	OutOfBounds_B_print_message_
	.quad	Exception_init_messageString
	.quad	Exception_init_
	.quad	Exception_set_info_line_numberPtri32_file_nameString
	.quad	Exception_report_
	.quad	OutOfBounds_print_message_
	.size	OutOfBounds, 304

	.type	IntArray_hashtbl,@object        # @IntArray_hashtbl
	.weak	IntArray_hashtbl
	.p2align	4, 0x0
IntArray_hashtbl:
	.quad	Representable
	.quad	Iterable
	.quad	any_typ
	.quad	0
	.quad	0
	.quad	IntIterable
	.quad	IntArray
	.quad	Object
	.size	IntArray_hashtbl, 64

	.type	IntArray_offset_tbl,@object     # @IntArray_offset_tbl
	.weak	IntArray_offset_tbl
	.p2align	4, 0x0
IntArray_offset_tbl:
	.long	84                              # 0x54
	.long	82                              # 0x52
	.long	9                               # 0x9
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	58                              # 0x3a
	.long	9                               # 0x9
	.long	84                              # 0x54
	.size	IntArray_offset_tbl, 32

	.type	IntArray,@object                # @IntArray
	.globl	IntArray
	.p2align	4, 0x0
IntArray:
	.quad	7629948565578263212             # 0x69e305cb91cb2aac
	.quad	4611686018427388093             # 0x40000000000000bd
	.quad	7                               # 0x7
	.quad	subtype_test
	.quad	IntArray_hashtbl
	.quad	IntArray_offset_tbl
	.quad	_size_IntArray
	.quad	_box_Default
	.quad	_unbox_Default
	.quad	IntArray_field_buffer
	.quad	IntArray_field_length
	.quad	IntArray_field_capacity
	.quad	IntArray_B__Self_from_iterable_iterableIntIterable
	.quad	IntArray_B_init_
	.quad	IntArray_B_init_bufferBufferPtri32_lengthPtri32_capacityPtri32
	.quad	IntArray_B_length_
	.quad	IntArray_B_capacity_
	.quad	IntArray_B_buffer_
	.quad	IntArray_B_append_xPtri32
	.quad	IntArray_B_extend_aryIntArray
	.quad	IntArray_B__index_xPtri32
	.quad	IntArray_B_pop_
	.quad	IntArray_B_copy_
	.quad	IntArray_B_each_fFunctionPtri32_to_Nothing
	.quad	IntArray_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32
	.quad	IntArray_B_all_fFunctionPtri32_to_Ptri1
	.quad	IntArray_B_any_fFunctionPtri32_to_Ptri1
	.quad	IntArray_B_map_fFunctionPtri32_to_Ptri32
	.quad	IntArray_B_filter_fFunctionPtri32_to_Ptri1
	.quad	IntArray_B_chain_otherIntIterable
	.quad	IntArray_B_interleave_otherIntIterable
	.quad	IntArray_B_zip_otherIntIterable
	.quad	IntArray_B_product_otherIntIterable
	.quad	IntArray_B_iterator_
	.quad	IntArray_B_repr_
	.quad	IntArray__Self_from_iterable_iterableIntIterable
	.quad	IntArray_init_
	.quad	IntArray_init_bufferBufferPtri32_lengthPtri32_capacityPtri32
	.quad	IntArray_length_
	.quad	IntArray_capacity_
	.quad	IntArray_buffer_
	.quad	IntArray_append_xPtri32
	.quad	IntArray_extend_aryIntArray
	.quad	IntArray__index_xPtri32
	.quad	IntArray_pop_
	.quad	IntArray_copy_
	.quad	IntIterable_each_fFunctionPtri32_to_Nothing
	.quad	IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32
	.quad	IntIterable_all_fFunctionPtri32_to_Ptri1
	.quad	IntIterable_any_fFunctionPtri32_to_Ptri1
	.quad	IntArray_map_fFunctionPtri32_to_Ptri32
	.quad	IntIterable_filter_fFunctionPtri32_to_Ptri1
	.quad	IntIterable_chain_otherIntIterable
	.quad	IntIterable_interleave_otherIntIterable
	.quad	IntIterable_zip_otherIntIterable
	.quad	IntIterable_product_otherIntIterable
	.quad	IntArray_iterator_
	.quad	Representable_repr_
	.quad	IntArray_B_each_fFunctionPtri32_to_Nothing
	.quad	IntArray_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32
	.quad	IntArray_B_all_fFunctionPtri32_to_Ptri1
	.quad	IntArray_B_any_fFunctionPtri32_to_Ptri1
	.quad	IntArray_B_map_fFunctionPtri32_to_Ptri32
	.quad	IntArray_B_filter_fFunctionPtri32_to_Ptri1
	.quad	IntArray_B_chain_otherIntIterable
	.quad	IntArray_B_interleave_otherIntIterable
	.quad	IntArray_B_zip_otherIntIterable
	.quad	IntArray_B_product_otherIntIterable
	.quad	IntArray_B_iterator_
	.quad	IntIterable_each_fFunctionPtri32_to_Nothing
	.quad	IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32
	.quad	IntIterable_all_fFunctionPtri32_to_Ptri1
	.quad	IntIterable_any_fFunctionPtri32_to_Ptri1
	.quad	IntArray_map_fFunctionPtri32_to_Ptri32
	.quad	IntIterable_filter_fFunctionPtri32_to_Ptri1
	.quad	IntIterable_chain_otherIntIterable
	.quad	IntIterable_interleave_otherIntIterable
	.quad	IntIterable_zip_otherIntIterable
	.quad	IntIterable_product_otherIntIterable
	.quad	IntArray_iterator_
	.quad	IntArray_B_iterator_
	.quad	IntArray_iterator_
	.quad	IntArray_B_iterator_
	.quad	IntArray_iterator_
	.quad	IntArray_B_repr_
	.quad	Representable_repr_
	.size	IntArray, 688

	.type	IntArrayIterator_hashtbl,@object # @IntArrayIterator_hashtbl
	.weak	IntArrayIterator_hashtbl
	.p2align	4, 0x0
IntArrayIterator_hashtbl:
	.quad	0
	.quad	IntIterator
	.quad	any_typ
	.quad	0
	.quad	IntArrayIterator
	.quad	Iterator
	.quad	0
	.quad	Object
	.size	IntArrayIterator_hashtbl, 64

	.type	IntArrayIterator_offset_tbl,@object # @IntArrayIterator_offset_tbl
	.weak	IntArrayIterator_offset_tbl
	.p2align	4, 0x0
IntArrayIterator_offset_tbl:
	.long	0                               # 0x0
	.long	15                              # 0xf
	.long	9                               # 0x9
	.long	0                               # 0x0
	.long	9                               # 0x9
	.long	17                              # 0x11
	.long	0                               # 0x0
	.long	17                              # 0x11
	.size	IntArrayIterator_offset_tbl, 32

	.type	IntArrayIterator,@object        # @IntArrayIterator
	.globl	IntArrayIterator
	.p2align	4, 0x0
IntArrayIterator:
	.quad	5577199879563532693             # 0x4d6631bdbebc5995
	.quad	4611686018427388093             # 0x40000000000000bd
	.quad	7                               # 0x7
	.quad	subtype_test
	.quad	IntArrayIterator_hashtbl
	.quad	IntArrayIterator_offset_tbl
	.quad	_size_IntArrayIterator
	.quad	_box_Default
	.quad	_unbox_Default
	.quad	IntArrayIterator_field_array
	.quad	IntArrayIterator_field_index
	.quad	IntArrayIterator_B_init_arrayIntArray
	.quad	IntArrayIterator_B_next_
	.quad	IntArrayIterator_init_arrayIntArray
	.quad	IntArrayIterator_next_
	.quad	IntArrayIterator_B_next_
	.quad	IntArrayIterator_next_
	.size	IntArrayIterator, 136

	.type	Pair_hashtbl,@object            # @Pair_hashtbl
	.weak	Pair_hashtbl
	.p2align	4, 0x0
Pair_hashtbl:
	.quad	Object
	.quad	any_typ
	.quad	Pair
	.quad	0
	.size	Pair_hashtbl, 32

	.type	Pair_offset_tbl,@object         # @Pair_offset_tbl
	.weak	Pair_offset_tbl
	.p2align	2, 0x0
Pair_offset_tbl:
	.long	19                              # 0x13
	.long	9                               # 0x9
	.long	9                               # 0x9
	.long	0                               # 0x0
	.size	Pair_offset_tbl, 16

	.type	Pair,@object                    # @Pair
	.globl	Pair
	.p2align	4, 0x0
Pair:
	.quad	9197944775169318296             # 0x7fa5aa0a4ba09d98
	.quad	4611686018427388081             # 0x40000000000000b1
	.quad	3                               # 0x3
	.quad	subtype_test
	.quad	Pair_hashtbl
	.quad	Pair_offset_tbl
	.quad	_size_Pair
	.quad	_box_Default
	.quad	_unbox_Default
	.quad	Pair_field_Pair_0
	.quad	Pair_field_Pair_1
	.quad	Pair_field_first
	.quad	Pair_field_second
	.quad	Pair_B_init_firstT_secondU
	.quad	Pair_B_first_
	.quad	Pair_B_second_
	.quad	Pair_init_firstT_secondU
	.quad	Pair_first_
	.quad	Pair_second_
	.size	Pair, 152

	.type	Iterator2_hashtbl,@object       # @Iterator2_hashtbl
	.weak	Iterator2_hashtbl
	.p2align	4, 0x0
Iterator2_hashtbl:
	.quad	Object
	.quad	any_typ
	.quad	Iterator2
	.quad	0
	.size	Iterator2_hashtbl, 32

	.type	Iterator2_offset_tbl,@object    # @Iterator2_offset_tbl
	.weak	Iterator2_offset_tbl
	.p2align	2, 0x0
Iterator2_offset_tbl:
	.long	12                              # 0xc
	.long	9                               # 0x9
	.long	9                               # 0x9
	.long	0                               # 0x0
	.size	Iterator2_offset_tbl, 16

	.type	Iterator2,@object               # @Iterator2
	.globl	Iterator2
	.p2align	4, 0x0
Iterator2:
	.quad	4189192806087951739             # 0x3a2300a96e7e857b
	.quad	4611686018427388081             # 0x40000000000000b1
	.quad	3                               # 0x3
	.quad	subtype_test
	.quad	Iterator2_hashtbl
	.quad	Iterator2_offset_tbl
	.quad	_size_Iterator2
	.quad	_box_Default
	.quad	_unbox_Default
	.size	Iterator2, 72

	.type	Iterable2_hashtbl,@object       # @Iterable2_hashtbl
	.weak	Iterable2_hashtbl
	.p2align	4, 0x0
Iterable2_hashtbl:
	.quad	Object
	.quad	0
	.quad	any_typ
	.quad	Iterable2
	.size	Iterable2_hashtbl, 32

	.type	Iterable2_offset_tbl,@object    # @Iterable2_offset_tbl
	.weak	Iterable2_offset_tbl
	.p2align	2, 0x0
Iterable2_offset_tbl:
	.long	32                              # 0x20
	.long	0                               # 0x0
	.long	9                               # 0x9
	.long	9                               # 0x9
	.size	Iterable2_offset_tbl, 16

	.type	Iterable2,@object               # @Iterable2
	.globl	Iterable2
	.p2align	4, 0x0
Iterable2:
	.quad	5693646204635713916             # 0x4f03e50e9010117c
	.quad	4611686018427388091             # 0x40000000000000bb
	.quad	3                               # 0x3
	.quad	subtype_test
	.quad	Iterable2_hashtbl
	.quad	Iterable2_offset_tbl
	.quad	_size_Iterable2
	.quad	_box_Default
	.quad	_unbox_Default
	.size	Iterable2, 72

	.type	Array_hashtbl,@object           # @Array_hashtbl
	.weak	Array_hashtbl
	.p2align	4, 0x0
Array_hashtbl:
	.quad	Object
	.quad	Iterable2
	.quad	Array
	.quad	any_typ
	.size	Array_hashtbl, 32

	.type	Array_offset_tbl,@object        # @Array_offset_tbl
	.weak	Array_offset_tbl
	.p2align	2, 0x0
Array_offset_tbl:
	.long	78                              # 0x4e
	.long	55                              # 0x37
	.long	9                               # 0x9
	.long	9                               # 0x9
	.size	Array_offset_tbl, 16

	.type	Array,@object                   # @Array
	.globl	Array
	.p2align	4, 0x0
Array:
	.quad	-5261542750394134544            # 0xb6fb3ebed039cff0
	.quad	4611686018427388721             # 0x4000000000000331
	.quad	3                               # 0x3
	.quad	subtype_test
	.quad	Array_hashtbl
	.quad	Array_offset_tbl
	.quad	_size_Array
	.quad	_box_Default
	.quad	_unbox_Default
	.quad	Array_field_Array_0
	.quad	Array_field_buffer
	.quad	Array_field_length
	.quad	Array_field_capacity
	.quad	Array_B__Self_from_iterable_iterableIterable2T
	.quad	Array_B_init_
	.quad	Array_B_init_capacityPtri32
	.quad	Array_B_length_
	.quad	Array_B_capacity_
	.quad	Array_B_append_xT
	.quad	Array_B_grow_
	.quad	Array_B__index_xPtri32
	.quad	Array_B_throw_oob_xPtri32
	.quad	Array_B_unsafe_index_xPtri32
	.quad	Array_B_iterator_
	.quad	Array_B_each_fFunctionT_to_Nothing
	.quad	Array_B_reduce_accumulatorT_fFunctionT._T_to_T
	.quad	Array_B_all_fFunctionT_to_Ptri1
	.quad	Array_B_any_fFunctionT_to_Ptri1
	.quad	Array_B_map_fFunctionT_to_U
	.quad	Array_B_filter_fFunctionT_to_Ptri1
	.quad	Array_B_chain_otherIterable2T
	.quad	Array_B_interleave_otherIterable2T
	.quad	Array_B_zip_otherIterable2U
	.quad	Array_B_product_otherIterable2U
	.quad	Array__Self_from_iterable_iterableIterable2T
	.quad	Array_init_
	.quad	Array_init_capacityPtri32
	.quad	Array_length_
	.quad	Array_capacity_
	.quad	Array_append_xT
	.quad	Array_grow_
	.quad	Array__index_xPtri32
	.quad	Array_throw_oob_xPtri32
	.quad	Array_unsafe_index_xPtri32
	.quad	Array_iterator_
	.quad	Iterable2_each_fFunctionT_to_Nothing
	.quad	Iterable2_reduce_accumulatorT_fFunctionT._T_to_T
	.quad	Iterable2_all_fFunctionT_to_Ptri1
	.quad	Iterable2_any_fFunctionT_to_Ptri1
	.quad	Iterable2_map_fFunctionT_to_U
	.quad	Iterable2_filter_fFunctionT_to_Ptri1
	.quad	Iterable2_chain_otherIterable2T
	.quad	Iterable2_interleave_otherIterable2T
	.quad	Iterable2_zip_otherIterable2U
	.quad	Iterable2_product_otherIterable2U
	.quad	Array_field_Array_0
	.quad	Array_B_iterator_
	.quad	Array_B_each_fFunctionT_to_Nothing
	.quad	Array_B_reduce_accumulatorT_fFunctionT._T_to_T
	.quad	Array_B_all_fFunctionT_to_Ptri1
	.quad	Array_B_any_fFunctionT_to_Ptri1
	.quad	Array_B_map_fFunctionT_to_U
	.quad	Array_B_filter_fFunctionT_to_Ptri1
	.quad	Array_B_chain_otherIterable2T
	.quad	Array_B_interleave_otherIterable2T
	.quad	Array_B_zip_otherIterable2U
	.quad	Array_B_product_otherIterable2U
	.quad	Array_iterator_
	.quad	Iterable2_each_fFunctionT_to_Nothing
	.quad	Iterable2_reduce_accumulatorT_fFunctionT._T_to_T
	.quad	Iterable2_all_fFunctionT_to_Ptri1
	.quad	Iterable2_any_fFunctionT_to_Ptri1
	.quad	Iterable2_map_fFunctionT_to_U
	.quad	Iterable2_filter_fFunctionT_to_Ptri1
	.quad	Iterable2_chain_otherIterable2T
	.quad	Iterable2_interleave_otherIterable2T
	.quad	Iterable2_zip_otherIterable2U
	.quad	Iterable2_product_otherIterable2U
	.size	Array, 624

	.type	ArrayIterator_hashtbl,@object   # @ArrayIterator_hashtbl
	.weak	ArrayIterator_hashtbl
	.p2align	4, 0x0
ArrayIterator_hashtbl:
	.quad	ArrayIterator
	.quad	Object
	.quad	any_typ
	.quad	Iterator2
	.size	ArrayIterator_hashtbl, 32

	.type	ArrayIterator_offset_tbl,@object # @ArrayIterator_offset_tbl
	.weak	ArrayIterator_offset_tbl
	.p2align	2, 0x0
ArrayIterator_offset_tbl:
	.long	9                               # 0x9
	.long	19                              # 0x13
	.long	9                               # 0x9
	.long	16                              # 0x10
	.size	ArrayIterator_offset_tbl, 16

	.type	ArrayIterator,@object           # @ArrayIterator
	.globl	ArrayIterator
	.p2align	4, 0x0
ArrayIterator:
	.quad	3447345754186651411             # 0x2fd76eb2d83f1713
	.quad	4611686018427388181             # 0x4000000000000115
	.quad	3                               # 0x3
	.quad	subtype_test
	.quad	ArrayIterator_hashtbl
	.quad	ArrayIterator_offset_tbl
	.quad	_size_ArrayIterator
	.quad	_box_Default
	.quad	_unbox_Default
	.quad	ArrayIterator_field_ArrayIterator_0
	.quad	ArrayIterator_field_array
	.quad	ArrayIterator_field_index
	.quad	ArrayIterator_B_init_arrayArrayT
	.quad	ArrayIterator_B_next_
	.quad	ArrayIterator_init_arrayArrayT
	.quad	ArrayIterator_next_
	.quad	ArrayIterator_field_ArrayIterator_0
	.quad	ArrayIterator_B_next_
	.quad	ArrayIterator_next_
	.size	ArrayIterator, 152

	.type	MapIterable2_hashtbl,@object    # @MapIterable2_hashtbl
	.weak	MapIterable2_hashtbl
	.p2align	4, 0x0
MapIterable2_hashtbl:
	.quad	Object
	.quad	MapIterable2
	.quad	any_typ
	.quad	Iterable2
	.size	MapIterable2_hashtbl, 32

	.type	MapIterable2_offset_tbl,@object # @MapIterable2_offset_tbl
	.weak	MapIterable2_offset_tbl
	.p2align	2, 0x0
MapIterable2_offset_tbl:
	.long	60                              # 0x3c
	.long	9                               # 0x9
	.long	9                               # 0x9
	.long	37                              # 0x25
	.size	MapIterable2_offset_tbl, 16

	.type	MapIterable2,@object            # @MapIterable2
	.globl	MapIterable2
	.p2align	4, 0x0
MapIterable2:
	.quad	-1724859134596891929            # 0xe81011c17ac3bae7
	.quad	4611686018427388091             # 0x40000000000000bb
	.quad	3                               # 0x3
	.quad	subtype_test
	.quad	MapIterable2_hashtbl
	.quad	MapIterable2_offset_tbl
	.quad	_size_MapIterable2
	.quad	_box_Default
	.quad	_unbox_Default
	.quad	MapIterable2_field_MapIterable2_0
	.quad	MapIterable2_field_MapIterable2_1
	.quad	MapIterable2_field_iterable
	.quad	MapIterable2_field_f
	.quad	MapIterable2_B_init_iterableIterable2T_fFunctionT_to_U
	.quad	MapIterable2_B_iterator_
	.quad	MapIterable2_B_each_fFunctionT_to_Nothing
	.quad	MapIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T
	.quad	MapIterable2_B_all_fFunctionT_to_Ptri1
	.quad	MapIterable2_B_any_fFunctionT_to_Ptri1
	.quad	MapIterable2_B_map_fFunctionT_to_U
	.quad	MapIterable2_B_filter_fFunctionT_to_Ptri1
	.quad	MapIterable2_B_chain_otherIterable2T
	.quad	MapIterable2_B_interleave_otherIterable2T
	.quad	MapIterable2_B_zip_otherIterable2U
	.quad	MapIterable2_B_product_otherIterable2U
	.quad	MapIterable2_init_iterableIterable2T_fFunctionT_to_U
	.quad	MapIterable2_iterator_
	.quad	Iterable2_each_fFunctionT_to_Nothing
	.quad	Iterable2_reduce_accumulatorT_fFunctionT._T_to_T
	.quad	Iterable2_all_fFunctionT_to_Ptri1
	.quad	Iterable2_any_fFunctionT_to_Ptri1
	.quad	Iterable2_map_fFunctionT_to_U
	.quad	Iterable2_filter_fFunctionT_to_Ptri1
	.quad	Iterable2_chain_otherIterable2T
	.quad	Iterable2_interleave_otherIterable2T
	.quad	Iterable2_zip_otherIterable2U
	.quad	Iterable2_product_otherIterable2U
	.quad	MapIterable2_field_MapIterable2_1
	.quad	MapIterable2_B_iterator_
	.quad	MapIterable2_B_each_fFunctionT_to_Nothing
	.quad	MapIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T
	.quad	MapIterable2_B_all_fFunctionT_to_Ptri1
	.quad	MapIterable2_B_any_fFunctionT_to_Ptri1
	.quad	MapIterable2_B_map_fFunctionT_to_U
	.quad	MapIterable2_B_filter_fFunctionT_to_Ptri1
	.quad	MapIterable2_B_chain_otherIterable2T
	.quad	MapIterable2_B_interleave_otherIterable2T
	.quad	MapIterable2_B_zip_otherIterable2U
	.quad	MapIterable2_B_product_otherIterable2U
	.quad	MapIterable2_iterator_
	.quad	Iterable2_each_fFunctionT_to_Nothing
	.quad	Iterable2_reduce_accumulatorT_fFunctionT._T_to_T
	.quad	Iterable2_all_fFunctionT_to_Ptri1
	.quad	Iterable2_any_fFunctionT_to_Ptri1
	.quad	Iterable2_map_fFunctionT_to_U
	.quad	Iterable2_filter_fFunctionT_to_Ptri1
	.quad	Iterable2_chain_otherIterable2T
	.quad	Iterable2_interleave_otherIterable2T
	.quad	Iterable2_zip_otherIterable2U
	.quad	Iterable2_product_otherIterable2U
	.size	MapIterable2, 480

	.type	MapIterator2_hashtbl,@object    # @MapIterator2_hashtbl
	.weak	MapIterator2_hashtbl
	.p2align	4, 0x0
MapIterator2_hashtbl:
	.quad	Object
	.quad	Iterator2
	.quad	MapIterator2
	.quad	any_typ
	.size	MapIterator2_hashtbl, 32

	.type	MapIterator2_offset_tbl,@object # @MapIterator2_offset_tbl
	.weak	MapIterator2_offset_tbl
	.p2align	2, 0x0
MapIterator2_offset_tbl:
	.long	20                              # 0x14
	.long	17                              # 0x11
	.long	9                               # 0x9
	.long	9                               # 0x9
	.size	MapIterator2_offset_tbl, 16

	.type	MapIterator2,@object            # @MapIterator2
	.globl	MapIterator2
	.p2align	4, 0x0
MapIterator2:
	.quad	-10255947709272500              # 0xffdb904517f42e4c
	.quad	4611686018427388279             # 0x4000000000000177
	.quad	3                               # 0x3
	.quad	subtype_test
	.quad	MapIterator2_hashtbl
	.quad	MapIterator2_offset_tbl
	.quad	_size_MapIterator2
	.quad	_box_Default
	.quad	_unbox_Default
	.quad	MapIterator2_field_MapIterator2_0
	.quad	MapIterator2_field_MapIterator2_1
	.quad	MapIterator2_field_iterator
	.quad	MapIterator2_field_f
	.quad	MapIterator2_B_init_iteratorIterator2T_fFunctionT_to_U
	.quad	MapIterator2_B_next_
	.quad	MapIterator2_init_iteratorIterator2T_fFunctionT_to_U
	.quad	MapIterator2_next_
	.quad	MapIterator2_field_MapIterator2_1
	.quad	MapIterator2_B_next_
	.quad	MapIterator2_next_
	.size	MapIterator2, 160

	.type	FilterIterable2_hashtbl,@object # @FilterIterable2_hashtbl
	.weak	FilterIterable2_hashtbl
	.p2align	4, 0x0
FilterIterable2_hashtbl:
	.quad	Iterable2
	.quad	FilterIterable2
	.quad	any_typ
	.quad	Object
	.size	FilterIterable2_hashtbl, 32

	.type	FilterIterable2_offset_tbl,@object # @FilterIterable2_offset_tbl
	.weak	FilterIterable2_offset_tbl
	.p2align	2, 0x0
FilterIterable2_offset_tbl:
	.long	36                              # 0x24
	.long	9                               # 0x9
	.long	9                               # 0x9
	.long	59                              # 0x3b
	.size	FilterIterable2_offset_tbl, 16

	.type	FilterIterable2,@object         # @FilterIterable2
	.globl	FilterIterable2
	.p2align	4, 0x0
FilterIterable2:
	.quad	1178467452958968374             # 0x105ac1e798fa8a36
	.quad	4611686018427388093             # 0x40000000000000bd
	.quad	3                               # 0x3
	.quad	subtype_test
	.quad	FilterIterable2_hashtbl
	.quad	FilterIterable2_offset_tbl
	.quad	_size_FilterIterable2
	.quad	_box_Default
	.quad	_unbox_Default
	.quad	FilterIterable2_field_FilterIterable2_0
	.quad	FilterIterable2_field_iterable
	.quad	FilterIterable2_field_f
	.quad	FilterIterable2_B_init_iterableIterable2T_fFunctionT_to_Ptri1
	.quad	FilterIterable2_B_iterator_
	.quad	FilterIterable2_B_each_fFunctionT_to_Nothing
	.quad	FilterIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T
	.quad	FilterIterable2_B_all_fFunctionT_to_Ptri1
	.quad	FilterIterable2_B_any_fFunctionT_to_Ptri1
	.quad	FilterIterable2_B_map_fFunctionT_to_U
	.quad	FilterIterable2_B_filter_fFunctionT_to_Ptri1
	.quad	FilterIterable2_B_chain_otherIterable2T
	.quad	FilterIterable2_B_interleave_otherIterable2T
	.quad	FilterIterable2_B_zip_otherIterable2U
	.quad	FilterIterable2_B_product_otherIterable2U
	.quad	FilterIterable2_init_iterableIterable2T_fFunctionT_to_Ptri1
	.quad	FilterIterable2_iterator_
	.quad	Iterable2_each_fFunctionT_to_Nothing
	.quad	Iterable2_reduce_accumulatorT_fFunctionT._T_to_T
	.quad	Iterable2_all_fFunctionT_to_Ptri1
	.quad	Iterable2_any_fFunctionT_to_Ptri1
	.quad	Iterable2_map_fFunctionT_to_U
	.quad	Iterable2_filter_fFunctionT_to_Ptri1
	.quad	Iterable2_chain_otherIterable2T
	.quad	Iterable2_interleave_otherIterable2T
	.quad	Iterable2_zip_otherIterable2U
	.quad	Iterable2_product_otherIterable2U
	.quad	FilterIterable2_field_FilterIterable2_0
	.quad	FilterIterable2_B_iterator_
	.quad	FilterIterable2_B_each_fFunctionT_to_Nothing
	.quad	FilterIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T
	.quad	FilterIterable2_B_all_fFunctionT_to_Ptri1
	.quad	FilterIterable2_B_any_fFunctionT_to_Ptri1
	.quad	FilterIterable2_B_map_fFunctionT_to_U
	.quad	FilterIterable2_B_filter_fFunctionT_to_Ptri1
	.quad	FilterIterable2_B_chain_otherIterable2T
	.quad	FilterIterable2_B_interleave_otherIterable2T
	.quad	FilterIterable2_B_zip_otherIterable2U
	.quad	FilterIterable2_B_product_otherIterable2U
	.quad	FilterIterable2_iterator_
	.quad	Iterable2_each_fFunctionT_to_Nothing
	.quad	Iterable2_reduce_accumulatorT_fFunctionT._T_to_T
	.quad	Iterable2_all_fFunctionT_to_Ptri1
	.quad	Iterable2_any_fFunctionT_to_Ptri1
	.quad	Iterable2_map_fFunctionT_to_U
	.quad	Iterable2_filter_fFunctionT_to_Ptri1
	.quad	Iterable2_chain_otherIterable2T
	.quad	Iterable2_interleave_otherIterable2T
	.quad	Iterable2_zip_otherIterable2U
	.quad	Iterable2_product_otherIterable2U
	.size	FilterIterable2, 472

	.type	FilterIterator2_hashtbl,@object # @FilterIterator2_hashtbl
	.weak	FilterIterator2_hashtbl
	.p2align	4, 0x0
FilterIterator2_hashtbl:
	.quad	any_typ
	.quad	Object
	.quad	Iterator2
	.quad	FilterIterator2
	.size	FilterIterator2_hashtbl, 32

	.type	FilterIterator2_offset_tbl,@object # @FilterIterator2_offset_tbl
	.weak	FilterIterator2_offset_tbl
	.p2align	2, 0x0
FilterIterator2_offset_tbl:
	.long	9                               # 0x9
	.long	19                              # 0x13
	.long	16                              # 0x10
	.long	9                               # 0x9
	.size	FilterIterator2_offset_tbl, 16

	.type	FilterIterator2,@object         # @FilterIterator2
	.globl	FilterIterator2
	.p2align	4, 0x0
FilterIterator2:
	.quad	8213847504843366470             # 0x71fd72c96d6ae046
	.quad	4611686018427388387             # 0x40000000000001e3
	.quad	3                               # 0x3
	.quad	subtype_test
	.quad	FilterIterator2_hashtbl
	.quad	FilterIterator2_offset_tbl
	.quad	_size_FilterIterator2
	.quad	_box_Default
	.quad	_unbox_Default
	.quad	FilterIterator2_field_FilterIterator2_0
	.quad	FilterIterator2_field_iterator
	.quad	FilterIterator2_field_f
	.quad	FilterIterator2_B_init_iteratorIterator2T_fFunctionT_to_Ptri1
	.quad	FilterIterator2_B_next_
	.quad	FilterIterator2_init_iteratorIterator2T_fFunctionT_to_Ptri1
	.quad	FilterIterator2_next_
	.quad	FilterIterator2_field_FilterIterator2_0
	.quad	FilterIterator2_B_next_
	.quad	FilterIterator2_next_
	.size	FilterIterator2, 152

	.type	ChainIterable2_hashtbl,@object  # @ChainIterable2_hashtbl
	.weak	ChainIterable2_hashtbl
	.p2align	4, 0x0
ChainIterable2_hashtbl:
	.quad	Object
	.quad	Iterable2
	.quad	ChainIterable2
	.quad	any_typ
	.size	ChainIterable2_hashtbl, 32

	.type	ChainIterable2_offset_tbl,@object # @ChainIterable2_offset_tbl
	.weak	ChainIterable2_offset_tbl
	.p2align	2, 0x0
ChainIterable2_offset_tbl:
	.long	59                              # 0x3b
	.long	36                              # 0x24
	.long	9                               # 0x9
	.long	9                               # 0x9
	.size	ChainIterable2_offset_tbl, 16

	.type	ChainIterable2,@object          # @ChainIterable2
	.globl	ChainIterable2
	.p2align	4, 0x0
ChainIterable2:
	.quad	-5233298072945030060            # 0xb75f97213e600c54
	.quad	4611686018427388279             # 0x4000000000000177
	.quad	3                               # 0x3
	.quad	subtype_test
	.quad	ChainIterable2_hashtbl
	.quad	ChainIterable2_offset_tbl
	.quad	_size_ChainIterable2
	.quad	_box_Default
	.quad	_unbox_Default
	.quad	ChainIterable2_field_ChainIterable2_0
	.quad	ChainIterable2_field_first
	.quad	ChainIterable2_field_second
	.quad	ChainIterable2_B_init_firstIterable2T_secondIterable2T
	.quad	ChainIterable2_B_iterator_
	.quad	ChainIterable2_B_each_fFunctionT_to_Nothing
	.quad	ChainIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T
	.quad	ChainIterable2_B_all_fFunctionT_to_Ptri1
	.quad	ChainIterable2_B_any_fFunctionT_to_Ptri1
	.quad	ChainIterable2_B_map_fFunctionT_to_U
	.quad	ChainIterable2_B_filter_fFunctionT_to_Ptri1
	.quad	ChainIterable2_B_chain_otherIterable2T
	.quad	ChainIterable2_B_interleave_otherIterable2T
	.quad	ChainIterable2_B_zip_otherIterable2U
	.quad	ChainIterable2_B_product_otherIterable2U
	.quad	ChainIterable2_init_firstIterable2T_secondIterable2T
	.quad	ChainIterable2_iterator_
	.quad	Iterable2_each_fFunctionT_to_Nothing
	.quad	Iterable2_reduce_accumulatorT_fFunctionT._T_to_T
	.quad	Iterable2_all_fFunctionT_to_Ptri1
	.quad	Iterable2_any_fFunctionT_to_Ptri1
	.quad	Iterable2_map_fFunctionT_to_U
	.quad	Iterable2_filter_fFunctionT_to_Ptri1
	.quad	Iterable2_chain_otherIterable2T
	.quad	Iterable2_interleave_otherIterable2T
	.quad	Iterable2_zip_otherIterable2U
	.quad	Iterable2_product_otherIterable2U
	.quad	ChainIterable2_field_ChainIterable2_0
	.quad	ChainIterable2_B_iterator_
	.quad	ChainIterable2_B_each_fFunctionT_to_Nothing
	.quad	ChainIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T
	.quad	ChainIterable2_B_all_fFunctionT_to_Ptri1
	.quad	ChainIterable2_B_any_fFunctionT_to_Ptri1
	.quad	ChainIterable2_B_map_fFunctionT_to_U
	.quad	ChainIterable2_B_filter_fFunctionT_to_Ptri1
	.quad	ChainIterable2_B_chain_otherIterable2T
	.quad	ChainIterable2_B_interleave_otherIterable2T
	.quad	ChainIterable2_B_zip_otherIterable2U
	.quad	ChainIterable2_B_product_otherIterable2U
	.quad	ChainIterable2_iterator_
	.quad	Iterable2_each_fFunctionT_to_Nothing
	.quad	Iterable2_reduce_accumulatorT_fFunctionT._T_to_T
	.quad	Iterable2_all_fFunctionT_to_Ptri1
	.quad	Iterable2_any_fFunctionT_to_Ptri1
	.quad	Iterable2_map_fFunctionT_to_U
	.quad	Iterable2_filter_fFunctionT_to_Ptri1
	.quad	Iterable2_chain_otherIterable2T
	.quad	Iterable2_interleave_otherIterable2T
	.quad	Iterable2_zip_otherIterable2U
	.quad	Iterable2_product_otherIterable2U
	.size	ChainIterable2, 472

	.type	ChainIterator2_hashtbl,@object  # @ChainIterator2_hashtbl
	.weak	ChainIterator2_hashtbl
	.p2align	4, 0x0
ChainIterator2_hashtbl:
	.quad	Object
	.quad	any_typ
	.quad	Iterator2
	.quad	ChainIterator2
	.size	ChainIterator2_hashtbl, 32

	.type	ChainIterator2_offset_tbl,@object # @ChainIterator2_offset_tbl
	.weak	ChainIterator2_offset_tbl
	.p2align	2, 0x0
ChainIterator2_offset_tbl:
	.long	20                              # 0x14
	.long	9                               # 0x9
	.long	17                              # 0x11
	.long	9                               # 0x9
	.size	ChainIterator2_offset_tbl, 16

	.type	ChainIterator2,@object          # @ChainIterator2
	.globl	ChainIterator2
	.p2align	4, 0x0
ChainIterator2:
	.quad	-228267985060461774             # 0xfcd5077a1ce08332
	.quad	4611686018427388081             # 0x40000000000000b1
	.quad	3                               # 0x3
	.quad	subtype_test
	.quad	ChainIterator2_hashtbl
	.quad	ChainIterator2_offset_tbl
	.quad	_size_ChainIterator2
	.quad	_box_Default
	.quad	_unbox_Default
	.quad	ChainIterator2_field_ChainIterator2_0
	.quad	ChainIterator2_field_first
	.quad	ChainIterator2_field_second
	.quad	ChainIterator2_field_on_first
	.quad	ChainIterator2_B_init_firstIterator2T_secondIterator2T
	.quad	ChainIterator2_B_next_
	.quad	ChainIterator2_init_firstIterator2T_secondIterator2T
	.quad	ChainIterator2_next_
	.quad	ChainIterator2_field_ChainIterator2_0
	.quad	ChainIterator2_B_next_
	.quad	ChainIterator2_next_
	.size	ChainIterator2, 160

	.type	InterleaveIterable2_hashtbl,@object # @InterleaveIterable2_hashtbl
	.weak	InterleaveIterable2_hashtbl
	.p2align	4, 0x0
InterleaveIterable2_hashtbl:
	.quad	Iterable2
	.quad	InterleaveIterable2
	.quad	any_typ
	.quad	Object
	.size	InterleaveIterable2_hashtbl, 32

	.type	InterleaveIterable2_offset_tbl,@object # @InterleaveIterable2_offset_tbl
	.weak	InterleaveIterable2_offset_tbl
	.p2align	2, 0x0
InterleaveIterable2_offset_tbl:
	.long	36                              # 0x24
	.long	9                               # 0x9
	.long	9                               # 0x9
	.long	59                              # 0x3b
	.size	InterleaveIterable2_offset_tbl, 16

	.type	InterleaveIterable2,@object     # @InterleaveIterable2
	.globl	InterleaveIterable2
	.p2align	4, 0x0
InterleaveIterable2:
	.quad	-6258231685215461775            # 0xa9264b7098a35e71
	.quad	4611686018427388093             # 0x40000000000000bd
	.quad	3                               # 0x3
	.quad	subtype_test
	.quad	InterleaveIterable2_hashtbl
	.quad	InterleaveIterable2_offset_tbl
	.quad	_size_InterleaveIterable2
	.quad	_box_Default
	.quad	_unbox_Default
	.quad	InterleaveIterable2_field_InterleaveIterable2_0
	.quad	InterleaveIterable2_field_first
	.quad	InterleaveIterable2_field_second
	.quad	InterleaveIterable2_B_init_firstIterable2T_secondIterable2T
	.quad	InterleaveIterable2_B_iterator_
	.quad	InterleaveIterable2_B_each_fFunctionT_to_Nothing
	.quad	InterleaveIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T
	.quad	InterleaveIterable2_B_all_fFunctionT_to_Ptri1
	.quad	InterleaveIterable2_B_any_fFunctionT_to_Ptri1
	.quad	InterleaveIterable2_B_map_fFunctionT_to_U
	.quad	InterleaveIterable2_B_filter_fFunctionT_to_Ptri1
	.quad	InterleaveIterable2_B_chain_otherIterable2T
	.quad	InterleaveIterable2_B_interleave_otherIterable2T
	.quad	InterleaveIterable2_B_zip_otherIterable2U
	.quad	InterleaveIterable2_B_product_otherIterable2U
	.quad	InterleaveIterable2_init_firstIterable2T_secondIterable2T
	.quad	InterleaveIterable2_iterator_
	.quad	Iterable2_each_fFunctionT_to_Nothing
	.quad	Iterable2_reduce_accumulatorT_fFunctionT._T_to_T
	.quad	Iterable2_all_fFunctionT_to_Ptri1
	.quad	Iterable2_any_fFunctionT_to_Ptri1
	.quad	Iterable2_map_fFunctionT_to_U
	.quad	Iterable2_filter_fFunctionT_to_Ptri1
	.quad	Iterable2_chain_otherIterable2T
	.quad	Iterable2_interleave_otherIterable2T
	.quad	Iterable2_zip_otherIterable2U
	.quad	Iterable2_product_otherIterable2U
	.quad	InterleaveIterable2_field_InterleaveIterable2_0
	.quad	InterleaveIterable2_B_iterator_
	.quad	InterleaveIterable2_B_each_fFunctionT_to_Nothing
	.quad	InterleaveIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T
	.quad	InterleaveIterable2_B_all_fFunctionT_to_Ptri1
	.quad	InterleaveIterable2_B_any_fFunctionT_to_Ptri1
	.quad	InterleaveIterable2_B_map_fFunctionT_to_U
	.quad	InterleaveIterable2_B_filter_fFunctionT_to_Ptri1
	.quad	InterleaveIterable2_B_chain_otherIterable2T
	.quad	InterleaveIterable2_B_interleave_otherIterable2T
	.quad	InterleaveIterable2_B_zip_otherIterable2U
	.quad	InterleaveIterable2_B_product_otherIterable2U
	.quad	InterleaveIterable2_iterator_
	.quad	Iterable2_each_fFunctionT_to_Nothing
	.quad	Iterable2_reduce_accumulatorT_fFunctionT._T_to_T
	.quad	Iterable2_all_fFunctionT_to_Ptri1
	.quad	Iterable2_any_fFunctionT_to_Ptri1
	.quad	Iterable2_map_fFunctionT_to_U
	.quad	Iterable2_filter_fFunctionT_to_Ptri1
	.quad	Iterable2_chain_otherIterable2T
	.quad	Iterable2_interleave_otherIterable2T
	.quad	Iterable2_zip_otherIterable2U
	.quad	Iterable2_product_otherIterable2U
	.size	InterleaveIterable2, 472

	.type	InterleaveIterator2_hashtbl,@object # @InterleaveIterator2_hashtbl
	.weak	InterleaveIterator2_hashtbl
	.p2align	4, 0x0
InterleaveIterator2_hashtbl:
	.quad	Object
	.quad	Iterator2
	.quad	InterleaveIterator2
	.quad	any_typ
	.size	InterleaveIterator2_hashtbl, 32

	.type	InterleaveIterator2_offset_tbl,@object # @InterleaveIterator2_offset_tbl
	.weak	InterleaveIterator2_offset_tbl
	.p2align	2, 0x0
InterleaveIterator2_offset_tbl:
	.long	20                              # 0x14
	.long	17                              # 0x11
	.long	9                               # 0x9
	.long	9                               # 0x9
	.size	InterleaveIterator2_offset_tbl, 16

	.type	InterleaveIterator2,@object     # @InterleaveIterator2
	.globl	InterleaveIterator2
	.p2align	4, 0x0
InterleaveIterator2:
	.quad	6709847746581360093             # 0x5d1e2af9a7efeddd
	.quad	4611686018427388279             # 0x4000000000000177
	.quad	3                               # 0x3
	.quad	subtype_test
	.quad	InterleaveIterator2_hashtbl
	.quad	InterleaveIterator2_offset_tbl
	.quad	_size_InterleaveIterator2
	.quad	_box_Default
	.quad	_unbox_Default
	.quad	InterleaveIterator2_field_InterleaveIterator2_0
	.quad	InterleaveIterator2_field_first
	.quad	InterleaveIterator2_field_second
	.quad	InterleaveIterator2_field_on_first
	.quad	InterleaveIterator2_B_init_firstIterator2T_secondIterator2T
	.quad	InterleaveIterator2_B_next_
	.quad	InterleaveIterator2_init_firstIterator2T_secondIterator2T
	.quad	InterleaveIterator2_next_
	.quad	InterleaveIterator2_field_InterleaveIterator2_0
	.quad	InterleaveIterator2_B_next_
	.quad	InterleaveIterator2_next_
	.size	InterleaveIterator2, 160

	.type	ZipIterable2_hashtbl,@object    # @ZipIterable2_hashtbl
	.weak	ZipIterable2_hashtbl
	.p2align	4, 0x0
ZipIterable2_hashtbl:
	.quad	any_typ
	.quad	ZipIterable2
	.quad	Iterable2
	.quad	Object
	.size	ZipIterable2_hashtbl, 32

	.type	ZipIterable2_offset_tbl,@object # @ZipIterable2_offset_tbl
	.weak	ZipIterable2_offset_tbl
	.p2align	2, 0x0
ZipIterable2_offset_tbl:
	.long	9                               # 0x9
	.long	9                               # 0x9
	.long	38                              # 0x26
	.long	61                              # 0x3d
	.size	ZipIterable2_offset_tbl, 16

	.type	ZipIterable2,@object            # @ZipIterable2
	.globl	ZipIterable2
	.p2align	4, 0x0
ZipIterable2:
	.quad	-3218950579047519815            # 0xd353fd80ca55a9b9
	.quad	4611686018427388289             # 0x4000000000000181
	.quad	3                               # 0x3
	.quad	subtype_test
	.quad	ZipIterable2_hashtbl
	.quad	ZipIterable2_offset_tbl
	.quad	_size_ZipIterable2
	.quad	_box_Default
	.quad	_unbox_Default
	.quad	ZipIterable2_field_ZipIterable2_0
	.quad	ZipIterable2_field_ZipIterable2_1
	.quad	ZipIterable2_field_ZipIterable2_2
	.quad	ZipIterable2_field_first
	.quad	ZipIterable2_field_second
	.quad	ZipIterable2_B_init_firstIterable2T_secondIterable2U
	.quad	ZipIterable2_B_iterator_
	.quad	ZipIterable2_B_each_fFunctionT_to_Nothing
	.quad	ZipIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T
	.quad	ZipIterable2_B_all_fFunctionT_to_Ptri1
	.quad	ZipIterable2_B_any_fFunctionT_to_Ptri1
	.quad	ZipIterable2_B_map_fFunctionT_to_U
	.quad	ZipIterable2_B_filter_fFunctionT_to_Ptri1
	.quad	ZipIterable2_B_chain_otherIterable2T
	.quad	ZipIterable2_B_interleave_otherIterable2T
	.quad	ZipIterable2_B_zip_otherIterable2U
	.quad	ZipIterable2_B_product_otherIterable2U
	.quad	ZipIterable2_init_firstIterable2T_secondIterable2U
	.quad	ZipIterable2_iterator_
	.quad	Iterable2_each_fFunctionT_to_Nothing
	.quad	Iterable2_reduce_accumulatorT_fFunctionT._T_to_T
	.quad	Iterable2_all_fFunctionT_to_Ptri1
	.quad	Iterable2_any_fFunctionT_to_Ptri1
	.quad	Iterable2_map_fFunctionT_to_U
	.quad	Iterable2_filter_fFunctionT_to_Ptri1
	.quad	Iterable2_chain_otherIterable2T
	.quad	Iterable2_interleave_otherIterable2T
	.quad	Iterable2_zip_otherIterable2U
	.quad	Iterable2_product_otherIterable2U
	.quad	ZipIterable2_field_ZipIterable2_2
	.quad	ZipIterable2_B_iterator_
	.quad	ZipIterable2_B_each_fFunctionT_to_Nothing
	.quad	ZipIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T
	.quad	ZipIterable2_B_all_fFunctionT_to_Ptri1
	.quad	ZipIterable2_B_any_fFunctionT_to_Ptri1
	.quad	ZipIterable2_B_map_fFunctionT_to_U
	.quad	ZipIterable2_B_filter_fFunctionT_to_Ptri1
	.quad	ZipIterable2_B_chain_otherIterable2T
	.quad	ZipIterable2_B_interleave_otherIterable2T
	.quad	ZipIterable2_B_zip_otherIterable2U
	.quad	ZipIterable2_B_product_otherIterable2U
	.quad	ZipIterable2_iterator_
	.quad	Iterable2_each_fFunctionT_to_Nothing
	.quad	Iterable2_reduce_accumulatorT_fFunctionT._T_to_T
	.quad	Iterable2_all_fFunctionT_to_Ptri1
	.quad	Iterable2_any_fFunctionT_to_Ptri1
	.quad	Iterable2_map_fFunctionT_to_U
	.quad	Iterable2_filter_fFunctionT_to_Ptri1
	.quad	Iterable2_chain_otherIterable2T
	.quad	Iterable2_interleave_otherIterable2T
	.quad	Iterable2_zip_otherIterable2U
	.quad	Iterable2_product_otherIterable2U
	.size	ZipIterable2, 488

	.type	ZipIterator2_hashtbl,@object    # @ZipIterator2_hashtbl
	.weak	ZipIterator2_hashtbl
	.p2align	4, 0x0
ZipIterator2_hashtbl:
	.quad	Object
	.quad	any_typ
	.quad	Iterator2
	.quad	ZipIterator2
	.size	ZipIterator2_hashtbl, 32

	.type	ZipIterator2_offset_tbl,@object # @ZipIterator2_offset_tbl
	.weak	ZipIterator2_offset_tbl
	.p2align	2, 0x0
ZipIterator2_offset_tbl:
	.long	21                              # 0x15
	.long	9                               # 0x9
	.long	18                              # 0x12
	.long	9                               # 0x9
	.size	ZipIterator2_offset_tbl, 16

	.type	ZipIterator2,@object            # @ZipIterator2
	.globl	ZipIterator2
	.p2align	4, 0x0
ZipIterator2:
	.quad	5502728639611621286             # 0x4c5d9e8b036b4fa6
	.quad	4611686018427388081             # 0x40000000000000b1
	.quad	3                               # 0x3
	.quad	subtype_test
	.quad	ZipIterator2_hashtbl
	.quad	ZipIterator2_offset_tbl
	.quad	_size_ZipIterator2
	.quad	_box_Default
	.quad	_unbox_Default
	.quad	ZipIterator2_field_ZipIterator2_0
	.quad	ZipIterator2_field_ZipIterator2_1
	.quad	ZipIterator2_field_ZipIterator2_2
	.quad	ZipIterator2_field_first
	.quad	ZipIterator2_field_second
	.quad	ZipIterator2_B_init_firstIterator2T_secondIterator2U
	.quad	ZipIterator2_B_next_
	.quad	ZipIterator2_init_firstIterator2T_secondIterator2U
	.quad	ZipIterator2_next_
	.quad	ZipIterator2_field_ZipIterator2_2
	.quad	ZipIterator2_B_next_
	.quad	ZipIterator2_next_
	.size	ZipIterator2, 168

	.type	ProductIterable2_hashtbl,@object # @ProductIterable2_hashtbl
	.weak	ProductIterable2_hashtbl
	.p2align	4, 0x0
ProductIterable2_hashtbl:
	.quad	ProductIterable2
	.quad	Object
	.quad	any_typ
	.quad	Iterable2
	.size	ProductIterable2_hashtbl, 32

	.type	ProductIterable2_offset_tbl,@object # @ProductIterable2_offset_tbl
	.weak	ProductIterable2_offset_tbl
	.p2align	2, 0x0
ProductIterable2_offset_tbl:
	.long	9                               # 0x9
	.long	61                              # 0x3d
	.long	9                               # 0x9
	.long	38                              # 0x26
	.size	ProductIterable2_offset_tbl, 16

	.type	ProductIterable2,@object        # @ProductIterable2
	.globl	ProductIterable2
	.p2align	4, 0x0
ProductIterable2:
	.quad	7827074759551300494             # 0x6c9f5b06317b338e
	.quad	4611686018427388319             # 0x400000000000019f
	.quad	3                               # 0x3
	.quad	subtype_test
	.quad	ProductIterable2_hashtbl
	.quad	ProductIterable2_offset_tbl
	.quad	_size_ProductIterable2
	.quad	_box_Default
	.quad	_unbox_Default
	.quad	ProductIterable2_field_ProductIterable2_0
	.quad	ProductIterable2_field_ProductIterable2_1
	.quad	ProductIterable2_field_ProductIterable2_2
	.quad	ProductIterable2_field_first
	.quad	ProductIterable2_field_second
	.quad	ProductIterable2_B_init_firstIterable2T_secondIterable2U
	.quad	ProductIterable2_B_iterator_
	.quad	ProductIterable2_B_each_fFunctionT_to_Nothing
	.quad	ProductIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T
	.quad	ProductIterable2_B_all_fFunctionT_to_Ptri1
	.quad	ProductIterable2_B_any_fFunctionT_to_Ptri1
	.quad	ProductIterable2_B_map_fFunctionT_to_U
	.quad	ProductIterable2_B_filter_fFunctionT_to_Ptri1
	.quad	ProductIterable2_B_chain_otherIterable2T
	.quad	ProductIterable2_B_interleave_otherIterable2T
	.quad	ProductIterable2_B_zip_otherIterable2U
	.quad	ProductIterable2_B_product_otherIterable2U
	.quad	ProductIterable2_init_firstIterable2T_secondIterable2U
	.quad	ProductIterable2_iterator_
	.quad	Iterable2_each_fFunctionT_to_Nothing
	.quad	Iterable2_reduce_accumulatorT_fFunctionT._T_to_T
	.quad	Iterable2_all_fFunctionT_to_Ptri1
	.quad	Iterable2_any_fFunctionT_to_Ptri1
	.quad	Iterable2_map_fFunctionT_to_U
	.quad	Iterable2_filter_fFunctionT_to_Ptri1
	.quad	Iterable2_chain_otherIterable2T
	.quad	Iterable2_interleave_otherIterable2T
	.quad	Iterable2_zip_otherIterable2U
	.quad	Iterable2_product_otherIterable2U
	.quad	ProductIterable2_field_ProductIterable2_2
	.quad	ProductIterable2_B_iterator_
	.quad	ProductIterable2_B_each_fFunctionT_to_Nothing
	.quad	ProductIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T
	.quad	ProductIterable2_B_all_fFunctionT_to_Ptri1
	.quad	ProductIterable2_B_any_fFunctionT_to_Ptri1
	.quad	ProductIterable2_B_map_fFunctionT_to_U
	.quad	ProductIterable2_B_filter_fFunctionT_to_Ptri1
	.quad	ProductIterable2_B_chain_otherIterable2T
	.quad	ProductIterable2_B_interleave_otherIterable2T
	.quad	ProductIterable2_B_zip_otherIterable2U
	.quad	ProductIterable2_B_product_otherIterable2U
	.quad	ProductIterable2_iterator_
	.quad	Iterable2_each_fFunctionT_to_Nothing
	.quad	Iterable2_reduce_accumulatorT_fFunctionT._T_to_T
	.quad	Iterable2_all_fFunctionT_to_Ptri1
	.quad	Iterable2_any_fFunctionT_to_Ptri1
	.quad	Iterable2_map_fFunctionT_to_U
	.quad	Iterable2_filter_fFunctionT_to_Ptri1
	.quad	Iterable2_chain_otherIterable2T
	.quad	Iterable2_interleave_otherIterable2T
	.quad	Iterable2_zip_otherIterable2U
	.quad	Iterable2_product_otherIterable2U
	.size	ProductIterable2, 488

	.type	ProductIterator2_hashtbl,@object # @ProductIterator2_hashtbl
	.weak	ProductIterator2_hashtbl
	.p2align	4, 0x0
ProductIterator2_hashtbl:
	.quad	ProductIterator2
	.quad	Iterator2
	.quad	any_typ
	.quad	Object
	.size	ProductIterator2_hashtbl, 32

	.type	ProductIterator2_offset_tbl,@object # @ProductIterator2_offset_tbl
	.weak	ProductIterator2_offset_tbl
	.p2align	2, 0x0
ProductIterator2_offset_tbl:
	.long	9                               # 0x9
	.long	20                              # 0x14
	.long	9                               # 0x9
	.long	23                              # 0x17
	.size	ProductIterator2_offset_tbl, 16

	.type	ProductIterator2,@object        # @ProductIterator2
	.globl	ProductIterator2
	.p2align	4, 0x0
ProductIterator2:
	.quad	4440657219728359865             # 0x3da06236b72ec1b9
	.quad	4611686018427388093             # 0x40000000000000bd
	.quad	3                               # 0x3
	.quad	subtype_test
	.quad	ProductIterator2_hashtbl
	.quad	ProductIterator2_offset_tbl
	.quad	_size_ProductIterator2
	.quad	_box_Default
	.quad	_unbox_Default
	.quad	ProductIterator2_field_ProductIterator2_0
	.quad	ProductIterator2_field_ProductIterator2_1
	.quad	ProductIterator2_field_ProductIterator2_2
	.quad	ProductIterator2_field_first_iterator
	.quad	ProductIterator2_field_second_iterator
	.quad	ProductIterator2_field_second_iterable
	.quad	ProductIterator2_field_current_first
	.quad	ProductIterator2_B_init_first_iterableIterable2T_second_iterableIterable2U
	.quad	ProductIterator2_B_next_
	.quad	ProductIterator2_init_first_iterableIterable2T_second_iterableIterable2U
	.quad	ProductIterator2_next_
	.quad	ProductIterator2_field_ProductIterator2_2
	.quad	ProductIterator2_B_next_
	.quad	ProductIterator2_next_
	.size	ProductIterator2, 184

	.type	Math_hashtbl,@object            # @Math_hashtbl
	.weak	Math_hashtbl
	.p2align	4, 0x0
Math_hashtbl:
	.quad	Object
	.quad	0
	.quad	any_typ
	.quad	Math
	.size	Math_hashtbl, 32

	.type	Math_offset_tbl,@object         # @Math_offset_tbl
	.weak	Math_offset_tbl
	.p2align	2, 0x0
Math_offset_tbl:
	.long	26                              # 0x1a
	.long	0                               # 0x0
	.long	9                               # 0x9
	.long	9                               # 0x9
	.size	Math_offset_tbl, 16

	.type	Math,@object                    # @Math
	.globl	Math
	.p2align	4, 0x0
Math:
	.quad	8094150130346788308             # 0x705432a8ae0085d4
	.quad	4611686018427388091             # 0x40000000000000bb
	.quad	3                               # 0x3
	.quad	subtype_test
	.quad	Math_hashtbl
	.quad	Math_offset_tbl
	.quad	_size_Math
	.quad	_box_Default
	.quad	_unbox_Default
	.quad	Math_B__Self_sqrt_xPtrf64
	.quad	Math_B__Self_abs_xPtri32__Self_abs_xPtrf64
	.quad	Math_B__Self_max_aPtrf64_bPtrf64__Self_max_aPtri32_bPtri32
	.quad	Math_B__Self_min_aPtri32_bPtri32__Self_min_aPtrf64_bPtrf64
	.quad	Math_B__Self_round_xPtrf64
	.quad	Math_B__Self_floor_xPtrf64
	.quad	Math_B__Self_ceiling_xPtrf64
	.quad	Math__Self_sqrt_xPtrf64
	.quad	Math__Self_abs_xPtri32
	.quad	Math__Self_abs_xPtrf64
	.quad	Math__Self_max_aPtrf64_bPtrf64
	.quad	Math__Self_max_aPtri32_bPtri32
	.quad	Math__Self_min_aPtri32_bPtri32
	.quad	Math__Self_min_aPtrf64_bPtrf64
	.quad	Math__Self_round_xPtrf64
	.quad	Math__Self_floor_xPtrf64
	.quad	Math__Self_ceiling_xPtrf64
	.size	Math, 208

	.type	Integer_hashtbl,@object         # @Integer_hashtbl
	.weak	Integer_hashtbl
	.p2align	4, 0x0
Integer_hashtbl:
	.quad	Object
	.quad	any_typ
	.quad	0
	.quad	Integer
	.size	Integer_hashtbl, 32

	.type	Integer_offset_tbl,@object      # @Integer_offset_tbl
	.weak	Integer_offset_tbl
	.p2align	2, 0x0
Integer_offset_tbl:
	.long	22                              # 0x16
	.long	9                               # 0x9
	.long	0                               # 0x0
	.long	9                               # 0x9
	.size	Integer_offset_tbl, 16

	.type	Integer,@object                 # @Integer
	.globl	Integer
	.p2align	4, 0x0
Integer:
	.quad	-735147942809078232             # 0xf5cc3ad74b817628
	.quad	4611686018427388081             # 0x40000000000000b1
	.quad	3                               # 0x3
	.quad	subtype_test
	.quad	Integer_hashtbl
	.quad	Integer_offset_tbl
	.quad	_size_Integer
	.quad	_box_Default
	.quad	_unbox_Default
	.quad	Integer_field_value
	.quad	Integer_B_init_valuePtri32
	.quad	Integer_B__ADD_otherPtri32
	.quad	Integer_B__SUB_otherPtri32
	.quad	Integer_B__MUL_otherPtri32
	.quad	Integer_B__DIV_otherPtri32
	.quad	Integer_B_print_
	.quad	Integer_init_valuePtri32
	.quad	Integer__ADD_otherPtri32
	.quad	Integer__SUB_otherPtri32
	.quad	Integer__MUL_otherPtri32
	.quad	Integer__DIV_otherPtri32
	.quad	Integer_print_
	.size	Integer, 176

	.type	BigBoy_hashtbl,@object          # @BigBoy_hashtbl
	.weak	BigBoy_hashtbl
	.p2align	4, 0x0
BigBoy_hashtbl:
	.quad	Representable
	.quad	Object
	.quad	any_typ
	.quad	BigBoy
	.size	BigBoy_hashtbl, 32

	.type	BigBoy_offset_tbl,@object       # @BigBoy_offset_tbl
	.weak	BigBoy_offset_tbl
	.p2align	2, 0x0
BigBoy_offset_tbl:
	.long	13                              # 0xd
	.long	15                              # 0xf
	.long	9                               # 0x9
	.long	9                               # 0x9
	.size	BigBoy_offset_tbl, 16

	.type	BigBoy,@object                  # @BigBoy
	.globl	BigBoy
	.p2align	4, 0x0
BigBoy:
	.quad	3069357308562348185             # 0x2a988c35c19b9899
	.quad	4611686018427388361             # 0x40000000000001c9
	.quad	3                               # 0x3
	.quad	subtype_test
	.quad	BigBoy_hashtbl
	.quad	BigBoy_offset_tbl
	.quad	_size_BigBoy
	.quad	_box_Default
	.quad	_unbox_Default
	.quad	BigBoy_B_introduce_
	.quad	BigBoy_B_repr_
	.quad	BigBoy_introduce_
	.quad	Representable_repr_
	.quad	BigBoy_B_repr_
	.quad	Representable_repr_
	.size	BigBoy, 120

	.type	Integer2_hashtbl,@object        # @Integer2_hashtbl
	.weak	Integer2_hashtbl
	.p2align	4, 0x0
Integer2_hashtbl:
	.quad	0
	.quad	Object
	.quad	any_typ
	.quad	Integer2
	.quad	Integer
	.quad	Representable
	.quad	0
	.quad	BigBoy
	.size	Integer2_hashtbl, 64

	.type	Integer2_offset_tbl,@object     # @Integer2_offset_tbl
	.weak	Integer2_offset_tbl
	.p2align	4, 0x0
Integer2_offset_tbl:
	.long	0                               # 0x0
	.long	41                              # 0x29
	.long	9                               # 0x9
	.long	9                               # 0x9
	.long	28                              # 0x1c
	.long	47                              # 0x2f
	.long	0                               # 0x0
	.long	41                              # 0x29
	.size	Integer2_offset_tbl, 32

	.type	Integer2,@object                # @Integer2
	.globl	Integer2
	.p2align	4, 0x0
Integer2:
	.quad	1844024195090879880             # 0x19974a3c419e1588
	.quad	4611686018427388181             # 0x4000000000000115
	.quad	7                               # 0x7
	.quad	subtype_test
	.quad	Integer2_hashtbl
	.quad	Integer2_offset_tbl
	.quad	_size_Integer2
	.quad	_box_Default
	.quad	_unbox_Default
	.quad	Integer2_field_value
	.quad	Integer2_B_value_
	.quad	Integer2_B_init_valuePtri32
	.quad	Integer2_B__ADD_otherPtri32
	.quad	Integer2_B__SUB_otherPtri32
	.quad	Integer2_B__MUL_otherPtri32
	.quad	Integer2_B__DIV_otherPtri32
	.quad	Integer2_B_print_
	.quad	Integer2_B_introduce_
	.quad	Integer2_B_repr_
	.quad	Integer2_value_
	.quad	Integer_init_valuePtri32
	.quad	Integer__ADD_otherPtri32
	.quad	Integer__SUB_otherPtri32
	.quad	Integer__MUL_otherPtri32
	.quad	Integer__DIV_otherPtri32
	.quad	Integer_print_
	.quad	BigBoy_introduce_
	.quad	Integer2_repr_
	.quad	Integer2_field_value
	.quad	Integer2_B_init_valuePtri32
	.quad	Integer2_B__ADD_otherPtri32
	.quad	Integer2_B__SUB_otherPtri32
	.quad	Integer2_B__MUL_otherPtri32
	.quad	Integer2_B__DIV_otherPtri32
	.quad	Integer2_B_print_
	.quad	Integer_init_valuePtri32
	.quad	Integer__ADD_otherPtri32
	.quad	Integer__SUB_otherPtri32
	.quad	Integer__MUL_otherPtri32
	.quad	Integer__DIV_otherPtri32
	.quad	Integer_print_
	.quad	Integer2_B_introduce_
	.quad	Integer2_B_repr_
	.quad	BigBoy_introduce_
	.quad	Integer2_repr_
	.quad	Integer2_B_repr_
	.quad	Integer2_repr_
	.quad	Integer2_B_repr_
	.quad	Integer2_repr_
	.size	Integer2, 392

	.type	Animal_hashtbl,@object          # @Animal_hashtbl
	.weak	Animal_hashtbl
	.p2align	4, 0x0
Animal_hashtbl:
	.quad	Object
	.quad	0
	.quad	any_typ
	.quad	Animal
	.size	Animal_hashtbl, 32

	.type	Animal_offset_tbl,@object       # @Animal_offset_tbl
	.weak	Animal_offset_tbl
	.p2align	2, 0x0
Animal_offset_tbl:
	.long	22                              # 0x16
	.long	0                               # 0x0
	.long	9                               # 0x9
	.long	9                               # 0x9
	.size	Animal_offset_tbl, 16

	.type	Animal,@object                  # @Animal
	.globl	Animal
	.p2align	4, 0x0
Animal:
	.quad	1075018126824711487             # 0xeeb3b4a687e253f
	.quad	4611686018427388091             # 0x40000000000000bb
	.quad	3                               # 0x3
	.quad	subtype_test
	.quad	Animal_hashtbl
	.quad	Animal_offset_tbl
	.quad	_size_Animal
	.quad	_box_Default
	.quad	_unbox_Default
	.quad	Animal_field_age
	.quad	Animal_field_hp
	.quad	Animal_field_skill
	.quad	Animal_B_init_agePtri32_hpPtrf64_skillPtri32
	.quad	Animal_B_say_age_
	.quad	Animal_B_say_skill_
	.quad	Animal_B_say_messagePtri32
	.quad	Animal_B_do_nothing_
	.quad	Animal_init_agePtri32_hpPtrf64_skillPtri32
	.quad	Animal_say_age_
	.quad	Animal_say_skill_
	.quad	Animal_say_messagePtri32
	.quad	Animal_do_nothing_
	.size	Animal, 176

	.type	Beaver_hashtbl,@object          # @Beaver_hashtbl
	.weak	Beaver_hashtbl
	.p2align	4, 0x0
Beaver_hashtbl:
	.quad	0
	.quad	Object
	.quad	any_typ
	.quad	Beaver
	.size	Beaver_hashtbl, 32

	.type	Beaver_offset_tbl,@object       # @Beaver_offset_tbl
	.weak	Beaver_offset_tbl
	.p2align	2, 0x0
Beaver_offset_tbl:
	.long	0                               # 0x0
	.long	17                              # 0x11
	.long	9                               # 0x9
	.long	9                               # 0x9
	.size	Beaver_offset_tbl, 16

	.type	Beaver,@object                  # @Beaver
	.globl	Beaver
	.p2align	4, 0x0
Beaver:
	.quad	-6124772949900838462            # 0xab006f73d73d39c2
	.quad	4611686018427388097             # 0x40000000000000c1
	.quad	3                               # 0x3
	.quad	subtype_test
	.quad	Beaver_hashtbl
	.quad	Beaver_offset_tbl
	.quad	_size_Beaver
	.quad	_box_Default
	.quad	_unbox_Default
	.quad	Beaver_field_color
	.quad	Beaver_field_name
	.quad	Beaver_B_init_colorPtri32_namePtrf64
	.quad	Beaver_B__ADD_xPtri32
	.quad	Beaver_B_say_color_
	.quad	Beaver_init_colorPtri32_namePtrf64
	.quad	Beaver__ADD_xPtri32
	.quad	Beaver_say_color_
	.size	Beaver, 136

	.type	ListNode_hashtbl,@object        # @ListNode_hashtbl
	.weak	ListNode_hashtbl
	.p2align	4, 0x0
ListNode_hashtbl:
	.quad	Object
	.quad	any_typ
	.quad	0
	.quad	ListNode
	.size	ListNode_hashtbl, 32

	.type	ListNode_offset_tbl,@object     # @ListNode_offset_tbl
	.weak	ListNode_offset_tbl
	.p2align	2, 0x0
ListNode_offset_tbl:
	.long	21                              # 0x15
	.long	9                               # 0x9
	.long	0                               # 0x0
	.long	9                               # 0x9
	.size	ListNode_offset_tbl, 16

	.type	ListNode,@object                # @ListNode
	.globl	ListNode
	.p2align	4, 0x0
ListNode:
	.quad	-1756024950533091476            # 0xe7a1589c7ec08f6c
	.quad	4611686018427388081             # 0x40000000000000b1
	.quad	3                               # 0x3
	.quad	subtype_test
	.quad	ListNode_hashtbl
	.quad	ListNode_offset_tbl
	.quad	_size_ListNode
	.quad	_box_Default
	.quad	_unbox_Default
	.quad	ListNode_field_data
	.quad	ListNode_field_next
	.quad	ListNode_B_init_dataPtri32
	.quad	ListNode_B_push_nextListNode
	.quad	ListNode_B_next_
	.quad	ListNode_B_data_
	.quad	ListNode_B_iterator_
	.quad	ListNode_init_dataPtri32
	.quad	ListNode_push_nextListNode
	.quad	ListNode_next_
	.quad	ListNode_data_
	.quad	ListNode_iterator_
	.size	ListNode, 168

	.type	ListIterator_hashtbl,@object    # @ListIterator_hashtbl
	.weak	ListIterator_hashtbl
	.p2align	4, 0x0
ListIterator_hashtbl:
	.quad	Object
	.quad	any_typ
	.quad	ListIterator
	.quad	0
	.size	ListIterator_hashtbl, 32

	.type	ListIterator_offset_tbl,@object # @ListIterator_offset_tbl
	.weak	ListIterator_offset_tbl
	.p2align	2, 0x0
ListIterator_offset_tbl:
	.long	14                              # 0xe
	.long	9                               # 0x9
	.long	9                               # 0x9
	.long	0                               # 0x0
	.size	ListIterator_offset_tbl, 16

	.type	ListIterator,@object            # @ListIterator
	.globl	ListIterator
	.p2align	4, 0x0
ListIterator:
	.quad	-5838699946612561379            # 0xaef8c5555410ea1d
	.quad	4611686018427388081             # 0x40000000000000b1
	.quad	3                               # 0x3
	.quad	subtype_test
	.quad	ListIterator_hashtbl
	.quad	ListIterator_offset_tbl
	.quad	_size_ListIterator
	.quad	_box_Default
	.quad	_unbox_Default
	.quad	ListIterator_field_node
	.quad	ListIterator_B_init_nodeListNode
	.quad	ListIterator_B_next_
	.quad	ListIterator_init_nodeListNode
	.quad	ListIterator_next_
	.size	ListIterator, 112

	.type	Bard_hashtbl,@object            # @Bard_hashtbl
	.weak	Bard_hashtbl
	.p2align	4, 0x0
Bard_hashtbl:
	.quad	Object
	.quad	any_typ
	.quad	Bard
	.quad	0
	.size	Bard_hashtbl, 32

	.type	Bard_offset_tbl,@object         # @Bard_offset_tbl
	.weak	Bard_offset_tbl
	.p2align	2, 0x0
Bard_offset_tbl:
	.long	16                              # 0x10
	.long	9                               # 0x9
	.long	9                               # 0x9
	.long	0                               # 0x0
	.size	Bard_offset_tbl, 16

	.type	Bard,@object                    # @Bard
	.globl	Bard
	.p2align	4, 0x0
Bard:
	.quad	-7979915337087193093            # 0x9141a547c339effb
	.quad	4611686018427388081             # 0x40000000000000b1
	.quad	3                               # 0x3
	.quad	subtype_test
	.quad	Bard_hashtbl
	.quad	Bard_offset_tbl
	.quad	_size_Bard
	.quad	_box_Default
	.quad	_unbox_Default
	.quad	Bard_B_init_
	.quad	Bard_B_take_aAnimal_bBeaver_take_aPtri32_bPtri32_take_aPtrf64_bPtrf64_take_aPtri32_bPtrf64
	.quad	Bard_init_
	.quad	Bard_take_aAnimal_bBeaver
	.quad	Bard_take_aPtri32_bPtri32
	.quad	Bard_take_aPtrf64_bPtrf64
	.quad	Bard_take_aPtri32_bPtrf64
	.size	Bard, 128

	.type	String_field_bytes,@object      # @String_field_bytes
	.p2align	3, 0x0
String_field_bytes:
	.quad	String_getter_bytes
	.quad	String_setter_bytes
	.size	String_field_bytes, 16

	.type	String_field_length,@object     # @String_field_length
	.p2align	3, 0x0
String_field_length:
	.quad	String_getter_length
	.quad	String_setter_length
	.size	String_field_length, 16

	.type	String_field_capacity,@object   # @String_field_capacity
	.p2align	3, 0x0
String_field_capacity:
	.quad	String_getter_capacity
	.quad	String_setter_capacity
	.size	String_field_capacity, 16

	.type	Character_field_byte,@object    # @Character_field_byte
	.p2align	3, 0x0
Character_field_byte:
	.quad	Character_getter_byte
	.quad	Character_setter_byte
	.size	Character_field_byte, 16

	.type	StringIterator_field_str,@object # @StringIterator_field_str
	.p2align	3, 0x0
StringIterator_field_str:
	.quad	StringIterator_getter_str
	.quad	StringIterator_setter_str
	.size	StringIterator_field_str, 16

	.type	StringIterator_field_index,@object # @StringIterator_field_index
	.p2align	3, 0x0
StringIterator_field_index:
	.quad	StringIterator_getter_index
	.quad	StringIterator_setter_index
	.size	StringIterator_field_index, 16

	.type	Exception_field_line_number,@object # @Exception_field_line_number
	.p2align	3, 0x0
Exception_field_line_number:
	.quad	Exception_getter_line_number
	.quad	Exception_setter_line_number
	.size	Exception_field_line_number, 16

	.type	Exception_field_file_name,@object # @Exception_field_file_name
	.p2align	3, 0x0
Exception_field_file_name:
	.quad	Exception_getter_file_name
	.quad	Exception_setter_file_name
	.size	Exception_field_file_name, 16

	.type	Exception_field_message,@object # @Exception_field_message
	.p2align	3, 0x0
Exception_field_message:
	.quad	Exception_getter_message
	.quad	Exception_setter_message
	.size	Exception_field_message, 16

	.type	Channel_field_value,@object     # @Channel_field_value
	.p2align	3, 0x0
Channel_field_value:
	.quad	Channel_getter_value
	.quad	Channel_setter_value
	.size	Channel_field_value, 16

	.type	MapIterable_field_iterable,@object # @MapIterable_field_iterable
	.p2align	3, 0x0
MapIterable_field_iterable:
	.quad	MapIterable_getter_iterable
	.quad	MapIterable_setter_iterable
	.size	MapIterable_field_iterable, 16

	.type	MapIterable_field_f,@object     # @MapIterable_field_f
	.p2align	3, 0x0
MapIterable_field_f:
	.quad	MapIterable_getter_f
	.quad	MapIterable_setter_f
	.size	MapIterable_field_f, 16

	.type	MapIterator_field_iterator,@object # @MapIterator_field_iterator
	.p2align	3, 0x0
MapIterator_field_iterator:
	.quad	MapIterator_getter_iterator
	.quad	MapIterator_setter_iterator
	.size	MapIterator_field_iterator, 16

	.type	MapIterator_field_f,@object     # @MapIterator_field_f
	.p2align	3, 0x0
MapIterator_field_f:
	.quad	MapIterator_getter_f
	.quad	MapIterator_setter_f
	.size	MapIterator_field_f, 16

	.type	FilterIterable_field_iterable,@object # @FilterIterable_field_iterable
	.p2align	3, 0x0
FilterIterable_field_iterable:
	.quad	FilterIterable_getter_iterable
	.quad	FilterIterable_setter_iterable
	.size	FilterIterable_field_iterable, 16

	.type	FilterIterable_field_f,@object  # @FilterIterable_field_f
	.p2align	3, 0x0
FilterIterable_field_f:
	.quad	FilterIterable_getter_f
	.quad	FilterIterable_setter_f
	.size	FilterIterable_field_f, 16

	.type	FilterIterator_field_iterator,@object # @FilterIterator_field_iterator
	.p2align	3, 0x0
FilterIterator_field_iterator:
	.quad	FilterIterator_getter_iterator
	.quad	FilterIterator_setter_iterator
	.size	FilterIterator_field_iterator, 16

	.type	FilterIterator_field_f,@object  # @FilterIterator_field_f
	.p2align	3, 0x0
FilterIterator_field_f:
	.quad	FilterIterator_getter_f
	.quad	FilterIterator_setter_f
	.size	FilterIterator_field_f, 16

	.type	ChainIterable_field_first,@object # @ChainIterable_field_first
	.p2align	3, 0x0
ChainIterable_field_first:
	.quad	ChainIterable_getter_first
	.quad	ChainIterable_setter_first
	.size	ChainIterable_field_first, 16

	.type	ChainIterable_field_second,@object # @ChainIterable_field_second
	.p2align	3, 0x0
ChainIterable_field_second:
	.quad	ChainIterable_getter_second
	.quad	ChainIterable_setter_second
	.size	ChainIterable_field_second, 16

	.type	ChainIterator_field_first,@object # @ChainIterator_field_first
	.p2align	3, 0x0
ChainIterator_field_first:
	.quad	ChainIterator_getter_first
	.quad	ChainIterator_setter_first
	.size	ChainIterator_field_first, 16

	.type	ChainIterator_field_second,@object # @ChainIterator_field_second
	.p2align	3, 0x0
ChainIterator_field_second:
	.quad	ChainIterator_getter_second
	.quad	ChainIterator_setter_second
	.size	ChainIterator_field_second, 16

	.type	ChainIterator_field_on_first,@object # @ChainIterator_field_on_first
	.p2align	3, 0x0
ChainIterator_field_on_first:
	.quad	ChainIterator_getter_on_first
	.quad	ChainIterator_setter_on_first
	.size	ChainIterator_field_on_first, 16

	.type	InterleaveIterable_field_first,@object # @InterleaveIterable_field_first
	.p2align	3, 0x0
InterleaveIterable_field_first:
	.quad	InterleaveIterable_getter_first
	.quad	InterleaveIterable_setter_first
	.size	InterleaveIterable_field_first, 16

	.type	InterleaveIterable_field_second,@object # @InterleaveIterable_field_second
	.p2align	3, 0x0
InterleaveIterable_field_second:
	.quad	InterleaveIterable_getter_second
	.quad	InterleaveIterable_setter_second
	.size	InterleaveIterable_field_second, 16

	.type	InterleaveIterator_field_first,@object # @InterleaveIterator_field_first
	.p2align	3, 0x0
InterleaveIterator_field_first:
	.quad	InterleaveIterator_getter_first
	.quad	InterleaveIterator_setter_first
	.size	InterleaveIterator_field_first, 16

	.type	InterleaveIterator_field_second,@object # @InterleaveIterator_field_second
	.p2align	3, 0x0
InterleaveIterator_field_second:
	.quad	InterleaveIterator_getter_second
	.quad	InterleaveIterator_setter_second
	.size	InterleaveIterator_field_second, 16

	.type	InterleaveIterator_field_on_first,@object # @InterleaveIterator_field_on_first
	.p2align	3, 0x0
InterleaveIterator_field_on_first:
	.quad	InterleaveIterator_getter_on_first
	.quad	InterleaveIterator_setter_on_first
	.size	InterleaveIterator_field_on_first, 16

	.type	ZipIterable_field_first,@object # @ZipIterable_field_first
	.p2align	3, 0x0
ZipIterable_field_first:
	.quad	ZipIterable_getter_first
	.quad	ZipIterable_setter_first
	.size	ZipIterable_field_first, 16

	.type	ZipIterable_field_second,@object # @ZipIterable_field_second
	.p2align	3, 0x0
ZipIterable_field_second:
	.quad	ZipIterable_getter_second
	.quad	ZipIterable_setter_second
	.size	ZipIterable_field_second, 16

	.type	ZipIterator_field_first,@object # @ZipIterator_field_first
	.p2align	3, 0x0
ZipIterator_field_first:
	.quad	ZipIterator_getter_first
	.quad	ZipIterator_setter_first
	.size	ZipIterator_field_first, 16

	.type	ZipIterator_field_second,@object # @ZipIterator_field_second
	.p2align	3, 0x0
ZipIterator_field_second:
	.quad	ZipIterator_getter_second
	.quad	ZipIterator_setter_second
	.size	ZipIterator_field_second, 16

	.type	ProductIterable_field_first,@object # @ProductIterable_field_first
	.p2align	3, 0x0
ProductIterable_field_first:
	.quad	ProductIterable_getter_first
	.quad	ProductIterable_setter_first
	.size	ProductIterable_field_first, 16

	.type	ProductIterable_field_second,@object # @ProductIterable_field_second
	.p2align	3, 0x0
ProductIterable_field_second:
	.quad	ProductIterable_getter_second
	.quad	ProductIterable_setter_second
	.size	ProductIterable_field_second, 16

	.type	ProductIterator_field_first_iterator,@object # @ProductIterator_field_first_iterator
	.p2align	3, 0x0
ProductIterator_field_first_iterator:
	.quad	ProductIterator_getter_first_iterator
	.quad	ProductIterator_setter_first_iterator
	.size	ProductIterator_field_first_iterator, 16

	.type	ProductIterator_field_second_iterator,@object # @ProductIterator_field_second_iterator
	.p2align	3, 0x0
ProductIterator_field_second_iterator:
	.quad	ProductIterator_getter_second_iterator
	.quad	ProductIterator_setter_second_iterator
	.size	ProductIterator_field_second_iterator, 16

	.type	ProductIterator_field_second_iterable,@object # @ProductIterator_field_second_iterable
	.p2align	3, 0x0
ProductIterator_field_second_iterable:
	.quad	ProductIterator_getter_second_iterable
	.quad	ProductIterator_setter_second_iterable
	.size	ProductIterator_field_second_iterable, 16

	.type	ProductIterator_field_current_first,@object # @ProductIterator_field_current_first
	.p2align	3, 0x0
ProductIterator_field_current_first:
	.quad	ProductIterator_getter_current_first
	.quad	ProductIterator_setter_current_first
	.size	ProductIterator_field_current_first, 16

	.type	Range_field_start,@object       # @Range_field_start
	.p2align	3, 0x0
Range_field_start:
	.quad	Range_getter_start
	.quad	Range_setter_start
	.size	Range_field_start, 16

	.type	Range_field_end,@object         # @Range_field_end
	.p2align	3, 0x0
Range_field_end:
	.quad	Range_getter_end
	.quad	Range_setter_end
	.size	Range_field_end, 16

	.type	Range_field_step,@object        # @Range_field_step
	.p2align	3, 0x0
Range_field_step:
	.quad	Range_getter_step
	.quad	Range_setter_step
	.size	Range_field_step, 16

	.type	RangeIterator_field_counter,@object # @RangeIterator_field_counter
	.p2align	3, 0x0
RangeIterator_field_counter:
	.quad	RangeIterator_getter_counter
	.quad	RangeIterator_setter_counter
	.size	RangeIterator_field_counter, 16

	.type	RangeIterator_field_end,@object # @RangeIterator_field_end
	.p2align	3, 0x0
RangeIterator_field_end:
	.quad	RangeIterator_getter_end
	.quad	RangeIterator_setter_end
	.size	RangeIterator_field_end, 16

	.type	RangeIterator_field_step,@object # @RangeIterator_field_step
	.p2align	3, 0x0
RangeIterator_field_step:
	.quad	RangeIterator_getter_step
	.quad	RangeIterator_setter_step
	.size	RangeIterator_field_step, 16

	.type	OutOfBoundsDetails_field_bounds,@object # @OutOfBoundsDetails_field_bounds
	.p2align	3, 0x0
OutOfBoundsDetails_field_bounds:
	.quad	OutOfBoundsDetails_getter_bounds
	.quad	OutOfBoundsDetails_setter_bounds
	.size	OutOfBoundsDetails_field_bounds, 16

	.type	OutOfBoundsDetails_field_index,@object # @OutOfBoundsDetails_field_index
	.p2align	3, 0x0
OutOfBoundsDetails_field_index:
	.quad	OutOfBoundsDetails_getter_index
	.quad	OutOfBoundsDetails_setter_index
	.size	OutOfBoundsDetails_field_index, 16

	.type	OutOfBounds_field_details,@object # @OutOfBounds_field_details
	.p2align	3, 0x0
OutOfBounds_field_details:
	.quad	OutOfBounds_getter_details
	.quad	OutOfBounds_setter_details
	.size	OutOfBounds_field_details, 16

	.type	OutOfBounds_field_line_number,@object # @OutOfBounds_field_line_number
	.p2align	3, 0x0
OutOfBounds_field_line_number:
	.quad	OutOfBounds_getter_line_number
	.quad	OutOfBounds_setter_line_number
	.size	OutOfBounds_field_line_number, 16

	.type	OutOfBounds_field_file_name,@object # @OutOfBounds_field_file_name
	.p2align	3, 0x0
OutOfBounds_field_file_name:
	.quad	OutOfBounds_getter_file_name
	.quad	OutOfBounds_setter_file_name
	.size	OutOfBounds_field_file_name, 16

	.type	OutOfBounds_field_message,@object # @OutOfBounds_field_message
	.p2align	3, 0x0
OutOfBounds_field_message:
	.quad	OutOfBounds_getter_message
	.quad	OutOfBounds_setter_message
	.size	OutOfBounds_field_message, 16

	.type	IntArray_field_buffer,@object   # @IntArray_field_buffer
	.p2align	3, 0x0
IntArray_field_buffer:
	.quad	IntArray_getter_buffer
	.quad	IntArray_setter_buffer
	.size	IntArray_field_buffer, 16

	.type	IntArray_field_length,@object   # @IntArray_field_length
	.p2align	3, 0x0
IntArray_field_length:
	.quad	IntArray_getter_length
	.quad	IntArray_setter_length
	.size	IntArray_field_length, 16

	.type	IntArray_field_capacity,@object # @IntArray_field_capacity
	.p2align	3, 0x0
IntArray_field_capacity:
	.quad	IntArray_getter_capacity
	.quad	IntArray_setter_capacity
	.size	IntArray_field_capacity, 16

	.type	IntArrayIterator_field_array,@object # @IntArrayIterator_field_array
	.p2align	3, 0x0
IntArrayIterator_field_array:
	.quad	IntArrayIterator_getter_array
	.quad	IntArrayIterator_setter_array
	.size	IntArrayIterator_field_array, 16

	.type	IntArrayIterator_field_index,@object # @IntArrayIterator_field_index
	.p2align	3, 0x0
IntArrayIterator_field_index:
	.quad	IntArrayIterator_getter_index
	.quad	IntArrayIterator_setter_index
	.size	IntArrayIterator_field_index, 16

	.type	Pair_field_first,@object        # @Pair_field_first
	.p2align	3, 0x0
Pair_field_first:
	.quad	Pair_getter_first
	.quad	Pair_setter_first
	.size	Pair_field_first, 16

	.type	Pair_field_second,@object       # @Pair_field_second
	.p2align	3, 0x0
Pair_field_second:
	.quad	Pair_getter_second
	.quad	Pair_setter_second
	.size	Pair_field_second, 16

	.type	Array_field_buffer,@object      # @Array_field_buffer
	.p2align	3, 0x0
Array_field_buffer:
	.quad	Array_getter_buffer
	.quad	Array_setter_buffer
	.size	Array_field_buffer, 16

	.type	Array_field_length,@object      # @Array_field_length
	.p2align	3, 0x0
Array_field_length:
	.quad	Array_getter_length
	.quad	Array_setter_length
	.size	Array_field_length, 16

	.type	Array_field_capacity,@object    # @Array_field_capacity
	.p2align	3, 0x0
Array_field_capacity:
	.quad	Array_getter_capacity
	.quad	Array_setter_capacity
	.size	Array_field_capacity, 16

	.type	ArrayIterator_field_array,@object # @ArrayIterator_field_array
	.p2align	3, 0x0
ArrayIterator_field_array:
	.quad	ArrayIterator_getter_array
	.quad	ArrayIterator_setter_array
	.size	ArrayIterator_field_array, 16

	.type	ArrayIterator_field_index,@object # @ArrayIterator_field_index
	.p2align	3, 0x0
ArrayIterator_field_index:
	.quad	ArrayIterator_getter_index
	.quad	ArrayIterator_setter_index
	.size	ArrayIterator_field_index, 16

	.type	MapIterable2_field_iterable,@object # @MapIterable2_field_iterable
	.p2align	3, 0x0
MapIterable2_field_iterable:
	.quad	MapIterable2_getter_iterable
	.quad	MapIterable2_setter_iterable
	.size	MapIterable2_field_iterable, 16

	.type	MapIterable2_field_f,@object    # @MapIterable2_field_f
	.p2align	3, 0x0
MapIterable2_field_f:
	.quad	MapIterable2_getter_f
	.quad	MapIterable2_setter_f
	.size	MapIterable2_field_f, 16

	.type	MapIterator2_field_iterator,@object # @MapIterator2_field_iterator
	.p2align	3, 0x0
MapIterator2_field_iterator:
	.quad	MapIterator2_getter_iterator
	.quad	MapIterator2_setter_iterator
	.size	MapIterator2_field_iterator, 16

	.type	MapIterator2_field_f,@object    # @MapIterator2_field_f
	.p2align	3, 0x0
MapIterator2_field_f:
	.quad	MapIterator2_getter_f
	.quad	MapIterator2_setter_f
	.size	MapIterator2_field_f, 16

	.type	FilterIterable2_field_iterable,@object # @FilterIterable2_field_iterable
	.p2align	3, 0x0
FilterIterable2_field_iterable:
	.quad	FilterIterable2_getter_iterable
	.quad	FilterIterable2_setter_iterable
	.size	FilterIterable2_field_iterable, 16

	.type	FilterIterable2_field_f,@object # @FilterIterable2_field_f
	.p2align	3, 0x0
FilterIterable2_field_f:
	.quad	FilterIterable2_getter_f
	.quad	FilterIterable2_setter_f
	.size	FilterIterable2_field_f, 16

	.type	FilterIterator2_field_iterator,@object # @FilterIterator2_field_iterator
	.p2align	3, 0x0
FilterIterator2_field_iterator:
	.quad	FilterIterator2_getter_iterator
	.quad	FilterIterator2_setter_iterator
	.size	FilterIterator2_field_iterator, 16

	.type	FilterIterator2_field_f,@object # @FilterIterator2_field_f
	.p2align	3, 0x0
FilterIterator2_field_f:
	.quad	FilterIterator2_getter_f
	.quad	FilterIterator2_setter_f
	.size	FilterIterator2_field_f, 16

	.type	ChainIterable2_field_first,@object # @ChainIterable2_field_first
	.p2align	3, 0x0
ChainIterable2_field_first:
	.quad	ChainIterable2_getter_first
	.quad	ChainIterable2_setter_first
	.size	ChainIterable2_field_first, 16

	.type	ChainIterable2_field_second,@object # @ChainIterable2_field_second
	.p2align	3, 0x0
ChainIterable2_field_second:
	.quad	ChainIterable2_getter_second
	.quad	ChainIterable2_setter_second
	.size	ChainIterable2_field_second, 16

	.type	ChainIterator2_field_first,@object # @ChainIterator2_field_first
	.p2align	3, 0x0
ChainIterator2_field_first:
	.quad	ChainIterator2_getter_first
	.quad	ChainIterator2_setter_first
	.size	ChainIterator2_field_first, 16

	.type	ChainIterator2_field_second,@object # @ChainIterator2_field_second
	.p2align	3, 0x0
ChainIterator2_field_second:
	.quad	ChainIterator2_getter_second
	.quad	ChainIterator2_setter_second
	.size	ChainIterator2_field_second, 16

	.type	ChainIterator2_field_on_first,@object # @ChainIterator2_field_on_first
	.p2align	3, 0x0
ChainIterator2_field_on_first:
	.quad	ChainIterator2_getter_on_first
	.quad	ChainIterator2_setter_on_first
	.size	ChainIterator2_field_on_first, 16

	.type	InterleaveIterable2_field_first,@object # @InterleaveIterable2_field_first
	.p2align	3, 0x0
InterleaveIterable2_field_first:
	.quad	InterleaveIterable2_getter_first
	.quad	InterleaveIterable2_setter_first
	.size	InterleaveIterable2_field_first, 16

	.type	InterleaveIterable2_field_second,@object # @InterleaveIterable2_field_second
	.p2align	3, 0x0
InterleaveIterable2_field_second:
	.quad	InterleaveIterable2_getter_second
	.quad	InterleaveIterable2_setter_second
	.size	InterleaveIterable2_field_second, 16

	.type	InterleaveIterator2_field_first,@object # @InterleaveIterator2_field_first
	.p2align	3, 0x0
InterleaveIterator2_field_first:
	.quad	InterleaveIterator2_getter_first
	.quad	InterleaveIterator2_setter_first
	.size	InterleaveIterator2_field_first, 16

	.type	InterleaveIterator2_field_second,@object # @InterleaveIterator2_field_second
	.p2align	3, 0x0
InterleaveIterator2_field_second:
	.quad	InterleaveIterator2_getter_second
	.quad	InterleaveIterator2_setter_second
	.size	InterleaveIterator2_field_second, 16

	.type	InterleaveIterator2_field_on_first,@object # @InterleaveIterator2_field_on_first
	.p2align	3, 0x0
InterleaveIterator2_field_on_first:
	.quad	InterleaveIterator2_getter_on_first
	.quad	InterleaveIterator2_setter_on_first
	.size	InterleaveIterator2_field_on_first, 16

	.type	ZipIterable2_field_first,@object # @ZipIterable2_field_first
	.p2align	3, 0x0
ZipIterable2_field_first:
	.quad	ZipIterable2_getter_first
	.quad	ZipIterable2_setter_first
	.size	ZipIterable2_field_first, 16

	.type	ZipIterable2_field_second,@object # @ZipIterable2_field_second
	.p2align	3, 0x0
ZipIterable2_field_second:
	.quad	ZipIterable2_getter_second
	.quad	ZipIterable2_setter_second
	.size	ZipIterable2_field_second, 16

	.type	ZipIterator2_field_first,@object # @ZipIterator2_field_first
	.p2align	3, 0x0
ZipIterator2_field_first:
	.quad	ZipIterator2_getter_first
	.quad	ZipIterator2_setter_first
	.size	ZipIterator2_field_first, 16

	.type	ZipIterator2_field_second,@object # @ZipIterator2_field_second
	.p2align	3, 0x0
ZipIterator2_field_second:
	.quad	ZipIterator2_getter_second
	.quad	ZipIterator2_setter_second
	.size	ZipIterator2_field_second, 16

	.type	ProductIterable2_field_first,@object # @ProductIterable2_field_first
	.p2align	3, 0x0
ProductIterable2_field_first:
	.quad	ProductIterable2_getter_first
	.quad	ProductIterable2_setter_first
	.size	ProductIterable2_field_first, 16

	.type	ProductIterable2_field_second,@object # @ProductIterable2_field_second
	.p2align	3, 0x0
ProductIterable2_field_second:
	.quad	ProductIterable2_getter_second
	.quad	ProductIterable2_setter_second
	.size	ProductIterable2_field_second, 16

	.type	ProductIterator2_field_first_iterator,@object # @ProductIterator2_field_first_iterator
	.p2align	3, 0x0
ProductIterator2_field_first_iterator:
	.quad	ProductIterator2_getter_first_iterator
	.quad	ProductIterator2_setter_first_iterator
	.size	ProductIterator2_field_first_iterator, 16

	.type	ProductIterator2_field_second_iterator,@object # @ProductIterator2_field_second_iterator
	.p2align	3, 0x0
ProductIterator2_field_second_iterator:
	.quad	ProductIterator2_getter_second_iterator
	.quad	ProductIterator2_setter_second_iterator
	.size	ProductIterator2_field_second_iterator, 16

	.type	ProductIterator2_field_second_iterable,@object # @ProductIterator2_field_second_iterable
	.p2align	3, 0x0
ProductIterator2_field_second_iterable:
	.quad	ProductIterator2_getter_second_iterable
	.quad	ProductIterator2_setter_second_iterable
	.size	ProductIterator2_field_second_iterable, 16

	.type	ProductIterator2_field_current_first,@object # @ProductIterator2_field_current_first
	.p2align	3, 0x0
ProductIterator2_field_current_first:
	.quad	ProductIterator2_getter_current_first
	.quad	ProductIterator2_setter_current_first
	.size	ProductIterator2_field_current_first, 16

	.type	Integer_field_value,@object     # @Integer_field_value
	.p2align	3, 0x0
Integer_field_value:
	.quad	Integer_getter_value
	.quad	Integer_setter_value
	.size	Integer_field_value, 16

	.type	Integer2_field_value,@object    # @Integer2_field_value
	.p2align	3, 0x0
Integer2_field_value:
	.quad	Integer2_getter_value
	.quad	Integer2_setter_value
	.size	Integer2_field_value, 16

	.type	Animal_field_age,@object        # @Animal_field_age
	.p2align	3, 0x0
Animal_field_age:
	.quad	Animal_getter_age
	.quad	Animal_setter_age
	.size	Animal_field_age, 16

	.type	Animal_field_hp,@object         # @Animal_field_hp
	.p2align	3, 0x0
Animal_field_hp:
	.quad	Animal_getter_hp
	.quad	Animal_setter_hp
	.size	Animal_field_hp, 16

	.type	Animal_field_skill,@object      # @Animal_field_skill
	.p2align	3, 0x0
Animal_field_skill:
	.quad	Animal_getter_skill
	.quad	Animal_setter_skill
	.size	Animal_field_skill, 16

	.type	Beaver_field_color,@object      # @Beaver_field_color
	.p2align	3, 0x0
Beaver_field_color:
	.quad	Beaver_getter_color
	.quad	Beaver_setter_color
	.size	Beaver_field_color, 16

	.type	Beaver_field_name,@object       # @Beaver_field_name
	.p2align	3, 0x0
Beaver_field_name:
	.quad	Beaver_getter_name
	.quad	Beaver_setter_name
	.size	Beaver_field_name, 16

	.type	ListNode_field_data,@object     # @ListNode_field_data
	.p2align	3, 0x0
ListNode_field_data:
	.quad	ListNode_getter_data
	.quad	ListNode_setter_data
	.size	ListNode_field_data, 16

	.type	ListNode_field_next,@object     # @ListNode_field_next
	.p2align	3, 0x0
ListNode_field_next:
	.quad	ListNode_getter_next
	.quad	ListNode_setter_next
	.size	ListNode_field_next, 16

	.type	ListIterator_field_node,@object # @ListIterator_field_node
	.p2align	3, 0x0
ListIterator_field_node:
	.quad	ListIterator_getter_node
	.quad	ListIterator_setter_node
	.size	ListIterator_field_node, 16

	.type	string_string.17,@object        # @string_string.17
string_string.17:
	.asciz	"%s\n"
	.size	string_string.17, 4

	.type	float_string,@object            # @float_string
	.weak	float_string
float_string:
	.asciz	"%f\n"
	.size	float_string, 4

	.type	exception_message,@object       # @exception_message
	.p2align	4, 0x0
exception_message:
	.asciz	"Error: uncaught exception. Program aborted.\n"
	.size	exception_message, 45

	.type	into_caller_buf,@object         # @into_caller_buf
	.section	.tbss,"awT",@nobits
	.weak	into_caller_buf
	.p2align	4, 0x0
into_caller_buf:
	.zero	24
	.size	into_caller_buf, 24

	.type	current_coroutine,@object       # @current_coroutine
	.weak	current_coroutine
	.p2align	3, 0x0
current_coroutine:
	.quad	0
	.size	current_coroutine, 8

	.type	always_one,@object              # @always_one
	.section	.tdata,"awT",@progbits
	.weak	always_one
always_one:
	.byte	1                               # 0x1
	.size	always_one, 1

	.type	current_ptr,@object             # @current_ptr
	.section	.tbss,"awT",@nobits
	.p2align	3, 0x0
current_ptr:
	.quad	0
	.size	current_ptr, 8

	.section	".note.GNU-stack","",@progbits
